class C{  public void updateBusinessObjectDataStatus(BusinessObjectDataEntity businessObjectDataEntity,String status){  BusinessObjectDataStatusEntity businessObjectDataStatusEntity=businessObjectDataStatusDaoHelper.getBusinessObjectDataStatusEntity(status);  String oldStatus=businessObjectDataEntity.getStatus().getCode();  businessObjectDataEntity.setStatus(businessObjectDataStatusEntity);  BusinessObjectDataStatusHistoryEntity businessObjectDataStatusHistoryEntity=new BusinessObjectDataStatusHistoryEntity();  businessObjectDataEntity.getHistoricalStatuses().add(businessObjectDataStatusHistoryEntity);  businessObjectDataStatusHistoryEntity.setBusinessObjectData(businessObjectDataEntity);  businessObjectDataStatusHistoryEntity.setStatus(businessObjectDataStatusEntity);  businessObjectDataDao.saveAndRefresh(businessObjectDataEntity);  sqsNotificationEventService.processBusinessObjectDataStatusChangeNotificationEvent(businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity),businessObjectDataStatusEntity.getCode(),oldStatus);}  }
class C{  public Dictionary(){  dict=new HashMap();}  }
class C{  public static boolean equals(final Locale localeA,final Locale localeB){  return localeA == localeB || Strings.equals(localeA.getLanguage(),localeB.getLanguage()) && Strings.equals(localeA.getCountry(),localeB.getCountry()) && Strings.equals(localeA.getVariant(),localeB.getVariant());}  }
class C{  private void updateConnection(final String date,final String name,final int newConnections){  Connection conn=getSQLConnection();  try (Statement st=conn.createStatement()){    if (databaseType == POSTGRESQL) {      st.execute("INSERT INTO " + tablePrefix + "connections VALUES ('"+ name+ "', "+ newConnections+ ", '"+ date+ "')"+ " ON CONFLICT (playername) DO UPDATE SET (connections,date)=('"+ newConnections+ "','"+ date+ "')");    } else {      st.execute("REPLACE INTO " + tablePrefix + "connections VALUES ('"+ name+ "', "+ newConnections+ ", '"+ date+ "')");    }  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while updating connection: ",e);  }}  }
class C{  public PolarPoint(){  this(0,0);}  }
class C{  private Shape decodeInterior(int width,int height){  path.reset();  path.moveTo(1,1);  path.lineTo(width - 2,1);  path.lineTo(width - 2,height - 3);  path.lineTo(width - 3,height - 2);  path.lineTo(3,height - 2);  path.lineTo(2,height - 3);  path.closePath();  return path;}  }
class C{  public boolean isDrawBg(){  return drawBg;}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  public CLabel(String label,Component field){  this(label,TRAILING);  setLabelFor(field);}  }
class C{  public Profile createProfile(Profile profile) throws BusinessException, JAXBException, IOException {  if (null == profile.getProfileData()) {    throw new BusinessException("Create new profile.",ConfigurationInterfaceErrorCodeEnum.PROFILE_DOES_NOT_HAVE_CORRECT_PROFILE_DATA);  }  profile.setId(getRandomUUIDString());  profile.setCreatedDate(new Date());  existingProfiles.put(profile.getId(),profile);  saveProfile(profile);  return profile;}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.FAULT;}  }
class C{  private View findFocusableViewInMyBounds(final boolean topFocus,final int top,View preferredFocusable){  final int fadingEdgeLength=(mHorizontal ? getHorizontalFadingEdgeLength() : getVerticalFadingEdgeLength()) / 2;  final int topWithoutFadingEdge=top + fadingEdgeLength;  final int bottomWithoutFadingEdge=top + (mHorizontal ? getWidth() : getHeight()) - fadingEdgeLength;  if ((preferredFocusable != null) && ((mHorizontal ? preferredFocusable.getLeft() : preferredFocusable.getTop()) < bottomWithoutFadingEdge) && ((mHorizontal ? preferredFocusable.getRight() : preferredFocusable.getBottom()) > topWithoutFadingEdge)) {    return preferredFocusable;  }  return findFocusableViewInBounds(topFocus,topWithoutFadingEdge,bottomWithoutFadingEdge);}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String fastaFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.fastaFileNameTemplate);  final String tempOptionCheckOutputFileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.tempOptionCheckOutputFileTemplate);  InputStream is=null;  boolean isTOptionAvailable=isTOptionAvailable(tempOptionCheckOutputFileName);  List<String> command=new ArrayList<String>();  command.add(this.perlCommand);  command.add("-I");  command.add(this.perlLibrary);  command.add(this.fullPathToSignalPBinary);  command.addAll(this.getBinarySwitchesAsList());  if (isTOptionAvailable) {    LOGGER.info("T option is available in this version of SignalP.");    command.add("-T");    command.add(temporaryFileDirectory);  } else {    LOGGER.info("T option is not available in this version of SignalP.");  }  command.add(fastaFilePathName);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(command.toString());  }  return command;}  }
class C{  private void action_loadBOM(){  int M_Product_ID=getM_Product_ID();  if (M_Product_ID == 0)   return;  MProduct product=MProduct.get(getCtx(),M_Product_ID);  DefaultMutableTreeNode parent=new DefaultMutableTreeNode(productSummary(product,false));  dataBOM.clear();  m_level=0;  if (isImplosion()) {    for (    MPPProductBOMLine bomline : MPPProductBOMLine.getByProduct(product)) {      parent.add(parent(bomline));    }    m_tree=new JTree(parent);  } else {    for (    MPPProductBOM bom : MPPProductBOM.getProductBOMs(product)) {      parent.add(parent(bom));    }    m_tree=new JTree(parent);  }  m_tree.addTreeSelectionListener(this);  treePane.getViewport().add(m_tree,null);  loadTableBOM();  dataPane.getViewport().add(tableBOM,null);  splitPane.setDividerLocation(DIVIDER_LOCATION);}  }
class C{  public static ContainerDescription fromVirtualFolderContainer(IContainer container){  return fromContainer(container,true);}  }
class C{  protected DoubleLiteralImpl(){  super();}  }
class C{  public boolean isEnd(){  return end;}  }
class C{  protected void deepCopyIgnoringNulls(Entity source,Entity dest){  for (  MetaProperty srcProperty : source.getMetaClass().getProperties()) {    String name=srcProperty.getName();    if (!PersistenceHelper.isLoaded(source,name)) {      continue;    }    if (srcProperty.isReadOnly()) {      continue;    }    Object value=source.getValue(name);    if (value == null) {      continue;    }    if (srcProperty.getRange().isClass()) {      MetadataTools metadataTools=metadata.getTools();      if (!metadataTools.isOwningSide(srcProperty))       continue;      Class refClass=srcProperty.getRange().asClass().getJavaClass();      if (!metadataTools.isPersistent(refClass))       continue;      if (srcProperty.getRange().getCardinality().isMany()) {        if (!metadataTools.isOwningSide(srcProperty))         continue;        Collection<Entity> srcCollection=(Collection)value;        Collection<Entity> dstCollection=dest.getValue(name);        if (dstCollection == null)         throw new RuntimeException("Collection is null: " + srcProperty);        boolean equal=srcCollection.size() == dstCollection.size();        if (equal) {          if (srcProperty.getRange().isOrdered()) {            equal=Arrays.equals(srcCollection.toArray(),dstCollection.toArray());          } else {            equal=CollectionUtils.isEqualCollection(srcCollection,dstCollection);          }        }        if (!equal) {          dstCollection.clear();          for (          Entity srcRef : srcCollection) {            Entity reloadedRef=findOrCreate(refClass,srcRef.getId());            dstCollection.add(reloadedRef);            deepCopyIgnoringNulls(srcRef,reloadedRef);          }        }      } else {        Entity srcRef=(Entity)value;        Entity destRef=dest.getValue(name);        if (srcRef.equals(destRef)) {          deepCopyIgnoringNulls(srcRef,destRef);        } else {          Entity reloadedRef=findOrCreate(refClass,srcRef.getId());          dest.setValue(name,reloadedRef);          deepCopyIgnoringNulls(srcRef,reloadedRef);        }      }    } else {      dest.setValue(name,value);    }  }}  }
class C{  IgfsInputStreamImpl(IgfsContext igfsCtx,IgfsPath path,@Nullable IgfsEntryInfo fileInfo,int prefetchBlocks,int seqReadsBeforePrefetch,@Nullable IgfsSecondaryFileSystemPositionedReadable secReader,long len,int blockSize,long blocksCnt,boolean proxy){  assert igfsCtx != null;  assert path != null;  this.igfsCtx=igfsCtx;  this.path=path;  this.fileInfo=fileInfo;  this.prefetchBlocks=prefetchBlocks;  this.seqReadsBeforePrefetch=seqReadsBeforePrefetch;  this.secReader=secReader;  this.len=len;  this.blockSize=blockSize;  this.blocksCnt=blocksCnt;  this.proxy=proxy;  log=igfsCtx.kernalContext().log(IgfsInputStream.class);  maxLocCacheSize=(prefetchBlocks > 0 ? prefetchBlocks : 1) * 3 / 2;  locCache=new LinkedHashMap<>(maxLocCacheSize,1.0f);  pendingFuts=new GridConcurrentHashSet<>(prefetchBlocks > 0 ? prefetchBlocks : 1);  igfsCtx.metrics().incrementFilesOpenedForRead();}  }
class C{  public void onAttackBlocked(ItemStack stack,EntityLivingBase attacked,float damage,DamageSource source){  if (!attacked.worldObj.isRemote && source.getEntity() instanceof EntityLivingBase) {    EntityLivingBase attacker=(EntityLivingBase)source.getEntity();    ItemStack activeItem=attacker.getActiveItemStack();    if (activeItem != null && activeItem.getItem() instanceof ItemAxe) {      float attackStrength=attacker instanceof EntityPlayer ? ((EntityPlayer)attacker).getCooledAttackStrength(0.5F) : 1.0F;      float criticalChance=0.25F + (float)EnchantmentHelper.getEfficiencyModifier(attacker) * 0.05F;      if (attacker.isSprinting() && attackStrength > 0.9F) {        criticalChance+=0.75F;      }      if (attacked.worldObj.rand.nextFloat() < criticalChance) {        if (attacked instanceof EntityPlayer) {          ((EntityPlayer)attacked).getCooldownTracker().setCooldown(this,100);          attacked.stopActiveHand();        }        attacked.worldObj.setEntityState(attacked,(byte)30);      }    }  }}  }
class C{  public static Properties load(final Class<?> clazz,final String resource){  Properties properties=new Properties();  InputStream inputStream=null;  try {    inputStream=ResourceLoader.getResourceAsStream(clazz,resource);    properties=loadProperties(inputStream);  } catch (  SaaSSystemException e) {  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {      }    }  }  return properties;}  }
class C{  public void test_wrap_03() throws SSLException {  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10).asReadOnlyBuffer();  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,0,bbA.length,bb);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.LINE_END;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementaddnewattribute.class,args);}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,splitPane);}  }
class C{  private void convertNodes(final Collection<INaviViewNode> nodes,final Graph2D graph2D,final Map<INaviViewNode,Node> rawNodeToNodeMap,final ZyGraphViewSettings graphSettings){  for (  final INaviViewNode node : nodes) {    final Pair<Node,NaviNode> result=ZyGraphNodeBuilder.convertNode(node,graph2D,graphSettings);    rawNodeToNodeMap.put(node,result.first());    m_ynodeToNodeMap.put(result.first(),result.second());  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void createLoanRescheduleRequest(){  System.out.println("---------------------------------CREATING LOAN RESCHEDULE REQUEST------------------------------------------");  final String requestJSON=new LoanRescheduleRequestTestBuilder().build(this.loanId.toString());  this.loanRescheduleRequestId=this.loanRescheduleRequestHelper.createLoanRescheduleRequest(requestJSON);  this.loanRescheduleRequestHelper.verifyCreationOfLoanRescheduleRequest(this.loanRescheduleRequestId);  System.out.println("Successfully created loan reschedule request (ID: " + this.loanRescheduleRequestId + ")");}  }
class C{  private void encodeSourceAndPersistContentList(Set<Content> contentSet){  for (  Content content : contentSet) {    if (content instanceof SSP && !((SSP)content).getDOM().isEmpty()) {      try {        ((SSP)content).setSource(MD5Encoder.MD5(((SSP)content).getSource()));      } catch (      NoSuchAlgorithmException|UnsupportedEncodingException ex) {        LOGGER.warn(ex);      }    }    try {      contentDataService.saveOrUpdate(content);    } catch (    PersistenceException pe) {      LOGGER.warn(content.getURI() + " could not have been persisted due to " + pe.getLocalizedMessage());      if (content instanceof SSP && !((SSP)content).getDOM().isEmpty()) {        ((SSP)content).setDOM("");        contentDataService.saveOrUpdate(content);      }    }  }}  }
class C{  public EscapedReader(Reader fos){  super(fos);}  }
class C{  private void closeBluetoothGatt(){  if (liteBluetooth.isConnectingOrConnected()) {    liteBluetooth.closeBluetoothGatt();  }}  }
class C{  public static IStatus validateIdentifier(String id,String sourceLevel,String complianceLevel){  if (scannedIdentifier(id,sourceLevel,complianceLevel) != null) {    return Status.OK_STATUS;  } else {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,id + " is not a valid Java identifier",null);  }}  }
class C{  private static void toggleBreakpoint(final BreakpointManager manager,final BreakpointAddress address){  if (manager.hasBreakpoint(BreakpointType.REGULAR,address)) {    final BreakpointStatus status=manager.getBreakpointStatus(address,BreakpointType.REGULAR);    if (status == BreakpointStatus.BREAKPOINT_DISABLED) {      manager.setBreakpointStatus(Sets.newHashSet(address),BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_ENABLED);    } else     if ((status == BreakpointStatus.BREAKPOINT_ACTIVE) || (status == BreakpointStatus.BREAKPOINT_INACTIVE) || (status == BreakpointStatus.BREAKPOINT_ENABLED)|| (status == BreakpointStatus.BREAKPOINT_HIT)) {      manager.setBreakpointStatus(Sets.newHashSet(address),BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_DISABLED);    }  }}  }
class C{  public static Scope fromString(String scope){  for (int i=0; i < VALUES.length; i++) {    if (VALUES[i].toString().equals(scope)) {      return VALUES[i];    }  }  throw new IllegalArgumentException(LocalizedStrings.Scope_0_IS_NOT_A_VALID_STRING_REPRESENTATION_OF_1.toLocalizedString(new Object[]{scope,Scope.class.getName()}));}  }
class C{  public boolean contains(final AbstractInsnNode insn){  AbstractInsnNode i=first;  while (i != null && i != insn) {    i=i.next;  }  return i != null;}  }
class C{  private boolean isPseudoVarId(long varId){  return (varId < 0 && varId > -65535);}  }
class C{  public Object call(final PageContext pc) throws Throwable {  return null;}  }
class C{  Rule postfixIncrementExpressionChaining(){  return Sequence(dotNewExpressionChaining(),set(),ZeroOrMore(Sequence(FirstOf(String("++"),String("--")).label("operator"),group.basics.optWS()).label("operatorCt")),set(actions.createUnaryPostfixExpression(value(),nodes("ZeroOrMore/operatorCt/operator"),texts("ZeroOrMore/operatorCt/operator"))));}  }
class C{  protected void removeCombination(KeyCombination keyCombination,CombinationCallback combinationCallback){synchronized (combinations) {    if (combinations.containsKey(keyCombination) && combinations.get(keyCombination).contains(combinationCallback)) {synchronized (combinations.get(keyCombination)) {        combinations.get(keyCombination).remove(combinationCallback);      }    }  }}  }
class C{  public static UUID xorUUID(UUID a,UUID b){  return new UUID(a.getMostSignificantBits() ^ b.getMostSignificantBits(),a.getLeastSignificantBits() ^ b.getLeastSignificantBits());}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node var : vars) {    if (!variables.contains(var)) {      throw new IllegalArgumentException("All vars must be original vars");    }  }  int[] indices=new int[vars.size()];  for (int i=0; i < indices.length; i++) {    indices[i]=indexMap.get(vars.get(i));  }  ICovarianceMatrix newCovMatrix=covMatrix.getSubmatrix(indices);  double alphaNew=getAlpha();  return new IndTestFisherZRecursive(newCovMatrix,alphaNew);}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public MutableBucketData(final int branchingFactor,final boolean hasVersionTimestamps,final boolean hasDeleteMarkers,final boolean hasRawRecords){  keys=new MutableKeyBuffer(branchingFactor);  vals=new MutableValueBuffer(branchingFactor);  versionTimestamps=(hasVersionTimestamps ? new long[branchingFactor] : null);  minimumVersionTimestamp=Long.MAX_VALUE;  maximumVersionTimestamp=Long.MIN_VALUE;  deleteMarkers=(hasDeleteMarkers ? new boolean[branchingFactor] : null);  rawRecords=(hasRawRecords ? new boolean[branchingFactor] : null);}  }
class C{  public void checkAndHandleLastVisibleCellChange(){  int currentLastVisibleItem=mCurrentFirstVisibleItem + mCurrentVisibleItemCount;  int previousLastVisibleItem=mPreviousFirstVisibleItem + mPreviousVisibleItemCount;  if (currentLastVisibleItem != previousLastVisibleItem) {    if (mCellIsMobile && mMobileItemId != INVALID_ID) {      updateNeighborViewsForID(mMobileItemId);      handleCellSwitch();    }  }}  }
class C{  public void addAll(Stats values){  if (values.count() == 0) {    return;  }  if (count == 0) {    count=values.count();    mean=values.mean();    sumOfSquaresOfDeltas=values.sumOfSquaresOfDeltas();    min=values.min();    max=values.max();  } else {    count+=values.count();    if (isFinite(mean) && isFinite(values.mean())) {      double delta=values.mean() - mean;      mean+=delta * values.count() / count;      sumOfSquaresOfDeltas+=values.sumOfSquaresOfDeltas() + delta * (values.mean() - mean) * values.count();    } else {      mean=calculateNewMeanNonFinite(mean,values.mean());      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,values.min());    max=Math.max(max,values.max());  }}  }
class C{  @Override public Iterator<Profile> iterator(){  return profiles.iterator();}  }
class C{  public int hashCode(){  return 0;}  }
class C{  private boolean handleIntercept(MotionEvent event){  if (!mCanIntercept) {    return super.onInterceptTouchEvent(event);  }  if (mTouchedDotView == null || mTouchedDotView.getVisibility() != VISIBLE) {    return super.onInterceptTouchEvent(event);  }  initCircleSize();  return true;}  }
class C{  public static String requestPath(URL url){  String fileOnly=url.getFile();  if (fileOnly == null) {    return "/";  } else   if (!fileOnly.startsWith("/")) {    return "/" + fileOnly;  } else {    return fileOnly;  }}  }
class C{  public static void registerTypes(ExecutionConfig config){  for (  Class<?> c : SerialConfig.DEFAULT_REGISTERED_TYPES) {    Class<?> serializerClass=DEFAULT_SERIALIZERS.getOrDefault(c,(Class<?>)KryoSerializer.class);    config.registerTypeWithKryoSerializer(c,(Class<? extends Serializer<?>>)serializerClass);  }  for (  Class<?> c : KryoSerializer.ADDITIONAL_REGISTERED_TYPES) {    Class<?> serializerClass=DEFAULT_SERIALIZERS.getOrDefault(c,(Class<?>)KryoSerializer.class);    config.registerTypeWithKryoSerializer(c,(Class<? extends Serializer<?>>)serializerClass);  }}  }
class C{  private void seek() throws IOException {  if (!seekNeeded) {    if (curBlockInfo.hasNext()) {      curBlockInfo.setNext();      initBlockDecoder();      return;    }    seekPos=curPos;  }  seekNeeded=false;  if (seekPos >= uncompressedSize) {    curPos=seekPos;    blockDecoder=null;    endReached=true;    return;  }  endReached=false;  locateBlockByPos(curBlockInfo,seekPos);  if (!(curPos > curBlockInfo.uncompressedOffset && curPos <= seekPos)) {    in.seek(curBlockInfo.compressedOffset);    check=Check.getInstance(curBlockInfo.getCheckType());    initBlockDecoder();    curPos=curBlockInfo.uncompressedOffset;  }  if (seekPos > curPos) {    long skipAmount=seekPos - curPos;    if (blockDecoder.skip(skipAmount) != skipAmount)     throw new CorruptedInputException();    curPos=seekPos;  }}  }
class C{  @DSComment("no relevant action/ recycle the node for reuse") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.382 -0500",hash_original_method="E5AEF2A1BB846A92BC2380F50D2ACE39",hash_generated_method="28E3232D4639B15DA8B0278859F6B718") public void recycle(){  if (mIsInPool) {    throw new IllegalStateException("Info already recycled!");  }  clear();synchronized (sPoolLock) {    if (sPoolSize <= MAX_POOL_SIZE) {      mNext=sPool;      sPool=this;      mIsInPool=true;      sPoolSize++;    }  }}  }
class C{  public static void checkClassSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkClassTypeSignature(signature,pos);  while (getChar(signature,pos) == 'L') {    pos=checkClassTypeSignature(signature,pos);  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public boolean process(String parameter){  long start=System.currentTimeMillis();  StringBuffer param=new StringBuffer(parameter);  param.append("&PARTNER=").append(p_mpp.getPartnerID()).append("&VENDOR=").append(p_mpp.getVendorID()).append("&USER=").append(p_mpp.getUserID()).append("&PWD=").append(p_mpp.getPassword());  SDKProperties.setHostAddress(p_mpp.getHostAddress());  SDKProperties.setHostPort(p_mpp.getHostPort());  SDKProperties.setTimeOut(getTimeout());  SDKProperties.setProxyAddress(p_mpp.getProxyAddress());  SDKProperties.setProxyPort(p_mpp.getProxyPort());  SDKProperties.setProxyLogin(p_mpp.getProxyLogon());  SDKProperties.setProxyPassword(p_mpp.getProxyPassword());  m_pp=new PayflowAPI();  String requestId=m_pp.generateRequestId();  String response=m_pp.submitTransaction(param.toString(),requestId);  ClientInfo clInfo=new ClientInfo();  m_pp.setClientInfo(clInfo);  String transErrors=m_pp.getTransactionContext().toString();  if (transErrors != null && transErrors.length() > 0) {    log.log(Level.SEVERE,"Transaction Errors from SDK = \n" + transErrors);  }  p_mp.setR_Result("");  p_mp.setR_Info(response);  StringTokenizer st=new StringTokenizer(response,"&",false);  while (st.hasMoreTokens()) {    String token=st.nextToken();    int pos=token.indexOf('=');    String name=token.substring(0,pos);    String value=token.substring(pos + 1);    if (name.equals("RESULT")) {      p_mp.setR_Result(value);      m_ok=RESULT_OK.equals(value);    } else     if (name.equals("PNREF"))     p_mp.setR_PnRef(value); else     if (name.equals("RESPMSG"))     p_mp.setR_RespMsg(value); else     if (name.equals("AUTHCODE"))     p_mp.setR_AuthCode(value); else     if (name.equals("AVSADDR"))     p_mp.setR_AvsAddr(value); else     if (name.equals("AVSZIP"))     p_mp.setR_AvsZip(value); else     if (name.equals("IAVS"))     ; else     if (name.equals("CVV2MATCH"))     ; else     log.log(Level.SEVERE,"Response unknown = " + token);  }  return m_ok;}  }
class C{  private static final boolean isWordPart(char aChar){  return Character.isLetterOrDigit(aChar) || aChar == '-' || aChar == '_';}  }
class C{  public IPoint[] compute(IPoint[] points){  int n=points.length;  new HeapSort<IPoint>().sort(points,0,n - 1,IPoint.xy_sorter);  if (n < 3) {    return points;  }  PartialHull upper=new PartialHull(points[0],points[1]);  for (int i=2; i < n; i++) {    upper.add(points[i]);    while (upper.hasThree() && upper.areLastThreeNonRight()) {      upper.removeMiddleOfLastThree();    }  }  PartialHull lower=new PartialHull(points[n - 1],points[n - 2]);  for (int i=n - 3; i >= 0; i--) {    lower.add(points[i]);    while (lower.hasThree() && lower.areLastThreeNonRight()) {      lower.removeMiddleOfLastThree();    }  }  IPoint[] hull=new IPoint[upper.size() + lower.size() - 2];  System.arraycopy(upper.getPoints(),0,hull,0,upper.size());  System.arraycopy(lower.getPoints(),1,hull,upper.size(),lower.size() - 2);  return hull;}  }
class C{  private boolean adjustTempGroupSelection(){  Rectangle selectRect=docPanel.getSelectionRect().getBounds();  Grouping tempGroup=docPanel.getTempGroup();  Vector<MathObject> pageObjects=docPanel.getSelectionRect().getParentPage().getObjects();  Vector<MathObject> collisionObjects=new Vector<>();  for (  MathObject mObj : pageObjects) {    if (selectRect.intersects(mObj.getBounds())) {      collisionObjects.add(mObj);    }  }  if (collisionObjects.isEmpty()) {    docPanel.ungroupTempGroup();    docPanel.setFocusedObject(null);    return true;  }  if (collisionObjects.size() == 1) {    MathObject contactedObj=collisionObjects.get(0);    if (contactedObj.equals(docPanel.getFocusedObject())) {      ;      if (contactedObj != tempGroup) {        collisionObjects.remove(contactedObj);        return true;      }    } else {      docPanel.setFocusedObject(contactedObj);      collisionObjects.remove(contactedObj);      return true;    }  }  if (collisionObjects.contains(tempGroup)) {    MathObject mObj;    for (int i=0; i < tempGroup.getObjects().size(); i++) {      mObj=tempGroup.getObjects().get(i);      if (!selectRect.intersects(mObj.getBounds())) {        tempGroup.removeObject(mObj);        tempGroup.getParentContainer().addObject(mObj);        mObj.setParentContainer(tempGroup.getParentContainer());        i--;      }    }    collisionObjects.remove(tempGroup);  }  if (!collisionObjects.isEmpty()) {    tempGroup.setParentContainer(collisionObjects.get(0).getParentContainer());    collisionObjects.get(0).getParentContainer().addObject(tempGroup);    for (    MathObject mObj : collisionObjects) {      mObj.getParentContainer().removeObject(mObj);      mObj.setParentContainer(null);      tempGroup.addObjectFromPage(mObj);      mObj.setParentContainer(tempGroup);    }    docPanel.getDoc().refactorPageNumbers();    docPanel.setFocusedObject(tempGroup);  }  if (tempGroup.getParentContainer() != null) {    if (tempGroup.getObjects().size() == 1) {      docPanel.setFocusedObject(tempGroup.getObjects().get(0));      docPanel.ungroupTempGroup();    }  }  return false;}  }
class C{  @Override public synchronized void updateTime(int columnIndex,java.sql.Time x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setTime(columnIndex,x);  } else {    this.inserter.setTime(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  @Override public void tupleNotMatched(Map<K,V> tuple){  icount++;}  }
class C{  public LocalVariableBinding localVariableBinding(){switch (this.bits & ASTNode.RestrictiveFlagMASK) {case Binding.FIELD:    break;case Binding.LOCAL:  return (LocalVariableBinding)this.binding;}return null;}  }
class C{  private String exec(String js,boolean async){  if (async) {    context.browser.execute(js);    return null;  } else {    return context.browser.executeAndReturnString(js);  }}  }
class C{  public static boolean isRequest(final int code){  return code >= REQUEST_CODE_LOWER_BOUND && code <= REQUEST_CODE_UPPER_BOUND;}  }
class C{  public double[] rhumbLineDoubles(){  return toDoubles(rhumbLineShape()).get(0);}  }
class C{  public static GenericEntity createGenericEntity(GenericEntity value){  if (value == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null value parameter");  }  GenericEntity newEntity=new GenericEntity();  newEntity.init(value);  return newEntity;}  }
class C{  public BusinessObjectDataEntity createDatabaseEntitiesForFinalizeRestoreTesting(BusinessObjectDataKey businessObjectDataKey,String originStorageName,String originBucketName,String originStorageUnitStatus,String glacierStorageName,String glacierStorageBucketName,String glacierStorageUnitStatus,String glacierStorageDirectoryPath){  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(businessObjectDataKey,AbstractServiceTest.LATEST_VERSION_FLAG_SET,AbstractServiceTest.BDATA_STATUS);  StorageEntity originStorageEntity;  if (originBucketName != null) {    originStorageEntity=storageDaoTestHelper.createStorageEntity(originStorageName,StoragePlatformEntity.S3,configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),originBucketName);  } else {    originStorageEntity=storageDaoTestHelper.createStorageEntity(originStorageName,StoragePlatformEntity.S3);  }  StorageEntity glacierStorageEntity;  if (glacierStorageBucketName != null) {    glacierStorageEntity=storageDaoTestHelper.createStorageEntity(glacierStorageName,StoragePlatformEntity.GLACIER,configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),glacierStorageBucketName);  } else {    glacierStorageEntity=storageDaoTestHelper.createStorageEntity(glacierStorageName,StoragePlatformEntity.GLACIER);  }  StorageUnitEntity originStorageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(originStorageEntity,businessObjectDataEntity,originStorageUnitStatus,AbstractServiceTest.NO_STORAGE_DIRECTORY_PATH);  StorageUnitEntity glacierStorageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(glacierStorageEntity,businessObjectDataEntity,glacierStorageUnitStatus,glacierStorageDirectoryPath);  glacierStorageUnitEntity.setParentStorageUnit(originStorageUnitEntity);  for (  String relativeFilePath : AbstractServiceTest.LOCAL_FILES) {    storageFileDaoTestHelper.createStorageFileEntity(originStorageUnitEntity,String.format("%s/%s",AbstractServiceTest.TEST_S3_KEY_PREFIX,relativeFilePath),AbstractServiceTest.FILE_SIZE_1_KB,AbstractServiceTest.ROW_COUNT);  }  return businessObjectDataEntity;}  }
class C{  public static boolean isLocal(final String host,final InetAddress hostaddress){  return isLocal(host,hostaddress,true);}  }
class C{  public ElementKindPicker(Composite parent,int style){  super(parent,style);  setLayout(new GridLayout());  Composite buttonBar=configButtonBar();  buttonBar.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));  Table elementKindTable=new Table(parent,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);  elementKindTable.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));  elementKindTable.setHeaderVisible(true);  EditColTableDef.setupTable(TABLE_DEF,elementKindTable);  elementKindViewer=new TableViewer(elementKindTable);  elementKindViewer.setContentProvider(new ArrayContentProvider());  LabelProvider labelProvider=new LabelProvider();  elementKindViewer.setLabelProvider(labelProvider);  configSorters(elementKindTable);  setSortColumn(elementKindTable.getColumn(0),0,SWT.DOWN);}  }
class C{  private void updateProgress(int currentProgress,int totalCount){  jobProgressBar.setMaximum(totalCount);  jobProgressBar.setValue(totalCount != 0 ? currentProgress : jobProgressBar.getMinimum());  jobProgressBar.setString(totalCount != 0 ? currentProgress + "/" + totalCount : "");  jobProgressBar.setIndeterminate(totalCount == 0);}  }
class C{  public static String formatDate(Date date,String dateTimeFormat,Locale locale,TimeZone timeZone){  return UtilDateTime.toDateFormat(dateTimeFormat,timeZone,locale).format(date);}  }
class C{  public FeatureVectorParser(String exampleFile,String lexiconFile){  this(exampleFile);  ObjectInputStream lexIn=null;  try {    lexIn=new ObjectInputStream(new FileInputStream(lexiconFile));  } catch (  Exception e) {    System.err.println("Can't open '" + lexiconFile + "' for input:");    e.printStackTrace();    System.exit(1);  }  try {    lexicon=(Feature[])lexIn.readObject();  } catch (  Exception e) {    System.err.println("Can't read from '" + lexiconFile + "':");    e.printStackTrace();    System.exit(1);  }  try {    lexIn.close();  } catch (  Exception e) {    System.err.println("Can't close '" + lexiconFile + "':");    e.printStackTrace();    System.exit(1);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.CAST_EXPRESSION__EXPRESSION:    setExpression((Expression)newValue);  return;case N4JSPackage.CAST_EXPRESSION__TARGET_TYPE_REF:setTargetTypeRef((TypeRef)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void writeArbitraryObject(Object object,Serializer serializer){  log.debug("writeObject");  Class<?> objectClass=object.getClass();  if (!objectClass.isAnnotationPresent(Anonymous.class)) {    buf.put(AMF.TYPE_CLASS_OBJECT);    putString(buf,serializer.getClassName(objectClass));  } else {    buf.put(AMF.TYPE_OBJECT);  }  for (  Field field : objectClass.getFields()) {    String fieldName=field.getName();    log.debug("Field: {} class: {}",field,objectClass);    if (!serializeField(serializer,objectClass,fieldName,field,null)) {      continue;    }    Object value;    try {      value=field.get(object);    } catch (    IllegalAccessException err) {      continue;    }    putString(buf,fieldName);    serializer.serialize(this,field,null,object,value);  }  buf.put((byte)0x00);  buf.put((byte)0x00);  buf.put(AMF.TYPE_END_OF_OBJECT);}  }
class C{  private String formatLocation(Location location){  return "lat=\"" + COORDINATE_FORMAT.format(location.getLatitude()) + "\" lon=\""+ COORDINATE_FORMAT.format(location.getLongitude())+ "\"";}  }
class C{  public short loadShort(Offset offset){  return this.plus(offset).loadShort();}  }
class C{  public static void toXml(final PluginsCollectionConfig toConvert,final OutputStream stream,Boolean prettyXml) throws JAXBException {  Marshaller varMarshaller=getMarshaller(prettyXml);  varMarshaller.marshal(toConvert,stream);}  }
class C{  public static void dispose(){  disposeColors();  disposeImages();  disposeFonts();  disposeCursors();}  }
class C{  @Override public String toString(){  return toString(0);}  }
class C{  public boolean isSubscriptionConflationEnabled(){  return subscriptionConflationEnabled;}  }
class C{  protected void updateFunctionGroup1(int fns){  this.f0=((fns & CbusConstants.CBUS_F0) == CbusConstants.CBUS_F0);  this.f1=((fns & CbusConstants.CBUS_F1) == CbusConstants.CBUS_F1);  this.f2=((fns & CbusConstants.CBUS_F2) == CbusConstants.CBUS_F2);  this.f3=((fns & CbusConstants.CBUS_F3) == CbusConstants.CBUS_F3);  this.f4=((fns & CbusConstants.CBUS_F4) == CbusConstants.CBUS_F4);}  }
class C{  public TransactionOutput addOutput(TransactionOutput to){  unCache();  to.setParent(this);  outputs.add(to);  adjustLength(outputs.size(),to.length);  return to;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2));}  }
class C{  @Activate protected void activate(Map<String,Object> properties){}  }
class C{  public boolean isDataFlavorSupported(DataFlavor df){  return getDropTargetContext().isDataFlavorSupported(df);}  }
class C{  public Canvas createCa(){  if (ca == null)   ca=new Canvas(bi);  return ca;}  }
class C{  public void occurred(){  m_lastAdded=System.currentTimeMillis();  m_occurrance++;}  }
class C{  public int hashCode(){  return id.hashCode();}  }
class C{  private Object resolveObjectDescriptor(Object getter,Object setter){  return (getter != null ? getter : setter);}  }
class C{  public Operation updateTaskStatus(String task,Operation update) throws IllegalArgumentException {  if (containsKey(task)) {    Operation op=get(task);    Set<String> updatedFields=new HashSet<String>();    updatedFields.addAll(update._changedFields);    for (    String field : updatedFields) {      if (field.equals(Operation.PROGRESS_FIELD)) {        Integer progress=update.getProgress();        if ((progress > 0) && (progress <= 100)) {          op.setProgress(progress);        }      } else       if (field.equals(Operation.MESSAGE_FIELD)) {        String message=update.getMessage();        if (message != null) {          op.setMessage(message);        }      } else       if (field.equals(Operation.STATUS_FIELD)) {        String status=update.getStatus();        if (status != null) {          op.setStatus(status);          if ((status.equalsIgnoreCase(Operation.Status.ready.name().toUpperCase())) || (status.equalsIgnoreCase(Operation.Status.error.name().toUpperCase()))) {            op.setEndTime(Calendar.getInstance());          }        }      } else       if (field.equals(Operation.SERVICE_CODE_FIELD)) {        Integer code=update.getServiceCode();        if (code != null) {          op.setServiceCode(code);        }      } else       if (field.equals(Operation.DESCRIPTION_FIELD) || field.equals(Operation.START_TIME_FIELD) || field.equals(Operation.END_TIME_FIELD)) {        throw new IllegalArgumentException("can not change the field : " + field);      }    }    put(task,op);    return op;  } else {    return null;  }}  }
class C{  @Override public Measure saveMeasure(Metric metric,Double value){  return null;}  }
class C{  @Override public Response destroyContainer(final String containerId){  if (Strings.isNullOrEmpty(containerId)) {    return Response.status(Response.Status.BAD_REQUEST).entity(JsonUtil.toJson(ERROR_KEY,"Invalid container id")).build();  }  Environment environment=findEnvironmentByContainerId(containerId);  if (environment != null) {    try {      ContainerHost containerHost=environment.getContainerHostById(containerId);      environmentManager.destroyContainer(environment.getId(),containerHost.getId(),false);      return Response.ok().build();    } catch (    ContainerHostNotFoundException|EnvironmentNotFoundException|EnvironmentModificationException e) {      LOG.error("Error destroying container #destroyContainer",e);      return Response.serverError().entity(JsonUtil.toJson(ERROR_KEY,e.getMessage())).build();    }  }  return Response.status(Response.Status.NOT_FOUND).build();}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public T field(String name){  sourceBuilder().field(name);  return (T)this;}  }
class C{  public void engineLoad(InputStream stream,char[] password) throws IOException, NoSuchAlgorithmException, CertificateException {synchronized (entries) {    DataInputStream dis;    MessageDigest md=null;    CertificateFactory cf=null;    Hashtable<String,CertificateFactory> cfs=null;    ByteArrayInputStream bais=null;    byte[] encoded=null;    if (stream == null)     return;    if (password != null) {      md=getPreKeyedHash(password);      dis=new DataInputStream(new DigestInputStream(stream,md));    } else {      dis=new DataInputStream(stream);    }    ObjectInputStream ois=null;    try {      int xMagic=dis.readInt();      int xVersion=dis.readInt();      if (((xMagic != JCEKS_MAGIC) && (xMagic != JKS_MAGIC)) || ((xVersion != VERSION_1) && (xVersion != VERSION_2))) {        throw new IOException("Invalid keystore format");      }      if (xVersion == VERSION_1) {        cf=CertificateFactory.getInstance("X509");      } else {        cfs=new Hashtable<String,CertificateFactory>(3);      }      entries.clear();      int count=dis.readInt();      for (int i=0; i < count; i++) {        int tag;        String alias;        tag=dis.readInt();        if (tag == 1) {          PrivateKeyEntry entry=new PrivateKeyEntry();          alias=dis.readUTF();          entry.date=new Date(dis.readLong());          try {            entry.protectedKey=new byte[dis.readInt()];          } catch (          OutOfMemoryError e) {            throw new IOException("Keysize too big");          }          dis.readFully(entry.protectedKey);          int numOfCerts=dis.readInt();          try {            if (numOfCerts > 0) {              entry.chain=new Certificate[numOfCerts];            }          } catch (          OutOfMemoryError e) {            throw new IOException("Too many certificates in " + "chain");          }          for (int j=0; j < numOfCerts; j++) {            if (xVersion == 2) {              String certType=dis.readUTF();              if (cfs.containsKey(certType)) {                cf=cfs.get(certType);              } else {                cf=CertificateFactory.getInstance(certType);                cfs.put(certType,cf);              }            }            try {              encoded=new byte[dis.readInt()];            } catch (            OutOfMemoryError e) {              throw new IOException("Certificate too big");            }            dis.readFully(encoded);            bais=new ByteArrayInputStream(encoded);            entry.chain[j]=cf.generateCertificate(bais);          }          entries.put(alias,entry);        } else         if (tag == 2) {          TrustedCertEntry entry=new TrustedCertEntry();          alias=dis.readUTF();          entry.date=new Date(dis.readLong());          if (xVersion == 2) {            String certType=dis.readUTF();            if (cfs.containsKey(certType)) {              cf=cfs.get(certType);            } else {              cf=CertificateFactory.getInstance(certType);              cfs.put(certType,cf);            }          }          try {            encoded=new byte[dis.readInt()];          } catch (          OutOfMemoryError e) {            throw new IOException("Certificate too big");          }          dis.readFully(encoded);          bais=new ByteArrayInputStream(encoded);          entry.cert=cf.generateCertificate(bais);          entries.put(alias,entry);        } else         if (tag == 3) {          SecretKeyEntry entry=new SecretKeyEntry();          alias=dis.readUTF();          entry.date=new Date(dis.readLong());          try {            ois=new ObjectInputStream(dis);            entry.sealedKey=(SealedObject)ois.readObject();          } catch (          ClassNotFoundException cnfe) {            throw new IOException(cnfe.getMessage());          }          entries.put(alias,entry);        } else {          throw new IOException("Unrecognized keystore entry");        }      }      if (password != null) {        byte computed[], actual[];        computed=md.digest();        actual=new byte[computed.length];        dis.readFully(actual);        for (int i=0; i < computed.length; i++) {          if (computed[i] != actual[i]) {            throw new IOException("Keystore was tampered with, or " + "password was incorrect",new UnrecoverableKeyException("Password verification failed"));          }        }      }    }  finally {      if (ois != null) {        ois.close();      } else {        dis.close();      }    }  }}  }
class C{  public int read(long position,ByteBuffer dst,int dstStart,int dstLength) throws IOException {  final int bufferPosition=checkOffset(position,dstLength);  final long srcAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  if (dst.isDirect()) {    final long dstAddress=PlatformDependent.directBufferAddress(dst) + dstStart;    PlatformDependent.copyMemory(srcAddress,dstAddress,dstLength);  } else {    final byte[] dstArray=dst.array();    PlatformDependent.copyMemory(srcAddress,dstArray,dstStart,dstLength);  }  position+=dstLength;  if (position > this.length) {    this.length=position;  }  return dstLength;}  }
class C{  public static boolean isSSN(Object value){  String str=Caster.toString(value,null);  if (str == null)   return false;  if (ssnPattern == null)   ssnPattern=Pattern.compile("^[0-9]{3}[-|]{1}[0-9]{2}[-|]{1}[0-9]{4}$");  return ssnPattern.matcher(str.trim()).matches();}  }
class C{  private Boolean equalsImpl(Object o){  if (o == this)   return true;  if (!type.isInstance(o))   return false;  for (  Method memberMethod : getMemberMethods()) {    String member=memberMethod.getName();    Object ourValue=memberValues.get(member);    Object hisValue=null;    AnnotationInvocationHandler hisHandler=asOneOfUs(o);    if (hisHandler != null) {      hisValue=hisHandler.memberValues.get(member);    } else {      try {        hisValue=memberMethod.invoke(o);      } catch (      InvocationTargetException e) {        return false;      }catch (      IllegalAccessException e) {        throw new AssertionError(e);      }    }    if (!memberValueEquals(ourValue,hisValue))     return false;  }  return true;}  }
class C{  public void send(final String text){  if (mRXCharacteristic == null)   return;  if (!TextUtils.isEmpty(text) && mOutgoingBuffer == null) {    final byte[] buffer=mOutgoingBuffer=text.getBytes();    mBufferOffset=0;    final boolean writeRequest=(mRXCharacteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_WRITE) > 0;    if (!writeRequest) {      final int length=Math.min(buffer.length,MAX_PACKET_SIZE);      mBufferOffset+=length;      enqueue(Request.newWriteRequest(mRXCharacteristic,buffer,0,length));    } else {      mBufferOffset=buffer.length;      enqueue(Request.newWriteRequest(mRXCharacteristic,buffer,0,buffer.length));    }  }}  }
class C{  public AugmentedNode<ILineSegment> rightNeighbor(EventPoint ep){  AugmentedNode<ILineSegment> n=state.root();  if (n == null) {    return null;  }  while (n.key() == null) {    AugmentedNode<ILineSegment> lf=n.left();    if (lf.max.pointOnLeft(ep.point)) {      n=n.left();    } else {      n=n.right();    }  }  if (n.key().pointOnLeft(ep.point)) {    return n;  }  return null;}  }
class C{  @Override public void stop(){}  }
class C{  public static boolean hasSchema(short flags){  return isFlagSet(flags,FLAG_HAS_SCHEMA);}  }
class C{  protected boolean isNamespaceAuthorizationAdmin(String userId){  UserEntity userEntity=userDao.getUserByUserId(userId);  return userEntity != null ? userEntity.getNamespaceAuthorizationAdmin() : false;}  }
class C{  public void request(){  if (requestFlag) {    return;  }  lock.lock();  if (!requestFlag) {    requestFlag=true;    requestCount++;    lock.broadcast();  }  lock.unlock();}  }
class C{  public CyclicNumberAxis(double period){  this(period,0.0);}  }
class C{  static public byte[] successor(final byte[] b){  return successor(b,0,b.length);}  }
class C{  public BufferedImage renderXYLineChart(int width,int height,List<Instances> series,String xAxis,String yAxis,List<String> optionalArgs) throws Exception {  BufferedImage osi=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  String plotTitle="Line chart";  String userTitle=getOption(optionalArgs,"-title");  plotTitle=(userTitle != null) ? userTitle : plotTitle;  Plot2D offScreenPlot=new Plot2D();  offScreenPlot.setSize(width,height);  PlotData2D master=new PlotData2D(series.get(0));  master.setPlotName(plotTitle);  boolean[] connectPoints=new boolean[series.get(0).numInstances()];  for (int i=0; i < connectPoints.length; i++) {    connectPoints[i]=true;  }  master.setConnectPoints(connectPoints);  offScreenPlot.setMasterPlot(master);  Instances masterInstances=series.get(0);  int xAx=getIndexOfAttribute(masterInstances,xAxis);  int yAx=getIndexOfAttribute(masterInstances,yAxis);  if (xAx < 0) {    xAx=0;  }  if (yAx < 0) {    yAx=0;  }  offScreenPlot.setXindex(xAx);  offScreenPlot.setYindex(yAx);  offScreenPlot.setCindex(masterInstances.numAttributes() - 1);  String colorAtt=getOption(optionalArgs,"-color");  int tempC=getIndexOfAttribute(masterInstances,colorAtt);  if (tempC >= 0) {    offScreenPlot.setCindex(tempC);  }  if (series.size() > 1) {    for (    Instances plotI : series) {      PlotData2D plotD=new PlotData2D(plotI);      connectPoints=new boolean[plotI.numInstances()];      for (int i=0; i < connectPoints.length; i++) {        connectPoints[i]=true;      }      plotD.setConnectPoints(connectPoints);      offScreenPlot.addPlot(plotD);    }  }  java.awt.Graphics g=osi.getGraphics();  offScreenPlot.paintComponent(g);  return osi;}  }
class C{  @Override public void onCompositorLayout(){  TraceEvent.begin("CompositorViewHolder:layout");  if (mLayoutManager != null) {    mLayoutManager.onUpdate();    if (!DeviceFormFactor.isTablet(getContext()) && mControlContainer != null) {      if (mProgressBarDrawingInfo == null)       mProgressBarDrawingInfo=new DrawingInfo();      mControlContainer.getProgressBarDrawingInfo(mProgressBarDrawingInfo);    } else {      assert mProgressBarDrawingInfo == null;    }    mCompositorView.finalizeLayers(mLayoutManager,mSkipNextToolbarTextureUpdate,mProgressBarDrawingInfo);    if (mSkipNextToolbarTextureUpdate) {      requestRender();    }  }  TraceEvent.end("CompositorViewHolder:layout");  mSkipNextToolbarTextureUpdate=false;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TStructMember.class) {switch (baseFeatureID) {case TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER:      return TypesPackage.TSTRUCT_SETTER__DEFINED_MEMBER;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public TreksAction(GraphWorkbench workbench){  super("Treks");  this.workbench=workbench;}  }
class C{  public DomainHierarchy createDomainHierarchy(Space space) throws InterruptedException, ScopeException {  DomainHierarchy hierarchy=createDomainHierarchyRec(space);  hierarchies.put(space.getDomain().getId(),hierarchy);  todo.add(0,hierarchy);  populateSubDomains(hierarchy);  return hierarchy;}  }
class C{  public UnhandledException(final Throwable cause){  super(cause);}  }
class C{  public ClassPath(@Nonnull Iterable<DexFile> classPath,boolean checkPackagePrivateAccess,Opcodes.Version version){  Iterable<DexFile> dexFiles=Iterables.concat(classPath,Lists.newArrayList(getBasicClasses()));  unknownClass=new UnknownClassProto(this);  loadedClasses.put(unknownClass.getType(),unknownClass);  this.checkPackagePrivateAccess=checkPackagePrivateAccess;  this.version=version;  loadPrimitiveType("Z");  loadPrimitiveType("B");  loadPrimitiveType("S");  loadPrimitiveType("C");  loadPrimitiveType("I");  loadPrimitiveType("J");  loadPrimitiveType("F");  loadPrimitiveType("D");  loadPrimitiveType("L");  for (  DexFile dexFile : dexFiles) {    addDex(dexFile,false);  }}  }
class C{  public void addMutedIp(final String ip,final Date muteTill){  if (isIpMuted(ip)) {    removeMutedIp(ip);  }  Timestamp muteTillTs=null;  if (muteTill != null) {    muteTillTs=new Timestamp(muteTill.getTime());  }  s_logger.fine("Muting ip:" + ip);  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement("insert into muted_ips (ip, mute_till) values (?, ?)");    ps.setString(1,ip);    ps.setTimestamp(2,muteTillTs);    ps.execute();    ps.close();    con.commit();  } catch (  final SQLException sqle) {    if (sqle.getErrorCode() == 30000) {      s_logger.info("Tried to create duplicate muted ip:" + ip + " error:"+ sqle.getMessage());      return;    }    s_logger.log(Level.SEVERE,"Error inserting muted ip:" + ip,sqle);    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }}  }
class C{  public String generateColumnLabel(CategoryDataset dataset,int column){  return dataset.getColumnKey(column).toString();}  }
class C{  private void readToEnd() throws FitsException {  while (this.dataStr != null && !this.atEOF) {    try {      if (readHDU() == null) {        break;      }    } catch (    EOFException e) {      if (FitsFactory.getAllowTerminalJunk() && e.getCause() instanceof TruncatedFileException && getNumberOfHDUs() > 0) {        this.atEOF=true;        return;      }      throw new FitsException("IO error: " + e);    }catch (    IOException e) {      throw new FitsException("IO error: " + e);    }  }}  }
class C{  public Connection next(String method) throws IOException {  for (Connection pooled; (pooled=pool.get(address)) != null; ) {    if (method.equals("GET") || pooled.isReadable())     return pooled;    pooled.close();  }  if (!hasNextTlsMode()) {    if (!hasNextInetSocketAddress()) {      if (!hasNextProxy()) {        if (!hasNextPostponed()) {          throw new NoSuchElementException();        }        return new Connection(nextPostponed());      }      lastProxy=nextProxy();      resetNextInetSocketAddress(lastProxy);    }    lastInetSocketAddress=nextInetSocketAddress();    resetNextTlsMode();  }  boolean modernTls=nextTlsMode() == TLS_MODE_MODERN;  Route route=new Route(address,lastProxy,lastInetSocketAddress,modernTls);  if (routeDatabase.shouldPostpone(route)) {    postponedRoutes.add(route);    return next(method);  }  return new Connection(route);}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_selectExpression.getExpression().callVisitors(m_selectExpression,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public void testCertPathBuilder08() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  Provider prov=null;  for (int t=0; t < validValues.length; t++) {    try {      CertPathBuilder.getInstance(validValues[t],prov);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e1) {    }  }}  }
class C{  public boolean hasPendingAsyncFetch(){  return hasPendingAsyncFetch;}  }
class C{  public NumberLiteral newNumberLiteral(){  NumberLiteral result=new NumberLiteral(this);  return result;}  }
class C{  public StartRecordingRandomItemCollectionAction(final String questname,final Map<String,Integer> items,final String message){  this.questname=checkNotNull(questname);  this.index=-1;  this.items=ImmutableMap.copyOf(items);  this.message=checkNotNull(message);}  }
class C{  public boolean isPronoun(){  return typeString.contains(SUFFIX_PRONOUN);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.331 -0500",hash_original_method="E950565A85A7626D07FC065E3E871678",hash_generated_method="C061937E7668406FE8E3C5A03CB49A50") public static Object trackActivity(Object instance){  return new InstanceTracker(instance);}  }
class C{  String convertToEntity(String input){  String output=input.replaceAll("&","&amp;");  output=output.replaceAll("<","&lt;");  output=output.replaceAll(">","&gt;");  return output;}  }
class C{  public void registerForConnectivityEvents(Object object,boolean notifyImmediately,ConnectivityChangeListener listener){  boolean hasConnection=hasNetworkConnection();  if (ConnectionBuddyCache.isLastNetworkStateStored(object) && ConnectionBuddyCache.getLastNetworkState(object) != hasConnection) {    ConnectionBuddyCache.setLastNetworkState(object,hasConnection);    if (notifyImmediately) {      notifyConnectionChange(hasConnection,listener);    }  } else   if (!ConnectionBuddyCache.isLastNetworkStateStored(object)) {    ConnectionBuddyCache.setLastNetworkState(object,hasConnection);    if (notifyImmediately) {      notifyConnectionChange(hasConnection,listener);    }  }  IntentFilter filter=new IntentFilter();  filter.addAction(ACTION_CONNECTIVITY_CHANGE);  filter.addAction(ACTION_WIFI_STATE_CHANGE);  NetworkChangeReceiver receiver=new NetworkChangeReceiver(object,listener);  if (!receiversHashMap.containsKey(object.toString())) {    receiversHashMap.put(object.toString(),receiver);  }  configuration.getContext().registerReceiver(receiver,filter);}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  while (i < end) {    while (i < end && ignore(data.charAt(i))) {      i++;    }    b1=decodingTable[data.charAt(i++)];    while (i < end && ignore(data.charAt(i))) {      i++;    }    b2=decodingTable[data.charAt(i++)];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex string");    }    out.write((b1 << 4) | b2);    length++;  }  return length;}  }
class C{  private byte[] startNextFile(){  byte[] ret;  if (currentSource == softDeviceBytes && bootloaderBytes != null) {    ret=currentSource=bootloaderBytes;  } else   if (currentSource != applicationBytes && applicationBytes != null) {    ret=currentSource=applicationBytes;  } else {    ret=currentSource=null;  }  bytesReadFromCurrentSource=0;  return ret;}  }
class C{  public DuplicateEventException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static long sequentialLongId(){  return nexLongId.incrementAndGet();}  }
class C{  public void writeNext(String[] nextLine){  writeNext(nextLine,true);}  }
class C{  public Builder autoCommitDisabled(){  set("autoCommitBufferSize",0);  return set("autoCommitDelay",0);}  }
class C{  public EntityItemMetaBuilder start(){  return new EntityItemMetaBuilder();}  }
class C{  public PutIndexTemplateRequest(String name){  this.name=name;}  }
class C{  public void start(HadoopExternalCommunication comm,HadoopProcessDescriptor nodeDesc,ExecutorService msgExecSvc,IgniteLogger parentLog) throws IgniteCheckedException {  this.comm=comm;  this.nodeDesc=nodeDesc;  this.msgExecSvc=msgExecSvc;  comm.setListener(new MessageListener());  log=parentLog.getLogger(HadoopChildProcessRunner.class);  startTime=U.currentTimeMillis();  comm.sendMessage(this.nodeDesc,new HadoopProcessStartedAck());}  }
class C{  public static void createHuge(String filename,final int cols,final int rows) throws Exception {  OutputStream os=filename == null ? TestSupport.createNullOutputStream() : new FileOutputStream(new File(filename));  PngWriter png=new PngWriter(os,new ImageInfo(cols,rows,8,false));  ((PixelsWriterDefault)png.getPixelsWriter()).setFilterType(FilterType.FILTER_AVERAGE);  png.setIdatMaxSize(0x10000);  png.setCompLevel(6);  ImageLineInt iline1=new ImageLineInt(png.imgInfo);  ImageLineInt iline2=new ImageLineInt(png.imgInfo);  ImageLineInt iline=iline1;  for (int j=0; j < cols; j++) {    ImageLineHelper.setPixelRGB8(iline1,j,((j & 0xFF) << 16) | (((j * 3) & 0xFF) << 8) | (j * 2) & 0xFF);    ImageLineHelper.setPixelRGB8(iline2,j,(j * 13) & 0xFFFFFF);  }  long t0=System.currentTimeMillis();  for (int row=0; row < rows; row++) {    iline=row % 4 == 0 ? iline2 : iline1;    png.writeRow(iline,row);  }  png.end();  int dt=(int)(System.currentTimeMillis() - t0);  System.out.println("Created: " + png.imgInfo.toString());  System.out.printf("%d msecs, %.1f msecs/MPixel \n",dt,dt * 1000000.0 / (cols * rows));}  }
class C{  public static Point2D.Double ovalAngleToPoint(Rectangle2D.Double r,double angle){  Point2D.Double center=Geom.center(r);  Point2D.Double p=Geom.polarToPoint2D(angle,r.width / 2,r.height / 2);  return new Point2D.Double(center.x + p.x,center.y + p.y);}  }
class C{  protected void clearImageTileList(){  ((DefaultListModel)getListModel()).clear();}  }
class C{  public boolean isValueTypeInteger(){  return valueType == ParameterValueType.INTEGER;}  }
class C{  public TrieLM(ArpaFile arpaFile) throws FileNotFoundException {  super(Vocabulary.size(),arpaFile.getOrder());  int ngramCounts=arpaFile.size();  LOG.debug("ARPA file contains {} n-grams",ngramCounts);  this.children=new HashMap<>(ngramCounts);  this.logProbs=new HashMap<>(ngramCounts);  this.backoffs=new HashMap<>(ngramCounts);  int nodeCounter=0;  int lineNumber=0;  for (  ArpaNgram ngram : arpaFile) {    lineNumber+=1;    if (lineNumber % 100000 == 0) {      LOG.info("Line: {}",lineNumber);    }    LOG.debug("{}-gram: ({} | {})",ngram.order(),ngram.getWord(),Arrays.toString(ngram.getContext()));    int word=ngram.getWord();    int[] context=ngram.getContext();{      int contextNodeID=ROOT_NODE_ID;{        for (int i=context.length - 1; i >= 0; i--) {          long key=Bits.encodeAsLong(contextNodeID,context[i]);          int childID;          if (children.containsKey(key)) {            childID=children.get(key);          } else {            childID=++nodeCounter;            LOG.debug("children.put({}:{}, {})",contextNodeID,context[i],childID);            children.put(key,childID);          }          contextNodeID=childID;        }      }{        long key=Bits.encodeAsLong(contextNodeID,word);        float logProb=ngram.getValue();        LOG.debug("logProbs.put({}:{}, {}",contextNodeID,word,logProb);        this.logProbs.put(key,logProb);      }    }{      int backoffNodeID=ROOT_NODE_ID;{        long backoffNodeKey=Bits.encodeAsLong(backoffNodeID,word);        int wordChildID;        if (children.containsKey(backoffNodeKey)) {          wordChildID=children.get(backoffNodeKey);        } else {          wordChildID=++nodeCounter;          LOG.debug("children.put({}: {}, {})",backoffNodeID,word,wordChildID);          children.put(backoffNodeKey,wordChildID);        }        backoffNodeID=wordChildID;        for (int i=context.length - 1; i >= 0; i--) {          long key=Bits.encodeAsLong(backoffNodeID,context[i]);          int childID;          if (children.containsKey(key)) {            childID=children.get(key);          } else {            childID=++nodeCounter;            LOG.debug("children.put({}:{}, {})",backoffNodeID,context[i],childID);            children.put(key,childID);          }          backoffNodeID=childID;        }      }{        float backoff=ngram.getBackoff();        LOG.debug("backoffs.put({}:{}, {})",backoffNodeID,word,backoff);        this.backoffs.put(backoffNodeID,backoff);      }    }  }}  }
class C{  public String[] listNotificationInterests(){  return new String[]{};}  }
class C{  public static void loadGiveaway(Giveaway giveaway,Element element,String cssNode,String headerHintCssNode,Uri steamUri){  Elements hints=element.select("." + headerHintCssNode);  if (!hints.isEmpty()) {    String copiesT=hints.first().text();    String pointsT=hints.last().text();    int copies=hints.size() == 1 ? 1 : parseInt(copiesT.replace("(","").replace(" Copies)",""));    int points=Integer.parseInt(pointsT.replace("(","").replace("P)",""));    giveaway.setCopies(copies);    giveaway.setPoints(points);  } else {    giveaway.setCopies(1);    giveaway.setPoints(0);  }  if (steamUri != null) {    List<String> pathSegments=steamUri.getPathSegments();    if (pathSegments.size() >= 2) {      giveaway.setGame(new Game("app".equals(pathSegments.get(0)) ? Game.Type.APP : Game.Type.SUB,Integer.parseInt(pathSegments.get(1))));    }  }  Element end=element.select("." + cssNode + "__columns > div span").first();  giveaway.setEndTime(Integer.valueOf(end.attr("data-timestamp")),end.parent().text().trim());  giveaway.setCreatedTime(Integer.valueOf(element.select("." + cssNode + "__columns > div span").last().attr("data-timestamp")));  giveaway.setWhitelist(!element.select("." + cssNode + "__column--whitelist").isEmpty());  giveaway.setGroup(!element.select("." + cssNode + "__column--group").isEmpty());  giveaway.setPrivate(!element.select("." + cssNode + "__column--invite-only").isEmpty());  giveaway.setRegionRestricted(!element.select("." + cssNode + "__column--region-restricted").isEmpty());  Element level=element.select("." + cssNode + "__column--contributor-level").first();  if (level != null)   giveaway.setLevel(Integer.parseInt(level.text().replace("Level","").replace("+","").trim()));  try {    giveaway.setInternalGameId(Integer.parseInt(element.parent().attr("data-game-id")));  } catch (  NumberFormatException e) {  }}  }
class C{  private Iso3166(String code,String engName){  this.code=code.toLowerCase();  name=engName;  all.put(this.code,this);}  }
class C{  protected CCMenuItemLabel(CCLabelProtocol label,CCNode target,String selector){  super(target,selector);  originalScale_=1.0f;  setLabel(label);  colorBackup=new ccColor3B(255,255,255);  disabledColor_=new ccColor3B(126,126,126);}  }
class C{  private static char whitespaceToSpace(char c){  return Character.isWhitespace(c) ? ' ' : c;}  }
class C{  public static DomFactory init(){  try {    DomFactory theDomFactory=(DomFactory)EPackage.Registry.INSTANCE.getEFactory(DomPackage.eNS_URI);    if (theDomFactory != null) {      return theDomFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new DomFactoryImpl();}  }
class C{  public InMemoryMessageExchangeStore(final NetworkConfig config,TokenProvider tokenProvider){  if (config == null) {    throw new NullPointerException("Configuration must not be null");  }  if (tokenProvider == null) {    throw new NullPointerException("TokenProvider must not be null");  }  this.tokenProvider=tokenProvider;  this.config=config;}  }
class C{  static public Locator northEast(){  return new RelativeDecoratorLocator(1.0,0.0);}  }
class C{  private void adjustDayOfMonth(Calendar startTime,int month){  applyLastDayOfMonth(startTime,month);  if (!window.getLastDayOfMonth()) {    int lastDayOfMonth=startTime.get(Calendar.DAY_OF_MONTH);    if (lastDayOfMonth > getDayOfMonth()) {      startTime.set(Calendar.DAY_OF_MONTH,getDayOfMonth());    }  }}  }
class C{  public JSONArray names(){  return nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));}  }
class C{  public void throwException(){  mv.visitInsn(Opcodes.ATHROW);}  }
class C{  public PercentLayout(){  this(HORIZONTAL,0);}  }
class C{  public IntegerConstant addInteger(int value){  IntegerConstant entry=getIntegerByValue(value);  if (entry != null)   return entry;  entry=new IntegerConstant(this,_entries.size(),value);  addConstant(entry);  return entry;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  protected RecipientListRouterImpl(){  super();}  }
class C{  public XYStepRenderer(XYToolTipGenerator toolTipGenerator,XYURLGenerator urlGenerator){  super();  setBaseToolTipGenerator(toolTipGenerator);  setURLGenerator(urlGenerator);  setBaseShapesVisible(false);}  }
class C{  public synchronized void clearXTextLabels(){  mXTextLabels.clear();}  }
class C{  public void removeIncomingBytestreamListener(BytestreamListener listener){  this.allRequestListeners.remove(listener);}  }
class C{  public void testDoCheckWithDefaultNotDetectionResult(){  LOGGER.debug("doCheckWithDefaultNotDetectionResult");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test");  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("test1"));  TextBelongsToBlackListChecker instance=new TextBelongsToBlackListChecker(mockTextElementBuilder,BLACKLIST_NOM_NAME,DETECTION_MSG);  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService);}  }
class C{  public void createDatabaseEntitiesForUploadDownloadTesting(){  createDatabaseEntitiesForUploadDownloadTesting(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION);  createDatabaseEntitiesForUploadDownloadTesting(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME_2,AbstractServiceTest.FORMAT_USAGE_CODE_2,AbstractServiceTest.FORMAT_FILE_TYPE_CODE_2,AbstractServiceTest.FORMAT_VERSION_2);}  }
class C{  private void cmd_selectFile(){  JFileChooser fc=new JFileChooser();  fc.setMultiSelectionEnabled(false);  if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;  File f=fc.getSelectedFile();  if (f == null || !f.isFile())   return;  String fileName=f.getAbsolutePath();  fSelectFile.addItem(fileName);  fSelectFile.setSelectedItem(fileName);}  }
class C{  protected boolean isJdk14Available(){  return isLogLibraryAvailable("Jdk14","org.apache.commons.logging.impl.Jdk14Logger");}  }
class C{  public static ImageEncoder newInstance(String format,float quality,boolean encodingAlpha){  ImageEncoder imageEncoder=newInstance(format);  imageEncoder.setQuality(quality);  imageEncoder.setEncodingAlpha(encodingAlpha);  return imageEncoder;}  }
class C{  public GamlFactoryImpl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Channel c=getChannel(stack);  return (c == null) ? "" : c.getNumber(EPG.getInstance().getProviderIDForEPGDSName(s));}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void testDivideBigDecimalScaleMathContextUP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=15;  String b="748766876876723342238476237823787879183470";  int bScale=10;  int precision=21;  RoundingMode rm=RoundingMode.UP;  MathContext mc=new MathContext(precision,rm);  String c="49897861180.2562512996";  int resScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private void chatter(String broker,String username,String password){  try {    javax.jms.ConnectionFactory factory;    factory=new ActiveMQConnectionFactory(username,password,broker);    connect=factory.createConnection(username,password);    pubSession=connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);    subSession=connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);  } catch (  javax.jms.JMSException jmse) {    System.err.println("error: Cannot connect to Broker - " + broker);    jmse.printStackTrace();    System.exit(1);  }  try {    javax.jms.Topic topic=pubSession.createTopic(APP_TOPIC);    javax.jms.MessageConsumer subscriber=subSession.createConsumer(topic);    subscriber.setMessageListener(this);    publisher=pubSession.createProducer(topic);    connect.start();  } catch (  javax.jms.JMSException jmse) {    jmse.printStackTrace();  }  try {    java.io.BufferedReader stdin=new java.io.BufferedReader(new java.io.InputStreamReader(System.in));    System.out.println("\nChat application:\n" + "=================\n" + "The application user " + username + " connects to the broker at "+ DEFAULT_BROKER_NAME+ ".\n"+ "The application will publish messages to the "+ APP_TOPIC+ " topic.\n"+ "The application also subscribes to that topic to consume any messages published there.\n\n"+ "Type some text, and then press Enter to publish it as a TextMesssage from "+ username+ ".\n");    while (true) {      String s=stdin.readLine();      if (s == null)       exit(); else       if (s.length() > 0) {        javax.jms.TextMessage msg=pubSession.createTextMessage();        msg.setText(username + ": " + s);        publisher.send(msg);      }    }  } catch (  java.io.IOException ioe) {    ioe.printStackTrace();  }catch (  javax.jms.JMSException jmse) {    jmse.printStackTrace();  }}  }
class C{  public boolean isProperDescendentOf(Node node1,Node node2){  return existsDirectedPathFromTo(node2,node1);}  }
class C{  public static InetAddress decrement(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0x00) {    addr[i]=(byte)0xff;    i--;  }  Preconditions.checkArgument(i >= 0,"Decrementing %s would wrap.",address);  addr[i]--;  return bytesToInetAddress(addr);}  }
class C{  public static double heapSize(ClusterNode node,int precision){  return heapSize(Collections.singleton(node),precision);}  }
class C{  public LoggingProfiler(Writer writer){  mWriter=writer;}  }
class C{  public int upperEndpoint(){  return upperBound.endpoint();}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  private boolean traverse(Tree tree,NodeRef node,SiteModel currentSiteModel){  boolean update=false;  int nodeNum=node.getNumber();  SiteModel nextSiteModel=currentSiteModel;  if (tipsSiteModel != null && tree.isExternal(node)) {    currentSiteModel=tipsSiteModel;  } else {    for (int i=0, n=cladeSiteModels.size(); i < n; i++) {      Clade clade=cladeSiteModels.get(i);      if (clade.getNode() == nodeNum) {        nextSiteModel=clade.getSiteModel();        if (clade.includeStem()) {          currentSiteModel=nextSiteModel;        }        break;      }    }  }  NodeRef parent=tree.getParent(node);  if (parent != null && updateNode[nodeNum]) {    double branchRate=branchRateModel.getBranchRate(tree,node);    double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));    if (branchTime < 0.0) {      throw new RuntimeException("Negative branch length: " + branchTime);    }    likelihoodCore.setNodeMatrixForUpdate(nodeNum);    if (tree.isExternal(node) && deltaParameter != null && (deltaTips.size() == 0 || deltaTips.contains(new Integer(node.getNumber())))) {      branchTime+=deltaParameter.getParameterValue(0);    }    for (int i=0; i < categoryCount; i++) {      double branchLength=currentSiteModel.getRateForCategory(i) * branchTime;      currentSiteModel.getSubstitutionModel().getTransitionProbabilities(branchLength,probabilities);      likelihoodCore.setNodeMatrix(nodeNum,i,probabilities);    }    update=true;  }  if (!tree.isExternal(node)) {    int nodeCount=tree.getChildCount(node);    if (nodeCount != 2)     throw new RuntimeException("binary trees only!");    NodeRef child1=tree.getChild(node,0);    boolean update1=traverse(tree,child1,nextSiteModel);    NodeRef child2=tree.getChild(node,1);    boolean update2=traverse(tree,child2,nextSiteModel);    if (update1 || update2) {      int childNum1=child1.getNumber();      int childNum2=child2.getNumber();      likelihoodCore.setNodePartialsForUpdate(nodeNum);      likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum);      if (parent == null) {        double[] frequencies=frequencyModel.getFrequencies();        double[] proportions=currentSiteModel.getCategoryProportions();        likelihoodCore.integratePartials(nodeNum,proportions,rootPartials);        likelihoodCore.calculateLogLikelihoods(rootPartials,frequencies,patternLogLikelihoods);      }      update=true;    }  }  return update;}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  @LogMessageDoc(message="Inter-switch link removed:",explanation="A previously detected link between two openflow switches no longer exists, " + "use show link to find current status") protected void deleteLinks(List<Link> links,String reason,List<LDUpdate> updateList){  NodePortTuple srcNpt, dstNpt;  List<LDUpdate> linkUpdateList=new ArrayList<LDUpdate>();  lock.writeLock().lock();  try {    for (    Link lt : links) {      srcNpt=new NodePortTuple(lt.getSrc(),lt.getSrcPort());      dstNpt=new NodePortTuple(lt.getDst(),lt.getDstPort());      if (switchLinks.containsKey(lt.getSrc())) {        switchLinks.get(lt.getSrc()).remove(lt);        if (switchLinks.get(lt.getSrc()).isEmpty())         this.switchLinks.remove(lt.getSrc());      }      if (this.switchLinks.containsKey(lt.getDst())) {        switchLinks.get(lt.getDst()).remove(lt);        if (this.switchLinks.get(lt.getDst()).isEmpty())         this.switchLinks.remove(lt.getDst());      }      if (this.portLinks.get(srcNpt) != null) {        this.portLinks.get(srcNpt).remove(lt);        if (this.portLinks.get(srcNpt).isEmpty())         this.portLinks.remove(srcNpt);      }      if (this.portLinks.get(dstNpt) != null) {        this.portLinks.get(dstNpt).remove(lt);        if (this.portLinks.get(dstNpt).isEmpty())         this.portLinks.remove(dstNpt);      }      LinkInfo info=this.links.remove(lt);      LinkType linkType=getLinkType(lt,info);      linkUpdateList.add(new LDUpdate(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),linkType,UpdateOperation.LINK_REMOVED));      evDirectLink.updateEventWithFlush(new DirectLinkEvent(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),"link-deleted::" + reason));      removeLinkFromStorage(lt);      if (linkType == ILinkDiscovery.LinkType.DIRECT_LINK) {        log.info("Inter-switch link removed: {}",lt);        notifier.postNotification("Inter-switch link removed: " + lt.toString());      } else       if (log.isTraceEnabled()) {        log.trace("Deleted link {}",lt);      }    }  }  finally {    if (updateList != null)     linkUpdateList.addAll(updateList);    updates.addAll(linkUpdateList);    lock.writeLock().unlock();  }}  }
class C{  public long sum(){  long sum=0L;  for (  AtomicLong value : map.values()) {    sum=sum + value.get();  }  return sum;}  }
class C{  private String createWorkflowStepForWaitOnRebuild(Workflow workflow,StorageSystem vplexSystem,URI vplexVolumeURI,String waitFor){  Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);  URI vplexSystemURI=vplexSystem.getId();  Workflow.Method rebuildExecuteMethod=createWaitOnRebuildMethod(vplexSystemURI,vplexVolumeURI);  workflow.createStep(WAIT_ON_REBUILD_STEP,String.format("Waitng for volume %s (%s) to rebuild",vplexVolume.getLabel(),vplexVolume.getId()),waitFor,vplexSystemURI,vplexSystem.getSystemType(),this.getClass(),rebuildExecuteMethod,null,null);  return WAIT_ON_REBUILD_STEP;}  }
class C{  public static Map<String,Integer> loadTaxonomyMapping(SequencesReader reader) throws IOException {  return SequenceToTaxonIds.sequenceToIds(new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE));}  }
class C{  @SuppressWarnings("unchecked") protected final T_State enterDeepHistory(){  if (currentState != null) {    return (T_State)currentState.enterDeepHistory();  } else {    if (initialStateClass != null) {      return transitTo(initialStateClass);    } else {      return (T_State)this;    }  }}  }
class C{  public void paintTreeBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean useCandidateSent(){  return useCandidateSent;}  }
class C{  public static Range findStackedRangeBounds(CategoryDataset dataset,double base){  ParamChecks.nullNotPermitted(dataset,"dataset");  Range result=null;  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  int categoryCount=dataset.getColumnCount();  for (int item=0; item < categoryCount; item++) {    double positive=base;    double negative=base;    int seriesCount=dataset.getRowCount();    for (int series=0; series < seriesCount; series++) {      Number number=dataset.getValue(series,item);      if (number != null) {        double value=number.doubleValue();        if (value > 0.0) {          positive=positive + value;        }        if (value < 0.0) {          negative=negative + value;        }      }    }    minimum=Math.min(minimum,negative);    maximum=Math.max(maximum,positive);  }  if (minimum <= maximum) {    result=new Range(minimum,maximum);  }  return result;}  }
class C{  private boolean conditionL0(String value,int index){  if (index == value.length() - 3 && contains(value,index - 1,4,"ILLO","ILLA","ALLE")) {    return true;  } else   if ((contains(value,index - 1,2,"AS","OS") || contains(value,value.length() - 1,1,"A","O")) && contains(value,index - 1,4,"ALLE")) {    return true;  } else {    return false;  }}  }
class C{  public boolean isServerLive(String host,int port){  lock.readLock().lock();  try {    String serverName=getServerName(host,port);    Preconditions.checkArgument(serverTrackerMap.containsKey(serverName));    return serverTrackerMap.get(getServerName(host,port)).isLive();  }  finally {    lock.readLock().unlock();  }}  }
class C{  @Override public boolean managed(){  return true;}  }
class C{  protected void initMinMaxArrays(){  maxSorting=new DoubleIntPair[size];  minSorting=new DoubleIntPair[size];  for (int j=0; j < size; j++) {    minSorting[j]=new DoubleIntPair(0,-1);    maxSorting[j]=new DoubleIntPair(0,-1);  }}  }
class C{  public List registerInterestOn(ServerLocation sl,final Object key,final int interestType,final InterestResultPolicy policy,final boolean isDurable,final byte regionDataPolicy){  return registerInterestOn(sl,key,interestType,policy,isDurable,false,regionDataPolicy);}  }
class C{  public boolean isAutoStart(){  return autoStart;}  }
class C{  public List<Object> asList(){  List<Object> result=new ArrayList<Object>();  for (  Object value : values)   result.add(value);  return result;}  }
class C{  @SuppressWarnings("unchecked") public void readFiguresFromDocumentContent(InputStream in,Drawing drawing,boolean replace) throws IOException {  this.figures=new LinkedList<Figure>();  IXMLParser parser;  try {    parser=XMLParserFactory.createDefaultXMLParser();  } catch (  Exception ex) {    InternalError e=new InternalError("Unable to instantiate NanoXML Parser");    e.initCause(ex);    throw e;  }  IXMLReader reader=new StdXMLReader(in);  parser.setReader(reader);  try {    document=(IXMLElement)parser.parse();  } catch (  XMLException ex) {    IOException e=new IOException(ex.getMessage());    e.initCause(ex);    throw e;  }  if (styles == null) {    styles=new ODGStylesReader();  }  styles.read(document);  IXMLElement drawingElem=document;  Stack<Iterator> stack=new Stack<Iterator>();  LinkedList<IXMLElement> ll=new LinkedList<IXMLElement>();  ll.add(document);  stack.push(ll.iterator());  while (!stack.empty() && stack.peek().hasNext()) {    Iterator<IXMLElement> iter=stack.peek();    IXMLElement node=iter.next();    Iterator<IXMLElement> children=node.getChildren().iterator();    if (!iter.hasNext()) {      stack.pop();    }    if (children.hasNext()) {      stack.push(children);    }    if (node.getName() != null && node.getName().equals("drawing") && (node.getNamespace() == null || node.getNamespace().equals(OFFICE_NAMESPACE))) {      drawingElem=node;      break;    }  }  if (drawingElem.getName() == null || !drawingElem.getName().equals("drawing") || (drawingElem.getNamespace() != null && !drawingElem.getNamespace().equals(OFFICE_NAMESPACE))) {    throw new IOException("'office:drawing' element expected: " + drawingElem.getName());  }  readDrawingElement(drawingElem);  if (replace) {    drawing.removeAllChildren();  }  drawing.addAll(figures);}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String xoredFlags=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,xoredFlags));  return new Pair<OperandSize,String>(OperandSize.BYTE,xoredFlags);}  }
class C{  public Graph search(){  meekRules=new MeekRules();  meekRules.setAggressivelyPreventCycles(isAggressivelyPreventCycles());  meekRules.setKnowledge(knowledge);  meekRules.setUndirectUnforcedEdges(true);  long time1=System.currentTimeMillis();  List<Graph> graphs=new ArrayList<Graph>();  IndependenceTest test=getIndependenceTest();  Score score=getScore();  PcMax search=new PcMax(test);  search.setKnowledge(getKnowledge());  Graph graph=search.search();  List<Node> nodes=graph.getNodes();  int count=-1;  int minNumErrors=Integer.MAX_VALUE;  Graph outGraph=null;  Graph oldGraph;  LOOP:   while (++count < getMaxIterations()) {    oldGraph=graph;    TetradLogger.getInstance().log("info","Round = " + (count + 1));    System.out.println("Round = " + (count + 1));    numAdded=0;    numRemoved=0;    int index=0;    int indexBackwards=0;    int numEdgesBackwards=graph.getNumEdges();    int numEdges=nodes.size() * (nodes.size() - 1) / 2;    for (int i=0; i < nodes.size(); i++) {      for (int j=i + 1; j < nodes.size(); j++) {        index++;        if (index % 10000 == 0) {          TetradLogger.getInstance().log("info",index + " of " + numEdges);          System.out.println(index + " of " + numEdges);        }        tryAddingEdge(test,graph,nodes,oldGraph,i,j);        Node x=nodes.get(i);        Node y=nodes.get(j);        if (graph.getAdjacentNodes(x).size() > getSoftmaxAdjacencies()) {          for (          Node w : graph.getAdjacentNodes(x)) {            if (w == y)             continue;            tryRemovingEdge(test,graph,oldGraph,graph.getEdge(x,w));          }        }        if (graph.getAdjacentNodes(y).size() > getSoftmaxAdjacencies()) {          for (          Node w : graph.getAdjacentNodes(y)) {            if (w == x)             continue;            tryRemovingEdge(test,graph,oldGraph,graph.getEdge(y,w));          }        }      }    }    if (getSoftmaxAdjacencies() > 0) {      for (      Edge edge : graph.getEdges()) {        if (++indexBackwards % 10000 == 0) {          TetradLogger.getInstance().log("info",index + " of " + numEdgesBackwards);          System.out.println(index + " of " + numEdgesBackwards);        }        tryRemovingEdge(test,graph,graph,edge);      }    }    System.out.println("Num added = " + numAdded);    System.out.println("Num removed = " + numRemoved);    TetradLogger.getInstance().log("info","Num added = " + numAdded);    TetradLogger.getInstance().log("info","Num removed = " + numRemoved);    System.out.println("(Reorienting...)");    int numErrors=numAdded + numRemoved;    final EdgeListGraph graph1=new EdgeListGraph(graph);    if (numErrors <= minNumErrors) {      minNumErrors=numErrors;      outGraph=graph1;    }    for (    Node node : nodes) {      reorientNode(node,graph);    }    applyMeek(nodes,graph);    graphs.add(graph);    for (int i=graphs.size() - 2; i >= 0; i--) {      if (graphs.get(graphs.size() - 1).equals(graphs.get(i))) {        System.out.println("Recognized previous graph.");        outGraph=graph1;        break LOOP;      }    }  }  this.logger.log("graph","\nReturning this graph: " + graph);  long time2=System.currentTimeMillis();  this.elapsedTime=time2 - time1;  return outGraph;}  }
class C{  public void put(String key,boolean value){  put(key,Boolean.toString(value));}  }
class C{  public static void replaceNonCarModesWithPT(Network network){  log.info("... Replacing all non-car link modes with \"pt\"");  Set<String> modesCar=Collections.singleton(TransportMode.car);  Set<String> modesCarPt=new HashSet<>();  modesCarPt.add(TransportMode.car);  modesCarPt.add(TransportMode.pt);  Set<String> modesPt=new HashSet<>();  modesPt.add(TransportMode.pt);  for (  Link link : network.getLinks().values()) {    if (link.getAllowedModes().size() == 0 && link.getAllowedModes().contains(TransportMode.car)) {      link.setAllowedModes(modesCar);    }    if (link.getAllowedModes().size() > 0 && link.getAllowedModes().contains(TransportMode.car)) {      link.setAllowedModes(modesCarPt);    } else     if (!link.getAllowedModes().contains(TransportMode.car)) {      link.setAllowedModes(modesPt);    }  }}  }
class C{  protected void postProcess(final JTable table,final Object value,final boolean isSelected,final boolean hasFocus,final int row,final int column){}  }
class C{  public static Mapper<Long> singleLong(){  return singleLong;}  }
class C{  public static <T>T withObjectInputStream(InputStream inputStream,ClassLoader classLoader,@ClosureParams(value=SimpleType.class,options="java.io.ObjectInputStream") Closure<T> closure) throws IOException {  return withStream(newObjectInputStream(inputStream,classLoader),closure);}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  return DocAction.STATUS_InProgress;}  }
class C{  int warningCount(){  return compiler.warningCount();}  }
class C{  public static char[] encode(byte[] in){  return encode(in,in.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.158 -0500",hash_original_method="6D964EF3409A9BCD4AB46A00BDF7E85B",hash_generated_method="07439D077D477A511AA7AA5CDCA06833") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("DateParser.parse");  try {    headerName(TokenTypes.DATE);    wkday();    lexer.match(',');    lexer.match(' ');    Calendar cal=date();    lexer.match(' ');    time(cal);    lexer.match(' ');    String tzone=this.lexer.ttoken().toLowerCase();    if (!"gmt".equals(tzone))     throw createParseException("Bad Time Zone " + tzone);    this.lexer.match('\n');    SIPDateHeader retval=new SIPDateHeader();    retval.setDate(cal);    return retval;  }  finally {    if (debug)     dbg_leave("DateParser.parse");  }}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (val instanceof Integer) {          V k=unwrapKey(key);          int v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public boolean equals(Object obj2){  if (null == obj2)   return false; else   if (obj2 instanceof XNodeSet)   return obj2.equals(this); else   if (obj2 instanceof XNumber)   return obj2.equals(this); else   return str().equals(obj2.toString());}  }
class C{  public static synchronized void configure(){  if (isConfigured)   return;  try {    File tmp=File.createTempFile("terrier-tmp-",".properties");    System.setProperty("terrier.home",tmp.getParent());    System.setProperty("terrier.setup",tmp.getAbsolutePath());    ApplicationSetup.setProperty("termpipelines","");    ApplicationSetup.setProperty("querying.postprocesses.order","");    ApplicationSetup.loadCommonProperties();    ApplicationSetup.TERRIER_INDEX_PREFIX="index";    new DOMConfigurator().doConfigure(new StringReader(DEFAULT_LOG4J_CONFIG.replace("__LEVEL__",System.getProperty(LOG_LEVEL,"warn"))),org.apache.log4j.LogManager.getLoggerRepository());    tmp.delete();    isConfigured=true;  } catch (  IOException e) {    e.printStackTrace(System.err);    System.err.println("Error with terrier configuration");    System.exit(1);  }}  }
class C{  public static boolean toBooleanValue(String str) throws PageException {  Boolean b=toBoolean(str,null);  if (b != null)   return b.booleanValue();  throw new CasterException("Can't cast String [" + str + "] to a boolean");}  }
class C{  public void add_return(StorageLun param){  if (local_return == null) {    local_return=new StorageLun[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(StorageLun[])list.toArray(new StorageLun[list.size()]);}  }
class C{  public void testZeroPosIncrSloppyMpqAndOrMatch() throws IOException {  final MultiPhraseQuery.Builder mpqb=new MultiPhraseQuery.Builder();  for (  Token tap[] : INCR_0_QUERY_TOKENS_AND_OR_MATCH) {    Term[] terms=tapTerms(tap);    final int pos=tap[0].getPositionIncrement() - 1;    mpqb.add(terms,pos);  }  doTestZeroPosIncrSloppy(mpqb.build(),0);  mpqb.setSlop(1);  doTestZeroPosIncrSloppy(mpqb.build(),0);  mpqb.setSlop(2);  doTestZeroPosIncrSloppy(mpqb.build(),1);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  private void executeHooks(List<AbstractHook> hooks,EventData[] events){  if (hooks != null) {    for (    AbstractHook hook : hooks) {      HookAndEvents hookAndEvents=new HookAndEvents(hook,events);      hookRouter.route(hookAndEvents,getSelf());    }  }}  }
class C{  public void startConnection(){  send(new RTCStart(deviceId));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int length;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  if (equals(6,length)) {    child=employeeList.item(5);    childName=child.getNodeName();    assertEquals("nodeName1","address",childName);  } else {    child=employeeList.item(12);    childName=child.getNodeName();    assertEquals("nodeName2","#text",childName);  }}  }
class C{  @Override public boolean draw(Canvas canvas,RectF bounds){  if (super.draw(canvas,bounds)) {    return true;  }  drawArc(canvas);  drawArcEdgeDetail(canvas);  return true;}  }
class C{  public LinkGraphicList(Link link,LinkOMGraphicList graphicList,Projection proj,OMGridGenerator generator) throws IOException, EOFException {  this.link=link;  graphics=graphicList;  if (graphics == null) {    graphics=new LinkOMGraphicList();  }  linkStatus=readGraphics(graphics,proj,generator);}  }
class C{  public SPARQLStarUpdateDataBlockParser(ValueFactory valueFactory,Map<String,String> namespaces){  super(valueFactory);  this.namespaceTable=namespaces;  for (  Entry<String,String> entry : namespaceTable.entrySet()) {    super.setNamespace(entry.getKey(),entry.getValue());  }}  }
class C{  public Vertex define(Vertex source,Vertex word){  String text=word.getDataValue();  if (text != null) {    Vertex lastChecked=word.getRelationship(getPrimitive());    Collection<Relationship> meanings=word.getRelationships(Primitive.MEANING);    if (lastChecked == null || (meanings == null && (!word.instanceOf(Primitive.UNKNOWNWORD) && !word.instanceOf(Primitive.UNKOWNWORD)))) {      if (!Utils.isEnglish(text)) {        return null;      }      Network network=word.getNetwork();      word.setRelationship(getPrimitive(),network.createTimestamp());      Collection<Relationship> relationships=word.getRelationships(Primitive.MEANING);      Vertex existing=word.getRelationship(Primitive.MEANING);      if (existing != null) {        if (!existing.instanceOf(Primitive.SPEAKER) || (relationships.size() > 1)) {          return null;        }      }      boolean found=false;      if (getBot().getParent() != null) {        Network cache=getBot().getParent().memory().newMemory();        Vertex cacheWord=cache.createWord(text);        Vertex cacheLastChecked=cacheWord.getRelationship(getPrimitive());        meanings=cacheWord.getRelationships(Primitive.MEANING);        if (cacheLastChecked != null && (meanings != null || (cacheWord.instanceOf(Primitive.UNKNOWNWORD) || word.instanceOf(Primitive.UNKOWNWORD)))) {          found=true;          log("Importing word from cache",Bot.FINE,text);          Vertex newWord=network.createVertex(word);          copyDataRelationships(cacheWord,Primitive.INSTANTIATION,newWord,network);          copyDataRelationships(cacheWord,Primitive.SYNONYM,newWord,network);          copyDataRelationships(cacheWord,Primitive.ANTONYM,newWord,network);          copyDataRelationships(cacheWord,Primitive.CARDINALITY,newWord,network);          meanings=cacheWord.getRelationships(Primitive.MEANING);          if (meanings != null) {            for (            Relationship cacheMeaningRelationship : meanings) {              Vertex cacheMeaning=cacheMeaningRelationship.getTarget();              Vertex newMeaning=network.createVertex();              newMeaning.setName(text);              newWord.addWeakRelationship(Primitive.MEANING,newMeaning,cacheMeaningRelationship.getCorrectness());              newMeaning.addRelationship(Primitive.WORD,newWord);              copyDataRelationships(cacheMeaning,Primitive.SYNONYM,newMeaning,network);              copyDataRelationships(cacheMeaning,Primitive.ANTONYM,newMeaning,network);              copyDataRelationships(cacheMeaning,Primitive.CARDINALITY,newMeaning,network);              copyDataRelationships(cacheMeaning,Primitive.INSTANTIATION,newMeaning,network);              Vertex definition=cacheMeaning.getRelationship(Primitive.SENTENCE);              if (definition != null && definition.getData() instanceof String) {                newMeaning.addRelationship(Primitive.SENTENCE,network.createSentence((String)definition.getData()));              }            }          }          Vertex url=cacheWord.getRelationship(Primitive.URL);          if (url != null && url.getData() != null) {            newWord.addRelationship(Primitive.URL,network.createVertex(url.getData()));          }        } else {          cacheWord.addRelationship(getPrimitive(),cache.createTimestamp());          cacheWord.addRelationship(Primitive.INSTANTIATION,Primitive.UNKNOWNWORD);          cache.save();          Wiktionary wiktionary=getBot().getParent().awareness().getSense(Wiktionary.class);          try {            wiktionary.input(new URL(URL_PREFIX + URLEncoder.encode(text,"UTF-8")));          } catch (          Exception failed) {            log(failed);            return null;          }        }      }      if (!found) {        try {          input(new URL(URL_PREFIX + URLEncoder.encode(text,"UTF-8")),network);        } catch (        Exception failed) {          log(failed);          return null;        }      }    }  }  return word.mostConscious(Primitive.MEANING);}  }
class C{  private int findOSREntry(Offset mcOffset){  int l=0;  int r=lastEntry;  while (l <= r) {    int m=(l + r) >> 1;    Offset offset=Offset.fromIntSignExtend(getMCOffset(m));    if (offset.EQ(mcOffset)) {      return m;    } else     if (offset.sLT(mcOffset)) {      l=m + 1;    } else {      r=m - 1;    }  }  if (VM.TraceOnStackReplacement) {    VM.sysWrite("cannot find map entry for ",mcOffset,"\n");    this.printMap();  }  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return NO_OSR_ENTRY;}  }
class C{  public void actionPerformed(ActionEvent e){  int i=list.getSelectedIndex();  if (i != -1)   removeItem(i);}  }
class C{  public static boolean occupy(int waitMs){  if (occupiedUntil != null && occupiedUntil.after(new Date())) {    return false;  }  occupiedUntil=DateUtils.addMilliseconds(new Date(),waitMs);  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getNamedItemNS01.class,args);}  }
class C{  public static int[] adjustHighlightForExtraction(final int[] highlight){  final int x=highlight[0] - 1;  final int y=highlight[1] - 3;  final int width=highlight[2] + 2;  final int height=highlight[3] + 6;  return new int[]{x,y,width,height};}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public UserGroupRestRep createUserGroup(UserGroupCreateParam param){  checkCompatibleVersion();  validateUserGroupCreateParam(param);  checkDuplicateLabel(UserGroup.class,param.getLabel());  UserGroup userGroup=map(param);  URI id=URIUtil.createId(UserGroup.class);  userGroup.setId(id);  _log.debug("Saving the UserGroup: {}: {}",userGroup.getId(),userGroup.toString());  checkForOverlappingUserGroup(userGroup);  _dbClient.createObject(userGroup);  auditOp(OperationTypeEnum.CREATE_USERGROUP,true,null,userGroup.toString(),userGroup.getId().toString());  return map(getUserGroupById(id,false));}  }
class C{  void remask(){  if (parsedFormatInfo == null) {    return;  }  DataMask dataMask=DataMask.forReference(parsedFormatInfo.getDataMask());  int dimension=bitMatrix.getHeight();  dataMask.unmaskBitMatrix(bitMatrix,dimension);}  }
class C{  protected BaseGameActivity(){  super();  mHelper=new GameHelper(this);}  }
class C{  public boolean isEnabled(){  return false;}  }
class C{  public static void swap(String[] p){  String temp=p[0];  p[0]=p[1];  p[1]=temp;}  }
class C{  private int decrypt(byte[] dataToDecrypt,PrivateKey privateKey,byte[] output,int outputOffset) throws ServiceResultException {  int bytesDecrypted=CryptoUtil.getCryptoProvider().decryptAsymm(privateKey,securityProfile.getSecurityPolicy().getAsymmetricEncryptionAlgorithm(),dataToDecrypt,output,outputOffset);  if (logger.isTraceEnabled()) {    logger.trace("decrypt: dataToDecrypt={}",CryptoUtil.toHex(dataToDecrypt,64));    logger.trace("decrypt: output={}",CryptoUtil.toHex(output,64));    logger.trace("decrypt: bytesDecrypted={}",bytesDecrypted);  }  return bytesDecrypted;}  }
class C{  @AssistedInject public ConnectionGroupDirectoryResource(@Assisted UserContext userContext,@Assisted Directory<ConnectionGroup> directory,DirectoryObjectTranslator<ConnectionGroup,APIConnectionGroup> translator,DirectoryObjectResourceFactory<ConnectionGroup,APIConnectionGroup> resourceFactory){  super(userContext,directory,translator,resourceFactory);  this.userContext=userContext;  this.directory=directory;  this.resourceFactory=resourceFactory;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentFragment docFrag;  Comment comment;  Node aNode;  NodeList children;  Node child;  String childValue;  doc=(Document)load("staff",true);  aNewDoc=(Document)load("staff",true);  docFrag=aNewDoc.createDocumentFragment();  comment=aNewDoc.createComment("descendant1");  aNode=docFrag.appendChild(comment);  aNode=doc.importNode(docFrag,true);  children=aNode.getChildNodes();  assertSize("throw_Size",1,children);  child=aNode.getFirstChild();  childValue=child.getNodeValue();  assertEquals("descendant1","descendant1",childValue);}  }
class C{  @Override public void enqueue(HttpRequest request,final String queue){  enqueue(null,request,queue);}  }
class C{  private String generateS3Path(String pathPrefixParent,String topologyName,String filename){  List<String> pathParts=new ArrayList<>(Arrays.asList(pathPrefixParent.split("/")));  pathParts.add(topologyName);  pathParts.add(filename);  return String.join("/",pathParts);}  }
class C{  private static void abort(String message,Throwable exception) throws CoreException {  IStatus status=new Status(IStatus.ERROR,getUniqueIdentifier(),ERROR,message,exception);  throw new CoreException(status);}  }
class C{  public XMLOperatorDocBundle(URL url,String resourceName) throws IOException {  Document document;  try {    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(url.openStream());  } catch (  SAXException e) {    throw new IOException("Malformed XML operator help bundle: " + e,e);  }catch (  ParserConfigurationException e) {    LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.tools.documentation.XMLOperatorDocBundle.creating_xml_parser_error",e),e);    return;  }  NodeList helpElements=document.getDocumentElement().getElementsByTagName("operator");  for (int i=0; i < helpElements.getLength(); i++) {    Element element=(Element)helpElements.item(i);    OperatorDocumentation operatorDocumentation=new OperatorDocumentation(this,element);    try {      String operatorKey=XMLTools.getTagContents(element,"key",false);      if (operatorKey == null) {        operatorKey=XMLTools.getTagContents(element,"name",true);        LogService.getRoot().log(Level.FINE,"com.rapidminer.tools.documentation.XMLOperatorDocBundle.missing_operator_help",operatorKey);      }      addOperatorDoc(operatorKey,operatorDocumentation);    } catch (    XMLException e) {      LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.tools.documentation.XMLOperatorDocBundle.malformed_operator_documentation",e),e);    }  }  NodeList groupElements=document.getDocumentElement().getElementsByTagName("group");  for (int i=0; i < groupElements.getLength(); i++) {    Element element=(Element)groupElements.item(i);    GroupDocumentation doc=new GroupDocumentation(element);    addGroupDoc(doc.getKey(),doc);  }  LogService.getRoot().log(Level.FINE,"com.rapidminer.tools.documentation.XMLOperatorDocBundle.loaded_documentation",new Object[]{helpElements.getLength(),groupElements.getLength()});}  }
class C{  protected void onLayoutChild(final View child,final int position,final boolean flowDown,final int childrenLeft,final int childTop,final int childRight,final int childBottom){  child.layout(childrenLeft,childTop,childRight,childBottom);}  }
class C{  protected SettableBeanProperty constructSettableProperty(DeserializationConfig config,BasicBeanDescription beanDesc,String name,AnnotatedMethod setter) throws JsonMappingException {  if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {    setter.fixAccess();  }  JavaType t0=beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));  BeanProperty.Std property=new BeanProperty.Std(name,t0,beanDesc.getClassAnnotations(),setter);  JavaType type=resolveType(config,beanDesc,t0,setter,property);  if (type != t0) {    property=property.withType(type);  }  JsonDeserializer<Object> propDeser=findDeserializerFromAnnotation(config,setter,property);  type=modifyTypeByAnnotation(config,setter,type,name);  TypeDeserializer typeDeser=type.getTypeHandler();  SettableBeanProperty prop=new SettableBeanProperty.MethodProperty(name,type,typeDeser,beanDesc.getClassAnnotations(),setter);  if (propDeser != null) {    prop=prop.withValueDeserializer(propDeser);  }  AnnotationIntrospector.ReferenceProperty ref=config.getAnnotationIntrospector().findReferenceType(setter);  if (ref != null && ref.isManagedReference()) {    prop.setManagedReferenceName(ref.getName());  }  return prop;}  }
class C{  public static String createContactHostRoid(long repoId){  return createRoid(repoId,RegistryEnvironment.get().config().getContactAndHostRepositoryIdentifier());}  }
class C{  public Feed(){  this(KEY);}  }
class C{  private void initComputeProgram(){  glUseProgram(computeProgram);  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  timeUniform=glGetUniformLocation(computeProgram,"time");  blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor");  bounceCountUniform=glGetUniformLocation(computeProgram,"bounceCount");  int boxesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Boxes");  IntBuffer props=BufferUtils.createIntBuffer(1);  IntBuffer params=BufferUtils.createIntBuffer(1);  props.put(0,GL_BUFFER_BINDING);  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,boxesResourceIndex,props,null,params);  boxesSsboBinding=params.get(0);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldPositionImage");  glGetUniformiv(computeProgram,loc,params);  worldPositionImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldNormalImage");  glGetUniformiv(computeProgram,loc,params);  worldNormalImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  public void testSimpleWatchGetMulti() throws Exception {  WatchManager<String> em=new WatchManager<String>();  Watch<String> w=em.watch(new StringWatchPredicate("hello"),3);  for (int i=0; i < 3; i++) {    assertFalse("Match not done before iteration: " + i,w.isDone());    em.process("hello",i);  }  assertTrue("Should be done",w.isDone());  assertFalse("Should not be cancelled",w.isCancelled());  assertEquals("Should have string event","hello",w.get());}  }
class C{  protected void handleSendMessage(){  setMessageSendCallback();switch (message.status()) {case SUCCESS:    progressBar.setVisibility(View.INVISIBLE);  if (percentageView != null)   percentageView.setVisibility(View.INVISIBLE);statusView.setVisibility(View.INVISIBLE);break;case FAIL:progressBar.setVisibility(View.INVISIBLE);if (percentageView != null) percentageView.setVisibility(View.INVISIBLE);statusView.setVisibility(View.VISIBLE);break;case INPROGRESS:progressBar.setVisibility(View.VISIBLE);if (percentageView != null) {percentageView.setVisibility(View.VISIBLE);percentageView.setText(message.progress() + "%");}statusView.setVisibility(View.INVISIBLE);break;default :progressBar.setVisibility(View.INVISIBLE);if (percentageView != null) percentageView.setVisibility(View.INVISIBLE);statusView.setVisibility(View.VISIBLE);break;}}  }
class C{  public boolean tcpNoDelay(){  return reader.getBoolean(TCP_NO_DELAY,DEFAULT_TCP_NO_DELAY);}  }
class C{  @HLEFunction(nid=0x3AD58B8C,version=150,checkInsideInterrupt=true) public int sceKernelSuspendDispatchThread(){  int state=getDispatchThreadState();  if (log.isDebugEnabled()) {    log.debug("sceKernelSuspendDispatchThread() state=" + state);  }  if (Interrupts.isInterruptsDisabled()) {    return SceKernelErrors.ERROR_KERNEL_INTERRUPTS_ALREADY_DISABLED;  }  dispatchThreadEnabled=false;  return state;}  }
class C{  public void run(){  boolean periodic=isPeriodic();  if (!canRunInCurrentRunState(periodic))   cancel(false); else   if (!periodic)   ScheduledFutureTask.super.run(); else   if (ScheduledFutureTask.super.runAndReset()) {    setNextRunTime();    reExecutePeriodic(outerTask);  }}  }
class C{  private boolean checkGooglePlayServicesAvailable(){  final int connectionStatusCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);  if (GooglePlayServicesUtil.isUserRecoverableError(connectionStatusCode)) {    showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);    return false;  }  return (connectionStatusCode == ConnectionResult.SUCCESS);}  }
class C{  protected void drawValueLabel(DrawingContext context,Shape point,Row row,int pointIndex,int col){  Comparable<?> value=row.get(col);  Format format=getValueFormat();  if ((format == null) && row.isColumnNumeric(col)) {    format=NumberFormat.getInstance();  }  String text=(format != null) ? format.format(value) : value.toString();  ColorMapper colors=getValueColor();  Paint paint=colors.get(pointIndex);  Font font=getValueFont();  double fontSize=font.getSize2D();  Location location=getValueLocation();  double alignX=getValueAlignmentX();  double alignY=getValueAlignmentY();  double rotation=getValueRotation();  double distance=getValueDistance();  if (MathUtils.isCalculatable(distance)) {    distance*=fontSize;  } else {    distance=0.0;  }  Label label=new Label(text);  label.setAlignmentX(alignX);  label.setAlignmentY(alignY);  label.setRotation(rotation);  label.setColor(paint);  label.setFont(font);  Rectangle2D boundsPoint=point.getBounds2D();  DrawableContainer labelContainer=new DrawableContainer(new OuterEdgeLayout(distance));  labelContainer.add(label,location);  labelContainer.setBounds(boundsPoint);  labelContainer.draw(context);}  }
class C{  DOMStringListImpl(){  fStrings=new Vector();}  }
class C{  static int zuneLoopOfDeath(int days){  int year=1980;  while (days > 365) {    if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {      if (days > 366) {        days-=366;        year+=1;      }    } else {      days-=365;      year+=1;    }  }  return year;}  }
class C{  private void init(Context context){  if (mInitialised) {    return;  }  mInitialised=true;  mDraweeHolder=DraweeHolder.create(null,context);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    ColorStateList imageTintList=getImageTintList();    if (imageTintList == null) {      return;    }    setColorFilter(imageTintList.getDefaultColor());  }}  }
class C{  public void emitNext(StringBuilder out){  out.append(sections.get(pos++));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <T>Collection<T> asCollection(final Iterator<? extends T> iterator){  List<T> list=new ArrayList<>();  while (iterator.hasNext()) {    list.add(iterator.next());  }  return list;}  }
class C{  public Object putValue(String key,Object value){  return _valueMap.put(key,value);}  }
class C{  public String pad(String value,int places,String padCharacter){  StringBuilder sb=new StringBuilder();  sb.append(value);  while (sb.length() < places) {    sb.append(padCharacter);  }  return sb.toString();}  }
class C{  public void onPause(){  openGLView_.onPause();  pause();}  }
class C{  public RewrittenOutboundUrl execute(String url,HttpServletRequest hsRequest,HttpServletResponse hsResponse) throws InvocationTargetException {  RuleExecutionOutput ruleRuleExecutionOutput;  try {    ruleRuleExecutionOutput=super.matchesBase(url,hsRequest,hsResponse,null);  } catch (  IOException e) {    throw new RuntimeException(e);  }catch (  ServletException e) {    throw new RuntimeException(e);  }  if (ruleRuleExecutionOutput == null || !ruleRuleExecutionOutput.isRuleMatched()) {    return null;  }  return new RewrittenOutboundUrl(ruleRuleExecutionOutput.getReplacedUrl(),this.encodeToUrl);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosVillageArea(zone);}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (m_Serializer != null) {    this.m_Serializer.characters(node);  } else {    String data=((Text)node).getData();    this.m_contentHandler.characters(data.toCharArray(),0,data.length());  }}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0)   return;  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (Iterator<? extends Map.Entry<? extends K,? extends V>> i=m.entrySet().iterator(); i.hasNext(); ) {    Map.Entry<? extends K,? extends V> e=i.next();    put(e.getKey(),e.getValue());  }}  }
class C{  @Override public int compare(Value[] a,Value[] b){  for (int i=0, len=queryColumnIndexes.length; i < len; i++) {    int idx=queryColumnIndexes[i];    int type=sortTypes[i];    Value ao=a[idx];    Value bo=b[idx];    boolean aNull=ao == ValueNull.INSTANCE, bNull=bo == ValueNull.INSTANCE;    if (aNull || bNull) {      if (aNull == bNull) {        continue;      }      return compareNull(aNull,type);    }    int comp=database.compare(ao,bo);    if (comp != 0) {      return (type & DESCENDING) == 0 ? comp : -comp;    }  }  return 0;}  }
class C{  public double norm1(){  double f=0;  for (int j=0; j < n; j++) {    double s=0;    for (int i=0; i < m; i++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public int numProcessors(){  return m_processors;}  }
class C{  public boolean isHourTickMarksVisible(){  return null == hourTickMarksVisible ? _hourTickMarksVisible : hourTickMarksVisible.get();}  }
class C{  public static void main(String... args) throws SQLException {  new Script().runTool(args);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.PARAMETER___ANONYMOUS_PARAMETER_11:    getAnonymous_parameter_1_1().clear();  getAnonymous_parameter_1_1().addAll((Collection<? extends Anonymous_parameter_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static int read(Reader input,char[] buffer,int offset,int length) throws IOException {  assert length >= 0 : "length must not be negative: " + length;  int remaining=length;  while (remaining > 0) {    int location=length - remaining;    int count=input.read(buffer,offset + location,remaining);    if (-1 == count) {      break;    }    remaining-=count;  }  return length - remaining;}  }
class C{  public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(Range<K> range,V value){  return new ImmutableRangeMap<K,V>(ImmutableList.of(range),ImmutableList.of(value));}  }
class C{  private static SpatialGrid initSpatialGrid(String filename) throws IOException {  BufferedReader reader=IOUtils.getBufferedReader(filename);  String line;  double xmin=0.;  double ymin=0.;  double xmax=0.;  double ymax=0.;  double ytmp=0.;  double res=0.;  line=reader.readLine();  String[] header=line.split(SpatialGridTableWriter.separator);  if (header.length > 1) {    xmin=Double.parseDouble(header[1]);    xmax=Double.parseDouble(header[header.length - 1]);    res=(xmax - xmin) / (header.length - 2);    boolean firstLine=true;    while ((line=reader.readLine()) != null) {      ytmp=Double.parseDouble(line.split(SpatialGridTableWriter.separator)[0]);      if (firstLine) {        ymin=ytmp;        firstLine=false;      }    }    ymax=ytmp;    System.out.println(xmin + "," + ymin+ ","+ xmax+ ","+ ymax+ ","+ res);    SpatialGrid sg=new SpatialGrid(xmin,ymin,xmax,ymax,res);    return sg;  }  return null;}  }
class C{  public static void checkHttpCachingVeto(final SolrQueryResponse solrRsp,HttpServletResponse resp,final Method reqMethod){  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {    return;  }  if (solrRsp.isHttpCaching() && solrRsp.getException() == null) {    return;  }  resp.setHeader("Cache-Control","no-cache, no-store");  resp.setHeader("Pragma","no-cache");  resp.setHeader("Expires","Sat, 01 Jan 2000 01:00:00 GMT");  resp.setDateHeader("Last-Modified",System.currentTimeMillis());  resp.setHeader("ETag",'"' + Long.toHexString(System.currentTimeMillis()) + '"');}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  DistinctCountLongAggregatorObjectSet distinctCountAggregator=(DistinctCountLongAggregatorObjectSet)aggregator;  agg(distinctCountAggregator.valueSetForObj);}  }
class C{  @Override public IntervalElement multiply(AbstractDomainElement other){  IntervalElement op=(IntervalElement)other;  MemoryRegion newRegion=region.join(op.region);  int newBitWidth=bitWidth * 2;  IntervalElement top=getTop(newBitWidth);  if (newRegion != MemoryRegion.GLOBAL)   return top;  long[] b=new long[4];  b[0]=getLeft() * op.getLeft();  b[1]=getLeft() * op.getRight();  b[2]=getRight() * op.getLeft();  b[3]=getRight() * op.getRight();  Arrays.sort(b);  if (b[0] <= top.getLeft() || b[3] >= top.getRight())   return top;  long newStride;  if (stride == 0) {    if (op.stride == 0)     newStride=0; else {      assert left == right;      newStride=op.stride * Math.abs(left);    }  } else   if (op.stride == 0) {    assert op.left == op.right;    newStride=Math.abs(op.left) * stride;  } else {    newStride=stride * op.stride;  }  return new IntervalElement(region,b[0],b[3],newStride,newBitWidth);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,long delay,long period){  TimerTaskWrapper taskWrapper=new TimerTaskWrapper(task);  wrappedTasks.put(task,taskWrapper);  timer.scheduleAtFixedRate(taskWrapper,delay,period);}  }
class C{  private void processInsn(SsaInsn insn){  int op=insn.getOpcode().getOpcode();  RegisterSpec result=insn.getResult();  EscapeSet escSet;  if (op == RegOps.MOVE_RESULT_PSEUDO && result.getTypeBearer().getBasicType() == Type.BT_OBJECT) {    escSet=processMoveResultPseudoInsn(insn);    processRegister(result,escSet);  } else   if (op == RegOps.MOVE_PARAM && result.getTypeBearer().getBasicType() == Type.BT_OBJECT) {    escSet=new EscapeSet(result.getReg(),regCount,EscapeState.NONE);    latticeValues.add(escSet);    processRegister(result,escSet);  } else   if (op == RegOps.MOVE_RESULT && result.getTypeBearer().getBasicType() == Type.BT_OBJECT) {    escSet=new EscapeSet(result.getReg(),regCount,EscapeState.NONE);    latticeValues.add(escSet);    processRegister(result,escSet);  }}  }
class C{  public static Complex[] cconvolve(Complex[] x,Complex[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("Dimensions don't agree");  }  int n=x.length;  Complex[] a=fft(x);  Complex[] b=fft(y);  Complex[] c=new Complex[n];  for (int i=0; i < n; i++) {    c[i]=a[i].times(b[i]);  }  return ifft(c);}  }
class C{  public void shape(char[] text,int start,int count){  if (isContextual()) {    contextualShape(text,start,count,fDefaultContextIndex);  } else {    nonContextualShape(text,start,count);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamens05.class,args);}  }
class C{  public AreaVO createArea(AreaVO areaVO){  iniciarTransaccion();  areaVO=areaDbEntity.createArea(areaVO);  commit();  return areaVO;}  }
class C{  public void emitNullCheck(GPR RA){  final int TDItemplate=2 << 26;  final int TWItemplate=3 << 26;  int mi=(VM.BuildFor64Addr ? TDItemplate : TWItemplate) | 0x2 << 21 | RA.value() << 16 | 1;  appendInstruction(mi);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMSection[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:02.647 -0500",hash_original_method="591CB7A3D11D3A931F472B1CBCBD3C6F",hash_generated_method="063E3DA94D0B0304A0EC19A259741FF0") public void useMock(){  assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());  nativeUseMock(mWebViewCore);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  return (stack.getUIMgr() != null) ? stack.getUIMgr().getModuleGroup().symbolMap.get(s) : null;}  }
class C{  public boolean equals(Object o){  IntCharSet set=(IntCharSet)o;  if (intervalls.size() != set.intervalls.size())   return false;  for (int i=0; i < intervalls.size(); i++) {    if (!intervalls.elementAt(i).equals(set.intervalls.elementAt(i)))     return false;  }  return true;}  }
class C{  public static JsonMappingException wrapWithPath(Throwable src,Reference ref){  JsonMappingException jme;  if (src instanceof JsonMappingException) {    jme=(JsonMappingException)src;  } else {    String msg=src.getMessage();    if (msg == null || msg.length() == 0) {      msg="(was " + src.getClass().getName() + ")";    }    jme=new JsonMappingException(msg,null,src);  }  jme.prependPath(ref);  return jme;}  }
class C{  public JCExpression This(Type t){  return Ident(new VarSymbol(FINAL,names._this,t,t.tsym));}  }
class C{  private double naiveQueryDense(NumberVector obj,WritableDoubleDataStore scores,HashSetModifiableDBIDs cands){  double len=0.;  for (int dim=0, max=obj.getDimensionality(); dim < max; dim++) {    final double val=obj.doubleValue(dim);    if (val == 0. || val != val) {      continue;    }    len+=val * val;    if (dim >= index.size()) {      continue;    }    ModifiableDoubleDBIDList column=index.get(dim);    for (DoubleDBIDListIter n=column.iter(); n.valid(); n.advance()) {      scores.increment(n,n.doubleValue() * val);      cands.add(n);    }  }  return Math.sqrt(len);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.358 -0500",hash_original_method="657EB8B0A945E7FD7BA91E2539A322BE",hash_generated_method="8ACDFC143C5D1CC9C09DF9B505B2415F") public boolean isWifiApEnabled(){  return getWifiApState() == WIFI_AP_STATE_ENABLED;}  }
class C{  public AttributeKey(Class<?> source,String name){  this.name=source.getName() + '.' + name+ '@'+ Integer.toHexString(this.hashCode());}  }
class C{  public static boolean checkForOverlap(GridElement gridElement,Point p){  JComponent component=(JComponent)gridElement.getComponent();  java.awt.Rectangle rectangle=component.getVisibleRect();  Point absolute=new Point(gridElement.getRectangle().getX() + p.getX(),gridElement.getRectangle().getY() + p.getY());  if (!rectangle.contains(p.x,p.y)) {    return false;  }  DrawPanel drawPanel=HandlerElementMap.getHandlerForElement(gridElement).getDrawPanel();  List<GridElement> elements=drawPanel.getGridElements();  Selector selector=drawPanel.getSelector();  for (  GridElement other : elements) {    if (other == gridElement || other.getLayer() < gridElement.getLayer() || !other.isSelectableOn(absolute)) {      continue;    }    if (gridElement instanceof Relation && other instanceof Relation) {      if (selector.isSelectedOnly(gridElement)) {        return true;      }      if (selector.isSelectedOnly(other)) {        return false;      }    }    JComponent otherComponent=(JComponent)other.getComponent();    if (other.getLayer() > gridElement.getLayer()) {      Point other_p=new Point(p.x + gridElement.getRectangle().x - other.getRectangle().x,p.y + gridElement.getRectangle().y - other.getRectangle().y);      if (otherComponent.contains(Converter.convert(other_p))) {        return false;      }    }    java.awt.Rectangle other_rectangle=otherComponent.getVisibleRect();    other_rectangle.x+=other.getRectangle().x - gridElement.getRectangle().x;    other_rectangle.y+=other.getRectangle().y - gridElement.getRectangle().y;    if (!(other instanceof com.baselet.element.old.element.Relation) && rectangle.intersects(other_rectangle) && firstSmallerThanSecond(other_rectangle,rectangle)) {      return false;    }  }  return true;}  }
class C{  private URI build(URIBuilder builder){  try {    return builder.build();  } catch (  URISyntaxException e) {    throw new FatalException("Unable to build url!?",e);  }}  }
class C{  private void tryParseTypeAttribute(IDOMElement element){  IDOMAttr typeAttr=(IDOMAttr)UiBinderXmlModelUtilities.getTypeAttribute(element);  if (typeAttr == null) {    return;  }  IRegion valueRegion=XmlUtilities.getAttributeValueRegion(typeAttr);  if (valueRegion == null) {    return;  }  String fqType=typeAttr.getNodeValue();  if (fqType == null) {    return;  }  final IType type=JavaModelSearch.findType(javaProject,fqType);  if (!JavaModelSearch.isValidElement(type)) {    problemMarkerManager.setTypeUndefinedError(valueRegion,fqType);  } else {    if (UiBinderXmlModelUtilities.isStyleElement(element)) {      IType cssResourceType=ClientBundleUtilities.findCssResourceType(javaProject);      if (cssResourceType != null) {        try {          if (!JavaUtilities.isSubtype(cssResourceType,type)) {            problemMarkerManager.setNotCssResourceSubtypeError(valueRegion,fqType);          }        } catch (        JavaModelException e) {          GWTPluginLog.logWarning(e,"Could not validate the <ui:style>'s type attribute.");        }      }    }  }  javaTypeReferences.add(fqType);}  }
class C{  public int stackSize(){switch (typeCode) {case TC_ERROR:case TC_VOID:    return 0;case TC_BOOLEAN:case TC_BYTE:case TC_SHORT:case TC_CHAR:case TC_INT:case TC_FLOAT:case TC_ARRAY:case TC_CLASS:  return 1;case TC_LONG:case TC_DOUBLE:return 2;}throw new CompilerError("stackSize " + toString());}  }
class C{  private void executeShellCommand(String command){  Process process;  try {    process=Runtime.getRuntime().exec("sh");    DataOutputStream dataOutputStream=new DataOutputStream(process.getOutputStream());    dataOutputStream.writeBytes("am start " + command + "\\n");    dataOutputStream.writeBytes("exit\n");    dataOutputStream.flush();  } catch (  IOException e) {    Log.e(TAG,"Shell command execution failed." + e);  }}  }
class C{  public Shapefile(InputStream shpStream,InputStream shxStream,InputStream dbfStream){  this(shpStream,shxStream,dbfStream,null,null);}  }
class C{  private static boolean areEqualWithGenerics(ClassNode a,ClassNode b){  if (a == null)   return b == null;  if (!a.equals(b))   return false;  if (a.isUsingGenerics() && !b.isUsingGenerics())   return false;  GenericsType[] gta=a.getGenericsTypes();  GenericsType[] gtb=b.getGenericsTypes();  if (gta == null && gtb != null)   return false;  if (gtb == null && gta != null)   return false;  if (gta != null && gtb != null) {    if (gta.length != gtb.length)     return false;    for (int i=0; i < gta.length; i++) {      GenericsType ga=gta[i];      GenericsType gb=gtb[i];      boolean result=ga.isPlaceholder() == gb.isPlaceholder() && ga.isWildcard() == gb.isWildcard();      result=result && ga.isResolved() && gb.isResolved();      result=result && ga.getName().equals(gb.getName());      result=result && areEqualWithGenerics(ga.getType(),gb.getType());      result=result && areEqualWithGenerics(ga.getLowerBound(),gb.getLowerBound());      if (result) {        ClassNode[] upA=ga.getUpperBounds();        if (upA != null) {          ClassNode[] upB=gb.getUpperBounds();          if (upB == null || upB.length != upA.length)           return false;          for (int j=0; j < upA.length; j++) {            if (!areEqualWithGenerics(upA[j],upB[j]))             return false;          }        }      }      if (!result)       return false;    }  }  return true;}  }
class C{  public Filter addAttribute(String name,Object attribute){  this.put(name,attribute);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.341 -0500",hash_original_method="FB45006D48B3F1A32CF7E83242DDAE7D",hash_generated_method="4180CD48B508CABA71939068D3A8490E") public boolean enableSmoothTransition(){  return mEnableSmoothTransition;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void parseIsolationClause(){  if (readIf("WITH")) {    if (readIf("RR") || readIf("RS")) {      if (readIf("USE")) {        read("AND");        read("KEEP");        if (readIf("SHARE") || readIf("UPDATE") || readIf("EXCLUSIVE")) {        }        read("LOCKS");      }    } else     if (readIf("CS") || readIf("UR")) {    }  }}  }
class C{  public Chronology withUTC(){  return INSTANCE_UTC;}  }
class C{  public Matcher matcher(){  return new Matcher(this);}  }
class C{  public IgniteDeploymentException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public final void testValidateSucceeds(){  MaxLengthValidator maxLengthValidator=new MaxLengthValidator("foo",2);  assertTrue(maxLengthValidator.validate("12"));}  }
class C{  @Nullable public Bitmap generateIconForUrl(String url){  return generateIconForUrl(url,false);}  }
class C{  public static boolean isNegative(Query q){  if (!(q instanceof BooleanQuery))   return false;  BooleanQuery bq=(BooleanQuery)q;  List<BooleanClause> clauses=bq.clauses();  if (clauses.size() == 0)   return false;  for (  BooleanClause clause : clauses) {    if (!clause.isProhibited())     return false;  }  return true;}  }
class C{  public BOVWBuilder(IndexReader reader,LireFeature lireFeature){  this.reader=reader;  this.lireFeature=lireFeature;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MInOutBound[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public boolean isAlive(){  return !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();}  }
class C{  public static Typeface robotoBlack(Context context){  sRobotoBlack=getFontFromRes(R.raw.roboto_black,context);  return sRobotoBlack;}  }
class C{  protected int checkVerticalKey(int key,String message){  if ((key == TOP) || (key == CENTER) || (key == BOTTOM)) {    return key;  } else {    throw new IllegalArgumentException(message);  }}  }
class C{  public boolean wasNull() throws SQLException {  if (!wasNullValid) {    throw new SQLException("Look at a column before testing null.");  }  if (row == null) {    throw new SQLException("No row available for wasNull.");  }  return wasNull;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:50.393 -0500",hash_original_method="A94D1CCD0A9181704E5BCB2385E1DEF3",hash_generated_method="B480E4364F540DFC4E4FFC1299A7E946") public void fillInNotifierBundle(Bundle bundleToFill){  bundleToFill.putInt("baseStationId",this.mBaseStationId);  bundleToFill.putInt("baseStationLatitude",this.mBaseStationLatitude);  bundleToFill.putInt("baseStationLongitude",this.mBaseStationLongitude);  bundleToFill.putInt("systemId",this.mSystemId);  bundleToFill.putInt("networkId",this.mNetworkId);}  }
class C{  public static void mkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      throw new IOException(MessageFormat.format(UNABLE_TO_MKDIR,directory));    }  } else {    if (!directory.mkdirs()) {      throw new IOException(MessageFormat.format(UNABLE_TO_MKDIR,directory));    }  }}  }
class C{  private void sendItemList(Player player,String progressType){  if (progressType.equals("Open Quests")) {    player.addEvent(new ProgressStatusEvent(progressType,SingletonRepository.getStendhalQuestSystem().getOpenQuests(player)));  } else   if (progressType.equals("Completed Quests")) {    player.addEvent(new ProgressStatusEvent("repeatable",SingletonRepository.getStendhalQuestSystem().getRepeatableQuests(player)));    player.addEvent(new ProgressStatusEvent(progressType,SingletonRepository.getStendhalQuestSystem().getCompletedQuests(player)));  } else   if (progressType.equals("Production")) {    player.addEvent(new ProgressStatusEvent(progressType,SingletonRepository.getProducerRegister().getWorkingProducerNames(player)));  }  player.notifyWorldAboutChanges();}  }
class C{  protected void scaleTo(Projection thisProj){  if (DEBUG) {    logger.fine("OMScalingRaster: scaleTo()");  }  if (bitmap == null) {    if (DEBUG) {      logger.fine("scaleTo() source image is null");    }    return;  }  if (noScalingRequired) {    return;  }  Rectangle projRect=new Rectangle();  projRect.setLocation(point1);  projRect.setSize(point2.x - point1.x,point2.y - point1.y);  Rectangle sourceRect=new Rectangle();  sourceRect.width=width;  sourceRect.height=height;  clipRect=null;  if (!projRect.isEmpty()) {    if ((projRect.width >= 1) && (projRect.height >= 1)) {      if (sourceRect.width <= 0) {        sourceRect.width=1;      }      if (sourceRect.height <= 0) {        sourceRect.height=1;      }      double widthAdj=(double)projRect.width / (double)sourceRect.width;      double heightAdj=(double)projRect.height / (double)sourceRect.height;      AffineTransform xform=new AffineTransform();      xform.setToScale(widthAdj,heightAdj);      this.scalingXFormOp=new AffineTransformOp(xform,getScaleTransformType());    }  }}  }
class C{  public void postWrite(boolean userType,boolean registered,int hashCode,boolean isHashCodeSet){  short flags;  boolean useCompactFooter;  if (userType) {    if (ctx.isCompactFooter()) {      flags=BinaryUtils.FLAG_USR_TYP | BinaryUtils.FLAG_COMPACT_FOOTER;      useCompactFooter=true;    } else {      flags=BinaryUtils.FLAG_USR_TYP;      useCompactFooter=false;    }  } else {    flags=0;    useCompactFooter=false;  }  int finalSchemaId;  int offset;  if (fieldCnt != 0) {    finalSchemaId=schemaId;    offset=out.position() - start;    flags|=BinaryUtils.FLAG_HAS_SCHEMA;    int offsetByteCnt=schema.write(out,fieldCnt,useCompactFooter);    if (offsetByteCnt == BinaryUtils.OFFSET_1)     flags|=BinaryUtils.FLAG_OFFSET_ONE_BYTE; else     if (offsetByteCnt == BinaryUtils.OFFSET_2)     flags|=BinaryUtils.FLAG_OFFSET_TWO_BYTES;    if (rawOffPos != 0) {      flags|=BinaryUtils.FLAG_HAS_RAW;      out.writeInt(rawOffPos - start);    }  } else {    if (rawOffPos != 0) {      finalSchemaId=0;      offset=rawOffPos - start;      flags|=BinaryUtils.FLAG_HAS_RAW;    } else {      finalSchemaId=0;      offset=0;    }  }  if (!isHashCodeSet)   flags|=BinaryUtils.FLAG_EMPTY_HASH_CODE;  int retPos=out.position();  out.unsafePosition(start);  out.unsafeWriteByte(GridBinaryMarshaller.OBJ);  out.unsafeWriteByte(GridBinaryMarshaller.PROTO_VER);  out.unsafeWriteShort(flags);  out.unsafeWriteInt(registered ? typeId : GridBinaryMarshaller.UNREGISTERED_TYPE_ID);  out.unsafeWriteInt(hashCode);  out.unsafeWriteInt(retPos - start);  out.unsafeWriteInt(finalSchemaId);  out.unsafeWriteInt(offset);  out.unsafePosition(retPos);}  }
class C{  public ElementKey<?,?> findElement(QName id){  if (!renamedElements.isEmpty()) {    ElementKey<?,?> childKey=renamedElements.get(id);    if (childKey != null) {      return childKey;    }  }  if (!elements.isEmpty()) {    ElementKey<?,?> childKey=elements.get(id);    if (childKey != null) {      return childKey;    }    if (id.matchesAnyNamespace()) {      for (      Map.Entry<QName,ElementKey<?,?>> elemEntry : elements.entrySet()) {        if (id.matches(elemEntry.getKey())) {          return elemEntry.getValue();        }      }    } else     if (!id.matchesAnyLocalName()) {      childKey=elements.get(toWildcardLocalName(id));      if (childKey != null) {        return ElementKey.of(id,childKey.getDatatype(),childKey.getElementType());      }    }  }  if (adaptations != null) {    ElementKey<?,?> childKey=adaptations.findElement(id);    if (childKey != null) {      return childKey;    }  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.818 -0400",hash_original_method="F722CD05EE5576BABE566E57360BDAA4",hash_generated_method="3C0F1395BED2A6E0D07718D78A4C00FC") protected int processByte(){  return 0;}  }
class C{  public MonitorComposite(Monitor[] monitors){  this.monitors=monitors;  numRows=(monitors == null) ? 0 : monitors.length;  initializeForLookUps();  dateCreated=new Date();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public RelationalJMapper(final Class<T> configuredClass,JMapperAPI jmapperAPI){  this(configuredClass,jmapperAPI.toXStream().toString());}  }
class C{  public TypeInstanceReference createTypeInstanceReference(final IAddress address,final int position,final INaviOperandTreeNode node,final TypeInstance instance,final INaviView view) throws CouldntSaveDataException {  Preconditions.checkNotNull(address,"Error: address argument can not be null");  Preconditions.checkArgument(position >= 0,"Error: position argument must be greater or equal to zero");  Preconditions.checkNotNull(node,"Error: node argument can not be null");  Preconditions.checkNotNull(instance,"Error: instance argument can not be null");  Preconditions.checkNotNull(view,"Error: view argument can not be null");  provider.createTypeInstanceReference(module.getConfiguration().getId(),address.toLong(),position,node.getId(),instance.getId());  final TypeInstanceReference reference=new TypeInstanceReference(address,position,Optional.of(node),instance,view);  referenceLookup.put(new InstanceReferenceLookup(address,position,node.getId()),reference);  return reference;}  }
class C{  public LongConstantOperand(long v){  value=v;}  }
class C{  private void nextPixel(){  this.x++;  if (this.x == this.imgWidth) {    this.x=0;    this.y++;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testGenerateMergedFileDestDelete() throws Exception {  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(true).anyTimes();  File destFile=new File("dest/foo");  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(false);  destFile=new File("/dev/null");  File modFile=new File("mod/foo");  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(true).anyTimes();  expect(fileSystem.isExecutable(origFile)).andReturn(false);  expect(fileSystem.isExecutable(modFile)).andReturn(false);  expect(cmd.runCommand("diff",ImmutableList.of("-N","-u",origFile.getAbsolutePath(),modFile.getAbsolutePath()),"")).andReturn(null);  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,fileDiffer,orig,mod,dest);  merger.generateMergedFile("foo");  control.verify();}  }
class C{  public long longValue(){  return ((new Long(name)).longValue());}  }
class C{  public Source newSource(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return fileSystem.source(entry.cleanFiles[index]);    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  private List<TaggedToken> collapseTweet(Tweet tweet){  List<TaggedToken> tokenList=new ArrayList<TaggedToken>(tweet.getWordList());  for (  TaggedToken token : tokenList) {    Matcher matchWord=Pattern.compile("(.)\\1{2,}").matcher(token.token);    String tempWord=token.token;    while (matchWord.find()) {      if (matchWord.end() < 0 || matchWord.start() < 0) {      }      token.token=tempWord.substring(0,matchWord.start() + 2) + tempWord.substring(matchWord.end());    }  }  return tokenList;}  }
class C{  public boolean equals(XObject obj2){  try {    return m_val == obj2.bool();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  public TableDataElement(Element e){  super("td",e);}  }
class C{  @SuppressWarnings({"UnusedParameters","EmptyMethod"}) protected void registerTypeConversions(@NotNull TypeConversionRegistry registry){}  }
class C{  private void leaveBusy(){}  }
class C{  public void nextEvent(PartitionedEvent event){  final long eventTime=event.getEvent().getTimestamp();  boolean handled=false;synchronized (this.windowManager) {    for (    StreamWindow window : this.windowManager.getWindows()) {      if (window.alive() && window.add(event)) {        handled=true;      }    }    if (!handled && !windowManager.reject(eventTime)) {      StreamWindow window=windowManager.addNewWindow(eventTime);      if (window.add(event)) {        LOG.info("Created {} of {} at {}",window,this.streamId,DateTimeUtil.millisecondsToHumanDateWithMilliseconds(eventTime));        handled=true;      }    }  }  if (!handled) {    if (LOG.isDebugEnabled()) {      LOG.debug("Drop expired event {}",event);    }    outputCollector.drop(event);  }}  }
class C{  @Override public byte[] fromByteArray(Slice fragment){  if (fragment == null || fragment.buffer == null) {    return null;  } else   if (fragment.offset == 0 && fragment.length == fragment.buffer.length) {    return fragment.buffer;  } else {    byte[] buffer=new byte[fragment.buffer.length];    System.arraycopy(fragment.buffer,fragment.offset,buffer,0,fragment.length);    return buffer;  }}  }
class C{  public final void appendDot(){  compoundIDUS=UniqueString.uniqueStringOf(compoundIDUS.toString() + ".");}  }
class C{  public ParameterSet copy(){  ParameterSet copy=new ParameterSet();  List<Parameter> paramList=new ArrayList<Parameter>();  for (  Parameter param : parameters) {    paramList.add(param.copy(copy));  }  copy.setParameters(paramList);  return copy;}  }
class C{  public static double[] append(double[] v,double[] u){  double[] result=new double[v.length + u.length];  System.arraycopy(v,0,result,0,v.length);  System.arraycopy(u,0,result,v.length,u.length);  return result;}  }
class C{  @Override protected Node removeFromFrontier(){  Node result=frontier.remove();  frontierNodeLookup.remove(result.getState());  explored.add(result.getState());  updateMetrics(frontier.size());  return result;}  }
class C{  public static Vector removeTabs(Vector vec){  Vector newVec=new Vector();  int i=0;  while (i < vec.size()) {    String oldline=(String)vec.elementAt(i);    String newline="";    int next=0;    while (next < oldline.length()) {      if (oldline.charAt(next) == '\t') {        int toAdd=8 - (newline.length() % 8);        while (toAdd > 0) {          newline=newline + " ";          toAdd=toAdd - 1;        }      } else {        newline=newline + oldline.substring(next,next + 1);      }      ;      next=next + 1;    }    newVec.addElement(newline);    i=i + 1;  }  ;  return newVec;}  }
class C{  public static BufferedReader newReader(InputStream self){  return new BufferedReader(new InputStreamReader(self));}  }
class C{  public TraceWhen_ createTraceWhen_(){  TraceWhen_Impl traceWhen_=new TraceWhen_Impl();  return traceWhen_;}  }
class C{  public AttributeCertificate toASN1Structure(){  return attrCert;}  }
class C{  @DSComment("no action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.878 -0500",hash_original_method="2EEDDDEB8BA1CD500E3647BC397BF54F",hash_generated_method="10C0B8E2B9DF49DDBC078E9919A022F7") public boolean isClosed(){  return isClosed;}  }
class C{  public void testCreate_3args_1_2(){  System.out.println("create PageAuditCommand without crawler");  String url="";  Set<Parameter> paramSet=null;  boolean isSite=false;  auditCommandFactory.setAuditPageWithCrawler(false);  AuditCommand result=this.auditCommandFactory.create(url,paramSet,isSite);  assertTrue(result instanceof PageAuditCommandImpl);  EasyMock.verify(mockAuditDataService);  EasyMock.verify(mockAudit);}  }
class C{  public boolean menuClosedSlideAllowed(float dx){  if (mMode == SlidingMenu.LEFT) {    return dx > 0;  } else   if (mMode == SlidingMenu.RIGHT) {    return dx < 0;  } else   if (mMode == SlidingMenu.LEFT_RIGHT) {    return true;  }  return false;}  }
class C{  @Override public void onUpdate(Detector.Detections<Barcode> detectionResults,Barcode item){  mOverlay.add(mGraphic);  mGraphic.updateItem(item);}  }
class C{  public static char toChar(byte[] bytes){  return toChar(bytes,0);}  }
class C{  public int lineno(){  return lineNumber;}  }
class C{  private void doLoad(HttpServletRequest request,InstructorEditForm frm){  String instructorId=frm.getInstructorId();  DepartmentalInstructorDAO idao=new DepartmentalInstructorDAO();  DepartmentalInstructor inst=idao.get(new Long(instructorId));  frm.setInstructorId(instructorId);  frm.setName(Constants.toInitialCase(inst.getFirstName(),"-".toCharArray()) + " " + ((inst.getMiddleName() == null) ? "" : Constants.toInitialCase(inst.getMiddleName(),"-".toCharArray()))+ " "+ Constants.toInitialCase(inst.getLastName(),"-".toCharArray()));  if (inst.getFirstName() != null) {    frm.setFname(inst.getFirstName().trim());  }  if (inst.getMiddleName() != null) {    frm.setMname(inst.getMiddleName().trim());  }  frm.setLname(inst.getLastName().trim());  frm.setTitle(inst.getAcademicTitle());  String puid=inst.getExternalUniqueId();  if (puid != null) {    frm.setPuId(puid);  }  frm.setEmail(inst.getEmail());  frm.setDeptName(inst.getDepartment().getName().trim());  if (inst.getPositionType() != null) {    frm.setPosType(inst.getPositionType().getUniqueId().toString());  }  if (inst.getCareerAcct() != null && inst.getCareerAcct().length() > 0) {    frm.setCareerAcct(inst.getCareerAcct().trim());  } else {    if (puid != null && !puid.isEmpty() && DepartmentalInstructor.canLookupInstructor()) {      try {        UserInfo user=DepartmentalInstructor.lookupInstructor(puid);        if (user != null && user.getUserName() != null)         frm.setCareerAcct(user.getUserName()); else         frm.setCareerAcct("");      } catch (      Exception e) {      }    }  }  if (inst.getNote() != null) {    frm.setNote(inst.getNote().trim());  }  frm.setIgnoreDist(inst.isIgnoreToFar() == null ? false : inst.isIgnoreToFar().booleanValue());  try {    DepartmentalInstructor previous=inst.getPreviousDepartmentalInstructor(sessionContext,Right.InstructorEdit);    frm.setPreviousId(previous == null ? null : previous.getUniqueId().toString());    DepartmentalInstructor next=inst.getNextDepartmentalInstructor(sessionContext,Right.InstructorEdit);    frm.setNextId(next == null ? null : next.getUniqueId().toString());  } catch (  Exception e) {    Debug.error(e);  }}  }
class C{  public static MetricId build(final String... parts){  if (parts == null || parts.length == 0) {    return MetricId.EMPTY;  }  if (parts.length == 1) {    return new MetricId(parts[0],EMPTY_TAGS);  }  return new MetricId(key(parts),EMPTY_TAGS);}  }
class C{  public static void removeEnvironmentListener(EnvLoaderListener listener,ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      ((EnvironmentClassLoader)loader).removeListener(listener);      return;    }  }  _globalEnvironmentListeners.remove(listener);}  }
class C{  public void fillDefaultValues(){}  }
class C{  public GradlePluginsRuntimeException(Throwable cause){  super(cause);}  }
class C{  public void before(Method method,Object[] args,Object target) throws Throwable {  SecurityContext ctx=SecurityContextHolder.getContext();  if (ctx.getAuthentication() != null) {    Authentication auth=ctx.getAuthentication();    boolean administrator=false;    GrantedAuthority[] roles=auth.getAuthorities();    for (    GrantedAuthority role1 : roles) {      if (role1.getAuthority().equals(Constants.ADMIN_ROLE)) {        administrator=true;        break;      }    }    User user=(User)args[0];    AuthenticationTrustResolver resolver=new AuthenticationTrustResolverImpl();    boolean signupUser=resolver.isAnonymous(auth);    if (!signupUser) {      User currentUser=getCurrentUser(auth);      if (user.getId() != null && !user.getId().equals(currentUser.getId()) && !administrator) {        log.warn("Access Denied: '" + currentUser.getUsername() + "' tried to modify '"+ user.getUsername()+ "'!");        throw new AccessDeniedException(ACCESS_DENIED);      } else       if (user.getId() != null && user.getId().equals(currentUser.getId()) && !administrator) {        Set<String> userRoles=new HashSet<String>();        if (user.getRoles() != null) {          for (          Object o : user.getRoles()) {            Role role=(Role)o;            userRoles.add(role.getName());          }        }        Set<String> authorizedRoles=new HashSet<String>();        for (        GrantedAuthority role : roles) {          authorizedRoles.add(role.getAuthority());        }        if (!CollectionUtils.isEqualCollection(userRoles,authorizedRoles)) {          log.warn("Access Denied: '" + currentUser.getUsername() + "' tried to change their role(s)!");          throw new AccessDeniedException(ACCESS_DENIED);        }      }    } else {      if (log.isDebugEnabled()) {        log.debug("Registering new user '" + user.getUsername() + "'");      }    }  }}  }
class C{  public void addFileSystemInfo(FileSystemInfo param){  if (localFileSystemInfo == null) {    localFileSystemInfo=new FileSystemInfo[]{};  }  localFileSystemInfoTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localFileSystemInfo);  list.add(param);  this.localFileSystemInfo=(FileSystemInfo[])list.toArray(new FileSystemInfo[list.size()]);}  }
class C{  public void addTWord(String word,String tag){  TWord tword=new TWord(word,tag);  sentence.add(tword);}  }
class C{  private boolean yy_refill() throws java.io.IOException {  if (yy_reader == null)   return true;  if (yy_startRead > 0) {    System.arraycopy(yy_buffer,yy_startRead,yy_buffer,0,yy_endRead - yy_startRead);    yy_endRead-=yy_startRead;    yy_currentPos-=yy_startRead;    yy_markedPos-=yy_startRead;    yy_pushbackPos-=yy_startRead;    yy_startRead=0;  }  if (yy_currentPos >= yy_buffer.length) {    char newBuffer[]=new char[yy_currentPos * 2];    System.arraycopy(yy_buffer,0,newBuffer,0,yy_buffer.length);    yy_buffer=newBuffer;  }  int numRead=yy_reader.read(yy_buffer,yy_endRead,yy_buffer.length - yy_endRead);  if (numRead < 0) {    return true;  } else {    yy_endRead+=numRead;    return false;  }}  }
class C{  public BooleanQueryResultHandlerException(String msg){  super(msg);}  }
class C{  public MutableLocation add(MutableLocation l){  return new MutableLocation(x + l.x,y + l.y,z + l.z,w);}  }
class C{  @SuppressWarnings("unchecked") @Override public void initialise() throws Exception {  super.initialise();  Source source=(Source)sender.getRemoteSource();  String queue;  String selector=null;  final Map<Symbol,Object> supportedFilters=new HashMap<>();  if (source != null) {    Map.Entry<Symbol,DescribedType> filter=AmqpSupport.findFilter(source.getFilter(),AmqpSupport.JMS_SELECTOR_FILTER_IDS);    if (filter != null) {      selector=filter.getValue().getDescribed().toString();      try {        SelectorParser.parse(selector);      } catch (      FilterException e) {        close(new ErrorCondition(AmqpError.INVALID_FIELD,e.getMessage()));        return;      }      supportedFilters.put(filter.getKey(),filter.getValue());    }  }  boolean isPubSub=hasCapabilities(TOPIC,source) || isPubSub(source);  if (isPubSub) {    Map.Entry<Symbol,DescribedType> filter=AmqpSupport.findFilter(source.getFilter(),AmqpSupport.NO_LOCAL_FILTER_IDS);    if (filter != null) {      String remoteContainerId=sender.getSession().getConnection().getRemoteContainer();      String noLocalFilter=ActiveMQConnection.CONNECTION_ID_PROPERTY_NAME.toString() + "<>'" + remoteContainerId+ "'";      if (selector != null) {        selector+=" AND " + noLocalFilter;      } else {        selector=noLocalFilter;      }      supportedFilters.put(filter.getKey(),filter.getValue());    }  }  if (source == null) {    String clientId=connection.getRemoteContainer();    String pubId=sender.getName();    queue=createQueueName(clientId,pubId);    QueueQueryResult result=sessionSPI.queueQuery(queue,false);    if (result.isExists()) {      source=new org.apache.qpid.proton.amqp.messaging.Source();      source.setAddress(queue);      source.setDurable(TerminusDurability.UNSETTLED_STATE);      source.setExpiryPolicy(TerminusExpiryPolicy.NEVER);      source.setDistributionMode(COPY);      source.setCapabilities(TOPIC);      SimpleString filterString=result.getFilterString();      if (filterString != null) {        selector=filterString.toString();        boolean noLocal=false;        String remoteContainerId=sender.getSession().getConnection().getRemoteContainer();        String noLocalFilter=ActiveMQConnection.CONNECTION_ID_PROPERTY_NAME.toString() + "<>'" + remoteContainerId+ "'";        if (selector.endsWith(noLocalFilter)) {          if (selector.length() > noLocalFilter.length()) {            noLocalFilter=" AND " + noLocalFilter;            selector=selector.substring(0,selector.length() - noLocalFilter.length());          } else {            selector=null;          }          noLocal=true;        }        if (noLocal) {          supportedFilters.put(AmqpSupport.NO_LOCAL_NAME,AmqpNoLocalFilter.NO_LOCAL);        }        if (selector != null && !selector.trim().isEmpty()) {          supportedFilters.put(AmqpSupport.JMS_SELECTOR_NAME,new AmqpJmsSelectorFilter(selector));        }      }      sender.setSource(source);    } else {      throw new ActiveMQAMQPNotFoundException("Unknown subscription link: " + sender.getName());    }  } else   if (source.getDynamic()) {    queue=java.util.UUID.randomUUID().toString();    try {      sessionSPI.createTemporaryQueue(queue);    } catch (    Exception e) {      throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.errorCreatingTemporaryQueue(e.getMessage());    }    source.setAddress(queue);  } else {    if (isPubSub) {      if (TerminusDurability.UNSETTLED_STATE.equals(source.getDurable()) || TerminusDurability.CONFIGURATION.equals(source.getDurable())) {        String clientId=connection.getRemoteContainer();        String pubId=sender.getName();        queue=createQueueName(clientId,pubId);        QueueQueryResult result=sessionSPI.queueQuery(queue,false);        if (result.isExists()) {          if (!Objects.equals(result.getFilterString(),SimpleString.toSimpleString(selector)) || (sender.getSource() != null && !sender.getSource().getAddress().equals(result.getAddress().toString()))) {            if (result.getConsumerCount() == 0) {              sessionSPI.deleteQueue(queue);              sessionSPI.createDurableQueue(source.getAddress(),queue,selector);            } else {              throw new ActiveMQAMQPIllegalStateException("Unable to recreate subscription, consumers already exist");            }          }        } else {          sessionSPI.createDurableQueue(source.getAddress(),queue,selector);        }      } else {        queue=java.util.UUID.randomUUID().toString();        try {          sessionSPI.createTemporaryQueue(source.getAddress(),queue,selector);        } catch (        Exception e) {          throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.errorCreatingTemporaryQueue(e.getMessage());        }      }    } else {      queue=source.getAddress();    }    if (queue == null) {      throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.sourceAddressNotSet();    }    try {      if (!sessionSPI.queueQuery(queue,!isPubSub).isExists()) {        throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.sourceAddressDoesntExist();      }    } catch (    ActiveMQAMQPNotFoundException e) {      throw e;    }catch (    Exception e) {      throw new ActiveMQAMQPInternalErrorException(e.getMessage(),e);    }  }  source.setFilter(supportedFilters.isEmpty() ? null : supportedFilters);  boolean browseOnly=!isPubSub && source.getDistributionMode() != null && source.getDistributionMode().equals(COPY);  try {    brokerConsumer=sessionSPI.createSender(this,queue,isPubSub ? null : selector,browseOnly);  } catch (  Exception e) {    throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.errorCreatingConsumer(e.getMessage());  }}  }
class C{  public static void main(String[] argv){  runFilter(new RemoveFrequentValues(),argv);}  }
class C{  private boolean onSend(GridCacheMessage msg,@Nullable UUID destNodeId) throws IgniteCheckedException {  if (msg.error() != null && cctx.kernalContext().isStopping())   return false;  if (msg.messageId() < 0)   msg.messageId(idGen.incrementAndGet());  if (destNodeId == null || !cctx.localNodeId().equals(destNodeId)) {    msg.prepareMarshal(cctx);    if (msg instanceof GridCacheDeployable && msg.addDeploymentInfo())     cctx.deploy().prepare((GridCacheDeployable)msg);  }  return true;}  }
class C{  public static String padBetween(final String first,final int length,final String last){  final int padlen=length - (first.length() + last.length());  return first + (padlen > 0 ? getSpaceString(padlen) : "") + last;}  }
class C{  public AxisLayout(String group,String field,int axis){  this(group,field);  setAxis(axis);}  }
class C{  public T caseSmallerOp_(SmallerOp_ object){  return null;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int keyLen=key.length;  if (keyLen < 16 || keyLen > 32 || (keyLen & 7) != 0) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  int KC=keyLen >>> 2;  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];switch (KC) {case 4:{      int t0=Pack.littleEndianToInt(key,0);      W[0][0]=t0;      int t1=Pack.littleEndianToInt(key,4);      W[0][1]=t1;      int t2=Pack.littleEndianToInt(key,8);      W[0][2]=t2;      int t3=Pack.littleEndianToInt(key,12);      W[0][3]=t3;      for (int i=1; i <= 10; ++i) {        int u=subWord(shift(t3,8)) ^ rcon[i - 1];        t0^=u;        W[i][0]=t0;        t1^=t0;        W[i][1]=t1;        t2^=t1;        W[i][2]=t2;        t3^=t2;        W[i][3]=t3;      }      break;    }case 6:{    int t0=Pack.littleEndianToInt(key,0);    W[0][0]=t0;    int t1=Pack.littleEndianToInt(key,4);    W[0][1]=t1;    int t2=Pack.littleEndianToInt(key,8);    W[0][2]=t2;    int t3=Pack.littleEndianToInt(key,12);    W[0][3]=t3;    int t4=Pack.littleEndianToInt(key,16);    W[1][0]=t4;    int t5=Pack.littleEndianToInt(key,20);    W[1][1]=t5;    int rcon=1;    int u=subWord(shift(t5,8)) ^ rcon;    rcon<<=1;    t0^=u;    W[1][2]=t0;    t1^=t0;    W[1][3]=t1;    t2^=t1;    W[2][0]=t2;    t3^=t2;    W[2][1]=t3;    t4^=t3;    W[2][2]=t4;    t5^=t4;    W[2][3]=t5;    for (int i=3; i < 12; i+=3) {      u=subWord(shift(t5,8)) ^ rcon;      rcon<<=1;      t0^=u;      W[i][0]=t0;      t1^=t0;      W[i][1]=t1;      t2^=t1;      W[i][2]=t2;      t3^=t2;      W[i][3]=t3;      t4^=t3;      W[i + 1][0]=t4;      t5^=t4;      W[i + 1][1]=t5;      u=subWord(shift(t5,8)) ^ rcon;      rcon<<=1;      t0^=u;      W[i + 1][2]=t0;      t1^=t0;      W[i + 1][3]=t1;      t2^=t1;      W[i + 2][0]=t2;      t3^=t2;      W[i + 2][1]=t3;      t4^=t3;      W[i + 2][2]=t4;      t5^=t4;      W[i + 2][3]=t5;    }    u=subWord(shift(t5,8)) ^ rcon;    t0^=u;    W[12][0]=t0;    t1^=t0;    W[12][1]=t1;    t2^=t1;    W[12][2]=t2;    t3^=t2;    W[12][3]=t3;    break;  }case 8:{  int t0=Pack.littleEndianToInt(key,0);  W[0][0]=t0;  int t1=Pack.littleEndianToInt(key,4);  W[0][1]=t1;  int t2=Pack.littleEndianToInt(key,8);  W[0][2]=t2;  int t3=Pack.littleEndianToInt(key,12);  W[0][3]=t3;  int t4=Pack.littleEndianToInt(key,16);  W[1][0]=t4;  int t5=Pack.littleEndianToInt(key,20);  W[1][1]=t5;  int t6=Pack.littleEndianToInt(key,24);  W[1][2]=t6;  int t7=Pack.littleEndianToInt(key,28);  W[1][3]=t7;  int u, rcon=1;  for (int i=2; i < 14; i+=2) {    u=subWord(shift(t7,8)) ^ rcon;    rcon<<=1;    t0^=u;    W[i][0]=t0;    t1^=t0;    W[i][1]=t1;    t2^=t1;    W[i][2]=t2;    t3^=t2;    W[i][3]=t3;    u=subWord(t3);    t4^=u;    W[i + 1][0]=t4;    t5^=t4;    W[i + 1][1]=t5;    t6^=t5;    W[i + 1][2]=t6;    t7^=t6;    W[i + 1][3]=t7;  }  u=subWord(shift(t7,8)) ^ rcon;  t0^=u;  W[14][0]=t0;  t1^=t0;  W[14][1]=t1;  t2^=t1;  W[14][2]=t2;  t3^=t2;  W[14][3]=t3;  break;}default :{throw new IllegalStateException("Should never get here");}}if (!forEncryption) {for (int j=1; j < ROUNDS; j++) {for (int i=0; i < 4; i++) {W[j][i]=inv_mcol(W[j][i]);}}}return W;}  }
class C{  public boolean match(DoStatement node,Object other){  if (!(other instanceof DoStatement)) {    return false;  }  DoStatement o=(DoStatement)other;  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getBody(),o.getBody()));}  }
class C{  public GridTcpCommunicationSpiConcurrentConnectSelfTest(){  super(false);}  }
class C{  @Override public String toString(){  return getClass().getName() + "[width=" + width+ ",height="+ height+ "]";}  }
class C{  static int lighter(int color,float factor){  int red=(int)((Color.red(color) * (1 - factor) / 255 + factor) * 255);  int green=(int)((Color.green(color) * (1 - factor) / 255 + factor) * 255);  int blue=(int)((Color.blue(color) * (1 - factor) / 255 + factor) * 255);  return Color.argb(Color.alpha(color),red,green,blue);}  }
class C{  public boolean contains(T value){  return this.contains(value.getX(),value.getZ());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:    return rewiredTarget != null;}return super.eIsSet(featureID);}  }
class C{  private static boolean addFileDigest(File file,MessageDigest digest,@Nullable IgniteLogger log){  if (!file.isFile()) {    U.error(log,"Failed to add file to directory digest (will not check MD5 hash): " + file);    return false;  }  InputStream in=null;  try {    in=new BufferedInputStream(new FileInputStream(file));    byte[] buf=new byte[1024];    int read=in.read(buf,0,1024);    while (read > -1) {      digest.update(buf,0,read);      read=in.read(buf,0,1024);    }  } catch (  IOException e) {    U.error(log,"Failed to add file to directory digest (will not check MD5 hash): " + file,e);    return false;  } finally {    U.closeQuiet(in);  }  return true;}  }
class C{  public final void test() throws Exception {  System.out.println("ArgumentFeatures Feature Extractor");  String[] viewsToAdd={ViewNames.POS,ViewNames.LEMMA,ViewNames.SHALLOW_PARSE,ViewNames.PARSE_GOLD,ViewNames.SRL_VERB,ViewNames.PARSE_STANFORD,ViewNames.NER_CONLL};  TextAnnotation ta=DummyTextAnnotationGenerator.generateAnnotatedTextAnnotation(viewsToAdd,true,3);  int i=0;  ta.addView(ClauseViewGenerator.STANFORD);  ta.addView(PseudoParse.STANFORD);  System.out.println("This textannotation annotates the text: \n" + ta.getText());  View SRL_VERB=ta.getView("SRL_VERB");  List<Constituent> testlist=SRL_VERB.getConstituentsCoveringSpan(10,13);  testlist.addAll(SRL_VERB.getConstituentsCoveringSpan(26,27));  FeatureManifest featureManifest;  FeatureExtractor fex;  String fileName=Constant.prefix + "/Nom/Classifier/arg-features.fex";  featureManifest=new FeatureManifest(new FileInputStream(fileName));  FeatureManifest.setFeatureExtractor("hyphen-argument-feature",FeatureGenerators.hyphenTagFeature);  FeatureManifest.setTransformer("parse-left-sibling",FeatureGenerators.getParseLeftSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setTransformer("parse-right-sibling",FeatureGenerators.getParseRightSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("pp-features",FeatureGenerators.ppFeatures(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("projected-path",new ProjectedPath(ViewNames.PARSE_STANFORD));  featureManifest.useCompressedName();  featureManifest.setVariable("*default-parser*",ViewNames.PARSE_STANFORD);  fex=featureManifest.createFex();  SrlNomArgumentFeatures af=new SrlNomArgumentFeatures();  for (  Constituent test : testlist) {    assertTrue(SRLFeaturesComparator.isEqual(test,fex,af));  }}  }
class C{  public RetryingMessageListenerAdapter(MessageListener<K,V> messageListener,RetryTemplate retryTemplate,RecoveryCallback<Void> recoveryCallback){  super(messageListener,retryTemplate,recoveryCallback);  Assert.notNull(messageListener,"'messageListener' cannot be null");}  }
class C{  public WriteStream(OutputStream os){  init(new VfsStream(os));}  }
class C{  public void checkInlinable(ConfigData configData){  if (origData == null) {    isInlinable=false;    return;  }  if (configData.isStateFull(url)) {    isInlinable=false;    return;  }  if (isInIEComment) {    isInlinable=false;    return;  }  byte[] bytes=origData;  if (bytes == null) {    isInlinable=false;    return;  }  for (int i=0; i < bytes.length - 4; i++) {    if (bytes[i] == '<' && bytes[i + 1] == '!' && bytes[i + 2] == '-' && bytes[i + 3] == '-') {      isInlinable=false;      return;    }  }  for (int i=0; i < bytes.length - 7; i++) {    if (bytes[i] == '<' && (bytes[i + 1] == 's' || bytes[i + 1] == 'S') && (bytes[i + 2] == 'c' || bytes[i + 2] == 'C') && (bytes[i + 3] == 'r' || bytes[i + 3] == 'R') && (bytes[i + 4] == 'i' || bytes[i + 4] == 'I') && (bytes[i + 5] == 'p' || bytes[i + 5] == 'P') && (bytes[i + 6] == 't' || bytes[i + 6] == 'T')) {      isInlinable=false;      return;    }    if (bytes[i] == '<' && bytes[i + 1] == '/' && (bytes[i + 2] == 's' || bytes[i + 2] == 'S') && (bytes[i + 3] == 'c' || bytes[i + 3] == 'C') && (bytes[i + 4] == 'r' || bytes[i + 4] == 'R') && (bytes[i + 5] == 'i' || bytes[i + 5] == 'I') && (bytes[i + 6] == 'p' || bytes[i + 6] == 'P') && (bytes[i + 7] == 't' || bytes[i + 7] == 'T')) {      isInlinable=false;      return;    }  }  for (int i=3; i < bytes.length; i++) {    if (bytes[i] < 0) {      isInlinable=false;      return;    }  }  int sp=0;  while (sp < bytes.length && bytes[sp] <= ' ')   sp++;  if (sp + 5 < bytes.length && bytes[sp] == '<' && (bytes[sp + 1] == 'h' || bytes[sp + 1] == 'H') && (bytes[sp + 2] == 't' || bytes[sp + 2] == 'T') && (bytes[sp + 3] == 'm' || bytes[sp + 3] == 'M') && (bytes[sp + 4] == 'l' || bytes[sp + 4] == 'L') && bytes[sp + 5] == '>') {    isInlinable=false;    return;  }  isInlinable=true;}  }
class C{  @Override public void restoreScratchRegistersBefore(Instruction s){  for (Iterator<ScratchRegister> i=scratchInUse.iterator(); i.hasNext(); ) {    ScratchRegister scratch=i.next();    if (scratch.currentContents == null)     continue;    if (VERBOSE_DEBUG) {      System.out.println("RESTORE: consider " + scratch);    }    boolean removed=false;    boolean unloaded=false;    if (definedIn(scratch.scratch,s) || (s.isCall() && s.operator() != CALL_SAVE_VOLATILE && scratch.scratch.isVolatile())) {      if (VERBOSE_DEBUG) {        System.out.println("RESTORE : unload because defined " + scratch);      }      unloadScratchRegisterBefore(s,scratch);      if (VERBOSE_DEBUG) {        System.out.println("RSRB: End scratch interval " + scratch.scratch + " "+ s);      }      scratchMap.endScratchInterval(scratch.scratch,s);      Register scratchContents=scratch.currentContents;      if (scratchContents != null) {        if (VERBOSE_DEBUG) {          System.out.println("RSRB: End symbolic interval " + scratch.currentContents + " "+ s);        }        scratchMap.endSymbolicInterval(scratch.currentContents,s);      }      i.remove();      removed=true;      unloaded=true;    }    if (usedIn(scratch.scratch,s) || !isLegal(scratch.currentContents,scratch.scratch,s)) {      if (!unloaded) {        if (VERBOSE_DEBUG) {          System.out.println("RESTORE : unload because used " + scratch);        }        unloadScratchRegisterBefore(s,scratch);        if (VERBOSE_DEBUG) {          System.out.println("RSRB2: End scratch interval " + scratch.scratch + " "+ s);        }        scratchMap.endScratchInterval(scratch.scratch,s);        Register scratchContents=scratch.currentContents;        if (scratchContents != null) {          if (VERBOSE_DEBUG) {            System.out.println("RSRB2: End symbolic interval " + scratch.currentContents + " "+ s);          }          scratchMap.endSymbolicInterval(scratch.currentContents,s);        }      }      if (VERBOSE_DEBUG) {        System.out.println("RESTORE : reload because used " + scratch);      }      reloadScratchRegisterBefore(s,scratch);      if (!removed) {        i.remove();        removed=true;      }    }  }}  }
class C{  public void resetExplicitPassword(){  this.explicitPassword=null;}  }
class C{  @Override public void validate() throws Exception {  logger.info("Validating SAMLResponse..");  Validate.notNull(this.getRequest(),"HttpServletRequest");  this.DecodeResponse();  this.opensamlResponse=(Response)SamlUtils.unmarshallSAMLObj(this.getSamlDom());  Validate.notNull(this.opensamlResponse,"Response object");  Status status=this.opensamlResponse.getStatus();  StatusCode statusCode=status.getStatusCode();  this.setMessageID(this.opensamlResponse.getID());  this.setStatus(statusCode.getValue());  StatusCode substatus=statusCode.getStatusCode();  if (null != substatus) {    this.setSubStatus(substatus.getValue());  }  Validate.notNull(this.opensamlResponse.getIssuer(),"issuer");  this.setIssuerVal(this.opensamlResponse.getIssuer().getValue());  this.setIssueInstant(this.opensamlResponse.getIssueInstant());  this.setDestination(this.opensamlResponse.getDestination());  this.validateDestination();  Message requestMessage=this.validateInResponseTo();  if (null != requestMessage) {    this.controller.getMessageStore().remove(requestMessage.getId());  }  if (statusCode.getValue().equals(StatusCode.SUCCESS_URI)) {    this.validateAssertion();    logger.info("Successfully validated received SAMLResponse");  } else {    logger.info("Received failure response from SSO server, status code: " + getStatus() + " substatus code: "+ getSubStatus());  }}  }
class C{  public static Typeface create(final String name){  Typeface result=SimpleCache.getCache(TAG).get(name);  if (result == null) {    final String fontNameOrFilePath=ParamUtil.getFileNameWithPostfix(name,"ttf");    result=createFromFile(fontNameOrFilePath);    if (result == null) {      result=createByName(fontNameOrFilePath);    }  }  SimpleCache.getCache(TAG_TYPEFACE_NAME).put(result,name);  return SimpleCache.getCache(TAG).put(name,result);}  }
class C{  String extractStringData(byte[] pachSourceData,int nMaxBytes,MutableInt pnConsumedBytes){  int oldConsumed=0;  if (pnConsumedBytes != null) {    oldConsumed=pnConsumedBytes.value;  }  int nLength=getDataLength(pachSourceData,nMaxBytes,pnConsumedBytes);  String ns=new String(pachSourceData,0,nLength);  if (Debug.debugging("iso8211detail") && pnConsumedBytes != null) {    Debug.output("        extracting string data from " + nLength + " bytes of "+ pachSourceData.length+ ": "+ ns+ ": consumed "+ pnConsumedBytes.value+ " vs. "+ oldConsumed+ ", max = "+ nMaxBytes);  }  return ns;}  }
class C{  private void transformEdgeShape(Point2D down,Point2D out){  float x1=(float)down.getX();  float y1=(float)down.getY();  float x2=(float)out.getX();  float y2=(float)out.getY();  AffineTransform xform=AffineTransform.getTranslateInstance(x1,y1);  float dx=x2 - x1;  float dy=y2 - y1;  float thetaRadians=(float)Math.atan2(dy,dx);  xform.rotate(thetaRadians);  float dist=(float)Math.sqrt(dx * dx + dy * dy);  xform.scale(dist / rawEdge.getBounds().getWidth(),1.0);  edgeShape=xform.createTransformedShape(rawEdge);}  }
class C{  public boolean isCodenvyNodesUsageLegal(Integer nodeNumber) throws IOException {  if (nodeNumber == null) {    nodeNumber=dockerConnector.getAvailableNodes().size();  }  try {    CodenvyLicense codenvyLicense=load();    return codenvyLicense.isLicenseNodesUsageLegal(nodeNumber);  } catch (  LicenseException e) {    return CodenvyLicense.isFreeUsageLegal(0,nodeNumber);  }}  }
class C{  public void _setLocationId(String locationId){  this.locationId=locationId;}  }
class C{  protected void extendMessageConverters(List<HttpMessageConverter<?>> converters){}  }
class C{  public WildcardQueryBuilder(String name,String wildcard){  this.name=name;  this.wildcard=wildcard;}  }
class C{  public final void openPdfFile(final ImageInputStream iis) throws PdfException {  final RandomAccessBuffer pdf_datafile;  try {    pdf_datafile=new ImageInputStreamFileBuffer(iis);    objectReader.init(pdf_datafile);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " accessing file");    throw new PdfException("Exception " + e + " accessing file");  }}  }
class C{  public static Bitmap blurEffectsOnBitmap(Context mContext,Bitmap bitmap){  return BlurEffect.fastblur(mContext,bitmap,12);}  }
class C{  final public byte[] toByteArray(){  final byte[] tmp=new byte[this.pos];  System.arraycopy(buf,0,tmp,0,this.pos);  return tmp;}  }
class C{  public boolean isMatcherValid(){  if (m_matcherValid == null)   getMatcher();  return m_matcherValid.booleanValue();}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (op.equals(MSG.actionLookupInstructor())) {    if ((fname == null || fname.trim().length() == 0) && (lname == null || lname.trim().length() == 0) && (careerAcct == null || careerAcct.trim().length() == 0)) {      errors.add("fname",new ActionMessage("errors.generic",MSG.errorSupplyInfoForInstructorLookup()));    }    return errors;  }  if (!screenName.equalsIgnoreCase("instructorPref")) {    if (lname == null || lname.trim().equals("")) {      errors.add("Last Name",new ActionMessage("errors.generic",MSG.errorRequiredLastName()));    }  }  if (errors.size() == 0) {    return super.validate(mapping,request);  } else {    return errors;  }}  }
class C{  public String refreshFreqTipText(){  return "Plot every x'th data point";}  }
class C{  @Override protected EClass eStaticClass(){  return SRuntimePackage.Literals.EXECUTION_VARIABLE;}  }
class C{  private List<String> lookupRoutingTable(String shardId){  List<String> appUrls=routingTable.get(shardId);  if (appUrls == null) {    throw new IllegalStateException("Cannot find routing information for shard ID - " + shardId);  }  return appUrls;}  }
class C{  public boolean remove(Class<?> c){  return (m_Methods.remove(c) != null);}  }
class C{  public CacheAdvisorDUnitTest(){  super();}  }
class C{  public WhereBuilder or(WhereBuilder where){  String condition=whereItems.size() == 0 ? " " : "OR ";  return expr(condition + "(" + where.toString()+ ")");}  }
class C{  public int binarySearchFromTo(float key,int from,int to){  return cern.colt.Sorting.binarySearchFromTo(this.elements,key,from,to);}  }
class C{  public LongsRef next(int count) throws IOException {  assert count > 0;  if (ord == valueCount) {    throw new EOFException();  }  if (off == blockSize) {    refill();  }  count=Math.min(count,blockSize - off);  count=(int)Math.min(count,valueCount - ord);  valuesRef.offset=off;  valuesRef.length=count;  off+=count;  ord+=count;  return valuesRef;}  }
class C{  public Object read(InputNode node,Object result) throws Exception {  Instance type=factory.getInstance(node);  if (type.isReference()) {    return type.getInstance();  }  type.setInstance(result);  if (result != null) {    return populate(node,result);  }  return result;}  }
class C{  public int[] e2f(int i){  int tgtIndex=tgtStartInclusive + i;  if (tgtIndex < 0 || tgtIndex >= tgtEndExclusive)   throw new ArrayIndexOutOfBoundsException();  return sentencePair.isTargetUnaligned(tgtIndex) ? new int[0] : sentencePair.e2f(tgtIndex);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static String printCollection(Collection c){  if (c != null) {    StringBuffer sb=new StringBuffer("[");    Iterator itr=c.iterator();    while (itr.hasNext()) {      sb.append(itr.next());      if (itr.hasNext()) {        sb.append(", ");      }    }    sb.append("]");    return sb.toString();  } else {    return "[null]";  }}  }
class C{  public void zoomOut(){  if (mZoomOut != null) {    mZoomOut.apply(Zoom.ZOOM_AXIS_XY);    repaint();  }}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public void removeComponent(VirtualLocalFile includeSource){  sources.remove(includeSource);}  }
class C{  @Override public void emitErrorMessage(String pMessage){  if (mMessageCollectionEnabled) {    mMessages.add(pMessage);  } else {    super.emitErrorMessage(pMessage);  }}  }
class C{  private static Object add(Object array,int index,Object element,Class clss){  if (array == null) {    if (index != 0) {      throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");    }    Object joinedArray=Array.newInstance(clss,1);    Array.set(joinedArray,0,element);    return joinedArray;  }  int length=Array.getLength(array);  if (index > length || index < 0) {    throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);  }  Object result=Array.newInstance(clss,length + 1);  System.arraycopy(array,0,result,0,index);  Array.set(result,index,element);  if (index < length) {    System.arraycopy(array,index,result,index + 1,length - index);  }  return result;}  }
class C{  public void deleteParm(String name){  parameters.delete(name);}  }
class C{  private void verifyUserGroupCustomgroup(BucketACE bucketACE){  String userOrGroupOrCustomgroup=null;  String USER="user";  String GROUP="group";  String CUSTOMGROUP="customgroup";  if (bucketACE == null) {    return;  }  if (bucketACE.getUser() == null && bucketACE.getGroup() == null && bucketACE.getCustomGroup() == null) {    bucketACE.cancelNextStep(BucketACLOperationErrorType.USER_OR_GROUP_OR_CUSTOMGROUP_NOT_PROVIDED);    _log.error("User or Group or Customgroup is missing.");  } else   if (bucketACE.getUser() != null && bucketACE.getGroup() != null && bucketACE.getCustomGroup() != null) {    bucketACE.cancelNextStep(BucketACLOperationErrorType.USER_AND_GROUP_AND_CUSTOMGROUP_PROVIDED);    _log.error("Either user or group or customgroup should be provided. Never all of them.");  } else   if (bucketACE.getUser() != null && bucketACE.getGroup() != null) {    bucketACE.cancelNextStep(BucketACLOperationErrorType.USER_AND_GROUP_PROVIDED);    _log.error("Either user or group or customgroup should be provided. Never all of them.");  } else   if (bucketACE.getUser() != null && bucketACE.getCustomGroup() != null) {    bucketACE.cancelNextStep(BucketACLOperationErrorType.USER_AND_CUSTOMGROUP_PROVIDED);    _log.error("Either user or group or customgroup should be provided. Never all of them.");  } else   if (bucketACE.getGroup() != null && bucketACE.getCustomGroup() != null) {    bucketACE.cancelNextStep(BucketACLOperationErrorType.GROUP_AND_CUSTOMGROUP_PROVIDED);    _log.error("Either user or group or customgroup should be provided. Never all of them.");  } else {    String domain=bucketACE.getDomain();    if (domain == null) {      domain="";    }    domain=domain.toLowerCase();    if (bucketACE.getUser() != null) {      userOrGroupOrCustomgroup=domain + bucketACE.getUser().toLowerCase() + USER;    } else     if (bucketACE.getGroup() != null) {      userOrGroupOrCustomgroup=domain + bucketACE.getGroup().toLowerCase() + GROUP;    } else {      userOrGroupOrCustomgroup=domain + bucketACE.getCustomGroup().toLowerCase() + CUSTOMGROUP;    }  }  if (userOrGroupOrCustomgroup != null) {    if (!usersGroupsCustomGroups.contains(userOrGroupOrCustomgroup)) {      usersGroupsCustomGroups.add(userOrGroupOrCustomgroup);    } else {      bucketACE.cancelNextStep(BucketACLOperationErrorType.MULTIPLE_ACES_WITH_SAME_USER_OR_GROUP_CUSTOMGROUP);      _log.error("There are multiple ACEs with same user or group or customgroup.");    }  }  if (bucketACE.getDomain() != null && bucketACE.getUser() != null) {    if (bucketACE.getUser().contains("@")) {      bucketACE.cancelNextStep(BucketACLOperationErrorType.MULTIPLE_DOMAINS_FOUND);      _log.error("Multiple Domains found. Please provide either in user or in domain field.");    }  }  if (bucketACE.getDomain() != null && bucketACE.getGroup() != null) {    if (bucketACE.getGroup().contains("@")) {      bucketACE.cancelNextStep(BucketACLOperationErrorType.MULTIPLE_DOMAINS_FOUND);      _log.error("Multiple Domains found. Please provide either in group or in domain field.");    }  }  if (bucketACE.getDomain() != null && bucketACE.getCustomGroup() != null) {    if (bucketACE.getCustomGroup().contains("@")) {      bucketACE.cancelNextStep(BucketACLOperationErrorType.MULTIPLE_DOMAINS_FOUND);      _log.error("Multiple Domains found. Please provide either in customgroup or in domain field.");    }  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Text)) {    return false;  }  final Text that=(Text)o;  if (this.getLength() != that.getLength()) {    return false;  }  byte[] thisBytes=Arrays.copyOf(this.getBytes(),getLength());  byte[] thatBytes=Arrays.copyOf(that.getBytes(),getLength());  return Arrays.equals(thisBytes,thatBytes);}  }
class C{  public static ExtendedKeyUsage fromExtensions(Extensions extensions){  return ExtendedKeyUsage.getInstance(extensions.getExtensionParsedValue(Extension.extendedKeyUsage));}  }
class C{  public static List<org.oscm.vo.VOOrganization> convertToApiVOOrganization(List<org.oscm.internal.vo.VOOrganization> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOOrganization> newVO=new ArrayList<org.oscm.vo.VOOrganization>();  for (  org.oscm.internal.vo.VOOrganization tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  private void _serializeClass(PageContext pc,Set test,Class clazz,Object obj,StringBuilder sb,boolean serializeQueryByColumns,Set<Object> done) throws ConverterException {  Struct sct=new StructImpl(Struct.TYPE_LINKED);  if (test == null)   test=new HashSet();  Field[] fields=clazz.getFields();  Field field;  for (int i=0; i < fields.length; i++) {    field=fields[i];    if (obj != null || (field.getModifiers() & Modifier.STATIC) > 0)     try {      sct.setEL(field.getName(),testRecusrion(test,field.get(obj)));    } catch (    Exception e) {      e.printStackTrace();    }  }  if (obj != null) {    Method[] setters=Reflector.getSetters(clazz);    for (int i=0; i < setters.length; i++) {      sct.setEL(setters[i].getName().substring(3),NULL);    }    Method[] getters=Reflector.getGetters(clazz);    for (int i=0; i < getters.length; i++) {      try {        sct.setEL(getters[i].getName().substring(3),testRecusrion(test,getters[i].invoke(obj,ArrayUtil.OBJECT_EMPTY)));      } catch (      Exception e) {      }    }  }  test.add(clazz);  _serializeStruct(pc,test,sct,sb,serializeQueryByColumns,true,done);}  }
class C{  private void sendInputSteam(InputStream inputStream){  byte[] buffer=new byte[FOUR_KB];  int read;  try {    while (((read=inputStream.read(buffer)) > 0) && socketOpen) {      if (read == FOUR_KB) {        socket.sendMessage(RequestBody.create(WebSocket.BINARY,buffer));      } else {        socket.sendMessage(RequestBody.create(WebSocket.BINARY,Arrays.copyOfRange(buffer,0,read)));      }    }  } catch (  IOException e) {    LOG.log(Level.SEVERE,e.getMessage(),e);  } finally {    try {      inputStream.close();    } catch (    IOException e) {    }  }}  }
class C{  @Override protected void loadDataset(String datasetFile) throws RDFParseException, RepositoryException, IOException {  logger.debug("loading dataset...");  InputStream dataset=SPARQLUpdateTest.class.getResourceAsStream(datasetFile);  try {    con.add(dataset,"",RDFFormat.forFileName(datasetFile));    con.commit();  }  finally {    dataset.close();  }  logger.debug("dataset loaded.");}  }
class C{  public void addMemberToSystem(ObjectName objectName,MemberMXBean proxy,FederationComponent newState){  if (objectName.equals(thisMemberName)) {    ObjectName distrObjectName=MBeanJMXAdapter.getDistributedSystemName();    DistributedSystemMXBean systemMBean=new DistributedSystemMBean(this);    service.registerInternalMBean(systemMBean,distrObjectName);    this.systemLevelNotifEmitter=(DistributedSystemMBean)service.getDistributedSystemMXBean();    this.distListener=new DistributedSystemNotifListener();  }  if (mapOfMembers != null) {    mapOfMembers.put(objectName,proxy);    memberSetSize=mapOfMembers.values().size();  }  updateMember(objectName,newState,null);  try {    mbeanServer.addNotificationListener(objectName,distListener,null,null);  } catch (  InstanceNotFoundException e) {    if (logger.isDebugEnabled()) {      logger.debug(e.getMessage());    }    logger.info(LocalizedMessage.create(ManagementStrings.INSTANCE_NOT_FOUND,objectName));  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public int findDuplicate2(int[] nums){  int n=nums.length - 1;  int l=0, r=n;  while (l < r) {    int m=l + (r - l) / 2;    int count=countBelow(nums,m);    if (count > m)     r=m; else     l=m + 1;  }  return l;}  }
class C{  public boolean isHighlighted(){  return this.highlighted;}  }
class C{  public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  public void testMaxEqual(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.max(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static long toLong(int a,int b){  return ((long)a << INT_SIZE) | (b & INT_MASK);}  }
class C{  public ParameterMethodModel(String parameterName,String parameterType){  this.parameterName=parameterName;  this.parameterType=parameterType;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(opt(key));}  }
class C{  public boolean isECCM(){  return (angelECCMStrength > angelStrength) || (angelStrength == 0 && eccmStrength > strength);}  }
class C{  public static byte[] endRowExclusiveOrOneAfterMax(RangeRequest rangeRequest){  Preconditions.checkArgument(!rangeRequest.isReverse());  if (rangeRequest.getEndExclusive().length == 0) {    return oneAfterMaximumName();  }  return rangeRequest.getEndExclusive();}  }
class C{  public void actionPerformed(ActionEvent e){  if (log.isDebugEnabled()) {    log.debug("CV " + getCvNum() + ","+ getSecondCvNum()+ " actionPerformed");  }  int newVal=((Integer.valueOf(_value.getText()).intValue()) - mOffset) / mFactor;  updatedTextField();  prop.firePropertyChange("Value",null,Integer.valueOf(newVal));}  }
class C{  final byte[] acquireAuthenticationBytes(byte type,int length){  byte[] copy=block.clone();  if (block.length != 0) {    copy[8]=type;    copy[copy.length - 2]=(byte)(length >> 8);    copy[copy.length - 1]=(byte)(length);    int k=7;    while ((k >= 0) && (++block[k] == 0)) {      k--;    }  }  return copy;}  }
class C{  @Override public void windowDeiconified(WindowEvent e){}  }
class C{  @SuppressWarnings("deprecation") protected boolean activateOrientation(){  if (mSensorManager != null && mSensorManager.registerListener(this,mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION),SensorManager.SENSOR_DELAY_GAME))   return true;  PLLog.debug("PLView::activateOrientation","Orientation sensor is not available on the device!");  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:56.372 -0500",hash_original_method="D5FF53CF24644619C5751BB5240DB34B",hash_generated_method="326B50B15E660E78D5564B8F03966ABE") public static boolean isStatusCompleted(int status){  return (status >= 200 && status < 300) || (status >= 400 && status < 600);}  }
class C{  public static void waitForEOL(StreamTokenizer tokenizer) throws IOException {  while (tokenizer.nextToken() != StreamTokenizer.TT_EOL) {  }  ;  tokenizer.pushBack();}  }
class C{  public static Flag registerMaxHitsFlag(final CFlags flags,final char singleLetter){  if (singleLetter != NO_SINGLE_LETTER) {    return flags.registerOptional(singleLetter,MAX_HITS_FLAG,Integer.class,"int",HITS_DESC).setCategory(SENSITIVITY_TUNING);  } else {    return flags.registerOptional(MAX_HITS_FLAG,Integer.class,"int",HITS_DESC).setCategory(SENSITIVITY_TUNING);  }}  }
class C{  protected void sequence_TemplateLiteral(ISerializationContext context,TemplateLiteral semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public FireworkEffectBuilder withFade(Color color) throws IllegalArgumentException {  Validate.notNull(color,"Color can't be null");  this.fadeColors.add(color);  return this;}  }
class C{  public BlockDecryptionHandler(final SecretKey decryptionKey,final short nonceLen,final CryptoAlgorithm cryptoAlgo,final byte[] messageId){  decryptionKey_=decryptionKey;  nonceLen_=nonceLen;  cryptoAlgo_=cryptoAlgo;  messageId_=messageId;  blockHeaders_=new CipherBlockHeaders();}  }
class C{  public final void addRootNode(SpaceEffGraphNode root){  if (_rootNodes == null) {    _rootNodes=new SpaceEffGraphNodeListHeader();  }  _rootNodes.append(root);}  }
class C{  public Constant(boolean value){  this(Boolean.class,value);}  }
class C{  @Override public void put(){}  }
class C{  public void testConstructorBytesPositive(){  byte aBytes[]={127,56,100,-1,14,75,-24,-100};  byte rBytes[]={127,56,100,-1,14,75,-24,-100};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  @Override public String toString(){  return "Read Methods:\n" + read() + "\n\n"+ "Write Methods:\n"+ write();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:41.807 -0500",hash_original_method="0276346FF35DC079CD9DD44ABC105E23",hash_generated_method="016A39E64874E99BBB7D8F29F651B09A") private void parseTestClass(String testClassName,TestSuiteBuilder testSuiteBuilder){  int methodSeparatorIndex=testClassName.indexOf('#');  String testMethodName=null;  if (methodSeparatorIndex > 0) {    testMethodName=testClassName.substring(methodSeparatorIndex + 1);    testClassName=testClassName.substring(0,methodSeparatorIndex);  }  testSuiteBuilder.addTestClassByName(testClassName,testMethodName,getTargetContext());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.889 -0500",hash_original_method="C941C94EC2830D733291C7020E6CF834",hash_generated_method="36A1A9638D239C97D62615392477B6E6") public static int HSVToColor(float hsv[]){  return HSVToColor(0xFF,hsv);}  }
class C{  private void postMessageArrived(DMessage msg,DProtocol which){  if (m_debugMsgOn || m_debugMsgFileOn)   trace(msg,true);  int type=msg.getType();switch (type) {case DMessage.InExit:{      m_isConnected=false;      break;    }case DMessage.InProcessTag:{    sendMessageIsolate(DMessage.OutProcessedTag,msg.getTargetIsolate());    break;  }case DMessage.InContinue:{  if (msg.getTargetIsolate() == Isolate.DEFAULT_ID)   m_isHalted=false; else {    updateHaltIsolateStatus(msg.getTargetIsolate(),false);  }  break;}case DMessage.InOption:{if (msg.getTargetIsolate() == Isolate.DEFAULT_ID) {  String s=msg.getString();  String v=msg.getString();  m_prefs.put(s,v);}break;}case DMessage.InSwfInfo:case DMessage.InScript:case DMessage.InRemoveScript:{m_evalIsAndInstanceofCache.clear();m_incoming=true;break;}default :{m_incoming=true;break;}}m_lastResponse=true;}  }
class C{  public void rename(String file,String newName){  if (newName.indexOf('/') > -1) {    throw new RuntimeException("Rename accepts only relative file names not full paths: " + newName);  }  Util.getImplementation().rename(file,newName);}  }
class C{  public void insertRow() throws SQLException {  onInsertRow=false;  super.insertRow();}  }
class C{  public static final byte[] unzipBestEffort(byte[] in){  return unzipBestEffort(in,Integer.MAX_VALUE);}  }
class C{  private static int NewStringUTF(JNIEnvironment env,Address utf8bytes){  if (traceJNI)   VM.sysWrite("JNI called: NewStringUTF  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    String returnString=JNIGenericHelpers.createUTFStringFromC(utf8bytes);    return env.pushJNIRef(returnString);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public RootLoader(URL[] urls,ClassLoader parent){  super(urls,parent);  try {    customClasses.put("org.w3c.dom.Node",super.loadClass("org.w3c.dom.Node",false));  } catch (  Exception e) {  }}  }
class C{  private static GridUriDeploymentFileProcessorResult processNoDescriptorFile(File file,String uri,IgniteLogger log) throws IgniteSpiException {  ClassLoader clsLdr=GridUriDeploymentClassLoaderFactory.create(U.gridClassLoader(),file,log);  Set<Class<? extends ComputeTask<?,?>>> clss=GridUriDeploymentDiscovery.getClasses(clsLdr,file);  GridUriDeploymentFileProcessorResult res=new GridUriDeploymentFileProcessorResult();  res.setFile(file);  res.setClassLoader(clsLdr);  if (clss != null) {    List<Class<? extends ComputeTask<?,?>>> validTasks=new ArrayList<>(clss.size());    for (    Class<? extends ComputeTask<?,?>> cls : clss) {      if (isAllowedTaskClass(cls)) {        if (log.isDebugEnabled())         log.debug("Found grid deployment task: " + cls.getName());        validTasks.add(cls);      }    }    if (!validTasks.isEmpty())     res.setTaskClasses(validTasks); else     if (log.isDebugEnabled())     log.debug("No tasks loaded from file [file=" + file.getAbsolutePath() + ", uri="+ U.hidePassword(uri)+ ']');  }  return res;}  }
class C{  public static <T>T[] reverseEach(T[] self,@ClosureParams(FirstParam.Component.class) Closure closure){  each(new ReverseListIterator<T>(Arrays.asList(self)),closure);  return self;}  }
class C{  protected final void addValidType(T t){  validTypes.add(t);}  }
class C{  private void showCompanyLogoPre(){  actionbar.setDisplayOptions(window_default_configuration);  actionbar.setDisplayShowTitleEnabled(false);  actionbar.setDisplayUseLogoEnabled(true);  actionbartitle_current=null;}  }
class C{  public void receiveOneToOneFileDeliveryStatus(ContactId contact,ImdnDocument imdn){  if (sLogger.isActivated()) {    sLogger.debug("Handle file delivery status: fileTransferId=" + imdn.getMsgId() + " notification_type="+ imdn.getNotificationType()+ " status="+ imdn.getStatus()+ " contact="+ contact);  }  mFileTransferService.receiveOneToOneFileDeliveryStatus(imdn,contact);}  }
class C{  private ReturnType parseReturnType(){  if (current() == 'V') {    advance();    return VoidDescriptor.make();  } else   return parseTypeSignature();}  }
class C{  public void move(){}  }
class C{  public IndexedPropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue,int index){  super(source,propertyName,oldValue,newValue);  this.index=index;}  }
class C{  private String tagReplace(final String input,final Tags tags){  final String direlem=null;  final StringBuilder stringBuilder=new StringBuilder(input);  int firstPosition=0;  int secondPosition=0;  while (((firstPosition=stringBuilder.indexOf(tags.openWiki,secondPosition)) >= 0) && ((secondPosition=stringBuilder.indexOf(tags.closeWiki,firstPosition + tags.openWikiLength)) >= 0)) {    if (Arrays.binarySearch(HEADLINE_TAGS,tags.openWiki) >= 0) {      int i=0;      boolean beginsWith=true;      while (i < firstPosition) {        if (stringBuilder.charAt(i) > ' ') {          beginsWith=false;          break;        }        i++;      }      if (beginsWith)       processHeadline(stringBuilder,firstPosition,tags,secondPosition,direlem);    } else {      final int oldLength=stringBuilder.length();      stringBuilder.replace(firstPosition,firstPosition + tags.openWikiLength,tags.openHTML);      secondPosition+=stringBuilder.length() - oldLength;      stringBuilder.replace(secondPosition,secondPosition + tags.closeWikiLength,tags.closeHTML);    }  }  return stringBuilder.toString();}  }
class C{  public void paintComponent(Graphics graphics){  double least=this.scatterPlot.getMinSample();  double greatest=this.scatterPlot.getMaxSample();  String minStr=format.format(least);  String maxStr=format.format(greatest);  Graphics2D g2d=(Graphics2D)graphics;  FontMetrics fontMetrics=g2d.getFontMetrics();  int widthMinStr=fontMetrics.stringWidth(minStr);  int widthMaxStr=fontMetrics.stringWidth(maxStr);  int maxWidth=Math.max(widthMinStr,widthMaxStr);  PADDINGLEFT=maxWidth;  PADDINGOTHER=50;  HEIGHT=600 + PADDINGOTHER;  WIDTH=600 + PADDINGLEFT;  SPACE=2;  DASH=10;  setSize(new Dimension(WIDTH + 2 * SPACE,HEIGHT));  this.rectMap.clear();  int height=HEIGHT - PADDINGOTHER;  g2d.setColor(this.getBackground());  g2d.fillRect(0,0,WIDTH + 2 * SPACE,HEIGHT);  g2d.setColor(Color.WHITE);  g2d.fillRect(PADDINGLEFT,0,(WIDTH + SPACE) - PADDINGLEFT,height);  g2d.setColor(LINE_COLOR);  g2d.drawRect(PADDINGLEFT,0,(WIDTH + SPACE) - PADDINGLEFT,height - 2 * SPACE);  g2d.setColor(LINE_COLOR);  g2d.drawString(minStr,PADDINGLEFT + 5,height + 15);  g2d.drawLine(PADDINGLEFT,height + DASH,PADDINGOTHER,height);  g2d.drawString(maxStr,WIDTH - widthMaxStr,height + 15);  g2d.drawLine(WIDTH + SPACE,height + DASH,WIDTH + SPACE,height);  g2d.setColor(LINE_COLOR);  int topY=0;  g2d.drawString(maxStr,PADDINGLEFT - fontMetrics.stringWidth(maxStr),topY + 10);  g2d.drawLine(PADDINGLEFT - DASH,topY,PADDINGOTHER,topY);  g2d.drawString(minStr,PADDINGLEFT - fontMetrics.stringWidth(minStr),height - 2);  g2d.drawLine(PADDINGLEFT - DASH,height,PADDINGOTHER,height);  if (this.scatterPlot.getMinSample() < 0 && this.scatterPlot.getMaxSample() > 0) {    double originLeft[]=plotPoint(least,0,least,greatest);    double originRight[]=plotPoint(greatest,0,least,greatest);    double originTop[]=plotPoint(0,least,least,greatest);    double originBottom[]=plotPoint(0,greatest,least,greatest);    g2d.drawLine((int)originLeft[0] + 2,(int)originLeft[1] + 2,(int)originRight[0] + 2,(int)originRight[1] + 2);    g2d.drawLine((int)originTop[0] + 2,(int)originTop[1] + 2,(int)originBottom[0] + 2,(int)originBottom[1] + 2);  }  g2d.setColor(new Color(255,0,0));  for (  Object o : scatterPlot.getIndexSet()) {    int i=(Integer)o;    double x=this.scatterPlot.getxData()[i];    double y=this.scatterPlot.getyData()[i];    double result[]=plotPoint(x,y,least,greatest);    g2d.fill(new Ellipse2D.Double(result[0],result[1],4,4));  }  if (scatterPlot.isDrawRegLine()) {    RegressionDataset regData;    Parameters params=new Parameters();    Vector<String> regressors=new Vector();    regressors.add(scatterPlot.getXVariable().getName());    params.set("targetName",scatterPlot.getYVariable().getName());    if (scatterPlot.getIndexSet().size() != scatterPlot.getDataSet().getNumRows()) {      ColtDataSet newDataSet=new ColtDataSet((ColtDataSet)scatterPlot.getDataSet());      int throwAway[]=new int[scatterPlot.getComplementIndexSet().size()];      for (int j=0; j < throwAway.length; j++) {        throwAway[j]=(Integer)scatterPlot.getComplementIndexSet().get(j);      }      newDataSet.removeRows(throwAway);      regData=new RegressionDataset(newDataSet);    } else {      regData=new RegressionDataset(scatterPlot.getDataSet());    }    RegressionResult regResult=regData.regress(scatterPlot.getYVariable(),scatterPlot.getXVariable());    double[] coef=regResult.getCoef();    double[] regLeft=plotPoint(least,coef[0] + coef[1] * least,least,greatest);    double[] regRight=plotPoint(greatest,coef[0] + coef[1] * greatest,least,greatest);    g2d.setColor(LINE_COLOR);    g2d.drawLine((int)regLeft[0] + 2,(int)regLeft[1] + 2,(int)regRight[0] + 2,(int)regRight[1] + 2);  }  g2d.setColor(LINE_COLOR);}  }
class C{  public static DataSet addMissingData(DataSet inData,double[] probs){  DataSet outData;  try {    outData=new MarshalledObject<>(inData).get();  } catch (  Exception e) {    throw new RuntimeException(e);  }  if (probs.length != outData.getNumColumns()) {    throw new IllegalArgumentException("Wrong number of elements in prob array");  }  for (  double prob : probs) {    if (prob < 0.0 || prob > 1.0) {      throw new IllegalArgumentException("Probability out of range");    }  }  for (int j=0; j < outData.getNumColumns(); j++) {    Node variable=outData.getVariable(j);    for (int i=0; i < outData.getNumRows(); i++) {      double test=RandomUtil.getInstance().nextDouble();      if (test < probs[j]) {        outData.setObject(i,j,((Variable)variable).getMissingValueMarker());      }    }  }  return outData;}  }
class C{  public void testSetBitNegativeInside3(){  String as="-18446744073709551615";  String res="-18446744073709551611";  int number=2;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.setBit(number);  assertEquals(res,result.toString());}  }
class C{  private int quantHmmd(int[] hmmd,int quantizationLevels){  int h=0;  int offset=0;  int subspace=0;  int q=0;  if (hmmd[3] < 7)   subspace=0; else   if ((hmmd[3] > 6) && (hmmd[3] < 21))   subspace=1; else   if ((hmmd[3] > 19) && (hmmd[3] < 61))   subspace=2; else   if ((hmmd[3] > 59) && (hmmd[3] < 111))   subspace=3; else   if ((hmmd[3] > 109) && (hmmd[3] < 256))   subspace=4;  if (quantizationLevels == 256) {    offset=0;    h=(int)((hmmd[0] / quantizationLevels) * quantTable[offset + subspace] + (hmmd[4] / quantizationLevels) * quantTable[offset + subspace + 1]);  } else   if (quantizationLevels == 128) {    offset=10;    h=(int)((hmmd[0] / quantizationLevels) * quantTable[offset + subspace] + (hmmd[4] / quantizationLevels) * quantTable[offset + subspace + 1]);  } else   if (quantizationLevels == 64) {    offset=20;    h=(int)((hmmd[0] / quantizationLevels) * quantTable[offset + subspace] + (hmmd[4] / quantizationLevels) * quantTable[offset + subspace + 1]);  } else   if (quantizationLevels == 32) {    offset=30;    h=(int)((hmmd[0] / quantizationLevels) * quantTable[offset + subspace] + (hmmd[4] / quantizationLevels) * quantTable[offset + subspace + 1]);  }  return h;}  }
class C{  public FluxShellSpout(String[] args,String[] outputFields){  super(args);  this.outputFields=outputFields;}  }
class C{  public static LineIterator lineIterator(File file) throws IOException {  return lineIterator(file,null);}  }
class C{  private static void turnAdvancingFrontConvex(DTSweepContext tcx,AdvancingFrontNode b,AdvancingFrontNode c){  AdvancingFrontNode first=b;  while (c != tcx.aFront.tail) {    if (tcx.isDebugEnabled()) {      tcx.getDebugContext().setActiveNode(c);    }    if (orient2d(b.point,c.point,c.next.point) == Orientation.CCW) {      fill(tcx,c);      c=c.next;    } else {      if (b != first && orient2d(b.prev.point,b.point,c.point) == Orientation.CCW) {        fill(tcx,b);        b=b.prev;      } else {        b=c;        c=c.next;      }    }  }}  }
class C{  protected boolean xIsSame(int pointIndex){  return ((getFlag(pointIndex) & 0x10) != 0);}  }
class C{  public static void addPrezonedAssignments(StringSetMap exportMaskZoningMap,Map<URI,List<URI>> assignments,StringSetMap existingAndPrezonedZoningMap){  for (  String iniUriStr : existingAndPrezonedZoningMap.keySet()) {    StringSet iniPorts=new StringSet(existingAndPrezonedZoningMap.get(iniUriStr));    if (exportMaskZoningMap != null) {      if (exportMaskZoningMap.containsKey(iniUriStr)) {        iniPorts.removeAll(exportMaskZoningMap.get(iniUriStr));      }    }    if (!iniPorts.isEmpty()) {      URI iniUri=URI.create(iniUriStr);      if (!assignments.containsKey(iniUri)) {        assignments.put(iniUri,new ArrayList<URI>());      }      assignments.get(iniUri).addAll(StringSetUtil.stringSetToUriList(iniPorts));    }  }}  }
class C{  public int size(){  return q.size();}  }
class C{  public final void update(byte[] input) throws IllegalStateException {  if (!isInitMac) {    throw new IllegalStateException();  }  if (input != null) {    spiImpl.engineUpdate(input,0,input.length);  }}  }
class C{  private static PipelineOp convertArbitraryLengthPath(PipelineOp left,final ArbitraryLengthPathNode alpNode,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  final boolean usePipelinedHashJoin=usePipelinedHashJoin(ctx,alpNode);  final Set<IVariable<?>> alpVars=ctx.sa.getDefinitelyProducedBindings(alpNode,new LinkedHashSet<IVariable<?>>(),true);  final Set<IVariable<?>> joinVarsSet=ctx.sa.getDefinitelyIncomingBindings(alpNode,new LinkedHashSet<IVariable<?>>());  joinVarsSet.retainAll(alpVars);  final IVariable<?>[] joinVars=joinVarsSet.toArray(new IVariable<?>[joinVarsSet.size()]);  final Set<IVariable<?>> alpUsedVars=alpNode.getUsedVars();  final Set<IVariable<?>> projectInVars=ctx.sa.getMaybeIncomingBindings(alpNode,new LinkedHashSet<IVariable<?>>());  final Set<IVariable<?>> nonProjectInVars=new HashSet<IVariable<?>>(projectInVars);  projectInVars.retainAll(alpUsedVars);  IVariable<?>[] projectInVarsArr=projectInVars.toArray(new IVariable<?>[projectInVars.size()]);  nonProjectInVars.removeAll(projectInVars);  if (log.isDebugEnabled()) {    log.debug(alpNode.getUsedVars());    log.debug(ctx.sa.getMaybeIncomingBindings(alpNode,new LinkedHashSet<IVariable<?>>()));    log.debug(projectInVars);  }  final String solutionSetName="--set-" + ctx.nextId();  final INamedSolutionSetRef namedSolutionSet=NamedSolutionSetRefUtility.newInstance(null,solutionSetName,joinVars);  final JoinGroupNode subgroup=(JoinGroupNode)alpNode.subgroup();  PipelineOp subquery=convertJoinGroup(null,subgroup,doneSet,ctx,false);  if (ctx.isCluster()) {    subquery=applyQueryHints(new StartOp(BOp.NOARGS,NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,ctx.nextId()),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)})),alpNode,ctx);  }  subquery=(PipelineOp)subquery.setProperty(BOp.Annotations.NAMESPACE,ctx.getNamespace());  final IVariableOrConstant<?> leftTerm=alpNode.left().getValueExpression();  final IVariableOrConstant<?> rightTerm=alpNode.right().getValueExpression();  final IVariable<?> tVarLeft=alpNode.tVarLeft().getValueExpression();  final IVariable<?> tVarRight=alpNode.tVarRight().getValueExpression();  final IVariable<?> edgeVar=alpNode.edgeVar() != null ? alpNode.edgeVar().getValueExpression() : null;  final IVariableOrConstant<?> middleTerm=alpNode.middle() != null ? alpNode.middle().getValueExpression() : null;  final List<IVariable<?>> dropVars=new ArrayList<>();  for (  VarNode v : alpNode.dropVars()) {    dropVars.add(v.getValueExpression());  }  PipelineOp alpOp=null;  if (usePipelinedHashJoin) {    alpOp=applyQueryHints(new ArbitraryLengthPathOp(leftOrEmpty(null),new NV(ArbitraryLengthPathOp.Annotations.SUBQUERY,subquery),new NV(ArbitraryLengthPathOp.Annotations.LEFT_TERM,leftTerm),new NV(ArbitraryLengthPathOp.Annotations.RIGHT_TERM,rightTerm),new NV(ArbitraryLengthPathOp.Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(ArbitraryLengthPathOp.Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(ArbitraryLengthPathOp.Annotations.EDGE_VAR,edgeVar),new NV(ArbitraryLengthPathOp.Annotations.MIDDLE_TERM,middleTerm),new NV(ArbitraryLengthPathOp.Annotations.LOWER_BOUND,alpNode.lowerBound()),new NV(ArbitraryLengthPathOp.Annotations.UPPER_BOUND,alpNode.upperBound()),new NV(ArbitraryLengthPathOp.Annotations.PROJECT_IN_VARS,projectInVarsArr),new NV(ArbitraryLengthPathOp.Annotations.DROP_VARS,dropVars),new NV(Predicate.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)),alpNode,ctx);    alpOp=(PipelineOp)alpOp.setProperty(BOp.Annotations.NAMESPACE,ctx.getNamespace());  }  left=addHashIndexOp(left,usePipelinedHashJoin,ctx,alpNode,JoinTypeEnum.Normal,joinVars,null,projectInVarsArr,namedSolutionSet,null,null,alpOp);  if (!usePipelinedHashJoin) {    left=applyQueryHints(new ArbitraryLengthPathOp(leftOrEmpty(left),new NV(ArbitraryLengthPathOp.Annotations.SUBQUERY,subquery),new NV(ArbitraryLengthPathOp.Annotations.LEFT_TERM,leftTerm),new NV(ArbitraryLengthPathOp.Annotations.RIGHT_TERM,rightTerm),new NV(ArbitraryLengthPathOp.Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(ArbitraryLengthPathOp.Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(ArbitraryLengthPathOp.Annotations.EDGE_VAR,edgeVar),new NV(ArbitraryLengthPathOp.Annotations.MIDDLE_TERM,middleTerm),new NV(ArbitraryLengthPathOp.Annotations.LOWER_BOUND,alpNode.lowerBound()),new NV(ArbitraryLengthPathOp.Annotations.UPPER_BOUND,alpNode.upperBound()),new NV(ArbitraryLengthPathOp.Annotations.PROJECT_IN_VARS,projectInVarsArr),new NV(ArbitraryLengthPathOp.Annotations.DROP_VARS,dropVars),new NV(Predicate.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)),alpNode,ctx);  }  if (!usePipelinedHashJoin) {    if (ctx.nativeHashJoins) {      left=applyQueryHints(new HTreeSolutionSetHashJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(HTreeSolutionSetHashJoinOp.Annotations.CONSTRAINTS,null),new NV(HTreeSolutionSetHashJoinOp.Annotations.RELEASE,true),new NV(HTreeSolutionSetHashJoinOp.Annotations.LAST_PASS,true),new NV(HTreeSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet)),subgroup,ctx);    } else {      left=applyQueryHints(new JVMSolutionSetHashJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(JVMSolutionSetHashJoinOp.Annotations.CONSTRAINTS,null),new NV(JVMSolutionSetHashJoinOp.Annotations.RELEASE,true),new NV(JVMSolutionSetHashJoinOp.Annotations.LAST_PASS,true),new NV(JVMSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet)),subgroup,ctx);    }  }  if (ctx.nativeHashJoins)   doneSet.removeAll(nonProjectInVars);  return left;}  }
class C{  public void initialize(){  for (int i=0; i < sections.size(); i++) {    sections.get(i).initialize();  }}  }
class C{  public final void testEqualsObject02(){  assertTrue(new ECFieldF2m(43).equals(new ECFieldF2m(43)));}  }
class C{  private void deleteEntry(final SQLiteDatabase database,final String stringId){  database.delete(SongPlayCountColumns.NAME,WHERE_ID_EQUALS,new String[]{stringId});}  }
class C{  public void cleanUp(){  LatLong prev=points.get(points.size() - 1);  for (int i=0; i < points.size(); i++) {    LatLong pt=points.get(i);    if (pt.equals(prev)) {      points.remove(i);      i--;    } else     prev=pt;  }}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 4:    if (x instanceof SnmpInt) {      try {        node.checkJvmClassesVerboseLevel(new EnumJvmClassesVerboseLevel(((SnmpInt)x).toInteger()));      } catch (      IllegalArgumentException e) {        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);      }    } else {      throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);    }  break;case 3:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public void doSubscribe(ServiceMeta serviceMeta){  registryService.subscribeSet().add(serviceMeta);  Message msg=new Message();  msg.sign(SUBSCRIBE_SERVICE);  msg.data(serviceMeta);  Channel ch=channel;  if (attachSubscribeEventOnChannel(serviceMeta,ch)) {    ch.writeAndFlush(msg).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);    MessageNonAck msgNonAck=new MessageNonAck(msg,ch);    messagesNonAck.put(msgNonAck.id,msgNonAck);  }}  }
class C{  SourceRange mergeWith(SourceRange sr){  if (sr == null)   return this;  if (startPos == Position.NOPOS)   startPos=sr.startPos; else   if (sr.startPos != Position.NOPOS)   startPos=(startPos < sr.startPos ? startPos : sr.startPos);  if (endPos == Position.NOPOS)   endPos=sr.endPos; else   if (sr.endPos != Position.NOPOS)   endPos=(endPos > sr.endPos ? endPos : sr.endPos);  return this;}  }
class C{  private static boolean isFrostWireOld(String messageVersion){  if (messageVersion == null)   return false;  String currentVersion=FrostWireUtils.getFrostWireVersion();  if (currentVersion.equals(messageVersion)) {    return false;  }  try {    String[] fwVersionParts=currentVersion.split("\\.");    int fw_major=Integer.parseInt(fwVersionParts[0]);    int fw_release=Integer.parseInt(fwVersionParts[1]);    int fw_service=Integer.parseInt(fwVersionParts[2]);    String[] msgVersionParts=messageVersion.split("\\.");    int msg_major=Integer.parseInt(msgVersionParts[0]);    int msg_release=Integer.parseInt(msgVersionParts[1]);    int msg_service=Integer.parseInt(msgVersionParts[2]);    if (fw_major < msg_major) {      return true;    }    if (fw_major == msg_major && fw_release < msg_release) {      return true;    }    if (fw_major == msg_major && fw_release == msg_release && fw_service < msg_service) {      return true;    }  } catch (  Exception e) {    return false;  }  return false;}  }
class C{  protected Hashtable<String,Object> p_getEnvironment(){  return envprops;}  }
class C{  public CViewNode(final int id,final double x,final double y,final double width,final double height,final Color color,final Color borderColor,final boolean selected,final boolean visible){  Preconditions.checkArgument(id >= -1,"Error: Node ID must be positive or -1 for unsaved nodes.");  Preconditions.checkNotNull(color,"Error: Color argument can't be null");  Preconditions.checkNotNull(borderColor,"Error: Border color argument can't be null");  m_id=id;  m_x=x;  m_y=y;  m_height=height;  m_width=width;  m_color=color;  m_borderColor=borderColor;  m_selected=selected;  m_visible=visible;}  }
class C{  public FolderTokenMultFld findByName(String fldName) throws Exception {  int i;  FolderTokenMultFld fld=null;  boolean find=false;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getName().equals(fldName)) {      find=true;      break;    }  }  if (!find) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  return fld;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.728 -0500",hash_original_method="7745DFEE9834EC2B32DE9DD1516D53D2",hash_generated_method="378B520FE7F4D3A46D15D74710323131") public static void enablePlatformNotifications(){  if (++sPlatformNotificationEnableRefCount == 1) {    if (sNetwork != null) {      sNetwork.mRequestQueue.enablePlatformNotifications();      sNetwork.monitorRoaming();    } else {      sPlatformNotifications=true;    }  }}  }
class C{  protected void incrementSeqNum(){  intToNetworkByteOrder(mySeqNum++,sequenceNum,0,4);}  }
class C{  public MavenArchetype(@NotNull String groupId,@NotNull String artifactId,@NotNull String version,@Nullable String repository){  this.groupId=groupId;  this.artifactId=artifactId;  this.version=version;  this.repository=repository;}  }
class C{  public HistoryUpdateRequest clone(){  HistoryUpdateRequest result=new HistoryUpdateRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.HistoryUpdateDetails=HistoryUpdateDetails == null ? null : HistoryUpdateDetails.clone();  return result;}  }
class C{  private void incrementPreparedOperations(){  preparedOperations++;}  }
class C{  public int height(){  return height(root);}  }
class C{  @Override public boolean doStep(final IScope scope){  if (!getSpecies().isStepOverriden()) {    _step_(scope);    return !scope.interrupted();  } else {    return scope.execute(getSpecies().getAction(ISpecies.stepActionName),this,null).passed();  }}  }
class C{  public void testLime() throws IOException {  TtmlSubtitle subtitle=getSubtitle(INLINE_ATTRIBUTES_TTML_FILE);  assertEquals(4,subtitle.getEventTimeCount());  assertSpans(subtitle,20,"text 2","sansSerif",TtmlStyle.STYLE_ITALIC,TtmlColorParser.CYAN,TtmlColorParser.LIME,false,true,null);}  }
class C{  public Object put(int key,Object value){  Entry tab[]=table;  int index=(key & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.key == key) {      Object old=e.value;      e.value=value;      return old;    }  }  modCount++;  if (count >= threshold) {    rehash();    tab=table;    index=(key & 0x7FFFFFFF) % tab.length;  }  tab[index]=new Entry(key,value,tab[index]);  count++;  return null;}  }
class C{  public boolean isNaN(){  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String redHeader, greenHeader, blueHeader, intensityHeader, saturationHeader, hueHeader;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  redHeader=args[0];  greenHeader=args[1];  blueHeader=args[2];  intensityHeader=args[3];  hueHeader=args[4];  saturationHeader=args[5];  if (redHeader.isEmpty() || greenHeader.isEmpty() || blueHeader == null || intensityHeader.isEmpty() || hueHeader.isEmpty() || saturationHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal;    double r, g, b;    double i, s, h, m;    float progress;    WhiteboxRasterInfo red=new WhiteboxRasterInfo(redHeader);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(greenHeader);    if (green.getNumberRows() != rows || green.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(blueHeader);    if (blue.getNumberRows() != rows || blue.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    double redNoData=red.getNoDataValue();    double greenNoData=green.getNoDataValue();    double blueNoData=blue.getNoDataValue();    WhiteboxRaster intensity=new WhiteboxRaster(intensityHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    WhiteboxRaster hue=new WhiteboxRaster(hueHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    WhiteboxRaster saturation=new WhiteboxRaster(saturationHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    double overallMin=Math.min(Math.min(red.getDisplayMinimum(),green.getDisplayMinimum()),blue.getDisplayMinimum());    double overallMax=Math.max(Math.max(red.getDisplayMaximum(),green.getDisplayMaximum()),blue.getDisplayMaximum());    double range=overallMax - overallMin;    double[] dataRed, dataGreen, dataBlue;    for (row=0; row < rows; row++) {      dataRed=red.getRowValues(row);      dataGreen=green.getRowValues(row);      dataBlue=blue.getRowValues(row);      for (col=0; col < cols; col++) {        redVal=dataRed[col];        greenVal=dataGreen[col];        blueVal=dataBlue[col];        if ((redVal != redNoData) && (greenVal != greenNoData) && (blueVal != blueNoData)) {          r=(redVal - overallMin) / range;          if (r < 0) {            r=0;          }          if (r > 1) {            r=1;          }          g=(greenVal - overallMin) / range;          if (g < 0) {            g=0;          }          if (g > 1) {            g=1;          }          b=(blueVal - overallMin) / range;          if (b < 0) {            b=0;          }          if (b > 1) {            b=1;          }          m=Math.min(Math.min(r,g),b);          i=r + g + b;          if (i == 3) {            h=0;          } else           if (m == b) {            h=(g - b) / (i - 3 * b);          } else           if (m == r) {            h=(b - r) / (i - 3 * r) + 1;          } else {            h=(r - g) / (i - 3 * g) + 2;          }          if (h <= 1) {            s=(i - 3 * b) / i;          } else           if (h <= 2) {            s=(i - 3 * r) / i;          } else {            s=(i - 3 * g) / i;          }          intensity.setValue(row,col,i);          hue.setValue(row,col,h);          saturation.setValue(row,col,s);        } else {          intensity.setValue(row,col,redNoData);          hue.setValue(row,col,redNoData);          saturation.setValue(row,col,redNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    intensity.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    intensity.addMetadataEntry("Created on " + new Date());    intensity.close();    hue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    hue.addMetadataEntry("Created on " + new Date());    hue.close();    saturation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    saturation.addMetadataEntry("Created on " + new Date());    saturation.close();    red.close();    green.close();    blue.close();    returnData(intensityHeader);    returnData(hueHeader);    returnData(saturationHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void validateFields() throws IllegalStateException {  for (  String rf : requiredFields)   if (textFields.get(rf).getText().trim().isEmpty()) {    textFields.get(rf).requestFocusInWindow();    throw new IllegalStateException(Constant.messages.getString("authentication.method.script.dialog.error.text.required",rf));  }}  }
class C{  public static void internalizeStrings(Metadata meta){  String name=meta.getName();  if (null != name) {    meta.setName(name.intern());  }  if (meta.getLabelsSize() > 0) {    Map<String,String> newlabels=new HashMap<String,String>();    for (    Entry<String,String> entry : meta.getLabels().entrySet()) {      String key=entry.getKey().intern();      String value=entry.getValue().intern();      newlabels.put(key,value);    }    meta.setLabels(newlabels);  }  if (meta.getAttributesSize() > 0) {    Map<String,String> newattributes=new HashMap<String,String>();    for (    Entry<String,String> entry : meta.getAttributes().entrySet()) {      String key=entry.getKey().intern();      String value=entry.getValue().intern();      newattributes.put(key,value);    }    meta.setAttributes(newattributes);  }}  }
class C{  protected CompilationUnitContext(TemplateContextType type,IDocument document,int completionOffset,int completionLength,ICompilationUnit compilationUnit){  super(type,document,completionOffset,completionLength);  fCompilationUnit=compilationUnit;  fIsManaged=false;}  }
class C{  private static void terminateOldRJRLauncher(ILaunchConfiguration configuration,ILaunch launch) throws CoreException {  String port=configuration.getAttribute(Plugin.ATTR_PORT,"");  String sslPort=configuration.getAttribute(Plugin.ATTR_SSL_PORT,"");  boolean enableSSL=configuration.getAttribute(Plugin.ATTR_ENABLE_SSL,false);  if (!"".equals(port) && launcher.containsKey(port)) {    terminateLaunch(launcher.get(port));    launcher.remove(port);  }  if (enableSSL && !"".equals(sslPort) && launcher.containsKey(sslPort)) {    terminateLaunch(launcher.get(sslPort));    launcher.remove(sslPort);  }}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  public void installUI(JComponent c){}  }
class C{  public static void testLoadWords() throws Exception {  DatabaseMemory.DATABASE_URL="jdbc:derby:wiktionary;create=true";  DatabaseMemory.TEST=true;  DatabaseMemory.RECREATE_DATABASE=true;  Bot bot=Bot.createInstance();  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://en.wiktionary.org/wiki/Category:English_nouns"));  System.out.println("*** Done Nouns ***");  sense.input(new URL("http://en.wiktionary.org/wiki/Category:English_verbs"));  System.out.println("*** Done Verbs ***");  sense.input(new URL("http://en.wiktionary.org/wiki/Category:English_adjectives"));  System.out.println("*** Done Adjectives ***");  bot.shutdown();}  }
class C{  private static boolean versionMatches(Integer v1,int v2){  if (v1 == null || v1 == 0 || v2 == 0) {    return true;  }  return v1.equals(v2);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  MACDDataset mACDDataset=(MACDDataset)dataset;  MACDItem mACDItem=(MACDItem)mACDDataset.getSeries(series).getDataItem(item);  double x1=dataset.getXValue(series,item);  double y1=mACDItem.getMACD();  double x0=0;  double y0=0;  int lastItem=0;  MACDItem prevMACDItem=null;  if (item != 0) {    prevMACDItem=(MACDItem)mACDDataset.getSeries(series).getDataItem(item - 1);    x0=mACDDataset.getXValue(series,item - 1);    y0=prevMACDItem.getMACD();    lastItem=mACDDataset.getItemCount(series) - 1;  }  int numX=mACDDataset.getItemCount(series);  double minX=mACDDataset.getXValue(series,0);  double maxX=mACDDataset.getXValue(series,numX - 1);  drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,x0,y0,x1,y1,lastItem,series,item,crosshairState,pass,numX,minX,maxX,mACDDataset.getSeriesColor(0),dataset);  y1=mACDItem.getSignalLine();  if (item != 0) {    y0=prevMACDItem.getSignalLine();  }  drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,x0,y0,x1,y1,lastItem,series,item,crosshairState,pass,numX,minX,maxX,Color.RED,dataset);  y1=mACDItem.getMACDHistogram();  if (item != 0) {    y0=prevMACDItem.getMACDHistogram();  }  y0=0;  x0=x1;  drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,x0,y0,x1,y1,lastItem,series,item,crosshairState,pass,numX,minX,maxX,Color.BLACK,dataset);}  }
class C{  public Choice createChoice(){  ChoiceImpl choice=new ChoiceImpl();  return choice;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void paintTabbedPaneContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  protected void init(){}  }
class C{  public boolean hasExtensionsWithRunningIssues(){  for (  ExtensionRunRequirements reqs : getExtensionRequirements()) {    if (!reqs.isRunnable()) {      return true;    }  }  return false;}  }
class C{  public static Node selectSingleNode(Node contextNode,String str) throws TransformerException {  return selectSingleNode(contextNode,str,contextNode);}  }
class C{  public static int coordsToId(Coords c){  return c.getY() * 100000 + c.getX();}  }
class C{  public ModalDocument(Element elt){  super(elt);}  }
class C{  public ArrayList<Object> scratchList(){  return this.scratchList;}  }
class C{  public boolean isCalculationTypeSubtract(){  return CALCULATIONTYPE_SubtractOp1_Op2.equals(getCalculationType());}  }
class C{  public FileURLConnection(URL url){  super(url);  filename=url.getFile();  if (filename == null) {    filename="";  }  filename=UriCodec.decode(filename);}  }
class C{  protected int compile(boolean incremental){  try {    messages.clear();    OEMConfiguration tempOEMConfiguration;    if (oemConfiguration == null) {      tempOEMConfiguration=(OEMConfiguration)getDefaultConfiguration(true);    } else {      tempOEMConfiguration=OEMUtil.getApplicationConfiguration(constructCommandLine(oemConfiguration),oemConfiguration.keepLinkReport(),oemConfiguration.keepSizeReport(),OEMUtil.getLogger(logger,messages),resolver,mimeMappings);    }    if (tempOEMConfiguration == null) {      clean(false,false,false,true,false,false);      return FAIL;    } else     if (oemConfiguration != null && oemConfiguration.keepConfigurationReport()) {      configurationReport=OEMUtil.formatConfigurationBuffer(tempOEMConfiguration.cfgbuf);    }    setupFontManager(tempOEMConfiguration);    if (oemConfiguration != null) {      oemConfiguration.cfgbuf=tempOEMConfiguration.cfgbuf;    }    if (tempOEMConfiguration.configuration.benchmark()) {      benchmark=CompilerAPI.runBenchmark();      benchmark.setTimeFilter(tempOEMConfiguration.configuration.getBenchmarkTimeFilter());      benchmark.startTime(Benchmark.PRECOMPILE);    } else {      CompilerAPI.disableBenchmark();    }    cc.run();    OEMUtil.init(OEMUtil.getLogger(logger,messages),mimeMappings,meter,resolver,cc);    Map licenseMap=OEMUtil.getLicenseMap(tempOEMConfiguration.configuration);    if (data == null || !incremental) {      String compilationType=(cacheName != null) ? "inactive" : "full";      if (benchmark != null) {        benchmark.benchmark2("Starting " + compilationType + " compile for "+ getOutput(),true);      }      int returnValue=recompile(false,licenseMap,tempOEMConfiguration);      if (benchmark != null) {        benchmark.benchmark2("Ending " + compilationType + " compile for "+ getOutput(),true);      }      clean(returnValue == FAIL,false,false,true,false,false);      return returnValue;    }    CompilerAPI.setupHeadless(tempOEMConfiguration.configuration);    CompilerConfiguration compilerConfig=tempOEMConfiguration.configuration.getCompilerConfiguration();    NameMappings mappings=CompilerAPI.getNameMappings(tempOEMConfiguration.configuration);    Transcoder[] transcoders=WebTierAPI.getTranscoders(tempOEMConfiguration.configuration);    SubCompiler[] compilers=WebTierAPI.getCompilers(compilerConfig,mappings,transcoders);    CompilerSwcContext swcContext=new CompilerSwcContext(true);    try {      swcContext.load(compilerConfig.getLibraryPath(),flex2.compiler.common.Configuration.getAllExcludedLibraries(compilerConfig,tempOEMConfiguration.configuration),compilerConfig.getIncludeLibraries(),mappings,I18nUtils.getTranslationFormat(compilerConfig),data.swcCache);    } catch (    SwcException ex) {      clean(false,false,false,true,false,false);      return FAIL;    }    if (libraryCache != null) {      libraryCache.setSwcCache(data.swcCache);    }    data.includes=new HashSet<String>(swcContext.getIncludes());    data.excludes=new HashSet<String>(swcContext.getExterns());    tempOEMConfiguration.configuration.addExterns(swcContext.getExterns());    tempOEMConfiguration.configuration.addIncludes(swcContext.getIncludes());    if (OEMUtil.isRecompilationNeeded(data,swcContext,tempOEMConfiguration)) {      data.resources=new ResourceContainer();      if (benchmark != null) {        benchmark.benchmark2("Starting full compile for " + getOutput(),true);      }      clean(true,false,false,true,false,false);      int returnValue=recompile(true,licenseMap,tempOEMConfiguration);      if (benchmark != null) {        benchmark.benchmark2("Ending full compile for " + getOutput(),true);      }      clean(returnValue == FAIL,false,false,true,false,false);      return returnValue;    }    if (benchmark != null) {      benchmark.benchmark2("Starting active compile for " + getOutput(),true);    }    boolean relink=false;    if (applicationCache != null) {      ContextStatics contextStatics=applicationCache.getContextStatics();      data.perCompileData=contextStatics;      if (applicationCache.isConsistent(tempOEMConfiguration.configuration)) {        relink=(loadCachedSources(data.resources.sources()) || loadCachedSources(data.sourceList.sources()) || loadCachedSources(data.sourcePath.sources()));      } else {        applicationCache.clear();      }    }    data.perCompileData.userDefined.clear();    data.sourcePath.clearCache();    data.bundlePath.clearCache();    data.resources.refresh();    final int count=CompilerAPI.validateCompilationUnits(data.fileSpec,data.sourceList,data.sourcePath,data.bundlePath,data.resources,swcContext,data.perCompileData,tempOEMConfiguration.configuration);    if ((count > 0) || (data.swcChecksum != swcContext.checksum())) {      data.configuration=tempOEMConfiguration.configuration;      data.linkChecksum=tempOEMConfiguration.cfgbuf.link_checksum_ts();      data.swcChecksum=swcContext.checksum();      SymbolTable symbolTable=new SymbolTable(tempOEMConfiguration.configuration,data.perCompileData);      data.sources=new ArrayList<Source>();      data.units=compile(compilers,swcContext,symbolTable,mappings,licenseMap,data.sources);      boolean forcedToStop=CompilerAPI.forcedToStop();      if (data.units == null || forcedToStop) {        data.sources=null;      }      if (benchmark != null) {        benchmark.benchmark2("Ending active compile for " + getOutput(),true);      }      clean(false,false,false,true,false,false);      return (data.units != null && !forcedToStop) ? OK : FAIL;    } else {      if (benchmark != null) {        benchmark.stopTime(Benchmark.PRECOMPILE,false);        benchmark.startTime(Benchmark.POSTCOMPILE);      }      int retVal=SKIP;      if (data != null) {        CompilerAPI.displayWarnings(data.units);        if ((data.linkChecksum != tempOEMConfiguration.cfgbuf.link_checksum_ts()) || relink) {          retVal=LINK;        }      } else {        retVal=LINK;      }      data.linkChecksum=tempOEMConfiguration.cfgbuf.link_checksum_ts();      data.swcChecksum=swcContext.checksum();      if (benchmark != null) {        benchmark.benchmark2("Ending active compile for " + getOutput(),true);      }      if (CompilerAPI.forcedToStop())       retVal=FAIL;      if (retVal != LINK) {        clean(false,false,false,true,false,false);      }      return retVal;    }  }  finally {    OEMUtil.clean();  }}  }
class C{  public static <T>HashSet<T> hashSet(){  return new HashSet<T>();}  }
class C{  protected void assertTextMessagesEqual(String messsage,Message[] firstSet,Message[] secondSet) throws JMSException {  assertEquals("Message count does not match: " + messsage,firstSet.length,secondSet.length);  for (int i=0; i < secondSet.length; i++) {    TextMessage m1=(TextMessage)firstSet[i];    TextMessage m2=(TextMessage)secondSet[i];    assertTextMessageEqual("Message " + (i + 1) + " did not match : ",m1,m2);  }}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public static void putDouble(final String key,final double value){  final Editor editor=getOptimusPref().edit();  editor.putLong(key,Double.doubleToRawLongBits(value)).apply();}  }
class C{  public static void addFlow(Flow flow){  sFlowMap.put(flow.getName(),flow);}  }
class C{  protected DefaultFragmentIdentifierHandler(){}  }
class C{  private void collectText(){  if (textNodeCount > 1) {    firstTextNode.setText(textBuffer.toString());  }  textNodeCount=0;}  }
class C{  public void animateList(){  expanded=!expanded;  if (animateTimeline.getStatus().equals(Status.RUNNING))   animateTimeline.stop();  animateTimeline.getKeyFrames().clear();  double duration=120 / this.getChildren().size();  if (expanded)   this.getChildren().forEach(null);  for (int i=1; i < this.getChildren().size(); i++) {    Node child=this.getChildren().get(i);    ArrayList<KeyValue> keyValues=animationsMap.get(child).call(expanded);    animateTimeline.getKeyFrames().add(new KeyFrame(Duration.millis(i * duration),keyValues.toArray(new KeyValue[keyValues.size()])));  }  ArrayList<KeyValue> keyValues=animationsMap.get(this.getChildren().get(0)).call(expanded);  animateTimeline.getKeyFrames().add(new KeyFrame(Duration.millis(160),keyValues.toArray(new KeyValue[keyValues.size()])));  if (!expanded) {    animateTimeline.setOnFinished(null);  } else {    animateTimeline.setOnFinished(null);  }  animateTimeline.play();}  }
class C{  public void bootstrapMemory(Memory memory,boolean addStates,boolean pin){synchronized (memory) {    long start=System.currentTimeMillis();    bootstrapNetwork(memory.getShortTermMemory());    languageNetwork(memory.getShortTermMemory());    englishNetwork(memory.getShortTermMemory());    mathNetwork(memory.getShortTermMemory());    for (    Vertex vertex : memory.getShortTermMemory().findAll()) {      if (vertex.getCreationDate().getTime() > start) {        vertex.setPinned(true);      }    }    if (addStates) {      stateMachineNetwork(memory.getShortTermMemory());    }    for (    Sense sense : memory.getBot().awareness().getSenses().values()) {      memory.getShortTermMemory().createVertex(sense.getPrimitive());    }    for (    Tool tool : memory.getBot().awareness().getTools().values()) {      memory.getShortTermMemory().createVertex(tool.getPrimitive());    }    if (pin) {      for (      Vertex vertex : memory.getShortTermMemory().findAll()) {        if (vertex.getCreationDate().getTime() > start) {          vertex.setPinned(true);        }      }    }    memory.save();  }}  }
class C{  public List rows() throws SQLException {  return rows(getSql(),getParameters());}  }
class C{  public static void launch(IProject project,String mode){  launch(project,mode,null,null);}  }
class C{  public EmailAttachment(byte[] data,String name){  this(data,name,null,Part.ATTACHMENT,null);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_FUNC_CACHE_PREFER_NONE:    return "CU_FUNC_CACHE_PREFER_NONE";case CU_FUNC_CACHE_PREFER_SHARED:  return "CU_FUNC_CACHE_PREFER_SHARED";case CU_FUNC_CACHE_PREFER_L1:return "CU_FUNC_CACHE_PREFER_L1";case CU_FUNC_CACHE_PREFER_EQUAL:return "CU_FUNC_CACHE_PREFER_EQUAL";}return "INVALID CUfunc_cache: " + n;}  }
class C{  public static int uniquePathsWithObstacles(int[][] obstacleGrid){  if (obstacleGrid == null)   return 0;  int m=obstacleGrid.length;  if (m == 0)   return 0;  int n=obstacleGrid[0].length;  int[][] paths=new int[m + 1][n + 1];  paths[m - 1][n]=1;  for (int r=m - 1; r >= 0; r--) {    for (int c=n - 1; c >= 0; c--) {      paths[r][c]=obstacleGrid[r][c] == 1 ? 0 : paths[r + 1][c] + paths[r][c + 1];    }  }  return paths[0][0];}  }
class C{  public FBStreamingBackupManager(GDSType gdsType){  super(gdsType);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore3.class,args);}  }
class C{  private static Pair<String,String> offsetLSL(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String index=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,immediateNodeValue,qw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public NotEmptyValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId);}  }
class C{  public String toExternalForm(){  if (type == Type.DEFAULT) {    return getTypeIdentifier(type);  }  return getTypeIdentifier(type) + ":" + value;}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder videoUrl(URL videoUrl){  this.video_url=videoUrl;  return this;}  }
class C{  public final Iterator<String> actionsIterator(){  return mActions != null ? mActions.iterator() : null;}  }
class C{  public static final Sort createLuceneSort(SearchQuery searchQuery){  Sort ret=null;  Collection<SortOrder> sorts=searchQuery.getSortOrder();  if (!sorts.isEmpty()) {    SortField[] array=new SortField[sorts.size()];    int i=0;    for (    SortOrder sortOrder : sorts) {      array[i]=new SortField(sortOrder.getField(),SortField.STRING,sortOrder.isDescending());    }    ret=new Sort(array);  }  return ret;}  }
class C{  public MulticastSocket() throws IOException {  setReuseAddress(true);}  }
class C{  public Vector4f div(Vector4fc v){  x/=v.x();  y/=v.y();  z/=v.z();  w/=v.w();  return this;}  }
class C{  private static synchronized void initJNDIContext() throws SyncFactoryException {  if ((ic != null) && (lazyJNDICtxRefresh == false)) {    try {      parseProperties(parseJNDIContext());      lazyJNDICtxRefresh=true;    } catch (    NamingException e) {      e.printStackTrace();      throw new SyncFactoryException("SPI: NamingException: " + e.getExplanation());    }catch (    Exception e) {      e.printStackTrace();      throw new SyncFactoryException("SPI: Exception: " + e.getMessage());    }  }}  }
class C{  protected boolean allocatePesForVm(String vmUid,List<Double> mipsShareRequested){  double totalRequestedMips=0;  double peMips=getPeCapacity();  for (  Double mips : mipsShareRequested) {    if (mips > peMips) {      return false;    }    totalRequestedMips+=mips;  }  if (getAvailableMips() < totalRequestedMips) {    return false;  }  getMipsMapRequested().put(vmUid,mipsShareRequested);  setPesInUse(getPesInUse() + mipsShareRequested.size());  if (getVmsMigratingIn().contains(vmUid)) {    totalRequestedMips*=0.1;  }  List<Double> mipsShareAllocated=new ArrayList<Double>();  for (  Double mipsRequested : mipsShareRequested) {    if (getVmsMigratingOut().contains(vmUid)) {      mipsRequested*=0.9;    } else     if (getVmsMigratingIn().contains(vmUid)) {      mipsRequested*=0.1;    }    mipsShareAllocated.add(mipsRequested);  }  getMipsMap().put(vmUid,mipsShareAllocated);  setAvailableMips(getAvailableMips() - totalRequestedMips);  return true;}  }
class C{  public PreferencesAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("PreferencesAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("PreferencesAction.statusbar"));  putValue(NAME,res.getString("PreferencesAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("PreferencesAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("PreferencesAction.image")))));}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  T register(ICalComponentScribe<? extends ICalComponent> scribe){  if (index == null) {    index=new ScribeIndex();  }  index.register(scribe);  return this_;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addChainDownloadStartedEventListener(ChainDownloadStartedEventListener listener){  addChainDownloadStartedEventListener(Threading.USER_THREAD,listener);}  }
class C{  private void computeSimplifiedLOFs(DBIDs ids,KNNQuery<O> knnq,WritableDoubleDataStore slrds,WritableDoubleDataStore lofs,DoubleMinMax lofminmax){  FiniteProgress progressLOFs=LOG.isVerbose() ? new FiniteProgress("Simplified LOF scores",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final double lof;    final double lrdp=slrds.doubleValue(iter);    final KNNList neighbors=knnq.getKNNForDBID(iter,k);    if (!Double.isInfinite(lrdp)) {      double sum=0.;      int count=0;      for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {        if (DBIDUtil.equal(neighbor,iter)) {          continue;        }        final double val=slrds.doubleValue(neighbor);        sum+=val;        count++;        if (Double.isInfinite(val)) {          break;        }      }      lof=sum / (lrdp * count);    } else {      lof=1.0;    }    lofs.putDouble(iter,lof);    lofminmax.put(lof);    LOG.incrementProcessed(progressLOFs);  }  LOG.ensureCompleted(progressLOFs);}  }
class C{  @Override public synchronized int read() throws IOException {  int n=read(oneByte,0,1);  if (n <= 0) {    return -1;  }  return oneByte[0] & 0xff;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addrList;  Node addrNode;  boolean state;  doc=(Document)load("staff",false);  addrList=doc.getElementsByTagName("address");  addrNode=addrList.item(0);  state=addrNode.hasAttributes();  assertTrue("throw_True",state);}  }
class C{  public LabelRenderer(String textField,String imageField){  setTextField(textField);  setImageField(imageField);}  }
class C{  public static String readFileAsString(String path) throws FileNotFoundException {  File file=new File(path);  StringBuilder fileContents=new StringBuilder((int)file.length());  Scanner scanner=new Scanner(file);  String lineSeparator=java.lang.System.getProperty("line.separator");  try {    while (scanner.hasNextLine()) {      fileContents.append(scanner.nextLine() + lineSeparator);    }    return fileContents.toString();  }  finally {    scanner.close();  }}  }
class C{  public void notifyLightCreationError(String conflict,int bitNum){  javax.swing.JOptionPane.showMessageDialog(null,"The output bit, " + bitNum + ", is currently assigned to "+ conflict+ ". Light cannot be created as "+ "you specified.","C/MRI Assignment Conflict",javax.swing.JOptionPane.INFORMATION_MESSAGE,null);}  }
class C{  String randomIdentifier(){  int len=random.getLog(8) + 2;  while (true) {    return random.randomString(len);  }}  }
class C{  @Override public void shutdown(boolean compact){  if (view != null) {    view.getRequestPanel().saveConfig(model.getOptionsParam().getConfig());    view.getResponsePanel().saveConfig(model.getOptionsParam().getConfig());  }  try {    model.getOptionsParam().getConfig().save();  } catch (  ConfigurationException e) {    log.error("Error saving config",e);  }  getProxy(null).stopServer();  super.shutdown(compact);}  }
class C{  public static void writeBufferedImage(BufferedImage image,String format,OutputStream outputStream,float quality,boolean encodeAlpha) throws IOException {  ImageEncoder imageEncoder=ImageEncoderFactory.newInstance(format,quality,encodeAlpha);  imageEncoder.encode(image,outputStream);}  }
class C{  private void appendAllInternalDependencies(StringBuilder builder){  for (  String artifactId : internalCompileScopeDependencies.keySet()) {    List<String> exclusions=new ArrayList<>();    exclusions.addAll(internalCompileScopeDependencies.get(artifactId));    SortedSet<ExternalDependency> extDeps=allExternalDependencies.get(artifactId);    if (null != extDeps) {      for (      ExternalDependency externalDependency : extDeps) {        if (!externalDependency.isTestDependency && !externalDependency.isOptional) {          exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);        }      }    }    String groupId="org.apache." + artifactId.substring(0,artifactId.indexOf('-'));    appendDependencyXml(builder,groupId,artifactId,"      ","${project.version}",false,false,null,exclusions);  }}  }
class C{  private void doLoad(HttpServletRequest request,SchedulingSubpartEditForm frm,SchedulingSubpart ss,String subpartId){  CourseOffering co=ss.getInstrOfferingConfig().getInstructionalOffering().getControllingCourseOffering();  InstrOfferingConfig ioc=ss.getInstrOfferingConfig();  InstructionalOffering io=ioc.getInstructionalOffering();  frm.setInstrOfferingId(io.getUniqueId().toString());  frm.setSchedulingSubpartId(subpartId);  if (frm.getInstructionalType() == null)   frm.setInstructionalType(ss.getItype().getItype().toString());  String label=ss.getItype().getAbbv();  if (io.hasMultipleConfigurations())   label+=" [" + ioc.getName() + "]";  frm.setInstructionalTypeLabel(label);  frm.setUnlimitedEnroll(ioc.isUnlimitedEnrollment());  frm.setItypeBasic(ss.getItype() == null || ss.getItype().getBasic() == 1);  if (!frm.getItypeBasic())   LookupTables.setupItypes(request,false);  frm.setSubjectArea(co.getSubjectAreaAbbv());  frm.setSubjectAreaId(co.getSubjectArea().getUniqueId().toString());  frm.setCourseNbr(co.getCourseNbr());  frm.setCourseTitle(co.getTitle());  if (ss.getParentSubpart() != null && ss.getItype().equals(ss.getParentSubpart().getItype())) {    frm.setSameItypeAsParent(new Boolean(true));  } else {    frm.setSameItypeAsParent(new Boolean(false));  }  if (frm.getCreditFormat() == null) {    if (ss.getCredit() != null) {      CourseCreditUnitConfig credit=ss.getCredit();      frm.setCreditText(credit.creditText());      frm.setCreditFormat(credit.getCreditFormat());      frm.setCreditType(credit.getCreditType().getUniqueId());      frm.setCreditUnitType(credit.getCreditUnitType().getUniqueId());      if (credit instanceof FixedCreditUnitConfig) {        frm.setUnits(((FixedCreditUnitConfig)credit).getFixedUnits());      } else       if (credit instanceof VariableFixedCreditUnitConfig) {        frm.setUnits(((VariableFixedCreditUnitConfig)credit).getMinUnits());        frm.setMaxUnits(((VariableFixedCreditUnitConfig)credit).getMaxUnits());        if (credit instanceof VariableRangeCreditUnitConfig) {          frm.setFractionalIncrementsAllowed(((VariableRangeCreditUnitConfig)credit).isFractionalIncrementsAllowed());        }      }    }  }  SchedulingSubpart next=ss.getNextSchedulingSubpart(sessionContext,Right.SchedulingSubpartEdit);  frm.setNextId(next == null ? null : next.getUniqueId().toString());  SchedulingSubpart previous=ss.getPreviousSchedulingSubpart(sessionContext,Right.SchedulingSubpartEdit);  frm.setPreviousId(previous == null ? null : previous.getUniqueId().toString());  String parentSubpart="";  SchedulingSubpart parentSS=ss.getParentSubpart();  frm.setParentSubpartId(parentSS == null ? null : parentSS.getUniqueId().toString());  frm.setParentSubpartLabel(parentSS == null ? null : parentSS.getSchedulingSubpartLabel());  while (parentSS != null) {    parentSubpart=parentSS.getItype().getAbbv() + " - " + parentSubpart;    parentSS=parentSS.getParentSubpart();  }  frm.setParentSubpart(parentSubpart);  frm.setManagingDeptName(ss.getManagingDept() == null ? null : ss.getManagingDept().getManagingDeptLabel());}  }
class C{  public void graphFPTree(StringBuffer text){  if (m_children != null) {    Collection<FPTreeNode> kids=m_children.values();    for (    FPTreeNode n : kids) {      text.append("N" + n.m_ID);      text.append(" [label=\"");      text.append(n.getItem().toString() + " (" + n.getProjectedCount(0)+ ")\\n");      text.append("\"]\n");      n.graphFPTree(text);      text.append("N" + m_ID + "->"+ "N"+ n.m_ID+ "\n");    }  }}  }
class C{  public List fromScrRegStateToBaseLibrosVO(List listado){  List result=new ArrayList();  BaseLibroVO libro=null;  for (Iterator it=listado.iterator(); it.hasNext(); ) {    ScrRegstate scrRegState=(ScrRegstate)it.next();switch (scrRegState.getIdocarchhdr().getType()) {case 1:      libro=new LibroEntradaVO();    break;case 2:  libro=new LibroSalidaVO();break;}libro.setId(scrRegState.getIdocarchhdr().getId().toString());libro.setName(scrRegState.getIdocarchhdr().getName());result.add(libro);}return result;}  }
class C{  @Override @Deprecated public boolean awaitTermination(long l,TimeUnit timeUnit) throws InterruptedException {  throw new UnsupportedOperationException();}  }
class C{  public static Node createNodeWithHost(final String host){  return createNodeWithHost(host,host);}  }
class C{  public void addNotify(){  super.addNotify();  firePropertyChange("ancestor",null,getParent());  registerWithKeyboardManager(false);  registerNextFocusableComponent();}  }
class C{  public void execute() throws Exception {  log.trace("sending cancel");  actorSystem.actorSelection("/user/" + OCSP_CLIENT_JOB).tell(OcspClientJob.CANCEL,ActorRef.noSender());  log.trace("sending execute");  actorSystem.actorSelection("/user/" + OCSP_CLIENT_JOB).tell(OcspClientWorker.EXECUTE,ActorRef.noSender());  log.trace("done");}  }
class C{  public void println(float x){  out.println(x);}  }
class C{  public GenericEntry updateOrganizationUnit(String customerId,String orgUnitPath,Map<OrgUnitProperty,String> attributes) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  for (  Map.Entry<OrgUnitProperty,String> mapEntry : attributes.entrySet()) {    String value=mapEntry.getValue();    if (value == null || value.length() == 0) {      continue;    }switch (mapEntry.getKey()) {case NAME:      entry.addProperty("name",value);    break;case PARENT_ORG_UNIT_PATH:  entry.addProperty("parentUnitPath",value);break;case DESCRIPTION:entry.addProperty("description",value);break;case BLOCK_INHERTANCE:entry.addProperty("blockInheritance",value);break;case USERS_TO_MOVE:entry.addProperty("usersToMove",value);break;default :break;}}return service.update(new URL("https://apps-apis.google.com/a/feeds/orgunit/2.0/" + customerId + "/"+ orgUnitPath),entry);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static double normF(double[][] elements){  double f=0;  for (int i=0; i < elements.length; i++) {    double[] row=elements[i];    for (int j=0; j < row.length; j++) {      f=MathUtil.fastHypot(f,row[j]);    }  }  return f;}  }
class C{  public FloatMatrix put(int[] indices,FloatMatrix x){  if (x.isScalar()) {    return put(indices,x.scalar());  }  for (int i=0; i < indices.length; i++) {    put(indices[i],x.get(i));  }  return this;}  }
class C{  public final boolean containsInAll(Vec4 point){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  for (  PickPointFrustum frustum : this) {    if (!frustum.contains(point)) {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.456 -0500",hash_original_method="966B65B53C96D6B72CF4916A6633605B",hash_generated_method="14941E50CB5A9E94D25F3080C1DB0C47") protected int firstStep(RouteInfo plan){  return (plan.getHopCount() > 1) ? CONNECT_PROXY : CONNECT_TARGET;}  }
class C{  public AssociationPosition_ createAssociationPosition_(){  AssociationPosition_Impl associationPosition_=new AssociationPosition_Impl();  return associationPosition_;}  }
class C{  public static int calcColumnWidth(JTable table,int col){  int result;  TableModel data;  int rowCount;  int row;  int dec;  Component c;  result=calcHeaderWidth(table,col);  if (result == -1)   return result;  data=table.getModel();  rowCount=data.getRowCount();  dec=(int)Math.ceil((double)rowCount / (double)MAX_ROWS);  try {    for (row=rowCount - 1; row >= 0; row-=dec) {      c=table.prepareRenderer(table.getCellRenderer(row,col),row,col);      result=Math.max(result,c.getPreferredSize().width + 10);    }  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  public void end(String namespace,String name) throws Exception {  ReferencedBeanBean top=null;  try {    top=(ReferencedBeanBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  FacesConfigBean fcb=(FacesConfigBean)digester.peek();  ReferencedBeanBean old=fcb.getReferencedBean(top.getReferencedBeanName());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ReferencedBeanRule]{" + digester.getMatch() + "} New("+ top.getReferencedBeanName()+ ")");    }    fcb.addReferencedBean(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ReferencedBeanRule]{" + digester.getMatch() + "} Merge("+ top.getReferencedBeanName()+ ")");    }    mergeReferencedBean(top,old);  }}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public void addMouseListener(MouseListener l){  m_textArea.addMouseListener(l);}  }
class C{  private static void launchCustomYouTubePlayer(YouTubeVideo youTubeVideo,Context context){  Intent i=new Intent(context,YouTubePlayerActivity.class);  i.putExtra(YouTubePlayerActivity.YOUTUBE_VIDEO_OBJ,youTubeVideo);  context.startActivity(i);}  }
class C{  private void registerPvt(ServiceContainer services){  services.addService(StreamScopeRegistry.class,rgy);  services.addCleaner(null);  registerRegistryBean(services);}  }
class C{  public boolean isEmpty(){  return getNumActiveItems() == 0;}  }
class C{  public static CodedException translateWithPrefix(String prefix,Throwable ex){  return translateException(ex).withPrefix(prefix);}  }
class C{  public static double lnFactorial(int x){  if (x < 0)   throw new IllegalArgumentException("Invalid input to factorial: " + x); else   if (x > 32)   return lnGamma(x + 1); else {    int l=factorialsBuffer.size();    for (int i=l; i <= x; i++) {      factorialsBuffer.add(log(i) + factorialsBuffer.get(i - 1));    }    return factorialsBuffer.get(x);  }}  }
class C{  public static void execute(ExecutablePool pool,String region,List keys,boolean isClosing,boolean keepAlive){  AbstractOp op=new UnregisterInterestListOpImpl(region,keys,isClosing,keepAlive);  pool.executeOnAllQueueServers(op);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthTokenGroup[");  buffer.append("m_id = ").append(m_id);  buffer.append("]");  return buffer.toString();}  }
class C{  public boolean applyOptions() throws IOException {  final int maxSearches=_maxSearchesField.getValue();  if (maxSearches > SearchSettings.MAXIMUM_PARALLEL_SEARCH) {    JOptionPane.showMessageDialog(null,I18n.tr("The maximum parallel searches you can make is " + SearchSettings.MAXIMUM_PARALLEL_SEARCH));    return false;  }  if (maxSearches != _maxSearchesString) {    try {      SearchSettings.PARALLEL_SEARCH.setValue(maxSearches);      _maxSearchesString=maxSearches;    } catch (    IllegalArgumentException iae) {      throw new IOException();    }  }  return false;}  }
class C{  public boolean isRejectBlacklisted(){  return fieldRejectBlacklisted;}  }
class C{  @Override public void writeToParcel(Parcel parcel,int flags){  parcel.writeByteArray(getPayload());  parcel.writeInt(getQos());  parcel.writeBooleanArray(new boolean[]{isRetained(),isDuplicate()});  parcel.writeString(messageId);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoFileRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_volId = ").append(m_volId);  buffer.append(", m_loc = ").append(m_loc);  buffer.append(", m_flags = ").append(m_flags);  buffer.append(", m_size = ").append(m_size);  buffer.append("]");  return buffer.toString();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.CHECK_REF__CHECK:    return basicSetCheck(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void main(String[] args){  try {    String rootDirPath=".";    if (args.length == 1) {      if (args[0].startsWith(GeneratorUtils.ROOT_DIR_PARAMETER)) {        rootDirPath=args[0].substring(GeneratorUtils.ROOT_DIR_PARAMETER.length());      } else {        System.err.print("Wrong usage. There is only one allowed argument : " + GeneratorUtils.ROOT_DIR_PARAMETER);        System.exit(1);      }    }    File rootFolder=new File(rootDirPath);    System.out.println(" ------------------------------------------------------------------------ ");    System.out.println(String.format("Searching for DTO"));    System.out.println(" ------------------------------------------------------------------------ ");    findDtoFactoryVisitors();    generateExtensionManager(rootFolder);  } catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(1);  }}  }
class C{  public boolean hasReason(){  return getReason() != null;}  }
class C{  protected boolean remove(Object child,boolean setChildBC){  if (child == null) {    throw new IllegalArgumentException(Messages.getString("beans.67"));  }  Object peer=null;synchronized (globalHierarchyLock) {    if (!contains(child)) {      return false;    }    if (serializing) {      throw new IllegalStateException(Messages.getString("beans.68"));    }    boolean valid=validatePendingRemove(child);    if (!valid) {      throw new IllegalStateException(Messages.getString("beans.6E"));    }    BeanContextChild beanContextChild=getChildBeanContextChild(child);    if (beanContextChild != null && setChildBC) {      beanContextChild.removePropertyChangeListener("beanContext",nonSerPCL);      try {        beanContextChild.setBeanContext(null);      } catch (      PropertyVetoException e) {        beanContextChild.addPropertyChangeListener("beanContext",nonSerPCL);        throw new IllegalStateException(Messages.getString("beans.6B"));      }    }    BCSChild childBCSC=null, peerBCSC=null;synchronized (children) {      childBCSC=(BCSChild)children.remove(child);      peer=childBCSC.proxyPeer;      if (peer != null) {        peerBCSC=(BCSChild)children.remove(peer);      }    }synchronized (child) {      removeSerializable(childBCSC);      childJustRemovedHook(child,childBCSC);    }    if (peer != null) {synchronized (peer) {        removeSerializable(peerBCSC);        childJustRemovedHook(peer,peerBCSC);      }    }  }  fireChildrenRemoved(new BeanContextMembershipEvent(getBeanContextPeer(),peer == null ? new Object[]{child} : new Object[]{child,peer}));  return true;}  }
class C{  public center addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static byte[] serializeTransactionId(long transactionId){  return Long.toString(transactionId).getBytes(UTF_8);}  }
class C{  public void notifyThrottleFound(DccThrottle t){  if (isAddressSet) {    log.debug("Throttle: " + getCurrentAddressString() + " is already set. (Found is: "+ t.getLocoAddress().toString()+ ")");    return;  }  if (t != null) {    throttle=t;    setFunctionThrottle(throttle);    throttle.addPropertyChangeListener(this);    isAddressSet=true;    if (log.isDebugEnabled()) {      log.debug("DccThrottle found for: " + throttle.getLocoAddress());    }  } else {    log.error("*throttle is null!*");    return;  }  for (int i=0; i < listeners.size(); i++) {    ThrottleControllerListener l=listeners.get(i);    l.notifyControllerAddressFound(this);    if (log.isDebugEnabled()) {      log.debug("Notify TCListener address found: " + l.getClass());    }  }  if (rosterLoco == null) {    rosterLoco=findRosterEntry(throttle);  }  syncThrottleFunctions(throttle,rosterLoco);  sendAddress();  sendFunctionLabels(rosterLoco);  sendAllFunctionStates(throttle);  sendCurrentSpeed(throttle);  sendCurrentDirection(throttle);  sendSpeedStepMode(throttle);}  }
class C{  public MovingAverageProcessor(String type,double alpha){  if (!VALID_TYPES.contains(type)) {    throw new IllegalArgumentException(type + " is not a valid message type.\n" + "Valid message types are \"FAST\", \"MEDIUM\", and \"SLOW\".");  }  if ((alpha < 0.0) || (alpha > 1.0)) {    throw new IllegalArgumentException("Alpha must be between zero and one.");  }  this.type=type;  this.alpha=alpha;}  }
class C{  protected static void create(MProduct product){  s_log.config(product.getName());  List<MCostElement> ces=MCostElement.getDefaultElements(product);  MAcctSchema[] mass=MAcctSchema.getClientAcctSchema(product.getCtx(),product.getAD_Client_ID(),product.get_TrxName());  MOrg[] orgs=null;  int M_ASI_ID=0;  for (  MAcctSchema as : mass) {    String cl=product.getCostingLevel(as);    if (MAcctSchema.COSTINGLEVEL_Client.equals(cl)) {      for (      MCostType ct : MCostType.get(product.getCtx(),product.get_TrxName())) {        for (        MCostElement ce : ces) {          MCost cost=MCost.getOrCreate(product,M_ASI_ID,as,0,0,ct.getM_CostType_ID(),ce.getM_CostElement_ID());          if (cost.is_new()) {            if (cost.save())             s_log.config("Std.Cost for " + product.getName() + " - "+ as.getName()); else             s_log.warning("Not created: Std.Cost for " + product.getName() + " - "+ as.getName());          }        }      }    } else     if (MAcctSchema.COSTINGLEVEL_Organization.equals(cl)) {      if (orgs == null)       orgs=MOrg.getOfClient(product);      for (      MOrg o : orgs) {        for (        MCostType ct : MCostType.get(product.getCtx(),product.get_TrxName())) {          for (          MCostElement ce : ces) {            MCost cost=MCost.getOrCreate(product,M_ASI_ID,as,o.getAD_Org_ID(),0,ct.getM_CostType_ID(),ce.getM_CostElement_ID());            if (cost.is_new()) {              if (cost.save())               s_log.config("Std.Cost for " + product.getName() + " - "+ o.getName()+ " - "+ as.getName()); else               s_log.warning("Not created: Std.Cost for " + product.getName() + " - "+ o.getName()+ " - "+ as.getName());            }          }        }      }    } else {      s_log.warning("Not created: Std.Cost for " + product.getName() + " - Costing Level on Batch/Lot");    }  }}  }
class C{  public void sendRequest() throws RequestException, RouteException, IOException {  if (cacheStrategy != null)   return;  if (httpStream != null)   throw new IllegalStateException();  Request request=networkRequest(userRequest);  InternalCache responseCache=Internal.instance.internalCache(client);  Response cacheCandidate=responseCache != null ? responseCache.get(request) : null;  long now=System.currentTimeMillis();  cacheStrategy=new CacheStrategy.Factory(now,request,cacheCandidate).get();  networkRequest=cacheStrategy.networkRequest;  cacheResponse=cacheStrategy.cacheResponse;  if (responseCache != null) {    responseCache.trackResponse(cacheStrategy);  }  if (cacheCandidate != null && cacheResponse == null) {    closeQuietly(cacheCandidate.body());  }  if (networkRequest != null) {    httpStream=connect();    httpStream.setHttpEngine(this);    if (callerWritesRequestBody && permitsRequestBody(networkRequest) && requestBodyOut == null) {      long contentLength=OkHeaders.contentLength(request);      if (bufferRequestBody) {        if (contentLength > Integer.MAX_VALUE) {          throw new IllegalStateException("Use setFixedLengthStreamingMode() or " + "setChunkedStreamingMode() for requests larger than 2 GiB.");        }        if (contentLength != -1) {          httpStream.writeRequestHeaders(networkRequest);          requestBodyOut=new RetryableSink((int)contentLength);        } else {          requestBodyOut=new RetryableSink();        }      } else {        httpStream.writeRequestHeaders(networkRequest);        requestBodyOut=httpStream.createRequestBody(networkRequest,contentLength);      }    }  } else {    streamAllocation.release();    if (cacheResponse != null) {      this.userResponse=cacheResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).cacheResponse(stripBody(cacheResponse)).build();    } else {      this.userResponse=new Response.Builder().request(userRequest).priorResponse(stripBody(priorResponse)).protocol(Protocol.HTTP_1_1).code(504).message("Unsatisfiable Request (only-if-cached)").body(EMPTY_BODY).build();    }    userResponse=unzip(userResponse);  }}  }
class C{  @Override protected void loadCoreListeners(){  final PlansScoring plansScoring=buildPlansScoring();  this.addControlerListener(plansScoring);  final StrategyManager strategyManager=buildStrategyManager();  throw new RuntimeException("This doesn't work anymore. Come to MZ, who will gladly help you repair it.");}  }
class C{  public void deliveryComplete(MqttDeliveryToken token){  syncOut(getDate() + Messages.MqttClientView_56);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.REGION__VERTICES:    return vertices != null && !vertices.isEmpty();case SGraphPackage.REGION__COMPOSITE:  return basicGetComposite() != null;}return super.eIsSet(featureID);}  }
class C{  public SingleColumnRowMapper(){}  }
class C{  public void makeLive(){  view_group.compile();  world_object_group.compile();  locale.addBranchGraph(view_group);  locale.addBranchGraph(world_object_group);}  }
class C{  public void readRssi(ActionCallback callback){  checkConnection();  MiBand.io.readRssi(callback);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.638 -0500",hash_original_method="1A6840ADE4B5EE3A7D8D47E6638687F6",hash_generated_method="60B67C93F701D6B0EF25391D410DC2A2") public MessageFactoryImpl(){}  }
class C{  public CatchStructs(DalvCode code){  this.code=code;  this.table=null;  this.encodedHandlers=null;  this.encodedHandlerHeaderSize=0;  this.handlerOffsets=null;}  }
class C{  synchronized public void add(final long commitRecordAddr,final ICommitRecord commitRecord){  if (commitRecord == null)   throw new IllegalArgumentException();  if (commitRecordAddr == 0L)   throw new IllegalArgumentException();  final long commitTime=commitRecord.getTimestamp();  final byte[] key=getKey(commitTime);  if (!super.contains(key)) {    super.insert(key,ser.serializeEntry(new Entry(commitTime,commitRecordAddr)));    assert cache.get(commitTime) == null;    cache.put(commitTime,commitRecord,false);  } else {    log.warn("Historical commit record exists: timestamp=" + commitTime);  }}  }
class C{  protected int computeIndentation(){  int iconWidth=this.getActiveAttributes().getIconSize().width;  int iconSpacing=this.getActiveAttributes().getIconSpace();  int checkboxWidth=this.getSelectedSymbolSize().width;  return checkboxWidth + iconSpacing + ((iconWidth - checkboxWidth) / 2);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  createLocalPat();  java.util.Date formatMe=null;  String formString;  Object secondArg=null;  Object firstArg=null;  secondArg=stack.pop();  firstArg=stack.pop();  if (secondArg instanceof java.util.Date)   formatMe=(java.util.Date)secondArg; else   if (secondArg instanceof Number)   formatMe=new java.util.Date(((Number)secondArg).longValue()); else   throw new sage.jep.ParseException("DateFormat didn't have a Date or Number for its time argument");  if (firstArg == null)   return (Sage.dfClean(formatMe.getTime())); else {    String orgFormString=firstArg.toString();    java.text.DateFormat formatter=(java.text.DateFormat)cachedMap.get(orgFormString);    if (formatter != null) {synchronized (formatter) {        return formatter.format(formatMe);      }    }    formString=orgFormString;    if (mslashdPat != null)     formString=mslashdPat.matcher(formString).replaceAll(localmdPat);    formatter=new java.text.SimpleDateFormat(formString,Sage.userLocale);    Object rv=formatter.format(formatMe);    cachedMap.put(orgFormString,formatter);    return (rv);  }}  }
class C{  public boolean translateFiles(final File sourceDir,final File destDir,final File baseDir,final Map<String,Map<String,String>> translationLists,final String extensions){  destDir.mkdirs();  final List<String> exts=ListManager.string2vector(extensions);  final File[] sourceFiles=sourceDir.listFiles(new ExtensionsFileFilter(exts));  String relativePath;  for (  final File sourceFile : sourceFiles) {    try {      relativePath=sourceFile.getAbsolutePath().substring(baseDir.getAbsolutePath().length() + 1);      relativePath=relativePath.replace(File.separatorChar,'/');    } catch (    final IndexOutOfBoundsException e) {      ConcurrentLog.severe("TRANSLATOR","Error creating relative Path for " + sourceFile.getAbsolutePath());      relativePath="wrong path";    }    if (translationLists.containsKey(relativePath)) {      ConcurrentLog.info("TRANSLATOR","Translating file: " + relativePath);      if (!translateFile(sourceFile,new File(destDir,sourceFile.getName().replace('/',File.separatorChar)),translationLists.get(relativePath))) {        ConcurrentLog.severe("TRANSLATOR","File error while translating file " + relativePath);      }    }  }  return true;}  }
class C{  public void requestEndLeg(){  endLeg=true;}  }
class C{  @Override public String toString(){  return "[" + ((name == null) ? "" : name) + "] "+ type+ " "+ pred;}  }
class C{  public static String utf2string(byte[] src){  return utf2string(src,0,src.length);}  }
class C{  public PortTcp clusterPort(){  return _clusterActor.getClusterPort();}  }
class C{  public void auditaCerrarPrevision(Locale locale,PrevisionVO prevision){  logData.addDetalle(locale,ArchivoDetails.TRANSFERENCIAS_TIPO_TRANSFERENCIA,TipoTransferencia.getTipoTransferencia(prevision.getTipotransferencia()).getNombre());}  }
class C{  public ProfileBase(String name){  mName=name;}  }
class C{  public void ensureCanonical(){  if (s.compareTo(HALF_CURVE_ORDER) > 0) {    s=CURVE.getN().subtract(s);  }}  }
class C{  private <A2,B2>boolean addStep(Class<A2> from,Class<B2> to,Transform<A2,B2> step){  requireNonNull(from);  requireNonNull(to);  requireNonNull(step);  if (end == null || from.equals(end)) {    if (steps.contains(step)) {      return false;    } else {      steps.add(step);      end=to;      return true;    }  } else {    throw new IllegalArgumentException("Transform " + step + " has a different entry class ("+ from+ ") than the last class in the current build ("+ end+ ").");  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.TRACE_REACTION_WILL_FIRE__REACTION:    setReaction((Reaction)null);  return;}super.eUnset(featureID);}  }
class C{  public MutableShort(final short value){  super();  this.value=value;}  }
class C{  public int findCoordTransformCode(String name){  name=name.toLowerCase();  name=name.replace(" ","");  for (int i=0; i < coordTransformName.length; ++i) {    if (name.equals(coordTransformName[i].toLowerCase())) {      return (i);    }  }  return (0);}  }
class C{  public static double tanh(double x){  return (MathLib.exp(2 * x) - 1) / (MathLib.exp(2 * x) + 1);}  }
class C{  public OracleBatchException(Throwable cause){  super(cause);}  }
class C{  public boolean local(){  return loc;}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  LOG.d(LOG_TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  quotaUpdater.updateQuota(MAX_QUOTA);}  }
class C{  public void addDataChangedListener(DataChangedListener l){  listeners.addListener(l);}  }
class C{  public Context(int dimension,Interval interval,Context parent){  dimensions.add(dimension);  intervals.add(interval);  parents.add(parent);  for (  ContextualDatum d : parent.sample) {    if (containDatum(d)) {      sample.add(d);    }  }  oneDimensionalAncestors.add(this);  this.globalSample=parent.globalSample;  this.densityPruning=parent.densityPruning;  this.dependencyPruning=parent.dependencyPruning;  this.alpha=parent.alpha;}  }
class C{  public boolean hasMethodsMismatch(){  return !this.partialMatches.stream().filter(null).findAny().isPresent();}  }
class C{  public static void main(String[] args){  try {    DefaultListModel lm=new DefaultListModel();    lm.addElement("one");    lm.addElement("two");    lm.addElement("three");    lm.addElement("four");    lm.addElement("five");    JList jl=new JList(lm);    final ListSelectorDialog jd=new ListSelectorDialog(null,jl);    int result=jd.showDialog();    if (result == ListSelectorDialog.APPROVE_OPTION) {      System.err.println("Fields Selected");      int[] selected=jl.getSelectedIndices();      for (int i=0; i < selected.length; i++) {        System.err.println("" + selected[i] + " "+ lm.elementAt(selected[i]));      }    } else {      System.err.println("Cancelled");    }    System.exit(0);  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public boolean loadTableDetails(JTable table){  return ((OperationsPanel)this.getContentPane()).loadTableDetails(table);}  }
class C{  private void checkServer(String serverName){  lock.readLock().lock();  try {    boolean isHealthy=false;    ServerTracker serverTracker=serverTrackerMap.get(serverName);    try {      isHealthy=serverTracker.heartbeat();    } catch (    Exception e) {    }    serverTracker.reportHeartbeatResult(isHealthy);  }  finally {    lock.readLock().unlock();  }}  }
class C{  protected boolean shouldAutoCloseResponse(){  return true;}  }
class C{  public OutputStream createInOutputStream(OutputStream os,String linkId){  return new InstrumentedOutputStream(collector(),Direction.In,os,linkId);}  }
class C{  private void updateAction(){  int numNeurons=networkPanel.getSelectedNeurons().size();  if (numNeurons > 0) {    String text=new String(("Edit " + numNeurons + ((numNeurons > 1) ? " Selected Neurons" : " Selected Neuron")));    putValue(NAME,text);    setEnabled(true);  } else {    putValue(NAME,"Edit Selected Neuron(s)");    setEnabled(false);  }}  }
class C{  public void updateFailed(UpdateManagerEvent e){}  }
class C{  public void testOpen() throws Exception {  File f=initFile("testOpen");  assertFalse("File does not exist",f.exists());  BufferedFileDataOutput bfdo=new BufferedFileDataOutput(f);  bfdo.close();  assertTrue("File does exist",f.exists());  BufferedFileDataOutput bfdo2=new BufferedFileDataOutput(f);  bfdo2.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.993 -0500",hash_original_method="A37C6D388BF979AC5AEB871BAB2E0B6F",hash_generated_method="9C9E35E47D28A00E8E739A9137FC59BD") public Builder permitDiskWrites(){  return disable(DETECT_DISK_WRITE);}  }
class C{  private DoubleMatrix2D xpowSlow(DoubleMatrix2D A,int k){  DoubleMatrix2D result=A.copy();  for (int i=0; i < k - 1; i++) {    result=mult(result,A);  }  return result;}  }
class C{  public Config(Reader algReader) throws IOException {  ArrayList<String> lines=new ArrayList<>();  BufferedReader r=new BufferedReader(algReader);  int lastConfigLine=0;  for (String line=r.readLine(); line != null; line=r.readLine()) {    lines.add(line);    if (line.indexOf('=') > 0) {      lastConfigLine=lines.size();    }  }  r.close();  StringBuilder sb=new StringBuilder();  for (int i=0; i < lastConfigLine; i++) {    sb.append(lines.get(i));    sb.append(NEW_LINE);  }  this.props=new Properties();  props.load(new StringReader(sb.toString()));  if (props.get("work.dir") == null) {    props.setProperty("work.dir",System.getProperty("benchmark.work.dir","work"));  }  if (Boolean.valueOf(props.getProperty("print.props",DEFAULT_PRINT_PROPS)).booleanValue()) {    printProps();  }  sb=new StringBuilder();  for (int i=lastConfigLine; i < lines.size(); i++) {    sb.append(lines.get(i));    sb.append(NEW_LINE);  }  algorithmText=sb.toString();}  }
class C{  public static boolean isCardMatch(String cardType,String cardNumberPassed){  if (isEmpty(cardType))   return defaultEmptyOK;  if (isEmpty(cardNumberPassed))   return defaultEmptyOK;  String cardNumber=stripCharsInBag(cardNumberPassed,creditCardDelimiters);  if (("CCT_VISA".equalsIgnoreCase(cardType)) && (isVisa(cardNumber)))   return true;  if (("CCT_MASTERCARD".equalsIgnoreCase(cardType)) && (isMasterCard(cardNumber)))   return true;  if ((("CCT_AMERICANEXPRESS".equalsIgnoreCase(cardType)) || ("CCT_AMEX".equalsIgnoreCase(cardType))) && (isAmericanExpress(cardNumber)))   return true;  if (("CCT_DISCOVER".equalsIgnoreCase(cardType)) && (isDiscover(cardNumber)))   return true;  if (("CCT_JCB".equalsIgnoreCase(cardType)) && (isJCB(cardNumber)))   return true;  if ((("CCT_DINERSCLUB".equalsIgnoreCase(cardType)) || ("CCT_DINERS".equalsIgnoreCase(cardType))) && (isDinersClub(cardNumber)))   return true;  if (("CCT_CARTEBLANCHE".equalsIgnoreCase(cardType)) && (isCarteBlanche(cardNumber)))   return true;  if (("CCT_ENROUTE".equalsIgnoreCase(cardType)) && (isEnRoute(cardNumber)))   return true;  if (("CCT_SOLO".equalsIgnoreCase(cardType)) && (isSolo(cardNumber)))   return true;  if (("CCT_SWITCH".equalsIgnoreCase(cardType)) && (isswitch(cardNumber)))   return true;  if (("CCT_VISAELECTRON".equalsIgnoreCase(cardType)) && (isVisaElectron(cardNumber)))   return true;  return false;}  }
class C{  public boolean hasRetriesSinceFetch(){  return fieldSetFlags()[5];}  }
class C{  public DateTime toDateTimeAtStartOfDay(DateTimeZone zone){  zone=DateTimeUtils.getZone(zone);  Chronology chrono=getChronology().withZone(zone);  long localMillis=getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;  long instant=zone.convertLocalToUTC(localMillis,false);  instant=chrono.dayOfMonth().roundFloor(instant);  return new DateTime(instant,chrono);}  }
class C{  public static Factory<SSLContext> sslFactory(){  SslContextFactory factory=new SslContextFactory();  factory.setKeyStoreFilePath(U.resolveIgnitePath(GridTestProperties.getProperty("ssl.keystore.path")).getAbsolutePath());  factory.setKeyStorePassword(GridTestProperties.getProperty("ssl.keystore.password").toCharArray());  factory.setTrustManagers(SslContextFactory.getDisabledTrustManager());  return factory;}  }
class C{  public synchronized void damageReport(Rectangle2D region){  if (m_damageRedraw) {    m_clip.union(region);  }}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  public boolean contains(String ID){  return objects.containsKey(ID);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  String documentFragmentName;  doc=(Document)load("staff",true);  docFragment=doc.createDocumentFragment();  documentFragmentName=docFragment.getNodeName();  assertEquals("nodeDocumentFragmentNodeNameAssert1","#document-fragment",documentFragmentName);}  }
class C{  public static long Extend(long fp,InputStream is) throws IOException {  final long[] mod=ByteModTable_7;  final int mask=0xFF;  int i;  while ((i=is.read()) != -1) {    fp=((fp >>> 8) ^ (mod[(i ^ ((int)fp)) & mask]));  }  return fp;}  }
class C{  public boolean isOnRoaming(){  NetworkInfo networkInfo=getConfiguration().getConnectivityManager().getActiveNetworkInfo();  return networkInfo != null && networkInfo.isRoaming();}  }
class C{  public MultipartEntity(HttpMultipartMode mode,String boundary,Charset charset){  super();  if (boundary == null) {    boundary=generateBoundary();  }  this.boundary=boundary;  if (mode == null) {    mode=HttpMultipartMode.STRICT;  }  this.charset=charset != null ? charset : MIME.DEFAULT_CHARSET;  this.multipart=new HttpMultipart(multipartSubtype,this.charset,this.boundary,mode);  this.contentType=new BasicHeader(HTTP.CONTENT_TYPE,generateContentType(this.boundary,this.charset));  this.dirty=true;}  }
class C{  @Override public boolean conditionOk(Example example){  for (  Attribute attribute : example.getAttributes()) {    if (Double.isNaN(example.getValue(attribute))) {      return false;    }  }  return true;}  }
class C{  public TabStop(float pos,int align,int leader){  alignment=align;  this.leader=leader;  position=pos;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.441 -0500",hash_original_method="0E1BC60F26C591E101972A03334B6F1C",hash_generated_method="082789CDF70A79F8395EB80149C48B2C") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public synchronized void close() throws IOException {  if (FromNetASCIIInputStream._noConversionRequired) {    super.close();    return;  }  if (__lastWasCR)   out.write('\r');  super.close();}  }
class C{  public void computeReachableMethodContextMap(){  if (reachableMethodContextMap == null) {    reachableMethodContextMap=new HashMap<SootMethod,Set<Context>>();    AbsReachableMethods rc=Results.v().reachableMethods();    Rctxt_method ctxtMethods=rc.contextMethods();    Iterator iter=ctxtMethods.iterator();    while (iter.hasNext()) {      Rctxt_method.Tuple t=(Rctxt_method.Tuple)iter.next();      Context ctxt=t.ctxt();      SootMethod method=t.method();      Set<Context> ctxts=reachableMethodContextMap.get(method);      if (ctxts == null) {        ctxts=new HashSet();        reachableMethodContextMap.put(method,ctxts);      }      ctxts.add(ctxt);    }  }}  }
class C{  @Override @Deprecated public boolean shouldEstimatePerformance(){  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Text newTextNode;  String newTextName;  String newTextValue;  int newTextType;  doc=(Document)load("staff",true);  newTextNode=doc.createTextNode("This is a new Text node");  newTextValue=newTextNode.getNodeValue();  assertEquals("value","This is a new Text node",newTextValue);  newTextName=newTextNode.getNodeName();  assertEquals("name","#text",newTextName);  newTextType=(int)newTextNode.getNodeType();  assertEquals("type",3,newTextType);}  }
class C{  public Matrix4x3f rotationZ(float ang){  float sin, cos;  if (ang == (float)Math.PI || ang == -(float)Math.PI) {    cos=-1.0f;    sin=0.0f;  } else   if (ang == (float)Math.PI * 0.5f || ang == -(float)Math.PI * 1.5f) {    cos=0.0f;    sin=1.0f;  } else   if (ang == (float)-Math.PI * 0.5f || ang == (float)Math.PI * 1.5f) {    cos=0.0f;    sin=-1.0f;  } else {    cos=(float)Math.cos(ang);    sin=(float)Math.sin(ang);  }  m00=cos;  m01=sin;  m02=0.0f;  m10=-sin;  m11=cos;  m12=0.0f;  m20=0.0f;  m21=0.0f;  m22=1.0f;  m30=0.0f;  m31=0.0f;  m32=0.0f;  properties=0;  return this;}  }
class C{  public double weightedMatthewsCorrelation(){  return m_delegate.weightedMatthewsCorrelation();}  }
class C{  private void cleanUpExeDir(File exeDir,String exePath){  try {    exePath=new File(exePath).getCanonicalPath();    File[] files=exeDir.listFiles();    if (files == null)     return;    for (    File f : files) {      if (!f.getCanonicalPath().equals(exePath))       f.delete();    }    new File(context.getFilesDir(),"engine.exe").delete();  } catch (  IOException e) {  }}  }
class C{  public void debugFiner(CharSequence message){  log(Level.FINER,message);}  }
class C{  public void andNot(ShiftingBitSet set){  for (int i=Math.min(wordsInUse,set.wordsInUse) - 1; i >= 0; i--)   words[i]&=~set.words[i];  recalculateWordsInUse();  checkInvariants();}  }
class C{  public Transformer newTransformer(){  return new TransformerImpl(this);}  }
class C{  public HeaderViewRecyclerAdapter(RecyclerView.Adapter adapter){  mHeaderViews=new ArrayList<View>();  mFooterViews=new ArrayList<View>();  mItemTypesOffset=new HashMap<Class,Integer>();  setWrappedAdapter(adapter);  setHasStableIds(adapter.hasStableIds());}  }
class C{  private void updateAltDeviceid(NetworkFCZoneInfo fabricInfo,String fabricId,String fabricWWN,String key,Map<String,NetworkLite> fabricId2Network){  if (fabricInfo != null && fabricInfo.getAltNetworkDeviceId() == null) {    if (fabricId2Network.get(key) == null) {      NetworkLite network=NetworkUtil.getNetworkLiteByFabricId(fabricId,fabricWWN,_dbClient);      if (network != null) {        fabricId2Network.put(key,network);        URI id=fabricInfo.getNetworkDeviceId();        for (        String strUri : network.getNetworkSystems()) {          if (!strUri.equals(id.toString())) {            id=URI.create(strUri);            break;          }        }        fabricInfo.setAltNetworkDeviceId(id);      }    }  }}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  @Override public void resolve(){  if (!method.isResolved()) {    Trace.trace(Item.COMPILER,"Resolving call to method %s%n",method.getName());    method=method.resolve();  }}  }
class C{  public DatabaseUtils() throws Exception {  this((Properties)null);}  }
class C{  private void printFragmentStack(){  List<String> names=new ArrayList<>();  names.add("root");  for (int idx=0; idx < getSupportFragmentManager().getBackStackEntryCount(); idx++) {    FragmentManager.BackStackEntry entry=getSupportFragmentManager().getBackStackEntryAt(idx);    names.add(String.valueOf(entry.getName()));  }  logger.info("stack: {}",Joiner.on(" -> ").join(names));}  }
class C{  public static void generateRPClass(){  try {    final RPClass rpclass=new RPClass(RPCLASS_NAME);    rpclass.add(DefinitionClass.ATTRIBUTE,PATH,Type.STRING,Definition.PRIVATE);    rpclass.add(DefinitionClass.ATTRIBUTE,CAPTION,Type.STRING,Definition.PRIVATE);    rpclass.add(DefinitionClass.ATTRIBUTE,TITLE,Type.STRING,Definition.PRIVATE);  } catch (  final SyntaxException e) {    logger.error("cannot generateRPClass",e);  }}  }
class C{  public long itrealvalue(){  return Long.parseLong(fields[20]);}  }
class C{  public MaryTTS(DialogueSystem system){  try {    tts=new LocalMaryInterface();  } catch (  MaryConfigurationException e) {    e.printStackTrace();    throw new RuntimeException("Cannot start Mary TTS: " + e);  }  this.system=system;  system.enableSpeech(true);}  }
class C{  public static boolean hasFilter(WebXml webXml,String theFilterName){  return webXml.getTagByIdentifier(WebXmlType.FILTER,theFilterName) != null;}  }
class C{  public boolean hasPermission(U user,String permission){  return false;}  }
class C{  private void parseArguments(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    printUsage();    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  String arg=argIter.next();  if (arg.equals("-h") || arg.equals("--help")) {    printUsage();    System.exit(0);  }  if (args.length == 3) {    this.networkfile=arg;    this.plansfileIN=argIter.next();    this.plansfileOUT=argIter.next();  } else {    System.out.println("Wrong number of arguments.");    printUsage();    System.exit(1);  }}  }
class C{  public DateTimeComponents(int year,int month,int date){  this(year,month,date,0,0,0,false,false);}  }
class C{  public double surfaceDistance(final GeoPoint pt1,final GeoPoint pt2){  final double L=pt2.getLongitude() - pt1.getLongitude();  final double U1=Math.atan((1.0 - flattening) * Math.tan(pt1.getLatitude()));  final double U2=Math.atan((1.0 - flattening) * Math.tan(pt2.getLatitude()));  final double sinU1=Math.sin(U1);  final double cosU1=Math.cos(U1);  final double sinU2=Math.sin(U2);  final double cosU2=Math.cos(U2);  final double dCosU1CosU2=cosU1 * cosU2;  final double dCosU1SinU2=cosU1 * sinU2;  final double dSinU1SinU2=sinU1 * sinU2;  final double dSinU1CosU2=sinU1 * cosU2;  double lambda=L;  double lambdaP=Math.PI * 2.0;  int iterLimit=0;  double cosSqAlpha;  double sinSigma;  double cos2SigmaM;  double cosSigma;  double sigma;  double sinAlpha;  double C;  double sinLambda, cosLambda;  do {    sinLambda=Math.sin(lambda);    cosLambda=Math.cos(lambda);    sinSigma=Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda) + (dCosU1SinU2 - dSinU1CosU2 * cosLambda) * (dCosU1SinU2 - dSinU1CosU2 * cosLambda));    if (sinSigma == 0.0) {      return 0.0;    }    cosSigma=dSinU1SinU2 + dCosU1CosU2 * cosLambda;    sigma=Math.atan2(sinSigma,cosSigma);    sinAlpha=dCosU1CosU2 * sinLambda / sinSigma;    cosSqAlpha=1.0 - sinAlpha * sinAlpha;    cos2SigmaM=cosSigma - 2.0 * dSinU1SinU2 / cosSqAlpha;    if (Double.isNaN(cos2SigmaM))     cos2SigmaM=0.0;    C=flattening / 16.0 * cosSqAlpha * (4.0 + flattening * (4.0 - 3.0 * cosSqAlpha));    lambdaP=lambda;    lambda=L + (1.0 - C) * flattening * sinAlpha* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM)));  } while (Math.abs(lambda - lambdaP) > Vector.MINIMUM_RESOLUTION && ++iterLimit < 40);  final double uSq=cosSqAlpha * this.squareRatio;  final double A=1.0 + uSq / 16384.0 * (4096.0 + uSq * (-768.0 + uSq * (320.0 - 175.0 * uSq)));  final double B=uSq / 1024.0 * (256.0 + uSq * (-128.0 + uSq * (74.0 - 47.0 * uSq)));  final double deltaSigma=B * sinSigma * (cos2SigmaM + B / 4.0 * (cosSigma * (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM) - B / 6.0 * cos2SigmaM * (-3.0 + 4.0 * sinSigma * sinSigma) * (-3.0 + 4.0 * cos2SigmaM * cos2SigmaM)));  return c * A * (sigma - deltaSigma);}  }
class C{  @Override public StateConnection onCloseRead(){  ConnectionProtocol request=request();  if (request != null) {    request.onCloseRead();  }  _sequenceClose.set(_sequenceRead.get());  if (_sequenceFlush.get() < _sequenceClose.get()) {    _isClosePending.set(true);    if (_sequenceFlush.get() < _sequenceClose.get()) {      return StateConnection.CLOSE_READ_S;    } else {      _isClosePending.set(false);      return StateConnection.CLOSE;    }  } else {    return StateConnection.CLOSE;  }}  }
class C{  public ObjectFactory(){}  }
class C{  public Row(DataSource source,int row){  super(source,row);}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public DefinitionList(List<ContentElement> content){  this.ccl=new ArrayList<Content>(content);  this.definitions=new ArrayList<ContentElement>();  if (content.size() > 0) {    this.definedTerm=content.get(0);    if (content.size() > 1) {      this.definitions.addAll(content);      this.definitions.remove(0);    }  } else   this.definedTerm=null;}  }
class C{  public boolean isDeclared(Class type){  return registry.containsKey(type);}  }
class C{  public static String encodeBody(final char[] buf){  return encode(buf,"+");}  }
class C{  public DataChangeFilter clone(){  DataChangeFilter result=new DataChangeFilter();  result.Trigger=Trigger;  result.DeadbandType=DeadbandType;  result.DeadbandValue=DeadbandValue;  return result;}  }
class C{  public Dimensions divide(Dimensions d){  Dimensions result=new Dimensions();  for (int i=0; i < d.size(); i++) {    result.add(new Integer(get(i).intValue() - d.get(i).intValue()));  }  return result;}  }
class C{  private void notifyIfCountryChanged(final Country country,final Country detectedCountry){  if (detectedCountry != null && mListener != null && (country == null || !country.equals(detectedCountry))) {    if (DEBUG) {      Slog.d(TAG,"" + country + " --> "+ detectedCountry);    }    notifyListener(detectedCountry);  }}  }
class C{  public void ensureCapacity(int additionalCapacity){  int sizeNeeded=size + additionalCapacity;  if (sizeNeeded >= threshold)   resize(nextPowerOfTwo((int)(sizeNeeded / loadFactor)));}  }
class C{  @Override public boolean lookAtAndFov(float pitch,float yaw,float fov,boolean animated){  return this.lookAtAndFov(null,pitch,yaw,fov,animated);}  }
class C{  public EntityContext newEntityContext(){  EntityContext entityContext=new EntityContext(env,namespace);  return entityContext;}  }
class C{  public Spider startRequest(List<Request> startRequests){  checkIfRunning();  this.startRequests=startRequests;  return this;}  }
class C{  private void jbInit() throws Exception {  setTitle("Adempiere - " + s_res.getString("Adempiere_License"));  southLabel.setText(s_res.getString("Do_you_accept"));  bReject.setText(s_res.getString("No"));  bAccept.setText(s_res.getString("Yes_I_Understand"));  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  setModal(true);  mainPanel.setLayout(mainLayout);  bReject.setForeground(Color.red);  bReject.addActionListener(this);  bAccept.addActionListener(this);  southPanel.setLayout(southLayout);  southLayout.setAlignment(FlowLayout.RIGHT);  licensePane.setEditable(false);  licensePane.setContentType("text/html");  scrollPane.setPreferredSize(new Dimension(700,400));  southPanel.add(southLabel,null);  getContentPane().add(mainPanel);  mainPanel.add(scrollPane,BorderLayout.CENTER);  scrollPane.getViewport().add(licensePane,null);  mainPanel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(bReject,null);  southPanel.add(bAccept,null);}  }
class C{  protected String paramString(){  String desktopManagerString=(desktopManager != null ? desktopManager.toString() : "");  return super.paramString() + ",desktopManager=" + desktopManagerString;}  }
class C{  @Override public void historyChanged(HistoryChangedEvent evt){  loadHistory(false);  m_History.setProperty(evt.getHistoryName(),modelToString(evt.getHistory()));  saveHistory();}  }
class C{  public synchronized void auxConnectionOpened(IOFConnectionBackend connection){  if (log.isDebugEnabled())   log.debug("[{}] - Switch Handshake - new aux connection {}",this.getDpid(),connection.getAuxId());  if (this.getState().equals("ACTIVE") || this.getState().equals("STANDBY")) {    auxConnections.put(connection.getAuxId(),connection);    connection.setListener(OFSwitchHandshakeHandler.this);    log.info("Auxiliary connection {} added for {}.",connection.getAuxId().getValue(),connection.getDatapathId().toString());  } else {    log.info("Auxiliary connection {} initiated for {} before main connection handshake complete. Ignorning aux connection attempt.",connection.getAuxId().getValue(),connection.getDatapathId().toString());  }}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public static LongArrayBitVector wrap(final long[] array){  return wrap(array,array.length * Long.SIZE);}  }
class C{  public Long2LongOpenHashMap(final long[] k,final long[] v,final float f){  this(k.length,f);  if (k.length != v.length)   throw new IllegalArgumentException("The key array and the value array have different lengths (" + k.length + " and "+ v.length+ ")");  for (int i=0; i < k.length; i++)   this.put(k[i],v[i]);}  }
class C{  protected final void captureMinimalDBData(Connection con) throws AdeException {  logger.debug("Starting to export tables to DB.");  PreparedStatement ps=null;  String tableName=null;  try {    for (int i=0; i < MINIMAL_TABLES_TO_DUMP.length; i++) {      tableName=MINIMAL_TABLES_TO_DUMP[i];      final String ffdcFileName=formFFDCDBExportedTableFileName(tableName);      final File f=new File(ffdcFileName);      if (f.exists()) {        f.delete();      }      logger.debug("Exporting table  " + tableName);      ps=con.prepareStatement(DB_QUERY_TO_EXPORT_DB_FILE);      ps.setString(1,null);      ps.setString(2,tableName);      ps.setString(3,ffdcFileName);      ps.setString(4,",");      ps.setString(5,null);      ps.setString(6,null);      ps.execute();    }  } catch (  SQLException e) {    throw new AdeExtInternalException("Got an SQL exception",e);  }catch (  Exception e) {    throw new AdeExtInternalException("Exception in exporting DB table, tableName=" + tableName,e);  } finally {    if (ps != null) {      try {        ps.close();      } catch (      SQLException e) {        logger.debug("Exception in closing statement.",e);      }    }  }}  }
class C{  public void testEnable(){  int iterations=BluetoothTestRunner.sEnableIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.disable(adapter);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("enable iteration " + (i + 1) + " of "+ iterations);    mTestUtils.enable(adapter);    mTestUtils.disable(adapter);  }}  }
class C{  @Override public boolean hasNext(){  if (items != null) {    if (items.hasNext()) {      return (true);    } else {      items=null;    }  }  Object next=findNextValidChild();  while (next != null) {    initializeItems(next);    if (items != null) {      return true;    } else {      next=findNextValidChild();    }  }  return false;}  }
class C{  public boolean complete(){  return mComplete;}  }
class C{  public static PortInfoBubble displayInputPortWrongTypeInformation(final Port port,final Class<?> expectedType,final Class<?> actualType){  if (port == null) {    throw new IllegalArgumentException("port must not be null!");  }  if (expectedType == null) {    throw new IllegalArgumentException("expectedType must not be null!");  }  if (actualType == null) {    throw new IllegalArgumentException("actualType must not be null!");  }  String key="process_mandatory_input_port_wrong_type";  return displayMissingInputPortInformation(port,true,true,key,RendererService.getName(expectedType),RendererService.getName(actualType));}  }
class C{  public static LazyQueueX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  public void stop(){  try {    logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_STOPPING_JMX_AGENT));    AlertAppender.getInstance().shuttingDown();    LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);    stopDistributedSystem();    stopHttpAdaptor();    stopRMIConnectorServer();    memberInfoWithStatsMBean=null;    stopSnmpAdaptor();    MBeanUtil.stop();    mBeanServer=null;    removeShutdownHook();    logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_AGENT_HAS_STOPPED));  }  finally {    LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);    LoggingThreadGroup.cleanUpThreadGroups();  }}  }
class C{  public T caseFilter(Filter object){  return null;}  }
class C{  public void initialize(int[] data){  if (data == null) {    throw new IllegalArgumentException(" Data Array is NUll");  }  this.data=data;}  }
class C{  public void update(@NotNull Runner runner){  history.update(runner);  if (runner.equals(selectedRunner) && history.isRunnerExist(runner)) {    view.update(runner);    changeURLDependingOnState(runner);  }}  }
class C{  @Override public Float put(Double key,Float value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public Instance readInstance(Instances structure) throws IOException {  return readInstance(structure,true);}  }
class C{  private boolean quitting(){  if (isInterrupted()) {    return true;  }  if (!continueProcessing.get()) {    return true;  }  if (cache != null && cache.getCancelCriterion().isCancelInProgress()) {    return true;  }  if (system.getCancelCriterion().isCancelInProgress()) {    return true;  }  return false;}  }
class C{  public static String modifier(final String prefix,final Modifier modifier){  if (modifier == null) {    return "";  }  String value=null;switch (modifier) {case DEFAULT:    value="default";  break;case PRIMARY:value="primary";break;case SUCCESS:value="success";break;case INFO:value="info";break;case WARNING:value="warning";break;case DANGER:value="danger";break;case LINK:value="link";break;}if (value != null && prefix != null) {return prefix + value;} else {return value != null ? value : "";}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:14.886 -0500",hash_original_method="E45D6D96430861522854D560F5CA6F0B",hash_generated_method="1DD86CA2457166B3F593DEB15897F714") public boolean isShowingPopup(){  return getListPopupWindow().isShowing();}  }
class C{  private static void doSort(double[] a,int left,int right,double[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    while (k < right && a[k] == a[k + 1])     k++;    if (k == right)     break;    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        double t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    }    if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {      count--;    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (count == 0) {    return;  } else   if (count == 1 && run[count] > right) {    return;  }  right++;  if (run[count] < right) {    run[++count]=right;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  double[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new double[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    double[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  static byte[] concatLengthPrefixed(List<Protocol> protocols){  Buffer result=new Buffer();  for (int i=0, size=protocols.size(); i < size; i++) {    Protocol protocol=protocols.get(i);    if (protocol == Protocol.HTTP_1_0)     continue;    result.writeByte(protocol.toString().length());    result.writeUtf8(protocol.toString());  }  return result.readByteArray();}  }
class C{  public int stack(int pos,int offset,int num){  return typeInfoArray(pos,offset,num,false);}  }
class C{  @Override public void releaseView(){  if (!mIsRunning) {    mView=null;    mScene=null;    mListener=null;  }}  }
class C{  public JMenuItem add(JMenuItem menuItem){  super.add(menuItem);  return menuItem;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 188) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.POSTFIX_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static synchronized void close(ModbusSlave slave){  if (slave != null) {    slave.closeListener();    slaves.remove(slave.getType().getKey(slave.getPort()));  }}  }
class C{  public Complex conjugate(){  return conjugate(this);}  }
class C{  public boolean isResolvePropertiesAbsolute(){  return resolvePropertiesAbsolute;}  }
class C{  public final void testGetEncoded(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  PKCS8EncodedKeySpec meks=new PKCS8EncodedKeySpec(encodedKey);  byte[] ek=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek));}  }
class C{  public Point(){}  }
class C{  protected SystemMemberBridgeServerImpl createSystemMemberBridgeServer(AdminBridgeServer bridge) throws AdminException {  return new SystemMemberBridgeServerImpl(this,bridge);}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface.isInstance(this);}  }
class C{  int error_bound(boolean[] enough,double endl,double endr,double[] ritz,double[] bnd,int step,double tol){  int mid, neig;  int i;  double gapl, gap;  mid=svd_idamax(step + 1,bnd,0,1);  for (i=((step + 1) + (step - 1)) / 2; i >= mid + 1; i-=1)   if (fabs(ritz[i - 1] - ritz[i]) < eps34 * fabs(ritz[i]))   if (bnd[i] > tol && bnd[i - 1] > tol) {    bnd[i - 1]=Math.sqrt(bnd[i] * bnd[i] + bnd[i - 1] * bnd[i - 1]);    bnd[i]=0.0;  }  for (i=((step + 1) - (step - 1)) / 2; i <= mid - 1; i+=1)   if (fabs(ritz[i + 1] - ritz[i]) < eps34 * fabs(ritz[i]))   if (bnd[i] > tol && bnd[i + 1] > tol) {    bnd[i + 1]=Math.sqrt(bnd[i] * bnd[i] + bnd[i + 1] * bnd[i + 1]);    bnd[i]=0.0;  }  neig=0;  gapl=ritz[step] - ritz[0];  for (i=0; i <= step; i++) {    gap=gapl;    if (i < step)     gapl=ritz[i + 1] - ritz[i];    gap=svd_dmin(gap,gapl);    if (gap > bnd[i])     bnd[i]=bnd[i] * (bnd[i] / gap);    if (bnd[i] <= 16.0 * eps * fabs(ritz[i])) {      neig++;      if (!enough[0])       enough[0]=endl < ritz[i] && ritz[i] < endr;    }  }  return neig;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TMETHOD__DECLARED_FINAL:    return declaredFinal != DECLARED_FINAL_EDEFAULT;case TypesPackage.TMETHOD__DECLARED_STATIC:  return declaredStatic != DECLARED_STATIC_EDEFAULT;case TypesPackage.TMETHOD__DECLARED_OVERRIDE:return declaredOverride != DECLARED_OVERRIDE_EDEFAULT;case TypesPackage.TMETHOD__HAS_NO_BODY:return hasNoBody != HAS_NO_BODY_EDEFAULT;case TypesPackage.TMETHOD__DECLARED_MEMBER_ACCESS_MODIFIER:return declaredMemberAccessModifier != DECLARED_MEMBER_ACCESS_MODIFIER_EDEFAULT;case TypesPackage.TMETHOD__DECLARED_ABSTRACT:return declaredAbstract != DECLARED_ABSTRACT_EDEFAULT;case TypesPackage.TMETHOD__LACKS_THIS_OR_SUPER_USAGE:return lacksThisOrSuperUsage != LACKS_THIS_OR_SUPER_USAGE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.895 -0500",hash_original_method="DF65FA753319B9C502684E1A241A3191",hash_generated_method="7BE5235DE18EAFA623725F269AEE58AB") private static void logAndPrintError(PrintStream newStderr,String message,Throwable ex){  Log.e(TAG,message,ex);  if (newStderr != null) {    newStderr.println(message + (ex == null ? "" : ex));  }}  }
class C{  private void required(String attributeName,String atttributValue) throws ApplicationException {  if (atttributValue == null)   throw new ApplicationException("invalid attribute constelation for the tag ftp","attribute [" + attributeName + "] is required, if action is ["+ action+ "]");}  }
class C{  public void imageComplete(int status){  consumer.imageComplete(status);}  }
class C{  public NodesInfoRequestBuilder all(){  request.all();  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static List<GenericValue> findProductsById(Delegator delegator,String idToFind,String goodIdentificationTypeId,boolean searchProductFirst,boolean searchAllId) throws GenericEntityException {  if (Debug.verboseOn())   Debug.logVerbose("Analyze goodIdentification: entered id = " + idToFind + ", goodIdentificationTypeId = "+ goodIdentificationTypeId,module);  GenericValue product=null;  List<GenericValue> productsFound=null;  if (searchProductFirst) {    product=EntityQuery.use(delegator).from("Product").where("productId",idToFind).cache().queryOne();  }  if (searchAllId || (searchProductFirst && UtilValidate.isEmpty(product))) {    Map<String,String> conditions=UtilMisc.toMap("idValue",idToFind);    if (UtilValidate.isNotEmpty(goodIdentificationTypeId)) {      conditions.put("goodIdentificationTypeId",goodIdentificationTypeId);    }    productsFound=EntityQuery.use(delegator).from("GoodIdentificationAndProduct").where(conditions).orderBy("productId").cache(true).queryList();  }  if (!searchProductFirst) {    product=EntityQuery.use(delegator).from("Product").where("productId",idToFind).cache().queryOne();  }  if (UtilValidate.isNotEmpty(product)) {    if (UtilValidate.isNotEmpty(productsFound))     productsFound.add(product); else     productsFound=UtilMisc.toList(product);  }  if (Debug.verboseOn())   Debug.logVerbose("Analyze goodIdentification: found product.productId = " + product + ", and list : "+ productsFound,module);  return productsFound;}  }
class C{  private void cd() throws IOException {  int idx=url.getFile().lastIndexOf('/');  if (idx > 0) {    String dir=url.getFile().substring(0,idx);    write("CWD " + dir + "\r\n");    int reply=getReply();    if (reply != FTP_FILEOK && dir.length() > 0 && dir.charAt(0) == '/') {      write("CWD " + dir.substring(1) + "\r\n");      reply=getReply();    }    if (reply != FTP_FILEOK) {      throw new IOException("Unable to change directories");    }  }}  }
class C{  public boolean hasParameter(String name){  return uriParms.getValue(name) != null;}  }
class C{  public static AnnotationDto transformToDto(Annotation annotation){  if (annotation == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  AnnotationDto result=createDtoObject(AnnotationDto.class,annotation);  return result;}  }
class C{  public static void aggregateBinaryMatrix(MatrixBlock in,MatrixBlock aggVal,AggregateOperator aop) throws DMLRuntimeException {  if (in.getNumRows() != aggVal.getNumRows() || in.getNumColumns() != aggVal.getNumColumns())   throw new DMLRuntimeException("Dimension mismatch on aggregate: " + in.getNumRows() + "x"+ in.getNumColumns()+ " vs "+ aggVal.getNumRows()+ "x"+ aggVal.getNumColumns());  boolean lastRowCorr=(aop.correctionLocation == CorrectionLocationType.LASTROW);  boolean lastColCorr=(aop.correctionLocation == CorrectionLocationType.LASTCOLUMN);  if (!in.sparse && lastRowCorr)   aggregateBinaryMatrixLastRowDenseGeneric(in,aggVal); else   if (in.sparse && lastRowCorr)   aggregateBinaryMatrixLastRowSparseGeneric(in,aggVal); else   if (!in.sparse && lastColCorr)   aggregateBinaryMatrixLastColDenseGeneric(in,aggVal); else   aggregateBinaryMatrixLastColSparseGeneric(in,aggVal);}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public static void addCauseMethodName(String methodName){  if (StringUtils.isNotEmpty(methodName) && !isCauseMethodName(methodName)) {    List list=getCauseMethodNameList();    if (list.add(methodName)) {      CAUSE_METHOD_NAMES=toArray(list);    }  }}  }
class C{  @Override public final CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public void rectValuesToPixel(List<RectF> rects){  Matrix m=getValueToPixelMatrix();  for (int i=0; i < rects.size(); i++)   m.mapRect(rects.get(i));}  }
class C{  public void notifyLoading(ImageLoadHandler handler,CubeImageView imageView){  if (handler == null || imageView == null) {    return;  }  handler.onLoading(this,imageView);}  }
class C{  protected static void fail(){  System.exit(1);}  }
class C{  public boolean hasSameRules(TimeZone other){  if (this == other) {    return true;  }  if (!(other instanceof SimpleTimeZone)) {    return false;  }  SimpleTimeZone that=(SimpleTimeZone)other;  return rawOffset == that.rawOffset && useDaylight == that.useDaylight && (!useDaylight || (dstSavings == that.dstSavings && startMode == that.startMode && startMonth == that.startMonth && startDay == that.startDay && startDayOfWeek == that.startDayOfWeek && startTime == that.startTime && startTimeMode == that.startTimeMode && endMode == that.endMode && endMonth == that.endMonth && endDay == that.endDay && endDayOfWeek == that.endDayOfWeek && endTime == that.endTime && endTimeMode == that.endTimeMode && startYear == that.startYear));}  }
class C{  private void checkCache(Composite parent){  if (parent == null)   return;  checkConstrMap(parent);  ContainerWrapper par=checkParent(parent);  int mc=PlatformDefaults.getModCount();  if (lastModCount != mc) {    grid=null;    lastModCount=mc;  }  int hash=parent.getSize().hashCode();  for (  ComponentWrapper cw : ccMap.keySet()) {    hash^=cw.getLayoutHashCode();    hash+=285134905;  }  if (hash != lastHash) {    grid=null;    lastHash=hash;  }  setDebug(par,getDebugMillis() > 0);  if (grid == null)   grid=new Grid(par,lc,rowSpecs,colSpecs,ccMap,callbackList);}  }
class C{  public double backPropagate(double[][] X_,double[][] Y_) throws Exception {  int N=X_.length;  int L=Y_[0].length;  int nW=W.length;  Matrix T=new Matrix(Y_);  Matrix Z[]=forwardPass(X_);  Matrix dZ[]=new Matrix[nW + 1];  Matrix E_y=T.minus(Z[nW]);  dZ[nW]=MatrixUtils.dsigma(Z[nW]).arrayTimes(E_y);  for (int i=nW - 1; i > 0; i--) {    Matrix E=dZ[i + 1].times(W[i].transpose());    dZ[i]=MatrixUtils.dsigma(Z[i]).arrayTimes(E);    dZ[i]=new Matrix(MatrixUtils.removeBias(dZ[i].getArray()));  }  Matrix dW[]=new Matrix[nW];  for (int i=0; i < nW; i++) {    dW[i]=(Z[i].transpose().times(m_R).times(dZ[i + 1])).plus(dW_[i].times(m_M));  }  for (int i=0; i < nW; i++) {    W[i].plusEquals(dW[i]);  }  dW_=dW;  double SSE=E_y.normF();  return SSE;}  }
class C{  public void renderBeginningBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  if (this.widgetCommentsEnabled) {    StringWriter sr=new StringWriter();    sr.append("<@formatBoundaryComment ");    sr.append(" boundaryType=\"");    sr.append("Begin");    sr.append("\" widgetType=\"");    sr.append(widgetType);    sr.append("\" widgetName=\"");    sr.append(modelWidget.getBoundaryCommentName());    sr.append("\" />");    executeMacro(writer,sr.toString());  }}  }
class C{  public static String keyStrokeToString(final KeyStroke keyStroke){  final StringBuilder sb=new StringBuilder(" (");  if (keyStroke.getModifiers() != 0)   sb.append(KeyEvent.getKeyModifiersText(keyStroke.getModifiers())).append('+');  sb.append(KeyEvent.getKeyText(keyStroke.getKeyCode())).append(')');  return sb.toString();}  }
class C{  static void accumSingleGeneric(int counts[],int startTermIndex,SortedDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final LongValues ordmap=map == null ? null : map.getGlobalOrds(subIndex);  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    int term;    if (si.advanceExact(doc)) {      term=si.ordValue();    } else {      term=-1;    }    if (map != null && term >= 0) {      term=(int)ordmap.get(term);    }    int arrIdx=term - startTermIndex;    if (arrIdx >= 0 && arrIdx < counts.length)     counts[arrIdx]++;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:17.541 -0500",hash_original_method="BF6AA9440795270C2D5A5C002031838F",hash_generated_method="300FAF7F4C3C8A3A9809C1A337418A2E") private void cleanUp(){  ProcessReference reference;  while ((reference=referenceQueue.poll()) != null) {synchronized (processReferences) {      processReferences.remove(reference.processId);    }  }}  }
class C{  public SVGOMFEFuncRElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  private XML checksAttributesExistence(Class<?> aClass,Attribute[] attributes){  String[] attributesNames=new String[attributes.length];  for (int i=attributes.length; i-- > 0; )   attributesNames[i]=attributes[i].getName();  checksAttributesExistence(aClass,attributesNames);  return this;}  }
class C{  public ToHitData guessToHitModifierForWeapon(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,Mounted weapon,IGame game){  if (shooterState == null) {    shooterState=new EntityState(shooter);  }  if (targetState == null) {    targetState=new EntityState(target);  }  if (!weapon.canFire()) {    return new ToHitData(TH_WEAP_CANNOT_FIRE);  }  WeaponType weaponType=(WeaponType)weapon.getType();  if (weaponType.getAmmoType() != AmmoType.T_NA) {    if (weapon.getLinked() == null) {      return new ToHitData(TH_WEAP_NO_AMMO);    }    if (weapon.getLinked().getUsableShotsLeft() == 0) {      return new ToHitData(TH_WEAP_NO_AMMO);    }  }  if (shooterState.isProne()) {    if (shooter.isLocationBad(Mech.LOC_LARM) && shooter.isLocationBad(Mech.LOC_RARM)) {      return new ToHitData(TH_WEAP_PRONE_ARMLESS);    }    if ((weapon.getLocation() == Mech.LOC_LARM || weapon.getLocation() == Mech.LOC_RARM) && shooter.isLocationBad(weapon.getLocation())) {      return new ToHitData(TH_WEAP_ARM_PROP);    }    if ((weapon.getLocation() == Mech.LOC_LLEG) || (weapon.getLocation() == Mech.LOC_RLEG)) {      return new ToHitData(TH_WEAP_PRONE_LEG);    }  }  int shooterFacing=shooterState.getFacing();  if (shooter.isSecondaryArcWeapon(shooter.getEquipmentNum(weapon))) {    shooterFacing=shooterState.getSecondaryFacing();  }  boolean inArc=isInArc(shooterState.getPosition(),shooterFacing,targetState.getPosition(),shooter.getWeaponArc(shooter.getEquipmentNum(weapon)));  if (!inArc) {    return new ToHitData(TH_WEAPON_NO_ARC);  }  int distance=shooterState.getPosition().distance(targetState.getPosition());  if (targetState.isAirborneAero() && !shooterState.isAero()) {    if (target.getTargetId() == shooter.getId()) {      distance=0;    } else {      distance+=2 * target.getAltitude();    }  }  int range=RangeType.rangeBracket(distance,weaponType.getRanges(weapon),game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_RANGE),game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_LOS_RANGE));  if (RangeType.RANGE_OUT == range) {    return new ToHitData(TH_OUT_OF_RANGE);  } else   if ((range == RangeType.RANGE_MINIMUM) && targetState.isAirborneAero()) {    range=RangeType.RANGE_SHORT;  }  boolean isShooterInfantry=(shooter instanceof Infantry);  if ((distance == 0) && (!isShooterInfantry) && !(weaponType instanceof StopSwarmAttack)&& !targetState.isAirborneAero()) {    return new ToHitData(TH_INF_ZERO_RNG);  }  if (weaponType instanceof StopSwarmAttack) {    if (Entity.NONE == shooter.getSwarmTargetId()) {      return new ToHitData(TH_STOP_SWARM_INVALID);    } else {      return new ToHitData(TH_SWARM_STOPPED);    }  }  ToHitData baseMods=guessToHitModifierHelperForAnyAttack(shooter,shooterState,target,targetState,distance,game);  if (baseMods.getValue() == TargetRoll.IMPOSSIBLE || baseMods.getValue() == TargetRoll.AUTOMATIC_FAIL) {    return baseMods;  }  ToHitData toHit=new ToHitData(shooter.getCrew().getGunnery(),TH_GUNNERY);  toHit.append(baseMods);  LosEffects losEffects=getLosEffects(game,shooter.getId(),target,shooterState.getPosition(),targetState.getPosition(),false);  IHex targetHex=game.getBoard().getHex(targetState.getPosition());  Entity targetEntity=null;  if (target instanceof Entity) {    targetEntity=(Entity)target;  }  if (targetEntity != null) {    if (targetHex.containsTerrain(Terrains.WATER) && (targetHex.terrainLevel(Terrains.WATER) == 1) && (targetEntity.height() > 0)) {      losEffects.setTargetCover(losEffects.getTargetCover() | LosEffects.COVER_HORIZONTAL);    }  }  toHit.append(losEffects.losModifiers(game));  if ((toHit.getValue() == TargetRoll.IMPOSSIBLE) || (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL)) {    return toHit;  }  if (shooter instanceof Tank) {    int sensors=((Tank)shooter).getSensorHits();    if (sensors > 0) {      toHit.addModifier(sensors,TH_SENSORS);    }  }  if (targetEntity instanceof Mech) {    if (Infantry.SWARM_MEK.equals(weaponType.getInternalName())) {      toHit.append(getSwarmMekBaseToHit(shooter,targetEntity,game));    }    if (Infantry.LEG_ATTACK.equals(weapon.getType().getInternalName())) {      toHit.append(getLegAttackBaseToHit(shooter,targetEntity,game));    }  }  if ((toHit.getValue() == TargetRoll.IMPOSSIBLE) || (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL)) {    return toHit;  }  if (!weaponType.hasFlag(WeaponType.F_INFANTRY)) {    if (range == RangeType.RANGE_SHORT) {      toHit.addModifier(TH_SHORT_RANGE);    } else     if (range == RangeType.RANGE_MEDIUM) {      toHit.addModifier(TH_MEDIUM_RANGE);    } else     if (range == RangeType.RANGE_LONG) {      toHit.addModifier(TH_LONG_RANGE);    } else     if (range == RangeType.RANGE_EXTREME) {      toHit.addModifier(TH_EXTREME_RANGE);    } else     if (range == RangeType.RANGE_MINIMUM) {      toHit.addModifier((weaponType.getMinimumRange() - distance) + 1,TH_MINIMUM_RANGE);    }  } else {    toHit.append(getInfantryRangeMods(distance,(InfantryWeapon)weapon.getType()));  }  if (shooter.getHeatFiringModifier() != 0) {    toHit.addModifier(shooter.getHeatFiringModifier(),TH_HEAT);  }  toHit.append(getDamageWeaponMods(shooter,weapon));  if (weaponType.getToHitModifier() != 0) {    toHit.addModifier(weaponType.getToHitModifier(),TH_WEAPON_MOD);  }  if (isLargeTarget(target)) {    toHit.addModifier(TH_RNG_LARGE);  }  if (weaponType.getAmmoType() != AmmoType.T_NA && (weapon.getLinked() != null) && (weapon.getLinked().getType() instanceof AmmoType)) {    AmmoType ammoType=(AmmoType)weapon.getLinked().getType();    if ((ammoType != null) && (ammoType.getToHitModifier() != 0)) {      toHit.addModifier(ammoType.getToHitModifier(),TH_AMMO_MOD);    }  }  if (shooter.hasTargComp() && weaponType.hasFlag(WeaponType.F_DIRECT_FIRE)) {    toHit.addModifier(TH_TARGETTING_COMP);  }  if (targetEntity != null) {    if (targetEntity.hasQuirk(OptionsConstants.QUIRK_POS_LOW_PROFILE)) {      toHit.addModifier(TH_TAR_LOW_PROFILE);    }  }  if (RangeType.RANGE_SHORT == range) {    if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_IMP_TARG_S)) {      toHit.addModifier(TH_IMP_TARG_SHORT);    }    if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_VAR_RNG_TARG_S)) {      toHit.addModifier(TH_VAR_RNG_TARG_SHORT_AT_SHORT);    }    if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_VAR_RNG_TARG_L)) {      toHit.addModifier(TH_VAR_RNG_TARG_LONG_AT_SHORT);    }    if (shooter.hasQuirk(OptionsConstants.QUIRK_NEG_POOR_TARG_S)) {      toHit.addModifier(TH_POOR_TARG_SHORT);    }  }  if (RangeType.RANGE_MEDIUM == range) {    if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_IMP_TARG_M)) {      toHit.addModifier(TH_IMP_TARG_MEDIUM);    }    if (shooter.hasQuirk(OptionsConstants.QUIRK_NEG_POOR_TARG_M)) {      toHit.addModifier(TH_POOR_TARG_MEDIUM);    }  }  if (RangeType.RANGE_LONG == range) {    if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_IMP_TARG_L)) {      toHit.addModifier(TH_IMP_TARG_LONG);    }    if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_VAR_RNG_TARG_S)) {      toHit.addModifier(TH_VAR_RNG_TARG_SHORT_AT_LONG);    }    if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_VAR_RNG_TARG_L)) {      toHit.addModifier(TH_VAR_RNG_TARG_LONG_AT_LONG);    }    if (shooter.hasQuirk(OptionsConstants.QUIRK_NEG_POOR_TARG_L)) {      toHit.addModifier(TH_POOR_TARG_LONG);    }  }  if (weapon.hasQuirk(OptionsConstants.QUIRK_WEAP_POS_ACCURATE)) {    toHit.addModifier(TH_ACCURATE_WEAP);  }  if (weapon.hasQuirk(OptionsConstants.QUIRK_WEAP_NEG_INACCURATE)) {    toHit.addModifier(TH_INACCURATE_WEAP);  }  return toHit;}  }
class C{  protected void augmentIterationId(){  if (getIterationId() == Integer.MAX_VALUE) {    this.iterationID=Integer.MIN_VALUE + 1;    resetNetworkVisited();  } else {    this.iterationID++;  }}  }
class C{  public static Vector3m toVector3m(Vector2 o,float y){  return new Vector3m(o.x,y,o.z);}  }
class C{  private void deserializeThriftToken(TBase<?,?> base,byte[] bytes) throws TException {  TMemoryInputTransport trans_=new TMemoryInputTransport();  TProtocol protocol_=new TCompactProtocol.Factory().getProtocol(trans_);  try {    trans_.reset(bytes);    trans_.consumeBuffer(8);    base.read(protocol_);  }  finally {    trans_.clear();    protocol_.reset();  }}  }
class C{  private int abortWait(int phase){  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  for (; ; ) {    Thread t;    QNode q=head.get();    int p=(int)(root.state >>> PHASE_SHIFT);    if (q == null || ((t=q.thread) != null && q.phase == p))     return p;    if (head.compareAndSet(q,q.next) && t != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public static void writeHeaderXWapApplicationId(WspEncodingVersion wspEncodingVersion,OutputStream os,String appId) throws IOException {  int wellKnownAppId=WspUtil.getWellKnownPushAppId(appId.toLowerCase());  int headerId=WspUtil.getWellKnownHeaderId(wspEncodingVersion,WapConstants.HEADER_X_WAP_APPLICATION_ID);  if (headerId != -1) {    WspUtil.writeShortInteger(os,headerId);    if (wellKnownAppId == -1) {      WspUtil.writeTextString(os,appId);    } else {      WspUtil.writeInteger(os,wellKnownAppId);    }  } else {    writeCustomHeader(os,"X-Wap-Application-Id",appId);  }}  }
class C{  public int totalLength(){  int total=0;  for (  Map.Entry<Integer,Integer> region : mIntervals.entrySet()) {    total+=region.getValue() - region.getKey();  }  return total;}  }
class C{  @Override public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public void constrain(int minLeft,int minTop,int maxLeft,int maxTop){  left=Math.max(minLeft,Math.min(left,maxLeft));  top=Math.max(minTop,Math.min(top,maxTop));}  }
class C{  public synchronized JIPQuery openSynchronousQuery(final JIPTerm jipquery){  PrologObject query=jipquery.getTerm();  if (query instanceof Functor) {    if (((Functor)query).getName().equals("?-/1"))     query=((Functor)query).getParams();  }  if (m_bTrace)   return new JIPQuery(query,new WAMTrace(this)); else   return new JIPQuery(query,new WAM(this));}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  ArrayList<Integer> list=new ArrayList<Integer>();  System.out.print("Enter 5 numbers: ");  for (int i=0; i < 5; i++) {    list.add(input.nextInt());  }  sort(list);  System.out.println(list.toString());}  }
class C{  public void testPolymorphicCreatorBean() throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.registerModule(new MyModule(PolymorphicBeanBase.class,new PolymorphicBeanInstantiator()));  String JSON="{\"type\":" + quote(PolymorphicBean.class.getName()) + ",\"name\":\"Axel\"}";  PolymorphicBeanBase result=mapper.readValue(JSON,PolymorphicBeanBase.class);  assertNotNull(result);  assertSame(PolymorphicBean.class,result.getClass());  assertEquals("Axel",((PolymorphicBean)result).name);}  }
class C{  private void checkCertificates(UsuarioVO usuario,BaseLibroVO libro,List certificates){  assertNotNull(certificates);  assertEquals(1,certificates.size());  PlantillaInformeVO pi=(PlantillaInformeVO)certificates.get(0);  assertEquals("4",pi.getId());  assertEquals("120.zip",pi.getNombre());  assertEquals(TipoPlantillaInformeEnum.CERTIFICADO_REGISTRO,pi.getTipo());  libro.setId("2");  certificates=getReportManager().getCertificates(usuario,libro);  assertNotNull(certificates);  assertEquals(1,certificates.size());  pi=(PlantillaInformeVO)certificates.get(0);  assertEquals("8",pi.getId());  assertEquals("220.zip",pi.getNombre());  assertEquals(TipoPlantillaInformeEnum.CERTIFICADO_REGISTRO,pi.getTipo());}  }
class C{  private String normalizeResourceRequest(FacesContext context){  String path;  String facesServletMapping=Util.getFacesMapping(context);  if (!Util.isPrefixMapped(facesServletMapping)) {    path=context.getExternalContext().getRequestServletPath();    int i=path.lastIndexOf(".");    if (0 < i) {      path=path.substring(0,i);    }  } else {    path=context.getExternalContext().getRequestPathInfo();  }  return path;}  }
class C{  public void cancelCancellable(){  if (timeoutMessageCancellable != null) {    timeoutMessageCancellable.cancel();  }  if (getResponseFuture() != null && !getResponseFuture().isDone()) {    getResponseFuture().cancel(true);  }}  }
class C{  private boolean removeMapping(Object key,Object value){  if (key == null) {    HashMapEntry<K,V> e=entryForNullKey;    if (e == null || !Objects.equal(value,e.value)) {      return false;    }    entryForNullKey=null;    modCount++;    size--;    postRemove(e);    return true;  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      if (!Objects.equal(value,e.value)) {        return false;      }      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      postRemove(e);      return true;    }  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.STATUS__PROPERTIES:    getProperties().clear();  return;}super.eUnset(featureID);}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public static boolean isInClassPath(String location) throws MalformedURLException {  return isInClassPath(new File(location).toURI().toURL());}  }
class C{  public static double alongTrackDistanceDeg(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ){  double dist1Q=haversineFormulaDeg(lat1,lon1,latQ,lonQ);  double ctd=crossTrackDistanceDeg(lat1,lon1,lat2,lon2,latQ,lonQ,dist1Q);  return alongTrackDistanceDeg(lat1,lon1,lat2,lon2,latQ,lonQ,dist1Q,ctd);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void writePv(ProcessVar pv){  writePv(pv,100,false);}  }
class C{  public QueryParams parseQuery(URL url) throws KatharsisException {  try {    return buildQueryParams(splitQuery(url));  } catch (  UnsupportedEncodingException e) {    throw new QueryParseException(String.format("Could not parse query %s. %s",url.toString(),e.getMessage()));  }}  }
class C{  static boolean isAvailablePort(InetAddress inetAddress,int port){  if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {    throw new IllegalArgumentException("Invalid port number: " + port);  }  Socket socket=null;  try {    socket=new Socket(inetAddress,port);    return false;  } catch (  IOException ignore) {    return true;  } finally {    if (socket != null) {      try {        socket.close();      } catch (      IOException ignore) {      }    }  }}  }
class C{  public StandardCategoryItemLabelGenerator(String labelFormat,NumberFormat formatter,NumberFormat percentFormatter){  super(labelFormat,formatter,percentFormatter);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:      return N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ParameterizedAccess.class) {switch (baseOperationID) {case N4JSPackage.PARAMETERIZED_ACCESS___IS_PARAMETERIZED:  return N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION___IS_PARAMETERIZED;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public CCVertex3D originalVertex(ccGridSize pos){  CCGrid3D g=(CCGrid3D)target.getGrid();  return g.originalVertex(pos);}  }
class C{  public long create(Completion completed){  return mDaoSession.getCompletionDao().insert(completed);}  }
class C{  public T caseEvent(Event object){  return null;}  }
class C{  private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {  iInstant=(LocalTime)oos.readObject();  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();  iField=type.getField(iInstant.getChronology());}  }
class C{  public static void validate(CertPath path,PKIXParameters params) throws Exception {  CertPathValidator validator=CertPathValidator.getInstance("PKIX");  CertPathValidatorResult cpvr=validator.validate(path,params);  System.out.println("ValidateCertPath successful.");}  }
class C{  public void testSplit() throws Exception {  String src=null;  String resString=null;  List<String> results=new ArrayList<String>();  src="`MyDatabase 1.0.1.0`.`Proc 1.v1`";  resString=StringUtils.sanitizeProcOrFuncName(src);  if ((resString != null)) {    results=StringUtils.splitDBdotName(resString,null,"`",true);    assertEquals(results.get(0),"MyDatabase 1.0.1.0");    assertEquals(results.get(1),"Proc 1.v1");  } else {    fail("Test 1.1 returned null resString");  }  src="`MyDatabase 1.0.1.0`.`Proc 1.v1`";  resString=StringUtils.sanitizeProcOrFuncName(src);  if ((resString != null)) {    results=StringUtils.splitDBdotName(resString,null,"`",false);    assertEquals(results.get(0),"MyDatabase 1.0.1.0");    assertEquals(results.get(1),"Proc 1.v1");  } else {    fail("Test 1.2 returned null resString");  }  src="`Proc 1.v1`";  resString=StringUtils.sanitizeProcOrFuncName(src);  if ((resString != null)) {    results=StringUtils.splitDBdotName(resString,null,"`",true);    assertEquals(results.get(0),null);    assertEquals(results.get(1),"Proc 1.v1");  } else {    fail("Test 2.1 returned null resString");  }  src="`Proc 1.v1`";  resString=StringUtils.sanitizeProcOrFuncName(src);  if ((resString != null)) {    results=StringUtils.splitDBdotName(resString,null,"`",false);    assertEquals(results.get(0),null);    assertEquals(results.get(1),"Proc 1.v1");  } else {    fail("Test 2.2 returned null resString");  }}  }
class C{  public void mouseEntered(java.awt.event.MouseEvent e){  if (shouldTakeEvents()) {    Widget mouseListWidg=getUEListenWidget(UE_INDEX_MOUSE_ENTER);    if (mouseListWidg != null) {      if (uiMgr.getTracer() != null)       uiMgr.getTracer().traceListener(this,mouseListWidg);      Catbert.ExecutionPosition ep=null;      Catbert.Context childContext=relatedContext.createChild();      childContext.setLocal("X",new Integer(e.getX()));      childContext.setLocal("Y",new Integer(e.getY()));      childContext.setLocal("RelativeX",new Float(e.getX() / boundsf.width));      childContext.setLocal("RelativeY",new Float(e.getY() / boundsf.height));      childContext.setLocal(Catbert.PASSIVE_LISTEN_VAR,null);      Widget[] listenKids=mouseListWidg.contents();      for (int i=0; i < listenKids.length; i++) {        if (listenKids[i].isProcessChainType()) {          if ((ep=processChain(listenKids[i],childContext,null,this,false)) != null) {            ep.addToStack(listenKids[i]);            ep.addToStackFinal(mouseListWidg);            return;          }        }      }    }    if (e.getSource() instanceof ZComp && uiMgr.getBoolean("ui/focus_follows_mouse",true)) {      ZComp src=(ZComp)e.getSource();      ZPseudoComp picky=null;      ZDataTable tabParent=null;      while (src != null && picky == null) {        if (src instanceof ZPseudoComp && src.isFocusable()) {          tabParent=((ZPseudoComp)src).getTableParent();          if (tabParent == null || tabParent.isTableRegionVisible(src.getTrueBoundsf()))           picky=(ZPseudoComp)src;        }        src=src.parent;      }      if (picky != null && !picky.isFocused()) {        ZPseudoComp tempParent=picky.getTopPseudoParent();        int evtEmuType=0;        ZComp oldFocus=tempParent.getLastFocusedChild();        if (oldFocus != null) {          if (oldFocus.getTrueXf() < picky.getTrueXf() || oldFocus.getTrueYf() < picky.getTrueYf())           evtEmuType=UserEvent.DOWN; else           evtEmuType=UserEvent.UP;        }        selectNode(picky);        tempParent.updateFocusTargetRect(0);        if (tabParent != null && evtEmuType != 0) {          tabParent.updateFocusTargetRect(0);          tabParent.notifyOfTransition(evtEmuType);        }      }    }  }}  }
class C{  public void addMessage(Message message){  if (SHOW_LOGS)   Logger.v(TAG,">> addMessage, lock " + message);  mQueueLock.lock(TAG);  mPlayerMessagesQueue.add(message);  mQueueLock.notify(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< addMessage, unlock " + message);  mQueueLock.unlock(TAG);}  }
class C{  public double weightedFalsePositiveRate(){  return m_delegate.weightedFalsePositiveRate();}  }
class C{  public CircleGenerator(){  this(1);}  }
class C{  public void stop(){  end_time=System.nanoTime();  total_time=end_time - start_time;}  }
class C{  public void translateY(double y){  setY(getY() + y);}  }
class C{  public final Timestamp addSecond(int amount){  long delta=(long)amount * 1000;  return addMillis(delta);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double probToLogOdds(double prob){  if (gr(prob,1) || (sm(prob,0))) {    throw new IllegalArgumentException("probToLogOdds: probability must " + "be in [0,1] " + prob);  }  double p=SMALL + (1.0 - 2 * SMALL) * prob;  return Math.log(p / (1 - p));}  }
class C{  public Object plus(){  Object value=getValue();  if (value == null) {    if (m_displayType == DisplayType.Integer)     value=new Integer(0); else     value=Env.ZERO;  }  if (value instanceof BigDecimal)   value=((BigDecimal)value).add(Env.ONE); else   value=new Integer(((Integer)value).intValue() + 1);  setValue(value);  return value;}  }
class C{  public boolean isAway(){  return (getAway() != null);}  }
class C{  public void endElement(String name) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  dontEscape=false;  if (closeStart) {    boolean isEmptyElement=HtmlUtils.isEmptyElement(name);    if (isEmptyElement) {      writer.write(" />");      closeStart=false;      return;    }    writer.write(">");    closeStart=false;  }  writer.write("</");  writer.write(name);  writer.write(">");}  }
class C{  public static void closeSilently(Statement stmt){  if (stmt != null) {    try {      stmt.close();    } catch (    SQLException e) {    }  }}  }
class C{  public boolean isVoidArray(){  if (!isType(TC_ARRAY)) {    return false;  }  Type type=this;  while (type.isType(TC_ARRAY))   type=type.getElementType();  return type.isType(TC_VOID);}  }
class C{  public void testShiftRight3(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=27;  byte rBytes[]={48,7,12,-97,-42,-117,37,-85,96};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  static void checkSignedByte(final int value,final String msg){  if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed byte): " + value);  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public boolean matches(InventoryCrafting p_77569_1_,World p_77569_2_){  ArrayList arraylist=new ArrayList(this.recipeItems);  for (int i=0; i < 5; ++i) {    for (int j=0; j < 5; ++j) {      ItemStack itemstack=p_77569_1_.getStackInRowAndColumn(j,i);      if (itemstack != null) {        boolean flag=false;        Iterator iterator=arraylist.iterator();        while (iterator.hasNext()) {          ItemStack itemstack1=(ItemStack)iterator.next();          if (itemstack.getItem() == itemstack1.getItem() && (itemstack1.getItemDamage() == 32767 || itemstack.getItemDamage() == itemstack1.getItemDamage())) {            flag=true;            arraylist.remove(itemstack1);            break;          }        }        if (!flag) {          return false;        }      }    }  }  return arraylist.isEmpty();}  }
class C{  public AbstractHeaderItem(){  setHidden(true);  setSelectable(false);}  }
class C{  public int contentsSize(){  return contents.size();}  }
class C{  public boolean isGroupRow(int row){  if (m_groupRowsIndicator == null) {    m_groupRowsIndicator=new ArrayList<Boolean>(rows.size());    for (int r=0; r < rows.size(); r++)     m_groupRowsIndicator.add(new Boolean(m_groupRows.contains(new Integer(r))));  }  if (row < 0 || row >= m_groupRowsIndicator.size())   return false;  return m_groupRowsIndicator.get(row).booleanValue();}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  public void isClosedCurve(boolean closed){  mIsClosed=closed;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  Point theScreenResolution=new Point();  theScreenResolution=getDisplaySize(display);  screenResolution=theScreenResolution;  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Deprecated public ConcurrentUpdateSolrClient(String solrServerUrl,int queueSize,int threadCount){  this(solrServerUrl,null,queueSize,threadCount);  shutdownExecutor=true;  internalHttpClient=true;}  }
class C{  public AbstractDelegatingRepositoryImplConfig(){  super();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.789 -0500",hash_original_method="FDCB5D0AAFA9E01A4FEEBED763708DF4",hash_generated_method="0310C45601B1271997169FB3A2B77AE7") public static Bitmap createBitmap(Bitmap source,int x,int y,int width,int height){  return createBitmap(source,x,y,width,height,null,false);}  }
class C{  protected InternalReadReport asyncStreamRead(EntityDefinition ed,Scan scan,EntityCreationListener listener) throws IOException {  long counter=0;  long startTimestamp=0;  long stopTimestamp=0;  InternalScanner scanner=this.getCurrentRegion().getScanner(scan);  List<Cell> results=new ArrayList<Cell>();  try {    boolean hasMoreRows;    GenericMetricShadowEntity singleMetricEntity=null;    do {      hasMoreRows=scanner.next(results);      Map<String,byte[]> kvMap=new HashMap<String,byte[]>();      if (!results.isEmpty()) {        counter++;        byte[] row=results.get(0).getRow();        long timestamp=RowkeyBuilder.getTimestamp(row,ed);        if (startTimestamp == 0 || startTimestamp > timestamp) {          startTimestamp=timestamp;        }        if (stopTimestamp == 0 || stopTimestamp < timestamp) {          stopTimestamp=timestamp;        }        for (        Cell kv : results) {          String qualifierName=Bytes.toString(kv.getQualifier());          if (kv.getValue() != null)           kvMap.put(qualifierName,kv.getValue());        }        InternalLog internalLog=HBaseInternalLogHelper.buildObject(ed,row,timestamp,kvMap);        if (internalLog != null) {          TaggedLogAPIEntity logAPIEntity=null;          try {            logAPIEntity=HBaseInternalLogHelper.buildEntity(internalLog,ed);            if (logAPIEntity instanceof GenericMetricEntity) {              if (singleMetricEntity == null)               singleMetricEntity=new GenericMetricShadowEntity();              GenericMetricEntity e=(GenericMetricEntity)logAPIEntity;              if (e.getValue() != null) {                int count=e.getValue().length;                @SuppressWarnings("unused") Class<?> cls=ed.getMetricDefinition().getSingleTimestampEntityClass();                for (int i=0; i < count; i++) {                  long ts=logAPIEntity.getTimestamp() + i * ed.getMetricDefinition().getInterval();                  singleMetricEntity.setTimestamp(ts);                  singleMetricEntity.setTags(e.getTags());                  singleMetricEntity.setValue(e.getValue()[i]);                  if (startTimestamp == 0 || startTimestamp > ts)                   startTimestamp=ts;                  if (stopTimestamp == 0 || stopTimestamp < ts)                   stopTimestamp=ts;                  listener.entityCreated(singleMetricEntity);                }              }            } else {              listener.entityCreated(logAPIEntity);            }          } catch (          Exception e) {            if (internalLog != null) {              LOG.error("Got exception to handle " + internalLog.toString() + ": "+ e.getMessage(),e);            }            throw new IOException(e);          }        } else {          LOG.error("Got null to parse internal log for row: " + row.length + " with fields: "+ kvMap);        }        results.clear();      } else {        if (LOG.isDebugEnabled())         LOG.warn("Empty batch of KeyValue");      }    } while (hasMoreRows);  } catch (  IOException ex) {    LOG.error(ex.getMessage(),ex);    throw ex;  } finally {    if (scanner != null) {      scanner.close();    }  }  return new InternalReadReport(counter,startTimestamp,stopTimestamp);}  }
class C{  public boolean isEscalated(){  Object oo=get_Value(COLUMNNAME_IsEscalated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private GameLevel createLevel(Class levelClass,Class controllerClass,boolean isTutorial){  _physicsWorld=new PhysicsWorld(_gravity,false);  if (isTutorial) {    _backgroundColor=LevelColorUtil.fromLevelColor(LevelColor.PURPLE);  }  GameLevel level;  try {    level=(GameLevel)levelClass.newInstance();  } catch (  Exception e) {    e.printStackTrace();    return null;  }  level.init(_width,_height,_scale,_density);  level.createLevel(_physicsWorld,OBSTACLE_FIX_DEF);  createBackground(level.getBackground(),null);  if (_doDebugDraw) {    DebugRenderer debugRenderer=new DebugRenderer(_physicsWorld,_engine.getVertexBufferObjectManager());    _engine.getScene().attachChild(debugRenderer);  }  createSinkHole(level.getSinkholeLocation());  createSpawnHole(level.getBallSpawnLocation());  createBall(level.getBallSpawnLocation());  initTimer(level.getLevelDuration());  createEdgeSensors();  if (controllerClass != null) {    createLevelController(controllerClass,level);  } else {    _levelController=null;  }  _gameLevel=level;  _orientationProvider.start();  _flash=createFlash(_nextBackgroundColor);  _timesUpFlash=createFlash(LevelColorUtil.fromLevelColor(LevelColor.YELLOW));  return level;}  }
class C{  public Instance nearestNeighbour(Instance target) throws Exception {  return kNearestNeighbours(target,1).instance(0);}  }
class C{  public void onCreate(Bundle savedInstanceState,Class<OpsType> opsType,Interface instance){  super.onCreate(savedInstanceState);  try {    handleConfiguration(opsType,instance);  } catch (  InstantiationException|IllegalAccessException e) {    Log.d(TAG,"handleConfiguration " + e);    throw new RuntimeException(e);  }}  }
class C{  public DateTimeFormatterBuilder appendFixedSignedDecimal(DateTimeFieldType fieldType,int numDigits){  if (fieldType == null) {    throw new IllegalArgumentException("Field type must not be null");  }  if (numDigits <= 0) {    throw new IllegalArgumentException("Illegal number of digits: " + numDigits);  }  return append0(new FixedNumber(fieldType,numDigits,true));}  }
class C{  private void override(TypeDescriptor other) throws BinaryObjectException {  assert clsName.equals(other.clsName);  if (canOverride) {    mapper=other.mapper;    serializer=other.serializer;    affKeyFieldName=other.affKeyFieldName;    isEnum=other.isEnum;    canOverride=other.canOverride;  } else   if (!other.canOverride)   throw new BinaryObjectException("Duplicate explicit class definition in configuration: " + clsName);}  }
class C{  public static void main(String[] args){  CreateSwfDomain app=new CreateSwfDomain();  AmazonSimpleWorkflow swf=AmazonSimpleWorkflowClientBuilder.standard().withRegion(Regions.US_WEST_2).build();  app.listSwfDomains(swf);  app.RegisterSwfDomain(swf,"ExampleDomain");}  }
class C{  private static CacheConfiguration marshallerSystemCache(){  CacheConfiguration cache=new CacheConfiguration();  cache.setName(CU.MARSH_CACHE_NAME);  cache.setCacheMode(REPLICATED);  cache.setAtomicityMode(ATOMIC);  cache.setSwapEnabled(false);  cache.setRebalanceMode(SYNC);  cache.setWriteSynchronizationMode(FULL_SYNC);  cache.setAffinity(new RendezvousAffinityFunction(false,20));  cache.setNodeFilter(CacheConfiguration.ALL_NODES);  cache.setStartSize(300);  cache.setRebalanceOrder(-2);  cache.setCopyOnRead(false);  return cache;}  }
class C{  public boolean isRequired(){  return detail.isRequired();}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  private void checkForTipChange(MouseEvent event){  JComponent component=(JComponent)event.getSource();  String newText=component.getToolTipText(event);  Point newPreferredLocation=component.getToolTipLocation(event);  if (newText != null || newPreferredLocation != null) {    mouseEvent=event;    if (((newText != null && newText.equals(toolTipText)) || newText == null) && ((newPreferredLocation != null && newPreferredLocation.equals(preferredLocation)) || newPreferredLocation == null)) {      if (tipWindow != null) {        insideTimer.restart();      } else {        enterTimer.restart();      }    } else {      toolTipText=newText;      preferredLocation=newPreferredLocation;      if (showImmediately) {        hideTipWindow();        showTipWindow();        exitTimer.stop();      } else {        enterTimer.restart();      }    }  } else {    toolTipText=null;    preferredLocation=null;    mouseEvent=null;    insideComponent=null;    hideTipWindow();    enterTimer.stop();    exitTimer.restart();  }}  }
class C{  public void startThreads(){  int priority=Thread.currentThread().getPriority();  log.debug("startThreads current priority = " + priority + " max available = "+ Thread.MAX_PRIORITY+ " default = "+ Thread.NORM_PRIORITY+ " min available = "+ Thread.MIN_PRIORITY);  int xmtpriority=(Thread.MAX_PRIORITY - 1 > priority ? Thread.MAX_PRIORITY - 1 : Thread.MAX_PRIORITY);  if (xmtHandler == null) {    xmtHandler=new XmtHandler();  }  Thread xmtThread=new Thread(xmtHandler,"LocoNet Uhlenbrock transmit handler");  log.debug("Xmt thread starts at priority " + xmtpriority);  xmtThread.setDaemon(true);  xmtThread.setPriority(Thread.MAX_PRIORITY - 1);  xmtThread.start();  if (rcvHandler == null) {    rcvHandler=new RcvHandler(this);  }  Thread rcvThread=new Thread(rcvHandler,"LocoNet Uhlenbrock receive handler");  rcvThread.setDaemon(true);  rcvThread.setPriority(Thread.MAX_PRIORITY);  rcvThread.start();}  }
class C{  public boolean hasIcon(){  return hasIcon;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  @Override public List<FeatureValue<FV>> featurize(Featurizable<TK,FV> f){  List<FeatureValue<FV>> featureValues=new ArrayList<>();  for (  Featurizer<TK,FV> featurizer : featurizers) {    if (featurizer instanceof DerivationFeaturizer) {      List<FeatureValue<FV>> listFeatureValues=((DerivationFeaturizer<TK,FV>)featurizer).featurize(f);      if (listFeatureValues != null) {        for (        FeatureValue<FV> fv : listFeatureValues) {          featureValues.add(fv);        }      }    }  }  if (featureAugmentationMode >= 0)   augmentFeatures(f,featureValues);  return featureValues;}  }
class C{  private void minimize(){  for (int i=0; i < (size() - 1); i++) {    GeneralNameInterface current=getGeneralNameInterface(i);    boolean remove1=false;    for (int j=i + 1; j < size(); j++) {      GeneralNameInterface subsequent=getGeneralNameInterface(j);switch (current.constrains(subsequent)) {case GeneralNameInterface.NAME_DIFF_TYPE:        continue;case GeneralNameInterface.NAME_MATCH:      remove1=true;    break;case GeneralNameInterface.NAME_NARROWS:  remove(j);j--;continue;case GeneralNameInterface.NAME_WIDENS:remove1=true;break;case GeneralNameInterface.NAME_SAME_TYPE:continue;}break;}if (remove1) {remove(i);i--;}}}  }
class C{  public void analyseCode(ClassScope enclosingClassScope){  if (this.ignoreFurtherInvestigation)   return;  try {    updateMaxFieldCount();    internalAnalyseCode(null,FlowInfo.initial(this.maxFieldCount));  } catch (  AbortType e) {    this.ignoreFurtherInvestigation=true;  }}  }
class C{  public static void initReadRange(final CFlags flags){  flags.registerOptional(CommonFlags.START_READ_ID,Long.class,"INT","inclusive lower bound on read id").setCategory(CommonFlagCategories.FILTERING);  flags.registerOptional(CommonFlags.END_READ_ID,Long.class,"INT","exclusive upper bound on read id").setCategory(CommonFlagCategories.FILTERING);}  }
class C{  public static boolean testAabPlane(double minX,double minY,double minZ,double maxX,double maxY,double maxZ,double a,double b,double c,double d){  double pX, pY, pZ, nX, nY, nZ;  if (a > 0.0) {    pX=maxX;    nX=minX;  } else {    pX=minX;    nX=maxX;  }  if (b > 0.0) {    pY=maxY;    nY=minY;  } else {    pY=minY;    nY=maxY;  }  if (c > 0.0) {    pZ=maxZ;    nZ=minZ;  } else {    pZ=minZ;    nZ=maxZ;  }  double distN=d + a * nX + b * nY + c * nZ;  double distP=d + a * pX + b * pY + c * pZ;  return distN <= 0.0 && distP >= 0.0;}  }
class C{  @Override public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  MessageOnlyLogFilter msgFilter=new MessageOnlyLogFilter();  logWrapper.setNext(msgFilter);  LogFragment logFragment=(LogFragment)getSupportFragmentManager().findFragmentById(R.id.log_fragment);  msgFilter.setNext(logFragment.getLogView());  Log.i(TAG,"Ready");}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(getAccessFlags());}  }
class C{  public AttributeCertificate toASN1Structure(){  return attrCert;}  }
class C{  protected void assertFileContent(String expectedContent,File actual) throws IOException {  String actualContent=new String(Files.readAllBytes(actual.toPath()),StandardCharsets.UTF_8);  Assert.assertEquals(expectedContent,actualContent);}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public static String toString(String value,String defaultValue){  return value == null || value.length() == 0 ? defaultValue : value;}  }
class C{  private void defineArrowButtons(UIDefaults d){  String c=PAINTER_PREFIX + "ArrowButtonPainter";  String p="ArrowButton";  d.put(p + ".States","Enabled,MouseOver,Disabled,Pressed");  d.put(p + "[Disabled].foreground",new ColorUIResource(0x9ba8cf));  d.put(p + "[Enabled].foreground",new ColorUIResource(0x5b7ea4));  d.put(p + "[Pressed].foreground",new ColorUIResource(0x134D8C));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(c,ArrowButtonPainter.Which.FOREGROUND_DISABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,ArrowButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[MouseOver].foregroundPainter",new LazyPainter(c,ArrowButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(c,ArrowButtonPainter.Which.FOREGROUND_PRESSED));}  }
class C{  public static boolean isLeadSurrogate(char char16){  return LEAD_SURROGATE_MIN_VALUE <= char16 && char16 <= LEAD_SURROGATE_MAX_VALUE;}  }
class C{  public static double[] convexHull(double[] pts,int len,float[] angles,int[] idx,int[] stack){  int plen=len / 2 - 1;  if (len < 6) {    throw new IllegalArgumentException("Input must have at least 3 points");  }  if (angles.length < plen || idx.length < plen || stack.length < len / 2) {    throw new IllegalArgumentException("Pre-allocated data structure too small");  }  int i0=0;  for (int i=2; i < len; i+=2) {    if (pts[i + 1] < pts[i0 + 1]) {      i0=i;    } else     if (pts[i + 1] == pts[i0 + 1]) {      i0=(pts[i] < pts[i0] ? i : i0);    }  }  for (int i=0, j=0; i < len; i+=2) {    if (i == i0)     continue;    angles[j]=(float)Math.atan2(pts[i + 1] - pts[i0 + 1],pts[i] - pts[i0]);    idx[j++]=i;  }  ArrayLib.sort(angles,idx,plen);  float angle=angles[0];  int ti=0, tj=idx[0];  for (int i=1; i < plen; i++) {    int j=idx[i];    if (angle == angles[i]) {      double x1=pts[tj] - pts[i0];      double y1=pts[tj + 1] - pts[i0 + 1];      double x2=pts[j] - pts[i0];      double y2=pts[j + 1] - pts[i0 + 1];      double d1=x1 * x1 + y1 * y1;      double d2=x2 * x2 + y2 * y2;      if (d1 >= d2) {        idx[i]=-1;      } else {        idx[ti]=-1;        angle=angles[i];        ti=i;        tj=j;      }    } else {      angle=angles[i];      ti=i;      tj=j;    }  }  int sp=0;  stack[sp++]=i0;  int j=0;  for (int k=0; k < 2; j++) {    if (idx[j] != -1) {      stack[sp++]=idx[j];      k++;    }  }  for (; j < plen; j++) {    if (idx[j] == -1)     continue;    while (isNonLeft(i0,stack[sp - 2],stack[sp - 1],idx[j],pts)) {      sp--;    }    stack[sp++]=idx[j];  }  double[] hull=new double[2 * sp];  for (int i=0; i < sp; i++) {    hull[2 * i]=pts[stack[i]];    hull[2 * i + 1]=pts[stack[i] + 1];  }  return hull;}  }
class C{  public void testTypicalWithClass(){  Instances result;  m_Instances.setClassIndex(1);  m_Filter=getFilter("^Nominal.*",false);  result=useFilter();  assertEquals(m_Instances.numAttributes() - 1,result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  public void removeAllSpringConfig(){  mSpringConfigMap.clear();}  }
class C{  public static boolean confirm(final Object... messages){  Sound.beepOnConfirmation();  return JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(LEnv.CURRENT_GUI_FRAME.get(),messages,"Confirmation",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);}  }
class C{  public void testLongMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",-1));  doc.add(newStringField("value","-1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",4));  doc.add(newStringField("value","4",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static boolean isAvailable(){  return proxy != null;}  }
class C{  @Override public void visitClassContext(ClassContext classContext){  JavaClass javaClass=classContext.getJavaClass();  Method[] methodList=javaClass.getMethods();  for (  Method method : methodList) {    if (method.getCode() == null) {      continue;    }    try {      analyzeMethod(classContext,method);    } catch (    MethodUnprofitableException e) {      assert true;    }catch (    CFGBuilderException e) {      String msg="Detector " + this.getClass().getName() + " caught exception while analyzing "+ javaClass.getClassName()+ "."+ method.getName()+ " : "+ method.getSignature();      bugReporter.logError(msg,e);    }catch (    DataflowAnalysisException e) {      String msg="Detector " + this.getClass().getName() + " caught exception while analyzing "+ javaClass.getClassName()+ "."+ method.getName()+ " : "+ method.getSignature();      bugReporter.logError(msg,e);    }  }}  }
class C{  public Model first(Context context){  Integer currentLimit=limit;  limit(1);  CPOrmCursor<Model> cursor=queryAsCursor(context);  if (cursor == null)   return null;  try {    if (cursor.moveToFirst()) {      Model inflate=cursor.inflate();      return inflate;    } else     return null;  }  finally {    cursor.close();    limit=currentLimit;  }}  }
class C{  public ReorgCPInstruction(Operator op,CPOperand in,CPOperand col,CPOperand desc,CPOperand ixret,CPOperand out,String opcode,String istr){  this(op,in,out,opcode,istr);  _col=col;  _desc=desc;  _ixret=ixret;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  public void provisioningFails(int reason){  if (NetworkUtils.getNetworkAccessType() == NetworkUtils.NETWORK_ACCESS_WIFI) {    mNetworkCnx.registerWifiDisablingListener();  }}  }
class C{  protected InlineComment_Impl(){  super();}  }
class C{  public static void permuteRBS(int[] asn,ArrayList<ArrayList<Gate>> repr_assignment,ArrayList<int[]> rbs_assignment){  rbs_assignment.add(asn.clone());  boolean complete=true;  for (int i=0; i < asn.length; ++i) {    if (asn[i] < repr_assignment.get(i).size() - 1) {      complete=false;    }  }  if (complete == true)   return;  asn[0]+=1;  for (int j=0; j < asn.length; ++j) {    if (asn[j] > repr_assignment.get(j).size() - 1) {      asn[j]=0;      asn[j + 1]++;    }  }  permuteRBS(asn,repr_assignment,rbs_assignment);}  }
class C{  public AudioData(IoBuffer data,boolean copy){  super(Type.STREAM_DATA);  if (copy) {    byte[] array=new byte[data.limit()];    data.mark();    data.get(array);    data.reset();    setData(array);  } else {    setData(data);  }}  }
class C{  public Company id(String id){  this.id=id;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.529 -0500",hash_original_method="7504CEF239C11FEA532F08720FD2042B",hash_generated_method="3EA76C656B8912C3A2A5543245302B75") public void onRegistrationDone(SipSession session,int duration){}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public long readUnsignedLongToLong(){  long result=shiftIntoLong(data,position,8);  position+=8;  if (result < 0) {    throw new IllegalArgumentException("Top bit not zero: " + result);  }  return result;}  }
class C{  public long lengthSquared(){  return x * x + y * y + z * z + w * w;}  }
class C{  private boolean uploadSegment(String title,ArrayList<Location> locations){  if (isCancelled()) {    return false;  }  try {    if (!SendMapsUtils.uploadSegment(mapId,title,locations,mapsClient,authToken,mapsGDataConverter)) {      Log.d(TAG,"Unable to upload track points");      return false;    }  } catch (  ParseException e) {    Log.d(TAG,"Unable to upload track points",e);    return false;  }catch (  HttpException e) {    Log.d(TAG,"Unable to upload track points",e);    return false;  }catch (  IOException e) {    Log.d(TAG,"Unable to upload track points",e);    return false;  }  return true;}  }
class C{  public void render(Graphics2D g2d){  if (g2d != oldG2d) {    defaultStroke=g2d.getStroke();    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);    oldG2d=g2d;  }  axes.render(g2d);  g2d.setColor(color);  g2d.setStroke(stroke);  g2d.drawPolyline(lineX,lineY,numPoints);  g2d.setStroke(defaultStroke);  if ((pickX[0] > axes.leftMargin) && (pickX[0] < (width - axes.rightMargin))) {    g2d.setColor(pickColor);    g2d.drawPolyline(pickX,pickY,2);  }}  }
class C{  private void CreateVMs(int datacenterId){  int numVM=linkDC.getHostList().size() * NetworkConstants.maxhostVM;  for (int i=0; i < numVM; i++) {    int vmid=i;    int mips=1;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=NetworkConstants.HOST_PEs / NetworkConstants.maxhostVM;    String vmm="Xen";    NetworkVm vm=new NetworkVm(vmid,getId(),mips,pesNumber,ram,bw,size,vmm,new NetworkCloudletSpaceSharedScheduler());    linkDC.processVmCreateNetwork(vm);    getVmList().add(vm);    getVmsToDatacentersMap().put(vmid,datacenterId);    getVmsCreatedList().add(VmList.getById(getVmList(),vmid));  }}  }
class C{  private void onChanged(){  if (isClean && parent != null) {    parent.markDirty();    isClean=false;  }}  }
class C{  public Set<StringBuilder> recommend(StringBuilder string){  final Set<StringBuilder> ret=new HashSet<StringBuilder>();  SortedSet<StringBuilder> t=this.dict.tailSet(string);  for (  final StringBuilder r : t) {    if (StringBuilderComparator.CASE_INSENSITIVE_ORDER.startsWith(r,string) && r.length() > string.length()) {      ret.add(r);    } else {      break;    }  }  string=reverse(string);  t=this.tcid.tailSet(string);  for (  final StringBuilder r : t) {    if (StringBuilderComparator.CASE_INSENSITIVE_ORDER.startsWith(r,string) && r.length() > string.length()) {      ret.add(reverse(r));    } else {      break;    }  }  return ret;}  }
class C{  private static void addLiquibaseScanPackages(){  System.setProperty("liquibase.scan.packages",Joiner.on(",").join("liquibase.change","liquibase.database","liquibase.parser","liquibase.precondition","liquibase.datatype","liquibase.serializer","liquibase.sqlgenerator","liquibase.executor","liquibase.snapshot","liquibase.logging","liquibase.diff","liquibase.structure","liquibase.structurecompare","liquibase.lockservice","liquibase.ext","liquibase.changelog"));}  }
class C{  public Tile(Sector sector,Level level){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (level == null) {    String msg=Logging.getMessage("nullValue.LevelIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.sector=sector;  this.level=level;  this.row=Tile.computeRow(sector.getDeltaLat(),sector.getMinLatitude(),Angle.NEG90);  this.column=Tile.computeColumn(sector.getDeltaLon(),sector.getMinLongitude(),Angle.NEG180);  this.cacheName=null;  this.tileKey=new TileKey(this);  this.path=null;}  }
class C{  public void test_setScaleILjava_math_RoundingMode(){  BigDecimal setScale1=new BigDecimal(2.323E102);  BigDecimal setScale2=setScale1.setScale(4);  assertTrue("the number 2.323E102 after setting scale is wrong",setScale2.scale() == 4);  assertTrue("the representation of the number 2.323E102 is wrong",setScale2.doubleValue() == 2.323E102);  setScale1=new BigDecimal("-1.253E-12");  setScale2=setScale1.setScale(17,RoundingMode.CEILING);  assertTrue("the scale of the number -1.253E-12 after setting scale is wrong",setScale2.scale() == 17);  assertTrue("the representation of the number -1.253E-12 after setting scale is wrong, " + setScale2.toString(),setScale2.toString().equals("-1.25300E-12"));  setScale1=new BigDecimal(value,4);  setScale2=setScale1.setScale(1,RoundingMode.CEILING);  assertTrue("the number 1234.5908 after setting scale to 1/RoundingMode.CEILING is wrong",setScale2.toString().equals("1234.6") && setScale2.scale() == 1);  BigDecimal setNeg=new BigDecimal(value.negate(),4);  setScale2=setNeg.setScale(1,RoundingMode.CEILING);  assertTrue("the number -1234.5908 after setting scale to 1/RoundingMode.CEILING is wrong",setScale2.toString().equals("-1234.5") && setScale2.scale() == 1);  setScale2=setNeg.setScale(1,RoundingMode.DOWN);  assertTrue("the number -1234.5908 after setting scale to 1/RoundingMode.DOWN is wrong",setScale2.toString().equals("-1234.5") && setScale2.scale() == 1);  setScale1=new BigDecimal(value,4);  setScale2=setScale1.setScale(1,RoundingMode.DOWN);  assertTrue("the number 1234.5908 after setting scale to 1/RoundingMode.DOWN is wrong",setScale2.toString().equals("1234.5") && setScale2.scale() == 1);  setScale2=setScale1.setScale(1,RoundingMode.FLOOR);  assertTrue("the number 1234.5908 after setting scale to 1/RoundingMode.FLOOR is wrong",setScale2.toString().equals("1234.5") && setScale2.scale() == 1);  setScale2=setNeg.setScale(1,RoundingMode.FLOOR);  assertTrue("the number -1234.5908 after setting scale to 1/RoundingMode.FLOOR is wrong",setScale2.toString().equals("-1234.6") && setScale2.scale() == 1);  setScale2=setScale1.setScale(3,RoundingMode.HALF_DOWN);  assertTrue("the number 1234.5908 after setting scale to 3/RoundingMode.HALF_DOWN is wrong",setScale2.toString().equals("1234.591") && setScale2.scale() == 3);  setScale1=new BigDecimal(new BigInteger("12345000"),5);  setScale2=setScale1.setScale(1,RoundingMode.HALF_DOWN);  assertTrue("the number 123.45908 after setting scale to 1/RoundingMode.HALF_DOWN is wrong",setScale2.toString().equals("123.4") && setScale2.scale() == 1);  setScale2=new BigDecimal("-1234.5000").setScale(0,RoundingMode.HALF_DOWN);  assertTrue("the number -1234.5908 after setting scale to 0/RoundingMode.HALF_DOWN is wrong",setScale2.toString().equals("-1234") && setScale2.scale() == 0);  setScale1=new BigDecimal(1.2345789D);  setScale2=setScale1.setScale(4,RoundingMode.HALF_EVEN);  assertTrue("the number 1.2345789 after setting scale to 4/RoundingMode.HALF_EVEN is wrong",setScale2.doubleValue() == 1.2346D && setScale2.scale() == 4);  setNeg=new BigDecimal(-1.2335789D);  setScale2=setNeg.setScale(2,RoundingMode.HALF_EVEN);  assertTrue("the number -1.2335789 after setting scale to 2/RoundingMode.HALF_EVEN is wrong",setScale2.doubleValue() == -1.23D && setScale2.scale() == 2);  setScale2=new BigDecimal("1.2345000").setScale(3,RoundingMode.HALF_EVEN);  assertTrue("the number 1.2345789 after setting scale to 3/RoundingMode.HALF_EVEN is wrong",setScale2.doubleValue() == 1.234D && setScale2.scale() == 3);  setScale2=new BigDecimal("-1.2345000").setScale(3,RoundingMode.HALF_EVEN);  assertTrue("the number -1.2335789 after setting scale to 3/RoundingMode.HALF_EVEN is wrong",setScale2.doubleValue() == -1.234D && setScale2.scale() == 3);  setScale1=new BigDecimal("134567.34650");  setScale2=setScale1.setScale(3,RoundingMode.HALF_UP);  assertTrue("the number 134567.34658 after setting scale to 3/RoundingMode.HALF_UP is wrong",setScale2.toString().equals("134567.347") && setScale2.scale() == 3);  setNeg=new BigDecimal("-1234.4567");  setScale2=setNeg.setScale(0,RoundingMode.HALF_UP);  assertTrue("the number -1234.4567 after setting scale to 0/RoundingMode.HALF_UP is wrong",setScale2.toString().equals("-1234") && setScale2.scale() == 0);  try {    setScale1.setScale(3,RoundingMode.UNNECESSARY);    fail("arithmetic Exception not caught for round unnecessary");  } catch (  ArithmeticException e) {  }  setScale1=new BigDecimal("100000.374");  setScale2=setScale1.setScale(2,RoundingMode.UP);  assertTrue("the number 100000.374 after setting scale to 2/RoundingMode.UP is wrong",setScale2.toString().equals("100000.38") && setScale2.scale() == 2);  setNeg=new BigDecimal(-134.34589D);  setScale2=setNeg.setScale(2,RoundingMode.UP);  assertTrue("the number -134.34589 after setting scale to 2/RoundingMode.UP is wrong",setScale2.doubleValue() == -134.35D && setScale2.scale() == 2);  try {    setScale2=setScale1.setScale(0,-123);    fail("IllegalArgumentException is not caught for wrong rounding mode");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public CharSet difference(CharSet that){  return new CharSet(doIntersection(that.doComplement()));}  }
class C{  public void infoSQL(String sql,String params,int count,long time){  if (!isEnabled(TraceSystem.INFO)) {    return;  }  StringBuilder buff=new StringBuilder(sql.length() + params.length() + 20);  buff.append(lineSeparator).append("/*SQL");  boolean space=false;  if (params.length() > 0) {    space=true;    buff.append(" l:").append(sql.length());  }  if (count > 0) {    space=true;    buff.append(" #:").append(count);  }  if (time > 0) {    space=true;    buff.append(" t:").append(time);  }  if (!space) {    buff.append(' ');  }  buff.append("*/").append(StringUtils.javaEncode(sql)).append(StringUtils.javaEncode(params)).append(';');  sql=buff.toString();  traceWriter.write(TraceSystem.INFO,module,sql,null);}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public static String generateConnectionCacheKey(String host,int port){  return (host == null || host.isEmpty()) ? null : host + HOST_PORT_SEPARATOR + port;}  }
class C{  public void accumulate(){  for (int i=0; i < iflen; i++)   iforces[i].init(this);  for (int i=0; i < sflen; i++)   sforces[i].init(this);  Iterator itemIter=items.iterator();  while (itemIter.hasNext()) {    ForceItem item=(ForceItem)itemIter.next();    item.force[0]=0.0f;    item.force[1]=0.0f;    for (int i=0; i < iflen; i++)     iforces[i].getForce(item);  }  Iterator springIter=springs.iterator();  while (springIter.hasNext()) {    Spring s=(Spring)springIter.next();    for (int i=0; i < sflen; i++) {      sforces[i].getForce(s);    }  }}  }
class C{  public void addExceptionsFromMember(InternalDistributedMember member,Set exceptions){  for (Iterator iter=exceptions.iterator(); iter.hasNext(); ) {    Exception ex=(Exception)iter.next();    if (ex instanceof CancelException) {      cacheExceptions.add(member);    } else     if (ex instanceof RegionDestroyedException) {      String r=((RegionDestroyedException)ex).getRegionFullPath();      Set<InternalDistributedMember> members=regionExceptions.get(r);      if (members == null) {        members=new HashSet();        regionExceptions.put(r,members);      }      members.add(member);    } else {      List el=(List)this.fatalExceptions.get(member);      if (el == null) {        el=new ArrayList(2);        this.fatalExceptions.put(member,el);      }      el.add(ex);    }  }}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  private void emitClear(String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getClearName(fieldName));  builder.append("() {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".clear();\n");  builder.append("    }\n\n");}  }
class C{  public Iterator<E> iterator(){  return new CompactHashIterator<E>();}  }
class C{  public byte[] unwrap(byte[] incoming,int offset,int len) throws SaslException {  if (completed) {    throw new SaslException("EXTERNAL has no supported QOP");  } else {    throw new IllegalStateException("EXTERNAL authentication Not completed");  }}  }
class C{  public void deltaNeutralValidation(int reqId,UnderComp underComp){  _log.debug("deltaNeutralValidation: " + reqId + " "+ underComp.toString());}  }
class C{  public void test_unwrap_ByteBuffer$ByteBuffer_05(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer[] bbd={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.unwrap(bbs,bbd);    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception ex) {    fail("Unexpected exception: " + ex);  }}  }
class C{  public void projectionChanged(ProjectionEvent e){  try {    getData();  } catch (  Exception ee) {    logger.warning("Got exception " + ee);    ee.printStackTrace();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.LABELLED_STATEMENT__NAME:    return getName();case N4JSPackage.LABELLED_STATEMENT__STATEMENT:  return getStatement();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.289 -0500",hash_original_method="9E74C322CF79FFEBE378AFAB98D56D96",hash_generated_method="AD43DA09B8F6BB6058A22755BDBA989F") public boolean isNaN(){  return isNaN(value);}  }
class C{  private void changeTitle(String newPage){  eezeFrame.setTitle("Eeze:  " + html.getDocumentTitle() + "  ("+ newPage+ ")");}  }
class C{  public void addMigratingInVm(Vm vm){  vm.setInMigration(true);  if (!getVmsMigratingIn().contains(vm)) {    if (getStorage() < vm.getSize()) {      Log.printConcatLine("[VmScheduler.addMigratingInVm] Allocation of VM #",vm.getId()," to Host #",getId()," failed by storage");      System.exit(0);    }    if (!getRamProvisioner().allocateRamForVm(vm,vm.getCurrentRequestedRam())) {      Log.printConcatLine("[VmScheduler.addMigratingInVm] Allocation of VM #",vm.getId()," to Host #",getId()," failed by RAM");      System.exit(0);    }    if (!getBwProvisioner().allocateBwForVm(vm,vm.getCurrentRequestedBw())) {      Log.printLine("[VmScheduler.addMigratingInVm] Allocation of VM #" + vm.getId() + " to Host #"+ getId()+ " failed by BW");      System.exit(0);    }    getVmScheduler().getVmsMigratingIn().add(vm.getUid());    if (!getVmScheduler().allocatePesForVm(vm,vm.getCurrentRequestedMips())) {      Log.printLine("[VmScheduler.addMigratingInVm] Allocation of VM #" + vm.getId() + " to Host #"+ getId()+ " failed by MIPS");      System.exit(0);    }    setStorage(getStorage() - vm.getSize());    getVmsMigratingIn().add(vm);    getVmList().add(vm);    updateVmsProcessing(CloudSim.clock());    vm.getHost().updateVmsProcessing(CloudSim.clock());  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.STRING_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public String toString(){  return "null";}  }
class C{  @Override public void registerMethodSubstitution(Class<?> substituteDeclaringClass,String name,Type... argumentTypes){  registerMethodSubstitution(substituteDeclaringClass,name,name,argumentTypes);}  }
class C{  private LogFile startNewLogFile(long seqno) throws ReplicatorException, IOException, InterruptedException {  String logFileName=getDataFileName(fileIndex);  LogFile dataFile=new LogFile(logDir,logFileName);  dataFile.setBufferSize(bufferSize);  if (dataFile.getFile().exists()) {    throw new THLException("New log file exists already: " + dataFile.getFile().getName());  }  dataFile.create(seqno);  index.addNewFile(seqno,logFileName);  return dataFile;}  }
class C{  public static <A>boolean totalInclusion(final Iterator<A> small,final Set<A> large){  while (small.hasNext()) {    if (!large.contains(small.next()))     return false;  }  return true;}  }
class C{  public static Object invoke(Object object,String methodName,Object[] parameters){  try {    Class[] classTypes=new Class[parameters.length];    for (int i=0; i < classTypes.length; i++) {      classTypes[i]=parameters[i].getClass();    }    Method method=object.getClass().getMethod(methodName,classTypes);    return method.invoke(object,parameters);  } catch (  Throwable t) {    return InvokerHelper.invokeMethod(object,methodName,parameters);  }}  }
class C{  public static void main(String[] args) throws IOException {  ParseSinaXmlData parser=new ParseSinaXmlData();  parser.buildRawText("res/sina_data/alldata.txt","res/sina_data/SinaRawText.txt");}  }
class C{  private List<Volume> createRpVolumes(String volumeName,int numTargets,ProtectionSet protectionSet,boolean isRpVPlex){  List<Volume> volumes=new ArrayList<Volume>();  StringSet associatedVolumes=new StringSet();  associatedVolumes.add("associatedVol1");  StorageSystem storageSystem=null;  if (isRpVPlex) {    storageSystem=createStorageSystem(true);  } else {    storageSystem=createStorageSystem(false);  }  String rsetName="RSet-" + volumeName;  Volume sourceVolume=new Volume();  URI sourceVolumeURI=URIUtil.createId(Volume.class);  volumes.add(sourceVolume);  sourceVolume.setId(sourceVolumeURI);  sourceVolume.setLabel(volumeName);  sourceVolume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());  sourceVolume.setRSetName(rsetName);  sourceVolume.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));  sourceVolume.setStorageController(storageSystem.getId());  if (isRpVPlex) {    sourceVolume.setAssociatedVolumes(associatedVolumes);    sourceVolume.setNativeId("/clusters/cluster-1/virtual-volumes/device_V000195701573-01E7A_vol");    BlockConsistencyGroup sourceVolumeCg=createBlockConsistencyGroup(sourceVolume.getLabel() + "-CG",storageSystem.getId(),Types.VPLEX.name(),true);    addVolumeToBlockConsistencyGroup(sourceVolumeCg.getId(),sourceVolume);    rpVplexVolumeToCgMapping.put(sourceVolumeURI,sourceVolumeCg.getId());  } else {    rpVolumeURIs.add(sourceVolumeURI);  }  _dbClient.createObject(sourceVolume);  Volume sourceVolumeJournal=new Volume();  URI sourceVolumeJournalURI=URIUtil.createId(Volume.class);  volumes.add(sourceVolumeJournal);  sourceVolumeJournal.setId(sourceVolumeJournalURI);  sourceVolumeJournal.setLabel(volumeName + RP_SRC_JOURNAL_APPEND);  sourceVolumeJournal.setPersonality(Volume.PersonalityTypes.METADATA.toString());  sourceVolumeJournal.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));  sourceVolumeJournal.setStorageController(storageSystem.getId());  if (isRpVPlex) {    sourceVolumeJournal.setAssociatedVolumes(associatedVolumes);    sourceVolumeJournal.setNativeId("/clusters/cluster-1/virtual-volumes/device_V000195701573-01E7B_vol");    BlockConsistencyGroup sourceVolumeJournalCg=createBlockConsistencyGroup(sourceVolumeJournal.getLabel() + "-CG",storageSystem.getId(),Types.VPLEX.name(),true);    addVolumeToBlockConsistencyGroup(sourceVolumeJournalCg.getId(),sourceVolumeJournal);    rpVplexVolumeToCgMapping.put(sourceVolumeJournalURI,sourceVolumeJournalCg.getId());  } else {    rpVolumeURIs.add(sourceVolumeJournalURI);  }  _dbClient.createObject(sourceVolumeJournal);  for (int i=1; i <= numTargets; i++) {    Volume sourceVolumeTarget=new Volume();    URI sourceVolumeTargetURI=URIUtil.createId(Volume.class);    volumes.add(sourceVolumeTarget);    sourceVolumeTarget.setId(sourceVolumeTargetURI);    sourceVolumeTarget.setLabel(volumeName + RP_TGT_APPEND + "vArray"+ i);    sourceVolumeTarget.setPersonality(Volume.PersonalityTypes.TARGET.toString());    sourceVolumeTarget.setRSetName(rsetName);    sourceVolumeTarget.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));    sourceVolumeTarget.setStorageController(storageSystem.getId());    if (isRpVPlex) {      sourceVolumeTarget.setAssociatedVolumes(associatedVolumes);      sourceVolumeTarget.setNativeId("/clusters/cluster-2/virtual-volumes/device_V000195701573-01E7C_vol" + i);      BlockConsistencyGroup sourceVolumeTargetCg=createBlockConsistencyGroup(sourceVolumeTarget.getLabel() + "-CG",storageSystem.getId(),Types.VPLEX.name(),true);      addVolumeToBlockConsistencyGroup(sourceVolumeTargetCg.getId(),sourceVolumeTarget);      rpVplexVolumeToCgMapping.put(sourceVolumeTargetURI,sourceVolumeTargetCg.getId());    } else {      rpVolumeURIs.add(sourceVolumeTargetURI);    }    _dbClient.createObject(sourceVolumeTarget);    Volume sourceVolumeTargetJournal=new Volume();    URI sourceVolumeTargetJournalURI=URIUtil.createId(Volume.class);    volumes.add(sourceVolumeTargetJournal);    sourceVolumeTargetJournal.setId(sourceVolumeTargetJournalURI);    sourceVolumeTargetJournal.setLabel(volumeName + RP_TGT_JOURNAL_APPEND + "vArray"+ i);    sourceVolumeTargetJournal.setPersonality(Volume.PersonalityTypes.METADATA.toString());    sourceVolumeTargetJournal.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));    sourceVolumeTargetJournal.setStorageController(storageSystem.getId());    if (isRpVPlex) {      sourceVolumeTargetJournal.setAssociatedVolumes(associatedVolumes);      sourceVolumeTargetJournal.setNativeId("/clusters/cluster-2/virtual-volumes/device_V000195701573-01ED_vol" + i);      BlockConsistencyGroup sourceVolumeTargetJournalCg=createBlockConsistencyGroup(sourceVolumeTargetJournal.getLabel() + "-CG",storageSystem.getId(),Types.VPLEX.name(),true);      addVolumeToBlockConsistencyGroup(sourceVolumeTargetJournalCg.getId(),sourceVolumeTargetJournal);      rpVplexVolumeToCgMapping.put(sourceVolumeTargetJournalURI,sourceVolumeTargetJournalCg.getId());    } else {      rpVolumeURIs.add(sourceVolumeTargetJournalURI);    }    _dbClient.createObject(sourceVolumeTargetJournal);  }  return volumes;}  }
class C{  public ResultFileSeedMerger(){  super();}  }
class C{  public void deleteObservers(){  observers.clear();}  }
class C{  public URI currentId(){  TenantResponse tenant=current();  return tenant != null ? tenant.getTenant() : null;}  }
class C{  public Map<ExportMask,ExportGroup> searchDbForExportMasks(StorageSystem array,List<Initiator> initiators,boolean empty){  Map<ExportMask,ExportGroup> returnedMasks=new HashMap<ExportMask,ExportGroup>();  Map<URI,ExportGroup> exportGroups=new HashMap<URI,ExportGroup>();  for (  Initiator initiator : initiators) {    List<ExportGroup> groups=ExportUtils.getInitiatorExportGroups(initiator,_dbClient);    for (    ExportGroup group : groups) {      if (!exportGroups.containsKey(group.getId())) {        exportGroups.put(group.getId(),group);      }    }  }  for (  ExportGroup group : exportGroups.values()) {    List<ExportMask> masks=ExportMaskUtils.getExportMasks(_dbClient,group,array.getId());    for (    ExportMask mask : masks) {      if (mask.getInactive() || mask.getCreatedBySystem() == false) {        continue;      }      if (empty == false || (group.getVolumes() == null || group.getVolumes().isEmpty())) {        returnedMasks.put(mask,group);      }    }  }  return returnedMasks;}  }
class C{  public void close(){  mInterrupted=true;  interrupt();  CloseableUtils.tryToClose(mDatagramConnection);}  }
class C{  public LinuxPRNGSecureRandomProvider(){  super("LinuxPRNG",1.0,"A Linux-specific random number provider that uses" + " /dev/urandom");  put("SecureRandom.SHA1PRNG",LinuxPRNGSecureRandom.class.getName());  put("SecureRandom.SHA1PRNG ImplementedIn","Software");}  }
class C{  public static Element addElement(final Element parent,final String name){  final Element ele=parent.getOwnerDocument().createElement(name);  parent.appendChild(ele);  return ele;}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  fireTableDataChanged();}  }
class C{  public StringMap(Map<String,String> source){  super(source);}  }
class C{  public String cleanText(String text_){  int start=0;  int end=0;  int textLen=text_.length();  StringBuilder finalCleanText=new StringBuilder();  while (end < textLen) {    end=Math.min(start + REGEX_TEXT_LIMIT,textLen);    String chunk=text_.substring(start,end);    String cleanText=StringCleanup.normalizeToAscii(chunk);    if (this.removeRepeatPunctuation)     cleanText=replaceDuplicatePunctuation(cleanText);    if (this.replaceUnderscores)     cleanText=replaceUnderscores(cleanText);    if (this.replaceControlSequence)     cleanText=replaceControlSequence(cleanText);    if (this.replaceAdHocMarkup)     cleanText=replaceTildesAndStars(cleanText);    if (this.replaceBogusApostrophe)     cleanText=replaceMisusedApostropheSymbol(cleanText);    finalCleanText.append(cleanText);    start=end;  }  logger.debug(NAME + ".cleanText(): original text: \n'" + text_+ "';\n new text: \n'"+ finalCleanText+ "'.");  return (finalCleanText.toString()).trim();}  }
class C{  private void initialize(){  this.setName("ExtensionAutoUpdate");  this.setOrder(1);  this.downloadManager=new DownloadManager(Model.getSingleton().getOptionsParam().getConnectionParam());  this.downloadManager.start();  this.getPreviousVersionInfo();}  }
class C{  public static void resetUIComponents(UIComponent rootComponent,Set<String> componentIds){  List<UIComponent> children=rootComponent.getChildren();  for (  UIComponent child : children) {    if (componentIds.contains(child.getId())) {      child.getParent().getChildren().remove(child);    } else {      resetUIComponents(child,componentIds);    }  }}  }
class C{  public void start(BundleContext context) throws Exception {  super.start(context);}  }
class C{  public static Resource createPath(Path path,Model model){  if (path instanceof P_Alt) {    Resource result=model.createResource();    RDFList list=model.createList(Arrays.asList(new RDFNode[]{createPath(((P_Alt)path).getLeft(),model),createPath(((P_Alt)path).getRight(),model)}).iterator());    result.addProperty(SH.alternativePath,list);    return result;  } else   if (path instanceof P_Inverse) {    Resource result=model.createResource();    result.addProperty(SH.inversePath,createPath(((P_Inverse)path).getSubPath(),model));    return result;  } else   if (path instanceof P_Link) {    return (Resource)model.asRDFNode(((P_Link)path).getNode());  } else   if (path instanceof P_OneOrMore1 || path instanceof P_OneOrMoreN) {    Resource result=model.createResource();    result.addProperty(SH.oneOrMorePath,createPath(((P_Path1)path).getSubPath(),model));    return result;  }  if (path instanceof P_Seq) {    return model.createList(Arrays.asList(new RDFNode[]{createPath(((P_Seq)path).getLeft(),model),createPath(((P_Seq)path).getRight(),model)}).iterator());  } else   if (path instanceof P_ZeroOrMore1 || path instanceof P_ZeroOrMoreN) {    Resource result=model.createResource();    result.addProperty(SH.zeroOrMorePath,createPath(((P_Path1)path).getSubPath(),model));    return result;  } else   if (path instanceof P_ZeroOrOne) {    Resource result=model.createResource();    result.addProperty(SH.zeroOrOnePath,createPath(((P_Path1)path).getSubPath(),model));    return result;  } else {    throw new IllegalArgumentException("Path element not supported by SHACL syntax: " + path);  }}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (!(params instanceof KeyParameter)) {    throw new IllegalArgumentException("invalid parameter passed to DESede init - " + params.getClass().getName());  }  byte[] keyMaster=((KeyParameter)params).getKey();  if (keyMaster.length != 24 && keyMaster.length != 16) {    throw new IllegalArgumentException("key size must be 16 or 24 bytes.");  }  this.forEncryption=encrypting;  byte[] key1=new byte[8];  System.arraycopy(keyMaster,0,key1,0,key1.length);  workingKey1=generateWorkingKey(encrypting,key1);  byte[] key2=new byte[8];  System.arraycopy(keyMaster,8,key2,0,key2.length);  workingKey2=generateWorkingKey(!encrypting,key2);  if (keyMaster.length == 24) {    byte[] key3=new byte[8];    System.arraycopy(keyMaster,16,key3,0,key3.length);    workingKey3=generateWorkingKey(encrypting,key3);  } else {    workingKey3=workingKey1;  }}  }
class C{  public static boolean containsSameByClass(Collection<? extends AnnotationMirror> c,Class<? extends Annotation> anno){  return getAnnotationByClass(c,anno) != null;}  }
class C{  public BackpropNetworkNode(final NetworkPanel networkPanel,final BackpropNetwork group){  super(networkPanel,group);  setContextMenu();}  }
class C{  private void writeName(OutputNode node) throws Exception {  String prefix=node.getPrefix(verbose);  String name=node.getName();  if (name != null) {    writer.writeStart(name,prefix);  }}  }
class C{  public final void removeFromTiers(String var){  tierMap.remove(var);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  return builder.build();}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies/{fcid}/resynchronize") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList resynchronizeConsistencyGroupFullCopy(@PathParam("id") URI cgURI,@PathParam("fcid") URI fullCopyURI){  List<Volume> cgVolumes=verifyCGForFullCopyRequest(cgURI);  if (isIdEmbeddedInURL(cgURI)) {    validateVolumeNotPartOfApplication(cgVolumes,FULL_COPY);  }  URI fcSourceURI=verifyFullCopyForCopyRequest(fullCopyURI,cgVolumes);  return getFullCopyManager().resynchronizeFullCopy(fcSourceURI,fullCopyURI);}  }
class C{  public static void attribute(String name,byte[] value){  openAttribute(name);  Log.write(value);  closeAttribute();}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  paintTabbedPaneTabBorder(context,g,x,y,w,h,tabIndex);}  }
class C{  public int createBinomial(final int n,final double p){  double value=p;  final StringBuilder bits=new StringBuilder(64);  double bitValue=0.5d;  while (value > 0) {    if (value >= bitValue) {      bits.append('1');      value-=bitValue;    } else {      bits.append('0');    }    bitValue/=2;  }  final BitString pBits=new BitString(bits.toString());  int trials=n;  int totalSuccesses=0;  int pIndex=pBits.getLength() - 1;  while (trials > 0 && pIndex >= 0) {    final BitString bs=new BitString(trials,generator);    final int successes=bs.countSetBits();    trials-=successes;    if (pBits.getBit(pIndex)) {      totalSuccesses+=successes;    }    --pIndex;  }  return totalSuccesses;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.796 -0500",hash_original_method="530B75A5B8DF2D5033AF3BE4C3DEE1C2",hash_generated_method="C5553EAD5AC36701780B043AC98912EE") private E advance(){  lastRet=nextNode;  E x=nextItem;  Node<E> pred, p;  if (nextNode == null) {    p=first();    pred=null;  } else {    pred=nextNode;    p=succ(nextNode);  }  for (; ; ) {    if (p == null) {      nextNode=null;      nextItem=null;      return x;    }    E item=p.item;    if (item != null) {      nextNode=p;      nextItem=item;      return x;    } else {      Node<E> next=succ(p);      if (pred != null && next != null)       pred.casNext(p,next);      p=next;    }  }}  }
class C{  public void refreshValues(){  rebuild();}  }
class C{  @Override public void install(Component component){  super.install(component);}  }
class C{  public SourceInfo sourceInfo(){  return sourceInfo;}  }
class C{  public void readData(DataInput din) throws IOException {  int byteCount=din.readUnsignedByte();  records=new RecordRequest[0];  for (int offset=1; offset + 7 < byteCount; ) {    int function=din.readUnsignedByte();    int file=din.readUnsignedShort();    int record=din.readUnsignedShort();    int count=din.readUnsignedShort();    offset+=7;    if (function != 6) {      throw new IOException();    }    if (record < 0 || record >= 10000) {      throw new IOException();    }    if (count < 0 || count >= 126) {      throw new IOException();    }    short registers[]=new short[count];    for (int j=0; j < count; j++) {      registers[j]=din.readShort();      offset+=2;    }    RecordRequest dummy[]=new RecordRequest[records.length + 1];    if (records.length > 0) {      System.arraycopy(records,0,dummy,0,records.length);    }    records=dummy;    records[records.length - 1]=new RecordRequest(file,record,registers);  }}  }
class C{  public static void writeToFile(String content,File dstFile) throws IOException {  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));  bufferedWriter.write(content);  bufferedWriter.close();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:13.248 -0500",hash_original_method="18020B40E6468EB970BF7E1035466368",hash_generated_method="9031960A6529FC97E6B8E086CB3ADC55") Field(Field orig){  this(orig.declaringClass,orig.type,orig.name,orig.slot);  if (orig.flag) {    this.flag=true;  }}  }
class C{  public ChangeNotes createFromIndexedChange(Change change){  return new ChangeNotes(args,change);}  }
class C{  public ConvertDialog(){  try {    jbInit();    fSelectFile.addItem("D:\\adempiere\\db\\database\\create\\views.sql");    fSelectFile.addItem("D:\\adempiere\\db\\database\\create\\temporary.sql");    fSelectFile.addItem("D:\\adempiere\\db\\database\\create\\sequences.sql");    fSelectFile.addItem("D:\\adempiere\\db\\database\\create\\adempiere.sql");    fConnect.setValue(CConnection.get(Database.DB_POSTGRESQL,"linux",DB_PostgreSQL.DEFAULT_PORT,"adempiere"));    fTarget.setSelectedItem(Database.DB_POSTGRESQL);    fExecute.setSelected(true);    cmd_execute();    pack();    setVisible(true);  } catch (  Exception e) {    System.err.println(e);  }}  }
class C{  public static MersenneTwisterFast primeGenerator(MersenneTwisterFast generator){  for (int i=0; i < 624 * 2 + 1; i++)   generator.nextInt();  return generator;}  }
class C{  protected boolean findOptimalPointOnLine(int i1,double alpha1,double alpha1Star,double C1,int i2,double alpha2,double alpha2Star,double C2,double gamma,double eta,double deltaPhi){  if (eta <= 0) {    return false;  }  boolean case1=false;  boolean case2=false;  boolean case3=false;  boolean case4=false;  boolean finished=false;  while (!finished) {    if ((case1 == false) && (alpha1 > 0 || (alpha1Star == 0 && deltaPhi > 0)) && (alpha2 > 0 || (alpha2Star == 0 && deltaPhi < 0))) {      double L=Math.max(0,gamma - C1);      double H=Math.min(C2,gamma);      if (L < H) {        double a2=alpha2 - deltaPhi / eta;        a2=Math.min(a2,H);        a2=Math.max(L,a2);        if (a2 > C2 - m_Del * C2) {          a2=C2;        } else         if (a2 <= m_Del * C2) {          a2=0;        }        double a1=alpha1 - (a2 - alpha2);        if (a1 > C1 - m_Del * C1) {          a1=C1;        } else         if (a1 <= m_Del * C1) {          a1=0;        }        if (Math.abs(alpha1 - a1) > m_eps) {          deltaPhi+=eta * (a2 - alpha2);          alpha1=a1;          alpha2=a2;        }      } else {        finished=true;      }      case1=true;    } else     if ((case2 == false) && (alpha1 > 0 || (alpha1Star == 0 && deltaPhi > 2 * m_epsilon)) && (alpha2Star > 0 || (alpha2 == 0 && deltaPhi > 2 * m_epsilon))) {      double L=Math.max(0,-gamma);      double H=Math.min(C2,-gamma + C1);      if (L < H) {        double a2=alpha2Star + (deltaPhi - 2 * m_epsilon) / eta;        a2=Math.min(a2,H);        a2=Math.max(L,a2);        if (a2 > C2 - m_Del * C2) {          a2=C2;        } else         if (a2 <= m_Del * C2) {          a2=0;        }        double a1=alpha1 + (a2 - alpha2Star);        if (a1 > C1 - m_Del * C1) {          a1=C1;        } else         if (a1 <= m_Del * C1) {          a1=0;        }        if (Math.abs(alpha1 - a1) > m_eps) {          deltaPhi+=eta * (-a2 + alpha2Star);          alpha1=a1;          alpha2Star=a2;        }      } else {        finished=true;      }      case2=true;    } else     if ((case3 == false) && (alpha1Star > 0 || (alpha1 == 0 && deltaPhi < -2 * m_epsilon)) && (alpha2 > 0 || (alpha2Star == 0 && deltaPhi < -2 * m_epsilon))) {      double L=Math.max(0,gamma);      double H=Math.min(C2,C1 + gamma);      if (L < H) {        double a2=alpha2 - (deltaPhi + 2 * m_epsilon) / eta;        a2=Math.min(a2,H);        a2=Math.max(L,a2);        if (a2 > C2 - m_Del * C2) {          a2=C2;        } else         if (a2 <= m_Del * C2) {          a2=0;        }        double a1=alpha1Star + (a2 - alpha2);        if (a1 > C1 - m_Del * C1) {          a1=C1;        } else         if (a1 <= m_Del * C1) {          a1=0;        }        if (Math.abs(alpha1Star - a1) > m_eps) {          deltaPhi+=eta * (a2 - alpha2);          alpha1Star=a1;          alpha2=a2;        }      } else {        finished=true;      }      case3=true;    } else     if ((case4 == false) && (alpha1Star > 0 || (alpha1 == 0 && deltaPhi < 0)) && (alpha2Star > 0 || (alpha2 == 0 && deltaPhi > 0))) {      double L=Math.max(0,-gamma - C1);      double H=Math.min(C2,-gamma);      if (L < H) {        double a2=alpha2Star + deltaPhi / eta;        a2=Math.min(a2,H);        a2=Math.max(L,a2);        if (a2 > C2 - m_Del * C2) {          a2=C2;        } else         if (a2 <= m_Del * C2) {          a2=0;        }        double a1=alpha1Star - (a2 - alpha2Star);        if (a1 > C1 - m_Del * C1) {          a1=C1;        } else         if (a1 <= m_Del * C1) {          a1=0;        }        if (Math.abs(alpha1Star - a1) > m_eps) {          deltaPhi+=eta * (-a2 + alpha2Star);          alpha1Star=a1;          alpha2Star=a2;        }      } else {        finished=true;      }      case4=true;    } else {      finished=true;    }  }  if (Math.abs(alpha1 - m_alpha[i1]) > m_eps || Math.abs(alpha1Star - m_alphaStar[i1]) > m_eps || Math.abs(alpha2 - m_alpha[i2]) > m_eps || Math.abs(alpha2Star - m_alphaStar[i2]) > m_eps) {    if (alpha1 > C1 - m_Del * C1) {      alpha1=C1;    } else     if (alpha1 <= m_Del * C1) {      alpha1=0;    }    if (alpha1Star > C1 - m_Del * C1) {      alpha1Star=C1;    } else     if (alpha1Star <= m_Del * C1) {      alpha1Star=0;    }    if (alpha2 > C2 - m_Del * C2) {      alpha2=C2;    } else     if (alpha2 <= m_Del * C2) {      alpha2=0;    }    if (alpha2Star > C2 - m_Del * C2) {      alpha2Star=C2;    } else     if (alpha2Star <= m_Del * C2) {      alpha2Star=0;    }    m_alpha[i1]=alpha1;    m_alphaStar[i1]=alpha1Star;    m_alpha[i2]=alpha2;    m_alphaStar[i2]=alpha2Star;    if (alpha1 != 0 || alpha1Star != 0) {      if (!m_supportVectors.contains(i1)) {        m_supportVectors.insert(i1);      }    } else {      m_supportVectors.delete(i1);    }    if (alpha2 != 0 || alpha2Star != 0) {      if (!m_supportVectors.contains(i2)) {        m_supportVectors.insert(i2);      }    } else {      m_supportVectors.delete(i2);    }    return true;  }  return false;}  }
class C{  public static int compareVersionNumbers(@Nullable String v1,@Nullable String v2){  if (v1 == null && v2 == null)   return 0;  if (v1 == null)   return -1;  if (v2 == null)   return 1;  String[] part1=v1.split("[\\.\\_\\-]");  String[] part2=v2.split("[\\.\\_\\-]");  int idx=0;  for (; idx < part1.length && idx < part2.length; idx++) {    String p1=part1[idx];    String p2=part2[idx];    int cmp=(p1.matches("\\d+") && p2.matches("\\d+")) ? Integer.valueOf(p1).compareTo(Integer.valueOf(p2)) : p1.compareTo(p2);    if (cmp != 0)     return cmp;  }  if (part1.length == part2.length)   return 0; else   return part1.length > idx ? 1 : -1;}  }
class C{  public int numProperties(){  if (auxillary != null)   return auxillary.numProperties();  return getMethods.size();}  }
class C{  @Override protected Object execute() throws Exception {  init();  if (!checkifEnabledRemotes()) {    return null;  }  if (projectId == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No projectID has been set");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  UserProjectReference project=getMultiRemoteCodenvy().getProjectReference(projectId);  if (project == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No matching project for identifier '").a(projectId).a("'.");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  final ProjectReference projectToPull=project.getInnerReference();  File dest;  if (directory == null) {    dest=new File(projectToPull.name());  } else {    File expectedDirectory=new File(directory);    if (!expectedDirectory.exists()) {      System.out.println(String.format("Cannot pull project %s into %s as directory does not exist",projectToPull.name(),directory));      return null;    }    dest=new File(expectedDirectory,projectToPull.name());  }  if (!override && dest.exists()) {    System.out.println(String.format("Cannot pull project %s into %s as directory already exists. Use --override option",projectToPull.name(),dest.getAbsolutePath()));    return null;  }  System.out.println(String.format("Cloning project %s into %s",projectToPull.name(),dest.getAbsolutePath()));  pull(project,dest);  getMultiRemoteCodenvy().storeMetadata(project,dest);  if (override) {    override(project,dest);  }  return null;}  }
class C{  @Override public boolean isAssociative(){  return true;}  }
class C{  private void resetState(){  if (mCurrentCallEvent != null && mCurrentCallEvent.getCallEventType() == CallEventType.CALL) {    mCurrentCallEvent.end();    broadcast(mCurrentCallEvent);  }  mCurrentCallEvent=null;  mTalkgroup=null;  broadcast(ChangedAttribute.TO_TALKGROUP);  mTalkgroupAlias=null;  broadcast(ChangedAttribute.TO_TALKGROUP_ALIAS);  mDescription=null;  broadcast(ChangedAttribute.DESCRIPTION);}  }
class C{  public RussianAnalyzer(CharArraySet stopwords,CharArraySet stemExclusionSet){  super(stopwords);  this.stemExclusionSet=CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionSet));}  }
class C{  public void cursor(Coords coords){  if ((coords == null) || game.getBoard().contains(coords)) {    if ((getLastCursor() == null) || (coords == null) || !coords.equals(getLastCursor())) {      setLastCursor(coords);      moveCursor(cursorSprite,coords);      moveCursor(firstLOSSprite,null);      moveCursor(secondLOSSprite,null);      processBoardViewEvent(new BoardViewEvent(this,coords,null,BoardViewEvent.BOARD_HEX_CURSOR,0));    } else {      setLastCursor(coords);    }  }}  }
class C{  public void load() throws CouldntLoadDataException {  if (isLoaded()) {    return;  }  try {    m_function.load();    convertData();  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  protected void cancelPendingJoins(InternalDistributedMember id){  try {    this.joinProcessor.pauseHandling();    removePendingJoins(id);    this.joinProcessor.abort(id);  }  finally {    AdminWaiters.cancelWaiters(id);    this.joinProcessor.resumeHandling();  }}  }
class C{  private boolean performAction(WebView webView,String code){  final int resultId=mResultIdCounter.getAndIncrement();  final String url=String.format(JAVASCRIPT_ACTION_TEMPLATE,mInterfaceName,resultId,code);  webView.loadUrl(url);  return getResultAndClear(resultId);}  }
class C{  public static ExecutorService newPooledExecutor(int newPoolSize,String poolName,boolean useDaemonThreads){  return new ThreadPoolExecutor(newPoolSize,newPoolSize,0L,TimeUnit.MILLISECONDS,new SynchronousQueue<>(),new CollectionsThreadFactory(poolName,useDaemonThreads),new ThreadPoolExecutor.CallerRunsPolicy());}  }
class C{  public void initializeDefinition(String minValue,String maxValue,String increment,boolean isCycled,String cacheSize,String lastValue){  m_minimum=Long.parseLong(minValue);  m_maximum=Long.parseLong(maxValue);  m_increment=Long.parseLong(increment);  m_isCycled=isCycled;  m_cached=Long.parseLong(cacheSize);  m_current=Long.parseLong(lastValue);  s_logger.log(Level.FINEST,toString());}  }
class C{  public boolean isGradleSdk(@Nullable VirtualFile... files){  if (files == null) {    return false;  }  File[] arg=new File[files.length];  for (int i=0; i < files.length; i++) {    arg[i]=new File(files[i].getPath());  }  return isGradleSdk(arg);}  }
class C{  public void testBug27915() throws Exception {  createTable("testBug27915","(field1 int not null primary key auto_increment, field2 int)");  DatabaseMetaData dbmd=this.conn.getMetaData();  this.rs=dbmd.getColumns(this.conn.getCatalog(),null,"testBug27915","%");  this.rs.next();  checkBug27915();  if (versionMeetsMinimum(5,0)) {    this.rs=getConnectionWithProps("useInformationSchema=true").getMetaData().getColumns(this.conn.getCatalog(),null,"testBug27915","%");    this.rs.next();    checkBug27915();  }}  }
class C{  public void add(char ch){  if (b.length <= i) {    b=ArrayUtil.grow(b,i + 1);  }  b[i++]=ch;}  }
class C{  public boolean isExplicit(){  return explicit;}  }
class C{  private static float allairstrength(final Collection<Unit> units,final boolean attacking){  float airstrength=0.0F;  for (  final Unit u : units) {    final UnitAttachment unitAttachment=UnitAttachment.get(u.getType());    airstrength+=1.00F;    if (attacking) {      airstrength+=unitAttachment.getAttack(u.getOwner());    } else {      airstrength+=unitAttachment.getDefense(u.getOwner());    }  }  return airstrength;}  }
class C{  @Deprecated public MessageBuilder appendDecoration(MessageDecoration decoration,String message){  appendDecoration(message,decoration);  return this;}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  private void labelIncompleteNode(Node n,int targetIndex){  int loc=ptLocator.locate(n.getCoordinate(),arg[targetIndex].getGeometry());  n.getLabel().setLocation(targetIndex,loc);}  }
class C{  public static synchronized MemberReference findOrCreate(TypeReference tRef,Atom mn,Atom md){  MemberReference key;  if (md.isMethodDescriptor()) {    if (tRef.isArrayType() && !tRef.isUnboxedArrayType()) {      tRef=RVMType.JavaLangObjectType.getTypeRef();    }    key=new MethodReference(tRef,mn,md,nextId + 1);  } else {    key=new FieldReference(tRef,mn,md,nextId + 1);  }  MemberReference val=dictionary.get(key);  if (val != null)   return val;  nextId++;  TableBasedDynamicLinker.ensureCapacity(key.id);  int column=key.id >> LOG_ROW_SIZE;  if (column == members.length) {    MemberReference[][] tmp=new MemberReference[column + 1][];    for (int i=0; i < column; i++) {      tmp[i]=members[i];    }    members=tmp;    members[column]=new MemberReference[1 << LOG_ROW_SIZE];  }  members[column][key.id & ROW_MASK]=key;  dictionary.add(key);  return key;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  this.parent=in.readInt();  this.componentType=in.readUTF();  this.id=in.readUTF();  if (id.length() == 0) {    id=null;  }}  }
class C{  @After public void unmockEligibleResponseGetter(){  System.clearProperty(CUSTOM_URL_STREAM_HANDLER_PROPERTY_NAME);}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public boolean isIgnoreRecipientHeader(){  return fieldIgnoreRecipientHeader;}  }
class C{  private boolean isNavigationKey(KeyEvent event){  InputMap inputMap=list.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  KeyStroke key=KeyStroke.getKeyStrokeForEvent(event);  if (inputMap != null && inputMap.get(key) != null) {    return true;  }  return false;}  }
class C{  public void lockIdlingResource(){  mCountingIdlingResource.increment();}  }
class C{  protected Set<String> handleKeySet(){  return lookup.keySet();}  }
class C{  @Override public void error(SAXParseException exception) throws SAXException {  try {    this.reportError(exception.getMessage(),XMLParserSettings.FAIL_ON_SAX_NON_FATAL_ERRORS);  } catch (  RDFParseException rdfpe) {    throw new SAXException(rdfpe);  }}  }
class C{  public ErrorCollector(CompilerConfiguration configuration){  this.warnings=null;  this.errors=null;  this.configuration=configuration;}  }
class C{  public CompositeComparator(int size,boolean reverse){  m_cmp=new Comparator[size];  m_rev=reverse ? -1 : 1;}  }
class C{  public ObjectMatrix2D like(int rows,int columns){  return new DenseObjectMatrix2D(rows,columns);}  }
class C{  public static boolean isJavaArtifact(IResource resource){  return isJavaFile(resource) || isClassFile(resource);}  }
class C{  FlexibleNode readInternalNode(HashMap<String,Taxon> translationList) throws IOException, ImportException {  FlexibleNode node=new FlexibleNode();  readCharacter();  node.addChild(readBranch(translationList));  if (getLastDelimiter() != ',' && !suppressWarnings) {    java.util.logging.Logger.getLogger("dr.evolution.io").warning("Internal node only has a single child!");  }  while (getLastDelimiter() == ',') {    node.addChild(readBranch(translationList));  }  if (getLastDelimiter() != ')') {    throw new BadFormatException("Missing closing ')' in tree in TREES block");  }  readToken(":(),;");  if (getLastMetaComment() != null) {    try {      parseMetaCommentPairs(getLastMetaComment(),node);    } catch (    BadFormatException bfe) {    }    clearLastMetaComment();  }  return node;}  }
class C{  @Override public boolean hasMoreElements(){  return currentBlock < blocks.size();}  }
class C{  private static boolean dateByOrdinal(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){  boolean reducedPrec=false;  if (fields.remove(DateTimeFieldType.year())) {    bld.append(Constants.ye);    if (fields.remove(DateTimeFieldType.dayOfYear())) {      appendSeparator(bld,extended);      bld.appendDayOfYear(3);    } else {      reducedPrec=true;    }  } else   if (fields.remove(DateTimeFieldType.dayOfYear())) {    bld.appendLiteral('-');    bld.appendDayOfYear(3);  }  return reducedPrec;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (derivedFeatureID) {case TypesPackage.TCLASSIFIER__AST_ELEMENT:      return TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void clearPoint(){  removeExtension(GmlPoint.class);}  }
class C{  public static boolean hasRaw(short flags){  return isFlagSet(flags,FLAG_HAS_RAW);}  }
class C{  public String toString(){  if (description != null) {    return description;  }  return super.toString();}  }
class C{  public Map<String,Object> context(){  return context;}  }
class C{  public static int secureRandomInt(int lowerThan){  SecureRandom sr=getSecureRandom();synchronized (sr) {    return sr.nextInt(lowerThan);  }}  }
class C{  public void drawFade(View content,Canvas canvas,float openPercent){  if (!mFadeEnabled)   return;  final int alpha=(int)(mFadeDegree * 255 * Math.abs(1 - openPercent));  mFadePaint.setColor(Color.argb(alpha,0,0,0));  int left=0;  int right=0;  if (mMode == SlidingMenu.LEFT) {    left=content.getLeft() - getBehindWidth();    right=content.getLeft();  } else   if (mMode == SlidingMenu.RIGHT) {    left=content.getRight();    right=content.getRight() + getBehindWidth();  } else   if (mMode == SlidingMenu.LEFT_RIGHT) {    left=content.getLeft() - getBehindWidth();    right=content.getLeft();    canvas.drawRect(left,0,right,getHeight(),mFadePaint);    left=content.getRight();    right=content.getRight() + getBehindWidth();  }  canvas.drawRect(left,0,right,getHeight(),mFadePaint);}  }
class C{  public String retrieveFolderDocumentAnnData(AcsAccessObject acs,ArchiveObject arch,FolderObject fdr,int docId,String entidad) throws Exception {  String data=null;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (acs == null)     data=FolderMdoFdr.retrieveFolderDocumentAnnData(dbConn,null,arch.getArchiveToken(),fdr.getFolderToken(),docId); else     data=FolderMdoFdr.retrieveFolderDocumentAnnData(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdr.getFolderToken(),docId);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return data;}  }
class C{  public static <T>T instance(Class<T> clazz){  try {    return clazz.newInstance();  } catch (  InstantiationException|IllegalAccessException e) {    throw new IllegalStateException(e);  }}  }
class C{  static PorterDuffColorFilter updateTintFilter(Drawable drawable,PorterDuffColorFilter tintFilter,ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(drawable.getState(),Color.TRANSPARENT);  if (tintFilter == null || !LOLLIPOP_PLUS) {    return new PorterDuffColorFilter(color,tintMode);  }  tryInvoke(tintFilter,"setColor",INT_ARG,color);  tryInvoke(tintFilter,"setMode",MODE_ARG,tintMode);  return tintFilter;}  }
class C{  @Override public boolean status(){  return opened;}  }
class C{  protected static IgfsPath[] paths(IgfsPath... paths){  return paths;}  }
class C{  void updateDays(WheelView year,WheelView month,WheelView day){  Calendar calendar=Calendar.getInstance();  calendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR) + year.getCurrentItem());  calendar.set(Calendar.MONTH,month.getCurrentItem());  int maxDays=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  day.setViewAdapter(new DateNumericAdapter(this,1,maxDays,calendar.get(Calendar.DAY_OF_MONTH) - 1));  int curDay=Math.min(maxDays,day.getCurrentItem() + 1);  day.setCurrentItem(curDay - 1,true);}  }
class C{  public void registerSensorsForNode(AcelaNode node){  log.info("Trying to register sensor from Manager 2: ASxx");  java.util.Iterator<String> iter=getSystemNameList().iterator();  AcelaNode tNode=null;  while (iter.hasNext()) {    String sName=iter.next();    if (sName == null) {      log.error("System name null during register Sensor");    } else {      log.debug("system name is " + sName);      if ((sName.charAt(0) == 'A') && (sName.charAt(1) == 'S')) {        tNode=AcelaAddress.getNodeFromSystemName(sName,_memo);        if (tNode == node) {          node.registerSensor(getBySystemName(sName),AcelaAddress.getBitFromSystemName(sName));        }      }    }  }}  }
class C{  protected void engineUpdate(byte[] b,int off,int len) throws SignatureException {  msgDigest.update(b,off,len);}  }
class C{  private void verifyServletPortProperty(){  try {    Integer.parseInt(getPropertyValue(ServletPropertySet.PORT));  } catch (  NumberFormatException e) {    throw new ContainerException("Invalid port number [" + getPropertyValue(ServletPropertySet.PORT) + "] for property "+ ServletPropertySet.PORT+ ". The port value must be an integer",e);  }}  }
class C{  public void updateDimension(){  double min=hasData() ? extremityMonitor.getMin() : 0.0;  double max=hasData() ? extremityMonitor.getMax() : 1.0;  min=Math.max(min,absoluteMin);  max=Math.min(max,absoluteMax);  interval=getInterval(min,max);  minMarkerValue=getMinMarkerValue(min,interval);  maxMarkerValue=minMarkerValue + interval * ChartView.Y_AXIS_INTERVALS;}  }
class C{  public void readExternalText(String file_name) throws IOException {  try (LineReader reader=new LineReader(file_name)){    initialize();    for (    String line : reader) {      if (line.trim().equals(""))       continue;      appendFromPennFormat(line);    }  } }  }
class C{  public static void openEditor(final TFSServer server,final WorkItem workItem){  openEditor(server,workItem,null);}  }
class C{  public static void streamToStream(InputStream in,OutputStream out,int bufSize) throws IOException {  final byte[] buf=new byte[bufSize];  int len;  while ((len=in.read(buf)) != -1) {    out.write(buf,0,len);  }}  }
class C{  public T text(int resid,Object... formatArgs){  Context context=getContext();  if (context != null) {    CharSequence text=context.getString(resid,formatArgs);    text(text);  }  return self();}  }
class C{  public synchronized List<Vertex> findAll(){  return findAll(1000,0);}  }
class C{  public XMLString concat(String str){  return new XString(str().concat(str));}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.326 -0500",hash_original_method="1AF05D3B3AC1A0BE6FEC3ED8E4AD92D7",hash_generated_method="602CBE64B37DDC68026D3CD1EA56EC7D") @DSVerified @DSSpec(DSCat.IO) public int read(byte buffer[]) throws IOException {  return read(buffer,0,buffer.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:56.496 -0500",hash_original_method="724D317C37CE304AAB82EB39D5595B30",hash_generated_method="8D6F8EEEF695A8E783AE8E4AF6ECFFF7") protected String encodeBody(){  return token;}  }
class C{  public static ArrayList<Byte> byteArrayToArrayList(byte[] byteArray,int offset){  ArrayList<Byte> list=new ArrayList<Byte>(byteArray.length);  for (int i=offset; i < byteArray.length; i++) {    list.add(Byte.valueOf(byteArray[i]));  }  return list;}  }
class C{  public final DoubleGrid2D ceiling(){  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     fieldx[y]=Math.ceil(fieldx[y]);  }  return this;}  }
class C{  public static String valueOf(double value){  return Double.toString(value);}  }
class C{  public void makeShape(){}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("SelectFont")) {    attemptFontSelection();  } else   if (command.equals("SelectPaint")) {    attemptPaintSelection();  } else   if (command.equals("ShowTitle")) {    attemptModifyShowTitle();  }}  }
