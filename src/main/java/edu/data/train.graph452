class C{  private PrincipalId addUser(String tenantName,String userName,PersonDetail detail,byte[] hasedPassword,String hashingAlgorithm) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"tenantName");    ValidateUtil.validateNotNull(userName,"user name");    checkInvalidCharForUserData(userName,INVALID_CHARS_FOR_USER_ID);    ValidateUtil.validateNotNull(detail,"user detail");    checkInvalidCharForUserData(detail.getFirstName(),INVALID_CHARS_FOR_USER_DETAIL);    checkInvalidCharForUserData(detail.getLastName(),INVALID_CHARS_FOR_USER_DETAIL);    checkInvalidCharForUserData(detail.getDescription(),INVALID_CHARS_FOR_USER_DETAIL);    ValidateUtil.validateNotNull(hasedPassword,"Hashed Password");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider provider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(provider,tenantName);    return provider.addUser(userName,detail,hasedPassword,hashingAlgorithm);  } catch (  ConstraintViolationLdapException e) {    logger.warn(String.format("provided password for user [%s] violates password policy constraint for tenant [%s]",userName,tenantName),e);    throw new PasswordPolicyViolationException(e.getMessage(),e);  }catch (  Exception ex) {    logger.error(String.format("Failed to add user [%s] in tenant [%s]",userName,tenantName));    throw ex;  }}  }
class C{  public int years(){  return this.years;}  }
class C{  public CreateWindowClause addView(String namespace,String name){  views.add(View.create(namespace,name));  return this;}  }
class C{  public synchronized void init(int sampleRate,int channelConfig,int audioFormat,int bufferSize){  if (mAudioTrack != null) {    mAudioTrack.release();    mAudioTrack=null;  }  int minBufferSize=AudioTrack.getMinBufferSize(sampleRate,channelConfig,audioFormat);  mAudioTrack=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,channelConfig,audioFormat,Math.max(minBufferSize,bufferSize),AudioTrack.MODE_STREAM);  mAudioTrack.play();}  }
class C{  public double eval(double params[]){  boolean p1=params[0] == 0.0 ? false : true;  boolean p2=params[1] == 0.0 ? false : true;  return (((p1 ^ p2) == true) ? 1.0 : 0.0);}  }
class C{  final public void print(float v){  try {    _out.print(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  private DocLine[] loadLines(MInvoice invoice){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MInvoiceLine[] lines=invoice.getLines(false);  for (int i=0; i < lines.length; i++) {    MInvoiceLine line=lines[i];    if (line.isDescription())     continue;    DocLine docLine=new DocLine(line,this);    BigDecimal Qty=line.getQtyInvoiced();    boolean cm=getDocumentType().equals(DOCTYPE_ARCredit) || getDocumentType().equals(DOCTYPE_APCredit);    docLine.setQty(cm ? Qty.negate() : Qty,invoice.isSOTrx());    BigDecimal LineNetAmt=line.getLineNetAmt();    BigDecimal PriceList=line.getPriceList();    int C_Tax_ID=docLine.getC_Tax_ID();    if (isTaxIncluded() && C_Tax_ID != 0) {      MTax tax=MTax.get(getCtx(),C_Tax_ID);      if (!tax.isZeroTax()) {        BigDecimal LineNetAmtTax=tax.calculateTax(LineNetAmt,true,getStdPrecision());        log.fine("LineNetAmt=" + LineNetAmt + " - Tax="+ LineNetAmtTax);        LineNetAmt=LineNetAmt.subtract(LineNetAmtTax);        for (int t=0; t < m_taxes.length; t++) {          if (m_taxes[t].getC_Tax_ID() == C_Tax_ID) {            m_taxes[t].addIncludedTax(LineNetAmtTax);            break;          }        }        BigDecimal PriceListTax=tax.calculateTax(PriceList,true,getStdPrecision());        PriceList=PriceList.subtract(PriceListTax);      }    }    docLine.setAmount(LineNetAmt,PriceList,Qty);    if (docLine.isItem())     m_allLinesService=false; else     m_allLinesItem=false;    log.fine(docLine.toString());    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  if (isTaxIncluded()) {    for (int i=0; i < m_taxes.length; i++) {      if (m_taxes[i].isIncludedTaxDifference()) {        BigDecimal diff=m_taxes[i].getIncludedTaxDifference();        for (int j=0; j < dls.length; j++) {          if (dls[j].getC_Tax_ID() == m_taxes[i].getC_Tax_ID()) {            dls[j].setLineNetAmtDifference(diff);            break;          }        }      }    }  }  return dls;}  }
class C{  @Override public void showError(String error){  view.showError(error);}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public static void removeCooldowns(Player player){  cooldowns.row(player.getName()).clear();}  }
class C{  public ChanceNode(String nodeId,Value value){  this(nodeId,new SingleValueDistribution(nodeId,value));}  }
class C{  private static void copyFile(File in,File out) throws IOException {  try (FileInputStream inStream=new FileInputStream(in);FileOutputStream outStream=new FileOutputStream(out)){    FileChannel inChannel=inStream.getChannel();    inChannel.transferTo(0,inChannel.size(),outStream.getChannel());  } }  }
class C{  private String cleanupPath(String fileName){  if (fileName == null) {    return null;  }  fileName=fileName.replace("\\","/");  fileName=fileName.replace("/+","/");  if (fileName.startsWith("./")) {    return fileName;  }  if (fileName.startsWith("/")) {    return "." + fileName;  }  return "./" + fileName;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void test_applyLocalizedPatternLjava_lang_String(){  DecimalFormat format=new DecimalFormat();  try {    format.applyLocalizedPattern("#.#");    assertEquals("Wrong pattern 1","#0.#",format.toLocalizedPattern());    format.applyLocalizedPattern("#.");    assertEquals("Wrong pattern 2","#0.",format.toLocalizedPattern());    format.applyLocalizedPattern("#");    assertEquals("Wrong pattern 3","#",format.toLocalizedPattern());    format.applyLocalizedPattern(".#");    assertEquals("Wrong pattern 4","#.0",format.toLocalizedPattern());    try {      format.applyLocalizedPattern("'#,#:#0.0#;(#)");      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }    try {      format.applyLocalizedPattern((String)null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  private List<NameValuePair> initPostParametersForReRegistration(RequestData data){  List<NameValuePair> regParams=new ArrayList<NameValuePair>();  setBasicPostParameters(regParams,data);  regParams.add(new NameValuePair(HeidelpayPostParameter.PAYMENT_CODE,getHeidelPayPaymentType(data.getPaymentTypeId()) + ".RR"));  regParams.add(new NameValuePair(HeidelpayPostParameter.IDENTIFICATION_REFERENCEID,data.getExternalIdentifier()));  initGeneralRegistrationPostData(regParams,data);  return regParams;}  }
class C{  @Override protected void done(){  executionList.execute();}  }
class C{  public StringReaderSource(String string,CompilerConfiguration configuration){  super(configuration);  this.string=string;}  }
class C{  SerialMessage createOutPacket(){  int nDLE=0;  for (int i=0; i < nOutBytes; i++) {    if ((outBytes[i] == 2) || (outBytes[i] == 3) || (outBytes[i] == 16)) {      nDLE++;    }  }  SerialMessage m=new SerialMessage(nOutBytes + nDLE + 2);  m.setElement(0,ua + 65);  m.setElement(1,84);  int k=2;  for (int i=0; i < nOutBytes; i++) {    if ((outBytes[i] == 2) || (outBytes[i] == 3) || (outBytes[i] == 16)) {      m.setElement(k,16);      k++;    }    m.setElement(k,outBytes[i]);    k++;  }  return m;}  }
class C{  public IpcSharedMemorySpace(String tokFileName,int writerPid,int readerPid,int size,boolean reader,IgniteLogger parent) throws IgniteCheckedException {  assert size > 0 : "Size cannot be less than 1 byte";  log=parent.getLogger(IpcSharedMemorySpace.class);  opSize=size;  shmemPtr=IpcSharedMemoryUtils.allocateSystemResources(tokFileName,size,DEBUG && log.isDebugEnabled());  shmemId=IpcSharedMemoryUtils.sharedMemoryId(shmemPtr);  semId=IpcSharedMemoryUtils.semaphoreId(shmemPtr);  isReader=reader;  this.tokFileName=tokFileName;  this.readerPid=readerPid;  this.writerPid=writerPid;  if (DEBUG && log.isDebugEnabled())   log.debug("Shared memory space has been created: " + this);}  }
class C{  @Override public void finalizeAggregation() throws Exception {  if (m_numModels == 0) {    throw new Exception("Unable to finalize aggregation - " + "haven't seen any models to aggregate");  }  pruneDictionary(true);  Iterator<Map.Entry<String,SGDText.Count>> entries=m_dictionary.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry<String,Count> entry=entries.next();    entry.getValue().m_count/=(m_numModels + 1);    entry.getValue().m_weight/=(m_numModels + 1);  }  m_bias/=(m_numModels + 1);  m_numModels=0;}  }
class C{  public AuthenticationException(){  super();}  }
class C{  static BridgeServerResponse create(DistributionManager dm,BridgeServerRequest request){  BridgeServerResponse m=new BridgeServerResponse();  m.setRecipient(request.getSender());  try {    GemFireCacheImpl cache=(GemFireCacheImpl)CacheFactory.getInstanceCloseOk(dm.getSystem());    if (request.getCacheId() != System.identityHashCode(cache)) {      m.bridgeInfo=null;    } else {      int operation=request.getOperation();switch (operation) {case BridgeServerRequest.ADD_OPERATION:{          CacheServerImpl bridge=(CacheServerImpl)cache.addCacheServer();          m.bridgeInfo=new RemoteBridgeServer(bridge);          break;        }case BridgeServerRequest.INFO_OPERATION:{        int id=request.getBridgeId();        for (Iterator iter=cache.getCacheServers().iterator(); iter.hasNext(); ) {          CacheServerImpl bridge=(CacheServerImpl)iter.next();          if (System.identityHashCode(bridge) == id) {            m.bridgeInfo=new RemoteBridgeServer(bridge);            break;          } else {            m.bridgeInfo=null;          }        }        break;      }case BridgeServerRequest.START_OPERATION:{      RemoteBridgeServer config=request.getBridgeInfo();      for (Iterator iter=cache.getCacheServers().iterator(); iter.hasNext(); ) {        CacheServerImpl bridge=(CacheServerImpl)iter.next();        if (System.identityHashCode(bridge) == config.getId()) {          bridge.configureFrom(config);          bridge.start();          m.bridgeInfo=new RemoteBridgeServer(bridge);          break;        } else {          m.bridgeInfo=null;        }      }      break;    }case BridgeServerRequest.STOP_OPERATION:{    RemoteBridgeServer config=request.getBridgeInfo();    for (Iterator iter=cache.getCacheServers().iterator(); iter.hasNext(); ) {      CacheServerImpl bridge=(CacheServerImpl)iter.next();      if (System.identityHashCode(bridge) == config.getId()) {        bridge.stop();        m.bridgeInfo=new RemoteBridgeServer(bridge);        break;      } else {        m.bridgeInfo=null;      }    }    break;  }default :Assert.assertTrue(false,"Unknown bridge server operation: " + operation);}}} catch (CancelException ex) {m.bridgeInfo=null;}catch (Exception ex) {m.exception=ex;m.bridgeInfo=null;}return m;}  }
class C{  private void flushInternal() throws IOException {  if (pos > 0) {    out.write(buf,0,pos);  }  pos=0;}  }
class C{  public UF6(){  this(30);}  }
class C{  protected void notifyStartProcess(long startTime){synchronized (listeners) {    for (    INodejsProcessListener listener : listeners) {      listener.onStart(this);    }  }}  }
class C{  public void store(ObjectReference value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;default :return null;}}  }
class C{  boolean matches(String selector,int sCurrent,int sLast,int thisCurrent,int thisLast){  sCurrent=Math.max(sCurrent,0);  thisCurrent=Math.max(thisCurrent,0);  int thisDotIndex=boundedIndexOf(name,'.',thisCurrent,thisLast);  int thisPoundIndex=boundedIndexOf(name,'#',thisCurrent,thisLast);  int sDotIndex=boundedIndexOf(selector,'.',sCurrent,sLast);  int sPoundIndex=boundedIndexOf(selector,'#',sCurrent,sLast);  if (sDotIndex != -1) {    if (thisDotIndex == -1) {      return false;    }    if (sCurrent == sDotIndex) {      if ((thisLast - thisDotIndex) != (sLast - sDotIndex) || !selector.regionMatches(sCurrent,name,thisDotIndex,(thisLast - thisDotIndex))) {        return false;      }    } else {      if ((sLast - sCurrent) != (thisLast - thisCurrent) || !selector.regionMatches(sCurrent,name,thisCurrent,(thisLast - thisCurrent))) {        return false;      }    }    return true;  }  if (sPoundIndex != -1) {    if (thisPoundIndex == -1) {      return false;    }    if (sCurrent == sPoundIndex) {      if ((thisLast - thisPoundIndex) != (sLast - sPoundIndex) || !selector.regionMatches(sCurrent,name,thisPoundIndex,(thisLast - thisPoundIndex))) {        return false;      }    } else {      if ((sLast - sCurrent) != (thisLast - thisCurrent) || !selector.regionMatches(sCurrent,name,thisCurrent,(thisLast - thisCurrent))) {        return false;      }    }    return true;  }  if (thisDotIndex != -1) {    return (((thisDotIndex - thisCurrent) == (sLast - sCurrent)) && selector.regionMatches(sCurrent,name,thisCurrent,thisDotIndex - thisCurrent));  }  if (thisPoundIndex != -1) {    return (((thisPoundIndex - thisCurrent) == (sLast - sCurrent)) && selector.regionMatches(sCurrent,name,thisCurrent,thisPoundIndex - thisCurrent));  }  return (((thisLast - thisCurrent) == (sLast - sCurrent)) && selector.regionMatches(sCurrent,name,thisCurrent,thisLast - thisCurrent));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getDVDTotalChapters());}  }
class C{  public static String readFileToString(Path file) throws IOException {  byte[] fileArray=Files.readAllBytes(file);  return new String(fileArray,StandardCharsets.UTF_8);}  }
class C{  public static String listInsertAt(String list,int pos,String value,String delimiter,boolean ignoreEmpty) throws ExpressionException {  if (pos < 1)   throw new ExpressionException("invalid string list index [" + (pos) + "]");  char[] del=delimiter.toCharArray();  char c;  StringBuilder result=new StringBuilder();  String end="";  int len;  if (ignoreEmpty) {    outer:     while (list.length() > 0) {      c=list.charAt(0);      for (int i=0; i < del.length; i++) {        if (c == del[i]) {          list=list.substring(1);          result.append(c);          continue outer;        }      }      break;    }  }  if (ignoreEmpty) {    outer:     while (list.length() > 0) {      c=list.charAt(list.length() - 1);      for (int i=0; i < del.length; i++) {        if (c == del[i]) {          len=list.length();          list=list.substring(0,len - 1 < 0 ? 0 : len - 1);          end=c + end;          continue outer;        }      }      break;    }  }  len=list.length();  int last=0;  int count=0;  outer:   for (int i=0; i < len; i++) {    c=list.charAt(i);    for (int y=0; y < del.length; y++) {      if (c == del[y]) {        if (!ignoreEmpty || last < i) {          if (pos == ++count) {            result.append(value);            result.append(del[0]);          }        }        result.append(list.substring(last,i));        result.append(c);        last=i + 1;        continue outer;      }    }  }  count++;  if (last <= len) {    if (pos == count) {      result.append(value);      result.append(del[0]);    }    result.append(list.substring(last));  }  if (pos > count) {    throw new ExpressionException("invalid string list index [" + (pos) + "], indexes go from 1 to "+ (count));  }  return result + end;}  }
class C{  public static void removeSecondaryObjective(SecondaryObjective<TestSuiteChromosome> objective){  secondaryObjectives.remove(objective);}  }
class C{  private void testViewCenter(MutableTransformer transformer,Point2D point){  if (transformer instanceof LensTransformer) {    LensTransformer ht=(LensTransformer)transformer;    double distanceFromCenter=ht.getDistanceFromCenter(point);    if (distanceFromCenter < 10) {      ht.setViewCenter(point);      dragOnLens=true;    } else     if (Math.abs(distanceFromCenter - ht.getViewRadius()) < 10) {      edgeOffset=ht.getViewRadius() - distanceFromCenter;      ht.setViewRadius(distanceFromCenter + edgeOffset);      dragOnEdge=true;    }  }}  }
class C{  public int paramStatus(int param){  return internalParamStatus(cacheNode(new PurityParamNode(param)));}  }
class C{  public static byte[] decode(String str) throws CoderException {  byte out[]=new byte[str.length()];  int len=0;  int offset=0;  byte b=0;  boolean stop=false;  StringCharacterIterator it=new StringCharacterIterator(str);  do {    b=_dec(it.current());    it.next();    if (b > 45)     throw new CoderException("can't decode string [" + str + "]");    if (b < 45)     stop=true;    len+=b;    for (; b > 0; b-=3) {      decodeChars(it,out,offset);      offset+=3;    }    it.next();  } while (!stop);  byte rtn[]=new byte[len];  for (int i=0; i < len; i++)   rtn[i]=out[i];  return rtn;}  }
class C{  public static boolean addressesAreEqual(String host1,String host2){  try {    HostAddress host1Address=getByName(host1);    HostAddress host2Address=getByName(host2);    byte[] host1Raw=host1Address.getAddress();    byte[] host2Raw=host2Address.getAddress();    for (int octet=0; octet < 4; octet++) {      if (host1Raw[octet] != host2Raw[octet])       return false;    }    return true;  } catch (  Exception e) {    CLUtils.println(String.format("addressesAreEqual(%s, %s) returns FALSE, Exception=%s",host1,host2,e));    return false;  }}  }
class C{  public String toString(){  String s="\n   GeneralSubtree: [\n" + "    GeneralName: " + ((name == null) ? "" : name.toString()) + "\n    Minimum: "+ minimum;  if (maximum == -1) {    s+="\t    Maximum: undefined";  } else   s+="\t    Maximum: " + maximum;  s+="    ]\n";  return (s);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  private void waitForAll(CountDownLatch latch){  try {    latch.await();  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  private TaskResourceRep performProtectionAction(URI consistencyGroupId,Copy copy,String op) throws InternalException {  ArgValidator.checkFieldUriType(consistencyGroupId,BlockConsistencyGroup.class,"id");  ArgValidator.checkFieldUriType(copy.getCopyID(),VirtualArray.class,"copyId");  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(consistencyGroupId);  final VirtualArray targetVirtualArray=_permissionsHelper.getObjectById(copy.getCopyID(),VirtualArray.class);  ArgValidator.checkEntity(consistencyGroup,consistencyGroupId,true);  ArgValidator.checkEntity(targetVirtualArray,copy.getCopyID(),true);  if (!consistencyGroup.checkForType(Types.RP)) {    throw APIException.badRequests.consistencyGroupMustBeRPProtected(consistencyGroupId);  }  if (op.equalsIgnoreCase(ProtectionOp.SWAP.getRestOp()) && !NullColumnValueGetter.isNullURI(consistencyGroupId)) {    ExportUtils.validateConsistencyGroupBookmarksExported(_dbClient,consistencyGroupId);  }  if (op.equalsIgnoreCase(ProtectionOp.CHANGE_ACCESS_MODE.getRestOp()) && !Copy.ImageAccessMode.DIRECT_ACCESS.name().equalsIgnoreCase(copy.getAccessMode())) {    throw APIException.badRequests.unsupportedAccessMode(copy.getAccessMode());  }  List<Volume> targetVolumes=getTargetVolumes(consistencyGroup,copy.getCopyID());  if (targetVolumes == null || targetVolumes.isEmpty()) {    throw APIException.badRequests.targetVirtualArrayDoesNotMatch(consistencyGroupId,copy.getCopyID());  }  Volume targetVolume=targetVolumes.get(0);  String task=UUID.randomUUID().toString();  Operation status=new Operation();  status.setResourceType(ProtectionOp.getResourceOperationTypeEnum(op));  _dbClient.createTaskOpStatus(BlockConsistencyGroup.class,consistencyGroupId,task,status);  ProtectionSystem system=_dbClient.queryObject(ProtectionSystem.class,targetVolume.getProtectionController());  String deviceType=system.getSystemType();  if (!deviceType.equals(DiscoveredDataObject.Type.rp.name())) {    throw APIException.badRequests.protectionForRpClusters();  }  RPController controller=getController(RPController.class,system.getSystemType());  controller.performProtectionOperation(system.getId(),consistencyGroupId,targetVolume.getId(),copy.getPointInTime(),copy.getAccessMode(),op,task);  return toTask(consistencyGroup,task,status);}  }
class C{  public final boolean isOptionsVisible(){  return DIALOG.isVisible();}  }
class C{  public SnmpInt(Integer v) throws IllegalArgumentException {  this(v.intValue());}  }
class C{  public static Supply toSupply(final Quantity quantity,final int divisibility){  return new Supply(quantity.getRaw() / getMultipler(divisibility));}  }
class C{  public void write(ExceptionlessOutputStream out){  sizes.write(out);  for (int i=0; i < sizes.size(); ++i)   for (int j=0; j < sizes.get(i); ++j)   out.writeDouble(vector[i][j]);  out.writeInt(defaultCapacity2);}  }
class C{  public boolean isPrecise(){  return true;}  }
class C{  public void convertMatrixToRaster(){  log.info("Converting image matrix to raster.");  if (imageMatrix.rows() == bufferedImage.getWidth() && imageMatrix.columns() == bufferedImage.getHeight()) {    for (int x=0; x < imageMatrix.rows(); x++) {      for (int y=0; y < imageMatrix.columns(); y++) {        Color c=new Color(color.getRed(),color.getGreen(),color.getBlue(),(int)Math.floor((imageMatrix.get(x,y) / maxValue) * 255));        bufferedImage.setRGB(x,y,c.getRGB());      }    }  } else {    throw new RuntimeException("The imageMatrix and BufferedImage raster is not the same size.");  }  log.info("Done converting image matrix to raster.");}  }
class C{  public EPException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private void updateArtistTag(int i,ViewHolder tag){  final SearchEntry entry=mSortedArtists.get(i);  final ProviderAggregator aggregator=ProviderAggregator.getDefault();  Artist artist=aggregator.retrieveArtist(entry.ref,entry.identifier);  if (artist != null && artist.equals(tag.content)) {    return;  }  if (artist != null && (artist.isLoaded() || artist.getName() != null)) {    tag.tvTitle.setText(artist.getName());    tag.tvSubtitle.setText(null);    tag.albumArtImageView.loadArtForArtist(artist);    tag.content=artist;    tag.sourceLogo=PluginsLookup.getDefault().getCachedLogo(tag.vRoot.getResources(),artist);    tag.ivSource.setImageDrawable(tag.sourceLogo);    tag.ivOverflow.setOnClickListener(mOverflowArtistClickListener);  } else {    tag.tvTitle.setText(R.string.loading);    tag.tvSubtitle.setText(null);    tag.ivSource.setImageDrawable(null);    tag.albumArtImageView.setDefaultArt();    tag.ivOverflow.setOnClickListener(null);  }}  }
class C{  @Override default CompletableFuture<OptionalInt> minInt(final ToIntFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public void testChecksum() throws Exception {  Font originalFont=TestFontUtils.loadFont(TEST_FONT_FILE)[0];  long originalChecksum=originalFont.checksum();  long expectedChecksum=originalChecksum;  long originalChecksumAdjustment=((FontHeaderTable)originalFont.getTable(Tag.head)).checkSumAdjustment();  Builder fontBuilder=TestFontUtils.builderForFontFile(TEST_FONT_FILE);  for (  int tag : fontBuilder.tableBuilderMap().keySet()) {    Table.Builder<? extends Table> tableBuilder=fontBuilder.getTableBuilder(tag);    WritableFontData data=tableBuilder.data();    int l=data.readULongAsInt(0);    data.writeULong(0,l + 1);    tableBuilder.setData(data);    expectedChecksum++;  }  Font builtFont=fontBuilder.build();  long builtChecksum=builtFont.checksum();  assertEquals(expectedChecksum,builtChecksum);  FontHeaderTable header=builtFont.getTable(Tag.head);  long headerAdjustment=(FontHeaderTable.CHECKSUM_ADJUSTMENT_BASE - builtChecksum) & 0xffffffff;  long checksumAdjustment=header.checkSumAdjustment();  assertEquals(headerAdjustment,header.checkSumAdjustment());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void trySplit(ActiveHNode node,SplitNode parent,String parentBranch) throws Exception {  if (node.numEntriesInClassDistribution() > 1) {    List<SplitCandidate> bestSplits=node.getPossibleSplits(m_splitMetric);    Collections.sort(bestSplits);    boolean doSplit=false;    if (bestSplits.size() < 2) {      doSplit=bestSplits.size() > 0;    } else {      double metricMax=m_splitMetric.getMetricRange(node.m_classDistribution);      double hoeffdingBound=computeHoeffdingBound(metricMax,m_splitConfidence,node.totalWeight());      SplitCandidate best=bestSplits.get(bestSplits.size() - 1);      SplitCandidate secondBest=bestSplits.get(bestSplits.size() - 2);      if (best.m_splitMerit - secondBest.m_splitMerit > hoeffdingBound || hoeffdingBound < m_hoeffdingTieThreshold) {        doSplit=true;      }    }    if (doSplit) {      SplitCandidate best=bestSplits.get(bestSplits.size() - 1);      if (best.m_splitTest == null) {        deactivateNode(node,parent,parentBranch);      } else {        SplitNode newSplit=new SplitNode(node.m_classDistribution,best.m_splitTest);        for (int i=0; i < best.numSplits(); i++) {          ActiveHNode newChild=newLearningNode();          newChild.m_classDistribution=best.m_postSplitClassDistributions.get(i);          newChild.m_weightSeenAtLastSplitEval=newChild.totalWeight();          String branchName="";          if (m_header.attribute(best.m_splitTest.splitAttributes().get(0)).isNumeric()) {            branchName=i == 0 ? "left" : "right";          } else {            Attribute splitAtt=m_header.attribute(best.m_splitTest.splitAttributes().get(0));            branchName=splitAtt.value(i);          }          newSplit.setChild(branchName,newChild);        }        m_activeLeafCount--;        m_decisionNodeCount++;        m_activeLeafCount+=best.numSplits();        if (parent == null) {          m_root=newSplit;        } else {          parent.setChild(parentBranch,newSplit);        }      }    }  }}  }
class C{  private static void addStickyFooterDivider(Context ctx,ViewGroup footerView){  LinearLayout divider=new LinearLayout(ctx);  LinearLayout.LayoutParams dividerParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  divider.setMinimumHeight((int)UIUtils.convertDpToPixel(1,ctx));  divider.setOrientation(LinearLayout.VERTICAL);  divider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(ctx,R.attr.material_drawer_divider,R.color.material_drawer_divider));  footerView.addView(divider,dividerParams);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Source<Integer> upToAndIncluding(final int endInclusive){  return between(startInclusive,endInclusive);}  }
class C{  public void peekAvailable(ByteBuffer dst){  if (!dst.hasRemaining())   return;  if (readChunk != null) {    readChunk.mark();    copyRemaining(readChunk,dst);    readChunk.reset();  }  if (!dst.hasRemaining())   return;  if (!list.isEmpty()) {    Iterator<ByteBuffer> i=list.iterator();    while (dst.hasRemaining() && i.hasNext()) {      ByteBuffer src=i.next();      src.mark();      copyRemaining(src,dst);      src.reset();    }  }  if (!dst.hasRemaining())   return;  if (writeChunk != null) {    ByteBuffer src=(ByteBuffer)writeChunk.duplicate().flip();    src.order(order);    copyRemaining(src,dst);  }}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd) {    return true;  }  return false;}  }
class C{  public final byte[] toByteArray(){  ByteBuffer bb=toByteBuffer();  if (bb.hasArray() && bb.arrayOffset() == 0 && bb.limit() == bb.capacity()) {    return bb.array();  } else {    ByteBuffer tmp=ByteBuffer.allocate(bb.remaining());    tmp.put(bb);    tmp.flip();    this.buffer=tmp;    return this.buffer.array();  }}  }
class C{  public String select(boolean state,String trueString,String falseString){  if (state) {    return trueString;  } else {    return falseString;  }}  }
class C{  public void clearAllRows(){  rows=new LinkedList<ChangeLogRow>();}  }
class C{  public IIOInvalidTreeException(String message,Throwable cause,Node offendingNode){  super(message,cause);  this.offendingNode=offendingNode;}  }
class C{  private static void addTable(Connection conn,PageContext pc,String name,Query query,boolean doSimpleTypes,ArrayList<String> usedTables) throws SQLException, PageException {  Statement stat;  usedTables.add(name);  stat=conn.createStatement();  Key[] keys=CollectionUtil.keys(query);  int[] types=query.getTypes();  int[] innerTypes=toInnerTypes(types);  String comma="";  StringBuilder create=new StringBuilder("CREATE TABLE " + name + " (");  StringBuilder insert=new StringBuilder("INSERT INTO  " + name + " (");  StringBuilder values=new StringBuilder("VALUES (");  for (int i=0; i < keys.length; i++) {    String key=keys[i].getString();    String type=(doSimpleTypes) ? "VARCHAR_IGNORECASE" : toUsableType(types[i]);    create.append(comma + key);    create.append(" ");    create.append(type);    insert.append(comma + key);    values.append(comma + "?");    comma=",";  }  create.append(")");  insert.append(")");  values.append(")");  stat.execute(create.toString());  PreparedStatement prepStat=conn.prepareStatement(insert.toString() + values.toString());  int count=query.getRecordcount();  QueryColumn[] columns=new QueryColumn[keys.length];  for (int i=0; i < keys.length; i++) {    columns[i]=query.getColumn(keys[i]);  }  for (int y=0; y < count; y++) {    for (int i=0; i < keys.length; i++) {      int type=innerTypes[i];      Object value=columns[i].get(y + 1,null);      if (doSimpleTypes) {        prepStat.setObject(i + 1,Caster.toString(value));      } else {        if (value == null)         prepStat.setNull(i + 1,types[i]); else         if (type == BINARY)         prepStat.setBytes(i + 1,Caster.toBinary(value)); else         if (type == DATE) {          prepStat.setTimestamp(i + 1,(value.equals("")) ? null : new Timestamp(DateCaster.toDateAdvanced(query.getAt(keys[i],y + 1),pc.getTimeZone()).getTime()));        } else         if (type == TIME)         prepStat.setTime(i + 1,(value.equals("")) ? null : new Time(DateCaster.toDateAdvanced(query.getAt(keys[i],y + 1),pc.getTimeZone()).getTime())); else         if (type == TIMESTAMP)         prepStat.setTimestamp(i + 1,(value.equals("")) ? null : new Timestamp(DateCaster.toDateAdvanced(query.getAt(keys[i],y + 1),pc.getTimeZone()).getTime())); else         if (type == DOUBLE)         prepStat.setDouble(i + 1,(value.equals("")) ? 0 : Caster.toDoubleValue(query.getAt(keys[i],y + 1))); else         if (type == INT)         prepStat.setLong(i + 1,(value.equals("")) ? 0 : Caster.toIntValue(query.getAt(keys[i],y + 1))); else         if (type == STRING)         prepStat.setObject(i + 1,Caster.toString(value));      }    }    prepStat.execute();  }}  }
class C{  public TypeAsPayloadTokenFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static long checkArgumentInRange(long value,long lower,long upper,String valueName){  if (value < lower) {    throw new IllegalArgumentException(String.format(Locale.US,"%s is out of range of [%d, %d] (too low)",valueName,lower,upper));  } else   if (value > upper) {    throw new IllegalArgumentException(String.format(Locale.US,"%s is out of range of [%d, %d] (too high)",valueName,lower,upper));  }  return value;}  }
class C{  public Element writeFontUIResource(Element parent,Object o,String name) throws Exception {  Element node;  FontUIResource resource;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  resource=(FontUIResource)o;  node=addElement(parent,name,resource.getClass().getName(),false);  invokeWriteToXML(node,new Font(resource.getName(),resource.getStyle(),resource.getSize()),VAL_COLOR);  return node;}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public static String encodePassword(final String value){  return ConversionUtils.stringToBase64(value);}  }
class C{  public InlineAssociation_ createInlineAssociation_(){  InlineAssociation_Impl inlineAssociation_=new InlineAssociation_Impl();  return inlineAssociation_;}  }
class C{  public Object eval(Reader reader,Bindings bindings) throws ScriptException {  ScriptContext ctxt=getScriptContext(bindings);  return eval(reader,ctxt);}  }
class C{  private void initialize(){  for (int columnIndex=0; columnIndex < dimensionNameToIndex.size(); columnIndex++) {    dimensionColumns.add(Lists.newArrayList());  }}  }
class C{  public long executeInsert(){  return prepared.update();}  }
class C{  private static void evalStack(final List<Object> stack,boolean consumeOpening){  do {    final Connection conn=lastConnection(stack);    if (conn == null) {      return;    }    if (conn.opening) {      stack.set(stack.size() - 2,conn.removeOpening());      return;    }    final Node node=new Node(conn.precedence == Connection.AND.precedence ? Connection.AND : Connection.OR);    while (true) {      final Connection prevConn=lastConnection(stack);      node.childList.add(stack.remove(stack.size() - 1));      if (prevConn == null) {        if (consumeOpening)         consumeOpening=false;        break;      }      if (prevConn.opening) {        if (consumeOpening) {          stack.set(stack.size() - 1,prevConn.removeOpening());          consumeOpening=false;        }        break;      }      if (prevConn.precedence < conn.precedence) {        break;      }      stack.remove(stack.size() - 1);    }    stack.add(node);  } while (consumeOpening);}  }
class C{  public boolean isServerFlagSet(short flag){  boolean flagSet=false;  int originalPos=position;  if (isOK()) {    reset();    getByte();    getFieldLength();    getFieldLength();  } else   if (isEOF()) {    position=HEADER_LENGTH + 3;  } else {    logger.warn("Probable bug here: testing server status on a packet that's neither EOF nor OK. " + this.toString());  }  flagSet=(getShort() & flag) != 0;  position=originalPos;  return flagSet;}  }
class C{  public Label(int geomIndex,int onLoc,int leftLoc,int rightLoc){  elt[0]=new TopologyLocation(Location.NONE,Location.NONE,Location.NONE);  elt[1]=new TopologyLocation(Location.NONE,Location.NONE,Location.NONE);  elt[geomIndex].setLocations(onLoc,leftLoc,rightLoc);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  private boolean isPositionedCorrectly(IJavaElement element){  ListItem oldListItem=getOldPosition(element);  if (oldListItem == null)   return false;  ListItem newListItem=getNewPosition(element);  if (newListItem == null)   return false;  IJavaElement oldPrevious=oldListItem.previous;  IJavaElement newPrevious=newListItem.previous;  if (oldPrevious == null) {    return newPrevious == null;  } else {    return oldPrevious.equals(newPrevious);  }}  }
class C{  public BigInteger toBigInteger(){  return new BigInteger(1,bytes);}  }
class C{  public void addFeature(GlobalFeature feature){  listOfFeatures.add(feature);}  }
class C{  protected void update(OMGraphicList list,Projection proj){  BufferedImage currentImageBuffer=null;  if (proj != null && layer != null) {    int w=proj.getWidth();    int h=proj.getHeight();    currentImageBuffer=getImageBuffer();    BufferedImage bufferedImage=scrubOrGetNewBufferedImage(currentImageBuffer,w,h);    if (bufferedImage != null) {      if (currentImageBuffer != null) {        currentImageBuffer.flush();      }      currentImageBuffer=bufferedImage;    }    Graphics2D g2d=(Graphics2D)currentImageBuffer.getGraphics();    setRenderingHints(g2d);    if (list != null) {      list.render(g2d);    }    g2d.dispose();    setImageRaster(updateRaster(currentImageBuffer,proj));  }  setImageBuffer(currentImageBuffer);  currentProjection=proj;}  }
class C{  public EaseOut(){}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public static byte[] writeClass(ClassNode classNode) throws IOException {  ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);  classNode.accept(classWriter);  return classWriter.toByteArray();}  }
class C{  protected ScopedElementImpl(){  super();}  }
class C{  public static void w(Throwable thr){  if (DEBUG)   Log.w(TAG,buildMessage(""),thr);}  }
class C{  public final void addElement(int iValue){  ptVector.add(new Integer(iValue));}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller,String adClientId,String adUnitId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all custom channels for ad unit %s\n",adUnitId);  System.out.println("=================================================================");  String pageToken=null;  do {    CustomChannels customChannels=adExchangeSeller.adunits().customchannels().list(adClientId,adUnitId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (customChannels.getItems() != null && !customChannels.getItems().isEmpty()) {      for (      CustomChannel channel : customChannels.getItems()) {        System.out.printf("Custom channel with code \"%s\" and name \"%s\" was found.\n",channel.getCode(),channel.getName());      }    } else {      System.out.println("No custom channels found.");    }    pageToken=customChannels.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  @Override public void dropDatabaseSchema(AbstractSession session,Writer writer) throws EclipseLinkException {  buildDatabaseSchemaDeletionWriter(session,writer);}  }
class C{  public BigDecimalMapper decimalDigits(Integer decimalDigits){  this.decimalDigits=decimalDigits;  return this;}  }
class C{  public CountersTable(){}  }
class C{  public static void logError(Throwable exception,String message){  log(IStatus.ERROR,IStatus.OK,message,exception);}  }
class C{  public static boolean hasExactlySubsetOfTheseInitiators(ExportMask mask,List<String> ports,DbClient dbClient){  Collection<String> normalizedPorts=new HashSet<String>();  for (  String port : ports) {    normalizedPorts.add(Initiator.normalizePort(port));  }  Collection<String> maskInitiators=new HashSet<String>();  if (mask.getExistingInitiators() != null) {    maskInitiators.addAll(mask.getExistingInitiators());  }  if (mask.getInitiators() != null) {    for (    String initiatorId : mask.getInitiators()) {      Initiator initiator=dbClient.queryObject(Initiator.class,URI.create(initiatorId));      if (initiator != null & initiator.getInitiatorPort() != null) {        maskInitiators.add(Initiator.normalizePort(initiator.getInitiatorPort()));      }    }  }  if (mask.getUserAddedInitiators() != null) {    maskInitiators.addAll(mask.getUserAddedInitiators().keySet());  }  return normalizedPorts.containsAll(maskInitiators);}  }
class C{  protected void findKNearestNeighbours(int K,double[][] sampleVectors,KdTreeNode node,int level,PriorityQueue<NeighbourNodeData> currentKBest){  int currentDim=level % totalDimensions;  double[][] data=dimensionToArray[currentDim];  int actualDim=dimensionToArrayIndex[currentDim];  int variableNumber=dimensionToVariableNumber[currentDim];  double distOnThisDim=sampleVectors[variableNumber][actualDim] - data[node.indexOfThisPoint][actualDim];  double absDistOnThisDim;  if (normTypeToUse == EuclideanUtils.NORM_MAX_NORM) {    absDistOnThisDim=(distOnThisDim > 0) ? distOnThisDim : -distOnThisDim;  } else {    absDistOnThisDim=distOnThisDim * distOnThisDim;  }  NeighbourNodeData furthestCached=currentKBest.peek();  if ((currentKBest.size() < K) || (absDistOnThisDim < furthestCached.distance)) {    double maxNorm=0;    double[] norms=new double[originalDataSets.length];    for (int v=0; v < originalDataSets.length; v++) {      if (currentKBest.size() < K) {        norms[v]=norm(sampleVectors[v],originalDataSets[v][node.indexOfThisPoint],normTypeToUse);      } else {        norms[v]=normWithAbort(sampleVectors[v],originalDataSets[v][node.indexOfThisPoint],furthestCached.distance,normTypeToUse);      }      if (norms[v] > maxNorm) {        maxNorm=norms[v];        if (Double.isInfinite(maxNorm)) {          break;        }      }    }    if ((currentKBest.size() < K) || (maxNorm < furthestCached.distance)) {      if (currentKBest.size() == K) {        currentKBest.poll();      }      currentKBest.add(new NeighbourNodeData(node.indexOfThisPoint,norms,maxNorm));    }  }  KdTreeNode closestSubTree=null;  KdTreeNode furthestSubTree=null;  if (distOnThisDim < 0) {    closestSubTree=node.leftTree;    furthestSubTree=node.rightTree;  } else {    closestSubTree=node.rightTree;    furthestSubTree=node.leftTree;  }  if (closestSubTree != null) {    findKNearestNeighbours(K,sampleVectors,closestSubTree,level + 1,currentKBest);  }  furthestCached=currentKBest.peek();  if ((currentKBest.size() < K) || (absDistOnThisDim < furthestCached.distance)) {    if (furthestSubTree != null) {      findKNearestNeighbours(K,sampleVectors,furthestSubTree,level + 1,currentKBest);    }  }}  }
class C{  public static boolean equalsOnSystem(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SYSTEM);}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  private String processLink(JsonParser jsonParser) throws IOException {  final String link=jsonParser.getText();  if (link.contains(SVC_EXTENSION)) {    return link.substring(link.indexOf(SVC_EXTENSION) + SVC_EXTENSION.length());  }  return link;}  }
class C{  public static DataDisplayTable listScriptCoverage(Font font){  String[] header={"Script","Coverage"};  Align[] displayAlignment={Align.Left,Align.Right};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  HashMap<Integer,Integer> coveredScripts=new HashMap<Integer,Integer>();  CMap cmap=FontUtils.getUCSCMap(font);  for (  int charId : cmap) {    if (cmap.glyphId(charId) != CMapTable.NOTDEF) {      int scriptCode=UScript.getScript(charId);      int scriptCount=1;      if (coveredScripts.containsKey(scriptCode)) {        scriptCount+=coveredScripts.get(scriptCode);      }      coveredScripts.put(scriptCode,scriptCount);    }  }  Set<Integer> sortedScripts=new TreeSet<Integer>(coveredScripts.keySet());  int unknown=0;  for (  Integer scriptCode : sortedScripts) {    UnicodeSet scriptSet=null;    String scriptName=UScript.getName(scriptCode);    try {      scriptSet=new UnicodeSet("[[:" + scriptName + ":]]");    } catch (    IllegalIcuArgumentException e) {      unknown+=coveredScripts.get(scriptCode);      continue;    }    table.add(Arrays.asList(new String[]{scriptName,String.format("%d / %d",coveredScripts.get(scriptCode),scriptSet.size())}));  }  if (unknown > 0) {    table.add(Arrays.asList(new String[]{"Unsupported script",String.format("%d",unknown)}));  }  return table;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.848 -0500",hash_original_method="E49204FD271E895B10D86A1AFEA21B04",hash_generated_method="59B3C6A592AE63BEE2BC1CC1723B36DF") private Settings(){}  }
class C{  @Override public void onPause(){  super.onPause();  mWebView.onPause();}  }
class C{  public boolean isAddressedModePossible(@Nonnull jmri.LocoAddress l){  return isAddressedModePossible();}  }
class C{  public static <T>List<T> nCopies(final int length,T object){  return new CopiesList<T>(length,object);}  }
class C{  public ChunkCoords inDimension(World world){  return new ChunkCoords(world.provider.dimensionId,x,y,z);}  }
class C{  public InvalidObjectIdException(String message){  super(message);}  }
class C{  @Override public void initialize(){  super.initialize();  if (source_voltages.isEmpty() || sinks.isEmpty())   throw new IllegalArgumentException("Both sources and sinks (grounds) must be defined");  if (source_voltages.size() + sinks.size() > graph.getVertexCount())   throw new IllegalArgumentException("Source/sink sets overlap, or contain vertices not in graph");  for (  Map.Entry<V,? extends Number> entry : source_voltages.entrySet()) {    V v=entry.getKey();    if (sinks.contains(v))     throw new IllegalArgumentException("Vertex " + v + " is incorrectly specified as both source and sink");    double value=entry.getValue().doubleValue();    if (value <= 0)     throw new IllegalArgumentException("Source vertex " + v + " has negative voltage");  }  for (  V v : graph.getVertices()) {    if (source_voltages.containsKey(v))     setOutputValue(v,source_voltages.get(v).doubleValue()); else     setOutputValue(v,0.0);  }}  }
class C{  public void enterAnimation(){  imageView.setPivotX(0);  imageView.setPivotY(0);  imageView.setScaleX(mWidthScale);  imageView.setScaleY(mHeightScale);  imageView.setTranslationX(mLeftDelta);  imageView.setTranslationY(mTopDelta);  TimeInterpolator sDecelerator=new DecelerateInterpolator();  imageView.animate().setDuration(ANIM_DURATION).scaleX(1).scaleY(1).translationX(0).translationY(0).setInterpolator(sDecelerator);  ObjectAnimator bgAnim=ObjectAnimator.ofInt(colorDrawable,"alpha",0,255);  bgAnim.setDuration(ANIM_DURATION);  bgAnim.start();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean supportsDataManipulationTransactionsOnly(){  debugCodeCall("supportsDataManipulationTransactionsOnly");  return true;}  }
class C{  public int findIndexById(int id) throws Exception {  int i;  FolderTokenDocTreeNode node=null;  int idx=-1;  for (i=0; i < count(); i++) {    node=(FolderTokenDocTreeNode)m_nodes.get(i);    if (node.getId() == id) {      idx=i;      break;    }  }  return idx;}  }
class C{  private void doWork(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setDateHeader("Expires",0);  response.setHeader("Cache-Control","no-cache");  response.setHeader("Pragma","no-cache");  response.setContentType("text/html; charset=UTF-8");  HttpSession session=request.getSession();  UseCaseConf useCaseConf=(UseCaseConf)session.getAttribute(J_USECASECONF);  PrintWriter writer=response.getWriter();  try {    Document xmlDocument=bookUseCase.getBooks(useCaseConf);    String xslPath=ContextUtil.getRealPath(session.getServletContext(),XSL_LEST_RELATIVE_PATH);    if (_logger.isDebugEnabled()) {      _logger.debug("XSL path : " + xslPath);    }    Templates cachedXSLT=factory.newTemplates(new StreamSource(new InputStreamReader(new BufferedInputStream(new FileInputStream(xslPath)))));    Transformer transformer=cachedXSLT.newTransformer();    DocumentSource source=new DocumentSource(xmlDocument);    StreamResult result=new StreamResult(writer);    transformer.transform(source,result);  } catch (  ValidationException e) {    _logger.fatal("Error de validacion",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_EXCEPTION_VALIDATIONEXCEPTION));  }catch (  BookException e) {    _logger.fatal("Error en el libro",e);    ResponseUtils.generateJavaScriptError(writer,e);  }catch (  SessionException e) {    _logger.fatal("Error en la sesion",e);    ResponseUtils.generateJavaScriptError(writer,e);  }catch (  TransformerConfigurationException e) {    _logger.fatal("Error al obtener la lista de libros",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_CREATING_LESTREE_OBJ));  }catch (  TransformerFactoryConfigurationError e) {    _logger.fatal("Error al obtener la lista de libros",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_CREATING_LESTREE_OBJ));  }catch (  TransformerException e) {    _logger.fatal("Error al obtener la lista de libros",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_CREATING_LESTREE_OBJ));  }catch (  Exception e) {    _logger.fatal("Error al obtener la lista de libros",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_CREATING_LESTREE_OBJ));  }}  }
class C{  public static SimpleDatabase load(Credentials credentials,InputStream inputStream) throws Exception {  KdbxHeader kdbxHeader=new KdbxHeader();  InputStream kdbxInnerStream=KdbxSerializer.createUnencryptedInputStream(credentials,kdbxHeader,inputStream);  InputStream plainTextXmlStream=new XmlInputStreamFilter(kdbxInnerStream,new KdbxInputTransformer(new Salsa20StreamEncryptor(kdbxHeader.getProtectedStreamKey())));  KeePassFile result=getSerializer().read(KeePassFile.class,plainTextXmlStream);  if (!Arrays.equals(result.meta.headerHash.getContent(),kdbxHeader.getHeaderHash())) {    throw new IllegalStateException("Header Hash Mismatch");  }  return new SimpleDatabase(result);}  }
class C{  @Override public void saveWeights(){  for (int i=0; i < m_numInputs; i++) {    m_inputList[i].saveWeights();  }}  }
class C{  public IconBorder(Icon icon,int top,int left,int bottom,int right){  this.icon=icon;  this.top=top;  this.left=left;  this.bottom=bottom;  this.right=right;}  }
class C{  public PageRank(Hypergraph<V,E> graph,double alpha){  super(graph,ScoringUtils.getUniformRootPrior(graph.getVertices()),alpha);}  }
class C{  private void handlePasswordInputVisibility(){  int selectionStart=getSelectionStart();  int selectionEnd=getSelectionEnd();  if (passwordVisible) {    setTransformationMethod(null);  } else {    setTransformationMethod(PasswordTransformationMethod.getInstance());  }  setSelection(selectionStart,selectionEnd);}  }
class C{  public boolean changeDefaultList(String newDefault){  if (this.getItemLists().containsKey(newDefault)) {    this.setDefaultName(newDefault);    return true;  } else {    return false;  }}  }
class C{  public PoliticsDelegate(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Collection<String> listCerts() throws KeyStoreException {  Collection<String> certAlias=new ArrayList<String>();  for (Enumeration<String> e=_keyStore.aliases(); e.hasMoreElements(); ) {    String s=e.nextElement();    certAlias.add(s);  }  return certAlias;}  }
class C{  protected void spreadEvenly(double minY,double height){  double y=minY;  double sumOfLabelHeights=0.0;  for (int i=0; i < this.labels.size(); i++) {    sumOfLabelHeights+=getPieLabelRecord(i).getLabelHeight();  }  double gap=height - sumOfLabelHeights;  if (this.labels.size() > 1) {    gap=gap / (this.labels.size() - 1);  }  for (int i=0; i < this.labels.size(); i++) {    PieLabelRecord record=getPieLabelRecord(i);    y=y + record.getLabelHeight() / 2.0;    record.setAllocatedY(y);    y=y + record.getLabelHeight() / 2.0 + gap;  }}  }
class C{  private void key(byte key[]){  int i;  int koffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  private <T>T attribute(ClusterNode node,String attrName,T dfltVal){  T attr=node.attribute(attrName);  return attr == null ? dfltVal : attr;}  }
class C{  public void close() throws IOException, InterruptedException {  channel.close();  channel.join();  if (ownsPool)   pool.shutdown();  for (  Closeable c : closables)   c.close();}  }
class C{  public void checkpoint(EventData event) throws IllegalArgumentException, InterruptedException, ExecutionException {  setOffsetAndSequenceNumber(event.getSystemProperties().getOffset(),event.getSystemProperties().getSequenceNumber());  persistCheckpoint(new Checkpoint(this.partitionId,event.getSystemProperties().getOffset(),event.getSystemProperties().getSequenceNumber()));}  }
class C{  public static ApplicationMetaData loadApplicationMetaData(final Class clazz,final TimeProvider provider){  return loadApplicationMetaData(clazz.getProtectionDomain().getCodeSource(),provider);}  }
class C{  public static String[] computeSyncParameterTypes(IMethod asyncMethod) throws RemoteServiceException {  List<String> parameters=new ArrayList<String>();  String[] asyncParamTypeSigs=asyncMethod.getParameterTypes();  for (int i=0; i < asyncParamTypeSigs.length - 1; i++) {    parameters.add(resolveToQualifiedErasure(asyncMethod.getDeclaringType(),asyncParamTypeSigs[i]));  }  return parameters.toArray(NO_STRINGS);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final void errorResponseTest(){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SneakyThrows public void addKeyToKeystore(KeyStore keyStore,X509Certificate cert,RSAPrivateKey privateKey,String alias,String password){  KeyStore.PasswordProtection pass=new KeyStore.PasswordProtection(password.toCharArray());  Certificate[] certificateChain={cert};  keyStore.setEntry(alias,new KeyStore.PrivateKeyEntry(privateKey,certificateChain),pass);}  }
class C{  @GET @Path("{" + PARAM_NAME + "}") @ApiOperation(value="JSONP specific method which supports both read operation and store operation using GET") public ProjectFacetJob readOrStore(@PathParam("projectId") String projectId,@PathParam(PARAM_NAME) String jobId,@ApiParam(required=true) @QueryParam("facetJob") String facetJobJSON,@QueryParam("timeout") Integer timeout){  if (facetJobJSON == null) {    return delegate.read(userContext,new ProjectFacetJobPK(userContext.getCustomerId(),projectId,jobId));  } else {    ObjectMapper mapper=new ObjectMapper();    try {      ProjectFacetJob facetJob=mapper.readValue(facetJobJSON,ProjectFacetJob.class);      return delegate.store(userContext,facetJob,timeout);    } catch (    Exception e) {      throw new WebApplicationException(e);    }  }}  }
class C{  public TriggerProcessStatusException(String message){  super(message);}  }
class C{  Control[] convertControls(Vector<Control> ctls) throws NamingException {  int count=ctls.size();  if (count == 0) {    return null;  }  Control[] controls=new Control[count];  for (int i=0; i < count; i++) {    controls[i]=myResponseControlFactory.getControlInstance(ctls.elementAt(i));    if (controls[i] == null) {      controls[i]=ControlFactory.getControlInstance(ctls.elementAt(i),this,envprops);    }  }  return controls;}  }
class C{  @Override public boolean matches(InventoryCrafting inv,World world){  for (int x=0; x <= MAX_CRAFT_GRID_WIDTH - width; x++) {    for (int y=0; y <= MAX_CRAFT_GRID_HEIGHT - height; ++y) {      if (checkMatch(inv,x,y,false)) {        return true;      }      if (mirrored && checkMatch(inv,x,y,true)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public CAddressSpace createAddressSpace(final String name) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"IE00240: The value null is illegal for address space names");  final CAddressSpace space=m_provider.createAddressSpace(m_project,name);  m_addressSpaces.add(space);  for (  final IProjectListener listener : m_listeners) {    try {      listener.addedAddressSpace(m_project,space);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_project.getConfiguration().updateModificationDate();  return space;}  }
class C{  public FastByteArrayInputStream(final byte[] array){  this(array,0,array.length);}  }
class C{  public static SRegRequest createSRegRequest(ParameterList params) throws MessageException {  SRegRequest req=new SRegRequest(params);  if (!req.isValid())   throw new MessageException("Invalid parameters for a SReg request");  if (DEBUG)   _log.debug("Created SReg request from parameter list:\n" + params);  return req;}  }
class C{  public ClassNode makeArray(){  if (redirect != null) {    ClassNode res=redirect().makeArray();    res.componentType=this;    return res;  }  ClassNode cn;  if (clazz != null) {    Class ret=Array.newInstance(clazz,0).getClass();    cn=new ClassNode(ret,this);  } else {    cn=new ClassNode(this);  }  return cn;}  }
class C{  public static DefaultTransitionController wrapAnimator(@NonNull Animator anim){  AnimatorSet set=new AnimatorSet();  set.play(anim);  return new DefaultTransitionController(set);}  }
class C{  public MeanVariance averageSymmetricGini(){  MeanVariance mv=new MeanVariance();  for (int i1=0; i1 < size1; i1++) {    double purity=0.0;    if (contingency[i1][size2] > 0) {      final double cs=contingency[i1][size2];      for (int i2=0; i2 < size2; i2++) {        double rel=contingency[i1][i2] / cs;        purity+=rel * rel;      }      mv.put(purity,cs);    }  }  for (int i2=0; i2 < size2; i2++) {    double purity=0.0;    if (contingency[size1][i2] > 0) {      final double cs=contingency[size1][i2];      for (int i1=0; i1 < size1; i1++) {        double rel=contingency[i1][i2] / cs;        purity+=rel * rel;      }      mv.put(purity,cs);    }  }  return mv;}  }
class C{  public static boolean isPrime(int n){  if (n < 2) {    return false;  }  for (  int p : PRIMES) {    if (0 == (n % p)) {      return n == p;    }  }  return millerRabinPrimeTest(n);}  }
class C{  public Boolean isSendOnWarning(){  return sendOnWarning;}  }
class C{  public DefaultRenderStack(DefaultRenderStack prototype){  stack=new ArrayDeque<>(requireNonNull(prototype).stack);}  }
class C{  public MediaControllerEx(Activity activity,VideoView videoView){  super(activity);  this.videoView=videoView;  this.videoView.setMediaController(this);}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(BM25Similarity.class,sim.getClass());  BM25Similarity bm25=(BM25Similarity)sim;  assertEquals(1.2f,bm25.getK1(),0.01f);  assertEquals(0.76f,bm25.getB(),0.01f);}  }
class C{  public static boolean showAndGetAnswer(@NotNull Project project,@NotNull Map<GitRepository,List<GitCommit>> commits,@NotNull String branchToDelete,@NotNull List<String> mergedToBranches,@Nullable String baseBranch){  GitBranchIsNotFullyMergedDialog dialog=new GitBranchIsNotFullyMergedDialog(project,commits,branchToDelete,baseBranch,mergedToBranches);  ServiceManager.getService(project,GitPlatformFacade.class).showDialog(dialog);  return dialog.isOK();}  }
class C{  public void trustAllHosts(boolean trustAllHosts){  session.getProperties().remove("mail.smtp.ssl.trust");  if (trustAllHosts) {    session.getProperties().setProperty("mail.smtp.ssl.trust","*");  }}  }
class C{  public CustomFont(Image bitmap,int[] cutOffsets,int[] charWidth,String charsets){  this.cutOffsets=cutOffsets;  this.charWidth=charWidth;  this.charsets=charsets;  imageWidth=bitmap.getWidth();  imageHeight=bitmap.getHeight();  int[] imageArray=new int[imageWidth * imageHeight];  bitmap.getRGB(imageArray,0,0,0,imageWidth,imageHeight);  int ilen=imageArray.length;  for (int iter=0; iter < ilen; iter++) {    imageArray[iter]=((imageArray[iter] & 0xff0000) << 8);  }  cache=Image.createImage(imageArray,imageWidth,imageHeight);  imageArrayRef=imageArray;}  }
class C{  public ContainerEncryptionParams(String encryptionAlgorithm,AlgorithmParameterSpec encryptionSpec,SecretKey encryptionKey,String macAlgorithm,AlgorithmParameterSpec macSpec,SecretKey macKey,byte[] macTag,long authenticatedDataStart,long encryptedDataStart,long dataEnd) throws InvalidAlgorithmParameterException {  if (TextUtils.isEmpty(encryptionAlgorithm)) {    throw new NullPointerException("algorithm == null");  } else   if (encryptionSpec == null) {    throw new NullPointerException("encryptionSpec == null");  } else   if (encryptionKey == null) {    throw new NullPointerException("encryptionKey == null");  }  if (!TextUtils.isEmpty(macAlgorithm)) {    if (macKey == null) {      throw new NullPointerException("macKey == null");    }  }  if (!(encryptionSpec instanceof IvParameterSpec)) {    throw new InvalidAlgorithmParameterException("Unknown parameter spec class; must be IvParameters");  }  mEncryptionAlgorithm=encryptionAlgorithm;  mEncryptionSpec=(IvParameterSpec)encryptionSpec;  mEncryptionKey=encryptionKey;  mMacAlgorithm=macAlgorithm;  mMacSpec=macSpec;  mMacKey=macKey;  mMacTag=macTag;  mAuthenticatedDataStart=authenticatedDataStart;  mEncryptedDataStart=encryptedDataStart;  mDataEnd=dataEnd;}  }
class C{  protected int read(byte[] buffer) throws IOException {  return mTiffStream.read(buffer);}  }
class C{  public long scan() throws IOException {  return xscan();}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  public boolean isAssignableFrom(Class cl){  return getRawClass().isAssignableFrom(cl);}  }
class C{  public Vertex checkOnRepeat(Vertex response,Vertex conversation,int depth){  if (!response.hasRelationship(Primitive.ONREPEAT) || (depth == 0 && !conversation.hasRelationship(Primitive.SENTENCE,response))) {    return null;  }  if (depth > MAX_DEPTH) {    return null;  }  Collection<Relationship> repeats=response.getRelationships(Primitive.ONREPEAT);  for (  Relationship repeat : repeats) {    if (!conversation.hasRelationship(Primitive.SENTENCE,repeat.getTarget())) {      return repeat.getTarget();    }  }  for (  Relationship repeat : repeats) {    Vertex newResponse=checkOnRepeat(repeat.getTarget(),conversation,depth++);    if (newResponse != null) {      return newResponse;    }  }  for (  Relationship repeat : repeats) {    if (!response.hasRelationship(Primitive.REQUIRE,Primitive.NOREPEAT)) {      return repeat.getTarget();    }  }  return null;}  }
class C{  public BasicOrbitViewLimits(){  this.reset();}  }
class C{  public AbortProcessingException(){  super();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_ARG:    return basicSetTypeArg(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @PreAuthorize(Constant.ACCESS_HAS_ROLE_MODELER + " or " + Constant.ACCESS_HAS_ROLE_ADMIN) public void calculateCardinality(String tableName,String submitter){  String[] dbTableName=HadoopUtil.parseHiveTableName(tableName);  tableName=dbTableName[0] + "." + dbTableName[1];  TableDesc table=getMetadataManager().getTableDesc(tableName);  final Map<String,String> tableExd=getMetadataManager().getTableDescExd(tableName);  if (tableExd == null || table == null) {    IllegalArgumentException e=new IllegalArgumentException("Cannot find table descirptor " + tableName);    logger.error("Cannot find table descirptor " + tableName,e);    throw e;  }  DefaultChainedExecutable job=new DefaultChainedExecutable();  job.setName("Hive Column Cardinality calculation for table '" + tableName + "'");  job.setSubmitter(submitter);  String outPath=HiveColumnCardinalityJob.OUTPUT_PATH + "/" + tableName;  String param="-table " + tableName + " -output "+ outPath;  MapReduceExecutable step1=new MapReduceExecutable();  step1.setMapReduceJobClass(HiveColumnCardinalityJob.class);  step1.setMapReduceParams(param);  job.addTask(step1);  HadoopShellExecutable step2=new HadoopShellExecutable();  step2.setJobClass(HiveColumnCardinalityUpdateJob.class);  step2.setJobParams(param);  job.addTask(step2);  getExecutableManager().addJob(job);}  }
class C{  @DebugLog public static String ByteArrayToHexString(byte[] in_array){  if (in_array == null)   return null;  int i, j, in;  String[] hex={"0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"};  String out="";  for (j=0; j < in_array.length; ++j) {    in=(int)in_array[j] & 0xff;    i=(in >> 4) & 0x0f;    out+=hex[i];    i=in & 0x0f;    out+=hex[i];  }  return out;}  }
class C{  public void update(double close){  if (close > high) {    high=close;  }  if (close < low) {    low=close;  }  this.close=close;}  }
class C{  public long commit(){  if (fileStore != null) {    return commitAndSave();  }  long v=++currentVersion;  setWriteVersion(v);  return v;}  }
class C{  public WhitenedPCA(double regularization,int dims){  setRegularization(regularization);  setDimensions(dims);}  }
class C{  public static short[] toShortArray(Integer[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].shortValue();  }  return result;}  }
class C{  public EntityQuery filterByDate(String... filterByFieldName){  return this.filterByDate(null,filterByFieldName);}  }
class C{  @Override public IGangliaMetadataMessage resolve(IGangliaMetadataMessage decl){  return decl;}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public boolean transferBalance(final BufferLedger target){  Preconditions.checkNotNull(target);  Preconditions.checkArgument(allocator.root == target.allocator.root,"You can only transfer between two allocators that share the same root.");  allocator.assertOpen();  target.allocator.assertOpen();  if (target == this) {    return true;  }  try (AutoCloseableLock write=writeLock.open()){    if (owningLedger != this) {      return true;    }    if (BaseAllocator.DEBUG) {      this.historicalLog.recordEvent("transferBalance(%s)",target.allocator.name);      target.historicalLog.recordEvent("incoming(from %s)",owningLedger.allocator.name);    }    boolean overlimit=target.allocator.forceAllocate(size);    allocator.releaseBytes(size);    owningLedger=target;    return overlimit;  } }  }
class C{  public String[] queryEqualsKeys(String type,int index,String value,int page,int limit,int visibilityScope) throws CloudException {  return (String[])queryImpl(type,value,index,page,limit,visibilityScope,1,0,false,false,true,null);}  }
class C{  public DProblem(JFrame parent,String title,Problem problem){  super(parent,ModalityType.DOCUMENT_MODAL);  setTitle(title);  this.problem=problem;  initComponents();}  }
class C{  public void store(byte val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public Builder(){  this(TweetUi.getInstance());}  }
class C{  public void addJot(Jot jot){  getJots().add(jot);}  }
class C{  public SearchSourceBuilder fetchSource(boolean fetch){  if (this.fetchSourceContext == null) {    this.fetchSourceContext=new FetchSourceContext(fetch);  } else {    this.fetchSourceContext.fetchSource(fetch);  }  return this;}  }
class C{  public static double median(Array array) throws ExpressionException {  int len=array.size();  if (len == 0)   return 0;  if (array.getDimension() > 1)   throw new ExpressionException("Median() can only be calculated for one dimensional arrays");  double[] arr=new double[len];  for (int i=0; i < len; i++)   arr[i]=_toDoubleValue(array,i + 1);  Arrays.sort(arr);  double result=arr[len / 2];  if (len % 2 == 0) {    return (result + arr[(len - 2) / 2]) / 2;  }  return result;}  }
class C{  public void paint(final Graphics2D g2d,final int width,final int height){  g2d.setPaint(m_texture);  g2d.fillRect(0,0,width,height);}  }
class C{  public Pong(long nonce){  this.nonce=nonce;}  }
class C{  public void addNodesInDocOrder(NodeIterator iterator,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  Node node;  while (null != (node=iterator.nextNode())) {    addNodeInDocOrder(node,support);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void showPosition(File file,int line){  try {    String ln=getLine(file,line);    if (ln != null)     err(ln);  } catch (  IOException e) {  }}  }
class C{  @Override public void connectStorage(URI storage) throws ControllerException {  StorageSystem storageObj=null;  try {    storageObj=_dbClient.queryObject(StorageSystem.class,storage);  } catch (  Exception e) {    throw DeviceControllerException.exceptions.unableToConnectToStorageDeviceForMonitoringDbException(storage.toString(),e);  }  if (storageObj == null) {    throw DeviceControllerException.exceptions.unableToConnectToStorageDeviceForMonitoringDbNullRef(storage.toString());  }  FileStorageDevice storageDevice=getDevice(storageObj.getSystemType());  if (storageDevice == null) {    String devType=String.format("%1$s",storageDevice);    throw DeviceControllerException.exceptions.unableToConnectToStorageDeviceForMonitoringNoDevice(storage.toString(),devType);  }  storageDevice.doConnect(storageObj);  _log.info("Adding to storage device to work pool: {}",storageObj.getId());}  }
class C{  @Override protected void calculateBarWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){  CategoryAxis xAxis=plot.getDomainAxisForDataset(rendererIndex);  CategoryDataset data=plot.getDataset(rendererIndex);  if (data != null) {    PlotOrientation orientation=plot.getOrientation();    double space=0.0;    if (orientation == PlotOrientation.HORIZONTAL) {      space=dataArea.getHeight();    } else     if (orientation == PlotOrientation.VERTICAL) {      space=dataArea.getWidth();    }    double maxWidth=space * getMaximumBarWidth();    int columns=data.getColumnCount();    double categoryMargin=0.0;    if (columns > 1) {      categoryMargin=xAxis.getCategoryMargin();    }    double used=space * (1 - xAxis.getLowerMargin() - xAxis.getUpperMargin()- categoryMargin);    if (columns > 0) {      state.setBarWidth(Math.min(used / columns,maxWidth));    } else {      state.setBarWidth(Math.min(used,maxWidth));    }  }}  }
class C{  public static boolean testSphereSphere(float aX,float aY,float aZ,float radiusSquaredA,float bX,float bY,float bZ,float radiusSquaredB){  float dX=bX - aX, dY=bY - aY, dZ=bZ - aZ;  float distSquared=dX * dX + dY * dY + dZ * dZ;  float h=0.5f + (radiusSquaredA - radiusSquaredB) / distSquared;  float r_i=radiusSquaredA - h * h * distSquared;  return r_i >= 0.0f;}  }
class C{  public void flush() throws IOException {  if (closed) {    return;  }  if (gzipstream != null) {    gzipstream.flush();  }}  }
class C{  private static <E>int calculateSize(List<E> sortedInputList,Comparator<? super E> comparator){  long permutations=1;  int n=1;  int r=1;  while (n < sortedInputList.size()) {    int comparison=comparator.compare(sortedInputList.get(n - 1),sortedInputList.get(n));    if (comparison < 0) {      permutations*=binomial(n,r);      r=0;      if (!isPositiveInt(permutations)) {        return Integer.MAX_VALUE;      }    }    n++;    r++;  }  permutations*=binomial(n,r);  if (!isPositiveInt(permutations)) {    return Integer.MAX_VALUE;  }  return (int)permutations;}  }
class C{  @Override public void release(){  this.type=null;}  }
class C{  public void copyEndLocator(ParentNode another){  this.endLocator=another.endLocator;}  }
class C{  public static PasswordValidator buildExpireValidator(Map<String,String> properties){  List<Rule> ruleList=new ArrayList<Rule>();  ruleList.add(new ExpireRule(NumberUtils.toInt(properties.get(PASSWORD_EXPIRE_DAYS),0)));  PasswordValidator validator=new PasswordValidator(ruleList);  return validator;}  }
class C{  public void addArc(int nParent,int nChild) throws Exception {  if (m_bNeedsUndoAction) {    addUndoAction(new AddArcAction(nParent,nChild));  }  int nOldCard=m_ParentSets[nChild].getCardinalityOfParents();  m_ParentSets[nChild].addParent(nParent,m_Instances);  int nNewCard=m_ParentSets[nChild].getCardinalityOfParents();  Estimator[] ds=new Estimator[nNewCard];  for (int iParent=0; iParent < nNewCard; iParent++) {    ds[iParent]=Estimator.clone(m_Distributions[nChild][iParent % nOldCard]);  }  m_Distributions[nChild]=ds;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    int n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (int i=0; i < n; ++i) {      TryCatchBlockNode tcb=tryCatchBlocks.get(i);      if (tcb.visibleTypeAnnotations != null && tcb.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (tcb.invisibleTypeAnnotations != null && tcb.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }    }    for (int i=0; i < instructions.size(); ++i) {      AbstractInsnNode insn=instructions.get(i);      if (insn.visibleTypeAnnotations != null && insn.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn.invisibleTypeAnnotations != null && insn.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn instanceof MethodInsnNode) {        boolean itf=((MethodInsnNode)insn).itf;        if (itf != (insn.opcode == Opcodes.INVOKEINTERFACE)) {          throw new RuntimeException();        }      }    }    if (visibleLocalVariableAnnotations != null && visibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleLocalVariableAnnotations != null && invisibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public static void prune(TreeNodeVisitor root,PruningMethod method,ClassificationDataSet testSet){  prune(root,method,testSet.getAsDPPList());}  }
class C{  private static String sendRequest(String description) throws IOException, ParserConfigurationException, SAXException {  URL url;  if (description == null)   url=new URL(DEFAULT_URL + "/publicapi/verify"); else   url=new URL(DEFAULT_URL + "/publicapi/notify");  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  connection.setDoOutput(true);  connection.setRequestMethod("POST");  connection.setUseCaches(false);  connection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");  StringBuilder data=new StringBuilder();  addEncodedParameter(data,"apikey",API_KEY);  if (description != null) {    addEncodedParameter(data,"application",APP_NAME);    addEncodedParameter(data,"event",EVENT_NAME);    addEncodedParameter(data,"description",description);    addEncodedParameter(data,"priority",Integer.toString(0));  }  OutputStreamWriter writer;  writer=new OutputStreamWriter(connection.getOutputStream());  writer.write(data.toString());  writer.flush();  writer.close();  BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));  if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {    StringBuilder response=new StringBuilder();    String line;    while ((line=in.readLine()) != null) {      response.append(line);    }    boolean msgSent=false;    DocumentBuilder db=DocumentBuilderFactory.newInstance().newDocumentBuilder();    InputSource inStream=new InputSource();    inStream.setCharacterStream(new StringReader(response.toString()));    Document doc=db.parse(inStream);    Element root=doc.getDocumentElement();    if (root.getTagName().equals("nma")) {      Node item=root.getFirstChild();      String childName=item.getNodeName();      if (childName.equals("success"))       msgSent=true;    }    return (msgSent) ? "Message sent successfully" : "Message failed to send";  } else {    return "There was a problem contacting NMA Servers. " + "HTTP Response code different than 200(OK). " + "Try again or contact support@notifymyandroid.com if it persists.";  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return CHALLENGE;case 2:  return RESPONSE;default :return null;}}  }
class C{  public static String grabReturnType(String signature){  Matcher matcher=sigRE.matcher(signature);  boolean b=matcher.matches();  if (!b && matcher.groupCount() != 4) {    logger.error("Cannot create Method from DroidBlaze Signature");    droidsafe.main.Main.exit(1);  }  return matcher.group(2);}  }
class C{  public String formatArray(Object array,String delim){  return formatArray(array,delim,delim);}  }
class C{  protected VectorStoreReaderLucene(ThreadLocal<IndexInput> threadLocalIndexInput,FlagConfig flagConfig) throws IOException {  this.threadLocalIndexInput=threadLocalIndexInput;  this.flagConfig=flagConfig;  readHeadersFromIndexInput(flagConfig);}  }
class C{  public static Collection<RelatedType> all(){  return enums.all();}  }
class C{  private boolean isBeforeDot(char s[],int pos,int len){  for (int i=pos; i < len; ) {    final int ch=Character.codePointAt(s,i,len);    if (Character.getType(ch) != Character.NON_SPACING_MARK)     return false;    if (ch == COMBINING_DOT_ABOVE)     return true;    i+=Character.charCount(ch);  }  return false;}  }
class C{  @Override public int parse(char[] buf,int start,int end,T data){  int left_hit=left.parse(buf,start,end,data);  if (left_hit != NO_MATCH) {    int right_hit=right.parse(buf,start,start + left_hit,data);    if (left_hit == right_hit) {      return left_hit;    }  }  return NO_MATCH;}  }
class C{  public static void cacheClientItemId(ConsumerBean consumerBean,Long internalId,String clientId){  final String internalItemKey=MemCacheKeys.getItemClientId(consumerBean.getShort_name(),internalId);  MemCachePeer.put(internalItemKey,clientId,Constants.CACHING_TIME);}  }
class C{  public final void addElement(int rowIndex,int columnIndex,double value){  m_Matrix.set(rowIndex,columnIndex,m_Matrix.get(rowIndex,columnIndex) + value);}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  NetworkList response=client.get(NetworkList.class,baseUrl);  return ResourceUtils.defaultList(response.getNetworks());}  }
class C{  public String soundex(String str){  if (str == null) {    return null;  }  str=SoundexUtils.clean(str);  if (str.length() == 0) {    return str;  }  StringBuffer sBuf=new StringBuffer();  sBuf.append(str.charAt(0));  char last, current;  last='*';  for (int i=0; i < str.length(); i++) {    current=getMappingCode(str.charAt(i));    if (current == last) {      continue;    } else     if (current != 0) {      sBuf.append(current);    }    last=current;  }  return sBuf.toString();}  }
class C{  public GifImageView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  postInit(GifViewUtils.initImageView(this,attrs,defStyle,0));}  }
class C{  public MULANTest(String name){  super(name);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("users") @Valid Users users,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    String hashedPassword=DigestUtils.sha1Hex(users.getPassword());    com.wipro.ats.bdre.md.dao.jpa.Users jpaUsers=new com.wipro.ats.bdre.md.dao.jpa.Users();    jpaUsers.setPassword(hashedPassword);    jpaUsers.setUsername(users.getUsername());    jpaUsers.setEnabled((users.getEnabled() == 1) ? true : false);    usersDAO.insert(jpaUsers);    restWrapper=new RestWrapper(users,RestWrapper.OK);    LOGGER.info("Record with ID:" + users.getUsername() + " inserted in Users by User:"+ principal.getName()+ users);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private void jbInit() throws Exception {  this.setLocale(Language.getLoginLanguage().getLocale());  this.setLayout(mainLayout);  mainLayout.setHgap(2);  mainLayout.setVgap(2);  if (isNested)   this.add(m_curGC,BorderLayout.CENTER); else {    CPanel dummy=new CPanel();    dummy.setLayout(new BorderLayout());    dummy.setBorder(BorderFactory.createEmptyBorder(0,0,0,2));    dummy.add(tabPanel,BorderLayout.CENTER);    this.add(dummy,BorderLayout.CENTER);  }  this.add(statusBar,BorderLayout.SOUTH);  this.add(northPanel,BorderLayout.NORTH);  northPanel.setLayout(northLayout);  northLayout.setAlignment(FlowLayout.LEFT);  toolBar.putClientProperty("JToolBar.isRollover",Boolean.TRUE);  toolBar.setBorderPainted(false);  toolBar.setFloatable(false);  northPanel.add(toolBar,null);}  }
class C{  public Builder enableMustBeTrue(){  annotationSpecs.mustBeTrueIsSet=true;  return this;}  }
class C{  public ClientResponse initStandby(SiteConfigParam configParam){  WebResource rRoot=createRequest(INTERNAL_SITE_INIT_STANDBY);  ClientResponse resp=null;  try {    resp=addSignature(rRoot).put(ClientResponse.class,configParam);  } catch (  UniformInterfaceException e) {    log.warn("could not initialize target standby site. Err:{}",e);    throw e;  }  return resp;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void testSetIntrospectedIndexedProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  Beans.setIntrospectedIndexedProperty(introspectedTarget,INDEXED_PROPERTY,1,NEW_VALUE);  Beans.setIntrospectedIndexedProperty(hashedTarget,INDEXED_PROPERTY,1,NEW_VALUE);  assertEquals(OLD_VALUE,Beans.getIntrospectedIndexedProperty(introspectedTarget,INDEXED_PROPERTY,0));  assertEquals(NEW_VALUE,Beans.getIntrospectedIndexedProperty(introspectedTarget,INDEXED_PROPERTY,1));  assertNull(Beans.getIntrospectedIndexedProperty(hashedTarget,INDEXED_PROPERTY,0));  assertNull(Beans.getIntrospectedIndexedProperty(hashedTarget,INDEXED_PROPERTY,1));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public double eventTime(){  return time;}  }
class C{  public boolean equals(Object obj){  if (obj == null || (obj.getClass() != getClass())) {    return false;  }  AbstractDescendantSelector s=(AbstractDescendantSelector)obj;  return s.simpleSelector.equals(simpleSelector);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public boolean tryInsertPush(String pushId,String timestamp){  if (timestamp == null) {    throw new IllegalArgumentException("Can't insert null pushId or timestamp into history");  }  if (lastTime == null || timestamp.compareTo(lastTime) > 0) {    lastTime=timestamp;  }  if (pushIds.contains(pushId)) {    PLog.e(TAG,"Ignored duplicate push " + pushId);    return false;  }  entries.add(new Entry(pushId,timestamp));  pushIds.add(pushId);  while (entries.size() > maxHistoryLength) {    Entry head=entries.remove();    pushIds.remove(head.pushId);  }  return true;}  }
class C{  public PeerAddress(InetAddress addr,int port,int protocolVersion){  this.addr=checkNotNull(addr);  this.port=port;  this.protocolVersion=protocolVersion;  this.services=BigInteger.ZERO;  length=protocolVersion > 31402 ? MESSAGE_SIZE : MESSAGE_SIZE - 4;}  }
class C{  public void removeFromAllListeners(MapBean aMapBean){  if (aMapBean != null) {    findAndUndo(aMapBean);  }}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=(E[])new Object[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    E[][] newBuffers=(E[][])new Object[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  public void fireStatementClosed(Statement st){  if (st instanceof PreparedStatement) {    StatementEvent event=new StatementEvent(this,(PreparedStatement)st);    for (    StatementEventListener listener : statementEventListeners) {      listener.statementClosed(event);    }  }}  }
class C{  private byte[] decryptCTS(byte[] baseKey,int usage,byte[] ivec,byte[] ciphertext,int start,int len,boolean confounder_exists) throws GeneralSecurityException {  byte[] Ke=null;  byte[] Ki=null;  try {    byte[] constant=new byte[5];    constant[0]=(byte)((usage >> 24) & 0xff);    constant[1]=(byte)((usage >> 16) & 0xff);    constant[2]=(byte)((usage >> 8) & 0xff);    constant[3]=(byte)(usage & 0xff);    constant[4]=(byte)0xaa;    Ke=dk(baseKey,constant);    if (debug) {      System.err.println("usage: " + usage);      if (ivec != null) {        traceOutput("old_state.ivec",ivec,0,ivec.length);      }      traceOutput("ciphertext",ciphertext,start,Math.min(len,32));      traceOutput("constant",constant,0,constant.length);      traceOutput("baseKey",baseKey,0,baseKey.length);      traceOutput("Ke",Ke,0,Ke.length);    }    Cipher cipher=Cipher.getInstance("AES/CTS/NoPadding");    SecretKeySpec secretKey=new SecretKeySpec(Ke,"AES");    IvParameterSpec encIv=new IvParameterSpec(ivec,0,ivec.length);    cipher.init(Cipher.DECRYPT_MODE,secretKey,encIv);    byte[] plaintext=cipher.doFinal(ciphertext,start,len - hashSize);    if (debug) {      traceOutput("AES PlainText",plaintext,0,Math.min(plaintext.length,32));    }    constant[4]=(byte)0x55;    Ki=dk(baseKey,constant);    if (debug) {      traceOutput("constant",constant,0,constant.length);      traceOutput("Ki",Ki,0,Ke.length);    }    byte[] calculatedHmac=getHmac(Ki,plaintext);    int hmacOffset=start + len - hashSize;    if (debug) {      traceOutput("calculated Hmac",calculatedHmac,0,calculatedHmac.length);      traceOutput("message Hmac",ciphertext,hmacOffset,hashSize);    }    boolean cksumFailed=false;    if (calculatedHmac.length >= hashSize) {      for (int i=0; i < hashSize; i++) {        if (calculatedHmac[i] != ciphertext[hmacOffset + i]) {          cksumFailed=true;          if (debug) {            System.err.println("Checksum failed !");          }          break;        }      }    }    if (cksumFailed) {      throw new GeneralSecurityException("Checksum failed");    }    if (confounder_exists) {      byte[] output=new byte[plaintext.length - BLOCK_SIZE];      System.arraycopy(plaintext,BLOCK_SIZE,output,0,output.length);      return output;    } else {      return plaintext;    }  }  finally {    if (Ke != null) {      Arrays.fill(Ke,0,Ke.length,(byte)0);    }    if (Ki != null) {      Arrays.fill(Ki,0,Ki.length,(byte)0);    }  }}  }
class C{  public Text delete(int start,int end){  if (start > end)   throw new IndexOutOfBoundsException();  return subtext(0,start).concat(subtext(end));}  }
class C{  public static List<LockPatternViewEx.Cell> stringToPattern(String string){  List<LockPatternViewEx.Cell> result=Lists.newArrayList();  final byte[] bytes=string.getBytes();  for (int i=0; i < bytes.length; i++) {    byte b=bytes[i];    result.add(LockPatternViewEx.Cell.of(b / 3,b % 3));  }  return result;}  }
class C{  public boolean jdbcCompliant(){  return false;}  }
class C{  private Control createToolControl(Composite toolPanel,Tool tool){  try {    return tool.setupComposite(toolPanel);  } catch (  RuntimeException errSetup) {    logger.log(SEVERE,"error creating tool " + tool.getName());  }  return null;}  }
class C{  public void ensureCapacity(int minCapacity){  int minExpand=(elementData != EMPTY_ELEMENTDATA) ? 0 : DEFAULT_CAPACITY;  if (minCapacity > minExpand) {    ensureExplicitCapacity(minCapacity);  }}  }
class C{  public static final boolean isValidChar(char ch){  return RSyntaxUtilities.isLetterOrDigit(ch) || ch == '_';}  }
class C{  private void initApplet(){  try {    setLayout(null);    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  Exception e) {  }  fileChooser=new FileChooser(this);  this.add(fileChooser);  super.init();}  }
class C{  public void testCreateRuntimeConfiguration(){  this.factory.registerConfiguration("testableContainerId",ContainerType.REMOTE,ConfigurationType.RUNTIME,RuntimeConfigurationStub.class);  Configuration configuration=this.factory.createConfiguration("testableContainerId",ContainerType.REMOTE,ConfigurationType.RUNTIME);  assertEquals(RuntimeConfigurationStub.class.getName(),configuration.getClass().getName());}  }
class C{  @Override public long fileLength(String name) throws IOException {  ensureOpen();  FileEntry e=entries.get(IndexFileNames.stripSegmentName(name));  if (e == null)   throw new FileNotFoundException(name);  return e.length;}  }
class C{  public OperatorFactory(){  super();  customProviders=new ArrayList<OperatorProvider>();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public IsA_ createIsA_(){  IsA_Impl isA_=new IsA_Impl();  return isA_;}  }
class C{  protected boolean computeChildren(OpenableElementInfo info,File underlyingResource) throws JavaModelException {  HashtableOfArrayToObject rawPackageInfo=new HashtableOfArrayToObject();  IJavaElement[] children;  ZipFile jar=null;  try {    String compliance=CompilerOptions.VERSION_1_8;    jar=getJar();    rawPackageInfo.put(CharOperation.NO_STRINGS,new ArrayList[]{EMPTY_LIST,EMPTY_LIST});    for (Enumeration e=jar.entries(); e.hasMoreElements(); ) {      ZipEntry member=(ZipEntry)e.nextElement();      initRawPackageInfo(rawPackageInfo,member.getName(),member.isDirectory(),compliance);    }    children=new IJavaElement[rawPackageInfo.size()];    int index=0;    for (int i=0, length=rawPackageInfo.keyTable.length; i < length; i++) {      String[] pkgName=(String[])rawPackageInfo.keyTable[i];      if (pkgName == null)       continue;      children[index++]=getPackageFragment(pkgName);    }  } catch (  CoreException e) {    if (e.getCause() instanceof ZipException) {      Util.log(IStatus.ERROR,"Invalid ZIP archive: " + toStringWithAncestors());      children=NO_ELEMENTS;    } else     if (e instanceof JavaModelException) {      throw (JavaModelException)e;    } else {      throw new JavaModelException(e);    }  } finally {    manager.closeZipFile(jar);  }  info.setChildren(children);  ((JarPackageFragmentRootInfo)info).rawPackageInfo=rawPackageInfo;  return true;}  }
class C{  protected FinalizableProcessor(){}  }
class C{  public static void substituteSystemProperties(Node node){  substituteProperties(node,null);}  }
class C{  public XMLSerialization() throws Exception {  super();  clear();}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof StatusHistoryEntry) {    StatusHistoryEntry entry=(StatusHistoryEntry)obj;    if (entry.title.equals(title) && entry.game.equals(game)) {      return true;    }  }  return false;}  }
class C{  private String saveFormInError(String xml,String queuePathName,Exception exception){  String errorPath=saveForm(xml,XformsUtil.getXformsErrorDir(),queuePathName);  Context.getService(XformsService.class).sendStacktraceToAdminByEmail(Context.getMessageSourceService().getMessage("xforms.problemFailedProcessForm") + errorPath,exception);  return errorPath;}  }
class C{  public String globalInfo(){  return "Class implementing the brute force search algorithm for nearest " + "neighbour search.";}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Object rVal=null;  if (valueToConvert instanceof Money) {    rVal=JavaTypeTranslator.convert(targetType,valueToConvert.toString());  } else {    throw new JavaTypeTranslatorException("Value to convert must be a Money");  }  return (rVal);}  }
class C{  private void toggleMap(){  if (minimapW.isVisible()) {    GUIPreferences.getInstance().setMinimapEnabled(false);  } else {    GUIPreferences.getInstance().setMinimapEnabled(true);  }  minimapW.setVisible(!minimapW.isVisible());  if (minimapW.isVisible()) {    frame.requestFocus();  }}  }
class C{  @Override public void addLayoutComponent(String s,Component c){  if (s.equals(VIEWPORT)) {    viewport=(JViewport)addSingletonComponent(viewport,c);  } else   if (s.equals(VERTICAL_SCROLLBAR)) {    vsb=(JScrollBar)addSingletonComponent(vsb,c);  } else   if (s.equals(HORIZONTAL_SCROLLBAR)) {    hsb=(JScrollBar)addSingletonComponent(hsb,c);  } else   if (s.equals(ROW_HEADER)) {    rowHead=(JViewport)addSingletonComponent(rowHead,c);  } else   if (s.equals(COLUMN_HEADER)) {    colHead=(JViewport)addSingletonComponent(colHead,c);  } else   if (s.equals(LOWER_LEFT_CORNER)) {    lowerLeft=addSingletonComponent(lowerLeft,c);  } else   if (s.equals(LOWER_RIGHT_CORNER)) {    lowerRight=addSingletonComponent(lowerRight,c);  } else   if (s.equals(UPPER_LEFT_CORNER)) {    upperLeft=addSingletonComponent(upperLeft,c);  } else   if (s.equals(UPPER_RIGHT_CORNER)) {    upperRight=addSingletonComponent(upperRight,c);  } else {    throw new IllegalArgumentException("invalid layout key " + s);  }}  }
class C{  public void write(int b) throws IOException {  Set<OutputStream> outputStreams=this.streams;  for (  OutputStream out : outputStreams) {    out.write(b);  }}  }
class C{  void release(){  assert reserved.get() : "Message set was not reserved: " + this;  reserved.set(false);}  }
class C{  protected void eStopSlot(SprogSlot s){  log.debug("Estop slot: " + s.getSlotNumber() + " for address: "+ s.getAddr());  s.eStop();  notifySlotListeners(s);}  }
class C{  public html(String value){  setElementType("html");  addElement(value);}  }
class C{  public void execute() throws MojoExecutionException, MojoFailureException {  final Log log=getLog();  if (skip) {    log.info("Execution is skipped");    return;  } else   if ("pom".equals(project.getPackaging())) {    log.info("Execution is skipped for project with packaging 'pom'");    return;  }  log.info("Running Checker Framework version: " + checkerFrameworkVersion);  final String processor=(processors.size() > 0) ? StringUtils.join(processors.iterator(),",") : null;  if (processors.size() == 0) {    log.warn("No checkers have been specified.");  } else {    log.info("Running processor(s): " + processor);  }  final List<String> sources=PathUtils.scanForSources(compileSourceRoots,includes,excludes);  if (sources.size() == 0) {    log.info("No source files found.");    return;  }  locateArtifacts();  final Commandline cl=new Commandline();  if (StringUtils.isEmpty(executable)) {    executable="java";  }  final String executablePath=PathUtils.getExecutablePath(executable,toolchainManager,session);  cl.setExecutable(executablePath);  final String classpath=checkerJar.getAbsolutePath() + File.pathSeparator + StringUtils.join(classpathElements.iterator(),File.pathSeparator);  File srcFofn=null;  File cpFofn=null;  try {    srcFofn=PluginUtil.writeTmpSrcFofn("CFPlugin-maven-src",true,PluginUtil.toFiles(sources));    cpFofn=PluginUtil.writeTmpCpFile("CFPlugin-maven-cp",true,classpath);  } catch (  IOException e) {    if (srcFofn != null && srcFofn.exists()) {      srcFofn.delete();    }    if (cpFofn != null && cpFofn.exists()) {      cpFofn.delete();    }    throw new MojoExecutionException("Exception trying to write command file fofn!",e);  }  final File outputDirFile=new File(outputDirectory);  if (!procOnly && !outputDirFile.exists()) {    if (!outputDirFile.mkdirs()) {      throw new MojoExecutionException("Could not create output directory: " + outputDirFile.getAbsolutePath());    }  }  final Map<PluginUtil.CheckerProp,Object> props=makeProps();  final List<String> arguments=PluginUtil.getCmdArgsOnly(javacJar,jdkJar,srcFofn,processor,checkerJar.getAbsolutePath(),null,cpFofn,null,props,null,procOnly,outputDirectory);  cl.addArguments(arguments.toArray(new String[arguments.size()]));  createCommandLineExecutor().executeCommandLine(cl,log,failOnError);  srcFofn.delete();  cpFofn.delete();}  }
class C{  void flatten(Iterable<TypeDeclarationNode> types,List<TypeDeclarationNode> result,boolean hasNull){  for (  TypeDeclarationNode t : types) {switch (t.getToken()) {case NULL:      if (!hasNull) {        result.add(new TypeDeclarationNode(Token.NULL));        hasNull=true;      }    break;case UNION_TYPE:  Iterable<TypeDeclarationNode> children=FluentIterable.from(t.children()).transform(CAST_TYPE_NODE).toList();t.detachChildren();flatten(children,result,hasNull);break;default :result.add(t);break;}}}  }
class C{  @SuppressWarnings("unchecked") @Test @Category(RunnableOnService.class) public void testCoGroupByKeyWithWindowing(){  TupleTag<String> clicksTag=new TupleTag<>();  TupleTag<String> purchasesTag=new TupleTag<>();  Pipeline p=TestPipeline.create();  PCollection<KV<Integer,CoGbkResult>> coGbkResults=buildPurchasesCoGbkWithWindowing(p,clicksTag,purchasesTag);  PCollection<KV<String,String>> clickOfPurchase=coGbkResults.apply(ParDo.of(new ClickOfPurchaseFn(clicksTag,purchasesTag)));  PAssert.that(clickOfPurchase).containsInAnyOrder(KV.of("Click t0:Boat t1","0:3"),KV.of("Click t0:Shoesi t2","0:3"),KV.of("Click t0:Pens t3","0:3"),KV.of("Click t4:Car t6","4:7"),KV.of("Click t4:Book t7","4:7"),KV.of("Click t6:Car t6","4:7"),KV.of("Click t6:Book t7","4:7"),KV.of("Click t8:House t8","8:11"),KV.of("Click t8:Shoes t9","8:11"),KV.of("Click t8:House t10","8:11"));  p.run();}  }
class C{  private int formatPassword(AccessibilityEvent event,Context context,Utterance utterance){  int removed=event.getRemovedCount();  int added=event.getAddedCount();  if ((added <= 0) && (removed <= 0)) {    return REJECTED;  } else   if ((added == 1) && (removed <= 0)) {    utterance.addSpoken(context.getString(R.string.symbol_bullet));    return ADDED;  } else   if ((added <= 0) && (removed == 1)) {    utterance.addSpoken(context.getString(R.string.template_text_removed,context.getString(R.string.symbol_bullet)));    return REMOVED;  } else {    utterance.addSpoken(context.getString(R.string.template_replaced_characters,removed,added));    return REPLACED;  }}  }
class C{  public void testConnectTwoANTSensors(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  useANTSeonsor();  assertTrue(checkSensorsStatus_notRecording());  checkANTSensorsStatus(R.id.sensor_state_cadence);  checkANTSensorsStatus(R.id.sensor_state_heart_rate);}  }
class C{  public RepositoryConfig(){}  }
class C{  SelectLineAction(){  super(selectLineAction);  start=new BeginLineAction("pigdog",false);  end=new EndLineAction("pigdog",true);}  }
class C{  public void add(PemAttribute attribute){  attributes.add(attribute);}  }
class C{  public void removeInvitationListener(WorkgroupInvitationListener invitationListener){synchronized (invitationListeners) {    invitationListeners.remove(invitationListener);  }}  }
class C{  public void add(Annotation annotation){  throwIfImmutable();  if (annotation == null) {    throw new NullPointerException("annotation == null");  }  CstType type=annotation.getType();  if (annotations.containsKey(type)) {    throw new IllegalArgumentException("duplicate type: " + type.toHuman());  }  annotations.put(type,annotation);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Caret caret=target.getCaret();    int dot=caret.getDot();    verticalAction.actionPerformed(e);    if (dot == caret.getDot()) {      Point magic=caret.getMagicCaretPosition();      beginEndAction.actionPerformed(e);      caret.setMagicCaretPosition(magic);    }  }}  }
class C{  void destroy(){synchronized (this) {    if (isDestroyed())     return;    final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);    if (isDebugEnabled_DLS) {      logger.trace(LogMarker.DLS,"[simpleDestroy]");    }    boolean acquired=false;    try {      boolean locksHeld=false;      try {        acquireDestroyWriteLock(Long.MAX_VALUE);        acquired=true;        if (isInitializing()) {          locksHeld=true;        } else {synchronized (this.grantTokens) {            InternalDistributedMember me=this.dlock.getDistributionManager().getId();            for (Iterator iter=this.grantTokens.values().iterator(); iter.hasNext(); ) {              DLockGrantToken grant=(DLockGrantToken)iter.next();              InternalDistributedMember owner=grant.getOwner();              if (owner != null && !owner.equals(me)) {                locksHeld=true;                break;              }            }          }        }        if (isDebugEnabled_DLS) {          logger.trace(LogMarker.DLS,"[simpleDestroy] {} locks held",(locksHeld ? "with" : "without"));        }      }  finally {        try {          destroyGrantor();        }  finally {          this.dlock.clearGrantor(this.getVersionId(),locksHeld);        }      }    }  finally {      if (acquired) {        releaseDestroyWriteLock();      }    }  }}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  DefaultHandler current=getCurrentHandler();  if (current != this) {    current.endElement(namespaceURI,localName,qName);  }}  }
class C{  public static synchronized void saveToConf() throws Exception {  log.trace("persist()");  if (initialized) {    TokenConf.getInstance().save(currentTokens);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static Intent forgeResumeIntent(Context ctx,FileTransferDAO ftDao,Intent resume){  resume.setClass(ctx,InitiateFileTransfer.class);  resume.addFlags(Intent.FLAG_FROM_BACKGROUND | Intent.FLAG_ACTIVITY_NEW_TASK);  Bundle bundle=new Bundle();  bundle.putParcelable(BUNDLE_FTDAO_ID,ftDao);  resume.putExtras(bundle);  return resume;}  }
class C{  public Product copyForCustomer(Organization targetCustomer){  Product copy=new Product();  copy.setDataContainer(new ProductData());  copy.setType(ServiceType.CUSTOMER_TEMPLATE);  copy.setStatus(ServiceStatus.INACTIVE);  copy.setOwningSubscription(null);  copy.setTargetCustomer(targetCustomer);  copy.setVendor(this.getVendor());  copy.setTechnicalProduct(this.getTechnicalProduct());  copy.setTemplate(getTemplateOrSelf());  setDatacontainerValues(copy,ServiceType.CUSTOMER_TEMPLATE);  setParamatersAndPriceModel(copy);  return copy;}  }
class C{  public AugmentedNode<ILineSegment> root(){  return state.root();}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case ValidationPackage.VALIDATION_MARKER:{      ValidationMarker validationMarker=(ValidationMarker)theEObject;      T result=caseValidationMarker(validationMarker);      if (result == null)       result=defaultCase(theEObject);      return result;    }case ValidationPackage.PRE_VALIDATION:{    PreValidation preValidation=(PreValidation)theEObject;    T result=casePreValidation(preValidation);    if (result == null)     result=caseValidationMarker(preValidation);    if (result == null)     result=defaultCase(theEObject);    return result;  }case ValidationPackage.POST_VALIDATION:{  PostValidation postValidation=(PostValidation)theEObject;  T result=casePostValidation(postValidation);  if (result == null)   result=caseValidationMarker(postValidation);  if (result == null)   result=defaultCase(theEObject);  return result;}default :return defaultCase(theEObject);}}  }
class C{  public void addAll(SAXRecords records){  for (  SAXRecord record : records) {    char[] payload=record.getPayload();    for (    Integer i : record.getIndexes()) {      this.add(payload,i);    }  }}  }
class C{  public synchronized void addSeries(XYSeries series){  mSeries.add(series);}  }
class C{  public Iterator<ArchiveDescription> archiveIterator(){  return this.archives.iterator();}  }
class C{  public String toStringX(){  if (m_value instanceof NamePair) {    NamePair pp=(NamePair)m_value;    StringBuffer sb=new StringBuffer(m_columnName);    sb.append("(").append(pp.getID()).append(")").append("=").append(pp.getName());    if (m_isPKey)     sb.append("(PK)");    return sb.toString();  } else   return toString();}  }
class C{  @Override public LRUStatistics initStats(Object region,StatisticsFactory sf){  setRegionName(region);  final LRUStatistics stats=new HeapLRUStatistics(sf,getRegionName(),this);  setStats(stats);  return stats;}  }
class C{  public static String chompLast(String str,String sep){  if (str.length() == 0) {    return str;  }  String sub=str.substring(str.length() - sep.length());  if (sep.equals(sub)) {    return str.substring(0,str.length() - sep.length());  } else {    return str;  }}  }
class C{  public void testDoConfigureSetsHighLogging() throws Exception {  configuration.setProperty(GeneralPropertySet.LOGGING,LoggingLevel.HIGH.getLevel());  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("Debug","//weblogic:log-file-severity",config);}  }
class C{  public void cancel(){  cancelClicked=true;  setVisible(false);}  }
class C{  private static KeyStore createKeyStore(final URL url,String keystoreType,final String password) throws java.lang.Exception {  assert url != null;  InputStream is=null;  try {    KeyStore keystore=KeyStore.getInstance(keystoreType);    is=url.openStream();    keystore.load(is,password != null ? password.toCharArray() : null);    return keystore;  } catch (  java.lang.Exception e) {    System.out.println("Could not create keystore " + e);    throw e;  } finally {    if (is != null) {      try {        is.close();      } catch (      java.lang.Exception e) {        System.out.println(e);      }    }  }}  }
class C{  public boolean isLastFrag(){  return lastFrag;}  }
class C{  private void changeCamera(CameraUpdate update,CancelableCallback callback){  if (mAnimateToggle.isChecked()) {    if (mCustomDurationToggle.isChecked()) {      int duration=mCustomDurationBar.getProgress();      mMap.animateCamera(update,Math.max(duration,1),callback);    } else {      mMap.animateCamera(update,callback);    }  } else {    mMap.moveCamera(update);  }}  }
class C{  @Override public void resumeAllMutators(){synchronized (trigger) {    setState(MUTATOR);    trigger.notifyAll();  }}  }
class C{  final void resetCaches(){  this.cachedNextLinkId=null;  if (this.basicPlanAgentDelegate.getCurrentPlanElement() == null) {    throw new RuntimeException("encountered unexpected null pointer");  }  if (this.basicPlanAgentDelegate.getCurrentPlanElement() instanceof Leg) {    if (basicPlanAgentDelegate.getCurrentLeg().getRoute() == null) {      log.error("The agent " + this.getId() + " has no route in its leg. Setting agent state to abort.");      this.basicPlanAgentDelegate.setState(MobsimAgent.State.ABORT);    }  }  this.basicPlanAgentDelegate.resetCaches();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:36.851 -0500",hash_original_method="BF490B4BB4BD29ACC689E0297B614061",hash_generated_method="CB4D791D7A70B359EC627916815866E7") public void onListItemClick(ListView l,View v,int position,long id){}  }
class C{  public static QueryExp match(AttributeValueExp a,StringValueExp s){  return new MatchQueryExp(a,s);}  }
class C{  public DHParameterSpec(BigInteger p,BigInteger g,int l){  this.p=p;  this.g=g;  this.l=l;}  }
class C{  public NotificationChain basicSetAnnotationList(N4MemberAnnotationList newAnnotationList,NotificationChain msgs){  N4MemberAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public TurkishLowerCaseFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Override public boolean isCharacters(){  log.log(Level.FINE,"isCharacters(): {0}",event == CHARACTERS);  return event == CHARACTERS;}  }
class C{  public void shape(char[] text,int start,int count,int context){  if (isContextual()) {    contextualShape(text,start,count,getIndexFromRange(context));  } else {    nonContextualShape(text,start,count);  }}  }
class C{  public void testBug74998() throws Exception {  int maxAllowedPacketAtServer=Integer.parseInt(((MySQLConnection)this.conn).getServerVariable("max_allowed_packet"));  int maxAllowedPacketMinimumForTest=32 * 1024 * 1024;  if (maxAllowedPacketAtServer < maxAllowedPacketMinimumForTest) {    fail("You need to increase max_allowed_packet to at least " + maxAllowedPacketMinimumForTest + " before running this test!");  }  createTable("testBug74998","(id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY, data LONGBLOB)");  StringBuilder query=new StringBuilder("INSERT INTO testBug74998 (data) VALUES ('X')");  for (int i=0; i < 121; i++) {    query.append(",('X')");  }  assertEquals(122,this.stmt.executeUpdate(query.toString()));  int lengthOfRowForMultiPacket=maxAllowedPacketMinimumForTest - 15;  this.stmt.executeUpdate("INSERT INTO testBug74998 (data) VALUES (REPEAT('Y', " + lengthOfRowForMultiPacket + "))");  this.stmt.executeUpdate("INSERT INTO testBug74998 (data) VALUES ('Z')");  try {    this.rs=this.stmt.executeQuery("SELECT id, data FROM testBug74998 ORDER BY id");  } catch (  CommunicationsException e) {    if (e.getCause() instanceof IOException && "Packets received out of order".compareTo(e.getCause().getMessage()) == 0) {      fail("Failed to correctly fetch all data from communications layer due to wrong processing of muli-packet number.");    } else {      throw e;    }  }  for (int i=1; i <= 122; i++) {    assertTrue(this.rs.next());    assertEquals(i,this.rs.getInt(1));    assertEquals("X",this.rs.getString(2));  }  assertTrue(this.rs.next());  assertEquals(123,this.rs.getInt(1));  assertEquals("YYYYY",this.rs.getString(2).substring(0,5));  assertEquals("YYYYY",this.rs.getString(2).substring(lengthOfRowForMultiPacket - 5));  assertTrue(this.rs.next());  assertEquals(124,this.rs.getInt(1));  assertEquals("Z",this.rs.getString(2));  assertFalse(this.rs.next());}  }
class C{  public static ScaleAndIndex median(){  return scale(2).index(1);}  }
class C{  public void addAllOf(IntArrayList xElements,IntArrayList yElements,IntArrayList zElements){  int listSize=xElements.size();  if (this.size + listSize >= this.capacity)   flush();  this.target.addAllOf(xElements,yElements,zElements);}  }
class C{  @SuppressWarnings("unchecked") public Class<? extends Enum> enumType(){  return enumType;}  }
class C{  public boolean moreInstructionsInBasicBlock(){  return instructionIterator.hasNext();}  }
class C{  public ObjectQuery prepareObjectQuery(QueryLanguage ql,String query,String baseURI) throws MalformedQueryException, RepositoryException {  return createObjectQuery(prepareTupleQuery(ql,query,baseURI));}  }
class C{  public VNXeCommandJob deleteFileSystemSnap(String snapId,String softwareVersion) throws VNXeException {  if (!VNXeUtils.isHigherVersion(softwareVersion,VNXeConstants.VNXE_BASE_SOFT_VER)) {    _url=URL_INSTANCE + snapId;  } else {    _url=URL_INSTANCE_V31 + snapId;  }  setQueryParameters(null);  if (getDataForOneObject(VNXeFileSystemSnap.class) != null) {    unsetQueryParameters();    return deleteRequestAsync(null);  } else {    throw VNXeException.exceptions.vnxeCommandFailed(String.format("No filesystem snap %s found",snapId));  }}  }
class C{  protected boolean escapingNotNeeded(char ch){  final boolean ret;  if (ch < 127) {    if (ch >= CharInfo.S_SPACE || (CharInfo.S_LINEFEED == ch || CharInfo.S_CARRIAGERETURN == ch || CharInfo.S_HORIZONAL_TAB == ch))     ret=true; else     ret=false;  } else {    ret=m_encodingInfo.isInEncoding(ch);  }  return ret;}  }
class C{  protected void sequence_ThisTypeRefNominal(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void statBegin(int pos){  if (pos != Position.NOPOS) {    pendingStatPos=pos;  }}  }
class C{  public TLongDoubleHashMap(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  protected void tearDown(){  try {    br.close();  } catch (  Exception e) {  }}  }
class C{  @Override public boolean isDone(){  return (index >= path.size() + (path.isClosed() ? 2 : 0));}  }
class C{  static public BigDecimal convert(Properties ctx,int C_UOM_ID,int C_UOM_To_ID,BigDecimal qty){  if (qty == null || qty.compareTo(Env.ZERO) == 0 || C_UOM_ID == C_UOM_To_ID)   return qty;  BigDecimal retValue=getRate(ctx,C_UOM_ID,C_UOM_To_ID);  if (retValue != null) {    MUOM uom=MUOM.get(ctx,C_UOM_To_ID);    if (uom != null)     return uom.round(retValue.multiply(qty),true);    return retValue.multiply(qty);  }  return null;}  }
class C{  public Request withRationale(Rationale rationale){  this.rationaleRef=new WeakReference<>(rationale);  return this;}  }
class C{  private void socksBind() throws IOException {  try {    IoBridge.connect(fd,socksGetServerAddress(),socksGetServerPort());  } catch (  Exception e) {    throw new IOException("Unable to connect to SOCKS server",e);  }  if (lastConnectedAddress == null) {    throw new SocketException("Invalid SOCKS client");  }  socksSendRequest(Socks4Message.COMMAND_BIND,lastConnectedAddress,lastConnectedPort);  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }  if (reply.getIP() == 0) {    address=socksGetServerAddress();  } else {    byte[] replyBytes=new byte[4];    Memory.pokeInt(replyBytes,0,reply.getIP(),ByteOrder.BIG_ENDIAN);    address=InetAddress.getByAddress(replyBytes);  }  localport=reply.getPort();}  }
class C{  public HeapA(Comparator<? super E> comparator){  this.comparator=comparator;}  }
class C{  public Dependency(String name,String version){  this.extensionId=name;  this.version=version;}  }
class C{  private PriorityQueue<ScoreTerm> createQueue(Map<String,Map<String,Int>> perFieldTermFrequencies) throws IOException {  int numDocs=ir.numDocs();  final int limit=Math.min(maxQueryTerms,this.getTermsCount(perFieldTermFrequencies));  FreqQ queue=new FreqQ(limit);  for (  Map.Entry<String,Map<String,Int>> entry : perFieldTermFrequencies.entrySet()) {    Map<String,Int> perWordTermFrequencies=entry.getValue();    String fieldName=entry.getKey();    for (    Map.Entry<String,Int> tfEntry : perWordTermFrequencies.entrySet()) {      String word=tfEntry.getKey();      int tf=tfEntry.getValue().x;      if (minTermFreq > 0 && tf < minTermFreq) {        continue;      }      int docFreq=ir.docFreq(new Term(fieldName,word));      if (minDocFreq > 0 && docFreq < minDocFreq) {        continue;      }      if (docFreq > maxDocFreq) {        continue;      }      if (docFreq == 0) {        continue;      }      float idf=similarity.idf(docFreq,numDocs);      float score=tf * idf;      if (queue.size() < limit) {        queue.add(new ScoreTerm(word,fieldName,score,idf,docFreq,tf));      } else {        ScoreTerm term=queue.top();        if (term.score < score) {          term.update(word,fieldName,score,idf,docFreq,tf);          queue.updateTop();        }      }    }  }  return queue;}  }
class C{  private void logMessage(String msg,Object[] obj){  if (_monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("-> " + msg,obj);  }}  }
class C{  public void testMultiValuedNRQ() throws Exception {  Directory directory=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),directory,newIndexWriterConfig(new MockAnalyzer(random())).setMaxBufferedDocs(TestUtil.nextInt(random(),50,1000)));  DecimalFormat format=new DecimalFormat("00000000000",new DecimalFormatSymbols(Locale.ROOT));  int num=atLeast(500);  for (int l=0; l < num; l++) {    Document doc=new Document();    for (int m=0, c=random().nextInt(10); m <= c; m++) {      int value=random().nextInt(Integer.MAX_VALUE);      doc.add(newStringField("asc",format.format(value),Field.Store.NO));      doc.add(new LegacyIntField("trie",value,Field.Store.NO));    }    writer.addDocument(doc);  }  IndexReader reader=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(reader);  num=atLeast(50);  for (int i=0; i < num; i++) {    int lower=random().nextInt(Integer.MAX_VALUE);    int upper=random().nextInt(Integer.MAX_VALUE);    if (lower > upper) {      int a=lower;      lower=upper;      upper=a;    }    TermRangeQuery cq=TermRangeQuery.newStringRange("asc",format.format(lower),format.format(upper),true,true);    LegacyNumericRangeQuery<Integer> tq=LegacyNumericRangeQuery.newIntRange("trie",lower,upper,true,true);    TopDocs trTopDocs=searcher.search(cq,1);    TopDocs nrTopDocs=searcher.search(tq,1);    assertEquals("Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal",trTopDocs.totalHits,nrTopDocs.totalHits);  }  reader.close();  directory.close();}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  @Override public List<String> addSecurityGroupsToEc2Instance(String ec2InstanceId,List<String> securityGroups,AwsParamsDto awsParams){  Set<String> updatedSecurityGroups=new HashSet<>();  for (  String securityGroup : securityGroups) {    updatedSecurityGroups.add(securityGroup);  }  DescribeInstanceAttributeRequest describeInstanceAttributeRequest=new DescribeInstanceAttributeRequest().withInstanceId(ec2InstanceId).withAttribute(InstanceAttributeName.GroupSet);  DescribeInstanceAttributeResult describeInstanceAttributeResult=ec2Operations.describeInstanceAttribute(getEc2Client(awsParams),describeInstanceAttributeRequest);  List<GroupIdentifier> groups=describeInstanceAttributeResult.getInstanceAttribute().getGroups();  for (  GroupIdentifier groupIdentifier : groups) {    updatedSecurityGroups.add(groupIdentifier.getGroupId());  }  ModifyInstanceAttributeRequest modifyInstanceAttributeRequest=new ModifyInstanceAttributeRequest().withInstanceId(ec2InstanceId).withGroups(updatedSecurityGroups);  ec2Operations.modifyInstanceAttribute(getEc2Client(awsParams),modifyInstanceAttributeRequest);  return new ArrayList<>(updatedSecurityGroups);}  }
class C{  public boolean commandInput(String channel,String text){  String[] split=text.trim().split(" ",2);  String command=split[0].substring(1);  String parameter=null;  if (split.length == 2) {    parameter=split[1];  }  return command(channel,command,parameter);}  }
class C{  public Boolean isCheckErrorPercent(){  return checkErrorPercent;}  }
class C{  public void removePoint(double weight,int targetClass){  counts[targetClass]-=weight;  sumOfWeights-=weight;}  }
class C{  private static List<String> determinePaths(final MethodResult methodResult){  final List<String> paths=new LinkedList<>();  MethodResult currentMethod=methodResult;  while (true) {    addNonBlank(currentMethod.getPath(),paths);    final ClassResult parentClass=currentMethod.getParentResource();    if (parentClass == null)     break;    currentMethod=parentClass.getParentSubResourceLocator();    if (currentMethod == null) {      addNonBlank(parentClass.getResourcePath(),paths);      break;    }  }  Collections.reverse(paths);  return paths;}  }
class C{  public static void waitForInstancesToBeStopped(AmazonEC2AsyncClient client,VerificationHost host,List<String> instanceIdsToStop) throws Throwable {  ArrayList<Boolean> stopFlags=new ArrayList<>(instanceIdsToStop.size());  for (int i=0; i < instanceIdsToStop.size(); i++) {    stopFlags.add(i,Boolean.FALSE);  }  host.waitFor("Error waiting for EC2 client stop instances in test ",null);}  }
class C{  public void think(){}  }
class C{  public Matrix4d m21(double m21){  this.m21=m21;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public Strategy strategy(){  return strategy;}  }
class C{  public void centerMapHorizontally(){  if (grid.getWidth() > getWidth()) {    int dx=(getWidth() - grid.getWidth()) / 2;    scrollBy(-dx,0);  }}  }
class C{  public static void removeForward(InetSocketAddress adbSockAddr,Device device,String localPortSpec,String remotePortSpec) throws TimeoutException, AdbCommandRejectedException, IOException {  try (SocketChannel adbChan=SocketChannel.open(adbSockAddr)){    adbChan.configureBlocking(false);    byte[] request=formAdbRequest(String.format("host-serial:%1$s:killforward:%2$s",device.getSerialNumber(),localPortSpec));    write(adbChan,request);    AdbResponse resp=readAdbResponse(adbChan,false);    if (!resp.okay) {      Log.w("remove-forward","Error creating forward: " + resp.message);      throw new AdbCommandRejectedException(resp.message);    }  } }  }
class C{  public void addField(DatabaseField field){  m_fields.put(field.getNameForComparisons(),field);}  }
class C{  public String generate(IStatusBar statusBar,KeyNamePair docTypeKNPair,String docActionSelected){  String info="";  String trxName=Trx.createTrxName("IVG");  Trx trx=Trx.get(trxName,true);  setSelectionActive(false);  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"InvGenerateGen"));  statusBar.setStatusDB(String.valueOf(getSelection().size()));  int AD_Process_ID=0;  if (docTypeKNPair.getKey() == MInOut.Table_ID) {    AD_Process_ID=53345;  } else {  }  MPInstance instance=new MPInstance(Env.getCtx(),AD_Process_ID,0);  if (!instance.save()) {    info=Msg.getMsg(Env.getCtx(),"ProcessNoInstance");    return info;  }  StringBuffer insert=new StringBuffer();  insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");  int counter=0;  for (  Integer selectedId : getSelection()) {    counter++;    if (counter > 1)     insert.append(" UNION ");    insert.append("SELECT ");    insert.append(instance.getAD_PInstance_ID());    insert.append(", ");    insert.append(selectedId);    insert.append(" FROM DUAL ");    if (counter == 1000) {      if (DB.executeUpdate(insert.toString(),trxName) < 0) {        String msg="No Invoices";        info=msg;        log.config(msg);        trx.rollback();        return info;      }      insert=new StringBuffer();      insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");      counter=0;    }  }  if (counter > 0) {    if (DB.executeUpdate(insert.toString(),trxName) < 0) {      String msg="No Invoices";      info=msg;      log.config(msg);      trx.rollback();      return info;    }  }  ProcessInfo pi=new ProcessInfo("",AD_Process_ID);  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  MPInstancePara para=new MPInstancePara(instance,10);  para.setParameter("Selection","Y");  if (!para.save()) {    String msg="No Selection Parameter added";    info=msg;    log.log(Level.SEVERE,msg);    return info;  }  para=new MPInstancePara(instance,20);  para.setParameter("DocAction",docActionSelected);  if (!para.save()) {    String msg="No DocAction Parameter added";    info=msg;    log.log(Level.SEVERE,msg);    return info;  }  setTrx(trx);  setProcessInfo(pi);  return info;}  }
class C{  protected void addToChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_toChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_toChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__TO_CHANNELS,true,false,true,null,null,null));}  }
class C{  private void selectEmail(NaviSelect<Email> navi){  Stage dialog=new Stage(StageStyle.UTILITY);  dialog.setTitle("Choose person");  ListView<Email> listview=new ListView<>(FXCollections.observableArrayList(new Email("john@doe.com","John Doe"),new Email("jane@doe.com","Jane Doe"),new Email("some@dude.com","Some Dude")));  listview.setOnMouseClicked(null);  dialog.setScene(new Scene(listview));  dialog.setWidth(navi.getWidth());  dialog.initModality(Modality.APPLICATION_MODAL);  dialog.setHeight(100);  dialog.showAndWait();}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public TestNanoSparqlServerWithProxyIndexManager(String name){  this(name,getTemporaryJournal(BufferMode.DiskRW),TestMode.triples);}  }
class C{  private void checkNotParsing(String type,String name) throws SAXNotSupportedException {  if (parsing) {    throw new SAXNotSupportedException("Cannot change " + type + ' '+ name+ " while parsing");  }}  }
class C{  public FloatTag(float value){  super(TagType.FLOAT);  this.value=value;}  }
class C{  private static void generateFiles(){  String[] classNames;  ResourceBundle rules, info;  info=ResourceBundle.getBundle("sun.text.resources.BreakIteratorInfo",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);  classNames=info.getStringArray("BreakIteratorClasses");  rules=ResourceBundle.getBundle("sun.text.resources.BreakIteratorRules",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);  if (info.containsKey("CharacterData")) {    generateDataFile(info.getString("CharacterData"),rules.getString("CharacterBreakRules"),classNames[0]);  }  if (info.containsKey("WordData")) {    generateDataFile(info.getString("WordData"),rules.getString("WordBreakRules"),classNames[1]);  }  if (info.containsKey("LineData")) {    generateDataFile(info.getString("LineData"),rules.getString("LineBreakRules"),classNames[2]);  }  if (info.containsKey("SentenceData")) {    generateDataFile(info.getString("SentenceData"),rules.getString("SentenceBreakRules"),classNames[3]);  }}  }
class C{  public JBBPOut Bit(final boolean... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final boolean b : value) {      this._writeBits(JBBPBitNumber.BITS_1,b ? 1 : 0);    }  }  return this;}  }
class C{  private int mulsubBorrow(int[] q,int[] a,int x,int len,int offset){  long xLong=x & LONG_MASK;  long carry=0;  offset+=len;  for (int j=len - 1; j >= 0; j--) {    long product=(a[j] & LONG_MASK) * xLong + carry;    long difference=q[offset--] - product;    carry=(product >>> 32) + (((difference & LONG_MASK) > (((~(int)product) & LONG_MASK))) ? 1 : 0);  }  return (int)carry;}  }
class C{  @Override public void attachSubWindow(View container){  if (container.getParent() != null) {    ((ViewGroup)container.getParent()).removeView(container);  }  mContentView.addView(container,COVER_SCREEN_PARAMS);}  }
class C{  public boolean hasTargetLanguage(){  return hasExtension(TargetLanguage.class);}  }
class C{  @SuppressWarnings("unused") public void testBadStreamSize(){  SplittableRandom r=new SplittableRandom();  Runnable[] throwingActions={null,null,null,null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  public static void check(int i){  if (i < 0 || i > 0xFFFF)   throw new InvalidDClassException(i);}  }
class C{  public boolean hasStructuralChanges(byte[] newBytes){  return hasStructuralChanges(newBytes,true,true);}  }
class C{  private static ReferenceElement.ReferenceElementResult parseClassOrInterfaceTypeStrict(PsiBuilder builder,boolean expressionPossible){  PsiBuilder.Marker arrMarker=builder.mark();  PsiBuilder.Marker typeElementMarker=builder.mark();  final ReferenceElement.ReferenceElementResult result=ReferenceElement.parseReferenceElement(builder,false,expressionPossible);  if (result == ReferenceElement.ReferenceElementResult.FAIL) {    typeElementMarker.drop();    arrMarker.rollbackTo();    return result;  }  typeElementMarker.done(GroovyElementTypes.CLASS_TYPE_ELEMENT);  if (GroovyTokenTypes.mLBRACK.equals(builder.getTokenType())) {    return declarationBracketsParseStrict(builder,arrMarker) ? ReferenceElement.ReferenceElementResult.REF_WITH_TYPE_PARAMS : ReferenceElement.ReferenceElementResult.FAIL;  } else {    arrMarker.drop();    return result;  }}  }
class C{  public boolean containsDistinct(Value[] values){  if (distinctRows == null) {    distinctRows=ValueHashMap.newInstance();    for (    Value[] row : rows) {      ValueArray array=getArrayOfVisible(row);      distinctRows.put(array,array.getList());    }  }  ValueArray array=ValueArray.get(values);  return distinctRows.get(array) != null;}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public ExtendedMessageFormat(final String pattern,final Map<String,? extends FormatFactory> registry){  this(pattern,Locale.getDefault(),registry);}  }
class C{  public void writeListEnd() throws IOException {  print("</list>");}  }
class C{  public boolean equals(Object obj){  return (obj instanceof TextLayout) && equals((TextLayout)obj);}  }
class C{  void write(int value){  this.x=value;  this.y=-value;}  }
class C{  private void addToWorkList(LinkedList<WorkListItem> workList,WorkListItem itemToAdd){  if (DEBUG) {    new RuntimeException("Adding work list item " + itemToAdd).printStackTrace(System.out);  }  if (!itemToAdd.isAppCodeBase()) {    workList.addLast(itemToAdd);    return;  }  ListIterator<WorkListItem> i=workList.listIterator();  while (i.hasNext()) {    WorkListItem listItem=i.next();    if (!listItem.isAppCodeBase()) {      i.previous();      break;    }  }  i.add(itemToAdd);}  }
class C{  @Override public void smaller(int size){  radius=mOriginR - size;}  }
class C{  public RenameTypeParameterProcessor(ITypeParameter parameter){  fTypeParameter=parameter;  if (parameter != null)   setNewElementName(parameter.getElementName());}  }
class C{  public static com.github.lwhite1.tablesaw.api.Table readTable(String path) throws IOException {  ExecutorService executorService=Executors.newFixedThreadPool(READER_POOL_SIZE);  CompletionService readerCompletionService=new ExecutorCompletionService<>(executorService);  TableMetadata tableMetadata=readTableMetadata(path + separator() + "Metadata.json");  List<ColumnMetadata> columnMetadata=tableMetadata.getColumnMetadataList();  Table table=Table.create(tableMetadata);  ConcurrentLinkedQueue<Column> columnList=new ConcurrentLinkedQueue<>();  Map<String,Column> columns=new HashMap<>();  try {    for (    ColumnMetadata column : columnMetadata) {      readerCompletionService.submit(null);    }    for (int i=0; i < columnMetadata.size(); i++) {      Future future=readerCompletionService.take();      future.get();    }    for (    Column c : columnList) {      columns.put(c.id(),c);    }    for (    ColumnMetadata metadata : columnMetadata) {      String id=metadata.getId();      table.addColumn(columns.get(id));    }  } catch (  InterruptedException|ExecutionException e) {    throw new RuntimeException(e);  }  executorService.shutdown();  return table;}  }
class C{  @Override public void putValue(String key,Object value){  if ((key == null) || (value == null)) {    throw new IllegalArgumentException("arguments can not be null");  }  SecureKey secureKey=new SecureKey(key);  Object oldValue=table.put(secureKey,value);  if (oldValue instanceof SSLSessionBindingListener) {    SSLSessionBindingEvent e;    e=new SSLSessionBindingEvent(this,key);    ((SSLSessionBindingListener)oldValue).valueUnbound(e);  }  if (value instanceof SSLSessionBindingListener) {    SSLSessionBindingEvent e;    e=new SSLSessionBindingEvent(this,key);    ((SSLSessionBindingListener)value).valueBound(e);  }}  }
class C{  public void save(final RenderedImage image){  try {    Files.newFolder(scope,snapshotFolder);  } catch (  final GamaRuntimeException e1) {    e1.addContext("Impossible to create folder " + snapshotFolder);    GAMA.reportError(scope,e1,false);    e1.printStackTrace();    return;  }  final String file=snapshotFolder + "/" + GAMA.getModel().getName()+ "_display_"+ scope.getClock().getCycle()+ ".png";  DataOutputStream os=null;  try {    os=new DataOutputStream(new FileOutputStream(file));    ImageIO.write(image,"png",os);  } catch (  final java.io.IOException ex) {    final GamaRuntimeException e=GamaRuntimeException.create(ex,scope);    e.addContext("Unable to create output stream for snapshot image");    GAMA.reportError(getScope(),e,false);  } finally {    try {      if (os != null) {        os.close();      }    } catch (    final Throwable ex) {      final GamaRuntimeException e=GamaRuntimeException.create(ex,scope);      e.addContext("Unable to close output stream for snapshot image");      GAMA.reportError(getScope(),e,false);    }  }}  }
class C{  public static <T>T[] insert(T[] dest,T src,int offset){  Class<T> componentType=(Class<T>)dest.getClass().getComponentType();  return insert(dest,src,offset,componentType);}  }
class C{  private void applyAccurals(AppUser currentUser){  Collection<LoanTransaction> accruals=retreiveListOfAccrualTransactions();  if (isPeriodicAccrualAccountingEnabledOnLoanProduct()) {    applyPeriodicAccruals(accruals);  } else   if (isNoneOrCashOrUpfrontAccrualAccountingEnabledOnLoanProduct()) {    updateAccrualsForNonPeriodicAccruals(accruals,currentUser);  }}  }
class C{  public NavMouseMode(){  this(true);  rectAttributes.setLinePaint(Color.GRAY);  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);  rectAttributes.setMatted(true);}  }
class C{  private static void configureHadoop(){  String igniteHome=U.getIgniteHome();  println("IGNITE_HOME is set to '" + igniteHome + "'.");  checkIgniteHome(igniteHome);  String homeVar="HADOOP_HOME";  String hadoopHome=System.getenv(homeVar);  if (F.isEmpty(hadoopHome)) {    homeVar="HADOOP_PREFIX";    hadoopHome=System.getenv(homeVar);  }  if (F.isEmpty(hadoopHome))   exit("Neither HADOOP_HOME nor HADOOP_PREFIX environment variable is set. Please set one of them to a " + "valid Hadoop installation directory and run setup tool again.",null);  hadoopHome=hadoopHome.replaceAll("\"","");  println(homeVar + " is set to '" + hadoopHome+ "'.");  String hiveHome=System.getenv("HIVE_HOME");  if (!F.isEmpty(hiveHome)) {    hiveHome=hiveHome.replaceAll("\"","");    println("HIVE_HOME is set to '" + hiveHome + "'.");  }  File hadoopDir=new File(hadoopHome);  if (!hadoopDir.exists())   exit("Hadoop installation folder does not exist.",null);  if (!hadoopDir.isDirectory())   exit("HADOOP_HOME must point to a directory.",null);  if (!hadoopDir.canRead())   exit("Hadoop installation folder can not be read. Please check permissions.",null);  final File hadoopCommonDir;  String hadoopCommonHome=System.getenv("HADOOP_COMMON_HOME");  if (F.isEmpty(hadoopCommonHome)) {    hadoopCommonDir=new File(hadoopDir,"share/hadoop/common");    println("HADOOP_COMMON_HOME is not set, will use '" + hadoopCommonDir.getPath() + "'.");  } else {    println("HADOOP_COMMON_HOME is set to '" + hadoopCommonHome + "'.");    hadoopCommonDir=new File(hadoopCommonHome);  }  if (!hadoopCommonDir.canRead())   exit("Failed to read Hadoop common dir '" + hadoopCommonDir + "'.",null);  final File hadoopCommonLibDir=new File(hadoopCommonDir,"lib");  if (!hadoopCommonLibDir.canRead())   exit("Failed to read Hadoop 'lib' folder in '" + hadoopCommonLibDir.getPath() + "'.",null);  if (U.isWindows()) {    checkJavaPathSpaces();    final File hadoopBinDir=new File(hadoopDir,"bin");    if (!hadoopBinDir.canRead())     exit("Failed to read subdirectory 'bin' in HADOOP_HOME.",null);    File winutilsFile=new File(hadoopBinDir,WINUTILS_EXE);    if (!winutilsFile.exists()) {      if (ask("File '" + WINUTILS_EXE + "' does not exist. "+ "It may be replaced by a stub. Create it?")) {        println("Creating file stub '" + winutilsFile.getAbsolutePath() + "'.");        boolean ok=false;        try {          ok=winutilsFile.createNewFile();        } catch (        IOException ignore) {        }        if (!ok)         exit("Failed to create '" + WINUTILS_EXE + "' file. Please check permissions.",null);      } else       println("Ok. But Hadoop client probably will not work on Windows this way...");    }    processCmdFiles(hadoopDir,"bin","sbin","libexec");  }  File igniteLibs=new File(new File(igniteHome),"libs");  if (!igniteLibs.exists())   exit("Ignite 'libs' folder is not found.",null);  Collection<File> jarFiles=new ArrayList<>();  addJarsInFolder(jarFiles,igniteLibs);  addJarsInFolder(jarFiles,new File(igniteLibs,"ignite-hadoop"));  boolean jarsLinksCorrect=true;  for (  File file : jarFiles) {    File link=new File(hadoopCommonLibDir,file.getName());    jarsLinksCorrect&=isJarLinkCorrect(link,file);    if (!jarsLinksCorrect)     break;  }  if (!jarsLinksCorrect) {    if (ask("Ignite JAR files are not found in Hadoop 'lib' directory. " + "Create appropriate symbolic links?")) {      File[] oldIgniteJarFiles=hadoopCommonLibDir.listFiles(IGNITE_JARS);      if (oldIgniteJarFiles.length > 0 && ask("The Hadoop 'lib' directory contains JARs from other Ignite " + "installation. They must be deleted to continue. Continue?")) {        for (        File file : oldIgniteJarFiles) {          println("Deleting file '" + file.getAbsolutePath() + "'.");          if (!file.delete())           exit("Failed to delete file '" + file.getPath() + "'.",null);        }      }      for (      File file : jarFiles) {        File targetFile=new File(hadoopCommonLibDir,file.getName());        try {          println("Creating symbolic link '" + targetFile.getAbsolutePath() + "'.");          Files.createSymbolicLink(targetFile.toPath(),file.toPath());        } catch (        IOException e) {          if (U.isWindows()) {            warn("Ability to create symbolic links is required!");            warn("On Windows platform you have to grant permission 'Create symbolic links'");            warn("to your user or run the Accelerator as Administrator.");          }          exit("Creating symbolic link failed! Check permissions.",e);        }      }    } else     println("Ok. But Hadoop client will not be able to talk to Ignite cluster without those JARs in classpath...");  }  File hadoopEtc=new File(hadoopDir,"etc" + File.separator + "hadoop");  File igniteHadoopCfg=igniteHadoopConfig(igniteHome);  if (!igniteHadoopCfg.canRead())   exit("Failed to read Ignite Hadoop 'config' folder at '" + igniteHadoopCfg.getAbsolutePath() + "'.",null);  if (hadoopEtc.canWrite()) {    if (ask("Replace 'core-site.xml' and 'mapred-site.xml' files with preconfigured templates " + "(existing files will be backed up)?")) {      replaceWithBackup(new File(igniteHadoopCfg,"core-site.ignite.xml"),new File(hadoopEtc,"core-site.xml"));      replaceWithBackup(new File(igniteHadoopCfg,"mapred-site.ignite.xml"),new File(hadoopEtc,"mapred-site.xml"));    } else     println("Ok. You can configure them later, the templates are available at Ignite's 'docs' directory...");  }  if (!F.isEmpty(hiveHome)) {    File hiveConfDir=new File(hiveHome + File.separator + "conf");    if (!hiveConfDir.canWrite())     warn("Can not write to '" + hiveConfDir.getAbsolutePath() + "'. To run Hive queries you have to "+ "configure 'hive-site.xml' manually. The template is available at Ignite's 'docs' directory."); else     if (ask("Replace 'hive-site.xml' with preconfigured template (existing file will be backed up)?"))     replaceWithBackup(new File(igniteHadoopCfg,"hive-site.ignite.xml"),new File(hiveConfDir,"hive-site.xml")); else     println("Ok. You can configure it later, the template is available at Ignite's 'docs' directory...");  }  println("Apache Hadoop setup is complete.");}  }
class C{  public static <T>LazyIterable<T> tap(Iterable<T> iterable,Procedure<? super T> procedure){  return new TapIterable<>(iterable,procedure);}  }
class C{  public AttributeLocator(Instances data,int type,int[] indices){  super();  initialize(data,type,indices);}  }
class C{  public Tasks<FileShareRestRep> failover(URI id,FileReplicationParam input){  return postTasks(input,getContinuousCopiesUrl() + "/failover",id);}  }
class C{  public Power(){  super(Number.class,Number.class,Number.class);}  }
class C{  public boolean intersects(Coordinate p){  return intersects(p.x,p.y);}  }
class C{  public double distance(int x,int y,int z,int w){  return Math.sqrt(distanceSquared(x,y,z,w));}  }
class C{  public Literal value(){  return this.getLiteral();}  }
class C{  protected void initialize(){  JComponent accessory;  accessory=createAccessoryPanel();  if (accessory != null)   setAccessory(accessory);  setPreferredSize(GUIHelper.getDefaultDimensions("FileChooser",750,500));}  }
class C{  public StateChangeAction(CSP csp){  this.csp=csp;}  }
class C{  private static Transformer transformer(final TransformerFactory factory,final Source stylesheet) throws TransformerConfigurationException {  final Transformer tnfr=factory.newTransformer(stylesheet);  if (tnfr == null) {    throw new TransformerConfigurationException(String.format("%s failed to create new XSL transformer for '%s'",factory.getClass(),stylesheet.getSystemId()));  }  return tnfr;}  }
class C{  public boolean toInitializing(){  return toNextState(INITIALIZING);}  }
class C{  public MatrixDrawable(Drawable drawable,Matrix matrix){  super(Preconditions.checkNotNull(drawable));  mMatrix=matrix;}  }
class C{  public CLeftTitle(final String string){  Preconditions.checkNotNull(string,"IE01817: String argument can not be null");  m_string=string;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:40.522 -0500",hash_original_method="ADD4EE56A02B7B5492F16169DF575C77",hash_generated_method="C79BF4B67E3189EEF19E9080990D2DC9") private void removeBranchID(Request request){  ViaHeader viaHeader=(ViaHeader)request.getHeader(ViaHeader.NAME);  viaHeader.removeParameter("branch");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.845 -0500",hash_original_method="EE015B9251F7CEAD272805E74A0AD6CD",hash_generated_method="D9559B8E91E481A1A462492D1F3B9A90") @Override public int hashCode(){  return ((value) ? 1 : 0);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {default :    return null;}}  }
class C{  public static String toBase64(byte[] data){  if (data == null) {    return null;  }  int len=data.length;  if (len == 0) {    return "";  }  int olen=4 * ((len + 2) / 3);  char[] chars=new char[olen];  int iidx=0;  int oidx=0;  int charsLeft=len;  while (charsLeft > 0) {    int b0=data[iidx++] & 0xff;    int b1=(charsLeft > 1) ? data[iidx++] & 0xff : 0;    int b2=(charsLeft > 2) ? data[iidx++] & 0xff : 0;    int b24=(b0 << 16) | (b1 << 8) | b2;    int c0=(b24 >> 18) & 0x3f;    int c1=(b24 >> 12) & 0x3f;    int c2=(b24 >> 6) & 0x3f;    int c3=b24 & 0x3f;    chars[oidx++]=base64Chars[c0];    chars[oidx++]=base64Chars[c1];    chars[oidx++]=(charsLeft > 1) ? base64Chars[c2] : '=';    chars[oidx++]=(charsLeft > 2) ? base64Chars[c3] : '=';    charsLeft-=3;  }  return new String(chars);}  }
class C{  @Override protected ShardsIterator shards(ClusterState clusterState,UpgradeRequest request,String[] concreteIndices){  ShardsIterator iterator=clusterState.routingTable().allShards(concreteIndices);  Set<String> indicesWithMissingPrimaries=indicesWithMissingPrimaries(clusterState,concreteIndices);  if (indicesWithMissingPrimaries.isEmpty()) {    return iterator;  }  throw new PrimaryMissingActionException("Cannot upgrade indices because the following indices are missing primary shards " + indicesWithMissingPrimaries);}  }
class C{  @Override public void deleteMemory(){  restore(getMemoryName(),this.isSchema,true);}  }
class C{  public static void exit(int status){  Env.exitEnv(status);}  }
class C{  public void rotateX(float angle){  g.rotateX(angle);}  }
class C{  @Override public boolean isComplete(){  return complete;}  }
class C{  public static boolean isEmpty(String str){  return (str == null) || (str.equals(""));}  }
class C{  public Matrix4 translate(float x,float y,float z){  tmp[M00]=1;  tmp[M01]=0;  tmp[M02]=0;  tmp[M03]=x;  tmp[M10]=0;  tmp[M11]=1;  tmp[M12]=0;  tmp[M13]=y;  tmp[M20]=0;  tmp[M21]=0;  tmp[M22]=1;  tmp[M23]=z;  tmp[M30]=0;  tmp[M31]=0;  tmp[M32]=0;  tmp[M33]=1;  mul(val,tmp);  return this;}  }
class C{  public static void scaleM(float[] sm,int smOffset,float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int smi=smOffset + i;    int mi=mOffset + i;    sm[smi]=m[mi] * x;    sm[4 + smi]=m[4 + mi] * y;    sm[8 + smi]=m[8 + mi] * z;    sm[12 + smi]=m[12 + mi];  }}  }
class C{  public byte[] genBytecode() throws Exception {  ClassWriter cw=new ClassWriter(0);  MethodVisitor mv=null;  FieldVisitor fv=null;  final boolean itf=false;  cw.visit(V1_8,ACC_FINAL + ACC_SUPER,arrayImplClassName,arrayInterfaceClassSig,"java/lang/Object",new String[]{arrayInterfaceClassName});{    fv=cw.visitField(ACC_PROTECTED + ACC_FINAL,"dim1","J",null,null);    fv.visitEnd();  }{    fv=cw.visitField(ACC_PROTECTED + ACC_FINAL,"dim2","J",null,null);    fv.visitEnd();  }{    fv=cw.visitField(ACC_PRIVATE + ACC_FINAL,"elementSize","J",null,null);    fv.visitEnd();  }{    fv=cw.visitField(ACC_PRIVATE + ACC_FINAL,"arraySize","J",null,null);    fv.visitEnd();  }{    mv=cw.visitMethod(ACC_PROTECTED,"<init>","(JJJ)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/Object","<init>","()V",false);    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"dim1","J");    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,3);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"dim2","J");    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,5);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"elementSize","J");    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,5);    mv.visitVarInsn(LLOAD,1);    mv.visitInsn(LMUL);    mv.visitVarInsn(LLOAD,3);    mv.visitInsn(LMUL);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"arraySize","J");    mv.visitInsn(RETURN);    mv.visitMaxs(5,7);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"at","(JJ)L" + elementInterfaceClassName + ";",null,null);    mv.visitCode();    mv.visitTypeInsn(NEW,elementImplClassName);    mv.visitInsn(DUP);    mv.visitMethodInsn(INVOKESPECIAL,elementImplClassName,"<init>","()V",itf);    mv.visitVarInsn(ASTORE,5);    mv.visitTypeInsn(NEW,"com/ibm/layout/Location");    mv.visitInsn(DUP);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"location","Lcom/ibm/layout/Location;");    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"dim2","J");    mv.visitInsn(LMUL);    mv.visitVarInsn(LLOAD,3);    mv.visitInsn(LADD);    mv.visitVarInsn(ALOAD,5);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"sizeof","()J",itf);    mv.visitInsn(LMUL);    mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);    mv.visitVarInsn(ASTORE,6);    mv.visitVarInsn(ALOAD,5);    mv.visitVarInsn(ALOAD,6);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);    mv.visitVarInsn(ALOAD,5);    mv.visitInsn(ARETURN);    mv.visitMaxs(7,7);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"put","(JJL" + elementInterfaceClassName + ";)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(LLOAD,3);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(JJ)L" + elementInterfaceClassName + ";",itf);    mv.visitTypeInsn(CHECKCAST,elementImplClassName);    mv.visitVarInsn(ALOAD,5);    mv.visitTypeInsn(CHECKCAST,elementImplClassName);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"copyFrom","(L" + elementImplClassName + ";)V",itf);    mv.visitInsn(RETURN);    mv.visitMaxs(5,6);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"at","(JJ)Lcom/ibm/layout/Layout;",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(LLOAD,3);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(JJ)L" + elementInterfaceClassName + ";",itf);    mv.visitInsn(ARETURN);    mv.visitMaxs(5,5);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"put","(JJLcom/ibm/layout/Layout;)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(LLOAD,3);    mv.visitVarInsn(ALOAD,5);    mv.visitTypeInsn(CHECKCAST,elementInterfaceClassName);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"put","(JJL" + elementInterfaceClassName + ";)V",itf);    mv.visitInsn(RETURN);    mv.visitMaxs(6,6);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_FINAL,"dim1","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"dim1","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_FINAL,"dim2","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"dim2","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"sizeof","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"arraySize","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"toString","()Ljava/lang/String;",null,null);    mv.visitCode();    mv.visitTypeInsn(NEW,"java/lang/StringBuffer");    mv.visitInsn(DUP);    mv.visitLdcInsn("[");    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/StringBuffer","<init>","(Ljava/lang/String;)V",false);    mv.visitVarInsn(ASTORE,1);    mv.visitInsn(LCONST_0);    mv.visitVarInsn(LSTORE,2);    Label l0=new Label();    mv.visitJumpInsn(GOTO,l0);    Label l1=new Label();    mv.visitLabel(l1);    mv.visitFrame(Opcodes.F_APPEND,2,new Object[]{"java/lang/StringBuffer",Opcodes.LONG},0,null);    mv.visitInsn(LCONST_0);    mv.visitVarInsn(LSTORE,4);    Label l2=new Label();    mv.visitJumpInsn(GOTO,l2);    Label l3=new Label();    mv.visitLabel(l3);    mv.visitFrame(Opcodes.F_APPEND,1,new Object[]{Opcodes.LONG},0,null);    mv.visitVarInsn(ALOAD,1);    mv.visitTypeInsn(NEW,"java/lang/StringBuilder");    mv.visitInsn(DUP);    mv.visitLdcInsn(" ");    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/StringBuilder","<init>","(Ljava/lang/String;)V",false);    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,2);    mv.visitVarInsn(LLOAD,4);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(JJ)Lcom/ibm/layout/Layout;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Object","toString","()Ljava/lang/String;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","toString","()Ljava/lang/String;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","append","(Ljava/lang/String;)Ljava/lang/StringBuffer;",false);    mv.visitInsn(POP);    mv.visitVarInsn(LLOAD,4);    mv.visitInsn(LCONST_1);    mv.visitInsn(LADD);    mv.visitVarInsn(LSTORE,4);    mv.visitLabel(l2);    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);    mv.visitVarInsn(LLOAD,4);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"dim2","J");    mv.visitInsn(LCMP);    mv.visitJumpInsn(IFLT,l3);    mv.visitVarInsn(LLOAD,2);    mv.visitInsn(LCONST_1);    mv.visitInsn(LADD);    mv.visitVarInsn(LSTORE,2);    mv.visitLabel(l0);    mv.visitFrame(Opcodes.F_CHOP,1,null,0,null);    mv.visitVarInsn(LLOAD,2);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"dim1","J");    mv.visitInsn(LCMP);    mv.visitJumpInsn(IFLT,l1);    mv.visitVarInsn(ALOAD,1);    mv.visitLdcInsn(" ]");    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","append","(Ljava/lang/String;)Ljava/lang/StringBuffer;",false);    mv.visitInsn(POP);    mv.visitVarInsn(ALOAD,1);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","toString","()Ljava/lang/String;",false);    mv.visitInsn(ARETURN);    mv.visitMaxs(7,6);    mv.visitEnd();  }  ImplHelper.genLayoutTypeImpl(cw,mv,fv,arrayImplClassName,false);  cw.visitEnd();  return cw.toByteArray();}  }
class C{  private void testAtomic0(IgniteCache<Integer,Object>[] caches) throws Exception {  byte[] val=wrap(1);  for (  IgniteCache<Integer,Object> cache : caches) {    cache.put(KEY_1,val);    for (    IgniteCache<Integer,Object> cacheInner : caches)     assertArrayEquals(val,(byte[])cacheInner.get(KEY_1));    cache.remove(KEY_1);    assertNull(cache.get(KEY_1));  }}  }
class C{  protected void listSelectionChanged(int oldSelected,int newSelected){}  }
class C{  @SuppressWarnings("unchecked") <P>Iterator<P> lookupProviders(final Class<P> providerClass){  LOG.debug("searching for providers of type : {}",providerClass);  try {    final Class<?> serviceLoader=getClass().getClassLoader().loadClass("java.util.ServiceLoader");    LOG.debug("using {} to lookupProviders",serviceLoader.getName());    return ((Iterable<P>)serviceLoader.getMethod("load",Class.class).invoke(serviceLoader,providerClass)).iterator();  } catch (  final Exception e) {    LOG.debug("ServiceLoader is not available. Falling back to ServiceRegistry.",e);  }  LOG.debug("using {} to lookupProviders",ServiceRegistry.class.getName());  return ServiceRegistry.lookupProviders(providerClass);}  }
class C{  private void emitDeserializerImpl(List<Type> expandedTypes,int depth,StringBuilder builder,String inVar,String outVar,String i){  Type type=expandedTypes.get(depth);  String childInVar=inVar + "_";  String childOutVar=outVar + "_";  Class<?> rawClass=getRawClass(type);  if (isList(rawClass)) {    String inVarIterator=inVar + "Iterator";    builder.append(i).append(getImplName(type,false)).append(" ").append(outVar).append(" = null;\n");    builder.append(i).append("if (").append(inVar).append(" != null && !").append(inVar).append(".isJsonNull()) {\n");    builder.append(i).append("  ").append(outVar).append(" = new ").append(getImplName(type,true)).append("();\n");    builder.append(i).append("  ").append(getImplName(Iterator.class,false)).append("<JsonElement> ").append(inVarIterator).append(" = ").append(inVar).append(".getAsJsonArray().iterator();\n");    builder.append(i).append("  while (").append(inVarIterator).append(".hasNext()) {\n");    builder.append(i).append("    JsonElement ").append(childInVar).append(" = ").append(inVarIterator).append(".next();\n");    emitDeserializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "    ");    builder.append(i).append("    ").append(outVar).append(".add(").append(childOutVar).append(");\n");    builder.append(i).append("  }\n");    builder.append(i).append("}\n");  } else   if (isMap(rawClass)) {    String entryVar="entry" + depth;    String entriesVar="entries" + depth;    builder.append(i).append(getImplName(type,false)).append(" ").append(outVar).append(" = null;\n");    builder.append(i).append("if (").append(inVar).append(" != null && !").append(inVar).append(".isJsonNull()) {\n");    builder.append(i).append("  ").append(outVar).append(" = new ").append(getImplName(type,true)).append("();\n");    builder.append(i).append("  java.util.Set<java.util.Map.Entry<String, JsonElement>> ").append(entriesVar).append(" = ").append(inVar).append(".getAsJsonObject().entrySet();\n");    builder.append(i).append("  for (java.util.Map.Entry<String, JsonElement> ").append(entryVar).append(" : ").append(entriesVar).append(") {\n");    builder.append(i).append("    JsonElement ").append(childInVar).append(" = ").append(entryVar).append(".getValue();\n");    emitDeserializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "    ");    builder.append(i).append("    ").append(outVar).append(".put(").append(entryVar).append(".getKey(), ").append(childOutVar).append(");\n");    builder.append(i).append("  }\n");    builder.append(i).append("}\n");  } else   if (getEnclosingTemplate().isDtoInterface(rawClass)) {    String className=getImplName(rawClass,false);    builder.append(i).append(className).append(" ").append(outVar).append(" = ").append(getImplNameForDto(rawClass)).append(".fromJsonElement(").append(inVar).append(", ").append(COPY_JSONS_PARAM).append(");\n");  } else   if (rawClass.isPrimitive()) {    String primitiveName=rawClass.getSimpleName();    String primitiveNameCap=primitiveName.substring(0,1).toUpperCase() + primitiveName.substring(1);    builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".getAs").append(primitiveNameCap).append("();\n");  } else   if (isAny(rawClass)) {    builder.append(i).append("JsonElement ").append(outVar).append(" = ");    appendCopyJsonExpression(inVar,builder).append(";\n");  } else {    final Class<?> dtoImplementation=getEnclosingTemplate().getDtoImplementation(rawClass);    if (dtoImplementation != null) {      String className=getImplName(rawClass,false);      builder.append(i).append(className).append(" ").append(outVar).append(" = ").append(dtoImplementation.getCanonicalName()).append(".fromJsonElement(").append(inVar).append(", ").append(COPY_JSONS_PARAM).append(");\n");    } else {      String rawClassName=rawClass.getName().replace('$','.');      builder.append(i).append(rawClassName).append(" ").append(outVar).append(" = gson.fromJson(").append(inVar).append(", ").append(rawClassName).append(".class);\n");    }  }}  }
class C{  private static ReferenceElement.ReferenceElementResult parseBuiltInTypeStrict(PsiBuilder builder){  PsiBuilder.Marker arrMarker=builder.mark();  ParserUtils.eatElement(builder,GroovyElementTypes.BUILT_IN_TYPE);  if (GroovyTokenTypes.mLBRACK.equals(builder.getTokenType())) {    return declarationBracketsParseStrict(builder,arrMarker) ? ReferenceElement.ReferenceElementResult.REF_WITH_TYPE_PARAMS : ReferenceElement.ReferenceElementResult.FAIL;  } else {    arrMarker.drop();    return ReferenceElement.ReferenceElementResult.REF_WITH_TYPE_PARAMS;  }}  }
class C{  public static boolean inSensorRange(IGame game,Entity ae,Targetable target,List<ECMInfo> allECMInfo){  return inSensorRange(game,null,ae,target,allECMInfo);}  }
class C{  public AttributeGroupServiceImpl(final GenericDAO<AttributeGroup,Long> attributeGroupDao){  super(attributeGroupDao);  this.attributeGroupDao=attributeGroupDao;}  }
class C{  public static void closeEL(Closeable c){  try {    if (c != null)     c.close();  } catch (  Throwable e) {  }}  }
class C{  @Override public int compareTo(EventInfoResource o){  return ComparisonChain.start().compare(eventId,o.eventId).compareFalseFirst(enabled,o.enabled).compare(bufferCapacity,o.bufferCapacity).compare(etype,o.etype).compare(eventDesc,o.eventDesc).compare(eventName,o.eventName).compare(moduleName,o.moduleName).compare(numOfEvents,o.numOfEvents).result();}  }
class C{  public boolean hasLinks(){  return hasRepeatingExtension(Link.class);}  }
class C{  public static void writeToFileReal_2D(String format,double[][] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int i=0; i < x.length; i++) {      for (int j=0; j < x[0].length; j++) {        out.write(String.format(format,x[i][j]) + "\t");      }      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private int upgradeQuality(int quality,MutableBoolean allowBiometric){  quality=upgradeQualityForDPM(quality);  quality=upgradeQualityForKeyStore(quality);  int encryptionQuality=upgradeQualityForEncryption(quality);  if (encryptionQuality > quality) {    if (allowBiometric != null) {      allowBiometric.value=quality <= DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK;    } else     if (quality == DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK) {      return quality;    }  }  return encryptionQuality;}  }
class C{  private void undecorateOriginalUI(){  if (this.arrowButton != null) {    this.arrowButton.removeMouseListener(arrowButtonMouseListener);    this.arrowButton.addMouseListener(arrowButtonMouseListener.getDecorated());  }  this.comboBox.getModel().removeListDataListener(listDataHandler);  this.document.setDocumentFilter(null);  if (this.comboBox.getEditor() == comboBoxEditor)   this.comboBox.setEditor(comboBoxEditor.getDelegate());  this.popupMenu.removePopupMenuListener(popupSizerHandler);  this.popupLocationFix.uninstall();  this.popup.getList().removeMouseListener(popupMouseHandler);  final ActionMap actionMap=comboBox.getActionMap();  actionMap.put("selectPrevious",originalSelectPreviousAction);  actionMap.put("selectNext",originalSelectNextAction);  actionMap.put("selectPrevious2",originalSelectPrevious2Action);  actionMap.put("selectNext2",originalSelectNext2Action);  actionMap.put("aquaSelectPrevious",originalAquaSelectPreviousAction);  actionMap.put("aquaSelectNext",originalAquaSelectNextAction);  this.comboBoxEditorComponent.removeKeyListener(strictModeBackspaceHandler);  this.comboBoxEditorComponent.removeFocusListener(selectTextOnFocusGainHandler);  if (this.comboBox.getRenderer() == renderer)   this.comboBox.setRenderer(originalRenderer);  this.originalRenderer=null;  this.comboBoxEditor=null;  this.comboBoxEditorComponent=null;  this.document=null;  this.popupMenu=null;  this.popup=null;  this.arrowButton=null;}  }
class C{  protected boolean tableExists(Table t) throws SQLException {  String sql=String.format("SELECT * FROM v_catalog.tables WHERE table_schema='%s' AND table_name='%s'",t.getSchema(),t.getName());  Statement stmt=dbConn.createStatement();  try {    ResultSet rs=stmt.executeQuery(sql);    return rs.next();  }  finally {    if (stmt != null) {      try {        stmt.close();      } catch (      SQLException e) {      }    }  }}  }
class C{  protected void vmDeallocateAll(){  getRamProvisioner().deallocateRamForAllVms();  getBwProvisioner().deallocateBwForAllVms();  getVmScheduler().deallocatePesForAllVms();}  }
class C{  public static Description createTestDescription(Class<?> clazz,String name){  return new Description(clazz,formatDisplayName(name,clazz.getName()));}  }
class C{  @Override public void doInit() throws ResourceException {  super.doInit();  String resourceId=resolveResourceId(getRequest());  RestManager restManager=RestManager.getRestManager(SolrRequestInfo.getRequestInfo());  managedResource=restManager.getManagedResourceOrNull(resourceId);  if (managedResource == null) {    int lastSlashAt=resourceId.lastIndexOf('/');    if (lastSlashAt != -1) {      String parentResourceId=resourceId.substring(0,lastSlashAt);      log.info("Resource not found for {}, looking for parent: {}",resourceId,parentResourceId);      managedResource=restManager.getManagedResourceOrNull(parentResourceId);      if (managedResource != null) {        if (!(managedResource instanceof ManagedResource.ChildResourceSupport)) {          String errMsg=String.format(Locale.ROOT,"%s does not support child resources!",managedResource.getResourceId());          throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,errMsg);        }        childId=resourceId.substring(lastSlashAt + 1);        log.info("Found parent resource {} for child: {}",parentResourceId,childId);      }    }  }  if (managedResource == null) {    if (Method.PUT.equals(getMethod()) || Method.POST.equals(getMethod())) {      managedResource=restManager.endpoint;    } else {      throw new ResourceException(Status.CLIENT_ERROR_NOT_FOUND,"No REST managed resource registered for path " + resourceId);    }  }  log.info("Found ManagedResource [" + managedResource + "] for "+ resourceId);}  }
class C{  public _QueryOptions(final _QueryOptions_Flag[] flags){  super(flags);}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  boolean isEscaped=false;  boolean isString=false;  int parameterIndex=0;  for (int i=0; i < m_sql.length(); i++) {    char charValue=m_sql.charAt(i);switch (charValue) {case '\\':      isEscaped=!isEscaped;    result.append(charValue);  break;case '\'':if (!isEscaped) isString=!isString;result.append(charValue);isEscaped=false;break;case '?':if (!isEscaped && !isString) {parameterIndex++;if (m_variables.containsKey(parameterIndex)) {result.append(m_variables.get(parameterIndex));} else {result.append(charValue);}} else {result.append(charValue);isEscaped=false;}break;default :result.append(charValue);isEscaped=false;break;}}return result.toString();}  }
class C{  public Object read(InputNode node) throws Exception {  Object value=factory.getInstance();  Collection list=(Collection)value;  if (list != null) {    return read(node,list);  }  return null;}  }
class C{  public GOCDataBuilder withActive(final boolean smActivec){  this.smActivec=smActivec;  return this;}  }
class C{  public boolean can_have_callbacks(SootMethod m){  logger.info("method {} ipcsink = {}, ipcmethod = {}",m,API.v().isIPCSink(m),API.v().isIPCMethod(m));  return (API.v().isIPCSink(m) || API.v().isIPCMethod(m));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isAfterLast(){  return pos >= text.length;}  }
class C{  public Rational subtract(Rational secondRational){  BigInteger n=(r[0].multiply(secondRational.getDenominator())).subtract(r[1].multiply(secondRational.getNumerator()));  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  public int hashCode(){  return _header;}  }
class C{  public void accept(){  exchange.sendAccept();}  }
class C{  private List<TagState> retrieveAttachedTags(VapiConnection endpoint,ManagedObjectReference ref,List<String> tenantLinks) throws IOException, RpcException {  TaggingClient taggingClient=endpoint.newTaggingClient();  List<String> tagIds=taggingClient.getAttachedTags(ref);  List<TagState> res=new ArrayList<>();  for (  String id : tagIds) {    TagState state=this.tagCache.get(id,newTagRetriever(taggingClient));    if (state != null) {      if (state.tenantLinks == null) {        state.tenantLinks=tenantLinks;      }      res.add(state);    }  }  return res;}  }
class C{  public DigestURL resumptionURL() throws IOException {  final String token=getToken();  if (token == null)   throw new IOException("end of resumption reached - token == null");  if (token.isEmpty())   throw new IOException("end of resumption reached - token.isEmpty()");  final String url=truncatedURL(this.source);  if (token.indexOf("from=",0) >= 0) {    return new DigestURL(url + "verb=ListRecords&" + token);  }  final Date expiration=getExpirationDate();  if (expiration != null) {    if (expiration.before(new Date()))     throw new IOException("the resumption is expired at " + ISO8601Formatter.FORMATTER.format(expiration) + " (now: "+ ISO8601Formatter.FORMATTER.format());  }  final String u=url + "verb=ListRecords&resumptionToken=" + escape(token);  return new DigestURL(u);}  }
class C{  public static void logDebug(String tag,String message){  if (BuildConfig.DEBUG || DEBUG_LOG) {    Log.d(tag,message);  }}  }
class C{  public void insertNode(final CCriteriumTreeNode parent,final CCriteriumTreeNode child){  CCriteriumTreeNode.insert(parent,child);  for (  final ICriteriumTreeListener listener : m_listeners) {    try {      listener.insertedNode(this,parent,child);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void onOffHeapRemove(){  offHeapRemoves.incrementAndGet();  if (delegate != null)   delegate.onOffHeapRemove();}  }
class C{  private void computeSimplifiedLRDs(DBIDs ids,KNNQuery<O> knnq,WritableDoubleDataStore lrds){  FiniteProgress lrdsProgress=LOG.isVerbose() ? new FiniteProgress("Densities",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final KNNList neighbors=knnq.getKNNForDBID(iter,k);    double sum=0.0;    int count=0;    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(neighbor,iter)) {        continue;      }      sum+=neighbor.doubleValue();      count++;    }    final double lrd=(sum > 0) ? (count / sum) : Double.POSITIVE_INFINITY;    lrds.putDouble(iter,lrd);    LOG.incrementProcessed(lrdsProgress);  }  LOG.ensureCompleted(lrdsProgress);}  }
class C{  private boolean canWriteToFile(File file){  boolean fileIsWritable=true;  if (file.exists()) {    if (!file.canWrite()) {      logger.warn(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystemJmxImpl_READONLY_STAT_ALERT_DEF_FILE_0,new Object[]{file}));      fileIsWritable=false;    }  } else {    try {      file.createNewFile();    } catch (    IOException e) {      logger.warn(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystemJmxImpl_FAILED_TO_CREATE_STAT_ALERT_DEF_FILE_0,new Object[]{file}),e);      fileIsWritable=false;    } finally {      if ((file.exists() && !file.delete()) && logger.isDebugEnabled()) {        logger.debug("Could not delete file :'{}' which is created for checking permissions.",file.getAbsolutePath());      }    }  }  return fileIsWritable;}  }
class C{  public Matrix4d scaleAroundLocal(double factor,double ox,double oy,double oz){  return scaleAroundLocal(factor,factor,factor,ox,oy,oz,this);}  }
class C{  private byte[] createVeriniceArchive() throws CommandException {  try {    final ByteArrayOutputStream byteOut=new ByteArrayOutputStream();    final ZipOutputStream zipOut=new ZipOutputStream(byteOut);    ExportFactory.createZipEntry(zipOut,VeriniceArchive.VERINICE_XML,xmlData);    if (isRiskAnalysis()) {      ExportFactory.createZipEntry(zipOut,VeriniceArchive.RISK_XML,xmlDataRiskAnalysis);    }    ExportFactory.createZipEntry(zipOut,VeriniceArchive.DATA_XSD,StreamFactory.getDataXsdAsStream());    ExportFactory.createZipEntry(zipOut,VeriniceArchive.MAPPING_XSD,StreamFactory.getMappingXsdAsStream());    ExportFactory.createZipEntry(zipOut,VeriniceArchive.SYNC_XSD,StreamFactory.getSyncXsdAsStream());    ExportFactory.createZipEntry(zipOut,VeriniceArchive.RISK_XSD,StreamFactory.getRiskXsdAsStream());    ExportFactory.createZipEntry(zipOut,VeriniceArchive.README_TXT,StreamFactory.getReadmeAsStream());    for (    final Attachment attachment : getAttachmentSet()) {      LoadAttachmentFile command=new LoadAttachmentFile(attachment.getDbId(),true);      command=getCommandService().executeCommand(command);      if (command.getAttachmentFile() != null && command.getAttachmentFile().getFileData() != null) {        ExportFactory.createZipEntry(zipOut,ExportFactory.createZipFileName(attachment),command.getAttachmentFile().getFileData());      }      command.setAttachmentFile(null);    }    zipOut.close();    byteOut.close();    return byteOut.toByteArray();  } catch (  final IOException e) {    getLog().error("Error while creating zip output stream",e);    throw new RuntimeCommandException(e);  }}  }
class C{  public static void edit(String id){  list();}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  if (XObject.CLASS_BOOLEAN == right.getType())   return right; else   return right.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public _QueueStatus(final String[] flagStrings){  super(flagStrings);}  }
class C{  protected void showTitleBar(){  mTitleView.setVisibility(View.VISIBLE);}  }
class C{  public static CallableStatement prepareCall(String SQL,int resultSetConcurrency,String trxName){  if (SQL == null || SQL.length() == 0)   throw new IllegalArgumentException("Required parameter missing - " + SQL);  return ProxyFactory.newCCallableStatement(ResultSet.TYPE_FORWARD_ONLY,resultSetConcurrency,SQL,trxName);}  }
class C{  public Priority(Integer priority){  super(priority);}  }
class C{  public boolean mkdirs() throws IOException {  return getWrappedPath().mkdirs();}  }
class C{  public static Class<?>[] toClass(final Object[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_CLASS_ARRAY;  }  Class<?>[] classes=new Class[array.length];  for (int i=0; i < array.length; i++) {    classes[i]=array[i] == null ? null : array[i].getClass();  }  return classes;}  }
class C{  public static void main(String[] args) throws AdeException {  final Analyze analyze=new Analyze();  try {    analyze.run(args);  } catch (  AdeUsageException e) {    analyze.getMessageHandler().handleUserException(e);  }catch (  AdeInternalException e) {    analyze.getMessageHandler().handleAdeInternalException(e);  }catch (  AdeException e) {    analyze.getMessageHandler().handleAdeException(e);  }catch (  Throwable e) {    analyze.getMessageHandler().handleUnexpectedException(e);  } finally {    analyze.quietCleanup();  }}  }
class C{  public static void deviceInfoModify(Context context,String accessToken,String identifier,String deviceName,int secureLevel,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  try {    String jsonParams=new JSONStringer().object().key(ApiKey.DEVICE_NAME).value(deviceName).key(ApiKey.SECURE_LEVEL).value(secureLevel).endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    put(context,String.format(getApiServerUrl() + DEVICE_INFO_MODIFY,identifier),headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  protected void adoptNodes(SimpleNode node){  if (inEdit)   throw new RuntimeException("Mustn't be in an edit transaction to call this method!");  internalNodeCount=0;  externalNodeCount=0;  root=node;  do {    node=(SimpleNode)Tree.Utils.postorderSuccessor(this,node);    if (node.isExternal()) {      externalNodeCount++;    } else     internalNodeCount++;  } while (node != root);  nodeCount=internalNodeCount + externalNodeCount;  nodes=new SimpleNode[nodeCount];  node=root;  int i=0;  int j=externalNodeCount;  do {    node=(SimpleNode)Tree.Utils.postorderSuccessor(this,node);    if (node.isExternal()) {      node.setNumber(i);      nodes[i]=node;      i++;    } else {      node.setNumber(j);      nodes[j]=node;      j++;    }  } while (node != root);}  }
class C{  public void commitRandom(final Randomizer rand){  rand.setPdf(pdf);  if (pdf == ProbDistribution.NULL) {    return;  }  double param1=Utils.doubleParsable(tfParam1);  if (tfParam1.isEnabled() && !Double.isNaN(param1)) {    rand.setParam1Consistent(pdf.getParam1Name(),param1);  }  double param2=Utils.doubleParsable(tfParam2);  if (tfParam2.isEnabled() && !Double.isNaN(param2)) {    rand.setParam2Consistent(pdf.getParam2Name(),param2);  }  if (!tsClipping.isNull()) {    rand.setClipping(tsClipping.isSelected());    if (tsClipping.isSelected()) {      double upperBound=Utils.doubleParsable(tfUpBound);      if (!Double.isNaN(upperBound)) {        rand.setUpperBound(upperBound);      }      double lowerBound=Utils.doubleParsable(tfLowBound);      if (!Double.isNaN(lowerBound)) {        rand.setLowerBound(lowerBound);      }    }  }}  }
class C{  @Override public double utility(double totalWeight,double totalPositiveWeight,Hypothesis hypo){  double g=hypo.getCoveredWeight() / totalWeight;  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();  if (hypo.getPrediction() == Hypothesis.POSITIVE_CLASS) {    return g * g * (p - this.priors[Hypothesis.POSITIVE_CLASS]);  } else {    return g * g * (p - this.priors[Hypothesis.NEGATIVE_CLASS]);  }}  }
class C{  public static String toString(byte[] reservationToken){  StringBuilder idStr=new StringBuilder();  idStr.append("0x");  for (int i=0; i < reservationToken.length; i++) {    if ((reservationToken[i] & 0xFF) <= 15)     idStr.append("0");    idStr.append(Integer.toHexString(reservationToken[i] & 0xFF).toUpperCase());  }  return idStr.toString();}  }
class C{  private static String encode_base64(byte d[],int len) throws IllegalArgumentException {  int off=0;  StringBuffer rs=new StringBuffer();  int c1, c2;  if (len <= 0 || len > d.length)   throw new IllegalArgumentException("Invalid len");  while (off < len) {    c1=d[off++] & 0xff;    rs.append(base64_code[(c1 >> 2) & 0x3f]);    c1=(c1 & 0x03) << 4;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 4) & 0x0f;    rs.append(base64_code[c1 & 0x3f]);    c1=(c2 & 0x0f) << 2;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 6) & 0x03;    rs.append(base64_code[c1 & 0x3f]);    rs.append(base64_code[c2 & 0x3f]);  }  return rs.toString();}  }
class C{  @Override public void run(){  amIActive=true;  RandomAccessFile rIn=null;  ByteBuffer buf;  String inputFilesString=null;  String[] XYZFiles;  double x, y, north, south, east, west;  double z;  float minValue, maxValue;  float featureValue;  int numVertices;  byte classValue, numReturns, returnNum;  int a, n, loc, featureNum=1;  int progress=0;  int numPoints=0;  String delimiter=" ";  ShapeType shapeType=ShapeType.POINT;  boolean firstLineHeader=false;  String fileExtension=".txt";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    XYZFiles=inputFilesString.split(";");    int numZYZFiles=XYZFiles.length;    shapeType=ShapeType.POINT;    for (int j=0; j < numZYZFiles; j++) {      String fileName=XYZFiles[j];      File file=new File(fileName);      if (!file.exists()) {        return;      }      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("Z");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(3);      fileExtension=FileUtilities.getFileExtension(fileName);      String outputFile=fileName.replace("." + fileExtension,".shp");      File outfile=new File(outputFile);      if (outfile.exists()) {        outfile.delete();      }      ShapeFile output=new ShapeFile(outputFile,shapeType,fields);      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(file);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        j=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((j > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);            Object[] rowData=new Object[1];            rowData[0]=new Double(z);            output.addRecord(wbGeometry,rowData);          }          j++;        }        in.close();        br.close();      } catch (      java.io.IOException e) {        myHost.showFeedback("An error has occurred during operation. See log file for details.");        myHost.logException("Error in " + getDescriptiveName(),e);      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }      output.write();    }    returnData(XYZFiles[0].replace("." + fileExtension,".shp"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    if (rIn != null) {      try {        rIn.close();      } catch (      Exception e) {      }    }    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String encodeQueryParamAsIs(String nameOrValue){  return encodeFromArray(nameOrValue,queryNameValueEncoding,true);}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  public void bitOr() throws IOException {  writeCode(BIT_OR);}  }
class C{  public String genRandomPassword(){  return genRandomPassword(20);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public ESRIPolygonRecord(byte b[],int off) throws IOException {  super(b,off);  int ptr=off + 8;  shapeType=readLEInt(b,ptr);  ptr+=4;  if ((shapeType != SHAPE_TYPE_POLYGON) && (shapeType != SHAPE_TYPE_ARC)) {    throw new IOException("Invalid polygon record. Expected shape " + "type " + SHAPE_TYPE_POLYGON + " or type "+ SHAPE_TYPE_ARC+ ", but found "+ shapeType);  }  boolean ispolyg=isPolygon();  bounds=readBox(b,ptr);  ptr+=32;  int numParts=readLEInt(b,ptr);  ptr+=4;  int numPoints=readLEInt(b,ptr);  ptr+=4;  if (numParts <= 0) {    polygons=new ESRIPoly[0];    return;  }  polygons=new ESRIPoly[numParts];  int origin=0;  int _len;  for (int i=0; i < numParts; i++) {    int nextOrigin=readLEInt(b,ptr);    ptr+=4;    if (i > 0) {      _len=nextOrigin - origin;      if (ispolyg)       ++_len;      polygons[i - 1]=new ESRIPoly.ESRIFloatPoly(_len);    }    origin=nextOrigin;  }  _len=numPoints - origin;  if (ispolyg)   ++_len;  polygons[numParts - 1]=new ESRIPoly.ESRIFloatPoly(_len);  for (int i=0; i < numParts; i++) {    ptr+=polygons[i].read(b,ptr,ispolyg);  }}  }
class C{  public static Test suite(){  return new TestSuite(LibSVMTest.class);}  }
class C{  public void testPreparedStatementGetTime(Connection connection) throws SQLException {  try (Statement statement=connection.createStatement()){    try (ResultSet resultSet=statement.executeQuery(sql)){      Assert.assertTrue(resultSet.next());      Assert.assertEquals("00:00:00","" + resultSet.getTime(2));      Assert.assertTrue(resultSet.next());      Assert.assertEquals("00:00:00","" + resultSet.getTime(2));      Assert.assertTrue(resultSet.next());      Assert.assertNull(resultSet.getTime(2));      Assert.assertFalse(resultSet.next());    }   } }  }
class C{  private void initRoutingRules(){  JsonObject rules=new JsonObject();  rules=TestUtils.addRoutingRuleMainStorage(rules);  rules=TestUtils.addRoutingRuleHooks(rules);  TestUtils.putRoutingRules(rules);}  }
class C{  @SuppressWarnings("unchecked") private static int find(Object[] arr,java.lang.Comparable val,int bnd,int l,int r){  if (NumberComparator.isNumber(val)) {    return find(arr,val,bnd,l,r,NumberComparator.createComparator(val.getClass()));  }  int m=l;  int d=1;  while (m <= r) {    if (val.compareTo(arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;      break;    }    m+=d;    d<<=1;  }  while (l <= r) {    m=(l + r) >>> 1;    if (val.compareTo(arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;    }  }  return l - 1;}  }
class C{  private void checkAndAddResizeHandler(){  Component parent=getParent();  if (parent != null && resizable && resizeHandler == null) {    resizeHandler=new ResizeHandler();    parent.addComponentListener(resizeHandler);  }}  }
class C{  public String[] validBaudRates(){  return new String[]{"19,200 baud (Sw1 off, Sw3 off)","57,600 baud (Sw1 on, Sw3 off)"};}  }
class C{  public MultiGetRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  public byte[] toByteArray(final ArrayOfItemsSerDe<T> serDe){  if (gadget_ == null || gadget_.getNumSamples() == 0) {    return toByteArray(serDe,null);  } else {    return toByteArray(serDe,gadget_.getValueAtPosition(0).getClass());  }}  }
class C{  public DataEditor(){  this.parameters=new Parameters();}  }
class C{  private static int checkFormalTypeParameter(final String signature,int pos){  pos=checkIdentifier(signature,pos);  pos=checkChar(':',signature,pos);  if ("L[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkFieldTypeSignature(signature,pos);  }  while (getChar(signature,pos) == ':') {    pos=checkFieldTypeSignature(signature,pos + 1);  }  return pos;}  }
class C{  private void mergeDepartures(TransitScheduleFactoryImpl factory,Map<Id<TransitRoute>,TransitRoute> transitRoutes,TransitRouteStop startTransitRouteStop,TransitRoute mergedTransitRoute,String[] listOfTransitRoutes){  for (int i=0; i < listOfTransitRoutes.length; i++) {    TransitRoute transitRoute=transitRoutes.get(Id.create(listOfTransitRoutes[i],TransitRoute.class));    if (mergedTransitRouteContainsTransitRouteStops(mergedTransitRoute,transitRoute,startTransitRouteStop)) {      for (      Departure departure : transitRoute.getDepartures().values()) {        String departureId=mergedTransitRoute.getDepartures().size() < 10 ? "0" + Integer.toString(mergedTransitRoute.getDepartures().size()) : Integer.toString(mergedTransitRoute.getDepartures().size());        Departure dep=factory.createDeparture(Id.create(departureId,Departure.class),departure.getDepartureTime() + transitRoute.getStop(startTransitRouteStop.getStopFacility()).getDepartureOffset());        dep.setVehicleId(departure.getVehicleId());        mergedTransitRoute.addDeparture(dep);      }    }  }}  }
class C{  private void publishTemplateFile() throws Exception {  InputStream is=null;  try {    is=controllerAccess.getClass().getClassLoader().getResourceAsStream(LOG4J_TEMPLATE);    if (is == null) {      LOGGER.warn("Template file not found: " + LOG4J_TEMPLATE);    } else     if (logFile.getParentFile().exists()) {      FileUtils.writeByteArrayToFile(logFile,IOUtils.toByteArray(is));    }  } catch (  Exception e) {    LOGGER.error("Failed to publish template file from " + LOG4J_TEMPLATE + " to "+ logFile.getAbsolutePath(),e);  } finally {    if (is != null) {      is.close();    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String value=getString(stack);  String property=getString(stack);  String dataSource=getString(stack);  try {    return EPG.setProperty(dataSource,property,value);  } catch (  sage.EPGServerException e) {    return e.getMessage();  }}  }
class C{  @SuppressWarnings("unchecked") private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,0,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public long skip(long count) throws IOException {  long remaining=count;  while (remaining > 0) {    int skip=Math.max(Integer.MAX_VALUE,(int)remaining);    skip(skip);    remaining-=skip;  }  return count;}  }
class C{  public void tallyVariant(VcfHeader header,VcfRecord rec){  tallyVariant(rec,header.getSampleNames());}  }
class C{  public static String uppcaseFirstLetter(final String source){  if (source.length() > 0) {    return Character.toUpperCase(source.charAt(0)) + source.substring(1);  }  return source;}  }
class C{  protected void discardIfRequired(Method aMethod,UnitOfWork aUnitOfWork,Throwable aThrowable){  UnitOfWorkDiscardOn discardPolicy=aMethod.getAnnotation(UnitOfWorkDiscardOn.class);  Class<?>[] discardClasses;  if (discardPolicy != null) {    discardClasses=discardPolicy.value();  } else {    discardClasses=DEFAULT_DISCARD_CLASSES;  }  Class<? extends Throwable> aThrowableClass=aThrowable.getClass();  for (  Class<?> discardClass : discardClasses) {    if (discardClass.isAssignableFrom(aThrowableClass)) {      aUnitOfWork.discard();    }  }}  }
class C{  public LazyPVectorX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  public static Vector<String> readTypeNames(String fileName) throws IOException {  Vector<String> typeNames=new Vector<String>(500);  LineNumberReader in=new LineNumberReader(new FileReader(fileName));  String typeName;  while ((typeName=in.readLine()) != null) {    int index=typeName.indexOf('#');    if (index >= 0)     typeName=typeName.substring(0,index);    typeName=typeName.trim();    if (typeName.length() == 0)     continue;    if (File.separatorChar != '/') {      typeName=typeName.replace(File.separatorChar,'/');    }    TypeDescriptorParsing.validateAsTypeDescriptor(typeName);    if (TypeDescriptorParsing.isValidTypeDescriptor(typeName))     typeNames.add(typeName); else     fail(fileName + ":" + in.getLineNumber()+ ": syntax error: \""+ typeName+ "\" does not describe any Java type.");  }  in.close();  return typeNames;}  }
class C{  public void countData(){  if ((m_Filtered != null) || (m_Ruleset == null) || (m_Data == null)) {    return;  }  int size=m_Ruleset.size();  m_Filtered=new ArrayList<Instances[]>(size);  m_SimpleStats=new ArrayList<double[]>(size);  m_Distributions=new ArrayList<double[]>(size);  Instances data=new Instances(m_Data);  for (int i=0; i < size; i++) {    double[] stats=new double[6];    double[] classCounts=new double[m_Data.classAttribute().numValues()];    Instances[] filtered=computeSimpleStats(i,data,stats,classCounts);    m_Filtered.add(filtered);    m_SimpleStats.add(stats);    m_Distributions.add(classCounts);    data=filtered[1];  }}  }
class C{  public void d(Object str){  if (debug) {    if (logLevel <= Log.DEBUG) {      String name=getFunctionName();      if (name != null) {        Log.d(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.d(tag,str.toString());      }    }  }}  }
class C{  protected static BitSet doubleToBits(double value,double maxRange){  BitSet bits=new BitStore();  double maxValue=maxRange;  double minValue=-maxRange;  double midValue;  for (int i=0; i < BITS; i++) {    midValue=(maxValue + minValue) / 2.0;    if (value >= midValue) {      bits.set(BITS - i - 1);      minValue=midValue;    } else {      bits.set(BITS - i - 1,false);      maxValue=midValue;    }  }  return bits;}  }
class C{  public static void main(String[] args){  Header.printHeader(NmbmSurveyParser.class.toString(),args);  NmbmSurveyParser nsp=new NmbmSurveyParser();  nsp.parseZones(args[0]);  nsp.parseHousehold(args[1]);  nsp.parseIndividual(args[2]);  nsp.writeHouseholds(args[3]);  nsp.writePopulation(args[3]);  Header.printFooter();}  }
class C{  public static int countKeywords(File file) throws Exception {  String[] keywordString={"abstract","assert","boolean","break","byte","case","catch","char","class","const","continue","default","do","double","else","enum","extends","for","final","finally","float","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"};  Set<String> keywordSet=new HashSet<>(Arrays.asList(keywordString));  int count=0;  Scanner input=new Scanner(file);  while (input.hasNext()) {    String word=input.next();    if (word.equals("//"))     input.nextLine(); else     if (word.contains("\""))     while (input.hasNext() && !input.next().contains("\"")) {    } else     if (word.contains("/*"))     while (input.hasNext() && !input.next().contains("*/")) {    } else     if (keywordSet.contains(word))     count++;  }  return count;}  }
class C{  protected void cascadingCut(Node y){  Node z=y.parent;  if (z != null) {    if (!y.mark) {      y.mark=true;    } else {      cut(y,z);      cascadingCut(z);    }  }}  }
class C{  public Matrix computeDerivatives(Matrix loghyper,Matrix X,int index){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  if (index > numParameters() - 1)   throw new IllegalArgumentException("Wrong hyperparameters index " + index + " it should be smaller or equal to "+ (numParameters() - 1));  final double s2=Math.exp(2 * loghyper.get(0,0));  Matrix A=Matrix.identity(X.getRowDimension(),X.getRowDimension()).times(2 * s2);  return A;}  }
class C{  protected void clearViews(){  mViews.clear();}  }
class C{  public void resolve(Chain chain){  Assert.check(!alive || chain == null || state.stacksize == chain.state.stacksize && state.nlocks == chain.state.nlocks);  pendingJumps=mergeChains(chain,pendingJumps);}  }
class C{  public StageActivityTypesImpl(final Collection<String> types){  this.types.addAll(types);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:35.753 -0500",hash_original_method="937D0115F7BB3894701032373C9A4BC7",hash_generated_method="C9B13E42E413956CD49FBE30E23328D3") public boolean hasVaryAll(){  return varyFields.contains("*");}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.VARIABLE_DECLARATION__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public void testFilterSubscriber_hidesSpinner(){  mController.loadSearchResults();  TypedCursorFetchedEvent event=TypedCursorFetchedEventFactory.createEvent(Patient.class,getFakeAppPatientCursor());  mFakeCrudEventBus.post(event);  verify(mFragmentMockUi).showSpinner(false);}  }
class C{  public boolean isInt(String key){  Object val=get(key);  return val instanceof Integer;}  }
class C{  public TreeRTGBetulaPapyrifera(){  super();  this.logBlock=BlockUtil.getStateLog(2);  this.leavesBlock=BlockUtil.getStateLeaf(2);}  }
class C{  private static Set<ImmutableObject> persistDomainAndDescendants(String fqdn){  DomainResource domain=persistDeletedDomain(fqdn,DELETION_TIME);  HistoryEntry historyEntry=persistSimpleResource(new HistoryEntry.Builder().setParent(domain).setType(HistoryEntry.Type.DOMAIN_CREATE).build());  BillingEvent.OneTime billingEvent=persistSimpleResource(new BillingEvent.OneTime.Builder().setParent(historyEntry).setBillingTime(DELETION_TIME.plusYears(1)).setCost(Money.parse("USD 10")).setPeriodYears(1).setReason(Reason.CREATE).setClientId("TheRegistrar").setEventTime(DELETION_TIME).setTargetId(fqdn).build());  PollMessage.OneTime pollMessage=persistSimpleResource(new PollMessage.OneTime.Builder().setParent(historyEntry).setEventTime(DELETION_TIME).setClientId("TheRegistrar").setMsg("Domain registered").build());  ForeignKeyIndex<DomainResource> fki=ForeignKeyIndex.load(DomainResource.class,fqdn,START_OF_TIME);  EppResourceIndex eppIndex=ofy().load().entity(EppResourceIndex.create(Key.create(domain))).now();  return ImmutableSet.<ImmutableObject>of(domain,historyEntry,billingEvent,pollMessage,fki,eppIndex);}  }
class C{  public final int readInt() throws IOException {  return byteBuffer.getInt();}  }
class C{  public Sequence(Class<?> type1,Class<?> type2){  super(type2,type1,type2);}  }
class C{  public static List<String> readLines(Path self) throws IOException {  return IOGroovyMethods.readLines(newReader(self));}  }
class C{  public GroupExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  public void pause(JobNodeBean node){  if (node instanceof ActJobNodeBean) {    ActJobNodeBean jobNode=(ActJobNodeBean)node;    controller.pauseJob(jobNode.getId());  } else   if (node instanceof VMNodeBean) {    VMNodeBean agentNode=(VMNodeBean)node;    controller.pauseAgent(agentNode.getId());  }}  }
class C{  public void fireRequestInfoLine(InfoDisplayEvent evt){  for (  InfoDisplayListener listener : IDListeners) {    listener.requestInfoLine(evt);  }}  }
class C{  public K peekFirst(){  Entry<K> x=head;  return x.obj;}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize) {      bufpos=0;    }    return buffer[bufpos];  }  char c;  if (++bufpos == available) {    AdjustBuffSize();  }  if ((buffer[bufpos]=c=ReadByte()) == '\\') {    UpdateLineColumn(c);    int backSlashCnt=1;    for (; ; ) {      if (++bufpos == available) {        AdjustBuffSize();      }      try {        if ((buffer[bufpos]=c=ReadByte()) != '\\') {          UpdateLineColumn(c);          if ((c == 'u') && ((backSlashCnt & 1) == 1)) {            if (--bufpos < 0) {              bufpos=bufsize - 1;            }            break;          }          backup(backSlashCnt);          return '\\';        }      } catch (      java.io.IOException e) {        if (backSlashCnt > 1) {          backup(backSlashCnt - 1);        }        return '\\';      }      UpdateLineColumn(c);      backSlashCnt++;    }    try {      while ((c=ReadByte()) == 'u')       ++column;      buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));      column+=4;    } catch (    java.io.IOException e) {      throw new Error("Invalid escape character at line " + line + " column "+ column+ ".");    }    if (backSlashCnt == 1) {      return c;    } else {      backup(backSlashCnt - 1);      return '\\';    }  } else {    UpdateLineColumn(c);    return c;  }}  }
class C{  private void initialize(){  if ((null != selection) && (!selection.isEmpty()) && (selection instanceof IStructuredSelection)) {    IStructuredSelection ssel=(IStructuredSelection)selection;    if (ssel.size() > 1) {      return;    }    Object obj=ssel.getFirstElement();    if (obj instanceof IResource) {      IContainer containerResource;      if (obj instanceof IContainer) {        containerResource=(IContainer)obj;      } else {        containerResource=((IResource)obj).getParent();      }      container.setText(containerResource.getFullPath().toString());    }  }  filename.setText("relationships.dpans");}  }
class C{  public static void generateFacilitiesFile(){  LOG.info("Generating facilities file...");  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc).readFile("/Volumes/Nifty/workspace/coct-data/matsim/businessCases/facilityMove/relocatedPlans_Belcon.xml.gz");  new MatsimNetworkReader(sc.getNetwork()).readFile("/Volumes/Nifty/workspace/coct-data/matsim/20150930/network.xml.gz");  ActivityFacilities facilities=sc.getActivityFacilities();  ActivityFacilitiesFactory aff=facilities.getFactory();  for (  Person person : sc.getPopulation().getPersons().values()) {    Plan plan=person.getSelectedPlan();    for (int i=0; i < plan.getPlanElements().size() - 1; i++) {      PlanElement pe=plan.getPlanElements().get(i);      if (pe instanceof Activity) {        Activity act=(Activity)pe;        Id<ActivityFacility> fId=act.getFacilityId();        if (!facilities.getFacilities().containsKey(fId)) {          ActivityFacility facility=aff.createActivityFacility(fId,act.getCoord());          ActivityOption majorOption=aff.createActivityOption("major");          ActivityOption minorOption=aff.createActivityOption("minor");          facility.addActivityOption(minorOption);          facility.addActivityOption(majorOption);          facilities.addActivityFacility(facility);        }      }    }  }  LOG.info("Done generating facilities file.");  LOG.info("Total number of facilities found: " + facilities.getFacilities().size());  new FacilitiesWriter(facilities).write("/Volumes/Nifty/workspace/coct-data/matsim/businessCases/facilityMove/belconFacilities.xml.gz");}  }
class C{  @Override public String toString(){  if (getUserObject() instanceof MovieSet) {    MovieSet movieSet=(MovieSet)getUserObject();    return movieSet.getTitle();  }  return super.toString();}  }
class C{  public static Border createEtchedBorder(int type,Color highlight,Color shadow){  return new EtchedBorder(type,highlight,shadow);}  }
class C{  public EliasFanoLongBigList(final ByteIterator iterator,final byte lowerBound){  this(LongIterators.wrap(iterator),lowerBound);}  }
class C{  protected HttpHost determineProxy(HttpHost target,HttpRequest request,HttpContext context) throws HttpException {  ProxySelector psel=this.proxySelector;  if (psel == null)   psel=ProxySelector.getDefault();  if (psel == null)   return null;  URI targetURI=null;  try {    targetURI=new URI(target.toURI());  } catch (  URISyntaxException usx) {    throw new HttpException("Cannot convert host to URI: " + target,usx);  }  List<Proxy> proxies=psel.select(targetURI);  Proxy p=chooseProxy(proxies,target,request,context);  HttpHost result=null;  if (p.type() == Proxy.Type.HTTP) {    if (!(p.address() instanceof InetSocketAddress)) {      throw new HttpException("Unable to handle non-Inet proxy address: " + p.address());    }    final InetSocketAddress isa=(InetSocketAddress)p.address();    result=new HttpHost(getHost(isa),isa.getPort());  }  return result;}  }
class C{  public int size(){  return lengths[0];}  }
class C{  private Object readResolve() throws ObjectStreamException {  Object result=null;  if (this.equals(PlotOrientation.HORIZONTAL)) {    result=PlotOrientation.HORIZONTAL;  } else   if (this.equals(PlotOrientation.VERTICAL)) {    result=PlotOrientation.VERTICAL;  }  return result;}  }
class C{  protected BlockSnapshot checkSnapShotExistsInDB(String nativeGuid,DbClient dbClient) throws IOException {  @SuppressWarnings("deprecation") List<URI> snapShotUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getBlockSnapshotsByNativeGuid(nativeGuid));  for (  URI snapShotUri : snapShotUris) {    BlockSnapshot snapShot=dbClient.queryObject(BlockSnapshot.class,snapShotUri);    if (snapShot != null && !snapShot.getInactive()) {      return snapShot;    }  }  return null;}  }
class C{  public Range(){}  }
class C{  public int stringLength(){  String sqlTypeUpperCase=sqlType.toUpperCase();  if (sqlTypeUpperCase.indexOf("VARCHAR") >= 0) {    if (sqlTypeUpperCase.indexOf("(") > 0 && sqlTypeUpperCase.indexOf(")") > 0) {      String length=sqlTypeUpperCase.substring(sqlTypeUpperCase.indexOf("(") + 1,sqlTypeUpperCase.indexOf(")"));      return Integer.parseInt(length);    } else {      return 255;    }  } else   if (sqlTypeUpperCase.indexOf("CHAR") >= 0) {    if (sqlTypeUpperCase.indexOf("(") > 0 && sqlTypeUpperCase.indexOf(")") > 0) {      String length=sqlTypeUpperCase.substring(sqlTypeUpperCase.indexOf("(") + 1,sqlTypeUpperCase.indexOf(")"));      return Integer.parseInt(length);    } else {      return 255;    }  } else   if (sqlTypeUpperCase.indexOf("TEXT") >= 0 || sqlTypeUpperCase.indexOf("LONG") >= 0 || sqlTypeUpperCase.indexOf("CLOB") >= 0) {    return 5000;  }  return 20;}  }
class C{  public void achievementGive(CommandSender sender,String[] args){  String configAchievement="Commands." + args[1];  Player player=null;  for (  Player currentPlayer : Bukkit.getOnlinePlayers()) {    if (currentPlayer.getName().equalsIgnoreCase(args[2])) {      player=currentPlayer;      break;    }  }  if (player == null) {    sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("player-offline","The player PLAYER is offline!").replace("PLAYER",args[2]));    return;  }  if (plugin.getPluginConfig().getString(configAchievement + ".Message",null) != null) {    if (!multiCommand && plugin.getDb().hasPlayerAchievement(player,plugin.getPluginConfig().getString(configAchievement + ".Name"))) {      sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("achievement-already-received","The player PLAYER has already received this achievement!").replace("PLAYER",args[2]));      return;    }    plugin.getAchievementDisplay().displayAchievement(player,configAchievement);    plugin.getDb().registerAchievement(player,plugin.getPluginConfig().getString(configAchievement + ".Name"),plugin.getPluginConfig().getString(configAchievement + ".Message"));    plugin.getReward().checkConfig(player,configAchievement);    sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("achievement-given","Achievement given!"));  } else {    sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("achievement-not-found","The specified achievement was not found in Commands category.").replace("PLAYER",args[2]));  }}  }
class C{  public GermanAnalyzer(CharArraySet stopwords,CharArraySet stemExclusionSet){  super(stopwords);  exclusionSet=CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionSet));}  }
class C{  public int[][] e2f(){  int eDim=tgtEndExclusive - tgtStartInclusive;  int[][] e2f=new int[eDim][];  for (int i=tgtStartInclusive; i < tgtEndExclusive; ++i) {    int localIdx=i - tgtStartInclusive;    int[] e2fI=sentencePair.e2f(i);    int srcAlignDim=e2fI.length;    e2f[localIdx]=new int[srcAlignDim];    if (srcAlignDim > 0) {      System.arraycopy(e2fI,0,e2f[localIdx],0,srcAlignDim);      for (int j=0; j < srcAlignDim; ++j) {        e2f[localIdx][j]-=srcStartInclusive;      }    }  }  return e2f;}  }
class C{  public SubspaceModel(Subspace subspace,double[] mean){  super(mean);  this.subspace=subspace;}  }
class C{  private void scan(Class type){  methods(type);  fields(type);  extract(type);}  }
class C{  public AccountHeaderBuilder withProfileImagesClickable(boolean profileImagesClickable){  this.mProfileImagesClickable=profileImagesClickable;  return this;}  }
class C{  public boolean hasNextWord(){  int index=remaining.indexOf(' ');  return hasNext() && index < remaining.length() - 1;}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public static void main(String... args) throws Exception {  Server server=Server.createTcpServer("-tcpPort","9081");  server.start();  System.out.println("You can access the database remotely now, using the URL:");  System.out.println("jdbc:h2:tcp://localhost:9081/~/test (user: sa, password: sa)");  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:~/test","sa","sa");  Statement stat=conn.createStatement();  stat.execute("DROP TABLE TIMER IF EXISTS");  stat.execute("CREATE TABLE TIMER(ID INT PRIMARY KEY, TIME VARCHAR)");  System.out.println("Execute this a few times: " + "SELECT TIME FROM TIMER");  System.out.println("To stop this application " + "(and the server), run: DROP TABLE TIMER");  try {    while (true) {      stat.execute("MERGE INTO TIMER VALUES(1, NOW())");      Thread.sleep(1000);    }  } catch (  SQLException e) {    System.out.println("Error: " + e.toString());  }  conn.close();  server.stop();}  }
class C{  public void releaseTile(JulesTile tile){  if (tile != null && tile.hasBuffer()) {    idleTileConsumerCacheList.add(tile);    if (idleTileConsumerCacheList.size() > IDLE_TILE_SYNC_GRANULARITY) {synchronized (idleBuffers) {        idleBuffers.addAll(idleTileConsumerCacheList);      }      idleTileConsumerCacheList.clear();    }  }}  }
class C{  public boolean contains(symbol sym){  return _all.containsKey(sym.name());}  }
class C{  final void prepareForBlock(BasicBlock bb){  if (DEBUG) {    VM.sysWrite("FINAL LIR\n");    bb.printExtended();  }  lastInstr=bb.firstInstruction();}  }
class C{  public static boolean sendPushMessage(String body,String deviceKey,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword){  ConnectionRequest cr=createPushMessage(body,deviceKey,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,"","","","");  NetworkManager.getInstance().addToQueueAndWait(cr);  if (cr.getResposeCode() == 200) {    return true;  }  return false;}  }
class C{  public ConstantAttribute(ConstPool cp,int index){  super(cp,tag);  byte[] bvalue=new byte[2];  bvalue[0]=(byte)(index >>> 8);  bvalue[1]=(byte)index;  set(bvalue);}  }
class C{  public CommandLinkOnClickITCase(String name){  super(name);}  }
class C{  public void testIntWritableSerialization() throws Exception {  HadoopSerialization ser=new HadoopSerializationWrapper(new WritableSerialization(),IntWritable.class);  ByteArrayOutputStream buf=new ByteArrayOutputStream();  DataOutput out=new DataOutputStream(buf);  ser.write(out,new IntWritable(3));  ser.write(out,new IntWritable(-5));  assertEquals("[0, 0, 0, 3, -1, -1, -1, -5]",Arrays.toString(buf.toByteArray()));  DataInput in=new DataInputStream(new ByteArrayInputStream(buf.toByteArray()));  assertEquals(3,((IntWritable)ser.read(in,null)).get());  assertEquals(-5,((IntWritable)ser.read(in,null)).get());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.952 -0500",hash_original_method="10886573EB8B45FC976B918620A506A6",hash_generated_method="3FB2942F950847506BC4F36FE2D2B437") private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  public boolean isReadWrite(){  return m_readWrite;}  }
class C{  private void processPendingFilterStatus(){  pendingBtnClicked=!pendingBtnClicked;  processCommonFilterStatus(TargetUpdateStatus.PENDING,pendingBtnClicked);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof NumberUp);}  }
class C{  public boolean couldContainMatridIds(){  return (0 != mEmails.size());}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws org.xml.sax.SAXException {  throw new StopParseException();}  }
class C{  public void mark(final Label label){  mv.visitLabel(label);}  }
class C{  public SnapshotException(Throwable cause){  super(cause);}  }
class C{  public WorkspacePoint createFromParcel(Parcel in){  WorkspacePoint r=new WorkspacePoint();  r.readFromParcel(in);  return r;}  }
class C{  public static TokenQueue<HtmlTokenType> makeTokenQueue(InputSource is,Reader in,boolean asXml,boolean wantsComments) throws IOException {  return makeTokenQueue(FilePosition.startOfFile(is),in,asXml,wantsComments);}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  flushPending();  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  CorsServiceBuilder(final String... origins){  final Set<String> originsCopy=new LinkedHashSet<>();  for (  String o : origins) {    originsCopy.add(o.toLowerCase(Locale.ENGLISH));  }  this.origins=Collections.unmodifiableSet(originsCopy);  anyOriginSupported=false;}  }
class C{  private boolean textOverlapsBar(Rect textBounds,RectF barBounds){  if (!mShowText || mDrawOverText) {    return false;  }  double factor=0.6d;  int textL=textBounds.left - scale(textBounds.width(),factor);  int textT=textBounds.top;  int textR=textBounds.right + scale(textBounds.width(),factor);  int textB=textBounds.bottom;  return barBounds.intersects(textL,textT,textR,textB);}  }
class C{  private ArrayList<Long> buildCursorPositionMapping(final long[] order,final String columnName,final List<? extends Object> extraData){  ArrayList<Long> missingIds=new ArrayList<Long>();  mOrderedPositions=new ArrayList<Integer>(mCursor.getCount());  mExtraData=new ArrayList<Object>();  mMapCursorPositions=new HashMap<Long,Integer>(mCursor.getCount());  final int idPosition=mCursor.getColumnIndex(columnName);  if (mCursor.moveToFirst()) {    do {      mMapCursorPositions.put(mCursor.getLong(idPosition),mCursor.getPosition());    } while (mCursor.moveToNext());    for (int i=0; order != null && i < order.length; i++) {      final long id=order[i];      if (mMapCursorPositions.containsKey(id)) {        mOrderedPositions.add(mMapCursorPositions.get(id));        mMapCursorPositions.remove(id);        if (extraData != null) {          mExtraData.add(extraData.get(i));        }      } else {        missingIds.add(id);      }    }    mCursor.moveToFirst();  }  return missingIds;}  }
class C{  @Override public boolean resultSet_next(FilterChain chain,ResultSetProxy resultSet) throws SQLException {  return super.resultSet_next(chain,resultSet);}  }
class C{  @JsonIgnore public boolean isEmpty(){  return properties.isEmpty();}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    target.visit(v);    for (    AstNode arg : getArguments()) {      arg.visit(v);    }    if (initializer != null) {      initializer.visit(v);    }  }}  }
class C{  public static <K,V>Map<K,V> map(K[] keys,V[] values){  if (keys.length != values.length) {    throw new IllegalArgumentException("Cannot create a Map: " + "The number of keys and values differs.");  }  Map<K,V> map=new LinkedHashMap<K,V>(keys.length);  for (int i=0; i < keys.length; i++) {    K key=keys[i];    V value=values[i];    map.put(key,value);  }  return map;}  }
class C{  public double atmRate(final Leg leg,final Handle<YieldTermStructure> discountCurve,final Date settlementDate,final Date npvDate,final int exDividendDays,double npv){  final double bps=bps(leg,discountCurve,settlementDate,npvDate,exDividendDays);  if (npv == 0) {    npv=npv(leg,discountCurve,settlementDate,npvDate,exDividendDays);  }  return basisPoint_ * npv / bps;}  }
class C{  public URL(String protocol,String host,int port,String file,URLStreamHandler handler) throws MalformedURLException {  if (port < -1) {    throw new MalformedURLException("port < -1: " + port);  }  if (protocol == null) {    throw new NullPointerException("protocol == null");  }  if (host != null && host.contains(":") && host.charAt(0) != '[') {    host="[" + host + "]";  }  this.protocol=protocol;  this.host=host;  this.port=port;  file=UrlUtils.authoritySafePath(host,file);  int hash=file.indexOf("#");  if (hash != -1) {    this.file=file.substring(0,hash);    this.ref=file.substring(hash + 1);  } else {    this.file=file;  }  fixURL(false);  if (handler == null) {    setupStreamHandler();    if (streamHandler == null) {      throw new MalformedURLException("Unknown protocol: " + protocol);    }  } else {    streamHandler=handler;  }}  }
class C{  public GroupChatSession createOriginatingAdHocGroupChatSession(Set<ContactId> contacts,String subject,long timestamp){  if (sLogger.isActivated()) {    sLogger.info("Initiate an ad-hoc group chat session");  }  Map<ContactId,ParticipantStatus> participants=ChatUtils.getParticipants(contacts,ParticipantStatus.INVITING);  return new OriginatingAdhocGroupChatSession(this,ImsModule.getImsUserProfile().getImConferenceUri(),subject,participants,mRcsSettings,mMessagingLog,timestamp,mContactManager);}  }
class C{  public static void main(String[] args){  PrintStream ps=null;  try {    ps=new PrintStream(System.out,true,"UTF-8");    ps.println(transform(args));  } catch (  Throwable t) {    t.printStackTrace();    if (ps != null)     ps.println(TRANSFORMATION_FAILED_FLAG);    if (t instanceof Error)     throw (Error)t;  }}  }
class C{  @Override public Type ANY(){  return anyType;}  }
class C{  private void collisionCheck(int x,int y,int tx,int ty,String moveStr){  Occupant from=getOccupant(x,y);  Occupant to=getOccupant(tx,ty);  if (!isEmpty(tx,ty)) {    String msg=String.format("%s tried to %s from " + "(%d, %d) to (%d, %d) already occupied by %s.",from.name(),moveStr,x,y,tx,ty,to.name());    throw new IllegalArgumentException(msg);  }}  }
class C{  public boolean isClientInCollection(ClientId searchParam,Iterable<ClientId> searched){  ClientId searchResult=Iterables.find(searched,null,null);  return (searchResult != null);}  }
class C{  public void scale(float scale){  if (scale != 1.0f) {    left=(int)(left * scale + 0.5f);    top=(int)(top * scale + 0.5f);    right=(int)(right * scale + 0.5f);    bottom=(int)(bottom * scale + 0.5f);  }}  }
class C{  @Override public Object _init_(final IScope scope){  super._init_(scope);  final String state=ReverseOperators.serializeAgent(scope,this.getSimulation());  historyTree.setRoot(state);  currentNode=historyTree.getRoot();  return this;}  }
class C{  public static double cdf(double x,double m,double shape){  if (x <= 0 || m <= 0 || shape <= 0) {    return Double.NaN;  }  double a=Math.sqrt(shape / x);  double b=x / m;  double p1=NormalDistribution.cdf(a * (b - 1.0),0.0,1.0,false);  double p2=NormalDistribution.cdf(-a * (b + 1.0),0.0,1.0,false);  if (p2 == 0.0) {    return p1;  } else {    double c=2.0 * shape / m;    if (c >= 0x1.fffffffffffffP+1023) {      return Double.POSITIVE_INFINITY;    }    return p1 + Math.exp(c) * p2;  }}  }
class C{  @Deprecated public void onSuccess(int statusCode,Header[] headers,String content){  onSuccess(statusCode,content);}  }
class C{  public Enumeration<GraphNode> enumerateVertices(){  return graph.enumerateNodes();}  }
class C{  public static List<Map<String,AttributeValue>> sampleScanResult(){  List<Map<String,AttributeValue>> items=new LinkedList<Map<String,AttributeValue>>();  Map<String,AttributeValue> sampleScanResult=new HashMap<String,AttributeValue>();  sampleScanResult.put("key",new AttributeValue("attribute value"));  items.add(sampleScanResult);  return items;}  }
class C{  public SerializationException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  @Override protected boolean forcedRewind(int marker){  input.rewind(marker);  return true;}  }
class C{  public static Long downsamplerTimestamp(Long millitimestamp,long windowSize){  return millitimestamp - (millitimestamp % windowSize);}  }
class C{  public VOUserDetails(long id,int version){  super(id,version);}  }
class C{  public boolean savedPatternExists(){  return sHaveNonZeroPatternFile.get();}  }
class C{  private void selectionChanged(){  int selectedRowIndex=getSelectedRow();  if (selectedRowIndex != -1) {    assert 0 <= selectedRowIndex && selectedRowIndex < gcTraceSet.size();    GCTrace gcTrace=gcTraceSet.findGCTrace(selectedRowIndex);    updateTraceInfo(gcTrace);  } else {    updateTraceInfo(null);  }}  }
class C{  public void reset(){  started=false;}  }
class C{  public boolean hasPreviousPage(){  return getNumber() != -1 && itemsBefore != 0;}  }
class C{  public Body createBody(BodyDef def){  assert (isLocked() == false);  if (isLocked()) {    return null;  }  Body b=new Body(def,this);  b.m_prev=null;  b.m_next=m_bodyList;  if (m_bodyList != null) {    m_bodyList.m_prev=b;  }  m_bodyList=b;  ++m_bodyCount;  return b;}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {}  }
class C{  double almostEquals(Point2D p1,Point2D p2,double tol){  double sepX=p1.getX() - p2.getX();  double sepY=p1.getY() - p2.getY();  double sep=Math.sqrt(sepX * sepX + sepY * sepY);  if (sep <= tol)   return sep; else   return Double.MAX_VALUE;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.VARIABLE_REF__REF:    if (resolve)     return getRef();  return basicGetRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static VersionRange atLeast(DelimitedVersion version){  return new VersionRange(version,null);}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  ServletContext servletContext=jettyContext.getServletContext();  GenericWebApplicationContext webCtx=new GenericWebApplicationContext();  webCtx.setServletContext(servletContext);  webCtx.setParent(ctx);  webCtx.refresh();  servletContext.setAttribute(contextAttribute,webCtx);  jettyContext.start();  if (log.isInfoEnabled()) {    log.info("| Jetty Web Application Context started!");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String toString(int maxNumber){  StringBuffer output=new StringBuffer("Frequent Item Sets (" + size() + "):"+ Tools.getLineSeparator());  if (frequentSets.size() == 0) {    output.append("no itemsets found");  } else {    int counter=0;    for (    FrequentItemSet set : frequentSets) {      counter++;      if ((maxNumber > 0) && (counter > maxNumber)) {        output.append("... " + (size() - maxNumber) + " additional item sets ...");        break;      } else {        output.append(set.getItemsAsString());        output.append(" / ");        output.append(Tools.formatNumber((double)set.getFrequency() / (double)numberOfTransactions));        output.append(Tools.getLineSeparator());      }    }  }  return output.toString();}  }
class C{  private boolean attemptScrollAction(AccessibilityNodeInfoCompat cursor,int action){  if (cursor == null) {    return false;  }  AccessibilityNodeInfoCompat scrollableNode=null;  try {    scrollableNode=getBestScrollableNode(cursor,action);    if (scrollableNode == null) {      return false;    }    final boolean performedAction=PerformActionUtils.performAction(scrollableNode,action);    if (performedAction) {      final Set<ScrollListener> listeners=new HashSet<>(mScrollListeners);      for (      ScrollListener listener : listeners) {        listener.onScroll(scrollableNode,action);      }    }    return performedAction;  }  finally {    AccessibilityNodeInfoUtils.recycleNodes(scrollableNode);  }}  }
class C{  public void validate(){  byte dlsnVersion=getDlsnVersion();  Preconditions.checkArgument(dlsnVersion >= DLSN.VERSION0 && dlsnVersion <= DLSN.VERSION1,"Unknown dlsn version " + dlsnVersion);  Preconditions.checkArgument(getServerThreads() > 0,"Invalid number of server threads : " + getServerThreads());  Preconditions.checkArgument(getServerShardId() >= 0,"Invalid server shard id : " + getServerShardId());}  }
class C{  private CallVerificationStack(){}  }
class C{  public static boolean hasSpringNature(IProject project){  try {    if (NatureUtils.hasNature(project,"org.springframework.ide.eclipse.core.springnature")) {      return true;    }  } catch (  CoreException ce) {    Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,"Unable to examine natures on project " + project.getName(),ce));  }  return false;}  }
class C{  public KDF2BytesGenerator(Digest digest){  super(1,digest);}  }
class C{  public IndexToLocFormat formatVersion(){  return this.version;}  }
class C{  public static SimpleBigDecimal approximateDivisionByN(BigInteger k,BigInteger s,BigInteger vm,byte a,int m,int c){  int _k=(m + 5) / 2 + c;  BigInteger ns=k.shiftRight(m - _k - 2 + a);  BigInteger gs=s.multiply(ns);  BigInteger hs=gs.shiftRight(m);  BigInteger js=vm.multiply(hs);  BigInteger gsPlusJs=gs.add(js);  BigInteger ls=gsPlusJs.shiftRight(_k - c);  if (gsPlusJs.testBit(_k - c - 1)) {    ls=ls.add(ECConstants.ONE);  }  return new SimpleBigDecimal(ls,c);}  }
class C{  public void run(){  try {    final double sample=sampleTask.call().doubleValue();    average=getMovingAverage(average,sample,w);    nsamples++;  } catch (  Exception ex) {    log.warn(name,ex);  }}  }
class C{  public Object clone(){  return new PathElement(this.toString());}  }
class C{  public void restartParsing(){  timer.restart();  running=true;}  }
class C{  @SuppressWarnings("serial") public RequestParams(final String key,final String value){  this(new HashMap<String,String>(){{      put(key,value);    }  });}  }
class C{  public final ArrayList<PositionRecord> loadPositions(final int session,final Double minLat,final Double maxLat,final Double minLon,final Double maxLon){  final ArrayList<PositionRecord> positions=new ArrayList<>();  String selection=Schema.COL_SESSION_ID + " = ?";  Cursor cursor=null;  List<String> selectionArgs=null;  if (minLat != null & maxLat != null && minLon != null && maxLon != null) {    selectionArgs=new ArrayList<>();    selectionArgs.add(String.valueOf(session));    selectionArgs.add(String.valueOf(minLat));    selectionArgs.add(String.valueOf(maxLat));    selectionArgs.add(String.valueOf(minLon));    selectionArgs.add(String.valueOf(maxLon));    selection+="AND (" + Schema.COL_LATITUDE + " > ? AND "+ Schema.COL_LATITUDE+ " < ?) AND ("+ Schema.COL_LONGITUDE+ " > ? AND "+ Schema.COL_LONGITUDE+ " < ?)";    cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,selection,selectionArgs.toArray(new String[0]),Schema.COL_TIMESTAMP);  } else {    Log.v(TAG,"No boundaries provided, loading all positions");    cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,null,null,Schema.COL_TIMESTAMP);  }  while (cursor.moveToNext()) {    positions.add(positionFromCursor(cursor));  }  cursor.close();  return positions;}  }
class C{  public void mouseMoved(MouseEvent e){  if (gestures != null) {    gestures.mouseMoved(e);  }  mouseSupport.fireMapMouseMoved(e);  fireMouseLocation(e);}  }
class C{  public void addActionListener(ActionListener listener){}  }
class C{  private static void updateSharedStoreConfiguration(Configuration backupConfiguration,String name,int portOffset,List<String> remoteConnectors,String journalDirectory,String bindingsDirectory,String largeMessagesDirectory,String pagingDirectory,boolean fullServer){  backupConfiguration.setName(name);  backupConfiguration.setJournalDirectory(journalDirectory);  backupConfiguration.setBindingsDirectory(bindingsDirectory);  backupConfiguration.setLargeMessagesDirectory(largeMessagesDirectory);  backupConfiguration.setPagingDirectory(pagingDirectory);  updateAcceptorsAndConnectors(backupConfiguration,portOffset,remoteConnectors,fullServer);}  }
class C{  public static void closeCacheServer(){  if (cacheServer != null && !cacheServer.isClosed()) {    cacheServer.close();    cacheServer.getDistributedSystem().disconnect();  }}  }
class C{  public void parse(final SetCookie cookie,String domain) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (domain == null) {    throw new MalformedCookieException("Missing value for domain attribute");  }  if (domain.trim().length() == 0) {    throw new MalformedCookieException("Blank value for domain attribute");  }  domain=domain.toLowerCase(Locale.ENGLISH);  if (!domain.startsWith(".")) {    domain='.' + domain;  }  cookie.setDomain(domain);}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  public LtExpr newLtExpr(Value op1,Value op2){  return new JLtExpr(op1,op2);}  }
class C{  public ApiConfig(String apiKey,LogLevel logLevel){  this(apiKey);  mLogLevel=logLevel;}  }
class C{  public ZoomToFitControl(String group,int button){  this.m_group=group;  this.m_button=button;}  }
class C{  boolean contains(int dataPageId){  for (int i=0; i < pageCount; i++) {    if (pageIds[i] == dataPageId) {      return true;    }  }  return false;}  }
class C{  public void writeEmptyPacket(int seqNo) throws IOException {  byte[] header;  logger.trace("send empty packet");  if (!useCompression) {    header=new byte[4];    header[0]=((byte)0);    header[1]=((byte)0);    header[2]=((byte)0);    header[3]=((byte)seqNo);    outputStream.write(header,0,4);  } else {    header=new byte[7];    header[0]=(byte)4;    header[1]=(byte)0;    header[2]=(byte)0;    header[3]=(byte)compressSeqNo;    header[4]=(byte)0;    header[5]=(byte)0;    header[6]=(byte)0;    outputStream.write(header,0,7);    header=new byte[4];    header[0]=((byte)0);    header[1]=((byte)0);    header[2]=((byte)0);    header[3]=((byte)seqNo);    outputStream.write(header,0,4);  }}  }
class C{  protected final void CMP2(Instruction s,RegisterOperand val1,Operand val2,ConditionOperand cond1,ConditionOperand cond2,boolean immediate){  Operator op1;  Operator op2;  if (immediate) {    op1=cond1.isUNSIGNED() ? PPC_CMPLI : PPC_CMPI;    op2=cond2.isUNSIGNED() ? PPC_CMPLI : PPC_CMPI;  } else {    op1=cond1.isUNSIGNED() ? PPC_CMPL : PPC_CMP;    op2=cond2.isUNSIGNED() ? PPC_CMPL : PPC_CMP;  }  if (op1 == op2) {    RegisterOperand cr=regpool.makeTempCondition();    EMIT(MIR_Binary.create(op1,cr,val1,val2));    EMIT(MIR_CondBranch2.mutate(s,PPC_BCOND2,cr.copyD2U(),new PowerPCConditionOperand(cond1),IfCmp2.getTarget1(s),IfCmp2.getBranchProfile1(s),new PowerPCConditionOperand(cond2),IfCmp2.getTarget2(s),IfCmp2.getBranchProfile2(s)));  } else {    RegisterOperand cr1=regpool.makeTempCondition();    RegisterOperand cr2=regpool.makeTempCondition();    EMIT(MIR_Binary.create(op1,cr1,val1,val2));    EMIT(MIR_Binary.create(op2,cr2,val1,val2));    EMIT(MIR_CondBranch.create(PPC_BCOND,cr1.copyD2U(),new PowerPCConditionOperand(cond1),IfCmp2.getTarget1(s),IfCmp2.getBranchProfile1(s)));    EMIT(MIR_CondBranch.mutate(s,PPC_BCOND,cr2.copyD2U(),new PowerPCConditionOperand(cond2),IfCmp2.getTarget2(s),IfCmp2.getBranchProfile2(s)));  }}  }
class C{  private void refreshMyWalls(String limit){  mSwipeRefreshLayout.setEnabled(false);  mDBNotifyCounter=0;  mFetchedOnOpen=false;  String selection=DatabaseColumns.ID + " NOT IN ( SELECT " + DatabaseColumns.ID+ " from "+ TableWallPosts.NAME+ " order by "+ DatabaseColumns.TIMESTAMP_EPOCH_UPDATED_AT+ " desc limit "+ limit+ ")"+ SQLConstants.AND+ DatabaseColumns.USER_ID+ SQLConstants.EQUALS_ARG;  DBInterface.deleteAsync(AppConstants.QueryTokens.DELETE_MY_WALL_POSTS_SEARCH_RESULTS,getTaskTag(),null,TableWallPosts.NAME,selection,new String[]{mUserId},true,this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.697 -0500",hash_original_method="6490900761BA3EE42006578E9056D699",hash_generated_method="DEEE9EFEBB86898438641885D5FFE254") public void updateHeader(Header header){  if (header == null) {    return;  }  for (int i=0; i < this.headers.size(); i++) {    Header current=(Header)this.headers.get(i);    if (current.getName().equalsIgnoreCase(header.getName())) {      this.headers.set(i,header);      return;    }  }  this.headers.add(header);}  }
class C{  public static void makeHomePlan(Plan plan,Coord homeCoord,ActivityFacility homeLocation){  final Coord coord=homeCoord;  Activity act=PopulationUtils.createAndAddActivityFromCoord(plan,InternalConstants.ACT_HOME,coord);  act.setFacilityId(homeLocation.getId());}  }
class C{  public static void generateRPClass(){  try {    final RPClass rpclass=new RPClass(RPCLASS_NAME);    rpclass.add(DefinitionClass.ATTRIBUTE,TITLE,Type.STRING,Definition.PRIVATE);    rpclass.add(DefinitionClass.ATTRIBUTE,CAPTION,Type.STRING,Definition.PRIVATE);    rpclass.addRPSlot(CONTENT_SLOT,999);  } catch (  final SyntaxException e) {    logger.error("cannot generateRPClass",e);  }}  }
class C{  public static Object executeOn(ExecutablePool pool,Connection conn,String cqName,String queryStr,int cqState,boolean isDurable,byte regionDataPolicy){  AbstractOp op=new CreateCQOpImpl(cqName,queryStr,cqState,isDurable,regionDataPolicy);  return pool.executeOn(conn,op);}  }
class C{  public Object readResolve(){switch (val) {case CHANNEL_R:    return R;case CHANNEL_G:  return G;case CHANNEL_B:return B;case CHANNEL_A:return A;default :throw new Error("Unknown ARGBChannel value");}}  }
class C{  public static String mask(String cacheName){  return cacheName != null ? cacheName : DEFAULT_MASK_NAME;}  }
class C{  public void createMonthScenario01CustomerPriceModel_changeServiceId() throws Exception {  VendorData supplierData=setupNewSupplier("2012-11-01 12:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomerWithDiscount(supplierData,new BigDecimal("25.00"),DateTimeHandling.calculateMillis("2012-12-01 00:00:00"),DateTimeHandling.calculateMillis("2013-01-01 01:00:00"));  VOServiceDetails serviceDetails=createPublishService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,"SCENARIO01_PU_MONTH_CUST_PM2_SERVICE");  VOServiceDetails customerServiceDetails=serviceSetup.savePriceModelForCustomer(serviceDetails,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_2,customerData.getOrganization());  customerServiceDetails=serviceSetup.activateMarketableService(customerServiceDetails);  VOSubscriptionDetails subDetails=subscribe(customerData.getAdminUser(),"SCENARIO01_PU_MONTH_CUST_PM2",customerServiceDetails,"2012-11-15 12:00:00","ADMIN");  deactivateService(supplierData,customerServiceDetails);  updateServiceId(supplierData,serviceDetails,"SCENARIO01_PU_MONTH_CUST_PM2_NEW_SERVICE","2012-12-15 00:00:00");  unsubscribe(customerData.getAdminKey(),subDetails.getSubscriptionId(),"2013-01-16 12:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("SCENARIO01_PU_MONTH_CUST_PM2",new TestData(supplierData));}  }
class C{  public X509CertificateHolder build(ContentSigner signer){  tbsGen.setSignature(signer.getAlgorithmIdentifier());  if (!extGenerator.isEmpty()) {    tbsGen.setExtensions(extGenerator.generate());  }  return CertUtils.generateFullCert(signer,tbsGen.generateTBSCertificate());}  }
class C{  public CFilterEventsAction(final JTextField filterField){  super("Filter by event count");  m_filterField=filterField;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public WeakHashMap(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR);  putAll(m);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.358 -0500",hash_original_method="AC762C12A6CDCFE8BA5350001874BBB5",hash_generated_method="7837AE654693500DE167BF01EE7D750C") static public void assertTrue(String message,boolean condition){  if (!condition)   fail(message);}  }
class C{  public void e(String msg,Throwable tr){  Log.e(mTag,msg,tr);}  }
class C{  public void processHttp(Vertex sentence,Network network){  Collection<Relationship> words=sentence.getRelationships(Primitive.WORD);  if (words != null) {    Sense http=getBot().awareness().getSense(Http.class);    for (    Relationship word : words) {      Vertex meaning=word.getTarget().mostConscious(Primitive.MEANING);      if (meaning != null) {        if (meaning.instanceOf(Primitive.URL)) {          log("Prcoessing URL",Level.FINE,meaning);          http.input(meaning.getData());        }      }    }  }}  }
class C{  public UserObject(UserObject parent){  this.id=parent.getId();  this.name=parent.getName();  this.description=parent.getDescription();  this.email=parent.getEmail();  this.activated=parent.getActivated();  this.avatar=parent.getAvatar();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.password=parent.getPassword();  this.newPassword=parent.getNewPassword();  this.username=parent.getUsername();  this.isManager=parent.getIsManager();}  }
class C{  void disableAll(){  offerButton.setEnabled(false);  acceptButton.setEnabled(false);  cancelButton.setEnabled(false);  setUserStatus(TradeState.NO_ACTIVE_TRADE);  setPartnerStatus(TradeState.NO_ACTIVE_TRADE);}  }
class C{  private boolean isSortSPRewriteApplicable(){  boolean ret=false;  Hop input=getInput().get(0);  double size=input.dimsKnown() ? OptimizerUtils.estimateSize(input.getDim1(),1) : input.getOutputMemEstimate();  if (OptimizerUtils.checkSparkBroadcastMemoryBudget(size)) {    ret=true;  }  return ret;}  }
class C{  public void addLast(T linkable){  insert(size(),linkable);}  }
class C{  protected final Iterator<T> singleton(T t){  return Iterators.singleton(t);}  }
class C{  public OverflowQueueWithDMStats(int capacity,QueueStatHelper stats){  super(capacity);  this.stats=stats;}  }
class C{  public Connection next(String method) throws IOException {  for (Connection pooled; (pooled=pool.get(address)) != null; ) {    if (method.equals("GET") || pooled.isReadable())     return pooled;    pooled.close();  }  if (!hasNextTlsMode()) {    if (!hasNextInetSocketAddress()) {      if (!hasNextProxy()) {        if (!hasNextPostponed()) {          throw new NoSuchElementException();        }        return new Connection(nextPostponed());      }      lastProxy=nextProxy();      resetNextInetSocketAddress(lastProxy);    }    lastInetSocketAddress=nextInetSocketAddress();    resetNextTlsMode();  }  boolean modernTls=nextTlsMode() == TLS_MODE_MODERN;  Route route=new Route(address,lastProxy,lastInetSocketAddress,modernTls);  if (routeDatabase.shouldPostpone(route)) {    postponedRoutes.add(route);    return next(method);  }  return new Connection(route);}  }
class C{  protected int skipWS() throws IOException {  int c=read();  while (TurtleUtil.isWhitespace(c)) {    c=read();  }  unread(c);  return c;}  }
class C{  public int lerpColor(int c1,int c2,float amt){  return lerpColor(c1,c2,amt,colorMode);}  }
class C{  public static void demo5(){  double[][] values={{3,0,-3.4,0},{5.1,0,+3.0123456789,0},{16.37,0.0,2.5,0},{-16.3,0,-3.012345678E-4,-1},{1236.3456789,0,7,-1.2}};  String[] columnNames={"0.1","0.3","0.5","0.7"};  String[] rowNames={"SunJDK1.2.2 classic","IBMJDK1.1.8","SunJDK1.3 Hotspot","other1","other2"};  System.out.println(cern.colt.matrix.DoubleFactory2D.dense.make(values));  System.out.println(new Formatter("%G").toTitleString(cern.colt.matrix.DoubleFactory2D.dense.make(values),rowNames,columnNames,"vendor","density","title"));}  }
class C{  public static short toShort(byte b0,byte b1){  return (short)((b0 << 8) | (b1 & 0xff));}  }
class C{  public int read(char[] buffer,int offset,int length) throws IOException {  log.finest("random-read(0x" + Long.toHexString(getFilePointer()) + ","+ length+ ")");  return _file.read(buffer,offset,length);}  }
class C{  public static GroupMatcher<TriggerKey> triggerGroupEndsWith(String compareTo){  return GroupMatcher.groupEndsWith(compareTo);}  }
class C{  public static Element appendElement(Element context,String name){  if (context == null) {    String message=Logging.getMessage("nullValue.ContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (WWUtil.isEmpty(name)) {    return context;  }  Document doc=context.getOwnerDocument();  Element el=doc.createElementNS(null,name);  context.appendChild(el);  return el;}  }
class C{  private void updateGui(){  final boolean nameModified=!m_nameTextField.getText().equals(m_debugger.getName());  final boolean hostModified=!m_hostTextField.getText().equals(m_debugger.getHost());  final boolean portModified=!m_portTextField.getText().equals(String.valueOf(m_debugger.getPort()));  m_saveButton.setEnabled(nameModified || hostModified || portModified);  m_nameTextField.setModified(nameModified);  m_hostTextField.setModified(hostModified);  m_portTextField.setModified(portModified);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodetextnodetype.class,args);}  }
class C{  public static Complex[] convolve(Complex[] x,Complex[] y){  Complex[] a=new Complex[2 * x.length];  for (int i=0; i < x.length; i++)   a[i]=x[i];  for (int i=x.length; i < 2 * x.length; i++)   a[i]=ZERO;  Complex[] b=new Complex[2 * y.length];  for (int i=0; i < y.length; i++)   b[i]=y[i];  for (int i=y.length; i < 2 * y.length; i++)   b[i]=ZERO;  return cconvolve(a,b);}  }
class C{  public boolean isCheckDates(){  return checkDates;}  }
class C{  public static SelectClause create(){  return new SelectClause(StreamSelector.ISTREAM_ONLY,new ArrayList<SelectClauseElement>());}  }
class C{  public void onDestroy(){}  }
class C{  public void initialize(ImageTypeSpecifier imageType,int numBands){  ColorModel colorModel=imageType.getColorModel();  SampleModel sampleModel=imageType.getSampleModel();  int[] sampleSize=sampleModel.getSampleSize();  int bitDepth=sampleSize[0];  for (int i=1; i < sampleSize.length; i++) {    if (sampleSize[i] > bitDepth) {      bitDepth=sampleSize[i];    }  }  if (sampleSize.length > 1 && bitDepth < 8) {    bitDepth=8;  }  if (bitDepth > 2 && bitDepth < 4) {    bitDepth=4;  } else   if (bitDepth > 4 && bitDepth < 8) {    bitDepth=8;  } else   if (bitDepth > 8 && bitDepth < 16) {    bitDepth=16;  } else   if (bitDepth > 16) {    throw new RuntimeException("bitDepth > 16!");  }  IHDR_bitDepth=bitDepth;  if (colorModel instanceof IndexColorModel) {    IndexColorModel icm=(IndexColorModel)colorModel;    int size=icm.getMapSize();    byte[] reds=new byte[size];    icm.getReds(reds);    byte[] greens=new byte[size];    icm.getGreens(greens);    byte[] blues=new byte[size];    icm.getBlues(blues);    boolean isGray=false;    if (!IHDR_present || (IHDR_colorType != PNGImageReader.PNG_COLOR_PALETTE)) {      isGray=true;      int scale=255 / ((1 << IHDR_bitDepth) - 1);      for (int i=0; i < size; i++) {        byte red=reds[i];        if ((red != (byte)(i * scale)) || (red != greens[i]) || (red != blues[i])) {          isGray=false;          break;        }      }    }    boolean hasAlpha=colorModel.hasAlpha();    byte[] alpha=null;    if (hasAlpha) {      alpha=new byte[size];      icm.getAlphas(alpha);    }    if (isGray && hasAlpha && (bitDepth == 8 || bitDepth == 16)) {      IHDR_colorType=PNGImageReader.PNG_COLOR_GRAY_ALPHA;    } else     if (isGray && !hasAlpha) {      IHDR_colorType=PNGImageReader.PNG_COLOR_GRAY;    } else {      IHDR_colorType=PNGImageReader.PNG_COLOR_PALETTE;      PLTE_present=true;      PLTE_order=null;      PLTE_red=(byte[])reds.clone();      PLTE_green=(byte[])greens.clone();      PLTE_blue=(byte[])blues.clone();      if (hasAlpha) {        tRNS_present=true;        tRNS_colorType=PNGImageReader.PNG_COLOR_PALETTE;        PLTE_order=new int[alpha.length];        byte[] newAlpha=new byte[alpha.length];        int newIndex=0;        for (int i=0; i < alpha.length; i++) {          if (alpha[i] != (byte)255) {            PLTE_order[i]=newIndex;            newAlpha[newIndex]=alpha[i];            ++newIndex;          }        }        int numTransparent=newIndex;        for (int i=0; i < alpha.length; i++) {          if (alpha[i] == (byte)255) {            PLTE_order[i]=newIndex++;          }        }        byte[] oldRed=PLTE_red;        byte[] oldGreen=PLTE_green;        byte[] oldBlue=PLTE_blue;        int len=oldRed.length;        PLTE_red=new byte[len];        PLTE_green=new byte[len];        PLTE_blue=new byte[len];        for (int i=0; i < len; i++) {          PLTE_red[PLTE_order[i]]=oldRed[i];          PLTE_green[PLTE_order[i]]=oldGreen[i];          PLTE_blue[PLTE_order[i]]=oldBlue[i];        }        tRNS_alpha=new byte[numTransparent];        System.arraycopy(newAlpha,0,tRNS_alpha,0,numTransparent);      }    }  } else {    if (numBands == 1) {      IHDR_colorType=PNGImageReader.PNG_COLOR_GRAY;    } else     if (numBands == 2) {      IHDR_colorType=PNGImageReader.PNG_COLOR_GRAY_ALPHA;    } else     if (numBands == 3) {      IHDR_colorType=PNGImageReader.PNG_COLOR_RGB;    } else     if (numBands == 4) {      IHDR_colorType=PNGImageReader.PNG_COLOR_RGB_ALPHA;    } else {      throw new RuntimeException("Number of bands not 1-4!");    }  }  IHDR_present=true;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter three points for p0, p1, and p2: ");  double x0=input.nextDouble();  double y0=input.nextDouble();  double x1=input.nextDouble();  double y1=input.nextDouble();  double x2=input.nextDouble();  double y2=input.nextDouble();  System.out.print("(" + x2 + ", "+ y2+ ") is on the ");  if (onTheLineSegment(x0,y0,x1,y1,x2,y2))   System.out.print("line segment "); else   if (leftOfTheLine(x0,y0,x1,y1,x2,y2))   System.out.print("left side of the line "); else   if (onTheSameLine(x0,y0,x1,y1,x2,y2))   System.out.print("same line "); else   System.out.print("right side of the line");  System.out.println("from " + "(" + x0 + ", "+ y0+ ") to ("+ x1+ ", "+ y1+ ")");}  }
class C{  @AssistedInject public SharingProfileDirectoryResource(@Assisted UserContext userContext,@Assisted Directory<SharingProfile> directory,DirectoryObjectTranslator<SharingProfile,APISharingProfile> translator,DirectoryObjectResourceFactory<SharingProfile,APISharingProfile> resourceFactory){  super(userContext,directory,translator,resourceFactory);}  }
class C{  public static boolean checkForSRDF(DbClient dbClient,URI blockURI){  if (URIUtil.isType(blockURI,Volume.class)) {    Volume volume=dbClient.queryObject(Volume.class,blockURI);    if (volume != null) {      return volume.checkForSRDF();    }  }  return false;}  }
class C{  public void addNotify(){  super.addNotify();  refreshFontMetrics(getGraphics2D(getGraphics()));  if (parserManager != null) {    parserManager.restartParsing();  }}  }
class C{  public LongOsmElementMap(final int size,final float fillFactor){  if (fillFactor <= 0 || fillFactor >= 1) {    throw new IllegalArgumentException("FillFactor must be in (0, 1)");  }  if (size <= 0) {    throw new IllegalArgumentException("Size must be positive!");  }  final int capacity=Tools.arraySize(size,fillFactor);  m_mask=capacity - 1;  m_fillFactor=fillFactor;  m_data=new OsmElement[capacity];  m_threshold=(int)(capacity * fillFactor);  removedKey=OsmElementFactory.createNode(Long.MIN_VALUE,1,OsmElement.STATE_CREATED,0,0);}  }
class C{  public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || this.getClass() != o.getClass()) {    return false;  }  return Arrays.equals(oid,((ObjectIdentifier)o).oid);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void service(Mail originalMail) throws MessagingException {  if (originalMail.getSender() == null) {    if (isDebug)     log("Processing a bounce request for a message with an empty reverse-path.  No bounce will be sent.");    if (!getPassThrough(originalMail)) {      originalMail.setState(Mail.GHOST);    }    return;  }  if (isDebug)   log("Processing a bounce request for a message with a reverse path.  The bounce will be sent to " + originalMail.getSender().toString());  super.service(originalMail);}  }
class C{  private Map<String,Set<CallLocationModel>> computeFilteredTaintSourcesMap(IMarker marker){  Set<CallLocationModel> sources=TaintMarker.getSources(marker);  return computeFilteredTaintSourcesMap(sources);}  }
class C{  public RecoveryRequest(){  this(Strings.EMPTY_ARRAY);}  }
class C{  public void addDatasource(String name,String file,String dsName,ConsolFun consolFunc){  Def def=new Def(name,file,dsName,consolFunc);  sources.put(name,def);}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public boolean isEmployee(){  Object oo=get_Value(COLUMNNAME_IsEmployee);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ReaderInputStream(Reader reader,String encoding){  this(reader);  if (encoding == null) {    throw new IllegalArgumentException("encoding must not be null");  } else {    this.encoding=encoding;  }}  }
class C{  public IStatus run(IProgressMonitor monitor) throws InvocationTargetException {  jobStatus=Status.OK_STATUS;  monitor.beginTask("Uncompressing " + archive.getName(),1);  org.apache.tools.ant.taskdefs.Untar untar=new org.apache.tools.ant.taskdefs.Untar();  untar.setDest(targetDir);  untar.setSrc(archive);  untar.setCompression(compressionMethod(archive));  try {    untar.execute();    monitor.worked(1);  } catch (  Exception be) {    CorePluginLog.logError(be);    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"Error handling archive file " + archive.getAbsolutePath() + ". It may be corrupted?");  }  return jobStatus;}  }
class C{  public void schedule(int timeMillis,boolean repeat,Form bound){  lastEllapse=System.currentTimeMillis();  ms=timeMillis;  this.repeat=repeat;  this.bound=bound;  bound.registerAnimated(i);}  }
class C{  public static RefType v(String className){  if (Scene.v().containsType(className)) {    return Scene.v().getRefType(className);  } else {    RefType ret=new RefType(className);    Scene.v().addRefType(ret);    return ret;  }}  }
class C{  @Override boolean shouldExceptionTriggerConnectionSwitch(Throwable t){  return t instanceof SQLException && this.exceptionChecker.shouldExceptionTriggerFailover((SQLException)t);}  }
class C{  @Override public void flush() throws IOException {synchronized (lock) {    checkNotClosed();    flushInternal();    out.flush();  }}  }
class C{  private static void printDebuggingInformation(){  if (classEnvRule != null && classEnvRule.isInitialized()) {    System.err.println("NOTE: test params are: codec=" + classEnvRule.codec + ", sim="+ classEnvRule.similarity+ ", locale="+ classEnvRule.locale.toLanguageTag()+ ", timezone="+ (classEnvRule.timeZone == null ? "(null)" : classEnvRule.timeZone.getID()));  }  System.err.println("NOTE: " + System.getProperty("os.name") + " "+ System.getProperty("os.version")+ " "+ System.getProperty("os.arch")+ "/"+ System.getProperty("java.vendor")+ " "+ System.getProperty("java.version")+ " "+ (Constants.JRE_IS_64BIT ? "(64-bit)" : "(32-bit)")+ "/"+ "cpus="+ Runtime.getRuntime().availableProcessors()+ ","+ "threads="+ Thread.activeCount()+ ","+ "free="+ Runtime.getRuntime().freeMemory()+ ","+ "total="+ Runtime.getRuntime().totalMemory());  System.err.println("NOTE: All tests run in this JVM: " + Arrays.toString(testClassesRun.toArray()));}  }
class C{  public boolean hasGmlEnvelope(){  return hasExtension(GmlEnvelope.class);}  }
class C{  @Override public String toString(){  double maxval=0;  boolean fractional=false;  Object element=null;  int widthNumber=0;  int widthExpression=0;  for (int i=0; i < size(); i++) {    for (int j=0; j < size(); j++) {      element=getCell(i,j);      if (element instanceof Double) {        double current=((Double)element).doubleValue();        if (current < 0)         current*=-11;        if (current > maxval)         maxval=current;        double fract=Math.abs(current - Math.rint(current));        if (!fractional && ((Math.log(fract) / Math.log(10)) >= -2)) {          fractional=true;        }      } else {        if (element.toString().length() > widthExpression) {          widthExpression=element.toString().length();        }      }    }  }  if (maxval > 0) {    widthNumber=(int)(Math.log(maxval) / Math.log(10) + (fractional ? 4 : 1));  }  int width=(widthNumber > widthExpression) ? widthNumber : widthExpression;  StringBuffer text=new StringBuffer();  for (int i=0; i < size(); i++) {    for (int j=0; j < size(); j++) {      element=getCell(i,j);      if (element instanceof Double) {        text.append(" ").append(Utils.doubleToString(((Double)element).doubleValue(),width,(fractional ? 2 : 0)));      } else {        int diff=width - element.toString().length();        if (diff > 0) {          int left=diff % 2;          left+=diff / 2;          String temp=Utils.padLeft(element.toString(),element.toString().length() + left);          temp=Utils.padRight(temp,width);          text.append(" ").append(temp);        } else {          text.append(" ").append(element.toString());        }      }    }    text.append("\n");  }  return text.toString();}  }
class C{  private Annotation createConstituentAnnotationFromTree(TreebankLanguagePack aTreebankLanguagePack,Tree aNode,Annotation aParentFS,boolean aCreatePos){  String nodeLabelValue=aNode.value();  String syntacticFunction=null;  AbstractTreebankLanguagePack tlp=(AbstractTreebankLanguagePack)aTreebankLanguagePack;  int gfIdx=nodeLabelValue.indexOf(tlp.getGfCharacter());  if (gfIdx > 0) {    syntacticFunction=nodeLabelValue.substring(gfIdx + 1);    nodeLabelValue=nodeLabelValue.substring(0,gfIdx);  }  IntPair span=tokenTree.getSpan(aNode);  if (nodeLabelValue.contains(TAG_SEPARATOR) && !nodeLabelValue.equals(TAG_SEPARATOR)) {    int separatorIndex=nodeLabelValue.indexOf(TAG_SEPARATOR);    String tag=nodeLabelValue.substring(0,separatorIndex);    nodeLabelValue=nodeLabelValue.substring(separatorIndex + 1,nodeLabelValue.length());    createTagAnnotation(span.getSource(),span.getTarget(),tag);  }  if (aNode.isPhrasal()) {    Constituent constituent=createConstituentAnnotation(span.getSource(),span.getTarget(),nodeLabelValue,syntacticFunction);    if (aParentFS != null) {      constituent.setParent(aParentFS);    }    List<Annotation> childAnnotations=new ArrayList<Annotation>();    for (    Tree child : aNode.getChildrenAsList()) {      Annotation childAnnotation=createConstituentAnnotationFromTree(aTreebankLanguagePack,child,constituent,aCreatePos);      if (childAnnotation != null) {        childAnnotations.add(childAnnotation);      }    }    FSArray children=new FSArray(jCas,childAnnotations.size());    int curChildNum=0;    for (    FeatureStructure child : childAnnotations) {      children.set(curChildNum,child);      curChildNum++;    }    constituent.setChildren(children);    jCas.addFsToIndexes(constituent);    return constituent;  } else   if (aNode.isPreTerminal()) {    POS pos=createPOSAnnotation(span.getSource(),span.getTarget(),nodeLabelValue);    List<Token> coveredTokens=JCasUtil.selectCovered(jCas,Token.class,pos);    assert coveredTokens.size() == 1;    Token token=coveredTokens.get(0);    if (aCreatePos) {      jCas.addFsToIndexes(pos);      token.setPos(pos);    }    if (aParentFS != null) {      token.setParent(aParentFS);    }    return token;  } else {    throw new IllegalArgumentException("Node must be either phrasal nor pre-terminal");  }}  }
class C{  @Override public synchronized Restlet createInboundRoot(){  Router router=new Router(getContext());  router.attachDefault(DefaultResource.class);  ModelerServicesInit.attachResources(router);  DiagramServicesInit.attachResources(router);  JsonpFilter jsonpFilter=new JsonpFilter(getContext());  jsonpFilter.setNext(router);  return jsonpFilter;}  }
class C{  private final String writeQDescrs(Attribute attr) throws NamingException {switch (attr.size()) {case 0:    throw new InvalidAttributeValueException(attr.getID() + "has no values");case 1:  return writeQDString(attr);}StringBuffer qdList=new StringBuffer(attr.getID());qdList.append(WHSP);qdList.append(OID_LIST_BEGIN);NamingEnumeration<?> values=attr.getAll();while (values.hasMore()) {qdList.append(WHSP);qdList.append(SINGLE_QUOTE);qdList.append((String)values.next());qdList.append(SINGLE_QUOTE);qdList.append(WHSP);}qdList.append(OID_LIST_END);qdList.append(WHSP);return qdList.toString();}  }
class C{  public static URI buildForwardRequestUri(URI targetService,String key,String selectorPath){  URI u=UriUtils.buildUri(targetService,UriUtils.buildUriPath(selectorPath,ServiceUriPaths.SERVICE_URI_SUFFIX_FORWARDING));  if (key == null) {    key=targetService.getPath();  }  u=UriUtils.extendUriWithQuery(u,FORWARDING_URI_PARAM_NAME_PATH,key,FORWARDING_URI_PARAM_NAME_TARGET,ForwardingTarget.KEY_HASH.toString());  return u;}  }
class C{  void listMonitoredResourceDescriptors() throws IOException {  ListMonitoredResourceDescriptorsResponse monitoredResources=this.monitoringService.projects().monitoredResourceDescriptors().list(this.projectResource).execute();  this.outputStream.println("listMonitoredResourceDescriptors response");  this.outputStream.println(monitoredResources.toPrettyString());}  }
class C{  public double eval(int id1,int id2,Instance inst1) throws Exception {  double div=Math.sqrt(super.eval(id1,id1,inst1) * ((m_keys != null) ? super.eval(id2,id2,m_data.instance(id2)) : super.eval(-1,-1,m_data.instance(id2))));  if (div != 0) {    return super.eval(id1,id2,inst1) / div;  } else {    return 0;  }}  }
class C{  List<Type> attribExprs(List<JCExpression> trees,Env<AttrContext> env,Type pt){  ListBuffer<Type> ts=new ListBuffer<Type>();  for (List<JCExpression> l=trees; l.nonEmpty(); l=l.tail)   ts.append(attribExpr(l.head,env,pt));  return ts.toList();}  }
class C{  boolean contains(final byte[] key,final int buddyOffset){  if (key == null)   throw new IllegalArgumentException();  final int index=getKeys().search(key);  return index >= 0;}  }
class C{  public static void main(String[] args){  rGen=new Random();  rGen.setSeed(1);  long now, before;  int numSearches=1024;  int numThreads=2;  int size=262144;  try {    numThreads=Integer.valueOf(args[0]);    size=Integer.valueOf(args[1]);  } catch (  Exception e) {  }  int NUM_TRIALS=10;  System.out.println("Num Threads:" + numThreads);  System.out.println("Size:" + size);  for (int d=2; d < 10; d++) {    System.out.println("d = " + d);    TrialSuite bf_ts=new TrialSuite();    TrialSuite mtbf_ts=new TrialSuite();    for (int T=0; T < NUM_TRIALS; T++) {      IMultiPoint[] searchPoints=randomPoints(numSearches,d);      for (int n=size; n >= 4; n/=2) {        IMultiPoint[] points=randomPoints(n,d);        BruteForceNearestNeighbor bnn=new BruteForceNearestNeighbor(points);        MultiThreadedBruteForceNearestNeighbor mt_bnn=new MultiThreadedBruteForceNearestNeighbor(points);        mt_bnn.setNumberThreads(numThreads);        IMultiPoint results[]=new IMultiPoint[searchPoints.length];        IMultiPoint resultsm[]=new IMultiPoint[searchPoints.length];        System.gc();        before=System.currentTimeMillis();        for (int t=0; t < searchPoints.length; t++) {          results[t]=bnn.nearest(searchPoints[t]);        }        now=System.currentTimeMillis();        bf_ts.addTrial(n,before,now);        System.gc();        before=System.currentTimeMillis();        for (int t=0; t < searchPoints.length; t++) {          resultsm[t]=mt_bnn.nearest(searchPoints[t]);        }        now=System.currentTimeMillis();        mtbf_ts.addTrial(n,before,now);        for (int k=0; k < results.length; k++) {          assert (results[k].equals(results[k]));        }      }    }    System.out.println("Brute Force");    System.out.println(bf_ts.computeTable());    System.out.println("Multi Threaded Brute Force");    System.out.println(mtbf_ts.computeTable());  }}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder mpeg4Width(int mpeg4Width){  this.mpeg4_width=mpeg4Width;  return this;}  }
class C{  public void put(String key,String value){  editor.putString(key,value);  editor.apply();}  }
class C{  public AddressSelector reset(Address leader,Collection<Address> servers){  if (changed(leader,servers)) {    this.leader=leader;    this.servers=servers;    this.selections=strategy.selectConnections(leader,new ArrayList<>(servers));    this.selectionsIterator=null;  }  return this;}  }
class C{  public String describeParams(){  StringBuilder sb=new StringBuilder();  sb.append("\t").append("maxQueryTerms  : ").append(maxQueryTerms).append("\n");  sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n");  sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n");  sb.append("\t").append("fieldNames     : ");  String delim="";  for (  String fieldName : fieldNames) {    sb.append(delim).append(fieldName);    delim=", ";  }  sb.append("\n");  sb.append("\t").append("boost          : ").append(boost).append("\n");  sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n");  sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n");  return sb.toString();}  }
class C{  public void testTrustedCertificate() throws Exception {  doTest(TRUSTED_CERT_CN,false);}  }
class C{  private void updateTags(Movie movie){  List<String> availableTags=new ArrayList<>(tagsObservable);  for (  String tagInMovie : new ArrayList<>(movie.getTags())) {    boolean tagFound=false;    for (    String tag : availableTags) {      if (tagInMovie.equals(tag)) {        tagFound=true;        break;      }    }    if (!tagFound) {      addTag(tagInMovie);    }  }}  }
class C{  public static final Polygon flip(Polygon polygon,Vector2 axis,Vector2 point){  if (polygon == null)   throw new NullPointerException(Messages.getString("geometry.nullFlipPolygon"));  if (axis == null)   throw new NullPointerException(Messages.getString("geometry.nullFlipAxis"));  if (axis.isZero())   throw new IllegalArgumentException(Messages.getString("geometry.zeroFlipAxis"));  if (point == null)   point=polygon.getCenter();  axis.normalize();  Vector2[] pv=polygon.getVertices();  Vector2[] nv=new Vector2[pv.length];  for (int i=0; i < pv.length; i++) {    Vector2 v0=pv[i];    Vector2 v1=v0.difference(point);    double proj=v1.dot(axis);    Vector2 vp=axis.product(proj);    Vector2 rv=vp.add(vp.x - v1.x,vp.y - v1.y);    nv[i]=rv.add(point);  }  if (Geometry.getWinding(nv) < 0.0) {    Geometry.reverseWinding(nv);  }  return new Polygon(nv);}  }
class C{  @Override public boolean isUsableByPlayer(EntityPlayer player){  return this.worldObj.getTileEntity(this.pos) == this && player.getDistanceSq(this.pos.getX() + 0.5,this.pos.getY() + 0.5,this.pos.getZ() + 0.5) <= 64;}  }
class C{  public IncompleteAnnotationException(Class<? extends Annotation> annotationType,String elementName){  super("The element " + elementName + " is not complete for the annotation "+ annotationType.getName());  this.annotationType=annotationType;  this.elementName=elementName;}  }
class C{  public static URI parseURI(String nuri,URI baseuri) throws URISyntaxException {  int colonLocation=nuri.indexOf(':');  int fragmentLocation=getFragmentLocation(nuri);  if (colonLocation == -1 || colonLocation > fragmentLocation) {    if (baseuri == null)     throw new URISyntaxException("No ':' in \"" + nuri + "\" and no base URI given,"+ " so no relative URIs allowed",nuri);  }  String protocol=nuri.substring(0,colonLocation);  if (protocol.equals("urn")) {    return parseURN(nuri,colonLocation,fragmentLocation);  } else   if (protocol.equals("http")) {    return new URI(nuri);  } else   if (protocol.equals("file")) {    return new URI(nuri);  } else   if (protocol.equals("res")) {    return new URI(nuri);  } else {    return parseGeneralURI(nuri,colonLocation,fragmentLocation);  }}  }
class C{  public void putBitString(byte[] bits) throws IOException {  write(DerValue.tag_BitString);  putLength(bits.length + 1);  write(0);  write(bits);}  }
class C{  public static Trie load(InputStream stemmerTable) throws IOException {  DataInputStream in=null;  try {    in=new DataInputStream(new BufferedInputStream(stemmerTable));    String method=in.readUTF().toUpperCase(Locale.ROOT);    if (method.indexOf('M') < 0) {      return new org.egothor.stemmer.Trie(in);    } else {      return new org.egothor.stemmer.MultiTrie2(in);    }  }  finally {    in.close();  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void releaseAllBuffers(){  for (  ByteBuffer byteBuffer : byteBuffers) {    byteBufferProvider.releaseByteBuffer(byteBuffer);  }  byteBuffers.clear();  ByteBuffer currentBuffer=super.getByteBuffer();  if (null != currentBuffer) {    byteBufferProvider.releaseByteBuffer(currentBuffer);    super.setByteBuffer(null);  }}  }
class C{  public void endExternalSubset(Augmentations augs) throws XNIException {  endParameterEntity("[dtd]",augs);}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void updateFloorDetails(Property property,List<Floor> savedFloorDetails){  PropertyTypeMaster unitType=null;  PropertyUsage usage=null;  PropertyOccupation occupancy=null;  StructureClassification structureClass=null;  final Area totBltUpArea=new Area();  Float totBltUpAreaVal=new Float(0);  for (  Floor floorProxy : property.getPropertyDetail().getFloorDetailsProxy()) {    for (    Floor savedFloor : savedFloorDetails) {      if (floorProxy != null && savedFloor != null) {        if (floorProxy.getFloorUid().equals(savedFloor.getFloorUid())) {          totBltUpAreaVal=totBltUpAreaVal + floorProxy.getBuiltUpArea().getArea();          if (floorProxy.getUnitType() != null)           unitType=(PropertyTypeMaster)getPropPerServ().find("from PropertyTypeMaster utype where utype.id = ?",floorProxy.getUnitType().getId());          if (floorProxy.getPropertyUsage() != null)           usage=(PropertyUsage)getPropPerServ().find("from PropertyUsage pu where pu.id = ?",floorProxy.getPropertyUsage().getId());          if (floorProxy.getPropertyOccupation() != null)           occupancy=(PropertyOccupation)getPropPerServ().find("from PropertyOccupation po where po.id = ?",floorProxy.getPropertyOccupation().getId());          if (floorProxy.getStructureClassification() != null)           structureClass=(StructureClassification)getPropPerServ().find("from StructureClassification sc where sc.id = ?",floorProxy.getStructureClassification().getId());          if (floorProxy.getOccupancyDate() != null && floorProxy.getConstructionDate() != null)           savedFloor.setDepreciationMaster(propertyTaxUtil.getDepreciationByDate(floorProxy.getConstructionDate(),floorProxy.getOccupancyDate()));          if (unitType != null && unitType.getCode().equalsIgnoreCase(PropertyTaxConstants.UNITTYPE_OPEN_PLOT))           savedFloor.setFloorNo(OPEN_PLOT_UNIT_FLOORNUMBER);          savedFloor.setUnitType(unitType);          savedFloor.setPropertyUsage(usage);          savedFloor.setPropertyOccupation(occupancy);          savedFloor.setStructureClassification(structureClass);          savedFloor.setPropertyDetail(property.getPropertyDetail());          savedFloor.setModifiedDate(new Date());          final User user=userService.getUserById(ApplicationThreadLocals.getUserId());          savedFloor.setModifiedBy(user);          savedFloor.getBuiltUpArea().setArea(floorProxy.getBuiltUpArea().getArea());          savedFloor.getBuiltUpArea().setLength(floorProxy.getBuiltUpArea().getLength());          savedFloor.getBuiltUpArea().setBreadth(floorProxy.getBuiltUpArea().getLength());          savedFloor.setFirmName(floorProxy.getFirmName());          totBltUpArea.setArea(totBltUpAreaVal);          totBltUpArea.setLength(floorProxy.getBuiltUpArea().getLength());          totBltUpArea.setBreadth(floorProxy.getBuiltUpArea().getBreadth());          property.getPropertyDetail().setTotalBuiltupArea(totBltUpArea);        }      }      property.getPropertyDetail().setNoofFloors(property.getPropertyDetail().getFloorDetailsProxy().size());    }  }}  }
class C{  public void cancel(int downloadId){  downloadRequestQueue.cancel(downloadId);}  }
class C{  protected void drawRect(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow,boolean rounded){  int radius=(rounded) ? getArcSize(w,h) : 0;  if (fillColor != null || fillPaint != null) {    if (shadow) {      g.setColor(mxConstants.SHADOW_COLOR);      if (rounded) {        g.fillRoundRect(x + mxConstants.SHADOW_OFFSETX,y + mxConstants.SHADOW_OFFSETY,w,h,radius,radius);      } else {        g.fillRect(x + mxConstants.SHADOW_OFFSETX,y + mxConstants.SHADOW_OFFSETY,w,h);      }    }    if (fillPaint != null) {      g.setPaint(fillPaint);    } else {      g.setColor(fillColor);    }    if (rounded) {      g.fillRoundRect(x,y,w,h,radius,radius);    } else {      if (g.getClipBounds() != null) {        Rectangle rect=new Rectangle(x,y,w,h);        g.fill(rect.intersection(g.getClipBounds()));      } else {        g.fillRect(x,y,w,h);      }    }  }  if (penColor != null) {    g.setColor(penColor);    if (rounded) {      g.drawRoundRect(x,y,w,h,radius,radius);    } else {      g.drawRect(x,y,w,h);    }  }}  }
class C{  public int readBits(int numBits){  if (numBits == 0) {    return 0;  }  int returnValue=0;  int wholeBytes=(numBits / 8);  for (int i=0; i < wholeBytes; i++) {    int byteValue;    if (bitOffset != 0) {      byteValue=((data[byteOffset] & 0xFF) << bitOffset) | ((data[byteOffset + 1] & 0xFF) >>> (8 - bitOffset));    } else {      byteValue=data[byteOffset];    }    numBits-=8;    returnValue|=(byteValue & 0xFF) << numBits;    byteOffset++;  }  if (numBits > 0) {    int nextBit=bitOffset + numBits;    byte writeMask=(byte)(0xFF >> (8 - numBits));    if (nextBit > 8) {      returnValue|=((((data[byteOffset] & 0xFF) << (nextBit - 8) | ((data[byteOffset + 1] & 0xFF) >> (16 - nextBit))) & writeMask));      byteOffset++;    } else {      returnValue|=(((data[byteOffset] & 0xFF) >> (8 - nextBit)) & writeMask);      if (nextBit == 8) {        byteOffset++;      }    }    bitOffset=nextBit % 8;  }  assertValidOffset();  return returnValue;}  }
class C{  public Object take() throws InterruptedException, ForceReattemptException {  throw new UnsupportedOperationException();}  }
class C{  void updatePressed(ActionEvent e){  Light g=curLight;  String uName=userName.getText();  if (uName.equals("")) {    uName=null;  }  String prevUName=g.getUserName();  if ((uName != null) && !(uName.equals(prevUName))) {    Light p=InstanceManager.lightManagerInstance().getByUserName(uName);    if (p != null) {      status1.setText(Bundle.getMessage("LightError8"));      status2.setText(Bundle.getMessage("LightError9"));      status2.setVisible(true);      return;    }    g.setUserName(uName);  } else   if ((uName == null) && (prevUName != null)) {    g.setUserName(null);  }  setLightControlInformation(g);  if (g.isIntensityVariable()) {    g.setMinIntensity(Double.parseDouble(fieldMinIntensity.getText()) / 100);    g.setMaxIntensity(Double.parseDouble(fieldMaxIntensity.getText()) / 100);    if (g.isTransitionAvailable()) {      g.setTransitionTime(Double.parseDouble(fieldTransitionTime.getText()));    }  }  g.activateLight();  lightCreatedOrUpdated=true;  cancelPressed(null);}  }
class C{  public Iterable<Key> keys(){  return st.keySet();}  }
class C{  public int[] productExceptSelfB(int[] nums){  int n=nums.length;  int[] res=new int[n];  res[0]=1;  for (int i=1; i < n; i++) {    res[i]=res[i - 1] * nums[i - 1];  }  int right=1;  for (int i=n - 1; i >= 0; i--) {    res[i]*=right;    right*=nums[i];  }  return res;}  }
class C{  public void deleteGroupChats() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteGroupChats();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  protected synchronized EPStatementDesc createStoppedAssignName(StatementSpecRaw statementSpec,String expression,boolean isPattern,String optStatementName,int statementId,Map<String,Object> optAdditionalContext,Object userObject,EPIsolationUnitServices isolationUnitServices,EPStatementObjectModel optionalModel){  boolean nameProvided=false;  String statementName="stmt_" + Integer.toString(statementId);  Annotation[] annotations=AnnotationUtil.compileAnnotations(statementSpec.getAnnotations(),services.getEngineImportService(),expression);  if (optStatementName == null) {    if (annotations != null && annotations.length != 0) {      for (      Annotation annotation : annotations) {        if (annotation instanceof Name) {          Name name=(Name)annotation;          if (name.value() != null) {            optStatementName=name.value();          }        }      }    }  }  if (optStatementName != null) {    optStatementName=optStatementName.trim();    statementName=getUniqueStatementName(optStatementName,statementId);    nameProvided=true;  }  if (statementSpec.getFireAndForgetSpec() != null) {    throw new EPStatementException("Provided EPL expression is an on-demand query expression (not a continuous query), please use the runtime executeQuery API instead",expression);  }  return createStopped(statementSpec,annotations,expression,isPattern,statementName,nameProvided,statementId,optAdditionalContext,userObject,isolationUnitServices,false,optionalModel);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.728 -0500",hash_original_method="9EFFE3DDD73E4A7AC997D7CA04936F41",hash_generated_method="4468C8BD7B27D8F1A187A01662EC1BFC") public void reqReset(){  sendMessage(REQ_RESET);  if (DBG)   log("reqReset");}  }
class C{  public static int collectionIsEmpty(Collection<?> c){  return c.isEmpty() ? BooleanHelper.TRUE : -c.size();}  }
class C{  private void map(String key,OperationMetaData operation){  checkArgument(!operations.containsKey(key),"Operation name or alias already exists: " + key);  operations.put(key,operation);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.151 -0500",hash_original_method="BF1F9DC8D5382B51655F853917583FAE",hash_generated_method="34668A5982D6B9136EC1FEE0CEB13223") public final void connectTarget(boolean secure){  if (this.connected) {    throw new IllegalStateException("Already connected.");  }  this.connected=true;  this.secure=secure;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void handleLine(String line) throws NickAlreadyInUseException, IOException {  if (line.startsWith("PING ")) {    this.onServerPing(line.substring(5));    return;  }  String sourceNick="";  String sourceLogin="";  String sourceHostname="";  StringTokenizer tokenizer=new StringTokenizer(line);  String senderInfo=tokenizer.nextToken();  String command=tokenizer.nextToken();  String target=null;  int exclamation=senderInfo.indexOf("!");  int at=senderInfo.indexOf("@");  if (senderInfo.startsWith(":")) {    if (exclamation > 0 && at > 0 && exclamation < at) {      sourceNick=senderInfo.substring(1,exclamation);      sourceLogin=senderInfo.substring(exclamation + 1,at);      sourceHostname=senderInfo.substring(at + 1);    } else {      if (tokenizer.hasMoreTokens()) {        String token=command;        int code=-1;        try {          code=Integer.parseInt(token);        } catch (        NumberFormatException e) {        }        if (code != -1) {          String errorStr=token;          String response=line.substring(line.indexOf(errorStr,senderInfo.length()) + 4,line.length());          this.processServerResponse(code,response);          if (code == 433 && !_registered) {            if (_autoNickChange) {              String oldNick=_nick;              List<String> aliases=getAliases();              _autoNickTries++;              if (_autoNickTries - 1 <= aliases.size()) {                _nick=aliases.get(_autoNickTries - 2);              } else {                _nick=getName() + (_autoNickTries - aliases.size());              }              this.onNickChange(oldNick,getLogin(),"",_nick);              this.sendRawLineViaQueue("NICK " + _nick);            } else {              _socket.close();              _inputThread=null;              throw new NickAlreadyInUseException(line);            }          }          return;        } else {          sourceNick=senderInfo;          target=token;          if (sourceNick.contains("!") && !sourceNick.contains("@")) {            String[] chunks=sourceNick.split("!");            sourceNick=chunks[0];          }          if (command.equalsIgnoreCase("nick")) {            target=tokenizer.nextToken();          }        }      } else {        this.onUnknown(line);        return;      }    }  }  command=command.toUpperCase();  if (sourceNick.startsWith(":")) {    sourceNick=sourceNick.substring(1);  }  if (target == null) {    target=tokenizer.nextToken();  }  if (target.startsWith(":")) {    target=target.substring(1);  }  if (command.equals("PRIVMSG") && line.indexOf(":\u0001") > 0 && line.endsWith("\u0001")) {    String request=line.substring(line.indexOf(":\u0001") + 2,line.length() - 1);    if (request.equals("VERSION")) {      this.onVersion(sourceNick,sourceLogin,sourceHostname,target);    } else     if (request.startsWith("ACTION ")) {      this.onAction(sourceNick,sourceLogin,sourceHostname,target,request.substring(7));    } else     if (request.startsWith("PING ")) {      this.onPing(sourceNick,sourceLogin,sourceHostname,target,request.substring(5));    } else     if (request.equals("TIME")) {      this.onTime(sourceNick,sourceLogin,sourceHostname,target);    } else     if (request.equals("FINGER")) {      this.onFinger(sourceNick,sourceLogin,sourceHostname,target);    } else     if ((tokenizer=new StringTokenizer(request)).countTokens() >= 5 && tokenizer.nextToken().equals("DCC")) {      boolean success=_dccManager.processRequest(sourceNick,sourceLogin,sourceHostname,request);      if (!success) {        this.onUnknown(line);      }    } else {      this.onUnknown(line);    }  } else   if (command.equals("PRIVMSG") && _channelPrefixes.indexOf(target.charAt(0)) >= 0) {    this.onMessage(target,sourceNick,sourceLogin,sourceHostname,line.substring(line.indexOf(" :") + 2));  } else   if (command.equals("PRIVMSG")) {    this.onPrivateMessage(sourceNick,sourceLogin,sourceHostname,target,line.substring(line.indexOf(" :") + 2));  } else   if (command.equals("JOIN")) {    String channel=target;    this.addUser(channel,new User("",sourceNick));    this.onJoin(channel,sourceNick,sourceLogin,sourceHostname);  } else   if (command.equals("PART")) {    this.removeUser(target,sourceNick);    if (sourceNick.equals(this.getNick())) {      this.removeChannel(target);    }    this.onPart(target,sourceNick,sourceLogin,sourceHostname);  } else   if (command.equals("NICK")) {    String newNick=target;    this.renameUser(sourceNick,newNick);    if (sourceNick.equals(this.getNick())) {      this.setNick(newNick);    }    this.onNickChange(sourceNick,sourceLogin,sourceHostname,newNick);  } else   if (command.equals("NOTICE")) {    this.onNotice(sourceNick,sourceLogin,sourceHostname,target,line.substring(line.indexOf(" :") + 2));  } else   if (command.equals("QUIT")) {    this.onQuit(sourceNick,sourceLogin,sourceHostname,line.substring(line.indexOf(" :") + 2));    if (sourceNick.equals(this.getNick())) {      this.removeAllChannels();    } else {      this.removeUser(sourceNick);    }  } else   if (command.equals("KICK")) {    String recipient=tokenizer.nextToken();    if (recipient.equals(this.getNick())) {      this.removeChannel(target);    }    this.removeUser(target,recipient);    this.onKick(target,sourceNick,sourceLogin,sourceHostname,recipient,line.substring(line.indexOf(" :") + 2));  } else   if (command.equals("MODE")) {    String mode=line.substring(line.indexOf(target,2) + target.length() + 1);    if (mode.startsWith(":")) {      mode=mode.substring(1);    }    this.processMode(target,sourceNick,sourceLogin,sourceHostname,mode);  } else   if (command.equals("TOPIC")) {    this.onTopic(target,line.substring(line.indexOf(" :") + 2),sourceNick,System.currentTimeMillis(),true);  } else   if (command.equals("INVITE")) {    this.onInvite(target,sourceNick,sourceLogin,sourceHostname,line.substring(line.indexOf(" :") + 2));  } else {    this.onUnknown(line);  }}  }
class C{  Builder(Path swaggerPath){  this.swaggerLocation=swaggerPath.toAbsolutePath().toUri();  this.swagger=readSwagger(swaggerPath.toString());}  }
class C{  public MyGLAutoDrawable(){}  }
class C{  public int size(){  return this.matrix.getRowCount();}  }
class C{  public boolean isExportedNonRP(DbClient dbClient){  URIQueryResultList exportGroupURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(getId()),exportGroupURIs);  Iterator<URI> exportGroupURIIter=exportGroupURIs.iterator();  while (exportGroupURIIter.hasNext()) {    URI exportGroupURI=exportGroupURIIter.next();    ExportGroup exportGroup=dbClient.queryObject(ExportGroup.class,exportGroupURI);    if (!exportGroup.checkInternalFlags(Flag.RECOVERPOINT)) {      return true;    }  }  return false;}  }
class C{  public synchronized void severe(String sourceClass,String sourceMethod,String msg,Object[] params){  LogRecord record=new LogRecord(Level.SEVERE,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  @Override public ThaiBuddhistDate dateYearDay(Era era,int yearOfEra,int dayOfYear){  return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear);}  }
class C{  private boolean isStore(Location location){  Instruction ins=location.getHandle().getInstruction();  return (ins instanceof StoreInstruction) || (ins instanceof IINC);}  }
class C{  public void reset(){  return;}  }
class C{  public String signMessage(String message) throws KeyCrypterException {  return signMessage(message,null);}  }
class C{  Iterable<Cube> cubes(int startY,int endY){  boolean reverse=false;  if (startY > endY) {    int i=startY;    startY=endY;    endY=i;    reverse=true;  }  int bottom=binarySearch(startY);  int top=binarySearch(endY + 1);  if (bottom < cubes.size() && top <= cubes.size()) {    return reverse ? Lists.reverse(cubes.subList(bottom,top)) : cubes.subList(bottom,top);  } else {    return Collections.emptyList();  }}  }
class C{  void growBy(float dx,float dy){  if (mMaintainAspectRatio) {    if (dx != 0) {      dy=dx / mInitialAspectRatio;    } else     if (dy != 0) {      dx=dy * mInitialAspectRatio;    }  }  RectF r=new RectF(mCropRect);  if (dx > 0F && r.width() + 2 * dx > mImageRect.width()) {    float adjustment=(mImageRect.width() - r.width()) / 2F;    dx=adjustment;    if (mMaintainAspectRatio) {      dy=dx / mInitialAspectRatio;    }  }  if (dy > 0F && r.height() + 2 * dy > mImageRect.height()) {    float adjustment=(mImageRect.height() - r.height()) / 2F;    dy=adjustment;    if (mMaintainAspectRatio) {      dx=dy * mInitialAspectRatio;    }  }  r.inset(-dx,-dy);  final float widthCap=25F;  if (r.width() < widthCap) {    return;  }  float heightCap=mMaintainAspectRatio ? (widthCap / mInitialAspectRatio) : widthCap;  if (r.height() < heightCap) {    return;  }  if (r.left < mImageRect.left) {    r.offset(mImageRect.left - r.left,0F);  } else   if (r.right > mImageRect.right) {    r.offset(-(r.right - mImageRect.right),0);  }  if (r.top < mImageRect.top) {    r.offset(0F,mImageRect.top - r.top);  } else   if (r.bottom > mImageRect.bottom) {    r.offset(0F,-(r.bottom - mImageRect.bottom));  }  mCropRect.set(r);  mDrawRect=computeLayout();  mContext.invalidate();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.MODEL__MODEL:    return getModel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void introspect(ContextH3 context){  if (_infoRef.get() != null) {    return;  }  _ctor=introspectConstructor();  FieldInfoH3[] fieldInfo=new FieldInfoH3[1];  fieldInfo[0]=new FieldInfoH3("name");  ClassInfoH3 classInfo=new ClassInfoH3(_type.getName(),ClassTypeH3.CLASS,fieldInfo);  _infoRef.compareAndSet(null,classInfo);}  }
class C{  protected void entryEvicted(K key,V value){}  }
class C{  private void pruneStack(){  LirsEntry bottom=stackBottom();  while (bottom != null && bottom.status != Status.HOT) {    bottom.removeFromStack();    if (bottom.status == Status.NONRES) {      backingMap.remove(bottom);    }    bottom=stackBottom();  }}  }
class C{  public String toString(){  return toDebugString(0);}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void moveToNext(){  checkMainThread();  scheduled.set(false);  Bitmap next=pending.poll();  if (next != null) {    if (current != null && !finished.offer(current))     throw new RuntimeException("Could not add image to finished queue");    current=next;    invalidateSelf();    ensureScheduled();    frameAvailableSubject.onNext(null);    fpsCounter.update();  }}  }
class C{  private static String explainGDFNode(GDFNode gnode,int level,HashSet<Long> memo) throws DMLRuntimeException {  if (memo.contains(gnode.getID()) || gnode.getNodeType() == NodeType.HOP_NODE && gnode.getHop() instanceof LiteralOp) {    return "";  }  StringBuilder sb=new StringBuilder();  String offset=createOffset(level);  for (  GDFNode input : gnode.getInputs())   sb.append(explainGDFNode(input,level,memo));  sb.append(offset);  String deps=null;  if (SHOW_DATA_DEPENDENCIES) {    sb.append("(" + gnode.getID() + ") ");    StringBuilder childs=new StringBuilder();    childs.append(" (");    boolean childAdded=false;    for (    GDFNode input : gnode.getInputs()) {      childs.append(childAdded ? "," : "");      childs.append(input.getID());      childAdded=true;    }    childs.append(")");    if (childAdded)     deps=childs.toString();  }  if (gnode instanceof GDFLoopNode) {    GDFLoopNode lgnode=(GDFLoopNode)gnode;    String offset2=createOffset(level + 1);    sb.append(lgnode.explain(deps) + "\n");    sb.append(offset2 + "PRED:\n");    sb.append(explainGDFNode(lgnode.getLoopPredicate(),level + 2,memo));    sb.append(offset2 + "BODY:\n");    for (    Entry<String,GDFNode> root : lgnode.getLoopOutputs().entrySet()) {      sb.append(explainGDFNode(root.getValue(),level + 2,memo));    }  } else {    sb.append(gnode.explain(deps));    sb.append('\n');  }  memo.add(gnode.getID());  return sb.toString();}  }
class C{  private static boolean is16BitRegister(final String register){  return register.equals("ax") || register.equals("bx") || register.equals("cx")|| register.equals("dx")|| register.equals("si")|| register.equals("di")|| register.equals("sp")|| register.equals("bp")|| register.equals("ip");}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public final void createInitialPartitionByOccurrences(MapCounter<Integer> messageCounter,int minNumClusters,int numUniqueMsgIds){  m_initialPartitionFileName=null;  final Set<Integer> uniqNumOccurances=new HashSet<Integer>();  final Collection<Integer> integers=messageCounter.getMap().values();  uniqNumOccurances.addAll(integers);  if (uniqNumOccurances.size() >= minNumClusters) {    m_numClusters=uniqNumOccurances.size();    m_initialPartition=new int[numUniqueMsgIds];    int i=0;    for (    int numOccurrences : integers) {      m_initialPartition[i]=numOccurrences;      i++;    }  } else {    m_numClusters=minNumClusters;  }}  }
class C{  public void addApplyListenerIn(ActionListener l){  inApplyPanel.addActionListener(l);}  }
class C{  public boolean hasOutlinks(){  return fieldSetFlags()[1];}  }
class C{  public boolean removeAll(Collection<?> c){  return al.removeAll(c);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  return null;}  }
class C{  private void createApplicationUsersProperties(){  if (!getUsers().isEmpty()) {    StringBuilder usersToken=new StringBuilder("# JBoss application-users.properties file generated by CARGO\n");    for (    User user : getUsers()) {      usersToken.append(WildFlyUserUtils.generateUserPasswordLine(user,"ApplicationRealm"));    }    getFileHandler().writeTextFile(getFileHandler().append(getHome(),"/configuration/application-users.properties"),usersToken.toString(),"UTF-8");  }}  }
class C{  public void samlValidate(Document doc) throws SAXException, IOException {  try {    Validator validator=getSamlSchema().newValidator();    validator.validate(new DOMSource(doc));  } catch (  Exception e) {    throw new AssertionError(e);  }}  }
class C{  public void addComment(Comment comment){  addProperty(comment);}  }
class C{  @Override public void addEventListener2(IOneToOneFileTransferListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mOneToOneFileTransferBroadcaster.addOneToOneFileTransferListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.config("");  doGet(request,response);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final String generateConfigV3(){  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory of=new org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory();  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType externalMatsimConfig=of.createFileType();  externalMatsimConfig.setInputFile(this.matsimExternalConfigFileName);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType network=of.createFileType();  network.setInputFile(this.networkInputFileName);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType emptyShapeFile=of.createFileType();  emptyShapeFile.setInputFile("");  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType warmStartPlansFile=of.createFileType();  warmStartPlansFile.setInputFile(this.hotstartPlansFileName);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType hotStartPlansFile=of.createFileType();  hotStartPlansFile.setInputFile(this.hotstartPlansFileName);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.MatsimConfigType matsimConfigType=of.createMatsimConfigType();  matsimConfigType.setCellSize(this.cellSizeCellBasedAccessibility);  matsimConfigType.setAccessibilityComputationAreaFromShapeFile(false);  matsimConfigType.setAccessibilityComputationAreaFromBoundingBox(false);  matsimConfigType.setAccessibilityComputationAreaFromNetwork(true);  matsimConfigType.setStudyAreaBoundaryShapeFile(emptyShapeFile);  matsimConfigType.setUrbansimZoneRandomLocationDistributionByRadius(this.randomLocationDistributionRadiusForUrbanSimZone);  matsimConfigType.setUrbansimZoneRandomLocationDistributionByShapeFile("");  matsimConfigType.setExternalMatsimConfig(externalMatsimConfig);  matsimConfigType.setNetwork(network);  matsimConfigType.setWarmStartPlansFile(warmStartPlansFile);  matsimConfigType.setHotStartPlansFile(hotStartPlansFile);  matsimConfigType.setUseHotStart(true);  matsimConfigType.setActivityType0(this.activityType_0);  matsimConfigType.setActivityType1(this.activityType_1);  matsimConfigType.setHomeActivityTypicalDuration(this.homeActivityTypicalDuration);  matsimConfigType.setWorkActivityTypicalDuration(this.workActivityTypicalDuration);  matsimConfigType.setWorkActivityOpeningTime(this.workActivityOpeningTime);  matsimConfigType.setWorkActivityLatestStartTime(this.workActivityLatestStartTime);  matsimConfigType.setFirstIteration(this.firstIteration);  matsimConfigType.setLastIteration(this.lastIteration);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.Matsim4UrbansimType matsim4UrbanSimType=of.createMatsim4UrbansimType();  matsim4UrbanSimType.setPopulationSamplingRate(this.populationSamplingRate);  matsim4UrbanSimType.setYear(this.year);  matsim4UrbanSimType.setOpusHome(this.opusHome);  matsim4UrbanSimType.setOpusDataPath(this.opusDataPath);  matsim4UrbanSimType.setMatsim4Opus(this.matsim4opus);  matsim4UrbanSimType.setMatsim4OpusConfig(this.matsim4opusConfig);  matsim4UrbanSimType.setMatsim4OpusOutput(this.matsim4opusOutput);  matsim4UrbanSimType.setMatsim4OpusTemp(this.matsim4opusTemp);  matsim4UrbanSimType.setCustomParameter(this.customParameter);  matsim4UrbanSimType.setZone2ZoneImpedance(this.zone2zoneImpedance);  matsim4UrbanSimType.setAgentPerfomance(this.agentPerformance);  matsim4UrbanSimType.setZoneBasedAccessibility(this.zoneBasedAccessibility);  matsim4UrbanSimType.setParcelBasedAccessibility(this.cellBasedAccessibility);  matsim4UrbanSimType.setBackupRunData(this.backupRunData);  Matsim4UrbansimConfigType m4uConfigType=of.createMatsim4UrbansimConfigType();  m4uConfigType.setMatsim4Urbansim(matsim4UrbanSimType);  m4uConfigType.setMatsimConfig(matsimConfigType);  return writeConfigFileV3(m4uConfigType);}  }
class C{  public Builder withTokenizer(Class<? extends TokenizerFactory> factory,Map<String,String> params) throws IOException {  Objects.requireNonNull(factory,"Tokenizer factory may not be null");  tokenizer.set(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params))));  componentsAdded=true;  return this;}  }
class C{  public boolean overlapSave(SphereCluster other){  double minDist=Math.sqrt(2) * (getRadius() + other.getRadius());  double diff=getCenterDistance(other) - minDist;  return diff > 0;}  }
class C{  private ActivityRecord findTaskLocked(Intent intent,ActivityInfo info){  ComponentName cls=intent.getComponent();  if (info.targetActivity != null) {    cls=new ComponentName(info.packageName,info.targetActivity);  }  TaskRecord cp=null;  final int userId=UserHandle.getUserId(info.applicationInfo.uid);  final int N=mHistory.size();  for (int i=(N - 1); i >= 0; i--) {    ActivityRecord r=mHistory.get(i);    if (!r.finishing && r.task != cp && r.userId == userId && r.launchMode != ActivityInfo.LAUNCH_SINGLE_INSTANCE) {      cp=r.task;      if (r.task.affinity != null) {        if (r.task.affinity.equals(info.taskAffinity)) {          return r;        }      } else       if (r.task.intent != null && r.task.intent.getComponent().equals(cls)) {        return r;      } else       if (r.task.affinityIntent != null && r.task.affinityIntent.getComponent().equals(cls)) {        return r;      }    }  }  return null;}  }
class C{  public And(){  super(Boolean.class,Boolean.class,Boolean.class);}  }
class C{  private int findRecordOfMethodStart(final Object receiver,final int captureId){  final int oid=System.identityHashCode(receiver);  int currentRecord=captureIds.size() - 1;  int nestedCalls=0;  while (true) {    if (this.captureIds.get(currentRecord) == captureId && this.objectIds.get(currentRecord) == oid) {      if (this.methodNames.get(currentRecord).equals(END_CAPTURE_PSEUDO_METHOD)) {        nestedCalls++;      } else {        if (nestedCalls == 0) {          break;        } else {          nestedCalls--;        }      }    }    currentRecord--;  }  return currentRecord;}  }
class C{  private void parseHolidays(int year,Set<Holiday> holidays,final Holidays config){  Collection<HolidayParser> parsers=getParsers(config);  for (  HolidayParser p : parsers) {    p.parse(year,holidays,config);  }}  }
class C{  protected Node newNode(){  return new SVGOMFontFaceUriElement();}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.PACKAGE_MEMBER;}  }
class C{  @Override public int hashCode(){  return Arrays.asList(points).hashCode();}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public ExportOperation(final String key){  setKey(key);}  }
class C{  private void appendMultiLineStringText(MultiLineString multiLineString,int level,boolean indentFirst,Writer writer) throws IOException {  if (multiLineString.isEmpty()) {    writer.write("EMPTY");  } else {    int level2=level;    boolean doIndent=indentFirst;    writer.write("(");    for (int i=0; i < multiLineString.getNumGeometries(); i++) {      if (i > 0) {        writer.write(", ");        level2=level + 1;        doIndent=true;      }      appendLineStringText((LineString)multiLineString.getGeometryN(i),level2,doIndent,writer);    }    writer.write(")");  }}  }
class C{  @Nullable public static String findFileInProvidedPath(String providedPath,String... fileNames){  if (StringUtil.isEmpty(providedPath)) {    return "";  }  File providedFile=new File(providedPath);  if (providedFile.exists()) {    String name=providedFile.getName();    for (    String fileName : fileNames) {      if (name.equals(fileName)) {        return toSystemDependentName(providedFile.getPath());      }    }  }  if (providedFile.isDirectory()) {    for (    String fileName : fileNames) {      File file=new File(providedFile,fileName);      if (fileName.equals(file.getName()) && file.exists()) {        return toSystemDependentName(file.getPath());      }    }  }  providedFile=providedFile.getParentFile();  if (providedFile != null && providedFile.exists()) {    for (    String fileName : fileNames) {      File file=new File(providedFile,fileName);      if (fileName.equals(file.getName()) && file.exists()) {        return toSystemDependentName(file.getPath());      }    }  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public OsmElementProcessor(ElementProcessor parentProcessor,MapBuilder mdConsumer){  super(parentProcessor,mdConsumer);  boundElementProcessor=new BoundElementProcessor(this,getMapBuilder());  nodeElementProcessor=new NodeElementProcessor(this,getMapBuilder());  wayElementProcessor=new WayElementProcessor(this,getMapBuilder());}  }
class C{  private static ElementKey<?,?> bindKey(ElementKey<?,?> key,Class<? extends Element> type){  Class<?> keyType=key.getElementType();  if (keyType == type) {    return key;  }  return ElementKey.of(key.getId(),key.getDatatype(),type);}  }
class C{  public boolean parseTags(){  return parseTags;}  }
class C{  public static CCIntervalAction action(float duration){  return new CCFlipX3D(ccGridSize.ccg(1,1),duration);}  }
class C{  @SuppressWarnings("unused") @Subscribe public void onEvent(NothingToUpdateEvent event){  Log.d("CHCP","Nothing to update");  PluginResult jsResult=PluginResultHelper.pluginResultFromEvent(event);  if (downloadJsCallback != null) {    downloadJsCallback.sendPluginResult(jsResult);    downloadJsCallback=null;  }  sendMessageToDefaultCallback(jsResult);}  }
class C{  public SystemPropertiesLoader withoutOverrides(){  withOverrides=false;  return this;}  }
class C{  public WbXmlAttribute addValue(String value){  this.values.add(value);  return this;}  }
class C{  private String copyExistingWalletToBackupAndDeleteOriginal(File walletFile) throws IOException {  String newWalletBackupFilename=BackupManager.INSTANCE.createBackupFilename(walletFile,BackupManager.ROLLING_WALLET_BACKUP_DIRECTORY_NAME,false,false,BitcoinModel.WALLET_FILE_EXTENSION);  File newWalletBackupFile=new File(newWalletBackupFilename);  if (walletFile != null && walletFile.exists()) {    FileHandler.copyFile(walletFile,newWalletBackupFile);    if (walletFile.length() != newWalletBackupFile.length()) {      throw new IOException("Failed to copy the existing wallet from '" + walletFile.getAbsolutePath() + "' to '"+ newWalletBackupFilename+ "'");    }    if (!walletFile.getAbsolutePath().equals(newWalletBackupFile.getAbsolutePath())) {      secureDelete(walletFile);    }  }  return newWalletBackupFilename;}  }
class C{  public ProtocolInfo(String name){  this(name,new ArrayList<Form>());}  }
class C{  @Override public Query newPrefixQuery(String text){  if (settings.lowercaseExpandedTerms()) {    text=text.toLowerCase(settings.locale());  }  BooleanQuery.Builder bq=new BooleanQuery.Builder();  bq.setDisableCoord(true);  for (  Map.Entry<String,Float> entry : weights.entrySet()) {    try {      if (settings.analyzeWildcard()) {        Query analyzedQuery=newPossiblyAnalyzedQuery(entry.getKey(),text);        analyzedQuery.setBoost(entry.getValue());        bq.add(analyzedQuery,BooleanClause.Occur.SHOULD);      } else {        PrefixQuery prefix=new PrefixQuery(new Term(entry.getKey(),text));        prefix.setBoost(entry.getValue());        bq.add(prefix,BooleanClause.Occur.SHOULD);      }    } catch (    RuntimeException e) {      return rethrowUnlessLenient(e);    }  }  return super.simplify(bq.build());}  }
class C{  protected List createRecords(InStream in) throws IOException {  List records=new ArrayList();  List<ActionRecord> jumpers=new ArrayList();  List<Integer> skippers=new ArrayList();  HashMap offsetTable=new HashMap();  Stack blockSizes=new Stack();  int labelIndex=0;  while (true) {    int offset=(int)in.getBytesRead();    int code=in.readUI8();    int dataLength=(code >= 0x80) ? in.readUI16() : 0;    byte[] data=(dataLength > 0) ? in.read(dataLength) : null;    ActionRecord rec=new ActionRecord(offset,code,data);    records.add(rec);    offsetTable.put(new Integer(offset),rec);    if (!blockSizes.isEmpty()) {      int depth=blockSizes.size();      rec.blockDepth=depth;      int blockDecrement=(dataLength > 0) ? (dataLength + 3) : 1;      for (int i=depth - 1; i >= 0; i--) {        int[] blockSize=(int[])blockSizes.elementAt(i);        int size=blockSize[0];        size-=blockDecrement;        if (size <= 0) {          blockSizes.pop();        } else {          blockSize[0]=size;        }      }    }    if (code == 0) {      break;    } else     if (code == DEFINE_FUNCTION) {      InStream in2=new InStream(rec.data);      in2.readString();      int params=in2.readUI16();      for (int i=0; i < params; i++) {        in2.readString();      }      int blockSize=in2.readUI16();      blockSizes.push(new int[]{blockSize});    } else     if (code == WITH) {      InStream in2=new InStream(rec.data);      int blockSize=in2.readUI16();      blockSizes.push(new int[]{blockSize});    } else     if (code == WAIT_FOR_FRAME || code == WAIT_FOR_FRAME_2) {      skippers.add(new Integer(records.size() - 1));    } else     if (code == IF || code == JUMP) {      jumpers.add(rec);    }  }  for (  ActionRecord rec : jumpers) {    InStream in2=new InStream(rec.data);    int jumpOffset=in2.readSI16();    int offset=rec.offset + 5;    int absoluteOffset=offset + jumpOffset;    ActionRecord target=(ActionRecord)offsetTable.get(new Integer(absoluteOffset));    if (target != null) {      if (target.label == null) {        target.label=rec.jumpLabel="label" + (labelIndex++);      } else {        rec.jumpLabel=target.label;      }    }  }  for (  Integer idx : skippers) {    ActionRecord rec=(ActionRecord)records.get(idx);    InStream in2=new InStream(rec.data);    if (rec.code == WAIT_FOR_FRAME) {      in2.readUI16();    }    int skip=in2.readUI8();    int skipIndex=idx + skip + 1;    if (skipIndex < records.size()) {      ActionRecord target=(ActionRecord)records.get(skipIndex);      if (target.label == null) {        target.label=rec.jumpLabel="label" + (labelIndex++);      } else {        rec.jumpLabel=target.label;      }    }  }  return records;}  }
class C{  public boolean isSingleThreaded(){  return mode == DispatchMode.SINGLE_THREAD;}  }
class C{  @Override protected int sizeOf(MemoryCacheKey key,Bitmap bitmap){  if (bitmap == null)   return 0;  return bitmap.getRowBytes() * bitmap.getHeight();}  }
class C{  public HashMap<String,String> current(){  return this.cr;}  }
class C{  public Object trapFieldRead(String name){  Class jc=getJavaClass();  try {    return jc.getField(name).get(null);  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e.toString());  }catch (  IllegalAccessException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  private int handleP(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 1) == 'H') {    result.append('F');    index+=2;  } else {    result.append('P');    index=contains(value,index + 1,1,"P","B") ? index + 2 : index + 1;  }  return index;}  }
class C{  public static byte[] subArray(byte[] input,int start,int end){  byte[] result=new byte[end - start];  System.arraycopy(input,start,result,0,end - start);  return result;}  }
class C{  void addToExternalCSS(CSSElement cssElement){  if (externalCSS == null) {    externalCSS=new Vector();  }  externalCSS.addElement(cssElement);}  }
class C{  private InetSocketAddress nextInetSocketAddress() throws UnknownHostException {  InetSocketAddress result=new InetSocketAddress(socketAddresses[nextSocketAddressIndex++],socketPort);  if (nextSocketAddressIndex == socketAddresses.length) {    socketAddresses=null;    nextSocketAddressIndex=0;  }  return result;}  }
class C{  public boolean mapsCell(String cell){  return mappers.values().stream().anyMatch(null);}  }
class C{  @SuppressWarnings("unchecked") private GridRestRequest createRestRequest(GridMemcachedMessage req,GridRestCommand cmd){  assert req != null;  if (cmd == ATOMIC_INCREMENT || cmd == ATOMIC_DECREMENT) {    DataStructuresRequest restReq=new DataStructuresRequest();    restReq.command(cmd);    restReq.key(req.key());    restReq.delta(req.delta());    restReq.initial(req.initial());    return restReq;  } else {    GridRestCacheRequest restReq=new GridRestCacheRequest();    restReq.command(cmd);    restReq.clientId(req.clientId());    restReq.ttl(req.expiration());    restReq.cacheName(req.cacheName());    restReq.key(req.key());    if (cmd == CACHE_REMOVE_ALL) {      Object[] keys=(Object[])req.value();      if (keys != null) {        Map<Object,Object> map=new HashMap<>();        for (        Object key : keys) {          map.put(key,null);        }        restReq.values(map);      }    } else {      if (req.value() != null)       restReq.value(req.value());    }    return restReq;  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private boolean isOpen(){  return entity.getResistance() == 0;}  }
class C{  public void testOneOne(){  String numA="1";  String numB="1";  String res="0";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public static boolean isValidWidget(JSONObject cruxObject){  if (cruxObject.has("_type")) {    String type=cruxObject.optString("_type");    return (type != null && !ViewParser.SCREEN_TYPE.equals(type) && !DataProviderType.isDataProviderType(type));  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.498 -0500",hash_original_method="0C6D1452631B0ABABC52FCC37CE65FF7",hash_generated_method="9CC6E52B6C6B6AA593DB3A674423C42E") private String local_number() throws ParseException {  StringBuffer s=new StringBuffer();  if (debug)   dbg_enter("local_number");  try {    int lc=0;    while (lexer.hasMoreChars()) {      char la=lexer.lookAhead(0);      if (la == '*' || la == '#' || la == '-' || la == '.' || la == '(' || la == ')' || Lexer.isHexDigit(la)) {        lexer.consume(1);        s.append(la);        lc++;      } else       if (lc > 0)       break; else       throw createParseException("unexepcted " + la);    }    return s.toString();  }  finally {    if (debug)     dbg_leave("local_number");  }}  }
class C{  public static <T>void sort(T[] data,Comparator<T> comp){  new InPlaceStableMergeSort<T>().sortArray(data,comp);}  }
class C{  public Geo scale(double s,Geo ret){  ret.initialize(this.x() * s,this.y() * s,this.z() * s);  return ret;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void shift(int i,int j){  if (i == j)   return;  if (i < j) {    int t=V[i];    for (int k=i; k <= j - 1; k++)     V[k]=V[k + 1];    V[j]=t;  } else   shift(j,i);}  }
class C{  public Iterator<M> iterator(){  return stack.sequence();}  }
class C{  public Iterator outNeighbors(Node n){  return new NeighborIterator(n,outEdges(n));}  }
class C{  public static List<Namespace> findByOwner(EntityManager em,PrincipalUser owner){  SystemAssert.requireArgument(em != null,"EntityManager cannot be null.");  SystemAssert.requireArgument(owner != null,"Owner cannot be null or empty.");  TypedQuery<Namespace> query=em.createNamedQuery("Namespace.findByOwner",Namespace.class);  try {    return query.setParameter("owner",owner).getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  @Override protected final long maxMemory(){  return heap.getHeapMemoryUsage().getMax();}  }
class C{  private boolean checkDemand(int c){  boolean stat=true;  if (demand == 0L) {    if ((c & CONSUME) != 0)     U.compareAndSwapInt(this,CTL,c,c & ~CONSUME); else     if (U.compareAndSwapInt(this,CTL,c,c & ~ACTIVE))     stat=false;  }  return stat;}  }
class C{  public ZoomPanel(){  super();  setKey(defaultKey);  this.setOpaque(false);  JPanel panel=new JPanel();  GridBagLayout internalGridbag=new GridBagLayout();  GridBagConstraints c2=new GridBagConstraints();  panel.setLayout(internalGridbag);  zoomDelegate=new ZoomSupport(this);  zoomInButton=getButton("zoomIn","Zoom In",zoomInCmd);  c2.gridx=0;  c2.gridy=0;  internalGridbag.setConstraints(zoomInButton,c2);  panel.add(zoomInButton);  zoomOutButton=getButton("zoomOut","Zoom Out",zoomOutCmd);  c2.gridy=1;  internalGridbag.setConstraints(zoomOutButton,c2);  panel.add(zoomOutButton);  add(panel);}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof ProxyAddress)) {    return false;  }  ProxyAddress cmpProxyAddress=(ProxyAddress)object;  if (!this.getHost().equals(cmpProxyAddress.getHost())) {    return false;  }  return (this.getPort() == cmpProxyAddress.getPort());}  }
class C{  public String history(){  return MLContextUtil.displayScriptHistory(scriptHistoryStrings);}  }
class C{  public static int sumOfNNumbers(int n){  int sum=0;  for (int i=1; i <= n; i++) {    sum+=i;  }  return sum;}  }
class C{  public final TextBuilder append(char c){  if (_length >= _capacity)   increaseCapacity();  _high[_length >> B1][_length & M1]=c;  _length++;  return this;}  }
class C{  public void refineModel(int direction,double distance,double travelTime){  byte directionBucket=getDirectionBucket(direction);  models[directionBucket].addData(distance,travelTime);}  }
class C{  public static void reportTimings(CommandSender sender){  JsonObject out=new JsonObject();  out.addProperty("version",Server.getInstance().getVersion());  out.addProperty("maxplayers",Server.getInstance().getMaxPlayers());  out.addProperty("start",TimingsManager.timingStart / 1000);  out.addProperty("end",System.currentTimeMillis() / 1000);  out.addProperty("sampletime",(System.currentTimeMillis() - TimingsManager.timingStart) / 1000);  if (!Timings.isPrivacy()) {    out.addProperty("server",Server.getInstance().getName());    out.addProperty("motd",Server.getInstance().getMotd());    out.addProperty("online-mode",false);    out.addProperty("icon","");  }  final Runtime runtime=Runtime.getRuntime();  RuntimeMXBean runtimeBean=ManagementFactory.getRuntimeMXBean();  JsonObject system=new JsonObject();  system.addProperty("timingcost",getCost());  system.addProperty("name",System.getProperty("os.name"));  system.addProperty("version",System.getProperty("os.version"));  system.addProperty("jvmversion",System.getProperty("java.version"));  system.addProperty("arch",System.getProperty("os.arch"));  system.addProperty("maxmem",runtime.maxMemory());  system.addProperty("cpu",runtime.availableProcessors());  system.addProperty("runtime",ManagementFactory.getRuntimeMXBean().getUptime());  system.addProperty("flags",String.join(" ",runtimeBean.getInputArguments()));  system.add("gc",JsonUtil.mapToObject(ManagementFactory.getGarbageCollectorMXBeans(),null));  out.add("system",system);  TimingsHistory[] history=HISTORY.toArray(new TimingsHistory[HISTORY.size() + 1]);  history[HISTORY.size()]=new TimingsHistory();  JsonObject timings=new JsonObject();  for (  TimingIdentifier.TimingGroup group : TimingIdentifier.GROUP_MAP.values()) {    for (    Timing id : group.timings) {      if (!id.timed && !id.isSpecial()) {        continue;      }      timings.add(String.valueOf(id.id),JsonUtil.toArray(group.id,id.name));    }  }  JsonObject idmap=new JsonObject();  idmap.add("groups",JsonUtil.mapToObject(TimingIdentifier.GROUP_MAP.values(),null));  idmap.add("handlers",timings);  idmap.add("worlds",JsonUtil.mapToObject(TimingsHistory.levelMap.entrySet(),null));  idmap.add("tileentity",JsonUtil.mapToObject(TimingsHistory.blockEntityMap.entrySet(),null));  idmap.add("entity",JsonUtil.mapToObject(TimingsHistory.entityMap.entrySet(),null));  out.add("idmap",idmap);  out.add("plugins",JsonUtil.mapToObject(Server.getInstance().getPluginManager().getPlugins().values(),null));  JsonObject config=new JsonObject();  if (!Timings.getIgnoredConfigSections().contains("all")) {    JsonObject BukkitPE=JsonUtil.toObject(Server.getInstance().getConfig().getRootSection());    Timings.getIgnoredConfigSections().forEach(null);    config.add("BukkitPE",BukkitPE);  } else {    config.add("BukkitPE",null);  }  out.add("config",config);  new TimingsExport(sender,out,history).start();}  }
class C{  public static String formatCode(final int code){  return formatCode(getCodeClass(code),getCodeDetail(code));}  }
class C{  public static void orthoM(float[] m,int mOffset,float left,float right,float bottom,float top,float near,float far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (bottom == top) {    throw new IllegalArgumentException("bottom == top");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  final float r_width=1.0f / (right - left);  final float r_height=1.0f / (top - bottom);  final float r_depth=1.0f / (far - near);  final float x=2.0f * (r_width);  final float y=2.0f * (r_height);  final float z=-2.0f * (r_depth);  final float tx=-(right + left) * r_width;  final float ty=-(top + bottom) * r_height;  final float tz=-(far + near) * r_depth;  m[mOffset + 0]=x;  m[mOffset + 5]=y;  m[mOffset + 10]=z;  m[mOffset + 12]=tx;  m[mOffset + 13]=ty;  m[mOffset + 14]=tz;  m[mOffset + 15]=1.0f;  m[mOffset + 1]=0.0f;  m[mOffset + 2]=0.0f;  m[mOffset + 3]=0.0f;  m[mOffset + 4]=0.0f;  m[mOffset + 6]=0.0f;  m[mOffset + 7]=0.0f;  m[mOffset + 8]=0.0f;  m[mOffset + 9]=0.0f;  m[mOffset + 11]=0.0f;}  }
class C{  private void newValueOnTOS(){  IsNullValueFrame frame=getFrame();  if (frame.getStackDepth() < 1) {    return;  }  int tosSlot=frame.getNumSlots() - 1;  IsNullValue tos=frame.getValue(tosSlot);  if (tos.isDefinitelyNull()) {    slotContainingNewNullValue=tosSlot;  }  if (trackValueNumbers) {    try {      ValueNumberFrame vnaFrameAfter=vnaDataflow.getFactAfterLocation(getLocation());      if (vnaFrameAfter.isValid()) {        ValueNumber tosVN=vnaFrameAfter.getTopValue();        getFrame().setKnownValue(tosVN,tos);      }    } catch (    DataflowAnalysisException e) {      AnalysisContext.logError("error",e);    }  }}  }
class C{  public void message(SerialMessage m){}  }
class C{  public Result(T info){  this.info=info;}  }
class C{  public void testRawStringContentStream() throws IOException {  SolrQueryResponse rsp=new SolrQueryResponse();  String data=TestUtil.randomUnicodeString(random());  StringStream stream=new StringStream(data);  stream.setContentType(TestUtil.randomSimpleString(random()));  rsp.add(RawResponseWriter.CONTENT,stream);  for (  RawResponseWriter writer : allWriters) {    assertEquals(stream.getContentType(),writer.getContentType(req(),rsp));    StringWriter sout=new StringWriter();    writer.write(sout,req(),rsp);    assertEquals(data,sout.toString());    ByteArrayOutputStream bout=new ByteArrayOutputStream();    writer.write(bout,req(),rsp);    assertEquals(data,bout.toString(StandardCharsets.UTF_8.toString()));  }}  }
class C{  public boolean stem(char[] wordBuffer,int offset,int wordLen){  reset();  if (b.length < wordLen) {    b=new char[ArrayUtil.oversize(wordLen,Character.BYTES)];  }  System.arraycopy(wordBuffer,offset,b,0,wordLen);  i=wordLen;  return stem(0);}  }
class C{  public String outputItemSetsTipText(){  return "If enabled the itemsets are output as well.";}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  int k_max=in.readInt();  knnDistances=new double[k_max];  for (int i=0; i < k_max; i++) {    knnDistances[i]=in.readDouble();  }}  }
class C{  public IndexEvaluator(String expr){  super(expr);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public final synchronized boolean isClosed(){  return closed;}  }
class C{  final public SyntaxTreeNode ParamSubDecl() throws ParseException {  SyntaxTreeNode tn, sn[];  Token t, u;  bpa("Parameter declaration item");  t=jj_consume_token(CONSTANT);  sn=new SyntaxTreeNode[1];  sn[0]=new SyntaxTreeNode(mn,t);  tn=new SyntaxTreeNode(mn,N_ConsDecl,sn);  epa();{    if (true)     return tn;  }  throw new Error("Missing return statement in function");}  }
class C{  public AssertionFailedError(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public float idf(long docFreq,long numDocs){  return (float)(Math.log(numDocs / (double)(docFreq + 1)) + 1.0);}  }
class C{  public static void announceForAccessibilityCompat(Context context,CharSequence text){  if (Build.VERSION.SDK_INT >= 4) {    AccessibilityManager accessibilityManager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);    if (!accessibilityManager.isEnabled()) {      return;    }    final int eventType;    if (Build.VERSION.SDK_INT < 16) {      eventType=AccessibilityEvent.TYPE_VIEW_FOCUSED;    } else {      eventType=AccessibilityEventCompat.TYPE_ANNOUNCEMENT;    }    final AccessibilityEvent event=AccessibilityEvent.obtain(eventType);    event.getText().add(text);    event.setClassName(Manager.class.getName());    event.setPackageName(context.getPackageName());    accessibilityManager.sendAccessibilityEvent(event);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void addOffer(Offer offer){  view.displayCardOffer(offer);}  }
class C{  public boolean wasRegionClearedDuringGII(){  if (isReplicate()) {    boolean result=this.wasRegionClearedDuringGII;    if (result) {      this.wasRegionClearedDuringGII=false;    }    return result;  } else {    return false;  }}  }
class C{  public static Collection split(Object self,Closure closure){  List accept=new ArrayList();  List reject=new ArrayList();  return split(closure,accept,reject,InvokerHelper.asIterator(self));}  }
class C{  private static char toHex(int nibble){  return hexDigit[(nibble & 0xF)];}  }
class C{  public static void generate(String pkg,PojoDescriptor pojo,boolean includeKeys,boolean generateAliases,File out,ConfirmCallable askOverwrite){  generate(pkg,Collections.singleton(pojo),includeKeys,generateAliases,out,askOverwrite);}  }
class C{  private List<String> makeList(final String... strings){  final List<String> result=new ArrayList<>();  for (  String string : strings) {    result.add(string);  }  return result;}  }
class C{  private JButton createTitleButton(){  JButton button=new JButton();  button.setFocusPainted(false);  button.setFocusable(false);  button.setOpaque(true);  return button;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.200 -0400",hash_original_method="E4DF2692D09657C937667960DF2A3C67",hash_generated_method="C9CAC4A74FFB71E8D02E271FD0FD1900") public LockableFileWriter(String fileName) throws IOException {  this(fileName,false,null);}  }
class C{  public Object nextToken() throws JSONException {  char c;  char q;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped element");case '<':  throw syntaxError("Misplaced '<'");case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;sb=new StringBuffer();for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return sb.toString();}if (c == '&') {sb.append(nextEntity(c));} else {sb.append(c);}}default :sb=new StringBuffer();for (; ; ) {sb.append(c);c=next();if (Character.isWhitespace(c)) {return sb.toString();}switch (c) {case 0:return sb.toString();case '>':case '/':case '=':case '!':case '?':case '[':case ']':back();return sb.toString();case '<':case '"':case '\'':throw syntaxError("Bad character in a name");}}}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public void applyShape(Region shape){  if (XlibUtil.isShapingSupported()) {    if (shapeLog.isLoggable(PlatformLogger.Level.FINER)) {      shapeLog.finer("*** INFO: Setting shape: PEER: " + this + "; WINDOW: "+ getWindow()+ "; TARGET: "+ target+ "; SHAPE: "+ shape);    }    XToolkit.awtLock();    try {      if (shape != null) {        XlibWrapper.SetRectangularShape(XToolkit.getDisplay(),getWindow(),shape.getLoX(),shape.getLoY(),shape.getHiX(),shape.getHiY(),(shape.isRectangular() ? null : shape));      } else {        XlibWrapper.SetRectangularShape(XToolkit.getDisplay(),getWindow(),0,0,0,0,null);      }    }  finally {      XToolkit.awtUnlock();    }  } else {    if (shapeLog.isLoggable(PlatformLogger.Level.FINER)) {      shapeLog.finer("*** WARNING: Shaping is NOT supported!");    }  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);}  }
class C{  private void refineMembers(ClassOrInterface coi){  for (  Declaration d : coi.getMembers()) {    if (d.isActual()) {      Declaration refined=coi.getRefinedMember(d.getName(),getSignature(d),false);      if (refined == null)       refined=d;      d.setRefinedDeclaration(refined);    }    if (d instanceof ClassOrInterface) {      refineMembers((ClassOrInterface)d);    }  }}  }
class C{  private String fudgeroonify(){  try {    return (String)RhinoTestBed.runJs(new Executor.Input(getClass(),"/js/jsfunfuzz/jsfunfuzz.js"));  } catch (  IOException e) {    fail("JS Fuzzer jsfunfuzz.js not found");    return null;  }}  }
class C{  protected Renderable doMakeShadowShape(){  Renderable shadow=super.doMakeShadowShape();  if (shadow != null)   return shadow;  if (this.getShape() instanceof Arrow)   return new Arrow((Arrow)this.getShape());  return null;}  }
class C{  private ScreenOverlayType createBiasErrorGraph(String kmlFilename){  BiasErrorGraph ep=new BiasErrorGraph(this.countComparisonFilter.getCountsForHour(null),this.iterationNumber,null,"error graph");  ep.createChart(0);  double[] meanError=ep.getMeanRelError();  double[] meanBias=ep.getMeanAbsBias();  int index=kmlFilename.lastIndexOf(System.getProperty("file.separator"));  if (index == -1) {    index=kmlFilename.lastIndexOf('/');  }  String outdir;  if (index == -1) {    outdir="";  } else {    outdir=kmlFilename.substring(0,index) + System.getProperty("file.separator");  }  String file=outdir + "biasErrorGraphData.txt";  log.info("writing chart data to " + new File(file).getAbsolutePath());  try {    BufferedWriter bwriter=IOUtils.getBufferedWriter(file);    StringBuilder buffer=new StringBuilder(200);    buffer.append("hour \t mean relative error \t mean absolute bias");    bwriter.write(buffer.toString());    bwriter.newLine();    for (int i=0; i < meanError.length; i++) {      buffer.delete(0,buffer.length());      buffer.append(i + 1);      buffer.append('\t');      buffer.append(meanError[i]);      buffer.append('\t');      buffer.append(meanBias[i]);      bwriter.write(buffer.toString());      bwriter.newLine();    }    bwriter.close();  } catch (  IOException e) {    e.printStackTrace();  }  String filename="errorGraphErrorBias.png";  try {    writeChartToKmz(filename,ep.getChart());    return createOverlayBottomRight(filename,"Error Graph [Error/Bias]");  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  protected void onUnexpectedStatusCode(String urlStr,int statusCode,String contentType,String description){  logger.warn("Skipping URL: {}, StatusCode: {}, {}, {}",urlStr,statusCode,contentType,description);}  }
class C{  @Override public Collection<? extends java.security.cert.Certificate> engineGenerateCertificates(InputStream is) throws CertificateException {  if (is == null) {    throw new CertificateException("Missing input stream");  }  try {    return parseX509orPKCS7Cert(is);  } catch (  IOException ioe) {    throw new CertificateException(ioe);  }}  }
class C{  public static int subIndex(int n,List<LeafReaderContext> leaves){  int size=leaves.size();  int lo=0;  int hi=size - 1;  while (hi >= lo) {    int mid=(lo + hi) >>> 1;    int midValue=leaves.get(mid).docBase;    if (n < midValue)     hi=mid - 1; else     if (n > midValue)     lo=mid + 1; else {      while (mid + 1 < size && leaves.get(mid + 1).docBase == midValue) {        mid++;      }      return mid;    }  }  return hi;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static void generateCodeForReturnStatement(Code code,Class methodReturnType,Local localForResultOfInvoke,Local localOfMethodReturnType,Local aBoxedResult){  if (PRIMITIVE_TO_UNBOX_METHOD.containsKey(methodReturnType)) {    code.cast(aBoxedResult,localForResultOfInvoke);    MethodId unboxingMethodFor=getUnboxMethodForPrimitive(methodReturnType);    code.invokeVirtual(unboxingMethodFor,localOfMethodReturnType,aBoxedResult);    code.returnValue(localOfMethodReturnType);  } else   if (void.class.equals(methodReturnType)) {    code.returnVoid();  } else {    code.cast(localOfMethodReturnType,localForResultOfInvoke);    code.returnValue(localOfMethodReturnType);  }}  }
class C{  public InvalidDatabaseFormatException(final Exception exception){  super(exception);}  }
class C{  public static String jsonPath(){  String path=System.getProperty("basedir");  if (path == null) {    String userDirectory=FileUtils.getUserDirectoryPath();    path=userDirectory + "/watsonBluemix/watson-movieapp-dialog";  }  return path;}  }
class C{  private int stepOverGroup(){  ArrayList<FormIndex> indicies=new ArrayList<FormIndex>();  GroupDef gd=(GroupDef)mFormEntryController.getModel().getForm().getChild(getFormIndex());  FormIndex idxChild=mFormEntryController.getModel().incrementIndex(getFormIndex(),true);  for (int i=0; i < gd.getChildren().size(); i++) {    indicies.add(idxChild);    idxChild=mFormEntryController.getModel().incrementIndex(idxChild,false);  }  mFormEntryController.jumpToIndex(indicies.get(indicies.size() - 1));  return stepToNextEvent(STEP_OVER_GROUP);}  }
class C{  public void stop(){  if (null != periodicTickTask) {    stopTask(periodicTickTask);  }  if (null != periodicTickExecutorService) {    periodicTickExecutorService.shutdownNow();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.718 -0500",hash_original_method="1EBE66F04307D347AFA5B564B58F8AB6",hash_generated_method="75BECFF3C44A6D33DCB9B0932C91E676") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    this.lexer.match(TokenTypes.CALL_ID);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    CallID callID=new CallID();    this.lexer.SPorHT();    String rest=lexer.getRest();    callID.setCallId(rest.trim());    return callID;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  private void markSubroutineWalkDFS(final BitSet sub,int index,final BitSet anyvisited){  while (true) {    AbstractInsnNode node=instructions.get(index);    if (sub.get(index)) {      return;    }    sub.set(index);    if (anyvisited.get(index)) {      dualCitizens.set(index);      if (LOGGING) {        log("Instruction #" + index + " is dual citizen.");      }    }    anyvisited.set(index);    if (node.getType() == AbstractInsnNode.JUMP_INSN && node.getOpcode() != JSR) {      JumpInsnNode jnode=(JumpInsnNode)node;      int destidx=instructions.indexOf(jnode.label);      markSubroutineWalkDFS(sub,destidx,anyvisited);    }    if (node.getType() == AbstractInsnNode.TABLESWITCH_INSN) {      TableSwitchInsnNode tsnode=(TableSwitchInsnNode)node;      int destidx=instructions.indexOf(tsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=tsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=tsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }    if (node.getType() == AbstractInsnNode.LOOKUPSWITCH_INSN) {      LookupSwitchInsnNode lsnode=(LookupSwitchInsnNode)node;      int destidx=instructions.indexOf(lsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=lsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=lsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }switch (instructions.get(index).getOpcode()) {case GOTO:case RET:case TABLESWITCH:case LOOKUPSWITCH:case IRETURN:case LRETURN:case FRETURN:case DRETURN:case ARETURN:case RETURN:case ATHROW:      return;  }  index++;  if (index >= instructions.size()) {    return;  }}}  }
class C{  public Vertex createOrdinal(String text,Vertex meaning,Network network){  Vertex word=network.createWord(text);  word.setPinned(true);  meaning.setPinned(true);  word.addRelationship(Primitive.MEANING,meaning);  meaning.addRelationship(Primitive.ORDINAL,word);  network.associateCaseInsensitivity(word);  return word;}  }
class C{  private String processPath(String path){  if (ValidationUtil.isFunction(path)) {    path=FunctionHandler.executeFunction(path,variables);  } else   if (ValidationUtil.isVariable(path)) {    path=variables.getVariable(path);  }  if (StringUtils.isBlank(path)) {    path="/";  }  path=variables.evaluate(path);  return path;}  }
class C{  public static final String toClassname(String filename){  int n=filename.length();  int j=n;  if (filename.endsWith(".lua"))   j-=4;  for (int k=0; k < j; k++) {    char c=filename.charAt(k);    if ((!isClassnamePart(c)) || (c == '/') || (c == '\\')) {      StringBuffer sb=new StringBuffer(j);      for (int i=0; i < j; i++) {        c=filename.charAt(i);        sb.append((isClassnamePart(c)) ? c : ((c == '/') || (c == '\\')) ? '.' : '_');      }      return sb.toString();    }  }  return n == j ? filename : filename.substring(0,j);}  }
class C{  private boolean isShowShake(){  return mNeedShake && mStartShake;}  }
class C{  public boolean versionMeetsMinimum(int major,int minor,int subminor) throws SQLException {  return getActiveConnection().versionMeetsMinimum(major,minor,subminor);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO_CACHE'";  db.execSQL(sql);}  }
class C{  public int indexOf(byte[] data,int start,int max){  int j=0;  if (data.length == 0)   return -1;  for (int i=start; i < start + max; i++) {    while (j > 0 && match[j] != data[i])     j=failure[j - 1];    if (match[j] == data[i])     j++;    if (j == match.length)     return i - match.length + 1;  }  return -1;}  }
class C{  public void actionPerformed(ActionEvent evt){  dispose();}  }
class C{  public void loadGCTraces(String[] fileNames){  ArgumentChecking.notNull(fileNames,"fileNames");  for (int i=0; i < fileNames.length; ++i) {    loadGCTrace(fileNames[i]);  }}  }
class C{  public void addInvokestatic(String classname,String name,String desc){  addInvokestatic(constPool.addClassInfo(classname),name,desc);}  }
class C{  protected AbstractMatrix2D vStrides(int rowStride,int columnStride){  if (rowStride <= 0 || columnStride <= 0)   throw new IndexOutOfBoundsException("illegal strides: " + rowStride + ", "+ columnStride);  this.rowStride*=rowStride;  this.columnStride*=columnStride;  if (this.rows != 0)   this.rows=(this.rows - 1) / rowStride + 1;  if (this.columns != 0)   this.columns=(this.columns - 1) / columnStride + 1;  this.isNoView=false;  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node removedChild;  String childName;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  oldChild=childList.item(0);  removedChild=employeeNode.removeChild(oldChild);  childName=removedChild.getNodeName();  if (equals(6,length)) {    assertEquals("nowhitespace","employeeId",childName);  } else {    assertEquals("whitespace","#text",childName);  }}  }
class C{  public static byte[] encodePoint(ECPoint point,EllipticCurve curve){  int fieldSize=(curve.getField().getFieldSize() + 7) / 8;  byte[] xb=ByteArrayUtils.trimZeroes(point.getAffineX().toByteArray());  byte[] yb=ByteArrayUtils.trimZeroes(point.getAffineY().toByteArray());  if ((xb.length > fieldSize) || (yb.length > fieldSize)) {    LOGGER.severe("Point coordinates do not match field size.");    return null;  }  byte[] encoded=new byte[1 + (fieldSize * 2)];  encoded[0]=0x04;  System.arraycopy(xb,0,encoded,fieldSize - xb.length + 1,xb.length);  System.arraycopy(yb,0,encoded,encoded.length - yb.length,yb.length);  return encoded;}  }
class C{  public static void load(File propFile){  FileInputStream fis=null;  try {    fis=new FileInputStream(propFile);    properties.load(fis);  } catch (  final FileNotFoundException e1) {    log.info("error: file dispatcher.properties does not exist. Exit");    System.exit(-1);  }catch (  final IOException e1) {    log.info("error: file dispatcher.properties cannot be readed. Exit");    System.exit(-1);  } finally {    if (fis != null)     try {      fis.close();    } catch (    IOException ex) {    }  }}  }
class C{  private void sortUnitsToMove(final List<Unit> units,final Route route){  if (units == null || units.isEmpty()) {    return;  } else   if (route == null) {    final Exception nullRouteError=(new IllegalArgumentException("route is not supposed to be null"));    ClientLogger.logQuietly("Programming error, route should not be null here. Aborting sort operation and returning.",nullRouteError);  }  final Comparator<Unit> unitComparator;  if (route.isUnload() && Match.someMatch(units,Matches.UnitIsLand)) {    unitComparator=UnitComparator.getUnloadableUnitsComparator(units,route,getUnitOwner(units));  } else {    unitComparator=UnitComparator.getMovableUnitsComparator(units,route);  }  Collections.sort(units,unitComparator);}  }
class C{  private SchemeMap(Map<String,SchemeRoot> map){  getUpdateMap().putAll(map);}  }
class C{  public boolean isRenewExpired(){  if (renewExpired == null) {    return false;  } else {    return renewExpired;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.COMPOSED_CONTENT__OWNER:    setOwner((Composite)null);  return;}super.eUnset(featureID);}  }
class C{  public KeyUsage(byte[] encoding) throws IOException {  super(encoding);  this.keyUsage=(boolean[])ASN1.decode(encoding);}  }
class C{  public void updateAllCouplings(){  LOGGER.debug("updating all couplings");  for (  Coupling<?> coupling : getCouplings()) {    LOGGER.trace(coupling.getClass());    coupling.setBuffer();  }  for (  Coupling<?> coupling : getCouplings()) {    coupling.update();  }}  }
class C{  public void writeTaxonSets(XMLWriter writer,List<Taxa> taxonSets){  writer.writeText("");  for (  Taxa taxa : taxonSets) {    writer.writeOpenTag(TaxaParser.TAXA,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,taxa.getId())});    for (int j=0; j < taxa.getTaxonCount(); j++) {      writer.writeIDref(TaxonParser.TAXON,taxa.getTaxon(j).getId());    }    writer.writeCloseTag(TaxaParser.TAXA);  }}  }
class C{  protected boolean shouldBlockSideSwipe(){  return isScrollableX() || (parent != null && parent.shouldBlockSideSwipe());}  }
class C{  public DrawerBuilder withSelectedItemByPosition(int selectedItemPosition){  this.mSelectedItemPosition=selectedItemPosition;  return this;}  }
class C{  public void init(OutputStream os){  this.os=os;  _refs=null;  if (_serializerFactory == null)   _serializerFactory=new SerializerFactory();}  }
class C{  String commentBefore() throws ParserException {  String comment="";  tokens.raw=true;  while (tokens.index > 0 && tokens.get(-1).match(Token.COMMENT)) {    tokens.index--;  }  boolean closeComment=false;  for (Token token=tokens.get(); token.match(Token.COMMENT); token=tokens.next()) {    String s=token.value;    if (s.startsWith("/**") || s.startsWith("/*!") || s.startsWith("///")|| s.startsWith("//!")) {      if (s.charAt(3) == '<') {        continue;      } else       if (s.startsWith("/// ") || s.startsWith("//!")) {        s=(comment.length() == 0 || comment.contains("*/") || !comment.contains("/*") ? "/**" : " * ") + s.substring(3);        closeComment=true;      } else       if (!s.startsWith("///")) {        s="/**" + s.substring(3);      }    } else     if (closeComment && !comment.endsWith("*/")) {      closeComment=false;      comment+=" */";    }    comment+=token.spacing + s;  }  if (closeComment && !comment.endsWith("*/")) {    closeComment=false;    comment+=" */";  }  tokens.raw=false;  return comment;}  }
class C{  @SuppressWarnings({"WeakerAccess","SameParameterValue"}) public ProxyConfig(final String remoteProxyHost,final Integer remoteProxyPort,final String username,final String password){  super(valueOrProperty(remoteProxyHost,PROXY_HOST),valueOrProperty(remoteProxyPort,PROXY_PORT),valueOrProperty(username,PROXY_USERNAME),valueOrProperty(password,PROXY_PASSWORD),valueOrProperty(null,PROXY_SOCKS5BRIDGE_PORT,DEFAULT_PROXY_BRIDGE_PORT));  if (!valueNullOrEmpty(this.remoteProxyHost)) {    checkArgumentNotEmpty(this.remoteProxyPort,"remoteProxyPort not given and not configured in config file");    if (!valueNullOrEmpty(this.username) && valueNullOrEmpty(this.password)) {      throw new IllegalArgumentException("Proxy username provided but no password given as argument or in config file");    }    if (valueNullOrEmpty(this.username) && !valueNullOrEmpty(this.password)) {      throw new IllegalArgumentException("Proxy password provided but no username given as argument or in config file");    }  }}  }
class C{  public boolean isExpired(){  return System.currentTimeMillis() - this.lastAccessTime >= 1800000L;}  }
class C{  public static Vector3 normalize(Vector3 a){  return Vector3.scale(a,(1.f / a.length()));}  }
class C{  public static ArrayOfDoublesSketch heapifySketch(final Memory mem,final long seed){  SerializerDeserializer.SketchType sketchType=SerializerDeserializer.getSketchType(mem);  if (sketchType == SerializerDeserializer.SketchType.ArrayOfDoublesQuickSelectSketch) {    return new HeapArrayOfDoublesQuickSelectSketch(mem,seed);  }  return new HeapArrayOfDoublesCompactSketch(mem,seed);}  }
class C{  public double dot(Vec x){  return dot(x,k.getQueryInfo(x));}  }
class C{  public synchronized void changedUpdate(DocumentEvent e){}  }
class C{  public CloudObject[] querySorted(String type,int index,boolean ascending,int page,int limit,int visibilityScope) throws CloudException {  return (CloudObject[])queryImpl(type,null,0,page,limit,visibilityScope,1,index,ascending,false,false,null);}  }
class C{  int lanczos_step(SMat A,int first,int last,double[][] wptr,double[] alf,double[] eta,double[] oldeta,double[] bet,int[] ll,boolean[] refEnough,double[] rnmp,double[] tolp,int n){  double t;  double[] mid;  double rnm=rnmp[0];  double tol=tolp[0];  double anorm;  int i, j;  for (j=first; j < last; j++) {    mid=wptr[2];    wptr[2]=wptr[1];    wptr[1]=mid;    mid=wptr[3];    wptr[3]=wptr[4];    wptr[4]=mid;    store(n,STORQ,j - 1,wptr[2]);    if (j - 1 < MAXLL)     store(n,STORP,j - 1,wptr[4]);    bet[j]=rnm;    if (0 == bet[j]) {      rnm=startv(A,wptr,j,n);      if (0 != ierr)       return j;      if (0 == rnm)       refEnough[0]=true;    }    if (refEnough[0]) {      mid=wptr[2];      wptr[2]=wptr[1];      wptr[1]=mid;      break;    }    t=1.0 / rnm;    svd_datx(n,t,wptr[0],1,wptr[1],1);    svd_dscal(n,t,wptr[3],1);    svd_opb(A,wptr[3],wptr[0],OPBTemp);    svd_daxpy(n,-rnm,wptr[2],1,wptr[0],1);    alf[j]=svd_ddot(n,wptr[0],1,wptr[3],1);    svd_daxpy(n,-alf[j],wptr[1],1,wptr[0],1);    if (j <= MAXLL && (Math.abs(alf[j - 1]) > 4.0 * Math.abs(alf[j])))     ll[0]=j;    for (i=0; i < svd_imin(ll[0],j - 1); i++) {      store(n,RETRP,i,wptr[5]);      t=svd_ddot(n,wptr[5],1,wptr[0],1);      store(n,RETRQ,i,wptr[5]);      svd_daxpy(n,-t,wptr[5],1,wptr[0],1);      eta[i]=eps1;      oldeta[i]=eps1;    }    t=svd_ddot(n,wptr[0],1,wptr[4],1);    svd_daxpy(n,-t,wptr[2],1,wptr[0],1);    if (bet[j] > 0.0)     bet[j]=bet[j] + t;    t=svd_ddot(n,wptr[0],1,wptr[3],1);    svd_daxpy(n,-t,wptr[1],1,wptr[0],1);    alf[j]=alf[j] + t;    svd_dcopy(n,wptr[0],1,wptr[4],1);    rnm=Math.sqrt(svd_ddot(n,wptr[0],1,wptr[4],1));    anorm=bet[j] + Math.abs(alf[j]) + rnm;    tol=reps * anorm;    ortbnd(alf,eta,oldeta,bet,j,rnm);    double[] ref_rnm=new double[]{rnm};    purge(n,ll[0],wptr[0],wptr[1],wptr[4],wptr[3],wptr[5],eta,oldeta,j,ref_rnm,tol);    rnm=ref_rnm[0];    if (rnm <= tol)     rnm=0.0;  }  rnmp[0]=rnm;  tolp[0]=tol;  return j;}  }
class C{  @LargeTest public void testCameraPairwiseScenario08() throws Exception {  genericPairwiseTestCase(Flash.ON,Exposure.MIN,WhiteBalance.AUTO,SceneMode.ACTION,PictureSize.MEDIUM,Geotagging.OFF);}  }
class C{  public GraphEvent(Object source,String graphString,String graphTitle,int graphType){  super(source);  m_graphString=graphString;  m_graphTitle=graphTitle;  m_graphType=graphType;}  }
class C{  public boolean isLicenseNodesUsageLegal(int actualServers){  if (actualServers == 0) {    return true;  }  if (isExpired()) {switch (getLicenseType()) {case EVALUATION_PRODUCT_KEY:      return false;case PRODUCT_KEY:default :  }}return true;}  }
class C{  public XBeeAddress16(int msb,int lsb){  this.doubleByte.setMsb(msb);  this.doubleByte.setLsb(lsb);}  }
class C{  private void proceedHandshakeWithPluggableAuthentication(String user,String password,String database,Buffer challenge) throws SQLException {  if (this.authenticationPlugins == null) {    loadAuthenticationPlugins();  }  boolean skipPassword=false;  int passwordLength=16;  int userLength=(user != null) ? user.length() : 0;  int databaseLength=(database != null) ? database.length() : 0;  int packLength=((userLength + passwordLength + databaseLength) * 3) + 7 + HEADER_LENGTH+ AUTH_411_OVERHEAD;  AuthenticationPlugin plugin=null;  Buffer fromServer=null;  ArrayList<Buffer> toServer=new ArrayList<Buffer>();  boolean done=false;  Buffer last_sent=null;  boolean old_raw_challenge=false;  int counter=100;  while (0 < counter--) {    if (!done) {      if (challenge != null) {        if (challenge.isOKPacket()) {          throw SQLError.createSQLException(Messages.getString("Connection.UnexpectedAuthenticationApproval",new Object[]{plugin.getProtocolPluginName()}),getExceptionInterceptor());        }        this.clientParam|=CLIENT_PLUGIN_AUTH | CLIENT_LONG_PASSWORD | CLIENT_PROTOCOL_41| CLIENT_TRANSACTIONS| CLIENT_MULTI_RESULTS| CLIENT_SECURE_CONNECTION;        if (this.connection.getAllowMultiQueries()) {          this.clientParam|=CLIENT_MULTI_STATEMENTS;        }        if (((this.serverCapabilities & CLIENT_CAN_HANDLE_EXPIRED_PASSWORD) != 0) && !this.connection.getDisconnectOnExpiredPasswords()) {          this.clientParam|=CLIENT_CAN_HANDLE_EXPIRED_PASSWORD;        }        if (((this.serverCapabilities & CLIENT_CONNECT_ATTRS) != 0) && !NONE.equals(this.connection.getConnectionAttributes())) {          this.clientParam|=CLIENT_CONNECT_ATTRS;        }        if ((this.serverCapabilities & CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA) != 0) {          this.clientParam|=CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA;        }        this.has41NewNewProt=true;        this.use41Extensions=true;        if (this.connection.getUseSSL()) {          negotiateSSLConnection(user,password,database,packLength);        }        String pluginName=null;        if ((this.serverCapabilities & CLIENT_PLUGIN_AUTH) != 0) {          if (!versionMeetsMinimum(5,5,10) || versionMeetsMinimum(5,6,0) && !versionMeetsMinimum(5,6,2)) {            pluginName=challenge.readString("ASCII",getExceptionInterceptor(),this.authPluginDataLength);          } else {            pluginName=challenge.readString("ASCII",getExceptionInterceptor());          }        }        plugin=getAuthenticationPlugin(pluginName);        if (plugin == null) {          plugin=getAuthenticationPlugin(this.clientDefaultAuthenticationPluginName);        } else         if (pluginName.equals(Sha256PasswordPlugin.PLUGIN_NAME) && !isSSLEstablished() && this.connection.getServerRSAPublicKeyFile() == null && !this.connection.getAllowPublicKeyRetrieval()) {          plugin=getAuthenticationPlugin(this.clientDefaultAuthenticationPluginName);          skipPassword=!this.clientDefaultAuthenticationPluginName.equals(pluginName);        }        this.serverDefaultAuthenticationPluginName=plugin.getProtocolPluginName();        checkConfidentiality(plugin);        fromServer=new Buffer(StringUtils.getBytes(this.seed));      } else {        plugin=getAuthenticationPlugin(this.serverDefaultAuthenticationPluginName == null ? this.clientDefaultAuthenticationPluginName : this.serverDefaultAuthenticationPluginName);        checkConfidentiality(plugin);        fromServer=new Buffer(StringUtils.getBytes(this.seed));      }    } else {      challenge=checkErrorPacket();      old_raw_challenge=false;      this.packetSequence++;      this.compressedPacketSequence++;      if (plugin == null) {        plugin=getAuthenticationPlugin(this.serverDefaultAuthenticationPluginName != null ? this.serverDefaultAuthenticationPluginName : this.clientDefaultAuthenticationPluginName);      }      if (challenge.isOKPacket()) {        plugin.destroy();        break;      } else       if (challenge.isAuthMethodSwitchRequestPacket()) {        skipPassword=false;        String pluginName=challenge.readString("ASCII",getExceptionInterceptor());        if (!plugin.getProtocolPluginName().equals(pluginName)) {          plugin.destroy();          plugin=getAuthenticationPlugin(pluginName);          if (plugin == null) {            throw SQLError.createSQLException(Messages.getString("Connection.BadAuthenticationPlugin",new Object[]{pluginName}),getExceptionInterceptor());          }        }        checkConfidentiality(plugin);        fromServer=new Buffer(StringUtils.getBytes(challenge.readString("ASCII",getExceptionInterceptor())));      } else {        if (versionMeetsMinimum(5,5,16)) {          fromServer=new Buffer(challenge.getBytes(challenge.getPosition(),challenge.getBufLength() - challenge.getPosition()));        } else {          old_raw_challenge=true;          fromServer=new Buffer(challenge.getBytes(challenge.getPosition() - 1,challenge.getBufLength() - challenge.getPosition() + 1));        }      }    }    try {      plugin.setAuthenticationParameters(user,skipPassword ? null : password);      done=plugin.nextAuthenticationStep(fromServer,toServer);    } catch (    SQLException e) {      throw SQLError.createSQLException(e.getMessage(),e.getSQLState(),e,getExceptionInterceptor());    }    if (toServer.size() > 0) {      if (challenge == null) {        String enc=getEncodingForHandshake();        last_sent=new Buffer(packLength + 1);        last_sent.writeByte((byte)MysqlDefs.COM_CHANGE_USER);        last_sent.writeString(user,enc,this.connection);        if (toServer.get(0).getBufLength() < 256) {          last_sent.writeByte((byte)toServer.get(0).getBufLength());          last_sent.writeBytesNoNull(toServer.get(0).getByteBuffer(),0,toServer.get(0).getBufLength());        } else {          last_sent.writeByte((byte)0);        }        if (this.useConnectWithDb) {          last_sent.writeString(database,enc,this.connection);        } else {          last_sent.writeByte((byte)0);        }        appendCharsetByteForHandshake(last_sent,enc);        last_sent.writeByte((byte)0);        if ((this.serverCapabilities & CLIENT_PLUGIN_AUTH) != 0) {          last_sent.writeString(plugin.getProtocolPluginName(),enc,this.connection);        }        if ((this.clientParam & CLIENT_CONNECT_ATTRS) != 0) {          sendConnectionAttributes(last_sent,enc,this.connection);          last_sent.writeByte((byte)0);        }        send(last_sent,last_sent.getPosition());      } else       if (challenge.isAuthMethodSwitchRequestPacket()) {        last_sent=new Buffer(toServer.get(0).getBufLength() + HEADER_LENGTH);        last_sent.writeBytesNoNull(toServer.get(0).getByteBuffer(),0,toServer.get(0).getBufLength());        send(last_sent,last_sent.getPosition());      } else       if (challenge.isRawPacket() || old_raw_challenge) {        for (        Buffer buffer : toServer) {          last_sent=new Buffer(buffer.getBufLength() + HEADER_LENGTH);          last_sent.writeBytesNoNull(buffer.getByteBuffer(),0,toServer.get(0).getBufLength());          send(last_sent,last_sent.getPosition());        }      } else {        String enc=getEncodingForHandshake();        last_sent=new Buffer(packLength);        last_sent.writeLong(this.clientParam);        last_sent.writeLong(this.maxThreeBytes);        appendCharsetByteForHandshake(last_sent,enc);        last_sent.writeBytesNoNull(new byte[23]);        last_sent.writeString(user,enc,this.connection);        if ((this.serverCapabilities & CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA) != 0) {          last_sent.writeLenBytes(toServer.get(0).getBytes(toServer.get(0).getBufLength()));        } else {          last_sent.writeByte((byte)toServer.get(0).getBufLength());          last_sent.writeBytesNoNull(toServer.get(0).getByteBuffer(),0,toServer.get(0).getBufLength());        }        if (this.useConnectWithDb) {          last_sent.writeString(database,enc,this.connection);        } else {          last_sent.writeByte((byte)0);        }        if ((this.serverCapabilities & CLIENT_PLUGIN_AUTH) != 0) {          last_sent.writeString(plugin.getProtocolPluginName(),enc,this.connection);        }        if (((this.clientParam & CLIENT_CONNECT_ATTRS) != 0)) {          sendConnectionAttributes(last_sent,enc,this.connection);        }        send(last_sent,last_sent.getPosition());      }    }  }  if (counter == 0) {    throw SQLError.createSQLException(Messages.getString("CommunicationsException.TooManyAuthenticationPluginNegotiations"),getExceptionInterceptor());  }  if (((this.serverCapabilities & CLIENT_COMPRESS) != 0) && this.connection.getUseCompression() && !(this.mysqlInput instanceof CompressedInputStream)) {    this.deflater=new Deflater();    this.useCompression=true;    this.mysqlInput=new CompressedInputStream(this.connection,this.mysqlInput);  }  if (!this.useConnectWithDb) {    changeDatabaseTo(database);  }  try {    this.mysqlConnection=this.socketFactory.afterHandshake();  } catch (  IOException ioEx) {    throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,ioEx,getExceptionInterceptor());  }}  }
class C{  public SText(){  super(GraphicType.GT_Text,RenderType.RT_Unknown,LineType.LT_Unknown,DeclutterType.DC_None);  ll1_=new LLPoint(0f,0f);  p1_=new XYPoint((short)0,(short)0);  data_="";  realFont_=new java.awt.Font("Helvetica",java.awt.Font.PLAIN,10);  justify_=0;}  }
class C{  public void addAllowed(Class<?> c,String displayName){  HashSet<String> list;  list=m_Allowed.get(c);  if (list == null) {    list=new HashSet<String>();    m_Allowed.put(c,list);  }  list.add(displayName);}  }
class C{  public void testBug10310() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  CallableStatement cStmt=null;  try {    this.stmt.executeUpdate("DROP FUNCTION IF EXISTS testBug10310");    this.stmt.executeUpdate("CREATE FUNCTION testBug10310(a float, b bigint, c int) RETURNS INT NO SQL\nBEGIN\nRETURN a;\nEND");    cStmt=this.conn.prepareCall("{? = CALL testBug10310(?,?,?)}");    cStmt.registerOutParameter(1,Types.INTEGER);    cStmt.setFloat(2,2);    cStmt.setInt(3,1);    cStmt.setInt(4,1);    assertEquals(4,cStmt.getParameterMetaData().getParameterCount());    assertEquals(Types.INTEGER,cStmt.getParameterMetaData().getParameterType(1));    java.sql.DatabaseMetaData dbmd=this.conn.getMetaData();    this.rs=((com.mysql.jdbc.DatabaseMetaData)dbmd).getFunctionColumns(this.conn.getCatalog(),null,"testBug10310","%");    ResultSetMetaData rsmd=this.rs.getMetaData();    assertEquals(17,rsmd.getColumnCount());    assertEquals("FUNCTION_CAT",rsmd.getColumnName(1));    assertEquals("FUNCTION_SCHEM",rsmd.getColumnName(2));    assertEquals("FUNCTION_NAME",rsmd.getColumnName(3));    assertEquals("COLUMN_NAME",rsmd.getColumnName(4));    assertEquals("COLUMN_TYPE",rsmd.getColumnName(5));    assertEquals("DATA_TYPE",rsmd.getColumnName(6));    assertEquals("TYPE_NAME",rsmd.getColumnName(7));    assertEquals("PRECISION",rsmd.getColumnName(8));    assertEquals("LENGTH",rsmd.getColumnName(9));    assertEquals("SCALE",rsmd.getColumnName(10));    assertEquals("RADIX",rsmd.getColumnName(11));    assertEquals("NULLABLE",rsmd.getColumnName(12));    assertEquals("REMARKS",rsmd.getColumnName(13));    assertEquals("CHAR_OCTET_LENGTH",rsmd.getColumnName(14));    assertEquals("ORDINAL_POSITION",rsmd.getColumnName(15));    assertEquals("IS_NULLABLE",rsmd.getColumnName(16));    assertEquals("SPECIFIC_NAME",rsmd.getColumnName(17));    this.rs.close();    assertFalse(cStmt.execute());    assertEquals(2f,cStmt.getInt(1),.001);    assertEquals("java.lang.Integer",cStmt.getObject(1).getClass().getName());    assertEquals(-1,cStmt.executeUpdate());    assertEquals(2f,cStmt.getInt(1),.001);    assertEquals("java.lang.Integer",cStmt.getObject(1).getClass().getName());    cStmt.setFloat("a",4);    cStmt.setInt("b",1);    cStmt.setInt("c",1);    assertFalse(cStmt.execute());    assertEquals(4f,cStmt.getInt(1),.001);    assertEquals("java.lang.Integer",cStmt.getObject(1).getClass().getName());    assertEquals(-1,cStmt.executeUpdate());    assertEquals(4f,cStmt.getInt(1),.001);    assertEquals("java.lang.Integer",cStmt.getObject(1).getClass().getName());    this.rs=dbmd.getProcedures(this.conn.getCatalog(),null,"testBug10310");    this.rs.next();    assertEquals("testBug10310",this.rs.getString("PROCEDURE_NAME"));    assertEquals(java.sql.DatabaseMetaData.procedureReturnsResult,this.rs.getShort("PROCEDURE_TYPE"));    cStmt.setNull(2,Types.FLOAT);    cStmt.setInt(3,1);    cStmt.setInt(4,1);    assertFalse(cStmt.execute());    assertEquals(0f,cStmt.getInt(1),.001);    assertEquals(true,cStmt.wasNull());    assertEquals(null,cStmt.getObject(1));    assertEquals(true,cStmt.wasNull());    assertEquals(-1,cStmt.executeUpdate());    assertEquals(0f,cStmt.getInt(1),.001);    assertEquals(true,cStmt.wasNull());    assertEquals(null,cStmt.getObject(1));    assertEquals(true,cStmt.wasNull());    cStmt=this.conn.prepareCall("{? = CALL testBug10310(4,5,?)}");    cStmt.registerOutParameter(1,Types.INTEGER);    cStmt.setInt(2,1);    assertFalse(cStmt.execute());    assertEquals(4f,cStmt.getInt(1),.001);    assertEquals("java.lang.Integer",cStmt.getObject(1).getClass().getName());    assertEquals(-1,cStmt.executeUpdate());    assertEquals(4f,cStmt.getInt(1),.001);    assertEquals("java.lang.Integer",cStmt.getObject(1).getClass().getName());    assertEquals(2,cStmt.getParameterMetaData().getParameterCount());    assertEquals(Types.INTEGER,cStmt.getParameterMetaData().getParameterType(1));    assertEquals(Types.INTEGER,cStmt.getParameterMetaData().getParameterType(2));  }  finally {    if (this.rs != null) {      this.rs.close();      this.rs=null;    }    if (cStmt != null) {      cStmt.close();    }    this.stmt.executeUpdate("DROP FUNCTION IF EXISTS testBug10310");  }}  }
class C{  protected static ModbusResponse readRequest(int functionCode,int register,int count){  ModbusUDPTransaction trans;  UDPMasterConnection connection=null;  try {    connection=new UDPMasterConnection(InetAddress.getByName(TestUtils.getFirstIp4Address()));    connection.setPort(PORT);    connection.connect();    connection.setTimeout(500);    ModbusRequest req=null;switch (functionCode) {case Modbus.READ_COILS:      req=new ReadCoilsRequest(register,count);    break;case Modbus.READ_INPUT_DISCRETES:  req=new ReadInputDiscretesRequest(register,count);break;case Modbus.READ_INPUT_REGISTERS:req=new ReadInputRegistersRequest(register,count);break;case Modbus.READ_HOLDING_REGISTERS:req=new ReadMultipleRegistersRequest(register,count);break;default :fail(String.format("Request type %d is not supported by the test harness",functionCode));}req.setUnitID(UNIT_ID);trans=new ModbusUDPTransaction(connection);trans.setRequest(req);trans.execute();return trans.getResponse();} catch (Exception e) {logger.debug(e.getMessage());} finally {if (connection != null) {connection.close();}}return null;}  }
class C{  @Override public boolean decreaseKey(E value,double cost){  int index=indices[this.getIndex(value)];  if (index < 0) {    return this.add(value,cost);  }  double oldCost=costs[index];  if (oldCost < cost)   return false;  siftUp(index,value,cost);  return true;}  }
class C{  public static ReuseResult loadReuse(String fileName,Bitmap dest) throws ImageLoadException {  return loadBitmapReuse(new FileSource(fileName),dest);}  }
class C{  private GridDeploymentFolderScannerHelper(){}  }
class C{  public void addActionListener(ActionListener listener){  m_text.addActionListener(listener);}  }
class C{  public static HashMap<CellIndex,Double> readDMLScalarFromHDFS(String filePath){  HashMap<CellIndex,Double> expectedValues=new HashMap<CellIndex,Double>();  expectedValues.put(new CellIndex(1,1),readDMLScalar(filePath));  return expectedValues;}  }
class C{  private Alphabet(int radix){  this.R=radix;  alphabet=new char[R];  inverse=new int[R];  for (int i=0; i < R; i++)   alphabet[i]=(char)i;  for (int i=0; i < R; i++)   inverse[i]=i;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public FuzzyConditionBuilder transpositions(Boolean transpositions){  this.transpositions=transpositions;  return this;}  }
class C{  public void addForeignKey(ForeignKey foreignKey){  if (foreignKey != null) {    foreignKeys.add(foreignKey);  }}  }
class C{  public CredentialExpiredException(String msg){  super(msg);}  }
class C{  public static void createAllTables(Database db,boolean ifNotExists){  SimpleEntityDao.createTable(db,ifNotExists);  SimpleEntityNotNullDao.createTable(db,ifNotExists);}  }
class C{  protected final ArrayList<String> export(){  Log.d(TAG,"Start wifi export. Data source: " + WIFI_SQL_QUERY);  final LogFile headerRecord=mDataHelper.loadLogFileBySession(mSession);  final DatabaseHelper mDbHelper=new DatabaseHelper(mContext.getApplicationContext());  final ArrayList<String> generatedFiles=new ArrayList<>();  Cursor cursorWifis=mDbHelper.getReadableDatabase().rawQuery(WIFI_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(0)});  colBssid=cursorWifis.getColumnIndex(Schema.COL_BSSID);  colSsid=cursorWifis.getColumnIndex(Schema.COL_SSID);  colMd5Essid=cursorWifis.getColumnIndex(Schema.COL_MD5_SSID);  colCapa=cursorWifis.getColumnIndex(Schema.COL_CAPABILITIES);  colFreq=cursorWifis.getColumnIndex(Schema.COL_FREQUENCY);  colLevel=cursorWifis.getColumnIndex(Schema.COL_LEVEL);  colTimestamp=cursorWifis.getColumnIndex(Schema.COL_TIMESTAMP);  colBeginPosId=cursorWifis.getColumnIndex(Schema.COL_BEGIN_POSITION_ID);  colEndPosId=cursorWifis.getColumnIndex(Schema.COL_END_POSITION_ID);  colReqLat=cursorWifis.getColumnIndex("req_" + Schema.COL_LATITUDE);  colReqTimestamp=cursorWifis.getColumnIndex("req_" + Schema.COL_TIMESTAMP);  colReqLon=cursorWifis.getColumnIndex("req_" + Schema.COL_LONGITUDE);  colReqAlt=cursorWifis.getColumnIndex("req_" + Schema.COL_ALTITUDE);  colReqHead=cursorWifis.getColumnIndex("req_" + Schema.COL_BEARING);  colReqSpeed=cursorWifis.getColumnIndex("req_" + Schema.COL_SPEED);  colReqAcc=cursorWifis.getColumnIndex("req_" + Schema.COL_ACCURACY);  colLastLat=cursorWifis.getColumnIndex("last_" + Schema.COL_LATITUDE);  colLastTimestamp=cursorWifis.getColumnIndex("last_" + Schema.COL_TIMESTAMP);  colLastLon=cursorWifis.getColumnIndex("last_" + Schema.COL_LONGITUDE);  colLastAlt=cursorWifis.getColumnIndex("last_" + Schema.COL_ALTITUDE);  colLastHead=cursorWifis.getColumnIndex("last_" + Schema.COL_BEARING);  colLastSpeed=cursorWifis.getColumnIndex("last_" + Schema.COL_SPEED);  colLastAcc=cursorWifis.getColumnIndex("last_" + Schema.COL_ACCURACY);  final long startTime=System.currentTimeMillis();  long outer=0;  while (!cursorWifis.isAfterLast()) {    long i=0;    while (!cursorWifis.isAfterLast()) {      Log.i(TAG,"Cycle " + i);      final long fileTimeStamp=determineFileTimestamp(cursorWifis);      final String filename=mTempPath + generateFilename(fileTimeStamp);      saveAndMoveCursor(filename,headerRecord,cursorWifis);      i+=WIFIS_PER_FILE;      generatedFiles.add(filename);    }    outer+=CURSOR_SIZE;    cursorWifis.close();    cursorWifis=mDbHelper.getReadableDatabase().rawQuery(WIFI_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(outer)});  }  final long difference=System.currentTimeMillis() - startTime;  Log.i(TAG,"Serialize wifi took " + difference + " ms");  cursorWifis.close();  cursorWifis=null;  mDbHelper.close();  return generatedFiles;}  }
class C{  public final boolean contains(Point point){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  return this.screenRect.contains(point);}  }
class C{  private boolean isLastItem(int itemPosition,int childCount){  return itemPosition == childCount - 1;}  }
class C{  private void printUC(int c){  if (c > 255) {    out.print("\\u");    if (c < 0x1000)     out.print("0");    out.print(Integer.toHexString(c));  } else {    out.print("\\");    out.print(Integer.toOctalString(c));  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public SnapshotSchema(String schemaJSON){  setSchema(schemaJSON);  try {    initialize();  } catch (  Exception ex) {    DTThrowable.rethrow(ex);  }}  }
class C{  public ChemicalPairInput swap(){  return new ChemicalPairInput(rightGas,leftGas);}  }
class C{  public void endTessellation(){  GLU.gluTessCallback(this.tess,GLU.GLU_TESS_BEGIN,null);  GLU.gluTessCallback(this.tess,GLU.GLU_TESS_VERTEX,null);  GLU.gluTessCallback(this.tess,GLU.GLU_TESS_END,null);  GLU.gluTessCallback(this.tess,GLU.GLU_TESS_COMBINE,null);  this.tess=null;}  }
class C{  public static <T extends Annotation>List<T> filterToTopLevelAnnotations(final Collection<T> annotations){  final List<T> topLevel=new LinkedList<>();  for (  final T a : annotations) {    boolean covered=false;    for (    final T b : annotations) {      if (!a.equals(b) && b.getBegin() <= a.getBegin() && a.getEnd() <= b.getEnd()) {        covered=true;        break;      }    }    if (!covered) {      topLevel.add(a);    }  }  return topLevel;}  }
class C{  public SampleAnalyzer(Map<String,AnalyzerTask> tasks,Collection<PiEstimator> estimators,String rootDirectory){  this.tasks=tasks;  this.rootDirectory=rootDirectory;  this.estimators=estimators;}  }
class C{  public ContainerOverflowException(String message){  super(message);}  }
class C{  public boolean isFirstUploadRepeat() throws IllegalAccessException {  return mFirstUploadRepeat.getBoolean(mRepeatWrapper);}  }
class C{  @Inject DefaultAnnotationService(TSDBService tsdbService,MonitorService monitorService,SystemConfiguration config){  super(config);  requireArgument(tsdbService != null,"The TSDB service cannot be null.");  _tsdbService=tsdbService;  _monitorService=monitorService;}  }
class C{  public void testCountOrderBySql(){  final String expected="SELECT COUNT(*) FROM MockModel WHERE intField <> ? GROUP BY intField";  String actual=new Select().from(MockModel.class).where("intField <> ?",0).orderBy("intField").groupBy("intField").toCountSql();  assertEquals(expected,actual);}  }
class C{  public String buildActivitiIdString(String namespaceCd,String jobName){  Map<String,String> pathToTokenValueMap=new HashMap<>();  pathToTokenValueMap.put(getNamespaceToken(),namespaceCd);  pathToTokenValueMap.put(getJobNameToken(),jobName);  String activitiId=getActivitiJobDefinitionTemplate();  for (  Map.Entry<String,String> mapEntry : pathToTokenValueMap.entrySet()) {    activitiId=activitiId.replaceAll(mapEntry.getKey(),mapEntry.getValue());  }  return activitiId;}  }
class C{  public static CommonTransitions createSlideFadeTitle(boolean forward,int duration){  CommonTransitions c=new CommonTransitions(TYPE_SLIDE_AND_FADE);  c.forward=forward;  c.speed=duration;  return c;}  }
class C{  @Nullable public static PsiClass findPsiClassByJVMName(@NotNull PsiManager manager,@NotNull String jvmClassName){  return findPsiClass(manager,jvmClassName.replace('/','.'),null,true);}  }
class C{  public void addEvent(RPEvent event){  entity.addEvent(event);  entity.notifyWorldAboutChanges();}  }
class C{  public void draw(Canvas canvas){  for (int i=0; i < mHolders.size(); ++i) {    Drawable drawable=get(i).getTopLevelDrawable();    if (drawable != null) {      drawable.draw(canvas);    }  }}  }
class C{  public XRTreeFrag(Expression expr){  super(expr);}  }
class C{  @Override public StringBuffer format(double value,StringBuffer buffer,FieldPosition field){  for (int i=choiceLimits.length - 1; i >= 0; i--) {    if (choiceLimits[i] <= value) {      return buffer.append(choiceFormats[i]);    }  }  return choiceFormats.length == 0 ? buffer : buffer.append(choiceFormats[0]);}  }
class C{  public void assertEqual(double expected,double actual,double maxRelativeError,String errorMessage){  TestUtils.assertEqual(expected,actual,maxRelativeError,errorMessage);}  }
class C{  public Boolean isSsd(){  return ssd;}  }
class C{  void doSomeSweeping(boolean tryHarder){  int probes=tryHarder ? LONG_SWEEP_PROBES : SHORT_SWEEP_PROBES;  Node o, p;  final Node sweeper=this.sweeper;  boolean passedGo;  if (sweeper == null) {    o=null;    p=head;    passedGo=true;  } else {    o=sweeper;    p=o.next;    passedGo=false;  }  for (; probes > 0; probes--) {    if (p == null) {      if (passedGo)       break;      o=null;      p=head;      passedGo=true;    }    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.isDetached()) {      probes=LONG_SWEEP_PROBES;      p.clear();      p.next=null;      if (o == null) {        head=next;        if (next == null) {          itrs=null;          return;        }      } else       o.next=next;    } else {      o=p;    }    p=next;  }  this.sweeper=(p == null) ? null : o;}  }
class C{  public void downloadConfigDir(String configName,Path dir) throws IOException {  zkClient.downloadFromZK(CONFIGS_ZKNODE + "/" + configName,dir);}  }
class C{  public HttpConnection(final String proxyHost,final int proxyPort,final String host,final int port){  this(proxyHost,proxyPort,host,null,port,Protocol.getProtocol("http"));}  }
class C{  public UnsignedLong dec(){  return valueOf(getValue() - 1);}  }
class C{  protected void readBytes(final byte[] buffer,final int position) throws AuthenticationException {  if (messageContents.length < position + buffer.length)   throw new AuthenticationException("NTLM: Message too short");  System.arraycopy(messageContents,position,buffer,0,buffer.length);}  }
class C{  private byte[] decodePEM(InputStream inStream,byte[] boundary_suffix) throws IOException {  int ch;  for (int i=1; i < PEM_BEGIN.length; ++i) {    if (PEM_BEGIN[i] != (ch=inStream.read())) {      throw new IOException("Incorrect PEM encoding: '-----BEGIN" + ((boundary_suffix == null) ? "" : new String(boundary_suffix)) + "' is expected as opening delimiter boundary.");    }  }  if (boundary_suffix == null) {    while ((ch=inStream.read()) != '\n') {      if (ch == -1) {        throw new IOException("Incorrect PEM encoding: EOF before content");      }    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw new IOException("Incorrect PEM encoding: '-----BEGIN" + new String(boundary_suffix) + "' is expected as opening delimiter boundary.");      }    }    if ((ch=inStream.read()) == '\r') {      ch=inStream.read();    }    if (ch != '\n') {      throw new IOException("Incorrect PEM encoding: newline expected after " + "opening delimiter boundary");    }  }  int size=1024;  byte[] buff=new byte[size];  int index=0;  while ((ch=inStream.read()) != '-') {    if (ch == -1) {      throw new IOException("Incorrect Base64 encoding: EOF without closing delimiter");    }    buff[index++]=(byte)ch;    if (index == size) {      byte[] newbuff=new byte[size + 1024];      System.arraycopy(buff,0,newbuff,0,size);      buff=newbuff;      size+=1024;    }  }  if (buff[index - 1] != '\n') {    throw new IOException("Incorrect Base64 encoding: newline expected before " + "closing boundary delimiter");  }  for (int i=1; i < PEM_END.length; ++i) {    if (PEM_END[i] != inStream.read()) {      throw badEnd(boundary_suffix);    }  }  if (boundary_suffix == null) {    while (((ch=inStream.read()) != -1) && (ch != '\n') && (ch != '\r')) {    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw badEnd(boundary_suffix);      }    }  }  inStream.mark(1);  while (((ch=inStream.read()) != -1) && (ch == '\n' || ch == '\r')) {    inStream.mark(1);  }  inStream.reset();  buff=android.util.Base64.decode(buff,index);  if (buff == null) {    throw new IOException("Incorrect Base64 encoding");  }  return buff;}  }
class C{  public E putObjectArrayList(final String key,@Nullable final ArrayList<ShareOpenGraphObject> value){  this.bundle.putParcelableArrayList(key,value);  return (E)this;}  }
class C{  public static char[] toCharArray(Float[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i].floatValue();  }  return result;}  }
class C{  public ObjectSlot[] slots(){  return slotsToSerialize;}  }
class C{  public static boolean isEmpty(@Nullable String str){  return str == null || str.isEmpty();}  }
class C{  public <U extends T>InitialMatching1<T,U,U> when(MatchesAny<U> o){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.any());  return new InitialMatching1<>(new DecomposableMatchBuilder1<U,U>(matchers,0,new IdentityFieldExtractor<>()).build(),value);}  }
class C{  public AppVersion(int major,int minor){  this(major,minor,-1,-1,null);}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  @Override public int insertJobDetail(Connection conn,JobDetail job) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeJobData(job.getJobDataMap());  int len=baos.toByteArray().length;  ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());  PreparedStatement ps=null;  int insertResult=0;  try {    ps=conn.prepareStatement(rtp(INSERT_JOB_DETAIL));    ps.setString(1,job.getKey().getName());    ps.setString(2,job.getKey().getGroup());    ps.setString(3,job.getDescription());    ps.setString(4,job.getJobClass().getName());    setBoolean(ps,5,job.isDurable());    setBoolean(ps,6,job.isConcurrentExectionDisallowed());    setBoolean(ps,7,job.isPersistJobDataAfterExecution());    setBoolean(ps,8,job.requestsRecovery());    ps.setBinaryStream(9,bais,len);    insertResult=ps.executeUpdate();  }  finally {    closeStatement(ps);  }  return insertResult;}  }
class C{  public int[] lookupSchema(String[] names,boolean mustExist,char type[],int length[],boolean strictlength) throws FormatException {  int retval[]=lookupSchema(names,mustExist);  if ((type.length == names.length) && (length.length == names.length)) {    for (int i=0; i < retval.length; i++) {      if (retval[i] != -1) {        columnInfo[retval[i]].assertSchema(type[i],length[i],strictlength);      }    }  }  return retval;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.544 -0400",hash_original_method="65A58D249D5045D8ABDCB867BA8FB7F3",hash_generated_method="B12D7A3E1B8B83FD43F7226A1BD8DABE") public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  private XML addClass(Class<?> aClass){  xmlJmapper.classes.add(Converter.toXmlClass(aClass));  return this;}  }
class C{  public TimeStampParser(String timeStamp){  super(timeStamp);}  }
class C{  public static void forceRestore(){  for (  Location loc : blocksToRestore.keySet()) {    try {      Block b=loc.getBlock();      String s=blocksToRestore.get(loc);      Material m=Material.valueOf(s.split(",")[0]);      byte d=Byte.valueOf(s.split(",")[1]);      b.setType(m);      b.setData(d);    } catch (    Exception ignored) {    }  }}  }
class C{  public CholeskyDecomposition(double[][] A){  n=A.length;  L=new double[n][n];  isspd=(A[0].length == n);  for (int j=0; j < n; j++) {    double[] Lrowj=L[j];    double d=0.0;    for (int k=0; k < j; k++) {      double[] Lrowk=L[k];      double s=0.0;      for (int i=0; i < k; i++) {        s+=Lrowk[i] * Lrowj[i];      }      Lrowj[k]=s=(A[j][k] - s) / L[k][k];      d=d + s * s;      isspd&=(A[k][j] == A[j][k]);    }    d=A[j][j] - d;    isspd&=(d > 0.0);    L[j][j]=Math.sqrt(Math.max(d,0.0));    for (int k=j + 1; k < n; k++) {      L[j][k]=0.0;    }  }}  }
class C{  public static int parseColor(String colorString){  if (TextUtils.isEmpty(colorString)) {    return TRANSPARENT;  }  if (colorString.charAt(0) == '#') {    if (colorString.length() == 7 || colorString.length() == 9) {      long color=Long.parseLong(colorString.substring(1),16);      if (colorString.length() == 7) {        color|=0x00000000ff000000;      }      return (int)color;    } else {      return TRANSPARENT;    }  } else {    Integer color=colorNameMap.get(formatKey(colorString));    if (color != null) {      return color;    }  }  return TRANSPARENT;}  }
class C{  public Comparator comparator(){  return comparator;}  }
class C{  public void reattachMirrorToDistributedVolume(String virtualVolumeName,String detachedDeviceName) throws VPlexApiException {  s_logger.info("Request to reattach mirror to distributed volume on VPLEX at {}",_baseURI);  _virtualVolumeMgr.reattachMirrorToDistributedVolume(virtualVolumeName,detachedDeviceName);}  }
class C{  public void export(Movie m,boolean compress){  Header h=new Header();  h.version=m.version;  h.compressed=compress;  h.size=m.size;  h.rate=m.framerate;  handler.header(h);  if (m.fileAttributes != null) {    if (m.metadata != null)     m.fileAttributes.hasMetadata=true;    m.fileAttributes.visit(handler);  }  if (m.enableTelemetry != null) {    m.enableTelemetry.visit(handler);  }  if (m.metadata != null) {    m.metadata.visit(handler);  }  if (m.enableDebugger != null) {    m.enableDebugger.visit(handler);  }  if (m.uuid != null) {    new DebugID(m.uuid).visit(handler);  }  if (m.protect != null) {    m.protect.visit(handler);  }  if (m.scriptLimits != null) {    m.scriptLimits.visit(handler);  }  if (m.bgcolor != null) {    m.bgcolor.visit(handler);  }  if (m.productInfo != null) {    m.productInfo.visit(handler);  }  if (m.sceneAndFrameLabelData != null) {    m.sceneAndFrameLabelData.visit(handler);  }  boolean associateRootClass=(m.topLevelClass != null);  for (Iterator i=m.frames.iterator(); i.hasNext(); ) {    Frame frame=(Frame)i.next();    if (frame.label != null) {      frame.label.visit(handler);    }    if (!frame.imports.isEmpty()) {      for (Iterator j=frame.imports.iterator(); j.hasNext(); ) {        ImportAssets importAssets=(ImportAssets)j.next();        importAssets.visit(handler);      }    }    for (Iterator j=frame.getReferences(); j.hasNext(); ) {      DefineTag ref=(DefineTag)j.next();      define(ref);    }    if (frame.hasExports()) {      ExportAssets exportAssets=new ExportAssets();      for (Iterator j=frame.exportIterator(); j.hasNext(); ) {        DefineTag tag=(DefineTag)j.next();        exportAssets.exports.add(tag);      }      exportAssets.visit(handler);    }    if (frame.hasFonts()) {      for (Iterator k=frame.fontsIterator(); k.hasNext(); ) {        DefineFont tag=(DefineFont)k.next();        if (!done.contains(tag)) {          tag.visit(handler);          done.add(tag);        }      }    }    for (Iterator j=frame.doABCs.iterator(); j.hasNext(); ) {      Tag tag=(Tag)j.next();      tag.visit(handler);    }    SymbolClass classes=new SymbolClass();    if (frame.hasSymbolClasses()) {      classes.class2tag.putAll(frame.symbolClass.class2tag);    }    if (associateRootClass) {      classes.topLevelClass=m.topLevelClass;    }    if (associateRootClass || frame.hasSymbolClasses()) {      classes.visit(handler);    }    associateRootClass=false;    for (Iterator j=frame.controlTags.iterator(); j.hasNext(); ) {      Tag tag=(Tag)j.next();      tag.visit(handler);    }    for (Iterator<ActionList> j=frame.doActions.iterator(); j.hasNext(); ) {      ActionList list=j.next();      new DoAction(list).visit(handler);    }    new ShowFrame().visit(handler);  }  handler.finish();}  }
class C{  @SkipValidation public DCBDisplayInfo prepareDisplayInfo(){  DCBDisplayInfo dcbDispInfo=new DCBDisplayInfo();  LOGGER.debug("Entered into method prepareDisplayInfo");  List<String> reasonCategoryCodes=new ArrayList<String>();  reasonCategoryCodes.add(PropertyTaxConstants.REASON_CATEGORY_CODE_TAX);  reasonCategoryCodes.add(PropertyTaxConstants.REASON_CATEGORY_CODE_PENALTY);  reasonCategoryCodes.add(PropertyTaxConstants.REASON_CATEGORY_CODE_FINES);  reasonCategoryCodes.add(PropertyTaxConstants.REASON_CATEGORY_CODE_ADVANCE);  dcbDispInfo.setReasonCategoryCodes(reasonCategoryCodes);  List<String> reasonList=new ArrayList<String>();  reasonList.addAll(ORDERED_DEMAND_RSNS_LIST);  reasonList.remove(PropertyTaxConstants.DEMANDRSN_CODE_ADVANCE);  dcbDispInfo.setReasonMasterCodes(reasonList);  LOGGER.debug("DCB Display Info : " + dcbDispInfo);  LOGGER.debug("Number of Demand Reasons : " + (reasonList != null ? reasonList.size() : ZERO));  LOGGER.debug("Exit from method prepareDisplayInfo");  return dcbDispInfo;}  }
class C{  protected CodeWriter(final ClassWriter cw,final boolean computeMaxs){  if (cw.firstMethod == null) {    cw.firstMethod=this;    cw.lastMethod=this;  } else {    cw.lastMethod.next=this;    cw.lastMethod=this;  }  this.cw=cw;  this.computeMaxs=computeMaxs;  if (computeMaxs) {    currentBlock=new Label();    currentBlock.pushed=true;    blockStack=currentBlock;  }}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.627 -0500",hash_original_method="40C6B3C0AD37CA3D6312A539EC9021CF",hash_generated_method="5A9FD878E1A9A54582C4F8A0679BB7D8") public static InetAddress hexToInet6Address(String addrHexString) throws IllegalArgumentException {  try {    return numericToInetAddress(String.format("%s:%s:%s:%s:%s:%s:%s:%s",addrHexString.substring(0,4),addrHexString.substring(4,8),addrHexString.substring(8,12),addrHexString.substring(12,16),addrHexString.substring(16,20),addrHexString.substring(20,24),addrHexString.substring(24,28),addrHexString.substring(28,32)));  } catch (  Exception e) {    Log.e("NetworkUtils","error in hexToInet6Address(" + addrHexString + "): "+ e);    throw new IllegalArgumentException(e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static CircleGem readFromNBT(NBTTagCompound nbt){  CircleGemType gem=CircleGemType.fromName(nbt.getString("gem"));  int typeOrdinal=nbt.getInteger("type");  if (CombatType.values().length > typeOrdinal) {    return new CircleGem(gem,CombatType.values()[typeOrdinal]);  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Keccak384(){}  }
class C{  public void connect(String userId){  this.pcClient.connect(userId);}  }
class C{  public static void routeClientMessage(Conflatable clientMessage){  CacheClientNotifier instance=ccnSingleton;  if (instance != null) {    instance.singletonRouteClientMessage(clientMessage,instance._clientProxies.keySet());  }}  }
class C{  private static double round(double value,int nb){  if (nb <= 0) {    return Math.floor(value + 0.5d);  }  double p=Math.pow(10,nb);  double tempval=Math.floor(value * p + 0.5d);  return tempval / p;}  }
class C{  @PropertyUpdate(properties={"buffer.minObjectExpansionRate","buffer.maxObjectExpansionRate","buffer.maxObjectExpansionRateActiveTillBufferSize","buffer.minObjectExpansionRateActiveFromBufferSize","buffer.maxObjectExpansionRateActiveFromOccupancy","buffer.minObjectExpansionRateActiveTillOccupancy"}) protected void updateObjectSecurityExpansionRate(){  this.objectSizes.setObjectSecurityExpansionRate(bufferProperties.getObjectSecurityExpansionRate(maxSize.get()));}  }
class C{  public Object clone(){  BitVector clone=(BitVector)super.clone();  if (this.bits != null)   clone.bits=(long[])this.bits.clone();  return clone;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String bitrate=getString(stack);  java.io.File folder=getFile(stack);  return Ripper.getGlobalRipper().ripFilesFromCD(folder,bitrate);}  }
class C{  void dispose(){  if (popup != null) {    popup.removeAll();  }  popup=null;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.FORMAL_PARAMETER;}  }
class C{  public static String escape(String s){  return JSONValue.escape(s);}  }
class C{  public void removeStatementEventListener(StatementEventListener listener){  statementEventListeners.remove(listener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:35.535 -0500",hash_original_method="50883A0AF140E51AB6B8450738DEEEF4",hash_generated_method="D9C635FA044851C8A967FE6476670D17") public float pose(int euler){  if (euler == EULER_X)   return mPoseEulerX; else   if (euler == EULER_Y)   return mPoseEulerY; else   if (euler == EULER_Z)   return mPoseEulerZ;  throw new IllegalArgumentException();}  }
class C{  public void testDroppedOffer(){  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>(basicExecutor,4);  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  for (int i=1; i <= 4; ++i)   assertTrue(p.offer(i,null) >= 0);  p.offer(5,null);  assertTrue(p.offer(6,null) < 0);  s1.sn.request(64);  assertTrue(p.offer(7,null) < 0);  s2.sn.request(64);  p.close();  s2.awaitComplete();  assertTrue(s2.nexts >= 4);  s1.awaitComplete();  assertTrue(s1.nexts >= 4);}  }
class C{  public boolean isValid(){  return mConverged;}  }
class C{  public static byte[] gzip(String input){  FastByteArrayOutputStream baos=new FastByteArrayOutputStream();  PGZIPOutputStream gzos=null;  try {    gzos=new PGZIPOutputStream(baos);    gzos.write(input.getBytes("UTF-8"));  } catch (  IOException e) {    MainUtil.handleError(e);  } finally {    if (gzos != null)     try {      gzos.close();    } catch (    IOException ignore) {    }  }  return baos.toByteArray();}  }
class C{  public void add(double v){  _add(numberNode(v));}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public void applyTemplates(Node node) throws Exception {  applyTemplates(node,this.modeName);}  }
class C{  public static long signExpBits(long num){  return num >> 52;}  }
class C{  @SuppressWarnings("unchecked") public static LdapResult saslBind(LdapClient clnt,Connection conn,String server,String dn,Object pw,String authMech,Hashtable<?,?> env,Control[] bindCtls) throws IOException, NamingException {  SaslClient saslClnt=null;  boolean cleanupHandler=false;  CallbackHandler cbh=(env != null) ? (CallbackHandler)env.get(SASL_CALLBACK) : null;  if (cbh == null) {    cbh=new DefaultCallbackHandler(dn,pw,(String)env.get(SASL_REALM));    cleanupHandler=true;  }  String authzId=(env != null) ? (String)env.get(SASL_AUTHZ_ID) : null;  String[] mechs=getSaslMechanismNames(authMech);  try {    saslClnt=Sasl.createSaslClient(mechs,authzId,"ldap",server,(Hashtable<String,?>)env,cbh);    if (saslClnt == null) {      throw new AuthenticationNotSupportedException(authMech);    }    LdapResult res;    String mechName=saslClnt.getMechanismName();    byte[] response=saslClnt.hasInitialResponse() ? saslClnt.evaluateChallenge(NO_BYTES) : null;    res=clnt.ldapBind(null,response,bindCtls,mechName,true);    while (!saslClnt.isComplete() && (res.status == LDAP_SASL_BIND_IN_PROGRESS || res.status == LDAP_SUCCESS)) {      response=saslClnt.evaluateChallenge(res.serverCreds != null ? res.serverCreds : NO_BYTES);      if (res.status == LDAP_SUCCESS) {        if (response != null) {          throw new AuthenticationException("SASL client generated response after success");        }        break;      }      res=clnt.ldapBind(null,response,bindCtls,mechName,true);    }    if (res.status == LDAP_SUCCESS) {      if (!saslClnt.isComplete()) {        throw new AuthenticationException("SASL authentication not complete despite server claims");      }      String qop=(String)saslClnt.getNegotiatedProperty(Sasl.QOP);      if (qop != null && (qop.equalsIgnoreCase("auth-int") || qop.equalsIgnoreCase("auth-conf"))) {        InputStream newIn=new SaslInputStream(saslClnt,conn.inStream);        OutputStream newOut=new SaslOutputStream(saslClnt,conn.outStream);        conn.replaceStreams(newIn,newOut);      } else {        saslClnt.dispose();      }    }    return res;  } catch (  SaslException e) {    NamingException ne=new AuthenticationException(authMech);    ne.setRootCause(e);    throw ne;  } finally {    if (cleanupHandler) {      ((DefaultCallbackHandler)cbh).clearPassword();    }  }}  }
class C{  public void testDefaults() throws Exception {  MockConfigurableSimilarity sim=getSimilarity("sim3text",MockConfigurableSimilarity.class);  assertEquals("is there an echo?",sim.getPassthrough());}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_wrap_ByteBuffer$ByteBuffer_03(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer[] bbAN=null;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer bN=null;  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,bN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.wrap(bbAN,bb);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.wrap(bbAN,bN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public DemoPanelBorder(){}  }
class C{  private void sendRegister(SipRequest register) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Send REGISTER, expire=" + register.getExpires() + "ms");  }  mRegistrationProcedure.writeSecurityHeader(register);  SipTransactionContext ctx=mNetworkInterface.getSipManager().sendSipMessageAndWait(register);  if (ctx.isSipResponse()) {switch (ctx.getStatusCode()) {case Response.OK:      if (register.getExpires() != 0) {        handle200OK(ctx);        Context appContext=AndroidFactory.getApplicationContext();        LauncherUtils.setRegForbiddenCount(appContext,0);      } else {        handle200OkUnregister();      }    break;case Response.MOVED_TEMPORARILY:  handle302MovedTemporarily(ctx);break;case Response.UNAUTHORIZED:handle401Unauthorized(ctx);break;case Response.FORBIDDEN:handle403Forbidden();break;case Response.INTERVAL_TOO_BRIEF:handle423IntervalTooBrief(ctx);break;case Response.NOT_FOUND:case Response.REQUEST_TIMEOUT:case Response.TEMPORARILY_UNAVAILABLE:case Response.SERVER_INTERNAL_ERROR:case Response.SERVICE_UNAVAILABLE:case Response.SERVER_TIMEOUT:case Response.BUSY_EVERYWHERE:handle4xx5xx6xxNoRetryAfterHeader(ctx);break;default :handleError(new ImsError(ImsError.REGISTRATION_FAILED,ctx.getStatusCode() + " " + ctx.getReasonPhrase()));break;}} else {handleError(new ImsError(ImsError.REGISTRATION_FAILED,"timeout"));}}  }
class C{  public AutoDeskewTransform(DataSet dataSet,boolean ignorZeros,final List<Double> lambdas){  this(ignorZeros,lambdas);  fit(dataSet);}  }
class C{  public void addSeries(Comparable key,double[] values,int bins,double minimum,double maximum){  ParamChecks.nullNotPermitted(key,"key");  ParamChecks.nullNotPermitted(values,"values");  if (bins < 1) {    throw new IllegalArgumentException("The 'bins' value must be at least 1.");  }  double binWidth=(maximum - minimum) / bins;  double lower=minimum;  double upper;  List binList=new ArrayList(bins);  for (int i=0; i < bins; i++) {    HistogramBin bin;    if (i == bins - 1) {      bin=new HistogramBin(lower,maximum);    } else {      upper=minimum + (i + 1) * binWidth;      bin=new HistogramBin(lower,upper);      lower=upper;    }    binList.add(bin);  }  for (int i=0; i < values.length; i++) {    int binIndex=bins - 1;    if (values[i] < maximum) {      double fraction=(values[i] - minimum) / (maximum - minimum);      if (fraction < 0.0) {        fraction=0.0;      }      binIndex=(int)(fraction * bins);      if (binIndex >= bins) {        binIndex=bins - 1;      }    }    HistogramBin bin=(HistogramBin)binList.get(binIndex);    bin.incrementCount();  }  Map map=new HashMap();  map.put("key",key);  map.put("bins",binList);  map.put("values.length",new Integer(values.length));  map.put("bin width",new Double(binWidth));  this.list.add(map);  fireDatasetChanged();}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  Context ctx=viewHolder.itemView.getContext();  UIUtils.setBackground(viewHolder.view,FastAdapterUIUtils.getSelectableBackground(ctx,Color.RED,true));  StringHolder.applyTo(name,viewHolder.name);  StringHolder.applyToOrHide(description,viewHolder.description);  if (isExpanded()) {    ViewCompat.setRotation(viewHolder.icon,0);  } else {    ViewCompat.setRotation(viewHolder.icon,180);  }}  }
class C{  public void createFieldEditors(){  activate=new BooleanFieldEditor(PreferenceConstants.KERBEROS_STATUS,KerberosPreferencePage_2,getFieldEditorParent());  aDServiceName=new StringFieldEditor(PreferenceConstants.VERINICEPRO_SERVICE_NAME,KerberosPreferencePage_3,getFieldEditorParent());  aDServiceName.setEnabled(initialKerberosStatus,getFieldEditorParent());  addField(activate);  addField(aDServiceName);}  }
class C{  @Override public final int hashCode(){  return this.levelA.hashCode();}  }
class C{  protected void updateAttributes(DrawContext dc){  if (dc.getFrameTimeStamp() != this.attributesFrameNumber) {    this.determineActiveAttributes();    this.indent=this.computeIndentation();    this.lineHeight=this.computeMaxTextHeight(dc);    this.attributesFrameNumber=dc.getFrameTimeStamp();  }}  }
class C{  public void tick(String group,String handle){  this.group(group).tick(handle);}  }
class C{  protected void markModelMatrixDirty(){  mIsModelMatrixDirty=true;}  }
class C{  public void addListener(final IFunctionListener listener){  m_listeners.addListener(listener);}  }
class C{  public DeviceScannerException(String msg){  super(msg);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.829 -0500",hash_original_method="6DDBFC199C19310599F0713304591847",hash_generated_method="BC1516CAD839647BACB3E3229CF46E53") private boolean isDeactivated(){  return mAddress == 0;}  }
class C{  void register(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> eventMethodsInListener=entry.getValue();    CopyOnWriteArraySet<Subscriber> eventSubscribers=subscribers.get(eventType);    if (eventSubscribers == null) {      CopyOnWriteArraySet<Subscriber> newSet=new CopyOnWriteArraySet<Subscriber>();      eventSubscribers=MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType,newSet),newSet);    }    eventSubscribers.addAll(eventMethodsInListener);  }}  }
class C{  public static void addTableExpressionReference(StatementSpecRaw statementSpec,ExprTableAccessNode tableNode){  if (statementSpec.getTableExpressions() == null) {    statementSpec.setTableExpressions(new HashSet<ExprTableAccessNode>());  }  statementSpec.getTableExpressions().add(tableNode);}  }
class C{  public static MockMultipartFile downloadAndPrepareFileToDeploy(String remoteFile,String path) throws IOException {  URL url;  File file=new File(remoteFile);  try (OutputStream outputStream=new FileOutputStream(file)){    url=new URL(path);    InputStream input=url.openStream();    int read;    byte[] bytes=new byte[1024];    while ((read=input.read(bytes)) != -1) {      outputStream.write(bytes,0,read);    }  } catch (  IOException e) {    StringBuilder msgError=new StringBuilder(512);    msgError.append(remoteFile);    msgError.append(",");    msgError.append(path);    logger.debug(msgError.toString(),e);  }  return new MockMultipartFile("file",file.getName(),"multipart/form-data",new FileInputStream(file));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.475 -0400",hash_original_method="B29C3FEEE8F91C6C1D6D318DAC8D8B15",hash_generated_method="32B4B25ACFDF8C0FBB0703964256D1AB") private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5});}  }
class C{  public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.RANGE_CONSTRAINT__LOWER_BOUND:    setLowerBound(LOWER_BOUND_EDEFAULT);  return;case TypesPackage.RANGE_CONSTRAINT__UPPER_BOUND:setUpperBound(UPPER_BOUND_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static CalculationType newInstance(){  final CalculationType returnInstance=new CalculationType();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  private StandardizeWrapper(DataWrapper data){  if (data == null) {    throw new NullPointerException("The given data must not be null");  }  DataSet dataSet=(DataSet)data.getDataModelList().get(0);  TetradMatrix matrix2D=DataUtils.standardizeData(dataSet.getDoubleData());  DataSet _dataSet=ColtDataSet.makeContinuousData(dataSet.getVariables(),matrix2D);  setDataModel(_dataSet);  setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("Standardization fo the parent data.",getDataModelList());}  }
class C{  private boolean addShorthandAttribute(String value,int shorthandAttr,CSSElement selector){  if (CSSElement.CSS_IS_SHORTHAND_ATTRIBUTE_COLLATABLE[shorthandAttr]) {    return addCollatableAttribute(value,shorthandAttr,selector);  }  for (int i=0; i < CSSElement.CSS_SHORTHAND_ATTRIBUTE_INDEX[shorthandAttr].length; i++) {    int attrIndex=CSSElement.CSS_SHORTHAND_ATTRIBUTE_INDEX[shorthandAttr][i];    if (attrIndex >= CSSElement.CSS_STYLE_ID_OFFSET) {      if (!selector.isAttributeAssigned(attrIndex)) {        int result=selector.addAttribute(attrIndex,value);        if (result == -1) {          return true;        }      }    } else {      boolean success=addShorthandAttribute(value,attrIndex,selector);      if (success) {        return true;      }    }  }  return false;}  }
class C{  public QuestionSign(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName){  getCurrentProcessor().unparsedEntityDecl(this,name,publicId,systemId,notationName);}  }
class C{  public static int stringToActionType(String str){  if (str != null) {    for (int i=1; i <= Conditional.NUM_ACTION_TYPES; i++) {      if (str.equals(getActionTypeString(i))) {        return (i);      }    }  }  log.warn("Unexpected parameter to stringToActionType(" + str + ")");  return 0;}  }
class C{  public void toggleKeyboard(@Nullable MenuItem item){  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);  imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);  if (findViewById(R.id.drawPanelSlider).getVisibility() == View.VISIBLE) {    findViewById(R.id.drawPanelSlider).setVisibility(View.GONE);  }}  }
class C{  @Override public void handlePatch(Operation patch){  setOperationHandlerInvokeTimeStat(patch);  if (!patch.hasBody()) {    patch.fail(new IllegalArgumentException("body is required"));    return;  }  patch.complete();  ComputeStatsRequest statsRequest=patch.getBody(ComputeStatsRequest.class);  GCPStatsDataHolder statsData=new GCPStatsDataHolder(patch);  statsData.statsRequest=statsRequest;  if (statsData.statsRequest.isMockRequest) {    statsData.stage=StatsCollectionStage.FINISHED;    handleStatsRequest(statsData);  } else {    statsData.stage=StatsCollectionStage.VM_DESC;    handleStatsRequest(statsData);  }}  }
class C{  public boolean isAllow_Info_BPartner(){  Object oo=get_Value(COLUMNNAME_Allow_Info_BPartner);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ColorList(int[] argbArray){  for (  int c : argbArray) {    colors.add(TColor.newARGB(c));  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Product_ID"))     p_M_Product_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @Override public List<JToolBar> createToolBars(Application app,@Nullable View v){  return Collections.emptyList();}  }
class C{  @Override public final int whichSubset(Instance instance) throws Exception {  if (instance.isMissing(m_attIndex)) {    return -1;  } else {    if (instance.attribute(m_attIndex).isNominal()) {      if ((int)m_splitPoint == (int)instance.value(m_attIndex)) {        return 0;      } else {        return 1;      }    } else     if (Utils.smOrEq(instance.value(m_attIndex),m_splitPoint)) {      return 0;    } else {      return 1;    }  }}  }
class C{  public Object highlightFieldForDoc(IndexReader reader,int docId,String content) throws IOException {  if (content.length() == 0) {    return null;  }  breakIterator.setText(content);  List<OffsetsEnum> offsetsEnums=fieldOffsetStrategy.getOffsetsEnums(reader,docId,content);  Passage[] passages;  try {    passages=highlightOffsetsEnums(offsetsEnums);  }  finally {    IOUtils.close(offsetsEnums);  }  if (passages.length == 0) {    passages=getSummaryPassagesNoHighlight(maxNoHighlightPassages == -1 ? maxPassages : maxNoHighlightPassages);  }  if (passages.length > 0) {    return passageFormatter.format(passages,content);  } else {    return null;  }}  }
class C{  @NotNull public static List<String> completeRelativePath(@NotNull String baseDir,@NotNull String shownBaseDir,@NotNull String relativePath){  List<String> result=Lists.newLinkedList();  String bashBaseDir=OSUtil.toBashCompatible(baseDir);  for (  String path : completeAbsolutePath(baseDir + File.separator + relativePath,Predicates.<File>alwaysTrue())) {    if (path.startsWith(bashBaseDir)) {      result.add(shownBaseDir + path.substring(bashBaseDir.length()));    }  }  return result;}  }
class C{  private String computeSimpleTypeName(String signature,Map<String,char[]> typeVariables){  String erasure=Signature.getTypeErasure(signature);  erasure=erasure.replaceAll("/",".");  String simpleName=Signature.getSimpleName(Signature.toString(erasure));  char[] typeVar=typeVariables.get(simpleName);  if (typeVar != null)   simpleName=String.valueOf(Signature.getSignatureSimpleName(typeVar));  return simpleName;}  }
class C{  public IntVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new int[blocksize];}  }
class C{  public static int missingNumberUsingXOR(int a[],int n){  int nXOR=0, arrayXOR=0;  for (int i=1; i <= n; i++) {    nXOR^=i;  }  for (int i=0; i < a.length; i++) {    arrayXOR^=a[i];  }  return nXOR ^ arrayXOR;}  }
class C{  public boolean isDashedLineEnabled(){  return mDashPathEffect == null ? false : true;}  }
class C{  public String classIndexTipText(){  return "Sets the class index (\"first\" and \"last\" are valid values)";}  }
class C{  private PackageType(PackageType parent,String path){  this(parent + "." + path);}  }
class C{  public DerOutputStream(int size){  super(size);}  }
class C{  public boolean isComplex(){  if (complex != null)   return complex.booleanValue();  boolean ret=isComplex(fontElement,ctx);  complex=ret ? Boolean.TRUE : Boolean.FALSE;  return ret;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__LIST_1:    return isList_1();case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__NAME_1:  return getName_1();case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__TYPE_1:return getType_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void verifyIssuesUnordered(Set<Issue> issuesToVerify,Issue[] expectedIssues){  Issue[] issuesToVerifyArray=issuesToVerify.toArray(new Issue[issuesToVerify.size()]);  assertEquals(expectedIssues.length,issuesToVerifyArray.length);  for (  Issue expected : expectedIssues) {    assertTrue("Expecting issue: " + expected,ArrayUtils.contains(issuesToVerifyArray,expected));  }}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  if (system.getFloor().equals("user")) {    state.removeNodes(state.getActionNodeIds());    state.removeNodes(state.getUtilityNodeIds());  }  if (!paused && !state.getActionNodeIds().isEmpty()) {    currentProcess=new PlannerProcess(state);  }}  }
class C{  public void done(RemoteCall call) throws RemoteException {  clientRefLog.log(Log.BRIEF,"free connection (reuse = true)");  free(call,true);  try {    call.done();  } catch (  IOException e) {  }}  }
class C{  protected void afterActivation(){}  }
class C{  public static void createMapping(JestClient client,String index,String type,Schema schema) throws IOException {  ObjectNode obj=JsonNodeFactory.instance.objectNode();  obj.set(type,inferMapping(schema));  PutMapping putMapping=new PutMapping.Builder(index,type,obj.toString()).build();  JestResult result=client.execute(putMapping);  if (!result.isSucceeded()) {    throw new ConnectException("Cannot create mapping " + obj + " -- "+ result.getErrorMessage());  }}  }
class C{  public Iterator keys(){  return this.map.keySet().iterator();}  }
class C{  public boolean checkTableExists(String datasetName,String tableName) throws IOException {  try {    bigquery.tables().get(getProjectId(),datasetName,tableName).execute();    return true;  } catch (  GoogleJsonResponseException e) {    if (e.getDetails().getCode() == 404) {      return false;    }    throw e;  }}  }
class C{  public static boolean hasSDCardMounted(){  String state=Environment.getExternalStorageState();  return state != null && state.equals(Environment.MEDIA_MOUNTED);}  }
class C{  protected void handleActivate(){  if (editingDomain.getResourceToReadOnlyMap() != null) {    editingDomain.getResourceToReadOnlyMap().clear();    setSelection(getSelection());  }  if (!removedResources.isEmpty()) {    if (handleDirtyConflict()) {      getSite().getPage().closeEditor(EipEditor.this,false);    } else {      removedResources.clear();      changedResources.clear();      savedResources.clear();    }  } else   if (!changedResources.isEmpty()) {    changedResources.removeAll(savedResources);    handleChangedResources();    changedResources.clear();    savedResources.clear();  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteComputeVirtualPool(@PathParam("id") URI id){  ArgValidator.checkUri(id);  ComputeVirtualPool cvp=_dbClient.queryObject(ComputeVirtualPool.class,id);  ArgValidator.checkEntityNotNull(cvp,id,isIdEmbeddedInURL(id));  ArgValidator.checkReference(ComputeVirtualPool.class,id,checkForDelete(cvp));  if (isComputeVirtualPoolInUse(cvp)) {    throw APIException.badRequests.cannotRemoveVCP(cvp.getLabel());  }  _dbClient.markForDeletion(cvp);  recordOperation(OperationTypeEnum.DELETE_COMPUTE_VPOOL,VPOOL_DELETED_DESCRIPTION,cvp);  return Response.ok().build();}  }
class C{  public boolean isDefaultBehavior(){  return defaultBehavior;}  }
