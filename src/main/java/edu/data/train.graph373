class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  @Inline public ObjectReference traceMarkObject(TraceLocal trace,ObjectReference object){  if (MarkCompactCollector.VERY_VERBOSE) {    Log.write("marking ");    Log.write(object);  }  if (testAndMark(object)) {    trace.processNode(object);  } else   if (!getForwardingPointer(object).isNull()) {    if (MarkCompactCollector.VERY_VERBOSE) {      Log.write(" -> ");      Log.writeln(getForwardingPointer(object));    }    return getForwardingPointer(object);  }  if (MarkCompactCollector.VERY_VERBOSE) {    Log.writeln();  }  return object;}  }
class C{  public void append(char c[]){  int maxlength=buffer.length - pos;  if (c.length < maxlength) {    System.arraycopy(c,0,buffer,pos,c.length);    pos+=c.length;  } else {    System.arraycopy(c,0,buffer,pos,maxlength);    curr.next=new Entity(buffer);    curr=curr.next;    length+=buffer.length;    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];    if (c.length > maxlength) {      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);      pos=c.length - maxlength;    } else {      pos=0;    }  }}  }
class C{  public static int createMonitoringTopicIfNotExists(String zkUrl,String topic,int replicationFactor,double partitionToBrokerRatio){  ZkUtils zkUtils=ZkUtils.apply(zkUrl,ZK_SESSION_TIMEOUT_MS,ZK_CONNECTION_TIMEOUT_MS,JaasUtils.isZkSecurityEnabled());  try {    if (AdminUtils.topicExists(zkUtils,topic)) {      LOG.info("Monitoring topic \"" + topic + "\" already exists.");      return getPartitionNumForTopic(zkUrl,topic);    }    int brokerCount=zkUtils.getAllBrokersInCluster().size();    int partitionCount=(int)Math.ceil(brokerCount * partitionToBrokerRatio);    int minIsr=Math.max(replicationFactor - 1,1);    Properties topicConfig=new Properties();    topicConfig.setProperty(KafkaConfig.MinInSyncReplicasProp(),Integer.toString(minIsr));    AdminUtils.createTopic(zkUtils,topic,partitionCount,replicationFactor,topicConfig,RackAwareMode.Enforced$.MODULE$);    LOG.info("Created monitoring topic \"" + topic + "\" with "+ partitionCount+ " partitions, min ISR of "+ minIsr+ " and replication factor of "+ replicationFactor+ ".");    return partitionCount;  }  finally {    zkUtils.close();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void removeDecorators(){  dayViewDecorators.clear();  adapter.setDecorators(dayViewDecorators);}  }
class C{  default boolean isValid(){  return true;}  }
class C{  public static void logError(String message){  logError(null,message);}  }
class C{  public Revision(Date date){  super(date);}  }
class C{  @Override public void removePropertyChangeListener(String name,PropertyChangeListener pcl){  m_bcSupport.removePropertyChangeListener(name,pcl);}  }
class C{  public void checkCoinBaseHeight(final int height) throws VerificationException {  checkArgument(height >= Block.BLOCK_HEIGHT_GENESIS);  checkState(isCoinBase());  final TransactionInput in=this.getInputs().get(0);  final ScriptBuilder builder=new ScriptBuilder();  builder.number(height);  final byte[] expected=builder.build().getProgram();  final byte[] actual=in.getScriptBytes();  if (actual.length < expected.length) {    throw new VerificationException.CoinbaseHeightMismatch("Block height mismatch in coinbase.");  }  for (int scriptIdx=0; scriptIdx < expected.length; scriptIdx++) {    if (actual[scriptIdx] != expected[scriptIdx]) {      throw new VerificationException.CoinbaseHeightMismatch("Block height mismatch in coinbase.");    }  }}  }
class C{  @Override protected void onFinished(final Player player,final boolean successful){  if (successful) {    addEvent(new SoundEvent(successSound,SOUND_RADIUS,100,SoundLayer.AMBIENT_SOUND));    notifyWorldAboutChanges();    final Item item=SingletonRepository.getEntityManager().getItem(itemName);    if (item != null) {      player.equipOrPutOnGround(item);      player.incMinedForItem(item.getName(),item.getQuantity());      SingletonRepository.getAchievementNotifier().onObtain(player);      player.sendPrivateText("You found " + Grammar.a_noun(item.getTitle()) + ".");    } else {      logger.error("could not find item: " + itemName);    }    setState(getState() - 1);    handleRespawn();  } else {    player.sendPrivateText("You didn't find anything.");  }}  }
class C{  public static String ensureNotEndingSlash(String path){  Objects.requireNonNull(path,"path must not be null");  if ("".equals(path)) {    return path;  }  final int length=path.length();  return path.charAt(length - 1) == '/' ? path.substring(0,length - 1) : path;}  }
class C{  public static void runTrialParallel(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  MultiThreadQuickSort<Integer> qs=new MultiThreadQuickSort<Integer>(ar);  qs.setPivotMethod(selector);  qs.setNumberHelperThreads(NUM_THREADS);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  public void stopAndShowBackup(){  if (DEBUG)   Log.d(TAG,"stopAndShowBackup()");  mHandler.sendEmptyMessage(MSG_CANCEL);}  }
class C{  public static double min(double a,double b){  return 0.0d;}  }
class C{  public void addImageDownloadTask(Runnable task){  if (imageDownloadExecutor == null || imageDownloadExecutor.isShutdown()) {    imageDownloadExecutor=createImageDownloadExecutor();  }  imageDownloadExecutor.execute(task);}  }
class C{  private void checkOneCombination(String cardValue,String cardComment) throws Exception {  try {    HeaderCard headerCard=new HeaderCard("CARD",cardValue,cardComment);    String cardString=headerCard.toString();    assertEquals(cardString.length(),headerCard.cardSize() * 80);    byte[] bytes=new byte[cardString.length() + 160];    Arrays.fill(bytes,(byte)' ');    System.arraycopy(AsciiFuncs.getBytes(cardString),0,bytes,0,cardString.length());    HeaderCard rereadCard=new HeaderCard(new BufferedDataInputStream(new ByteArrayInputStream(bytes)));    assertEquals(cardValue,rereadCard.getValue());    assertEquals(headerCard.getValue(),rereadCard.getValue());    assertEquals(cardComment,headerCard.getComment());    assertTrue(cardComment.startsWith(rereadCard.getComment() == null ? "" : rereadCard.getComment().replaceAll(" ","")));  } catch (  HeaderCardException e) {    assertTrue(!FitsFactory.isLongStringsEnabled() && cardValue.length() > 68);  }}  }
class C{  private void failWithThrowable(ReleaseIPTask currentState,Throwable throwable,Operation postOperation){  ReleaseIPTask patchState=buildPatch(TaskState.TaskStage.FAILED,currentState.taskState.isDirect,throwable);  patchState.requestId=currentState.requestId;  failTask(patchState,new Throwable(throwable),postOperation);}  }
class C{  @Override public void updateTimestamp(int columnIndex,Timestamp x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTimestamp(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static EnumResolver<?> constructUnsafe(Class<?> rawEnumCls,AnnotationIntrospector ai){  Class<Enum> enumCls=(Class<Enum>)rawEnumCls;  return constructFor(enumCls,ai);}  }
class C{  protected void paintDoubleBuffered(JComponent c,Image image,Graphics g,int clipX,int clipY,int clipW,int clipH){  Graphics osg=image.getGraphics();  int bw=Math.min(clipW,image.getWidth(null));  int bh=Math.min(clipH,image.getHeight(null));  int x, y, maxx, maxy;  try {    for (x=clipX, maxx=clipX + clipW; x < maxx; x+=bw) {      for (y=clipY, maxy=clipY + clipH; y < maxy; y+=bh) {        osg.translate(-x,-y);        osg.setClip(x,y,bw,bh);        if (volatileBufferType != Transparency.OPAQUE && osg instanceof Graphics2D) {          final Graphics2D g2d=(Graphics2D)osg;          final Color oldBg=g2d.getBackground();          g2d.setBackground(c.getBackground());          g2d.clearRect(x,y,bw,bh);          g2d.setBackground(oldBg);        }        c.paintToOffscreen(osg,x,y,bw,bh,maxx,maxy);        g.setClip(x,y,bw,bh);        if (volatileBufferType != Transparency.OPAQUE && g instanceof Graphics2D) {          final Graphics2D g2d=(Graphics2D)g;          final Composite oldComposite=g2d.getComposite();          g2d.setComposite(AlphaComposite.Src);          g2d.drawImage(image,x,y,c);          g2d.setComposite(oldComposite);        } else {          g.drawImage(image,x,y,c);        }        osg.translate(x,y);      }    }  }  finally {    osg.dispose();  }}  }
class C{  public static boolean isPermissionDeclined(@NonNull Fragment context,@NonNull String permission){  return ActivityCompat.checkSelfPermission(context.getContext(),permission) != PackageManager.PERMISSION_GRANTED;}  }
class C{  public static boolean checkBitLE(byte[] data,int index){  return (data[index >>> 3] & bitMask[7 & index]) != 0;}  }
class C{  public void deleteLocalComment(final IComment comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException {  try {    m_edge.deleteLocalComment(comment);  } catch (  final CouldntDeleteException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }}  }
class C{  public static void write(OutputStream out,Reader reader,boolean noBackslashEscapes) throws IOException {  out.write(QUOTE);  char[] buffer=new char[1024];  int len;  while ((len=reader.read(buffer)) >= 0) {    byte[] data=new String(buffer,0,len).getBytes("UTF-8");    writeBytesEscaped(out,data,data.length,noBackslashEscapes);  }  out.write(QUOTE);}  }
class C{  public boolean addressTypeUnique(){  return true;}  }
class C{  public boolean isChannel(String channel){  if (channel == null) {    return false;  }  return channels.get(channel) != null;}  }
class C{  @Deprecated public EntityDictionary(){  this(new ConcurrentHashMap<>());}  }
class C{  public boolean removeAccept(String acceptStr){  boolean modified=false;  for (  Accept accept : getAccepts()) {    if (acceptStr.equals(accept.getValue())) {      super.removeElement(Accept.KEY,accept);      modified=true;    }  }  return modified;}  }
class C{  public EaseOutIn(){}  }
class C{  public boolean isIn(@Nullable UserDataHolder holder){  return get(holder) != null;}  }
class C{  protected void storeState(){  storedLikelihoodKnown=likelihoodKnown;  storedLogLikelihood=logLikelihood;}  }
class C{  public boolean rowDeleted() throws SQLException {  checkState();  return rs.rowDeleted();}  }
class C{  public void onSuccess(int statusCode,byte[] binaryData){  onSuccess(binaryData);}  }
class C{  ServerHeartbeat createServer(String serverId){  int p=serverId.indexOf(':');  String address=serverId.substring(0,p);  int port=Integer.parseInt(serverId.substring(p + 1));  boolean isSSL=false;  return _heartbeatService.createServer(address,port,isSSL);}  }
class C{  protected ParamImpl(){  super();}  }
class C{  public void removeProject(String projectName){  Iterator<String> it=recentProjectsList.iterator();  while (it.hasNext()) {    if (projectName.equals(it.next())) {      it.remove();    }  }}  }
class C{  public KDTree(List<V> vecs,DistanceMetric distanceMetric){  this(vecs,distanceMetric,PivotSelection.Variance);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isStoreAttachmentsOnFileSystem) {    if (getTitle() == null || !getTitle().equals(XML)) {      setTitle(XML);    }  } else {    if (getTitle() == null || !getTitle().equals(ZIP)) {      setTitle(ZIP);    }  }  return saveLOBData();}  }
class C{  public void readDocs(Document[] docs,DocList ids) throws IOException {  readDocs(docs,ids,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.008 -0500",hash_original_method="E5A121F239BD1583646FB80C30646EA4",hash_generated_method="F3460239B7FFA29A0ADD9F93D91CE890") protected boolean jsUnload(String url,String message){  return mCallbackProxy.onJsBeforeUnload(url,message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.753 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public static Keymap newKeymap(final String key,final String displayString){  if (key == null) {    throw new IllegalArgumentException("Keymap key can't be null");  }  if (displayString == null) {    throw new IllegalArgumentException("Keymap display string can't be null");  }  if (fromKey(key) != null) {    throw new RuntimeException("Keymap with key " + key + " already exists");  }  Log.debug(Keymap.class,"Creation of new keymap " + key);  Keymap keymap=new Keymap(key,displayString);  instances.put(key,keymap);  return keymap;}  }
class C{  public static String toFilePath(URL url){  try {    String filePath=new File(URLDecoder.decode(url.getPath().replace("+","%2b"),"UTF-8")).getAbsolutePath();    if (filePath.endsWith("/")) {      return filePath.substring(0,filePath.length() - 1);    }    return filePath;  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException("Can never happen",e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean containsKey(double key){  return contains(key);}  }
class C{  public static <T>T decode(Class<T> clazz,File configuration,String artemisHome,String artemisInstance,URI artemisURIInstance) throws Exception {  JAXBContext jaxbContext=JAXBContext.newInstance("org.apache.activemq.artemis.dto");  Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();  SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);  sf.setFeature("http://apache.org/xml/features/validation/schema-full-checking",false);  InputStream xsdStream=XmlUtil.class.getClassLoader().getResourceAsStream("org.apache.activemq/dto/activemq.xsd");  StreamSource xsdSource=new StreamSource(xsdStream);  Schema schema=sf.newSchema(xsdSource);  unmarshaller.setSchema(schema);  Properties props=new Properties(System.getProperties());  if (artemisHome != null) {    props.put("artemis.home",artemisHome);  }  if (artemisInstance != null) {    props.put("artemis.instance",artemisInstance);  }  if (artemisURIInstance != null) {    props.put("artemis.URI.instance",artemisURIInstance.toString());  }  XMLStreamReader reader=factory.createXMLStreamReader(new FileInputStream(configuration));  reader=new PropertiesFilter(reader,props);  return clazz.cast(unmarshaller.unmarshal(reader));}  }
class C{  private boolean crossCheckDiagonal(int startI,int centerJ,int maxCount,int originalStateCountTotal){  int[] stateCount=getCrossCheckStateCount();  int i=0;  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i)) {    stateCount[2]++;    i++;  }  if (startI < i || centerJ < i) {    return false;  }  while (startI >= i && centerJ >= i && !image.get(centerJ - i,startI - i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (startI < i || centerJ < i || stateCount[1] > maxCount) {    return false;  }  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i++;  }  if (stateCount[0] > maxCount) {    return false;  }  int maxI=image.getHeight();  int maxJ=image.getWidth();  i=1;  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i)) {    stateCount[2]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i,startI + i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return false;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && foundPatternCross(stateCount);}  }
class C{  public FlowNetworkAdjacencyList(int numVertices,int srcIndex,int tgtIndex,Iterator<EdgeInfo> edges){  super(numVertices,srcIndex,tgtIndex);  info=VertexStructure.construct(numVertices);  while (edges.hasNext()) {    EdgeInfo ei=edges.next();    info[ei.start].addForward(ei);    info[ei.end].addBackward(ei);  }}  }
class C{  public Entry(K key,V val,Entry next){  _key=key;  _val=val;  _next=next;}  }
class C{  public void close(){  try {    this.connection.close();  } catch (  Exception e) {    System.err.println("JdbcXYDataset: swallowing exception.");  }}  }
class C{  @Override public void updateDate(String columnLabel,Date x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDate(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueDate.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public float distance(double x,double y){  Shape shape=getShape();  if (shape != null) {    return super.distance(x,y);  }  float temp, distance=Float.POSITIVE_INFINITY;  if (getNeedToRegenerate()) {    return distance;  }  float[][] xpts=xpoints;  float[][] ypts=ypoints;  float[] _x, _y;  int len=xpts.length;  for (int i=0; i < len; i++) {    _x=xpts[i];    _y=ypts[i];    if (isPolygon() && DrawUtil.inside_polygon(_x,_y,x,y))     return 0f;    temp=DrawUtil.closestPolyDistance(_x,_y,x,y,false);    if (temp < distance)     distance=temp;  }  return normalizeDistanceForLineWidth(distance);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static URI workItemToWebAccessURI(final TFSServer server,final WorkItem workItem,final int titleId,final boolean hosted){  final TSWAHyperlinkBuilder tswaBuilder=new TSWAHyperlinkBuilder(server.getConnection(),hosted);  final URI uri;  if (workItem.getID() == 0) {    final String projectURI=workItem.getProject().getURI();    final String workItemType=workItem.getType().getName();    uri=tswaBuilder.getNewWorkItemURL(projectURI,workItemType,titleId);  } else {    final int workItemID=workItem.getID();    uri=tswaBuilder.getWorkItemEditorURL(workItemID);  }  return uri;}  }
class C{  public ArrayOfDoublesUpdatableSketchBuilder(){  nomEntries_=DEFAULT_NOMINAL_ENTRIES;  resizeFactor_=DEFAULT_RESIZE_FACTOR;  numValues_=DEFAULT_NUMBER_OF_VALUES;  samplingProbability_=DEFAULT_SAMPLING_PROBABILITY;  seed_=DEFAULT_UPDATE_SEED;}  }
class C{  @NotNull static JComponent wrap(@NotNull final JComponent dataComponent,@NotNull final Collection<Runnable> closeListeners,@Nullable final JComponent actionListenerComponent,@NotNull final AnAction... customActions){  final PanelWithActions instance=new PanelWithActions();  final LayoutManager layout=new BoxLayout(instance,BoxLayout.LINE_AXIS);  instance.setLayout(layout);  final List<AnAction> actionList=new ArrayList<AnAction>(Arrays.asList(customActions));  final DefaultActionGroup toolbarActions=new DefaultActionGroup();  actionList.add(new MyCloseAction(closeListeners));  toolbarActions.addAll(actionList);  final ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.EDITOR_TOOLBAR,toolbarActions,false);  toolbar.setTargetComponent(dataComponent);  final JComponent toolbarComponent=toolbar.getComponent();  toolbarComponent.setMaximumSize(toolbarComponent.getPreferredSize());  toolbarComponent.setAlignmentY(0);  instance.add(toolbarComponent);  instance.add(dataComponent);  if (actionListenerComponent != null) {    AbstractConsoleRunnerWithHistory.registerActionShortcuts(actionList,actionListenerComponent);  }  return instance;}  }
class C{  public void removeTenantStats(String tenant){  try {    generatedTokensMap.remove(tenant);    renewedTokensMap.remove(tenant);  } catch (  Exception e) {    logger.error("Caught exception while clearing Health Statistics.",e);  }}  }
class C{  @Override public String type(){  return type;}  }
class C{  void position(int pos){  out.position(pos);}  }
class C{  public ElasticSearchTransportClient(Client client,ElasticSearchIndexRequestBuilderFactory requestBuilderFactory) throws IOException {  this.client=client;  requestBuilderFactory.createIndexRequest(client,null,null,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private String escapeString(String src,int from,int to){  if (has_escape(src,from,to) == false) {    return src.substring(from,to);  }  int len=to - from;  final StringBuilder buf=new StringBuilder(len);  for (int i=from; i < to; i++) {    char c=src.charAt(i);    if (c == '\\') {      int c2=src.charAt(i + 1);switch (c2) {case '\'':case '\"':        continue;case '\r':      if (src.charAt(i + 2) == '\n') {        i++;      }case '\n':    i++;  continue;case '\\':c='\\';++i;break;case 'u':{int thisChar=0;int y, digit;for (y=i + 2; y < i + 6 && y < to + 1; y++) {digit=Character.digit(src.charAt(y),16);if (digit == -1) break;thisChar=(thisChar << 4) + digit;}if (y != i + 6 || Character.isDefined((char)thisChar) == false) {c=src.charAt(++i);} else {c=(char)thisChar;i+=5;}break;}default :{if (PASS_ESCAPES_TO_BACKEND) {c=src.charAt(++i);break;}switch (c2) {case 'b':c='\b';++i;break;case 'f':c='\f';++i;break;case 'n':c='\n';++i;break;case 'r':c='\r';++i;break;case 't':c='\t';++i;break;case 'v':c=0xb;++i;break;case 'x':{int d1, d2;if (i + 4 > to || (d1=Character.digit(src.charAt(i + 2),16)) == -1 || (d2=Character.digit(src.charAt(i + 3),16)) == -1) {++i;c='x';} else {i+=3;c=(char)((d1 << 4) + d2);}break;}default :c=src.charAt(++i);break;}}}}buf.append(c);}return buf.toString();}  }
class C{  public static float invSqrt(float fValue){  return (float)(1.0f / Math.sqrt(fValue));}  }
class C{  private void applyJMSObjects(HashMap<String,String> filters){  StringWriter writer=new StringWriter();  PrintWriter printWriter=new PrintWriter(writer);  printWriter.println();  for (  String str : getQueueList()) {    printWriter.println("      <queue name=\"" + str + "\"/>");  }  for (  String str : getTopicList()) {    printWriter.println("      <topic name=\"" + str + "\"/>");  }  filters.put("${jms-list.settings}",writer.toString());}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (!newRecord) {    MIndex.cleanUp(get_TrxName(),getAD_Client_ID(),get_Table_ID(),get_ID());  }  reIndex(newRecord);  return success;}  }
class C{  public static int findValueCount(KeyID key,Object obj){  if (obj instanceof Integer[])   return (((Integer[])obj).length);  if (obj instanceof Short[])   return (((Short[])obj).length);  if (obj instanceof Float[])   return (((Float[])obj).length);  if (obj instanceof Double[])   return (((Double[])obj).length);  if (obj instanceof String)   return (((String)obj).length() + 1);  return (1);}  }
class C{  public boolean shouldBeCoordinator(InternalDistributedMember who){  Iterator<InternalDistributedMember> it=this.members.iterator();  InternalDistributedMember firstNonPreferred=null;  while (it.hasNext()) {    InternalDistributedMember mbr=it.next();    if (mbr.getNetMember().preferredForCoordinator()) {      return mbr.equals(who);    } else     if (firstNonPreferred == null) {      firstNonPreferred=mbr;    }  }  return (firstNonPreferred == null || firstNonPreferred.equals(who));}  }
class C{  public static NetworkInterfaceState mapIPAddressToNetworkInterfaceState(Instance instance,boolean publicInterfaceFlag,List<String> tenantLinks,String existingLink){  NetworkInterfaceState networkInterface=new NetworkInterfaceState();  networkInterface.tenantLinks=tenantLinks;  if (publicInterfaceFlag) {    networkInterface.address=instance.getPublicIpAddress();    networkInterface.id=instance.getInstanceId() + TILDA + PUBLIC_INTERFACE;    if (existingLink == null) {      networkInterface.documentSelfLink=UUID.randomUUID().toString() + TILDA + PUBLIC_INTERFACE;    } else {      networkInterface.documentSelfLink=getIdFromDocumentLink(existingLink);    }  } else {    networkInterface.address=instance.getPrivateIpAddress();    networkInterface.id=instance.getInstanceId() + TILDA + PRIVATE_INTERFACE;    if (existingLink == null) {      networkInterface.documentSelfLink=UUID.randomUUID().toString() + TILDA + PRIVATE_INTERFACE;    } else {      networkInterface.documentSelfLink=getIdFromDocumentLink(existingLink);    }  }  return networkInterface;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public static float[] RGBtoHSL(Color color,float[] hsl){  return RGBtoHSL(color.getRed(),color.getGreen(),color.getBlue(),hsl);}  }
class C{  private ApiInfo apiInfo(){  return new ApiInfo(propertyResolver.getProperty("title"),propertyResolver.getProperty("description"),propertyResolver.getProperty("termsOfServiceUrl"),propertyResolver.getProperty("contact"),propertyResolver.getProperty("license"),propertyResolver.getProperty("licenseUrl"));}  }
class C{  public URI buildUri(String resourceLink){  return UriUtils.buildUri(this.resourceReference,resourceLink);}  }
class C{  @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.add(new GuiButton(0,width / 2 - 100,60,"Change Key"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 72,"Save"));  buttonList.add(new GuiButton(2,width / 2 - 100,height / 4 + 96,"Cancel"));  commandBox=new GuiTextField(0,fontRendererObj,width / 2 - 100,100,200,20);  commandBox.setMaxStringLength(65536);  commandBox.setFocused(true);  if (entry != null) {    String cmds="";    for (    String cmd : entry.getValue()) {      if (!cmds.isEmpty())       cmds+=";";      cmds+=cmd;    }    commandBox.setText(cmds);  }}  }
class C{  synchronized void receive(char c[],int off,int len) throws IOException {  while (--len >= 0) {    receive(c[off++]);  }}  }
class C{  public double norm2(DoubleMatrix1D x){  return mult(x,x);}  }
class C{  private Baggage(){}  }
class C{  public static <T>Collection<T> synchronizedCollection(Collection<T> collection){  if (collection == null) {    throw new NullPointerException();  }  return new SynchronizedCollection<T>(collection);}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public Vertex input(Vertex input,Vertex sentence,Map<Vertex,Vertex> variables,Network network){  log("REDIRECT",Level.FINE,sentence,this.recursiveInputDepth);  if (this.recursiveInputDepth > MAX_DEPTH) {    log("Input",Level.WARNING,"Max recursive depth exceeded",this.recursiveInputDepth,sentence);    return null;  }  this.recursiveInputDepth++;  if (sentence.instanceOf(Primitive.FORMULA)) {    Vertex result=evaluateFormula(sentence,variables,network);    if (result == null) {      log("Template ormula cannot be evaluated",Level.FINE,sentence);      return null;    } else {      sentence=getWord(result,network);    }  }  if (sentence.hasRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE) && (sentence.getData() == null)) {    sentence=createSentenceText(sentence,network);  } else   if (!sentence.hasRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE) && (sentence.getData() instanceof String)) {    sentence=network.createSentence((String)sentence.getData(),true,false,false);  }  Vertex conversation=input.getRelationship(Primitive.CONVERSATION);  Vertex response=processConversational(input,sentence,conversation,variables,network,LanguageState.Answering);  if ((response != null) && response.instanceOf(Primitive.FORMULA)) {    log("Response is template formula",Level.FINE,response);    SelfCompiler.addGlobalVariables(input,sentence,network,variables);    Vertex result=evaluateFormula(response,variables,network);    if (result == null) {      log("Template formula cannot be evaluated",Level.FINE,response);      response=null;    } else {      response=getWord(result,network);    }  }  this.wasMimic=false;  return response;}  }
class C{  public T image(String url,boolean memCache,boolean fileCache,int targetWidth,int fallbackId){  return image(url,memCache,fileCache,targetWidth,fallbackId,null,0);}  }
class C{  public void registerObserver(String notificationName,Observer observer){  if (observerMap.get(notificationName) == null) {    observerMap.put(notificationName,new ArrayList<>());  }  List<Observer> observers=observerMap.get(notificationName);  observers.add(observer);}  }
class C{  private void validateLength(FacesContext context,String value,int maxLength){  if (value.length() > maxLength) {    ValidatorException e=getException(JSFUtils.getText(BaseBean.ERROR_PARAMETER_VALUE_TO_LONG,new String[]{String.valueOf(maxLength)},context));    throw e;  }}  }
class C{  private void readLevelFileAndUpdateCache(File memberFile,String fileName) throws IOException {  FileInputStream fos=null;  FileChannel fileChannel=null;  try {    fos=new FileInputStream(memberFile);    fileChannel=fos.getChannel();    Map<Integer,String> memberMap=surrogateKeyMap.get(fileName);    if (null == memberMap) {      memberMap=new HashMap<Integer,String>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      surrogateKeyMap.put(fileName,memberMap);    }    long size=fileChannel.size();    int maxKey=0;    ByteBuffer rowlengthToRead=null;    int len=0;    ByteBuffer row=null;    int toread=0;    byte[] bb=null;    String value=null;    int surrogateValue=0;    boolean enableEncoding=Boolean.valueOf(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.ENABLE_BASE64_ENCODING,CarbonCommonConstants.ENABLE_BASE64_ENCODING_DEFAULT));    while (fileChannel.position() < size) {      rowlengthToRead=ByteBuffer.allocate(4);      fileChannel.read(rowlengthToRead);      rowlengthToRead.rewind();      len=rowlengthToRead.getInt();      if (len == 0) {        continue;      }      row=ByteBuffer.allocate(len);      fileChannel.read(row);      row.rewind();      toread=row.getInt();      bb=new byte[toread];      row.get(bb);      if (enableEncoding) {        value=new String(Base64.decodeBase64(bb),Charset.defaultCharset());      } else {        value=new String(bb,Charset.defaultCharset());      }      surrogateValue=row.getInt();      memberMap.put(surrogateValue,value);      if (maxKey < surrogateValue) {        maxKey=surrogateValue;      }    }  }  finally {    CarbonUtil.closeStreams(fileChannel,fos);  }}  }
class C{  private static synchronized void lazyInitialize(){  if (requestQueue == null) {    requestQueue=new Queue<Request>();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.WORD_BOUNDARY__NOT:    return not != NOT_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static int computeTagSize(final int fieldNumber){  return computeRawVarint32Size(WireFormatNano.makeTag(fieldNumber,0));}  }
class C{  public static _ParameterStateEnum fromString(final String value) throws SOAPSerializationException {  return (_ParameterStateEnum)Enumeration.fromString(value,_ParameterStateEnum.VALUES_TO_INSTANCES);}  }
class C{  public int stepTo(int index){  return stepForward(index - currentPosition);}  }
class C{  public void addEventType(String eventTypeName,ConfigurationEventTypeXMLDOM xmlDOMEventTypeDesc){  eventTypesXMLDOM.put(eventTypeName,xmlDOMEventTypeDesc);}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  @Override public final void removeForbidden(String spec1,String spec2){  spec1=checkSpec(spec1);  spec2=checkSpec(spec2);  Set<MyNode> f1=getExtent(spec1);  Set<MyNode> f2=getExtent(spec2);  OrderedPair<Set<MyNode>> o=new OrderedPair<>(f1,f2);  forbiddenRulesSpecs.remove(o);}  }
class C{  public ExplanationAsserter(Query q,String defaultFieldName,IndexSearcher s){  this(q,defaultFieldName,s,false);}  }
class C{  public static int findLastNotOf(String container,String charSeq,int end){  for (int i=end; i < container.length() && i >= 0; --i) {    if (!charSeq.contains("" + container.charAt(i)))     return i;  }  return -1;}  }
class C{  public CompletableFuture<Void> start(){  MembershipRecord localMemberRecord=new MembershipRecord(member,ALIVE,0);  membershipTable.put(member.id(),localMemberRecord);  onSyncRequestSubscriber=Subscribers.create(null);  transport.listen().observeOn(scheduler).filter(null).filter(null).subscribe(onSyncRequestSubscriber);  onSyncAckResponseSubscriber=Subscribers.create(null);  transport.listen().observeOn(scheduler).filter(null).filter(null).filter(null).subscribe(onSyncAckResponseSubscriber);  onFdEventSubscriber=Subscribers.create(null);  failureDetector.listen().observeOn(scheduler).subscribe(onFdEventSubscriber);  onGossipRequestSubscriber=Subscribers.create(null);  gossipProtocol.listen().observeOn(scheduler).filter(null).subscribe(onGossipRequestSubscriber);  return doInitialSync();}  }
class C{  public void testUnsizedIntsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.ints().limit(size).parallel().forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public void displayState(){  log.debug("displayState()");  if (namedMemory == null) {    setIcon(defaultIcon);    updateSize();    return;  }  if (re != null) {    jmri.InstanceManager.throttleManagerInstance().removeListener(re.getDccLocoAddress(),this);    re=null;  }  Object key=getMemory().getValue();  displayState(key);}  }
class C{  protected static void closeResultSet(ResultSet rs){  if (null != rs) {    try {      rs.close();    } catch (    SQLException ignore) {    }  }}  }
class C{  public boolean matches(InventoryCrafting matrix,World world){  for (int i=0; i <= 9 - this.recipeWidth; ++i) {    for (int j=0; j <= 9 - this.recipeHeight; ++j) {      if (this.checkMatch(matrix,i,j,true)) {        return true;      }      if (this.checkMatch(matrix,i,j,false)) {        return true;      }    }  }  return false;}  }
class C{  public T alink(String value){  return attr("alink",value);}  }
class C{  public IllegalArgumentException(){}  }
class C{  private void checkAllCaps(Element e){  String name=e.getSimpleName().toString();  if (e.getKind() == TYPE_PARAMETER) {    if (name.codePointCount(0,name.length()) > 1 || !Character.isUpperCase(name.codePointAt(0)))     messager.printMessage(WARNING,"A type variable's name,``" + name + "'', should be a single uppercace character.",e);  } else {    boolean conventional=true;    int firstCodePoint=name.codePointAt(0);    if (!Character.isUpperCase(firstCodePoint))     conventional=false; else {      boolean previousUnderscore=false;      int cp=firstCodePoint;      for (int i=Character.charCount(cp); i < name.length(); i+=Character.charCount(cp)) {        cp=name.codePointAt(i);        if (cp == (int)'_') {          if (previousUnderscore) {            conventional=false;            break;          }          previousUnderscore=true;        } else {          previousUnderscore=false;          if (!Character.isUpperCase(cp) && !Character.isDigit(cp)) {            conventional=false;            break;          }        }      }    }    if (!conventional)     messager.printMessage(WARNING,"A constant's name, ``" + name + "'', should be ALL_CAPS.",e);  }}  }
class C{  public static URL[] findClassPaths(){  List<URL> list=new ArrayList<URL>();  String classpath=System.getProperty("java.class.path");  StringTokenizer tokenizer=new StringTokenizer(classpath,File.pathSeparator);  while (tokenizer.hasMoreTokens()) {    String path=tokenizer.nextToken();    File fp=new File(path);    if (!fp.exists())     throw new RuntimeException("File in java.class.path does not exist: " + fp);    try {      list.add(fp.toURI().toURL());    } catch (    MalformedURLException e) {      throw new RuntimeException(e);    }  }  return list.toArray(new URL[list.size()]);}  }
class C{  @SuppressWarnings("deprecation") public synchronized CassandraSession session(IgniteLogger log){  if (ses != null)   return ses;  Cluster.Builder builder=Cluster.builder();  if (user != null)   builder=builder.withCredentials(user,pwd);  if (port != null)   builder=builder.withPort(port);  if (contactPoints != null)   builder=builder.addContactPoints(contactPoints);  if (contactPointsWithPorts != null)   builder=builder.addContactPointsWithPorts(contactPointsWithPorts);  if (maxSchemaAgreementWaitSeconds != null)   builder=builder.withMaxSchemaAgreementWaitSeconds(maxSchemaAgreementWaitSeconds);  if (protoVer != null)   builder=builder.withProtocolVersion(ProtocolVersion.fromInt(protoVer));  if (compression != null) {    try {      builder=builder.withCompression(ProtocolOptions.Compression.valueOf(compression.trim().toLowerCase()));    } catch (    IllegalArgumentException e) {      throw new IgniteException("Incorrect compression option '" + compression + "' specified for Cassandra connection",e);    }  }  if (useSSL != null && useSSL)   builder=builder.withSSL();  if (sslOptions != null)   builder=builder.withSSL(sslOptions);  if (collectMetrix != null && !collectMetrix)   builder=builder.withoutMetrics();  if (jmxReporting != null && !jmxReporting)   builder=builder.withoutJMXReporting();  if (creds != null)   builder=builder.withCredentials(creds.getUser(),creds.getPassword());  if (loadBalancingPlc != null)   builder=builder.withLoadBalancingPolicy(loadBalancingPlc);  if (reconnectionPlc != null)   builder=builder.withReconnectionPolicy(reconnectionPlc);  if (retryPlc != null)   builder=builder.withRetryPolicy(retryPlc);  if (addrTranslator != null)   builder=builder.withAddressTranslator(addrTranslator);  if (speculativeExecutionPlc != null)   builder=builder.withSpeculativeExecutionPolicy(speculativeExecutionPlc);  if (authProvider != null)   builder=builder.withAuthProvider(authProvider);  if (poolingOptions != null)   builder=builder.withPoolingOptions(poolingOptions);  if (sockOptions != null)   builder=builder.withSocketOptions(sockOptions);  if (nettyOptions != null)   builder=builder.withNettyOptions(nettyOptions);  return ses=new CassandraSessionImpl(builder,fetchSize,readConsistency,writeConsistency,log);}  }
class C{  public boolean isEmpty(String value){  if (value != null) {    return value.length() == 0;  }  return true;}  }
class C{  private void stopCompactor(){synchronized (this) {    if (LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER) {      CacheObserverHolder.getInstance().beforeStoppingCompactor();    }    this.compactorEnabled=false;    if (LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER) {      CacheObserverHolder.getInstance().afterSignallingCompactor();    }  }  if (LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER) {    CacheObserverHolder.getInstance().afterStoppingCompactor();  }}  }
class C{  protected BigInteger chooseRandomPrime(int bitlength,BigInteger e){  for (; ; ) {    BigInteger p=new BigInteger(bitlength,1,param.getRandom());    if (p.mod(e).equals(ONE)) {      continue;    }    if (!p.isProbablePrime(param.getCertainty())) {      continue;    }    if (!e.gcd(p.subtract(ONE)).equals(ONE)) {      continue;    }    return p;  }}  }
class C{  protected T create(AppContext ctx,T object){  factory.getDAO(clazz).create(ctx,object);  return object;}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  private static BlocksRemoveInfo isStartBlock(BlockNode remBlock,BlockNode startBlock){  List<InsnNode> remInsns=remBlock.getInstructions();  List<InsnNode> startInsns=startBlock.getInstructions();  if (remInsns.size() < startInsns.size()) {    return null;  }  int startPos=remInsns.size() - startInsns.size();  int endPos=0;  if (!checkInsns(remInsns,startInsns,startPos,null)) {    if (checkInsns(remInsns,startInsns,0,null)) {      startPos=0;      endPos=startInsns.size();    } else {      boolean found=false;      for (int i=1; i < startPos; i++) {        if (checkInsns(remInsns,startInsns,i,null)) {          startPos=i;          endPos=startInsns.size() + i;          found=true;          break;        }      }      if (!found) {        return null;      }    }  }  BlocksPair startPair=new BlocksPair(remBlock,startBlock);  BlocksRemoveInfo removeInfo=new BlocksRemoveInfo(startPair);  removeInfo.setStartSplitIndex(startPos);  removeInfo.setEndSplitIndex(endPos);  if (endPos != 0) {    removeInfo.setEnd(startPair);  }  if (!checkInsns(remInsns,startInsns,startPos,removeInfo)) {    return null;  }  return removeInfo;}  }
class C{  @Override public void onDrawChart(Canvas canvas,ArrayList<ChartSet> data){  final int nSets=data.size();  final int nEntries=data.get(0).size();  final int yZeroCoord=(int)this.getZeroPosition();  float offset;  BarSet barSet;  Bar bar;  for (int i=nEntries - 1; i >= 0; i--) {    offset=data.get(0).getEntry(i).getY() - drawingOffset;    for (int j=0; j < nSets; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      if (!barSet.isVisible() || bar.getValue() == 0)       continue;      style.barPaint.setColor(bar.getColor());      style.applyAlpha(style.barPaint,barSet.getAlpha());      if (style.hasBarBackground)       drawBarBackground(canvas,this.getInnerChartLeft(),offset,this.getInnerChartRight(),(offset + barWidth));      if (bar.getValue() > 0)       drawBar(canvas,yZeroCoord,offset,bar.getX(),offset + barWidth); else       drawBar(canvas,bar.getX(),offset,yZeroCoord,offset + barWidth);      offset+=barWidth;      if (j != nSets - 1)       offset+=style.setSpacing;    }  }}  }
class C{  private synchronized void ensureRequestIsBuffered() throws IOException {  if (buffer == null) {    buffer=new ByteArrayOutputStream();    delegate.writeRequest(buffer);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.787 -0500",hash_original_method="FC3EBEAFEA712CD3115701A02487AC2E",hash_generated_method="3D0DBE9192B830DF8F56939BB0FA9EA2") public Scheme(final String name,final SocketFactory factory,final int port){  if (name == null) {    throw new IllegalArgumentException("Scheme name may not be null");  }  if (factory == null) {    throw new IllegalArgumentException("Socket factory may not be null");  }  if ((port <= 0) || (port > 0xffff)) {    throw new IllegalArgumentException("Port is invalid: " + port);  }  this.name=name.toLowerCase(Locale.ENGLISH);  this.socketFactory=factory;  this.defaultPort=port;  this.layered=(factory instanceof LayeredSocketFactory);}  }
class C{  private void resolveAdditionalAction(final FormObject formObject){  int idValue;  for (  final int anId : id) {    idValue=anId;    currentPdfFile.setJavascriptForObject(formObject,PdfDictionary.AA,idValue);    currentPdfFile.setJavascriptForObject(formObject,PdfDictionary.A,idValue);  }}  }
class C{  public void save(OutputStream outputStream) throws XmlPullParserException, IllegalArgumentException, IllegalStateException, IOException {  XmlSerializer serializer=XmlPullParserFactory.newInstance().newSerializer();  serializer.setOutput(outputStream,"UTF-8");  serializer.startDocument("UTF-8",null);  serializer.startTag(null,"osm");  serializer.attribute(null,"generator",Application.userAgent);  serializer.attribute(null,"version","0.6");  serializer.attribute(null,"upload","true");  ArrayList<Node> saveNodes=new ArrayList<Node>(currentStorage.getNodes());  ArrayList<Way> saveWays=new ArrayList<Way>(currentStorage.getWays());  ArrayList<Relation> saveRelations=new ArrayList<Relation>(currentStorage.getRelations());  for (  Node elem : apiStorage.getNodes()) {    if (elem.state == OsmElement.STATE_DELETED) {      Log.d("StorageDelegator","deleted node added to list for save, id " + elem.osmId);      saveNodes.add(elem);    }  }  for (  Way elem : apiStorage.getWays()) {    if (elem.state == OsmElement.STATE_DELETED) {      Log.d("StorageDelegator","deleted way added to list for save, id " + elem.osmId);      saveWays.add(elem);    }  }  for (  Way elem : apiStorage.getWays()) {    if (elem.state == OsmElement.STATE_DELETED) {      Log.d("StorageDelegator","deleted way added to list for save, id " + elem.osmId);      saveWays.add(elem);    }  }  for (  BoundingBox b : currentStorage.getBoundingBoxes()) {    b.toJosmXml(serializer);  }  if (!saveNodes.isEmpty()) {    for (    OsmElement elem : saveNodes)     elem.toJosmXml(serializer);  }  if (!saveWays.isEmpty()) {    for (    OsmElement elem : saveWays)     elem.toJosmXml(serializer);  }  if (!saveRelations.isEmpty()) {    for (    OsmElement elem : saveRelations)     elem.toJosmXml(serializer);  }  serializer.endTag(null,"osm");  serializer.endDocument();}  }
class C{  protected FormText createTitle(Composite parent,FormToolkit toolkit){  title=toolkit.createFormText(parent,false);  title.setColor("header",toolkit.getColors().getColor(IFormColors.TITLE));  title.setFont("header",JFaceResources.getBannerFont());  return title;}  }
class C{  protected final void fireServiceRevoked(BeanContextServiceRevokedEvent event){  Object listeners[];synchronized (bcsListeners) {    listeners=bcsListeners.toArray();  }  for (int i=0; i < listeners.length; i++) {    BeanContextServicesListener l=(BeanContextServicesListener)listeners[i];    l.serviceRevoked(event);  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomFeatureListForm roomFeatureListForm=(RoomFeatureListForm)form;  sessionContext.checkPermission(Right.RoomFeatures);  String deptCode=roomFeatureListForm.getDeptCodeX();  if (deptCode == null) {    deptCode=(String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom);  }  if (deptCode == null) {    deptCode=request.getParameter("default");    if (deptCode != null)     sessionContext.setAttribute(SessionAttribute.DepartmentCodeRoom,deptCode);  }  if (deptCode != null && !deptCode.isEmpty() && ("All".equals(deptCode) || deptCode.matches("Exam[0-9]*"))) {    roomFeatureListForm.setDeptCodeX(deptCode);    if ("Export PDF".equals(request.getParameter("op"))) {      sessionContext.checkPermission(Right.RoomFeaturesExportPdf);      OutputStream out=ExportUtils.getPdfOutputStream(response,"roomFeatures");      RoomFeatureListAction.printPdfFeatureTable(out,sessionContext,roomFeatureListForm);      out.flush();      out.close();      return null;    }    return mapping.findForward("roomFeatureList");  } else {    if (sessionContext.getUser().getCurrentAuthority().getQualifiers("Department").size() == 1) {      roomFeatureListForm.setDeptCodeX(sessionContext.getUser().getCurrentAuthority().getQualifiers("Department").get(0).getQualifierReference());      return mapping.findForward("roomFeatureList");    }    LookupTables.setupDepartments(request,sessionContext,true);    LookupTables.setupExamTypes(request,sessionContext.getUser(),DepartmentStatusType.Status.ExamView,DepartmentStatusType.Status.ExamTimetable);    return mapping.findForward("showRoomFeatureSearch");  }}  }
class C{  public DiscretizationWrapper(DataWrapper data,Parameters params){  if (data == null) {    throw new NullPointerException("The given data must not be null");  }  if (params == null) {    throw new NullPointerException("The given parameters must not be null");  }  DataModelList dataSets=data.getDataModelList();  DataModelList discretizedDataSets=new DataModelList();  for (  DataModel dataModel : dataSets) {    if (!(dataModel instanceof DataSet)) {      throw new IllegalArgumentException("Only tabular data sets can be converted to time lagged form.");    }    DataSet originalData=(DataSet)dataModel;    Map<Node,DiscretizationSpec> discretizationSpecs=(Map<Node,DiscretizationSpec>)params.get("discretizationSpecs",new HashMap<Node,DiscretizationSpec>());    Discretizer discretizer=new Discretizer(originalData,discretizationSpecs);    discretizer.setVariablesCopied(Preferences.userRoot().getBoolean("copyUnselectedColumns",true));    discretizedDataSets.add(discretizer.discretize());  }  setDataModel(discretizedDataSets);  setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("Discretization of data in the parent node.",getDataModelList());}  }
class C{  protected static String key(String type,String name){  return (name + "." + type).toLowerCase();}  }
class C{  private void resetVerticalAnimation(View view,boolean toTop){  if (!mIsMenuOpen) {    ViewHelper.setRotation(view,0);    ViewHelper.setRotationY(view,0);    ViewHelper.setRotationX(view,-90);  }  ViewHelper.setPivotX(view,mMenuItemSize / 2);  ViewHelper.setPivotY(view,!toTop ? 0 : mMenuItemSize);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public void addSource(Fact other){  if (derivation == null) {    derivation=new Derivation();  }  derivation.addSource(other);}  }
class C{  public Avatar avatar(){  return avatar;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private TypeOperand makeTypeOperand(TypeReference type){  if (VM.VerifyAssertions)   opt_assert(type != null);  return new TypeOperand(type);}  }
class C{  public LocalResult(){}  }
class C{  public ParseException(Throwable cause){  super(cause);  code=OTHER_CAUSE;}  }
class C{  public void addTabWithoutIcon(String title,Component component){  super.addTab(title,component);  component.addKeyListener(this.keyListener);}  }
class C{  private int doArrive(int adjust){  final Phaser root=this.root;  for (; ; ) {    long s=(root == this) ? state : reconcileState();    int phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     return phase;    int counts=(int)s;    int unarrived=(counts == EMPTY) ? 0 : (counts & UNARRIVED_MASK);    if (unarrived <= 0)     throw new IllegalStateException(badArrive(s));    if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s-=adjust)) {      if (unarrived == 1) {        long n=s & PARTIES_MASK;        int nextUnarrived=(int)n >>> PARTIES_SHIFT;        if (root == this) {          if (onAdvance(phase,nextUnarrived))           n|=TERMINATION_BIT; else           if (nextUnarrived == 0)           n|=EMPTY; else           n|=nextUnarrived;          int nextPhase=(phase + 1) & MAX_PHASE;          n|=(long)nextPhase << PHASE_SHIFT;          UNSAFE.compareAndSwapLong(this,stateOffset,s,n);          releaseWaiters(phase);        } else         if (nextUnarrived == 0) {          phase=parent.doArrive(ONE_DEREGISTER);          UNSAFE.compareAndSwapLong(this,stateOffset,s,s | EMPTY);        } else         phase=parent.doArrive(ONE_ARRIVAL);      }      return phase;    }  }}  }
class C{  public int evaluate(int v1,int v2){switch (value) {case EQUAL:    return (v1 == v2) ? TRUE : FALSE;case NOT_EQUAL:  return (v1 != v2) ? TRUE : FALSE;case GREATER:return (v1 > v2) ? TRUE : FALSE;case LESS:return (v1 < v2) ? TRUE : FALSE;case GREATER_EQUAL:return (v1 >= v2) ? TRUE : FALSE;case LESS_EQUAL:return (v1 <= v2) ? TRUE : FALSE;case LOWER:return lower(v1,v2) ? TRUE : FALSE;case LOWER_EQUAL:return lower_equal(v1,v2) ? TRUE : FALSE;case HIGHER:return higher(v1,v2) ? TRUE : FALSE;case HIGHER_EQUAL:return higher_equal(v1,v2) ? TRUE : FALSE;case CARRY_FROM_ADD:return carry_from_add(v1,v2) ? TRUE : FALSE;case NO_CARRY_FROM_ADD:return carry_from_add(v1,v2) ? FALSE : TRUE;case OVERFLOW_FROM_ADD:return overflow_from_add(v1,v2) ? TRUE : FALSE;case NO_OVERFLOW_FROM_ADD:return overflow_from_add(v1,v2) ? FALSE : TRUE;case BORROW_FROM_SUB:return borrow_from_sub(v1,v2) ? TRUE : FALSE;case NO_BORROW_FROM_SUB:return borrow_from_sub(v1,v2) ? FALSE : TRUE;case BORROW_FROM_RSUB:return borrow_from_sub(v2,v1) ? TRUE : FALSE;case NO_BORROW_FROM_RSUB:return borrow_from_sub(v2,v1) ? FALSE : TRUE;case OVERFLOW_FROM_SUB:return overflow_from_sub(v1,v2) ? TRUE : FALSE;case NO_OVERFLOW_FROM_SUB:return overflow_from_sub(v1,v2) ? FALSE : TRUE;case OVERFLOW_FROM_RSUB:return overflow_from_sub(v2,v1) ? TRUE : FALSE;case NO_OVERFLOW_FROM_RSUB:return overflow_from_sub(v2,v1) ? FALSE : TRUE;case BIT_TEST:return bit_test(v1,v2) ? TRUE : FALSE;case NO_BIT_TEST:return bit_test(v1,v2) ? FALSE : TRUE;case RBIT_TEST:return bit_test(v2,v1) ? TRUE : FALSE;case NO_RBIT_TEST:return bit_test(v2,v1) ? FALSE : TRUE;case OVERFLOW_FROM_MUL:return overflow_from_mul(v1,v2) ? TRUE : FALSE;case NO_OVERFLOW_FROM_MUL:return overflow_from_mul(v1,v2) ? FALSE : TRUE;}throw new OptimizingCompilerException("invalid condition " + this);}  }
class C{  public String toString(){  return String.format("Validation error on field \"%s\": %s",fieldName,msg);}  }
class C{  public void expungeStaleEntries(){  Reference<?> reference;  while ((reference=poll()) != null) {    target.remove(reference);  }}  }
class C{  public TravelDistanceHandler(final double simulationEndTime,final int noOfTimeBins,final Network network,final String shapeFile,final String userGroup){  this.timeBinSize=simulationEndTime / noOfTimeBins;  this.network=network;  if (shapeFile != null) {    Collection<SimpleFeature> features=new ShapeFileReader().readFileAndInitialize(shapeFile);    this.zonalGeoms=GeometryUtils.getSimplifiedGeometries(features);  } else   this.zonalGeoms=new ArrayList<>();  this.ug=userGroup;  LOGGER.info("Area and user group filtering is used, links fall inside the given shape and belongs to the given user group will be considered.");  LOGGER.warn("User group will be identified for Munich scenario only, i.e. Urban, (Rev)Commuter and Freight.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:22.052 -0500",hash_original_method="831A483974845D48E10965F44C1F060B",hash_generated_method="F087F42F518F1A01AC48210A5AB717A6") public static ASN1Object convertValueToObject(X509Extension ext) throws IllegalArgumentException {  try {    return ASN1Object.fromByteArray(ext.getValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  public void startDTD(String arg0,String arg1,String arg2) throws SAXException {}  }
class C{  @ExceptionHandler(value=Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public ErrorInformation handleInternalServerErrorException(Exception exception){  logError("A general error occurred.",exception);  return getErrorInformation(HttpStatus.INTERNAL_SERVER_ERROR,exception);}  }
class C{  public boolean isValidAttachmentPoint(DatapathId switchDPID,OFPort switchPort){  if (topology.isAttachmentPointPort(switchDPID,switchPort) == false)   return false;  if (suppressAPs.contains(new SwitchPort(switchDPID,switchPort)))   return false;  return true;}  }
class C{  @Override public boolean stopped(){  return (speed == 0.0);}  }
class C{  public static Scsd cs_dalloc(int m,int n){  Scsd S;  S=new Scsd();  S.p=new int[m];  S.r=new int[m + 6];  S.q=new int[n];  S.s=new int[n + 6];  S.cc=new int[5];  S.rr=new int[5];  return S;}  }
class C{  public int memberOf(){  return theMemberOf;}  }
class C{  protected Node newNode(){  return new SVGOMTSpanElement();}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void accept(final ClassVisitor cv){  FieldVisitor fv=cv.visitField(access,name,desc,signature,value);  if (fv == null) {    return;  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    fv.visitAttribute(attrs.get(i));  }  fv.visitEnd();}  }
class C{  public void swap(int i,int j){  if (i == j) {    return;  }  double t=V[i];  V[i]=V[j];  V[j]=t;}  }
class C{  public int hashCode(){  if (this == POINT_INFINITY)   return 0;  return x.hashCode() << 5 + y.hashCode();}  }
class C{  public ArrayList<ChartSet> prepareExitAnimation(ChartView chartView){  mEasing.setState(BaseEasingMethod.EXIT);  return prepareAnimation(chartView);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected void assertKnownException(String message,SQLException e){  if (e != null && e.getSQLState().startsWith("HY000")) {    BaseTestCase.logError("Unexpected General error " + message,e);  }}  }
class C{  public UpdateInventoryOutput replyOk(){  UpdateInventoryOutput ok=new UpdateInventoryOutput();  ok.setCode("OK");  return ok;}  }
class C{  public boolean matches(String filename){  if (exts == null)   return true;  int j=filename.lastIndexOf(".");  if (j == -1 || j == filename.length())   return false;  String suffix=filename.substring(j + 1);  return exts.contains(suffix);}  }
class C{  public UnableToControlProcessException(final Throwable thr){  super(thr.getMessage(),thr);}  }
class C{  public T caseParameter(Parameter object){  return null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_action_2_();}  }
class C{  public static void forEachCollectionNameInDatabase(MongoClient client,String databaseName,Consumer<String> operation){  MongoDatabase db=client.getDatabase(databaseName);  forEach(db.listCollectionNames(),operation);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.180 -0500",hash_original_method="0EB3739ECCD523AAEBB3A3F64D0A35BC",hash_generated_method="CE8767DA2D459643F76527EFC21F6D25") @Override public synchronized void reset() throws IOException {  if (buf == null) {    throw new IOException("Stream is closed");  }  if (-1 == markpos) {    throw new IOException("Mark has been invalidated.");  }  pos=markpos;}  }
class C{  public ColladaController(ColladaRoot root){  this.setColladaRoot(root);  this.setTraversalContext(new ColladaTraversalContext());}  }
class C{  static public long unpackLong(InputStream in) throws IOException {  long ret=0;  int v;  do {    v=in.read();    if (v == -1)     throw new EOFException();    ret=(ret << 7) | (v & 0x7F);  } while ((v & 0x80) == 0);  return ret;}  }
class C{  @Override public boolean removeMib(SnmpMibAgent mib,SnmpOid[] oids){  root.unregister(mib,oids);  return (mibs.removeElement(mib));}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS:    return ((InternalEList<?>)getOwnedMembers()).basicRemove(otherEnd,msgs);case TypesPackage.CONTAINER_TYPE__CALLABLE_CTOR:  return basicSetCallableCtor(null,msgs);case TypesPackage.CONTAINER_TYPE__TYPE_VARS:return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static int[] nullToEmpty(int[] array){  if (array == null || array.length == 0) {    return EMPTY_INT_ARRAY;  }  return array;}  }
class C{  public static Uid random(){  String uuid=UUID.randomUUID().toString();  return new Uid("urn:uuid:" + uuid);}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.sendError(501,Bundle.getMessage("501NotImplemented"));}  }
class C{  public NominalAttributeInfo(List<String> attributeValues,String attributeName){  if (attributeValues == null) {    m_Values=new ArrayList<Object>();    m_Hashtable=new Hashtable<Object,Integer>();  } else {    m_Values=new ArrayList<Object>(attributeValues.size());    m_Hashtable=new Hashtable<Object,Integer>(attributeValues.size());    for (int i=0; i < attributeValues.size(); i++) {      Object store=attributeValues.get(i);      if (((String)store).length() > Attribute.STRING_COMPRESS_THRESHOLD) {        try {          store=new SerializedObject(attributeValues.get(i),true);        } catch (        Exception ex) {          System.err.println("Couldn't compress nominal attribute value -" + " storing uncompressed.");        }      }      if (m_Hashtable.containsKey(store)) {        throw new IllegalArgumentException("A nominal attribute (" + attributeName + ") cannot"+ " have duplicate labels ("+ store+ ").");      }      m_Values.add(store);      m_Hashtable.put(store,new Integer(i));    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("M_Element[");  sb.append(get_ID()).append("-").append(getColumnName()).append("]");  return sb.toString();}  }
class C{  private void addConnectionView(Connection connection){  PlatformImpl.runAndWait(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.235 -0500",hash_original_method="0981A7B7481B56654552F826D97FC7A4",hash_generated_method="2B3B6CE00BC96205C31CB8C965B5AC44") final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  public final Plane normalize(){  double length=this.n.getLength3();  if (length == 0)   return this;  return new Plane(new Vec4(this.n.x / length,this.n.y / length,this.n.z / length,this.n.w / length));}  }
class C{  public void rearrangeChildren(){  rearrangeChildren(-1);}  }
class C{  public synchronized void clearScreenMessages(){  talogging.setText("");}  }
class C{  public void clearStack(){  top=0;}  }
class C{  public void createSubUsageScenario11a() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO11a_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  String customerAdminId="Scenario011aPUWeekCustomerAdmin";  VOOrganization customer=orgSetup.registerCustomer("Scenario011aPUWeekCustomer",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,customerAdminId,supplierMarketplace.getMarketplaceId(),basicSetup.getSupplierOrgID());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO11a_PERUNIT_WEEK",serviceDetails,customerAdmin,role);  long suspResTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3);  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  subDetails=deleteBillingContactsAndUpdateSub(customerAdmin.getKey(),subDetails);  suspResTime+=86400000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  subDetails=restoreBillingContactForSubscription(customerAdmin.getKey(),subDetails);  suspResTime+=864000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  subDetails=deleteBillingContactsAndUpdateSub(customerAdmin.getKey(),subDetails);  suspResTime+=864000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  subDetails=restoreBillingContactForSubscription(customerAdmin.getKey(),subDetails);  suspResTime+=604800000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  subDetails=deleteBillingContactsAndUpdateSub(customerAdmin.getKey(),subDetails);  suspResTime+=950400000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  subDetails=restoreBillingContactForSubscription(customerAdmin.getKey(),subDetails);  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO11a_PERUNIT_WEEK",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("SCENARIO11a_PERUNIT_WEEK",customer);}  }
class C{  public static final void shuffle(long[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  public static boolean isDirectlyGettingPowered(World world,Coord4D coord){  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {    Coord4D sideCoord=coord.getFromSide(side);    if (sideCoord.exists(world)) {      if (world.isBlockProvidingPowerTo(coord.xCoord,coord.yCoord,coord.zCoord,side.ordinal()) > 0) {        return true;      }    }  }  return false;}  }
class C{  public boolean isPlaying(){  return mState == STATE_PLAYING;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  @SuppressWarnings("unused") public BatchViewAsSingleton(DataflowRunner runner,View.AsSingleton<T> transform){  this.runner=runner;  this.transform=transform;}  }
class C{  public void addMember(MemberDefinition field){  if (firstMember == null) {    firstMember=lastMember=field;  } else   if (field.isSynthetic() && field.isFinal() && field.isVariable()) {    field.nextMember=firstMember;    firstMember=field;    field.nextMatch=(MemberDefinition)fieldHash.get(field.name);  } else {    lastMember.nextMember=field;    lastMember=field;    field.nextMatch=(MemberDefinition)fieldHash.get(field.name);  }  fieldHash.put(field.name,field);}  }
class C{  public static <T>Object[] toArray(Iterable<T> iterable){  if (iterable == null) {    throw new NullPointerException();  }  if (iterable instanceof Collection) {    return ((Collection<T>)iterable).toArray();  }  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).toArray();  }  MutableList<T> result=Lists.mutable.empty();  Iterate.addAllTo(iterable,result);  return result.toArray();}  }
class C{  public HeaderIterator iterator(){  return new BasicListHeaderIterator(this.headers,null);}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((Z21Listener)client).message((Z21Message)m);}  }
class C{  public static DrawerLayout.LayoutParams processDrawerLayoutParams(DrawerBuilder drawer,DrawerLayout.LayoutParams params){  if (params != null) {    if (drawer.mDrawerGravity != null && (drawer.mDrawerGravity == Gravity.RIGHT || drawer.mDrawerGravity == Gravity.END)) {      params.rightMargin=0;      if (Build.VERSION.SDK_INT >= 17) {        params.setMarginEnd(0);      }      params.leftMargin=drawer.mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_margin);      if (Build.VERSION.SDK_INT >= 17) {        params.setMarginEnd(drawer.mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_margin));      }    }    if (drawer.mDisplayBelowStatusBar != null && drawer.mDisplayBelowStatusBar && Build.VERSION.SDK_INT >= 19) {      params.topMargin=UIUtils.getStatusBarHeight(drawer.mActivity,true);    }    if (drawer.mDrawerWidth > -1) {      params.width=drawer.mDrawerWidth;    } else {      params.width=DrawerUIUtils.getOptimalDrawerWidth(drawer.mActivity);    }  }  return params;}  }
class C{  @SuppressWarnings("SimplifiableIfStatement") public boolean mustDeserialize(Class cls){  BinaryClassDescriptor desc=descByCls.get(cls);  if (desc == null) {    if (BinaryUtils.wrapTrees() && (cls == TreeMap.class || cls == TreeSet.class))     return false;    return marshCtx.isSystemType(cls.getName()) || serializerForClass(cls) == null;  } else   return desc.useOptimizedMarshaller();}  }
class C{  public static final void readFully(InputStream is,byte[] buffer) throws IOException {  readFully(is,buffer,0,buffer.length);}  }
class C{  public void undo(){  displayIteration(convertToBoolean(_backupCells));}  }
class C{  public void renderValidationMessages(PaymentItem paymentItem){  fieldIdsOfErrorMessagesShowing.clear();  for (  ValidationErrorMessage validationResult : validationMessages) {    renderValidationMessageOnScreen(validationResult,paymentItem);  }}  }
class C{  public void storeDevice(Device d){  if (!isMaster)   return;  if (d == null)   return;  long now=System.nanoTime();  writeUpdatedDeviceToStorage(d);  lastWriteTimes.put(d.getDeviceKey(),now);}  }
class C{  public boolean isThrottled(){  return isThrottled;}  }
class C{  public void line(String srcName,Paint color){  line(srcName,color,null,1F,false);}  }
class C{  public void addAddition(String addition){  additions.add(addition);}  }
class C{  public void Done(){  nextCharBuf=null;  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  public static LC parseLayoutConstraint(String s){  LC lc=new LC();  if (s.length() == 0)   return lc;  String[] parts=toTrimmedTokens(s,',');  for (int i=0; i < parts.length; i++) {    String part=parts[i];    if (part == null)     continue;    int len=part.length();    if (len == 3 || len == 11) {      if (part.equals("ltr") || part.equals("rtl") || part.equals("lefttoright")|| part.equals("righttoleft")) {        lc.setLeftToRight(part.charAt(0) == 'l' ? Boolean.TRUE : Boolean.FALSE);        parts[i]=null;      }      if (part.equals("ttb") || part.equals("btt") || part.equals("toptobottom")|| part.equals("bottomtotop")) {        lc.setTopToBottom(part.charAt(0) == 't');        parts[i]=null;      }    }  }  for (  String part : parts) {    if (part == null || part.length() == 0)     continue;    try {      int ix=-1;      char c=part.charAt(0);      if (c == 'w' || c == 'h') {        ix=startsWithLenient(part,"wrap",-1,true);        if (ix > -1) {          String num=part.substring(ix).trim();          lc.setWrapAfter(num.length() != 0 ? Integer.parseInt(num) : 0);          continue;        }        boolean isHor=c == 'w';        if (isHor && (part.startsWith("w ") || part.startsWith("width "))) {          String sz=part.substring(part.charAt(1) == ' ' ? 2 : 6).trim();          lc.setWidth(parseBoundSize(sz,false,true));          continue;        }        if (!isHor && (part.startsWith("h ") || part.startsWith("height "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 7).trim();          lc.setHeight(parseBoundSize(uvStr,false,false));          continue;        }        if (part.length() > 5) {          String sz=part.substring(5).trim();          if (part.startsWith("wmin ")) {            lc.minWidth(sz);            continue;          } else           if (part.startsWith("wmax ")) {            lc.maxWidth(sz);            continue;          } else           if (part.startsWith("hmin ")) {            lc.minHeight(sz);            continue;          } else           if (part.startsWith("hmax ")) {            lc.maxHeight(sz);            continue;          }        }        if (part.startsWith("hidemode ")) {          lc.setHideMode(Integer.parseInt(part.substring(9)));          continue;        }      }      if (c == 'g') {        if (part.startsWith("gapx ")) {          lc.setGridGapX(parseBoundSize(part.substring(5).trim(),true,true));          continue;        }        if (part.startsWith("gapy ")) {          lc.setGridGapY(parseBoundSize(part.substring(5).trim(),true,false));          continue;        }        if (part.startsWith("gap ")) {          String[] gaps=toTrimmedTokens(part.substring(4).trim(),' ');          lc.setGridGapX(parseBoundSize(gaps[0],true,true));          lc.setGridGapY(gaps.length > 1 ? parseBoundSize(gaps[1],true,false) : lc.getGridGapX());          continue;        }      }      if (c == 'd') {        ix=startsWithLenient(part,"debug",5,true);        if (ix > -1) {          String millis=part.substring(ix).trim();          lc.setDebugMillis(millis.length() > 0 ? Integer.parseInt(millis) : 1000);          continue;        }      }      if (c == 'n') {        if (part.equals("nogrid")) {          lc.setNoGrid(true);          continue;        }        if (part.equals("nocache")) {          lc.setNoCache(true);          continue;        }        if (part.equals("novisualpadding")) {          lc.setVisualPadding(false);          continue;        }      }      if (c == 'f') {        if (part.equals("fill") || part.equals("fillx") || part.equals("filly")) {          lc.setFillX(part.length() == 4 || part.charAt(4) == 'x');          lc.setFillY(part.length() == 4 || part.charAt(4) == 'y');          continue;        }        if (part.equals("flowy")) {          lc.setFlowX(false);          continue;        }        if (part.equals("flowx")) {          lc.setFlowX(true);          continue;        }      }      if (c == 'i') {        ix=startsWithLenient(part,"insets",3,true);        if (ix > -1) {          String insStr=part.substring(ix).trim();          UnitValue[] ins=parseInsets(insStr,true);          LayoutUtil.putCCString(ins,insStr);          lc.setInsets(ins);          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,new String[]{"aligny","ay"},new int[]{6,2},true);        if (ix > -1) {          UnitValue align=parseUnitValueOrAlign(part.substring(ix).trim(),false,null);          if (align == UnitValue.BASELINE_IDENTITY)           throw new IllegalArgumentException("'baseline' can not be used to align the whole component group.");          lc.setAlignY(align);          continue;        }        ix=startsWithLenient(part,new String[]{"alignx","ax"},new int[]{6,2},true);        if (ix > -1) {          lc.setAlignX(parseUnitValueOrAlign(part.substring(ix).trim(),true,null));          continue;        }        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          String[] gaps=toTrimmedTokens(part.substring(ix).trim(),' ');          lc.setAlignX(parseUnitValueOrAlign(gaps[0],true,null));          if (gaps.length > 1)           lc.setAlignY(parseUnitValueOrAlign(gaps[1],false,null));          continue;        }      }      if (c == 'p') {        if (part.startsWith("packalign ")) {          String[] packs=toTrimmedTokens(part.substring(10).trim(),' ');          lc.setPackWidthAlign(packs[0].length() > 0 ? Float.parseFloat(packs[0]) : 0.5f);          if (packs.length > 1)           lc.setPackHeightAlign(Float.parseFloat(packs[1]));          continue;        }        if (part.startsWith("pack ") || part.equals("pack")) {          String ps=part.substring(4).trim();          String[] packs=toTrimmedTokens(ps.length() > 0 ? ps : "pref pref",' ');          lc.setPackWidth(parseBoundSize(packs[0],false,true));          if (packs.length > 1)           lc.setPackHeight(parseBoundSize(packs[1],false,false));          continue;        }      }      if (lc.getAlignX() == null) {        UnitValue alignX=parseAlignKeywords(part,true);        if (alignX != null) {          lc.setAlignX(alignX);          continue;        }      }      UnitValue alignY=parseAlignKeywords(part,false);      if (alignY != null) {        lc.setAlignY(alignY);        continue;      }      throw new IllegalArgumentException("Unknown Constraint: '" + part + "'\n");    } catch (    Exception ex) {      throw new IllegalArgumentException("Illegal Constraint: '" + part + "'\n"+ ex.getMessage());    }  }  return lc;}  }
class C{  public void addPath(int[] path){  paths.add(path);}  }
class C{  public void appendFloat(float x){  ByteArrayOutputStream buffer=new ByteArrayOutputStream(4);  DataOutputStream bufout=new DataOutputStream(buffer);  try {    bufout.writeFloat(x);    appendBytes(buffer.toByteArray(),0,4);  } catch (  IOException e) {    throw new AssertionError("write");  }}  }
class C{  private static String _genaratorNoReception(String pattern,long dossierId){  String noReception=StringPool.BLANK;  pattern=StringUtil.lowerCase(pattern);  pattern=StringUtil.trim(pattern,' ');  StringBuffer sbNoReception=new StringBuffer(pattern);  Calendar cal=Calendar.getInstance();  String strYearTypeOne=Integer.toString(cal.get(Calendar.YEAR));  String strYearTypeTwo=Integer.toString(cal.get(Calendar.YEAR)).substring(2);  String strMonth=(cal.get(Calendar.MONTH) + 1) < 10 ? "0" + Integer.toString(cal.get(Calendar.MONTH) + 1) : Integer.toString(cal.get(Calendar.MONTH) + 1);  String strDay=cal.get(Calendar.DAY_OF_MONTH) < 10 ? "0" + Integer.toString(cal.get(Calendar.DAY_OF_MONTH)) : Integer.toString(cal.get(Calendar.DAY_OF_MONTH));  if (_validateParttern(pattern)) {    String specialChar=_getSpecicalChar(pattern);    String serialNumber=_serialNumberAutoIncrement(pattern,dossierId);    sbNoReception.replace(pattern.indexOf('n') - 1,pattern.lastIndexOf('n') + 2,serialNumber);    pattern=sbNoReception.toString();    try {      sbNoReception.replace(pattern.indexOf('%') - 1,pattern.lastIndexOf('%') + 2,specialChar);    } catch (    Exception e) {    }    pattern=sbNoReception.toString();    if (pattern.contains(FIX_YEAR_PATTERN_TYPE_1)) {      pattern=StringUtil.replace(pattern,FIX_YEAR_PATTERN_TYPE_1,strYearTypeOne);    }    if (pattern.contains(FIX_YEAR_PATTERN_TYPE_2)) {      pattern=StringUtil.replace(pattern,FIX_YEAR_PATTERN_TYPE_2,strYearTypeTwo);    }    if (pattern.contains(FIX_MONTH_PATTERN)) {      pattern=StringUtil.replace(pattern,FIX_MONTH_PATTERN,strMonth);    }    if (pattern.contains(FIX_DAY_PATTERN)) {      pattern=StringUtil.replace(pattern,FIX_DAY_PATTERN,strDay);    }    noReception=pattern;  } else {    StringBuffer sbNoReceptionDefault=new StringBuffer();    String serialNumber=noGenarator(FIX_DEFAULT_SERIAL_NUMBER);    sbNoReceptionDefault.append(strYearTypeOne);    sbNoReceptionDefault.append(strMonth);    sbNoReceptionDefault.append(strDay);    sbNoReceptionDefault.append(serialNumber);    noReception=sbNoReceptionDefault.toString();  }  return noReception;}  }
class C{  protected void writeColumnNullableStmt(StringBuilder ddl){  ddl.append("NULL");}  }
class C{  public static OnScreenHint makeText(Context context,CharSequence text){  OnScreenHint result=new OnScreenHint(context);  LayoutInflater inflate=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View v=inflate.inflate(R.layout.on_screen_hint,null);  TextView tv=(TextView)v.findViewById(R.id.message);  tv.setText(text);  result.mNextView=v;  return result;}  }
class C{  private void createButtons(){  iconButton=new NoFocusButton("InternalFrameTitlePane.iconifyButtonAccessibleName");  iconButton.addActionListener(iconifyAction);  if (iconButtonToolTip != null && iconButtonToolTip.length() != 0) {    iconButton.setToolTipText(iconButtonToolTip);  }  maxButton=new NoFocusButton("InternalFrameTitlePane.maximizeButtonAccessibleName");  maxButton.addActionListener(maximizeAction);  closeButton=new NoFocusButton("InternalFrameTitlePane.closeButtonAccessibleName");  closeButton.addActionListener(closeAction);  if (closeButtonToolTip != null && closeButtonToolTip.length() != 0) {    closeButton.setToolTipText(closeButtonToolTip);  }  setButtonTooltips();}  }
class C{  @Deprecated CodenvyLicenseFactory(char[] productId,String publicKey){  this.productId=productId;  this.publicKey=publicKey;}  }
class C{  public void run(){  seqno=0;  try {    for (; ; ) {      if (seqno >= maxSeqno)       break;      seqno++;      counter.waitSeqnoGreaterEqual(seqno);      threadInterval.report(id,seqno,seqno);    }  } catch (  InterruptedException e) {  }catch (  Throwable t) {    throwable=t;  } finally {    done=true;  }}  }
class C{  public boolean isAttrFlagSet(String name,int flags){  return (null != m_attrs) ? ((m_attrs.getIgnoreCase(name) & flags) != 0) : false;}  }
class C{  private Reservation fakeReservation(){  return new Reservation().withInstances(Collections.singletonList(this.fakeInstance()));}  }
class C{  public SlavesStatusChecker createSlavesStatusChecker(Service service,NodeType nodeType){  Preconditions.checkNotNull(service);switch (nodeType) {case KubernetesSlave:    return new KubernetesStatusChecker(HostUtils.getKubernetesClient(service));case MesosSlave:  return new MesosStatusChecker(HostUtils.getMesosClient(service));case SwarmSlave:return new SwarmStatusChecker(HostUtils.getSwarmClient(service));default :throw new RuntimeException("Unsupported nodeType: " + nodeType.toString());}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeelementnodetype.class,args);}  }
class C{  public void reduce(Text key,Iterator<LongWritable> values,OutputCollector<Text,LongWritable> output,Reporter reporter) throws IOException {  long total=0;  while (values.hasNext()) {    total+=values.next().get();  }  output.collect(numNodes,new LongWritable(total));}  }
class C{  public void openMsrpSession() throws NetworkException, PayloadException {  mMsrpSession.getConnection().open();}  }
class C{  public static String padEnding(final String value,final char paddingCharacter,final int length){  if (value == null) {    throw new NullPointerException("The String value to pad cannot be null!");  }  final StringBuilder buffer=new StringBuilder(value);  for (int valueLength=value.length(); valueLength < length; valueLength++) {    buffer.append(paddingCharacter);  }  return buffer.toString();}  }
class C{  public double eval(double params[]){  return (params[0] * params[1]);}  }
class C{  @DSSink({DSSinkKind.PHONE_CONNECTION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.030 -0500",hash_original_method="B64AD173877EB61F2BA995A6B9586953",hash_generated_method="3BEC82F339A99D67F7E9DDFDF498F7D3") @Override protected void onDisconnectDone(int connId,AsyncResult ar){  if (DBG)   log("EVENT_DISCONNECT_DONE connId=" + connId);  String reason=null;  if (ar.userObj instanceof String) {    reason=(String)ar.userObj;  }  setState(State.IDLE);  if (mPendingRestartRadio)   removeMessages(EVENT_RESTART_RADIO);  CdmaServiceStateTracker ssTracker=mCdmaPhone.mSST;  if (ssTracker.processPendingRadioPowerOffAfterDataOff()) {    mPendingRestartRadio=false;  } else {    onRestartRadio();  }  notifyDataConnection(reason);  mActiveApn=null;  if (retryAfterDisconnected(reason)) {    startAlarmForReconnect(APN_DELAY_MILLIS,reason);  }}  }
class C{  private boolean matchingJSRcontext(OperandStack simStack,Operand[] simLocals,BasicBlockLE candBBLE){  if (DBG_INLINE_JSR) {    db("Matching JSR context of argument stack/locals against " + candBBLE);  }  int numRA=0;  if (simStack != null && candBBLE.isStackKnown()) {    for (int i=simStack.getSize() - 1; i >= 0; i--) {      Operand op=simStack.getFromTop(i);      if (op instanceof ReturnAddressOperand) {        if (numRA++ > MAX_RETURN_ADDRESSES) {          throw new OperationNotImplementedException("Too many subroutines");        }        if (DBG_INLINE_JSR)         db("simStack operand " + i + " is "+ op);        Operand cop=candBBLE.stackState.getFromTop(i);        if (!Operand.conservativelyApproximates(cop,op)) {          if (DBG_INLINE_JSR)           db("Not Matching: " + cop + " and "+ op);          return false;        } else {          if (DBG_INLINE_JSR)           db("operand " + cop + " is compatible with "+ op);        }      }    }  }  if (simLocals != null && candBBLE.isLocalKnown()) {    for (int i=0; i < simLocals.length; i++) {      Operand op=simLocals[i];      if (op instanceof ReturnAddressOperand) {        if (numRA++ > MAX_RETURN_ADDRESSES) {          throw new OperationNotImplementedException("Too many subroutines");        }        if (DBG_INLINE_JSR)         db("simLocal " + i + " is "+ op);        Operand cop=candBBLE.localState[i];        if (!Operand.conservativelyApproximates(cop,op)) {          if (DBG_INLINE_JSR)           db("Not Matching: " + cop + " and "+ op);          return false;        } else {          if (DBG_INLINE_JSR)           db("operand " + cop + " is compatible with "+ op);        }      }    }  }  if (DBG_INLINE_JSR)   db("Found " + candBBLE + " to be compatible");  return true;}  }
class C{  private String nameWithoutTaskID(String objectName){  int index=objectName.indexOf("-" + HADOOP_ATTEMPT);  if (index > 0) {    String attempt=objectName.substring(objectName.lastIndexOf("-") + 1);    try {      TaskAttemptID.forName(attempt);      return objectName.substring(0,index);    } catch (    IllegalArgumentException e) {      return objectName;    }  }  return objectName;}  }
class C{  public static char[] unboundedSignature(char[] signature){  if (signature == null || signature.length < 2)   return signature;  final boolean BUG_83600=true;  if (BUG_83600) {    signature=fix83600(signature);  }  StringBuffer res=new StringBuffer("(");  char[][] parameters=Signature.getParameterTypes(signature);  for (int i=0; i < parameters.length; i++) {    char[] param=parameters[i];    res.append(getLowerBound(param));  }  res.append(')');  res.append(getUpperBound(Signature.getReturnType(signature)));  return res.toString().toCharArray();}  }
class C{  public boolean matchesWildSimilar(final Sentence sentence){  if (state == ConversationStates.ANY) {    for (    Expression triggerExpr : triggers) {      if (triggerExpr.getNormalized().length() == 0) {        return true;      }      if (sentence.getTriggerExpression().matchesNormalizedSimilar(triggerExpr)) {        return true;      }    }  }  return false;}  }
class C{  void processFileAction(File file,String p1,String p2){  try {    if (m_actionIndex == 0)     ; else     if (m_actionIndex == 1)     replaceString(file,p1,p2); else     if (m_actionIndex == 2)     latex(file); else     if (m_actionIndex == 3)     license(file);  } catch (  Exception ex) {  }}  }
class C{  public void cut(int startIndex,int endIndex){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.cut(startIndex,endIndex);  }}  }
class C{  public VelocityScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  public static HllOptions parseHllOptions(SolrParams localParams,SchemaField field) throws SolrException {  String cardinalityOpt=localParams.get(Stat.cardinality.name());  if (StringUtils.isBlank(cardinalityOpt)) {    return null;  }  final LegacyNumericType hashableNumType=getHashableNumericType(field);  int log2m=13;  int regwidth=6;  if (LegacyNumericType.FLOAT.equals(hashableNumType) || LegacyNumericType.INT.equals(hashableNumType)) {    regwidth--;  }  try {    final double accuracyOpt=Double.parseDouble(cardinalityOpt);    if (accuracyOpt < 0D || 1.0D < accuracyOpt) {      throw new SolrException(ErrorCode.BAD_REQUEST,ERR);    }    log2m=HLL.MINIMUM_LOG2M_PARAM + (int)Math.round(accuracyOpt * (HLL.MAXIMUM_LOG2M_PARAM - HLL.MINIMUM_LOG2M_PARAM));    final int MIN_HUERISTIC_REGWIDTH=regwidth - 1;    regwidth=MIN_HUERISTIC_REGWIDTH + (int)Math.round(accuracyOpt * (HLL.MAXIMUM_REGWIDTH_PARAM - MIN_HUERISTIC_REGWIDTH));  } catch (  NumberFormatException nfe) {    if (!localParams.getBool(Stat.cardinality.name(),false)) {      return null;    }  }  log2m=localParams.getInt("hllLog2m",log2m);  regwidth=localParams.getInt("hllRegwidth",regwidth);  if (log2m < HLL.MINIMUM_LOG2M_PARAM || HLL.MAXIMUM_LOG2M_PARAM < log2m) {    throw new SolrException(ErrorCode.BAD_REQUEST,"hllLog2m must be at least " + HLL.MINIMUM_LOG2M_PARAM + " and at most "+ HLL.MAXIMUM_LOG2M_PARAM+ " ("+ log2m+ ")");  }  if (regwidth < HLL.MINIMUM_REGWIDTH_PARAM || HLL.MAXIMUM_REGWIDTH_PARAM < regwidth) {    throw new SolrException(ErrorCode.BAD_REQUEST,"hllRegwidth must be at least " + HLL.MINIMUM_REGWIDTH_PARAM + " and at most "+ HLL.MAXIMUM_REGWIDTH_PARAM);  }  HashFunction hasher=localParams.getBool("hllPreHashed",false) ? null : Hashing.murmur3_128();  if (null == hasher) {    if (null == field || !LegacyNumericType.LONG.equals(field.getType().getNumericType())) {      throw new SolrException(ErrorCode.BAD_REQUEST,"hllPreHashed is only supported with Long based fields");    }  }  return new HllOptions(log2m,regwidth,hasher);}  }
class C{  public synchronized int readFromFile(JDBCSequentialFile file,ByteBuffer bytes) throws SQLException {  connection.setAutoCommit(false);  readLargeObject.setInt(1,file.getId());  int readLength=0;  try (ResultSet rs=readLargeObject.executeQuery()){    if (rs.next()) {      Blob blob=rs.getBlob(1);      readLength=(int)calculateReadLength(blob.length(),bytes.remaining(),file.position());      byte[] data=blob.getBytes(file.position() + 1,readLength);      bytes.put(data);    }    connection.commit();    return readLength;  } catch (  Throwable e) {    connection.rollback();    throw e;  }}  }
class C{  public void testDeterminizeTooManyStates(){  String source="[ac]*a[ac]{50,200}";  TooComplexToDeterminizeException expected=expectThrows(TooComplexToDeterminizeException.class,null);  assertTrue(expected.getMessage().contains(source));}  }
class C{  public static void safeIncrBy(String counterName,int incVal){  com.twitter.heron.api.metric.GlobalMetrics.safeIncrBy(counterName,incVal);}  }
class C{  private void handleEndOfStream(State state,InnerState innerState) throws StopRequest {  mInfo.mCurrentBytes=innerState.mBytesSoFar;  mDB.updateDownload(mInfo);  boolean lengthMismatched=(innerState.mHeaderContentLength != null) && (innerState.mBytesSoFar != Integer.parseInt(innerState.mHeaderContentLength));  if (lengthMismatched) {    if (cannotResume(innerState)) {      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,"mismatched content length");    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"closed socket before end of file");    }  }}  }
class C{  @Interruptible public int[] finish(){  if ((gcMapInformation != null) && (lastGCMapEntry < gcMapInformation.length - 1)) {    resizeMapInformation(lastGCMapEntry + 1);  }  return gcMapInformation;}  }
class C{  public static String extractRegionFromZone(String zone){switch (zone) {case US_EAST1_B:case US_EAST1_C:case US_EAST1_D:    return EASTERN_US;case US_CENTRAL1_A:case US_CENTRAL1_B:case US_CENTRAL1_C:case US_CENTRAL1_F:  return CENTRAL_US;case EUROPE_WEST1_B:case EUROPE_WEST1_C:case EUROPE_WEST1_D:return WESTERN_EUROPE;case ASIA_EAST1_A:case ASIA_EAST1_B:case ASIA_EAST1_C:return EAST_ASIA;default :return UNKNOWN_REGION;}}  }
class C{  public synchronized boolean isNotificationEnabled(Notification notif) throws IllegalArgumentException {  if (notif == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled",notif);  String ntfType=notif.getType();  Vector<String> enabledTypes=getEnabledTypes();  if (!(enabledTypes.contains(ntfType))) {    RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","Type not selected, exiting");    return false;  }  MBeanServerNotification mbsNtf=(MBeanServerNotification)notif;  ObjectName objName=mbsNtf.getMBeanName();  boolean isSelectedFlg=false;  if (selectedNames != null) {    if (selectedNames.size() == 0) {      RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","No ObjectNames selected, exiting");      return false;    }    isSelectedFlg=selectedNames.contains(objName);    if (!isSelectedFlg) {      RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","ObjectName not in selected list, exiting");      return false;    }  }  if (!isSelectedFlg) {    if (deselectedNames == null) {      RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","ObjectName not selected, and all " + "names deselected, exiting");      return false;    } else     if (deselectedNames.contains(objName)) {      RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","ObjectName explicitly not selected, exiting");      return false;    }  }  RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","ObjectName selected, exiting");  return true;}  }
class C{  java.sql.Timestamp toSqlTimestamp(Calendar calendar){  return new java.sql.Timestamp(getTimeInMillis(calendar));}  }
class C{  public static void checkEntity(final DataObject object,final URI id,final boolean idEmbeddedInURL){  checkEntityNotNull(object,id,idEmbeddedInURL);  if (object.getInactive()) {    if (idEmbeddedInURL) {      throw APIException.notFound.entityInURLIsInactive(id);    } else {      throw APIException.badRequests.entityInRequestIsInactive(id);    }  }}  }
class C{  public boolean isSuspendedIndefinitely(){  return suspendedUntil == -1;}  }
class C{  public static boolean usingWindowsLnf(){  return usingLnf(WindowsLookAndFeel.class);}  }
class C{  public void or(BitVector other){  if (this == other)   return;  checkSize(other);  final long[] theBits=this.bits;  final long[] otherBits=other.bits;  for (int i=theBits.length; --i >= 0; )   theBits[i]|=otherBits[i];}  }
class C{  public static String substring(String str,int start){  if (str == null) {    return null;  }  if (start < 0) {    start=str.length() + start;  }  if (start < 0) {    start=0;  }  if (start > str.length()) {    return "";  }  return str.substring(start);}  }
class C{  public MessageQueueImpl(ClientId provider,AsyncLogWriter logWriter) throws Exception {  this.provider=provider;  this.providerDirPath=makePath(SystemProperties.getAsyncDBPath(),AsyncDBUtil.getQueueName(provider));  this.logWriter=logWriter;  if (providerDirPath == null) {    throw new IllegalStateException("Provider directory path cannot be null.");  }  String providerSavedStatus=new File(providerDirPath).exists() ? "SAVED" : "NOT SAVED";  LOG.debug("Created provider with directory path '{}', provider is {}.",providerDirPath,providerSavedStatus);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.332 -0500",hash_original_method="186376BCBF1440029A4A8EF9D3327AB7",hash_generated_method="EF685F710D479F00750620AFE7C916C4") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public boolean isEmpty(){  return super.isEmpty();}  }
class C{  public ToStringBuilder append(String fieldName,char[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  private void buildIconCache(){  for (  Icon i : Icon.values()) {    for (    String id : i.getIds()) {      BufferedImage bi=getImageResource(RESOURCES_DIR + id);      imageIcons.put(id,new ImageIcon(bi));      images.put(id,bi);    }  }}  }
class C{  public static <T0,T1,T2,T3,T4,T5,T6,T7>void print(T0 object0,T1 object1,T2 object2,T3 object3,T4 object4,T5 object5,T6 object6,T7 object7){  System.out.println("" + (object0 == null ? "NullType" : object0) + " "+ (object1 == null ? "NullType" : object1)+ " "+ (object2 == null ? "NullType" : object2)+ " "+ (object3 == null ? "NullType" : object3)+ " "+ (object4 == null ? "NullType" : object4)+ " "+ (object5 == null ? "NullType" : object5)+ " "+ (object6 == null ? "NullType" : object6)+ " "+ (object7 == null ? "NullType" : object7));}  }
class C{  public final boolean isType(int tc){  return typeCode == tc;}  }
class C{  private void addObjects(Map<String,LdapMod[]> objects){  if (objects != null && objects.size() > 0) {    for (    Map.Entry<String,LdapMod[]> entry : objects.entrySet()) {      connection.addObject(entry.getKey(),entry.getValue());    }  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public ButtonRow(Action[] actions,int orientation,int glue){  this(actions,orientation,glue,null);}  }
class C{  public void go(){  Gerrit.display(getTargetHistoryToken());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.610 -0400",hash_original_method="D3E288ED7DA392D21CF8B22BB98C6758",hash_generated_method="961E16E1A324629EAA5334AC9283309F") public void close(){  while (!mReceivers.isEmpty()) {    mContext.unregisterReceiver(mReceivers.remove(0));  }  if (mOutputWriter != null) {    try {      mOutputWriter.close();    } catch (    IOException e) {      Log.w(mTag,"Test output file could not be closed",e);    }  }}  }
class C{  private void convert(Problem problem,boolean reduced,ResultFileReader reader,PrintWriter writer){  int numberOfVariables=problem.getNumberOfVariables();  int numberOfObjectives=problem.getNumberOfObjectives();  if (reduced) {    numberOfVariables=0;  }  while (reader.hasNext()) {    ResultEntry entry=reader.next();    Population population=entry.getPopulation();    Properties properties=entry.getProperties();    if (population.isEmpty()) {      continue;    }    if (properties.containsKey("NFE")) {      writer.print(properties.getProperty("NFE"));    } else {      writer.print("0");    }    writer.print(" ");    if (properties.containsKey("ElapsedTime")) {      writer.println(properties.getProperty("ElapsedTime"));    } else {      writer.println("0");    }    writer.println("#");    for (    Solution solution : population) {      for (int i=0; i < numberOfVariables; i++) {        if (i > 0) {          writer.print(" ");        }        writer.print(solution.getVariable(i));      }      for (int i=0; i < numberOfObjectives; i++) {        if ((i > 0) || (numberOfVariables > 0)) {          writer.print(" ");        }        writer.print(solution.getObjective(i));      }      writer.println();    }    writer.println("#");  }}  }
class C{  protected void fireProjectionStackEvent(String command){  if (projListeners.isEmpty()) {    return;  }  ActionEvent event=new ActionEvent(this,0,command);  for (  ActionListener listener : projListeners) {    listener.actionPerformed(event);  }}  }
class C{  public JLBHOptions jitterAffinity(boolean jitterAffinity){  this.jitterAffinity=jitterAffinity;  return this;}  }
class C{  public MissingActionListenerMethodITCase(String name){  super(name);}  }
class C{  @Override public Point2D.Double locate(Figure owner){  Point2D.Double p=(Point2D.Double)owner.getStartPoint().clone();  if (owner instanceof TextHolderFigure) {    p.y+=((TextHolderFigure)owner).getFontSize();    p.y+=((TextHolderFigure)owner).getInsets().top;  } else {    p.y+=owner.get(FONT_SIZE);  }  if (owner.get(TRANSFORM) != null) {    owner.get(TRANSFORM).transform(p,p);  }  return p;}  }
class C{  public Bagging(Classifier baseClassifier,int extraSamples,boolean simultaniousTraining){  this(baseClassifier,extraSamples,simultaniousTraining,DEFAULT_ROUNDS,new Random(1));}  }
class C{  @Override final public boolean isRemoteService(){  return true;}  }
class C{  protected boolean[] canPredict(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("basic predict");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("any");  accepts.add("unary");  accepts.add("binary");  accepts.add("nominal");  accepts.add("numeric");  accepts.add("string");  accepts.add("date");  accepts.add("relational");  accepts.add("multi-instance");  accepts.add("not in classpath");  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  protected int trim(int df){  return df % BLOCK_SIZE == 0 ? df - 1 : df;}  }
class C{  synchronized public final void unmarkResourceAbsent(String resourceID){  this.possiblyAbsent.remove(resourceID);}  }
class C{  public ConfigurationHTTPAdapter configure() throws RuntimeException {  configure('/' + "esperio.http.cfg.xml");  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void initialize(FragmentManager fragmentManager){  AirMapInterface mapInterface=(AirMapInterface)fragmentManager.findFragmentById(R.id.map_frame);  if (mapInterface != null) {    initialize(fragmentManager,mapInterface);  } else {    initialize(fragmentManager,new DefaultAirMapViewBuilder(getContext()).builder().build());  }}  }
class C{  public ClassOrInterfaceDeclaration addInterface(String name,Modifier... modifiers){  ClassOrInterfaceDeclaration classOrInterfaceDeclaration=new ClassOrInterfaceDeclaration(Arrays.stream(modifiers).collect(Collectors.toCollection(null)),true,name);  getTypes().add(classOrInterfaceDeclaration);  classOrInterfaceDeclaration.setParentNode(this);  return classOrInterfaceDeclaration;}  }
class C{  static public void assertOffScreenBelow(View origin,View view){  int[] xy=new int[2];  view.getLocationOnScreen(xy);  int[] xyRoot=new int[2];  origin.getLocationOnScreen(xyRoot);  int y=xy[1] - xyRoot[1];  assertTrue("view should have y location on screen greater than drawing " + "height of origen view (" + y + " is not greater than "+ origin.getHeight()+ ")",y > origin.getHeight());}  }
class C{  @Override public void propertyChange(PropertyChangeEvent pce){  PluginOptionContainer container=getPlugin().getPluginOptions();  if (pce.getSource() instanceof OptionPayload) {    plugin.checkState();  } else   if (pce.getSource() == optionMustContainString) {    log().info("option == optionMustContainString");    if (optionMustContainString.isOn() && !container.contains(optionTheContainedString)) {      log().info("true == optionMustContainString.isOn()");      container.add(1 + container.indexOf(optionMustContainString),optionTheContainedString);    } else     if (container.contains(optionTheContainedString)) {      log().info("false == optionMustContainString.isOn()");      container.remove(optionTheContainedString);    }  } else   if (pce.getSource() == optionSchemaFiles) {    plugin.setUsedSchemaFiles(optionSchemaFiles.getFiles());  } else   if (pce.getSource() == optionUseSchema) {    log().info("Remove Schema Files Option");    if (!optionUseSchema.isOn() && container.contains(optionSchemaFiles)) {      container.remove(optionSchemaFiles);      plugin.setSchemaAnalyzerDepdingOnOption();    } else     if (!container.contains(optionSchemaFiles)) {      log().info("Add Schema Files Option");      container.add(1 + container.indexOf(optionUseSchema),optionSchemaFiles);    }  }  getPlugin().checkState();}  }
class C{  void add(final Sprite sprite){  add(sprite.getReference(),sprite);}  }
class C{  @ApiOperation(value="Updates factory information by its ID",notes="Updates factory based on the Factory ID which is passed in a path parameter") @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=403,message="User not authorized to call this operation"),@ApiResponse(code=404,message="Factory not found"),@ApiResponse(code=500,message="Internal Server Error")}) @PUT @Path("/{id}") @RolesAllowed("user") @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public Factory updateFactory(@ApiParam(value="Factory ID",required=true) @PathParam("id") String id,Factory newFactory) throws ApiException {  if (newFactory == null) {    throw new ServerException("The updating factory shouldn't be null");  }  Factory existingFactory=factoryStore.getFactory(id);  if (existingFactory == null) {    throw new NotFoundException("Factory with id " + id + " does not exist.");  }  final User user=EnvironmentContext.getCurrent().getUser();  String userId=user.getId();  factoryEditValidator.validate(existingFactory,userId);  processDefaults(newFactory);  newFactory.getCreator().withCreated(existingFactory.getCreator().getCreated());  newFactory.setId(existingFactory.getId());  createValidator.validateOnCreate(newFactory);  factoryStore.updateFactory(id,newFactory);  try {    newFactory.setLinks(linksHelper.createLinks(newFactory,factoryStore.getFactoryImages(id,null),uriInfo));  } catch (  UnsupportedEncodingException e) {    throw new ServerException(e.getLocalizedMessage());  }  return newFactory;}  }
class C{  public AbstractDrawing(){}  }
class C{  public void populate(ResultSet data,int start) throws SQLException {  int rowsFetched;  Row currentRow;  int numCols;  int i;  Map<String,Class<?>> map=getTypeMap();  Object obj;  int mRows;  cursorPos=0;  if (populatecallcount == 0) {    if (start < 0) {      throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.startpos").toString());    }    if (getMaxRows() == 0) {      data.absolute(start);      while (data.next()) {        totalRows++;      }      totalRows++;    }    startPos=start;  }  populatecallcount=populatecallcount + 1;  resultSet=data;  if ((endPos - startPos) >= getMaxRows() && (getMaxRows() > 0)) {    endPos=prevEndPos;    pagenotend=false;    return;  }  if ((maxRowsreached != getMaxRows() || maxRowsreached != totalRows) && pagenotend) {    startPrev=start - getPageSize();  }  if (pageSize == 0) {    prevEndPos=endPos;    endPos=start + getMaxRows();  } else {    prevEndPos=endPos;    endPos=start + getPageSize();  }  if (start == 1) {    resultSet.beforeFirst();  } else {    resultSet.absolute(start - 1);  }  if (pageSize == 0) {    rvh=new Vector<Object>(getMaxRows());  } else {    rvh=new Vector<Object>(getPageSize());  }  if (data == null) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.populate").toString());  }  RSMD=data.getMetaData();  RowSetMD=new RowSetMetaDataImpl();  initMetaData(RowSetMD,RSMD);  RSMD=null;  numCols=RowSetMD.getColumnCount();  mRows=this.getMaxRows();  rowsFetched=0;  currentRow=null;  if (!data.next() && mRows == 0) {    endPos=prevEndPos;    pagenotend=false;    return;  }  data.previous();  while (data.next()) {    currentRow=new Row(numCols);    if (pageSize == 0) {      if (rowsFetched >= mRows && mRows > 0) {        rowsetWarning.setNextException(new SQLException("Populating rows " + "setting has exceeded max row setting"));        break;      }    } else {      if ((rowsFetched >= pageSize) || (maxRowsreached >= mRows && mRows > 0)) {        rowsetWarning.setNextException(new SQLException("Populating rows " + "setting has exceeded max row setting"));        break;      }    }    for (i=1; i <= numCols; i++) {      if (map == null) {        obj=data.getObject(i);      } else {        obj=data.getObject(i,map);      }      if (obj instanceof Struct) {        obj=new SerialStruct((Struct)obj,map);      } else       if (obj instanceof SQLData) {        obj=new SerialStruct((SQLData)obj,map);      } else       if (obj instanceof Blob) {        obj=new SerialBlob((Blob)obj);      } else       if (obj instanceof Clob) {        obj=new SerialClob((Clob)obj);      } else       if (obj instanceof java.sql.Array) {        obj=new SerialArray((java.sql.Array)obj,map);      }      currentRow.initColumnObject(i,obj);    }    rowsFetched++;    maxRowsreached++;    rvh.add(currentRow);  }  numRows=rowsFetched;  notifyRowSetChanged();}  }
class C{  public Set<String> allowableTags(String form){  if (!table.containsKey(form)) {    HashSet<String> result=new HashSet<>();    if (form.equals(";"))     result.add(":"); else     if (looksLikeNumber(form))     result.add("CD");    return result;  }  return table.get(form).keySet();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  protected static int readShort(final byte[] data,final int offset){  return (data[offset] & 0xff) | (data[offset + 1] << 8);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:32.727 -0500",hash_original_method="999AC26E5377CA180C9B394D52C82ED1",hash_generated_method="4679440353C04430FA42F14E1BC2AF1A") @Override public void finish() throws IOException {  if (out == null) {    throw new IOException("Stream is closed");  }  if (cDir == null) {    return;  }  if (entries.isEmpty()) {    throw new ZipException("No entries");  }  if (currentEntry != null) {    closeEntry();  }  int cdirSize=cDir.size();  writeLong(cDir,ENDSIG);  writeShort(cDir,0);  writeShort(cDir,0);  writeShort(cDir,entries.size());  writeShort(cDir,entries.size());  writeLong(cDir,cdirSize);  writeLong(cDir,offset);  if (comment != null) {    writeShort(cDir,comment.length());    cDir.write(comment.getBytes());  } else {    writeShort(cDir,0);  }  out.write(cDir.toByteArray());  cDir=null;}  }
class C{  @Override void updateForDecoderNotID(int pMfgID,int pModelID){  String msg="Found mfg " + pMfgID + " version "+ pModelID+ "; no such manufacterer defined";  log.warn(msg);  _statusLabel.setText(msg);  mMfgList.setSelectedIndex(1);  mMfgList.clearSelection();  JComboBox<String> temp=DecoderIndexFile.instance().matchingComboBox(null,null,null,null,null,null);  mDecoderList.setModel(temp.getModel());  mDecoderList.clearSelection();}  }
class C{  public void breakpointReached(BreakpointEvent event){  try {    EventRequest req=event.request();    if (req != null) {      println("Deleting BreakpointRequest");      erm.deleteEventRequest(req);    } else {      println("Got BreakpointEvent with null request");    }  } catch (  Throwable exc) {    throwable=exc;    failure("Deleting BreakpointRequest threw - " + exc);  }}  }
class C{  public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  public JClassDependency(JClass cl,String digest){  _className=cl.getName();  String newDigest=getDigest();  if (!newDigest.equals(digest)) {    if (log.isLoggable(Level.FINE))     log.fine(_className + " digest is modified.");    _isDigestModified=true;  }}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public static UiResult redirectUrl(String url){  UiResult r=new UiResult();  r.url=url;  return r;}  }
class C{  public static ResultList<QueryEntry> SearchLocalQueries(final String q,final int resultCount,final String sort_field,final String default_sort_type,final SortOrder sort_order,final Date since,final Date until,final String range_field){  ResultList<QueryEntry> queries=new ResultList<>();  ResultList<Map<String,Object>> result=elasticsearch_client.fuzzyquery(IndexName.queries.name(),"query",q,resultCount,sort_field,default_sort_type,sort_order,since,until,range_field);  queries.setHits(result.getHits());  for (  Map<String,Object> map : result) {    queries.add(new QueryEntry(new JSONObject(map)));  }  return queries;}  }
class C{  private void calculateShortestPath(){  FloydWarshall_Float floyd=new FloydWarshall_Float();  floyd.initialize(mTotalNodeNum);  mDelayMatrix=floyd.allPairsShortestPaths(mDelayMatrix);}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  RelevanceModel.UserRelevanceModel<U,I> userRelModel=relModel.getModel(recommendation.getUser());  Set<F> subtopics=new HashSet<>();  int rank=0;  for (  Tuple2od<I> iv : recommendation.getItems()) {    if (userRelModel.isRelevant(iv.v1)) {      subtopics.addAll(featureData.getItemFeatures(iv.v1).map(null).collect(toList()));    }    rank++;    if (rank >= cutoff) {      break;    }  }  return subtopics.size() / (double)featureData.numFeatures();}  }
class C{  @Deprecated public static String[] readStrings(){  return readAllStrings();}  }
class C{  public static void checkVersion(short version) throws JdpException {  if (version > PROTOCOL_VERSION) {    throw new JdpException("Unsupported protocol version: " + version);  }}  }
class C{  public void releaseConnection(SQLiteConnection connection){synchronized (mLock) {    AcquiredConnectionStatus status=mAcquiredConnections.remove(connection);    if (status == null) {      throw new IllegalStateException("Cannot perform this operation " + "because the specified connection was not acquired " + "from this pool or has already been released.");    }    if (!mIsOpen) {      closeConnectionAndLogExceptionsLocked(connection);    } else     if (connection.isPrimaryConnection()) {      if (recycleConnectionLocked(connection,status)) {        assert mAvailablePrimaryConnection == null;        mAvailablePrimaryConnection=connection;      }      wakeConnectionWaitersLocked();    } else     if (mAvailableNonPrimaryConnections.size() >= mMaxConnectionPoolSize - 1) {      closeConnectionAndLogExceptionsLocked(connection);    } else {      if (recycleConnectionLocked(connection,status)) {        mAvailableNonPrimaryConnections.add(connection);      }      wakeConnectionWaitersLocked();    }  }}  }
class C{  public String base(){  return base;}  }
class C{  public static void attach(final JFrame parent,final IDebugger debugger,final CDebugEventNotifier notifier){  try {    notifier.start();    debugger.connect();  } catch (  final DebugExceptionWrapper exception) {    notifier.stop();    CUtilityFunctions.logException(exception);    final String innerMessage="E00082: " + "Could not attach to the debug client";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not attach to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The debugger process was not started yet. You can try to debug " + "the client again once you resolved the connection problems."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);  }}  }
class C{  public long toMillis(){  return TimeUnit.MILLISECONDS.convert(length,timeUnit);}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  Instances result;  int i;  int n;  int m;  int index;  Instances[] processed;  Instance inst;  Instance newInst;  double[] values;  Vector<Integer> errors;  if (!isFirstBatchDone()) {    checkDimensions();    for (i=0; i < m_Ranges.length; i++) {      m_Ranges[i].setUpper(instances.numAttributes() - 1);    }    determineUnusedIndices(instances);  }  processed=new Instances[getFilters().length];  for (i=0; i < getFilters().length; i++) {    processed[i]=generateSubset(instances,getRange(i));    if (!isFirstBatchDone()) {      getFilter(i).setInputFormat(processed[i]);    }    processed[i]=Filter.useFilter(processed[i],getFilter(i));  }  if (!isFirstBatchDone()) {    result=determineOutputFormat(instances);    setOutputFormat(result);  } else {    result=getOutputFormat();  }  errors=new Vector<Integer>();  for (i=0; i < processed.length; i++) {    if (processed[i].numInstances() != instances.numInstances()) {      errors.add(new Integer(i));    }  }  if (errors.size() > 0) {    throw new IllegalStateException("The following filter(s) changed the number of instances: " + errors);  }  for (i=0; i < instances.numInstances(); i++) {    inst=instances.instance(i);    values=new double[result.numAttributes()];    index=0;    for (n=0; n < processed.length; n++) {      for (m=0; m < processed[n].numAttributes(); m++) {        if (m == processed[n].classIndex()) {          continue;        }        if (result.attribute(index).isString()) {          values[index]=result.attribute(index).addStringValue(processed[n].instance(i).stringValue(m));        } else         if (result.attribute(index).isRelationValued()) {          values[index]=result.attribute(index).addRelation(processed[n].instance(i).relationalValue(m));        } else {          values[index]=processed[n].instance(i).value(m);        }        index++;      }    }    if (!getRemoveUnused()) {      for (n=0; n < m_IndicesUnused.length; n++) {        if (result.attribute(index).isString()) {          values[index]=result.attribute(index).addStringValue(inst.stringValue(m_IndicesUnused[n]));        } else         if (result.attribute(index).isRelationValued()) {          values[index]=result.attribute(index).addRelation(inst.relationalValue(m_IndicesUnused[n]));        } else {          values[index]=inst.value(m_IndicesUnused[n]);        }        index++;      }    }    if (instances.classIndex() > -1) {      values[values.length - 1]=inst.value(instances.classIndex());    }    if (inst instanceof SparseInstance) {      newInst=new SparseInstance(instances.instance(i).weight(),values);    } else {      newInst=new DenseInstance(instances.instance(i).weight(),values);    }    result.add(newInst);  }  return result;}  }
class C{  protected void handleException(Exception e){  e.printStackTrace();  String message=e.getMessage() == null ? e.toString() : e.getMessage();  if (e.getCause() != null && e.getCause().getMessage() != null) {    message+=" - " + e.getCause().getMessage();  }  JOptionPane.showMessageDialog(frame,message,"Error",JOptionPane.ERROR_MESSAGE);}  }
class C{  @RequestMapping(value="/payWatertax/{consumerNo},{ulbCode},{amountToBePaid},{mobileNumber},{emailId}",method=RequestMethod.GET) public String collectTax(final Model model,@PathVariable final String consumerNo,@PathVariable String ulbCode,@PathVariable BigDecimal amountToBePaid,@PathVariable String mobileNumber,@PathVariable String emailId,final HttpServletRequest request) throws ParseException {  String redirectUrl="";  BillInfoImpl billInfo=getBillInfo(consumerNo,amountToBePaid);  if (billInfo != null) {    PaymentRequest paymentRequest=SpringBeanUtil.getCollectionIntegrationService().processMobilePayments(billInfo);    if (paymentRequest != null) {      for (      Object obj : paymentRequest.getRequestParameters().values()) {        redirectUrl=obj.toString();      }      model.addAttribute("redirectUrl",redirectUrl);    }  } else {    model.addAttribute("errorMsg","Bill data is incorrect");    return PROPERTY_VALIDATION;  }  return PAYTAX_FORM;}  }
class C{  public boolean isBatteryLow(){  return level < LOW_BATTERY_THRESHOLD;}  }
class C{  final private ByteBuffer readFromFile(final long offset,final int length){  try {    final ByteBuffer dst=ByteBuffer.allocate(length);    FileChannelUtility.readAll(opener,dst,offset);    dst.flip();    return dst;  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public Object pop(){  Object element=null;  if (!super.empty()) {    element=super.pop();  }  return element;}  }
class C{  public void beginEntry(JarEntry je,ManifestEntryVerifier mev) throws IOException {  if (je == null)   return;  if (debug != null) {    debug.println("beginEntry " + je.getName());  }  String name=je.getName();  if (parsingMeta) {    String uname=name.toUpperCase(Locale.ENGLISH);    if ((uname.startsWith("META-INF/") || uname.startsWith("/META-INF/"))) {      if (je.isDirectory()) {        mev.setEntry(null,je);        return;      }      if (uname.equals(JarFile.MANIFEST_NAME) || uname.equals(JarIndex.INDEX_NAME)) {        return;      }      if (SignatureFileVerifier.isBlockOrSF(uname)) {        parsingBlockOrSF=true;        baos.reset();        mev.setEntry(null,je);        return;      }    }  }  if (parsingMeta) {    doneWithMeta();  }  if (je.isDirectory()) {    mev.setEntry(null,je);    return;  }  if (name.startsWith("./"))   name=name.substring(2);  if (name.startsWith("/"))   name=name.substring(1);  if (sigFileSigners.get(name) != null || verifiedSigners.get(name) != null) {    mev.setEntry(name,je);    return;  }  mev.setEntry(null,je);  return;}  }
class C{  public char[] findSource(IType type,String simpleSourceFileName){  long time=0;  if (VERBOSE) {    time=System.currentTimeMillis();  }  PackageFragment pkgFrag=(PackageFragment)type.getPackageFragment();  String name=org.eclipse.jdt.internal.core.util.Util.concatWith(pkgFrag.names,simpleSourceFileName,'/');  char[] source=null;  try {    if (this.rootPath != null) {      source=getSourceForRootPath(this.rootPath,name);    }    if (source == null) {      computeAllRootPaths(type);      if (this.rootPaths != null) {        loop:         for (Iterator iterator=this.rootPaths.iterator(); iterator.hasNext(); ) {          String currentRootPath=(String)iterator.next();          if (!currentRootPath.equals(this.rootPath)) {            source=getSourceForRootPath(currentRootPath,name);            if (source != null) {              this.rootPath=currentRootPath;              break loop;            }          }        }      }    }  }  finally {  }  if (VERBOSE) {    System.out.println("spent " + (System.currentTimeMillis() - time) + "ms for "+ type.getElementName());  }  return source;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("DateParser.parse");  try {    headerName(TokenTypes.DATE);    wkday();    lexer.match(',');    lexer.match(' ');    Calendar cal=date();    lexer.match(' ');    time(cal);    lexer.match(' ');    String tzone=this.lexer.ttoken().toLowerCase();    if (!"gmt".equals(tzone))     throw createParseException("Bad Time Zone " + tzone);    this.lexer.match('\n');    SIPDateHeader retval=new SIPDateHeader();    retval.setDate(cal);    return retval;  }  finally {    if (debug)     dbg_leave("DateParser.parse");  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  public final void add(final BlacklistType blacklistType,final String blacklistToUse,final String host,final String path) throws PunycodeException {  final String safeHost=Punycode.isBasic(host) ? host : MultiProtocolURL.toPunycode(host);  if (contains(blacklistType,safeHost,path)) {    return;  }  if (safeHost == null) {    throw new IllegalArgumentException("host may not be null");  }  if (path == null) {    throw new IllegalArgumentException("path may not be null");  }  String p=(!path.isEmpty() && path.charAt(0) == '/') ? path.substring(1) : path;  final Map<String,Set<Pattern>> blacklistMap=getBlacklistMap(blacklistType,isMatchable(host));  final String h=((!isMatchable(safeHost) && !safeHost.isEmpty() && safeHost.charAt(0) == '*') ? "." + safeHost : safeHost).toLowerCase();  if (!p.isEmpty() && p.charAt(0) == '*') {    p="." + p;  }  Set<Pattern> hostList;  if (!(blacklistMap.containsKey(h) && ((hostList=blacklistMap.get(h)) != null))) {    blacklistMap.put(h,(hostList=new HashSet<Pattern>()));  }  Pattern pattern=Pattern.compile(p,Pattern.CASE_INSENSITIVE);  hostList.add(pattern);  PrintWriter pw=null;  try {    final String newEntry=h + "/" + pattern;    if (!blacklistFileContains(blacklistRootPath,blacklistToUse,newEntry)) {      pw=new PrintWriter(new FileWriter(new File(blacklistRootPath,blacklistToUse),true));      pw.println(newEntry);      pw.close();    }  } catch (  final IOException e) {    ConcurrentLog.logException(e);  } finally {    if (pw != null) {      try {        pw.close();      } catch (      final Exception e) {        log.warn("could not close stream to " + blacklistToUse + "! "+ e.getMessage());      }    }  }}  }
class C{  public String verbosityTipText(){  return "The verbosity option.";}  }
class C{  String readMonth(String source,int ofs,String token,boolean adjacent){  if (token.length() < 3) {    if (adjacent) {      return source.substring(ofs,ofs + token.length());    }    if (isNumeric(source.charAt(0))) {      return readNumber(source,ofs,token,adjacent);    }  }  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i);  for (  String month : getDateFormatSymbols().getMonths()) {    if (fragment.equalsIgnoreCase(month)) {      return source.substring(ofs,ofs + month.length());    }  }  for (  String month : getDateFormatSymbols().getShortMonths()) {    if (fragment.equalsIgnoreCase(month)) {      return source.substring(ofs,ofs + month.length());    }  }  return null;}  }
class C{  public int run(String[] args) throws IOException, InterruptedException, ClassNotFoundException {  final CommandLineParser cmdLineParser=new BasicParser();  final Options options=constructOptions();  CommandLine commandLine;  try {    commandLine=cmdLineParser.parse(options,args);  } catch (  ParseException e) {    LOG.error("Encountered exception while parsing using GnuParser: ",e);    printUsage(options,System.out);    System.out.println();    ToolRunner.printGenericCommandUsage(System.out);    return 1;  }  if (!commandLine.hasOption(SOURCE_DIRECTORY_ARG) || !commandLine.hasOption(DESTINATION_DIRECTORY_ARG)) {    printUsage(options,System.out);    return 1;  }  if (!commandLine.hasOption(LOG_DIRECTORY_ARG)) {    printUsage(options,System.out);    return 1;  }  boolean dryRun=commandLine.hasOption(DRY_RUN_ARG);  Path srcDir=new Path(commandLine.getOptionValue(SOURCE_DIRECTORY_ARG));  Path destDir=new Path(commandLine.getOptionValue(DESTINATION_DIRECTORY_ARG));  String operationsStr=commandLine.getOptionValue(OPERATIONS_ARG);  String tmpDirStr=commandLine.getOptionValue(TEMP_DIRECTORY_ARG);  String blacklistRegex=commandLine.getOptionValue(BLACKLIST_ARG);  if (blacklistRegex != null) {    getConf().set(DIRECTORY_BLACKLIST_REGEX,blacklistRegex);    LOG.info("Blacklist: " + blacklistRegex);  }  if (!dryRun && tmpDirStr == null) {    LOG.error("Temporary directory must be specified");    return -1;  }  if (this.getConf().getBoolean(MRJobConfig.MAP_SPECULATIVE,true)) {    LOG.warn("Turning off speculative mappers in configuration");    getConf().set(MRJobConfig.MAP_SPECULATIVE,"false");  }  if (this.getConf().getBoolean(MRJobConfig.REDUCE_SPECULATIVE,true)) {    LOG.warn("Turning off speculative reducers in configuration");    getConf().set(MRJobConfig.REDUCE_SPECULATIVE,"false");  }  Path logPath=new Path(commandLine.getOptionValue(LOG_DIRECTORY_ARG));  FileSystem fs=logPath.getFileSystem(getConf());  if (!fs.exists(logPath)) {    LOG.info("Creating " + logPath);  } else   if (FsUtils.getSize(getConf(),logPath,Optional.empty()) != 0) {    LOG.error("Log directory already exists and is not empty: " + logPath);    return -1;  }  Path stage1LogDir=new Path(logPath,"stage1");  Path stage2LogDir=new Path(logPath,"stage2");  if (dryRun) {    LOG.info("Starting stage 1 with log directory " + stage1LogDir);    return runDirectoryComparisonJob(srcDir,destDir,stage1LogDir,operationsStr);  } else {    Path tmpDir=new Path(tmpDirStr);    if (!FsUtils.dirExists(getConf(),destDir)) {      LOG.warn("Destination directory does not exist. Creating " + destDir);      FileSystem destFs=destDir.getFileSystem(getConf());      fs.mkdirs(destDir);    }    LOG.info("Starting stage 1 with log directory " + stage1LogDir);    if (runDirectoryComparisonJob(srcDir,destDir,stage1LogDir,operationsStr) == 0) {      LOG.info("Starting stage 2 with log directory " + stage2LogDir);      return runSyncJob(srcDir,destDir,tmpDir,stage1LogDir,stage2LogDir);    } else {      return -1;    }  }}  }
class C{  private Object readResolve(){  return this;}  }
class C{  protected boolean updateFromStrategyThreadOnly(long currTimeFromPhoneBootMs){  if (gpsOn) {    long startTime=lastGpsStatsUpdateFromPhoneBootMs > gpsAttemptStartedFromPhoneBootMs ? lastGpsStatsUpdateFromPhoneBootMs : gpsAttemptStartedFromPhoneBootMs;    totalTimeGpsRunningMs+=currTimeFromPhoneBootMs - startTime;  }  long gpsTimeAvailable=calcFreeGpsTimeMs(currTimeFromPhoneBootMs);  if (gpsTimeAvailable > prefs.maxGpsTimeMs) {    totalTimeGpsRunningMs=(long)((currTimeFromPhoneBootMs - startTimeFromPhoneBootMs) * prefs.batteryGpsOnTimePercentage) - prefs.maxGpsTimeMs + 1;    gpsTimeAvailable=prefs.maxGpsTimeMs;  }  if (gpsOn) {    long currentTimeGpsRunning=currTimeFromPhoneBootMs - gpsAttemptStartedFromPhoneBootMs;    if (currentTimeGpsRunning >= desireManager.currTimeWanted || gpsTimeAvailable <= 0 || lastReadingSuccessful) {      gpsAttemptEndedFromPhoneBootMs=currTimeFromPhoneBootMs;      if (lastReadingSuccessful) {        desireManager.updateDesiresForSuccessfulReading(gpsAttemptEndedFromPhoneBootMs - gpsAttemptStartedFromPhoneBootMs);        lastReadingSuccessful=false;      } else       desireManager.updateDesiresForUnsuccessfulReading(gpsTimeAvailable);      nextSignificantEvent=desireManager.waitTimeMs + currTimeFromPhoneBootMs;      return false;    } else {      nextSignificantEvent=desireManager.currTimeWanted - currentTimeGpsRunning + currTimeFromPhoneBootMs;      return true;    }  } else {    long currentTimeWaiting=currTimeFromPhoneBootMs - gpsAttemptEndedFromPhoneBootMs;    if (currentTimeWaiting >= desireManager.waitTimeMs) {      gpsAttemptStartedFromPhoneBootMs=currTimeFromPhoneBootMs;      long timeToLeaveGpsOn=desireManager.currTimeWanted;      if (desireManager.currTimeWanted > gpsTimeAvailable) {        intentTimer.writeDebug("WARNING: gps desire manager has asked for more than allowed time," + " gpsTimeAvailable: " + gpsTimeAvailable + ", desireManager.currTimeWanted: "+ desireManager.currTimeWanted);        timeToLeaveGpsOn=gpsTimeAvailable;      }      nextSignificantEvent=timeToLeaveGpsOn + currTimeFromPhoneBootMs;      gpsAttempts++;      return true;    } else {      nextSignificantEvent=desireManager.waitTimeMs + gpsAttemptEndedFromPhoneBootMs;      return false;    }  }}  }
class C{  public void execute(){  System.out.println("A");  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  Parameters params=getParams();  if (model instanceof Graph) {    GraphScore gesScore=new GraphScore((Graph)model);    fgs=new Fgs(gesScore);    fgs.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));    fgs.setVerbose(true);  } else {    double penaltyDiscount=params.getDouble("penaltyDiscount",4);    if (model instanceof DataSet) {      DataSet dataSet=(DataSet)model;      if (dataSet.isContinuous()) {        SemBicScore gesScore=new SemBicScore(new CovarianceMatrixOnTheFly((DataSet)model));        gesScore.setPenaltyDiscount(penaltyDiscount);        System.out.println("Score done");        fgs=new Fgs(gesScore);      } else       if (dataSet.isDiscrete()) {        double samplePrior=getParams().getDouble("samplePrior",1);        double structurePrior=getParams().getDouble("structurePrior",1);        BDeuScore score=new BDeuScore(dataSet);        score.setSamplePrior(samplePrior);        score.setStructurePrior(structurePrior);        fgs=new Fgs(score);      } else {        MixedBicScore gesScore=new MixedBicScore(dataSet);        gesScore.setPenaltyDiscount(penaltyDiscount);        fgs=new Fgs(gesScore);      }    } else     if (model instanceof ICovarianceMatrix) {      SemBicScore gesScore=new SemBicScore((ICovarianceMatrix)model);      gesScore.setPenaltyDiscount(penaltyDiscount);      gesScore.setPenaltyDiscount(penaltyDiscount);      fgs=new Fgs(gesScore);    } else     if (model instanceof DataModelList) {      DataModelList list=(DataModelList)model;      for (      DataModel dataModel : list) {        if (!(dataModel instanceof DataSet || dataModel instanceof ICovarianceMatrix)) {          throw new IllegalArgumentException("Need a combination of all continuous data sets or " + "covariance matrices, or else all discrete data sets, or else a single initialGraph.");        }      }      if (list.size() != 1) {        throw new IllegalArgumentException("FGS takes exactly one data set, covariance matrix, or initialGraph " + "as input. For multiple data sets as input, use IMaGES.");      }      if (allContinuous(list)) {        double penalty=getParams().getDouble("penaltyDiscount",4);        if (params.getBoolean("firstNontriangular",false)) {          SemBicScoreImages fgsScore=new SemBicScoreImages(list);          fgsScore.setPenaltyDiscount(penalty);          fgs=new Fgs(fgsScore);        } else {          SemBicScoreImages fgsScore=new SemBicScoreImages(list);          fgsScore.setPenaltyDiscount(penalty);          fgs=new Fgs(fgsScore);        }      } else       if (allDiscrete(list)) {        double structurePrior=getParams().getDouble("structurePrior",1);        double samplePrior=getParams().getDouble("samplePrior",1);        BdeuScoreImages fgsScore=new BdeuScoreImages(list);        fgsScore.setSamplePrior(samplePrior);        fgsScore.setStructurePrior(structurePrior);        if (params.getBoolean("firstNontriangular",false)) {          fgs=new Fgs(fgsScore);        } else {          fgs=new Fgs(fgsScore);        }      } else {        throw new IllegalArgumentException("Data must be either all discrete or all continuous.");      }    } else {      System.out.println("No viable input.");    }  }  fgs.setInitialGraph(initialGraph);  fgs.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  fgs.setNumPatternsToStore(params.getInt("numPatternsToSave",1));  fgs.setVerbose(true);  fgs.setFaithfulnessAssumed(params.getBoolean("faithfulnessAssumed",true));  Graph graph=fgs.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);  this.topGraphs=new ArrayList<>(fgs.getTopGraphs());  if (topGraphs.isEmpty()) {    topGraphs.add(new ScoredGraph(getResultGraph(),Double.NaN));  }  setIndex(topGraphs.size() - 1);}  }
class C{  public Color mixDyes(final DyeColor... colors){  final Color[] toPass=new Color[colors.length];  for (int i=0; i < colors.length; i++) {    toPass[i]=colors[i].getColor();  }  return this.mixColors(toPass);}  }
class C{  public void buildNetwork(){  Neuron firstNeuron=new Neuron(network,DEFAULT_NEURON_TYPE);  List<Neuron> currentLayer=new ArrayList<Neuron>();  firstNeuron.setPosition(initialPosition);  currentLayer.add(firstNeuron);  int numNeuronsLastLayer=(int)Math.pow(numBrachesPerNeuron,numLayers);  double totalSpace=numNeuronsLastLayer * horizontalSpacing;  for (int layerIndex=1; layerIndex <= numLayers; layerIndex++) {    List<Neuron> tempList=new ArrayList<Neuron>();    double layerSpacing=totalSpace / (int)Math.pow(numBrachesPerNeuron,layerIndex);    double branchWidth=layerSpacing * (numBrachesPerNeuron - 1);    for (    Neuron baseNeuron : currentLayer) {      network.addNeuron(baseNeuron);      double initialXOffset=branchWidth / 2;      for (int j=0; j < numBrachesPerNeuron; j++) {        Neuron targetNeuron=new Neuron(network,new LinearRule());        targetNeuron.setLocation(baseNeuron.getX() - initialXOffset + (j * layerSpacing),initialPosition.y - (layerIndex * verticalSpacing));        tempList.add(targetNeuron);        network.addNeuron(targetNeuron);        targetNeuron.setUpdatePriority(layerIndex);        Synapse synapse=new Synapse(network,baseNeuron,targetNeuron,new StaticSynapseRule());        network.addSynapse(synapse);      }    }    currentLayer=tempList;  }}  }
class C{  public void remove_app(@NonNull InstalledApp app){  int pos=_installed_apps.indexOf(app);  if (pos != -1) {    notifyItemRemoved(pos);    _installed_apps.remove(pos);  }}  }
class C{  public NavMouseMode2(boolean shouldConsumeEvents){  super(shouldConsumeEvents);}  }
class C{  @RequestMapping(method=GET,value="stop") @ResponseBody public Object stopRecording() throws BusinessException {  storageService.stopRecording();  return Collections.singletonMap("message","Recording stopped.");}  }
class C{  public InjectedInitialization(Problem problem,int populationSize,Solution... injectedSolutions){  this(problem,populationSize,Arrays.asList(injectedSolutions));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public KernelCount[][] computeMatchesForEachObservations(boolean giveListOfCorrelatedPoints) throws Exception {  KernelCount[][] counts=new KernelCount[totalObservations][4];  for (int b=0; b < totalObservations; b++) {    int timeSeries=timeSeriesIndex[b];    double[] source=vectorOfSourceObservations.elementAt(timeSeries);    double[] dest=vectorOfDestinationObservations.elementAt(timeSeries);    int[] intCounts=getCounts(source,dest,timeStepIndex[b],timeSeries);    counts[b]=new KernelCount[4];    for (int i=0; i < 4; i++) {      int totalObsCount=0;      if (dynCorrExcl) {        int observationsInSameTimeSeries=dest.length;        int obsIndexInItsTimeSeries=timeStepIndex[b] - k;        int closeTimePointsToCompare=(obsIndexInItsTimeSeries >= dynCorrExclTime) ? dynCorrExclTime - 1 : obsIndexInItsTimeSeries;        closeTimePointsToCompare+=(observationsInSameTimeSeries - obsIndexInItsTimeSeries >= dynCorrExclTime) ? dynCorrExclTime - 1 : observationsInSameTimeSeries - obsIndexInItsTimeSeries - 1;        closeTimePointsToCompare++;        totalObsCount=totalObservations - closeTimePointsToCompare;      } else {        totalObsCount=totalObservations;      }      counts[b][i]=new KernelCount(intCounts[i],totalObsCount);    }  }  return counts;}  }
class C{  private Widget packWidget(int dpi,LauncherAppWidgetProviderInfo info){  Widget widget=new Widget();  widget.provider=info.provider.flattenToShortString();  widget.label=info.label;  widget.configure=info.configure != null;  if (info.icon != 0) {    widget.icon=new Resource();    Drawable fullResIcon=mIconCache.getFullResIcon(info.provider.getPackageName(),info.icon);    Bitmap icon=Utilities.createIconBitmap(fullResIcon,mContext);    widget.icon.data=Utilities.flattenBitmap(icon);    widget.icon.dpi=dpi;  }  return widget;}  }
class C{  public SearchRequest(String[] indices,byte[] source){  indices(indices);  this.source=new BytesArray(source);}  }
class C{  public DocumentImpl(){}  }
class C{  public TestSource(String packageName,String className,Modifier... modifiers){  this.packageName=packageName;  this.className=className;  this.modifiers=modifiers;}  }
class C{  byte[] concatenateByteArrays(byte[]... byteArrays) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  for (  byte[] array : byteArrays) {    outputStream.write(array);  }  return outputStream.toByteArray();}  }
class C{  public BezierPathIterator(BezierPath path){  this(path,null);}  }
class C{  private void checkAndRemoveFromClientMsgsRegion(Conflatable conflatable){  if (haContainer == null) {    return;  }  if (conflatable instanceof HAEventWrapper) {    HAEventWrapper wrapper=(HAEventWrapper)conflatable;    if (!wrapper.getIsRefFromHAContainer()) {      wrapper=(HAEventWrapper)haContainer.getKey(wrapper);      if (wrapper != null && !wrapper.getPutInProgress()) {synchronized (wrapper) {          if (wrapper.getReferenceCount() == 0L) {            if (logger.isDebugEnabled()) {              logger.debug("Removing event from haContainer: {}",wrapper);            }            haContainer.remove(wrapper);          }        }      }    } else {      wrapper.setClientUpdateMessage(null);      wrapper.setPutInProgress(false);synchronized (wrapper) {        if (wrapper.getReferenceCount() == 0L) {          if (logger.isDebugEnabled()) {            logger.debug("Removing event from haContainer: {}",wrapper);          }          haContainer.remove(wrapper);        }      }    }  }}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[j][i]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public final <C extends Component>C add(C component){  if (has(component.getClass())) {    throw new ComponentException("Attempt to add two components of the type %s to " + this,component);  }  put(component.getClass(),component);  component.setProvider(ComponentProvider.this);  events.publish(new ComponentAdded(component));  return component;}  }
class C{  ZipStreamImpl(ZipEntry zipEntry,ZipInputStream zIn,String pathName){  _zipEntry=zipEntry;  _zis=zIn;}  }
class C{  public ConnectIOException(String s){  super(s);}  }
class C{  public static void merge(final Network networkA,final String prefixA,final Network networkB,final String prefixB,final Network mergedNetwork){  double capacityFactor=mergedNetwork.getCapacityPeriod() / networkA.getCapacityPeriod();  NetworkFactory factory=mergedNetwork.getFactory();  for (  Node node : networkA.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(prefixA + node.getId().toString(),Node.class),node.getCoord());    mergedNetwork.addNode(node2);  }  for (  Link link : networkA.getLinks().values()) {    Id<Node> fromNodeId=Id.create(prefixA + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(prefixA + link.getToNode().getId().toString(),Node.class);    Node fromNode=mergedNetwork.getNodes().get(fromNodeId);    Node toNode=mergedNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(prefixA + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    mergedNetwork.addLink(link2);    fromNode.addOutLink(link2);    toNode.addInLink(link2);  }  capacityFactor=mergedNetwork.getCapacityPeriod() / networkB.getCapacityPeriod();  for (  Node node : networkB.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(prefixB + node.getId().toString(),Node.class),node.getCoord());    mergedNetwork.addNode(node2);  }  for (  Link link : networkB.getLinks().values()) {    Id<Node> fromNodeId=Id.create(prefixB + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(prefixB + link.getToNode().getId().toString(),Node.class);    Node fromNode=mergedNetwork.getNodes().get(fromNodeId);    Node toNode=mergedNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(prefixB + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    mergedNetwork.addLink(link2);    fromNode.addOutLink(link2);    toNode.addInLink(link2);  }}  }
class C{  public PageContextImpl initialize(HttpServlet servlet,HttpServletRequest req,HttpServletResponse rsp,String errorPageURL,boolean needsSession,int bufferSize,boolean autoFlush,boolean isChild,boolean ignoreScopes){  appListenerType=ApplicationListener.TYPE_NONE;  this.ignoreScopes=ignoreScopes;  requestId=counter++;  ReqRspUtil.setContentType(rsp,"text/html; charset=" + config.getWebCharset().name());  this.isChild=isChild;  applicationContext=defaultApplicationContext;  startTime=System.currentTimeMillis();  thread=Thread.currentThread();  this.req=new HTTPServletRequestWrap(req);  this.rsp=rsp;  this.servlet=servlet;  if (config.debugLogOutput()) {    CFMLWriter w=config.getCFMLWriter(this,req,rsp);    w.setAllowCompression(false);    DebugCFMLWriter dcw=new DebugCFMLWriter(w);    bodyContentStack.init(dcw);    debugger.setOutputLog(dcw);  } else {    bodyContentStack.init(config.getCFMLWriter(this,req,rsp));  }  writer=bodyContentStack.getWriter();  forceWriter=writer;  server=ScopeContext.getServerScope(this,ignoreScopes);  if (hasFamily) {    variablesRoot=new VariablesImpl();    variables=variablesRoot;    request=new RequestImpl();    _url=new URLImpl();    _form=new FormImpl();    urlForm=new UrlFormImpl(_form,_url);    undefined=new UndefinedImpl(this,getScopeCascadingType());    hasFamily=false;  } else   if (variables == null) {    variablesRoot=new VariablesImpl();    variables=variablesRoot;  }  request.initialize(this);  if (config.mergeFormAndURL()) {    url=urlForm;    form=urlForm;  } else {    url=_url;    form=_form;  }  psq=config.getPSQL();  fdEnabled=!config.allowRequestTimeout();  if (config.getExecutionLogEnabled())   this.execLog=config.getExecutionLogFactory().getInstance(this);  if (debugger != null)   debugger.init(config);  undefined.initialize(this);  return this;}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public void initialize(ScriptCollectionLoader loader,Object sling){  ScriptEngineManager scriptEngineManager=new ScriptEngineManager(null);  engine=scriptEngineManager.getEngineByName("nashorn");  engine.getContext().setErrorWriter(new Print());  engine.getContext().setWriter(new Print());  engine.put("console",new Console());  engine.put("Sling",sling);  this.loader=loader;  scriptChecksums=new HashMap<>();  updateJavascriptLibrary();}  }
class C{  public int compare(Object obj1,Object obj2){  int v1[]=((LabelVector)obj1).values;  int v2[]=((LabelVector)obj2).values;  if (A.sum(v1) > A.sum(v2)) {    return -1;  } else   if (A.sum(v1) < A.sum(v2)) {    return 1;  } else {    return 0;  }}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.DISJUNCTION;}  }
class C{  public final boolean checkValid(final int i){  Exam.assertTrue(i + ":" + toString(),valid(i));  return true;}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,int[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public static Instances mergeInstances(Instances first,Instances second){  if (first.numInstances() != second.numInstances()) {    throw new IllegalArgumentException("Instance sets must be of the same size");  }  ArrayList<Attribute> newAttributes=new ArrayList<Attribute>();  for (  Attribute att : first.m_Attributes) {    newAttributes.add(att);  }  for (  Attribute att : second.m_Attributes) {    newAttributes.add((Attribute)att.copy());  }  Instances merged=new Instances(first.relationName() + '_' + second.relationName(),newAttributes,first.numInstances());  for (int i=0; i < first.numInstances(); i++) {    merged.add(first.instance(i).mergeInstance(second.instance(i)));  }  return merged;}  }
class C{  public static String startEditor(Container jc,String header,String text,boolean editable,int maxSize){  JFrame frame=Env.getFrame(jc);  String hdr=header;  if (hdr == null || hdr.length() == 0)   hdr=Msg.getMsg(Env.getCtx(),"Editor");  Editor ed=new Editor(frame,hdr,text,editable,maxSize);  AEnv.showCenterWindow(frame,ed);  String s=ed.getText();  ed=null;  return s;}  }
class C{  public static <E,L extends List<E>>UnmodifiableMutableList<E> of(L list){  if (list == null) {    throw new IllegalArgumentException("cannot create an UnmodifiableMutableList for null");  }  if (list instanceof RandomAccess) {    return new RandomAccessUnmodifiableMutableList<>(RandomAccessListAdapter.adapt(list));  }  return new UnmodifiableMutableList<>(ListAdapter.adapt(list));}  }
class C{  public Table(String schema,String name){  int i;  this.schema=schema;  this.name=name;  this.allColumns=new ArrayList<Column>();  this.nonKeyColumns=new ArrayList<Column>();  this.keys=new ArrayList<Key>();  this.uniqueKeys=new ArrayList<Key>();  this.scn=null;  this.tableId=-1;  this.statements=new PreparedStatement[Table.NPREPPED];  this.cacheStatements=false;  for (i=0; i < Table.NPREPPED; i++)   this.statements[i]=null;}  }
class C{  public void writeXml(java.io.Writer writer) throws SQLException {  if (xmlWriter != null) {    curPosBfrWrite=this.getRow();    xmlWriter.writeXML(this,writer);  } else {    throw new SQLException(resBundle.handleGetObject("webrowsetimpl.invalidwr").toString());  }}  }
class C{  private static void innerGetUsesOfUserDefinedOps(SemanticNode node,Vector<ExprOrOpArgNode> found){  if (hasUserDefinedOp(node)) {    found.add((ExprOrOpArgNode)node);  }  SemanticNode[] children=node.getChildren();  if (children == null) {    return;  }  for (int i=0; i < children.length; i++) {    final SemanticNode sn=children[i];    if (sn != null) {      if (node.getLocation().source().equals(sn.getLocation().source())) {        innerGetUsesOfUserDefinedOps(sn,found);      }    }  }  return;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.241 -0500",hash_original_method="3252974D26894AAD7C4FB2AFA441C9B3",hash_generated_method="65E8DD258BD4C129EA0C583051839A10") protected int wkday() throws ParseException {  dbg_enter("wkday");  try {    String tok=lexer.ttoken();    String id=tok.toLowerCase();    if (TokenNames.MON.equalsIgnoreCase(id))     return Calendar.MONDAY; else     if (TokenNames.TUE.equalsIgnoreCase(id))     return Calendar.TUESDAY; else     if (TokenNames.WED.equalsIgnoreCase(id))     return Calendar.WEDNESDAY; else     if (TokenNames.THU.equalsIgnoreCase(id))     return Calendar.THURSDAY; else     if (TokenNames.FRI.equalsIgnoreCase(id))     return Calendar.FRIDAY; else     if (TokenNames.SAT.equalsIgnoreCase(id))     return Calendar.SATURDAY; else     if (TokenNames.SUN.equalsIgnoreCase(id))     return Calendar.SUNDAY; else     throw createParseException("bad wkday");  }  finally {    dbg_leave("wkday");  }}  }
class C{  private static void addRange(final Object builder,final int valSize,long minBound,long maxBound,final int shift){  maxBound|=(1L << shift) - 1L;switch (valSize) {case 64:    ((LongRangeBuilder)builder).addRange(minBound,maxBound,shift);  break;case 32:((IntRangeBuilder)builder).addRange((int)minBound,(int)maxBound,shift);break;default :throw new IllegalArgumentException("valSize must be 32 or 64.");}}  }
class C{  public static void main(final String[] args){  Set<Class<?>> processedClasses=new HashSet<Class<?>>();  classLibrary=args[0];  RVMClassLoader.init(args[1]);  destinationDir=args[2] + "/";  setup();  for (  AnnotatedElement elem : thingsToAnnotate.keySet()) {    try {      Class<?> c=getClassForElement(elem);      if (!processedClasses.contains(c)) {        adaptClass(c.getName());        processedClasses.add(c);      }    } catch (    Exception e) {      throw new Error("Error processing " + elem,e);    }  }  Set<String> processedClasses2=new HashSet<String>();  for (  ElementTriple triple : thingsToAnnotate2.keySet()) {    String c=triple.getClassName();    if (!processedClasses2.contains(c)) {      adaptClass(c);      processedClasses2.add(c);    }  }  for (  AnnotatedElement elem : annotatedElements) {    thingsToAnnotate.remove(elem);  }  for (  ElementTriple triple : annotatedElements2) {    thingsToAnnotate2.remove(triple);  }  if (thingsToAnnotate.size() > 0 || thingsToAnnotate2.size() > 0) {    for (    AnnotatedElement elem : thingsToAnnotate.keySet()) {      System.out.println("Error finding element to annotate: " + elem);    }    for (    ElementTriple triple : thingsToAnnotate2.keySet()) {      System.out.println("Error finding element to annotate: " + triple);    }    throw new Error("Error finding elements to annotate");  }}  }
class C{  public void destroy(){  log.info("");}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:58.292 -0500",hash_original_method="48F1E682C4A714972A38A39D612B5275",hash_generated_method="D0676D1AFF49D70AC248B711D650CDA6") public FactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  public byte[] toByteArray(){  final byte[] b=new byte[this.len];  if (this.len > 0) {    System.arraycopy(this.buffer,0,b,0,this.len);  }  return b;}  }
class C{  public static String indentStr(int level){  String retVal="";  for (int x=0; x < level; x++)   retVal+="\t";  return retVal;}  }
class C{  public void suppressTestAllSpeed128Packets(){  int[] result=new int[100];  int addressRange, speedRange;  byte buffer[]=new byte[6];  boolean test_retval, Direction;  Direction=true;  test_retval=MakePacket.setPreambleLength(15);  Assert.assertTrue(test_retval);  for (addressRange=0; addressRange < 10239; addressRange++) {    for (speedRange=0; speedRange < 127; speedRange++) {      Direction=true;      buffer=NmraPacket.speedStep128Packet(addressRange,true,speedRange,Direction);      result=MakePacket.createStream(buffer);      if (result[0] == 0) {        Assert.assertEquals("test 128 speed forward direction (long addresses) -  invalid lenght",10,result[0]);      }      Direction=false;      buffer=NmraPacket.speedStep128Packet(addressRange,true,speedRange,Direction);      result=MakePacket.createStream(buffer);      if (result[0] == 0) {        Assert.assertEquals("test 128 speed backward direction (long addresses) -  invalid lenght",10,result[0]);      }    }  }  for (addressRange=0; addressRange < 127; addressRange++) {    for (speedRange=0; speedRange < 127; speedRange++) {      buffer=NmraPacket.speedStep128Packet(addressRange,false,speedRange,Direction);      result=MakePacket.createStream(buffer);      if (result[0] == 0) {        Assert.assertEquals("test 128 speed (short addresses) -  invalid lenght",10,result[0]);      }    }  }}  }
class C{  protected void showSystemMenu(){}  }
class C{  public SeqNoRange clientHandshake(long lastEpochNumber,long lastSeqno,int heartbeatMillis,String lastEventId,String remoteLogin,String remotePassword) throws ReplicatorException, IOException {  ProtocolMessage handshake=readMessage();  if (handshake instanceof ProtocolHandshake == false)   throw new THLException("Invalid handshake");  ProtocolHandshake protocolHandshake=(ProtocolHandshake)handshake;  serverCapabilities=new TungstenProperties(protocolHandshake.getCapabilities());  logger.info("Received master handshake: options=" + serverCapabilities.toString());  ProtocolHandshakeResponse response=new ProtocolHandshakeResponse(pluginContext.getSourceId(),lastEpochNumber,lastSeqno,heartbeatMillis);  response.setOption(VERSION,ManifestParser.parseReleaseWithBuildNumber());  response.setOption(ProtocolParams.RMI_HOST,rmiHost);  response.setOption(ProtocolParams.RMI_PORT,Integer.toString(rmiPort));  boolean authRequired=serverCapabilities.getBoolean(AUTH_REQUIRED);  if (authRequired) {    if (remoteLogin == null) {      logger.warn("THL server requires authentication but remote login is not specified");    } else     if (remotePassword == null) {      logger.warn("THL server requires authentication but password is not available: remoteLogin=" + remoteLogin);    }    response.setOption(ProtocolParams.REMOTE_LOGIN,remoteLogin);    response.setOption(ProtocolParams.REMOTE_PASSWORD,remotePassword);  }  if (lastEventId != null)   response.setOption(ProtocolParams.INIT_EVENT_ID,lastEventId);  writeMessage(response);  ProtocolMessage okOrNok=readMessage();  if (okOrNok instanceof ProtocolOK) {    return (SeqNoRange)okOrNok.getPayload();  } else   if (okOrNok instanceof ProtocolNOK) {    String msg=(String)okOrNok.getPayload();    throw new THLException("Client handshake failure: " + msg);  } else {    throw new THLException("Unexpected server response: " + okOrNok.getClass().getName());  }}  }
class C{  public static void main(String[] args){  String inputFileDef="db/CreateLoadFileDef.csv";  String outPutFileName="C:\\Temp\\CCILoadFile.csv";  Tradingdays.createLoadFile(inputFileDef,outPutFileName);}  }
class C{  private static boolean hasProperty(JSONObject json,String propertyName){  return json.get(propertyName) != null;}  }
class C{  public static EvolutionState restoreFromCheckpoint(String checkpoint) throws IOException, ClassNotFoundException, OptionalDataException {  ObjectInputStream s=new ObjectInputStream(new GZIPInputStream(new BufferedInputStream(new FileInputStream(checkpoint))));  EvolutionState e=(EvolutionState)s.readObject();  s.close();  e.resetFromCheckpoint();  return e;}  }
class C{  public java_cup.runtime.Symbol next_token() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 9:{        yybegin(STRING);        m_String.setLength(0);      }case 40:    break;case 25:{    return m_SymFactory.newSymbol("Abs",sym.ABS);  }case 41:break;case 1:{System.err.println("Illegal character: " + yytext());}case 42:break;case 15:{m_String.append(yytext());}case 43:break;case 21:{return m_SymFactory.newSymbol("Sin",sym.SIN);}case 44:break;case 14:{return m_SymFactory.newSymbol("Right Bracket",sym.RPAREN);}case 45:break;case 11:{}case 46:break;case 17:{return m_SymFactory.newSymbol("Less or equal than",sym.LE);}case 47:break;case 28:{return m_SymFactory.newSymbol("Pow",sym.POW);}case 48:break;case 8:{return m_SymFactory.newSymbol("Greater than",sym.GT);}case 49:break;case 16:{yybegin(YYINITIAL);return m_SymFactory.newSymbol("String",sym.STRING,new String(m_String.toString()));}case 50:break;case 23:{return m_SymFactory.newSymbol("Tan",sym.TAN);}case 51:break;case 12:{return m_SymFactory.newSymbol("Comma",sym.COMMA);}case 52:break;case 19:{return m_SymFactory.newSymbol("Is",sym.IS);}case 53:break;case 13:{return m_SymFactory.newSymbol("Left Bracket",sym.LPAREN);}case 54:break;case 29:{return m_SymFactory.newSymbol("Cos",sym.COS);}case 55:break;case 33:{return m_SymFactory.newSymbol("Ceil",sym.CEIL);}case 56:break;case 6:{return m_SymFactory.newSymbol("Less than",sym.LT);}case 57:break;case 4:{return m_SymFactory.newSymbol("Times",sym.TIMES);}case 58:break;case 37:{return m_SymFactory.newSymbol("Class",sym.ATTRIBUTE,new String(yytext()));}case 59:break;case 36:{return m_SymFactory.newSymbol("Floor",sym.FLOOR);}case 60:break;case 27:{return m_SymFactory.newSymbol("Log",sym.LOG);}case 61:break;case 35:{return m_SymFactory.newSymbol("False",sym.FALSE);}case 62:break;case 31:{return m_SymFactory.newSymbol("True",sym.TRUE);}case 63:break;case 7:{return m_SymFactory.newSymbol("Equals",sym.EQ);}case 64:break;case 38:{return m_SymFactory.newSymbol("Regexp",sym.REGEXP);}case 65:break;case 18:{return m_SymFactory.newSymbol("Greater or equal than",sym.GE);}case 66:break;case 26:{return m_SymFactory.newSymbol("Exp",sym.EXP);}case 67:break;case 20:{return m_SymFactory.newSymbol("Or",sym.OR);}case 68:break;case 34:{return m_SymFactory.newSymbol("Attribute",sym.ATTRIBUTE,new String(yytext()));}case 69:break;case 30:{return m_SymFactory.newSymbol("Sqrt",sym.SQRT);}case 70:break;case 5:{return m_SymFactory.newSymbol("Division",sym.DIVISION);}case 71:break;case 22:{return m_SymFactory.newSymbol("Not",sym.NOT);}case 72:break;case 10:{return m_SymFactory.newSymbol("Number",sym.NUMBER,new Double(yytext()));}case 73:break;case 3:{return m_SymFactory.newSymbol("Plus",sym.PLUS);}case 74:break;case 39:{return m_SymFactory.newSymbol("Missing",sym.ISMISSING);}case 75:break;case 32:{return m_SymFactory.newSymbol("Rint",sym.RINT);}case 76:break;case 24:{return m_SymFactory.newSymbol("And",sym.AND);}case 77:break;case 2:{return m_SymFactory.newSymbol("Minus",sym.MINUS);}case 78:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{return m_SymFactory.newSymbol("EOF",sym.EOF);}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public Properties loadProperties(String artifact,String version) throws IOException {  Properties props=new Properties();  Path propertiesFile=getPropertiesFile(artifact,version);  if (!Files.exists(propertiesFile)) {    throw new ArtifactNotFoundException(artifact,version);  }  try (InputStream in=new BufferedInputStream(Files.newInputStream(propertiesFile))){    props.load(in);  }   return props;}  }
class C{  private static List<String> buildSuperClassList(PsiClass psiClass,List<String> packages){  if (psiClass == null || psiClass.getQualifiedName().equals("java.lang.Object")) {    return packages;  } else {    packages.add(psiClass.getQualifiedName());    return buildSuperClassList(psiClass.getSuperClass(),packages);  }}  }
class C{  public long term(){  return term;}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public HamerlyKMeans(DistanceMetric dm,SeedSelectionMethods.SeedSelection seedSelection,Random rand){  super(dm,seedSelection,rand);}  }
class C{  void resetForm(){  Element parent=getFormElement();  if (parent != null) {    ElementIterator it=new ElementIterator(parent);    Element next;    while ((next=it.next()) != null) {      if (isControl(next)) {        AttributeSet elemAttr=next.getAttributes();        Object m=elemAttr.getAttribute(StyleConstants.ModelAttribute);        if (m instanceof TextAreaDocument) {          TextAreaDocument doc=(TextAreaDocument)m;          doc.reset();        } else         if (m instanceof PlainDocument) {          try {            PlainDocument doc=(PlainDocument)m;            doc.remove(0,doc.getLength());            if (HTMLDocument.matchNameAttribute(elemAttr,HTML.Tag.INPUT)) {              String value=(String)elemAttr.getAttribute(HTML.Attribute.VALUE);              if (value != null) {                doc.insertString(0,value,null);              }            }          } catch (          BadLocationException e) {          }        } else         if (m instanceof OptionListModel) {          OptionListModel model=(OptionListModel)m;          int size=model.getSize();          for (int i=0; i < size; i++) {            model.removeIndexInterval(i,i);          }          BitSet selectionRange=model.getInitialSelection();          for (int i=0; i < selectionRange.size(); i++) {            if (selectionRange.get(i)) {              model.addSelectionInterval(i,i);            }          }        } else         if (m instanceof OptionComboBoxModel) {          OptionComboBoxModel model=(OptionComboBoxModel)m;          Option option=model.getInitialSelection();          if (option != null) {            model.setSelectedItem(option);          }        } else         if (m instanceof JToggleButton.ToggleButtonModel) {          boolean checked=((String)elemAttr.getAttribute(HTML.Attribute.CHECKED) != null);          JToggleButton.ToggleButtonModel model=(JToggleButton.ToggleButtonModel)m;          model.setSelected(checked);        }      }    }  }}  }
class C{  public static BasicKeyChain fromProtobufUnencrypted(List<Protos.Key> keys) throws UnreadableWalletException {  BasicKeyChain chain=new BasicKeyChain();  chain.deserializeFromProtobuf(keys);  return chain;}  }
class C{  protected FinalizableSoftReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public GregorianCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute,int second){  this(year,month,dayOfMonth,hourOfDay,minute,second,0);}  }
class C{  public MethodNotFoundException(Throwable cause){  super(cause);}  }
class C{  protected boolean isTactileTouch(int x,int y){  return isTactileTouch();}  }
class C{  public static <T>T min(Iterator<T> self,Comparator<T> comparator){  return min((Iterable<T>)toList(self),comparator);}  }
class C{  public Class<? extends PrefixMatcher> bindPrefixMatcher(){  return FQNPrefixMatcher.class;}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession();  MobileSessionCtx wsc=MobileSessionCtx.get(request);  Properties ctx=wsc.ctx;  if (ctx == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  MWorkflow wf=(MWorkflow)sess.getAttribute(WORKFLOW);  MWFNode[] nodes=(MWFNode[])sess.getAttribute(NODES);  ArrayList nodes_ID=(ArrayList)sess.getAttribute(NODES_ID);  int[][] imageMap=(int[][])sess.getAttribute(IMAGE_MAP);  int activeNode=((Integer)sess.getAttribute(ACTIVE_NODE)).intValue();  String m_command=request.getParameter(M_Command);  int j_command=MobileUtil.getParameterAsInt(request,J_Command);  executeCommand(m_command,j_command,wf,activeNode,nodes,nodes_ID,sess);  wf=(MWorkflow)sess.getAttribute(WORKFLOW);  nodes=(MWFNode[])sess.getAttribute(NODES);  nodes_ID=(ArrayList)sess.getAttribute(NODES_ID);  imageMap=(int[][])sess.getAttribute(IMAGE_MAP);  activeNode=((Integer)sess.getAttribute(ACTIVE_NODE)).intValue();  MobileDoc doc=preparePage("loginInfo");  doc=createLayout(doc,wf,activeNode,nodes,nodes_ID,imageMap);  MobileUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  private boolean processOrder(HttpServletRequest request,MOrder order){  String DocAction=WebUtil.getParameter(request,"DocAction");  if (DocAction == null || DocAction.length() == 0)   return false;  MDocType dt=MDocType.get(order.getCtx(),order.getC_DocType_ID());  if (!order.isSOTrx() || order.getGrandTotal().compareTo(Env.ZERO) <= 0 || !MDocType.DOCBASETYPE_SalesOrder.equals(dt.getDocBaseType())) {    log.warning("Not a valid Sales Order " + order);    return true;  }  log.fine("DocAction=" + DocAction);  if (!MOrder.DOCACTION_Void.equals(DocAction)) {    if (MOrder.STATUS_WaitingPayment.equals(order.getDocStatus()))     return false;    if (MDocType.DOCSUBTYPESO_PrepayOrder.equals(dt.getDocSubTypeSO()))     return false;    if (!MOrder.DOCACTION_Complete.equals(DocAction)) {      log.warning("Invalid DocAction=" + DocAction);      return true;    }  }  order.setDocAction(DocAction,true);  boolean ok=order.processIt(DocAction);  order.saveEx();  return ok;}  }
class C{  private <T>List<T> copyList(List<T> list){  if (list == null)   return null; else   return new LinkedList<T>(list);}  }
class C{  public void renderBeginningBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  if (this.widgetCommentsEnabled) {    writer.append(this.buildBoundaryComment("Begin",widgetType,modelWidget.getBoundaryCommentName()));  }}  }
class C{  public void applyAzEl(double azimuth,double elevation){}  }
class C{  public FastItemAdapter<Item> withFilterPredicate(IItemAdapter.Predicate<Item> filterPredicate){  this.mItemAdapter.withFilterPredicate(filterPredicate);  return this;}  }
class C{  @Inline public static Object moveObject(Address toAddress,Object fromObj,int numBytes,RVMArray type){  return moveObject(toAddress,fromObj,null,numBytes);}  }
class C{  public static boolean isEffectSupported(String effectName){  return getEffectClassByName(effectName) != null;}  }
class C{  public void configure(){  DCCppOverTcpPacketizer packets=new DCCppOverTcpPacketizer(new DCCppCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setDCCppTrafficController(packets);  new DCCppInitializationManager(this.getSystemConnectionMemo());  packets.startThreads();}  }
class C{  public double weight(){  return weight;}  }
class C{  public final AC growPrio(int p){  return growPrio(p,curIx);}  }
class C{  public byte byteAt(int i){  if (i < 0 || i > _length)   throw new RuntimeException();  return _buffer[i];}  }
class C{  public static void postAsync(String url,final HttpCallback callback,List<StrParam> strParams){  postAsync(url,null,callback,Util.listToParams(strParams,StrParam.class));}  }
class C{  @Override public void close() throws IOException {  super.close();}  }
class C{  SolrInputDocument doc(SolrInputField... fields){  SolrInputDocument d=new SolrInputDocument();  for (  SolrInputField f : fields) {    d.put(f.getName(),f);  }  return d;}  }
class C{  private String generateScopeId(){  HttpSession session=request.getSession();  String scopeId=UUID.randomUUID().toString();  String sessionKey=SCOPE_ID + "-" + scopeId;synchronized (this) {    while (session.getAttribute(sessionKey) != null) {      scopeId=UUID.randomUUID().toString();      sessionKey=SCOPE_ID + "-" + scopeId;    }    session.setAttribute(sessionKey,new HashMap<>());    request.setAttribute(SCOPE_ID,scopeId);  }  return scopeId;}  }
class C{  public void putLongArray(String key,long[] value){  unparcel();  mMap.put(key,value);}  }
class C{  @Override public void findAll(Result<Iterable<byte[]>> result,byte[] tableKey,String sql,Object[] args){  try {    TableKraken table=_tableManager.getTable(tableKey);    if (table == null) {      throw new QueryException(L.l("'{0}' is an unknown table.",Hex.toShortHex(tableKey)));    }    QueryBuilderKraken builder=QueryParserKraken.parse(_tableManager,sql);    QueryKraken query=builder.build();    query.findAllLocalKeys(result,args);  } catch (  Throwable e) {    result.fail(e);  }}  }
class C{  public JDialog displayPanelInWindow(final JPanel panel,String title){  JDialog frame=new GenericJDialog();  frame.setContentPane(panel);  frame.pack();  frame.setTitle(title);  frame.setVisible(true);  return frame;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ContentNode.class) {switch (derivedFeatureID) {case DomPackage.SIMPLE_TYPE_REFERENCE__OWNER:      return DomPackage.CONTENT_NODE__OWNER;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @Override public boolean onKeyPreIme(int keyCode,KeyEvent event){  if (TextUtils.isEmpty(getText().toString()) && keyCode == KeyEvent.KEYCODE_DEL)   return true; else   return super.onKeyPreIme(keyCode,event);}  }
class C{  private void logMessage(String msg,Object[] obj){  if (getMonitoringPropertiesLoader().isToLogIndications()) {    _logger.debug(msg,obj);  }}  }
class C{  protected AbstractMRReply newReply(){  return new IEEE802154Reply();}  }
class C{  public Statement like(String expr){  statement.append(" LIKE ");  appendEscapedSQLString(statement,expr);  return this;}  }
class C{  public int length(){  return length;}  }
class C{  public static double gamma(double x){  double P[]={1.60119522476751861407E-4,1.19135147006586384913E-3,1.04213797561761569935E-2,4.76367800457137231464E-2,2.07448227648435975150E-1,4.94214826801497100753E-1,9.99999999999999996796E-1};  double Q[]={-2.31581873324120129819E-5,5.39605580493303397842E-4,-4.45641913851797240494E-3,1.18139785222060435552E-2,3.58236398605498653373E-2,-2.34591795718243348568E-1,7.14304917030273074085E-2,1.00000000000000000320E0};  double p, z;  int i;  double q=Math.abs(x);  if (q > 33.0) {    if (x < 0.0) {      p=Math.floor(q);      if (p == q)       throw new ArithmeticException("gamma: overflow");      i=(int)p;      z=q - p;      if (z > 0.5) {        p+=1.0;        z=q - p;      }      z=q * Math.sin(Math.PI * z);      if (z == 0.0)       throw new ArithmeticException("gamma: overflow");      z=Math.abs(z);      z=Math.PI / (z * stirlingFormula(q));      return -z;    } else {      return stirlingFormula(x);    }  }  z=1.0;  while (x >= 3.0) {    x-=1.0;    z*=x;  }  while (x < 0.0) {    if (x == 0.0) {      throw new ArithmeticException("gamma: singular");    } else     if (x > -1.E-9) {      return (z / ((1.0 + 0.5772156649015329 * x) * x));    }    z/=x;    x+=1.0;  }  while (x < 2.0) {    if (x == 0.0) {      throw new ArithmeticException("gamma: singular");    } else     if (x < 1.e-9) {      return (z / ((1.0 + 0.5772156649015329 * x) * x));    }    z/=x;    x+=1.0;  }  if ((x == 2.0) || (x == 3.0))   return z;  x-=2.0;  p=polevl(x,P,6);  q=polevl(x,Q,7);  return z * p / q;}  }
class C{  public int size(){  return size;}  }
class C{  private static void swap(int a,int b,Object[] arr){  Object tmp=arr[a];  arr[a]=arr[b];  arr[b]=tmp;}  }
class C{  @Override public void doTests(){  if (getClusterer() == null) {    println("\n=== No clusterer set ===");    return;  }  println("\n=== Check on Clusterer: " + getClusterer().getClass().getName() + " ===\n");  println("--> Checking for interfaces");  canTakeOptions();  boolean updateable=updateableClusterer()[0];  boolean weightedInstancesHandler=weightedInstancesHandler()[0];  boolean multiInstanceHandler=multiInstanceHandler()[0];  println("--> Clusterer tests");  declaresSerialVersionUID();  runTests(weightedInstancesHandler,multiInstanceHandler,updateable);}  }
class C{  @Override public String toString(){  return Float.toString(value);}  }
class C{  public final void changeOneSource(int index,RegisterSpec newSpec){  RegisterSpecList origSources=insn.getSources();  int sz=origSources.size();  RegisterSpecList newSources=new RegisterSpecList(sz);  for (int i=0; i < sz; i++) {    newSources.set(i,i == index ? newSpec : origSources.get(i));  }  newSources.setImmutable();  RegisterSpec origSpec=origSources.get(index);  if (origSpec.getReg() != newSpec.getReg()) {    getBlock().getParent().onSourceChanged(this,origSpec,newSpec);  }  insn=insn.withNewRegisters(getResult(),newSources);}  }
class C{  private void incrementGrandTotal(){  this.grandTotal++;}  }
class C{  public boolean isNull(String key){  return get(key) == null;}  }
class C{  public void parseGotoByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());  stream.skipWhitespace();  boolean gotoFinally=stream.peekWord().toLowerCase().equals(FINALLY);  if (gotoFinally) {    stream.nextWord();    dataStream.writeLong(network.createVertex(Primitive.FINALLY).getId());  }  parseElementByteCode(stream,dataStream,elements,debug,network);  if (stream.peek() != ';') {    if (stream.peekWord().toLowerCase().equals(WITH)) {      dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());      stream.skipWord();      stream.skipWhitespace();      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        parseElementByteCode(stream,dataStream,elements,debug,network);        stream.skipWhitespace();        while (stream.peek() == ',') {          stream.skip();          stream.skipWhitespace();          parseElementByteCode(stream,dataStream,elements,debug,network);        }        ensureNext(')',stream);        dataStream.writeLong(0l);      } else {        parseElementByteCode(stream,dataStream,elements,debug,network);        dataStream.writeLong(0l);      }    }  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public static SpsData parseSpsNalUnit(ParsableBitArray bitArray){  int profileIdc=bitArray.readBits(8);  bitArray.skipBits(16);  bitArray.readUnsignedExpGolombCodedInt();  int chromaFormatIdc=1;  if (profileIdc == 100 || profileIdc == 110 || profileIdc == 122 || profileIdc == 244 || profileIdc == 44 || profileIdc == 83 || profileIdc == 86 || profileIdc == 118 || profileIdc == 128 || profileIdc == 138) {    chromaFormatIdc=bitArray.readUnsignedExpGolombCodedInt();    if (chromaFormatIdc == 3) {      bitArray.skipBits(1);    }    bitArray.readUnsignedExpGolombCodedInt();    bitArray.readUnsignedExpGolombCodedInt();    bitArray.skipBits(1);    boolean seqScalingMatrixPresentFlag=bitArray.readBit();    if (seqScalingMatrixPresentFlag) {      int limit=(chromaFormatIdc != 3) ? 8 : 12;      for (int i=0; i < limit; i++) {        boolean seqScalingListPresentFlag=bitArray.readBit();        if (seqScalingListPresentFlag) {          skipScalingList(bitArray,i < 6 ? 16 : 64);        }      }    }  }  bitArray.readUnsignedExpGolombCodedInt();  long picOrderCntType=bitArray.readUnsignedExpGolombCodedInt();  if (picOrderCntType == 0) {    bitArray.readUnsignedExpGolombCodedInt();  } else   if (picOrderCntType == 1) {    bitArray.skipBits(1);    bitArray.readSignedExpGolombCodedInt();    bitArray.readSignedExpGolombCodedInt();    long numRefFramesInPicOrderCntCycle=bitArray.readUnsignedExpGolombCodedInt();    for (int i=0; i < numRefFramesInPicOrderCntCycle; i++) {      bitArray.readUnsignedExpGolombCodedInt();    }  }  bitArray.readUnsignedExpGolombCodedInt();  bitArray.skipBits(1);  int picWidthInMbs=bitArray.readUnsignedExpGolombCodedInt() + 1;  int picHeightInMapUnits=bitArray.readUnsignedExpGolombCodedInt() + 1;  boolean frameMbsOnlyFlag=bitArray.readBit();  int frameHeightInMbs=(2 - (frameMbsOnlyFlag ? 1 : 0)) * picHeightInMapUnits;  if (!frameMbsOnlyFlag) {    bitArray.skipBits(1);  }  bitArray.skipBits(1);  int frameWidth=picWidthInMbs * 16;  int frameHeight=frameHeightInMbs * 16;  boolean frameCroppingFlag=bitArray.readBit();  if (frameCroppingFlag) {    int frameCropLeftOffset=bitArray.readUnsignedExpGolombCodedInt();    int frameCropRightOffset=bitArray.readUnsignedExpGolombCodedInt();    int frameCropTopOffset=bitArray.readUnsignedExpGolombCodedInt();    int frameCropBottomOffset=bitArray.readUnsignedExpGolombCodedInt();    int cropUnitX, cropUnitY;    if (chromaFormatIdc == 0) {      cropUnitX=1;      cropUnitY=2 - (frameMbsOnlyFlag ? 1 : 0);    } else {      int subWidthC=(chromaFormatIdc == 3) ? 1 : 2;      int subHeightC=(chromaFormatIdc == 1) ? 2 : 1;      cropUnitX=subWidthC;      cropUnitY=subHeightC * (2 - (frameMbsOnlyFlag ? 1 : 0));    }    frameWidth-=(frameCropLeftOffset + frameCropRightOffset) * cropUnitX;    frameHeight-=(frameCropTopOffset + frameCropBottomOffset) * cropUnitY;  }  float pixelWidthHeightRatio=1;  boolean vuiParametersPresentFlag=bitArray.readBit();  if (vuiParametersPresentFlag) {    boolean aspectRatioInfoPresentFlag=bitArray.readBit();    if (aspectRatioInfoPresentFlag) {      int aspectRatioIdc=bitArray.readBits(8);      if (aspectRatioIdc == NalUnitUtil.EXTENDED_SAR) {        int sarWidth=bitArray.readBits(16);        int sarHeight=bitArray.readBits(16);        if (sarWidth != 0 && sarHeight != 0) {          pixelWidthHeightRatio=(float)sarWidth / sarHeight;        }      } else       if (aspectRatioIdc < NalUnitUtil.ASPECT_RATIO_IDC_VALUES.length) {        pixelWidthHeightRatio=NalUnitUtil.ASPECT_RATIO_IDC_VALUES[aspectRatioIdc];      } else {        Log.w(TAG,"Unexpected aspect_ratio_idc value: " + aspectRatioIdc);      }    }  }  return new SpsData(frameWidth,frameHeight,pixelWidthHeightRatio);}  }
class C{  public XML removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void addListener(final IModuleListener listener){  m_listeners.addListener(listener);}  }
class C{  protected boolean forceAddWithoutCheck(Solution newSolution){  return super.add(newSolution);}  }
class C{  public void testFollowerRejectsVoteRequestWithLesserTerm() throws Throwable {  runOnServer(null);}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<E>(list,mutex);  }  return this;}  }
class C{  protected boolean isValidSerializedType(MetadataClass cls){  if (cls.isPrimitive()) {    return false;  }  if (isPrimitiveWrapperClass(cls)) {    return false;  }  if (LobMetadata.isValidLobType(cls)) {    return false;  }  if (TemporalMetadata.isValidTemporalType(cls)) {    return false;  }  return true;}  }
class C{  public boolean isLoaded(){  return mLoadingFiles.size() == 0;}  }
class C{  public void update(List<String> newItems){  items.clear();  for (  String item : newItems) {    if (item != null && !item.isEmpty()) {      items.add(new HighlightItem(item));    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private EvDispatcher(){  halt=false;  queue=new LinkedBlockingQueue<Packet>(Cfg.EV_QUEUE_LEN);  evidences=new HashMap<Long,Evidence>();  if (Cfg.DEBUG) {    setName(getClass().getSimpleName());  }}  }
class C{  private GridH2Null(){}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(host.length() + 8);  if (host.indexOf(':') >= 0) {    builder.append('[').append(host).append(']');  } else {    builder.append(host);  }  if (hasPort()) {    builder.append(':').append(port);  }  return builder.toString();}  }
class C{  private static int arrayHashCode(Object object){  if (object == null)   return 0;  int result=1;  Object[] array=(Object[])object;  for (int i=0; i < array.length; ++i) {    int elementHashCode=0;    if (array[i] != null)     elementHashCode=array[i].hashCode();    result=31 * result + elementHashCode;  }  return result;}  }
class C{  public AbstractAddress asLongConstRef(JavaConstant value){  assert value.getJavaKind() == JavaKind.Long;  return recordDataReferenceInCode(value,8);}  }
class C{  public int size(){  return count;}  }
class C{  public void addDatabaseReference(String name,ConfigurationDBRef configurationDBRef){  databaseReferences.put(name,configurationDBRef);}  }
class C{  int mapLun(boolean force,String initGroup,int lunId){  if (lunId == -1) {    log.info("LUN Id will be auto-assigned.");  }  NaElement elem=new NaElement("lun-map");  elem.addNewChild("force",Boolean.toString(force));  elem.addNewChild("initiator-group",initGroup);  if (lunId != -1) {    elem.addNewChild("lun-id",Integer.toString(lunId));  }  elem.addNewChild("path",path);  try {    NaElement result=server.invokeElem(elem);    return result.getChildIntValue("lun-id-assigned",-1);  } catch (  Exception e) {    String msg="Failed to map LUN path=" + path + " to group="+ initGroup;    log.error(msg,e);    throw new NetAppException(msg,e);  }}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  Bag testCollisions(HashSet activeList){  collidingList.clear();  Iterator activeItr=activeList.iterator();  while (activeItr.hasNext()) {    CollisionPair pair=(CollisionPair)activeItr.next();    if (!pair.noCollision && !constraintEngine.testNoCollisions(pair.c1,pair.c2))     testNarrowPhase(pair);  }  return collidingList;}  }
class C{  public TileMap(int width,int height){  tiles=new Image[width][height];  sprites=new LinkedList();}  }
class C{  public Builder addFixed32(final int value){  if (result.fixed32 == null) {    result.fixed32=new ArrayList<Integer>();  }  result.fixed32.add(value);  return this;}  }
class C{  public void addChildFrame(Container c){  m_ChildFrames.add(c);  windowListChanged();}  }
class C{  public void deleteRow() throws SQLException {  checkUpdatable();  rowUpdater.deleteRow();  fbFetcher.deleteRow();  notifyRowUpdater();}  }
class C{  public void componentResized(ComponentEvent e){  JScrollBar bar=getVerticalScrollBar();  int incr=(int)(getSize().getHeight() - (bar.getUnitIncrement(1) * 3));  getVerticalScrollBar().setBlockIncrement(incr);}  }
class C{  public void addOwnedDashboardId(BigInteger id){  this.getOwnedDashboardIds().add(id);}  }
class C{  protected S_DeclarationImpl(){  super();}  }
class C{  private void initTokenizer(StreamTokenizer tokenizer){  tokenizer.resetSyntax();  tokenizer.whitespaceChars(0,' ');  tokenizer.wordChars(' ' + 1,'\u00FF');  tokenizer.whitespaceChars(',',',');  tokenizer.commentChar('%');  tokenizer.quoteChar('"');  tokenizer.quoteChar('\'');  tokenizer.ordinaryChar('{');  tokenizer.ordinaryChar('}');  tokenizer.eolIsSignificant(true);}  }
class C{  public DiagramServer(int port) throws IOException {  serverSocket=new ServerSocket(port);  setName("DiagramServer");  setDaemon(true);  threadPool=new PriorityQueue<ServerThread>();  for (int i=0; i < poolSize; i++) {    ServerThread worker=new ServerThread();    worker.start();    threadPool.add(worker);  }  start();}  }
class C{  public boolean nonEmpty(){  return tail != null;}  }
class C{  public boolean moveCursorToVisibleOffset(){  return mInputView.moveCursorToVisibleOffset();}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPLETION\"";  db.execSQL(sql);}  }
class C{  public HttpHeaders headers(){  return headers;}  }
class C{  private void startRow(){  mStart=mMargin;  mEnd=mWidth - mMargin;  mTop=mBottom + mMargin;  mBottom=mTop;}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  public static Network createTestNetwork(){  double freespeed=2.7;  double capacity=500.;  double numLanes=1.;  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)0,(double)100));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)0,(double)200));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord((double)0,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord((double)100,(double)100));  Node node5=NetworkUtils.createAndAddNode(network,Id.create(5,Node.class),new Coord((double)100,(double)200));  Node node6=NetworkUtils.createAndAddNode(network,Id.create(6,Node.class),new Coord((double)100,(double)0));  Node node7=NetworkUtils.createAndAddNode(network,Id.create(7,Node.class),new Coord((double)200,(double)100));  Node node8=NetworkUtils.createAndAddNode(network,Id.create(8,Node.class),new Coord((double)200,(double)200));  Node node9=NetworkUtils.createAndAddNode(network,Id.create(9,Node.class),new Coord((double)200,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  final double freespeed1=freespeed;  final double capacity1=capacity;  final double numLanes1=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,(double)100,freespeed1,capacity1,numLanes1);  final Node fromNode1=node2;  final Node toNode1=node1;  final double freespeed2=freespeed;  final double capacity2=capacity;  final double numLanes2=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode1,toNode1,(double)100,freespeed2,capacity2,numLanes2);  final Node fromNode2=node1;  final Node toNode2=node3;  final double freespeed3=freespeed;  final double capacity3=capacity;  final double numLanes3=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode2,toNode2,(double)100,freespeed3,capacity3,numLanes3);  final Node fromNode3=node3;  final Node toNode3=node1;  final double freespeed4=freespeed;  final double capacity4=capacity;  final double numLanes4=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode3,toNode3,(double)100,freespeed4,capacity4,numLanes4);  final Node fromNode4=node1;  final Node toNode4=node4;  final double freespeed5=freespeed;  final double capacity5=capacity;  final double numLanes5=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(5,Link.class),fromNode4,toNode4,(double)100,freespeed5,capacity5,numLanes5);  final Node fromNode5=node4;  final Node toNode5=node1;  final double freespeed6=freespeed;  final double capacity6=capacity;  final double numLanes6=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(6,Link.class),fromNode5,toNode5,(double)100,freespeed6,capacity6,numLanes6);  final Node fromNode6=node4;  final Node toNode6=node5;  final double freespeed7=freespeed;  final double capacity7=capacity;  final double numLanes7=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(7,Link.class),fromNode6,toNode6,(double)100,freespeed7,capacity7,numLanes7);  final Node fromNode7=node5;  final Node toNode7=node4;  final double freespeed8=freespeed;  final double capacity8=capacity;  final double numLanes8=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(8,Link.class),fromNode7,toNode7,(double)100,freespeed8,capacity8,numLanes8);  final Node fromNode8=node4;  final Node toNode8=node6;  final double freespeed9=freespeed;  final double capacity9=capacity;  final double numLanes9=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(9,Link.class),fromNode8,toNode8,(double)100,freespeed9,capacity9,numLanes9);  final Node fromNode9=node6;  final Node toNode9=node4;  final double freespeed10=freespeed;  final double capacity10=capacity;  final double numLanes10=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(10,Link.class),fromNode9,toNode9,(double)100,freespeed10,capacity10,numLanes10);  final Node fromNode10=node4;  final Node toNode10=node7;  final double freespeed11=freespeed;  final double capacity11=capacity;  final double numLanes11=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(11,Link.class),fromNode10,toNode10,(double)100,freespeed11,capacity11,numLanes11);  final Node fromNode11=node7;  final Node toNode11=node4;  final double freespeed12=freespeed;  final double capacity12=capacity;  final double numLanes12=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(12,Link.class),fromNode11,toNode11,(double)100,freespeed12,capacity12,numLanes12);  final Node fromNode12=node5;  final Node toNode12=node8;  final double freespeed13=freespeed;  final double capacity13=capacity;  final double numLanes13=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(13,Link.class),fromNode12,toNode12,(double)100,freespeed13,capacity13,numLanes13);  final Node fromNode13=node8;  final Node toNode13=node5;  final double freespeed14=freespeed;  final double capacity14=capacity;  final double numLanes14=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(14,Link.class),fromNode13,toNode13,(double)100,freespeed14,capacity14,numLanes14);  final Node fromNode14=node6;  final Node toNode14=node9;  final double freespeed15=freespeed;  final double capacity15=capacity;  final double numLanes15=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(15,Link.class),fromNode14,toNode14,(double)100,freespeed15,capacity15,numLanes15);  final Node fromNode15=node9;  final Node toNode15=node6;  final double freespeed16=freespeed;  final double capacity16=capacity;  final double numLanes16=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(16,Link.class),fromNode15,toNode15,(double)100,freespeed16,capacity16,numLanes16);  return network;}  }
class C{  private void recalcAxisPositions(){  axsep=size[0] / (proj.getVisibleDimensions() - 1.);}  }
class C{  public int prepareInt(){  return loadInt();}  }
class C{  public void owned(IgniteTxKey key,GridCacheVersion ownerMapped){  if (owned == null)   owned=new GridLeanMap<>(3);  owned.put(key,ownerMapped);}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  private void saveState(Serializable state) throws IOException {  ObjectOutputStream oos=null;  try {    oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(stateFile)));    oos.writeObject(state);  }  finally {    if (oos != null) {      oos.close();    }  }}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.toArray();  }  finally {    lock.unlock();  }}  }
class C{  public T casePromisifyExpression(PromisifyExpression object){  return null;}  }
class C{  public boolean visit(WildcardType node){  return true;}  }
class C{  @SuppressWarnings("unused") public static void main(String[] args){  Log.printLine("Starting CloudSimExample1...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    Datacenter datacenter0=createDatacenter("Datacenter_0");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=new ArrayList<Vm>();    int vmid=0;    int mips=1000;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist.add(vm);    broker.submitVmList(vmlist);    cloudletList=new ArrayList<Cloudlet>();    int id=0;    long length=400000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet.setUserId(brokerId);    cloudlet.setVmId(vmid);    cloudletList.add(cloudlet);    broker.submitCloudletList(cloudletList);    CloudSim.startSimulation();    CloudSim.stopSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    printCloudletList(newList);    Log.printLine("CloudSimExample1 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("Unwanted errors happen");  }}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  protected void createTextFile(String infile,String toDir,String outfile,Map<String,String> variables) throws NullPointerException, IOException {  createTextFile(infile,VeriniceCharset.CHARSET_DEFAULT,toDir,outfile,VeriniceCharset.CHARSET_DEFAULT,variables);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.249 -0500",hash_original_method="5A8D10A468DAF40C9664F83218CAE45B",hash_generated_method="895A193964894AB87288405D02F31326") public void drawLines(float[] pts,int offset,int count,Paint paint){  addTaint(pts[0]);  addTaint(offset);  addTaint(count);  addTaint(paint.getTaint());}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  CollectionCallback(Callback<TimelineResult<Tweet>> cb){  this.cb=cb;}  }
class C{  public synchronized void addProgress(Progress p){  Iterator<WeakReference<Progress>> iter=progresses.iterator();  while (iter.hasNext()) {    WeakReference<Progress> ref=iter.next();    if (ref.get() == null) {      iter.remove();    } else {      if (ref.get() == p) {        return;      }    }  }  progresses.add(new WeakReference<>(p));}  }
class C{  protected void update(int progress){  double dProgress=(double)progress;  int len=endVals.getItemCount();  for (int i=0; i < len; i++) {    double x=endVals.getX(i);    double y=endVals.getY(i);    int startIndex=startVals.getIndexForKey(x);    int endindex=i;    double startVal=startIndex == -1 ? 0.0 : startVals.getY(startIndex);    double endVal=y;    double tweenVal=startVal + (endVal - startVal) * dProgress / 100.0;    int seriesIndex=series.getIndexForKey(x);    if (seriesIndex > -1) {      series.remove(seriesIndex);    }    series.add(x,tweenVal);  }}  }
class C{  @Override public void stop(){  if (m_listenee != null) {    if (m_listenee instanceof BeanCommon) {      ((BeanCommon)m_listenee).stop();    }  }  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + "Stopped");  }  m_busy=false;  m_stopRequested.set(true);}  }
class C{  public static String toStringLow(long v){  final int mag=magnitude(v);  if (mag == 0) {    return "0";  }  char[] digits=new char[mag];  long f=1L;  for (int pos=0; pos < mag; ++pos, f<<=1) {    digits[pos]=((v & f) == 0) ? '0' : '1';  }  return new String(digits);}  }
class C{  public void gradient(final Array grad_f,final Array x){  gradientEvaluation_++;  costFunction_.gradient(grad_f,x);}  }
class C{  public static List<String> splitSmart(String s,String separator,boolean decode){  ArrayList<String> lst=new ArrayList<>(2);  StringBuilder sb=new StringBuilder();  int pos=0, end=s.length();  while (pos < end) {    if (s.startsWith(separator,pos)) {      if (sb.length() > 0) {        lst.add(sb.toString());        sb=new StringBuilder();      }      pos+=separator.length();      continue;    }    char ch=s.charAt(pos++);    if (ch == '\\') {      if (!decode)       sb.append(ch);      if (pos >= end)       break;      ch=s.charAt(pos++);      if (decode) {switch (ch) {case 'n':          ch='\n';        break;case 't':      ch='\t';    break;case 'r':  ch='\r';break;case 'b':ch='\b';break;case 'f':ch='\f';break;}}}sb.append(ch);}if (sb.length() > 0) {lst.add(sb.toString());}return lst;}  }
class C{  public void add(T item){  mItems.add(item);  notifyDataSetChanged();}  }
class C{  protected static long value(Object element){  return ((Number)element).longValue();}  }
class C{  private Producer<CloseableReference<CloseableImage>> newBitmapCacheGetToLocalTransformSequence(Producer<EncodedImage> inputProducer){  inputProducer=newEncodedCacheMultiplexToTranscodeSequence(inputProducer);  Producer<EncodedImage> inputProducerAfterDecode=newLocalTransformationsSequence(inputProducer);  return newBitmapCacheGetToDecodeSequence(inputProducerAfterDecode);}  }
class C{  public NeighboringCellInfo(Parcel in){  mRssi=in.readInt();  mLac=in.readInt();  mCid=in.readInt();  mPsc=in.readInt();  mNetworkType=in.readInt();}  }
class C{  public JSONObject(Object bean){  this();  populateMap(bean);}  }
class C{  private String deleteSnapshotSessionSteps(Workflow workflow,String waitFor,List<Volume> volumes,boolean isRemoveAllFromRG){  log.info("START delete snapshot session steps");  if (!isRemoveAllFromRG) {    log.info("Nothing to do");    return waitFor;  }  URI storage=volumes.get(0).getStorageController();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);  Set<String> replicationGroupInstances=new HashSet<>();  for (  Volume volume : volumes) {    replicationGroupInstances.add(volume.getReplicationGroupInstance());  }  for (  String replicationGroupInstance : replicationGroupInstances) {    Collection<BlockSnapshotSession> sessions=getSessionsForReplicationGroup(replicationGroupInstance,storage);    for (    BlockSnapshotSession session : sessions) {      Workflow.Method deleteMethod=BlockDeviceController.deleteBlockSnapshotSessionMethod(storage,session.getId(),replicationGroupInstance,true);      waitFor=workflow.createStep("RemoveSnapshotSessions","Remove Snapshot Session",waitFor,storage,storageSystem.getSystemType(),BlockDeviceController.class,deleteMethod,null,null);    }  }  return waitFor;}  }
class C{  public void onReceivedLoginRequest(WebView view,String realm,String account,String args){}  }
class C{  String readAmPmMarker(String source,int ofs){  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=readSubstring(source,ofs,i).toLowerCase();  if (fragment == null) {    return null;  }  String markers[]=getDateFormatSymbols().getAmPmStrings();  for (  String marker : markers) {    if (fragment.startsWith(marker)) {      return readSubstring(source,ofs,ofs + marker.length());    }  }  for (  String marker : markers) {    if (fragment.charAt(0) == marker.charAt(0)) {      return readSubstring(source,ofs,ofs + 1);    }  }  return null;}  }
class C{  public static PropertyInspector makeInspector(Class inspectorClass,Properties properties,int index,Frame parent,GUIState simulation){synchronized (simulation.state.schedule) {    try {      PropertyInspector inspector=(PropertyInspector)(inspectorClass.getConstructor(new Class[]{Properties.class,Integer.TYPE,Frame.class,GUIState.class}).newInstance(new Object[]{properties,Integer.valueOf(index),parent,simulation}));      if (inspector.isValidInspector())       return inspector; else       return null;    } catch (    Exception e) {      e.printStackTrace();      return null;    }  }}  }
class C{  public void storeCommonAttributes(PositionableShape p,Element element){  element.setAttribute("x","" + p.getX());  element.setAttribute("y","" + p.getY());  element.setAttribute("level",String.valueOf(p.getDisplayLevel()));  element.setAttribute("forcecontroloff",!p.isControlling() ? "true" : "false");  element.setAttribute("hidden",p.isHidden() ? "yes" : "no");  element.setAttribute("positionable",p.isPositionable() ? "true" : "false");  element.setAttribute("showtooltip",p.showTooltip() ? "true" : "false");  element.setAttribute("editable",p.isEditable() ? "true" : "false");  ToolTip tip=p.getTooltip();  String txt=tip.getText();  if (txt != null) {    Element elem=new Element("toolTip").addContent(txt);    element.addContent(elem);  }  if (p.getDegrees() != 0) {    element.setAttribute("degrees","" + p.getDegrees());  }  Element elem=storeColor("lineColor",p.getLineColor());  if (elem != null) {    element.addContent(elem);  }  elem=storeColor("fillColor",p.getFillColor());  if (elem != null) {    element.addContent(elem);  }  element.setAttribute("lineWidth","" + p.getLineWidth());  NamedBeanHandle<Sensor> handle=p.getControlSensorHandle();  if (handle != null) {    element.setAttribute("controlSensor",handle.getName());  }  element.setAttribute("hideOnSensor",p.isHideOnSensor() ? "true" : "false");  element.setAttribute("changeLevelOnSensor",String.valueOf(p.getChangeLevel()));}  }
class C{  public void validate() throws org.apache.thrift.TException {  if (moduleCode == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'moduleCode' was not present! Struct: " + toString());  }  if (configItemCode == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'configItemCode' was not present! Struct: " + toString());  }  if (paramCode == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'paramCode' was not present! Struct: " + toString());  }}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  private void drawSwitchButton(final Point buttonSize){  gc.setForeground(buttonBorderColor);  if (round) {    gc.drawRoundRectangle(2,2,buttonSize.x,buttonSize.y,arc,arc);  } else {    gc.drawRectangle(2,2,buttonSize.x,buttonSize.y);  }  drawRightPart(buttonSize);  drawLeftPart(buttonSize);  gc.setClipping(getClientArea());  drawToggleButton(buttonSize);}  }
class C{  public String sqlObject_createFunction(String sourceVendorName,String sourceSchemaName,String targetVendorName,String catalogName,String schemaName,String functionType,String functionName,String functionReturnType,boolean hasOutParameters,String functionLanguage,ArrayList<String> argDirs,ArrayList<String> argNames,ArrayList<String> argTypes,String bodyText,boolean isForceStub){  functionName=normalizeIdentifier(targetVendorName,functionName);  String translatedFunctionType=translateFunctionType(sourceVendorName,targetVendorName,functionType,functionReturnType);  ArrayList<String> translatedArgTypes=new ArrayList<String>();  for (int i=0; i < argTypes.size(); i++) {    String argType=translateDataType(sourceVendorName,targetVendorName,argTypes.get(i),0,0);    if (argType != null)     argType=argType.replaceAll("\\s*\\(.*\\)","");    translatedArgTypes.add(argType);  }  String translatedFunctionLanguage=translateFunctionLanguage(sourceVendorName,targetVendorName,functionLanguage);  String translatedFunctionReturnType=translateFunctionReturnType(sourceVendorName,targetVendorName,functionReturnType);  if (translatedFunctionReturnType != null)   translatedFunctionReturnType=translatedFunctionReturnType.replaceAll("\\s*\\(.*\\)","");  String translatedBodyText="";  if (isForceStub)   translatedBodyText=m_interfaces.get(getDBVendorID(targetVendorName)).translateFunctionBodyStub(s_dbEngine,sourceVendorName.toUpperCase(),functionLanguage,functionReturnType,bodyText); else   translatedBodyText=translateFunctionBody(sourceVendorName,sourceSchemaName,targetVendorName,functionLanguage,functionReturnType,bodyText);  translatedBodyText=translatedBodyText.replaceAll("(?m)^(\\s*?END\\s*?\\w*?)(\\s*?)$","$1;$2");  return m_interfaces.get(getDBVendorID(targetVendorName)).sqlObject_createFunction(catalogName,schemaName,translatedFunctionType,functionName,translatedFunctionReturnType,hasOutParameters,translatedFunctionLanguage,argDirs,argNames,translatedArgTypes,translatedBodyText);}  }
class C{  public void sub(int size,Register dst,Register src1,Register src2){  super.sub(size,dst,src1,src2,ShiftType.LSL,0);}  }
class C{  private void increaseValue(final int value){  this.setSelection(this.getSelection() + value);}  }
class C{  public final void readLong(long[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    pa[start + i]=readLong();  }}  }
class C{  public String[] split(String input){  List<String> results=new ArrayList<String>();  _split(input,results);  String[] parts=new String[results.size()];  for (int i=0; i < results.size(); i++)   parts[i]=(String)results.get(i);  return parts;}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  private Name makeOperatorName(String name){  Name opName=names.fromString(name);  operatorNames.add(opName);  return opName;}  }
class C{  public static double twoPow(int power){  if (power <= -MAX_DOUBLE_EXPONENT) {    if (power >= MIN_DOUBLE_EXPONENT) {      return Double.longBitsToDouble(0x0008000000000000L >> (-(power + MAX_DOUBLE_EXPONENT)));    } else {      return 0.0;    }  } else   if (power > MAX_DOUBLE_EXPONENT) {    return Double.POSITIVE_INFINITY;  } else {    return Double.longBitsToDouble(((long)(power + MAX_DOUBLE_EXPONENT)) << 52);  }}  }
class C{  public static void passedBranch(Object val,int opcode,int branch,int bytecode_id){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  double distance_true=0;  double distance_false=0;switch (opcode) {case Opcodes.IFNULL:    distance_true=val == null ? 0.0 : 1.0;  break;case Opcodes.IFNONNULL:distance_true=val == null ? 1.0 : 0.0;break;default :logger.error("Warning: encountered opcode " + opcode);}distance_false=distance_true == 0 ? 1.0 : 0.0;tracer.trace.branchPassed(branch,bytecode_id,distance_true,distance_false);}  }
class C{  public boolean crossesWater(){  final boolean startLand=!m_start.isWater();  boolean overWater=false;  final Iterator<Territory> routeIter=m_steps.iterator();  Territory terr=null;  while (routeIter.hasNext()) {    terr=routeIter.next();    if (terr.isWater()) {      overWater=true;    }  }  if (terr == null) {    return false;  }  return (startLand && overWater && !terr.isWater());}  }
class C{  @LargeTest public void testCameraPairwiseScenario13() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.NONE,WhiteBalance.AUTO,SceneMode.PARTY,PictureSize.MEDIUM,Geotagging.ON);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.125 -0500",hash_original_method="EE01791F9851138F67FFB678FE608E3C",hash_generated_method="160069AE6A9F566D6F3EF4CBBCB5DC16") public boolean isMessagePartOfTransaction(SIPMessage messageToTest){  ViaList viaHeaders;  Via topViaHeader;  String messageBranch;  boolean transactionMatches;  transactionMatches=false;  String method=messageToTest.getCSeq().getMethod();  if ((method.equals(Request.INVITE) || !isTerminated())) {    viaHeaders=messageToTest.getViaHeaders();    if (viaHeaders != null) {      topViaHeader=(Via)viaHeaders.getFirst();      messageBranch=topViaHeader.getBranch();      if (messageBranch != null) {        if (!messageBranch.toLowerCase().startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE)) {          messageBranch=null;        }      }      if (messageBranch != null && this.getBranch() != null) {        if (method.equals(Request.CANCEL)) {          transactionMatches=this.getMethod().equals(Request.CANCEL) && getBranch().equalsIgnoreCase(messageBranch) && topViaHeader.getSentBy().equals(((Via)getOriginalRequest().getViaHeaders().getFirst()).getSentBy());        } else {          transactionMatches=getBranch().equalsIgnoreCase(messageBranch) && topViaHeader.getSentBy().equals(((Via)getOriginalRequest().getViaHeaders().getFirst()).getSentBy());        }      } else {        String originalFromTag=super.fromTag;        String thisFromTag=messageToTest.getFrom().getTag();        boolean skipFrom=(originalFromTag == null || thisFromTag == null);        String originalToTag=super.toTag;        String thisToTag=messageToTest.getTo().getTag();        boolean skipTo=(originalToTag == null || thisToTag == null);        boolean isResponse=(messageToTest instanceof SIPResponse);        if (messageToTest.getCSeq().getMethod().equalsIgnoreCase(Request.CANCEL) && !getOriginalRequest().getCSeq().getMethod().equalsIgnoreCase(Request.CANCEL)) {          transactionMatches=false;        } else         if ((isResponse || getOriginalRequest().getRequestURI().equals(((SIPRequest)messageToTest).getRequestURI())) && (skipFrom || originalFromTag != null && originalFromTag.equalsIgnoreCase(thisFromTag)) && (skipTo || originalToTag != null && originalToTag.equalsIgnoreCase(thisToTag))&& getOriginalRequest().getCallId().getCallId().equalsIgnoreCase(messageToTest.getCallId().getCallId())&& getOriginalRequest().getCSeq().getSeqNumber() == messageToTest.getCSeq().getSeqNumber() && ((!messageToTest.getCSeq().getMethod().equals(Request.CANCEL)) || getOriginalRequest().getMethod().equals(messageToTest.getCSeq().getMethod())) && topViaHeader.equals(getOriginalRequest().getViaHeaders().getFirst())) {          transactionMatches=true;        }      }    }  }  return transactionMatches;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getDVDDomain());}  }
class C{  public static int[] readInts(String filename){  return new In(filename).readAllInts();}  }
class C{  protected char scanSurrogates(){  if (surrogatesSupported && Character.isHighSurrogate(ch)) {    char high=ch;    scanChar();    if (Character.isLowSurrogate(ch)) {      return high;    }    ch=high;  }  return 0;}  }
class C{  public String binaryAttributesNominalTipText(){  return "Whether resulting binary attributes will be nominal.";}  }
class C{  public Graph search(){  this.logger.log("info","Starting Fast Adjacency Search.");  graph.removeEdges(graph.getEdges());  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  Map<Node,Set<Node>> adjacencies=new HashMap<>();  List<Node> nodes=graph.getNodes();  for (  Node node : nodes) {    adjacencies.put(node,new TreeSet<Node>());  }  for (int d=0; d <= _depth; d++) {    boolean more;    if (d == 0) {      more=searchAtDepth0(nodes,test,adjacencies);    } else {      more=searchAtDepth(nodes,test,adjacencies,d);    }    if (!more) {      break;    }  }  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node x=nodes.get(i);      Node y=nodes.get(j);      if (adjacencies.get(x).contains(y)) {        graph.addUndirectedEdge(x,y);      }    }  }  this.logger.log("info","Finishing Fast Adjacency Search.");  return graph;}  }
class C{  public static CachePeekMode[] decodeCachePeekModes(int modes){  CachePeekMode[] res=CACHE_PEEK_MODES[modes];  if (res == null) {    List<CachePeekMode> res0=new ArrayList<>(CACHE_PEEK_MODES_CNT);    for (int i=0; i < CACHE_PEEK_MODES_CNT; i++) {      int mask=1 << i;      if ((modes & mask) == mask)       res0.add(CachePeekMode.fromOrdinal((byte)i));    }    res=res0.toArray(new CachePeekMode[res0.size()]);synchronized (PlatformUtils.class) {      CACHE_PEEK_MODES[modes]=res;    }  }  return res;}  }
class C{  public Map<String,Map<String,String>> list(String serviceName){  Map<String,Map<String,String>> results=new HashMap<String,Map<String,String>>();  ServiceInfo[] infos=jmdns.list("_" + serviceName + "._tcp.local.");  for (  ServiceInfo info : infos) {    _log.info("ServiceInfo:{}",info);    final String[] hostAddrs=info.getHostAddresses();    final StringBuffer buf=new StringBuffer();    for (    String hostAddr : hostAddrs) {      buf.append(hostAddr);      buf.append(';');    }    final String key=buf.toString();    _log.info("\tkey:{}",key);    final Map<String,String> values=new HashMap<String,String>();    for (Enumeration<String> e=info.getPropertyNames(); e.hasMoreElements(); ) {      final String prop=e.nextElement();      final String value=new String(info.getPropertyBytes(prop));      _log.info("\tprop:{}, value:{}",prop,value);      values.put(prop,value);    }    if (values.isEmpty()) {      _log.warn("values are empty for key: {}",key);    }    results.put(key,values.isEmpty() ? null : values);  }  return results;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static List<TypeParameter> merge(List<TypeParameter> l1,List<TypeParameter> l2){  int size=(l1 == null ? 0 : l1.size()) + (l2 == null ? 0 : l2.size());  ArrayList<TypeParameter> merged=new ArrayList<TypeParameter>(size);  HashSet<String> names=new HashSet<String>();  if (l1 != null) {    for (    TypeParameter t : l1) {      merged.add(t);      names.add(t.getName());    }  }  if (l2 != null) {    for (    TypeParameter t : l2) {      if (!names.contains(t.getName())) {        merged.add(t);      }    }  }  return merged;}  }
class C{  public static boolean linkSequenceHasUTurns(List<Link> links){  for (int i=1; i < links.size(); i++) {    if (links.get(i).getToNode().equals(links.get(i - 1).getFromNode())) {      return true;    }  }  return false;}  }
class C{  static void b2iLittle(byte[] in,int inOfs,int[] out,int outOfs,int len){  if ((inOfs < 0) || ((in.length - inOfs) < len) || (outOfs < 0)|| ((out.length - outOfs) < len / 4)) {    throw new ArrayIndexOutOfBoundsException();  }  if (littleEndianUnaligned) {    inOfs+=byteArrayOfs;    len+=inOfs;    while (inOfs < len) {      out[outOfs++]=unsafe.getInt(in,(long)inOfs);      inOfs+=4;    }  } else   if (bigEndian && ((inOfs & 3) == 0)) {    inOfs+=byteArrayOfs;    len+=inOfs;    while (inOfs < len) {      out[outOfs++]=reverseBytes(unsafe.getInt(in,(long)inOfs));      inOfs+=4;    }  } else {    len+=inOfs;    while (inOfs < len) {      out[outOfs++]=((in[inOfs] & 0xff)) | ((in[inOfs + 1] & 0xff) << 8) | ((in[inOfs + 2] & 0xff) << 16)| ((in[inOfs + 3]) << 24);      inOfs+=4;    }  }}  }
class C{  public void fireExecutionStarted(){  SessionEvent event=new SessionEvent(this.source,SessionEvent.EXECUTION_STARTED);  fireSessionEvent(event);}  }
class C{  public static Network wrapNetwork(Network networkLayer){  Network wrappedNetwork=NetworkUtils.createNetwork();  int numberOfNodesGenerated=0;  int numberOfLinksGenerated=0;  for (  Link link : networkLayer.getLinks().values()) {    NetworkUtils.createAndAddNode(wrappedNetwork,Id.create(link.getId(),Node.class),link.getToNode().getCoord());    numberOfNodesGenerated++;  }  for (  Node node : networkLayer.getNodes().values()) {    for (    Link inLink : node.getInLinks().values()) {      for (      Link outLink : node.getOutLinks().values()) {        Link link=NetworkUtils.createAndAddLink(wrappedNetwork,Id.create(numberOfLinksGenerated,Link.class),wrappedNetwork.getNodes().get(inLink.getId()),wrappedNetwork.getNodes().get(Id.create(outLink.getId().toString(),Node.class)),outLink.getLength(),outLink.getFreespeed(),outLink.getCapacity(),outLink.getNumberOfLanes());        NetworkUtils.setType(((Link)link),(String)NetworkUtils.getType(((Link)outLink)));        numberOfLinksGenerated++;      }    }  }  log.info("Generated " + numberOfNodesGenerated + " Nodes and "+ numberOfLinksGenerated+ " Links");  return wrappedNetwork;}  }
class C{  public void initialize(double[][] history){  Distribution initDistribution=new Normal(this.basalExpression,this.initStDev);  for (int j=0; j < history[0].length; j++) {    IndexedLagGraph connectivity=this.updateFunction.getIndexedLagGraph();    if (connectivity.getNumParents(j) == 0) {      history[0][j]=this.basalExpression;    } else {      history[0][j]=initDistribution.nextRandom();    }  }  for (int i=1; i < history.length; i++) {    System.arraycopy(history[0],0,history[i],0,history[0].length);  }}  }
class C{  @Override public void refreshRow() throws SQLException {  try {    debugCodeCall("refreshRow");    checkClosed();    if (insertRow != null) {      throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);    }    checkOnValidRow();    patchCurrentRow(getUpdatableRow().readRow(result.currentRow()));    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String toString(){  String retValue=name;  if (description != null && description.length() > 0)   retValue+=" (" + description + ")";  return retValue;}  }
class C{  @Deprecated public boolean supportsSQL(){  return isSQLAvailable;}  }
class C{  public boolean evaluatePropertyExists(EventBean[] eventsPerStream,boolean isNewData){  EventBean theEvent=eventsPerStream[streamNum];  if (theEvent == null) {    return false;  }  return propertyGetter.isExistsProperty(theEvent);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void updateStats(){  updateUpdaterComboBox();  updaterNumThreads.setText("" + workspace.getUpdater().getNumThreads());}  }
class C{  public sun.net.ftp.FtpClient structureMount(String struct) throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("SMNT " + struct);  return this;}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomg","GraphicStateMachine|selected state|mousePressed");  GrabPoint mp=graphic.getMovingPoint(e);  int renderType=graphic.getGraphic().getRenderType();  if (renderType == OMGraphic.RENDERTYPE_LATLON && mp == graphic.getGrabPoints()[EditableOMCircle.CENTER_POINT_INDEX] && graphic.isMouseEventTouchingTheEdge(e)) {    mp=null;  }  if (mp == null) {    if ((renderType != OMGraphic.RENDERTYPE_LATLON && graphic.isMouseEventTouching(e)) || graphic.isMouseEventTouchingTheEdge(e)) {      if (graphic.getCanGrabGraphic()) {        Debug.message("eomg","GraphicStateMachine|selected state|mousePressed - graphic held");        graphic.getStateMachine().setEdit();        graphic.fireEvent(EOMGCursors.EDIT,"",EOMGEvent.EOMG_EDIT);        graphic.move(e);      }    } else {      graphic.fireEvent(EOMGCursors.DEFAULT,"",EOMGEvent.EOMG_UNCHANGED);      graphic.redraw(e,true);    }  } else {    graphic.getStateMachine().setEdit();    graphic.fireEvent(EOMGCursors.EDIT,"",EOMGEvent.EOMG_EDIT);  }  return getMapMouseListenerResponse();}  }
class C{  public FilteringMessageListenerAdapter(MessageListener<K,V> delegate,RecordFilterStrategy<K,V> recordFilterStrategy){  super(delegate,recordFilterStrategy);}  }
class C{  @Override public void initView(){  positionableBox.setSelected(allPositionable());  controllingBox.setSelected(allControlling());  showTooltipBox.setSelected(showTooltip());  hiddenBox.setSelected(showHidden());switch (_scrollState) {case SCROLL_NONE:    scrollNone.setSelected(true);  break;case SCROLL_BOTH:scrollBoth.setSelected(true);break;case SCROLL_HORIZONTAL:scrollHorizontal.setSelected(true);break;case SCROLL_VERTICAL:scrollVertical.setSelected(true);break;}log.debug("InitView done");}  }
class C{  public void addUsedNonHeapMemorySize(long usedNonHeapMemorySize){  this.totalUsedNonHeapMemorySize+=usedNonHeapMemorySize;}  }
class C{  SensorAnalyticsApplication(String propsPath) throws Exception {  super(propsPath);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=3; i >= 0; i--) {    sb.append(out(freeEncoding[i]));  }  sb.append("       ");  for (int i=0; i < 4; i++) {    sb.append(out2(i,foundationEncoding[i]));  }  sb.append("\n");  boolean hasSome=true;  int r=0;  while (hasSome) {    hasSome=false;    for (int c=0; c < 8; c++) {      if (cols[c].num > r) {        int card=cols[c].cards[r];        sb.append(out(card) + " ");        hasSome=true;      } else {        sb.append("   ");      }    }    sb.append("\n");    r++;  }  return sb.toString();}  }
class C{  public RamlGenerator generateRamlForClasses(String title,String version,String baseUri,Class<?>[] classesToGenerate,Set<ApiDocumentMetadata> documents){  assertResourceParser();  RamlRoot raml=RamlModelFactoryOfFactories.createRamlModelFactory().createRamlRoot();  raml.setBaseUri(baseUri);  raml.setVersion(version);  raml.setTitle(title);  if (documents != null && documents.size() > 0) {    raml.setDocumentation(generateDocuments(documents));  }  logger.info("Generating Raml for " + title + " v"+ version+ " from "+ classesToGenerate.length+ " annotated classes");  Arrays.asList(classesToGenerate).forEach(null);  this.raml=raml;  return this;}  }
class C{  public Builder withSslContext(SslContext sslContext){  this.sslContext=sslContext;  return this;}  }
class C{  static MemoryUsage baseline(){  return forClass(null);}  }
class C{  public void resetSeparateAndConquer(long jobId){  this.getSeparateAndConquerLevels(jobId).clear();  if (this.getStripedDataset() != null) {    this.getStripedDataset().getSeparateAndConquerLevels(jobId).clear();  }}  }
class C{  public static void addReference(final SQLProvider provider,final INaviOperandTreeNode node,final IAddress targetAddress,final ReferenceType type) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00473: Provider argument can not be null");  Preconditions.checkNotNull(node,"IE00474: Node argument can not be null");  Preconditions.checkNotNull(targetAddress,"IE01548: Address argument can not be null");  Preconditions.checkNotNull(type,"IE00475: Type argument can not be null");  final CConnection connection=provider.getConnection();  final int moduleId=node.getOperand().getInstruction().getModule().getConfiguration().getId();  final BigInteger address=node.getInstructionAddress().toBigInteger();  final int position=node.getOperandPosition();  final int expressionId=node.getId();  final String query=String.format("INSERT INTO " + CTableNames.ADDRESS_REFERENCES_TABLE + "(module_id, address, position, expression_id, type, target) "+ "VALUES(%d, %d, %d, %d, '%s', %s)",moduleId,address,position,expressionId,type.toString().toLowerCase(),targetAddress.toBigInteger().toString());  try {    connection.executeUpdate(query,true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public MyPrinterState(int iSize){  m_iSize=iSize;}  }
class C{  public OutputStreamWriter(java.io.OutputStream os){  this.os=os;  enc="UTF-8";}  }
class C{  public void addAlternateNames(List<AlternateOsmName> alternateNames){  if (alternateNames != null) {    for (    AlternateOsmName alternateName : alternateNames) {      addAlternateName(alternateName);    }  }}  }
class C{  public boolean __le__(final Object rhs){  return getBigInteger(this).compareTo(getBigInteger(rhs)) <= 0;}  }
class C{  protected boolean isZoomInKey(int keyCode){  return keyCode == '1';}  }
class C{  private void drawSecondAnimation(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(backgroundColor);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - dpToPx(4,getResources()),transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  public static FloatBuffer makeFloatBuffer(float[] arr){  ByteBuffer bb=ByteBuffer.allocateDirect(arr.length * 4);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(arr);  fb.position(0);  return fb;}  }
class C{  static final void validateFractions(double[] fractions){  if (fractions == null) {    throw new SketchesArgumentException("Fractions cannot be null.");  }  int len=fractions.length;  if (len == 0)   return;  double flo=fractions[0];  double fhi=fractions[fractions.length - 1];  if ((flo < 0.0) || (fhi > 1.0)) {    throw new SketchesArgumentException("A fraction cannot be less than zero or greater than 1.0");  }  Util.validateValues(fractions);  return;}  }
class C{  public DragView(Context context,Bitmap bitmap,int registrationX,int registrationY,int left,int top,int width,int height){  super(context);  mWindowManager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  mRegistrationX=registrationX + (PADDING_TO_SCALE / 2);  mRegistrationY=registrationY + (PADDING_TO_SCALE / 2);  final float scaleFactor=((float)width + PADDING_TO_SCALE) / (float)width;  final Matrix scale=new Matrix();  scale.setScale(scaleFactor,scaleFactor);  mBitmap=Bitmap.createBitmap(bitmap,left,top,width,height,scale,true);}  }
class C{  static Observable<FingerprintDecryptionResult> create(Context context,String keyName,String encrypted){  return Observable.create(new FingerprintDecryptionObservable(context,keyName,encrypted,new Base64Provider()));}  }
class C{  public T caseParameter_(Parameter_ object){  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int fieldIndex(String field){  return delegate.fieldIndex(field);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.897 -0500",hash_original_method="BD1C6A6330D89BF80F1DBE244E3DBF31",hash_generated_method="2E2352B9AC294EC89AB900FF85D56561") public void run(){  while (this.isRunning) {    try {synchronized (this) {        while (sipStack.maxConnections != -1 && this.nConnections >= sipStack.maxConnections) {          try {            this.wait();            if (!this.isRunning)             return;          } catch (          InterruptedException ex) {            break;          }        }        this.nConnections++;      }      Socket newsock=sock.accept();      if (sipStack.isLoggingEnabled()) {        getSIPStack().getStackLogger().logDebug("Accepting new connection!");      }      incomingTcpMessageChannels.add(new TCPMessageChannel(newsock,sipStack,this));    } catch (    SocketException ex) {      this.isRunning=false;    }catch (    IOException ex) {      if (sipStack.isLoggingEnabled())       getSIPStack().getStackLogger().logException(ex);      continue;    }catch (    Exception ex) {      InternalErrorHandler.handleException(ex);    }  }}  }
class C{  public String maxDecimalPlacesTipText(){  return "The maximum number of digits to print after the decimal " + "point for numeric values";}  }
class C{  public static String isOutputBitFree(int nAddress,int bitNum){  if ((nAddress < 0) || (nAddress > 127)) {    log.error("illegal node adddress in free bit test");    return ("");  }  if ((bitNum < 1) || (bitNum > 2048)) {    log.error("illegal bit number in free bit test");    return ("");  }  jmri.Turnout t=null;  String sysName="";  sysName=makeSystemName("T",nAddress,bitNum);  t=jmri.InstanceManager.turnoutManagerInstance().getBySystemName(sysName);  if (t != null) {    return (sysName);  }  String altName="";  altName=convertSystemNameToAlternate(sysName);  t=jmri.InstanceManager.turnoutManagerInstance().getBySystemName(altName);  if (t != null) {    return (altName);  }  if (bitNum > 1) {    sysName=makeSystemName("T",nAddress,bitNum - 1);    t=jmri.InstanceManager.turnoutManagerInstance().getBySystemName(sysName);    if (t != null) {      if (t.getNumberOutputBits() == 2) {        return (sysName);      }    } else {      altName=convertSystemNameToAlternate(sysName);      if (altName != null) {        t=jmri.InstanceManager.turnoutManagerInstance().getBySystemName(altName);        if (t != null) {          if (t.getNumberOutputBits() == 2) {            return (altName);          }        }      }    }  }  jmri.Light lgt=null;  sysName=makeSystemName("L",nAddress,bitNum);  lgt=jmri.InstanceManager.lightManagerInstance().getBySystemName(sysName);  if (lgt != null) {    return (sysName);  }  altName=convertSystemNameToAlternate(sysName);  lgt=jmri.InstanceManager.lightManagerInstance().getBySystemName(altName);  if (lgt != null) {    return (altName);  }  return ("");}  }
class C{  public void loadTagFiles(Compiler compiler,Node.Nodes page) throws JasperException {  tempVector=new ArrayList<Compiler>();  page.visit(new TagFileLoaderVisitor(compiler));}  }
class C{  protected double estimateRemainingTravelCost(final InternalLandmarkData fromRole,final int index){  double tmpTravTime;  final double fromMinLandmarkTravelTime=fromRole.getMinLandmarkTravelTime(index);  final double toMaxLandmarkTravelTime=toData.getMaxLandmarkTravelTime(index);  tmpTravTime=fromMinLandmarkTravelTime - toMaxLandmarkTravelTime;  if (tmpTravTime < 0) {    tmpTravTime=toData.getMinLandmarkTravelTime(index) - fromRole.getMaxLandmarkTravelTime(index);    if (tmpTravTime <= 0) {      return 0;    }  }  return tmpTravTime * this.overdoFactor;}  }
class C{  private void removeCondBranch(BasicBlock source,Instruction cb,IR ir,Instruction di){  if (DEBUG)   VM.sysWrite("Eliminating definitely not-taken branch " + cb + "\n");  if (IfCmp.conforms(cb) && IfCmp.hasGuardResult(cb)) {    cb.insertBefore(Move.create(GUARD_MOVE,IfCmp.getGuardResult(cb),IfCmp.getGuardResult(di).copy()));  }  BasicBlock deadBB=cb.getBranchTarget();  cb.remove();  source.recomputeNormalOut(ir);  if (!source.pointsOut(deadBB)) {    SSA.purgeBlockFromPHIs(source,deadBB);  }}  }
class C{  @Override public int read(char b[],int off,int len) throws IOException {  ensureOpen();  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  if (pos >= count) {    return -1;  }  if (pos + len > count) {    len=count - pos;  }  if (len <= 0) {    return 0;  }  System.arraycopy(buf,pos,b,off,len);  pos+=len;  return len;}  }
class C{  private float categoryProbability(Collection<T> features,K category){  return ((float)this.categoryCount(category) / (float)this.getCategoriesTotal()) * featuresProbabilityProduct(features,category);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:04.375 -0500",hash_original_method="9C90F0AD6131A4566D6AF431EC38BE50",hash_generated_method="E01374FD1E1E369CB4B351319DA3A487") public X509CertImpl(byte[] encoding) throws IOException {  this((Certificate)Certificate.ASN1.decode(encoding));}  }
class C{  public boolean canSeekBackwards(){  return true;}  }
class C{  public Message(MessageLevel level,Object sender,String[] senderParams,String id,String[] idParams){  messageSender=sender;  messageLevel=level;  messageId=id;  messageIdParams=idParams;  messageSenderParams=senderParams;  messageDate=new Date();}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  @Override public void updateNClob(int columnIndex,Reader x,long length) throws SQLException {  updateClob(columnIndex,x,length);}  }
class C{  public final void clearAll(){  m_messageIds.clear();  m_componentIds.clear();  m_sourceIds.clear();  m_src2AnalysisGrpMap.clear();}  }
class C{  protected final IntConstantOperand CAL16(Address a){  return IC(PPCMaskLower16(a.toWord().toOffset()));}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof IInterval) {    IInterval di=(IInterval)o;    return (di.getLeft() == left) && (di.getRight() == right);  }  return false;}  }
class C{  protected void updateReferences(Collection<Entity> persisted,Collection<Entity> committed){  for (  Entity persistedEntity : persisted) {    for (    Entity entity : committed) {      if (entity != persistedEntity) {        updateReferences(persistedEntity,entity,new HashSet<>());      }    }  }}  }
class C{  public static String gotoTableToString(OFInstructionGotoTable inst,Logger log){  return Short.toString(inst.getTableId().getValue());}  }
class C{  public static long parseDate(String string){  int offset=0, length=string.length(), state=0;  int year=-1, month=-1, date=-1;  int hour=-1, minute=-1, second=-1;  final int PAD=0, LETTERS=1, NUMBERS=2;  StringBuffer buffer=new StringBuffer();  while (offset <= length) {    char next=offset < length ? string.charAt(offset) : '\r';    offset++;    int nextState;    if ((next >= 'a' && next <= 'z') || (next >= 'A' && next <= 'Z'))     nextState=LETTERS; else     if (next >= '0' && next <= '9')     nextState=NUMBERS; else     if (" ,-:\r\t".indexOf(next) == -1)     throw new IllegalArgumentException(); else     nextState=PAD;    if (state == NUMBERS && nextState != NUMBERS) {      int digit=Integer.parseInt(buffer.toString());      buffer.setLength(0);      if (digit >= 70) {        if (year != -1 || (next != ' ' && next != ',' && next != '\r'))         throw new IllegalArgumentException();        year=digit;      } else       if (next == ':') {        if (hour == -1)         hour=digit; else         if (minute == -1)         minute=digit; else         throw new IllegalArgumentException();      } else       if (next == ' ' || next == ',' || next == '-' || next == '\r') {        if (hour != -1 && minute == -1)         minute=digit; else         if (minute != -1 && second == -1)         second=digit; else         if (date == -1)         date=digit; else         if (year == -1)         year=digit; else         throw new IllegalArgumentException();      } else       if (year == -1 && month != -1 && date != -1)       year=digit; else       throw new IllegalArgumentException();    } else     if (state == LETTERS && nextState != LETTERS) {      String text=buffer.toString().toUpperCase();      buffer.setLength(0);      if (text.length() < 3)       throw new IllegalArgumentException();      if (parse(text,WEEKDAYS) != -1) {      } else       if (month == -1 && (month=parse(text,MONTHS)) != -1) {      } else       if (text.equals("GMT")) {      } else       throw new IllegalArgumentException();    }    if (nextState == LETTERS || nextState == NUMBERS)     buffer.append(next);    state=nextState;  }  if (year != -1 && month != -1 && date != -1) {    if (hour == -1)     hour=0;    if (minute == -1)     minute=0;    if (second == -1)     second=0;    Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("GMT"));    int current=cal.get(Calendar.YEAR) - 80;    if (year < 100) {      year+=current / 100 * 100;      if (year < current)       year+=100;    }    cal.set(Calendar.YEAR,year);    cal.set(Calendar.MONTH,month);    cal.set(Calendar.DATE,date);    cal.set(Calendar.HOUR_OF_DAY,hour);    cal.set(Calendar.MINUTE,minute);    cal.set(Calendar.SECOND,second);    cal.set(Calendar.MILLISECOND,0);    return cal.getTime().getTime();  }  throw new IllegalArgumentException();}  }
class C{  public static int binarySearchCeil(long[] a,long key,boolean inclusive,boolean stayInBounds){  int index=Arrays.binarySearch(a,key);  index=index < 0 ? ~index : (inclusive ? index : (index + 1));  return stayInBounds ? Math.min(a.length - 1,index) : index;}  }
class C{  public MoreLikeThisQueryBuilder include(boolean include){  this.include=include;  return this;}  }
class C{  private JInternalFrame createInternalFrame(Icon icon,Integer layer,int width,int height){  JInternalFrame internalFrame=new JInternalFrame();  if (!windowTitleField.getText().equals(resourceManager.getString("InternalFrameDemo.frame_label"))) {    internalFrame.setTitle(windowTitleField.getText() + "  ");  } else {    internalFrame=new JInternalFrame(resourceManager.getString("InternalFrameDemo.frame_label") + " " + windowCount+ "  ");  }  internalFrame.setClosable(windowClosable.isSelected());  internalFrame.setMaximizable(windowMaximizable.isSelected());  internalFrame.setIconifiable(windowIconifiable.isSelected());  internalFrame.setResizable(windowResizable.isSelected());  internalFrame.setBounds(FRAME0_X + 20 * (windowCount % 10),FRAME0_Y + 20 * (windowCount % 10),width,height);  internalFrame.setContentPane(new ImageScroller(icon));  windowCount++;  desktop.add(internalFrame,layer);  try {    internalFrame.setSelected(true);  } catch (  java.beans.PropertyVetoException e2) {  }  internalFrame.show();  return internalFrame;}  }
class C{  private static DisplayMode findDisplayMode(GraphicsDevice gd){  DisplayMode dms[]=gd.getDisplayModes();  DisplayMode currentDM=gd.getDisplayMode();  for (  DisplayMode dm : dms) {    if (!dm.equals(currentDM) && dm.getRefreshRate() == currentDM.getRefreshRate()) {      return dm;    }  }  return null;}  }
class C{  protected KMLAbstractGeometry(String namespaceURI){  super(namespaceURI);}  }
class C{  private List _asStructuredContentArray(List array){  if (array == null) {    return null;  }  List children;  if (array instanceof java.util.Vector) {    children=new java.util.Vector();  } else {    children=new ArrayList();  }  for (Iterator elements=array.iterator(); elements.hasNext(); ) {    Object o=elements.next();    if (o instanceof Map) {      children.add(new MapContent((Map)o,this));    } else     if (o instanceof String) {      children.add(new MapContent(o,this));    }  }  return children;}  }
class C{  @Override public void append(final String text,final ITopLevelAgent agent,final GamaColor color){  append(text,agent,color == null ? null : GamaColors.get(color));}  }
class C{  public boolean derivesId(){  return false;}  }
class C{  public Loader process(){  return new Loader(this.ctxt);}  }
class C{  public void unsubscribe(final String subscriptionId,final UnsubscribeListener listener){  if (listener != null) {    mListeners.put(subscriptionId,listener);  }  final Map<String,Object> data=new HashMap<String,Object>();  data.put(Protocol.Field.MESSAGE,Protocol.Message.UNSUBSCRIBE);  data.put(Protocol.Field.ID,subscriptionId);  send(subscriptionId,data);}  }
class C{  public static boolean startDocumentPrint(int type,MPrintFormat customPrintFormat,int Record_ID,ASyncProcess parent,int WindowNo,boolean IsDirectPrint,String printerName){  ReportEngine re=ReportEngine.get(Env.getCtx(),type,Record_ID);  if (re == null) {    if (Ini.isClient()) {      ADialog.error(0,null,"NoDocPrintFormat");    } else {      try {        ClassLoader loader=Thread.currentThread().getContextClassLoader();        if (loader == null)         loader=ReportCtl.class.getClassLoader();        Class<?> clazz=loader.loadClass("org.adempiere.webui.window.FDialog");        Method m=clazz.getMethod("error",Integer.TYPE,String.class);        m.invoke(null,0,"NoDocPrintFormat");      } catch (      Exception e) {        throw new AdempiereException(e);      }    }    return false;  }  if (customPrintFormat != null) {    re.setPrintFormat(customPrintFormat);  }  if (re.getPrintFormat() != null) {    MPrintFormat format=re.getPrintFormat();    if (format.getJasperProcess_ID() > 0) {      ServerReportCtl.runJasperProcess(Record_ID,re,IsDirectPrint,printerName);    } else {      createOutput(re,!IsDirectPrint,printerName);      if (IsDirectPrint) {        ReportEngine.printConfirm(type,Record_ID);      }    }  }  return true;}  }
class C{  public void testWaypointsTableUpdate(){  Waypoint waypoint1=new Waypoint();  Waypoint waypoint2=new Waypoint();  Waypoint waypoint3=new Waypoint();  Waypoint waypoint4=new Waypoint();  Location location=new Location("gps");  location.setLatitude(10.0);  location.setLongitude(8.0);  waypoint1.setLocation(location);  waypoint2.setLocation(location);  waypoint3.setLocation(location);  waypoint4.setLocation(location);  Capture<ContentObserver> contentObserverCapture=new Capture<ContentObserver>();  expect(myTracksProviderUtils.getWaypointCursor(eq(TRACK_ID),AndroidMock.leq(-1L),eq(TrackDataHub.MAX_DISPLAYED_WAYPOINTS))).andStubAnswer(new FixedSizeCursorAnswer(2));  expect(myTracksProviderUtils.createWaypoint(isA(Cursor.class))).andReturn(waypoint1).andReturn(waypoint2).andReturn(waypoint1).andReturn(waypoint2);  dataSource.registerContentObserver(eq(WaypointsColumns.CONTENT_URI),capture(contentObserverCapture));  trackDataListener1.clearWaypoints();  trackDataListener2.clearWaypoints();  trackDataListener1.onNewWaypoint(waypoint1);  trackDataListener2.onNewWaypoint(waypoint1);  trackDataListener1.onNewWaypoint(waypoint2);  trackDataListener2.onNewWaypoint(waypoint2);  trackDataListener1.onNewWaypointsDone();  trackDataListener2.onNewWaypointsDone();  replay();  trackDataHub.start();  trackDataHub.loadTrack(TRACK_ID);  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.WAYPOINTS_TABLE));  trackDataHub.registerTrackDataListener(trackDataListener2,EnumSet.of(TrackDataType.WAYPOINTS_TABLE));  verifyAndReset();  ContentObserver contentObserver=contentObserverCapture.getValue();  expect(myTracksProviderUtils.getWaypointCursor(eq(TRACK_ID),AndroidMock.leq(-1L),eq(TrackDataHub.MAX_DISPLAYED_WAYPOINTS))).andStubAnswer(new FixedSizeCursorAnswer(3));  expect(myTracksProviderUtils.createWaypoint(isA(Cursor.class))).andReturn(waypoint1).andReturn(waypoint2).andReturn(waypoint3);  trackDataListener1.clearWaypoints();  trackDataListener2.clearWaypoints();  trackDataListener1.onNewWaypoint(waypoint1);  trackDataListener2.onNewWaypoint(waypoint1);  trackDataListener1.onNewWaypoint(waypoint2);  trackDataListener2.onNewWaypoint(waypoint2);  trackDataListener1.onNewWaypoint(waypoint3);  trackDataListener2.onNewWaypoint(waypoint3);  trackDataListener1.onNewWaypointsDone();  trackDataListener2.onNewWaypointsDone();  replay();  contentObserver.onChange(false);  verifyAndReset();  expect(myTracksProviderUtils.getWaypointCursor(eq(TRACK_ID),AndroidMock.leq(-1L),eq(TrackDataHub.MAX_DISPLAYED_WAYPOINTS))).andStubAnswer(new FixedSizeCursorAnswer(4));  expect(myTracksProviderUtils.createWaypoint(isA(Cursor.class))).andReturn(waypoint1).andReturn(waypoint2).andReturn(waypoint3).andReturn(waypoint4);  trackDataListener2.clearWaypoints();  trackDataListener2.onNewWaypoint(waypoint1);  trackDataListener2.onNewWaypoint(waypoint2);  trackDataListener2.onNewWaypoint(waypoint3);  trackDataListener2.onNewWaypoint(waypoint4);  trackDataListener2.onNewWaypointsDone();  replay();  trackDataHub.unregisterTrackDataListener(trackDataListener1);  contentObserver.onChange(false);  verifyAndReset();  dataSource.unregisterContentObserver(contentObserver);  replay();  trackDataHub.unregisterTrackDataListener(trackDataListener2);  contentObserver.onChange(false);  verifyAndReset();}  }
class C{  public static String u3(int v){  char[] result=new char[6];  for (int i=0; i < 6; i++) {    result[5 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void tagDefineBitsJPEG2(int id,byte[] data) throws IOException {  if (tags != null) {    tags.tagDefineBitsJPEG2(id,data);  }}  }
class C{  public void remove(Object o1,Object o2){  table.remove(o1,o2);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean removeWebAppDebugModelListener(IWebAppDebugModelListener listener){synchronized (privateInstanceLock) {    return webAppDebugModelListeners.remove(listener);  }}  }
class C{  protected void commonInit(){  hardcodedProps=new Properties();  runtimeProps=new Properties(hardcodedProps);  defaults=runtimeProps;  initHardCodedProperties(hardcodedProps);  initRuntimeProperties(runtimeProps);}  }
class C{  public InvocationManagerBuilder<I> router(InvocationRouter<I> router){  Objects.requireNonNull(router);  _router=router;  return this;}  }
class C{  public boolean isFinished(){  AsyncHttpRequest _request=request.get();  return _request == null || _request.isDone();}  }
class C{  protected void extendElement(Element e){}  }
class C{  private static int compateOids(ObjectIdentifier oid1,ObjectIdentifier oid2){  if (oid1 == oid2) {    return 0;  }  int[] ioid1=oid1.getOid();  int[] ioid2=oid2.getOid();  int min=ioid1.length < ioid2.length ? ioid1.length : ioid2.length;  for (int i=0; i < min; ++i) {    if (ioid1[i] < ioid2[i]) {      return -1;    }    if (ioid1[i] > ioid2[i]) {      return 1;    }    if ((i + 1) == ioid1.length && (i + 1) < ioid2.length) {      return -1;    }    if ((i + 1) < ioid1.length && (i + 1) == ioid2.length) {      return 1;    }  }  return 0;}  }
class C{  private NotLevelEqualsRule(final Level level){  super();  this.level=level;}  }
class C{  public static boolean isSameLocalTime(final Calendar cal1,final Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());}  }
class C{  private void closeFile(){  if (plogStream != null) {    try {      plogStream.close();      logger.info("File " + plogFilename + " closed.");    } catch (    IOException e) {      logger.warn("Unable to close file cleanly: " + plogFilename);    } finally {      plogStream=null;    }  }}  }
class C{  public static double parseDouble(String s) throws NumberFormatException {  try {    return Double.parseDouble(s);  } catch (  NumberFormatException e) {  }  if (s.equals("?")) {    return Double.NaN;  }  throw new NumberFormatException();}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  private void additionalSection(final MaterialSection section){  if (customLayoutR > -1) {    section.swapLayout(customLayoutR);  }  section.build(activity);}  }
class C{  public static Injector createInjector(Stage stage,Module... modules){  return createInjector(stage,Arrays.asList(modules));}  }
class C{  public synchronized String toMasterFile(){  Iterator zentries=data.entrySet().iterator();  StringBuffer sb=new StringBuffer();  nodeToString(sb,originNode);  while (zentries.hasNext()) {    Map.Entry entry=(Map.Entry)zentries.next();    if (!origin.equals(entry.getKey()))     nodeToString(sb,entry.getValue());  }  return sb.toString();}  }
class C{  private static BitmapSampled cropBitmap(Context context,Uri loadedImageUri,float[] points,int degreesRotated,int orgWidth,int orgHeight,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY,int reqWidth,int reqHeight,int sampleMulti){  Rect rect=getRectFromPoints(points,orgWidth,orgHeight,fixAspectRatio,aspectRatioX,aspectRatioY);  int width=reqWidth > 0 ? reqWidth : rect.width();  int height=reqHeight > 0 ? reqHeight : rect.height();  Bitmap result=null;  int sampleSize=1;  try {    BitmapSampled bitmapSampled=decodeSampledBitmapRegion(context,loadedImageUri,rect,width,height,sampleMulti);    result=bitmapSampled.bitmap;    sampleSize=bitmapSampled.sampleSize;  } catch (  Exception e) {  }  if (result != null) {    try {      result=rotateBitmapInt(result,degreesRotated);      if (degreesRotated % 90 != 0) {        result=cropForRotatedImage(result,points,rect,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY);      }    } catch (    OutOfMemoryError e) {      if (result != null) {        result.recycle();      }      throw e;    }    return new BitmapSampled(result,sampleSize);  } else {    return cropBitmap(context,loadedImageUri,points,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY,sampleMulti,rect,width,height);  }}  }
class C{  public static void main(String... args) throws Exception {  FileOutputStream fos=new FileOutputStream(args[0]);  ZipOutputStream zos=new ZipOutputStream(fos);  byte[] manifest=getManifestAsBytes(Integer.parseInt(args[1]));  ZipEntry ze=new ZipEntry("META-INF/MANIFEST.MF");  ze.setMethod(ZipEntry.STORED);  ze.setSize(manifest.length);  ze.setCompressedSize(manifest.length);  ze.setCrc(crc.getValue());  ze.setTime(System.currentTimeMillis());  zos.putNextEntry(ze);  zos.write(manifest);  zos.flush();  ze=new ZipEntry(SOME_KLASS + ".class");  ze.setMethod(ZipEntry.STORED);  ze.setSize(0);  ze.setCompressedSize(0);  ze.setCrc(0);  ze.setTime(System.currentTimeMillis());  zos.putNextEntry(ze);  zos.flush();  zos.closeEntry();  zos.close();  System.exit(0);}  }
class C{  @Deprecated public void insertData(Object[] values,boolean isnew){  Vector<Object> v=new Vector<Object>();  for (int i=0; i < values.length; i++) {    v.add(values[i]);  }  insertData(v,isnew);}  }
class C{  public Help(JDialog dialog,String title,URL url){  super(dialog,title,false);  try {    jbInit();    info.setPage(url);  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }  AEnv.positionCenterWindow(dialog,this);}  }
class C{  public void execute(StepInstance stepInstance,String temporaryFileDirectory){  InputStream is=null;  final String fileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,pirsfBinaryOutputFileName);  Set<RawProtein<PirsfHmmer3RawMatch>> rawProteins;  try {    is=new FileInputStream(fileName);    rawProteins=parser.parse(is);    RawMatch represantiveRawMatch=null;    int count=0;    for (    RawProtein<PirsfHmmer3RawMatch> rawProtein : rawProteins) {      count+=rawProtein.getMatches().size();      if (represantiveRawMatch == null) {        if (rawProtein.getMatches().size() > 0) {          represantiveRawMatch=rawProtein.getMatches().iterator().next();        }      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Parsed out " + rawProteins.size() + " proteins with matches from file "+ fileName);      LOGGER.debug("A total of " + count + " matches from file "+ fileName);    }    rawMatchDAO.insertProteinMatches(rawProteins);    Long now=System.currentTimeMillis();    if (count > 0) {      int matchesFound=0;      int waitTimeFactor=Utilities.getWaitTimeFactor(count).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        String signatureLibraryRelease=represantiveRawMatch.getSignatureLibraryRelease();        while (matchesFound < count) {          Utilities.sleep(waitTimeFactor * 1000);          matchesFound=rawMatchDAO.getActualRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease).size();          if (matchesFound < count) {            LOGGER.warn("Raw matches not yet committed - sleep for 5 seconds , count: " + count);            Utilities.verboseLog("Raw matches not yet committed - sleep for " + waitTimeFactor + " seconds, matches found: "+ matchesFound+ " matchesCount expected: "+ count);          }          Long timeTaken=System.currentTimeMillis() - now;          if (timeTaken > (waitTimeFactor * waitTimeFactor * 100* 1000)) {            LOGGER.warn("H2 database problem: failed to verify " + count + " matches in database for "+ represantiveRawMatch.getSignatureLibrary().getName()+ " after "+ timeTaken+ " ms "+ " - matches found : "+ matchesFound);            break;          }        }      } else {        LOGGER.warn("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + count + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse " + fileName,e);  } finally {    try {      if (is != null) {        is.close();      }    } catch (    IOException e) {      LOGGER.warn("Error closing input stream",e);    }  }}  }
class C{  @Override public GridNioFuture<?> onSessionWrite(GridNioSession ses,Object msg) throws IgniteCheckedException {  return tail.onSessionWrite(ses,msg);}  }
class C{  public MarketplaceRemovedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){  instance=new DiscoveryManager(context,connectableDeviceStore);}  }
class C{  public static EqualityExpression lt(String propertyName,Object value){  return new EqualityExpression(Operator.LESS_THAN,propertyName,value);}  }
class C{  private void throwException(final Throwable vnxEx,final Exception e) throws VNXFilePluginException {  if (e instanceof IllegalArgumentException) {    throw new VNXFilePluginException(VNXFilePluginException.ERRORCODE_ILLEGALARGUMENTEXCEPTION,e,vnxEx != null ? vnxEx.toString() : "Wrong number of Arguments.");  }  if (e instanceof IllegalAccessException) {    throw new VNXFilePluginException(VNXFilePluginException.ERRORCODE_ILLEGALACCESSEXCEPTION,e,vnxEx != null ? vnxEx.toString() : "Access Denied for Class or Method");  }  if (e instanceof InvocationTargetException) {    throw new VNXFilePluginException(VNXFilePluginException.ERRORCODE_INVOCATIONTARGETEXCEPTION,e,vnxEx != null ? vnxEx.toString() : "Internal Error");  }}  }
class C{  public boolean isReadOnly(){  return m_readOnly;}  }
class C{  public CallChainInfo(SootMethod m,Stmt s,String type){  this.type=type;  this.link="as_call";  this.method=m;  this.stmt=s;  calls=1;  if (type.equals("syscall"))   syscalls=1;}  }
class C{  public void actionPerformed(ActionEvent ev){  isAlive=false;}  }
class C{  public static void login(){  final Activity currentActivity=UnityPlayer.currentActivity;  final Intent intent=new Intent(currentActivity,LoginActivity.class);  currentActivity.startActivity(intent);}  }
class C{  public static double fRand(double ndf,double ddf){  return ((ddf * chisqRand(ndf)) / (ndf * chisqRand(ddf)));}  }
class C{  public CommentExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public InsertIntoLatchWait(InsertIntoLatchFactory factory){  isCompleted=true;  earlier=null;  msecTimeout=0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setMuteOnAltSpeedPlay(evalBool(stack.pop()));  return null;}  }
class C{  private void parseConRefs(Node node){  String conRef=null;  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (conRef == null) {        if ((conRef=getValueByParamName("ConRef",childnode,TYPE_TXT)) != null) {          mRcsSettings.writeString(RcsSettingsData.RCS_APN,"".equals(conRef) ? null : conRef);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public ID(final String value){  this.value=value;}  }
class C{  public void addActionListener(ActionListener l){  listeners.addElement(l);}  }
class C{  private void assertIntegrityErrors(IntegrityError... errors){  ImmutableList.Builder<Rows> expected=new ImmutableList.Builder<>();  for (  IntegrityError error : errors) {    expected.add(new Rows().setInsertId("rowid").setJson(error.toMap(now)));  }  ImmutableList.Builder<Rows> allRows=new ImmutableList.Builder<>();  for (  TableDataInsertAllRequest req : rowsCaptor.getAllValues()) {    allRows.addAll(req.getRows());  }  assertThat(allRows.build()).containsExactlyElementsIn(expected.build());}  }
class C{  public void copyFile(OCFile newfile,OCFile currentFile){  Intent service=new Intent(mFileActivity,OperationsService.class);  service.setAction(OperationsService.ACTION_COPY_FILE);  service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH,newfile.getRemotePath());  service.putExtra(OperationsService.EXTRA_REMOTE_PATH,currentFile.getRemotePath());  service.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());  mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);  mFileActivity.showLoadingDialog(mFileActivity.getApplicationContext().getString(R.string.wait_a_moment));}  }
class C{  protected void createMap(MapHandler mapHandler){  double baselineHeight=layerSeparation;  LayerHandler lh=(LayerHandler)mapHandler.get("com.bbn.openmap.LayerHandler");  if (lh != null) {    Debug.message("3d","LayerMapContent: putting layer graphics on the map.");    Layer[] layers=lh.getLayers();    for (int i=layers.length - 1; i >= 0; i--) {      Layer layer=layers[i];      if (layer.isVisible()) {        if (layer instanceof ScaleFilterLayer) {          ScaleFilterLayer sfl=(ScaleFilterLayer)layer;          layer=sfl.getAppropriateLayer();        }        if (layer instanceof OMGraphicHandlerLayer) {          addContent(this,(OMGraphicHandlerLayer)layer,baselineHeight+=layerSeparation);        } else {          Debug.message("3d","LayerMapContent: skipping layer " + layer.getName());        }      }    }  }  addSea(this,mapHandler);}  }
class C{  @Override public Object copy(){  return copy(m_Name);}  }
class C{  public final int actualNumBags(){  int returnValue=0;  int i;  for (i=0; i < m_perBag.length; i++) {    if (Utils.gr(m_perBag[i],0)) {      returnValue++;    }  }  return returnValue;}  }
class C{  @NonNull public TokenRequest createTokenExchangeRequest(){  return createTokenExchangeRequest(Collections.<String,String>emptyMap());}  }
class C{  private static String removeDotSegments(StringBuilder uri,int offset,int limit){  if (offset >= limit) {    return uri.toString();  }  if (uri.charAt(offset) == '/') {    offset++;  }  int segmentStart=offset;  int i=offset;  while (i <= limit) {    int nextSegmentStart=-1;    if (i == limit) {      nextSegmentStart=i;    } else     if (uri.charAt(i) == '/') {      nextSegmentStart=i + 1;    } else {      i++;      continue;    }    if (i == segmentStart + 1 && uri.charAt(segmentStart) == '.') {      uri.delete(segmentStart,nextSegmentStart);      limit-=nextSegmentStart - segmentStart;      i=segmentStart;    } else     if (i == segmentStart + 2 && uri.charAt(segmentStart) == '.' && uri.charAt(segmentStart + 1) == '.') {      int prevSegmentStart=uri.lastIndexOf("/",segmentStart - 2) + 1;      int removeFrom=prevSegmentStart > offset ? prevSegmentStart : offset;      uri.delete(removeFrom,nextSegmentStart);      limit-=nextSegmentStart - removeFrom;      segmentStart=prevSegmentStart;      i=prevSegmentStart;    } else {      i++;      segmentStart=i;    }  }  return uri.toString();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  s=domesticAttr.getNextSibling();  assertNull("attrNextSiblingNullAssert",s);}  }
class C{  public static void main(String[] argv){  runFilter(new ChangeDateFormat(),argv);}  }
class C{  protected ForwardingJavaFileManager(M fileManager){  fileManager.getClass();  this.fileManager=fileManager;}  }
class C{  @Override public boolean add(E o){  return offer(o);}  }
class C{  CharSequence buildHistory(){  StringBuilder historyText=new StringBuilder(1000);  SQLiteOpenHelper helper=new DBHelper(activity);  SQLiteDatabase db=null;  Cursor cursor=null;  try {    db=helper.getWritableDatabase();    cursor=db.query(DBHelper.TABLE_NAME,COLUMNS,null,null,null,null,DBHelper.TIMESTAMP_COL + " DESC");    while (cursor.moveToNext()) {      historyText.append('"').append(massageHistoryField(cursor.getString(0))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(1))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(2))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(3))).append("\",");      long timestamp=cursor.getLong(3);      historyText.append('"').append(massageHistoryField(EXPORT_DATE_TIME_FORMAT.format(new Date(timestamp)))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(4))).append("\"\r\n");    }    return historyText;  }  finally {    close(cursor,db);  }}  }
class C{  public DoubleBuffer(DoubleBufferConsumer target,int capacity){  this.target=target;  this.capacity=capacity;  this.elements=new double[capacity];  this.list=new DoubleArrayList(elements);  this.size=0;}  }
class C{  public static boolean isFreeBsd(){  return osName.indexOf("FreeBSD") > -1;}  }
class C{  @VisibleForTesting protected static DataCiteMetadata.Creators convertEmlCreators(List<Agent> agents) throws InvalidMetadataException {  DataCiteMetadata.Creators creators=FACTORY.createDataCiteMetadataCreators();  if (!agents.isEmpty()) {    for (    Agent agent : agents) {      DataCiteMetadata.Creators.Creator creator=FACTORY.createDataCiteMetadataCreatorsCreator();      if (!Strings.isNullOrEmpty(agent.getFullName())) {        creator.setCreatorName(agent.getFullName());        if (!agent.getUserIds().isEmpty()) {          for (          UserId userId : agent.getUserIds()) {            DataCiteMetadata.Creators.Creator.NameIdentifier nid=convertEmlUserIdIntoCreatorNameIdentifier(userId);            if (nid != null) {              creator.setNameIdentifier(nid);              break;            }          }        }        if (!Strings.isNullOrEmpty(agent.getOrganisation())) {          creator.getAffiliation().add(agent.getOrganisation());        }      } else       if (!Strings.isNullOrEmpty(agent.getOrganisation())) {        creator.setCreatorName(agent.getOrganisation());      } else {        throw new InvalidMetadataException("DataCite schema (v3) requires creator have a name! Creator can be an organisation or person. Check creator/agent: " + agent.toString());      }      creators.getCreator().add(creator);    }    return creators;  } else {    throw new InvalidMetadataException("DataCite schema (v3) requires at least one creator");  }}  }
class C{  public void reattach(){  if (!detached) {    Tracer.throwClientError("Can't reattach this TraceScope  because " + "it is not detached.");  }  tracer.reattachScope(this);  detached=false;}  }
class C{  @DSComment("Binding data, need modeling to be safe") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.983 -0500",hash_original_method="E80E28672DD45A1486192C70E40EF7F5",hash_generated_method="694E1B024AC5136EEA404518D3F1B451") public void clear(){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.clear();    } else {      mObjects.clear();    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public final void makeroom(int nbefore,int nafter){  if (value != null) {    LuaString s=value.strvalue();    value=null;    length=s.m_length;    offset=nbefore;    bytes=new byte[nbefore + length + nafter];    System.arraycopy(s.m_bytes,s.m_offset,bytes,offset,length);  } else   if (offset + length + nafter > bytes.length || offset < nbefore) {    int n=nbefore + length + nafter;    int m=n < 32 ? 32 : n < length * 2 ? length * 2 : n;    realloc(m,nbefore == 0 ? 0 : m - length - nafter);  }}  }
class C{  public AccountsAdapter(Context context,int layoutResourceId,MXMediasCache mediasCache){  super(context,layoutResourceId);  mContext=context;  mLayoutResourceId=layoutResourceId;  mLayoutInflater=LayoutInflater.from(mContext);  mMediasCache=mediasCache;}  }
class C{  public NodeSequence(){  return;}  }
class C{  public void transitionToCancel(){  mCaptureLayout.setVisibility(View.GONE);  mIntentReviewLayout.setVisibility(View.GONE);  mCancelLayout.setVisibility(View.VISIBLE);  mMode=MODE_CANCEL;}  }
class C{  public static List<String> parseCSV(String text){  if (StringUtils.isNotEmpty(text)) {    return StrTokenizer.getCSVInstance(text).getTokenList();  } else {    return new ArrayList<>();  }}  }
class C{  public static void sendCurrentWarning(Object source,String msg){  WarningSystem warning=getCurrent();  if (warning != null)   warning.sendWarning(source,msg); else {    Thread.dumpStack();    System.err.println(msg);    log.warning(msg);  }}  }
class C{  private void startTouch(final MotionEvent event){  mTouchStartX=(int)event.getX();  mTouchStartY=(int)event.getY();  mListTopStart=getChildTop(getChildAt(0)) - mListTopOffset;  startLongPressCheck();  mTouchState=TOUCH_STATE_CLICK;}  }
class C{  public int maxAgeSeconds(){  return maxAgeSeconds;}  }
class C{  protected void displayResult(ActionResult result){  ImageIcon icon=null;  if (Result.SUCCESS.equals(result.getResult())) {    icon=SUCCESS_ICON;    testLabel.setIcon(icon);  } else   if (Result.FAILURE.equals(result.getResult())) {    icon=FAILURE_ICON;    testLabel.setIcon(icon);    SwingTools.showVerySimpleErrorMessage("configuration.test.fail",result.getMessage());  }  testLabel.setToolTipText(result.getMessage());  updateButtonState(false);}  }
class C{  public CustomerInfoExt(String id){  super(id);}  }
class C{  protected void onReceive(Message msg){}  }
class C{  public static List<Review> from(Cursor c){  List<Review> reviews=null;  int count=c.getCount();  if (count > 0) {    reviews=new ArrayList<>(count);    while (c.moveToNext()) {      reviews.add(current(c));    }  }  c.close();  return reviews;}  }
class C{  public TupleQueryResultFormat(String name,String mimeType,String fileExt){  this(name,mimeType,null,fileExt);}  }
class C{  public void addComment(Comment comment){  addProperty(comment);}  }
class C{  private void stopService(){  this.stopSelf();}  }
class C{  private XmlNamespace ensureUniqueNamespaceAlias(Element element,XmlNamespace namespace){  boolean unique;  int serial=0;  do {    unique=true;    for (    XmlNamespace ns : element.nsDecls) {      if (namespace.alias.equals(ns.alias)) {        unique=false;        namespace=new XmlNamespace("ns" + String.valueOf(++serial),namespace.uri);        break;      }    }  } while (!unique);  return namespace;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.062 -0400",hash_original_method="074160D8FBF16E881F1835AE7B894602",hash_generated_method="D2863F9CC24E6EDC6AFEC00CEA4E7DB3") @Override public void write(int b){}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementnormalize.class,args);}  }
class C{  public static void appendCriterium(final CCriteriumTree tree,final CCriteriumTreeNode parent,final ICriterium criterium){  tree.appendNode(parent,new CCriteriumTreeNode(criterium));}  }
class C{  private static Integer insertDistribute(Session session,Integer bookID,int fdrid,int typeDest,int idDest,Timestamp currentDate,int deptId,String userName,Integer userId,int distributionType,String messageForUser,String entidad) throws HibernateException, SQLException, BookException, Exception {  boolean distribute=true;  int distributionID=0;  List distReg=ISicresQueries.getScrDistreg(session,bookID,fdrid,typeDest,idDest);  for (Iterator it=distReg.iterator(); it.hasNext(); ) {    ScrDistreg scr=(ScrDistreg)it.next();    if (scr.getState() != ISDistribution.STATE_RECHAZADO && scr.getState() != ISDistribution.STATE_REDISTRIBUIDO) {      distribute=false;    }  }  if (distribute) {    distributionID=DBEntityDAOFactory.getCurrentDBEntityDAO().getNextIdForScrDistReg(userId,entidad);    Date dateState=BBDDUtils.getDateFromTimestamp(currentDate);    ISicresSaveQueries.saveScrDistreg(session,distributionID,bookID,fdrid,dateState,2,deptId,typeDest,idDest,1,dateState,messageForUser);    ISDistribution isDist=new ISDistribution();    isDist.setDistState(session,distributionID,ISDistribution.STATE_PENDIENTE,dateState,userName,userId,entidad,isDataBaseCaseSensitive(entidad));    isDist.changeStateAcceptRedis(session,bookID,fdrid,deptId,userName,userId,distributionType,currentDate,entidad,isDataBaseCaseSensitive(entidad));  }  return new Integer(distributionID);}  }
class C{  public static boolean isUnAvailable(I_S_Resource r,Timestamp dateTime){  Timestamp date=TimeUtil.trunc(dateTime,TimeUtil.TRUNC_DAY);  final String whereClause=COLUMNNAME_S_Resource_ID + "=? AND AD_Client_ID=?" + " AND TRUNC("+ COLUMNNAME_DateFrom+ ", 'DD') <= ?"+ " AND TRUNC("+ COLUMNNAME_DateTo+ ", 'DD') >= ?";  Properties ctx=r instanceof PO ? ((PO)r).getCtx() : Env.getCtx();  return new Query(ctx,I_S_ResourceUnAvailable.Table_Name,whereClause,null).setParameters(r.getS_Resource_ID(),r.getAD_Client_ID(),date,date).match();}  }
class C{  @NoInline @NoOptCompile @BaselineSaveLSRegisters @Unpreemptible public static int readByte(int fd){  RVMThread.saveThreadState();  RVMThread.enterNative();  int result=sysCall.sysReadByte(fd);  RVMThread.leaveNative();  return result;}  }
class C{  public boolean isDHCP(){  return dhcp;}  }
class C{  public XML deleteClass(Class<?> aClass){  boolean isRemoved=xmlJmapper.classes.remove(new XmlClass(aClass.getName()));  if (!isRemoved)   Error.xmlClassInexistent(this.xmlPath,aClass);  return this;}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  X509Certificate cert=this.engineLookupResolveX509Certificate(element,baseURI,storage);  if (cert != null) {    return cert.getPublicKey();  }  return null;}  }
class C{  public Bundler putString(String key,String value){  bundle.putString(key,value);  return this;}  }
class C{  public KeyRep(Type type,String algorithm,String format,byte[] encoded){  if (type == null || algorithm == null || format == null || encoded == null) {    throw new NullPointerException("invalid null input(s)");  }  this.type=type;  this.algorithm=algorithm;  this.format=format.toUpperCase(Locale.ENGLISH);  this.encoded=encoded.clone();}  }
class C{  public NotificationChain basicSetCondition(Expression newCondition,NotificationChain msgs){  Expression oldCondition=condition;  condition=newCondition;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.CONDITIONAL_EXPRESSION__CONDITION,oldCondition,newCondition);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public void transactionAborted(){  if (listeners.isEmpty()) {    records.reset();  } else {    records.flush();    listeners.forEach(null);  }}  }
class C{  public OMArc(double latPoint,double lonPoint,double radius,double s,double e){  this(new LatLonPoint.Double(latPoint,lonPoint),radius,Length.DECIMAL_DEGREE,-1,s,e);}  }
class C{  public static String fromGenericTag(Tag tag){switch (tag.getType()) {case BYTE:    return fromTag((ByteTag)tag);case BYTE_ARRAY:  return fromTag((ByteArrayTag)tag);case COMPOUND:return fromTag((CompoundTag)tag);case DOUBLE:return fromTag((DoubleTag)tag);case FLOAT:return fromTag((FloatTag)tag);case INT:return fromTag((IntTag)tag);case INT_ARRAY:return fromTag((IntArrayTag)tag);case LIST:return fromTag((ListTag)tag);case LONG:return fromTag((LongTag)tag);case SHORT:return fromTag((ShortTag)tag);case STRING:return fromTag((StringTag)tag);}return null;}  }
class C{  private void defaultParam(){  this.mCircleAttribute=new CircleAttribute();  this.mMaxProgress=100;  this.mSubCurProgress=0;}  }
class C{  @SuppressWarnings("unchecked") private static <T>com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> loadClassFile(final File file,final String pluginDirectory) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  NaviLogger.info("Loading class file %s",file.getAbsolutePath());  final FileClassLoader loader=new FileClassLoader(file.getParentFile().getPath() + System.getProperty("file.separator"));  final String relativePath=pluginDirectory.length() == file.getParentFile().getPath().length() ? "" : file.getParentFile().getPath().substring(pluginDirectory.length());  final String classPrefix=relativePath.replaceAll("[/\\\\]",".");  final Class<?> cls=loader.loadClass(("".equals(classPrefix) ? "" : classPrefix + ".") + FileUtils.getFileBasename(file));  if (com.google.security.zynamics.binnavi.api2.plugins.IPlugin.class.isAssignableFrom(cls)) {    return (com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>)cls.newInstance();  } else {    return null;  }}  }
class C{  public void destroyBucket(AutoMixBucket bucket){  SharedPreferences prefs=getPrefs();  SharedPreferences.Editor editor=prefs.edit();  Set<String> set=new TreeSet<>(prefs.getStringSet(PREF_BUCKETS_IDS,new TreeSet<String>()));  set.remove(bucket.getSessionId());  editor.putStringSet(PREF_BUCKETS_IDS,set);  editor.apply();  mBuckets.remove(bucket);}  }
class C{  public static int[] toIntArray(@Nullable Collection<Integer> c){  if (c == null || c.isEmpty())   return EMPTY_INTS;  int[] arr=new int[c.size()];  int idx=0;  for (  Integer i : c)   arr[idx++]=i;  return arr;}  }
class C{  public void put(ByteBuffer src){  put(src,src.remaining());}  }
class C{  HugeEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;  bits=new long[(enums.length + BIT_IN_LONG - 1) / BIT_IN_LONG];}  }
class C{  public Vertex detach(){  BasicVertex vertex=new BasicVertex();  vertex.setId(this.id);  return vertex;}  }
class C{  SchemaImpl(PropertyMap properties){  super(properties);  this.attributesSchema=properties.contains(WrapProperty.ATTRIBUTE_OWNER);  makeBuiltinMode("#allow",AllowAction.class);  makeBuiltinMode("#attach",AttachAction.class);  makeBuiltinMode("#unwrap",UnwrapAction.class);  defaultBaseMode=makeBuiltinMode("#reject",RejectAction.class);}  }
class C{  public HBaseMailboxMessage(Configuration conf,HBaseId mailboxId,MessageUid uid,MessageId messageId,long modSeq,MailboxMessage original) throws MailboxException {  this.conf=conf;  this.mailboxId=mailboxId;  this.uid=uid;  this.messageId=messageId;  this.modSeq=modSeq;  this.userFlags=new ArrayList<String>();  setFlags(original.createFlags());  this.recent=true;  this.contentOctets=original.getFullContentOctets();  this.bodyStartOctet=(int)(original.getFullContentOctets() - original.getBodyOctets());  this.internalDate=original.getInternalDate();  this.textualLineCount=original.getTextualLineCount();  this.mediaType=original.getMediaType();  this.subType=original.getSubType();  this.properties=original.getProperties();}  }
class C{  public static void update(IJavaProject project,List<OmniEclipseSourceDirectory> sourceFolders,IProgressMonitor monitor) throws CoreException {  SourceFolderUpdater updater=new SourceFolderUpdater(project,sourceFolders);  updater.updateClasspath(monitor);}  }
class C{  public void truncate(int size){  if (pos > size) {    byte[] buff=new byte[size];    System.arraycopy(data,0,buff,0,size);    this.pos=size;    data=buff;  }}  }
class C{  public CandidateView(Context context,AttributeSet attrs){  super(context,attrs);  mSelectionHighlight=context.getResources().getDrawable(R.drawable.list_selector_background_pressed);  LayoutInflater inflate=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  Resources res=context.getResources();  mPreviewPopup=new PopupWindow(context);  mPreviewText=(TextView)inflate.inflate(R.layout.candidate_preview,null);  mPreviewPopup.setWindowLayoutMode(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  mPreviewPopup.setContentView(mPreviewText);  mPreviewPopup.setBackgroundDrawable(null);  mPreviewPopup.setAnimationStyle(R.style.KeyPreviewAnimation);  mColorNormal=res.getColor(R.color.candidate_normal);  mColorRecommended=res.getColor(R.color.candidate_recommended);  mColorOther=res.getColor(R.color.candidate_other);  mDivider=res.getDrawable(R.drawable.keyboard_suggest_strip_divider);  mAddToDictionaryHint=res.getString(R.string.hint_add_to_dictionary);  mPaint=new Paint();  mPaint.setColor(mColorNormal);  mPaint.setAntiAlias(true);  mPaint.setTextSize(mPreviewText.getTextSize() * LatinIME.sKeyboardSettings.candidateScalePref);  mPaint.setStrokeWidth(0);  mPaint.setTextAlign(Align.CENTER);  mDescent=(int)mPaint.descent();  mMinTouchableWidth=(int)res.getDimension(R.dimen.candidate_min_touchable_width);  mGestureDetector=new GestureDetector(new CandidateStripGestureListener(mMinTouchableWidth));  setWillNotDraw(false);  setHorizontalScrollBarEnabled(false);  setVerticalScrollBarEnabled(false);  scrollTo(0,getScrollY());}  }
class C{  public void showFloatingActionButton(){  if (mHidden) {    ObjectAnimator scaleX=ObjectAnimator.ofFloat(this,"scaleX",0,1);    ObjectAnimator scaleY=ObjectAnimator.ofFloat(this,"scaleY",0,1);    AnimatorSet animSetXY=new AnimatorSet();    animSetXY.playTogether(scaleX,scaleY);    animSetXY.setInterpolator(overshootInterpolator);    animSetXY.setDuration(200);    animSetXY.start();    mHidden=false;  }}  }
class C{  public boolean isRadioActive(){  for (  final NetworkInterface i : this.net) {    if (i.isActive())     return true;  }  return false;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static LocalVariableInfo extract(RopMethod method){  LocalVariableExtractor lve=new LocalVariableExtractor(method);  return lve.doit();}  }
class C{  private boolean isProcessing(Channel channel){  return mProcessingChains.containsKey(channel.getChannelID()) && mProcessingChains.get(channel.getChannelID()).isProcessing();}  }
class C{  public static boolean saveNewConf(final byte[] conf,final int offset) throws CommandException {  boolean success=false;synchronized (configLock) {    final AutoFile file=new AutoFile(Path.conf() + ConfType.NewConf);    if (Cfg.DEBUG) {      Check.log(TAG + " (saveNewConf): " + file);    }    success=file.write(conf,offset,false);  }  if (success) {    EvidenceBuilder.info(M.e("New configuration received"));    return true;  } else {    return false;  }}  }
class C{  public int compare(ModuleInterface other){  int cmp=this.id.compareTo(other.id);  if (cmp > 0) {    return 1;  } else   if (cmp < 0) {    return -1;  }  int[] t=this.versionParts(this.version);  int[] r=this.versionParts(other.version);  if (t[0] != r[0]) {    return Integer.signum(t[0] - r[0]) * 2;  }  if (t[1] != r[1]) {    return Integer.signum(t[1] - r[1]) * 3;  }  if (t[2] != r[2]) {    return Integer.signum(t[2] - r[2]) * 4;  }  return 0;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getRouteLineNodeTableDao() : null;}  }
class C{  public void undoLast(Player p){  DoubleLinkedList<Cell> list=lastMoves.get(p);  if (list == null) {    System.err.println("Unexpected NULL list in NeighborState.undoLast");    return;  }  if (list.last() == null) {    System.err.println("Unexpected NULL list in NeighborState.undoLast");  }  list.removeLast();}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  @VisibleForTesting protected String createPrefixesInformation(){  StringBuilder prefixBuilder=new StringBuilder();  for (  String pre : prefixes.keySet()) {    prefixBuilder.append("@prefix ");    prefixBuilder.append(pre);    prefixBuilder.append(": <");    prefixBuilder.append(prefixes.get(pre));    prefixBuilder.append("> .\n");  }  return prefixBuilder.toString();}  }
class C{  boolean handleGlobalKey(Context context,int keyCode,KeyEvent event){  if (mKeyMapping.size() > 0) {    ComponentName component=mKeyMapping.get(keyCode);    if (component != null) {      Intent intent=new Intent(Intent.ACTION_GLOBAL_BUTTON).setComponent(component).putExtra(Intent.EXTRA_KEY_EVENT,event);      context.sendBroadcastAsUser(intent,UserHandle.CURRENT,null);      return true;    }  }  return false;}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,encoding);}  }
class C{  private static final void usage(){}  }
class C{  public static void primeLocationForGeoHeader(Context context){  if (!hasGeolocationPermission(context))   return;  GeolocationTracker.refreshLastKnownLocation(context,REFRESH_LOCATION_AGE);}  }
class C{  public static void main(String[] args){  TestSimpleTagExclude tester=new TestSimpleTagExclude();  if (run(tester,ARGS,TEST,NEGATED_TEST) != 0) {    throw new Error("Javadoc failed to execute.");  }  tester.printSummary();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <E>Collection<E> constrainedCollection(Collection<E> collection,Constraint<? super E> constraint){  return new ConstrainedCollection<E>(collection,constraint);}  }
class C{  protected double[] computeLocalUsingPreviousObservations(double[][] newSourceObs,double[][] newDestObs,boolean isPreviousObservations) throws Exception {  if (means == null) {    throw new Exception("Cannot compute local values without having means either supplied or computed via setObservations()");  }  if (detCovariance == 0) {    detCovariance=MatrixUtils.determinantViaCholeskyResult(L);    if (detCovariance == 0) {      throw new Exception("Covariance matrix is not positive definite");    }    detSourceCovariance=MatrixUtils.determinantViaCholeskyResult(Lsource);    detDestCovariance=MatrixUtils.determinantViaCholeskyResult(Ldest);  }  double[][] invCovariance=MatrixUtils.solveViaCholeskyResult(L,MatrixUtils.identityMatrix(L.length));  double[][] invSourceCovariance=MatrixUtils.solveViaCholeskyResult(Lsource,MatrixUtils.identityMatrix(Lsource.length));  double[][] invDestCovariance=MatrixUtils.solveViaCholeskyResult(Ldest,MatrixUtils.identityMatrix(Ldest.length));  double[] sourceMeans=MatrixUtils.select(means,0,dimensionsSource);  double[] destMeans=MatrixUtils.select(means,dimensionsSource,dimensionsDest);  int lengthOfReturnArray, offset;  if (isPreviousObservations && addedMoreThanOneObservationSet) {    lengthOfReturnArray=newDestObs.length;    offset=0;  } else {    lengthOfReturnArray=newDestObs.length + timeDiff;    offset=timeDiff;  }  double[] localValues=new double[lengthOfReturnArray];  for (int t=offset; t < newDestObs.length; t++) {    double[] sourceDeviationsFromMean=MatrixUtils.subtract(newSourceObs[t - offset],sourceMeans);    double[] destDeviationsFromMean=MatrixUtils.subtract(newDestObs[t],destMeans);    double[] deviationsFromMean=MatrixUtils.append(sourceDeviationsFromMean,destDeviationsFromMean);    double sourceExpArg=MatrixUtils.dotProduct(MatrixUtils.matrixProduct(sourceDeviationsFromMean,invSourceCovariance),sourceDeviationsFromMean);    double adjustedPSource=Math.exp(-0.5 * sourceExpArg) / Math.sqrt(detSourceCovariance);    double destExpArg=MatrixUtils.dotProduct(MatrixUtils.matrixProduct(destDeviationsFromMean,invDestCovariance),destDeviationsFromMean);    double adjustedPDest=Math.exp(-0.5 * destExpArg) / Math.sqrt(detDestCovariance);    double jointExpArg=MatrixUtils.dotProduct(MatrixUtils.matrixProduct(deviationsFromMean,invCovariance),deviationsFromMean);    double adjustedPJoint=Math.exp(-0.5 * jointExpArg) / Math.sqrt(detCovariance);    double localValue=Math.log(adjustedPJoint / (adjustedPSource * adjustedPDest));    localValues[t]=localValue;  }  return localValues;}  }
class C{  public void updateAll(){}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public VersionedFile(String baseDir,String baseName,String suffix){  if (!baseDir.endsWith(FILE_SEPARATOR)) {    baseDir+=FILE_SEPARATOR;  }  this.baseDir=baseDir;  this.suffix=suffix;  this.baseName=baseName;  resetVersion();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Playlist p=(Playlist)stack.pop();  MediaFile[] burnFiles=p.getMediaFiles();  java.util.ArrayList rawFiles=new java.util.ArrayList();  for (int i=0; i < burnFiles.length; i++)   rawFiles.addAll(java.util.Arrays.asList(burnFiles[i].getFiles()));  return Burner.getGlobalBurner().burnFilesToDVD((java.io.File[])rawFiles.toArray(new java.io.File[0]));}  }
class C{  public void addAction(CCAction action,CCNode target,boolean paused){  assert action != null : "Argument action must be non-null";  assert target != null : "Argument target must be non-null";  HashElement element=targets.get(target);  if (element == null) {    element=pool.get();    element.target=target;    element.paused=paused;    targets.put(target,element);  }synchronized (element.actions) {    assert !element.actions.contains(action) : "runAction: Action already running";    element.actions.add(action);  }  action.start(target);}  }
class C{  public void testCertificateFactory08() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory certF;  for (int i=0; i < validValues.length; i++) {    certF=CertificateFactory.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect provider",certF.getProvider(),defaultProvider);    assertEquals("Incorrect type",certF.getType(),validValues[i]);  }}  }
class C{  private void escape(String value) throws Exception {  int size=value.length();  for (int i=0; i < size; i++) {    escape(value.charAt(i));  }}  }
class C{  @Override public void runWithBigquery() throws Exception {  sourceDatasetId=Optional.fromNullable(sourceDatasetId).or(bigquery().getDatasetId());  checkArgument(!tlds.isEmpty(),"Must specify at least 1 TLD to include in billing data table");  try {    makeCurrencyTable();    makeRegistrarView();    makeRegistryView();    makeCreditView();    makeCreditBalanceView();    makePremiumListView();    makeRecurringEventView();    makeBillingView();  } catch (  TableCreationException e) {  }}  }
class C{  public boolean hasPort(){  return port != -1;}  }
class C{  private void persistAllSystemsAndProviders(final List<StorageSystem> systemsToPersist,final List<StorageProvider> providerToPersist){  try {    _dbClient.persistObject(systemsToPersist);    _dbClient.persistObject(providerToPersist);  } catch (  DatabaseException ex) {    _logger.error("Exception occurred while updating StorageSystems & SMISProviders due to ",ex);  }}  }
class C{  @Provides @Config("rdeBucket") public static String provideRdeBucket(@Config("projectId") String projectId){  return projectId + "-rde";}  }
class C{  public static int dayFromDateValue(long x){  return (int)(x & 31);}  }
class C{  @Nullable private IMember binSearch(IType type,int start,int end) throws JavaModelException {  IJavaElement je=getElementAt(type,start);  if (je != null && !je.equals(type)) {    return asMember(je);  }  if (end > start) {    je=getElementAt(type,end);    if (je != null && !je.equals(type)) {      return asMember(je);    }    int mid=((end - start) / 2) + start;    if (mid > start) {      je=binSearch(type,start + 1,mid);      if (je == null) {        je=binSearch(type,mid + 1,end - 1);      }      return asMember(je);    }  }  return null;}  }
class C{  Variogram TheoryVariogramNSGA(SemivariogramType semiType,int n){  double[] y=new double[bins.length];  for (int i=0; i < y.length; i++) {    y[i]=bins[i][n].Value;  }  int nNan=0;  for (int i=0; i < y.length; i++) {    if (!Double.isNaN(y[i])) {      nNan++;    }  }  x=new double[nNan];  double[] y2=new double[nNan];  int ntmp=0;  for (int i=0; i < y.length; i++) {    if (!Double.isNaN(y[i])) {      y2[ntmp]=y[i];      x[ntmp]=bins[i][nthSVariogram].Distance;      ntmp++;    }  }  y=y2;  double[][] pnts=new double[y.length][2];  for (int i=0; i < y.length; i++) {    pnts[i][1]=y[i];    pnts[i][0]=x[i];  }  Variogram var=new Variogram();  var.Type=semiType;  SemivariogramCurveFitter svcf=new SemivariogramCurveFitter();  try {    var=svcf.Run(pnts,semiType,ConsiderNugget);  } catch (  JMException ex) {  }catch (  SecurityException ex) {  }catch (  IOException ex) {  }catch (  ClassNotFoundException ex) {  }  return var;}  }
class C{  public void updateGestureRotation(float x,float y){  mChart.setRotationAngle(mChart.getAngleForPoint(x,y) - mStartAngle);}  }
class C{  protected void findElement(){  driver=WebUIDriver.getWebDriver();  element=driver.findElement(by);}  }
class C{  public void testGetMaxSize(){  assertEquals(16,OlimexRfidProtocol.getMaxSize());}  }
class C{  public Dimension minimumLayoutSize(Container parent){  return preferredLayoutSize(parent);}  }
class C{  protected OMGraphic makeEsriGraphic(BinaryFile shpFile,DrawingAttributes drawingAttributes,Object pointRepresentation,ReadByteTracker byteTracker) throws IOException, FormatException {  EsriGraphic eg=null;  shpFile.byteOrder(false);  int shapeType=shpFile.readInteger();  byteTracker.addRead(4);  if (verbose) {    logger.info("reading shape type: " + shapeType + ", "+ ShapeUtils.getStringForType(shapeType));  }switch (shapeType) {case SHAPE_TYPE_NULL:    break;case SHAPE_TYPE_POINT:  eg=createPointGraphic(shpFile,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYLINE:eg=createPolylineGraphic(shpFile,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYGON:eg=createPolygonGraphic(shpFile,drawingAttributes,byteTracker);break;case SHAPE_TYPE_MULTIPOINT:eg=createMultiPointGraphic(shpFile,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POINTZ:eg=createPointZGraphic(shpFile,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYLINEZ:eg=createPolylineZGraphic(shpFile,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYGONZ:eg=createPolygonZGraphic(shpFile,drawingAttributes,byteTracker);break;case SHAPE_TYPE_MULTIPOINTZ:eg=createMultiPointZGraphic(shpFile,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POINTM:eg=createPointMGraphic(shpFile,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYLINEM:eg=createPolylineMGraphic(shpFile,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYGONM:eg=createPolygonMGraphic(shpFile,drawingAttributes,byteTracker);break;case SHAPE_TYPE_MULTIPOINTM:eg=createMultiPointMGraphic(shpFile,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_MULTIPATCH:default :}return (OMGraphic)eg;}  }
class C{  public GenericEntry createGroup(String groupId,String groupName,String groupDescription,String emailPermission) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty(APPS_PROP_GROUP_ID,groupId);  entry.addProperty(APPS_PROP_GROUP_NAME,groupName);  entry.addProperty(APPS_PROP_GROUP_DESC,groupDescription);  entry.addProperty(APPS_PROP_GROUP_PERMISSION,emailPermission);  return insert(new URL(baseDomainUrl),entry);}  }
class C{  @HLEFunction(nid=0x7F27BB5E,version=150) public int sceNetAdhocPdpDelete(@CheckArgument("checkPdpId") int id,int unk1){  pdpObjects.remove(id).delete();  return 0;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (jdate == null) {    jdate=jcal.newCalendarDate(getZone());    cachedFixedDate=Long.MIN_VALUE;  }}  }
class C{  public RestResponse post() throws RestException {  return postOrPutImpl(true);}  }
class C{  public static boolean isStatic(int flags){  return (flags & AccStatic) != 0;}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("context.list"));  this.add(getPanelSession(),getPanelSession().getName());}  }
class C{  @Override public void writeStartElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {  log.log(Level.FINE,"writeStartElement({0}, {1}, {2})",new Object[]{prefix,localName,namespaceURI});  if (def == null) {    def=WbXmlInitialization.getDefinitionByRoot(localName,namespaceURI);    if (def == null) {      throw new XMLStreamException(String.format("Definition not found for root element '%s'",localName));    }    log.log(Level.FINE,"Setting definition {0}",def.getName());    doc.setDefinition(def);  }  ElementContext parent=new ElementContext(current);  if (parent.getElement() == null) {    parent=this.parents.peek();  } else {    parents.push(parent);  }  int idx=localName.indexOf(':');  if (idx >= 0) {    prefix=localName.substring(0,idx);    localName=localName.substring(idx + 1);  }  if (prefix != null && !prefix.isEmpty()) {    localName=new StringBuilder(prefix).append(":").append(localName).toString();  }  current.setElement(new WbXmlElement(localName));  if (parent != null && parent.getElement() != null) {    parent.getElement().addContent(new WbXmlContent(current.getElement()));  } else {    if (doc.getBody() != null) {      throw new XMLStreamException(String.format("Trying to add a second root element '%s'",localName));    }    doc.setBody(new WbXmlBody(current.getElement()));  }}  }
class C{  protected void recordBlockSnapshotSessionOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,BlockSnapshotSession snapSession,BlockObject sourceObj){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String eventType=opType.getEvType(opStatus);    String description=getDescriptionOfResults(status,sourceObj,snapSession);    s_logger.info("opType: {} detail: {}",opType.toString(),eventType + ':' + description);    String snapSessionId=snapSession.getId().toString();    String snapSessionLabel=snapSession.getLabel();    String sourceObjId=sourceObj.getId().toString();    String opStage=AuditLogManager.AUDITOP_END;    recordBlockSnapshotSessionEvent(dbClient,snapSession,eventType,status,description);switch (opType) {case CREATE_SNAPSHOT_SESSION:      if (opStatus) {        AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,snapSessionId,snapSessionLabel,sourceObjId);      } else {        AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,snapSessionLabel,sourceObjId);      }    break;case RESTORE_SNAPSHOT_SESSION:case DELETE_SNAPSHOT_SESSION:case LINK_SNAPSHOT_SESSION_TARGET:case UNLINK_SNAPSHOT_SESSION_TARGET:case RELINK_SNAPSHOT_SESSION_TARGET:case DELETE_VOLUME_SNAPSHOT:case DELETE_CONSISTENCY_GROUP_SNAPSHOT:  AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,snapSessionId,snapSessionLabel,sourceObjId);break;default :s_logger.error("Unrecognized block snapshot sesion operation type");}} catch (Exception e) {s_logger.error("Failed to record block snapshot session operation {}, err: ",opType.toString(),e);}}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.CONDITIONAL_EXPRESSION__CONDITION:    return basicSetCondition(null,msgs);case ExpressionsPackage.CONDITIONAL_EXPRESSION__TRUE_CASE:  return basicSetTrueCase(null,msgs);case ExpressionsPackage.CONDITIONAL_EXPRESSION__FALSE_CASE:return basicSetFalseCase(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public synchronized void clear(){  mLocalEvents.get().clear();  mSubcriberMap.clear();}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public void tagSetBackgroundColor(Color color) throws IOException {  if (tags != null) {    tags.tagSetBackgroundColor(color);  }}  }
class C{  public boolean isTrueVolatile(){  return false;}  }
class C{  public boolean contains(GeoPoint point){  int docX=Geo3DUtil.encodeValue(point.x);  int docY=Geo3DUtil.encodeValue(point.y);  int docZ=Geo3DUtil.encodeValue(point.z);  return docX >= xMinEnc && docX <= xMaxEnc && docY >= yMinEnc && docY <= yMaxEnc && docZ >= zMinEnc && docZ <= zMaxEnc;}  }
class C{  private void copyAttributesFrom(OperatorMeta operatorMeta){  if (operator != operatorMeta.getOperator()) {    throw new IllegalArgumentException("Operator meta is not for the same operator ");  }  copyAttributes(attributes,operatorMeta.getAttributes());  for (  Map.Entry<InputPort<?>,InputPortMeta> entry : operatorMeta.getPortMapping().inPortMap.entrySet()) {    copyAttributes(getPortMapping().inPortMap.get(entry.getKey()).attributes,entry.getValue().attributes);  }  for (  Map.Entry<OutputPort<?>,OutputPortMeta> entry : operatorMeta.getPortMapping().outPortMap.entrySet()) {    copyAttributes(getPortMapping().outPortMap.get(entry.getKey()).attributes,entry.getValue().attributes);  }}  }
class C{  public static boolean containsAddress(final INaviView view,final UnrelocatedAddress address){  for (  final INaviViewNode node : view.getGraph().getNodes()) {    if (node instanceof INaviFunctionNode) {      final INaviFunctionNode fnode=(INaviFunctionNode)node;      if (fnode.getFunction().getAddress().equals(address.getAddress())) {        return true;      }    } else     if (node instanceof INaviCodeNode) {      final INaviCodeNode cnode=(INaviCodeNode)node;      if (CCodeNodeHelpers.containsAddress(cnode,address.getAddress())) {        return true;      }    }  }  return false;}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  if (USE_HADOOP_TEXT)   term=Text.readString(in); else   term=in.readUTF();  splitno=WritableUtils.readVInt(in);  flushno=WritableUtils.readVInt(in);}  }
class C{  private ELFlash(ExternalContext extContext){  flashInnerMap=new ConcurrentHashMap<>();  WebConfiguration config=WebConfiguration.getInstance(extContext);  String value;  try {    value=config.getOptionValue(WebContextInitParameter.NumberOfConcurrentFlashUsers);    numberOfConcurentFlashUsers=Integer.parseInt(value);  } catch (  NumberFormatException nfe) {    if (LOGGER.isLoggable(Level.WARNING)) {      LOGGER.log(Level.WARNING,"Unable to set number of concurrent flash users.  Defaulting to {0}",numberOfConcurentFlashUsers);    }  }  try {    value=config.getOptionValue(WebContextInitParameter.NumberOfFlashesBetweenFlashReapings);    numberOfFlashesBetweenFlashReapings=Long.parseLong(value);  } catch (  NumberFormatException nfe) {    if (LOGGER.isLoggable(Level.WARNING)) {      LOGGER.log(Level.WARNING,"Unable to set number flashes between flash repaings.  Defaulting to {0}",numberOfFlashesBetweenFlashReapings);    }  }  distributable=config.isOptionEnabled(EnableDistributable);  guard=new ByteArrayGuardAESCTR();}  }
class C{  public boolean isUserAGoat(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.925 -0500",hash_original_method="A466F08B2826217F8F5011AA1A7379A2",hash_generated_method="EE38FC579D3F4C6D892C94DABF909DD5") public synchronized String auditThreads(){  String auditReport=null;  Iterator<ThreadHandle> it=threadHandles.values().iterator();  while (it.hasNext()) {    ThreadHandle threadHandle=(ThreadHandle)it.next();    if (!threadHandle.isThreadActive()) {      Thread thread=threadHandle.getThread();      if (auditReport == null) {        auditReport="Thread Auditor Report:\n";      }      auditReport+="   Thread [" + thread.getName() + "] has failed to respond to an audit request.\n";    }    threadHandle.setThreadActive(false);  }  return auditReport;}  }
class C{  protected void sequence_ColonSepTypeRef_ExportedVariableDeclaration_VariableDeclarationImpl(ISerializationContext context,ExportedVariableDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public VisualCoverageAction(final GraphFrame graphFrame){  super("Visual Coverage");  this.graphFrame=graphFrame;}  }
class C{  public static boolean isNameStartChar(int codePoint){  return isPN_CHARS_U(codePoint) || codePoint == ':' || ASCIIUtil.isNumber(codePoint) || codePoint == '\\' || codePoint == '%';}  }
class C{  public void visitTopLevel(JCCompilationUnit tree){  try {    if (tree.sourcefile.isNameCompatible("package-info",Kind.SOURCE)) {      print("/* package-info */");      println();      printAnnotations(tree.packageAnnotations);    }    printUnit(tree,null);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public final double doOperation(){  double moveWholeClusterOrChangeOnePoint=MathUtils.nextDouble();  double moveWholeClusterProb=0.5;  int numSamples=assignments.getDimension();  int target=MathUtils.nextInt(numSamples);  int targetCluster=(int)assignments.getParameterValue(target);  int ranDim=MathUtils.nextInt(virusLocations.getParameter(0).getDimension());  double draw=(2.0 * MathUtils.nextDouble() - 1.0) * windowSize;  for (int i=0; i < numSamples; i++) {    if ((int)assignments.getParameterValue(i) == targetCluster) {      Parameter vLoc=virusLocations.getParameter(i);      double newValue=vLoc.getParameterValue(ranDim) + draw;      vLoc.setParameterValue(ranDim,newValue);    }  }  return 0.0;}  }
class C{  public void writeFloat(float f,boolean append){  writeFloatArray(new float[]{f},append);}  }
class C{  public void deleteAll(){  HttpDeleteAllAvatarsAction action=new HttpDeleteAllAvatarsAction(this,(InstanceConfig)MainActivity.instance.credentials());  action.execute();}  }
class C{  public static int floor(float a){  return (int)a;}  }
class C{  protected Motion(int sourceValue,float initVelocity,float friction){  this.sourceValue=sourceValue;  this.initVelocity=initVelocity;  this.friction=friction;  duration=(int)((Math.abs(initVelocity)) / friction);  previousLastReturnedValue[0]=-1;}  }
class C{  public Builder textColor(int color){  textColor=color;  return this;}  }
class C{  @Override protected boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime){  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"CreateBucketMessage operateOnRegion: {}",r.getFullPath());  }  if (!r.isInitialized()) {    CreateBucketReplyMessage.sendResponse(getSender(),getProcessorId(),dm,null);    return false;  }  String partitionName=null;  if (r.isFixedPartitionedRegion()) {    FixedPartitionAttributesImpl fpa=PartitionedRegionHelper.getFixedPartitionAttributesForBucket(r,bucketId);    partitionName=fpa.getPartitionName();  }  r.checkReadiness();  InternalDistributedMember primary=r.getRedundancyProvider().createBucketAtomically(bucketId,bucketSize,startTime,false,partitionName);  r.getPrStats().endPartitionMessagesProcessing(startTime);  CreateBucketReplyMessage.sendResponse(getSender(),getProcessorId(),dm,primary);  return false;}  }
class C{  public Id<SignalSystem> convertProgramId2SignalSystemId(Id<DgProgram> programId){  Integer ksIntProgramId=Integer.parseInt(programId.toString());  String matsimStringProgramId=this.idPool.getStringId(ksIntProgramId);  if (matsimStringProgramId.endsWith("00")) {    Id<SignalSystem> id=Id.create(matsimStringProgramId.substring(0,matsimStringProgramId.length() - 2),SignalSystem.class);    return id;  }  throw new IllegalStateException("Can not convert " + matsimStringProgramId + " to signal system id");}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  public static String byteToString(byte[] array){  return new String(Base64.encode(array));}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public GifImageButton(Context context,AttributeSet attrs,int defStyle,int defStyleRes){  super(context,attrs,defStyle,defStyleRes);  postInit(GifViewUtils.initImageView(this,attrs,defStyle,defStyleRes));}  }
class C{  public FieldDoc(int doc,float score){  super(doc,score);}  }
class C{  public static int[] decryptIntegers(String encrypted,String password) throws ServletException {  String encryptedParts[]=encrypted.split("\\|");  if (encryptedParts.length != 3) {    throw new ServletException("Invalid encrypted string.");  }  Decoder decoder=Base64.getDecoder();  byte ciphertext[]=decoder.decode(encryptedParts[0]);  byte iv[]=decoder.decode(encryptedParts[1]);  byte salt[]=decoder.decode(encryptedParts[2]);  byte plainbytes[];  try {    SecretKeyFactory factory=SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");    KeySpec spec=new PBEKeySpec(password.toCharArray(),salt,65536,256);    SecretKey tmp=factory.generateSecret(spec);    SecretKey secret=new SecretKeySpec(tmp.getEncoded(),"AES");    Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding");    cipher.init(Cipher.DECRYPT_MODE,secret,new IvParameterSpec(iv));    plainbytes=cipher.doFinal(ciphertext);  } catch (  Exception ex) {    throw new ServletException(ex);  }  IntBuffer buff=ByteBuffer.wrap(plainbytes).asIntBuffer();  int integers[]=new int[buff.remaining()];  for (int i=0; i < integers.length; ++i) {    integers[i]=buff.get();  }  return integers;}  }
class C{  private static void close(Closeable c) throws IOException {  if (c != null)   c.close();}  }
class C{  public void addDocument(String referenceURI) throws XMLSignatureException {  this.signedInfo.addDocument(this.baseURI,referenceURI,null,Constants.ALGO_ID_DIGEST_SHA1,null,null);}  }
class C{  void stopImpl(){  if ((mState == STATE_PLAYING || mState == STATE_BUFFERING) && mPlaybackQueue.size() > 0 && mCurrentTrack >= 0) {    pauseImpl();  }  mRemoteMetadata.notifyStopped();  abandonAudioFocus();  for (  IPlaybackCallback cb : mCallbacks) {    try {      cb.onPlaybackPause();    } catch (    RemoteException e) {      Log.e(TAG,"Cannot call playback callback for playback pause event",e);    }  }  mState=STATE_STOPPED;  mIsStopping=true;  stopForeground(true);  mIsForeground=false;  stopSelf();}  }
class C{  public IntentBuilder sizeLimit(int limit){  result.putExtra(MediaStore.EXTRA_SIZE_LIMIT,limit);  return (this);}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public WorkItem(){}  }
class C{  Vector showPreTagText(String text,int align){  Vector comps=new Vector();  if ((text == null) || (text.equals(""))) {    return comps;  }  String line="";  for (int c=0; c < text.length(); c++) {    char ch=text.charAt(c);    if ((ch == 10) || (ch == 13)) {      if (!line.equals("")) {        comps.addElement(addString(line,align));        newLine(align);        line="";      }    } else {      line+=ch;    }  }  if (!line.equals("")) {    comps.addElement(addString(line,align));    newLine(align);  }  return comps;}  }
class C{  public boolean isJmxEngineMetrics(){  return jmxEngineMetrics;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  protected void deployArchive(HttpServletRequest request,HttpServletResponse response,String contextPath) throws IOException {  Log.getLogger(this.getClass()).debug("Remotely deploying a remote web archive with context " + contextPath);  if (contextPath == null) {    sendError(response,"The path variable is not set");  } else   if (!contextPath.startsWith("/")) {    sendError(response,"The path variable must start with /");  } else   if (getContextHandler(contextPath) != null) {    sendError(response,"The webapp context path is already in use");  } else {    Log.getLogger(this.getClass()).debug("trying to get the remote web archive");    File webappFile=new File(this.webAppDirectory,(contextPath.equals("/") ? "ROOT" : contextPath.substring(1)) + ".war");    InputStream inputStream=new BufferedInputStream(request.getInputStream());    OutputStream outputStream=new BufferedOutputStream(new FileOutputStream(webappFile),8096);    int i=inputStream.read();    while (i != -1) {      outputStream.write(i);      i=inputStream.read();    }    inputStream.close();    outputStream.flush();    outputStream.close();    long timeout=System.currentTimeMillis() + this.timeout;    while (System.currentTimeMillis() < timeout) {      try {        Thread.sleep(1000);      } catch (      InterruptedException e) {        sendError(response,"Got interrupted when trying to start the webapp");        return;      }      Handler contextHandler=(Handler)getContextHandler(contextPath);      if (contextHandler != null && contextHandler.isStarted()) {        sendMessage(response,"Webapp deployed at context " + contextPath);        return;      }    }    sendError(response,"Unexpected error when trying to start the webapp");  }}  }
class C{  public XYBoxAndWhiskerRenderer(){  this(-1.0);}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public Token nextToken() throws IOException {  if (pushCount > 0) {    pushCount--;    return token;  } else   if (upcomingToken.type != Tokenizer.TT_ERROR) {    token.assign(upcomingToken);    upcomingToken.type=Tokenizer.TT_ERROR;    return token;  } else {    token.init();    char[] chr=new char[1];    while (hasMore()) {      read(chr,1);      int symbolIndex=lookupSymbol(chr[0]);      if (symbolIndex != -1) {        TokenizerToken workToken=token.type == Tokenizer.TT_TOKEN && token.text.length() > 0 ? upcomingToken : token;        TokenizerSymbol symbol=symbols.get(symbolIndex);        boolean hideSymbol=symbol.hidden;        if (!hideSymbol) {          workToken.init();          workToken.text.append(symbol.startText);          workToken.type=Tokenizer.TT_SYMBOL;          workToken.name=symbol.name;        }        if (symbol.tailText != null) {          while (hasMore() && !compare(symbol.tailText.toCharArray(),0)) {            read(chr,1);            if (!hideSymbol) {              workToken.text.append(chr);              workToken.innerText.append(chr);            }          }          if (!hideSymbol) {            workToken.text.append(symbol.tailText);          }          workToken.type=Tokenizer.TT_BLOCK;        }        if (token.text.length() > 0) {          break;        }      } else {        token.text.append(chr);        token.type=Tokenizer.TT_TOKEN;      }    }  }  return token;}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float x=timePassed * mDurationReciprocal;    if (mInterpolator == null)     x=viscousFluid(x); else     x=mInterpolator.getInterpolation(x);  mCurrX=mStartX + Math.round(x * mDeltaX);mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);float distanceCoef=1.f;float velocityCoef=0.f;if (index < NB_SAMPLES) {final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE_POSITION[index];final float d_sup=SPLINE_POSITION[index + 1];velocityCoef=(d_sup - d_inf) / (t_sup - t_inf);distanceCoef=d_inf + (t - t_inf) * velocityCoef;}mCurrVelocity=velocityCoef * mDistance / mDuration * 1000.0f;mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  public boolean isOp(User user){  return getDao().levelContainsUser(UserLevel.OP,this,user);}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    wasReset=true;  }  return wasReset;}  }
class C{  public static void asserType(Object object,Class<?> classToBeChecked){  asserType(object,classToBeChecked,"");}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);}  }
class C{  private void notifyNeighbors(){  scheduledNeighborUpdate=false;  final Block blockType=getCasing().getCasingWorld().getBlockState(getCasing().getPosition()).getBlock();  getCasing().getCasingWorld().notifyNeighborsOfStateChange(getCasing().getPosition(),blockType);}  }
class C{  @Override public final void enable(RAbstractVector operand){  operandNACheck.enable(operand);}  }
class C{  public String buildSentence(){  String sentence="There was a problem assembling the sentence!";  try {    sentence=String.format("%s %s %s %s %s.",getWord("SUBJECT"),getWord("VERB"),getWord("ARTICLE"),getWord("ADJECTIVE"),getWord("NOUN"));  } catch (  Exception e) {    System.out.println(e);  }  return sentence;}  }
class C{  public void testDynDateMissingFunction() throws Exception {  checkSortMissingFunction("dyn_datedv","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  protected void initialize(){  Properties props;  try {    props=Utils.readProperties(PROPERTIES_FILE);  } catch (  Exception e) {    e.printStackTrace();    props=new Properties();  }  m_FontColor=getColor(props.getProperty("FontColor",""));  m_BackgroundColor=getColor(props.getProperty("BackgroundColor",""));  m_NodeColor=getColor(props.getProperty("NodeColor",""));  m_LineColor=getColor(props.getProperty("LineColor",""));  m_ZoomBoxColor=getColor(props.getProperty("ZoomBoxColor",""));  m_ZoomBoxXORColor=getColor(props.getProperty("ZoomBoxXORColor",""));  m_ShowBorder=Boolean.parseBoolean(props.getProperty("ShowBorder","true"));}  }
class C{  public void onSectionAttached(int number){switch (number) {case 1:    mTitle=getString(R.string.title_section2);  break;case 2:mTitle=getString(R.string.title_section3);break;case 3:mTitle=getString(R.string.title_section4);break;case 0:default :mTitle=getString(R.string.title_section1);break;}}  }
class C{  public void transcode(TranscoderInput input,TranscoderOutput output) throws TranscoderException {  Reader r=input.getReader();  Writer w=output.getWriter();  if (r == null) {    Document d=input.getDocument();    if (d == null) {      throw new Error("Reader or Document expected");    }    StringWriter sw=new StringWriter(1024);    try {      DOMUtilities.writeDocument(d,sw);    } catch (    IOException ioEx) {      throw new Error("IO:" + ioEx.getMessage());    }    r=new StringReader(sw.toString());  }  if (w == null) {    throw new Error("Writer expected");  }  prettyPrint(r,w);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.211 -0400",hash_original_method="7BE0FA92DD0CA68C870F3D19CEFD5D01",hash_generated_method="AC43D648618F74D9245DE59CAED6C3EB") public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    if (movePrevious()) {      playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);      return true;    }  break;case KeyEvent.KEYCODE_DPAD_RIGHT:if (moveNext()) {  playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);  return true;}break;case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_ENTER:mReceivedInvokeKeyDown=true;}return super.onKeyDown(keyCode,event);}  }
class C{  public SIPDialog createDialog(SIPClientTransaction transaction,SIPResponse sipResponse){  String dialogId=((SIPRequest)transaction.getRequest()).getDialogId(false);  SIPDialog retval=null;  if (this.earlyDialogTable.get(dialogId) != null) {    retval=this.earlyDialogTable.get(dialogId);    if (sipResponse.isFinalResponse()) {      this.earlyDialogTable.remove(dialogId);    }  } else {    retval=new SIPDialog(transaction,sipResponse);  }  return retval;}  }
class C{  public Namespace(PrincipalUser creator,String qualifier,PrincipalUser owner,Set<PrincipalUser> users){  super(creator);  setQualifier(qualifier);  setOwner(owner);  if (users != null && !users.isEmpty()) {    setUsers(users);  }  addUser(owner);}  }
class C{  public Builder idPropertyKey(final String idPropertyKey){  this.idPropertyKey=idPropertyKey;  return this;}  }
class C{  protected void clearEvents(){}  }
class C{  public WhileStatement createWhileStatement(){  WhileStatementImpl whileStatement=new WhileStatementImpl();  return whileStatement;}  }
class C{  private void validateUpdateRemoveInitiators(ExportUpdateParam param,ExportGroup exportGroup){  if (param != null && param.getInitiators() != null && param.getInitiators().hasRemoved() && exportGroup != null && exportGroup.getExportMasks() != null) {    for (    URI initiatorId : param.getInitiators().getRemove()) {      if (!ExportMaskUtils.getExportMasks(_dbClient,exportGroup).isEmpty()) {        boolean okToRemove=true;        ExportMask mask=null;        for (        ExportMask exportMask : ExportMaskUtils.getExportMasks(_dbClient,exportGroup)) {          mask=exportMask;          if (exportMask.hasExistingInitiator(initiatorId.toString())) {            okToRemove=false;          }        }        if (!okToRemove) {          Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorId);          throw APIException.badRequests.invalidParameterRemovePreexistingInitiator(mask.getMaskName(),initiator.getInitiatorPort());        }      }    }  }}  }
class C{  public PCA(DataSet dataSet){  this(dataSet,Integer.MAX_VALUE);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode02.class,args);}  }
class C{  public Chat(final String chatName,final Messengers messengers,final CHAT_SOUND_PROFILE chatSoundProfile){  this.chatSoundProfile=chatSoundProfile;  this.messengers=messengers;  statusManager=new StatusManager(messengers);  chatChannelName=ChatController.getChatChannelName(chatName);  this.chatName=chatName;  sentMessages=new SentMessagesHistory();  init();}  }
class C{  public static synchronized SSLClientSessionCache usingDirectory(File directory) throws IOException {  FileClientSessionCache.Impl cache=caches.get(directory);  if (cache == null) {    cache=new FileClientSessionCache.Impl(directory);    caches.put(directory,cache);  }  return cache;}  }
class C{  private static void adjust(double[] array,int lower,int upper){  int j, k;  double temp;  j=lower;  k=lower * 2;  while (k <= upper) {    if ((k < upper) && (array[k - 1] < array[k])) {      k+=1;    }    if (array[j - 1] < array[k - 1]) {      temp=array[j - 1];      array[j - 1]=array[k - 1];      array[k - 1]=temp;    }    j=k;    k*=2;  }}  }
class C{  @Override public void onMeasure(int widthSpec,int heightSpec){  super.onMeasure(widthSpec,heightSpec);  setMeasuredDimension(getMeasuredWidth(),getMeasuredWidth());}  }
class C{  private static int pruneReduceError(TreeNodeVisitor parent,int pathFollowed,TreeNodeVisitor current,List<DataPointPair<Integer>> testSet){  if (current == null)   return 0;  int nodesPruned=0;  if (!current.isLeaf()) {    int numSplits=current.childrenCount();    List<List<DataPointPair<Integer>>> splits=new ArrayList<List<DataPointPair<Integer>>>(numSplits);    List<DataPointPair<Integer>> hadMissing=new ArrayList<DataPointPair<Integer>>(0);    for (int i=0; i < numSplits; i++)     splits.add(new ArrayList<DataPointPair<Integer>>());    for (    DataPointPair<Integer> dpp : testSet) {      int path=current.getPath(dpp.getDataPoint());      if (path >= 0)       splits.get(path).add(dpp); else       hadMissing.add(dpp);    }    if (!hadMissing.isEmpty())     DecisionStump.distributMissing(splits,hadMissing);    for (int i=numSplits - 1; i >= 0; i--)     nodesPruned+=pruneReduceError(current,i,current.getChild(i),splits.get(i));  }  if (current.isLeaf() && parent != null) {    double childCorrect=0;    double parrentCorrect=0;    for (    DataPointPair<Integer> dpp : testSet) {      DataPoint dp=dpp.getDataPoint();      int truth=dpp.getPair();      if (current.localClassify(dp).mostLikely() == truth)       childCorrect+=dp.getWeight();      if (parent.localClassify(dp).mostLikely() == truth)       parrentCorrect+=dp.getWeight();    }    if (parrentCorrect >= childCorrect) {      parent.disablePath(pathFollowed);      return nodesPruned + 1;    }    return nodesPruned;  }  return nodesPruned;}  }
class C{  public static ResponseData parse(String responseData){  int index=responseData.indexOf(':');  String mainData, extraData;  if (-1 == index) {    mainData=responseData;    extraData="";  } else {    mainData=responseData.substring(0,index);    extraData=index >= responseData.length() ? "" : responseData.substring(index + 1);  }  String[] fields=TextUtils.split(mainData,Pattern.quote("|"));  if (fields.length < 6) {    throw new IllegalArgumentException();  }  ResponseData data=new ResponseData();  data.extra=extraData;  data.responseCode=Integer.parseInt(fields[0]);  data.nonce=Integer.parseInt(fields[1]);  data.packageName=fields[2];  data.versionCode=fields[3];  data.userId=fields[4];  data.timestamp=Long.parseLong(fields[5]);  return data;}  }
class C{  @Override protected URLConnection openConnection(URL u) throws IOException {  return new JarURLConnectionImpl(u);}  }
class C{  public void addChangeListener(ChangeListener l){  styles.addChangeListener(l);}  }
class C{  private void genMonitorExit(){  try {    if (method.isStatic()) {      Offset klassOffset=Offset.fromIntSignExtend(Statics.findOrCreateObjectLiteral(klass.getClassForType()));      asm.generateJTOCpush(klassOffset);    } else {      asm.emitPUSH_RegDisp(ESP,localOffset(0));    }    genParameterRegisterLoad(asm,1);    asm.generateJTOCcall(Entrypoints.unlockMethod.getOffset());  } catch (  UnreachableBytecodeException e) {    asm.emitINT_Imm(TRAP_UNREACHABLE_BYTECODE + RVM_TRAP_BASE);  }}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public static boolean closeSubdiagramEditors(State state){  Diagram diagram=DiagramPartitioningUtil.getSubDiagram(state);  if (diagram == null)   return true;  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();  IEditorReference[] refs=activePage.getEditorReferences();  for (  IEditorReference ref : refs) {    try {      if (ref.getEditorInput() instanceof IDiagramEditorInput) {        IDiagramEditorInput diagramInput=(IDiagramEditorInput)ref.getEditorInput();        if (diagramInput.getDiagram().equals(diagram)) {          boolean close=MessageDialog.openQuestion(activePage.getActivePart().getSite().getShell(),"Close subdiagram editor?","The subdiagram is still open in another editor. Do you want to close it?");          if (close) {            activePage.closeEditor(ref.getEditor(false),false);          }          return close;        }      }    } catch (    PartInitException e) {      e.printStackTrace();    }  }  return true;}  }
class C{  public ConnectionEvent(PooledConnection con,SQLException ex){  super(con);  this.ex=ex;}  }
class C{  public static void main(String[] args) throws Exception {  new AerovisConverter().start(args);}  }
class C{  @Override public boolean mayRemoveInstanceAfterFirstBatchDone(){  return true;}  }
class C{  private void goToBackup(){  mStage=Stage.PASSWORD;  updateStage();  mPassword.requestFocus();  mPassword.postDelayed(mShowKeyboardRunnable,500);  mFingerprintUiHelper.stopListening();}  }
class C{  @Override public void keyTyped(KeyEvent event){  try {    if (event.getKeyChar() == '>') {      onBraceClosed(event);    } else     if (event.getKeyChar() == ' ') {      onEntityOpened(event);    }  } catch (  BadLocationException e) {    e.printStackTrace();  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public Task<?> activateAsync(){  return Task.done();}  }
class C{  public static void removeTempPackagingFiles(String cleanDir){  File subFile=null;  File dir=new File(cleanDir);  try {    if (dir.exists() && dir.isDirectory()) {      File[] arrFiles=dir.listFiles();      for (int i=0; i < arrFiles.length; ++i) {        subFile=arrFiles[i];        if (subFile.isDirectory()) {          if (subFile.getName().indexOf("AOTBuildOutput") == 0 || (subFile.getName().endsWith("_ipa"))) {            System.out.println("Deleting packaging temp file directory " + subFile.getCanonicalPath());            FileUtils.recursivelyDelete(subFile.getCanonicalPath());          }        } else {          if ((subFile.getName().indexOf("air") == 0) && (subFile.getName().endsWith(".tmp"))) {            System.out.println("Deleting packaging temp file " + subFile.getCanonicalPath());            subFile.delete();          }          if ((subFile.getName().indexOf("non-aot") == 0) && (subFile.getName().endsWith(".tmp"))) {            System.out.println("Deleting packaging temp file " + subFile.getCanonicalPath());            subFile.delete();          }          if ((subFile.getName().indexOf("apk") == 0) && (subFile.getName().endsWith(".tmp"))) {            System.out.println("Deleting packaging temp file " + subFile.getCanonicalPath());            subFile.delete();          }          if ((subFile.getName().endsWith(".ipa")) || (subFile.getName().endsWith(".bar")) || (subFile.getName().endsWith(".apk"))) {            System.out.println("Deleting packaging temp file " + subFile.getCanonicalPath());            subFile.delete();          }          if ((subFile.getName().indexOf("BAR") == 0) && (subFile.getName().endsWith("tmp"))) {            System.out.println("Deleting packaging temp file " + subFile.getCanonicalPath());            subFile.delete();          }        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private static void checkVirtualPoolValidForGivenUnManagedFileSystemUris(StringSet stringSetVpoolUris,URI unManagedFileSystemUri,URI vpoolUri){  if (null == stringSetVpoolUris) {    throw APIException.internalServerErrors.storagePoolNotMatchingVirtualPool("FileSystem",unManagedFileSystemUri);  }  _logger.info("supported vpools :" + Joiner.on("\t").join(stringSetVpoolUris));  if (!stringSetVpoolUris.contains(vpoolUri.toString())) {    throw APIException.internalServerErrors.virtualPoolNotMatchingStoragePool(vpoolUri,"FileSystem",unManagedFileSystemUri,Joiner.on("\t").join(stringSetVpoolUris));  }}  }
class C{  public ScaleAndIndexes indexes(int... indexes){  return new ScaleAndIndexes(scale,indexes.clone());}  }
class C{  @Override protected void preCheck(String[] args) throws Exception {  super.preCheck(args);  if (!Jython.isPresent()) {    throw new Exception("Jython classes are not present in CLASSPATH!");  }}  }
class C{  public static void copyFileFromInputStream(String filePath,InputStream in,String charset) throws UtilException {  OutputStream out=null;  try {    out=new BufferedOutputStream(new FileOutputStream(filePath));    int len=0;    byte[] temp=new byte[1024];    while ((len=in.read(temp)) != -1) {      out.write(temp,0,len);    }    out.flush();  } catch (  Exception e) {    throw new UtilException(ErrorCodeDef.WRITE_FILE_ERROR_10029,e);  } finally {    IOUtils.closeQuietly(out);    IOUtils.closeQuietly(in);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputHeader;  int row, col;  int progress;  double z, zn, previousZ;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int maxDist=0;  int subgridSize=0;  int neighbourhoodMaxDist=0;  int neighbourhoodSubgridSize=0;  boolean isLowest;  double aSmallValue;  int a, r, c, i, j, k, n, cn, rn;  int numNoFlowCells;  double largeVal=Float.MAX_VALUE;  int visitedCells;  boolean atLeastOneSourceCell;  boolean flag;  int b=0;  double costAccumVal;  double cost1, cost2;  double newcostVal;  double maxCost=largeVal;  boolean useMaxCost=false;  boolean solutionFound;  double[] dist=new double[8];  int[] backLinkDir={4,5,6,7,0,1,2,3};  int numUnsolvedCells=0;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodMaxDist=Integer.parseInt(args[2]);  neighbourhoodSubgridSize=2 * neighbourhoodMaxDist + 1;  if (!args[3].toLowerCase().equals("not specified")) {    maxCost=Double.parseDouble(args[3]);    useMaxCost=true;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  Long startTime=System.currentTimeMillis();  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    String shortName=DEM.getShortHeaderFile();    double cellSizeX=DEM.getCellSizeX();    double cellSizeY=DEM.getCellSizeY();    double minCellSize=Math.min(cellSizeX,cellSizeY);    double diagCellSize=Math.sqrt(cellSizeX * cellSizeX + cellSizeY * cellSizeY);    dist[0]=diagCellSize / minCellSize;    dist[1]=cellSizeX / minCellSize;    dist[2]=diagCellSize / minCellSize;    dist[3]=cellSizeY / minCellSize;    dist[4]=diagCellSize / minCellSize;    dist[5]=cellSizeX / minCellSize;    dist[6]=diagCellSize / minCellSize;    dist[7]=cellSizeY / minCellSize;    FileUtilities.copyFile(new File(inputHeader),new File(outputHeader));    FileUtilities.copyFile(new File(inputHeader.replace(".dep",".tas")),new File(outputHeader.replace(".dep",".tas")));    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw");    z=Math.abs(DEM.getMaximumValue());    if (z <= 9) {      aSmallValue=0.00001F;    } else     if (z <= 99) {      aSmallValue=0.0001F;    } else     if (z <= 999) {      aSmallValue=0.001F;    } else     if (z <= 9999) {      aSmallValue=0.001F;    } else     if (z <= 99999) {      aSmallValue=0.01F;    } else {      aSmallValue=1F;    }    if (args.length == 5 && !args[4].toLowerCase().equals("not specified")) {      aSmallValue=Double.parseDouble(args[4]);    }    double[][] LNDecrementValue=new double[neighbourhoodSubgridSize][neighbourhoodSubgridSize];    for (r=0; r < neighbourhoodSubgridSize; r++) {      for (c=0; c < neighbourhoodSubgridSize; c++) {        j=Math.abs(c - neighbourhoodMaxDist);        k=Math.abs(r - neighbourhoodMaxDist);        LNDecrementValue[r][c]=(j + k) * aSmallValue;      }    }    DEM.close();    ArrayList<DepGridCell> pq2=new ArrayList<>();    updateProgress("Loop 1 of 2:",-1);    for (row=1; row < (rows - 1); row++) {      for (col=1; col < (cols - 1); col++) {        z=output.getValue(row,col);        if (z != noData) {          isLowest=true;          for (a=0; a < 8; a++) {            cn=col + dX[a];            rn=row + dY[a];            zn=output.getValue(rn,cn);            if (zn < z && zn != noData) {              isLowest=false;              break;            }          }          if (isLowest) {            pq2.add(new DepGridCell(row,col,z));          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    numNoFlowCells=pq2.size();    int oneHundredthOfNumNoFlowCells=(int)(numNoFlowCells / 100);    updateProgress("Loop 2 of 2:",-1);    Long startTimeLoop2=System.currentTimeMillis();    DepGridCell cell=new DepGridCell(-1,-1,largeVal);    visitedCells=0;    n=0;    progress=0;    do {      cell=pq2.get(visitedCells);      col=cell.col;      row=cell.row;      z=cell.z;      isLowest=true;      for (a=0; a < 8; a++) {        cn=col + dX[a];        rn=row + dY[a];        zn=output.getValue(rn,cn);        if (zn < z && zn != noData) {          isLowest=false;          break;        }      }      if (isLowest) {        maxDist=neighbourhoodMaxDist;        subgridSize=neighbourhoodSubgridSize;        double[][] cost=new double[subgridSize][subgridSize];        double[][] accumulatedcost=new double[subgridSize][subgridSize];        int[][] backLink=new int[subgridSize][subgridSize];        atLeastOneSourceCell=false;        for (r=-maxDist; r <= maxDist; r++) {          for (c=-maxDist; c <= maxDist; c++) {            zn=output.getValue(row + r,col + c);            j=c + maxDist;            k=r + maxDist;            if ((zn + LNDecrementValue[k][j]) < z && zn != noData) {              cost[k][j]=0;              accumulatedcost[k][j]=0;              atLeastOneSourceCell=true;            } else             if ((zn + LNDecrementValue[k][j]) >= z) {              cost1=(zn - z) + LNDecrementValue[k][j];              if (cost1 <= maxCost) {                cost[k][j]=cost1;              } else {                cost[k][j]=largeVal;              }              accumulatedcost[k][j]=largeVal;            } else {              cost[k][j]=noData;              accumulatedcost[k][j]=noData;            }            backLink[k][j]=(int)noData;          }        }        cost[maxDist][maxDist]=0;        accumulatedcost[maxDist][maxDist]=largeVal;        if (atLeastOneSourceCell) {          PriorityQueue<CostDistCell> activeCellList=new PriorityQueue<>(maxDist * 4);          for (r=0; r < subgridSize; r++) {            for (c=0; c < subgridSize; c++) {              if (accumulatedcost[r][c] == largeVal) {                cost1=cost[r][c];                for (a=0; a < 8; a++) {                  cn=c + dX[a];                  rn=r + dY[a];                  if (cn >= 0 && cn < subgridSize && rn >= 0 && rn < subgridSize) {                    if (accumulatedcost[rn][cn] == 0) {                      cost2=cost[rn][cn];                      newcostVal=(cost1 + cost2) / 2 * dist[a];                      activeCellList.add(new CostDistCell(r,c,newcostVal,a));                    }                  }                }              }            }          }          if (activeCellList.size() > 0) {            do {              CostDistCell cdCell=activeCellList.poll();              if (cdCell != null) {                r=cdCell.row;                c=cdCell.col;                costAccumVal=cdCell.aCost;                if (accumulatedcost[r][c] > costAccumVal) {                  accumulatedcost[r][c]=costAccumVal;                  backLink[r][c]=cdCell.backLink;                  cost1=cost[r][c];                  for (a=0; a < 8; a++) {                    cn=c + dX[a];                    rn=r + dY[a];                    if (cn >= 0 && cn < subgridSize && rn >= 0 && rn < subgridSize) {                      cost2=cost[rn][cn];                      newcostVal=costAccumVal + (cost1 + cost2) / 2 * dist[a];                      if (newcostVal < accumulatedcost[rn][cn]) {                        activeCellList.add(new CostDistCell(rn,cn,newcostVal,backLinkDir[a]));                      }                    }                  }                }              } else {                activeCellList.clear();              }            } while (activeCellList.size() > 0);            solutionFound=true;            if (useMaxCost) {              c=maxDist;              r=maxDist;              previousZ=z;              b=0;              flag=true;              do {                b=backLink[r][c];                if (b >= 0) {                  c=c + dX[b];                  r=r + dY[b];                  if (cost[r][c] == largeVal) {                    solutionFound=false;                  }                } else {                  flag=false;                }              } while (flag);            }            if (solutionFound) {              c=maxDist;              r=maxDist;              previousZ=z;              b=0;              flag=true;              do {                b=backLink[r][c];                if (b >= 0) {                  c=c + dX[b];                  r=r + dY[b];                  col=col + dX[b];                  row=row + dY[b];                  zn=output.getValue(row,col);                  if (zn > (previousZ - aSmallValue)) {                    output.setValue(row,col,previousZ - aSmallValue);                  }                  previousZ=output.getValue(row,col);                } else {                  flag=false;                }              } while (flag);            } else {              numUnsolvedCells++;            }          } else {            numUnsolvedCells++;          }        } else {          numUnsolvedCells++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      visitedCells++;      n++;      if (n == oneHundredthOfNumNoFlowCells || (visitedCells % 500 == 0)) {        if (n == oneHundredthOfNumNoFlowCells) {          n=0;          progress++;        }        long secPassed=(System.currentTimeMillis() - startTimeLoop2) / 1000;        long secRemaining=(long)(secPassed * ((double)numNoFlowCells / visitedCells) - secPassed);        String timeRemaining=String.format("%02d:%02d:%02d:%02d",secRemaining / 86400,(secRemaining % 86400) / 3600,(secRemaining % 3600) / 60,(secRemaining % 60));        updateProgress("Solved " + df.format((visitedCells - numUnsolvedCells)) + " pits (Est. time remaining "+ timeRemaining+ "):",progress);      }    } while (visitedCells < numNoFlowCells);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    Long endTime=System.currentTimeMillis();    returnData(outputHeader);    String results="Depression Breaching Results:\n";    results+="Input DEM:\t" + shortName + "\n";    results+="Output DEM:\t" + output.getShortHeaderFile() + "\n";    results+="Solved Pit Cells:\t" + df.format(visitedCells - numUnsolvedCells);    results+="\nUnsolved Pit Cells:\t" + df.format(numUnsolvedCells);    results+="\nMax distance:\t" + neighbourhoodMaxDist;    if (useMaxCost) {      results+="\nMax Elev. Decrement:\t" + maxCost;    }    long sec=(endTime - startTime) / 1000;    String duration=String.format("%02d:%02d:%02d:%02d",sec / 86400,(sec % 86400) / 3600,(sec % 3600) / 60,(sec % 60));    results+="\nDuration:\t" + duration;    returnData(results);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean equalsLR0(LR1State state){  return kernel.hashCode() == state.kernel.hashCode() && kernel.equals(state.kernel);}  }
class C{  public <T extends JCTree>void printExprs(List<T> trees) throws IOException {  printExprs(trees,", ");}  }
class C{  public CExpressionEvaluationException(final String msg){  super(msg);}  }
class C{  public TenantConfigurationValue<T> build(){  return configuration;}  }
class C{  public void appendFrame(int pos,int offsetDelta,int[] tags,int[] data) throws BadBytecode {}  }
class C{  public static void main(String[] args){  Locale.setDefault(Locale.US);  MapViewFrame frame=new MapViewFrame(args);  frame.readMap(DataResource.getULMFileResource());  frame.setTitle("OSM Viewer");  frame.setSize(800,600);  frame.setVisible(true);}  }
class C{  @Deprecated public void disableResizedPosting(){  resizedPostingDisableCount++;}  }
class C{  public void searchStarted(String searchString){  Enumeration e=bg.getElements();  String value=null;  while (e.hasMoreElements()) {    AbstractButton button=(AbstractButton)e.nextElement();    if (button.isSelected()) {      value=button.getText();    }  }  for (  TreeViewer.TextSearchType searchType : TreeViewer.TextSearchType.values()) {    if (searchType.toString().equals(value)) {      treePanel.getTreeViewer().selectTaxa("!name",searchType,searchString,false);    }  }}  }
class C{  @EventHandler(priority=EventPriority.LOW) public void onModuleLoadComplete(ModuleLoadCompleteEvent event){  Cardinal.getInstance().getMatchThreads().forEach(null);}  }
class C{  public static boolean isSamePackage(IPackageFragment pack1,IPackageFragment pack2){  return pack1.getElementName().equals(pack2.getElementName());}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGraphicsRegisterFlagsNone:    return "cudaGraphicsRegisterFlagsNone";case cudaGraphicsRegisterFlagsReadOnly:  return "cudaGraphicsRegisterFlagsReadOnly";case cudaGraphicsRegisterFlagsWriteDiscard:return "cudaGraphicsRegisterFlagsWriteDiscard";case cudaGraphicsRegisterFlagsSurfaceLoadStore:return "cudaGraphicsRegisterFlagsSurfaceLoadStore";case cudaGraphicsRegisterFlagsTextureGather:return "cudaGraphicsRegisterFlagsTextureGather";}return "INVALID cudaGraphicsRegisterFlags: " + n;}  }
class C{  public AbstractColorChooserPanel removeChooserPanel(AbstractColorChooserPanel panel){  int containedAt=-1;  for (int i=0; i < chooserPanels.length; i++) {    if (chooserPanels[i] == panel) {      containedAt=i;      break;    }  }  if (containedAt == -1) {    throw new IllegalArgumentException("chooser panel not in this chooser");  }  AbstractColorChooserPanel[] newArray=new AbstractColorChooserPanel[chooserPanels.length - 1];  if (containedAt == chooserPanels.length - 1) {    System.arraycopy(chooserPanels,0,newArray,0,newArray.length);  } else   if (containedAt == 0) {    System.arraycopy(chooserPanels,1,newArray,0,newArray.length);  } else {    System.arraycopy(chooserPanels,0,newArray,0,containedAt);    System.arraycopy(chooserPanels,containedAt + 1,newArray,containedAt,(chooserPanels.length - containedAt - 1));  }  setChooserPanels(newArray);  return panel;}  }
class C{  public void testInvalidRequestProto() throws Exception {  String resdata="Response Data";  Response response=Response.newBuilder().setStrData(resdata).build();  socketRpcServer.registerService(new FakeServiceImpl(null).withResponse(response));  FakeSocket socket=new FakeSocket(false).withRequest(createRpcRequest(TestService.getDescriptor().getFullName(),TestService.getDescriptor().getMethods().get(0).getName(),ByteString.copyFrom("Bad Request".getBytes())));  runHandler(socket);  assertFalse(socket.getResponse().getCallback());  assertTrue(socket.getResponse().hasError());  assertEquals(ErrorReason.BAD_REQUEST_PROTO,socket.getResponse().getErrorReason());}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,String salt) throws GeneralSecurityException {  return generateKeyFromPassword(password,Base64.decode(salt,BASE64_FLAGS));}  }
class C{  public static Map<String,Object> createProductionRun(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productId=(String)context.get("productId");  Timestamp startDate=(Timestamp)context.get("startDate");  BigDecimal pRQuantity=(BigDecimal)context.get("pRQuantity");  String facilityId=(String)context.get("facilityId");  String workEffortId=(String)context.get("routingId");  String workEffortName=(String)context.get("workEffortName");  String description=(String)context.get("description");  GenericValue routing=null;  GenericValue product=null;  List<GenericValue> routingTaskAssocs=null;  try {    product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();    if (product == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductNotExist",locale));    }  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(e.getMessage());  }  try {    Map<String,Object> routingInMap=UtilMisc.toMap("productId",productId,"applicableDate",startDate,"userLogin",userLogin);    if (workEffortId != null) {      routingInMap.put("workEffortId",workEffortId);    }    Map<String,Object> routingOutMap=dispatcher.runSync("getProductRouting",routingInMap);    routing=(GenericValue)routingOutMap.get("routing");    routingTaskAssocs=UtilGenerics.checkList(routingOutMap.get("tasks"));  } catch (  GenericServiceException gse) {    Debug.logWarning(gse.getMessage(),module);  }  if (routing == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductRoutingNotExist",locale));  }  if (UtilValidate.isEmpty(routingTaskAssocs)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingHasNoRoutingTask",locale));  }  List<BOMNode> components=null;  Map<String,Object> serviceContext=FastMap.newInstance();  serviceContext.put("productId",productId);  serviceContext.put("quantity",pRQuantity);  serviceContext.put("userLogin",userLogin);  Map<String,Object> resultService=null;  try {    resultService=dispatcher.runSync("getManufacturingComponents",serviceContext);    components=UtilGenerics.checkList(resultService.get("components"));  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the getManufacturingComponents service",module);    return ServiceUtil.returnError(e.getMessage());  }  if (workEffortName == null) {    String prdName=UtilValidate.isNotEmpty(product.getString("productName")) ? product.getString("productName") : product.getString("productId");    String wefName=UtilValidate.isNotEmpty(routing.getString("workEffortName")) ? routing.getString("workEffortName") : routing.getString("workEffortId");    workEffortName=prdName + "-" + wefName;  }  serviceContext.clear();  serviceContext.put("workEffortTypeId","PROD_ORDER_HEADER");  serviceContext.put("workEffortPurposeTypeId","WEPT_PRODUCTION_RUN");  serviceContext.put("currentStatusId","PRUN_CREATED");  serviceContext.put("workEffortName",workEffortName);  serviceContext.put("description",description);  serviceContext.put("facilityId",facilityId);  serviceContext.put("estimatedStartDate",startDate);  serviceContext.put("quantityToProduce",pRQuantity);  serviceContext.put("userLogin",userLogin);  try {    resultService=dispatcher.runSync("createWorkEffort",serviceContext);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the createWorkEffort service",module);    return ServiceUtil.returnError(e.getMessage());  }  String productionRunId=(String)resultService.get("workEffortId");  if (Debug.infoOn()) {    Debug.logInfo("ProductionRun created: " + productionRunId,module);  }  serviceContext.clear();  serviceContext.put("workEffortId",productionRunId);  serviceContext.put("productId",productId);  serviceContext.put("workEffortGoodStdTypeId","PRUN_PROD_DELIV");  serviceContext.put("statusId","WEGS_CREATED");  serviceContext.put("estimatedQuantity",pRQuantity);  serviceContext.put("fromDate",startDate);  serviceContext.put("userLogin",userLogin);  try {    resultService=dispatcher.runSync("createWorkEffortGoodStandard",serviceContext);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the createWorkEffortGoodStandard service",module);    return ServiceUtil.returnError(e.getMessage());  }  boolean first=true;  for (  GenericValue routingTaskAssoc : routingTaskAssocs) {    if (EntityUtil.isValueActive(routingTaskAssoc,startDate)) {      GenericValue routingTask=null;      try {        routingTask=routingTaskAssoc.getRelatedOne("ToWorkEffort",false);      } catch (      GenericEntityException e) {        Debug.logError(e.getMessage(),module);      }      long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,pRQuantity,dispatcher);      Timestamp endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);      serviceContext.clear();      serviceContext.put("priority",routingTaskAssoc.get("sequenceNum"));      serviceContext.put("workEffortPurposeTypeId",routingTask.get("workEffortPurposeTypeId"));      serviceContext.put("workEffortName",routingTask.get("workEffortName"));      serviceContext.put("description",routingTask.get("description"));      serviceContext.put("fixedAssetId",routingTask.get("fixedAssetId"));      serviceContext.put("workEffortTypeId","PROD_ORDER_TASK");      serviceContext.put("currentStatusId","PRUN_CREATED");      serviceContext.put("workEffortParentId",productionRunId);      serviceContext.put("facilityId",facilityId);      serviceContext.put("reservPersons",routingTask.get("reservPersons"));      serviceContext.put("estimatedStartDate",startDate);      serviceContext.put("estimatedCompletionDate",endDate);      serviceContext.put("estimatedSetupMillis",routingTask.get("estimatedSetupMillis"));      serviceContext.put("estimatedMilliSeconds",routingTask.get("estimatedMilliSeconds"));      serviceContext.put("quantityToProduce",pRQuantity);      serviceContext.put("userLogin",userLogin);      resultService=null;      try {        resultService=dispatcher.runSync("createWorkEffort",serviceContext);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem calling the createWorkEffort service",module);      }      String productionRunTaskId=(String)resultService.get("workEffortId");      if (Debug.infoOn())       Debug.logInfo("ProductionRunTaskId created: " + productionRunTaskId,module);      serviceContext.clear();      serviceContext.put("userLogin",userLogin);      serviceContext.put("workEffortIdFrom",routingTask.getString("workEffortId"));      serviceContext.put("workEffortIdTo",productionRunTaskId);      serviceContext.put("workEffortAssocTypeId","WORK_EFF_TEMPLATE");      try {        resultService=dispatcher.runSync("createWorkEffortAssoc",serviceContext);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem calling the createWorkEffortAssoc service",module);      }      String routingTaskId=routingTaskAssoc.getString("workEffortIdTo");      cloneWorkEffortPartyAssignments(ctx,userLogin,routingTaskId,productionRunTaskId);      cloneWorkEffortCostCalcs(ctx,userLogin,routingTaskId,productionRunTaskId);      for (      BOMNode node : components) {        GenericValue productBom=node.getProductAssoc();        if ((productBom.getString("routingWorkEffortId") == null && first) || (productBom.getString("routingWorkEffortId") != null && productBom.getString("routingWorkEffortId").equals(routingTask.getString("workEffortId")))) {          serviceContext.clear();          serviceContext.put("workEffortId",productionRunTaskId);          serviceContext.put("productId",node.getProduct().get("productId"));          serviceContext.put("workEffortGoodStdTypeId","PRUNT_PROD_NEEDED");          serviceContext.put("statusId","WEGS_CREATED");          serviceContext.put("fromDate",productBom.get("fromDate"));          serviceContext.put("estimatedQuantity",node.getQuantity());          serviceContext.put("userLogin",userLogin);          resultService=null;          try {            resultService=dispatcher.runSync("createWorkEffortGoodStandard",serviceContext);          } catch (          GenericServiceException e) {            Debug.logError(e,"Problem calling the createWorkEffortGoodStandard service",module);          }          if (Debug.infoOn())           Debug.logInfo("ProductLink created for productId: " + productBom.getString("productIdTo"),module);        }      }      first=false;      startDate=endDate;    }  }  serviceContext.clear();  serviceContext.put("workEffortId",productionRunId);  serviceContext.put("estimatedCompletionDate",startDate);  serviceContext.put("userLogin",userLogin);  resultService=null;  try {    resultService=dispatcher.runSync("updateWorkEffort",serviceContext);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the updateWorkEffort service",module);  }  result.put("productionRunId",productionRunId);  result.put("estimatedCompletionDate",startDate);  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunCreated",UtilMisc.toMap("productionRunId",productionRunId),locale));  return result;}  }
class C{  public ReferenceEntry(AbstractReferenceMap<K,V> parent,ReferenceEntry<K,V> next,int hashCode,K key,V value){  super(next,hashCode,null,null);  this.parent=parent;  if (parent.keyType != HARD) {    refKey=toReference(parent.keyType,key,hashCode);  } else {    this.setKey(key);  }  if (parent.valueType != HARD) {    refValue=toReference(parent.valueType,value,hashCode);  } else {    this.setValue(value);  }}  }
class C{  public void finish() throws Exception {}  }
class C{  public boolean remove(final GPO owner,final Value value){  if (value == null)   throw new IllegalArgumentException();  LinkValue test=m_values;  LinkValue prev=null;  while (test != null) {    if (value.equals(test.m_value)) {      if (prev == null) {        m_values=test.m_next;      } else {        prev.m_next=test.m_next;      }      test.m_next=m_removedValues;      m_removedValues=test;      m_size--;      return true;    }    prev=test;    test=test.m_next;  }  test=m_addedValues;  prev=null;  while (test != null) {    if (value.equals(test.m_value)) {      if (prev == null) {        m_addedValues=test.m_next;      } else {        prev.m_next=test.m_next;      }      m_size--;      return true;    }    prev=test;    test=test.m_next;  }  return false;}  }
class C{  public static String determineLineDelimiter(String text,String hint){  try {    int[] info=indexOf(DELIMITERS,text,0);    return DELIMITERS[info[1]];  } catch (  ArrayIndexOutOfBoundsException x) {  }  return hint;}  }
class C{  public void testgetReturnMessage(){  TdfApiResponse apiResponse=new TdfApiResponse.Builder().returnCode(Response.Status.OK.getStatusCode()).outputPayload(new String("dummy")).build();  assertNotNull(apiResponse.getReturnMessage());  apiResponse=new TdfApiResponse.Builder().returnCode(999).outputPayload(new String("dummy")).build();  assertNull(apiResponse.getReturnMessage());  apiResponse=new TdfApiResponse.Builder().returnCode(999).returnMessage("User provided return message").outputPayload(new String("dummy")).build();  assertNotNull(apiResponse.getReturnMessage());}  }
class C{  public static List<org.oscm.vo.VOPricedOption> convertToApiVOPricedOption(List<org.oscm.internal.vo.VOPricedOption> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOPricedOption> newVO=new ArrayList<org.oscm.vo.VOPricedOption>();  for (  org.oscm.internal.vo.VOPricedOption tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public void init(){  if (interpreter == null) {    interpreter=new Interpreter();  }  try {    interpreter.set("updater",updater);    interpreter.set("workspace",updater.getWorkspace());    interpreter.eval(scriptString);    theAction=((UpdateAction)interpreter.get("action"));  } catch (  EvalError e) {    e.printStackTrace();  }}  }
class C{  public void onEvent(Event event){  if (Events.ON_CHANGE.equalsIgnoreCase(event.getName()) || Events.ON_OK.equalsIgnoreCase(event.getName())) {    Object newValue=getComponent().getValue();    if (oldValue == null && newValue == null) {      return;    }    if (displayType == DisplayType.Integer) {      if (newValue != null && newValue instanceof BigDecimal) {        newValue=new Integer(((BigDecimal)newValue).intValue());      }      if (oldValue != null && oldValue instanceof BigDecimal) {        oldValue=new Integer(((BigDecimal)oldValue).intValue());      }    }    if (oldValue != null && newValue != null && oldValue.equals(newValue)) {      return;    }    ValueChangeEvent changeEvent=new ValueChangeEvent(this,this.getColumnName(),oldValue,newValue);    super.fireValueChange(changeEvent);    oldValue=newValue;  }}  }
class C{  @Override public boolean hasHittableCriticals(int loc){  if (LOC_SQUAD == loc) {    return false;  }  return super.hasHittableCriticals(loc);}  }
class C{  private String sendNoGuaranteeMail(int A_Asset_ID,int R_MailText_ID,String trxName){  MAsset asset=new MAsset(getCtx(),A_Asset_ID,trxName);  if (asset.getAD_User_ID() == 0)   return "** No Asset User";  MUser user=new MUser(getCtx(),asset.getAD_User_ID(),get_TrxName());  if (user.getEMail() == null || user.getEMail().length() == 0)   return "** No Asset User Email";  if (m_MailText == null || m_MailText.getR_MailText_ID() != R_MailText_ID)   m_MailText=new MMailText(getCtx(),R_MailText_ID,get_TrxName());  if (m_MailText.getMailHeader() == null || m_MailText.getMailHeader().length() == 0)   return "** No Subject";  EMail email=m_client.createEMail(user.getEMail(),null,null);  m_MailText.setPO(user);  m_MailText.setPO(asset);  String message=m_MailText.getMailText(true);  if (m_MailText.isHtml())   email.setMessageHTML(m_MailText.getMailHeader(),message); else {    email.setSubject(m_MailText.getMailHeader());    email.setMessageText(message);  }  String msg=email.send();  new MUserMail(m_MailText,asset.getAD_User_ID(),email).saveEx();  if (!EMail.SENT_OK.equals(msg))   return "** Not delivered: " + user.getEMail() + " - "+ msg;  return user.getEMail();}  }
class C{  public static int murmurhash3_x86_32(CharSequence data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int pos=offset;  int end=offset + len;  int k1=0;  int k2=0;  int shift=0;  int bits=0;  int nBytes=0;  while (pos < end) {    int code=data.charAt(pos++);    if (code < 0x80) {      k2=code;      bits=8;    } else     if (code < 0x800) {      k2=(0xC0 | (code >> 6)) | ((0x80 | (code & 0x3F)) << 8);      bits=16;    } else     if (code < 0xD800 || code > 0xDFFF || pos >= end) {      k2=(0xE0 | (code >> 12)) | ((0x80 | ((code >> 6) & 0x3F)) << 8) | ((0x80 | (code & 0x3F)) << 16);      bits=24;    } else {      int utf32=(int)data.charAt(pos++);      utf32=((code - 0xD7C0) << 10) + (utf32 & 0x3FF);      k2=(0xff & (0xF0 | (utf32 >> 18))) | ((0x80 | ((utf32 >> 12) & 0x3F))) << 8 | ((0x80 | ((utf32 >> 6) & 0x3F))) << 16 | (0x80 | (utf32 & 0x3F)) << 24;      bits=32;    }    k1|=k2 << shift;    shift+=bits;    if (shift >= 32) {      k1*=c1;      k1=(k1 << 15) | (k1 >>> 17);      k1*=c2;      h1^=k1;      h1=(h1 << 13) | (h1 >>> 19);      h1=h1 * 5 + 0xe6546b64;      shift-=32;      if (shift != 0) {        k1=k2 >>> (bits - shift);      } else {        k1=0;      }      nBytes+=4;    }  }  if (shift > 0) {    nBytes+=shift >> 3;    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;  }  h1^=nBytes;  h1^=h1 >>> 16;  h1*=0x85ebca6b;  h1^=h1 >>> 13;  h1*=0xc2b2ae35;  h1^=h1 >>> 16;  return h1;}  }
class C{  protected String[] initPathsFromProperties(String rawPaths){  String[] retPaths=null;  if (rawPaths != null) {    try {      StringTokenizer token=new StringTokenizer(rawPaths,File.pathSeparator);      int numPaths=token.countTokens();      retPaths=new String[numPaths];      for (int i=0; i < numPaths; i++) {        retPaths[i]=token.nextToken();      }      return retPaths;    } catch (    java.util.NoSuchElementException e) {      e.printStackTrace();    }  }  return retPaths;}  }
class C{  public HealthResponse health() throws VaultException {  return health(null,null,null,null);}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  protected void clearError(){synchronized (lock) {    mIoError=false;  }}  }
class C{  public static void write(String fileName,Iterable<String> list) throws IOException {  write(fileName,list,identityTransformer);}  }
class C{  private void drawGuideLine(@NonNull Canvas canvas){  float offset=(float)(mRadius / Math.sqrt(2));  float topLeftPointX=mCenterPointX - offset;  float topLeftPointY=mCenterPointY - offset;  float topRightPointX=mCenterPointX + offset;  float bottomLeftPointY=mCenterPointY + offset;  canvas.drawLine(topLeftPointX,topLeftPointY,topRightPointX,topLeftPointY,mGuideLinePaint);  canvas.drawLine(mCenterPointX - mRadius,mCenterPointY,mCenterPointX + mRadius,mCenterPointY,mGuideLinePaint);  canvas.drawLine(topLeftPointX,bottomLeftPointY,topRightPointX,bottomLeftPointY,mGuideLinePaint);  canvas.drawLine(topLeftPointX,topLeftPointY,topLeftPointX,bottomLeftPointY,mGuideLinePaint);  canvas.drawLine(mCenterPointX,mCenterPointY - mRadius,mCenterPointX,mCenterPointY + mRadius,mGuideLinePaint);  canvas.drawLine(topRightPointX,topLeftPointY,topRightPointX,bottomLeftPointY,mGuideLinePaint);}  }
class C{  @Override protected void fillShape(Graphics graphics){  Color c=mixColor(getBackgroundColor(),ColorConstants.white,224);  fillVerticalGradientRoundedRectangle(graphics,getBounds(),getCornerDimensions(),getBackgroundColor(),c);  c.dispose();}  }
class C{  void add(ShardRouting shard){  for (  ShardRouting shardRouting : shards) {    if (shardRouting.isSameShard(shard)) {      throw new IllegalStateException("Trying to add a shard [" + shard.shardId().index().name() + "]["+ shard.shardId().id()+ "] to a node ["+ nodeId+ "] where it already exists");    }  }  shards.add(shard);}  }
class C{  public void saveToFile(final File file,final Object objectToSave) throws XMLException {  try {    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);    StringWriter writer=new StringWriter();    marshaller.marshal(objectToSave,writer);    marshaller.marshal(objectToSave,file);  } catch (  Exception e) {    throw new XMLException("Cannot save to " + file.getAbsolutePath(),e);  }}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public EnumRowStatus(Integer valueIndex) throws IllegalArgumentException {  super(valueIndex);}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  public boolean isZoomStatusSupported(){  return zoomStatusSupported;}  }
class C{  public InlineQueryResultCachedSticker build(){  return new InlineQueryResultCachedSticker(id,sticker_file_id,reply_markup,input_message_content);}  }
class C{  public boolean decodeXWapApplicationId(int startIndex){  if (decodeIntegerValue(startIndex) == true) {    mStringValue=null;    return true;  }  return decodeTextString(startIndex);}  }
class C{  public void reset(GTSEncoder encoder) throws IOException {  this.initialize(encoder.initialTimestamp,encoder.initialGeoXPPoint,encoder.initialElevation,encoder.initialLongValue,encoder.initialDoubleValue,encoder.initialBDValue,encoder.initialStringValue);  this.baseTimestamp=encoder.baseTimestamp;  this.count=encoder.count;  this.lastBDValue=encoder.lastBDValue;  this.lastDoubleValue=encoder.lastDoubleValue;  this.lastGeoXPPoint=encoder.lastGeoXPPoint;  this.lastElevation=encoder.lastElevation;  this.lastLongValue=encoder.lastLongValue;  this.lastStringValue=encoder.lastStringValue;  this.lastTimestamp=encoder.lastTimestamp;  this.metadata=encoder.metadata;  this.wrappingKey=encoder.wrappingKey;  this.noDeltaMetaTimestamp=encoder.noDeltaMetaTimestamp;  this.noDeltaMetaLocation=encoder.noDeltaMetaLocation;  this.noDeltaMetaElevation=encoder.noDeltaMetaElevation;  this.noDeltaValue=encoder.noDeltaValue;  this.stream.reset();  this.stream.write(encoder.stream.toByteArray());}  }
class C{  private static MessageFormat lookupMessageFormat(String code) throws MessageTranslatorException {  MessageFormat mf=messageFormats.get(code);  if (mf == null) {    loadMessageFormat(code);    mf=messageFormats.get(code);  }  return mf;}  }
class C{  private static boolean isValuelessAttribute(String attribName){  boolean valueless=VALUELESS_ATTRIB_NAMES.contains(Strings.lower(attribName));  return valueless;}  }
class C{  @GET @Path("interpreter/bind/{noteId}") @ZeppelinApi public Response bind(@PathParam("noteId") String noteId){  List<InterpreterSettingsList> settingList=InterpreterBindingUtils.getInterpreterBindings(notebook,noteId);  notebookServer.broadcastInterpreterBindings(noteId,settingList);  return new JsonResponse<>(Status.OK,"",settingList).build();}  }
class C{  public VelocityWriter(Writer writer,int sz,boolean autoFlush){  this(sz,autoFlush);  if (sz < 0)   throw new IllegalArgumentException("Buffer size <= 0");  this.writer=writer;  cb=sz == 0 ? null : new char[sz];  nextChar=0;}  }
class C{  public void sendEmptyChunk() throws NetworkException {  mMsrpSession.sendEmptyChunk();}  }
class C{  private char[] tokenProcessor(final char[] in,final char quotechar){  if (in.length == 0)   return in;  if (in.length <= 2 || in[0] != lb)   return filterTag(in);  String tag;  int tagend;  if (in[1] == '/') {    tagend=tagEnd(in,2);    tag=new String(in,2,tagend - 2).toLowerCase();    final char[] text=new char[in.length - tagend - 1];    System.arraycopy(in,tagend,text,0,in.length - tagend - 1);    return filterTag(text,quotechar,tag,false);  }  tagend=tagEnd(in,1);  tag=new String(in,1,tagend - 1).toLowerCase();  final char[] text=new char[in.length - tagend - 1];  System.arraycopy(in,tagend,text,0,in.length - tagend - 1);  return filterTag(text,quotechar,tag,true);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("RfQServlet.init");}  }
class C{  public static int installSilent(Context context,String filePath,String pmParams){  if (filePath == null || filePath.length() == 0) {    return INSTALL_FAILED_INVALID_URI;  }  File file=new File(filePath);  if (file == null || file.length() <= 0 || !file.exists() || !file.isFile()) {    return INSTALL_FAILED_INVALID_URI;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm install ").append(pmParams == null ? "" : pmParams).append(" ").append(filePath.replace(" ","\\ "));  CommandResult commandResult=ShellUtils.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return INSTALL_SUCCEEDED;  }  Log.e(TAG,new StringBuilder().append("installSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return INSTALL_FAILED_OTHER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_ALREADY_EXISTS")) {    return INSTALL_FAILED_ALREADY_EXISTS;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_APK")) {    return INSTALL_FAILED_INVALID_APK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_URI")) {    return INSTALL_FAILED_INVALID_URI;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INSUFFICIENT_STORAGE")) {    return INSTALL_FAILED_INSUFFICIENT_STORAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DUPLICATE_PACKAGE")) {    return INSTALL_FAILED_DUPLICATE_PACKAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NO_SHARED_USER")) {    return INSTALL_FAILED_NO_SHARED_USER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UPDATE_INCOMPATIBLE")) {    return INSTALL_FAILED_UPDATE_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_SHARED_USER_INCOMPATIBLE")) {    return INSTALL_FAILED_SHARED_USER_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_SHARED_LIBRARY")) {    return INSTALL_FAILED_MISSING_SHARED_LIBRARY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_REPLACE_COULDNT_DELETE")) {    return INSTALL_FAILED_REPLACE_COULDNT_DELETE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DEXOPT")) {    return INSTALL_FAILED_DEXOPT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_OLDER_SDK")) {    return INSTALL_FAILED_OLDER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONFLICTING_PROVIDER")) {    return INSTALL_FAILED_CONFLICTING_PROVIDER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NEWER_SDK")) {    return INSTALL_FAILED_NEWER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_TEST_ONLY")) {    return INSTALL_FAILED_TEST_ONLY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CPU_ABI_INCOMPATIBLE")) {    return INSTALL_FAILED_CPU_ABI_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_FEATURE")) {    return INSTALL_FAILED_MISSING_FEATURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONTAINER_ERROR")) {    return INSTALL_FAILED_CONTAINER_ERROR;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_INSTALL_LOCATION")) {    return INSTALL_FAILED_INVALID_INSTALL_LOCATION;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MEDIA_UNAVAILABLE")) {    return INSTALL_FAILED_MEDIA_UNAVAILABLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_TIMEOUT")) {    return INSTALL_FAILED_VERIFICATION_TIMEOUT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_FAILURE")) {    return INSTALL_FAILED_VERIFICATION_FAILURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_PACKAGE_CHANGED")) {    return INSTALL_FAILED_PACKAGE_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UID_CHANGED")) {    return INSTALL_FAILED_UID_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NOT_APK")) {    return INSTALL_PARSE_FAILED_NOT_APK;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_MANIFEST")) {    return INSTALL_PARSE_FAILED_BAD_MANIFEST;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION")) {    return INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NO_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_NO_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING")) {    return INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME")) {    return INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID")) {    return INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_MALFORMED")) {    return INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_EMPTY")) {    return INSTALL_PARSE_FAILED_MANIFEST_EMPTY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INTERNAL_ERROR")) {    return INSTALL_FAILED_INTERNAL_ERROR;  }  return INSTALL_FAILED_OTHER;}  }
class C{  public void writeWithAlpha(OutStream out) throws IOException {  writeRGB(out);  out.writeUI8(0xff);}  }
class C{  public AndrewsCurves(PlotterConfigurationModel settings){  super(settings);  setBackground(Color.white);}  }
class C{  public boolean isOverwriteSeqOnComplete(){  Object oo=get_Value(COLUMNNAME_IsOverwriteSeqOnComplete);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String delimiterConverter(String delimiter){switch (delimiter) {case "|":case "*":case ".":case ":":case "^":case "\\":case "$":case "+":case "?":case "(":case ")":case "{":case "}":case "[":case "]":    return "\\" + delimiter;default :  return delimiter;}}  }
class C{  @SuppressWarnings("PMD.CloseResource") private Policy createUploaderPolicy(String s3BucketName,String s3Key,String awsKmsKeyId){  return new AwsPolicyBuilder().withS3(s3BucketName,s3Key,S3Actions.PutObject).withKms(awsKmsKeyId,KmsActions.GENERATE_DATA_KEY,KmsActions.DECRYPT).build();}  }
class C{  public FieldMaskingSpanQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof org.json.JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new org.json.JSONArray((Collection<Object>)object);    }    if (object.getClass().isArray()) {      return new org.json.JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map<String,Object>)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  private Faker(Context context){  Lorem=new LoremComponent(context);  Name=new NameComponent(context);  Number=new NumberComponent(context);  Phone=new PhoneComponent(context);  Internet=new InternetComponent(context);  Url=new URLComponent(context);  Color=new ColorComponent(context);  Address=new AddressComponent(context);}  }
class C{  private void await(){  try {    boolean nodeRemoved=this.removeConvertedNodes(root);    if (!nodeRemoved && root.hasChildren()) {      logger.debug("Visitor thread block - blocking queue size: {}",blockingQueue.size());      this.blockingQueue.take();      this.blockingQueue.offer(0);      logger.debug("Visitor thread unblock - blocking queue size: {}",blockingQueue.size());    }  } catch (  InterruptedException e) {    logger.warn("Filter join visitor thread interrupted while waiting");    Thread.currentThread().interrupt();  }}  }
class C{  private void fetchMetaData(){  try {    java.util.jar.Attributes atts=archive.getManifest().getMainAttributes();    name=getValue(atts,"Implementation-Title");    if (name == null) {      name=archive.getName();    }    version=getValue(atts,"Implementation-Version");    if (version == null) {      version="";    }    url=getValue(atts,"Implementation-URL");    vendor=getValue(atts,"Implementation-Vendor");    prefix=getValue(atts,"Namespace");    extensionId=getValue(atts,"Extension-ID");    pluginInitClassName=getValue(atts,"Initialization-Class");    pluginResourceObjects=getDescriptorResource("IOObject-Descriptor",false,false,atts);    pluginResourceOperators=getDescriptorResource("Operator-Descriptor",false,true,atts);    pluginParseRules=getDescriptorResource("ParseRule-Descriptor",false,false,atts);    pluginGroupDescriptions=getDescriptorResource("Group-Descriptor",false,false,atts);    pluginErrorDescriptions=getDescriptorResource("Error-Descriptor",false,true,atts);    pluginUserErrorDescriptions=getDescriptorResource("UserError-Descriptor",false,true,atts);    pluginGUIDescriptions=getDescriptorResource("GUI-Descriptor",false,true,atts);    pluginSettingsDescriptions=getDescriptorResource("Settings-Descriptor",false,true,atts);    pluginSettingsStructure=getDescriptorResource("SettingsStructure-Descriptor",false,false,atts);    requiredRapidMinerVersion=getValue(atts,"RapidMiner-Version");    String dependencies=getValue(atts,"Plugin-Dependencies");    if (dependencies == null) {      dependencies="";    }    addDependencies(dependencies);    RapidMiner.splashMessage("loading_plugin",name);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public JarFacade(final URL url){  final String[] urlParts=url.getPath().split("/");  this.name=urlParts[urlParts.length - 1];  this.isWebStart=!url.getProtocol().equals("file");  LOGGER.info(String.format("Analyzing meta data in <%s>",this.name));  NemAttributes attributes=null;  try (final InputStream jarStream=url.openStream()){    try (final JarInputStream jarInputStream=new JarInputStream(jarStream,true)){      attributes=loadAttributes(jarInputStream,this.name);    }   } catch (  final IOException e) {    LOGGER.warning(String.format("Analyzing meta data not possible <%s>",e.getMessage()));  }  this.title=null == attributes ? DEFAULT_TITLE : attributes.title;  this.version=null == attributes ? DEFAULT_VERSION : attributes.version;  LOGGER.info(String.format("Meta data title <%s>, version <%s>",this.title,this.version));}  }
class C{  @PostConstruct public void init(){  setLocalWorkDir(_path);}  }
class C{  private RectangleArranger<PlotItem> arrangeVisualizations(double width,double height){  if (!(width > 0. && height > 0.)) {    LOG.warning("No size information during arrange()",new Throwable());    return new RectangleArranger<>(1.,1.);  }  RectangleArranger<PlotItem> plotmap=new RectangleArranger<>(width,height);  Hierarchy<Object> vistree=context.getVisHierarchy();  for (Hierarchy.Iter<?> iter2=vistree.iterAll(); iter2.valid(); iter2.advance()) {    if (!(iter2.get() instanceof Projector)) {      continue;    }    Projector p=(Projector)iter2.get();    Collection<PlotItem> projs=p.arrange(context);    for (    PlotItem it : projs) {      if (it.w <= 0.0 || it.h <= 0.0) {        LOG.warning("Plot item with improper size information: " + it);        continue;      }      plotmap.put(it.w,it.h,it);    }  }  nextTask:   for (Hierarchy.Iter<?> iter2=vistree.iterAll(); iter2.valid(); iter2.advance()) {    if (!(iter2.get() instanceof VisualizationTask)) {      continue;    }    VisualizationTask task=(VisualizationTask)iter2.get();    if (!task.visible) {      continue;    }    for (Hierarchy.Iter<?> iter=vistree.iterParents(task); iter.valid(); iter.advance()) {      if (iter.get() instanceof Projector) {        continue nextTask;      }    }    if (task.reqwidth <= 0.0 || task.reqheight <= 0.0) {      LOG.warning("Task with improper size information: " + task);      continue;    }    PlotItem it=new PlotItem(task.reqwidth,task.reqheight,null);    it.tasks.add(task);    plotmap.put(it.w,it.h,it);  }  return plotmap;}  }
class C{  private DirichletBayesIm(BayesPm bayesPm) throws IllegalArgumentException {  this(bayesPm,null,Double.NaN);}  }
class C{  @Override public void visitMapNode(MapNode node){  nodeBuffer.add(node);}  }
class C{  public void updateNCharacterStream(String columnName,java.io.Reader x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public boolean hasProperIntersection(){  return hasProper;}  }
class C{  public static double digamma(int d) throws Exception {  if (d < 1) {    return Double.NaN;  }  int highestDigammaArgCalcedAtStartForThisThread=highestDigammaArgCalced;  if (d <= highestDigammaArgCalcedAtStartForThisThread) {    return storedDigammas[d];  }  if (d >= NUM_STORED_DIGAMMAS) {    return Gamma.digamma(d);  }  if (highestDigammaArgCalcedAtStartForThisThread == 0) {    storedDigammas[0]=Double.NaN;    storedDigammas[1]=-EULER_MASCHERONI_CONSTANT;    highestDigammaArgCalcedAtStartForThisThread=1;  }  double result=storedDigammas[highestDigammaArgCalcedAtStartForThisThread];  for (int n=highestDigammaArgCalcedAtStartForThisThread + 1; n <= d; n++) {    result+=1.0 / (double)(n - 1);    storedDigammas[n]=result;  }  if (d > highestDigammaArgCalced) {    highestDigammaArgCalced=d;  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation docImpl;  boolean xmlstate;  boolean htmlstate;  doc=(Document)load("hc_staff",false);  docImpl=doc.getImplementation();  xmlstate=docImpl.hasFeature("XML","1.0");  htmlstate=docImpl.hasFeature("HTML","1.0");  if (("text/html".equals(getContentType()))) {    assertTrue("supports_HTML_1.0",htmlstate);  } else {    assertTrue("supports_XML_1.0",xmlstate);  }}  }
class C{  public static void main(String[] args){  MouseInteraction simulation=new MouseInteraction();  simulation.run();}  }
class C{  public boolean submitHam(final Resource commentResource){  final boolean result=doAkismet(AkismetAction.SUBMIT_HAM,commentResource);  if (result) {    try {      final ModifiableValueMap properties=commentResource.adaptTo(ModifiableValueMap.class);      properties.put(PublickConstants.COMMENT_PROPERTY_SPAM,false);      properties.put(PublickConstants.COMMENT_PROPERTY_DISPLAY,true);      commentResource.getResourceResolver().commit();    } catch (    PersistenceException e) {      LOGGER.error("Could not save spam properties",e);    }  }  return result;}  }
class C{  public <I,O,R>MapJob<I,O,R> createMapOnlyJob(Mapper<I,Void,O> mapper,Output<O,R> output,Iterable<? extends Input<? extends I>> inputs){  checkCommonRequiredFields(inputs,mapper);  return new MapJob<>(new MapSpecification.Builder<I,O,R>().setJobName(jobName).setInput(new ConcatenatingInput<>(inputs,httpParamMapShards.or(defaultMapShards))).setMapper(mapper).setOutput(output).build(),new MapSettings.Builder().setWorkerQueueName(QUEUE_NAME).setBaseUrl(BASE_URL).setModule(moduleName).setMillisPerSlice((int)sliceDuration.getMillis()).build());}  }
class C{  public final boolean isPrecise(){  return true;}  }
class C{  public boolean isSentToRawPubKey(){  return chunks.size() == 2 && chunks.get(1).equalsOpCode(OP_CHECKSIG) && !chunks.get(0).isOpCode() && chunks.get(0).data.length > 1;}  }
class C{  protected void createBufferImpl(int w,int h){  if (bufferedMapImage != null) {    bufferedMapImage.flush();  }  bufferedMapImage=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);}  }
class C{  public int size(){  return mValues.size();}  }
class C{  @GET @Path("external/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.RESTRICTED_SYSTEM_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public ExternalBackups listExternalBackup(){  log.info("Received list backup files on external server request");  try {    backupConfig=backupScheduler.getCfg();    String externalServerUrl=backupConfig.getExternalServerUrl();    if (externalServerUrl == null) {      log.warn("External server has not been configured");      throw new IllegalStateException("External server has not been configured");    }    BackupClient client=getExternalServerClient(backupConfig);    List<String> backupFiles=client.listAllFiles();    ExternalBackups backups=new ExternalBackups(backupFiles);    return backups;  } catch (  Exception e) {    log.error("Failed to list backup files on external server",e);    throw APIException.internalServerErrors.listExternalBackupFailed(e);  }}  }
class C{  public PubSubManager(Connection connection){  con=connection;  to="pubsub." + connection.getServiceName();}  }
class C{  @Override public void emitDirect(int taskId,List<Object> tuple,Object messageId){  List<Object> t=_callback.apply(tuple,_context.cloneContext().with(EmitContext.Type.PARTITION,getPartition(messageId)).with(EmitContext.Type.TASK_ID,new Integer(taskId)));  _delegate.emitDirect(taskId,t,messageId);}  }
class C{  public static void open(String message,String title,String url){  TLAPMErrorDialog dialog=new TLAPMErrorDialog(UIHelper.getShellProvider(),message);  dialog.setTitle(title);  dialog.setImage(UIHelper.getSWTImage(SWT.ICON_ERROR));  dialog.setURL(url);  dialog.open();}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(){  return new Builder<Comparable>(Ordering.natural()).create();}  }
class C{  public Object decode(mxCodec dec,Node node){  return decode(dec,node,null);}  }
class C{  public MockVariant(int start,int end,byte[] plus,byte[] minus){  this(start,end,plus,minus,0);}  }
class C{  public int compareTo(Object o){  CategoryMethod thatMethod=(CategoryMethod)o;  Class thisClass=metaClass;  Class thatClass=thatMethod.metaClass;  if (thisClass == thatClass)   return 0;  if (isChildOfParent(thisClass,thatClass))   return -1;  if (isChildOfParent(thatClass,thisClass))   return 1;  return 0;}  }
class C{  public static boolean checkVirtualPoolProtocols(VirtualPool cos,HashSet<String> protocols,boolean matchAll){  if ((protocols != null) && !protocols.isEmpty()) {    StringSet cosProtocols=cos.getProtocols();    if ((matchAll) && (!cosProtocols.containsAll(protocols))) {      _log.info("vpool does not support all requested protocol(s): {}",protocols);      return false;    } else     if (!matchAll) {      boolean hasMatch=false;      Iterator<String> protocolIter=protocols.iterator();      while (protocolIter.hasNext()) {        String protocol=protocolIter.next();        if (cosProtocols.contains(protocol)) {          _log.debug("vpool supports protocol {}",protocol);          hasMatch=true;          break;        }      }      return hasMatch;    }  }  return true;}  }
class C{  public void contextMenu(){  Toast.makeText(getApplicationContext(),(this.pickedObject == null ? "Nothing" : this.pickedObject.getDisplayName()) + " picked and " + (this.selectedObject == null ? "nothing" : this.selectedObject.getDisplayName())+ " selected.",Toast.LENGTH_LONG).show();}  }
class C{  private boolean checkRecovery(String coreName,final CoreDescriptor desc,boolean recoverReloadedCores,final boolean isLeader,final CloudDescriptor cloudDesc,final String collection,final String shardZkNodeName,String shardId,ZkNodeProps leaderProps,SolrCore core,CoreContainer cc){  if (SKIP_AUTO_RECOVERY) {    log.warn("Skipping recovery according to sys prop solrcloud.skip.autorecovery");    return false;  }  boolean doRecovery=true;  if (!isLeader) {    if (core.isReloaded() && !recoverReloadedCores) {      doRecovery=false;    }    if (doRecovery) {      log.info("Core needs to recover:" + core.getName());      core.getUpdateHandler().getSolrCoreState().doRecovery(cc,core.getCoreDescriptor());      return true;    }    String lirState=getLeaderInitiatedRecoveryState(collection,shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());    if (ZkStateReader.DOWN.equals(lirState)) {      log.info("Leader marked core " + core.getName() + " down; starting recovery process");      core.getUpdateHandler().getSolrCoreState().doRecovery(cc,core.getCoreDescriptor());      return true;    }  } else {    log.info("I am the leader, no recovery necessary");  }  return false;}  }
class C{  public static void writeDescriptor(Descriptor descriptor,OutputStream out,String encoding,boolean isIndent) throws IOException {  if (encoding == null) {    throw new IllegalArgumentException("Encoding must not be null");  }  XMLOutputter serializer=new XMLOutputter();  Format format=Format.getPrettyFormat();  format.setEncoding(encoding);  serializer.setFormat(format);  StringWriter writer=new StringWriter();  serializer.output((Document)descriptor,writer);  String result=writer.toString();  String root=descriptor.getRootElement().getName();  int startRoot=result.indexOf(root);  int endRoot=result.indexOf('>',startRoot);  String subString=result.substring(endRoot + 1);  subString=subString.replaceAll(" xmlns=\".*\"","");  StringBuilder sb=new StringBuilder(result.substring(0,endRoot + 1));  sb.append(subString);  result=sb.toString();  result=result.replace("<extension />","");  out.write(result.getBytes(encoding));}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  protected void forceSetComponentCount(int count){  mComponentCountActual=count;}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.workingKey=((KeyParameter)params).getKey();    setKey(this.workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to Blowfish init - " + params.getClass().getName());}  }
class C{  public AApplet() throws HeadlessException {  super();}  }
class C{  public ExtendedHttpAuditEvent(String sessionId,CurrentUser who,HttpServletRequest httpRequest,long when,Multimap<String,?> params,Object input,int status,Object result,RestResource resource,RestView<RestResource> view){  super(sessionId,who,httpRequest.getRequestURI(),when,params,httpRequest.getMethod(),input,status,result);  this.httpRequest=Preconditions.checkNotNull(httpRequest);  this.resource=resource;  this.view=view;}  }
class C{  public boolean isInlineTag(){  return true;}  }
class C{  void appendOperations(Document xmldoc,Element parent,LocalizerServiceLocal localizer,TechnicalProduct technicalProduct){  List<TechnicalProductOperation> ops=technicalProduct.getTechnicalProductOperations();  for (  TechnicalProductOperation op : ops) {    Element defNode=xmldoc.createElement("Operation");    defNode.setAttribute("id",op.getOperationId());    defNode.setAttribute("actionURL",op.getActionUrl());    parent.appendChild(defNode);    appendLocalizedValues(xmldoc,localizer,defNode,LocalizedObjectTypes.TECHNICAL_PRODUCT_OPERATION_NAME,op.getKey(),"LocalizedName");    appendLocalizedValues(xmldoc,localizer,defNode,LocalizedObjectTypes.TECHNICAL_PRODUCT_OPERATION_DESCRIPTION,op.getKey(),"LocalizedDescription");    appendOperationParameters(xmldoc,defNode,localizer,op);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.898 -0500",hash_original_method="ECB1A1FF9D2C5C6048377E0BEB0296EB",hash_generated_method="4646C61C07C34092FA61EEA7746DDB8D") public TestSuiteBuilder excludePackages(String... packageNames){  testGrouping.removePackagesRecursive(packageNames);  return this;}  }
class C{  public void removePet(){  if (currentPet == null) {    return;  }  currentPet.clear();  currentPet=null;}  }
class C{  public static Address alloc(Space space,int blockSizeClass){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((blockSizeClass >= 0) && (blockSizeClass <= MAX_BLOCK_SIZE_CLASS));  int pages=pagesForSizeClass(blockSizeClass);  Address result=space.acquire(pages);  if (!result.isZero()) {    setBlkSizeMetaData(result,(byte)blockSizeClass);  }  return result;}  }
class C{  public ConfigurableFactoryContext(final Map<String,String> attributes){  this.attributes=attributes;}  }
class C{  public FilteringScope(IScope parent,Predicate<? super IEObjectDescription> filterPredicate){  super(parent);  this.filterPredicate=filterPredicate;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static void writeln(String s,Address a){  write(s);  writeln(a);}  }
class C{  protected Integer buildIndex(final IScope scope,final Object object){  return GamaIntegerType.staticCast(scope,object,null,false);}  }
class C{  public Object constructObject(String value) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException {  Class c=Class.forName(value);  return c.newInstance();}  }
class C{  public void testOsPingToUnknown() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(2000);  HostAddress address=HostAddressService.getByName(UNKNOWN_IP);  PingResponse response=has.isReachableByMethod(HostAddressService.PING,address);  assertFalse("Cannot ping unknown address: " + address.toString(),response.isReachable());}  }
class C{  private void refreshDisplay(){  checkFlows();  mHomeServerUrlsLayout.setVisibility(mUseCustomHomeServersCheckbox.isChecked() ? View.VISIBLE : View.GONE);  View loginLayout=findViewById(R.id.login_inputs_layout);  View creationLayout=findViewById(R.id.creation_inputs_layout);  View forgetPasswordLayout=findViewById(R.id.forget_password_inputs_layout);  loginLayout.setVisibility((mMode == MODE_LOGIN) ? View.VISIBLE : View.GONE);  creationLayout.setVisibility((mMode == MODE_ACCOUNT_CREATION) ? View.VISIBLE : View.GONE);  forgetPasswordLayout.setVisibility((mMode == MODE_FORGOT_PASSWORD) ? View.VISIBLE : View.GONE);  boolean isLoginMode=mMode == MODE_LOGIN;  boolean isForgetPasswordMode=(mMode == MODE_FORGOT_PASSWORD) || (mMode == MODE_FORGOT_PASSWORD_WAITING_VALIDATION);  mPasswordForgottenTxtView.setVisibility(isLoginMode ? View.VISIBLE : View.GONE);  mLoginButton.setVisibility(isForgetPasswordMode ? View.GONE : View.VISIBLE);  mRegisterButton.setVisibility(isForgetPasswordMode ? View.GONE : View.VISIBLE);  mForgotPasswordButton.setVisibility(mMode == MODE_FORGOT_PASSWORD ? View.VISIBLE : View.GONE);  mForgotValidateEmailButton.setVisibility(mMode == MODE_FORGOT_PASSWORD_WAITING_VALIDATION ? View.VISIBLE : View.GONE);  mForgotValidateEmailButton.setText(mIsPasswordResetted ? R.string.auth_return_to_login : R.string.auth_reset_password_next_step_button);  mLoginButton.setBackgroundColor(getResources().getColor(isLoginMode ? R.color.vector_green_color : android.R.color.white));  mLoginButton.setTextColor(getResources().getColor(!isLoginMode ? R.color.vector_green_color : android.R.color.white));  mRegisterButton.setBackgroundColor(getResources().getColor(!isLoginMode ? R.color.vector_green_color : android.R.color.white));  mRegisterButton.setTextColor(getResources().getColor(isLoginMode ? R.color.vector_green_color : android.R.color.white));}  }
class C{  private ConfigInfo readConfigInfoFromFile(Context context){  try {    String uniqueServerId=getServerUniqueId();    Object serializedServerInfoObject=SerializableManager.readSerializedObject(context,SERIALIZE_CONFIG_FILE_PREFIX + uniqueServerId + SERIALIZE_CONFIG_FILE_EXTENSION);    if (serializedServerInfoObject != null && serializedServerInfoObject instanceof ConfigInfo) {      return (ConfigInfo)serializedServerInfoObject;    } else     return null;  } catch (  Exception ex) {    return null;  }}  }
class C{  public final void deleteCert(final String keyId) throws IOException {  Files.delete(getCertPath(keyId));}  }
class C{  public void logout(){  if (service != null) {    try {      service.getServerConnection().logout();    }  finally {      service=null;    }  }}  }
class C{  public RelateOp(Geometry g0,Geometry g1,BoundaryNodeRule boundaryNodeRule){  super(g0,g1,boundaryNodeRule);  relate=new RelateComputer(arg);}  }
class C{  public Document dom(){  return createXCalDocument().getDocument();}  }
class C{  @SafeVarargs static <T>Source<T> weightWithValues(Source<T> source,T... values){  return pickWithWeighting(Arbitrary.pick(java.util.Arrays.asList(values)),source,2).withShrinker(source);}  }
class C{  protected Date nextStandardDate(Date date,DateTickUnit unit){  Date previous=previousStandardDate(date,unit);  Calendar calendar=Calendar.getInstance(this.timeZone,this.locale);  calendar.setTime(previous);  calendar.add(unit.getCalendarField(),unit.getMultiple());  return calendar.getTime();}  }
class C{  public long readUnsignedInteger() throws IOException {  long res=0;  read();  int times=1;  res=(res << 7) | (((byte)currentByte) & 0x7F);  while ((((byte)currentByte) & 0x80) != 0) {    if (times > 5) {      throw new IOException("An unsigned integer should not be longer than 5 bytes!");    }    read();    times++;    res=(res << 7) | (((byte)currentByte) & 0x7F);  }  return res;}  }
class C{  public void onNumberVerified(final VerificationMethod verificationMethod){  if (ENABLED) {    track("Number Verified",mPropsGenerator.makeNumberVerifiedProps(verificationMethod));  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      Loger.debug(String.format("Failed to write header for %s",file.getAbsolutePath()));      throw new IOException();    }    fos.write(entry.data);    putEntry(key,e);    return;  } catch (  IOException e) {    Loger.debug(DiskBasedCache.class.getName() + e.getMessage());  }  boolean deleted=file.delete();  if (!deleted) {    Loger.debug(String.format("Could not clean up file %s",file.getAbsolutePath()));  }}  }
class C{  public static <K,V>Map<K,V> toSorted(SortedMap<K,V> self){  return new LinkedHashMap<K,V>(self);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public Quaternionf lookAlong(float dirX,float dirY,float dirZ,float upX,float upY,float upZ){  return lookAlong(dirX,dirY,dirZ,upX,upY,upZ,this);}  }
class C{  @Override public void componentHidden(){  String path=this.obj.getPrimaryFile().getPath();  try {    this.editor.saveGui(path);  } catch (  FileNotFoundException ex) {    Exceptions.printStackTrace(ex);  }catch (  JAXBException ex) {    Exceptions.printStackTrace(ex);  }catch (  NullPointerException ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  public static void updateActorPosition(final Actor actor,final Vector2 newScreenSizeInStageCoords){  if (actor != null) {    updateActorPosition(actor,actor.getStage(),newScreenSizeInStageCoords);  }}  }
class C{  public boolean isAllow_Info_Asset(){  Object oo=get_Value(COLUMNNAME_Allow_Info_Asset);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String add(Object... values){  double result=0;  for (int i=0; i < values.length; i++) {    result+=FunctionHandler.getDouble(values[i]);  }  return Double.toString(result);}  }
class C{  public void warn(String trace,Throwable e){  printTrace(trace,WARN_LEVEL);  printTrace(ExceptionUtil.getFullStackTrace(e),WARN_LEVEL);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TLongLongHashMap)) {    return false;  }  TLongLongHashMap that=(TLongLongHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public Vector4f add(float x,float y,float z,float w){  this.x+=x;  this.y+=y;  this.z+=z;  this.w+=w;  return this;}  }
class C{  @Override public int graphType(){  return Drawable.TREE;}  }
class C{  public static boolean exists(String fileName){  return FilePath.get(fileName).exists();}  }
class C{  private static void readIntegerBased(Scanner scanner,int width,int height,IntGrid2D intGrid2D) throws IOException {  int currentInt;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      currentInt=scanner.nextInt();      intGrid2D.set(x,y,currentInt);    }  }}  }
class C{  public VersionDependency(){  _version=CauchoUtil.getFullVersion();}  }
class C{  private void provideScreenStateChangeFeedback(int feedbackIndex){switch (mProvidedFeedbackType) {case AccessibilityServiceInfo.FEEDBACK_SPOKEN:    String utterance=generateScreenOnOrOffUtternace(feedbackIndex);  mHandler.obtainMessage(MESSAGE_SPEAK,utterance).sendToTarget();return;case AccessibilityServiceInfo.FEEDBACK_AUDIBLE:mHandler.obtainMessage(MESSAGE_PLAY_EARCON,feedbackIndex,0).sendToTarget();return;case AccessibilityServiceInfo.FEEDBACK_HAPTIC:mHandler.obtainMessage(MESSAGE_VIBRATE,feedbackIndex,0).sendToTarget();return;default :throw new IllegalStateException("Unexpected feedback type " + mProvidedFeedbackType);}}  }
class C{  public static void copyDirectory(File srcDir,File destDir) throws IOException {  copyDirectory(srcDir,destDir,true);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 78) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static <T>T checkNotNull(final T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {  return selectNodeIterator(contextNode,str,contextNode);}  }
class C{  @Override public void batchSize(int size){  A.ensure(size > 0," Batch size can't be less then 0: " + size);  lock.lock();  try {    batchSize=size;  }  finally {    lock.unlock();  }}  }
class C{  public void writeHeaderFile(){  String str1=null;  File file=new File(this.headerFile);  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  try {    if (this.displayMaximum == smallValue) {      this.displayMaximum=this.maximumValue;    }    if (this.displayMinimum == largeValue) {      this.displayMinimum=this.minimumValue;    }    if (this.displayMaximum < this.displayMinimum || this.displayMaximum == this.displayMinimum) {      if (this.maximumValue < this.minimumValue) {        findMinAndMaxVals();      }      this.displayMinimum=this.minimumValue;      this.displayMaximum=this.maximumValue;    }    fw=new FileWriter(file,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(this.minimumValue);    out.println(str1);    str1="Max:\t" + Double.toString(this.maximumValue);    out.println(str1);    str1="North:\t" + Double.toString(this.north);    out.println(str1);    str1="South:\t" + Double.toString(this.south);    out.println(str1);    str1="East:\t" + Double.toString(this.east);    out.println(str1);    str1="West:\t" + Double.toString(this.west);    out.println(str1);    str1="Cols:\t" + Integer.toString(this.numberColumns);    out.println(str1);    str1="Rows:\t" + Integer.toString(this.numberRows);    out.println(str1);    str1="Stacks:\t" + Integer.toString(this.numberStacks);    out.println(str1);    str1="Data Type:\t" + this.dataType;    out.println(str1);    str1="Z Units:\t" + this.zUnits;    out.println(str1);    str1="XY Units:\t" + this.xyUnits;    out.println(str1);    str1="Projection:\t" + this.projection;    out.println(str1);switch (this.dataScale) {case CONTINUOUS:      str1="Data Scale:\tcontinuous";    break;case CATEGORICAL:  str1="Data Scale:\tcategorical";break;case BOOLEAN:str1="Data Scale:\tboolean";break;case RGB:str1="Data Scale:\trgb";break;}out.println(str1);str1="Display Min:\t" + Double.toString(this.displayMinimum);out.println(str1);str1="Display Max:\t" + Double.toString(this.displayMaximum);out.println(str1);str1="Preferred Palette:\t" + this.preferredPalette.replace(".plt",".pal");out.println(str1);str1="NoData:\t" + Double.toString(this.noDataValue);out.println(str1);str1="Byte Order:\t" + this.byteOrder;out.println(str1);str1="Palette Nonlinearity:\t" + this.nonlinearity;out.println(str1);if (metadata.size() > 0) {for (int i=0; i < metadata.size(); i++) {str1="Metadata Entry:\t" + metadata.get(i).replaceAll(":",";");out.println(str1);}}} catch (java.io.IOException e) {System.err.println("Error: " + e.getMessage());}catch (Exception e) {System.err.println("Error: " + e.getMessage());} finally {if (out != null || bw != null) {out.flush();out.close();}}}  }
class C{  public static void startHttpsProvisioningService(Context ctx,boolean firstLaunch,boolean userLaunch){  if (sLogger.isActivated()) {    sLogger.debug("startHttpsProvisioningService (first=" + firstLaunch + ") (user="+ userLaunch+ ")");  }  Intent provisioningIntent=new Intent(ctx,HttpsProvisioningService.class);  provisioningIntent.putExtra(FIRST_KEY,firstLaunch);  provisioningIntent.putExtra(USER_KEY,userLaunch);  ctx.startService(provisioningIntent);}  }
class C{  public void detailed(boolean detailed){  this.detailed=detailed;}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  protected BookMetaBuilder(final BookMeta meta){  this.meta=meta.clone();}  }
class C{  public static ExampleSetMetaData createConfidenceAttributeMetaData(ExampleSetMetaData exampleSetMD){  if (exampleSetMD.hasSpecial(Attributes.LABEL_NAME) == MetaDataInfo.YES) {    AttributeMetaData labelMetaData=exampleSetMD.getLabelMetaData();    if (labelMetaData.isNominal()) {      for (      String value : labelMetaData.getValueSet()) {        AttributeMetaData conf=new AttributeMetaData(Attributes.CONFIDENCE_NAME + "_" + value,Ontology.REAL,Attributes.CONFIDENCE_NAME);        conf.setValueRange(new Range(0d,1d),SetRelation.EQUAL);        exampleSetMD.addAttribute(conf);      }      exampleSetMD.mergeSetRelation(labelMetaData.getValueSetRelation());      return exampleSetMD;    }  }  return exampleSetMD;}  }
class C{  public boolean addCall(String sourceClass,String sourceMethod,String targetClass,String targetMethod){  CallGraphEntry from=new CallGraphEntry(targetClass,targetMethod);  CallGraphEntry to=new CallGraphEntry(sourceClass,sourceMethod);  if (sourceClass.equals(className))   cutNodes.add(to);  if (!graph.containsEdge(from,to)) {    graph.addEdge(from,to);    callGraphClasses.add(targetClass.replaceAll("/","."));    return true;  }  return false;}  }
class C{  public char[] genericTypeSignature(){  if (this.genericTypeSignature == null) {    if ((this.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0) {      this.genericTypeSignature=genericType().signature();    } else {      StringBuffer sig=new StringBuffer(10);      if (isMemberType()) {        ReferenceBinding enclosing=enclosingType();        char[] typeSig=enclosing.genericTypeSignature();        sig.append(typeSig,0,typeSig.length - 1);        if ((enclosing.modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {          sig.append('.');        } else {          sig.append('$');        }        sig.append(sourceName());      } else {        char[] typeSig=genericType().signature();        sig.append(typeSig,0,typeSig.length - 1);      }      sig.append(';');      int sigLength=sig.length();      this.genericTypeSignature=new char[sigLength];      sig.getChars(0,sigLength,this.genericTypeSignature,0);    }  }  return this.genericTypeSignature;}  }
class C{  public static LocalDateTime convertFromTimestamp(String time){  if (time == null) {    return LocalDateTime.now();  }  return LocalDateTime.parse(time.split("\\+")[0]).atZone(ZoneId.of("UTC+00:00")).withZoneSameInstant(ZoneId.systemDefault()).toLocalDateTime();}  }
class C{  public static ScriptSortBuilder scriptSort(Script script,String type){  return new ScriptSortBuilder(script,type);}  }
class C{  public boolean isSubspace(Subspace subspace){  if (this.dimensionality > subspace.dimensionality) {    return false;  }  for (int d=BitsUtil.nextSetBit(dimensions,0); d >= 0; d=BitsUtil.nextSetBit(dimensions,d + 1)) {    if (!BitsUtil.get(subspace.dimensions,d)) {      return false;    }  }  return true;}  }
class C{  public double valueSparse(int indexOfIndex){  return m_AttValues[indexOfIndex];}  }
class C{  public static boolean isSteam(FluidStack aFluid){  if (aFluid == null)   return false;  return aFluid.isFluidEqual(getSteam(1));}  }
class C{  static byte[] createChunk(int len){  byte[] chunk=new byte[len];  for (int i=0; i < chunk.length; i++)   chunk[i]=(byte)i;  return chunk;}  }
class C{  protected final void forceClose(){  try {    getNetworkResources().forceClose();  }  finally {    this.mysqlConnection=null;    this.mysqlInput=null;    this.mysqlOutput=null;  }}  }
class C{  public boolean isAppLockFeatureEnabled(){  if (currentAppLocker == null)   return false;  if (currentAppLocker instanceof DefaultAppLock)   return (android.os.Build.VERSION.SDK_INT >= 14); else   return true;}  }
class C{  public void dispose(){  if (mSettingsManager != null) {    mSettingsManager.removeListener(this);  }  mSettingsManager=null;  mMemoryImageSource=null;}  }
class C{  public static POSBaseLineCounter read(String json){  return new Gson().fromJson(json,POSBaseLineCounter.class);}  }
class C{  public Automaton<LR1Item,LR1State> createAutomaton() throws GeneratorException {  return new LR1ParallelAutomatonFactory().createAutomaton(this,grammarInfo,numThreads);}  }
class C{  synchronized boolean deliverError(OFErrorMsg error){  if (!requestPending)   return false;  if (pendingXid == error.getXid()) {    if (error.getErrType() == OFErrorType.BAD_REQUEST) {      switchManagerCounters.roleReplyErrorUnsupported.increment();      setSwitchRole(pendingRole,RoleRecvStatus.UNSUPPORTED);    } else {      String msg=String.format("Switch: [%s], State: [%s], " + "Unexpected error %s in respone to our " + "role request for %s.",OFSwitchHandshakeHandler.this.getSwitchInfoString(),OFSwitchHandshakeHandler.this.state.toString(),error.toString(),pendingRole);      throw new SwitchStateException(msg);    }    return true;  }  return false;}  }
class C{  public static String nameForVendor(String charsetName,String vendor){  if (!TextUtils.isEmpty(charsetName) && !TextUtils.isEmpty(vendor)) {    if (isShiftJis(charsetName)) {      final String vendorShiftJis=sVendorShiftJisMap.get(vendor);      if (vendorShiftJis != null) {        return vendorShiftJis;      }    }  }  return charsetName;}  }
class C{  private Color unwrap(Color c){  if (c instanceof UIResource) {    return new Color(c.getRGB());  }  return c;}  }
class C{  public DueChallengeLogic createDueChallengeLogic(User user){  return new DueChallengeLogic(user,mCompletionDataSource,mChallengeDataSource);}  }
class C{  public void eleminateRedundentLocals(ElemTemplateElement psuedoVarRecipient){  eleminateRedundent(psuedoVarRecipient,m_paths);}  }
class C{  @Override public void randomize(){  Rules rules=getRules();  int depth=PRNG.nextInt(2,rules.getMaxInitializationDepth());  boolean isFull=PRNG.nextBoolean();  Node root=null;  if (isFull) {    if (rules.getScaffolding() == null) {      root=rules.buildTreeFull(rules.getReturnType(),depth);    } else {      root=rules.buildTreeFull(rules.getScaffolding(),depth);    }  } else {    if (rules.getScaffolding() == null) {      root=rules.buildTreeGrow(rules.getReturnType(),depth);    } else {      root=rules.buildTreeGrow(rules.getScaffolding(),depth);    }  }  setArgument(0,root);}  }
class C{  public void add(String expr,int shape){  Predicate p=(Predicate)ExpressionParser.parse(expr);  add(p,shape);}  }
class C{  public boolean apply(@Nullable T entity){  return !(entity instanceof EntityLivingBase) ? false : (entity != null && !predicate.apply(entity) ? false : EntityAINearestTarget.this.isSuitableTarget(entity,false));}  }
class C{  @Override public void actionPerformed(ActionEvent e){  f=new JmriJFrame(Bundle.getMessage("TitleInputFrame"));  f.getContentPane().setLayout(new BoxLayout(f.getContentPane(),javax.swing.BoxLayout.Y_AXIS));  f.getContentPane().add(new InputWindow());  f.pack();  f.setVisible(true);}  }
class C{  public static Caret createCaret(){  return new MotifCaret();}  }
class C{  public FBSavepoint(int id){  savepointId=id;  serverId=getSavepointServerId(id);}  }
class C{  public boolean isTechnologyProvider(){  return isRoleAvailable(getSelectedOrganization(),OrganizationRoleType.TECHNOLOGY_PROVIDER);}  }
class C{  public void removeSrcClass(SootClass clz){  srcClasses.remove(clz.getName());}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public final <V>Flux<T> distinctUntilChanged(Function<? super T,? extends V> keySelector){  return onAssembly(new FluxDistinctUntilChanged<>(this,keySelector));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:49.481 -0500",hash_original_method="57A8851D0E49FA55CB02D4F17330C148",hash_generated_method="45B96C72B5A72BAD8A013471D2375A1E") protected static String reduceString(String input){  String newString=input.toLowerCase();  int len=newString.length();  String retval="";  for (int i=0; i < len; i++) {    if (newString.charAt(i) == ' ' || newString.charAt(i) == '\t')     continue; else     retval+=newString.charAt(i);  }  return retval;}  }
class C{  protected boolean allocatePesForContainer(String containerUid,List<Double> mipsShareRequested){  double totalRequestedMips=0;  double peMips=getPeCapacity();  for (  Double mips : mipsShareRequested) {    if (mips > peMips) {      return false;    }    totalRequestedMips+=mips;  }  if (getAvailableMips() < totalRequestedMips) {    return false;  }  getMipsMapRequested().put(containerUid,mipsShareRequested);  setPesInUse(getPesInUse() + mipsShareRequested.size());  if (getContainersMigratingIn().contains(containerUid)) {    totalRequestedMips=0;  }  List<Double> mipsShareAllocated=new ArrayList<Double>();  for (  Double mipsRequested : mipsShareRequested) {    if (getContainersMigratingIn().contains(containerUid)) {      mipsRequested=0.0;    }    mipsShareAllocated.add(mipsRequested);  }  getMipsMap().put(containerUid,mipsShareAllocated);  setAvailableMips(getAvailableMips() - totalRequestedMips);  return true;}  }
class C{  public NotOutlierException(String message){  super(message);}  }
class C{  public HeapOperand(HeapVariable<T> heap){  value=heap;}  }
class C{  public int intValue(){  return value;}  }
class C{  private void cycleShuffle(){  if (mShuffleMode == SHUFFLE_NONE) {    setShuffleMode(SHUFFLE_NORMAL);    if (mRepeatMode == REPEAT_CURRENT) {      setRepeatMode(REPEAT_ALL);    }  } else   if (mShuffleMode == SHUFFLE_NORMAL || mShuffleMode == SHUFFLE_AUTO) {    setShuffleMode(SHUFFLE_NONE);  }}  }
class C{  public CanvasContainer create(){  return INTERNAL_BUILDER.apply(this);}  }
class C{  public void error(String msg){  _log.error("BrokerModel error str: " + msg);}  }
class C{  @Override @Deprecated public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void dispose(){  m_synchronizer.dispose();  m_hexView.dispose();}  }
class C{  public void testCase4(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=1;  int bSign=1;  byte rBytes[]={10,40,100,-55,96,51,76,40,-45,85,115,44,-127,115,-21,-62,-15,85,64,-87,-2,-36,-36,-106};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public double optDouble(int index){  return optDouble(index,Double.NaN);}  }
class C{  public void fillAligned(){  int len=MathUtils.roundUpInt(pos + 2,Constants.FILE_BLOCK_SIZE);  pos=len;  if (data.length < len) {    checkCapacity(len - data.length);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object rv=stack.pop();  String varName=getString(stack);  if (stack.getUIMgrSafe() != null)   stack.getUIMgrSafe().getStaticContext().put(varName,rv);  return rv;}  }
class C{  public static char toUpperCase(char ch){  return ' ';}  }
class C{  public void removeLayoutCallback(LayoutCallback callback){  if (callbackList != null) {    callbackList.remove(callback);  }}  }
class C{  public TypeFactory(){  try {    log.info("Reading protocol definition from class path");    try (InputStream in=Protocol.class.getResourceAsStream("Protocol.json")){      Protocol protocol=Json.read(in,Protocol.class);      init(protocol);    }   } catch (  IOException e) {    throw new ResourceException(e);  }}  }
class C{  public boolean isNoCache(){  return noCache;}  }
class C{  static int compareWithNullLast(final Comparable o1,final Comparable o2){  if (null == o1) {    if (null == o2) {      return 0;    }    return 1;  }  if (null == o2) {    return -1;  }  return o1.compareTo(o2);}  }
class C{  public DbSingleton(SQLiteDatabase mDb,Context context,DbHelper helper){  this.mDb=mDb;  mContext=context;  mDbHelper=helper;}  }
class C{  private void updateRegion(){  Insets i=autoScroll.getAutoscrollInsets();  Dimension size=component.getSize();  if (size.width != outer.width || size.height != outer.height)   outer.reshape(0,0,size.width,size.height);  if (inner.x != i.left || inner.y != i.top)   inner.setLocation(i.left,i.top);  int newWidth=size.width - (i.left + i.right);  int newHeight=size.height - (i.top + i.bottom);  if (newWidth != inner.width || newHeight != inner.height)   inner.setSize(newWidth,newHeight);}  }
class C{  private UninitializedMessageException newUninitializedMessageException(MessageType message){  if (message instanceof AbstractMessageLite) {    return ((AbstractMessageLite)message).newUninitializedMessageException();  }  return new UninitializedMessageException(message);}  }
class C{  private void initPanel(final ZyGraph graph){  final JPanel mainPanel=new JPanel(new BorderLayout());  mainPanel.setBorder(new TitledBorder("Edit Color Condition"));  final JPanel selectedColorPanel=new JPanel(new BorderLayout());  selectedColorPanel.setBorder(new EmptyBorder(0,5,3,5));  selectedColorPanel.add(m_selectedColorPanel);  final List<Color> colors=getColors(graph);  final JPanel colorGrid=new JPanel(new GridLayout(1 + colors.size() / 4,4));  colorGrid.setBorder(new TitledBorder(""));  for (  final Color color : colors) {    final JPanel outerColorPanel=new JPanel(new BorderLayout());    outerColorPanel.setBorder(new EmptyBorder(3,3,3,3));    final ColorPanel colorPanel=new ColorPanel(color,false);    outerColorPanel.add(colorPanel,BorderLayout.CENTER);    m_colorPanels.add(colorPanel);    colorPanel.addListener(m_colorPanelListener);    colorPanel.addMouseListener(m_colorPanelListener);    colorGrid.add(outerColorPanel,BorderLayout.NORTH);  }  m_selectedColorPanel.setColor(colors.isEmpty() ? new Color(255,255,255) : colors.get(0));  mainPanel.add(selectedColorPanel,BorderLayout.NORTH);  final JPanel gridContainer=new JPanel(new BorderLayout());  gridContainer.add(colorGrid,BorderLayout.NORTH);  gridContainer.setBorder(new EmptyBorder(3,5,0,5));  mainPanel.add(gridContainer,BorderLayout.CENTER);  add(mainPanel,BorderLayout.CENTER);}  }
class C{  private void testFirstNBytes(byte[] byteArray,int n,boolean foundNewScan,int expectedBestScan,int bestScanEndOffset){  assertEquals(foundNewScan,mProgressiveJpegParser.parseMoreData(buildEncodedImage(new TrivialPooledByteBuffer(Arrays.copyOf(byteArray,n)))));  assertTrue(mProgressiveJpegParser.isJpeg());  assertEquals(expectedBestScan,mProgressiveJpegParser.getBestScanNumber());  assertEquals(bestScanEndOffset,mProgressiveJpegParser.getBestScanEndOffset());}  }
class C{  @Override public CallableStatement prepareCall(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void testRecognizeFullCone_Local_v6_Public_v4() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress_v4,responseServerAddress_v6,responseServerAddress_v6);  Response testIResponse2=MessageFactory.create3489BindingResponse(mappedClientAddress_v4,responseServerAddress_v6,responseServerAddress_v6);  responseServer_v6.addMessage(testIResponse1);  responseServer_v6.addMessage(testIResponse2);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.FULL_CONE_NAT);  expectedReturn.setPublicAddress(mappedClientAddress_v4);  StunDiscoveryReport actualReturn=stunAddressDiscoverer_v6.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public static boolean isOneOFEachSuit(int[] picks){  for (int i=0; i < picks.length; i++) {    for (int j=0; j < picks.length; j++) {      if (i != j && (picks[i] / 13 == picks[j] / 13))       return false;    }  }  return true;}  }
class C{  @Override public void close(){  deletionPolicy.close(getGeneration());}  }
class C{  public static TransactionStatus currentTransactionStatus() throws NoTransactionException {  TransactionInfo info=currentTransactionInfo();  if (info == null) {    throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope");  }  return currentTransactionInfo().transactionStatus;}  }
class C{  static public boolean resolveIP(){  return doResolveIP;}  }
class C{  public void appendOpenOrderedListTag(String style){  StringBuilder sb=new StringBuilder("<ol");  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  private void pushAggregateFunctionThroughJoin(AbstractBinaryJoinOperator join,AssignOperator assignOp,IOptimizationContext context) throws AlgebricksException {  for (  Mutable<ILogicalOperator> branchRef : join.getInputs()) {    AbstractLogicalOperator branch=(AbstractLogicalOperator)branchRef.getValue();    if (branch.getOperatorTag() == LogicalOperatorTag.AGGREGATE) {      AggregateOperator aggOp=(AggregateOperator)branch;      pushAggregateFunction(aggOp,assignOp,context);    } else     if (branch.getOperatorTag() == LogicalOperatorTag.INNERJOIN || branch.getOperatorTag() == LogicalOperatorTag.LEFTOUTERJOIN) {      AbstractBinaryJoinOperator childJoin=(AbstractBinaryJoinOperator)branch;      pushAggregateFunctionThroughJoin(childJoin,assignOp,context);    }  }}  }
class C{  private static TargetProcessThread parseThreadInformation(final Node node) throws MessageParserException {  final long id=Long.valueOf(getAttribute(node,"threadId"));  final ThreadState state=convertThreadState(Integer.valueOf(getAttribute(node,"threadState")));  return new TargetProcessThread(id,state);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  String inputHeader2=args[1];  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          outputFile.setValue(row,col,z1 * z2);        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public JoinGroupNode subgroup(){  return (JoinGroupNode)get(0);}  }
class C{  private long bytesLeft(){  return totalSize - position;}  }
class C{  protected void onDeviceDisconnected(){  mField.setEnabled(false);  mSendButton.setEnabled(false);}  }
class C{  @Override public Id<Link> chooseNextLinkId(){  if (this.cachedNextLinkId != null) {    return this.cachedNextLinkId;  }  if (this.cachedRouteLinkIds == null) {    if (this.currentLeg.getRoute() instanceof NetworkRoute) {      this.cachedRouteLinkIds=((NetworkRoute)this.currentLeg.getRoute()).getLinkIds();    } else {      return null;    }  }  if (this.currentLinkIdIndex >= this.cachedRouteLinkIds.size()) {    Link currentLink=this.simulation.getScenario().getNetwork().getLinks().get(this.currentLinkId);    Link destinationLink=this.simulation.getScenario().getNetwork().getLinks().get(this.cachedDestinationLinkId);    if (currentLink.getToNode().equals(destinationLink.getFromNode())) {      this.cachedNextLinkId=destinationLink.getId();      return this.cachedNextLinkId;    }    if (!(this.currentLinkId.equals(this.cachedDestinationLinkId))) {      log.error("The vehicle with driver " + this.getPerson().getId() + ", currently on link "+ this.currentLinkId.toString()+ ", is at the end of its route, but has not yet reached its destination link "+ this.cachedDestinationLinkId.toString());    }    return null;  }  Id<Link> nextLinkId=this.cachedRouteLinkIds.get(this.currentLinkIdIndex);  Link currentLink=this.simulation.getScenario().getNetwork().getLinks().get(this.currentLinkId);  Link nextLink=this.simulation.getScenario().getNetwork().getLinks().get(nextLinkId);  if (currentLink.getToNode().equals(nextLink.getFromNode())) {    this.cachedNextLinkId=nextLinkId;    return this.cachedNextLinkId;  }  log.warn(this + " [no link to next routenode found: routeindex= " + this.currentLinkIdIndex+ " ]");  return null;}  }
