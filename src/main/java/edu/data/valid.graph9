class C{  public com.sun.identity.liberty.ws.disco.jaxb.AuthorizeRequesterElement createAuthorizeRequesterElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.AuthorizeRequesterElementImpl();}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  acks++;  if (acks == 5) {    try {      System.out.println("shootme: got an ACK! ");      System.out.println("Dialog State = " + dialog.getState());      SipProvider provider=(SipProvider)requestEvent.getSource();      Request messageRequest=dialog.createRequest(Request.MESSAGE);      CSeqHeader cseq=(CSeqHeader)messageRequest.getHeader(CSeqHeader.NAME);      ClientTransaction ct=provider.getNewClientTransaction(messageRequest);      cseq.setSeqNumber(1);      ct.sendRequest();    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  static void drawPressed3DBorder(Graphics g,Rectangle r){  drawPressed3DBorder(g,r.x,r.y,r.width,r.height);}  }
class C{  public boolean isPermitted(String domainName){  if (StringUtils.isEmpty(domainName)) {    return false;  }  if (UrlUtils.isDomainOrSubDomain(domainName,restrictedDomains)) {    return false;  }  if (CollectionUtils.isNotEmpty(permittedDomains)) {    return UrlUtils.isDomainOrSubDomain(domainName,permittedDomains);  }  return true;}  }
class C{  public void removeHeaders(){  qheaders=new NameValueList();}  }
class C{  public Unmarshaller createUnmarshaller() throws JAXBException {  return new UnmarshallerImpl(this,gi);}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SpnegoContextTokenType createSpnegoContextTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SpnegoContextTokenTypeImpl();}  }
class C{  public String toString_orig(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < getLocals(); ++i) {    sb.append(getLocal(i));  }  sb.append(' ');  for (int i=0; i < getStackSize(); ++i) {    sb.append(getStack(i).toString());  }  return sb.toString();}  }
class C{  protected void Predicate() throws javax.xml.transform.TransformerException {  if (tokenIs('[')) {    nextToken();    PredicateExpr();    consumeExpected(']');  }}  }
class C{  public SAXNotSupportedException(String message){  super(message);}  }
class C{  public boolean encryptData(){  return encryptData;}  }
class C{  public Lyrics3Line(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  @Override public String toString(){  return "Position [longitude=" + longitude + ", latitude="+ latitude+ ", altitude="+ altitude+ "]";}  }
class C{  @Override public Foo fetchByPrimaryKey(long fooId){  return fetchByPrimaryKey((Serializable)fooId);}  }
class C{  public void testDivideLargeScale(){  BigDecimal arg1=new BigDecimal("320.0E+2147483647");  BigDecimal arg2=new BigDecimal("6E-2147483647");  try {    BigDecimal result=arg1.divide(arg2,Integer.MAX_VALUE,java.math.RoundingMode.CEILING);    fail("Expected ArithmeticException when dividing with a scale that's too large");  } catch (  ArithmeticException e) {  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentGroupName=getStringOptionValue(IArgument.AGENT_GROUP_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  boolean bSet=isOptionSet(IArgument.AGENT_SET_ATTR_VALUE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  String[] params={realm,agentGroupName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_AGENT_GROUP",params);    AMIdentity amid=new AMIdentity(adminSSOToken,agentGroupName,IdType.AGENTGROUP,realm,null);    if (!amid.isExists()) {      String[] args={realm,agentGroupName,"agent group did not exist"};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT_GROUP",args);      Object[] p={agentGroupName};      String msg=MessageFormat.format(getResourceString("update-agent-group-does-not-exist"),p);      throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    AgentConfiguration.updateAgentGroup(adminSSOToken,realm,agentGroupName,attributeValues,bSet);    outputWriter.printlnMessage(getResourceString("update-agent-group-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_UPDATE_AGENT_GROUP",params);  } catch (  IdRepoException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("UpdateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("UpdateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("UpdateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("UpdateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Attr newAttribute;  NodeList addressElementList;  Element testAddress;  Attr attrAddress;  doc1=(Document)load("staff",true);  doc2=(Document)load("staff",false);  newAttribute=doc2.createAttribute("newAttribute");  addressElementList=doc1.getElementsByTagName("address");  testAddress=(Element)addressElementList.item(4);{    boolean success=false;    try {      attrAddress=testAddress.setAttributeNode(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  private void processIndexEntryNode(ResourceIndexEntry rie,Node indexNode){  String resourceName=XMLUtils.getNodeAttributeValue(indexNode,PolicyManager.POLICY_INDEX_REFERENCE_NODE_NAME_ATTR);  Set policyNames=getPolicyNames(indexNode);  ResourceIndexEntry ie=new ResourceIndexEntry(resourceName,policyNames);  rie.childEntries.add(ie);  ie.parent=rie;  Set indexEntryNodeSet=XMLUtils.getChildNodes(indexNode,PolicyManager.POLICY_INDEX_REFERENCE_NODE);  Iterator indexEntryNodes=indexEntryNodeSet.iterator();  while (indexEntryNodes.hasNext()) {    Node indexEntryNode=(Node)indexEntryNodes.next();    processIndexEntryNode(ie,indexEntryNode);  }}  }
class C{  public TriggerWrapper block(){  if (state != Trigger.STATE_COMPLETE) {    previous_state=state;    state=Trigger.STATE_BLOCKED;  }  return this;}  }
class C{  public org.omg.CORBA.Any to_any(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("to_any",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    return $self.to_any();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private String urlEncode(String value){  if (null == value || value.length() == 0) {    return null;  }  try {    return URLEncoder.encode(value,"UTF-8");  } catch (  UnsupportedEncodingException e) {    return null;  }}  }
class C{  public void removeManager(String name) throws Exception {  ObjectName oname=new ObjectName(name);  Container container=getParentContainerFromChild(oname);  if (container instanceof Context) {    ((Context)container).setManager(null);  }}  }
class C{  public static Point fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  return gson.create().fromJson(json,Point.class);}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  public static String formatAsGeneralizedTime(final Date date){  return formatAsGeneralizedTime(date.getTime());}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  str=pcdata;}  }
class C{  public Attribute createAttribute(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE,xml);  if (obj == null) {    return new AttributeImpl(xml);  } else {    return (Attribute)obj;  }}  }
class C{  protected MouseDragGestureRecognizer(DragSource ds,Component c,int act,DragGestureListener dgl){  super(ds,c,act,dgl);}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public ColorConvertOp(ICC_Profile[] profiles,RenderingHints hints){  if (profiles == null) {    throw new NullPointerException("Profiles cannot be null");  }  gotProfiles=true;  profileList=new ICC_Profile[profiles.length];  for (int i1=0; i1 < profiles.length; i1++) {    profileList[i1]=profiles[i1];  }  this.hints=hints;}  }
class C{  public DataBuffer createDataBuffer(){  DataBuffer dataBuffer=null;  int size=scanlineStride * height;switch (dataType) {case DataBuffer.TYPE_BYTE:    dataBuffer=new DataBufferByte(size,numBanks);  break;case DataBuffer.TYPE_USHORT:dataBuffer=new DataBufferUShort(size,numBanks);break;case DataBuffer.TYPE_SHORT:dataBuffer=new DataBufferShort(size,numBanks);break;case DataBuffer.TYPE_INT:dataBuffer=new DataBufferInt(size,numBanks);break;case DataBuffer.TYPE_FLOAT:dataBuffer=new DataBufferFloat(size,numBanks);break;case DataBuffer.TYPE_DOUBLE:dataBuffer=new DataBufferDouble(size,numBanks);break;default :throw new IllegalArgumentException("dataType is not one " + "of the supported types.");}return dataBuffer;}  }
class C{  public UnsolicitedNotificationEvent(Object src,UnsolicitedNotification notice){  super(src);  this.notice=notice;}  }
class C{  public void test_setElementAtLjava_lang_ObjectI(){  Vector v=vectorClone(tVector);  v.setElementAt("Inserted Element",99);  assertEquals("Element not set","Inserted Element",((String)v.elementAt(99)));  try {    tVector.setElementAt("Wrong position",-5);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.setElementAt("Wrong position",tVector.size() + 1);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }}  }
class C{  protected void shiftGap(int newGapStart){  int oldGapStart=getGapStart();  int dg=newGapStart - oldGapStart;  int oldGapEnd=getGapEnd();  int newGapEnd=oldGapEnd + dg;  int gapSize=oldGapEnd - oldGapStart;  super.shiftGap(newGapStart);  if (dg > 0) {    int adjustIndex=findMarkAdjustIndex(oldGapStart);    int n=marks.size();    for (int i=adjustIndex; i < n; i++) {      MarkData mark=marks.elementAt(i);      if (mark.index >= newGapEnd) {        break;      }      mark.index-=gapSize;    }  } else   if (dg < 0) {    int adjustIndex=findMarkAdjustIndex(newGapStart);    int n=marks.size();    for (int i=adjustIndex; i < n; i++) {      MarkData mark=marks.elementAt(i);      if (mark.index >= oldGapEnd) {        break;      }      mark.index+=gapSize;    }  }  resetMarksAtZero();}  }
class C{  private Object writeReplace(){  return new Ser(Ser.LOCAL_TIME_TYPE,this);}  }
class C{  @NonNull public static Agera range(int count){  return new AgeraRange(count);}  }
class C{  public void sendLockOutNotice(String userDN){  if (lockoutNotification != null) {    AMSendMail sm=new AMSendMail();    StringTokenizer emailTokens=new StringTokenizer(lockoutNotification,SPACE_DELIM);    while (emailTokens.hasMoreTokens()) {      StringTokenizer stz2=new StringTokenizer(emailTokens.nextToken(),PIPE_DELIM);      String[] toAddress={stz2.nextToken()};      String locale=null;      String charset=null;      if (stz2.hasMoreTokens()) {        locale=stz2.nextToken();        if (stz2.hasMoreTokens()) {          charset=stz2.nextToken();        }      }      ResourceBundle rb=com.sun.identity.shared.locale.Locale.getResourceBundle(bundleName,locale);      String fromAddress=rb.getString(FROM_ADDRESS);      String emailSubject=rb.getString(EMAIL_SUBJECT);      String obj[]={userDN};      String emailMsg=MessageFormat.format(rb.getString(EMAIL_MESSAGE),(Object[])obj);      if (debug.messageEnabled()) {        debug.message("ISAccountLockout.sendLockOutNotice:" + " lockoutNotification = " + lockoutNotification + " toAddress = "+ toAddress);      }      try {        sm.postMail(toAddress,emailSubject,emailMsg,fromAddress,charset);      } catch (      MessagingException ex) {        debug.error("cannot email lockout notification:token ",ex);      }    }  }}  }
class C{  public void processInfo(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a INFO sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    if (requestEvent.getDialog() != null) {      logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());      Response response=protocolObjects.messageFactory.createResponse(200,request);      if (serverTransactionId != null) {        serverTransactionId.sendResponse(response);      }      logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());      this.infoSeen=true;      Dialog dialog=requestEvent.getDialog();      Request infoRequest=dialog.createRequest(Request.INFO);      SipProvider provider=(SipProvider)requestEvent.getSource();      ClientTransaction ct=provider.getNewClientTransaction(infoRequest);      dialog.sendRequest(ct);    } else {      logger.info("Saw out of dialog message -- discarding " + request);    }  } catch (  Exception ex) {    ex.printStackTrace();    logger.error("Unexpected exception",ex);    TestCase.fail("Unexpected exception occured");  }}  }
class C{  public ProxiedAuthV2Control(ByteString authorizationID){  this(true,authorizationID);}  }
class C{  public BasicStroke(float width){  this(width,CAP_SQUARE,JOIN_MITER,10.0f,null,0.0f);}  }
class C{  public void updateCustomAttribute(AttributeType attr,Schema schema){  customAttributePanel.update(attr,schema);  schemaElementPanel=customAttributePanel;  ((CardLayout)mainPanel.getLayout()).show(mainPanel,customAttributePanel.getTitle().toString());}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  public Arg(QName qname,XObject val){  m_qname=qname;  m_val=val;  m_isVisible=true;  m_isFromWithParam=false;  m_expression=null;}  }
class C{  protected void onUncaughtException(RequestContext requestContext,Exception e) throws ServletException, IOException {  getDebug().error("ConsoleServletBase.onUncaughtException",e);  requestContext.getResponse().sendRedirect("../base/AMUncaughtException");}  }
class C{  public void testDivideRoundHalfEvenNeg2(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  String c="0E+5";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public Set createStaticGroups(Map groupsMap) throws AMException, SSOException {  Iterator iter=groupsMap.keySet().iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupName=(String)iter.next();    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + groupName+ ","+ super.entryDN;    Map attributes=(Map)groupsMap.get(groupName);    AMStaticGroupImpl groupImpl=new AMStaticGroupImpl(super.token,groupDN);    groupImpl.setAttributes(attributes);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("DeltaSession[");  sb.append(id);  sb.append("]");  return (sb.toString());}  }
class C{  public VirtualStaticGroup(){  super();}  }
class C{  public final void testIsStatePreserved2(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  byte[] encodedKeyCopy=encodedKey.clone();  PKCS8EncodedKeySpec meks=new PKCS8EncodedKeySpec(encodedKeyCopy);  byte[] ek=meks.getEncoded();  ek[3]=(byte)5;  byte[] ek1=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek1));}  }
class C{  @Override public void onDestroy(){  super.onDestroy();  destroyFloat();}  }
class C{  @Override public boolean isAllowed(ModifyDNOperation operation){  if (skipAccessCheck(operation)) {    return true;  }  final RDN oldRDN=operation.getOriginalEntry().getName().rdn();  final RDN newRDN=operation.getNewRDN();  final DN newSuperiorDN=operation.getNewSuperior();  if (newSuperiorDN != null && !aciCheckSuperiorEntry(newSuperiorDN,operation)) {    return false;  }  boolean rdnChangesAllowed=aciCheckRDNs(operation,oldRDN,newRDN);  if (rdnChangesAllowed && newSuperiorDN != null) {    AciContainer container=new AciLDAPOperationContainer(operation,ACI_EXPORT,operation.getOriginalEntry());    if (!oldRDN.equals(newRDN)) {      container.setSeenEntry(true);    }    return accessAllowed(container);  }  return rdnChangesAllowed;}  }
class C{  public static boolean isBoolean(final String param){  if (isEmpty(param)) {    return false;  }  return param.equalsIgnoreCase("true") || param.equalsIgnoreCase("false");}  }
class C{  public BarcodeCodabar(PdfDocument document){  super(document);  try {    x=0.8f;    n=2;    font=PdfFontFactory.createFont(FontConstants.HELVETICA,PdfEncodings.WINANSI);    size=8;    baseline=size;    barHeight=size * 3;    textAlignment=ALIGN_CENTER;    generateChecksum=false;    checksumText=false;    startStopText=false;  } catch (  Exception e) {    throw new PdfException(e.getMessage(),e.getCause());  }}  }
class C{  private int indexOf(Object x){  if (x != null) {    if (x instanceof ScheduledFutureTask) {      int i=((ScheduledFutureTask)x).heapIndex;      if (i >= 0 && i < size && queue[i] == x)       return i;    } else {      for (int i=0; i < size; i++)       if (x.equals(queue[i]))       return i;    }  }  return -1;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfNull makeIndirect(PdfDocument document,PdfIndirectReference reference){  return (PdfNull)super.makeIndirect(document,reference);}  }
class C{  static PropertyOptions verifySetOptions(PropertyOptions options,Object itemValue) throws XMPException {  if (options == null) {    options=new PropertyOptions();  }  if (options.isArrayAltText()) {    options.setArrayAlternate(true);  }  if (options.isArrayAlternate()) {    options.setArrayOrdered(true);  }  if (options.isArrayOrdered()) {    options.setArray(true);  }  if (options.isCompositeProperty() && itemValue != null && itemValue.toString().length() > 0) {    throw new XMPException("Structs and arrays can't have values",XMPError.BADOPTIONS);  }  options.assertConsistency(options.getOptions());  return options;}  }
class C{  public URL(String protocol,String host,int port,String file) throws MalformedURLException {  this(protocol,host,port,file,null);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void init() throws Exception {  initClassLoaders();  Thread.currentThread().setContextClassLoader(catalinaLoader);  SecurityClassLoad.securityClassLoad(catalinaLoader);  if (log.isDebugEnabled())   log.debug("Loading startup class");  Class<?> startupClass=catalinaLoader.loadClass("org.apache.catalina.startup.Catalina");  Object startupInstance=startupClass.newInstance();  if (log.isDebugEnabled())   log.debug("Setting startup class properties");  String methodName="setParentClassLoader";  Class<?> paramTypes[]=new Class[1];  paramTypes[0]=Class.forName("java.lang.ClassLoader");  Object paramValues[]=new Object[1];  paramValues[0]=sharedLoader;  Method method=startupInstance.getClass().getMethod(methodName,paramTypes);  method.invoke(startupInstance,paramValues);  catalinaDaemon=startupInstance;}  }
class C{  public static boolean isDate(String strDate,String pattern){  try {    parseDate(strDate,pattern);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void test_getInstanceLjava_lang_String() throws Exception {  try {    KeyManagerFactory.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  KeyManagerFactory keyMF;  for (int i=0; i < validValues.length; i++) {    keyMF=KeyManagerFactory.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",keyMF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyMF.getProvider(),mProv);    checkResult(keyMF);  }}  }
class C{  @Override public void onTouchImageSection(int sectionIndex,EasyImageSection imageSection){  this.imageFloatingTv.setVisibility(View.INVISIBLE);  this.imageFloatingIv.setVisibility(View.VISIBLE);switch (imageSection.imageType) {case EasyImageSection.CIRCLE:    this.imageFloatingIv.setImageType(EasyFloatingImageView.CIRCLE);  break;case EasyImageSection.ROUND:this.imageFloatingIv.setImageType(EasyFloatingImageView.ROUND);break;}GlideUtils.displayNative(this.imageFloatingIv,imageSection.resId);this.scrollToPosition(this.adapter.getPositionForSection(sectionIndex));}  }
class C{  public boolean addChat(@NotNull ChatImpl chat){  int updatedRows=0;  try {    final PreparedStatement preparedStatement=connetion.getPreparedStatement("INSERT INTO Chat (id, accessHash, isChannel) " + "VALUES (?,?,?)");    preparedStatement.setInt(1,chat.getId());    if (chat.getAccessHash() == null) {      preparedStatement.setNull(2,Types.BIGINT);    } else {      preparedStatement.setLong(2,chat.getAccessHash());    }    preparedStatement.setBoolean(3,chat.isChannel());    updatedRows=preparedStatement.executeUpdate();  } catch (  SQLException e) {    BotLogger.error(LOGTAG,e);  }  return updatedRows > 0;}  }
class C{  @Deprecated protected InputStream render(String contextPath,WebResource resource) throws IOException, ServletException {  return render(contextPath,resource,null);}  }
class C{  public void namespaceAfterStartElement(String prefix,String uri) throws SAXException {  if (m_firstTagNotEmitted && m_firstElementURI == null && m_firstElementName != null) {    String prefix1=getPrefixPart(m_firstElementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_firstElementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);}  }
class C{  static private byte[] toBytes(Vector octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.size(); i++) {    try {      DEROctetString o=(DEROctetString)octs.elementAt(i);      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs.elementAt(i).getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public void removeConnector(String name) throws Exception {  ObjectName oname=new ObjectName(name);  Service service=getService(oname);  String port=oname.getKeyProperty("port");  Connector conns[]=service.findConnectors();  for (int i=0; i < conns.length; i++) {    String connAddress=String.valueOf(conns[i].getProperty("address"));    String connPort="" + conns[i].getPort();    if ((connAddress == null) && port.equals(connPort)) {      service.removeConnector(conns[i]);      conns[i].destroy();      break;    }    if (port.equals(connPort)) {      service.removeConnector(conns[i]);      conns[i].destroy();      break;    }  }}  }
class C{  public static boolean lockdownMode(){  return directoryServer.lockdownMode;}  }
class C{  private void backupWidgets(BackupDataOutput data) throws IOException {  final ContentResolver cr=mContext.getContentResolver();  final int dpi=mContext.getResources().getDisplayMetrics().densityDpi;  int backupWidgetCount=0;  String where=LauncherSettings.Favorites.ITEM_TYPE + "=" + LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET+ " AND "+ getUserSelectionArg();  Cursor cursor=cr.query(LauncherSettings.Favorites.CONTENT_URI,FAVORITE_PROJECTION,where,null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final String providerName=cursor.getString(APPWIDGET_PROVIDER_INDEX);      final ComponentName provider=ComponentName.unflattenFromString(providerName);      BackupProtos.Key key=null;      String backupKey=null;      if (provider != null) {        key=getKey(BackupProtos.Key.WIDGET,providerName);        backupKey=keyToBackupKey(key);      } else {        Log.w(TAG,"empty intent on appwidget: " + id);      }      if (mExistingKeys.contains(backupKey) && restoredBackupVersion >= 3) {        if (DEBUG)         Log.d(TAG,"already saved widget " + backupKey);        mKeys.add(key);      } else       if (backupKey != null) {        if (DEBUG)         Log.d(TAG,"I can count this high: " + backupWidgetCount);        if (backupWidgetCount < MAX_WIDGETS_PER_PASS) {          if (DEBUG)           Log.d(TAG,"saving widget " + backupKey);          UserHandleCompat user=UserHandleCompat.myUserHandle();          writeRowToBackup(key,packWidget(dpi,provider,user),data);          mKeys.add(key);          backupWidgetCount++;        } else {          if (VERBOSE)           Log.v(TAG,"deferring widget backup " + backupKey);          dataChanged();        }      }    }  }  finally {    cursor.close();  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SwitchAuditElement createSwitchAuditElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SwitchAuditElementImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node newChild;  Node appendNode;  String childName;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newChild=doc.createElement("br");  appendNode=employeeNode.appendChild(newChild);  childName=appendNode.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  protected PaperOnboardingPage toggleToPreviousElement(){  if (mActiveElementIndex - 1 >= 0) {    mActiveElementIndex--;    return mElements.size() > mActiveElementIndex ? mElements.get(mActiveElementIndex) : null;  } else   return null;}  }
class C{  public boolean needsLogging(){  return logFileName != null;}  }
class C{  void bindMaintenanceFilter(Filter filter){  maintenanceFilter.setDelegate(filter);}  }
class C{  public boolean checkServerUp(String serverID){  try {    return getClusterMonitor().checkServerUp(serverID);  } catch (  SessionException e) {    sessionDebug.error("Failed to check Server Up for {0}",serverID,e);    return false;  }}  }
class C{  public Map parsedUserSpecifiedOps(Set userSpecifiedOpsSet){  if (debug.messageEnabled()) {    debug.message("RepoConfigHelper.parsedUserSpecifiedOps entry:" + " userSpecifiedOpsSet:" + userSpecifiedOpsSet);  }  IdType idTypeRead=null;  Set opsREAD=null;  Map supportedOps=new HashMap();  Iterator it=userSpecifiedOpsSet.iterator();  while (it.hasNext()) {    idTypeRead=null;    Set opsRead=null;    String curr=(String)it.next();    StringTokenizer st=new StringTokenizer(curr,"= ,");    if (st.hasMoreTokens()) {      String idtypeToken=st.nextToken();      if (debug.messageEnabled()) {        debug.message("    idtypeToken:" + idtypeToken);      }      if (idtypeToken.equalsIgnoreCase("user")) {        idTypeRead=IdType.USER;        opsRead=parseInputedOps(st,true);      } else       if (idtypeToken.equalsIgnoreCase("group")) {        idTypeRead=IdType.GROUP;        opsRead=parseInputedOps(st,false);      } else       if (idtypeToken.equalsIgnoreCase("agent")) {        idTypeRead=IdType.AGENT;        opsRead=parseInputedOps(st,false);      } else       if (idtypeToken.equalsIgnoreCase("role")) {        idTypeRead=IdType.ROLE;        opsRead=parseInputedOps(st,false);      } else       if (idtypeToken.equalsIgnoreCase("filteredrole")) {        idTypeRead=IdType.FILTEREDROLE;        opsRead=parseInputedOps(st,false);      } else       if (idtypeToken.equalsIgnoreCase("realm")) {        idTypeRead=IdType.REALM;        opsRead=parseInputedOps(st,true);      } else {        idTypeRead=null;      }    }    if ((idTypeRead != null) && (opsRead != null) && (!opsRead.isEmpty())) {      supportedOps.put(idTypeRead,opsRead);      if (debug.messageEnabled()) {        debug.message("RepoConfigHelper.parsedUserSpecifiedOps" + " called supportedOps:" + supportedOps + "; idTypeRead:"+ idTypeRead+ "; opsRead:"+ opsRead);      }    }  }  return supportedOps;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ZERO_OR_ONE,null));}  }
class C{  private void log(String message){  if (context != null)   context.log("ContextListener: " + message); else   System.out.println("ContextListener: " + message);}  }
class C{  public Object authenticate(Message message,Subject subject,Map state,HttpServletRequest request){  List certs=null;  X509Certificate clientCert=message.getPeerCertificate();  if (clientCert != null) {    certs=new ArrayList(2);    certs.add(clientCert);  }  X509Certificate messageCert=message.getMessageCertificate();  if (messageCert != null) {    if (certs == null) {      certs=new ArrayList(1);    }    certs.add(messageCert);  }  String principal=null;  StringBuffer principalsSB=null;  if (certs == null) {    principal=ANONYMOUS_PRINCIPAL;  } else {    Set principalsSet=new HashSet(6);    for (Iterator iter=certs.iterator(); iter.hasNext(); ) {      X509Certificate cert=(X509Certificate)iter.next();      if (debug.messageEnabled()) {        debug.message("WebServiceAuthenticatorImpl.authenticate: cert = " + cert);      }      String subjectDN=CertUtils.getSubjectName(cert);      if (principal == null) {        principal=subjectDN;      } else       if (!principal.equals(subjectDN)) {        principalsSet.add(subjectDN);      }      String issuerDN=CertUtils.getIssuerName(cert);      principalsSet.add(issuerDN);    }    principalsSB=new StringBuffer(50);    for (Iterator iter=principalsSet.iterator(); iter.hasNext(); ) {      String str=(String)iter.next();      if (principalsSB.length() == 0) {        principalsSB.append(str);      } else {        principalsSB.append("|").append(str);      }    }  }  if (debug.messageEnabled()) {    debug.message("WebServiceAuthenticatorImpl.authenticate" + ": principal = " + principal + ", principals = "+ principalsSB);  }  String authMech=message.getAuthenticationMechanism();  String cacheKey=authMech + " " + principal;  if (debug.messageEnabled()) {    debug.message("WebServiceAuthenticatorImpl.authenticate" + ": cacheKey = " + cacheKey);  }  SSOToken ssoToken=null;  ssoToken=(SSOToken)ssoTokenCache.get(cacheKey);  if (ssoToken != null) {    if (ssoTokenManager.isValidToken(ssoToken)) {      if (debug.messageEnabled()) {        debug.message("WebServiceAuthenticatorImpl." + "authenticate: found ssoToken in cache");      }      return ssoToken;    }    if (debug.messageEnabled()) {      debug.message("WebServiceAuthenticatorImpl." + "authenticate: ssoToken in cache expired");    }synchronized (ssoTokenCache) {      ssoTokenCache.remove(cacheKey);    }    ssoToken=null;  }  String authInstant=null;  try {    InternalSession is=InjectorHolder.getInstance(SessionService.class).newInternalSession(null,false);    is.activate("");    Map attrs=sessionSchema.getAttributeDefaults();    is.setMaxSessionTime(CollectionHelper.getIntMapAttr(attrs,MAX_SESSION_TIME,DEFAULT_MAX_SESSION_TIME,debug));    is.setMaxIdleTime(CollectionHelper.getIntMapAttr(attrs,IDLE_TIME,DEFAULT_IDLE_TIME,debug));    is.setMaxCachingTime(CollectionHelper.getIntMapAttr(attrs,CACHE_TIME,DEFAULT_CACHE_TIME,debug));    is.putProperty(AUTH_TYPE_PROP,message.getAuthenticationMechanism());    authInstant=DateUtils.toUTCDateFormat(newDate());    is.putProperty(AUTH_INSTANT_PROP,authInstant);    ssoToken=SSOTokenManager.getInstance().createSSOToken(is.getID().toString());  } catch (  Exception ex) {    debug.error("WebServiceAuthenticatorImpl.authenticate: " + "Unable to get SSOToken",ex);  }  if (ssoToken == null) {    return null;  }  try {    ssoToken.setProperty(PRINCIPAL_PROP,principal);    if (principalsSB != null) {      ssoToken.setProperty(PRINCIPALS_PROP,principalsSB.toString());    }    if (authInstant != null) {      ssoToken.setProperty(AUTH_INSTANT_PROP,authInstant);    }    ssoToken.setProperty(AUTH_TYPE_PROP,message.getAuthenticationMechanism());    SSOTokenManager.getInstance().refreshSession(ssoToken);    ssoTokenCache.put(cacheKey,ssoToken);  } catch (  Exception ex) {    debug.error("WebServiceAuthenticatorImpl.authenticate: " + "Unable to set SSOToken property",ex);    return null;  }  return ssoToken;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType createNameIdentifierType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl();}  }
class C{  public String findPattern(String pat){  int k=super.find(pat);  if (k >= 0) {    return unpackValues(k);  }  return "";}  }
class C{  public void editIDRepo(String realmName,String idRepoName,Map values) throws AMConsoleException {  String[] params={realmName,idRepoName};  logEvent("ATTEMPT_MODIFY_ID_REPO",params);  values.remove("idRepoLoadSchema");  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,getUserSSOToken());    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realmName,null);    ServiceConfig ss=cfg.getSubConfig(idRepoName);    ss.setAttributes(values);    logEvent("SUCCEED_MODIFY_ID_REPO",params);  } catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={realmName,idRepoName,strError};    logEvent("SMS_EXCEPTION_MODIFY_ID_REPO",paramsEx);    throw new AMConsoleException(strError);  }catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={realmName,idRepoName,strError};    logEvent("SSO_EXCEPTION_MODIFY_ID_REPO",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public void createSubRealm(String parentRealm,String name,Map attrValues) throws AMConsoleException {  if ((parentRealm == null) || (parentRealm.length() == 0)) {    parentRealm="/";  }  String[] params={parentRealm,name};  logEvent("ATTEMPT_CREATE_REALM",params);  try {    OrganizationConfigManager orgMgr=new OrganizationConfigManager(getUserSSOToken(),parentRealm);    Map map=mapAttributeValuesToServiceName(attrValues);    orgMgr.createSubOrganization(name,map);    logEvent("SUCCEED_CREATE_REALM",params);  } catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={parentRealm,name,strError};    logEvent("SMS_EXCEPTION_CREATE_REALM",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  static ReplayPromise<Void> anyReplay(final Duration timeout,final Promise<?>... promises){  return anyReplay(timeout,System.currentTimeMillis(),promises);}  }
class C{  public final void testGetY(){  DSAPublicKeySpec dpks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(1,dpks.getY().intValue());}  }
class C{  public ServicesNoAttributeViewBean(){  super("ServicesNoAttribute",DEFAULT_DISPLAY_URL,null);  String lserviceName=(String)getPageSessionAttribute(SERVICE_NAME);  if (lserviceName != null) {    initialize(lserviceName);  }}  }
class C{  public boolean removeParameter(final String name){  return this.local.removeParameter(name);}  }
class C{  @Override public void close(){  try {    super.close();    if (this.socket != null) {      this.socket.close();      this.socket=null;    }  } catch (  Exception e) {    getErrorManager().error("Exception occurred when closing the socket handler",e,ErrorManager.CLOSE_FAILURE);  }}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(PGTITLE,CCPageTitle.class);  registerChild(TF_PARENTID,CCTextField.class);  registerChild(TF_CLIENT_TYPE,CCTextField.class);  registerChild(SEC_MH_COMMON,CCSecondaryMasthead.class);  registerChild(PROPERTY_ATTRIBUTE,AMPropertySheet.class);  ptModel.registerChildren(this);  propertySheetModel.registerChildren(this);}  }
class C{  private void cleanUpSelector(){  try {    for (    SelectionKey key : selector.keys()) {      try {        key.cancel();      } catch (      Exception e) {        logger.traceException(e);      }      try {        key.channel().close();      } catch (      Exception e) {        logger.traceException(e);      }    }  } catch (  Exception e) {    logger.traceException(e);  }}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  private Attribute[] mapToAttributes(Map<String,Set<String>> map){  Attribute[] result=new Attribute[map.size()];  int index=0;  for (  Map.Entry<String,Set<String>> entry : map.entrySet()) {    result[index]=new Attribute();    result[index].setName(entry.getKey());    result[index].setValues(entry.getValue().toArray(new String[0]));    index++;  }  return result;}  }
class C{  public static String convertFrameID23To24(String identifier){  if (identifier.length() < 4) {    return null;  }  if (ID3v23Frames.getInstanceOf().getIdToValueMap().containsKey(identifier)) {    if (ID3v24Frames.getInstanceOf().getIdToValueMap().containsKey(identifier)) {      return identifier;    } else {      return ID3Frames.convertv23Tov24.get(identifier.substring(0,4));    }  }  return null;}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case MENU_HELP:    help();  return true;}return super.onOptionsItemSelected(item);}  }
class C{  public CMapObject readArray() throws java.io.IOException {  List<CMapObject> array=new ArrayList<CMapObject>();  while (true) {    CMapObject obj=readObject();    if (obj.isToken()) {      if (obj.toString().equals("]")) {        break;      }      if (obj.toString().equals(">>")) {        tokeniser.throwError(IOException.UnexpectedGtGt);      }    }    array.add(obj);  }  return new CMapObject(CMapObject.ARRAY,array);}  }
class C{  public void handleTblDataActionHrefRequest(RequestInvocationEvent event){  EntitiesModel model=(EntitiesModel)getModel();  String universalId=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));  setPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID,universalId);  try {    AMIdentity amid=IdUtils.getIdentity(model.getUserSSOToken(),universalId);    String idType=amid.getType().getName();    AMViewBeanBase vb=(AMViewBeanBase)getViewBean(EntityEditViewBean.class);    setPageSessionAttribute(EntityOpViewBeanBase.ENTITY_NAME,amid.getName());    setPageSessionAttribute(EntityOpViewBeanBase.ENTITY_TYPE,idType);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  IdRepoException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getErrorString(e));    forwardTo();  }}  }
class C{  private IVGenerator(){}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Element element;  Element elementTest;  Element elementDoc;  Attr attribute;  Node setNode;  Node appendedChild;  NodeList elementList;  boolean hasAttributes;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","test",docType);  element=newDoc.createElementNS("http://www.w3.org/DOM/Test","dom:elem");  attribute=newDoc.createAttribute("attr");  setNode=element.setAttributeNode(attribute);  elementDoc=newDoc.getDocumentElement();  appendedChild=elementDoc.appendChild(element);  elementList=newDoc.getElementsByTagNameNS("http://www.w3.org/DOM/Test","elem");  elementTest=(Element)elementList.item(0);  hasAttributes=elementTest.hasAttributes();  assertTrue("nodehasattributes04",hasAttributes);}  }
class C{  private Header createDigestHeader(final Credentials credentials,final String digest) throws AuthenticationException {  CharArrayBuffer buffer=new CharArrayBuffer(128);  if (isProxy()) {    buffer.append(AUTH.PROXY_AUTH_RESP);  } else {    buffer.append(AUTH.WWW_AUTH_RESP);  }  buffer.append(": Digest ");  String uri=getParameter("uri");  String realm=getParameter("realm");  String nonce=getParameter("nonce");  String opaque=getParameter("opaque");  String response=digest;  String algorithm=getParameter("algorithm");  String uname=credentials.getUserPrincipal().getName();  List<BasicNameValuePair> params=new ArrayList<BasicNameValuePair>(20);  params.add(new BasicNameValuePair("username",uname));  params.add(new BasicNameValuePair("realm",realm));  params.add(new BasicNameValuePair("nonce",nonce));  params.add(new BasicNameValuePair("uri",uri));  params.add(new BasicNameValuePair("response",response));  if (qopVariant != QOP_MISSING) {    params.add(new BasicNameValuePair("qop",getQopVariantString()));    params.add(new BasicNameValuePair("nc",NC));    params.add(new BasicNameValuePair("cnonce",getCnonce()));  }  if (algorithm != null) {    params.add(new BasicNameValuePair("algorithm",algorithm));  }  if (opaque != null) {    params.add(new BasicNameValuePair("opaque",opaque));  }  for (int i=0; i < params.size(); i++) {    BasicNameValuePair param=params.get(i);    if (i > 0) {      buffer.append(", ");    }    boolean noQuotes="nc".equals(param.getName()) || "qop".equals(param.getName());    BasicHeaderValueFormatter.DEFAULT.formatNameValuePair(buffer,param,!noQuotes);  }  return new BufferedHeader(buffer);}  }
class C{  public CODESET_INCOMPATIBLE(String detailMessage,int minorCode,CompletionStatus completionStatus){  super(detailMessage,minorCode,completionStatus);}  }
class C{  public void preProcessDelete(SSOToken token,String entryDN,Map attributes,boolean softDeleteEnabled,int objectType) throws AMPreCallBackException {}  }
class C{  protected static void cleanDomainMap(String canonOrgDN){synchronized (canonicalDomainMap) {    canonicalDomainMap.remove(canonOrgDN);  }synchronized (domainMap) {    domainMap.remove(canonOrgDN);  }}  }
class C{  public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public ShapelessRecipe addIngredient(int count,MaterialData ingredient){  return addIngredient(count,ingredient.getItemType(),ingredient.getData());}  }
class C{  public static void copy(InputStream input,Writer output,String encoding) throws IOException {  InputStreamReader in=new InputStreamReader(input,encoding);  copy(in,output);}  }
class C{  @Override public V remove(Object key){  if (key == null) {    return removeNullKey();  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      postRemove(e);      return e.value;    }  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatabegining.class,args);}  }
class C{  public void removeXfaForm(){  if (hasXfaForm()) {    PdfDictionary root=document.getCatalog().getPdfObject();    PdfDictionary acroform=root.getAsDictionary(PdfName.AcroForm);    acroform.remove(PdfName.XFA);    xfaForm=null;  }}  }
class C{  public boolean contains(Object o){  if (!(o instanceof Map.Entry))   return false;  Map.Entry<?,?> e=(Map.Entry<?,?>)o;  return s.contains((e instanceof CheckedEntry) ? e : checkedEntry(e,valueType));}  }
class C{  public PrintWriter(Writer out){  this(out,false);}  }
class C{  private static void startMonitoringAgent(SSOServerInfo svrInfo){  agentSvrInfo=svrInfo;  ssoServerID=svrInfo.serverID;  ssoSiteID=svrInfo.siteID;  ssoProtocol=svrInfo.serverProtocol;  ssoName=svrInfo.serverName;  ssoURI=svrInfo.serverURI;  ssoPort=svrInfo.serverPort;  dsIsEmbedded=svrInfo.isEmbeddedDS;  siteIdTable=svrInfo.siteIDTable;  serverIDTable=svrInfo.serverIDTable;  namingTable=svrInfo.namingTable;  startDate=svrInfo.startDate;  String classMethod="Agent.startMonitoringAgent:";  if (debug.messageEnabled()) {    StringBuilder sb=new StringBuilder("Agent.startMonitoringAgent:ServerInfo:\n");    sb.append("  ServerID = ").append(ssoServerID).append("\n").append("  SiteID = ").append(ssoSiteID).append("\n").append("  ServerProtocol = ").append(ssoProtocol).append("\n").append("  ServerName = ").append(ssoName).append("\n").append("  ServerURI = ").append(ssoURI).append("\n").append("  IsEmbeddedDS = ").append(dsIsEmbedded).append("\n").append("\n");    String svrURL=namingTable.get(ssoServerID);    sb.append("  Naming table entry for serverID ").append(ssoServerID).append(" is ");    if ((svrURL != null) && (svrURL.length() > 0)) {      sb.append(svrURL).append("\n");    } else {      sb.append("NULL!\n");    }    svrURL=namingTable.get(ssoSiteID);    sb.append("  Naming table entry for siteID ").append(ssoSiteID).append(" is ");    if ((svrURL != null) && (svrURL.length() > 0)) {      sb.append(svrURL).append("\n");    } else {      sb.append("NULL!\n");    }    sb.append("    start date/time = ").append(startDate);    debug.message(sb.toString());    sb=new StringBuilder(classMethod);    if ((siteIdTable != null) && !siteIdTable.isEmpty()) {      sb.append("Site ID Table:\n");      for (      Map.Entry<String,String> entry : siteIdTable.entrySet()) {        String siteid=entry.getKey();        String svrid=siteIdTable.get(siteid);        String sURL=namingTable.get(siteid);        sb.append("  ").append(siteid).append('(').append(sURL).append(')').append(" = ").append(svrid).append('\n');      }    } else {      sb.append("siteIdTable is null or empty");    }    debug.message(sb.toString());    sb=new StringBuilder(classMethod);    if ((serverIDTable != null) && !serverIDTable.isEmpty()) {      sb.append("Server ID Table:\n");      for (      Map.Entry<String,String> entry : serverIDTable.entrySet()) {        sb.append("  server ").append(entry.getKey()).append(" ==> svrid ").append(entry.getValue()).append("\n");      }    } else {      sb.append("ServerIdTable is null or empty");    }    debug.message(sb.toString());    sb=new StringBuilder(classMethod);    if ((namingTable != null) && !namingTable.isEmpty()) {      Set ks=namingTable.keySet();      sb.append("Naming Table:\n");      for (Iterator it=ks.iterator(); it.hasNext(); ) {        String svr=(String)it.next();        String svrid=(String)namingTable.get(svr);        sb.append("  key ").append(svr).append(" ==> value ").append(svrid).append("\n");      }    } else {      sb.append("NamingTable is null or empty");    }    debug.message(sb.toString());  }}  }
class C{  public javax.xml.xpath.XPath newXPath(){  return new org.apache.xpath.jaxp.XPathImpl(xPathVariableResolver,xPathFunctionResolver,featureSecureProcessing);}  }
class C{  public void addExtensionNamespace(String uri,ExtensionHandler extNS){  m_extensionFunctionNamespaces.put(uri,extNS);}  }
class C{  public void removeDefaultValue(String value) throws SMSException, SSOException {  Set defaultValues=getDefaultValues();  if (defaultValues != Collections.EMPTY_SET) {    defaultValues.remove(value);    updateDefaultValues(defaultValues);  }}  }
class C{  public void test_setStartRuleIIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,1,Calendar.SUNDAY,0);  st.setEndRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime((new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime())));  assertTrue("StartRule improperly set3",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  try {    st.setStartRule(12,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,10,Calendar.SUNDAY,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,-1,8,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,-10);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  @SuppressWarnings("rawtypes") public static String unqualifiedClassName(Class type){  if (type.isArray()) {    return unqualifiedClassName(type.getComponentType()) + "Array";  }  String name=type.getName();  return name.substring(name.lastIndexOf('.') + 1);}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  mCircleHandler.removeCallbacksAndMessages(null);}  }
class C{  public static void cacheResult(List<Foo> foos){  getPersistence().cacheResult(foos);}  }
class C{  public RedirectException(String msg){  super(msg);}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage image;  int w=src.getWidth();  int h=src.getHeight();  int transferType=DataBuffer.TYPE_BYTE;  if (destCM == null) {    ColorModel cm=src.getColorModel();    Raster raster=src.getRaster();    if (cm instanceof ComponentColorModel) {      DataBuffer db=raster.getDataBuffer();      boolean hasAlpha=cm.hasAlpha();      boolean isPre=cm.isAlphaPremultiplied();      int trans=cm.getTransparency();      int[] nbits=null;      if (ltable instanceof ByteLookupTable) {        if (db.getDataType() == db.TYPE_USHORT) {          if (hasAlpha) {            nbits=new int[2];            if (trans == cm.BITMASK) {              nbits[1]=1;            } else {              nbits[1]=8;            }          } else {            nbits=new int[1];          }          nbits[0]=8;        }      } else       if (ltable instanceof ShortLookupTable) {        transferType=DataBuffer.TYPE_USHORT;        if (db.getDataType() == db.TYPE_BYTE) {          if (hasAlpha) {            nbits=new int[2];            if (trans == cm.BITMASK) {              nbits[1]=1;            } else {              nbits[1]=16;            }          } else {            nbits=new int[1];          }          nbits[0]=16;        }      }      if (nbits != null) {        cm=new ComponentColorModel(cm.getColorSpace(),nbits,hasAlpha,isPre,trans,transferType);      }    }    image=new BufferedImage(cm,cm.createCompatibleWritableRaster(w,h),cm.isAlphaPremultiplied(),null);  } else {    image=new BufferedImage(destCM,destCM.createCompatibleWritableRaster(w,h),destCM.isAlphaPremultiplied(),null);  }  return image;}  }
class C{  public void clear(){  values.clear();}  }
class C{  @Deprecated protected Attr[] sortAttributes(NamedNodeMap attrs){  if (attrs == null) {    return new Attr[0];  }  int len=attrs.getLength();  Attr array[]=new Attr[len];  for (int i=0; i < len; i++) {    array[i]=(Attr)attrs.item(i);  }  for (int i=0; i < len - 1; i++) {    String name=null;    name=array[i].getLocalName();    int index=i;    for (int j=i + 1; j < len; j++) {      String curName=null;      curName=array[j].getLocalName();      if (curName.compareTo(name) < 0) {        name=curName;        index=j;      }    }    if (index != i) {      Attr temp=array[i];      array[i]=array[index];      array[index]=temp;    }  }  return (array);}  }
class C{  public void testManyConnectionsUsingManyThreads(){  int numTasks=getConnectionNum();  ThreadPool threadPool=new ThreadPool(numTasks);  for (int i=0; i < numTasks; i++) {    threadPool.runTask(createTask(i));  }  threadPool.join();  assertEquals("Unable to create a connection",numTasks,vc.size());  if (numTasks != Support_SQL.sqlMaxConnections) {    try {      Connection c=Support_SQL.getConnection();      c.close();      fail("It is possible to create more than " + numTasks + "connections");    } catch (    SQLException sql) {    }  }}  }
class C{  private void uninstallClientDecorations(JRootPane root){  uninstallBorder(root);  uninstallWindowListeners(root);  setTitlePane(root,null);  uninstallLayout(root);  int style=root.getWindowDecorationStyle();  if (style == JRootPane.NONE) {    root.repaint();    root.revalidate();  }  if (window != null) {    window.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }  window=null;}  }
class C{  public static <T>boolean isEmpty(T[] array){  return array == null || array.length == 0;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.BinarySecurityTokenType createBinarySecurityTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.BinarySecurityTokenTypeImpl();}  }
class C{  private void logOutIfPossible(){  try {    openActionBarOverflowOrOptionsMenu(InstrumentationRegistry.getTargetContext());    onView(withText(R.string.log_out)).perform(click());  } catch (  NoMatchingViewException e) {  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS05.class,args);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  EntityReference alphaRef;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("class");  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        alphaRef=doc.createEntityReference("alpha");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    alphaRef=doc.createEntityReference("alpha");    firstChild=titleAttr.getFirstChild();    retval=titleAttr.insertBefore(alphaRef,firstChild);    value=titleAttr.getValue();    assertEquals("attrValue1","\u03b1Y\u03b1",value);  }}  }
class C{  public TagAdapter(SimpleTag adaptee){  if (adaptee == null) {    throw new IllegalArgumentException();  }  this.simpleTagAdaptee=adaptee;}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public boolean postProcessKeyEvent(KeyEvent e){  if (!e.isConsumed()) {    Component target=e.getComponent();    Container p=(Container)(target instanceof Container ? target : target.getParent());    if (p != null) {      p.postProcessKeyEvent(e);    }  }  return true;}  }
class C{  public UnsupportedEncodingException(){  super();}  }
class C{  public void test_doAsPrivileged_01(){  Subject subj=new Subject();  PrivilegedAction<Object> pa=new myPrivilegedAction();  PrivilegedAction<Object> paNull=null;  AccessControlContext acc=AccessController.getContext();  try {    Object obj=Subject.doAsPrivileged(null,pa,acc);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    Object obj=Subject.doAsPrivileged(subj,pa,acc);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    Object obj=Subject.doAsPrivileged(subj,paNull,acc);    fail("NullPointerException wasn't thrown");  } catch (  NullPointerException npe) {  }}  }
class C{  public List<LocalizableMessage> registerBaseDN(DN baseDN,Backend<?> backend,boolean isPrivate) throws DirectoryException {  Backend<?> existingBackend=baseDNs.get(baseDN);  if (existingBackend != null) {    LocalizableMessage message=ERR_REGISTER_BASEDN_ALREADY_EXISTS.get(baseDN,backend.getBackendID(),existingBackend.getBackendID());    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  LinkedList<DN> otherBaseDNs=new LinkedList<>();  for (  DN dn : baseDNs.keySet()) {    Backend<?> b=baseDNs.get(dn);    if (b.equals(backend)) {      otherBaseDNs.add(dn);      if (baseDN.isSuperiorOrEqualTo(dn) || baseDN.isSubordinateOrEqualTo(dn)) {        LocalizableMessage message=ERR_REGISTER_BASEDN_HIERARCHY_CONFLICT.get(baseDN,backend.getBackendID(),dn);        throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);      }    }  }  final Backend<?> superiorBackend=getSuperiorBackend(baseDN,otherBaseDNs,backend.getBackendID());  if (superiorBackend == null && backend.getParentBackend() != null) {    LocalizableMessage message=ERR_REGISTER_BASEDN_NEW_BASE_NOT_SUBORDINATE.get(baseDN,backend.getBackendID(),backend.getParentBackend().getBackendID());    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  LinkedList<Backend<?>> subordinateBackends=new LinkedList<>();  LinkedList<DN> subordinateBaseDNs=new LinkedList<>();  for (  DN dn : baseDNs.keySet()) {    Backend<?> b=baseDNs.get(dn);    DN parentDN=dn.parent();    while (parentDN != null) {      if (parentDN.equals(baseDN)) {        subordinateBaseDNs.add(dn);        subordinateBackends.add(b);        break;      } else       if (baseDNs.containsKey(parentDN)) {        break;      }      parentDN=parentDN.parent();    }  }  final List<LocalizableMessage> errors=new LinkedList<>();  if (superiorBackend != null && superiorBackend.entryExists(baseDN)) {    errors.add(WARN_REGISTER_BASEDN_ENTRIES_IN_MULTIPLE_BACKENDS.get(superiorBackend.getBackendID(),baseDN,backend.getBackendID()));  }  baseDNs.put(baseDN,backend);  if (superiorBackend == null) {    if (!testOnly) {      backend.setPrivateBackend(isPrivate);    }    if (isPrivate) {      privateNamingContexts.put(baseDN,backend);    } else {      publicNamingContexts.put(baseDN,backend);    }  } else   if (otherBaseDNs.isEmpty() && !testOnly) {    backend.setParentBackend(superiorBackend);    superiorBackend.addSubordinateBackend(backend);  }  if (!testOnly) {    for (    Backend<?> b : subordinateBackends) {      Backend<?> oldParentBackend=b.getParentBackend();      if (oldParentBackend != null) {        oldParentBackend.removeSubordinateBackend(b);      }      b.setParentBackend(backend);      backend.addSubordinateBackend(b);    }  }  if (!isPrivate) {    allPublicNamingContexts.put(baseDN,backend);  }  for (  DN dn : subordinateBaseDNs) {    publicNamingContexts.remove(dn);    privateNamingContexts.remove(dn);  }  return errors;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  protected void tearDown() throws Exception {  if (f.exists()) {    f.delete();  }  super.tearDown();}  }
class C{  SSOTokenEventImpl(SessionEvent event){  sessionEvent=event;}  }
class C{  public static final long bytesToLong(byte[] value){  int result=0;  int shift=0;  for (int i=value.length - 1; i >= 0; i--) {    result+=(value[i] & 0xFF) << shift;    shift+=8;  }  return result;}  }
class C{  public void handleBtnRealmRequest(RequestInvocationEvent event){  bRealmSelect=true;  forwardTo();}  }
class C{  static XMPMeta process(XMPMetaImpl xmp,ParseOptions options) throws XMPException {  XMPNode tree=xmp.getRoot();  touchUpDataModel(xmp);  moveExplicitAliases(tree,options);  tweakOldXMP(tree);  deleteEmptySchemas(tree);  return xmp;}  }
class C{  public void testSignumZero(){  BigInteger aNumber=BigInteger.ZERO;  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public static int rebuildSMSIndex() throws Exception {  return rebuildIndex(AMSetupServlet.getBaseDir(),SMSEntry.getRootSuffix());}  }
class C{  public static void main(String[] args){  getInstance().registerHanders("com.jk.annotations");  JKExceptionUtil.handle(new IOException("test exception"));}  }
class C{  public static int realmConfigMonitoringAgent(SSOServerRealmInfo rlmInfo){  String classMethod="Agent.realmConfigMonitoringAgent:";  String realm=rlmInfo.realmName;  Map<String,String> authMods=rlmInfo.authModules;  Integer realmIndex=realm2Index.get(realm);  if (realmIndex == null) {    debug.error(classMethod + "could not find realm " + realm+ " in realm2Index map");    return -1;  }  SsoServerAuthSvcImpl sig=sunMib.getAuthSvcGroup();  TableSsoServerAuthModulesTable atab=null;  if (sig != null) {    try {      atab=sig.accessSsoServerAuthModulesTable();    } catch (    SnmpStatusException ex) {      debug.error(classMethod + "getting auth table: ",ex);      return -2;    }  }  StringBuilder sb=new StringBuilder();  if (debug.messageEnabled()) {    sb.append("receiving config info for realm = ").append(realm).append(":\n  Authentication Modules:\n");  }  int i=1;  for (  Map.Entry<String,String> entry : authMods.entrySet()) {    String modInst=entry.getKey();    String modType=entry.getValue();    if (debug.messageEnabled()) {      sb.append("    instance = ").append(modInst).append(", value(type) = ").append(modType).append("\n");    }    SsoServerAuthModulesEntryImpl aei=new SsoServerAuthModulesEntryImpl(sunMib);    aei.SsoServerRealmIndex=realmIndex;    aei.AuthModuleIndex=new Integer(i++);    aei.AuthModuleName=modInst;    aei.AuthModuleType=getEscapedString(modType);    aei.AuthModuleSuccessCount=0L;    aei.AuthModuleFailureCount=0L;    ObjectName aname=aei.createSsoServerAuthModulesEntryObjectName(server);    if (aname == null) {      debug.error(classMethod + "Error creating object for auth module name '" + modInst+ "', type '"+ modType+ "'");      continue;    }    try {      atab.addEntry(aei,aname);      if ((server != null) && (aei != null)) {        server.registerMBean(aei,aname);      }      String rai=realm + "|" + modInst;      realmAuthInst.put(rai,aei);    } catch (    JMException ex) {      debug.error(classMethod + modInst,ex);    }catch (    SnmpStatusException ex) {      debug.error(classMethod + modInst,ex);    }  }  if (realmAuthInst.isEmpty()) {    return -3;  }  if (debug.messageEnabled()) {    debug.message(classMethod + sb.toString());  }  return 0;}  }
class C{  WJMagicCurveViewParameters(float radiusAX,float radiusAY,float radiusBX,float radiusBY,int speedOuterPoint,int speedInnerPoint,int loopTotalCount,int durationSec){  this.radiusAX=radiusAX;  this.radiusAY=radiusAY;  this.radiusBX=radiusBX;  this.radiusBY=radiusBY;  this.durationSec=durationSec;  this.loopTotalCount=loopTotalCount;  this.speedOuterPoint=speedOuterPoint;  this.speedInnerPoint=speedInnerPoint;}  }
class C{  private RestTokenTransformValidatorParameters<X509Certificate[]> buildX509CertTokenTransformValidatorParameters(Context context) throws TokenMarshalException {  X509Certificate[] certificates;  if (!"".equals(offloadedTlsClientCertKey)) {    String clientIpAddress=ClientUtils.getClientIPAddress(context);    if (!tlsOffloadEngineHosts.contains(clientIpAddress) && !tlsOffloadEngineHosts.contains(ANY_HOST)) {      logger.error("A x509-based token transformation is being rejected because the client cert was to be referenced in " + "the  " + offloadedTlsClientCertKey + " header, but the caller was not in the list of TLS offload engines."+ " The caller: "+ clientIpAddress+ "; The list of TLS offload engine hosts: "+ tlsOffloadEngineHosts);      throw new TokenMarshalException(ResourceException.BAD_REQUEST,"In a x509 Certificate token transformation, " + " the caller was not among the list of IP addresses corresponding to the TLS offload-engine hosts. " + "Insure that your published rest-sts instance is configured with a complete list of TLS offload-engine hosts.");    }    certificates=pullClientCertFromHeader(context.asContext(HttpContext.class));  } else {    certificates=pullClientCertFromRequestAttribute(context.asContext(ClientContext.class));  }  if (!ArrayUtils.isEmpty(certificates)) {    return marshalX509CertIntoTokenValidatorParameters(certificates);  } else {    if ("".equals(offloadedTlsClientCertKey)) {      throw new TokenMarshalException(ResourceException.BAD_REQUEST,"A token transformation specifying an " + "x509 token as input must be consumed via two-way-tls. No header was specified referencing the " + "certificate, and the client's certificate was not found in the "+ "javax.servlet.request.X509Certificate attribute.");    } else {      throw new TokenMarshalException(ResourceException.BAD_REQUEST,"A token transformation specifying an " + "x509 token as input must be consumed via two-way-tls. The " + offloadedTlsClientCertKey + " header was specified in the rest-sts instance configuration as referencing the "+ "certificate, yet no certificate was found referenced by this header value.");    }  }}  }
class C{  private static String unqualify(String path){  path=path.replace('\\','/');  return path.substring(path.lastIndexOf('/') + 1);}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Element element,java.lang.String idAttrName,java.lang.String certAlias) throws XMLSignatureException {  return sp.verifyXMLSignature(element,idAttrName,certAlias);}  }
class C{  public boolean removeElement(Object obj){  int index=indexOf(obj);  boolean rv=delegate.removeElement(obj);  if (index >= 0) {    fireIntervalRemoved(this,index,index);  }  return rv;}  }
class C{  public void message(String msg){  if (debugLevel > Debug.WARNING) {    message(msg,null);  }}  }
class C{  public void navigateToPoint(LatLng latLng,float tilt,float bearing,float zoom,boolean animate){  CameraPosition position=new CameraPosition.Builder().target(latLng).zoom(zoom).bearing(bearing).tilt(tilt).build();  changeCameraPosition(position,animate);}  }
class C{  private static int guessLength(String text){  final int len=text.length();  int j=len - 1;  for (; j >= 0; j--) {    byte code=decodeMap[text.charAt(j)];    if (code == PADDING) {      continue;    }    if (code == -1) {      return text.length() / 4 * 3;    }    break;  }  j++;  int padSize=len - j;  if (padSize > 2) {    return text.length() / 4 * 3;  }  return text.length() / 4 * 3 - padSize;}  }
class C{  public double toDouble(){  int sign;  int exponent;  long mantissa=0;  sign=_rawData[0] >> 7;  exponent=(_rawData[0] << 8) | _rawData[1];  exponent&=0X7FFF;  exponent-=(16383 + 62);  int shifter=55;  for (int i=2; i < 9; i++) {    mantissa|=((long)_rawData[i] & 0XFFL) << shifter;    shifter-=8;  }  mantissa|=_rawData[9] >>> 1;  double val=Math.pow(2,exponent);  val*=mantissa;  if (sign != 0) {    val=-val;  }  return val;}  }
class C{  public static IOFileFilter magicNumberFileFilter(byte[] magicNumber,long offset){  return new MagicNumberFileFilter(magicNumber,offset);}  }
class C{  public static void deregisterSupportedFeature(String featureOID){  DirectoryServer.deregisterSupportedFeature(featureOID);}  }
class C{  public void reset(){  m_flushedStartDoc=false;  m_foundFirstElement=false;  m_outputStream=null;  clearParameters();  m_result=null;  m_resultContentHandler=null;  m_resultDeclHandler=null;  m_resultDTDHandler=null;  m_resultLexicalHandler=null;  m_serializer=null;  m_systemID=null;  m_URIResolver=null;  m_outputFormat=new OutputProperties(Method.XML);}  }
class C{  public static boolean areAllGranted(String authorities) throws IOException {  AuthorizeFaceletsTag authorizeTag=new AuthorizeFaceletsTag();  authorizeTag.setIfAllGranted(authorities);  return authorizeTag.authorize();}  }
class C{  @Override public int hashCode(){  return structuralClassOID.hashCode();}  }
class C{  @Override public void removeInitParameter(String name){  parametersLock.writeLock().lock();  try {    parameters.remove(name);  }  finally {    parametersLock.writeLock().unlock();  }  fireContainerEvent("removeInitParameter",name);}  }
class C{  boolean isReplicationServerCreated(){  return replicationServerCreated;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void testFlipBitNegativeInside4(){  String as="-4294967295";  String res="-4294967296";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.flipBit(number);  assertEquals(res,result.toString());}  }
class C{  public boolean isApplicableMod(AciTargetMatchContext matchCtx,Aci aci){  TargAttrFilterList attrFilterList=getTargAttrFilterList(matchCtx);  if (attrFilterList == null) {    return true;  }  Map<AttributeType,SearchFilter> filterList=attrFilterList.getAttributeTypeFilterList();  boolean attrMatched=true;  AttributeType attrType=matchCtx.getCurrentAttributeType();  if (attrType != null && filterList.containsKey(attrType)) {    ByteString value=matchCtx.getCurrentAttributeValue();    SearchFilter filter=filterList.get(attrType);    attrMatched=matchFilterAttributeValue(attrType,value,filter);    matchCtx.setTargAttrFiltersMatch(true);    if (matchCtx.isGetEffectiveRightsEval()) {      matchCtx.setTargAttrFiltersAciName(aci.getName());      matchCtx.addTargAttrFiltersMatchAci(aci);    }    attrMatched=revertForInequalityOperator(op,attrMatched);  }  return attrMatched;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.QueryResponseType.CredentialsType createQueryResponseTypeCredentialsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.QueryResponseTypeImpl.CredentialsTypeImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Trust10Element createTrust10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Trust10ElementImpl();}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public ServerHelloDone(){}  }
class C{  private void processRequest(ServletRequest request,ServletResponse response,State state) throws IOException, ServletException {  DispatcherType disInt=(DispatcherType)request.getAttribute(Globals.DISPATCHER_TYPE_ATTR);  if (disInt != null) {    boolean doInvoke=true;    if (context.getFireRequestListenersOnForwards() && !context.fireRequestInitEvent(request)) {      doInvoke=false;    }    if (doInvoke) {      if (disInt != DispatcherType.ERROR) {        state.outerRequest.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,getCombinedPath());        state.outerRequest.setAttribute(Globals.DISPATCHER_TYPE_ATTR,DispatcherType.FORWARD);        invoke(state.outerRequest,response,state);      } else {        invoke(state.outerRequest,response,state);      }      if (context.getFireRequestListenersOnForwards()) {        context.fireRequestDestroyEvent(request);      }    }  }}  }
class C{  public void start() throws EmbeddedDirectoryServerException {  if (DirectoryServer.isRunning()) {    throw new EmbeddedDirectoryServerException(ERR_EMBEDUTILS_SERVER_ALREADY_RUNNING.get(configParams.getServerRootDirectory()));  }  try {    DirectoryServer directoryServer=DirectoryServer.reinitialize(createEnvironmentConfig());    directoryServer.startServer();  } catch (  InitializationException|ConfigException e) {    throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_START.get(configParams.getServerRootDirectory(),StaticUtils.stackTraceToSingleLineString(e)));  }}  }
class C{  public String generateDetailedUpgradeReport(SSOToken adminToken,boolean html){  String delimiter=html ? HTML_BR : TXT_LF;  Map<String,String> tags=new HashMap<String,String>();  tags.put(LF,delimiter);  tags.put(CREATED_DATE,createdDate);  tags.put(EXISTING_VERSION,existingVersion);  tags.put(NEW_VERSION,VersionUtils.getWarFileVersion());  StringBuilder report=new StringBuilder(tagSwapReport(tags,"report"));  for (  UpgradeStep upgradeStep : upgradeSteps) {    report.append(upgradeStep.getDetailedReport(delimiter)).append(delimiter);  }  return report.toString();}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZOT,this);}  }
class C{  @Override public void release(){  throw new UnsupportedOperationException("Illegal to invoke release() on TagAdapter wrapper");}  }
class C{  private void handleParentChange(String ct,Map nMap){  Client oClient=(Client)clientTypeMap.get(ct);  if (oClient == null) {    addToClientMap(ct,nMap);    mergedClientData.put(ct,nMap);    return;  }  Set oParents=oClient.getProperties(PARENT_ID);  String oParent=getFirstString(oParents);  String nParentId=getParentID(nMap);  if (!nParentId.equals(oParent)) {    removeFromProfilesMap(ct,oClient);    if ((nMap=mergeWithParent(nMap)) != null) {      addToClientMap(ct,nMap);    }  }  mergedClientData.put(ct,nMap);  return;}  }
class C{  public void invoke(String callbackName,Marshallable callbackParam){  TransactInfo transactInfo=TransactInfo.createCallbackInvoke(mCallbackId,callbackName);  mJsBridge.dispatchServerCallback(transactInfo,callbackParam);}  }
class C{  public static boolean isValidNmtoken(String nmtoken){  if (nmtoken.length() == 0)   return false;  for (int i=0; i < nmtoken.length(); i++) {    char ch=nmtoken.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  public void appendByteChunk(ByteChunk bc){  if (bc == null) {    log.error(sm.getString("ajpmessage.null"),new NullPointerException());    appendInt(0);    appendByte(0);    return;  }  appendBytes(bc.getBytes(),bc.getStart(),bc.getLength());}  }
class C{  BitSieve(BigInteger base,int searchLen){  bits=new long[(unitIndex(searchLen - 1) + 1)];  length=searchLen;  int start=0;  int step=smallSieve.sieveSearch(smallSieve.length,start);  int convertedStep=(step * 2) + 1;  MutableBigInteger b=new MutableBigInteger(base);  MutableBigInteger q=new MutableBigInteger();  do {    start=b.divideOneWord(convertedStep,q);    start=convertedStep - start;    if (start % 2 == 0)     start+=convertedStep;    sieveSingle(searchLen,(start - 1) / 2,convertedStep);    step=smallSieve.sieveSearch(smallSieve.length,step + 1);    convertedStep=(step * 2) + 1;  } while (step > 0);}  }
class C{  public MalformedCookieException(){  super();}  }
class C{  public static Foo findByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public static String objectToInfoString(FSAccountFedInfo fedInfoObject) throws FSAccountMgmtException {  StringBuffer fedInfoSB=new StringBuffer(1000);  fedInfoSB.append(FED_INFO_DELIM);  fedInfoSB.append(fedInfoObject.getProviderID());  NameIdentifier lni=fedInfoObject.getLocalNameIdentifier();  NameIdentifier rni=fedInfoObject.getRemoteNameIdentifier();  if (lni == null && rni == null) {    FSUtils.debug.error("FSAccountUtils.objectToInfoString(): " + "both NameIdentifiers are null");    throw new FSAccountMgmtException(IFSConstants.NULL_NAME_IDENTIFIER,null);  }  if (lni != null) {    fedInfoSB.append(FED_INFO_DELIM);    String name=lni.getName();    if (name != null && name.length() > 0) {      fedInfoSB.append(name);    } else {      FSUtils.debug.error("FSAccountUtils.objectToInfoString(): local Name is null");      throw new FSAccountMgmtException(IFSConstants.NULL_NAME,null);    }    fedInfoSB.append(FED_INFO_DELIM);    String nameQual=lni.getNameQualifier();    if (nameQual != null && nameQual.length() > 0) {      fedInfoSB.append(nameQual);    } else {      fedInfoSB.append("null");    }    fedInfoSB.append(FED_INFO_DELIM);    String nameFormat=lni.getFormat();    if (nameFormat != null && nameFormat.length() > 0) {      fedInfoSB.append(nameFormat);    } else {      fedInfoSB.append("null");    }  } else {    fedInfoSB.append(FED_INFO_DELIM);    fedInfoSB.append("null");    fedInfoSB.append(FED_INFO_DELIM);    fedInfoSB.append("null");    fedInfoSB.append(FED_INFO_DELIM);    fedInfoSB.append("null");  }  if (rni != null) {    fedInfoSB.append(FED_INFO_DELIM);    String name=rni.getName();    if (name != null && name.length() > 0) {      fedInfoSB.append(name);    } else {      FSUtils.debug.error("FSAccountUtils.objectToInfoString(): remote Name is null");      throw new FSAccountMgmtException(IFSConstants.NULL_NAME,null);    }    fedInfoSB.append(FED_INFO_DELIM);    String nameQual=rni.getNameQualifier();    if (nameQual != null && nameQual.length() > 0) {      fedInfoSB.append(nameQual);    } else {      fedInfoSB.append("null");    }    fedInfoSB.append(FED_INFO_DELIM);    String nameFormat=rni.getFormat();    if (nameFormat != null && nameFormat.length() > 0) {      fedInfoSB.append(nameFormat);    } else {      fedInfoSB.append("null");    }  } else {    fedInfoSB.append(FED_INFO_DELIM).append("null").append(FED_INFO_DELIM).append("null").append(FED_INFO_DELIM).append("null");  }  fedInfoSB.append(FED_INFO_DELIM);  if (fedInfoObject.isRoleIDP()) {    fedInfoSB.append("IDPRole");  } else {    fedInfoSB.append("SPRole");  }  fedInfoSB.append(FED_INFO_DELIM);  if (fedInfoObject.isFedStatusActive()) {    fedInfoSB.append("Active");  } else {    fedInfoSB.append("InActive");  }  fedInfoSB.append(FED_INFO_DELIM);  if (fedInfoObject.getAffiliation()) {    fedInfoSB.append(IFSConstants.AFFILIATED);    fedInfoSB.append(FED_INFO_DELIM);  }  return fedInfoSB.toString();}  }
class C{  @Override public void run(){  while (!shutdownRequested) {    LDAPClientConnection readyConnection=null;    while ((readyConnection=readyConnections.poll()) != null) {      try {        ASN1Reader asn1Reader=readyConnection.getASN1Reader();        boolean ldapMessageProcessed=false;        while (true) {          if (asn1Reader.elementAvailable()) {            if (!ldapMessageProcessed) {              if (readyConnection.processLDAPMessage(LDAPReader.readMessage(asn1Reader))) {                ldapMessageProcessed=true;              } else {                break;              }            } else {              readyConnections.add(readyConnection);              break;            }          } else {            if (readyConnection.processDataRead() <= 0) {              break;            }          }        }      } catch (      DecodeException|LDAPException e) {        logger.traceException(e);        readyConnection.disconnect(DisconnectReason.PROTOCOL_ERROR,true,e.getMessageObject());      }catch (      Exception e) {        logger.traceException(e);        readyConnection.disconnect(DisconnectReason.PROTOCOL_ERROR,true,LocalizableMessage.raw(e.toString()));      }    }    List<LDAPClientConnection> tmp=null;synchronized (pendingConnectionsLock) {      if (!pendingConnections.isEmpty()) {        tmp=pendingConnections;        pendingConnections=new LinkedList<>();      }    }    if (tmp != null) {      for (      LDAPClientConnection c : tmp) {        try {          SocketChannel socketChannel=c.getSocketChannel();          socketChannel.configureBlocking(false);          socketChannel.register(selector,SelectionKey.OP_READ,c);          logConnect(c);        } catch (        Exception e) {          logger.traceException(e);          c.disconnect(DisconnectReason.SERVER_ERROR,true,ERR_LDAP_REQHANDLER_CANNOT_REGISTER.get(handlerName,e));        }      }    }    keys=selector.keys().toArray(new SelectionKey[0]);    int selectedKeys=0;    try {      selectedKeys=selector.select(1000);    } catch (    Exception e) {      logger.traceException(e);    }    if (shutdownRequested) {      break;    }    if (selectedKeys > 0) {      Iterator<SelectionKey> iterator=selector.selectedKeys().iterator();      while (iterator.hasNext()) {        SelectionKey key=iterator.next();        try {          if (key.isReadable()) {            LDAPClientConnection clientConnection=null;            try {              clientConnection=(LDAPClientConnection)key.attachment();              int readResult=clientConnection.processDataRead();              if (readResult < 0) {                key.cancel();              }              if (readResult > 0) {                readyConnections.add(clientConnection);              }            } catch (            Exception e) {              logger.traceException(e);              key.cancel();              if (clientConnection != null) {                clientConnection.disconnect(DisconnectReason.SERVER_ERROR,false,ERR_UNEXPECTED_EXCEPTION_ON_CLIENT_CONNECTION.get(getExceptionMessage(e)));              }            }          } else           if (!key.isValid()) {            key.cancel();          }        } catch (        CancelledKeyException cke) {          logger.traceException(cke);        }catch (        Exception e) {          logger.traceException(e);          logger.error(ERR_LDAP_REQHANDLER_UNEXPECTED_SELECT_EXCEPTION,getName(),getExceptionMessage(e));        } finally {          if (!key.isValid()) {            key.attach(null);          }          iterator.remove();        }      }    }  }  SelectionKey[] keyArray=selector.keys().toArray(new SelectionKey[0]);  for (  SelectionKey key : keyArray) {    LDAPClientConnection c=(LDAPClientConnection)key.attachment();    try {      key.channel().close();    } catch (    Exception e) {      logger.traceException(e);    }    try {      key.cancel();    } catch (    Exception e) {      logger.traceException(e);    }    try {      c.disconnect(DisconnectReason.SERVER_SHUTDOWN,true,ERR_LDAP_REQHANDLER_DEREGISTER_DUE_TO_SHUTDOWN.get());    } catch (    Exception e) {      logger.traceException(e);    }  }synchronized (pendingConnectionsLock) {    for (    LDAPClientConnection c : pendingConnections) {      try {        c.disconnect(DisconnectReason.SERVER_SHUTDOWN,true,ERR_LDAP_REQHANDLER_DEREGISTER_DUE_TO_SHUTDOWN.get());      } catch (      Exception e) {        logger.traceException(e);      }    }  }}  }
class C{  float measure(int offset,boolean trailing,FontMetricsInt fmi){  int target=trailing ? offset - 1 : offset;  if (target < 0) {    return 0;  }  float h=0;  if (!mHasTabs) {    if (mDirections == Layout.DIRS_ALL_LEFT_TO_RIGHT) {      return measureRun(0,offset,mLen,false,fmi);    }    if (mDirections == Layout.DIRS_ALL_RIGHT_TO_LEFT) {      return measureRun(0,offset,mLen,true,fmi);    }  }  char[] chars=mChars;  int[] runs=mDirections.mDirections;  for (int i=0; i < runs.length; i+=2) {    int runStart=runs[i];    int runLimit=runStart + (runs[i + 1] & Layout.RUN_LENGTH_MASK);    if (runLimit > mLen) {      runLimit=mLen;    }    boolean runIsRtl=(runs[i + 1] & Layout.RUN_RTL_FLAG) != 0;    int segstart=runStart;    for (int j=mHasTabs ? runStart : runLimit; j <= runLimit; j++) {      int codept=0;      Bitmap bm=null;      if (mHasTabs && j < runLimit) {        codept=chars[j];        if (codept >= 0xd800 && codept < 0xdc00 && j + 1 < runLimit) {          codept=Character.codePointAt(chars,j);          if (codept > 0xffff) {            ++j;            continue;          }        }      }      if (j == runLimit || codept == '\t' || bm != null) {        boolean inSegment=target >= segstart && target < j;        boolean advance=(mDir == Layout.DIR_RIGHT_TO_LEFT) == runIsRtl;        if (inSegment && advance) {          return h+=measureRun(segstart,offset,j,runIsRtl,fmi);        }        float w=measureRun(segstart,j,j,runIsRtl,fmi);        h+=advance ? w : -w;        if (inSegment) {          return h+=measureRun(segstart,offset,j,runIsRtl,null);        }        if (codept == '\t') {          if (offset == j) {            return h;          }          h=mDir * nextTab(h * mDir);          if (target == j) {            return h;          }        }        if (bm != null) {          float bmAscent=ascent(j);          float wid=bm.getWidth() * -bmAscent / bm.getHeight();          h+=mDir * wid;          j++;        }        segstart=j + 1;      }    }  }  return h;}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start >> 5;  int lastInt=end >> 5;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public void test_initWithSecureRandom() throws Exception {  Cipher cipher=Cipher.getInstance(ALGORITHM_3DES + "/ECB/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,new SecureRandom());  cipher=Cipher.getInstance("DES/CBC/NoPadding");  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,new SecureRandom());    fail();  } catch (  InvalidKeyException expected) {  }}  }
class C{  public boolean containsValue(byte[] val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSData.class)) {      NSData dat=(NSData)o;      if (Arrays.equals(dat.bytes(),val))       return true;    }  }  return false;}  }
class C{  protected Source processSource(StylesheetHandler handler,Source source){  return source;}  }
class C{  public NameSpace(String prefix,String uri){  m_prefix=prefix;  m_uri=uri;}  }
class C{  public boolean handleError(DOMError error){  errors.add(new DOMErrorImpl(error));  return true;}  }
class C{  public void put(DN userDN,ClientConnection clientConnection){  lock.writeLock().lock();  try {    CopyOnWriteArraySet<ClientConnection> connectionSet=userMap.get(userDN);    if (connectionSet == null) {      connectionSet=new CopyOnWriteArraySet<>();      connectionSet.add(clientConnection);      userMap.put(userDN,connectionSet);    } else {      connectionSet.add(clientConnection);    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @Override public boolean isIdentity(){  return (eSubject != null) ? eSubject.isIdentity() : false;}  }
class C{  protected final void _decodeNonStringName(int ch) throws IOException {  final int type=((ch >> 5) & 0x7);  String name;  if (type == CBORConstants.MAJOR_TYPE_INT_POS) {    name=_numberToName(ch,false);  } else   if (type == CBORConstants.MAJOR_TYPE_INT_NEG) {    name=_numberToName(ch,true);  } else   if (type == CBORConstants.MAJOR_TYPE_BYTES) {    final int blen=_decodeExplicitLength(ch & 0x1F);    byte[] b=_finishBytes(blen);    name=new String(b,UTF8);  } else {    if ((ch & 0xFF) == CBORConstants.INT_BREAK) {      _reportUnexpectedBreak();    }    throw _constructError("Unsupported major type (" + type + ") for CBOR Objects, not (yet?) supported, only Strings");  }  _parsingContext.setCurrentName(name);}  }
class C{  public boolean hasResources(){  return (discoData != null) && !discoData.isEmpty();}  }
class C{  public String nextNamedValueIdentifier() throws GSERException {  if (!hasNext(GSER_IDENTIFIER)) {    LocalizableMessage msg=ERR_GSER_NO_VALID_IDENTIFIER.get(gserValue.substring(pos,length));    throw new GSERException(msg);  }  String identifier=next(GSER_IDENTIFIER);  if (!hasNext(GSER_MSP)) {    LocalizableMessage msg=ERR_GSER_SPACE_CHAR_EXPECTED.get(gserValue.substring(pos,length));    throw new GSERException(msg);  }  skipMSP();  return identifier;}  }
class C{  public static UIComponent createForm(){  return JSFComponentFactory.createComponent(UIForm.COMPONENT_TYPE);}  }
class C{  public static void separateArrayItems(XMPMeta xmp,String schemaNS,String arrayName,String catedStr,PropertyOptions arrayOptions,boolean preserveCommas) throws XMPException {  XMPUtilsImpl.separateArrayItems(xmp,schemaNS,arrayName,catedStr,arrayOptions,preserveCommas);}  }
class C{  public static EnumEvalResult evalURL(AciEvalContext evalCtx,LDAPURL url){  return evalURL0(evalCtx,url) ? EnumEvalResult.TRUE : EnumEvalResult.FALSE;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignaturePropertyType createSignaturePropertyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignaturePropertyTypeImpl();}  }
class C{  private Utils(){}  }
class C{  public Object removeRow(final int row){  final Object removed=this.dataVector.remove(row);  fireTableRowsDeleted(row,row);  return removed;}  }
class C{  public IsPresentCondition(String propertyName){  Reject.ifNull(propertyName);  this.propertyName=propertyName;}  }
class C{  public AMSearchResults searchAssignableDynamicGroups(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchAssignableDynamicGroups(wildcard,null,searchControl);}  }
class C{  BaseRole(java.security.Principal p,String guid) throws UMSException {  super();}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  private String stripLiteralChars(String string){  StringBuilder sb=null;  int last=0;  for (int counter=0, max=string.length(); counter < max; counter++) {    if (isLiteral(counter)) {      if (sb == null) {        sb=new StringBuilder();        if (counter > 0) {          sb.append(string.substring(0,counter));        }        last=counter + 1;      } else       if (last != counter) {        sb.append(string.substring(last,counter));      }      last=counter + 1;    }  }  if (sb == null) {    return string;  } else   if (last != string.length()) {    if (sb == null) {      return string.substring(last);    }    sb.append(string.substring(last));  }  return sb.toString();}  }
class C{  public DeferredFileOutputStream(int threshold,File outputFile){  this(threshold,outputFile,null,null,null);}  }
class C{  public LDAPPostReadRequestControl(boolean isCritical,Set<String> rawAttributes){  super(OID_LDAP_READENTRY_POSTREAD,isCritical);  if (rawAttributes == null) {    this.rawAttributes=new LinkedHashSet<>(0);  } else {    this.rawAttributes=rawAttributes;  }  requestedAttributes=null;}  }
class C{  public boolean notEquals(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.notEquals(this);  return !equals(obj2);}  }
class C{  static final int nextSecondarySeed(){  int r;  Thread t=Thread.currentThread();  if ((r=UNSAFE.getInt(t,SECONDARY)) != 0) {    r^=r << 13;    r^=r >>> 17;    r^=r << 5;  } else   if ((r=java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)   r=1;  UNSAFE.putInt(t,SECONDARY,r);  return r;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreatepi.class,args);}  }
class C{  public static int ldifModifyMain(String[] args,boolean serverInitialized,OutputStream outStream,OutputStream errStream){  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  BooleanArgument showUsage;  StringArgument changesFile;  StringArgument configFile;  StringArgument sourceFile;  StringArgument targetFile;  LocalizableMessage toolDescription=INFO_LDIFMODIFY_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_LDIFMODIFY.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    configFile=StringArgument.builder("configFile").shortIdentifier('c').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().required().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    sourceFile=StringArgument.builder("sourceLDIF").shortIdentifier('s').description(INFO_LDIFMODIFY_DESCRIPTION_SOURCE.get()).required().valuePlaceholder(INFO_LDIFFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    changesFile=StringArgument.builder("changesLDIF").shortIdentifier('m').description(INFO_LDIFMODIFY_DESCRIPTION_CHANGES.get()).required().valuePlaceholder(INFO_LDIFFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    targetFile=StringArgument.builder("targetLDIF").shortIdentifier('t').description(INFO_LDIFMODIFY_DESCRIPTION_TARGET.get()).required().valuePlaceholder(INFO_LDIFFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return 1;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  try {    BuildVersion.checkVersionMismatch();  } catch (  InitializationException e) {    printWrappedText(err,e.getMessage());    return 1;  }  if (!serverInitialized) {    DirectoryServer directoryServer=DirectoryServer.getInstance();    DirectoryServer.bootstrapClient();    boolean checkSchema=configFile.isPresent();    if (checkSchema) {      try {        DirectoryServer.initializeJMX();      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFMODIFY_CANNOT_INITIALIZE_JMX.get(configFile.getValue(),e.getMessage()));        return 1;      }      try {        directoryServer.initializeConfiguration(configFile.getValue());      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFMODIFY_CANNOT_INITIALIZE_CONFIG.get(configFile.getValue(),e.getMessage()));        return 1;      }      try {        directoryServer.initializeSchema();      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFMODIFY_CANNOT_INITIALIZE_SCHEMA.get(configFile.getValue(),e.getMessage()));        return 1;      }    }  }  File source=new File(sourceFile.getValue());  if (!source.exists()) {    printWrappedText(err,ERR_LDIFMODIFY_SOURCE_DOES_NOT_EXIST.get(sourceFile.getValue()));    return CLIENT_SIDE_PARAM_ERROR;  }  LDIFImportConfig importConfig=new LDIFImportConfig(sourceFile.getValue());  LDIFReader sourceReader;  try {    sourceReader=new LDIFReader(importConfig);  } catch (  IOException ioe) {    printWrappedText(err,ERR_LDIFMODIFY_CANNOT_OPEN_SOURCE.get(sourceFile.getValue(),ioe));    return CLIENT_SIDE_LOCAL_ERROR;  }  File changes=new File(changesFile.getValue());  if (!changes.exists()) {    printWrappedText(err,ERR_LDIFMODIFY_CHANGES_DOES_NOT_EXIST.get(changesFile.getValue()));    return CLIENT_SIDE_PARAM_ERROR;  }  importConfig=new LDIFImportConfig(changesFile.getValue());  LDIFReader changeReader;  try {    changeReader=new LDIFReader(importConfig);  } catch (  IOException ioe) {    printWrappedText(err,ERR_LDIFMODIFY_CANNOT_OPEN_CHANGES.get(sourceFile.getValue(),ioe.getMessage()));    return CLIENT_SIDE_LOCAL_ERROR;  }  LDIFExportConfig exportConfig=new LDIFExportConfig(targetFile.getValue(),ExistingFileBehavior.OVERWRITE);  LDIFWriter targetWriter;  try {    targetWriter=new LDIFWriter(exportConfig);  } catch (  IOException ioe) {    printWrappedText(err,ERR_LDIFMODIFY_CANNOT_OPEN_TARGET.get(sourceFile.getValue(),ioe.getMessage()));    return CLIENT_SIDE_LOCAL_ERROR;  }  LinkedList<LocalizableMessage> errorList=new LinkedList<>();  boolean successful;  try {    successful=modifyLDIF(sourceReader,changeReader,targetWriter,errorList);  } catch (  Exception e) {    err.println(ERR_LDIFMODIFY_ERROR_PROCESSING_LDIF.get(e));    successful=false;  }  close(sourceReader,changeReader,targetWriter);  for (  LocalizableMessage s : errorList) {    err.println(s);  }  return successful ? 0 : 1;}  }
class C{  public static String encodeJavaMIMEType(String mimeType){  return (mimeType != null) ? JavaMIME + mimeType : null;}  }
class C{  boolean shouldUpdateSelectedStateFromAction(){  return false;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request,null,null);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    TlsTest.fail("Unexpected exception");  }}  }
class C{  boolean implementsAlg(String serv,String alg,String attribute,String val){  String servAlg=serv + "." + alg;  String prop=getPropertyIgnoreCase(servAlg);  if (prop == null) {    alg=getPropertyIgnoreCase("Alg.Alias." + servAlg);    if (alg != null) {      servAlg=serv + "." + alg;      prop=getPropertyIgnoreCase(servAlg);    }  }  if (prop != null) {    if (attribute == null) {      return true;    }    return checkAttribute(servAlg,attribute,val);  }  return false;}  }
class C{  private void assertQualifierNotExisting(String qualifierName) throws XMPException {  if (!XMPConst.ARRAY_ITEM_NAME.equals(qualifierName) && findQualifierByName(qualifierName) != null) {    throw new XMPException("Duplicate '" + qualifierName + "' qualifier",XMPError.BADXMP);  }}  }
class C{  public void write(OutputStream out) throws IOException {  DataOutputStream dos=new DataOutputStream(out);  attr.writeMain(dos);  Iterator<Map.Entry<String,Attributes>> it=entries.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,Attributes> e=it.next();    StringBuffer buffer=new StringBuffer("Name: ");    String value=e.getKey();    if (value != null) {      byte[] vb=value.getBytes("UTF8");      value=new String(vb,0,0,vb.length);    }    buffer.append(value);    buffer.append("\r\n");    make72Safe(buffer);    dos.writeBytes(buffer.toString());    e.getValue().write(dos);  }  dos.flush();}  }
class C{  public AdjustmentEvent(Adjustable source,int id,int type,int value,boolean isAdjusting){  super(source,id);  adjustable=source;  this.adjustmentType=type;  this.value=value;  this.isAdjusting=isAdjusting;}  }
class C{  public static String capitalize(String name){  if (name == null || name.length() == 0) {    return name;  }  return name.substring(0,1).toUpperCase(ENGLISH) + name.substring(1);}  }
class C{  @Override public Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,true);    array[1]=foo;    array[2]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public static boolean isJSF22(){  final String version=FacesContext.class.getPackage().getImplementationVersion();  if (version != null) {    return version.startsWith("2.2");  } else {    try {      Class.forName("javax.faces.flow.Flow");      return true;    } catch (    final ClassNotFoundException ex) {      return false;    }  }}  }
class C{  private void initializeGlobalArguments() throws ArgumentException {  if (!globalArgumentsInitialized) {    verboseArgument=verboseArgument();    quietArgument=quietArgument();    scriptFriendlyArgument=scriptFriendlyArgument();    noPromptArgument=noPromptArgument();    advancedModeArgument=advancedModeArgument();    showUsageArgument=showUsageArgument();    batchArgument=BooleanArgument.builder(OPTION_LONG_BATCH).description(INFO_DESCRIPTION_BATCH.get()).buildArgument();    batchFileArgument=StringArgument.builder(OPTION_LONG_BATCH_FILE_PATH).shortIdentifier(OPTION_SHORT_BATCH_FILE_PATH).description(INFO_DESCRIPTION_BATCH_FILE_PATH.get()).valuePlaceholder(INFO_BATCH_FILE_PATH_PLACEHOLDER.get()).buildArgument();    displayEquivalentArgument=BooleanArgument.builder(OPTION_LONG_DISPLAY_EQUIVALENT).description(INFO_DSCFG_DESCRIPTION_DISPLAY_EQUIVALENT.get()).buildArgument();    equivalentCommandFileArgument=StringArgument.builder(OPTION_LONG_EQUIVALENT_COMMAND_FILE_PATH).description(INFO_DSCFG_DESCRIPTION_EQUIVALENT_COMMAND_FILE_PATH.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildArgument();    propertiesFileArgument=StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildArgument();    noPropertiesFileArgument=BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildArgument();    ArgumentGroup toolOptionsGroup=new ArgumentGroup(INFO_DSCFG_DESCRIPTION_OPTIONS_ARGS.get(),2);    parser.addGlobalArgument(advancedModeArgument,toolOptionsGroup);    parser.addGlobalArgument(showUsageArgument);    parser.setUsageArgument(showUsageArgument,getOutputStream());    parser.addGlobalArgument(verboseArgument);    parser.addGlobalArgument(quietArgument);    parser.addGlobalArgument(scriptFriendlyArgument);    parser.addGlobalArgument(noPromptArgument);    parser.addGlobalArgument(batchArgument);    parser.addGlobalArgument(batchFileArgument);    parser.addGlobalArgument(displayEquivalentArgument);    parser.addGlobalArgument(equivalentCommandFileArgument);    parser.addGlobalArgument(propertiesFileArgument);    parser.setFilePropertiesArgument(propertiesFileArgument);    parser.addGlobalArgument(noPropertiesFileArgument);    parser.setNoPropertiesFileArgument(noPropertiesFileArgument);    globalArgumentsInitialized=true;  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  PolicyModel model=(PolicyModel)getModel();  String conditionType=(String)propertySheetModel.getValue(ATTR_CONDITION_TYPE);  setPageSessionAttribute(ConditionOpViewBeanBase.CALLING_VIEW_BEAN,(String)getPageSessionAttribute(CALLING_VIEW_BEAN));  String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  String viewBeanURL=model.getConditionViewBeanURL(realmName,conditionType);  unlockPageTrailForSwapping();  if ((viewBeanURL != null) && (viewBeanURL.trim().length() > 0)) {    forwardToURL(viewBeanURL,conditionType,realmName);  } else {    forwardToViewBean(model,conditionType,realmName);  }}  }
class C{  public static GetEffectiveRightsRequestControl newControl(final boolean isCritical,final DN authorizationName,final Collection<AttributeType> attributes){  Reject.ifNull(attributes);  final Collection<AttributeType> copyOfAttributes=Collections.unmodifiableList(new ArrayList<AttributeType>(attributes));  return new GetEffectiveRightsRequestControl(isCritical,authorizationName,copyOfAttributes);}  }
class C{  public void remove(){  if (logger.isTraceEnabled()) {    logger.trace("RS " + getMonitorInstanceName() + " starts removing");  }  shutdown();}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mScroller.startScroll(startX,startY,dx,dy,duration);}  }
class C{  void writeComment(String string) throws IOException {  write("<!--");  if (string != null) {    write(string);  }  write("-->");  writeLineSeparator();  indentSmart();}  }
class C{  @Nullable @Override public ActionMode onWindowStartingSupportActionMode(@NonNull final ActionMode.Callback callback){  return delegate.onWindowStartingSupportActionMode(callback);}  }
class C{  public final void fatal(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {    log(SimpleLog.LOG_LEVEL_FATAL,message,t);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(ownerElement02.class,args);}  }
class C{  public FrameBodyTDAT(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS03.class,args);}  }
class C{  public int removeClient(SSOToken token,String clientType) throws AMClientCapException {  if (isInternalInstance()) {    throw new AMClientCapException(BUNDLE_NAME,CANNOT_MOD_INT_DB,null);  }  try {    AMStoreConnection localConn=new AMStoreConnection(token);    String dn=generateClientDN(clientType);    AMEntity amEntity=localConn.getEntity(dn);    amEntity.delete();  } catch (  Exception e) {    String[] errArgs={clientType};    AMClientCapException ace=new AMClientCapException(BUNDLE_NAME,DELETE_FAILED,errArgs);    String msg=ace.getMessage();    debug.error(dbStr + msg,e);    throw ace;  }  return 0;}  }
class C{  public boolean hasChildNodes(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  protected List<String> readLines(final Path path) throws IOException {  if (!Files.exists(path)) {    throw new IOException("The file at \"" + path.toString() + "\" does not exist.");  }  try {    return Files.readAllLines(path);  } catch (  final IOException e) {    final FileReader fileReader=new FileReader(path.toFile());    final BufferedReader bufferedReader=new BufferedReader(fileReader);    final List<String> readLines=new ArrayList<>();    String currentLine;    while ((currentLine=bufferedReader.readLine()) != null) {      if (!currentLine.isEmpty()) {        readLines.add(currentLine);      }    }    bufferedReader.close();    fileReader.close();    return readLines;  }}  }
class C{  @Override public int compareTo(MessageRefEntry mre){  if (this.ordinal != null && mre.ordinal != null) {    return this.ordinal.compareTo(mre.ordinal);  }  return 0;}  }
class C{  private void sendEvent(Measurement measurement) throws IOException {  final EventDSL event=riemannClient.event();  event.service(measurement.name());  event.state("ok");  event.metric(measurement.value());  event.time(measurement.time());  event.ttl(30);  for (  Map.Entry<String,String> tag : measurement.tags().entrySet()) {    event.tag(tag.getKey());    event.attribute(tag.getKey(),tag.getValue());  }  for (  Map.Entry<String,String> field : measurement.fields().entrySet()) {    event.attribute(field.getKey(),field.getValue());  }  riemannClient.sendEvent(event.build());}  }
class C{  void clear(){  children.clear();}  }
class C{  public void testBitCountPos(){  BigInteger aNumber=new BigInteger("12378634756343564757582937873487638746283767238657872368748726875");  assertEquals(107,aNumber.bitCount());}  }
class C{  public CharsetMapper(){  this(DEFAULT_RESOURCE);}  }
class C{  private void repaintIfBackgroundsDiffer(JComponent comp){  ComponentUI ui=(ComponentUI)comp.getClientProperty(SwingUtilities2.COMPONENT_UI_PROPERTY_KEY);  if (ui instanceof SynthUI) {    SynthUI synthUI=(SynthUI)ui;    SynthContext context=synthUI.getContext(comp);    SynthStyle style=context.getStyle();    int state=context.getComponentState();    Color currBG=style.getColor(context,ColorType.BACKGROUND);    state^=SynthConstants.FOCUSED;    context.setComponentState(state);    Color lastBG=style.getColor(context,ColorType.BACKGROUND);    state^=SynthConstants.FOCUSED;    context.setComponentState(state);    if (currBG != null && !currBG.equals(lastBG)) {      comp.repaint();    }    context.dispose();  }}  }
class C{  public static String expandVariables(final String s,final boolean recursive){  final Matcher variableMatcher=VARIABLE_PATTERN.matcher(s);  StringBuffer expanded=null;  String variable=null;  try {    while (variableMatcher.find()) {      final int matches=variableMatcher.groupCount();      for (int i=1; i <= matches; i++) {        variable=variableMatcher.group(i);        if (expanded == null) {          expanded=new StringBuffer();        }        final String variableValue=getVariable(variable);        variableMatcher.appendReplacement(expanded,(recursive ? expandVariables(variableValue,true) : variableValue).replace("\\","\\\\"));      }    }    if (expanded != null) {      variableMatcher.appendTail(expanded);    }  } catch (  Throwable t) {    logger.log(Level.WARNING,String.format("Unable to expand the variable '%s', returning original value: %s",variable,s),t);    return s;  }  if (expanded != null) {    return expanded.toString();  }  return s;}  }
class C{  public void registerCallbackHandler(SMSObjectListener changeListener) throws SMSException {  LDAPEventManager.addObjectChangeListener(changeListener);}  }
class C{  private JsonValue removeMemberFromGroupViaUpdate(String groupId,String userId) throws Exception {  System.out.println("1. Remove member from a group with update: (get, then update with modified members list)");  JsonValue group=getGroupById(groupId);  List<Map> members=group.get("Members").asList(Map.class);  List<Map> updatedMembers=new ArrayList<>(members);  for (  Map member : members) {    if (member.get("ObjectId").toString().equals(userId)) {      updatedMembers.remove(member);    }  }  group.put("Members",updatedMembers);  return updateGroup(groupId,group);}  }
class C{  public DatagramSocket() throws SocketException {  this(0);}  }
class C{  public static PollingWaitCallbackBuilder makeCallback(){  return new PollingWaitCallbackBuilder();}  }
class C{  public BasicAttribute(String id,Object value,boolean ordered){  this(id,ordered);  values.addElement(value);}  }
class C{  public SOAPClientException(String className,String exceptionMessage){  super(exceptionMessage);  this.className=className;  message=exceptionMessage;}  }
class C{  protected void uninstallKeyboardActions(){  SwingUtilities.replaceUIInputMap(header,JComponent.WHEN_FOCUSED,null);  SwingUtilities.replaceUIActionMap(header,null);}  }
class C{  public static Long convertObjectToBucketingToken(Object toBeConverted,FieldDataType dataType){  if (dataType == null) {    throw new IllegalArgumentException("Data type must not be null.");  }  if (toBeConverted == null) {    return null;  }  if (dataType.equals(FieldDataType.BINARY)) {    return convertBinaryBase64ToLong((String)toBeConverted);  } else   if (dataType.equals(FieldDataType.BOOLEAN)) {    Boolean temp=(Boolean)toBeConverted;    if (temp) {      return 1L;    } else {      return 0L;    }  } else   if (dataType.equals(FieldDataType.DATE_TIME)) {    return convertDateToBucketingLong((Date)toBeConverted);  } else   if (dataType.equals(FieldDataType.TIMEPOINT)) {    return convertTimepointToBucketingLong((Date)toBeConverted);  } else   if (dataType.equals(FieldDataType.LONG)) {    return (Long)toBeConverted;  } else   if (dataType.equals(FieldDataType.DOUBLE)) {    return convertDoubleToLong((Double)toBeConverted);  } else   if (dataType.equals(FieldDataType.INTEGER)) {    return convertIntegerToBucketingLong((Integer)toBeConverted);  } else   if (dataType.equals(FieldDataType.TEXT)) {    return convertStringToBuckectingLong((String)toBeConverted);  } else   if (dataType.equals(FieldDataType.UUID)) {    return convertUuidToLong((UUID)toBeConverted);  } else {    throw new UnsupportedOperationException(dataType + "  is not a valid data type.");  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("GenericPrincipal[");  sb.append(this.name);  sb.append("(");  for (int i=0; i < roles.length; i++) {    sb.append(roles[i]).append(",");  }  sb.append(")]");  return sb.toString();}  }
class C{  private static boolean isServerOverloadingRS(int localServerId,ReplicationServerInfo currentRsInfo,int overloadingDSsNumber){  List<Integer> serversConnectedToCurrentRS=new ArrayList<>(currentRsInfo.getConnectedDSs());  Collections.sort(serversConnectedToCurrentRS);  final int idx=serversConnectedToCurrentRS.indexOf(localServerId);  return idx != -1 && idx < overloadingDSsNumber;}  }
class C{  private void addEntryAttributesForCL(UpdateMsg msg,PostOperationOperation op){  if (op instanceof PostOperationDeleteOperation) {    PostOperationDeleteOperation delOp=(PostOperationDeleteOperation)op;    final Set<String> names=getEclIncludesForDeletes();    Entry entry=delOp.getEntryToDelete();    final DeleteMsg deleteMsg=(DeleteMsg)msg;    deleteMsg.setEclIncludes(getIncludedAttributes(entry,names));    DN deleterDN=delOp.getAuthorizationDN();    if (deleterDN != null) {      deleteMsg.setInitiatorsName(deleterDN.toString());    }  } else   if (op instanceof PostOperationModifyOperation) {    PostOperationModifyOperation modOp=(PostOperationModifyOperation)op;    Set<String> names=getEclIncludes();    Entry entry=modOp.getCurrentEntry();    ((ModifyMsg)msg).setEclIncludes(getIncludedAttributes(entry,names));  } else   if (op instanceof PostOperationModifyDNOperation) {    PostOperationModifyDNOperation modDNOp=(PostOperationModifyDNOperation)op;    Set<String> names=getEclIncludes();    Entry entry=modDNOp.getOriginalEntry();    ((ModifyDNMsg)msg).setEclIncludes(getIncludedAttributes(entry,names));  } else   if (op instanceof PostOperationAddOperation) {    PostOperationAddOperation addOp=(PostOperationAddOperation)op;    Set<String> names=getEclIncludes();    Entry entry=addOp.getEntryToAdd();    ((AddMsg)msg).setEclIncludes(getIncludedAttributes(entry,names));  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public DynamicGroup(){  super();}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  String prefix="";  String uriLIB="";  String uriSAML="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uriLIB=IFSConstants.LIB_12_NAMESPACE_STRING;    uriSAML=IFSConstants.assertionDeclareStr;  }  String instantString=null;  try {    instantString=DateUtils.toUTCDateFormat(issueInstant);  } catch (  Exception e) {    FSUtils.debug.error("FSNameIdentifierMappingRequest.toXMLString: " + "could not convert issueInstant to String.",e);  }  StringBuffer xml=new StringBuffer(1000);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(IFSConstants.DEFAULT_ENCODING).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.NAMEID_MAPPING_REQUEST).append(uriLIB).append(uriSAML).append(IFSConstants.SPACE).append(IFSConstants.REQUEST_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(requestID).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(majorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(instantString).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.RIGHT_ANGLE);  if (signed) {    if (signatureString != null) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE).append(providerID).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE);  if (nameIdentifier != null) {    xml.append(nameIdentifier.toString());  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.TARGET_NAME_SPACE).append(IFSConstants.RIGHT_ANGLE).append(targetNamespace).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.TARGET_NAME_SPACE).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.NAMEID_MAPPING_REQUEST).append(IFSConstants.RIGHT_ANGLE);  return xml.toString();}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  protected IRoutingResult<R> prepareNotFoundRouting(Object exchange,R requestContext){  return prepareNotFoundRouting(exchange,requestContext,false);}  }
class C{  public String toString(){  StringBuffer tempSpot=new StringBuffer("[");  for (int counter=0, maxCounter=getPathCount(); counter < maxCounter; counter++) {    if (counter > 0)     tempSpot.append(", ");    tempSpot.append(getPathComponent(counter));  }  tempSpot.append("]");  return tempSpot.toString();}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_security_IdentityScope() throws Exception {  String nameNull=null;  String[] str={"test","","!@#$%^&*()","identity name"};  IdentityScopeSubclass iss=new IdentityScopeSubclass("name");  IdentitySubclass is;  for (int i=0; i < str.length; i++) {    try {      is=new IdentitySubclass(str[i],new IdentityScopeSubclass());      assertNotNull(is);      assertTrue(is instanceof Identity);    } catch (    Exception e) {      System.out.println(e);      fail("Unexpected exception for parameter " + str[i]);    }  }  try {    is=new IdentitySubclass(nameNull,new IdentityScopeSubclass());  } catch (  NullPointerException npe) {  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    is=new IdentitySubclass("test",iss);    is=new IdentitySubclass("test",iss);    fail("KeyManagementException was not thrown");  } catch (  KeyManagementException expected) {  }}  }
class C{  public synchronized void freeInstance(Object obj){  freeStack.add(obj);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapinvalidtype1.class,args);}  }
class C{  public boolean beginContentHrefDisplay(ChildDisplayEvent event){  return (((ResultVal != null) && (ResultVal.length() > 0) && LoginFail&& !accountLocked) || ((errorTemplate != null) && (errorTemplate.length() > 0)));}  }
class C{  @Fluent public Job done(){  eventBus.send(Kue.workerAddress("done",this),this.toJson());  return this;}  }
class C{  protected WinListener createWinListener(JPopupMenu p){  return new WinListener(p);}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=29 * hash + Objects.hashCode(this.id);  hash=29 * hash + Objects.hashCode(this.table);  hash=29 * hash + Objects.hashCode(this.object);  return hash;}  }
class C{  public Object clone(){  try {    DateFormatSymbols other=(DateFormatSymbols)super.clone();    copyMembers(this,other);    return other;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public boolean containsValue(PdfObject value){  return map.values().contains(value);}  }
class C{  public void test_ConstructorII(){  Vector v=new Vector(2,10);  v.addElement(new Object());  v.addElement(new Object());  v.addElement(new Object());  assertEquals("Failed to inc capacity by proper amount",12,v.capacity());  Vector grow=new Vector(3,-1);  grow.addElement("one");  grow.addElement("two");  grow.addElement("three");  grow.addElement("four");  assertEquals("Wrong size",4,grow.size());  assertEquals("Wrong capacity",6,grow.capacity());  try {    new Vector(-1,1);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public boolean isLibrary(){  return isLibrary;}  }
class C{  public void handleAdvancedOptionButtonRequest(RequestInvocationEvent event) throws ModelControlException {  CoreAttributesViewBean vb=(CoreAttributesViewBean)getViewBean(CoreAttributesViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void deleteSessionJwtCookie(MessageInfo messageInfo){  getServerAuthModule().deleteSessionJwtCookie(messageInfo);}  }
class C{  public OfflineUpdateException(LocalizableMessage msg){  super(msg);}  }
class C{  public void dispose(){}  }
class C{  @Override public void beginHandshake() throws SSLException {  if (engine_was_closed) {    throw new SSLException("Engine has already been closed.");  }  if (!peer_mode_was_set) {    throw new IllegalStateException("Client/Server mode was not set");  }  if (!handshake_started) {    handshake_started=true;    if (getUseClientMode()) {      handshakeProtocol=new ClientHandshakeImpl(this);    } else {      handshakeProtocol=new ServerHandshakeImpl(this);    }    appData=new SSLEngineAppData();    alertProtocol=new AlertProtocol();    recProtIS=new SSLBufferedInput();    recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,recProtIS,appData);  }  handshakeProtocol.start();}  }
class C{  static void usePasswordModifyExtendedRequest(Connection connection) throws LdapException {  if (isSupported(PasswordModifyExtendedRequest.OID)) {    final String userIdentity="u:scarter";    final char[] oldPassword="sprain".toCharArray();    final char[] newPassword="secret12".toCharArray();    final PasswordModifyExtendedRequest request=Requests.newPasswordModifyExtendedRequest().setUserIdentity(userIdentity).setOldPassword(oldPassword).setNewPassword(newPassword);    final PasswordModifyExtendedResult result=connection.extendedRequest(request);    if (result.isSuccess()) {      System.out.println("Changed password for " + userIdentity);    } else {      System.err.println(result.getDiagnosticMessage());    }  } else {    System.err.println("PasswordModifyExtendedRequest not supported");  }}  }
class C{  private Promise<ActionResponse,ResourceException> idFromSession(final Context context){  JsonValue result=new JsonValue(new LinkedHashMap<String,Object>(1));  SSOToken ssotok;  AMIdentity amIdentity;  try {    SSOTokenManager mgr=SSOTokenManager.getInstance();    ssotok=mgr.createSSOToken(getCookieFromServerContext(context));    amIdentity=new AMIdentity(ssotok);    result.put("id",amIdentity.getName());    result.put("realm",orgNameToRealmName(amIdentity.getRealm()));    result.put("dn",amIdentity.getUniversalId());    result.put("successURL",ssotok.getProperty(ISAuthConstants.SUCCESS_URL,false));    result.put("fullLoginURL",ssotok.getProperty(ISAuthConstants.FULL_LOGIN_URL,false));    if (debug.messageEnabled()) {      debug.message("IdentityResource.idFromSession() :: Retrieved ID for user={}",amIdentity.getName());    }    return newResultPromise(newActionResponse(result));  } catch (  SSOException e) {    debug.error("IdentityResource.idFromSession() :: Cannot retrieve SSO Token",e);    return new ForbiddenException("SSO Token cannot be retrieved.",e).asPromise();  }catch (  IdRepoException ex) {    debug.error("IdentityResource.idFromSession() :: Cannot retrieve user from IdRepo",ex);    return new ForbiddenException("Cannot retrieve id from session.",ex).asPromise();  }}  }
class C{  public void namespaceAfterStartElement(final String prefix,final String uri) throws SAXException {  if (m_elemContext.m_elementURI == null) {    String prefix1=getPrefixPart(m_elemContext.m_elementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_elemContext.m_elementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);  return;}  }
class C{  public void join(PlaPointFloat p_point){  lx=Math.min(p_point.v_x,lx);  ly=Math.min(p_point.v_y,ly);  rx=Math.max(rx,p_point.v_x);  uy=Math.max(uy,p_point.v_y);  double tmp=p_point.v_x - p_point.v_y;  ulx=Math.min(ulx,tmp);  lrx=Math.max(lrx,tmp);  tmp=p_point.v_x + p_point.v_y;  llx=Math.min(llx,tmp);  urx=Math.max(urx,tmp);}  }
class C{  private boolean solveNamingConflict(ModifyDNOperation op,LDAPUpdateMsg msg) throws Exception {  ResultCode result=op.getResultCode();  ModifyDnContext ctx=(ModifyDnContext)op.getAttachment(SYNCHROCONTEXT);  String entryUUID=ctx.getEntryUUID();  String newSuperiorID=ctx.getNewSuperiorEntryUUID();  DN currentDN=findEntryDN(entryUUID);  DN entryDN=op.getEntryDN();  DN newSuperior;  RDN newRDN=op.getNewRDN();  if (newSuperiorID != null) {    newSuperior=findEntryDN(newSuperiorID);  } else {    newSuperior=entryDN.parent();  }  if (newSuperior == null) {    markConflictEntry(op,currentDN,currentDN.parent().child(newRDN));    numUnresolvedNamingConflicts.incrementAndGet();    return true;  }  DN newDN=newSuperior.child(newRDN);  if (currentDN == null) {    numResolvedNamingConflicts.incrementAndGet();    return true;  }  if (newDN.equals(currentDN)) {    numResolvedNamingConflicts.incrementAndGet();    return true;  }  if (result == ResultCode.NO_SUCH_OBJECT || result == ResultCode.UNWILLING_TO_PERFORM || result == ResultCode.OBJECTCLASS_VIOLATION) {    ModifyDNMsg modifyDnMsg=(ModifyDNMsg)msg;    modifyDnMsg.setDN(currentDN);    modifyDnMsg.setNewSuperior(newSuperior.toString());    numResolvedNamingConflicts.incrementAndGet();    return false;  } else   if (result == ResultCode.ENTRY_ALREADY_EXISTS) {    ModifyDNMsg modifyDnMsg=(ModifyDNMsg)msg;    markConflictEntry(op,op.getEntryDN(),newDN);    modifyDnMsg.setNewRDN(generateConflictRDN(entryUUID,modifyDnMsg.getNewRDN()));    modifyDnMsg.setNewSuperior(newSuperior.toString());    numUnresolvedNamingConflicts.incrementAndGet();    return false;  } else {    logger.error(ERR_ERROR_REPLAYING_OPERATION,op,ctx.getCSN(),result,op.getErrorMessage());    return true;  }}  }
class C{  private DateUtil(){  this(DateTimeZone.getDefault());}  }
class C{  @Override protected void handleOutput(String output){  if (redirectOutput) {    if (redirectOutPrintStream == null) {      openRedirector();    }    redirectOutPrintStream.println(output);    if (alwaysLog) {      log(output,Project.MSG_INFO);    }  } else {    log(output,Project.MSG_INFO);  }}  }
class C{  public JOptionPane(Object message,int messageType){  this(message,messageType,DEFAULT_OPTION);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public NamingResourcesImpl(){}  }
class C{  public ResourceAttributeUtil(){  this(new ObjectMapper());}  }
class C{  @Before public void registerIdlingResource(){  Espresso.registerIdlingResources(mAddTaskIntentsTestRule.getActivity().getCountingIdlingResource());}  }
class C{  protected void parseDOMElement(Element element) throws SAML2Exception {  AssertionFactory assertionFactory=AssertionFactory.getInstance();  ProtocolFactory protoFactory=ProtocolFactory.getInstance();  requestId=element.getAttribute(SAML2Constants.ID);  validateID(requestId);  version=element.getAttribute(SAML2Constants.VERSION);  validateVersion(version);  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);  validateIssueInstant(issueInstantStr);  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);  consent=element.getAttribute(SAML2Constants.CONSENT);  NodeList nList=element.getChildNodes();  if ((nList != null) && (nList.getLength() > 0)) {    for (int i=0; i < nList.getLength(); i++) {      Node childNode=nList.item(i);      String cName=childNode.getLocalName();      if (cName != null) {        if (cName.equals(SAML2Constants.ISSUER)) {          validateIssuer();          nameID=assertionFactory.createIssuer((Element)childNode);        } else         if (cName.equals(SAML2Constants.SIGNATURE)) {          validateSignature();          signatureString=XMLUtils.print((Element)childNode);          isSigned=true;        } else         if (cName.equals(SAML2Constants.EXTENSIONS)) {          validateExtensions();          extensions=protoFactory.createExtensions((Element)childNode);        } else         if (cName.equals(SAML2Constants.SUBJECT)) {          validateSubject();          subject=assertionFactory.createSubject((Element)childNode);        } else         if (cName.equals(SAML2Constants.NAMEIDPOLICY)) {          validateNameIDPolicy();          nameIDPolicy=protoFactory.createNameIDPolicy((Element)childNode);        } else         if (cName.equals(SAML2Constants.CONDITIONS)) {          validateConditions();          conditions=assertionFactory.createConditions((Element)childNode);        } else         if (cName.equals(SAML2Constants.REQ_AUTHN_CONTEXT)) {          validateReqAuthnContext();          reqAuthnContext=protoFactory.createRequestedAuthnContext((Element)childNode);        } else         if (cName.equals(SAML2Constants.SCOPING)) {          validateScoping();          scoping=protoFactory.createScoping((Element)childNode);        }      }    }  }  String forceAuthnAttr=element.getAttribute(SAML2Constants.FORCEAUTHN);  if ((forceAuthnAttr != null) && (forceAuthnAttr.length() > 0)) {    forceAuthn=SAML2SDKUtils.booleanValueOf(forceAuthnAttr);  }  String isPassiveAttr=element.getAttribute(SAML2Constants.ISPASSIVE);  if ((isPassiveAttr != null) && (isPassiveAttr.length() > 0)) {    isPassive=SAML2SDKUtils.booleanValueOf(isPassiveAttr);  }  protocolBinding=element.getAttribute(SAML2Constants.PROTOBINDING);  String index=element.getAttribute(SAML2Constants.ASSERTION_CONSUMER_SVC_INDEX);  if ((index != null) && (index.length() > 0)) {    assertionConsumerSvcIndex=new Integer(index);    validateAssertionConsumerServiceIndex(assertionConsumerSvcIndex);  }  assertionConsumerServiceURL=XMLUtils.unescapeSpecialCharacters(element.getAttribute(SAML2Constants.ASSERTION_CONSUMER_SVC_URL));  index=element.getAttribute(SAML2Constants.ATTR_CONSUMING_SVC_INDEX);  if ((index != null) && (index.length() > 0)) {    attrConsumingSvcIndex=new Integer(index);    validateAttributeConsumingServiceIndex(attrConsumingSvcIndex);  }  providerName=element.getAttribute(SAML2Constants.PROVIDER_NAME);}  }
class C{  public static void main(final String[] args){  try {    Utils.checkJavaVersion();    System.exit(0);  } catch (  final IncompatibleVersionException ive) {    System.out.println(ive.getMessageObject());    System.exit(JAVA_VERSION_INCOMPATIBLE);  }}  }
class C{  public void test_setStartRuleIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,1,1);  st.setEndRule(Calendar.DECEMBER,1,1);  assertTrue("StartRule improperly set",st.useDaylightTime());  assertTrue("StartRule improperly set",st.inDaylightTime((new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime())));  assertTrue("StartRule improperly set",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  try {    st.setStartRule(13,20,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(1,32,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(1,30,10);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  private static String parseEscapedSequence(StringCharacterIterator iterator) throws UnsupportedEncodingException {  char c=iterator.next();  if (c == '\\') {    return new String(new byte[]{0,'\\'},"UTF-8");  } else   if (c == '"') {    return new String(new byte[]{0,'\"'},"UTF-8");  } else   if (c == 'b') {    return new String(new byte[]{0,'\b'},"UTF-8");  } else   if (c == 'n') {    return new String(new byte[]{0,'\n'},"UTF-8");  } else   if (c == 'r') {    return new String(new byte[]{0,'\r'},"UTF-8");  } else   if (c == 't') {    return new String(new byte[]{0,'\t'},"UTF-8");  } else   if (c == 'U' || c == 'u') {    String byte1="";    byte1+=iterator.next();    byte1+=iterator.next();    String byte2="";    byte2+=iterator.next();    byte2+=iterator.next();    byte[] stringBytes={(byte)Integer.parseInt(byte1,16),(byte)Integer.parseInt(byte2,16)};    return new String(stringBytes,"UTF-8");  } else {    String num="";    num+=c;    num+=iterator.next();    num+=iterator.next();    int asciiCode=Integer.parseInt(num,8);    byte[] stringBytes={0,(byte)asciiCode};    return new String(stringBytes,"UTF-8");  }}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  private void parseMinorVersion(String minorVer) throws FSMsgException, SAMLException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Response(Element): invalid " + "MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("Response(Element):MinorVersion of" + " the Response is too high.");    throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("Response(Element):MinorVersion of" + " the Response is too low.");    throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooLow",null);  }}  }
class C{  public boolean isValidValue(long value){  return (value >= getMinimum() && value <= getMaximum());}  }
class C{  public static void print(Object... params){  String fullText=buildToString(params);  System.out.println(fullText);}  }
class C{  public final void readFully(byte b[]) throws IOException {  readFully(b,0,b.length);}  }
class C{  SessionID updateSessionID(SessionID previousId,SessionInfo newSessionInfo) throws SessionException {  cache.remove(getJWTFromSessionID(previousId,true));  String jwt=getJwtSessionMapper().asJwt(newSessionInfo);  return SessionID.generateStatelessSessionID(sessionServerConfig,newSessionInfo.getClientDomain(),jwt);}  }
class C{  @Override public boolean hasMore() throws NamingException {  return iterator.hasNext();}  }
class C{  public T messageDetail(JsonValue details){  if (null != details) {    jsonValue.put(MESSAGE_DETAIL,details.getObject());  }  return self();}  }
class C{  @Override public int read() throws IOException {  int b0=fInputStream.read() & 0xff;  if (b0 == 0xff)   return -1;  int b1=fInputStream.read() & 0xff;  if (b1 == 0xff)   return -1;  if (fEncoding >= 4) {    int b2=fInputStream.read() & 0xff;    if (b2 == 0xff)     return -1;    int b3=fInputStream.read() & 0xff;    if (b3 == 0xff)     return -1;    if (log.isDebugEnabled())     log.debug("b0 is " + (b0 & 0xff) + " b1 "+ (b1 & 0xff)+ " b2 "+ (b2 & 0xff)+ " b3 "+ (b3 & 0xff));    if (fEncoding == UCS4BE)     return (b0 << 24) + (b1 << 16) + (b2 << 8)+ b3; else     return (b3 << 24) + (b2 << 16) + (b1 << 8)+ b0;  } else {    if (fEncoding == UCS2BE)     return (b0 << 8) + b1; else     return (b1 << 8) + b0;  }}  }
class C{  @Override public void lifecycleEvent(LifecycleEvent event){  try {    host=(Host)event.getLifecycle();  } catch (  ClassCastException e) {    log.error(sm.getString("hostConfig.cce",event.getLifecycle()),e);    return;  }  if (event.getType().equals(Lifecycle.START_EVENT))   start(); else   if (event.getType().equals(Lifecycle.STOP_EVENT))   stop();}  }
class C{  public void sendNotification(Notification notification){  if (notification.getSequenceNumber() < 1) {synchronized (this) {      notification.setSequenceNumber(this.sequenceNumber++);    }  }  broadcaster.sendNotification(notification);}  }
class C{  private void parseMajorVersion(String majorVer) throws FSMsgException, SAMLException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    FSUtils.debug.error("Response(Element): invalid MajorVersion",e);    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Response(Element):MajorVersion of" + " the Response is too high.");      }      throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Response(Element):MajorVersion of" + " the Response is too low.");      }      throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooLow",null);    }  }}  }
class C{  public boolean isTrustAll(){  return trustAllArg.isPresent();}  }
class C{  public static SimplePropertyMapper simple(final AttributeDescription attribute){  return new SimplePropertyMapper(attribute);}  }
class C{  public static boolean confirm(String p_message){  if (p_message == null) {    return true;  }  int option=javax.swing.JOptionPane.showConfirmDialog(null,p_message,null,javax.swing.JOptionPane.YES_NO_OPTION);  boolean result=option == javax.swing.JOptionPane.YES_OPTION;  return result;}  }
class C{  public static List doResourceIPEnvAuth(String resourceUrl,String realm,Map envParameters) throws PolicyException {  ActionDecision decision=null;  if (resourceUrl != null) {    decision=getActionDecision(resourceUrl,envParameters);    return getPolicyAdvice(decision,realm);  } else {    return Collections.EMPTY_LIST;  }}  }
class C{  private static String addIDPPPrefix(String expression){  if (expression == null || expression.length() == 0) {    return expression;  }  if (expression.indexOf("/") == -1) {    debug.error("IDPPUtils:addIDPPPrefix:Not a valid expression");    return expression;  }  StringBuffer sb=new StringBuffer(100);  StringTokenizer st=new StringTokenizer(expression,"/");  while (st.hasMoreTokens()) {    String temp=(String)st.nextToken();    String prefixedStr="/" + idppPrefix + ":"+ temp;    sb.append(prefixedStr);  }  return sb.toString();}  }
class C{  @Override boolean requiresConnectorConfigurationHelper(JsonValue requestContent){  return requestContent != null && requestContent.size() > 0;}  }
class C{  private static void createAndRegisterWorkflows(Backend<?> backend) throws DirectoryException {  for (  DN curBaseDN : backend.getBaseDNs()) {    createWorkflow(curBaseDN,backend);  }}  }
class C{  public AtomicIntegerArray(int length){  array=new int[length];}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static SearchRequest unmodifiableSearchRequest(final SearchRequest request){  if (request instanceof UnmodifiableSearchRequestImpl) {    return request;  }  return new UnmodifiableSearchRequestImpl(request);}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintScrollBarTrackBackground(context,g,x,y,w,h);}  }
class C{  public void useHttps(SSLSocketFactory sslSocketFactory,boolean tunnelProxy){  this.sslSocketFactory=sslSocketFactory;  this.tunnelProxy=tunnelProxy;}  }
class C{  @Override public void removeWelcomeFile(String name){synchronized (welcomeFilesLock) {    int n=-1;    for (int i=0; i < welcomeFiles.length; i++) {      if (welcomeFiles[i].equals(name)) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    String results[]=new String[welcomeFiles.length - 1];    for (int i=0; i < welcomeFiles.length; i++) {      if (i != n)       results[j++]=welcomeFiles[i];    }    welcomeFiles=results;  }  if (this.getState().equals(LifecycleState.STARTED))   fireContainerEvent(REMOVE_WELCOME_FILE_EVENT,name);}  }
class C{  public ScriptingService create(String realm){  try {    realm=realmNormaliser.normalise(realm);  } catch (  NotFoundException e) {    throw new IllegalArgumentException("Cannot find realm " + realm,e);  }  ScriptingService service=services.get(realm);  if (service == null) {    service=forRealm(realm);  }  return service;}  }
class C{  public static ResultCode valueOf(final int intValue){  ResultCode result=ELEMENTS.get(intValue);  if (result == null) {    result=new ResultCode(intValue,LocalizableMessage.raw("unknown(" + intValue + ")"),true,Enum.UNKNOWN);  }  return result;}  }
class C{  public boolean isArray(){  return isArray;}  }
class C{  ManagedRole(AttrSet attrSet) throws UMSException {  this(TemplateManager.getTemplateManager().getCreationTemplate(_class,null),attrSet);}  }
class C{  public static String byteArrayToString(byte[] bytes){  char chars[]=new char[bytes.length];  for (int i=0; i < bytes.length; i++) {    chars[i]=(char)bytes[i];  }  return new String(chars);}  }
class C{  public boolean isEnabled(){  return parent.isEnabled();}  }
class C{  @Inject public DeleteApplications(ApplicationServiceFactory applicationServiceFactory){  super(applicationServiceFactory);}  }
class C{  public Validator createValidator() throws JAXBException {  return new ValidatorImpl(this);}  }
class C{  public QueryResponseElement processQueryRequest(QueryElement query,String providerID,Message requestMsg,Document request) throws IDPPException, SOAPFaultException {  IDPPUtils.debug.message("PPRequestHandler:processQueryRequest:Init");  if (query == null || request == null) {    IDPPUtils.debug.error("PPRequestHandler:processQueryRequest:" + "null values ");    throw new IDPPException(IDPPUtils.bundle.getString("nullInputParams"));  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PPRequestHandler:processQueryRequest:" + "request received:" + XMLUtils.print(request.getDocumentElement()));  }  Object resObj=query.getResourceID();  if (resObj == null) {    resObj=query.getEncryptedResourceID();  }  QueryResponseElement response=getQueryResponse(query);  String resourceID=getResourceID(resObj,providerID,IDPPConstants.XMLNS_IDPP);  if (resourceID == null || !pp.isResourceIDValid(resourceID)) {    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PPRequestHandler:processQuery" + "Request: resource id is invalid.");    }    response.setStatus(setStatusType(false,DSTConstants.NO_RESOURCE,IDPPUtils.bundle.getString("invalidResourceID"),null));    return response;  }  if (LogUtil.isLogEnabled()) {    logMsg=IDPPUtils.bundle.getString("messageID") + "=" + requestMsg.getCorrelationHeader().getMessageID()+ " "+ IDPPUtils.bundle.getString("providerID")+ "="+ providerID+ " "+ IDPPUtils.bundle.getString("resourceID")+ "="+ resourceID+ " "+ IDPPUtils.bundle.getString("securityMechID")+ "="+ requestMsg.getAuthenticationMechanism()+ " ";  }  List queryItems=query.getQueryItem();  if (queryItems.size() == 0) {    if (IDPPUtils.debug.warningEnabled()) {      IDPPUtils.debug.warning("PPRequestHandler:processQuery" + "Request: The request does not have any query items.");    }    response.setStatus(setStatusType(false,DSTConstants.UNEXPECTED_ERROR,IDPPUtils.bundle.getString("nullQueryItems"),null));    return response;  }  Map interactQueries=new HashMap();  Map interactedData=new HashMap();  List dstQueryItems=new ArrayList();  int queryItemsSize=queryItems.size();  for (int i=0; i < queryItemsSize; i++) {    boolean isQueryItemValid=true;    QueryType.QueryItemType item=(QueryType.QueryItemType)queryItems.get(i);    String select=item.getSelect();    String ref=item.getItemID();    if (ref == null || ref.length() == 0) {      ref=item.getId();    }    if ((select == null) || (select.length() == 0)) {      if (IDPPUtils.debug.warningEnabled()) {        IDPPUtils.debug.warning("PPRequestHandler:process" + "QueryRequest: There is no Select in the request.");      }      response.setStatus(setStatusType(false,DSTConstants.MISSING_SELECT,IDPPUtils.bundle.getString("missingSelect"),ref));      isQueryItemValid=false;    }    if (!pp.isSelectDataSupported(select)) {      if (IDPPUtils.debug.warningEnabled()) {        IDPPUtils.debug.warning("PPRequestHandler:process" + "QueryRequest: Data not supported");      }      response.setStatus(setStatusType(false,DSTConstants.INVALID_SELECT,IDPPUtils.bundle.getString("invalidSelect"),ref));      isQueryItemValid=false;    }    String resource=IDPPUtils.getResourceExpression(select);    String authZAction=pp.getAuthZAction(requestMsg.getToken(),DSTConstants.QUERY_ACTION,resource,getPolicyEnvMap(resourceID,requestMsg));    if (authZAction == null || authZAction.equalsIgnoreCase(IDPPConstants.AUTHZ_DENY)) {      response.setStatus(setStatusType(false,DSTConstants.NOT_AUTHORIZED,IDPPUtils.bundle.getString("notAuthorized"),ref));      if (LogUtil.isLogEnabled()) {        String[] data={resourceID};        LogUtil.error(Level.INFO,LogUtil.PP_QUERY_FAILURE,data);      }      continue;    }    if (authZAction.equalsIgnoreCase(IDPPConstants.INTERACT_FOR_CONSENT)) {      if (isInteractionResponseExists(requestMsg)) {        if (!processInteractionConsentResponse(true,requestMsg,select)) {          if (LogUtil.isLogEnabled()) {            String[] data={resourceID};            LogUtil.error(Level.INFO,LogUtil.PP_INTERACTION_FAILURE,data);          }          response.setStatus(setStatusType(false,DSTConstants.NOT_AUTHORIZED,IDPPUtils.bundle.getString("interactionFailed"),ref));          isQueryItemValid=false;        }      } else {        interactQueries.put(resource,authZAction);      }    } else     if (authZAction.equalsIgnoreCase(IDPPConstants.INTERACT_FOR_VALUE)) {      if (isInteractionResponseExists(requestMsg)) {        Map intrData=processInteractionValueResponse(true,requestMsg,select);        if (intrData == null || intrData.isEmpty()) {          if (LogUtil.isLogEnabled()) {            String[] data={resourceID};            LogUtil.error(Level.INFO,LogUtil.PP_INTERACTION_FAILURE,data);          }          response.setStatus(setStatusType(false,DSTConstants.NOT_AUTHORIZED,IDPPUtils.bundle.getString("interactionFailed"),ref));          isQueryItemValid=false;        } else {          interactedData.putAll(intrData);        }      } else {        interactQueries.put(resource,authZAction);      }    }    if (isQueryItemValid) {      Calendar changedSince=item.getChangedSince();      Date date=null;      if (changedSince != null) {        date=changedSince.getTime();      }      DSTQueryItem dstQueryItem=new DSTQueryItem(select,item.isIncludeCommonAttributes(),date,null);      dstQueryItem.setId(item.getId());      dstQueryItem.setItemID(item.getItemID());      dstQueryItems.add(dstQueryItem);    }  }  if (interactQueries != null && !interactQueries.isEmpty()) {    initInteraction(true,interactQueries,requestMsg);  }  Map queryResults=pp.queryData(requestMsg.getToken(),resourceID,dstQueryItems,interactedData,request);  List data=getData(queryResults);  if (data != null && !data.isEmpty()) {    response.getData().addAll(data);  }  if (LogUtil.isLogEnabled()) {    String[] msgData={resourceID};    LogUtil.access(Level.INFO,LogUtil.PP_QUERY_SUCCESS,msgData);  }  return response;}  }
class C{  private final void addExpandOrder(String contractChars,String expandChars,int anOrder) throws ParseException {  int tableIndex=addExpansion(anOrder,expandChars);  if (contractChars.length() > 1) {    char ch=contractChars.charAt(0);    if (Character.isHighSurrogate(ch) && contractChars.length() == 2) {      char ch2=contractChars.charAt(1);      if (Character.isLowSurrogate(ch2)) {        addOrder(Character.toCodePoint(ch,ch2),tableIndex);      }    } else {      addContractOrder(contractChars,tableIndex);    }  } else {    addOrder(contractChars.charAt(0),tableIndex);  }}  }
class C{  @Override public Foo findByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_First(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public void processUserApps(List<LauncherActivityInfoCompat> apps){  mHomescreenApps=new ArrayList<>();  mWorkFolderApps=new ArrayList<>();  HashSet<String> packageSet=new HashSet<>();  final boolean userAppsExisted=getUserApps(packageSet);  boolean newPackageAdded=false;  for (  LauncherActivityInfoCompat info : apps) {    String packageName=info.getComponentName().getPackageName();    if (!packageSet.contains(packageName)) {      packageSet.add(packageName);      newPackageAdded=true;      try {        PackageInfo pkgInfo=mContext.getPackageManager().getPackageInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES);        markForAddition(info,pkgInfo.firstInstallTime);      } catch (      NameNotFoundException e) {        Log.e(TAG,"Unknown package " + packageName,e);      }    }  }  if (newPackageAdded) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();    finalizeAdditions(userAppsExisted);  }}  }
class C{  protected Socket(SocketImpl impl) throws SocketException {  this.impl=impl;  if (impl != null) {    checkOldImpl();    this.impl.setSocket(this);  }}  }
class C{  public String lookupNamespace(String prefix){  String uri=null;  final Stack stack=getPrefixStack(prefix);  if (stack != null && !stack.isEmpty()) {    uri=((MappingRecord)stack.peek()).m_uri;  }  if (uri == null)   uri=EMPTYSTRING;  return uri;}  }
class C{  public void bind(org.omg.CosNaming.NameComponent[] n,org.omg.CORBA.Object obj) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName, org.omg.CosNaming.NamingContextPackage.AlreadyBound {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("bind",true);    org.omg.CosNaming.NameHelper.write($out,n);    org.omg.CORBA.ObjectHelper.write($out,obj);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    bind(n,obj);  } finally {    _releaseReply($in);  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.JAPANESE_ERA_TYPE,this);}  }
class C{  public E elementAt(int index){  return delegate.elementAt(index);}  }
class C{  public void removeAllUserDevices(@Nonnull AMIdentity id) throws IdRepoException, SSOException {  Reject.ifNull(id);  id.removeAttributes(Collections.singleton(getConfigStorageAttributeName()));  id.store();}  }
class C{  private void waitForStableTopo(FakeReplicationDomain fakeRd,int expectedDs,int expectedRs) throws Exception {  Map<Integer,DSInfo> dsInfo=null;  List<RSInfo> rsInfo=null;  long nSec=0;  long startTime=System.currentTimeMillis();  do {    dsInfo=fakeRd.getReplicaInfos();    rsInfo=fakeRd.getRsInfos();    if (dsInfo.size() == expectedDs && rsInfo.size() == expectedRs) {      debugInfo("waitForStableTopo: expected topo obtained after " + nSec + " second(s).");      return;    }    Thread.sleep(100);    nSec=(System.currentTimeMillis() - startTime) / 1000;  } while (nSec < 30);  Assert.fail("Did not reach expected topo view in time: expected " + expectedDs + " DSs (had "+ dsInfo+ ") and "+ expectedRs+ " RSs (had "+ rsInfo+ ").");}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public KeyStoreException(String msg){  super(msg);}  }
class C{  public SQLTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  String spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={realm,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_ENTITIES",params);  if (spec.equals(FederationManager.DEFAULT_SPECIFICATION)) {    handleSAML2Request(rc);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_ENTITIES",params);  } else   if (spec.equals(FedCLIConstants.IDFF_SPECIFICATION)) {    handleIDFFRequest(rc);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_ENTITIES",params);  } else   if (spec.equals(FedCLIConstants.WSFED_SPECIFICATION)) {    handleWSFedRequest(rc);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_ENTITIES",params);  } else {    String[] args={realm,getResourceString("unsupported-specification")};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_ENTITIES",args);    throw new CLIException(getResourceString("unsupported-specification"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.SignKeyElement createSignKeyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.SignKeyElementImpl();}  }
class C{  public SQLTransientConnectionException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  protected int CalcHints(int begin,int end,int LBias,int GBias,int[] LSubrsOffsets){  seek(begin);  while (getPosition() < end) {    ReadCommand();    int pos=getPosition();    Object TopElement=null;    if (arg_count > 0)     TopElement=args[arg_count - 1];    int NumOfArgs=arg_count;    HandelStack();switch (key) {case "callsubr":      if (NumOfArgs > 0) {        int Subr=(int)((Integer)TopElement) + LBias;        CalcHints(LSubrsOffsets[Subr],LSubrsOffsets[Subr + 1],LBias,GBias,LSubrsOffsets);        seek(pos);      }    break;case "callgsubr":  if (NumOfArgs > 0) {    int Subr=(int)((Integer)TopElement) + GBias;    CalcHints(gsubrOffsets[Subr],gsubrOffsets[Subr + 1],LBias,GBias,LSubrsOffsets);    seek(pos);  }break;case "hstem":case "vstem":case "hstemhm":case "vstemhm":NumOfHints+=NumOfArgs / 2;break;case "hintmask":case "cntrmask":int SizeOfMask=NumOfHints / 8;if (NumOfHints % 8 != 0 || SizeOfMask == 0) SizeOfMask++;for (int i=0; i < SizeOfMask; i++) {getCard8();}break;}}return NumOfHints;}  }
class C{  public int size(){  return size;}  }
class C{  @Override public Rectangle placeBarcode(PdfCanvas canvas,Color barColor,Color textColor){  Rectangle rect=getBarcodeSize();  float barStartX=0;  float barStartY=0;  float textStartY=0;  if (font != null) {    if (baseline <= 0) {      textStartY=barHeight - baseline;    } else {      textStartY=-getDescender();      barStartY=textStartY + baseline;    }  }switch (codeType) {case EAN13:case UPCA:case UPCE:    if (font != null) {      barStartX+=font.getWidth(code.charAt(0),size);    }  break;}byte[] bars;int[] guard=GUARD_EMPTY;switch (codeType) {case EAN13:bars=getBarsEAN13(code);guard=GUARD_EAN13;break;case EAN8:bars=getBarsEAN8(code);guard=GUARD_EAN8;break;case UPCA:bars=getBarsEAN13("0" + code);guard=GUARD_UPCA;break;case UPCE:bars=getBarsUPCE(code);guard=GUARD_UPCE;break;case SUPP2:bars=getBarsSupplemental2(code);break;case SUPP5:bars=getBarsSupplemental5(code);break;default :throw new PdfException("Invalid code type");}float keepBarX=barStartX;boolean print=true;float gd=0;if (font != null && baseline > 0 && guardBars) {gd=baseline / 2;}if (barColor != null) {canvas.setFillColor(barColor);}for (int k=0; k < bars.length; ++k) {float w=bars[k] * x;if (print) {if (Arrays.binarySearch(guard,k) >= 0) {canvas.rectangle(barStartX,barStartY - gd,w - inkSpreading,barHeight + gd);} else {canvas.rectangle(barStartX,barStartY,w - inkSpreading,barHeight);}}print=!print;barStartX+=w;}canvas.fill();if (font != null) {if (textColor != null) {canvas.setFillColor(textColor);}canvas.beginText();canvas.setFontAndSize(font,size);switch (codeType) {case EAN13:canvas.setTextMatrix(0,textStartY);canvas.showText(code.substring(0,1));for (int k=1; k < 13; ++k) {String c=code.substring(k,k + 1);float len=font.getWidth(c,size);float pX=keepBarX + TEXTPOS_EAN13[k - 1] * x - len / 2;canvas.setTextMatrix(pX,textStartY);canvas.showText(c);}break;case EAN8:for (int k=0; k < 8; ++k) {String c=code.substring(k,k + 1);float len=font.getWidth(c,size);float pX=TEXTPOS_EAN8[k] * x - len / 2;canvas.setTextMatrix(pX,textStartY);canvas.showText(c);}break;case UPCA:canvas.setTextMatrix(0,textStartY);canvas.showText(code.substring(0,1));for (int k=1; k < 11; ++k) {String c=code.substring(k,k + 1);float len=font.getWidth(c,size);float pX=keepBarX + TEXTPOS_EAN13[k] * x - len / 2;canvas.setTextMatrix(pX,textStartY);canvas.showText(c);}canvas.setTextMatrix(keepBarX + x * (11 + 12 * 7),textStartY);canvas.showText(code.substring(11,12));break;case UPCE:canvas.setTextMatrix(0,textStartY);canvas.showText(code.substring(0,1));for (int k=1; k < 7; ++k) {String c=code.substring(k,k + 1);float len=font.getWidth(c,size);float pX=keepBarX + TEXTPOS_EAN13[k - 1] * x - len / 2;canvas.setTextMatrix(pX,textStartY);canvas.showText(c);}canvas.setTextMatrix(keepBarX + x * (9 + 6 * 7),textStartY);canvas.showText(code.substring(7,8));break;case SUPP2:case SUPP5:for (int k=0; k < code.length(); ++k) {String c=code.substring(k,k + 1);float len=font.getWidth(c,size);float pX=(7.5f + (9 * k)) * x - len / 2;canvas.setTextMatrix(pX,textStartY);canvas.showText(c);}break;}canvas.endText();}return rect;}  }
class C{  public void onClose(CloseReason closeReason){synchronized (stateLock) {    if (state != State.CLOSED) {      try {        wsRemoteEndpoint.setBatchingAllowed(false);      } catch (      IOException e) {        log.warn(sm.getString("wsSession.flushFailOnClose"),e);        fireEndpointOnError(e);      }      if (state == State.OPEN) {        state=State.OUTPUT_CLOSED;        sendCloseMessage(closeReason);        fireEndpointOnClose(closeReason);      }      state=State.CLOSED;      wsRemoteEndpoint.close();    }  }}  }
class C{  public void logout() throws AuthLoginException {  authDebug.message("AuthContextLocal::logout()");  try {    amlc.logout();  } catch (  Exception e) {    if (authDebug.messageEnabled()) {      authDebug.message("Exception in AMLoginContext::logout() " + e.getMessage());    }    throw new AuthLoginException(amAuthContextLocal,"logoutError",null,e);  }  authDebug.message("Called AMLoginContext::logout()");  loginStatus=AuthContext.Status.COMPLETED;}  }
class C{  @Override public void modify(String existingName,Privilege privilege) throws EntitlementException {  validate(privilege);  updateMetaInfo(existingName,privilege);  PolicyDataStore pdb=PolicyDataStore.getInstance();  Privilege oldP=findByName(existingName,getAdminSubject());  String currentRealm=getRealm();  pdb.removePrivilege(getAdminSubject(),currentRealm,oldP);  pdb.addPolicy(getAdminSubject(),currentRealm,privilege);  notifyPrivilegeChanged(currentRealm,oldP,privilege,PolicyEventType.UPDATE);}  }
class C{  public URI(String p_scheme,String p_schemeSpecificPart) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme!");  }  if (p_schemeSpecificPart == null || p_schemeSpecificPart.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme-specific part!");  }  setScheme(p_scheme);  setPath(p_schemeSpecificPart);}  }
class C{  static byte[] altBase64ToByteArray(String s){  return base64ToByteArray(s,true);}  }
class C{  public void updateCtm(Matrix newCtm){  ctm=newCtm.multiply(ctm);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  AgentsViewBean vb=(AgentsViewBean)getViewBean(AgentsViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean add(E e){  typeCheck(e);  long oldElements=elements;  elements|=(1L << ((Enum<?>)e).ordinal());  return elements != oldElements;}  }
class C{  public void reload(){  isRunning.set(false);  logger.info("Reloading diagnostics configuation.");  diagnosticsProcessor.shutdown();  unregisterMXBean();  config=loadConfiguration();  diagnosticsProcessor=new DiagnosticsProcessor(config);  initMXBean();  logger.info("Configuration realoaded");  isRunning.set(true);}  }
class C{  private static void checkTypeSafe(Object o){  try {    o=(RoleUnresolved)o;  } catch (  ClassCastException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  protected void fireMenuDragMouseReleased(MenuDragMouseEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuDragMouseListener.class) {      ((MenuDragMouseListener)listeners[i + 1]).menuDragMouseReleased(event);    }  }}  }
class C{  public int size(){  return entries.size();}  }
class C{  public FrameBodyUFID(){  setOwner("");  setUniqueIdentifier(new byte[0]);}  }
class C{  public FileWriterWithEncoding(String filename,Charset encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  void recomposeImports(){  m_importNumber=getStylesheetRoot().getImportNumber(this);  StylesheetRoot root=getStylesheetRoot();  int globalImportCount=root.getGlobalImportCount();  m_importCountComposed=(globalImportCount - m_importNumber) - 1;  int count=getImportCount();  if (count > 0) {    m_endImportCountComposed+=count;    while (count > 0)     m_endImportCountComposed+=this.getImport(--count).getEndImportCountComposed();  }  count=getIncludeCountComposed();  while (count > 0) {    int imports=getIncludeComposed(--count).getImportCount();    m_endImportCountComposed+=imports;    while (imports > 0)     m_endImportCountComposed+=getIncludeComposed(count).getImport(--imports).getEndImportCountComposed();  }}  }
class C{  @Override public Writer append(CharSequence csq,int start,int end){  return this;}  }
class C{  public void testUserDataHandlerNotifiedOfShallowClones(){  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Element clonedName=(Element)name.cloneNode(false);  Attr clonedStandard=clonedName.getAttributeNode("a:standard");  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_CLONED,"a","apple",name,clonedName));  expected.add(notification(NODE_CLONED,"b","banana",name,clonedName));  expected.add(notification(NODE_CLONED,"c","cat",standard,clonedStandard));  assertEquals(expected,handler.calls);}  }
class C{  @Override public void update(){  if (!bounce)   return;  counter++;  if (counter == 1)   super.getSpriteFrame().setTranslateY(super.getSpriteFrame().getTranslateY() - BOUNCE_HEIGHT); else   if (counter == 5) {    super.getSpriteFrame().setTranslateY(super.getSpriteFrame().getTranslateY() + BOUNCE_HEIGHT);    counter=0;    bounce=false;  }}  }
class C{  protected Stack<Throwable> unfoldExceptions(Throwable exception){  Stack<Throwable> throwables=new Stack<>();  Throwable current=exception;  while (current != null) {    throwables.push(current);    current=current.getCause();  }  return throwables;}  }
class C{  @SuppressWarnings("unchecked") private Class validateClass(ClientConfig cfg){  Class clazz=null;  try {    clazz=Class.forName(cfg.getAccessRequestHandlerClassname());  } catch (  final ClassNotFoundException e) {    LOG.error("Unable to load Handler Class '" + cfg.getAccessRequestHandlerClassname() + "' for RADIUS client '"+ cfg.getName()+ "'. Requests from this client will be ignored.",e);    return null;  }  Object inst=null;  try {    inst=InjectorHolder.getInstance(clazz);  } catch (  ConfigurationException|ProvisionException e) {    LOG.error("Unable to instantiate Handler Class '" + cfg.getAccessRequestHandlerClassname() + "' for RADIUS client '"+ cfg.getName()+ "'. Requests from this client will be ignored.",e);    return null;  }  AccessRequestHandler handler=null;  try {    handler=(AccessRequestHandler)inst;  } catch (  final ClassCastException e) {    LOG.error("Unable to use Handler Class '" + cfg.getAccessRequestHandlerClassname() + "' for RADIUS client '"+ cfg.getName()+ "'. Requests from this client will be ignored.",e);    return null;  }  return clazz;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.PostalAddressElement createPostalAddressElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.PostalAddressElementImpl();}  }
class C{  public ShortLookupTable(int offset,short data[]){  super(offset,data.length);  numComponents=1;  numEntries=data.length;  this.data=new short[1][];  this.data[0]=data;}  }
class C{  public Set searchAssignableDynamicGroups(String wildcard,int level) throws AMException, SSOException {  return searchAssignableDynamicGroups(wildcard,null,level);}  }
class C{  private void pushCallStack(){  StackTraceElement[] eles=(new Throwable()).getStackTrace();  int i;  for (i=1; i < eles.length; i++) {    if (!eles[i].getClassName().equals(this.getClass().getName())) {      break;    }  }  this.callStack.push(eles[i]);}  }
class C{  public boolean implies(Permission permission){  return false;}  }
class C{  private boolean recoverFailedInstance(String instanceId,InstanceState state){  try {    if (state.getState() == InstanceState.STATE_RUNNING) {      state.updateDetectedDown();      state.clearRecoveryAttempts();    }    state.setState(InstanceState.STATE_PROCESSING_DOWN);    state.setRecoveringInstanceId(this.instanceId);    state.updateRecoveringTimestamp();    state.startRecovery();    updateInstanceState(instanceId,state);  } catch (  ResourceException e) {    if (e.getCode() != ResourceException.CONFLICT) {      logger.warn("Failed to update instance state",e);    }    return false;  }  ClusterEvent recoveryEvent=new ClusterEvent(ClusterEventType.RECOVERY_INITIATED,instanceId);  boolean success=sendEventToListeners(recoveryEvent);  if (success) {    logger.info("Instance {} recovered successfully",instanceId);    try {      InstanceState newState=getInstanceState(instanceId);      newState.setState(InstanceState.STATE_DOWN);      newState.finishRecovery();      updateInstanceState(instanceId,newState);    } catch (    ResourceException e) {      if (e.getCode() != ResourceException.CONFLICT) {        logger.warn("Failed to update instance state",e);      }      return false;    }  } else {    logger.warn("Instance {} was not successfully recovered",instanceId);    return false;  }  return true;}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {  startDocumentInternal();  m_needToCallStartDocument=false;  return;}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  private void archive(){  Archiver archiver=getArchiver(logName);  String message="";  String signature="Signature";  try {    LogSign ls=new LogSign(logName);    signature=ls.sign();  } catch (  Exception e) {    Debug.error(logName + ":SecureFileHandler: could not generate signature");  }  com.sun.identity.log.LogRecord lr=new com.sun.identity.log.LogRecord(Level.SEVERE,"Signature");  lr.setLoggerName(logName);  lr.addLogInfo(LogConstants.SIGNATURE_FIELDNAME,signature);  message=getFormatter().format(lr);  try {    writer.write(message);  } catch (  IOException ioe) {    Debug.error(logName + ":SecureLogHelper: could not write signature to file",ioe);  }  flush();  try {    if (writer != null) {      writer.close();    }  } catch (  IOException ioe) {    Debug.error(logName + ":SecureFileHandler: Couldnot close writer",ioe);  }  try {    archiver.archive(logName,location);    int fileCount=archiver.checkCount();    if (Debug.messageEnabled()) {      Debug.message(logName + ":Files per keystore=" + filesPerKeyStore+ " and current file count = "+ fileCount);    }    if (fileCount >= filesPerKeyStore) {      Debug.message(logName + ":Keystore limit reached");      archiver.archiveKeyStore(logName,location);      Debug.message(logName + ":FilesPerKeystore counter = " + archiver.checkCount());      initializeKeyStore();    }  } catch (  Exception ioe) {    Debug.error(logName + ":SecureFileHandler: Could not archive file",ioe);  }  try {    open(new File(location + PREFIX + logName),false);    writer.write(getFormatter().getHead(this));    headerWritten=true;    int fileCount=archiver.checkCount();    if (fileCount != 0)     writer.write(message);  } catch (  IOException ex) {    Debug.error(logName + ":SecureFileHandler: could not write to file",ex);  }  flush();}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  @Override protected boolean sendIntermediateResponseMessage(IntermediateResponse intermediateResponse){  IntermediateResponseProtocolOp protocolOp=new IntermediateResponseProtocolOp(intermediateResponse.getOID(),intermediateResponse.getValue());  Operation operation=intermediateResponse.getOperation();  LDAPMessage message=new LDAPMessage(operation.getMessageID(),protocolOp,intermediateResponse.getControls());  sendLDAPMessage(message);  return connectionValid;}  }
class C{  public void saveNicknameFor(String fullName){  getAndSaveNicknameFor(fullName);}  }
class C{  void deregisterInternalPlugin(InternalDirectoryServerPlugin plugin){  pluginLock.lock();  try {    deregisterPlugin0(plugin);    plugin.finalizePlugin();  }  finally {    pluginLock.unlock();  }}  }
class C{  public void insertElementAt(int value,int at){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.insertElementAt(value,at);}  }
class C{  void updateDefaultButtonBindings(JRootPane root){  InputMap km=SwingUtilities.getUIInputMap(root,JComponent.WHEN_IN_FOCUSED_WINDOW);  while (km != null && !(km instanceof RootPaneInputMap)) {    km=km.getParent();  }  if (km != null) {    km.clear();    if (root.getDefaultButton() != null) {      Object[] bindings=(Object[])DefaultLookup.get(root,this,"RootPane.defaultButtonWindowKeyBindings");      if (bindings != null) {        LookAndFeel.loadKeyBindings(km,bindings);      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapgetnameditem.class,args);}  }
class C{  public RestException(int errorCode,Object[] params,Throwable cause){  super(cause);  this.errorCode=errorCode;  this.params=params;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public static JsonValue toJsonValue(String json) throws JsonException {  try {    return new JsonValue(MAPPER.readValue(json,Map.class));  } catch (  IOException e) {    throw new JsonException("Failed to parse json",e);  }}  }
class C{  public AESCipher(boolean forEncryption,byte[] key,byte[] iv){  BlockCipher aes=new AESFastEngine();  BlockCipher cbc=new CBCBlockCipher(aes);  bp=new PaddedBufferedBlockCipher(cbc);  KeyParameter kp=new KeyParameter(key);  ParametersWithIV piv=new ParametersWithIV(kp,iv);  bp.init(forEncryption,piv);}  }
class C{  public boolean removeElement(int s){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  return super.removeElement(s);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    if (serverTransactionId == null) {      System.out.println("Note that we can create a new tx here!");      serverTransactionId=sipProvider.getNewServerTransaction(request);      System.out.println("Creating new server transaction for bye " + serverTransactionId);    }    serverTransactionId.sendResponse(response);    System.out.println("We are not creating a dialog for this.");    System.out.println("Dialog is " + serverTransactionId.getDialog());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public InconsistentTypeCode(){  super();}  }
class C{  public AttrSet(Attr[] attrs){  int size=attrs.length;  _attrs=new ArrayList(size);  for (int i=0; i < size; i++) {    _attrs.add(attrs[i]);  }}  }
class C{  protected void remove(SendfileData data){  int rv=Poll.remove(sendfilePollset,data.socket);  if (rv == Status.APR_SUCCESS) {    sendfileCount--;  }  sendfileData.remove(Long.valueOf(data.socket));}  }
class C{  protected void checkInterruptStatus() throws IOException {  if (Thread.interrupted()) {    throw new IOException(sm.getString("channel.nio.interrupted"));  }}  }
class C{  public PolicyException(Throwable nestedException){  super(nestedException);}  }
class C{  static public void assertEquals(String message,float expected,float actual,float delta){  if (Float.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Float(expected),new Float(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Float(expected),new Float(actual));}  }
class C{  public String toString(){  return toDisplayString();}  }
class C{  public Double(){}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  static boolean isSelectionStarted(Spannable buffer){  DragState[] ds;  ds=buffer.getSpans(0,buffer.length(),DragState.class);  return ds.length > 0 && ds[0].mIsSelectionStarted;}  }
class C{  public int hashCode(){  return getActions().hashCode() + scheme.hashCode() + authority.hashCode()+ (path == null ? 0 : path.hashCode());}  }
class C{  private static float lerp(float a,float b,float t){  return a + (b - a) * t;}  }
class C{  public void startHandler(){  if (logger.isTraceEnabled()) {    debugInfo("start");  }  DirectoryServer.deregisterMonitorProvider(this);  DirectoryServer.registerMonitorProvider(this);}  }
class C{  public static String buildX509Certificate(String certAlias) throws IDFFMetaException {  if ((certAlias == null) || (certAlias.trim().length() == 0)) {    return null;  }  if (!keyProviderInitialized) {    initializeKeyStore();  }  X509Certificate cert=keyProvider.getX509Certificate(certAlias);  if (cert != null) {    try {      return Base64.encode(cert.getEncoded(),true);    } catch (    Exception ex) {      if (debug.messageEnabled()) {        debug.message("IDFFMetaSecurityUtils.buildX509Certificate:",ex);      }    }  }  Object[] objs={certAlias};  throw new IDFFMetaException("invalid_cert_alias",objs);}  }
class C{  public TextLayout(AttributedCharacterIterator text,FontRenderContext frc){  if (text == null) {    throw new IllegalArgumentException("Null iterator passed to TextLayout constructor.");  }  int start=text.getBeginIndex();  int limit=text.getEndIndex();  if (start == limit) {    throw new IllegalArgumentException("Zero length iterator passed to TextLayout constructor.");  }  int len=limit - start;  text.first();  char[] chars=new char[len];  int n=0;  for (char c=text.first(); c != CharacterIterator.DONE; c=text.next()) {    chars[n++]=c;  }  text.first();  if (text.getRunLimit() == limit) {    Map<? extends Attribute,?> attributes=text.getAttributes();    Font font=singleFont(chars,0,len,attributes);    if (font != null) {      fastInit(chars,font,attributes,frc);      return;    }  }  standardInit(text,chars,frc);}  }
class C{  public static String format(Date d){  return d == null ? null : format(d.getTime());}  }
class C{  public TextMeasurer(AttributedCharacterIterator text,FontRenderContext frc){  fFrc=frc;  initAll(text);}  }
class C{  public static SearchRequest newSearchRequest(final String name,final SearchScope scope,final String filter,final String... attributeDescriptions){  return Requests.newSearchRequest(name,scope,filter,attributeDescriptions).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public DoneMsg(int serverID,int i){  super(serverID,i);}  }
class C{  public boolean isDoubleMetaphoneEqual(String value1,String value2,boolean alternate){  return doubleMetaphone(value1,alternate).equals(doubleMetaphone(value2,alternate));}  }
class C{  public static byte[] encodeBase64URLSafe(final byte[] binaryData){  return encodeBase64(binaryData,false,true);}  }
class C{  public SubjectConfirmation createSubjectConfirmation(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION,elem);  if (obj == null) {    return new SubjectConfirmationImpl(elem);  } else {    return (SubjectConfirmation)obj;  }}  }
class C{  private void assertContainsNoControl(InternalSearchOperation searchOp){  for (  SearchResultEntry entry : searchOp.getSearchEntries()) {    assertThat(entry.getControls()).as("result entry " + entry + " should contain no control(s)").isEmpty();  }}  }
class C{  public static boolean isCurrentVersionOlderThan(final String latestVersion){  return VersionCheck.isSmallerThan(VersionCheck.retrieveCurrentVersion(),latestVersion);}  }
class C{  public int length(){  return n;}  }
class C{  public void readByteArray(byte[] arr,int offset) throws InvalidDataTypeException {  if (offset >= arr.length) {    throw new InvalidDataTypeException("Unable to find null terminated string");  }  int bufferSize;  logger.finer("Reading from array starting from offset:" + offset);  int size;  String charSetName=getTextEncodingCharSet();  CharsetDecoder decoder=Charset.forName(charSetName).newDecoder();  ByteBuffer buffer=ByteBuffer.wrap(arr,offset,arr.length - offset);  int endPosition=0;  final boolean nullIsOneByte=(charSetName.equals(TextEncoding.CHARSET_ISO_8859_1) || charSetName.equals(TextEncoding.CHARSET_UTF_8));  boolean isNullTerminatorFound=false;  while (buffer.hasRemaining()) {    byte nextByte=buffer.get();    if (nextByte == 0x00) {      if (nullIsOneByte) {        buffer.mark();        buffer.reset();        endPosition=buffer.position() - 1;        logger.finest("Null terminator found starting at:" + endPosition);        isNullTerminatorFound=true;        break;      } else {        if (buffer.hasRemaining()) {          nextByte=buffer.get();          if (nextByte == 0x00) {            buffer.mark();            buffer.reset();            endPosition=buffer.position() - 2;            logger.finest("UTF16:Null terminator found starting  at:" + endPosition);            isNullTerminatorFound=true;            break;          } else {          }        } else {          buffer.mark();          buffer.reset();          endPosition=buffer.position() - 1;          logger.warning("UTF16:Should be two null terminator marks but only found one starting at:" + endPosition);          isNullTerminatorFound=true;          break;        }      }    } else {      if (!nullIsOneByte) {        if (buffer.hasRemaining()) {          buffer.get();        }      }    }  }  if (!isNullTerminatorFound) {    throw new InvalidDataTypeException("Unable to find null terminated string");  }  logger.finest("End Position is:" + endPosition + "Offset:"+ offset);  size=endPosition - offset;  size++;  if (!nullIsOneByte) {    size++;  }  setSize(size);  bufferSize=endPosition - offset;  logger.finest("Text size is:" + bufferSize);  if (bufferSize == 0) {    value="";  } else {    ByteBuffer inBuffer=ByteBuffer.wrap(arr,offset,bufferSize).slice();    CharBuffer outBuffer=CharBuffer.allocate(bufferSize);    decoder.reset();    CoderResult coderResult=decoder.decode(inBuffer,outBuffer,true);    if (coderResult.isError()) {      logger.warning("Problem decoding text encoded null terminated string:" + coderResult.toString());    }    decoder.flush(outBuffer);    outBuffer.flip();    value=outBuffer.toString();  }  logger.config("Read NullTerminatedString:" + value + " size inc terminator:"+ size);}  }
class C{  public static SimpleBindRequest newSimpleBindRequest(){  return new SimpleBindRequestImpl("",EMPTY_BYTES);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FederationMetadataElement createFederationMetadataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationMetadataElementImpl();}  }
class C{  public DocFlavor(String mimeType,String className){  if (className == null) {    throw new NullPointerException();  }  myMimeType=new MimeType(mimeType);  myClassName=className;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("XML","");  assertTrue("hasXMLEmpty",state);}  }
class C{  public void reset(){  m_refs.removeAllElements();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  IdType idType=convert2IdType(type);  String[] params={realm,type,idName,serviceName};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_UNASSIGN_SERVICE",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    amid.unassignService(serviceName);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-unassign-service-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_UNASSIGN_SERVICE",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,serviceName,e.getMessage()};    debugError("UnassignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_UNASSIGN_SERVICE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,serviceName,e.getMessage()};    debugError("UnassignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_UNASSIGN_SERVICE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected void unregisterClusterValve(){  for (Iterator<Valve> iter=valves.iterator(); iter.hasNext(); ) {    ClusterValve valve=(ClusterValve)iter.next();    if (log.isDebugEnabled())     log.debug("Invoking removeValve on " + getContainer() + " with class="+ valve.getClass().getName());    if (valve != null) {      container.getPipeline().removeValve(valve);      valve.setCluster(null);    }  }}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("from_any",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.from_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.INSTANT_TYPE,this);}  }
class C{  public static List<VerificationException> verifyCertificates(Certificate[] certs,KeyStore keystore,Collection<CRL> crls){  return verifyCertificates(certs,keystore,crls,DateTimeUtil.getCurrentTimeCalendar());}  }
class C{  @Override public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  public static Component createHorizontalGlue(){  return new Filler(new Dimension(0,0),new Dimension(0,0),new Dimension(Short.MAX_VALUE,0));}  }
class C{  @Override public void removeChild(Container child){  if (!(child instanceof Wrapper)) {    throw new IllegalArgumentException(sm.getString("standardContext.notWrapper"));  }  super.removeChild(child);}  }
class C{  void appendOp(int length,int op){  int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  m_ops.setOp(totalLen,op);  m_ops.setOp(totalLen + OpMap.MAPINDEX_LENGTH,length);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length);}  }
class C{  public boolean hasMcid(){  return properties != null && properties.containsKey(PdfName.MCID);}  }
class C{  public Node insertBefore(Node newChild,Node refChild){  if (newChild == null) {    throw new IllegalArgumentException("newChild == null!");  }  checkNode(newChild);  checkNode(refChild);  IIOMetadataNode newChildNode=(IIOMetadataNode)newChild;  IIOMetadataNode refChildNode=(IIOMetadataNode)refChild;  IIOMetadataNode previous=null;  IIOMetadataNode next=null;  if (refChild == null) {    previous=this.lastChild;    next=null;    this.lastChild=newChildNode;  } else {    previous=refChildNode.previousSibling;    next=refChildNode;  }  if (previous != null) {    previous.nextSibling=newChildNode;  }  if (next != null) {    next.previousSibling=newChildNode;  }  newChildNode.parent=this;  newChildNode.previousSibling=previous;  newChildNode.nextSibling=next;  if (this.firstChild == refChildNode) {    this.firstChild=newChildNode;  }  ++numChildren;  return newChildNode;}  }
class C{  public static BinaryValue createFromFile(byte[] bytes,File file){  BinaryValue value=new BinaryValue();  value.type=Type.BYTE_ARRAY;  value.bytes=bytes;  value.base64=value.getBase64();  value.hashCode=value.base64.hashCode();  value.file=file;  return value;}  }
class C{  public void test_DivideBigDecimalRoundingModeHALF_EVEN(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.HALF_EVEN;  String c="50000260373164286401361913";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  quietCount=quietCount < startPattern ? quietCount : startPattern;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  @Override public boolean change_layer_action(int p_new_layer){  int r_layer=i_brd.set_layer(p_new_layer);  actlog_start_scope(LogfileScope.CHANGE_LAYER,r_layer);  layer_changed=r_layer == p_new_layer;  return layer_changed;}  }
class C{  public static boolean is(Object a,Object b,@SuppressWarnings("unused") Class<?> callerClass) throws Throwable {  if (a == null && b == null)   return true;  if (a == null || b == null)   return false;  if (a == b || a.equals(b))   return true;  if (b instanceof Class)   if (((Class)b).isInstance(a))   return true;  return false;}  }
class C{  private int internalAwaitAdvance(int phase,QNode node){  releaseWaiters(phase - 1);  boolean queued=false;  int lastUnarrived=0;  int spins=SPINS_PER_ARRIVAL;  long s;  int p;  while ((p=(int)((s=state) >>> PHASE_SHIFT)) == phase) {    if (node == null) {      int unarrived=(int)s & UNARRIVED_MASK;      if (unarrived != lastUnarrived && (lastUnarrived=unarrived) < NCPU)       spins+=SPINS_PER_ARRIVAL;      boolean interrupted=Thread.interrupted();      if (interrupted || --spins < 0) {        node=new QNode(this,phase,false,false,0L);        node.wasInterrupted=interrupted;      }    } else     if (node.isReleasable())     break; else     if (!queued) {      AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;      QNode q=node.next=head.get();      if ((q == null || q.phase == phase) && (int)(state >>> PHASE_SHIFT) == phase)       queued=head.compareAndSet(q,node);    } else {      try {        ForkJoinPool.managedBlock(node);      } catch (      InterruptedException ie) {        node.wasInterrupted=true;      }    }  }  if (node != null) {    if (node.thread != null)     node.thread=null;    if (node.wasInterrupted && !node.interruptible)     Thread.currentThread().interrupt();    if (p == phase && (p=(int)(state >>> PHASE_SHIFT)) == phase)     return abortWait(phase);  }  releaseWaiters(phase);  return p;}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  public static StringBuilder toLowerCase(final ByteSequence b,final StringBuilder builder){  Reject.ifNull(b,builder);  final int origBufferLen=builder.length();  final int length=b.length();  for (int i=0; i < length; i++) {    final int c=b.byteAt(i);    if (c < 0) {      builder.replace(origBufferLen,builder.length(),b.toString().toLowerCase(Locale.ENGLISH));      return builder;    }    final ASCIICharProp cp=ASCIICharProp.valueOf(c);    builder.append(cp.toLowerCase());  }  return builder;}  }
class C{  public boolean isPageInRange(int pageNumber){  for (int ind=0; ind < sequenceStarts.size(); ind++) {    if (sequenceStarts.get(ind) <= pageNumber && pageNumber <= sequenceEnds.get(ind))     return true;  }  return false;}  }
class C{  @RequestMapping(value="/routes",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<List<RouteVM>> activeRoutes(){  List<Route> routes=routeLocator.getRoutes();  List<RouteVM> routeVMs=new ArrayList<>();  routes.forEach(null);  return new ResponseEntity<>(routeVMs,HttpStatus.OK);}  }
class C{  static void testFailLoadAndGc() throws TestFailed {  try {    BrokenDexLoader loader;    loader=new BrokenDexLoader(ClassLoader.getSystemClassLoader());    loader.findBrokenClass();    System.err.println("ERROR: Inaccessible was accessible");  } catch (  InvocationTargetException ite) {    Throwable cause=ite.getCause();    if (cause instanceof NullPointerException) {      System.err.println("Got expected ITE/NPE");    } else {      System.err.println("Got unexpected ITE");      ite.printStackTrace();    }  }}  }
class C{  public int locationToIndex(JList a,Point b){  int returnValue=((ListUI)(uis.elementAt(0))).locationToIndex(a,b);  for (int i=1; i < uis.size(); i++) {    ((ListUI)(uis.elementAt(i))).locationToIndex(a,b);  }  return returnValue;}  }
class C{  protected void _skipIncomplete() throws IOException {  _tokenIncomplete=false;  final int type=((_typeByte >> 5) & 0x7);  if (type != CBORConstants.MAJOR_TYPE_TEXT && type == CBORConstants.MAJOR_TYPE_TEXT) {    _throwInternal();  }  final int lowBits=_typeByte & 0x1F;  if (lowBits <= 23) {    if (lowBits > 0) {      _skipBytes(lowBits);    }    return;  }switch (lowBits) {case 24:    _skipBytes(_decode8Bits());  break;case 25:_skipBytes(_decode16Bits());break;case 26:_skipBytes(_decode32Bits());break;case 27:_skipBytesL(_decode64Bits());break;case 31:_skipChunked(type);break;default :_invalidToken(_typeByte);}}  }
class C{  private void refresh() throws UMSException {  m_schema=m_datalayer.getSchema(m_principal);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menu.add(Menu.NONE,MENU_HELP,Menu.NONE,getString(R.string.help)).setIcon(android.R.drawable.ic_menu_help).setAlphabeticShortcut('h');  return super.onCreateOptionsMenu(menu);}  }
class C{  public CLIException(Throwable cause,int exitCode){  super(cause);  this.exitCode=exitCode;}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  static long readEpochSec(DataInput in) throws IOException {  int hiByte=in.readByte() & 255;  if (hiByte == 255) {    return in.readLong();  } else {    int midByte=in.readByte() & 255;    int loByte=in.readByte() & 255;    long tot=((hiByte << 16) + (midByte << 8) + loByte);    return (tot * 900) - 4575744000L;  }}  }
class C{  public GenericObject first(){  return (SIPObject)super.first();}  }
class C{  public void addOCGRadioGroup(List<PdfLayer> group){  PdfArray ar=new PdfArray();  for (  PdfLayer layer : group) {    if (layer.getTitle() == null)     ar.add(layer.getPdfObject().getIndirectReference());  }  if (ar.size() != 0) {    PdfDictionary d=getPdfObject().getAsDictionary(PdfName.D);    if (d == null) {      d=new PdfDictionary();      getPdfObject().put(PdfName.D,d);    }    PdfArray radioButtonGroups=d.getAsArray(PdfName.RBGroups);    if (radioButtonGroups == null) {      radioButtonGroups=new PdfArray();      d.put(PdfName.RBGroups,radioButtonGroups);      d.setModified();    } else {      radioButtonGroups.setModified();    }    radioButtonGroups.add(ar);  }}  }
class C{  public void invokeLDIFImportBeginPlugins(LDIFImportConfig importConfig){  for (  DirectoryServerPlugin p : ldifImportBeginPlugins) {    p.doLDIFImportBegin(importConfig);  }}  }
class C{  private String mapStyleName(String style){  if (styleNameMapping == null) {    return style;  }  String retValue=styleNameMapping.get(style);  return (retValue == null) ? style : retValue;}  }
class C{  protected void fireColumnSelectionChanged(ListSelectionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      ((TableColumnModelListener)listeners[i + 1]).columnSelectionChanged(e);    }  }}  }
class C{  protected int[] generateWorkingKey(boolean encrypting,byte[] key){  int[] newKey=new int[32];  boolean[] pc1m=new boolean[56], pcr=new boolean[56];  for (int j=0; j < 56; j++) {    int l=pc1[j];    pc1m[j]=((key[l >>> 3] & bytebit[l & 07]) != 0);  }  for (int i=0; i < 16; i++) {    int l, m, n;    if (encrypting) {      m=i << 1;    } else {      m=(15 - i) << 1;    }    n=m + 1;    newKey[m]=newKey[n]=0;    for (int j=0; j < 28; j++) {      l=j + totrot[i];      if (l < 28) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=28; j < 56; j++) {      l=j + totrot[i];      if (l < 56) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=0; j < 24; j++) {      if (pcr[pc2[j]]) {        newKey[m]|=bigbyte[j];      }      if (pcr[pc2[j + 24]]) {        newKey[n]|=bigbyte[j];      }    }  }  for (int i=0; i != 32; i+=2) {    int i1, i2;    i1=newKey[i];    i2=newKey[i + 1];    newKey[i]=((i1 & 0x00fc0000) << 6) | ((i1 & 0x00000fc0) << 10) | ((i2 & 0x00fc0000) >>> 10)| ((i2 & 0x00000fc0) >>> 6);    newKey[i + 1]=((i1 & 0x0003f000) << 12) | ((i1 & 0x0000003f) << 16) | ((i2 & 0x0003f000) >>> 4)| (i2 & 0x0000003f);  }  return newKey;}  }
class C{  public static int createImageTexture(ByteBuffer data,int width,int height,int format){  int[] textureHandles=new int[1];  int textureHandle;  GLES20.glGenTextures(1,textureHandles,0);  textureHandle=textureHandles[0];  GlUtil.checkGlError("glGenTextures");  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,textureHandle);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GlUtil.checkGlError("loadImageTexture");  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,format,width,height,0,format,GLES20.GL_UNSIGNED_BYTE,data);  GlUtil.checkGlError("loadImageTexture");  return textureHandle;}  }
class C{  public ExternalBlankSignatureContainer(PdfDictionary sigDic){  this.sigDic=sigDic;}  }
class C{  public void addOptionalAttribute(Attr attr){  if (m_optional == null) {    m_optional=new AttrSet();  }  m_optional.add(attr);}  }
class C{  public final void testHashCodeEqualsObject(){  CertPath cp1=new MyCertPath(testEncoding);  CertPath cp2=new MyCertPath(testEncoding);  assertTrue((cp1.hashCode() == cp2.hashCode()) && cp1.equals(cp2));}  }
class C{  public byte[] signBuffer(String data,String certAlias,String algorithm) throws FSSignatureException {  if (data == null) {    FSUtils.debug.error("FSSignatureProvider.signBuffer: data to be " + "signed is null.");    throw new FSSignatureException(FSUtils.bundle.getString("nullInput"));  }  if (certAlias == null || certAlias.length() == 0) {    FSUtils.debug.error("FSSignatureProvider.signBuffer: certAlias is " + "null.");    throw new FSSignatureException(FSUtils.bundle.getString("nullInput"));  }  try {    PrivateKey privateKey=(PrivateKey)keystore.getPrivateKey(certAlias);    if (algorithm == null || algorithm.length() == 0) {      algorithm=IFSConstants.DEF_SIG_ALGO_JCA;      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSignatureProvider.signBuffer: " + "algorithm is null assigning algorithm= " + algorithm);      }    }    if (!isValidAlgorithm(algorithm)) {      FSUtils.debug.error("FSSignatureProvider.signBuffer: " + "algorithm is invalid ");      throw new FSSignatureException(FSUtils.bundle.getString("invalidAlgorithm"));    }    Signature sig=Signature.getInstance(algorithm);    sig.initSign(privateKey);    sig.update(data.getBytes());    return sig.sign();  } catch (  Exception ex) {    String stackTrace=null;    ByteArrayOutputStream bop=new ByteArrayOutputStream();    ex.printStackTrace(new PrintStream(bop));    stackTrace=bop.toString();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureProvider.signBuffer: " + stackTrace);    }    throw new FSSignatureException(ex.getMessage());  }}  }
class C{  public SmsAggregatingAgentsQueryHandler(ServiceSchema schema,Debug debug) throws SMSException {  this.schema=schema;  this.debug=debug;  this.serviceName=schema.getServiceName();  this.serviceVersion=schema.getVersion();  for (  String subSchema : schema.getSubSchemaNames()) {    ServiceSchema subServiceSchema=schema.getSubSchema(subSchema);    converters.put(subSchema,new SmsJsonConverter(subServiceSchema));  }}  }
class C{  public static PrintRequestAttributeSet synchronizedView(PrintRequestAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedPrintRequestAttributeSet(attributeSet);}  }
class C{  public static final String createXMLMessage(String msgKey,Object args[]){  return createMsg(XMLBundle,msgKey,args);}  }
class C{  public static boolean hasBinarySyntax(String attrName,Schema schema){  return attrName.toLowerCase().contains(";binary") || hasAnySyntax(attrName,schema,binarySyntaxOIDs);}  }
class C{  public double nextDouble(double least,double bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextDouble() * (bound - least) + least;}  }
class C{  public static void validate(Privilege privilege,PrivilegeValidator privilegeValidator) throws EntitlementException {  if (containsUndesiredCharacters(privilege.getName())) {    throw new EntitlementException(INVALID_VALUE,new Object[]{"privilege name " + privilege.getName()});  }  privilegeValidator.validatePrivilege(privilege);}  }
class C{  protected int drawEchoCharacter(Graphics g,int x,int y,char c){  ONE[0]=c;  SwingUtilities2.drawChars(Utilities.getJComponent(this),g,ONE,0,1,x,y);  return x + g.getFontMetrics().charWidth(c);}  }
class C{  public boolean equals(Object object){  if (object == null || !(object instanceof AttributeSet)) {    return false;  }  AttributeSet aset=(AttributeSet)object;  if (aset.size() != size()) {    return false;  }  Attribute[] attrs=toArray();  for (int i=0; i < attrs.length; i++) {    if (!aset.containsValue(attrs[i])) {      return false;    }  }  return true;}  }
class C{  public int hashCode(){  return value;}  }
class C{  @OnMessage public void echoPongMessage(PongMessage pm){}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  private void process(Message message,Bindings bindings){  for (  String s : this.removedHeaders) {    message.getHeaders().remove(s);  }  for (  String key : this.addedHeaders.keySet()) {    for (    Expression<String> expression : this.addedHeaders.get(key)) {      String eval=expression.eval(bindings);      if (eval != null) {        message.getHeaders().add(key,eval);      }    }  }}  }
class C{  public BaseID createBaseID(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.BASEID,elem);  if (obj == null) {    return new BaseIDImpl(elem);  } else {    return (BaseID)obj;  }}  }
class C{  public void endDocument() throws SAXException {  if (DEBUG)   System.out.println("endDocument");  charactersFlush();  m_nextsib.setElementAt(NULL,0);  if (m_firstch.elementAt(0) == NOTPROCESSED)   m_firstch.setElementAt(NULL,0);  if (DTM.NULL != m_previous)   m_nextsib.setElementAt(DTM.NULL,m_previous);  m_parents=null;  m_prefixMappings=null;  m_contextIndexes=null;  m_endDocumentOccured=true;  m_locator=null;}  }
class C{  public TreeModelEvent(Object source,TreePath path,int[] childIndices,Object[] children){  super(source);  this.path=path;  this.childIndices=childIndices;  this.children=children;}  }
class C{  public void processResponse(SIPResponse response,MessageChannel incomingMessageChannel,SIPDialog dialog){  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {    logger.logDebug("PROCESSING INCOMING RESPONSE" + response.encodeMessage(new StringBuilder()));  }  if (listeningPoint == null) {    if (logger.isLoggingEnabled())     logger.logError("Dropping message: No listening point" + " registered!");    return;  }  if (sipStack.checkBranchId() && !Utils.getInstance().responseBelongsToUs(response)) {    if (logger.isLoggingEnabled()) {      logger.logError("Dropping response - topmost VIA header does not originate from this stack");    }    return;  }  SipProviderImpl sipProvider=listeningPoint.getProvider();  if (sipProvider == null) {    if (logger.isLoggingEnabled()) {      logger.logError("Dropping message:  no provider");    }    return;  }  if (sipProvider.getSipListener() == null) {    if (logger.isLoggingEnabled()) {      logger.logError("No listener -- dropping response!");    }    return;  }  SIPClientTransaction transaction=(SIPClientTransaction)this.transactionChannel;  SIPTransactionStack sipStackImpl=sipProvider.sipStack;  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {    logger.logDebug("Transaction = " + transaction);  }  if (transaction == null) {    if (dialog != null) {      if (response.getStatusCode() / 100 != 2) {        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("Response is not a final response and dialog is found for response -- dropping response!");        }        return;      } else       if (dialog.getState() == DialogState.TERMINATED) {        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("Dialog is terminated -- dropping response!");        }        return;      } else {        boolean ackAlreadySent=false;        if (dialog.isAckSeen() && dialog.getLastAckSent() != null) {          if (dialog.getLastAckSent().getCSeq().getSeqNumber() == response.getCSeq().getSeqNumber()) {            ackAlreadySent=true;          }        }        if (ackAlreadySent && response.getCSeq().getMethod().equals(dialog.getMethod())) {          try {            if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {              logger.logDebug("Retransmission of OK detected: Resending last ACK");            }            dialog.resendAck();            return;          } catch (          SipException ex) {            logger.logError("could not resend ack",ex);          }        }      }    }    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {      logger.logDebug("could not find tx, handling statelessly Dialog =  " + dialog);    }    ResponseEventExt sipEvent=new ResponseEventExt(sipProvider,transaction,dialog,(Response)response);    if (sipStack.getMaxForkTime() != 0 && SIPTransactionStack.isDialogCreated(response.getCSeqHeader().getMethod())) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("Trying to find forked Transaction for forked id " + response.getForkId());      }      SIPClientTransaction forked=this.sipStack.getForkedTransaction(response.getForkId());      if (dialog != null && forked != null) {        dialog.checkRetransmissionForForking(response);        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("original dialog " + forked.getDefaultDialog() + " forked dialog "+ dialog);        }        if (forked.getDefaultDialog() != null && !dialog.equals(forked.getDefaultDialog())) {          if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {            logger.logDebug("forkedId= " + response.getForkId() + " forked dialog "+ dialog+ " original tx "+ forked+ " original dialog "+ forked.getDefaultDialog());          }          sipEvent.setOriginalTransaction(forked);          sipEvent.setForkedResponse(true);          if (transaction == null && dialog.getState() == DialogState.EARLY && response.getStatusCode() >= 200 && response.getStatusCode() < 300) {            dialog.setLastResponse(transaction,response);          }        }      }    }    sipEvent.setRetransmission(response.isRetransmission());    sipEvent.setRemoteIpAddress(response.getRemoteAddress().getHostAddress());    sipEvent.setRemotePort(response.getRemotePort());    sipProvider.handleEvent(sipEvent,transaction);    return;  }  ResponseEventExt responseEvent=new ResponseEventExt(sipProvider,(ClientTransactionExt)transaction,dialog,(Response)response);  if (sipStack.getMaxForkTime() != 0 && SIPTransactionStack.isDialogCreated(response.getCSeqHeader().getMethod())) {    SIPClientTransaction forked=this.sipStack.getForkedTransaction(response.getForkId());    if (dialog != null && forked != null) {      dialog.checkRetransmissionForForking(response);      if (forked.getDefaultDialog() != null && !dialog.equals(forked.getDefaultDialog())) {        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("forkedId= " + response.getForkId() + " forked dialog "+ dialog+ " original tx "+ forked+ " original dialog "+ forked.getDefaultDialog());        }        responseEvent.setOriginalTransaction(forked);        responseEvent.setForkedResponse(true);      }    }  }  if (dialog != null && response.getStatusCode() != 100) {    dialog.setLastResponse(transaction,response);    transaction.setDialog(dialog,dialog.getDialogId());  }  responseEvent.setRetransmission(response.isRetransmission());  responseEvent.setRemoteIpAddress(response.getRemoteAddress().getHostAddress());  responseEvent.setRemotePort(response.getRemotePort());  sipProvider.handleEvent(responseEvent,transaction);}  }
class C{  public void testCase20(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=-1;  int bSign=1;  byte rBytes[]={-13,20,-74,-57,-27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public void inputMethodTextChanged(InputMethodEvent e){  ((InputMethodListener)a).inputMethodTextChanged(e);  ((InputMethodListener)b).inputMethodTextChanged(e);}  }
class C{  public Cursor fetch(Long ruleActionParameterID){  if (ruleActionParameterID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_RULEACTIONPARAMETERID + "=" + ruleActionParameterID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  void afterTopLevelExec(){}  }
class C{  public void addCertificate(X509CertificateHolder certificate) throws CMSException {  certs.add(certificate.toASN1Structure());}  }
class C{  PreviousWordAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof JobImpressions;}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  public boolean verifyTimestampImprint() throws GeneralSecurityException {  if (timeStampToken == null)   return false;  TimeStampTokenInfo info=timeStampToken.getTimeStampInfo();  MessageImprint imprint=info.toASN1Structure().getMessageImprint();  String algOID=info.getHashAlgorithm().getAlgorithm().getId();  byte[] md=SignUtils.getMessageDigest(DigestAlgorithms.getDigest(algOID)).digest(digest);  byte[] imphashed=imprint.getHashedMessage();  return Arrays.equals(md,imphashed);}  }
class C{  public Name addAll(Name suffix) throws InvalidNameException {  if (suffix instanceof CompoundName) {    impl.addAll(suffix.getAll());    return this;  } else {    throw new InvalidNameException("Not a compound name: " + suffix.toString());  }}  }
class C{  private void updateFakeSpanBottomParameters(){  fakeSpanBottomMin=fakeSpanBottom[0];  fakeSpanBottomMax=fakeSpanBottom[0];  for (int i=1; i < mSpanCount; i++) {    if (fakeSpanBottomMin > fakeSpanBottom[i])     fakeSpanBottomMin=fakeSpanBottom[i];    if (fakeSpanBottomMax < fakeSpanBottom[i])     fakeSpanBottomMax=fakeSpanBottom[i];  }  for (int i=0; i < mSpanCount; i++) {    if (fakeSpanBottom[i] == fakeSpanBottomMin) {      fakeFirstOneEmptyBottomSpanIndex=i;      break;    }  }  fakeFirstTwoEmptyBottomSpanIndex=-1;  for (int i=fakeFirstOneEmptyBottomSpanIndex; i < mSpanCount - 1; i++) {    if (fakeSpanBottom[i] == fakeSpanBottomMin && fakeSpanBottom[i + 1] == fakeSpanBottomMin) {      fakeFirstTwoEmptyBottomSpanIndex=i;      break;    }  }}  }
class C{  public Object instantiateChild(String beanName) throws IOException, ClassNotFoundException {  BeanContext bc=getBeanContextPeer();  return Beans.instantiate(bc.getClass().getClassLoader(),beanName,bc);}  }
class C{  void old(){  mYoung=false;}  }
class C{  public void addColumn(int width){}  }
class C{  public Set<String> searchSubOrgNames(SSOToken token,String dn,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder,boolean recursive) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),dn,filter,new Integer(numOfEntries),Boolean.valueOf(sortResults),Boolean.valueOf(ascendingOrder),Boolean.valueOf(recursive)};    return ((Set<String>)client.send(client.encodeMessage("searchSubOrgNames",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null));  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject.searchSubOrgNames",re);    throw (new SMSException(re,"sms-JAXRPC-suborg-cannot-search"));  }}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeNull(OP_TYPE_UNBIND_REQUEST);}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  public ContactHeader createRiContact() throws TckInternalError {  try {    ContactHeader contact=riHeaderFactory.createContactHeader();    ListeningPoint lp=riSipProvider.getListeningPoints()[0];    SipURI srcSipURI=riAddressFactory.createSipURI(null,lp.getIPAddress());    srcSipURI.setPort(lp.getPort());    srcSipURI.setTransportParam(lp.getTransport());    Address address=riAddressFactory.createAddress(srcSipURI);    address.setDisplayName("RI Contact");    contact.setAddress(address);    return contact;  } catch (  Exception ex) {    throw new TckInternalError(ex.getMessage());  }}  }
class C{  public UnionMember(){}  }
class C{  public InvalidPreferencesFormatException(String message){  super(message);}  }
class C{  public Set createFilteredRoles(Map roles) throws AMException, SSOException {  Iterator iter=roles.keySet().iterator();  Set result=new HashSet();  while (iter.hasNext()) {    String roleName=(String)iter.next();    String roleDN=AMNamingAttrManager.getNamingAttr(FILTERED_ROLE) + "=" + roleName+ ","+ entryDN;    Map attributes=(Map)roles.get(roleName);    AMFilteredRoleImpl roleImpl=new AMFilteredRoleImpl(token,roleDN);    if (!attributes.isEmpty()) {      Set aciSet=(Set)attributes.remove("iplanet-am-role-aci-list");      if ((aciSet != null) && (!aciSet.isEmpty())) {        Iterator iter2=aciSet.iterator();        Set newAciSet=new HashSet();        while (iter2.hasNext()) {          String acis=(String)iter2.next();          StringTokenizer stz=new StringTokenizer(acis,"##");          while (stz.hasMoreTokens()) {            newAciSet.add(stz.nextToken());          }        }        attributes.put("iplanet-am-role-aci-list",replaceAciListMacros(newAciSet,roleDN,entryDN,null,null));      }    }    roleImpl.setAttributes(attributes);    roleImpl.create();    result.add(roleImpl);  }  return result;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void inverseSearchAdd(String unstack){  inverseSearchAdd(inverseSearch,stack,unstack);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(super.toString() + "IssuingDistributionPoint [\n  ");  if (fullName != null) {    sb.append("    fullName:\n    " + fullName + "\n");  }  if (relativeName != null) {    sb.append("    relativeName:\n     " + relativeName + "\n");  }  sb.append("    onlyContainsUserCerts:\n     " + onlyContainsUserCerts + "\n");  sb.append("    onlyContainsCACerts:\n     " + onlyContainsCACerts + "\n");  if (reasonFlags != null) {    sb.append("   ReasonFlags:\n");    for (int i=0; i < reasonFlags.length; i++) {      if (reasonFlags[i]) {        sb.append("    " + reasonToString(i) + "\n");      }    }  }  sb.append("    indirectCRL:\n     " + indirectCRL + "\n");  return sb.toString();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.EncryptionTokenElement createEncryptionTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.EncryptionTokenElementImpl();}  }
class C{  public static ImageTypeSpecifier createPacked(ColorSpace colorSpace,int redMask,int greenMask,int blueMask,int alphaMask,int transferType,boolean isAlphaPremultiplied){  return new ImageTypeSpecifier.Packed(colorSpace,redMask,greenMask,blueMask,alphaMask,transferType,isAlphaPremultiplied);}  }
class C{  SmsRouteTreeBuilder filtered(Filter filter){  this.filter=filter;  return this;}  }
class C{  public FurnaceRecipe(ItemStack result,Material source){  this(result,source,0,0);}  }
class C{  public void createAuthenticationDomain(Map attrValues,Set providers) throws AMConsoleException {  String realm=(String)AMAdminUtils.getValue((Set)attrValues.get(SINGLE_CHOICE_REALM));  String status=(String)AMAdminUtils.getValue((Set)attrValues.get(SINGLE_CHOICE_STATUS));  String name=(String)AMAdminUtils.getValue((Set)attrValues.get(TF_NAME));  if (name.trim().length() == 0) {    throw new AMConsoleException("authdomain.authentication.domain.name.missing.message");  }  String[] param={name};  logEvent("ATTEMPT_CREATE_AUTH_DOMAIN",param);  try {    CircleOfTrustDescriptor descriptor=new CircleOfTrustDescriptor(name,realm,status);    descriptor.setTrustedProviders(providers);    descriptor.setCircleOfTrustDescription((String)AMAdminUtils.getValue((Set)attrValues.get(TF_DESCRIPTION)));    descriptor.setIDFFReaderServiceURL((String)AMAdminUtils.getValue((Set)attrValues.get(TF_IDFF_READER_SERVICE_URL)));    descriptor.setIDFFWriterServiceURL((String)AMAdminUtils.getValue((Set)attrValues.get(TF_IDFF_WRITER_SERVICE_URL)));    descriptor.setSAML2ReaderServiceURL((String)AMAdminUtils.getValue((Set)attrValues.get(TF_SAML2_READER_SERVICE_URL)));    descriptor.setSAML2WriterServiceURL((String)AMAdminUtils.getValue((Set)attrValues.get(TF_SAML2_WRITER_SERVICE_URL)));    CircleOfTrustManager manager=getCircleOfTrustManager();    manager.createCircleOfTrust(realm,descriptor);    logEvent("SUCCEED_CREATE_AUTH_DOMAIN",param);  } catch (  COTException e) {    String strError=getErrorString(e);    String[] paramsEx={name,strError};    logEvent("FEDERATION_EXCEPTION_CREATE_AUTH_DOMAIN",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  dropAllTables(db);  onCreate(db);}  }
class C{  public void onSettings(View v){  Intent intent=new Intent(this,ConfigPrefsActivity.class);  intent.putExtra(ConfigPrefs.PREFS_TYPE,ConfigPrefs.VIDEO_AND_CONNECTION);  intent.putExtra(ConfigPrefs.FIXED_FRAME_SIZE,true);  intent.putExtra(ConfigPrefs.FIXED_FRAME_RATE,true);  startActivity(intent);}  }
class C{  public AuthnContext createAuthnContext(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_CONTEXT,xml);  if (obj == null) {    return new AuthnContextImpl(xml);  } else {    return (AuthnContext)obj;  }}  }
class C{  @Override public Object clone(){  PrivilegeSubject cloned=null;  try {    cloned=(PrivilegeSubject)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (state != null) {    cloned.state=state;  }  return cloned;}  }
class C{  public void pauseContextVersion(Context ctxt,String hostName,String contextPath,String version){  hostName=renameWildcardHost(hostName);  ContextVersion contextVersion=findContextVersion(hostName,contextPath,version,true);  if (contextVersion == null || !ctxt.equals(contextVersion.object)) {    return;  }  contextVersion.markPaused();}  }
class C{  public boolean isUnmappable(){  return this.type == TYPE_UNMAPPABLE_CHAR;}  }
class C{  protected TreeModelListener createTreeModelListener(){  return new TreeModelHandler();}  }
class C{  protected void paint(SynthContext context,Graphics g){  recalculateIfInsetsChanged();  recalculateIfOrientationChanged();  Rectangle clip=g.getClipBounds();  if (lastSize == null || !lastSize.equals(slider.getSize())) {    calculateGeometry();  }  if (paintValue) {    FontMetrics fm=SwingUtilities2.getFontMetrics(slider,g);    int labelWidth=context.getStyle().getGraphicsUtils(context).computeStringWidth(context,g.getFont(),fm,"" + slider.getValue());    valueRect.x=thumbRect.x + (thumbRect.width - labelWidth) / 2;    if (slider.getOrientation() == JSlider.HORIZONTAL) {      if (valueRect.x + labelWidth > insetCache.left + contentRect.width) {        valueRect.x=(insetCache.left + contentRect.width) - labelWidth;      }      valueRect.x=Math.max(valueRect.x,0);    }    g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));    context.getStyle().getGraphicsUtils(context).paintText(context,g,"" + slider.getValue(),valueRect.x,valueRect.y,-1);  }  if (slider.getPaintTrack() && clip.intersects(trackRect)) {    SynthContext subcontext=getContext(slider,Region.SLIDER_TRACK);    paintTrack(subcontext,g,trackRect);    subcontext.dispose();  }  if (clip.intersects(thumbRect)) {    SynthContext subcontext=getContext(slider,Region.SLIDER_THUMB);    paintThumb(subcontext,g,thumbRect);    subcontext.dispose();  }  if (slider.getPaintTicks() && clip.intersects(tickRect)) {    paintTicks(g);  }  if (slider.getPaintLabels() && clip.intersects(labelRect)) {    paintLabels(g);  }}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSLogoutNotification.toURLEncodedQueryString: " + "providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSLogoutNotification.toURLEncodedQueryString: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  public void printIndent(int indentLevel){  String indent="";  indentLevel=indentLevel * INDENT_WIDTH;  for (int i=0; i < indentLevel; i++) {    indent=indent + " ";  }  writer.print(indent);}  }
class C{  public void testPosNegSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=-1;  byte rBytes[]={0,-6,-80,72,8,75,2,-79,34,16,-119};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void receiveMonitorDataResponse(MonitorMsg msg,int serverId){synchronized (pendingMonitorDataLock) {    if (pendingMonitorData == null) {      logger.debug(INFO_IGNORING_REMOTE_MONITOR_DATA,domain.getBaseDN(),msg.getSenderID());      return;    }    try {      pendingMonitorData.setRSState(msg.getSenderID(),msg.getReplServerDbState());      for (      int dsServerId : toIterable(msg.ldapIterator())) {        ServerState dsServerState=msg.getLDAPServerState(dsServerId);        pendingMonitorData.setMaxCSNs(dsServerState);        pendingMonitorData.setLDAPServerState(dsServerId,dsServerState);        pendingMonitorData.setFirstMissingDate(dsServerId,msg.getLDAPApproxFirstMissingDate(dsServerId));      }      for (      int rsServerId : toIterable(msg.rsIterator())) {        long newFmd=msg.getRSApproxFirstMissingDate(rsServerId);        if (rsServerId == domain.getLocalRSServerId()) {          for (          DataServerHandler ds : domain.getConnectedDSs().values()) {            int connectedServerId=ds.getServerId();            pendingMonitorData.setFirstMissingDate(connectedServerId,newFmd);          }        } else {          ReplicationServerHandler rsjHdr=domain.getConnectedRSs().get(rsServerId);          if (rsjHdr != null) {            for (            int remoteServerId : rsjHdr.getConnectedDirectoryServerIds()) {              pendingMonitorData.setFirstMissingDate(remoteServerId,newFmd);            }          }        }      }    } catch (    RuntimeException e) {      logger.error(ERR_PROCESSING_REMOTE_MONITOR_DATA,e.getMessage() + " " + stackTraceToSingleLineString(e));    } finally {      if (pendingMonitorDataServerIDs.remove(serverId)) {        pendingMonitorDataLatch.countDown();      }    }  }}  }
class C{  public Object remove(Object key){  rwlock.writeLock().lock();  try {    Entry tab[]=table;    int hash=key.hashCode();    int index=(hash & 0x7FFFFFFF) % tab.length;    for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {      if ((e.hash == hash) && e.key.equals(key)) {        modCount++;        if (prev != null) {          prev.next=e.next;        } else {          tab[index]=e.next;        }        count--;        Object oldValue=e.value;        e.value=null;        lruTracker.remove(e);        return oldValue;      }    }  }  finally {    rwlock.writeLock().unlock();  }  return null;}  }
class C{  public static int resetPostConnectCount(){  return postConnectCounter.getAndSet(0);}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeLengthMismatchArrayAsEnumerated() throws Exception {  super.testDecodeLengthMismatchArrayAsEnumerated();}  }
class C{  public void forwardTo(RequestContext rc){  super.bypassForwardTo(rc);}  }
class C{  public StringIndexOutOfBoundsException(String s,int offset,int count){  this(s.length(),offset,count);}  }
class C{  public void keyPressed(KeyEvent e){  if (tree != null && isNavigationKey(e)) {    prefix="";    typedString="";    lastTime=0L;  }}  }
class C{  public void arrayLoad(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IALOAD));}  }
class C{  private byte[] decodePEM(InputStream inStream,byte[] boundary_suffix) throws IOException {  int ch;  for (int i=1; i < PEM_BEGIN.length; ++i) {    if (PEM_BEGIN[i] != (ch=inStream.read())) {      throw new IOException("Incorrect PEM encoding: '-----BEGIN" + ((boundary_suffix == null) ? "" : new String(boundary_suffix)) + "' is expected as opening delimiter boundary.");    }  }  if (boundary_suffix == null) {    while ((ch=inStream.read()) != '\n') {      if (ch == -1) {        throw new IOException("Incorrect PEM encoding: EOF before content");      }    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw new IOException("Incorrect PEM encoding: '-----BEGIN" + new String(boundary_suffix) + "' is expected as opening delimiter boundary.");      }    }    if ((ch=inStream.read()) == '\r') {      ch=inStream.read();    }    if (ch != '\n') {      throw new IOException("Incorrect PEM encoding: newline expected after " + "opening delimiter boundary");    }  }  int size=1024;  byte[] buff=new byte[size];  int index=0;  while ((ch=inStream.read()) != '-') {    if (ch == -1) {      throw new IOException("Incorrect Base64 encoding: EOF without closing delimiter");    }    buff[index++]=(byte)ch;    if (index == size) {      byte[] newbuff=new byte[size + 1024];      System.arraycopy(buff,0,newbuff,0,size);      buff=newbuff;      size+=1024;    }  }  if (buff[index - 1] != '\n') {    throw new IOException("Incorrect Base64 encoding: newline expected before " + "closing boundary delimiter");  }  for (int i=1; i < PEM_END.length; ++i) {    if (PEM_END[i] != inStream.read()) {      throw badEnd(boundary_suffix);    }  }  if (boundary_suffix == null) {    while (((ch=inStream.read()) != -1) && (ch != '\n') && (ch != '\r')) {    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw badEnd(boundary_suffix);      }    }  }  inStream.mark(1);  while (((ch=inStream.read()) != -1) && (ch == '\n' || ch == '\r')) {    inStream.mark(1);  }  inStream.reset();  buff=Base64.decode(buff,index);  if (buff == null) {    throw new IOException("Incorrect Base64 encoding");  }  return buff;}  }
class C{  public Name addAll(Name suffix) throws InvalidNameException {  if (suffix instanceof CompositeName) {    impl.addAll(suffix.getAll());    return this;  } else {    throw new InvalidNameException("Not a composite name: " + suffix.toString());  }}  }
class C{  private static void delete(File fileToDelete){  if (!fileToDelete.delete()) {    message("Unable to delete file: " + fileToDelete.getPath());  }}  }
class C{  public static boolean acquireExclusiveLock(String lockFile,StringBuilder failureReason){synchronized (mapLock) {    if (exclusiveLocks.containsKey(lockFile)) {      failureReason.append(ERR_FILELOCKER_LOCK_EXCLUSIVE_REJECTED_BY_EXCLUSIVE.get(lockFile));      return false;    }    if (sharedLocks.containsKey(lockFile)) {      failureReason.append(ERR_FILELOCKER_LOCK_EXCLUSIVE_REJECTED_BY_SHARED.get(lockFile));      return false;    }    File f=getFileForPath(lockFile);    try {      if (!f.exists()) {        f.createNewFile();      }    } catch (    Exception e) {      logger.traceException(e);      failureReason.append(ERR_FILELOCKER_LOCK_EXCLUSIVE_FAILED_CREATE.get(lockFile,getExceptionMessage(e)));      return false;    }    FileChannel channel=null;    RandomAccessFile raf=null;    try {      raf=new RandomAccessFile(lockFile,"rw");      channel=raf.getChannel();    } catch (    Exception e) {      logger.traceException(e);      failureReason.append(ERR_FILELOCKER_LOCK_EXCLUSIVE_FAILED_OPEN.get(lockFile,getExceptionMessage(e)));      close(raf);      return false;    }    FileLock fileLock;    try {      fileLock=channel.tryLock(0L,Long.MAX_VALUE,false);    } catch (    Exception e) {      logger.traceException(e);      failureReason.append(ERR_FILELOCKER_LOCK_EXCLUSIVE_FAILED_LOCK.get(lockFile,getExceptionMessage(e)));      close(channel,raf);      return false;    }    if (fileLock == null) {      failureReason.append(ERR_FILELOCKER_LOCK_EXCLUSIVE_NOT_GRANTED.get(lockFile));      close(channel,raf);      return false;    } else {      exclusiveLocks.put(lockFile,fileLock);      return true;    }  }}  }
class C{  public void clearWarnedTime(){  logger.trace("Clearing warned time for user %s",userDNString);  if (getWarnedTime() >= 0) {    warnedTime=-1;    clearAttribute(OP_ATTR_PWPOLICY_WARNED_TIME);    logger.trace("Cleared the warned time for user %s",userDNString);  }}  }
class C{  final boolean isOwnedBy(AbstractQueuedSynchronizer sync){  return sync == AbstractQueuedSynchronizer.this;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  LambdaFormBuffer replaceFunctions(NamedFunction[] oldFns,NamedFunction[] newFns,Object... forArguments){  assert (inTrans());  if (oldFns.length == 0)   return this;  for (int i=arity; i < length; i++) {    Name n=names[i];    int nfi=indexOf(n.function,oldFns);    if (nfi >= 0 && Arrays.equals(n.arguments,forArguments)) {      changeName(i,new Name(newFns[nfi],n.arguments));    }  }  return this;}  }
class C{  public void removeAttribute(String serviceName,String attrName) throws SMSException {  validateConfigImpl();  if (serviceName == null || attrName == null) {    return;  }  if (migratedTo70) {    try {      CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,orgDN);      if (cEntry.isDirty()) {        cEntry.refresh();      }      SMSEntry e=cEntry.getClonedSMSEntry();      SMSUtils.removeAttribute(e,serviceName.toLowerCase() + "-" + attrName);      e.save(token);      cEntry.refresh(e);    } catch (    SSOException ssoe) {      SMSEntry.debug.error("OrganizationConfigManager: Unable " + "to remove Attribute",ssoe);      throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));    }  }  if (coexistMode && serviceName.equalsIgnoreCase(OrgConfigViaAMSDK.IDREPO_SERVICE)) {    amsdk.removeAttribute(attrName);  }}  }
class C{  public Authentication authenticate(final ApiProvider provider){  final ZonkyOAuthApi api=provider.oauth(new AuthenticationFilter());  final ZonkyApiToken token=authenticationMethod.apply(api);  final AuthenticatedFilter f=new AuthenticatedFilter(token);  final ZonkyApi result=isDryRun ? provider.authenticatedNonInvesting(f) : provider.authenticated(f);  return new Authentication(result,token);}  }
class C{  public boolean isRunning(){  return MonitoringUtil.isRunning();}  }
class C{  public void refreshSession(SSOToken token) throws SSOException {  try {    getProvider(token).refreshSession(token);  } catch (  Exception e) {    debug.error("Error in refreshing the session from session server");    throw new SSOException(e);  }}  }
class C{  private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public static String formPropertySheetXML(String properties){  return formPropertySheetXML(properties,false);}  }
class C{  public Frame<V> init(final Frame<? extends V> src){  returnValue=src.returnValue;  System.arraycopy(src.values,0,values,0,values.length);  top=src.top;  return this;}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSeparatorBackground(context,g,x,y,w,h);}  }
class C{  public static <T>T createInternal(Config config,Class<T> clazz){  Map<String,ConfigValue> configProps=new HashMap<String,ConfigValue>();  Map<String,String> originalNames=new HashMap<String,String>();  for (  Map.Entry<String,ConfigValue> configProp : config.root().entrySet()) {    String originalName=configProp.getKey();    String camelName=toCamelCase(originalName);    if (originalNames.containsKey(camelName) && !originalName.equals(camelName)) {    } else {      configProps.put(camelName,(ConfigValue)configProp.getValue());      originalNames.put(camelName,originalName);    }  }  BeanInfo beanInfo=null;  try {    beanInfo=Introspector.getBeanInfo(clazz);  } catch (  IntrospectionException e) {    throw new ConfigException.BadBean("Could not get bean information for class " + clazz.getName(),e);  }  try {    List<PropertyDescriptor> beanProps=new ArrayList<PropertyDescriptor>();    for (    PropertyDescriptor beanProp : beanInfo.getPropertyDescriptors()) {      if (beanProp.getReadMethod() == null || beanProp.getWriteMethod() == null) {        continue;      }      beanProps.add(beanProp);    }    T bean=clazz.newInstance();    for (    PropertyDescriptor beanProp : beanProps) {      Method setter=beanProp.getWriteMethod();      Type parameterType=setter.getGenericParameterTypes()[0];      Class<?> parameterClass=setter.getParameterTypes()[0];      String configKey=originalNames.get(beanProp.getName());      if (configKey != null) {        Object unwrapped=getValue(clazz,parameterType,parameterClass,config,configKey);        setter.invoke(bean,unwrapped);      }    }    return bean;  } catch (  InstantiationException e) {    throw new ConfigException.BadBean(clazz.getName() + " needs a public no-args constructor to be used as a bean",e);  }catch (  IllegalAccessException e) {    throw new ConfigException.BadBean(clazz.getName() + " getters and setters are not accessible, they must be for use as a bean",e);  }catch (  InvocationTargetException e) {    throw new ConfigException.BadBean("Calling bean method on " + clazz.getName() + " caused an exception",e);  }}  }
class C{  private <C1 extends ConfigurationClient,S1 extends Configuration>void registerReverseRelationDefinition(RelationDefinition<C1,S1> rd){  rd.getChildDefinition().reverseRelationDefinitions.add(rd);}  }
class C{  public final int length(){  return array.length;}  }
class C{  @Override public final PlaSide side_of(PlaPoint p_1,PlaPoint p_2){  PlaPointFloat pf_1=p_1.to_float();  PlaPointFloat pf_2=p_2.to_float();  PlaPointFloat point_dir=new PlaPointFloat(v_x - pf_1.v_x,v_y - pf_1.v_y);  PlaPointFloat line_dir=new PlaPointFloat(pf_2.v_x - pf_1.v_x,pf_2.v_y - pf_1.v_y);  double determinant=MathAux.determinant(point_dir,line_dir);  PlaSide b_risul=PlaSide.get_side_of(determinant);  return b_risul;}  }
class C{  public static String toString(String host,int port){  if (host != null && host.contains(":")) {    return "[" + host + "]:"+ port;  }  return host + ":" + port;}  }
class C{  public void paintTableHeaderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  String[] params={serviceName,schemaType,subSchemaName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_SCHEMA_ATTR_DEFAULTS",params);  Map attrValues=ss.getAttributeDefaults();  retainValues(rc,attrValues);  maskPasswordValues(ss,attrValues);  if (!attrValues.isEmpty()) {    outputWriter.printlnMessage(FormatUtils.printAttributeValues(getResourceString("schema-get-attribute-defaults-result"),attrValues));    outputWriter.printlnMessage(getResourceString("schema-get-attribute-defaults-succeed"));  } else {    outputWriter.printlnMessage(getResourceString("schema-get-attribute-defaults-no-matching-attr"));  }  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_SCHEMA_ATTR_DEFAULTS",params);}  }
class C{  public Node adoptNode(Node node){  if (!(node instanceof NodeImpl)) {    return null;  }  NodeImpl nodeImpl=(NodeImpl)node;switch (nodeImpl.getNodeType()) {case Node.ATTRIBUTE_NODE:    AttrImpl attr=(AttrImpl)node;  if (attr.ownerElement != null) {    attr.ownerElement.removeAttributeNode(attr);  }break;case Node.DOCUMENT_FRAGMENT_NODE:case Node.ENTITY_REFERENCE_NODE:case Node.PROCESSING_INSTRUCTION_NODE:case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:case Node.COMMENT_NODE:case Node.ELEMENT_NODE:break;case Node.DOCUMENT_NODE:case Node.DOCUMENT_TYPE_NODE:case Node.ENTITY_NODE:case Node.NOTATION_NODE:throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot adopt nodes of type " + nodeImpl.getNodeType());default :throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());}Node parent=nodeImpl.getParentNode();if (parent != null) {parent.removeChild(nodeImpl);}changeDocumentToThis(nodeImpl);notifyUserDataHandlers(UserDataHandler.NODE_ADOPTED,node,null);return nodeImpl;}  }
class C{  @SuppressWarnings("deprecation") public void test_setParameterLjava_lang_StringLjava_lang_Object() throws Exception {  Signature sig=Signature.getInstance("DSA");  try {    sig.setParameter("r",BigInteger.ONE);    sig.setParameter("s",BigInteger.ONE);  } catch (  InvalidParameterException e) {  }catch (  UnsupportedOperationException e) {  }}  }
class C{  @Deprecated public PistonBaseMaterial(final Material type,final byte data){  super(type,data);}  }
class C{  @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public boolean containsObject(Object obj){  NSObject nso=NSObject.wrap(obj);  for (  NSObject elem : array) {    if (elem == null) {      if (obj == null)       return true;      continue;    }    if (elem.equals(nso)) {      return true;    }  }  return false;}  }
class C{  public void applyPattern(String pattern){  applyPatternImpl(pattern);}  }
class C{  @Override public String toString(){  String s=null;  try {    s=toJSONObject().toString(2);  } catch (  JSONException joe) {    PolicyConstants.DEBUG.error("UserESubject.toString(), JSONException:",joe);  }  return s;}  }
class C{  protected void paranoiaCheck() throws Exception {  logger.error(LocalizableMessage.raw("Performing paranoia check"));  assertNoConfigEntriesWithFilter("(objectclass=ds-cfg-replication-server)","Found unexpected replication server config left");  Assertions.assertThat(ReplicationServer.getAllInstances()).isEmpty();  assertNoConfigEntriesWithFilter("(objectclass=ds-cfg-replication-domain)","Found unexpected replication domain config left");  assertEquals(MultimasterReplication.getNumberOfDomains(),0,"Some replication domain objects left");}  }
class C{  public HttpServletRequestWrapper(javax.servlet.http.HttpServletRequest request){  super(request);}  }
class C{  private void showAbout(){  String version;  try {    PackageInfo pkgInfo;    pkgInfo=getPackageManager().getPackageInfo(this.getPackageName(),0);    version=pkgInfo.versionName;  } catch (  NameNotFoundException e) {    version=getString(R.string.unknown);  }  StringBuilder message=new StringBuilder();  message.append(getString(R.string.about_desc)).append("<br /><br />");  message.append(getString(R.string.copyright)).append("<br /><br />");  message.append(getString(R.string.about_version)).append(" ").append(version);  message.append("<br /><br />");  message.append(getString(R.string.about_license)).append("<br /><br />");  message.append(getString(R.string.about_website));  Builder about=new AlertDialog.Builder(this);  about.setTitle(R.string.about_title);  about.setIcon(R.drawable.icon);  about.setMessage(Html.fromHtml(message.toString()));  about.setPositiveButton(R.string.ok,null);  about.show();}  }
class C{  public JTabbedPane(int tabPlacement,int tabLayoutPolicy){  setTabPlacement(tabPlacement);  setTabLayoutPolicy(tabLayoutPolicy);  pages=new ArrayList<Page>(1);  setModel(new DefaultSingleSelectionModel());  updateUI();}  }
class C{  private PropertyDescriptor mergePropertyDescriptor(IndexedPropertyDescriptor ipd,PropertyDescriptor pd){  PropertyDescriptor result=null;  Class<?> propType=pd.getPropertyType();  Class<?> ipropType=ipd.getIndexedPropertyType();  if (propType.isArray() && propType.getComponentType() == ipropType) {    if (pd.getClass0().isAssignableFrom(ipd.getClass0())) {      result=new IndexedPropertyDescriptor(pd,ipd);    } else {      result=new IndexedPropertyDescriptor(ipd,pd);    }  } else   if ((ipd.getReadMethod() == null) && (ipd.getWriteMethod() == null)) {    if (pd.getClass0().isAssignableFrom(ipd.getClass0())) {      result=new PropertyDescriptor(pd,ipd);    } else {      result=new PropertyDescriptor(ipd,pd);    }  } else {    if (pd.getClass0().isAssignableFrom(ipd.getClass0())) {      result=ipd;    } else {      result=pd;      Method write=result.getWriteMethod();      Method read=result.getReadMethod();      if (read == null && write != null) {        read=findMethod(result.getClass0(),GET_PREFIX + NameGenerator.capitalize(result.getName()),0);        if (read != null) {          try {            result.setReadMethod(read);          } catch (          IntrospectionException ex) {          }        }      }      if (write == null && read != null) {        write=findMethod(result.getClass0(),SET_PREFIX + NameGenerator.capitalize(result.getName()),1,new Class<?>[]{FeatureDescriptor.getReturnType(result.getClass0(),read)});        if (write != null) {          try {            result.setWriteMethod(write);          } catch (          IntrospectionException ex) {          }        }      }    }  }  return result;}  }
class C{  @Override public void bind() throws Exception {  serverSock=ServerSocketChannel.open();  socketProperties.setProperties(serverSock.socket());  InetSocketAddress addr=(getAddress() != null ? new InetSocketAddress(getAddress(),getPort()) : new InetSocketAddress(getPort()));  serverSock.socket().bind(addr,getBacklog());  serverSock.configureBlocking(true);  serverSock.socket().setSoTimeout(getSocketProperties().getSoTimeout());  if (acceptorThreadCount == 0) {    acceptorThreadCount=1;  }  if (pollerThreadCount <= 0) {    pollerThreadCount=1;  }  stopLatch=new CountDownLatch(pollerThreadCount);  initialiseSsl();  selectorPool.open();}  }
class C{  public void v(Object str){  if (logFlag) {    if (logLevel <= android.util.Log.VERBOSE) {      String name=getFunctionName();      if (name != null) {        android.util.Log.v(tag,name + " - " + str);      } else {        android.util.Log.v(tag,str.toString());      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AffiliationIDElement createAffiliationIDElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AffiliationIDElementImpl(value);}  }
class C{  private K lowestKey(){  ConcurrentSkipListMap.Node<K,V> n=loNode();  if (isBeforeEnd(n))   return n.key; else   throw new NoSuchElementException();}  }
class C{  private XStringForChars(String val){  super(val);  throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING,null));}  }
class C{  static Set search(String filter) throws SMSException {  try {    return (smsObject.search(null,baseDN,filter,0,0,false,false));  } catch (  SSOException ssoe) {    debug.error("SMSEntry: Search ERROR: " + filter,ssoe);    throw new SMSException(bundle.getString("sms-error-in-searching"),ssoe,"sms-error-in-searching");  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  @SuppressWarnings("unchecked") public Set<String> delimStringToSet(String str,String delimiter){  return PolicyUtils.delimStringToSet(str,delimiter);}  }
class C{  public boolean shouldYieldConnection(SQLiteConnection connection,int connectionFlags){synchronized (mLock) {    if (!mAcquiredConnections.containsKey(connection)) {      throw new IllegalStateException("Cannot perform this operation " + "because the specified connection was not acquired " + "from this pool or has already been released.");    }    if (!mIsOpen) {      return false;    }    return isSessionBlockingImportantConnectionWaitersLocked(connection.isPrimaryConnection(),connectionFlags);  }}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.OrganizationType createOrganizationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.OrganizationTypeImpl();}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  submitCycle=true;  bSearchForRealm=true;  forwardTo();}  }
class C{  public static boolean isLegalPropertyKey(String key){  return (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS) || key.equals(OutputKeys.DOCTYPE_PUBLIC) || key.equals(OutputKeys.DOCTYPE_SYSTEM)|| key.equals(OutputKeys.ENCODING)|| key.equals(OutputKeys.INDENT)|| key.equals(OutputKeys.MEDIA_TYPE)|| key.equals(OutputKeys.METHOD)|| key.equals(OutputKeys.OMIT_XML_DECLARATION)|| key.equals(OutputKeys.STANDALONE)|| key.equals(OutputKeys.VERSION)|| (key.length() > 0) && (key.charAt(0) == '{') && (key.lastIndexOf('{') == 0)&& (key.indexOf('}') > 0)&& (key.lastIndexOf('}') == key.indexOf('}')));}  }
class C{  public static void importNewServiceSchema(String fileName) throws UpgradeException {  String[] args=new String[8];  args[0]="--runasdn";  args[1]=bindDN;  args[2]="-w";  args[3]=bindPasswd;  args[4]="-c";  args[5]="-v";  args[6]="-s";  args[7]=fileName;  invokeAdminCLI(args);}  }
class C{  private static MBeanServerBuilder newBuilder(Class<?> builderClass){  try {    final Object abuilder=builderClass.newInstance();    return (MBeanServerBuilder)abuilder;  } catch (  RuntimeException x) {    throw x;  }catch (  Exception x) {    final String msg="Failed to instantiate a MBeanServerBuilder from " + builderClass + ": "+ x;    throw new JMRuntimeException(msg,x);  }}  }
class C{  private String replacePrefix(String select){  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PersonalProfile:replacePrefix:" + "Select =" + select);  }  if (select == null || select.indexOf(SLASH) == -1) {    IDPPUtils.debug.error("PersonalProfile:replacePrefix:" + "Invalid expression.");    return select;  }  StringBuffer sb=new StringBuffer(100);  StringTokenizer st=new StringTokenizer(select,SLASH);  while (st.hasMoreTokens()) {    String temp=(String)st.nextToken();    int i=temp.indexOf(COLON);    if (i != -1) {      temp=temp.substring(i + 1);    }    if (temp != null && temp.indexOf(IDPPConstants.PP_EXTENSION_ELEMENT) != -1) {      sb.append(SLASH).append(serviceManager.getPPExtensionPrefix());      sb.append(COLON).append(temp);    } else     if (temp != null) {      sb.append(SLASH).append(serviceManager.getIDPPPrefix());      sb.append(COLON).append(temp);    }  }  return sb.toString();}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof DataStorePrincipal)) {    return false;  }  DataStorePrincipal that=(DataStorePrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public EventException(Throwable cause,String message){  super(message);  this.cause=cause;}  }
class C{  public View create(Element elem){  Object o=elem.getAttributes().getAttribute(StyleConstants.NameAttribute);  if (o instanceof HTML.Tag) {    HTML.Tag kind=(HTML.Tag)o;    if (kind == HTML.Tag.TR) {      return createTableRow(elem);    } else     if ((kind == HTML.Tag.TD) || (kind == HTML.Tag.TH)) {      return new CellView(elem);    } else     if (kind == HTML.Tag.CAPTION) {      return new javax.swing.text.html.ParagraphView(elem);    }  }  View p=getParent();  if (p != null) {    ViewFactory f=p.getViewFactory();    if (f != null) {      return f.create(elem);    }  }  return null;}  }
class C{  private static boolean add(JsonValue subject,PatchOperation operation) throws BadRequestException {  if (!operation.isAdd()) {    throw new BadRequestException("Operation is an " + operation.getOperation() + ", not an add!");  }  subject.putPermissive(operation.getField(),operation.getValue().getObject());  return true;}  }
class C{  public static boolean removeLinesByNum(String filePath,int lineNum,int numLines){  boolean result=true;  try {    String line=removeLinesByNumber(filePath,lineNum,numLines);    Debug.log("FileUtils.removeLinesByNum : removing line = " + line);    result=((line == null) ? false : true);  } catch (  Exception e) {    Debug.log("FileUtils.removeLinesByNum() threw exception : ",e);    result=false;  }  return result;}  }
class C{  public final void testGetW(){  assertEquals("wrong w value",w,ecpks.getW());}  }
class C{  public JLabel(Icon image){  this(null,image,CENTER);}  }
class C{  public SMDiscoveryServiceViewBean(){  super("SMDiscoveryService",DEFAULT_DISPLAY_URL,AMAdminConstants.DISCOVERY_SERVICE);}  }
class C{  static String _targetSoFile(String libName,int version){  Context context=mContext;  if (null == context) {    return "";  }  String path="/data/data/" + context.getPackageName() + "/files";  File f=context.getFilesDir();  if (f != null) {    path=f.getPath();  }  return path + "/lib" + libName+ "bk"+ version+ ".so";}  }
class C{  public static void removeByUuid(java.lang.String uuid){  getPersistence().removeByUuid(uuid);}  }
class C{  public boolean isPattern(){  return (_domain_pattern || _property_list_pattern || _property_value_pattern);}  }
class C{  @Deprecated public static void showAlert(Context context,String title,String text){  Builder alertBuilder=new Builder(context);  alertBuilder.setTitle(title);  alertBuilder.setMessage(text);  alertBuilder.create().show();}  }
class C{  public WmfImageData(URL url){  super(url,ImageType.WMF);  byte[] imageType=readImageType(url);  if (!imageTypeIs(imageType,wmf)) {    throw new PdfException(PdfException.NotAWmfImage);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String elementId="---";  doc=(Document)load("staffNS",false);  element=doc.getElementById(elementId);  assertNull("documentgetelementbyid01",element);}  }
class C{  @Override public void close(){  impl.close();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicFormattedTextFieldUI();}  }
class C{  public static boolean isConformantSchemeName(String p_scheme){  if (p_scheme == null || p_scheme.trim().length() == 0) {    return false;  }  if (!isAlpha(p_scheme.charAt(0))) {    return false;  }  char testChar;  for (int i=1; i < p_scheme.length(); i++) {    testChar=p_scheme.charAt(i);    if (!isAlphanum(testChar) && SCHEME_CHARACTERS.indexOf(testChar) == -1) {      return false;    }  }  return true;}  }
class C{  public boolean isObsolete(){  return isObsolete;}  }
class C{  @Override public Foo[] findByUuid_C_PrevAndNext(long fooId,String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  @Override public void displayMessage(LocalizableMessage msg){  noEntryPanel.setMessage(msg);  ((CardLayout)mainPanel.getLayout()).show(mainPanel,noEntryPanelTitle);}  }
class C{  public void testisAutoIncrement(){  try {    assertFalse(rsmd.isAutoIncrement(1));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.testGetScale()" + e1.getMessage());    e1.printStackTrace();  }  try {    conn.close();    rsmd.getSchemaName(2);    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public TreeName(String baseDN,String indexId){  this.baseDN=baseDN;  this.indexId=indexId;  this.s='/' + baseDN + '/'+ indexId;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  CloseWindowViewBean vb=(CloseWindowViewBean)getViewBean(CloseWindowViewBean.class);  vb.forwardTo(getRequestContext());}  }
class C{  public static MouseWheelListener add(MouseWheelListener a,MouseWheelListener b){  return (MouseWheelListener)addInternal(a,b);}  }
class C{  SynchronizationProviderResult handleConflictResolution(PreOperationModifyOperation modifyOperation){  if (!modifyOperation.isSynchronizationOperation() && !brokerIsConnected()) {    LocalizableMessage msg=ERR_REPLICATION_COULD_NOT_CONNECT.get(getBaseDN());    return new SynchronizationProviderResult.StopProcessing(ResultCode.UNWILLING_TO_PERFORM,msg);  }  if (fractionalConfig.isFractional()) {    if (modifyOperation.isSynchronizationOperation()) {      if (fractionalFilterOperation(modifyOperation,true) == FRACTIONAL_BECOME_NO_OP) {        return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_OPERATION,null);      }    } else {switch (fractionalFilterOperation(modifyOperation,false)) {case FRACTIONAL_HAS_NO_FRACTIONAL_FILTERED_ATTRIBUTES:        break;case FRACTIONAL_HAS_FRACTIONAL_FILTERED_ATTRIBUTES:      LocalizableMessage msg=NOTE_ERR_FRACTIONAL_FORBIDDEN_OPERATION.get(getBaseDN(),modifyOperation);    return new SynchronizationProviderResult.StopProcessing(ResultCode.UNWILLING_TO_PERFORM,msg);}}}ModifyContext ctx=(ModifyContext)modifyOperation.getAttachment(SYNCHROCONTEXT);Entry modifiedEntry=modifyOperation.getModifiedEntry();if (ctx == null) {CSN csn=generateCSN(modifyOperation);ctx=new ModifyContext(csn,getEntryUUID(modifiedEntry));modifyOperation.setAttachment(SYNCHROCONTEXT,ctx);} else {String modifiedEntryUUID=ctx.getEntryUUID();String currentEntryUUID=getEntryUUID(modifiedEntry);if (currentEntryUUID != null && !currentEntryUUID.equals(modifiedEntryUUID)) {return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_SUCH_OBJECT,null);}EntryHistorical historicalInformation=EntryHistorical.newInstanceFromEntry(modifiedEntry);modifyOperation.setAttachment(EntryHistorical.HISTORICAL,historicalInformation);if (historicalInformation.replayOperation(modifyOperation,modifiedEntry)) {numResolvedModifyConflicts.incrementAndGet();}}return new SynchronizationProviderResult.ContinueProcessing();}  }
class C{  private String createDigest(final Credentials credentials) throws AuthenticationException {  String uri=getParameter("uri");  String realm=getParameter("realm");  String nonce=getParameter("nonce");  String method=getParameter("methodname");  String algorithm=getParameter("algorithm");  if (uri == null) {    throw new IllegalStateException("URI may not be null");  }  if (realm == null) {    throw new IllegalStateException("Realm may not be null");  }  if (nonce == null) {    throw new IllegalStateException("Nonce may not be null");  }  if (algorithm == null) {    algorithm="MD5";  }  String charset=getParameter("charset");  if (charset == null) {    charset="ISO-8859-1";  }  if (qopVariant == QOP_AUTH_INT) {    throw new AuthenticationException("Unsupported qop in HTTP Digest authentication");  }  MessageDigest md5Helper=createMessageDigest("MD5");  String uname=credentials.getUserPrincipal().getName();  String pwd=credentials.getPassword();  StringBuilder tmp=new StringBuilder(uname.length() + realm.length() + pwd.length()+ 2);  tmp.append(uname);  tmp.append(':');  tmp.append(realm);  tmp.append(':');  tmp.append(pwd);  String a1=tmp.toString();  if (algorithm.equalsIgnoreCase("MD5-sess")) {    String cnonce=getCnonce();    String tmp2=encode(md5Helper.digest(EncodingUtils.getBytes(a1,charset)));    StringBuilder tmp3=new StringBuilder(tmp2.length() + nonce.length() + cnonce.length()+ 2);    tmp3.append(tmp2);    tmp3.append(':');    tmp3.append(nonce);    tmp3.append(':');    tmp3.append(cnonce);    a1=tmp3.toString();  } else   if (!algorithm.equalsIgnoreCase("MD5")) {    throw new AuthenticationException("Unhandled algorithm " + algorithm + " requested");  }  String md5a1=encode(md5Helper.digest(EncodingUtils.getBytes(a1,charset)));  String a2=null;  if (qopVariant == QOP_AUTH_INT) {  } else {    a2=method + ':' + uri;  }  String md5a2=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(a2)));  String serverDigestValue;  if (qopVariant == QOP_MISSING) {    StringBuilder tmp2=new StringBuilder(md5a1.length() + nonce.length() + md5a2.length());    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  } else {    String qopOption=getQopVariantString();    String cnonce=getCnonce();    StringBuilder tmp2=new StringBuilder(md5a1.length() + nonce.length() + NC.length()+ cnonce.length()+ qopOption.length()+ md5a2.length()+ 5);    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(NC);    tmp2.append(':');    tmp2.append(cnonce);    tmp2.append(':');    tmp2.append(qopOption);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  }  String serverDigest=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(serverDigestValue)));  return serverDigest;}  }
class C{  public static boolean isErrorLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isErrorLoggable(level);  }}  }
class C{  private Template parseTemplateDefinition(final int startLineNumber,final String[] templateLines,final TemplateData templateData,final List<LocalizableMessage> warnings) throws DecodeException {  final Map<String,TemplateTag> tags=templateData.tags;  final Map<String,Template> definedTemplates=templateData.templates;  final String templateName=templateLines[0].substring(TEMPLATE_LABEL.length()).trim();  int lineCount=1;  Template parentTemplate=null;  final List<AttributeType> rdnAttributes=new ArrayList<>();  final List<String> subordinatesTemplateNames=new ArrayList<>();  final List<Integer> numberOfentriesPerTemplate=new ArrayList<>();  for (; lineCount < templateLines.length; lineCount++) {    final int lineNumber=startLineNumber + lineCount;    final String line=templateLines[lineCount];    final String lowerLine=line.toLowerCase();    if (lowerLine.startsWith("#")) {      continue;    } else     if (lowerLine.startsWith(EXTENDS_LABEL)) {      final String parentTemplateName=line.substring(EXTENDS_LABEL.length()).trim();      parentTemplate=definedTemplates.get(parentTemplateName.toLowerCase());      if (parentTemplate == null) {        throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_TEMPLATE_INVALID_PARENT_TEMPLATE.get(parentTemplateName,lineNumber + 1,templateName));      }    } else     if (lowerLine.startsWith(RDNATTR_LABEL)) {      final String rdnAttrNames=lowerLine.substring(RDNATTR_LABEL.length()).trim();      final StringTokenizer tokenizer=new StringTokenizer(rdnAttrNames,"+");      while (tokenizer.hasMoreTokens()) {        rdnAttributes.add(schema.getAttributeType(tokenizer.nextToken()));      }    } else     if (lowerLine.startsWith(SUBORDINATE_TEMPLATE_LABEL)) {      final Pair<String,Integer> pair=parseSubordinateTemplate(lineNumber,line,Element.BRANCH,templateName,warnings);      subordinatesTemplateNames.add(pair.getFirst());      numberOfentriesPerTemplate.add(pair.getSecond());    } else {      break;    }  }  final List<TemplateLine> parentLines=(parentTemplate == null) ? new ArrayList<TemplateLine>() : parentTemplate.getTemplateLines();  final Template template=new Template(this,templateName,rdnAttributes,subordinatesTemplateNames,numberOfentriesPerTemplate,parentLines);  for (; lineCount < templateLines.length; lineCount++) {    final String line=templateLines[lineCount];    final String lowerLine=line.toLowerCase();    if (lowerLine.startsWith("#")) {      continue;    } else {      final int lineNumber=startLineNumber + lineCount;      final TemplateLine templateLine=parseTemplateLine(line,lineNumber,null,template,Element.TEMPLATE,tags,warnings);      template.addTemplateLine(templateLine);    }  }  return template;}  }
class C{  public AztecDetectorResult detect(boolean isMirror) throws NotFoundException {  Point pCenter=getMatrixCenter();  ResultPoint[] bullsEyeCorners=getBullsEyeCorners(pCenter);  if (isMirror) {    ResultPoint temp=bullsEyeCorners[0];    bullsEyeCorners[0]=bullsEyeCorners[2];    bullsEyeCorners[2]=temp;  }  extractParameters(bullsEyeCorners);  BitMatrix bits=sampleGrid(image,bullsEyeCorners[shift % 4],bullsEyeCorners[(shift + 1) % 4],bullsEyeCorners[(shift + 2) % 4],bullsEyeCorners[(shift + 3) % 4]);  ResultPoint[] corners=getMatrixCornerPoints(bullsEyeCorners);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  public boolean isLogEnabled(){  if (logger == null) {    return false;  } else {    return logger.isLogEnabled();  }}  }
class C{  private void dismissSaveRecordingDialog(){  FragmentTransaction ft=mFragmentManager.beginTransaction();  Fragment fragment=mFragmentManager.findFragmentByTag(TAG_SAVE_RECORDINGD);  if (null != fragment) {    ft.remove(fragment);    ft.commitAllowingStateLoss();  }}  }
class C{  private PreparedAssuredInfo processSafeReadUpdateMsg(UpdateMsg update,ServerHandler sourceHandler) throws IOException {  CSN csn=update.getCSN();  byte groupId=localReplicationServer.getGroupId();  byte sourceGroupId=sourceHandler.getGroupId();  List<Integer> expectedServers=new ArrayList<>();  List<Integer> wrongStatusServers=new ArrayList<>();  if (sourceGroupId == groupId) {    if (sourceHandler.isDataServer()) {      collectRSsEligibleForAssuredReplication(groupId,expectedServers);    }    for (    DataServerHandler dsHandler : connectedDSs.values()) {      if (dsHandler == sourceHandler) {        continue;      }      if (dsHandler.getGroupId() == groupId) {        ServerStatus serverStatus=dsHandler.getStatus();        if (serverStatus == ServerStatus.NORMAL_STATUS) {          expectedServers.add(dsHandler.getServerId());        } else         if (serverStatus == ServerStatus.DEGRADED_STATUS) {          wrongStatusServers.add(dsHandler.getServerId());        }      }    }  }  PreparedAssuredInfo preparedAssuredInfo=new PreparedAssuredInfo();  if (!expectedServers.isEmpty()) {    preparedAssuredInfo.expectedAcksInfo=new SafeReadExpectedAcksInfo(csn,sourceHandler,expectedServers,wrongStatusServers);    preparedAssuredInfo.expectedServers=expectedServers;  }  if (preparedAssuredInfo.expectedServers == null) {    sourceHandler.send(new AckMsg(csn));  }  return preparedAssuredInfo;}  }
class C{  private final int appendNode(int w0,int w1,int w2,int w3){  int slotnumber=nodes.appendSlot(w0,w1,w2,w3);  if (DEBUG)   System.out.println(slotnumber + ": " + w0+ " "+ w1+ " "+ w2+ " "+ w3);  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,slotnumber);  previousSiblingWasParent=false;  return slotnumber;}  }
class C{  @Override public void backgroundProcess(){  super.backgroundProcess();  if (!getState().isAvailable())   return;  if (getServlet() instanceof PeriodicEventListener) {    ((PeriodicEventListener)getServlet()).periodicEvent();  }}  }
class C{  public Observable<Long> cardByTypeObservable(String type,JobState state){  io.vertx.rx.java.ObservableFuture<Long> handler=io.vertx.rx.java.RxHelper.observableFuture();  cardByType(type,state,handler.toHandler());  return handler;}  }
class C{  public void testCase8(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-12,-23,-34,-45,-56,-67,-78,-12,-23,-33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public boolean remove(String entityID,String protocol){  if (!COTUtils.isValidProtocolType(protocol)) {    return false;  }  if ((trustedProviderMap == null) || (trustedProviderMap.get(protocol) == null) || !((Set)trustedProviderMap.get(protocol)).contains(entityID)) {    return false;  }  Set ret=new HashSet();  if (trustedProviders != null) {    ret.addAll(trustedProviders);  }  boolean result=ret.remove(entityID + COTConstants.DELIMITER + protocol);  if (!result) {    result=ret.remove(entityID);  }  setTrustedProviders(ret);  return result;}  }
class C{  public int size(){  return avas.length;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  Attr districtAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("district");  districtAttr=testEmployee.setAttributeNode(newAttribute);  assertNull("elementSetAttributeNodeNullAssert",districtAttr);}  }
class C{  @Override protected void installDefaults(){  LayoutManager layout=spinner.getLayout();  if (layout == null || layout instanceof UIResource) {    spinner.setLayout(createLayout());  }  updateStyle(spinner);}  }
class C{  private static void dualPivotQuicksort(short[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  short ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    short t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    short t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    short t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    short t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    short t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  short pivot1=ae2;  a[e2]=a[left];  short pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  @Override public boolean shouldShowRequestPermissionRationale(@NonNull final String permission){  return delegate.shouldShowRequestPermissionRationale(permission);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.GreetSoundElement createGreetSoundElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.GreetSoundElementImpl();}  }
class C{  private User onUserContact(@Nullable User currentUser,@NotNull TLUser userContact){  final User user;  if (currentUser == null) {    user=new User(userContact.getId());  } else {    user=new User(currentUser);  }  user.setUserHash(userContact.getAccessHash());  BotLogger.debug(LOGTAG,"usercontactid: " + user.getUserId());  return user;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  private XMLReader createSafeXMLReader() throws ParserConfigurationException, SAXException {  final SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();  saxParserFactory.setXIncludeAware(false);  saxParserFactory.setNamespaceAware(true);  saxParserFactory.setValidating(false);  final XMLReader xmlReader=saxParserFactory.newSAXParser().getXMLReader();  safeSetFeature(xmlReader,XMLConstants.FEATURE_SECURE_PROCESSING,true);  safeSetFeature(xmlReader,"http://apache.org/xml/features/disallow-doctype-decl",true);  safeSetFeature(xmlReader,"http://xml.org/sax/features/external-general-entities",false);  safeSetFeature(xmlReader,"http://xml.org/sax/features/external-parameter-entities",false);  xmlReader.setEntityResolver(new SafeEntityResolver());  return xmlReader;}  }
class C{  public int compare(File file1,File file2){  long result=file1.lastModified() - file2.lastModified();  if (result < 0) {    return -1;  } else   if (result > 0) {    return 1;  } else {    return 0;  }}  }
class C{  public PollingWaitCallbackBuilder asCopyOf(PollingWaitCallback callback){  this.waitTime=callback.getWaitTime();  return this;}  }
class C{  public boolean isPersistent(){  return (null != cookieExpiryDate);}  }
class C{  public final void applySetting(DocumentBuilderFactory factory) throws DOMTestIncompatibleException {  strategy.applySetting(factory,value);}  }
class C{  public void handle(String line){}  }
class C{  public void testConstructorSignBytesPositive5(){  byte aBytes[]={-127,56,100,-2};  int aSign=1;  byte rBytes[]={0,-127,56,100,-2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public String encode(){  String retval;  if (requestLine != null) {    this.setRequestLineDefaults();    retval=requestLine.encode() + super.encode();  } else   if (this.isNullRequest()) {    retval="\r\n\r\n";  } else {    retval=super.encode();  }  return retval;}  }
class C{  TemporalAccessor toResolved(ResolverStyle resolverStyle,Set<TemporalField> resolverFields){  Parsed parsed=currentParsed();  parsed.chrono=getEffectiveChronology();  parsed.zone=(parsed.zone != null ? parsed.zone : formatter.getZone());  return parsed.resolve(resolverStyle,resolverFields);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public AMSearchResults searchSubOrganizations(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATION),getSearchFilter(AMObject.ORGANIZATION),wildcard,avPairs,searchControl);}  }
class C{  public static synchronized void initServiceInfo(Provider p){  for (  Provider.Service service : p.getServices()) {    String type=service.getType();    if (cachedSecureRandomService == null && type.equals("SecureRandom")) {      cachedSecureRandomService=service;    }    String key=type + "." + service.getAlgorithm().toUpperCase(Locale.US);    if (!services.containsKey(key)) {      services.put(key,service);    }    for (    String alias : Engine.door.getAliases(service)) {      key=type + "." + alias.toUpperCase(Locale.US);      if (!services.containsKey(key)) {        services.put(key,service);      }    }  }}  }
class C{  MessageHandler(int queueSize,ReplicationServer replicationServer){  this.maxQueueSize=queueSize;  this.maxQueueBytesSize=queueSize * 100;  this.replicationServer=replicationServer;}  }
class C{  public static AccessTokenResolver newFileAccessTokenResolver(final String tokenFolder){  return new FileAccessTokenResolver(tokenFolder);}  }
class C{  public void testCase11(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public RepeatFieldParser(String repeatField){  lexer=new Lexer("charLexer",repeatField);}  }
class C{  @Override public IndexCreatedEvent read(UUID uuid){  if (uuid == null) {    return null;  }  BoundStatement bs=new BoundStatement(readStmt);  bindUUIDWhere(bs,uuid);  return marshalRow(getSession().execute(bs).one());}  }
class C{  private Utils(){}  }
class C{  public static String toRoman(int number,boolean upperCase){  return upperCase ? toRomanUpperCase(number) : toRomanLowerCase(number);}  }
class C{  public static String removeProcessDefinitionIdFromRequest(CreateRequest request){  return (String)(request.getContent().isNull() ? null : request.getContent().expect(Map.class).asMap().remove("_processDefinitionId"));}  }
class C{  @Override protected Map<String,Object> generateConfig(Subject subject,Map sharedState,Map options){  String idleTimeString=CollectionHelper.getMapAttr(options,COOKIE_IDLE_TIMEOUT_SETTING_KEY);  String maxLifeString=CollectionHelper.getMapAttr(options,COOKIE_MAX_LIFE_SETTING_KEY);  if (StringUtils.isEmpty(idleTimeString)) {    DEBUG.warning("Cookie Idle Timeout not set. Defaulting to 0");    idleTimeString="0";  }  if (StringUtils.isEmpty(maxLifeString)) {    DEBUG.warning("Cookie Max Life not set. Defaulting to 0");    maxLifeString="0";  }  tokenIdleTime=Integer.parseInt(idleTimeString) * MINUTES_IN_HOUR;  maxTokenLife=Integer.parseInt(maxLifeString) * MINUTES_IN_HOUR;  enforceClientIP=CollectionHelper.getBooleanMapAttr(options,ENFORCE_CLIENT_IP_SETTING_KEY,false);  secureCookie=CollectionHelper.getBooleanMapAttr(options,SECURE_COOKIE_KEY,true);  httpOnlyCookie=CollectionHelper.getBooleanMapAttr(options,HTTP_ONLY_COOKIE_KEY,true);  cookieName=CollectionHelper.getMapAttr(options,COOKIE_NAME_KEY);  cookieDomains=coreWrapper.getCookieDomainsForRequest(getHttpServletRequest());  String hmacKey=CollectionHelper.getMapAttr(options,HMAC_KEY);  encryptedHmacKey=AccessController.doPrivileged(new EncodeAction(hmacKey));  try {    return persistentCookieModuleWrapper.generateConfig(tokenIdleTime.toString(),maxTokenLife.toString(),enforceClientIP,getRequestOrg(),secureCookie,httpOnlyCookie,cookieName,cookieDomains,hmacKey);  } catch (  SMSException e) {    DEBUG.error("Error initialising Authentication Module",e);    return null;  }catch (  SSOException e) {    DEBUG.error("Error initialising Authentication Module",e);    return null;  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized E firstElement(){  if (elementCount > 0) {    return (E)elementData[0];  }  throw new NoSuchElementException();}  }
class C{  public final boolean is_net_dependent(){  return room_is_net_dependent;}  }
class C{  public void clearBindings(){  if (mBindArgs != null) {    Arrays.fill(mBindArgs,null);  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    inviteTid=st;    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    Response response=messageFactory.createResponse(Response.TRYING,request);    ListeningPoint lp=sipProvider.getListeningPoint(transport);    int myPort=lp.getPort();    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    int timeToSleep=(int)(Math.random() * 1000);    Thread.sleep(timeToSleep);    st.sendResponse(response);    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    String toTag=new Integer(new Random().nextInt()).toString();    Dialog dialog=st.getDialog();    inviteDialog=dialog;    inviteDialog.terminateOnBye(true);    dialog.setApplicationData(st);    this.inviteSeen=true;    timer.schedule(new MyTimerTask(requestEvent,st,toTag),this.delay);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  private boolean actionEquals(String actions1,String actions2){  Set actionSet1=Collections.synchronizedSet(new HashSet());  Set actionSet2=Collections.synchronizedSet(new HashSet());  if (actions1 != null) {    StringTokenizer st=new StringTokenizer(actions1,",");    while (st.hasMoreTokens()) {      String action=(String)st.nextToken().trim();      actionSet1.add(action);    }  }  if (actions2 != null) {    StringTokenizer st=new StringTokenizer(actions2,",");    while (st.hasMoreTokens()) {      String action=(String)st.nextToken().trim();      actionSet2.add(action);    }  }  return actionSet1.equals(actionSet2);}  }
class C{  public SubCommandArgumentParser(String mainClassName,LocalizableMessage toolDescription,boolean longArgumentsCaseSensitive){  super(mainClassName,toolDescription,longArgumentsCaseSensitive);}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(PAGE_STATE,StaticTextField.class);  registerChild(LOGIN_URL,StaticTextField.class);  registerChild(DEFAULT_LOGIN_URL,StaticTextField.class);  registerChild(REDIRECT_URL,StaticTextField.class);  registerChild(TILED_CALLBACKS,CallBackTiledView.class);  registerChild(TILED_BUTTONS,ButtonTiledView.class);  registerChild(DEFAULT_BTN,StaticTextField.class);  registerChild(TXT_GOTO_LOGIN_AFTER_FAIL,StaticTextField.class);  registerChild(CMD_SUBMIT,StaticTextField.class);  registerChild(LBL_SUBMIT,StaticTextField.class);  registerChild(CMD_CONTINUE,StaticTextField.class);  registerChild(LBL_CONTINUE,StaticTextField.class);  registerChild(CMD_AGREE,StaticTextField.class);  registerChild(LBL_AGREE,StaticTextField.class);  registerChild(CMD_DISAGREE,StaticTextField.class);  registerChild(LBL_DISAGREE,StaticTextField.class);  registerChild(CMD_YES,StaticTextField.class);  registerChild(LBL_YES,StaticTextField.class);  registerChild(CMD_NO,StaticTextField.class);  registerChild(LBL_NO,StaticTextField.class);  registerChild(CMD_NEW_USER,StaticTextField.class);  registerChild(LBL_NEW_USER,StaticTextField.class);  registerChild(LBL_RESET,StaticTextField.class);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatagetdata.class,args);}  }
class C{  public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {  java.security.cert.Certificate cert;  List certs=new ArrayList();  while ((cert=engineGenerateCertificate(inStream)) != null) {    certs.add(cert);  }  return certs;}  }
class C{  private static void test_directGetResourceAsStream(Configuration config,String resourceName,String expectedContents) throws Exception {  DexClassLoader dcl=createInstance(config);  InputStream in=dcl.getResourceAsStream(resourceName);  byte[] contents=Streams.readFully(in);  String s=new String(contents,"UTF-8");  assertEquals(expectedContents,s);}  }
class C{  public ConfigParameters serverRootDirectory(String dir){  serverRootDirectory=dir;  return this;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  setPageEncoding(request,response);  CallBackTiledView tView=(CallBackTiledView)getChild(TILED_CALLBACKS);  tView.setCallBackArray(callbacks,requiredList,infoText);  if (rb != null) {    if (newOrg) {      buttonOptions=new String[2];      buttonOptions[0]=rb.getString("Yes");      buttonOptions[1]=rb.getString("No");    }    setDisplayFieldValue(TXT_GOTO_LOGIN_AFTER_FAIL,rb.getString("gotoLoginAfterFail"));    setDisplayFieldValue(CMD_SUBMIT,"Submit");    if ((reqDataHash.get("authlevel") != null) || (reqDataHash.get(Constants.COMPOSITE_ADVICE) != null)) {      setDisplayFieldValue(LBL_SUBMIT,rb.getString("Submit"));    } else {      setDisplayFieldValue(LBL_SUBMIT,rb.getString("LogIn"));    }    setDisplayFieldValue(CMD_CONTINUE,"Continue");    setDisplayFieldValue(LBL_CONTINUE,rb.getString("Continue"));    setDisplayFieldValue(CMD_AGREE,"Agree");    setDisplayFieldValue(LBL_AGREE,rb.getString("Agree"));    setDisplayFieldValue(CMD_DISAGREE,"Disagree");    setDisplayFieldValue(LBL_DISAGREE,rb.getString("Disagree"));    setDisplayFieldValue(CMD_YES,"Yes");    setDisplayFieldValue(LBL_YES,rb.getString("Yes"));    setDisplayFieldValue(CMD_NO,"No");    setDisplayFieldValue(LBL_NO,rb.getString("No"));    setDisplayFieldValue(CMD_NEW_USER,"New User");    setDisplayFieldValue(LBL_NEW_USER,rb.getString("NewUser"));    setDisplayFieldValue(LBL_RESET,rb.getString("Reset"));    setDisplayFieldValue(HTML_TITLE_LOGIN,rb.getString("htmlTitle_Login"));    setDisplayFieldValue(HTML_TITLE_MESSAGE,rb.getString("htmlTitle_Message"));    setDisplayFieldValue(HTML_TITLE_REDIRECT,rb.getString("htmlTitle_Redirect"));    setDisplayFieldValue(HTML_TITLE_ACCOUNTEXPIRED,rb.getString("htmlTitle_AccountExpired"));    setDisplayFieldValue(HTML_TITLE_AUTHERROR,rb.getString("htmlTitle_AuthError"));    setDisplayFieldValue(HTML_TITLE_SELFREGERROR,rb.getString("htmlTitle_SelfRegError"));    setDisplayFieldValue(HTML_TITLE_DISCLAIMER,rb.getString("htmlTitle_Disclaimer"));    setDisplayFieldValue(HTML_TITLE_INVALIDPASSWORD,rb.getString("htmlTitle_InvalidPassword"));    setDisplayFieldValue(HTML_TITLE_INVALIDDOMAIN,rb.getString("htmlTitle_InvalidDomain"));    setDisplayFieldValue(HTML_TITLE_USERPROFILENOTFOUND,rb.getString("htmlTitle_UserProfileNotFound"));    setDisplayFieldValue(HTML_TITLE_AUTHFAILED,rb.getString("htmlTitle_AuthFailed"));    setDisplayFieldValue(HTML_TITLE_MEMBERSHIP,rb.getString("htmlTitle_Membership"));    setDisplayFieldValue(HTML_TITLE_AUTHMODULEDENIED,rb.getString("htmlTitle_AuthModuleDenied"));    setDisplayFieldValue(HTML_TITLE_NOCONFIGERROR,rb.getString("htmlTitle_NoConfigError"));    setDisplayFieldValue(HTML_TITLE_ORGINACTIVE,rb.getString("htmlTitle_OrgInactive"));    setDisplayFieldValue(HTML_TITLE_SELFREGMODULE,rb.getString("htmlTitle_SelfRegModule"));    setDisplayFieldValue(HTML_TITLE_SESSIONTIMEOUT,rb.getString("htmlTitle_SessionTimeOut"));    setDisplayFieldValue(HTML_TITLE_USERNOTFOUND,rb.getString("htmlTitle_UserNotFound"));    setDisplayFieldValue(HTML_TITLE_USERINACTIVE,rb.getString("htmlTitle_UserInactive"));    setDisplayFieldValue(HTML_TITLE_NEWORG,rb.getString("htmlTitle_NewOrg"));    setDisplayFieldValue(HTML_TITLE_MAXSESSIONS,rb.getString("htmlTitle_MaxSessions"));  } else {    loginDebug.message("In beginDisplay ... rb is NULL");  }  ButtonTiledView tBtnView=(ButtonTiledView)getChild(TILED_BUTTONS);  tBtnView.setButtonArray(buttonOptions);  if ((buttonOptions != null) && (buttonOptions.length > 0)) {    setDisplayFieldValue(DEFAULT_BTN,buttonOptions[0]);  }  setDisplayFieldValue(REDIRECT_URL,redirect_url);}  }
class C{  public void onCreate(Bundle savedInstanceState){  Session session=Session.getActiveSession();  if (session == null) {    if (savedInstanceState != null) {      session=Session.restoreSession(activity,null,callback,savedInstanceState);    }    if (session == null) {      session=new Session(activity);    }    Session.setActiveSession(session);  }  if (savedInstanceState != null) {    String callIdString=savedInstanceState.getString(DIALOG_CALL_ID_SAVE_KEY);    if (callIdString != null) {      pendingFacebookDialogCallId=UUID.fromString(callIdString);    }    pendingFacebookDialogCallStore.restoreFromSavedInstanceState(savedInstanceState);  }}  }
class C{  synchronized public void addDTM(DTM dtm,int id){  addDTM(dtm,id,0);}  }
class C{  boolean isInteractiveMode(){  return isInteractiveMode;}  }
class C{  private void initDsTables(){  initializeDsTable();  initializeDsApplIfOpsTable();  try {    ObjectName name=new ObjectName("JMImplementation:type=MBeanServerDelegate");    this.server.addNotificationListener(name,this,null,null);  } catch (  Exception ex) {    logger.traceException(ex);  }}  }
class C{  void removedAt(int removedIndex){  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.removedAt(removedIndex)) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Search Result Entry");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  DN:  ");  buffer.append(dn);  buffer.append(EOL);  buffer.append("  Attributes:");  buffer.append(EOL);  for (  LDAPAttribute attribute : getAttributes()) {    attribute.toString(buffer,indent + 4);  }}  }
class C{  public AuthenticationEnforcer exceptRead(){  exceptRead=true;  return this;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public static boolean isID3v22FrameIdentifier(String identifier){  if (identifier.length() < 3) {    return false;  } else   return identifier.length() == 3 && ID3v22Frames.getInstanceOf().getIdToValueMap().containsKey(identifier);}  }
class C{  public LoggerConfigManager(final ServerContext context){  this.serverContext=context;}  }
class C{  public Object put(String name,Object value){  checkKey(name);  return map.put(name,value);}  }
class C{  public boolean canServe(URL refUrl){  if (refUrl == null || !this.getPath().equals(refUrl.getPath())) {    return false;  }  if (!ObjectUtils.equals(protocol,refUrl.protocol)) {    return false;  }  if (!StringUtils.equals(this.getParameter(URLParamType.nodeType.getName()),MotanConstants.NODE_TYPE_SERVICE)) {    return false;  }  String version=getParameter(URLParamType.version.getName(),URLParamType.version.getValue());  String refVersion=refUrl.getParameter(URLParamType.version.getName(),URLParamType.version.getValue());  if (!version.equals(refVersion)) {    return false;  }  return true;}  }
class C{  public void _read(InputStream input){  value=input.read_char();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.SurNameElement createSurNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.SurNameElementImpl();}  }
class C{  public boolean isAlias(){  return hasObjectClassOrAttribute(OC_ALIAS,ATTR_ALIAS_DN);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ScopingType createScopingType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl();}  }
class C{  boolean isSynchProviderCreated(){  return synchProviderCreated;}  }
class C{  HeapImpl(){  this((HeapImpl)null);}  }
class C{  protected void openRedirector(){  if (!redirectorConfigured) {    configureRedirector();  }  if (redirectOutput) {    redirector.createStreams();    redirectOutStream=redirector.getOutputStream();    redirectOutPrintStream=new PrintStream(redirectOutStream);    redirectErrStream=redirector.getErrorStream();    redirectErrPrintStream=new PrintStream(redirectErrStream);  }}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public boolean isReplicationEnabled(){  return server.isReplicationEnabled();}  }
class C{  public boolean isActive(SSOToken token,IdType type,String name) throws IdRepoException, SSOException {  if (initializationException != null) {    debug.error("DatabaseRepo.isActive: throwing" + " initialization exception");    throw (initializationException);  }  if (debug.messageEnabled()) {    debug.message("DatabaseRepo.isActive:" + " token=" + token + " IdType="+ type+ " name= "+ name);  }  isValidType(type,"isActive");  Map attrMap=null;  HashSet attrNameSet=new HashSet();  attrNameSet.add(statusAttributeName);  try {    attrMap=getAttributes(token,type,name,attrNameSet);  } catch (  IdRepoException idrepoerr) {    if (debug.messageEnabled()) {      debug.message("DatabaseRepo.isActive calling getAttributes" + " got IdRepoException=" + idrepoerr);    }    return false;  }  if (debug.messageEnabled()) {    debug.message("DatabaseRepo.isActive: query results fecthed for name=" + name + " retrieved attrMap="+ attrMap);  }  if (attrMap == null || attrMap.isEmpty()) {    if (debug.messageEnabled()) {      debug.message("DatabaseRepo.isActive: the fetching of attributes " + " for user name=" + name + " got no results, either null or empty, which indicates"+ " user does not exists, so considered inactive.");    }    return false;  }  if (alwaysActive) {    return true;  }  Set<String> activeValueSet=(Set<String>)(attrMap.get(statusAttributeName));  if (activeValueSet == null || activeValueSet.isEmpty()) {    return true;  }  boolean allValuesInactive=true;  for (Iterator<String> it=activeValueSet.iterator(); it.hasNext(); ) {    String activeVal=it.next();    if (activeVal == null) {      allValuesInactive=false;    } else     if (!activeVal.equalsIgnoreCase(statusInActiveComparisonValue)) {      allValuesInactive=false;    }  }  if (allValuesInactive) {    return false;  } else {    return true;  }}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final PrecedingIterator clone=(PrecedingIterator)super.clone();    final int[] stackCopy=new int[_stack.length];    System.arraycopy(_stack,0,stackCopy,0,_stack.length);    clone._stack=stackCopy;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public void paintIcon(Component c,Graphics g,int x,int y){  JComponent component=(JComponent)c;  int iconWidth=getIconWidth();  g.translate(x,y);  g.setColor(component.isEnabled() ? MetalLookAndFeel.getControlInfo() : MetalLookAndFeel.getControlShadow());  g.drawLine(0,0,iconWidth - 1,0);  g.drawLine(1,1,1 + (iconWidth - 3),1);  g.drawLine(2,2,2 + (iconWidth - 5),2);  g.drawLine(3,3,3 + (iconWidth - 7),3);  g.drawLine(4,4,4 + (iconWidth - 9),4);  g.translate(-x,-y);}  }
class C{  public void paintText(SynthContext ss,Graphics g,String text,Rectangle bounds,int mnemonicIndex){  paintText(ss,g,text,bounds.x,bounds.y,mnemonicIndex);}  }
class C{  public void performPostModify(ServerManagedObject<?> managedObject) throws ConfigException {}  }
class C{  private static Set<String> splitPath(RelaxedURL url){  Set<String> results=new HashSet<String>();  Set<String> queries=normalizeQuery(url.getQuery());  results.add("/");  for (  String q : queries) {    results.add("/?" + q);  }  Set<String> paths=splitPath(url.getPath());  results.addAll(paths);  for (  String p : paths) {    for (    String q : queries) {      results.add(p + "?" + q);    }  }  return results;}  }
class C{  public SubscriptionExceptionListener(MessageHandler<Message> messageHandler){  this.messageHandler=messageHandler;}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public Mp4TagRawBinaryField(Mp4BoxHeader header,ByteBuffer raw) throws UnsupportedEncodingException {  super(header.getId());  dataSize=header.getDataLength();  build(raw);}  }
class C{  public List<VerificationOK> verify(X509Certificate signCert,X509Certificate issuerCert,Date signDate) throws GeneralSecurityException, IOException {  RootStoreVerifier rootStoreVerifier=new RootStoreVerifier(verifier);  rootStoreVerifier.setRootStore(rootStore);  CRLVerifier crlVerifier=new CRLVerifier(rootStoreVerifier,getCRLsFromDSS());  crlVerifier.setRootStore(rootStore);  crlVerifier.setOnlineCheckingAllowed(latestRevision || onlineCheckingAllowed);  OCSPVerifier ocspVerifier=new OCSPVerifier(crlVerifier,getOCSPResponsesFromDSS());  ocspVerifier.setRootStore(rootStore);  ocspVerifier.setOnlineCheckingAllowed(latestRevision || onlineCheckingAllowed);  return ocspVerifier.verify(signCert,issuerCert,signDate);}  }
class C{  protected void tearDown(){}  }
class C{  @Override public int hashCode(){  int hash=5;  hash=59 * hash + Objects.hashCode(this.database);  hash=59 * hash + Objects.hashCode(this.name);  hash=59 * hash + Objects.hashCode(this.description);  hash=59 * hash + (int)(this.getTtl() ^ (this.getTtl() >>> 32));  hash=59 * hash + (int)(this.getDeleteTtl() ^ (this.getDeleteTtl() >>> 32));  return hash;}  }
class C{  public boolean isUserLockout(String userDN,String orgDN){  populateLockoutValues(orgDN);  PWResetAccountLockout pwResetLockout=new PWResetAccountLockout(this);  return pwResetLockout.isLockout(userDN);}  }
class C{  private JPanel createPanel(){  GridBagConstraints gbc=new GridBagConstraints();  JPanel contentPanel=new JPanel(new GridBagLayout());  contentPanel.setBackground(UIFactory.DEFAULT_BACKGROUND);  gbc.fill=GridBagConstraints.BOTH;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  JPanel topPanel=new JPanel(new GridBagLayout());  topPanel.setBorder(UIFactory.DIALOG_PANEL_BORDER);  topPanel.setBackground(UIFactory.CURRENT_STEP_PANEL_BACKGROUND);  Insets insets=UIFactory.getCurrentStepPanelInsets();  gbc.weighty=0.0;  insets.bottom=0;  gbc.insets=insets;  topPanel.add(createTitlePanel(),gbc);  gbc.insets.top=UIFactory.TOP_INSET_INSTRUCTIONS_SUBPANEL;  topPanel.add(createInstructionsPane(),gbc);  gbc.insets.top=UIFactory.TOP_INSET_INPUT_SUBPANEL;  gbc.insets.bottom=UIFactory.TOP_INSET_INPUT_SUBPANEL;  topPanel.add(createInputPanel(),gbc);  gbc.weighty=1.0;  gbc.insets=UIFactory.getEmptyInsets();  topPanel.add(Box.createVerticalGlue(),gbc);  contentPanel.add(topPanel,gbc);  gbc.weighty=0.0;  gbc.insets=UIFactory.getButtonsPanelInsets();  contentPanel.add(createButtonsPanel(),gbc);  return contentPanel;}  }
class C{  public JobKOctets(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public SAMLv2AuthnAuthorityViewBean(){  super("SAMLv2AuthnAuthority");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public static String requestPath(HttpUrl url){  String path=url.encodedPath();  String query=url.encodedQuery();  return query != null ? (path + '?' + query) : path;}  }
class C{  public AccountService deleteAccount(String id,Handler<AsyncResult<Void>> resultHandler){  delegate.deleteAccount(id,resultHandler);  return this;}  }
class C{  public static NodeList selectNodeList(Node doc,String str) throws XPathException {  return selectNodeList(doc,str,doc);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.IssuesSpecificPolicyFaultElement createIssuesSpecificPolicyFaultElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.IssuesSpecificPolicyFaultElementImpl();}  }
class C{  private int subParseNumericZone(String text,int start,int sign,int count,boolean colon,CalendarBuilder calb){  int index=start;  parse:   try {    char c=text.charAt(index++);    int hours;    if (!isDigit(c)) {      break parse;    }    hours=c - '0';    c=text.charAt(index++);    if (isDigit(c)) {      hours=hours * 10 + (c - '0');    } else {      if (count > 0 || !colon) {        break parse;      }      --index;    }    if (hours > 23) {      break parse;    }    int minutes=0;    if (count != 1) {      c=text.charAt(index++);      if (colon) {        if (c != ':') {          break parse;        }        c=text.charAt(index++);      }      if (!isDigit(c)) {        break parse;      }      minutes=c - '0';      c=text.charAt(index++);      if (!isDigit(c)) {        break parse;      }      minutes=minutes * 10 + (c - '0');      if (minutes > 59) {        break parse;      }    }    minutes+=hours * 60;    calb.set(Calendar.ZONE_OFFSET,minutes * MILLIS_PER_MINUTE * sign).set(Calendar.DST_OFFSET,0);    return index;  } catch (  IndexOutOfBoundsException e) {  }  return 1 - index;}  }
class C{  @KnownFailure("not supported") public void testDelete6() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = ANY (SELECT id FROM "+ DatabaseCreator.PARENT_TABLE+ " WHERE id > 1)");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = 1;");  r.next();  assertEquals("Should be 2 rows",2,r.getInt(1));  r.close();}  }
class C{  public Task delete(String tokenId,ResultHandler<String,?> handler){  return delete(tokenId,null,handler);}  }
class C{  public String cachePolicy(String realmName,String policyName) throws AMConsoleException {  try {    PolicyManager policyManager=getPolicyManager(realmName);    Policy policy=policyManager.getPolicy(policyName);    PolicyCache cache=PolicyCache.getInstance();    return cache.cachePolicy(getUserSSOToken(),new CachedPolicy(policy));  } catch (  InvalidFormatException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  InvalidNameException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  NoPermissionException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  NameNotFoundException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  PolicyException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public GameLoop(Main game){  this.game=game;  this.player=game.getPlayer();}  }
class C{  public void addSubSchema(InputStream xmlSubSchema) throws SSOException, SMSException {  SMSEntry.validateToken(ssm.getSSOToken());  Document doc=SMSSchema.getXMLDocument(xmlSubSchema,false);  NodeList nl=doc.getElementsByTagName(SMSUtils.SUB_SCHEMA);  Set asNames=ss.getSubSchemaNames();  for (int i=0; i < nl.getLength(); i++) {    Node node=nl.item(i);    String nodeName=XMLUtils.getNodeAttributeValue(node,SMSUtils.NAME);    if (asNames.contains(nodeName)) {      Object[] args={nodeName};      throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-subschema-already-exists",args));    }  }  appendSubSchema(doc);}  }
class C{  public TaskClientException(Throwable cause){  super(cause);}  }
class C{  private static boolean c66EncodeCookie(){  return Boolean.valueOf(SystemProperties.get(Constants.C66_ENCODE_AM_COOKIE,"false")).booleanValue();}  }
class C{  private AddressCardElement parseEntry(String entry,Map userMap) throws JAXBException {  if (entry == null || entry.length() == 0) {    return null;  }  if (entry.indexOf(IDPPConstants.ATTRIBUTE_SEPARATOR) == -1) {    IDPPUtils.debug.error("IDPPAddressCard.parsEntry: Invalid" + " Entry " + entry);    return null;  }  AddressCardElement ace=IDPPUtils.getIDPPFactory().createAddressCardElement();  StringTokenizer st=new StringTokenizer(entry,IDPPConstants.ATTRIBUTE_SEPARATOR);  String addrType=null;  String nick=null;  String lComment=null;  String postalAddress=null;  String postalCode=null;  String city=null;  String state=null;  String country=null;  String id=null;  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (token.indexOf("=") == -1) {      continue;    }    StringTokenizer tokenizer=new StringTokenizer(token,"=");    if (tokenizer.countTokens() != 2) {      continue;    }    String attribute=tokenizer.nextToken();    String value=null;    String mappedAttribute=getAttributeMapper().getDSAttribute(attribute);    if (mappedAttribute == null || mappedAttribute.equals(attribute)) {      value=tokenizer.nextToken();    } else {      value=CollectionHelper.getMapAttr(userMap,mappedAttribute.toLowerCase());    }    if (value == null) {      continue;    }    if (attribute.equals("AddrType")) {      addrType=value;    } else     if (attribute.equals("Nick")) {      nick=value;    } else     if (attribute.equals("LComment")) {      lComment=value;    } else     if (attribute.equals("PostalAddress")) {      postalAddress=value;    } else     if (attribute.equals("PostalCode")) {      postalCode=value;    } else     if (attribute.equals("L")) {      city=value;    } else     if (attribute.equals("C")) {      country=value;    } else     if (attribute.equals("St")) {      state=value;    } else     if (attribute.equals("id")) {      id=value;    }  }  if (addrType == null) {    IDPPUtils.debug.error("IDPPAdressCard.parseEntry: Invalid entry" + " has no AddrType " + entry);    return null;  }  AddressType ae=IDPPUtils.getIDPPFactory().createAddressElement();  ae.setC(getDSTString(country));  ae.setSt(getDSTString(state));  ae.setL(getDSTString(city));  ae.setPostalAddress(getDSTString(postalAddress));  ae.setPostalCode(getDSTString(postalCode));  ace.setNick(getDSTString(nick));  ace.getAddrType().add(getDSTURI(addrType));  ace.setAddress(ae);  ace.setLComment(getDSTString(lComment));  ace.setId(id);  return ace;}  }
class C{  private FSLogoutStatus doHttpGet(String providerId){  FSUtils.debug.message("doHttpGet - Entered");  if (isWMLAgent) {    return doWMLGet(providerId);  } else {    return doHTMLGet(providerId);  }}  }
class C{  JELogFileFilter(){  this("",0);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AttributeConsumingServiceElement createAttributeConsumingServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AttributeConsumingServiceElementImpl();}  }
class C{  public boolean elementAvailable(QName elemName){  return m_availElems.containsKey(elemName);}  }
class C{  private void declareUsedNamespaces(XMPNode node,Set<String> usedPrefixes,int indent) throws IOException {  if (node.getOptions().isSchemaNode()) {    String prefix=node.getValue().substring(0,node.getValue().length() - 1);    declareNamespace(prefix,node.getName(),usedPrefixes,indent);  } else   if (node.getOptions().isStruct()) {    for (Iterator it=node.iterateChildren(); it.hasNext(); ) {      XMPNode field=(XMPNode)it.next();      declareNamespace(field.getName(),null,usedPrefixes,indent);    }  }  for (Iterator it=node.iterateChildren(); it.hasNext(); ) {    XMPNode child=(XMPNode)it.next();    declareUsedNamespaces(child,usedPrefixes,indent);  }  for (Iterator it=node.iterateQualifier(); it.hasNext(); ) {    XMPNode qualifier=(XMPNode)it.next();    declareNamespace(qualifier.getName(),null,usedPrefixes,indent);    declareUsedNamespaces(qualifier,usedPrefixes,indent);  }}  }
class C{  public final void removeField(String fieldName){  if (fieldName != null && fieldIndex(fieldName) >= 0)   unsupported();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MNElement createMNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MNElementImpl();}  }
class C{  public static String printDate(java.util.Calendar val){  if (theConverter == null)   initConverter();  return theConverter.printDate(val);}  }
class C{  @Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){  byte[] data=decCipher.update(fragment,offset,len);  byte[] content;  if (block_size != 0) {    int padding_length=data[data.length - 1] & 0xFF;    for (int i=0; i < padding_length; i++) {      if ((data[data.length - 2 - i] & 0xFF) != padding_length) {        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException("Received message has bad padding"));      }    }    content=new byte[data.length - hash_size - padding_length- 1];  } else {    content=new byte[data.length - hash_size];  }  mac_material_header[0]=type;  mac_material_header[3]=(byte)((0x00FF00 & content.length) >> 8);  mac_material_header[4]=(byte)(0x0000FF & content.length);  decMac.update(read_seq_num);  decMac.update(mac_material_header);  decMac.update(data,0,content.length);  byte[] mac_value=decMac.doFinal();  if (logger != null) {    logger.println("Decrypted:");    logger.print(data);    logger.println("Expected mac value:");    logger.print(mac_value);  }  for (int i=0; i < hash_size; i++) {    if (mac_value[i] != data[i + content.length]) {      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException("Bad record MAC"));    }  }  System.arraycopy(data,0,content,0,content.length);  incSequenceNumber(read_seq_num);  return content;}  }
class C{  public void logPacketContent(Packet pkt,String preamble){  LOG.warning(preamble + "\n" + getPacketRepresentation(pkt));}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String currentRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  try {    reconstructPolicy();    CachedPolicy cachedPolicy=getCachedPolicy();    PolicyModel model=(PolicyModel)getModel();    String name=cachedPolicy.getPolicy().getName();    if (name.equals(model.getLocalizedString("policy.create.name"))) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("policy.name.change"));      forwardTo();    } else {      try {        model.createPolicy(currentRealm,cachedPolicy.getPolicy());        backTrail();        forwardToPolicyViewBean();      } catch (      AMConsoleException e) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());        forwardTo();      }    }  } catch (  AMConsoleException e) {    redirectToStartURL();  }}  }
class C{  void notifyListeners(){  final ConnectionEvent event=new ConnectionEvent(this);  final Object[] listeners=eventListeners.toArray();  for (  final Object listener : listeners) {    ((ConnectionEventListener)listener).connectionClosed(event);  }}  }
class C{  public RemoteException(String s){  super(s);  initCause(null);}  }
class C{  public boolean equals(Object otherObject){  if (otherObject == null) {    return false;  }  if (!otherObject.getClass().equals(this.getClass())) {    return false;  }  NameValueList other=(NameValueList)otherObject;  if (this.size() != this.size()) {    return false;  }  Iterator<String> li=this.getNames();  while (li.hasNext()) {    String key=(String)li.next();    NameValue nv1=this.getNameValue(key);    NameValue nv2=(NameValue)other.get(key);    if (nv2 == null)     return false; else     if (!nv2.equals(nv1))     return false;  }  return true;}  }
class C{  private void writeListenerContents(ServerDescriptor desc){  if (!isScriptFriendly()) {    LocalizableMessage title=INFO_LISTENERS_TITLE.get();    println(centerTitle(title));  }  Set<ConnectionHandlerDescriptor> allHandlers=desc.getConnectionHandlers();  if (allHandlers.isEmpty()) {    if (desc.getStatus() == ServerDescriptor.ServerStatus.STARTED) {      if (!desc.isAuthenticated()) {        println(INFO_NOT_AVAILABLE_AUTHENTICATION_REQUIRED_CLI_LABEL.get());      } else {        println(INFO_NO_LISTENERS_FOUND.get());      }    } else {      println(INFO_NO_LISTENERS_FOUND.get());    }  } else {    ConnectionHandlerTableModel connHandlersTableModel=new ConnectionHandlerTableModel(false);    connHandlersTableModel.setData(allHandlers);    writeConnectionHandlersTableModel(connHandlersTableModel,desc);  }}  }
class C{  ThreadLocalMap(ThreadLocal<?> firstKey,Object firstValue){  table=new Entry[INITIAL_CAPACITY];  int i=firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);  table[i]=new Entry(firstKey,firstValue);  size=1;  setThreshold(INITIAL_CAPACITY);}  }
class C{  private boolean generateEntries(final EntryGenerator generator,final LDIFEntryWriter writer,final StringArgument ldifFile){  try {    while (generator.hasNext()) {      final Entry entry=generator.readEntry();      try {        writer.writeEntry(entry);      } catch (      IOException e) {        errPrintln(ERR_MAKELDIF_ERROR_WRITING_LDIF.get(ldifFile.getValue(),e.getMessage()));        return false;      }      if ((++numberOfEntriesWritten % 1000) == 0) {        errPrintln(INFO_MAKELDIF_PROCESSED_N_ENTRIES.get(numberOfEntriesWritten));      }    }  } catch (  Exception e) {    errPrintln(ERR_MAKELDIF_EXCEPTION_DURING_PROCESSING.get(e.getMessage()));    return false;  }  return true;}  }
class C{  public static boolean mightBeProximate(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  boolean mightBeProximate=false;  int argLen;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    argLen=compiler.getArgLength(opPos);  break;default :argLen=compiler.getArgLengthOfStep(opPos);}int predPos=compiler.getFirstPredicateOpPos(opPos);int count=0;while (OpCodes.OP_PREDICATE == compiler.getOp(predPos)) {count++;int innerExprOpPos=predPos + 2;int predOp=compiler.getOp(innerExprOpPos);switch (predOp) {case OpCodes.OP_VARIABLE:return true;case OpCodes.OP_LOCATIONPATH:break;case OpCodes.OP_NUMBER:case OpCodes.OP_NUMBERLIT:return true;case OpCodes.OP_FUNCTION:boolean isProx=functionProximateOrContainsProximate(compiler,innerExprOpPos);if (isProx) return true;break;case OpCodes.OP_GT:case OpCodes.OP_GTE:case OpCodes.OP_LT:case OpCodes.OP_LTE:case OpCodes.OP_EQUALS:int leftPos=OpMap.getFirstChildPos(innerExprOpPos);int rightPos=compiler.getNextOpPos(leftPos);isProx=isProximateInnerExpr(compiler,leftPos);if (isProx) return true;isProx=isProximateInnerExpr(compiler,rightPos);if (isProx) return true;break;default :return true;}predPos=compiler.getNextOpPos(predPos);}return mightBeProximate;}  }
class C{  public Set searchPeopleContainers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER),getSearchFilter(AMObject.PEOPLE_CONTAINER),wildcard,avPairs,level);}  }
class C{  public static boolean areComparable(Object o1,Object o2){  if (o1 == null || o2 == null) {    return false;  }  if ((isComparable(o1) && isComparable(o2)) && (o1.getClass().isAssignableFrom(o2.getClass()) || o2.getClass().isAssignableFrom(o1.getClass()))) {    return true;  }  return false;}  }
class C{  public boolean contains(Object o){  return indexOf(o) >= 0;}  }
class C{  public Copies(int value){  super(value,1,Integer.MAX_VALUE);}  }
class C{  public IOUtils(){  super();}  }
class C{  private FSLogoutStatus doWMLGet(String providerId){  FSUtils.debug.message("In WML based response");  StringBuffer destination=new StringBuffer();  destination.append(hostedDescriptor.getSingleLogoutServiceURL());  if ((destination.toString()).indexOf(QUESTION_MARK) == -1) {    destination.append(QUESTION_MARK);  } else {    destination.append(AMPERSAND);  }  destination.append("logoutSource=logoutGet");  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Submit action : " + destination.toString());  }  FSUtils.debug.message("Calling getLogoutGETProviders");  HashMap providerMap=FSLogoutUtil.getLogoutGETProviders(userID,providerId,sessionIndex,realm,metaAlias);  Vector providerGetList=(Vector)providerMap.get("Provider");  FSUtils.debug.message("Calling cleanSessionMapProviders");  FSLogoutUtil.cleanSessionMapProviders(userID,providerGetList,metaAlias);  FSUtils.debug.message("Calling getMultiLogoutRequest");  String multiLogoutRequest=getMultiLogoutRequest(providerMap);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Image Statements : " + multiLogoutRequest);  }  request.setAttribute("DESTINATION_URL",destination.toString());  request.setAttribute("MULTI_LOGOUT_REQUEST",multiLogoutRequest);  try {    request.getRequestDispatcher(WML_LOGOUT_JSP).forward(request,response);  } catch (  ServletException sE) {    FSUtils.debug.error("Error in performing HTTP GET for WML agent:",sE);    return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);  }catch (  IOException ioE) {    FSUtils.debug.error("Error in performing HTTP GET for WML agent:",ioE);    return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);  }  return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);}  }
class C{  public boolean removeAlertGenerator(AlertGenerator generator){synchronized (alertGenerators) {    return alertGenerators.remove(generator);  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  return m_timeoutArray[m_timeout];}  }
class C{  protected JsonValue checkCTSRegistration(String tokenId) throws CoreTokenException {  Token coreToken=coreTokenService.read(tokenId);  if (coreToken == null) {    return null;  }  Integer accept=coreToken.getAttribute(CoreTokenField.INTEGER_ONE);  if (accept == null) {    return null;  }  if (accept == PushNotificationConstants.ACCEPT_VALUE) {    return JsonValueBuilder.toJsonValue(new String(coreToken.getBlob()));  }  return null;}  }
class C{  public static void convertToBinary(File in,File out) throws IOException, ParserConfigurationException, ParseException, SAXException, PropertyListFormatException {  NSObject root=parse(in);  saveAsBinary(root,out);}  }
class C{  protected boolean handlingMyLastProtocolMessage(List<ProtocolMessage> protocolMessages,int pointer){  return ((protocolMessages.size() == (pointer + 1)) || (protocolMessages.get(pointer + 1).getMessageIssuer() != tlsContext.getMyConnectionEnd()));}  }
class C{  public ConcurrentHashMap(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);  putAll(m);}  }
class C{  public static Paint newRotateBottomImagePaint(){  final Paint paint=new Paint();  paint.setColor(Color.WHITE);  paint.setStrokeWidth(3);  return paint;}  }
class C{  private void playFlagPoleSeq(){  if (outBoundThrowback != 0) {    if (spriteFrame.getScaleX() == -1)     spriteFrame.setScaleX(1);    if (MARIO_STATE <= 2) {      MARIO_STATE=1;      opacity=1;      setMidGrowth();      resetAura();      updateSVGArrContent(SVGData_b);      while (playerStates.size() > 12)       playerStates.remove(0);    }    Main.auraLoop.play();    spriteFrame.setImage(playerStates.get(0));    gravity=sideCollidePush=xVel=yVel=outBoundThrowback=0;    sMario.removeEvents();    sMario.getRoot().getChildren().add(sMario.getElevateEffectView());    sMario.getElevateEffectView().setPreserveRatio(true);  }  sMario.getElevateEffectView().setTranslateX(xPos - (MARIOSCALEY_s * 1.5));  sMario.getElevateEffectView().setTranslateY(yPos + (MARIOSCALEY_b * 0.26));  aura.update(xPos,yPos);  if (yPos >= (41 * REL_HEIGHT))   if (sideCollidePush++ < 10)   spriteFrame.setImage(playerStates.get(11)); else {    main.Main.teleport.play();    while (yPos >= (41 * REL_HEIGHT)) {      xPos-=1;      yPos-=1;      updatePosition();    }    spriteFrame.setImage(playerStates.get(0));    sideCollidePush=-60;  } else {    if (sideCollidePush < 0) {      sideCollidePush++;      return;    }    if (sideCollidePush == 0) {      sMario.getRoot().getChildren().add(sMario.getFlagDestroyEffectView());      sMario.getFlagDestroyEffectView().setTranslateX(xPos - (22.4 * REL_HEIGHT));      sMario.getFlagDestroyEffectView().setTranslateY(yPos - (11.2 * REL_HEIGHT));    }    if (sideCollidePush < 177) {switch ((int)sideCollidePush++) {case 6:        main.Main.energyCharge.play();      spriteFrame.setImage(playerStates.get(6));    spriteFrame.setTranslateX(xPos - (6.0 / 3392.0 * STAGEWIDTH));  sMario.getFlagDestroyEffectView().setImage(sMario.getFlagDestroyEffects()[0]);break;case 12:sMario.getFlagDestroyEffectView().setImage(sMario.getFlagDestroyEffects()[1]);break;case 18:sMario.getFlagDestroyEffectView().setImage(sMario.getFlagDestroyEffects()[2]);break;case 24:sMario.getFlagDestroyEffectView().setImage(sMario.getFlagDestroyEffects()[3]);break;case 30:sMario.getFlagDestroyEffectView().setImage(sMario.getFlagDestroyEffects()[4]);break;case 36:sMario.getFlagDestroyEffectView().setImage(sMario.getFlagDestroyEffects()[5]);Main.gameBGM.stop();Main.flagPoleSeq_bgm.play();break;case 42:sMario.getRoot().getChildren().remove(sMario.getFlagDestroyEffectView());break;case 63:spriteFrame.setImage(playerStates.get(7));break;case 80:spriteFrame.setImage(playerStates.get(8));break;case 126:spriteFrame.setImage(playerStates.get(9));break;case 156:spriteFrame.setImage(playerStates.get(10));Main.energyRelease.play();SpriteHandler.getPlayerPowerList().add(sMario.genFireballBig(xPos,yPos));break;case 176:spriteFrame.setImage(playerStates.get(0));spriteFrame.setTranslateX(spriteFrame.getTranslateX() + (6.0 / 3392.0 * STAGEWIDTH));break;}} else if (SpriteHandler.getPlayerPowerList().isEmpty()) {gravity=tempGravity;playFlagPoleSeq=false;sMario.getRoot().getChildren().remove(sMario.getElevateEffectView());SpriteHandler.getCurrentCast().get(0).getSpriteBoundsArray()[3].setContent(sMario.switchStagePath());sMario.setRight();endSeqFinish=true;}}}  }
class C{  public static boolean isUpperCase(final String txt){  boolean upper=true;  for (  final char c : txt.toCharArray()) {    if (Character.isLowerCase(c)) {      upper=false;      break;    }  }  return upper;}  }
class C{  private void grow(){  int oldCapacity=queue.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity < 0)   newCapacity=Integer.MAX_VALUE;  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  public void reset(){  Cell[] as=cells;  Cell a;  base=identity;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       a.value=identity;    }  }}  }
class C{  private static void swapConditional(Polynomial25519 a,Polynomial25519 b,long iswap){  int swap=(int)(-iswap);  for (int i=0; i < 10; i++) {    int x=swap & (((int)a.c[i]) ^ ((int)b.c[i]));    a.c[i]=((int)a.c[i]) ^ x;    b.c[i]=((int)b.c[i]) ^ x;  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteBusyTest.fail(s);  }}  }
class C{  private XACMLPrivilegeUtils(){}  }
class C{  public static String toString(byte value){  return Integer.toString(value);}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public static boolean isICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  @Override public void clear() throws IOException {  if (writer != null) {    throw new IOException();  } else {    nextChar=0;    if (LIMIT_BUFFER && (cb.length > Constants.DEFAULT_TAG_BUFFER_SIZE)) {      cb=new char[Constants.DEFAULT_TAG_BUFFER_SIZE];      bufferSize=cb.length;    }  }}  }
class C{  public void rejectDrag(){  getDropTargetContext().rejectDrag();}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.SPDescriptorType.AssertionConsumerServiceURLType createSPDescriptorTypeAssertionConsumerServiceURLType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.SPDescriptorTypeImpl.AssertionConsumerServiceURLTypeImpl();}  }
class C{  public void testSetScaleIntRoundingMode(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.setScale(newScale,RoundingMode.HALF_EVEN);  String res="123121247898748298842980.877981045763478138";  int resScale=18;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public DescendantIterator(){  super(null);  m_axis=Axis.DESCENDANTSORSELFFROMROOT;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  public static boolean hasBackend(String backendID){  return directoryServer.backends.containsKey(backendID);}  }
class C{  public CryptPasswordStorageScheme(){  super();}  }
class C{  @Override public void run(){  ArrayList<String> drainList=new ArrayList<>(capacity);  String message=null;  while (!stopRequested.get() || !queue.isEmpty()) {    try {      queue.drainTo(drainList,capacity);      if (drainList.isEmpty()) {        message=queue.poll(10,TimeUnit.SECONDS);        if (message != null) {          do {            writer.writeRecord(message);            message=queue.poll();          } while (message != null);          if (autoFlush) {            flush();          }        }      } else {        for (        String record : drainList) {          writer.writeRecord(record);        }        drainList.clear();        if (autoFlush) {          flush();        }      }    } catch (    InterruptedException ex) {    }  }}  }
class C{  BigDecimal toBigDecimal(int sign,int scale){  if (intLen == 0 || sign == 0)   return BigDecimal.zeroValueOf(scale);  int[] mag=getMagnitudeArray();  int len=mag.length;  int d=mag[0];  if (len > 2 || (d < 0 && len == 2))   return new BigDecimal(new BigInteger(mag,sign),INFLATED,scale,0);  long v=(len == 2) ? ((mag[1] & LONG_MASK) | (d & LONG_MASK) << 32) : d & LONG_MASK;  return BigDecimal.valueOf(sign == -1 ? -v : v,scale);}  }
class C{  public static double distance(Point point1,Point point2,String units) throws TurfException {  double degrees2radians=Math.PI / 180;  Position coordinates1=point1.getCoordinates();  Position coordinates2=point2.getCoordinates();  double dLat=degrees2radians * (coordinates2.getLatitude() - coordinates1.getLatitude());  double dLon=degrees2radians * (coordinates2.getLongitude() - coordinates1.getLongitude());  double lat1=degrees2radians * coordinates1.getLatitude();  double lat2=degrees2radians * coordinates2.getLatitude();  double a=Math.pow(Math.sin(dLat / 2),2) + Math.pow(Math.sin(dLon / 2),2) * Math.cos(lat1) * Math.cos(lat2);  return TurfHelpers.radiansToDistance(2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a)),units);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode13.class,args);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SPKIDataType.SPKISexp createSPKIDataTypeSPKISexp() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SPKIDataTypeImpl.SPKISexpImpl();}  }
class C{  public UmaException(int statusCode,String error,String description){  super(statusCode,error,description);}  }
class C{  public RequestAuthenticator(SecureRandom rand,String secret) throws NoSuchAlgorithmException {  final byte[] authenticator=new byte[16];  rand.nextBytes(authenticator);  final MessageDigest md5=MessageDigest.getInstance("MD5");  md5.update(authenticator);  md5.update(secret.getBytes(StandardCharsets.UTF_8));  octets=md5.digest();}  }
class C{  public static Control createShortCircuitControl(int resultCode,String section){  return new ShortCircuitRequestControl(false,resultCode,section);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignatureMethodType.HMACOutputLength createSignatureMethodTypeHMACOutputLength(java.math.BigInteger value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureMethodTypeImpl.HMACOutputLengthImpl(value);}  }
class C{  @PUT @Consumes("application/json") @Path("{token.id}") public void updateToken(@Context HttpHeaders headers,@Context HttpServletRequest request,@PathParam("token.id") String tokenId,@HeaderParam("If-Match") String eTag,String msgBody){  try {    JSONObject jObj=new JSONObject(msgBody);    CoreTokenStoreFactory.getInstance().updateToken(CoreTokenUtils.getAdminSubject(),tokenId,eTag,jObj);    String[] data=new String[]{jObj.names().toString()};    TokenLogUtils.access(Level.INFO,TokenLogUtils.TOKEN_UPDATE_SUCCESS,data,null,tokenId);  } catch (  CoreTokenException ce) {    CoreTokenUtils.debug.error("CoreTokenResource.updateToken",ce);    String[] data=new String[]{ce.getLocalizedMessage()};    TokenLogUtils.error(Level.INFO,TokenLogUtils.UNABLE_TO_UPDATE_TOKEN,data,null,tokenId);    throw getWebApplicationException(headers,ce);  }catch (  JSONException je) {    CoreTokenUtils.debug.error("CoreTokenResource.updateToken",je);    String[] data=new String[]{je.getLocalizedMessage()};    TokenLogUtils.error(Level.INFO,TokenLogUtils.UNABLE_TO_UPDATE_TOKEN,data,null,tokenId);    throw getWebApplicationException(je,MimeType.PLAIN);  }}  }
class C{  public void treatAllAuthenticatedUsersAsApplicationRole(){  if (authenticatedUsers) {    authenticatedUsers=false;    String results[]=new String[authRoles.length + 1];    for (int i=0; i < authRoles.length; i++)     results[i]=authRoles[i];    results[authRoles.length]=ROLE_ALL_AUTHENTICATED_USERS;    authRoles=results;    authConstraint=true;  }}  }
class C{  protected void comment(Element elem) throws BadLocationException, IOException {  AttributeSet as=elem.getAttributes();  if (matchNameAttribute(as,HTML.Tag.COMMENT)) {    Object comment=as.getAttribute(HTML.Attribute.COMMENT);    if (comment instanceof String) {      writeComment((String)comment);    } else {      writeComment(null);    }  }}  }
class C{  public void test_getBooleanLjava_lang_ObjectI(){  boolean[] x={true};  boolean ret=false;  boolean thrown=false;  try {    ret=Array.getBoolean(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertTrue("Get returned incorrect value",ret);  try {    ret=Array.getBoolean(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getBoolean(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getBoolean(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public void startAttribute(String uri,String local){  textBuf.setLength(0);  this.attNamespaceUri=uri;  this.attLocalName=local;}  }
class C{  public void notifySessionRefresh(Session session,long oldMaxCachingTime,long oldMaxIdleTime,long oldMaxSessionTime){  SessionCuller sessionCuller=getSessionCuller(session.getID());  if (sessionCuller != null) {    if ((!sessionCuller.isScheduled()) || (oldMaxCachingTime > session.getMaxCachingTime()) || (oldMaxIdleTime > session.getMaxIdleTime())|| (oldMaxSessionTime > session.getMaxSessionTime())) {      sessionCuller.scheduleToTimerPool();    }  }}  }
class C{  public T targetObjectId(String targetObjectId){  jsonValue.put(TARGET_OBJECT_ID,targetObjectId);  return self();}  }
class C{  protected Attr[] sortAttributes(NamedNodeMap attrs){  int len=(attrs != null) ? attrs.getLength() : 0;  Attr[] array=new Attr[len];  for (int i=0; i < len; i++) {    array[i]=(Attr)attrs.item(i);  }  for (int i=0; i < len - 1; i++) {    String name=array[i].getNodeName();    int index=i;    for (int j=i + 1; j < len; j++) {      String curName=array[j].getNodeName();      if (curName.compareTo(name) < 0) {        name=curName;        index=j;      }    }    if (index != i) {      Attr temp=array[i];      array[i]=array[index];      array[index]=temp;    }  }  return array;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RelTokenElement createRelTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RelTokenElementImpl();}  }
class C{  private int shrinkFlexItems(FlexLine flexLine,@FlexDirection int flexDirection,int maxMainSize,int paddingAlongMainAxis,int startIndex){  int childIndex=startIndex;  int sizeBeforeShrink=flexLine.mMainSize;  if (flexLine.mTotalFlexShrink <= 0 || maxMainSize > flexLine.mMainSize) {    childIndex+=flexLine.mItemCount;    return childIndex;  }  boolean needsReshrink=false;  float unitShrink=(flexLine.mMainSize - maxMainSize) / flexLine.mTotalFlexShrink;  float accumulatedRoundError=0;  flexLine.mMainSize=paddingAlongMainAxis + flexLine.mDividerLengthInMainSize;  for (int i=0; i < flexLine.mItemCount; i++) {    View child=getReorderedChildAt(childIndex);    if (child == null) {      continue;    } else     if (child.getVisibility() == View.GONE) {      childIndex++;      continue;    }    LayoutParams lp=(LayoutParams)child.getLayoutParams();    if (isMainAxisDirectionHorizontal(flexDirection)) {      if (!mChildrenFrozen[childIndex]) {        float rawCalculatedWidth=child.getMeasuredWidth() - unitShrink * lp.flexShrink;        if (i == flexLine.mItemCount - 1) {          rawCalculatedWidth+=accumulatedRoundError;          accumulatedRoundError=0;        }        int newWidth=Math.round(rawCalculatedWidth);        if (newWidth < lp.minWidth) {          needsReshrink=true;          newWidth=lp.minWidth;          mChildrenFrozen[childIndex]=true;          flexLine.mTotalFlexShrink-=lp.flexShrink;        } else {          accumulatedRoundError+=(rawCalculatedWidth - newWidth);          if (accumulatedRoundError > 1.0) {            newWidth+=1;            accumulatedRoundError-=1;          } else           if (accumulatedRoundError < -1.0) {            newWidth-=1;            accumulatedRoundError+=1;          }        }        child.measure(MeasureSpec.makeMeasureSpec(newWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(child.getMeasuredHeight(),MeasureSpec.EXACTLY));      }      flexLine.mMainSize+=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;    } else {      if (!mChildrenFrozen[childIndex]) {        float rawCalculatedHeight=child.getMeasuredHeight() - unitShrink * lp.flexShrink;        if (i == flexLine.mItemCount - 1) {          rawCalculatedHeight+=accumulatedRoundError;          accumulatedRoundError=0;        }        int newHeight=Math.round(rawCalculatedHeight);        if (newHeight < lp.minHeight) {          needsReshrink=true;          newHeight=lp.minHeight;          mChildrenFrozen[childIndex]=true;          flexLine.mTotalFlexShrink-=lp.flexShrink;        } else {          accumulatedRoundError+=(rawCalculatedHeight - newHeight);          if (accumulatedRoundError > 1.0) {            newHeight+=1;            accumulatedRoundError-=1;          } else           if (accumulatedRoundError < -1.0) {            newHeight-=1;            accumulatedRoundError+=1;          }        }        child.measure(MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));      }      flexLine.mMainSize+=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;    }    childIndex++;  }  if (needsReshrink && sizeBeforeShrink != flexLine.mMainSize) {    shrinkFlexItems(flexLine,flexDirection,maxMainSize,paddingAlongMainAxis,startIndex);  }  return childIndex;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String name=(String)getDisplayFieldValue(INSTANCE_NAME);  String type=(String)getDisplayFieldValue(INSTANCE_TYPE);  if (name == null || name.length() < 1) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","authentication.missing.instance.name");    forwardTo();  } else   if (type == null || type.length() < 1) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","authentication.missing.instance.type");    forwardTo();  } else {    AuthPropertiesModel model=(AuthPropertiesModel)getModel();    try {      model.createAuthInstance(name,type);      forwardToProperties(event);    } catch (    AMConsoleException ae) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",ae.getMessage());      forwardTo();    }  }}  }
class C{  public FrameBodyTRCK(){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  setObjectValue(DataTypes.OBJ_TEXT,new PartOfSet.PartOfSetValue());}  }
class C{  protected int checkIPHistory(){  int retVal=0;  String ipHistoryValues=null;  String newHistory=clientIP;  int historyCount=0;  if (IPHistoryAttribute != null) {    ipHistoryValues=getIdentityAttributeString(IPHistoryAttribute);    if (debug.messageEnabled()) {      debug.message("{}.checkIPHistory: Client IP = {}, History IP = {}",ADAPTIVE,clientIP,ipHistoryValues);    }    if (ipHistoryValues != null) {      StringTokenizer st=new StringTokenizer(ipHistoryValues,"|");      while (st.hasMoreTokens()) {        String theIP=st.nextToken();        historyCount+=1;        if (historyCount < IPHistoryCount) {          newHistory+="|" + theIP;        }        if (clientIP.equals(theIP)) {          retVal=IPHistoryScore;        }      }    }  }  if (IPHistorySave && retVal == 0) {    postAuthNMap.put("IPSAVE",newHistory);    postAuthNMap.put("IPAttr",IPHistoryAttribute);  }  if (!IPHistoryInvert) {    retVal=IPHistoryScore - retVal;  }  return retVal;}  }
class C{  public void preComputeBias() throws Exception {  int labels[]=readLabels();  System.out.println(saw.alphaB.length);  int map[]=new int[saw.alphaB.length];  int makeMap=0;  for (int i=0; i < dataNum; i++) {    if (TestTrain[i] == 1) {      map[makeMap]=i;      makeMap++;    }  }  double[][] alpha=saw.alphaB;  FileWriter fw111=new FileWriter(new File(modelFile + "/Bias/" + source+ "_alphaBiasLevel_"+ alphaLevel+ "_alpha_"+ String.valueOf(flagNum)+ "->"+ String.valueOf(limitRandom * 100)+ "%"+ ".txt"));  for (int i=0; i < alpha.length; i++) {    fw111.write(String.valueOf(labels[map[saw.indexSvm[i]]]) + " ");    for (int j=0; j < saw.nr_class; j++)     fw111.write(String.valueOf(alpha[i][j]) + " ");    fw111.write('\n');  }  fw111.close();  double[][] weightSvm=saw.weightB;  for (int i=0; i < saw.alphaB.length; i++) {    int id=map[saw.indexSvm[i]];    int label=labels[id];    for (int j=0; j < saw.nr_class; j++) {      double c=0;      if (j == label) {        c=Evaluate_SVM.C;      }      for (int k=0; k < dimension; k++)       bias[id][k]+=(c - alpha[i][j]) * (weightSvm[label][k] - weightSvm[j][k]);    }    double sum=0;    for (int j=0; j < dimension; j++) {      sum+=bias[id][j] * bias[id][j];    }    sum=Math.sqrt(sum);    if (sum > 0) {      for (int j=0; j < dimension; j++) {        bias[id][j]/=sum;      }    }  }  FileWriter twBias=new FileWriter(new File(modelFile + "/Bias/" + source+ "_alphaBiasLevel_"+ alphaLevel+ "_Bias_"+ String.valueOf(flagNum)+ "->"+ String.valueOf(limitRandom * 100)+ "%"+ ".txt"));  for (int i=0; i < dataNum; i++) {    if (TestTrain[i] == 1) {      twBias.write(String.valueOf(i) + "\t" + String.valueOf(labels[i])+ "\t");      for (int j=0; j < dimension; j++) {        twBias.write(String.valueOf(bias[i][j]) + "\t");      }      twBias.write("\n");    }  }  twBias.close();}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.deleteFoo(foo);}  }
class C{  public void test_getParams() throws Exception {  DSAParams param=new DSAParameterSpec(Util.P,Util.Q,Util.G);  KeyPairGenerator gen=KeyPairGenerator.getInstance("DSA");  gen.initialize((DSAParameterSpec)param);  DSAKey key=null;  key=(DSAKey)gen.generateKeyPair().getPrivate();  assertDSAParamsEquals(param,key.getParams());  key=(DSAKey)gen.generateKeyPair().getPublic();  assertDSAParamsEquals(param,key.getParams());}  }
class C{  public Conditions(java.util.Date notBefore,java.util.Date notOnOrAfter,Condition condition,AudienceRestrictionCondition arc) throws SAMLException {  _notBefore=notBefore;  _notOnOrAfter=notOnOrAfter;  if ((notBefore != null) && (notOnOrAfter != null)) {    if ((notBefore.after(notOnOrAfter)) || (notBefore.equals(notOnOrAfter))) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Conditions:  invalid  data");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));    }  }  if (arc != null) {    _arcs.add(arc);  }}  }
class C{  private void unSubscribeByEventType(Class eventType){  List<Subscription> subscriptions=subscriptionsByEventType.get(eventType);  if (subscriptions != null) {    Iterator<Subscription> iterator=subscriptions.iterator();    while (iterator.hasNext()) {      Subscription subscription=iterator.next();      if (subscription != null && !subscription.isUnsubscribed()) {        subscription.unsubscribe();        iterator.remove();      }    }  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.TelephoneNumberElement createTelephoneNumberElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.TelephoneNumberElementImpl(value);}  }
class C{  public Map read(SSOToken token,String dn) throws SMSException, SSOException {  if (dn == null || dn.length() == 0) {    debug.error("SMSEmbeddedLdapObject.read: Null or Empty DN=" + dn);    throw new SMSException("","sms-NO_SUCH_OBJECT");  }  if (!LDAPUtils.isDN(dn)) {    debug.warning("SMSEmbeddedLdapObject: Invalid DN=" + dn);    String[] args={dn};    throw new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-INVALID_DN",args);  }  if (SMSNotificationManager.isCacheEnabled() && entriesNotPresent.contains(dn)) {    if (debug.messageEnabled()) {      debug.message("SMSEmbeddedLdapObject:read Entry not present: " + dn + " (checked in cached)");    }    return (null);  }  SearchRequest request=Requests.newSearchRequest(DN.valueOf(dn),SearchScope.BASE_OBJECT,SearchFilter.objectClassPresent(),smsAttributes.toArray(new String[smsAttributes.size()]));  InternalSearchOperation iso=icConn.processSearch(request);  ResultCode resultCode=iso.getResultCode();  if (resultCode == ResultCode.SUCCESS) {    LinkedList searchResult=iso.getSearchEntries();    if (!searchResult.isEmpty()) {      SearchResultEntry entry=(SearchResultEntry)searchResult.get(0);      List attributes=entry.getAttributes();      return EmbeddedSearchResultIterator.convertLDAPAttributeSetToMap(attributes);    } else {      return null;    }  } else   if (resultCode == ResultCode.NO_SUCH_OBJECT) {    objectChanged(dn,DELETE);    if (debug.messageEnabled()) {      debug.message("SMSEmbeddedLdapObject.read: " + "entry not present:" + dn);    }    return null;  } else {    if (debug.warningEnabled()) {      debug.warning("SMSEmbeddedLdapObject.read: " + "Error in accessing entry DN: " + dn + ", error code = "+ resultCode);    }    throw new SMSException("","sms-entry-cannot-access");  }}  }
class C{  public boolean isOverflow(){  return this.type == TYPE_OVERFLOW;}  }
class C{  public MatchedValuesControl(boolean isCritical,List<MatchedValuesFilter> filters){  super(OID_MATCHED_VALUES,isCritical);  this.filters=filters;}  }
class C{  public static void main(final TempLogFile tempLogFile,String[] args){  SplashScreen screen=new SplashScreen();  screen.tempLogFile=tempLogFile;  screen.display(args);}  }
class C{  public void removeChangeListener(ChangeListener l){  styles.removeChangeListener(l);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  NodeList childList;  Node child;  String value;  Node grandChild;  int length;  java.util.List result=new java.util.ArrayList();  java.util.List expectedNormal=new java.util.ArrayList();  expectedNormal.add("\u03b2");  expectedNormal.add(" Dallas, ");  expectedNormal.add("\u03b3");  expectedNormal.add("\n 98554");  java.util.List expectedExpanded=new java.util.ArrayList();  expectedExpanded.add("\u03b2 Dallas, \u03b3\n 98554");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  addressNode=elementList.item(1);  childList=addressNode.getChildNodes();  length=(int)childList.getLength();  for (int indexN1007C=0; indexN1007C < childList.getLength(); indexN1007C++) {    child=(Node)childList.item(indexN1007C);    value=child.getNodeValue();    if ((value == null)) {      grandChild=child.getFirstChild();      assertNotNull("grandChildNotNull",grandChild);      value=grandChild.getNodeValue();      result.add(value);    } else {      result.add(value);    }  }  if (equals(1,length)) {    assertEquals("assertEqCoalescing",expectedExpanded,result);  } else {    assertEquals("assertEqNormal",expectedNormal,result);  }}  }
class C{  public ConfigAddListenerAdaptor(ServerManagementContext context,ManagedObjectPath<?,?> path,InstantiableRelationDefinition<?,S> relation,ServerManagedObjectAddListener<S> listener){  this.serverContext=context;  this.path=path;  this.instantiableRelation=relation;  this.optionalRelation=null;  this.setRelation=null;  this.listener=listener;  this.cachedManagedObject=null;}  }
class C{  public static MessagePropertyKey parseString(String key){  int li=key.lastIndexOf("_");  if (li == -1) {    throw new IllegalArgumentException("Incorrectly formatted key " + key);  }  final String description=key.substring(0,li).toUpperCase();  Integer ordinal=null;  try {    String ordString=key.substring(li + 1);    ordinal=Integer.parseInt(ordString);  } catch (  Exception nfe) {  }  return new MessagePropertyKey(description,ordinal);}  }
class C{  @Override public boolean isValidToken(SSOToken token,boolean ignored){  return isValidToken(token);}  }
class C{  public static AttributeDescription parseAttrDescription(String attrDescr){  AttributeDescription result=AttributeDescription.valueOf(attrDescr);  if (result.getAttributeType().getSyntax().isBEREncodingRequired()) {    result=result.withOption("binary");  }  return result;}  }
class C{  private void notify_readers(){  currentReaders+=queuedReaders;  queuedReaders=0;  notifyAll();}  }
class C{  public void testHeaderParams2(){  try {    Header h=tiHeaderFactory.createHeader("From","sip:07077004201@x.com;tag=gc2zbu");    System.err.println(h);    assertTrue(h instanceof FromHeader);    FromHeader c=(FromHeader)h;    URI u=c.getAddress().getURI();    assertTrue(u.isSipURI());    assertFalse("URI must have no params",((SipURI)u).getParameterNames().hasNext());    assertNotNull("Parameter 'tag' must be assigned to the header",c.getTag());  } catch (  ParseException e) {    e.printStackTrace();    fail(e.getMessage());  } finally {    logTestCompleted("testHeaderParams2()");  }}  }
class C{  private static int[] trustedStripLeadingZeroInts(int val[]){  int vlen=val.length;  int keep;  for (keep=0; keep < vlen && val[keep] == 0; keep++)   ;  return keep == 0 ? val : java.util.Arrays.copyOfRange(val,keep,vlen);}  }
class C{  public boolean canOffsetTiles(){  return canOffsetTiles;}  }
class C{  public static void main(String[] args){  BooleanArgument displayUsage;  BooleanArgument useGUI=null;  StringArgument fileNames=null;  LocalizableMessage toolDescription=INFO_PROFILEVIEWER_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser("org.opends.server.plugins.profiler.ProfileViewer",toolDescription,false);  try {    fileNames=StringArgument.builder("fileName").shortIdentifier('f').description(INFO_PROFILEVIEWER_DESCRIPTION_FILENAMES.get()).multiValued().required().valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    useGUI=BooleanArgument.builder("useGUI").shortIdentifier('g').description(INFO_PROFILEVIEWER_DESCRIPTION_USE_GUI.get()).buildAndAddToParser(argParser);    displayUsage=showUsageArgument();    argParser.addArgument(displayUsage);    argParser.setUsageArgument(displayUsage);  } catch (  ArgumentException ae) {    LocalizableMessage message=ERR_PROFILEVIEWER_CANNOT_INITIALIZE_ARGS.get(ae.getMessage());    System.err.println(message);    System.exit(1);  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(System.err,ERR_PROFILEVIEWER_ERROR_PARSING_ARGS.get(ae.getMessage()));    System.exit(1);  }  if (argParser.usageOrVersionDisplayed()) {    System.exit(0);  }  ProfileViewer viewer=new ProfileViewer();  for (  String filename : fileNames.getValues()) {    try {      viewer.processDataFile(filename);    } catch (    Exception e) {      LocalizableMessage message=ERR_PROFILEVIEWER_CANNOT_PROCESS_DATA_FILE.get(filename,stackTraceToSingleLineString(e));      System.err.println(message);    }  }  if (useGUI.isPresent()) {    viewer.displayGUI();  } else {    viewer.printProfileData();  }}  }
class C{  public URLWorker(QuickSetupStepPanel panel,String url){  this.panel=panel;  this.url=url;}  }
class C{  public boolean isEnabled(){  return this.isEnabled;}  }
class C{  protected synchronized void receive(int b) throws IOException {  checkStateForReceive();  writeSide=Thread.currentThread();  if (in == out)   awaitSpace();  if (in < 0) {    in=0;    out=0;  }  buffer[in++]=(byte)(b & 0xFF);  if (in >= buffer.length) {    in=0;  }}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public NodeLocator(String publicId,String systemId,int lineNumber,int columnNumber){  this.m_publicId=publicId;  this.m_systemId=systemId;  this.m_lineNumber=lineNumber;  this.m_columnNumber=columnNumber;}  }
class C{  public SerialBlob(byte[] b) throws SerialException, SQLException {  len=b.length;  buf=new byte[(int)len];  for (int i=0; i < len; i++) {    buf[i]=b[i];  }  origLen=len;}  }
class C{  private static String which(String classname,ClassLoader loader){  String classnameAsResource=classname.replace('.','/') + ".class";  if (loader == null)   loader=ClassLoader.getSystemClassLoader();  URL it=loader.getResource(classnameAsResource);  return it != null ? it.toString() : null;}  }
class C{  public void testUpdateByteBuffer01() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidAlgorithmParameterException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] bb={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(bb,"SHA1");  ByteBuffer byteNull=null;  ByteBuffer byteBuff=ByteBuffer.allocate(0);  byte[] bb1;  byte[] bb2;  for (int i=0; i < macs.length; i++) {    macs[i].init(sks);    bb1=macs[i].doFinal();    try {      macs[i].update(byteNull);      fail("IllegalArgumentException must be thrown because buffer is null");    } catch (    IllegalArgumentException e) {    }    macs[i].update(byteBuff);    bb2=macs[i].doFinal();    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }    macs[i].init(sks);    bb1=macs[i].doFinal();    macs[i].update(null,0,0);    bb2=macs[i].doFinal();    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }  }}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener listener){  support.addPropertyChangeListener(listener);}  }
class C{  private static <T>void legacyMergeSort(T[] a,int fromIndex,int toIndex,Comparator<? super T> c){  T[] aux=copyOfRange(a,fromIndex,toIndex);  if (c == null)   mergeSort(aux,a,fromIndex,toIndex,-fromIndex); else   mergeSort(aux,a,fromIndex,toIndex,-fromIndex,c);}  }
class C{  private final static boolean isOwnerAppContextDisposed(SequencedEvent se){  if (se != null) {    Object target=se.nested.getSource();    if (target instanceof Component) {      return ((Component)target).appContext.isDisposed();    }  }  return false;}  }
class C{  public void put(ByteBuffer byteBuffer,int contentLength){  if (contentLength > (bytes.length - this.contentLength)) {    throw new IllegalArgumentException("contentLength is too large");  }  byteBuffer.get(bytes,this.contentLength,contentLength);  this.contentLength+=contentLength;}  }
class C{  @Override public int scrollVerticallyBy(int dy,RecyclerView.Recycler recycler,RecyclerView.State state){  if (getChildCount() == 0 || dy == 0) {    return 0;  }  return scrollBy(dy,recycler,state);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attreffectivevalue.class,args);}  }
class C{  public static <C extends Collection<E>,E>C collect(Iterable<E> iterable,C outputCollection){  for (  E e : iterable) {    outputCollection.add(e);  }  return outputCollection;}  }
class C{  public int size(){  final Segment<K,V>[] segments=this.segments;  final int segmentCount=segments.length;  long previousSum=0L;  for (int retries=-1; retries < RETRIES_BEFORE_LOCK; retries++) {    long sum=0L;    long size=0L;    for (int i=0; i < segmentCount; i++) {      Segment<K,V> segment=segmentAt(segments,i);      if (segment != null) {        sum+=segment.modCount;        size+=segment.count;      }    }    if (sum == previousSum)     return ((size >>> 31) == 0) ? (int)size : Integer.MAX_VALUE;    previousSum=sum;  }  long size=0L;  for (int i=0; i < segmentCount; i++) {    Segment<K,V> segment=ensureSegment(i);    segment.lock();    size+=segment.count;  }  for (int i=0; i < segmentCount; i++)   segments[i].unlock();  return ((size >>> 31) == 0) ? (int)size : Integer.MAX_VALUE;}  }
class C{  @Deprecated protected ActionListener createKeyboardUpLeftListener(){  return new KeyboardUpLeftHandler();}  }
class C{  @Override public void connect(SocketAddress endpoint) throws IOException {  super.connect(endpoint);  init();}  }
class C{  public List<Interceptor> interceptors(){  return interceptors;}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public SQLRecoverableException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public boolean isHiddenInConfigUI(){  return ss.isHiddenInConfigUI();}  }
class C{  public static void removeStorageFiles(File backendDir){  if (!backendDir.exists()) {    return;  }  if (!backendDir.isDirectory()) {    throw new StorageRuntimeException(ERR_DIRECTORY_INVALID.get(backendDir.getPath()).toString());  }  try {    File[] files=backendDir.listFiles();    for (    File f : files) {      f.delete();    }  } catch (  Exception e) {    throw new StorageRuntimeException(ERR_REMOVE_FAIL.get(e.getMessage()).toString(),e);  }}  }
class C{  public void addContextVersion(String hostName,Host host,String path,String version,Context context,String[] welcomeResources,WebResourceRoot resources,Collection<WrapperMappingInfo> wrappers){  hostName=renameWildcardHost(hostName);  MappedHost mappedHost=exactFind(hosts,hostName);  if (mappedHost == null) {    addHost(hostName,new String[0],host);    mappedHost=exactFind(hosts,hostName);    if (mappedHost == null) {      log.error("No host found: " + hostName);      return;    }  }  if (mappedHost.isAlias()) {    log.error("No host found: " + hostName);    return;  }  int slashCount=slashCount(path);synchronized (mappedHost) {    ContextVersion newContextVersion=new ContextVersion(version,path,slashCount,context,resources,welcomeResources);    if (wrappers != null) {      addWrappers(newContextVersion,wrappers);    }    ContextList contextList=mappedHost.contextList;    MappedContext mappedContext=exactFind(contextList.contexts,path);    if (mappedContext == null) {      mappedContext=new MappedContext(path,newContextVersion);      ContextList newContextList=contextList.addContext(mappedContext,slashCount);      if (newContextList != null) {        updateContextList(mappedHost,newContextList);        contextObjectToContextVersionMap.put(context,newContextVersion);      }    } else {      ContextVersion[] contextVersions=mappedContext.versions;      ContextVersion[] newContextVersions=new ContextVersion[contextVersions.length + 1];      if (insertMap(contextVersions,newContextVersions,newContextVersion)) {        mappedContext.versions=newContextVersions;        contextObjectToContextVersionMap.put(context,newContextVersion);      } else {        int pos=find(contextVersions,version);        if (pos >= 0 && contextVersions[pos].name.equals(version)) {          contextVersions[pos]=newContextVersion;          contextObjectToContextVersionMap.put(context,newContextVersion);        }      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateelement1.class,args);}  }
class C{  public void fillXfaForm(Node node){  fillXfaForm(node,false);}  }
class C{  public MediaPrintableArea(float x,float y,float w,float h,int units){  if ((x < 0.0) || (y < 0.0) || (w <= 0.0)|| (h <= 0.0)|| (units < 1)) {    throw new IllegalArgumentException("0 or negative value argument");  }  this.x=(int)(x * units + 0.5f);  this.y=(int)(y * units + 0.5f);  this.w=(int)(w * units + 0.5f);  this.h=(int)(h * units + 0.5f);}  }
class C{  private static void insertValueUsingIfNotEmpty(final Map<String,List<String>> paramsMap,final String paramVal,final String parameterName){  if (StringUtils.isNotEmpty(paramVal)) {    List<String> list=new ArrayList<>();    list.add(paramVal);    paramsMap.put(parameterName,list);  }}  }
class C{  public CodeStream putShort(final int s){  ensureCapacity(2);  _data[_length++]=(byte)((s >>> 8) & 0xFF);  _data[_length++]=(byte)(s & 0xFF);  return this;}  }
class C{  public void deleteEntry(java.security.Principal principal,Guid guid) throws UMSException {  if (guid == null) {    String msg=i18n.getString(IUMSConstants.BAD_ID);    throw new IllegalArgumentException(msg);  }  String id=guid.getDn();  ResultCode errorCode;  try {    DeleteRequest request=LDAPRequests.newDeleteRequest(id);    int retry=0;    while (retry <= connNumRetry) {      if (debug.messageEnabled()) {        debug.message("DataLayer.deleteEntry retry: " + retry);      }      try (Connection conn=getConnection(principal)){        conn.delete(request);        return;      } catch (      LdapException e) {        if (!retryErrorCodes.contains(e.getResult().getResultCode()) || retry == connNumRetry) {          throw e;        }        retry++;        try {          Thread.sleep(connRetryInterval);        } catch (        InterruptedException ex) {        }      }    }  } catch (  LdapException e) {    debug.error("Exception in DataLayer.deleteEntry for DN: " + id,e);    errorCode=e.getResult().getResultCode();    String[] args={id};    if (ResultCode.NO_SUCH_OBJECT.equals(errorCode)) {      throw new EntryNotFoundException(i18n.getString(IUMSConstants.ENTRY_NOT_FOUND,args),e);    } else     if (ResultCode.INSUFFICIENT_ACCESS_RIGHTS.equals(errorCode)) {      throw new AccessRightsException(i18n.getString(IUMSConstants.INSUFFICIENT_ACCESS_DELETE,args),e);    } else {      throw new UMSException(i18n.getString(IUMSConstants.UNABLE_TO_DELETE_ENTRY,args),e);    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName(),getMask(actions));}  }
class C{  private boolean checkSecond(final byte[] msg){  boolean result=true;  for (int i=1; i < 9; i++) {    if (msg[i] == 0x00) {      result=false;    }  }  return result;}  }
class C{  @Override public void messageReceived(ClusterMessage myobj){  if (myobj instanceof SessionMessage) {    SessionMessage msg=(SessionMessage)myobj;    String ctxname=msg.getContextName();    Map<String,ClusterManager> managers=cluster.getManagers();    if (ctxname == null) {      for (      Map.Entry<String,ClusterManager> entry : managers.entrySet()) {        if (entry.getValue() != null)         entry.getValue().messageDataReceived(msg); else {          if (log.isDebugEnabled())           log.debug(sm.getString("clusterSessionListener.noManager",entry.getKey()));        }      }    } else {      ClusterManager mgr=managers.get(ctxname);      if (mgr != null) {        mgr.messageDataReceived(msg);      } else {        if (log.isWarnEnabled())         log.warn(sm.getString("clusterSessionListener.noManager",ctxname));        if (msg.getEventType() == SessionMessage.EVT_GET_ALL_SESSIONS) {          SessionMessage replymsg=new SessionMessageImpl(ctxname,SessionMessage.EVT_ALL_SESSION_NOCONTEXTMANAGER,null,"NO-CONTEXT-MANAGER","NO-CONTEXT-MANAGER-" + ctxname);          cluster.send(replymsg,msg.getAddress());        }      }    }  }  return;}  }
class C{  public Request createRequest(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST,elem);  if (obj == null) {    return new RequestImpl(elem);  } else {    return (Request)obj;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SmartcardType createSmartcardType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SmartcardTypeImpl();}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {}  }
class C{  public static final IndexCreatedEvent createTestIndexCreationStatusWithBulkDataHit(){  IndexCreatedEvent toReturn=new IndexCreatedEvent(UUID.randomUUID(),new Date(),new Date(),createTestIndexWithBulkDataHit(),1000,0);  toReturn.calculateValues();  return toReturn;}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  this.m_order=order;  this.m_multiAllowed=multiAllowed;}  }
class C{  public void init(String realm) throws PushNotificationException {  if (!pushRealmMap.containsKey(realm)) {synchronized (pushRealmMap) {      if (!pushRealmMap.containsKey(realm)) {        updatePreferences(realm);        if (!pushRealmMap.containsKey(realm)) {          debug.warning("No Push Notification Delegate configured for realm {}",realm);          throw new PushNotificationException("No Push Notification Delegate configured for this realm.");        }      }    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.fragment_news_code_scan);  mContext=this;  CameraManager.init(getApplication());  initControl();  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  public void writingRequestHeaders(){  if (sentRequestMillis != -1) {    throw new IllegalStateException();  }  sentRequestMillis=System.currentTimeMillis();}  }
class C{  public static void filterAttributes(Set attributeSchemas,String a[]){  removeAttributeSchemaWithoutI18nKey(attributeSchemas);  int size=a.length;  for (Iterator iter=attributeSchemas.iterator(); iter.hasNext(); ) {    AttributeSchema as=(AttributeSchema)iter.next();    String any=as.getAny();    boolean found=false;    for (int x=0; x < size && !found; x++) {      found=hasAnyAttribute(any,a[x]);    }    if (!found || (getTagClassName(as) == null)) {      iter.remove();    }  }}  }
class C{  public void updateRule(Tuple tuple,String ruleGroup,String ruleJson,boolean delete) throws Exception {  Map<Short,Rule> ruleMap=this.ruleMap;  if (ruleGroupsActive) {    if (ruleGroup != null) {      ruleMap=ruleGroupMap.get(ruleGroup);      if (ruleMap == null) {        ruleMap=new LinkedHashMap<>(hashSize);        ruleGroupMap.put(ruleGroup,ruleMap);      }    } else {      throw new PerformantException("Supplied rule group is null");    }  }  if (ruleMap == null) {    throw new PerformantException("Rule map not found for rule:" + ruleJson + "\trule-group:"+ ruleGroup);  }  Rule rule=StatelessRulesEngine.updateRuleMap(ruleMap,ruleJson,delete);  sendEmissionsForRule(tuple,ruleGroup,rule);}  }
class C{  static boolean enforceOnlyKnownProviders(){  if (Utils.debug.messageEnabled()) {    Utils.debug.message("SOAPBindingService.enforceOnlyKnownProviders");  }  return enforceOnlyKnownProvider;}  }
class C{  public NonWritableChannelException(){}  }
class C{  public static ComponentUI createUI(JComponent c){  throw new Error("ComponentUI.createUI not implemented.");}  }
class C{  public final void pushExpressionState(int cn,int en,PrefixResolver nc){  m_currentNodes.push(cn);  m_currentExpressionNodes.push(cn);  m_prefixResolvers.push(nc);}  }
class C{  public static void flow(Reader reader,Writer writer,char[] buf) throws IOException {  int numRead;  while ((numRead=reader.read(buf)) >= 0) {    writer.write(buf,0,numRead);  }}  }
class C{  public static ELNode.Nodes parse(String expression,boolean isDeferredSyntaxAllowedAsLiteral){  ELParser parser=new ELParser(expression,isDeferredSyntaxAllowedAsLiteral);  while (parser.hasNextChar()) {    String text=parser.skipUntilEL();    if (text.length() > 0) {      parser.expr.add(new ELNode.Text(text));    }    ELNode.Nodes elexpr=parser.parseEL();    if (!elexpr.isEmpty()) {      parser.expr.add(new ELNode.Root(elexpr,parser.type));    }  }  return parser.expr;}  }
class C{  @Override protected void tearDown() throws Exception {  super.tearDown();}  }
class C{  boolean containsKey(final String key){  return properties.containsKey(key);}  }
class C{  public PdfA2Checker(PdfAConformanceLevel conformanceLevel){  super(conformanceLevel);}  }
class C{  protected Expression matchPattern(int opPos) throws TransformerException {  locPathDepth++;  try {    int nextOpPos=opPos;    int i;    for (i=0; getOp(nextOpPos) == OpCodes.OP_LOCATIONPATHPATTERN; i++) {      nextOpPos=getNextOpPos(nextOpPos);    }    if (i == 1)     return compile(opPos);    UnionPattern up=new UnionPattern();    StepPattern[] patterns=new StepPattern[i];    for (i=0; getOp(opPos) == OpCodes.OP_LOCATIONPATHPATTERN; i++) {      nextOpPos=getNextOpPos(opPos);      patterns[i]=(StepPattern)compile(opPos);      opPos=nextOpPos;    }    up.setPatterns(patterns);    return up;  }  finally {    locPathDepth--;  }}  }
class C{  public static String qualifyPid(String fileNamePid){  String qualifiedPid=fileNamePid;  if (fileNamePid != null && !(fileNamePid.startsWith("org.") || fileNamePid.startsWith("com."))) {    qualifiedPid=ServerConstants.SERVICE_RDN_PREFIX + fileNamePid;  }  return qualifiedPid;}  }
class C{  final boolean addResult(Entry entry){  try {    return resultQueue.offer(entry,10,TimeUnit.SECONDS);  } catch (  InterruptedException ie) {    return false;  }}  }
class C{  public EmbeddedDirectoryServerException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  boolean isTrusted(){  for (  Index index : indexIdToIndexes.values()) {    if (!index.isTrusted()) {      return false;    }  }  return true;}  }
class C{  public void testSetBitLeftmostNegative(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=-1;  int number=48;  byte rBytes[]={-1,127,-57,-101,14,-36,-26,49};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected AbstractLayoutCache createLayoutCache(){  if (isLargeModel() && getRowHeight() > 0) {    return new FixedHeightLayoutCache();  }  return new VariableHeightLayoutCache();}  }
class C{  public Dimension minimumLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getMinimumSize();      if (d.width > w) {        w=d.width;      }      if (d.height > h) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + w+ hgap * 2,insets.top + insets.bottom + h+ vgap * 2);  }}  }
class C{  public RestSTSInstanceConfig createRestSTSInstanceConfig(String urlElement,String realm,STSPublishContext stsPublishContext,CustomTokenOperationContext customTokenOperationContext) throws IOException {  Map<String,String> oidcContext=new HashMap<>();  oidcContext.put(AMSTSConstants.OPEN_ID_CONNECT_ID_TOKEN_AUTH_TARGET_HEADER_KEY,CommonConstants.DEFAULT_OIDC_TOKEN_HEADER_NAME);  Map<String,String> certContext=new HashMap<>();  certContext.put(AMSTSConstants.X509_TOKEN_AUTH_TARGET_HEADER_KEY,CommonConstants.DEFAULT_CERT_MODULE_TOKEN_HEADER_NAME);  AuthTargetMapping mapping=AuthTargetMapping.builder().addMapping(TokenType.USERNAME,"service","ldapService").addMapping(TokenType.OPENIDCONNECT,"module",CommonConstants.DEFAULT_OIDC_BEARER_TOKEN_MODULE_NAME,oidcContext).addMapping(TokenType.X509,"module",CommonConstants.DEFAULT_CERT_MODULE_NAME,certContext).build();  DeploymentConfig.DeploymentConfigBuilderBase<?> deploymentConfigBuilder=DeploymentConfig.builder().uriElement(urlElement).authTargetMapping(mapping).realm(realm);  if (stsPublishContext.getClientCertHeaderName() != null) {    Set<String> offloadHostsSet=new HashSet<>();    offloadHostsSet.add(InetAddress.getLocalHost().getHostAddress());    offloadHostsSet.add("127.0.0.1");    deploymentConfigBuilder.offloadedTwoWayTLSHeaderKey(stsPublishContext.getClientCertHeaderName()).tlsOffloadEngineHostIpAddrs(offloadHostsSet);  }  DeploymentConfig deploymentConfig=deploymentConfigBuilder.build();  Map<String,String> attributeMapping=new HashMap<>();  attributeMapping.put("email","mail");  SAML2Config saml2Config=null;  if (publishSAML2(stsPublishContext)) {    saml2Config=buildSAML2Config(stsPublishContext,attributeMapping);  }  OpenIdConnectTokenConfig oidcIdTokenConfig=null;  if (publishOIDC(stsPublishContext)) {    if (STSPublishContext.OIDCSigningAlgorithmType.RSA.equals(stsPublishContext.getOidcSigningAlgorithmType())) {      oidcIdTokenConfig=buildRSATokenConfig(stsPublishContext,attributeMapping);    } else {      oidcIdTokenConfig=buildHMACTokenConfig(stsPublishContext,attributeMapping);    }  }  RestSTSInstanceConfig.RestSTSInstanceConfigBuilder builder=RestSTSInstanceConfig.builder().deploymentConfig(deploymentConfig).saml2Config(saml2Config).oidcIdTokenConfig(oidcIdTokenConfig).persistIssuedTokensInCTS(stsPublishContext.persistIssuedTokensInCTS()).setCustomProviders(customTokenOperationContext.getCustomProviders()).setCustomValidators(customTokenOperationContext.getCustomValidators()).setCustomTokenTransforms(customTokenOperationContext.getCustomTransforms());  if (publishSAML2(stsPublishContext)) {    builder.addSupportedTokenTransform(TokenType.USERNAME,TokenType.SAML2,AMSTSConstants.INVALIDATE_INTERIM_OPENAM_SESSION).addSupportedTokenTransform(TokenType.OPENAM,TokenType.SAML2,!AMSTSConstants.INVALIDATE_INTERIM_OPENAM_SESSION).addSupportedTokenTransform(TokenType.OPENIDCONNECT,TokenType.SAML2,AMSTSConstants.INVALIDATE_INTERIM_OPENAM_SESSION).addSupportedTokenTransform(TokenType.X509,TokenType.SAML2,AMSTSConstants.INVALIDATE_INTERIM_OPENAM_SESSION);  }  if (publishOIDC(stsPublishContext)) {    builder.addSupportedTokenTransform(TokenType.USERNAME,TokenType.OPENIDCONNECT,AMSTSConstants.INVALIDATE_INTERIM_OPENAM_SESSION).addSupportedTokenTransform(TokenType.OPENAM,TokenType.OPENIDCONNECT,!AMSTSConstants.INVALIDATE_INTERIM_OPENAM_SESSION).addSupportedTokenTransform(TokenType.OPENIDCONNECT,TokenType.OPENIDCONNECT,AMSTSConstants.INVALIDATE_INTERIM_OPENAM_SESSION).addSupportedTokenTransform(TokenType.X509,TokenType.OPENIDCONNECT,AMSTSConstants.INVALIDATE_INTERIM_OPENAM_SESSION);  }  return builder.build();}  }
class C{  @Override public void update(){  if (initBlast) {    playBlastSeq();    return;  }  xVel+=accel;  xPos+=xVel;  spriteFrame.setTranslateX(xPos);  spriteBounds.setTranslateX(xPos);  collided=checkCollision();  if (collided) {    spriteFrame.setTranslateX(xPos + (spriteFrame.getFitWidth() / BLAST_THX * (accel < 0 ? -1 : 1)));    if (main.Main.fireballRelease.isPlaying())     main.Main.fireballRelease.stop();    initBlast=true;  }}  }
class C{  public boolean addEdit(UndoableEdit anEdit){  return false;}  }
class C{  public void releaseMemory(long size){  if (allowOvercommit) {    return;  }  reservedMemory.release((int)(size / ONE_MEGABYTE));}  }
class C{  public Object clone(){  MessageFormat other=(MessageFormat)super.clone();  other.formats=formats.clone();  for (int i=0; i < formats.length; ++i) {    if (formats[i] != null)     other.formats[i]=(Format)formats[i].clone();  }  other.offsets=offsets.clone();  other.argumentNumbers=argumentNumbers.clone();  return other;}  }
class C{  public final void pushNamespaceContext(PrefixResolver pr){  m_prefixResolvers.push(pr);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrprevioussiblingnull.class,args);}  }
class C{  public Condition removeCondition(Condition condition){  String conditionName=getConditionName(condition);  if (conditionName != null) {    return (Condition)removeCondition(conditionName);  }  return null;}  }
class C{  public void print(Object obj){  print(String.valueOf(obj));}  }
class C{  @Deprecated public ItemStack(final int type,final int amount,final short damage){  this.type=type;  this.amount=amount;  this.durability=damage;}  }
class C{  public CannotReadException(String message,Throwable cause){  super(message,cause);}  }
class C{  public PdfCanvas eoClip(){  contentStream.getOutputStream().writeBytes(WStar);  return this;}  }
class C{  public boolean isBottomCollided(){  return isBottomCollided;}  }
class C{  public int alloc(int size){  int index=n;  int len=array.length;  if (n + size >= len) {    byte[] aux=new byte[len + blockSize];    System.arraycopy(array,0,aux,0,len);    array=aux;  }  n+=size;  return index;}  }
class C{  @Override protected Polyline pull_tight(Polyline p_polyline){  Polyline new_result=acid_traps_wrap_around(p_polyline);  Polyline prev_result=null;  while (new_result != prev_result) {    if (is_stop_requested())     break;    prev_result=new_result;    new_result=skip_segments_of_length_0(prev_result);    new_result=reduce_lines(new_result);    new_result=skip_lines(new_result);    new_result=reposition_lines(new_result);    new_result=smoothen_corners(new_result);  }  return new_result;}  }
class C{  public DefaultMutableTreeNode(Object userObject,boolean allowsChildren){  super();  parent=null;  this.allowsChildren=allowsChildren;  this.userObject=userObject;}  }
class C{  private boolean needFirstLengthByteState(final boolean isBlocking,final boolean throwEofException) throws IOException {  if (!isBlocking && in.available() <= 0) {    return false;  }  int readByte=in.read();  if (readByte == -1) {    if (throwEofException) {      final LocalizableMessage message=ERR_ASN1_TRUNCATED_LENGTH_BYTE.get();      throw DecodeException.fatalError(message);    }    return false;  }  peekLength=readByte & 0x7F;  if (peekLength != readByte) {    lengthBytesNeeded=peekLength;    if (lengthBytesNeeded > 4) {      final LocalizableMessage message=ERR_ASN1_INVALID_NUM_LENGTH_BYTES.get(lengthBytesNeeded);      throw DecodeException.fatalError(message);    }    peekLength=0x00;    if (!isBlocking && (in.available() < lengthBytesNeeded)) {      state=ASN1.ELEMENT_READ_STATE_NEED_ADDITIONAL_LENGTH_BYTES;      return false;    }    while (lengthBytesNeeded > 0) {      readByte=in.read();      if (readByte == -1) {        state=ASN1.ELEMENT_READ_STATE_NEED_ADDITIONAL_LENGTH_BYTES;        if (throwEofException) {          final LocalizableMessage message=ERR_ASN1_TRUNCATED_LENGTH_BYTES.get(lengthBytesNeeded);          throw DecodeException.fatalError(message);        }        return false;      }      peekLength=(peekLength << 8) | (readByte & 0xFF);      lengthBytesNeeded--;    }  }  if (maxElementSize > 0 && peekLength > maxElementSize) {    final LocalizableMessage message=ERR_LDAP_CLIENT_DECODE_MAX_REQUEST_SIZE_EXCEEDED.get(peekLength,maxElementSize);    throw DecodeException.fatalError(message);  }  state=ASN1.ELEMENT_READ_STATE_NEED_VALUE_BYTES;  return true;}  }
class C{  public E remove(int index){  E rv=delegate.elementAt(index);  delegate.removeElementAt(index);  fireIntervalRemoved(this,index,index);  return rv;}  }
class C{  public SQLTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  public void checkPermitted(GeneralName name) throws PKIXNameConstraintValidatorException {switch (name.getTagNo()) {case 1:    checkPermittedEmail(permittedSubtreesEmail,extractNameAsString(name));  break;case 2:checkPermittedDNS(permittedSubtreesDNS,DERIA5String.getInstance(name.getName()).getString());break;case 4:checkPermittedDN(ASN1Sequence.getInstance(name.getName().toASN1Primitive()));break;case 6:checkPermittedURI(permittedSubtreesURI,DERIA5String.getInstance(name.getName()).getString());break;case 7:byte[] ip=ASN1OctetString.getInstance(name.getName()).getOctets();checkPermittedIP(permittedSubtreesIP,ip);}}  }
class C{  private static void checkProblemSize(int n,int nr_class){  if (n >= Integer.MAX_VALUE / nr_class || n * nr_class < 0) {    throw new IllegalArgumentException("'number of classes' * 'number of instances' is too large: " + nr_class + "*"+ n);  }}  }
class C{  public StringValueExp(String val){  this.val=val;}  }
class C{  public EncryptionChunk(final BigInteger chunkLen){  super(GUID.GUID_CONTENT_ENCRYPTION,chunkLen);  this.strings=new ArrayList<String>();  this.secretData="";  this.protectionType="";  this.keyID="";  this.licenseURL="";}  }
class C{  public SoftReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);  this.timestamp=clock;}  }
class C{  private void validateException(InitializationException ie,LocalizableMessage message){  if (message == null) {    assertNull(ie.getMessageObject());  } else {    assertEquals(ie.getMessageObject(),message);  }}  }
class C{  protected String dumpRemainingTokenQueue(){  int q=m_queueMark;  String returnMsg;  if (q < m_ops.getTokenQueueSize()) {    String msg="\n Remaining tokens: (";    while (q < m_ops.getTokenQueueSize()) {      String t=(String)m_ops.m_tokenQueue.elementAt(q++);      msg+=(" '" + t + "'");    }    returnMsg=msg + ")";  } else {    returnMsg="";  }  return returnMsg;}  }
class C{  public static Object unmarshal(String data) throws Exception {  if (data.startsWith(TOKEN_PREFIX)) {    return SSOTokenManager.getInstance().createSSOToken(data.substring(TOKEN_PREFIX.length()));  } else   if (data.startsWith(OBJECT_PREFIX)) {    return IOUtils.deserialise(Base64.decode(data.substring(OBJECT_PREFIX.length())),false);  } else {    throw new IllegalArgumentException("Bad context value:" + data);  }}  }
class C{  public DriverLoadException(String msg){  super(msg);}  }
class C{  @Override public void focusLost(FocusEvent e){  spinner.repaint();}  }
class C{  public void write(final char chars[],final int start,final int length) throws java.io.IOException {  if (m_writer != null)   m_writer.write(chars,start,length);  int lengthx3=(length << 1) + length;  if (lengthx3 >= buf_length) {    flushBuffer();    setBufferSize(2 * lengthx3);  }  if (lengthx3 > buf_length - count) {    flushBuffer();  }  final int n=length + start;  for (int i=start; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf[count++]=(byte)(c); else     if (c < 0x800) {      buf[count++]=(byte)(0xc0 + (c >> 6));      buf[count++]=(byte)(0x80 + (c & 0x3f));    } else {      buf[count++]=(byte)(0xe0 + (c >> 12));      buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf[count++]=(byte)(0x80 + (c & 0x3f));    }  }}  }
class C{  public WriteAbortedException(String s,Exception ex){  super(s);  initCause(null);  detail=ex;}  }
class C{  public <E extends Enum<E>>R visitEnum(EnumPropertyDefinition<E> pd,E v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public Observable<Long> delayedCountObservable(String type){  io.vertx.rx.java.ObservableFuture<Long> handler=io.vertx.rx.java.RxHelper.observableFuture();  delayedCount(type,handler.toHandler());  return handler;}  }
class C{  void init(JsonObject config){  period=config.getLong("period",3000L);  variation=config.getInteger("variation",100);  name=config.getString("name");  Objects.requireNonNull(name);  symbol=config.getString("symbol",name);  stocks=config.getInteger("volume",10000);  price=config.getDouble("price",100.0);  value=price;  ask=price + random.nextInt(variation / 2);  bid=price + random.nextInt(variation / 2);  share=stocks / 2;}  }
class C{  public XMPException(String message,int errorCode,Throwable t){  super(message,t);  this.errorCode=errorCode;}  }
class C{  public void parse(InputSource input) throws IOException, SAXException {  setupXMLReader();  xmlReader.parse(input);}  }
class C{  private void flushOutput() throws IOException {  if (decoderOut.position() > 0) {    writer.write(decoderOut.array(),0,decoderOut.position());    decoderOut.rewind();  }}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public WmfImageHelper(ImageData wmf){  if (wmf.getOriginalType() != ImageType.WMF)   throw new IllegalArgumentException("WMF image expected");  this.wmf=(WmfImageData)wmf;  processParameters();}  }
class C{  @Override protected void finalize() throws IOException {  try {    if (guard != null) {      guard.warnIfOpen();    }    close();  }  finally {    try {      super.finalize();    } catch (    Throwable t) {      throw new AssertionError(t);    }  }}  }
class C{  private ResourceResponse convertInstance(ProcessDefinitionEntity processDefinition,List<JsonPointer> fields) throws IOException {  final String deploymentId=processDefinition.getDeploymentId();  final JsonValue content=new JsonValue(mapper.convertValue(processDefinition,Map.class));  if (processDefinition.hasStartFormKey()) {    FormService formService=processEngine.getFormService();    StartFormData startFormData=formService.getStartFormData(processDefinition.getId());    content.put(ActivitiConstants.ACTIVITI_FORMRESOURCEKEY,startFormData.getFormKey());    try (final InputStream startForm=processEngine.getRepositoryService().getResourceAsStream(deploymentId,startFormData.getFormKey());final Reader reader=new InputStreamReader(startForm)){      Scanner s=new Scanner(reader).useDelimiter("\\A");      String formTemplate=s.hasNext() ? s.next() : "";      content.put(ActivitiConstants.ACTIVITI_FORMGENERATIONTEMPLATE,formTemplate);    }   }  if (fields.contains(ActivitiConstants.ACTIVITI_DIAGRAM) && processDefinition.getDiagramResourceName() != null) {    try (final InputStream is=processEngine.getRepositoryService().getResourceAsStream(deploymentId,processDefinition.getDiagramResourceName())){      final byte[] data=new byte[is.available()];      is.read(data);      content.put(ActivitiConstants.ACTIVITI_DIAGRAM,Base64.encode(data));    }   }  DefaultStartFormHandler startFormHandler=(DefaultStartFormHandler)processDefinition.getStartFormHandler();  content.put(ActivitiConstants.FORMPROPERTIES,getFormHandlerData(startFormHandler.getFormPropertyHandlers()));  return newResourceResponse(processDefinition.getId(),null,content);}  }
class C{  @Override public void run(){  return;}  }
class C{  @DataProvider(name="testDNs") public Object[][] createData(){  return new Object[][]{{"",""},{"   ",""},{"cn=","cn="},{"cn= ","cn="},{"cn =","cn="},{"cn = ","cn="},{"dc=com","dc=com"},{"dc=com+o=com","dc=com\u0001o=com"},{"DC=COM","dc=com"},{"dc = com","dc=com"},{" dc = com ","dc=com"},{"dc=example,dc=com","dc=com\u0000dc=example"},{"dc=example, dc=com","dc=com\u0000dc=example"},{"dc=example ,dc=com","dc=com\u0000dc=example"},{"dc =example , dc  =   com","dc=com\u0000dc=example"},{"givenName=John+cn=Doe,ou=People,dc=example,dc=com","dc=com\u0000dc=example\u0000ou=people\u0000cn=doe\u0001givenname=john"},{"givenName=John\\+cn=Doe,ou=People,dc=example,dc=com","dc=com\u0000dc=example\u0000ou=people\u0000givenname=john\u002Bcn\u003Ddoe"},{"cn=Doe\\, John,ou=People,dc=example,dc=com","dc=com\u0000dc=example\u0000ou=people\u0000cn=doe, john"},{"UID=jsmith,DC=example,DC=net","dc=net\u0000dc=example\u0000uid=jsmith"},{"OU=Sales+CN=J. Smith,DC=example,DC=net","dc=net\u0000dc=example\u0000cn=j. smith\u0001ou=sales"},{"CN=John Smith\\2C III,DC=example,DC=net","dc=net\u0000dc=example\u0000cn=john smith\u002C iii"},{"CN=\\23John Smith\\20,DC=example,DC=net","dc=net\u0000dc=example\u0000cn=\u0023john smith"},{"CN=Before\\0dAfter,DC=example,DC=net","dc=net\u0000dc=example\u0000cn=before after"},{"2.5.4.3=#04024869","cn=hi"},{"1.1.1=","1.1.1="},{"CN=Lu\\C4\\8Di\\C4\\87","cn=luc\u030cic\u0301"},{"ou=\\e5\\96\\b6\\e6\\a5\\ad\\e9\\83\\a8,o=Airius","o=airius\u0000ou=\u55b6\u696d\u90e8"},{"cn=\\ john \\ ,dc=com","dc=com\u0000cn=john"},{"caseexact=UPPER,dc=COM","dc=com\u0000caseexact=UPPER"},{"caseexact=mIxEd,dc=COM","dc=com\u0000caseexact=mIxEd"},{"AB-global=","ab-global="},{"OU= Sales + CN = J. Smith ,DC=example,DC=net","dc=net\u0000dc=example\u0000cn=j. smith\u0001ou=sales"},{"cn=John+a=","a=\u0001cn=john"},{"O=\"Sue, Grabbit and Runn\",C=US","c=us\u0000o=sue\u002C grabbit and runn"}};}  }
class C{  private ConditionResult containsReferrals(ReadableTransaction txn){  try (Cursor<?,?> cursor=txn.openCursor(getName())){    return ConditionResult.valueOf(cursor.next());  } catch (  Exception e) {    logger.traceException(e);    return ConditionResult.UNDEFINED;  }}  }
class C{  public SQLTimeoutException(){}  }
class C{  String[] processName(String qName,boolean isAttribute){  String name[];  Hashtable table;  if (isAttribute) {    if (elementNameTable == null)     elementNameTable=new Hashtable();    table=elementNameTable;  } else {    if (attributeNameTable == null)     attributeNameTable=new Hashtable();    table=attributeNameTable;  }  name=(String[])table.get(qName);  if (name != null) {    return name;  }  name=new String[3];  int index=qName.indexOf(':');  if (index == -1) {    if (isAttribute || defaultNS == null) {      name[0]="";    } else {      name[0]=defaultNS;    }    name[1]=qName.intern();    name[2]=name[1];  } else {    String prefix=qName.substring(0,index);    String local=qName.substring(index + 1);    String uri;    if ("".equals(prefix)) {      uri=defaultNS;    } else {      uri=(String)prefixTable.get(prefix);    }    if (uri == null) {      return null;    }    name[0]=uri;    name[1]=local.intern();    name[2]=qName.intern();  }  table.put(name[2],name);  tablesDirty=true;  return name;}  }
class C{  private String stringUID(int i){  return String.format("11111111-1111-1111-1111-%012x",i);}  }
class C{  public static Object convertStringToJAXB(String str) throws JAXBException {  Unmarshaller u=jaxbContext.createUnmarshaller();  return u.unmarshal(XMLUtils.createSAXSource(new InputSource(new StringReader(str))));}  }
class C{  @Override public Name parse(String name) throws NamingException {  return new CompositeName(name);}  }
class C{  public boolean isAbsolute(LocPathIterator path){  int analysis=path.getAnalysisBits();  boolean isAbs=(WalkerFactory.isSet(analysis,WalkerFactory.BIT_ROOT) || WalkerFactory.isSet(analysis,WalkerFactory.BIT_ANY_DESCENDANT_FROM_ROOT));  if (isAbs) {    isAbs=m_absPathChecker.checkAbsolute(path);  }  return isAbs;}  }
class C{  public synchronized static String formatTime(final Time object,String pattern){  if (pattern == null || pattern.equals("")) {    pattern=JKFormatUtil.DEFAULT_TIME_PATTERN;  }  return JKFormatUtil.getDateFormatter(pattern).format(object);}  }
class C{  public static boolean isDescendant(File descendant,File path){  boolean isDescendant=false;  if (descendant != null && path != null) {    File parent=descendant.getParentFile();    while (parent != null && !isDescendant) {      isDescendant=path.equals(parent);      if (!isDescendant) {        parent=parent.getParentFile();      }    }  }  return isDescendant;}  }
class C{  private static LDAPFilter createExtensibleFilter(MatchingRuleAssertion mra) throws IOException {  return LDAPFilter.createExtensibleFilter(mra.getMatchingRule(),mra.getName(),ByteStringUtility.convertValue(mra.getValue()),mra.isDnAttributes());}  }
class C{  void assignService(String serviceName) throws SMSException {  try {    if (ServiceManager.isCoexistenceMode() && (parentOrgName.startsWith(SMSEntry.SUN_INTERNAL_REALM_PREFIX))) {      return;    }    if (!getAssignedServices().contains(serviceName)) {      parentOrg.registerService(serviceName,false,false);    }  } catch (  AMException ame) {    if (debug.messageEnabled()) {      debug.message("OrgConfigViaAMSDK::assignService" + ": failed with AMException",ame);    }    throw (new SMSException(AMSDKBundle.BUNDLE_NAME,ame.getMessage(),ame,ame.getMessage()));  }catch (  SSOException ssoe) {    throw (new SMSException(bundle.getString("sms-INVALID_SSO_TOKEN"),ssoe,"sms-INVALID_SSO_TOKEN"));  }}  }
class C{  public static boolean processOperationResult(Operation op,OperationResult opResult){  if (!opResult.continueProcessing()) {    op.setResultCode(opResult.getResultCode());    op.appendErrorMessage(opResult.getErrorMessage());    op.setMatchedDN(opResult.getMatchedDN());    op.setReferralURLs(opResult.getReferralURLs());    return false;  }  return true;}  }
class C{  public static boolean isHttpStatusCode(Throwable throwable,int statusCode){  return throwable instanceof HttpException && ((HttpException)throwable).code() == statusCode;}  }
class C{  public boolean equals(Object o){  boolean same=false;  if (o instanceof SMSFlatFileTreeNode) {    same=((SMSFlatFileTreeNode)o).id.equals(id);  }  return same;}  }
class C{  @Override public Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_Last(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public SimpleStaticGroupMemberList(ServerContext serverContext,DN groupDN,Set<CompactDn> memberDNs){  ifNull(groupDN,memberDNs);  this.serverContext=serverContext;  this.groupDN=groupDN;  this.memberDNIterator=memberDNs.iterator();}  }
class C{  public void postMail(String recipients[],String subject,String message,String from,String mimeType,String charset) throws MessagingException {  boolean debug=false;  Session session=Session.getDefaultInstance(props,null);  session.setDebug(debug);  MimeMessage msg=new MimeMessage(session);  InternetAddress addressFrom=new InternetAddress(from);  msg.setFrom(addressFrom);  InternetAddress[] addressTo=new InternetAddress[recipients.length];  for (int i=0; i < recipients.length; i++) {    addressTo[i]=new InternetAddress(recipients[i]);  }  msg.setRecipients(Message.RecipientType.TO,addressTo);  if (charset == null) {    msg.setSubject(subject);    msg.setContent(message,mimeType);  } else {    charset=BrowserEncoding.mapHttp2JavaCharset(charset);    msg.setSubject(subject,charset);    msg.setContent(message,mimeType + "; charset=" + charset);  }  Transport.send(msg);}  }
class C{  public String encode(){  return SESSION_NAME_FIELD + sessionName + Separators.NEWLINE;}  }
class C{  @Override protected void doReadObject(ObjectInputStream stream) throws ClassNotFoundException, IOException {  doReadObject((ObjectInput)stream);}  }
class C{  @Override public void attributeReplaced(HttpSessionBindingEvent event){  log("attributeReplaced('" + event.getSession().getId() + "', '"+ event.getName()+ "', '"+ event.getValue()+ "')");}  }
class C{  public void put(String key,Object value){  this.data.put(key,value);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS05.class,args);}  }
class C{  Hyphen(String pre,String no,String post){  preBreak=pre;  noBreak=no;  postBreak=post;}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.UsageDirectiveType createUsageDirectiveType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.UsageDirectiveTypeImpl();}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.addFoo(foo);}  }
class C{  protected Logger(String name,String resourceBundleName){  this(name,resourceBundleName,null,LogManager.getLogManager(),false);}  }
class C{  public String findNamespaceURI(String prefix){  ArrayStack<String> stack=namespaces.get(prefix);  if (stack == null) {    return (null);  }  try {    return stack.peek();  } catch (  EmptyStackException e) {    return (null);  }}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthOptionPaneUI();}  }
class C{  public void valueChanged(ListSelectionEvent e){  fireColumnSelectionChanged(e);}  }
class C{  public Remote toStub() throws IOException {  final Remote stub=IIOPHelper.toStub(this);  return stub;}  }
class C{  private void readObject(ObjectInputStream p_stream) throws IOException, ClassNotFoundException {  p_stream.defaultReadObject();  int snap_angle_no=p_stream.readInt();  trace_angle_restriction=TraceAngleRestriction.get_instance(snap_angle_no);}  }
class C{  public WriterToUTF8Buffered(OutputStream out){  m_os=out;  m_outputBytes=new byte[BYTES_MAX + 3];  m_inputChars=new char[CHARS_MAX + 2];  count=0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattributens02.class,args);}  }
class C{  @DataProvider(name="approximatematchingrules") public Object[][] createapproximateMatchingRuleTest(){  return new Object[][]{{metaphone,"celebre","selebre",ConditionResult.TRUE},{metaphone,"cygale","sigale",ConditionResult.TRUE},{metaphone,"cigale","sigale",ConditionResult.TRUE},{metaphone,"accacia","akacia",ConditionResult.TRUE},{metaphone,"cigale","sigale",ConditionResult.TRUE},{metaphone,"bertucci","bertuchi",ConditionResult.TRUE},{metaphone,"manger","manjer",ConditionResult.TRUE},{metaphone,"gyei","kei",ConditionResult.TRUE},{metaphone,"agnostique","aknostic",ConditionResult.TRUE},{metaphone,"ghang","kang",ConditionResult.TRUE},{metaphone,"affiche","afiche",ConditionResult.TRUE},{metaphone,"succeed","sukid",ConditionResult.TRUE},{metaphone,"McCarthur","macarthur",ConditionResult.TRUE},{metaphone,"czet","set",ConditionResult.TRUE},{metaphone,"re\u00C7u","ressu",ConditionResult.TRUE},{metaphone,"ni\u00D1o","nino",ConditionResult.TRUE},{metaphone,"bateaux","bateau",ConditionResult.TRUE},{metaphone,"witz","wits",ConditionResult.TRUE},{metaphone,"barre","bare",ConditionResult.TRUE},{metaphone,"write","rite",ConditionResult.TRUE},{metaphone,"the","ze",ConditionResult.FALSE},{metaphone,"motion","mochion",ConditionResult.TRUE},{metaphone,"bois","boi",ConditionResult.TRUE},{metaphone,"schi","chi",ConditionResult.TRUE},{metaphone,"escalier","eskalier",ConditionResult.TRUE},{metaphone,"science","sience",ConditionResult.TRUE},{metaphone,"school","skool",ConditionResult.TRUE},{metaphone,"swap","sap",ConditionResult.TRUE},{metaphone,"szize","size",ConditionResult.TRUE},{metaphone,"shoek","choek",ConditionResult.FALSE},{metaphone,"sugar","chugar",ConditionResult.TRUE},{metaphone,"isle","ile",ConditionResult.TRUE},{metaphone,"yle","ysle",ConditionResult.TRUE},{metaphone,"focaccia","focashia",ConditionResult.TRUE},{metaphone,"machine","mashine",ConditionResult.TRUE},{metaphone,"michael","mikael",ConditionResult.TRUE},{metaphone,"abba","aba",ConditionResult.TRUE},{metaphone,"caesar","saesar",ConditionResult.TRUE},{metaphone,"femme","fame",ConditionResult.TRUE},{metaphone,"panne","pane",ConditionResult.TRUE},{metaphone,"josa","josa",ConditionResult.TRUE},{metaphone,"jose","hose",ConditionResult.TRUE},{metaphone,"hello","hello",ConditionResult.TRUE},{metaphone,"hello","ello",ConditionResult.FALSE},{metaphone,"bag","bak",ConditionResult.TRUE},{metaphone,"bagg","bag",ConditionResult.TRUE},{metaphone,"tagliaro","takliaro",ConditionResult.TRUE},{metaphone,"biaggi","biaji",ConditionResult.TRUE},{metaphone,"bioggi","bioji",ConditionResult.TRUE},{metaphone,"rough","rouf",ConditionResult.TRUE},{metaphone,"ghislane","jislane",ConditionResult.TRUE},{metaphone,"ghaslane","kaslane",ConditionResult.TRUE},{metaphone,"odd","ot",ConditionResult.TRUE},{metaphone,"edgar","etkar",ConditionResult.TRUE},{metaphone,"edge","eje",ConditionResult.TRUE},{metaphone,"accord","akord",ConditionResult.TRUE},{metaphone,"noize","noise",ConditionResult.TRUE},{metaphone,"orchid","orkid",ConditionResult.TRUE},{metaphone,"chemistry","kemistry",ConditionResult.TRUE},{metaphone,"chianti","kianti",ConditionResult.TRUE},{metaphone,"bacher","baker",ConditionResult.TRUE},{metaphone,"achtung","aktung",ConditionResult.TRUE},{metaphone,"Writing","riting",ConditionResult.TRUE},{metaphone,"xeon","zeon",ConditionResult.TRUE},{metaphone,"lonely","loneli",ConditionResult.TRUE},{metaphone,"bellaton","belatton",ConditionResult.TRUE},{metaphone,"pate","patte",ConditionResult.TRUE},{metaphone,"voiture","vouatur",ConditionResult.TRUE},{metaphone,"garbage","garbedge",ConditionResult.TRUE},{metaphone,"algorithme","algorizm",ConditionResult.TRUE},{metaphone,"testing","testng",ConditionResult.TRUE},{metaphone,"announce","annonce",ConditionResult.TRUE},{metaphone,"automaticly","automatically",ConditionResult.TRUE},{metaphone,"modifyd","modified",ConditionResult.TRUE},{metaphone,"bouteille","butaille",ConditionResult.TRUE},{metaphone,"xeon","zeon",ConditionResult.TRUE},{metaphone,"achtung","aktung",ConditionResult.TRUE},{metaphone,"throttle","throddle",ConditionResult.TRUE},{metaphone,"thimble","thimblle",ConditionResult.TRUE},{metaphone,"","",ConditionResult.TRUE}};}  }
class C{  public boolean isSessionEncrypted(){  final Session session=connectedRS.get().session;  return session != null ? session.isEncrypted() : false;}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSNameRegistrationRequest.toBASE64EncodedString: " + "providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSNameRegistrationRequest.toBASE64EncodedString: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  private void countLines(String message){  char[] chars=message.toCharArray();  for (int i=0; i < chars.length; i++) {    if (chars[i] == '\n')     lineCount++;  }}  }
class C{  @Override public void clear(){  Arrays.fill(elements,null);  size=0;}  }
class C{  public boolean deleteAllNamedPolicyTemplates(String policyDN) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  static void signAssertion(String realm,String idpEntityID,Assertion assertion) throws SAML2Exception {  String classMethod="IDPSSOUtil.signAssertion: ";  KeyProvider kp=KeyUtil.getKeyProviderInstance();  if (kp == null) {    SAML2Utils.debug.error(classMethod + "Unable to get a key provider instance.");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullKeyProvider"));  }  String idpSignCertAlias=SAML2Utils.getSigningCertAlias(realm,idpEntityID,SAML2Constants.IDP_ROLE);  if (idpSignCertAlias == null) {    SAML2Utils.debug.error(classMethod + "Unable to get the hosted IDP signing certificate alias.");    throw new SAML2Exception(SAML2Utils.bundle.getString("missingSigningCertAlias"));  }  String encryptedKeyPass=SAML2Utils.getSigningCertEncryptedKeyPass(realm,idpEntityID,SAML2Constants.IDP_ROLE);  PrivateKey key;  if (encryptedKeyPass == null || encryptedKeyPass.isEmpty()) {    key=kp.getPrivateKey(idpSignCertAlias);  } else {    key=kp.getPrivateKey(idpSignCertAlias,encryptedKeyPass);  }  assertion.sign(key,kp.getX509Certificate(idpSignCertAlias));}  }
class C{  public static String dumpAsString(Object obj){  return dumpAsString(obj,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildgetnodename.class,args);}  }
class C{  public Future<E> pollAsync(){  Future<E> result=null;  final ReentrantLock lock=this.lock;  lock.lock();  try {    E item=items.poll();    if (item == null) {      ExchangeCountDownLatch<E> c=new ExchangeCountDownLatch<>(1);      waiters.addLast(c);      result=new ItemFuture<>(c);    } else {      result=new ItemFuture<>(item);    }  }  finally {    lock.unlock();  }  return result;}  }
class C{  Object processEXPR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    XPath expr=handler.createXPath(value,owner);    return expr;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  private boolean cleanSomeSlots(int i,int n){  boolean removed=false;  Entry[] tab=table;  int len=tab.length;  do {    i=nextIndex(i,len);    Entry e=tab[i];    if (e != null && e.get() == null) {      n=len;      removed=true;      i=expungeStaleEntry(i);    }  } while ((n>>>=1) != 0);  return removed;}  }
class C{  public static int longs(int nbFields){  return 8 * nbFields;}  }
class C{  public static int compareVersions(String v1,String v2){  String[] components1=split(v1);  String[] components2=split(v2);  int diff;  int length=Math.min(components1.length,components2.length);  for (int i=0; i < length; i++) {    String s1=components1[i];    String s2=components2[i];    Integer i1=tryParseInteger(s1);    Integer i2=tryParseInteger(s2);    if (i1 != null && i2 != null) {      diff=i1.compareTo(i2);    } else {      diff=s1.compareTo(s2);    }    if (diff != 0) {      return diff;    }  }  diff=Integer.compare(components1.length,components2.length);  if (diff == 0) {    diff=Objects.compare(v1,v2);  }  return diff;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AssertionConsumerServiceElement createAssertionConsumerServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AssertionConsumerServiceElementImpl();}  }
class C{  Mark skipELExpression(){  Mark last=mark();  boolean singleQuoted=false;  boolean doubleQuoted=false;  int nesting=0;  int currentChar;  do {    currentChar=nextChar(last);    while (currentChar == '\\' && (singleQuoted || doubleQuoted)) {      nextChar();      currentChar=nextChar();    }    if (currentChar == -1) {      return null;    }    if (currentChar == '"' && !singleQuoted) {      doubleQuoted=!doubleQuoted;    } else     if (currentChar == '\'' && !doubleQuoted) {      singleQuoted=!singleQuoted;    } else     if (currentChar == '{' && !doubleQuoted && !singleQuoted) {      nesting++;    } else     if (currentChar == '}' && !doubleQuoted && !singleQuoted) {      nesting--;    }  } while (currentChar != '}' || singleQuoted || doubleQuoted || nesting > -1);  return last;}  }
class C{  protected final JsonToken _handleFieldName() throws IOException {  if (_inputPtr >= _inputEnd) {    _loadMoreGuaranteed();  }  int ch=_inputBuffer[_inputPtr++];switch ((ch >> 6) & 3) {case 0:switch (ch) {case 0x20:      _parsingContext.setCurrentName("");    return JsonToken.FIELD_NAME;case 0x30:case 0x31:case 0x32:case 0x33:{    if (_inputPtr >= _inputEnd) {      _loadMoreGuaranteed();    }    int index=((ch & 0x3) << 8) + (_inputBuffer[_inputPtr++] & 0xFF);    if (index >= _seenNameCount) {      _reportInvalidSharedName(index);    }    _parsingContext.setCurrentName(_seenNames[index]);  }return JsonToken.FIELD_NAME;case 0x34:_handleLongFieldName();return JsonToken.FIELD_NAME;}break;case 1:{int index=(ch & 0x3F);if (index >= _seenNameCount) {_reportInvalidSharedName(index);}_parsingContext.setCurrentName(_seenNames[index]);}return JsonToken.FIELD_NAME;case 2:{int len=1 + (ch & 0x3f);String name=_findDecodedFromSymbols(len);if (name != null) {_inputPtr+=len;} else {name=_decodeShortAsciiName(len);name=_addDecodedToSymbols(len,name);}if (_seenNames != null) {if (_seenNameCount >= _seenNames.length) {_seenNames=_expandSeenNames(_seenNames);}_seenNames[_seenNameCount++]=name;}_parsingContext.setCurrentName(name);}return JsonToken.FIELD_NAME;case 3:ch&=0x3F;{if (ch > 0x37) {if (ch == 0x3B) {if (!_parsingContext.inObject()) {_reportMismatchedEndMarker('}',']');}_parsingContext=_parsingContext.getParent();return JsonToken.END_OBJECT;}} else {final int len=ch + 2;String name=_findDecodedFromSymbols(len);if (name != null) {_inputPtr+=len;} else {name=_decodeShortUnicodeName(len);name=_addDecodedToSymbols(len,name);}if (_seenNames != null) {if (_seenNameCount >= _seenNames.length) {_seenNames=_expandSeenNames(_seenNames);}_seenNames[_seenNameCount++]=name;}_parsingContext.setCurrentName(name);return JsonToken.FIELD_NAME;}}break;}_reportError("Invalid type marker byte 0x" + Integer.toHexString(_inputBuffer[_inputPtr - 1]) + " for expected field name (or END_OBJECT marker)");return null;}  }
class C{  public boolean removeConfigurationFiles(){  return removeConfigurationFilesArg.isPresent();}  }
class C{  public XObject eval(Node contextNode,String str,PrefixResolver prefixResolver) throws TransformerException {  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  XPathContext xpathSupport=new XPathContext(false);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  public Hashtable parseLogsFromDebugFile(String logFileName){  try {    File file=new File(logFileName);    long length=file.length();    char[] cbuf=new char[(int)length];    FileReader fr=new FileReader(file);    fr.read(cbuf);    fr.close();    StringBuffer sb=new StringBuffer();    sb.append("<?xml version='1.0' encoding='us-ascii'?>\n").append("<messages>\n").append(new String(cbuf)).append("]]></debug></messages>\n");    InputSource inputSource=new InputSource(new ByteArrayInputStream(sb.toString().getBytes()));    return this.parseLogs(inputSource);  } catch (  IOException ex) {    ex.printStackTrace();    return null;  }}  }
class C{  public void enableCookieTimeToLive(){  int cookieTimeToLive=0;  String cookieTimeToLiveString=SystemProperties.get(com.sun.identity.shared.Constants.AM_COOKIE_TIME_TO_LIVE);  if ((cookieTimeToLiveString != null) && (cookieTimeToLiveString.length() != 0)) {    try {      cookieTimeToLive=Integer.parseInt(cookieTimeToLiveString) * 60;      if (loginDebug.messageEnabled()) {        loginDebug.message("LoginViewBean.enableCookieTimeToLive():" + "cookieTimeToLive=" + cookieTimeToLive);      }    } catch (    NumberFormatException nfe) {      if (loginDebug.warningEnabled()) {        loginDebug.warning("LoginViewBean.enableCookieTimeToLive():" + "not a valid number, leaving cookieTimeToLive as 0");      }    }  }  if (cookieTimeToLive > 0) {    boolean cookieTimeToLiveEnabledFlag=true;    if (loginDebug.messageEnabled()) {      loginDebug.message("LoginViewBean.enableCookieTimeToLive():" + "cookieTimeToLive " + cookieTimeToLive + "s, enabled");    }    ac.getLoginState().setCookieTimeToLive(cookieTimeToLive);    ac.getLoginState().enableCookieTimeToLive(true);  } else {    if (loginDebug.messageEnabled()) {      loginDebug.message("LoginViewBean.enableCookieTimeToLive():" + "cookieTimeToLive not enabled");    }  }}  }
class C{  private static Document parseInputSource(InputSource source) throws XMPException {  try {    DocumentBuilder builder=factory.newDocumentBuilder();    builder.setErrorHandler(null);    return builder.parse(source);  } catch (  SAXException e) {    throw new XMPException("XML parsing failure",XMPError.BADXML,e);  }catch (  ParserConfigurationException e) {    throw new XMPException("XML Parser not correctly configured",XMPError.UNKNOWN,e);  }catch (  IOException e) {    throw new XMPException("Error reading the XML-file",XMPError.BADSTREAM,e);  }}  }
class C{  public JSplitPane(int newOrientation,boolean newContinuousLayout,Component newLeftComponent,Component newRightComponent){  super();  dividerLocation=-1;  setLayout(null);  setUIProperty("opaque",Boolean.TRUE);  orientation=newOrientation;  if (orientation != HORIZONTAL_SPLIT && orientation != VERTICAL_SPLIT)   throw new IllegalArgumentException("cannot create JSplitPane, " + "orientation must be one of " + "JSplitPane.HORIZONTAL_SPLIT "+ "or JSplitPane.VERTICAL_SPLIT");  continuousLayout=newContinuousLayout;  if (newLeftComponent != null)   setLeftComponent(newLeftComponent);  if (newRightComponent != null)   setRightComponent(newRightComponent);  updateUI();}  }
class C{  public Crops(final Material type){  this(type,DEFAULT_STATE);}  }
class C{  @Override public void write(byte b[],int off,int len) throws IOException {  if (debug > 1) {    System.out.println("write, bufferCount = " + bufferCount + " len = "+ len+ " off = "+ off);  }  if (debug > 2) {    System.out.print("write(");    System.out.write(b,off,len);    System.out.println(")");  }  if (closed)   throw new IOException("Cannot write to a closed output stream");  if (len == 0)   return;  if (len <= (buffer.length - bufferCount)) {    System.arraycopy(b,off,buffer,bufferCount,len);    bufferCount+=len;    return;  }  flushToGZip();  if (len <= (buffer.length - bufferCount)) {    System.arraycopy(b,off,buffer,bufferCount,len);    bufferCount+=len;    return;  }  writeToGZip(b,off,len);}  }
class C{  protected void writeImage(Element elem) throws IOException {}  }
class C{  public void put(E e) throws InterruptedException {  if (e == null)   throw new NullPointerException();  int c=-1;  Node<E> node=new Node<E>(e);  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      notFull.await();    }    enqueue(node);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();}  }
class C{  public boolean isValidMonthDay(MonthDay monthDay){  return monthDay != null && monthDay.isValidYear(year);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkEndToEndEncryptionElement createMobileNetworkEndToEndEncryptionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkEndToEndEncryptionElementImpl();}  }
class C{  public void testSetScaleRoundDown(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_DOWN);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  StringBuffer sb=new StringBuffer(1000);  String nsPrefix="";  String nsDeclaration="";  if (declareNS) {    nsDeclaration=XACMLConstants.SAMLP_NS_DECLARATION;  }  if (includeNSPrefix) {    nsPrefix=XACMLConstants.SAMLP_NS_PREFIX;  }  sb.append("\n<").append(XACMLConstants.SAMLP_NS_PREFIX).append(XACMLConstants.REQUEST_ABSTRACT).append(XACMLConstants.SAMLP_NS_DECLARATION).append(XACMLConstants.XSI_TYPE_XACML_AUTHZ_DECISION_QUERY).append(XACMLConstants.XSI_NS_DECLARATION).append(XACMLConstants.XACML_SAMLP_NS_DECLARATION).append(XACMLConstants.SPACE).append(XACMLConstants.XACML_SAMLP_NS_PREFIX).append(XACMLConstants.INPUT_CONTEXT_ONLY).append("=").append(XACMLSDKUtils.quote(Boolean.toString(inputContextOnly))).append(XACMLConstants.SPACE).append(XACMLConstants.XACML_SAMLP_NS_PREFIX).append(XACMLConstants.RETURN_CONTEXT).append("=").append(XACMLSDKUtils.quote(Boolean.toString(returnContext))).append(XACMLConstants.SPACE).append("ID").append("=").append(XACMLSDKUtils.quote(requestId)).append(XACMLConstants.SPACE).append("Version").append("=").append(XACMLSDKUtils.quote(version)).append(XACMLConstants.SPACE).append("IssueInstant").append("=").append(XACMLSDKUtils.quote(DateUtils.toUTCDateFormat(issueInstant)));  if (destinationURI != null && destinationURI.trim().length() != 0) {    sb.append(" Destination=\"").append(destinationURI).append("\"");  }  if (consent != null && consent.trim().length() != 0) {    sb.append(" Consent=\"").append(consent).append("\"");  }  sb.append(">\n");  try {    if (nameID != null) {      sb.append(nameID.toXMLString(includeNSPrefix,declareNS));    }    if (signatureString != null) {      sb.append(signatureString);    }    if (extensions != null) {      sb.append(extensions.toXMLString(includeNSPrefix,declareNS));    }  } catch (  Exception e) {  }  if (request != null) {    sb.append(request.toXMLString(true,true)).append("\n");  }  sb.append("\n</").append(XACMLConstants.SAMLP_NS_PREFIX).append(XACMLConstants.REQUEST_ABSTRACT).append(">\n");  return sb.toString();}  }
class C{  public V remove(Object key){  return doRemove(key,null);}  }
class C{  public JPanel(LayoutManager layout,boolean isDoubleBuffered){  setLayout(layout);  setDoubleBuffered(isDoubleBuffered);  setUIProperty("opaque",Boolean.TRUE);  updateUI();}  }
class C{  public byte[] transform(ClassLoader loader,String name,Class<?> clazz,ProtectionDomain domain,byte[] bytes) throws IllegalClassFormatException {  ClassNode cn=ASMUtils.getNode(bytes);  boolean modified=false;  for (  AbstractMatcher<String> matcher : matchers) {    if (matcher.isMatch(name)) {      modified=true;      matcher.update(loader,bytes,clazz,domain);      matcher.modify(cn);    }  }  if (modified) {    bytes=ASMUtils.getNodeBytes(cn,true);  }  return bytes;}  }
class C{  protected JsonValue createTemplate(){  if (serviceHasDefaultOrGlobalSchema()) {    return converter.toJson(schema.getAttributeDefaults(),false);  }  return json(object());}  }
class C{  public int readRssi(){  if (null != mService) {    return mService.getRssi();  }  return 0;}  }
class C{  @Override public void javacError(String errorReport,Exception exception) throws JasperException {  throw new JasperException(Localizer.getMessage("jsp.error.unable.compile"),exception);}  }
class C{  public SSOTokenListenersUnsupportedException(final String msg){  super(msg);}  }
class C{  public String encode(){  if (urlString != null) {    return URI_FIELD + urlString + Separators.NEWLINE;  } else   if (url != null) {    return URI_FIELD + url.toString() + Separators.NEWLINE;  } else   return "";}  }
class C{  public int length(){  return m_length;}  }
class C{  public Enumeration depthFirstEnumeration(){  return postorderEnumeration();}  }
class C{  public void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  static void importPrefs(InputStream in) throws IOException, InvalidPreferencesFormatException {  try {    Document doc=builder.parse(new InputSource(in));    Element preferences;    preferences=doc.getDocumentElement();    String version=preferences.getAttribute("EXTERNAL_XML_VERSION");    if (version != null && Float.parseFloat(version) > XML_VERSION) {      throw new InvalidPreferencesFormatException("Preferences version " + version + " is not supported");    }    Element root=(Element)preferences.getElementsByTagName("root").item(0);    Preferences prefsRoot=null;    String type=root.getAttribute("type");    if (type.equals("user")) {      prefsRoot=Preferences.userRoot();    } else {      prefsRoot=Preferences.systemRoot();    }    loadNode(prefsRoot,root);  } catch (  FactoryConfigurationError e) {    throw new InvalidPreferencesFormatException(e);  }catch (  SAXException e) {    throw new InvalidPreferencesFormatException(e);  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("Reference Class Name: " + className + "\n");  int len=addrs.size();  for (int i=0; i < len; i++)   buf.append(get(i).toString());  return buf.toString();}  }
class C{  public void test_getFloatLjava_lang_ObjectI(){  float[] x={1};  float ret=0;  boolean thrown=false;  try {    ret=Array.getFloat(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret,0.0);  try {    ret=Array.getFloat(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getFloat(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getFloat(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public static String encode(final String value){  try {    return URLEncoder.encode(value,CHARSET_ISO_8859_1);  } catch (  UnsupportedEncodingException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  final boolean inTemporaryOutputState(){  return (getEncoding() == null);}  }
class C{  public JRadioButtonMenuItem(String text,Icon icon){  this(text,icon,false);}  }
class C{  public static void logSearchResultEntry(SearchOperation searchOperation,SearchResultEntry searchEntry){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logSearchResultEntry(searchOperation,searchEntry);  }}  }
class C{  public DESKeySpec(byte[] key) throws InvalidKeyException {  this(key,0);}  }
class C{  public void deleteAuthenticationDomain(String realm,String cotName) throws AMConsoleException {  String[] param={realm,cotName};  logEvent("ATTEMPT_DELETE_AUTH_DOMAINS",param);  try {    CircleOfTrustManager manager=getCircleOfTrustManager();    manager.deleteCircleOfTrust(realm,cotName);    logEvent("SUCCEED_DELETE_AUTH_DOMAIN",param);  } catch (  COTException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,cotName,strError};    logEvent("FEDERATION_EXCEPTION_DELETE_AUTH_DOMAIN",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public AddOperation processAdd(String rawEntryDN,List<RawAttribute> rawAttributes){  return processAdd(ByteString.valueOfUtf8(rawEntryDN),rawAttributes,null);}  }
class C{  public NoInitialContextException(){  super();}  }
class C{  void release(BlockLogReader<K,V> reader){  StaticUtils.close(reader);}  }
class C{  public static CipherParameters makePBEParameters(PBEKeySpec keySpec,int type,int hash,int keySize,int ivSize){  PBEParametersGenerator generator=makePBEGenerator(type,hash);  byte[] key;  CipherParameters param;  key=convertPassword(type,keySpec);  generator.init(key,keySpec.getSalt(),keySpec.getIterationCount());  if (ivSize != 0) {    param=generator.generateDerivedParameters(keySize,ivSize);  } else {    param=generator.generateDerivedParameters(keySize);  }  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  private boolean bottomCollide(boolean initJump,boolean checkBaseTH){  Shape intersection;  boolean collided=false;  for (int i=0; i < 4; i++) {    intersection=SVGPath.intersect(getSpriteBoundsArray()[checkBaseTH ? 4 : 2],sMario.getStageFloorBase().getSpriteBoundsArray()[i]);    collided=intersection.getBoundsInParent().getWidth() != -1;    if (collided) {      if (collidingZone != i) {        collidingZone=i;        sMario.getStageFloorBase().setActiveFloor(i);      }      break;    }  }  if (!collided) {    for (    StageBlock s : SpriteHandler.getStageElements()) {      intersection=SVGPath.intersect(getSpriteBoundsArray()[checkBaseTH ? 4 : 2],s.getSpriteBounds());      collided=intersection.getBoundsInParent().getWidth() != -1;      if (collided)       break;    }    if (!collided)     for (int i=0; i < SpriteHandler.getEnemyCast().size(); i++) {      Enemy e=SpriteHandler.getEnemyCast().get(i);      if (e.getSpriteBoundsArray() == null || e.getSpriteBoundsArray()[5] == null)       continue;      intersection=SVGPath.intersect(getSpriteBoundsArray()[2],e.getSpriteBoundsArray()[5]);      if (intersection.getBoundsInParent().getWidth() != -1) {        Main.updateScore(1000);        if (!godMode) {          yVel=enemyHitBounce;          yPos-=yVel;          isJumpCycleRunning=true;          e.completeCycle();        }        break;      }    }  }  if (collided && initJump && !checkBaseTH) {    yVel=jumpVel;    isJumpCycleRunning=false;    breakJump=false;  }  if (!checkBaseTH)   isBottomCollided=collided;  return collided;}  }
class C{  public boolean remove_items_and_pull_tight(Collection<BrdItem> p_item_list,int p_pull_tight_accuracy,boolean p_with_delete_fixed){  boolean all_deleted=true;  changed_area_clear();  Set<Integer> changed_nets=new TreeSet<Integer>();  for (  BrdItem curr_item : p_item_list) {    if (!curr_item.can_delete(p_with_delete_fixed)) {      all_deleted=false;      continue;    }    for (int index=0; index < curr_item.tile_shape_count(); ++index) {      ShapeTile curr_shape=curr_item.tile_shape_get(index);      changed_area.join(curr_shape,curr_item.shape_layer(index));    }    remove_item(curr_item);    for (int index=0; index < curr_item.net_count(); ++index) {      changed_nets.add(curr_item.get_net_no(index));    }  }  for (  Integer curr_net_no : changed_nets) {    combine_traces(curr_net_no);  }  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);  changed_area_optimize(NetNosList.EMPTY,p_pull_tight_accuracy,null,t_limit,null);  return all_deleted;}  }
class C{  public static Foo[] findByUuid_PrevAndNext(long fooId,java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_PrevAndNext(fooId,uuid,orderByComparator);}  }
class C{  private XMPNode find(List list,String expr){  if (list != null) {    for (Iterator it=list.iterator(); it.hasNext(); ) {      XMPNode child=(XMPNode)it.next();      if (child.getName().equals(expr)) {        return child;      }    }  }  return null;}  }
class C{  public String convertDNToRealm(String orgName){  return DNMapper.orgNameToRealmName(orgName);}  }
class C{  protected boolean isRootPaneCheckingEnabled(){  return rootPaneCheckingEnabled;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public boolean listenerStop(){  if (log.isDebugEnabled())   log.debug("Sending application stop events");  boolean ok=true;  Object listeners[]=getApplicationLifecycleListeners();  if (listeners != null && listeners.length > 0) {    ServletContextEvent event=new ServletContextEvent(getServletContext());    ServletContextEvent tldEvent=null;    if (noPluggabilityServletContext != null) {      tldEvent=new ServletContextEvent(noPluggabilityServletContext);    }    for (int i=0; i < listeners.length; i++) {      int j=(listeners.length - 1) - i;      if (listeners[j] == null)       continue;      if (listeners[j] instanceof ServletContextListener) {        ServletContextListener listener=(ServletContextListener)listeners[j];        try {          fireContainerEvent("beforeContextDestroyed",listener);          if (noPluggabilityListeners.contains(listener)) {            listener.contextDestroyed(tldEvent);          } else {            listener.contextDestroyed(event);          }          fireContainerEvent("afterContextDestroyed",listener);        } catch (        Throwable t) {          ExceptionUtils.handleThrowable(t);          fireContainerEvent("afterContextDestroyed",listener);          getLogger().error(sm.getString("standardContext.listenerStop",listeners[j].getClass().getName()),t);          ok=false;        }      }      try {        if (getInstanceManager() != null) {          getInstanceManager().destroyInstance(listeners[j]);        }      } catch (      Throwable t) {        t=ExceptionUtils.unwrapInvocationTargetException(t);        ExceptionUtils.handleThrowable(t);        getLogger().error(sm.getString("standardContext.listenerStop",listeners[j].getClass().getName()),t);        ok=false;      }    }  }  listeners=getApplicationEventListeners();  if (listeners != null) {    for (int i=0; i < listeners.length; i++) {      int j=(listeners.length - 1) - i;      if (listeners[j] == null)       continue;      try {        if (getInstanceManager() != null) {          getInstanceManager().destroyInstance(listeners[j]);        }      } catch (      Throwable t) {        t=ExceptionUtils.unwrapInvocationTargetException(t);        ExceptionUtils.handleThrowable(t);        getLogger().error(sm.getString("standardContext.listenerStop",listeners[j].getClass().getName()),t);        ok=false;      }    }  }  setApplicationEventListeners(null);  setApplicationLifecycleListeners(null);  noPluggabilityServletContext=null;  noPluggabilityListeners.clear();  return ok;}  }
class C{  public ContentModel(int type,ContentModel content){  this(type,content,null);}  }
class C{  public static void appendLDIFSeparatorAndValue(StringBuilder buffer,ByteSequence valueBytes){  appendLDIFSeparatorAndValue(buffer,valueBytes,false,false);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
