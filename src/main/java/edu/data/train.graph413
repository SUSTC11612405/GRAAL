class C{  public void putTypeDescription(File f,String typeDescription){  putTypeDescription(getExtension(f),typeDescription);}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public boolean existsPage(String title){  if (title == null || title.length() == 0) {    return false;  }  Title t;  try {    t=new Title(title);  } catch (  WikiTitleParsingException e) {    return false;  }  String encodedTitle=t.getWikiStyleTitle();  Session session=this.__getHibernateSession();  session.beginTransaction();  Object returnValue=session.createNativeQuery("select p.id from PageMapLine as p where p.name = :pName COLLATE utf8_bin").setParameter("pName",encodedTitle,StringType.INSTANCE).uniqueResult();  session.getTransaction().commit();  return returnValue != null;}  }
class C{  public PacketOutputStream writeByteArray(final byte[] bytes){  assureBufferCapacity(bytes.length);  buffer.put(bytes);  return this;}  }
class C{  @Override public void onTearDown() throws Exception {  super.onTearDown();  solRSynchroniser.deleteAll();}  }
class C{  public void firePropertyChange(String propertyName,int oldValue,int newValue){  firePropertyChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue));}  }
class C{  public static ImageSource uri(String uri){  if (uri == null) {    throw new NullPointerException("Uri must not be null");  }  if (!uri.contains("://")) {    if (uri.startsWith("/")) {      uri=uri.substring(1);    }    uri=FILE_SCHEME + uri;  }  return new ImageSource(Uri.parse(uri));}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(uid,this);  if (params != null && params.length > 0) {    for (int i=0; i < params.length; i++) {      if (params[i] != null)       params[i].walkGraph(semNodesTable);    }  }  if (body != null)   body.walkGraph(semNodesTable);  if (stepNode != null)   stepNode.walkGraph(semNodesTable);}  }
class C{  private boolean loadNextPage(){  result=pageable.getPage(query,skip,pageSize);  index=0;  if (result == null || result.isEmpty()) {    return false;  }  return true;}  }
class C{  private boolean isTenantsSynchronizationOptionsChanged(AuthnProvider authnProvider,AuthnUpdateParam param){  if (param.getTenantsSynchronizationOptionsChanges().getAdd().isEmpty() && param.getTenantsSynchronizationOptionsChanges().getRemove().isEmpty()) {    return false;  }  if (param.getLabel() != null && !param.getLabel().equals(authnProvider.getLabel())) {    return false;  }  if (param.getGroupAttribute() != null) {    return false;  }  if (param.getManagerDn() != null) {    return false;  }  if (param.getManagerPassword() != null) {    return false;  }  if (param.getSearchBase() != null) {    return false;  }  if (param.getSearchFilter() != null) {    return false;  }  if (param.getSearchScope() != null) {    return false;  }  if (param.getMode() != null && !param.getMode().equals(authnProvider.getMode())) {    return false;  }  if (param.getLabel() != null) {    return false;  }  if (param.getDescription() != null) {    return false;  }  if (param.getDisable() != null) {    return false;  }  if (param.getAutoRegCoprHDNImportOSProjects() != null) {    return false;  }  if (param.getMaxPageSize() != null) {    return false;  }  if (!param.getGroupWhitelistValueChanges().getAdd().isEmpty() || !param.getGroupWhitelistValueChanges().getRemove().isEmpty()) {    return false;  }  if (!param.getDomainChanges().getAdd().isEmpty() || !param.getDomainChanges().getRemove().isEmpty()) {    return false;  }  if (!param.getServerUrlChanges().getAdd().isEmpty() || !param.getServerUrlChanges().getRemove().isEmpty()) {    return false;  }  if (!param.getGroupObjectClassChanges().getAdd().isEmpty() || !param.getGroupObjectClassChanges().getRemove().isEmpty()) {    return false;  }  if (!param.getGroupMemberAttributeChanges().getAdd().isEmpty() || !param.getGroupMemberAttributeChanges().getRemove().isEmpty()) {    return false;  }  return true;}  }
class C{  public boolean areStatusBarColorsValid(){  return colorPrimary != -1 && colorSecondary != -1;}  }
class C{  public void stop(){  log.debug("Stopping ZeroConfService {}",this.key());  if (ZeroConfService.services().containsKey(this.key())) {    ZeroConfService.netServices().values().stream().forEach(null);    ZeroConfService.services().remove(key());  }}  }
class C{  private void cycleVideoChannel(ARDrone drone) throws IOException {  if (++video_index == VIDEO_CYCLE.length) {    video_index=0;  }  drone.selectVideoChannel(VIDEO_CYCLE[video_index]);}  }
class C{  public DirectEdge(){  this.connector=null;  this.source=null;  this.sourcePort=0;  this.target=null;  this.targetPort=0;}  }
class C{  public void generationBoundaryStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   if (children[x] instanceof SteadyStateStatisticsForm)   ((SteadyStateStatisticsForm)children[x]).generationBoundaryStatistics(state);}  }
class C{  public static double cdf(double val,double rate){  if (val < 0.) {    return 0.;  }  return 1 - Math.exp(-rate * val);}  }
class C{  public static Intent createCallPhoneIntent(String phoneNumber){  Intent callIntent=new Intent(Intent.ACTION_DIAL);  callIntent.setData(Uri.parse("tel:" + phoneNumber));  return callIntent;}  }
class C{  public String listMailbox(ImapRequestLineReader request) throws DecodingException {  char next=request.nextWordChar();switch (next) {case '"':    return request.consumeQuoted();case '{':  return request.consumeLiteral(null);default :return request.consumeWord(new ListCharValidator());}}  }
class C{  public VcfRecord peek(){  if (mCurrent == null) {    throw new IllegalStateException("No more records");  }  return mCurrent;}  }
class C{  protected void processAttribute(Vector attrNames,Vector attrValues,Vector attrTypes) throws Exception {  String key=XMLUtil.scanIdentifier(this.reader);  XMLUtil.skipWhitespace(this.reader,null);  if (!XMLUtil.read(this.reader,'&').equals("=")) {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`='");  }  XMLUtil.skipWhitespace(this.reader,null);  String value=XMLUtil.scanString(this.reader,'&',this.entityResolver);  attrNames.addElement(key);  attrValues.addElement(value);  attrTypes.addElement("CDATA");  this.validator.attributeAdded(key,value,this.reader.getSystemID(),this.reader.getLineNr());}  }
class C{  @Override public void addEventListener(IRcsServiceRegistrationListener listener){  if (sLogger.isActivated()) {    sLogger.info("Add a service listener");  }synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.addEventListener(listener);  }}  }
class C{  public ProductConfigWrapper(){}  }
class C{  private long[][] createTimesArray(){  return new long[sizes.getIterations()][parallelism.getIterations()];}  }
class C{  private final void _prependOrWriteCharacterEscape(char ch,int escCode) throws IOException, JsonGenerationException {  if (escCode >= 0) {    if (_outputTail >= 2) {      int ptr=_outputTail - 2;      _outputHead=ptr;      _outputBuffer[ptr++]='\\';      _outputBuffer[ptr]=(char)escCode;      return;    }    char[] buf=_entityBuffer;    if (buf == null) {      buf=_allocateEntityBuffer();    }    _outputHead=_outputTail;    buf[1]=(char)escCode;    _writer.write(buf,0,2);    return;  }  if (escCode != CharacterEscapes.ESCAPE_CUSTOM) {    if (_outputTail >= 6) {      char[] buf=_outputBuffer;      int ptr=_outputTail - 6;      _outputHead=ptr;      buf[ptr]='\\';      buf[++ptr]='u';      if (ch > 0xFF) {        int hi=(ch >> 8) & 0xFF;        buf[++ptr]=HEX_CHARS[hi >> 4];        buf[++ptr]=HEX_CHARS[hi & 0xF];        ch&=0xFF;      } else {        buf[++ptr]='0';        buf[++ptr]='0';      }      buf[++ptr]=HEX_CHARS[ch >> 4];      buf[++ptr]=HEX_CHARS[ch & 0xF];      return;    }    char[] buf=_entityBuffer;    if (buf == null) {      buf=_allocateEntityBuffer();    }    _outputHead=_outputTail;    if (ch > 0xFF) {      int hi=(ch >> 8) & 0xFF;      int lo=ch & 0xFF;      buf[10]=HEX_CHARS[hi >> 4];      buf[11]=HEX_CHARS[hi & 0xF];      buf[12]=HEX_CHARS[lo >> 4];      buf[13]=HEX_CHARS[lo & 0xF];      _writer.write(buf,8,6);    } else {      buf[6]=HEX_CHARS[ch >> 4];      buf[7]=HEX_CHARS[ch & 0xF];      _writer.write(buf,2,6);    }    return;  }  String escape;  if (_currentEscape == null) {    escape=_characterEscapes.getEscapeSequence(ch).getValue();  } else {    escape=_currentEscape.getValue();    _currentEscape=null;  }  int len=escape.length();  if (_outputTail >= len) {    int ptr=_outputTail - len;    _outputHead=ptr;    escape.getChars(0,len,_outputBuffer,ptr);    return;  }  _outputHead=_outputTail;  _writer.write(escape);}  }
class C{  public OMBitmap(double lt,double ln,int w,int h,byte[] bytes){  super(RENDERTYPE_LATLON,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  lat=lt;  lon=ln;  width=w;  height=h;  bits=bytes;}  }
class C{  public void testIneB2() throws IOException {  SimilarityBase sim=new DFRSimilarity(new BasicModelIne(),new AfterEffectB(),new NormalizationH2());  correctnessTestCore(sim,5.747603416442871f);}  }
class C{  public void disallowUnsignedChanges(){  allowsUnsignedChanges=false;}  }
class C{  public XMLWriter(Writer writer){  if (writer instanceof PrintWriter) {    this.writer=(PrintWriter)writer;  } else {    this.writer=new PrintWriter(writer);  }}  }
class C{  private static char arrayTypeToName(int type){switch (type) {case ByteCode.T_BOOLEAN:    return 'Z';case ByteCode.T_CHAR:  return 'C';case ByteCode.T_FLOAT:return 'F';case ByteCode.T_DOUBLE:return 'D';case ByteCode.T_BYTE:return 'B';case ByteCode.T_SHORT:return 'S';case ByteCode.T_INT:return 'I';case ByteCode.T_LONG:return 'J';default :throw new IllegalArgumentException("bad operand");}}  }
class C{  void updateVersion(){  version.invalidate();  version=createVersion();}  }
class C{  @OnClick(R.id.back_navigation_next_button) public void nextButtonOnClick(){  Intent target=new Intent(this,BackNavigationActivity.class);  target.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);  target.putExtra(getString(R.string.PEER_COUNT),PeerCount);  startActivity(target);}  }
class C{  public boolean isAfk(Player player){  return afkData.getOrDefault(player.getUniqueId(),new Data()).afk;}  }
class C{  public static <S extends HasRowOutHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    RowOutEvent event=new RowOutEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void ensureRows(int rows){  if (rows > getNumRows()) {    resize(rows,getNumColumns());  }}  }
class C{  protected void normalizeAndDecomposeFilters(AST2BOpContext ctx,StaticAnalysis sa,IBindingSet[] bSets,JoinGroupNode group){  final Map<FilterNode,List<List<FilterNode>>> subst=new HashMap<FilterNode,List<List<FilterNode>>>();  for (  IGroupMemberNode child : group) {    if (child instanceof FilterNode) {      final FilterNode filterNode=(FilterNode)child;      final IValueExpressionNode vexprNode=filterNode.getValueExpressionNode();      if (isDecomposable(vexprNode)) {        final IValueExpressionNode filterAsCNF=StaticAnalysis.isCNF(vexprNode) ? vexprNode : StaticAnalysis.toCNF(vexprNode);        if (filterAsCNF != null) {          final List<FilterNode> splittedFilterNodes=constructFiltersForValueExpressionNode(filterAsCNF,new ArrayList<FilterNode>());          if (splittedFilterNodes != null) {            if (!subst.containsKey(filterNode)) {              subst.put(filterNode,new ArrayList<List<FilterNode>>());            }            final List<List<FilterNode>> values=subst.get(filterNode);            values.add(splittedFilterNodes);          }        }      }    }  }  for (  final FilterNode filterNode : subst.keySet()) {    for (int i=0; i < subst.get(filterNode).size(); i++) {      group.removeChild(filterNode);    }  }  for (  final List<List<FilterNode>> filterNodeListList : subst.values()) {    for (    final List<FilterNode> filterNodeList : filterNodeListList) {      for (      final FilterNode filterNode : filterNodeList) {        group.addChild(filterNode);      }    }  }}  }
class C{  private static boolean meetsAllBounds(final double x,final double y,final double z,final Membership[] bounds,final Membership[] moreBounds){  return meetsAllBounds(x,y,z,bounds) && meetsAllBounds(x,y,z,moreBounds);}  }
class C{  @Override public void synchronizeChanged(){}  }
class C{  public static boolean containsElement(Object[] array,Object element){  if (array == null) {    return false;  }  for (int i=0; i < array.length; i++) {    if (nullSafeEquals(array[i],element)) {      return true;    }  }  return false;}  }
class C{  public static SourceViewer createFormsOutputViewer(FormToolkit toolkit,Composite parent,int flags){  SourceViewer sourceViewer=createOutputViewer(parent,flags);  sourceViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TREE_BORDER);  sourceViewer.getTextWidget().setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TREE_BORDER);  toolkit.adapt(sourceViewer.getTextWidget(),true,true);  return sourceViewer;}  }
class C{  private static void checkGLError(String label){  int error;  while ((error=GLES20.glGetError()) != GLES20.GL_NO_ERROR) {    Log.e(TAG,label + ": glError " + error);    throw new RuntimeException(label + ": glError " + error);  }}  }
class C{  @Override public void onCreate(final Bundle savedInstanceState){  setTheme(((DictionaryApplication)getApplication()).getSelectedTheme().themeId);  super.onCreate(savedInstanceState);  setContentView(R.layout.about_activity);  String ver="???";  try {    PackageManager pm=getPackageManager();    if (pm != null) {      PackageInfo p=pm.getPackageInfo(getPackageName(),0);      ver=p.versionName + " (ID " + p.versionCode+ ")";    }  } catch (  Exception e) {  }  TextView titleView=(TextView)findViewById(R.id.titleText);  titleView.setText("QuickDic " + ver);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public final void openPdfFile(final byte[] data) throws PdfException {  final RandomAccessBuffer pdf_datafile;  try {    if (PdfFileReader.alwaysCacheInMemory == -1 || data.length < PdfFileReader.alwaysCacheInMemory) {      pdf_datafile=new RandomAccessDataBuffer(data);    } else {      try {        final File file=File.createTempFile("page",".bin",new File(ObjectStore.temp_dir));        tempFileName=file.getAbsolutePath();        final java.io.FileOutputStream a=new java.io.FileOutputStream(file);        a.write(data);        a.flush();        a.close();        pdf_datafile=new RandomAccessFileBuffer(tempFileName,"r");      } catch (      final Exception e) {        throw new RuntimeException("Unable to create temporary file in " + ObjectStore.temp_dir + ' '+ e);      }    }    objectReader.init(pdf_datafile);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " accessing file");    throw new PdfException("Exception " + e + " accessing file");  }}  }
class C{  public void putShort(String key,short value){  map.put(key,value);}  }
class C{  public InnerClassesAttribute(ConstPool cp){  super(cp,tag,new byte[2]);  ByteArray.write16bit(0,get(),0);}  }
class C{  public static GeoShapeQueryBuilder geoShapeQuery(String name,ShapeBuilder shape,ShapeRelation relation){  return new GeoShapeQueryBuilder(name,shape,relation);}  }
class C{  public boolean isConditionOf(Join first){  if (m_mainTable == null && (first.getJoinTable().equals(m_joinTable) || first.getMainAlias().equals(m_joinTable)))   return true;  return false;}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  public DefaultStateMachinePersister(StateMachinePersist<S,E,T> stateMachinePersist){  super(stateMachinePersist);}  }
class C{  public int read() throws IOException {  throw new UnsupportedOperationException();}  }
class C{  public static String readFile(File file) throws IOException {  String contents=FileUtils.file2String(file);  contents=contents.replaceAll("\r\n","\n");  return StringUtils.strip(contents);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  protected LocalDate moveDate(MoveableHoliday fm,LocalDate fixed){  for (  MovingCondition mc : fm.getMovingCondition()) {    if (shallBeMoved(fixed,mc)) {      fixed=moveDate(mc,fixed);      break;    }  }  return fixed;}  }
class C{  public Element createElementNS(AbstractDocument document,String namespaceURI,String qualifiedName){  if (namespaceURI == null)   return new GenericElement(qualifiedName.intern(),document);  String name=DOMUtilities.getLocalName(qualifiedName);  String prefix=DOMUtilities.getPrefix(qualifiedName);  if (SVG12Constants.SVG_NAMESPACE_URI.equals(namespaceURI)) {    ElementFactory ef=(ElementFactory)factories.get(name);    if (ef != null) {      return ef.create(prefix,document);    }  } else   if (XBLConstants.XBL_NAMESPACE_URI.equals(namespaceURI)) {    ElementFactory ef=(ElementFactory)xblFactories.get(name);    if (ef != null) {      return ef.create(prefix,document);    }  }  if (customFactories != null) {    ElementFactory cef;    cef=(ElementFactory)customFactories.get(namespaceURI,name);    if (cef != null) {      return cef.create(prefix,document);    }  }  return new BindableElement(prefix,document,namespaceURI,name);}  }
class C{  public void trimToSize(){  this.elements.trimToSize();}  }
class C{  @Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){  return cacheOnDisk(cacheOnDisk);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isNativeShareSupported(){  return impl.isNativeShareSupported();}  }
class C{  public NetMapReader(String host,String port,NetMapConnector connector) throws IOException {  this(host,port,connector,null);}  }
class C{  public static byte[] calculateSignature(byte[] random,byte[] privateKey,byte[] message){  byte[] result=new byte[64];  if (curve_sigs.curve25519_sign(SHA512Provider,result,privateKey,message,message.length,random) != 0) {    throw new IllegalArgumentException("Message exceeds max length!");  }  return result;}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.190 -0400",hash_original_method="868D91C93AC11F23ACC1A0197C9B3BB6",hash_generated_method="6FDAF0289EF000AE7051ECF8494D2C1C") public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  public MetricKDE(KernelFunction kf,DistanceMetric distanceMetric,VectorCollectionFactory<VecPaired<Vec,Integer>> vcf){  this(kf,distanceMetric,vcf,DEFAULT_K,DEFAULT_STND_DEV);}  }
class C{  private void initializeFocusManager(){  if (mFocusManager != null) {    mFocusManager.removeMessages();  } else {    CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];    boolean mirror=(info.facing == CameraInfo.CAMERA_FACING_FRONT);    String[] defaultFocusModes=mActivity.getResources().getStringArray(R.array.pref_video_focusmode_default_array);    mFocusManager=new FocusOverlayManager(mPreferences,defaultFocusModes,mParameters,this,mirror,mActivity.getMainLooper(),mUI.getFocusRing());  }}  }
class C{  @EventHandler(ignoreCancelled=true) public void onEntityDamage(EntityDamageEvent event){  if (event.getEntity() instanceof Player && !canInteract((Player)event.getEntity())) {    event.setCancelled(true);  }}  }
class C{  private LimitChronology(Chronology base,DateTime lowerLimit,DateTime upperLimit){  super(base,null);  iLowerLimit=lowerLimit;  iUpperLimit=upperLimit;}  }
class C{  public SingleThreadContext(CatalystThreadFactory factory,Serializer serializer){  this(new ScheduledThreadPoolExecutor(1,factory),serializer);}  }
class C{  private void appendStatement(Statement statement){  for (  Statement s : statements) {    Set<String> aws=s.principal().aws();    ConditionMap conditions=s.conditions();    if (s.actions().containsAll(statement.actions()) && s.effect().equals(statement.effect()) && aws != null && aws.containsAll(statement.principal().aws()) && conditions != null && conditions.equals(statement.conditions())) {      s.resources().addAll(statement.resources());      return;    }    if (s.resources().containsAll(statement.resources()) && s.effect().equals(statement.effect()) && aws != null && aws.containsAll(statement.principal().aws()) && conditions != null && conditions.equals(statement.conditions())) {      s.actions().addAll(statement.actions());      return;    }    if (s.resources().containsAll(statement.resources()) && s.actions().containsAll(statement.actions()) && s.effect().equals(statement.effect())&& aws != null && aws.containsAll(statement.principal().aws())) {      if (conditions != null && conditions.equals(statement.conditions())) {        return;      }      if (conditions != null && statement.conditions() != null) {        conditions.putAll(statement.conditions());        return;      }    }  }  if (!(statement.actions().isEmpty() && statement.resources().isEmpty())) {    statements.add(statement);  }}  }
class C{  public static Resource[] decodeContexts(final String[] strings){  if (strings == null) {    throw new IllegalArgumentException();  }  if (strings.length == 0) {    return EMPTY_RESOURCE_ARRAY;  }  final Resource[] tmp=new Resource[strings.length];  for (int i=0; i < strings.length; i++) {    final String s=strings[i];    if (s == null || s.length() == 0) {      tmp[i]=null;    } else {      tmp[i]=decodeResource(s);    }  }  return tmp;}  }
class C{  private boolean loadCiClasses(){  boolean retval=false;  try {    InputStream is=this.getClass().getResourceAsStream(CI_CLASSES_FILENAME);    if (is != null) {      ObjectInputStream in=new ObjectInputStream(is);      this.ciClasses=(ArrayList<CiClass>)in.readObject();      in.close();      is.close();      retval=true;    } else {      System.err.printf("Unable to find %s\n",CI_CLASSES_FILENAME);    }  } catch (  Exception e) {    e.printStackTrace(System.err);  }  return retval;}  }
class C{  synchronized void closeTrapSocketIfNeeded(){  if ((trapSocket != null) && (state != ONLINE)) {    trapSocket.close();    trapSocket=null;  }}  }
class C{  public Vertex parsePattern(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  stream.skipWhitespace();  Vertex equation=network.createInstance(Primitive.CASE);  Vertex pattern=null;  if (stream.peek() == '"') {    stream.skip();    pattern=network.createPattern(stream.nextQuotesExcludeDoubleQuote(),this);  } else {    pattern=parseElement(stream,elements,debug,network);  }  equation.addRelationship(Primitive.PATTERN,pattern);  String next=stream.nextWord().toLowerCase();  if (next.equals(TOPIC)) {    Vertex topic=parseElement(stream,elements,debug,network);    equation.addRelationship(Primitive.TOPIC,topic);    next=stream.nextWord().toLowerCase();  }  if (next.equals(THAT)) {    Vertex that=null;    stream.skipWhitespace();    if (stream.peek() == '"') {      stream.skip();      that=network.createPattern(stream.nextQuotesExcludeDoubleQuote(),this);    } else {      that=parseElement(stream,elements,debug,network);    }    equation.addRelationship(Primitive.THAT,that);    next=stream.nextWord().toLowerCase();  }  if (next.equals(GOTO)) {    List<Vertex> thens=new ArrayList<Vertex>();    stream.skipWhitespace();    boolean parseGoto=true;    while (parseGoto) {      thens.add(parseElement(stream,elements,debug,network));      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        parseGoto=false;      }    }    for (    Vertex then : thens) {      equation.addRelationship(Primitive.GOTO,then);    }  } else   if (next.equals(RETURN)) {    equation.addRelationship(Primitive.GOTO,Primitive.RETURN);  } else   if (next.equals(TEMPLATE) || next.equals(ANSWER)) {    Vertex template=parseElement(stream,elements,debug,network);    equation.addRelationship(Primitive.TEMPLATE,template);  } else {    stream.setPosition(stream.getPosition() - next.length());    throw new SelfParseException("expected one of GOTO, TEMPLATE, RETURN, THAT, TOPIC, found: " + next,stream);  }  ensureNext(';',stream);  return equation;}  }
class C{  private void generateIndexMap(int size){  assert (size % 2 == 1);  int mapWidth=((size + 1) / 2) + 1;  mCenterCoefficient=(size - 1) / 2;  mCenterCoefficientMapIndex=mCenterCoefficient + 1;  mIndexMap=new int[size][mapWidth];  for (int x=0; x < mapWidth - 2; x+=2) {    mIndexMap[0][x]=x;    mIndexMap[0][x + 1]=size - 1 - x;  }  mIndexMap[0][mCenterCoefficientMapIndex]=mCenterCoefficient;  for (int x=1; x < size; x++) {    for (int y=0; y < mapWidth; y++) {      mIndexMap[x][y]=mIndexMap[x - 1][y] + 1;      if (mIndexMap[x][y] >= size) {        mIndexMap[x][y]-=size;      }    }  }}  }
class C{  public void testFetchingIncompleteLocationTree_causesNewSync(){  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  mFakeEventBus.post(new SyncSucceededEvent());  LocationTree locationTree=FakeAppLocationTreeFactory.emptyTree();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  assertTrue(mFakeSyncManager.isSyncActive());}  }
class C{  public void removeElementAt(int index){  delegate.removeElementAt(index);  fireIntervalRemoved(this,index,index);}  }
class C{  public static Name packagePart(Name classname){  return classname.subName(0,classname.lastIndexOf((byte)'.'));}  }
class C{  public Thread startNewServer(Socket sock){  return new LinkServer(sock);}  }
class C{  public void calculatePartials(int nodeIndex1,int nodeIndex2,int nodeIndex3,int[] matrixMap){  throw new UnsupportedOperationException("calculatePartials(int nodeIndex1, int nodeIndex2, int nodeIndex3, int[] matrixMap) is not implemented in this likelihood core");}  }
class C{  private void hideAlbumArt(){  mPageContainer.setVisibility(View.VISIBLE);  mQueueSwitch.setVisibility(View.GONE);  mAlbumArtSmall.setVisibility(View.VISIBLE);  fade(mAlbumArt,0f);  fade(mPageContainer,1f);}  }
class C{  public boolean isDynamic(){  boolean result=false;  final List<IElementDeclaration> elementsDeclarationInside=super.getElementsDeclarationInside();  for (  final IElementDeclaration iElementDeclaration : elementsDeclarationInside) {    if (iElementDeclaration instanceof VariableDeclaration) {      result=true;      break;    }  }  return result;}  }
class C{  void endOptional(boolean successful){  if (successful) {    parsed.remove(parsed.size() - 2);  } else {    parsed.remove(parsed.size() - 1);  }}  }
class C{  public InfoPanel(JFrame parent){  super();  m_Parent=parent;  createPanel();}  }
class C{  public void addColumn(MBrowseField info){  WBrowseListItemRenderer renderer=(WBrowseListItemRenderer)getItemRenderer();  renderer.addColumn(info.getName());  getModel().addColumn();  return;}  }
class C{  private static void icone(String tipo,Label mensagem){switch (tipo) {case "INFO":    mensagem.getStyleClass().add("nota-info");  break;case "ERRO":mensagem.getStyleClass().add("nota-erro");break;case "ALERTA":mensagem.getStyleClass().add("nota-alerta");break;case "CONFIRMAR":mensagem.getStyleClass().add("nota-confirma");break;default :mensagem.getStyleClass().add("nota-info");break;}}  }
class C{  public static SingleValue serializableInstance(){  return new SingleValue(0.5);}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c == '=') {if (x.next() != '>') {x.back();}} else if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public GPUImageSmoothToonFilter(){  blurFilter=new GPUImageGaussianBlurFilter();  addFilter(blurFilter);  toonFilter=new GPUImageToonFilter();  addFilter(toonFilter);  getFilters().add(blurFilter);  setBlurSize(0.5f);  setThreshold(0.2f);  setQuantizationLevels(10.0f);}  }
class C{  public synchronized int addLog(int descriptor,boolean postAnnouncements){  return addLog(descriptor,V_VERBOSE,postAnnouncements);}  }
class C{  public boolean isVisited(int loc){  if (checkBounds(loc)) {    return (ONE == this.registry[loc]);  } else {    throw new RuntimeException("The location " + loc + " out of bounds [0,"+ (this.registry.length - 1)+ "]");  }}  }
class C{  public void close(){  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"closeConnection",getDirection());  if (m_connection != null) {    if (isTarget()) {      commitChanges();      if (s_parameters.isOptimizeDatabase()) {        connectDatabaseSystem();        optimizeDatabase();      }    } else {      rollbackChanges();      if (s_parameters.isUpgrade() && s_parameters.isDropSource()) {        if ((!s_dbEngine.isDBError()) && (!s_dbEngine.isSQLError())) {          connectDatabaseSystem();          dropDBSchema();        }      }    }    try {      m_connection.close();      m_connection=null;    } catch (    SQLException e) {      s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"closeConnectionError",new Object[]{getDirection(),e.getMessage()});    }  }  s_logger.log(Level.CONFIG,"connectionClosed");  s_logger.flush();}  }
class C{  public HyphenationCompoundWordTokenFilterFactory(Map<String,String> args){  super(args);  dictFile=get(args,"dictionary");  encoding=get(args,"encoding");  hypFile=require(args,"hyphenator");  minWordSize=getInt(args,"minWordSize",CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);  minSubwordSize=getInt(args,"minSubwordSize",CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);  maxSubwordSize=getInt(args,"maxSubwordSize",CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);  onlyLongestMatch=getBoolean(args,"onlyLongestMatch",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomFeatureEditForm roomFeatureEditForm=(RoomFeatureEditForm)form;  MessageResources rsc=getResources(request);  String doit=roomFeatureEditForm.getDoit();  if (doit != null) {    if (doit.equals(rsc.getMessage("button.addNew"))) {      ActionMessages errors=new ActionMessages();      errors=roomFeatureEditForm.validate(mapping,request);      if (errors.size() == 0) {        save(mapping,roomFeatureEditForm,request,response);        return mapping.findForward("showRoomFeatureList");      } else {        saveErrors(request,errors);      }    }    if (doit.equals(rsc.getMessage("button.returnToRoomFeatureList"))) {      return mapping.findForward("showRoomFeatureList");    }  }  LookupTables.setupDepartments(request,sessionContext,false);  LookupTables.setupExamTypes(request,sessionContext.getUser(),DepartmentStatusType.Status.ExamView,DepartmentStatusType.Status.ExamTimetable);  request.setAttribute("featureTypes",RoomFeatureTypeDAO.getInstance().findAll(Order.asc("label")));  TreeSet<Department> departments=Department.getUserDepartments(sessionContext.getUser());  if (departments.size() == 1) {    roomFeatureEditForm.setDeptCode(departments.first().getDeptCode());  } else {    String deptCode=(String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom);    if (deptCode != null && !deptCode.isEmpty() && !deptCode.equals("All") && !deptCode.matches("Exam[0-9]*"))     roomFeatureEditForm.setDeptCode(deptCode);  }  if (roomFeatureEditForm.getDeptCode() == null || roomFeatureEditForm.getDeptCode().isEmpty() || roomFeatureEditForm.getDeptCode().matches("Exam[0-9]*") || !sessionContext.hasPermission(roomFeatureEditForm.getDeptCode(),"Department",Right.DepartmentRoomFeatureAdd)) {    sessionContext.checkPermission(Right.GlobalRoomFeatureAdd);    roomFeatureEditForm.setGlobal(true);  } else {    sessionContext.checkPermission(roomFeatureEditForm.getDeptCode(),"Department",Right.DepartmentRoomFeatureAdd);    roomFeatureEditForm.setGlobal(false);  }  roomFeatureEditForm.setSessionId(sessionContext.getUser().getCurrentAcademicSessionId());  return mapping.findForward("showAdd");}  }
class C{  public void assureBlackList(Connection connection){  AbstractMastersListener.clearBlacklist();}  }
class C{  public String checkQuoteTotalAmtOnly(){  if (!isQuoteTotalAmtOnly())   return null;  MRfQLine[] lines=getLines();  for (int i=0; i < lines.length; i++) {    MRfQLine line=lines[i];    MRfQLineQty[] qtys=line.getQtys();    if (qtys.length > 1) {      log.warning("isQuoteTotalAmtOnlyValid - #" + qtys.length + " - "+ line);      String msg="@Line@ " + line.getLine() + ": #@C_RfQLineQty@="+ qtys.length+ " - @IsQuoteTotalAmt@";      return msg;    }  }  return null;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.413 -0500",hash_original_method="7C91E467656A70134D915DC378A85E85",hash_generated_method="97A13C6E13CC458A400E21741040D166") @Override public void put(String name,long value){  emulatedFields.put(name,value);}  }
class C{  public byte byteAt(int index){  bb.position(index);  return bb.get();}  }
class C{  private static long parseTfdt(ParsableByteArray tfdt){  tfdt.setPosition(Mp4Util.ATOM_HEADER_SIZE);  int fullAtom=tfdt.readInt();  int version=Mp4Util.parseFullAtomVersion(fullAtom);  return version == 1 ? tfdt.readUnsignedLongToLong() : tfdt.readUnsignedInt();}  }
class C{  public void testSortByField() throws Exception {  Query query=new AssertNeedsScores(new MatchAllDocsQuery(),false);  assertEquals(5,searcher.search(query,5,Sort.INDEXORDER).totalHits);}  }
class C{  private <T extends Request,U extends Response>void sendRequest(T request,Connection connection,Throwable error,CompletableFuture<U> future){  if (open) {    if (error == null) {      if (connection != null) {        connection.<T,U>send(request).whenComplete(null);      } else {        future.completeExceptionally(new ConnectException("failed to connect"));      }    } else {      this.connection=null;      next().whenComplete(null);    }  }}  }
class C{  public BytesStream bytesStream() throws IOException {  close();  return (BytesStream)bos;}  }
class C{  public UserEntity(String username,String name,String email,String password){  this.username=username;  this.name=name;  this.email=email;  this.password=password;}  }
class C{  private Option createNoArgOpt(String shortOpt,String longOpt,String desc){  return Option.builder(shortOpt).longOpt(longOpt).desc(desc).build();}  }
class C{  public void createServer(VM server,boolean accessor){  createServer(server,0,accessor,0);}  }
class C{  public void add(final Runnable task){synchronized (cleanup) {    if (ran) {      throw new IllegalStateException("Request has already been cleaned up");    }    cleanup.add(task);  }}  }
class C{  public void endCloseConSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(closeConSendInProgressId,-1);  int endCloseConSendId;  if (failed) {    endCloseConSendId=closeConSendFailedId;  } else {    endCloseConSendId=closeConSendId;  }  this.sendStats.incInt(endCloseConSendId,1);  this.stats.incLong(closeConSendDurationId,duration);}  }
class C{  public void deleteImageSharing(String sharingId) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteImageSharing(sharingId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @SuppressWarnings("unchecked") private void doTestQuery(int cardinality,String[] fields) throws Exception {  String[] startOptions=new String[]{"(","["};  String[] endOptions=new String[]{")","]"};  Integer[] qRange=getRandomRange(cardinality,"id");  ModifiableSolrParams params=new ModifiableSolrParams();  params.set("q","id:[" + qRange[0] + " TO "+ qRange[1]+ "]");  params.set("facet","true");  String field=fields[random().nextInt(fields.length)];  params.set("facet.interval",field);  for (int i=0; i < 1 + random().nextInt(20); i++) {    Integer[] interval=getRandomRange(cardinality,field);    String open=startOptions[interval[0] % 2];    String close=endOptions[interval[1] % 2];    params.add("f." + field + ".facet.interval.set",open + interval[0] + ","+ interval[1]+ close);    params.add("facet.query",field + ":" + open.replace('(','{')+ interval[0]+ " TO "+ interval[1]+ close.replace(')','}'));  }  SolrQueryRequest req=req(params);  try {    SolrQueryResponse rsp=h.queryAndResponse("standard",req);    NamedList<Object> facetQueries=(NamedList<Object>)((NamedList<Object>)rsp.getValues().get("facet_counts")).get("facet_queries");    NamedList<Object> facetIntervals=(NamedList<Object>)((NamedList<Object>)(NamedList<Object>)((NamedList<Object>)rsp.getValues().get("facet_counts")).get("facet_intervals")).get(field);    assertEquals("Responses don't have the same number of facets: \n" + facetQueries + "\n"+ facetIntervals,facetQueries.size(),facetIntervals.size());    for (int i=0; i < facetIntervals.size(); i++) {      assertEquals("Interval did not match: " + facetIntervals.getName(i),facetIntervals.getVal(i).toString(),facetQueries.get(field + ":" + facetIntervals.getName(i).replace(","," TO ").replace('(','{').replace(')','}')).toString());    }  }  finally {    req.close();  }}  }
class C{  final protected void handleChunk(final E[] chunk){  if (chunkClass == null) {    chunkClass=(Class<E[]>)chunk.getClass();  }  queue.add(chunk);}  }
class C{  public GroovyShell(GroovyShell shell){  this(shell.loader,shell.context);}  }
class C{  public String toString(){  String prettyText=this.text.replace('\n','\u00b6');  return "Diff(" + this.operation + ",\""+ prettyText+ "\")";}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public static boolean testLineSegmentTriangle(Vector3d p0,Vector3d p1,Vector3d v0,Vector3d v1,Vector3d v2,double epsilon){  return testLineSegmentTriangle(p0.x,p0.y,p0.z,p1.x,p1.y,p1.z,v0.x,v0.y,v0.z,v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,epsilon);}  }
class C{  public void generateDisruption(DeityType deity,World world,BlockPos pos,List<EntityPlayer> players){  List<DisruptionEntry> dis=Lists.newArrayList();  if (deity == null) {    for (    DisruptionEntry entry : disruptions)     if (entry.getDeity() == null)     dis.add(entry);  } else   for (  DisruptionEntry entry : disruptions)   if (entry.getDeity() == deity || entry.getDeity() == null)   dis.add(entry);  DisruptionEntry disruption=dis.get(world.rand.nextInt(dis.size()));  if (!MinecraftForge.EVENT_BUS.post(new DisruptionEvent(deity,world,pos,players,disruption)))   disruption.disrupt(world,pos,players);}  }
class C{  public static AndroidHttpClient newInstance(String userAgent){  return newInstance(userAgent,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.056 -0500",hash_original_method="9DD1D58A13546676FF124C2FF2506A7B",hash_generated_method="5620DF64F1CF72A5E175BFB54226E9BC") public void connected(){  if (false)   Log.v("ddm-hello","Connected!");  if (false) {    byte[] data=new byte[]{0,1,2,3,4,-4,-3,-2,-1,127};    Chunk testChunk=new Chunk(ChunkHandler.type("TEST"),data,1,data.length - 2);    DdmServer.sendChunk(testChunk);  }}  }
class C{  protected void removeAllCurrentDownloads(){  Log.i(LOG_TAG,"Removing all current registered downloads...");  Cursor cursor=mDownloadManager.query(new Query());  try {    if (cursor.moveToFirst()) {      do {        int index=cursor.getColumnIndex(DownloadManager.COLUMN_ID);        long downloadId=cursor.getLong(index);        mDownloadManager.remove(downloadId);      } while (cursor.moveToNext());    }  }  finally {    cursor.close();  }}  }
class C{  private static void parseCopyFields(ParseContext context,FieldMapper fieldMapper,List<String> copyToFields) throws IOException {  if (!context.isWithinCopyTo() && copyToFields.isEmpty() == false) {    context=context.createCopyToContext();    for (    String field : copyToFields) {      ParseContext.Document targetDoc=null;      for (ParseContext.Document doc=context.doc(); doc != null; doc=doc.getParent()) {        if (field.startsWith(doc.getPrefix())) {          targetDoc=doc;          break;        }      }      assert targetDoc != null;      final ParseContext copyToContext;      if (targetDoc == context.doc()) {        copyToContext=context;      } else {        copyToContext=context.switchDoc(targetDoc);      }      parseCopy(field,copyToContext);    }  }}  }
class C{  private void validateTombstone(){  Collection entries=((LocalRegion)region).entries.regionEntries();  if (entries.size() != 1) {    fail("expected size to be 1 but is " + entries.size());  }  RegionEntry entry=(RegionEntry)entries.iterator().next();  DiskId id=((DiskEntry)entry).getDiskId();  Object obj=((LocalRegion)region).getDiskRegion().get(id);  assertEquals(Token.TOMBSTONE,obj);}  }
class C{  private StatusLine readStatusLine(WebSocketInputStream input) throws WebSocketException {  String line;  try {    line=input.readLine();  } catch (  IOException e) {    throw new WebSocketException(WebSocketError.OPENING_HANDSHAKE_RESPONSE_FAILURE,"Failed to read an opening handshake response from the server: " + e.getMessage(),e);  }  if (line == null || line.length() == 0) {    throw new WebSocketException(WebSocketError.STATUS_LINE_EMPTY,"The status line of the opening handshake response is empty.");  }  try {    return new StatusLine(line);  } catch (  Exception e) {    throw new WebSocketException(WebSocketError.STATUS_LINE_BAD_FORMAT,"The status line of the opening handshake response is badly formatted. The status line is: " + line);  }}  }
class C{  public boolean containsSet(TupleSet set){  return m_sets.contains(set);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected static Map<String,String> parseMap(String body){  Map<String,String> map=new HashMap<>();  StringTokenizer st=new StringTokenizer(body," \n\t");  while (st.hasMoreTokens()) {    String a=st.nextToken();    int idx=a.indexOf('=');    if (idx > 0) {      String k=a.substring(0,idx);      String v=a.substring(idx + 1);      map.put(k,v);    } else {      map.put(a,a);    }  }  return map;}  }
class C{  public void onLoaded(){  if (!addedToEnet && !FMLCommonHandler.instance().getEffectiveSide().isClient() && Info.isIc2Available()) {    worldObj=parent.getWorldObj();    xCoord=parent.xCoord;    yCoord=parent.yCoord;    zCoord=parent.zCoord;    MinecraftForge.EVENT_BUS.post(new EnergyTileLoadEvent(this));    addedToEnet=true;  }}  }
class C{  public double mean(){  if (source != null) {    return source.mean();  } else {    throw new IllegalArgumentException("Distribution is null");  }}  }
class C{  void postValueChangeEvent(ASTNode node,SimplePropertyDescriptor property){}  }
class C{  public float readFloat(){  return Float.intBitsToFloat(readInt());}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void insertLocal(int index,int tag,int classInfo) throws BadBytecode {  byte[] data=new InsertLocal(this.get(),index,tag,classInfo).doit();  this.set(data);}  }
class C{  private static void decreaseToMaxZoom(final Graph2DView view){  if (view.getZoom() > MAX_ZOOM) {    view.setZoom(MAX_ZOOM);  }}  }
class C{  public void addReceivingAddressOfKey(Address receivingAddress){  if (receivingAddress == null) {    return;  }  if (!containsReceivingAddress(receivingAddress.toString())) {    receivingAddresses.add(new WalletAddressBookData("",receivingAddress.toString()));  }}  }
class C{  public static ZkNodeProps load(byte[] bytes){  Map<String,Object> props=(Map<String,Object>)Utils.fromJSON(bytes);  return new ZkNodeProps(props);}  }
class C{  public Object clone() throws CloneNotSupportedException {  ExceptionTable r=(ExceptionTable)super.clone();  r.entries=new ArrayList(entries);  return r;}  }
class C{  @Override public boolean supportsNamedParameters(){  debugCodeCall("supportsNamedParameters");  return false;}  }
class C{  public boolean isPreferredConnection(String identifier){  return preferredConnections.contains(identifier);}  }
class C{  public void elementDecl(String arg0,String arg1) throws SAXException {  if (m_firstTagNotEmitted) {    emitFirstTag();  }  m_handler.elementDecl(arg0,arg1);}  }
class C{  public void actionPerformed(ActionEvent e){  if (frame == null) {    frame=new apps.AppsLaunchFrame(new DecoderProPane(),"DecoderPro");  }  frame.setVisible(true);}  }
class C{  public Preference inflate(int resource,@Nullable PreferenceGroup root){  XmlResourceParser parser=getContext().getResources().getXml(resource);  try {    return inflate(parser,root);  }  finally {    parser.close();  }}  }
class C{  public String toString(){  return "" + diagonal + row;}  }
class C{  public static JobDataMap createJobData(ActorSelection actor,Object message){  JobDataMap data=new JobDataMap();  data.put(KEY_ACTOR,actor);  data.put(KEY_MESSAGE,message);  return data;}  }
class C{  private void handleGenericException(Exception ex){  AppLogger.getLogger().ErrorException("Error in Dolby Processing",ex);}  }
class C{  public LinearLocation(LinearLocation loc){  this.componentIndex=loc.componentIndex;  this.segmentIndex=loc.segmentIndex;  this.segmentFraction=loc.segmentFraction;}  }
class C{  public void recordInvalidClassName(String name){}  }
class C{  @Override public boolean isInside(Point point){  return movePoly.contains(point.x - bounds.x,point.y - bounds.y);}  }
class C{  public boolean isLoggedIn(){  return (this.account != null && this.password != null && this.remotegreeting != null);}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  @Provides @Config("brdaLockTimeout") public static Duration provideBrdaLockTimeout(){  return Duration.standardHours(5);}  }
class C{  public CLIOutputResponse propdel(final PropertyDeleteRequest request) throws IOException, ServerException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  addDepth(uArgs,request.getDepth().getValue());  uArgs.add("propdel");  uArgs.add(request.getName());  final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(request.getPath()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public boolean isRecovered(){  return recovered;}  }
class C{  private void fetchDocumentEnd(){  fetchDocumentIndicator(false);}  }
class C{  public OrganizationAuthoritiesException(String message){  super(message);}  }
class C{  public static <T>T[] each(T[] self,@ClosureParams(FirstParam.Component.class) Closure closure){  for (  T item : self) {    closure.call(item);  }  return self;}  }
class C{  @Override public boolean equals(final Object obj2){  if (obj2 instanceof Token) {    final Token tok2=(Token)obj2;    if (this.value.getClass() != tok2.value.getClass()) {      return false;    }    if (this.count != tok2.count) {      return false;    }    if (this.value instanceof StringBuilder) {      return this.value.toString().equals(tok2.value.toString());    } else     if (this.value instanceof Number) {      return this.value.equals(tok2.value);    } else {      return this.value == tok2.value;    }  }  return false;}  }
class C{  public Instance convertInstance(Instance x){  int L=x.classIndex();  Instance x_=(Instance)x.copy();  x_.setDataset(null);  for (int i=0; i < L; i++)   x_.deleteAttributeAt(0);  x_.insertAttributeAt(0);  x_.setDataset(m_InstancesTemplate);  return x_;}  }
class C{  protected void initMaxPings(){  String maxPingsParam=getInitParameter("maxPings");  setMaxPings((maxPingsParam == null) ? DEFAULT_MAX_PINGS : Integer.parseInt(maxPingsParam));  if (isDebug()) {    log("maxPings: " + getMaxPings());  }}  }
class C{  public static Object[] unwrapBinariesInArray(Object[] arr){  Object[] res=new Object[arr.length];  for (int i=0; i < arr.length; i++)   res[i]=unwrapBinary(arr[i]);  return res;}  }
class C{  public void disposeFacet(){}  }
class C{  public CharSequence formatCsv(){  final StringBuilder csv=new StringBuilder(256);  addCsvHeader(csv);  csv.append('"');  if (msg != null)   csv.append(msg.replace(';','-').replace(',','-').replace('"','\''));  csv.append('"');  csv.append('\n');  if (cause != null) {    addCsvHeader(csv);    csv.append('"');    addException(csv,cause);    csv.append('"');    csv.append('\n');  }  return csv.toString();}  }
class C{  public final boolean equals(Object obj){  return ((CharKey)obj).m_char == m_char;}  }
class C{  public boolean isTraced(){  return (reference && !isUntraced()) || madeTraced;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  @LogMessageDoc(level="ERROR",message="Unexpected action '{action}', '{subaction}'",explanation="A static flow entry contained an invalid action",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public static void fromString(OFFlowMod.Builder fmb,String bigString,Logger log){  List<OFAction> actions=new LinkedList<OFAction>();  if (bigString != null && !bigString.trim().isEmpty()) {    bigString=bigString.toLowerCase();    String[] bigStringSplit=bigString.split(",");    String[] tmp;    ArrayDeque<String[]> actionToDecode=new ArrayDeque<String[]>();    for (int i=0; i < bigStringSplit.length; i++) {      tmp=bigStringSplit[i].split("=");      if (tmp.length != 2) {        log.debug("Token " + bigStringSplit[i] + " does not have form 'key=value' parsing "+ bigString);      }      actionToDecode.add(tmp);    }    while (!actionToDecode.isEmpty()) {      String[] keyPair=actionToDecode.pollFirst();      String key;      String pair;      if (keyPair.length != 2) {        log.debug("[Key, Value] {} does not have form 'key=value' parsing, which is okay for some actions e.g. 'pop_vlan'.",keyPair);        key=keyPair[0];        pair="";      } else {        key=keyPair[0];        pair=keyPair[1];      }      OFAction a=null;      try {switch (key) {case STR_OUTPUT:          a=decode_output(pair,fmb.getVersion(),log);        break;case STR_ENQUEUE:      a=decode_enqueue(pair,fmb.getVersion(),log);    break;case STR_DL_SRC_SET:  a=decode_set_src_mac(pair,fmb.getVersion(),log);break;case STR_DL_DST_SET:a=decode_set_dst_mac(pair,fmb.getVersion(),log);break;case STR_EXPERIMENTER:log.error("OFAction EXPERIMENTER not implemented.");break;case STR_FIELD_SET:String[] actionData=pair.split(MatchUtils.SET_FIELD_DELIM);if (actionData.length != 2) {throw new IllegalArgumentException("[Action, Data] " + keyPair + " does not have form 'action=data'"+ actionData);}switch (actionData[0]) {case MatchUtils.STR_ARP_OPCODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpOp().setValue(ArpOpcode.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpOp().setValue(ArpOpcode.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_ARP_SHA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpSha().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_DHA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpTha().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_SPA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpSpa().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_DPA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpTpa().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_SSL:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdSll().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_TTL:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdTll().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_TARGET:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdTarget().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthType().setValue(EthType.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthType().setValue(EthType.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_DL_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthSrc().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthDst().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_VLAN:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanVid().setValue(OFVlanVidMatch.ofVlan(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanVid().setValue(OFVlanVidMatch.ofVlan(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_DL_VLAN_PCP:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanPcp().setValue(VlanPcp.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanPcp().setValue(VlanPcp.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMP_CODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Code().setValue(ICMPv4Code.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Code().setValue(ICMPv4Code.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMP_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Type().setValue(ICMPv4Type.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Type().setValue(ICMPv4Type.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMPV6_CODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Code().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Code().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMPV6_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Type().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Type().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_PROTO:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpProto().setValue(IpProtocol.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpProto().setValue(IpProtocol.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv4Src().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_NW_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv4Dst().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Src().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Dst().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_FLOW_LABEL:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Flabel().setValue(IPv6FlowLabel.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Flabel().setValue(IPv6FlowLabel.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_ECN:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpEcn().setValue(IpEcn.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpEcn().setValue(IpEcn.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_DSCP:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpDscp().setValue(IpDscp.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpDscp().setValue(IpDscp.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_SCTP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildSctpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_SCTP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildSctpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_TCP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildTcpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_TCP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildTcpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_UDP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildUdpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_UDP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildUdpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_MPLS_LABEL:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsLabel().setValue(U32.of(Long.parseLong(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsLabel().setValue(U32.of(Long.parseLong(actionData[1]))).build()).build();}break;case MatchUtils.STR_MPLS_TC:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsTc().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsTc().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_MPLS_BOS:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsBos().setValue(OFBooleanValue.of(Boolean.parseBoolean(actionData[1]))).build()).build();break;case MatchUtils.STR_METADATA:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMetadata().setValue(OFMetadata.of(U64.of(Long.parseLong(actionData[1].replaceFirst("0x",""),16)))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMetadata().setValue(OFMetadata.of(U64.of(Long.parseLong(actionData[1])))).build()).build();}break;default :log.error("UNEXPECTED OF1.3 SET-FIELD '{}'",actionData);break;}break;case STR_GROUP:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildGroup().setGroup(OFGroup.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildGroup().setGroup(OFGroup.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_LABEL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsLabel().setMplsLabel(Long.parseLong(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsLabel().setMplsLabel(Long.parseLong(pair)).build();}break;case STR_MPLS_POP:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPopMpls().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPopMpls().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushMpls().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushMpls().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_TC_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTc().setMplsTc(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTc().setMplsTc(Short.parseShort(pair)).build();}break;case STR_MPLS_TTL_DEC:a=OFFactories.getFactory(fmb.getVersion()).actions().decMplsTtl();break;case STR_MPLS_TTL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTtl().setMplsTtl(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTtl().setMplsTtl(Short.parseShort(pair)).build();}break;case STR_NW_TOS_SET:a=decode_set_tos_bits(pair,fmb.getVersion(),log);break;case STR_NW_SRC_SET:a=decode_set_src_ip(pair,fmb.getVersion(),log);break;case STR_NW_DST_SET:a=decode_set_dst_ip(pair,fmb.getVersion(),log);break;case STR_NW_ECN_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwEcn().setNwEcn(IpEcn.of(Byte.parseByte(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwEcn().setNwEcn(IpEcn.of(Byte.parseByte(pair))).build();}break;case STR_NW_TTL_DEC:a=OFFactories.getFactory(fmb.getVersion()).actions().decNwTtl();break;case STR_NW_TTL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwTtl().setNwTtl(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwTtl().setNwTtl(Short.parseShort(pair)).build();}break;case STR_PBB_POP:a=OFFactories.getFactory(fmb.getVersion()).actions().popPbb();break;case STR_PBB_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushPbb().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushPbb().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_QUEUE_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetQueue().setQueueId(Long.parseLong(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetQueue().setQueueId(Long.parseLong(pair)).build();}break;case STR_TP_SRC_SET:a=decode_set_src_port(pair,fmb.getVersion(),log);break;case STR_TP_DST_SET:a=decode_set_dst_port(pair,fmb.getVersion(),log);break;case STR_TTL_IN_COPY:a=OFFactories.getFactory(fmb.getVersion()).actions().copyTtlIn();break;case STR_TTL_OUT_COPY:a=OFFactories.getFactory(fmb.getVersion()).actions().copyTtlOut();break;case STR_VLAN_POP:a=OFFactories.getFactory(fmb.getVersion()).actions().popVlan();break;case STR_VLAN_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushVlan().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushVlan().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_VLAN_STRIP:a=OFFactories.getFactory(fmb.getVersion()).actions().stripVlan();break;case STR_VLAN_SET_VID:a=decode_set_vlan_id(pair,fmb.getVersion(),log);break;case STR_VLAN_SET_PCP:a=decode_set_vlan_priority(pair,fmb.getVersion(),log);break;default :log.error("UNEXPECTED ACTION KEY '{}'",keyPair);break;}} catch (Exception e) {log.error("Illegal Action: " + e.getMessage());}if (a != null) {actions.add(a);}}log.debug("actions: {}",actions);fmb.setActions(actions);} else {log.debug("actions not found --> drop");}return;}  }
class C{  @Override protected void doStart(){  try {    String build=_configuration.getValue(SystemConfiguration.Property.BUILD);    String version=_configuration.getValue(SystemConfiguration.Property.VERSION);    String year=new SimpleDateFormat("yyyy").format(new Date());    _log.info("Argus version {} build {}.",version,build);    _log.info("Copyright Salesforce.com, {}.",year);    _log.info("{} started.",getName());    _persistService.start();    _serviceFactory.getUserService().findAdminUser();    _serviceFactory.getUserService().findDefaultUser();  } catch (  Exception ex) {    _log.error(getName() + " startup aborted.",ex);  } finally {    _mergeServiceConfiguration();    _mergeNotifierConfiguration();    _log.info(_configuration.toString());  }}  }
class C{  public static Tree pennString2Tree(String pennString){  TreeReader tr=null;  try {    tr=new PennTreeReader(new StringReader(pennString),new LabeledScoredTreeFactory());    return tr.readTree();  } catch (  IOException e) {    throw new IllegalStateException(e);  } finally {    closeQuietly(tr);  }}  }
class C{  public static boolean parseCacheFlags(int cacheFlagsBits){  if (cacheFlagsBits == 0)   return false;  if ((cacheFlagsBits & 1) != 0)   return true;  return false;}  }
class C{  public Phaser(int parties){  this(null,parties);}  }
class C{  public void testSetReceiveWindowSize(){  PseudoTcpTestRecvWindow test=new PseudoTcpTestRecvWindow();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setOptNagling(false);  test.setOptAckDelay(0);  int wndSize=300000;  if (!test.getLocalTcp().m_support_wnd_scale || !test.getRemoteTcp().m_support_wnd_scale) {    wndSize=65535;  }  test.setLocalOptSndBuf(wndSize);  test.setRemoteOptRcvBuf(wndSize);  int wndScale=test.getRemoteScaleFactor();  test.doTestTransfer(1024 * 3000);  assert (wndSize - test.estimateReceiveWindowSize() <= PseudoTcpTestRecvWindow.getShadowedBytes(wndScale));}  }
class C{  public VcfEvalParamsBuilder sortOrder(final RocSortOrder sortOrder){  mSortOrder=sortOrder;  return self();}  }
class C{  private void updateGui(){  final IDebugger debugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  final TargetProcessThread thread=debugger == null ? null : debugger.getProcessManager().getActiveThread();  final boolean connected=debugger != null && debugger.isConnected();  final boolean suspended=connected && thread != null;  m_hexView.setEnabled(connected && suspended && m_provider.getDataLength() != 0);  if (connected) {    m_hexView.setDefinitionStatus(DefinitionStatus.DEFINED);  } else {    m_provider.setMemorySize(0);    m_hexView.setBaseAddress(0);    m_hexView.uncolorizeAll();  }}  }
class C{  protected UnitFakeDefinitionImpl(){  super();}  }
class C{  @ObjectiveCName("isNotificationSoundEnabled") public boolean isNotificationSoundEnabled(){  return modules.getSettingsModule().isNotificationSoundEnabled();}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public RightmostEdgeFinder(){}  }
class C{  void loginStoredProcedureInsecure() throws Exception {  System.out.println("Insecure Systems Inc. - login using a stored procedure");  stat.execute("CREATE ALIAS IF NOT EXISTS " + "GET_USER FOR \"org.h2.samples.SQLInjection.getUser\"");  stat.execute("CREATE ALIAS IF NOT EXISTS " + "CHANGE_PASSWORD FOR \"org.h2.samples.SQLInjection.changePassword\"");  String name=input("Name?");  String password=input("Password?");  ResultSet rs=stat.executeQuery("CALL GET_USER('" + name + "', '"+ password+ "')");  if (rs.next()) {    System.out.println("Welcome!");  } else {    System.out.println("Access denied!");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  Node entElementContent;  int nodeType;  Node entReference;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(3,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).deleteData(1,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  protected void clearEvents(){}  }
class C{  private void scaleBitmaps(Bitmap[] bitmaps,float scale){  for (int i=0; i < bitmaps.length; i++) {    bitmaps[i]=scaleBitmap(bitmaps[i],scale);  }}  }
class C{  public static void I2OSP(int input,byte[] output,int outOff){  output[outOff++]=(byte)(input >>> 24);  output[outOff++]=(byte)(input >>> 16);  output[outOff++]=(byte)(input >>> 8);  output[outOff]=(byte)input;}  }
class C{  private void readObject(){}  }
class C{  public static IOCase forName(String name){  if (IOCase.SENSITIVE.name.equals(name)) {    return IOCase.SENSITIVE;  }  if (IOCase.INSENSITIVE.name.equals(name)) {    return IOCase.INSENSITIVE;  }  if (IOCase.SYSTEM.name.equals(name)) {    return IOCase.SYSTEM;  }  throw new IllegalArgumentException("Invalid IOCase name: " + name);}  }
class C{  private AnimatedDrawableBackend createAnimatedDrawableBackendMock(final int frameCount){  final AnimatedDrawableBackend mockAnimatedDrawableBackend=mock(AnimatedDrawableBackend.class);  when(mockAnimatedDrawableBackend.getFrameCount()).thenReturn(frameCount);  when(mockAnimatedDrawableBackend.getWidth()).thenReturn(50);  when(mockAnimatedDrawableBackend.getHeight()).thenReturn(50);  return mockAnimatedDrawableBackend;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.724 -0400",hash_original_method="EE7B6AEF92F692D4A87236D2AC2DCE66",hash_generated_method="445E4E5DC875A6B05A93A51D5ABD46F3") public final boolean isTraceEnabled(){  return false;}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  public int hashCode(){  return name.toUpperCase(Locale.ENGLISH).hashCode();}  }
class C{  public double[] raw(){  double copy[]=new double[dimensionality];  System.arraycopy(values,0,copy,0,dimensionality);  return copy;}  }
class C{  public int size(){  return members.size();}  }
class C{  public static <T>LazyPBagX<T> fromStreamS(Stream<T> stream){  return new LazyPBagX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  public static String decrypt(String encrypted) throws GeneralSecurityException {  return new String(decrypt(encrypted.getBytes()));}  }
class C{  public UndoManager(){  super();  indexOfNextAdd=0;  limit=100;  edits.ensureCapacity(limit);}  }
class C{  public static Status delegated(){  return create(DELEGATED);}  }
class C{  @Nullable private static Pair<ASTNode,ASTNode> parseConditionalCommentBoundaries(@NotNull PsiElement host){  if (!(host instanceof XmlComment)) {    return null;  }  final ASTNode comment=host.getNode();  if (comment == null) {    return null;  }  final ASTNode conditionalStart=comment.findChildByType(TokenSet.create(XmlTokenType.XML_CONDITIONAL_COMMENT_START_END));  if (conditionalStart == null) {    return null;  }  final ASTNode conditionalEnd=comment.findChildByType(TokenSet.create(XmlTokenType.XML_CONDITIONAL_COMMENT_END_START));  if (conditionalEnd == null) {    return null;  }  final ASTNode endOfEnd=comment.findChildByType(TokenSet.create(XmlTokenType.XML_CONDITIONAL_COMMENT_END));  return endOfEnd == null ? null : Pair.create(conditionalStart,conditionalEnd);}  }
class C{  public boolean checkUsernameExists(String username) throws DataAccessException {  return getUserInfo(username) != null;}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  public boolean isMultipleInstances(){  return true;}  }
class C{  public static SeparableInfoCalculatorDiscrete newInstance(int base,int history,int numInfoContributors){  if (history < 1) {    throw new RuntimeException("This class does not currently " + "function with k < 1 (see ConditionalTransferEntropyCalculator " + "for how to implement this)");  }  if (!FORCE_DIRECT_CALC && (MathsUtils.power(base,numInfoContributors + history + 1) > MAX_CONFIGS_FOR_DIRECT_CALC)) {    return new SeparableInfoCalculatorDiscreteByAddition(base,history,numInfoContributors);  } else {    return new SeparableInfoCalculatorDiscrete(base,history,numInfoContributors);  }}  }
class C{  public NBTTagStringList(){  this(new NBTTagList());}  }
class C{  public void curveTo(Object x1,Object y1,Object x2,Object y2,Object x3,Object y3){  if (size() == 0 || get(size() - 1).type == SegType.CLOSE) {    throw new IllegalPathStateException("curveTo is only allowed when a path segment is open");  }  add(new Segment(SegType.CURVETO,x1,y1,x2,y2,x3,y3));}  }
class C{  private static boolean containsAddress(final INaviViewNode node,final UnrelocatedAddress address){  return (node instanceof INaviCodeNode && CCodeNodeHelpers.containsAddress((INaviCodeNode)node,address.getAddress())) || (node instanceof INaviFunctionNode && ((INaviFunctionNode)node).getFunction().getAddress().equals(address.getAddress()));}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public static EWMA fiveMinuteEWMA(){  return new EWMA(M5_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  public ArrayUtilException(String message){  super(message);}  }
class C{  private void addPoint(int distanceFromLastPoint){  assert distanceFromLastPoint >= 0;  Integer count=mPointDifferences.get(distanceFromLastPoint);  if (count == null) {    count=0;  }  mPointDifferences.put(distanceFromLastPoint,count + 1);  mPoints++;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_DEFINITION___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.ASSOCIATION_CLASS_DEFINITION___ASSOCIATION_CLASS_CONTENT_1:getAssociationClassContent_1().clear();getAssociationClassContent_1().addAll((Collection<? extends AssociationClassContent_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static short opaque(short value){  return value;}  }
class C{  @WorkerThread public static Path parsePath(String dAttributeOfPath) throws Exception {  int n=dAttributeOfPath.length();  ParserHelper helper=new ParserHelper(dAttributeOfPath,0);  helper.skipWhitespace();  Path path=new Path();  float lastX=0;  float lastY=0;  float lastX1=0;  float lastY1=0;  float subPathStartX=0;  float subPathStartY=0;  char prevCmd=0;  while (helper.getPosition() < n) {    char cmd=dAttributeOfPath.charAt(helper.getPosition());switch (cmd) {case '-':case '+':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      if (prevCmd == 'm' || prevCmd == 'M') {        cmd=(char)(((int)prevCmd) - 1);        break;      } else       if (prevCmd == 'c' || prevCmd == 'C') {        cmd=prevCmd;        break;      } else       if (prevCmd == 'l' || prevCmd == 'L') {        cmd=prevCmd;        break;      }default :{      helper.advance();      prevCmd=cmd;    }}boolean wasCurve=false;switch (cmd) {case 'M':case 'm':{    float x=helper.nextFloat();    float y=helper.nextFloat();    Log.d(null,String.format("move to: [%s,%s]",x,y));    if (cmd == 'm') {      subPathStartX+=x;      subPathStartY+=y;      path.rMoveTo(x,y);      lastX+=x;      lastY+=y;    } else {      subPathStartX=x;      subPathStartY=y;      path.moveTo(x,y);      lastX=x;      lastY=y;    }    break;  }case 'Z':case 'z':{  Log.d(null,String.format("close, move to: [%s,%s]",subPathStartX,subPathStartY));  path.close();  path.moveTo(subPathStartX,subPathStartY);  lastX=subPathStartX;  lastY=subPathStartY;  lastX1=subPathStartX;  lastY1=subPathStartY;  wasCurve=true;  break;}case 'L':case 'l':{float x=helper.nextFloat();float y=helper.nextFloat();Log.d(null,String.format("line to: [%s,%s]",x,y));if (cmd == 'l') {  path.rLineTo(x,y);  lastX+=x;  lastY+=y;} else {  path.lineTo(x,y);  lastX=x;  lastY=y;}break;}case 'H':case 'h':{float x=helper.nextFloat();Log.d(null,String.format("horizontal line to: [%s]",x));if (cmd == 'h') {path.rLineTo(x,0);lastX+=x;} else {path.lineTo(x,lastY);lastX=x;}break;}case 'V':case 'v':{float y=helper.nextFloat();Log.d(null,String.format("vertical line to: [%s]",y));if (cmd == 'v') {path.rLineTo(0,y);lastY+=y;} else {path.lineTo(lastX,y);lastY=y;}break;}case 'C':case 'c':{wasCurve=true;float x1=helper.nextFloat();float y1=helper.nextFloat();float x2=helper.nextFloat();float y2=helper.nextFloat();float x=helper.nextFloat();float y=helper.nextFloat();Log.d(null,String.format("cubic to: [%s,%s][%s,%s][%s,%s]",x1,y1,x2,y2,x,y));if (cmd == 'c') {x1+=lastX;x2+=lastX;x+=lastX;y1+=lastY;y2+=lastY;y+=lastY;}path.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'S':case 's':{wasCurve=true;float x2=helper.nextFloat();float y2=helper.nextFloat();float x=helper.nextFloat();float y=helper.nextFloat();Log.d(null,String.format("cubic to: [%s,%s][%s,%s]",x2,y2,x,y));if (cmd == 's') {x2+=lastX;x+=lastX;y2+=lastY;y+=lastY;}float x1=2 * lastX - lastX1;float y1=2 * lastY - lastY1;path.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'A':case 'a':{float rx=helper.nextFloat();float ry=helper.nextFloat();float theta=helper.nextFloat();int largeArc=(int)helper.nextFloat();int sweepArc=(int)helper.nextFloat();float x=helper.nextFloat();float y=helper.nextFloat();Log.d(null,String.format("arc to: [%s,%s][%s][%s,%s][%s,%s]",rx,ry,theta,largeArc,sweepArc,x,y));drawArc(path,lastX,lastY,x,y,rx,ry,theta,largeArc,sweepArc);lastX=x;lastY=y;break;}}if (!wasCurve) {lastX1=lastX;lastY1=lastY;}helper.skipWhitespace();}return path;}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  Instances train=e.getTrainingSet();  DataSetEvent d=new DataSetEvent(this,train);  acceptDataSet(d);}  }
class C{  public void parseAndFillModel(EIPModel model) throws Exception {  Document document=parseRouteFile();  Element root=document.getDocumentElement();  if (!"beans".equals(root.getLocalName()) || !SPRING_BEANS_NS.equals(root.getNamespaceURI())) {    throw new IllegalArgumentException("Given routeFile seems not to be a valid Spring context file");  }  Route route=EipFactory.eINSTANCE.createRoute();  route.setName(routeFile.getName().substring(0,routeFile.getName().lastIndexOf('.')));  model.getOwnedRoutes().add(route);  NodeList channels=root.getElementsByTagNameNS(SPRING_INT_NS,"channel");  for (int i=0; i < channels.getLength(); i++) {    Node channelNode=channels.item(i);    route.getOwnedChannels().add(createChannel(channelNode));  }  channels=root.getElementsByTagNameNS(SPRING_INT_NS,"publish-subscribe-channel");  for (int i=0; i < channels.getLength(); i++) {    Node channelNode=channels.item(i);    createPubSubChannels(route,channelNode);  }  NodeList children=root.getChildNodes();  parseAndFillEndpoints(children,route.getOwnedEndpoints());}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static int hash(byte[] data,int seed){  return hash(ByteBuffer.wrap(data),seed);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.TRY_STATEMENT__BLOCK:    return block != null;case N4JSPackage.TRY_STATEMENT__CATCH:  return catch_ != null;case N4JSPackage.TRY_STATEMENT__FINALLY:return finally_ != null;}return super.eIsSet(featureID);}  }
class C{  public Game(Team home,Team away){  homeTeam=home;  awayTeam=away;  numOT=0;  homeTOs=0;  awayTOs=0;  gameName="";  homeScore=0;  homeQScore=new int[10];  awayScore=0;  awayQScore=new int[10];  HomeQBStats=new int[6];  AwayQBStats=new int[6];  HomeRB1Stats=new int[4];  HomeRB2Stats=new int[4];  AwayRB1Stats=new int[4];  AwayRB2Stats=new int[4];  HomeWR1Stats=new int[6];  HomeWR2Stats=new int[6];  HomeWR3Stats=new int[6];  AwayWR1Stats=new int[6];  AwayWR2Stats=new int[6];  AwayWR3Stats=new int[6];  HomeKStats=new int[6];  AwayKStats=new int[6];  hasPlayed=false;}  }
class C{  private void insertionSort(final double dist,final int id){  if (size == dists.length) {    grow();  }  int pos=size;  while (pos > 0) {    final int pre=pos - 1;    final double predist=dists[pre];    if (predist <= dist) {      break;    }    dists[pos]=predist;    ids[pos]=ids[pre];    pos=pre;  }  dists[pos]=dist;  ids[pos]=id;  ++size;  if (size > k && dists[k] > dists[k - 1]) {    size=k;  }  return;}  }
class C{  private List<JdbcStatement> executeStatements(List<JdbcStatement> requestJdbcStatements,DataSource dataSource,Map<String,Object> variables){  List<JdbcStatement> responseJdbcStatements=new ArrayList<>();  for (  JdbcStatement requestJdbcStatement : requestJdbcStatements) {    JdbcStatement responseJdbcStatement=createDefaultResponseJdbcStatement(requestJdbcStatement);    responseJdbcStatements.add(responseJdbcStatement);  }  JdbcTemplate jdbcTemplate=new JdbcTemplate(dataSource);  for (int i=0; i < responseJdbcStatements.size(); i++) {    JdbcStatement jdbcStatement=responseJdbcStatements.get(i);    executeStatement(jdbcTemplate,jdbcStatement,variables,i);    if (JdbcStatementStatus.ERROR.equals(jdbcStatement.getStatus()) && !Boolean.TRUE.equals(jdbcStatement.isContinueOnError())) {      break;    }  }  return responseJdbcStatements;}  }
class C{  public static Boolean userIsAllowedToConfigure(String portalPageId,Map<String,Object> context){  Boolean userIsAllowed=false;  if (UtilValidate.isNotEmpty(portalPageId)) {    GenericValue userLogin=(GenericValue)context.get("userLogin");    if (UtilValidate.isNotEmpty(userLogin)) {      String userLoginId=(String)userLogin.get("userLoginId");      Security security=(Security)context.get("security");      Boolean hasPortalAdminPermission=security.hasPermission("PORTALPAGE_ADMIN",userLogin);      try {        Delegator delegator=WidgetWorker.getDelegator(context);        GenericValue portalPage=EntityQuery.use(delegator).from("PortalPage").where("portalPageId",portalPageId).queryOne();        if (UtilValidate.isNotEmpty(portalPage)) {          String ownerUserLoginId=(String)portalPage.get("ownerUserLoginId");          userIsAllowed=(ownerUserLoginId.equals(userLoginId) || hasPortalAdminPermission);        }      } catch (      GenericEntityException e) {        return false;      }    }  }  return userIsAllowed;}  }
class C{  protected void unconfigureEditor(){  if (focusListener != null) {    editor.removeFocusListener(focusListener);  }  editor.removePropertyChangeListener(propertyChangeListener);  editor.removeFocusListener(getHandler());  comboBox.getEditor().removeActionListener(getHandler());}  }
class C{  public NodeCollection(final Deserializer deserializer){  for (  final NodeStatus value : NODE_STATUSES) {    final String key=value.toString().toLowerCase();    this.statusNodesMap.get(value).addAll(deserializer.readObjectArray(key,null));  }}  }
class C{  public double value(){  return -a[m][m + n];}  }
class C{  private boolean override(){  return Bits.get(flags,OVERRIDE_BIT);}  }
class C{  public static void initExecutor(){  if (instance != null) {    if (instance.executor == null) {      logger.info("TestCaseExecutor instance is non-null, but its actual executor is null");      instance.executor=Executors.newSingleThreadExecutor(instance);    } else {      instance.executor=Executors.newSingleThreadExecutor(instance);    }  }}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  private int readAllComplexTypeChildrens(int dimensionOrdinal,int childCount,List<ColumnSchema> listOfColumns,CarbonDimension parentDimension){  for (int i=0; i < childCount; i++) {    ColumnSchema columnSchema=listOfColumns.get(dimensionOrdinal);    if (columnSchema.isDimensionColumn()) {      if (columnSchema.getNumberOfChild() > 0) {        CarbonDimension complexDimension=new CarbonDimension(columnSchema,dimensionOrdinal++,-1,-1,-1);        complexDimension.initializeChildDimensionsList(columnSchema.getNumberOfChild());        parentDimension.getListOfChildDimensions().add(complexDimension);        dimensionOrdinal=readAllComplexTypeChildrens(dimensionOrdinal,columnSchema.getNumberOfChild(),listOfColumns,complexDimension);      } else {        parentDimension.getListOfChildDimensions().add(new CarbonDimension(columnSchema,dimensionOrdinal++,-1,-1,-1));      }    }  }  return dimensionOrdinal;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.STATUS_SOURCE__PROPERTY:    setProperty((Property)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void init(Application application){  registerInfrastructure(application);  registerPages();}  }
class C{  public void testValueOfDocType22() throws Exception {  DocType docType=new DocType("web-app",WebXmlVersion.V2_2.getPublicId(),WebXmlVersion.V2_2.getSystemId());  assertEquals(WebXmlVersion.V2_2,WebXmlVersion.valueOf(docType));}  }
class C{  public boolean isReplication(){  return shards != null && shards.length > 1;}  }
class C{  public Node item(int index){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  @Override public void cleanup(){  if (!mDir.exists()) {    return;  }  for (  String s : mDir.list()) {    new File(mDir,s).delete();  }}  }
class C{  @SafeVarargs public final FastAdapterDialog<Item> add(int position,Item... items){  mFastItemAdapter.add(position,items);  return this;}  }
class C{  public int length(){  return builder.length();}  }
class C{  public ToStringBuilder append(String fieldName,float[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public static boolean isSessionUri(Uri uri){  return uri.getScheme().equals(CAMERA_SESSION_SCHEME);}  }
class C{  public static Proposition constructConjunction(Proposition[] props){  return constructConjunction(props,0);}  }
class C{  public Map<String,Object> finalizeOrderEntryShip(int shipGroupIndex,String shippingContactMechId,String supplierPartyId){  Map<String,Object> result;  String errMsg=null;  if (UtilValidate.isNotEmpty(shippingContactMechId)) {    this.cart.setShippingContactMechId(shipGroupIndex,shippingContactMechId);    if (UtilValidate.isNotEmpty(supplierPartyId)) {      this.cart.setSupplierPartyId(shipGroupIndex,supplierPartyId);    }    result=ServiceUtil.returnSuccess();  } else {    errMsg=UtilProperties.getMessage(resource_error,"checkhelper.enter_shipping_address",(cart != null ? cart.getLocale() : Locale.getDefault()));    result=ServiceUtil.returnError(errMsg);  }  return result;}  }
class C{  @Override public String parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  return StringUtils.EMPTY;}  }
class C{  @NotNull public QueryBuilder appendPlaceholders(int count){  if (count <= 0)   throw new IllegalArgumentException("count must be positive, but was: " + count);  query.append('?');  for (int i=1; i < count; i++)   query.append(",?");  return this;}  }
class C{  private void orthes(){  final int low=0;  final int high=n - 1;  for (int m=low + 1; m <= high - 1; m++) {    double scale=0.0;    for (int i=m; i <= high; i++) {      scale=scale + Math.abs(H.$[H.addr.op(i,m - 1)]);    }    if (scale != 0.0) {      double h=0.0;      for (int i=high; i >= m; i--) {        ort[i]=H.$[H.addr.op(i,m - 1)] / scale;        h+=ort[i] * ort[i];      }      double g=Math.sqrt(h);      if (ort[m] > 0) {        g=-g;      }      h=h - ort[m] * g;      ort[m]=ort[m] - g;      for (int j=m; j < n; j++) {        double f=0.0;        for (int i=high; i >= m; i--) {          f+=ort[i] * H.$[H.addr.op(i,j)];        }        f=f / h;        for (int i=m; i <= high; i++) {          H.$[H.addr.op(i,j)]-=f * ort[i];        }      }      for (int i=0; i <= high; i++) {        double f=0.0;        for (int j=high; j >= m; j--) {          f+=ort[j] * H.$[H.addr.op(i,j)];        }        f=f / h;        for (int j=m; j <= high; j++) {          H.$[H.addr.op(i,j)]-=f * ort[j];        }      }      ort[m]=scale * ort[m];      H.$[H.addr.op(m,m - 1)]=scale * g;    }  }  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      V.$[V.addr.op(i,j)]=(i == j ? 1.0 : 0.0);    }  }  for (int m=high - 1; m >= low + 1; m--) {    if (H.$[H.addr.op(m,m - 1)] != 0.0) {      for (int i=m + 1; i <= high; i++) {        ort[i]=H.$[H.addr.op(i,m - 1)];      }      for (int j=m; j <= high; j++) {        double g=0.0;        for (int i=m; i <= high; i++) {          g+=ort[i] * V.$[V.addr.op(i,j)];        }        g=(g / ort[m]) / H.$[H.addr.op(m,m - 1)];        for (int i=m; i <= high; i++) {          V.$[V.addr.op(i,j)]+=g * ort[i];        }      }    }  }}  }
class C{  public FastFloatBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  public void addGetstatic(String c,String name,String type){  add(GETSTATIC);  int ci=constPool.addClassInfo(c);  addIndex(constPool.addFieldrefInfo(ci,name,type));  growStack(Descriptor.dataSize(type));}  }
class C{  public QuestSmallerThanCondition(final String questname,final int index,final int state,boolean acceptEmpty){  this.questname=checkNotNull(questname);  this.index=index;  this.state=state;  this.acceptEmpty=acceptEmpty;}  }
class C{  private void injectXMLComponent(ComponentBaseElement xmlElement,String compType,SootClass compClass,List<IntentFilter> intentFilterList,StmtBody body,Local appLocal){  if (!xmlElement.enabled)   return;  if (compClass != null) {    logger.info("Type {} ",compType);    String initSig=String.format("<%s: void <init>()>",compClass.getName());    SootClass componentParent=Hierarchy.getComponentParent(compClass);    if (componentParent == null) {      logger.warn("Could not locate parent for {}, could be external component",compClass);      return;    }    if (!compType.equals(Hierarchy.getComponentParent(compClass).getName())) {      logger.error("Malformed manifest: component {} defined in manifest as {} have defined parent {}",compClass,compType,Hierarchy.getComponentParent(compClass).getName());      return;    }    SootMethod compInit=null;    SootMethod initMethod=null;    if (Scene.v().containsMethod(initSig)) {      compInit=Scene.v().getMethod(initSig);    } else {      logger.info("Class {} does not have <init> function",compClass);    }    if (compInit != null) {      try {        initMethod=Scene.v().getActiveHierarchy().resolveConcreteDispatch(compClass,compInit);      } catch (      Exception ex) {        logger.warn("Cannot resolve constructor {}",compInit);      }    }    String name=String.format("_$ds__%s%03d",compType.substring(compType.lastIndexOf(".") + 1),LOCAL_COUNTER++);    Local compLocal=Jimple.v().newLocal(name,compClass.getType());    body.getLocals().add(compLocal);    Expr newAppExpr=Jimple.v().newNewExpr(compClass.getType());    body.getUnits().add(Jimple.v().newAssignStmt(compLocal,newAppExpr));    if (initMethod != null) {      Stmt initStmt=Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(compLocal,initMethod.makeRef()));      body.getUnits().add(initStmt);    }    SootField compField=new SootField(FIELD_PREFIX + localID++,compClass.getType(),Modifier.PUBLIC | Modifier.STATIC);    harnessClass.addField(compField);    body.getUnits().add(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(compField.makeRef()),compLocal));    globalsMap.put(compClass,compField);    injectIntentFilter(compLocal,intentFilterList,body,appLocal);    SootMethod droidsafeInit=Scene.v().getMethod(componentInitMethod.get(compType));    Stmt initStmt=Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(droidsafeInit.makeRef(),compLocal));    body.getUnits().add(initStmt);  }}  }
class C{  public long tryWriteLock(){  long s, next;  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : 0L);}  }
class C{  public void registerCFGs(){  int removed=getRawGraph().removeIsolatedNodes();  if (removed > 0)   logger.info("removed isolated nodes: " + removed + " in "+ methodName);  GraphPool.getInstance(classLoader).registerRawCFG(getRawGraph());  GraphPool.getInstance(classLoader).registerActualCFG(computeActualCFG());}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  default B addEffects(final Iterable<FireworkEffect> effects){  this.meta().addEffects(effects);  return this.getBuilder();}  }
class C{  public static ConstantNode forIntegerStamp(Stamp stamp,long value,StructuredGraph graph){  if (stamp instanceof IntegerStamp) {    IntegerStamp intStamp=(IntegerStamp)stamp;    return forIntegerBits(intStamp.getBits(),value,graph);  } else {    return forIntegerKind(stamp.getStackKind(),value,graph);  }}  }
class C{  @Override public boolean supportsANSI92IntermediateSQL(){  debugCodeCall("supportsANSI92IntermediateSQL");  return false;}  }
class C{  private void startTimer(){  Calendar now=Calendar.getInstance();  int timeToNext=TIME_SLICE - (now.get(Calendar.MINUTE) % TIME_SLICE);  SingletonRepository.getTurnNotifier().notifyInSeconds(Math.max(1,timeToNext * MathHelper.SECONDS_IN_ONE_MINUTE),this);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public void removeDecorator(final OperatorDrawDecorator decorator){  if (decorator == null) {    throw new IllegalArgumentException("decorator must not be null!");  }  operatorDecorators.remove(decorator);}  }
class C{  public static String doubleMatrixToString(double[][] matrix){  StringBuilder strBuilder=new StringBuilder("");  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[i].length; j++) {      strBuilder.append(Utils.round(matrix[i][j],2) + " ");    }    strBuilder.append("\n");  }  return strBuilder.toString();}  }
class C{  final public void disable_tracing(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Number atanh(Number a){  return FastMath.atanh(a.doubleValue());}  }
class C{  public void randomInit(){  do {    m_bits=new boolean[m_nNodes * m_nNodes];    for (int i=0; i < m_nNodes; i++) {      int iPos;      do {        iPos=m_random.nextInt(m_nNodes * m_nNodes);      } while (isSquare(iPos));      m_bits[iPos]=true;    }  } while (hasCycles());  calcScore();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:27.723 -0500",hash_original_method="CFD2CAFE811694E54D31D080F34F41AF",hash_generated_method="3BBF4E6B7528C23676F8E83FB2D106FC") public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port) throws SocketException {  try {    return IoBridge.connect(fd,inetAddress,port,0);  } catch (  SocketTimeoutException ex) {    throw new AssertionError(ex);  }}  }
class C{  public void removeAll(Collection<String> variables){  map.keySet().removeAll(variables);  cachedHash=0;}  }
class C{  public static PeriodType days(){  PeriodType type=cDays;  if (type == null) {    type=new PeriodType("Days",new DurationFieldType[]{DurationFieldType.days()},new int[]{-1,-1,-1,0,-1,-1,-1,-1});    cDays=type;  }  return type;}  }
class C{  private boolean enterBusy(){  return busyLock.readLock().tryLock();}  }
class C{  private Constraint createNewConstraint(String name) throws SQLException {  ResultSet rs=stmtdb2.executeQuery("select Constraint_Type, Table_Name," + "Search_Condition, R_Constraint_Name, Delete_Rule" + " from User_Constraints where Constraint_Name='" + name + "'");  String tableName="";  String constraintType="";  String condition="";  String rConstraintName="";  String deleteRule="";  String column="";  if (rs.next()) {    constraintType=rs.getString("Constraint_Type");    tableName=rs.getString("Table_Name");    condition=rs.getString("Search_Condition");    rConstraintName=rs.getString("R_Constraint_Name");    deleteRule=rs.getString("Delete_Rule");  }  rs.close();  if (constraintType.equals(Constraint.FOREIGN_KEY)) {    Constraint refConstraint=null;    rs=stmtdb2.executeQuery("select * from User_Cons_Columns where Constraint_Name='" + name + "'");    if (rs.next()) {      column=rs.getString("Column_Name");    }    rs.close();    rs=stmtdb2.executeQuery("select * from User_Cons_Columns where Constraint_Name='" + rConstraintName + "'");    if (rs.next()) {      String refColumn=rs.getString("Column_Name");      String refTableName=rs.getString("Table_Name");      refConstraint=new Constraint(rConstraintName,refTableName);      refConstraint.addColumnName(refColumn);      refConstraint.setDeleteRule(deleteRule);    }    rs.close();    Constraint c=new Constraint(name,tableName);    c.setType(Constraint.FOREIGN_KEY);    c.addColumnName(column);    c.setRConstraint(refConstraint);    c.addColumnName(column);    c.setDeleteRule(deleteRule);    return (c);  } else   if (constraintType.equals(Constraint.PRIMARY_KEY)) {    rs=stmtdb2.executeQuery("select * from User_Cons_Columns where Constraint_Name='" + name + "'");    Constraint c=new Constraint(name,tableName);    c.setType(Constraint.PRIMARY_KEY);    c.setDeleteRule(deleteRule);    while (rs.next()) {      c.addColumnName(rs.getString("Column_Name"));    }    rs.close();    return (c);  } else   if (constraintType.equals(Constraint.CHECK)) {    rs=stmtdb2.executeQuery("select * from User_Cons_Columns where Constraint_Name='" + name + "'");    if (rs.next()) {      column=rs.getString("Column_Name");    }    rs.close();    Constraint c=new Constraint(name,tableName);    c.setType(Constraint.CHECK);    c.addColumnName(column);    c.setCheckCondition(condition);    c.setDeleteRule(deleteRule);    return (c);  }  return null;}  }
class C{  public static CallingConvention createCallingConvention(MetaAccessProvider metaAccess,CodeCacheProvider codeCache,WordTypes wordTypes,ValueKindFactory<?> valueKindFactory,ForeignCallDescriptor descriptor,Type ccType){  assert ccType != null;  Class<?>[] argumentTypes=descriptor.getArgumentTypes();  JavaType[] parameterTypes=new JavaType[argumentTypes.length];  for (int i=0; i < parameterTypes.length; ++i) {    parameterTypes[i]=asJavaType(argumentTypes[i],metaAccess,wordTypes);  }  JavaType returnType=asJavaType(descriptor.getResultType(),metaAccess,wordTypes);  RegisterConfig regConfig=codeCache.getRegisterConfig();  return regConfig.getCallingConvention(ccType,returnType,parameterTypes,valueKindFactory);}  }
class C{  public R3Indicator(Problem problem,int subdivisions,NondominatedPopulation referenceSet){  this(problem,subdivisions,referenceSet,new ChebychevUtility());}  }
class C{  protected void buildShape(BridgeContext ctx,Element e,ShapeNode shapeNode){  try {    SVGOMCircleElement ce=(SVGOMCircleElement)e;    AbstractSVGAnimatedLength _cx=(AbstractSVGAnimatedLength)ce.getCx();    float cx=_cx.getCheckedValue();    AbstractSVGAnimatedLength _cy=(AbstractSVGAnimatedLength)ce.getCy();    float cy=_cy.getCheckedValue();    AbstractSVGAnimatedLength _r=(AbstractSVGAnimatedLength)ce.getR();    float r=_r.getCheckedValue();    float x=cx - r;    float y=cy - r;    float w=r * 2;    shapeNode.setShape(new Ellipse2D.Float(x,y,w,w));  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  public static PageFragment newInstance(){  Bundle args=new Bundle();  args.putLong(PageFragment.PAGE_ID,TERMS_AND_CONDITIONS);  PageFragment fragment=new PageFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public AclEntry changeAclRole(AclRole role,AclScope scope,String resourceId) throws IOException, ServiceException, DocumentListException {  if (role == null || scope == null || resourceId == null) {    throw new DocumentListException("null passed in for required parameters");  }  URL url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + "/"+ resourceId+ URL_ACL);  return service.update(url,scope,role);}  }
class C{  public void wide() throws OperatorFailedException {  final int nodeCount=tree.getNodeCount();  final NodeRef root=tree.getRoot();  NodeRef i=root;  while (root == i) {    i=tree.getNode(MathUtils.nextInt(nodeCount));  }  NodeRef j=i;  while (j == i || j == root) {    j=tree.getNode(MathUtils.nextInt(nodeCount));  }  final NodeRef iP=tree.getParent(i);  final NodeRef jP=tree.getParent(j);  if ((iP != jP) && (i != jP) && (j != iP)&& (tree.getNodeHeight(j) < tree.getNodeHeight(iP))&& (tree.getNodeHeight(i) < tree.getNodeHeight(jP))) {    exchangeNodes(tree,i,j,iP,jP);    return;  }  throw new OperatorFailedException("Couldn't find valid wide move on this tree!");}  }
class C{  public void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/test/",new MyHandler());  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  public Label(){}  }
class C{  private void trace(){  glUseProgram(computeProgram);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1f(lightRadiusUniform,lightRadius * 0.1f);  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,positionTexture,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,normalTexture,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,objectsSsboBinding,objectsSsbo);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,trianglesSsboBinding,trianglesSsbo);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,trianglesSsboBinding,0);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,objectsSsboBinding,0);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glUseProgram(0);  frameNumber++;}  }
class C{  public ConnectionStartHandle(ConnectionFigure owner){  super(owner);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return sage.vfs.VFSFactory.getInstance().createMediaSource(getString(stack),null);}  }
class C{  protected void calculateCutPointsByEqualFrequencyBinning(int index){  Instances data=new Instances(getInputFormat());  data.sort(index);  double sumOfWeights=0;  for (int i=0; i < data.numInstances(); i++) {    if (data.instance(i).isMissing(index)) {      break;    } else {      sumOfWeights+=data.instance(i).weight();    }  }  double freq;  double[] cutPoints=new double[m_NumBins - 1];  if (getDesiredWeightOfInstancesPerInterval() > 0) {    freq=getDesiredWeightOfInstancesPerInterval();    cutPoints=new double[(int)(sumOfWeights / freq)];  } else {    freq=sumOfWeights / m_NumBins;    cutPoints=new double[m_NumBins - 1];  }  double counter=0, last=0;  int cpindex=0, lastIndex=-1;  for (int i=0; i < data.numInstances() - 1; i++) {    if (data.instance(i).isMissing(index)) {      break;    }    counter+=data.instance(i).weight();    sumOfWeights-=data.instance(i).weight();    if (data.instance(i).value(index) < data.instance(i + 1).value(index)) {      if (counter >= freq) {        if (((freq - last) < (counter - freq)) && (lastIndex != -1)) {          cutPoints[cpindex]=(data.instance(lastIndex).value(index) + data.instance(lastIndex + 1).value(index)) / 2;          counter-=last;          last=counter;          lastIndex=i;        } else {          cutPoints[cpindex]=(data.instance(i).value(index) + data.instance(i + 1).value(index)) / 2;          counter=0;          last=0;          lastIndex=-1;        }        cpindex++;        freq=(sumOfWeights + counter) / ((cutPoints.length + 1) - cpindex);      } else {        lastIndex=i;        last=counter;      }    }  }  if ((cpindex < cutPoints.length) && (lastIndex != -1)) {    cutPoints[cpindex]=(data.instance(lastIndex).value(index) + data.instance(lastIndex + 1).value(index)) / 2;    cpindex++;  }  if (cpindex == 0) {    m_CutPoints[index]=null;  } else {    double[] cp=new double[cpindex];    for (int i=0; i < cpindex; i++) {      cp[i]=cutPoints[i];    }    m_CutPoints[index]=cp;  }}  }
class C{  public static void unlockFileSet(ZooKeeperManager zkManager,String fileSet) throws Exception {  zkManager.unlockFileSet(fileSet);  LOG.info(String.format("release %s lock",fileSet));}  }
class C{  private boolean mustBeTreeRoot(DepGraphNode n){  SpaceEffGraphEdge trueDepEdge=null;  for (SpaceEffGraphEdge out=n.firstOutEdge(); out != null; out=out.getNextOut()) {    if (DepGraphEdge.isRegTrue(out)) {      if (trueDepEdge != null)       return true;      trueDepEdge=out;    }  }  if (trueDepEdge == null) {    return true;  } else {    Instruction instr=n.instruction();    if (instr.operator() == IR_PROLOGUE)     return true;    RegisterOperand rop=ResultCarrier.getResult(instr);    if (rop.getRegister().spansBasicBlock())     return true;    SpaceEffGraphNode parent=trueDepEdge.toNode();    for (SpaceEffGraphEdge out=n.firstOutEdge(); out != null; out=out.getNextOut()) {      if (out != trueDepEdge) {        boolean match=false;        for (SpaceEffGraphEdge out2=parent.firstOutEdge(); out2 != null; out2=out2.getNextOut()) {          if (out2.toNode() == out.toNode()) {            match=true;            break;          }        }        if (!match) {          rememberAsProblemEdge(out);        }      }    }    return false;  }}  }
class C{  QuantifierDecomposition decomposeQuantifier(NodeRepresentation nodeRepArg,boolean isForAll){  QuantifierDecomposition result=new QuantifierDecomposition();  NodeRepresentation nodeRep=nodeRepArg;  result.news=new Vector<NodeRepresentation>();  Decomposition decomp=nodeRep.decomposition;  NodeTextRep newNodeText=null;  if ((decomp.definedOp != null) && (subexpressionButton.getSelection())) {    newNodeText=decomp.definedOpRep;  } else   if (nodeRep.isSubexpressionName) {    newNodeText=new NodeTextRep(nodeRep.nodeText,nodeRep.mapping);  } else   if (decomp.definedOp != null) {    try {      OpApplNode oan=(OpApplNode)nodeRepArg.semanticNode;      if (oan.getOperator().getName() == ASTConstants.OP_prime) {        if (!(oan instanceof OpApplNode)) {          return null;        }        oan=(OpApplNode)oan.getArgs()[0];      }      ExprNode sn=((OpDefNode)oan.getOperator()).getBody();      NodeRepresentation res=new NodeRepresentation(this.doc,sn);      nodeRep=res.subNodeRep(sn,nodeRepArg.parentVector,nodeRepArg.parentNode,null,decomp);      nodeRep.isPrimed=nodeRepArg.isPrimed;      nodeRep.decomposition.formalParams=nodeRepArg.decomposition.formalParams;      nodeRep.decomposition.arguments=nodeRepArg.decomposition.arguments;      nodeRep.decomposition.argNodes=nodeRepArg.decomposition.argNodes;      NodeTextRep ntext=decompSubstituteInNodeText(nodeRep,sn,new NodeTextRep(nodeRep.nodeText,nodeRep.mapping),nodeRepArg);      nodeRep.nodeText=ntext.nodeText;      nodeRep.mapping=ntext.mapping;    } catch (    BadLocationException e) {      e.printStackTrace();      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 2624 of DecomposeProofHandler.");      return null;    }  }  Vector<FormalParamNode> idsToRename=new Vector<FormalParamNode>();  Vector<String> idNewNames=new Vector<String>();  if (!isForAll) {    HashSet<String> prevDeclared=(HashSet<String>)this.declaredIdentifiers.clone();    addDeclaredSymbols(prevDeclared,nodeRepArg);    addSymbolsDeclaredLater(prevDeclared,nodeRepArg,true);    for (int i=0; i < decomp.quantIds.size(); i++) {      FormalParamNode id=decomp.quantIds.elementAt(i);      if (prevDeclared.contains(getCurrentName(id,decomp.renaming))) {        idsToRename.add(id);        idNewNames.add(getNewName(id,prevDeclared,decomp.renaming));      }    }    FormalParamNode[] formalParams=new FormalParamNode[idsToRename.size()];    String[] arguments=new String[idsToRename.size()];    boolean[] isBoundedIdRenaming=new boolean[idsToRename.size()];    SemanticNode[] argNodes=new SemanticNode[idsToRename.size()];    for (int i=0; i < idsToRename.size(); i++) {      formalParams[i]=idsToRename.elementAt(i);      arguments[i]=idNewNames.elementAt(i);      isBoundedIdRenaming[i]=true;      argNodes[i]=null;    }    NodeTextRep nText=substituteInNodeText(formalParams,arguments,isBoundedIdRenaming,argNodes,(ExprNode)nodeRep.semanticNode,new NodeTextRep(nodeRep.nodeText,nodeRep.mapping),nodeRep.decomposition);    nodeRep.nodeText=nText.nodeText;    nodeRep.mapping=nText.mapping;    for (int i=0; i < idsToRename.size(); i++) {      addCurrentName(idsToRename.elementAt(i),idNewNames.elementAt(i),nodeRep.decomposition.renaming);    }  }  int lastLine=-1;  for (int i=0; i < decomp.quantIds.size(); i++) {    NodeRepresentation rep=new NodeRepresentation();    rep.semanticNode=null;    rep.nodeType=NodeRepresentation.NEW_NODE;    rep.newId=getCurrentName(decomp.quantIds.elementAt(i),nodeRep.decomposition.renaming);    rep.isCreated=true;    rep.parentNode=nodeRep.parentNode;    if (nodeRep.parentVector != null) {      rep.parentVector=nodeRep.parentVector;    } else {      rep.parentVector=this.assumeReps;    }    NodeTextRep ntrep=new NodeTextRep();    String id="NEW " + rep.newId;    int beginLine=((SyntaxTreeNode)decomp.quantIds.elementAt(i).stn).getLocation().beginLine();    if (decomp.quantBounds == null) {      ntrep.nodeText=new String[1];      ntrep.nodeText[0]=id;      ntrep.mapping=new Vector[1];      ntrep.mapping[0]=new Vector<MappingPair>();      ntrep.mapping[0].addElement(new MappingPair(1,-1));    } else {      if (newNodeText == null) {        ntrep=nodeRep.subNodeText(decomp.quantBounds.elementAt(i));        if (decomp.primed || nodeRep.isPrimed) {          if (primingNeedsParens(decomp.quantBounds.elementAt(i))) {            ntrep=prependToNodeText(appendToNodeText(ntrep,")'"),"(");          } else {            ntrep=appendToNodeText(ntrep,"'");          }        }      } else {        String str=decomp.quantBoundsubexpNames.elementAt(i);        if (decomp.primed) {          str=str + "'";        }        ntrep=appendToNodeText(newNodeText,str);      }      ntrep=prependToNodeText(ntrep," \\in ");      if (ntrep.nodeText.length > 1) {        beginLine=-1;      }    }    if (decomp.quantBounds != null) {      ntrep=prependToNodeText(ntrep,id);    }    rep.nodeText=ntrep.nodeText;    rep.mapping=ntrep.mapping;    result.news.add(rep);    if ((beginLine != -1) && (beginLine == lastLine)) {      result.news.elementAt(i - 1).onSameLineAsNext=true;    }    lastLine=beginLine;  }  if (newNodeText != null) {    String str="!(";    for (int i=0; i < decomp.quantIds.size(); i++) {      if (i != 0) {        str=str + ", ";      }      str=str + decomp.quantIds.elementAt(i).getName().toString();    }    str=str + ")";    newNodeText=appendToNodeText(newNodeText,str);  }  result.body=nodeRep.subNodeRep(decomp.children.elementAt(0),nodeRep.parentVector,nodeRep.parentNode,newNodeText,nodeRep.decomposition);  result.body.isCreated=isForAll;  result.body.isPrimed=result.body.isPrimed || decomp.primed;  result.body.isSubexpressionName=nodeRep.isSubexpressionName || (newNodeText != null);  return result;}  }
class C{  public static Date parse(String timeString) throws ParseException {  if (timeString == null || timeString.isEmpty())   return null;  DateFormat timeFormat=new SimpleDateFormat(TimeField.FORMAT);  return timeFormat.parse(timeString);}  }
class C{  public static String replaceInternalByDisplayNames(final String str){  return str.replace("icecream","ice cream");}  }
class C{  public boolean isPanXEnabled(){  return mPanXEnabled;}  }
class C{  public static IStatus validateMethodName(String name){  return validateMethodName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public static byte[] toUTF8(Document hostDoc) throws IOException {  return toString(hostDoc).getBytes(ENC);}  }
class C{  private final int fetchLength() throws BerException {  int result=0;  final int backup=next;  try {    final byte b0=bytes[next++];    if (b0 >= 0) {      result=b0;    } else {      for (int c=128 + b0; c > 0; c--) {        final byte bX=bytes[next++];        result=result << 8;        result=result | ((bX >= 0) ? bX : bX + 256);      }    }  } catch (  IndexOutOfBoundsException e) {    next=backup;    throw new BerException();  }  return result;}  }
class C{  public static boolean tryDelete(String fileName){  try {    FilePath.get(fileName).delete();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  private void runDijkstra(){  if (!graph.containsKey(SOURCE_ID)) {    System.err.printf("Graph doesn't contain dummy PseudoRouteStop \"%s\"\n",SOURCE_ID);    return;  }  NavigableSet<PseudoRouteStop> queue=new TreeSet<>();  queue.add(graph.get(SOURCE_ID));  PseudoRouteStop currentStop, neighbour;  while (!queue.isEmpty()) {    currentStop=queue.pollFirst();    for (    Map.Entry<PseudoRouteStop,Double> n : currentStop.getNeighbours().entrySet()) {      neighbour=n.getKey();      final double alternateDist=currentStop.getTravelCostToSource() + n.getValue();      if (alternateDist < neighbour.getTravelCostToSource()) {        queue.remove(neighbour);        neighbour.setTravelCostToSource(alternateDist);        neighbour.setClosestPrecedingRouteSTop(currentStop);        queue.add(neighbour);      }    }  }}  }
class C{  public void testBlob() throws Exception, IOException {  byte[] b=new byte[4];  byte[] b128=new byte[128];  for (int i=0; i < b128.length; i++) {    b128[i]=(byte)i;  }  Blob blob=db.open_blob(dbFile.getPath(),"B","val",1,true);  try {    OutputStream os=blob.getOutputStream();    os.write(b128);    os.close();    InputStream is=blob.getInputStream();    is.skip(96);    assertEquals(4,is.read(b));    is.close();  }  finally {    blob.close();  }}  }
class C{  public void javacError(String message){  javacError(message,null);}  }
class C{  public SingletonTask(ScheduledExecutorService ses,Runnable task){  super();  this.task=task;  this.ses=ses;}  }
class C{  public void startThread(){  thread.start();  thread=null;}  }
class C{  public static boolean isNoDictionaryBlock(int[] noDictionaryColIndexes,int blockIndex){  if (null != noDictionaryColIndexes) {    for (    int noDictionaryValIndex : noDictionaryColIndexes) {      if (noDictionaryValIndex == blockIndex) {        return true;      }    }  }  return false;}  }
class C{  private void init(){  retrieveViews();  setupListeners();  picasso=Picasso.with(getApplicationContext());  boolean generatedPlaylist=setupPlaylistManager();  startPlayback(generatedPlaylist);}  }
class C{  private JPanel createMainPanel(){  JPanel panel=new JPanel();  panel.setLayout(new GridBagLayout());  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=0.33f;  c.weighty=0;  panel.add(new JLabel("Current filter(s)"),c);  SortedSet<String> filterNames=new TreeSet<String>();  for (  Sensor sensor : sensors) {    filterNames.add(sensor.getFilter().getDescription());  }  boolean addNewLine=false;  for (  String filterName : filterNames) {    c.insets=FIELD_INSETS;    c.gridx=1;    if (addNewLine) {      c.gridy++;    }    c.weightx=0.66f;    panel.add(new JLabel(filterName),c);    addNewLine=true;  }  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  panel.add(new JLabel("New filter"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  panel.add(filters,c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  panel.add(Box.createVerticalStrut(6),c);  c.insets=FIELD_INSETS;  c.gridy++;  filterEditorPlaceholder.add("Center",filterEditor.getEditorComponent());  panel.add(filterEditorPlaceholder,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridheight=1;  c.insets=EMPTY_INSETS;  c.gridy++;  c.weighty=1.0f;  c.weightx=1.0f;  panel.add(Box.createVerticalStrut(6),c);  return panel;}  }
class C{  public void moveFile(OCFile newfile,OCFile currentFile){  Intent service=new Intent(mFileActivity,OperationsService.class);  service.setAction(OperationsService.ACTION_MOVE_FILE);  service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH,newfile.getRemotePath());  service.putExtra(OperationsService.EXTRA_REMOTE_PATH,currentFile.getRemotePath());  service.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());  mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);  mFileActivity.showLoadingDialog(mFileActivity.getApplicationContext().getString(R.string.wait_a_moment));}  }
class C{  public boolean isGenerated(){  Object oo=get_Value(COLUMNNAME_IsGenerated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean moveMessageToFolder(Context context,Uri uri,int folder){  if (uri == null) {    return false;  }  boolean markAsUnread=false;  boolean markAsRead=false;switch (folder) {case MESSAGE_TYPE_INBOX:case MESSAGE_TYPE_DRAFT:    break;case MESSAGE_TYPE_OUTBOX:case MESSAGE_TYPE_SENT:  markAsRead=true;break;case MESSAGE_TYPE_FAILED:case MESSAGE_TYPE_QUEUED:markAsUnread=true;break;default :return false;}ContentValues values=new ContentValues(2);values.put(TYPE,folder);if (markAsUnread) {values.put(READ,Integer.valueOf(0));} else if (markAsRead) {values.put(READ,Integer.valueOf(1));}int result=0;try {result=context.getContentResolver().update(uri,values,null,null);} catch (Exception e) {}return 1 == result;}  }
class C{  public boolean isSentToAddress(){  return chunks.size() == 5 && chunks.get(0).equalsOpCode(OP_DUP) && chunks.get(1).equalsOpCode(OP_HASH160) && chunks.get(2).data.length == Address.LENGTH && chunks.get(3).equalsOpCode(OP_EQUALVERIFY) && chunks.get(4).equalsOpCode(OP_CHECKSIG);}  }
class C{  public static void init(PrintWriter outWriter){  ResultService.out=outWriter;}  }
class C{  public void addExplainHint(final IExplainHint explainHint){  explainHints.add(explainHint);}  }
class C{  public Matrix3f invertLocal(){  float det=determinant();  if (FastMath.abs(det) <= FastMath.FLT_EPSILON) {    return zero();  }  float f00=m11 * m22 - m12 * m21;  float f01=m02 * m21 - m01 * m22;  float f02=m01 * m12 - m02 * m11;  float f10=m12 * m20 - m10 * m22;  float f11=m00 * m22 - m02 * m20;  float f12=m02 * m10 - m00 * m12;  float f20=m10 * m21 - m11 * m20;  float f21=m01 * m20 - m00 * m21;  float f22=m00 * m11 - m01 * m10;  m00=f00;  m01=f01;  m02=f02;  m10=f10;  m11=f11;  m12=f12;  m20=f20;  m21=f21;  m22=f22;  multLocal(1f / det);  return this;}  }
class C{  public static long readHexLong(Map<String,? extends Object> map,String key,long defaultValue){  Object v=map.get(key);  if (v == null) {    return defaultValue;  } else   if (v instanceof Long) {    return (Long)v;  }  try {    return parseHexLong((String)v);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",v,e);  }}  }
class C{  public EqualSizeGlobalConstraint(ListParameter<?,?>... params){  this.parameters=params;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static boolean isTest(Method m){  if (!m.getName().startsWith("test"))   return false;  if (m.getReturnType() != Void.TYPE)   return false;  if (m.getParameterTypes().length != 0)   return false;  int mods=m.getModifiers();  if (Modifier.isStatic(mods))   return false;  if (Modifier.isAbstract(mods))   return false;  return true;}  }
class C{  public static boolean isTemplate(Category category){  return category == CakePHP3Module.Category.TEMPLATE || category == CakePHP3Module.Category.TEMPLATE_CELL || category == CakePHP3Module.Category.ELEMENT || category == CakePHP3Module.Category.ERROR || category == CakePHP3Module.Category.LAYOUT || category == CakePHP3Module.Category.EMAIL || category == CakePHP3Module.Category.PAGES;}  }
class C{  public static void main(final String[] args){  if (args.length == 6) {    run(args[0],args[1],args[2],args[3],args[4],args[5]);  } else   if (args.length == 5) {    run(args[0],args[1],args[2],args[3],args[4],null);  } else   if (args.length == 4) {    run(args[0],args[1],args[2],args[3],null,null);  } else {    throw new IllegalArgumentException("Wrong number of input arguments.");  }}  }
class C{  public String convertMillisToMinsSecs(long milliseconds){  int secondsValue=(int)(milliseconds / 1000) % 60;  int minutesValue=(int)((milliseconds / (1000 * 60)) % 60);  int hoursValue=(int)((milliseconds / (1000 * 60 * 60)) % 24);  String seconds="";  String minutes="";  String hours="";  if (secondsValue < 10) {    seconds="0" + secondsValue;  } else {    seconds="" + secondsValue;  }  if (minutesValue < 10) {    minutes="0" + minutesValue;  } else {    minutes="" + minutesValue;  }  if (hoursValue < 10) {    hours="0" + hoursValue;  } else {    hours="" + hoursValue;  }  String output="";  if (hoursValue != 0) {    output=hours + ":" + minutes+ ":"+ seconds;  } else {    output=minutes + ":" + seconds;  }  return output;}  }
class C{  public void stop(){  if (mRunning) {    mHealthEventBus.unregister(this);    for (    HealthCheck check : mHealthChecks) {      check.stop();    }    mRunning=false;  }}  }
class C{  public void reportSummary(@WillClose OutputStream out) throws IOException {  XMLOutput xmlOutput=new OutputStreamXMLOutput(out);  try {    writeXML(xmlOutput);  }  finally {    xmlOutput.finish();  }}  }
class C{  public boolean isKnownAsSwitchBranchInstruction(BytecodeInstruction instruction){  return registeredSwitches.containsKey(instruction);}  }
class C{  @SuppressLint("NewApi") public static void tryAccessibilityAnnounce(View view,CharSequence text){  if (isJellybeanOrLater() && view != null && text != null) {    view.announceForAccessibility(text);  }}  }
class C{  Trace deepCopy(){  return new Trace(new ArrayDeque<>(stack),isObservable,traceId);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public MetalinkFileBuilder addMetaUrl(String url,String mediatype,String name,int priority){  BasicElement metaUrl=new BasicElement("metaurl",url);  metaUrl.addAttribute("mediatype",mediatype);  if (name != null)   metaUrl.addAttribute("mediatype",mediatype);  if (priority > 1 && priority < 1000000)   metaUrl.addAttribute("priority",priority);  this.metaUrls.add(metaUrl);  return this;}  }
class C{  public CredentialsInfo(Collection<Field> fields){  this.fields=fields;}  }
class C{  @SmallTest public void testChangeCursorColumns(){  TestSimpleCursorAdapter ca=new TestSimpleCursorAdapter(mContext,mLayout,mCursor2x2,mFrom,mTo);  int[] columns=ca.getConvertedFrom();  assertEquals(columns[0],0);  assertEquals(columns[1],1);  String[] swappedFrom=new String[]{"Column2","Column1","_id"};  Cursor c2=createCursor(swappedFrom,mData2x2);  ca.changeCursor(c2);  assertEquals(2,ca.getCount());  columns=ca.getConvertedFrom();  assertEquals(columns[0],1);  assertEquals(columns[1],0);}  }
class C{  public Certificate engineGetCertificate(String alias){  Entry entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry == null) {    return null;  }  if (entry instanceof CertEntry && ((CertEntry)entry).trustedKeyUsage != null) {    if (debug != null) {      if (Arrays.equals(AnyUsage,((CertEntry)entry).trustedKeyUsage)) {        debug.println("Retrieved a certificate at alias '" + alias + "' (trusted for any purpose)");      } else {        debug.println("Retrieved a certificate at alias '" + alias + "' (trusted for limited purposes)");      }    }    return ((CertEntry)entry).cert;  } else   if (entry instanceof PrivateKeyEntry) {    if (((PrivateKeyEntry)entry).chain == null) {      return null;    } else {      if (debug != null) {        debug.println("Retrieved a certificate at alias '" + alias + "'");      }      return ((PrivateKeyEntry)entry).chain[0];    }  } else {    return null;  }}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  @SuppressWarnings("unchecked") public static void deleteALLImage(final IdocScanInterface ui){  FileVO ele=(FileVO)ui.getFileVO();  ele.getListImage().removeAll(ele.getListImage());  ele.setImageSelectIndex(0);}  }
class C{  public static Lock newLock(String name){  try {    Clock.stop();    return model.newLock(name);  }  finally {    Clock.start();  }}  }
class C{  public T caseTransitionSpecification(TransitionSpecification object){  return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.173 -0500",hash_original_method="95F6538276A47A94F5635C5979B3D205",hash_generated_method="03BB1EBBF2B16CB4908B188086726A47") public void removeAt(int index){  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));  mSize--;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,Collection<?> coll){  buffer.append(coll);}  }
class C{  public void add(float start,float end){  if (mSpans != null) {    mSpans.add(new Span(start,end));    if (++mAddsSinceSort >= kMaxAddsSinceSort) {      sortAndCollapse();    }  }}  }
class C{  public static int bcd2Number(int bcd){  int loNibble=bcd & 0xF;  int hiNibble=(bcd >> 4);  if (loNibble > 9 || hiNibble > 9)   throw new RuntimeException("BCD number is invalid");  return hiNibble * 10 + loNibble;}  }
class C{  private static Set<UUID> allIds(Collection<ClusterNode> nodes){  Set<UUID> allIds=new HashSet<>();  for (  ClusterNode n : nodes)   allIds.add(n.id());  return allIds;}  }
class C{  private void refreshBusinessContext(){  applicationMap.clear();  businessTransactionsMap.clear();  for (  BusinessTransactionData businessTx : businessContextService.getBusinessTransactions()) {    businessTransactionsMap.put(new Pair<Integer,Integer>(businessTx.getApplication().getId(),businessTx.getId()),businessTx);  }  for (  ApplicationData application : businessContextService.getApplications()) {    applicationMap.put(application.getId(),application);  }}  }
class C{  public final boolean supports(String feature,String version){  return implementation.hasFeature(feature,version);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("Sum associations example:");  System.out.println("-------------------------");  List<FacetResult> results=new AssociationsFacetsExample().runSumAssociations();  System.out.println("tags: " + results.get(0));  System.out.println("genre: " + results.get(1));}  }
class C{  public boolean moduleNameSet(){  return ((this.getModuleName() != null) && (!this.getModuleName().isEmpty()));}  }
class C{  private static char convertToRomanNumber(char c){  if (c == 0x66b) {    return '.';  } else   if (0x660 <= c && c <= 0x669) {    return (char)(c - (char)0x630);  } else   if (0x6f0 <= c && c <= 0x6f9) {    return (char)(c - (char)0x6c0);  } else   if (0x966 <= c && c <= 0x96f) {    return (char)(c - (char)0x936);  } else   if (0x9e6 <= c && c <= 0x9ef) {    return (char)(c - (char)0x9b6);  } else   if (0xa66 <= c && c <= 0xa6f) {    return (char)(c - (char)0xa36);  } else   if (0xae6 <= c && c <= 0xaef) {    return (char)(c - (char)0xab6);  } else   if (0xb66 <= c && c <= 0xb6f) {    return (char)(c - (char)0xb36);  } else   if (0xc66 <= c && c <= 0xc6f) {    return (char)(c - (char)0xc36);  } else   if (0xd66 <= c && c <= 0xd6f) {    return (char)(c - (char)0xd36);  } else   if (0xe50 <= c && c <= 0xe59) {    return (char)(c - (char)0xe20);  } else   if (0xed0 <= c && c <= 0xed9) {    return (char)(c - (char)0xea0);  } else   if (0xf20 <= c && c <= 0xf29) {    return (char)(c - (char)0xe90);  } else   if (0x1040 <= c && c <= 0x1049) {    return (char)(c - (char)0x1010);  } else   if (0x17e0 <= c && c <= 0x17e9) {    return (char)(c - (char)0x17b0);  } else   if (0x1810 <= c && c <= 0x1819) {    return (char)(c - (char)0x17e0);  } else   if (0x1b50 <= c && c <= 0x1b59) {    return (char)(c - (char)0x1b20);  } else   if (0x1bb0 <= c && c <= 0x1bb9) {    return (char)(c - (char)0x1b80);  } else   if (0x1c40 <= c && c <= 0x1c49) {    return (char)(c - (char)0x1c10);  } else   if (0x1c50 <= c && c <= 0x1c59) {    return (char)(c - (char)0x1c20);  } else   if (0xa8d0 <= c && c <= 0xa8d9) {    return (char)(c - (char)0xa8a0);  }  return c;}  }
class C{  public boolean isVisibleInCatalog(){  return visibleInCatalog;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  if (col == ADDRESSCOL) {    return false;  }  if (col == PROTOCOL) {    return false;  }  if (col == DECODERCOL) {    return false;  }  if (col == ICONCOL) {    return false;  }  if (col == DATEUPDATECOL) {    return false;  }  if (editable) {    RosterEntry re=Roster.getDefault().getGroupEntry(rosterGroup,row);    if (re != null) {      return (!re.isOpen());    }  }  return editable;}  }
class C{  private boolean suffix(String value,String suffix){  if ((value == null) || (suffix == null)) {    return false;  }  if (suffix.length() > value.length()) {    return false;  }  return value.substring(value.length() - suffix.length()).equals(suffix);}  }
class C{  private CViewLoader(){}  }
class C{  protected void postRedo(){  ++cursor;  restoreSelection();}  }
class C{  public boolean removeDataChannel(){  if (TextUtils.isEmpty(mDataNamespace)) {    return false;  }  try {    if (mApiClient != null) {      Cast.CastApi.removeMessageReceivedCallbacks(mApiClient,mDataNamespace);    }    mDataChannel=null;    mPreferenceAccessor.saveStringToPreference(PREFS_KEY_CAST_CUSTOM_DATA_NAMESPACE,null);    return true;  } catch (  IOException|IllegalStateException e) {    LOGE(TAG,"removeDataChannel() failed to remove namespace " + mDataNamespace,e);  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.IMMUTABLE___IMMUTABLE_1:    setImmutable_1((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public List<Cookie> parse(final Header header,final CookieOrigin origin) throws MalformedCookieException {  if (header == null) {    throw new IllegalArgumentException("Header may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  NetscapeDraftHeaderParser parser=NetscapeDraftHeaderParser.DEFAULT;  CharArrayBuffer buffer;  ParserCursor cursor;  if (header instanceof FormattedHeader) {    buffer=((FormattedHeader)header).getBuffer();    cursor=new ParserCursor(((FormattedHeader)header).getValuePos(),buffer.length());  } else {    String s=header.getValue();    if (s == null) {      throw new MalformedCookieException("Header value is null");    }    buffer=new CharArrayBuffer(s.length());    buffer.append(s);    cursor=new ParserCursor(0,buffer.length());  }  return parse(new HeaderElement[]{parser.parseHeader(buffer,cursor)},origin);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.892 -0500",hash_original_method="9D47ECE9B5A5E502049A76A2D5CF7D58",hash_generated_method="0DCAFC3A7A241B92057F01231D3EE9FC") public void attachCall(SipSession session,String sessionDescription) throws SipException {  if (!SipManager.isVoipSupported(mContext)) {    throw new SipException("VOIP API is not supported");  }synchronized (this) {    mSipSession=session;    mPeerSd=sessionDescription;    Log.v(TAG,"attachCall()" + mPeerSd);    try {      session.setListener(createListener());    } catch (    Throwable e) {      Log.e(TAG,"attachCall()",e);      throwSipException(e);    }  }}  }
class C{  @Override public void onDisabled(Context context,Intent intent){  super.onDisabled(context,intent);  if (Cfg.DEBUG) {    Check.log(TAG + " (onDisabled) ");  }  Status.self().setDeviceAdmin(false);}  }
class C{  public void ensureNotDone() throws IOException {}  }
class C{  private void addTableColumn(ResultSet rs,MTable table) throws Exception {  String tableName=table.getTableName();  if (DB.isOracle())   tableName=tableName.toUpperCase();  if (DB.isPostgreSQL())   tableName=tableName.toLowerCase();  while (rs.next()) {    String tn=rs.getString("TABLE_NAME");    if (!tableName.equalsIgnoreCase(tn))     continue;    String columnName=rs.getString("COLUMN_NAME");    MColumn column=table.getColumn(columnName);    if (column != null)     continue;    int dataType=rs.getInt("DATA_TYPE");    String typeName=rs.getString("TYPE_NAME");    String nullable=rs.getString("IS_NULLABLE");    int size=rs.getInt("COLUMN_SIZE");    int digits=rs.getInt("DECIMAL_DIGITS");    log.config(columnName + " - DataType=" + dataType+ " "+ typeName+ ", Nullable="+ nullable+ ", Size="+ size+ ", Digits="+ digits);    column=new MColumn(table);    column.set_TrxName(get_TrxName());    column.setEntityType(p_EntityType);    M_Element element=M_Element.get(getCtx(),columnName);    if (element == null) {      element=new M_Element(getCtx(),columnName,p_EntityType,get_TrxName());      if (columnName.equalsIgnoreCase(table.getTableName() + "_ID")) {        element.setColumnName(table.getTableName() + "_ID");        element.setName(table.getName());        element.setPrintName(table.getName());      }      element.save();    }    column.setColumnName(element.getColumnName());    column.setName(element.getName());    column.setDescription(element.getDescription());    column.setHelp(element.getHelp());    column.setAD_Element_ID(element.getAD_Element_ID());    column.setIsMandatory("NO".equals(nullable));    if (columnName.equalsIgnoreCase(tableName + "_ID")) {      column.setIsKey(true);      column.setAD_Reference_ID(DisplayType.ID);      column.setIsUpdateable(false);    } else     if (columnName.toUpperCase().endsWith("_ACCT") && size == 10)     column.setAD_Reference_ID(DisplayType.Account); else     if (columnName.equalsIgnoreCase("C_Location_ID"))     column.setAD_Reference_ID(DisplayType.Location); else     if (columnName.equalsIgnoreCase("M_AttributeSetInstance_ID"))     column.setAD_Reference_ID(DisplayType.PAttribute); else     if (columnName.equalsIgnoreCase("SalesRep_ID")) {      column.setAD_Reference_ID(DisplayType.Table);      column.setAD_Reference_Value_ID(190);    } else     if (columnName.toUpperCase().endsWith("_ID"))     column.setAD_Reference_ID(DisplayType.TableDir); else     if (dataType == Types.DATE || dataType == Types.TIME || dataType == Types.TIMESTAMP || columnName.equalsIgnoreCase("Created") || columnName.equalsIgnoreCase("Updated"))     column.setAD_Reference_ID(DisplayType.DateTime); else     if (columnName.equalsIgnoreCase("CreatedBy") || columnName.equalsIgnoreCase("UpdatedBy")) {      column.setAD_Reference_ID(DisplayType.Table);      column.setAD_Reference_Value_ID(110);      column.setIsUpdateable(false);    } else     if (columnName.equalsIgnoreCase("EntityType")) {      column.setAD_Reference_ID(DisplayType.Table);      column.setAD_Reference_Value_ID(389);    } else     if (dataType == Types.CLOB)     column.setAD_Reference_ID(DisplayType.TextLong); else     if (dataType == Types.BLOB)     column.setAD_Reference_ID(DisplayType.Binary); else     if (columnName.toUpperCase().indexOf("AMT") != -1)     column.setAD_Reference_ID(DisplayType.Amount); else     if (columnName.toUpperCase().indexOf("QTY") != -1)     column.setAD_Reference_ID(DisplayType.Quantity); else     if (size == 1 && (columnName.toUpperCase().startsWith("IS") || dataType == Types.CHAR))     column.setAD_Reference_ID(DisplayType.YesNo); else     if (size < 4 && dataType == Types.CHAR)     column.setAD_Reference_ID(DisplayType.List); else     if (columnName.equalsIgnoreCase("Name") || columnName.equals("DocumentNo")) {      column.setAD_Reference_ID(DisplayType.String);      column.setIsIdentifier(true);      column.setSeqNo(1);    } else     if (dataType == Types.CHAR || dataType == Types.VARCHAR || typeName.startsWith("NVAR") || typeName.startsWith("NCHAR")) {      if (typeName.startsWith("N"))       size/=2;      if (size > 255)       column.setAD_Reference_ID(DisplayType.Text); else       column.setAD_Reference_ID(DisplayType.String);    } else     if (dataType == Types.INTEGER || dataType == Types.SMALLINT || dataType == Types.DECIMAL || dataType == Types.NUMERIC) {      if (size == 10)       column.setAD_Reference_ID(DisplayType.Integer); else       column.setAD_Reference_ID(DisplayType.Number);    } else     column.setAD_Reference_ID(DisplayType.String);    column.setFieldLength(size);    if (column.isUpdateable() && (table.isView() || columnName.equalsIgnoreCase("AD_Client_ID") || columnName.equalsIgnoreCase("AD_Org_ID")|| columnName.toUpperCase().startsWith("CREATED")|| columnName.toUpperCase().equals("UPDATED")))     column.setIsUpdateable(false);    if (MColumn.isSuggestSelectionColumn(column.getColumnName(),false))     column.setIsSelectionColumn(true);    if (column.save()) {      addLog(0,null,null,table.getTableName() + "." + column.getColumnName());      m_count++;    }  }}  }
class C{  private void modelGroup(XSModelGroup group,String extraAtts){  SchemaTreeNode newNode=new SchemaTreeNode(MessageFormat.format("{0}{1}",new Object[]{group.getCompositor(),extraAtts}),group.getLocator());  this.currNode.add(newNode);  this.currNode=newNode;  final int len=group.getSize();  for (int i=0; i < len; i++) {    particle(group.getChild(i));  }  this.currNode=(SchemaTreeNode)this.currNode.getParent();}  }
class C{  public synchronized Key engineGetKey(String alias,char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException {  token.ensureValid();  if (password != null && !token.config.getKeyStoreCompatibilityMode()) {    throw new NoSuchAlgorithmException("password must be null");  }  AliasInfo aliasInfo=aliasMap.get(alias);  if (aliasInfo == null || aliasInfo.type == ATTR_CLASS_CERT) {    return null;  }  Session session=null;  try {    session=token.getOpSession();    if (aliasInfo.type == ATTR_CLASS_PKEY) {      THandle h=getTokenObject(session,aliasInfo.type,aliasInfo.id,null);      if (h.type == ATTR_CLASS_PKEY) {        return loadPkey(session,h.handle);      }    } else {      THandle h=getTokenObject(session,ATTR_CLASS_SKEY,null,alias);      if (h.type == ATTR_CLASS_SKEY) {        return loadSkey(session,h.handle);      }    }    return null;  } catch (  PKCS11Exception|KeyStoreException e) {    throw new ProviderException(e);  } finally {    token.releaseSession(session);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.FAULT__PROPERTIES:    return properties != null && !properties.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public FloatMatrix put(int[] rindices,int[] cindices,FloatMatrix x){  if (x.isScalar()) {    return put(rindices,cindices,x.scalar());  }  for (int i=0; i < rindices.length; i++) {    for (int j=0; j < cindices.length; j++) {      put(rindices[i],cindices[j],x.get(i,j));    }  }  return this;}  }
class C{  public void addProgressListener(ProgressListener l){synchronized (progressListenerList) {    progressListenerList.add(l);  }}  }
class C{  public static void loadFromXml(InputStream is,BlockFactory blockFactory,WorkspaceStats stats,List<Block> result) throws BlocklyParserException {  loadBlocksFromXml(is,null,blockFactory,stats,result);}  }
class C{  public static void main(String[] args){  try {    if (args.length == 0) {      throw new Exception("First argument must be the class name of a Filter");    }    String fname=args[0];    Filter f=(Filter)Class.forName(fname).newInstance();    args[0]="";    runFilter(f,args);  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final Object value){  buffer.append(summaryObjectStartText);  buffer.append(getShortClassName(value.getClass()));  buffer.append(summaryObjectEndText);}  }
class C{  public void insertIdentityStmts(){  int i=0;  Iterator parIt=getMethod().getParameterTypes().iterator();  while (parIt.hasNext()) {    Type t=(Type)parIt.next();    Local l=Jimple.v().newLocal("parameter" + i,t);    getLocals().add(l);    getUnits().addFirst(Jimple.v().newIdentityStmt(l,Jimple.v().newParameterRef(l.getType(),i)));    i++;  }  if (!getMethod().isStatic()) {    Local l=Jimple.v().newLocal("this",RefType.v(getMethod().getDeclaringClass()));    getLocals().add(l);    getUnits().addFirst(Jimple.v().newIdentityStmt(l,Jimple.v().newThisRef((RefType)l.getType())));  }}  }
class C{  public long size(){  return size;}  }
class C{  @Override boolean isCallPermitted(){  if (Instant.now().isAfter(retryAfterWaitDuration)) {    stateMachine.transitionToHalfClosedState(CircuitBreaker.StateTransition.OPEN_TO_HALF_OPEN);    return true;  }  return false;}  }
class C{  public static double distanceLineLine(Coordinate A,Coordinate B,Coordinate C,Coordinate D){  if (A.equals(B))   return distancePointLine(A,C,D);  if (C.equals(D))   return distancePointLine(D,A,B);  boolean noIntersection=false;  if (!Envelope.intersects(A,B,C,D)) {    noIntersection=true;  } else {    double denom=(B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);    if (denom == 0) {      noIntersection=true;    } else {      double r_num=(A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y);      double s_num=(A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y);      double s=s_num / denom;      double r=r_num / denom;      if ((r < 0) || (r > 1) || (s < 0)|| (s > 1)) {        noIntersection=true;      }    }  }  if (noIntersection) {    return MathUtil.min(distancePointLine(A,C,D),distancePointLine(B,C,D),distancePointLine(C,A,B),distancePointLine(D,A,B));  }  return 0.0;}  }
class C{  public static void randomBytes(byte[] bytes){  RANDOM.nextBytes(bytes);}  }
class C{  public AreaAveragingScaleFilter(int width,int height){  super(width,height);}  }
class C{  public TransactionInput addSignedInput(TransactionOutput output,ECKey signingKey,SigHash sigHash,boolean anyoneCanPay){  return addSignedInput(output.getOutPointFor(),output.getScriptPubKey(),signingKey,sigHash,anyoneCanPay);}  }
class C{  @Override public WeightVector train(SLProblem problem,SLParameters params,WeightVector init) throws Exception {  log.info("Starting Structured Perceptron learner");  long start=System.currentTimeMillis();  WeightVector w=init;  int epoch=0;  boolean done=false;  int count=1;  while (!done) {    if (epoch % params.PROGRESS_REPORT_ITER == 0) {      log.info("Starting epoch {}",epoch);      if (f != null)       f.run(w,this.inference);    }    count=doOneIteration(w,problem,epoch,count,params);    if (epoch % params.PROGRESS_REPORT_ITER == 0) {      log.info("End of epoch {}. {} updates made",epoch,epochUpdateCount);    }    epoch++;    done=!reachedStoppingCriterion(w,epoch,params);    if (params.PROGRESS_REPORT_ITER > 0 && (epoch + 1) % params.PROGRESS_REPORT_ITER == 0 && this.f != null)     f.run(w,inference);  }  long end=System.currentTimeMillis();  log.info("Learning complete. Took {}s","" + (end - start) * 1.0 / 1000);  return w;}  }
class C{  public void photoCaptureDoneEvent(){  Float processingTime=(getElapsedRealTime() - mCaptureTimeMillis) / 1000f;  if (isValidForPhotoCaptureEvent()) {    mUsageStatistics.photoCaptureDoneEvent(mMode,mFilename,mExifInterface,mIsFrontFacing,mIsHdr,mZoom,mFlashSetting,mGridLinesOn,mTimerSeconds,processingTime,mTouchCoordinate,mVolumeButtonShutter,mFaceProxies,mLensFocusDistance,mActiveSensorSize);  }}  }
class C{  public static HttpWaitStrategy forHttp(String path){  return new HttpWaitStrategy().forPath(path).forStatusCode(HttpURLConnection.HTTP_OK);}  }
class C{  public TerminalSize withRelative(int deltaColumns,int deltaRows){  return withRelativeRows(deltaRows).withRelativeColumns(deltaColumns);}  }
class C{  public Fits(InputStream str) throws FitsException {  streamInit(str);}  }
class C{  public static void main(String[] args) throws Exception {  BeautyEyeLNFHelper.launchBeautyEyeLNF();  JFrame f=new JFrame();  f.setBounds(100,100,300,300);  JToolBar tb=new JToolBar();  tb.add(new JTextField("111111111111111111"));  f.getContentPane().setLayout(new BorderLayout());  f.getContentPane().add(tb,BorderLayout.NORTH);  f.getContentPane().add(new JButton("1111111111111111111111"),BorderLayout.CENTER);  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setVisible(true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.376 -0500",hash_original_method="9BE79A12D6DD94045CB54AF328E4EC88",hash_generated_method="9BE79A12D6DD94045CB54AF328E4EC88") void onDisconnect(DisconnectCause cause){  this.cause=cause;  if (!disconnected) {    index=-1;    disconnectTime=System.currentTimeMillis();    duration=SystemClock.elapsedRealtime() - connectTimeReal;    disconnected=true;    if (false)     Log.d(LOG_TAG,"[GSMConn] onDisconnect: cause=" + cause);    owner.phone.notifyDisconnect(this);    if (parent != null) {      parent.connectionDisconnected(this);    }  }  releaseWakeLock();}  }
class C{  public ModbusSerialListener(SerialParameters params,AbstractSerialConnection serialCon){  this.serialCon=serialCon;}  }
class C{  public boolean isIgnoreEmptyTokens(){  return ignoreEmptyTokens;}  }
class C{  public void testIsSupported1() throws Throwable {  Document doc;  Element element;  String version="";  String version1="1.0";  String version2="2.0";  String featureCore;  String featureXML;  boolean success;  List<String> featuresXML=new ArrayList<String>();  featuresXML.add("XML");  featuresXML.add("xmL");  List<String> featuresCore=new ArrayList<String>();  featuresCore.add("Core");  featuresCore.add("CORE");  doc=(Document)load("staffNS",builder);  element=doc.getDocumentElement();  for (int indexN10063=0; indexN10063 < featuresXML.size(); indexN10063++) {    featureXML=(String)featuresXML.get(indexN10063);    success=element.isSupported(featureXML,version);    assertTrue("nodeissupported01_XML1",success);    success=element.isSupported(featureXML,version1);    assertTrue("nodeissupported01_XML2",success);  }  for (int indexN1007C=0; indexN1007C < featuresCore.size(); indexN1007C++) {    featureCore=(String)featuresCore.get(indexN1007C);    success=element.isSupported(featureCore,version);    assertTrue("nodeissupported01_Core1",success);    success=element.isSupported(featureCore,version1);    success=element.isSupported(featureCore,version2);    assertTrue("nodeissupported01_Core3",success);  }}  }
class C{  public Binary createBinary(){  BinaryImpl binary=new BinaryImpl();  return binary;}  }
class C{  public static IPackageFragmentRoot addSourceContainer(IJavaProject jproject,String containerName,IPath[] exclusionFilters) throws CoreException {  return addSourceContainer(jproject,containerName,new Path[0],exclusionFilters);}  }
class C{  public static List<ObjectModel> load(File modelDir){  return loadObjectsFromDir(modelDir);}  }
class C{  @Ignore @Test public void test_DR_PGS_2Nodes_EMPTY_Put_Receiver() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    vm2.invoke(null);    vm2.invoke(null);    vm2.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    startSenderInVMs("ln1",vm4,vm5);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm2.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  public Time_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public static void checkValid(double[] x){  for (  double v : x) {    if (Double.isNaN(v)) {      throw new RuntimeException("Invalid entry " + v);    }  }}  }
class C{  private int addOne(int digit){  int value=digit + 1;  if (value >= m_Base) {    value=0;  }  return value;}  }
class C{  public void enterSource(NodeHandler handler,Context context){  NodeInfo curr=context.getContextNodeInfo();  final String path=Navigator.getPath(curr);  if (TRACE) {    trace(indent + "<Source node=\"" + path+ "\" line=\""+ curr.getLineNumber()+ "\" mode=\""+ getModeName(context)+ "\">");    indent+=" ";  }  myDebugger.pushSource(new SaxonSourceFrame(myDebugger.getSourceFrame(),curr));}  }
class C{  @Activate protected void activate(Map<String,Object> properties){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrreplacechild1.class,args);}  }
class C{  public synchronized void panToAbs(Point2D p){  double sx=m_transform.getScaleX();  double sy=m_transform.getScaleY();  double x=p.getX();  x=(Double.isNaN(x) ? 0 : x);  double y=p.getY();  y=(Double.isNaN(y) ? 0 : y);  x=getWidth() / (2 * sx) - x;  y=getHeight() / (2 * sy) - y;  double dx=x - (m_transform.getTranslateX() / sx);  double dy=y - (m_transform.getTranslateY() / sy);  damageReport();  m_transform.translate(dx,dy);  try {    m_itransform=m_transform.createInverse();  } catch (  Exception e) {  }}  }
class C{  public YadisUrl(URL urlId) throws YadisException {  if (isValid(urlId))   _yadisUrl=urlId; else   throw new YadisException("The scheme name of a Yadis URL must be 'http' or 'https'",OpenIDException.YADIS_INVALID_SCHEME);}  }
class C{  @Override public boolean hasSideEffects(){  return type == Token.EXPR_RESULT || expr.hasSideEffects();}  }
class C{  public void test_add_evict(){  final MyListener<String> listener=new MyListener<String>();  final HardReferenceQueue<String> cache=new HardReferenceQueue<String>(listener,5,0);  final String ref0="0";  final String ref1="1";  final String ref2="2";  final String ref3="3";  final String ref4="4";  final String ref5="5";  assertEquals("size",0,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",0,cache.getHeadIndex());  assertTrue("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{},cache.toArray(new String[0]));  assertTrue(cache.add(ref0));  assertEquals("size",1,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",1,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref0},cache.toArray(new String[0]));  assertTrue(cache.add(ref1));  assertEquals("size",2,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",2,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref0,ref1},cache.toArray(new String[0]));  assertTrue(cache.add(ref2));  assertEquals("size",3,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",3,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref0,ref1,ref2},cache.toArray(new String[0]));  assertTrue(cache.add(ref3));  assertEquals("size",4,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",4,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref0,ref1,ref2,ref3},cache.toArray(new String[0]));  assertTrue(cache.add(ref4));  assertEquals("size",5,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",0,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertTrue("full",cache.isFull());  assertEquals("order",new String[]{ref0,ref1,ref2,ref3,ref4},cache.toArray(new String[0]));  listener.setExpectedRef(ref0);  assertTrue(cache.add(ref5));  listener.assertEvicted();  assertEquals("size",5,cache.size());  assertEquals("tail",1,cache.getTailIndex());  assertEquals("head",1,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertTrue("full",cache.isFull());  assertEquals("order",new String[]{ref1,ref2,ref3,ref4,ref5},cache.toArray(new String[0]));  listener.setExpectedRef(ref1);  assertTrue(cache.evict());  listener.assertEvicted();  assertEquals("size",4,cache.size());  assertEquals("tail",2,cache.getTailIndex());  assertEquals("head",1,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref2,ref3,ref4,ref5},cache.toArray(new String[0]));  assertTrue(cache.add(ref4));  assertEquals("size",5,cache.size());  assertEquals("tail",2,cache.getTailIndex());  assertEquals("head",2,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertTrue("full",cache.isFull());  assertEquals("order",new String[]{ref2,ref3,ref4,ref5,ref4},cache.toArray(new String[0]));  listener.setExpectedRef(ref2);  assertTrue(cache.add(ref2));  listener.assertEvicted();  assertEquals("size",5,cache.size());  assertEquals("tail",3,cache.getTailIndex());  assertEquals("head",3,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertTrue("full",cache.isFull());  assertEquals("order",new String[]{ref3,ref4,ref5,ref4,ref2},cache.toArray(new String[0]));  int nevicted=listener.getEvictionCount();  listener.setExpectedRefs(new String[]{ref3,ref4,ref5,ref4,ref2});  cache.evictAll(false);  listener.assertEvictionCount(nevicted + 5);  assertEquals("size",5,cache.size());  assertEquals("tail",3,cache.getTailIndex());  assertEquals("head",3,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertTrue("full",cache.isFull());  assertEquals("order",new String[]{ref3,ref4,ref5,ref4,ref2},cache.toArray(new String[0]));  nevicted=listener.getEvictionCount();  listener.setExpectedRefs(new String[]{ref3,ref4,ref5,ref4,ref2});  cache.evictAll(true);  listener.assertEvictionCount(nevicted + 5);  assertEquals("size",0,cache.size());  assertEquals("tail",3,cache.getTailIndex());  assertEquals("head",3,cache.getHeadIndex());  assertTrue("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{},cache.toArray(new String[0]));}  }
class C{  public RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions){  this.indicesOptions=indicesOptions;  return this;}  }
class C{  public static void quickSort(final long from,final long to,final LongComparator comp,final BigSwapper swapper){  final long len=to - from;  if (len < SMALL) {    for (long i=from; i < to; i++)     for (long j=i; j > from && (comp.compare(j - 1,j) > 0); j--) {      swapper.swap(j,j - 1);    }    return;  }  long m=from + len / 2;  if (len > SMALL) {    long l=from, n=to - 1;    if (len > MEDIUM) {      long s=len / 8;      l=med3(l,l + s,l + 2 * s,comp);      m=med3(m - s,m,m + s,comp);      n=med3(n - 2 * s,n - s,n,comp);    }    m=med3(l,m,n,comp);  }  long a=from, b=a, c=to - 1, d=c;  while (true) {    int comparison;    while (b <= c && ((comparison=comp.compare(b,m)) <= 0)) {      if (comparison == 0) {        if (a == m)         m=b; else         if (b == m)         m=a;        swapper.swap(a++,b);      }      b++;    }    while (c >= b && ((comparison=comp.compare(c,m)) >= 0)) {      if (comparison == 0) {        if (c == m)         m=d; else         if (d == m)         m=c;        swapper.swap(c,d--);      }      c--;    }    if (b > c)     break;    if (b == m)     m=d; else     if (c == m)     m=c;    swapper.swap(b++,c--);  }  long s;  long n=from + len;  s=Math.min(a - from,b - a);  vecSwap(swapper,from,b - s,s);  s=Math.min(d - c,n - d - 1);  vecSwap(swapper,b,n - s,s);  if ((s=b - a) > 1)   quickSort(from,from + s,comp,swapper);  if ((s=d - c) > 1)   quickSort(n - s,n,comp,swapper);}  }
class C{  public void println(){  m_Owner.append(m_LineFeed);}  }
class C{  public static ExceptionMessage translateExceptionMessage(String code,Dictionary<?,?> params) throws MessageTranslatorException {  MessageFormat mf=lookupMessageFormat(code);  String[] indexNames=lookupArrayIndexNames(code);  String fieldRef=lookupFieldReference(code);  String newCode=lookupCodeName(code);  Object[] formatParams=new Object[indexNames.length];  for (int i=0; i < indexNames.length; i++) {    Object param=null;    if (null != params) {      param=params.get(indexNames[i]);    }    if (null == param) {      formatParams[i]="";    } else {      formatParams[i]=param;    }  }  String message=mf.format(formatParams);  if (fieldRef == null) {    return new ExceptionMessage(new ExceptionCode(newCode),message);  } else {    return new ExceptionMessage(new ExceptionCode(newCode,fieldRef),message);  }}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public static Map<String,Object> configureCountry(Boolean caseSensitive){  Map<String,Object> config=new HashMap<>();  config.put(CountryGazetteer.CONFIG_CASE_SENSITIVE,caseSensitive == null ? CountryGazetteer.DEFAULT_CASE_SENSITIVE : caseSensitive);  return config;}  }
class C{  public static short toShortValue(Object o,short defaultValue){  if (o instanceof Short)   return ((Short)o).shortValue();  if (o instanceof Character)   return (short)(((Character)o).charValue()); else   if (o instanceof Boolean)   return (short)((((Boolean)o).booleanValue()) ? 1 : 0); else   if (o instanceof Number)   return (((Number)o).shortValue()); else   if (o instanceof String)   return (short)toDoubleValue(o.toString(),defaultValue); else   if (o instanceof Castable) {    return (short)((Castable)o).castToDoubleValue(defaultValue);  } else   if (o instanceof ObjectWrap)   return toShortValue(((ObjectWrap)o).getEmbededObject(toShort(defaultValue)),defaultValue);  return defaultValue;}  }
class C{  void handleNonce(ParsedDirective pd) throws SaslException {  if (null != m_nonce)   throw new SaslException("Too many nonce values.");  m_nonce=pd.getValue();}  }
class C{  @Override public void close() throws IOException {  OutputStream os=_os;  _os=null;  if (os != null)   os.close();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SRuntimePackage.EXECUTION_EVENT__RAISED:    setRaised((Boolean)newValue);  return;case SRuntimePackage.EXECUTION_EVENT__SCHEDULED:setScheduled((Boolean)newValue);return;case SRuntimePackage.EXECUTION_EVENT__DIRECTION:setDirection((EventDirection)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int hashCode(){  return 42;}  }
class C{  void recoverRegionId(long drId){  long newVal=drId + 1;  if (this.regionIdCtr.get() < newVal) {    this.regionIdCtr.set(newVal);  }}  }
class C{  public static File tryGetCanonicalFile(File file,File errorValue){  if (file == null)   return null;  try {    return file.getCanonicalFile();  } catch (  IOException ex) {    if (FotoLibGlobal.debugEnabled) {      logger.warn("Error tryGetCanonicalFile('" + file.getAbsolutePath() + "') => '"+ errorValue+ "' exception "+ ex.getMessage(),ex);    }    return errorValue;  }}  }
class C{  @Command(description="Activates a certificate") public void activateCertificate(@Param(name="certId",description="Certificate ID") String certId) throws Exception {  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(CERT_ID_PARAM,certId);  try {    SignerClient.execute(new ActivateCert(certId,true));    AuditLogger.log(ACTIVATE_THE_CERTIFICATE_EVENT,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(ACTIVATE_THE_CERTIFICATE_EVENT,XROAD_USER,e.getMessage(),logData);    throw e;  }}  }
class C{  public void doModifyTerrainHeight(Vector3f worldLoc,float radius,float heightFactor){  Terrain terrain=(Terrain)getTerrain(null);  if (terrain == null)   return;  setNeedsSave(true);  int radiusStepsX=(int)(radius / ((Node)terrain).getLocalScale().x);  int radiusStepsZ=(int)(radius / ((Node)terrain).getLocalScale().z);  float xStepAmount=((Node)terrain).getLocalScale().x;  float zStepAmount=((Node)terrain).getLocalScale().z;  List<Vector2f> locs=new ArrayList<Vector2f>();  List<Float> heights=new ArrayList<Float>();  for (int z=-radiusStepsZ; z < radiusStepsZ; z++) {    for (int x=-radiusStepsZ; x < radiusStepsX; x++) {      float locX=worldLoc.x + (x * xStepAmount);      float locZ=worldLoc.z + (z * zStepAmount);      if (isInRadius(locX - worldLoc.x,locZ - worldLoc.z,radius)) {        float h=calculateHeight(radius,heightFactor,locX - worldLoc.x,locZ - worldLoc.z);        locs.add(new Vector2f(locX,locZ));        heights.add(h);      }    }  }  terrain.adjustHeight(locs,heights);  ((Node)terrain).updateModelBound();}  }
class C{  public boolean takesArg(){  return this.takesArgVal;}  }
class C{  public static void clearCache(){  cachedNetworks.clear();}  }
class C{  public TriggerDefinitionDataException(String message){  super(message);}  }
class C{  public ComparatorTransformer(){  this.reverse=false;}  }
class C{  public void testMT() throws Exception {  tryMT(3,10000);}  }
class C{  public Vector3f crossLocal(Vector3f v){  return crossLocal(v.x,v.y,v.z);}  }
class C{  protected TraceImpl(){  super();}  }
class C{  public void _testStatements() throws Exception {  Connection connection=getConnectionViaDriverManager();  connection.setAutoCommit(false);  try {    Statement stmt=connection.createStatement();    ResultSet rs=stmt.executeQuery("SELECT * FROM rdb$database");    rs.close();    RandomSelector selector1=new RandomSelector(stmt,SELECT_TABLE_1,RECORD_COUNT);    RandomSelector selector2=new RandomSelector(stmt,SELECT_TABLE_2,RECORD_COUNT);    Thread thread1=new Thread(selector1,"Selector 1");    Thread thread2=new Thread(selector2,"Selector 2");    thread1.start();    thread2.start();    Thread.sleep(TEST_TIME_SECONDS * 1000);    selector1.stop();    selector2.stop();    thread1.join();    thread2.join();    stmt.close();  }  finally {    connection.close();  }}  }
class C{  @SuppressWarnings("RedundantIfStatement") public static boolean loadByCurrentClassloader(String clsName){  if (clsName.startsWith("org.apache.ignite.internal.processors.hadoop.impl"))   return true;  if (clsName.startsWith("org.apache.ignite.hadoop")) {    if (clsName.contains("org.apache.ignite.hadoop.fs.v1.IgniteHadoopFileSystem") || clsName.contains("org.apache.ignite.hadoop.fs.v2.IgniteHadoopFileSystem") || clsName.contains("org.apache.ignite.hadoop.mapreduce.IgniteHadoopClientProtocolProvider"))     return true;  }  return false;}  }
class C{  public ImplUser(JSONObject data,ImplDiscordAPI api){  this.api=api;  id=data.getString("id");  name=data.getString("username");  try {    avatarId=data.getString("avatar");  } catch (  JSONException ignored) {  }  discriminator=data.getString("discriminator");  bot=data.has("bot") && data.getBoolean("bot");  api.getUserMap().put(id,this);}  }
class C{  public DataIterator iterator(){  return new DataIterator();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (binding: ");  result.append(binding);  result.append(')');  return result.toString();}  }
class C{  public synchronized void newPixels(int x,int y,int w,int h,boolean framenotify){  if (animating) {    if (fullbuffers) {      x=y=0;      w=width;      h=height;    } else {      if (x < 0) {        w+=x;        x=0;      }      if (x + w > width) {        w=width - x;      }      if (y < 0) {        h+=y;        y=0;      }      if (y + h > height) {        h=height - y;      }    }    if ((w <= 0 || h <= 0) && !framenotify) {      return;    }    Enumeration enum_=theConsumers.elements();    while (enum_.hasMoreElements()) {      ImageConsumer ic=(ImageConsumer)enum_.nextElement();      if (w > 0 && h > 0) {        sendPixels(ic,x,y,w,h);      }      if (framenotify && isConsumer(ic)) {        ic.imageComplete(ImageConsumer.SINGLEFRAMEDONE);      }    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.850 -0500",hash_original_method="38FEBB881BBF680269ABAA58BA7CAEF9",hash_generated_method="38FEBB881BBF680269ABAA58BA7CAEF9") boolean isTemporaryModeCLIR(){  return sc != null && sc.equals(SC_CLIR) && dialingNumber != null && (isActivate() || isDeactivate());}  }
class C{  public void endCDATA() throws SAXException {  m_textType=DTM.TEXT_NODE;}  }
class C{  public boolean empty(){  return cards.size() == 0;}  }
class C{  public void testCheckValidity2() throws CertificateNotYetValidException, CertificateExpiredException {  if (this.cert == null) {    return;  }  Date[] date=new Date[8];  Calendar calendar=Calendar.getInstance();  for (int i=0; i < date.length; i++) {    calendar.set(i * 500,Calendar.JANUARY,1);    date[i]=calendar.getTime();  }  Date nb_date=tbt_cert.getNotBefore();  Date na_date=tbt_cert.getNotAfter();  for (int i=0; i < date.length; i++) {    try {      tbt_cert.checkValidity(date[i]);      assertFalse("CertificateExpiredException expected",date[i].compareTo(na_date) > 0);      assertFalse("CertificateNotYetValidException expected",date[i].compareTo(nb_date) < 0);    } catch (    CertificateExpiredException e) {      assertTrue("Unexpected CertificateExpiredException was thrown",date[i].compareTo(na_date) > 0);    }catch (    CertificateNotYetValidException e) {      assertTrue("Unexpected CertificateNotYetValidException " + "was thrown",date[i].compareTo(nb_date) < 0);    }  }  Calendar calendarNow=Calendar.getInstance();  try {    tbt_cert.checkValidity(calendarNow.getTime());  } catch (  CertificateExpiredException e) {  }  Calendar calendarPast=GregorianCalendar.getInstance();  calendarPast.clear();  try {    tbt_cert.checkValidity(calendarPast.getTime());  } catch (  CertificateNotYetValidException e) {  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  CommLockInfoDao.createTable(db,ifNotExists);}  }
class C{  @SuppressWarnings("unused") public SerializationHolder(){}  }
class C{  public void execute() throws MojoExecutionException {  if (!featuresDirectory.exists()) {    throw new MojoExecutionException("Features directory does not exist");  }  final Collection<File> featureFiles=FileUtils.listFiles(featuresDirectory,new String[]{"feature"},true);  createOutputDirIfRequired();  fileGenerator=createFileGenerator();  fileGenerator.generateCucumberITFiles(outputDirectory,featureFiles);  getLog().info("Adding " + outputDirectory.getAbsolutePath() + " to test-compile source root");  project.addTestCompileSourceRoot(outputDirectory.getAbsolutePath());}  }
class C{  public int height(){  if (height == null)   return NO_HEIGHT;  return height;}  }
class C{  private void encodeCodecData(final RevisionCodecData codecData) throws EncodingException {  this.codecData=codecData;  data.writeBit(0);  data.writeBit(0);  data.writeBit(0);  this.data.writeValue(5,codecData.getBlocksizeS());  this.data.writeValue(5,codecData.getBlocksizeE());  this.data.writeValue(5,codecData.getBlocksizeB());  this.data.writeValue(5,codecData.getBlocksizeL());  data.writeFillBits();}  }
class C{  public boolean hasVerificationComboCoverage(){  return hasExtension(GwoVerificationComboCoverage.class);}  }
class C{  protected void sendUpdate(TabListEntry entry,SPacketPlayerListItem.Action action){  SPacketPlayerListItem packet=new SPacketPlayerListItem();  packet.action=action;  ((IMixinSPacketPlayerListItem)packet).addEntry(entry);  this.player.connection.sendPacket(packet);}  }
class C{  void appendLocalizedTags(Document xmldoc,Element parent,TechnicalProduct technicalProduct){  List<TechnicalProductTag> tags=technicalProduct.getTags();  for (  TechnicalProductTag tag : tags) {    Element element=xmldoc.createElement("LocalizedTag");    element.setAttribute("locale",tag.getTag().getLocale());    element.setTextContent(tag.getTag().getValue());    parent.appendChild(element);  }}  }
class C{  @Deprecated public PluginLoader(boolean fake,URL url) throws PluginException {  classLoader=getClass().getClassLoader();  classLoaderForResources=classLoader;  corePlugin=false;  initialPlugin=true;  optionalPlugin=false;  loadedFrom=url;  try {    loadedFromUri=loadedFrom.toURI();  } catch (  URISyntaxException e) {    throw new IllegalArgumentException("Failed to parse uri: " + loadedFrom);  }  jarName=getJarName(loadedFrom);  plugin=null;}  }
class C{  public static JPanel stackSouth(JComponent... components){  return stack(BorderLayout.SOUTH,components);}  }
class C{  public boolean isPassthroughSupported(String mimeType){  return audioCapabilities != null && audioCapabilities.supportsEncoding(getEncodingForMimeType(mimeType));}  }
class C{  public thead addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private static void displayAltOcsp(ClientCertPolicy tenantClientCertPolicy) throws Exception {  if (tenantClientCertPolicy == null) {    System.out.println("No ClientCertPolicy configured");    return;  }  System.out.println("Alternative OCSP responders:");  HashMap<String,AlternativeOCSPList> ocspSiteMap=tenantClientCertPolicy.get_siteOCSPList();  if (ocspSiteMap != null) {    for (    String key : ocspSiteMap.keySet()) {      displayAltOcspSite(ocspSiteMap.get(key));    }  }}  }
class C{  @RequestMapping(value="/points",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Points> update(@Valid @RequestBody Points points) throws URISyntaxException {  log.debug("REST request to update Points : {}",points);  if (points.getId() == null) {    return create(points);  }  Points result=pointsRepository.save(points);  pointsSearchRepository.save(points);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("points",points.getId().toString())).body(result);}  }
class C{  public void enableTextColorDataExtraction(){  isColorExtracted=true;}  }
class C{  @ApiMethod(httpMethod="DELETE") public final void unregisterDevice(@Named("regId") final String regId,final User user) throws UnauthorizedException {  EndpointUtil.throwIfNotAdmin(user);  Registration record=findRecord(regId);  if (record == null) {    LOG.info("Device " + regId + " not registered, skipping unregister");    return;  }  ofy().delete().entity(record).now();}  }
class C{  public boolean matches(GridCacheVersion ver,UUID nodeId,long threadId){  return ver.equals(this.ver) || (nodeId.equals(this.nodeId) && threadId == this.threadId);}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  @DSComment("Wifi subsystem") @DSSpec(DSCat.WIFI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.317 -0500",hash_original_method="4462A23EEF44DC4F050ECB7EA4566A65",hash_generated_method="EABBD524FFC32EC10FC20FCC2FE824B4") public boolean reassociate(){  try {    mService.reassociate();    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public StraightLineFigure(){  line=new Line2D.Double();}  }
class C{  public boolean memberEquals(ClientId other){  if (other == null) {    return false;  }  return getXRoadInstance().equals(other.getXRoadInstance()) && getMemberClass().equals(other.getMemberClass()) && getMemberCode().equals(other.getMemberCode());}  }
class C{  public boolean remove(Object o){  for (Entry<E> e=header.next; e != header; e=e.next) {    if (o == e.element) {      remove(e);      return true;    }  }  return false;}  }
class C{  public void addModelChange(String tableName,ModelValidator listener){  if (tableName == null || listener == null)   return;  String propertyName=m_globalValidators.contains(listener) ? tableName + "*" : tableName + listener.getAD_Client_ID();  ArrayList<ModelValidator> list=(ArrayList<ModelValidator>)m_modelChangeListeners.get(propertyName);  if (list == null) {    list=new ArrayList<ModelValidator>();    list.add(listener);    m_modelChangeListeners.put(propertyName,list);  } else   list.add(listener);}  }
class C{  public void removeConversation(int position){  conversations.remove(position);  notifyDataSetChanged();}  }
class C{  @Override public boolean match(SimEvent ev){  int src=ev.getSource();  for (  int id : ids) {    if (src == id) {      return false;    }  }  return true;}  }
class C{  public static void validateUpdate(FieldMapping oldFieldMapping,FieldMapping newFieldMapping) throws TypeUpdateException {  Map<String,AttributeInfo> newFields=newFieldMapping.fields;  for (  AttributeInfo attribute : oldFieldMapping.fields.values()) {    if (newFields.containsKey(attribute.name)) {      AttributeInfo newAttribute=newFields.get(attribute.name);      if (!newAttribute.equals(attribute)) {        if (attribute.multiplicity == Multiplicity.REQUIRED && newAttribute.multiplicity == Multiplicity.OPTIONAL) {          continue;        } else {          throw new TypeUpdateException("Attribute " + attribute.name + " can't be updated");        }      }    } else {      throw new TypeUpdateException("Old Attribute " + attribute.name + " is missing");    }  }  Set<String> newAttributes=new HashSet<>(ImmutableList.copyOf(newFields.keySet()));  newAttributes.removeAll(oldFieldMapping.fields.keySet());  for (  String attributeName : newAttributes) {    AttributeInfo newAttribute=newFields.get(attributeName);    if (newAttribute.multiplicity == Multiplicity.REQUIRED) {      throw new TypeUpdateException("Can't add required attribute " + attributeName);    }  }}  }
class C{  protected IJavaCompletionProposal createJavaCompletionProposal(CompletionProposal proposal){switch (proposal.getKind()) {case CompletionProposal.KEYWORD:    return createKeywordProposal(proposal);case CompletionProposal.PACKAGE_REF:  return createPackageProposal(proposal);case CompletionProposal.TYPE_REF:return createTypeProposal(proposal);case CompletionProposal.JAVADOC_TYPE_REF:return createJavadocLinkTypeProposal(proposal);case CompletionProposal.FIELD_REF:case CompletionProposal.JAVADOC_FIELD_REF:case CompletionProposal.JAVADOC_VALUE_REF:return createFieldProposal(proposal);case CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER:return createFieldWithCastedReceiverProposal(proposal);case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER:case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.JAVADOC_METHOD_REF:return createMethodReferenceProposal(proposal);case CompletionProposal.METHOD_DECLARATION:return createMethodDeclarationProposal(proposal);case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:return createAnonymousTypeProposal(proposal,getInvocationContext());case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:return createAnonymousTypeProposal(proposal,null);case CompletionProposal.LABEL_REF:return createLabelProposal(proposal);case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:return createLocalVariableProposal(proposal);case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:return createAnnotationAttributeReferenceProposal(proposal);case CompletionProposal.JAVADOC_BLOCK_TAG:case CompletionProposal.JAVADOC_PARAM_REF:return createJavadocSimpleProposal(proposal);case CompletionProposal.JAVADOC_INLINE_TAG:return createJavadocInlineTagProposal(proposal);case CompletionProposal.POTENTIAL_METHOD_DECLARATION:default :return null;}}  }
class C{  public boolean isCellEditable(EventObject e){  return false;}  }
class C{  public NamedProfileCache(){}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  public static String[] split(final CharSequence charSequence,final char separator){  if (isEmpty(charSequence)) {    return EMPTY_ARRAY;  }  final int originalSeparatorsCount=countSeparatedCharAppearances(charSequence,separator);  int separatorsCount=originalSeparatorsCount;  if (startsWith(charSequence,separator)) {    separatorsCount--;  }  if (charSequence.length() > 1 && endsWith(charSequence,separator)) {    separatorsCount--;  }  if (separatorsCount <= 0) {    if (originalSeparatorsCount == 0) {      return new String[]{charSequence.toString()};    } else     if (isSameChar(charSequence)) {      return EMPTY_ARRAY;    }    return new String[]{removeCharacter(charSequence.toString(),separator)};  }  final String[] result=new String[separatorsCount + 1];  int currentResultIndex=0;  final StringBuilder builder=new StringBuilder();  for (int index=0, length=charSequence.length(); index < length; index++) {    final char character=charSequence.charAt(index);    if (character == separator) {      if (isNotEmpty(builder)) {        result[currentResultIndex++]=builder.toString();        clearBuilder(builder);      }    } else {      builder.append(character);    }  }  if (isNotEmpty(builder)) {    result[currentResultIndex++]=builder.toString();  }  return result;}  }
class C{  @Nullable public TypeDeclarationNode convertTypeNodeAST(Node n){  return convertTypeNodeAST(n,false);}  }
class C{  private void printTypeArgs(List<Type> args,Object arg){  if (args != null) {    printer.print("<");    for (Iterator<Type> i=args.iterator(); i.hasNext(); ) {      Type t=i.next();      t.accept(this,arg);      if (i.hasNext()) {        printer.print(", ");      }    }    printer.print(">");  }}  }
class C{  protected void updateForLocalVariableAssignment(LocalVariable receiver,V val){  removeConflicting(receiver);  if (val != null) {    localVariableValues.put(receiver,val);  }}  }
class C{  private void stageCreditCreations(ImmutableMultimap<Registrar,BigMoney> creditMap){  DateTime now=DateTime.now(UTC);  CurrencyUnit currency=Registry.get(tld).getCurrency();  for (  Registrar registrar : creditMap.keySet()) {    Money totalAmount=BigMoney.total(currency,creditMap.get(registrar)).toMoney(RoundingMode.UP);    System.out.printf("Total auction credit balance for %s: %s\n",registrar.getClientId(),totalAmount);    RegistrarCredit credit=new RegistrarCredit.Builder().setParent(registrar).setType(CreditType.AUCTION).setCreationTime(now).setCurrency(currency).setTld(tld).build();    RegistrarCreditBalance creditBalance=new RegistrarCreditBalance.Builder().setParent(credit).setEffectiveTime(effectiveTime).setWrittenTime(now).setAmount(totalAmount).build();    stageEntityChange(null,credit);    stageEntityChange(null,creditBalance);  }}  }
class C{  public boolean matches(AbstractList<Expression> expressions,int idx){  for (int i=0; i < size(); ++idx, ++i) {    if (idx >= expressions.size()) {      return false;    }    Expression curr=expressions.get(idx);    String word=get(i);    if (!curr.getOriginal().equalsIgnoreCase(word)) {      return false;    }    if (i < size() - 1 && curr.getBreakFlag()) {      return false;    }  }  return true;}  }
class C{  public Task createDisk(String projectId,DiskCreateSpec diskCreateSpec) throws IOException {  String path=String.format("%s/%s/disks",getBasePath(),projectId);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(diskCreateSpec));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public static BlockSnapshotSessionRestRep map(DbClient dbClient,BlockSnapshotSession from){  if (from == null) {    return null;  }  BlockSnapshotSessionRestRep to=new BlockSnapshotSessionRestRep();  mapDataObjectFields(from,to);  URI consistencyGroup=from.getConsistencyGroup();  if (consistencyGroup != null) {    to.setConsistencyGroup(toRelatedResource(ResourceTypeEnum.BLOCK_CONSISTENCY_GROUP,consistencyGroup));  }  NamedURI parentNamedURI=from.getParent();  if (parentNamedURI != null) {    URI parentURI=parentNamedURI.getURI();    URIQueryResultList results=new URIQueryResultList();    dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeByAssociatedVolumesConstraint(parentURI.toString()),results);    Iterator<URI> resultsIter=results.iterator();    if (resultsIter.hasNext()) {      parentURI=resultsIter.next();    }    if (URIUtil.isType(parentURI,Volume.class)) {      to.setParent(toRelatedResource(ResourceTypeEnum.VOLUME,parentURI));    } else {      to.setParent(toRelatedResource(ResourceTypeEnum.BLOCK_SNAPSHOT,parentURI));    }  }  NamedURI projectURI=from.getProject();  if (projectURI != null) {    to.setProject(toRelatedResource(ResourceTypeEnum.PROJECT,projectURI.getURI()));  }  URI storageURI=from.getStorageController();  if (storageURI != null) {    to.setStorageController(storageURI);  }  StringSet linkedTargetIds=from.getLinkedTargets();  if ((linkedTargetIds != null) && (!linkedTargetIds.isEmpty())) {    List<RelatedResourceRep> linkedTargetReps=new ArrayList<RelatedResourceRep>();    for (    String linkedTargetId : linkedTargetIds) {      URI linkedTargetURI=URI.create(linkedTargetId);      linkedTargetReps.add(toRelatedResource(ResourceTypeEnum.BLOCK_SNAPSHOT,linkedTargetURI));    }    to.setLinkedTargets(linkedTargetReps);  }  to.setSessionLabel(from.getSessionLabel());  to.setReplicationGroupInstance(from.getReplicationGroupInstance());  to.setSessionSetName(from.getSessionSetName());  return to;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void mDateSelectedBackground(int position){  for (int i=0; i < textViewArray.length; i++) {    if (position != i) {      textViewArray[i].setBackgroundColor(Color.TRANSPARENT);    }  }}  }
class C{  public DataGetter(URL url) throws Exception {  if (!url.getFile().endsWith(".pdf"))   throw new Exception("CoursePicker.DataGetter Error: url must end with .pdf");  Pair<Boolean,String> filePair=this.isOnLocal(url);  if (filePair.fst) {    this.data=readFile(filePair.snd,StandardCharsets.UTF_8);  } else {    URLConnection connection=url.openConnection();    this.pd=PDDocument.load(connection.getInputStream());    this.stripper=new PDFTextStripper();    this.data=stripper.getText(pd);    pd.close();    PrintWriter fileOut=new PrintWriter(filePair.snd);    fileOut.print(this.data);    fileOut.close();  }}  }
class C{  @Override public void performAdditionalDomainCreateLogic(DomainResource domain,String clientId,DateTime asOfDate,int years,EppInput eppInput,HistoryEntry historyEntry) throws EppException {  FlagsCreateCommandExtension flags=eppInput.getSingleExtension(FlagsCreateCommandExtension.class);  if (flags == null) {    return;  }  messageToThrow=Joiner.on(',').join(flags.getFlags());}  }
class C{  public Completed(Date completed){  super(completed);}  }
class C{  public TimeSeries(String title){  super(title);}  }
class C{  private Tokenizer addReader(Tokenizer tokenizer,Reader input) throws IOException {  tokenizer.setReader(input);  return tokenizer;}  }
class C{  private void _releaseProtection(){  DirectoryPage dp=this;  while (dp != null) {    if (--dp.referenceCount == 0) {      htree.writeNodeRecursive(dp);    }    dp=dp.getParentDirectory();  }}  }
class C{  public static String serialise(Node node){  try {    DOMImplementationRegistry registry=DOMImplementationRegistry.newInstance();    DOMImplementationLS lsImpl=(DOMImplementationLS)registry.getDOMImplementation("LS");    LSSerializer serializer=lsImpl.createLSSerializer();    return serializer.writeToString(node);  } catch (  Exception e) {    log.fine("could not serialise XML node: " + e);    return "";  }}  }
class C{  public TextLineEncoder(Charset charset,String delimiter){  this(charset,new LineDelimiter(delimiter));}  }
class C{  public void inOrder(){  if (left != null)   left.inOrder();  if (right != null)   right.inOrder();}  }
class C{  public void testEncode(){  assertTrue("encode failed",Arrays.equals(nonceAttribute.encode(),attributeBinValue));}  }
class C{  public BufferedHeader(final CharArrayBuffer buffer) throws ParseException {  super();  if (buffer == null) {    throw new IllegalArgumentException("Char array buffer may not be null");  }  int colon=buffer.indexOf(':');  if (colon == -1) {    throw new ParseException("Invalid header: " + buffer.toString());  }  String s=buffer.substringTrimmed(0,colon);  if (s.length() == 0) {    throw new ParseException("Invalid header: " + buffer.toString());  }  this.buffer=buffer;  this.name=s;  this.valuePos=colon + 1;}  }
class C{  public static ActionErrors validarDatosInforme(InformeForm informeForm,MessageResources mr,Locale locale,String path){  ActionErrors errores=new ActionErrors();  boolean datosValidos=true;  int contador=0;  if (informeForm != null) {    if (isNuloOVacio(informeForm.getDescription())) {      datosValidos=false;      contador++;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.informes.descripcion.required");      errores.add("Error interno",error);    }    if (isNuloOVacio(informeForm.getTypeReport())) {      datosValidos=false;      contador++;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.informes.tipo.required");      errores.add("Error interno",error);    }    if (isNuloOVacio(informeForm.getTypeArch())) {      datosValidos=false;      contador++;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.informes.tipo.archivo.required");      errores.add("Error interno",error);    }    if (!(isNuloOVacio(informeForm.getInformeFile()))) {      if (isNuloOVacio(informeForm.getInformeFile().getFileName())) {        datosValidos=false;        contador++;        ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.informes.archivo.required");        errores.add("Error interno",error);      }      int size=informeForm.getInformeFile().getFileSize();      String extension[]=informeForm.getInformeFile().getFileName().split("\\.");      String exten=extension[extension.length - 1].toLowerCase();      if (size > 4194304) {        datosValidos=false;        contador++;        ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.informes.zip.size");        errores.add("Error interno",error);      } else {        if (exten.toLowerCase().equals(InformesKeys.ZIP)) {          if (isInvalidoContenidoZip(informeForm,path)) {            datosValidos=false;            contador++;            ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.informes.contenido.illegal");            errores.add("Error interno",error);          }        } else {          datosValidos=false;          contador++;          ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.informes.contenido.zip");          errores.add("Error interno",error);        }      }    }  }  if (datosValidos) {    errores=null;  }  return errores;}  }
class C{  public String toKeyString(){  return (HexString.toHexString(nodeId) + "|" + (portId & 0xffff));}  }
class C{  @Override public void addTrainingSetListener(TrainingSetListener tsl){  m_trainingSetListeners.addElement(tsl);  if (m_format != null) {    TrainingSetEvent e=new TrainingSetEvent(this,m_format);    tsl.acceptTrainingSet(e);  }}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  private void updateBounds(){  PNode parentNode=((PNodeLocator)getLocator()).getNode();  double x=0.0d - (parentNode.getBounds().getWidth() * EXTEND_FACTOR);  double y=0.0d - (parentNode.getBounds().getHeight() * EXTEND_FACTOR);  double width=parentNode.getBounds().getWidth() + 2 * (parentNode.getBounds().getWidth() * EXTEND_FACTOR);  double height=parentNode.getBounds().getHeight() + 2 * (parentNode.getBounds().getHeight() * EXTEND_FACTOR);  append(new Rectangle2D.Float((float)x,(float)y,(float)width,(float)height),false);}  }
class C{  public UmmalquraCalendar(int year,int month,int dayOfMonth){  this(year,month,dayOfMonth,0,0,0);}  }
class C{  @Override public void afterPropertiesSet() throws IOException, TemplateException {  if (this.configuration == null) {    this.configuration=createConfiguration();  }}  }
class C{  protected ZeroConfService(ServiceInfo service){  this.serviceInfo=service;}  }
class C{  public static byte[] toByteArray(String s){  byte[] buf=new byte[s.length() / 2];  int j=0;  for (int i=0; i < buf.length; i++) {    buf[i]=(byte)((Character.digit(s.charAt(j++),16) << 4) | Character.digit(s.charAt(j++),16));  }  return buf;}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("jetty4x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty4xEmbeddedStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty5x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty5xEmbeddedStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty6x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty6xEmbeddedStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty6x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jetty6xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty6x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Jetty6xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty6x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JettyRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jetty7x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty7xEmbeddedStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jetty7xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty7x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Jetty7xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty7x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JettyRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jetty8x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty8xEmbeddedStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty8x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jetty8xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty8x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Jetty8xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty8x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JettyRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jetty9x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty9xEmbeddedStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jetty9xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty9x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Jetty9xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jetty9x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JettyRuntimeConfiguration.class);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/storage-systems/{system_id}") @CheckPermission(roles={Role.SYSTEM_ADMIN}) public TaskResourceRep updateStorageSystem(@PathParam("id") URI id,StorageSystemSMISUpdateParam param) throws ControllerException {  StorageSystem system=_dbClient.queryObject(StorageSystem.class,id);  ArgValidator.checkEntity(system,id,isIdEmbeddedInURL(id));  if (system.getSystemType().equals(StorageSystem.Type.vmax.name())) {    throw APIException.badRequests.unableToUpdateStorageSystem(StorageSystem.Type.vmax.name());  }  String taskId=UUID.randomUUID().toString();  if (param.getSmisProviders() == null || param.getSmisProviders().isEmpty()) {    throw APIException.badRequests.invalidParameterSMISProviderListIsEmpty();  }  URI[] providers=new URI[param.getSmisProviders().size()];  int idx=0;  for (  URI provider : param.getSmisProviders()) {    StorageProvider providerObj=_dbClient.queryObject(StorageProvider.class,provider);    ArgValidator.checkEntity(providerObj,provider,isIdEmbeddedInURL(provider));    if (!providerObj.connected()) {      throw APIException.badRequests.invalidParameterSMISProviderNotConnected(providerObj.getIPAddress());    }    if (system.getProviders() != null && system.getProviders().contains(provider)) {      throw APIException.badRequests.invalidParameterSMISProviderAlreadyRegistered(providerObj.getIPAddress());    }    if (system.getProviders() != null && system.getProviders().contains(provider)) {      throw APIException.badRequests.invalidParameterSMISProviderAlreadyRegistered(providerObj.getIPAddress());    }    providers[idx++]=provider;  }  updateStorageObj(system,param);  BlockController controller=getController(BlockController.class,system.getSystemType());  Operation op=_dbClient.createTaskOpStatus(StorageSystem.class,system.getId(),taskId,ResourceOperationTypeEnum.UPDATE_STORAGE_SYSTEM);  boolean activeProvider=(system.getProviders() == null) || (system.getProviders().isEmpty());  controller.addStorageSystem(system.getId(),providers,activeProvider,taskId);  return toTask(system,taskId,op);}  }
class C{  public Zipper<A> filter(Predicate<? super A> predicate){  List<A> front2=front.filter(predicate);  return new Zipper<>(front2,back.filter(predicate),front2.size());}  }
class C{  boolean isValidHeader(){  if (getNumberOfCards() < MIN_NUMBER_OF_CARDS_FOR_VALID_HEADER) {    return false;  }  this.iter=iterator();  String key=this.iter.next().getKey();  if (!key.equals(SIMPLE.key()) && !key.equals(XTENSION.key())) {    return false;  }  key=this.iter.next().getKey();  if (!key.equals(BITPIX.key())) {    return false;  }  key=this.iter.next().getKey();  if (!key.equals(NAXIS.key())) {    return false;  }  while (this.iter.hasNext()) {    key=this.iter.next().getKey();  }  return key.equals(END.key());}  }
class C{  public void incProcessedMessages(long messages){  this.stats.incLong(processedMessagesId,messages);}  }
class C{  public boolean isUpdatable(){  return isUpdatable;}  }
class C{  public CModuleContainerComponent(final JTree projectTree,final IDatabase database){  super(new CModulesTable(projectTree,database),new CModuleFilterCreator(),new CModuleFilterHelp());  m_database=database;  m_database.addListener(m_listener);  addListener(m_filterFieldListener);  updateBorderText(getBorderText());}  }
class C{  public SQLNonTransientException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  void relaxNodeLogic(final Link l,final PseudoRemovePriorityQueue<Node> pendingNodes,final double currTime,final double currCost,final PreProcessDijkstra.DeadEndData ddOutData){  if (this.pruneDeadEnds) {    if (canPassLink(l)) {      Node n=l.getToNode();      PreProcessDijkstra.DeadEndData ddData=getPreProcessData(n);      if (ddData.getDeadEndEntryNode() == null || ddOutData.getDeadEndEntryNode() != null)       addToPendingNodes(l,n,pendingNodes,currTime,currCost); else {        TO_NODES:         for (        Node deadEndEntryNode : deadEndEntryNodes)         if (deadEndEntryNode != null && deadEndEntryNode.getId() == ddData.getDeadEndEntryNode().getId()) {          addToPendingNodes(l,n,pendingNodes,currTime,currCost);          break TO_NODES;        }      }    }  } else {    if (canPassLink(l)) {      addToPendingNodes(l,l.getToNode(),pendingNodes,currTime,currCost);    }  }}  }
class C{  public boolean hasOrInheritsRelationship(Vertex type,Vertex target){  return hasOrInheritsRelationship(type,target,null);}  }
class C{  public final Enumeration<Body> bodiesRev(){  return bodyTabRev.elementsRev();}  }
class C{  public MissingQueryBuilder existence(boolean existence){  this.existence=existence;  return this;}  }
class C{  private void emitClear(String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getClearName(fieldName));  builder.append("() {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".clear();\n");  builder.append("    }\n\n");}  }
class C{  public boolean isBrowse(){  return X_AD_Menu.ACTION_SmartBrowse.equals(m_imageIndicator);}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xF1657B22,version=150,checkInsideInterrupt=true) public int sceHttpLoadSystemCookie(){  checkHttpInit();  if (isSystemCookieLoaded) {    return SceKernelErrors.ERROR_HTTP_ALREADY_INIT;  } else   if (maxMemSize < PSP_HTTP_SYSTEM_COOKIE_HEAP_SIZE) {    return SceKernelErrors.ERROR_HTTP_NO_MEMORY;  } else {    isSystemCookieLoaded=true;    return 0;  }}  }
class C{  final public void Statement() throws ParseException {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IF_DIRECTIVE:    IfStatement();  break;case STOP_DIRECTIVE:StopStatement();break;default :jj_la1[1]=jj_gen;if (jj_2_1(2)) {Reference();} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case SINGLE_LINE_COMMENT:case FORMAL_COMMENT:case MULTI_LINE_COMMENT:Comment();break;case SET_DIRECTIVE:SetDirective();break;case ESCAPE_DIRECTIVE:EscapedDirective();break;case DOUBLE_ESCAPE:Escape();break;case WORD:Directive();break;case LPAREN:case RPAREN:case ESCAPE:case TEXT:case STRING_LITERAL:case NUMBER_LITERAL:case DOT:case LCURLY:case RCURLY:Text();break;default :jj_la1[2]=jj_gen;jj_consume_token(-1);throw new ParseException();}}}}  }
class C{  public CharCharMap(){  this(DEFAULT_INITIAL_SIZE,DEFAULT_LOAD_FACTOR);}  }
class C{  @Override protected void handleClose() throws QueryEvaluationException {  try {    super.handleClose();  }  finally {    long size=clearIncludeSet();    used.addAndGet(-size);  }}  }
class C{  public <T>Request<T> add(Request<T> request){  this.mRequest=request;  return request;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public boolean isIterable(){  if (isIterable_computed) {    return isIterable_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  isIterable_value=isIterable_compute();  if (isFinal && num == state().boundariesCrossed)   isIterable_computed=true;  return isIterable_value;}  }
class C{  public void removeWorkspaceComponent(final WorkspaceComponent component){  LOGGER.debug("removing component: " + component);  this.getCouplingManager().removeCouplings(component);  componentList.remove(component);  this.setWorkspaceChanged(true);  fireWorkspaceComponentRemoved(component);}  }
class C{  private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  inequalitySymbol=(String)in.readObject();  timeStamp=in.readLong();}  }
class C{  void createDepthTexture(){  depthTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,depthTexture);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,shadowMapSize,shadowMapSize,0,GL_DEPTH_COMPONENT,GL_UNSIGNED_BYTE,(ByteBuffer)null);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public void addData(DataSet d){  dataSet.add(d);}  }
class C{  public final void incremental(double value,int type){  double y=0., yl=0., yr=0.;switch (type) {case 1:    nl+=1;  nr-=1;sl+=value;sr-=value;s2l+=value * value;s2r-=value * value;break;case -1:nl-=1;nr+=1;sl-=value;sr+=value;s2l-=value * value;s2r+=value * value;break;case 0:break;default :System.err.println("wrong type in Impurity.incremental().");}if (nl <= 0.0) {vl=0.0;sdl=0.0;} else {vl=(nl * s2l - sl * sl) / ((double)nl * ((double)nl));vl=Math.abs(vl);sdl=Math.sqrt(vl);}if (nr <= 0.0) {vr=0.0;sdr=0.0;} else {vr=(nr * s2r - sr * sr) / ((double)nr * ((double)nr));vr=Math.abs(vr);sdr=Math.sqrt(vr);}if (order <= 0) System.err.println("Impurity order less than zero in Impurity.incremental()"); else if (order == 1) {y=va;yl=vl;yr=vr;} else {y=Math.pow(va,1. / order);yl=Math.pow(vl,1. / order);yr=Math.pow(vr,1. / order);}if (nl <= 0.0 || nr <= 0.0) impurity=0.0; else {impurity=y - ((double)nl / (double)n) * yl - ((double)nr / (double)n) * yr;}}  }
class C{  public void projectionChanged(ProjectionEvent e){  super.projectionChanged(e);  logger.info("calling helper - projection changed.");synchronized (this) {    if (helper == null) {      setHelper();    }    helper.projectionChanged(e);  }}  }
class C{  @Override public void flush() throws IOException {  for (int i=0; i < writer.length; i++) {    writer[i].flush();  }}  }
class C{  public Literal rdfValue(){  return val;}  }
class C{  protected double[][] toArray(Population population){  double[][] array=new double[population.size()][];  for (int i=0; i < population.size(); i++) {    Solution solution=population.get(i);    array[i]=new double[solution.getNumberOfObjectives()];    for (int j=0; j < solution.getNumberOfObjectives(); j++) {      array[i][j]=solution.getObjective(j);    }  }  return array;}  }
class C{  private void performZoom(MotionEvent event){  if (event.getPointerCount() >= 2) {    OnChartGestureListener l=mChart.getOnChartGestureListener();    float totalDist=spacing(event);    if (totalDist > 10f) {      PointF t=getTrans(mTouchPointCenter.x,mTouchPointCenter.y);      if (mTouchMode == PINCH_ZOOM) {        mLastGesture=ChartGesture.PINCH_ZOOM;        float scale=totalDist / mSavedDist;        boolean isZoomingOut=(scale < 1);        boolean canZoomMoreX=isZoomingOut ? mChart.getViewPortHandler().canZoomOutMoreX() : mChart.getViewPortHandler().canZoomInMoreX();        float scaleX=(mChart.isScaleXEnabled()) ? scale : 1f;        float scaleY=(mChart.isScaleYEnabled()) ? scale : 1f;        if (mChart.isScaleYEnabled() || canZoomMoreX) {          mMatrix.set(mSavedMatrix);          mMatrix.postScale(scaleX,scaleY,t.x,t.y);          if (l != null)           l.onChartScale(event,scaleX,scaleY);        }      } else       if (mTouchMode == X_ZOOM && mChart.isScaleXEnabled()) {        mLastGesture=ChartGesture.X_ZOOM;        float xDist=getXDist(event);        float scaleX=xDist / mSavedXDist;        boolean isZoomingOut=(scaleX < 1);        boolean canZoomMoreX=isZoomingOut ? mChart.getViewPortHandler().canZoomOutMoreX() : mChart.getViewPortHandler().canZoomInMoreX();        if (canZoomMoreX) {          mMatrix.set(mSavedMatrix);          mMatrix.postScale(scaleX,1f,t.x,t.y);          if (l != null)           l.onChartScale(event,scaleX,1f);        }      } else       if (mTouchMode == Y_ZOOM && mChart.isScaleYEnabled()) {        mLastGesture=ChartGesture.Y_ZOOM;        float yDist=getYDist(event);        float scaleY=yDist / mSavedYDist;        mMatrix.set(mSavedMatrix);        mMatrix.postScale(1f,scaleY,t.x,t.y);        if (l != null)         l.onChartScale(event,1f,scaleY);      }    }  }}  }
class C{  private void delay(){  if (_packetDelay > 0) {    try {      Thread.sleep(_packetDelay);    } catch (    InterruptedException e) {    }  }}  }
class C{  public static ColorModel coerceData(WritableRaster wr,ColorModel cm,boolean newAlphaPreMult){  if (!cm.hasAlpha())   return cm;  if (cm.isAlphaPremultiplied() == newAlphaPreMult)   return cm;  if (newAlphaPreMult) {    multiplyAlpha(wr);  } else {    divideAlpha(wr);  }  return coerceColorModel(cm,newAlphaPreMult);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.381 -0400",hash_original_method="19F9C1719138FA897C10FCE8AB2E8039",hash_generated_method="49FD28DF421FEF8CD1F21A9ACDBF2702") @Override public int read(byte[] b) throws IOException {  return this.read(b,0,b.length);}  }
class C{  private static URI fixUri(URI uri0,Configuration cfg){  if (uri0 == null)   return FileSystem.getDefaultUri(cfg);  String scheme=uri0.getScheme();  String authority=uri0.getAuthority();  if (authority == null) {    URI dfltUri=FileSystem.getDefaultUri(cfg);    if (scheme == null || (scheme.equals(dfltUri.getScheme()) && dfltUri.getAuthority() != null))     return dfltUri;  }  return uri0;}  }
class C{  public void clear(){  q.clear();}  }
class C{  public static void reportSyncStatus(ProfileSyncService syncService){  if (!syncService.isSyncInitialized()) {    reportStatus(STATUS_SYNC_NOT_INITIALIZED);  } else   if (!syncService.getActiveDataTypes().contains(ModelType.TYPED_URLS)) {    reportStatus(STATUS_SYNC_NOT_SYNCING_URLS);  } else   if (!syncService.getPassphraseType().equals(PassphraseType.KEYSTORE_PASSPHRASE)) {    reportStatus(STATUS_SYNC_NOT_KEYSTORE_PASSPHRASE);  } else {    reportStatus(STATUS_SYNC_OTHER);  }}  }
class C{  public boolean isFailOnFileNotFound(){  return failOnFileNotFound;}  }
class C{  public static String decode(ByteBuffer buff) throws CharacterCodingException {  CharBuffer chars=UTF8Decoder.decode(buff);  return chars.toString();}  }
class C{  @DSModeled(DSC.SAFE) public void printShortString(PrintWriter pw){  char c=0;  pw.append(c);}  }
class C{  protected void createRandomWspHeaderStrAppId(byte[] arr,Random rd,int headerStart,boolean randomStr){  boolean appIdAdded=false;  Log.d(LOG_TAG,"random arr length:" + arr.length);  String typename[]=new String[]{"short int","long int","string","uint32"};  while (!appIdAdded) {    int type;    int index=headerStart;    int len=arr.length;    int i;    boolean addAppid=false;    int tmpVal=0;    int tmpVal2=0;    while (true) {      int add;      type=rd.nextInt(3);switch (type) {case 0:        if (index > 100 && !appIdAdded)         addAppid=true;      add=1;    break;case 1:  add=1 + rd.nextInt(29);break;default :add=2 + rd.nextInt(10);break;}if (index + add >= len) break;switch (type) {case 0:if (!addAppid) {do {arr[index]=(byte)(0x80 | rd.nextInt(128));} while (arr[index] == (byte)0xaf);} else {Log.d(LOG_TAG,"appId added.");arr[index]=(byte)0xaf;}break;case 1:arr[index]=(byte)(add - 1);tmpVal2=0;for (i=1; i < add; i++) {tmpVal=rd.nextInt(255);tmpVal2=(tmpVal2 << 8) | tmpVal;arr[index + i]=(byte)tmpVal;}if (tmpVal2 == 0x2f) arr[index + 1]++;break;default :for (i=0; i < add - 1; i++) {tmpVal=rd.nextInt(127);if (tmpVal < 32) tmpVal=(32 + tmpVal);arr[index + i]=(byte)tmpVal;}arr[index + i]=(byte)0x0;break;}if (LOCAL_LOGV) {Log.d(LOG_TAG,"field name index:" + index);Log.d(LOG_TAG,"type:" + typename[type] + ", add:"+ add);if (type != 2) {for (i=index; i < index + add; i++) {System.out.print(Integer.toHexString(0xff & arr[i]));System.out.print(' ');}} else {System.out.print(Integer.toHexString(0xff & arr[index]));System.out.print(' ');String str=new String(arr,index + 1,add - 2);for (i=0; i < str.length(); i++) {System.out.print(str.charAt(i));System.out.print(' ');}}System.out.print('\n');}index+=add;if (addAppid) {type=2;} else {type=rd.nextInt(4);}switch (type) {case 0:add=1;break;case 1:add=1 + rd.nextInt(29);break;case 2:if (addAppid) {if (randomStr) {add=1 + rd.nextInt(10);byte[] randStr=new byte[add];for (i=0; i < add; i++) {tmpVal=rd.nextInt(127);if (tmpVal < 32) tmpVal=(32 + tmpVal);randStr[i]=(byte)tmpVal;}mAppIdName=new String(randStr);}add=mAppIdName.length() + 1;} else {add=2 + rd.nextInt(10);}break;default :add=6;}if (index + add >= len) break;switch (type) {case 0:arr[index]=(byte)(0x80 | rd.nextInt(128));break;case 1:arr[index]=(byte)(add - 1);for (i=1; i < add; i++) arr[index + i]=(byte)rd.nextInt(255);break;case 2:if (addAppid) {addAppid=false;appIdAdded=true;for (i=0; i < add - 1; i++) {arr[index + i]=(byte)(mAppIdName.charAt(i));}Log.d(LOG_TAG,"mAppIdName added [" + mAppIdName + "]");} else {for (i=0; i < add - 1; i++) {tmpVal=rd.nextInt(127);if (tmpVal < 32) tmpVal=(32 + tmpVal);arr[index + i]=(byte)tmpVal;}}arr[index + i]=(byte)0x0;break;default :arr[index]=(byte)31;tmpVal=rd.nextInt(0x0FFFFFFF);add=1 + encodeUint32(tmpVal,null,index + 1);encodeUint32(tmpVal,arr,index + 1);break;}if (LOCAL_LOGV) {Log.d(LOG_TAG,"field value index:" + index);Log.d(LOG_TAG,"type:" + typename[type] + ", add:"+ add);if (type != 2) {for (i=index; i < index + add; i++) {System.out.print(Integer.toHexString(0xff & arr[i]));System.out.print(' ');}} else {System.out.print(Integer.toHexString(0xff & arr[index]));System.out.print(' ');String str=new String(arr,index + 1,add - 2);for (i=0; i < str.length(); i++) {System.out.print(str.charAt(i));System.out.print(' ');}}System.out.print('\n');}index+=add;}}Log.d(LOG_TAG,"headerStart = " + headerStart + ", mAppIdName = "+ mAppIdName);Log.d(LOG_TAG,HexDump.dumpHexString(arr));}  }
class C{  public void testOpen_blob() throws Exception, java.lang.Exception {  Stmt statement2;  Blob blobInput=new Blob();  InputStream inStream=null;  byte[] in={(byte)1,(byte)2,(byte)3,(byte)4};  db.exec("create table TEST (res blob)",null);  inStream=Class.forName(this.getClass().getName()).getResourceAsStream("/blob.c");  assertNotNull(inStream);  statement2=db.prepare("insert into TEST(res) values (?)");  statement2.bind(1,in);  statement2.step();  statement2.close();  Blob blob=db.open_blob(dbFile.getPath(),"TEST","res",1,true);  if (blob == null) {    fail("Blob could not be retrieved");  }  InputStream is=blob.getInputStream();  int i=0;  int outByte=0;  byte[] out=new byte[4];  while ((outByte=is.read()) > -1) {    out[i]=(byte)outByte;    i++;  }  is.close();  blob.close();  assertTrue(Arrays.equals(in,out));  db.exec("insert into TEST values(zeroblob(128))",null);  Blob blob2=db.open_blob(dbFile.getPath(),"TEST","res",2,true);  is=blob2.getInputStream();  for (i=0; i < 128; i++) {    assertEquals(0,is.read());  }  is.close();}  }
class C{  public static LocalItem make(CstString name,CstString signature){  if (name == null && signature == null) {    return null;  }  return new LocalItem(name,signature);}  }
class C{  public boolean isEmpty(){  return _head == null;}  }
class C{  public boolean isValid(){  return min != -1;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  @ValidationErrorPage(value="reconresult") @Action(value="/citizen/onlineReceipt-reconcileOnlinePayment") public String reconcileOnlinePayment(){  final ReceiptHeader[] receipts=new ReceiptHeader[selectedReceipts.length];  Date transDate=null;  errors.clear();  for (int i=0; i < getSelectedReceipts().length; i++) {    receipts[i]=receiptHeaderService.findById(selectedReceipts[i],false);    final SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy",Locale.getDefault());    if (getTransactionDate()[i] != null) {      final String vdt=getTransactionDate()[i];      try {        transDate=sdf.parse(vdt);      } catch (      final ParseException e) {        LOGGER.debug("Error occured while parsing date " + e.getMessage());      }    }    if (getStatusCode()[i].equals(CollectionConstants.ONLINEPAYMENT_STATUS_CODE_SUCCESS)) {      final List<ReceiptDetail> existingReceiptDetails=new ArrayList<ReceiptDetail>(0);      for (      final ReceiptDetail receiptDetail : receipts[i].getReceiptDetails())       if (!FinancialsUtil.isRevenueAccountHead(receiptDetail.getAccounthead(),chartOfAccountsHibernateDAO.getBankChartofAccountCodeList(),persistenceService)) {        final ReceiptDetail newReceiptDetail=new ReceiptDetail();        if (receiptDetail.getOrdernumber() != null)         newReceiptDetail.setOrdernumber(receiptDetail.getOrdernumber());        if (receiptDetail.getDescription() != null)         newReceiptDetail.setDescription(receiptDetail.getDescription());        if (receiptDetail.getIsActualDemand() != null)         newReceiptDetail.setIsActualDemand(receiptDetail.getIsActualDemand());        if (receiptDetail.getFunction() != null)         newReceiptDetail.setFunction(receiptDetail.getFunction());        if (receiptDetail.getCramountToBePaid() != null)         newReceiptDetail.setCramountToBePaid(receiptDetail.getCramountToBePaid());        newReceiptDetail.setCramount(receiptDetail.getCramount());        newReceiptDetail.setAccounthead(receiptDetail.getAccounthead());        newReceiptDetail.setDramount(receiptDetail.getDramount());        existingReceiptDetails.add(newReceiptDetail);      }      final List<ReceiptDetail> reconstructedList=collectionsUtil.reconstructReceiptDetail(receipts[i],existingReceiptDetails);      ReceiptDetail debitAccountDetail=null;      if (reconstructedList != null)       debitAccountDetail=collectionCommon.addDebitAccountHeadDetails(receipts[i].getTotalAmount(),receipts[i],BigDecimal.ZERO,receipts[i].getTotalAmount(),CollectionConstants.INSTRUMENTTYPE_ONLINE);      receiptHeaderService.reconcileOnlineSuccessPayment(receipts[i],transDate,getTransactionId()[i],receipts[i].getTotalAmount(),null,reconstructedList,debitAccountDetail);      LOGGER.debug("Manually reconciled a success online payment");    }    if (CollectionConstants.ONLINEPAYMENT_STATUS_CODE_TO_BE_REFUNDED.equals(getStatusCode()[i]) || CollectionConstants.ONLINEPAYMENT_STATUS_CODE_REFUNDED.equals(getStatusCode()[i])) {      receipts[i].setStatus(collectionsUtil.getReceiptStatusForCode(CollectionConstants.RECEIPT_STATUS_CODE_FAILED));      receipts[i].getOnlinePayment().setTransactionNumber(getTransactionId()[i]);      receipts[i].getOnlinePayment().setTransactionAmount(receipts[i].getTotalAmount());      receipts[i].getOnlinePayment().setTransactionDate(transDate);      receipts[i].getOnlinePayment().setRemarks(getRemarks()[i]);      if (getStatusCode()[i].equals(CollectionConstants.ONLINEPAYMENT_STATUS_CODE_TO_BE_REFUNDED))       receipts[i].getOnlinePayment().setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_ONLINEPAYMENT,CollectionConstants.ONLINEPAYMENT_STATUS_CODE_TO_BE_REFUNDED)); else       receipts[i].getOnlinePayment().setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_ONLINEPAYMENT,CollectionConstants.ONLINEPAYMENT_STATUS_CODE_REFUNDED));      receiptHeaderService.persist(receipts[i]);      LOGGER.debug("Manually reconciled an online payment to " + getStatusCode()[i] + " state.");    }  }  return RECONRESULT;}  }
class C{  public SendableLocationMessage.SendableLocationMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  @SuppressWarnings("unchecked") public <K1 extends K,V1 extends V>ConcurrentMap<K1,V1> build(CacheLoader<? super K1,V1> loader){  Object cache=null;  if (BUILD_METHOD == null) {    try {      BUILD_METHOD=builder.getClass().getDeclaredMethod("build",CacheLoader.class);      BUILD_METHOD.setAccessible(true);    } catch (    Exception e) {      throw new IllegalStateException("Unable to find CacheBuilder.build(CacheLoader)",e);    }  }  try {    cache=BUILD_METHOD.invoke(builder,loader);  } catch (  Exception e) {    throw new IllegalStateException("Unable to invoke " + BUILD_METHOD + " on "+ builder,e);  }  if (AS_MAP_METHOD == null) {    try {      AS_MAP_METHOD=cache.getClass().getMethod("asMap");      AS_MAP_METHOD.setAccessible(true);    } catch (    Exception e) {      throw new IllegalStateException("Unable to find Cache.asMap() in " + cache,e);    }  }  try {    return (ConcurrentMap<K1,V1>)AS_MAP_METHOD.invoke(cache);  } catch (  Exception e) {    throw new IllegalStateException("Unable to invoke " + AS_MAP_METHOD + " on "+ cache,e);  }}  }
class C{  public StyledCheckBoxUI(Style style){  this.style=style;  createIcons();}  }
class C{  public Shape inverseTransform(Shape shape){  GeneralPath newPath=new GeneralPath();  float[] coords=new float[6];  for (PathIterator iterator=shape.getPathIterator(null); iterator.isDone() == false; iterator.next()) {    int type=iterator.currentSegment(coords);switch (type) {case PathIterator.SEG_MOVETO:      Point2D p=inverseTransform(new Point2D.Float(coords[0],coords[1]));    newPath.moveTo((float)p.getX(),(float)p.getY());  break;case PathIterator.SEG_LINETO:p=inverseTransform(new Point2D.Float(coords[0],coords[1]));newPath.lineTo((float)p.getX(),(float)p.getY());break;case PathIterator.SEG_QUADTO:p=inverseTransform(new Point2D.Float(coords[0],coords[1]));Point2D q=inverseTransform(new Point2D.Float(coords[2],coords[3]));newPath.quadTo((float)p.getX(),(float)p.getY(),(float)q.getX(),(float)q.getY());break;case PathIterator.SEG_CUBICTO:p=inverseTransform(new Point2D.Float(coords[0],coords[1]));q=inverseTransform(new Point2D.Float(coords[2],coords[3]));Point2D r=inverseTransform(new Point2D.Float(coords[4],coords[5]));newPath.curveTo((float)p.getX(),(float)p.getY(),(float)q.getX(),(float)q.getY(),(float)r.getX(),(float)r.getY());break;case PathIterator.SEG_CLOSE:newPath.closePath();break;}}return newPath;}  }
class C{  @Override public E next() throws NoSuchElementException {  E line=this.reader.next();  ++this.lineNumber;  return line;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static int previousClearBit(long[] v,int start){  if (start == -1) {    return -1;  }  int wordindex=start >>> LONG_LOG2_SIZE;  if (wordindex >= v.length) {    return magnitude(v);  }  final int off=Long.SIZE + 1 - (start & LONG_LOG2_MASK);  long cur=~v[wordindex] & (LONG_ALL_BITS >>> off);  for (; ; ) {    if (cur != 0) {      return (wordindex + 1) * Long.SIZE - 1 - Long.numberOfTrailingZeros(cur);    }    if (wordindex == 0) {      return -1;    }    wordindex--;    cur=~v[wordindex];  }}  }
class C{  private void executeDDL(Statement statement,String sql,boolean ignoreExceptions) throws SQLException {  try {    statement.executeUpdate(sql);  } catch (  SQLException ex) {    if (!ignoreExceptions)     throw ex;  }}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  @Override public String configResetStat(){  client.configResetStat();  return client.getStatusCodeReply();}  }
class C{  @Nullable public K key(){  return key;}  }
class C{  RPObjectChangeDispatcher(final RPObjectChangeListener listener,final RPObjectChangeListener userListener){  this.listener=listener;  this.userListener=userListener;}  }
class C{  private static synchronized void initCerts(){  if (ROOT_CA != null) {    return;  }  ROOT_CA=new Builder().aliasPrefix("RootCA").subject("CN=Test Root Certificate Authority").ca(true).build();  INTERMEDIATE_CA=new Builder().aliasPrefix("IntermediateCA").subject("CN=Test Intermediate Certificate Authority").ca(true).signer(ROOT_CA.getPrivateKey("RSA","RSA")).rootCa(ROOT_CA.getRootCertificate("RSA")).build();  SERVER=new Builder().aliasPrefix("server").signer(INTERMEDIATE_CA.getPrivateKey("RSA","RSA")).rootCa(INTERMEDIATE_CA.getRootCertificate("RSA")).build();  CLIENT=new TestKeyStore(createClient(INTERMEDIATE_CA.keyStore),null,null);  CLIENT_CERTIFICATE=new Builder().aliasPrefix("client").subject("emailAddress=test@user").signer(INTERMEDIATE_CA.getPrivateKey("RSA","RSA")).rootCa(INTERMEDIATE_CA.getRootCertificate("RSA")).build();  TestKeyStore rootCa2=new Builder().aliasPrefix("RootCA2").subject("CN=Test Root Certificate Authority 2").ca(true).build();  CLIENT_2=new TestKeyStore(createClient(rootCa2.keyStore),null,null);}  }
class C{  public UTF8Decoder(InputStream is){  super(is);}  }
class C{  public mat4 scale(vec3 v){  float[] m=this.m;  m[0]*=v.x();  m[4]*=v.y();  m[8]*=v.z();  m[1]*=v.x();  m[5]*=v.y();  m[9]*=v.z();  m[2]*=v.x();  m[6]*=v.y();  m[10]*=v.z();  m[3]*=v.x();  m[7]*=v.y();  m[11]*=v.z();  return this;}  }
class C{  public MemcacheClientBuilder<V> withSrvResolver(final DnsSrvResolver srvResolver){  this.srvResolver=checkNotNull(srvResolver,"srvResolver");  return this;}  }
class C{  int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  if (requireReinit) {    throw new IllegalStateException("Must use either different key or iv for GCM encryption");  }  int len=buffered + inputLen - minBytes;  if (padding != null && decrypting) {    len-=blockSize;  }  len=(len > 0 ? (len - (len % unitBytes)) : 0);  if ((output == null) || ((output.length - outputOffset) < len)) {    throw new ShortBufferException("Output buffer must be " + "(at least) " + len + " bytes long");  }  int outLen=0;  if (len != 0) {    if ((input == output) && (outputOffset < (inputOffset + inputLen)) && (inputOffset < (outputOffset + buffer.length))) {      input=Arrays.copyOfRange(input,inputOffset,inputOffset + inputLen);      inputOffset=0;    }    if (len <= buffered) {      if (decrypting) {        outLen=cipher.decrypt(buffer,0,len,output,outputOffset);      } else {        outLen=cipher.encrypt(buffer,0,len,output,outputOffset);      }      buffered-=len;      if (buffered != 0) {        System.arraycopy(buffer,len,buffer,0,buffered);      }    } else {      int inputConsumed=len - buffered;      int temp;      if (buffered > 0) {        int bufferCapacity=buffer.length - buffered;        if (bufferCapacity != 0) {          temp=Math.min(bufferCapacity,inputConsumed);          if (unitBytes != blockSize) {            temp-=((buffered + temp) % unitBytes);          }          System.arraycopy(input,inputOffset,buffer,buffered,temp);          inputOffset+=temp;          inputConsumed-=temp;          inputLen-=temp;          buffered+=temp;        }        if (decrypting) {          outLen=cipher.decrypt(buffer,0,buffered,output,outputOffset);        } else {          outLen=cipher.encrypt(buffer,0,buffered,output,outputOffset);        }        outputOffset+=outLen;        buffered=0;      }      if (inputConsumed > 0) {        if (decrypting) {          outLen+=cipher.decrypt(input,inputOffset,inputConsumed,output,outputOffset);        } else {          outLen+=cipher.encrypt(input,inputOffset,inputConsumed,output,outputOffset);        }        inputOffset+=inputConsumed;        inputLen-=inputConsumed;      }    }    if (unitBytes != blockSize) {      if (len < diffBlocksize) {        diffBlocksize-=len;      } else {        diffBlocksize=blockSize - ((len - diffBlocksize) % blockSize);      }    }  }  if (inputLen > 0) {    System.arraycopy(input,inputOffset,buffer,buffered,inputLen);    buffered+=inputLen;  }  return outLen;}  }
class C{  public void log(String message){  getServletContext().log(message);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.280 -0500",hash_original_method="218236478243591CE821F4BA590E81DD",hash_generated_method="ABBE47BB0144736314470898AAF5A980") private static String descriptorForFieldSignature(String signature){  return signature.replace('.','/');}  }
class C{  @Override public synchronized void acceptTestSet(TestSetEvent e){  try {    m_Saver=makeCopy();  } catch (  Exception ex) {    if (m_logger != null) {      m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");      m_logger.logMessage("[Saver] " + statusMessagePrefix() + " unable to copy saver. "+ ex.getMessage());    }  }  passEnvOnToSaver();  m_fileName=sanitizeFilename(e.getTestSet().relationName());  m_dataSet=e.getTestSet();  if (e.isStructureOnly() && m_isDBSaver && ((DatabaseSaver)m_SaverTemplate).getRelationForTableName()) {    ((DatabaseSaver)m_Saver).setTableName(m_fileName);  }  if (!e.isStructureOnly()) {    if (!m_isDBSaver) {      try {        m_Saver.setDirAndPrefix(m_fileName,"_test_" + e.getSetNumber() + "_of_"+ e.getMaxSetNumber());      } catch (      Exception ex) {        System.out.println(ex);      }    } else {      ((DatabaseSaver)m_Saver).setRelationForTableName(false);      String setName=((DatabaseSaver)m_Saver).getTableName();      setName=setName.replaceFirst("_[tT][eE][sS][tT]_[0-9]+_[oO][fF]_[0-9]+","");      ((DatabaseSaver)m_Saver).setTableName(setName + "_test_" + e.getSetNumber()+ "_of_"+ e.getMaxSetNumber());    }    saveBatch();    System.out.println("... test set " + e.getSetNumber() + " of "+ e.getMaxSetNumber()+ " for relation "+ m_fileName+ " saved.");  }}  }
class C{  protected boolean startsWithQuote(Word w){  return w.form.length() != 0 && (w.form.charAt(0) == '\'' || w.form.charAt(0) == '"' || w.form.charAt(0) == '`');}  }
class C{  public final void testValidateUppercaseNotAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.UPPERCASE,false,allowedCharacters);  assertTrue(characterOrNumberValidator.validate("AB1-"));}  }
class C{  Predicate(JsonQueryPath path,String value,String returnType){  this.path=path;  this.value=value;  this.returnType=returnType;}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public static final String unescapeHtml3(final String input){  return UNESCAPE_HTML3.translate(input);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String json=getSuspensionsList(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(json);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  private synchronized void closeOutputStreamQuietly(){  if (!mClosed) {    try {      mOutputStream.close();      reportDecodedSizeIfApplicable();    } catch (    IOException e) {      CLog.writeToConsole(mNetworkPeerManager,Console.MessageLevel.ERROR,Console.MessageSource.NETWORK,"Could not close the output stream" + e);    } finally {      mClosed=true;    }  }}  }
class C{  @Override public boolean isCircle(){  return mIsCircle;}  }
class C{  public void addIncoming(Message message) throws InterruptedException {  message.acquire();  if (!incomingQueue.offer(message)) {    gondola.getStats().incomingQueueFull();    incomingQueue.put(message);  }  lock.lock();  try {    workAvailable.signal();  }  finally {    lock.unlock();  }}  }
class C{  public ASN1ObjectIdentifier branch(String branchID){  return new ASN1ObjectIdentifier(this,branchID);}  }
class C{  public void put(Object tree,int flags,int startPc,int endPc){  entries.append(new CRTEntry(tree,flags,startPc,endPc));}  }
class C{  public final boolean local(){  return zero != null;}  }
class C{  private void showContextMenu(MouseEvent event){  if (this.isEnabled()) {    int x=event.getX();    int y=event.getY();    TreePath path=this.tree.getPathForLocation(x,y);    if (path != null) {      DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();      this.tree.setSelectionPath(path);      Object userData=node.getUserObject();      if (userData instanceof World) {        this.popWorld.show(this.tree,x,y);      } else       if (userData instanceof Bounds) {        this.popBounds.show(this.tree,x,y);      } else       if (node == this.bodyFolder) {        this.popBodyFolder.show(this.tree,x,y);      } else       if (node == this.jointFolder) {        this.popJointFolder.show(this.tree,x,y);      } else       if (node == this.rayFolder) {        this.popRayFolder.show(this.tree,x,y);      } else       if (userData instanceof Body) {        this.popBody.show(this.tree,x,y);      } else       if (userData instanceof BodyFixture) {        this.popFixture.show(this.tree,x,y);        Convex convex=((BodyFixture)userData).getShape();        if (convex instanceof Circle) {          ((JMenuItem)this.popFixture.getComponent(0)).setIcon(Icons.EDIT_CIRCLE);          ((JMenuItem)this.popFixture.getComponent(1)).setIcon(Icons.REMOVE_CIRCLE);        } else         if (convex instanceof Rectangle) {          ((JMenuItem)this.popFixture.getComponent(0)).setIcon(Icons.EDIT_RECTANGLE);          ((JMenuItem)this.popFixture.getComponent(1)).setIcon(Icons.REMOVE_RECTANGLE);        } else         if (convex instanceof Polygon) {          ((JMenuItem)this.popFixture.getComponent(0)).setIcon(Icons.EDIT_POLYGON);          ((JMenuItem)this.popFixture.getComponent(1)).setIcon(Icons.REMOVE_POLYGON);        } else         if (convex instanceof Segment) {          ((JMenuItem)this.popFixture.getComponent(0)).setIcon(Icons.EDIT_SEGMENT);          ((JMenuItem)this.popFixture.getComponent(1)).setIcon(Icons.REMOVE_SEGMENT);        }      } else       if (userData instanceof Joint) {        this.popJoint.show(this.tree,x,y);        Joint joint=((Joint)userData);        if (joint instanceof AngleJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_ANGLE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_ANGLE_JOINT);        } else         if (joint instanceof DistanceJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_DISTANCE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_DISTANCE_JOINT);        } else         if (joint instanceof FrictionJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_FRICTION_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_FRICTION_JOINT);        } else         if (joint instanceof MotorJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_MOTOR_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_MOTOR_JOINT);        } else         if (joint instanceof PinJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_MOUSE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_MOUSE_JOINT);        } else         if (joint instanceof PrismaticJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_PRISMATIC_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_PRISMATIC_JOINT);        } else         if (joint instanceof PulleyJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_PULLEY_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_PULLEY_JOINT);        } else         if (joint instanceof RevoluteJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_REVOLUTE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_REVOLUTE_JOINT);        } else         if (joint instanceof RopeJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_ROPE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_ROPE_JOINT);        } else         if (joint instanceof WeldJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_WELD_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_WELD_JOINT);        } else         if (joint instanceof WheelJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_WHEEL_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_WHEEL_JOINT);        }      } else       if (userData instanceof Ray) {        this.popRay.show(this.tree,x,y);      }    }  }}  }
class C{  public StrSubstitutor(final StrLookup<?> variableResolver,final StrMatcher prefixMatcher,final StrMatcher suffixMatcher,final char escape){  this(variableResolver,prefixMatcher,suffixMatcher,escape,DEFAULT_VALUE_DELIMITER);}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  public TenantOrgRestRep create(URI parentTenantId,TenantCreateParam input){  return client.post(TenantOrgRestRep.class,input,SUBTENANTS_URL,parentTenantId);}  }
class C{  public CFunctionEdge(final IBlockNode source,final IBlockNode target,final EdgeType type){  super(source,target);  m_type=Preconditions.checkNotNull(type,"IE01238: Type argument can not be null");}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  if (null == prefix || prefix.equals(""))   prefix="xmlns"; else   prefix="xmlns:" + prefix;  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  public synchronized void clearSelectionListeners(){  if (listeners != null) {    listeners.clear();  }}  }
class C{  private static String correctReservedWord(String str){  char first=str.charAt(0);switch (first) {case 'a':    if (str.equals("abstract"))     return "_" + str;  break;case 'b':if (str.equals("boolean")) return "_" + str; else if (str.equals("break")) return "_" + str; else if (str.equals("byte")) return "_" + str;break;case 'c':if (str.equals("case")) return "_" + str; else if (str.equals("catch")) return "_" + str; else if (str.equals("char")) return "_" + str; else if (str.equals("const")) return "_" + str; else if (str.equals("class")) return "_" + str; else if (str.equals("continue")) return "_" + str;break;case 'd':if (str.equals("default")) return "_" + str; else if (str.equals("do")) return "_" + str; else if (str.equals("double")) return "_" + str;break;case 'e':if (str.equals("else")) return "_" + str; else if (str.equals("extends")) return "_" + str; else if (str.equals("enum")) return "_" + str;break;case 'f':if (str.equals("false")) return "_" + str; else if (str.equals("final")) return "_" + str; else if (str.equals("finally")) return "_" + str; else if (str.equals("float")) return "_" + str; else if (str.equals("for")) return "_" + str;break;case 'g':if (str.equals("goto")) return "_" + str;break;case 'i':if (str.equals("if")) return "_" + str; else if (str.equals("implements")) return "_" + str; else if (str.equals("import")) return "_" + str; else if (str.equals("instanceof")) return "_" + str; else if (str.equals("int")) return "_" + str; else if (str.equals("interface")) return "_" + str;break;case 'n':if (str.equals("native")) return "_" + str; else if (str.equals("new")) return "_" + str; else if (str.equals("null")) return "_" + str;break;case 'p':if (str.equals("package")) return "_" + str; else if (str.equals("private")) return "_" + str; else if (str.equals("protected")) return "_" + str; else if (str.equals("public")) return "_" + str;break;case 'r':if (str.equals("return")) return "_" + str;break;case 's':if (str.equals("short")) return "_" + str; else if (str.equals("static")) return "_" + str; else if (str.equals("strictfp")) return "_" + str; else if (str.equals("super")) return "_" + str; else if (str.equals("switch")) return "_" + str; else if (str.equals("synchronized")) return "_" + str;break;case 't':if (str.equals("this")) return "_" + str; else if (str.equals("throw")) return "_" + str; else if (str.equals("throws")) return "_" + str; else if (str.equals("transient")) return "_" + str; else if (str.equals("true")) return "_" + str; else if (str.equals("try")) return "_" + str;break;case 'v':if (str.equals("void")) return "_" + str; else if (str.equals("volatile")) return "_" + str;break;case 'w':if (str.equals("while")) return "_" + str;break;}return str;}  }
class C{  public Classification(Collection<T> featureset,K category){  this(featureset,category,1.0f);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addAll(Collections.list(super.listOptions()));  result.add(new Option("\tFull name of the classifier analysed.\n" + "\teg: weka.classifiers.bayes.NaiveBayes\n" + "\t(default weka.classifiers.rules.ZeroR)","W",1,"-W"));  if ((m_Classifier != null) && (m_Classifier instanceof OptionHandler)) {    result.add(new Option("","",0,"\nOptions specific to classifier " + m_Classifier.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Classifier).listOptions()));  }  return result.elements();}  }
class C{  public static CConnection connect(final CDatabaseConfiguration configuration) throws CouldntLoadDriverException, CouldntConnectException {  checkDriver(configuration);  try {    return new CConnection(configuration);  } catch (  final SQLException e) {    CUtilityFunctions.logException(e);    throw new CouldntConnectException(e,e.getErrorCode(),e.getSQLState());  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.BINDING_PATTERN__PROPERTIES:    return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);case N4JSPackage.BINDING_PATTERN__ELEMENTS:  return ((InternalEList<?>)getElements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void addCacheListener(MemoryCache.CacheListener listener){  if (listener == null) {    String message=Logging.getMessage("BasicMemoryCache.nullListenerAdded");    Logging.logger().warning(message);    throw new IllegalArgumentException(message);  }  this.listeners.add(listener);}  }
class C{  @Override @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object){  boolean nurseryObject=isInNursery(object);  if (!inNurseryGC || nurseryObject) {    if (testAndMark(object,markState)) {      internalMarkObject(object,nurseryObject);      trace.processNode(object);    }  }  return object;}  }
class C{  @Override public boolean markNextSequence() throws IOException {  if (mSeqSize < mLimit && mPointerSize + mPointerEntrySize <= mLimit) {    mPointers.writeByte((int)mChecksumSeq.getValue());    mChecksumSeq.reset();    if (mChecksumQual != null) {      mPointers.writeByte((int)mChecksumQual.getValue());      mChecksumQual.reset();    }    mPointers.writeInt((int)mSeqSize);    mPointerSize+=mPointerEntrySize;    return true;  }  return false;}  }
class C{  @Nullable public Query searchFilter(String... types){  boolean filterPercolateType=hasMapping(PercolatorService.TYPE_NAME);  if (types != null && filterPercolateType) {    for (    String type : types) {      if (PercolatorService.TYPE_NAME.equals(type)) {        filterPercolateType=false;        break;      }    }  }  Query percolatorType=null;  if (filterPercolateType) {    percolatorType=documentMapper(PercolatorService.TYPE_NAME).typeFilter();  }  if (types == null || types.length == 0) {    if (hasNested && filterPercolateType) {      BooleanQuery.Builder bq=new BooleanQuery.Builder();      bq.add(percolatorType,Occur.MUST_NOT);      bq.add(Queries.newNonNestedFilter(),Occur.MUST);      return new ConstantScoreQuery(bq.build());    } else     if (hasNested) {      return Queries.newNonNestedFilter();    } else     if (filterPercolateType) {      return new ConstantScoreQuery(Queries.not(percolatorType));    } else {      return null;    }  }  if (types.length == 1) {    DocumentMapper docMapper=documentMapper(types[0]);    Query filter=docMapper != null ? docMapper.typeFilter() : new TermQuery(new Term(TypeFieldMapper.NAME,types[0]));    if (filterPercolateType) {      BooleanQuery.Builder bq=new BooleanQuery.Builder();      bq.add(percolatorType,Occur.MUST_NOT);      bq.add(filter,Occur.MUST);      return new ConstantScoreQuery(bq.build());    } else {      return filter;    }  }  boolean useTermsFilter=true;  for (  String type : types) {    DocumentMapper docMapper=documentMapper(type);    if (docMapper == null) {      useTermsFilter=false;      break;    }    if (docMapper.typeMapper().fieldType().indexOptions() == IndexOptions.NONE) {      useTermsFilter=false;      break;    }  }  if (useTermsFilter) {    BytesRef[] typesBytes=new BytesRef[types.length];    for (int i=0; i < typesBytes.length; i++) {      typesBytes[i]=new BytesRef(types[i]);    }    TermsQuery termsFilter=new TermsQuery(TypeFieldMapper.NAME,typesBytes);    if (filterPercolateType) {      BooleanQuery.Builder bq=new BooleanQuery.Builder();      bq.add(percolatorType,Occur.MUST_NOT);      bq.add(termsFilter,Occur.MUST);      return new ConstantScoreQuery(bq.build());    } else {      return termsFilter;    }  } else {    BooleanQuery.Builder bool=new BooleanQuery.Builder();    for (    String type : types) {      DocumentMapper docMapper=documentMapper(type);      if (docMapper == null) {        bool.add(new TermQuery(new Term(TypeFieldMapper.NAME,type)),BooleanClause.Occur.SHOULD);      } else {        bool.add(docMapper.typeFilter(),BooleanClause.Occur.SHOULD);      }    }    if (filterPercolateType) {      bool.add(percolatorType,BooleanClause.Occur.MUST_NOT);    }    if (hasNested) {      bool.add(Queries.newNonNestedFilter(),BooleanClause.Occur.MUST);    }    return new ConstantScoreQuery(bool.build());  }}  }
class C{  public static AVList copyProperties(Element element,AVList params){  if (element == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    XPath xpath=makeXPath();    Element[] elements=getElements(element,"Property",xpath);    if (elements == null || elements.length == 0)     return params;    if (params == null)     params=new AVListImpl();    for (    Element el : elements) {      String prop=xpath.evaluate("@name",el);      String value=xpath.evaluate("@value",el);      if (WWUtil.isEmpty(prop) || WWUtil.isEmpty(value))       continue;      params.setValue(prop,value);    }  } catch (  XPathExpressionException e) {    String message=Logging.getMessage("XML.InvalidXPathExpression","internal expression");    Logging.logger().log(java.util.logging.Level.WARNING,message,e);  }  return params;}  }
class C{  final public int capacity(){  return a.length;}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  builder.append('<');  builder.append(this.uri);  builder.append('>');  builder.append(' ').append(this.attributes.getTitle());  if (this.attributes.containsAttribute(LinkFormat.RESOURCE_TYPE))   builder.append("\n\t").append(LinkFormat.RESOURCE_TYPE).append(":\t").append(this.attributes.getResourceTypes());  if (this.attributes.containsAttribute(LinkFormat.INTERFACE_DESCRIPTION))   builder.append("\n\t").append(LinkFormat.INTERFACE_DESCRIPTION).append(":\t").append(this.attributes.getInterfaceDescriptions());  if (this.attributes.containsAttribute(LinkFormat.CONTENT_TYPE))   builder.append("\n\t").append(LinkFormat.CONTENT_TYPE).append(":\t").append(this.attributes.getContentTypes());  if (this.attributes.containsAttribute(LinkFormat.MAX_SIZE_ESTIMATE))   builder.append("\n\t").append(LinkFormat.MAX_SIZE_ESTIMATE).append(":\t").append(this.attributes.getMaximumSizeEstimate());  if (this.attributes.hasObservable())   builder.append("\n\t").append(LinkFormat.OBSERVABLE);  return builder.toString();}  }
class C{  boolean containsElements(){  return (flags & ELEMENTS_FLAG) != 0;}  }
class C{  private ConvertedDMLSyntax convertPythonBuiltinFunctionToDMLSyntax(ParserRuleContext ctx,String namespace,String functionName,ArrayList<ParameterExpression> paramExpression,Token fnName){  if (sources.containsValue(namespace) || functions.contains(functionName)) {    return new ConvertedDMLSyntax(namespace,functionName,paramExpression);  }  String fileName=currentFile;  int line=ctx.start.getLine();  int col=ctx.start.getCharPositionInLine();  if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("len")) {    if (paramExpression.size() != 1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts 1 arguments",fnName);      return null;    }    functionName="length";  } else   if (functionName.equals("sum") || functionName.equals("mean") || functionName.equals("avg")|| functionName.equals("min")|| functionName.equals("max")|| functionName.equals("argmax")|| functionName.equals("argmin")|| functionName.equals("cumsum")|| functionName.equals("transpose")|| functionName.equals("trace")|| functionName.equals("var")|| functionName.equals("sd")) {    if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && paramExpression.size() == 1) {      if (functionName.equals("avg")) {        functionName="mean";      } else       if (functionName.equals("transpose")) {        functionName="t";      } else       if (functionName.equals("argmax") || functionName.equals("argmin") || functionName.equals("cumsum")) {        notifyErrorListeners("The builtin function \'" + functionName + "\' for entire matrix is not supported",fnName);        return null;      }    } else     if (!(namespace.equals(DMLProgram.DEFAULT_NAMESPACE)) && paramExpression.size() == 0) {      paramExpression=new ArrayList<ParameterExpression>();      paramExpression.add(new ParameterExpression(null,new DataIdentifier(namespace)));      if (functionName.equals("avg")) {        functionName="mean";      } else       if (functionName.equals("transpose")) {        functionName="t";      } else       if (functionName.equals("argmax") || functionName.equals("argmin") || functionName.equals("cumsum")) {        notifyErrorListeners("The builtin function \'" + functionName + "\' for entire matrix is not supported",fnName);        return null;      }    } else     if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && paramExpression.size() == 2) {      int axis=getAxis(paramExpression.get(1));      if (axis == -1 && (functionName.equals("min") || functionName.equals("max"))) {      } else       if (axis == -1) {        notifyErrorListeners("The builtin function \'" + functionName + "\' for given arguments is not supported",fnName);        return null;      } else {        ArrayList<ParameterExpression> temp=new ArrayList<ParameterExpression>();        temp.add(paramExpression.get(0));        paramExpression=temp;        functionName=getPythonAggFunctionNames(functionName,axis);        if (functionName.equals("Not Supported")) {          notifyErrorListeners("The builtin function \'" + functionName + "\' for given arguments is not supported",fnName);          return null;        }      }    } else     if (!(namespace.equals(DMLProgram.DEFAULT_NAMESPACE)) && paramExpression.size() == 1) {      int axis=getAxis(paramExpression.get(0));      if (axis == -1) {        notifyErrorListeners("The builtin function \'" + functionName + "\' for given arguments is not supported",fnName);        return null;      } else {        paramExpression=new ArrayList<ParameterExpression>();        paramExpression.add(new ParameterExpression(null,new DataIdentifier(namespace)));        functionName=getPythonAggFunctionNames(functionName,axis);        if (functionName.equals("Not Supported")) {          notifyErrorListeners("The builtin function \'" + functionName + "\' for given arguments is not supported",fnName);          return null;        }      }    } else {      notifyErrorListeners("Incorrect number of arguments for the builtin function \'" + functionName + "\'.",fnName);      return null;    }    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("concatenate")) {    if (paramExpression.size() != 2) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts 2 arguments (Note: concatenate append columns of two matrices)",fnName);      return null;    }    functionName="append";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("minimum")) {    if (paramExpression.size() != 2) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts 2 arguments",fnName);      return null;    }    functionName="min";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("maximum")) {    if (paramExpression.size() != 2) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts 2 arguments",fnName);      return null;    }    functionName="max";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (!(namespace.equals(DMLProgram.DEFAULT_NAMESPACE)) && functionName.equals("shape")) {    if (paramExpression.size() != 1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts only 1 argument (0 or 1)",fnName);      return null;    }    int axis=getAxis(paramExpression.get(0));    if (axis == -1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts only 1 argument (0 or 1)",fnName);      return null;    }    paramExpression=new ArrayList<ParameterExpression>();    paramExpression.add(new ParameterExpression(null,new DataIdentifier(namespace)));    namespace=DMLProgram.DEFAULT_NAMESPACE;    if (axis == 0) {      functionName="nrow";    } else     if (axis == 1) {      functionName="ncol";    }  } else   if (namespace.equals("random") && functionName.equals("normal")) {    if (paramExpression.size() != 3) {      String qualifiedName=namespace + namespaceResolutionOp() + functionName;      notifyErrorListeners("The builtin function \'" + qualifiedName + "\' accepts exactly 3 arguments (number of rows, number of columns, sparsity)",fnName);      return null;    }    paramExpression.get(0).setName("rows");    paramExpression.get(1).setName("cols");    paramExpression.get(2).setName("sparsity");    paramExpression.add(new ParameterExpression("pdf",new StringIdentifier("normal",fileName,line,col,line,col)));    functionName="rand";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals("random") && functionName.equals("poisson")) {    if (paramExpression.size() != 4) {      String qualifiedName=namespace + namespaceResolutionOp() + functionName;      notifyErrorListeners("The builtin function \'" + qualifiedName + "\' accepts exactly 3 arguments (number of rows, number of columns, sparsity, lambda)",fnName);      return null;    }    paramExpression.get(0).setName("rows");    paramExpression.get(1).setName("cols");    paramExpression.get(2).setName("sparsity");    paramExpression.get(3).setName("lambda");    paramExpression.add(new ParameterExpression("pdf",new StringIdentifier("poisson",fileName,line,col,line,col)));    functionName="rand";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals("random") && functionName.equals("uniform")) {    if (paramExpression.size() != 5) {      String qualifiedName=namespace + namespaceResolutionOp() + functionName;      notifyErrorListeners("The builtin function \'" + qualifiedName + "\' accepts exactly 5 arguments (number of rows, number of columns, sparsity, min, max)",fnName);      return null;    }    paramExpression.get(0).setName("rows");    paramExpression.get(1).setName("cols");    paramExpression.get(2).setName("sparsity");    paramExpression.get(3).setName("min");    paramExpression.get(4).setName("max");    paramExpression.add(new ParameterExpression("pdf",new StringIdentifier("uniform",fileName,line,col,line,col)));    functionName="rand";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("full")) {    if (paramExpression.size() != 3) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 3 arguments (constant float value, number of rows, number of columns)",fnName);      return null;    }    paramExpression.get(1).setName("rows");    paramExpression.get(2).setName("cols");    functionName="matrix";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("matrix")) {    if (paramExpression.size() != 1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 1 argument (either str or float value)",fnName);      return null;    }    if (paramExpression.get(0).getExpr() instanceof StringIdentifier) {      String initializerString=((StringIdentifier)paramExpression.get(0).getExpr()).getValue().trim();      if (!initializerString.startsWith("[") || !initializerString.endsWith("]")) {        notifyErrorListeners("Incorrect initializer string for builtin function \'" + functionName + "\' (Eg: matrix(\"[1 2 3; 4 5 6]\"))",fnName);        return null;      }      int rows=StringUtils.countMatches(initializerString,";") + 1;      initializerString=initializerString.replaceAll("; ",";");      initializerString=initializerString.replaceAll(" ;",";");      initializerString=initializerString.replaceAll("\\[ ","\\[");      initializerString=initializerString.replaceAll(" \\]","\\]");      int cols=(StringUtils.countMatches(initializerString," ") / rows) + 1;      initializerString=initializerString.replaceAll(";"," ");      initializerString=initializerString.replaceAll("\\[","");      initializerString=initializerString.replaceAll("\\]","");      paramExpression=new ArrayList<ParameterExpression>();      paramExpression.add(new ParameterExpression(null,new StringIdentifier(initializerString,fileName,line,col,line,col)));      paramExpression.add(new ParameterExpression("rows",new IntIdentifier(rows,fileName,line,col,line,col)));      paramExpression.add(new ParameterExpression("cols",new IntIdentifier(cols,fileName,line,col,line,col)));    } else {      functionName="as.matrix";    }    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("scalar")) {    if (paramExpression.size() != 1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 1 argument",fnName);      return null;    }    functionName="as.scalar";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("float")) {    if (paramExpression.size() != 1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 1 argument",fnName);      return null;    }    functionName="as.double";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("int")) {    if (paramExpression.size() != 1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 1 argument",fnName);      return null;    }    functionName="as.integer";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("bool")) {    if (paramExpression.size() != 1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 1 argument",fnName);      return null;    }    functionName="as.logical";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (!(namespace.equals(DMLProgram.DEFAULT_NAMESPACE)) && functionName.equals("reshape")) {    if (paramExpression.size() != 2) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 2 arguments (number of rows, number of columns)",fnName);      return null;    }    paramExpression.get(0).setName("rows");    paramExpression.get(1).setName("cols");    ArrayList<ParameterExpression> temp=new ArrayList<ParameterExpression>();    temp.add(new ParameterExpression(null,new DataIdentifier(namespace)));    temp.add(paramExpression.get(0));    temp.add(paramExpression.get(1));    paramExpression=temp;    functionName="matrix";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("removeEmpty")) {    if (paramExpression.size() != 2) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 2 arguments (matrix, axis=0 or 1)",fnName);      return null;    }    int axis=getAxis(paramExpression.get(1));    if (axis == -1) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 2 arguments (matrix, axis=0 or 1)",fnName);      return null;    }    StringIdentifier marginVal=null;    if (axis == 0) {      marginVal=new StringIdentifier("rows",fileName,line,col,line,col);    } else {      marginVal=new StringIdentifier("cols",fileName,line,col,line,col);    }    paramExpression.get(0).setName("target");    paramExpression.get(1).setName("margin");    paramExpression.get(1).setExpr(marginVal);    functionName="removeEmpty";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("replace")) {    if (paramExpression.size() != 3) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 3 arguments (matrix, scalar value that should be replaced (pattern), scalar value (replacement))",fnName);      return null;    }    paramExpression.get(0).setName("target");    paramExpression.get(1).setName("pattern");    paramExpression.get(2).setName("replacement");    functionName="replace";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("range")) {    if (paramExpression.size() < 2) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts 3 arguments (from, to, increment), with the first 2 lacking default values",fnName);      return null;    } else     if (paramExpression.size() > 3) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts 3 arguments (from, to, increment)",fnName);    }    functionName="seq";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals("norm") && functionName.equals("cdf")) {    if (paramExpression.size() != 3) {      String qualifiedName=namespace + namespaceResolutionOp() + functionName;      notifyErrorListeners("The builtin function \'" + qualifiedName + "\' accepts exactly 3 arguments (target, mean, sd)",fnName);      return null;    }    functionName="cdf";    paramExpression.get(0).setName("target");    paramExpression.get(1).setName("mean");    paramExpression.get(2).setName("sd");    paramExpression.add(new ParameterExpression("dist",new StringIdentifier("normal",fileName,line,col,line,col)));    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals("expon") && functionName.equals("cdf")) {    if (paramExpression.size() != 2) {      String qualifiedName=namespace + namespaceResolutionOp() + functionName;      notifyErrorListeners("The builtin function \'" + qualifiedName + "\' accepts exactly 2 arguments (target, mean)",fnName);      return null;    }    functionName="cdf";    paramExpression.get(0).setName("target");    paramExpression.get(1).setName("mean");    paramExpression.add(new ParameterExpression("dist",new StringIdentifier("exp",fileName,line,col,line,col)));    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals("chi") && functionName.equals("cdf")) {    if (paramExpression.size() != 2) {      String qualifiedName=namespace + namespaceResolutionOp() + functionName;      notifyErrorListeners("The builtin function \'" + qualifiedName + "\' accepts exactly 2 arguments (target, df)",fnName);      return null;    }    functionName="cdf";    paramExpression.get(0).setName("target");    paramExpression.get(1).setName("df");    paramExpression.add(new ParameterExpression("dist",new StringIdentifier("chisq",fileName,line,col,line,col)));    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals("f") && functionName.equals("cdf")) {    if (paramExpression.size() != 3) {      String qualifiedName=namespace + namespaceResolutionOp() + functionName;      notifyErrorListeners("The builtin function \'" + qualifiedName + "\' accepts exactly 3 arguments (target, df1, df2)",fnName);      return null;    }    functionName="cdf";    paramExpression.get(0).setName("target");    paramExpression.get(1).setName("df1");    paramExpression.get(2).setName("df2");    paramExpression.add(new ParameterExpression("dist",new StringIdentifier("f",fileName,line,col,line,col)));    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals("t") && functionName.equals("cdf")) {    if (paramExpression.size() != 2) {      String qualifiedName=namespace + namespaceResolutionOp() + functionName;      notifyErrorListeners("The builtin function \'" + qualifiedName + "\' accepts exactly 2 arguments (target, df)",fnName);      return null;    }    functionName="cdf";    paramExpression.get(0).setName("target");    paramExpression.get(1).setName("df");    paramExpression.add(new ParameterExpression("dist",new StringIdentifier("t",fileName,line,col,line,col)));    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("percentile")) {    if (paramExpression.size() != 2 && paramExpression.size() != 3) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts either 2 or 3 arguments",fnName);      return null;    }    functionName="quantile";    namespace=DMLProgram.DEFAULT_NAMESPACE;  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("arcsin")) {    functionName="asin";  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("arccos")) {    functionName="acos";  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("arctan")) {    functionName="atan";  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("load")) {    functionName="read";  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("eigen")) {    functionName="eig";  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("power")) {    if (paramExpression.size() != 2) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 2 arguments",fnName);      return null;    }  } else   if (namespace.equals(DMLProgram.DEFAULT_NAMESPACE) && functionName.equals("dot")) {    if (paramExpression.size() != 2) {      notifyErrorListeners("The builtin function \'" + functionName + "\' accepts exactly 2 arguments",fnName);      return null;    }  }  return new ConvertedDMLSyntax(namespace,functionName,paramExpression);}  }
class C{  public Object[] allKeys(){  Object[] a1=m_map.keySet().toArray();  if (m_parent != null) {    Object[] a2=m_parent.allKeys();    if (a2 != null && a2.length > 0) {      Object[] o=new Object[a1.length + a2.length];      System.arraycopy(a1,0,o,0,a1.length);      System.arraycopy(a2,0,o,a1.length,a2.length);      return o;    }  }  return a1;}  }
class C{  public void finished() throws Exception {  if (m_zipOut != null) {    m_zipOut.close();  }}  }
class C{  public static float[] clampBounds(float[] target,float[] clamp){  assert target.length == 6;  if (target[0] < clamp[0])   target[0]=clamp[0];  if (target[1] < clamp[1])   target[1]=clamp[1];  if (target[2] < clamp[2])   target[2]=clamp[2];  if (target[3] > clamp[3])   target[3]=clamp[3];  if (target[4] > clamp[4])   target[4]=clamp[4];  if (target[5] > clamp[5])   target[5]=clamp[5];  return target;}  }
class C{  private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){  if (declaredTypes.length == actualTypes.length) {    for (int i=0; i < actualTypes.length; i++) {      if (actualTypes[i] == NULL.class)       continue;      if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;      return false;    }    return true;  } else {    return false;  }}  }
class C{  public XMLStreamException(String msg,Location location){  super(msg);  _location=location;}  }
class C{  private void notifyUnRegistrationToApi(RcsServiceRegistration.ReasonCode reason){  if (mCapabilityApi != null) {    mCapabilityApi.notifyUnRegistration(reason);  }  if (mChatApi != null) {    mChatApi.notifyUnRegistration(reason);  }  if (mContactApi != null) {    mContactApi.notifyUnRegistration(reason);  }  if (mFtApi != null) {    mFtApi.notifyUnRegistration(reason);  }  if (mVshApi != null) {    mVshApi.notifyUnRegistration(reason);  }  if (mIshApi != null) {    mIshApi.notifyUnRegistration(reason);  }  if (mGshApi != null) {    mGshApi.notifyUnRegistration(reason);  }  if (mMmSessionApi != null) {    mMmSessionApi.notifyUnRegistration(reason);  }}  }
class C{  private boolean rehash(){  if (tombstones + size < maximumLoad) {    return false;  }  int capacity=table.length >> 1;  int newCapacity=capacity;  if (size > (capacity >> 1)) {    newCapacity=capacity * 2;  }  Object[] oldTable=this.table;  initializeTable(newCapacity);  this.tombstones=0;  if (size == 0) {    return true;  }  for (int i=oldTable.length - 2; i >= 0; i-=2) {    Object k=oldTable[i];    if (k == null || k == TOMBSTONE) {      continue;    }    @SuppressWarnings("unchecked") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;    ThreadLocal<?> key=reference.get();    if (key != null) {      add(key,oldTable[i + 1]);    } else {      size--;    }  }  return true;}  }
class C{  private void updateStorageSystemCapabilityOnVolumeForVNX(CIMInstance storageConfigurationInstance,StorageSystem system) throws Exception {  UnsignedInteger16[] supportedElementTypeArr=(UnsignedInteger16[])storageConfigurationInstance.getPropertyValue(SUPPORTED_ELEMENT_TYPES);  String supportedElementTypes=Arrays.toString(supportedElementTypeArr);  _logger.debug("Capability : {}",supportedElementTypes);  if (supportedElementTypes.contains(THINLY_PROVISIONED_STORAGE_VOLUME)) {    system.setSupportedProvisioningType(SupportedProvisioningTypes.THIN_AND_THICK.toString());  } else {    system.setSupportedProvisioningType(SupportedProvisioningTypes.THICK.toString());  }}  }
class C{  public static byte[] decode(final String s,final int options){  byte[] bytes=s.getBytes(Base64.PREFERRED_ENCODING);  bytes=Base64.decode(bytes,0,bytes.length,options);  if (bytes != null && bytes.length >= 4) {    int head=bytes[0] & 0xff | bytes[1] << 8 & 0xff00;    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public Label mark(){  Label label=new Label();  mv.visitLabel(label);  return label;}  }
class C{  public <T>T mapTo(final Class<T> mappingClass){  return mapTo(mappingClass,null);}  }
class C{  protected boolean capacitiesCanMatch(Map<URI,StorageSystem> volumeStorageSystems){  String systemToCompare=null;  for (  Map.Entry<URI,StorageSystem> entry : volumeStorageSystems.entrySet()) {    StorageSystem storageSystem=entry.getValue();    String storageType=storageSystem.getSystemType();    if (storageSystem.isV3AllFlashArray()) {      storageType=DiscoveredDataObject.Type.vmax3AFA.name();      ;    } else     if (storageSystem.checkIfVmax3()) {      storageType=DiscoveredDataObject.Type.vmax3.name();    }    _log.info(String.format("Request requires provisioning on storage array of type: %s",storageType));    if (NullColumnValueGetter.isNullValue(systemToCompare)) {      systemToCompare=storageSystem.getSystemType();      continue;    }    if (!capacityCalculatorFactory.getCapacityCalculator(systemToCompare).capacitiesCanMatch(entry.getValue().getSystemType())) {      _log.info("Determined that the capacity for all volumes being provisioned cannot match.");      return false;    }  }  _log.info("Determined that the capacity for all volumes being provisioned can match.");  return true;}  }
class C{  public CTagSortingHandler(){  super(CTagTransferable.TAG_FLAVOR);}  }
class C{  public double heapCommitted(){  return memory.getHeapMemoryUsage().getCommitted();}  }
class C{  public String toString(){  final String TAB=" ";  return "MailboxSession ( " + "sessionId = " + this.sessionId + TAB+ "open = "+ this.open+ TAB+ " )";}  }
class C{  public final boolean isReverse(){  return true;}  }
class C{  public AbSlidingButton(Context context){  super(context);  init(context);}  }
class C{  public void updateMarker(IMarker marker) throws CoreException {  marker.setAttributes(attributes);}  }
class C{  @Override public List<Integer> readInvertedSortIndex() throws IOException {  if (null == columnSortInfo) {    readColumnSortInfo();  }  return columnSortInfo.getSort_index_inverted();}  }
class C{  public void testDisconnect_NonBlockWithServerChannelClosed() throws IOException {  this.channel1.configureBlocking(false);  connectLocalServer();  this.channel1.close();  disconnectAfterClosed();}  }
class C{  public boolean isInitialized(){  return this.initialized;}  }
class C{  static float enlarge(float startValue,float endValue,float time){  if (startValue > endValue)   throw new IllegalArgumentException("Start size can't be larger than end size.");  return startValue + (endValue - startValue) * time;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  long[] oldKeys=_set;  V[] oldVals=_values;  _set=new long[newCapacity];  _values=(V[])new Object[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (isFull(oldVals,i)) {      long o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  public void addUpdaterListener(final WorkspaceUpdaterListener listener){  updaterListeners.add(listener);}  }
class C{  public void remove(T item){  mItems.remove(item);  notifyDataSetChanged();}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public Builder withButtonColor(final int color){  this.color=color;  return this;}  }
class C{  public IconGenerator(Context context){  mContext=context;  mContainer=(ViewGroup)LayoutInflater.from(mContext).inflate(R.layout.text_bubble,null);  mRotationLayout=(RotationLayout)mContainer.getChildAt(0);  mContentView=mTextView=(TextView)mRotationLayout.findViewById(R.id.text);  setStyle(STYLE_DEFAULT);}  }
class C{  public static SootMethod closestOverridenSystemMethodNoInterfaces(SootMethod method){  List<SootMethod> oMethods=SootUtils.getOverriddenMethodsFromSuperclasses(method);  for (  SootMethod parent : oMethods) {    if (API.v().isSystemMethod(parent))     return parent;  }  return null;}  }
class C{  public FunctionException(String msg){  super(msg);}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null)   return null;  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public String readAll(){  if (!scanner.hasNextLine())   return "";  String result=scanner.useDelimiter(EVERYTHING_PATTERN).next();  scanner.useDelimiter(WHITESPACE_PATTERN);  return result;}  }
class C{  public void reset(){  timeoutAt=null;}  }
class C{  public Object shallowClone(){  try {    return super.clone();  } catch (  Exception e) {    return null;  }}  }
class C{  public Vertex firstNode(){  return nodes[0];}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.SCRIPT__ANNOTATIONS:    return getAnnotations();case N4JSPackage.SCRIPT__SCRIPT_ELEMENTS:  return getScriptElements();case N4JSPackage.SCRIPT__MODULE:if (resolve) return getModule();return basicGetModule();case N4JSPackage.SCRIPT__FLAGGED_USAGE_MARKING_FINISHED:return isFlaggedUsageMarkingFinished();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  while (i < end) {    while (i < end && ignore((char)data[i])) {      i++;    }    b1=decodingTable[data[i++]];    while (i < end && ignore((char)data[i])) {      i++;    }    b2=decodingTable[data[i++]];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex data");    }    out.write((b1 << 4) | b2);    outLen++;  }  return outLen;}  }
class C{  public void fix(String name){  String name2=toJvmName(name);  super.put(name2,name2);}  }
class C{  public static RefactoringStatus checkIdentifier(String name,IJavaElement context){  return checkName(name,JavaConventionsUtil.validateIdentifier(name,context));}  }
class C{  public void testOutputUnigramsIfNoShingles() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","outputUnigrams","false","outputUnigramsIfNoShingles","true").create(stream);  assertTokenStreamContents(stream,new String[]{"test"});}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public MLOutput execute(String dmlScriptFilePath,Map<String,String> namedArgs) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,namedArgs,false,null);}  }
class C{  public static void applyOnlyInsideOmniText(){  if (getTabSwitcher().getCurrentTab().isNew)   browserInputBar.setText("");  try {    String eurl=getWebEngine().getUrl();    eurl=eurl.replaceFirst("^([^ ]*)://","");    if (eurl.substring(eurl.length() - 2,eurl.length() - 1).equals("/"))     eurl=eurl.substring(0,eurl.length() - 2);    browserInputBar.setText(eurl);    detectSeparatorColor();  } catch (  Exception ex) {    Logging.logd("Warning: Didn't succeed while applying inside omni text.");  }}  }
class C{  public static String tryDetectTf(){  final String[] exeNames=Platform.isWindows() ? TF_WINDOWS_PROGRAMS : TF_OTHER_PROGRAMS;  final File[] filePaths=Platform.isWindows() ? PROGRAM_FILE_PATHS : UNIX_PATHS;  return tryDetectTf(exeNames,filePaths);}  }
class C{  public void computeVi(List seq,int pos,DoubleVector Vi,boolean isExp){  Vi.assign(0.0);  model.taggerFGen.startScanSFeaturesAt(seq,pos);  while (model.taggerFGen.hasNextSFeature()) {    Feature f=model.taggerFGen.nextSFeature();    if (f.ftype == Feature.STAT_FEATURE1) {      Vi.vect[f.y]+=model.lambda[f.idx] * f.val;    }  }  if (isExp) {    for (int i=0; i < Vi.len; i++) {      Vi.vect[i]=Math.exp(Vi.vect[i]);    }  }}  }
class C{  public NamePrefix(){  super(KEY);}  }
class C{  public void unloadModule(IModule module){  loadedModules.remove(module);  module.disable();  client.getDispatcher().unregisterListener(module);  loadedModules.removeIf(null);  client.getDispatcher().dispatch(new ModuleDisabledEvent(module));}  }
class C{  public OMLine(double lat_1,double lon_1,double lat_2,double lon_2,int lineType,int nsegs){  super(RENDERTYPE_LATLON,lineType,DECLUTTERTYPE_NONE);  latlons=new double[4];  latlons[0]=lat_1;  latlons[2]=lat_2;  latlons[1]=lon_1;  latlons[3]=lon_2;  this.nsegs=nsegs;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.692 -0500",hash_original_method="74BDFC1296AA332718133078DAF25C56",hash_generated_method="B94282656CAC89533B864BAD327D0DCE") private void writeStatusLocked(){  if (DEBUG_FILE)   Log.v(TAG,"Writing new " + mStatusFile.getBaseFile());  removeMessages(MSG_WRITE_STATUS);  FileOutputStream fos=null;  try {    fos=mStatusFile.startWrite();    Parcel out=Parcel.obtain();    final int N=mSyncStatus.size();    for (int i=0; i < N; i++) {      SyncStatusInfo status=mSyncStatus.valueAt(i);      out.writeInt(STATUS_FILE_ITEM);      status.writeToParcel(out,0);    }    out.writeInt(STATUS_FILE_END);    fos.write(out.marshall());    out.recycle();    mStatusFile.finishWrite(fos);  } catch (  java.io.IOException e1) {    Log.w(TAG,"Error writing status",e1);    if (fos != null) {      mStatusFile.failWrite(fos);    }  }}  }
class C{  public void removePackage(String packageName,UserHandleCompat user,boolean clearCache){  final List<AppInfo> data=this.data;  for (int i=data.size() - 1; i >= 0; i--) {    AppInfo info=data.get(i);    final ComponentName component=info.intent.getComponent();    if (info.user.equals(user) && packageName.equals(component.getPackageName())) {      removed.add(info);      data.remove(i);    }  }  if (clearCache) {    mIconCache.remove(packageName,user);  }}  }
class C{  private void processJoinRequest(JoinRequestMessage incomingRequest){  logger.info("received join request from {}",incomingRequest.getMemberID());  if (incomingRequest.getMemberID().getVersionObject().compareTo(Version.CURRENT) < 0) {    logger.warn("detected an attempt to start a peer using an older version of the product {}",incomingRequest.getMemberID());    JoinResponseMessage m=new JoinResponseMessage("Rejecting the attempt of a member using an older version",incomingRequest.getRequestId());    m.setRecipient(incomingRequest.getMemberID());    services.getMessenger().send(m);    return;  }  Object creds=incomingRequest.getCredentials();  String rejection;  try {    rejection=services.getAuthenticator().authenticate(incomingRequest.getMemberID(),(Properties)creds);  } catch (  Exception e) {    rejection=e.getMessage();  }  if (rejection != null && rejection.length() > 0) {    JoinResponseMessage m=new JoinResponseMessage(rejection,0);    m.setRecipient(incomingRequest.getMemberID());    services.getMessenger().send(m);    return;  }  recordViewRequest(incomingRequest);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:44.698 -0500",hash_original_method="EDED6DC16A68EB62093EC466820CBDE9",hash_generated_method="E59BCA151CC71FC24239D72D6F7B5820") public static Uri.Builder appendId(Uri.Builder builder,long id){  return builder.appendEncodedPath(String.valueOf(id));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SRuntimePackage.COMPOSITE_SLOT__SLOTS:    return getSlots();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void release(){  super.release();  this.name=null;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.ManageInstructors);  InstructorListUpdateForm frm=(InstructorListUpdateForm)form;  MessageResources rsc=getResources(request);  String op=frm.getOp();  if (op != null && op.equals(rsc.getMessage("button.backToInstructorList"))) {    response.sendRedirect(response.encodeURL("instructorList.do"));    return null;  }  if (op != null && op.equals(rsc.getMessage("button.update"))) {    update(frm,request);    response.sendRedirect(response.encodeURL("instructorList.do"));    return null;  }  if (op != null && op.equals(rsc.getMessage("button.applyFilter"))) {    request.setAttribute("filterApplied","1");  }  Collection assigned=getAssigned();  if (assigned != null) {    frm.setAssignedInstr(assigned);  }  Collection available=getAvailable(frm,request);  if (available != null) {    frm.setAvailableInstr(available);  }  LookupTables.setupPositionTypes(request);  setupFilters(frm,request);  frm.setInstructors();  frm.setNameFormat(sessionContext.getUser().getProperty(UserProperty.NameFormat));  return mapping.findForward("showUpdateInstructorList");}  }
class C{  private int matchCaseAlignment(){  while (true) {    nextToken();switch (fToken) {case Symbols.TokenLPAREN:case Symbols.TokenLBRACKET:case Symbols.TokenEOF:      return fPosition;case Symbols.TokenLBRACE:    fIndent=fPrefs.prefCaseIndent;  return fPosition;case Symbols.TokenCASE:case Symbols.TokenDEFAULT:fIndent=0;return fPosition;case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:skipScope();break;default :continue;}}}  }
class C{  void snapshotLayout(){  this.layoutCopy=new LayoutImpl<T>(layout);}  }
class C{  @ScheduleRate(initialDelay=1,period=1,unit=TimeUnit.HOURS) void cacheClenup(){  cache.cleanUp();}  }
class C{  private void onDeath(){  playSoundFromCategory(SoundLayer.FIGHTING_NOISE.groupName,"death");}  }
class C{  private void redrawChunk(ChunkImage chunk){  int win_w=getWidth();  int win_h=getHeight();  int x=(int)((chunk.x + shift_x) * zoom_level);  int y=(int)((chunk.y + shift_y) * zoom_level);  int w=(int)(chunk.image.getWidth() * zoom_level);  int h=(int)(chunk.image.getHeight() * zoom_level);  if (x > win_w || y > win_h)   return;  if (x + w < 0 || y + h < 0)   return;synchronized (main_img) {    Graphics2D mg=main_img.createGraphics();    mg.drawImage(chunk.image,x,y,w,h,null);  }}  }
class C{  void resetValue(Object value) throws BadLocationException, ParseException {  Document doc=getFormattedTextField().getDocument();  String string=valueToString(value);  try {    ignoreDocumentMutate=true;    doc.remove(0,doc.getLength());    doc.insertString(0,string,null);  }  finally {    ignoreDocumentMutate=false;  }  updateValue(value);}  }
class C{  synchronized int addTrack(final MediaFormat format){  if (mIsStarted)   throw new IllegalStateException("muxer already started");  final int trackIx=mMediaMuxer.addTrack(format);  if (DEBUG)   Log.i(TAG,"addTrack:trackNum=" + mEncoderCount + ",trackIx="+ trackIx+ ",format="+ format);  return trackIx;}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public void addYTextLabel(double y,String text,int scale){  mYTextLabels.get(scale).put(y,text);}  }
class C{  public double transform(double value){  return value;}  }
class C{  public static List<DatabaseTableConfig<?>> loadDatabaseConfigFromReader(BufferedReader reader) throws SQLException {  List<DatabaseTableConfig<?>> list=new ArrayList<DatabaseTableConfig<?>>();  while (true) {    DatabaseTableConfig<?> config=DatabaseTableConfigLoader.fromReader(reader);    if (config == null) {      break;    }    list.add(config);  }  return list;}  }
class C{  int findMinGrandChild(int index){  int leftChildIndex=getLeftChildIndex(index);  if (leftChildIndex < 0) {    return -1;  }  return findMin(getLeftChildIndex(leftChildIndex),4);}  }
class C{  private Shape createRoundRectangleInternal(final int x,final int y,final int w,final int h,final double radius,final CornerStyle topLeft,final CornerStyle bottomLeft,final CornerStyle bottomRight,final CornerStyle topRight){  final int left=x;  final int top=y;  final int right=x + w;  final int bottom=y + h;  path.reset();switch (topLeft) {case SQUARE:    path.moveTo(left,top);  break;case ROUNDED:path.moveTo(left + radius,top);path.quadTo(left,top,left,top + radius);break;}switch (bottomLeft) {case SQUARE:path.lineTo(left,bottom);break;case ROUNDED:path.lineTo(left,bottom - radius);path.quadTo(left,bottom,left + radius,bottom);break;}switch (bottomRight) {case SQUARE:path.lineTo(right,bottom);break;case ROUNDED:path.lineTo(right - radius,bottom);path.quadTo(right,bottom,right,bottom - radius);}switch (topRight) {case SQUARE:path.lineTo(right,top);break;case ROUNDED:path.lineTo(right,top + radius);path.quadTo(right,top,right - radius,top);break;}path.closePath();return path;}  }
class C{  public static CreateStatement orFail(CharSequence table){  return produce(table,"FAIL");}  }
class C{  public void readExif(String inFileName) throws FileNotFoundException, IOException {  if (inFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new BufferedInputStream(new FileInputStream(inFileName));    readExif(is);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  private Model create(String name,String prefix,int index) throws Exception {  Model model=new TreeModel(policy,detail,name,prefix,index);  if (name != null) {    models.register(name,model);    order.add(name);  }  return model;}  }
class C{  public void removeMember(User user){  members.remove(user.getId());}  }
class C{  public static String replace(String inString,String oldPattern,String newPattern){  if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {    return inString;  }  StringBuilder sb=new StringBuilder();  int pos=0;  int index=inString.indexOf(oldPattern);  int patLen=oldPattern.length();  while (index >= 0) {    sb.append(inString.substring(pos,index));    sb.append(newPattern);    pos=index + patLen;    index=inString.indexOf(oldPattern,pos);  }  sb.append(inString.substring(pos));  return sb.toString();}  }
class C{  public static <T,K,V,M extends Map<K,V>>M addToMap(Iterable<T> iterable,Function<? super T,? extends K> keyFunction,M map){  Iterate.forEach(iterable,new MapCollectProcedure<>(map,keyFunction));  return map;}  }
class C{  public synchronized void writeToFile(Context ctx) throws IOException {  if (!dirty) {    Log.i(DEBUG_TAG,"storage not dirty, skipping save");    return;  }  if (readingLock.tryLock()) {    if (savingHelper.save(ctx,FILENAME,this,true)) {      dirty=false;    } else {      if (ctx != null) {        Toast.makeText(ctx,R.string.toast_statesave_failed,Toast.LENGTH_LONG).show();      }    }    readingLock.unlock();  } else {    Log.i(DEBUG_TAG,"bug state being read, skipping save");  }}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  mAlphabetIndexer.setCursor(newCursor);  return super.swapCursor(newCursor);}  }
class C{  private double manhattanSegmentalDistance(NumberVector o1,NumberVector o2,long[] dimensions){  double result=0;  int card=0;  for (int d=BitsUtil.nextSetBit(dimensions,0); d >= 0; d=BitsUtil.nextSetBit(dimensions,d + 1)) {    result+=Math.abs(o1.doubleValue(d) - o2.doubleValue(d));    ++card;  }  result/=card;  return result;}  }
class C{  private static void runExample(String moduleName,String workflowClassFQN,String configFileName,String mavenPath) throws Exception {  executeCommand(mavenPath + " -pl " + moduleName+ " -q package dependency:copy-dependencies -DincludeScope=runtime -DskipTests");  FileReader reader=new FileReader(WorkflowExecutionDemo.class.getResource("/packaged/configuration.yml").getFile());  String deploymentUnitsPath=(String)((Map)new Yaml().load(reader)).get("deploymentUnitsPath");  if (!deploymentUnitsPath.endsWith("/")) {    deploymentUnitsPath=deploymentUnitsPath + "/";  }  reader.close();  String deploymentUnitName="DU1";  String mainDirPath=deploymentUnitsPath + deploymentUnitName + "/main";  String libDirPath=deploymentUnitsPath + deploymentUnitName + "/lib";  executeCommand("mkdir -p " + mainDirPath);  executeCommand("mkdir -p " + libDirPath);  FileUtils.copyFile(new File(moduleName + "/target/").listFiles((FilenameFilter)new WildcardFileFilter(moduleName + "*.jar"))[0],new File(mainDirPath + "/" + moduleName+ ".jar"));  FileUtils.copyDirectory(new File(moduleName + "/target/dependency"),new File(libDirPath));  FileUtils.copyFile(new File(moduleName + "/src/main/resources/" + configFileName),new File(deploymentUnitsPath + deploymentUnitName + "/flux_config.yml"));  FluxInitializer.main(new String[]{});  System.out.println((char)27 + "[34m" + executeCommand("java -cp " + moduleName + "/target/*:"+ moduleName+ "/target/dependency/* "+ workflowClassFQN)+ (char)27+ "[0m");}  }
class C{  LoggingCallback(Callback cb,Logger logger){  this.cb=cb;  this.logger=logger;}  }
class C{  public static token debug_next_token() throws java.io.IOException {  token result=real_next_token();  System.out.println("# next_token() => " + result.sym);  return result;}  }
class C{  private ListAdapter createRecommendationsListAdapter(final List<Recommendation> recommendations){  List<Map<String,Object>> data=new ArrayList<>();  for (  Recommendation recommendation : recommendations) {    Map<String,Object> map=new HashMap<>();    map.put("productImage",recommendation.getImageUrl());    map.put("recommendationTitle",recommendation.getTitle());    map.put("recommendationDetails",recommendation.getDescription());    data.add(map);  }  SimpleAdapter adapter=new SimpleAdapter(PlaceDetailsActivity.this,data,R.layout.offer_item,new String[]{"productImage","recommendationTitle","recommendationDetails"},new int[]{R.id.offer_Image,R.id.offer_name,R.id.offer_description});  adapter.setViewBinder(new ImageUrlViewBinder(R.id.offer_Image));  return adapter;}  }
class C{  public void displayCursor(Cursor cursor){  mCursorAdapter.swapCursor(cursor);}  }
class C{  private boolean startsWithStringArray(String sArray[],String value){  if (value == null)   return false;  for (int i=0; i < sArray.length; i++) {    if (value.startsWith(sArray[i])) {      return true;    }  }  return false;}  }
class C{  public void upgradeToDeterministic(@Nullable KeyParameter aesKey) throws DeterministicUpgradeRequiresPassword {  keyChainGroupLock.lock();  try {    keyChainGroup.upgradeToDeterministic(vKeyRotationTimestamp,aesKey);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  private int pixelBilinear(double x,double y){  int fx=(int)Math.floor(x);  int fy=(int)Math.floor(y);  int alpha0=alpha(pixel(fx,fy));  int alpha1=alpha(pixel(fx + 1,fy));  int alpha2=alpha(pixel(fx,fy + 1));  int alpha3=alpha(pixel(fx + 1,fy + 1));  if (alpha0 == 0 && alpha1 == 0 && alpha2 == 0 && alpha3 == 0) {    return 0;  }  int red0=red(pixel(fx,fy));  int red1=red(pixel(fx + 1,fy));  int red2=red(pixel(fx,fy + 1));  int red3=red(pixel(fx + 1,fy + 1));  int green0=green(pixel(fx,fy));  int green1=green(pixel(fx + 1,fy));  int green2=green(pixel(fx,fy + 1));  int green3=green(pixel(fx + 1,fy + 1));  int blue0=blue(pixel(fx,fy));  int blue1=blue(pixel(fx + 1,fy));  int blue2=blue(pixel(fx,fy + 1));  int blue3=blue(pixel(fx + 1,fy + 1));  double xv=x - fx;  double yv=y - fy;  double mul0=(1.0 - xv) * (1.0 - yv);  double mul1=xv * (1.0 - yv);  double mul2=(1.0 - xv) * yv;  double mul3=xv * yv;  int alpha=(int)Math.round(mul0 * alpha0 + mul1 * alpha1 + mul2 * alpha2 + mul3 * alpha3);  int blue=(int)Math.round(mul0 * blue0 + mul1 * blue1 + mul2 * blue2 + mul3 * blue3);  int red=(int)Math.round(mul0 * red0 + mul1 * red1 + mul2 * red2 + mul3 * red3);  int green=(int)Math.round(mul0 * green0 + mul1 * green1 + mul2 * green2 + mul3 * green3);  return combine(alpha,red,green,blue);}  }
class C{  private boolean hasNonEndpointIntersection(GeometryGraph graph){  for (Iterator i=graph.getEdgeIterator(); i.hasNext(); ) {    Edge e=(Edge)i.next();    int maxSegmentIndex=e.getMaximumSegmentIndex();    for (Iterator eiIt=e.getEdgeIntersectionList().iterator(); eiIt.hasNext(); ) {      EdgeIntersection ei=(EdgeIntersection)eiIt.next();      if (!ei.isEndPoint(maxSegmentIndex)) {        nonSimpleLocation=ei.getCoordinate();        return true;      }    }  }  return false;}  }
class C{  public static void main(String[] args){  BigInteger i=new BigInteger(Long.MAX_VALUE + "");  BigInteger end=i.add(new BigInteger("10"));  for (i=new BigInteger(Long.MAX_VALUE + ""); i.compareTo(end) <= 0; i=i.add(new BigInteger("1"))) {    System.out.println(i.multiply(i));  }}  }
class C{  private void prepareCallNotification(Event event,BingRule bingRule){  if (!event.type.equals(Event.EVENT_TYPE_CALL_INVITE)) {    Log.d(LOG_TAG,"prepareCallNotification : don't bing - Call invite");    return;  }  MXSession session=Matrix.getMXSession(getApplicationContext(),event.getMatrixId());  if ((null == session) || !session.isAlive()) {    Log.d(LOG_TAG,"prepareCallNotification : don't bing - no session");    return;  }  Room room=session.getDataHandler().getRoom(event.roomId);  if (null == room) {    Log.d(LOG_TAG,"prepareCallNotification : don't bing - the room does not exist");    return;  }  String callId=null;  try {    callId=event.getContentAsJsonObject().get("call_id").getAsString();  } catch (  Exception e) {    Log.e(LOG_TAG,"prepareNotification : getContentAsJsonObject " + e.getMessage());  }  if (!TextUtils.isEmpty(callId)) {    displayIncomingCallNotification(session,room,event,callId,bingRule);  }}  }
class C{  public Market(final RPObject object){  super(object);  this.setRPClass(MARKET_RPCLASS_NAME);  hide();  if (hasSlot(OFFERS_SLOT_NAME)) {    removeSlot(OFFERS_SLOT_NAME);  }  addSlot(OFFERS_SLOT_NAME);  if (hasSlot(EARNINGS_SLOT_NAME)) {    removeSlot(EARNINGS_SLOT_NAME);  }  addSlot(EARNINGS_SLOT_NAME);  if (hasSlot(EXPIRED_OFFERS_SLOT_NAME)) {    removeSlot(EXPIRED_OFFERS_SLOT_NAME);  }  addSlot(EXPIRED_OFFERS_SLOT_NAME);  if (object.hasSlot(OFFERS_SLOT_NAME)) {    for (    final RPObject rpo : object.getSlot(OFFERS_SLOT_NAME)) {      Offer offer=new Offer(rpo);      if (offer.getItem() == null) {        logger.warn("Cannot restore an offer by " + offer.getOfferer() + " because this item"+ " was removed from items.xml");        continue;      }      this.getSlot(OFFERS_SLOT_NAME).add(offer);    }  }  if (object.hasSlot(EARNINGS_SLOT_NAME)) {    for (    final RPObject rpo : object.getSlot(EARNINGS_SLOT_NAME)) {      final Earning earning=new Earning(rpo);      this.getSlot(EARNINGS_SLOT_NAME).add(earning);    }  }  if (object.hasSlot(EXPIRED_OFFERS_SLOT_NAME)) {    for (    final RPObject rpo : object.getSlot(EXPIRED_OFFERS_SLOT_NAME)) {      Offer offer=new Offer(rpo);      if (offer.getItem() == null) {        logger.warn("Cannot restore an offer by " + offer.getOfferer() + " because this item"+ " was removed from items.xml");        continue;      }      this.getSlot(EXPIRED_OFFERS_SLOT_NAME).add(offer);    }  }  store();}  }
class C{  public void update(RosterEntry r){  r.setId(id.getText());  r.setRoadName(roadName.getText());  r.setRoadNumber(roadNumber.getText());  r.setMfg(mfg.getText());  r.setOwner(owner.getText());  r.setModel(model.getText());  DccLocoAddress a=addrSel.getAddress();  if (a != null) {    r.setDccAddress("" + a.getNumber());    r.setProtocol(a.getProtocol());  }  r.setComment(comment.getText());  JComponent editor=maxSpeedSpinner.getEditor();  r.setMaxSpeedPCT(Integer.parseInt(((JSpinner.DefaultEditor)editor).getTextField().getText()));  r.setDecoderFamily(decoderFamily.getText());  r.setDecoderModel(decoderModel.getText());  r.setDecoderComment(decoderComment.getText());}  }
class C{  public static <T>SimpleResultsPage<T> emptyPage(){  return new SimpleResultsPage<T>(Collections.<T>emptyList(),false);}  }
class C{  void checkOrientation(Coordinate[] pts){  checkDD(pts,true);  checkShewchuk(pts,true);  checkOriginalJTS(pts,false);}  }
class C{  private void readObject(){}  }
class C{  public double scoreDag(Graph dag){  buildIndexing(dag.getNodes());  double _score=0.0;  for (  Node y : dag.getNodes()) {    Set<Node> parents=new HashSet<>(dag.getParents(y));    int parentIndices[]=new int[parents.size()];    Iterator<Node> pi=parents.iterator();    int count=0;    while (pi.hasNext()) {      Node nextParent=pi.next();      parentIndices[count++]=hashIndices.get(nextParent);    }    int yIndex=hashIndices.get(y);    _score+=score.localScore(yIndex,parentIndices);  }  return _score;}  }
class C{  void addClassName(TypeElement sourceClass,String generatedClassName) throws IOException {  String superClassName=sourceClass.getQualifiedName().toString();  String classDeclaration="public final class " + generatedClassName + " extends "+ superClassName+ " {";  writeLine(classDeclaration);  writeEmptyLine();  increaseIndentation();}  }
class C{  public static String quote(String s){  return "\"" + s + "\"";}  }
class C{  private void fillIDValues(){  for (  X_I_ProductPlanning ppi : getRecords(false,p_IsImportOnlyNoErrors)) {    int AD_Org_ID=0;    if (ppi.getAD_Org_ID() > 0)     AD_Org_ID=getID(MOrg.Table_Name,"AD_Org_ID = ?",ppi.getAD_Org_ID());    if (AD_Org_ID <= 0 && ppi.getOrgValue() != null) {      AD_Org_ID=getID(MOrg.Table_Name,"Value = ?",ppi.getOrgValue());      ppi.setAD_Org_ID(AD_Org_ID);    } else     ppi.setAD_Org_ID(AD_Org_ID);    int C_BPartner_ID=0;    if (ppi.getC_BPartner_ID() == 0)     C_BPartner_ID=getID(I_C_BPartner.Table_Name,I_C_BPartner.COLUMNNAME_C_BPartner_ID + "=?",ppi.getC_BPartner_ID());    if (C_BPartner_ID <= 0 && ppi.getBPartner_Value() != null) {      C_BPartner_ID=getID(I_C_BPartner.Table_Name,I_C_BPartner.COLUMNNAME_Value + "=?",ppi.getBPartner_Value());      ppi.setC_BPartner_ID(C_BPartner_ID);    } else     ppi.setC_BPartner_ID(C_BPartner_ID);    int M_Product_ID=0;    if (ppi.getM_Product_ID() > 0)     M_Product_ID=getID(MProduct.Table_Name,"M_Product_ID = ?",ppi.getM_Product_ID());    if (M_Product_ID <= 0 && ppi.getProductValue() != null) {      M_Product_ID=getID(MProduct.Table_Name,"Value = ?",ppi.getProductValue());      ppi.setM_Product_ID(M_Product_ID);    } else     ppi.setM_Product_ID(M_Product_ID);    int M_Warehouse_ID=0;    if (ppi.getM_Warehouse_ID() > 0)     M_Warehouse_ID=getID(MWarehouse.Table_Name,"M_Warehouse_ID = ?",ppi.getM_Warehouse_ID());    if (M_Warehouse_ID <= 0 && ppi.getWarehouseValue() != null) {      M_Warehouse_ID=getID(MWarehouse.Table_Name,"Value = ?",ppi.getWarehouseValue());      ppi.setM_Warehouse_ID(M_Warehouse_ID);    } else     ppi.setM_Warehouse_ID(M_Warehouse_ID);    int DD_NetworkDistribution_ID=0;    if (ppi.getDD_NetworkDistribution_ID() > 0)     DD_NetworkDistribution_ID=getID(I_DD_NetworkDistribution.Table_Name,I_DD_NetworkDistribution.COLUMNNAME_DD_NetworkDistribution_ID + " = ?",ppi.getDD_NetworkDistribution_ID());    if (DD_NetworkDistribution_ID <= 0 && ppi.getNetworkDistributionValue() != null) {      DD_NetworkDistribution_ID=getID(I_DD_NetworkDistribution.Table_Name,I_DD_NetworkDistribution.COLUMNNAME_Value + "= ?",ppi.getNetworkDistributionValue());      ppi.setDD_NetworkDistribution_ID(DD_NetworkDistribution_ID);    } else     ppi.setDD_NetworkDistribution_ID(DD_NetworkDistribution_ID);    int PP_Product_BOM_ID=0;    if (ppi.getPP_Product_BOM_ID() > 0)     PP_Product_BOM_ID=getID(I_PP_Product_BOM.Table_Name,I_PP_Product_BOM.COLUMNNAME_PP_Product_BOM_ID + "= ?",ppi.getPP_Product_BOM_ID());    if (PP_Product_BOM_ID <= 0 && ppi.getProduct_BOM_Value() != null) {      PP_Product_BOM_ID=getID(I_PP_Product_BOM.Table_Name,I_PP_Product_BOM.COLUMNNAME_Value + "= ?",ppi.getProduct_BOM_Value());      ppi.setPP_Product_BOM_ID(PP_Product_BOM_ID);    } else     ppi.setPP_Product_BOM_ID(PP_Product_BOM_ID);    int S_Resource_ID=0;    if (ppi.getS_Resource_ID() > 0)     S_Resource_ID=getID(I_S_Resource.Table_Name,I_S_Resource.COLUMNNAME_S_Resource_ID + "= ?",ppi.getS_Resource_ID());    if (S_Resource_ID <= 0 && ppi.getResourceValue() != null) {      S_Resource_ID=getID(I_S_Resource.Table_Name,I_S_Resource.COLUMNNAME_Value + "=? AND " + I_S_Resource.COLUMNNAME_ManufacturingResourceType+ "=?",ppi.getResourceValue(),X_S_Resource.MANUFACTURINGRESOURCETYPE_Plant);      ppi.setS_Resource_ID(S_Resource_ID);    } else     ppi.setS_Resource_ID(S_Resource_ID);    ppi.saveEx();    StringBuffer err=new StringBuffer("");    if (ppi.getAD_Org_ID() <= 0)     err.append(" @AD_Org_ID@ @NotFound@,");    if (ppi.getM_Product_ID() <= 0)     err.append(" @M_Product_ID@ @NotFound@,");    if (err.toString() != null && err.toString().length() > 0) {      notimported++;      ppi.setI_ErrorMsg(Msg.parseTranslation(getCtx(),err.toString()));      ppi.saveEx();    }  }}  }
class C{  public boolean isDisplayIdentifier(){  Object oo=get_Value(COLUMNNAME_IsDisplayIdentifier);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testReadTokens() throws Exception {  final int NUM_DOCS=20;  String algLines1[]={"# ----- properties ","analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"# ----- alg ","{ReadTokens}: " + NUM_DOCS,"ResetSystemErase","CreateIndex","{AddDoc}: " + NUM_DOCS,"CloseIndex"};  Benchmark benchmark=execBenchmark(algLines1);  List<TaskStats> stats=benchmark.getRunData().getPoints().taskStats();  int totalTokenCount1=0;  for (  final TaskStats stat : stats) {    if (stat.getTask().getName().equals("ReadTokens")) {      totalTokenCount1+=stat.getCount();    }  }  IndexReader reader=DirectoryReader.open(benchmark.getRunData().getDirectory());  assertEquals(NUM_DOCS,reader.numDocs());  int totalTokenCount2=0;  Fields fields=MultiFields.getFields(reader);  for (  String fieldName : fields) {    if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {      continue;    }    Terms terms=fields.terms(fieldName);    if (terms == null) {      continue;    }    TermsEnum termsEnum=terms.iterator();    PostingsEnum docs=null;    while (termsEnum.next() != null) {      docs=TestUtil.docs(random(),termsEnum,docs,PostingsEnum.FREQS);      while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {        totalTokenCount2+=docs.freq();      }    }  }  reader.close();  assertEquals(totalTokenCount1,totalTokenCount2);}  }
class C{  private void calcXValAverageLength(){  if (mXVals.size() <= 0) {    mXValAverageLength=1;    return;  }  float sum=1f;  for (int i=0; i < mXVals.size(); i++) {    sum+=mXVals.get(i).length();  }  mXValAverageLength=sum / (float)mXVals.size();}  }
class C{  protected void doRelease(){  call=null;}  }
class C{  @Override public IMqttToken unsubscribe(String topic) throws MqttException {  return unsubscribe(topic,null,null);}  }
class C{  public void broadcast(Message msg){synchronized (this) {    if (mReg == null) {      return;    }    int senderWhat=msg.what;    Registration start=mReg;    Registration r=start;    do {      if (r.senderWhat >= senderWhat) {        break;      }      r=r.next;    } while (r != start);    if (r.senderWhat == senderWhat) {      Handler[] targets=r.targets;      int[] whats=r.targetWhats;      int n=targets.length;      for (int i=0; i < n; i++) {        Handler target=targets[i];        Message m=Message.obtain();        m.copyFrom(msg);        m.what=whats[i];        if (target != null)         target.sendMessage(m);      }    }  }}  }
class C{  public String deleteMarketplace() throws SaaSApplicationException {  try {    if (isTokenValid()) {      getMarketplaceService().deleteMarketplace(marketplace.getMarketplaceId());      addMessage(null,FacesMessage.SEVERITY_INFO,INFO_MARKETPLACE_DELETED,marketplace.getMarketplaceId());      resetToken();    }  }  finally {    checkMarketplaceDropdownAndMenuVisibility(null);  }  return null;}  }
class C{  public void put(Object key,Action action){  if (key == null) {    return;  }  if (action == null) {    remove(key);  } else {    if (arrayTable == null) {      arrayTable=new ArrayTable();    }    arrayTable.put(key,action);  }}  }
class C{  private void read(InputNode node,Object list,int index) throws Exception {  Class type=entry.getType();  Object value=null;  if (!node.isEmpty()) {    value=root.read(node,type);  }  Array.set(list,index,value);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  refTableEntries=new ArrayList();}  }
class C{  public void testSeekGoodNonZeroFirst() throws Exception {  File logDir=prepareLogDir("testSeekGoodNonZeroFirst");  DiskLog log=openLog(logDir,false);  log.setTimeoutMillis(1000);  LogConnection conn=log.connect(true);  assertTrue("Seeking future event that will exist",conn.seek(10));  try {    THLEvent e=conn.next();    throw new Exception("Able to seek and read non-existent position in empty log: " + e);  } catch (  LogTimeoutException e) {    logger.info("Returned expected timeout exception");  }  writeEventsToLog(log,10,1);  THLEvent e=conn.next();  assertNotNull("Found an event",e);  assertEquals("Has expected seqno",10,e.getSeqno());  assertEquals("Log min should be same as written event",10,log.getMinSeqno());  assertEquals("Log max should be same as written event",10,log.getMaxSeqno());  conn.release();  log.release();}  }
class C{  public boolean isShouldLocalize(){  return shouldLocalize;}  }
class C{  RegionCommit(TXCommitMessage msg,LocalRegion r,int maxSize){  this.msg=msg;  this.r=r;  this.maxSize=maxSize;}  }
class C{  @SuppressWarnings("ConstantConditions") Set<String> findResourceNamesFromFileSystem(String classPathRootOnDisk,String scanRootLocation,File folder) throws IOException {  LOG.debug("Scanning for resources in path: " + folder.getPath() + " ("+ scanRootLocation+ ")");  Set<String> resourceNames=new TreeSet<String>();  File[] files=folder.listFiles();  for (  File file : files) {    if (file.canRead()) {      if (file.isDirectory()) {        resourceNames.addAll(findResourceNamesFromFileSystem(classPathRootOnDisk,scanRootLocation,file));      } else {        resourceNames.add(toResourceNameOnClasspath(classPathRootOnDisk,file));      }    }  }  return resourceNames;}  }
class C{  public ConditionAndActionPortal(ChatCondition condition,ChatAction action){  this(condition,"Why should i go down there?. It looks very dangerous.",action);}  }
class C{  private void seekNonWs(final String pattern,final ParsePosition pos){  int len=0;  final char[] buffer=pattern.toCharArray();  do {    len=StrMatcher.splitMatcher().isMatch(buffer,pos.getIndex());    pos.setIndex(pos.getIndex() + len);  } while (len > 0 && pos.getIndex() < pattern.length());}  }
class C{  private static void toString(final Object obj,final StringBuilder sb,final String prefix){  if (obj == null) {    sb.append("null");    return;  }  if (obj instanceof Iterable) {    iterableToString(sb,(Iterable<?>)obj,prefix);    return;  }  final Class<?> clazz=obj.getClass();  if (toStringDeclared(clazz)) {    sb.append(prefix);    sb.append(obj.toString());    return;  }  final String name=clazz.getSimpleName();  sb.append(name);  if (clazz.isArray()) {    sb.append(LS);    arrayToString(sb,obj,clazz,prefix);    return;  }  final ArrayList<Field> fields=allFields(clazz);  for (  final Field field : fields) {    setAccessible(field);    if (Modifier.isStatic(field.getModifiers())) {      continue;    }    final Class<?> fieldClass=field.getType();    if (fieldClass.isPrimitive()) {      final String fieldName=field.getName();      sb.append(prefix);      sb.append(" ").append(fieldName).append("=");      primitiveToString(obj,sb,field,fieldClass);    }  }  for (  final Field field : fields) {    if (Modifier.isStatic(field.getModifiers())) {      continue;    }    final Class<?> fieldClass=field.getType();    if (fieldClass.isPrimitive()) {      continue;    }    final String fieldName=field.getName();    sb.append(LS).append(prefix).append(fieldName).append(":");    final Object fieldObject=fieldObject(obj,field);    if (fieldObject == null) {      continue;    }    if (fieldClass.isArray()) {      arrayToString(sb,fieldObject,fieldClass,prefix);    } else {      objectToString(sb,fieldObject,prefix);    }  }}  }
class C{  public String extractName(InvocationSequenceData invocSequence,ICachedDataService cachedDataService){  try {    compileRegexPattern();  } catch (  PatternSyntaxException e) {    return null;  }  String[] stringValues=getStringValueSource().getStringValues(invocSequence,cachedDataService);  for (  String stringValue : stringValues) {    Matcher matcher=regex.matcher(stringValue);    if (!matcher.matches()) {      continue;    }    String resultingName=getTargetNamePattern();    for (int i=1; i <= matcher.groupCount(); i++) {      String groupValue=matcher.group(i);      resultingName=resultingName.replaceFirst("\\(" + i + "\\)",groupValue);    }    return resultingName;  }  return null;}  }
class C{  @Override public boolean allTablesAreSelectable(){  debugCodeCall("allTablesAreSelectable");  return true;}  }
class C{  private Lesson createUserLesson(){  final Lesson lesson=new Lesson();  lesson.setLessonName("User lesson");  lesson.setUserLesson(true);  lesson.setImagePath(getRandomImage());  return lesson;}  }
class C{  ConnectionInputStream(InputStream in) throws IOException {  super(in);}  }
class C{  public CoreDescriptor(CoreContainer container,String name,Path instanceDir){  this(container,name,instanceDir,Collections.emptyMap());}  }
class C{  private void uploadImage(final State currentState){  UploadImageTaskService.State startState=new UploadImageTaskService.State();  startState.parentTaskServiceLink=getSelfLink();  startState.parentPatchBody=Utils.toJson(false,false,buildPatch(TaskStage.STARTED,TaskState.SubStage.ALLOCATE_RESOURCES));  startState.taskPollDelay=currentState.childPollInterval;  startState.deploymentServiceLink=currentState.deploymentServiceLink;  startState.imageName="management-vm-image";  startState.imageFile=currentState.imageFile;  sendRequest(Operation.createPost(this,UploadImageTaskFactoryService.SELF_LINK).setBody(startState).setCompletion(null));}  }
class C{  public void unschedule(String selector,Object target){  if (target == null || selector == null)   return;  assert target != null : "Target MUST not be null";  assert selector != null : "Selector MUST not be null";  tHashSelectorEntry element=hashForSelectors.get(target);  if (element != null) {    for (int i=0; i < element.timers.size(); i++) {      CCTimer timer=element.timers.get(i);      if (selector.equals(timer.getSelector())) {        if (timer == element.currentTimer && !element.currentTimerSalvaged) {          element.currentTimerSalvaged=true;        }        element.timers.remove(i);        if (element.timerIndex >= i)         element.timerIndex--;        if (element.timers.isEmpty()) {          if (currentTarget == element) {            currentTargetSalvaged=true;          } else {            hashForSelectors.remove(element.target);          }        }        return;      }    }  }}  }
class C{  public EditRandomizerPropertiesAction(final NetworkPanel networkPanel){  super("Edit randomizer properties...");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("Rand.png"));  this.networkPanel=networkPanel;}  }
class C{  protected void flushCacheWithAppend(byte bufferToAppend[],int off,int len) throws IOException {  this.out.writeLine(Integer.toHexString(this.cachePosition + len));  this.out.write(this.cache,0,this.cachePosition);  this.out.write(bufferToAppend,off,len);  this.out.writeLine("");  this.cachePosition=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.146 -0500",hash_original_method="25DC8075DF7374531478BAA131CB7343",hash_generated_method="CEA2428286B155E93CC6F54FE4546B7F") public void copyTo(byte[] d){  validateIsInt8();  mRS.validate();  mRS.nAllocationRead(getID(),d);}  }
class C{  @Override protected void doAction(){  FileOutputStream fos=null;  File caReplyFile=null;  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStore keyStore=currentState.getKeyStore();    PrivateKey privateKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());    Certificate[] certs=keyStore.getCertificateChain(alias);    KeyPairType keyPairType=KeyPairUtil.getKeyPairType(privateKey);    File csrFile=chooseCsrFile();    if (csrFile == null) {      return;    }    PKCS10CertificationRequest pkcs10Csr=null;    Spkac spkacCsr=null;    try {      CryptoFileType fileType=CryptoFileUtil.detectFileType(new FileInputStream(csrFile));      if (fileType == CryptoFileType.PKCS10_CSR) {        pkcs10Csr=Pkcs10Util.loadCsr(new FileInputStream(csrFile));        if (!Pkcs10Util.verifyCsr(pkcs10Csr)) {          JOptionPane.showMessageDialog(frame,res.getString("SignCsrAction.NoVerifyPkcs10Csr.message"),res.getString("SignCsrAction.SignCsr.Title"),JOptionPane.WARNING_MESSAGE);          return;        }      } else       if (fileType == CryptoFileType.SPKAC_CSR) {        spkacCsr=new Spkac(new FileInputStream(csrFile));        if (!spkacCsr.verify()) {          JOptionPane.showMessageDialog(frame,res.getString("SignCsrAction.NoVerifySpkacCsr.message"),res.getString("SignCsrAction.SignCsr.Title"),JOptionPane.WARNING_MESSAGE);          return;        }      } else {        JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("SignCsrAction.FileNotRecognisedType.message"),csrFile),res.getString("SignCsrAction.SignCsr.Title"),JOptionPane.WARNING_MESSAGE);        return;      }    } catch (    FileNotFoundException ex) {      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("SignCsrAction.NotFile.message"),csrFile),res.getString("SignCsrAction.SignCsr.Title"),JOptionPane.WARNING_MESSAGE);      return;    }catch (    Exception ex) {      String problemStr=MessageFormat.format(res.getString("SignCsrAction.NoOpenCsr.Problem"),csrFile.getName());      String[] causes=new String[]{res.getString("SignCsrAction.NotCsr.Cause"),res.getString("SignCsrAction.CorruptedCsr.Cause")};      Problem problem=new Problem(problemStr,causes,ex);      DProblem dProblem=new DProblem(frame,res.getString("SignCsrAction.ProblemOpeningCsr.Title"),problem);      dProblem.setLocationRelativeTo(frame);      dProblem.setVisible(true);      return;    }    X509Certificate[] signingChain=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(certs));    X509Certificate signingCert=signingChain[0];    PublicKey publicKey=null;    X500Name subject=null;    DSignCsr dSignCsr=null;    Provider provider=history.getExplicitProvider();    if (pkcs10Csr != null) {      publicKey=new JcaPKCS10CertificationRequest(pkcs10Csr).getPublicKey();      subject=pkcs10Csr.getSubject();      dSignCsr=new DSignCsr(frame,pkcs10Csr,csrFile,privateKey,keyPairType,signingCert,provider);    } else {      publicKey=spkacCsr.getPublicKey();      subject=spkacCsr.getSubject().getName();      dSignCsr=new DSignCsr(frame,spkacCsr,csrFile,privateKey,keyPairType,signingCert,provider);    }    dSignCsr.setLocationRelativeTo(frame);    dSignCsr.setVisible(true);    X509CertificateVersion version=dSignCsr.getVersion();    SignatureType signatureType=dSignCsr.getSignatureType();    long validityPeriod=dSignCsr.getValidityPeriod();    BigInteger serialNumber=dSignCsr.getSerialNumber();    caReplyFile=dSignCsr.getCaReplyFile();    X509ExtensionSet extensions=dSignCsr.getExtensions();    if (version == null) {      return;    }    X500Name issuer=X500NameUtils.x500PrincipalToX500Name(signingCert.getSubjectX500Principal());    X509CertificateGenerator generator=new X509CertificateGenerator(version);    X509Certificate caReplyCert=generator.generate(subject,issuer,validityPeriod,publicKey,privateKey,signatureType,serialNumber,extensions,provider);    X509Certificate[] caReplyChain=new X509Certificate[signingChain.length + 1];    caReplyChain[0]=caReplyCert;    System.arraycopy(signingChain,0,caReplyChain,1,signingChain.length);    byte[] caCertEncoded=X509CertUtil.getCertsEncodedPkcs7(caReplyChain);    fos=new FileOutputStream(caReplyFile);    fos.write(caCertEncoded);  } catch (  FileNotFoundException ex) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("SignJarAction.NoWriteFile.message"),caReplyFile),res.getString("SignCsrAction.SignCsr.Title"),JOptionPane.WARNING_MESSAGE);    return;  }catch (  Exception ex) {    DError.displayError(frame,ex);    return;  } finally {    IOUtils.closeQuietly(fos);  }  JOptionPane.showMessageDialog(frame,res.getString("SignCsrAction.SignCsrSuccessful.message"),res.getString("SignCsrAction.SignCsr.Title"),JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public IOError(Throwable cause){  super(cause);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.381 -0500",hash_original_method="23FCA30C77438F833B36A8A9B6CBC6CC",hash_generated_method="5BF51B9D756AC66CA74ED0E535DA5717") protected void alert(byte level,byte description){  if (logger != null) {    logger.println("SSLRecordProtocol.allert: " + level + " "+ description);  }  alertProtocol.alert(level,description);}  }
class C{  private void updateEditorTextCount(){  if (mMentionsEditText != null && mTextCounterView != null) {    int textCount=mMentionsEditText.getMentionsText().length();    mTextCounterView.setText(String.valueOf(textCount));    if (mTextCountLimit > 0 && textCount > mTextCountLimit) {      mTextCounterView.setTextColor(mBeyondCountLimitTextColor);    } else {      mTextCounterView.setTextColor(mWithinCountLimitTextColor);    }  }}  }
class C{  public PreferencesDialog(Frame owner){  super(owner,"Preferences",true);  try {    this.setIconImage(TDA.createImageIcon("Preferences.png").getImage());  } catch (  NoSuchMethodError nsme) {  }  frame=owner;  getContentPane().setLayout(new BorderLayout());  initPanel();}  }
class C{  public void addSorted(AbstractMergeNode block,int number){  if (workList == null) {    allocate();  } else   if (workListIndex == workList.length) {    grow();  }  workList[workListIndex]=block;  workListNumbers[workListIndex]=number;  workListIndex++;  int i=workListIndex - 2;  for (; i >= 0; i--) {    int n=workListNumbers[i];    if (n >= number) {      break;    }    workList[i + 1]=workList[i];    workList[i]=block;    workListNumbers[i + 1]=n;    workListNumbers[i]=number;  }}  }
class C{  public final Vec3D rotateY(float theta){  final float co=(float)Math.cos(theta);  final float si=(float)Math.sin(theta);  final float xx=co * x - si * z;  z=si * x + co * z;  x=xx;  return this;}  }
class C{  public void onCreate(@Nullable Bundle savedInstanceState){  showsBottomSheet=AccessFragmentInternals.getContainerId(fragment) == 0;  if (savedInstanceState != null) {    showsBottomSheet=savedInstanceState.getBoolean(SAVED_SHOWS_BOTTOM_SHEET,showsBottomSheet);    backStackId=savedInstanceState.getInt(SAVED_BACK_STACK_ID,-1);    bottomSheetLayoutId=savedInstanceState.getInt(SAVED_BOTTOM_SHEET_LAYOUT_ID,View.NO_ID);  }}  }
class C{  public FIXConfig build(){  return new FIXConfig(version,senderCompId,targetCompId,heartBtInt,incomingMsgSeqNum,outgoingMsgSeqNum,maxFieldCount,fieldCapacity,rxBufferCapacity,txBufferCapacity);}  }
class C{  public IgniteThread(ThreadGroup grp,String gridName,String threadName,Runnable r,int grpIdx){  super(grp,r,createName(cntr.incrementAndGet(),threadName,gridName));  this.gridName=gridName;  this.grpIdx=grpIdx;}  }
class C{  private Dimension restoreWindowSize(){  Dimension result=null;  final String sizestr=preferences.get(prefnzPrefix + PREF_WINDOW_SIZE,null);  if (sizestr != null) {    int width=0;    int height=0;    final String[] sizes=sizestr.split("[,]");    try {      width=Integer.parseInt(sizes[0].trim());      height=Integer.parseInt(sizes[1].trim());    } catch (    final Exception e) {    }    if (width > 0 && height > 0) {      result=new Dimension(width,height);      if (logger.isDebugEnabled())       logger.debug("Restoring preference " + PREF_WINDOW_SIZE + "="+ result.width+ ","+ result.height);      this.setSize(result);    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.011 -0400",hash_original_method="801DC567BE87B368F7C34CBAA5165FFF",hash_generated_method="27DC6B0FF45E4C1DBA9EF960A9911185") public final void info(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {    log(SimpleLog.LOG_LEVEL_INFO,message,null);  }}  }
class C{  public static void requestSearchFocus(){  GUIMediator.instance().getMainFrame().getApplicationHeader().requestSearchFocus();}  }
class C{  protected void updateDisplay(){  chartPanel.setChart(createChart());  invalidate();}  }
class C{  public String nextTo(char d) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=next();    if (c == d || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public Object read(String value) throws Exception {  char[] list=value.toCharArray();  int length=list.length;  if (entry == char.class) {    return list;  }  return read(list,length);}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitTryCatchBlock(start.getLabel(),end.getLabel(),handler == null ? null : handler.getLabel(),type);  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,false));  }}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public synchronized OMGraphicList prepare(){  if (objects == null) {    objects=init();  }  OMGraphicList list=new OMGraphicList();  list.addAll(objects);  list.generate(getProjection());  return list;}  }
class C{  public final boolean a8Castle(){  return (castleMask & (1 << A8_CASTLE)) != 0;}  }
class C{  public int stepToNextEvent(boolean stepIntoGroup){  if ((getEvent() == FormEntryController.EVENT_GROUP || getEvent() == FormEntryController.EVENT_REPEAT) && indexIsInFieldList() && !stepIntoGroup) {    return stepOverGroup();  } else {    return mFormEntryController.stepToNextEvent();  }}  }
class C{  public BigDecimalConverter(){  super(true);}  }
class C{  @Override public final void reset() throws IOException {  super.reset();  eof=false;  lastItemId=null;}  }
class C{  protected void addReferencesFromOfflineOCSPSource(List<TimestampReference> references){  OfflineOCSPSource ocspSource=getOCSPSource();  if (ocspSource != null) {    List<BasicOCSPResp> containedOCSPResponses=ocspSource.getContainedOCSPResponses();    if (CollectionUtils.isNotEmpty(containedOCSPResponses)) {      usedCertificatesDigestAlgorithms.add(DigestAlgorithm.SHA1);      for (      BasicOCSPResp basicOCSPResp : containedOCSPResponses) {        OCSPResp ocspResp=DSSRevocationUtils.fromBasicToResp(basicOCSPResp);        final byte[] digest=DSSUtils.digest(DigestAlgorithm.SHA1,DSSUtils.getEncoded(ocspResp));        references.add(new TimestampReference(DigestAlgorithm.SHA1,Base64.encodeBase64String(digest),TimestampReferenceCategory.REVOCATION));      }    }  }}  }
class C{  final public int indexOf(final char c,final int from){  final int length=length();  final char[] a=array;  int i=from < 0 ? -1 : from - 1;  while (++i < length)   if (a[i] == c)   return i;  return -1;}  }
class C{  private int encryptColumnContents(String columnName,String tableName) throws Exception {  int recordsEncrypted=0;  String idColumnName=tableName + "_ID";  StringBuffer selectSql=new StringBuffer();  selectSql.append("SELECT " + idColumnName + ","+ columnName);  selectSql.append(" FROM " + tableName);  selectSql.append(" ORDER BY " + idColumnName);  StringBuffer updateSql=new StringBuffer();  updateSql.append("UPDATE " + tableName);  updateSql.append(" SET " + columnName + "=?");  updateSql.append(" WHERE " + idColumnName + "=?");  PreparedStatement selectStmt=null;  PreparedStatement updateStmt=null;  selectStmt=m_conn.prepareStatement(selectSql.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  updateStmt=m_conn.prepareStatement(updateSql.toString());  ResultSet rs=selectStmt.executeQuery();  for (recordsEncrypted=0; rs.next(); ++recordsEncrypted) {    int id=rs.getInt(1);    String value=rs.getString(2);    value=SecureEngine.encrypt(value);    updateStmt.setString(1,value);    updateStmt.setInt(2,id);    if (updateStmt.executeUpdate() != 1) {      log.warning("EncryptError: Table=" + tableName + ", ID="+ id);      throw new Exception();    }  }  rs.close();  selectStmt.close();  updateStmt.close();  return recordsEncrypted;}  }
class C{  public long lookup(CharSequence host,int port,int userId){  int len=ClientConnection.buildGUID(guidWorkspace,host,port,userId);  return TrieParserReader.query(hostTrieReader,hostTrie,guidWorkspace,0,len,Integer.MAX_VALUE);}  }
class C{  public void assertGrabPoints(){  if (gp1 == null) {    gp1=new GrabPoint(-1,-1);    gPoints[STARTING_POINT_INDEX]=gp1;  }  if (gp2 == null) {    gp2=new GrabPoint(-1,-1);    gPoints[ENDING_POINT_INDEX]=gp2;  }  if (gpo == null) {    gpo=new OffsetGrabPoint(-1,-1);    gPoints[OFFSET_POINT_INDEX]=gpo;    gpo.addGrabPoint(gp1);    gpo.addGrabPoint(gp2);  }}  }
class C{  private String cookieToString(Cookie cookie){  return cookie.getClass().getSimpleName() + "[version=" + cookie.getVersion()+ ",name="+ cookie.getName()+ ",domain="+ cookie.getDomain()+ ",path="+ cookie.getPath()+ ",expiry="+ cookie.getExpiryDate()+ "]";}  }
class C{  public final void removeAll(){  actionList.clear();  constraintsList.clear();  needSorting=true;}  }
class C{  protected static <T>void removeSpans(Editable editable,int start,Class<T> clazz){  int startPosition=findBeforeNewLineChar(editable,start) + 1;  int endPosition=findNextNewLineCharCompat(editable,start);  T[] ts=editable.getSpans(startPosition,endPosition,clazz);  for (  T t : ts) {    editable.removeSpan(t);  }}  }
class C{  @Override void resolve(ReferenceType refType) throws InvalidTypeException, LineNotFoundException {  if (!(refType instanceof ClassType)) {    throw new InvalidTypeException();  }  Location location=location((ClassType)refType);  setRequest(refType.virtualMachine().eventRequestManager().createBreakpointRequest(location));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private PolicyMappings(ASN1Sequence seq){  this.seq=seq;}  }
class C{  private void checkReset(){  assertNull(bean.getCustomerId());  assertNull(bean.getSubscriptionId());  assertNull(bean.getSelectedSubscriptionAndCustomer());  assertNull(bean.getSelectedSubscription());  assertNull(sessionBean.getSelectedCustomerId());  assertNull(sessionBean.getSelectedSubscriptionId());}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  void addItem(final RoundedToolItem roundedToolItem){  items.add(roundedToolItem);}  }
class C{  private void ensurePathIsExpanded(TreePath aPath,boolean expandLast){  if (aPath != null) {    if (treeModel.isLeaf(aPath.getLastPathComponent())) {      aPath=aPath.getParentPath();      expandLast=true;    }    if (aPath != null) {      TreeStateNode lastNode=getNodeForPath(aPath,false,true);      if (lastNode != null) {        lastNode.makeVisible();        if (expandLast)         lastNode.expand();      }    }  }}  }
class C{  public void buildUniqueId() throws VPlexApiException {  String name=getName();  if (!name.contains(VPLEX_NAME_DELIM)) {    s_logger.warn("unexpected native guid format: " + name);    uniqueId=name;    return;  }  int lastDelimIndex=name.lastIndexOf(VPLEX_NAME_DELIM);  String suffix=name.substring(lastDelimIndex + 1);  s_logger.info("setting unique id for {} to {}",name,suffix);  uniqueId=suffix;}  }
class C{  public boolean hasRight(Table table,int rightMask){  return true;}  }
class C{  @operator(value="auto_correlation",can_be_const=true,type=IType.FLOAT,expected_content_type={IType.INT,IType.FLOAT},concept={IConcept.STATISTIC}) @doc(value="Returns the auto-correlation of a data sequence",comment="",examples={}) public static Double opAutoCorrelation(final IScope scope,final IContainer data,final Integer lag){  final double mean=(Double)Stats.getMean(scope,data);  final double variance=Stats.opVariance(scope,data);  return Descriptive.autoCorrelation(from(scope,data),lag,mean,variance);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  AuditLogQueryResult(AuditLogMarshaller marshaller,Writer out,AuditLogRequest auditLogFilter){  _out=out;  _marshaller=marshaller;  _request=auditLogFilter;}  }
class C{  @SuppressWarnings("unchecked") public ChunkedStriterator(final int chunkSize,final Iterator<E> src){  this((I)new ChunkedWrappedIterator<E>(src,chunkSize,null,null));}  }
class C{  public void testHotDeployFailureWar(){  this.fileHandler.createFile("ram:///test.war");  WAR war=(WAR)factory.createDeployable("jonas4x","ram:///test.war",DeployableType.WAR);  war.setContext("testContext");  setupAdminHotDeploymentFailure();  try {    deployer.deploy(war);    fail("No CargoException raised");  } catch (  CargoException expected) {    assertFalse(fileHandler.exists(deployer.getDeployableDir(war) + "/test.war"));    assertTrue(fileHandler.exists(deployer.getDeployableDir(war) + "/testContext.war"));  }}  }
class C{  ArrayList<RouteNode> makeLevel(ArrayList<RouteNode> nodes,int level){  ArrayList<RouteNode> children=new ArrayList<RouteNode>();  for (int i=0; i < nodes.size(); i++) {    RouteNode node=nodes.get(i);    BlockOrder pOrder=(BlockOrder)node.getUserObject();    OBlock pBlock=pOrder.getBlock();    String pName=pOrder.getExitName();    Portal exitPortal=pBlock.getPortalByName(pName);    if (exitPortal != null) {      OBlock nextBlock=exitPortal.getOpposingBlock(pBlock);      List<OPath> paths=exitPortal.getPathsFromOpposingBlock(pBlock);      if (log.isDebugEnabled()) {        log.debug("makeLevel " + level + " block= "+ pBlock.getDisplayName()+ ", path= "+ pOrder.getPathName()+ " meets "+ paths.size()+ " portal paths");      }      if (paths.size() == 0) {        log.error("Portal \"" + pName + "\" "+ (exitPortal.getOpposingBlock(pBlock) == null ? "is malformed! Only one block!" : "does not have any paths into the next block!"));      }      for (int k=0; k < paths.size(); k++) {        OPath path=paths.get(k);        if (_avoidBlock != null && _avoidBlock.equals(nextBlock)) {          if (_aPathName.equals(path.getName())) {            continue;          }        }        String exitName=path.getOppositePortalName(pName);        BlockOrder nOrder=new BlockOrder((OBlock)path.getBlock(),path.getName(),pName,exitName);        RouteNode child=new RouteNode(nOrder,node.needsViaAncestor());        _tree.insertNodeInto(child,node,node.getChildCount());        if (_viaBlock != null && _viaBlock.equals(nextBlock)) {          if (_vPathName.equals(path.getName())) {            child.hasViaAncestor(true);          }        }        if (!node.needsViaAncestor()) {          if (_destBlock == nOrder.getBlock() && _dPathName.equals(path.getName()) && _dEntryName.equals(pName)) {            _destNodes.add(child);          } else {            children.add(child);          }        } else {          children.add(child);        }      }    } else {      if (log.isDebugEnabled()) {        log.debug("Dead branch: block= " + pBlock.getDisplayName() + " has no exit portal");      }    }    if (_quit) {      break;    }  }  return children;}  }
class C{  public int read() throws IOException {  int ch;  InputStream is=_is;  if (is == null)   return -1; else {    ch=is.read();  }  _state.next(ch);  return ch;}  }
class C{  public List<NamedRelatedResourceRep> listByVolume(URI volumeId){  return getList(getByVolumeUrl(),volumeId);}  }
class C{  private final String loadXmlDefinition(){  final Cache cache=CacheFactory.getAnyInstance();  final StringWriter stringWriter=new StringWriter();  final PrintWriter printWriter=new PrintWriter(stringWriter);  CacheXmlGenerator.generate(cache,printWriter,true,false,false);  printWriter.close();  return loadXmlDefinition(stringWriter.toString());}  }
class C{  public static int Show(Object msg,int optionType){  return Show(msg,TITLE,optionType);}  }
class C{  public void save(){  if (m_CurrentFile == null) {    saveAs();    return;  }  save(m_CurrentFile,null);}  }
class C{  Main(Properties config){  _jobCounter=new AtomicInteger(0);  try {    _system=SystemMain.getInstance(config);    _system.start();  } catch (  Exception ex) {    throw new SystemException("Could not create client.",ex);  }}  }
class C{  public static int v(Object tag,String msg){  return isPrint ? android.util.Log.v(tag.getClass().getSimpleName(),msg) : -1;}  }
class C{  public SWFVectors tagDefineFont2(int id,int flags,String name,int numGlyphs,int ascent,int descent,int leading,int[] codes,int[] advances,Rect[] bounds,int[] kernCodes1,int[] kernCodes2,int[] kernAdjustments) throws IOException {  fontCodes.put(new Integer(id),(codes != null) ? codes : new int[0]);  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.260 -0400",hash_original_method="DBEC9AC5A3B34AE6BBC13F1EAAFA0FDB",hash_generated_method="E7C02AA8E45A37D67C7D4898A9DC3500") public MediaSize(String id,String packageName,int labelResId,int widthMils,int heightMils){  if (TextUtils.isEmpty(id)) {    throw new IllegalArgumentException("id cannot be empty.");  }  if (TextUtils.isEmpty(packageName)) {    throw new IllegalArgumentException("packageName cannot be empty.");  }  if (labelResId <= 0) {    throw new IllegalArgumentException("labelResId must be greater than zero.");  }  if (widthMils <= 0) {    throw new IllegalArgumentException("widthMils " + "cannot be less than or equal to zero.");  }  if (heightMils <= 0) {    throw new IllegalArgumentException("heightMils " + "cannot be less than or euqual to zero.");  }  mPackageName=packageName;  mId=id;  mLabelResId=labelResId;  mWidthMils=widthMils;  mHeightMils=heightMils;  mLabel=null;  sIdToMediaSizeMap.put(mId,this);}  }
class C{  private boolean hasNextPostponed(){  return !postponedRoutes.isEmpty();}  }
class C{  public boolean isLeaveRemoteReceivedHeaderInvalid(){  return fieldLeaveRemoteReceivedHeaderInvalid;}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("argument to delete() is null");  first=delete(first,key);}  }
class C{  private Name lambdaName(){  return names.lambda.append(names.fromString(enclosingMethodName() + "$" + lambdaCount++));}  }
class C{  public static void println(byte x){  out.println(x);}  }
class C{  public Visit(){  this.date=new DateTime();}  }
class C{  private static Pair<Integer,File> showSaveDialog(final JFrame parent){  final LastDirFileChooser fileChooser=new LastDirFileChooser();  fileChooser.setDialogTitle("Save Data to File");  final int val=fileChooser.showSaveDialog(parent);  return new Pair<Integer,File>(val,fileChooser.getSelectedFile());}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  public static double[] normalize(double[] u){  if (isZero(u)) {    throw new IllegalArgumentException("can not normalize zero vector");  }  return multiply(1.0 / magnitude(u),u);}  }
class C{  protected void toString(final StringBuilder sb){  if (initView) {    sb.append(", rangeCount=" + rangeCount);    sb.append(", partitionCount=" + partitionCount);    sb.append(", adjustedNominalShardSize=" + adjustedNominalShardSize);    sb.append(", percentOfSplit=" + percentOfSplit);    sb.append(", tailSplit=" + tailSplit);  }}  }
class C{  public void animateCapture(Bitmap bitmap){  if (bitmap == null) {    Log.e(TAG,"No valid bitmap for capture animation.");    return;  }  mActivity.updateThumbnail(bitmap);  mAnimationManager.startCaptureAnimation(mThumbnail);}  }
class C{  public static float checkArgumentFinite(final float value,final String valueName){  if (Float.isNaN(value)) {    throw new IllegalArgumentException(valueName + " must not be NaN");  } else   if (Float.isInfinite(value)) {    throw new IllegalArgumentException(valueName + " must not be infinite");  }  return value;}  }
class C{  public ObjectFactory(){}  }
class C{  public SendMessageBatchResult sendMessageBatch(SendMessageBatchRequest sendMessageBatchRequest) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.sendMessageBatch(sendMessageBatchRequest);}  }
class C{  public final void registerCallback(final ObjectFactory<LifecycleCallback> callbackFactory){  notNull(callbackFactory);  getCallbackRegistry().registerCallback(callbackFactory);}  }
class C{  public static final void addLoggingBehavior(LoggingBehavior behavior){synchronized (loggingBehaviors) {    loggingBehaviors.add(behavior);  }}  }
class C{  private static void add2(Collection<String> src,String line){  src.add(TAB2 + line);}  }
class C{  protected void relaxNode(final Node outNode,final Node toNode,final PseudoRemovePriorityQueue<Node> pendingNodes){  DijkstraNodeData outData=getData(outNode);  double currTime=outData.getTime();  double currCost=outData.getCost();  for (  Link l : outNode.getOutLinks().values()) {    if (((TransitRouterNetworkLink)l).getLine() == null || (lines != null && lines.contains(((TransitRouterNetworkLink)l).getLine())))     relaxNodeLogic(l,pendingNodes,currTime,currCost,toNode,null);  }}  }
class C{  public ListRowPresenter(int focusZoomFactor,boolean useFocusDimmer){  mFocusZoomFactor=focusZoomFactor;  mUseFocusDimmer=useFocusDimmer;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public void mouseClicked(MouseEvent event){  if (event == null || event.isConsumed())   return;  if (this.parent != null)   this.parent.mouseClicked(event);}  }
class C{  public PeerAddress(NetworkParameters params,byte[] msg,int offset,int protocolVersion,Message parent,boolean parseLazy,boolean parseRetain) throws ProtocolException {  super(params,msg,offset,protocolVersion,parent,parseLazy,parseRetain,UNKNOWN_LENGTH);}  }
class C{  public boolean isFitLegend(){  return mFitLegend;}  }
class C{  private void growReservoir(){  currItemsAlloc_=SamplingUtil.getAdjustedSize(reservoirSize_,currItemsAlloc_ * rf_.getValue());  data_=java.util.Arrays.copyOf(data_,currItemsAlloc_);}  }
class C{  public ProductAssociationsView(final String id,final List<ProductSearchResultDTO> associatedProductList){  super(id,true);  this.associatedProductList=associatedProductList;}  }
class C{  public void receiveResultgetEvents(com.emc.storageos.vasa.VasaServiceStub.GetEventsResponse result){}  }
class C{  public static void readyGoWithAnimation(Activity activity,Class<?> className,@NonNull ActivityOptionsCompat option){  ActivityCompat.startActivity(activity,getIntent(activity,className),option.toBundle());}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {  Map<String,Map<String,Int>> field2termFreqMap=new HashMap<>();  for (  String fieldName : fieldNames) {    final Fields vectors=ir.getTermVectors(docNum);    final Terms vector;    if (vectors != null) {      vector=vectors.terms(fieldName);    } else {      vector=null;    }    if (vector == null) {      Document d=ir.document(docNum);      IndexableField[] fields=d.getFields(fieldName);      for (      IndexableField field : fields) {        final String stringValue=field.stringValue();        if (stringValue != null) {          addTermFrequencies(new StringReader(stringValue),field2termFreqMap,fieldName);        }      }    } else {      addTermFrequencies(field2termFreqMap,vector,fieldName);    }  }  return createQueue(field2termFreqMap);}  }
class C{  private void validateStartTimeWithTolerance(Date tokenStartTime,Date issueInstantTime){  assert tokenStartTime != null;  assert issueInstantTime != null;  TimePeriod desiredStartTimeRange=TimePeriod.expand(new TimePeriod(tokenStartTime,1),clockTolerance);  if (!desiredStartTimeRange.contains(issueInstantTime)) {    throw new UnsupportedTokenLifetimeException("The requested token start time differs from the issue instant " + "more than the acceptable deviation (clock tolerance) of " + clockTolerance + " ms. Requested token start time="+ tokenStartTime+ ", issue instant time="+ issueInstantTime+ ". This might be due to a clock skew problem.");  }}  }
class C{  public XMLString toLowerCase(Locale locale){  return new XMLStringDefault(m_str.toLowerCase(locale));}  }
class C{  public boolean isSatisfiedBy(Date date){  Calendar testDateCal=Calendar.getInstance(getTimeZone());  testDateCal.setTime(date);  testDateCal.set(Calendar.MILLISECOND,0);  Date originalDate=testDateCal.getTime();  testDateCal.add(Calendar.SECOND,-1);  Date timeAfter=getTimeAfter(testDateCal.getTime());  return ((timeAfter != null) && (timeAfter.equals(originalDate)));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void endVisit(EnumDeclaration node){}  }
class C{  static String toIndentedString(Document doc) throws TransformerException {  for (  Element element : toElementIterable(doc.getElementsByTagName("*"))) {    for (    Node node : toIterable(element.getChildNodes())) {      if (node.getNodeType() == Node.TEXT_NODE) {        node.setNodeValue(node.getNodeValue().trim());      }    }  }  Transformer transformer=TransformerFactory.newInstance().newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");  StringWriter outStream=new StringWriter();  DOMSource source=new DOMSource(doc);  StreamResult result=new StreamResult(outStream);  transformer.transform(source,result);  return outStream.toString();}  }
class C{  public static String reverseIP(String addr){  Pattern p=Pattern.compile("^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$");  Matcher m=p.matcher(addr);  return m.replaceAll("$4.$3.$2.$1");}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public static String reverse(final String str){  if (str == null) {    return null;  }  return new StringBuilder(str).reverse().toString();}  }
class C{  public void reconstructChains(QuadTree<DigicoreFacility> facilityTree,ObjectAttributes facilityAttributes,String inputFolder,String outputFolder,int nThreads,Geometry studyArea) throws IOException {  long startTime=System.currentTimeMillis();  File folder=new File(outputFolder);  if (folder.exists()) {    log.warn("The output folder exists and will be deleted.");    log.warn("  --> " + folder.getAbsolutePath());    FileUtils.delete(folder);  }  boolean created=folder.mkdirs();  if (!created) {    log.error("Could not create the output folder " + folder.getAbsolutePath());  }  List<File> vehicleList=FileUtils.sampleFiles(new File(inputFolder),Integer.MAX_VALUE,FileUtils.getFileFilter(".xml.gz"));  ExecutorService threadExecutor=Executors.newFixedThreadPool(nThreads);  Counter threadCounter=new Counter("   vehicles completed: ");  for (  File vehicleFile : vehicleList) {    RunnableChainReconstructor rcr=new RunnableChainReconstructor(vehicleFile,facilityTree,facilityAttributes,threadCounter,outputFolder,studyArea);    threadExecutor.execute(rcr);  }  threadExecutor.shutdown();  while (!threadExecutor.isTerminated()) {  }  threadCounter.printCounter();  log.info("  chains reconstructed.");  reconstructDuration=System.currentTimeMillis() - startTime;}  }
class C{  private boolean loadAndValidateSignature(String name,KeySelector keySelector) throws Exception {  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();  docBuilderFactory.setNamespaceAware(true);  DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();  Document doc=builder.parse(getClass().getResourceAsStream("/" + TEST_FIXTURE_PREFIX + name+ ".xml"));  Element data=(Element)doc.getElementsByTagName("data").item(0);  if (data.hasAttribute("id")) {    data.setIdAttribute("id",true);  }  Element signatureElement=(Element)doc.getElementsByTagNameNS(XMLSignature.XMLNS,"Signature").item(0);  XMLSignatureFactory dsFactory=XMLSignatureFactory.getInstance("DOM");  XMLValidateContext ctx=new DOMValidateContext(keySelector,signatureElement);  return dsFactory.unmarshalXMLSignature(ctx).validate(ctx);}  }
class C{  @Override public void clear(){  super.clear();  long[] keys=_set;  Object[] values=_values;  for (int i=keys.length; i-- > 0; ) {    keys[i]=(long)0;    values[i]=null;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void showInternalMessageDialog(Component parentComponent,Object message){  showInternalMessageDialog(parentComponent,message,UIManager.getString("OptionPane.messageDialogTitle",parentComponent),INFORMATION_MESSAGE);}  }
class C{  public String toString(boolean includeTime,boolean extended){  NumberFormat nf=new DecimalFormat("00");  String dash=extended ? "-" : "";  String colon=extended ? ":" : "";  String z=utc ? "Z" : "";  StringBuilder sb=new StringBuilder();  sb.append(year).append(dash).append(nf.format(month)).append(dash).append(nf.format(date));  if (includeTime) {    sb.append("T").append(nf.format(hour)).append(colon).append(nf.format(minute)).append(colon).append(nf.format(second)).append(z);  }  return sb.toString();}  }
class C{  protected void distributeEvent(Properties netmapProps){  listenerSupport.fireNetMapEvent(netmapProps);}  }
class C{  public Seconds toStandardSeconds(){  return Seconds.seconds(FieldUtils.safeMultiply(getValue(),DateTimeConstants.SECONDS_PER_DAY));}  }
class C{  protected void construct(MutualInfoCalculatorMultiVariate miCalc){  this.miCalc=miCalc;}  }
class C{  @Override public void write(byte[] buf,int offset,int length) throws IOException {  final byte[] buffer=_writeBuffer;  final int bufferLength=buffer.length;  StreamImpl source=_source;  while (true) {    final int writeLength=_writeLength;    if (writeLength == 0 && bufferLength <= length) {      if (source != null) {        source.write(buf,offset,length,false);        _position+=length;        return;      }    }    final int sublen=Math.min(length,bufferLength - writeLength);    System.arraycopy(buf,offset,buffer,writeLength,sublen);    if (length == sublen) {      _writeLength=writeLength + length;      if (_implicitFlush) {        flush();      }      return;    }    if (source == null) {      return;    }    source.write(buffer,0,bufferLength,false);    _position+=bufferLength;    _writeLength=0;    length-=sublen;    offset+=sublen;    if (bufferLength <= length) {      source.write(buf,offset,length,false);      _position+=length;      return;    }  }}  }
class C{  protected static ColorModel fixColorModel(CachableRed src){  ColorModel cm=src.getColorModel();  if (cm != null) {    if (cm.hasAlpha())     return new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),new int[]{8,8},true,cm.isAlphaPremultiplied(),Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);    return new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),new int[]{8},false,false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);  } else {    SampleModel sm=src.getSampleModel();    if (sm.getNumBands() == 2)     return new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),new int[]{8,8},true,true,Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);    return new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),new int[]{8},false,false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);  }}  }
class C{  protected void validateAccessAfterUpdate(final Object object,final Class objectType) throws AccessDeniedException {  if (!federationFacade.isManageable(object,objectType)) {    throw new AccessDeniedException("access denied");  }}  }
class C{  static public void assertEquals(String message,double expected,double actual,double delta){  if (Double.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Double(expected),new Double(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Double(expected),new Double(actual));}  }
class C{  public static <V,E>Graph<V,E> toDirected(Graph<V,E> graph,Supplier<DirectedGraph<V,E>> graph_factory,Supplier<E> edge_factory,boolean create_new){  DirectedGraph<V,E> out=graph_factory.get();  for (  V v : graph.getVertices())   out.addVertex(v);  for (  E e : graph.getEdges()) {    Pair<V> endpoints=graph.getEndpoints(e);    if (graph.getEdgeType(e) == EdgeType.UNDIRECTED) {      V v1=endpoints.getFirst();      V v2=endpoints.getSecond();      out.addEdge(edge_factory.get(),v1,v2,EdgeType.DIRECTED);      out.addEdge(edge_factory.get(),v2,v1,EdgeType.DIRECTED);    } else {      V source=graph.getSource(e);      V dest=graph.getDest(e);      E to_add=create_new ? edge_factory.get() : e;      out.addEdge(to_add,source,dest,EdgeType.DIRECTED);    }  }  return out;}  }
class C{  public void addElement(Node value){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if ((m_firstFree + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new Node[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);      m_map=newMap;    }  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  private void trainLocalTM(boolean trainLocalTM,String localTMoutFile){  this.localTMTraining=trainLocalTM;  this.localTMoutFile=localTMoutFile;}  }
class C{  private String parseVersion(Class<?> databaseMetaDataClass,Object databaseMetaData){  return (String)cache.invokeMethod(databaseMetaDataClass,GET_DATABASE_PRODUCT_VERSION,null,databaseMetaData,null,null,JAVA_SQL_DATABASE_META_DATA_FQN);}  }
class C{  private void updateSelectedItemMetadata(){  View oldSelectedChild=mSelectedChild;  View child=mSelectedChild=getChildAt(mSelectedPosition - mFirstPosition);  if (child == null) {    return;  }  child.setSelected(true);  child.setFocusable(true);  if (hasFocus()) {    child.requestFocus();  }  if (oldSelectedChild != null) {    oldSelectedChild.setSelected(false);    oldSelectedChild.setFocusable(false);  }}  }
class C{  public boolean isDebug(){  return debug;}  }
class C{  private List<VolumeDescriptor> createVolumeDescriptorsForVarrayChange(List<Volume> volumes,VirtualArray newVarray,String taskId){  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,volumes.get(0).getStorageController());  for (  Volume vplexVolume : volumes) {    VolumeDescriptor descriptor=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,vplexVolume.getStorageController(),vplexVolume.getId(),null,null);    Map<String,Object> descrParams=new HashMap<String,Object>();    descrParams.put(VolumeDescriptor.PARAM_VARRAY_CHANGE_NEW_VAARAY_ID,newVarray.getId());    descriptor.setParameters(descrParams);    descriptors.add(descriptor);    StringSet assocVolumes=vplexVolume.getAssociatedVolumes();    if (null == assocVolumes) {      s_logger.warn("VPLEX volume {} has no backend volumes. It was possibly ingested 'Virtual Volume Only'.",vplexVolume.forDisplay());    } else {      String assocVolumeId=assocVolumes.iterator().next();      URI assocVolumeURI=URI.create(assocVolumeId);      Volume assocVolume=_dbClient.queryObject(Volume.class,assocVolumeURI);      VirtualPool assocVolumeVPool=_dbClient.queryObject(VirtualPool.class,assocVolume.getVirtualPool());      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,vplexVolume,assocVolume,newVarray,assocVolumeVPool,getVolumeCapacity(assocVolume),taskId,null,false,null));    }  }  return descriptors;}  }
class C{  public static List toList(Object[] array){  return to_list(array);}  }
class C{  void createFeedbackProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/transformFeedback.vs",GL_VERTEX_SHADER);  glAttachShader(program,vshader);  glBindAttribLocation(program,0,"vertexPosition");  glBindAttribLocation(program,1,"vertexNormal");  glTransformFeedbackVaryings(program,new String[]{"viewPosition","viewNormal"},GL_INTERLEAVED_ATTRIBS);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.feedbackProgram=program;  glUseProgram(feedbackProgram);  modelMatrixUniform=glGetUniformLocation(feedbackProgram,"modelMatrix");  viewMatrixUniform=glGetUniformLocation(feedbackProgram,"viewMatrix");  projectionMatrixUniform=glGetUniformLocation(feedbackProgram,"projectionMatrix");  normalMatrixUniform=glGetUniformLocation(feedbackProgram,"normalMatrix");  glUseProgram(0);}  }
class C{  public static Option create() throws IllegalArgumentException {  if (longopt == null) {    OptionBuilder.reset();    throw new IllegalArgumentException("must specify longopt");  }  return create(null);}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (ch == null || start < 0 || length >= (ch.length - start) || length < 0)   return;  append(m_doc.createComment(new String(ch,start,length)));}  }
class C{  private void createProperty(){  Map<String,String> locationProperties=new TreeMap<>();  locationProperties.put("build","${basedir}/build");  locationProperties.put("build.classes","${build}/classes");  locationProperties.put("src.dir","${basedir}/src");  Element nameProperty=doc.createElement("property");  nameProperty.setAttribute("name","name");  nameProperty.setAttribute("value",projectName);  Node node=root.getFirstChild();  node=root.insertBefore(nameProperty,node);  for (  Map.Entry<String,String> locationProperty : locationProperties.entrySet()) {    Element locationElement=doc.createElement("property");    locationElement.setAttribute("name",locationProperty.getKey());    locationElement.setAttribute("location",locationProperty.getValue());    node=node.getNextSibling();    node=root.insertBefore(locationElement,node);  }}  }
class C{  public static MockView generate(final SQLProvider provider,final INaviModule module,final INaviFunction function){  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");  Preconditions.checkNotNull(module,"Error: module argument can not be null");  Preconditions.checkNotNull(function,"Error: function argument can not be null");  final COperandTreeNode node1=new COperandTreeNode(0,4,"eax",null,Lists.<IReference>newArrayList(),provider,module.getTypeManager(),module.getContent().getTypeInstanceContainer());  final COperandTreeNode node2=new COperandTreeNode(1,4,"ebx",null,Lists.<IReference>newArrayList(),provider,module.getTypeManager(),module.getContent().getTypeInstanceContainer());  final COperandTree operandTree1=new COperandTree(node1,provider,module.getTypeManager(),module.getContent().getTypeInstanceContainer());  final COperandTree operandTree2=new COperandTree(node2,provider,module.getTypeManager(),module.getContent().getTypeInstanceContainer());  final List<INaviViewNode> nodes=new ArrayList<INaviViewNode>();  final List<INaviEdge> edges=new ArrayList<INaviEdge>();  final CCodeNode node_246=new CCodeNode(246,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002B87=new CInstruction(false,module,new CAddress(16788359),"mov",Lists.newArrayList(operandTree1,operandTree2),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B87,null);  final CInstruction newInstruction_01002B89=new CInstruction(false,module,new CAddress(16788361),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B89,null);  final CInstruction newInstruction_01002B8A=new CInstruction(false,module,new CAddress(16788362),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B8A,null);  final CInstruction newInstruction_01002B8C=new CInstruction(false,module,new CAddress(16788364),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B8C,null);  final CInstruction newInstruction_01002B92=new CInstruction(false,module,new CAddress(16788370),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B92,null);  final CInstruction newInstruction_01002B97=new CInstruction(false,module,new CAddress(16788375),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B97,null);  final CInstruction newInstruction_01002B9A=new CInstruction(false,module,new CAddress(16788378),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B9A,null);  final CInstruction newInstruction_01002B9B=new CInstruction(false,module,new CAddress(16788379),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B9B,null);  final CInstruction newInstruction_01002B9C=new CInstruction(false,module,new CAddress(16788380),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B9C,null);  final CInstruction newInstruction_01002B9D=new CInstruction(false,module,new CAddress(16788381),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002B9D,null);  final CInstruction newInstruction_01002BA0=new CInstruction(false,module,new CAddress(16788384),"xor",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BA0,null);  final CInstruction newInstruction_01002BA2=new CInstruction(false,module,new CAddress(16788386),"xor",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BA2,null);  final CInstruction newInstruction_01002BA4=new CInstruction(false,module,new CAddress(16788388),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BA4,null);  final CInstruction newInstruction_01002BAB=new CInstruction(false,module,new CAddress(16788395),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BAB,null);  final CInstruction newInstruction_01002BB0=new CInstruction(false,module,new CAddress(16788400),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BB0,null);  final CInstruction newInstruction_01002BB6=new CInstruction(false,module,new CAddress(16788406),"rep stosd",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BB6,null);  final CInstruction newInstruction_01002BB8=new CInstruction(false,module,new CAddress(16788408),"stosw",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BB8,null);  final CInstruction newInstruction_01002BBA=new CInstruction(false,module,new CAddress(16788410),"movzx",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BBA,null);  final CInstruction newInstruction_01002BBE=new CInstruction(false,module,new CAddress(16788414),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BBE,null);  final CInstruction newInstruction_01002BC1=new CInstruction(false,module,new CAddress(16788417),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BC1,null);  final CInstruction newInstruction_01002BC7=new CInstruction(false,module,new CAddress(16788423),"jg",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_246.addInstruction(newInstruction_01002BC7,null);  nodes.add(node_246);  final CCodeNode node_247=new CCodeNode(247,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002BCD=new CInstruction(false,module,new CAddress(16788429),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_247.addInstruction(newInstruction_01002BCD,null);  nodes.add(node_247);  final CCodeNode node_248=new CCodeNode(248,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002BD3=new CInstruction(false,module,new CAddress(16788435),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_248.addInstruction(newInstruction_01002BD3,null);  final CInstruction newInstruction_01002BD6=new CInstruction(false,module,new CAddress(16788438),"jg",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_248.addInstruction(newInstruction_01002BD6,null);  nodes.add(node_248);  final CCodeNode node_249=new CCodeNode(249,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002BDC=new CInstruction(false,module,new CAddress(16788444),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_249.addInstruction(newInstruction_01002BDC,null);  nodes.add(node_249);  final CCodeNode node_250=new CCodeNode(250,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002BE2=new CInstruction(false,module,new CAddress(16788450),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_250.addInstruction(newInstruction_01002BE2,null);  final CInstruction newInstruction_01002BE5=new CInstruction(false,module,new CAddress(16788453),"jg",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_250.addInstruction(newInstruction_01002BE5,null);  nodes.add(node_250);  final CCodeNode node_251=new CCodeNode(251,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002BEB=new CInstruction(false,module,new CAddress(16788459),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_251.addInstruction(newInstruction_01002BEB,null);  nodes.add(node_251);  final CCodeNode node_252=new CCodeNode(252,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002BF1=new CInstruction(false,module,new CAddress(16788465),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_252.addInstruction(newInstruction_01002BF1,null);  final CInstruction newInstruction_01002BF2=new CInstruction(false,module,new CAddress(16788466),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_252.addInstruction(newInstruction_01002BF2,null);  nodes.add(node_252);  final CCodeNode node_253=new CCodeNode(253,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002BF8=new CInstruction(false,module,new CAddress(16788472),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_253.addInstruction(newInstruction_01002BF8,null);  final CInstruction newInstruction_01002BF9=new CInstruction(false,module,new CAddress(16788473),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_253.addInstruction(newInstruction_01002BF9,null);  nodes.add(node_253);  final CCodeNode node_254=new CCodeNode(254,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002BFF=new CInstruction(false,module,new CAddress(16788479),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_254.addInstruction(newInstruction_01002BFF,null);  final CInstruction newInstruction_01002C00=new CInstruction(false,module,new CAddress(16788480),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_254.addInstruction(newInstruction_01002C00,null);  nodes.add(node_254);  final CCodeNode node_255=new CCodeNode(255,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002C02=new CInstruction(false,module,new CAddress(16788482),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_255.addInstruction(newInstruction_01002C02,null);  final CInstruction newInstruction_01002C03=new CInstruction(false,module,new CAddress(16788483),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_255.addInstruction(newInstruction_01002C03,null);  nodes.add(node_255);  final CCodeNode node_256=new CCodeNode(256,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002C05=new CInstruction(false,module,new CAddress(16788485),"xor",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_256.addInstruction(newInstruction_01002C05,null);  final CInstruction newInstruction_01002C07=new CInstruction(false,module,new CAddress(16788487),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_256.addInstruction(newInstruction_01002C07,null);  nodes.add(node_256);  final CCodeNode node_257=new CCodeNode(257,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002C0C=new CInstruction(false,module,new CAddress(16788492),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_257.addInstruction(newInstruction_01002C0C,null);  final CInstruction newInstruction_01002C12=new CInstruction(false,module,new CAddress(16788498),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_257.addInstruction(newInstruction_01002C12,null);  final CInstruction newInstruction_01002C17=new CInstruction(false,module,new CAddress(16788503),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_257.addInstruction(newInstruction_01002C17,null);  final CInstruction newInstruction_01002C1C=new CInstruction(false,module,new CAddress(16788508),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_257.addInstruction(newInstruction_01002C1C,null);  nodes.add(node_257);  final CCodeNode node_258=new CCodeNode(258,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002C1E=new CInstruction(false,module,new CAddress(16788510),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_258.addInstruction(newInstruction_01002C1E,null);  final CInstruction newInstruction_01002C1F=new CInstruction(false,module,new CAddress(16788511),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_258.addInstruction(newInstruction_01002C1F,null);  final CInstruction newInstruction_01002C24=new CInstruction(false,module,new CAddress(16788516),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_258.addInstruction(newInstruction_01002C24,null);  final CInstruction newInstruction_01002C2A=new CInstruction(false,module,new CAddress(16788522),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_258.addInstruction(newInstruction_01002C2A,null);  final CInstruction newInstruction_01002C2F=new CInstruction(false,module,new CAddress(16788527),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_258.addInstruction(newInstruction_01002C2F,null);  final CInstruction newInstruction_01002C31=new CInstruction(false,module,new CAddress(16788529),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_258.addInstruction(newInstruction_01002C31,null);  nodes.add(node_258);  final CCodeNode node_259=new CCodeNode(259,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002C37=new CInstruction(false,module,new CAddress(16788535),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C37,null);  final CInstruction newInstruction_01002C3D=new CInstruction(false,module,new CAddress(16788541),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C3D,null);  final CInstruction newInstruction_01002C43=new CInstruction(false,module,new CAddress(16788547),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C43,null);  final CInstruction newInstruction_01002C49=new CInstruction(false,module,new CAddress(16788553),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C49,null);  final CInstruction newInstruction_01002C4E=new CInstruction(false,module,new CAddress(16788558),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C4E,null);  final CInstruction newInstruction_01002C53=new CInstruction(false,module,new CAddress(16788563),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C53,null);  final CInstruction newInstruction_01002C58=new CInstruction(false,module,new CAddress(16788568),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C58,null);  final CInstruction newInstruction_01002C62=new CInstruction(false,module,new CAddress(16788578),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C62,null);  final CInstruction newInstruction_01002C6C=new CInstruction(false,module,new CAddress(16788588),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C6C,null);  final CInstruction newInstruction_01002C76=new CInstruction(false,module,new CAddress(16788598),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C76,null);  final CInstruction newInstruction_01002C80=new CInstruction(false,module,new CAddress(16788608),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C80,null);  final CInstruction newInstruction_01002C8A=new CInstruction(false,module,new CAddress(16788618),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C8A,null);  final CInstruction newInstruction_01002C8F=new CInstruction(false,module,new CAddress(16788623),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C8F,null);  final CInstruction newInstruction_01002C95=new CInstruction(false,module,new CAddress(16788629),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_259.addInstruction(newInstruction_01002C95,null);  nodes.add(node_259);  final CCodeNode node_260=new CCodeNode(260,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002C97=new CInstruction(false,module,new CAddress(16788631),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_260.addInstruction(newInstruction_01002C97,null);  final CInstruction newInstruction_01002C98=new CInstruction(false,module,new CAddress(16788632),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_260.addInstruction(newInstruction_01002C98,null);  final CInstruction newInstruction_01002C9D=new CInstruction(false,module,new CAddress(16788637),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_260.addInstruction(newInstruction_01002C9D,null);  final CInstruction newInstruction_01002C9E=new CInstruction(false,module,new CAddress(16788638),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_260.addInstruction(newInstruction_01002C9E,null);  final CInstruction newInstruction_01002CA0=new CInstruction(false,module,new CAddress(16788640),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_260.addInstruction(newInstruction_01002CA0,null);  nodes.add(node_260);  final CCodeNode node_261=new CCodeNode(261,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002CA2=new CInstruction(false,module,new CAddress(16788642),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_261.addInstruction(newInstruction_01002CA2,null);  final CInstruction newInstruction_01002CA7=new CInstruction(false,module,new CAddress(16788647),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_261.addInstruction(newInstruction_01002CA7,null);  final CInstruction newInstruction_01002CA8=new CInstruction(false,module,new CAddress(16788648),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_261.addInstruction(newInstruction_01002CA8,null);  nodes.add(node_261);  final CCodeNode node_262=new CCodeNode(262,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002CAE=new CInstruction(false,module,new CAddress(16788654),"xor",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_262.addInstruction(newInstruction_01002CAE,null);  final CInstruction newInstruction_01002CB0=new CInstruction(false,module,new CAddress(16788656),"inc",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_262.addInstruction(newInstruction_01002CB0,null);  final CInstruction newInstruction_01002CB1=new CInstruction(false,module,new CAddress(16788657),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_262.addInstruction(newInstruction_01002CB1,null);  final CInstruction newInstruction_01002CB6=new CInstruction(false,module,new CAddress(16788662),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_262.addInstruction(newInstruction_01002CB6,null);  final CInstruction newInstruction_01002CBB=new CInstruction(false,module,new CAddress(16788667),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_262.addInstruction(newInstruction_01002CBB,null);  final CInstruction newInstruction_01002CC0=new CInstruction(false,module,new CAddress(16788672),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_262.addInstruction(newInstruction_01002CC0,null);  final CInstruction newInstruction_01002CC6=new CInstruction(false,module,new CAddress(16788678),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_262.addInstruction(newInstruction_01002CC6,null);  final CInstruction newInstruction_01002CC8=new CInstruction(false,module,new CAddress(16788680),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_262.addInstruction(newInstruction_01002CC8,null);  nodes.add(node_262);  final CCodeNode node_263=new CCodeNode(263,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002CCA=new CInstruction(false,module,new CAddress(16788682),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_263.addInstruction(newInstruction_01002CCA,null);  final CInstruction newInstruction_01002CCC=new CInstruction(false,module,new CAddress(16788684),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_263.addInstruction(newInstruction_01002CCC,null);  final CInstruction newInstruction_01002CD2=new CInstruction(false,module,new CAddress(16788690),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_263.addInstruction(newInstruction_01002CD2,null);  final CInstruction newInstruction_01002CD3=new CInstruction(false,module,new CAddress(16788691),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_263.addInstruction(newInstruction_01002CD3,null);  final CInstruction newInstruction_01002CD9=new CInstruction(false,module,new CAddress(16788697),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_263.addInstruction(newInstruction_01002CD9,null);  final CInstruction newInstruction_01002CDE=new CInstruction(false,module,new CAddress(16788702),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_263.addInstruction(newInstruction_01002CDE,null);  final CInstruction newInstruction_01002CE0=new CInstruction(false,module,new CAddress(16788704),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_263.addInstruction(newInstruction_01002CE0,null);  nodes.add(node_263);  final CCodeNode node_264=new CCodeNode(264,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002CE2=new CInstruction(false,module,new CAddress(16788706),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_264.addInstruction(newInstruction_01002CE2,null);  final CInstruction newInstruction_01002CE3=new CInstruction(false,module,new CAddress(16788707),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_264.addInstruction(newInstruction_01002CE3,null);  final CInstruction newInstruction_01002CE9=new CInstruction(false,module,new CAddress(16788713),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_264.addInstruction(newInstruction_01002CE9,null);  final CInstruction newInstruction_01002CEA=new CInstruction(false,module,new CAddress(16788714),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_264.addInstruction(newInstruction_01002CEA,null);  final CInstruction newInstruction_01002CEF=new CInstruction(false,module,new CAddress(16788719),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_264.addInstruction(newInstruction_01002CEF,null);  final CInstruction newInstruction_01002CF1=new CInstruction(false,module,new CAddress(16788721),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_264.addInstruction(newInstruction_01002CF1,null);  final CInstruction newInstruction_01002CF6=new CInstruction(false,module,new CAddress(16788726),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_264.addInstruction(newInstruction_01002CF6,null);  final CInstruction newInstruction_01002CFB=new CInstruction(false,module,new CAddress(16788731),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_264.addInstruction(newInstruction_01002CFB,null);  nodes.add(node_264);  final CCodeNode node_265=new CCodeNode(265,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002CFD=new CInstruction(false,module,new CAddress(16788733),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_265.addInstruction(newInstruction_01002CFD,null);  nodes.add(node_265);  final CCodeNode node_266=new CCodeNode(266,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002D02=new CInstruction(false,module,new CAddress(16788738),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_266.addInstruction(newInstruction_01002D02,null);  final CInstruction newInstruction_01002D08=new CInstruction(false,module,new CAddress(16788744),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_266.addInstruction(newInstruction_01002D08,null);  nodes.add(node_266);  final CCodeNode node_267=new CCodeNode(267,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002D0D=new CInstruction(false,module,new CAddress(16788749),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_267.addInstruction(newInstruction_01002D0D,null);  final CInstruction newInstruction_01002D0E=new CInstruction(false,module,new CAddress(16788750),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_267.addInstruction(newInstruction_01002D0E,null);  final CInstruction newInstruction_01002D13=new CInstruction(false,module,new CAddress(16788755),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_267.addInstruction(newInstruction_01002D13,null);  final CInstruction newInstruction_01002D15=new CInstruction(false,module,new CAddress(16788757),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_267.addInstruction(newInstruction_01002D15,null);  nodes.add(node_267);  final CCodeNode node_268=new CCodeNode(268,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002D1B=new CInstruction(false,module,new CAddress(16788763),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D1B,null);  final CInstruction newInstruction_01002D21=new CInstruction(false,module,new CAddress(16788769),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D21,null);  final CInstruction newInstruction_01002D27=new CInstruction(false,module,new CAddress(16788775),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D27,null);  final CInstruction newInstruction_01002D2C=new CInstruction(false,module,new CAddress(16788780),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D2C,null);  final CInstruction newInstruction_01002D2D=new CInstruction(false,module,new CAddress(16788781),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D2D,null);  final CInstruction newInstruction_01002D32=new CInstruction(false,module,new CAddress(16788786),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D32,null);  final CInstruction newInstruction_01002D38=new CInstruction(false,module,new CAddress(16788792),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D38,null);  final CInstruction newInstruction_01002D3D=new CInstruction(false,module,new CAddress(16788797),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D3D,null);  final CInstruction newInstruction_01002D42=new CInstruction(false,module,new CAddress(16788802),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D42,null);  final CInstruction newInstruction_01002D47=new CInstruction(false,module,new CAddress(16788807),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D47,null);  final CInstruction newInstruction_01002D51=new CInstruction(false,module,new CAddress(16788817),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D51,null);  final CInstruction newInstruction_01002D5B=new CInstruction(false,module,new CAddress(16788827),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D5B,null);  final CInstruction newInstruction_01002D65=new CInstruction(false,module,new CAddress(16788837),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D65,null);  final CInstruction newInstruction_01002D6F=new CInstruction(false,module,new CAddress(16788847),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D6F,null);  final CInstruction newInstruction_01002D79=new CInstruction(false,module,new CAddress(16788857),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D79,null);  final CInstruction newInstruction_01002D83=new CInstruction(false,module,new CAddress(16788867),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D83,null);  final CInstruction newInstruction_01002D89=new CInstruction(false,module,new CAddress(16788873),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D89,null);  final CInstruction newInstruction_01002D8B=new CInstruction(false,module,new CAddress(16788875),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_268.addInstruction(newInstruction_01002D8B,null);  nodes.add(node_268);  final CCodeNode node_269=new CCodeNode(269,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002D8D=new CInstruction(false,module,new CAddress(16788877),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002D8D,null);  final CInstruction newInstruction_01002D93=new CInstruction(false,module,new CAddress(16788883),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002D93,null);  final CInstruction newInstruction_01002D94=new CInstruction(false,module,new CAddress(16788884),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002D94,null);  final CInstruction newInstruction_01002D99=new CInstruction(false,module,new CAddress(16788889),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002D99,null);  final CInstruction newInstruction_01002D9B=new CInstruction(false,module,new CAddress(16788891),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002D9B,null);  final CInstruction newInstruction_01002D9C=new CInstruction(false,module,new CAddress(16788892),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002D9C,null);  final CInstruction newInstruction_01002D9E=new CInstruction(false,module,new CAddress(16788894),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002D9E,null);  final CInstruction newInstruction_01002DA3=new CInstruction(false,module,new CAddress(16788899),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DA3,null);  final CInstruction newInstruction_01002DA9=new CInstruction(false,module,new CAddress(16788905),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DA9,null);  final CInstruction newInstruction_01002DAA=new CInstruction(false,module,new CAddress(16788906),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DAA,null);  final CInstruction newInstruction_01002DB0=new CInstruction(false,module,new CAddress(16788912),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DB0,null);  final CInstruction newInstruction_01002DB6=new CInstruction(false,module,new CAddress(16788918),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DB6,null);  final CInstruction newInstruction_01002DBB=new CInstruction(false,module,new CAddress(16788923),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DBB,null);  final CInstruction newInstruction_01002DC1=new CInstruction(false,module,new CAddress(16788929),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DC1,null);  final CInstruction newInstruction_01002DC2=new CInstruction(false,module,new CAddress(16788930),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DC2,null);  final CInstruction newInstruction_01002DC7=new CInstruction(false,module,new CAddress(16788935),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DC7,null);  final CInstruction newInstruction_01002DC9=new CInstruction(false,module,new CAddress(16788937),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_269.addInstruction(newInstruction_01002DC9,null);  nodes.add(node_269);  final CCodeNode node_270=new CCodeNode(270,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002DCF=new CInstruction(false,module,new CAddress(16788943),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_270.addInstruction(newInstruction_01002DCF,null);  final CInstruction newInstruction_01002DD5=new CInstruction(false,module,new CAddress(16788949),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_270.addInstruction(newInstruction_01002DD5,null);  final CInstruction newInstruction_01002DDB=new CInstruction(false,module,new CAddress(16788955),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_270.addInstruction(newInstruction_01002DDB,null);  nodes.add(node_270);  final CCodeNode node_271=new CCodeNode(271,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002DE0=new CInstruction(false,module,new CAddress(16788960),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_271.addInstruction(newInstruction_01002DE0,null);  nodes.add(node_271);  final CCodeNode node_272=new CCodeNode(272,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002DE6=new CInstruction(false,module,new CAddress(16788966),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_272.addInstruction(newInstruction_01002DE6,null);  final CInstruction newInstruction_01002DEB=new CInstruction(false,module,new CAddress(16788971),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_272.addInstruction(newInstruction_01002DEB,null);  nodes.add(node_272);  final CCodeNode node_273=new CCodeNode(273,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002DF0=new CInstruction(false,module,new CAddress(16788976),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_273.addInstruction(newInstruction_01002DF0,null);  final CInstruction newInstruction_01002DF2=new CInstruction(false,module,new CAddress(16788978),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_273.addInstruction(newInstruction_01002DF2,null);  final CInstruction newInstruction_01002DF7=new CInstruction(false,module,new CAddress(16788983),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_273.addInstruction(newInstruction_01002DF7,null);  nodes.add(node_273);  final CCodeNode node_274=new CCodeNode(274,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002DFC=new CInstruction(false,module,new CAddress(16788988),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_274.addInstruction(newInstruction_01002DFC,null);  final CInstruction newInstruction_01002E02=new CInstruction(false,module,new CAddress(16788994),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_274.addInstruction(newInstruction_01002E02,null);  final CInstruction newInstruction_01002E07=new CInstruction(false,module,new CAddress(16788999),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_274.addInstruction(newInstruction_01002E07,null);  nodes.add(node_274);  final CCodeNode node_275=new CCodeNode(275,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E09=new CInstruction(false,module,new CAddress(16789001),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_275.addInstruction(newInstruction_01002E09,null);  final CInstruction newInstruction_01002E0F=new CInstruction(false,module,new CAddress(16789007),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_275.addInstruction(newInstruction_01002E0F,null);  final CInstruction newInstruction_01002E14=new CInstruction(false,module,new CAddress(16789012),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_275.addInstruction(newInstruction_01002E14,null);  nodes.add(node_275);  final CCodeNode node_276=new CCodeNode(276,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E16=new CInstruction(false,module,new CAddress(16789014),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_276.addInstruction(newInstruction_01002E16,null);  final CInstruction newInstruction_01002E1B=new CInstruction(false,module,new CAddress(16789019),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_276.addInstruction(newInstruction_01002E1B,null);  nodes.add(node_276);  final CCodeNode node_277=new CCodeNode(277,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E1D=new CInstruction(false,module,new CAddress(16789021),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_277.addInstruction(newInstruction_01002E1D,null);  final CInstruction newInstruction_01002E22=new CInstruction(false,module,new CAddress(16789026),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_277.addInstruction(newInstruction_01002E22,null);  nodes.add(node_277);  final CCodeNode node_278=new CCodeNode(278,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E24=new CInstruction(false,module,new CAddress(16789028),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_278.addInstruction(newInstruction_01002E24,null);  final CInstruction newInstruction_01002E29=new CInstruction(false,module,new CAddress(16789033),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_278.addInstruction(newInstruction_01002E29,null);  final CInstruction newInstruction_01002E2F=new CInstruction(false,module,new CAddress(16789039),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_278.addInstruction(newInstruction_01002E2F,null);  nodes.add(node_278);  final CCodeNode node_279=new CCodeNode(279,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E35=new CInstruction(false,module,new CAddress(16789045),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_279.addInstruction(newInstruction_01002E35,null);  final CInstruction newInstruction_01002E36=new CInstruction(false,module,new CAddress(16789046),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_279.addInstruction(newInstruction_01002E36,null);  final CInstruction newInstruction_01002E38=new CInstruction(false,module,new CAddress(16789048),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_279.addInstruction(newInstruction_01002E38,null);  final CInstruction newInstruction_01002E3A=new CInstruction(false,module,new CAddress(16789050),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_279.addInstruction(newInstruction_01002E3A,null);  nodes.add(node_279);  final CCodeNode node_280=new CCodeNode(280,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E3C=new CInstruction(false,module,new CAddress(16789052),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_280.addInstruction(newInstruction_01002E3C,null);  final CInstruction newInstruction_01002E42=new CInstruction(false,module,new CAddress(16789058),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_280.addInstruction(newInstruction_01002E42,null);  final CInstruction newInstruction_01002E47=new CInstruction(false,module,new CAddress(16789063),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_280.addInstruction(newInstruction_01002E47,null);  final CInstruction newInstruction_01002E4C=new CInstruction(false,module,new CAddress(16789068),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_280.addInstruction(newInstruction_01002E4C,null);  final CInstruction newInstruction_01002E4E=new CInstruction(false,module,new CAddress(16789070),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_280.addInstruction(newInstruction_01002E4E,null);  final CInstruction newInstruction_01002E53=new CInstruction(false,module,new CAddress(16789075),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_280.addInstruction(newInstruction_01002E53,null);  final CInstruction newInstruction_01002E58=new CInstruction(false,module,new CAddress(16789080),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_280.addInstruction(newInstruction_01002E58,null);  final CInstruction newInstruction_01002E5A=new CInstruction(false,module,new CAddress(16789082),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_280.addInstruction(newInstruction_01002E5A,null);  nodes.add(node_280);  final CCodeNode node_281=new CCodeNode(281,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E5F=new CInstruction(false,module,new CAddress(16789087),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_281.addInstruction(newInstruction_01002E5F,null);  final CInstruction newInstruction_01002E62=new CInstruction(false,module,new CAddress(16789090),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_281.addInstruction(newInstruction_01002E62,null);  nodes.add(node_281);  final CCodeNode node_282=new CCodeNode(282,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E64=new CInstruction(false,module,new CAddress(16789092),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_282.addInstruction(newInstruction_01002E64,null);  final CInstruction newInstruction_01002E65=new CInstruction(false,module,new CAddress(16789093),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_282.addInstruction(newInstruction_01002E65,null);  nodes.add(node_282);  final CCodeNode node_283=new CCodeNode(283,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E67=new CInstruction(false,module,new CAddress(16789095),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_283.addInstruction(newInstruction_01002E67,null);  final CInstruction newInstruction_01002E6A=new CInstruction(false,module,new CAddress(16789098),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_283.addInstruction(newInstruction_01002E6A,null);  nodes.add(node_283);  final CCodeNode node_284=new CCodeNode(284,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E70=new CInstruction(false,module,new CAddress(16789104),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_284.addInstruction(newInstruction_01002E70,null);  final CInstruction newInstruction_01002E71=new CInstruction(false,module,new CAddress(16789105),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_284.addInstruction(newInstruction_01002E71,null);  nodes.add(node_284);  final CCodeNode node_285=new CCodeNode(285,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E77=new CInstruction(false,module,new CAddress(16789111),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_285.addInstruction(newInstruction_01002E77,null);  final CInstruction newInstruction_01002E78=new CInstruction(false,module,new CAddress(16789112),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_285.addInstruction(newInstruction_01002E78,null);  final CInstruction newInstruction_01002E79=new CInstruction(false,module,new CAddress(16789113),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_285.addInstruction(newInstruction_01002E79,null);  final CInstruction newInstruction_01002E7E=new CInstruction(false,module,new CAddress(16789118),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_285.addInstruction(newInstruction_01002E7E,null);  nodes.add(node_285);  final CCodeNode node_286=new CCodeNode(286,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E84=new CInstruction(false,module,new CAddress(16789124),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_286.addInstruction(newInstruction_01002E84,null);  final CInstruction newInstruction_01002E8A=new CInstruction(false,module,new CAddress(16789130),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_286.addInstruction(newInstruction_01002E8A,null);  nodes.add(node_286);  final CCodeNode node_287=new CCodeNode(287,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E8F=new CInstruction(false,module,new CAddress(16789135),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_287.addInstruction(newInstruction_01002E8F,null);  final CInstruction newInstruction_01002E90=new CInstruction(false,module,new CAddress(16789136),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_287.addInstruction(newInstruction_01002E90,null);  final CInstruction newInstruction_01002E91=new CInstruction(false,module,new CAddress(16789137),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_287.addInstruction(newInstruction_01002E91,null);  final CInstruction newInstruction_01002E93=new CInstruction(false,module,new CAddress(16789139),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_287.addInstruction(newInstruction_01002E93,null);  nodes.add(node_287);  final CCodeNode node_288=new CCodeNode(288,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E94=new CInstruction(false,module,new CAddress(16789140),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_288.addInstruction(newInstruction_01002E94,null);  final CInstruction newInstruction_01002E9A=new CInstruction(false,module,new CAddress(16789146),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_288.addInstruction(newInstruction_01002E9A,null);  nodes.add(node_288);  final CCodeNode node_289=new CCodeNode(289,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002E9F=new CInstruction(false,module,new CAddress(16789151),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_289.addInstruction(newInstruction_01002E9F,null);  final CInstruction newInstruction_01002EA0=new CInstruction(false,module,new CAddress(16789152),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_289.addInstruction(newInstruction_01002EA0,null);  final CInstruction newInstruction_01002EA5=new CInstruction(false,module,new CAddress(16789157),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_289.addInstruction(newInstruction_01002EA5,null);  nodes.add(node_289);  final CCodeNode node_290=new CCodeNode(290,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002EAA=new CInstruction(false,module,new CAddress(16789162),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_290.addInstruction(newInstruction_01002EAA,null);  final CInstruction newInstruction_01002EAD=new CInstruction(false,module,new CAddress(16789165),"jg",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_290.addInstruction(newInstruction_01002EAD,null);  nodes.add(node_290);  final CCodeNode node_291=new CCodeNode(291,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002EB3=new CInstruction(false,module,new CAddress(16789171),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_291.addInstruction(newInstruction_01002EB3,null);  nodes.add(node_291);  final CCodeNode node_292=new CCodeNode(292,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002EB9=new CInstruction(false,module,new CAddress(16789177),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_292.addInstruction(newInstruction_01002EB9,null);  final CInstruction newInstruction_01002EBC=new CInstruction(false,module,new CAddress(16789180),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_292.addInstruction(newInstruction_01002EBC,null);  nodes.add(node_292);  final CCodeNode node_293=new CCodeNode(293,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002EC2=new CInstruction(false,module,new CAddress(16789186),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_293.addInstruction(newInstruction_01002EC2,null);  final CInstruction newInstruction_01002EC3=new CInstruction(false,module,new CAddress(16789187),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_293.addInstruction(newInstruction_01002EC3,null);  nodes.add(node_293);  final CCodeNode node_294=new CCodeNode(294,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002EC9=new CInstruction(false,module,new CAddress(16789193),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_294.addInstruction(newInstruction_01002EC9,null);  final CInstruction newInstruction_01002ECA=new CInstruction(false,module,new CAddress(16789194),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_294.addInstruction(newInstruction_01002ECA,null);  nodes.add(node_294);  final CCodeNode node_295=new CCodeNode(295,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002ECC=new CInstruction(false,module,new CAddress(16789196),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_295.addInstruction(newInstruction_01002ECC,null);  final CInstruction newInstruction_01002ECD=new CInstruction(false,module,new CAddress(16789197),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_295.addInstruction(newInstruction_01002ECD,null);  nodes.add(node_295);  final CCodeNode node_296=new CCodeNode(296,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002ED3=new CInstruction(false,module,new CAddress(16789203),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002ED3,null);  final CInstruction newInstruction_01002ED9=new CInstruction(false,module,new CAddress(16789209),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002ED9,null);  final CInstruction newInstruction_01002EDF=new CInstruction(false,module,new CAddress(16789215),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EDF,null);  final CInstruction newInstruction_01002EE5=new CInstruction(false,module,new CAddress(16789221),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EE5,null);  final CInstruction newInstruction_01002EE6=new CInstruction(false,module,new CAddress(16789222),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EE6,null);  final CInstruction newInstruction_01002EE7=new CInstruction(false,module,new CAddress(16789223),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EE7,null);  final CInstruction newInstruction_01002EE9=new CInstruction(false,module,new CAddress(16789225),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EE9,null);  final CInstruction newInstruction_01002EEF=new CInstruction(false,module,new CAddress(16789231),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EEF,null);  final CInstruction newInstruction_01002EF1=new CInstruction(false,module,new CAddress(16789233),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EF1,null);  final CInstruction newInstruction_01002EF3=new CInstruction(false,module,new CAddress(16789235),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EF3,null);  final CInstruction newInstruction_01002EF4=new CInstruction(false,module,new CAddress(16789236),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EF4,null);  final CInstruction newInstruction_01002EF5=new CInstruction(false,module,new CAddress(16789237),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EF5,null);  final CInstruction newInstruction_01002EFA=new CInstruction(false,module,new CAddress(16789242),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002EFA,null);  final CInstruction newInstruction_01002F00=new CInstruction(false,module,new CAddress(16789248),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F00,null);  final CInstruction newInstruction_01002F02=new CInstruction(false,module,new CAddress(16789250),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F02,null);  final CInstruction newInstruction_01002F03=new CInstruction(false,module,new CAddress(16789251),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F03,null);  final CInstruction newInstruction_01002F04=new CInstruction(false,module,new CAddress(16789252),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F04,null);  final CInstruction newInstruction_01002F09=new CInstruction(false,module,new CAddress(16789257),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F09,null);  final CInstruction newInstruction_01002F0F=new CInstruction(false,module,new CAddress(16789263),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F0F,null);  final CInstruction newInstruction_01002F11=new CInstruction(false,module,new CAddress(16789265),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F11,null);  final CInstruction newInstruction_01002F13=new CInstruction(false,module,new CAddress(16789267),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F13,null);  final CInstruction newInstruction_01002F15=new CInstruction(false,module,new CAddress(16789269),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F15,null);  final CInstruction newInstruction_01002F17=new CInstruction(false,module,new CAddress(16789271),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F17,null);  final CInstruction newInstruction_01002F18=new CInstruction(false,module,new CAddress(16789272),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_296.addInstruction(newInstruction_01002F18,null);  nodes.add(node_296);  final CCodeNode node_297=new CCodeNode(297,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002F1E=new CInstruction(false,module,new CAddress(16789278),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_297.addInstruction(newInstruction_01002F1E,null);  final CInstruction newInstruction_01002F1F=new CInstruction(false,module,new CAddress(16789279),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_297.addInstruction(newInstruction_01002F1F,null);  final CInstruction newInstruction_01002F25=new CInstruction(false,module,new CAddress(16789285),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_297.addInstruction(newInstruction_01002F25,null);  nodes.add(node_297);  final CCodeNode node_298=new CCodeNode(298,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002F2A=new CInstruction(false,module,new CAddress(16789290),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_298.addInstruction(newInstruction_01002F2A,null);  final CInstruction newInstruction_01002F2B=new CInstruction(false,module,new CAddress(16789291),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_298.addInstruction(newInstruction_01002F2B,null);  final CInstruction newInstruction_01002F30=new CInstruction(false,module,new CAddress(16789296),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_298.addInstruction(newInstruction_01002F30,null);  final CInstruction newInstruction_01002F36=new CInstruction(false,module,new CAddress(16789302),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_298.addInstruction(newInstruction_01002F36,null);  final CInstruction newInstruction_01002F38=new CInstruction(false,module,new CAddress(16789304),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_298.addInstruction(newInstruction_01002F38,null);  final CInstruction newInstruction_01002F3E=new CInstruction(false,module,new CAddress(16789310),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_298.addInstruction(newInstruction_01002F3E,null);  final CInstruction newInstruction_01002F44=new CInstruction(false,module,new CAddress(16789316),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_298.addInstruction(newInstruction_01002F44,null);  final CInstruction newInstruction_01002F46=new CInstruction(false,module,new CAddress(16789318),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_298.addInstruction(newInstruction_01002F46,null);  nodes.add(node_298);  final CCodeNode node_299=new CCodeNode(299,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002F4C=new CInstruction(false,module,new CAddress(16789324),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_299.addInstruction(newInstruction_01002F4C,null);  final CInstruction newInstruction_01002F52=new CInstruction(false,module,new CAddress(16789330),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_299.addInstruction(newInstruction_01002F52,null);  final CInstruction newInstruction_01002F57=new CInstruction(false,module,new CAddress(16789335),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_299.addInstruction(newInstruction_01002F57,null);  nodes.add(node_299);  final CCodeNode node_300=new CCodeNode(300,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002F5C=new CInstruction(false,module,new CAddress(16789340),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_300.addInstruction(newInstruction_01002F5C,null);  final CInstruction newInstruction_01002F61=new CInstruction(false,module,new CAddress(16789345),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_300.addInstruction(newInstruction_01002F61,null);  final CInstruction newInstruction_01002F63=new CInstruction(false,module,new CAddress(16789347),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_300.addInstruction(newInstruction_01002F63,null);  nodes.add(node_300);  final CCodeNode node_301=new CCodeNode(301,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002F65=new CInstruction(false,module,new CAddress(16789349),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_301.addInstruction(newInstruction_01002F65,null);  final CInstruction newInstruction_01002F66=new CInstruction(false,module,new CAddress(16789350),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_301.addInstruction(newInstruction_01002F66,null);  final CInstruction newInstruction_01002F6C=new CInstruction(false,module,new CAddress(16789356),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_301.addInstruction(newInstruction_01002F6C,null);  nodes.add(node_301);  final CCodeNode node_302=new CCodeNode(302,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002F71=new CInstruction(false,module,new CAddress(16789361),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_302.addInstruction(newInstruction_01002F71,null);  final CInstruction newInstruction_01002F76=new CInstruction(false,module,new CAddress(16789366),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_302.addInstruction(newInstruction_01002F76,null);  final CInstruction newInstruction_01002F80=new CInstruction(false,module,new CAddress(16789376),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_302.addInstruction(newInstruction_01002F80,null);  final CInstruction newInstruction_01002F8A=new CInstruction(false,module,new CAddress(16789386),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_302.addInstruction(newInstruction_01002F8A,null);  final CInstruction newInstruction_01002F93=new CInstruction(false,module,new CAddress(16789395),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_302.addInstruction(newInstruction_01002F93,null);  final CInstruction newInstruction_01002F9D=new CInstruction(false,module,new CAddress(16789405),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_302.addInstruction(newInstruction_01002F9D,null);  final CInstruction newInstruction_01002FA6=new CInstruction(false,module,new CAddress(16789414),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_302.addInstruction(newInstruction_01002FA6,null);  nodes.add(node_302);  final CCodeNode node_303=new CCodeNode(303,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002FAC=new CInstruction(false,module,new CAddress(16789420),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_303.addInstruction(newInstruction_01002FAC,null);  final CInstruction newInstruction_01002FB1=new CInstruction(false,module,new CAddress(16789425),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_303.addInstruction(newInstruction_01002FB1,null);  nodes.add(node_303);  final CCodeNode node_304=new CCodeNode(304,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002FB6=new CInstruction(false,module,new CAddress(16789430),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_304.addInstruction(newInstruction_01002FB6,null);  final CInstruction newInstruction_01002FBD=new CInstruction(false,module,new CAddress(16789437),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_304.addInstruction(newInstruction_01002FBD,null);  nodes.add(node_304);  final CCodeNode node_305=new CCodeNode(305,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002FBF=new CInstruction(false,module,new CAddress(16789439),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_305.addInstruction(newInstruction_01002FBF,null);  final CInstruction newInstruction_01002FC4=new CInstruction(false,module,new CAddress(16789444),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_305.addInstruction(newInstruction_01002FC4,null);  final CInstruction newInstruction_01002FC9=new CInstruction(false,module,new CAddress(16789449),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_305.addInstruction(newInstruction_01002FC9,null);  nodes.add(node_305);  final CCodeNode node_306=new CCodeNode(306,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002FCE=new CInstruction(false,module,new CAddress(16789454),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_306.addInstruction(newInstruction_01002FCE,null);  final CInstruction newInstruction_01002FD3=new CInstruction(false,module,new CAddress(16789459),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_306.addInstruction(newInstruction_01002FD3,null);  final CInstruction newInstruction_01002FD5=new CInstruction(false,module,new CAddress(16789461),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_306.addInstruction(newInstruction_01002FD5,null);  nodes.add(node_306);  final CCodeNode node_307=new CCodeNode(307,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01002FD7=new CInstruction(false,module,new CAddress(16789463),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_307.addInstruction(newInstruction_01002FD7,null);  final CInstruction newInstruction_01002FDC=new CInstruction(false,module,new CAddress(16789468),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_307.addInstruction(newInstruction_01002FDC,null);  final CInstruction newInstruction_01002FE6=new CInstruction(false,module,new CAddress(16789478),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_307.addInstruction(newInstruction_01002FE6,null);  final CInstruction newInstruction_01002FEC=new CInstruction(false,module,new CAddress(16789484),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_307.addInstruction(newInstruction_01002FEC,null);  final CInstruction newInstruction_01002FF3=new CInstruction(false,module,new CAddress(16789491),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_307.addInstruction(newInstruction_01002FF3,null);  final CInstruction newInstruction_01002FFD=new CInstruction(false,module,new CAddress(16789501),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_307.addInstruction(newInstruction_01002FFD,null);  final CInstruction newInstruction_01003006=new CInstruction(false,module,new CAddress(16789510),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_307.addInstruction(newInstruction_01003006,null);  final CInstruction newInstruction_0100300C=new CInstruction(false,module,new CAddress(16789516),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_307.addInstruction(newInstruction_0100300C,null);  nodes.add(node_307);  final CCodeNode node_308=new CCodeNode(308,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100300E=new CInstruction(false,module,new CAddress(16789518),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_308.addInstruction(newInstruction_0100300E,null);  final CInstruction newInstruction_0100300F=new CInstruction(false,module,new CAddress(16789519),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_308.addInstruction(newInstruction_0100300F,null);  final CInstruction newInstruction_01003014=new CInstruction(false,module,new CAddress(16789524),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_308.addInstruction(newInstruction_01003014,null);  nodes.add(node_308);  final CCodeNode node_309=new CCodeNode(309,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003019=new CInstruction(false,module,new CAddress(16789529),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_309.addInstruction(newInstruction_01003019,null);  final CInstruction newInstruction_0100301B=new CInstruction(false,module,new CAddress(16789531),"pop",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_309.addInstruction(newInstruction_0100301B,null);  final CInstruction newInstruction_0100301C=new CInstruction(false,module,new CAddress(16789532),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_309.addInstruction(newInstruction_0100301C,null);  final CInstruction newInstruction_0100301E=new CInstruction(false,module,new CAddress(16789534),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_309.addInstruction(newInstruction_0100301E,null);  nodes.add(node_309);  final CCodeNode node_310=new CCodeNode(310,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003024=new CInstruction(false,module,new CAddress(16789540),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_310.addInstruction(newInstruction_01003024,null);  final CInstruction newInstruction_01003027=new CInstruction(false,module,new CAddress(16789543),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_310.addInstruction(newInstruction_01003027,null);  nodes.add(node_310);  final CCodeNode node_311=new CCodeNode(311,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100302D=new CInstruction(false,module,new CAddress(16789549),"dec",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_311.addInstruction(newInstruction_0100302D,null);  final CInstruction newInstruction_0100302E=new CInstruction(false,module,new CAddress(16789550),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_311.addInstruction(newInstruction_0100302E,null);  nodes.add(node_311);  final CCodeNode node_312=new CCodeNode(312,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003034=new CInstruction(false,module,new CAddress(16789556),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_312.addInstruction(newInstruction_01003034,null);  final CInstruction newInstruction_01003035=new CInstruction(false,module,new CAddress(16789557),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_312.addInstruction(newInstruction_01003035,null);  final CInstruction newInstruction_0100303B=new CInstruction(false,module,new CAddress(16789563),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_312.addInstruction(newInstruction_0100303B,null);  final CInstruction newInstruction_0100303D=new CInstruction(false,module,new CAddress(16789565),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_312.addInstruction(newInstruction_0100303D,null);  final CInstruction newInstruction_0100303F=new CInstruction(false,module,new CAddress(16789567),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_312.addInstruction(newInstruction_0100303F,null);  nodes.add(node_312);  final CCodeNode node_313=new CCodeNode(313,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003045=new CInstruction(false,module,new CAddress(16789573),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003045,null);  final CInstruction newInstruction_0100304B=new CInstruction(false,module,new CAddress(16789579),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_0100304B,null);  final CInstruction newInstruction_01003050=new CInstruction(false,module,new CAddress(16789584),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003050,null);  final CInstruction newInstruction_01003052=new CInstruction(false,module,new CAddress(16789586),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003052,null);  final CInstruction newInstruction_01003057=new CInstruction(false,module,new CAddress(16789591),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003057,null);  final CInstruction newInstruction_01003058=new CInstruction(false,module,new CAddress(16789592),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003058,null);  final CInstruction newInstruction_01003062=new CInstruction(false,module,new CAddress(16789602),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003062,null);  final CInstruction newInstruction_01003068=new CInstruction(false,module,new CAddress(16789608),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003068,null);  final CInstruction newInstruction_0100306E=new CInstruction(false,module,new CAddress(16789614),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_0100306E,null);  final CInstruction newInstruction_01003074=new CInstruction(false,module,new CAddress(16789620),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003074,null);  final CInstruction newInstruction_01003075=new CInstruction(false,module,new CAddress(16789621),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003075,null);  final CInstruction newInstruction_0100307B=new CInstruction(false,module,new CAddress(16789627),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_0100307B,null);  final CInstruction newInstruction_01003081=new CInstruction(false,module,new CAddress(16789633),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003081,null);  final CInstruction newInstruction_01003082=new CInstruction(false,module,new CAddress(16789634),"neg",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003082,null);  final CInstruction newInstruction_01003084=new CInstruction(false,module,new CAddress(16789636),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003084,null);  final CInstruction newInstruction_01003085=new CInstruction(false,module,new CAddress(16789637),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003085,null);  final CInstruction newInstruction_0100308A=new CInstruction(false,module,new CAddress(16789642),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_0100308A,null);  final CInstruction newInstruction_01003094=new CInstruction(false,module,new CAddress(16789652),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_01003094,null);  final CInstruction newInstruction_0100309A=new CInstruction(false,module,new CAddress(16789658),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_0100309A,null);  final CInstruction newInstruction_010030A0=new CInstruction(false,module,new CAddress(16789664),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030A0,null);  final CInstruction newInstruction_010030A6=new CInstruction(false,module,new CAddress(16789670),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030A6,null);  final CInstruction newInstruction_010030AC=new CInstruction(false,module,new CAddress(16789676),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030AC,null);  final CInstruction newInstruction_010030B2=new CInstruction(false,module,new CAddress(16789682),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030B2,null);  final CInstruction newInstruction_010030B8=new CInstruction(false,module,new CAddress(16789688),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030B8,null);  final CInstruction newInstruction_010030C1=new CInstruction(false,module,new CAddress(16789697),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030C1,null);  final CInstruction newInstruction_010030C7=new CInstruction(false,module,new CAddress(16789703),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030C7,null);  final CInstruction newInstruction_010030CD=new CInstruction(false,module,new CAddress(16789709),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030CD,null);  final CInstruction newInstruction_010030D3=new CInstruction(false,module,new CAddress(16789715),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030D3,null);  final CInstruction newInstruction_010030D9=new CInstruction(false,module,new CAddress(16789721),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030D9,null);  final CInstruction newInstruction_010030DA=new CInstruction(false,module,new CAddress(16789722),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030DA,null);  final CInstruction newInstruction_010030E0=new CInstruction(false,module,new CAddress(16789728),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030E0,null);  final CInstruction newInstruction_010030E2=new CInstruction(false,module,new CAddress(16789730),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_313.addInstruction(newInstruction_010030E2,null);  nodes.add(node_313);  final CCodeNode node_314=new CCodeNode(314,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010030E8=new CInstruction(false,module,new CAddress(16789736),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_314.addInstruction(newInstruction_010030E8,null);  final CInstruction newInstruction_010030EE=new CInstruction(false,module,new CAddress(16789742),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_314.addInstruction(newInstruction_010030EE,null);  final CInstruction newInstruction_010030F4=new CInstruction(false,module,new CAddress(16789748),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_314.addInstruction(newInstruction_010030F4,null);  final CInstruction newInstruction_010030F6=new CInstruction(false,module,new CAddress(16789750),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_314.addInstruction(newInstruction_010030F6,null);  final CInstruction newInstruction_010030F7=new CInstruction(false,module,new CAddress(16789751),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_314.addInstruction(newInstruction_010030F7,null);  final CInstruction newInstruction_010030FD=new CInstruction(false,module,new CAddress(16789757),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_314.addInstruction(newInstruction_010030FD,null);  final CInstruction newInstruction_010030FF=new CInstruction(false,module,new CAddress(16789759),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_314.addInstruction(newInstruction_010030FF,null);  final CInstruction newInstruction_01003101=new CInstruction(false,module,new CAddress(16789761),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_314.addInstruction(newInstruction_01003101,null);  nodes.add(node_314);  final CCodeNode node_315=new CCodeNode(315,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003103=new CInstruction(false,module,new CAddress(16789763),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_01003103,null);  final CInstruction newInstruction_01003109=new CInstruction(false,module,new CAddress(16789769),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_01003109,null);  final CInstruction newInstruction_0100310F=new CInstruction(false,module,new CAddress(16789775),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_0100310F,null);  final CInstruction newInstruction_01003111=new CInstruction(false,module,new CAddress(16789777),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_01003111,null);  final CInstruction newInstruction_01003112=new CInstruction(false,module,new CAddress(16789778),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_01003112,null);  final CInstruction newInstruction_01003114=new CInstruction(false,module,new CAddress(16789780),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_01003114,null);  final CInstruction newInstruction_0100311A=new CInstruction(false,module,new CAddress(16789786),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_0100311A,null);  final CInstruction newInstruction_01003120=new CInstruction(false,module,new CAddress(16789792),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_01003120,null);  final CInstruction newInstruction_01003126=new CInstruction(false,module,new CAddress(16789798),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_01003126,null);  final CInstruction newInstruction_0100312C=new CInstruction(false,module,new CAddress(16789804),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_315.addInstruction(newInstruction_0100312C,null);  nodes.add(node_315);  final CCodeNode node_316=new CCodeNode(316,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003131=new CInstruction(false,module,new CAddress(16789809),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_316.addInstruction(newInstruction_01003131,null);  final CInstruction newInstruction_01003137=new CInstruction(false,module,new CAddress(16789815),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_316.addInstruction(newInstruction_01003137,null);  final CInstruction newInstruction_01003139=new CInstruction(false,module,new CAddress(16789817),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_316.addInstruction(newInstruction_01003139,null);  nodes.add(node_316);  final CCodeNode node_317=new CCodeNode(317,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100313E=new CInstruction(false,module,new CAddress(16789822),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_0100313E,null);  final CInstruction newInstruction_01003143=new CInstruction(false,module,new CAddress(16789827),"neg",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_01003143,null);  final CInstruction newInstruction_01003145=new CInstruction(false,module,new CAddress(16789829),"sbb",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_01003145,null);  final CInstruction newInstruction_01003147=new CInstruction(false,module,new CAddress(16789831),"and",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_01003147,null);  final CInstruction newInstruction_0100314C=new CInstruction(false,module,new CAddress(16789836),"add",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_0100314C,null);  final CInstruction newInstruction_01003151=new CInstruction(false,module,new CAddress(16789841),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_01003151,null);  final CInstruction newInstruction_01003152=new CInstruction(false,module,new CAddress(16789842),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_01003152,null);  final CInstruction newInstruction_01003157=new CInstruction(false,module,new CAddress(16789847),"test",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_01003157,null);  final CInstruction newInstruction_01003159=new CInstruction(false,module,new CAddress(16789849),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_317.addInstruction(newInstruction_01003159,null);  nodes.add(node_317);  final CCodeNode node_318=new CCodeNode(318,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100315B=new CInstruction(false,module,new CAddress(16789851),"xor",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_318.addInstruction(newInstruction_0100315B,null);  final CInstruction newInstruction_0100315D=new CInstruction(false,module,new CAddress(16789853),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_318.addInstruction(newInstruction_0100315D,null);  final CInstruction newInstruction_01003163=new CInstruction(false,module,new CAddress(16789859),"setz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_318.addInstruction(newInstruction_01003163,null);  final CInstruction newInstruction_01003166=new CInstruction(false,module,new CAddress(16789862),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_318.addInstruction(newInstruction_01003166,null);  final CInstruction newInstruction_0100316B=new CInstruction(false,module,new CAddress(16789867),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_318.addInstruction(newInstruction_0100316B,null);  nodes.add(node_318);  final CCodeNode node_319=new CCodeNode(319,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100316D=new CInstruction(false,module,new CAddress(16789869),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_319.addInstruction(newInstruction_0100316D,null);  final CInstruction newInstruction_0100316F=new CInstruction(false,module,new CAddress(16789871),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_319.addInstruction(newInstruction_0100316F,null);  final CInstruction newInstruction_01003175=new CInstruction(false,module,new CAddress(16789877),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_319.addInstruction(newInstruction_01003175,null);  final CInstruction newInstruction_0100317B=new CInstruction(false,module,new CAddress(16789883),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_319.addInstruction(newInstruction_0100317B,null);  final CInstruction newInstruction_01003181=new CInstruction(false,module,new CAddress(16789889),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_319.addInstruction(newInstruction_01003181,null);  nodes.add(node_319);  final CCodeNode node_320=new CCodeNode(320,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003187=new CInstruction(false,module,new CAddress(16789895),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_320.addInstruction(newInstruction_01003187,null);  final CInstruction newInstruction_0100318D=new CInstruction(false,module,new CAddress(16789901),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_320.addInstruction(newInstruction_0100318D,null);  nodes.add(node_320);  final CCodeNode node_321=new CCodeNode(321,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100318F=new CInstruction(false,module,new CAddress(16789903),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_321.addInstruction(newInstruction_0100318F,null);  final CInstruction newInstruction_01003194=new CInstruction(false,module,new CAddress(16789908),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_321.addInstruction(newInstruction_01003194,null);  final CInstruction newInstruction_01003196=new CInstruction(false,module,new CAddress(16789910),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_321.addInstruction(newInstruction_01003196,null);  final CInstruction newInstruction_0100319B=new CInstruction(false,module,new CAddress(16789915),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_321.addInstruction(newInstruction_0100319B,null);  nodes.add(node_321);  final CCodeNode node_322=new CCodeNode(322,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100319D=new CInstruction(false,module,new CAddress(16789917),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_322.addInstruction(newInstruction_0100319D,null);  final CInstruction newInstruction_0100319E=new CInstruction(false,module,new CAddress(16789918),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_322.addInstruction(newInstruction_0100319E,null);  final CInstruction newInstruction_0100319F=new CInstruction(false,module,new CAddress(16789919),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_322.addInstruction(newInstruction_0100319F,null);  final CInstruction newInstruction_010031A4=new CInstruction(false,module,new CAddress(16789924),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_322.addInstruction(newInstruction_010031A4,null);  final CInstruction newInstruction_010031AA=new CInstruction(false,module,new CAddress(16789930),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_322.addInstruction(newInstruction_010031AA,null);  nodes.add(node_322);  final CCodeNode node_323=new CCodeNode(323,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010031B0=new CInstruction(false,module,new CAddress(16789936),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031B0,null);  final CInstruction newInstruction_010031B6=new CInstruction(false,module,new CAddress(16789942),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031B6,null);  final CInstruction newInstruction_010031BC=new CInstruction(false,module,new CAddress(16789948),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031BC,null);  final CInstruction newInstruction_010031BD=new CInstruction(false,module,new CAddress(16789949),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031BD,null);  final CInstruction newInstruction_010031C3=new CInstruction(false,module,new CAddress(16789955),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031C3,null);  final CInstruction newInstruction_010031C4=new CInstruction(false,module,new CAddress(16789956),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031C4,null);  final CInstruction newInstruction_010031C6=new CInstruction(false,module,new CAddress(16789958),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031C6,null);  final CInstruction newInstruction_010031C8=new CInstruction(false,module,new CAddress(16789960),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031C8,null);  final CInstruction newInstruction_010031C9=new CInstruction(false,module,new CAddress(16789961),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031C9,null);  final CInstruction newInstruction_010031CB=new CInstruction(false,module,new CAddress(16789963),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031CB,null);  final CInstruction newInstruction_010031CC=new CInstruction(false,module,new CAddress(16789964),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031CC,null);  final CInstruction newInstruction_010031D2=new CInstruction(false,module,new CAddress(16789970),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031D2,null);  final CInstruction newInstruction_010031D4=new CInstruction(false,module,new CAddress(16789972),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031D4,null);  final CInstruction newInstruction_010031D5=new CInstruction(false,module,new CAddress(16789973),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031D5,null);  final CInstruction newInstruction_010031D7=new CInstruction(false,module,new CAddress(16789975),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031D7,null);  final CInstruction newInstruction_010031D8=new CInstruction(false,module,new CAddress(16789976),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031D8,null);  final CInstruction newInstruction_010031DA=new CInstruction(false,module,new CAddress(16789978),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_323.addInstruction(newInstruction_010031DA,null);  nodes.add(node_323);  final CCodeNode node_324=new CCodeNode(324,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010031DF=new CInstruction(false,module,new CAddress(16789983),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031DF,null);  final CInstruction newInstruction_010031E5=new CInstruction(false,module,new CAddress(16789989),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031E5,null);  final CInstruction newInstruction_010031EB=new CInstruction(false,module,new CAddress(16789995),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031EB,null);  final CInstruction newInstruction_010031EC=new CInstruction(false,module,new CAddress(16789996),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031EC,null);  final CInstruction newInstruction_010031ED=new CInstruction(false,module,new CAddress(16789997),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031ED,null);  final CInstruction newInstruction_010031EF=new CInstruction(false,module,new CAddress(16789999),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031EF,null);  final CInstruction newInstruction_010031F0=new CInstruction(false,module,new CAddress(16790000),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031F0,null);  final CInstruction newInstruction_010031F6=new CInstruction(false,module,new CAddress(16790006),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031F6,null);  final CInstruction newInstruction_010031F7=new CInstruction(false,module,new CAddress(16790007),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031F7,null);  final CInstruction newInstruction_010031FD=new CInstruction(false,module,new CAddress(16790013),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_010031FD,null);  final CInstruction newInstruction_01003203=new CInstruction(false,module,new CAddress(16790019),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_324.addInstruction(newInstruction_01003203,null);  nodes.add(node_324);  final CCodeNode node_325=new CCodeNode(325,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003209=new CInstruction(false,module,new CAddress(16790025),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_325.addInstruction(newInstruction_01003209,null);  final CInstruction newInstruction_0100320A=new CInstruction(false,module,new CAddress(16790026),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_325.addInstruction(newInstruction_0100320A,null);  final CInstruction newInstruction_0100320B=new CInstruction(false,module,new CAddress(16790027),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_325.addInstruction(newInstruction_0100320B,null);  final CInstruction newInstruction_01003210=new CInstruction(false,module,new CAddress(16790032),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_325.addInstruction(newInstruction_01003210,null);  final CInstruction newInstruction_01003216=new CInstruction(false,module,new CAddress(16790038),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_325.addInstruction(newInstruction_01003216,null);  nodes.add(node_325);  final CCodeNode node_326=new CCodeNode(326,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100321B=new CInstruction(false,module,new CAddress(16790043),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_326.addInstruction(newInstruction_0100321B,null);  final CInstruction newInstruction_01003221=new CInstruction(false,module,new CAddress(16790049),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_326.addInstruction(newInstruction_01003221,null);  final CInstruction newInstruction_01003222=new CInstruction(false,module,new CAddress(16790050),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_326.addInstruction(newInstruction_01003222,null);  final CInstruction newInstruction_01003228=new CInstruction(false,module,new CAddress(16790056),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_326.addInstruction(newInstruction_01003228,null);  final CInstruction newInstruction_0100322E=new CInstruction(false,module,new CAddress(16790062),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_326.addInstruction(newInstruction_0100322E,null);  final CInstruction newInstruction_01003234=new CInstruction(false,module,new CAddress(16790068),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_326.addInstruction(newInstruction_01003234,null);  nodes.add(node_326);  final CCodeNode node_327=new CCodeNode(327,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003236=new CInstruction(false,module,new CAddress(16790070),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003236,null);  final CInstruction newInstruction_01003237=new CInstruction(false,module,new CAddress(16790071),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003237,null);  final CInstruction newInstruction_0100323D=new CInstruction(false,module,new CAddress(16790077),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_0100323D,null);  final CInstruction newInstruction_01003243=new CInstruction(false,module,new CAddress(16790083),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003243,null);  final CInstruction newInstruction_01003249=new CInstruction(false,module,new CAddress(16790089),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003249,null);  final CInstruction newInstruction_0100324F=new CInstruction(false,module,new CAddress(16790095),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_0100324F,null);  final CInstruction newInstruction_01003255=new CInstruction(false,module,new CAddress(16790101),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003255,null);  final CInstruction newInstruction_01003256=new CInstruction(false,module,new CAddress(16790102),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003256,null);  final CInstruction newInstruction_0100325C=new CInstruction(false,module,new CAddress(16790108),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_0100325C,null);  final CInstruction newInstruction_01003262=new CInstruction(false,module,new CAddress(16790114),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003262,null);  final CInstruction newInstruction_01003263=new CInstruction(false,module,new CAddress(16790115),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003263,null);  final CInstruction newInstruction_01003268=new CInstruction(false,module,new CAddress(16790120),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_327.addInstruction(newInstruction_01003268,null);  nodes.add(node_327);  final CCodeNode node_328=new CCodeNode(328,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100326D=new CInstruction(false,module,new CAddress(16790125),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_0100326D,null);  final CInstruction newInstruction_01003273=new CInstruction(false,module,new CAddress(16790131),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_01003273,null);  final CInstruction newInstruction_01003279=new CInstruction(false,module,new CAddress(16790137),"xor",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_01003279,null);  final CInstruction newInstruction_0100327B=new CInstruction(false,module,new CAddress(16790139),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_0100327B,null);  final CInstruction newInstruction_0100327C=new CInstruction(false,module,new CAddress(16790140),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_0100327C,null);  final CInstruction newInstruction_01003282=new CInstruction(false,module,new CAddress(16790146),"sub",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_01003282,null);  final CInstruction newInstruction_01003288=new CInstruction(false,module,new CAddress(16790152),"inc",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_01003288,null);  final CInstruction newInstruction_01003289=new CInstruction(false,module,new CAddress(16790153),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_01003289,null);  final CInstruction newInstruction_0100328A=new CInstruction(false,module,new CAddress(16790154),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_0100328A,null);  final CInstruction newInstruction_01003290=new CInstruction(false,module,new CAddress(16790160),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_01003290,null);  final CInstruction newInstruction_01003295=new CInstruction(false,module,new CAddress(16790165),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_01003295,null);  final CInstruction newInstruction_01003296=new CInstruction(false,module,new CAddress(16790166),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_01003296,null);  final CInstruction newInstruction_0100329B=new CInstruction(false,module,new CAddress(16790171),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_0100329B,null);  final CInstruction newInstruction_0100329D=new CInstruction(false,module,new CAddress(16790173),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_0100329D,null);  final CInstruction newInstruction_010032A3=new CInstruction(false,module,new CAddress(16790179),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_010032A3,null);  final CInstruction newInstruction_010032A9=new CInstruction(false,module,new CAddress(16790185),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_328.addInstruction(newInstruction_010032A9,null);  nodes.add(node_328);  final CCodeNode node_329=new CCodeNode(329,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010032AE=new CInstruction(false,module,new CAddress(16790190),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_329.addInstruction(newInstruction_010032AE,null);  final CInstruction newInstruction_010032AF=new CInstruction(false,module,new CAddress(16790191),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_329.addInstruction(newInstruction_010032AF,null);  final CInstruction newInstruction_010032B0=new CInstruction(false,module,new CAddress(16790192),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_329.addInstruction(newInstruction_010032B0,null);  final CInstruction newInstruction_010032B5=new CInstruction(false,module,new CAddress(16790197),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_329.addInstruction(newInstruction_010032B5,null);  final CInstruction newInstruction_010032BB=new CInstruction(false,module,new CAddress(16790203),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_329.addInstruction(newInstruction_010032BB,null);  final CInstruction newInstruction_010032BC=new CInstruction(false,module,new CAddress(16790204),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_329.addInstruction(newInstruction_010032BC,null);  final CInstruction newInstruction_010032C1=new CInstruction(false,module,new CAddress(16790209),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_329.addInstruction(newInstruction_010032C1,null);  nodes.add(node_329);  final CCodeNode node_330=new CCodeNode(330,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010032C6=new CInstruction(false,module,new CAddress(16790214),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_330.addInstruction(newInstruction_010032C6,null);  final CInstruction newInstruction_010032C9=new CInstruction(false,module,new CAddress(16790217),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_330.addInstruction(newInstruction_010032C9,null);  nodes.add(node_330);  final CCodeNode node_331=new CCodeNode(331,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010032CB=new CInstruction(false,module,new CAddress(16790219),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_331.addInstruction(newInstruction_010032CB,null);  final CInstruction newInstruction_010032D1=new CInstruction(false,module,new CAddress(16790225),"jle",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_331.addInstruction(newInstruction_010032D1,null);  nodes.add(node_331);  final CCodeNode node_332=new CCodeNode(332,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010032D7=new CInstruction(false,module,new CAddress(16790231),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_332.addInstruction(newInstruction_010032D7,null);  final CInstruction newInstruction_010032DD=new CInstruction(false,module,new CAddress(16790237),"jle",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_332.addInstruction(newInstruction_010032DD,null);  nodes.add(node_332);  final CCodeNode node_333=new CCodeNode(333,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010032DF=new CInstruction(false,module,new CAddress(16790239),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_333.addInstruction(newInstruction_010032DF,null);  final CInstruction newInstruction_010032E5=new CInstruction(false,module,new CAddress(16790245),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_333.addInstruction(newInstruction_010032E5,null);  nodes.add(node_333);  final CCodeNode node_334=new CCodeNode(334,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010032E7=new CInstruction(false,module,new CAddress(16790247),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_334.addInstruction(newInstruction_010032E7,null);  final CInstruction newInstruction_010032ED=new CInstruction(false,module,new CAddress(16790253),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_334.addInstruction(newInstruction_010032ED,null);  nodes.add(node_334);  final CCodeNode node_335=new CCodeNode(335,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_010032F3=new CInstruction(false,module,new CAddress(16790259),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_010032F3,null);  final CInstruction newInstruction_010032F9=new CInstruction(false,module,new CAddress(16790265),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_010032F9,null);  final CInstruction newInstruction_010032FA=new CInstruction(false,module,new CAddress(16790266),"lea",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_010032FA,null);  final CInstruction newInstruction_01003300=new CInstruction(false,module,new CAddress(16790272),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_01003300,null);  final CInstruction newInstruction_01003301=new CInstruction(false,module,new CAddress(16790273),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_01003301,null);  final CInstruction newInstruction_01003306=new CInstruction(false,module,new CAddress(16790278),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_01003306,null);  final CInstruction newInstruction_0100330C=new CInstruction(false,module,new CAddress(16790284),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_0100330C,null);  final CInstruction newInstruction_01003312=new CInstruction(false,module,new CAddress(16790290),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_01003312,null);  final CInstruction newInstruction_01003318=new CInstruction(false,module,new CAddress(16790296),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_01003318,null);  final CInstruction newInstruction_0100331E=new CInstruction(false,module,new CAddress(16790302),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_335.addInstruction(newInstruction_0100331E,null);  nodes.add(node_335);  final CCodeNode node_336=new CCodeNode(336,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003320=new CInstruction(false,module,new CAddress(16790304),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_336.addInstruction(newInstruction_01003320,null);  final CInstruction newInstruction_01003326=new CInstruction(false,module,new CAddress(16790310),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_336.addInstruction(newInstruction_01003326,null);  final CInstruction newInstruction_0100332C=new CInstruction(false,module,new CAddress(16790316),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_336.addInstruction(newInstruction_0100332C,null);  final CInstruction newInstruction_0100332E=new CInstruction(false,module,new CAddress(16790318),"jz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_336.addInstruction(newInstruction_0100332E,null);  nodes.add(node_336);  final CCodeNode node_337=new CCodeNode(337,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003330=new CInstruction(false,module,new CAddress(16790320),"cmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_337.addInstruction(newInstruction_01003330,null);  final CInstruction newInstruction_01003336=new CInstruction(false,module,new CAddress(16790326),"jnz",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_337.addInstruction(newInstruction_01003336,null);  nodes.add(node_337);  final CCodeNode node_338=new CCodeNode(338,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003338=new CInstruction(false,module,new CAddress(16790328),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_338.addInstruction(newInstruction_01003338,null);  final CInstruction newInstruction_01003339=new CInstruction(false,module,new CAddress(16790329),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_338.addInstruction(newInstruction_01003339,null);  final CInstruction newInstruction_0100333A=new CInstruction(false,module,new CAddress(16790330),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_338.addInstruction(newInstruction_0100333A,null);  final CInstruction newInstruction_0100333B=new CInstruction(false,module,new CAddress(16790331),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_338.addInstruction(newInstruction_0100333B,null);  final CInstruction newInstruction_0100333C=new CInstruction(false,module,new CAddress(16790332),"jmp",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_338.addInstruction(newInstruction_0100333C,null);  nodes.add(node_338);  final CCodeNode node_339=new CCodeNode(339,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003341=new CInstruction(false,module,new CAddress(16790337),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_339.addInstruction(newInstruction_01003341,null);  final CInstruction newInstruction_01003343=new CInstruction(false,module,new CAddress(16790339),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_339.addInstruction(newInstruction_01003343,null);  final CInstruction newInstruction_01003349=new CInstruction(false,module,new CAddress(16790345),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_339.addInstruction(newInstruction_01003349,null);  final CInstruction newInstruction_0100334F=new CInstruction(false,module,new CAddress(16790351),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_339.addInstruction(newInstruction_0100334F,null);  final CInstruction newInstruction_01003350=new CInstruction(false,module,new CAddress(16790352),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_339.addInstruction(newInstruction_01003350,null);  final CInstruction newInstruction_01003355=new CInstruction(false,module,new CAddress(16790357),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_339.addInstruction(newInstruction_01003355,null);  final CInstruction newInstruction_0100335B=new CInstruction(false,module,new CAddress(16790363),"push",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_339.addInstruction(newInstruction_0100335B,null);  final CInstruction newInstruction_01003361=new CInstruction(false,module,new CAddress(16790369),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_339.addInstruction(newInstruction_01003361,null);  nodes.add(node_339);  final CCodeNode node_340=new CCodeNode(340,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_01003367=new CInstruction(false,module,new CAddress(16790375),"xor",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_340.addInstruction(newInstruction_01003367,null);  final CInstruction newInstruction_01003369=new CInstruction(false,module,new CAddress(16790377),"inc",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_340.addInstruction(newInstruction_01003369,null);  nodes.add(node_340);  final CCodeNode node_341=new CCodeNode(341,0,0,0,0,Color.BLUE,Color.BLACK,false,true,null,function,new HashSet<CTag>(),provider);  final CInstruction newInstruction_0100336A=new CInstruction(false,module,new CAddress(16790378),"mov",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_341.addInstruction(newInstruction_0100336A,null);  final CInstruction newInstruction_0100336D=new CInstruction(false,module,new CAddress(16790381),"pop",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_341.addInstruction(newInstruction_0100336D,null);  final CInstruction newInstruction_0100336E=new CInstruction(false,module,new CAddress(16790382),"pop",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_341.addInstruction(newInstruction_0100336E,null);  final CInstruction newInstruction_0100336F=new CInstruction(false,module,new CAddress(16790383),"pop",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_341.addInstruction(newInstruction_0100336F,null);  final CInstruction newInstruction_01003370=new CInstruction(false,module,new CAddress(16790384),"call",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_341.addInstruction(newInstruction_01003370,null);  final CInstruction newInstruction_01003375=new CInstruction(false,module,new CAddress(16790389),"leave",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_341.addInstruction(newInstruction_01003375,null);  final CInstruction newInstruction_01003376=new CInstruction(false,module,new CAddress(16790390),"retn",new ArrayList<COperandTree>(),new byte[0],"x86-32",provider);  node_341.addInstruction(newInstruction_01003376,null);  nodes.add(node_341);  final CNaviViewEdge edge_1320=new CNaviViewEdge(1320,node_246,node_247,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1320);  CNaviViewNode.link(node_246,node_247);  node_246.addOutgoingEdge(edge_1320);  node_247.addIncomingEdge(edge_1320);  final CNaviViewEdge edge_1380=new CNaviViewEdge(1380,node_246,node_330,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1380);  CNaviViewNode.link(node_246,node_330);  node_246.addOutgoingEdge(edge_1380);  node_330.addIncomingEdge(edge_1380);  final CNaviViewEdge edge_1344=new CNaviViewEdge(1344,node_247,node_329,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1344);  CNaviViewNode.link(node_247,node_329);  node_247.addOutgoingEdge(edge_1344);  node_329.addIncomingEdge(edge_1344);  final CNaviViewEdge edge_1423=new CNaviViewEdge(1423,node_247,node_248,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1423);  CNaviViewNode.link(node_247,node_248);  node_247.addOutgoingEdge(edge_1423);  node_248.addIncomingEdge(edge_1423);  final CNaviViewEdge edge_1328=new CNaviViewEdge(1328,node_248,node_290,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1328);  CNaviViewNode.link(node_248,node_290);  node_248.addOutgoingEdge(edge_1328);  node_290.addIncomingEdge(edge_1328);  final CNaviViewEdge edge_1410=new CNaviViewEdge(1410,node_248,node_249,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1410);  CNaviViewNode.link(node_248,node_249);  node_248.addOutgoingEdge(edge_1410);  node_249.addIncomingEdge(edge_1410);  final CNaviViewEdge edge_1405=new CNaviViewEdge(1405,node_249,node_250,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1405);  CNaviViewNode.link(node_249,node_250);  node_249.addOutgoingEdge(edge_1405);  node_250.addIncomingEdge(edge_1405);  final CNaviViewEdge edge_1422=new CNaviViewEdge(1422,node_249,node_306,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1422);  CNaviViewNode.link(node_249,node_306);  node_249.addOutgoingEdge(edge_1422);  node_306.addIncomingEdge(edge_1422);  final CNaviViewEdge edge_1322=new CNaviViewEdge(1322,node_250,node_251,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1322);  CNaviViewNode.link(node_250,node_251);  node_250.addOutgoingEdge(edge_1322);  node_251.addIncomingEdge(edge_1322);  final CNaviViewEdge edge_1379=new CNaviViewEdge(1379,node_250,node_281,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1379);  CNaviViewNode.link(node_250,node_281);  node_250.addOutgoingEdge(edge_1379);  node_281.addIncomingEdge(edge_1379);  final CNaviViewEdge edge_1312=new CNaviViewEdge(1312,node_251,node_252,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1312);  CNaviViewNode.link(node_251,node_252);  node_251.addOutgoingEdge(edge_1312);  node_252.addIncomingEdge(edge_1312);  final CNaviViewEdge edge_1324=new CNaviViewEdge(1324,node_251,node_274,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1324);  CNaviViewNode.link(node_251,node_274);  node_251.addOutgoingEdge(edge_1324);  node_274.addIncomingEdge(edge_1324);  final CNaviViewEdge edge_1287=new CNaviViewEdge(1287,node_252,node_253,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1287);  CNaviViewNode.link(node_252,node_253);  node_252.addOutgoingEdge(edge_1287);  node_253.addIncomingEdge(edge_1287);  final CNaviViewEdge edge_1359=new CNaviViewEdge(1359,node_252,node_273,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1359);  CNaviViewNode.link(node_252,node_273);  node_252.addOutgoingEdge(edge_1359);  node_273.addIncomingEdge(edge_1359);  final CNaviViewEdge edge_1307=new CNaviViewEdge(1307,node_253,node_267,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1307);  CNaviViewNode.link(node_253,node_267);  node_253.addOutgoingEdge(edge_1307);  node_267.addIncomingEdge(edge_1307);  final CNaviViewEdge edge_1343=new CNaviViewEdge(1343,node_253,node_254,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1343);  CNaviViewNode.link(node_253,node_254);  node_253.addOutgoingEdge(edge_1343);  node_254.addIncomingEdge(edge_1343);  final CNaviViewEdge edge_1364=new CNaviViewEdge(1364,node_254,node_255,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1364);  CNaviViewNode.link(node_254,node_255);  node_254.addOutgoingEdge(edge_1364);  node_255.addIncomingEdge(edge_1364);  final CNaviViewEdge edge_1425=new CNaviViewEdge(1425,node_254,node_257,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1425);  CNaviViewNode.link(node_254,node_257);  node_254.addOutgoingEdge(edge_1425);  node_257.addIncomingEdge(edge_1425);  final CNaviViewEdge edge_1333=new CNaviViewEdge(1333,node_255,node_259,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1333);  CNaviViewNode.link(node_255,node_259);  node_255.addOutgoingEdge(edge_1333);  node_259.addIncomingEdge(edge_1333);  final CNaviViewEdge edge_1420=new CNaviViewEdge(1420,node_255,node_256,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1420);  CNaviViewNode.link(node_255,node_256);  node_255.addOutgoingEdge(edge_1420);  node_256.addIncomingEdge(edge_1420);  final CNaviViewEdge edge_1309=new CNaviViewEdge(1309,node_256,node_341,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1309);  CNaviViewNode.link(node_256,node_341);  node_256.addOutgoingEdge(edge_1309);  node_341.addIncomingEdge(edge_1309);  final CNaviViewEdge edge_1404=new CNaviViewEdge(1404,node_257,node_259,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1404);  CNaviViewNode.link(node_257,node_259);  node_257.addOutgoingEdge(edge_1404);  node_259.addIncomingEdge(edge_1404);  final CNaviViewEdge edge_1409=new CNaviViewEdge(1409,node_257,node_258,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1409);  CNaviViewNode.link(node_257,node_258);  node_257.addOutgoingEdge(edge_1409);  node_258.addIncomingEdge(edge_1409);  final CNaviViewEdge edge_1362=new CNaviViewEdge(1362,node_258,node_259,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1362);  CNaviViewNode.link(node_258,node_259);  node_258.addOutgoingEdge(edge_1362);  node_259.addIncomingEdge(edge_1362);  final CNaviViewEdge edge_1368=new CNaviViewEdge(1368,node_258,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1368);  CNaviViewNode.link(node_258,node_340);  node_258.addOutgoingEdge(edge_1368);  node_340.addIncomingEdge(edge_1368);  final CNaviViewEdge edge_1294=new CNaviViewEdge(1294,node_259,node_261,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1294);  CNaviViewNode.link(node_259,node_261);  node_259.addOutgoingEdge(edge_1294);  node_261.addIncomingEdge(edge_1294);  final CNaviViewEdge edge_1389=new CNaviViewEdge(1389,node_259,node_260,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1389);  CNaviViewNode.link(node_259,node_260);  node_259.addOutgoingEdge(edge_1389);  node_260.addIncomingEdge(edge_1389);  final CNaviViewEdge edge_1303=new CNaviViewEdge(1303,node_260,node_262,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1303);  CNaviViewNode.link(node_260,node_262);  node_260.addOutgoingEdge(edge_1303);  node_262.addIncomingEdge(edge_1303);  final CNaviViewEdge edge_1378=new CNaviViewEdge(1378,node_261,node_262,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1378);  CNaviViewNode.link(node_261,node_262);  node_261.addOutgoingEdge(edge_1378);  node_262.addIncomingEdge(edge_1378);  final CNaviViewEdge edge_1308=new CNaviViewEdge(1308,node_262,node_265,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1308);  CNaviViewNode.link(node_262,node_265);  node_262.addOutgoingEdge(edge_1308);  node_265.addIncomingEdge(edge_1308);  final CNaviViewEdge edge_1334=new CNaviViewEdge(1334,node_262,node_263,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1334);  CNaviViewNode.link(node_262,node_263);  node_262.addOutgoingEdge(edge_1334);  node_263.addIncomingEdge(edge_1334);  final CNaviViewEdge edge_1353=new CNaviViewEdge(1353,node_263,node_266,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1353);  CNaviViewNode.link(node_263,node_266);  node_263.addOutgoingEdge(edge_1353);  node_266.addIncomingEdge(edge_1353);  final CNaviViewEdge edge_1415=new CNaviViewEdge(1415,node_263,node_264,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1415);  CNaviViewNode.link(node_263,node_264);  node_263.addOutgoingEdge(edge_1415);  node_264.addIncomingEdge(edge_1415);  final CNaviViewEdge edge_1432=new CNaviViewEdge(1432,node_264,node_266,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1432);  CNaviViewNode.link(node_264,node_266);  node_264.addOutgoingEdge(edge_1432);  node_266.addIncomingEdge(edge_1432);  final CNaviViewEdge edge_1299=new CNaviViewEdge(1299,node_265,node_266,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1299);  CNaviViewNode.link(node_265,node_266);  node_265.addOutgoingEdge(edge_1299);  node_266.addIncomingEdge(edge_1299);  final CNaviViewEdge edge_1412=new CNaviViewEdge(1412,node_266,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1412);  CNaviViewNode.link(node_266,node_340);  node_266.addOutgoingEdge(edge_1412);  node_340.addIncomingEdge(edge_1412);  final CNaviViewEdge edge_1311=new CNaviViewEdge(1311,node_267,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1311);  CNaviViewNode.link(node_267,node_340);  node_267.addOutgoingEdge(edge_1311);  node_340.addIncomingEdge(edge_1311);  final CNaviViewEdge edge_1331=new CNaviViewEdge(1331,node_267,node_268,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1331);  CNaviViewNode.link(node_267,node_268);  node_267.addOutgoingEdge(edge_1331);  node_268.addIncomingEdge(edge_1331);  final CNaviViewEdge edge_1296=new CNaviViewEdge(1296,node_268,node_271,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1296);  CNaviViewNode.link(node_268,node_271);  node_268.addOutgoingEdge(edge_1296);  node_271.addIncomingEdge(edge_1296);  final CNaviViewEdge edge_1301=new CNaviViewEdge(1301,node_268,node_269,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1301);  CNaviViewNode.link(node_268,node_269);  node_268.addOutgoingEdge(edge_1301);  node_269.addIncomingEdge(edge_1301);  final CNaviViewEdge edge_1354=new CNaviViewEdge(1354,node_269,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1354);  CNaviViewNode.link(node_269,node_340);  node_269.addOutgoingEdge(edge_1354);  node_340.addIncomingEdge(edge_1354);  final CNaviViewEdge edge_1428=new CNaviViewEdge(1428,node_269,node_270,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1428);  CNaviViewNode.link(node_269,node_270);  node_269.addOutgoingEdge(edge_1428);  node_270.addIncomingEdge(edge_1428);  final CNaviViewEdge edge_1391=new CNaviViewEdge(1391,node_270,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1391);  CNaviViewNode.link(node_270,node_340);  node_270.addOutgoingEdge(edge_1391);  node_340.addIncomingEdge(edge_1391);  final CNaviViewEdge edge_1297=new CNaviViewEdge(1297,node_271,node_272,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1297);  CNaviViewNode.link(node_271,node_272);  node_271.addOutgoingEdge(edge_1297);  node_272.addIncomingEdge(edge_1297);  final CNaviViewEdge edge_1396=new CNaviViewEdge(1396,node_272,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1396);  CNaviViewNode.link(node_272,node_340);  node_272.addOutgoingEdge(edge_1396);  node_340.addIncomingEdge(edge_1396);  final CNaviViewEdge edge_1290=new CNaviViewEdge(1290,node_273,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1290);  CNaviViewNode.link(node_273,node_340);  node_273.addOutgoingEdge(edge_1290);  node_340.addIncomingEdge(edge_1290);  final CNaviViewEdge edge_1355=new CNaviViewEdge(1355,node_274,node_279,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1355);  CNaviViewNode.link(node_274,node_279);  node_274.addOutgoingEdge(edge_1355);  node_279.addIncomingEdge(edge_1355);  final CNaviViewEdge edge_1340=new CNaviViewEdge(1340,node_275,node_278,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1340);  CNaviViewNode.link(node_275,node_278);  node_275.addOutgoingEdge(edge_1340);  node_278.addIncomingEdge(edge_1340);  final CNaviViewEdge edge_1408=new CNaviViewEdge(1408,node_275,node_276,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1408);  CNaviViewNode.link(node_275,node_276);  node_275.addOutgoingEdge(edge_1408);  node_276.addIncomingEdge(edge_1408);  final CNaviViewEdge edge_1411=new CNaviViewEdge(1411,node_276,node_278,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1411);  CNaviViewNode.link(node_276,node_278);  node_276.addOutgoingEdge(edge_1411);  node_278.addIncomingEdge(edge_1411);  final CNaviViewEdge edge_1414=new CNaviViewEdge(1414,node_276,node_277,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1414);  CNaviViewNode.link(node_276,node_277);  node_276.addOutgoingEdge(edge_1414);  node_277.addIncomingEdge(edge_1414);  final CNaviViewEdge edge_1300=new CNaviViewEdge(1300,node_277,node_278,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1300);  CNaviViewNode.link(node_277,node_278);  node_277.addOutgoingEdge(edge_1300);  node_278.addIncomingEdge(edge_1300);  final CNaviViewEdge edge_1341=new CNaviViewEdge(1341,node_277,node_272,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1341);  CNaviViewNode.link(node_277,node_272);  node_277.addOutgoingEdge(edge_1341);  node_272.addIncomingEdge(edge_1341);  final CNaviViewEdge edge_1326=new CNaviViewEdge(1326,node_278,node_279,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1326);  CNaviViewNode.link(node_278,node_279);  node_278.addOutgoingEdge(edge_1326);  node_279.addIncomingEdge(edge_1326);  final CNaviViewEdge edge_1317=new CNaviViewEdge(1317,node_279,node_275,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1317);  CNaviViewNode.link(node_279,node_275);  node_279.addOutgoingEdge(edge_1317);  node_275.addIncomingEdge(edge_1317);  final CNaviViewEdge edge_1346=new CNaviViewEdge(1346,node_279,node_280,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1346);  CNaviViewNode.link(node_279,node_280);  node_279.addOutgoingEdge(edge_1346);  node_280.addIncomingEdge(edge_1346);  final CNaviViewEdge edge_1375=new CNaviViewEdge(1375,node_280,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1375);  CNaviViewNode.link(node_280,node_340);  node_280.addOutgoingEdge(edge_1375);  node_340.addIncomingEdge(edge_1375);  final CNaviViewEdge edge_1332=new CNaviViewEdge(1332,node_281,node_289,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1332);  CNaviViewNode.link(node_281,node_289);  node_281.addOutgoingEdge(edge_1332);  node_289.addIncomingEdge(edge_1332);  final CNaviViewEdge edge_1386=new CNaviViewEdge(1386,node_281,node_282,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1386);  CNaviViewNode.link(node_281,node_282);  node_281.addOutgoingEdge(edge_1386);  node_282.addIncomingEdge(edge_1386);  final CNaviViewEdge edge_1335=new CNaviViewEdge(1335,node_282,node_287,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1335);  CNaviViewNode.link(node_282,node_287);  node_282.addOutgoingEdge(edge_1335);  node_287.addIncomingEdge(edge_1335);  final CNaviViewEdge edge_1427=new CNaviViewEdge(1427,node_282,node_283,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1427);  CNaviViewNode.link(node_282,node_283);  node_282.addOutgoingEdge(edge_1427);  node_283.addIncomingEdge(edge_1427);  final CNaviViewEdge edge_1292=new CNaviViewEdge(1292,node_283,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1292);  CNaviViewNode.link(node_283,node_340);  node_283.addOutgoingEdge(edge_1292);  node_340.addIncomingEdge(edge_1292);  final CNaviViewEdge edge_1314=new CNaviViewEdge(1314,node_283,node_284,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1314);  CNaviViewNode.link(node_283,node_284);  node_283.addOutgoingEdge(edge_1314);  node_284.addIncomingEdge(edge_1314);  final CNaviViewEdge edge_1330=new CNaviViewEdge(1330,node_284,node_256,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1330);  CNaviViewNode.link(node_284,node_256);  node_284.addOutgoingEdge(edge_1330);  node_256.addIncomingEdge(edge_1330);  final CNaviViewEdge edge_1430=new CNaviViewEdge(1430,node_284,node_285,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1430);  CNaviViewNode.link(node_284,node_285);  node_284.addOutgoingEdge(edge_1430);  node_285.addIncomingEdge(edge_1430);  final CNaviViewEdge edge_1400=new CNaviViewEdge(1400,node_285,node_286,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1400);  CNaviViewNode.link(node_285,node_286);  node_285.addOutgoingEdge(edge_1400);  node_286.addIncomingEdge(edge_1400);  final CNaviViewEdge edge_1369=new CNaviViewEdge(1369,node_286,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1369);  CNaviViewNode.link(node_286,node_340);  node_286.addOutgoingEdge(edge_1369);  node_340.addIncomingEdge(edge_1369);  final CNaviViewEdge edge_1352=new CNaviViewEdge(1352,node_287,node_288,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1352);  CNaviViewNode.link(node_287,node_288);  node_287.addOutgoingEdge(edge_1352);  node_288.addIncomingEdge(edge_1352);  final CNaviViewEdge edge_1350=new CNaviViewEdge(1350,node_288,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1350);  CNaviViewNode.link(node_288,node_340);  node_288.addOutgoingEdge(edge_1350);  node_340.addIncomingEdge(edge_1350);  final CNaviViewEdge edge_1358=new CNaviViewEdge(1358,node_289,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1358);  CNaviViewNode.link(node_289,node_340);  node_289.addOutgoingEdge(edge_1358);  node_340.addIncomingEdge(edge_1358);  final CNaviViewEdge edge_1288=new CNaviViewEdge(1288,node_290,node_291,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1288);  CNaviViewNode.link(node_290,node_291);  node_290.addOutgoingEdge(edge_1288);  node_291.addIncomingEdge(edge_1288);  final CNaviViewEdge edge_1418=new CNaviViewEdge(1418,node_290,node_309,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1418);  CNaviViewNode.link(node_290,node_309);  node_290.addOutgoingEdge(edge_1418);  node_309.addIncomingEdge(edge_1418);  final CNaviViewEdge edge_1347=new CNaviViewEdge(1347,node_291,node_308,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1347);  CNaviViewNode.link(node_291,node_308);  node_291.addOutgoingEdge(edge_1347);  node_308.addIncomingEdge(edge_1347);  final CNaviViewEdge edge_1384=new CNaviViewEdge(1384,node_291,node_292,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1384);  CNaviViewNode.link(node_291,node_292);  node_291.addOutgoingEdge(edge_1384);  node_292.addIncomingEdge(edge_1384);  final CNaviViewEdge edge_1305=new CNaviViewEdge(1305,node_292,node_304,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1305);  CNaviViewNode.link(node_292,node_304);  node_292.addOutgoingEdge(edge_1305);  node_304.addIncomingEdge(edge_1305);  final CNaviViewEdge edge_1373=new CNaviViewEdge(1373,node_292,node_293,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1373);  CNaviViewNode.link(node_292,node_293);  node_292.addOutgoingEdge(edge_1373);  node_293.addIncomingEdge(edge_1373);  final CNaviViewEdge edge_1289=new CNaviViewEdge(1289,node_293,node_300,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1289);  CNaviViewNode.link(node_293,node_300);  node_293.addOutgoingEdge(edge_1289);  node_300.addIncomingEdge(edge_1289);  final CNaviViewEdge edge_1392=new CNaviViewEdge(1392,node_293,node_294,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1392);  CNaviViewNode.link(node_293,node_294);  node_293.addOutgoingEdge(edge_1392);  node_294.addIncomingEdge(edge_1392);  final CNaviViewEdge edge_1295=new CNaviViewEdge(1295,node_294,node_295,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1295);  CNaviViewNode.link(node_294,node_295);  node_294.addOutgoingEdge(edge_1295);  node_295.addIncomingEdge(edge_1295);  final CNaviViewEdge edge_1388=new CNaviViewEdge(1388,node_294,node_298,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1388);  CNaviViewNode.link(node_294,node_298);  node_294.addOutgoingEdge(edge_1388);  node_298.addIncomingEdge(edge_1388);  final CNaviViewEdge edge_1370=new CNaviViewEdge(1370,node_295,node_296,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1370);  CNaviViewNode.link(node_295,node_296);  node_295.addOutgoingEdge(edge_1370);  node_296.addIncomingEdge(edge_1370);  final CNaviViewEdge edge_1382=new CNaviViewEdge(1382,node_295,node_256,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1382);  CNaviViewNode.link(node_295,node_256);  node_295.addOutgoingEdge(edge_1382);  node_256.addIncomingEdge(edge_1382);  final CNaviViewEdge edge_1285=new CNaviViewEdge(1285,node_296,node_297,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1285);  CNaviViewNode.link(node_296,node_297);  node_296.addOutgoingEdge(edge_1285);  node_297.addIncomingEdge(edge_1285);  final CNaviViewEdge edge_1315=new CNaviViewEdge(1315,node_297,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1315);  CNaviViewNode.link(node_297,node_340);  node_297.addOutgoingEdge(edge_1315);  node_340.addIncomingEdge(edge_1315);  final CNaviViewEdge edge_1286=new CNaviViewEdge(1286,node_298,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1286);  CNaviViewNode.link(node_298,node_340);  node_298.addOutgoingEdge(edge_1286);  node_340.addIncomingEdge(edge_1286);  final CNaviViewEdge edge_1395=new CNaviViewEdge(1395,node_298,node_299,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1395);  CNaviViewNode.link(node_298,node_299);  node_298.addOutgoingEdge(edge_1395);  node_299.addIncomingEdge(edge_1395);  final CNaviViewEdge edge_1339=new CNaviViewEdge(1339,node_299,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1339);  CNaviViewNode.link(node_299,node_340);  node_299.addOutgoingEdge(edge_1339);  node_340.addIncomingEdge(edge_1339);  final CNaviViewEdge edge_1351=new CNaviViewEdge(1351,node_300,node_302,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1351);  CNaviViewNode.link(node_300,node_302);  node_300.addOutgoingEdge(edge_1351);  node_302.addIncomingEdge(edge_1351);  final CNaviViewEdge edge_1376=new CNaviViewEdge(1376,node_300,node_301,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1376);  CNaviViewNode.link(node_300,node_301);  node_300.addOutgoingEdge(edge_1376);  node_301.addIncomingEdge(edge_1376);  final CNaviViewEdge edge_1419=new CNaviViewEdge(1419,node_301,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1419);  CNaviViewNode.link(node_301,node_340);  node_301.addOutgoingEdge(edge_1419);  node_340.addIncomingEdge(edge_1419);  final CNaviViewEdge edge_1406=new CNaviViewEdge(1406,node_302,node_303,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1406);  CNaviViewNode.link(node_302,node_303);  node_302.addOutgoingEdge(edge_1406);  node_303.addIncomingEdge(edge_1406);  final CNaviViewEdge edge_1403=new CNaviViewEdge(1403,node_303,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1403);  CNaviViewNode.link(node_303,node_340);  node_303.addOutgoingEdge(edge_1403);  node_340.addIncomingEdge(edge_1403);  final CNaviViewEdge edge_1397=new CNaviViewEdge(1397,node_304,node_305,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1397);  CNaviViewNode.link(node_304,node_305);  node_304.addOutgoingEdge(edge_1397);  node_305.addIncomingEdge(edge_1397);  final CNaviViewEdge edge_1424=new CNaviViewEdge(1424,node_304,node_306,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1424);  CNaviViewNode.link(node_304,node_306);  node_304.addOutgoingEdge(edge_1424);  node_306.addIncomingEdge(edge_1424);  final CNaviViewEdge edge_1385=new CNaviViewEdge(1385,node_305,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1385);  CNaviViewNode.link(node_305,node_340);  node_305.addOutgoingEdge(edge_1385);  node_340.addIncomingEdge(edge_1385);  final CNaviViewEdge edge_1304=new CNaviViewEdge(1304,node_306,node_307,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1304);  CNaviViewNode.link(node_306,node_307);  node_306.addOutgoingEdge(edge_1304);  node_307.addIncomingEdge(edge_1304);  final CNaviViewEdge edge_1349=new CNaviViewEdge(1349,node_306,node_301,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1349);  CNaviViewNode.link(node_306,node_301);  node_306.addOutgoingEdge(edge_1349);  node_301.addIncomingEdge(edge_1349);  final CNaviViewEdge edge_1318=new CNaviViewEdge(1318,node_307,node_303,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1318);  CNaviViewNode.link(node_307,node_303);  node_307.addOutgoingEdge(edge_1318);  node_303.addIncomingEdge(edge_1318);  final CNaviViewEdge edge_1398=new CNaviViewEdge(1398,node_308,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1398);  CNaviViewNode.link(node_308,node_340);  node_308.addOutgoingEdge(edge_1398);  node_340.addIncomingEdge(edge_1398);  final CNaviViewEdge edge_1329=new CNaviViewEdge(1329,node_309,node_326,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1329);  CNaviViewNode.link(node_309,node_326);  node_309.addOutgoingEdge(edge_1329);  node_326.addIncomingEdge(edge_1329);  final CNaviViewEdge edge_1363=new CNaviViewEdge(1363,node_309,node_310,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1363);  CNaviViewNode.link(node_309,node_310);  node_309.addOutgoingEdge(edge_1363);  node_310.addIncomingEdge(edge_1363);  final CNaviViewEdge edge_1293=new CNaviViewEdge(1293,node_310,node_311,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1293);  CNaviViewNode.link(node_310,node_311);  node_310.addOutgoingEdge(edge_1293);  node_311.addIncomingEdge(edge_1293);  final CNaviViewEdge edge_1383=new CNaviViewEdge(1383,node_310,node_317,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1383);  CNaviViewNode.link(node_310,node_317);  node_310.addOutgoingEdge(edge_1383);  node_317.addIncomingEdge(edge_1383);  final CNaviViewEdge edge_1327=new CNaviViewEdge(1327,node_311,node_312,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1327);  CNaviViewNode.link(node_311,node_312);  node_311.addOutgoingEdge(edge_1327);  node_312.addIncomingEdge(edge_1327);  final CNaviViewEdge edge_1417=new CNaviViewEdge(1417,node_311,node_256,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1417);  CNaviViewNode.link(node_311,node_256);  node_311.addOutgoingEdge(edge_1417);  node_256.addIncomingEdge(edge_1417);  final CNaviViewEdge edge_1313=new CNaviViewEdge(1313,node_312,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1313);  CNaviViewNode.link(node_312,node_340);  node_312.addOutgoingEdge(edge_1313);  node_340.addIncomingEdge(edge_1313);  final CNaviViewEdge edge_1323=new CNaviViewEdge(1323,node_312,node_313,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1323);  CNaviViewNode.link(node_312,node_313);  node_312.addOutgoingEdge(edge_1323);  node_313.addIncomingEdge(edge_1323);  final CNaviViewEdge edge_1345=new CNaviViewEdge(1345,node_313,node_314,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1345);  CNaviViewNode.link(node_313,node_314);  node_313.addOutgoingEdge(edge_1345);  node_314.addIncomingEdge(edge_1345);  final CNaviViewEdge edge_1377=new CNaviViewEdge(1377,node_313,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1377);  CNaviViewNode.link(node_313,node_340);  node_313.addOutgoingEdge(edge_1377);  node_340.addIncomingEdge(edge_1377);  final CNaviViewEdge edge_1316=new CNaviViewEdge(1316,node_314,node_316,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1316);  CNaviViewNode.link(node_314,node_316);  node_314.addOutgoingEdge(edge_1316);  node_316.addIncomingEdge(edge_1316);  final CNaviViewEdge edge_1366=new CNaviViewEdge(1366,node_314,node_315,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1366);  CNaviViewNode.link(node_314,node_315);  node_314.addOutgoingEdge(edge_1366);  node_315.addIncomingEdge(edge_1366);  final CNaviViewEdge edge_1431=new CNaviViewEdge(1431,node_315,node_316,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1431);  CNaviViewNode.link(node_315,node_316);  node_315.addOutgoingEdge(edge_1431);  node_316.addIncomingEdge(edge_1431);  final CNaviViewEdge edge_1390=new CNaviViewEdge(1390,node_316,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1390);  CNaviViewNode.link(node_316,node_340);  node_316.addOutgoingEdge(edge_1390);  node_340.addIncomingEdge(edge_1390);  final CNaviViewEdge edge_1374=new CNaviViewEdge(1374,node_317,node_318,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1374);  CNaviViewNode.link(node_317,node_318);  node_317.addOutgoingEdge(edge_1374);  node_318.addIncomingEdge(edge_1374);  final CNaviViewEdge edge_1426=new CNaviViewEdge(1426,node_317,node_319,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1426);  CNaviViewNode.link(node_317,node_319);  node_317.addOutgoingEdge(edge_1426);  node_319.addIncomingEdge(edge_1426);  final CNaviViewEdge edge_1302=new CNaviViewEdge(1302,node_318,node_320,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1302);  CNaviViewNode.link(node_318,node_320);  node_318.addOutgoingEdge(edge_1302);  node_320.addIncomingEdge(edge_1302);  final CNaviViewEdge edge_1399=new CNaviViewEdge(1399,node_319,node_320,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1399);  CNaviViewNode.link(node_319,node_320);  node_319.addOutgoingEdge(edge_1399);  node_320.addIncomingEdge(edge_1399);  final CNaviViewEdge edge_1338=new CNaviViewEdge(1338,node_320,node_324,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1338);  CNaviViewNode.link(node_320,node_324);  node_320.addOutgoingEdge(edge_1338);  node_324.addIncomingEdge(edge_1338);  final CNaviViewEdge edge_1416=new CNaviViewEdge(1416,node_320,node_321,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1416);  CNaviViewNode.link(node_320,node_321);  node_320.addOutgoingEdge(edge_1416);  node_321.addIncomingEdge(edge_1416);  final CNaviViewEdge edge_1356=new CNaviViewEdge(1356,node_321,node_322,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1356);  CNaviViewNode.link(node_321,node_322);  node_321.addOutgoingEdge(edge_1356);  node_322.addIncomingEdge(edge_1356);  final CNaviViewEdge edge_1372=new CNaviViewEdge(1372,node_321,node_323,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1372);  CNaviViewNode.link(node_321,node_323);  node_321.addOutgoingEdge(edge_1372);  node_323.addIncomingEdge(edge_1372);  final CNaviViewEdge edge_1401=new CNaviViewEdge(1401,node_322,node_323,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1401);  CNaviViewNode.link(node_322,node_323);  node_322.addOutgoingEdge(edge_1401);  node_323.addIncomingEdge(edge_1401);  final CNaviViewEdge edge_1325=new CNaviViewEdge(1325,node_323,node_297,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1325);  CNaviViewNode.link(node_323,node_297);  node_323.addOutgoingEdge(edge_1325);  node_297.addIncomingEdge(edge_1325);  final CNaviViewEdge edge_1337=new CNaviViewEdge(1337,node_324,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1337);  CNaviViewNode.link(node_324,node_340);  node_324.addOutgoingEdge(edge_1337);  node_340.addIncomingEdge(edge_1337);  final CNaviViewEdge edge_1429=new CNaviViewEdge(1429,node_324,node_325,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1429);  CNaviViewNode.link(node_324,node_325);  node_324.addOutgoingEdge(edge_1429);  node_325.addIncomingEdge(edge_1429);  final CNaviViewEdge edge_1348=new CNaviViewEdge(1348,node_325,node_286,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1348);  CNaviViewNode.link(node_325,node_286);  node_325.addOutgoingEdge(edge_1348);  node_286.addIncomingEdge(edge_1348);  final CNaviViewEdge edge_1284=new CNaviViewEdge(1284,node_326,node_328,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1284);  CNaviViewNode.link(node_326,node_328);  node_326.addOutgoingEdge(edge_1284);  node_328.addIncomingEdge(edge_1284);  final CNaviViewEdge edge_1342=new CNaviViewEdge(1342,node_326,node_327,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1342);  CNaviViewNode.link(node_326,node_327);  node_326.addOutgoingEdge(edge_1342);  node_327.addIncomingEdge(edge_1342);  final CNaviViewEdge edge_1393=new CNaviViewEdge(1393,node_327,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1393);  CNaviViewNode.link(node_327,node_340);  node_327.addOutgoingEdge(edge_1393);  node_340.addIncomingEdge(edge_1393);  final CNaviViewEdge edge_1433=new CNaviViewEdge(1433,node_328,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1433);  CNaviViewNode.link(node_328,node_340);  node_328.addOutgoingEdge(edge_1433);  node_340.addIncomingEdge(edge_1433);  final CNaviViewEdge edge_1394=new CNaviViewEdge(1394,node_329,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1394);  CNaviViewNode.link(node_329,node_340);  node_329.addOutgoingEdge(edge_1394);  node_340.addIncomingEdge(edge_1394);  final CNaviViewEdge edge_1298=new CNaviViewEdge(1298,node_330,node_331,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1298);  CNaviViewNode.link(node_330,node_331);  node_330.addOutgoingEdge(edge_1298);  node_331.addIncomingEdge(edge_1298);  final CNaviViewEdge edge_1367=new CNaviViewEdge(1367,node_330,node_339,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1367);  CNaviViewNode.link(node_330,node_339);  node_330.addOutgoingEdge(edge_1367);  node_339.addIncomingEdge(edge_1367);  final CNaviViewEdge edge_1365=new CNaviViewEdge(1365,node_331,node_256,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1365);  CNaviViewNode.link(node_331,node_256);  node_331.addOutgoingEdge(edge_1365);  node_256.addIncomingEdge(edge_1365);  final CNaviViewEdge edge_1413=new CNaviViewEdge(1413,node_331,node_332,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1413);  CNaviViewNode.link(node_331,node_332);  node_331.addOutgoingEdge(edge_1413);  node_332.addIncomingEdge(edge_1413);  final CNaviViewEdge edge_1319=new CNaviViewEdge(1319,node_332,node_333,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1319);  CNaviViewNode.link(node_332,node_333);  node_332.addOutgoingEdge(edge_1319);  node_333.addIncomingEdge(edge_1319);  final CNaviViewEdge edge_1357=new CNaviViewEdge(1357,node_332,node_335,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1357);  CNaviViewNode.link(node_332,node_335);  node_332.addOutgoingEdge(edge_1357);  node_335.addIncomingEdge(edge_1357);  final CNaviViewEdge edge_1336=new CNaviViewEdge(1336,node_333,node_336,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1336);  CNaviViewNode.link(node_333,node_336);  node_333.addOutgoingEdge(edge_1336);  node_336.addIncomingEdge(edge_1336);  final CNaviViewEdge edge_1381=new CNaviViewEdge(1381,node_333,node_334,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1381);  CNaviViewNode.link(node_333,node_334);  node_333.addOutgoingEdge(edge_1381);  node_334.addIncomingEdge(edge_1381);  final CNaviViewEdge edge_1310=new CNaviViewEdge(1310,node_334,node_335,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1310);  CNaviViewNode.link(node_334,node_335);  node_334.addOutgoingEdge(edge_1310);  node_335.addIncomingEdge(edge_1310);  final CNaviViewEdge edge_1421=new CNaviViewEdge(1421,node_334,node_256,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1421);  CNaviViewNode.link(node_334,node_256);  node_334.addOutgoingEdge(edge_1421);  node_256.addIncomingEdge(edge_1421);  final CNaviViewEdge edge_1321=new CNaviViewEdge(1321,node_335,node_336,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1321);  CNaviViewNode.link(node_335,node_336);  node_335.addOutgoingEdge(edge_1321);  node_336.addIncomingEdge(edge_1321);  final CNaviViewEdge edge_1407=new CNaviViewEdge(1407,node_335,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1407);  CNaviViewNode.link(node_335,node_340);  node_335.addOutgoingEdge(edge_1407);  node_340.addIncomingEdge(edge_1407);  final CNaviViewEdge edge_1291=new CNaviViewEdge(1291,node_336,node_337,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1291);  CNaviViewNode.link(node_336,node_337);  node_336.addOutgoingEdge(edge_1291);  node_337.addIncomingEdge(edge_1291);  final CNaviViewEdge edge_1371=new CNaviViewEdge(1371,node_336,node_338,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1371);  CNaviViewNode.link(node_336,node_338);  node_336.addOutgoingEdge(edge_1371);  node_338.addIncomingEdge(edge_1371);  final CNaviViewEdge edge_1361=new CNaviViewEdge(1361,node_337,node_340,EdgeType.JUMP_CONDITIONAL_TRUE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1361);  CNaviViewNode.link(node_337,node_340);  node_337.addOutgoingEdge(edge_1361);  node_340.addIncomingEdge(edge_1361);  final CNaviViewEdge edge_1387=new CNaviViewEdge(1387,node_337,node_338,EdgeType.JUMP_CONDITIONAL_FALSE,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1387);  CNaviViewNode.link(node_337,node_338);  node_337.addOutgoingEdge(edge_1387);  node_338.addIncomingEdge(edge_1387);  final CNaviViewEdge edge_1360=new CNaviViewEdge(1360,node_338,node_288,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1360);  CNaviViewNode.link(node_338,node_288);  node_338.addOutgoingEdge(edge_1360);  node_288.addIncomingEdge(edge_1360);  final CNaviViewEdge edge_1402=new CNaviViewEdge(1402,node_339,node_340,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1402);  CNaviViewNode.link(node_339,node_340);  node_339.addOutgoingEdge(edge_1402);  node_340.addIncomingEdge(edge_1402);  final CNaviViewEdge edge_1306=new CNaviViewEdge(1306,node_340,node_341,EdgeType.JUMP_UNCONDITIONAL,0,0,0,0,Color.BLACK,false,true,null,new ArrayList<CBend>(),provider);  edges.add(edge_1306);  CNaviViewNode.link(node_340,node_341);  node_340.addOutgoingEdge(edge_1306);  node_341.addIncomingEdge(edge_1306);  return new MockView(nodes,edges,provider);}  }
class C{  public IMethod findOverriddenMethodInHierarchy(IType type,IMethod overriding) throws JavaModelException {  IMethod method=findOverriddenMethodInType(type,overriding);  if (method != null) {    return method;  }  IType superClass=fHierarchy.getSuperclass(type);  if (superClass != null) {    IMethod res=findOverriddenMethodInHierarchy(superClass,overriding);    if (res != null) {      return res;    }  }  IType[] superInterfaces=fHierarchy.getSuperInterfaces(type);  for (int i=0; i < superInterfaces.length; i++) {    IMethod res=findOverriddenMethodInHierarchy(superInterfaces[i],overriding);    if (res != null) {      return res;    }  }  return method;}  }
class C{  public void testShingleAnalyzer() throws Exception {  String text="one,two,three, four five six";  Benchmark benchmark=execBenchmark(getAnalyzerFactoryConfig("shingle-analyzer","StandardTokenizer,ShingleFilter"));  benchmark.getRunData().getAnalyzer().tokenStream("bogus",text).close();  BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(),text,new String[]{"one","one two","two","two three","three","three four","four","four five","five","five six","six"});  benchmark=execBenchmark(getAnalyzerFactoryConfig("shingle-analyzer","StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)"));  BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(),text,new String[]{"one two","one two three","two three","two three four","three four","three four five","four five","four five six","five six"});  benchmark=execBenchmark(getAnalyzerFactoryConfig("shingle-analyzer","WhitespaceTokenizer,ShingleFilter"));  BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(),text,new String[]{"one,two,three,","one,two,three, four","four","four five","five","five six","six"});  benchmark=execBenchmark(getAnalyzerFactoryConfig("shingle-factory","WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)"));  BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(),text,new String[]{"one,two,three, four","one,two,three, four five","four five","four five six","five six"});}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public RandomAccessStream openRandomAccess() throws IOException {  return new SpyRandomAccessStream(getWrappedPath().openRandomAccess());}  }
class C{  public Set<WampRoles> routerRoles(){  return EnumSet.copyOf(routerRoles);}  }
class C{  public V2 addAction(int icon,CharSequence title,Action.OnActionListener listener,ComponentName activity,ComponentName service,String broadcast,Bundle extra){  N.addAction(icon,title,listener,activity,service,broadcast,extra);  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static void main(String[] args){  try {    BIFReader br=new BIFReader();    br.processFile(args[0]);    System.out.println(br.toString());  } catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public static String toJSONString(Map map){  if (map == null)   return "null";  StringBuffer sb=new StringBuffer();  boolean first=true;  Iterator iter=map.entrySet().iterator();  sb.append('{');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Map.Entry entry=(Map.Entry)iter.next();    toJSONString(String.valueOf(entry.getKey()),entry.getValue(),sb);  }  sb.append('}');  return sb.toString();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean hasReadOnly(){  return getReadOnly() != null;}  }
class C{  private void notifyListener(int evtType,@Nullable String spaceName){  SwapSpaceSpiListener lsnr=evictLsnr;  if (lsnr != null)   lsnr.onSwapEvent(evtType,spaceName,null,null);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @Override public Instances defineDataFormat() throws Exception {  Instances dataset;  Random random=new Random(getSeed());  setRandom(random);  m_DecisionList=new ArrayList<RuleList>();  setNumExamplesAct(getNumExamples());  dataset=defineDataset(random);  return dataset;}  }
class C{  public Map<String,String[]> highlightFields(String fieldsIn[],Query query,IndexSearcher searcher,int[] docidsIn,int maxPassagesIn[]) throws IOException {  Map<String,String[]> snippets=new HashMap<>();  for (  Map.Entry<String,Object[]> ent : highlightFieldsAsObjects(fieldsIn,query,searcher,docidsIn,maxPassagesIn).entrySet()) {    Object[] snippetObjects=ent.getValue();    String[] snippetStrings=new String[snippetObjects.length];    snippets.put(ent.getKey(),snippetStrings);    for (int i=0; i < snippetObjects.length; i++) {      Object snippet=snippetObjects[i];      if (snippet != null) {        snippetStrings[i]=snippet.toString();      }    }  }  return snippets;}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  public Object call(final Object... params){  try {    return this.method.invoke(null,params);  } catch (  final Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.809 -0500",hash_original_method="32BB697A91610539031004A9D01C7415",hash_generated_method="C20887799A1024B2412D6C97883B5DAB") public void startDocument() throws SAXException {  if (documentHandler != null)   documentHandler.startDocument();}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=this.count;  if (remaining == 0) {    return ByteArrayOutputStream.EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : this.buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public void testRelationshipSetMatcherGetDisplayName(){  String name="Containers";  MultipleDirectedRelationFinder multipleFinder=new MultipleDirectedRelationFinder();  RelationshipSetAdapter setAdapter=new RelationshipSetAdapter(name,multipleFinder,relations);  assertEquals(name,setAdapter.getDisplayName());}  }
class C{  public TerminalSize withRelativeColumns(int delta){  if (delta == 0) {    return this;  }  return withColumns(columns + delta);}  }
class C{  private static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegSign=false;  for (; currentIndex < s.length(); currentIndex++) {    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start) {    foundSeparator=true;    result.mEndWithNegSign=true;  }break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  public boolean userCanDeleteDir(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int parentId;  int parentDirMgrId=Defs.NULL_ID;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),table.getLoadNodeDirQual(dirId));    if (parentId == Defs.ROOT_DIR_ID)     parentDirMgrId=0; else     parentDirMgrId=this.getDirMgrId(parentId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_DELETE,Defs.NULL_ID,parentDirMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  @NotNull public static Output runInPath(@Nullable final Project project,@Nullable final String workingDir,final boolean showErrors,@Nullable final Map<String,String> envs,@NotNull final String... command) throws ExecutionException {  final StringBuilder out=new StringBuilder();  final StringBuilder err=new StringBuilder();  Process process=createProcess(workingDir,envs,command);  final String commandLine=StringUtil.join(command," ");  final ColoredProcessHandler osProcessHandler=new ColoredProcessHandler(process,commandLine);  osProcessHandler.addProcessListener(new OutputListener(out,err));  osProcessHandler.startNotify();  ExecutionHelper.executeExternalProcess(project,osProcessHandler,new ExecutionModes.ModalProgressMode(null),commandLine);  final Output output=new Output(out.toString(),err.toString());  if (showErrors && !StringUtil.isEmpty(output.getStderr())) {    assert project != null;    final String tabName="Unknown error";    final List<Exception> errorList=new LinkedList<Exception>();    errorList.add(new Exception(output.getStderr()));    final VirtualFile executableFile=LocalFileSystem.getInstance().findFileByPath(command[0]);    ExecutionHelper.showErrors(project,errorList,tabName,executableFile);  }  return output;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  text.append("EqualFrequencyHistogram estimator\n\n" + "Bandwidth for out of range cases " + m_Width + ", total weight "+ m_SumOfWeights);  if (m_Boundaries != null) {    text.append("\nLeft boundary\tRight boundary\tWeight\n");    for (int i=0; i < m_Boundaries.length - 1; i++) {      text.append(m_Boundaries[i] + "\t" + m_Boundaries[i + 1]+ "\t"+ m_Weights[i]+ "\t"+ Math.exp(logDensity((m_Boundaries[i + 1] + m_Boundaries[i]) / 2))+ "\n");    }  }  return text.toString();}  }
class C{  @Override public ResponseFuture request(Object request) throws RemotingException {  return request(request,channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT));}  }
class C{  public synchronized CacheManager cacheManager(){  if (cacheManager == null) {    CachingProvider cachingProvider=Caching.getCachingProvider();    cacheManager=cachingProvider.getCacheManager();  }  return cacheManager;}  }
class C{  private void assertGaugeMetricsChanged(boolean allocated,boolean lost){  NamedList<Number> stats=metrics.getStatistics();  assertEquals("Buffer allocation metric not updating correctly.",allocated,isMetricPositive(stats,"buffercache.allocations"));  assertEquals("Buffer lost metric not updating correctly.",lost,isMetricPositive(stats,"buffercache.lost"));}  }
class C{  public static boolean equals(Object a,Object b){  return (a == b) || (a != null && a.equals(b));}  }
class C{  public boolean forEachKey(TFloatProcedure procedure){  return forEach(procedure);}  }
class C{  public Label findLabelText(String text){  return TestUtils.findLabelText(text);}  }
class C{  public BulkUserImportException(Reason reason,Exception cause,int lineNumber){  super("Parsing failed at line " + lineNumber,cause,new Object[]{"" + lineNumber});  bean.setReason(reason);  setMessageKey(initMessageKey(reason));}  }
class C{  private void logException(Throwable e){  exceptionLog.info(Messages.getMessage("exception00"),e);}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public String toString(){  return key + "=" + value;}  }
class C{  public SignalMastTableAction(String actionName){  super(actionName);}  }
class C{  public Boolean isSplit(){  return split;}  }
class C{  @Timed @ExceptionMetered @Path("/v2") @GET @Produces(APPLICATION_JSON) public Iterable<SanitizedSecret> secretListingV2(@Auth AutomationClient automationClient,@QueryParam("idx") Integer idx,@QueryParam("num") Integer num,@DefaultValue("true") @QueryParam("newestFirst") boolean newestFirst){  if (idx != null && num != null) {    if (idx < 0 || num < 0) {      throw new BadRequestException("Index and num must both be positive when retrieving batched secrets!");    }    return secretController.getSecretsBatched(idx,num,newestFirst);  }  return secretController.getSanitizedSecrets(null,null);}  }
class C{  public ItemStack toItemStack(){  return toItemStack(1);}  }
class C{  public ImageDescriptor createImageDescriptor(CompletionProposal proposal){  final int flags=proposal.getFlags();  ImageDescriptor descriptor;switch (proposal.getKind()) {case CompletionProposal.METHOD_DECLARATION:case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER:case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:case CompletionProposal.POTENTIAL_METHOD_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:    descriptor=JavaElementImageProvider.getMethodImageDescriptor(false,flags);  break;case CompletionProposal.TYPE_REF:switch (Signature.getTypeSignatureKind(proposal.getSignature())) {case Signature.CLASS_TYPE_SIGNATURE:  descriptor=JavaElementImageProvider.getTypeImageDescriptor(false,false,flags,false);break;case Signature.TYPE_VARIABLE_SIGNATURE:descriptor=JavaPluginImages.DESC_OBJS_TYPEVARIABLE;break;default :descriptor=null;}break;case CompletionProposal.FIELD_REF:case CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER:descriptor=JavaElementImageProvider.getFieldImageDescriptor(false,flags);break;case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:descriptor=JavaPluginImages.DESC_OBJS_LOCAL_VARIABLE;break;case CompletionProposal.PACKAGE_REF:descriptor=JavaPluginImages.DESC_OBJS_PACKAGE;break;case CompletionProposal.KEYWORD:case CompletionProposal.LABEL_REF:descriptor=null;break;case CompletionProposal.JAVADOC_METHOD_REF:case CompletionProposal.JAVADOC_TYPE_REF:case CompletionProposal.JAVADOC_FIELD_REF:case CompletionProposal.JAVADOC_VALUE_REF:case CompletionProposal.JAVADOC_BLOCK_TAG:case CompletionProposal.JAVADOC_INLINE_TAG:case CompletionProposal.JAVADOC_PARAM_REF:descriptor=JavaPluginImages.DESC_OBJS_JAVADOCTAG;break;default :descriptor=null;Assert.isTrue(false);}if (descriptor == null) return null;return decorateImageDescriptor(descriptor,proposal);}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  private DateBuilder(){  Calendar cal=Calendar.getInstance();  month=cal.get(Calendar.MONTH) + 1;  day=cal.get(Calendar.DAY_OF_MONTH);  year=cal.get(Calendar.YEAR);  hour=cal.get(Calendar.HOUR_OF_DAY);  minute=cal.get(Calendar.MINUTE);  second=cal.get(Calendar.SECOND);}  }
class C{  public static int executeUpdateEx(String sql,Object[] params,String trxName,int timeOut) throws DBException {  if (sql == null || sql.length() == 0)   throw new IllegalArgumentException("Required parameter missing - " + sql);  verifyTrx(trxName,sql);  int no=-1;  CPreparedStatement cs=ProxyFactory.newCPreparedStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,sql,trxName);  try {    setParameters(cs,params);    if (timeOut > 0)     cs.setQueryTimeout(timeOut);    no=cs.executeUpdate();    if (trxName == null) {      cs.commit();    }  } catch (  Exception e) {    throw new DBException(e);  } finally {    DB.close(cs);  }  return no;}  }
class C{  public boolean put(QuadTreeLeaf<T> leaf){  if (children == null) {    this.items.add(leaf);    if (this.items.size() == 1) {      this.allTheSamePoint=true;      this.firstLat=leaf.latitude;      this.firstLon=leaf.longitude;    } else {      if (this.firstLat != leaf.latitude || this.firstLon != leaf.longitude) {        this.allTheSamePoint=false;      }    }    if (this.items.size() > maxItems && !this.allTheSamePoint) {      split();    }    return true;  } else {    QuadTreeNode<T> node=getChild(leaf.latitude,leaf.longitude);    if (node != null) {      return node.put(leaf);    }  }  return false;}  }
class C{  public static long absoluteDayFromDateValue(long dateValue){  long y=yearFromDateValue(dateValue);  int m=monthFromDateValue(dateValue);  int d=dayFromDateValue(dateValue);  if (m <= 2) {    y--;    m+=12;  }  long a=((y * 2922L) >> 3) + DAYS_OFFSET[m - 3] + d - 719484;  if (y <= 1582 && ((y < 1582) || (m * 100 + d < 1005))) {    a+=13;  } else   if (y < 1901 || y > 2099) {    a+=(y / 400) - (y / 100) + 15;  }  return a;}  }
class C{  @Override public boolean isTextual(){  return true;}  }
class C{  private void calculateRanges(Population population){  if (population.size() < 2) {    throw new IllegalArgumentException("requires at least two solutions");  }  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    minimum[i]=Double.POSITIVE_INFINITY;    maximum[i]=Double.NEGATIVE_INFINITY;  }  for (int i=0; i < population.size(); i++) {    Solution solution=population.get(i);    if (solution.violatesConstraints()) {      continue;    }    for (int j=0; j < problem.getNumberOfObjectives(); j++) {      minimum[j]=Math.min(minimum[j],solution.getObjective(j));      maximum[j]=Math.max(maximum[j],solution.getObjective(j));    }  }}  }
class C{  public boolean deleteRows(Object[] fromRow) throws IOException {  return deleteRowsImpl(findRows(fromRow).setColumnNames(Collections.<String>emptySet()).iterator());}  }
class C{  public void logout(){  setProcessed(true);  save();  s_sessions.remove(new Integer(getAD_Session_ID()));  log.info(TimeUtil.formatElapsed(getCreated(),getUpdated()));}  }
class C{  public boolean isWon(){  Object oo=get_Value(COLUMNNAME_IsWon);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean supportsTransactions() throws SQLException {  return true;}  }
class C{  public ArrayList<WalletTableData> createWalletTableData(final BitcoinController bitcoinController,String walletFilename){  ArrayList<WalletTableData> walletData=new ArrayList<WalletTableData>();  if (walletFilename == null) {    return walletData;  }  WalletData perWalletModelData=null;  if (perWalletModelDataList != null) {    for (    WalletData loopPerWalletModelData : perWalletModelDataList) {      if (walletFilename.equals(loopPerWalletModelData.getWalletFilename())) {        perWalletModelData=loopPerWalletModelData;        break;      }    }  }  return createWalletTableData(bitcoinController,perWalletModelData);}  }
class C{  public boolean visitInstruction(ElemTemplateElement elem){  return true;}  }
class C{  public static void move(File sourceLocation,File targetLocation) throws IOException {  copyOrMove(sourceLocation,targetLocation,true);}  }
class C{  private void enumerate(EnumerationContext ctx){  logInfo("Enumerating VMs from GCP");  URI uri;  if (ctx.enumNextPageLink != null) {    uri=UriUtils.extendUriWithQuery(UriUtils.buildUri(String.format(LIST_VM_TEMPLATE_URI,ctx.projectId,ctx.zoneId)),MAX_RESULTS,VM_PAGE_SIZE,PAGE_TOKEN,ctx.enumNextPageLink);  } else {    uri=UriUtils.extendUriWithQuery(UriUtils.buildUri(String.format(LIST_VM_TEMPLATE_URI,ctx.projectId,ctx.zoneId)),MAX_RESULTS,VM_PAGE_SIZE);  }  Operation.createGet(uri).addRequestHeader(Operation.AUTHORIZATION_HEADER,AUTH_HEADER_BEARER_PREFIX + ctx.accessToken).setCompletion(null).sendWith(this);}  }
class C{  public boolean isGruuSupported(){  return readBoolean(RcsSettingsData.GRUU);}  }
class C{  @Override public boolean execute(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  String readNumber(String source,int ofs,String token,boolean adjacent){  if (adjacent) {    return source.substring(ofs,ofs + token.length());  }  int len=source.length();  for (int i=ofs; i < len; i++) {    char ch=source.charAt(i);    if (isNumeric(ch) == false) {      if (i == 0) {        return null;      }      return source.substring(ofs,i);    }  }  return source.substring(ofs);}  }
class C{  private String returnTypeFromProtoIndex(int idx){  ProtoIdItem protoId=mProtoIds[idx];  return mStrings[mTypeIds[protoId.returnTypeIdx].descriptorIdx];}  }
class C{  public Double remove(Integer key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public DateTimeFormatterBuilder appendText(DateTimeFieldType fieldType){  if (fieldType == null) {    throw new IllegalArgumentException("Field type must not be null");  }  return append0(new TextField(fieldType,false));}  }
class C{  protected static int encodeNibbleToHexAsciiCharByte(final int nibble){switch (nibble) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:    return nibble + 0x30;case 0x0A:case 0x0B:case 0x0C:case 0x0D:case 0x0E:case 0x0F:  return nibble + 0x57;default :die("illegal nibble: " + nibble);return -1;}}  }
class C{  public void displayDot(){  mDisplayWedges=false;  mSubMenu=null;  mFocusedItem=null;  invalidate();}  }
class C{  public static final Object[] filter(Object[] objects,Class<?> theClass){  Object o;  int i, k;  for (i=0, k=0; i < objects.length; i++) {    o=objects[i];    if (o.getClass() == theClass) {      objects[k]=o;      k++;    }  }  Object[] filteredObjects=objects;  if (i != k) {    filteredObjects=new IMovingAgent[k];    System.arraycopy(objects,0,filteredObjects,0,k);  }  return filteredObjects;}  }
class C{  public void showProperties(){  DataPanel panel;  ListSelectorDialog dialog;  Vector<String> props;  Instances inst;  panel=getCurrentPanel();  if (panel == null) {    return;  }  inst=panel.getInstances();  if (inst == null) {    return;  }  if (inst.classIndex() < 0) {    inst.setClassIndex(inst.numAttributes() - 1);  }  props=new Vector<String>();  props.add("Filename: " + panel.getFilename());  props.add("Relation name: " + inst.relationName());  props.add("# of instances: " + inst.numInstances());  props.add("# of attributes: " + inst.numAttributes());  props.add("Class attribute: " + inst.classAttribute().name());  props.add("# of class labels: " + inst.numClasses());  dialog=new ListSelectorDialog(getParentFrame(),new JList(props));  dialog.showDialog();}  }
class C{  public boolean isDaylightSavings(){  return daylightSavings;}  }
class C{  public SliderBridge(ConnectionRequest[] sources){  this.sources=sources;  bindProgress(sources,this);}  }
class C{  public String jobTitle(){  return jobTitle;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public OptionVarcharGUI_NB(){  initComponents();}  }
class C{  private Id<Link> createMatsimLink(Id<DgCrossingNode> toCrossingNodeId,Id<DgCommodity> comId,boolean startLink){  Id<Link> matsimLinkId=null;  try {    matsimLinkId=this.idConverter.convertToCrossingNodeId2LinkId(toCrossingNodeId);  } catch (  IllegalStateException e) {    Id<Node> matsimNodeId=this.idConverter.convertNotExpandedCrossingNodeId2NodeId(toCrossingNodeId);    Map<Id<Link>,? extends Link> inLinks=this.network.getNodes().get(matsimNodeId).getInLinks();    if (inLinks.size() == 1) {      for (      Id<Link> linkId : inLinks.keySet()) {        matsimLinkId=linkId;      }    } else {      for (      Id<Link> linkId : inLinks.keySet()) {        Integer comIntId=Integer.parseInt(comId.toString());        String comStringId=this.idPool.getStringId(comIntId);        int checkMatches=0;        if ((startLink && comStringId.startsWith(linkId.toString())) || (!startLink && comStringId.endsWith(linkId.toString()))) {          matsimLinkId=linkId;          checkMatches++;        }        if (checkMatches > 1) {          throw new RuntimeException("Number of inLinks that corresponds to the commodity id " + comIntId + " = "+ comStringId+ " should not be greater than one here!");        }        if (checkMatches == 0) {          throw new RuntimeException("No matsim link for commodity " + comIntId + " = "+ comStringId+ " was found.");        }      }    }  }  return matsimLinkId;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void addListener(String nodePattern,PerClientExternalLocationListener listener){  logger.info("Adding listener for new resource pattern " + nodePattern);  nodeWatches.put(nodePattern,new HashMap<String,PerClientExternalLocationListener>());  globalConfigHandler.addSubscriber(nodePattern,createAllClientListeners(nodePattern,listener));  clientConfigHandler.addListener(this);}  }
class C{  @Override protected String initialLogMessage(){  return "Waiting for 3 packets with jdp.name=" + connection.instanceName;}  }
class C{  public BruteForceRangeQuery(Model<SelectableMultiPoint> model){  this.model=model;}  }
class C{  @Pure public final boolean equals(@Nullable Object other){  return this == other;}  }
class C{  public IntPriorityQueue(int initialSize,Comparator<Integer> comparator,Mode fastValueRemove){  this.heap=new int[initialSize];  this.comparator=comparator;  this.size=0;  this.fastValueRemove=fastValueRemove;  valueIndexStore=null;  if (fastValueRemove == Mode.HASH)   valueIndexMap=new HashMap<Integer,Integer>(initialSize); else   if (fastValueRemove == Mode.BOUNDED) {    valueIndexStore=new int[initialSize];    Arrays.fill(valueIndexStore,-1);    valueIndexMap=null;  } else   valueIndexMap=null;}  }
class C{  @Override public Element store(Object o){  getInstance(o);  Element e=new Element("connection");  storeCommon(e,adapter);  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  public Synapse(Neuron source,Neuron target,double initialStrength){  this(source,target);  this.forceSetStrength(initialStrength);}  }
class C{  public OMGraphic generateGridObjects(Projection proj){  OMGraphicList graphiclist=new OMGraphicList();  GridData gd=getData();  if (gd instanceof GridData.Int) {    GridData.Int gdi=(GridData.Int)gd;    Point pt=new Point();    boolean major=gdi.getMajor();    int[][] data=gdi.getData();    for (int x=0; x < data.length; x++) {      for (int y=0; y < data[0].length; y++) {        if (major == COLUMN_MAJOR) {          if (renderType == RENDERTYPE_LATLON) {            pt=(Point)proj.forward(latitude + y * verticalResolution,longitude + x * horizontalResolution,pt);          } else {            pt.y=point1.y + (int)(y * verticalResolution);            pt.x=point1.x + (int)(x * horizontalResolution);          }        } else {          if (renderType == RENDERTYPE_LATLON) {            pt=(Point)proj.forward(latitude + x * verticalResolution,longitude + y * horizontalResolution,pt);          } else {            pt.y=point1.y + (int)(x * verticalResolution);            pt.x=point1.x + (int)(y * horizontalResolution);          }        }        if ((pt.x >= 0 || pt.x <= proj.getWidth()) && (pt.y >= 0 || pt.y <= proj.getHeight())) {          graphiclist.add(gridObjects.generate(data[x][y],proj));        }      }    }  }  return graphiclist;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.ENUMERATOR__OWNING_ENUMERATION:    return getOwningEnumeration();case TypesPackage.ENUMERATOR__LITERAL_VALUE:  return getLiteralValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean insertError(long where,String message){  if (errors == null || errors.where > where) {    ErrorMessage newMsg=new ErrorMessage(where,message);    newMsg.next=errors;    errors=newMsg;  } else   if (errors.where == where && errors.message.equals(message)) {    return false;  } else {    ErrorMessage current=errors;    ErrorMessage next;    while ((next=current.next) != null && next.where < where) {      current=next;    }    while ((next=current.next) != null && next.where == where) {      if (next.message.equals(message)) {        return false;      }      current=next;    }    ErrorMessage newMsg=new ErrorMessage(where,message);    newMsg.next=current.next;    current.next=newMsg;  }  return true;}  }
class C{  public Integer loadIdNameValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdNameValues");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  return new Integer(index);}  }
class C{  static ArrayListFragment newInstance(int num){  ArrayListFragment f=new ArrayListFragment();  Bundle args=new Bundle();  args.putInt("num",num + 1);  f.setArguments(args);  return f;}  }
class C{  public TimelineResult(TimelineCursor timelineCursor,List<T> items){  this.timelineCursor=timelineCursor;  this.items=items;}  }
class C{  public final synchronized String readLine(){  return readLine(-1);}  }
class C{  public Future<ReplDBMSHeader> watchForProcessedTimestamp(Timestamp timestamp,boolean terminate) throws InterruptedException {  Future<ReplDBMSHeader> watch=progressTracker.watchForProcessedTimestamp(timestamp,terminate);  notifyThreads();  return watch;}  }
class C{  RamResourceCore createCore(String path,int type) throws IOException {  String[] names=ListUtil.listToStringArray(path,'/');  RamResourceCore rrc=root;  for (int i=0; i < names.length - 1; i++) {    rrc=rrc.getChild(names[i],caseSensitive);    if (rrc == null)     throw new IOException("can't create resource " + path + ", missing parent resource");  }  rrc=new RamResourceCore(rrc,type,names[names.length - 1]);  return rrc;}  }
class C{  void scrollToChild(int i){  CarouselItemView view=(CarouselItemView)getAdapter().getView(i,null,null);  float angle=view.getCurrentAngle();  if (angle == 0)   return;  if (angle > 180.0f)   angle=360.0f - angle; else   angle=-angle;  mFlingRunnable.startUsingDistance(angle);}  }
class C{  static String encodeEntity(char ch){  for (int i=0; i < HTML_ENTITIES.length; i++) {    if (HTML_ENTITIES[i] == ch) {      return HTML_ENCODED_ENTITIES[i];    }  }  return null;}  }
class C{  protected void updateTile(DrawContext dc,ContentTile tile,Rectangle tileBounds){  int x=tileBounds.x - tile.column * this.textureTileDimension;  int y=tileBounds.y - this.contentSize.height + this.textureTileDimension * (tile.row + 1);  Rectangle scrollBounds=new Rectangle(x,y,this.contentBounds.width,this.textureTileDimension);  try {    Texture texture=dc.getTextureCache().getTexture(this.textureCacheKey);    this.rttSupport.setColorTarget(dc,texture);    this.rttSupport.clear(dc,new Color(0,0,0,0));    this.contents.renderScrollable(dc,scrollBounds.getLocation(),scrollBounds.getSize(),tileBounds);  }  finally {    this.rttSupport.setColorTarget(dc,null);  }}  }
class C{  private void init(){  retrieveViews();  setupListeners();  picasso=Picasso.with(getApplicationContext());  boolean generatedPlaylist=setupPlaylistManager();  startPlayback(generatedPlaylist);}  }
class C{  public void testAddMoney(){  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Population population=scenario.getPopulation();  Person person=PopulationUtils.getFactory().createPerson(Id.create(1,Person.class));  population.addPerson(person);  MockScoringFunctionFactory sfFactory=new MockScoringFunctionFactory();  EventsManager events=EventsUtils.createEventsManager();  EventsToScore e2s=EventsToScore.createWithoutScoreUpdating(scenario,sfFactory,events);  e2s.beginIteration(0);  events.processEvent(new PersonMoneyEvent(3600.0,person.getId(),3.4));  e2s.finish();  assertEquals(3.4,e2s.getAgentScore(person.getId()));}  }
class C{  protected QueryStorage(final AppConfiguration appConfig) throws RepositoryException, IOException {  queries=new SailRepository(new NativeStore(new File(appConfig.getDataDir(),"queries")));  queries.initialize();}  }
class C{  public void testGetContextWhenOverride(){  WAR war=new WAR("c:/some/path/to/war/test.war");  war.setContext("context");  assertEquals("context",war.getContext());}  }
class C{  public FixedClock(long startTime){  currentTime=new AtomicLong(startTime);}  }
class C{  @Override public void removeAcceptedOffer(Offer offer){  acceptedOffers.remove(offer);}  }
class C{  public void addMessageListener(MessageListener listener){  m_notifier.add(listener);}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  private void load(Player player,String input){  input+=".yml";  editedFile=new GameFile("plugins/ZombieEscape/",input);  Messages.LOADING_FILE.send(player,input);}  }
class C{  @Override public void triggerfromSearchIcon(){  actionbar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_HOME_AS_UP);  actionbar.setDisplayHomeAsUpEnabled(false);  actionbar.setDisplayShowHomeEnabled(false);  toolbar.removeAllViews();}  }
class C{  public RangeSelectorHelper withActionModeHelper(ActionModeHelper actionModeHelper){  mActionModeHelper=actionModeHelper;  return this;}  }
class C{  public boolean isFilterPresence_out(){  return filterPresence_out;}  }
class C{  private double calculateConditionalBranchColouringEM(NodeRef node,double time,double childHeight,double[] matrixElements,BranchColouring branchColouring){  double currentHeight=time + childHeight;  int nextEvent=branchColouring.getNextForwardEvent(currentHeight);  int currentColour=branchColouring.getForwardColourBelow(nextEvent - 1);  double logLikelihood=0.0;  int numEvents=0;  while (currentHeight > childHeight) {    double nextEventHeight;    if (nextEvent == branchColouring.getNumEvents() + 1) {      nextEventHeight=childHeight - 1.0;    } else {      nextEventHeight=branchColouring.getForwardTime(nextEvent);    }    double dt=currentHeight - nextEventHeight;    double totalRate, migrationRate;    if (currentColour == 0) {      totalRate=matrixElements[0] / time;      migrationRate=matrixElements[1] / time;    } else {      totalRate=matrixElements[3] / time;      migrationRate=matrixElements[2] / time;    }    if (nextEventHeight < childHeight) {      dt=currentHeight - childHeight;      logLikelihood+=-totalRate * dt;    } else {      logLikelihood+=(-totalRate * dt) + Math.log(migrationRate);      currentColour=branchColouring.getForwardColourBelow(nextEvent);      numEvents+=1;    }    currentHeight=nextEventHeight;    nextEvent+=1;  }  return logLikelihood;}  }
class C{  public Intersection(Vec4 intersectionPoint,boolean isTangent){  if (intersectionPoint == null) {    String message=Logging.getMessage("nullValue.IntersectionPointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.intersectionPoint=intersectionPoint;  this.isTangent=isTangent;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String reclassFile=null;  int row, col;  float progress=0;  double z, val;  int i;  double noData;  boolean assignMode=false;  boolean assignModeFound=false;  boolean delimiterFound=false;  double[][] reclassData=new double[0][0];  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reclassFile=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null) || (reclassFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    int numClasses=countLines(reclassFile);    DataInputStream in=null;    BufferedReader br=null;    try {      FileInputStream fstream=new FileInputStream(reclassFile);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter="\t";      if (reclassFile != null) {        String line;        String[] str;        if (!assignMode) {          reclassData=new double[3][numClasses];        } else {          reclassData=new double[2][numClasses];        }        i=0;        while ((line=br.readLine().trim()) != null) {          str=line.split(delimiter);          if (!delimiterFound) {            if (str.length < 2) {              delimiter=",";              str=line.split(delimiter);              if (str.length < 2) {                delimiter=" ";                str=line.split(delimiter);                if (str.length < 2) {                  showFeedback("No recognizable delimiter in text file. Columns must " + "be seperated by tabs, commas, or spaces.");                  return;                } else {                  delimiterFound=true;                }              } else {                delimiterFound=true;              }            } else {              delimiterFound=true;            }          }          if (!assignModeFound) {            if (str.length == 2) {              assignMode=true;            } else {              assignMode=false;            }            assignModeFound=true;          }          if (!assignMode) {            reclassData[0][i]=Double.parseDouble(str[0]);            reclassData[1][i]=Double.parseDouble(str[1]);            reclassData[2][i]=Double.parseDouble(str[2]);          } else {            reclassData[0][i]=Double.parseDouble(str[0]);            reclassData[1][i]=Double.parseDouble(str[1]);          }          i++;        }        in.close();        br.close();      }    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    }catch (    Exception e) {      System.err.println("Error: " + e.getMessage());    } finally {      try {        if (in != null || br != null) {          in.close();          br.close();        }      } catch (      java.io.IOException ex) {      }    }    if (!assignMode) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            val=noData;            for (i=0; i < numClasses; i++) {              if ((z >= reclassData[1][i]) && (z < reclassData[2][i])) {                val=reclassData[0][i];                break;              }            }            if (val != noData) {              output.setValue(row,col,val);            } else {              output.setValue(row,col,z);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            val=noData;            for (i=0; i < numClasses; i++) {              if ((z == reclassData[1][i])) {                val=reclassData[0][i];                break;              }              if (val != noData) {                output.setValue(row,col,val);              } else {                output.setValue(row,col,z);              }            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public HierarchyCache(NodeTreeProvider<T> provider,GraphModel graph){  this.provider=provider;  this.graph=graph;}  }
class C{  public static void addFileExt(String fileExt,int regLevel) throws RegisterFailedException {  String fileExtKey=getFileExtKey(fileExt,regLevel);  if (fileExtKey != null) {    regCreateKeyEx(fileExtKey,regLevel);  }}  }
class C{  protected void onSaveRingtone(Uri ringtoneUri){  persistString(ringtoneUri != null ? ringtoneUri.toString() : "");}  }
class C{  public void testLongsCount(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.longs(size).forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  public boolean canBeShortAddress(int address){  return (address <= 127);}  }
class C{  public AAAARecord(Name name,int dclass,long ttl,InetAddress address){  super(name,Type.AAAA,dclass,ttl);  if (Address.familyOf(address) != Address.IPv6)   throw new IllegalArgumentException("invalid IPv6 address");  this.address=address;}  }
class C{  public final void testHashCode() throws CertificateEncodingException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  Certificate c2=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue(c1.hashCode() == c2.hashCode());  assertFalse(c1.hashCode() == new MyCertificate("TEST_TYPE",cert.getEncoded()).hashCode());  assertFalse(c1.hashCode() == cert.hashCode());}  }
class C{  public void addShape(final GeoMembershipShape shape){  shapes.add(shape);}  }
class C{  public void runSystemJob(String jobName,List<Parameter> parameters) throws SchedulerException {  AbstractSystemJob systemJob;  try {    systemJob=(AbstractSystemJob)applicationContext.getBean(jobName);  } catch (  Exception e) {    throw new ObjectNotFoundException(String.format("System job with name \"%s\" doesn't exist.",jobName),e);  }  systemJob.validateParameters(parameters);  TriggerKey triggerKey=TriggerKey.triggerKey(jobName + AbstractSystemJob.RUN_ONCE_TRIGGER_SUFFIX);  Trigger trigger=newTrigger().withIdentity(triggerKey).forJob(jobName).usingJobData(systemJob.getJobDataMap(parameters)).startNow().build();  LOGGER.debug(String.format("schedule job with trigger: calendarName: %s, description: %s, endTime: %s, finalFireTime: %s, jobKey: %s, key: %s, " + "misfireInstruction: %s, nextFireTime: %s, previousFireTime: %s, priority: %s, startTime: %s",trigger.getCalendarName(),trigger.getDescription(),trigger.getEndTime(),trigger.getFinalFireTime(),trigger.getJobKey(),trigger.getKey(),trigger.getMisfireInstruction(),trigger.getNextFireTime(),trigger.getPreviousFireTime(),trigger.getPriority(),trigger.getStartTime()));  schedulerFactory.getScheduler().scheduleJob(trigger);}  }
class C{  public String toString(){  return detail.toString();}  }
class C{  protected boolean isDefaultSerializer(SerializationConfig config,JsonSerializer<?> ser){  return ClassUtil.isJacksonStdImpl(ser);}  }
class C{  public boolean canTerminate(){  return canTerminate;}  }
class C{  @Override public boolean evaluate(DF_LatticeCell[] operands){  DominatorCell lhs=(DominatorCell)operands[0];  IR ir=lhs.ir;  BasicBlock bb=lhs.block;  BitVector oldSet=lhs.dominators.dup();  BitVector newDominators=new BitVector(ir.getMaxBasicBlockNumber() + 1);  if (operands.length > 1) {    if (operands[1] != null) {      newDominators.or(((DominatorCell)operands[1]).dominators);    }  }  for (int i=2; i < operands.length; i++) {    newDominators.and(((DominatorCell)operands[i]).dominators);  }  newDominators.set(bb.getNumber());  lhs.dominators=newDominators;  return !lhs.dominators.equals(oldSet);}  }
class C{  public boolean isSuppressed(LintCategory lc){  return suppressedValues.contains(lc);}  }
class C{  @Override public ActionForward executeSub(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  ActionErrors errors=new ActionErrors();  String forward="readposts";  String reqCategory=cleanNull(request.getParameter("cat"));  PersonalBlogService pblog=PersonalBlogService.getInstance();  try {    if (!reqCategory.equals("")) {      request.setAttribute("posts",pblog.getPostsByCategory(reqCategory));    } else {      request.setAttribute("posts",pblog.getPosts());    }  } catch (  ServiceException e) {    ActionMessages messages=new ActionMessages();    ActionMessage message=new ActionMessage("exception.postdoesnotexist");    messages.add(ActionMessages.GLOBAL_MESSAGE,message);    errors.add(messages);    e.printStackTrace();  }  if (!errors.isEmpty()) {    saveErrors(request,errors);  }  return (mapping.findForward(forward));}  }
class C{  public void update(Graphics g){  paint(g);}  }
class C{  private static SecretKey generatePBEKey(char[] passphraseOrPin,byte[] salt,String algorthm,int iterations,int keyLength) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException {  if (iterations == 0) {    iterations=1000;  }  SecretKeyFactory secretKeyFactory=SecretKeyFactory.getInstance(algorthm,PROVIDER);  KeySpec keySpec=new PBEKeySpec(passphraseOrPin,salt,iterations,keyLength);  SecretKey secretKey=secretKeyFactory.generateSecret(keySpec);  return secretKey;}  }
class C{  public static void print(char[] board){  for (int i=0; i < board.length; i++) {    System.out.print("|" + ((getRow(i + 1) == 0) ? board[i] + "|\n" : board[i]));  }}  }
class C{  public static int EACCES(){  return Errno.EACCES.intValue();}  }
class C{  public void startLightDetection(LightListener lightListener){  startLibrarySensorDetection(new LightDetector(lightListener),lightListener);}  }
class C{  public static int convertDptoPx(Context context,final float dpValue){  final float density=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * density + 0.5f);}  }
class C{  private static boolean previousLink(BeanInstance source,BeanInstance target,int index,Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  for (int i=0; i < connections.size(); i++) {    BeanConnection bc=connections.elementAt(i);    BeanInstance compSource=bc.getSource();    BeanInstance compTarget=bc.getTarget();    if (compSource == source && compTarget == target && index < i) {      return true;    }  }  return false;}  }
class C{  public static void evaluateCircuitONOFFRatio(LogicCircuit lc){  double worst_out=Double.MAX_VALUE;  for (int out=0; out < lc.get_output_gates().size(); ++out) {    Gate output=lc.get_output_gates().get(out);    evaluateGateONOFFRatio(output);    if (output.get_scores().get_onoff_ratio() < worst_out) {      worst_out=output.get_scores().get_onoff_ratio();    }  }  lc.get_scores().set_onoff_ratio(worst_out);}  }
class C{  private void uninstallClientDecorations(JRootPane root){  uninstallBorder(root);  uninstallWindowListeners(root);  setTitlePane(root,null);  uninstallLayout(root);  int style=root.getWindowDecorationStyle();  if (style == JRootPane.NONE) {    root.repaint();    root.revalidate();  }  if (window != null) {    window.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }  window=null;}  }
class C{  private boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n){  if (n == null)   return false;  if (hi == null)   return true;  K k=n.key;  if (k == null)   return true;  int c=m.compare(k,hi);  if (c > 0 || (c == 0 && !hiInclusive))   return false;  return true;}  }
class C{  private <T extends BlockObject>void handleBlockObjects(Class<T> clazz){  URIQueryResultList queryResults=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getContainedObjectsConstraint(storageURI,clazz,STORAGE_DEVICE),queryResults);  Iterator<URI> iQueryResults=queryResults.iterator();  List<URI> blockObjectURIs=new ArrayList<URI>();  while (iQueryResults.hasNext()) {    blockObjectURIs.add(iQueryResults.next());  }  for (  URI uri : objsRequiringRefresh) {    if (URIUtil.isType(uri,clazz)) {      blockObjectURIs.add(uri);    }  }  Iterator<T> iBlockObjects=dbClient.queryIterativeObjectField(clazz,REFRESH_REQUIRED,blockObjectURIs);  List<T> objsNeedRefresh=new ArrayList<T>();  while (iBlockObjects.hasNext()) {    T blockObject=iBlockObjects.next();    if (blockObject.getRefreshRequired()) {      blockObject.setRefreshRequired(false);      objsNeedRefresh.add(blockObject);    }  }  dbClient.persistObject(objsNeedRefresh);}  }
class C{  public ISchedulingRule charsetRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return null;  return factoryFor(resource).charsetRule(resource);}  }
class C{  @Override public void reset() throws IOException {  in.reset();  lineNumber=markedLineNumber;  lastChar=markedLastChar;}  }
class C{  public boolean isInOptions(int value){  boolean isSelected=isAllItems();  if (!isSelected) {    IntervalOption intOpt;    for (int i=0; !isSelected && (i < getOptions().size()); i++) {      intOpt=(IntervalOption)getOptions().get(i);      if (intOpt.getType() == IntervalOption.SIMPLE_ITEM)       isSelected=(value == TypeConverter.toInt(((IntervalSimpleOption)intOpt).getItem(),-1)); else       isSelected=(value >= TypeConverter.toInt(((IntervalRangeOption)intOpt).getMinItem(),-1)) && (value <= TypeConverter.toInt(((IntervalRangeOption)intOpt).getMaxItem(),Integer.MAX_VALUE));    }  }  return isSelected;}  }
class C{  private void deactivateBlock(){  if ((mBlockListener != null) && (block != null)) {    block.removePropertyChangeListener(mBlockListener);  }  mBlockListener=null;}  }
class C{  @Deprecated public static <T>void awaitAll(@Nullable Collection<IgniteInternalFuture<T>> futs) throws IgniteCheckedException {  awaitAll(0,null,futs);}  }
class C{  void usage(){  System.out.println(getClass().getName() + ": [-verbose] [-nothrow] [-prompt] [test names]");  System.out.println("test names:");  Enumeration methodNames=testMethods.keys();  while (methodNames.hasMoreElements()) {    System.out.println("\t" + methodNames.nextElement());  }}  }
class C{  public boolean isActive(Object e){  return ui.isActive((Element)e);}  }
class C{  public boolean doesBucketExists(GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(genericRequest,"genericRequest");  String bucketName=genericRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  try {    getBucketAcl(new GenericRequest(bucketName));  } catch (  OSSException oe) {    if (oe.getErrorCode().equals(OSSErrorCode.NO_SUCH_BUCKET)) {      return false;    }  }catch (  Exception e) {    System.err.println("doesBucketExists " + e.getMessage());  }  return true;}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public void umulh(int size,Register dst,Register src1,Register src2){  assert size == 32 || size == 64;  if (size == 64) {    super.umulh(dst,src1,src2);  } else {    super.umaddl(dst,src1,src2,zr);    lshr(64,dst,dst,32);  }}  }
class C{  public form addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public void stateChanged(ChangeEvent e){  if (e.getSource() == m_SpinnerMaxSize.getModel()) {    trim();    validate();    caretUpdate(null);  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  EditRoomFeatureForm editRoomFeatureForm=(EditRoomFeatureForm)form;  MessageResources rsc=getResources(request);  String doit=editRoomFeatureForm.getDoit();  if (doit != null && doit.equals(rsc.getMessage("button.returnToRoomDetail"))) {    response.sendRedirect("roomDetail.do?id=" + editRoomFeatureForm.getId());    return null;  }  if (doit != null && doit.equals(rsc.getMessage("button.update"))) {    doUpdate(editRoomFeatureForm,request);    return mapping.findForward("showRoomDetail");  }  Long id=Long.valueOf(request.getParameter("id"));  LocationDAO ldao=new LocationDAO();  Location location=ldao.get(id);  if (location instanceof Room) {    Room r=(Room)location;    editRoomFeatureForm.setRoomLabel(r.getLabel());  } else   if (location instanceof NonUniversityLocation) {    NonUniversityLocation nonUnivLocation=(NonUniversityLocation)location;    editRoomFeatureForm.setRoomLabel(nonUnivLocation.getName());  } else {    ActionMessages errors=new ActionMessages();    errors.add("editRoomGroup",new ActionMessage("errors.lookup.notFound","Room Group"));    saveErrors(request,errors);  }  sessionContext.checkPermission(location,Right.RoomEditFeatures);  boolean editGlobalFeatures=sessionContext.hasPermission(location,Right.RoomEditGlobalFeatures);  for (  GlobalRoomFeature grf : RoomFeature.getAllGlobalRoomFeatures(location.getSession())) {    if (!editRoomFeatureForm.getGlobalRoomFeatureIds().contains(grf.getUniqueId().toString())) {      editRoomFeatureForm.addToGlobalRoomFeatures(grf,editGlobalFeatures,location.hasFeature(grf));    }  }  Set<Department> departments=Department.getUserDepartments(sessionContext.getUser());  for (  Department department : departments) {    for (    DepartmentRoomFeature drf : RoomFeature.getAllDepartmentRoomFeatures(department)) {      editRoomFeatureForm.addToDepartmentRoomFeatures(drf,true,location.hasFeature(drf));    }  }  for (  Department department : Department.findAllExternal(location.getSession().getUniqueId())) {    if (departments.contains(department))     continue;    for (    DepartmentRoomFeature drf : RoomFeature.getAllDepartmentRoomFeatures(department)) {      editRoomFeatureForm.addToDepartmentRoomFeatures(drf,false,location.hasFeature(drf));    }  }  return mapping.findForward("showEditRoomFeature");}  }
class C{  public boolean onBackPressed(){  if (doesDrawerExist()) {    if (mDrawer.isDrawerVisible(Gravity.START)) {      mDrawer.closeDrawer(Gravity.START);      return true;    }  }  if (mContentView.onBackPressed())   return true;  if (!mStateStack.empty()) {    mStateStack.pop();    if (!mStateStack.empty()) {      setState(mStateStack.pop());      return true;    }  }  return false;}  }
class C{  public int read(InputStream is){  init();  if (is != null) {    if (!(is instanceof BufferedInputStream))     is=new BufferedInputStream(is);    in=(BufferedInputStream)is;    readHeader();    if (!err()) {      readContents();      if (frameCount < 0) {        status=STATUS_FORMAT_ERROR;      }    }  } else {    status=STATUS_OPEN_ERROR;  }  try {    is.close();  } catch (  IOException e) {  }  return status;}  }
class C{  public boolean isStateActive(State state){switch (state) {case mainRegion_A:    return stateVector[0] == State.mainRegion_A;default :  return false;}}  }
class C{  public OnDismissWrapper(String tag,SuperToast.OnDismissListener onDismissListener){  this.mTag=tag;  this.mOnDismissListener=onDismissListener;}  }
class C{  public boolean abort() throws LoginException {  if (debug)   System.out.println("\t\t[JndiLoginModule]: " + "aborted authentication failed");  if (succeeded == false) {    return false;  } else   if (succeeded == true && commitSucceeded == false) {    succeeded=false;    cleanState();    userPrincipal=null;    UIDPrincipal=null;    GIDPrincipal=null;    supplementaryGroups=new LinkedList<UnixNumericGroupPrincipal>();  } else {    logout();  }  return true;}  }
class C{  public CallOut(Element target,Placement placement){  peer=StepPeer.newInstance();  id=getOrCreateId(target);  JsoHelper.setAttribute(peer,"id",id);  peer.setPlacement(placement.getValue());  peer.setTarget(id);}  }
class C{  public static void deleteFiles(IFolder folder,List<String> filesToRemoveList) throws CoreException {  deleteFiles(folder.getLocation().toFile(),filesToRemoveList);  folder.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.830 -0500",hash_original_method="1616136BE44E483876717F8A446FD8E6",hash_generated_method="A990924CA217DA9AB88497E28F935EE3") public void skippedEntity(String name) throws SAXException {}  }
class C{  synchronized public static String identity(){  String uniqueId="-";  try {    uniqueId+=ProfileManager.getDefault().getActiveProfile().getUniqueId();  } catch (  NullPointerException ex) {    uniqueId+=ProfileManager.createUniqueId();  }  if (instance == null) {    instance=new NodeIdentity();    log.info("Using {} as the JMRI Node identity",instance.getIdentity() + uniqueId);  }  return instance.getIdentity() + uniqueId;}  }
class C{  protected final IntConstantOperand ANDI(int i,int mask){  return IC(i & mask);}  }
class C{  private void loop(){  while (!glfwWindowShouldClose(window)) {    glfwPollEvents();    glViewport(0,0,width,height);    update();    raster();    trace();    present();    glfwSwapBuffers(window);  }}  }
class C{  public Comment addComment(String comment){  Comment prop=new Comment(comment);  addComment(prop);  return prop;}  }
class C{  public GenericFastItemAdapter<Model,Item> addModel(List<Model> models){  mItemAdapter.addModel(models);  return this;}  }
class C{  public void send(String message){}  }
class C{  int[] findNearestArea(int pixelX,int pixelY,int spanX,int spanY,View ignoreView,boolean ignoreOccupied,int[] result){  return findNearestArea(pixelX,pixelY,spanX,spanY,spanX,spanY,ignoreView,ignoreOccupied,result,null,mOccupied);}  }
class C{  public synchronized void finest(String msg,Object[] params){  LogRecord record=new LogRecord(Level.FINEST,msg);  record.setParameters(params);  log(record);}  }
class C{  public BatchFraction jdbcJobRepository(final DatasourcesFraction datasource){  return jdbcJobRepository(datasource.getKey(),datasource);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.227 -0500",hash_original_method="40543B72DB43DB0F89BABF52692EB942",hash_generated_method="8FD8A8A6BBF3AE39438B1FC3917E9E4E") public static long parseLong(String string) throws NumberFormatException {  return parseLong(string,10);}  }
class C{  public void testThreadIsInterrupted() throws Exception {  long count=0;  for (int i=0; i < 5; i++) {    logger.info("Thread. invocation count: " + count);    for (int j=0; j < 1000000; j++) {      count++;      boolean isInterrupted=true;      isInterrupted=Thread.currentThread().isInterrupted();      assertFalse(isInterrupted);    }  }}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  public AuthenticationToken removeAuthenticationToken(String host,String realm){  return this.authenticationTokens.remove(host.concat(realm));}  }
class C{  public static Link createArtificialStopFacilityLink(TransitStopFacility stopFacility,Network network,String prefix,double freespeed,Set<String> transportModes){  NetworkFactory networkFactory=network.getFactory();  Coord coord=stopFacility.getCoord();  Node dummyNode=networkFactory.createNode(Id.createNodeId(prefix + stopFacility.getId() + "_node"),coord);  Link dummyLink=networkFactory.createLink(Id.createLinkId(prefix + stopFacility.getId() + "_link"),dummyNode,dummyNode);  dummyLink.setAllowedModes(transportModes);  dummyLink.setLength(5);  dummyLink.setFreespeed(freespeed);  dummyLink.setCapacity(9999);  if (!network.getNodes().containsKey(dummyNode.getId())) {    network.addNode(dummyNode);    network.addLink(dummyLink);  }  return dummyLink;}  }
class C{  public int executeUpdate() throws GenericDataSourceException {  try {    return _ps.executeUpdate();  } catch (  SQLException sqle) {    this.checkLockWaitInfo(sqle);    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);  }}  }
class C{  @Override public void disable(int state){  final int old=mDisabled;  final int diff=state ^ old;  mDisabled=state;  if (DEBUG) {    Slog.d(TAG,String.format("disable: 0x%08x -> 0x%08x (diff: 0x%08x)",old,state,diff));  }  StringBuilder flagdbg=new StringBuilder();  flagdbg.append("disable: < ");  flagdbg.append(((state & StatusBarManager.DISABLE_EXPAND) != 0) ? "EXPAND" : "expand");  flagdbg.append(((diff & StatusBarManager.DISABLE_EXPAND) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "ICONS" : "icons");  flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "ALERTS" : "alerts");  flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_TICKER) != 0) ? "TICKER" : "ticker");  flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_TICKER) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "SYSTEM_INFO" : "system_info");  flagdbg.append(((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_BACK) != 0) ? "BACK" : "back");  flagdbg.append(((diff & StatusBarManager.DISABLE_BACK) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_HOME) != 0) ? "HOME" : "home");  flagdbg.append(((diff & StatusBarManager.DISABLE_HOME) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_RECENT) != 0) ? "RECENT" : "recent");  flagdbg.append(((diff & StatusBarManager.DISABLE_RECENT) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_CLOCK) != 0) ? "CLOCK" : "clock");  flagdbg.append(((diff & StatusBarManager.DISABLE_CLOCK) != 0) ? "* " : " ");  flagdbg.append(((state & StatusBarManager.DISABLE_SEARCH) != 0) ? "SEARCH" : "search");  flagdbg.append(((diff & StatusBarManager.DISABLE_SEARCH) != 0) ? "* " : " ");  flagdbg.append(">");  Slog.d(TAG,flagdbg.toString());  if ((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {    mSystemIconArea.animate().cancel();    if ((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {      mSystemIconArea.animate().alpha(0f).translationY(mNaturalBarHeight * 0.5f).setDuration(175).setInterpolator(new DecelerateInterpolator(1.5f)).setListener(mMakeIconsInvisible).start();    } else {      mSystemIconArea.setVisibility(View.VISIBLE);      mSystemIconArea.animate().alpha(1f).translationY(0).setStartDelay(0).setInterpolator(new DecelerateInterpolator(1.5f)).setDuration(175).start();    }  }  if ((diff & StatusBarManager.DISABLE_CLOCK) != 0) {    boolean show=(state & StatusBarManager.DISABLE_CLOCK) == 0;    showClock(show);  }  if ((diff & StatusBarManager.DISABLE_EXPAND) != 0) {    if ((state & StatusBarManager.DISABLE_EXPAND) != 0) {      animateCollapsePanels();    }  }  if ((diff & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {    propagateDisabledFlags(state);    if ((state & StatusBarManager.DISABLE_RECENT) != 0) {      mHandler.removeMessages(MSG_CLOSE_RECENTS_PANEL);      mHandler.sendEmptyMessage(MSG_CLOSE_RECENTS_PANEL);    }  }  if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {    if ((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {      if (mTicking) {        haltTicker();      }      mNotificationIcons.animate().alpha(0f).translationY(mNaturalBarHeight * 0.5f).setDuration(175).setInterpolator(new DecelerateInterpolator(1.5f)).setListener(mMakeIconsInvisible).start();    } else {      mNotificationIcons.setVisibility(View.VISIBLE);      mNotificationIcons.animate().alpha(1f).translationY(0).setStartDelay(0).setInterpolator(new DecelerateInterpolator(1.5f)).setDuration(175).start();    }  } else   if ((diff & StatusBarManager.DISABLE_NOTIFICATION_TICKER) != 0) {    if (mTicking && (state & StatusBarManager.DISABLE_NOTIFICATION_TICKER) != 0) {      haltTicker();    }  }}  }
class C{  public static PropertyInfo decodeFromString(String stateStr) throws Exception {  if (stateStr != null) {    final String[] strings=stateStr.split(PropertyInfoExt.ENCODING_SEPARATOR);    if (strings.length == 0) {      return new PropertyInfo();    }    return new PropertyInfo(PropertyInfoUtil.splitKeyValue(strings));  }  return null;}  }
class C{  public PlainMessage(final Deserializer deserializer){  super(MessageTypes.PLAIN);  this.payload=deserializer.readBytes("payload");}  }
class C{  public static byte[] decryptKey(byte[] password,byte[] encryptedKey){  try {    Cipher c=Cipher.getInstance(ENCRYPT_KEY_ALGORITHM);    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_KEY);    return c.doFinal(encryptedKey);  } catch (  Exception e) {    throw new IllegalStateException(ENCRYPT_KEY_ALGORITHM + " is not available",e);  }}  }
class C{  public void putAll(Map<? extends K,? extends V> newData){synchronized (this) {    Map<K,V> newMap=new HashMap<K,V>(internalMap);    newMap.putAll(newData);    internalMap=newMap;  }}  }
class C{  public Builder removeUnicodeLocaleAttribute(String attribute){  try {    localeBuilder.removeUnicodeLocaleAttribute(attribute);  } catch (  LocaleSyntaxException e) {    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());  }  return this;}  }
class C{  public void detach() throws DebugException {  try {    m_debugger.detach();  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  public void compactify(){  m_Instances.trimToSize();}  }
class C{  public void replaceFile(String pathFile,String fileExt){  m_pathFile=pathFile;  m_inputStreamFile=null;  m_fileExt=fileExt;  m_isUpdateFile=true;  if (!isModified())   setEditFlag(FolderEditFlag.UPDATE);}  }
class C{  static public TRModel2D estimateBestModel(List<PointMatch> candidates,Collection<PointMatch> inliers,float min_epsilon,float max_epsilon,float min_inlier_ratio){  inliers.clear();  TRModel2D model=null;  float epsilon=0.0f;  if (candidates.size() > MIN_SET_SIZE) {    int highest_num_inliers=0;    int convergence_count=0;    TRModel2D m=null;    do {      final ArrayList<PointMatch> temp_inliers=new ArrayList<PointMatch>();      epsilon+=min_epsilon;      m=estimateModel(candidates,temp_inliers,1000,epsilon,min_inlier_ratio);      if (m != null) {        int num_inliers=temp_inliers.size();        if (num_inliers <= highest_num_inliers) {          ++convergence_count;        } else {          model=m.clone();          inliers.clear();          inliers.addAll(temp_inliers);          convergence_count=0;          highest_num_inliers=num_inliers;        }      }    } while ((m == null || convergence_count < 4) && epsilon < max_epsilon);  }  if (model == null) {  } else {  }  return model;}  }
class C{  @SuppressWarnings("deprecation") public static boolean isLightweightComponent(Component c){  return c.getPeer() instanceof LightweightPeer;}  }
class C{  public void init() throws MessagingException {  headerName=getInitParameter("headerName");  if (headerName == null || headerName.equals("")) {    throw new MessagingException("Please configure a header name to contain the classification (if any).");  }}  }
class C{  public static BoundingBox createBoundingBox(Network network){  return new BoundingBox(NetworkUtils.getBoundingBox(network.getNodes().values()));}  }
