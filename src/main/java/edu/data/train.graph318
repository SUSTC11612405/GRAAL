class C{  @Inline @Entrypoint public static void shortArrayWrite(short[] ref,int index,short value){  if (NEEDS_SHORT_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_SHORT);    Selected.Mutator.get().shortWrite(array,array.toAddress().plus(offset),value,offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String diff_text2(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.DELETE) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  public boolean canPace(){  return false;}  }
class C{  public static void sampleUsage(){  if (Debug.On && Debug.debugging("debug")) {    Debug.output("debug message");  } else {    Debug.output("try again");  }}  }
class C{  public List<ModelEntity> induceModelFromDb(Collection<String> messages){  DatabaseUtil dbUtil=new DatabaseUtil(this.helperInfo);  return dbUtil.induceModelFromDb(messages);}  }
class C{  public SampleVcpcRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  @Override public void deleteByQuery(final String querystring) throws IOException {  if (this.server == null)   return;synchronized (this.server) {    try {      this.server.deleteByQuery(querystring,-1);    } catch (    final Throwable e) {      clearCaches();      throw new IOException(e);    }  }}  }
class C{  private Object executeMultiply(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return new Double(Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getLeft(),row)) * Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getRight(),row)));}  }
class C{  public static GridFieldVO createStdField(Properties ctx,int WindowNo,int TabNo,int AD_Window_ID,int AD_Tab_ID,boolean tabReadOnly,boolean isCreated,boolean isTimestamp){  GridFieldVO vo=new GridFieldVO(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,tabReadOnly);  vo.ColumnName=isCreated ? "Created" : "Updated";  if (!isTimestamp)   vo.ColumnName+="By";  vo.displayType=isTimestamp ? DisplayType.DateTime : DisplayType.Table;  if (!isTimestamp)   vo.AD_Reference_Value_ID=110;  vo.IsDisplayed=false;  vo.IsMandatory=false;  vo.IsReadOnly=false;  vo.IsUpdateable=true;  vo.initFinish();  return vo;}  }
class C{  public void disable(){  RequestParameters params=new RequestParameters();  params.add("enable","false");  this.getServices().post(params,new StringHandle("{}"));}  }
class C{  static void checkAccess(final int access,final int possibleAccess){  if ((access & ~possibleAccess) != 0) {    throw new IllegalArgumentException("Invalid access flags: " + access);  }  int pub=(access & Opcodes.ACC_PUBLIC) == 0 ? 0 : 1;  int pri=(access & Opcodes.ACC_PRIVATE) == 0 ? 0 : 1;  int pro=(access & Opcodes.ACC_PROTECTED) == 0 ? 0 : 1;  if (pub + pri + pro > 1) {    throw new IllegalArgumentException("public private and protected are mutually exclusive: " + access);  }  int fin=(access & Opcodes.ACC_FINAL) == 0 ? 0 : 1;  int abs=(access & Opcodes.ACC_ABSTRACT) == 0 ? 0 : 1;  if (fin + abs > 1) {    throw new IllegalArgumentException("final and abstract are mutually exclusive: " + access);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void error(String msg,Object[] argArray){  innerLog(Level.ERROR,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.540 -0400",hash_original_method="BB35337BC7BD644E3E941DFC2C46EFE6",hash_generated_method="E8A574AAE6E9E708B745DBCE36CBB2E5") public static boolean equalsOnSystem(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SYSTEM);}  }
class C{  private static void deliverEvent(final NextFilter nextFilter,final IoSession session,final IoSessionEventType type,final IdleStatus status){switch (type) {case CREATED:    nextFilter.sessionCreated(session);  break;case OPENED:nextFilter.sessionOpened(session);break;case IDLE:nextFilter.sessionIdle(session,status);break;case CLOSED:nextFilter.sessionClosed(session);break;}}  }
class C{  @Path("propset") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse propset(final PropertySetRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.propset(request);}  }
class C{  public boolean replyExpected(){  return true;}  }
class C{  public synchronized void reset() throws BlockStoreException {  try {    WriteBatch batch=db.createWriteBatch();    try {      DBIterator it=db.iterator();      try {        it.seekToFirst();        while (it.hasNext())         batch.delete(it.next().getKey());        db.write(batch);      }  finally {        it.close();      }    }  finally {      batch.close();    }    initStoreIfNeeded();  } catch (  IOException e) {    throw new BlockStoreException(e);  }}  }
class C{  public static boolean equals(double[] va,double[] vb,double tolerance){  return new Property(tolerance).equals(new DenseDoubleMatrix1D(va),new DenseDoubleMatrix1D(vb));}  }
class C{  public int size(){  return n;}  }
class C{  protected void export(OMGraphicList list,List<Object> record){  export(list,record,true);}  }
class C{  @Step("Asserting element {1} is present after {2} seconds") public static void assertElementIsPresentAfter(AugmentedFunctions driver,By by,int timeoutInSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(by);  try {    driver.findElementPresentAfter(by,timeoutInSeconds);  } catch (  TimeoutException e) {    throw new AssertionError(String.format("Element %s is not present after %s seconds",by,timeoutInSeconds),e);  }}  }
class C{  public void focusGained(FocusEvent e){  super.focusGained(e);  getComponent().repaint();}  }
class C{  public static Pair<Map<LogicalVariable,LogicalVariable>,List<Pair<IOrder,Mutable<ILogicalExpression>>>> inlineAllNestedTupleSource(SubplanOperator subplanOp,IOptimizationContext context) throws AlgebricksException {  if (OperatorManipulationUtil.ancestorOfOperators(subplanOp,ImmutableSet.of(LogicalOperatorTag.NESTEDTUPLESOURCE))) {    return new Pair<Map<LogicalVariable,LogicalVariable>,List<Pair<IOrder,Mutable<ILogicalExpression>>>>(null,null);  }  InlineAllNtsInSubplanVisitor visitor=new InlineAllNtsInSubplanVisitor(context,subplanOp);  ILogicalOperator topOp=findLowestAggregate(subplanOp.getNestedPlans().get(0).getRoots().get(0)).getValue();  ILogicalOperator opToVisit=topOp.getInputs().get(0).getValue();  ILogicalOperator result=opToVisit.accept(visitor,null);  topOp.getInputs().get(0).setValue(result);  VariableUtilities.substituteVariables(topOp,visitor.getVariableMapHistory(),context);  List<Pair<IOrder,Mutable<ILogicalExpression>>> orderVars=visitor.getOrderingExpressions();  return new Pair<Map<LogicalVariable,LogicalVariable>,List<Pair<IOrder,Mutable<ILogicalExpression>>>>(visitor.getInputVariableToOutputVariableMap(),orderVars);}  }
class C{  public ResultMapping buildResultMapping(Class<?> resultType,String property,String column,Class<?> javaType,JdbcType jdbcType,String nestedSelect,String nestedResultMap,String notNullColumn,String columnPrefix,Class<? extends TypeHandler<?>> typeHandler,List<ResultFlag> flags){  return buildResultMapping(resultType,property,column,javaType,jdbcType,nestedSelect,nestedResultMap,notNullColumn,columnPrefix,typeHandler,flags,null,null,configuration.isLazyLoadingEnabled());}  }
class C{  public Object clone(){  Body b=new JimpleBody(getMethod());  b.importBodyContentsFrom(this);  return b;}  }
class C{  public boolean isDrawXValuesEnabled(){  return mDrawXVals;}  }
class C{  public CronCalendar(String expression) throws ParseException {  this(null,expression,null);}  }
class C{  public XYSeries(String title,int scaleNumber){  mTitle=title;  mScaleNumber=scaleNumber;  initRange();}  }
class C{  public final void appendPhase(LIRPhase<C> phase){  phases.add(phase);}  }
class C{  public synchronized void remove(int index){  mCategories.remove(index);  mValues.remove(index);}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  public HITS(Graph<V,E> g,double alpha){  super(g,ScoringUtils.getHITSUniformRootPrior(g.getVertices()),alpha);}  }
class C{  public static OMLine read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  private void serviceInfoToProperties(Provider.Service s){  super.put(s.type + "." + s.algorithm,s.className);  if (s.aliases != null) {    for (Iterator<String> i=s.aliases.iterator(); i.hasNext(); ) {      super.put("Alg.Alias." + s.type + "."+ i.next(),s.algorithm);    }  }  if (s.attributes != null) {    for (    Map.Entry<String,String> entry : s.attributes.entrySet()) {      super.put(s.type + "." + s.algorithm+ " "+ entry.getKey(),entry.getValue());    }  }  if (providerNumber != -1) {    Services.setNeedRefresh();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemreturnvalue.class,args);}  }
class C{  public ReadExceptionStatusRequest(){  super();  setFunctionCode(Modbus.READ_EXCEPTION_STATUS);  setDataLength(0);}  }
class C{  @Override public boolean onCommand(CommandSender sender,Command cmd,String label,String[] args){  if (isNotPermissed(sender,"nametagedit.use"))   return false;  if (args.length < 1) {    sendUsage(sender);  } else   if (args.length >= 1) {switch (args[0].toLowerCase()) {case "reload":      cmdReload(sender);    break;case "convert":  cmdConvert(sender,args);break;case "debug":handler.toggleDebug();NametagMessages.DEBUG_TOGGLED.send(sender,handler.debug() ? "&aENABLED" : "&cDISABLED");break;case "player":cmdPlayer(sender,args);break;case "group":cmdGroups(sender,args);break;default :sendUsage(sender);break;}}return false;}  }
class C{  public static String determineContentType(String accept,String serverSupportedTypes,String preferredType){  String contentType=null;  if (null == accept || null == serverSupportedTypes) {    return contentType;  }  String[][] clientContentTypes=buildTypeArrayFromString(accept);  String[][] serverContentTypes=buildTypeArrayFromString(serverSupportedTypes);  String[][] preferredContentType=buildTypeArrayFromString(preferredType);  String[][] matchedInfo=findMatch(clientContentTypes,serverContentTypes,preferredContentType);  if ((matchedInfo[0][1] != null) && !(matchedInfo[0][2].equals("*"))) {    contentType=matchedInfo[0][1] + CONTENT_TYPE_SUBTYPE_DELIMITER + matchedInfo[0][2];  }  return contentType;}  }
class C{  public <T>T notNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  db.execSQL("DROP TABLE IF EXISTS " + AcronymEntry.TABLE_NAME);  onCreate(db);}  }
class C{  protected void logMalformedCommand(String command,String path){  log(Core.ALERT.WARNING,String.format("Command \"%s\" in \"%s\" has no useable data.",command,path));}  }
class C{  public ByteVector putUTF(final String s){  int charLength=s.length();  int byteLength=0;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > 65535) {    throw new IllegalArgumentException();  }  int length=this.length;  if (length + 2 + byteLength > data.length) {    enlarge(2 + byteLength);  }  byte[] data=this.data;  data[length++]=(byte)(byteLength >>> 8);  data[length++]=(byte)(byteLength);  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[length++]=(byte)c;    } else     if (c > '\u07FF') {      data[length++]=(byte)(0xE0 | c >> 12 & 0xF);      data[length++]=(byte)(0x80 | c >> 6 & 0x3F);      data[length++]=(byte)(0x80 | c & 0x3F);    } else {      data[length++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[length++]=(byte)(0x80 | c & 0x3F);    }  }  this.length=length;  return this;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public VNXeCommandResult deleteLunGroup(String groupId,boolean isForceSnapDeletion) throws VNXeException {  StorageResourceRequest req=new StorageResourceRequest(_client);  StorageResource group=req.get(groupId);  if (group == null) {    String error="Could not find lun group: " + groupId;    _logger.error(error);    throw VNXeException.exceptions.vnxeCommandFailed(error);  }  return deleteResourceSync(groupId,isForceSnapDeletion);}  }
class C{  public static String showFileDialog(final Frame frame,final String title,String path,FilenameFilter filter,final int mode){  String fileID=null;  FileDialog fd=new FileDialog(frame,title,mode);  if (path != null) {    fd.setDirectory(path);  }  if (filter != null) {    fd.setFilenameFilter(filter);  }  fd.setVisible(true);  if (fd.getFile() != null) {    fileID=fd.getFile();    fileID=fd.getDirectory() + fileID;  }  return fileID;}  }
class C{  public void close() throws IOException {  mIsInterrupted=true;  interrupt();  if (mDatagramConnection != null) {    mDatagramConnection.close();    mDatagramConnection=null;  }}  }
class C{  void init(){  createOptimizationPlans();}  }
class C{  public AdjustmentEvent(Adjustable source,int id,int type,int value){  this(source,id,type,value,false);}  }
class C{  protected ComplexAttribute_Impl(){  super();}  }
class C{  public int size(){  return nodes.size();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.FIELD_ACCESSOR___GET_DECLARED_TYPE_REF:    return getDeclaredTypeRef();case TypesPackage.FIELD_ACCESSOR___IS_ABSTRACT:  return isAbstract();}return super.eInvoke(operationID,arguments);}  }
class C{  synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    EcosMessage m;    m=new EcosMessage("release(5,view)");    tc.sendEcosMessage(m,this);    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  @Override public ButtonViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  View v=LayoutInflater.from(parent.getContext()).inflate(R.layout.multiplechoice_button,parent,false);  ToggleButton button=(ToggleButton)v.findViewById(R.id.toggleButton);  StateListDrawable drawable=(StateListDrawable)button.getBackground();  drawable=(StateListDrawable)drawable.mutate();  button.setBackgroundDrawable(drawable.getConstantState().newDrawable());  drawable=(StateListDrawable)button.getBackground();  DrawableContainer.DrawableContainerState drawableContainerState=(DrawableContainer.DrawableContainerState)drawable.getConstantState();  for (int i=0; i < drawableContainerState.getChildren().length; i++) {    if (drawableContainerState.getChildren()[i] != null) {      drawableContainerState.getChildren()[i]=drawableContainerState.getChildren()[i].getConstantState().newDrawable().mutate();    }  }  return new ButtonViewHolder(v);}  }
class C{  private boolean handleActionShare(){  boolean handled;  try {    final Bitmap bitmap=Bitmap.createBitmap(SHARED_IMAGE_SIZE,SHARED_IMAGE_SIZE,Bitmap.Config.ARGB_8888);    final Canvas canvas=new Canvas(bitmap);    final List<ColorItem> colorItems=mPalette.getColors();    final float itemSize=canvas.getWidth() / ((float)colorItems.size());    final RectF rectF=new RectF(0,0,itemSize,canvas.getHeight());    final Paint paint=new Paint();    paint.setStyle(Paint.Style.FILL);    final StringBuilder stringBuilder=new StringBuilder();    stringBuilder.append(mPalette.getName()).append("\n").append("\n");    for (    ColorItem colorItem : colorItems) {      paint.setColor(colorItem.getColor());      canvas.drawRect(rectF,paint);      rectF.left=rectF.right;      rectF.right+=itemSize;      stringBuilder.append(colorItem.getHexString()).append("\n");    }    final ByteArrayOutputStream bytes=new ByteArrayOutputStream();    bitmap.compress(Bitmap.CompressFormat.JPEG,SHARED_IMAGE_QUALITY,bytes);    bitmap.recycle();    final File outputDirectory=new File(getFilesDir(),SHARED_DIRECTORY);    if (outputDirectory.isDirectory() || outputDirectory.mkdirs()) {      final File shareColorFile=new File(outputDirectory,SHARED_IMAGE_FILE);      final FileOutputStream fo=new FileOutputStream(shareColorFile);      fo.write(bytes.toByteArray());      fo.close();      final Uri contentUri=FileProvider.getUriForFile(this,FILE_PROVIDER_AUTHORITY,shareColorFile);      final Intent intent=new Intent(Intent.ACTION_SEND);      intent.putExtra(Intent.EXTRA_STREAM,contentUri);      intent.putExtra(Intent.EXTRA_TEXT,stringBuilder.toString());      intent.setType("image/jpeg");      intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);      startActivity(Intent.createChooser(intent,null));      handled=true;    } else {      handled=false;    }  } catch (  IOException e) {    handled=false;  }  return handled;}  }
class C{  @Override public boolean has(final byte[] termHash){  if (this.ram.has(termHash))   return true;  return this.array.has(termHash);}  }
class C{  public Swarm(boolean debugBootstrap,String... args) throws Exception {  if (System.getProperty("boot.module.loader") == null) {    System.setProperty("boot.module.loader",BootModuleLoader.class.getName());  }  if (debugBootstrap) {    Module.setModuleLogger(new StreamModuleLogger(System.err));  }  System.setProperty(SwarmInternalProperties.VERSION,VERSION);  setArgs(args);  this.debugBootstrap=debugBootstrap;  try {    Module loggingModule=Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("org.wildfly.swarm.logging","runtime"));    ClassLoader originalCl=Thread.currentThread().getContextClassLoader();    try {      Thread.currentThread().setContextClassLoader(loggingModule.getClassLoader());      System.setProperty("java.util.logging.manager","org.jboss.logmanager.LogManager");      System.setProperty("org.jboss.logmanager.configurator","org.wildfly.swarm.container.runtime.wildfly.LoggingConfigurator");      LogManager.getLogManager();      BootstrapLogger.setBackingLoggerManager(new JBossLoggingManager());    }  finally {      Thread.currentThread().setContextClassLoader(originalCl);    }  } catch (  ModuleLoadException e) {    System.err.println("[WARN] logging not available, logging will not be configured");  }  installModuleMBeanServer();  createShrinkWrapDomain();  this.commandLine=CommandLine.parse(args);  this.commandLine.apply(this);  if (!this.stageConfig.isPresent()) {    try {      String stageFile=System.getProperty(SwarmProperties.PROJECT_STAGE_FILE);      SwarmMessages.MESSAGES.stageConfigLocation(SwarmProperties.PROJECT_STAGE_FILE + " system property",stageFile);      URL url=null;      if (stageFile != null) {        url=new URL(stageFile);      } else {        try {          Module module=Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("swarm.application"));          url=module.getClassLoader().getResource("project-stages.yml");          if (url != null) {            SwarmMessages.MESSAGES.stageConfigLocation("'swarm.application' module",url.toExternalForm());          }        } catch (        ModuleLoadException e) {          e.printStackTrace();        }      }      if (url == null) {        url=ClassLoader.getSystemClassLoader().getResource("project-stages.yml");        if (url != null) {          SwarmMessages.MESSAGES.stageConfigLocation("ClassLoader",url.toExternalForm());        }      }      if (url != null) {        this.stageConfigUrl=Optional.of(url);        loadStageConfiguration(url);      }    } catch (    MalformedURLException e) {      SwarmMessages.MESSAGES.malformedStageConfigUrl(e.getMessage());    }  }}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.config(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("C_BPartner_ID")) {    int C_BPartner_ID=((Integer)e.getNewValue()).intValue();    initBPOrderDetails(C_BPartner_ID,false);  }  dialog.tableChanged(null);}  }
class C{  public TextLineEncoder(Charset charset,LineDelimiter delimiter){  if (charset == null) {    throw new IllegalArgumentException("charset");  }  if (delimiter == null) {    throw new IllegalArgumentException("delimiter");  }  if (LineDelimiter.AUTO.equals(delimiter)) {    throw new IllegalArgumentException("AUTO delimiter is not allowed for encoder.");  }  this.charset=charset;  this.delimiter=delimiter;}  }
class C{  public void testZeroOne(){  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.and(bNumber);  assertTrue(result.equals(BigInteger.ZERO));  assertEquals("incorrect sign",0,result.signum());}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  public static void updateBlock(World world,int x,int y,int z){  if (!(world.getTileEntity(x,y,z) instanceof IActiveState) || ((IActiveState)world.getTileEntity(x,y,z)).renderUpdate()) {    world.func_147479_m(x,y,z);  }  if (!(world.getTileEntity(x,y,z) instanceof IActiveState) || ((IActiveState)world.getTileEntity(x,y,z)).lightUpdate() && client.machineEffects) {    updateAllLightTypes(world,x,y,z);  }}  }
class C{  public boolean isChanged(){  return m_nCurrentEditAction != m_nSavedPointer;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  private void intersectionMatrix(int[][] res,ArrayList<int[]> partsx,ArrayList<int[]> partsy,int gridsize){  for (int x=0; x < gridsize; x++) {    final int[] px=partsx.get(x);    final int[] rowx=res[x];    for (int y=0; y < gridsize; y++) {      int[] py=partsy.get(y);      rowx[y]=intersectionSize(px,py);    }  }}  }
class C{  @Override public void removeLayoutComponent(Component comp){}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_String() throws IOException {  RandomAccessFile raf=null;  File tmpFile=new File(fileName);  try {    raf=new java.io.RandomAccessFile(fileName,"r");    fail("Test 1: FileNotFoundException expected.");  } catch (  FileNotFoundException e) {  }catch (  IllegalArgumentException e) {    fail("Test 2: Unexpected IllegalArgumentException: " + e.getMessage());  }  try {    try {      raf=new java.io.RandomAccessFile(fileName,"rwd");    } catch (    IllegalArgumentException e) {      fail("Test 3: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(fileName,"rws");    } catch (    IllegalArgumentException e) {      fail("Test 4: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(fileName,"rw");    } catch (    IllegalArgumentException e) {      fail("Test 5: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(fileName,"i");      fail("Test 6: IllegalArgumentException expected.");    } catch (    IllegalArgumentException e) {    }    raf=new java.io.RandomAccessFile(fileName,"r");    FileChannel fcr=raf.getChannel();    try {      fcr.lock(0L,Long.MAX_VALUE,false);      fail("Test 7: NonWritableChannelException expected.");    } catch (    NonWritableChannelException e) {    }  }  finally {    if (raf != null)     raf.close();    if (tmpFile.exists())     tmpFile.delete();  }}  }
class C{  public Form(){  fields=new ArrayList<Field>();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isObject(Object o){  return isComponent(o) || (!isArray(o) && !isQuery(o) && !isSimpleValue(o)&& !isStruct(o)&& !isUserDefinedFunction(o)&& !isXML(o));}  }
class C{  public void prePaint(Display d,Graphics2D g){}  }
class C{  public final byte byteValue(){  return (byte)doubleValue();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <S extends HasRowContextClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    RowContextClickEvent event=new RowContextClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void waitForOperations(){  boolean interrupted=false;  while (!executor.isShutdown()) {    try {      if (operationSemaphore.tryAcquire(maxParallelOperations,1,TimeUnit.SECONDS)) {        operationSemaphore.release(maxParallelOperations);        drainCompletions();        if (interrupted) {          Thread.currentThread().interrupt();        }        return;      }    } catch (    InterruptedException e) {      interrupted=true;    }  }}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  flushPending();  if (m_doIndent && !m_isprevtext) {    try {      outputLineSep();    } catch (    IOException e) {      throw new SAXException(e);    }  }  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  protected void installDefaults(JSeparator s){  LookAndFeel.installColors(s,"Separator.background","Separator.foreground");  LookAndFeel.installProperty(s,"opaque",Boolean.FALSE);}  }
class C{  Cell(Cell a){  ref=a.ref;  cmd=a.cmd;  cnt=a.cnt;  skip=a.skip;}  }
class C{  public static boolean isEnabled(final Resources resources,final @IntegerRes int flagResId){  Flag flag=flags.get(flagResId);  if (flag == null) {    final int value=resources.getInteger(flagResId);    flag=Flag.getValue(value);    flags.put(flagResId,flag);  }  return flag.isEnabled();}  }
class C{  public static VOUserDetails updateVOUserDetails(String[] values,List<SettingType> settingList,VOUserDetails userDetails){  for (int i=0; i < settingList.size(); i++) {    final String value=values[i];    if (value == null || value.length() == 0) {      continue;    }    if (settingList.get(i) == SettingType.LDAP_ATTR_ADDITIONAL_NAME) {      userDetails.setAdditionalName(value);    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_EMAIL) {      userDetails.setEMail(value);    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_FIRST_NAME) {      userDetails.setFirstName(value);    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_LAST_NAME) {      userDetails.setLastName(value);    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_LOCALE) {      if (value.length() > LOCAL_LENGTH) {        userDetails.setLocale(value.substring(0,LOCAL_LENGTH));      } else {        userDetails.setLocale(value);      }    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_UID) {      userDetails.setRealmUserId(value);    }  }  return userDetails;}  }
class C{  public boolean isDurable(){  String durableClientId=getDistributedMember().getDurableClientAttributes().getId();  return durableClientId != null && !(durableClientId.length() == 0);}  }
class C{  public ImageSource dimensions(int sWidth,int sHeight){  if (bitmap == null) {    this.sWidth=sWidth;    this.sHeight=sHeight;  }  setInvariants();  return this;}  }
class C{  public DelphiTreeAdaptor(ASTTree tree){  astTree=tree;}  }
class C{  private void handleActionNext(){  startServiceIntent(PlaybackService.COMMAND_NEXT);}  }
class C{  public static File createTempDir(File parent){  File temp=new File(parent,Integer.toString(Math.abs(UNSEEDED_RANDOM.nextInt()) % 1000000));  temp.delete();  temp.mkdir();  temp.deleteOnExit();  return temp;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addAll(Collections.list(super.listOptions()));  result.add(new Option("\tFull name of the associator analysed.\n" + "\teg: weka.associations.Apriori\n" + "\t(default weka.associations.Apriori)","W",1,"-W"));  if ((m_Associator != null) && (m_Associator instanceof OptionHandler)) {    result.add(new Option("","",0,"\nOptions specific to associator " + m_Associator.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Associator).listOptions()));  }  return result.elements();}  }
class C{  public String generateRankingTipText(){  return "A constant option. Ranker is only capable of generating " + " attribute rankings.";}  }
class C{  public final void clear(int index){  bits[index >>> 0x5]&=~(1 << (index & 0x1f));}  }
class C{  protected void uploadAndRegisterTestDataParents(DataBridgeWebClient dataBridgeWebClient) throws Exception {  uploadAndRegisterTestDataParent(S3_TEST_PARENT_PATH_V0,dataBridgeWebClient);  uploadAndRegisterTestDataParent(S3_TEST_PARENT_PATH_V1,dataBridgeWebClient);}  }
class C{  public Raster createChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){  return createWritableChild(x,y,width,height,x0,y0,bandList);}  }
class C{  public static void appendFinAndOpCode(ByteBuffer buffer,byte opcode,boolean fin){  byte b=0x00;  if (fin) {    b|=0x80;  }  b|=opcode & 0x0F;  buffer.put(b);}  }
class C{  public static void main(String[] args) throws Exception {  ArrayList<File> directories=new ArrayList<>();  addDirectories(directories);  makeFiles(directories);}  }
class C{  long purge(final int sampleSize){  final int limit=Math.min(sampleSize,getNumActive());  int numSamples=0;  int i=0;  final long[] samples=new long[limit];  while (numSamples < limit) {    if (isActive(i)) {      samples[numSamples]=values[i];      numSamples++;    }    i++;  }  final long val=QuickSelect.select(samples,0,numSamples - 1,limit / 2);  adjustAllValuesBy(-1 * val);  keepOnlyPositiveCounts();  return val;}  }
class C{  public BorderRectangleFigure(Border border){  this.border=border;}  }
class C{  static AclEntry parseAceString(String s,UserPrincipalLookupService lookupService){  String[] result=s.split(":");  if (result.length < 3)   usage();  int index=0;  int remaining=result.length;  boolean isGroup=false;  if (result[index].equalsIgnoreCase("user") || result[index].equalsIgnoreCase("group")) {    if (--remaining < 3)     usage();    isGroup=result[index++].equalsIgnoreCase("group");  }  String userString=result[index++];  remaining--;  String permsString=result[index++];  remaining--;  String flagsString="";  String typeString=null;  if (remaining == 1) {    typeString=result[index++];  } else {    if (remaining == 2) {      flagsString=result[index++];      typeString=result[index++];    } else {      usage();    }  }  UserPrincipal user=null;  try {    user=(isGroup) ? lookupService.lookupPrincipalByGroupName(userString) : lookupService.lookupPrincipalByName(userString);  } catch (  UserPrincipalNotFoundException x) {    System.err.format("Invalid %s '%s'\n",((isGroup) ? "group" : "user"),userString);    System.exit(-1);  }catch (  IOException x) {    System.err.format("Lookup of '%s' failed: %s\n",userString,x);    System.exit(-1);  }  Set<AclEntryPermission> perms=parsePermissions(permsString);  Set<AclEntryFlag> flags=parseFlags(flagsString);  AclEntryType type=parseType(typeString);  return AclEntry.newBuilder().setType(type).setPrincipal(user).setPermissions(perms).setFlags(flags).build();}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (eof) {    return -1;  }  if (pos >= chunkSize) {    nextChunk();    if (eof) {      return -1;    }  }  len=Math.min(len,chunkSize - pos);  int count=in.read(b,off,len);  pos+=count;  return count;}  }
class C{  public FanPane(){  getChildren().addAll(getCircle(),blades);  fan=new Timeline(new KeyFrame(Duration.millis(50),null));  fan.setCycleCount(Timeline.INDEFINITE);  fan.play();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Post from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  Properties ctx=JSPEnv.getCtx(request);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu == null) {    log.warning("No web user");    if (!response.isCommitted())     response.sendRedirect("loginServlet?ForwardTo=advertisement.jsp");    return;  }  int W_Advertisement_ID=WebUtil.getParameterAsInt(request,P_ADVERTISEMENT_ID);  MAdvertisement ad=new MAdvertisement(ctx,W_Advertisement_ID,null);  if (ad.get_ID() == 0) {    WebUtil.createForwardPage(response,"Web Advertisement Not Found","advertisements.jsp",0);    return;  }  StringBuffer info=new StringBuffer();  String Name=WebUtil.getParameter(request,"Name");  if (Name != null && Name.length() > 0 && !Name.equals(ad.getName())) {    ad.setName(Name);    info.append("Name - ");  }  String Description=WebUtil.getParameter(request,"Description");  if (Description != null && Description.length() > 0 && !Description.equals(ad.getDescription())) {    ad.setDescription(Description);    info.append("Description - ");  }  String ImageURL=null;  String AdText=WebUtil.getParameter(request,"AdText");  if (AdText != null && AdText.length() > 0 && !AdText.equals(ad.getAdText())) {    ad.setAdText(AdText);    info.append("AdText - ");  }  String ClickTargetURL=WebUtil.getParameter(request,"ClickTargetURL");  if (ClickTargetURL != null && ClickTargetURL.length() > 0 && !ClickTargetURL.equals(ad.getClickTargetURL())) {    ad.setClickTargetURL(ClickTargetURL);    info.append("ClickTargetURL - ");  }  if (info.length() > 0) {    if (ad.save())     WebUtil.createForwardPage(response,"Web Advertisement Updated: " + info.toString(),"advertisements.jsp",0); else     WebUtil.createForwardPage(response,"Web Advertisement Update Error","advertisements.jsp",0);  } else   WebUtil.createForwardPage(response,"Web Advertisement not changed","advertisements.jsp",0);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SBSC_USE_STRINGBUFFER_CONCATENATION") protected void extendElement(Element e){  SerialTrafficController tc=((CMRISystemConnectionMemo)adapter.getSystemConnectionMemo()).getTrafficController();  SerialNode node=(SerialNode)tc.getNode(0);  int index=1;  while (node != null) {    Element n=new Element("node");    n.setAttribute("name","" + node.getNodeAddress());    e.addContent(n);    n.addContent(makeParameter("nodetype","" + node.getNodeType()));    n.addContent(makeParameter("bitspercard","" + node.getNumBitsPerCard()));    n.addContent(makeParameter("transmissiondelay","" + node.getTransmissionDelay()));    n.addContent(makeParameter("num2lsearchlights","" + node.getNum2LSearchLights()));    n.addContent(makeParameter("pulsewidth","" + node.getPulseWidth()));    String value="";    for (int i=0; i < node.getLocSearchLightBits().length; i++) {      value=value + Integer.toHexString(node.getLocSearchLightBits()[i] & 0xF);    }    n.addContent(makeParameter("locsearchlightbits","" + value));    value="";    for (int i=0; i < node.getCardTypeLocation().length; i++) {      value=value + Integer.toHexString(node.getCardTypeLocation()[i] & 0xF);    }    n.addContent(makeParameter("cardtypelocation","" + value));    node=(SerialNode)tc.getNode(index);    index++;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static PropValidateChecker assertValidate(ICalProperty property){  return new PropValidateChecker(property);}  }
class C{  public T caseModel(Model object){  return null;}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  public void test_getBitsFromByteArray_correctRejection_off_and_len_01(){  BytesUtil.getBits(new byte[1],0,0);  try {    BytesUtil.getBits(new byte[1],-1,0);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  private void repaintIfBackgroundsDiffer(JComponent comp){  ComponentUI ui=(ComponentUI)comp.getClientProperty(SwingUtilities2.COMPONENT_UI_PROPERTY_KEY);  if (ui instanceof SynthUI) {    SynthUI synthUI=(SynthUI)ui;    SynthContext context=synthUI.getContext(comp);    SynthStyle style=context.getStyle();    int state=context.getComponentState();    Color currBG=style.getColor(context,ColorType.BACKGROUND);    state^=SynthConstants.FOCUSED;    context.setComponentState(state);    Color lastBG=style.getColor(context,ColorType.BACKGROUND);    state^=SynthConstants.FOCUSED;    context.setComponentState(state);    if (currBG != null && !currBG.equals(lastBG)) {      comp.repaint();    }    context.dispose();  }}  }
class C{  public T caseActivity_(Activity_ object){  return null;}  }
class C{  public static boolean checkCapability(List<Capability> devModeCapaibilityList,RequestType capabilityWeNeed){  for (  Capability c : devModeCapaibilityList) {    if (c.getCapability() == capabilityWeNeed) {      return true;    }  }  return false;}  }
class C{  public static void quaternionToDegreesXYZ(double[] q,double[] result){  double qx=q[0], qy=q[1], qz=q[2], qw=q[3];  double qw2=qw * qw;  double qx2=qx * qx;  double qy2=qy * qy;  double qz2=qz * qz;  double test=qx * qy + qz * qw;  double unit=qw2 + qx2 + qy2+ qz2;  double conv=180 / Math.PI;  if (test > 0.49999 * unit) {    result[0]=0;    result[1]=2 * Math.atan2(qx,qw) * conv;    result[2]=90;    return;  }  if (test < -0.49999 * unit) {    result[0]=0;    result[1]=-2 * Math.atan2(qx,qw) * conv;    result[2]=-90;    return;  }  result[0]=roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz,1 - 2 * qx2 - 2 * qz2) * conv);  result[1]=roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz,1 - 2 * qy2 - 2 * qz2) * conv);  result[2]=roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv);}  }
class C{  V remove(Object key,int hash,Object value){  lock();  try {    int c=cnt - 1;    HE<K,V>[] tab=table;    int index=hash & (tab.length - 1);    HE<K,V> first=tab[index];    HE<K,V> e=first;    while (e != null && (e.hash != hash || !key.equals(e.k)))     e=e.next;    V oldValue=null;    if (e != null) {      V v=e.v;      if (value == null || value.equals(v)) {        oldValue=v;        ++modCnt;        HE<K,V> newFirst=e.next;        for (HE<K,V> p=first; p != e; p=p.next)         newFirst=new HE<K,V>(p.k,p.hash,newFirst,p.v);        tab[index]=newFirst;        cnt=c;      }    }    return oldValue;  }  finally {    unlock();  }}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public final char charAt(int index){  if (index >= _length)   throw new IndexOutOfBoundsException();  return index < C1 ? _low[index] : _high[index >> B1][index & M1];}  }
class C{  @Override public Object multiLinePassword(final FormObject form){  final JPasswordField multipass;  final String textValue=form.getTextString();  final int maxLength=form.getInt(PdfDictionary.MaxLen);  if (maxLength != -1) {    multipass=new JPasswordField(textValue,maxLength);  } else {    multipass=new JPasswordField(textValue);  }  multipass.setEchoChar('*');  setupUniversalFeatures(multipass,form);  setupTextFeatures(multipass,form);  final boolean[] flags=form.getFieldFlags();  if ((flags != null) && (flags[FormObject.READONLY_ID])) {    multipass.setEditable(false);  }  setToolTip(form,multipass);  return multipass;}  }
class C{  void initDb() throws Exception {  Class.forName("org.h2.Driver");  InputStream in=getClass().getResourceAsStream("script.sql");  if (in == null) {    System.out.println("Please add the file script.sql to the classpath, package " + getClass().getPackage().getName());  } else {    Connection conn=DriverManager.getConnection("jdbc:h2:mem:test");    RunScript.execute(conn,new InputStreamReader(in));    Statement stat=conn.createStatement();    ResultSet rs=stat.executeQuery("SELECT * FROM TEST");    while (rs.next()) {      System.out.println(rs.getString(1));    }    rs.close();    stat.close();    conn.close();  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  Hashtable<String,Component> tab=new Hashtable<>();  int ncomponents=vector.size();  for (int i=0; i < ncomponents; i++) {    Card card=(Card)vector.get(i);    tab.put(card.name,card.comp);  }  ObjectOutputStream.PutField f=s.putFields();  f.put("hgap",hgap);  f.put("vgap",vgap);  f.put("vector",vector);  f.put("currentCard",currentCard);  f.put("tab",tab);  s.writeFields();}  }
class C{  public void test_encode_correctRejection(){  final TermIdEncoder encoder=new TermIdEncoder(1);  try {    encoder.encode(0L);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled()) {      log.info("Ignoring expected exception: " + ex);    }  }}  }
class C{  public ArrayTypeSpecifier createArrayTypeSpecifier(){  ArrayTypeSpecifierImpl arrayTypeSpecifier=new ArrayTypeSpecifierImpl();  return arrayTypeSpecifier;}  }
class C{  public void changeSelectedUnit(ValueChangeEvent event){  UIComponent uiComponent=event.getComponent();  if (!(uiComponent instanceof HtmlSelectOneRadio)) {    return;  }  HtmlSelectOneRadio radioBtn=(HtmlSelectOneRadio)uiComponent;  List<UIComponent> uiComponents=radioBtn.getChildren();  for (  UIComponent component : uiComponents) {    if (!(component instanceof HtmlInputHidden)) {      continue;    }    HtmlInputHidden hiddenInput=(HtmlInputHidden)component;    long unitId=((Long)hiddenInput.getValue()).longValue();    if (unitId == 0L) {      deassignUnit();      return;    }    if (Boolean.valueOf((String)event.getNewValue()).booleanValue()) {      assignToSelectedUnit(unitId);      return;    }    for (    POUserGroup unit : model.getUnits()) {      if (unit.getKey() == unitId) {        unit.setUnitSelected(false);        unit.setUnitChecked(null);      }    }  }}  }
class C{  @Override public synchronized void updateBoolean(int columnIndex,boolean x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setBoolean(columnIndex,x);  } else {    this.inserter.setBoolean(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  public static boolean isArgumentPredicate(Resource subject,Property predicate){  StmtIterator args=null;  StmtIterator classes=null;  JenaUtil.setGraphReadOptimization(true);  try {    if (SP.exists(subject.getModel())) {      Model model=predicate.getModel();      args=model.listStatements(null,SPL.predicate,predicate);      while (args.hasNext()) {        Resource arg=args.next().getSubject();        if (arg.hasProperty(RDF.type,SPL.Argument)) {          classes=model.listStatements(null,SPIN.constraint,arg);          while (classes.hasNext()) {            Resource cls=classes.next().getSubject();            if (JenaUtil.hasIndirectType(subject,cls)) {              return true;            }          }        }      }    }    return false;  }  finally {    if (classes != null) {      classes.close();    }    if (args != null) {      args.close();    }    JenaUtil.setGraphReadOptimization(false);  }}  }
class C{  public ChainingJsonWriter prettyPrint(boolean prettyPrint){  this.prettyPrint=prettyPrint;  return this;}  }
class C{  public static String parse(String[] options,char option,String defValue) throws Exception {  return parse(options,"" + option,defValue);}  }
class C{  public GenericFeed retrieveGroups(String memberName,boolean directOnly) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getFeed(new URL(baseDomainUrl + "?member=" + memberName+ "&directOnly="+ String.valueOf(directOnly)),GenericFeed.class);}  }
class C{  public boolean isGetters(){  return fGetters;}  }
class C{  public QueryBitSetProducer(Query query){  this.query=query;}  }
class C{  public int previous(){  return NativeCollation.previous(address);}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  void warning(String key,Object... args){  log.printRawLines(ownName + ": " + log.localize(PrefixKind.JAVAC,key,args));}  }
class C{  synchronized private void writeEndOfStreamMarker() throws IOException {  LogRecord endOfStreamRec=new LogRecord(DistributedLogConstants.MAX_TXID,"endOfStream".getBytes(UTF_8));  endOfStreamRec.setEndOfStream();  writeInternal(endOfStreamRec);}  }
class C{  public void addAll(Iterator<? extends Number> values){  while (values.hasNext()) {    add(values.next().doubleValue());  }}  }
class C{  public synchronized void unregister(CimConnection connection){  _connections.remove(connection.getConnectionName());  s_logger.info("Unregistered {}",connection.getConnectionName());}  }
class C{  public String makePrivate() throws Exception {  if (resource == null) {    return NOT_FOUND;  }  if (unpublish) {    if (PublicationStatus.PUBLIC == resource.getStatus() && !resource.isAlreadyAssignedDoi()) {      try {        resourceManager.visibilityToPrivate(resource,this);        addActionMessage(getText("manage.overview.changed.publication.status",new String[]{resource.getStatus().toString()}));      } catch (      InvalidConfigException e) {        LOG.error("Cant unpublish resource " + resource,e);      }    } else {      addActionWarning(getText("manage.overview.resource.invalid.operation",new String[]{resource.getShortname(),resource.getStatus().toString()}));    }  } else {    addActionWarning(getText("manage.overview.resource.invalid.operation",new String[]{resource.getShortname(),resource.getStatus().toString()}));  }  return execute();}  }
class C{  public PrinterStateReasons(){  super();}  }
class C{  public SemBicScore(ICovarianceMatrix covariances){  if (covariances == null) {    throw new NullPointerException();  }  this.setCovariances(covariances);  this.variables=covariances.getVariables();  this.sampleSize=covariances.getSampleSize();  this.penaltyDiscount=2;  logn=Math.log(sampleSize);}  }
class C{  private CBinExportInstallationChecker(){}  }
class C{  public Node addInteractionCorrelationId(String id){  this.correlationIds.add(new CorrelationIdentifier(Scope.Interaction,id));  return this;}  }
class C{  public void close(){  if (tran != null) {    tran.close();  }}  }
class C{  @ToString public String toString(){  return "P" + String.valueOf(getValue()) + "W";}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public TextEditorPane(int textMode,boolean wordWrapEnabled,FileLocation loc) throws IOException {  this(textMode,wordWrapEnabled,loc,null);}  }
class C{  private void ensureCapacity(int n){  if (n > 0 && (data == null || data.length == 0)) {    data=new String[25];  }  int max=data.length;  if (max >= n * 5) {    return;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  System.arraycopy(data,0,newData,0,length * 5);  data=newData;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private final Pair<Move,Boolean> matchingMove(int sq1,int sq2,ArrayList<Move> moves){  Move matchingMove=null;  boolean anyMatch=false;  for (  Move m : moves) {    boolean match;    if (sq1 == -1)     match=(m.from == sq2) || (m.to == sq2); else     match=(m.from == sq1) && (m.to == sq2) || (m.from == sq2) && (m.to == sq1);    if (match) {      if (matchingMove == null) {        matchingMove=m;        anyMatch=true;      } else {        if ((matchingMove.from == m.from) && (matchingMove.to == m.to)) {          matchingMove.promoteTo=Piece.EMPTY;        } else {          matchingMove=null;          break;        }      }    }  }  return new Pair<Move,Boolean>(matchingMove,anyMatch);}  }
class C{  public static String createWebXmlSource(String servletName,String servletPath,String servletQualifiedClassName){  StringBuilder sb=new StringBuilder();  sb.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");  sb.append("<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");  sb.append("xmlns=\"http://java.sun.com/xml/ns/javaee\"\n");  sb.append("xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\n");  sb.append("xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n");  sb.append("http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" version=\"2.5\">\n");  sb.append("\t<servlet>\n");  sb.append("\t\t<servlet-name>" + servletName + "</servlet-name>\n");  sb.append("\t\t<servlet-class>" + servletQualifiedClassName + "</servlet-class>\n");  sb.append("\t</servlet>\n");  sb.append("\t<servlet-mapping>\n");  sb.append("\t\t<servlet-name>" + servletName + "</servlet-name>\n");  sb.append("\t\t<url-pattern>/" + servletPath + "</url-pattern>\n");  sb.append("\t</servlet-mapping>\n");  sb.append("\t<welcome-file-list>\n");  sb.append("\t\t<welcome-file>index.html</welcome-file>\n");  sb.append("\t</welcome-file-list>\n");  sb.append("</web-app>\n");  return sb.toString();}  }
class C{  @Nullable @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static String createDistribution(String sessionID,Integer bookId,List listIdsRegister,Integer senderType,Integer senderId,Integer userType,Integer userId,String messageForUser,Locale locale,String entidad) throws BookException, DistributionException, SessionException, ValidationException {  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  Validator.validate_Integer(bookId,ValidationException.ATTRIBUTE_BOOK);  StringBuffer result=new StringBuffer();  Transaction tran=null;  try {    boolean distributionManualBookOut=Configurator.getInstance().getPropertyBoolean(ConfigurationKeys.KEY_SERVER_DISTRIBUTION_MANUAL_BOOK_OUT);    if (Repository.getInstance(entidad).isInBook(bookId).booleanValue() || (Repository.getInstance(entidad).isOutBook(bookId).booleanValue() && distributionManualBookOut)) {      Session session=HibernateUtil.currentSession(entidad);      tran=session.beginTransaction();      CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);      if (!cacheBag.containsKey(bookId)) {        throw new BookException(BookException.ERROR_BOOK_NOT_OPEN);      }      AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);      ScrOfic scrOfic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);      lockListFolderDist(session,bookId,listIdsRegister,user,entidad);      result.append(createDistribution(session,sessionID,bookId,senderType,senderId,userId,userType,messageForUser,listIdsRegister,user,scrOfic,locale,entidad));      HibernateUtil.commitTransaction(tran);    }  } catch (  BookException bE) {    HibernateUtil.rollbackTransaction(tran);    throw bE;  }catch (  SessionException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  EventException eE) {    HibernateUtil.rollbackTransaction(tran);    throw eE;  }catch (  Exception e) {    HibernateUtil.rollbackTransaction(tran);    log.error("Impossible to create distribution for the session [" + sessionID + "] and bookID ["+ bookId+ "]",e);    throw new DistributionException(DistributionException.ERROR_CANNOT_SAVE_DISTRIBUTION);  } finally {    HibernateUtil.closeSession(entidad);  }  return result.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.561 -0500",hash_original_method="315921815F3785081F27F3FE625DBCCB",hash_generated_method="AE064EEE3C35883093FB37E32995DB8A") public static final void writeIntArrayXml(int[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"int-array");  if (name != null) {    out.attribute(null,"name",name);  }  final int N=val.length;  out.attribute(null,"num",Integer.toString(N));  for (int i=0; i < N; i++) {    out.startTag(null,"item");    out.attribute(null,"value",Integer.toString(val[i]));    out.endTag(null,"item");  }  out.endTag(null,"int-array");}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  EcorePackage theEcorePackage=(EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);  initEClass(componentEClass,Component.class,"Component",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getComponent_InputComponetRefs(),this.getComponent(),null,"inputComponetRefs",null,0,-1,Component.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getComponent_OutputComponetRefs(),this.getComponent(),null,"outputComponetRefs",null,0,-1,Component.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getComponent_InputPortRefs(),this.getPort(),null,"inputPortRefs",null,0,-1,Component.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getComponent_OutputPortRefs(),this.getPort(),null,"outputPortRefs",null,0,-1,Component.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getComponent_Id(),theEcorePackage.getEString(),"id",null,0,1,Component.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getComponent_InputCnt(),theEcorePackage.getEInt(),"inputCnt","0",0,1,Component.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getComponent_OutputCnt(),theEcorePackage.getEInt(),"outputCnt","0",0,1,Component.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(portEClass,Port.class,"Port",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getPort_Id(),theEcorePackage.getEString(),"id",null,0,1,Port.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getPort_Type(),theEcorePackage.getEString(),"type",null,0,1,Port.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  createResource(eNS_URI);  createExtendedMetaDataAnnotations();}  }
class C{  private void stopSleepTimer(){  if (countDownTimer != null) {    countDownTimer.cancel();    countDownTimer=null;  }  player.setVolume(MAX_VOLUME,MAX_VOLUME);}  }
class C{  private void reset(){  this.modus=INIT;}  }
class C{  boolean containsKey(Object key,int hash){  Entry<K,V> e=find(key,hash);  return e != null && e.value != null;}  }
class C{  public String toString(int theClass){  return classes.elementAt(theClass).toString();}  }
class C{  public PdfRendererBuilder withHtmlContent(String html,String baseUri){  this._html=html;  this._baseUri=baseUri;  return this;}  }
class C{  @Override protected boolean storeFinishedWorkers(){  return _storeFinishedWorkers;}  }
class C{  public static void checkFieldLengthMaximum(final String value,final long maximum,final String fieldName){  if (value.length() > maximum) {    throw APIException.badRequests.invalidParameterLengthTooLong(fieldName,value,maximum);  }}  }
class C{  public Properties toProperties(DataSource data){  Properties properties=new Properties();  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.JNDI_LOCATION,data.getJndiLocation());  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.CONNECTION_TYPE,data.getConnectionType());  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.TRANSACTION_SUPPORT,data.getTransactionSupport());  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.DRIVER_CLASS,data.getDriverClass());  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.URL,data.getUrl());  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.USERNAME,data.getUsername());  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.PASSWORD,data.getPassword());  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.ID,data.getId());  PropertyUtils.setPropertyIfNotNull(properties,DatasourcePropertySet.CONNECTION_PROPERTIES,getConnectionPropertiesAsASemicolonDelimitedString(data));  return properties;}  }
class C{  private void handleSubscriptionChange(long orgKey,long triggerDefinitionKey) throws Exception {  ResourceHolder holder=getTriggerProcesses(triggerDefinitionKey);  ResultSet processes=holder.getRs();  while (processes.next()) {    long triggerProcessKey=writeOrgKeyIdentifierForProcess(orgKey,processes);    writeSubscriptionKey(triggerProcessKey);  }  holder.close();}  }
class C{  protected void clearRstRor(){  rst=rst & ~RST_ROR_MASK;}  }
class C{  public Id<DgCrossing> convertNodeId2CrossingId(Id<Node> nodeId){  String idString=nodeId.toString() + "77";  return idPool.createId(idString,DgCrossing.class);}  }
class C{  public boolean dump_html(){  return soot.PhaseOptions.getBoolean(options,"dump-html");}  }
class C{  public DTLSSession(InetSocketAddress peerAddress,boolean isClient,long initialSequenceNo){  if (peerAddress == null) {    throw new NullPointerException("Peer address must not be null");  } else   if (initialSequenceNo < 0 || initialSequenceNo > MAX_SEQUENCE_NO) {    throw new IllegalArgumentException("Initial sequence number must be greater than 0 and less than 2^48");  } else {    this.creationTime=System.currentTimeMillis();    this.peer=peerAddress;    this.isClient=isClient;    this.sequenceNumbers.put(0,initialSequenceNo);  }}  }
class C{  public BulletConstructor(final Model model,final float mass){  final BoundingBox boundingBox=new BoundingBox();  model.calculateBoundingBox(boundingBox);  final Vector3 dimensions=boundingBox.getDimensions();  create(model,mass,dimensions.x,dimensions.y,dimensions.z);}  }
class C{  public void write(ByteBuffer buffer){  buffer.put(_mask);}  }
class C{  public void ready(String message){  setMessage(message);  setStatus(Status.ready.name());}  }
class C{  protected void completeDrag(MouseEvent e){  finishDraggingTo(positionForMouseEvent(e));}  }
class C{  @SuppressWarnings("unchecked") @Override public final boolean containsKey(final Object s){  return this.arc[getPartition(s)].containsKey((K)s);}  }
class C{  protected DialPointer(int datasetIndex){  this.radius=0.9;  this.datasetIndex=datasetIndex;}  }
class C{  public static void resetSingleUse(Context context,String showcaseID){  PrefsManager.resetShowcase(context,showcaseID);}  }
class C{  public static <E>List<E> parseList(String jsonString,Class<E> jsonObjectClass) throws IOException {  return mapperFor(jsonObjectClass).parseList(jsonString);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  private void initialize(){  this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));  this.setContentPane(getJPanel());  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(282,118);  }  this.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);  this.setResizable(false);}  }
class C{  private static boolean focusCenter(){  return (!CropOverlayView.showGuidelines());}  }
class C{  public void handleLockServiceRemoval(DLockService lockService) throws ManagementException {  if (!isServiceInitialised("handleLockServiceRemoval")) {    return;  }  ObjectName lockServiceMBeanName=MBeanJMXAdapter.getLockServiceMBeanName(cacheImpl.getDistributedSystem().getDistributedMember(),lockService.getName());  LockServiceMXBean bean=service.getLocalLockServiceMBean(lockService.getName());  service.unregisterMBean(lockServiceMBeanName);  Notification notification=new Notification(JMXNotificationType.LOCK_SERVICE_CLOSED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.LOCK_SERVICE_CLOSED_PREFIX + lockService.getName());  memberLevelNotifEmitter.sendNotification(notification);}  }
class C{  public boolean match(Object other){  if (other instanceof ContentLength)   return true; else   return false;}  }
class C{  public void asciiToCharMB() throws IOException {  writeCode(MB_ASCII_TO_CHAR);}  }
class C{  @RequestMapping(value=STORAGES_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_STORAGES_POST) public Storage createStorage(@RequestBody StorageCreateRequest request){  return storageService.createStorage(request);}  }
class C{  final public void flip(){  assert limit == pos : "pos=" + pos + ", limit="+ limit;  pos=0;}  }
class C{  private void emitElement(SourceContext<WindowedValue<OutputT>> ctx,BoundedSource.BoundedReader<OutputT> reader){synchronized (ctx.getCheckpointLock()) {    OutputT item=reader.getCurrent();    Instant timestamp=reader.getCurrentTimestamp();    WindowedValue<OutputT> windowedValue=WindowedValue.of(item,timestamp,GlobalWindow.INSTANCE,PaneInfo.NO_FIRING);    ctx.collectWithTimestamp(windowedValue,timestamp.getMillis());  }}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder(nt.toString() + " = ");  String sep1="";  for (  Map.Entry<Nonterminal,Set<RE>> entry : coeffs.entrySet()) {    s.append(sep1);    if (entry.getValue().isEmpty()) {      continue;    }    if (rec == Recursion.LEFT) {      s.append(entry.getKey().toString());    }    if (entry.getValue().size() > 1) {      s.append("(");    }    String sep2="";    for (    RE c : entry.getValue()) {      s.append(sep2);      s.append(c.toString());      sep2=" + ";    }    if (entry.getValue().size() > 1) {      s.append(")");    }    if (rec == Recursion.RIGHT) {      s.append(entry.getKey().toString());    }    sep1=" + ";  }  for (  RE c : terms) {    s.append(sep1);    s.append(c.toString());    sep1=" |+| ";  }  return s.toString();}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public boolean isSetCode(){  return this.code != null;}  }
class C{  public void destroyApp(boolean unconditional){  bFirst=false;  if (led1 != null) {    try {      led1.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    led1=null;  }  if (led2 != null) {    try {      led2.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    led2=null;  }  if (ledPort != null) {    try {      ledPort.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    ledPort=null;  }  if (button1 != null) {    try {      button1.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    button1=null;  }  if (button2 != null) {    try {      button2.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    button2=null;  }}  }
class C{  void shouldDisplayRationale(boolean displayRationale){  this.shouldDisplayRationale=displayRationale;}  }
class C{  public void testMergeOneFilterIntoDocumentWithAnotherFilter() throws Exception {  String srcXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f2</filter-name>"+ "    <filter-class>fclass2</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f2"));}  }
class C{  public ClientMessage sendMessageWithProperties(String address,Map<String,Object> properties){  return sendMessageWithProperties(SimpleString.toSimpleString(address),properties);}  }
class C{  public void execute() throws IOException {  final SortedSet<String> TLDs=getIANARootZoneDatabase();  writeOutput(TLDs);  System.err.println("Wrote " + TLDs.size() + " top level domains to '"+ outputFile+ "'.");}  }
class C{  public static Mapping<LocalTime> time(Constraint... constraints){  return time("HH:mm:ss.SSS",constraints);}  }
class C{  protected void process(Document document) throws Exception {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer();  Source source=new DocumentSource(document);  OutputFormat format=OutputFormat.createPrettyPrint();  StringWriter buffer=new StringWriter();  Result result=new XMLResult(buffer,format);  transformer.transform(source,result);  String text=buffer.toString();  System.out.println("The document is:- ");  System.out.println(text);}  }
class C{  private static boolean needsRelocation(final IReference reference,final long value,final INaviModule module){  return reference.getType() == ReferenceType.DATA && value >= module.getConfiguration().getFileBase().toLong();}  }
class C{  public void readState(DataInputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   mt[x]=stream.readInt();  len=mag01.length;  for (int x=0; x < len; x++)   mag01[x]=stream.readInt();  mti=stream.readInt();  __nextNextGaussian=stream.readDouble();  __haveNextNextGaussian=stream.readBoolean();}  }
class C{  public boolean isPaintHLines(){  Object oo=get_Value(COLUMNNAME_IsPaintHLines);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public FormatIntegerLeft(final int in){  this(in,false);}  }
class C{  void mult(Matrix3D rhs){  float lxx=xx * rhs.xx + yx * rhs.xy + zx * rhs.xz;  float lxy=xy * rhs.xx + yy * rhs.xy + zy * rhs.xz;  float lxz=xz * rhs.xx + yz * rhs.xy + zz * rhs.xz;  float lxo=xo * rhs.xx + yo * rhs.xy + zo * rhs.xz + rhs.xo;  float lyx=xx * rhs.yx + yx * rhs.yy + zx * rhs.yz;  float lyy=xy * rhs.yx + yy * rhs.yy + zy * rhs.yz;  float lyz=xz * rhs.yx + yz * rhs.yy + zz * rhs.yz;  float lyo=xo * rhs.yx + yo * rhs.yy + zo * rhs.yz + rhs.yo;  float lzx=xx * rhs.zx + yx * rhs.zy + zx * rhs.zz;  float lzy=xy * rhs.zx + yy * rhs.zy + zy * rhs.zz;  float lzz=xz * rhs.zx + yz * rhs.zy + zz * rhs.zz;  float lzo=xo * rhs.zx + yo * rhs.zy + zo * rhs.zz + rhs.zo;  xx=lxx;  xy=lxy;  xz=lxz;  xo=lxo;  yx=lyx;  yy=lyy;  yz=lyz;  yo=lyo;  zx=lzx;  zy=lzy;  zz=lzz;  zo=lzo;}  }
class C{  public boolean isProjectDim(){  Object oo=get_Value(COLUMNNAME_IsProjectDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof MSort) {    MSort ms=(MSort)obj;    if (data == ms.data)     return true;  }  return false;}  }
class C{  public static void error(final String message){  if (JQuantLib.logger != null) {    JQuantLib.logger.error(message);  } else {    System.err.printf("ERROR: %s\n",message);  }}  }
class C{  private void zEventToggleCalendarButtonMousePressed(MouseEvent event){  togglePopup();}  }
class C{  public void logMessage(String message){  System.err.println("LOG " + SysErrLog.getTimestamp() + ": "+ message);}  }
class C{  public FloatMatrix fill(float value){  for (int i=0; i < length; i++) {    put(i,value);  }  return this;}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return new ImageNode();}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public SearchResult(String title,Drawable icon){  this.title=title;  this.icon=icon;}  }
class C{  public void waitForExit() throws IOException {  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(_systemManager.getClassLoader());    _waitForExitService=new WaitForExitService3(this,_systemManager);    _waitForExitService.waitForExit();  }  finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  private void compile2(){  try {switch (compilePolicy) {case ATTR_ONLY:      attribute(todo);    break;case CHECK_ONLY:  flow(attribute(todo));break;case SIMPLE:generate(desugar(flow(attribute(todo))));break;case BY_FILE:{Queue<Queue<Env<AttrContext>>> q=todo.groupByFile();while (!q.isEmpty() && !shouldStop(CompileState.ATTR)) {generate(desugar(flow(attribute(q.remove()))));}}break;case BY_TODO:while (!todo.isEmpty()) generate(desugar(flow(attribute(todo.remove()))));break;default :Assert.error("unknown compile policy");}} catch (Abort ex) {if (devVerbose) ex.printStackTrace(System.err);}if (verbose) {elapsed_msec=elapsed(start_msec);log.printVerbose("total",Long.toString(elapsed_msec));}reportDeferredDiagnostics();if (!log.hasDiagnosticListener()) {printCount("error",errorCount());printCount("warn",warningCount());}}  }
class C{  public RandomPolicySeed(){  super(Harness.options,"Random Policy Seed","Seed for the random scheduler policy",Integer.valueOf(System.getProperty("mmtk.harness.yieldpolicy.random.seed","0")));}  }
class C{  public void sortValues(){  sortImpl(false,false);}  }
class C{  protected void installComponents(){  if (scrollableTabLayoutEnabled()) {    if (tabScroller == null) {      tabScroller=new ScrollableTabSupport(tabPane.getTabPlacement());      tabPane.add(tabScroller.viewport);    }  }  installTabContainer();}  }
class C{  public void test_commit_noConflict01(){  final Journal journal=getStore();  try {    final String name="abc";    final long commitTime0;{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);      commitTime0=journal.commit();      if (log.isInfoEnabled())       log.info("commitTime0: " + journal.getCommitRecord());      assertNotSame(0L,commitTime0);      assertEquals("commitCounter",1L,journal.getCommitRecord().getCommitCounter());    }    final long tx0=journal.newTx(ITx.UNISOLATED);    final long tx1=journal.newTx(ITx.UNISOLATED);    final long tx2=journal.newTx(ITx.UNISOLATED);    if (log.isInfoEnabled())     log.info("commitTime0   =" + commitTime0);    if (log.isInfoEnabled())     log.info("tx0: startTime=" + tx0);    if (log.isInfoEnabled())     log.info("tx1: startTime=" + tx1);    if (log.isInfoEnabled())     log.info("tx2: startTime=" + tx2);    assertTrue(commitTime0 <= Math.abs(tx0));    assertTrue(Math.abs(tx0) < Math.abs(tx1));    assertTrue(Math.abs(tx1) < Math.abs(tx2));    final byte[] id1=new byte[]{1};    final byte[] v0=getRandomData().array();    assertNull(journal.getIndex(name,tx1).insert(id1,v0));    assertEquals(v0,(byte[])journal.getIndex(name,tx1).lookup(id1));    assertNull(journal.getIndex(name).lookup(id1));    assertNull(journal.getIndex(name,tx0).lookup(id1));    assertNull(journal.getIndex(name,tx2).lookup(id1));    final long tx1CommitTime=journal.commit(tx1);    assertNotSame(0L,tx1CommitTime);    if (log.isInfoEnabled())     log.info("tx1: startTime=" + tx1 + ", commitTime="+ tx1CommitTime);    if (log.isInfoEnabled())     log.info("tx1: after commit: " + journal.getCommitRecord());    assertEquals("commitCounter",2L,journal.getCommitRecord().getCommitCounter());    assertEquals(v0,(byte[])journal.getIndex(name).lookup(id1));    final long tx3=journal.newTx(ITx.UNISOLATED);    assertTrue(Math.abs(tx2) < Math.abs(tx3));    assertTrue(Math.abs(tx3) >= tx1CommitTime);    if (log.isInfoEnabled())     log.info("tx3: startTime=" + tx3);    assertNull(journal.getIndex(name,tx0).lookup(id1));    assertNull(journal.getIndex(name,tx2).lookup(id1));    assertEquals(v0,(byte[])journal.getIndex(name,tx3).lookup(id1));    assertEquals(0L,journal.commit(tx0));    assertEquals("commitCounter",2L,journal.getCommitRecord().getCommitCounter());    assertEquals(0L,journal.commit(tx2));    assertEquals("commitCounter",2L,journal.getCommitRecord().getCommitCounter());    assertEquals(0L,journal.commit(tx3));    assertEquals("commitCounter",2L,journal.getCommitRecord().getCommitCounter());    assertEquals(v0,(byte[])journal.getIndex(name).lookup(id1));  }  finally {    journal.destroy();  }}  }
class C{  public SubClass(){  super();  this.longValue=28L;  this.anotherMap=new HashMap();  this.anotherMap.put("five",new Integer(5));  this.anotherMap.put("six",new Integer(6));  this.anotherMap.put("seven",new Integer(7));  this.anotherMap.put("eight",new Integer(8));}  }
class C{  public static <A,B,C,D,T>void registerNamedFactory(Class<T> objectClass,String factoryName,Func4<A,B,C,D,T> factory){  registerNamedFactoryRaw(objectClass,factoryName,factory);}  }
class C{  public UnknownGroupException(String s){  super(s);}  }
class C{  public static String[] sha256md5Hashes(Object inputStream,int len) throws NoSuchAlgorithmException, IOException, InsufficientDataException {  RandomAccessFile file=null;  BufferedInputStream stream=null;  if (inputStream instanceof RandomAccessFile) {    file=(RandomAccessFile)inputStream;  } else   if (inputStream instanceof BufferedInputStream) {    stream=(BufferedInputStream)inputStream;  } else {    throw new IllegalArgumentException("unsupported input stream object");  }  MessageDigest sha256Digest=MessageDigest.getInstance("SHA-256");  MessageDigest md5Digest=MessageDigest.getInstance("MD5");  long pos=0;  pos=readBytes(len,file,stream,pos,sha256Digest,md5Digest);  if (file != null) {    file.seek(pos);  } else {    stream.reset();  }  return new String[]{BaseEncoding.base16().encode(sha256Digest.digest()).toLowerCase(),BaseEncoding.base64().encode(md5Digest.digest())};}  }
class C{  private static BestShape convertPolygon(final List<List<GeoPoint>> pointsList,final PolygonDescription shape,BestShape testPointShape,final boolean mustBeInside){  final List<GeoPoint> filteredPoints=filterPoints(shape.points);  if (filteredPoints == null) {    return testPointShape;  }  if (shape.holes.size() == 0) {    if (testPointShape == null || testPointShape.points.size() > filteredPoints.size()) {      testPointShape=new BestShape(filteredPoints,mustBeInside);    }  }  pointsList.add(filteredPoints);  for (  final PolygonDescription hole : shape.holes) {    testPointShape=convertPolygon(pointsList,hole,testPointShape,!mustBeInside);  }  return testPointShape;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.133 -0500",hash_original_method="ECC374A16FFF293E37020E85B391DB03",hash_generated_method="780E8B5B055F68B079A55AA39CDAE638") OpenSSLSessionImpl(byte[] derData,String peerHost,int peerPort,X509Certificate[] peerCertificates,AbstractSessionContext sessionContext) throws IOException {  this(NativeCrypto.d2i_SSL_SESSION(derData),null,peerCertificates,peerHost,peerPort,sessionContext);  if (this.sslSessionNativePointer == 0) {    throw new IOException("Invalid session data");  }}  }
class C{  public TypedArray obtainAttributes(AttributeSet set,int[] attrs){  int len=attrs.length;  TypedArray array=getCachedStyledAttributes(len);  XmlBlock.Parser parser=(XmlBlock.Parser)set;  mAssets.retrieveAttributes(parser.mParseState,attrs,array.mData,array.mIndices);  array.mRsrcs=attrs;  array.mXml=parser;  return array;}  }
class C{  public Map<String,Object> evalPermission(DispatchContext dctx,Map<String,? extends Object> context){  if (UtilValidate.isNotEmpty(this.permissionServiceName)) {    ModelService thisService;    ModelService permission;    try {      thisService=dctx.getModelService(this.name);      permission=dctx.getModelService(this.permissionServiceName);    } catch (    GenericServiceException e) {      Debug.logError(e,"Failed to get ModelService: " + e.toString(),module);      Map<String,Object> result=ServiceUtil.returnSuccess();      result.put("hasPermission",Boolean.FALSE);      result.put("failMessage",e.getMessage());      return result;    }    if (permission != null) {      Map<String,Object> ctx=permission.makeValid(context,ModelService.IN_PARAM);      if (UtilValidate.isNotEmpty(this.permissionMainAction)) {        ctx.put("mainAction",this.permissionMainAction);      }      if (UtilValidate.isNotEmpty(this.permissionResourceDesc)) {        ctx.put("resourceDescription",this.permissionResourceDesc);      } else       if (thisService != null) {        ctx.put("resourceDescription",thisService.name);      }      LocalDispatcher dispatcher=dctx.getDispatcher();      Map<String,Object> resp;      try {        resp=dispatcher.runSync(permission.name,ctx,300,true);      } catch (      GenericServiceException e) {        Debug.logError(e,module);        Map<String,Object> result=ServiceUtil.returnSuccess();        result.put("hasPermission",Boolean.FALSE);        result.put("failMessage",e.getMessage());        return result;      }      if (ServiceUtil.isError(resp) || ServiceUtil.isFailure(resp)) {        Map<String,Object> result=ServiceUtil.returnSuccess();        result.put("hasPermission",Boolean.FALSE);        String failMessage=(String)resp.get("failMessage");        if (UtilValidate.isEmpty(failMessage)) {          failMessage=ServiceUtil.getErrorMessage(resp);        }        result.put("failMessage",failMessage);        return result;      }      return resp;    } else {      Map<String,Object> result=ServiceUtil.returnSuccess();      result.put("hasPermission",Boolean.FALSE);      result.put("failMessage","No ModelService found with the name [" + this.permissionServiceName + "]");      return result;    }  } else {    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("hasPermission",Boolean.FALSE);    result.put("failMessage","No ModelService found; no service name specified!");    return result;  }}  }
class C{  public boolean update(K key){  Long curr=new Long(System.currentTimeMillis());  Long prev=cache.putIfAbsent(key,curr);  if (prev == null) {    return false;  }  if (curr - prev > this.timeoutInterval) {    if (cache.replace(key,prev,curr)) {      return false;    }  }  return true;}  }
class C{  public FBBackupManager(String gdsType){  super(gdsType);}  }
class C{  private void removePossibleSimpleKey(){  SimpleKey key=possibleSimpleKeys.remove(flowLevel);  if (key != null && key.isRequired()) {    throw new ScannerException("while scanning a simple key",key.getMark(),"could not find expected ':'",reader.getMark());  }}  }
class C{  public MoveSourceEdit(int offset,int length){  super(offset,length);}  }
class C{  public String quotedString() throws ParseException {  int startIdx=ptr + 1;  if (lookAhead(0) != '\"')   return null;  consume(1);  while (true) {    char next=getNextChar();    if (next == '\"') {      break;    } else     if (next == '\0') {      throw new ParseException(this.buffer + " :unexpected EOL",this.ptr);    } else     if (next == '\\') {      consume(1);    }  }  return buffer.substring(startIdx,ptr - 1);}  }
class C{  private static void _trustAllHttpsCertificates(){  SSLContext context;  if (_trustManagers == null) {    _trustManagers=new TrustManager[]{new FakeX509TrustManager()};  }  try {    context=SSLContext.getInstance("SSL");    context.init(null,_trustManagers,new SecureRandom());  } catch (  GeneralSecurityException gse) {    throw new IllegalStateException(gse.getMessage());  }  HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());}  }
class C{  public static void printAccounts(AccountFeed accountFeed){  System.out.println(accountFeed.getTitle().getPlainText());  for (  AccountEntry entry : accountFeed.getEntries()) {    System.out.println("\t" + entry.getTitle().getPlainText() + ": "+ entry.getTableId().getValue());  }  System.out.println();}  }
class C{  public void flush(){}  }
class C{  public void flush(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();      } catch (      Throwable e) {        LogUtils.e(e.getMessage(),e);      }    }  }}  }
class C{  protected void invalidateGeometryCache(){  super.invalidateGeometryCache();  primitiveBounds=null;  geometryBounds=null;  sensitiveBounds=null;  paintedArea=null;  sensitiveArea=null;}  }
class C{  public boolean isStatic(){  return static_;}  }
class C{  public void postCall(){}  }
class C{  public synchronized void kill(){  killing.set(true);  if (!sessions.containsKey(session))   return;  graphManager.getGraphs().entrySet().forEach(null);  executor.shutdownNow();  sessions.remove(session);  logger.info("Session {} closed",session);}  }
class C{  public X509CRLEntryImpl(BigInteger num,Date date,CRLExtensions crlEntryExts){  this.serialNumber=new SerialNumber(num);  this.revocationDate=date;  this.extensions=crlEntryExts;}  }
class C{  public void testConstructorStringException4(){  String value="98zv765hdsaiy";  int radix=20;  try {    new BigInteger(value,radix);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public MessageTypeFilter(Message.Type type){  this.type=type;}  }
class C{  public void expectSuccess(MessageInfo messageInfo){  expectedApiCalls.add(new ApiCall(SUCCESS,new Object[]{messageInfo.getOrigin(),messageInfo.getClient(),messageInfo.getService()}));}  }
class C{  protected int hmdu(int N,int M,int n,RandomEngine randomGenerator){  int I, K;  double p, nu, c, d, U;  if (N != N_last || M != M_last || n != n_last) {    N_last=N;    M_last=M;    n_last=n;    Mp=(double)(M + 1);    np=(double)(n + 1);    N_Mn=N - M - n;    p=Mp / (N + 2.0);    nu=np * p;    if ((m=(int)nu) == nu && p == 0.5) {      mp=m--;    } else {      mp=m + 1;    }    fm=Math.exp(Arithmetic.logFactorial(N - M) - Arithmetic.logFactorial(N_Mn + m) - Arithmetic.logFactorial(n - m) + Arithmetic.logFactorial(M) - Arithmetic.logFactorial(M - m) - Arithmetic.logFactorial(m) - Arithmetic.logFactorial(N) + Arithmetic.logFactorial(N - n) + Arithmetic.logFactorial(n));    b=(int)(nu + 11.0 * Math.sqrt(nu * (1.0 - p) * (1.0 - n / (double)N) + 1.0));    if (b > n)     b=n;  }  for (; ; ) {    if ((U=randomGenerator.raw() - fm) <= 0.0)     return (m);    c=d=fm;    for (I=1; I <= m; I++) {      K=mp - I;      c*=(double)K / (np - K) * ((double)(N_Mn + K) / (Mp - K));      if ((U-=c) <= 0.0)       return (K - 1);      K=m + I;      d*=(np - K) / (double)K * ((Mp - K) / (double)(N_Mn + K));      if ((U-=d) <= 0.0)       return (K);    }    for (K=mp + m; K <= b; K++) {      d*=(np - K) / (double)K * ((Mp - K) / (double)(N_Mn + K));      if ((U-=d) <= 0.0)       return (K);    }  }}  }
class C{  final protected boolean rangeCheckTupleIndex(final int index){  if (index < 0 || index > keys.capacity())   throw new IndexOutOfBoundsException();  return true;}  }
class C{  public void trim(Collection<String> variables){  map.keySet().retainAll(variables);  cachedHash=0;}  }
class C{  public final boolean isHappened(@NonNull String eventKey){  return getEvent(eventKey).isHappened();}  }
class C{  void parseHeaderItem() throws IOException {  mHeaderItem=new HeaderItem();  seek(0);  byte[] magic=new byte[8];  readBytes(magic);  if (!verifyMagic(magic)) {    System.err.println("Magic number is wrong -- are you sure " + "this is a DEX file?");    throw new DexDataException();  }  seek(8 + 4 + 20+ 4+ 4);  mHeaderItem.endianTag=readInt();  if (mHeaderItem.endianTag == HeaderItem.ENDIAN_CONSTANT) {  } else   if (mHeaderItem.endianTag == HeaderItem.REVERSE_ENDIAN_CONSTANT) {    isBigEndian=true;  } else {    System.err.println("Endian constant has unexpected value " + Integer.toHexString(mHeaderItem.endianTag));    throw new DexDataException();  }  seek(8 + 4 + 20);  mHeaderItem.fileSize=readInt();  mHeaderItem.headerSize=readInt();  readInt();  readInt();  readInt();  readInt();  mHeaderItem.stringIdsSize=readInt();  mHeaderItem.stringIdsOff=readInt();  mHeaderItem.typeIdsSize=readInt();  mHeaderItem.typeIdsOff=readInt();  mHeaderItem.protoIdsSize=readInt();  mHeaderItem.protoIdsOff=readInt();  mHeaderItem.fieldIdsSize=readInt();  mHeaderItem.fieldIdsOff=readInt();  mHeaderItem.methodIdsSize=readInt();  mHeaderItem.methodIdsOff=readInt();  mHeaderItem.classDefsSize=readInt();  mHeaderItem.classDefsOff=readInt();  readInt();  readInt();}  }
class C{  public void mergePreCondition(){  if (preCondition != null && conditionBlock != null) {    List<InsnNode> condInsns=conditionBlock.getInstructions();    List<InsnNode> preCondInsns=preCondition.getInstructions();    preCondInsns.addAll(condInsns);    condInsns.clear();    condInsns.addAll(preCondInsns);    preCondInsns.clear();    preCondition=null;  }}  }
class C{  protected AbstractButton createOnOffButton(){  return new JCheckBox(layerOffIcon);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.728 -0500",hash_original_method="E0F66F3A2F7DEFA05E43170D7FDC6E81",hash_generated_method="42514359CDD00951D89B9ED5670B7B09") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void onAnimationEnd(Animator animation){}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  protected void sequence_Primary(ISerializationContext context,Point semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public OutputStream asOutputStream(){  return outputStream;}  }
class C{  public Key delMin(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  exch(0,--n);  sink(0);  Key min=keys[n + d];  keys[n + d]=null;  int number=getN(order - 2);  if (order > 1 && n == number) {    resize(number + (int)Math.pow(d,order - 1) + d);    order--;  }  return min;}  }
class C{  private void fetchProfileInfoFromFacebook(){  mWasProfileImageUploaded=false;  final Session session=Session.getActiveSession();  if (!session.isOpened() && !session.isClosed()) {    session.openForRead(new Session.OpenRequest(this).setPermissions(Arrays.asList(AppConstants.FBPERMISSIONS)).setCallback(this));  } else {    Session.openActiveSession(getActivity(),this,true,this);  }}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  private void validateSystemType(String system,VirtualPool vPool){  if (system != null) {    if (!VirtualPool.SystemType.NONE.name().equals(system)) {      SystemType systemType=SystemType.lookup(system);      if (systemType != null && !systemType.equals(SystemType.vmax) && !systemType.equals(SystemType.vnxblock) && !systemType.equals(SystemType.xtremio) && !systemType.equals(SystemType.unity)) {        throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForSystemType(system);      }    }  } else   if (vPool != null) {    StringSet systemTypes=null;    StringSetMap arrayInfo=vPool.getArrayInfo();    if (arrayInfo != null && !arrayInfo.isEmpty()) {      systemTypes=arrayInfo.get(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE);    }    if (systemTypes != null && !systemTypes.isEmpty() && !systemTypes.contains(VirtualPool.SystemType.NONE.name())) {      if (!systemTypes.contains(SystemType.vmax.name()) && !systemTypes.contains(SystemType.vnxblock.name()) && !systemTypes.contains(SystemType.xtremio.name())&& !systemTypes.contains(SystemType.unity.name())) {        throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForSystemType(CommonTransformerFunctions.collectionString(systemTypes));      }    }  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {}  }
class C{  @Override public void clear(){  size=0;  list=null;}  }
class C{  final public MutableString insert(final int index,final char[] c,final int offset,final int len){  final int length=length();  if (index > length)   throw new StringIndexOutOfBoundsException();  if (offset < 0 || offset + len < 0 || offset + len > c.length)   throw new StringIndexOutOfBoundsException(offset);  if (len == 0)   return this;  final int newLength=length + len;  expand(newLength);  System.arraycopy(array,index,array,index + len,length - index);  System.arraycopy(c,offset,array,index,len);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public CloneCollectionsAction(OperationConfig config) throws IOException, InterruptedException, KeeperException, CollectionPatternException, CollectionNotFoundException {  super(config);  String collectionNameRule=this.config.getCollectionNameRule();  String configNamePatterns=this.config.getConfigNamePatterns();  collectionMapper=new SourceDestCollectionMapper(collectionNameRule,configNamePatterns,sourceZKClient.getZkClusterData());  destinationZKClient=new ZkClient(config.getDestinationZkHost());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TYPE_VARIABLE__DECLARED_COVARIANT:    setDeclaredCovariant((Boolean)newValue);  return;case TypesPackage.TYPE_VARIABLE__DECLARED_CONTRAVARIANT:setDeclaredContravariant((Boolean)newValue);return;case TypesPackage.TYPE_VARIABLE__DECLARED_UPPER_BOUND:setDeclaredUpperBound((TypeRef)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean extractOdex(File odex) throws IOException {  File Decomdex;  if (odex.getName().endsWith(S.ODEX_EXT)) {    Logger.appendLog("[ZipTools][I]Decompressing  " + odex.getName() + " not needed");    return true;  } else   if (odex.getName().endsWith(S.COMP_GZ_ODEX_EXT)) {    Logger.appendLog("[ZipTools][I]Decompressing  " + odex.getName() + " gzip detected ...");    return TarGzUtils.unGzipOdex(odex,odex.getParentFile());  } else {    Logger.appendLog("[ZipTools][I]Decompressing  " + odex.getName() + " xz compression detected ...");    Decomdex=new File(odex.getParentFile().getAbsolutePath() + "/" + StringUtils.getCropString(odex.getName(),odex.getName().length() - 3));    Logger.appendLog("[ZipTools][I]Decompressing  " + odex.getAbsolutePath() + "  to  "+ Decomdex.getAbsolutePath());    FileInputStream fin=new FileInputStream(odex);    BufferedInputStream in=new BufferedInputStream(fin);    FileOutputStream out=new FileOutputStream(Decomdex);    XZCompressorInputStream xzIn=new XZCompressorInputStream(in);    final byte[] buffer=new byte[32768];    int n=0;    while (-1 != (n=xzIn.read(buffer))) {      out.write(buffer,0,n);    }    out.close();    xzIn.close();  }  Logger.appendLog("[ZipTools][I]Decompressing  " + odex.getAbsolutePath() + "  to  "+ Decomdex.getAbsolutePath()+ " success ? "+ Decomdex.exists());  return Decomdex.exists();}  }
class C{  private void updatePeriod(){  for (int i=0; i < mConversion.size(); i++) {    int dateType=mConversion.keyAt(i);    TimePeriodSlider slider=mTimePeriodSliders.get(dateType);    slider.setValue(mPeriod.get(mConversion.valueAt(i)));  }  mTime.setText(getFormattedPeriod());  mDuration=mPeriod.toStandardDuration();  doValidation();}  }
class C{  public Matrix4x3f m11(float m11){  this.m11=m11;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  protected Query doCreateQuery(String queryString,PrefixMapping prefixMapping){  Query query=new Query();  if (prefixMapping != null) {    query.setPrefixMapping(prefixMapping);  }  return QueryFactory.parse(query,queryString,null,getSyntax());}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static OMGrid read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  @Override public void respond(String response){  getUser().send().message(response);}  }
class C{  public int maxAgeSeconds(){  return maxAgeSeconds;}  }
class C{  protected AttributedString createTickLabel(double value){  if (this.numberFormatOverride != null) {    return new AttributedString(this.numberFormatOverride.format(value));  } else {    String baseStr=this.baseSymbol;    if (baseStr == null) {      baseStr=this.baseFormatter.format(this.base);    }    double logy=calculateLog(value);    String exponentStr=getTickUnit().valueToString(logy);    AttributedString as=new AttributedString(baseStr + exponentStr);    as.addAttributes(getTickLabelFont().getAttributes(),0,(baseStr + exponentStr).length());    as.addAttribute(TextAttribute.SUPERSCRIPT,TextAttribute.SUPERSCRIPT_SUPER,baseStr.length(),baseStr.length() + exponentStr.length());    return as;  }}  }
class C{  public static boolean isSDF(File f){  try {    return !new SdfId(0).equals(getSdfId(f));  } catch (  IOException e) {    return false;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.942 -0400",hash_original_method="49013355B881E412B579D906E9AC6664",hash_generated_method="74332A0658EDB6DE54B62DC0D060A9D4") @Override public boolean accept(File dir,String name){  if (filenameFilter != null) {    return filenameFilter.accept(dir,name);  } else {    return super.accept(dir,name);  }}  }
class C{  boolean isNavigatable(int offset){  return true;}  }
class C{  public void println(boolean x){  return;}  }
class C{  public int addEntry(ConsoleEntry entry){  int entryType=entry.type;  if (entryType == LOG) {    ++logCount;  } else   if (entryType == WARNING) {    ++warningCount;  } else   if (isErrorType(entryType)) {    ++errorCount;  }  entries.addObject(entry);  if (isFiltering()) {    if (filterEntry(entry)) {      if (collapsed) {        ConsoleCollapsedEntry collapsedEntry=entryLookup.addEntry(entry);        if (collapsedEntry.index < filteredEntries.trimmedCount()) {          collapsedEntry.index=filteredEntries.totalCount();          filteredEntries.addObject(collapsedEntry);        }        return collapsedEntry.index - filteredEntries.trimmedCount();      }      filteredEntries.addObject(entry);      return filteredEntries.totalCount() - 1;    }    return -1;  }  return entries.totalCount() - 1;}  }
class C{  public boolean isNewerJavaVersionRequired(){  return newerJavaVersion;}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (object instanceof String) {    String s=(String)object;    if (count != s.count || (hashCode != s.hashCode && hashCode != 0 && s.hashCode != 0)) {      return false;    }    return regionMatches(0,s,0,count);  }  return false;}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  synchronized public void addClusterChangeListener(ClusterEventListener l){  if (listeners == null)   listeners=new Vector();  listeners.addElement(l);}  }
class C{  public static Border createLineBorder(int thickness,int color){  Border b=new Border();  b.type=TYPE_LINE;  b.themeColors=false;  b.thickness=thickness;  b.colorA=color;  return b;}  }
class C{  private static long remoteLongMethod(){  return LONG_VALUE;}  }
class C{  public StateMachineConfig(ConfigurationData<S,E> stateMachineConfigurationConfig,TransitionsData<S,E> transitions,StatesData<S,E> states,ModelData<S,E> model){  this.stateMachineConfigurationConfig=stateMachineConfigurationConfig;  this.transitions=transitions;  this.states=states;  this.model=model;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (gdate == null) {    gdate=(BaseCalendar.Date)gcal.newCalendarDate(getZone());    cachedFixedDate=Long.MIN_VALUE;  }  setGregorianChange(gregorianCutover);}  }
class C{  public ReferenceVariable buildNewReferenceVariable(Object conc_object,String var_name){  final Type referenceType;  if (conc_object == null) {    referenceType=Type.getType(Object.class);  } else {    referenceType=Type.getType(conc_object.getClass());  }  final int newInstanceId=newInstanceCount++;  final ReferenceVariable r=new ReferenceVariable(referenceType,newInstanceId,var_name,conc_object);  return r;}  }
class C{  public boolean shouldExecute(){  EntityLivingBase entitylivingbase=this.entityHost.getAttackTarget();  if (entitylivingbase == null) {    return false;  } else   if (!entitylivingbase.isDead) {    this.attackTarget=entitylivingbase;    return true;  }  return false;}  }
class C{  public void addUtilizationHistoryValue(final double utilization){  getUtilizationHistory().add(0,utilization);  if (getUtilizationHistory().size() > HISTORY_LENGTH) {    getUtilizationHistory().remove(HISTORY_LENGTH);  }}  }
class C{  public final Frequency frequency(){  final int length=Math.abs(this.length);  if (length == 0)   return Frequency.NoFrequency;switch (units) {case Years:    if (length == 1)     return Frequency.Annual; else     return Frequency.OtherFrequency;case Months:  if (12 % length == 0 && length <= 12)   return Frequency.valueOf(12 / length); else   return Frequency.OtherFrequency;case Weeks:if (length == 1) return Frequency.Weekly; else if (length == 2) return Frequency.Biweekly; else if (length == 4) return Frequency.EveryFourthWeek; else return Frequency.OtherFrequency;case Days:if (length == 1) return Frequency.Daily; else return Frequency.OtherFrequency;default :throw new LibraryException(UNKNOWN_TIME_UNIT);}}  }
class C{  public LogIndexEntry(long startSeqno,long endSeqno,String fileName){  this.startSeqno=startSeqno;  this.endSeqno=endSeqno;  this.fileName=fileName;}  }
class C{  public TagAttachObject(TagAttachObject parent){  this.id=parent.getId();  this.tagId=parent.getTagId();  this.attachId=parent.getAttachId();  this.attachType=parent.getAttachType();}  }
class C{  private void populateData(Region region,Object[] data){  for (int j=0; j < data.length; j++) {    region.put(new Integer(j),data[j]);  }}  }
class C{  public boolean isConsume(){  return consume;}  }
class C{  public CustomTranslation(String word,String translation){  this();  setWord(word);  setTranslation(translation);}  }
class C{  public static IpcEndpoint connectEndpoint(String endpointAddr,IgniteLogger log) throws IgniteCheckedException {  A.notNull(endpointAddr,"endpointAddr");  String[] split=endpointAddr.split(":");  int port;  if (split.length == 2) {    try {      port=Integer.parseInt(split[1]);    } catch (    NumberFormatException e) {      throw new IgniteCheckedException("Failed to parse port number: " + endpointAddr,e);    }  } else   port=-1;  return "shmem".equalsIgnoreCase(split[0]) ? connectSharedMemoryEndpoint(port > 0 ? port : IpcSharedMemoryServerEndpoint.DFLT_IPC_PORT,log) : connectTcpEndpoint(split[0],port > 0 ? port : IpcServerTcpEndpoint.DFLT_IPC_PORT);}  }
class C{  public ExponentialSawtoothModel(Parameter N0Parameter,Parameter growthRateParameter,Parameter wavelengthParameter,Parameter offsetParameter,Type units){  this(ExponentialSawtoothModelParser.EXPONENTIAL_SAWTOOTH,N0Parameter,growthRateParameter,wavelengthParameter,offsetParameter,units);}  }
class C{  public boolean addFileExtension(String fileExt){  if (fileExt == null) {    throw new IllegalArgumentException("The given file extension is null.");  }  fileExt=AppUtility.addDotToFileExtension(fileExt);  if (fileExtensionList == null) {    fileExtensionList=new ArrayList<String>();  }  return fileExtensionList.add(fileExt);}  }
class C{  public Element writeCollection(Element parent,Object o,String name) throws Exception {  Element node;  Iterator<?> iter;  int i;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  iter=((Collection<?>)o).iterator();  node=addElement(parent,name,o.getClass().getName(),false);  i=0;  while (iter.hasNext()) {    invokeWriteToXML(node,iter.next(),Integer.toString(i));    i++;  }  return node;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof FifteenPuzzleNode) {    return equivalent((FifteenPuzzleNode)o);  }  return false;}  }
class C{  private static void createTestSubdirs() throws IOException {  sTestDirs=new Path[]{new Path(sBaseURI + "/test/swift/a"),new Path(sBaseURI + "/test/swift/b"),new Path(sBaseURI + "/test/swift/c/1")};  for (  Path path : sTestDirs) {    createEmptyFile(path);  }}  }
class C{  int index2y(int index){  int h=getItemHeight();  return MARGIN + ((index - vsb.getValue()) * h) + SPACE;}  }
class C{  public boolean isResizingContainer(){  return _resizeContainer;}  }
class C{  public void push(final String value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public void addFetchFilter(FetchFilter filter){  log.debug("Loading fetch filter: " + filter.getClass().getSimpleName());  fetchFilters.add(filter);}  }
class C{  @SideEffectFree public String toString(){  return name;}  }
class C{  public void testCodeSigner_00(){  try {    new CodeSigner(null,ts);    fail("must not accept null");  } catch (  NullPointerException ex) {  }}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"Inside","Outside"};  long now=Math.round(new Date().getTime() / DAY) * DAY;  List<Date[]> x=new ArrayList<Date[]>();  for (int i=0; i < titles.length; i++) {    Date[] dates=new Date[HOURS];    for (int j=0; j < HOURS; j++) {      dates[j]=new Date(now - (HOURS - j) * HOUR);    }    x.add(dates);  }  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{21.2,21.5,21.7,21.5,21.4,21.4,21.3,21.1,20.6,20.3,20.2,19.9,19.7,19.6,19.9,20.3,20.6,20.9,21.2,21.6,21.9,22.1,21.7,21.5});  values.add(new double[]{1.9,1.2,0.9,0.5,0.1,-0.5,-0.6,MathHelper.NULL_VALUE,MathHelper.NULL_VALUE,-1.8,-0.3,1.4,3.4,4.9,7.0,6.4,3.4,2.0,1.5,0.9,-0.5,MathHelper.NULL_VALUE,-1.9,-2.5,-4.3});  int[] colors=new int[]{Color.GREEN,Color.BLUE};  PointStyle[] styles=new PointStyle[]{PointStyle.CIRCLE,PointStyle.DIAMOND};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  int length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    ((XYSeriesRenderer)renderer.getSeriesRendererAt(i)).setFillPoints(true);  }  setChartSettings(renderer,"Sensor temperature","Hour","Celsius degrees",x.get(0)[0].getTime(),x.get(0)[HOURS - 1].getTime(),-5,30,Color.LTGRAY,Color.LTGRAY);  renderer.setXLabels(10);  renderer.setYLabels(10);  renderer.setShowGrid(true);  renderer.setXLabelsAlign(Align.CENTER);  renderer.setYLabelsAlign(Align.RIGHT);  Intent intent=ChartFactory.getTimeChartIntent(context,buildDateDataset(titles,x,values),renderer,"h:mm a");  return intent;}  }
class C{  private void purge(){synchronized (queue) {    WeakKey key;    while ((key=(WeakKey)queue.poll()) != null) {      super.remove(key.getReferenced());    }  }}  }
class C{  private String createEsilSequence(Iterable<Instruction> instructions,Predicate<Instruction> p){  StringBuilder builder=new StringBuilder();  for (  Instruction instr : instructions) {    String esilCode=instr.getEsilCode();    if (p.test(instr))     builder.append(esilCode + ",");  }  String instructionSeq=builder.toString();  instructionSeq=instructionSeq.substring(0,instructionSeq.length() - 1);  return instructionSeq;}  }
class C{  public void sortKeys(){  sortImpl(true,false);}  }
class C{  @Override protected Bitmap decodeJPEGByteArrayAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef,int length,BitmapFactory.Options options){  byte[] suffix=endsWithEOI(bytesRef,length) ? null : EOI;  return decodeFileDescriptorAsPurgeable(bytesRef,length,suffix,options);}  }
class C{  private void buildDefinition(String definitionName,Model model,MarkupDocBuilder docBuilder){  applyDefinitionsDocumentExtension(new Context(Position.DEFINITION_BEFORE,docBuilder,definitionName,model));  buildDefinitionTitle(definitionName,definitionName,docBuilder);  applyDefinitionsDocumentExtension(new Context(Position.DEFINITION_BEGIN,docBuilder,definitionName,model));  buildDescriptionParagraph(model,docBuilder);  inlineDefinitions(typeSection(definitionName,model,docBuilder),definitionName,docBuilder);  applyDefinitionsDocumentExtension(new Context(Position.DEFINITION_END,docBuilder,definitionName,model));  applyDefinitionsDocumentExtension(new Context(Position.DEFINITION_AFTER,docBuilder,definitionName,model));}  }
class C{  private Map cloneMarkerMap(Map map) throws CloneNotSupportedException {  Map clone=new HashMap();  Set keys=map.keySet();  Iterator iterator=keys.iterator();  while (iterator.hasNext()) {    Object key=iterator.next();    List entry=(List)map.get(key);    Object toAdd=ObjectUtilities.deepClone(entry);    clone.put(key,toAdd);  }  return clone;}  }
class C{  public final static StatisticsTypeFactory singleton(){  return singleton;}  }
class C{  public final AssertSubscriber<T> assertNonFuseableSource(){  if (qs != null) {    throw new AssertionError("Upstream was Fuseable");  }  return this;}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  if (!SVGUtilities.matchUserAgent(e,ctx.getUserAgent())) {    return null;  }  CompositeGraphicsNode cgn=new CompositeGraphicsNode();  associateSVGContext(ctx,e,cgn);  return cgn;}  }
class C{  private Producer<EncodedImage> newEncodedCacheMultiplexToTranscodeSequence(Producer<EncodedImage> inputProducer){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) {    inputProducer=mProducerFactory.newWebpTranscodeProducer(inputProducer);  }  inputProducer=mProducerFactory.newDiskCacheProducer(inputProducer);  EncodedMemoryCacheProducer encodedMemoryCacheProducer=mProducerFactory.newEncodedMemoryCacheProducer(inputProducer);  return mProducerFactory.newEncodedCacheKeyMultiplexProducer(encodedMemoryCacheProducer);}  }
class C{  public TermsBuilder collectMode(SubAggCollectionMode mode){  this.collectionMode=mode;  return this;}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  out.writeInt(Vocabulary.size());  for (int i=0; i < Vocabulary.size(); i++) {    out.writeUTF(Vocabulary.word(i));  }  out.writeDouble(numTokens);  out.writeInt(countFuncs.length);  for (  long[] countFunc : countFuncs) {    out.writeLong(countFunc[0]);    out.writeLong(countFunc[1]);  }  out.writeInt(typesFuncs.length);  for (  long[] typesFunc : typesFuncs) {    out.writeLong(typesFunc[0]);    out.writeLong(typesFunc[1]);  }  out.writeDouble(quantizationBase);  bf.writeExternal(out);}  }
class C{  public void write(OutputStream out) throws IOException {  write(new OutputStreamWriter(out));}  }
class C{  @Override public String toString(){  return "cudaSurfaceObject[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  private void medianRank(int rankValue,boolean downwardSweep){  int numCellsForRank=nestedBestRanks[rankValue].length;  MedianCellSorter[] medianValues=new MedianCellSorter[numCellsForRank];  for (int i=0; i < numCellsForRank; i++) {    mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)nestedBestRanks[rankValue][i];    medianValues[i]=new MedianCellSorter();    medianValues[i].cell=cell;    medianValues[i].nudge=!downwardSweep;    Collection<mxGraphAbstractHierarchyCell> nextLevelConnectedCells;    if (downwardSweep) {      nextLevelConnectedCells=cell.getNextLayerConnectedCells(rankValue);    } else {      nextLevelConnectedCells=cell.getPreviousLayerConnectedCells(rankValue);    }    int nextRankValue;    if (downwardSweep) {      nextRankValue=rankValue + 1;    } else {      nextRankValue=rankValue - 1;    }    if (nextLevelConnectedCells != null && nextLevelConnectedCells.size() != 0) {      medianValues[i].medianValue=medianValue(nextLevelConnectedCells,nextRankValue);    } else {      medianValues[i].medianValue=-1.0;    }  }  Arrays.sort(medianValues);  for (int i=0; i < numCellsForRank; i++) {    medianValues[i].cell.setGeneralPurposeVariable(rankValue,i);  }}  }
class C{  public EntityQuery orderBy(List<String> orderBy){  this.orderBy=orderBy;  return this;}  }
class C{  public SaslServer createSaslServer(String mech,String protocol,String serverName,Map<String,?> props,CallbackHandler cbh) throws SaslException {  if (mech.equals(myMechs[DIGEST_MD5]) && PolicyUtils.checkPolicy(mechPolicies[DIGEST_MD5],props)) {    if (cbh == null) {      throw new SaslException("Callback handler with support for AuthorizeCallback, " + "RealmCallback, NameCallback, and PasswordCallback " + "required");    }    return new DigestMD5Server(protocol,serverName,props,cbh);  }  return null;}  }
class C{  public static int generateViewId(){  for (; ; ) {    final int result=sNextGeneratedId.get();    int newValue=result + 1;    if (newValue > 0x00FFFFFF)     newValue=1;    if (sNextGeneratedId.compareAndSet(result,newValue)) {      return result;    }  }}  }
class C{  public static long longFromProperties(Properties p,String propName,long defaultValue){  long ret=defaultValue;  String longString=p.getProperty(propName);  if (longString != null) {    try {      ret=Long.parseLong(longString.trim());    } catch (    NumberFormatException e) {      ret=defaultValue;    }  }  return ret;}  }
class C{  private static String formatList(String[] stringList,String listPattern,String listCompositionPattern){  if (listPattern == null || listCompositionPattern == null) {    StringBuilder result=new StringBuilder();    for (int i=0; i < stringList.length; ++i) {      if (i > 0) {        result.append(',');      }      result.append(stringList[i]);    }    return result.toString();  }  if (stringList.length > 3) {    MessageFormat format=new MessageFormat(listCompositionPattern);    stringList=composeList(format,stringList);  }  Object[] args=new Object[stringList.length + 1];  System.arraycopy(stringList,0,args,1,stringList.length);  args[0]=new Integer(stringList.length);  MessageFormat format=new MessageFormat(listPattern);  return format.format(args);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static ApiMethod processMethod(ApiService apiService,MethodDoc method,String baseURL,boolean isDataService){  try {    ApiMethod apiMethodDesc=new ApiMethod();    apiMethodDesc.javaMethodName=method.name();    apiMethodDesc.apiService=apiService;    apiMethodDesc.isDataService=isDataService;    addPath(method,apiMethodDesc,baseURL);    addHttpMethod(method,apiMethodDesc);    addDescription(method,apiMethodDesc);    addBriefDescription(method,apiMethodDesc);    addResponseDescription(method,apiMethodDesc);    addPrerequisites(method,apiMethodDesc);    addSecurity(method,apiMethodDesc);    if (isDataService) {      addDataServiceInformation(method,apiMethodDesc);    } else {      addInputs(method,apiMethodDesc);    }    addOutput(method,apiMethodDesc);    addQueryParameters(method,apiMethodDesc);    addPathParameters(method,apiMethodDesc);    addExamples(apiMethodDesc);    addDeprecated(method,apiMethodDesc);    return apiMethodDesc;  } catch (  Exception e) {    throw new RuntimeException("Error processing " + apiService.getFqJavaClassName() + "::"+ method.name(),e);  }}  }
class C{  public UpdateRequest doc(String source){  safeDoc().source(source);  return this;}  }
class C{  public LineStrip3D toLineStrip3D(int res){  LineStrip3D strip=new LineStrip3D();  int i=0;  int maxRes=res;  for (int num=points.size(); i < num - 3; i+=3) {    Vec3D a=points.get(i);    Vec3D b=points.get(i + 1);    Vec3D c=points.get(i + 2);    Vec3D d=points.get(i + 3);    if (i + 3 > num - 3) {      maxRes++;    }    for (int t=0; t < maxRes; t++) {      strip.add(computePointInSegment(a,b,c,d,(float)t / res));    }  }  return strip;}  }
class C{  public static LocalGroupId create(String groupCode){  validateField("groupCode",groupCode);  return new LocalGroupId(groupCode);}  }
class C{  PurityGraph(){  nodes=new HashSet();  paramNodes=new HashSet();  edges=new HashMultiMap();  locals=new HashMultiMap();  ret=new HashSet();  globEscape=new HashSet();  backEdges=new HashMultiMap();  backLocals=new HashMultiMap();  mutated=new HashMultiMap();  if (doCheck)   sanityCheck();}  }
class C{  public static void writeln(Address a,boolean flush){  write(a);  writelnWithFlush(flush);}  }
class C{  public void parse(InputSource input) throws SAXException, IOException {  setupParse();  parent.parse(input);}  }
class C{  private void givenTwoSuppliersOneUnpublishedSub() throws Exception {  createSupplierProductAndSubscriptions(true);  createSupplierProductAndUnpublish(true);}  }
class C{  protected int _sliceOffset(int absRank){  return sliceOffsets[absRank];}  }
class C{  public static ChainingTextParser<ChainingTextParser<?>> parse(File file){  return new ChainingTextParser<ChainingTextParser<?>>(file);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static <E,B extends MutableBag<E>>SynchronizedBag<E> of(B bag){  return new SynchronizedBag<>(bag);}  }
class C{  public BillingSubscriptionHistoryData(List<SubscriptionHistory> subscriptionHistoryEntries){  this.subscriptionHistoryEntries=subscriptionHistoryEntries;  subscriptionIndexMap=new HashMap<Long,SubscriptionIndices>();  if (subscriptionHistoryEntries.size() > 0) {    determineSubscriptions();  }}  }
class C{  protected boolean isClosed(){synchronized (this) {    return this.primaryState == CLOSED;  }}  }
class C{  public void addItemSet(Collection<BinaryItem> itemSet,int incr){  super.addItemSet(itemSet,m_headerTable,incr);}  }
class C{  public boolean containerNode(){  return false;}  }
class C{  public void removeCommand(Command cmd){  menuBar.removeCommand(cmd);}  }
class C{  public boolean isBodyHtml(){  return bodyHtml;}  }
class C{  public boolean remove(DataSource source){  source.removeDataListener(this);  dataVisible.remove(source);  if (getLegend() != null) {    getLegend().remove(source);  }  boolean existed=data.remove(source);  invalidateAxisExtrema();  return existed;}  }
class C{  public void close(){  if (!this.isConnected()) {    throw new IllegalStateException("XBee is not connected");  }  if (parser != null) {    parser.setDone(true);    parser.interrupt();  }  try {    xbeeConnection.close();  } catch (  IOException e) {    log.warn("Failed to close connection",e);  }  this.type=null;  parser=null;  xbeeConnection=null;}  }
class C{  public static double[] merc(double lat,double lon){  return new double[]{mercX(lon),mercY(lat)};}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultPieDataset clone=(DefaultPieDataset)super.clone();  clone.data=(DefaultKeyedValues)this.data.clone();  return clone;}  }
class C{  private void doJazziness(View item,int position,int scrollDirection){  if (mIsScrolling) {    if (mOnlyAnimateNewItems && mAlreadyAnimatedItems.contains(position))     return;    if (mOnlyAnimateOnFling && !mIsFlingEvent)     return;    if (mMaxVelocity > MAX_VELOCITY_OFF && mMaxVelocity < mSpeed)     return;    if (mSimulateGridWithList) {      ViewGroup itemRow=(ViewGroup)item;      for (int i=0; i < itemRow.getChildCount(); i++)       doJazzinessImpl(itemRow.getChildAt(i),position,scrollDirection);    } else {      doJazzinessImpl(item,position,scrollDirection);    }    mAlreadyAnimatedItems.add(position);  }}  }
class C{  DenseTernaryPolynomial(int N){  super(N);  checkTernarity();}  }
class C{  public Value[] readRow(Value[] row) throws SQLException {  StatementBuilder buff=new StatementBuilder("SELECT ");  appendColumnList(buff,false);  buff.append(" FROM ");  appendTableName(buff);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  setKey(prep,1,row);  ResultSet rs=prep.executeQuery();  if (!rs.next()) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }  Value[] newRow=new Value[columnCount];  for (int i=0; i < columnCount; i++) {    int type=result.getColumnType(i);    newRow[i]=DataType.readValue(conn.getSession(),rs,i + 1,type);  }  return newRow;}  }
class C{  public void validateStorage(String name,File storageDir) throws BackupException {  String suffix=" name=" + name + " location="+ storageDir;  if (!storageDir.isDirectory())   throw new BackupException("Storage location is not a directory:" + suffix); else   if (!storageDir.canRead())   throw new BackupException("Storage location is not readable:" + suffix);}  }
class C{  static RandoopOptions createOptions(TestEnvironment testEnvironment){  RandoopOptions options=new RandoopOptions();  options.setOption("junit-output-dir",testEnvironment.sourceDir.toString());  options.setOption("log",testEnvironment.workingDir + "/randoop-log.txt");  return options;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected void generateIndividualSeries(ResultKey key,DefaultTableXYDataset dataset){  for (  Accumulator accumulator : controller.get(key)) {    if (!accumulator.keySet().contains(metric)) {      continue;    }    XYSeries series=new XYSeries(key,false,false);    for (int i=0; i < accumulator.size(metric); i++) {      series.add((Number)accumulator.get("NFE",i),(Number)accumulator.get(metric,i));    }    dataset.addSeries(series);  }}  }
class C{  public Matrix4x3d rotationX(double ang){  double sin, cos;  if (ang == Math.PI || ang == -Math.PI) {    cos=-1.0;    sin=0.0;  } else   if (ang == Math.PI * 0.5 || ang == -Math.PI * 1.5) {    cos=0.0;    sin=1.0;  } else   if (ang == -Math.PI * 0.5 || ang == Math.PI * 1.5) {    cos=0.0;    sin=-1.0;  } else {    cos=Math.cos(ang);    sin=Math.sin(ang);  }  m00=1.0;  m01=0.0;  m02=0.0;  m10=0.0;  m11=cos;  m12=sin;  m20=0.0;  m21=-sin;  m22=cos;  m30=0.0;  m31=0.0;  m32=0.0;  properties=0;  return this;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static boolean isClassType(TypeMirror type){  return (type instanceof Type.ClassType);}  }
class C{  public boolean jdbcCompliant(){  return lastUnderlyingDriverRequested != null && lastUnderlyingDriverRequested.jdbcCompliant();}  }
class C{  public void startMethod(String methodName,String type,short flags){  short methodNameIndex=itsConstantPool.addUtf8(methodName);  short typeIndex=itsConstantPool.addUtf8(type);  itsCurrentMethod=new ClassFileMethod(methodName,methodNameIndex,type,typeIndex,flags);  itsJumpFroms=new UintMap();  itsMethods.add(itsCurrentMethod);  addSuperBlockStart(0);}  }
class C{  private final void performClearTaskAtIndexLocked(int taskId,int i){  while (i < mHistory.size()) {    ActivityRecord r=mHistory.get(i);    if (r.task.taskId != taskId) {      return;    }    if (r.finishing) {      i++;      continue;    }    if (!finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,"clear",false)) {      i++;    }  }}  }
class C{  public void paintImmediately(Rectangle r){  paintImmediately(r.x,r.y,r.width,r.height);}  }
class C{  public static void zoneChange(final Player player,final String sourceZone,final String destinationZone){  if (sourceZone.equals("0_semos_village_w") && destinationZone.equals("int_semos_guard_house")) {    process(player,TutorialEventType.RETURN_GUARDHOUSE);  } else   if (destinationZone.equals("0_semos_city")) {    process(player,TutorialEventType.VISIT_SEMOS_CITY);  } else   if (destinationZone.equals("int_semos_tavern_0")) {    process(player,TutorialEventType.VISIT_SEMOS_TAVERN);  } else   if (destinationZone.equals("-1_semos_dungeon")) {    process(player,TutorialEventType.VISIT_SEMOS_DUNGEON);  } else   if (destinationZone.equals("-2_semos_dungeon")) {    process(player,TutorialEventType.VISIT_SEMOS_DUNGEON_2);  } else   if (destinationZone.equals("int_afterlife")) {    process(player,TutorialEventType.FIRST_DEATH);  } else   if (destinationZone.equals("0_semos_plains_n")) {    process(player,TutorialEventType.VISIT_SEMOS_PLAINS);  }}  }
class C{  public static double logpdf(double val,double rate){  if (val < 0.) {    return Double.NEGATIVE_INFINITY;  }  return Math.log(rate) - rate * val;}  }
class C{  private String enc(String str){  return HTMLEntities.escapeHTML(str,HTMLEntities.HTMLV20);}  }
class C{  @Override public String toString(){  return this.originalSql;}  }
class C{  public static void createThemeDirIfNotExists(){  createDirIfNotExists(SYSTEM_THEME_PATH);}  }
class C{  public static String updateAllKeywords(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  Security security=(Security)request.getAttribute("security");  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  String updateMode="CREATE";  String errMsg=null;  String doAll=request.getParameter("doAll");  if (!security.hasEntityPermission("CATALOG","_" + updateMode,request.getSession())) {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    errMsg=UtilProperties.getMessage(resource,"productevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  EntityCondition condition=null;  if (!"Y".equals(doAll)) {    List<EntityCondition> condList=FastList.newInstance();    condList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("autoCreateKeywords",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("autoCreateKeywords",EntityOperator.NOT_EQUAL,"N")));    if ("true".equals(EntityUtilProperties.getPropertyValue("prodsearch","index.ignore.variants",delegator))) {      condList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("isVariant",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("isVariant",EntityOperator.NOT_EQUAL,"Y")));    }    if ("true".equals(EntityUtilProperties.getPropertyValue("prodsearch","index.ignore.discontinued.sales",delegator))) {      condList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp)));    }    condition=EntityCondition.makeCondition(condList,EntityOperator.AND);  } else {    condition=EntityCondition.makeCondition(EntityCondition.makeCondition("autoCreateKeywords",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("autoCreateKeywords",EntityOperator.NOT_EQUAL,"N"));  }  EntityListIterator entityListIterator=null;  int numProds=0;  int errProds=0;  boolean beganTx=false;  try {    beganTx=TransactionUtil.begin(7200);    try {      if (Debug.infoOn()) {        long count=EntityQuery.use(delegator).from("Product").where(condition).queryCount();        Debug.logInfo("========== Found " + count + " products to index ==========",module);      }      entityListIterator=EntityQuery.use(delegator).from("Product").where(condition).queryIterator();    } catch (    GenericEntityException gee) {      Debug.logWarning(gee,gee.getMessage(),module);      Map<String,String> messageMap=UtilMisc.toMap("gee",gee.toString());      errMsg=UtilProperties.getMessage(resource,"productevents.error_getting_product_list",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      throw gee;    }    GenericValue product;    while ((product=entityListIterator.next()) != null) {      try {        KeywordIndex.indexKeywords(product,"Y".equals(doAll));      } catch (      GenericEntityException e) {        Debug.logWarning("[ProductEvents.updateAllKeywords] Could not create product-keyword (write error); message: " + e.getMessage(),module);        errProds++;      }      numProds++;      if (numProds % 500 == 0) {        Debug.logInfo("Keywords indexed for " + numProds + " so far",module);      }    }  } catch (  GenericEntityException e) {    try {      TransactionUtil.rollback(beganTx,e.getMessage(),e);    } catch (    Exception e1) {      Debug.logError(e1,module);    }    return "error";  }catch (  Throwable t) {    Debug.logError(t,module);    request.setAttribute("_ERROR_MESSAGE_",t.getMessage());    try {      TransactionUtil.rollback(beganTx,t.getMessage(),t);    } catch (    Exception e2) {      Debug.logError(e2,module);    }    return "error";  } finally {    if (entityListIterator != null) {      try {        entityListIterator.close();      } catch (      GenericEntityException gee) {        Debug.logError(gee,"Error closing EntityListIterator when indexing product keywords.",module);      }    }    try {      TransactionUtil.commit(beganTx);    } catch (    Exception e) {      Debug.logError(e,module);    }  }  if (errProds == 0) {    Map<String,String> messageMap=UtilMisc.toMap("numProds",Integer.toString(numProds));    errMsg=UtilProperties.getMessage(resource,"productevents.keyword_creation_complete_for_products",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_EVENT_MESSAGE_",errMsg);    return "success";  } else {    Map<String,String> messageMap=UtilMisc.toMap("numProds",Integer.toString(numProds));    messageMap.put("errProds",Integer.toString(errProds));    errMsg=UtilProperties.getMessage(resource,"productevents.keyword_creation_complete_for_products_with_errors",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }}  }
class C{  public void testFile() throws IOException {  File f=new File("/tmp/foo.txt");  String str=serializeAsString(new ObjectMapper(),f);  assertEquals("\"" + f.getAbsolutePath() + "\"",str);}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }}  }
class C{  protected String encodeCookie(SerializableCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  public T valuetype(String value){  return attr("valuetype",value);}  }
class C{  public byte[] toByteArray(){  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=fb.next;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=mb.next;  }  int attributeCount=0;  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / (ClassWriter.ACC_SYNTHETIC_ATTRIBUTE / Opcodes.ACC_SYNTHETIC));  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=fb.next;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=mb.next;  }  out.putShort(attributeCount);  return out.data;}  }
class C{  protected VariableDefinitionImpl(){  super();}  }
class C{  public static Header buildAccessNetworkInfo(String info) throws ParseException {  return HEADER_FACTORY.createHeader(SipUtils.HEADER_P_ACCESS_NETWORK_INFO,info);}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public void addStopHandler(AsynchronousCallback handler){  addHandler(REQUEST_STOP,handler);}  }
class C{  public static void main(String[] args){  TreebankLanguagePack tlp=new PennTreebankLanguagePack();  System.out.println("Start symbol: " + tlp.startSymbol());  String start=tlp.startSymbol();  System.out.println("Should be true: " + (tlp.isStartSymbol(start)));  String[] strs=new String[]{"-","-LLB-","NP-2","NP=3","NP-LGS","NP-TMP=3"};  for (int i=0; i < strs.length; i++) {    String str=strs[i];    System.out.println("String: " + str + " basic: "+ tlp.basicCategory(str)+ " basicAndFunc: "+ tlp.categoryAndFunction(str));  }}  }
class C{  public Compiler(){  m_errorHandler=null;  m_locator=null;}  }
class C{  @Override synchronized public void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  XNetMessage msg=XNetMessage.getWriteOpsModeCVMsg(mAddressHigh,mAddressLow,CV,val);  tc.sendXNetMessage(msg,this);  progListener=p;  value=val;  progState=XNetProgrammer.REQUESTSENT;  restartTimer(msg.getTimeout());}  }
class C{  public void declareDimension(final int dimensionType,final int scale,final int pixelperscale,final int offset,final Long colorNaming,final Long colorScale,final String name){  this.scales[dimensionType]=Math.max(1,scale);  this.pixels[dimensionType]=pixelperscale;  this.offsets[dimensionType]=offset;  this.colnames[dimensionType]=colorNaming;  this.colscale[dimensionType]=colorScale;  this.tablenames[dimensionType]=name;  if ((dimensionType == DIMENSION_LEFT) || (dimensionType == DIMENSION_RIGHT)) {    drawVerticalScale((dimensionType == DIMENSION_LEFT),scale,pixelperscale,offset,colorNaming,colorScale,name);  }  if ((dimensionType == DIMENSION_TOP) || (dimensionType == DIMENSION_BOTTOM)) {    drawHorizontalScale((dimensionType == DIMENSION_TOP),scale,pixelperscale,offset,colorNaming,colorScale,name);  }}  }
class C{  public GVTLineMetrics(LineMetrics lineMetrics,float scaleFactor){  this.ascent=lineMetrics.getAscent() * scaleFactor;  this.baselineIndex=lineMetrics.getBaselineIndex();  this.baselineOffsets=lineMetrics.getBaselineOffsets();  for (int i=0; i < baselineOffsets.length; i++) {    this.baselineOffsets[i]*=scaleFactor;  }  this.descent=lineMetrics.getDescent() * scaleFactor;  this.height=lineMetrics.getHeight() * scaleFactor;  this.leading=lineMetrics.getLeading();  this.numChars=lineMetrics.getNumChars();  this.strikethroughOffset=lineMetrics.getStrikethroughOffset() * scaleFactor;  this.strikethroughThickness=lineMetrics.getStrikethroughThickness() * scaleFactor;  this.underlineOffset=lineMetrics.getUnderlineOffset() * scaleFactor;  this.underlineThickness=lineMetrics.getUnderlineThickness() * scaleFactor;  this.overlineOffset=-this.ascent;  this.overlineThickness=this.underlineThickness;}  }
class C{  public void dispose(){  m_settings.getLayoutSettings().removeListener(m_listener);  m_settings.getProximitySettings().removeListener(m_proximityListener);}  }
class C{  protected void decode(String mgrsString) throws NumberFormatException {  if (mgrsString == null || mgrsString.length() == 0) {    throw new NumberFormatException("MGRSPoint coverting from nothing");  }  mgrsString=mgrsString.toUpperCase();  int length=mgrsString.length();  String hunK=null;  StringBuffer sb=new StringBuffer();  char testChar;  int i=0;  while (!Character.isLetter(testChar=mgrsString.charAt(i))) {    if (i >= 2) {      throw new NumberFormatException("MGRSPoint bad conversion from: " + mgrsString + ", first two characters need to be a number between 1-60.");    }    sb.append(testChar);    i++;  }  zone_number=Integer.parseInt(sb.toString());  if (zone_number < 1 || zone_number > 60) {    throw new NumberFormatException("MGRSPoint bad conversion from: " + mgrsString + ", first two characters need to be a number between 1-60.");  }  if (i == 0 || i + 3 > length) {    throw new NumberFormatException("MGRSPoint bad conversion from: " + mgrsString + ", MGRS string must be at least 4-5 digits long");  }  zone_letter=mgrsString.charAt(i++);  if (zone_letter <= 'A' || zone_letter == 'B' || zone_letter == 'Y' || zone_letter >= 'Z' || zone_letter == 'I' || zone_letter == 'O') {    throw new NumberFormatException("MGRSPoint zone letter " + (char)zone_letter + " not handled: "+ mgrsString);  }  hunK=mgrsString.substring(i,i+=2);  char char1=hunK.charAt(0);  char char2=hunK.charAt(1);  if (char1 < 'A' || char2 < 'A' || char1 > 'Z' || char2 > 'Z' || char1 == 'I' || char2 == 'I' || char1 == 'O' || char2 == 'O') {    throw new NumberFormatException("MGRSPoint bad conversion from " + mgrsString + ", invalid 100k designator");  }  int set=get100kSetForZone(zone_number);  float east100k=getEastingFromChar(char1,set);  float north100k=getNorthingFromChar(char2,set);  while (north100k < getMinNorthing(zone_letter)) {    north100k+=2000000;  }  int remainder=length - i;  if (remainder % 2 != 0) {    throw new NumberFormatException("MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters" + mgrsString);  }  int sep=remainder / 2;  float sepEasting=0f;  float sepNorthing=0f;  if (sep > 0) {    if (DEBUG)     logger.fine(" calculating e/n from " + mgrs.substring(i));    float accuracyBonus=100000f / (float)Math.pow(10,sep);    if (DEBUG)     logger.fine(" calculated accuracy bonus as  " + accuracyBonus);    String sepEastingString=mgrsString.substring(i,i + sep);    if (DEBUG)     logger.fine(" parsed easting as " + sepEastingString);    sepEasting=Float.parseFloat(sepEastingString) * accuracyBonus;    String sepNorthingString=mgrsString.substring(i + sep);    if (DEBUG)     logger.fine(" parsed northing as " + sepNorthingString);    sepNorthing=Float.parseFloat(sepNorthingString) * accuracyBonus;  }  easting=sepEasting + east100k;  northing=sepNorthing + north100k;  if (DEBUG) {    logger.fine("Decoded " + mgrsString + " as zone number: "+ zone_number+ ", zone letter: "+ zone_letter+ ", easting: "+ easting+ ", northing: "+ northing+ ", 100k: "+ hunK);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.391 -0500",hash_original_method="DE2778671ED61CA7054BB4798B489854",hash_generated_method="E75B3D155A17C627E145C3DA4CEF5375") private final void invokeExitMethods(StateInfo commonStateInfo){  while ((mStateStackTopIndex >= 0) && (mStateStack[mStateStackTopIndex] != commonStateInfo)) {    State curState=mStateStack[mStateStackTopIndex].state;    if (mDbg)     Log.d(TAG,"invokeExitMethods: " + curState.getName());    curState.exit();    mStateStack[mStateStackTopIndex].active=false;    mStateStackTopIndex-=1;  }}  }
class C{  protected void freshAttributeInfo(){  ArrayList<Attribute> newList=new ArrayList<Attribute>(m_Attributes.size());  for (  Attribute att : m_Attributes) {    newList.add((Attribute)att.copy());  }  m_Attributes=newList;}  }
class C{  public boolean makeEntrySiblingOfAnother(User user,Entry sibling,Entry moved,boolean justTheEntry,String placement,boolean isAdmin,Errors errors){  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return false;  }  if (sibling == null) {    Errors.add(errors,errorMessages.errorSiblingIsNull());    return false;  }  if (moved == null) {    Errors.add(errors,errorMessages.errorMovedIsNull());    return false;  }  if (placement == null) {    Errors.add(errors,errorMessages.errorPlacementIsNull());    return false;  }  if (!placement.equals("previous") && !placement.equals("next")) {    Errors.add(errors,errorMessages.errorPlacementIsNotValid());    return false;  }  if (!canUserModifyEntry(user,sibling,isAdmin)) {    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyTheSiblingEntry());    return false;  }  if (!canUserModifyEntry(user,moved,isAdmin)) {    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyTheMovedEntry());    return false;  }  if (!sibling.hasParentId()) {    Errors.add(errors,errorMessages.errorSiblingHasNoParent());    return false;  }  if (!justTheEntry) {    if (isEntryADescendantOfAncestor(sibling,moved)) {      Errors.add(errors,errorMessages.errorMovedIsAnAncestorOfTheSibling());      return false;    }  } else {    final ArrayList<Entry> movedsChildrenInOrder=getChildrenInOrder(moved);    final Entry parentOfMoved=getEntryById(moved.getParentId());    for (    final Entry movedsChildTemp : movedsChildrenInOrder) {      if (!makeNotebookEntry(user,movedsChildTemp,isAdmin,errors)) {        return false;      }    }    if (parentOfMoved != null) {      Entry previous=moved;      for (      final Entry movedsChildTemp : movedsChildrenInOrder) {        if (!createParentChildRelationship(user,parentOfMoved,movedsChildTemp,previous,isAdmin,errors)) {          return false;        }        previous=movedsChildTemp;      }    }  }  final Entry parentOfSibling=getEntryById(sibling.getParentId());  final boolean placementIsNext=placement.equals("next");  boolean placedWhenReparented=false;  if (!moved.hasParentId() || !sibling.getParentId().equals(moved.getParentId())) {    if (moved.getParentId() != null) {      if (!makeNotebookEntry(user,moved,isAdmin,errors)) {        return false;      }    }    if (placementIsNext) {      placedWhenReparented=true;    }    if (!createParentChildRelationship(user,parentOfSibling,moved,placedWhenReparented ? sibling : null,isAdmin,errors)) {      return false;    }  }  if (!placedWhenReparented) {    snipOutEntry(moved,parentOfSibling,false);    if (placementIsNext) {      insertEntryAfter(moved,sibling,false);    } else {      insertEntryBefore(moved,sibling,false);    }  }  return true;}  }
class C{  public TransactionHit txTax(Double value){  setDouble(TRANSACTION_TAX,value);  return this;}  }
class C{  protected void drawMinimizeButton(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  OGLStackHandler oglStack=new OGLStackHandler();  try {    oglStack.pushModelviewIdentity(gl);    int x=(int)this.innerBounds.getMaxX() - this.getActiveAttributes().getIconSpace() - this.buttonSize;    int y=(int)this.innerBounds.getMaxY() - (this.titleBarHeight - this.buttonSize) / 2 - this.buttonSize;    gl.glTranslated(x,y,0.0);    if (!dc.isPickingMode()) {      Color color=this.getActiveAttributes().getMinimizeButtonColor();      FrameAttributes attributes=this.getActiveAttributes();      OGLUtil.applyColor(gl,color,attributes.getForegroundOpacity(),false);      gl.glRectf(0,0,buttonSize,buttonSize);      OGLUtil.applyColor(gl,attributes.getForegroundColor(),false);      gl.glBegin(GL2.GL_LINE_LOOP);      try {        gl.glVertex2f(0f,0f);        gl.glVertex2f(0.5f,buttonSize + 0.5f);        gl.glVertex2f(buttonSize,buttonSize + 0.5f);        gl.glVertex2f(buttonSize,0);      }  finally {        gl.glEnd();      }      gl.glBegin(GL2.GL_LINES);      try {        gl.glVertex2f(buttonSize / 4f,buttonSize / 2f);        gl.glVertex2f(buttonSize - buttonSize / 4f,buttonSize / 2f);        if (this.isMinimized()) {          gl.glVertex2f(buttonSize / 2f,buttonSize / 4f);          gl.glVertex2f(buttonSize / 2f,buttonSize - buttonSize / 4f);        }      }  finally {        gl.glEnd();      }    } else {      Color color=dc.getUniquePickColor();      int colorCode=color.getRGB();      this.pickSupport.addPickableObject(colorCode,this.minimizeButton,null,false);      gl.glColor3ub((byte)color.getRed(),(byte)color.getGreen(),(byte)color.getBlue());      gl.glScaled(buttonSize,buttonSize,1d);      dc.drawUnitQuad();    }  }  finally {    oglStack.pop(gl);  }}  }
class C{  public void enableExport(boolean b){  exportItem.setEnabled(b);}  }
class C{  protected AbstractDeployer createDeployer(InstalledLocalContainer jbossContainer){  return new JBoss7xInstalledLocalDeployer(jbossContainer);}  }
class C{  private void loadDictionary(){  dictionary=new HashSet<>();  InputStream in=this.getClass().getResourceAsStream("resources/dictionary.txt");  if (in == null) {    legacyLoadDictionary();    return;  }  Scanner scanner=new Scanner(in);  String s=null;  while (scanner.hasNextLine()) {    s=scanner.nextLine();    dictionary.add(s);  }}  }
class C{  @RequestMapping(value="/annuals",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> create(@RequestBody Annual annual) throws URISyntaxException {  log.debug("REST request to save Annual : {}",annual);  if (annual.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new annual cannot already have an ID").build();  }  annual=annualRepository.save(annual);  return ResponseEntity.created(new URI("/api/annuals/" + annual.getId())).build();}  }
class C{  public AclEntry addAclRole(AclRole role,AclScope scope,String resourceId) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (role == null || scope == null || resourceId == null) {    throw new DocumentListException("null passed in for required parameters");  }  AclEntry entry=new AclEntry();  entry.setRole(role);  entry.setScope(scope);  URL url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + "/"+ resourceId+ URL_ACL);  return service.insert(url,entry);}  }
class C{  protected AbstractIndexComponent(Index index,Settings indexSettings){  this.index=index;  this.indexSettings=indexSettings;  this.logger=Loggers.getLogger(getClass(),indexSettings,index);  this.deprecationLogger=new DeprecationLogger(logger);}  }
class C{  public static HostInternetScsiHbaSendTarget[] createInternetScsiSendTargets(String... addresses){  HostInternetScsiHbaSendTarget[] targets=new HostInternetScsiHbaSendTarget[addresses.length];  for (int i=0; i < addresses.length; i++) {    targets[i]=createInternetScsiSendTarget(addresses[i]);  }  return targets;}  }
class C{  public void removeIm(ImEntity im){  ims.remove(im);}  }
class C{  public void inject(Service svc) throws IgniteCheckedException {  injectGeneric(svc);}  }
class C{  public boolean findCellForSpan(int[] cellXY,int spanX,int spanY){  boolean foundCell=false;  final int endX=mCountX - (spanX - 1);  final int endY=mCountY - (spanY - 1);  for (int y=0; y < endY && !foundCell; y++) {    inner:     for (int x=0; x < endX; x++) {      for (int i=0; i < spanX; i++) {        for (int j=0; j < spanY; j++) {          if (mOccupied[x + i][y + j]) {            x+=i;            continue inner;          }        }      }      if (cellXY != null) {        cellXY[0]=x;        cellXY[1]=y;      }      foundCell=true;      break;    }  }  return foundCell;}  }
class C{  public static String formatCurrentDate(){  Calendar calendar=Calendar.getInstance();  SimpleDateFormat sdf=new SimpleDateFormat(CallHomeConstants.SERIALIZE_DATE_FORMAT);  return sdf.format(calendar.getTime());}  }
class C{  private void step3(){  final SpeakerNPC npc=npcs.get("Finn Farmer");  npc.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new QuestInStateCondition(QUEST_SLOT,QUEST_INDEX_STATUS,"deliver_to_finn"),ConversationStates.QUEST_ITEM_BROUGHT,"And, what did George say?",null);  npc.add(ConversationStates.QUEST_ITEM_BROUGHT,"",new TriggerMatchesQuestSlotCondition(QUEST_SLOT,QUEST_INDEX_MESSAGE),ConversationStates.ATTENDING,null,new MultipleActions(new SetQuestAction(QUEST_SLOT,QUEST_INDEX_STATUS,"done"),new IncrementQuestAction(QUEST_SLOT,QUEST_INDEX_REPEATED,1),new SetQuestToTimeStampAction(QUEST_SLOT,QUEST_INDEX_TIME),new SetQuestToFutureRandomTimeStampAction(QUEST_SLOT,QUEST_INDEX_TIME,REQUIRED_MINUTES,REQUIRED_MINUTES),new IncreaseXPAction(200),new IncreaseKarmaAction(10),new SayTextAction("Oh, thank you for telling George!"),new SayTextAction("!me dances around happily."),new SayTextAction("This was really important!"),new SayTextAction("And his answer is super interesting!"),new SayTextAction("I will be on the watch!"),new SayTextAction("Perhaps, I have another message for you tomorrow.")));  npc.add(ConversationStates.QUEST_ITEM_BROUGHT,"",new AndCondition(new NotCondition(new TriggerMatchesQuestSlotCondition(QUEST_SLOT,QUEST_INDEX_MESSAGE)),new TriggerMightbeACodedMessageCondition()),ConversationStates.QUEST_ITEM_BROUGHT,"Oh? That doesn't make any sense at all!",null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getDefaultQuality();}  }
class C{  public void cleanOplet(String jobId,String elementId){  for (  BiConsumer<String,String> cleaner : cleaners)   cleaner.accept(jobId,elementId);}  }
class C{  public static ColorRGB fromColor(java.awt.Color color){  return new ColorRGB(color.getRed(),color.getGreen(),color.getBlue());}  }
class C{  public PaymentDataException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @Override public void doubleClicked(ITextViewer viewer){  fText=viewer;  curPos=viewer.getSelectedRange().x;  if (curPos < 0 || curPos >= fText.getDocument().getLength()) {    return;  }  if (!selectBracketBlock()) {    selectWord();  }}  }
class C{  boolean isHot(){  return queueNext == null;}  }
class C{  public Iterator fieldValuesIterator(){  return super.iterator();}  }
class C{  public void writeAll(List<String[]> allLines,boolean applyQuotesToAll){  for (  String[] line : allLines) {    writeNext(line,applyQuotesToAll);  }}  }
class C{  public void testUIBinderWizard() throws Exception {  SwtBotProjectActions.createUiBinder(bot,PROJECT_NAME,PACKAGE_NAME,"TestWithContent",true,true);  String text=SwtBotMenuActions.getEditorText(bot,"TestWithContent.java");  assertTrue(text.contains("implements HasText"));  assertTrue(text.contains("public TestWithContent()"));  assertTrue(text.contains("public TestWithContent(String firstName)"));  SwtBotProjectActions.createUiBinder(bot,PROJECT_NAME,PACKAGE_NAME,"TestWithoutContent",false,true);  String text2=SwtBotMenuActions.getEditorText(bot,"TestWithoutContent.java");  assertFalse(text2.contains("implements HasText"));  assertTrue(text2.contains("public TestWithoutContent()"));  assertFalse(text2.contains("public TestWithoutContent(String firstName)"));}  }
class C{  public void addException(final String key,final String value){  if (value == null) {    keyValueExceptions.put(key,null);  } else {    Set<String> values=MapUtils.getSet(key,keyValueExceptions);    values.add(value);  }}  }
class C{  public IntArrayDataRow(int[] data){  this.data=data;}  }
class C{  public PossibilityIterator(Map<Token,LinkedHashMap<String,Integer>> suggestions,int maximumRequiredSuggestions,int maxEvaluations,boolean overlap){  this.suggestionsMayOverlap=overlap;  for (  Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions.entrySet()) {    Token token=entry.getKey();    if (entry.getValue().size() == 0) {      continue;    }    List<SpellCheckCorrection> possibleCorrections=new ArrayList<>();    for (    Map.Entry<String,Integer> entry1 : entry.getValue().entrySet()) {      SpellCheckCorrection correction=new SpellCheckCorrection();      correction.setOriginal(token);      correction.setCorrection(entry1.getKey());      correction.setNumberOfOccurences(entry1.getValue());      possibleCorrections.add(correction);    }    possibilityList.add(possibleCorrections);  }  int wrapSize=possibilityList.size();  if (wrapSize == 0) {    done=true;  } else {    correctionIndex=new int[wrapSize];    for (int i=0; i < wrapSize; i++) {      int suggestSize=possibilityList.get(i).size();      if (suggestSize == 0) {        done=true;        break;      }      correctionIndex[i]=0;    }  }  PriorityQueue<RankedSpellPossibility> rankedPossibilities=new PriorityQueue<>(11,new RankComparator());  Set<RankedSpellPossibility> removeDuplicates=null;  if (suggestionsMayOverlap) {    removeDuplicates=new HashSet<>();  }  long numEvaluations=0;  while (numEvaluations < maxEvaluations && internalHasNext()) {    RankedSpellPossibility rsp=internalNext();    numEvaluations++;    if (rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.rank >= rankedPossibilities.peek().rank) {      continue;    }    if (!isSuggestionForReal(rsp)) {      continue;    }    if (removeDuplicates == null) {      rankedPossibilities.offer(rsp);    } else {      Collections.sort(rsp.corrections,new StartOffsetComparator());      if (removeDuplicates.add(rsp)) {        rankedPossibilities.offer(rsp);      }    }    if (rankedPossibilities.size() > maximumRequiredSuggestions) {      RankedSpellPossibility removed=rankedPossibilities.poll();      if (removeDuplicates != null) {        removeDuplicates.remove(removed);      }    }  }  RankedSpellPossibility[] rpArr=new RankedSpellPossibility[rankedPossibilities.size()];  for (int i=rankedPossibilities.size() - 1; i >= 0; i--) {    rpArr[i]=rankedPossibilities.remove();  }  rankedPossibilityIterator=Arrays.asList(rpArr).iterator();}  }
class C{  public void testOverride() throws Exception {  WasNumberBean bean=new ObjectMapper().readValue("{\"value\" : \"abc\"}",WasNumberBean.class);  assertNotNull(bean);  assertEquals("abc",bean.value);}  }
class C{  @Nullable public static String findShortestImportableName(@NotNull PsiElement foothold,@NotNull VirtualFile vfile){  final QualifiedName qName=findShortestImportableQName(foothold,vfile);  return qName == null ? null : qName.toString();}  }
class C{  protected void prepareOutgoingSearchRequest(OutgoingSearchRequest message){}  }
class C{  public boolean isFullscreen(){  return fullscreen;}  }
class C{  public boolean processVmCreateNetwork(Vm vm){  boolean result=getVmAllocationPolicy().allocateHostForVm(vm);  if (result) {    VmToSwitchid.put(vm.getId(),((NetworkHost)vm.getHost()).sw.getId());    VmtoHostlist.put(vm.getId(),vm.getHost().getId());    System.out.println(vm.getId() + " VM is created on " + vm.getHost().getId());    getVmList().add(vm);    vm.updateVmProcessing(CloudSim.clock(),getVmAllocationPolicy().getHost(vm).getVmScheduler().getAllocatedMipsForVm(vm));  }  return result;}  }
class C{  public Vector<String> wrapComment(String comment,int textSpace){  StringTokenizer commentTokens=new StringTokenizer(comment,"\n",true);  Vector<String> textVector=new Vector<>(commentTokens.countTokens());  while (commentTokens.hasMoreTokens()) {    String commentToken=commentTokens.nextToken();    int startIndex=0;    int endIndex;    if (commentToken.length() < startIndex + textSpace) {      textVector.addElement(commentToken);    } else {      if (log.isDebugEnabled()) {        log.debug("token: /" + commentToken + "/");      }      while (startIndex < commentToken.length()) {        String tokenPiece=commentToken.substring(startIndex,startIndex + textSpace);        if (log.isDebugEnabled()) {          log.debug("loop: /" + tokenPiece + "/ "+ tokenPiece.lastIndexOf(" "));        }        if (tokenPiece.lastIndexOf(" ") == -1) {          textVector.addElement(tokenPiece);          textVector.addElement(newLine);          startIndex+=textSpace;        } else {          endIndex=tokenPiece.lastIndexOf(" ") + 1;          if (log.isDebugEnabled()) {            log.debug("/" + tokenPiece + "/ "+ startIndex+ " "+ endIndex);          }          textVector.addElement(tokenPiece.substring(0,endIndex));          textVector.addElement(newLine);          startIndex+=endIndex;        }        if (commentToken.substring(startIndex).length() < textSpace) {          textVector.addElement(commentToken.substring(startIndex));          startIndex+=textSpace;        }      }    }  }  return textVector;}  }
class C{  public VerletParticle2D(ReadonlyVec2D v,float w){  this(v.x(),v.y(),w);}  }
class C{  public Legal checkEdgeLegality(final Direction direction){  if (null == this.edgeFilter)   return Legal.YES; else   if (this.allowNoEdges)   return Legal.NO;  return this.edgeLegality.get(direction).values().stream().reduce(Legal.NO,null);}  }
class C{  private String toText(IXMLElement elem,String value) throws IOException {  String space=readInheritAttribute(elem,"xml:space","default");  if (space.equals("default")) {    return value.trim().replaceAll("\\s++"," ");  } else {    return value;  }}  }
class C{  public boolean isInFiles(IResource resource){  if (!hasFiles()) {    return false;  }  String filename=getRelativePath(resource).toString();  if (resource.getType() == IResource.FILE) {    return getFiles().contains(filename);  }  for (  String name : getFiles()) {    if (name.startsWith(filename)) {      return true;    }  }  return false;}  }
class C{  public NativePooledByteBufferOutputStream(NativeMemoryChunkPool pool,int initialCapacity){  super();  Preconditions.checkArgument(initialCapacity > 0);  mPool=Preconditions.checkNotNull(pool);  mCount=0;  mBufRef=CloseableReference.of(mPool.get(initialCapacity),mPool);}  }
class C{  public static boolean isServer(){  return FMLCommonHandler.instance().getEffectiveSide().isServer();}  }
class C{  public void destroy(){  log.info("destroy");}  }
class C{  public static String scnl(){  return scnl;}  }
class C{  public static <T>boolean addAll(Collection<? super T> c,T... a){  boolean modified=false;  for (int i=0; i < a.length; i++) {    modified|=c.add(a[i]);  }  return modified;}  }
class C{  public static String addAsterisk(String s,int index){  if (s != null) {    index=Math.min(index,s.length());    s=s.substring(0,index) + "[*]" + s.substring(index);  }  return s;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public static String domToString(Document domDoc){  return domToString(domDoc.getDocumentElement(),false);}  }
class C{  private void updateParentTail(CacheDataPage parentDataPage,CacheDataPage childDataPage,UpdateType upType) throws IOException {  DataPageMain parentMain=parentDataPage._main;  int newChildTailPageNumber=((upType == UpdateType.REMOVE) ? INVALID_INDEX_PAGE_NUMBER : childDataPage._main._pageNumber);  if (!parentMain.isChildTailPageNumber(newChildTailPageNumber)) {    setModified(parentDataPage);    parentMain._childTailPageNumber=newChildTailPageNumber;  }}  }
class C{  protected void onClickFrontView(int position){  if (swipeListViewListener != null && position != ListView.INVALID_POSITION) {    swipeListViewListener.onClickFrontView(position);  }}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public static Bitmap createThumbnailBitmap(Bitmap bitmap,Context context){  int sIconWidth=-1;  int sIconHeight=-1;  final Resources resources=context.getResources();  sIconWidth=sIconHeight=(int)resources.getDimension(android.R.dimen.app_icon_size);  final Paint sPaint=new Paint();  final Rect sBounds=new Rect();  final Rect sOldBounds=new Rect();  Canvas sCanvas=new Canvas();  int width=sIconWidth;  int height=sIconHeight;  sCanvas.setDrawFilter(new PaintFlagsDrawFilter(Paint.DITHER_FLAG,Paint.FILTER_BITMAP_FLAG));  final int bitmapWidth=bitmap.getWidth();  final int bitmapHeight=bitmap.getHeight();  if (width > 0 && height > 0) {    if (width < bitmapWidth || height < bitmapHeight) {      final float ratio=(float)bitmapWidth / bitmapHeight;      if (bitmapWidth > bitmapHeight) {        height=(int)(width / ratio);      } else       if (bitmapHeight > bitmapWidth) {        width=(int)(height * ratio);      }      final Bitmap.Config c=(width == sIconWidth && height == sIconHeight) ? bitmap.getConfig() : Bitmap.Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      sBounds.set((sIconWidth - width) / 2,(sIconHeight - height) / 2,width,height);      sOldBounds.set(0,0,bitmapWidth,bitmapHeight);      canvas.drawBitmap(bitmap,sOldBounds,sBounds,paint);      return thumb;    } else     if (bitmapWidth < width || bitmapHeight < height) {      final Bitmap.Config c=Bitmap.Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      canvas.drawBitmap(bitmap,(sIconWidth - bitmapWidth) / 2,(sIconHeight - bitmapHeight) / 2,paint);      return thumb;    }  }  return bitmap;}  }
class C{  void writeTo(byte[] b,int off){  System.arraycopy(buf,0,b,off,count);}  }
class C{  public boolean addGpsTags(double latitude,double longitude){  ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));  ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));  ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? ExifInterface.GpsLatitudeRef.NORTH : ExifInterface.GpsLatitudeRef.SOUTH);  ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? ExifInterface.GpsLongitudeRef.EAST : ExifInterface.GpsLongitudeRef.WEST);  if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {    return false;  }  setTag(latTag);  setTag(longTag);  setTag(latRefTag);  setTag(longRefTag);  return true;}  }
class C{  public String nextString(){  double sum=0;  for (  Pair p : _values) {    sum+=p._weight;  }  double val=Utils.random().nextDouble();  for (  Pair p : _values) {    if (val < p._weight / sum) {      return p._value;    }    val-=p._weight / sum;  }  System.out.println("oops. should not get here.");  System.exit(0);  return null;}  }
class C{  public EnumState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState,Collection<Region<S,E>> regions){  super(id,deferred,entryActions,exitActions,pseudoState,regions);}  }
class C{  public static String toUTF8String(String s){  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));}  }
class C{  public PaddedPanel(String label,int padding){  this(label,padding,padding,padding,padding);}  }
class C{  public IntegrationRuntimeException(){  super();}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public Account(final String username,final String password,final Set<Role> roles){  super();  this.username=username;  this.password=password;  this.roles=roles;}  }
class C{  public void drawString(String str,int x,int y){  drawString(str,(float)x,(float)y);}  }
class C{  private void initializeLight(String systemName){  mBit=SerialAddress.getBitFromSystemName(systemName);  setState(OFF);}  }
class C{  HasOrderTypeView(Document parent,Map<String,Object> data,Class<? extends Document> mainInterface){  super(parent,data,mainInterface);}  }
class C{  public E push(E object){  addElement(object);  return object;}  }
class C{  public TrieNode(E value){  this.value=value;}  }
class C{  public static boolean isValidType(short type){  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;}  }
class C{  private boolean validateNewPassword(RequestAndResponse requestAndResponse,final User editedUser,final boolean currentIsEditedUser,final String newPassword,final String newPassword2) throws IOException {  boolean hasErrors=false;  if (newPassword == null || newPassword.isEmpty()) {    addErrorMessage(requestAndResponse,servletText.errorFirstPasswordMustBeSet(currentIsEditedUser,editedUser.getUserName()));    hasErrors=true;  }  if (newPassword2 == null || newPassword2.isEmpty()) {    addErrorMessage(requestAndResponse,servletText.errorSecondPasswordMustBeSet(currentIsEditedUser,editedUser.getUserName()));    hasErrors=true;  }  if (!hasErrors && newPassword != null && newPassword2 != null && !newPassword2.equals(newPassword)) {    addErrorMessage(requestAndResponse,servletText.errorPasswordsMustMatch());    hasErrors=true;  }  if (!hasErrors && !AccountAttributeValidator.isPasswordValid(newPassword)) {    addErrorMessage(requestAndResponse,servletText.errorPasswordIsNotValid());    hasErrors=true;  }  return hasErrors;}  }
class C{  private static int intLCM(int a,int b){  return a * (b / intGCD(a,b));}  }
class C{  private void runInverter(Path nodeDb,Path outlinkDb,Path loopDb,Path output) throws IOException {  JobConf inverter=new NutchJob(getConf());  inverter.setJobName("LinkAnalysis Inverter");  FileInputFormat.addInputPath(inverter,nodeDb);  FileInputFormat.addInputPath(inverter,outlinkDb);  if (loopDb != null) {    FileInputFormat.addInputPath(inverter,loopDb);  }  FileOutputFormat.setOutputPath(inverter,output);  inverter.setInputFormat(SequenceFileInputFormat.class);  inverter.setMapperClass(Inverter.class);  inverter.setReducerClass(Inverter.class);  inverter.setMapOutputKeyClass(Text.class);  inverter.setMapOutputValueClass(ObjectWritable.class);  inverter.setOutputKeyClass(Text.class);  inverter.setOutputValueClass(LinkDatum.class);  inverter.setOutputFormat(SequenceFileOutputFormat.class);  inverter.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);  LOG.info("Starting inverter job");  try {    JobClient.runJob(inverter);  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  LOG.info("Finished inverter job.");}  }
class C{  public Element addMarkerRect(double x1,double width){  return svgp.svgRect(x1,0,width,plotheight);}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.clear();  }  finally {    lock.unlock();  }}  }
class C{  public boolean last() throws SQLException {  return crsInternal.last();}  }
class C{  private double evaluateList(List<Activity> list){  double value=0.0;  for (int i=0; i < list.size() - 1; i++) {    for (int j=i + 1; j < list.size(); j++) {      Node ni=NetworkUtils.getNearestLink(network,list.get(i).getCoord()).getToNode();      Node nj=NetworkUtils.getNearestLink(network,list.get(j).getCoord()).getFromNode();      if (!routeMap.containsKey(ni.getId())) {        routeMap.put(ni.getId(),new HashMap<Id<Node>,Double>());      }      Map<Id<Node>,Double> pairMap=routeMap.get(ni.getId());      if (pairMap.containsKey(nj.getId())) {        value+=pairMap.get(nj.getId());      } else {        Path path=router.calcLeastCostPath(ni,nj,Time.UNDEFINED_TIME,null,null);        double pathDistance=path.travelCost;        value+=pathDistance;        pairMap.put(nj.getId(),pathDistance);      }    }  }  return value;}  }
class C{  public <R2>FluentTriFunction<T1,T2,T3,R2> andThen(final Function<? super R,? extends R2> after){  Objects.requireNonNull(after);  return FluentFunctions.of(null);}  }
class C{  public boolean chunkExists(int p_73149_1_,int p_73149_2_){  return true;}  }
class C{  protected CCOrientedTransitionScene(float t,CCScene s,int o){  super(t,s);  orientation=o;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public MalformedChallengeException(String message,Throwable cause){  super(message,cause);}  }
class C{  public final Vec4 toCartesian(){  return toCartesian(this.latitude,this.longitude,this.radius);}  }
class C{  protected void invalidateWrappedText(){  for (  Map.Entry<TreeNode,NodeLayout> entry : this.layoutCache.entrySet()) {    entry.getValue().wrappedText=null;  }}  }
class C{  public QueryDataDescription clone(){  QueryDataDescription result=new QueryDataDescription();  result.RelativePath=RelativePath == null ? null : RelativePath.clone();  result.AttributeId=AttributeId;  result.IndexRange=IndexRange;  return result;}  }
class C{  public void add(RegularTimePeriod period,BigDecimal vostro){  if (!this.isEmpty()) {    VostroItem item0=(VostroItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new VostroItem(period,vostro),true);}  }
class C{  @Override public String toString(){switch (this.state) {case STOPPED:    return "STOPPED";case RUNNING:  return "RUNNING";case CLOSED:return "CLOSED";default :return "UNKNOWN";}}  }
class C{  public boolean increment(int key){  return adjustValue(key,1);}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Ignore @Test public void testClientToServerCommits(){  fail("Invoking bad method");  int port1=0;  client1.invoke(null);  Wait.pause(PAUSE);  server1.invoke(null);  server2.invoke(null);  client2.invoke(null);}  }
class C{  public static ArrayOfDoublesSketch wrapSketch(final Memory mem){  return wrapSketch(mem,DEFAULT_UPDATE_SEED);}  }
class C{  public boolean isRunning(){  return m_Running;}  }
class C{  public static BaselineShift newInstance(BaselineShiftAsEnum baselineShiftAsEnum){  BaselineShift baselineShift=new BaselineShift();  baselineShift.baselineShiftAsEnum=baselineShiftAsEnum;  return baselineShift;}  }
class C{  public void reset(){  this.current=root;}  }
class C{  public RandomMultiGraphNeighbors(BipartiteGraph bipartiteGraph,StatsReceiver statsReceiver){  this.bipartiteGraph=bipartiteGraph;  StatsReceiver scopedStatsReceiver=statsReceiver.scope(this.getClass().getSimpleName());  this.numOfNeighborsCounter=scopedStatsReceiver.counter("numOfNeighbors");  this.numOfUniqueNeighborsCounter=scopedStatsReceiver.counter("numOfUniqueNeighbors");}  }
class C{  private void closeDatabaseNow(String dbName){  SQLiteDatabase mydb=this.getDatabase(dbName);  if (mydb != null) {    mydb.close();  }}  }
class C{  protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationConfig config,SettableBeanProperty prop){  String refName=prop.getManagedReferenceName();  if (refName == null) {    return prop;  }  JsonDeserializer<?> valueDeser=prop.getValueDeserializer();  SettableBeanProperty backProp=null;  boolean isContainer=false;  if (valueDeser instanceof BeanDeserializer) {    backProp=((BeanDeserializer)valueDeser).findBackReference(refName);  } else   if (valueDeser instanceof ContainerDeserializerBase<?>) {    JsonDeserializer<?> contentDeser=((ContainerDeserializerBase<?>)valueDeser).getContentDeserializer();    if (!(contentDeser instanceof BeanDeserializer)) {      throw new IllegalArgumentException("Can not handle managed/back reference '" + refName + "': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer "+ " (instead it's of type "+ contentDeser.getClass().getName()+ ")");    }    backProp=((BeanDeserializer)contentDeser).findBackReference(refName);    isContainer=true;  } else   if (valueDeser instanceof AbstractDeserializer) {    throw new IllegalArgumentException("Can not handle managed/back reference for abstract types (property " + _beanType.getRawClass().getName() + "."+ prop.getName()+ ")");  } else {    throw new IllegalArgumentException("Can not handle managed/back reference '" + refName + "': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but "+ valueDeser.getClass().getName());  }  if (backProp == null) {    throw new IllegalArgumentException("Can not handle managed/back reference '" + refName + "': no back reference property found from type "+ prop.getType());  }  JavaType referredType=_beanType;  JavaType backRefType=backProp.getType();  if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {    throw new IllegalArgumentException("Can not handle managed/back reference '" + refName + "': back reference type ("+ backRefType.getRawClass().getName()+ ") not compatible with managed type ("+ referredType.getRawClass().getName()+ ")");  }  return new SettableBeanProperty.ManagedReferenceProperty(refName,prop,backProp,_forClass.getAnnotations(),isContainer);}  }
class C{  public Support_StringWriter(){  super();  buf=new StringBuffer(16);  lock=buf;}  }
class C{  private void ensureCapacityInternal(int minimumCapacity){  if (minimumCapacity - value.length > 0)   expandCapacity(minimumCapacity);}  }
class C{  final public void addPropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  private static double[][] flip(double[][] matrix){  double[][] flip=new double[matrix.length][matrix[0].length];  for (int i=0; i < flip.length; i++) {    for (int j=0; j < flip[0].length; j++) {      flip[i][j]=matrix[matrix.length - 1 - i][j];    }  }  return flip;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.226 -0500",hash_original_method="29588F3CD418602F0EF69BC1734C6254",hash_generated_method="9AA1DA54F15D99778DFFA4BD82692285") public static boolean isDefined(int codePoint){  return isDefinedImpl(codePoint);}  }
class C{  public boolean isInBitmapMemoryCache(final ImageRequest imageRequest){  final CacheKey cacheKey=mCacheKeyFactory.getBitmapCacheKey(imageRequest);  CloseableReference<CloseableImage> ref=mBitmapMemoryCache.get(cacheKey);  try {    return CloseableReference.isValid(ref);  }  finally {    CloseableReference.closeSafely(ref);  }}  }
class C{  private void synthesise(String utterance,SpeechData output){  try {    log.fine("calling Nuance server to synthesise utterance \"" + utterance + "\"");    HttpPost httppost=new HttpPost(ttsURI);    httppost.addHeader("Content-Type","text/plain");    httppost.addHeader("Accept","audio/x-wav;codec=pcm;bit=16;rate=16000");    HttpEntity entity=new StringEntity(utterance,"utf-8");    ;    httppost.setEntity(entity);    HttpResponse response=ttsClient.execute(httppost);    HttpEntity resEntity=response.getEntity();    if (resEntity == null || response.getStatusLine().getStatusCode() != 200) {      log.info("Response status: " + response.getStatusLine());      return;    }    output.write(resEntity.getContent());    httppost.releaseConnection();    output.setAsFinal();    ttsCache.put(utterance,output);    log.fine("... Speech synthesis completed (speech duration: " + StringUtils.getShortForm((double)output.length() / 1000) + " s.)");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static int defaultThreads(){  final String s=getEnvironmentMap().get(DEFAULT_THREADS);  if (s == null) {    return getAvailableProcessors();  }  try {    return Math.max(1,Integer.parseInt(s));  } catch (  NumberFormatException e) {    throw new NoTalkbackSlimException("the system configuration for default number of threads is invalid: " + s);  }}  }
class C{  public TransferTransactionAttachment(){}  }
class C{  public boolean isParent(){  Object oo=get_Value(COLUMNNAME_IsParent);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("StringEquality") public Confirmation confirmOrder(int expOrder,String expName){  assert expName != null;  if (expOrder < names.length) {    String name=names[expOrder];    if (name == expName)     return Confirmation.CONFIRMED;    if (name == null)     return Confirmation.CLARIFY;  }  return Confirmation.REJECTED;}  }
class C{  private static synchronized void initLogger(){  if (logger == null) {    logger=Logger.getLogger(SASL_LOGGER_NAME);  }}  }
class C{  public static String stringFor(int n){switch (n) {case CU_FUNC_CACHE_PREFER_NONE:    return "CU_FUNC_CACHE_PREFER_NONE";case CU_FUNC_CACHE_PREFER_SHARED:  return "CU_FUNC_CACHE_PREFER_SHARED";case CU_FUNC_CACHE_PREFER_L1:return "CU_FUNC_CACHE_PREFER_L1";case CU_FUNC_CACHE_PREFER_EQUAL:return "CU_FUNC_CACHE_PREFER_EQUAL";}return "INVALID CUfunc_cache: " + n;}  }
class C{  private void fillTrendTags(final Map<String,Object> dataModel) throws Exception {  dataModel.put(Common.NAV_TREND_TAGS,tagQueryService.getTrendTags(Symphonys.getInt("trendTagsCnt")));}  }
class C{  public Point.Double computeOffset(double width,double height,Double xScale,Double yScale){  double dx=0;  double dy=0;  if (this.getX() != null) {    String units=this.getXUnits();    if (AVKey.PIXELS.equals(units))     dx=this.getX(); else     if (AVKey.INSET_PIXELS.equals(units))     dx=width - this.getX(); else     if (AVKey.FRACTION.equals(units))     dx=(width * this.getX()); else     dx=this.getX();  }  if (this.getY() != null) {    String units=this.getYUnits();    if (AVKey.PIXELS.equals(units))     dy=this.getY(); else     if (AVKey.INSET_PIXELS.equals(units))     dy=height - this.getY(); else     if (AVKey.FRACTION.equals(units))     dy=(height * this.getY()); else     dy=this.getY();  }  if (xScale != null)   dx*=xScale;  if (yScale != null)   dy*=yScale;  return new Point.Double(dx,dy);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (getOutputFormat().numAttributes() == 0) {    return false;  }  if (m_selectedAttributes.length == 0) {    push(instance);  } else {    double vals[]=new double[getOutputFormat().numAttributes()];    for (int i=0; i < instance.numAttributes(); i++) {      double currentV=instance.value(i);      if (!m_selectedCols.isInRange(i)) {        vals[i]=currentV;      } else {        if (currentV == Utils.missingValue()) {          vals[i]=currentV;        } else {          String currentS=instance.attribute(i).value((int)currentV);          String replace=m_ignoreCase ? m_renameMap.get(currentS.toLowerCase()) : m_renameMap.get(currentS);          if (replace == null) {            vals[i]=currentV;          } else {            vals[i]=getOutputFormat().attribute(i).indexOfValue(replace);          }        }      }    }    Instance inst=null;    if (instance instanceof SparseInstance) {      inst=new SparseInstance(instance.weight(),vals);    } else {      inst=new DenseInstance(instance.weight(),vals);    }    inst.setDataset(getOutputFormat());    copyValues(inst,false,instance.dataset(),getOutputFormat());    inst.setDataset(getOutputFormat());    push(inst);  }  return true;}  }
class C{  public HostsConfig(String configHome,String fileName){  loadConfig(configHome,fileName);}  }
class C{  public void addExtendedProperty(ExtendedProperty extendedProperty){  getExtendedProperties().add(extendedProperty);}  }
class C{  public GZipInputStreamRandomAccess(File gzipFile) throws IOException {  this(new SeekableRandomAccessFile(gzipFile));}  }
class C{  public void save(String data){  LOGGER.info("Cache: Trying to save " + id + "..");  try (BufferedWriter writer=Files.newBufferedWriter(file,CHARSET)){    writer.write(new Long(System.currentTimeMillis() / 1000).toString() + "\n");    writer.write(data);    LOGGER.info("Cache: Saved " + id + ".");  } catch (  IOException ex) {    LOGGER.warning("Cache: Error saving " + id + " ["+ ex+ "]");  }}  }
class C{  public boolean isSkip(){  return skip;}  }
class C{  public ArrayGeneratorBuilder<Character> ofCharacters(Source<Character> source){  return new ArrayGeneratorBuilder<Character>(source,Character.class);}  }
class C{  public int process(Buffer input){  int codecNo=0;  return doProcess(codecNo,input);}  }
class C{  public static boolean isAlpha(char a){  return ((a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z'));}  }
class C{  void reLogginUserIfRequired(HttpServletRequest httpRequest,HttpServletResponse httpResponse,AuthorizationRequestData rdo,StringBuffer url){  final String userId=httpRequest.getParameter(PARAM_LOGIN_USER_ID);  if (!ADMStringUtils.isBlank(userId)) {    try {      ServiceAccess serviceAccess=ServiceAccess.getServiceAcccessFor(httpRequest.getSession());      IdentityService identityService=serviceAccess.getService(IdentityService.class);      rdo.setUserId(userId);      rdo.setPassword(httpRequest.getParameter(PARAM_LOGIN_PASSWORD));      VOUser voUser=readTechnicalUserFromDb(identityService,rdo);      serviceAccess.login(voUser,rdo.getPassword(),httpRequest,httpResponse);      httpRequest.getSession().setAttribute(Constants.SESS_ATTR_USER,identityService.getCurrentUserDetails());    } catch (    Exception e2) {      httpRequest.setAttribute(Constants.REQ_ATTR_ERROR_KEY,BaseBean.ERROR_LOGIN);      appendParam(url,Constants.REQ_PARAM_AUTO_OPEN_MP_LOGIN_DIALOG,Boolean.TRUE.toString(),httpRequest.getCharacterEncoding());      appendParam(url,Constants.REQ_PARAM_USER_ID,userId,httpRequest.getCharacterEncoding());    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SimpleConnectionDirectory(Collection<Connection> connections){  for (  Connection connection : connections)   this.connections.put(connection.getIdentifier(),connection);  super.setObjects(this.connections);}  }
class C{  public boolean isShow(){  return this.currentState == DisplayState.SHOW;}  }
class C{  private void pushInt(GPR reg){  if (VM.VerifyAssertions)   validateStackPush(BYTES_IN_INT);  asm.emitSTW(reg,spTopOffset - BYTES_IN_INT,FP);  spTopOffset-=BYTES_IN_STACKSLOT;}  }
class C{  ConfigImpl(Map<String,String> map,ConvertFrom<String> converter){  Objects.requireNonNull(map);  Objects.requireNonNull(converter);  _map=Collections.unmodifiableMap(new TreeMap<>(map));  _converter=converter;}  }
class C{  @Deprecated public static void expectNextField(IonReader in,String name){  in.next();  expectField(in,name);}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24) & 0xff;  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24) & 0xff;  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (startA + (int)(fraction * (endA - startA))) << 24 | (startR + (int)(fraction * (endR - startR))) << 16 | (startG + (int)(fraction * (endG - startG))) << 8 | (startB + (int)(fraction * (endB - startB)));}  }
class C{  private void addLinkToSpan(Spannable s,Link link){  Pattern pattern=Pattern.compile(Pattern.quote(link.getText()));  Matcher matcher=pattern.matcher(text);  while (matcher.find()) {    int start=matcher.start();    if (start >= 0) {      int end=start + link.getText().length();      applyLink(link,new Range(start,end),s);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public AnimationBuilder startDelay(long startDelay){  viewAnimator.startDelay(startDelay);  return this;}  }
class C{  protected boolean waitNoRequestsOnBuckets(Range<Integer> splitRange,long timeoutMs) throws InterruptedException, ExecutionException {  trace("Waiting for no requests on buckets: {} with timeout={}ms, current requestCount={}",splitRange,timeoutMs,getRequestCount(splitRange));  return Utils.pollingWithTimeout(null,timeoutMs / POLLING_TIMES,timeoutMs);}  }
class C{  public int update(Record model){  return UPDATE(model).updateByExample(this.example);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.297 -0400",hash_original_method="B717F8BB65CEF7F4AB8BDF4C9050EA74",hash_generated_method="77C263E13E8D3D16C451A78F90CAED4F") public NoRouteToHostException(){}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  private String popString() throws PDFParseException {  Object obj=stack.pop();  if (!(obj instanceof String)) {    throw new PDFParseException("Expected string here: " + obj.toString());  } else {    return (String)obj;  }}  }
class C{  @Override public Object clone(){  return new CSVStrategy(getDelimiter(),getEncapsulator(),getCommentStart(),getEscape(),getIgnoreLeadingWhitespaces(),getIgnoreTrailingWhitespaces(),getUnicodeEscapeInterpretation(),getIgnoreEmptyLines(),getPrinterNewline());}  }
class C{  public void groupSelectedObjects(){  ArrayList<ScreenElement> elements=new ArrayList<ScreenElement>();  ArrayList<ScreenElement> toSearch=new ArrayList<ScreenElement>();  for (  PNode node : this.getSelection()) {    if (node instanceof ViewGroupNode) {      unGroup((ViewGroupNode)node,false);      elements.addAll(((ViewGroupNode)node).getGroupedObjects());    } else {      if (node instanceof ScreenElement) {        toSearch.add((ScreenElement)node);      }    }  }  for (  ScreenElement element : toSearch) {    if (element.isDraggable()) {      elements.add(element);      element.setGrouped(true);    }  }  vgn=new ViewGroupNode(this,elements);  canvas.getLayer().addChild(vgn);  this.setSelection(Collections.singleton(vgn));}  }
class C{  public ActivationDelegate(Object target,boolean fireEvents){  super();  this.target=target;  this.fireEvents=fireEvents;}  }
class C{  public RolloutGroupCreatedEvent(final String tenant,final long revision,final Long rolloutId,final Long rolloutGroupId,final int totalRolloutGroup,final int createdRolloutGroup){  super(revision,tenant);  this.rolloutId=rolloutId;  this.rolloutGroupId=rolloutGroupId;  this.totalRolloutGroup=totalRolloutGroup;  this.createdRolloutGroup=createdRolloutGroup;}  }
class C{  public void add(int element){  if (size == elements.length) {    ensureCapacity(size + 1);  }  elements[size++]=element;}  }
class C{  @Override public void run(){  amIActive=true;  String sourceHeader=null;  String costHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster costSurface;  WhiteboxRaster sourceImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, costVal, srcVal;  float progress=0;  double largeVal=Float.MAX_VALUE - 10000000;  int[] dX=new int[]{1,1,0,-1,-1,-1,0,1};  int[] dY=new int[]{0,1,1,1,0,-1,-1,-1};  double diagDist=Math.sqrt(2);  double[] dist=new double[]{1,diagDist,1,diagDist,1,diagDist,1,diagDist};  double gridRes;  int col, row, a;  int c;  int x, y, i;  int[] backLinkDir=new int[]{32,64,128,1,2,4,8,16};  double costAccumVal, cost1, cost2, newCostVal;  boolean didSomething=false;  int loopNum=0;  boolean blnAnisotropicForce=false;  double anisotropicForceDirection=-999;  double anisotropicForceStrength=-999;  double[] azDir=new double[]{90,135,180,225,270,315,0,45};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      sourceHeader=args[i];    } else     if (i == 1) {      costHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      backLinkHeader=args[i];    } else     if (i == 4) {      blnAnisotropicForce=false;      if (!args[i].toLowerCase().equals("not specified")) {        blnAnisotropicForce=true;        anisotropicForceDirection=Double.parseDouble(args[i]);        if (anisotropicForceDirection >= 360) {          anisotropicForceDirection=0;        }        if (anisotropicForceDirection < 0) {          anisotropicForceDirection=0;        }      }    } else     if (i == 5) {      blnAnisotropicForce=false;      if (!args[i].toLowerCase().equals("not specified")) {        anisotropicForceStrength=Double.parseDouble(args[i]);        if (anisotropicForceStrength == 1 || anisotropicForceStrength == 0) {          blnAnisotropicForce=false;        } else {          blnAnisotropicForce=true;          if (anisotropicForceStrength > 100) {            anisotropicForceStrength=100;          }          if (anisotropicForceStrength < -100) {            anisotropicForceStrength=-100;          }        }      }    }  }  if ((sourceHeader == null) || (costHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (anisotropicForceDirection == -999 || anisotropicForceStrength == -999) {    if (blnAnisotropicForce) {      showFeedback("Both the Anisotropic Force Direction and " + "Anisotropic Force Strength must be set to valid " + "values to carry out this operation.");      return;    }  }  try {    sourceImage=new WhiteboxRaster(sourceHeader,"r");    rows=sourceImage.getNumberRows();    cols=sourceImage.getNumberColumns();    double noData=sourceImage.getNoDataValue();    gridRes=(sourceImage.getCellSizeX() + sourceImage.getCellSizeY()) / 2;    costSurface=new WhiteboxRaster(costHeader,"r");    if (costSurface.getNumberColumns() != cols || costSurface.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",sourceHeader,WhiteboxRaster.DataType.FLOAT,largeVal);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    backLink=new WhiteboxRaster(backLinkHeader,"rw",sourceHeader,WhiteboxRaster.DataType.INTEGER,noData);    backLink.setPreferredPalette("spectrum.pal");    backLink.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    updateProgress("Calculating Cost Accumulation Surface:",0);    double[] data;    for (row=0; row < rows; row++) {      data=costSurface.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          srcVal=sourceImage.getValue(row,col);          if (srcVal > 0) {            output.setValue(row,col,0);            backLink.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    if (!blnAnisotropicForce) {      do {        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=0; c <= 3; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=rows - 1; row >= 0; row--) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=4; c <= 7; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (rows - 1 - row) / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=rows - 1; row >= 0; row--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=3; c <= 6; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows - 1; row++) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=1; c <= 4; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=0; row < rows - 1; row++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=2; c <= 5; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }      } while (didSomething);    } else {      double dir=0;      for (c=0; c <= 7; c++) {        dir=Math.abs(azDir[c] - anisotropicForceDirection);        if (dir > 180) {          dir=360 - dir;        }        azDir[c]=1 + (180 - dir) / 180 * (anisotropicForceStrength - 1);      }      do {        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=0; c <= 3; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=rows - 1; row >= 0; row--) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=4; c <= 7; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (rows - 1 - row) / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=rows - 1; row >= 0; row--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=3; c <= 6; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows - 1; row++) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=1; c <= 4; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=0; row < rows - 1; row++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=2; c <= 5; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }      } while (didSomething);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    backLink.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    backLink.addMetadataEntry("Created on " + new Date());    sourceImage.close();    costSurface.close();    output.close();    backLink.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public String takeScreenshot(String filename,float scale,int quality) throws NotImplementedException {  File f=new File(InstrumentationRegistry.getTargetContext().getFilesDir(),filename);  device.takeScreenshot(f,scale,quality);  if (f.exists())   return f.getAbsolutePath();  return null;}  }
class C{  public <T>TStream<T> traceStream(TStream<T> stream,Supplier<String> label){  if (includeTraceStreamOps(label.get())) {    TStream<?> s=stream.filter(traceTuplesFn(label.get())).tag(label.get() + ".trace");    s.peek(null);  }  return stream;}  }
class C{  protected void dropView(View view){  UiThreadUtil.assertOnUiThread();  if (!mRootTags.get(view.getId())) {    resolveViewManager(view.getId()).onDropViewInstance(view);  }  ViewManager viewManager=mTagsToViewManagers.get(view.getId());  if (view instanceof ViewGroup && viewManager instanceof ViewGroupManager) {    ViewGroup viewGroup=(ViewGroup)view;    ViewGroupManager viewGroupManager=(ViewGroupManager)viewManager;    for (int i=viewGroupManager.getChildCount(viewGroup) - 1; i >= 0; i--) {      View child=viewGroupManager.getChildAt(viewGroup,i);      if (mTagsToViews.get(child.getId()) != null) {        dropView(child);      }    }    viewGroupManager.removeAllViews(viewGroup);  }  mTagsToViews.remove(view.getId());  mTagsToViewManagers.remove(view.getId());}  }
class C{  protected void eleminateRedundent(ElemTemplateElement psuedoVarRecipient,Vector paths){  int n=paths.size();  int numPathsEliminated=0;  int numUniquePathsEliminated=0;  for (int i=0; i < n; i++) {    ExpressionOwner owner=(ExpressionOwner)paths.elementAt(i);    if (null != owner) {      int found=findAndEliminateRedundant(i + 1,i,owner,psuedoVarRecipient,paths);      if (found > 0)       numUniquePathsEliminated++;      numPathsEliminated+=found;    }  }  eleminateSharedPartialPaths(psuedoVarRecipient,paths);  if (DIAGNOSE_NUM_PATHS_REDUCED)   diagnoseNumPaths(paths,numPathsEliminated,numUniquePathsEliminated);}  }
class C{  private void disposeDecoderOut(IoSession session){  session.removeAttribute(DECODER_OUT);}  }
class C{  public void Gen_populate(android.content.ContentValues values){  gen__Id=values.getAsLong(GEN_FIELD__ID);  gen_CONNECTION_ID=values.getAsLong(GEN_FIELD_CONNECTION_ID);  gen_SHOW_SPLASH_VERSION=values.getAsLong(GEN_FIELD_SHOW_SPLASH_VERSION);  gen_TEXT_INDEX=values.getAsLong(GEN_FIELD_TEXT_INDEX);}  }
class C{  @Override protected void rebuildCells(){  cellList.clear();  cacheMin.clear();  cacheMax.clear();  int breakIndex=0;  for (  Number[] brk : breaks) {    long[] cells=new long[brk.length - 1];    long colMin=Long.MAX_VALUE;    long colMax=Long.MIN_VALUE;    Iterable<? extends Comparable<?>> data;    if (orientation == Orientation.VERTICAL) {      data=getData().getColumn(breakIndex);    } else {      data=getData().getRecord(breakIndex);    }    for (    Comparable<?> cell : data) {      if (!(cell instanceof Number)) {        continue;      }      Number numericCell=(Number)cell;      double val=numericCell.doubleValue();      for (int i=0; i < brk.length - 1; i++) {        if ((val >= brk[i].doubleValue()) && (val < brk[i + 1].doubleValue())) {          cells[i]++;          if (cells[i] > colMax) {            colMax=cells[i];          }          if (cells[i] < colMin) {            colMin=cells[i];          }          break;        }      }    }    cellList.add(cells);    cacheMin.put(breakIndex,colMin);    cacheMax.put(breakIndex,colMax);    breakIndex++;  }}  }
class C{  protected OMNode createPI() throws OMException {  throw new OMException("SOAP message MUST NOT contain Processing Instructions(PI)");}  }
class C{  public static boolean isExternalStorageAvailableAndWritable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state);}  }
class C{  public boolean addGpsStatusListener(GpsStatus.Listener listener){  boolean result;  if (mGpsStatusListeners.get(listener) != null) {    return true;  }  try {    GpsStatusListenerTransport transport=new GpsStatusListenerTransport(listener);    result=mService.addGpsStatusListener(transport,mContext.getPackageName());    if (result) {      mGpsStatusListeners.put(listener,transport);    }  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in registerGpsStatusListener: ",e);    result=false;  }  return result;}  }
class C{  protected void loadChildren(Element e){  for (int counter=0; counter < e.getElementCount(); counter++) {    Element child=e.getElement(counter);    AttributeSet attrs=child.getAttributes();    if (attrs.getAttribute(StyleConstants.NameAttribute) == HTML.Tag.TR) {      addChild(new TableRowElementInfo(child,this,counter));    } else     if (attrs.getAttribute(StyleConstants.NameAttribute) == HTML.Tag.CAPTION) {      caption=createElementInfo(child,this);    }  }}  }
class C{  MatchPatternIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_pattern=WalkerFactory.loadSteps(this,compiler,firstStepPos,0);  boolean fromRoot=false;  boolean walkBack=false;  boolean walkDescendants=false;  boolean walkAttributes=false;  if (0 != (analysis & (WalkerFactory.BIT_ROOT | WalkerFactory.BIT_ANY_DESCENDANT_FROM_ROOT)))   fromRoot=true;  if (0 != (analysis & (WalkerFactory.BIT_ANCESTOR | WalkerFactory.BIT_ANCESTOR_OR_SELF | WalkerFactory.BIT_PRECEDING| WalkerFactory.BIT_PRECEDING_SIBLING| WalkerFactory.BIT_FOLLOWING| WalkerFactory.BIT_FOLLOWING_SIBLING| WalkerFactory.BIT_PARENT| WalkerFactory.BIT_FILTER)))   walkBack=true;  if (0 != (analysis & (WalkerFactory.BIT_DESCENDANT_OR_SELF | WalkerFactory.BIT_DESCENDANT | WalkerFactory.BIT_CHILD)))   walkDescendants=true;  if (0 != (analysis & (WalkerFactory.BIT_ATTRIBUTE | WalkerFactory.BIT_NAMESPACE)))   walkAttributes=true;  if (false || DEBUG) {    System.out.print("analysis: " + Integer.toBinaryString(analysis));    System.out.println(", " + WalkerFactory.getAnalysisString(analysis));  }  if (fromRoot || walkBack) {    if (walkAttributes) {      m_superAxis=Axis.ALL;    } else {      m_superAxis=Axis.DESCENDANTSFROMROOT;    }  } else   if (walkDescendants) {    if (walkAttributes) {      m_superAxis=Axis.ALLFROMNODE;    } else {      m_superAxis=Axis.DESCENDANTORSELF;    }  } else {    m_superAxis=Axis.ALL;  }  if (false || DEBUG) {    System.out.println("axis: " + Axis.getNames(m_superAxis));  }}  }
class C{  public Vector subtract(int x,int y,int z){  return new Vector(this.x - x,this.y - y,this.z - z);}  }
class C{  @Override public XMLEventReader createXMLEventReader(String systemId,InputStream in) throws XMLStreamException {  try {    return new WbXmlEventReader(in,(WbXmlDefinition)props.get(DEFINITION_PROPERTY));  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public RasterPlotPanel(final RasterModel rasterModel){  model=rasterModel;  setPreferredSize(PREFERRED_SIZE);  setLayout(new BorderLayout());  addAddDeleteButtons();  addClearGraphDataButton();  addPreferencesButton();  add("Center",chartPanel);  add("South",buttonPanel);  init();}  }
class C{  private void updatePropertiesFile() throws Exception {  if (properties == null) {    throw new Exception("Properties can't be written because they don't yet exist.");  }  if (propertiesFile == null) {    logger.debug("Creating temporary file.");    propertiesFile=File.createTempFile(ReloadablePropertySource.class.getSimpleName(),".properties");  }  try (FileOutputStream fileOutputStream=new FileOutputStream(propertiesFile)){    if (logger.isDebugEnabled()) {      logger.debug("Writing properties to " + propertiesFile.getName());      for (      Object key : properties.keySet()) {        logger.debug("Key [" + key + "] = "+ properties.get(key));      }    }    properties.store(fileOutputStream,"Properties used by " + ReloadablePropertySource.class.getName());  } }  }
class C{  private static void taskFinished(ProgressThread task){  for (  ProgressThreadStateListener l : listener.getListeners(ProgressThreadStateListener.class)) {    l.progressThreadFinished(task);  }}  }
class C{  private String zGetStandardTextFieldTimeString(LocalTime time){  String standardTimeString="";  if (time == null) {    return standardTimeString;  }  standardTimeString=time.format(settings.getFormatForDisplayTime());  return standardTimeString;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  Node(Node<K,V> parent,K key,Node<K,V> next,Node<K,V> prev){  this.parent=parent;  this.key=key;  this.height=1;  this.next=next;  this.prev=prev;  prev.next=this;  next.prev=this;}  }
class C{  public void displayState(){  if (log.isDebugEnabled()) {    log.debug("displayState");  }  if (namedBlock == null) {    setIcon(defaultIcon);    updateSize();    return;  }  if (re != null) {    jmri.InstanceManager.throttleManagerInstance().removeListener(re.getDccLocoAddress(),this);    re=null;  }  Object key=getBlock().getValue();  displayState(key);}  }
class C{  private static float patternMatchVariance(int[] counters,int[] pattern,float maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Float.POSITIVE_INFINITY;  }  float unitBarWidth=(float)total / patternLength;  maxIndividualVariance*=unitBarWidth;  float totalVariance=0.0f;  for (int x=0; x < numCounters; x++) {    int counter=counters[x];    float scaledPattern=pattern[x] * unitBarWidth;    float variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Float.POSITIVE_INFINITY;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  protected void uninstallListeners(JComponent c){  c.removePropertyChangeListener(this);}  }
class C{  public AbsentResourceList(){}  }
class C{  public boolean isEnqueued(){synchronized (this) {    return (this.next != null && this.queue == ReferenceQueue.ENQUEUED);  }}  }
class C{  public static <K,V>CacheConcurrentLIRS<K,V> newInstance(int maxEntries){  return new CacheConcurrentLIRS<K,V>(maxEntries,1,16,maxEntries / 100);}  }
class C{  public void buildClassifier(Instances data) throws Exception {  if (m_MetaClassifier == null) {    throw new IllegalArgumentException("No meta classifier has been set");  }  getCapabilities().testWithFail(data);  Instances newData=new Instances(data);  m_BaseFormat=new Instances(data,0);  newData.deleteWithMissingClass();  Random random=new Random(m_Seed);  newData.randomize(random);  if (newData.classAttribute().isNominal()) {    newData.stratify(m_NumFolds);  }  generateMetaLevel(newData,random);  super.buildClassifier(newData);  buildClassifiers(newData);}  }
class C{  public EntryIterableBuilder findRows(Map<String,?> fromRow){  toEntryValues(fromRow);  return _toCursor.newEntryIterable(_entryValues);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public VNXeCommandJob attachSnap(String snapId) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_ATTACH);  _url=urlBuilder.toString();  return postRequestAsync(null);}  }
class C{  public static ResourceEntity readResValue(ByteBuffer buffer,StringPool stringPool){  ResValue resValue=new ResValue();  resValue.setSize(Buffers.readUShort(buffer));  resValue.setRes0(Buffers.readUByte(buffer));  resValue.setDataType(Buffers.readUByte(buffer));switch (resValue.getDataType()) {case ResValue.ResType.INT_DEC:case ResValue.ResType.INT_HEX:    resValue.setData(new ResourceEntity(buffer.getInt()));  break;case ResValue.ResType.STRING:int strRef=buffer.getInt();if (strRef >= 0) {resValue.setData(new ResourceEntity(stringPool.get(strRef)));}break;case ResValue.ResType.REFERENCE:long resourceId=Buffers.readUInt(buffer);resValue.setData(new ResourceEntity(resourceId));break;case ResValue.ResType.INT_BOOLEAN:resValue.setData(new ResourceEntity(buffer.getInt() != 0));break;case ResValue.ResType.NULL:resValue.setData(new ResourceEntity(""));break;case ResValue.ResType.INT_COLOR_RGB8:case ResValue.ResType.INT_COLOR_RGB4:resValue.setData(new ResourceEntity(readRGBs(buffer,6)));break;case ResValue.ResType.INT_COLOR_ARGB8:case ResValue.ResType.INT_COLOR_ARGB4:resValue.setData(new ResourceEntity(readRGBs(buffer,8)));break;case ResValue.ResType.DIMENSION:resValue.setData(new ResourceEntity(getDimension(buffer)));break;case ResValue.ResType.FRACTION:resValue.setData(new ResourceEntity(getFraction(buffer)));break;default :resValue.setData(new ResourceEntity("{" + resValue.getDataType() + ":"+ Buffers.readUInt(buffer)+ "}"));}return resValue.getData();}  }
class C{  @Override public void flush() throws IOException {  writer.write(buffer,0,fill);  fill=0;}  }
class C{  private Phase2(){}  }
class C{  public static void main(String[] args) throws Exception {  main(new MacSameTest());}  }
class C{  protected void verifyCharacterOrFail(int codePoint,String expected) throws RDFParseException {  if (codePoint == -1) {    throwEOFException();  }  final String supplied=new String(Character.toChars(codePoint));  if (expected.indexOf(supplied) == -1) {    StringBuilder msg=new StringBuilder(32);    msg.append("Expected ");    for (int i=0; i < expected.length(); i++) {      if (i > 0) {        msg.append(" or ");      }      msg.append('\'');      msg.append(expected.charAt(i));      msg.append('\'');    }    msg.append(", found '");    msg.append(supplied);    msg.append("'");    reportFatalError(msg.toString());  }}  }
class C{  public String tokenizerTipText(){  return "The tokenizing algorithm to use on the strings.";}  }
class C{  public Object annotatedValue(Object target) throws IgniteCheckedException {  IgniteBiTuple<Object,Boolean> res=annotatedValue(target,new HashSet<>(),false);  assert res != null;  return res.get1();}  }
class C{  public static short[] ensureCapacity(short[] array,int minCapacity){  int oldCapacity=array.length;  short[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new short[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  private Collection<VisorIgfsProfilerEntry> parse(Path logDir,String igfsName) throws IOException {  Collection<VisorIgfsProfilerEntry> parsedFiles=new ArrayList<>(512);  try (DirectoryStream<Path> dirStream=Files.newDirectoryStream(logDir)){    PathMatcher matcher=FileSystems.getDefault().getPathMatcher("glob:igfs-log-" + igfsName + "-*.csv");    for (    Path p : dirStream) {      if (matcher.matches(p.getFileName())) {        try {          parsedFiles.addAll(parseFile(p));        } catch (        NoSuchFileException ignored) {        }catch (        Exception e) {          ignite.log().warning("Failed to parse IGFS profiler log file: " + p,e);        }      }    }  }   return parsedFiles;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public String timeAgo(final Date date){  return timeAgo(date.getTime());}  }
class C{  default <S>void updating(S stateInstance,Consumer<ProxyingEventBus> busConsumer){  updating(stateInstance.getClass(),stateInstance,busConsumer);}  }
class C{  public void toJson(String parentDir){  PrintStream fp;  try {    fp=new PrintStream(parentDir + File.separator + FILE_NAME);    fp.print(json_call_graph_header("Call Graphs from Entry Points",Collections.EMPTY_MAP));    for (    SourceCallChainInfo cci : entry_points) {      cci.dump_json(fp,"  ");      fp.print(",");    }    fp.println("  {}\n]}");    fp.close();  } catch (  IOException e) {    logger.warn("Error writing json file.",e);  }}  }
class C{  public static Collection<ImageType> all(){  return enums.all();}  }
class C{  public WriteException(Collection<WriteRequest> requests,String s){  super(s);  this.requests=asRequestList(requests);}  }
class C{  public void loadValue(){  if (Helper.isNullOrEmpty(guiValueField)) {    return;  }  if (Helper.isNullOrEmpty(methodBase)) {    return;  }  Method method=getProfileGetMethod();  ;  if (method == null) {    return;  }  Object loadValue=getProfileValue();  putGuiValue(loadValue);  Boolean disable;  try {    String methodName="is" + methodBase + "ReadOnly";    method=currentConfiguration.getClass().getDeclaredMethod(methodName);    disable=(Boolean)method.invoke(currentConfiguration);  } catch (  final Exception e) {    disable=false;  }  if (guiLabelField != null)   guiLabelField.setEnabled(!disable);  if (guiValueField != null)   guiValueField.setEnabled(!disable);}  }
class C{  public BuddyLoginEvent(final Player player){  super(RPCLASS_NAME);  put(NAME,player.getName());}  }
class C{  public void printClassDependencies(Environment env){  if (toplevelEnv.print_dependencies()) {    String src=((ClassFile)getSource()).getAbsoluteName();    String className=Type.mangleInnerType(getName()).toString();    long startLine=getWhere() >> WHEREOFFSETBITS;    long endLine=getEndPosition() >> WHEREOFFSETBITS;    System.out.println("CLASS:" + src + ","+ startLine+ ","+ endLine+ ","+ className);    for (Enumeration e=deps.elements(); e.hasMoreElements(); ) {      ClassDeclaration data=(ClassDeclaration)e.nextElement();      String depName=Type.mangleInnerType(data.getName()).toString();      env.output("CLDEP:" + className + ","+ depName);    }  }}  }
class C{  @Deprecated protected void removeListeners(){  if (propertyChangeListener != null) {    comboBox.removePropertyChangeListener(propertyChangeListener);  }}  }
class C{  public static BufferedReader newReader(Path self,String charset) throws IOException {  return Files.newBufferedReader(self,Charset.forName(charset));}  }
class C{  public void writeClassDefinition(String parent){  out.print("public class " + className);  if (parent != null) {    out.print(" extends " + parent);  }  out.println(" {");}  }
class C{  public void testSetF18(){  boolean f18=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF18(f18);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
class C{  public void testTypical(){  Instances icopy=new Instances(m_Instances);  m_Filter=getFilter();  Instances result=useFilter();  assertEquals(result.numAttributes(),icopy.numInstances() + 1);}  }
class C{  public void desativarSubmenus(VBox... boxes){  for (  VBox box : boxes) {    box.getChildren().clear();  }}  }
class C{  public boolean isReceipt(){  Object oo=get_Value(COLUMNNAME_IsReceipt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isGameRunning(){switch (gameState) {case RUNNING:case NUKEROOM:    return true;default :  return false;}}  }
class C{  public TextNode(final View view,final INaviTextNode node,final TagManager tagManager){  super(view,node,tagManager);  m_node=node;  node.addListener(m_internalListener);}  }
class C{  public boolean hasProxyScheme(){  return proxy_scheme != null;}  }
class C{  protected void notifyStateChange(int oldState,int newState){  mState=newState;  if (oldState != newState) {    firePropertyChange("KnownState",Integer.valueOf(oldState),Integer.valueOf(newState));  }}  }
class C{  public final void testOn() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      dos.on(false);      for (int i=0; i < MY_MESSAGE_LEN - 1; i++) {        dos.write(myMessage[i]);      }      dos.on(true);      dos.write(myMessage[MY_MESSAGE_LEN - 1]);      byte[] digest=dos.getMessageDigest().digest();      assertFalse(Arrays.equals(digest,MDGoldenData.getDigest(algorithmName[k])));      assertFalse(Arrays.equals(digest,MDGoldenData.getDigest(algorithmName[k] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Class_info cc=(CONSTANT_Class_info)(constant_pool[class_index]);  CONSTANT_NameAndType_info cn=(CONSTANT_NameAndType_info)(constant_pool[name_and_type_index]);  return cc.toString(constant_pool) + "." + cn.toString(constant_pool);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_SUBTITLE_TOGGLE);  return null;}  }
class C{  private static final int calculateCapacity(int x){  if (x >= 1 << 30) {    return 1 << 30;  }  if (x == 0) {    return 16;  }  x=x - 1;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return x + 1;}  }
class C{  public void init(ExtendedProperties configuration){  rsvc.info("JarResourceLoader : initialization starting.");  Vector paths=configuration.getVector("path");  if (paths == null || paths.size() == 0) {    paths=configuration.getVector("resource.path");    if (paths != null && paths.size() > 0) {      rsvc.warn("JarResourceLoader : you are using a deprecated configuration" + " property for the JarResourceLoader -> '<name>.resource.loader.resource.path'." + " Please change to the conventional '<name>.resource.loader.path'.");    }  }  rsvc.info("JarResourceLoader # of paths : " + paths.size());  for (int i=0; i < paths.size(); i++) {    loadJar((String)paths.get(i));  }  rsvc.info("JarResourceLoader : initialization complete.");}  }
class C{  @Override public void fireUndoableEditHappened(UndoableEdit edit){  UndoableEditEvent event=null;  if (listenerList.getListenerCount() > 0) {    Object[] listeners=listenerList.getListenerList();    for (int i=listeners.length - 2; i >= 0; i-=2) {      if (event == null) {        event=new UndoableEditEvent(this,edit);      }      if (listeners[i] == UndoableEditListener.class) {        ((UndoableEditListener)listeners[i + 1]).undoableEditHappened(event);      }    }  }}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public void checkSchemaAdmin(){  if (!hasRight(null,Right.ALTER_ANY_SCHEMA)) {    throw DbException.get(ErrorCode.ADMIN_RIGHTS_REQUIRED);  }}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=a.getBounds();  c.paintIcon(getContainer(),g,alloc.x,alloc.y);}  }
class C{  public static void w(Throwable thr){  if (DEBUG)   android.util.Log.w(TAG,buildMessage(""),thr);}  }
class C{  @Override public int portRemote(){  return _socket.portRemote();}  }
class C{  public static void flush(){  annotationMap=null;}  }
class C{  public boolean unRegisterThermalListener(ThermalListenerCallback thermalCallback){  try {    if (checkService()) {      return sService.unRegisterThermalListener(thermalCallback);    }  } catch (  RemoteException e) {  }  return false;}  }
class C{  AstBuilderInvocationTrap(List<ImportNode> imports,List<ImportNode> importPackages,ReaderSource source,SourceUnit sourceUnit){  super(source,sourceUnit);  factoryTargets.add("org.codehaus.groovy.ast.builder.AstBuilder");  if (imports != null) {    for (    ImportNode importStatement : imports) {      if ("org.codehaus.groovy.ast.builder.AstBuilder".equals(importStatement.getType().getName())) {        factoryTargets.add(importStatement.getAlias());      }    }  }  if (importPackages != null) {    for (    ImportNode importPackage : importPackages) {      if ("org.codehaus.groovy.ast.builder.".equals(importPackage.getPackageName())) {        factoryTargets.add("AstBuilder");        break;      }    }  }}  }
class C{  private void trackSatellite(OrthographicCamera camera,float aspectRatio){  camera.viewportHeight=2 * SATELLITE_SIZE;  camera.viewportWidth=aspectRatio * camera.viewportHeight;  camera.position.set(SATELLITE_POSITION_X,SATELLITE_POSITION_Y,0);  camera.rotate(SATELLITE_ROTATION);}  }
class C{  public static void fill(int[] array,int start,int end,int value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void testIsValidUtf8_3Bytes() throws UnsupportedEncodingException {  IsValidUtf8TestUtil.testBytes(3,IsValidUtf8TestUtil.EXPECTED_THREE_BYTE_ROUNDTRIPPABLE_COUNT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.470 -0400",hash_original_method="D9486A6F58546751D8369EF6825870E2",hash_generated_method="F8E1636E64E8A8ADC3FABD70F2D84439") public void testScan(){  int iterations=BluetoothTestRunner.sScanIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.stopScan(adapter);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("scan iteration " + (i + 1) + " of "+ iterations);    mTestUtils.startScan(adapter);    mTestUtils.stopScan(adapter);  }  mTestUtils.disable(adapter);}  }
class C{  public XStringForFSB(FastStringBuffer val,int start,int length){  super(val);  m_start=start;  m_length=length;  if (null == val)   throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FASTSTRINGBUFFER_CANNOT_BE_NULL,null));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public Chronology withUTC(){  return INSTANCE_UTC;}  }
class C{  public CookieEntity(URI uri,HttpCookie cookie){  this.uri=uri == null ? null : uri.toString();  this.name=cookie.getName();  this.value=cookie.getValue();  this.comment=cookie.getComment();  this.commentURL=cookie.getCommentURL();  this.discard=cookie.getDiscard();  this.domain=cookie.getDomain();  long maxAge=cookie.getMaxAge();  if (maxAge != -1 && maxAge > 0) {    this.expiry=(maxAge * 1000L) + System.currentTimeMillis();    if (this.expiry < 0L)     this.expiry=HeaderUtil.getMaxExpiryMillis();  } else   this.expiry=-1L;  this.path=cookie.getPath();  if (!TextUtils.isEmpty(path) && path.length() > 1 && path.endsWith("/")) {    this.path=path.substring(0,path.length() - 1);  }  this.portList=cookie.getPortlist();  this.secure=cookie.getSecure();  this.version=cookie.getVersion();}  }
class C{  public static int computeTagSize(final int fieldNumber){  return computeRawVarint32Size(WireFormatNano.makeTag(fieldNumber,0));}  }
class C{  public int write(BinaryOutputStream out,int fieldCnt,boolean compactFooter){  int startIdx=idx - fieldCnt * 2;  assert startIdx >= 0;  out.unsafeEnsure(fieldCnt << 3);  int lastOffset=data[idx - 1];  int res;  if (compactFooter) {    if (lastOffset < MAX_OFFSET_1) {      for (int curIdx=startIdx + 1; curIdx < idx; curIdx+=2)       out.unsafeWriteByte((byte)data[curIdx]);      res=BinaryUtils.OFFSET_1;    } else     if (lastOffset < MAX_OFFSET_2) {      for (int curIdx=startIdx + 1; curIdx < idx; curIdx+=2)       out.unsafeWriteShort((short)data[curIdx]);      res=BinaryUtils.OFFSET_2;    } else {      for (int curIdx=startIdx + 1; curIdx < idx; curIdx+=2)       out.unsafeWriteInt(data[curIdx]);      res=BinaryUtils.OFFSET_4;    }  } else {    if (lastOffset < MAX_OFFSET_1) {      for (int curIdx=startIdx; curIdx < idx; ) {        out.unsafeWriteInt(data[curIdx++]);        out.unsafeWriteByte((byte)data[curIdx++]);      }      res=BinaryUtils.OFFSET_1;    } else     if (lastOffset < MAX_OFFSET_2) {      for (int curIdx=startIdx; curIdx < idx; ) {        out.unsafeWriteInt(data[curIdx++]);        out.unsafeWriteShort((short)data[curIdx++]);      }      res=BinaryUtils.OFFSET_2;    } else {      for (int curIdx=startIdx; curIdx < idx; ) {        out.unsafeWriteInt(data[curIdx++]);        out.unsafeWriteInt(data[curIdx++]);      }      res=BinaryUtils.OFFSET_4;    }  }  return res;}  }
class C{  public static long extractSampleTimestamp(FlacStreamInfo streamInfo,ParsableByteArray frameData){  frameData.skipBytes(FRAME_HEADER_SAMPLE_NUMBER_OFFSET);  long sampleNumber=frameData.readUTF8EncodedLong();  if (streamInfo.minBlockSize == streamInfo.maxBlockSize) {    sampleNumber*=streamInfo.minBlockSize;  }  return (sampleNumber * 1000000L) / streamInfo.sampleRate;}  }
class C{  public static void showInputSheet(Component parentComponent,Object message,SheetListener listener){  showInputSheet(parentComponent,message,JOptionPane.QUESTION_MESSAGE,listener);}  }
class C{  private static void add(String s){  getLog().addToBuffer(s);}  }
class C{  private InternalDataProvider(){}  }
class C{  public boolean isOutBufferActive(int hashCode){  return outStream != null && (hashCode == -1 || hashCode == outHashCode);}  }
class C{  @LargeTest public void testAudioTrackExtractBoundaries() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  boolean flagForException=false;  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  mVideoEditor.addAudioTrack(audioTrack);  audioTrack.setExtractBoundaries(1000,5000);  assertEquals("Audio Track Start time",1000,audioTrack.getBoundaryBeginTime());  assertEquals("Audio Track End time",5000,audioTrack.getBoundaryEndTime());  try {    audioTrack.setExtractBoundaries(0,100000000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Audio Track With endTime > FileDuration",flagForException);  flagForException=false;  try {    audioTrack.setExtractBoundaries(100000000,5000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Audio Track With startTime > FileDuration",flagForException);  flagForException=false;  try {    audioTrack.setExtractBoundaries(0,0);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertFalse("Audio Track With startTime = endTime",flagForException);  assertEquals("Audio Track Start time",0,audioTrack.getBoundaryBeginTime());  assertEquals("Audio Track End time",0,audioTrack.getBoundaryEndTime());  assertEquals("Audio Track Start time",0,audioTrack.getBoundaryBeginTime());  assertEquals("Audio Track End time",(audioTrack.getTimelineDuration()),audioTrack.getBoundaryEndTime());  audioTrack.setExtractBoundaries(0,audioTrack.getDuration() / 2);  assertEquals("Audio Track Start time",0,audioTrack.getBoundaryBeginTime());  assertEquals("Audio Track End time",(audioTrack.getDuration() / 2),audioTrack.getBoundaryEndTime());  audioTrack.setExtractBoundaries(1,audioTrack.getDuration() - 1);  assertEquals("Audio Track Start time",1,audioTrack.getBoundaryBeginTime());  assertEquals("Audio Track End time",(audioTrack.getDuration() - 1),audioTrack.getBoundaryEndTime());  flagForException=false;  try {    audioTrack.setExtractBoundaries(0,-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Audio Track end time < 0",flagForException);}  }
class C{  public void forceCommit() throws IgniteCheckedException {  commitIfLocked();}  }
class C{  private static NodePair splitBlock(final View view,final Function function,final CodeNode node,final Instruction instruction){  boolean before=true;  final List<Instruction> beforeInstructions=new ArrayList<Instruction>();  final List<Instruction> afterInstructions=new ArrayList<Instruction>();  for (  final Instruction nodeInstruction : node.getInstructions()) {    if (before) {      beforeInstructions.add(nodeInstruction);    } else {      afterInstructions.add(nodeInstruction);    }    if (nodeInstruction == instruction) {      before=false;    }  }  if (afterInstructions.isEmpty()) {    return new NodePair(node,null);  } else {    final CodeNode firstNode=view.createCodeNode(function,beforeInstructions);    final CodeNode secondNode=view.createCodeNode(function,afterInstructions);    firstNode.setColor(node.getColor());    secondNode.setColor(DEFAULT_BLOCK_COLOR);    for (    final ViewEdge edge : node.getIncomingEdges()) {      final ViewEdge newEdge=view.createEdge(edge.getSource(),firstNode,edge.getType());      newEdge.setColor(edge.getColor());    }    for (    final ViewEdge edge : node.getOutgoingEdges()) {      final ViewEdge newEdge=view.createEdge(secondNode,edge.getTarget(),edge.getType());      newEdge.setColor(edge.getColor());    }    view.deleteNode(node);    return new NodePair(firstNode,secondNode);  }}  }
class C{  public void replaceFile(String pathFile,String fileExt){  m_doc.replaceFile(pathFile,fileExt);}  }
class C{  private void addInstructionalType(InstructionalOfferingConfigEditForm frm) throws Exception {  ItypeDescDAO itypeDao=new ItypeDescDAO();  ItypeDesc itype=itypeDao.get(new Integer(frm.getItype()));  if (itype == null)   throw new Exception("Instructional Type not found");  Vector sp=(Vector)sessionContext.getAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME);  if (sp == null)   sp=new Vector();  SimpleItypeConfig sic=new SimpleItypeConfig(itype);  sic.setSubpartId(-1L);  sp.addElement(sic);  sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,sp);}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 33:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 32:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 31:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 133:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 132:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 131:if (x instanceof SnmpCounter64) {node.checkJvmMemPoolCollectThreshold(((SnmpCounter64)x).toLong());} else {throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);}break;case 13:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 12:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 11:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 10:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 112:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 111:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 110:if (x instanceof SnmpCounter64) {node.checkJvmMemPoolThreshold(((SnmpCounter64)x).toLong());} else {throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);}break;case 5:if (x instanceof SnmpCounter64) {node.checkJvmMemPoolPeakReset(((SnmpCounter64)x).toLong());} else {throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);}break;case 4:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 3:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 23:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 22:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 21:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public final void testGetPublicExponent(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPublicExponent()));}  }
class C{  public boolean isSocialPresenceSupported(){  return getXdmServer() != null && readBoolean(RcsSettingsData.CAPABILITY_SOCIAL_PRESENCE);}  }
class C{  @Override public boolean domainMatch(final String host,final String domain){  return host.endsWith(domain);}  }
class C{  private boolean isPositionOnLine(final float x,final float y,final float node1X,final float node1Y,final float node2X,final float node2Y){  float tolerance=DataStyle.getCurrent().wayToleranceValue / 2f;  if (GeoMath.isBetween(x,node1X,node2X,tolerance) && GeoMath.isBetween(y,node1Y,node2Y,tolerance)) {    return (GeoMath.getLineDistance(x,y,node1X,node1Y,node2X,node2Y) < tolerance);  }  return false;}  }
class C{  @Override public void synchronizeChanged(){}  }
class C{  @Override public void put(String name,long value){  emulatedFields.put(name,value);}  }
class C{  public JValueSlider(String title,float min,float max,float value){  this(title,new Float(min),new Float(max),new Float(value));}  }
class C{  public void addAccessibleSelection(int i){  JList.this.addSelectionInterval(i,i);}  }
class C{  @SuppressWarnings("IfMayBeConditional") public synchronized byte[][] readChunks(long pos,int len) throws IOException {  long readable=this.len - pos;  if (readable <= 0)   return EMPTY_CHUNKS;  long startTime=System.nanoTime();  if (readable < len)   len=(int)readable;  assert len > 0;  bytes+=len;  int start=(int)(pos / blockSize);  int end=(int)((pos + len - 1) / blockSize);  int chunkCnt=end - start + 1;  byte[][] chunks=new byte[chunkCnt][];  for (int i=0; i < chunkCnt; i++) {    byte[] block=blockFragmentizerSafe(start + i);    int blockOff=(int)(pos % blockSize);    int blockLen=Math.min(len,block.length - blockOff);    if (blockLen == block.length)     chunks[i]=block; else {      assert i == 0 || i == chunkCnt - 1;      chunks[i]=Arrays.copyOfRange(block,blockOff,blockOff + blockLen);    }    len-=blockLen;    pos+=blockLen;  }  assert len == 0;  time+=System.nanoTime() - startTime;  return chunks;}  }
class C{  protected void deactivateTestExtPgParameter(final String param){  TestExtFormPaymentGatewayImpl.getGatewayConfig().remove(param);}  }
class C{  private static Document addAddressValidateInt(Document document,String sessionID,String entidad) throws AttributesException, ValidationException, SessionException {  Element root=document.getRootElement();  List list=root.selectNodes(XPATH_PERSONA_ROOT);  if ((list != null) && (list.size() > 0)) {    for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {      Element persona=(Element)iterator.next();      if (persona != null) {        persona=addAddressPersona(persona,sessionID,entidad);      }    }  }  return document;}  }
class C{  public double weightedAreaUnderPRC(){  return m_delegate.weightedAreaUnderPRC();}  }
class C{  public static ModifierKeyword fromFlagValue(int flagValue){  for (Iterator it=KEYWORDS.values().iterator(); it.hasNext(); ) {    ModifierKeyword k=(ModifierKeyword)it.next();    if (k.toFlagValue() == flagValue) {      return k;    }  }  return null;}  }
class C{  public SendKeepAliveMessageThread(StunCandidateHarvest harvest){  this.harvest=new WeakReference<>(harvest);}  }
class C{  protected int index(int slice,int row,int column){  return sliceZero + slice * sliceStride + rowZero + row * rowStride + columnZero + column * columnStride;}  }
class C{  protected void sequence_TFormalParameter(ISerializationContext context,TFormalParameter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public HashCodeBuilder append(final short[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final short element : array) {      append(element);    }  }  return this;}  }
class C{  public Result invoke(String opName,Geometry geometry,Object[] args) throws Exception {  if (!isPreparedOp(opName)) {    return chainOp.invoke(opName,geometry,args);  }  return invokePreparedOp(opName,geometry,args);}  }
class C{  public void incDuplicateBatchesReceived(){  this.stats.incInt(duplicateBatchesReceivedId,1);}  }
class C{  protected void buildShape(BridgeContext ctx,Element e,ShapeNode shapeNode){  SVGOMPolylineElement pe=(SVGOMPolylineElement)e;  try {    SVGOMAnimatedPoints _points=pe.getSVGOMAnimatedPoints();    _points.check();    SVGPointList pl=_points.getAnimatedPoints();    int size=pl.getNumberOfItems();    if (size == 0) {      shapeNode.setShape(DEFAULT_SHAPE);    } else {      AWTPolylineProducer app=new AWTPolylineProducer();      app.setWindingRule(CSSUtilities.convertFillRule(e));      app.startPoints();      for (int i=0; i < size; i++) {        SVGPoint p=pl.getItem(i);        app.point(p.getX(),p.getY());      }      app.endPoints();      shapeNode.setShape(app.getShape());    }  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  public void addAnswer(DNSRecord rec,long now) throws IOException {  if (rec != null) {    if ((now == 0) || !rec.isExpired(now)) {      MessageOutputStream record=new MessageOutputStream(512,this);      record.writeRecord(rec,now);      byte[] byteArray=record.toByteArray();      record.close();      if (byteArray.length < this.availableSpace()) {        _answers.add(rec);        _answersBytes.write(byteArray,0,byteArray.length);      } else {        throw new IOException("message full");      }    }  }}  }
class C{  public boolean contains(int x,int y,int z){  int index=getIndex(x,y,z);  XYZAddressable bucket=this.buckets[index];  while (bucket != null) {    if (bucket.getX() == x && bucket.getY() == y && bucket.getZ() == z) {      return true;    }    index=getNextIndex(index);    bucket=this.buckets[index];  }  return false;}  }
class C{  protected synchronized void shutdown(long acceptorId){  final boolean isDebugEnabled=logger.isDebugEnabled();  if (isDebugEnabled) {    logger.debug("At cache server shutdown time, the number of cache servers in the cache is {}",this.getCache().getCacheServers().size());  }  Iterator it=this._clientProxies.values().iterator();  while (it.hasNext()) {    CacheClientProxy proxy=(CacheClientProxy)it.next();    if (proxy.getAcceptorId() != acceptorId) {      continue;    }    it.remove();    try {      if (isDebugEnabled) {        logger.debug("CacheClientNotifier: Closing {}",proxy);      }      proxy.terminateDispatching(true);    } catch (    Exception ignore) {      if (isDebugEnabled) {        logger.debug("{}: Exception in closing down the CacheClientProxy",this,ignore);      }    }  }  if (noActiveServer() && ccnSingleton != null) {    ccnSingleton=null;    if (haContainer != null) {      haContainer.cleanUp();      if (isDebugEnabled) {        logger.debug("haContainer ({}) is now cleaned up.",haContainer.getName());      }    }    this.clearCompiledQueries();    blackListedClients.clear();    this.clientPingTask.cancel();    this._statistics.close();    this.socketCloser.close();  }}  }
class C{  public MaterialEditText errorShow(boolean show){  mErrorShow=show;  mError.setVisibility(mErrorShow ? VISIBLE : GONE);  return this;}  }
class C{  private void destroyRegion(String regionName){  Region region=getCache().getRegion(regionName);  assertNotNull(region);  region.destroyRegion();}  }
class C{  public void componentShown(ComponentEvent e){  Layer layer=getLayer();  if (layer != null) {    if (e.getComponent() == layer) {      if (getState() != true && menuType == LAYERS_ON_OFF) {        setState(true);        if (Debug.debugging("layersmenu")) {          Debug.output("layersmenu.LCBMI: layer " + layer.getName() + " is now visible.");        }      }    } else     if (e.getComponent() == layer.getPalette() && menuType == PALETTES_ON_OFF) {      setState(true);    }  }}  }
class C{  public void addObserver(Observer observer){  if (observer == null) {    throw new NullPointerException("observer == null");  }synchronized (this) {    if (!observers.contains(observer))     observers.add(observer);  }}  }
class C{  public IMatrix _opAppendVertically(final IScope scope,final IMatrix b){  final GamaIntMatrix a=this;  final int[] ma=a.getMatrix();  final int[] mb=((GamaIntMatrix)b).getMatrix();  final int[] mab=ArrayUtils.addAll(ma,mb);  final GamaIntMatrix fl=new GamaIntMatrix(a.getCols(scope),a.getRows(scope) + b.getRows(scope),mab);  return fl;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public boolean containsAttribute(String name){  return attributes != null && attributes.containsAttribute(name);}  }
class C{  protected void turnoutPushbuttonLockout(boolean pushButtonLockout){}  }
class C{  private static void writeToSet(Ignite ignite) throws IgniteException {  final String setName=set.name();  ignite.compute().broadcast(new SetClosure(setName));  System.out.println("Set size after writing [expected=" + (10 + ignite.cluster().nodes().size() * 5) + ", actual="+ set.size()+ ']');  System.out.println("Iterate over set.");  for (  String item : set)   System.out.println("Set item: " + item);  if (!set.contains("0"))   throw new RuntimeException("Set should contain '0' among its elements.");  if (set.add("0"))   throw new RuntimeException("Set should not allow duplicates.");  if (!set.remove("0"))   throw new RuntimeException("Set should correctly remove elements.");  if (set.contains("0"))   throw new RuntimeException("Set should not contain '0' among its elements.");  if (!set.add("0"))   throw new RuntimeException("Set should correctly add new elements.");}  }
class C{  private void initForType(Class<?> clazz){  if (_typeCache.containsKey(clazz)) {    return;  }  BeanInfo bInfo;  try {    bInfo=Introspector.getBeanInfo(clazz);  } catch (  final IntrospectionException ex) {    throw DatabaseException.fatals.serializationFailedInitializingBeanInfo(clazz,ex);  }  PropertyDescriptor[] pds=bInfo.getPropertyDescriptors();  PropertiesMap properties=new PropertiesMap();  for (int i=0; i < pds.length; i++) {    PropertyDescriptor pd=pds[i];    if (pd.getName().equals("class")) {      continue;    }    byte index=0;    Annotation[] annotations=pd.getReadMethod().getAnnotations();    for (int j=0; j < annotations.length; j++) {      Annotation a=annotations[j];      if (a instanceof SerializationIndex) {        index=((SerializationIndex)a).value();      }    }    properties.add(index,pd);  }  _typeCache.putIfAbsent(clazz,properties);}  }
class C{  private static String escapeJSON(String text){  StringBuilder builder=new StringBuilder();  builder.append('"');  for (int index=0; index < text.length(); index++) {    char chr=text.charAt(index);switch (chr) {case '"':case '\\':      builder.append('\\');    builder.append(chr);  break;case '\b':builder.append("\\b");break;case '\t':builder.append("\\t");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;default :if (chr < ' ') {String t="000" + Integer.toHexString(chr);builder.append("\\u" + t.substring(t.length() - 4));} else {builder.append(chr);}break;}}builder.append('"');return builder.toString();}  }
class C{  public <T>T createDtoFromJson(Reader json,Class<T> dtoInterface) throws IOException {  DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  StringBuilder sb=new StringBuilder();  BufferedReader br=new BufferedReader(json);  String line;  while ((line=br.readLine()) != null) {    sb.append(line);  }  return dtoProvider.fromJson(sb.toString());}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList list=new OMGraphicList();  Projection proj=getProjection();  if (proj == null) {    return list;  }  Point2D upperLeft=proj.getUpperLeft();  Point2D lowerRight=proj.getLowerRight();  if (upperLeft.getX() > lowerRight.getX()) {    getPoints(new DataBounds(upperLeft,new Point2D.Double(180,lowerRight.getY())),list,proj);    getPoints(new DataBounds(new Point2D.Double(-180,upperLeft.getY()),lowerRight),list,proj);  } else {    getPoints(new DataBounds(upperLeft,lowerRight),list,proj);  }  OMText statement=new OMText(10,proj.getHeight() - 10,getName() + " displaying " + list.size()+ "/"+ dataSource.size()+ " points",OMText.JUSTIFY_LEFT);  statement.setFillPaint(Color.gray);  statement.generate(proj);  list.add(0,statement);  return list;}  }
class C{  public int add(E o){  objectToInts.put(o,counter);  intToObjects.add(o);  return counter++;}  }
class C{  public HDBSCAN(DistanceMetric dm,int m_pts){  this(dm,m_pts,m_pts,new VPTreeMV.VPTreeMVFactory<Vec>());}  }
class C{  public FileSplitterInput createFileSplitter(){  return new FileSplitterInput();}  }
class C{  public WriteRequest(final Mode mode,final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final LwM2mResource... resources){  this(mode,contentFormat,new LwM2mPath(objectId,objectInstanceId),new LwM2mObjectInstance(objectId,resources));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DatatypePackage.ENUM__ENUMS:    return ((InternalEList<?>)getEnums()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public CylinderPortrayal3D(Image image,double scale){  this(appearanceForImage(image,true),false,true,scale);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  if (null == prefix || prefix.equals(""))   prefix="xmlns"; else   prefix="xmlns:" + prefix;  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  @Override public boolean supportsDataDefinitionAndDataManipulationTransactions(){  debugCodeCall("supportsDataDefinitionAndDataManipulationTransactions");  return false;}  }
class C{  public static String unbackQuoteChars(String string){  int index;  StringBuffer newStringBuffer;  String charsFind[]={"\\\\","\\'","\\t","\\n","\\r","\\\"","\\%","\\u001E"};  char charsReplace[]={'\\','\'','\t','\n','\r','"','%','\u001E'};  int pos[]=new int[charsFind.length];  int curPos;  String str=new String(string);  newStringBuffer=new StringBuffer();  while (str.length() > 0) {    curPos=str.length();    index=-1;    for (int i=0; i < pos.length; i++) {      pos[i]=str.indexOf(charsFind[i]);      if ((pos[i] > -1) && (pos[i] < curPos)) {        index=i;        curPos=pos[i];      }    }    if (index == -1) {      newStringBuffer.append(str);      str="";    } else {      newStringBuffer.append(str.substring(0,pos[index]));      newStringBuffer.append(charsReplace[index]);      str=str.substring(pos[index] + charsFind[index].length());    }  }  return newStringBuffer.toString();}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public boolean isStartAtZeroEnabled(){  return mStartAtZero;}  }
class C{  public static final double scalbn(double x,int n){  return scalb(x,n);}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  if (stored != null && stored.getGas() != null) {    nbtTags.setTag("stored",stored.write(new NBTTagCompound()));  }  nbtTags.setInteger("maxGas",maxGas);  return nbtTags;}  }
class C{  public Boolean call() throws ManagementVmAddressAlreadyInUseException {  try {    InetAddress inetAddress=InetAddress.getByName(address);    if (inetAddress.isReachable(HOST_PING_TIMEOUT)) {      throw new ManagementVmAddressAlreadyInUseException(address);    }  } catch (  IOException e) {  }  return true;}  }
class C{  public boolean isPure(String className,String methodName,String descriptor){  MethodEntry entry=new MethodEntry(className,methodName,descriptor);  return isPure(entry);}  }
class C{  public DTM createDocumentFragment(){  return m_dtmManager.createDocumentFragment();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.530 -0500",hash_original_method="624DA77F613D89E75494C45A9B699A03",hash_generated_method="F9B9D9A532011D3CD57536643DB24851") public boolean onKeyDown(View view,Editable content,int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {    press(content,CAP);    return true;  }  if (keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT || keyCode == KeyEvent.KEYCODE_NUM) {    press(content,ALT);    return true;  }  if (keyCode == KeyEvent.KEYCODE_SYM) {    press(content,SYM);    return true;  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void checkForInterruption(int line) throws InterruptedException {  if (Thread.interrupted()) {    StatusReport report=report();    String msg="Interrupting dwca generator at line " + line + ". Last status: "+ report.getState();    log.info(msg);    throw new InterruptedException(msg);  }}  }
class C{  public byte[] toByteArray(){  byte[] copy=new byte[outputPos];  System.arraycopy(bytes,0,copy,0,outputPos);  return copy;}  }
class C{  public static Connection newInstance(DataSourceRepository database,SmartDataSource dataSource,String username,String password){  InvocationHandler handler=new SmartConnection(database,dataSource,username,password);  ClassLoader cl=Connection.class.getClassLoader();  return (Connection)Proxy.newProxyInstance(cl,new Class[]{Connection.class},handler);}  }
class C{  public void testConnectZephyrBluetoothSensor_notRecording(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  bluetoothSensorTest(R.string.settings_sensor_type_zephyr,ZEPHYR_NAME,false);}  }
class C{  public static void addPropertiesForLocation(WarningPropertySet<WarningProperty> propertySet,ClassContext classContext,Method method,int pc){  try {    Location location=pcToLocation(classContext,method,pc);    if (location != null) {      addPropertiesForDataMining(propertySet,classContext,method,location);    }  } catch (  CFGBuilderException e) {  }}  }
class C{  public Object readDefaultListModel(Element node) throws Exception {  DefaultListModel model;  Vector<Element> children;  Element child;  int i;  int index;  int currIndex;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  children=XMLDocument.getChildTags(node);  model=new DefaultListModel();  index=children.size() - 1;  for (i=0; i < children.size(); i++) {    child=children.get(i);    currIndex=Integer.parseInt(child.getAttribute(ATT_NAME));    if (currIndex > index) {      index=currIndex;    }  }  model.setSize(index + 1);  for (i=0; i < children.size(); i++) {    child=children.get(i);    model.set(Integer.parseInt(child.getAttribute(ATT_NAME)),invokeReadFromXML(child));  }  return model;}  }
class C{  private long readWord(final int position){  if (position < 0) {    throw new ArrayIndexOutOfBoundsException(position);  }  final long firstBitIndex=((long)position) * ((long)wordLength);  final int firstByteIndex=(bytePadding + (int)(firstBitIndex / BITS_PER_BYTE));  final int firstByteSkipBits=(int)(firstBitIndex % BITS_PER_BYTE);  final long lastBitIndex=(firstBitIndex + wordLength - 1);  final int lastByteIndex=(bytePadding + (int)(lastBitIndex / BITS_PER_BYTE));  final int lastByteBitsToConsume;  final int bitsAfterByteBoundary=(int)((lastBitIndex + 1) % BITS_PER_BYTE);  if (bitsAfterByteBoundary == 0) {    lastByteBitsToConsume=BITS_PER_BYTE;  } else {    lastByteBitsToConsume=bitsAfterByteBoundary;  }  if (lastByteIndex >= bytes.length) {    throw new ArrayIndexOutOfBoundsException("Word out of bounds of backing array.");  }  long value=0;  final int bitsRemainingInFirstByte=(BITS_PER_BYTE - firstByteSkipBits);  final int bitsToConsumeInFirstByte=Math.min(bitsRemainingInFirstByte,wordLength);  long firstByte=(long)bytes[firstByteIndex];  final long firstByteMask=((1L << bitsRemainingInFirstByte) - 1L);  firstByte&=firstByteMask;  firstByte>>>=(bitsRemainingInFirstByte - bitsToConsumeInFirstByte);  value|=firstByte;  if (firstByteIndex == lastByteIndex) {    return value;  }  final int middleByteCount=(lastByteIndex - firstByteIndex - 1);  for (int i=0; i < middleByteCount; i++) {    final long middleByte=(bytes[firstByteIndex + i + 1] & BYTE_MASK);    value<<=BITS_PER_BYTE;    value|=middleByte;  }  long lastByte=(bytes[lastByteIndex] & BYTE_MASK);  lastByte>>=(BITS_PER_BYTE - lastByteBitsToConsume);  value<<=lastByteBitsToConsume;  value|=lastByte;  return value;}  }
class C{  public CapabilityFilter(String... capabilities){  for (  String capability : capabilities) {    addCapability(capability);  }}  }
class C{  private boolean checkForLeavingTouchModeAndConsume(KeyEvent event){  if (!mAttachInfo.mInTouchMode) {    return false;  }  final int action=event.getAction();  if (action != KeyEvent.ACTION_DOWN && action != KeyEvent.ACTION_MULTIPLE) {    return false;  }  if ((event.getFlags() & KeyEvent.FLAG_KEEP_TOUCH_MODE) != 0) {    return false;  }  if (isNavigationKey(event)) {    return ensureTouchMode(false);  }  if (isTypingKey(event)) {    ensureTouchMode(false);    return false;  }  return false;}  }
class C{  public ValueHolderTestCaseBase(String name){  super(name);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private void informReferralToServer(){  final String referrer=SharedPreferenceHelper.getString(R.string.pref_referrer);  if (!TextUtils.isEmpty(referrer)) {    final Map<String,String> params=new HashMap<String,String>();    params.put(HttpConstants.REFERRAL_ID,referrer);    params.put(HttpConstants.DEVICE_ID,AppConstants.UserInfo.INSTANCE.getDeviceId());    mYeloApi.postReferrer(params,this);  }}  }
class C{  private PojoPropertiesCache(String clsName,JdbcTypeField[] jdbcFlds) throws CacheException {  try {    cls=Class.forName(clsName);    ctor=cls.getDeclaredConstructor();    if (!ctor.isAccessible())     ctor.setAccessible(true);  } catch (  ClassNotFoundException e) {    throw new CacheException("Failed to find class: " + clsName,e);  }catch (  NoSuchMethodException e) {    throw new CacheException("Failed to find default constructor for class: " + clsName,e);  }  props=U.newHashMap(jdbcFlds.length);  for (  JdbcTypeField jdbcFld : jdbcFlds) {    String fldName=jdbcFld.getJavaFieldName();    String mthName=capitalFirst(fldName);    Method getter=methodByName(cls,"get" + mthName);    if (getter == null)     getter=methodByName(cls,"is" + mthName);    if (getter == null)     getter=methodByName(cls,fldName);    Method setter=methodByName(cls,"set" + mthName,jdbcFld.getJavaFieldType());    if (setter == null)     setter=methodByName(cls,fldName,jdbcFld.getJavaFieldType());    if (getter != null && setter != null)     props.put(fldName,new ClassProperty(getter,setter,null)); else     try {      props.put(fldName,new ClassProperty(null,null,cls.getDeclaredField(fldName)));    } catch (    NoSuchFieldException ignored) {      throw new CacheException("Failed to find property in POJO class [class=" + clsName + ", prop="+ fldName+ "]");    }  }}  }
class C{  public final int peepTailSub1(){  return m_map[m_firstFree - 2];}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  BabyModelDao.dropTable(db,ifExists);}  }
class C{  public void reset(){  for (int i=0; i < NUMREG; i++) {    reg[i]=0L;  }  clearDirty();}  }
class C{  private void selectSynapses(){  List<SynapseNode> nodes=new ArrayList<SynapseNode>();  for (  Synapse synapse : synapseGroup.getExcitatorySynapses()) {    nodes.add((SynapseNode)getNetworkPanel().getObjectNodeMap().get(synapse));  }  for (  Synapse synapse : synapseGroup.getInhibitorySynapses()) {    nodes.add((SynapseNode)getNetworkPanel().getObjectNodeMap().get(synapse));  }  getNetworkPanel().clearSelection();  getNetworkPanel().setSelection(nodes);}  }
class C{  protected boolean envelopesIntersect(Geometry g){  if (!baseGeom.getEnvelopeInternal().intersects(g.getEnvelopeInternal()))   return false;  return true;}  }
class C{  public int map(int i){  return (multiplier * i + ADDEND) % modulus;}  }
class C{  public MonitorIdNode monitorIdAt(int i){  assert monitorIds != null && i >= 0 && i < locksSize();  return monitorIds.get(i);}  }
class C{  public static float[] addBounds(float[] target,float[] expander){  assert target.length == 6;  target[0]+=expander[0];  target[1]+=expander[1];  target[2]+=expander[2];  target[3]+=expander[3];  target[4]+=expander[4];  target[5]+=expander[5];  return target;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == Tag.class) {switch (derivedFeatureID) {case DomPackage.INLINE_TAG__TITLE:      return DomPackage.TAG__TITLE;case DomPackage.INLINE_TAG__VALUES:    return DomPackage.TAG__VALUES;case DomPackage.INLINE_TAG__TAG_DEFINITION:  return DomPackage.TAG__TAG_DEFINITION;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private int parseHeader(InputStream is){  int index=0;  int nread=0;  log("Parse a header");  nread=readOneLine(is);  if (nread == -1) {    requestMethod=UNKNOWN_METHOD;    return -1;  }  int i=index;  while (buf[i] != (byte)':') {    if ((buf[i] == (byte)'\n') || (buf[i] == (byte)'\r')) {      return UNKNOWN_METHOD;    }    i++;  }  String headerName=new String(buf,0,i);  i++;  while (buf[i] == ' ') {    i++;  }  String headerValue=new String(buf,i,nread - 1);  headers.put(headerName,headerValue);  return nread;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols, x, y;  int progress=0;  double z, zN, noData, outputNoData;  int i, n;  int[] dX;  int[] dY;  double[] filterShape;  double[] data;  double largeValue=Float.POSITIVE_INFINITY;  int numPixelsInFilter;  int filterSize, midPoint, lowerQuartile;  boolean performLineThinning=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSize=Integer.parseInt(args[2]);  performLineThinning=Boolean.parseBoolean(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSize++;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    i=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[i]=col - midPoint;        dY[i]=row - midPoint;        z=(dX[i] * dX[i]) / aSqr + (dY[i] * dY[i]) / aSqr;        if (z > 1) {          filterShape[i]=0;        } else {          filterShape[i]=1;        }        i++;      }    }    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          data=new double[numPixelsInFilter];          n=0;          for (i=0; i < numPixelsInFilter; i++) {            x=col + dX[i];            y=row + dY[i];            zN=DEM.getValue(y,x);            if (zN != noData) {              data[i]=zN;              n++;            } else {              data[i]=largeValue;            }          }          if (n > 0) {            Arrays.sort(data);            lowerQuartile=n / 4;            if (z <= data[lowerQuartile]) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void loadConfiguration(){  tools.armorSpawnRate=Mekanism.configuration.get("tools.general","MobArmorSpawnRate",0.03,null,0.00,1.00).getDouble(0.03);  if (Mekanism.configuration.hasChanged())   Mekanism.configuration.save();}  }
class C{  public void remove(final T object){  if (object == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  checkWidget();  checkNullElement();  this.elements.remove(object);  this.selection.remove(object);  refresh();}  }
class C{  public static int findStartTrimNewlineChars(CharSequence s){  return findStartTrimNewlineChars(s,0);}  }
class C{  public T caseAnonymous_methodBody_2_(Anonymous_methodBody_2_ object){  return null;}  }
class C{  private void flushLeft() throws IOException {  appendNewlineIfNecessary(leftBuf,leftColumn);  while (leftBuf.length() != 0) {    rightColumn.write('\n');    outputFullLines();  }}  }
class C{  public List<FileStatusEntity> joinFileSensitivity(String site,List<FileStatus> fileStatuses){  List<FileStatusEntity> result=new ArrayList<>();  HDFSResourceSensitivityService sensitivityService=new HDFSResourceSensitivityService(dao);  Map<String,String> sensitivityMap=sensitivityService.getFileSensitivityMapBySite(site);  LOG.info("Joining Resource with Sensitivity data ..");  for (  FileStatus fileStatus : fileStatuses) {    String resource=fileStatus.getPath().toUri().getPath();    FileStatusEntity entity;    try {      entity=new FileStatusEntity(fileStatus);      entity.setResource(resource);      entity.setSensitiveType(sensitivityMap.get(resource));      entity.setChildSensitiveTypes(getChildSensitivityTypes(resource,sensitivityMap));      result.add(entity);    } catch (    IOException e) {      LOG.error(" Exception when joining FileSensitivity .. Error Message : " + e.getMessage());    }  }  return result;}  }
class C{  public static void testSignNeg() throws AssertFailException {  byte[] data=BaseEncoding.base16().lowerCase().decode("CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A90".toLowerCase());  byte[] sec=BaseEncoding.base16().lowerCase().decode("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF".toLowerCase());  byte[] resultArr=NativeSecp256k1.sign(data,sec);  String sigString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(sigString,"","testSignNeg");}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public void onEvent(NoSubscriberEvent event){  if (event.originalEvent instanceof ModelModifiedMessage) {    onEvent(new StickyUpdatedMessage());  }}  }
class C{  public Kern createKern(BridgeContext ctx,Element kernElement,SVGGVTFont font){  String u1=kernElement.getAttributeNS(null,SVG_U1_ATTRIBUTE);  String u2=kernElement.getAttributeNS(null,SVG_U2_ATTRIBUTE);  String g1=kernElement.getAttributeNS(null,SVG_G1_ATTRIBUTE);  String g2=kernElement.getAttributeNS(null,SVG_G2_ATTRIBUTE);  String k=kernElement.getAttributeNS(null,SVG_K_ATTRIBUTE);  if (k.length() == 0) {    k=SVG_KERN_K_DEFAULT_VALUE;  }  float kernValue=Float.parseFloat(k);  int firstGlyphLen=0, secondGlyphLen=0;  int[] firstGlyphSet=null;  int[] secondGlyphSet=null;  List firstUnicodeRanges=new ArrayList();  List secondUnicodeRanges=new ArrayList();  StringTokenizer st=new StringTokenizer(u1,",");  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (token.startsWith("U+")) {      firstUnicodeRanges.add(new UnicodeRange(token));    } else {      int[] glyphCodes=font.getGlyphCodesForUnicode(token);      if (firstGlyphSet == null) {        firstGlyphSet=glyphCodes;        firstGlyphLen=glyphCodes.length;      } else {        if ((firstGlyphLen + glyphCodes.length) > firstGlyphSet.length) {          int sz=firstGlyphSet.length * 2;          if (sz < firstGlyphLen + glyphCodes.length)           sz=firstGlyphLen + glyphCodes.length;          int[] tmp=new int[sz];          System.arraycopy(firstGlyphSet,0,tmp,0,firstGlyphLen);          firstGlyphSet=tmp;        }        for (int i=0; i < glyphCodes.length; i++)         firstGlyphSet[firstGlyphLen++]=glyphCodes[i];      }    }  }  st=new StringTokenizer(u2,",");  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (token.startsWith("U+")) {      secondUnicodeRanges.add(new UnicodeRange(token));    } else {      int[] glyphCodes=font.getGlyphCodesForUnicode(token);      if (secondGlyphSet == null) {        secondGlyphSet=glyphCodes;        secondGlyphLen=glyphCodes.length;      } else {        if ((secondGlyphLen + glyphCodes.length) > secondGlyphSet.length) {          int sz=secondGlyphSet.length * 2;          if (sz < secondGlyphLen + glyphCodes.length)           sz=secondGlyphLen + glyphCodes.length;          int[] tmp=new int[sz];          System.arraycopy(secondGlyphSet,0,tmp,0,secondGlyphLen);          secondGlyphSet=tmp;        }        for (int i=0; i < glyphCodes.length; i++)         secondGlyphSet[secondGlyphLen++]=glyphCodes[i];      }    }  }  st=new StringTokenizer(g1,",");  while (st.hasMoreTokens()) {    String token=st.nextToken();    int[] glyphCodes=font.getGlyphCodesForName(token);    if (firstGlyphSet == null) {      firstGlyphSet=glyphCodes;      firstGlyphLen=glyphCodes.length;    } else {      if ((firstGlyphLen + glyphCodes.length) > firstGlyphSet.length) {        int sz=firstGlyphSet.length * 2;        if (sz < firstGlyphLen + glyphCodes.length)         sz=firstGlyphLen + glyphCodes.length;        int[] tmp=new int[sz];        System.arraycopy(firstGlyphSet,0,tmp,0,firstGlyphLen);        firstGlyphSet=tmp;      }      for (int i=0; i < glyphCodes.length; i++)       firstGlyphSet[firstGlyphLen++]=glyphCodes[i];    }  }  st=new StringTokenizer(g2,",");  while (st.hasMoreTokens()) {    String token=st.nextToken();    int[] glyphCodes=font.getGlyphCodesForName(token);    if (secondGlyphSet == null) {      secondGlyphSet=glyphCodes;      secondGlyphLen=glyphCodes.length;    } else {      if ((secondGlyphLen + glyphCodes.length) > secondGlyphSet.length) {        int sz=secondGlyphSet.length * 2;        if (sz < secondGlyphLen + glyphCodes.length)         sz=secondGlyphLen + glyphCodes.length;        int[] tmp=new int[sz];        System.arraycopy(secondGlyphSet,0,tmp,0,secondGlyphLen);        secondGlyphSet=tmp;      }      for (int i=0; i < glyphCodes.length; i++)       secondGlyphSet[secondGlyphLen++]=glyphCodes[i];    }  }  int[] firstGlyphs;  if ((firstGlyphLen == 0) || (firstGlyphLen == firstGlyphSet.length)) {    firstGlyphs=firstGlyphSet;  } else {    firstGlyphs=new int[firstGlyphLen];    System.arraycopy(firstGlyphSet,0,firstGlyphs,0,firstGlyphLen);  }  int[] secondGlyphs;  if ((secondGlyphLen == 0) || (secondGlyphLen == secondGlyphSet.length)) {    secondGlyphs=secondGlyphSet;  } else {    secondGlyphs=new int[secondGlyphLen];    System.arraycopy(secondGlyphSet,0,secondGlyphs,0,secondGlyphLen);  }  UnicodeRange[] firstRanges;  firstRanges=new UnicodeRange[firstUnicodeRanges.size()];  firstUnicodeRanges.toArray(firstRanges);  UnicodeRange[] secondRanges;  secondRanges=new UnicodeRange[secondUnicodeRanges.size()];  secondUnicodeRanges.toArray(secondRanges);  return new Kern(firstGlyphs,secondGlyphs,firstRanges,secondRanges,kernValue);}  }
class C{  public boolean isSetMsg(){  return this.msg != null;}  }
class C{  public void onMerge(W window,Timers timers,MergingStateAccessor<?,W> state) throws Exception {  FinishedTriggersBitSet finishedSet=readFinishedBits(state.access(FINISHED_BITS_TAG)).copy();  ImmutableMap.Builder<W,FinishedTriggers> builder=ImmutableMap.builder();  for (  Map.Entry<W,ValueState<BitSet>> entry : state.accessInEachMergingWindow(FINISHED_BITS_TAG).entrySet()) {    builder.put(entry.getKey(),readFinishedBits(entry.getValue()));    clearFinishedBits(entry.getValue());  }  ImmutableMap<W,FinishedTriggers> mergingFinishedSets=builder.build();  TriggerStateMachine.OnMergeContext mergeContext=contextFactory.createOnMergeContext(window,timers,rootTrigger,finishedSet,mergingFinishedSets);  rootTrigger.invokeOnMerge(mergeContext);  persistFinishedSet(state,finishedSet);}  }
class C{  @Override public Page<Rollout> findAllRolloutsWithDetailedStatus(final Pageable pageable){  final Page<JpaRollout> rollouts=rolloutRepository.findAll(pageable);  setRolloutStatusDetails(rollouts);  return convertPage(rollouts,pageable);}  }
class C{  private void playShutterSound(){  MediaActionSound sound=new MediaActionSound();  sound.play(MediaActionSound.SHUTTER_CLICK);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.175 -0500",hash_original_method="090104ADCCDA5F259494E038435257D1",hash_generated_method="44967D4371B86643EEA5A7B1E742DF94") public ContentEncodingHeader createContentEncodingHeader(String encoding) throws ParseException {  if (encoding == null)   throw new NullPointerException("null encoding");  ContentEncoding c=new ContentEncoding();  c.setEncoding(encoding);  return c;}  }
class C{  public void inverseDWT(ImageTree dwts,int[][] pixels){  Image image=null;  image=DWTUtil.inverseTransform(dwts,this.filters,this.method + 1);  for (int i=0; i < this.rows; i++) {    for (int j=0; j < this.cols; j++) {      pixels[i][j]=ImageUtil.pixelRange((int)(DWTUtil.getPixel(image,j,i) + 0.5));    }  }}  }
class C{  @Override public int run(String[] strings) throws Exception {  conf.set(MRUtils.JOB_NAME_PROP,"Gather Evaluation Statistics");  init();  Job job=new Job(conf);  job.setJarByClass(AccumuloRdfCountTool.class);  setupAccumuloInput(job);  AccumuloInputFormat.setRanges(job,Lists.newArrayList(new Range(new Text(new byte[]{}),new Text(new byte[]{Byte.MAX_VALUE}))));  job.setMapOutputKeyClass(Text.class);  job.setMapOutputValueClass(LongWritable.class);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(Mutation.class);  job.setMapperClass(CountPiecesMapper.class);  job.setCombinerClass(CountPiecesCombiner.class);  job.setReducerClass(CountPiecesReducer.class);  String outputTable=MRUtils.getTablePrefix(conf) + RdfCloudTripleStoreConstants.TBL_EVAL_SUFFIX;  setupAccumuloOutput(job,outputTable);  Date startTime=new Date();  System.out.println("Job started: " + startTime);  int exitCode=job.waitForCompletion(true) ? 0 : 1;  if (exitCode == 0) {    Date end_time=new Date();    System.out.println("Job ended: " + end_time);    System.out.println("The job took " + (end_time.getTime() - startTime.getTime()) / 1000 + " seconds.");    return 0;  } else {    System.out.println("Job Failed!!!");  }  return -1;}  }
class C{  private void appletShutdown(AppletPanel p){  p.sendEvent(AppletPanel.APPLET_STOP);  p.sendEvent(AppletPanel.APPLET_DESTROY);  p.sendEvent(AppletPanel.APPLET_DISPOSE);  p.sendEvent(AppletPanel.APPLET_QUIT);}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.STRING_LITERAL_FOR_STE__ENTRY:    setEntry((SymbolTableEntry)newValue);  return;case ImPackage.STRING_LITERAL_FOR_STE__USE_EXPORTED_NAME:setUseExportedName((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean createUser(Connection sysConn){  log.info(m_adempiereUser + "/" + m_adempierePassword);  return executeCommands(m_dbTarget.getCommands(AdempiereDatabase.CMD_CREATE_USER),sysConn,true,false);}  }
class C{  public static byte[] openBox(byte[] header,byte[] cipherText,ActorBoxKey key) throws IntegrityException {  CBCHmacBox aesCipher=new CBCHmacBox(new AESFastEngine(key.getKeyAES()),new SHA256(),key.getMacAES());  CBCHmacBox kuzCipher=new CBCHmacBox(new KuznechikFastEngine(key.getKeyKuz()),new Streebog256(),key.getMacKuz());  byte[] kuzPackage=aesCipher.decryptPackage(header,ByteStrings.substring(cipherText,0,16),ByteStrings.substring(cipherText,16,cipherText.length - 16));  byte[] plainText=kuzCipher.decryptPackage(header,ByteStrings.substring(kuzPackage,0,16),ByteStrings.substring(kuzPackage,16,kuzPackage.length - 16));  int paddingSize=plainText[plainText.length - 1] & 0xFF;  if (paddingSize < 0 || paddingSize >= 16) {    throw new IntegrityException("Incorrect padding!");  }  PKCS7Padding padding=new PKCS7Padding();  if (!padding.validate(plainText,plainText.length - 1 - paddingSize,paddingSize)) {    throw new IntegrityException("Padding does not match!");  }  return ByteStrings.substring(plainText,0,plainText.length - 1 - paddingSize);}  }
class C{  @Override protected void onResume(){  super.onResume();  registerReceiver();}  }
class C{  public OptionStringGUI_NB(){  initComponents();}  }
class C{  public static boolean versionKnown(){  return known;}  }
class C{  public MailItemEntry(BaseEntry<MailItemEntry> sourceEntry){  super(sourceEntry);  getCategories().add(MAILITEM_CATEGORY);}  }
class C{  protected boolean hasOutstandingChanges(){  return (fieldValue.hasChanged() || fieldName.hasChanged() || fieldContact.hasChanged()|| fieldEMail.hasChanged()|| fieldPhone.hasChanged()|| fieldPostal.hasChanged()|| checkCustomer.hasChanged()|| checkAND.hasChanged());}  }
class C{  public void dropDatabase() throws IOException {  File dbDir=new File(getRawName());  log.debug("Dropping database {} by removing directory {}",name,dbDir.getAbsoluteFile());  FileUtils.deleteDirectory(dbDir);}  }
class C{  public void copyTo(PositionTextureVertex[] verts,TexturedPolygon[] poly){  copyTo(verts,poly,true);}  }
class C{  public TaskInfo delete() throws Exception {  LOG.debug("Call vSphere API: destroyTask() instanceName: " + instanceName);  ManagedObjectReference startTask=vmw.getConnection().getService().destroyTask(vmInstance);  return (TaskInfo)vmw.getServiceUtil().getDynamicProperty(startTask,"info");}  }
class C{  public CSVReader build(){  final CSVParser parser=(csvParser != null ? csvParser : parserBuilder.withFieldAsNull(nullFieldIndicator).build());  return new CSVReader(reader,skipLines,parser,keepCR,verifyReader);}  }
class C{  public boolean hasBatchOperation(){  return hasExtension(BatchOperation.class);}  }
class C{  public static final long bitVectorOfStates(int[][] statuses) throws IllegalArgumentException {  if (statuses.length != NUMBER_OF_PROVERS) {    Activator.getDefault().logDebug("Method ColorPredicate.bitVectorOfStates must be reimplemented" + " when number of provers changes");  }  long result=0;  int[] array=new int[3];  for (int i=0; i < statuses[0].length; i++) {    array[0]=statuses[0][i];    for (int j=0; j < statuses[1].length; j++) {      array[1]=statuses[1][j];      for (int k=0; k < statuses[2].length; k++) {        array[2]=statuses[2][k];        result=result | (1L << numberOfState(array));      }    }  }  return result;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.451 -0500",hash_original_method="6E5629CC68B4185F1ADA3485008A15B3",hash_generated_method="3757B6D1F18269421988179AE69EAB05") public Host parseHost(String host) throws ParseException {  Lexer lexer=new Lexer("charLexer",host);  return new HostNameParser(lexer).host();}  }
class C{  public void initializeObjectChanged(E old,E now){  Integer val=_indexes.remove(old);  _indexes.put(now,val);}  }
class C{  public static void compareDMLMatrixWithJavaMatrix(String expectedFile,String actualDir,double epsilon){  try {    FileSystem fs=FileSystem.get(conf);    Path outDirectory=new Path(actualDir);    Path compareFile=new Path(expectedFile);    FSDataInputStream fsin=fs.open(compareFile);    BufferedReader compareIn=new BufferedReader(new InputStreamReader(fsin));    HashMap<CellIndex,Double> expectedValues=new HashMap<CellIndex,Double>();    String line;    while ((line=compareIn.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line," ");      int i=Integer.parseInt(st.nextToken());      int j=Integer.parseInt(st.nextToken());      double v=Double.parseDouble(st.nextToken());      expectedValues.put(new CellIndex(i,j),v);    }    compareIn.close();    HashMap<CellIndex,Double> actualValues=new HashMap<CellIndex,Double>();    FileStatus[] outFiles=fs.listStatus(outDirectory);    for (    FileStatus file : outFiles) {      FSDataInputStream fsout=fs.open(file.getPath());      BufferedReader outIn=new BufferedReader(new InputStreamReader(fsout));      while ((line=outIn.readLine()) != null) {        StringTokenizer st=new StringTokenizer(line," ");        int i=Integer.parseInt(st.nextToken());        int j=Integer.parseInt(st.nextToken());        double v=Double.parseDouble(st.nextToken());        actualValues.put(new CellIndex(i,j),v);      }      outIn.close();    }    int countErrors=0;    for (    CellIndex index : expectedValues.keySet()) {      Double expectedValue=expectedValues.get(index);      Double actualValue=actualValues.get(index);      if (expectedValue == null)       expectedValue=0.0;      if (actualValue == null)       actualValue=0.0;      if (!compareCellValue(expectedValue,actualValue,epsilon,false)) {        System.out.println(expectedFile + ": " + index+ " mismatch: expected "+ expectedValue+ ", actual "+ actualValue);        countErrors++;      }    }    assertTrue("for file " + actualDir + " "+ countErrors+ " values are not equal",countErrors == 0);  } catch (  IOException e) {    fail("unable to read file: " + e.getMessage());  }}  }
class C{  public Object deSerialize(byte[] value) throws IOException, ClassNotFoundException {  ByteArrayInputStream baip=new ByteArrayInputStream(value);  ObjectInputStream ois=new ObjectInputStream(baip);  return ois.readObject();}  }
class C{  public void detachLocalMirrorFromDistributedVirtualVolume(String virtualVolumeName,String mirrorDeviceName,boolean discard) throws VPlexApiException {  s_logger.info("Request to detach a mirror from a local virtual volume at {}",_baseURI);  _virtualVolumeMgr.detachLocalMirrorFromDistributedVirtualVolume(virtualVolumeName,mirrorDeviceName,discard);}  }
class C{  private static int[] mult64(int[] a,int[] b){  int[] result=new int[4];  int a0=a[0];  int a1=0;  if (a.length > 1) {    a1=a[1];  }  int b0=b[0];  int b1=0;  if (b.length > 1) {    b1=b[1];  }  if (a1 != 0 || b1 != 0) {    int[] c=mult32(a1,b1);    result[3]^=c[1];    result[2]^=c[0] ^ c[1];    result[1]^=c[0];  }  int[] d=mult32(a0 ^ a1,b0 ^ b1);  result[2]^=d[1];  result[1]^=d[0];  int[] e=mult32(a0,b0);  result[2]^=e[1];  result[1]^=e[0] ^ e[1];  result[0]^=e[0];  return result;}  }
class C{  public UnsupportedOperationException(String message){  super(message);}  }
class C{  private int addNames(StringBuilder b,int index,int maxShown,CompletionItems results,String commonPrefix){  List<String> items=results.items;  int left=maxShown - 1;  int start=index - left / 2;  left-=left / 2;  if (start < 0) {    left+=-start;    start=0;  }  int end=index + left;  left=0;  if (end >= items.size()) {    left+=end + 1 - items.size();    end=items.size() - 1;  }  if (left > 0) {    start-=left;    if (start < 0) {      start=0;    }  }  b.append("<div style=''>");  for (int i=start; i <= end; i++) {    String item=items.get(i);    b.append("<span ");    if (i == index) {      b.append("style='background-color:#CCCCCC;'>");      b.append(item);    } else {      b.append(">");      if (commonPrefix.length() > 0) {        int length=commonPrefix.length();        b.append("<span style='background-color:#DDDDDD;'>");        b.append(item.substring(0,length)).append("</span>");        b.append(item.substring(length));      } else {        b.append(item);      }    }    if (results.hasInfo(item)) {      b.append(" <span style='color:#555555'>(").append(results.getInfo(item)).append(")</span>");    }    b.append("</span><br />");  }  b.append("</div>");  return end;}  }
class C{  private void validateWill(String dest,Object payload){  if ((dest == null) || (payload == null)) {    throw new IllegalArgumentException();  }  MqttTopic.validate(dest,false);}  }
class C{  static void updateHash(int[] intArray,byte[] byteInput,int fromByte,int toByte){  int index=intArray[BYTES_OFFSET];  int i=fromByte;  int maxWord;  int nBytes;  int wordIndex=index >> 2;  int byteIndex=index & 0x03;  intArray[BYTES_OFFSET]=(index + toByte - fromByte + 1) & 077;  if (byteIndex != 0) {    for (; (i <= toByte) && (byteIndex < 4); i++) {      intArray[wordIndex]|=(byteInput[i] & 0xFF) << ((3 - byteIndex) << 3);      byteIndex++;    }    if (byteIndex == 4) {      wordIndex++;      if (wordIndex == 16) {        computeHash(intArray);        wordIndex=0;      }    }    if (i > toByte) {      return;    }  }  maxWord=(toByte - i + 1) >> 2;  for (int k=0; k < maxWord; k++) {    intArray[wordIndex]=(((int)byteInput[i] & 0xFF) << 24) | (((int)byteInput[i + 1] & 0xFF) << 16) | (((int)byteInput[i + 2] & 0xFF) << 8)| (((int)byteInput[i + 3] & 0xFF));    i+=4;    wordIndex++;    if (wordIndex < 16) {      continue;    }    computeHash(intArray);    wordIndex=0;  }  nBytes=toByte - i + 1;  if (nBytes != 0) {    int w=((int)byteInput[i] & 0xFF) << 24;    if (nBytes != 1) {      w|=((int)byteInput[i + 1] & 0xFF) << 16;      if (nBytes != 2) {        w|=((int)byteInput[i + 2] & 0xFF) << 8;      }    }    intArray[wordIndex]=w;  }  return;}  }
class C{  @PropertyUpdate(properties={"mail.smpt.host","mail.smpt.port","mail.smpt.user","mail.smpt.passwd","mail.smtp.properties"}) protected void onSmtpPropertiesChanged(){  parseAdditionalPropertiesString();  checkConnection();}  }
class C{  public void createNetwork(Scenario scenario){  Network network=scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord(1.0,10000.0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord(2500.0,10000.0));  Node node3=NetworkUtils.createAndAddNode(network,Id.create("3",Node.class),new Coord(4500.0,10000.0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create("4",Node.class),new Coord(17500.0,10000.0));  Node node5=NetworkUtils.createAndAddNode(network,Id.create("5",Node.class),new Coord(19999.0,10000.0));  Node node6=NetworkUtils.createAndAddNode(network,Id.create("6",Node.class),new Coord(19999.0,1500.0));  Node node7=NetworkUtils.createAndAddNode(network,Id.create("7",Node.class),new Coord(1.0,1500.0));  Node node8=NetworkUtils.createAndAddNode(network,Id.create("8",Node.class),new Coord(12500.0,12499.0));  Node node9=NetworkUtils.createAndAddNode(network,Id.create("9",Node.class),new Coord(12500.0,7500.0));  NetworkUtils.createAndAddLink(network,Id.create("12",Link.class),node1,node2,(double)1000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("23",Link.class),node2,node3,(double)2000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("45",Link.class),node4,node5,(double)2000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("56",Link.class),node5,node6,(double)1000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("67",Link.class),node6,node7,(double)1000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("71",Link.class),node7,node1,(double)1000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("38",Link.class),node3,node8,(double)5000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("39",Link.class),node3,node9,(double)5000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("84",Link.class),node8,node4,(double)5000,100.00 / 3.6,(double)3600,(double)1,null,"22");  NetworkUtils.createAndAddLink(network,Id.create("94",Link.class),node9,node4,(double)4999,100.00 / 3.6,(double)3600,(double)1,null,"22");  for (Integer i=0; i < 5; i++) {    for (Integer j=0; j < 4; j++) {      String idpart=i.toString() + j.toString();      double xCoord=6563. + (i + 1) * 625;      double yCoord=7188. + (j - 1) * 625;      Node nodeA=NetworkUtils.createAndAddNode(network,Id.create("node_" + idpart + "A",Node.class),new Coord(xCoord,yCoord));      Node nodeB=NetworkUtils.createAndAddNode(network,Id.create("node_" + idpart + "B",Node.class),new Coord(xCoord,yCoord + 1.));      NetworkUtils.createAndAddLink(network,Id.create("link_p" + idpart,Link.class),nodeA,nodeB,(double)10,30.0,(double)3600,(double)1);    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  private void doPermissionWorkBeforeAndroidM(@NonNull Activity activity,@NonNull String[] permissions,@Nullable PermissionsResultAction action){  for (  String perm : permissions) {    if (action != null) {      if (!mPermissions.contains(perm)) {        action.onResult(perm,Permissions.NOT_FOUND);      } else       if (ActivityCompat.checkSelfPermission(activity,perm) != PackageManager.PERMISSION_GRANTED) {        action.onResult(perm,Permissions.DENIED);      } else {        action.onResult(perm,Permissions.GRANTED);      }    }  }}  }
class C{  public Split(final IPartitionMetadata pmd,final int fromIndex,final int toIndex){  this.pmd=pmd;  if (fromIndex < 0)   throw new IllegalArgumentException("fromIndex=" + fromIndex);  if (toIndex < fromIndex)   throw new IllegalArgumentException("fromIndex=" + fromIndex + ", toIndex="+ toIndex);  this.fromIndex=fromIndex;  this.toIndex=toIndex;  this.ntuples=toIndex - fromIndex;}  }
class C{  protected void calculateStatesStatesPruning(int[] states1,double[] matrices1,int[] states2,double[] matrices2,double[] partials3,int[] matrixMap){  throw new RuntimeException("calculateStatesStatesPruning not implemented using matrixMap");}  }
class C{  public void clearAttributes(){  attributes.clear();}  }
class C{  public static String toDayString(Context context,long timeMillis){  return DateUtils.formatDateTime(context,timeMillis,DateUtils.FORMAT_SHOW_WEEKDAY | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NO_YEAR);}  }
class C{  public static byte[] intToUInt32(int i,ByteOrder endian){  int truncated=(int)((long)i);  return ByteBuffer.allocate(4).order(endian).putInt(truncated).array();}  }
class C{  public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {  return toJSONArray(names,new JSONTokener(string));}  }
class C{  public void init() throws ServletException {}  }
class C{  private ExpressionAST parseResilient(Universe root,Relation relation,List<Relation> relationScope) throws ScopeException {  try {    return root.getParser().parse(relation,relation.getJoinExpression().getValue(),relationScope);  } catch (  ScopeException e) {    if (relation.getJoinExpression().getInternal() != null) {      try {        ExpressionAST intern=root.getParser().parse(relation,relation.getJoinExpression().getInternal(),relationScope);        String value=root.getParser().rewriteExpressionIntern(relation.getJoinExpression().getInternal(),intern);        relation.getJoinExpression().setValue(value);        return intern;      } catch (      ScopeException e2) {        throw e;      }    }    throw e;  }}  }
class C{  public NullCipher(){  super(new NullCipherSpi(),null);}  }
class C{  public boolean isLeaf(){  return !getAllowsChildren();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static void sleepMillis(long millis) throws InterruptedException {  INSTANCE.sleep(millis);}  }
class C{  public boolean isAnyDialogShowing(){  boolean providersDisplaying=(activeProvider != null && activeProvider.isDialogShowing());  boolean gpServicesDisplaying=(gpServicesDialog != null && gpServicesDialog.isShowing());  return gpServicesDisplaying || providersDisplaying;}  }
class C{  public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  @Override public int compare(final CashFlow o1,final CashFlow o2){  if (o1.date().le(o2.date()))   return -1;  if (o2.date().le(o1.date()))   return 1;  return 0;}  }
class C{  public boolean hasImages(){  return mHasImages;}  }
class C{  public static HTTPResponse put(URL url,String username,String password,long timeout,boolean redirect,String mimetype,String charset,String useragent,ProxyData proxy,lucee.commons.net.http.Header[] headers,Object body) throws IOException {  HttpPut put=new HttpPut(url.toExternalForm());  setBody(put,body,mimetype,charset);  return _invoke(url,put,username,password,timeout,redirect,charset,useragent,proxy,headers,null);}  }
class C{  public void addField(CtField f) throws CannotCompileException {  addField(f,(CtField.Initializer)null);}  }
class C{  @Override public ICloseableIterator<IBindingSet> call(final IBindingSet[] bc){  if (log.isInfoEnabled()) {    log.info(bc.length);    log.info(Arrays.toString(bc));    log.info(serviceParams);  }  if (bc != null && bc.length > 0 && !bc[0].equals(EmptyBindingSet.INSTANCE)) {    throw new RuntimeException("cannot run with incoming bindings");  }  @SuppressWarnings("unchecked") IPredicate<ISPO> pred=(IPredicate<ISPO>)db.getPredicate(sp.s() != null && sp.s().isConstant() ? (Resource)sp.s().getValue() : null,sp.p() != null && sp.p().isConstant() ? (URI)sp.p().getValue() : null,sp.o() != null && sp.o().isConstant() ? (Value)sp.o().getValue() : null,sp.c() != null && sp.c().isConstant() ? (Resource)sp.c().getValue() : null);  if (pred == null) {    return new EmptyCloseableIterator<IBindingSet>();  }  pred=(IPredicate<ISPO>)pred.setProperty(IPredicate.Annotations.TIMESTAMP,db.getSPORelation().getTimestamp());  final int limit=serviceParams.getAsInt(SampleParams.LIMIT,SampleParams.DEFAULT_LIMIT);  final long seed=serviceParams.getAsLong(SampleParams.SEED,SampleParams.DEFAULT_SEED);  final String type=serviceParams.getAsString(SampleParams.SAMPLE_TYPE,SampleParams.DEFAULT_SAMPLE_TYPE);  @SuppressWarnings({"unchecked","rawtypes"}) final SampleIndex<?> sampleOp=new SampleIndex(new BOp[]{},NV.asMap(new NV(SampleIndex.Annotations.PREDICATE,pred),new NV(SampleIndex.Annotations.LIMIT,limit),new NV(SampleIndex.Annotations.SEED,seed),new NV(SampleIndex.Annotations.SAMPLE_TYPE,type)));  final BOpContextBase context=new BOpContextBase(QueryEngineFactory.getInstance().getQueryController(db.getIndexManager()));  final ISPO[] elements=(ISPO[])sampleOp.eval(context);  final IBindingSet[] bSets=new IBindingSet[elements.length];  for (int i=0; i < elements.length; i++) {    bSets[i]=new ListBindingSet();    if (sp.s() != null && sp.s().isVariable())     bSets[i].set((IVariable<IV>)sp.s().getValueExpression(),new Constant<IV>(elements[i].s()));    if (sp.p() != null && sp.p().isVariable())     bSets[i].set((IVariable<IV>)sp.p().getValueExpression(),new Constant<IV>(elements[i].p()));    if (sp.o() != null && sp.o().isVariable())     bSets[i].set((IVariable<IV>)sp.o().getValueExpression(),new Constant<IV>(elements[i].o()));    if (sp.c() != null && sp.c().isVariable())     bSets[i].set((IVariable<IV>)sp.c().getValueExpression(),new Constant<IV>(elements[i].c()));  }  return new ThickCloseableIterator<IBindingSet>(bSets,bSets.length);}  }
class C{  public void init() throws ServletException {}  }
class C{  public static String nullToEmpty(@Nullable String string){  return (string == null) ? "" : string;}  }
class C{  public static final Number AVG(Number[] vals){  try {    return Double.valueOf(SUM(vals).doubleValue() / vals.length);  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable ex) {    SystemFailure.checkFailure();    return null;  }}  }
class C{  public static <E>Collection<E> lockedCollection(Collection<E> c){  return new LockedCollection<>(c);}  }
class C{  public static <T1,T2,T3,T4,T5,R>Promise<R> join(Promise<T1> p1,Promise<T2> p2,Promise<T3> p3,Promise<T4> p4,Promise<T5> p5,final Func5<T1,T2,T3,T4,T5,R> joinFunction){  return new Promise<R>(Observable.zip(p1.observable,p2.observable,p3.observable,p4.observable,p5.observable,joinFunction));}  }
class C{  public ScVolume findReplayView(String instanceId){  PayloadFilter filter=new PayloadFilter();  filter.append("notes",instanceId);  RestResult rr=restClient.post("StorageCenter/ScVolumeConfiguration/GetList",filter.toJson());  if (checkResults(rr)) {    ScVolumeConfiguration[] config=gson.fromJson(rr.getResult(),ScVolumeConfiguration[].class);    rr=restClient.get(String.format("StorageCenter/ScVolume/%s",config[0].volume.instanceId));    if (checkResults(rr)) {      return gson.fromJson(rr.getResult(),ScVolume.class);    } else {      LOG.warn(rr.getErrorMsg());    }  } else {    LOG.warn(rr.getErrorMsg());  }  return null;}  }
class C{  public boolean isAssignableFrom(Class cl){  return getName().equals(cl.getName());}  }
class C{  public TLongHashSet(int initialCapacity){  super(initialCapacity);}  }
class C{  public static String toDottedQuad(byte[] addr){  return ((addr[0] & 0xFF) + "." + (addr[1] & 0xFF)+ "."+ (addr[2] & 0xFF)+ "."+ (addr[3] & 0xFF));}  }
class C{  @Override public boolean mayIntersect(S2Cell cell){  return intersects(cell.id());}  }
class C{  @Override public XMLEventWriter createXMLEventWriter(OutputStream out,String encoding) throws XMLStreamException {  return new WbXmlEventWriter(out,(WbXmlDefinition)props.get(DEFINITION_PROPERTY),(WbXmlEncoder.StrtblType)props.get(ENCODING_TYPE_PROPERTY),(Boolean)props.get(SKIP_SPACES_PROPERTY),encoding);}  }
class C{  public T caseFeatureParameterValue(FeatureParameterValue object){  return null;}  }
class C{  protected CodeInjection_Impl(){  super();}  }
class C{  private void addRect(@NonNull GeometryArrays geoArrays,@NonNull float[][] rectPoints,@NonNull RectF viewPort,float z){  final float[] vertices=geoArrays.triangleVertices;  final short[] indices=geoArrays.triangleIndices;  final int indicesOffset=geoArrays.indicesOffset;  final int verticesOffset=geoArrays.verticesOffset;  int rectPointIdx=0;  for (  final float[] rectPoint : rectPoints) {    final int currentVertexOffset=verticesOffset + rectPointIdx * 5;    vertices[currentVertexOffset]=rectPoint[0];    vertices[currentVertexOffset + 1]=rectPoint[1];    vertices[currentVertexOffset + 2]=z;    vertices[currentVertexOffset + 3]=(rectPoint[0] - viewPort.left) / viewPort.width();    vertices[currentVertexOffset + 4]=(rectPoint[1] - viewPort.bottom) / -viewPort.height();    rectPointIdx++;  }  final int initialIdx=verticesOffset / 5;  indices[indicesOffset]=(short)(initialIdx);  indices[indicesOffset + 1]=(short)(initialIdx + 1);  indices[indicesOffset + 2]=(short)(initialIdx + 2);  indices[indicesOffset + 3]=(short)(initialIdx + 1);  indices[indicesOffset + 4]=(short)(initialIdx + 2);  indices[indicesOffset + 5]=(short)(initialIdx + 3);}  }
class C{  public PISAAlgorithms(){  super();}  }
class C{  @SuppressWarnings("OverridableMethodCallInConstructor") public RailComTableAction(String actionName){  super(actionName);  if (InstanceManager.getNullableDefault(RailComManager.class) == null) {    setEnabled(false);  }  includeAddButton=false;}  }
class C{  public double sum2(DoubleVector v){  return minus(v).sum2();}  }
class C{  public boolean block(long timeout){  if (timeout != 0) {synchronized (this) {      long now=System.currentTimeMillis();      long end=now + timeout;      while (!mCondition && now < end) {        try {          this.wait(end - now);        } catch (        InterruptedException e) {        }        now=System.currentTimeMillis();      }      return mCondition;    }  } else {    this.block();    return true;  }}  }
class C{  public static Map<String,Object> flattenAsMap(String json){  return new JsonFlattener(json).flattenAsMap();}  }
class C{  public static String stripOfVersionNumberIfExists(final String identifier){  int finalDotPos=identifier.lastIndexOf('.');  if (finalDotPos > 0) {    return identifier.substring(0,finalDotPos);  }  return identifier;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.202 -0400",hash_original_method="50FB2164D94CD612AB121714AF75AB19",hash_generated_method="27DC2076F8C40F83A84E857BDC6603B7") public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public static JMenuItem addSetting(JMenu parent,final String name,BooleanSetting setting){  JMenuItem item=new SkinCheckBoxMenuItem(name,setting.getValue());  item.putClientProperty(SETTING,setting);  item.addActionListener(SETTING_LISTENER);  parent.add(item);  return item;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void writePlottingData(String adaptedOutputDirectory){  log.info("Writing plotting data for other analyis into " + adaptedOutputDirectory + " ...");  final CSVWriter writer=new CSVWriter(adaptedOutputDirectory + "/" + CSVWriter.FILE_NAME);  writer.writeField(Labels.X_COORDINATE);  writer.writeField(Labels.Y_COORDINATE);  for (  Modes4Accessibility mode : Modes4Accessibility.values()) {    writer.writeField(mode.toString() + "_accessibility");  }  writer.writeField(Labels.POPULATION_DENSITIY);  writer.writeField(Labels.POPULATION_DENSITIY);  writer.writeNewLine();  final SpatialGrid spatialGrid=spatialGridAggregator.getAccessibilityGrids().get(Modes4Accessibility.freeSpeed);  for (double y=spatialGrid.getYmin(); y <= spatialGrid.getYmax(); y+=spatialGrid.getResolution()) {    for (double x=spatialGrid.getXmin(); x <= spatialGrid.getXmax(); x+=spatialGrid.getResolution()) {      writer.writeField(x + 0.5 * spatialGrid.getResolution());      writer.writeField(y + 0.5 * spatialGrid.getResolution());      for (      Modes4Accessibility mode : Modes4Accessibility.values()) {        if (accessibilityCalculator.getIsComputingMode().contains(mode)) {          final SpatialGrid spatialGridOfMode=spatialGridAggregator.getAccessibilityGrids().get(mode);          final double value=spatialGridOfMode.getValue(x,y);          if (!Double.isNaN(value)) {            writer.writeField(value);          } else {            writer.writeField(Double.NaN);          }        } else {          writer.writeField(Double.NaN);        }      }      for (      Tuple<SpatialGrid,SpatialGrid> additionalGrids : this.additionalSpatialGrids.values()) {        writer.writeField(additionalGrids.getFirst().getValue(x,y));        writer.writeField(additionalGrids.getSecond().getValue(x,y));      }      writer.writeNewLine();    }  }  writer.close();  log.info("Writing plotting data for other analysis done!");}  }
class C{  public boolean isPersistent(){  return persistent;}  }
class C{  public FastStringBuffer(int initChunkBits,int maxChunkBits,int rebundleBits){  if (DEBUG_FORCE_INIT_BITS != 0)   initChunkBits=DEBUG_FORCE_INIT_BITS;  if (DEBUG_FORCE_FIXED_CHUNKSIZE)   maxChunkBits=initChunkBits;  m_array=new char[16][];  if (initChunkBits > maxChunkBits)   initChunkBits=maxChunkBits;  m_chunkBits=initChunkBits;  m_maxChunkBits=maxChunkBits;  m_rebundleBits=rebundleBits;  m_chunkSize=1 << (initChunkBits);  m_chunkMask=m_chunkSize - 1;  m_array[0]=new char[m_chunkSize];}  }
class C{  public void generatePanel(MathObject o){  System.out.println("generate panel" + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));  if (o == null) {    return;  }  this.getContentPane().removeAll();  object=o;  JPanel panel=mainPanel;  mainPanel.removeAll();  adjusters.removeAllElements();  listAdjusters.removeAllElements();  this.setTitle(o.getType());  JTabbedPane panelTabs=null;  JPanel tabOneContents=null, tabTwoContents=null;  GridBagConstraints con=new GridBagConstraints();  con.fill=GridBagConstraints.BOTH;  con.weightx=1;  con.weighty=1;  con.insets=new Insets(2,2,2,2);  con.gridx=0;  con.gridy=0;  System.out.println("end init stuff" + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));  if (o instanceof GraphObject || (o instanceof ExpressionObject && !notebookPanel.isInStudentMode())) {    panelTabs=new JTabbedPane();    this.getContentPane().add(panelTabs);    tabOneContents=new JPanel();    tabOneContents.setLayout(new GridBagLayout());    tabTwoContents=new JPanel();    tabTwoContents.setLayout(new GridBagLayout());    System.out.println("1 " + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));    JScrollPane tabScrollPane=new JScrollPane(panelTabs);    tabScrollPane.getVerticalScrollBar().setUnitIncrement(16);    tabScrollPane.getHorizontalScrollBar().setUnitIncrement(16);    System.out.println("2 " + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));    tabScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);    if (o instanceof GraphObject) {      panelTabs.add("Nav",tabOneContents);      panelTabs.add("Grid",tabTwoContents);      panel=tabOneContents;    } else     if (o instanceof ExpressionObject) {      panelTabs.add("Expression",tabOneContents);      panelTabs.add("Solve",tabTwoContents);      panel=tabOneContents;    }    System.out.println("3 " + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));    this.getContentPane().add(tabScrollPane);    System.out.println("4 " + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));  } else {    this.getContentPane().add(scrollPane);  }  System.out.println("done with tabs " + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));  con.weighty=.01;  JPanel actionPics=new JPanel();  actionPics.setLayout(new GridLayout(0,4,4,4));  JPanel otherActions=new JPanel();  otherActions.setLayout(new GridLayout(0,1,4,4));  ImageIcon pic;  JButton button;  if (!notebookPanel.isInStudentMode()) {    for (    final String s : o.getActions()) {      pic=getIconForAction(s);      if (pic != null)       createButton(s,0,0,0,0,actionPics); else       createButton(s,0,0,0,0,otherActions);    }  }  System.out.println("teacher actions done" + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));  boolean skipAction;  for (  final String s : o.getStudentActions()) {    skipAction=false;    if (object instanceof GraphObject) {      for (      String str : graphNavActions) {        if (s.equals(str)) {          skipAction=true;          break;        }      }    }    if (object instanceof ExpressionObject) {      for (      String str : expressionOpActions) {        if (s.equals(str)) {          skipAction=true;          break;        }      }    }    if (skipAction) {      continue;    }    pic=getIconForAction(s);    if (pic != null)     createButton(s,0,0,0,0,actionPics); else     createButton(s,0,0,0,0,otherActions);  }  System.out.println("student actions done" + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));  if (otherActions.getComponentCount() != 0) {    panel.add(otherActions,con);    con.gridy++;  }  if (actionPics.getComponentCount() != 0) {    panel.add(actionPics,con);    con.gridy++;  }  if (object instanceof GraphObject) {    panel.add(createGraphNavigator(),con);    con.gridy++;  }  if (o instanceof ExpressionObject && !notebookPanel.isInStudentMode()) {    panel=tabTwoContents;  }  if (object instanceof ExpressionObject) {    panel.add(createExpressionModifier(),con);    con.gridy++;  }  if (o instanceof ExpressionObject && !notebookPanel.isInStudentMode())   panel=tabOneContents;  con.fill=GridBagConstraints.HORIZONTAL;  if (o instanceof GraphObject) {    panel=new JPanel();    panel.setLayout(new GridBagLayout());    con.anchor=GridBagConstraints.PAGE_START;    tabTwoContents.add(panel,con);    con.anchor=GridBagConstraints.CENTER;  }  con.fill=GridBagConstraints.BOTH;  for (  MathObjectAttribute mAtt : o.getAttributes()) {    if (notebookPanel.isInStudentMode() && mAtt.isStudentEditable() || (!notebookPanel.isInStudentMode() && mAtt.isUserEditable())) {      adjusters.add(getAdjuster(mAtt,notebookPanel,panel));      if (mAtt instanceof StringAttribute) {        con.weighty=1;        con.fill=GridBagConstraints.BOTH;      } else {        con.weighty=0;        con.fill=GridBagConstraints.HORIZONTAL;      }      panel.add(adjusters.get(adjusters.size() - 1),con);      con.gridy++;    }  }  System.out.println("end att adjusters:" + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));  con.weighty=1;  if (o instanceof GraphObject) {    panel=tabOneContents;  }  for (  ListAttribute list : o.getLists()) {    if ((notebookPanel.isInStudentMode() && list.isStudentEditable()) || (!notebookPanel.isInStudentMode() && list.isUserEditable())) {      listAdjusters.add(new ListAdjuster(list,notebookPanel,panel));      panel.add(listAdjusters.get(listAdjusters.size() - 1),con);      con.gridy++;    }  }  System.out.println("end lists:" + +(new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));  if (panel.getComponentCount() == 0) {    panel.add(new JLabel("No actions for this object"),con);  }  panel.revalidate();  this.pack();  this.update();  this.setSize(this.getWidth() + 30,this.getHeight());  System.out.println("done making props frame" + (new Date().getTime() - notebookPanel.getOpenNotebook().timeAtStart));}  }
class C{  public void remove() throws IOException {  new FileUtils().deleteDir(dirPath);}  }
class C{  private int doNext() throws IOException {  while (freq < minShouldMatch) {    assert freq > 0;    if (freq + tailSize >= minShouldMatch) {      advanceTail();    } else {      pushBackLeads();      setDocAndFreq();    }  }  return doc;}  }
class C{  public Card nextElement(){  Card c=new Card(rank,suit);  if (++rank > Card.KING) {    suit++;    rank=Card.ACE;  }  return c;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.SPECIFICATION_ELEMENT__SPECIFICATION:    return SPECIFICATION_EDEFAULT == null ? specification != null : !SPECIFICATION_EDEFAULT.equals(specification);}return super.eIsSet(featureID);}  }
class C{  protected void commonAssignmentCheck(AnnotatedTypeMirror varType,AnnotatedTypeMirror valueType,Tree valueTree,String errorKey){  String valueTypeString=valueType.toString();  String varTypeString=varType.toString();  if (valueTypeString.equals(varTypeString)) {    valueTypeString=valueType.toString(true);    varTypeString=varType.toString(true);  }  if (checker.hasOption("showchecks")) {    long valuePos=positions.getStartPosition(root,valueTree);    System.out.printf(" %s (line %3d): %s %s%n     actual: %s %s%n   expected: %s %s%n","About to test whether actual is a subtype of expected",(root.getLineMap() != null ? root.getLineMap().getLineNumber(valuePos) : -1),valueTree.getKind(),valueTree,valueType.getKind(),valueTypeString,varType.getKind(),varTypeString);  }  boolean success=atypeFactory.getTypeHierarchy().isSubtype(valueType,varType);  if (success) {    for (    Class<? extends Annotation> mono : atypeFactory.getSupportedMonotonicTypeQualifiers()) {      if (valueType.hasAnnotation(mono) && varType.hasAnnotation(mono)) {        checker.report(Result.failure("monotonic.type.incompatible",mono.getCanonicalName(),mono.getCanonicalName(),valueType.toString()),valueTree);        return;      }    }  }  if (checker.hasOption("showchecks")) {    long valuePos=positions.getStartPosition(root,valueTree);    System.out.printf(" %s (line %3d): %s %s%n     actual: %s %s%n   expected: %s %s%n",(success ? "success: actual is subtype of expected" : "FAILURE: actual is not subtype of expected"),(root.getLineMap() != null ? root.getLineMap().getLineNumber(valuePos) : -1),valueTree.getKind(),valueTree,valueType.getKind(),valueTypeString,varType.getKind(),varTypeString);  }  if (!success) {    checker.report(Result.failure(errorKey,valueTypeString,varTypeString),valueTree);  }}  }
class C{  public Set<EventBean> lookup(Object key){  return propertyIndex.get(key);}  }
class C{  public static void deleteDocument(VerificationHost host,String documentToDelete) throws Throwable {  host.testStart(1);  host.send(Operation.createDelete(UriUtils.buildUri(host,documentToDelete)).setBody(new ServiceDocument()).setCompletion(host.getCompletion()));  host.testWait();}  }
class C{  private void ensureCapacity(int numMappings){  int newCapacity=Collections.roundUpToPowerOfTwo(capacityForInitSize(numMappings));  HashMapEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (newCapacity <= oldCapacity) {    return;  }  if (newCapacity == oldCapacity * 2) {    doubleCapacity();    return;  }  HashMapEntry<K,V>[] newTable=makeTable(newCapacity);  if (size != 0) {    int newMask=newCapacity - 1;    for (int i=0; i < oldCapacity; i++) {      for (HashMapEntry<K,V> e=oldTable[i]; e != null; ) {        HashMapEntry<K,V> oldNext=e.next;        int newIndex=e.hash & newMask;        HashMapEntry<K,V> newNext=newTable[newIndex];        newTable[newIndex]=e;        e.next=newNext;        e=oldNext;      }    }  }}  }
class C{  public static double blackFormulaImpliedStdDevApproximation(final Option.Type optionType,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount){  return blackFormulaImpliedStdDevApproximation(optionType,strike,forward,blackPrice,discount,0.0);}  }
class C{  public String doubleMetaphone(String value){  return doubleMetaphone(value,false);}  }
class C{  @Override public void step(MessageLogger logger){  try {    addAgent();    env.step();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public int addVertexFixed(int fixedLat,int fixedLon){  int vertexIndex=vertexFlags.size();  fixedLats.add(fixedLat);  fixedLons.add(fixedLon);  vertexFlags.add((byte)0);  return vertexIndex;}  }
class C{  public static byte[] toUFT8(String s){  if (s == null) {    return null;  }  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();  DataOutputStream dos=new DataOutputStream(byteOut);  try {    dos.writeUTF(s);    dos.flush();  } catch (  IOException e) {    return null;  }  return byteOut.toByteArray();}  }
class C{  public Joiner match(String field,Object... value){  return match(field,Arrays.asList(value));}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      if (m_evaluateThread != null && m_evaluateThread.isAlive()) {        wait();      }    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  public MCountry(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public static void openInBrowser(String uriString){  try {    URI uri=new URI(uriString);    openInBrowser(uri);  } catch (  URISyntaxException e) {    throw new IllegalArgumentException("Invalid URI String: " + uriString,e);  }}  }
class C{  static void hitEnter(MoveContext context){  boolean valid=false;  while (!valid) {    valid=true;    boolean dumpState=false;    System.out.print("Hit enter >");    try {      do {        int input=System.in.read();        if (input == '.') {          dumpState=true;        }        if (input == '`') {          System.exit(0);        }      } while (System.in.available() != 0);    } catch (    IOException e) {      e.printStackTrace();    }    if (dumpState && context != null) {      valid=false;      dumpGameState(context);    }  }}  }
class C{  public String globalInfo(){  return "This filter takes a dataset and outputs a specified fold for " + "cross validation. If you want the folds to be stratified use the " + "supervised version.";}  }
class C{  protected void calculateMutationScore(Set<Integer> tkilled){  if (MutationPool.getMutantCounter() == 0) {    Properties.CRITERION=oldCriterion;    LoggingUtils.getEvoLogger().info("* Resulting test suite's mutation score: " + NumberFormat.getPercentInstance().format(1.0));    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.MutationScore,1.0);  } else {    double score=(double)tkilled.size() / (double)MutationPool.getMutantCounter();    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.MutationScore,score);    LoggingUtils.getEvoLogger().info("* Resulting test suite's mutation score: " + NumberFormat.getPercentInstance().format(score));  }}  }
class C{  public static Header readHeader(ArrayDataInput dis) throws TruncatedFileException, IOException {  Header myHeader=new Header();  try {    myHeader.read(dis);  } catch (  EOFException e) {    if (e.getCause() instanceof TruncatedFileException) {      throw e;    }    return null;  }  return myHeader;}  }
class C{  public BrowsableData(ListProvider dataprov,SaveProvider saveprov,Comparator c){  m_dataprov=dataprov;  m_saveprov=saveprov;  m_comparer=c;  m_bIsAdjusting=false;  m_aData=new ArrayList();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String cnt=getString(stack);  Sage.put("mmc/dvbs_region",cnt);  return null;}  }
class C{  public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,null,append);}  }
class C{  public GeneralizedSemPmGraphicalEditor(GeneralizedSemPm semPm,Map<Object,EditorWindow> launchedEditors){  this.semPm=semPm;  this.launchedEditors=launchedEditors;  setLayout(new BorderLayout());  JScrollPane scroll=new JScrollPane(workbench());  scroll.setPreferredSize(new Dimension(450,450));  add(scroll,BorderLayout.CENTER);  setBorder(new TitledBorder("Double click expressions to edit"));}  }
class C{  public static long reverseBytes(long v){  v=((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);  v=((v >>> 16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) << 16);  return ((v >>> 32)) | ((v) << 32);}  }
class C{  @Nullable Object[] arguments(){  return args;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.237 -0500",hash_original_method="4612527F52EC9CC57646B58789A81A83",hash_generated_method="F3FCE6F0895DC0626F1A47B38DBC60AC") public void addRect(RectF rect,Direction dir){  if (rect == null) {    throw new NullPointerException("need rect parameter");  }  detectSimplePath(rect.left,rect.top,rect.right,rect.bottom,dir);  addTaint(rect.getTaintInt() + dir.nativeInt);}  }
class C{  public IKnowledge parseKnowledge(File file) throws IOException {  FileReader reader=new FileReader(file);  Lineizer lineizer=new Lineizer(reader,commentMarker);  IKnowledge knowledge=parseKnowledge(lineizer,delimiterType.getPattern());  this.logger.reset();  return knowledge;}  }
class C{  public int rendezvous(){  lock.lock();  int i=currentRendezvousCounter;  int me=rendezvousCounter[i]++;  if (me == contexts.length - 1) {    currentRendezvousCounter^=1;    rendezvousCounter[currentRendezvousCounter]=0;    lock.broadcast();  } else {    while (rendezvousCounter[i] < contexts.length) {      lock.await();    }  }  lock.unlock();  return me;}  }
class C{  public static void assertThreadIdToSequenceIdMapisNotNullButEmpty(){  Map map=pool.getThreadIdToSequenceIdMap();  assertNotNull(map);  assertTrue(map.size() == 1);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof HighLowItemLabelGenerator)) {    return false;  }  HighLowItemLabelGenerator generator=(HighLowItemLabelGenerator)obj;  if (!this.dateFormatter.equals(generator.dateFormatter)) {    return false;  }  if (!this.numberFormatter.equals(generator.numberFormatter)) {    return false;  }  return true;}  }
class C{  private String buildItemListText(Set<String> items){  StringBuilder sb=new StringBuilder();  sb.append("I have offers for the following items: ");  boolean first=true;  for (  String item : items) {    if (first) {      first=false;    } else {      sb.append(", ");    }    sb.append("#'show " + item + "'");  }  return sb.toString();}  }
class C{  private void adjust(float phase_error){  mLoopFrequency+=mBetaGain * phase_error;  mLoopPhase+=mLoopFrequency + mAlphaGain * phase_error;  unwrapPhase();  limitFrequency();}  }
class C{  public int hashCode(){  int h=0;  final char[] a=array;  for (int i=from; i < to; i++)   h=31 * h + a[i];  return h | (1 << 31);}  }
class C{  public IntelligentAgent(char mark,IEvaluation algorithm){  super(mark);  this.algorithm=algorithm;}  }
class C{  public void windowChange(java.awt.event.WindowEvent e){  log.debug("decoder.windowChange() - " + e.toString());  log.debug("param string = " + e.paramString());  this.shutdown();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static boolean isEthernetConnected(Context context){  if (isNetworkConnected(context)) {    ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    return (cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_ETHERNET);  } else {    return false;  }}  }
class C{  public void processFileAndScheduleJobs(String fileName,String systemId,Scheduler sched) throws Exception {  processFile(fileName,systemId);  executePreProcessCommands(sched);  scheduleJobs(sched);}  }
class C{  public static Hashtable parseDynamicArgs(String args){  Hashtable dynArgs=new Hashtable();  if (args != null) {    String lowerArgs=args.toLowerCase();    dynArgs.put(DynArgEdges,new Boolean(lowerArgs.indexOf(DynArgEdges) != -1));    dynArgs.put(DynArgText,new Boolean(lowerArgs.indexOf(DynArgText) != -1));    dynArgs.put(DynArgArea,new Boolean(lowerArgs.indexOf(DynArgArea) != -1));  }  return dynArgs;}  }
class C{  public int size(){  return size;}  }
class C{  public Tag(){  this(0,"A new tag","A new tag",true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void qsortN(int left,int right){  if (right <= left) {    return;  }  int pivotIndex=pi.selectPivotIndex(ar,left,right);  pivotIndex=partition(left,right,pivotIndex);  qsortN(left,pivotIndex - 1);  qsortN(pivotIndex + 1,right);}  }
class C{  private double computeJaccardDistance(BloomFilter<E> filter){  assert bitSetSize == filter.size() : "Different size bitsets in computeJaccardDistance: " + bitSetSize + " and "+ filter.size();  double distance=0;  int maxLength=this.bitset.length();  BitSet otherBitSet=filter.getBitSet();  if (otherBitSet.length() > maxLength) {    maxLength=otherBitSet.length();  }  int countAND=this.bitset.andcardinality(filter.bitset);  int countOR=this.bitset.orcardinality(filter.bitset);  if (countOR > 0) {    distance=1.0 - (double)countAND / countOR;  }  return distance;}  }
class C{  public synchronized void updateStats(String sqlName,String rawSql,long timeInNs){  if (!collectCallStatsEnabled) {    return;  }  if (sqlName == null) {    sqlName=getNameForUnregisteredQuery(rawSql);  }  SqlCallStats stats=statsByName.get(sqlName);  if (stats == null) {    stats=new SqlCallStats(sqlName,rawSql);    JMXUtils.registerMBeanCatchAndLogExceptions(stats,getStatsBeanName(stats));    statsByName.put(sqlName,stats);  }  stats.collectCallTimeNanos(timeInNs);}  }
class C{  public void addAll(List<MyMap> maps){  this.myMaps.addAll(maps);  notifyItemRangeInserted(myMaps.size() - maps.size(),maps.size());}  }
class C{  private int measureLong(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static java.util.Date toDate(String dateTime){  if (dateTime == null) {    return null;  }  String date=dateTime.substring(0,dateTime.indexOf(" "));  String time=dateTime.substring(dateTime.indexOf(" ") + 1);  return toDate(date,time);}  }
class C{  public void paint(Graphics g){  super.paint(g);  if (drawIntersections || drawResults) {    OMGraphicList graphics;    graphics=new OMGraphicList(toDraw);    graphics.generate(getProjection(),true);    logger.info("rendering toDraw " + toDraw.size() + " items");    graphics.render(g);  }}  }
class C{  static double powerOfTwoD(int n){  return Double.longBitsToDouble((((long)n + (long)DoubleConsts.MAX_EXPONENT) << (DoubleConsts.SIGNIFICAND_WIDTH - 1)) & DoubleConsts.EXP_BIT_MASK);}  }
class C{  @SuppressWarnings("static-access") public static void main(final String[] argv) throws Exception {  Options options=new Options();  options.addOption(OptionBuilder.withLongOpt("thrift-host").withDescription("Host name for the thrift service").hasArg().withArgName("HOST").create());  options.addOption(OptionBuilder.withLongOpt("thrift-port").withDescription("Port for the thrift service").hasArg().withArgName("PORT").create());  options.addOption(OptionBuilder.withLongOpt("http-port").withDescription("Port for the HTTP service").hasArg().withArgName("PORT").create());  CommandLineParser parser=new BasicParser();  CommandLine cl=parser.parse(options,argv);  String thriftHost="localhost";  int thriftPort=9996;  int httpPort=8080;  if (cl.hasOption("thrift-host")) {    thriftHost=cl.getOptionValue("thrift-host");    LOG.info("thriftHost=" + thriftHost);  }  if (cl.hasOption("thrift-port")) {    thriftPort=Integer.valueOf(cl.getOptionValue("thrift-port"));    LOG.info("thriftPort=" + thriftPort);  }  if (cl.hasOption("http-port")) {    httpPort=Integer.valueOf(cl.getOptionValue("http-port"));    LOG.info("httpPort=" + httpPort);  }  port(httpPort);  final String finalThriftHost=thriftHost;  final int finalThriftPort=thriftPort;  LOG.info(String.format("Connecting to thrift://%s:%s and " + "serving HTTP on %s",finalThriftHost,finalThriftPort,httpPort));  get("/jobs",null,new ThymeleafTemplateEngine());}  }
class C{  private void safelyMigrateIfVersionChanged(IProject project){  try {    if (GWTNature.isGWTProject(project.getProject())) {      int projectVersion=GdtPreferences.getProjectMigratorVersion(project);      if (projectVersion != CURRENT_VERSION) {        migrateProject(project,projectVersion);      }    }  } catch (  Throwable e) {    GdtPlugin.getLogger().logError(e,"Skipping project migrator for project " + project.getName());  }}  }
class C{  public void test_SELECT_ALL() throws Exception {  final String queryStr="select * where {?s ?p ?o}";  final TupleQuery query=cxn.prepareTupleQuery(QueryLanguage.SPARQL,queryStr);  assertEquals(0,countResults(query.evaluate()));}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder gifUrl(URL gifUrl){  this.gif_url=gifUrl;  return this;}  }
class C{  public static void openSetting(){  if (Build.VERSION.SDK_INT > AndroidVersion.GINGERBREAD_MR1)   openSetting("ACTION_WIFI_SETTINGS"); else   openSetting("ACTION_WIRELESS_SETTINGS");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? "" : pluggy.getDesc();}  }
class C{  public static TreeSet<InstructionalOffering> search(Long acadSessionId,Long subjectAreaId,String courseNbr,boolean fetchStructure,boolean fetchCredits,boolean fetchInstructors,boolean fetchPreferences,boolean fetchAssignments,boolean fetchReservations){  org.hibernate.Session hibSession=(new InstructionalOfferingDAO()).getSession();  StringBuffer query=new StringBuffer();  query.append("select distinct io ");  query.append(" from InstructionalOffering as io inner join io.courseOfferings as co ");  if (fetchStructure) {    query.append("left join fetch io.courseOfferings as cox ");    query.append("left join fetch io.instrOfferingConfigs as ioc ");    query.append("left join fetch ioc.schedulingSubparts as ss ");    query.append("left join fetch ss.classes as c ");    query.append("left join fetch ss.childSubparts as css ");    query.append("left join fetch c.childClasses as cc ");  }  if (fetchCredits)   query.append("left join fetch ss.creditConfigs as ssc ");  if (fetchPreferences || fetchInstructors) {    query.append("left join fetch c.classInstructors as ci ");    query.append("left join fetch ci.instructor as di ");  }  if (fetchAssignments) {    query.append("left join fetch c.assignments as ca ");    query.append("left join fetch ca.rooms as car ");  }  if (fetchPreferences) {    query.append("left join fetch c.preferences as cp ");    query.append("left join fetch ss.preferences as ssp ");    query.append("left join fetch di.preferences as dip ");  }  if (fetchReservations) {    query.append("left join fetch ioc.individualReservations as ir ");    query.append("left join fetch ioc.studentGroupReservations as sgr ");    query.append("left join fetch ioc.acadAreaReservations as aar ");    query.append("left join fetch ioc.posReservations as pr ");  }  query.append(" where io.session.uniqueId=:sessionId ");  if (courseNbr != null && courseNbr.length() > 0) {    if (courseNbr.indexOf('*') >= 0) {      query.append(" and co.courseNbr like :courseNbr ");    } else {      query.append(" and co.courseNbr = :courseNbr ");    }  }  query.append(" and co.subjectArea.uniqueId = :subjectAreaId ");  Query q=hibSession.createQuery(query.toString());  q.setFetchSize(1000);  q.setLong("subjectAreaId",subjectAreaId);  q.setLong("sessionId",acadSessionId.longValue());  if (courseNbr != null && courseNbr.length() > 0) {    if (ApplicationProperty.CourseOfferingNumberUpperCase.isTrue())     courseNbr=courseNbr.toUpperCase();    q.setString("courseNbr",courseNbr.replace('*','%'));  }  q.setCacheable(true);  TreeSet<InstructionalOffering> ts=new TreeSet<InstructionalOffering>(new InstructionalOfferingComparator(Long.valueOf(subjectAreaId)));  long sTime=new java.util.Date().getTime();  ts.addAll(q.list());  long eTime=new java.util.Date().getTime();  Debug.debug("fetch time = " + (eTime - sTime));  return ts;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case CURSOR_ID:return isSetCursorId();case CLOSE:return isSetClose();}throw new IllegalStateException();}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  private boolean isValidURL(String url){  try {    HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();    conn.setRequestMethod("HEAD");    conn.connect();    return conn.getResponseCode() == HttpURLConnection.HTTP_OK;  } catch (  MalformedURLException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return false;}  }
class C{  public static boolean isRuntimeException(ITypeBinding thrownException){  if (thrownException == null || thrownException.isPrimitive() || thrownException.isArray())   return false;  return findTypeInHierarchy(thrownException,"java.lang.RuntimeException") != null;}  }
class C{  public String globalInfo(){  return "Renames the values of nominal attributes.";}  }
class C{  public static Control createPagedResultsRequestControl(final Class clazz,final int pageSize,final byte[] cookie,final boolean critical){  return createRequestControl(clazz,new Class[]{int.class,byte[].class,boolean.class},new Object[]{new Integer(pageSize),cookie,Boolean.valueOf(critical)});}  }
class C{  public void testNoNorms() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);  ft.setOmitNorms(true);  ft.freeze();  doc.add(newField("foo","bar",ft));  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher is=newSearcher(ir);  for (  Similarity sim : sims) {    is.setSimilarity(sim);    BooleanQuery.Builder query=new BooleanQuery.Builder();    query.add(new TermQuery(new Term("foo","bar")),BooleanClause.Occur.SHOULD);    assertEquals(1,is.search(query.build(),10).totalHits);  }  ir.close();  dir.close();}  }
class C{  private static final boolean subPartMatch(String p,String t){  return (p == t) || ((null != p) && ((t == WILD) || p.equals(t)));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isAlive(){  return alive || pendingJumps != null;}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  protected ConstraintExpr_Impl(){  super();}  }
class C{  public boolean isLocallyInitiated(){  boolean streamIsClient=(id % 2 == 1);  return connection.client == streamIsClient;}  }
class C{  @Field(4) public float fltVal(){  return this.io.getFloatField(this,4);}  }
class C{  @SuppressWarnings("unchecked") private static <T extends Throwable>void sneakyThrow2(Throwable t) throws T {  throw (T)t;}  }
class C{  public PaymentDataException(){  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.552 -0500",hash_original_method="24A367F278E951BFB0108340D732C0BD",hash_generated_method="91C312071CD24E43C61BF1F37B0EC04E") public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean read){  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,read,false);}  }
class C{  @Override public void openWrite(Result<OutputStream> result,WriteOption... options){  result.ok(_root.openWriteFile(_path,options));}  }
class C{  @Override public Role findByCode(String code){  return roleRepository.findByCode(code);}  }
class C{  public int size(){  return mSize;}  }
class C{  @Override public void release(){  isHeld=false;  Clock.stop();  model.makeRunnable(waitList);  Clock.start();}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public boolean cancelDownload(){  if (isDownloadInProgress()) {    mDownloadManager.remove(mDownloadId);    mDownloadId=-1;    return true;  }  return false;}  }
class C{  @Override public int compare(LMTNode o1,LMTNode o2){  if (o1.m_alpha < o2.m_alpha) {    return -1;  }  if (o1.m_alpha > o2.m_alpha) {    return 1;  }  return 0;}  }
class C{  public void doPropagation(int[] timesAtTransitStops,int[] timesAtTargets,int departureTime){  long beginPropagationTime=System.currentTimeMillis();  int walkSpeedMillimetersPerSecond=(int)(req.walkSpeed * 1000);  int maxWalkMillimeters=(int)(req.walkSpeed * req.maxWalkTime * 60* 1000);  for (int s=stopsTouchedThisSearch.nextSetBit(0); s >= 0; s=stopsTouchedThisSearch.nextSetBit(s + 1)) {    int timeAtTransitStop=timesAtTransitStops[s];    if (timeAtTransitStop != UNREACHED) {      int[] targets=this.targets.stopToPointDistanceTables.get(s);      if (targets == null) {        continue;      }      for (int i=0; i < targets.length; i+=2) {        int targetIndex=targets[i];        if (targets[i + 1] > maxWalkMillimeters)         continue;        int timeToTarget=targets[i + 1] / walkSpeedMillimetersPerSecond;        int propagated_time=timeAtTransitStop + timeToTarget;        if (propagated_time < departureTime) {          LOG.error("Negative propagated time, will crash shortly.");        }        if (timesAtTargets[targetIndex] > propagated_time) {          timesAtTargets[targetIndex]=propagated_time;        }      }    }  }  totalPropagationTime+=(System.currentTimeMillis() - beginPropagationTime);}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public void assignContactFromEmail(String emailAddress,boolean lazyLookup,Bundle extras){  mContactEmail=emailAddress;  mExtras=extras;  if (!lazyLookup) {    mQueryHandler.startQuery(TOKEN_EMAIL_LOOKUP,null,Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI,Uri.encode(mContactEmail)),EMAIL_LOOKUP_PROJECTION,null,null,null);  } else {    mContactUri=null;    onContactUriChanged();  }}  }
class C{  private void initConnection() throws ReplicatorException {  try {    logger.info("Connecting to the filtering server on port " + serverPort);    InetAddress host=InetAddress.getByName("localhost");    socket=new Socket(host,serverPort);    socket.setSoTimeout(timeout * 1000);    logger.debug("Receive buffer size: " + socket.getReceiveBufferSize());    logger.info("Connected to " + socket.getRemoteSocketAddress());    toServer=new PrintWriter(socket.getOutputStream(),true);    fromServer=new BufferedReader(new InputStreamReader(socket.getInputStream()));  } catch (  UnknownHostException e) {    throw new ReplicatorException("Unable to connect to filtering server: " + e,e);  }catch (  IOException e) {    throw new ReplicatorException("Unable to connect to filtering server: " + e,e);  }}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  public static double[] insertAt(double[] dest,double[] src,int offset){  double[] temp=new double[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  public T caseEmptyStatement(EmptyStatement object){  return null;}  }
class C{  public int size(){  return size;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  private HBaseBolt createBolt(int batchSize,WidgetMapper mapper) throws IOException {  HBaseBolt bolt=new HBaseBolt(tableName,mapper).withBatchSize(batchSize);  bolt.prepare(Collections.emptyMap(),topologyContext,outputCollector);  bolt.setClient(client);  return bolt;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.749 -0500",hash_original_method="AB721E5F3628508DEF5AE872A937DFD4",hash_generated_method="872FD7AB81551DE312B06EA4051E8884") private boolean compareAndIncrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect + 1);}  }
class C{  public ByteList MetadataInfo(ByteList bytes,int nameIndex,int valuesCount,IntList keys,IntList values,int metadata_info_index){  if (show_bytecode) {    defns_out.write("\n      MetadataInfo ");    defns_out.write(" nameIndex=" + nameIndex);    defns_out.write(" valuesCount=" + valuesCount + " keys={ ");    for (int i=0, size=keys.size(); i < size; i++) {      defns_out.write(keys.get(i) + " ");    }    defns_out.write("} values={");    for (int i=0, size=values.size(); i < size; i++) {      defns_out.write(values.get(i) + " ");    }    defns_out.write(" }");    defns_out.write(" -> " + metadata_info_index);  }  if (debug) {    System.out.print("\n      bytes.size() = " + bytes.size());  }  Int(bytes,nameIndex);  Int(bytes,valuesCount);  for (int i=0; i < valuesCount; i++) {    Int(bytes,keys.get(i));  }  for (int i=0; i < valuesCount; i++) {    Int(bytes,values.get(i));  }  return bytes;}  }
class C{  private RepaintArea(RepaintArea ra){  for (int i=0; i < RECT_COUNT; i++) {    paintRects[i]=ra.paintRects[i];  }}  }
class C{  public void addItem(RSSItem itm){  rss_items.add(itm);}  }
class C{  public static void launchSettingsPage(Context context,String fragmentName){  Intent intent=createIntentForSettingsPage(context,fragmentName);  context.startActivity(intent);}  }
class C{  private void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/hybridSsbo.glsl",GL_COMPUTE_SHADER);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_COMPUTE_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  glAttachShader(program,cshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  public String lindex(final String key,final long index){  checkIsInMulti();  client.lindex(key,index);  return client.getBulkReply();}  }
class C{  @Override public void packAndPosition(){  final String oldText=titleLabel.getText();  titleLabel.setText("APM: 9999");  super.packAndPosition();  titleLabel.setText(oldText);}  }
class C{  public void addGrid(String gridName){  gridNames.add(gridName);}  }
class C{  private boolean isUpgraded(IndexMetaData indexMetaData){  return indexMetaData.getUpgradeVersion().onOrAfter(Version.V_2_0_0_beta1);}  }
class C{  public int read() throws IOException {  int ch1=is.read();  int ch2=is.read();  if (ch2 < 0)   return -1;  return (ch2 << 8) + ch1;}  }
class C{  public boolean unbindLocked(){  if (mService == null) {    return false;  }  UserState userState=getUserStateLocked(mUserId);  mKeyEventDispatcher.flush();  if (!mIsAutomation) {    mContext.unbindService(this);  } else {    userState.destroyUiAutomationService();  }  removeServiceLocked(this,userState);  resetLocked();  return true;}  }
class C{  public <T>Builder cell(T content){  return cell(content,true);}  }
class C{  public boolean cachedOrAllEventsWithListener(){  return cachedOrAllEvents();}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  @NonNull public IntroductionBuilder withSkipEnabled(@StringRes int resource){  this.skipResource=resource;  this.skipString=null;  return this;}  }
class C{  public FieldIdsSection(DexFile file){  super("field_ids",file);  fieldIds=new TreeMap<CstFieldRef,FieldIdItem>();}  }
class C{  public Set<EventBean> lookup(Object key){  key=EventBeanUtility.coerce(key,coercionType);  return propertyIndex.get(key);}  }
class C{  private void testIsoYearJanuary1thTuesday() throws Exception {  assertEquals(2007,getIsoYear(parse("2007-12-28")));  assertEquals(2007,getIsoYear(parse("2007-12-29")));  assertEquals(2007,getIsoYear(parse("2007-12-30")));  assertEquals(2008,getIsoYear(parse("2007-12-31")));  assertEquals(2008,getIsoYear(parse("2008-01-01")));  assertEquals(2008,getIsoYear(parse("2008-01-02")));  assertEquals(2008,getIsoYear(parse("2008-01-03")));  assertEquals(2008,getIsoYear(parse("2008-01-04")));}  }
class C{  public boolean selfTest(){  SHA1 tester=new SHA1();  tester.update(SELFTEST_MESSAGE);  tester.finalize();  byte[] digest=tester.getDigest();  tester.clear();  for (int nI=0; nI < DIGEST_SIZE; nI++)   if (digest[nI] != SELFTEST_DIGEST[nI])   return false;  return true;}  }
class C{  public void testPBEKeySpec2(){  char[] password=new char[]{'1','2','3','4','5'};  byte[] salt=new byte[]{1,2,3,4,5};  int iterationCount=10;  int keyLength=10;  try {    PBEKeySpec pbeks=new PBEKeySpec(null,salt,iterationCount,keyLength);    assertTrue("An empty char[] should be used in case of null input " + "char array.",pbeks.getPassword().length == 0);  } catch (  IllegalArgumentException e) {    fail("Unexpected IllegalArgumentException was thrown.");  }catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }  try {    new PBEKeySpec(password,null,iterationCount,keyLength);    fail("A NullPointerException should be was thrown " + "in the case of null salt.");  } catch (  IllegalArgumentException e) {    fail("Unexpected IllegalArgumentException was thrown.");  }catch (  NullPointerException e) {  }  try {    new PBEKeySpec(password,new byte[0],iterationCount,keyLength);    fail("An IllegalArgumentException should be thrown " + "in the case of empty salt.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,-1,keyLength);    fail("An IllegalArgumentException should be thrown " + "in the case of negative iterationCount.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,iterationCount,-1);    fail("An IllegalArgumentException should be thrown " + "in the case of negative keyLength.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,0,keyLength);    fail("An IllegalArgumentException should be thrown " + "in the case of zero iterationCount.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,iterationCount,0);    fail("An IllegalArgumentException should be thrown " + "in the case of zero keyLength.");  } catch (  IllegalArgumentException e) {  }  PBEKeySpec pbeks=new PBEKeySpec(password,salt,iterationCount,keyLength);  password[0]++;  assertFalse("The change of password specified in the constructor " + "should not cause the change of internal array.",password[0] == pbeks.getPassword()[0]);  salt[0]++;  assertFalse("The change of salt specified in the constructor " + " should not cause the change of internal array.",salt[0] == pbeks.getSalt()[0]);}  }
class C{  public static void checkCopyToOK(Resource source,Resource target) throws IOException {  if (!source.isFile()) {    if (source.isDirectory())     throw new IOException("can't copy [" + source.getPath() + "] to ["+ target.getPath()+ "], source is a directory");    throw new IOException("can't copy [" + source.getPath() + "] to ["+ target.getPath()+ "], source file does not exist");  } else   if (target.isDirectory()) {    throw new IOException("can't copy [" + source.getPath() + "] to ["+ target.getPath()+ "], target is a directory");  }}  }
class C{  private void handleAutoDownloadAction(){  if (mTask == null || mTask.getStatus() != AsyncTask.Status.RUNNING) {    startDownloadTask();  }}  }
class C{  private void computeAreas(NodeItem root){  int leafCount=0;  Graph g=(Graph)m_vis.getGroup(m_group);  TupleSet nodes=g.getNodes();  nodes.addColumns(AREA_SCHEMA);  Iterator iter=new TreeNodeIterator(root);  while (iter.hasNext()) {    NodeItem n=(NodeItem)iter.next();    n.setDouble(AREA,0);  }  iter=new TreeNodeIterator(root,false);  while (iter.hasNext()) {    NodeItem n=(NodeItem)iter.next();    double area=0;    if (n.getChildCount() == 0) {      area=n.getSize();      ++leafCount;    } else     if (n.isExpanded()) {      NodeItem c=(NodeItem)n.getFirstChild();      for (; c != null; c=(NodeItem)c.getNextSibling()) {        area+=c.getDouble(AREA);        ++leafCount;      }    }    n.setDouble(AREA,area);  }  Rectangle2D b=getLayoutBounds();  double area=(b.getWidth() - 1) * (b.getHeight() - 1);  double scale=area / root.getDouble(AREA);  iter=new TreeNodeIterator(root);  while (iter.hasNext()) {    NodeItem n=(NodeItem)iter.next();    n.setDouble(AREA,n.getDouble(AREA) * scale);  }}  }
class C{  public Symbol(String value,boolean isTerminal){  super();  this.value=value;  this.isTerminal=isTerminal;}  }
class C{  public static void main(String[] args) throws Exception {  createSimple();}  }
class C{  public void print(double dnum){  print(String.valueOf(dnum));}  }
class C{  public JPanelPrinter(AppView oApp){  initComponents();  if (oApp.getDeviceTicket().getDeviceDisplay().getDisplayComponent() != null) {    m_jDisplay.add(oApp.getDeviceTicket().getDeviceDisplay().getDisplayComponent());  }  List<DevicePrinter> aprinters=oApp.getDeviceTicket().getDevicePrinterAll();  for (int i=0; i < aprinters.size(); i++) {    DevicePrinter printer=aprinters.get(i);    if (printer.getPrinterComponent() != null) {      m_jPrinters.add(printer.getPrinterName(),printer.getPrinterComponent());    }  }  DeviceFiscalPrinter fp=oApp.getDeviceTicket().getFiscalPrinter();  if (fp.getFiscalComponent() != null) {    m_jPrinters.add(fp.getFiscalName(),fp.getFiscalComponent());  }}  }
class C{  public Coordinate closestPoint(Coordinate p){  double factor=projectionFactor(p);  if (factor > 0 && factor < 1) {    return project(p);  }  double dist0=p0.distance(p);  double dist1=p1.distance(p);  if (dist0 < dist1)   return p0;  return p1;}  }
class C{  public static ImageTypeSpecifier createInterleaved(ColorSpace colorSpace,int[] bandOffsets,int dataType,boolean hasAlpha,boolean isAlphaPremultiplied){  return new ImageTypeSpecifier.Interleaved(colorSpace,bandOffsets,dataType,hasAlpha,isAlphaPremultiplied);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void check(List<CheckResultInterface> remarks,TransMeta transMeta,StepMeta stepMeta,RowMetaInterface prev,String[] input,String[] output,RowMetaInterface info){  CheckResult checkResVal;  if (input.length > 0) {    checkResVal=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is receiving info from other steps.",stepMeta);    remarks.add(checkResVal);  } else {    checkResVal=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"No input received from other steps!",stepMeta);    remarks.add(checkResVal);  }}  }
class C{  void checkCompletedNormally(RecursiveTask<Integer> a,int expected){  Integer r=a.getRawResult();  assertEquals(expected,(int)r);  checkCompletedNormally(a,r);}  }
class C{  public ClassFile(DataInputStream in) throws IOException {  read(in);}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public int read() throws IOException {  if (done) {    throw new XBeeParseException("Packet has read all of its bytes");  }  int b=this.readFromStream();  if (b == -1) {    throw new XBeeParseException("Read -1 from input stream while reading packet!");  }  if (XBeePacket.isSpecialByte(b)) {    log.debug("Read special byte that needs to be unescaped");    if (b == XBeePacket.SpecialByte.ESCAPE.getValue()) {      log.debug("found escape byte");      b=this.readFromStream();      log.debug("next byte is " + ByteUtils.formatByte(b));      b=0x20 ^ b;      log.debug("unescaped (xor) byte is " + ByteUtils.formatByte(b));      escapeBytes++;    } else {      log.warn("Found unescaped special byte " + ByteUtils.formatByte(b) + " at position "+ bytesRead);    }  }  bytesRead++;  if (bytesRead > 2) {    checksum.addByte(b);    log.debug("Read byte " + ByteUtils.formatByte(b) + " at position "+ bytesRead+ ", packet length is "+ this.length.get16BitValue()+ ", #escapeBytes is "+ escapeBytes+ ", remaining bytes is "+ this.getRemainingBytes());    if (this.getFrameDataBytesRead() >= (length.get16BitValue() + 1)) {      done=true;      log.debug("Checksum byte is " + b);      if (!checksum.verify()) {        throw new XBeeParseException("Checksum is incorrect.  Expected 0xff, but got " + checksum.getChecksum());      }    }  }  return b;}  }
class C{  public boolean hasCacheable(){  return m_cacheable != null;}  }
class C{  private void initializeViews(){  mUrlEditText=(EditText)findViewById(R.id.url);  mAddFab=(FloatingActionButton)findViewById(R.id.add_fab);  mDownloadFab=(FloatingActionButton)findViewById(R.id.download_fab);  mUrlEditText.setVisibility(View.INVISIBLE);  mDownloadFab.setVisibility(View.INVISIBLE);  mUrlEditText.setOnEditorActionListener(null);}  }
class C{  public static void exportResultVariables(long workerID,LocalVariableMap vars,ArrayList<String> resultVars,HashMap<String,String> rvarFnames,OutputCollector<Writable,Writable> out) throws DMLRuntimeException, IOException {  LongWritable okey=new LongWritable(workerID);  Text ovalue=new Text();  for (  String rvar : resultVars) {    Data dat=vars.get(rvar);    if (dat != null && dat.getDataType() == DataType.MATRIX) {      MatrixObject mo=(MatrixObject)dat;      if (mo.isDirty()) {        if (ParForProgramBlock.ALLOW_REUSE_MR_PAR_WORKER && rvarFnames != null) {          String fname=rvarFnames.get(rvar);          if (fname != null)           mo.setFileName(fname);          mo.exportData();          rvarFnames.put(rvar,mo.getFileName());        } else {          mo.exportData();        }        String datStr=ProgramConverter.serializeDataObject(rvar,mo);        ovalue.set(datStr);        out.collect(okey,ovalue);      }    }  }}  }
class C{  public ListNode swapPairs(ListNode head){  ListNode dummy=new ListNode(0);  dummy.next=head;  ListNode cur=dummy;  while (cur != null && cur.next != null && cur.next.next != null) {    cur.next=swap(cur.next,cur.next.next);    cur=cur.next.next;  }  return dummy.next;}  }
class C{  public double p(F f){  return globalFeatureProbs.getDouble(f);}  }
class C{  static String classNameOf(TypeElement type){  String name=type.getQualifiedName().toString();  String pkgName=packageNameOf(type);  return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);}  }
class C{  public T caseCodeInjection_(CodeInjection_ object){  return null;}  }
class C{  public static void fill(int[] a,int val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  private void paintCell(SeaGlassContext context,Graphics g,Rectangle cellRect,int row,int column){  if (table.isEditing() && table.getEditingRow() == row && table.getEditingColumn() == column) {    Component component=table.getEditorComponent();    component.setBounds(cellRect);    component.validate();  } else {    TableCellRenderer renderer=table.getCellRenderer(row,column);    Component component=table.prepareRenderer(renderer,row,column);    rendererPane.paintComponent(g,component,table,cellRect.x,cellRect.y,cellRect.width,cellRect.height,true);  }}  }
class C{  public JSONArray optJSONArray(String key){  Object o=opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public void addExtension(DERObjectIdentifier oid,boolean critical,ASN1Encodable value){  extGenerator.addExtension(new ASN1ObjectIdentifier(oid.getId()),critical,value);}  }
class C{  public String(char[] data){  this(data,0,data.length);}  }
class C{  public X509Certificate generate(PrivateKey key) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,(SecureRandom)null);}  }
class C{  public static void processAnOperator(Stack<Integer> operandStack,char operator){  int op1=operandStack.pop();  int op2=operandStack.pop();switch (operator) {case '+':    operandStack.push(op2 + op1);  break;case '-':operandStack.push(op2 - op1);break;case '/':operandStack.push(op2 / op1);break;case '*':operandStack.push(op2 * op1);}}  }
class C{  public StorageUnitEntity createDatabaseEntitiesForBusinessObjectDataDdlTesting(String partitionValue){  if (partitionValue != null) {    String s3KeyPrefix=AbstractServiceTest.getExpectedS3KeyPrefix(AbstractServiceTest.NAMESPACE,AbstractServiceTest.DATA_PROVIDER_NAME,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,FileTypeEntity.TXT_FILE_TYPE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,partitionValue,null,null,AbstractServiceTest.DATA_VERSION);    return createDatabaseEntitiesForBusinessObjectDataDdlTesting(partitionValue,s3KeyPrefix);  } else {    return createDatabaseEntitiesForBusinessObjectDataDdlTesting(null,null);  }}  }
class C{  private Thumbnailator(){}  }
class C{  public Matrix3f m01(float m01){  this.m01=m01;  return this;}  }
class C{  private void loadLatestExtensionVersions(){  try {    List<Extension> all=registryManager.getExtensions();    if (!all.isEmpty()) {      setLatestExtensionVersions(getLatestVersions(all));    }  } catch (  RegistryException e) {    String msg=RegistryException.logRegistryException(e.getType(),this);    warnings.addStartupError(msg);    LOG.error(msg);    msg=getText("admin.extensions.couldnt.load",new String[]{cfg.getRegistryUrl()});    warnings.addStartupError(msg);    LOG.error(msg);  } finally {    if (getLatestExtensionVersions() == null) {      setLatestExtensionVersions(new ArrayList<Extension>());    }  }}  }
class C{  public static IntsRef toUTF32(char[] s,int offset,int length,IntsRefBuilder scratch){  int charIdx=offset;  int intIdx=0;  final int charLimit=offset + length;  while (charIdx < charLimit) {    scratch.grow(intIdx + 1);    final int utf32=Character.codePointAt(s,charIdx,charLimit);    scratch.setIntAt(intIdx,utf32);    charIdx+=Character.charCount(utf32);    intIdx++;  }  scratch.setLength(intIdx);  return scratch.get();}  }
class C{  public static boolean isNCNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;}  }
class C{  public AutoRotateDrawable(Drawable drawable,int interval){  this(drawable,interval,true);}  }
class C{  public <T>T param2PO(Class<T> type,Object param,T po,User currentUser) throws Exception {  Long createdBy;  Long lastModifiedBy;  Field idField=type.getDeclaredField(CommonsConstant.ID);  idField.setAccessible(true);  Field createdByField=type.getDeclaredField(CommonsConstant.CREATED_BY);  createdByField.setAccessible(true);  Field lastModifiedByField=type.getDeclaredField(CommonsConstant.LAST_MODIFIED_BY);  lastModifiedByField.setAccessible(true);  Field lastModifiedDateField=type.getDeclaredField(CommonsConstant.LAST_MODIFIED_DATE);  lastModifiedDateField.setAccessible(true);  Date now=new Date();  if (idField.get(po) == null) {    createdBy=currentUser.getId();    lastModifiedBy=createdBy;  } else {    createdBy=(Long)createdByField.get(po);    lastModifiedBy=currentUser.getId();  }  BeanUtils.copyPropertiesIgnoreNull(param,po);  createdByField.set(po,createdBy);  lastModifiedByField.set(po,lastModifiedBy);  lastModifiedDateField.set(po,now);  return po;}  }
class C{  private Rectangle findBounds(int AD_WF_Node_ID){  for (int i=0; i < m_nodes.size(); i++) {    WFNode node=(WFNode)m_nodes.get(i);    if (node.getAD_WF_Node_ID() == AD_WF_Node_ID)     return node.getBounds();  }  return null;}  }
class C{  public void addAttribute(String name,GoogleBaseAttributeType type){  GoogleBaseAttributeId attributeId=new GoogleBaseAttributeId(name,type);  addAttribute(attributeId,null);}  }
class C{  public Set<E> keySet(){  return mMap.keySet();}  }
class C{  public URI(final String scheme,final String userinfo,final String host,final int port,final String path,final String query) throws URIException {  this(scheme,userinfo,host,port,path,query,null);}  }
class C{  public static int yInDir(int x,int y,int dir){switch (dir) {case 0:    return y - 1;case 1:case 5:  return y - ((x + 1) & 1);case 2:case 4:return y + (x & 1);case 3:return y + 1;default :return y;}}  }
class C{  public ObjectFactory(){}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEInternalFrameUI((JInternalFrame)c);}  }
class C{  private Set<StoragePort> filterAllocationDisqualifiedPorts(List<StoragePort> candidatePorts){  Set<StoragePort> allocationDisqualifiedPorts=Sets.newHashSet();  for (  StoragePort storagePort : candidatePorts) {    boolean disqualifiedPort=MetricsKeys.getBoolean(MetricsKeys.allocationDisqualified,storagePort.getMetrics());    if (disqualifiedPort) {      allocationDisqualifiedPorts.add(storagePort);    }  }  return allocationDisqualifiedPorts;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public static boolean unlock(Session session,Integer bookID,int folderID,AuthenticationUser user) throws HibernateException {  List list=ISicresQueries.getIdocfdrstat(session,bookID,folderID);  boolean result=false;  Idocfdrstat idoc=null;  if (list != null && !list.isEmpty()) {    idoc=(Idocfdrstat)list.get(0);    if (idoc.getUserid() == user.getId().intValue() && idoc.getStat() == 1) {      result=true;      session.delete(idoc);      if (log.isDebugEnabled()) {        log.info("Libro [" + bookID + "] Carpeta ["+ folderID+ "] desbloqueada.");      }    } else {      result=false;      if (log.isDebugEnabled()) {        log.info("Libro [" + bookID + "] Carpeta ["+ folderID+ "] no se puede desbloquear idoc.userid ["+ idoc.getUserid()+ "] user ["+ user.getId()+ "] stat ["+ idoc.getStat()+ "]");      }    }  } else {    result=true;    if (log.isDebugEnabled()) {      log.info("Libro [" + bookID + "] Carpeta ["+ folderID+ "] no se puede desbloquearXXX.");    }  }  return result;}  }
class C{  protected boolean scanForDoctypeHook() throws IOException, XNIException {  if (fEntityScanner.skipString("DOCTYPE")) {    setScannerState(SCANNER_STATE_DOCTYPE);    return true;  }  return false;}  }
class C{  public final AssertSubscriber<T> assertNonFuseableSource(){  if (qs != null) {    throw new AssertionError("Upstream was Fuseable");  }  return this;}  }
class C{  public EquationDefinition createEquationDefinition(){  EquationDefinitionImpl equationDefinition=new EquationDefinitionImpl();  return equationDefinition;}  }
class C{  public void testExtensionb(){  final IntChunks ic=new IntChunks(200,7);  ic.integrity();  assertEquals(2,ic.arrayLength());  assertEquals(200,ic.length());  ic.set(0,42);  assertEquals(42,ic.get(0));  ic.set(199,43);  assertEquals(43,ic.get(199));  set(0,ic);  check(ic);  assertEquals(200,ic.extendBy(10));  assertEquals(210,ic.length());  assertEquals(2,ic.arrayLength());  assertEquals(210,ic.extendBy(10));  assertEquals(220,ic.length());  assertEquals(2,ic.arrayLength());  assertEquals(220,ic.extendBy(0));  assertEquals(220,ic.length());  assertEquals(2,ic.arrayLength());  assertEquals(220,ic.extendBy(100));  assertEquals(320,ic.length());  assertEquals(6,ic.arrayLength());  set(200,ic);  check(ic);  assertEquals(320,ic.extendBy(1000));  assertEquals(1320,ic.length());  assertEquals(14,ic.arrayLength());  set(320,ic);  check(ic);  try {    ic.extendBy(-1);    fail();  } catch (  final IllegalArgumentException e) {    assertEquals("-1",e.getMessage());  }}  }
class C{  public RBFKernel(){  this(1.0);}  }
class C{  public void deserializeArchivedVersions() throws RuntimeException {  System.out.println("Deserializing archived instances in " + getArchiveDirectory() + ".");  File archive=new File(getArchiveDirectory());  if (!archive.exists() || !archive.isDirectory()) {    return;  }  String[] listing=archive.list();  for (  String archiveName : listing) {    if (!(archiveName.endsWith(".zip"))) {      continue;    }    try {      File file=new File(getArchiveDirectory(),archiveName);      ZipFile zipFile=new ZipFile(file);      ZipEntry entry=zipFile.getEntry("class_fields.ser");      InputStream inputStream=zipFile.getInputStream(entry);      ObjectInputStream objectIn=new ObjectInputStream(inputStream);      Map<String,List<String>> classFields=(Map<String,List<String>>)objectIn.readObject();      zipFile.close();      for (      String className : classFields.keySet()) {        List<String> fieldNames=classFields.get(className);        Class<?> clazz=Class.forName(className);        ObjectStreamClass streamClass=ObjectStreamClass.lookup(clazz);        if (streamClass == null) {          System.out.println();        }        for (        String fieldName : fieldNames) {          assert streamClass != null;          ObjectStreamField field=streamClass.getField(fieldName);          if (field == null) {            throw new RuntimeException("Field '" + fieldName + "' was dropped from class '"+ className+ "' as a serializable field! Please "+ "put it back!!!"+ "\nIt used to be in "+ className+ " in this archive: "+ archiveName+ ".");          }        }      }    } catch (    ClassNotFoundException e) {      throw new RuntimeException("Could not read class_fields.ser in archive + " + archiveName + " .",e);    }catch (    IOException e) {      throw new RuntimeException("Problem reading archive" + archiveName + "; see cause.",e);    }    System.out.println("...Deserializing instances in " + archiveName + "...");    ZipEntry zipEntry=null;    try {      File file=new File(getArchiveDirectory(),archiveName);      FileInputStream in=new FileInputStream(file);      ZipInputStream zipinputstream=new ZipInputStream(in);      while ((zipEntry=zipinputstream.getNextEntry()) != null) {        if (!zipEntry.getName().endsWith(".ser")) {          continue;        }        ObjectInputStream objectIn=new ObjectInputStream(zipinputstream);        objectIn.readObject();        zipinputstream.closeEntry();      }      zipinputstream.close();    } catch (    ClassNotFoundException e) {      throw new RuntimeException("Could not read object zipped file " + zipEntry.getName() + " in archive "+ archiveName+ ". "+ "Perhaps the class was renamed, moved to another package, or "+ "removed. In any case, please put it back where it was.",e);    }catch (    IOException e) {      throw new RuntimeException("Problem reading archive" + archiveName + "; see cause.",e);    }  }  System.out.println("Finished deserializing archived instances.");}  }
class C{  @Inject public EmailNotifier(MetricService metricService,AnnotationService annotationService,AuditService auditService,MailService mailService,SystemConfiguration config,Provider<EntityManager> emf){  super(metricService,annotationService,auditService,config,emf);  requireArgument(mailService != null,"Mail service cannot be null.");  requireArgument(config != null,"The configuration cannot be null.");  _mailService=mailService;}  }
class C{  public void showRange(int minRow,int maxRow,int minCol,int maxCol) throws IOException, ServiceException {  CellQuery query=new CellQuery(cellFeedUrl);  query.setMinimumRow(minRow);  query.setMaximumRow(maxRow);  query.setMinimumCol(minCol);  query.setMaximumCol(maxCol);  CellFeed feed=service.query(query,CellFeed.class);  for (  CellEntry entry : feed.getEntries()) {    printCell(entry);  }}  }
class C{  public final void writeDatum(final double value,final int attributeIndex,final Attribute attribute,final ColumnType columnType,final DataOutput out,final boolean sparse) throws IOException {  if (sparse) {    if (Tools.isDefault(attribute.getDefault(),value)) {      return;    } else {      out.writeInt(attributeIndex);    }  }switch (columnType) {case DOUBLE:    out.writeDouble(value);  break;case INTEGER:if (Double.isNaN(value)) {  out.writeInt(Integer.MIN_VALUE + 1);  out.writeBoolean(true);} else {  out.writeInt((int)value);  if ((int)value == Integer.MIN_VALUE + 1) {    out.writeBoolean(false);  }}break;case NOMINAL_BYTE:if (Double.isNaN(value)) {out.writeByte(-1);} else {out.writeByte((byte)value);}break;case NOMINAL_INTEGER:if (Double.isNaN(value)) {out.writeInt(-1);} else {out.writeInt((int)value);}break;case NOMINAL_SHORT:if (Double.isNaN(value)) {out.writeShort(-1);} else {out.writeShort((short)value);}break;default :throw new RuntimeException("Illegal type: " + columnType);}}  }
class C{  public static CMSSignedData replaceCertificatesAndCRLs(CMSSignedData signedData,CertStore certsAndCrls) throws CMSException {  CMSSignedData cms=new CMSSignedData(signedData);  ASN1Set certs=null;  ASN1Set crls=null;  try {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCertificatesFromStore(certsAndCrls));    if (set.size() != 0) {      certs=set;    }  } catch (  CertStoreException e) {    throw new CMSException("error getting certs from certStore",e);  }  try {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCRLsFromStore(certsAndCrls));    if (set.size() != 0) {      crls=set;    }  } catch (  CertStoreException e) {    throw new CMSException("error getting crls from certStore",e);  }  cms.signedData=new SignedData(signedData.signedData.getDigestAlgorithms(),signedData.signedData.getEncapContentInfo(),certs,crls,signedData.signedData.getSignerInfos());  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  void cancelRelocation(){  ensureNotFrozen();  version++;  assert state == ShardRoutingState.RELOCATING : this;  assert assignedToNode() : this;  assert relocatingNodeId != null : this;  expectedShardSize=UNAVAILABLE_EXPECTED_SHARD_SIZE;  state=ShardRoutingState.STARTED;  relocatingNodeId=null;  allocationId=AllocationId.cancelRelocation(allocationId);}  }
class C{  protected void extractVariables(Set<String> excludedVariables,DiscreteVariableAnalysis variableAnalysis) throws IOException {  int numOfCols=0;  DiscreteVarInfo[] discreteVarInfos=new DiscreteVarInfo[countNumberOfColumns()];  try (FileChannel fc=new RandomAccessFile(dataFile.toFile(),"r").getChannel()){    MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    int index=0;    byte currentChar=-1;    byte prevChar=NEW_LINE;    StringBuilder dataBuilder=new StringBuilder();    while (buffer.hasRemaining()) {      currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == delimiter || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {        String value=dataBuilder.toString().trim();        dataBuilder.delete(0,dataBuilder.length());        if (value.length() > 0) {          if (!excludedVariables.contains(value)) {            discreteVarInfos[index]=new DiscreteVarInfo(value);            numOfCols++;          }        } else {          String errMsg=String.format("Missing variable name at column %d.",index + 1);          LOGGER.error(errMsg);          throw new IOException(errMsg);        }        index++;        if (currentChar == NEW_LINE) {          break;        }      } else       if (currentChar != SINGLE_QUOTE && currentChar != DOUBLE_QUOTE) {        dataBuilder.append((char)currentChar);      }      prevChar=currentChar;    }    if (currentChar > -1 && currentChar != NEW_LINE) {      if (currentChar == delimiter) {        String errMsg=String.format("Missing variable name at column %d.",index + 1);        LOGGER.error(errMsg);        throw new IOException(errMsg);      } else {        String value=dataBuilder.toString().trim();        dataBuilder.delete(0,dataBuilder.length());        if (value.length() > 0) {          if (!excludedVariables.contains(value)) {            discreteVarInfos[index]=new DiscreteVarInfo(value);            numOfCols++;          }        } else {          String errMsg=String.format("Missing variable name at column %d.",index + 1);          LOGGER.error(errMsg);          throw new IOException(errMsg);        }      }    }  }   variableAnalysis.setDiscreteVarInfos(discreteVarInfos);  variableAnalysis.setNumOfCols(numOfCols);}  }
class C{  public void flush() throws IOException {  file.getFD().sync();}  }
class C{  private Identity fetch(final String token) throws IOException {  final String uri=new Href(this.api).path("user").with(PsGithub.ACCESS_TOKEN,token).toString();  return PsGithub.parse(new JdkRequest(uri).header("accept","application/json").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_OK).as(JsonResponse.class).json().readObject());}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"CMP");  translateAll(environment,instruction,"CMP",instructions);}  }
class C{  public static boolean checkChrootPath(String zkHost,boolean create) throws KeeperException, InterruptedException {  if (!SolrZkClient.containsChroot(zkHost)) {    return true;  }  log.trace("zkHost includes chroot");  String chrootPath=zkHost.substring(zkHost.indexOf("/"),zkHost.length());  SolrZkClient tmpClient=new SolrZkClient(zkHost.substring(0,zkHost.indexOf("/")),60000,30000,null,null,null);  boolean exists=tmpClient.exists(chrootPath,true);  if (!exists && create) {    tmpClient.makePath(chrootPath,false,true);    exists=true;  }  tmpClient.close();  return exists;}  }
class C{  public static void fill(short[] a,int fromIndex,int toIndex,short val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  private int substitute(final StrBuilder buf,final int offset,final int length,List<String> priorVariables){  final StrMatcher pfxMatcher=getVariablePrefixMatcher();  final StrMatcher suffMatcher=getVariableSuffixMatcher();  final char escape=getEscapeChar();  final StrMatcher valueDelimMatcher=getValueDelimiterMatcher();  final boolean substitutionInVariablesEnabled=isEnableSubstitutionInVariables();  final boolean top=priorVariables == null;  boolean altered=false;  int lengthChange=0;  char[] chars=buf.buffer;  int bufEnd=offset + length;  int pos=offset;  while (pos < bufEnd) {    final int startMatchLen=pfxMatcher.isMatch(chars,pos,offset,bufEnd);    if (startMatchLen == 0) {      pos++;    } else {      if (pos > offset && chars[pos - 1] == escape) {        buf.deleteCharAt(pos - 1);        chars=buf.buffer;        lengthChange--;        altered=true;        bufEnd--;      } else {        final int startPos=pos;        pos+=startMatchLen;        int endMatchLen=0;        int nestedVarCount=0;        while (pos < bufEnd) {          if (substitutionInVariablesEnabled && (endMatchLen=pfxMatcher.isMatch(chars,pos,offset,bufEnd)) != 0) {            nestedVarCount++;            pos+=endMatchLen;            continue;          }          endMatchLen=suffMatcher.isMatch(chars,pos,offset,bufEnd);          if (endMatchLen == 0) {            pos++;          } else {            if (nestedVarCount == 0) {              String varNameExpr=new String(chars,startPos + startMatchLen,pos - startPos - startMatchLen);              if (substitutionInVariablesEnabled) {                final StrBuilder bufName=new StrBuilder(varNameExpr);                substitute(bufName,0,bufName.length());                varNameExpr=bufName.toString();              }              pos+=endMatchLen;              final int endPos=pos;              String varName=varNameExpr;              String varDefaultValue=null;              if (valueDelimMatcher != null) {                final char[] varNameExprChars=varNameExpr.toCharArray();                int valueDelimiterMatchLen=0;                for (int i=0; i < varNameExprChars.length; i++) {                  if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars,i,i,varNameExprChars.length) != 0) {                    break;                  }                  if ((valueDelimiterMatchLen=valueDelimMatcher.isMatch(varNameExprChars,i)) != 0) {                    varName=varNameExpr.substring(0,i);                    varDefaultValue=varNameExpr.substring(i + valueDelimiterMatchLen);                    break;                  }                }              }              if (priorVariables == null) {                priorVariables=new ArrayList<String>();                priorVariables.add(new String(chars,offset,length));              }              checkCyclicSubstitution(varName,priorVariables);              priorVariables.add(varName);              String varValue=resolveVariable(varName,buf,startPos,endPos);              if (varValue == null) {                varValue=varDefaultValue;              }              if (varValue != null) {                final int varLen=varValue.length();                buf.replace(startPos,endPos,varValue);                altered=true;                int change=substitute(buf,startPos,varLen,priorVariables);                change=change + varLen - (endPos - startPos);                pos+=change;                bufEnd+=change;                lengthChange+=change;                chars=buf.buffer;              }              priorVariables.remove(priorVariables.size() - 1);              break;            }            nestedVarCount--;            pos+=endMatchLen;          }        }      }    }  }  if (top) {    return altered ? 1 : 0;  }  return lengthChange;}  }
class C{  private long jodaSeconds(int year,int month,int day,int hour,int minute,int second){  return GregorianChronology.getInstanceUTC().getDateTimeMillis(year,month,day,hour,minute,second,0) / 1000;}  }
class C{  public Effect ground(Assignment grounding){  if (fullyGrounded) {    return this;  }  List<BasicEffect> grounded=subeffects.stream().map(null).filter(null).collect(Collectors.toList());  return new Effect(grounded);}  }
class C{  public static X500Name buildX500Name(String commonName,String organisationUnit,String organisationName,String localityName,String stateName,String countryCode,String emailAddress){  X500NameBuilder x500NameBuilder=new X500NameBuilder(KseX500NameStyle.INSTANCE);  if (emailAddress != null) {    x500NameBuilder.addRDN(BCStyle.E,emailAddress);  }  if (countryCode != null) {    x500NameBuilder.addRDN(BCStyle.C,countryCode);  }  if (stateName != null) {    x500NameBuilder.addRDN(BCStyle.ST,stateName);  }  if (localityName != null) {    x500NameBuilder.addRDN(BCStyle.L,localityName);  }  if (organisationName != null) {    x500NameBuilder.addRDN(BCStyle.O,organisationName);  }  if (organisationUnit != null) {    x500NameBuilder.addRDN(BCStyle.OU,organisationUnit);  }  if (commonName != null) {    x500NameBuilder.addRDN(BCStyle.CN,commonName);  }  return x500NameBuilder.build();}  }
class C{  public static void execute(String[] args){  String msgFileName=null;  String sigFileName=null;  String coverFileName=null;  String stegoFileName=null;  String extractDir=null;  String extractFileName=null;  String signatureFileName=null;  String command=null;  String pluginName=null;  List<?> msgData=null;  List<File> coverFileList=null;  List<File> stegoFileList=null;  OpenStego stego=null;  CmdLineParser parser=null;  CmdLineOptions options=null;  CmdLineOption option=null;  List<CmdLineOption> optionList=null;  OpenStegoPlugin plugin=null;  try {    parser=new CmdLineParser(getStdCmdLineOptions(null),args);    if (!parser.isValid()) {      displayUsage();      return;    }    pluginName=parser.getParsedOptions().getOptionValue("-a");    if (pluginName != null && !pluginName.equals("")) {      plugin=PluginManager.getPluginByName(pluginName);      if (plugin == null) {        throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_NOT_FOUND,pluginName);      }    } else {      List<OpenStegoPlugin> plugins=PluginManager.getPlugins();      if (plugins.size() == 1) {        plugin=plugins.get(0);      } else       if (plugins.size() > 1) {        optionList=parser.getParsedOptionsAsList();        if (optionList.size() > 0) {          command=(optionList.get(0)).getName();          if (command.equals("embed") || command.equals("extract")) {            plugins=PluginManager.getDataHidingPlugins();            if (plugins.size() == 1) {              plugin=plugins.get(0);            }          } else           if (command.equals("gensig") || command.equals("embedmark") || command.equals("checkmark")) {            plugins=PluginManager.getWatermarkingPlugins();            if (plugins.size() == 1) {              plugin=plugins.get(0);            }          }        }      }    }    if (plugin != null) {      parser=new CmdLineParser(getStdCmdLineOptions(plugin),args);    }    optionList=parser.getParsedOptionsAsList();    options=parser.getParsedOptions();    for (int i=0; i < optionList.size(); i++) {      option=optionList.get(i);      if (((i == 0) && (option.getType() != CmdLineOption.TYPE_COMMAND)) || ((i > 0) && (option.getType() == CmdLineOption.TYPE_COMMAND))) {        displayUsage();        return;      }      if (i == 0) {        command=option.getName();      }    }    if (parser.getNonStdOptions().size() > 0) {      displayUsage();      return;    }    if (!command.equals("help") && !command.equals("algorithms")) {      if (plugin == null) {        throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.NO_PLUGIN_SPECIFIED);      } else {        stego=new OpenStego(plugin,plugin.createConfig(parser.getParsedOptions()));      }    }    if (command.equals("embed")) {      msgFileName=options.getOptionValue("-mf");      coverFileName=options.getOptionValue("-cf");      stegoFileName=options.getOptionValue("-sf");      if (stego.getConfig().isUseEncryption() && stego.getConfig().getPassword() == null) {        stego.getConfig().setPassword(PasswordInput.readPassword(labelUtil.getString("cmd.msg.enterPassword") + " "));      }      coverFileList=CommonUtil.parseFileList(coverFileName,";");      if (coverFileList.size() <= 1) {        if (coverFileList.size() == 0 && coverFileName != null && !coverFileName.equals("-")) {          System.err.println(labelUtil.getString("cmd.msg.coverFileNotFound",coverFileName));          return;        }        CommonUtil.writeFile(stego.embedData((msgFileName == null || msgFileName.equals("-")) ? null : new File(msgFileName),coverFileList.size() == 0 ? null : (File)coverFileList.get(0),(stegoFileName == null || stegoFileName.equals("-")) ? null : stegoFileName),(stegoFileName == null || stegoFileName.equals("-")) ? null : stegoFileName);      } else {        if (stegoFileName != null && !stegoFileName.equals("-")) {          System.err.println(labelUtil.getString("cmd.warn.stegoFileIgnored"));        }        for (int i=0; i < coverFileList.size(); i++) {          coverFileName=(coverFileList.get(i)).getName();          CommonUtil.writeFile(stego.embedData((msgFileName == null || msgFileName.equals("-")) ? null : new File(msgFileName),coverFileList.get(i),coverFileName),coverFileName);          System.err.println(labelUtil.getString("cmd.msg.coverProcessed",coverFileName));        }      }    } else     if (command.equals("embedmark")) {      sigFileName=options.getOptionValue("-gf");      coverFileName=options.getOptionValue("-cf");      stegoFileName=options.getOptionValue("-sf");      coverFileList=CommonUtil.parseFileList(coverFileName,";");      if (coverFileList.size() <= 1) {        if (coverFileList.size() == 0 && coverFileName != null && !coverFileName.equals("-")) {          System.err.println(labelUtil.getString("cmd.msg.coverFileNotFound",coverFileName));          return;        }        CommonUtil.writeFile(stego.embedMark((sigFileName == null || sigFileName.equals("-")) ? null : new File(sigFileName),coverFileList.size() == 0 ? null : (File)coverFileList.get(0),(stegoFileName == null || stegoFileName.equals("-")) ? null : stegoFileName),(stegoFileName == null || stegoFileName.equals("-")) ? null : stegoFileName);      } else {        if (stegoFileName != null && !stegoFileName.equals("-")) {          System.err.println(labelUtil.getString("cmd.warn.stegoFileIgnored"));        }        for (int i=0; i < coverFileList.size(); i++) {          coverFileName=(coverFileList.get(i)).getName();          CommonUtil.writeFile(stego.embedMark((sigFileName == null || sigFileName.equals("-")) ? null : new File(sigFileName),coverFileList.get(i),coverFileName),coverFileName);          System.err.println(labelUtil.getString("cmd.msg.coverProcessed",coverFileName));        }      }    } else     if (command.equals("extract")) {      stegoFileName=options.getOptionValue("-sf");      extractDir=options.getOptionValue("-xd");      if (stegoFileName == null) {        displayUsage();        return;      }      try {        msgData=stego.extractData(new File(stegoFileName));      } catch (      OpenStegoException osEx) {        if (osEx.getErrorCode() == OpenStegoException.INVALID_PASSWORD) {          if (stego.getConfig().getPassword() == null) {            stego.getConfig().setPassword(PasswordInput.readPassword(labelUtil.getString("cmd.msg.enterPassword") + " "));            try {              msgData=stego.extractData(new File(stegoFileName));            } catch (            OpenStegoException inEx) {              if (inEx.getErrorCode() == OpenStegoException.INVALID_PASSWORD) {                System.err.println(inEx.getMessage());                return;              } else {                throw inEx;              }            }          } else {            System.err.println(osEx.getMessage());            return;          }        } else {          throw osEx;        }      }      extractFileName=options.getOptionValue("-xf");      if (extractFileName == null) {        extractFileName=(String)msgData.get(0);        if (extractFileName == null || extractFileName.equals("")) {          extractFileName="untitled";        }      }      if (extractDir != null) {        extractFileName=extractDir + File.separator + extractFileName;      }      CommonUtil.writeFile((byte[])msgData.get(1),extractFileName);      System.err.println(labelUtil.getString("cmd.msg.fileExtracted",extractFileName));    } else     if (command.equals("checkmark")) {      stegoFileName=options.getOptionValue("-sf");      sigFileName=options.getOptionValue("-gf");      if (stegoFileName == null || sigFileName == null) {        displayUsage();        return;      }      stegoFileList=CommonUtil.parseFileList(stegoFileName,";");      if (stegoFileList.size() == 1) {        System.out.println(stego.checkMark(stegoFileList.get(0),new File(sigFileName)));      } else {        for (int i=0; i < stegoFileList.size(); i++) {          stegoFileName=(stegoFileList.get(i)).getName();          System.out.println(stegoFileName + "\t" + stego.checkMark(stegoFileList.get(i),new File(sigFileName)));        }      }    } else     if (command.equals("gensig")) {      if (stego.getConfig().getPassword() == null) {        stego.getConfig().setPassword(PasswordInput.readPassword(labelUtil.getString("cmd.msg.enterPassword") + " "));      }      signatureFileName=options.getOptionValue("-gf");      CommonUtil.writeFile(stego.generateSignature(),(signatureFileName == null || signatureFileName.equals("-")) ? null : signatureFileName);    } else     if (command.equals("diff")) {      coverFileName=options.getOptionValue("-cf");      stegoFileName=options.getOptionValue("-sf");      extractDir=options.getOptionValue("-xd");      extractFileName=options.getOptionValue("-xf");      if (extractDir != null) {        extractFileName=extractDir + File.separator + extractFileName;      }      CommonUtil.writeFile(stego.getDiff(new File(stegoFileName),new File(coverFileName),extractFileName),extractFileName);    } else     if (command.equals("readformats")) {      List<String> formats=plugin.getReadableFileExtensions();      for (int i=0; i < formats.size(); i++) {        System.out.println(formats.get(i));      }    } else     if (command.equals("writeformats")) {      List<String> formats=plugin.getWritableFileExtensions();      for (int i=0; i < formats.size(); i++) {        System.out.println(formats.get(i));      }    } else     if (command.equals("algorithms")) {      List<OpenStegoPlugin> plugins=PluginManager.getPlugins();      for (int i=0; i < plugins.size(); i++) {        plugin=plugins.get(i);        System.out.println(plugin.getName() + " " + plugin.getPurposesLabel()+ " - "+ plugin.getDescription());      }    } else     if (command.equals("help")) {      if (plugin == null) {        displayUsage();        return;      } else {        System.err.println(plugin.getUsage());      }    } else {      displayUsage();      return;    }  } catch (  OpenStegoException osEx) {    if (osEx.getErrorCode() == OpenStegoException.UNHANDLED_EXCEPTION) {      osEx.printStackTrace();    } else {      System.err.println(osEx.getMessage());    }  }catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static void sort(int[] a){  sort1(a,0,a.length);}  }
class C{  private boolean hasLimitedNetworks(){  return !buildLimitedNetworksList().isEmpty();}  }
class C{  public byte[] generateKey(){  byte[] key=new byte[strength];  random.nextBytes(key);  return key;}  }
class C{  private static Element addBean(Document doc,Node parent,Class<?> cls){  Element elem=doc.createElement("bean");  elem.setAttribute("class",cls.getName());  parent.appendChild(elem);  return elem;}  }
class C{  public int span(final char[] c){  return span(c,0);}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  int crossOver(int index,E x){  int minChildIndex=findMinChild(index);  if ((minChildIndex > 0) && (ordering.compare(elementData(minChildIndex),x) < 0)) {    queue[index]=elementData(minChildIndex);    queue[minChildIndex]=x;    return minChildIndex;  }  return crossOverUp(index,x);}  }
class C{  public static byte[] stringToGsm7BitPackedWithHeader(String data,byte[] header,int languageTable,int languageShiftTable) throws EncodeException {  if (header == null || header.length == 0) {    return stringToGsm7BitPacked(data,languageTable,languageShiftTable);  }  int headerBits=(header.length + 1) * 8;  int headerSeptets=(headerBits + 6) / 7;  byte[] ret=stringToGsm7BitPacked(data,headerSeptets,true,languageTable,languageShiftTable);  ret[1]=(byte)header.length;  System.arraycopy(header,0,ret,2,header.length);  return ret;}  }
class C{  public Instance nextInstance(){  Instance inst=this.inputStream.nextInstance();  Instance newInst=new SparseInstance(hashSize + notHashableAttributes.size());  newInst.setDataset(newInstances);  newInst.replaceMissingValues(replacementArray);  if (newInstances.size() > 0)   newInstances.remove(0);  for (int i=0; i < inst.numAttributes(); i++) {    if (inst.classIndex() == i) {      newInst.setValue(attributesIndex.get(inst.classAttribute().name()),inst.classValue());    } else {      if (ignoreAttributes.contains(i)) {        inst.setValue(i,0);      }      if (makeBinaryAttributes.contains(i) && inst.value(i) > 0) {        inst.setValue(i,1);      }      if (notHashableAttributes.contains(i)) {        newInst.setValue(attributesIndex.get(inst.attribute(i).name()),inst.value(i));      } else {        if (inst.value(i) > 0) {          newInst.setValue(attributesIndex.get(getAttributeNameOfHash(getHash(inst.attribute(i).name(),hashSize))),1);        }      }    }  }  return newInst;}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public boolean connect(BluetoothDevice device){  if (DBG)   log("connect(" + device + ")");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.connect(device);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));      return false;    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.540 -0500",hash_original_method="375626B12DD2ECC6EA0EE4FF36348A38",hash_generated_method="36ED22457B4A4433F7027CC629462ADA") public static void formatNanpNumber(Editable text){  int length=text.length();  if (length > "+1-nnn-nnn-nnnn".length()) {    return;  } else   if (length <= 5) {    return;  }  CharSequence saved=text.subSequence(0,length);  removeDashes(text);  length=text.length();  int dashPositions[]=new int[3];  int numDashes=0;  int state=NANP_STATE_DIGIT;  int numDigits=0;  for (int i=0; i < length; i++) {    char c=text.charAt(i);switch (c) {case '1':      if (numDigits == 0 || state == NANP_STATE_PLUS) {        state=NANP_STATE_ONE;        break;      }case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '0':    if (state == NANP_STATE_PLUS) {      text.replace(0,length,saved);      return;    } else     if (state == NANP_STATE_ONE) {      dashPositions[numDashes++]=i;    } else     if (state != NANP_STATE_DASH && (numDigits == 3 || numDigits == 6)) {      dashPositions[numDashes++]=i;    }  state=NANP_STATE_DIGIT;numDigits++;break;case '-':state=NANP_STATE_DASH;break;case '+':if (i == 0) {state=NANP_STATE_PLUS;break;}default :text.replace(0,length,saved);return;}}if (numDigits == 7) {numDashes--;}for (int i=0; i < numDashes; i++) {int pos=dashPositions[i];text.replace(pos + i,pos + i,"-");}int len=text.length();while (len > 0) {if (text.charAt(len - 1) == '-') {text.delete(len - 1,len);len--;} else {break;}}}  }
class C{  public TerminalSize min(TerminalSize other){  return withColumns(Math.min(columns,other.columns)).withRows(Math.min(rows,other.rows));}  }
class C{  protected Element createElementNode(Tag tag){  boolean hasVoidTags=htmlVoidRules != null;  boolean isVoid=false;  boolean selfClosed=false;  if (hasVoidTags) {    isVoid=htmlVoidRules.isVoidTag(tag.getName());    if (isVoid) {      selfClosed=domBuilder.config.isSelfCloseVoidTags();    }  } else {    selfClosed=domBuilder.config.isSelfCloseVoidTags();  }  return new Element(rootNode,tag,isVoid,selfClosed);}  }
class C{  void send404(PrintStream ps) throws IOException {  ps.println("Not Found\n\n" + "The requested resource was not found.\n");}  }
class C{  public int countTokens(){  int count=0;  int currpos=currentPosition;  while (currpos < maxPosition) {    int start=currpos;    while ((currpos < maxPosition) && Character.isLetterOrDigit(str.charAt(currpos))) {      currpos++;    }    if ((start == currpos) && (Character.isLetterOrDigit(str.charAt(currpos)) == false)) {      currpos++;    }    count++;  }  return count;}  }
class C{  private void writeSubscriptionIdentifier(long triggerProcessKey) throws Exception {  String subId=determineSubscriptionId(triggerProcessKey);  createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.SUBSCRIPTION_ID,subId);}  }
class C{  public FreeList(int capacity){  _capacity=capacity;  _freeStack=new AtomicReferenceArray<T>(capacity);}  }
class C{  protected void fireDOMNodeInsertedEvent(Node node){  AbstractDocument doc=getCurrentDocument();  if (doc.getEventsEnabled()) {    DOMMutationEvent ev=(DOMMutationEvent)doc.createEvent("MutationEvents");    ev.initMutationEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",true,false,this,null,null,null,MutationEvent.ADDITION);    AbstractNode n=(AbstractNode)node;    n.dispatchEvent(ev);    n.fireDOMNodeInsertedIntoDocumentEvent();  }}  }
class C{  public Asn1Exception(){  super();}  }
class C{  public boolean isModifierVolatile(){  return isModifierVolatile;}  }
