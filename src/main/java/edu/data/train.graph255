class C{  public static OutputStream leftShift(Socket self,byte[] value) throws IOException {  return IOGroovyMethods.leftShift(self.getOutputStream(),value);}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscape(char c,String r){  map.put(c,checkNotNull(r));  if (c > max) {    max=c;  }  return this;}  }
class C{  public MqttSubscriptionViewManager(final IKBus eventBus,final IConfigurationManager configurationManager,final MqttViewManager viewManager,final EventQueueManager<FormattedMqttMessage> uiEventQueue){  this.eventBus=eventBus;  this.configurationManager=configurationManager;  this.viewManager=viewManager;  this.uiEventQueue=uiEventQueue;}  }
class C{  private static boolean compareString(final String val,final int comparator,final String attr){  final String value=comparator == APPROX ? stripWhitespaces(val).toLowerCase() : val;  final String attribute=comparator == APPROX ? stripWhitespaces(attr).toLowerCase() : attr;switch (comparator) {case APPROX:case EQUALS:    return RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) == 0;case GREATER:  return RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) <= 0;case LESS:return RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) >= 0;default :throw new IllegalStateException("Found illegal comparator.");}}  }
class C{  MutableBigInteger divide(MutableBigInteger b,MutableBigInteger quotient){  return divide(b,quotient,true);}  }
class C{  public WHERE WHERE(String condition){  return new WHERE(this,condition);}  }
class C{  public boolean applyOptions() throws IOException {  boolean restartRequired=false;  for (int i=0, size=PANE_ITEMS_LIST.size(); i < size; i++) {    PaneItem currentItem=PANE_ITEMS_LIST.get(i);    restartRequired|=currentItem.applyOptions();  }  return restartRequired;}  }
class C{  private static String createPartialWwn(String wwn){  if (wwn.length() < SUFFIX_LENGTH + PARTIAL_PREFIX_LENGTH) {    return wwn;  }  String prefix=wwn.substring(wwn.length() - (SUFFIX_LENGTH + PARTIAL_PREFIX_LENGTH),wwn.length() - SUFFIX_LENGTH);  String sufix=wwn.substring(wwn.length() - SUFFIX_LENGTH);  return ("000" + prefix + "0000"+ sufix);}  }
class C{  public static boolean parseBoolean(FXGNode node,String value,String name){  if (value.equals("true"))   return true; else   if (value.equals("false"))   return false;  throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidBooleanValue",name,value);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ERROR_CODE;case 2:  return MESSAGE;default :return null;}}  }
class C{  protected MSBDiskFPSet(final FPSetConfiguration fpSetConfig) throws RemoteException {  super(fpSetConfig);  Assert.check(fpSetConfig.getFpBits() > 0,EC.GENERAL);  this.moveBy=(32 - fpSetConfig.getFpBits()) - (logMaxMemCnt - LogMaxLoad);  this.mask=(capacity - 1) << moveBy;  this.flusher=new MSBFlusher();}  }
class C{  public void undeclareBean(BSFDeclaredBean bean) throws BSFException {  shell.setVariable(bean.name,null);}  }
class C{  final public boolean offer(final T ref){  throw new UnsupportedOperationException();}  }
class C{  public StatementMetric[] flushMetrics(){  rwLock.acquireWriteLock();  try {    boolean isEmpty=false;    if (currentLastElement == -1) {      isEmpty=true;    }    if (isReportInactive) {      for (int i=0; i <= currentLastElement; i++) {        if (statementNames[i] != null) {          metrics[i]=new StatementMetric(engineURI,statementNames[i]);        }      }    }    if ((currentLastElement > -1) && (!removedStatementNames.isEmpty())) {      for (int i=0; i <= currentLastElement; i++) {        if (removedStatementNames.contains(statementNames[i])) {          statementNames[i]=null;        }      }    }    while ((currentLastElement != -1) && (statementNames[currentLastElement] == null)) {      currentLastElement--;    }    if (isEmpty) {      return null;    }    StatementMetric[] newMetrics=new StatementMetric[metrics.length];    StatementMetric[] oldMetrics=metrics;    metrics=newMetrics;    return oldMetrics;  }  finally {    rwLock.releaseWriteLock();  }}  }
class C{  private static void redirectBranch(Unit node,Unit oldTarget,Unit newTarget){  Iterator targetIt=node.getUnitBoxes().iterator();  while (targetIt.hasNext()) {    UnitBox targetBox=(UnitBox)targetIt.next();    Unit target=targetBox.getUnit();    if (target == oldTarget)     targetBox.setUnit(newTarget);  }}  }
class C{  public GestionUsuariosBackOfficeException(String message){  this(message,null);}  }
class C{  public synchronized EventBean assertOneGetNewAndReset(){  ScopeTestHelper.assertTrue("Listener invocation not received but expected",isInvoked);  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,newDataList.size());  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,oldDataList.size());  if (lastNewData == null) {    ScopeTestHelper.fail("No new-data events received");  }  ScopeTestHelper.assertEquals("Mismatch in the number of new-data events",1,lastNewData.length);  ScopeTestHelper.assertNull("No old-data events are expected but some were received",lastOldData);  EventBean lastNew=lastNewData[0];  reset();  return lastNew;}  }
class C{  public void verifySignature(String message,String signature,String algorithmUri) throws IllegalStateException, WebssoClientException {  log.debug("Verify signature.");  Validate.notNull(message,"signed content");  Validate.notNull(signature,"signature");  Validate.notNull(algorithmUri,"algorithm uri");  Validate.notNull(getCertificate(),"signing certificate");  boolean verifies=false;  String decodedAlgorithmUri=null;  byte[] decodedSignature=null;  try {    decodedAlgorithmUri=URLDecoder.decode(algorithmUri,"UTF-8");    log.debug("Signature algorithm uri {}",decodedAlgorithmUri);    decodedSignature=Base64.decode(URLDecoder.decode(signature,"UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new WebssoClientException("Could not decode algorithm uri or signature",e);  }  try {    SignatureAlgorithm algo=SignatureAlgorithm.getSignatureAlgorithmForURI(decodedAlgorithmUri);    Signature sig=Signature.getInstance(algo.getAlgorithmName());    X509Certificate cert=getCertificate();    sig.initVerify(cert.getPublicKey());    sig.update(message.getBytes("UTF-8"));    verifies=sig.verify(decodedSignature);    log.debug("signature verifies: " + verifies);  } catch (  Exception e) {    log.error("Caught exception ",e);    throw new IllegalStateException(e);  }  if (!verifies) {    throw new IllegalStateException("Signature verification failed.");  }}  }
class C{  private void backpropagate(int curLayerIdx,DenseFloatMatrix weightUpdateMatrix){  int x=this.weightMatrixList.get(curLayerIdx).getColumnCount();  int y=this.weightMatrixList.get(curLayerIdx).getRowCount();  FloatVector deltaVector=new DenseFloatVector(x);  Neuron<?>[] ns=neurons.get(curLayerIdx);  for (int row=0; row < x; ++row) {    Neuron<?> n=ns[row];    n.setWeightVector(y);    try {      Iterable msgs=new ErrorMessageIterable(curLayerIdx,row);      n.backward(msgs);    } catch (    IOException e) {      e.printStackTrace();    }    weightUpdateMatrix.setColumn(row,n.getWeights());    deltaVector.set(row,n.getDelta());  }}  }
class C{  public static void writeConfigFile(File configFile,Class<?>[] classes) throws SQLException, IOException {  System.out.println("Writing configurations to " + configFile.getAbsolutePath());  writeConfigFile(new FileOutputStream(configFile),classes);}  }
class C{  public void simulate(GeneHistory history){  setHistory(history);  history.reset();  UpdateFunction updateFunction=history.getUpdateFunction();  int numFactors=updateFunction.getNumFactors();  DishModel dishModel=new DishModel(getNumDishes(),getDishDishVariability());  history.setInitSync(isInitSync());  history.setDishModel(dishModel);  int numChips=getNumSamplesPerDish();  if (isMeasuredDataSaved()) {    int numSteps=timeSteps.length;    int numSamples=getNumDishes() * numChips;    this.measuredData=new double[numFactors][numSteps][numSamples];  }  this.rawData=null;  if (isRawDataSaved()) {    int numSteps=timeSteps.length;    int numCells=getNumDishes() * getNumCellsPerDish();    this.rawData=new double[numFactors][numSteps][numCells];  }  double sampleSd=getSampleSampleVariability();  double chipSd=getChipChipVariability();  double pixelSd=getPixelDigitalization();  Distribution sampleErrorDist=new Normal(0.0,sampleSd);  Distribution chipErrorDist=new Normal(0.0,chipSd);  Distribution pixelErrorDist=new Normal(0.0,pixelSd);  double[][] chipErrors=new double[getNumDishes()][numChips];  double[][] sampleErrors=new double[getNumDishes()][numChips];  for (int d=0; d < getNumDishes(); d++) {    for (int ch=0; ch < numChips; ch++) {      chipErrors[d][ch]=chipErrorDist.nextRandom();      sampleErrors[d][ch]=sampleErrorDist.nextRandom();    }  }  double[][] cellData=new double[timeSteps.length][numFactors];  double[][] aggregation=new double[cellData.length][cellData[0].length];  for (int d=0; d < getNumDishes(); d++) {    dishModel.setDishNumber(d);    for (int sIndex=0; sIndex < timeSteps.length; sIndex++) {      Arrays.fill(aggregation[sIndex],0);    }    for (int c=0; c < getNumCellsPerDish(); c++) {      if ((c + 1) % 50 == 0) {        this.dishNumber=d;        this.cellNumber=c;      }      for (int sIndex=0; sIndex < timeSteps.length; sIndex++) {        Arrays.fill(cellData[sIndex],0);      }      history.initialize();      int s=-1;      int sIndex=0;      while (++s < getStepsGenerated()) {        if (s > 0) {          history.update();        }        if (s == timeSteps[sIndex] - 1) {          double[][] historyArray=history.getHistoryArray();          for (int f=0; f < numFactors; f++) {            cellData[sIndex][f]=historyArray[0][f];            if (isAntilogCalculated()) {              cellData[sIndex][f]=Math.exp(cellData[sIndex][f]);            }            if (isRawDataSaved()) {              int row=d * getNumCellsPerDish() + c;              this.rawData[f][sIndex][row]=cellData[sIndex][f];            }          }          if (++sIndex >= timeSteps.length) {            break;          }        }      }      for (int i=0; i < cellData.length; i++) {        for (int j=0; j < cellData[0].length; j++) {          aggregation[i][j]+=cellData[i][j];        }      }    }    if (isMeasuredDataSaved()) {      for (int sIndex=0; sIndex < timeSteps.length; sIndex++) {        for (int f=0; f < numFactors; f++) {          for (int ch=0; ch < numChips; ch++) {            double average=aggregation[sIndex][f] / getNumCellsPerDish();            double pixelError=pixelErrorDist.nextRandom();            double measurement=average + sampleErrors[d][ch] + chipErrors[d][ch]+ pixelError;            this.measuredData[f][sIndex][d * numChips + ch]=measurement;          }        }      }    }  }  return;}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  private void initProfiles(){  PathMatchingResourcePatternResolver resolver=new PathMatchingResourcePatternResolver();  List<String> profiles=new ArrayList<>();  DetectorFactory.setSeed(0L);  try {    for (    Resource rs : resolver.getResources(profilePath)) {      StringWriter writer=new StringWriter();      IOUtils.copy(rs.getInputStream(),writer);      profiles.add(writer.toString());    }    DetectorFactory.loadProfile(profiles);  } catch (  IOException|LangDetectException ex) {    LOGGER.warn(ex);  }}  }
class C{  public final synchronized boolean canMoveVariationDown(){  return game.canMoveVariation(1);}  }
class C{  public static <T extends PyElement>T addElementToStatementList(@NotNull final T element,@NotNull final PyStatementList statementList){  PsiElement before=null;  PsiElement after=null;  for (  final PyStatement statement : statementList.getStatements()) {    if (PyDependenciesComparator.depends(element,statement)) {      after=statement;    } else     if (PyDependenciesComparator.depends(statement,element)) {      before=statement;    }  }  final PsiElement result;  if (after != null) {    result=statementList.addAfter(element,after);  } else   if (before != null) {    result=statementList.addBefore(element,before);  } else {    result=addElementToStatementList(element,statementList,true);  }  @SuppressWarnings("unchecked") final T resultCasted=(T)result;  return resultCasted;}  }
class C{  public Scrollback(){  messages=new LinkedList<String>();}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,R>HexFunction<T2,T3,T4,T5,T6,T7,R> partial7(final T1 t1,final HeptFunction<T1,T2,T3,T4,T5,T6,T7,R> heptFunc){  return null;}  }
class C{  public static void sendPushMessageAsync(String body,String deviceKey,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword){  NetworkManager.getInstance().addToQueue(createPushMessage(body,deviceKey,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,"","","",""));}  }
class C{  public static void main(final String[] args){  System.out.println("NanoHTTPD 1.1 (C) 2001,2005-2007 Jarno Elonen\n" + "(Command line options: [port])\n");  int port=80;  if (args.length > 0)   port=Integer.parseInt(args[0]);  try {    new NanoHTTPD(port);  } catch (  IOException ioe) {    System.err.println("Couldn't start server:\n" + ioe);    System.exit(-1);  }  System.out.println("Now serving files in port " + port + " from \""+ new File("").getAbsolutePath()+ "\"");  System.out.println("Hit Enter to stop.\n");  try {    System.in.read();  } catch (  Throwable t) {  }  ;}  }
class C{  public static double tTest(double t,double nu){  double a=nu / 2.0;  double b=0.5;  double x=nu / (nu + t * t);  return 1.0 - betai(a,b,x);}  }
class C{  public boolean validateAndInformPlayer(Player player,RPAction action,ActionData data){  String error=validate(player,action,data);  if ((error != null) && !error.trim().equals("")) {    tellIgnorePostman(player,error);  }  return error == null;}  }
class C{  public static boolean isIpAddress(String ipAddress){  Matcher m1=Utilities.VALID_IPV4_PATTERN.matcher(ipAddress);  if (m1.matches()) {    return true;  }  Matcher m2=Utilities.VALID_IPV6_PATTERN.matcher(ipAddress);  return m2.matches();}  }
class C{  private void login() throws Exception {  m_client=new HttpClient();  m_client.getParams().setParameter("http.protocol.single-cookie-header",true);  m_client.getParams().setParameter("http.useragent","Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)");  m_httpState=new HttpState();  m_hostConfiguration=new HostConfiguration();  HttpProxy.addProxy(m_hostConfiguration);  m_hostConfiguration.setHost("www.tripleawarclub.org");  final PostMethod post=new PostMethod("http://www.tripleawarclub.org/user.php");  final List<NameValuePair> parameters=new ArrayList<>();  parameters.add(new NameValuePair("uname",getUsername()));  parameters.add(new NameValuePair("pass",getPassword()));  parameters.add(new NameValuePair("submit","Login"));  parameters.add(new NameValuePair("rememberme","On"));  parameters.add(new NameValuePair("xoops_redirect","/"));  parameters.add(new NameValuePair("op","login"));  post.setRequestBody(parameters.toArray(new NameValuePair[parameters.size()]));  final int status=m_client.executeMethod(m_hostConfiguration,post,m_httpState);  if (status != 200) {    throw new Exception("Login failed, server returned status: " + status);  }  final String body=post.getResponseBodyAsString();  final String lowerBody=body.toLowerCase();  if (lowerBody.contains("incorrect login!")) {    throw new Exception("Incorrect login credentials");  }  if (!lowerBody.contains("thank you for logging in")) {    System.out.println("Unknown login error, site response " + body);    throw new Exception("Unknown login error");  }}  }
class C{  public IOContainer append(Collection<IOObject> output){  List<IOObject> newObjects=new LinkedList<>();  newObjects.addAll(output);  newObjects.addAll(ioObjects);  return new IOContainer(newObjects);}  }
class C{  void register(Itr itr){  head=new Node(itr,head);}  }
class C{  private static Reader joinStreamsWithCharset(byte[] buffered,InputStream tail,String charset) throws IOException {  return new InputStreamReader(new JoinedStream(buffered,tail),charset);}  }
class C{  private void deprecateStringPreference(Editor editor,int resIdPrefKey,int deprecatedDefaultResId){  final String key=mService.getString(resIdPrefKey);  final String oldDefault=mService.getString(deprecatedDefaultResId);  final String userSetOrOldDefault=mSharedPreferences.getString(key,oldDefault);  editor.putString(key,userSetOrOldDefault);}  }
class C{  public boolean mouseMoved(MouseEvent e){  if (showingInfoLine) {    showingInfoLine=false;    fireRequestInfoLine("");  }  return false;}  }
class C{  public void test_toString() throws Exception {  CertificateFactory certFact=CertificateFactory.getInstance("X509");  X509Certificate pemCert=(X509Certificate)certFact.generateCertificate(new ByteArrayInputStream(TestUtils.getX509Certificate_v3()));  byte[] extnValue=pemCert.getExtensionValue("2.5.29.35");  assertEquals(Arrays.toString(new byte[]{0x04,0x02,0x30,0x00}),Arrays.toString(extnValue));  assertNotNull(pemCert.toString());}  }
class C{  public boolean isSVG(){  return svgData != null;}  }
class C{  private String closeBodyTag(){  return "</body>";}  }
class C{  public void testSetString() throws Exception {  connection.setAutoCommit(false);  PreparedStatement stmt=connection.prepareStatement("INSERT INTO test_blob(id, bin_data) VALUES(?, ?)");  try {    stmt.setInt(1,1);    stmt.setString(2,TEST_TEXT);    stmt.executeUpdate();    connection.commit();    stmt.setInt(1,2);    stmt.setString(2,TEST_TEXT);    stmt.executeUpdate();    connection.commit();    stmt.setInt(1,3);    stmt.setString(2,TEST_TEXT);    stmt.executeUpdate();    connection.commit();  }  finally {    stmt.close();  }  connection.setAutoCommit(true);}  }
class C{  public static void main(String[] args) throws Exception {  ClosableVirtualFile latestZippedLanguageSourceFile=MainHelper.getLatestZippedLanguageSourceFile();  RepositoryManager repositoryManager=CeylonUtils.repoManager().systemRepo("../dist/dist/repo").logger(new LeakingLogger()).buildManager();  TypeChecker typeChecker=new TypeCheckerBuilder().verbose(false).addSrcDirectory(latestZippedLanguageSourceFile).setRepositoryManager(repositoryManager).getTypeChecker();  typeChecker.process();  latestZippedLanguageSourceFile.close();  if (typeChecker.getErrors() > 0) {    System.exit(1);  }}  }
class C{  public static boolean testAarLine(Vector2dc min,Vector2dc max,double a,double b,double c){  return testAarLine(min.x(),min.y(),max.x(),max.y(),a,b,c);}  }
class C{  public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  public static Iterator createShape3D(OMGraphic graphic){  return createShape3D(graphic,0);}  }
class C{  public static boolean verifySignature(String signedRequestHex,ContainerRequestContext context,PublicKey pubKey) throws InvalidKeyException, SignatureException, DecoderException {  if (signedRequestHex == null) {    return false;  }  String stringToSign=buildStringToSign(context);  return RequestSigner.verify(signedRequestHex,stringToSign,pubKey);}  }
class C{  protected int engineUpdate(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return core.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  protected void _matchToken(JsonToken token) throws IOException, JsonParseException {  String matchStr=token.asString();  int i=1;  for (int len=matchStr.length(); i < len; ++i) {    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOF(" in a value");      }    }    char c=_inputBuffer[_inputPtr];    if (c != matchStr.charAt(i)) {      _reportInvalidToken(matchStr.substring(0,i));    }    ++_inputPtr;  }  return;}  }
class C{  public Long call() throws Exception {  final long begin=System.currentTimeMillis();  final IIndex ndx=spoRelation.getIndex(keyOrder);  final SPOTupleSerializer tupleSer=(SPOTupleSerializer)ndx.getIndexMetadata().getTupleSerializer();  Arrays.sort(a,0,numStmts,keyOrder.getComparator());  final long beginWrite=System.currentTimeMillis();  sortTime.addAndGet(beginWrite - begin);  final byte[][] keys=new byte[numStmts][];  for (int i=0; i < numStmts; i++) {    final ISPO spo=a[i];    if (DEBUG) {      log.debug("Removing " + spo.toString() + " from "+ keyOrder);    }    keys[i]=tupleSer.serializeKey(spo);  }  final long writeCount;  if (reportMutations) {    final ResultBitBufferHandler aggregator=new ResultBitBufferHandler(numStmts);    ndx.submit(0,numStmts,keys,null,BatchRemoveConstructor.RETURN_BIT_MASK,aggregator);    final ResultBitBuffer modified=aggregator.getResult();    final boolean[] bits=modified.getResult();    writeCount=modified.getOnCount();    for (int i=0; i < numStmts; i++) {      if (bits[i]) {        a[i].setModified(ModifiedEnum.REMOVED);      }    }  } else {    final LongAggregator aggregator=new LongAggregator();    ndx.submit(0,numStmts,keys,null,BatchRemoveConstructor.RETURN_MUTATION_COUNT,aggregator);    writeCount=aggregator.getResult();  }  if (primaryIndex) {    mutationCount.addAndGet(writeCount);  }  final long elapsed=System.currentTimeMillis() - beginWrite;  writeTime.addAndGet(elapsed);  return elapsed;}  }
class C{  protected void initializeBeanContextResources(){  super.initializeBeanContextResources();  BeanContext context=getBeanContext();  if (context instanceof BeanContextServices) {    proxy=new BCSSProxyServiceProvider((BeanContextServices)context);  } else {    proxy=null;  }}  }
class C{  private final String[] tokenize(String cmdLine){  cmdLine=cmdLine.trim();  return cmdLine.split("\\s+");}  }
class C{  public void onLowMemory(){  mTileCache.onLowMemory();}  }
class C{  private static void swap(Object[] x,int a,int b){  Object t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  @Override public String toString(){  return xmlFile.getName();}  }
class C{  public static void reverse(BlockGraph graph){  for (Iterator blocksIt=graph.getBlocks().iterator(); blocksIt.hasNext(); ) {    Block block=(Block)blocksIt.next();    List succs=block.getSuccs();    List preds=block.getPreds();    block.setSuccs(preds);    block.setPreds(succs);  }  List heads=graph.getHeads();  List tails=graph.getTails();  graph.mHeads=new ArrayList(tails);  graph.mTails=new ArrayList(heads);}  }
class C{  public StunDatagramPacketFilter(TransportAddress stunServer){  this.stunServer=stunServer;}  }
class C{  public void checkAndHide(){  if ((hideRequested() && mouseFurtherThan(5)) || (mouseFurtherThan(15))) {    hideTooltip();  }}  }
class C{  public void registerCallback(final CallbackManager callbackManager,final FacebookCallback<LoginResult> callback,final int requestCode){  setRequestCode(requestCode);  registerCallback(callbackManager,callback);}  }
class C{  public static boolean isSystemApplication(PackageManager packageManager,String packageName){  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  NameNotFoundException e) {    e.printStackTrace();  }  return false;}  }
class C{  private void disableUpdates(){  if (lmgr != null) {    try {      lmgr.removeGpsStatusListener(this);      lmgr.removeUpdates(this);    } catch (    SecurityException e) {      Log.i(TAG,"You denied GPS permission, so we don't need a perform a proper cleanup here");    }  }}  }
class C{  @Override public void clear(){}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.DE_ACTIVATE_FOR___DEACTIVATE_FOR_1:    return getDeactivate_for_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void associateWorkItems(final WorkItem[] workItems){  boolean added=false;  for (  final WorkItem workItem : workItems) {    if (!associatedWorkItems.containsKey(workItem.getID())) {      final WorkItemCheckinInfo checkinInfo=new WorkItemCheckinInfo(workItem);      checkinInfo.setActionToDefault();      associatedWorkItems.put(workItem.getID(),checkinInfo);      added=true;    }  }  if (added) {    fireAssociatedWorkItemsChangedEvent();    updateLastSavedCheckin();  }}  }
class C{  @InfoName("CL_DEVICE_ERROR_CORRECTION_SUPPORT") public boolean hasErrorCorrectionSupport(){  return infos.getBool(getEntity(),CL_DEVICE_ERROR_CORRECTION_SUPPORT);}  }
class C{  public static int[] clone(final int[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  public void close(){  this.stats.close();}  }
class C{  private void updateMixerFrequencyOffset(){  long offset=mTunerFrequency - mTunerChannel.getFrequency() - mChannelFrequencyCorrection;  mMixer.setFrequency(offset);}  }
class C{  protected BuildV5() throws InstantiationException {  throw new InstantiationException("Cannot instantiate utility class");}  }
class C{  private int insertForecast(){  List<Object> parameters=new ArrayList<Object>();  StringBuilder insert=new StringBuilder();  insert.append("INSERT INTO ").append(MForecastLine.Table_Name).append(" (");  insert.append(MForecastLine.COLUMNNAME_M_ForecastLine_ID).append(",");  insert.append(MForecastLine.COLUMNNAME_M_Forecast_ID).append(",");  insert.append(MForecastLine.COLUMNNAME_AD_Client_ID).append(",");  insert.append(MForecastLine.COLUMNNAME_AD_Org_ID).append(",");  insert.append(MForecastLine.COLUMNNAME_M_Warehouse_ID).append(",");  insert.append(MForecastLine.COLUMNNAME_M_Product_ID).append(",");  insert.append(MForecastLine.COLUMNNAME_QtyCalculated).append(",");  insert.append(MForecastLine.COLUMNNAME_Qty).append(",");  insert.append(MForecastLine.COLUMNNAME_DatePromised).append(",");  insert.append(MForecastLine.COLUMNNAME_PP_Period_ID).append(",");  insert.append(MForecastLine.COLUMNNAME_SalesRep_ID).append(",");  insert.append(MForecastLine.COLUMNNAME_Created).append(",");  insert.append(MForecastLine.COLUMNNAME_CreatedBy).append(",");  insert.append(MForecastLine.COLUMNNAME_Updated).append(",");  insert.append(MForecastLine.COLUMNNAME_UpdatedBy).append(")");  insert.append(" SELECT ");  insert.append("nextidfunc(").append(MSequence.get(getCtx(),MForecastLine.Table_Name).get_ID()).append(",'N')").append(",");  insert.append(p_M_Forecast_ID).append(",");  insert.append("frm.AD_Client_ID,");  insert.append("frm.AD_Org_ID,");  insert.append("frm.M_Warehouse_ID,");  insert.append("frm.M_Product_ID,");  insert.append("frr.QtyCalculated,");  insert.append("NVL(frr.QtyPlan,0) + NVL(frr.QtyAbnormal,0),");  if (p_ForecastLoadType.equals("S"))   insert.append("adddays(fp.StartDate,").append(p_DaysAfterDue).append("),");  if (p_ForecastLoadType.equals("E"))   insert.append("adddays(fp.EndDate,").append(p_DaysAfterDue).append("),");  insert.append("frr.PP_Period_ID,");  insert.append(p_SalesRep_ID).append(",");  insert.append("SYSDATE").append(",");  insert.append(Env.getAD_User_ID(getCtx())).append(",");  insert.append("SYSDATE").append(",");  insert.append(Env.getAD_User_ID(getCtx()));  insert.append(" FROM PP_ForecastRunMaster frm ");  insert.append(" INNER JOIN PP_ForecastRunResult frr ON (frr.PP_ForecastRunMaster_ID=frm.PP_ForecastRunMaster_ID) ");  insert.append(" INNER JOIN PP_Period fp ON (fp.PP_Period_ID=frr.PP_Period_ID) ");  insert.append(" INNER JOIN M_Product p ON (p.M_Product_ID=frm.M_Product_ID) ");  insert.append(" INNER JOIN M_Product_Category pc ON (pc.M_Product_Category_ID=p.M_Product_Category_ID)");  StringBuilder whereClause=new StringBuilder(" WHERE NOT EXISTS (SELECT 1 FROM M_ForecastLine fl WHERE fl.M_Forecast_ID=? AND ");  whereClause.append("fl.M_Product_ID=frm.M_Product_ID AND ");  whereClause.append("fl.M_Warehouse_ID=frm.M_Warehouse_ID AND ");  whereClause.append("fl.PP_Period_ID=frr.PP_Period_ID) AND ");  parameters.add(p_M_Forecast_ID);  insert.append(getWhere(whereClause.toString(),parameters)).append(" ORDER BY fp.PeriodNo");  return DB.executeUpdateEx(insert.toString(),parameters.toArray(),get_TrxName());}  }
class C{  public int endPc(int nth){  ExceptionTableEntry e=(ExceptionTableEntry)entries.get(nth);  return e.endPc;}  }
class C{  public void addRangeMarker(Marker marker){  if (this.rangeMarkers == null) {    this.rangeMarkers=new java.util.ArrayList();  }  this.rangeMarkers.add(marker);  fireChangeEvent();}  }
class C{  public static boolean canLand(final Collection<Unit> airUnits,final Territory territory,final PlayerID player,final GameData data){  if (!Match.allMatch(airUnits,Matches.UnitIsAir)) {    throw new IllegalArgumentException("can only test if air will land");  }  if (!territory.isWater() && AbstractMoveDelegate.getBattleTracker(data).wasConquered(territory)) {    return false;  }  if (territory.isWater()) {    if (!Match.allMatch(airUnits,Matches.UnitCanLandOnCarrier)) {      return false;    }    final Set<Unit> friendly=new HashSet<>();    friendly.addAll(getFriendly(territory,player,data));    friendly.addAll(airUnits);    final int capacity=carrierCapacity(friendly,territory);    final int cost=carrierCost(friendly);    return capacity >= cost;  } else {    return data.getRelationshipTracker().canLandAirUnitsOnOwnedLand(player,territory.getOwner());  }}  }
class C{  private boolean canKillProcessSoftly(){  if (processCanBeKilledByOS(myProcess)) {    if (SystemInfo.isWindows) {      return myProcess instanceof RunnerWinProcess;    } else     if (SystemInfo.isUnix) {      return true;    }  }  return false;}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  private void createCanonicalClassMapping(CheckerStateBuilder stateBuilder,List<Artifact> allArtifacts){  for (  Artifact artifact : allArtifacts) {    for (    DeclaredClass clazz : artifact.classes().values()) {      if (stateBuilder.knownClasses().putIfAbsent(clazz.className(),clazz) == null) {        stateBuilder.putSourceMapping(clazz.className(),artifact.name());      }    }  }}  }
class C{  @Override @CanIgnoreReturnValue public boolean add(E e){  checkNotNull(e);  if (maxSize == 0) {    return true;  }  if (size() == maxSize) {    delegate.remove();  }  delegate.add(e);  return true;}  }
class C{  public void beforeFirst(){  currentIndex=0;}  }
class C{  public void startScan(BluetoothAdapter adapter){  int mask=BluetoothReceiver.DISCOVERY_STARTED_FLAG;  if (!adapter.isEnabled()) {    fail("startScan() bluetooth not enabled");  }  if (adapter.isDiscovering()) {    return;  }  BluetoothReceiver receiver=getBluetoothReceiver(mask);  long start=System.currentTimeMillis();  assertTrue(adapter.startDiscovery());  while (System.currentTimeMillis() - start < START_STOP_SCAN_TIMEOUT) {    if (adapter.isDiscovering() && ((receiver.getFiredFlags() & mask) == mask)) {      writeOutput(String.format("startScan() completed in %d ms",(receiver.getCompletedTime() - start)));      removeReceiver(receiver);      return;    }    sleep(POLL_TIME);  }  int firedFlags=receiver.getFiredFlags();  removeReceiver(receiver);  fail(String.format("startScan() timeout: isDiscovering=%b, flags=0x%x (expected 0x%x)",adapter.isDiscovering(),firedFlags,mask));}  }
class C{  public StartupException(Throwable nested){  super();  this.nested=nested;}  }
class C{  public void attach(FieldPortrayal2D portrayal,String name){  attach(portrayal,name,true);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public void error(String message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  public void changeShape(Dimension min,Dimension pref,Dimension max){  setMinimumSize(min);  setPreferredSize(pref);  setMaximumSize(max);  revalidate();}  }
class C{  public void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  httpHandler=new MyHandler();  HttpContext ctx=httpServer.createContext("/test/",httpHandler);  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  public static boolean checkMD5(final String md5Hash,final File file){  if (TextUtils.isEmpty(md5Hash) || file == null || !FileUtils.isReadable(file)) {    Log.e("Given String is empty or File is NULL or File is not readable");    return false;  }  final String hash=getMD5(file);  if (hash == null) {    Log.e("calculated hash is NULL");    return false;  }  return hash.equalsIgnoreCase(md5Hash);}  }
class C{  public boolean isParseRetainMode(){  return parseRetain;}  }
class C{  private static void applyOverrides(){  InputStream stream=getContentTypesPropertiesStream();  if (stream == null) {    return;  }  try {    try {      Properties overrides=new Properties();      overrides.load(stream);      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {        String extension=(String)entry.getKey();        String mimeType=(String)entry.getValue();        add(mimeType,extension);      }    }  finally {      stream.close();    }  } catch (  IOException ignored) {  }}  }
class C{  private void logAllFonts(){  if (log.isTraceEnabled()) {    log.trace("******** LAF={}",UIManager.getLookAndFeel().getClass().getName());    java.util.Enumeration<Object> keys=UIManager.getDefaults().keys();    while (keys.hasMoreElements()) {      Object key=keys.nextElement();      Object value=UIManager.get(key);      if (value instanceof javax.swing.plaf.FontUIResource || value instanceof java.awt.Font || key.toString().endsWith(".font")) {        Font f=UIManager.getFont(key);        log.trace("Class={}; Key: {} Font: {} size: {}",value.getClass().getName(),key,f.getName(),f.getSize());      }    }  }}  }
class C{  public static void main(String[] args){  runJavadoc(new TechnicalInformationHandlerJavadoc(),args);}  }
class C{  public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),append);}  }
class C{  private void createContents(){  shell=new Shell();  shell.setSize(600,450);  shell.setText(getText());  shell.setLayout(new GridLayout(1,false));}  }
class C{  public JmriJFrame(boolean saveSize,boolean savePosition){  super();  reuseFrameSavedPosition=savePosition;  reuseFrameSavedSized=saveSize;  addWindowListener(this);  addComponentListener(this);  windowInterface=new JmriJFrameInterface();  for (int i=0; i < list.size(); i++) {    JmriJFrame j=list.get(i);    if ((j.getExtendedState() != ICONIFIED) && (j.isVisible())) {      if ((j.getX() == this.getX()) && (j.getY() == this.getY())) {        offSetFrameOnScreen(j);      }    }  }synchronized (list) {    list.add(this);  }  setIconImage(getToolkit().getImage("resources/jmri32x32.gif"));  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);  addWindowCloseShortCut();  windowFrameRef=this.getClass().getName();  if (!this.getClass().getName().equals(JmriJFrame.class.getName())) {    generateWindowRef();    setFrameLocation();  }}  }
class C{  public GenExpr_ createGenExpr_(){  GenExpr_Impl genExpr_=new GenExpr_Impl();  return genExpr_;}  }
class C{  public static int ENODATA(){  return Errno.ENODATA.intValue();}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> saveAccount(@RequestBody UserDTO userDTO){  Optional<User> existingUser=userRepository.findOneByEmail(userDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getLogin().equalsIgnoreCase(userDTO.getLogin()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","Email already in use")).body(null);  }  return userRepository.findOneByLogin(SecurityUtils.getCurrentUser().getUsername()).map(null).orElseGet(null);}  }
class C{  private void report(String name,int burnin,String discreteVariableName){  try {    FileReader fileReader=new FileReader(new File(name));    BufferedReader br=new BufferedReader(fileReader);    String line;    String previousLine=null;    int discreteVariableIndex=-1;    Hashtable<String,Integer> hash=new Hashtable<String,Integer>();    while ((line=br.readLine()) != null) {      if (line.matches("\\d+\\t.+")) {        String[] split=line.split("\t");        if (split[0].equals("0")) {          String[] headerSplit=previousLine.split("\t");          for (int i=0; i < headerSplit.length; i++) {            String s=headerSplit[i];            if (s.equals(discreteVariableName)) {              discreteVariableIndex=i;            }          }        }        if (Integer.parseInt(split[0]) >= burnin) {          if (hash.containsKey(split[discreteVariableIndex])) {            hash.put(split[discreteVariableIndex],new Integer(hash.get(split[discreteVariableIndex]) + 1));          } else {            hash.put(split[discreteVariableIndex],new Integer(1));          }        }      }      previousLine=line;    }    Vector<String> v=new Vector(hash.keySet());    Collections.sort(v);    System.out.print("name" + "\t");    for (    String s : v) {      double state=Double.parseDouble(s);      if (Math.floor(state) != state) {        throw new RuntimeException("State is not a whole number: " + state);      }      System.out.print("state " + (int)state + "\t");    }    System.out.print("\n" + name + "\t");    for (    String aV : v) {      String element=aV;      System.out.print(hash.get(element) + "\t");    }    System.out.println();    br.close();  } catch (  IOException e) {    System.err.println("Error Parsing Input log: " + e.getMessage());  }}  }
class C{  public short shortValue(){  return toNumber().shortValue();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.INTERFACE_SCOPE__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  public void moveZeroes(int[] nums){  if (nums == null || nums.length == 0) {    return;  }  int count=0;  for (  int n : nums) {    if (n != 0) {      nums[count]=n;      count++;    }  }  for (; count < nums.length; count++) {    nums[count]=0;  }}  }
class C{  public DepthTransition(IMove move,INode prev,int depth){  super(move,prev);  this.depth=depth;}  }
class C{  private boolean isBST(){  return isBST(root,null,null);}  }
class C{  public Zipper<A> modifyNext(UnaryOperator<A> operator) throws NoSuchElementException {  return new Zipper<>(front,back.tail().plus(operator.apply(back.head())),position);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(PullToRefreshBase.State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  private SelectResults prepareIteratorDef(Object obj,ObjectType elementType,ExecutionContext context) throws TypeMismatchException {  if (obj == null) {    return null;  }  if (obj == QueryService.UNDEFINED) {    return null;  }  if (obj instanceof SelectResults) {    SelectResults sr=(SelectResults)obj;    if (!elementType.equals(TypeUtils.OBJECT_TYPE)) {      sr.setElementType(elementType);    }    return sr;  }  if (obj instanceof Region) {    QRegion qRegion=new QRegion((Region)obj,false,context);    if (!elementType.equals(TypeUtils.OBJECT_TYPE)) {      qRegion.setElementType(elementType);    }    return qRegion;  }  if (obj instanceof Collection) {    ResultsCollectionWrapper res=new ResultsCollectionWrapper(elementType,(Collection)obj);    res.setModifiable(false);    return res;  }  if (obj instanceof Object[]) {    if (elementType.equals(TypeUtils.OBJECT_TYPE)) {      elementType=TypeUtils.getObjectType(obj.getClass().getComponentType());    }    ResultsCollectionWrapper res=new ResultsCollectionWrapper(elementType,Arrays.asList((Object[])obj));    res.setModifiable(false);    return res;  }  if (obj instanceof Map) {    if (elementType.equals(TypeUtils.OBJECT_TYPE)) {      elementType=TypeUtils.getObjectType(Map.Entry.class);    }    ResultsCollectionWrapper res=new ResultsCollectionWrapper(elementType,((Map)obj).entrySet());    res.setModifiable(false);    return res;  } else {    obj=new Object[]{obj};    if (elementType.equals(TypeUtils.OBJECT_TYPE)) {      elementType=TypeUtils.getObjectType(obj.getClass().getComponentType());    }    ResultsCollectionWrapper res=new ResultsCollectionWrapper(elementType,Arrays.asList((Object[])obj));    res.setModifiable(false);    return res;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.007 -0400",hash_original_method="7D8493348446C8D120E5A36A74BD3C3A",hash_generated_method="E3DA08D883EA35EB225584DEC3AD75AC") public boolean accept(File dir,String name){  return false;}  }
class C{  protected AbstractAnnotation(){  this.listenerList=new EventListenerList();}  }
class C{  public UIMATypeAwareAnnotationsTokenizerFactory(Map<String,String> args){  super(args);  featurePath=require(args,"featurePath");  tokenType=require(args,"tokenType");  descriptorPath=require(args,"descriptorPath");  configurationParameters.putAll(args);}  }
class C{  private Shape createEllipseInternal(int x,int y,int w,int h){  ellipse.setFrame(x,y,w,h);  return ellipse;}  }
class C{  public boolean hasActiveEvent(){  return activeEvent;}  }
class C{  public int compareHierarchyLevels(SimpleEntry e1,SimpleEntry e2){  if (e1.getHierarchyLevel() == null || e2.getHierarchyLevel() == null) {    return 0;  }  return e1.getHierarchyLevel().compareTo(e2.getHierarchyLevel());}  }
class C{  public int hashCode(){  int code=0;  Object[] tbl=attributes;  for (int i=1; i < tbl.length; i+=2) {    code^=tbl[i].hashCode();  }  return code;}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  String str=str();  ch.characters(str.toCharArray(),0,str.length());}  }
class C{  public static BlockNode skipSyntheticPredecessor(BlockNode block){  if (block.isSynthetic() && block.getPredecessors().size() == 1) {    return block.getPredecessors().get(0);  }  return block;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  elementLevel++;  nsSupport.pushContext();  if (forceDTD && !hasOutputDTD)   startDTD(localName == null ? qName : localName,"","");  write('<');  writeName(uri,localName,qName,true);  writeAttributes(atts);  if (elementLevel == 1) {    forceNSDecls();  }  writeNSDecls();  write('>');  if (htmlMode && (qName.equals("script") || qName.equals("style"))) {    cdataElement=true;  }  super.startElement(uri,localName,qName,atts);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void ICONST_4(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ICONST_4();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public <U extends T>InitialMatching0<T,U> when(MatchesExact<U> o){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(o.t));  return new InitialMatching0<>(new DecomposableMatchBuilder0<>(matchers,new IdentityFieldExtractor<U>()).build(),value);}  }
class C{  synchronized void handleDisconnectedException(){  EventQueue queue=vm.eventQueue();  while (connected) {    try {      EventSet eventSet=queue.remove();      EventIterator iter=eventSet.eventIterator();      while (iter.hasNext()) {        Event event=iter.nextEvent();        if (event instanceof VMDeathEvent) {          vmDeathEvent((VMDeathEvent)event);        } else         if (event instanceof VMDisconnectEvent) {          vmDisconnectEvent((VMDisconnectEvent)event);        }      }      eventSet.resume();    } catch (    InterruptedException exc) {    }  }}  }
class C{  public void testDefaultsInitialized() throws Exception {  check(true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static double pdf(double x,double lambda){  if (x < 0)   return 0;  return lambda * Math.exp(-lambda * x);}  }
class C{  private Object invoke(final ObjectName objectName,final String method) throws InstanceNotFoundException, IOException, MBeanException, ReflectionException {  return this.server.invoke(objectName,method,new Object[]{},new String[]{});}  }
class C{  public LocalTime addWrapFieldToCopy(int value){  return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(),value));}  }
class C{  public static void resetRel(){  trace("Relative clock will reset to zero");  t0=0;  trace("Relative clock new reset");}  }
class C{  public HostMonitorConfig(Context context){  mContext=context.getApplicationContext();}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  Instance newInstance;  if (m_AttributeSelection == null) {    newInstance=instance;  } else {    newInstance=m_AttributeSelection.reduceDimensionality(instance);  }  return m_Classifier.distributionForInstance(newInstance);}  }
class C{  public String prefixForward(int length){  final String prefix=prefix(length);  this.pointer+=length;  this.index+=length;  this.column+=length;  return prefix;}  }
class C{  protected void NumberExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_NUMBER);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public boolean isHistoryEvent(){  return historyEvent;}  }
class C{  public H2FullPrunedBlockStore(NetworkParameters params,String dbName,String username,String password,int fullStoreDepth) throws BlockStoreException {  super(params,DATABASE_CONNECTION_URL_PREFIX + dbName + ";create=true;LOCK_TIMEOUT=60000;DB_CLOSE_ON_EXIT=FALSE",fullStoreDepth,username,password,null);}  }
class C{  private void replaceWithUnknownValIfTooManyValues(AnnotatedTypeMirror atm){  AnnotationMirror anno=atm.getAnnotationInHierarchy(UNKNOWNVAL);  if (anno != null && anno.getElementValues().size() > 0) {    List<Object> values=AnnotationUtils.getElementValueArray(anno,"value",Object.class,false);    if (values != null && values.size() > MAX_VALUES) {      atm.replaceAnnotation(UNKNOWNVAL);    }  }}  }
class C{  public double l1Distance(final ColumnVector vector){  return this.distance(vector,null);}  }
class C{  public synchronized void clear(){  this.verticies=new HashSet<Vertex>();  this.verticiesById=new HashMap<Number,Vertex>();  this.verticiesByData=new HashMap<Object,Vertex>();}  }
class C{  public static JPopupMenu leftShift(JPopupMenu self,Component component){  self.add(component);  return self;}  }
class C{  public final void applyTorque(float torque){  if (m_type != BodyType.DYNAMIC) {    return;  }  if (isAwake() == false) {    setAwake(true);  }  m_torque+=torque;}  }
class C{  private void prepareTaxInfoForProperty(final PropertyAckNoticeInfo infoBean,BigDecimal totalTax,BigDecimal propertyTax,Ptdemand currDemand,String propertyType){  for (  final EgDemandDetails demandDetail : currDemand.getEgDemandDetails()) {    if (demandDetail.getEgDemandReason().getEgInstallmentMaster().equals(propertyTaxCommonUtils.getCurrentPeriodInstallment())) {      totalTax=totalTax.add(demandDetail.getAmount());      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_EDUCATIONAL_CESS)) {        propertyTax=propertyTax.add(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_LIBRARY_CESS)) {        if (propertyType.equalsIgnoreCase("current"))         infoBean.setRevLibraryCess(demandDetail.getAmount());        if (propertyType.equalsIgnoreCase("history"))         infoBean.setExistingLibraryCess(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_GENERAL_TAX) || demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_VACANT_TAX)) {        propertyTax=propertyTax.add(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_UNAUTHORIZED_PENALTY)) {        if (propertyType.equalsIgnoreCase("current"))         infoBean.setRevUCPenalty(demandDetail.getAmount());        if (propertyType.equalsIgnoreCase("history"))         infoBean.setExistingUCPenalty(demandDetail.getAmount());      }    }  }  if (propertyType.equalsIgnoreCase("current")) {    infoBean.setRevTotalTax(totalTax);    infoBean.setRevPropertyTax(propertyTax);  }  if (propertyType.equalsIgnoreCase("history")) {    infoBean.setExistingTotalTax(totalTax);    infoBean.setExistingPropertyTax(propertyTax);  }}  }
class C{  @Override public void init(final Context context){  final ImmutableSet.Builder<IncrementalResultExporter> exportersBuilder=ImmutableSet.builder();  for (  final IncrementalResultExporterFactory builder : factories) {    try {      final Optional<IncrementalResultExporter> exporter=builder.build(context);      if (exporter.isPresent()) {        exportersBuilder.add(exporter.get());      }    } catch (    final IncrementalExporterFactoryException e) {      log.error("Could not initialize a result exporter.",e);    }  }  exporters=exportersBuilder.build();}  }
class C{  private boolean hasLongDef(BasicBlock bb){  if (bb == null)   return false;  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    for (Enumeration<Operand> d=s.getDefs(); d.hasMoreElements(); ) {      Operand def=d.nextElement();      if (def.isRegister()) {        if (def.asRegister().getRegister().isLong())         return true;      }    }  }  return false;}  }
class C{  public void println(String message){  System.err.println(prefix + ": " + message);}  }
class C{  public static void writeln(double d,boolean flush){  write(d);  writelnWithFlush(flush);}  }
class C{  public final void testAddHelperTextId(){  CharSequence helperText=getContext().getText(android.R.string.cancel);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperTextId(android.R.string.cancel);  assertEquals(1,passwordEditText.getHelperTexts().size());  assertEquals(helperText,passwordEditText.getHelperTexts().iterator().next());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private List<StorageFile> discoverStorageFiles(StorageUnitEntity storageUnitEntity){  Map<String,StorageFileEntity> storageFileEntities=storageFileHelper.getStorageFileEntitiesMap(storageUnitEntity.getStorageFiles());  Assert.hasText(storageUnitEntity.getDirectoryPath(),"Business object data has no storage directory path which is required for auto-discovery of storage files.");  String directoryPath=storageUnitEntity.getDirectoryPath();  String directoryPathWithTrailingSlash=StringUtils.appendIfMissing(directoryPath,"/");  List<String> registeredStorageFilePaths=storageFileDao.getStorageFilesByStorageAndFilePathPrefix(storageUnitEntity.getStorage().getName(),directoryPathWithTrailingSlash);  if (storageFileEntities.size() != registeredStorageFilePaths.size()) {    throw new IllegalArgumentException(String.format("Number of storage files (%d) already registered for the business object data in \"%s\" storage is not equal to " + "the number of registered storage files (%d) matching \"%s\" S3 key prefix in the same storage.",storageFileEntities.size(),storageUnitEntity.getStorage().getName(),registeredStorageFilePaths.size(),directoryPathWithTrailingSlash));  }  S3FileTransferRequestParamsDto params=storageHelper.getS3BucketAccessParams(storageUnitEntity.getStorage());  params.setS3KeyPrefix(directoryPathWithTrailingSlash);  Map<String,StorageFile> actualS3Keys=storageFileHelper.getStorageFilesMapFromS3ObjectSummaries(s3Service.listDirectory(params,true));  for (  Map.Entry<String,StorageFileEntity> entry : storageFileEntities.entrySet()) {    storageFileHelper.validateStorageFileEntity(entry.getValue(),params.getS3BucketName(),actualS3Keys,true);  }  actualS3Keys.keySet().removeAll(storageFileEntities.keySet());  Assert.notEmpty(actualS3Keys.keySet(),String.format("No unregistered storage files were discovered at s3://%s/%s location.",params.getS3BucketName(),directoryPathWithTrailingSlash));  return new ArrayList<>(actualS3Keys.values());}  }
class C{  public static int binarySearch(long[] array,int startIndex,int endIndex,long value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public static boolean verbose(){  return cVerbose.get();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.TRACE_STATE_ENTERED__STATE:    return state != null;}return super.eIsSet(featureID);}  }
class C{  @HLEFunction(nid=0xCF8E084D,version=150) public int sceNetAdhocctlExitGameMode(){  checkInitialized();  doDisconnect=true;  Modules.sceNetAdhocModule.hleExitGameMode();  return 0;}  }
class C{  @SuppressWarnings("unchecked") public Map<String,Object> toDiffableFieldMap(){  return (Map<String,Object>)TO_MAP_HELPER.apply(this);}  }
class C{  public static long assembleVarint(byte[] varintBytes,int varintLength,boolean removeLengthMask){  long varint=varintBytes[0] & 0xFFL;  if (removeLengthMask) {    varint&=~VARINT_LENGTH_MASKS[varintLength - 1];  }  for (int i=1; i < varintLength; i++) {    varint=(varint << 8) | (varintBytes[i] & 0xFFL);  }  return varint;}  }
class C{  public void resetTagDefinitions(){  mTagInfo=null;}  }
class C{  public BattleResults(final IBattle battle,final WhoWon scriptedWhoWon,final GameData data){  super(data);  m_battleRoundsFought=battle.getBattleRound();  m_remainingAttackingUnits=battle.getRemainingAttackingUnits();  m_remainingDefendingUnits=battle.getRemainingDefendingUnits();  m_whoWon=scriptedWhoWon;}  }
class C{  protected void onGc(E e){}  }
class C{  public static double popParameterDouble(){  return parametersDouble.pop();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static float logFunc(float x){  return 1f - (float)(Math.pow(LogBase,reverse(x))) / (LogBase);}  }
class C{  public SQLInvalidAuthorizationSpecException(){}  }
class C{  public double computeAverageLocal(int states[][],int j,int[] otherSourcesToDestOffsets){  initialise();  addObservations(states,j,otherSourcesToDestOffsets);  return computeAverageLocalOfObservations();}  }
class C{  public void score(int score){  this.score=score;}  }
class C{  protected FunctionExpressionImpl(){  super();}  }
class C{  public void add(double space,RectangleEdge edge){  ParamChecks.nullNotPermitted(edge,"edge");  if (edge == RectangleEdge.TOP) {    this.top+=space;  } else   if (edge == RectangleEdge.BOTTOM) {    this.bottom+=space;  } else   if (edge == RectangleEdge.LEFT) {    this.left+=space;  } else   if (edge == RectangleEdge.RIGHT) {    this.right+=space;  } else {    throw new IllegalStateException("Unrecognised 'edge' argument.");  }}  }
class C{  public Color32(){  super();  this.a=0;}  }
class C{  public UnsignedLong subtract(long decrement){  if (getValue() >= 0 && getValue() > decrement)   return valueOf(getValue() - decrement);  BigInteger bi=bigIntegerValue();  bi=bi.subtract(BigInteger.valueOf(decrement));  return new UnsignedLong(bi);}  }
class C{  public static final boolean isGregorianLeapYear(int gregorianYear){  return (((gregorianYear % 4) == 0) && (((gregorianYear % 100) != 0) || ((gregorianYear % 400) == 0)));}  }
class C{  @Override public OptionView build(){  return new OptionView(this);}  }
class C{  public static String computeMD5(String entity){  MessageDigest md5;  try {    md5=MessageDigest.getInstance("MD5");  } catch (  NoSuchAlgorithmException e) {    throw new IllegalArgumentException("An error occurred while getting the message digest",e);  }  return new String(md5.digest(entity.getBytes()),StandardCharsets.UTF_8);}  }
class C{  public void testRemoveDuplicateFilter(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    whereClause.addChild(new StatementPatternNode(new VarNode("s1"),new VarNode("p1"),new VarNode("o1"),null,Scope.DEFAULT_CONTEXTS));    final FunctionNode simpleFunctionNode1=FunctionNode.NE(new VarNode("s1"),new VarNode("s2"));    final FunctionNode simpleFunctionNode2=FunctionNode.NE(new VarNode("s1"),new VarNode("s2"));    final FunctionNode complexFunctionNode1=FunctionNode.OR(FunctionNode.NE(new VarNode("s1"),new VarNode("s2")),FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")})));    final FunctionNode complexFunctionNode2=FunctionNode.OR(FunctionNode.NE(new VarNode("s1"),new VarNode("s2")),FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")})));    final FunctionNode complexFunctionNode3=FunctionNode.OR(FunctionNode.NE(new VarNode("s1"),new VarNode("s2")),FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")})));    whereClause.addChild(new FilterNode(simpleFunctionNode1));    whereClause.addChild(new FilterNode(simpleFunctionNode2));    whereClause.addChild(new FilterNode(complexFunctionNode1));    whereClause.addChild(new FilterNode(complexFunctionNode2));    whereClause.addChild(new StatementPatternNode(new VarNode("s2"),new VarNode("p2"),new VarNode("o2"),null,Scope.DEFAULT_CONTEXTS));    whereClause.addChild(new FilterNode(complexFunctionNode3));    assertTrue(StaticAnalysis.isCNF(simpleFunctionNode1));    assertTrue(StaticAnalysis.isCNF(simpleFunctionNode2));    assertTrue(StaticAnalysis.isCNF(complexFunctionNode1));    assertTrue(StaticAnalysis.isCNF(complexFunctionNode2));    assertTrue(StaticAnalysis.isCNF(complexFunctionNode3));  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    whereClause.addChild(new StatementPatternNode(new VarNode("s1"),new VarNode("p1"),new VarNode("o1"),null,Scope.DEFAULT_CONTEXTS));    final FunctionNode simpleFunctionNode=FunctionNode.NE(new VarNode("s1"),new VarNode("s2"));    final FunctionNode complexFunctionNode=FunctionNode.OR(FunctionNode.NE(new VarNode("s1"),new VarNode("s2")),FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")})));    whereClause.addChild(new FilterNode(simpleFunctionNode));    whereClause.addChild(new StatementPatternNode(new VarNode("s2"),new VarNode("p2"),new VarNode("o2"),null,Scope.DEFAULT_CONTEXTS));    whereClause.addChild(new FilterNode(complexFunctionNode));    assertTrue(StaticAnalysis.isCNF(simpleFunctionNode));    assertTrue(StaticAnalysis.isCNF(complexFunctionNode));  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  @Override public String toString(){  return "Classification-RVM";}  }
class C{  public void add(RectListManager rlm){  if (rlm.size == 0)   return;  Rectangle[] dst=rects;  if (rects.length < (size + rlm.size)) {    dst=new Rectangle[size + rlm.size];  }  if (size == 0) {    System.arraycopy(rlm.rects,0,dst,size,rlm.size);    size=rlm.size;    bounds=null;    return;  }  Rectangle[] src1=rlm.rects;  int src1Sz=rlm.size;  int src1I=src1Sz - 1;  Rectangle[] src2=rects;  int src2Sz=size;  int src2I=src2Sz - 1;  int dstI=size + rlm.size - 1;  int x1=src1[src1I].x;  int x2=src2[src2I].x;  while (dstI >= 0) {    if (x1 <= x2) {      dst[dstI]=src2[src2I];      if (src2I == 0) {        System.arraycopy(src1,0,dst,0,src1I + 1);        break;      }      src2I--;      x2=src2[src2I].x;    } else {      dst[dstI]=src1[src1I];      if (src1I == 0) {        System.arraycopy(src2,0,dst,0,src2I + 1);        break;      }      src1I--;      x1=src1[src1I].x;    }    dstI--;  }  rects=dst;  size+=rlm.size;  bounds=null;}  }
class C{  private boolean addGroup(String fieldGroup,String fieldGroupType){  if (m_oldFieldGroup == null) {    m_oldFieldGroup="";    m_oldFieldGroupType="";  }  if (fieldGroup == null || fieldGroup.length() == 0 || fieldGroup.equals(m_oldFieldGroup))   return false;  if (m_tablist.get(fieldGroup) != null) {    return false;  }  if (fieldGroupType.equals(X_AD_FieldGroup.FIELDGROUPTYPE_Tab)) {    CPanel m_tab=new CPanel();    m_tab.setBackground(AdempierePLAF.getFormBackground());    String tpConstraints=defaultLayoutConstraints;    MigLayout layout=new MigLayout(tpConstraints);    layout.addLayoutCallback(callback);    m_tab.setLayout(layout);    m_tab.setName(fieldGroup);    CPanel dummy=new CPanel();    dummy.setLayout(new BorderLayout());    dummy.add(m_tab,BorderLayout.NORTH);    dummy.setName(m_tab.getName());    dummy.setBorder(BorderFactory.createEmptyBorder(10,12,0,12));    this.add(dummy);    m_tablist.put(fieldGroup,m_tab);  } else   if (fieldGroupType.equals(X_AD_FieldGroup.FIELDGROUPTYPE_Collapse)) {    CollapsiblePanel collapsibleSection=new CollapsiblePanel(fieldGroup);    JXCollapsiblePane m_tab=collapsibleSection.getCollapsiblePane();    m_tab.setAnimated(false);    m_tab.getContentPane().setBackground(AdempierePLAF.getFormBackground());    String cpConstraints=defaultLayoutConstraints;    cpConstraints+=", ins 0 0 n 0";    MigLayout layout=new MigLayout(cpConstraints);    layout.addLayoutCallback(callback);    collapsibleSection.setName(fieldGroup);    m_main.add(collapsibleSection,"newline, spanx, growx");    m_tab.setLayout(layout);    Component strut1=Box.createVerticalStrut(1);    strut1.setName("vstrut1" + fieldGroup);    Component strut2=Box.createVerticalStrut(1);    strut2.setName("vstrut2" + fieldGroup);    m_tab.add(new CLabel(""),"gap 0 0 0 0");    m_tab.add(strut1,"pushx, growx, gap 0 0 0 0");    m_tab.add(new CLabel(""),"");    m_tab.add(strut2,"pushx, growx, gap 0 0 0 0, wrap");    m_tablist.put(fieldGroup,collapsibleSection);  } else {    CLabel label=new CLabel(fieldGroup,CLabel.LEADING);    label.setFont(AdempierePLAF.getFont_Label().deriveFont(Font.BOLDITALIC,AdempierePLAF.getFont_Label().getSize2D()));    m_main.add(label,"newline, alignx leading");    m_main.add(new JSeparator(),"newline, spanx, growx");  }  m_oldFieldGroup=fieldGroup;  m_oldFieldGroupType=fieldGroupType;  return true;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  if (options != null) {    sb.append(options);    sb.append(" ");  }  sb.append(" ; payload ");  sb.append(getPayloadSize());  sb.append(", xrcode ");  sb.append(getExtendedRcode());  sb.append(", version ");  sb.append(getVersion());  sb.append(", flags ");  sb.append(getFlags());  return sb.toString();}  }
class C{  public static String returnSuccess(HttpServletRequest request,HttpServletResponse response){  return "success";}  }
class C{  public Tuple<Boolean,Timestamp> isMacBanned(final String mac){  boolean found=false;  boolean expired=false;  Timestamp banTill=null;  final String sql="select mac, ban_till from banned_macs where mac = ?";  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement(sql);    ps.setString(1,mac);    final ResultSet rs=ps.executeQuery();    found=rs.next();    if (found) {      banTill=rs.getTimestamp(2);      if (banTill != null && banTill.getTime() < System.currentTimeMillis()) {        s_logger.fine("Ban expired for:" + mac);        expired=true;      }    }    rs.close();    ps.close();  } catch (  final SQLException sqle) {    s_logger.info("Error for testing banned mac existence:" + mac + " error:"+ sqle.getMessage());    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }  if (expired) {    removeBannedMac(mac);    return Tuple.of(false,banTill);  }  return Tuple.of(found,banTill);}  }
class C{  @Override public double nextPathAvailable(){  return Double.MAX_VALUE;}  }
class C{  @SuppressWarnings("unchecked") private Collection<RelationSetDescriptor> loadRelationSets(ObjectXmlPersist persist,IFile file) throws IOException {  return (Collection<RelationSetDescriptor>)persist.load(file.getLocationURI());}  }
class C{  @Override public void restoreState(FacesContext facesContext,Object state){  Object[] stateArray=(Object[])state;  validatorId=(String)stateArray[0];}  }
class C{  public ConvertAnonymousDescriptor(){  super(IJavaRefactorings.CONVERT_ANONYMOUS);}  }
class C{  public Import createImport(){  ImportImpl import_=new ImportImpl();  return import_;}  }
class C{  public static void clearRange(ByteBuffer buffer,int start,int end){  putRange(buffer,start,end,(byte)0x00);}  }
class C{  public RefactoringTickProvider(int checkInitialConditionsTicks,int checkFinalConditionsTicks,int createChangeTicks,int initializeChangeTicks){  Assert.isTrue(checkInitialConditionsTicks >= 0 && checkFinalConditionsTicks >= 0 && createChangeTicks >= 0 && initializeChangeTicks >= 0);  fValues=new int[4];  fValues[CHECK_INITIAL_CONDITIONS]=checkInitialConditionsTicks;  fValues[CHECK_FINAL_CONDITIONS]=checkFinalConditionsTicks;  fValues[CREATE_CHANGE]=createChangeTicks;  fValues[INITIALIZE_CHANGE]=initializeChangeTicks;}  }
class C{  static public void assertEquals(char expected,char actual){  assertEquals(null,expected,actual);}  }
class C{  public void write(CharSequence csq) throws IOException {  if (_outputStream == null)   throw new IOException("Writer closed");  final int length=csq.length();  for (int i=0; i < length; ) {    char c=csq.charAt(i++);    if (c < 0x80) {      _bytes[_index]=(byte)c;      if (++_index >= _bytes.length) {        flushBuffer();      }    } else {      write(c);    }  }}  }
class C{  public void testVerboseFSNoSuchFileException() throws IOException {  Path dir=wrap(createTempDir());  try {    AsynchronousFileChannel.open(dir.resolve("doesNotExist.rip"));    fail("did not hit exception");  } catch (  NoSuchFileException nsfe) {  }  try {    FileChannel.open(dir.resolve("doesNotExist.rip"));    fail("did not hit exception");  } catch (  NoSuchFileException nsfe) {  }  try {    Files.newByteChannel(dir.resolve("stillopen"));    fail("did not hit exception");  } catch (  NoSuchFileException nsfe) {  }}  }
class C{  public CastExpression(String typeName){  this.typeName=typeName;}  }
class C{  private static String escapeExcludedChars(String unescaped){  final StringBuilder escaped=new StringBuilder();  for (int i=0; i < unescaped.length(); i++) {    char c=unescaped.charAt(i);    if (!isUnreserved(c) && !reserved.contains(c)) {      escaped.append("%" + Integer.toHexString((int)c));    } else {      escaped.append(c);    }  }  return escaped.toString();}  }
class C{  public TreeLayout(Forest<V,E> g,int distx){  this(g,distx,DEFAULT_DISTY);}  }
class C{  public boolean hasMoreTokens(){  return index < length;}  }
class C{  public static Object coerceType(Class<?> type,Object value){  return coerceTypeImpl(type,value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.712 -0400",hash_original_method="17BEC7AD4EF43697B3AF7D584BCB72F9",hash_generated_method="3D2CC343A41576EE2BAAF63930DC03F0") private Node tryAppend(Node s,boolean haveData){  for (Node t=tail, p=t; ; ) {    Node n, u;    if (p == null && (p=head) == null) {      if (casHead(null,s))       return s;    } else     if (p.cannotPrecede(haveData))     return null; else     if ((n=p.next) != null)     p=p != t && t != (u=tail) ? (t=u) : (p != n) ? n : null; else     if (!p.casNext(null,s))     p=p.next; else {      if (p != t) {        while ((tail != t || !casTail(t,s)) && (t=tail) != null && (s=t.next) != null && (s=s.next) != null && s != t)         ;      }      return p;    }  }}  }
class C{  public String unZipIt(String zipFile,String outputFolder){  byte[] buffer=new byte[1024];  String jsonfile="";  try {    File folder=new File(OUTPUT_FOLDER);    if (!folder.exists()) {      folder.mkdir();    }    ZipInputStream zis=new ZipInputStream(new FileInputStream(zipFile));    ZipEntry ze=zis.getNextEntry();    while (ze != null) {      String fileName=ze.getName();      File newFile=new File(outputFolder + File.separator + fileName);      LOGGER.info("file unzip : " + newFile.getAbsoluteFile());      new File(newFile.getParent()).mkdirs();      if (ze.isDirectory()) {        newFile.mkdirs();      } else {        FileOutputStream fos=new FileOutputStream(newFile);        int len;        while ((len=zis.read(buffer)) > 0) {          fos.write(buffer,0,len);        }        fos.close();      }      ze=zis.getNextEntry();    }    zis.closeEntry();    zis.close();    LOGGER.info("Done");    String temp;    BufferedReader br=null;    br=new BufferedReader(new FileReader(outputFolder + "/process.json"));    while ((temp=br.readLine()) != null) {      jsonfile=jsonfile + temp;      LOGGER.info(jsonfile);    }    LOGGER.info("final string is" + jsonfile);  } catch (  IOException ex) {    LOGGER.info(ex);  }  return jsonfile;}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Map filterMap){  return getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);}  }
class C{  public void streamResult(OutputStream os,HeadersAmp headers,String address,long qId,int sequence,List<Object> values,Throwable exn,boolean isComplete) throws IOException {  init(os);  OutH3 out=_out;  if (out == null) {    return;  }  if (log.isLoggable(_level)) {    log.log(_level,"hamp-stream-result-w " + values + ","+ isComplete+ " (in "+ this+ ")"+ "\n  {id:"+ qId+ " to:"+ address+ ", "+ headers+ ","+ os+ "}");  }  try {    out.writeLong(MessageTypeHamp.STREAM_RESULT.ordinal());    writeHeaders(out,headers);    writeToAddress(out,address);    out.writeLong(qId);    out.writeLong(sequence);    out.writeObject(values);    out.writeObject(exn);    out.writeBoolean(isComplete);    out.flush();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  public TextBuilder(){  _high[0]=_low;}  }
class C{  public int hashCode(){  return hash;}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(getAccessFlags());}  }
class C{  public boolean contains(Collection<EntityLoadInfo> collection,Entity entity){  Preconditions.checkNotNullArgument(collection,"collection is null");  Preconditions.checkNotNullArgument(entity,"entity is null");  MetaClass metaClass=metadata.getClassNN(entity.getClass());  for (  EntityLoadInfo info : collection) {    if (metaClass.equals(info.getMetaClass()) && entity.getId().equals(info.getId()))     return true;  }  return false;}  }
class C{  public void drawBoard(Graphics g,TicTacToeBoard board){  if (board == null)   return;  Font f=g.getFont();  if (f.getSize() != 36) {    f=new Font(f.getFamily(),Font.PLAIN,36);    g.setFont(f);  }  int width=CELLSIZE * board.numColumns() + INSET * (board.numColumns() - 1);  int height=CELLSIZE * board.numRows() + INSET * (board.numRows() - 1);  g.setColor(Color.lightGray);  g.fillRect(OFFSET_X,OFFSET_Y,width,height);  g.setColor(Color.black);  for (int i=1; i < 3; i++) {    g.drawLine(OFFSET_X + INSET + CELLSIZE * i,OFFSET_Y + INSET,OFFSET_X + INSET + CELLSIZE * i,height);    g.drawLine(OFFSET_X + INSET,OFFSET_Y + 10 + CELLSIZE * i,width,OFFSET_Y + INSET + CELLSIZE * i);  }  if (board != null) {    for (int c=0; c < board.numColumns(); c++) {      for (int r=0; r < board.numRows(); r++) {        drawSpot(g,c,r,board.get(c,r));      }    }  }}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public ColumnFamily<String,String> defaultColumnFamily(){  return defaultColumnFamily;}  }
class C{  public RefactoringSessionTransformer(final boolean projects){  fProjects=projects;}  }
class C{  private DeletedContacts(){}  }
class C{  public String evalString(INode state){  EightPuzzleNode node=(EightPuzzleNode)state;  int Pn=0;  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {      if (node.isEmpty(r,c)) {        continue;      }      int digit=node.cell(r,c);      Pn+=Math.abs(diffs[digit][0] - r);      Pn+=Math.abs(diffs[digit][1] - c);    }  }  int Sn=0;  if (!node.isEmpty(1,1)) {    Sn=1;  }  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {      int idx=r * 3 + c;      if (r == 1 && c == 1) {        continue;      }      if (node.cell(r,c) == EightPuzzleNode.EmptyMark) {        continue;      }      if (succ[node.cell(r,c)] != node.cell(succs[idx][0],succs[idx][1])) {        Sn+=2;      }    }  }  int gn=0;  String eval="";  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    if (t.depth != 0) {      gn=t.depth;      eval=eval + gn + "+";    }  }  return eval + Pn + "+3*"+ Sn+ "="+ (gn + Pn + 3 * Sn);}  }
class C{  private void basicFailureTest(String connectionEncoding,String columnName,String testInput,Matcher<?> exceptionExpectation) throws Exception {  Connection connection=getConnection(connectionEncoding);  try {    expectedException.expect(exceptionExpectation);    insertString(connection,columnName,testInput,DEFAULT_ID);  }  finally {    connection.close();  }}  }
class C{  public static boolean hostSupportsVariableReturn(Bundle extrasFromHost){  return hostSupports(extrasFromHost,EXTRA_HOST_CAPABILITY_CONDITION_RETURN_VARIABLES);}  }
class C{  public int computePastValue(int[] x,int t){  int pastVal=0;  for (int p=0; p < k; p++) {    pastVal*=numDiscreteValues;    pastVal+=x[t - k + 1 + p];  }  return pastVal;}  }
class C{  public IdentifiableElement basicGetId(){  return id;}  }
class C{  public boolean canBreakOnModuleUnload(){  return canBreakOnModuleUnload;}  }
class C{  public String normalizeSystemName(String systemName){  return (AcelaAddress.normalizeSystemName(systemName));}  }
class C{  public ParsingTables(String spec){  this(new ByteArrayInputStream(decode(spec)));}  }
class C{  public int size(){  return all.size();}  }
class C{  public static boolean namespaceIsAbsolute(String namespaceValue){  if (namespaceValue.length() == 0) {    return true;  }  return namespaceValue.indexOf(':') > 0;}  }
class C{  public void renderItems(){  filterItems();}  }
class C{  public void removeSwipeListener(SwipeListener listener){  if (mListeners == null) {    return;  }  mListeners.remove(listener);}  }
class C{  public final Class toClass(ClassLoader loader) throws CannotCompileException {  return getClassPool().toClass(this,loader);}  }
class C{  public void run(){  long last=0;  while (isConnected()) {    try {      Thread.sleep(250);    } catch (    InterruptedException ie) {    }    try {      long current=m_protocol.messagesReceived();      long delta=last - current;      last=current;      if (!m_lastResponse || (!isSuspended() && delta > 5))       throw new NotSuspendedException();      for (      Isolate isolate : m_manager.getIsolates()) {        int isolateId=isolate.getId();        if (isolateId != Isolate.DEFAULT_ID && !isWorkerSuspended(isolateId) && delta > 5) {          throw new NotSuspendedException();        }        int count=m_manager.getSwfInfoCount(isolateId);        for (int i=0; i < count; i++) {          DSwfInfo info=m_manager.getSwfInfo(i,isolateId);          if (info == null || info.isUnloaded() || info.isPopulated() || (info.getVmVersion() > 0))           continue;          info.getSwdSize(this);          if (info.getVmVersion() > 0) {            info.setPopulated();            continue;          }          if (!info.isSwdLoading() && !info.isUnloaded()) {            if (info.getSwf() == null && !info.isUnloaded())             info.setSwf(requestSwf(i));            if (info.getSwd() == null && !info.isUnloaded())             info.setSwd(requestSwd(i));            try {              if (!info.isUnloaded())               info.parseSwfSwd(m_manager);            } catch (            Throwable e) {              if (Trace.error) {                Trace.trace("Error while parsing swf/swd '" + info.getUrl() + "'. Giving up and marking it processed");                e.printStackTrace();              }              info.setPopulated();            }          }        }      }    } catch (    InProgressException ipe) {    }catch (    NoResponseException nre) {    }catch (    NotSuspendedException nse) {    }catch (    Exception e) {      if (Trace.error) {        Trace.trace("Exception in background swf/swd processing thread");        e.printStackTrace();      }    }  }}  }
class C{  @Override public String toString(){  String result="";  for (  final String s : entries) {    result=result.concat(s).concat(",");  }  return result;}  }
class C{  public void addExtensionMethod(String extensionMethod){  if (extensionMethod.equals(Request.NOTIFY)) {    if (isLoggingEnabled())     stackLogger.logDebug("NOTIFY Supported Natively");  } else {    dialogCreatingMethods.add(extensionMethod.trim().toUpperCase());  }}  }
class C{  @Override public String toString(){  return new String(buf,0,count);}  }
class C{  public void addLayersToBeanContext(List<Layer> layers){  BeanContext bc=getBeanContext();  if (bc == null || layers == null) {    return;  }  for (  Layer layer : layers) {    if (layer.getAddToBeanContext() && layer.getBeanContext() == null) {      bc.add(layer);    }  }}  }
class C{  protected void doStartServer(String[] theArgs) throws Exception {}  }
class C{  private void preciseOutput(String output){  Node asHtml=html(output);  Node asXml=xml(output);  assertIdenticalRender(asHtml,asXml);  assertIdenticalStructure(asHtml,asXml);}  }
class C{  private static Element parseMultiSelectNode(String name,String itemName,Element selectItemNode,Element controlNode,Element bodyNode,Element labelNode,Element bindingNode,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems,Hashtable<String,Element> repeatControls,Element modelNode){  if (controlNode.getChildCount() == 0) {    controlNode.setName(CONTROL_SELECT);    if (!(problemList.containsKey(name) || problemListItems.containsKey(name)))     controlNode.setAttribute(null,ATTRIBUTE_BIND,name);    controlNode.setAttribute(null,ATTRIBUTE_APPEARANCE,Context.getAdministrationService().getGlobalProperty("xforms.multiSelectAppearance"));    labelNode=bodyNode.createElement(NAMESPACE_XFORMS,null);    labelNode.setName(NODE_LABEL);    controlNode.addChild(Element.ELEMENT,labelNode);    addRepeatControlNode(name,controlNode,bodyNode,problemList,problemListItems,repeatControls,NODE_XFORMS_VALUE,modelNode,bindingNode);    bindingNode.setAttribute(null,ATTRIBUTE_TYPE,DATA_TYPE_TEXT);  }  buildMultipleSelectItemNode(itemName,selectItemNode,controlNode);  return labelNode;}  }
class C{  public boolean endsWith(String suffix){  return str().endsWith(suffix);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  static public void stepSucceeded(String stepId,String warningMessage) throws WorkflowException {  WorkflowService.completerStepSucceeded(stepId,warningMessage);}  }
class C{  public AbstractMRMessage createInitPacket(){  return null;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);  layout_progress.setVisibility(View.GONE);  txt_progresstext.setVisibility(View.GONE);}  }
class C{  public TObjectIntHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void addChangeListener(ChangeListener l){  m_ChangeListeners.add(l);}  }
class C{  protected void sendTestMessage(SerialMessage m,SerialListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK) {    if (this.getGankType() == null) {      this.keyBackProcessScreenLandscape();    } else     if (GankTypeDict.urlType2TypeDict.get(this.getGankType()) != GankType.video) {      this.keyBackProcessScreenLandscape();    } else {      if (this.goBack) {        this.finish();      } else {        this.goBack=true;        Message msg=this.mHandler.obtainMessage();        msg.what=MSG_WHAT_RESET_GO_BACK;        this.mHandler.sendMessageDelayed(msg,RESET_GO_BACK_INTERVAL);        ToastUtils.show(this,this.getString(R.string.common_go_back_tip),ToastUtils.LENGTH_SHORT);      }    }    return true;  }  return super.onKeyDown(keyCode,event);}  }
class C{  public void mouseExited(MouseEvent e){  if (Debug.debugging("mousemodedetail")) {    Debug.output(getID() + "|NavMouseMode.mouseExited()");  }  super.mouseExited(e);  if (theMap == e.getSource()) {    autoZoom=false;    point2=null;    theMap.repaint();  }}  }
class C{  void syncProgress(SeekBar seekBar){  int progress=seekBar.getProgress();  if (progress != mProgress - mPreferredMin) {    if (callChangeListener(progress)) {      setProgress(progress + mPreferredMin,false);    } else {      seekBar.setProgress(mProgress - mPreferredMin);    }  }}  }
class C{  @Override public ResourceTicketEntity subdivide(String resourceTicketId,List<QuotaLineItemEntity> limits) throws ExternalException {  ResourceTicketEntity resourceTicketEntity=findById(resourceTicketId);  if (!StringUtils.isBlank(resourceTicketEntity.getParentId())) {    throw new ExternalException(ErrorCode.INTERNAL_ERROR);  }  Set<String> limitKeys=new HashSet<>();  for (  QuotaLineItemEntity qli : limits) {    limitKeys.add(qli.getKey());  }  Set<String> difference=Sets.difference(resourceTicketEntity.getLimitKeys(),limitKeys);  if (!difference.isEmpty()) {    throw new InvalidResourceTicketSubdivideException(difference);  }  ResourceTicketService.State resourceTicket=new ResourceTicketService.State();  resourceTicket.parentId=resourceTicketId;  for (  QuotaLineItemEntity quotaLineItemEntity : limits) {    QuotaLineItem quotaLineItem=new QuotaLineItem();    quotaLineItem.setKey(quotaLineItemEntity.getKey());    quotaLineItem.setValue(quotaLineItemEntity.getValue());    quotaLineItem.setUnit(quotaLineItemEntity.getUnit());    resourceTicket.limitMap.put(quotaLineItemEntity.getKey(),quotaLineItem);    if (!resourceTicket.usageMap.containsKey(quotaLineItem.getKey())) {      resourceTicket.usageMap.put(quotaLineItem.getKey(),new QuotaLineItem(quotaLineItem.getKey(),0.0,quotaLineItem.getUnit()));    }  }  com.vmware.xenon.common.Operation result=xenonClient.post(ResourceTicketServiceFactory.SELF_LINK,resourceTicket);  ResourceTicketService.State createdResourceTicket=result.getBody(ResourceTicketService.State.class);  try {    consumeQuota(resourceTicketId,new QuotaCost(limits));  } catch (  QuotaException qe) {    logger.warn("Subdivide of resource ticket id {} failed",resourceTicketId);    delete(ServiceUtils.getIDFromDocumentSelfLink(createdResourceTicket.documentSelfLink));    throw qe;  }catch (  Throwable e) {    logger.warn("Subdivide of resource ticket id {} failed",resourceTicketId);    delete(ServiceUtils.getIDFromDocumentSelfLink(createdResourceTicket.documentSelfLink));    throw new XenonRuntimeException(e);  }  return convertToResourceTicketEntity(createdResourceTicket);}  }
class C{  public void startElement(String qName) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(qName);}  }
class C{  private void postPlugin(boolean isPing) throws IOException {  final StringBuilder data=new StringBuilder();  data.append(encode("guid")).append('=').append(encode(BungeeCord.getInstance().config.getUuid()));  encodeDataPair(data,"version",ProxyServer.getInstance().getVersion());  encodeDataPair(data,"server","0");  encodeDataPair(data,"players",Integer.toString(ProxyServer.getInstance().getOnlineCount()));  encodeDataPair(data,"revision",String.valueOf(REVISION));  if (isPing) {    encodeDataPair(data,"ping","true");  }  URL url=new URL(BASE_URL + String.format(REPORT_URL,encode("Waterfall")));  URLConnection connection;  connection=url.openConnection();  connection.setDoOutput(true);  final BufferedReader reader;  final String response;  try (OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream())){    writer.write(data.toString());    writer.flush();    reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));    response=reader.readLine();  }   reader.close();  if (response == null || response.startsWith("ERR")) {    throw new IOException(response);  }}  }
class C{  public void cancel(){  mHandler.post(mHide);}  }
class C{  public WindowsWebView(Dimension frameSize){  if (frameSize == null) {    String message=Logging.getMessage("nullValue.SizeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!Configuration.isWindowsOS()) {    String message=Logging.getMessage("NativeLib.UnsupportedOperatingSystem","Windows WebView",System.getProperty("os.name"));    Logging.logger().severe(message);    throw new UnsupportedOperationException(message);  }  this.frameSize=frameSize;  try {    instances.incrementAndGet();    this.ensureMessageLoopRunning();    this.webViewWindowPtr=WindowsWebViewJNI.newWebViewWindow(webViewMessageLoop);    if (this.webViewWindowPtr == 0) {      String message=Logging.getMessage("WebView.NativeExceptionInitializingWebView");      Logging.logger().severe(message);      throw new WWRuntimeException(message);    }    WindowsWebViewJNI.setFrameSize(this.webViewWindowPtr,this.frameSize.width,this.frameSize.height);    this.observerPtr=WindowsWebViewJNI.newNotificationAdapter(this);    WindowsWebViewJNI.addWindowUpdateObserver(this.webViewWindowPtr,observerPtr);  } catch (  RuntimeException e) {    instances.decrementAndGet();    this.handleWebViewCreationError();    throw e;  }catch (  Error e) {    instances.decrementAndGet();    this.handleWebViewCreationError();    throw e;  }}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public void test_GetCofactor(){  assertEquals("wrong cofactor was returned",1,ecps.getCofactor());}  }
class C{  private static View findView(final IDatabase database,final INaviView internalView,final List<Database> databases){  final Database apiDatabase=ObjectFinders.getObject(database,databases);  View view=null;  for (  final Module m : apiDatabase.getModules()) {    if (!m.isLoaded()) {      continue;    }    view=ObjectFinders.getObject(internalView,m.getViews());    if (view != null) {      return view;    }  }  for (  final Project project : apiDatabase.getProjects()) {    if (!project.isLoaded()) {      continue;    }    view=ObjectFinders.getObject(internalView,project.getViews());    if (view != null) {      return view;    }  }  throw new IllegalStateException("Error: Unknown view");}  }
class C{  public T caseThrowStatement(ThrowStatement object){  return null;}  }
class C{  public WampClientBuilder withSerializations(WampSerialization[] serializations) throws ApplicationError {  this.serializations.clear();  if (serializations == null)   return this;  for (  WampSerialization serialization : serializations) {    if (serialization == WampSerialization.Invalid)     throw new ApplicationError(ApplicationError.INVALID_SERIALIZATIONS);    if (!this.serializations.contains(serialization))     this.serializations.add(serialization);  }  return this;}  }
class C{  public boolean isDomainGridlinesVisible(){  return this.domainGridlinesVisible;}  }
class C{  private void assignKeyboardShortcutIntent(){  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_miscellaneous_key);  final Preference keyboardShortcutPref=findPreferenceByResId(R.string.pref_category_manage_keyboard_shortcut_key);  if ((category == null) || (keyboardShortcutPref == null)) {    return;  }  if (Build.VERSION.SDK_INT < KeyComboManager.MIN_API_LEVEL) {    category.removePreference(keyboardShortcutPref);    return;  }  final Intent labelManagerIntent=new Intent(this,TalkBackKeyboardShortcutPreferencesActivity.class);  labelManagerIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  labelManagerIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  keyboardShortcutPref.setIntent(labelManagerIntent);}  }
class C{  public static void initialize(File helpDir) throws HelpException {  if (helpDir.isDirectory() && helpDir.exists())   HelpManager.helpDir=helpDir; else   throw new HelpException("Help directory is missing or invalid: " + helpDir.getAbsolutePath(),null);}  }
class C{  @Override public void load(Context context,float startMidX,float startMidY){  Resources res=context.getResources();  getMetrics(res);  mStartMidX=startMidX;  mStartMidY=startMidY;  mDrawable=res.getDrawable(mResourceId);  mWidth=mDrawable.getIntrinsicWidth();  mHeight=mDrawable.getIntrinsicHeight();  float centerX;  float centerY;  float scaleX;  float scaleY;  float angle;  if (mFirstLoad) {    centerX=startMidX;    centerY=startMidY;    float scaleFactor=(float)(Math.max(mDisplayWidth,mDisplayHeight) / (float)Math.max(mWidth,mHeight) * INITIAL_SCALE_FACTOR);    scaleX=scaleY=scaleFactor;    angle=0.0f;    mFirstLoad=false;  } else {    centerX=mCenterX;    centerY=mCenterY;    scaleX=mScaleX;    scaleY=mScaleY;    angle=mAngle;  }  setPos(centerX,centerY,scaleX,scaleY,mAngle);}  }
class C{  public boolean observed(String form){  return table.containsKey(form);}  }
class C{  public void hertelMehlhorn(){  int vSize=this.vertices.size();  int i=vSize * 2;  while (i < this.edges.size()) {    DoubleEdgeListHalfEdge e=this.edges.get(i);    DoubleEdgeListVertex v1=e.origin;    DoubleEdgeListVertex v0=e.getPrevious().origin;    DoubleEdgeListVertex v2=e.twin.next.next.origin;    if (isReflex(v0,v1,v2)) {      i+=2;      continue;    }    v1=e.twin.origin;    v0=e.twin.getPrevious().origin;    v2=e.next.next.origin;    if (isReflex(v0,v1,v2)) {      i+=2;      continue;    }    this.removeHalfEdges(i,e);  }}  }
class C{  public static Thread startDaemon(Thread self,Closure closure){  return createThread(null,true,closure);}  }
class C{  @ObjectiveCName("tupleWithT1:withT2:") public static <T1,T2>Promise<Tuple2<T1,T2>> tuple(Promise<T1> t1,Promise<T2> t2){  return PromisesArray.ofPromises((Promise<Object>)t1,(Promise<Object>)t2).zip().map(null);}  }
class C{  protected boolean canTriggerWalking(){  return false;}  }
class C{  public void testNextIntBounded2(){  SplittableRandom sr=new SplittableRandom();  for (int least=-15485863; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=49979687) {      int f=sr.nextInt(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      int j;      while (i < NCALLS && (j=sr.nextInt(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public BusinessObjectDefinitionEntity createBusinessObjectDefinitionEntity(String namespaceCode,String businessObjectDefinitionName,String dataProviderName,String businessObjectDefinitionDescription,List<Attribute> attributes){  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(namespaceCode);  if (namespaceEntity == null) {    namespaceEntity=namespaceDaoTestHelper.createNamespaceEntity(namespaceCode);  }  DataProviderEntity dataProviderEntity=dataProviderDao.getDataProviderByName(dataProviderName);  if (dataProviderEntity == null) {    dataProviderEntity=dataProviderDaoTestHelper.createDataProviderEntity(dataProviderName);  }  return createBusinessObjectDefinitionEntity(namespaceEntity,businessObjectDefinitionName,dataProviderEntity,businessObjectDefinitionDescription,attributes);}  }
class C{  @Override public BufferedImage dataToRGB(final byte[] data,final int w,final int h){  BufferedImage image;  try {    image=createImage(w,h,data);  } catch (  final Exception ee) {    image=null;    LogWriter.writeLog("Couldn't convert Separation colorspace data: " + ee);  }  return image;}  }
class C{  public String readString(String key,String defaultValue){  return preferences.getString(key,defaultValue);}  }
class C{  public String toString(){  String str=("---- Running ----\n");  int i=1;  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {    ResourceThread t=(ResourceThread)e.nextElement();    if (t.imageUrl != null) {      str+="#" + i + ": "+ t.imageUrl+ "\n";    } else {      str+="#" + i + ": CSS - "+ t.cssDocInfo.getUrl()+ "\n";    }    i++;  }  i=1;  str+="Queue:\n";  for (Enumeration e=queue.elements(); e.hasMoreElements(); ) {    ResourceThread t=(ResourceThread)e.nextElement();    if (t.imageUrl != null) {      str+="#" + i + ": "+ t.imageUrl+ "\n";    } else {      str+="#" + i + ": CSS - "+ t.cssDocInfo.getUrl()+ "\n";    }    i++;  }  str+="---- count:" + threadCount + " ----\n";  return str;}  }
class C{  public byte value(){  return value;}  }
class C{  protected void reportProgress(){  String[] messages=ToolIO.getAllMessages();  for (; reported < messages.length; reported++) {    outputListener.streamAppended(messages[reported],null);  }}  }
class C{  public RegisterSpecList withOffset(int delta){  int sz=size();  if (sz == 0) {    return this;  }  RegisterSpecList result=new RegisterSpecList(sz);  for (int i=0; i < sz; i++) {    RegisterSpec one=(RegisterSpec)get0(i);    if (one != null) {      result.set0(i,one.withOffset(delta));    }  }  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  final boolean tryMatchData(){  Object x=item;  if (x != null && x != this && casItem(x,null)) {    LockSupport.unpark(waiter);    return true;  }  return false;}  }
class C{  public TStructuralType createTStructuralType(){  TStructuralTypeImpl tStructuralType=new TStructuralTypeImpl();  return tStructuralType;}  }
class C{  public VCardReader(File file,VCardVersion defaultVersion) throws FileNotFoundException {  this(new BufferedReader(new FileReader(file)),defaultVersion);}  }
class C{  @Override public Object radioBut(final FormObject form){  final JRadioButton radioBut=new JRadioButton();  setupButton(radioBut,form);  setupUniversalFeatures(radioBut,form);  final boolean[] flags=form.getFieldFlags();  if ((flags != null) && (flags[FormObject.READONLY_ID])) {    radioBut.setEnabled(false);    radioBut.setDisabledIcon(radioBut.getIcon());    radioBut.setDisabledSelectedIcon(radioBut.getSelectedIcon());  }  return radioBut;}  }
class C{  public void countDown(){  sync.releaseShared(1);}  }
class C{  public static Pointer to(double values[]){  return new Pointer(DoubleBuffer.wrap(values));}  }
class C{  public static final void checkCoreVersusAndroidVersions(String androidVersion){  logVersionWarnings("core",coreVersion,"android",androidVersion);}  }
class C{  public static int oddColumn1s(int[][] m){  for (int i=0; i < m.length; i++) {    int count=0;    for (int j=0; j < m.length; j++) {      if (m[j][i] == 1)       count++;    }    if (count % 2 != 0)     return i;  }  return -1;}  }
class C{  @Override public void modifyNonstaticJPedalParameters(final Map values) throws PdfException {  options.set(values);  if (values.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {  }}  }
class C{  public OverpassFilterQuery area(){  applySeparator();  builder.append("area");  return this;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  @Override public V remove(@NotNull Object key){  K kKey=(K)key;  int hash=getHashingStrategy().computeHashCode(kKey);  return remove(kKey,hash,null);}  }
class C{  public Key engineGetKey(String alias,char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException {  Entry entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  Key key=null;  if (entry == null || (!(entry instanceof KeyEntry))) {    return null;  }  byte[] encrBytes=null;  if (entry instanceof PrivateKeyEntry) {    encrBytes=((PrivateKeyEntry)entry).protectedPrivKey;  } else   if (entry instanceof SecretKeyEntry) {    encrBytes=((SecretKeyEntry)entry).protectedSecretKey;  } else {    throw new UnrecoverableKeyException("Error locating key");  }  byte[] encryptedKey;  AlgorithmParameters algParams;  ObjectIdentifier algOid;  try {    EncryptedPrivateKeyInfo encrInfo=new EncryptedPrivateKeyInfo(encrBytes);    encryptedKey=encrInfo.getEncryptedData();    DerValue val=new DerValue(encrInfo.getAlgorithm().encode());    DerInputStream in=val.toDerInputStream();    algOid=in.getOID();    algParams=parseAlgParameters(algOid,in);  } catch (  IOException ioe) {    UnrecoverableKeyException uke=new UnrecoverableKeyException("Private key not stored as " + "PKCS#8 EncryptedPrivateKeyInfo: " + ioe);    uke.initCause(ioe);    throw uke;  }  try {    byte[] keyInfo;    while (true) {      try {        SecretKey skey=getPBEKey(password);        Cipher cipher=Cipher.getInstance(mapPBEParamsToAlgorithm(algOid,algParams));        cipher.init(Cipher.DECRYPT_MODE,skey,algParams);        keyInfo=cipher.doFinal(encryptedKey);        break;      } catch (      Exception e) {        if (password.length == 0) {          password=new char[1];          continue;        }        throw e;      }    }    DerValue val=new DerValue(keyInfo);    DerInputStream in=val.toDerInputStream();    int i=in.getInteger();    DerValue[] value=in.getSequence(2);    AlgorithmId algId=new AlgorithmId(value[0].getOID());    String keyAlgo=algId.getName();    if (entry instanceof PrivateKeyEntry) {      KeyFactory kfac=KeyFactory.getInstance(keyAlgo);      PKCS8EncodedKeySpec kspec=new PKCS8EncodedKeySpec(keyInfo);      key=kfac.generatePrivate(kspec);      if (debug != null) {        debug.println("Retrieved a protected private key (" + key.getClass().getName() + ") at alias '"+ alias+ "'");      }    } else {      byte[] keyBytes=in.getOctetString();      SecretKeySpec secretKeySpec=new SecretKeySpec(keyBytes,keyAlgo);      if (keyAlgo.startsWith("PBE")) {        SecretKeyFactory sKeyFactory=SecretKeyFactory.getInstance(keyAlgo);        KeySpec pbeKeySpec=sKeyFactory.getKeySpec(secretKeySpec,PBEKeySpec.class);        key=sKeyFactory.generateSecret(pbeKeySpec);      } else {        key=secretKeySpec;      }      if (debug != null) {        debug.println("Retrieved a protected secret key (" + key.getClass().getName() + ") at alias '"+ alias+ "'");      }    }  } catch (  Exception e) {    UnrecoverableKeyException uke=new UnrecoverableKeyException("Get Key failed: " + e.getMessage());    uke.initCause(e);    throw uke;  }  return key;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private void writeObject(final java.io.ObjectOutputStream out) throws IOException {  out.writeObject(inequalitySymbol);  out.writeLong(timeStamp);}  }
class C{  public static boolean isDefaultPeerName(final String name){  return name.startsWith("_anon");}  }
class C{  public MatrixSeriesCollection(){  this(null);}  }
class C{  public static Test suite(){  return (new TestSuite(InvalidateSessionITCase.class));}  }
class C{  public DaemonJvmLauncherFactory(List<String> additionalClasspathEntries){  this.additionalClasspathEntries=additionalClasspathEntries;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST:    setAnnotationList((ExpressionAnnotationList)null);  return;}super.eUnset(featureID);}  }
class C{  public static final Date nthWeekday(final int nth,final Weekday dayOfWeek,final int month,final int year){  QL.require(nth > 0,"zeroth day of week in a given (month, year) is undefined");  QL.require(nth < 6,"no more than 5 weekday in a given (month, year)");  final int m=month;  final int y=year;  final int dow=dayOfWeek.value();  final int first=new Date(1,m,y).weekday().value();  final int skip=nth - (dow >= first ? 1 : 0);  return new Date(1 + dow - first + skip * 7,m,y);}  }
class C{  public static Test suite(){  return (new TestSuite(HtmlUnitFacesITCase.class));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:57.404 -0500",hash_original_method="F6685E165800CF46F16D582CC6341EDA",hash_generated_method="EABE01545CF26607339D282129CDBAE3") public boolean isDone(){  return AnimationUtils.currentAnimationTimeMillis() > mAnimation.getStartTime() + mMaxDelay + mDuration;}  }
class C{  private ASN1Primitive profileToASN1Object() throws IOException {  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(certificateProfileIdentifier);  v.add(certificationAuthorityReference);  v.add(new DERApplicationSpecific(false,EACTags.CARDHOLDER_PUBLIC_KEY_TEMPLATE,publicKey));  v.add(certificateHolderReference);  v.add(certificateHolderAuthorization);  v.add(certificateEffectiveDate);  v.add(certificateExpirationDate);  return new DERApplicationSpecific(EACTags.CERTIFICATE_CONTENT_TEMPLATE,v);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  public void dumpNodes(Path webGraphDb,DumpType type,long topN,Path output,boolean asEff,NameType nameType,AggrType aggrType,boolean asSequenceFile) throws Exception {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  LOG.info("NodeDumper: starting at " + sdf.format(start));  Path nodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);  Configuration conf=getConf();  JobConf dumper=new NutchJob(conf);  dumper.setJobName("NodeDumper: " + webGraphDb);  FileInputFormat.addInputPath(dumper,nodeDb);  dumper.setInputFormat(SequenceFileInputFormat.class);  if (nameType == null) {    dumper.setMapperClass(Sorter.class);    dumper.setReducerClass(Sorter.class);    dumper.setMapOutputKeyClass(FloatWritable.class);    dumper.setMapOutputValueClass(Text.class);  } else {    dumper.setMapperClass(Dumper.class);    dumper.setReducerClass(Dumper.class);    dumper.setMapOutputKeyClass(Text.class);    dumper.setMapOutputValueClass(FloatWritable.class);  }  dumper.setOutputKeyClass(Text.class);  dumper.setOutputValueClass(FloatWritable.class);  FileOutputFormat.setOutputPath(dumper,output);  if (asSequenceFile) {    dumper.setOutputFormat(SequenceFileOutputFormat.class);  } else {    dumper.setOutputFormat(TextOutputFormat.class);  }  dumper.setNumReduceTasks(1);  dumper.setBoolean("inlinks",type == DumpType.INLINKS);  dumper.setBoolean("outlinks",type == DumpType.OUTLINKS);  dumper.setBoolean("scores",type == DumpType.SCORES);  dumper.setBoolean("host",nameType == NameType.HOST);  dumper.setBoolean("domain",nameType == NameType.DOMAIN);  dumper.setBoolean("sum",aggrType == AggrType.SUM);  dumper.setBoolean("max",aggrType == AggrType.MAX);  dumper.setLong("topn",topN);  if (asEff) {    dumper.set("mapred.textoutputformat.separator","=");  }  try {    LOG.info("NodeDumper: running");    JobClient.runJob(dumper);  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  long end=System.currentTimeMillis();  LOG.info("NodeDumper: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));}  }
class C{  public ArtistView(Context context,AttributeSet attrs){  super(context,attrs);  if (!isInEditMode()) {    init(context);  }}  }
class C{  public void testBadResponse() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  FakeSocket socket=new FakeSocket(false).withInputBytes("bad response".getBytes());  SocketRpcChannel rpcChannel=new SocketRpcChannel("host",-1,new FakeSocketFactory().returnsSocket(socket));  callAsync(rpcChannel,request,ErrorReason.IO_ERROR);  verifyRequestToSocket(request,socket);  assertNull(callSync(rpcChannel,request,ErrorReason.IO_ERROR));  verifyRequestToSocket(request,socket);}  }
class C{  public StartContainerParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public static boolean testRayTriangleFront(float originX,float originY,float originZ,float dirX,float dirY,float dirZ,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z,float epsilon){  float edge1X=v1X - v0X;  float edge1Y=v1Y - v0Y;  float edge1Z=v1Z - v0Z;  float edge2X=v2X - v0X;  float edge2Y=v2Y - v0Y;  float edge2Z=v2Z - v0Z;  float pvecX=dirY * edge2Z - dirZ * edge2Y;  float pvecY=dirZ * edge2X - dirX * edge2Z;  float pvecZ=dirX * edge2Y - dirY * edge2X;  float det=edge1X * pvecX + edge1Y * pvecY + edge1Z * pvecZ;  if (det < epsilon)   return false;  float tvecX=originX - v0X;  float tvecY=originY - v0Y;  float tvecZ=originZ - v0Z;  float u=(tvecX * pvecX + tvecY * pvecY + tvecZ * pvecZ);  if (u < 0.0f || u > det)   return false;  float qvecX=tvecY * edge1Z - tvecZ * edge1Y;  float qvecY=tvecZ * edge1X - tvecX * edge1Z;  float qvecZ=tvecX * edge1Y - tvecY * edge1X;  float v=(dirX * qvecX + dirY * qvecY + dirZ * qvecZ);  if (v < 0.0f || u + v > det)   return false;  float invDet=1.0f / det;  float t=(edge2X * qvecX + edge2Y * qvecY + edge2Z * qvecZ) * invDet;  return t >= epsilon;}  }
class C{  private void notifyProvisionalResponse(String transactionId,SipResponse response){  SipTransactionContext ctx=mTransactions.get(transactionId);  if (ctx == null) {    return;  }  boolean loggerActivated=sLogger.isActivated();  if (loggerActivated) {    sLogger.debug("Callback object found for transaction " + transactionId);  }  INotifySipProvisionalResponse callback=ctx.getCallbackSipProvisionalResponse();  if (callback != null && Response.RINGING == response.getStatusCode()) {    callback.handle180Ringing(response);  } else {    if (loggerActivated) {      sLogger.debug("By pass provisional response");    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SRuntimePackage.REFERENCE_SLOT__REFERENCE:    setReference((ExecutionSlot)null);  return;}super.eUnset(featureID);}  }
class C{  public GenericProcessingInstruction(String target,String data,AbstractDocument owner){  ownerDocument=owner;  setTarget(target);  setData(data);}  }
class C{  public final void testToString() throws InvalidKeySpecException, NoSuchAlgorithmException {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  CertPathBuilderResult r=new PKIXCertPathBuilderResult(new MyCertPath(testEncoding),ta,TestUtils.getPolicyTree(),testPublicKey);  assertNotNull(r.toString());}  }
class C{  public LongMapperBuilder boost(Float boost){  this.boost=boost;  return this;}  }
class C{  @Override public boolean isEncrypted(){  return keyCrypter != null && encryptedPrivateKey != null && encryptedPrivateKey.encryptedBytes.length > 0;}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  private Base64(){}  }
class C{  public boolean startDecode() throws IOException {  if (insideSOS) {    throw new IllegalStateException("decode already started");  }  if (foundEOI) {    return false;  }  decodeHeader();  int m=getMarker();  while (m != 0xD9) {    if (m == 0xDA) {      processScanHeader();      insideSOS=true;      currentMCURow=0;      reset();      return true;    } else {      processMarker(m);    }    m=getMarker();  }  foundEOI=true;  return false;}  }
class C{  protected void init(List<? extends DataSet<?>> dataSets){  isLegal(dataSets);  calcMinMax(dataSets);  calcYValueSum(dataSets);  calcYValueCount(dataSets);  calcXValAverageLength();}  }
class C{  public Flag registerRequired(final String name,final Class<?> type,final String usage,final String description){  return registerRequired(null,name,type,usage,description);}  }
class C{  public ReactionTriggerItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void updateEmrClusterDefinitionWithBestPrice(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto,EmrClusterDefinition emrClusterDefinition){  EmrVpcPricingState emrVpcPricingState=new EmrVpcPricingState();  int totalInstanceCount=getTotalInstanceCount(emrClusterDefinition);  List<Subnet> subnets=getSubnets(emrClusterDefinition);  for (  Subnet subnet : subnets) {    emrVpcPricingState.getSubnetAvailableIpAddressCounts().put(subnet.getSubnetId(),subnet.getAvailableIpAddressCount());  }  removeSubnetsWithAvailableIpsLessThan(subnets,totalInstanceCount);  if (subnets.isEmpty()) {    LOGGER.info(String.format("Insufficient IP availability. namespace=\"%s\" emrClusterDefinitionName=\"%s\" emrClusterName=\"%s\" " + "totalRequestedInstanceCount=%s emrVpcPricingState=%s",emrClusterAlternateKeyDto.getNamespace(),emrClusterAlternateKeyDto.getEmrClusterDefinitionName(),emrClusterAlternateKeyDto.getEmrClusterName(),totalInstanceCount,jsonHelper.objectToJson(emrVpcPricingState)));    throw new ObjectNotFoundException(String.format("There are no subnets in the current VPC which have sufficient IP addresses available to run your " + "clusters. Try expanding the list of subnets or try again later. requestedInstanceCount=%s%n%s",totalInstanceCount,emrVpcPricingStateFormatter.format(emrVpcPricingState)));  }  List<EmrClusterPriceDto> emrClusterPrices=new ArrayList<>();  InstanceDefinition masterInstanceDefinition=getMasterInstanceDefinition(emrClusterDefinition);  InstanceDefinition coreInstanceDefinition=getCoreInstanceDefinition(emrClusterDefinition);  InstanceDefinition taskInstanceDefinition=getTaskInstanceDefinition(emrClusterDefinition);  Set<String> requestedInstanceTypes=new HashSet<>();  String masterInstanceType=masterInstanceDefinition.getInstanceType();  requestedInstanceTypes.add(masterInstanceType);  if (coreInstanceDefinition != null) {    String coreInstanceType=coreInstanceDefinition.getInstanceType();    requestedInstanceTypes.add(coreInstanceType);  }  if (taskInstanceDefinition != null) {    String taskInstanceType=taskInstanceDefinition.getInstanceType();    requestedInstanceTypes.add(taskInstanceType);  }  for (  AvailabilityZone availabilityZone : getAvailabilityZones(subnets)) {    Map<String,BigDecimal> instanceTypeSpotPrices=getInstanceTypeSpotPrices(availabilityZone,requestedInstanceTypes);    Map<String,BigDecimal> instanceTypeOnDemandPrices=getInstanceTypeOnDemandPrices(availabilityZone,requestedInstanceTypes);    emrVpcPricingState.getSpotPricesPerAvailabilityZone().put(availabilityZone.getZoneName(),instanceTypeSpotPrices);    emrVpcPricingState.getOnDemandPricesPerAvailabilityZone().put(availabilityZone.getZoneName(),instanceTypeOnDemandPrices);    BigDecimal masterSpotPrice=instanceTypeSpotPrices.get(masterInstanceType);    BigDecimal masterOnDemandPrice=instanceTypeOnDemandPrices.get(masterInstanceType);    Ec2PriceDto masterPrice=getBestInstancePrice(masterSpotPrice,masterOnDemandPrice,masterInstanceDefinition);    Ec2PriceDto corePrice=null;    if (coreInstanceDefinition != null) {      String coreInstanceType=coreInstanceDefinition.getInstanceType();      BigDecimal coreSpotPrice=instanceTypeSpotPrices.get(coreInstanceType);      BigDecimal coreOnDemandPrice=instanceTypeOnDemandPrices.get(coreInstanceType);      corePrice=getBestInstancePrice(coreSpotPrice,coreOnDemandPrice,coreInstanceDefinition);    }    Ec2PriceDto taskPrice=null;    if (taskInstanceDefinition != null) {      String taskInstanceType=taskInstanceDefinition.getInstanceType();      BigDecimal taskSpotPrice=instanceTypeSpotPrices.get(taskInstanceType);      BigDecimal taskOnDemandPrice=instanceTypeOnDemandPrices.get(taskInstanceType);      taskPrice=getBestInstancePrice(taskSpotPrice,taskOnDemandPrice,taskInstanceDefinition);    }    if (masterPrice != null && (coreInstanceDefinition == null || corePrice != null) && (taskInstanceDefinition == null || taskPrice != null)) {      emrClusterPrices.add(createEmrClusterPrice(availabilityZone,masterPrice,corePrice,taskPrice));    }  }  if (emrClusterPrices.isEmpty()) {    LOGGER.info(String.format("No subnets which satisfied the best price search criteria. namespace=\"%s\" emrClusterDefinitionName=\"%s\" " + "emrClusterName=\"%s\" emrVpcPricingState=%s",emrClusterAlternateKeyDto.getNamespace(),emrClusterAlternateKeyDto.getEmrClusterDefinitionName(),emrClusterAlternateKeyDto.getEmrClusterName(),jsonHelper.objectToJson(emrVpcPricingState)));    throw new ObjectNotFoundException(String.format("There were no subnets which satisfied your best price search criteria. Try setting the max price " + "or the on-demand threshold to a higher value.%n%s",emrVpcPricingStateFormatter.format(emrVpcPricingState)));  }  EmrClusterPriceDto bestEmrClusterPrice=getEmrClusterPriceWithLowestTotalCost(emrClusterPrices);  Subnet bestEmrClusterSubnet=getBestSubnetForAvailabilityZone(bestEmrClusterPrice.getAvailabilityZone(),subnets);  updateInstanceDefinitionsWithBestPrice(emrClusterDefinition,bestEmrClusterSubnet,bestEmrClusterPrice);}  }
class C{  public static final Set<String> keywords(String fileName,boolean allowNumbers){  fileName=QueryUtils.ripExtension(fileName);  Set<String> ret=new LinkedHashSet<String>();  String delim=DELIMITERS;  char[] illegal=SearchSettings.ILLEGAL_CHARS.getValue();  StringBuilder sb=new StringBuilder(delim.length() + illegal.length);  sb.append(illegal).append(delim);  StringTokenizer st=new StringTokenizer(fileName,sb.toString());  while (st.hasMoreTokens()) {    String currToken=st.nextToken().toLowerCase();    if (!allowNumbers) {      try {        Double.valueOf(currToken);        continue;      } catch (      NumberFormatException normalWord) {      }    }    if (!TRIVIAL_WORDS.contains(currToken))     ret.add(currToken);  }  return ret;}  }
class C{  public List<NondominatedPopulation> runSeeds(int numberOfSeeds){  isCanceled.set(false);  if ((checkpointFile != null) && (numberOfSeeds > 1)) {    System.err.println("checkpoints not supported when running multiple seeds");    checkpointFile=null;  }  int maxEvaluations=properties.getInt("maxEvaluations",25000);  List<NondominatedPopulation> results=new ArrayList<NondominatedPopulation>();  progress.start(numberOfSeeds,maxEvaluations);  for (int i=0; i < numberOfSeeds && !isCanceled.get(); i++) {    NondominatedPopulation result=runSingleSeed(i + 1,numberOfSeeds,maxEvaluations);    if (result != null) {      results.add(result);      progress.nextSeed();    }  }  progress.stop();  return results;}  }
class C{  private void handleJsonMoveNotes(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String[] ids;  String direction;  String csrft;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    ids=json.getStringArray("ids");    direction=json.getString("direction");    csrft=json.getString("csrft");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));    return;  }  try {    final Errors errors=new Errors();    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    if (user == null) {      returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));      return;    }    if (user.getIsAccountClosed()) {      returnJson400(requestAndResponse,servletText.errorAccountIsClosed());    }    final HashSet<String> movedIdsSet=new HashSet<String>();    for (int i=0; i < ids.length; ++i) {      final String id=ids[i];      if (!dbLogic.getIdGenerator().isIdWellFormed(id)) {        returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());        return;      }      final Entry entry=dbLogic.getEntryById(id);      if (entry == null) {        returnJson400(requestAndResponse,servletText.errorEntryCouldNotBeFound());        return;      }      if (movedIdsSet.contains(id)) {        returnJson400(requestAndResponse,servletText.errorDuplicateEntry());        return;      }      movedIdsSet.add(id);      if (!dbLogic.moveEntry(user,entry,direction,isUserAnAdmin(requestAndResponse),errors)) {        returnJson400(requestAndResponse,errors);        return;      }    }    dbLogic.commit();    returnJson200(requestAndResponse);  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public static CoreContainer createAndLoad(Path solrHome,Path configFile){  SolrResourceLoader loader=new SolrResourceLoader(solrHome);  CoreContainer cc=new CoreContainer(SolrXmlConfig.fromFile(loader,configFile));  try {    cc.load();  } catch (  Exception e) {    cc.shutdown();    throw e;  }  return cc;}  }
class C{  public static void encodeVaxInteger(OutputStream stream,int value) throws IOException {  stream.write(4);  encodeVaxIntegerWithoutLength(stream,value);}  }
class C{  public static void process(ASTOperationContainer qc) throws MalformedQueryException {  StringProcessor visitor=new StringProcessor();  try {    qc.jjtAccept(visitor,null);  } catch (  VisitorException e) {    throw new MalformedQueryException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:59.215 -0400",hash_original_method="8705224622C96FC6AB581B01CE2BBFF7",hash_generated_method="912A6122ED0A3F4D3491BB7297C77AD3") public void putAdvancedOption(String key,String value){  if (mPrototype.mAdvancedOptions == null) {    mPrototype.mAdvancedOptions=new Bundle();  }  mPrototype.mAdvancedOptions.putString(key,value);}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getApDBDao() : null;}  }
class C{  private X509Certificate generateCertificate(KeyPair pair) throws GeneralSecurityException, IOException {  PublicKey pubKey=loadPublicKeyFromBytes(pair.getPublic().getEncoded());  PrivateKey privkey=pair.getPrivate();  X509CertInfo info=new X509CertInfo();  Date from=getNotBefore();  Date to=new Date(from.getTime() + valuesHolder.getCertificateValidityInDays() * 86400000L);  CertificateValidity interval=new CertificateValidity(from,to);  BigInteger sn=new BigInteger(64,new SecureRandom());  X500Name owner=new X500Name(String.format(CERTIFICATE_COMMON_NAME_FORMAT,valuesHolder.getCertificateCommonName()));  info.set(X509CertInfo.VALIDITY,interval);  info.set(X509CertInfo.SERIAL_NUMBER,new CertificateSerialNumber(sn));  info.set(X509CertInfo.SUBJECT,owner);  info.set(X509CertInfo.ISSUER,owner);  info.set(X509CertInfo.KEY,new CertificateX509Key(pubKey));  info.set(X509CertInfo.VERSION,new CertificateVersion(CertificateVersion.V3));  AlgorithmId keyAlgo=AlgorithmId.get(KeyCertificateAlgorithmValuesHolder.DEFAULT_KEY_ALGORITHM);  info.set(X509CertInfo.ALGORITHM_ID,new CertificateAlgorithmId(keyAlgo));  AlgorithmId signingAlgo=AlgorithmId.get(valuesHolder.getSigningAlgorithm());  info.set(CertificateAlgorithmId.NAME + "." + CertificateAlgorithmId.ALGORITHM,signingAlgo);  CertificateExtensions ext=new CertificateExtensions();  ext.set(SubjectKeyIdentifierExtension.NAME,new SubjectKeyIdentifierExtension(new KeyIdentifier(pubKey).getIdentifier()));  ext.set(AuthorityKeyIdentifierExtension.NAME,new AuthorityKeyIdentifierExtension(new KeyIdentifier(pubKey),null,null));  ext.set(SubjectAlternativeNameExtension.NAME,new SubjectAlternativeNameExtension(subjectAltNames()));  info.set(X509CertInfo.EXTENSIONS,ext);  X509CertImpl cert=new X509CertImpl(info);  cert.sign(privkey,valuesHolder.getSigningAlgorithm());  return cert;}  }
class C{  public void rotateAngleAxisX(float angle){  if (mRotateMode != ROTATE_X)   setRotationVector(ROTATE_X);  float rotation=angle - mCurrentAngle[0];  mCurrentAngle[0]=mCurrentAngle[0] + (angle - mCurrentAngle[0]);  mRenderer.setRotationObject(rotation);}  }
class C{  private static double gcf(double a,double x,double gln){  double gold=0.0, g, fac=1.0, b1=1.0;  double b0=0.0, anf, ana, an, a1, a0=1.0;  double p;  boolean done=false;  a1=x;  p=0.0;  for (an=1.0; (!done) && (an <= ITMAX); an+=1.0) {    ana=an - a;    a0=(a1 + a0 * ana) * fac;    b0=(b1 + b0 * ana) * fac;    anf=an * fac;    a1=x * a0 + anf * a1;    b1=x * b0 + anf * b1;    if (a1 != 0.0) {      fac=1.0 / a1;      g=b1 * fac;      if (Math.abs((g - gold) / g) < EPSILON) {        p=Math.exp(-x + a * Math.log(x) - gln) * g;        done=true;      }      gold=g;    }  }  return p;}  }
class C{  public UploadDeviceConfigResponse uploadDeviceConfig() throws Exception {  UploadDeviceConfigRequest request=UploadDeviceConfigRequest.newBuilder().setDeviceConfiguration(Utils.getDeviceConfigurationProto()).build();  ResponseWrapper responseWrapper=executePOSTRequest(UPLOADDEVICECONFIG_URL,request.toByteArray(),"application/x-protobuf");  return responseWrapper.getPayload().getUploadDeviceConfigResponse();}  }
class C{  public final boolean isAbstract(){  return (this.modifiers & ClassFileConstants.AccAbstract) != 0;}  }
class C{  @Override public Properties trackVideoSeek(String videoId,Double oldTime,Double newTime,String courseId,String unitUrl,Boolean skipSeek){  SegmentAnalyticsEvent aEvent=getCommonProperties(videoId,Values.VIDEO_SEEKED);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  oldTime=formatDoubleValue(oldTime,3);  newTime=formatDoubleValue(newTime,3);  Double skipInterval=newTime - oldTime;  skipInterval=formatDoubleValue(skipInterval,3);  aEvent.data.putValue(Keys.OLD_TIME,oldTime);  aEvent.data.putValue(Keys.NEW_TIME,newTime);  if (skipSeek) {    aEvent.data.putValue(Keys.SEEK_TYPE,Values.SKIP);  } else {    aEvent.data.putValue(Keys.SEEK_TYPE,Values.SLIDE);  }  aEvent.data.putValue(Keys.REQUESTED_SKIP_INTERVAL,skipInterval);  tracker.track(Events.SEEK_VIDEO,aEvent.properties);  return aEvent.properties;}  }
class C{  public boolean isSetB100(){  return this.b100 != null;}  }
class C{  protected DoubleDBIDList computeDistanceVector(NumberVector refPoint,Relation<? extends NumberVector> database,PrimitiveDistanceQuery<? super NumberVector> distFunc){  ModifiableDoubleDBIDList referenceDists=DBIDUtil.newDistanceDBIDList(database.size());  for (DBIDIter iditer=database.iterDBIDs(); iditer.valid(); iditer.advance()) {    referenceDists.add(distFunc.distance(iditer,refPoint),iditer);  }  referenceDists.sort();  return referenceDists;}  }
class C{  public void removeValue(T value){  if (isRootNode()) {    return;  }  this.values.remove(value);}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  protected float unwrapKey(Object key){  return ((Float)key).floatValue();}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  configureDomainAxes();  configureRangeAxes();  if (getParent() != null) {    getParent().datasetChanged(event);  } else {    PlotChangeEvent e=new PlotChangeEvent(this);    e.setType(ChartChangeEventType.DATASET_UPDATED);    notifyListeners(e);  }}  }
class C{  @Override public boolean isSecondaryArcWeapon(int weaponId){  if (getEquipment(weaponId).getLocation() == getLocTurret()) {    return true;  }  return false;}  }
class C{  public static String latToFileString(float lat,int level){  String direction;  if (lat >= 0) {    direction="n";    lat=(float)Math.floor(lat);  } else {    direction="s";    lat=(float)Math.ceil(lat * -1);  }  java.text.DecimalFormat fd=new java.text.DecimalFormat("00");  String result=direction + fd.format(lat) + ".dt"+ level;  return result;}  }
class C{  private void removeAt(int i){  Object[] array=queue;  int n=size - 1;  if (n == i)   array[i]=null; else {    E moved=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(i,moved,array,n); else     siftDownUsingComparator(i,moved,array,n,cmp);    if (array[i] == moved) {      if (cmp == null)       siftUpComparable(i,moved,array); else       siftUpUsingComparator(i,moved,array,cmp);    }  }  size=n;}  }
class C{  public Base64InputStream(InputStream in,int flags,boolean encode){  super(in);  eof=false;  inputBuffer=new byte[BUFFER_SIZE];  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }  coder.output=new byte[coder.maxOutputSize(BUFFER_SIZE)];  outputStart=0;  outputEnd=0;}  }
class C{  public char[] toCharArray(){  if (size == 0) {    return ArrayUtils.EMPTY_CHAR_ARRAY;  }  final char chars[]=new char[size];  System.arraycopy(buffer,0,chars,0,size);  return chars;}  }
class C{  private CharSet copy(){  CharSet charSet=new CharSet(new long[this._mapping.length]);  for (int i=_mapping.length; --i >= 0; ) {    charSet._mapping[i]=_mapping[i];  }  return charSet;}  }
class C{  public static Builder builder(){  return new Builder(new JoinResponse());}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void save(@NotNull GitVcsSettings settings,GitSharedSettings sharedSettings){  settings.getAppSettings().setPathToGit(getCurrentExecutablePath());  myVcs.checkVersion();  settings.getAppSettings().setIdeaSsh(IDEA_SSH.equals(mySSHExecutableComboBox.getSelectedItem()) ? GitVcsApplicationSettings.SshExecutable.IDEA_SSH : GitVcsApplicationSettings.SshExecutable.NATIVE_SSH);  settings.setAutoUpdateIfPushRejected(myAutoUpdateIfPushRejected.isSelected());  settings.setSyncSetting(mySyncControl.isSelected() ? DvcsSyncSettings.Value.SYNC : DvcsSyncSettings.Value.DONT_SYNC);  settings.setAutoCommitOnCherryPick(myAutoCommitOnCherryPick.isSelected());  settings.setWarnAboutCrlf(myWarnAboutCrlf.isSelected());  settings.setWarnAboutDetachedHead(myWarnAboutDetachedHead.isSelected());  settings.setForcePushAllowed(myEnableForcePush.isSelected());  settings.setUpdateType((UpdateMethod)myUpdateMethodComboBox.getSelectedItem());  sharedSettings.setForcePushProhibitedPatters(getProtectedBranchesPatterns());}  }
class C{  public static InputStream newInputStream(String fileName) throws IOException {  return FilePath.get(fileName).newInputStream();}  }
class C{  public void updateWeights(double l,double m){  if (!m_weightsUpdated && !Double.isNaN(m_unitError)) {    m_methods.updateWeights(this,l,m);    super.updateWeights(l,m);  }}  }
class C{  @Override public boolean reserve(){  assert parts.get() != null : "partitions must be registered before the first reserve attempt";  for (; ; ) {    int r=reservations.get();    if (r == -1)     return false;    assert r >= 0 : r;    if (reservations.compareAndSet(r,r + 1))     return true;  }}  }
class C{  public void destroyPresenter(){  helper.destroyPresenter();}  }
class C{  public boolean validate(Class type,InputNode node,boolean strict) throws Exception {  Session session=manager.open(strict);  try {    return validate(type,node,session);  }  finally {    manager.close();  }}  }
class C{  public AppEngineDataStoreFactory build(){  return new AppEngineDataStoreFactory();}  }
class C{  void doShiftLeft(java.awt.event.ActionEvent e){  for (int i=0; i < nValues - 1; i++) {    int value=_cvMap.get(cvList[i + 1]).getValue();    _cvMap.get(cvList[i]).setValue(value);  }}  }
class C{  public StrBuilder insert(int index,int value){  return insert(index,String.valueOf(value));}  }
class C{  public static String commandLine(MonitoredVm vm) throws MonitorException {  StringMonitor cmd=(StringMonitor)vm.findByName("sun.rt.javaCommand");  return (cmd == null) ? "Unknown" : cmd.stringValue();}  }
class C{  protected boolean Step() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean doubleSlash=tokenIs('/');  if (doubleSlash) {    nextToken();    appendOp(2,OpCodes.FROM_DESCENDANTS_OR_SELF);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.NODETYPE_NODE);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  }  if (tokenIs(".")) {    nextToken();    if (tokenIs('[')) {      error(XPATHErrorResources.ER_PREDICATE_ILLEGAL_SYNTAX,null);    }    appendOp(4,OpCodes.FROM_SELF);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_NODE);  } else   if (tokenIs("..")) {    nextToken();    appendOp(4,OpCodes.FROM_PARENT);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_NODE);  } else   if (tokenIs('*') || tokenIs('@') || tokenIs('_')|| (m_token != null && Character.isLetter(m_token.charAt(0)))) {    Basis();    while (tokenIs('[')) {      Predicate();    }    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  } else {    if (doubleSlash) {      error(XPATHErrorResources.ER_EXPECTED_LOC_STEP,null);    }    return false;  }  return true;}  }
class C{  public boolean visit(EmptyStatement node){  return true;}  }
class C{  public TaskList deleteSnapshotSession(URI snapSessionURI,String deleteType){  s_logger.info("START delete snapshot session {} of type {}",snapSessionURI,deleteType);  BlockSnapshotSession snapSession=BlockSnapshotSessionUtils.querySnapshotSession(snapSessionURI,_uriInfo,_dbClient,true);  BlockObject snapSessionSourceObj=null;  List<BlockObject> snapSessionSourceObjs=getAllSnapshotSessionSources(snapSession);  snapSessionSourceObj=snapSessionSourceObjs.get(0);  Project project=BlockSnapshotSessionUtils.querySnapshotSessionSourceProject(snapSessionSourceObj,_dbClient);  BlockSnapshotSessionApi snapSessionApiImpl=determinePlatformSpecificImplForSource(snapSessionSourceObj);  snapSessionApiImpl.validateDeleteSnapshotSession(snapSession,snapSessionSourceObj,project);  String taskId=UUID.randomUUID().toString();  TaskList taskList=new TaskList();  Operation snapSessionOp=new Operation();  snapSessionOp.setResourceType(getDeleteResourceOperationTypeEnum(snapSession));  _dbClient.createTaskOpStatus(BlockSnapshotSession.class,snapSession.getId(),taskId,snapSessionOp);  snapSession.getOpStatus().put(taskId,snapSessionOp);  if (snapSession.hasConsistencyGroup() && NullColumnValueGetter.isNotNullValue(snapSession.getReplicationGroupInstance())) {    addConsistencyGroupTasks(snapSessionSourceObjs,taskList,taskId,getDeleteResourceOperationTypeEnum(snapSession));  } else {    taskList.addTask(toTask(snapSession,taskId,snapSessionOp));  }  try {    snapSessionApiImpl.deleteSnapshotSession(snapSession,snapSessionSourceObj,taskId,deleteType);  } catch (  Exception e) {    String errorMsg=format("Failed to delete snapshot session %s: %s",snapSessionURI,e.getMessage());    ServiceCoded sc=null;    if (e instanceof ServiceCoded) {      sc=(ServiceCoded)e;    } else {      sc=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    }    cleanupFailure(taskList.getTaskList(),new ArrayList<DataObject>(),errorMsg,taskId,sc);    throw e;  }  String opStage=VolumeDeleteTypeEnum.VIPR_ONLY.name().equals(deleteType) ? null : AuditLogManager.AUDITOP_BEGIN;  auditOp(OperationTypeEnum.DELETE_SNAPSHOT_SESSION,true,opStage,snapSessionURI.toString(),snapSessionURI.toString(),snapSessionSourceObj.getStorageController().toString());  s_logger.info("FINISH delete snapshot session {}",snapSessionURI);  return taskList;}  }
class C{  private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  mOpsInstance=opsType.newInstance();  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);  mOpsInstance.onConfiguration(instance,true);}  }
class C{  public final void put(long k,long elem){  if (this.count >= this.thresh) {    this.grow();  }  int loc=((int)k & 0x7FFFFFFF) % this.length;  while (true) {    if (this.elems[loc] == -1) {      this.keys[loc]=k;      this.elems[loc]=elem;      this.count++;      return;    }    if (this.keys[loc] == k) {      this.elems[loc]=elem;      return;    }    loc=(loc + 1) % this.length;  }}  }
class C{  @Override public synchronized void releasePartition(String topic,int partition){  Set<Integer> partitionSet=m_myTopicPartitions.get(topic);  if (partitionSet == null)   return;  String ownerPath=ownerPath(topic,partition);  try {    if (m_zk.exists(ownerPath) && m_consumerId.equals(m_zk.readString(ownerPath))) {      m_zk.delete(ownerPath);    }    partitionSet.remove(partition);  } catch (  Exception e) {    LOGGER.error(m_consumerId + "Fail to release partition " + ownerPath,e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public T caseParameter(Parameter object){  return null;}  }
class C{  protected void makeStyleResult(StyleLibrary stylelib){  final Database db=ResultUtil.findDatabase(hier);  stylelibrary=stylelib;  List<Clustering<? extends Model>> clusterings=ResultUtil.getClusteringResults(db);  if (!clusterings.isEmpty()) {    stylepolicy=new ClusterStylingPolicy(clusterings.get(0),stylelib);  } else {    Clustering<Model> c=generateDefaultClustering();    stylepolicy=new ClusterStylingPolicy(c,stylelib);  }}  }
class C{  private void createBaseNode() throws KeeperException, InterruptedException {  if (null == zk.exists(zooKeeperLocation,true)) {    zk.create(zooKeeperLocation,new byte[1],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);  }}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  @RequestMapping(value="/SAML2/SSOCAC/{tenant:.*}",method={RequestMethod.GET,RequestMethod.POST}) public String cacSso(Locale locale,@PathVariable(value="tenant") String tenant,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  return this.sso(locale,tenant,model,request,response);}  }
class C{  public static boolean isMember(Project aProject,RepositoryService aProjectRepository,User aUser){  boolean user=false;  try {    List<ProjectPermission> permissionLevels=aProjectRepository.listProjectPermisionLevel(aUser,aProject);    for (    ProjectPermission permissionLevel : permissionLevels) {      if (StringUtils.equalsIgnoreCase(permissionLevel.getLevel().getName(),PermissionLevel.USER.getName())) {        user=true;        break;      }    }  } catch (  NoResultException ex) {    LOG.info("No permision is given to this user " + ex);  }  return user;}  }
class C{  public int binarySearchFromTo(short key,int from,int to){  return cern.colt.Sorting.binarySearchFromTo(this.elements,key,from,to);}  }
class C{  public void testGroupDeliveryInfoLogQuery() throws RemoteException {  Cursor cursor=null;  try {    String where=GroupDeliveryInfoLog.CONTACT.concat("=?");    String[] whereArgs=new String[]{"+33123456789"};    cursor=mProvider.query(GroupDeliveryInfoLog.CONTENT_URI,GROUPDELIVERYINFO_LOG_PROJECTION,where,whereArgs,null);    assertNotNull(cursor);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  private String addStepsForRemoveInitiators(StorageSystem vplex,Workflow workflow,ExportGroup exportGroup,ExportMask exportMask,List<Initiator> initiators,URI hostURI,List<URI> initiatorsAlreadyRemovedFromExportGroup,String previousStep) throws Exception {  String lastStep=previousStep;  List<ExportGroup> otherExportGroups=getOtherExportGroups(exportGroup,exportMask);  _log.info(String.format("will be removing initiators %s for host %s mask %s (%s)",getInitiatorsWwnsString(initiators),hostURI.toString(),exportMask.getMaskName(),exportMask.getId()));  List<URI> hostInitiatorURIs=new ArrayList<URI>();  for (  Initiator initiator : initiators) {    hostInitiatorURIs.add(initiator.getId());  }  List<URI> targetURIs=getTargetURIs(exportMask,hostInitiatorURIs);  _log.info(String.format("will be removing targets %s for host %s",targetURIs.toString(),hostURI.toString()));  boolean doFireCompleter=true;  boolean otherExportGroupsPresent=!otherExportGroups.isEmpty();  boolean removeAllInits=(hostInitiatorURIs.size() >= exportMask.getInitiators().size());  if (removeAllInits && !exportMask.hasAnyExistingInitiators() && !otherExportGroupsPresent&& !exportMask.hasAnyExistingVolumes()) {    _log.info("all initiators are being removed and no " + "other ExportGroups reference ExportMask {}",exportMask.getMaskName());    _log.info("creating a deleteStorageView workflow step for " + exportMask.getMaskName());    Workflow.Method storageViewExecuteMethod=deleteStorageViewMethod(vplex.getId(),exportMask.getId());    lastStep=workflow.createStep(DELETE_STORAGE_VIEW,String.format("Delete VPLEX Storage View %s for ExportGroup %s",exportMask.getMaskName(),exportGroup.getId()),lastStep,vplex.getId(),vplex.getSystemType(),this.getClass(),storageViewExecuteMethod,null,null);    List<NetworkZoningParam> zoningParam=NetworkZoningParam.convertExportMasksToNetworkZoningParam(exportGroup.getId(),Collections.singletonList(exportMask.getId()),_dbClient);    Workflow.Method zoneMaskDeleteMethod=_networkDeviceController.zoneExportMasksDeleteMethod(zoningParam,StringSetUtil.stringSetToUriList(exportMask.getVolumes().keySet()));    Workflow.Method zoneNullRollbackMethod=_networkDeviceController.zoneNullRollbackMethod();    lastStep=workflow.createStep(null,"Zone delete mask: " + exportMask.getMaskName(),lastStep,nullURI,"network-system",_networkDeviceController.getClass(),zoneMaskDeleteMethod,zoneNullRollbackMethod,null);  } else   if (otherExportGroupsPresent) {    _log.info("there are other ExportGroups referencing ExportMask " + exportMask.getMaskName());    _log.info("export group {} has initiators " + CommonTransformerFunctions.collectionToString(exportGroup.getInitiators()),exportGroup.getLabel());    _log.info("export mask {} has initiators " + CommonTransformerFunctions.collectionToString(exportMask.getInitiators()),exportMask.getMaskName());    List<String> initsStillInExportGroup=new ArrayList<String>();    List<String> egInits=new ArrayList<String>();    for (    String egInit : exportGroup.getInitiators()) {      egInits.add(egInit);    }    for (    String emInit : exportMask.getInitiators()) {      if (egInits.contains(emInit)) {        initsStillInExportGroup.add(emInit);      }    }    _log.info("host initiators to be removed: " + hostInitiatorURIs.size() + " ("+ hostInitiatorURIs+ ")");    _log.info("host initiators already removed from export group: " + initiatorsAlreadyRemovedFromExportGroup.size() + " ("+ initiatorsAlreadyRemovedFromExportGroup+ ")");    _log.info("host initiators still in export group: " + initsStillInExportGroup.size() + " ("+ initsStillInExportGroup+ ")");    boolean noMoreInits=hostInitiatorURIs.size() >= (initsStillInExportGroup.size() + initiatorsAlreadyRemovedFromExportGroup.size());    if (noMoreInits && !ExportUtils.checkIfAnyExistingInitiatorsNotInComputeResource(exportMask,hostURI,_dbClient)) {      _log.info("this means there will be no more initiators present in " + "export group {} for export mask {}",exportGroup.getLabel(),exportMask.getMaskName());      if (exportMask.getVolumes() != null && !exportMask.getVolumes().isEmpty()) {        _log.info("export mask {} has volumes: " + CommonTransformerFunctions.collectionToString(exportMask.getVolumes()),exportMask.getMaskName());        List<URI> volumesInMask=StringSetUtil.stringSetToUriList(exportMask.getVolumes().keySet());        List<URI> volumeURIList=getVolumeListDiff(exportGroup,exportMask,otherExportGroups,volumesInMask);        if (!volumeURIList.isEmpty()) {          _log.info("there are some volumes that need to be removed: " + volumeURIList);          List<NetworkZoningParam> zoningParams=NetworkZoningParam.convertExportMasksToNetworkZoningParam(exportGroup.getId(),Collections.singletonList(exportMask.getId()),_dbClient);          VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);          removeVolumesFromStorageViewAndMask(client,exportMask,volumeURIList);          List<URI> exportMaskURIs=new ArrayList<URI>();          exportMaskURIs.add(exportMask.getId());          String stepId=UUID.randomUUID().toString();          _networkDeviceController.zoneExportRemoveVolumes(zoningParams,volumeURIList,stepId);        }      }      _log.info("removing ExportMask {} from ExportGroup {}",exportMask.getId(),exportGroup.getId());      exportGroup.removeExportMask(exportMask.getId());      _dbClient.updateObject(exportGroup);    }    for (    URI initUri : hostInitiatorURIs) {      if (!initiatorsAlreadyRemovedFromExportGroup.contains(initUri)) {        _log.info("removing Initiator {} from ExportGroup {}",initUri,exportGroup.getId());        exportGroup.removeInitiator(initUri);        initiatorsAlreadyRemovedFromExportGroup.add(initUri);      }    }    _dbClient.updateObject(exportGroup);    List<URI> initiatorsToRemove=new ArrayList<URI>();    List<ExportGroup> allExportGroups=new ArrayList<ExportGroup>();    allExportGroups.addAll(otherExportGroups);    allExportGroups.add(exportGroup);    _log.info("checking if initiators are no longer in use by any export group");    for (    Initiator init : initiators) {      _log.info("looking at initiator " + init.getInitiatorPort());      boolean stillInUse=false;      for (      ExportGroup eg : allExportGroups) {        if (eg.hasInitiator(init)) {          _log.info("   initiator is still in use by export group " + eg.getGeneratedName() + " ("+ eg.getId()+ ")");          stillInUse=true;          break;        }      }      if (!stillInUse) {        initiatorsToRemove.add(init.getId());        _log.info("   initiator is no longer in use, " + "marked for removal from the VPLEX storage view");      }    }    if (!initiatorsToRemove.isEmpty()) {      lastStep=handleInitiatorRemoval(vplex,workflow,exportGroup,exportMask,initiatorsToRemove,targetURIs,lastStep,removeAllInits,hostURI);      doFireCompleter=true;    } else {      doFireCompleter=false;    }  } else {    lastStep=handleInitiatorRemoval(vplex,workflow,exportGroup,exportMask,hostInitiatorURIs,targetURIs,lastStep,removeAllInits,hostURI);  }  if (doFireCompleter) {    String completerStepId=workflow.createStepId();    ExportMaskRemoveInitiatorCompleter maskCompleter=new ExportMaskRemoveInitiatorCompleter(exportGroup.getId(),exportMask.getId(),hostInitiatorURIs,completerStepId);    Workflow.Method fireCompleter=fireTaskCompleterMethod(maskCompleter);    lastStep=workflow.createStep("fireCompleter","Fire ExportMaskRemoveInitiatorCompleter",lastStep,vplex.getId(),vplex.getSystemType(),this.getClass(),fireCompleter,null,completerStepId);  }  return lastStep;}  }
class C{  public static int widenSubword(Object x){  if (x instanceof Integer)   return (int)x; else   if (x instanceof Boolean)   return fromBoolean((boolean)x); else   if (x instanceof Character)   return (char)x; else   if (x instanceof Short)   return (short)x; else   if (x instanceof Byte)   return (byte)x; else   return (int)x;}  }
class C{  public void deleteRequest(GenericClusterRequest clusterRequest){  String url=BROKER_BASE_URL + String.format("/tasks/%s",clusterRequest.taskId);  HttpDelete httpDelete=new HttpDelete(url);  try {    HttpResponse response=httpClient.execute(httpDelete);    EntityUtils.consumeQuietly(response.getEntity());    if (response.getStatusLine().getStatusCode() == 200) {      LOG.info("Successfully deleted task {}.",clusterRequest.taskId);    } else {      LOG.info("Failed to delete task {} ({}).",clusterRequest.taskId,response.getStatusLine());    }  } catch (  Exception e) {    LOG.warn("Failed to delete task {}",clusterRequest.taskId,e);  }}  }
class C{  protected void validate_return(VasaAssociationObject[] param){}  }
class C{  public MultipartEncoder(OutputStream out){  this(out,randomBoundary());}  }
class C{  private HashMap<ServerLocation,HashSet<Integer>> groupByServerToBuckets(ClientPartitionAdvisor prAdvisor,Set<Integer> bucketSet,boolean primaryOnly){  if (primaryOnly) {    HashMap<ServerLocation,HashSet<Integer>> serverToBucketsMap=new HashMap<ServerLocation,HashSet<Integer>>();    for (    Integer bucketId : bucketSet) {      ServerLocation server=prAdvisor.advisePrimaryServerLocation(bucketId);      if (server == null) {        return null;      }      HashSet<Integer> buckets=serverToBucketsMap.get(server);      if (buckets == null) {        buckets=new HashSet<Integer>();        serverToBucketsMap.put(server,buckets);      }      buckets.add(bucketId);    }    if (logger.isDebugEnabled()) {      logger.debug("ClientMetadataService: The server to bucket map is : {}",serverToBucketsMap);    }    return serverToBucketsMap;  } else {    return pruneNodes(prAdvisor,bucketSet);  }}  }
class C{  public List<FileInfo> findPhysicalIndexFiles(String physicalName){  return physicalFiles.get(physicalName);}  }
class C{  private boolean vdcPropertiesChanged(){  long localVdcConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null ? 0 : Long.parseLong(localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION));  long targetVdcConfigVersion=targetSiteInfo.getVdcConfigVersion();  log.info("local vdc config version: {}, target vdc config version: {}",localVdcConfigVersion,targetVdcConfigVersion);  return localVdcConfigVersion != targetVdcConfigVersion;}  }
class C{  public CRLNumber(byte[] encoding) throws IOException {  super(encoding);  number=new BigInteger((byte[])ASN1.decode(encoding));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.CHANNEL__TO_ENDPOINT:    setToEndpoint((Endpoint)newValue);  return;case EipPackage.CHANNEL__FROM_ENDPOINT:setFromEndpoint((Endpoint)newValue);return;case EipPackage.CHANNEL__NAME:setName((String)newValue);return;case EipPackage.CHANNEL__GUARANTEED:setGuaranteed((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public BranchCoverageGoal(String className,String methodName){  this.branch=null;  this.value=true;  this.className=className;  this.methodName=methodName;  lineNumber=BytecodeInstructionPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getFirstLineNumberOfMethod(className,methodName);}  }
class C{  protected boolean[] canSplitUpClass(int attrType,int classType){  boolean[] result=new boolean[2];  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("not in classpath");  print("split per class type ");  printAttributeSummary(attrType,Attribute.NOMINAL);  print("...");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2;  int numAtts=3, attrIndex=0, classIndex=1;  Instances train=null;  Vector<Double> test;  Estimator estimator=null;  boolean built=false;  try {    AttrTypes at=new AttrTypes(attrType);    train=makeTestDataset(42,numTrain,numAtts,at,numClasses,classType,classIndex);    test=makeTestValueList(24,numTest,train,attrIndex,attrType);    estimator=Estimator.makeCopies(getEstimator(),1)[0];  } catch (  Exception ex) {    ex.printStackTrace();    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    estimator.addValues(train,attrIndex,classType,classIndex);    built=true;    testWithTestValues(estimator,test);    println("yes");    result[0]=true;  } catch (  Exception ex) {    boolean acceptable=false;    String msg;    if (ex.getMessage() == null) {      msg="";    } else {      msg=ex.getMessage().toLowerCase();    }    if (msg.indexOf("not in classpath") > -1) {      m_ClasspathProblems=true;    }    for (int i=0; i < accepts.size(); i++) {      if (msg.indexOf(accepts.get(i)) >= 0) {        acceptable=true;      }    }    println("no" + (acceptable ? " (OK error message)" : ""));    result[1]=acceptable;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during");      if (built) {        print(" testing");      } else {        print(" training");      }      println(": " + ex.getMessage() + "\n");      if (!acceptable) {        if (accepts.size() > 0) {          print("Error message doesn't mention ");          for (int i=0; i < accepts.size(); i++) {            if (i != 0) {              print(" or ");            }            print('"' + accepts.get(i) + '"');          }        }        println("here are the datasets:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");        println("=== Test Dataset ===\n" + test.toString() + "\n\n");      }    }  }  return result;}  }
class C{  public void stop(){  mContext.getContentResolver().unregisterContentObserver(mSettingObserver);}  }
class C{  public void enableAllDetectors(boolean enable){  detectorEnablementMap.clear();  Collection<Plugin> allPlugins=Plugin.getAllPlugins();  for (  Plugin plugin : allPlugins) {    for (    DetectorFactory factory : plugin.getDetectorFactories()) {      detectorEnablementMap.put(factory.getShortName(),enable);    }  }}  }
class C{  public Boolean isAutoConnect(){  return autoConnect;}  }
class C{  public T caseFunctionBlockMappingRule(FunctionBlockMappingRule object){  return null;}  }
class C{  private void restoreDoubleBuffering(Component c,boolean wasBuffered){  if (c instanceof JComponent)   ((JComponent)c).setDoubleBuffered(wasBuffered);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public Builder withAddress(Address address){  request.address=Assert.notNull(address,"address");  return this;}  }
class C{  private void closeTx(final Set<String> graphSourceNamesToCloseTxOn,final Transaction.Status tx){  final Set<Graph> graphsToCloseTxOn=new HashSet<>();  graphSourceNamesToCloseTxOn.forEach(null);  graphsToCloseTxOn.forEach(null);}  }
class C{  @SuppressWarnings("static-access") private void resetName(boolean isSource,String newName){  String name="";  if (isSource) {    if (newName == null) {      if (s_parameters.getSourceName() != null)       name=s_parameters.getSourceName().toLowerCase();    } else     if (newName.length() == 0) {      if (m_sourceName.getSelectedItem() != null)       name=m_sourceName.getSelectedItem().toString();    } else {      name=newName;    }  } else {    if (newName == null) {      if (s_parameters.getTargetName() != null)       name=s_parameters.getTargetName().toLowerCase();    } else     if (newName.length() == 0) {      if (m_targetName.getSelectedItem() != null)       name=m_targetName.getSelectedItem().toString();    } else {      name=newName;    }  }  ArrayList<String> databaseNames=getDatabaseNames(isSource);  if (isSource) {    m_sourceName.removeAllItems();  } else {    m_targetName.removeAllItems();  }  if (databaseNames != null && databaseNames.size() > 0) {    for (    String databaseName : databaseNames) {      if (isSource) {        m_sourceName.addItem(databaseName.toLowerCase());      } else {        m_targetName.addItem(databaseName.toLowerCase());      }    }  } else {    if (isSource) {      m_sourceName.addItem(name);    } else {      m_targetName.addItem(name);    }  }  if (isSource) {    m_sourceName.setSelectedItem(name);    m_sourceNameOld=name;  } else {    m_targetName.setSelectedItem(name);    m_targetNameOld=name;  }}  }
class C{  private boolean isActiveAdmin(){  return mDPM.isAdminActive(mDeviceAdminSample);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<K,V> h=head;  Node<K,V> basepred=h.node;  ArrayList<Index<K,V>> preds=new ArrayList<Index<K,V>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<K,V> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    Object v=s.readObject();    if (v == null)     throw new NullPointerException();    K key=(K)k;    V val=(V)v;    int rnd=ThreadLocalRandom.current().nextInt();    int j=0;    if ((rnd & 0x80000001) == 0) {      do {        ++j;      } while (((rnd>>>=1) & 1) != 0);      if (j > h.level)       j=h.level + 1;    }    Node<K,V> z=new Node<K,V>(key,val,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<K,V> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<K,V>(z,idx,null);        if (i > h.level)         h=new HeadIndex<K,V>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  public TestResultService(){  super(TestResultServiceState.class);  toggleOption(ServiceOption.PERSISTENCE,true);  toggleOption(ServiceOption.OWNER_SELECTION,true);  toggleOption(ServiceOption.REPLICATION,true);}  }
class C{  public ThreadManagedMetaBeanProperty(Class declaringClass,String name,Class type,Object iv){  super(name,type,null,null);  this.type=type;  this.declaringClass=declaringClass;  this.getter=new ThreadBoundGetter(name);  this.setter=new ThreadBoundSetter(name);  initialValue=iv;  instance2Prop=getInstance2PropName(name);}  }
class C{  public void onStartWearableActivityClick(View view){  LOGD(TAG,"Generating RPC");  new StartWearableActivityTask().execute();}  }
class C{  public static LazyPStackX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  public ECPublicKeyImpl(byte[] encoded) throws InvalidKeyException {  decode(encoded);}  }
class C{  public static <T>Collection<T> flatten(Iterable<? extends Iterable<T>> iterable){  return Iterate.flatCollect(iterable,Functions.<Iterable<T>>identity());}  }
class C{  public void runTransformThread(){  ThreadControllerWrapper.runThread(this,-1);}  }
class C{  public static void executeDropTable(final Connection connection,final String sql) throws SQLException {  executeDDL(connection,sql,DdlHelper.getDropIgnoreErrors(connection));}  }
class C{  @Override public void onMouseClicked(final MapMouseEvent e){  if (!isTriggerMouseButton(e)) {    return;  }  startDragPos=new DirectPosition2D();  startDragPos.setLocation(e.getMapPosition());}  }
class C{  public String toString(){  return "ERROR";}  }
class C{  private final boolean updateCircumcircle(List<double[]> points){  double[] pa=points.get(a), pb=points.get(b), pc=points.get(c);  final double abx=pb[0] - pa[0], aby=pb[1] - pa[1];  final double bcx=pc[0] - pb[0], bcy=pc[1] - pb[1];  final double D=abx * bcy - aby * bcx;  if (D == 0) {    m[0]=Double.NaN;    m[1]=Double.NaN;    r2=Double.NaN;    return false;  }  final double mabx=(pa[0] + pb[0]) * .5, maby=(pa[1] + pb[1]) * .5;  final double mbcx=(pb[0] + pc[0]) * .5, mbcy=(pb[1] + pc[1]) * .5;  final double beta=(abx * (mbcx - mabx) + aby * (mbcy - maby)) / D;  m[0]=mbcx - bcy * beta;  m[1]=mbcy + bcx * beta;  final double rx=pa[0] - m[0], ry=pa[1] - m[1];  r2=rx * rx + ry * ry;  return true;}  }
class C{  @Override public int hashCode(){  return this.type.hashCode() + (this.value == null ? 0 : this.value.hashCode());}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  public void insertValue(int position,Comparable key,double value){  insertValue(position,key,new Double(value));}  }
class C{  public static String encodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length() * 3);  for (  char c : s.toCharArray()) {    if (c < 256) {      sb.append(c);    } else {      sb.append("\\u");      sb.append(Character.forDigit((c >>> 12) & 0xf,16));      sb.append(Character.forDigit((c >>> 8) & 0xf,16));      sb.append(Character.forDigit((c >>> 4) & 0xf,16));      sb.append(Character.forDigit((c) & 0xf,16));    }  }  return sb.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node removedChild;  String childName;  String oldName;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);  oldName=oldChild.getNodeName();  removedChild=employeeNode.removeChild(oldChild);  assertNotNull("notnull",removedChild);  childName=removedChild.getNodeName();  assertEquals("nodeName",oldName,childName);}  }
class C{  @NonNull public static Comment loadComment(Element element,long commentId,int depth,boolean includeTradeScore,Comment.Type type){  Element editState=type == Comment.Type.COMMENT ? element.select(".comment__edit-state.is-hidden textarea[name=description]").first() : null;  String editableContent=null;  if (editState != null)   editableContent=editState.text();  element.select(".comment__edit-state").html("");  Element authorNode=element.select(type == Comment.Type.COMMENT ? ".comment__username" : ".author_name").first();  String author=authorNode.text();  boolean isOp=authorNode.hasClass("comment__username--op");  String avatar=null;  Element avatarNode=element.select(type == Comment.Type.COMMENT ? ".global__image-inner-wrap" : ".author_avatar").first();  if (avatarNode != null)   avatar=extractAvatar(avatarNode.attr("style"));  Element timeCreated=element.select(type == Comment.Type.COMMENT ? ".comment__actions > div span" : ".action_list > span > span").first();  String actions=type == Comment.Type.COMMENT ? ".comment__actions" : ".action_list";  Uri permalinkUri=Uri.parse(element.select(actions + " a[href^=/go/]").first().attr("href"));  Comment comment=includeTradeScore ? new TradeComment(commentId,author,depth,avatar,isOp,type) : new Comment(commentId,author,depth,avatar,isOp,type);  comment.setPermalinkId(permalinkUri.getPathSegments().get(2));  comment.setEditableContent(editableContent);  comment.setCreatedTime(Integer.valueOf(timeCreated.attr("data-timestamp")));  Element desc=element.select(type == Comment.Type.COMMENT ? ".comment__description" : ".review_description").first();  desc.select("blockquote").tagName("custom_quote");  String content=loadAttachedImages(comment,desc);  comment.setContent(content);  if (type == Comment.Type.COMMENT) {    comment.setDeleted(element.select(".comment__summary").first().select(".comment__delete-state").size() == 1);    comment.setHighlighted(element.select(".comment__parent > .comment__envelope").size() != 0);    Element roleName=element.select(".comment__role-name").first();    if (roleName != null)     comment.setAuthorRole(roleName.text().replace("(","").replace(")",""));    comment.setDeletable(element.select(".comment__actions__button.js__comment-delete").size() + element.select(".comment__actions__button.js__comment-undelete").size() == 1);  }  if (comment instanceof TradeComment && !comment.isDeleted()) {    try {      ((TradeComment)comment).setTradeScorePositive(Utils.parseInt(element.select(".is_positive").first().text()));      ((TradeComment)comment).setTradeScoreNegative(-Utils.parseInt(element.select(".is_negative").first().text()));      ((TradeComment)comment).setSteamID64(Long.valueOf(Uri.parse(element.select(".author_name").attr("href")).getPathSegments().get(1)));    } catch (    Exception e) {      Log.v(TAG,"Unable to parse feedback",e);    }  }  return comment;}  }
class C{  public void addCharset(FontFace face,char[] chars){  for (int i=0; i < chars.length; i++) {    char c=chars[i];    addChar(face,c);  }}  }
class C{  public void removeAllTestingCallbacks(){  testingCallbacks.clear();}  }
class C{  public WilcoxonSignedRanksTest(double median){  super(1,new AbsoluteObservationComparator());  this.median=median;}  }
class C{  public long manhattanDistance(final int x,final int y){  return Math.abs((long)this.x - x) + Math.abs((long)this.y - y);}  }
class C{  public boolean equals(Object value){  if (value instanceof Key) {    Key key=(Key)value;    return equals(key);  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.891 -0500",hash_original_method="11E4D1D9F03C7C44A0CBC902A480F9CD",hash_generated_method="14AD95AA2615FA2FF0C63374F2B31E6F") public static int HSVToColor(int alpha,float hsv[]){  if (hsv.length < 3) {    throw new RuntimeException("3 components required for hsv");  }  return nativeHSVToColor(alpha,hsv);}  }
class C{  public static UpdateUsersResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UpdateUsersResponseE object=new UpdateUsersResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","updateUsersResponse").equals(reader.getName())) {          object.setUpdateUsersResponse(org.oscm.xsd.UpdateUsersResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static boolean isHaploid(VcfRecord rec,int sample){  final int[] gtArray=getValidGt(rec,sample);  return gtArray.length == 1;}  }
class C{  protected void paint(SeaGlassContext context,Graphics g){  int selectedIndex=tabPane.getSelectedIndex();  ensureCurrentLayout();  paintContentBorder(tabContentContext,g,tabPlacement,selectedIndex);  paintTabArea(g,tabPlacement,selectedIndex);}  }
class C{  @Inject public HomePresenterImpl(HomeView homeView,App app){  this.homeView=homeView;  this.redditClient=app.getRedditClient();  this.preferenceManager=app.getPreferenceManager();  this.subredditItems=new ArrayList<SubredditItem>();}  }
class C{  private void purchaseStateChanged(Context context,String signedData,String signature){  Intent intent=new Intent(Consts.ACTION_PURCHASE_STATE_CHANGED);  intent.setClass(context,BillingService.class);  intent.putExtra(Consts.INAPP_SIGNED_DATA,signedData);  intent.putExtra(Consts.INAPP_SIGNATURE,signature);  context.startService(intent);}  }
class C{  public void toEPL(StringWriter writer){  writer.write(windowName);  if (optionalAsName != null) {    writer.write(" as ");    writer.write(optionalAsName);  }}  }
class C{  @SuppressWarnings("unchecked") public <T>T convertMessage(final Message message,final Class<T> clazz){  message.getMessageProperties().getHeaders().put(AbstractJavaTypeMapper.DEFAULT_CLASSID_FIELD_NAME,clazz.getTypeName());  return (T)rabbitTemplate.getMessageConverter().fromMessage(message);}  }
class C{  public void testParseArguments() throws Exception {  String toBeParsed="-Djava.compiler=NONE -Xms150m -Xmx2g";  JvmArguments parsedArguments=JvmArguments.parseArguments(toBeParsed);  assertEquals(150L,parsedArguments.getInitialHeap(ByteUnit.MEGABYTES));  assertEquals(2048L,parsedArguments.getMaxHeap(ByteUnit.MEGABYTES));  assertEquals("-Djava.compiler=NONE",parsedArguments.getGenericArgs());}  }
class C{  public static OrderEvent createOrderEvent(TradeOrder order,String statusString,int filled,int remaining,double avgFillPrice,int permId,int parentId,double lastFillPrice,int clientId,String whyHeld,ZonedDateTime timestamp){  OrderStatus.Status status=IbUtils.getOrderStatus(statusString);  OrderStatus orderStatus=new OrderStatus(status,order.getOrderId(),filled,remaining,new BigDecimal(avgFillPrice),order.getTicker(),timestamp);  OrderEvent orderEvent=new OrderEvent(order,orderStatus);  return orderEvent;}  }
class C{  public GlassFish3xStandaloneLocalConfiguration(String home){  super(home);}  }
class C{  protected void deliveryReceiveStart(ReceivePacket packet){  if (mReceiveListener != null)   mReceiveListener.onReceiveStart(this,packet);}  }
class C{  synchronized V put(long key,int hash,V value,int memory){  if (value == null) {    throw DataUtils.newIllegalArgumentException("The value may not be null");  }  V old;  Entry<V> e=find(key,hash);  boolean existed;  if (e == null) {    existed=false;    old=null;  } else {    existed=true;    old=e.value;    remove(key,hash);  }  if (memory > maxMemory) {    return old;  }  e=new Entry<V>();  e.key=key;  e.value=value;  e.memory=memory;  int index=hash & mask;  e.mapNext=entries[index];  entries[index]=e;  usedMemory+=memory;  if (usedMemory > maxMemory) {    evict();    if (stackSize > 0) {      addToQueue(queue,e);    }  }  mapSize++;  addToStack(e);  if (existed) {    access(key,hash);  }  return old;}  }
class C{  public static ReplyKeyboardMarkupBuilder builder(){  return new ReplyKeyboardMarkupBuilder();}  }
class C{  private static String generateTestCase(String testCase,int testCount,String e){  StringBuilder test=new StringBuilder();  test.append("  // Should not throw " + e + "\n");  test.append("  public final void testParse" + testCount + "() {\n");  test.append("    throwsParseException(\n");  test.append(quoteAndWrap(testCase) + "\n");  test.append("    );\n");  test.append(")}\n\n");  return test.toString();}  }
class C{  protected String convertLevelName(String levelName){switch (levelName) {case "CRITICAL":    return "FATAL";case "WARNING":  return "WARN";case "INFO":return "INFO";case "DEBUG":return "DEBUG";default :return "TRACE";}}  }
class C{  public boolean isClosing(){  return closing;}  }
class C{  public int length(){  return namesAndValues.size() / 2;}  }
class C{  public ExecutionNodeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private OutputNode writeStart(OutputNode parent,String name) throws Exception {  OutputNode node=new OutputElement(parent,this,name);  if (name == null) {    throw new NodeException("Can not have a null name");  }  return stack.push(node);}  }
class C{  public SignificantTermsBuilder shardSize(int shardSize){  bucketCountThresholds.setShardSize(shardSize);  return this;}  }
class C{  public Village(String name,int zip){  this.name=name;  this.zip=zip;}  }
class C{  public SimulationParamsEditor(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.072 -0500",hash_original_method="1AA1A4B748D7601F4F3826735499E6F6",hash_generated_method="6ADFA33411FC3091951FBDF6F40D4CB6") private void trackFPS(){  long nowTime=System.currentTimeMillis();  if (mFpsStartTime < 0) {    mFpsStartTime=mFpsPrevTime=nowTime;    mFpsNumFrames=0;  } else {    ++mFpsNumFrames;    String thisHash=Integer.toHexString(System.identityHashCode(this));    long frameTime=nowTime - mFpsPrevTime;    long totalTime=nowTime - mFpsStartTime;    Log.v(TAG,"0x" + thisHash + "\tFrame time:\t"+ frameTime);    mFpsPrevTime=nowTime;    if (totalTime > 1000) {      float fps=(float)mFpsNumFrames * 1000 / totalTime;      Log.v(TAG,"0x" + thisHash + "\tFPS:\t"+ fps);      mFpsStartTime=nowTime;      mFpsNumFrames=0;    }  }}  }
class C{  public StoreMessageAction(String npcName,String message){  this.npcName=checkNotNull(npcName);  this.message=checkNotNull(message);}  }
class C{  public NbtOutputStream(OutputStream out){  super(out);}  }
class C{  public static Motion createEaseInOutMotion(int sourceValue,int destinationValue,int duration){  return createCubicBezierMotion(sourceValue,destinationValue,duration,0,0.42f,0.58f,1);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public void addMountPoint(MountInfo param){  if (localMountPoint == null) {    localMountPoint=new MountInfo[]{};  }  localMountPointTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localMountPoint);  list.add(param);  this.localMountPoint=(MountInfo[])list.toArray(new MountInfo[list.size()]);}  }
class C{  private void testUpdateProcessorsRunOnlyOnce(final String chain) throws Exception {  final String fieldA="regex_dup_A_s";  final String fieldB="regex_dup_B_s";  final String val="x";  final String expected="x_x";  final ModifiableSolrParams updateParams=new ModifiableSolrParams();  updateParams.add(UpdateParams.UPDATE_CHAIN,chain);  final int numLoops=atLeast(50);  for (int i=1; i < numLoops; i++) {    SolrClient updateClient=clients.get(random().nextInt(clients.size()));    SolrInputDocument doc=new SolrInputDocument();    addFields(doc,id,i,fieldA,val,fieldB,val);    UpdateResponse ures=add(updateClient,updateParams,doc);    assertEquals(chain + ": update failed",0,ures.getStatus());    ures=updateClient.commit();    assertEquals(chain + ": commit failed",0,ures.getStatus());  }  for (int i=1; i < numLoops; i++) {    final String query=id + ":" + i;    QueryResponse qres=queryServer(new SolrQuery(query));    assertEquals(chain + ": query failed: " + query,0,qres.getStatus());    assertEquals(chain + ": didn't find correct # docs with query: " + query,1,qres.getResults().getNumFound());    SolrDocument doc=qres.getResults().get(0);    for (    String field : new String[]{fieldA,fieldB}) {      assertEquals(chain + ": doc#" + i+ " has wrong value for "+ field,expected,doc.getFirstValue(field));    }  }}  }
class C{  private void addChart(){  JFreeChart chart=ChartFactory.createPieChart(getTitle(),dataset,false,true,false);  chart.addProgressListener(locker);  PiePlot plot=(PiePlot)chart.getPlot();  plot.setToolTipGenerator(dataset);  mainPanel().add(BorderLayout.CENTER,new ChartPanel(chart));}  }
class C{  public Polynomial numerator(){  return new Polynomial(N);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ObjectName createDistributionLocator(String host,int port,String workingDirectory,String productDirectory,String remoteCommand) throws MalformedObjectNameException {  try {    DistributionLocatorJmxImpl locator=(DistributionLocatorJmxImpl)addDistributionLocator();    DistributionLocatorConfig config=locator.getConfig();    config.setHost(host);    config.setPort(port);    config.setWorkingDirectory(workingDirectory);    config.setProductDirectory(productDirectory);    config.setRemoteCommand(remoteCommand);    return new ObjectName(locator.getMBeanName());  } catch (  RuntimeException e) {    logger.warn(e.getMessage(),e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    logger.error(e.getMessage(),e);    throw e;  }}  }
class C{  public WrapLayout(){  super();}  }
class C{  public final IRequest fireMessage(String recipient,String type,Object object){  try {    return base.fireMessage(new Message(new Address(getName()),new Address(recipient),type,object));  } catch (  IOException e) {    return new StaticRequest(IRequest.ERROR,e);  }}  }
class C{  private String safeName(String str){  return str.replaceAll("[^A-Za-z0-9]","");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void view(){  new ImageViewWindow(event.get("title"),this);}  }
class C{  public AztecDetectorResult detect(boolean isMirror) throws NotFoundException {  Point pCenter=getMatrixCenter();  ResultPoint[] bullsEyeCorners=getBullsEyeCorners(pCenter);  if (isMirror) {    ResultPoint temp=bullsEyeCorners[0];    bullsEyeCorners[0]=bullsEyeCorners[2];    bullsEyeCorners[2]=temp;  }  extractParameters(bullsEyeCorners);  BitMatrix bits=sampleGrid(image,bullsEyeCorners[shift % 4],bullsEyeCorners[(shift + 1) % 4],bullsEyeCorners[(shift + 2) % 4],bullsEyeCorners[(shift + 3) % 4]);  ResultPoint[] corners=getMatrixCornerPoints(bullsEyeCorners);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  protected static Config topologyConfigs(String topologyPackage,String topologyBinaryFile,String topologyDefnFile,TopologyAPI.Topology topology){  String pkgType;  String basename=FileUtils.getBaseName(topologyBinaryFile);  if (FileUtils.isOriginalPackagePex(basename)) {    pkgType="pex";  } else   if (FileUtils.isOriginalPackageJar(basename)) {    pkgType="jar";  } else {    pkgType="tar";  }  Config config=Config.newBuilder().put(Keys.topologyId(),topology.getId()).put(Keys.topologyName(),topology.getName()).put(Keys.topologyDefinitionFile(),topologyDefnFile).put(Keys.topologyPackageFile(),topologyPackage).put(Keys.topologyBinaryFile(),topologyBinaryFile).put(Keys.topologyPackageType(),pkgType).build();  return config;}  }
class C{  public static String toAsciiString(byte[] buffer){  return toAsciiString(buffer,0,buffer.length);}  }
class C{  public byte[] generateSeed(int numBytes,boolean fast){  SeedGenerator gen=new SeedGenerator();  return gen.generateSeed(numBytes,fast);}  }
class C{  public Type1Message(byte[] material) throws IOException {  parse(material);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_DocType_ID"))     p_C_DocType_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) % m_right.num(xctxt));}  }
class C{  private void handleIncomingEvent(final Message message,final EventTopic topic){  if (EventTopic.UPDATE_ACTION_STATUS.equals(topic)) {    updateActionStatus(message);    return;  }  logAndThrowMessageError(message,"Got event without appropriate topic.");}  }
class C{  @Override public int hashCode(){  int hash=37;  hash=37 * hash + Float.floatToIntBits(m00);  hash=37 * hash + Float.floatToIntBits(m01);  hash=37 * hash + Float.floatToIntBits(m02);  hash=37 * hash + Float.floatToIntBits(m10);  hash=37 * hash + Float.floatToIntBits(m11);  hash=37 * hash + Float.floatToIntBits(m12);  hash=37 * hash + Float.floatToIntBits(m20);  hash=37 * hash + Float.floatToIntBits(m21);  hash=37 * hash + Float.floatToIntBits(m22);  return hash;}  }
class C{  private void checkBuffer(MTreeNode newNode){  if (!newNode.isSummary() || !newNode.getAllowsChildren())   return;  for (int i=0; i < m_buffer.size(); i++) {    MTreeNode node=(MTreeNode)m_buffer.get(i);    if (node.getParent_ID() == newNode.getNode_ID()) {      try {        newNode.add(node);      } catch (      Exception e) {        log.severe("Adding " + node.getName() + " to "+ newNode.getName()+ ": "+ e.getMessage());      }      m_buffer.remove(i);      i--;    }  }}  }
class C{  public void overrideBackbutton(boolean override){  LOG.i("App","WARNING: Back Button Default Behavior will be overridden.  The backbutton event will be fired!");  webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_BACK,override);}  }
class C{  private Type[] popParams(){  List<Type> p=this.stack.pop();  return p.toArray(new Type[p.size()]);}  }
class C{  public void contextualIncrementSelectedObjects(){  for (  PNode node : getSelection()) {    if (node instanceof NeuronNode) {      NeuronNode neuronNode=(NeuronNode)node;      neuronNode.getNeuron().getUpdateRule().contextualIncrement(neuronNode.getNeuron());    }  }}  }
class C{  public void initialize(){}  }
class C{  @Override public void uninstall() throws UninstallException {  final List<File> lombokJarsForWhichCantDeleteSelf=new ArrayList<File>();  StringBuilder newContents=new StringBuilder();  if (eclipseIniPath.exists()) {    try {      FileInputStream fis=new FileInputStream(eclipseIniPath);      try {        BufferedReader br=new BufferedReader(new InputStreamReader(fis));        String line;        while ((line=br.readLine()) != null) {          if (JAVA_AGENT_LINE_MATCHER.matcher(line).matches())           continue;          Matcher m=BOOTCLASSPATH_LINE_MATCHER.matcher(line);          if (m.matches()) {            StringBuilder elemBuilder=new StringBuilder();            elemBuilder.append("-Xbootclasspath/a:");            boolean first=true;            for (            String elem : m.group(1).split(Pattern.quote(File.pathSeparator))) {              if (elem.toLowerCase().endsWith("lombok.jar"))               continue;{                if (elem.toLowerCase().endsWith("lombok.eclipse.agent.jar"))                 continue;              }              if (first)               first=false; else               elemBuilder.append(File.pathSeparator);              elemBuilder.append(elem);            }            if (!first)             newContents.append(elemBuilder.toString()).append(OS_NEWLINE);            continue;          }          newContents.append(line).append(OS_NEWLINE);        }        br.close();      }  finally {        fis.close();      }      FileOutputStream fos=new FileOutputStream(eclipseIniPath);      try {        fos.write(newContents.toString().getBytes());      }  finally {        fos.close();      }    } catch (    IOException e) {      throw new UninstallException("Cannot uninstall lombok from " + name + generateWriteErrorMessage(),e);    }  }  for (  File dir : getUninstallDirs()) {    File lombokJar=new File(dir,"lombok.jar");    if (lombokJar.exists()) {      if (!lombokJar.delete()) {        if (IdeFinder.getOS() == IdeFinder.OS.WINDOWS && Installer.isSelf(lombokJar.getAbsolutePath())) {          lombokJarsForWhichCantDeleteSelf.add(lombokJar);        } else {          throw new UninstallException("Can't delete " + lombokJar.getAbsolutePath() + generateWriteErrorMessage(),null);        }      }    }{      File agentJar=new File(dir,"lombok.eclipse.agent.jar");      if (agentJar.exists()) {        agentJar.delete();      }    }  }  if (!lombokJarsForWhichCantDeleteSelf.isEmpty()) {    throw new UninstallException(true,String.format("lombok.jar cannot delete itself on windows.\nHowever, lombok has been uncoupled from your %s.\n" + "You can safely delete this jar file. You can find it at:\n%s",getTypeName(),lombokJarsForWhichCantDeleteSelf.get(0).getAbsolutePath()),null);  }}  }
class C{  public static void assertBool(boolean b){  if (verbose) {    log("assertBool(" + b + ")");  }  if (!b) {    throw new RuntimeException();  }}  }
class C{  public void writeCoverageTable(Environment env,ClassDefinition c,DataOutputStream out,ConstantPool tab,long whereField) throws IOException {  Vector<Cover> TableLot=new Vector<>();  boolean begseg=false;  boolean begmeth=false;  @SuppressWarnings("deprecation") long whereClass=((SourceClass)c).getWhere();  Vector<Long> whereTry=new Vector<>();  int numberTry=0;  int count=0;  for (Instruction inst=first; inst != null; inst=inst.next) {    long n=(inst.where >> WHEREOFFSETBITS);    if (n > 0 && inst.opc != opc_label) {      if (!begmeth) {        if (whereClass == inst.where)         TableLot.addElement(new Cover(CT_FIKT_METHOD,whereField,inst.pc)); else         TableLot.addElement(new Cover(CT_METHOD,whereField,inst.pc));        count++;        begmeth=true;      }      if (!begseg && !inst.flagNoCovered) {        boolean findTry=false;        for (Enumeration<Long> e=whereTry.elements(); e.hasMoreElements(); ) {          if (e.nextElement().longValue() == inst.where) {            findTry=true;            break;          }        }        if (!findTry) {          TableLot.addElement(new Cover(CT_BLOCK,inst.where,inst.pc));          count++;          begseg=true;        }      }    }switch (inst.opc) {case opc_label:      begseg=false;    break;case opc_ifeq:case opc_ifne:case opc_ifnull:case opc_ifnonnull:case opc_ifgt:case opc_ifge:case opc_iflt:case opc_ifle:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmpgt:case opc_if_icmpge:case opc_if_icmplt:case opc_if_icmple:case opc_if_acmpeq:case opc_if_acmpne:{    if (inst.flagCondInverted) {      TableLot.addElement(new Cover(CT_BRANCH_TRUE,inst.where,inst.pc));      TableLot.addElement(new Cover(CT_BRANCH_FALSE,inst.where,inst.pc));    } else {      TableLot.addElement(new Cover(CT_BRANCH_FALSE,inst.where,inst.pc));      TableLot.addElement(new Cover(CT_BRANCH_TRUE,inst.where,inst.pc));    }    count+=2;    begseg=false;    break;  }case opc_goto:{  begseg=false;  break;}case opc_ret:case opc_return:case opc_ireturn:case opc_lreturn:case opc_freturn:case opc_dreturn:case opc_areturn:case opc_athrow:{break;}case opc_try:{whereTry.addElement(Long.valueOf(inst.where));begseg=false;break;}case opc_tableswitch:{SwitchData sw=(SwitchData)inst.value;for (int i=sw.minValue; i <= sw.maxValue; i++) {TableLot.addElement(new Cover(CT_CASE,sw.whereCase(new Integer(i)),inst.pc));count++;}if (!sw.getDefault()) {TableLot.addElement(new Cover(CT_SWITH_WO_DEF,inst.where,inst.pc));count++;} else {TableLot.addElement(new Cover(CT_CASE,sw.whereCase("default"),inst.pc));count++;}begseg=false;break;}case opc_lookupswitch:{SwitchData sw=(SwitchData)inst.value;for (Enumeration<Integer> e=sw.sortedKeys(); e.hasMoreElements(); ) {Integer v=e.nextElement();TableLot.addElement(new Cover(CT_CASE,sw.whereCase(v),inst.pc));count++;}if (!sw.getDefault()) {TableLot.addElement(new Cover(CT_SWITH_WO_DEF,inst.where,inst.pc));count++;} else {TableLot.addElement(new Cover(CT_CASE,sw.whereCase("default"),inst.pc));count++;}begseg=false;break;}}}Cover Lot;long ln, pos;out.writeShort(count);for (int i=0; i < count; i++) {Lot=TableLot.elementAt(i);ln=(Lot.Addr >> WHEREOFFSETBITS);pos=(Lot.Addr << (64 - WHEREOFFSETBITS)) >> (64 - WHEREOFFSETBITS);out.writeShort(Lot.NumCommand);out.writeShort(Lot.Type);out.writeInt((int)ln);out.writeInt((int)pos);if (!(Lot.Type == CT_CASE && Lot.Addr == 0)) {JcovClassCountArray[Lot.Type]++;}}}  }
class C{  private Instance generateExample(Instances format,Random randomG,SubspaceClusterDefinition cl,String cName){  boolean makeInteger=cl.isInteger();  int num=-1;  Instance example=null;  int numAtts=m_NumAttributes;  if (getClassFlag()) {    numAtts++;  }  example=new DenseInstance(numAtts);  example.setDataset(format);  boolean[] attributes=cl.getAttributes();  double[] minValue=cl.getMinValue();  double[] maxValue=cl.getMaxValue();  double value;  int clusterI=-1;  for (int i=0; i < m_NumAttributes; i++) {    if (attributes[i]) {      clusterI++;      num++;      if (isBoolean(i) || isNominal(i)) {        if (minValue[clusterI] == maxValue[clusterI]) {          value=minValue[clusterI];        } else {          int numValues=(int)(maxValue[clusterI] - minValue[clusterI] + 1.0);          value=randomG.nextInt(numValues);          value+=minValue[clusterI];        }      } else {        value=randomG.nextDouble() * (maxValue[num] - minValue[num]) + minValue[num];        if (makeInteger) {          value=Math.round(value);        }      }      example.setValue(i,value);    } else {      example.setMissing(i);    }  }  if (getClassFlag()) {    example.setClassValue(cName);  }  return example;}  }
class C{  protected void sendAllocate() throws SQLException, IOException {  final XdrOutputStream xdrOut=getXdrOut();  xdrOut.writeInt(WireProtocolConstants.op_allocate_statement);  xdrOut.writeInt(getDatabase().getHandle());}  }
class C{  public Builder add(String line){  int index=line.indexOf(":");  if (index == -1) {    throw new IllegalArgumentException("Unexpected header: " + line);  }  return add(line.substring(0,index).trim(),line.substring(index + 1));}  }
class C{  public static byte[] toByteArray(Number[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].byteValue();  }  return result;}  }
class C{  public boolean executeCommand(BufferedReader reader){  for (  String s : COMMAND_HELP_MESSAGE) {    out.println(s);  }  System.err.print("Command: ");  try {    String command=reader.readLine();    String[] parts=command.trim().split(" ",2);    String name=parts[0];    String parameters=parts.length > 1 ? parts[1] : "";    if (name.equals("list")) {      showAllCells();    } else     if (name.equals("load")) {      loadSheet(reader);    } else     if (name.equals("search")) {      search(parameters);    } else     if (name.equals("range")) {      String[] s=parameters.split(" ",4);      showRange(Integer.parseInt(s[0]),Integer.parseInt(s[1]),Integer.parseInt(s[2]),Integer.parseInt(s[3]));    } else     if (name.equals("set")) {      String[] s=parameters.split(" ",3);      setCell(Integer.parseInt(s[0]),Integer.parseInt(s[1]),s[2]);    } else     if (name.equals("batch")) {      processBatchRequest(reader);    } else     if (name.startsWith("q") || name.startsWith("exit")) {      return false;    } else {      out.println("Unknown command.");    }  } catch (  Exception e) {    e.printStackTrace();  }  return true;}  }
class C{  public void addArchive(ArcDef... arcDefs){  for (  ArcDef arcDef : arcDefs) {    addArchive(arcDef);  }}  }
class C{  float pointToEvent(float x,float y,Event event){  float left=event.left;  float right=event.right;  float top=event.top;  float bottom=event.bottom;  if (x >= left) {    if (x <= right) {      if (y >= top) {        if (y <= bottom) {          return 0f;        }        return y - bottom;      }      return top - y;    }    float dx=x - right;    if (y < top) {      float dy=top - y;      return (float)Math.sqrt(dx * dx + dy * dy);    }    if (y > bottom) {      float dy=y - bottom;      return (float)Math.sqrt(dx * dx + dy * dy);    }    return dx;  }  float dx=left - x;  if (y < top) {    float dy=top - y;    return (float)Math.sqrt(dx * dx + dy * dy);  }  if (y > bottom) {    float dy=y - bottom;    return (float)Math.sqrt(dx * dx + dy * dy);  }  return dx;}  }
class C{  private Object invokeOperationOnTargetMBean(final ObjectName namePattern,final String pidAttribute,final String methodName,final String[] attributes,final Object[] values) throws ConnectionFailedException, IOException, MBeanInvocationFailedException, PidUnavailableException {  ObjectName objectName=namePattern;  connect();  try {    final QueryExp constraint=buildQueryExp(pidAttribute,attributes,values);    final Set<ObjectName> mbeanNames=this.server.queryNames(namePattern,constraint);    if (mbeanNames.isEmpty()) {      throw new MBeanInvocationFailedException("Failed to find mbean matching '" + namePattern + "' with attribute '"+ pidAttribute+ "' of value '"+ this.pid+ "'");    }    if (mbeanNames.size() > 1) {      throw new MBeanInvocationFailedException("Found more than one mbean matching '" + namePattern + "' with attribute '"+ pidAttribute+ "' of value '"+ this.pid+ "'");    }    objectName=mbeanNames.iterator().next();    return invoke(objectName,methodName);  } catch (  InstanceNotFoundException e) {    throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on "+ objectName,e);  }catch (  MBeanException e) {    throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on "+ objectName,e);  }catch (  ReflectionException e) {    throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on "+ objectName,e);  } finally {    disconnect();  }}  }
class C{  public void handle(StateContext state,RootCollectionRelationshipContext ctx){  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  @Override public Iterator<Vertex> readVertices(final InputStream inputStream,final Function<Attachable<Vertex>,Vertex> vertexAttachMethod,final Function<Attachable<Edge>,Edge> edgeAttachMethod,final Direction attachEdgesOfThisDirection) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public void addExtraCertificates(List<X509Certificate> certificates){  this.extraCertificates.addAll(certificates);}  }
class C{  @Provides @Config("rdeSshIdentity") public static String provideSshIdentity(){  return "rde@charlestonroadregistry.com";}  }
class C{  private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){  final long deadline=timed ? System.nanoTime() + nanos : 0L;  Thread w=Thread.currentThread();  int spins=-1;  ThreadLocalRandom randomYields=null;  for (; ; ) {    Object item=s.item;    if (item != e) {      s.forgetContents();      return LinkedTransferQueue.<E>cast(item);    }    if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) {      unsplice(pred,s);      return e;    }    if (spins < 0) {      if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current();    } else     if (spins > 0) {      --spins;      if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield();    } else     if (s.waiter == null) {      s.waiter=w;    } else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos > 0L)       LockSupport.parkNanos(this,nanos);    } else {      LockSupport.park(this);    }  }}  }
class C{  protected final void doReleaseObjectPacket(int operation,int objectId) throws IOException, SQLException {  final XdrOutputStream xdrOut=getXdrOut();  xdrOut.writeInt(operation);  xdrOut.writeInt(objectId);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__COMMENT_1:    getComment_1().clear();  return;case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__CHANGE_TYPE_1:setChangeType_1(CHANGE_TYPE_1_EDEFAULT);return;case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__STATE_1:getState_1().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean isCompatible(Schema newSchema,Schema latestSchema){  List<Schema> schemas=new ArrayList<Schema>();  schemas.add(latestSchema);  try {    validator.validate(newSchema,schemas);  } catch (  SchemaValidationException e) {    return false;  }  return true;}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public Logfile(String value){  content=value;  setName(value);}  }
class C{  protected void assertSame(TMember expected,TMember actual){  Assert.assertEquals(((Type)(expected.eContainer())).getName() + '.' + expected.getName(),(((Type)(actual.eContainer())).getName() + '.' + actual.getName()));  Assert.assertSame(expected,actual);}  }
class C{  @ViewDebug.ExportedProperty(category="progress") public synchronized boolean isIndeterminate(){  return mIndeterminate;}  }
class C{  public QName(String qname,Element namespaceContext,PrefixResolver resolver,boolean validate){  _namespaceURI=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    if (null != namespaceContext) {      String prefix=qname.substring(0,indexOfNSSep);      _prefix=prefix;      if (prefix.equals("xml")) {        _namespaceURI=S_XMLNAMESPACEURI;      } else       if (prefix.equals("xmlns")) {        return;      } else {        _namespaceURI=resolver.getNamespaceForPrefix(prefix,namespaceContext);      }      if (null == _namespaceURI) {        throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));      }    } else {    }  }  _localName=(indexOfNSSep < 0) ? qname : qname.substring(indexOfNSSep + 1);  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  m_hashCode=toString().hashCode();}  }
class C{  public void managedAccountsUpdated(String accountNumber){}  }
class C{  public void applyLocalizedPattern(String pattern){  ndf.applyLocalizedPattern(pattern);}  }
class C{  public boolean canAttendMeetings(Interval[] intervals){  Arrays.sort(intervals,null);  for (int i=1; i < intervals.length; i++) {    if (intervals[i].start < intervals[i - 1].end) {      return false;    }  }  return true;}  }
class C{  public Object oldValue(){  return oldVal;}  }
class C{  private void startDemoService(){  if (getMode() != MODE.DEMO) {    setStatus(getString(R.string.demo));    Toast.makeText(this,getString(R.string.demo_started),Toast.LENGTH_SHORT).show();    boolean allowConnect=mBluetoothAdapter != null && mBluetoothAdapter.isEnabled();    setMenuItemVisible(R.id.secure_connect_scan,allowConnect);    setMenuItemVisible(R.id.disconnect,!allowConnect);    setMenuItemEnable(R.id.obd_services,true);    setMenuItemEnable(R.id.graph_actions,false);    Thread demoThread=new Thread(CommService.elm);    demoThread.start();  }}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (dtdHandler != null) {    dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);  }}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  int port=origin.getPort();  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PORT_ATTR)) {    if (!portMatch(port,cookie.getPorts())) {      throw new MalformedCookieException("Port attribute violates RFC 2965: " + "Request port not found in cookie's port list.");    }  }}  }
class C{  @Override public void write(DataOutput out) throws IOException {  this.key.write(out);  this.value.write(out);}  }
class C{  public static void assertWarnMessage(String msg){  if (list.isEmpty()) {    Assert.fail("No message present: " + msg);    return;  }  LoggingEvent evt=list.remove(0);  while ((evt.getLevel() == Level.INFO) || (evt.getLevel() == Level.DEBUG) || (evt.getLevel() == Level.TRACE)) {    if (list.isEmpty()) {      Assert.fail("Only debug/info messages present: " + msg);      return;    }    evt=list.remove(0);  }  if (evt.getLevel() != Level.WARN) {    Assert.fail("Level mismatch when looking for WARN message: \"" + msg + "\" found \""+ (String)evt.getMessage()+ "\"");  }  if (!compare((String)evt.getMessage(),msg)) {    Assert.fail("Looking for WARN message \"" + msg + "\" got \""+ evt.getMessage()+ "\"");  }}  }
class C{  public String toString(){  StringBuffer tempSpot=new StringBuffer("[");  for (int counter=0, maxCounter=getPathCount(); counter < maxCounter; counter++) {    if (counter > 0)     tempSpot.append(", ");    tempSpot.append(getPathComponent(counter));  }  tempSpot.append("]");  return tempSpot.toString();}  }
class C{  public void addSequence(final Array datum){  for (int i=0; i < datum.size(); i++) {    add(datum.get(i));  }}  }
class C{  final void invertGeneral(Matrix4f m1){  double temp[]=new double[16];  double result[]=new double[16];  int row_perm[]=new int[4];  int i, r, c;  temp[0]=m1.m00;  temp[1]=m1.m01;  temp[2]=m1.m02;  temp[3]=m1.m03;  temp[4]=m1.m10;  temp[5]=m1.m11;  temp[6]=m1.m12;  temp[7]=m1.m13;  temp[8]=m1.m20;  temp[9]=m1.m21;  temp[10]=m1.m22;  temp[11]=m1.m23;  temp[12]=m1.m30;  temp[13]=m1.m31;  temp[14]=m1.m32;  temp[15]=m1.m33;  if (!luDecomposition(temp,row_perm)) {    try {      throw new Exception("PROBLEM!!! Matrix4f12");    } catch (    Exception e) {      e.printStackTrace();    }  }  for (i=0; i < 16; i++)   result[i]=0.0;  result[0]=1.0;  result[5]=1.0;  result[10]=1.0;  result[15]=1.0;  luBacksubstitution(temp,row_perm,result);  this.m00=(float)result[0];  this.m01=(float)result[1];  this.m02=(float)result[2];  this.m03=(float)result[3];  this.m10=(float)result[4];  this.m11=(float)result[5];  this.m12=(float)result[6];  this.m13=(float)result[7];  this.m20=(float)result[8];  this.m21=(float)result[9];  this.m22=(float)result[10];  this.m23=(float)result[11];  this.m30=(float)result[12];  this.m31=(float)result[13];  this.m32=(float)result[14];  this.m33=(float)result[15];}  }
class C{  public static void isValidPath(String matsimConfiFile){  if (matsimConfiFile == null || matsimConfiFile.length() <= 0 || !pathExsits(matsimConfiFile))   throw new RuntimeException(matsimConfiFile + " is not a valid path to a MATSim configuration file. SHUTDOWN MATSim!");}  }
class C{  public static byte[] decodeBase64(String base64String){  return org.apache.commons.codec.binary.Base64.decodeBase64(base64String);}  }
class C{  InterchangeObjectBO(KLVPacket.Header header){  this.header=header;}  }
class C{  protected void highlight(boolean highlighted){  if (highlighted) {    this.annotation.getAttributes().setBorderColor(this.highlightColor);    this.annotation.getAttributes().setOpacity(this.maxOpacity);  } else {    this.annotation.getAttributes().setBorderColor(this.color);    this.annotation.getAttributes().setOpacity(this.minOpacity);  }}  }
class C{  void dispatchOnLauncherTransitionEnd(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionEnd(mLauncher,animated,toWorkspace);  }  dispatchOnLauncherTransitionStep(v,1f);}  }
class C{  public int indexOf(final TextPattern pattern){  return indexOf(pattern,0);}  }
class C{  public boolean searchComplete(INode n){  return n.equals(goal);}  }
class C{  private void writeCsvFile(String filename,int numberOfLinesAfterHeader){  BufferedWriter bw=IOUtils.getBufferedWriter(filename);  try {    for (int i=0; i < numberOfLinesAfterHeader; i++) {      bw.write("1,37ff9d8e04c164ee793e172a561c7b1e,585045643000,28.2402534484863,-26.1793403625488,22,8,1000,0,29,0,60");      bw.newLine();    }  } catch (  IOException e) {    e.printStackTrace();    fail("Could not write to " + filename);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      fail("Could not close " + filename);    }  }}  }
class C{  public int askNumControlBits(String systemName){  int i=matchTentative(systemName);  if (i >= 0) {    return ((TurnoutManager)getMgr(i)).askNumControlBits(systemName);  }  return ((TurnoutManager)getMgr(0)).askNumControlBits(systemName);}  }
class C{  public void initialize(Supplier<DataSource<CloseableReference<CloseableImage>>> dataSourceSupplier,String id,Object callerContext){  super.initialize(id,callerContext);  init(dataSourceSupplier);}  }
class C{  public void warning(String msg){  throw new RuntimeException();}  }
class C{  private Configuration(){}  }
class C{  public boolean performItemClick(int position){  if (isShowing()) {    if (mItemClickListener != null) {      final DropDownListView list=mDropDownList;      final View child=list.getChildAt(position - list.getFirstVisiblePosition());      final ListAdapter adapter=list.getAdapter();      mItemClickListener.onItemClick(list,child,position,adapter.getItemId(position));    }    return true;  }  return false;}  }
class C{  public JGraphicList(){  super();}  }
class C{  public void registerInstrumentationDefinition(String fqn,InstrumentationDefinition instrumentationResult){  ClassEntry entry=getOrCreateEntry(fqn);  if ((null != instrumentationResult) && !instrumentationResult.isEmpty()) {    entry.setInstrumentationResult(instrumentationResult);  } else {    entry.setInstrumentationResult(null);  }}  }
class C{  @Override public void onSlotAdded(final RPObject object,final String slotName,final RPObject sobject){}  }
class C{  public void testDoConfigureSetsDefaultPort() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(ServletPropertySet.PORT),"//weblogic:listen-port",config);}  }
class C{  public static ObjectNotFoundException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ObjectNotFoundException object=new ObjectNotFoundException();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement())       reader.next();      return object;    }    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ObjectNotFoundException").equals(reader.getName())) {          nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");          if ("true".equals(nillableValue) || "1".equals(nillableValue)) {            object.setObjectNotFoundException(null);            reader.next();          } else {            object.setObjectNotFoundException(DomainObjectExceptionBean.Factory.parse(reader));          }        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  void allocatePage(int pageId){  PageFreeList list=getFreeListForPage(pageId);  list.allocate(pageId);}  }
class C{  public void testFlush() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos){  };  cos.write(data);  cos.flush();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream did not flush the data.");  }}  }
class C{  private HttpClientStore(){  init();}  }
class C{  public FileInputStreamSink(String tag,InputStream in,File outputFile,boolean append) throws FileNotFoundException {  this.tag=tag;  this.inputStream=in;  this.outputFile=outputFile;  fos=new FileOutputStream(outputFile,append);}  }
class C{  public void removeAll() throws IgniteCheckedException {  cache.removeAll();}  }
class C{  public ProfileException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public synchronized void updateObject(int columnIndex,Object x) throws SQLException {  super.updateObject(columnIndex,JDBC42Helper.convertJavaTimeToJavaSql(x));}  }
class C{  public void reConnect(){  if (mBluetoothLEService != null) {    mBluetoothLEService.reConnect();  }}  }
class C{  private void startEditing(final int index){  final Property property=myProperties.get(index);  final PropertyEditor editor=property.getEditor();  if (editor == null) {    return;  }  editCellAt(index,convertColumnIndexToView(1));  LOG.assertTrue(editorComp != null);  JComponent prefComponent=editor.getPreferredFocusedComponent((JComponent)editorComp);  if (prefComponent == null) {    prefComponent=IdeFocusTraversalPolicy.getPreferredFocusedComponent((JComponent)editorComp);  }  if (prefComponent != null) {    prefComponent.requestFocusInWindow();  }}  }
class C{  public AuthorizeException(ErrorEntity entity){  super(Response.status(401).entity(entity).type("application/json").build());}  }
class C{  public void initDctNxM(int cols,int rows) throws IllegalArgumentException {  if (cols <= 0 || rows <= 0) {    throw new IllegalArgumentException("Dimensions out of range");  }  int i=0;  int j=0;  double cx=Math.sqrt(2.0 / cols);  double cy=Math.sqrt(2.0 / rows);  if (this.nxmCosTableX != null && this.N != cols) {    this.nxmCosTableX=null;  }  if (this.nxmCosTableY != null && this.M != rows) {    this.nxmCosTableY=null;  }  if (this.nxmCosTableX == null) {    this.nxmCosTableX=new double[cols][cols];  }  if (this.nxmCosTableY == null) {    this.nxmCosTableY=new double[rows][rows];  }  this.N=cols;  this.M=rows;  for (i=0; i < cols; i++) {    for (j=0; j < cols; j++) {      this.nxmCosTableX[i][j]=cx * Math.cos((Math.PI * ((2 * i + 1) * j)) / (2 * this.N));    }  }  for (i=0; i < rows; i++) {    for (j=0; j < rows; j++) {      this.nxmCosTableY[i][j]=cy * Math.cos((Math.PI * ((2 * i + 1) * j)) / (2 * this.M));    }  }}  }
class C{  @Scheduled(fixedDelayString="${batch.greeting.fixeddelay}") public void fixedDelayJob(){  logger.info("> fixedDelayJob");  counterService.increment("method.invoked.greetingBatchBean.fixedDelayJob");  final Collection<Greeting> greetings=greetingService.findAll();  logger.info(MESSAGE_FORMAT,greetings.size());  logger.info("< fixedDelayJob");}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  public double distanceSq(final Int3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  @NotNull public static TokenSet orSet(@NotNull TokenSet... sets){  if (sets.length == 0)   return EMPTY;  short shift=sets[0].myShift;  short max=sets[0].myMax;  for (int i=1; i < sets.length; i++) {    if (shift > sets[i].myShift)     shift=sets[i].myShift;    if (max < sets[i].myMax)     max=sets[i].myMax;  }  final TokenSet newSet=new TokenSet(shift,max);  for (  TokenSet set : sets) {    final int shiftDiff=set.myShift - newSet.myShift;    for (int i=0; i < set.myWords.length; i++) {      newSet.myWords[i + shiftDiff]|=set.myWords[i];    }  }  return newSet;}  }
class C{  public void handleSslErrorResponse(boolean proceed){  if (mRequest != null) {    mRequest.handleSslErrorResponse(proceed);  }}  }
class C{  private void handleJsonCreateAccount(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String userName, password, password2, email;  boolean mayContact=false;  String csrft;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    userName=json.getString("username");    password=json.getString("password");    password2=json.getString("password2");    email=json.getString("email");    mayContact=json.getBoolean("mayContact");    csrft=json.getString("csrft");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (userName != null) {    userName=userName.toLowerCase();  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    returnJson400(requestAndResponse,servletText.errorWrongCsrft());    return;  }  if (!allowSelfSignUp) {    returnJson400(requestAndResponse,servletText.errorSelfSignUpNotAllowed());    return;  }  if (userName == null || userName.isEmpty()) {    returnJson400(requestAndResponse,servletText.errorUsernameMustNotBeBlank());    return;  }  if (password == null || password.isEmpty()) {    returnJson400(requestAndResponse,servletText.errorFirstPasswordMustBeSet(true,null));    return;  }  if (password == null || password2.isEmpty()) {    returnJson400(requestAndResponse,servletText.errorSecondPasswordMustBeSet(true,null));    return;  }  if (!password2.equals(password)) {    returnJson400(requestAndResponse,servletText.errorPasswordsMustMatch());    return;  }  if (!AccountAttributeValidator.isUserNameValid(userName)) {    returnJson400(requestAndResponse,servletText.errorUserNameIsNotValid());    return;  }  if (!AccountAttributeValidator.isPasswordValid(password)) {    returnJson400(requestAndResponse,servletText.errorPasswordIsNotValid());    return;  }  if (email != null && email.isEmpty()) {    email=null;  }  if (email != null && !AccountAttributeValidator.isEmailValid(email)) {    returnJson400(requestAndResponse,servletText.errorEmailIsNotValid());    return;  }  try {    User user=dbLogic.getUserByUserName(userName);    if (user != null) {      returnJson400(requestAndResponse,servletText.errorUserNameIsAlreadyTaken());      return;    }    user=dbLogic.createUser(userName);    if (user == null) {      returnJson400(requestAndResponse,servletText.errorCouldNotCreateAccount());      return;    }    user.setPassword(DigestUtils.sha1Hex(password));    user.setEmail(email);    user.setMayContact(mayContact);    mapSessionToUser(requestAndResponse,user.getId());    dbLogic.commit();    returnJson200(requestAndResponse);  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);  mContentView.setVisibility(VISIBLE);}  }
class C{  public void addPieSegment(int dataIndex,float value,float startAngle,float angle){  mPieSegmentList.add(new PieSegment(dataIndex,value,startAngle,angle));}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public CreateTerrainVisualPanel3(){  initComponents();}  }
class C{  public long numCols() throws IOException, DMLException {  if (mc.colsKnown()) {    return mc.getCols();  } else {    return (long)getScalarBuiltinFunctionResult("ncol");  }}  }
class C{  public PropertyStringFormatException(String s){  super(s);}  }
class C{  public void run(final Network network){  run(network,Double.POSITIVE_INFINITY,thresholdExceeded.EITHER);}  }
class C{  public final synchronized void addVariation(String preComment,List<Move> pvMoves,boolean updateDefault){  for (int i=0; i < pvMoves.size(); i++) {    Move m=pvMoves.get(i);    String moveStr=TextIO.moveToUCIString(m);    String pre=(i == 0) ? preComment : "";    int varNo=game.tree.addMove(moveStr,"",0,pre,"");    game.tree.goForward(varNo,updateDefault);  }  for (int i=0; i < pvMoves.size(); i++)   game.tree.goBack();  gameTextListener.clear();  updateGUI();}  }
class C{  private List<List<Integer>> levelOrder(TreeNode root){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (root == null)   return res;  Queue<TreeNode> queue=new LinkedList<TreeNode>();  queue.add(root);  while (!queue.isEmpty()) {    List<Integer> curLevel=new ArrayList<Integer>();    int size=queue.size();    for (int i=0; i < size; i++) {      TreeNode n=queue.poll();      curLevel.add(n.val);      if (n.left != null)       queue.add(n.left);      if (n.right != null)       queue.add(n.right);    }    res.add(curLevel);  }  return res;}  }
class C{  synchronized void killPlayThread(){  setThreadShouldStop(true);  try {    if (playThread != null) {      do {        try {synchronized (simulation.state.schedule) {            playThread.interrupt();          }        } catch (        SecurityException ex) {        }        playThread.join(50);      } while (playThread.isAlive());      playThread=null;    }  } catch (  InterruptedException e) {    System.err.println("WARNING: This should never happen: " + e);  }}  }
class C{  public boolean isDefined(String name){  return table.containsKey(name);}  }
class C{  @Override public void delete(final T entity){  persistenceService.delete(entity);}  }
class C{  public boolean isDirty(){  return !dirtyKeys.isEmpty();}  }
class C{  public FrameBuffer captureEnd(){  if (enabled && capturing) {    capturing=false;    hasCaptured=true;    composite.end();    return composite.getResultBuffer();  }  return null;}  }
class C{  public Condition convertToCondition(){  if (equivalentCondition == null) {    List<Condition> conditions=new ArrayList<Condition>();    for (    BasicEffect subeffect : getSubEffects()) {      conditions.add(subeffect.convertToCondition());    }    if (conditions.isEmpty()) {      equivalentCondition=new VoidCondition();    } else     if (conditions.size() == 1) {      equivalentCondition=conditions.get(0);    } else     if (getOutputVariables().size() == 1) {      equivalentCondition=new ComplexCondition(conditions,BinaryOperator.OR);    } else {      equivalentCondition=new ComplexCondition(conditions,BinaryOperator.AND);    }  }  return equivalentCondition;}  }
class C{  public void start(){synchronized (ParallelGatewaySenderQueue.class) {    if (removalThread == null) {      removalThread=new BatchRemovalThread((GemFireCacheImpl)this.sender.getCache(),this);      removalThread.start();    }  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static boolean isPrimitive(String signature){  char t=signature.charAt(0);  return t == 'Z' || t == 'B' || t == 'C' || t == 'S' || t == 'I' || t == 'J' || t == 'F' || t == 'D';}  }
class C{  public BuyClientBuilder applicationName(final String applicationName){  this.applicationName=applicationName;  return this;}  }
class C{  public Object scope(){  return scope;}  }
class C{  private void hqr2(){  int nn=this.n;  int n=nn - 1;  int low=0;  int high=nn - 1;  double eps=pow(2.0,-52.0);  double exshift=0.0;  double p=0, q=0, r=0, s=0, z=0, t, w, x, y;  final double[] cr=new double[2];  double norm=hqr2GetNormStart(nn,low,high);  int iter=0;  while (n >= low) {    int l=n;    while (l > low) {      s=abs(H.get(l - 1,l - 1)) + abs(H.get(l,l));      if (s == 0.0) {        s=norm;      }      if (abs(H.get(l,l - 1)) < eps * s) {        break;      }      l--;    }    if (l == n) {      H.increment(n,n,exshift);      d[n]=H.get(n,n);      e[n]=0.0;      n--;      iter=0;    } else     if (l == n - 1) {      hqr2FoundTwoRoots(exshift,n,nn,low,high);      n=n - 2;      iter=0;    } else {      x=H.get(n,n);      y=0.0;      w=0.0;      if (l < n) {        y=H.get(n - 1,n - 1);        w=pow(H.get(n,n - 1),2);      }      if (iter == 10) {        exshift+=x;        RowColumnOps.addDiag(H,low,n + 1,-x);        s=abs(H.get(n,n - 1)) + abs(H.get(n - 1,n - 2));        x=y=0.75 * s;        w=-0.4375 * s * s;      }      if (iter == 30) {        s=(y - x) / 2.0;        s=s * s + w;        if (s > 0) {          s=sqrt(s);          if (y < x) {            s=-s;          }          s=x - w / ((y - x) / 2.0 + s);          RowColumnOps.addDiag(H,low,n + 1,-s);          exshift+=s;          x=y=w=0.964;        }      }      iter=iter + 1;      int m=n - 2;      while (m >= l) {        z=H.get(m,m);        r=x - z;        s=y - z;        p=(r * s - w) / H.get(m + 1,m) + H.get(m,m + 1);        q=H.get(m + 1,m + 1) - z - r- s;        r=H.get(m + 2,m + 1);        s=abs(p) + abs(q) + abs(r);        p=p / s;        q=q / s;        r=r / s;        if (m == l) {          break;        }        if (abs(H.get(m,m - 1)) * (abs(q) + abs(r)) < eps * (abs(p) * (abs(H.get(m - 1,m - 1)) + abs(z) + abs(H.get(m + 1,m + 1))))) {          break;        }        m--;      }      for (int i=m + 2; i <= n; i++) {        H.set(i,i - 2,0.0);        if (i > m + 2) {          H.set(i,i - 3,0.0);        }      }      for (int k=m; k <= n - 1; k++) {        boolean notlast=(k != n - 1);        if (k != m) {          p=H.get(k,k - 1);          q=H.get(k + 1,k - 1);          r=(notlast ? H.get(k + 2,k - 1) : 0.0);          x=abs(p) + abs(q) + abs(r);          if (x != 0.0) {            p=p / x;            q=q / x;            r=r / x;          }        }        if (x == 0.0)         break;        s=sqrt(p * p + q * q + r * r);        if (p < 0) {          s=-s;        }        if (s != 0) {          if (k != m) {            H.set(k,k - 1,-s * x);          } else           if (l != m) {            H.set(k,k - 1,-H.get(k,k - 1));          }          p=p + s;          x=p / s;          y=q / s;          z=r / s;          q=q / p;          r=r / p;          rowOpTransform2(H,k,nn - 1,x,k,y,notlast,z,r,q);          columnOpTransform2(H,0,min(n,k + 3),x,k,y,notlast,z,r,q);          columnOpTransform2(V,low,high,x,k,y,notlast,z,r,q);        }      }    }  }  if (norm == 0.0)   return;  backsubtituteFindVectors(nn,z,s,eps,norm,cr);  for (int i=0; i < nn; i++)   if (i < low | i > high) {    for (int j=i; j < nn - 1; j++)     H.set(i,j,V.get(i,j));  }  backtransform(nn,low,high);}  }
class C{  public boolean isFulfilled(Player p){  return condition.fire(p,null,null);}  }
class C{  public void removeBreakpoint(final Module module,final Address address){  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  final BreakpointStatus currentStatus=com.google.security.zynamics.binnavi.debug.models.breakpoints.enums.BreakpointStatus.BREAKPOINT_DELETING;  final BreakpointAddress breakpointAddress=new BreakpointAddress(module == null ? null : module.getNative(),new UnrelocatedAddress(new CAddress(address.toLong())));  breakpointManager.setBreakpointStatus(Sets.newHashSet(breakpointAddress),BreakpointType.REGULAR,currentStatus);}  }
class C{  public StyleSheet createStyleSheet(Node n,HashTable attrs){  throw new UnsupportedOperationException("StyleSheetFactory.createStyleSheet is not implemented");}  }
class C{  @DSComment("Character encoder/decoder") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.581 -0500",hash_original_method="6E4CD2CEA8B470E2711551FAF2632892",hash_generated_method="1D64F760E3C6751142FF43E5BE9BABBC") public boolean isError(){  return ((this.type) == 1);}  }
class C{  private List<Rule> readConfigurationFile(String filename){  if (LOG.isInfoEnabled()) {    LOG.info("loading " + filename);  }  try {    FileReader reader=new FileReader(filename);    return readConfiguration(reader);  } catch (  Exception e) {    LOG.error("Error loading rules from '" + filename + "': "+ e);    return EMPTY_RULES;  }}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  checkNotNull(startState.taskState.stage);  checkNotNull(patchState.taskState.stage);  if (null != startState.taskState.subStage && null != patchState.taskState.subStage) {    checkState(patchState.taskState.subStage.ordinal() >= startState.taskState.subStage.ordinal());  }  checkState(patchState.taskState.stage.ordinal() > TaskState.TaskStage.CREATED.ordinal());  checkState(patchState.taskState.stage.ordinal() >= startState.taskState.stage.ordinal());  checkState(startState.taskState.subStage == null || startState.taskState.stage.ordinal() <= TaskState.TaskStage.STARTED.ordinal());}  }
class C{  public final Vec2D addSelf(Vec2D v){  x+=v.x;  y+=v.y;  return this;}  }
class C{  protected void removeLinkFromStorage(Link lt){  String id=getLinkId(lt);  storageSourceService.deleteRowAsync(LINK_TABLE_NAME,id);}  }
class C{  private long readTimeStamp(byte[] buffer,int offset){  long seconds=read32(buffer,offset);  long fraction=read32(buffer,offset + 4);  return ((seconds - OFFSET_1900_TO_1970) * 1000) + ((fraction * 1000L) / 0x100000000L);}  }
class C{  public static String generateMessageHeader(final Class className){  return "[" + className.getSimpleName() + "] ";}  }
class C{  public StringField(String name,String value,Store stored){  super(name,value,stored == Store.YES ? TYPE_STORED : TYPE_NOT_STORED);}  }
class C{  public LocalVarTableAttr(){  vars=new Vector();}  }
class C{  @Override public final int read(byte[] buf,int offset,int length) throws IOException {  int readOffset=_readOffset;  int readLength=_readLength;  if (readLength <= readOffset) {    if (ZERO_COPY_SIZE <= length) {      int len=_source.read(buf,offset,length);      if (len > 0) {        _position+=len;        if (_isEnableReadTime)         _readTime=CurrentTime.currentTime();      }      return len;    }    if (!readBuffer()) {      return -1;    }    readOffset=_readOffset;    readLength=_readLength;  }  int sublen=Math.min(length,readLength - readOffset);  System.arraycopy(_readBuffer,readOffset,buf,offset,sublen);  _readOffset=readOffset + sublen;  return sublen;}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  public static void addVarbindsForLimitQuery(int maxRows,List<Object> varbinds,DBType dbType){  addVarbindsForLimitQuery(maxRows,0,varbinds,dbType);}  }
class C{  public ChooserIntentBuilder icon(@DrawableRes int icon){  mIntent.putExtra(BottomSheetChooserActivity.EXTRA_ICON,icon);  return this;}  }
class C{  public void addDataSet(final T dataSet){  dataSetList.add(dataSet);}  }
class C{  public static VideoOrientation parse(byte videoOrientation){  return new VideoOrientation(CameraOptions.convert((videoOrientation & 0x08) >>> 3),Orientation.convert(videoOrientation & 0x07));}  }
class C{  public void dispose(){}  }
class C{  public String escapeTextValue(Object value){  if (value instanceof XMLObjectImpl) {    return ((XMLObjectImpl)value).toXMLString(0);  }  String text=ScriptRuntime.toString(value);  if (text.length() == 0)   return text;  XmlObject xo=XmlObject.Factory.newInstance();  XmlCursor cursor=xo.newCursor();  cursor.toNextToken();  cursor.beginElement("a");  cursor.insertChars(text);  cursor.dispose();  String elementText=xo.toString();  int begin=elementText.indexOf('>') + 1;  int end=elementText.lastIndexOf('<');  return (begin < end) ? elementText.substring(begin,end) : "";}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.616 -0400",hash_original_method="B60560CE6362D056056BD3B06A5B4503",hash_generated_method="A79A8914298914F4D41BD6986C6163EA") public V removeAt(int index){  final Object old=mArray[(index << 1) + 1];  if (mSize <= 1) {    if (DEBUG)     Log.d(TAG,"remove: shrink from " + mHashes.length + " to 0");    freeArrays(mHashes,mArray,mSize);    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;    mSize=0;  } else {    if (mHashes.length > (BASE_SIZE * 2) && mSize < mHashes.length / 3) {      final int n=mSize > (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (BASE_SIZE * 2);      if (DEBUG)       Log.d(TAG,"remove: shrink from " + mHashes.length + " to "+ n);      final int[] ohashes=mHashes;      final Object[] oarray=mArray;      allocArrays(n);      mSize--;      if (index > 0) {        if (DEBUG)         Log.d(TAG,"remove: copy from 0-" + index + " to 0");        System.arraycopy(ohashes,0,mHashes,0,index);        System.arraycopy(oarray,0,mArray,0,index << 1);      }      if (index < mSize) {        if (DEBUG)         Log.d(TAG,"remove: copy from " + (index + 1) + "-"+ mSize+ " to "+ index);        System.arraycopy(ohashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(oarray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);      }    } else {      mSize--;      if (index < mSize) {        if (DEBUG)         Log.d(TAG,"remove: move " + (index + 1) + "-"+ mSize+ " to "+ index);        System.arraycopy(mHashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(mArray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);      }      mArray[mSize << 1]=null;      mArray[(mSize << 1) + 1]=null;    }  }  return (V)old;}  }
class C{  private boolean moveToNext(int direction){  resetHintTime();  final boolean result;  if (mNodeSearch.hasMatch()) {    result=mNodeSearch.nextResult(direction);  } else   if (direction == NodeFocusFinder.SEARCH_BACKWARD) {    result=mContext.getCursorController().previous(false,true,false);  } else {    result=mContext.getCursorController().next(false,true,false);  }  mHasNavigated=true;  return result;}  }
class C{  public boolean noPrimaryOrHasRegisteredInterest(){  return ((HARegionAdvisor)this.distAdvisor).noPrimaryOrHasRegisteredInterest();}  }
class C{  public ToStringBuilder append(final char value){  style.append(buffer,null,value);  return this;}  }
class C{  public void put(String email,MXID mxid){  if ((null != email) && (null != mxid) && !TextUtils.isEmpty(mxid.mMatrixId)) {    mMXIDsByElement.put(email,mxid);  }}  }
class C{  @Override protected void executeSQL(Connection conn,final String lockName,final String expandedSQL,final String expandedInsertSQL) throws LockException {  PreparedStatement ps=null;  ResultSet rs=null;  SQLException initCause=null;  int count=0;  do {    count++;    try {      ps=conn.prepareStatement(expandedSQL);      ps.setString(1,lockName);      if (getLog().isDebugEnabled()) {        getLog().debug("Lock '" + lockName + "' is being obtained: "+ Thread.currentThread().getName());      }      rs=ps.executeQuery();      if (!rs.next()) {        getLog().debug("Inserting new lock row for lock: '" + lockName + "' being obtained by thread: "+ Thread.currentThread().getName());        rs.close();        rs=null;        ps.close();        ps=null;        ps=conn.prepareStatement(expandedInsertSQL);        ps.setString(1,lockName);        int res=ps.executeUpdate();        if (res != 1) {          if (count < 3) {            try {              Thread.sleep(1000L);            } catch (            InterruptedException ignore) {              Thread.currentThread().interrupt();            }            continue;          }          throw new SQLException(Util.rtp("No row exists, and one could not be inserted in table " + TABLE_PREFIX_SUBST + TABLE_LOCKS+ " for lock named: "+ lockName,getTablePrefix(),getSchedulerNameLiteral()));        }      }      return;    } catch (    SQLException sqle) {      if (initCause == null)       initCause=sqle;      if (getLog().isDebugEnabled()) {        getLog().debug("Lock '" + lockName + "' was not obtained by: "+ Thread.currentThread().getName()+ (count < 3 ? " - will try again." : ""));      }      if (count < 3) {        try {          Thread.sleep(1000L);        } catch (        InterruptedException ignore) {          Thread.currentThread().interrupt();        }        continue;      }      throw new LockException("Failure obtaining db row lock: " + sqle.getMessage(),sqle);    } finally {      if (rs != null) {        try {          rs.close();        } catch (        Exception ignore) {        }      }      if (ps != null) {        try {          ps.close();        } catch (        Exception ignore) {        }      }    }  } while (count < 4);  throw new LockException("Failure obtaining db row lock, reached maximum number of attempts. Initial exception (if any) attached as root cause.",initCause);}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  put(index,new Long(value));  return this;}  }
class C{  public void addPaths(Reader input,int nodeType) throws IOException {  this.nodeType=nodeType;  String type;  String contents;  init(input);  while ((type=nextType()) != null) {    if (type.equals(LINESTRING)) {      contents=readNestedContents();      updateMap(parseLineString(contents));    } else     if (type.equals(MULTILINESTRING)) {      for (      List<Coord> list : parseMultilinestring()) {        updateMap(list);      }    } else {      readNestedContents();    }  }}  }
class C{  public String allowUnclassifiedInstancesTipText(){  return "Whether to allow unclassified instances.";}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active") && !System.getenv().containsKey("SPRING_PROFILES_ACTIVE")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  public static int keyBindingDescriptionToKeyCode(String keyBindingDescription){  if (StringUtils.isBlank(keyBindingDescription)) {    return 0;  } else   if (keyBindingDescription.equals("ESC")) {    return SWT.ESC;  } else   if (keyBindingDescription.equals("F1")) {    return SWT.F1;  } else   if (keyBindingDescription.equals("F2")) {    return SWT.F2;  } else   if (keyBindingDescription.equals("F3")) {    return SWT.F3;  } else   if (keyBindingDescription.equals("F4")) {    return SWT.F4;  } else   if (keyBindingDescription.equals("F5")) {    return SWT.F5;  } else   if (keyBindingDescription.equals("F6")) {    return SWT.F6;  } else   if (keyBindingDescription.equals("F7")) {    return SWT.F7;  } else   if (keyBindingDescription.equals("F8")) {    return SWT.F8;  } else   if (keyBindingDescription.equals("F9")) {    return SWT.F9;  } else   if (keyBindingDescription.equals("F10")) {    return SWT.F10;  } else   if (keyBindingDescription.equals("F11")) {    return SWT.F11;  } else   if (keyBindingDescription.equals("F12")) {    return SWT.F12;  } else   if (keyBindingDescription.equals("SCRLOCK")) {    return SWT.SCROLL_LOCK;  } else   if (VALID_ACTION_KEY_CODES.indexOf(keyBindingDescription.charAt(keyBindingDescription.length() - 1)) != -1) {    return keyBindingDescription.charAt(keyBindingDescription.length() - 1);  } else {    return 0;  }}  }
class C{  public <K2,V2>JavaPairRDD<Tuple2<K,V>,V2> joinGeodeRegion(String regionPath,Function<Tuple2<K,V>,K2> func,GeodeConnectionConf connConf){  GeodeJoinRDD<Tuple2<K,V>,K2,V2> rdd=rddf.joinGeodeRegion(regionPath,func,connConf);  ClassTag<Tuple2<K,V>> kt=fakeClassTag();  ClassTag<V2> vt=fakeClassTag();  return new JavaPairRDD<>(rdd,kt,vt);}  }
class C{  @Override public int hashCode(){  return mainAttributes.hashCode() ^ getEntries().hashCode();}  }
class C{  public static Bitmap createIconBitmap(Bitmap icon,Context context){  final int iconBitmapSize=getIconBitmapSize();  if (iconBitmapSize == icon.getWidth() && iconBitmapSize == icon.getHeight()) {    return icon;  }  return createIconBitmap(new BitmapDrawable(context.getResources(),icon),context);}  }
class C{  public static void writeBranchRatesModelRef(PartitionClockModel model,XMLWriter writer){  String tag="";  String id="";switch (model.getClockType()) {case STRICT_CLOCK:    tag=StrictClockBranchRatesParser.STRICT_CLOCK_BRANCH_RATES;  id=model.getPrefix() + BranchRateModel.BRANCH_RATES;break;case UNCORRELATED:tag=model.isContinuousQuantile() ? ContinuousBranchRatesParser.CONTINUOUS_BRANCH_RATES : DiscretizedBranchRatesParser.DISCRETIZED_BRANCH_RATES;id=model.getPrefix() + BranchRateModel.BRANCH_RATES;break;case RANDOM_LOCAL_CLOCK:tag=RandomLocalClockModelParser.LOCAL_BRANCH_RATES;id=model.getPrefix() + BranchRateModel.BRANCH_RATES;break;case FIXED_LOCAL_CLOCK:tag=LocalClockModelParser.LOCAL_CLOCK_MODEL;id=model.getPrefix() + BranchRateModel.BRANCH_RATES;break;case AUTOCORRELATED:tag=ACLikelihoodParser.AC_LIKELIHOOD;throw new UnsupportedOperationException("Autocorrelated relaxed clock model not implemented yet");default :throw new IllegalArgumentException("Unknown clock model");}writer.writeIDref(tag,id);}  }
class C{  public byte[] data(){  long now=System.currentTimeMillis();  _names.clear();  MessageOutputStream message=new MessageOutputStream(_maxUDPPayload,this);  message.writeShort(_multicast ? 0 : this.getId());  message.writeShort(this.getFlags());  message.writeShort(this.getNumberOfQuestions());  message.writeShort(this.getNumberOfAnswers());  message.writeShort(this.getNumberOfAuthorities());  message.writeShort(this.getNumberOfAdditionals());  for (  DNSQuestion question : _questions) {    message.writeQuestion(question);  }  for (  DNSRecord record : _answers) {    message.writeRecord(record,now);  }  for (  DNSRecord record : _authoritativeAnswers) {    message.writeRecord(record,now);  }  for (  DNSRecord record : _additionals) {    message.writeRecord(record,now);  }  byte[] result=message.toByteArray();  try {    message.close();  } catch (  IOException exception) {  }  return result;}  }
class C{  protected boolean isLinkAllowed(DatapathId src,OFPort srcPort,DatapathId dst,OFPort dstPort){  return true;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static double staticNextDoubleFromTo(double from,double to){synchronized (shared) {    return shared.nextDoubleFromTo(from,to);  }}  }
class C{  @SuppressWarnings("unused") private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request){  if (getMethods().isEmpty()) {    return this;  }  String expectedMethod=request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD);  return matchRequestMethod(expectedMethod);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getC_DocType_ID() == 0) {    MDocType types[]=MDocType.getOfDocBaseType(getCtx(),MDocType.DOCBASETYPE_MaterialPhysicalInventory);    if (types.length > 0)     setC_DocType_ID(types[0].getC_DocType_ID()); else {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@ @C_DocType_ID@"));      return false;    }  }  return true;}  }
class C{  @Override int calculateEndRightBound(float xAxisDelta){  return calculateEndLeftBound(xAxisDelta) + getView().getWidth();}  }
class C{  private GridNioFuture<?> send(ByteBuffer msg){  assert writeBuf.hasArray();  try {    while (msg.hasRemaining()) {      writeBuf.clear();      writeBuf.put(msg);      endp.outputStream().write(writeBuf.array(),0,writeBuf.position());    }  } catch (  IOException|IgniteCheckedException e) {    return new GridNioFinishedFuture<Object>(e);  }  return new GridNioFinishedFuture<>((Object)null);}  }
class C{  public SerializableLocation(Location location){  this.latitude=location.getLatitude();  this.longitude=location.getLongitude();  this.accuracy=location.getAccuracy();  this.altitude=location.getAltitude();  this.bearing=location.getBearing();  this.provider=location.getProvider();  this.speed=location.getSpeed();  this.time=location.getTime();  this.hasAccuracy=location.hasAccuracy();  this.hasAltitude=location.hasAltitude();  this.hasBearing=location.hasBearing();  this.hasSpeed=location.hasSpeed();}  }
class C{  public void head(String path,ParameterMap params,AsyncCallback callback){  HttpRequest req=new HttpHead(path,params);  executeAsync(req,callback);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.211 -0400",hash_original_method="0981A7B7481B56654552F826D97FC7A4",hash_generated_method="2B3B6CE00BC96205C31CB8C965B5AC44") final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  protected double sqDist(double[] v1,double[] v2){  assert (v1.length == v2.length) : "Lengths do not agree: " + v1.length + " "+ v2.length;  double sum=0;  for (int i=0; i < v1.length; i++) {    final double diff=v1[i] - v2[i];    sum+=diff * diff;  }  projectedDistances.increment(1);  return sum;}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  @Override public void input(Object input,Network network) throws Exception {}  }
class C{  public static Map<String,String> normalize(Properties props) throws SQLException {  Map<String,String> tempProps=new HashMap<>();  for (  String propertyName : props.stringPropertyNames()) {    tempProps.put(propertyName,props.getProperty(propertyName));  }  Map<String,String> result=new HashMap<>();  for (  Map.Entry<String,String> entry : tempProps.entrySet()) {    String propName=entry.getKey();    String propValue=entry.getValue();    PropertyInfo propInfo=aliases.get(propName);    if (propInfo != null) {      String originalName=propInfo.dpbName;      String shortName=propInfo.dpbName.substring(ParameterBufferHelper.DPB_PREFIX.length());      boolean hasDuplicate=tempProps.keySet().contains(originalName) || tempProps.keySet().contains(shortName);      hasDuplicate&=!propName.equals(shortName);      hasDuplicate&=!propName.equals(originalName);      if (hasDuplicate)       throw new FBSQLException("Specified properties contain " + "reference to a DPB parameter under original and " + "alias names: original name " + propInfo.dpbName + ", alias : "+ propInfo.alias);    }    if (propInfo == null) {      String tempKey=propName;      if (!tempKey.startsWith(ParameterBufferHelper.DPB_PREFIX))       tempKey=ParameterBufferHelper.DPB_PREFIX + tempKey;      propInfo=dpbMap.get(tempKey);    }    if (propInfo == null)     continue;    result.put(propInfo.dpbName,propValue);  }  handleEncodings(result);  return result;}  }
class C{  private boolean wouldLoop(Path dir,Object key){  for (  DirectoryNode ancestor : stack) {    Object ancestorKey=ancestor.key();    if (key != null && ancestorKey != null) {      if (key.equals(ancestorKey)) {        return true;      }    } else {      try {        if (Files.isSameFile(dir,ancestor.directory())) {          return true;        }      } catch (      IOException|SecurityException x) {      }    }  }  return false;}  }
class C{  public void astroid(String s,int pos,StringBuilder sb,List<String> res){  if (pos == sb.length()) {    res.add(sb.toString());    return;  }  if (s.charAt(pos) == '*') {    sb.setCharAt(pos,'0');    astroid(s,pos + 1,sb,res);    sb.setCharAt(pos,'1');    astroid(s,pos + 1,sb,res);  } else {    astroid(s,pos + 1,sb,res);  }}  }
class C{  public int size(){  return metadata.size();}  }
class C{  private void storeInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);}  }
class C{  private AttrPause(final String val) throws BOSHException {  super(val);  checkMinValue(1);}  }
class C{  public static WebElement findElementNotMovingAfter(SearchContext parent,By by,int timeoutInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  try {    final WebElement[] previous={null};    WebElementWait wait=new WebElementWait(parent,timeoutInSeconds);    return wait.until(null);  } catch (  TimeoutException e) {    throw new TimeoutException(String.format("Element %s did not stop moving after %s seconds",by,timeoutInSeconds),e);  }}  }
class C{  public RemoteLocatorResponse(){  super();}  }
class C{  public void enabledProtocols(String... enabledProtos){  this.enabledProtos=enabledProtos;}  }
class C{  static void putLong(long ptr,Vector arr){  for (int i=0; i < arr.size(); i++, ptr+=getLongSize()) {    putLong(ptr,((Long)arr.elementAt(i)).longValue());  }}  }
class C{  public int size(){  return mNodes.size();}  }
class C{  private boolean ensureDatabase(){  return !mShuttingDown && mReactDatabaseSupplier.ensureDatabase();}  }
class C{  protected void addChildrenToTree(GOETreeNode tree,HierarchyPropertyParser hpp){  try {    for (int i=0; i < hpp.numChildren(); i++) {      hpp.goToChild(i);      GOETreeNode child=new GOETreeNode(hpp.getValue());      if ((m_Object != null) && m_Object.getClass().getName().equals(hpp.fullValue())) {        m_treeNodeOfCurrentObject=child;      }      tree.add(child);      if (hpp.isLeafReached()) {        String algName=hpp.fullValue();        try {          Object alg=Class.forName(algName).newInstance();          String toolTip=Utils.getGlobalInfo(alg,true);          if (toolTip != null) {            child.setToolTipText(toolTip);          }        } catch (        Exception ex) {        }      }      addChildrenToTree(child,hpp);      hpp.goToParent();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public boolean isCData(){  return cdata;}  }
class C{  protected AbstractAnimation createAnimation(AnimationTarget target){  short type=parseType();  AnimatableValue from=null, to=null, by=null;  if (element.hasAttributeNS(null,SVG_FROM_ATTRIBUTE)) {    from=parseValue(element.getAttributeNS(null,SVG_FROM_ATTRIBUTE),type,target);  }  if (element.hasAttributeNS(null,SVG_TO_ATTRIBUTE)) {    to=parseValue(element.getAttributeNS(null,SVG_TO_ATTRIBUTE),type,target);  }  if (element.hasAttributeNS(null,SVG_BY_ATTRIBUTE)) {    by=parseValue(element.getAttributeNS(null,SVG_BY_ATTRIBUTE),type,target);  }  return new TransformAnimation(timedElement,this,parseCalcMode(),parseKeyTimes(),parseKeySplines(),parseAdditive(),parseAccumulate(),parseValues(type,target),from,to,by,type);}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[val1];    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[val2 | (k << 4)];    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[(l << 2) | val3];    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[val1];    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[val1];    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[val2 | (k << 4)];    encodedData[encodedIndex++]=LOOKUP_BASE_64_ALPHABET[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public static byte[] base64ToBytes(String base64) throws IllegalArgumentException {  if (base64 == null) {    return null;  }  try {    return Base64.decode(base64,Base64.NO_WRAP);  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Returning null on attempt to decode badly formed base64 string: " + base64);    return null;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String v=getString(stack);  String n=getString(stack);  String k=getString(stack);  String r=getString(stack);  if (!Sage.WINDOWS_OS)   return Boolean.FALSE;  return Boolean.valueOf(Sage.writeStringValue(Sage.getHKEYForName(r),k,n,v));}  }
class C{  public ReplicatorException(Throwable arg0){  super(arg0);  if (arg0 instanceof ReplicatorException) {    ReplicatorException exc=(ReplicatorException)arg0;    this.extraData=exc.extraData;    this.originalErrorMessage=exc.originalErrorMessage;  }}  }
class C{  public FastAdapterBottomSheetDialog<Item> withOnPreLongClickListener(FastAdapter.OnLongClickListener<Item> onPreLongClickListener){  this.mFastItemAdapter.withOnPreLongClickListener(onPreLongClickListener);  return this;}  }
class C{  public static void unregister(ISearchExecutor searchExecutor){  openedSearchControlMap.remove(searchExecutor);}  }
class C{  static synchronized public void reload(){  definitions.clear();  init();}  }
class C{  @Override public void generatePartition(Instances data) throws Exception {  buildClassifier(data);}  }
class C{  public static long copyLarge(final Reader input,final Writer output,final long inputOffset,final long length,final char[] buffer) throws IOException {  if (inputOffset > 0) {    IOUtils.skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && IOUtils.EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.ENTITY__SUPER_TYPE:    setSuperType((Entity)newValue);  return;case DatatypePackage.ENTITY__PROPERTIES:getProperties().clear();getProperties().addAll((Collection<? extends Property>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public OpenReplicatorManager(String serviceName) throws Exception {  this.serviceName=serviceName;  logger.info("Configuring state machine for replication service: " + serviceName);  Action waitAction=new WaitAction();  Action flushAction=new FlushAction();  Action insertHeartbeatAction=new InsertHeartbeatAction();  Action stopAction=new StopAction();  Action goOfflineAction=new GoOfflineAction();  Action goOnlineAfterProvisionAction=new GoOnlineAfterProvisionAction();  Action deferredOfflineAction=new DeferredOfflineAction();  Action offlineToSynchronizingAction=new OfflineToSynchronizingAction();  Action offlineToProvisioningAction=new OfflineToProvisioningAction();  Action clearDynamicPropertiesAction=new ClearDynamicPropertiesAction();  Action configureAction=new ConfigureAction();  Action errorClearAction=new ErrorClearAction();  Action startToOfflineAction=new StartToOfflineAction();  Action errorShutdownAction=new ErrorShutdownAction();  Action errorRecordingAction=new ErrorRecordingAction();  Action backupAction=new BackupAction();  Action restoreAction=new RestoreAction();  Action provisionAction=new ProvisionAction();  Action setRoleAction=new SetRoleAction();  Action extendedAction=new ExtendedAction();  Action leaveOnlineAction=new LeaveOnlineAction();  stmap=new StateTransitionMap();  State start=new State("START",StateType.START);  State offline=new State("OFFLINE",StateType.ACTIVE);  State offlineNormal=new State("NORMAL",StateType.ACTIVE,offline);  State offlineConfiguring=new State("CONFIGURING",StateType.ACTIVE,offline);  State offlineError=new State("ERROR",StateType.ACTIVE,offline,errorShutdownAction,errorClearAction);  State goingonline=new State("GOING-ONLINE",StateType.ACTIVE);  State goingonlineSynchronizing=new State("SYNCHRONIZING",StateType.ACTIVE,goingonline);  State goingonlineProvisioning=new State("PROVISIONING",StateType.ACTIVE,goingonline);  State offlineRestoring=new State("RESTORING",StateType.ACTIVE,offlineNormal);  State goingoffline=new State("GOING-OFFLINE",StateType.ACTIVE);  State online=new State("ONLINE",StateType.ACTIVE,null,null,leaveOnlineAction);  State end=new State("END",StateType.END,stopAction,null);  stmap.addState(start);  stmap.addState(offline);  stmap.addState(offlineNormal);  stmap.addState(offlineConfiguring);  stmap.addState(offlineError);  stmap.addState(goingonline);  stmap.addState(goingonlineSynchronizing);  stmap.addState(goingonlineProvisioning);  stmap.addState(offlineRestoring);  stmap.addState(goingoffline);  stmap.addState(online);  stmap.addState(end);  stmap.setErrorState(offlineError);  Guard startGuard=new EventTypeGuard(StartEvent.class);  Guard configureGuard=new EventTypeGuard(ConfigureEvent.class);  Guard configuredGuard=new EventTypeGuard(ConfiguredNotification.class);  Guard clearDynamicGuard=new EventTypeGuard(ClearDynamicPropertiesEvent.class);  Guard goOnlineGuard=new EventTypeGuard(GoOnlineEvent.class);  Guard goOnlineProvisionGuard=new EventTypeGuard(GoOnlineEventProvisioning.class);  Guard inSequenceGuard=new EventTypeGuard(InSequenceNotification.class);  Guard outOfSequenceGuard=new EventTypeGuard(OutOfSequenceNotification.class);  Guard goOfflineGuard=new EventTypeGuard(GoOfflineEvent.class);  Guard deferredOfflineGuard=new EventTypeGuard(DeferredOfflineEvent.class);  Guard heartbeatGuard=new EventTypeGuard(InsertHeartbeatEvent.class);  Guard flushGuard=new EventTypeGuard(FlushEvent.class);  Guard seqnoWaitGuard=new EventTypeGuard(SeqnoWaitEvent.class);  Guard stopGuard=new EventTypeGuard(StopEvent.class);  Guard errorGuard=new EventTypeGuard(ErrorNotification.class);  Guard consistencyFailStopGuard=new ConsistencyFailStopGuard();  Guard consistencyWarningGuard=new ConsistencyWarningGuard();  Guard backupGuard=new EventTypeGuard(BackupEvent.class);  Guard backupCompleteGuard=new EventTypeGuard(BackupCompletionNotification.class);  Guard restoreGuard=new EventTypeGuard(RestoreEvent.class);  Guard restoreCompleteGuard=new EventTypeGuard(RestoreCompletionNotification.class);  Guard provisionGuard=new EventTypeGuard(ProvisionEvent.class);  Guard setRoleGuard=new EventTypeGuard(SetRoleEvent.class);  Guard extendedActionGuard=new ExtendedActionEventGuard();  stmap.addTransition(new Transition("START-TO-OFFLINE",startGuard,start,startToOfflineAction,offlineNormal));  stmap.addTransition(new Transition("START-STOP",stopGuard,start,null,end));  stmap.addTransition(new Transition("OFFLINE-ERROR",errorGuard,offline,errorRecordingAction,offlineError));  stmap.addTransition(new Transition("OFFLINE-EXTENDED",extendedActionGuard,offline,extendedAction,offline));  stmap.addTransition(new Transition("OFFLINE-STOP",stopGuard,offline,null,end));  stmap.addTransition(new Transition("OFFLINE-OFFLINE-1",goOfflineGuard,offlineNormal,null,offlineNormal));  stmap.addTransition(new Transition("OFFLINE-OFFLINE-2",deferredOfflineGuard,offlineNormal,null,offlineNormal));  stmap.addTransition(new Transition("OFFLINE-CONFIGURE-1",configureGuard,offlineNormal,configureAction,offlineConfiguring));  stmap.addTransition(new Transition("OFFLINE-CLEAR-DYNAMIC-1",clearDynamicGuard,offlineNormal,clearDynamicPropertiesAction,offlineNormal));  stmap.addTransition(new Transition("OFFLINE-GO-ONLINE-1",goOnlineGuard,offlineNormal,offlineToSynchronizingAction,goingonlineSynchronizing));  stmap.addTransition(new Transition("OFFLINE-GO-ONLINE-2",goOnlineProvisionGuard,offlineNormal,offlineToProvisioningAction,goingonlineProvisioning));  stmap.addTransition(new Transition("OFFLINE-BACKUP-1",backupGuard,offlineNormal,backupAction,offlineNormal));  stmap.addTransition(new Transition("OFFLINE-RESTORE",restoreGuard,offlineNormal,restoreAction,offlineRestoring));  stmap.addTransition(new Transition("OFFLINE-PROVISION",provisionGuard,offlineNormal,provisionAction,offlineRestoring));  stmap.addTransition(new Transition("OFFLINE-SETROLE",setRoleGuard,offlineNormal,setRoleAction,offlineNormal));  stmap.addTransition(new Transition("CONFIGURE-OFFLINE",configuredGuard,offlineConfiguring,null,offlineNormal));  stmap.addTransition(new Transition("ERROR-NORMAL-1",goOfflineGuard,offlineError,null,offlineNormal));  stmap.addTransition(new Transition("ERROR-NORMAL-1",deferredOfflineGuard,offlineError,null,offlineNormal));  stmap.addTransition(new Transition("ERROR-CONFIGURE",configureGuard,offlineError,configureAction,offlineNormal));  stmap.addTransition(new Transition("ERROR-CLEAR-DYNAMIC-2",clearDynamicGuard,offlineError,clearDynamicPropertiesAction,offlineNormal));  stmap.addTransition(new Transition("ERROR-GO-ONLINE",goOnlineGuard,offlineError,offlineToSynchronizingAction,goingonlineSynchronizing));  stmap.addTransition(new Transition("ERROR-BACKUP",backupGuard,offlineError,backupAction,offlineError));  stmap.addTransition(new Transition("ERROR-RESTORE",restoreGuard,offlineNormal,restoreAction,offlineRestoring));  stmap.addTransition(new Transition("BACKUP-OFFLINE",backupCompleteGuard,offline,null,offlineNormal));  stmap.addTransition(new Transition("RESTORE-OFFLINE",restoreCompleteGuard,offlineRestoring,null,offlineNormal));  stmap.addTransition(new Transition("SYNCHRONIZING-ERROR",errorGuard,goingonline,errorRecordingAction,offlineError));  stmap.addTransition(new Transition("GOING-ONLINE-EXTENDED",extendedActionGuard,goingonline,extendedAction,goingonline));  stmap.addTransition(new Transition("SYNCHRONIZING-SHUTDOWN",goOfflineGuard,goingonlineSynchronizing,goOfflineAction,goingoffline));  stmap.addTransition(new Transition("ONLINE-SHUTDOWN",deferredOfflineGuard,goingonlineSynchronizing,deferredOfflineAction,goingonlineSynchronizing));  stmap.addTransition(new Transition("SYNCHRONIZING-ONLINE",inSequenceGuard,goingonlineSynchronizing,null,online));  stmap.addTransition(new Transition("PROVISIONING-ONLINE",inSequenceGuard,goingonlineProvisioning,goOnlineAfterProvisionAction,online));  stmap.addTransition(new Transition("ONLINE-SHUTDOWN",goOfflineGuard,online,goOfflineAction,goingoffline));  stmap.addTransition(new Transition("ONLINE-SHUTDOWN",deferredOfflineGuard,online,deferredOfflineAction,online));  stmap.addTransition(new Transition("ONLINE-OUTOFSEQUENCE",outOfSequenceGuard,online,null,goingonlineSynchronizing));  stmap.addTransition(new Transition("CONSISTENCY-ERROR",consistencyFailStopGuard,online,errorRecordingAction,offlineError));  stmap.addTransition(new Transition("CONSISTENCY-WARNING",consistencyWarningGuard,online,null,online));  stmap.addTransition(new Transition("ONLINE-ERROR",errorGuard,online,errorRecordingAction,offlineError));  stmap.addTransition(new Transition("SEQNO-WAIT",seqnoWaitGuard,online,waitAction,online));  stmap.addTransition(new Transition("HOT-SLAVE-BACKUP",backupGuard,online,backupAction,online));  stmap.addTransition(new Transition("HOT-SLAVE-BACKUP-COMPLETE",backupCompleteGuard,online,null,online));  stmap.addTransition(new Transition("FLUSH",flushGuard,online,flushAction,online));  stmap.addTransition(new Transition("HEARTBEAT",heartbeatGuard,online,insertHeartbeatAction,online));  stmap.addTransition(new Transition("ONLINE-EXTENDED",extendedActionGuard,online,extendedAction,online));  stmap.addTransition(new Transition("GOING-OFFLINE-OFFLINE",new PositiveGuard(),goingoffline,null,offlineNormal));  stmap.addTransition(new Transition("GOING-OFFLINE-EXTENDED",extendedActionGuard,goingoffline,extendedAction,goingoffline));  stmap.build();  sm=new StateMachine(stmap,new EntityAdapter(this));  sm.addListener(this);  eventDispatcher=new EventDispatcherTask(sm);  eventDispatcher.setListener(this);  eventDispatcher.start(serviceName + "-dispatcher");  ReplicatorRuntimeConf runtimeConf=ReplicatorRuntimeConf.getConfiguration(serviceName);  propertiesManager=new PropertiesManager(runtimeConf.getReplicatorProperties(),runtimeConf.getReplicatorDynamicProperties(),runtimeConf.getReplicatorDynamicRole());  propertiesManager.loadProperties();  if (runtimeConf.getClearDynamicProperties())   propertiesManager.clearDynamicProperties();}  }
class C{  public InterfaceScope createInterfaceScope(){  InterfaceScopeImpl interfaceScope=new InterfaceScopeImpl();  return interfaceScope;}  }
class C{  public ServiceInstance(UpdateServiceInstanceRequest request){  this.serviceInstanceId=request.getServiceInstanceId();  this.planId=request.getPlanId();  this.lastOperation=new GetLastServiceOperationResponse().withOperationState(OperationState.IN_PROGRESS).withDescription("Updating");}  }
class C{  public ShortArrayList copy(){  return (ShortArrayList)clone();}  }
class C{  public void oneTimeWorkerInit(WorkerThread wt){  if (verbose)   System.out.println(wt.getName() + ": oneTimeWorkerInit() called");}  }
class C{  public void testWithJSONSampleDoc() throws Exception {  JsonParser jp=createParserUsingReader(SAMPLE_DOC_JSON_SPEC);  TokenBuffer tb=new TokenBuffer(null);  while (jp.nextToken() != null) {    tb.copyCurrentEvent(jp);  }  verifyJsonSpecSampleDoc(tb.asParser(),false);  verifyJsonSpecSampleDoc(tb.asParser(),true);}  }
class C{  public static void onEvent(final Context context,final String event_id,final int acc){  onEvent(context,event_id,null,acc);}  }
class C{  public void addAttribute(String key,String nsPrefix,String nsURI,String value,String type) throws Exception {  String fullName=key;  if (nsPrefix != null) {    fullName=nsPrefix + ':' + key;  }  IXMLElement top=(IXMLElement)this.stack.peek();  if (top.hasAttribute(fullName)) {    throw new XMLParseException(top.getSystemID(),top.getLineNr(),"Duplicate attribute: " + key);  }  if (nsPrefix != null) {    top.setAttribute(fullName,nsURI,value);  } else {    top.setAttribute(fullName,value);  }}  }
class C{  public void reset(){  m_sourceTree=new Vector();}  }
class C{  public Ethernet(){  super();  this.vlanID=VLAN_UNTAGGED;}  }
class C{  public void destroyParticle(int index){  destroyParticle(index,false);}  }
class C{  private static RobotToken tokenize(String line){  String lowerLine=line.toLowerCase(Locale.getDefault());  for (  String prefix : DIRECTIVE_PREFIX.keySet()) {    int prefixLength=prefix.length();    if (lowerLine.startsWith(prefix)) {      RobotDirective directive=DIRECTIVE_PREFIX.get(prefix);      String dataPortion=line.substring(prefixLength);      if (directive.isPrefix()) {        Matcher m=DIRECTIVE_SUFFIX_PATTERN.matcher(dataPortion);        if (m.matches()) {          dataPortion=m.group(1);        } else {          continue;        }      }      Matcher m=COLON_DIRECTIVE_DELIMITER.matcher(dataPortion);      if (!m.matches()) {        m=BLANK_DIRECTIVE_DELIMITER.matcher(dataPortion);      }      if (m.matches()) {        return new RobotToken(directive,m.group(1).trim());      }    }  }  Matcher m=COLON_DIRECTIVE_DELIMITER.matcher(lowerLine);  if (m.matches()) {    return new RobotToken(RobotDirective.UNKNOWN,line);  } else {    return new RobotToken(RobotDirective.MISSING,line);  }}  }
class C{  @Override protected void drawGuiContainerForegroundLayer(int par1,int par2){  this.fontRendererObj.drawString("\u00a77" + tileEntity.getInventoryName(),52,6,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.misc.x"),8,23,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.misc.y"),8,39,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.misc.z"),8,54,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.misc.freq"),70,20,4210752);  this.textFieldX.drawTextBox();  this.textFieldZ.drawTextBox();  this.textFieldY.drawTextBox();  this.textFieldFreq.drawTextBox();  this.fontRendererObj.drawString(this.tileEntity.getStatus(),70,50,4210752);  this.fontRendererObj.drawString(MekanismUtils.getEnergyDisplay(this.tileEntity.getEnergy()) + "/" + MekanismUtils.getEnergyDisplay(this.tileEntity.getMaxEnergy()),70,70,4210752);  this.fontRendererObj.drawString(StatCollector.translateToLocal("container.inventory"),8,this.ySize - 96 + 2,4210752);}  }
class C{  public static Object[] toHMS(long milliseconds){  long s=milliseconds / 1000;  long m=s / 60;  long h=m / 60;  return new Object[]{h,m % 60,s % 60};}  }
class C{  private static Type putIntern(Type type){synchronized (internTable) {    String descriptor=type.getDescriptor();    Type already=internTable.get(descriptor);    if (already != null) {      return already;    }    internTable.put(descriptor,type);    return type;  }}  }
class C{  public static int daysInGregorianMonth(int y,int m){  int d=daysInGregorianMonth[m];  if (m == Calendar.FEBRUARY && isGregorianLeapYear(y)) {    d++;  }  return d;}  }
class C{  void prepareLooper(){  Looper.prepare();}  }
class C{  public synchronized void removePaintListener(PaintListener l){  if (painters == null) {    return;  }  painters.remove(l);  if (painters.isEmpty()) {    painters=null;  }}  }
class C{  public void clear(){  mResultMap.clear();  notifyDataSetChanged();}  }
class C{  private void publish(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String action=context.getString(R.string.toast_pub_failed,(Object[])additionalArgs);  c.addAction(action);  Notify.toast(context,action,Toast.LENGTH_SHORT);}  }
class C{  public void annotate(MethodInvocationTree tree,AnnotatedExecutableType type){  if (polyQuals.isEmpty())   return;  if (TreeUtils.isEnumSuper(tree))   return;  List<AnnotatedTypeMirror> requiredArgs=AnnotatedTypes.expandVarArgs(atypeFactory,type,tree.getArguments());  List<AnnotatedTypeMirror> arguments=AnnotatedTypes.getAnnotatedTypes(atypeFactory,requiredArgs,tree.getArguments());  Map<AnnotationMirror,Set<? extends AnnotationMirror>> matchingMapping=collector.visit(arguments,requiredArgs);  if (type.getReceiverType() != null && !TreeUtils.isSuperCall(tree) && !TreeUtils.isThisCall(tree)) {    matchingMapping=collector.reduce(matchingMapping,collector.visit(atypeFactory.getReceiverType(tree),type.getReceiverType()));  }  if (matchingMapping != null && !matchingMapping.isEmpty()) {    replacer.visit(type,matchingMapping);  } else {    completer.visit(type);  }}  }
class C{  public boolean isCommitted(OutputNode node){  return !active.contains(node);}  }
class C{  public DefaultHttpRoutePlanner(SchemeRegistry schreg){  if (schreg == null) {    throw new IllegalArgumentException("SchemeRegistry must not be null.");  }  schemeRegistry=schreg;}  }
class C{  public static DebateTree fromDepthFirst(List<Debate> flatten){  if (flatten.isEmpty()) {    return new DebateTree(SortingNode.emptyRoot());  }  SortingNode.Builder<Debate> builder=new SortingNode.Builder<>();  int currentLevel=flatten.get(0).getLevel() - 1;  for (  Debate debate : flatten) {    if (debate.getLevel() == currentLevel) {      builder=builder.siblingNode(debate);    } else     if (debate.getLevel() == currentLevel + 1) {      builder=builder.childNode(debate);      currentLevel++;    } else     if (debate.getLevel() < currentLevel) {      while (debate.getLevel() < currentLevel) {        builder=builder.parent();        currentLevel--;      }      builder=builder.siblingNode(debate);    } else {      throw new IllegalStateException("not well flatten depth first debate list");    }  }  return new DebateTree(builder.build());}  }
class C{  private void performDrag(MotionEvent event){  mMatrix.set(mSavedMatrix);  OnChartGestureListener l=mChart.getOnChartGestureListener();  float dX, dY;  if (mChart.isAnyAxisInverted() && mClosestDataSetToTouch != null && mChart.getAxis(mClosestDataSetToTouch.getAxisDependency()).isInverted()) {    if (mChart instanceof HorizontalBarChart) {      dX=-(event.getX() - mTouchStartPoint.x);      dY=event.getY() - mTouchStartPoint.y;    } else {      dX=event.getX() - mTouchStartPoint.x;      dY=-(event.getY() - mTouchStartPoint.y);    }  } else {    dX=event.getX() - mTouchStartPoint.x;    dY=event.getY() - mTouchStartPoint.y;  }  mMatrix.postTranslate(dX,dY);  if (l != null)   l.onChartTranslate(event,dX,dY);}  }
class C{  public QueryStringQueryBuilder quoteFieldSuffix(String quoteFieldSuffix){  this.quoteFieldSuffix=quoteFieldSuffix;  return this;}  }
class C{  void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  public RxMarkdown factory(AbsGrammarFactory absGrammarFactory){  mAbsGrammarFactory=absGrammarFactory;  return this;}  }
class C{  BoundData(Component component,Rectangle startBounds,Rectangle finalBounds){  this.component=component;  this.startBounds=startBounds;  this.finalBounds=finalBounds;}  }
class C{  @Override public void createPartControl(Composite parent){  this.tree=createNavigatorTree(parent,getRootNode());  getViewSite().setSelectionProvider(tree.getViewer());}  }
class C{  public PrefixFilter(byte[] keyPrefix){  this(new byte[][]{keyPrefix});}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  for (  String axisName : getAxesNames()) {    getAxis(axisName).addAxisListener(this);  }}  }
class C{  public static int round(float f){  return (int)floor(f + 0.5f);}  }
class C{  @Override @Inline public void release(Address start){  ((FreeListPageResource)pr).releasePages(start);}  }
class C{  public static void closeWithWarning(AutoCloseable c){  if (c != null) {    try {      c.close();    } catch (    Exception e) {      LOG.warning("Caught exception during close(): " + e);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.042 -0500",hash_original_method="530A807B767E238C12421F2C9825F074",hash_generated_method="2D148663D575EEEC25EAF181DB7563AA") public static ParcelFileDescriptor adoptFd(int fd){  FileDescriptor fdesc=getFileDescriptorFromFdNoDup(fd);  return new ParcelFileDescriptor(fdesc);}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public boolean addOpenSearchTarget(String name,String urlTemplate,boolean active,String comment){  if (confFile == null) {    return false;  }  try {    Configuration conf=new Configuration(confFile);    if (name != null && !name.isEmpty()) {      conf.add(name,null,active);      Configuration.Entry e=conf.get(name);      e.setValue(urlTemplate);      e.setEnable(active);      e.setComment(comment);      conf.put(name,e);      try {        conf.commit();        if (active) {          OpenSearchConnector osd=new OpenSearchConnector();          if (osd.init(name,urlTemplate)) {            conlist.add(osd);          }        }      } catch (      final IOException ex) {        ConcurrentLog.warn("FederateSearchManager","config file write error");      }      return true;    }  } catch (  final IOException e1) {    ConcurrentLog.logException(e1);    return false;  }  return false;}  }
class C{  public static void analyseInitialTimes(Config config){  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(config);  logger.info("Reading network xml file...");  new MatsimNetworkReader(scenario.getNetwork()).readFile(scenario.getConfig().network().getInputFile());  logger.info("Reading network xml file...done.");  PersonAlgorithm pa=new PersonAnalyseTimesByActivityType(TIME_BIN_SIZE);  ArrayList<PersonAlgorithm> plansAlgos=new ArrayList<PersonAlgorithm>();  plansAlgos.add(pa);  Population matsimAgentPopulation=(Population)scenario.getPopulation();  StreamingUtils.setIsStreaming(matsimAgentPopulation,true);  MatsimReader plansReader=new PopulationReader(scenario);  plansReader.readFile(scenario.getConfig().plans().getInputFile());  PopulationUtils.printPlansCount(matsimAgentPopulation);  int[][] numDeps=((PersonAnalyseTimesByActivityType)pa).getNumDeps();  MyRuns.writeAnArray(numDeps,"output/deptimes.txt");  int[][] numArrs=((PersonAnalyseTimesByActivityType)pa).getNumArrs();  MyRuns.writeAnArray(numArrs,"output/arrtimes.txt");  int[][] numTraveling=((PersonAnalyseTimesByActivityType)pa).getNumTraveling();  MyRuns.writeAnArray(numTraveling,"output/traveling.txt");}  }
class C{  public ObjectMatrix1D make(Object[] values){  if (this == sparse)   return new SparseObjectMatrix1D(values); else   return new DenseObjectMatrix1D(values);}  }
class C{  private Pair<Events,? extends Object> checkForNonePrompt(final ClientDetailsEntity client,final OIDCAuthorizationRequestContext authRequest){  log.debug("Prompt contains {}",ConnectRequestParameters.PROMPT_NONE);  final Authentication auth=SecurityContextHolder.getContext().getAuthentication();  if (auth != null) {    log.debug("Authentication context is found for {}. Already logged in; continue without prompt",auth.getPrincipal());    return new Pair(Events.Success,auth);  }  log.info("Client requested no prompt");  if (client != null && authRequest.getRedirectUri() != null) {    try {      final String url=redirectResolver.resolveRedirect(authRequest.getRedirectUri(),client);      log.debug("Initial redirect url resolved for client {} is {}",client.getClientName(),url);      final URIBuilder uriBuilder=new URIBuilder(url);      if (authRequest.isImplicitResponseType()) {        log.debug("Request is asking for implicit grant type. Encoding parameters as fragments");        final StringBuilder builder=new StringBuilder();        builder.append(ConnectRequestParameters.ERROR).append('=').append(ConnectRequestParameters.LOGIN_REQUIRED);        if (!Strings.isNullOrEmpty(authRequest.getState())) {          builder.append('&').append(ConnectRequestParameters.STATE).append('=').append(authRequest.getState());        }        uriBuilder.setFragment(builder.toString());      } else {        log.debug("Request is asking for code grant type. Encoding parameters as url parameters");        uriBuilder.addParameter(ConnectRequestParameters.ERROR,ConnectRequestParameters.LOGIN_REQUIRED);        if (!Strings.isNullOrEmpty(authRequest.getState())) {          uriBuilder.addParameter(ConnectRequestParameters.STATE,authRequest.getState());        }      }      log.debug("Resolved redirect url {}",uriBuilder.toString());      return new Pair<>(Events.Redirect,uriBuilder.toString());    } catch (    final URISyntaxException e) {      log.error("Can't build redirect URI for prompt=none, sending error instead",e);    }  } else {    log.warn("Access denied. Either client is not found or no redirect uri is specified");  }  return new Pair(Events.Failure,null);}  }
class C{  public static int[] convertArraytoInt(byte[] in){  int[] out=new int[in.length];  for (int i=0; i < in.length; i++) {    out[i]=in[i] & GF2Field.MASK;  }  return out;}  }
class C{  private void addToParent(final IResource resource){  final IContainer parent=resource.getParent();  if (parent == null) {    return;  }  List<IResource> members=memberMap.get(parent);  if (members == null) {    members=new ArrayList<IResource>();    memberMap.put(parent,members);  }  if (!members.contains(resource)) {    members.add(resource);  }  addToParent(parent);}  }
class C{  @Override public ProcessingSummary processBytes(final byte[] in,final int off,final int len,final byte[] out,final int outOff) throws BadCiphertextException {  int actualOutLen=0;  int size=len;  int offset=off;  while (size > 0) {    final int currentFrameCapacity=frameSize_ - bytesToFrameLen_;    size=Math.min(currentFrameCapacity,size);    System.arraycopy(in,offset,bytesToFrame_,bytesToFrameLen_,size);    bytesToFrameLen_+=size;    if (bytesToFrameLen_ == frameSize_) {      actualOutLen+=writeEncryptedFrame(bytesToFrame_,0,bytesToFrameLen_,out,outOff + actualOutLen);      bytesToFrameLen_=0;    }    offset+=size;    size=len - offset;  }  return new ProcessingSummary(actualOutLen,len);}  }
class C{  public static synchronized void releaseErr(){  errCnt--;  if (errCnt == 0)   System.setErr(sysErr);}  }
class C{  protected void introduceConstraint(TypeClass typeClass){  this.instance.constraints.addExtraConstraint(typeClass);}  }
class C{  public static void filterInvCutOff(Image inputImg,int inStart,int inLen,int inStep,Image outputImg,int outStart,int outLen,int outStep,Filter filter){  int fStart=0;  int fEnd=0;  for (int i=0; i < outLen; i++) {    fStart=CommonUtil.max(CommonUtil.ceilingHalf(filter.getStart() + i),0);    fEnd=CommonUtil.min(CommonUtil.floorHalf(filter.getEnd() + i),inLen - 1);    for (int j=fStart; j <= fEnd; j++) {      outputImg.getData()[outStart + i * outStep]+=filter.getData()[(2 * j) - i - filter.getStart()] * inputImg.getData()[inStart + j * inStep];    }  }}  }
class C{  public static FlinkPipelineRunner createForTest(boolean streaming){  FlinkPipelineOptions options=PipelineOptionsFactory.as(FlinkPipelineOptions.class);  options.setFlinkMaster("[auto]");  options.setStreaming(streaming);  return new FlinkPipelineRunner(options);}  }
class C{  public static void escape(StrBuilder toAppend,String text,boolean escapeQuote,boolean escapeApos){  if (text == null) {    return;  }  for (int i=0; i < text.length(); i++) {    char ch=text.charAt(i);switch (ch) {case '<':      toAppend.append("&lt;");    break;case '>':  toAppend.append("&gt;");break;case '&':toAppend.append("&amp;");break;case '"':toAppend.append(escapeQuote ? "&quot;" : ch);break;case '\'':toAppend.append(escapeApos ? "&apos;" : ch);break;default :toAppend.append(ch);break;}}}  }
class C{  public PTQuery_GroupBy GroupBy(String... groupByVars) throws PTQueryException {  return new PTQuery_GroupBy(this,groupByVars);}  }
class C{  public void removeConfiguration(String configPath){  File file=new File(configPath);  if (file.exists()) {    file.delete();  }  removeRecent(configPath);}  }
class C{  public boolean isInverse(){  return getCorrectness() < 0;}  }
class C{  public void testSyncFailedDialog_backButtonReturnsToUserSelection(){  try (WifiDisabler wd=new WifiDisabler()){    waitForSyncFailure();    expectVisibleSoon(viewWithText(R.string.sync_failed_dialog_message));    click(viewWithText(R.string.sync_failed_back));    waitForProgressFragment();    expectVisible(viewWithText("Guest User"));  } }  }
class C{  public void testGetCertificate(){  createParams(false,false);  KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);  Certificate res=ksPKE.getCertificate();  assertEquals("Incorrect end certificate (number 0)",testChain[0],res);}  }
class C{  public static void fillRange(ByteBuffer buffer,int start,int end){  putRange(buffer,start,end,(byte)0xff);}  }
class C{  public void tagPlaceObject(int charId,int depth,Matrix matrix,AlphaTransform cxform) throws IOException {  startTag(TAG_PLACEOBJECT,false);  out.writeUI16(charId);  out.writeUI16(depth);  matrix.write(out);  if (cxform != null) {    cxform.write(out);  }  completeTag();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.369 -0500",hash_original_method="EDB1A66CB81652E7B35BD52D60EF4E40",hash_generated_method="E10AC36B7BD8F6B478BBAF24D7AE3276") public boolean hitEnd(){  return hitEndImpl(address);}  }
class C{  protected String formatMessage(String key,Object... params){  String msgPack=getMessagesPack();  if (StringUtils.isEmpty(msgPack)) {    throw new DevelopmentException("MessagePack is not set");  }  return messages.formatMessage(msgPack,key,params);}  }
class C{  public boolean save(File file){  ObjectOutputStream oos;  ZipOutputStream zos;  try {    if (!file.getParentFile().exists()) {      file.getParentFile().mkdirs();    }    if (!file.exists()) {      file.createNewFile();    }    zos=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)));    zos.putNextEntry(new ZipEntry("dataspace"));    zos.setLevel(9);    oos=new ObjectOutputStream(zos);    save(oos);    oos.flush();    oos.close();    zos.closeEntry();    zos.close();  } catch (  IOException e) {    return false;  }  return true;}  }
class C{  public static DataAttribute createDataAttributeWithoutPadding(byte data[]){  DataAttribute attribute=new DataAttribute(false);  attribute.setData(data);  return attribute;}  }
class C{  private final boolean checkDirForPackage(final File currentDir,final Iterator<String> pkgNames){  if (!pkgNames.hasNext()) {    return true;  }  if (currentDir == null || !currentDir.isDirectory()) {    return false;  }  String currentPackageDirName=pkgNames.next();  for (  File file : currentDir.listFiles()) {    if (file.isDirectory() && file.getName().equals(currentPackageDirName)) {      return checkDirForPackage(file,pkgNames);    }  }  return false;}  }
class C{  public TypeVariable typeVariable(){  int id=typeVariableList.size();  typeVariableList.add(null);  TypeVariable result=new TypeVariable(id,this);  typeVariableList.set(id,result);  return result;}  }
class C{  public boolean match(String schema,String table){  if (dbPattern != null) {    if (logger.isDebugEnabled())     logger.debug("Checking if database matches: " + schema);    if (dbMatcher == null)     dbMatcher=dbPattern.matcher(schema); else     dbMatcher.reset(schema);    if (dbMatcher.matches()) {      if (logger.isDebugEnabled())       logger.debug("Match db filter");      return true;    }  }  if (table != null && table.length() > 0) {    String searchedTable=fullyQualifiedName(schema,table);    if (tablePattern != null) {      if (tableMatcher == null)       tableMatcher=tablePattern.matcher(searchedTable); else       tableMatcher.reset(searchedTable);      if (tableMatcher.matches())       return true;    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowDVDPlayer.setDVDVideoDecoderFilter(getString(stack));  return null;}  }
class C{  public void mouseReleased(MouseEvent e){synchronized (mouseLock) {    mousePressed=false;  }}  }
class C{  public void updateButtonActionPerformed(){  if (!readReceiveDelay()) {    return;  }  if (!readPulseWidth()) {    return;  }  if (!checkConsistency()) {    return;  }  if (curNode.getNodeType() != nodeType) {    curNode.setNodeType(nodeType);  }  setNodeParameters();  changedNode=true;  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);  statusText1.setText(rb.getString("FeedBackUpdate") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  private void updateEditor(){  EditorTableModel editorTableModel=(EditorTableModel)editorTable.getModel();  editorTableModel.fireTableDataChanged();  editorTable.setEnabled(pixelMatrixImageNode != null);}  }
class C{  ITypeBinding resolveType(TypeDeclaration type){  return null;}  }
class C{  static Period verifyUnitIsYears(Period period) throws EppException {  if (!checkNotNull(period).getUnit().equals(Period.Unit.YEARS)) {    throw new BadPeriodUnitException();  }  return period;}  }
class C{  protected void sequence_TestedProject(ISerializationContext context,TestedProject semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4mfPackage.Literals.PROJECT_REFERENCE__PROJECT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4mfPackage.Literals.PROJECT_REFERENCE__PROJECT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTestedProjectAccess().getProjectSimpleProjectDescriptionParserRuleCall_0(),semanticObject.getProject());  feeder.finish();}  }
class C{  public boolean existDirtyModules(){  final List<IEditorReference> dirtyEditors=new LinkedList<IEditorReference>();  IEditorReference[] references=UIHelper.getActivePage().getEditorReferences();  if (references != null) {    for (int i=0; i < references.length; i++) {      try {        if (references[i].isDirty() && references[i].getEditorInput().getName().endsWith(".tla")) {          dirtyEditors.add(references[i]);        }      } catch (      PartInitException e) {        Activator.getDefault().logError("Error getting unsaved resources.",e);      }    }  }  return (dirtyEditors.size() > 0);}  }
class C{  public void manageEnclosingInstanceAccessIfNecessary(ClassScope currentScope,FlowInfo flowInfo){  if ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) == 0) {    NestedTypeBinding nestedType=(NestedTypeBinding)this.binding;    nestedType.addSyntheticArgumentAndField(this.binding.enclosingType());  }}  }
class C{  public static Rop ropFor(int opcode,TypeBearer dest,TypeList sources,Constant cst){switch (opcode) {case RegOps.NOP:    return NOP;case RegOps.MOVE:  return opMove(dest);case RegOps.MOVE_PARAM:return opMoveParam(dest);case RegOps.MOVE_EXCEPTION:return opMoveException(dest);case RegOps.CONST:return opConst(dest);case RegOps.GOTO:return GOTO;case RegOps.IF_EQ:return opIfEq(sources);case RegOps.IF_NE:return opIfNe(sources);case RegOps.IF_LT:return opIfLt(sources);case RegOps.IF_GE:return opIfGe(sources);case RegOps.IF_LE:return opIfLe(sources);case RegOps.IF_GT:return opIfGt(sources);case RegOps.SWITCH:return SWITCH;case RegOps.ADD:return opAdd(sources);case RegOps.SUB:return opSub(sources);case RegOps.MUL:return opMul(sources);case RegOps.DIV:return opDiv(sources);case RegOps.REM:return opRem(sources);case RegOps.NEG:return opNeg(dest);case RegOps.AND:return opAnd(sources);case RegOps.OR:return opOr(sources);case RegOps.XOR:return opXor(sources);case RegOps.SHL:return opShl(sources);case RegOps.SHR:return opShr(sources);case RegOps.USHR:return opUshr(sources);case RegOps.NOT:return opNot(dest);case RegOps.CMPL:return opCmpl(sources.getType(0));case RegOps.CMPG:return opCmpg(sources.getType(0));case RegOps.CONV:return opConv(dest,sources.getType(0));case RegOps.TO_BYTE:return TO_BYTE;case RegOps.TO_CHAR:return TO_CHAR;case RegOps.TO_SHORT:return TO_SHORT;case RegOps.RETURN:{if (sources.size() == 0) {return RETURN_VOID;}return opReturn(sources.getType(0));}case RegOps.ARRAY_LENGTH:return ARRAY_LENGTH;case RegOps.THROW:return THROW;case RegOps.MONITOR_ENTER:return MONITOR_ENTER;case RegOps.MONITOR_EXIT:return MONITOR_EXIT;case RegOps.AGET:{Type source=sources.getType(0);Type componentType;if (source == Type.KNOWN_NULL) {componentType=dest.getType();} else {componentType=source.getComponentType();}return opAget(componentType);}case RegOps.APUT:{Type source=sources.getType(1);Type componentType;if (source == Type.KNOWN_NULL) {componentType=sources.getType(0);} else {componentType=source.getComponentType();}return opAput(componentType);}case RegOps.NEW_INSTANCE:return NEW_INSTANCE;case RegOps.NEW_ARRAY:return opNewArray(dest.getType());case RegOps.CHECK_CAST:return CHECK_CAST;case RegOps.INSTANCE_OF:return INSTANCE_OF;case RegOps.GET_FIELD:return opGetField(dest);case RegOps.GET_STATIC:return opGetStatic(dest);case RegOps.PUT_FIELD:return opPutField(sources.getType(0));case RegOps.PUT_STATIC:return opPutStatic(sources.getType(0));case RegOps.INVOKE_STATIC:{return opInvokeStatic(((CstMethodRef)cst).getPrototype());}case RegOps.INVOKE_VIRTUAL:{CstBaseMethodRef cstMeth=(CstMethodRef)cst;Prototype meth=cstMeth.getPrototype();CstType definer=cstMeth.getDefiningClass();meth=meth.withFirstParameter(definer.getClassType());return opInvokeVirtual(meth);}case RegOps.INVOKE_SUPER:{CstBaseMethodRef cstMeth=(CstMethodRef)cst;Prototype meth=cstMeth.getPrototype();CstType definer=cstMeth.getDefiningClass();meth=meth.withFirstParameter(definer.getClassType());return opInvokeSuper(meth);}case RegOps.INVOKE_DIRECT:{CstBaseMethodRef cstMeth=(CstMethodRef)cst;Prototype meth=cstMeth.getPrototype();CstType definer=cstMeth.getDefiningClass();meth=meth.withFirstParameter(definer.getClassType());return opInvokeDirect(meth);}case RegOps.INVOKE_INTERFACE:{CstBaseMethodRef cstMeth=(CstMethodRef)cst;Prototype meth=cstMeth.getPrototype();CstType definer=cstMeth.getDefiningClass();meth=meth.withFirstParameter(definer.getClassType());return opInvokeInterface(meth);}}throw new RuntimeException("unknown opcode " + RegOps.opName(opcode));}  }
class C{  public void addLabel(String text){  this.label=text;}  }
class C{  public static void registerConnection(Block block,ICustomPipeConnection connection){  connections.put(block,connection);}  }
class C{  public boolean add(final short[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public TimeAndSpaceTourRouter(LeastCostPathCalculator router,Network network,TravelTime travelTime){  super();  this.router=router;  this.network=network;  this.travelTime=travelTime;}  }
class C{  public boolean isEmpty(){  if (sortedEvents == null) {    return true;  }  return sortedEvents.isEmpty();}  }
class C{  public static synchronized void xit(String description,UnsafeBlock block){  xit(description,identity(),block);}  }
class C{  public static void debug(String msg){  debug(msg,false);}  }
class C{  public void removeAttributeNS(String namespaceURI,String localName){  removeAttribute(localName);}  }
class C{  protected void informResourceLoaderAwareObjectsInChain(TokenizerChain chain){  CharFilterFactory[] charFilters=chain.getCharFilterFactories();  for (  CharFilterFactory next : charFilters) {    if (next instanceof ResourceLoaderAware) {      try {        ((ResourceLoaderAware)next).inform(loader);      } catch (      IOException e) {        throw new SolrException(ErrorCode.SERVER_ERROR,e);      }    }  }  TokenizerFactory tokenizerFactory=chain.getTokenizerFactory();  if (tokenizerFactory instanceof ResourceLoaderAware) {    try {      ((ResourceLoaderAware)tokenizerFactory).inform(loader);    } catch (    IOException e) {      throw new SolrException(ErrorCode.SERVER_ERROR,e);    }  }  TokenFilterFactory[] filters=chain.getTokenFilterFactories();  for (  TokenFilterFactory next : filters) {    if (next instanceof ResourceLoaderAware) {      try {        ((ResourceLoaderAware)next).inform(loader);      } catch (      IOException e) {        throw new SolrException(ErrorCode.SERVER_ERROR,e);      }    }  }}  }
class C{  public GenerateKeyPairAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("GenerateKeyPairAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("GenerateKeyPairAction.statusbar"));  putValue(NAME,res.getString("GenerateKeyPairAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("GenerateKeyPairAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("GenerateKeyPairAction.image")))));}  }
class C{  public synchronized void runTask(Runnable task){  if (!isAlive) {    throw new IllegalStateException();  }  if (task != null) {    taskQueue.add(task);    notify();  }}  }
class C{  @Override public void onDestroy(){  Timber.i("Destroying CastingServer");  super.onDestroy();}  }
class C{  public ControlEditText(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public FullFeaturedBrowser(final Composite parent,final int controlStyle,final int browserStyle){  super(parent,controlStyle);  setLayout(new FillLayout());  browser=new Browser(this,browserStyle);}  }
class C{  public String nextCDATA() throws JSONException {  char c;  int i;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();    if (end()) {      throw syntaxError("Unclosed CDATA");    }    sb.append(c);    i=sb.length() - 3;    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {      sb.setLength(i);      return sb.toString();    }  }}  }
class C{  public static float intersectRayLineSegment(float originX,float originY,float dirX,float dirY,float aX,float aY,float bX,float bY){  float v1X=originX - aX;  float v1Y=originY - aY;  float v2X=bX - aX;  float v2Y=bY - aY;  float invV23=1.0f / (v2Y * dirX - v2X * dirY);  float t1=(v2X * v1Y - v2Y * v1X) * invV23;  float t2=(v1Y * dirX - v1X * dirY) * invV23;  if (t1 >= 0.0f && t2 >= 0.0f && t2 <= 1.0f)   return t1;  return -1.0f;}  }
class C{  public static void reorderLabels(Instances D,int s[]) throws Exception {  int L=s.length;  Reorder f=new Reorder();  String range="";  for (int j=0; j < L; j++) {    range+=String.valueOf(s[0]) + ",";  }  range=range + (L + 1) + "-last";  f.setAttributeIndices(range);  f.setInputFormat(D);  D=Filter.useFilter(D,f);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:47.556 -0500",hash_original_method="2E336C5190A64F570C9C97735BEE0094",hash_generated_method="DA08102AFFDAD05B779B6EB245A14FFA") public SignalStrength(Parcel in){  mGsmSignalStrength=in.readInt();  mGsmBitErrorRate=in.readInt();  mCdmaDbm=in.readInt();  mCdmaEcio=in.readInt();  mEvdoDbm=in.readInt();  mEvdoEcio=in.readInt();  mEvdoSnr=in.readInt();  mLteSignalStrength=in.readInt();  mLteRsrp=in.readInt();  mLteRsrq=in.readInt();  mLteRssnr=in.readInt();  mLteCqi=in.readInt();  isGsm=(in.readInt() != 0);}  }
class C{  protected void startActivityForResult(Intent intent,int code){  if (fragment == null) {    activity.startActivityForResult(intent,code);  } else {    fragment.startActivityForResult(intent,code);  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TYPE_CONSTRAINT__VALUE:    setValue(newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  default boolean finishScan(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.782 -0500",hash_original_method="57E46D0940B3C65A92751CB9C29D6161",hash_generated_method="945C9D14804268984269359B7CD71428") public void hideSoftInputFromInputMethod(IBinder token,int flags){  try {    mService.hideMySoftInput(token,flags);  } catch (  RemoteException e) {    throw new RuntimeException(e);  }}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(int initialCapacity,float loadFactor){  return new LinkedHashMap<K,V>(initialCapacity);}  }
class C{  protected Anonymous_complexAttribute_2_Impl(){  super();}  }
class C{  public HighlightBuilder preTags(String... preTags){  this.preTags=preTags;  return this;}  }
class C{  public static boolean isReleaseBuild(){  return !isNightly() && !isPreRelease() && !isSvnBuild();}  }
class C{  private Iterable<FragmentDrawer> createDrawers(List<LayerDeclaration> declarations,Zoom zoom,WorldIconSelection worldIconSelection,Graphics2DAccelerationCounter accelerationCounter){  return Collections.unmodifiableList(Arrays.asList(new AlphaUpdater(declarations.get(LayerIds.ALPHA)),new ImageDrawer(declarations.get(LayerIds.BACKGROUND),Resolution.QUARTER,accelerationCounter),new ImageDrawer(declarations.get(LayerIds.SLIME),Resolution.CHUNK,accelerationCounter),new GridDrawer(declarations.get(LayerIds.GRID),zoom),new WorldIconDrawer(declarations.get(LayerIds.SPAWN),zoom,worldIconSelection),new WorldIconDrawer(declarations.get(LayerIds.STRONGHOLD),zoom,worldIconSelection),new WorldIconDrawer(declarations.get(LayerIds.PLAYER),zoom,worldIconSelection),new WorldIconDrawer(declarations.get(LayerIds.VILLAGE),zoom,worldIconSelection),new WorldIconDrawer(declarations.get(LayerIds.TEMPLE),zoom,worldIconSelection),new WorldIconDrawer(declarations.get(LayerIds.MINESHAFT),zoom,worldIconSelection),new WorldIconDrawer(declarations.get(LayerIds.OCEAN_MONUMENT),zoom,worldIconSelection),new WorldIconDrawer(declarations.get(LayerIds.NETHER_FORTRESS),zoom,worldIconSelection),new WorldIconDrawer(declarations.get(LayerIds.END_CITY),zoom,worldIconSelection)));}  }
class C{  public SyncValueMessage(SyncValueMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetValues()) {    List<KeyedValues> __this__values=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.values) {      __this__values.add(new KeyedValues(other_element));    }    this.values=__this__values;  }  this.responseTo=other.responseTo;}  }
class C{  public void testRenameDirectory() throws Exception {  create(igfs,paths(DIR,SUBDIR),null);  igfs.rename(SUBDIR,SUBDIR2);  checkExist(igfs,igfsSecondary,SUBDIR2);  checkNotExist(igfs,igfsSecondary,SUBDIR);}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {synchronized (_logLock) {    if (_isRollingOver && getTempStreamMax() < _tempStreamSize) {      try {        _logLock.wait();      } catch (      Exception e) {      }    }    if (!_isRollingOver) {      if (_os == null)       openLog();      if (_os != null)       _os.write(buffer,offset,length);    } else {      throw new UnsupportedOperationException(getClass().getName());    }  }}  }
class C{  public boolean isHollow(){  if (this.mode == Mode.UBERJAR) {    return this.applicationManifest.isHollow();  }  return false;}  }
class C{  public IntegerComparator select(Meta c){  this.c=c;  return this;}  }
class C{  protected boolean attemptToAddWord(Word word){  double additionalLength=word.getWordWidth();  additionalLength+=!words.isEmpty() ? spaceSize : 0;  if (currentLineLength + additionalLength <= maxLength || maxLength == -1) {    words.add(word);    currentLineLength+=additionalLength;    return true;  } else {    return false;  }}  }
class C{  public ImageLayer(Tile tile){  setTile(tile);}  }
class C{  public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){  char ca=a.charAt(ai);  char cb=b.charAt(bi);  if (ignoreCase) {    ca=Character.toUpperCase(ca);    cb=Character.toUpperCase(cb);  }  return ca == cb;}  }
class C{  public static void initOutputDirFlag(CFlags flags){  flags.registerRequired('o',OUTPUT_FLAG,File.class,DIR,"directory for output").setCategory(CommonFlagCategories.INPUT_OUTPUT);}  }
class C{  protected void cdata(char ch[],int start,final int length) throws org.xml.sax.SAXException {  try {    final int old_start=start;    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    m_ispreserve=true;    if (shouldIndent())     indent();    boolean writeCDataBrackets=(((length >= 1) && escapingNotNeeded(ch[start])));    if (writeCDataBrackets && !m_cdataTagOpen) {      m_writer.write(CDATA_DELIMITER_OPEN);      m_cdataTagOpen=true;    }    if (isEscapingDisabled()) {      charactersRaw(ch,start,length);    } else     writeNormalizedChars(ch,start,length,true,m_lineSepUse);    if (writeCDataBrackets) {      if (ch[start + length - 1] == ']')       closeCDATA();    }    if (m_tracer != null)     super.fireCDATAEvent(ch,old_start,length);  } catch (  IOException ioe) {    throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);  }}  }
class C{  @Nonnull public BugInstance addSourceLine(MethodDescriptor methodDescriptor,Location location){  try {    IAnalysisCache analysisCache=Global.getAnalysisCache();    ClassContext classContext=analysisCache.getClassAnalysis(ClassContext.class,methodDescriptor.getClassDescriptor());    Method method=analysisCache.getMethodAnalysis(Method.class,methodDescriptor);    return addSourceLine(classContext,method,location);  } catch (  CheckedAnalysisException e) {    return addSourceLine(SourceLineAnnotation.createReallyUnknown(methodDescriptor.getClassDescriptor().toDottedClassName()));  }}  }
class C{  private void addDisplay(int parentM_Product_ID,int M_Product_ID,String bomType,String name,BigDecimal lineQty,int PP_Product_BOM_ID,String M_Feature,int PP_Product_BOMLine_ID){  log.fine("M_Product_ID=" + M_Product_ID + ",Type="+ bomType+ ",Name="+ name+ ",Qty="+ lineQty);  boolean selected=true;  if (MPPProductBOMLine.COMPONENTTYPE_Component.equals(bomType)) {    String title="";    JCheckBox cb=new JCheckBox(title);    cb.setSelected(true);    cb.setEnabled(false);    m_selectionList.add(cb);    this.add(cb,new ALayoutConstraint(m_bomLine++,0));  } else   if (MPPProductBOMLine.COMPONENTTYPE_Variant.equals(bomType)) {    String title=Msg.getMsg(Env.getCtx(),"Optional");    JCheckBox cb=new JCheckBox(title);    cb.setSelected(false);    selected=false;    cb.addActionListener(this);    m_selectionList.add(cb);    this.add(cb,new ALayoutConstraint(m_bomLine++,0));  } else {    String title=M_Feature;    JRadioButton b=new JRadioButton(title);    String groupName=String.valueOf(getProductFromMPPProductBOM(PP_Product_BOM_ID).get_ID()) + "_" + bomType;    ButtonGroup group=(ButtonGroup)m_buttonGroups.get(groupName);    if (group == null) {      log.fine("ButtonGroup=" + groupName);      group=new ButtonGroup();      m_buttonGroups.put(groupName,group);      group.add(b);      b.setSelected(true);    } else {      group.add(b);      b.setSelected(false);      selected=false;    }    b.addActionListener(this);    m_selectionList.add(b);    this.add(b,new ALayoutConstraint(m_bomLine++,0));  }  m_productList.add(new Integer(M_Product_ID));  m_bomLineIDList.add(new Integer(PP_Product_BOMLine_ID));  CLabel label=new CLabel(name);  this.add(label);}  }
class C{  public byte[] internalArray(){  return buf;}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  int sublen=getDelegate().read(buffer,offset,length);  if (sublen > 0) {    logStream().write(buffer,offset,sublen);  }  return sublen;}  }
class C{  public static IndexWriterConfig newConfig(Analyzer analyzer){  return new IndexWriterConfig(version,analyzer);}  }
class C{  public void onPause(){  mOnResumePending=false;  if (mInitializationComplete)   mActivityDelegate.onPauseWithNative();}  }
class C{  public static Component createGlue(){  return new Filler(new Dimension(0,0),new Dimension(0,0),new Dimension(Short.MAX_VALUE,Short.MAX_VALUE));}  }
class C{  private CharArrayMap(CharArrayMap<V> toCopy){  this.keys=toCopy.keys;  this.values=toCopy.values;  this.ignoreCase=toCopy.ignoreCase;  this.count=toCopy.count;}  }
class C{  public TestManagedBeanFactory(){  super("TestManagedBeanFactory");}  }
class C{  public synchronized String generateTag(){  return Integer.toHexString(rand.nextInt());}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public static int random(int seed){  int tmp=mult(seed,CONST_b) + 1;  return tmp;}  }
class C{  public static String generateUUID(){  return UUID.randomUUID().toString();}  }
class C{  public void removeLayoutComponent(Component comp){}  }
class C{  public static boolean deleteGeneratedDraft(Properties ctx,int C_Payment_ID,String trxName){  MPaySelectionCheck mpsc=MPaySelectionCheck.getOfPayment(ctx,C_Payment_ID,trxName);  if (mpsc != null && mpsc.isGeneratedDraft()) {    MPaySelection mps=new MPaySelection(ctx,mpsc.getC_PaySelection_ID(),trxName);    MPaySelectionLine[] mpsl=mps.getLines(true);    for (int i=0; i < mpsl.length; i++) {      if (!mpsl[i].delete(true,trxName))       return false;    }    if (!mpsc.delete(true,trxName))     return false;    if (!mps.delete(true,trxName))     return false;  }  return true;}  }
class C{  void notifyGroupMemberError(ImErrorInfo error){  for (  GroupMemberListener listener : mMemberListeners) {    listener.onError(this,error);  }}  }
class C{  public HeaderCard(String key,String value,String comment) throws HeaderCardException {  this(key,value,comment,false,true);}  }
class C{  public static void checkState(boolean expression){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalStateException();  }}  }
class C{  public DateParameter(Date date,Calendar cal,Options options){  this.date=date;  this.calendar=cal;  this.options=options;}  }
class C{  public boolean isTranslated(){  Object oo=get_Value(COLUMNNAME_IsTranslated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Rdn(Rdn rdn){  entries=new ArrayList<>(rdn.entries.size());  entries.addAll(rdn.entries);}  }
class C{  @Dev public SetQuestToTimeStampAction(final String questname,@Dev(defaultValue="1") final int index){  this.questname=checkNotNull(questname);  this.index=index;}  }
class C{  public ThreadPool(){  executorService=new ThreadPoolExecutor(CORE_POOL_SIZE,MAXIMUM_POOL_SIZE,KEEP_ALIVE_TIME,TIME_UNIT,new SynchronousQueue<Runnable>());  listeningExecutorService=MoreExecutors.listeningDecorator(executorService);}  }
class C{  private void processAnnotations(){  Field[] fields=clazz.getFields();  for (int i=0; i < fields.length; i++) {    Field field=fields[i];    Annotation[] annotations=field.getAnnotations();    for (int j=0; j < annotations.length; j++) {      Annotation a=annotations[j];      if (a instanceof XmlElement) {        XmlElement e=(XmlElement)a;        FieldInfo fi=getField(field);        fi.required=e.required();        fi.nillable=e.nillable();        String name=e.name();        if (!JAXB_DEFAULT.equals(name)) {          fi.name=name;        }      } else       if (a instanceof EnumType) {        EnumType e=(EnumType)a;        FieldInfo fi=getField(field);        fi.enumType=e.value();      } else       if (a instanceof Length) {        Length l=(Length)a;        FieldInfo fi=getField(field);        fi.min=(long)l.min();        fi.max=(long)l.max();      } else       if (a instanceof Range) {        Range l=(Range)a;        FieldInfo fi=getField(field);        fi.min=l.min();        fi.max=l.max();      } else       if (a instanceof Endpoint) {        Endpoint l=(Endpoint)a;        FieldInfo fi=getField(field);        fi.type=l.type();      }    }  }  try {    PropertyDescriptor[] descriptors=Introspector.getBeanInfo(clazz).getPropertyDescriptors();    for (    PropertyDescriptor descriptor : descriptors) {      Annotation[] annotations=descriptor.getReadMethod().getAnnotations();      for (      Annotation a : annotations) {        if (a instanceof XmlElement) {          XmlElement e=(XmlElement)a;          FieldInfo fi=getField(descriptor);          fi.required=e.required();          fi.nillable=e.nillable();          String name=e.name();          if (!JAXB_DEFAULT.equals(name)) {            fi.name=name;          }        } else         if (a instanceof EnumType) {          EnumType e=(EnumType)a;          FieldInfo fi=getField(descriptor);          fi.enumType=e.value();        } else         if (a instanceof Length) {          Length l=(Length)a;          FieldInfo fi=getField(descriptor);          fi.min=(long)l.min();          fi.max=(long)l.max();        } else         if (a instanceof Range) {          Range l=(Range)a;          FieldInfo fi=getField(descriptor);          fi.min=l.min();          fi.max=l.max();        } else         if (a instanceof Endpoint) {          Endpoint l=(Endpoint)a;          FieldInfo fi=getField(descriptor);          fi.type=l.type();        }      }    }  } catch (  IntrospectionException e) {    _log.error("Unexpected exception:",e);    throw APIException.internalServerErrors.genericApisvcError(e.getMessage(),e);  }}  }
class C{  @Override public void enqueue(HttpRequest request,final String queue,final Handler<Void> doneHandler){  enqueue(null,request,queue,doneHandler);}  }
class C{  @Override public void writeRef(int ref){  require(1);  _buffer[_offset++]=(byte)ConstH3.REF;  writeUnsigned(ref);}  }
class C{  public PlainDocument(Content c){  super(c);  putProperty(tabSizeAttribute,Integer.valueOf(8));  defaultRoot=createDefaultRoot();}  }
class C{  @Override public void onUpdate(FaceDetector.Detections<Face> detectionResults,Face face){  mOverlay.add(mEyesGraphic);  updatePreviousProportions(face);  PointF leftPosition=getLandmarkPosition(face,Landmark.LEFT_EYE);  PointF rightPosition=getLandmarkPosition(face,Landmark.RIGHT_EYE);  float leftOpenScore=face.getIsLeftEyeOpenProbability();  boolean isLeftOpen;  if (leftOpenScore == Face.UNCOMPUTED_PROBABILITY) {    isLeftOpen=mPreviousIsLeftOpen;  } else {    isLeftOpen=(leftOpenScore > EYE_CLOSED_THRESHOLD);    mPreviousIsLeftOpen=isLeftOpen;  }  float rightOpenScore=face.getIsRightEyeOpenProbability();  boolean isRightOpen;  if (rightOpenScore == Face.UNCOMPUTED_PROBABILITY) {    isRightOpen=mPreviousIsRightOpen;  } else {    isRightOpen=(rightOpenScore > EYE_CLOSED_THRESHOLD);    mPreviousIsRightOpen=isRightOpen;  }  mEyesGraphic.updateEyes(leftPosition,isLeftOpen,rightPosition,isRightOpen);}  }
class C{  public void clear(){  if (arrayTable != null) {    arrayTable.clear();  }}  }
class C{  public Movie(){  width=550;  height=400;  frameRate=12;  version=5;}  }
class C{  public static void append(Path file,Reader reader,String charset,boolean writeBom) throws IOException {  appendBuffered(file,reader,charset,writeBom);}  }
class C{  private static void displayParamNameAndValue(String paramName,String paramValue){  if (StringUtils.isEmpty(paramValue) || paramValue == null) {    paramValue=UNDEFINED_CONFIG;  }  System.out.println(String.format("%s:   %s",paramName,paramValue));}  }
class C{  public String diff(List<Integer> diffLines,Reader input,Reader expected){  if (diffLines == null)   diffLines=new ArrayList<Integer>();  linesProcessed=1;  BufferedReader myInput=new BufferedReader(input);  String readFromInput;  BufferedReader myExpected=new BufferedReader(expected);  String readFromExpected;  try {    do {      readFromInput=myInput.readLine();      readFromExpected=myExpected.readLine();      if ((readFromInput == null) && (readFromExpected != null)) {        return "EOF reached in Expected(Line:" + linesProcessed + ")... got more Lines to compare.\n";      }      if ((readFromInput != null) && (readFromExpected == null)) {        return "EOF reached in Input(Line:" + linesProcessed + ")... more Lines expected.\n";      }      if (readFromInput != null && !match(readFromInput,readFromExpected)) {        if (!diffLines.contains(new Integer(linesProcessed)))         return "Difference in line " + linesProcessed + "\n"+ "expected :["+ readFromExpected+ "]\n"+ "but got  :["+ readFromInput+ "]";      }      linesProcessed++;    } while ((readFromInput != null) && (readFromExpected != null));  } catch (  IOException e) {    return "Error processing Files...compare aborted.\n";  }  return null;}  }
class C{  private void populateMovies(Long userId){  List<Product> productList=ratingClient.findProductsByUser(userId.toString()).getContent().stream().collect(Collectors.toList());  ratings.setContainerDataSource(new BeanItemContainer<>(Movie.class,movieClient.findByIds(productList.stream().map(null).collect(Collectors.joining(","))).getContent()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.606 -0400",hash_original_method="791E08A45566A26326C335590ACE3F05",hash_generated_method="97AA94405EA75C0F44551E28D8F18EF2") public BluetoothTestUtils(Context context,String tag){  this(context,tag,null);}  }
class C{  public Polygon(List<PolygonPoint> points){  if (points.get(0).equals(points.get(points.size() - 1))) {    logger.warn("Removed duplicate point");    points.remove(points.size() - 1);  }  _points.addAll(points);}  }
class C{  public RelativeDateFormat(Date time){  this(time.getTime());}  }
class C{  public SnackbarBuilder(Activity activity){  setup(activity);  parentView=activity.findViewById(parentViewId);}  }
class C{  void cache(@NotNull final PyFile file,@NotNull final PyEvaluationResult result){  myResultMap.put(file,result);}  }
class C{  public void testTomasFa_1() throws ParseException {  checkIntersectionNone("LINESTRING (-42.0 163.2, 21.2 265.2)","LINESTRING (-26.2 188.7, 37.0 290.7)");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.160 -0500",hash_original_method="D66678B4038334D8E14600B3A8FC8FD7",hash_generated_method="1E77FC77285F8848AC72DCCE8FC9F0FC") private void doAcquireShared(int arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Map == false) {    return false;  }  Map map=(Map)obj;  if (map.size() != size()) {    return false;  }  MapIterator it=mapIterator();  try {    while (it.hasNext()) {      Object key=it.next();      Object value=it.getValue();      if (value == null) {        if (map.get(key) != null || map.containsKey(key) == false) {          return false;        }      } else {        if (value.equals(map.get(key)) == false) {          return false;        }      }    }  } catch (  ClassCastException ignored) {    return false;  }catch (  NullPointerException ignored) {    return false;  }  return true;}  }
class C{  public static void deleteCrcFilesFromLocalFileSystem(FileSystem fs,Path path) throws IOException {  if (fs instanceof LocalFileSystem) {    Path fnameCrc=new Path(path.getParent(),"." + path.getName() + ".crc");    fs.delete(fnameCrc,false);    Path fnameMtdCrc=new Path(path.getParent(),"." + path.getName() + ".mtd.crc");    fs.delete(fnameMtdCrc,false);  }}  }
class C{  public void refreshNativeTitle(){  impl.refreshNativeTitle();}  }
class C{  @Override public void updateParameters(InputPort inputPort){  this.parameters=new Parameters(getParameterTypes(inputPort));}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  public EntryFile(long millis){  this.tag=null;  this.timestampMillis=millis;  this.flags=DropBoxManager.IS_EMPTY;  this.file=null;  this.blocks=0;}  }
class C{  public String retrieveURL(){  return m_URL;}  }
class C{  private EmrClusterDefinitionUpdateRequest createEmrClusterDefinitionUpdateRequest(EmrClusterDefinition emrClusterDefinitionConfiguration){  EmrClusterDefinitionUpdateRequest request=new EmrClusterDefinitionUpdateRequest();  request.setEmrClusterDefinition(emrClusterDefinitionConfiguration);  return request;}  }
class C{  public T lowerEndpoint(){  if (hasLowerEndpoint())   return lowerEndpoint;  throw new IllegalStateException("unbounded");}  }
class C{  protected void endOpenTag() throws IOException {  Element element=currentElement();  if (!element.openTagEnded) {    writeOpenTagEnd();    element.openTagEnded=true;  }}  }
class C{  private void drawDiamond(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size;  path[2]=x - size;  path[3]=y;  path[4]=x;  path[5]=y + size;  path[6]=x + size;  path[7]=y;  drawPath(canvas,path,paint,true);}  }
class C{  private void methodCall(CallNormalOp callOp){  CompiledMethod callee=callOp.getMethod();  StackFrame callerFrame=env.top();  saveContext(callOp,callerFrame);  pushFrame(callee);  setActualParams(callOp.getOperandValues(callerFrame));  code=callee.getCodeArray();  pc=0;  nesting++;}  }
class C{  public static DoubleStream dropWhile(DoubleStream stream,DoublePredicate predicate){  Objects.requireNonNull(stream);  Objects.requireNonNull(predicate);  return StreamSupport.doubleStream(new WhileOps.UnorderedWhileSpliterator.OfDouble.Dropping(stream.spliterator(),true,predicate),stream.isParallel()).onClose(null);}  }
class C{  ListTimeSeriesResponse readTimeseriesValue() throws IOException {  ListTimeSeriesResponse response=monitoringService.projects().timeSeries().list(projectResource).setFilter("metric.type=\"" + metricType + "\"").setPageSize(3).setIntervalStartTime(getStartTime()).setIntervalEndTime(getNow()).execute();  return response;}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  int row, col;  double z;  float progress=0;  int m, n;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if ((inputHeader1 == null) || (inputHeader2 == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRasterInfo image1=new WhiteboxRasterInfo(inputHeader1);    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRasterInfo image2=new WhiteboxRasterInfo(inputHeader2);    if (image2.getNumberRows() != rows || image2.getNumberColumns() != cols) {      showFeedback("The input images must have the same number of rows and columns");      return;    }    double noData2=image2.getNoDataValue();    int image1Min=(int)image1.getMinimumValue();    int image2Min=(int)image2.getMinimumValue();    int image1Max=(int)image1.getMaximumValue();    int image2Max=(int)image2.getMaximumValue();    int image1Range=image1Max - image1Min + 1;    int image2Range=image2Max - image2Min + 1;    int[][] featureSpace=new int[image1Range][image2Range];    double data1[]=null;    double data2[]=null;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        if (data1[col] != noData1 && data2[col] != noData2) {          m=(int)(data1[col] - image1Min);          n=(int)(data2[col] - image2Min);          featureSpace[m][n]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    Plot plot=new Plot(featureSpace,image1.getShortHeaderFile(),image2.getShortHeaderFile(),image1Min,image1Max,image2Min,image2Max,myHost.getDefaultFont());    image1.close();    image2.close();    returnData(plot);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static long remainder(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return dividend;    } else {      return dividend - divisor;    }  }  if (dividend >= 0) {    return dividend % divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return rem - (compare(rem,divisor) >= 0 ? divisor : 0);}  }
class C{  void updateItem(Face face){  mFace=face;  postInvalidate();}  }
class C{  public NetworkVmAllocationPolicy(List<? extends Host> list){  super(list);  setFreePes(new ArrayList<Integer>());  for (  Host host : getHostList()) {    getFreePes().add(host.getNumberOfPes());  }  setVmTable(new HashMap<String,Host>());  setUsedPes(new HashMap<String,Integer>());}  }
class C{  public void init(){  FileDownloader.registerDownloadFileChangeListener(this);  if (!TextUtils.isEmpty(mCourseUrl)) {    mDownloadFileInfo=FileDownloader.getDownloadFile(mCourseUrl);  }}  }
class C{  public static void addReturnToElement(Element e){  if (!ignoreLineBreaks) {    Document doc=e.getOwnerDocument();    e.appendChild(doc.createTextNode("\n"));  }}  }
class C{  public boolean isDebuggingFinest(){  return logger.isLoggable(Level.FINEST);}  }
class C{  @ObjectiveCName("isAnimationAutoPlayEnabled") public boolean isAnimationAutoPlayEnabled(){  return modules.getSettingsModule().isAnimationAutoPlayEnabled();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"idiv");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a idiv instruction (invalid number of operands)");  }  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree divisorOperand=operands.get(0);  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final OperandSize size=Helpers.getOperandSize(operands.get(0));  final TranslationResult resultDividend=Helpers.loadFirstDivOperand(environment,offset,size);  instructions.addAll(resultDividend.getInstructions());  offset=baseOffset + instructions.size();  final String dividend=resultDividend.getRegister();  final TranslationResult resultDivisor=Helpers.translateOperand(environment,offset,divisorOperand,true);  instructions.addAll(resultDivisor.getInstructions());  offset=baseOffset + instructions.size();  final String divisor=resultDivisor.getRegister();  final Pair<String,String> absDividend=Helpers.generateAbs(environment,offset,dividend,size,instructions);  offset=baseOffset + instructions.size();  final Pair<String,String> absDivisor=Helpers.generateAbs(environment,offset,divisor,size,instructions);  offset=baseOffset + instructions.size();  final String divResult=environment.getNextVariableString();  final String modResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createDiv(offset,size,absDividend.second(),size,absDivisor.second(),size,divResult));  instructions.add(ReilHelpers.createMod(offset + 1,size,absDividend.second(),size,absDivisor.second(),size,modResult));  final String xoredSigns=environment.getNextVariableString();  final String toggleMask=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset + 2,size,absDividend.first(),size,absDividend.second(),size,xoredSigns));  instructions.add(ReilHelpers.createSub(offset + 3,size,"0",size,xoredSigns,size,toggleMask));  final String decDivResult=environment.getNextVariableString();  final String realDivResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset + 4,size,divResult,size,xoredSigns,size,decDivResult));  instructions.add(ReilHelpers.createXor(offset + 5,size,decDivResult,size,toggleMask,size,realDivResult));  final String modToggleMask=environment.getNextVariableString();  final String decModResult=environment.getNextVariableString();  final String realModResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset + 6,size,"0",size,absDividend.first(),size,modToggleMask));  instructions.add(ReilHelpers.createSub(offset + 7,size,modResult,size,absDividend.first(),size,decModResult));  instructions.add(ReilHelpers.createXor(offset + 8,size,decModResult,size,modToggleMask,size,realModResult));  instructions.addAll(Helpers.writeDivResult(environment,offset + 9,realDivResult,realModResult,size));}  }
class C{  public AmqpReceiver createReceiver(Source source) throws Exception {  return createReceiver(source,getNextReceiverId());}  }
class C{  public TimeValue keepAlive(){  return keepAlive;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  private boolean introductionCompletedPreviously(){  final SharedPreferences sp=getSharedPreferences(DISPLAY_ONCE_PREFS,MODE_PRIVATE);  return sp.getBoolean(DISPLAY_ONCE_KEY,false);}  }
class C{  public FilteredAssociationRules(Object producer,Filter filter,AssociationRules rules){  super(null,producer);  m_filter=filter;  m_wrappedRules=rules;}  }
class C{  public void go(File file) throws IOException {  go(file,false);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.VARIABLE_REF__REF:    setRef((VarDefinition)null);  return;}super.eUnset(featureID);}  }
class C{  public GuacamoleServerBusyException(Throwable cause){  super(cause);}  }
class C{  private void updateName(){  m_newName=m_nameField.getText().equalsIgnoreCase("") ? null : m_nameField.getText();}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  public void play(String uri){  tvInputPlayer.setSurface(mSurface);  try {    Log.d(TAG,"Play " + uri + "; "+ uri.indexOf("asset:///"));    if (uri.contains("asset:///")) {      Log.i(TAG,"Is a local file");      DataSource dataSource=new AssetDataSource(getApplicationContext());      ExtractorSampleSource extractorSampleSource=new ExtractorSampleSource(Uri.parse(uri),dataSource,new DefaultAllocator(1000),5000);      TrackRenderer audio=new MediaCodecAudioTrackRenderer(extractorSampleSource,null,null,true);      tvInputPlayer.prepare(audio,null,null);    } else {      tvInputPlayer.prepare(getApplicationContext(),Uri.parse(uri),TvInputPlayer.SOURCE_TYPE_HLS);    }  } catch (  Exception e) {    e.printStackTrace();  }  tvInputPlayer.setPlayWhenReady(true);}  }
class C{  public List<JCCompilationUnit> enterTrees(List<JCCompilationUnit> roots){  if (!taskListener.isEmpty()) {    for (    JCCompilationUnit unit : roots) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,unit);      taskListener.started(e);    }  }  enter.main(roots);  if (!taskListener.isEmpty()) {    for (    JCCompilationUnit unit : roots) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,unit);      taskListener.finished(e);    }  }  if (needRootClasses || sourceOutput || stubOutput) {    ListBuffer<JCClassDecl> cdefs=new ListBuffer<>();    for (    JCCompilationUnit unit : roots) {      for (List<JCTree> defs=unit.defs; defs.nonEmpty(); defs=defs.tail) {        if (defs.head instanceof JCClassDecl)         cdefs.append((JCClassDecl)defs.head);      }    }    rootClasses=cdefs.toList();  }  for (  JCCompilationUnit unit : roots) {    inputFiles.add(unit.sourcefile);  }  return roots;}  }
class C{  public Node appendNode(Object name,Map attributes){  return new Node(this,name,attributes);}  }
class C{  public static Integer convertStringToInteger(String s){  if (s == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    if (s.length() == 0) {      return null;    }    return Integer.valueOf(s);  } catch (  NumberFormatException e) {    String message=Logging.getMessage("generic.ConversionError",s);    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    return null;  }}  }
class C{  public ProjectPrivilegeExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public int V(){  return V;}  }
class C{  @Override public boolean updateElevation(QuadTree quadTree){  boolean result=false;  for (int i=0; i < pointSet.getNumberOfChildren(); ++i) {    Waypoint wp=(Waypoint)pointSet.getChild(i);    result|=wp.updateElevation(quadTree);  }  return (result);}  }
class C{  public String adjustWeightsTipText(){  return "Wether instance weights will be adjusted to maintain total weight per " + "class.";}  }
class C{  public ForClauseItem(){  expressions=new ArrayList<Expression>();}  }
class C{  protected CmapTable(){  super(TrueTypeTable.CMAP_TABLE);  setVersion((short)0x0);  subtables=Collections.synchronizedSortedMap(new TreeMap<CmapSubtable,CMap>());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.305 -0500",hash_original_method="43A85B457185E158137E22B107CD3124",hash_generated_method="43A85B457185E158137E22B107CD3124") void add(Message message,State state,State orgState){  mCount+=1;  if (mMessages.size() < mMaxSize) {    mMessages.add(new ProcessedMessageInfo(message,state,orgState));  } else {    ProcessedMessageInfo pmi=mMessages.get(mOldestIndex);    mOldestIndex+=1;    if (mOldestIndex >= mMaxSize) {      mOldestIndex=0;    }    pmi.update(message,state,orgState);  }}  }
class C{  public int readByte() throws IOException {  if (_chunkLength > 0) {    _chunkLength--;    if (_chunkLength == 0 && _isLastChunk)     _chunkLength=END_OF_DATA;    return read();  } else   if (_chunkLength == END_OF_DATA) {    _chunkLength=0;    return -1;  }  int tag=read();switch (tag) {case 'N':    return -1;case 'B':case 'b':  _isLastChunk=tag == 'B';_chunkLength=(read() << 8) + read();int value=parseByte();if (_chunkLength == 0 && _isLastChunk) _chunkLength=END_OF_DATA;return value;default :throw new IOException("expected 'B' at " + (char)tag);}}  }
class C{  public boolean hasRGBAPictureEssenceDescriptor(){  return this.hasInterchangeObject(RGBAPictureEssenceDescriptor.class);}  }
class C{  @Override public void F(final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.F()");  }  javascript.execute(formObj,PdfDictionary.F,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public double scoreDag(Graph dag){  double score=0.0;  for (  Node y : dag.getNodes()) {    Set<Node> parents=new HashSet<>(dag.getParents(y));    int parentIndices[]=new int[parents.size()];    Iterator<Node> pi=parents.iterator();    int count=0;    while (pi.hasNext()) {      Node nextParent=pi.next();      parentIndices[count++]=hashIndices.get(nextParent);    }    int yIndex=hashIndices.get(y);    score+=fgsScore.localScore(yIndex,parentIndices);  }  return score;}  }
class C{  private void treeInsert(BasicBlockLE parent,BasicBlockLE newBBLE,boolean left){  if (parent == null) {    if (VM.VerifyAssertions)     VM._assert(root == null);    root=newBBLE;    root.setBlack();    if (DBG_BBSET)     db("inserted " + newBBLE + " as root of tree");  } else {    if (left) {      parent.left=newBBLE;    } else {      parent.right=newBBLE;    }    newBBLE.parent=parent;    if (DBG_BBSET) {      db("inserted new block " + newBBLE + " as "+ (left ? "left" : "right")+ " child of "+ parent);    }    fixupBBSet(newBBLE);  }}  }
class C{  public void init() throws MessagingException {  if (getInitParameter("table") == null) {    throw new MailetException("Table location not specified for JDBCRecipientRewriteTable");  }  String tableURL=getInitParameter("table");  String datasourceName=tableURL.substring(5);  int pos=datasourceName.indexOf("/");  String tableName=datasourceName.substring(pos + 1);  datasourceName=datasourceName.substring(0,pos);  Connection conn=null;  try {    conn=datasource.getConnection();    DatabaseMetaData dbMetaData=conn.getMetaData();    if (!(theJDBCUtil.tableExists(dbMetaData,tableName))) {      String exceptionBuffer="Could not find table '" + tableName + "' in datasource '"+ datasourceName+ "'";      throw new MailetException(exceptionBuffer);    }    query=getInitParameter("sqlquery",RecipientRewriteTableUtil.QUERY);  } catch (  MailetException me) {    throw me;  }catch (  Exception e) {    throw new MessagingException("Error initializing JDBCRecipientRewriteTable",e);  } finally {    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  public void stopQueue(){  log.info("Stopping job queue of {}",queueName);  queue.stop(DEFAULT_MAX_WAIT_STOP);}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  public static double generateRandomDoubleBetween(double lowerLimit,double upperLimit){  return lowerLimit + ((upperLimit - lowerLimit) * _r.nextDouble());}  }
class C{  @Override public void updateRowId(int columnIndex,RowId x) throws SQLException {  throw unsupported("rowId");}  }
class C{  public void updateHelp(){  if (synapseEditingPanel.getUpdateInfoPanel().getCbSynapseType().getSelectedItem() == SimbrainConstants.NULL_STRING) {    helpAction=new ShowHelpAction("Pages/Network/synapse.html");  } else {    String name=(String)synapseEditingPanel.getUpdateInfoPanel().getCbSynapseType().getSelectedItem();    helpAction=new ShowHelpAction("Pages/Network/synapse/" + name + ".html");  }  helpButton.setAction(helpAction);}  }
class C{  public static Object respond(final RequestHeader header,final serverObjects post,final serverSwitch env) throws IOException {  final Switchboard sb=(Switchboard)env;  if (post == null) {    throw new TemplateMissingParameterException("please fill at least url or code parameter");  }  String ext=header.get("EXT",null);  final boolean auth=Domains.isLocalhost(header.get(HeaderFramework.CONNECTION_PROP_CLIENTIP,"")) || sb.verifyAuthentication(header);  DigestURL url=VIEWER.parseURL(post,auth);  EncodedImage encodedImage;  ImageInputStream imageInStream=null;  InputStream inStream=null;  try {    String urlExt=MultiProtocolURL.getFileExtension(url.getFileName());    if (ext != null && ext.equalsIgnoreCase(urlExt) && ImageViewer.isBrowserRendered(urlExt)) {      return VIEWER.openInputStream(post,sb.loader,auth,url);    }    if (url.isFile()) {      imageInStream=ImageIO.createImageInputStream(url.getFSFile());    } else {      inStream=VIEWER.openInputStream(post,sb.loader,auth,url);      imageInStream=ImageIO.createImageInputStream(inStream);    }    encodedImage=VIEWER.parseAndScale(post,auth,url,ext,imageInStream);  } catch (  Exception e) {    encodedImage=new EncodedImage(new byte[0],ext,post.getBoolean("isStatic"));  } finally {    if (inStream != null) {      try {        inStream.close();      } catch (      IOException ignored) {      }    }  }  return encodedImage;}  }
class C{  public ByteArrayOutputStream generate(LinkedList<ReportTO> dataReport,String nameTrx,String[] generalTitle,String clientName,String clientNIT,String periodName,String currencyName,MReportColumn[] m_columns,String codeFont,String city,Integer logoId){  baosPDF=new ByteArrayOutputStream();  data=dataReport;  String fontPar[]=codeFont.split("-");  Integer lFont=Integer.parseInt(fontPar[2]);  titleFont=FontFactory.getFont(fontPar[0],lFont + 5,Font.BOLDITALIC);  titleTableFont=FontFactory.getFont(fontPar[0],lFont + 2,Font.BOLDITALIC);  catFont=FontFactory.getFont(fontPar[0],lFont + 2,Font.BOLD);  subFont=FontFactory.getFont(fontPar[0],lFont,Font.NORMAL);  try {    document=new Document(PageSize.LETTER,20,20,20,40);    writer=PdfWriter.getInstance(document,baosPDF);    document.open();    document.addTitle(generalTitle[0]);    document.addAuthor("SmartJSP S.A.S.");    document.addCreator("SmartJSP S.A.S.");    onOpenDocument(writer,document);    onEndPage(writer,document);    java.awt.Image img;    if (logoId > 0) {      MImage mimage=MImage.get(Env.getCtx(),logoId);      byte[] imageData=mimage.getData();      img=Toolkit.getDefaultToolkit().createImage(imageData);    } else {      img=org.compiere.Adempiere.getImageLogoSmall(true);    }    com.lowagie.text.Image logo=com.lowagie.text.Image.getInstance(img,null);    logo.scaleToFit(100,30);    document.add(logo);    Paragraph genTitle=new Paragraph(dataNull(generalTitle[0]).toUpperCase(),titleFont);    genTitle.setAlignment(Paragraph.ALIGN_CENTER);    document.add(genTitle);    Paragraph clitName=new Paragraph(dataNull(clientName).toUpperCase(),titleFont);    clitName.setAlignment(Paragraph.ALIGN_CENTER);    document.add(clitName);    Paragraph cliCity=new Paragraph(dataNull(city).toUpperCase(),titleFont);    cliCity.setAlignment(Paragraph.ALIGN_CENTER);    document.add(cliCity);    Paragraph cliNIT=new Paragraph(dataNull(clientNIT).toUpperCase(),titleFont);    cliNIT.setAlignment(Paragraph.ALIGN_CENTER);    document.add(cliNIT);    String pn="";    if (generalTitle[1] != null && generalTitle[1].length() > 0) {      pn=generalTitle[1] + " " + periodName;    } else {      pn=periodName;    }    if (generalTitle[2] != null && generalTitle[2].length() > 0) {      pn=pn + " " + generalTitle[2];    }    Paragraph perName=new Paragraph(dataNull(pn).toUpperCase(),titleTableFont);    perName.setAlignment(Paragraph.ALIGN_CENTER);    document.add(perName);    Paragraph currency=new Paragraph(dataNull(currencyName),titleTableFont);    currency.setAlignment(Paragraph.ALIGN_CENTER);    addEmptyLine(currency,2);    document.add(currency);    cols=m_columns.length + 2;    float[] columnWidths=new float[cols];    columnWidths[0]=1f;    columnWidths[1]=3f;    for (int i=2; i < cols; i++) {      columnWidths[i]=1f;    }    table=new PdfPTable(columnWidths);    PdfPCell cellTitle=new PdfPCell(new Paragraph(Msg.translate(Env.getCtx(),"name").toUpperCase(),catFont));    cellTitle.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);    cellTitle.setBackgroundColor(Color.LIGHT_GRAY);    table.addCell(cellTitle);    cellTitle=new PdfPCell(new Paragraph(Msg.translate(Env.getCtx(),"description").toUpperCase(),catFont));    cellTitle.setHorizontalAlignment(Paragraph.ALIGN_LEFT);    cellTitle.setBackgroundColor(Color.LIGHT_GRAY);    table.addCell(cellTitle);    for (    MReportColumn mcol : m_columns) {      String colName=mcol.getName();      cellTitle=new PdfPCell(new Paragraph(colName.toUpperCase(),catFont));      cellTitle.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);      cellTitle.setBackgroundColor(Color.LIGHT_GRAY);      table.addCell(cellTitle);    }    reportTable();    document.add(table);    onEndPage(writer,document);    onCloseDocument(writer,document);    document.close();  } catch (  Exception e) {    System.out.println("SMpdfReport(generar)ERROR:: al crear el documento PDF");    System.out.println(e.getMessage());    e.printStackTrace();  }  return baosPDF;}  }
class C{  public RangeQueryBuilder lt(String to){  this.to=to;  this.includeUpper=false;  return this;}  }
class C{  public static ReferenceTable newInstance(){  final ReferenceTable returnInstance=new ReferenceTable();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  private void flipConditionalBranch(Instruction cb){  Instruction g=cb.nextInstructionInCodeOrder();  BranchOperand gTarget=MIR_Branch_getClearTarget(g);  if (VM.BuildForIA32) {    org.jikesrvm.compilers.opt.ir.ia32.MIR_CondBranch.setCond(cb,org.jikesrvm.compilers.opt.ir.ia32.MIR_CondBranch.getCond(cb).flipCode());  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerPC);    org.jikesrvm.compilers.opt.ir.ppc.MIR_CondBranch.setCond(cb,org.jikesrvm.compilers.opt.ir.ppc.MIR_CondBranch.getCond(cb).flipCode());  }  MIR_CondBranch_setTarget(cb,gTarget);  g.remove();}  }
class C{  private double[][] gradTau(){  int numCondVars=getIndices().length - 2;switch (numCondVars) {case 0:    return convertGradTau(gradTau0());case 1:  return convertGradTau(gradTau1());case 2:return convertGradTau(gradTau2());case 3:return convertGradTau(gradTau3());case 4:return convertGradTau(gradTau4());default :throw new IllegalStateException("Only gradients for up to " + "four conditioning variables were hardcoded: " + numCondVars);}}  }
class C{  protected boolean[] correctBuildInitialisation(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  boolean[] result=new boolean[2];  print("correct initialisation during buildAssociations");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  Instances train1=null;  Instances train2=null;  Associator associator=null;  AssociatorEvaluation evaluation1A=null;  AssociatorEvaluation evaluation1B=null;  AssociatorEvaluation evaluation2=null;  int stage=0;  try {    train1=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    train2=makeTestDataset(84,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() + 1 : 0,datePredictor ? getNumDate() + 1 : 0,relationalPredictor ? getNumRelational() + 1 : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train1,missingLevel,predictorMissing,classMissing);      addMissing(train2,missingLevel,predictorMissing,classMissing);    }    associator=AbstractAssociator.makeCopies(getAssociator(),1)[0];    evaluation1A=new AssociatorEvaluation();    evaluation1B=new AssociatorEvaluation();    evaluation2=new AssociatorEvaluation();  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    stage=0;    evaluation1A.evaluate(associator,train1);    stage=1;    evaluation2.evaluate(associator,train2);    stage=2;    evaluation1B.evaluate(associator,train1);    stage=3;    if (!evaluation1A.equals(evaluation1B)) {      if (m_Debug) {        println("\n=== Full report ===\n" + evaluation1A.toSummaryString("\nFirst buildAssociations()") + "\n\n");        println(evaluation1B.toSummaryString("\nSecond buildAssociations()") + "\n\n");      }      throw new Exception("Results differ between buildAssociations calls");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during building");switch (stage) {case 0:        print(" of dataset 1");      break;case 1:    print(" of dataset 2");  break;case 2:print(" of dataset 1 (2nd build)");break;case 3:print(", comparing results from builds of dataset 1");break;}println(": " + ex.getMessage() + "\n");println("here are the datasets:\n");println("=== Train1 Dataset ===\n" + train1.toString() + "\n");println("=== Train2 Dataset ===\n" + train2.toString() + "\n");}}return result;}  }
class C{  public E peek(){  if (isEmpty()) {    return null;  }  return elements[0];}  }
class C{  public CharBuffer append(Object obj){  return append(String.valueOf(obj));}  }
class C{  public static WritableByteChannel create(String prefix,String shardTemplate,String suffix,int numShards,String mimeType) throws IOException {  if (numShards == 1) {    return create(constructName(prefix,shardTemplate,suffix,0,1),mimeType);  }  @SuppressWarnings("resource") ShardingWritableByteChannel shardingChannel=new ShardingWritableByteChannel();  Set<String> outputNames=new HashSet<>();  for (int i=0; i < numShards; i++) {    String outputName=constructName(prefix,shardTemplate,suffix,i,numShards);    if (!outputNames.add(outputName)) {      throw new IllegalArgumentException("Shard name collision detected for: " + outputName);    }    WritableByteChannel channel=create(outputName,mimeType);    shardingChannel.addChannel(channel);  }  return shardingChannel;}  }
class C{  public void disconnect(final IProject[] projects){  disconnect(projects,true);}  }
class C{  public static DoubleSpends createFakeDoubleSpendTxns(NetworkParameters params,Address to){  DoubleSpends doubleSpends=new DoubleSpends();  Coin value=COIN;  Address someBadGuy=new ECKey().toAddress(params);  doubleSpends.prevTx=new Transaction(params);  TransactionOutput prevOut=new TransactionOutput(params,doubleSpends.prevTx,value,someBadGuy);  doubleSpends.prevTx.addOutput(prevOut);  doubleSpends.t1=new Transaction(params);  TransactionOutput o1=new TransactionOutput(params,doubleSpends.t1,value,to);  doubleSpends.t1.addOutput(o1);  doubleSpends.t1.addInput(prevOut);  doubleSpends.t2=new Transaction(params);  doubleSpends.t2.addInput(prevOut);  TransactionOutput o2=new TransactionOutput(params,doubleSpends.t2,value,someBadGuy);  doubleSpends.t2.addOutput(o2);  try {    doubleSpends.t1=params.getDefaultSerializer().makeTransaction(doubleSpends.t1.bitcoinSerialize());    doubleSpends.t2=params.getDefaultSerializer().makeTransaction(doubleSpends.t2.bitcoinSerialize());  } catch (  ProtocolException e) {    throw new RuntimeException(e);  }  return doubleSpends;}  }
class C{  public boolean unitCanReadFrom(Unit u,Value v){  return valueTouchesRWSet(readSet(u),v,u.getUseBoxes());}  }
class C{  private static int totalSeconds(int hours,int minutes,int seconds){  return hours * SECONDS_PER_HOUR + minutes * SECONDS_PER_MINUTE + seconds;}  }
class C{  public BoxRenderer(String url,int width){  this(url,url,width,NO_HEIGHT);}  }
class C{  public static CharBuffer createCharBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 2);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asCharBuffer();}  }
class C{  protected void removeFromPortMap(IOFSwitch sw,MacAddress mac,VlanVid vlan){  if (vlan == VlanVid.FULL_MASK) {    vlan=VlanVid.ofVlan(0);  }  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (swMap != null) {    swMap.remove(new MacVlanPair(mac,vlan));  }}  }
class C{  public CustomHrView(Element elem,Color color){  super(elem);  myColor=color;}  }
class C{  @Override protected void doInitContents(){  List<GefaehrdungsUmsetzung> arrListAllGefaehrdungsUmsetzungen=((RiskAnalysisWizard)getWizard()).getAllGefaehrdungsUmsetzungen();  final ComboBoxCellEditor choiceEditor=new ComboBoxCellEditor(viewer.getTable(),GefaehrdungsUmsetzung.getAlternativenText(),SWT.READ_ONLY);  choiceEditor.setActivationStyle(ComboBoxCellEditor.DROP_DOWN_ON_MOUSE_ACTIVATION);  viewer.setCellEditors(new CellEditor[]{null,null,null,choiceEditor});  viewer.setCellModifier(new PropertiesComboBoxCellModifier(viewer,(RiskAnalysisWizard)getWizard(),this));  viewer.setColumnProperties(new String[]{IMG_COLUMN_ID,NUMBER_COLUMN_ID,NAME_COLUMN_ID,CHOICE_COLUMN_ID});  viewer.setLabelProvider(new TableViewerLabelProvider());  viewer.setContentProvider(new ArrayContentProvider());  viewer.setInput(arrListAllGefaehrdungsUmsetzungen);  viewer.setSorter(new GefaehrdungenSorter());  packAllColumns();  ((RiskAnalysisWizard)getWizard()).setCanFinish(true);  checkPageComplete();}  }
class C{  public static void main(String[] args) throws Exception {  System.setProperty(SystemProperties.PROXY_CLIENT_HTTP_PORT,"8080");  System.setProperty(SystemProperties.PROXY_CLIENT_HTTPS_PORT,"8443");  setUp();  List<MessageTestCase> testCasesToRun=TestcaseLoader.getTestCasesToRun(args);  List<MessageTestCase> normalTestCases=new ArrayList<>();  List<MessageTestCase> sslTestCases=new ArrayList<>();  for (  MessageTestCase tc : testCasesToRun) {    if (tc instanceof SslMessageTestCase) {      sslTestCases.add(tc);    } else {      normalTestCases.add(tc);    }  }  startWatchdog();  try {    MessageLog.init(actorSystem,jobManager);    runNormalTestCases(normalTestCases);    runSslTestCases(sslTestCases);  }  finally {    jobManager.stop();    actorSystem.shutdown();    List<MessageTestCase> failed=getFailedTestcases(testCasesToRun);    LOG.info("COMPLETE, passed {} - failed {}",testCasesToRun.size() - failed.size(),failed.size());    StringBuilder sb=new StringBuilder("Results:\n");    for (    MessageTestCase t : testCasesToRun) {      String status=t.isFailed() ? "FAILED" : "PASSED";      sb.append("\t").append(status).append(" - ");      sb.append(t.getId()).append("\n");    }    LOG.info("{}",sb.toString());    if (!failed.isEmpty()) {      sb=new StringBuilder("Failed testcases:\n");      for (      MessageTestCase t : failed) {        sb.append("\t").append(t.getId()).append("\n");      }      throw new RuntimeException(sb.toString());    }  }}  }
class C{  private UnManagedFileSystem createUnManagedFileSystem(UnManagedFileSystem unManagedFileSystem,AccessProfile profile,String unManagedFileSystemNativeGuid,String unManangedFileSystemNativeId,StorageSystem system,StoragePool pool,String fileSystem,StoragePort storagePort,Map<String,String> fileSystemChars) throws IOException, NetAppCException {  if (null == unManagedFileSystem) {    unManagedFileSystem=new UnManagedFileSystem();    unManagedFileSystem.setId(URIUtil.createId(UnManagedFileSystem.class));    unManagedFileSystem.setNativeGuid(unManagedFileSystemNativeGuid);    unManagedFileSystem.setStorageSystemUri(system.getId());    unManagedFileSystem.setHasExports(false);    unManagedFileSystem.setHasShares(false);  }  Map<String,StringSet> unManagedFileSystemInformation=new HashMap<String,StringSet>();  StringMap unManagedFileSystemCharacteristics=new StringMap();  unManagedFileSystemCharacteristics.put(SupportedFileSystemCharacterstics.IS_SNAP_SHOT.toString(),FALSE);  if (fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.SPACE_GUARANTEE.toString())).equalsIgnoreCase(SPACE_GUARANTEE_NONE)) {    unManagedFileSystemCharacteristics.put(SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),TRUE);  } else {    unManagedFileSystemCharacteristics.put(SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),FALSE);  }  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_INGESTABLE.toString(),TRUE);  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString(),FALSE);  if (null != storagePort) {    StringSet storagePorts=new StringSet();    storagePorts.add(storagePort.getId().toString());    unManagedFileSystemInformation.put(SupportedFileSystemInformation.STORAGE_PORT.toString(),storagePorts);  }  if (null != pool) {    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_POOL.toString(),pools);    unManagedFileSystem.setStoragePoolUri(pool.getId());    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(_dbClient,pool.getId());    _logger.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedFileSystem.getSupportedVpoolUris().clear();    } else {      unManagedFileSystem.getSupportedVpoolUris().replace(matchedVPools);      _logger.info("Replaced Pools :" + Joiner.on("\t").join(unManagedFileSystem.getSupportedVpoolUris()));    }  }  if (null != system) {    StringSet systemTypes=new StringSet();    systemTypes.add(system.getSystemType());    unManagedFileSystemInformation.put(SupportedFileSystemInformation.SYSTEM_TYPE.toString(),systemTypes);  }  if (null != fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.ALLOCATED_CAPACITY.toString()))) {    StringSet allocatedCapacity=new StringSet();    allocatedCapacity.add(fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.ALLOCATED_CAPACITY.toString())));    unManagedFileSystemInformation.put(SupportedFileSystemInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  }  if (null != fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.PROVISIONED_CAPACITY.toString()))) {    StringSet provisionedCapacity=new StringSet();    provisionedCapacity.add(fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.PROVISIONED_CAPACITY.toString())));    unManagedFileSystemInformation.put(SupportedFileSystemInformation.PROVISIONED_CAPACITY.toString(),provisionedCapacity);  }  if (null != fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.NAME.toString()))) {    StringSet fsName=new StringSet();    String fileSystemName=fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.NAME.toString()));    fsName.add(fileSystemName);    unManagedFileSystem.setLabel(fileSystemName);    StringSet fsPath=new StringSet();    fsPath.add(unManangedFileSystemNativeId);    StringSet fsMountPath=new StringSet();    fsMountPath.add(unManangedFileSystemNativeId);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.NAME.toString(),fsName);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.NATIVE_ID.toString(),fsPath);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.DEVICE_LABEL.toString(),fsName);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.PATH.toString(),fsPath);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.MOUNT_PATH.toString(),fsMountPath);  }  unManagedFileSystem.addFileSystemInformation(unManagedFileSystemInformation);  unManagedFileSystem.setFileSystemCharacterstics(unManagedFileSystemCharacteristics);  return unManagedFileSystem;}  }
class C{  public boolean isShutterButtonEnabled(){  return mShutterButton.isEnabled();}  }
class C{  private PathSlice switchToHeap(PathSlice source,List<Closeable> toCloseHeroically) throws IOException {  int count=Math.toIntExact(source.count);  PointReader reader=source.writer.getSharedReader(source.start,source.count,toCloseHeroically);  try (PointWriter writer=new HeapPointWriter(count,count,packedBytesLength,longOrds,singleValuePerDoc)){    for (int i=0; i < count; i++) {      boolean hasNext=reader.next();      assert hasNext;      writer.append(reader.packedValue(),reader.ord(),reader.docID());    }    return new PathSlice(writer,0,count);  } catch (  Throwable t) {    verifyChecksum(t,source.writer);    return null;  }}  }
class C{  public static void main(String[] args) throws Exception {  XRLog.setLevel("plumbing.general",Level.OFF);  String file=null;  if (args.length == 0) {    file="tests/diff";  } else {    file=args[0];  }  DocumentDiffTest ddt=new DocumentDiffTest();  if (new File(file).isDirectory()) {    ddt.runTests(new File(file),width,height);  } else {    System.out.println(xhtmlToDiff(file,1280,768));  }}  }
class C{  public static JsonParserSequence createFlattened(JsonParser first,JsonParser second){  if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) {    return new JsonParserSequence(new JsonParser[]{first,second});  }  ArrayList<JsonParser> p=new ArrayList<JsonParser>();  if (first instanceof JsonParserSequence) {    ((JsonParserSequence)first).addFlattenedActiveParsers(p);  } else {    p.add(first);  }  if (second instanceof JsonParserSequence) {    ((JsonParserSequence)second).addFlattenedActiveParsers(p);  } else {    p.add(second);  }  return new JsonParserSequence(p.toArray(new JsonParser[p.size()]));}  }
class C{  @Override public String globalInfo(){  return "Merges values of all nominal attributes among the specified attributes, excluding " + "the class attribute, using the CHAID method, but without considering to re-split " + "merged subsets. It implements Steps 1 and 2 described by Kass (1980), see\n\n" + getTechnicalInformation().toString() + "\n\n"+ "Once attribute values have been merged, a chi-squared test using the Bonferroni "+ "correction is applied to check if the resulting attribute is a valid predictor, "+ "based on the Bonferroni multiplier in Equation 3.2 in Kass (1980). If an attribute does "+ "not pass this test, all remaining values (if any) are merged. Nevertheless, useless "+ "predictors can slip through without being fully merged, e.g. identifier attributes.\n\n"+ "The code applies the Yates correction when the chi-squared statistic is computed.\n\n"+ "Note that the algorithm is quadratic in the number of attribute values for an attribute.";}  }
class C{  public void notifyDataSetInvalidated(){  mDataSetObservable.notifyInvalidated();}  }
class C{  public int add(GL10 gl,Drawable drawable,int minWidth,int minHeight){  return add(gl,drawable,null,null,minWidth,minHeight);}  }
class C{  public static Dimension measureHtmlText(String html){  JFrame testFrame=new JFrame();  testFrame.setLayout(new BoxLayout(testFrame.getContentPane(),BoxLayout.PAGE_AXIS));  JLabel testLabel=new JLabel(html);  testFrame.add(testLabel);  testFrame.pack();  Dimension size=testLabel.getSize();  testFrame.dispose();  return new Dimension(size);}  }
class C{  public static void close(final Closeable obj){  if (obj != null) {    try {      obj.close();    } catch (    IOException ignore) {    }  }}  }
class C{  @Path("{secretId}") @Timed @ExceptionMetered @GET public AutomationSecretResponse readSecretById(@Auth AutomationClient automationClient,@PathParam("secretId") LongParam secretId){  Optional<Secret> secret=secretController.getSecretById(secretId.get());  if (!secret.isPresent()) {    throw new NotFoundException("Secret not found.");  }  ImmutableList<Group> groups=ImmutableList.copyOf(aclDAO.getGroupsFor(secret.get()));  return AutomationSecretResponse.fromSecret(secret.get(),groups);}  }
class C{  public void readUTCTime() throws IOException {  if (tag == ASN1Constants.TAG_UTCTIME) {switch (length) {case ASN1UTCTime.UTC_HM:case ASN1UTCTime.UTC_HMS:      break;case ASN1UTCTime.UTC_LOCAL_HM:case ASN1UTCTime.UTC_LOCAL_HMS:    throw new ASN1Exception("ASN.1 UTCTime: local time format is not supported");default :  throw new ASN1Exception("ASN.1 UTCTime: wrong length, identifier at " + tagOffset);}readContent();if (buffer[offset - 1] != 'Z') {throw new ASN1Exception("ASN.1 UTCTime wrongly encoded at [" + contentOffset + ']');}if (times == null) {times=new int[7];}times[0]=strToInt(contentOffset,2);if (times[0] > 49) {times[0]+=1900;} else {times[0]+=2000;}times[1]=strToInt(contentOffset + 2,2);times[2]=strToInt(contentOffset + 4,2);times[3]=strToInt(contentOffset + 6,2);times[4]=strToInt(contentOffset + 8,2);if (length == ASN1UTCTime.UTC_HMS) {times[5]=strToInt(contentOffset + 10,2);}} else if (tag == ASN1Constants.TAG_C_UTCTIME) {throw new ASN1Exception("Decoding constructed ASN.1 UTCTime type is not supported");} else {throw expected("UTCTime");}}  }
class C{  protected final void assertValid(final OperatedClientConnection wrappedConn){  if (wrappedConn == null) {    throw new IllegalStateException("No wrapped connection.");  }}  }
class C{  protected FinalizableWeakReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  protected ArcData computeArc(DrawContext dc){  Globe globe=dc.getGlobe();  Vec4 pA=globe.computePointFromPosition(this.position2);  Vec4 pB=globe.computePointFromPosition(this.position3);  Position baseMidpoint=new Position(LatLon.interpolate(0.5,this.position2,this.position3),0);  Vec4 pMid=globe.computePointFromPosition(baseMidpoint);  Vec4 vAB=pB.subtract3(pA);  Vec4 normal=globe.computeSurfaceNormalAtPoint(pMid);  Vec4 perpendicular=vAB.cross3(normal).normalize3();  ArcData arcData=new ArcData();  double chordLength=pA.distanceTo3(pB);  Angle arcAngle=this.getArcAngle();  arcData.radius=chordLength / (2 * arcAngle.sinHalfAngle());  double dist=arcData.radius * arcAngle.cosHalfAngle();  Vec4 vOrientation=globe.computePointFromPosition(this.position1).subtract3(pMid);  double tripleProduct=perpendicular.dot3(vOrientation);  double sign=(tripleProduct > 0) ? -1 : 1;  arcData.direction=perpendicular.multiply3(sign);  Vec4 pCenter=pMid.add3(arcData.direction.multiply3(dist));  arcData.center=globe.computePositionFromPoint(pCenter);  arcData.startAngle=LatLon.greatCircleAzimuth(arcData.center,this.position2);  Angle endAngle=LatLon.greatCircleAzimuth(arcData.center,this.position3);  double diffDegrees=endAngle.subtract(arcData.startAngle).degrees;  if (diffDegrees < -180)   diffDegrees+=360; else   if (diffDegrees > 180)   diffDegrees-=360;  arcData.arcAngle=Angle.fromDegrees(diffDegrees);  double globeRadius=globe.getRadiusAt(arcData.center.getLatitude(),arcData.center.getLongitude());  LatLon ll=LatLon.greatCircleEndPosition(arcData.center,arcData.arcAngle.divide(2.0).radians + arcData.startAngle.radians,arcData.radius / globeRadius);  arcData.midpoint=new Position(ll,0);  return arcData;}  }
class C{  public boolean isClosed(){  if (client != null) {    return client.isClosed();  } else {    return true;  }}  }
class C{  public static void copyCompilationUnit(CompilationUnit fromUnit,CompilationUnit toUnit,boolean useHistories){  toUnit.topLevelDefinitions.addAll(fromUnit.topLevelDefinitions);  if (useHistories) {    toUnit.inheritance.addAll(fromUnit.inheritanceHistory.keySet());    toUnit.types.addAll(fromUnit.typeHistory.keySet());    toUnit.namespaces.addAll(fromUnit.namespaceHistory.keySet());    toUnit.expressions.addAll(fromUnit.expressionHistory.keySet());  } else {    toUnit.inheritance.addAll(fromUnit.inheritance);    toUnit.types.addAll(fromUnit.types);    toUnit.namespaces.addAll(fromUnit.namespaces);    toUnit.expressions.addAll(fromUnit.expressions);  }  toUnit.inheritanceHistory=fromUnit.inheritanceHistory;  toUnit.typeHistory=fromUnit.typeHistory;  toUnit.namespaceHistory=fromUnit.namespaceHistory;  toUnit.expressionHistory=fromUnit.expressionHistory;  toUnit.setSignatureChecksum(fromUnit.getSignatureChecksum());  if (fromUnit.hasAssets()) {    toUnit.getAssets().addAll(fromUnit.getAssets());  }  toUnit.auxGenerateInfo=fromUnit.auxGenerateInfo;  toUnit.icon=fromUnit.icon;  toUnit.iconFile=fromUnit.iconFile;  if (fromUnit.hasTypeInfo) {    toUnit.typeInfo=fromUnit.typeInfo;    toUnit.hasTypeInfo=true;    toUnit.classTable.putAll(fromUnit.classTable);    toUnit.swfMetaData=fromUnit.swfMetaData;    toUnit.loaderClass=fromUnit.loaderClass;    toUnit.loaderClassBase=fromUnit.loaderClassBase;    toUnit.extraClasses.addAll(fromUnit.extraClasses);    toUnit.addAccessibilityClasses(fromUnit);    toUnit.licensedClassReqs.putAll(fromUnit.licensedClassReqs);    toUnit.remoteClassAliases.putAll(fromUnit.remoteClassAliases);    toUnit.effectTriggers.putAll(fromUnit.effectTriggers);    toUnit.mixins.addAll(fromUnit.mixins);    toUnit.resourceBundleHistory.addAll(fromUnit.resourceBundleHistory);    toUnit.bytes=fromUnit.bytes;  }}  }
class C{  public static List<Vertex> sources(List<Transition> transitions){  List<Vertex> vertices=new ArrayList<Vertex>();  for (  Transition transition : transitions) {    vertices.add(transition.getSource());  }  return vertices;}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("TruncateExceptionTest","id tinyint");  createTable("TruncateExceptionTest2","id tinyint not null primary key auto_increment, id2 tinyint ");}  }
class C{  public boolean searchForward(KMPMatch match,int maxBytes) throws IOException {  long start=getFilePointer();  long last=(maxBytes < 0) ? length() : Math.min(length(),start + maxBytes);  long needToScan=last - start;  int bytesAvailable=(int)(dataEnd - filePosition);  if (bytesAvailable < 1) {    seek(filePosition);    bytesAvailable=(int)(dataEnd - filePosition);  }  int bufStart=(int)(filePosition - bufferStart);  int scanBytes=(int)Math.min(bytesAvailable,needToScan);  int pos=match.indexOf(buffer,bufStart,scanBytes);  if (pos >= 0) {    seek(bufferStart + pos);    return true;  }  int matchLen=match.getMatchLength();  needToScan-=scanBytes - matchLen;  while (needToScan > matchLen) {    readBuffer(dataEnd - matchLen);    scanBytes=(int)Math.min(buffer.length,needToScan);    pos=match.indexOf(buffer,0,scanBytes);    if (pos > 0) {      seek(bufferStart + pos);      return true;    }    needToScan-=scanBytes - matchLen;  }  seek(last);  return false;}  }
class C{  public boolean mayLaunchUrl(Uri url,Bundle extras,List<Bundle> otherLikelyBundles){  try {    return mService.mayLaunchUrl(mCallback,url,extras,otherLikelyBundles);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public SaaSApplicationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,cause);  this.bean=bean;}  }
class C{  public NodeCoordinates(int size,NodeCoordType type,DistanceFunction distanceFunction){  super();  this.size=size;  this.type=type;  this.distanceFunction=distanceFunction;  nodes=new HashMap<Integer,Node>();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.REGULAR_EVENT_SPEC__EVENT:    setEvent((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public CompositeProcessorItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  IgniteNamedInstance(@Nullable String name){  this.name=name;}  }
class C{  public static boolean isNetworkAvailable(){  return isNetworkAvailable(NetType.Any);}  }
class C{  public static Field<Integer> ofInteger(String name){  return ofInteger(name,null);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,Math.sqrt(z1));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void processBmpImage(BufferedImage image){  if (!isError) {    File outputFile=new File(path,prefix + (numPage + 1) + ".bmp");    try {      ImageIO.write(image,"bmp",outputFile);      addTempFile(outputFile);      addScanFile(outputFile);      numPage++;    } catch (    IOException e) {      e.printStackTrace();      endProcess(true,false);    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>ReplayingShare<T> instance(){  return (ReplayingShare<T>)INSTANCE;}  }
class C{  public final void testIPv6AddressWithContextParameter(){  assertNotNull(Validators.iPv6Address(getContext()));}  }
class C{  public boolean adjustValue(double key,int amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public void run(){  log.info("");  if (m_rs == null)   return;  try {    while (m_rs.next()) {      if (Thread.interrupted()) {        log.fine("Interrupted");        close();        return;      }      int recordId=0;      Object[] rowData=null;      if (m_virtual)       recordId=m_rs.getInt(getKeyColumnName()); else       rowData=readData(m_rs);      MSort sort=m_virtual ? new MSort(recordId,null) : new MSort(m_buffer.size(),null);      if (!m_virtual) {        m_buffer.add(rowData);      }      m_sort.add(sort);      if (m_sort.size() % 1000 == 0) {        try {          Thread.yield();          Thread.sleep(10);        } catch (        InterruptedException ie) {          log.fine("Interrupted while sleeping");          close();          return;        }        DataStatusEvent evt=createDSE();        evt.setLoading(m_sort.size());        fireDataStatusChanged(evt);      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"run",e);  } finally {    close();  }  fireDataStatusIEvent("","");}  }
class C{  @Override public void beginCamera(){  if (manipulatingCamera) {    throw new RuntimeException("beginCamera() cannot be called again " + "before endCamera()");  } else {    manipulatingCamera=true;  }}  }
class C{  public void removeSensorSelectionListener(SensorSelectionListener listener){  listenerList.remove(SensorSelectionListener.class,listener);}  }
class C{  public void testCountGroupBy(){  cleanTable();  populateTable();  From from=new Select().from(MockModel.class).groupBy("intField").having("intField = 1");  final List<MockModel> list=from.execute();  final boolean exists=from.exists();  assertTrue(exists);  assertTrue(list.size() > 0);}  }
class C{  public void testEquals() throws StunException {  Object target=null;  boolean expectedReturn=false;  boolean actualReturn=bindingRequest.equals(target);  assertEquals("Equals failed against a null target",expectedReturn,actualReturn);  actualReturn=bindingResponse.equals(target);  assertEquals("Equals failed against a null target",expectedReturn,actualReturn);  actualReturn=bindingRequest.equals(bindingResponse);  assertEquals("Equals failed against a different target",expectedReturn,actualReturn);  actualReturn=bindingResponse.equals(bindingRequest);  assertEquals("Equals failed against a different target",expectedReturn,actualReturn);  expectedReturn=true;  Request binReqTarget=new Request();  binReqTarget.setMessageType(Message.BINDING_REQUEST);  binReqTarget.putAttribute(changeRequest);  actualReturn=bindingRequest.equals(binReqTarget);  assertEquals("Equals failed against an equal target",expectedReturn,actualReturn);  Response binResTarget=new Response();  binResTarget.setMessageType(Message.BINDING_SUCCESS_RESPONSE);  binResTarget.putAttribute(mappedAddress);  binResTarget.putAttribute(sourceAddress);  binResTarget.putAttribute(changedAddress);  actualReturn=bindingResponse.equals(binResTarget);  assertEquals("Equals failed against a different target",expectedReturn,actualReturn);}  }
class C{  public void testAddLast(){  LinkedBlockingDeque q=populatedDeque(3);  q.pollLast();  q.addLast(four);  assertSame(four,q.peekLast());}  }
class C{  public boolean isReservedTag(final String tagTitle){  return ArrayUtils.contains(Symphonys.RESERVED_TAGS,tagTitle);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return RECEIVERS;case 2:  return SENDER;case 3:return SUBJECT;case 4:return MESSAGE_TYPE;case 5:return EXTEND_ATTRS;case 6:return ATTACHMENTS;case 7:return PARAMS;default :return null;}}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public final void putInHospital(Patient p){  int num=p.hospitalsVisited;  p.hospitalsVisited++;  if (freePersonnel > 0) {    freePersonnel--;    assess.add(p);    p.timeLeft=3;    p.time+=3;  } else {    waiting.add(p);  }}  }
class C{  public void flush(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();      } catch (      Throwable e) {        LogUtils.e(e.getMessage(),e);      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void addIdPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_PackageMember_id_feature"),getString("_UI_PropertyDescriptor_description","_UI_PackageMember_id_feature","_UI_PackageMember_type"),TypesPackage.Literals.PACKAGE_MEMBER__ID,false,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void testDurableSubNetwork() throws Exception {  LOG.info("testDurableSubNetwork started.");  ActiveMQConnectionFactory fact=new ActiveMQConnectionFactory(connector.getConnectUri().toString());  Connection conn=fact.createConnection();  conn.setClientID("clientID1");  Session session=conn.createSession(false,1);  Destination dest=session.createTopic(topicName);  TopicSubscriber sub=session.createDurableSubscriber((Topic)dest,subName);  LOG.info("Durable subscription of name " + subName + "created.");  Thread.sleep(100);  assertTrue(foundSubInLocalBroker(subName));  assertTrue(foundSubInRemoteBrokerByTopicName(topicName));  sub.close();  session.unsubscribe(subName);  LOG.info("Unsubscribed from durable subscription.");  Thread.sleep(100);  assertFalse(foundSubInLocalBroker(subName));  assertFalse("Durable subscription not unregistered on remote broker",foundSubInRemoteBrokerByTopicName(topicName));}  }
class C{  private static void sort1(char[] x,int off,int len){  if (len < 7) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);    return;  }  int m=off + (len >> 1);  if (len > 7) {    int l=off;    int n=off + len - 1;    if (len > 40) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  char v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    while (b <= c && x[b] <= v) {      if (x[b] == v)       swap(x,a++,b);      b++;    }    while (c >= b && x[c] >= v) {      if (x[c] == v)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   sort1(x,off,s);  if ((s=d - c) > 1)   sort1(x,n - s,s);}  }
class C{  public boolean resourceNotFound(){  return statusCode == NOT_FOUND;}  }
class C{  public int calculateBattleValue(boolean ignoreC3,boolean ignorePilot,boolean singleTrooper){  if (useManualBV) {    return manualBV;  }  double squadBV=0;  for (int i=1; i < locations(); i++) {    if (this.getInternal(i) <= 0) {      continue;    }    double dBV=0;    double armorBV=2.5;    if (isFireResistant() || isReflective() || isReactive()) {      armorBV=3.5;    }    dBV+=(getArmor(i) * armorBV) + 1;    if (hasImprovedSensors()) {      dBV+=1;    }    if (hasActiveProbe()) {      dBV+=1;    }    for (    Mounted mounted : getMisc()) {      if (mounted.getType().hasFlag(MiscType.F_ECM)) {        if (mounted.getType().hasFlag(MiscType.F_ANGEL_ECM)) {          dBV+=2;        } else {          dBV+=1;        }        break;      }    }    for (    Mounted weapon : getWeaponList()) {      if (weapon.getType().hasFlag(WeaponType.F_AMS)) {        if (weapon.getLocation() == LOC_SQUAD) {          dBV+=weapon.getType().getBV(this);        } else {          dBV+=weapon.getType().getBV(this) / getTotalOInternal();        }      }    }    int runMP=getWalkMP(false,false,true,true,false);    int umuMP=getActiveUMUCount();    int tmmRan=Compute.getTargetMovementModifier(Math.max(runMP,umuMP),false,false,game).getValue();    int rawJump=getJumpMP(false,true,true);    int tmmJumped=(rawJump > 0) ? Compute.getTargetMovementModifier(rawJump,true,false,game).getValue() : 0;    double targetMovementModifier=Math.max(tmmRan,tmmJumped);    double tmmFactor=1 + (targetMovementModifier / 10) + 0.1;    if (hasCamoSystem) {      tmmFactor+=0.2;    }    if (isStealthy) {      tmmFactor+=0.2;    }    if ((stealthName != null) && stealthName.equals(BattleArmor.IMPROVED_STEALTH_ARMOR)) {      tmmFactor+=0.1;    }    if (isMimetic) {      tmmFactor+=0.3;    }    dBV*=tmmFactor;    double oBV=0;    for (    Mounted weapon : getWeaponList()) {      if (weapon.getType().hasFlag(WeaponType.F_INFANTRY) || weapon.getType().hasFlag(WeaponType.F_AMS)) {        continue;      }      if (weapon.getLocation() == LOC_SQUAD) {        if (weapon.isSquadSupportWeapon()) {          oBV+=weapon.getType().getBV(this) / getTotalOInternal();        } else {          oBV+=weapon.getType().getBV(this);        }      } else {        oBV+=weapon.getType().getBV(this) / getTotalOInternal();      }    }    for (    Mounted misc : getMisc()) {      if (misc.getType().hasFlag(MiscType.F_MINE)) {        if (misc.getLocation() == LOC_SQUAD) {          oBV+=misc.getType().getBV(this);        } else {          oBV+=misc.getType().getBV(this) / getTotalOInternal();        }      }      if (misc.getType().hasFlag(MiscType.F_MAGNETIC_CLAMP)) {        if (misc.getLocation() == LOC_SQUAD) {          oBV+=misc.getType().getBV(this);        } else {          oBV+=misc.getType().getBV(this) / getTotalOInternal();        }      }    }    for (    Mounted ammo : getAmmo()) {      int loc=ammo.getLocation();      if (loc == LOC_NONE) {        continue;      }      if ((loc == LOC_SQUAD) || (loc == i)) {        double ammoBV=((AmmoType)ammo.getType()).getBABV();        oBV+=ammoBV;      }    }    if (canMakeAntiMekAttacks()) {      for (      Mounted weapon : getWeaponList()) {        if (weapon.getType().hasFlag(WeaponType.F_INFANTRY) || weapon.getType().hasFlag(WeaponType.F_AMS)) {          continue;        }        if (weapon.getLocation() == LOC_SQUAD) {          if (!weapon.getType().hasFlag(WeaponType.F_MISSILE) && !weapon.isBodyMounted()) {            oBV+=weapon.getType().getBV(this);          }        } else {          oBV+=weapon.getType().getBV(this) / getTotalOInternal();        }      }      for (      Mounted misc : getMisc()) {        if ((misc.getLocation() == LOC_SQUAD) || (misc.getLocation() == i)) {          if (misc.getType().hasFlag(MiscType.F_MAGNET_CLAW) || misc.getType().hasFlag(MiscType.F_VIBROCLAW)) {            oBV+=misc.getType().getBV(this);          }        }      }    }    int movement=Math.max(getWalkMP(false,false,true,true,false),Math.max(getJumpMP(false,true,true),getActiveUMUCount()));    double speedFactor=Math.pow(1 + ((double)(movement - 5) / 10),1.2);    speedFactor=Math.round(speedFactor * 100) / 100.0;    oBV*=speedFactor;    double soldierBV;    if (useGeometricMeanBV()) {      soldierBV=2 * Math.sqrt(oBV * dBV);      if (soldierBV == 0) {        soldierBV=oBV + dBV;      }    } else {      soldierBV=oBV + dBV;    }    squadBV+=soldierBV;  }  squadBV/=getShootingStrength();  if (singleTrooper) {    return (int)Math.round(squadBV);  }switch (getShootingStrength()) {case 1:    break;case 2:  squadBV*=2.2;break;case 3:squadBV*=3.6;break;case 4:squadBV*=5.2;break;case 5:squadBV*=7;break;case 6:squadBV*=9;break;}if (!ignoreC3) {squadBV+=getExtraC3BV((int)Math.round(squadBV));}double pilotFactor=1;if (!ignorePilot) {pilotFactor=getCrew().getBVSkillMultiplier(isAntiMekTrained(),game);}int retVal=(int)Math.round(squadBV * pilotFactor);return retVal;}  }
class C{  public static String unescapeChar(String c){  if (c.equals("\\\\"))   return c;  Tuple2<String,List<String>> letterAndNormalDiacritics=normalizeCharSeparateDiacritics(c);  String baseLetter=letterAndNormalDiacritics._1;  List<String> diacritics=letterAndNormalDiacritics._2;  if (diacritics.isEmpty())   return baseLetter;  StringBuilder b=new StringBuilder();  String firstDiacritic=diacritics.get(0);  String precomposed=COMBINED_TO_PRECOMPOSED_MAP.get(baseLetter + firstDiacritic);  if (precomposed != null)   b.append(precomposed); else   b.append(baseLetter).append(firstDiacritic);  for (int i=1; i < diacritics.size(); ++i) {    b.append(diacritics.get(i));  }  return b.toString();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private HashMultimap<URI,URI> createTestLocationMapping(List<URI> testLocations){  HashMultimap<URI,URI> moduleUris2testUris=HashMultimap.create();  for (  final URI testLocation : testLocations) {    moduleUris2testUris.put(testLocation.trimFragment(),testLocation);  }  return moduleUris2testUris;}  }
class C{  public static boolean elementIsInSignatureSpace(Element element,String localName){  if (element == null) {    return false;  }  return Constants.SignatureSpecNS.equals(element.getNamespaceURI()) && element.getLocalName().equals(localName);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textindexsizeerrnegativeoffset.class,args);}  }
class C{  public static void startActionFoo(Context context,String param1,String param2){  Intent intent=new Intent(context,MyIntentService.class);  intent.setAction(ACTION_FOO);  intent.putExtra(EXTRA_PARAM1,param1);  intent.putExtra(EXTRA_PARAM2,param2);  context.startService(intent);}  }
class C{  public void waitForState(String collection,long wait,TimeUnit unit,CollectionStatePredicate predicate) throws InterruptedException, TimeoutException {  connect();  zkStateReader.waitForState(collection,wait,unit,predicate);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public String toString(){  return name;}  }
class C{  public RequestHandle delete(String url,ResponseHandlerInterface responseHandler){  return delete(null,url,responseHandler);}  }
class C{  protected boolean reachedStoppingCriterion(WeightVector w,int epoch){  if (epochUpdateCount == 0) {    log.info("No errors made. Stopping outer loop because learning is complete!");    return false;  }  return epoch < params.MAX_NUM_ITER;}  }
class C{  static public boolean isCNFNegationOrTerminal(final FunctionNode functionNode){  final URI functionURI=functionNode.getFunctionURI();  if (functionURI.equals(FunctionRegistry.AND) || functionURI.equals(FunctionRegistry.OR)) {    return false;  } else   if (functionURI.equals(FunctionRegistry.NOT)) {    final BOp bop=functionNode.get(0);    if (!(bop instanceof FunctionNode)) {      return true;    } else {      return isCNFNegationOrTerminal((FunctionNode)bop);    }  } else {    return true;  }}  }
class C{  public boolean hasYomi(){  return getYomi() != null;}  }
class C{  public void tagStartSound(int soundId,SoundInfo info) throws IOException {  startTag(TAG_STARTSOUND,soundId,false);  info.write(out);  completeTag();}  }
class C{  public boolean failed(){  return (m_Exception != null);}  }
class C{  public InfluxDbHttpSender(final String protocol,final String hostname,final int port,final String database,final String authString,final TimeUnit timePrecision,final int connectTimeout,final int readTimeout,final String measurementPrefix) throws Exception {  super(database,timePrecision,measurementPrefix);  String endpoint=new URL(protocol,hostname,port,"/write").toString();  String queryDb=String.format("db=%s",URLEncoder.encode(database,"UTF-8"));  String queryPrecision=String.format("precision=%s",TimeUtils.toTimePrecision(timePrecision));  this.url=new URL(endpoint + "?" + queryDb+ "&"+ queryPrecision);  if (authString != null && !authString.isEmpty()) {    this.authStringEncoded=Base64.encodeBase64String(authString.getBytes(UTF_8));  } else {    this.authStringEncoded="";  }  this.connectTimeout=connectTimeout;  this.readTimeout=readTimeout;}  }
class C{  private void updateNFSACLsInDB(NfsACLUpdateParams param,FileShare fs,FileDeviceInputOutput args){  try {    List<NfsACE> aceAdd=param.getAcesToAdd();    if (aceAdd != null && !aceAdd.isEmpty()) {      for (      NfsACE ace : aceAdd) {        NFSShareACL dbNfsAcl=new NFSShareACL();        dbNfsAcl.setId(URIUtil.createId(NFSShareACL.class));        copyToPersistNfsACL(ace,dbNfsAcl,fs,args);        _log.info("Storing new acl in DB: {}",dbNfsAcl);        _dbClient.createObject(dbNfsAcl);      }    }    List<NfsACE> aceModify=param.getAcesToModify();    if (aceModify != null && !aceModify.isEmpty()) {      for (      NfsACE ace : aceModify) {        NFSShareACL dbNfsAcl=new NFSShareACL();        copyToPersistNfsACL(ace,dbNfsAcl,fs,args);        NFSShareACL dbNfsAclTemp=getExistingNfsAclFromDB(dbNfsAcl,args.getFileOperation());        if (dbNfsAclTemp != null) {          dbNfsAcl.setId(dbNfsAclTemp.getId());          _log.info("Modifying acl in DB: {}",dbNfsAcl);          _dbClient.updateObject(dbNfsAcl);        }      }    }    List<NfsACE> aceDelete=param.getAcesToDelete();    if (aceDelete != null && !aceDelete.isEmpty()) {      for (      NfsACE ace : aceDelete) {        NFSShareACL dbNfsAcl=new NFSShareACL();        copyToPersistNfsACL(ace,dbNfsAcl,fs,args);        NFSShareACL dbNfsAclTemp=getExistingNfsAclFromDB(dbNfsAcl,args.getFileOperation());        if (dbNfsAclTemp != null) {          dbNfsAcl.setId(dbNfsAclTemp.getId());          dbNfsAcl.setInactive(true);          _log.info("Marking acl inactive in DB: {}",dbNfsAcl);          _dbClient.updateObject(dbNfsAcl);        }      }    }  } catch (  Exception e) {    _log.error("Error While executing CRUD Operations {}",e);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static boolean globalIntegrity(Object o){  if ((o != null) && (o instanceof Integrity)) {    ((Integrity)o).globalIntegrity();  }  return true;}  }
class C{  public static void writeJsonResponse(Object gsonValue,HttpServletResponse response) throws IOException {  response.setContentType(JSON_CONTENT_TYPE);  response.getWriter().write(gson.toJson(gsonValue));}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.274 -0500",hash_original_method="380079DA7F92D6CF2CEA9086AA5F92D7",hash_generated_method="62F810F2BCF68D3D445BB90D996DBF7B") public TimeStampHeader createTimeStampHeader(float timeStamp) throws InvalidArgumentException {  if (timeStamp < 0)   throw new IllegalArgumentException("illegal timeStamp");  TimeStamp t=new TimeStamp();  t.setTimeStamp(timeStamp);  return t;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public int compareTo(Object other){  if (other == this) {    return 0;  }  if (other.getClass() != this.getClass()) {    if (other.getClass().getName().equals(this.getClass().getName())) {      return value.compareTo(getValueInOtherClassLoader(other));    }    throw new ClassCastException("Different enum class '" + ClassUtils.getShortClassName(other.getClass()) + "'");  }  return value.compareTo(((StringValuedEnum)other).value);}  }
class C{  private Map<VirtualArray,List<StoragePool>> findDestPoolsForSourcePool(final List<VirtualArray> targetVarrays,final Set<SRDFPoolMapping> srcDestPoolsList,final StoragePool recommendedPool,VirtualPool vpool){  Map<VirtualArray,List<StoragePool>> targetVarrayPoolMap=new HashMap<VirtualArray,List<StoragePool>>();  for (  VirtualArray targetVarray : targetVarrays) {    Set<StoragePool> uniquePools=new HashSet<StoragePool>();    _log.info("Phase 1: Target Pool mapping for varray: " + targetVarray.getLabel());    for (    SRDFPoolMapping srdfPoolMapping : srcDestPoolsList) {      if (srdfPoolMapping.destVarray.getId().equals(targetVarray.getId()) && srdfPoolMapping.sourceStoragePool.equals(recommendedPool)) {        _log.info("Phase 1: Target Pool mapping adding: " + srdfPoolMapping.destStoragePool.getLabel());        uniquePools.add(srdfPoolMapping.destStoragePool);      }    }    List<StoragePool> uniquePoolList=new ArrayList<StoragePool>();    uniquePoolList.addAll(uniquePools);    uniquePoolList=filterPoolsForSupportedActiveModeProvider(uniquePoolList,vpool);    targetVarrayPoolMap.put(targetVarray,uniquePoolList);  }  return targetVarrayPoolMap;}  }
class C{  public final void beforeCreate2(EntryEvent event,Object arg) throws CacheWriterException {  String s="Shouldn't be invoked";  throw new UnsupportedOperationException(s);}  }
class C{  private boolean isStatusCodeOK(Response response,String uri){  if (response.getStatus() == Status.OK.getStatusCode() || response.getStatus() == Status.CREATED.getStatusCode()) {    return true;  } else   if (response.getStatus() == Status.UNAUTHORIZED.getStatusCode()) {    LOG.error("UNAUTHORIZED: Your credentials are wrong. Please check your username/password or the secret key");  } else   if (response.getStatus() == Status.CONFLICT.getStatusCode() || response.getStatus() == Status.NOT_FOUND.getStatusCode() || response.getStatus() == Status.FORBIDDEN.getStatusCode() || response.getStatus() == Status.BAD_REQUEST.getStatusCode()) {    ErrorResponse errorResponse=response.readEntity(ErrorResponse.class);    LOG.error("{} - {} on ressource {}",errorResponse.getException(),errorResponse.getMessage(),errorResponse.getRessource());  } else {    LOG.error("Unsupported status code: " + response);  }  LOG.error(response.toString());  return false;}  }
class C{  public static String showInputDialog(Component parentComponent,Object message) throws HeadlessException {  return showInputDialog(parentComponent,message,UIManager.getString("OptionPane.inputDialogTitle",parentComponent),QUESTION_MESSAGE);}  }
class C{  public void stop(){  stop(0);  stop(1);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean addVelocimacro(String name,Node macro,String argArray[],String sourceTemplate){  return RuntimeSingleton.addVelocimacro(name,macro,argArray,sourceTemplate);}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(next);  int length=bitmap.length();  for (short i=0; i < length; i++)   if (bitmap.get(i)) {    sb.append(" ");    sb.append(Type.string(i));  }  return sb.toString();}  }
class C{  public OkHttpStack(OkHttpClient okHttpClient){  this.okHttpClient=okHttpClient;}  }
class C{  public void process(JCas jcas){  evaluateCalculationFunctions(jcas);}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public static Scope container(Declaration decl){  return decl.getContainer();}  }
class C{  public ExampleFileFilter(String extension){  this(extension,null);}  }
class C{  @Override public String toString(){  return NewCookieHeaderParser.toString(this);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.STATEMENT__EXPR:    return basicSetExpr(null,msgs);case GamlPackage.STATEMENT__FACETS:  return ((InternalEList<?>)getFacets()).basicRemove(otherEnd,msgs);case GamlPackage.STATEMENT__BLOCK:return basicSetBlock(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public SpanContainingQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.569 -0500",hash_original_method="C990BF11F3A1B0CB0383B4A73773ED5B",hash_generated_method="1DC6F74BDCD474B5CA7CC5413E32C922") public void checkHeaders() throws ParseException {  if (getCSeq() == null) {    throw new ParseException(CSeq.NAME + " Is missing ",0);  }  if (getTo() == null) {    throw new ParseException(To.NAME + " Is missing ",0);  }  if (getFrom() == null) {    throw new ParseException(From.NAME + " Is missing ",0);  }  if (getViaHeaders() == null) {    throw new ParseException(Via.NAME + " Is missing ",0);  }  if (getCallId() == null) {    throw new ParseException(CallID.NAME + " Is missing ",0);  }  if (getStatusCode() > 699) {    throw new ParseException("Unknown error code!" + getStatusCode(),0);  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){}  }
class C{  private void leave(){  try {    CU.unwindEvicts(cctx);  }  finally {    cctx.kernalContext().gateway().readUnlock();  }}  }
class C{  private void run(){  try {    Thread current=Thread.currentThread();    byte[] buf=new byte[1024];    for (int len=in.read(buf); len != -1; len=in.read(buf)) {      buffer.write(buf,0,len);      if (current != thread) {        break;      }    }    buffer.flush();    buffer.close();  } catch (  IOException e) {    log.error(e.getMessage(),e);  }}  }
class C{  public MockClock incrementByMicroseconds(long incrementInMicros){  if (incrementInMicros < 1)   throw new IllegalArgumentException("The clock increment must be positive");  ticker.accumulateAndGet(incrementInMicros,null);  return this;}  }
class C{  public void populate(EvolutionState state,int thread){  if (loadInds) {    InputStream stream=state.parameters.getResource(file,null);    if (stream == null)     state.output.fatal("Could not load population from file",file);    try {      readPopulation(state,new LineNumberReader(new InputStreamReader(stream)));    } catch (    IOException e) {      state.output.fatal("An IOException occurred when trying to read from the file " + state.parameters.getString(file,null) + ".  The IOException was: \n"+ e,file,null);    }  } else {    for (int x=0; x < subpops.length; x++)     subpops[x].populate(state,thread);  }}  }
class C{  public void startDocument(){  LOG.info("Begin parse");}  }
class C{  public static OPTICSPlot plotForClusterOrder(ClusterOrder co,VisualizerContext context){  final StylingPolicy policy=context.getStylingPolicy();  OPTICSPlot opticsplot=new OPTICSPlot(co,policy);  return opticsplot;}  }
class C{  public SpecialistSpatialIndex(String shpFilename) throws IOException {  super(shpFilename);}  }
class C{  public double wide() throws OperatorFailedException {  NodeRef i=null, iP=null, j=null, jP=null;  int tries=0;  while (tries < MAX_TRIES) {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    while (tree.getRoot() == i) {      i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    }    j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    while (j == i || j == tree.getRoot()) {      j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    }    iP=tree.getParent(i);    jP=tree.getParent(j);    if ((iP != jP) && (i != jP) && (j != iP)&& (tree.getNodeHeight(j) < tree.getNodeHeight(iP))&& (tree.getNodeHeight(i) < tree.getNodeHeight(jP))) {      break;    }    tries+=1;  }  if (tries < MAX_TRIES) {    eupdateARG(i,j,iP,jP);  } else   throw new OperatorFailedException("Couldn't find valid wide move on this tree!");  return 0.0;}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public static void checkSameHost(Host host,FileSystem fs){  Host fsHost=Host.fromUri(fs.getPath("").toUri());  checkArgument(fsHost.equals(host),"file system host (%s) must equal %s",fsHost,host);}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    return in.read();  }}  }
class C{  protected void storeState(){  if (storePartials) {    likelihoodCore.storeState();  }  super.storeState();}  }
class C{  public void dump(String prefix,Appendable out) throws IOException {  out.append(prefix).append(this.toString());  for (  Node childNode : children) {    if (childNode != null) {      out.append(LINE_SEPARATOR);      ((SimpleNode)childNode).dump(prefix + " ",out);    }  }}  }
class C{  public void cut(){  copy();  deleteSelectedObjects();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void resumeScroll(){  if (mStopped) {    mHandler.removeCallbacks(mScrollRunnable);    mHandler.postDelayed(mScrollRunnable,mScrollPeriod);  }}  }
class C{  private static String unsignedToString(final int value){  if (value >= 0) {    return Integer.toString(value);  } else {    return Long.toString(((long)value) & 0x00000000FFFFFFFFL);  }}  }
class C{  public Map<Instruction,Integer> numberInstructionsViaMap(){  HashMap<Instruction,Integer> instructionNumbers=new HashMap<Instruction,Integer>();  int num=0;  for (Instruction instr=firstInstructionInCodeOrder(); instr != null; instr=instr.nextInstructionInCodeOrder(), num++) {    instructionNumbers.put(instr,Integer.valueOf(num));  }  return instructionNumbers;}  }
class C{  public PriorityQueue(Collection<? extends E> c){  if (c instanceof PriorityQueue) {    getFromPriorityQueue((PriorityQueue<? extends E>)c);  } else   if (c instanceof SortedSet) {    getFromSortedSet((SortedSet<? extends E>)c);  } else {    initSize(c);    addAll(c);  }}  }
class C{  public static ComponentUI createUI(JComponent ta){  return new SeaGlassTextAreaUI();}  }
class C{  public static Drawable tintList(Context context,Drawable drawable,@ColorRes int tintListRes){  drawable=DrawableCompat.wrap(drawable);  DrawableCompat.setTintList(drawable,getColorStateList(context,tintListRes));  return drawable;}  }
class C{  public static int hashCode(int pre,boolean b){  return 37 * pre + (b ? 0 : 1);}  }
class C{  @Override public void connectionOpen(){  lock.lock();  try {    connectionOpen=true;    StoredPaymentChannelClientStates channels=(StoredPaymentChannelClientStates)wallet.getExtensions().get(StoredPaymentChannelClientStates.EXTENSION_ID);    if (channels != null)     storedChannel=channels.getUsableChannelForServerID(serverId);    step=InitStep.WAITING_FOR_VERSION_NEGOTIATION;    Protos.ClientVersion.Builder versionNegotiationBuilder=Protos.ClientVersion.newBuilder().setMajor(versionSelector.getRequestedMajorVersion()).setMinor(versionSelector.getRequestedMinorVersion()).setTimeWindowSecs(timeWindow);    if (storedChannel != null) {      versionNegotiationBuilder.setPreviousChannelContractHash(ByteString.copyFrom(storedChannel.contract.getHash().getBytes()));      log.info("Begun version handshake, attempting to reopen channel with contract hash {}",storedChannel.contract.getHash());    } else     log.info("Begun version handshake creating new channel");    conn.sendToServer(Protos.TwoWayChannelMessage.newBuilder().setType(Protos.TwoWayChannelMessage.MessageType.CLIENT_VERSION).setClientVersion(versionNegotiationBuilder).build());  }  finally {    lock.unlock();  }}  }
class C{  public XObject execute(XPathContext xctxt,org.w3c.dom.Node contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getDTMHandleFromNode(contextNode),namespaceContext);}  }
class C{  public void approveSelection(){  returnValue=APPROVE_OPTION;  if (dialog != null) {    dialog.setVisible(false);  }  fireActionPerformed(APPROVE_SELECTION);}  }
class C{  @Override public int hashCode(){  return value.hashCode();}  }
class C{  public static void dump(byte[] data,Writer out,long offset,int start,int length) throws IOException {  if (start < 0 || start > data.length) {    throw new IllegalArgumentException("Illegal index: " + start + " into array of length "+ data.length);  }  if (length < 0 || start + length > data.length) {    throw new IllegalArgumentException("Illegal index: " + length + " into array of length "+ data.length);  }  if (out == null) {    throw new NullPointerException("null output stream");  }  long display_offset=offset + start;  StringBuilder buffer=new StringBuilder(74);  for (int j=start; j < start + length; j+=16) {    int chars_read=start + length - j;    if (chars_read > 16) {      chars_read=16;    }    dump(buffer,display_offset).append(' ');    for (int k=0; k < 16; k++) {      if (k < chars_read) {        dump(buffer,data[k + j]);      } else {        buffer.append("  ");      }      buffer.append(' ');    }    for (int k=0; k < chars_read; k++) {      if (data[k + j] >= ' ' && data[k + j] < 127) {        buffer.append((char)data[k + j]);      } else {        buffer.append('.');      }    }    buffer.append(EOL);    out.write(buffer.toString());    out.flush();    buffer.setLength(0);    display_offset+=chars_read;  }}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public void zoom(int wheel){  double x=currentValue;  if ((x < minValue) || (x > maxValue)) {    x=(maxValue + minValue) / 2;  }  double wid=Math.abs(maxValue - minValue);  double xE=(maxValue - x) / wid;  double xW=(x - minValue) / wid;  double w=minValue + wheel * xW;  double e=maxValue - wheel * xE;  if (w >= e) {    return;  }  minValue=Math.max(defaultMin,w);  maxValue=Math.min(defaultMax,e);  scaleCanvas.repaint();}  }
class C{  public static void load(final boolean setFirst,final int position,final byte[] arr,final int numDimensions){  if (setFirst)   arr[(int)(position / Byte.SIZE)]|=1 << 7 - (position % 8); else   arr[(int)(position / Byte.SIZE)]&=~(1 << 7 - (position % 8));  for (int i=position + numDimensions; i < arr.length * Byte.SIZE; i+=numDimensions) {    final int posInByte=i % Byte.SIZE;    int posInByteInv=7 - posInByte;    int mask=1 << posInByteInv;    for (posInByteInv-=numDimensions; posInByteInv >= 0; posInByteInv-=numDimensions) {      mask|=1 << posInByteInv;      i+=numDimensions;    }    if (setFirst)     arr[(int)(i / Byte.SIZE)]&=~mask; else     arr[(int)(i / Byte.SIZE)]|=mask;  }}  }
class C{  static <T1,T2,T3,R1,R2,R3,R>AnyMValue<R> each4(final MonadicValue<? extends T1> monadicValue,final Function<? super T1,? extends MonadicValue<R1>> value2,final BiFunction<? super T1,? super R1,? extends MonadicValue<R2>> value3,final TriFunction<? super T1,? super R1,? super R2,? extends MonadicValue<R3>> value4,final QuadFunction<? super T1,? super R1,? super R2,? super R3,? extends R> yieldingFunction){  return AnyM.ofValue(For.iterable(monadicValue).iterable(null).iterable(null).iterable(null).yield4(yieldingFunction).unwrap());}  }
class C{  public static boolean[] StringArray2BooleanArray(String[] values){  try {    int len=values.length;    boolean[] res=new boolean[len];    for (int ii=0; ii < len; ii++) {      res[ii]=TextUtils.parseBoolean(values[ii]);    }    return res;  } catch (  Exception e) {    return null;  }}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  public static <T>T[] parse(String[] options,char option,Class<T> cls) throws Exception {  return parse(options,"" + option,cls);}  }
class C{  public NavMouseMode2(){  this(true);}  }
class C{  static private String unicodeEncode(String word){  StringBuffer buf=new StringBuffer();  for (int i=0; i < word.length(); ++i) {    char ch=word.charAt(i);    if (ch >= '\u0080') {      String st=Integer.toHexString(0x10000 + (int)ch);      while (st.length() < 4)       st="0" + st;      buf.append("\\u").append(st.subSequence(1,5));    } else {      buf.append(ch);    }  }  return buf.toString();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public void testAddMetadataFileByOutputStream(ArchiveSource src) throws IOException {  src.clear();  try {    src.startWrite();    addMetadataFileByOutputStream(src,m_metafile1,m_metadata1);    addMetadataFileByOutputStream(src,m_metafile2,m_metadata2);  }  finally {    src.finishWrite();  }  checkMetaAdded(src);}  }
class C{  public static final double[] polynomialExpansion(double[] x,int degree){  double[] result=new double[getPolynomialExpansionSize(x.length,degree)];  int current=0;  result[current++]=1;  for (int currentDegree=1; currentDegree <= degree; currentDegree++) {    int[] counter=new int[currentDegree];    while (true) {      double currentResult=x[counter[0]];      for (int currentCounter=1; currentCounter < currentDegree; currentCounter++) {        currentResult*=x[counter[currentCounter]];      }      result[current]=currentResult;      current++;      if (!isLastPosition(counter,x.length)) {        counter[0]++;        if (counter[0] == x.length) {          counter[0]=moveCounterAhead(counter,1,x.length);        }      } else {        break;      }    }  }  return result;}  }
class C{  private static boolean eq(int v1,int v2){  return v1 == v2;}  }
class C{  public void acceptEditorChanges(){  if (isSingleRow()) {    Component c=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();    if (c != null && this.isAncestorOf(c)) {      Component t=c;      while (t != null && t != this) {        if (t instanceof VManagedEditor) {          ((VManagedEditor)t).commitChanges();          return;        }        t=t.getParent();      }    }  }}  }
class C{  void perform(SectionState state){  state.addChildMode(getModeUsage(),null);  state.addAttributeValidationModeUsage(getModeUsage());}  }
class C{  public MWMStrategy(Properties ctx,int WM_Strategy_ID){  this(ctx,WM_Strategy_ID,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.096 -0500",hash_original_method="302355CEB1EDA8CF763D5137DB0E93A1",hash_generated_method="3D66E37A69227B620BE1EC89EE565D3E") public DashPathEffect(float intervals[],float phase){  if (intervals.length < 2) {    throw new ArrayIndexOutOfBoundsException();  }  native_instance=nativeCreate(intervals,phase);}  }
class C{  public void forgetReadMessage(){  preferences.edit().putLong(KEY_MAX_READ_MESSAGE_ID,0).apply();}  }
class C{  static void goNeither(String target,String exceptionName) throws Exception {  goSuspendPolicy(target,false,exceptionName,true,true);  goSuspendPolicy(target,false,exceptionName,false,true);  goSuspendPolicy(target,false,exceptionName,true,false);  goSuspendPolicy(target,false,exceptionName,false,false);}  }
