class C{  public boolean isAllowedToModify(PlatformUser user){  return (user.equals(getPlatformUser()));}  }
class C{  public static void typeface(Activity activity){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  typeface(activity.findViewById(android.R.id.content),sDefaultTypefaceCollection);}  }
class C{  int posInSel(int index){  for (int i=0; i < selected.length; i++) {    if (index == selected[i]) {      return i;    }  }  return -1;}  }
class C{  public static void putString(final ByteBuffer buffer,final String string){  buffer.putInt(string.length());  for (int i=0; i < string.length(); i++) {    buffer.putChar(string.charAt(i));  }}  }
class C{  private List<Item> moveItemsFromSlotToList(RPSlot slot){  List<Item> items=new LinkedList<Item>();  for (  RPObject item : slot) {    if (item instanceof Item) {      items.add((Item)item);    }  }  slot.clear();  return items;}  }
class C{  private void addMapping(FHTreeStateNode node){  treePathMapping.put(node.getTreePath(),node);}  }
class C{  @Override public synchronized int lastIndexOf(Object object){  return lastIndexOf(object,elementCount - 1);}  }
class C{  protected String generateContainerFeaturesText(String containerId){  StringBuilder output=new StringBuilder();  output.append("h3.Container Features");  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  output.append("|| Feature name || Java API || Ant tasks || Maven 2 / Maven 3 plugin || Comment ||");  output.append(LINE_SEPARATOR);  output.append("| [Container Instantiation] | ");  output.append("(/) {{ContainerFactory.createContainer(\"" + containerId + "\"...)}} | ");  output.append("(/) {{<cargo containerId=\"" + containerId + "\".../>}} |");  output.append("(/) {{<containerId>" + containerId + "</containerId>}} | |");  output.append(LINE_SEPARATOR);  if (this.containerFactory.isContainerRegistered(containerId,ContainerType.INSTALLED) || this.containerFactory.isContainerRegistered(containerId,ContainerType.EMBEDDED)) {    output.append("| [Local Container] | (/) | (/) | (/) | |");    output.append(LINE_SEPARATOR);    if (containerId.equals("geronimo1x")) {      output.append("| &nbsp; [Container Classpath] | (x) | (x) | (x) " + "| Changing the the container classpath is not supported on " + "Apache Geronimo 1.x |");    } else     if (containerId.startsWith("jboss7") || containerId.startsWith("wildfly")) {      output.append("| &nbsp; [Container Classpath] | (/) | (/) | (/) " + "| Read more on [JBoss 7.x onwards and WildFly container classpath] |");    } else {      output.append("| &nbsp; [Container Classpath] | (/) | (/) | (/) | |");    }    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Container Start] | (/) | (/) | (/) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Container Stop] | (/) | (/) | (/) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Container Timeout] | (/) | (/) | (/) | |");    output.append(LINE_SEPARATOR);    if (this.containerFactory.isContainerRegistered(containerId,ContainerType.EMBEDDED)) {      output.append("| &nbsp; [Embedded Container] | ");      output.append("(/) {{" + computedFQCN(this.containerFactory.getContainerClass(containerId,ContainerType.EMBEDDED).getName()) + "}} | (/) | (/) | |");    } else {      output.append("| &nbsp; [Embedded Container] | (x) | (x) | (x) | |");    }    output.append(LINE_SEPARATOR);    if (this.containerFactory.isContainerRegistered(containerId,ContainerType.INSTALLED)) {      output.append("| &nbsp; [Installed Container] | ");      output.append("(/) {{" + computedFQCN(this.containerFactory.getContainerClass(containerId,ContainerType.INSTALLED).getName()) + "}} | (/) | (/) | |");      output.append(LINE_SEPARATOR);      output.append("| &nbsp;&nbsp; [Passing system properties] | (/) | (/) | (/) | |");      output.append(LINE_SEPARATOR);      output.append("| &nbsp;&nbsp; [Installer] | (/) | (/) | (/) | |");    } else {      output.append("| &nbsp; [Installed Container] | (x) | (x) | (x) | |");      output.append(LINE_SEPARATOR);      output.append("| &nbsp;&nbsp; [Passing system properties] | (x) | (x) | (x) | |");      output.append(LINE_SEPARATOR);      output.append("| &nbsp;&nbsp; [Installer] | (x) | (x) | (x) | |");    }    output.append(LINE_SEPARATOR);  } else {    output.append("| [Local Container] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Container Classpath] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Container Start] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Container Stop] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Container Timeout] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Embedded Container] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp; [Installed Container] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp;&nbsp; [Passing system properties] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);    output.append("| &nbsp;&nbsp; [Installer] | (x) | (x) | (x) | |");    output.append(LINE_SEPARATOR);  }  if (this.containerFactory.isContainerRegistered(containerId,ContainerType.REMOTE)) {    output.append("| [Remote Container] | ");    output.append("(/) {{" + computedFQCN(this.containerFactory.getContainerClass(containerId,ContainerType.REMOTE).getName()) + "}} | (/) | (/) | |");  } else {    output.append("| [Remote Container] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (containerId.equals("tomcat7x") || containerId.equals("tomcat8x")) {    output.append("{info:title=Running multiple Tomcat 7.x / Tomcat 8.x embedded ");    output.append("containers within the same JVM}");    output.append(LINE_SEPARATOR);    output.append("Tomcat 7.x has introduced a class called ");    output.append("{{TomcatURLStreamHandlerFactory}} where the singleton has a static ");    output.append("{{instance}} field and a final {{registered}} attribute which are ");    output.append("not always in sync and cause unexpected exceptions. Due to this, it ");    output.append("is not possible to execute Tomcat 7.x and Tomcat 8.x embedded in the ");    output.append("same JVM, in addition running one of these Tomcat embedded versions ");    output.append("one after the other within the same JVM but different classpaths ");    output.append("might also fail.");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);    output.append("If you want to be safe, prefer using the [Installed Container].");    output.append("{info}");    output.append(LINE_SEPARATOR);  }  return output.toString();}  }
class C{  private void initialize(String json) throws JSONException, IOException {  JSONObject jo=new JSONObject(json);  if (jo.has(SEPARATOR)) {    delimiterChar=((String)jo.getString(SEPARATOR)).charAt(0);  }  if (jo.has(QUOTE_CHAR)) {    quoteChar=((String)jo.getString(QUOTE_CHAR)).charAt(0);  }  if (jo.has(LINE_DELIMITER)) {    lineDelimiter=(String)jo.getString(LINE_DELIMITER);  }  JSONArray fieldArray=jo.getJSONArray(FIELDS);  for (int i=0; i < fieldArray.length(); i++) {    JSONObject obj=fieldArray.getJSONObject(i);    Field field=new Field(obj.getString(NAME),obj.getString(TYPE));    fields.add(field);    fieldNames.add(field.name);    if (obj.has(CONSTRAINTS)) {      JSONObject constraints=obj.getJSONObject(CONSTRAINTS);      field.constraints=new ObjectMapper().readValue(constraints.toString(),HashMap.class);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.069 -0500",hash_original_method="988500FDA3CAE61033EABAD95C8BF0F1",hash_generated_method="DD9C02800C5798E8159C5027D473F265") public void startProfiling(){  if (mThread.isProfiling()) {    File file=new File(mThread.getProfileFilePath());    file.getParentFile().mkdirs();    Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);  }}  }
class C{  @Override public int portRemote(){  if (_channel != null) {    try {      SocketAddress addr=_channel.getRemoteAddress();      return 0;    } catch (    Exception e) {      e.printStackTrace();      return 0;    }  } else   return 0;}  }
class C{  public double signedDistanceToLineSegment(LatLong A,LatLong B){  double Ax=(A.lng - lng) * Math.cos(0.5 * radians * (A.lat + lat));  double Ay=(A.lat - lat);  double Bx=(B.lng - lng) * Math.cos(0.5 * radians * (B.lat + lat));  double By=(B.lat - lat);  double Ix=((By - Ay) * (Ax * By - Ay * Bx)) / ((Ax - Bx) * (Ax - Bx) + (Ay - By) * (Ay - By));  return ((Bx - Ax) * Ay - Ax * (By - Ay)) / Math.sqrt((Bx - Ax) * (Bx - Ax) + (By - Ay) * (By - Ay)) * EarthRadius * radians;}  }
class C{  public static <E extends Exception>String consumeUntilDelimiterOrEOS(IBasicCharSource<E> reader,char delimiter,char escapeChar) throws E {  StringBuilder sb=new StringBuilder();  consumeUntilDelimiter_intoStringBuilder(reader,delimiter,escapeChar,sb);  return sb.toString();}  }
class C{  @RequestProcessing(value="/register",method=HTTPRequestMethod.GET) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void showRegister(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  final Map<String,Object> dataModel=renderer.getDataModel();  dataModel.put(Common.REFERRAL,"");  String referral=request.getParameter("r");  if (!Strings.isEmptyOrNull(referral)) {    dataModel.put(Common.REFERRAL,referral);  }  final String code=request.getParameter("code");  if (Strings.isEmptyOrNull(code)) {    renderer.setTemplateName("register.ftl");  } else {    final JSONObject verifycode=verifycodeQueryService.getVerifycode(code);    if (null == verifycode) {      dataModel.put(Keys.MSG,langPropsService.get("verifycodeExpiredLabel"));      renderer.setTemplateName("/error/custom.ftl");    } else {      renderer.setTemplateName("register2.ftl");      final String userId=verifycode.optString(Verifycode.USER_ID);      final JSONObject user=userQueryService.getUser(userId);      dataModel.put(User.USER,user);      referral=StringUtils.substringAfter(code,"r=");      if (!Strings.isEmptyOrNull(referral)) {        dataModel.put(Common.REFERRAL,referral);      }    }  }  filler.fillHeaderAndFooter(request,response,dataModel);  dataModel.put(Common.TEAMS,Symphonys.get(Common.TEAMS).split(","));  dataModel.put(Common.EMAIL_DOMAIN,Symphonys.get(Common.EMAIL_DOMAIN));}  }
class C{  @Override public void start(){  super.start();}  }
class C{  protected BusinessObjectDataDdl generateBusinessObjectDataDdlImpl(BusinessObjectDataDdlRequest request,boolean skipRequestValidation){  if (!skipRequestValidation) {    validateBusinessObjectDataDdlRequest(request);  }  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(new BusinessObjectFormatKey(request.getNamespace(),request.getBusinessObjectDefinitionName(),request.getBusinessObjectFormatUsage(),request.getBusinessObjectFormatFileType(),request.getBusinessObjectFormatVersion()));  Assert.notEmpty(businessObjectFormatEntity.getSchemaColumns(),String.format("Business object format with namespace \"%s\", business object definition name \"%s\", format usage \"%s\", format file type \"%s\"," + " and format version \"%s\" doesn't have schema information.",businessObjectFormatEntity.getBusinessObjectDefinition().getNamespace().getCode(),businessObjectFormatEntity.getBusinessObjectDefinition().getName(),businessObjectFormatEntity.getUsage(),businessObjectFormatEntity.getFileType().getCode(),businessObjectFormatEntity.getBusinessObjectFormatVersion()));  CustomDdlEntity customDdlEntity=null;  if (StringUtils.isNotBlank(request.getCustomDdlName())) {    CustomDdlKey customDdlKey=new CustomDdlKey(businessObjectFormatEntity.getBusinessObjectDefinition().getNamespace().getCode(),businessObjectFormatEntity.getBusinessObjectDefinition().getName(),businessObjectFormatEntity.getUsage(),businessObjectFormatEntity.getFileType().getCode(),businessObjectFormatEntity.getBusinessObjectFormatVersion(),request.getCustomDdlName());    customDdlEntity=customDdlDaoHelper.getCustomDdlEntity(customDdlKey);  }  List<String> storageNames=new ArrayList<>();  if (StringUtils.isNotBlank(request.getStorageName())) {    storageNames.add(request.getStorageName());  }  if (!CollectionUtils.isEmpty(request.getStorageNames())) {    storageNames.addAll(request.getStorageNames());  }  List<StorageEntity> storageEntities=new ArrayList<>();  for (  String storageName : storageNames) {    StorageEntity storageEntity=storageDaoHelper.getStorageEntity(storageName);    Assert.isTrue(storageEntity.getStoragePlatform().getName().equals(StoragePlatformEntity.S3),String.format("Cannot generate DDL for \"%s\" storage platform.",storageEntity.getStoragePlatform().getName()));    storageEntities.add(storageEntity);  }  Map<StorageEntity,String> s3BucketNames=new HashMap<>();  for (  StorageEntity storageEntity : storageEntities) {    String s3BucketName=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),storageEntity,true);    s3BucketNames.put(storageEntity,s3BucketName);  }  BusinessObjectDataDdl businessObjectDataDdl=createBusinessObjectDataDdl(request);  businessObjectDataDdl.setDdl(ddlGeneratorFactory.getDdlGenerator(request.getOutputFormat()).generateCreateTableDdl(request,businessObjectFormatEntity,customDdlEntity,storageNames,storageEntities,s3BucketNames));  return businessObjectDataDdl;}  }
class C{  public final boolean isItemEnabled(final int index){  AbstractItem item=items.get(index);  return item instanceof Item && ((Item)item).isEnabled();}  }
class C{  public FastCharStream(Reader r){  input=r;}  }
class C{  public Key(String name,String group){  if (name == null)   throw new IllegalArgumentException("Name cannot be null.");  this.name=name;  if (group != null)   this.group=group; else   this.group=DEFAULT_GROUP;}  }
class C{  @Override public void onEnteredRegion(Region region,List<Beacon> list){  Timber.i("Entered region %s. Starting ranging...",region.getIdentifier());  mBeaconManager.startRanging(region);}  }
class C{  @AfterClass public static void tearDownClass(){  PipelineCreator.cleanClasses();  File img=new File("img.png");  File testing=new File("testing.py");  File output=new File("output.txt");  File dir=PipelineGenerator.getCodeDir().getAbsoluteFile();  try {    File[] toDelete=dir.listFiles(null);    if (toDelete != null) {      for (      File file : toDelete) {        Files.deleteIfExists(file.toPath());      }    }    Files.deleteIfExists(img.toPath());    Files.deleteIfExists(testing.toPath());    Files.deleteIfExists(output.toPath());  } catch (  IOException e) {    logger.log(Level.WARNING,e.getMessage(),e);  }}  }
class C{  public void testInvalidLocation() throws Exception {  testInvalidGpx(INVALID_LOCATION_GPX);}  }
class C{  public SolarisNumericGroupPrincipal(long name,boolean primaryGroup){  this.name=(new Long(name)).toString();  this.primaryGroup=primaryGroup;}  }
class C{  @Override public boolean hasRuleForSpan(int startIndex,int endIndex,int pathLength){  return true;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  LessonEntityDao.dropTable(db,ifExists);  FlashcardEntityDao.dropTable(db,ifExists);}  }
class C{  public static String[] filterPermissions(Context context,String[] permissions,int filter){  final ArrayList<String> filtered=new ArrayList<>();  for (  String permission : permissions) {    if (getPermissionGrant(context,permission) == filter) {      filtered.add(permission);    }  }  return filtered.toArray(new String[filtered.size()]);}  }
class C{  public List<String> removeInvalidParentheses(String s){  List<String> res=new ArrayList<>();  if (s == null) {    return res;  }  Set<String> visited=new HashSet<>();  Queue<String> queue=new LinkedList<>();  queue.add(s);  visited.add(s);  boolean found=false;  while (!queue.isEmpty()) {    String t=queue.poll();    if (isValid(t)) {      res.add(t);      found=true;    }    if (found) {      continue;    }    for (int i=0; i < t.length(); i++) {      if (t.charAt(i) != '(' && t.charAt(i) != ')') {        continue;      }      t=t.substring(0,i) + t.substring(i + 1);      if (!visited.contains(t)) {        queue.add(t);        visited.add(t);      }    }  }  return res;}  }
class C{  public void run(){  while (true) {    clipSize+=clipBumpVal;    if (clipSize > getWidth() || clipSize < 0) {      clipBumpVal=-clipBumpVal;      clipSize+=clipBumpVal;    }    update(getGraphics());    try {      Thread.sleep(50);    } catch (    Exception e) {    }  }}  }
class C{  public void gatherArtifactInfo(ArtifactInfoContext aic){}  }
class C{  private static void initProxy(){  HttpConfigurable httpConfigurable=(HttpConfigurable)ApplicationManager.getApplication().getComponent("HttpConfigurable");  if (httpConfigurable == null) {    httpConfigurable=HttpConfigurable.getInstance();  }  if (httpConfigurable != null) {    if (httpConfigurable.USE_HTTP_PROXY) {      System.getProperties().put("proxySet",Boolean.valueOf(httpConfigurable.USE_HTTP_PROXY).toString());      System.getProperties().put("proxyPort",Integer.toString(httpConfigurable.PROXY_PORT));      System.getProperties().put("proxyHost",httpConfigurable.PROXY_HOST);      System.getProperties().put("http.proxySet",Boolean.valueOf(httpConfigurable.USE_HTTP_PROXY).toString());      System.getProperties().put("http.proxyPort",Integer.toString(httpConfigurable.PROXY_PORT));      System.getProperties().put("http.proxyHost",httpConfigurable.PROXY_HOST);    }  }}  }
class C{  public THashSet(int initialCapacity){  super(initialCapacity);}  }
class C{  public static void skipFully(InputStream in,long skip) throws IOException {  try {    while (skip > 0) {      long skipped=in.skip(skip);      if (skipped <= 0) {        throw new EOFException();      }      skip-=skipped;    }  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  public static int compare(byte[] buffer1,byte[] buffer2){  if (buffer1 == buffer2) {    return 0;  }  int i=0;  int j=0;  for (; i < buffer1.length && j < buffer2.length; i++, j++) {    int a=(buffer1[i] & 0xff);    int b=(buffer2[j] & 0xff);    if (a != b) {      return a - b;    }  }  return 0;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  SolrInputDocument doc(SolrInputField... fields){  SolrInputDocument d=new SolrInputDocument();  for (  SolrInputField f : fields) {    d.put(f.getName(),f);  }  return d;}  }
class C{  public void scrollToFinishActivity(){  if (!mEnable) {    mSwipeHelper.getActivity().finish();    return;  }  final int childWidth=mContentView.getWidth();  int left=0, top=0;  left=childWidth;  mTrackingEdge=ViewDragHelper.EDGE_LEFT;  mDragHelper.smoothSlideViewTo(mContentView,left,top);  invalidate();}  }
class C{  public DbAdapter open() throws SQLException {  mDbHelper=new DatabaseHelper(mCtx);  mDb=mDbHelper.getWritableDatabase();  return this;}  }
class C{  public static int swap32bitFromArray(byte[] value,int offset){  int v=0;  v|=((int)value[offset]) & 0x000000FF;  v|=(((int)value[offset + 1]) & 0x000000FF) << 8;  v|=(((int)value[offset + 2]) & 0x000000FF) << 16;  v|=(((int)value[offset + 3]) & 0x000000FF) << 24;  return v;}  }
class C{  Cursor runQuery(ContentResolver resolver,String[] projection,Uri baseUri){  List<String> selectionParts=new ArrayList<>();  String[] selectionArgs=getIdsAsStringArray(downloadIds);  filterByDownloadIds(selectionParts);  filterByBatchIds(selectionParts);  filterByNotificationExtras(selectionParts);  filterByExtraData(selectionParts);  filterByStatus(selectionParts);  if (onlyIncludeVisibleInDownloadsUi) {    selectionParts.add(DownloadContract.Downloads.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI + " != '0'");  }  selectionParts.add(DownloadContract.Downloads.COLUMN_DELETED + " != '1'");  String selection=joinStrings(" AND ",selectionParts);  return resolver.query(baseUri,projection,selection,selectionArgs,orderString);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public synchronized void remove(Object listener){  if (listener == null)   throw new IllegalArgumentException();  int oldSize=listeners.length;  for (int i=0; i < oldSize; ++i) {    Object listener2=listeners[i];    if (identity ? listener == listener2 : listener.equals(listener2)) {      if (oldSize == 1) {        listeners=EmptyArray;      } else {        Object[] newListeners=new Object[oldSize - 1];        System.arraycopy(listeners,0,newListeners,0,i);        System.arraycopy(listeners,i + 1,newListeners,i,oldSize - i - 1);        this.listeners=newListeners;      }      return;    }  }}  }
class C{  public int loadQuadTrees(String name,QuadTree parent,QuadTree[] qt,boolean wait){  name+=File.separator;  if (!source.tileExists(name + "1")) {    return (-1);  }  double pixelWidth=parent.pixelWidth / 2;  double pixelLength=parent.pixelLength / 2;  double xCenter=parent.pixelWidth * tileWidth / 4;  double yCenter=parent.pixelLength * tileLength / 4;  int qtCount=0;  qt[0]=getQuadTree(name + "1",parent,new Vector3(-xCenter,yCenter,0),pixelWidth,pixelLength,parent.level + 1,0,wait);  if (qt[0].getMesh() != null) {    qtCount++;  }  qt[1]=getQuadTree(name + "2",parent,new Vector3(xCenter,yCenter,0),pixelWidth,pixelLength,parent.level + 1,1,wait);  if (qt[1].getMesh() != null) {    qtCount++;  }  qt[2]=getQuadTree(name + "3",parent,new Vector3(-xCenter,-yCenter,0),pixelWidth,pixelLength,parent.level + 1,2,wait);  if (qt[2].getMesh() != null) {    qtCount++;  }  qt[3]=getQuadTree(name + "4",parent,new Vector3(xCenter,-yCenter,0),pixelWidth,pixelLength,parent.level + 1,3,wait);  if (qt[3].getMesh() != null) {    qtCount++;  }  if (qtCount == 4) {    for (int i=0; i < 4; ++i) {      qt[i].enabled=true;    }    qt[0].setNeighbors(null,null,qt[1],qt[2]);    qt[1].setNeighbors(qt[0],null,null,qt[3]);    qt[2].setNeighbors(null,qt[0],qt[3],null);    qt[3].setNeighbors(qt[2],qt[1],null,null);  }  return (qtCount);}  }
class C{  public DefaultVcfWriter(VcfHeader header,File outputFile,OutputStream stdout,boolean compress,boolean createIndexIfPossible) throws IOException {  if (header == null) {    throw new NullPointerException("header cannot be null");  }  mIndexer=new IndexingStreamCreator(outputFile,stdout,compress,new TabixIndexer.VcfIndexerFactory(),createIndexIfPossible);  mOut=mIndexer.createStreamsAndStartThreads();  mHeader=header;}  }
class C{  public static int write(AudioInputStream stream,AudioFileFormat.Type fileType,OutputStream out) throws IOException {  List providers=getAudioFileWriters();  int bytesWritten=0;  boolean flag=false;  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    try {      bytesWritten=writer.write(stream,fileType,out);      flag=true;      break;    } catch (    IllegalArgumentException e) {      continue;    }  }  if (!flag) {    throw new IllegalArgumentException("could not write audio file: file type not supported: " + fileType);  } else {    return bytesWritten;  }}  }
class C{  ChunkPopulationJob(int startElementIdx,int maxElements){  this.startElementIdx=startElementIdx;  this.maxElements=maxElements;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  @Override public void configureManagers(RfidSensorManager sensorManager,RfidReporterManager reporterManager){  InstanceManager.setSensorManager(new StandaloneSensorManager(getTrafficController(),getSystemPrefix()));  InstanceManager.setReporterManager(new StandaloneReporterManager(getTrafficController(),getSystemPrefix()));}  }
class C{  protected void addMapPanelChild(MapPanelChild mpc){  dockPanel.add((JComponent)mpc);  dockPanel.dockSomewhere((JComponent)mpc);}  }
class C{  public void addArrowHead(int directionType){  setArrowHead(new OMArrowHead(directionType,100));}  }
class C{  public void collectDbStats(ArrayList<DbStats> dbStatsList){synchronized (mLock) {    if (mAvailablePrimaryConnection != null) {      mAvailablePrimaryConnection.collectDbStats(dbStatsList);    }    for (    SQLiteConnection connection : mAvailableNonPrimaryConnections) {      connection.collectDbStats(dbStatsList);    }    for (    SQLiteConnection connection : mAcquiredConnections.keySet()) {      connection.collectDbStatsUnsafe(dbStatsList);    }  }}  }
class C{  public static void M_Forecast(X_M_Forecast f){  List<MPPMRP> list=getQuery(f,null,null).list();  for (  MPPMRP mrp : list) {    mrp.setM_Forecast(f);  }}  }
class C{  @PreDestroy protected void deregisterSessionScope(){  for (  Entry<Serializable,String> sessionUser : sessionUsers.entrySet()) {    socketUsers.deregister(sessionUser.getKey(),sessionUser.getValue());  }  socketSessions.deregister(sessionScope.values());}  }
class C{  protected Set<String> readFileToSet(BufferedReader aReader) throws IOException {  Set<String> words=new HashSet<String>();  String line;  while ((line=aReader.readLine()) != null) {    words.add(line.toLowerCase());  }  return words;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.128 -0500",hash_original_method="DC38D0601A6CA8B3CA54AD6CF11C8ED7",hash_generated_method="BEC13A2D99D338AEA54338061AF770B0") public void externalRepresentation(Message callback){  callback.obj=externalRepresentation();  ;  callback.sendToTarget();}  }
class C{  public static NodeReference createFromNodeId(NodeId nodeId,NamespaceTable namespaceTable,ServerTable serverTable){  return new NodeReference(serverTable.getUri(0),namespaceTable.getUri(nodeId.getNamespaceIndex()),nodeId.getValue());}  }
class C{  public int rtf(XPathContext support){  int result=rtf();  if (DTM.NULL == result) {    DTM frag=support.createDocumentFragment();    frag.appendTextChild(str());    result=frag.getDocument();  }  return result;}  }
class C{  public DynamicTranslationModel<String> build(){  sa.build();  return new DynamicTranslationModel<>(sa);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.914 -0500",hash_original_method="33780DBE97BD7C670E5AFFC2C0A5985B",hash_generated_method="F2612A86B7C06B647F6BF803B9490EB9") @Deprecated public static void resetGlobalExternalFreedSize(){}  }
class C{  @Override public void statusChanged(ProgressEvent event){  if (this.monitor.isCanceled()) {    return;  }  if (!this.eventFilter.apply(event)) {    return;  }  this.monitor.setWorkRemaining(100);  this.monitor.worked(1);  this.monitor.subTask(event.getDescription());}  }
class C{  public ByteList InstanceInfo(ByteList bytes,int name_index,int base_index,int flags,int protected_index,int interfaces_count,IntList interfaces,int iinit_index,ObjectList<ByteList> itraits,int class_info){  if (show_bytecode) {    defns_out.write("\n      InstanceInfo name_index=" + name_index + " base_index="+ base_index+ " interfaces_count="+ interfaces_count+ " interfaces={");    for (int i=0; i < interfaces.size(); ++i) {      defns_out.write(" " + interfaces.get(i));    }    defns_out.write("} flags=" + flags + " iinit_index="+ iinit_index+ " itraits_count="+ itraits.size()+ " -> "+ class_info);  }  bytes=Int(bytes,name_index);  bytes=Int(bytes,base_index);  bytes=Byte(bytes,flags);  if (protected_index != 0) {    bytes=Int(bytes,protected_index);  }  bytes=Int(bytes,interfaces_count);  bytes=Interfaces(bytes,interfaces);  bytes=Int(bytes,iinit_index);  bytes=Int(bytes,itraits.size());  bytes=Traits(bytes,itraits);  return bytes;}  }
class C{  public Shape createBullet(int x,int y,int diameter){  return createEllipseInternal(x,y,diameter,diameter);}  }
class C{  public static String checkPathEnding(String path){  path.replace('\\','/');  if (path.endsWith("/"))   return path; else   return path + "/";}  }
class C{  public comment addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public FancyButton(String text){  this(text,null);}  }
class C{  public Evidence(final int typeEvidenceId,final byte[] aesKey){  this();  if (Cfg.DEBUG) {    Check.requires(aesKey != null,"aesKey null");  }  this.typeEvidenceId=typeEvidenceId;  this.aesKey=aesKey;  encryption=new Encryption(aesKey);  lastBlock=new byte[encryption.getBlockSize()];  if (Cfg.DEBUG) {    Check.ensures(encryption != null,"encryption null");  }}  }
class C{  public void goToState(int newState){  lastStates.push(yystate());  yybegin(newState);}  }
class C{  public JulianDate(int year,int month,int day){  YMD ymd=new YMD(year,month,day);  julian=ymd.julian();}  }
class C{  public IntArray(final long length){  super(length);  mArray=new int[(int)length];}  }
class C{  public static void writeMetadata(BeanInfo metadata,ResponseWriter writer) throws IOException {  BeanDescriptor descriptor=metadata.getBeanDescriptor();  writeFeatureDescriptor("composite-component-BeanDescriptor",descriptor,writer);  writeFeatureDescriptorValues("composite-component-BeanDescriptor",descriptor,writer);  PropertyDescriptor attributes[]=metadata.getPropertyDescriptors();  for (  PropertyDescriptor cur : attributes) {    writeFeatureDescriptor("composite-component-attribute",cur,writer);    writeFeatureDescriptorValues("composite-component-attribute",cur,writer);  }}  }
class C{  public select addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  public void close(){  super.close();  if (DRM != null)   DRM.close();}  }
class C{  public void makeHistogramMultiplotGate(Gate g,String prefix,String suffix,String input_truth){  String h_datapoints="";  for (int h=0; h < g.get_histogram_bins().get_NBINS(); ++h) {    h_datapoints+=g.get_histogram_bins().get_LOG_BIN_CENTERS()[h] + " \t ";    for (int row=0; row < g.get_histogram_rpus().size(); ++row) {      h_datapoints+=g.get_histogram_rpus().get(row)[h] + " \t ";    }    h_datapoints+="\n";  }  String name_conv_rpus=prefix + "_" + g.Name+ "_"+ suffix+ ".txt";  Util.fileWriter(_output_directory + name_conv_rpus,h_datapoints,false);  String logic_string=BooleanLogic.logicString(g.get_logics());  logic_string=logic_string.replaceAll("[^\\d.]","");  String input_truth_string="";  String cmd="perl " + _home + "/resources/scripts/make_conv_multiplot.pl "+ _output_directory+ " "+ _dateID+ " "+ name_conv_rpus+ " "+ logic_string+ " "+ input_truth;  Util.executeCommand(cmd);}  }
class C{  @Inject public DataSetLineageResource(LineageService lineageService){  this.lineageService=lineageService;}  }
class C{  protected Object clone(){  PipelinedMsgParser p=new PipelinedMsgParser();  p.rawInputStream=this.rawInputStream;  p.sipMessageListener=this.sipMessageListener;  Thread mythread=new Thread(p);  mythread.setName("PipelineThread");  return p;}  }
class C{  void typeInference(Fact typeFact){  Resource type=(Resource)typeFact.getObject();  OwlClass c=schema.getClass(type);  if (OWL.NOTHING.equals(type) && frontier(typeFact)) {    collectInconsistency(inconsistency(OwlRule.CLS_NOTHING2,typeFact));  }  Set<Resource> disjoint=c.getDisjointClasses();  disjoint.retainAll(knownTypes.keySet());  for (  Resource other : disjoint) {    Fact otherTypeFact=knownTypes.get(other);    Derivation inc=inconsistency(OwlRule.CAX_DW,typeFact);    inc.addSource(otherTypeFact);    collectInconsistency(inc);  }  Set<Resource> complementary=c.getComplementaryClasses();  complementary.retainAll(knownTypes.keySet());  for (  Resource other : complementary) {    Fact otherTypeFact=knownTypes.get(other);    Derivation inc=inconsistency(OwlRule.CLS_COM,typeFact);    inc.addSource(otherTypeFact);    collectInconsistency(inc);  }  if (!typeFact.hasRule(OwlRule.CAX_SCO) && frontier(typeFact)) {    for (    Resource supertype : c.getSuperClasses()) {      if (!supertype.equals(type) && !(supertype.equals(OWL.THING))) {        processType(supertype,OwlRule.CAX_SCO,typeFact);      }    }  }  for (  URI prop : c.getOnProperty()) {    for (    Value val : c.hasValue()) {      collect(triple(node,prop,val,OwlRule.CLS_HV1,typeFact));    }  }  if (possibleInferences.containsKey(type)) {    for (    Fact fact : possibleInferences.get(type)) {      Fact join=fact.clone();      join.addSource(typeFact);      collect(join);    }  }  if (possibleInconsistencies.containsKey(type)) {    for (    Derivation d : possibleInconsistencies.get(type)) {      Derivation inc=d.clone();      inc.addSource(typeFact);      collectInconsistency(inc);    }  }}  }
class C{  @Override protected void makeFinished(){  byte[] verify_data;  if (serverHello.server_version[1] == 1) {    verify_data=new byte[12];    computerVerifyDataTLS("client finished",verify_data);  } else {    verify_data=new byte[36];    computerVerifyDataSSLv3(SSLv3Constants.client,verify_data);  }  clientFinished=new Finished(verify_data);  send(clientFinished);  if (isResuming) {    session.lastAccessedTime=System.currentTimeMillis();    status=FINISHED;  } else {    if (serverHello.server_version[1] == 1) {      computerReferenceVerifyDataTLS("server finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.server);    }    status=NEED_UNWRAP;  }}  }
class C{  public void resetScroll(){  scrollTo(0,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.376 -0500",hash_original_method="DBAD0221F2A53A2AC3E8556324A28A19",hash_generated_method="F864472904C142D8743E9F52F7418252") protected void onDataConnectionDetached(){  if (DBG)   log("onDataConnectionDetached: stop polling and notify detached");  stopNetStatPoll();  stopDataStallAlarm();  notifyDataConnection(Phone.REASON_DATA_DETACHED);}  }
class C{  public void testBug18554() throws Exception {  testBug18554(249);  testBug18554(250);  testBug18554(251);  testBug18554(252);  testBug18554(253);  testBug18554(254);  testBug18554(255);}  }
class C{  public void push(final long value){  if (value == 0L || value == 1L) {    mv.visitInsn(Opcodes.LCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  private void write(Symbol symbol,BitWriter bitwriter) throws JSONException {  try {    Symbol back=symbol.back;    if (back != null) {      this.width+=1;      write(back,bitwriter);      if (back.zero == symbol) {        bitwriter.zero();      } else {        bitwriter.one();      }    }  } catch (  Throwable e) {    throw new JSONException(e);  }}  }
class C{  protected boolean isEdgeRendered(Context<Graph<V,E>,E> context){  Predicate<Context<Graph<V,E>,V>> vertexIncludePredicate=vv.getRenderContext().getVertexIncludePredicate();  Predicate<Context<Graph<V,E>,E>> edgeIncludePredicate=vv.getRenderContext().getEdgeIncludePredicate();  Graph<V,E> g=context.graph;  E e=context.element;  boolean edgeTest=edgeIncludePredicate == null || edgeIncludePredicate.apply(context);  Pair<V> endpoints=g.getEndpoints(e);  V v1=endpoints.getFirst();  V v2=endpoints.getSecond();  boolean endpointsTest=vertexIncludePredicate == null || (vertexIncludePredicate.apply(Context.<Graph<V,E>,V>getInstance(g,v1)) && vertexIncludePredicate.apply(Context.<Graph<V,E>,V>getInstance(g,v2)));  return edgeTest && endpointsTest;}  }
class C{  public void testEmptyCase() throws Exception {  String file="EmptyTestCase.java";  assertEquals(NO_WARNINGS,lintFiles(file));}  }
class C{  public static ResultSet createResultSet(String[] columnNames,MariaDbType[] columnTypes,String[][] data,Protocol protocol){  int columnNameLength=columnNames.length;  ColumnInformation[] columns=new ColumnInformation[columnNameLength];  for (int i=0; i < columnNameLength; i++) {    columns[i]=ColumnInformation.create(columnNames[i],columnTypes[i]);  }  final byte[] boolTrue={1};  final byte[] boolFalse={0};  List<byte[][]> rows=new ArrayList<>();  for (  String[] rowData : data) {    byte[][] row=new byte[columnNameLength][];    if (rowData.length != columnNameLength) {      throw new RuntimeException("Number of elements in the row != number of columns :" + rowData.length + " vs "+ columnNameLength);    }    for (int i=0; i < columnNameLength; i++) {      byte[] bytes;      if (rowData[i] == null) {        bytes=null;      } else       if (columnTypes[i] == MariaDbType.BIT) {        bytes=rowData[i].equals("0") ? boolFalse : boolTrue;      } else {        try {          bytes=rowData[i].getBytes("UTF-8");        } catch (        UnsupportedEncodingException e) {          bytes=new byte[0];        }      }      row[i]=bytes;    }    rows.add(row);  }  return new MariaSelectResultSet(columns,rows,protocol,TYPE_SCROLL_SENSITIVE);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.writeObject(toString());}  }
class C{  private static boolean overflowInParse(long current,int digit,int radix){  if (current >= 0) {    if (current < maxValueDivs[radix]) {      return false;    }    if (current > maxValueDivs[radix]) {      return true;    }    return (digit > maxValueMods[radix]);  }  return true;}  }
class C{  public void endStatement(){  closeTemporaryResults();}  }
class C{  public String toString(){  return "InstanceOf " + classNameValue.toString();}  }
class C{  public static BigDecimal convert(Properties ctx,BigDecimal Amt,int CurFrom_ID,int CurTo_ID,int AD_Client_ID,int AD_Org_ID){  return convert(ctx,Amt,CurFrom_ID,CurTo_ID,null,0,AD_Client_ID,AD_Org_ID);}  }
class C{  public void addCategories(Categories categories){  addProperty(categories);}  }
class C{  public IIOImage(Raster raster,List<? extends BufferedImage> thumbnails,IIOMetadata metadata){  if (raster == null) {    throw new IllegalArgumentException("raster == null!");  }  this.raster=raster;  this.image=null;  this.thumbnails=thumbnails;  this.metadata=metadata;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.w3.org/2000/xmlns/";  String localName="local1";  Document doc;  NodeList elementList;  Node testAddress;  NodeList nList;  Node child;  NodeList n2List;  Node child2;  NamedNodeMap attributes;  Node arg;  Node setNode;  int nodeType;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("gender");  testAddress=elementList.item(2);  nList=testAddress.getChildNodes();  child=nList.item(0);  nodeType=(int)child.getNodeType();  if (equals(1,nodeType)) {    child=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",child);  }  n2List=child.getChildNodes();  child2=n2List.item(0);  assertNotNull("notnull",child2);  attributes=child2.getAttributes();  arg=attributes.getNamedItemNS(namespaceURI,localName);{    boolean success=false;    try {      setNode=attributes.setNamedItemNS(arg);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static SootMethod resolveCallbackMethod(SootClass clz,String signature){  if (Scene.v().containsMethod(signature))   return Scene.v().getMethod(signature);  String mName=grabName(signature);  String[] args=grabArgs(signature);  String rtype=grabReturnType(signature);  for (  SootMethod curr : clz.getMethods()) {    if (!curr.getName().equals(mName) || curr.getParameterCount() != args.length)     continue;    for (int i=0; i < args.length; i++)     if (!isSubTypeOfIncluding(toSootType(args[i]),curr.getParameterType(i)))     continue;    return curr;  }  return null;}  }
class C{  public boolean isSupportBle(){  return getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE);}  }
class C{  public final AssertSubscriber<T> assertComplete(){  assertNoError();  int c=completionCount;  if (c == 0) {    throw new AssertionError("Not completed",null);  }  if (c > 1) {    throw new AssertionError("Multiple completions: " + c,null);  }  return this;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiPopupMenuUI();  return MultiLookAndFeel.createUIs(mui,((MultiPopupMenuUI)mui).uis,a);}  }
class C{  protected synchronized void onSendRejected(RecordBuffer<R> buffer){  logger.trace("{}:{} Send Rejected",name(),buffer);  totalRejectedSendTasks.incrementAndGet();  throttler.onSendRejected();  queueBufferForRetry(buffer);}  }
class C{  public final Px<T> hide(){  return onAssembly(new PublisherHide<>(this));}  }
class C{  public JmxServerProbe(String host,int port) throws IOException {  this.host=host;  this.port=port;  connect();}  }
class C{  public void addScrollListener(ScrollListener l){  if (scrollListeners == null) {    scrollListeners=new EventDispatcher();  }  scrollListeners.addListener(l);}  }
class C{  public static <T>T[] newArray(T[] reference,int length){  return Platform.newArray(reference,length);}  }
class C{  private static byte[] changeCharset(byte[] payload,Charset fromCharset,Charset toCharset) throws TranslationException {  try {    CharsetDecoder decoder=fromCharset.newDecoder();    CharBuffer charBuffer=decoder.decode(ByteBuffer.wrap(payload));    decoder.flush(charBuffer);    CharsetEncoder encoder=toCharset.newEncoder();    ByteBuffer byteBuffer=encoder.encode(charBuffer);    encoder.flush(byteBuffer);    payload=byteBuffer.array();  } catch (  UnmappableCharacterException e) {    LOGGER.finer("Charset translation: cannot mapped to an output char byte: " + e.getMessage());    return null;  }catch (  CharacterCodingException e) {    LOGGER.warning("Problem in the decoding/encoding charset: " + e.getMessage());    throw new TranslationException("Problem in the decoding/encoding charset",e);  }  return payload;}  }
class C{  public final void clearAlgorithms(){  this.householdAlgorithms.clear();}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public static void addUnknownSuppressWarningProposals(InvocationContext context,IProblemLocation problem,Collection<ICommandAccess> proposals){  ASTNode coveringNode=context.getCoveringNode();  if (!(coveringNode instanceof StringLiteral))   return;  AST ast=coveringNode.getAST();  StringLiteral literal=(StringLiteral)coveringNode;  String literalValue=literal.getLiteralValue();  String[] allWarningTokens=CorrectionEngine.getAllWarningTokens();  for (int i=0; i < allWarningTokens.length; i++) {    String curr=allWarningTokens[i];    if (NameMatcher.isSimilarName(literalValue,curr)) {      StringLiteral newLiteral=ast.newStringLiteral();      newLiteral.setLiteralValue(curr);      ASTRewrite rewrite=ASTRewrite.create(ast);      rewrite.replace(literal,newLiteral,null);      String label=CorrectionMessages.INSTANCE.SuppressWarningsSubProcessor_fix_suppress_token_label(curr);      Images image=Images.correction_change;      ASTRewriteCorrectionProposal proposal=new ASTRewriteCorrectionProposal(label,rewrite,5,context.getDocument(),image);      proposals.add(proposal);    }  }  addRemoveUnusedSuppressWarningProposals(context,problem,proposals);}  }
class C{  private void generateF(){  this.layers=new Layer[this.numOfLayers];  for (int i=0; i < this.numOfLayers; i++) {    layers[i]=new Layer(this.vi[i],this.vi[i + 1],sr);  }}  }
class C{  public static String toString(int x){  return toString(x,10);}  }
class C{  public String poolFooterStatements(){  StringBuilder sb=new StringBuilder();  for (  String footerStatement : footerStatements) {    sb.append("\n");    sb.append(footerStatement);    sb.append("\n");  }  footerStatements.clear();  return sb.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void saveWorkFolderShortcuts(long workFolderId,int startingRank){  for (  ItemInfo info : mWorkFolderApps) {    info.rank=startingRank++;    LauncherModel.addItemToDatabase(mContext,info,workFolderId,0,0,0);  }}  }
class C{  public double localScore(int i){  double residualVariance=getCovariances().getValue(i,i);  int n=getSampleSize();  int p=0;  if (residualVariance <= 0) {    if (isVerbose()) {      out.println("Nonpositive residual varianceY: resVar / varianceY = " + (residualVariance / getCovariances().getValue(i,i)));    }    return Double.NaN;  }  double c=getPenaltyDiscount();  return score(residualVariance,n,logn,p,c);}  }
class C{  private static Script scriptFromUrl(String scriptUrlPath,ScriptType scriptType){  String scriptString=getScriptStringFromUrl(scriptUrlPath);  return scriptFromString(scriptString,scriptType).setName(scriptUrlPath);}  }
class C{  public Entry createEntry(){  return createEntry(Entry.KEY);}  }
class C{  private synchronized void closeActiveFile(){  StringWriterFile activeFile=this.activeFile;  try {    this.activeFile=null;    if (activeFile != null) {      activeFile.close();      getPolicy().closeActiveFile(activeFile.path());      activeFile=null;    }  } catch (  IOException e) {    trace.error("error closing active file '{}'",activeFile.path(),e);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMGElement(prefix,(AbstractDocument)doc);}  }
class C{  public VarDefinition createVarDefinition(){  VarDefinitionImpl varDefinition=new VarDefinitionImpl();  return varDefinition;}  }
class C{  public Geo crossNormalize(Geo b){  double x=this.y() * b.z() - this.z() * b.y();  double y=this.z() * b.x() - this.x() * b.z();  double z=this.x() * b.y() - this.y() * b.x();  double L=Math.sqrt(x * x + y * y + z * z);  return create(x / L,y / L,z / L);}  }
class C{  public void handleGatewayReceiverStart(GatewayReceiver recv) throws ManagementException {  if (!isServiceInitialised("handleGatewayReceiverStart")) {    return;  }  if (!recv.isManualStart()) {    createGatewayReceiverMBean(recv);  }  GatewayReceiverMBean mbean=(GatewayReceiverMBean)service.getLocalGatewayReceiverMXBean();  GatewayReceiverMBeanBridge bridge=mbean.getBridge();  bridge.startServer();  Notification notification=new Notification(JMXNotificationType.GATEWAY_RECEIVER_STARTED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.GATEWAY_RECEIVER_STARTED_PREFIX);  memberLevelNotifEmitter.sendNotification(notification);}  }
class C{  public static boolean[] identifyDimensionType(List<CarbonDimension> tableDimensionList){  List<Boolean> isDictionaryDimensions=new ArrayList<Boolean>();  Set<Integer> processedColumnGroup=new HashSet<Integer>();  for (  CarbonDimension carbonDimension : tableDimensionList) {    List<CarbonDimension> childs=carbonDimension.getListOfChildDimensions();    if (null != childs && childs.size() > 0) {      break;    }    if (carbonDimension.isColumnar() && hasEncoding(carbonDimension.getEncoder(),Encoding.DICTIONARY)) {      isDictionaryDimensions.add(true);    } else     if (!carbonDimension.isColumnar()) {      if (processedColumnGroup.add(carbonDimension.columnGroupId())) {        isDictionaryDimensions.add(true);      }    } else {      isDictionaryDimensions.add(false);    }  }  boolean[] primitive=ArrayUtils.toPrimitive(isDictionaryDimensions.toArray(new Boolean[isDictionaryDimensions.size()]));  return primitive;}  }
class C{  public String formatAmt(final String amt,final String amt_In){  BigDecimal ammt=new BigDecimal(0.000);  NumberFormat formatter;  formatter=new DecimalFormat("##############0.00");  final int val=amt_In.equalsIgnoreCase("thousand") ? 1 : amt_In.equalsIgnoreCase("lakhs") ? 2 : 3;switch (val) {case 1:    ammt=BigDecimal.valueOf(Double.parseDouble(amt) / 1000);  ammt=ammt.setScale(2,BigDecimal.ROUND_HALF_UP);break;case 2:ammt=BigDecimal.valueOf(Double.parseDouble(amt) / 100000);ammt=ammt.setScale(2,BigDecimal.ROUND_HALF_UP);break;default :ammt=BigDecimal.valueOf(Double.valueOf(amt));BigDecimal tmpAmt=new BigDecimal(ammt.toBigInteger());tmpAmt=tmpAmt.add(BigDecimal.valueOf(0.5));if (ammt.doubleValue() > tmpAmt.doubleValue()) ammt=ammt.setScale(0,BigDecimal.ROUND_HALF_UP);}return formatter.format(Double.valueOf(ammt.toString()));}  }
class C{  public void loadLogicalCategories(){  logicalOFMessageCategories=ImmutableSet.copyOf(logicalOFMessageCategories);  numRequiredConnections=calcNumRequiredConnections();}  }
class C{  public void emitWithGravity(View emiter,int gravity,int particlesPerSecond){  configureEmiter(emiter,gravity);  startEmiting(particlesPerSecond);}  }
class C{  private static void copySwap(Object[] src,int from,Object[] dst,int to,int len){  if (src == dst && from + len > to) {    int new_to=to + len - 1;    for (; from < to; from++, new_to--, len--) {      dst[new_to]=src[from];    }    for (; len > 1; from++, new_to--, len-=2) {      swap(from,new_to,dst);    }  } else {    to=to + len - 1;    for (; len > 0; from++, to--, len--) {      dst[to]=src[from];    }  }}  }
class C{  public void reset(){  releaseDTMXRTreeFrags();  if (m_rtfdtm_stack != null)   for (java.util.Enumeration e=m_rtfdtm_stack.elements(); e.hasMoreElements(); )   m_dtmManager.release((DTM)e.nextElement(),true);  m_rtfdtm_stack=null;  m_which_rtfdtm=-1;  if (m_global_rtfdtm != null)   m_dtmManager.release(m_global_rtfdtm,true);  m_global_rtfdtm=null;  m_dtmManager=DTMManager.newInstance(org.apache.xpath.objects.XMLStringFactoryImpl.getFactory());  m_saxLocations.removeAllElements();  m_axesIteratorStack.removeAllElements();  m_contextNodeLists.removeAllElements();  m_currentExpressionNodes.removeAllElements();  m_currentNodes.removeAllElements();  m_iteratorRoots.RemoveAllNoClear();  m_predicatePos.removeAllElements();  m_predicateRoots.RemoveAllNoClear();  m_prefixResolvers.removeAllElements();  m_prefixResolvers.push(null);  m_currentNodes.push(DTM.NULL);  m_currentExpressionNodes.push(DTM.NULL);  m_saxLocations.push(null);}  }
class C{  public boolean isValidOn(final Date date){  if ((x509Certificate == null) || (date == null)) {    return false;  }  try {    x509Certificate.checkValidity(date);    return true;  } catch (  CertificateExpiredException e) {    return false;  }catch (  CertificateNotYetValidException e) {    return false;  }}  }
class C{  public TCPGrappl(ApplicationState applicationState){  this.applicationState=applicationState;  this.uuid=UUID.randomUUID();  Application.getLog().log("Creating grappl connection " + getUUID());}  }
class C{  public static GenericValue create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){  GenericValue newValue=new GenericValue();  newValue.init(delegator,modelEntity,singlePkValue);  return newValue;}  }
class C{  @SuppressWarnings("unused") @Test public void testFinalStateExitSequence(){  Statechart sc=_createStatechart("cs");  Scope scope=_createInterfaceScope("interface",sc);  Region r=_createRegion("r",sc);  FinalState fs=_createFinalState(r);  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _fs=flow.getStates().get(0);  assertEquals("_final_0",_fs.getSimpleName());  assertNull(_fs.getExitAction());  assertNotNull(_fs.getExitSequence());  assertEquals(1,_fs.getExitSequence().getSteps().size());  assertClass(ExitState.class,_fs.getExitSequence().getSteps().get(0));}  }
class C{  public static String readString(final InputStream input) throws IOException {  final byte[] bin=readBytes(input);  if (bin.length == 0) {    return null;  }  return new String(bin,0,bin.length,UTF_8);}  }
class C{  public String name(){  return System.getProperty("java.vm.name");}  }
class C{  public PipedReader(PipedWriter src,int pipeSize) throws IOException {  initPipe(pipeSize);  connect(src);}  }
class C{  void displayState(int state){  log.debug(getNameString() + " displayState " + state);  updateSize();switch (state) {case Light.OFF:    if (isText()) {      super.setText(InstanceManager.turnoutManagerInstance().getClosedText());    }  if (isIcon()) {    super.setIcon(off);  }break;case Light.ON:if (isText()) {super.setText(InstanceManager.turnoutManagerInstance().getThrownText());}if (isIcon()) {super.setIcon(on);}break;default :if (isText()) {super.setText(Bundle.getMessage("BeanStateInconsistent"));}if (isIcon()) {super.setIcon(inconsistent);}break;}return;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof KeyedValueDataset)) {    return false;  }  KeyedValueDataset that=(KeyedValueDataset)obj;  if (this.data == null) {    if (that.getKey() != null || that.getValue() != null) {      return false;    }    return true;  }  if (!ObjectUtilities.equal(this.data.getKey(),that.getKey())) {    return false;  }  if (!ObjectUtilities.equal(this.data.getValue(),that.getValue())) {    return false;  }  return true;}  }
class C{  public Set<Map.Entry<K,V>> entrySet(){  Set<Map.Entry<K,V>> es=entrySet;  return (es != null ? es : (entrySet=(Set<Map.Entry<K,V>>)(Set)new EntrySet()));}  }
class C{  public Rule mandatoryWS(){  return OneOrMore(FirstOf(comment(),whitespaceChar())).label("ws");}  }
class C{  public void rotatedLootPot(World world,Random rand,int x,int y,int z,int offsetX,int offsetY,int offsetZ,int rotation,int min,int max,int chance){  x-=width / 2;  z-=depth / 2;  if (rand.nextInt(chance) == 0)   return;switch (rotation) {case 0:    generateLootPot(world,rand,new BlockPos(x + offsetX,y + offsetY,z + offsetZ),min,max,LootTableRegistry.DUNGEON_POT_LOOT);  break;case 1:generateLootPot(world,rand,new BlockPos(x + offsetZ,y + offsetY,z + depth - offsetX - 1),min,max,LootTableRegistry.DUNGEON_POT_LOOT);break;case 2:generateLootPot(world,rand,new BlockPos(x + width - offsetX - 1,y + offsetY,z + depth - offsetZ - 1),min,max,LootTableRegistry.DUNGEON_POT_LOOT);break;case 3:generateLootPot(world,rand,new BlockPos(x + width - offsetZ - 1,y + offsetY,z + offsetX),min,max,LootTableRegistry.DUNGEON_POT_LOOT);break;}}  }
class C{  @Override public void onTokenRefresh(){  String refreshedToken=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"Refreshed token: " + refreshedToken);}  }
class C{  default ObservableStringValue defaultPackageNameProperty(Injector injector){  final TranslatorSupport<?> support=new TranslatorSupport<>(injector,this);  if (this instanceof ProjectProperty) {    final ProjectProperty project=(ProjectProperty)this;    return createStringBinding(null,project.nameProperty(),project.companyNameProperty());  } else   if (this instanceof HasAliasProperty) {    final HasAliasProperty alias=(HasAliasProperty)this;    return createStringBinding(null,alias.aliasProperty());  } else {    return createStringBinding(null,nameProperty());  }}  }
class C{  public String format(int indentFactor){  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  public void testExportImportMultipleWithPause_kml(){  testExportImportMultipleWithPause(TrackFileFormat.KML);}  }
class C{  @Override public boolean preShutdown(){  try {    saveEclipsePreferences();    GAMA.closeAllExperiments(true,true);  } catch (  final Exception e) {    e.printStackTrace();  }  return super.preShutdown();}  }
class C{  public void listLogicalRouterPorts(String id,FutureCallback<LogicalRouterPortListResult> responseCallback) throws IOException {  getAsync(LOGICAL_ROUTER_PORTS_BASE_PATH + "?logical_router_id=" + id,HttpStatus.SC_OK,new TypeReference<LogicalRouterPortListResult>(){  },responseCallback);}  }
class C{  public static Strategy systemStrategy(){  return new Strategy(defaultPRNG(pickSeed()),pickExamples(),pickShrinks(),new ExceptionReporter());}  }
class C{  public T src(String value){  return attr("src",value);}  }
class C{  public CollectionHolder(){  this.arr=new String[10];  for (int i=0; i < 5; i++) {    arr[i]="" + i;  }  for (int i=5; i < 10; i++) {    arr[i]=secIds[i - 5];  }}  }
class C{  public InputStream openStream() throws IOException {  if (opened) {    throw new IllegalStateException("The stream was already opened.");  }  if (((Closeable)stream).isClosed()) {    throw new FileUploadException(ItemSkippedException);  }  return stream;}  }
class C{  protected CollectorThread(RawThreadModel model,CollectorContext context,boolean daemon){  super(model);  this.context=context;  setName("Collector-" + model.collectors.size());  setDaemon(daemon);  Trace.trace(Item.SCHEDULER,"%d: collector thread %d \"%s\" created (%d total)",Thread.currentThread().getId(),getId(),getName(),model.collectors.size());}  }
class C{  public MinimaxEvaluation(int ply){  this.ply=ply;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void reconstructParsimonyStates(Tree tree,PatternList patterns){  for (int i=0; i < patterns.getPatternCount(); i++) {    String name="state" + String.valueOf(i + 1);    int[] root=getParsimonyState2(tree,tree.getRoot(),patterns,i,name,patterns.getDataType().getStateCount());    int bestIndex=0;    int bestScore=root[0];    for (int j=1; j < root.length; j++) {      if (root[j] < bestScore) {        bestScore=root[j];        bestIndex=i;      }    }    reconstructParsimonyState2(tree,tree.getRoot(),name,"r" + name,bestIndex);  }}  }
class C{  public RDFSailRemover(SailConnection con,ValueFactory vf,UpdateContext uc){  this.con=con;  this.vf=vf;  this.uc=uc;}  }
class C{  protected void checkValidity() throws SQLException {  if (isClosed()) {    throw new FBSQLException("This connection is closed and cannot be used now.",SQLStateConstants.SQL_STATE_CONNECTION_CLOSED);  }}  }
class C{  public ImmutableArray<K> insert(int index,K obj){  int len=array.length + 1;  @SuppressWarnings("unchecked") K[] array=(K[])new Object[len];  DataUtils.copyWithGap(this.array,array,this.array.length,index);  array[index]=obj;  return new ImmutableArray<K>(array);}  }
class C{  public ImmutableList<Api.Tag> enhanceTags(Long itemId,Iterable<Api.Tag> tags_){  ImmutableList<Api.Tag> tags=ImmutableList.copyOf(tags_);  ImmutableList<Api.Tag> result=tagsCache.getIfPresent(itemId);  if (result != null) {    if (tags.size() > 0) {      HashSet<Api.Tag> merged=new HashSet<>(result);      merged.removeAll(tags);      merged.addAll(tags);      result=ImmutableList.copyOf(merged);    }  } else {    result=ImmutableList.copyOf(tags);  }  tagsCache.put(itemId,result);  return result;}  }
class C{  private void updateButtonState(){  Button clearButton=mDialog.getButton(AlertDialog.BUTTON_POSITIVE);  if (clearButton != null)   clearButton.setEnabled(!mSelectedOptions.isEmpty());}  }
class C{  public GPUImageBoxBlurFilter(){  this(1f);}  }
class C{  public final void onSaveInstanceState(@Nullable final Bundle outState){  if (outState != null) {    outState.putInt(KEY_CHRONOS_LISTENER_ID,mChronosListener.getId());  }}  }
class C{  public long startTime(){  return DistributionStats.getStatTime();}  }
class C{  public void onPressed(){  pressed=!pressed;}  }
class C{  @Override protected void onAttachedToWindow(){  super.onAttachedToWindow();  final ViewParent parent=getParent();  if (parent instanceof AppBarLayout) {    if (mOnOffsetChangedListener == null) {      mOnOffsetChangedListener=new OffsetChangedListener();    }    ((AppBarLayout)parent).addOnOffsetChangedListener(mOnOffsetChangedListener);    mAppBarDrawable=((AppBarLayout)parent).getBackground();  }}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TAnnotableElement.class) {switch (derivedFeatureID) {case TypesPackage.TMEMBER__ANNOTATIONS:      return TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS;default :    return -1;}}if (baseClass == SyntaxRelatedTElement.class) {switch (derivedFeatureID) {case TypesPackage.TMEMBER__AST_ELEMENT:  return TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected void removeAnnotation(final Annotation annotation,final boolean fireModelChanged){  if (annotations.containsKey(annotation)) {    Position pos=null;    pos=annotations.get(annotation);    annotations.remove(annotation);    positions.remove(pos);    getAnnotationModelEvent().annotationRemoved(annotation,pos);    if (fireModelChanged) {      fireModelChanged();    }  }}  }
class C{  public static void unmount(Path mountPoint) throws IOException {  Fuse.unmount(mountPoint);}  }
class C{  public static void showMessageSheet(Component parentComponent,Object message,int messageType,@Nullable Icon icon,SheetListener listener){  showOptionSheet(parentComponent,message,JOptionPane.DEFAULT_OPTION,messageType,icon,null,null,listener);}  }
class C{  public BloomFilter(byte[] data,int hashFunctions,int tweak,UpdateMode update){  filter=Arrays.clone(data);  this.hashFunctions=Math.min(hashFunctions,MAX_HASH_FUNCS);  this.tweak=tweak;  this.update=update;}  }
class C{  public void connectPort(LnNetworkPortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (networkController != null) {    log.warn("connectPort: connect called while connected");  }  networkController=p;}  }
class C{  public static Date convertDateValueToDate(long dateValue){  long millis=getMillis(null,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),0,0,0,0);  return new Date(millis);}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("jo1x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jo1xStandaloneLocalConfiguration.class);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String matchNTE=getString(stack);  String source=getString(stack);  return (source == null || matchNTE == null) ? new Integer(-1) : new Integer(StringMatchUtils.findMatchingWordIndexNTE(source,matchNTE.toLowerCase()));}  }
class C{  protected final int readerIndex(int docID){  if (docID < 0 || docID >= maxDoc) {    throw new IllegalArgumentException("docID must be >= 0 and < maxDoc=" + maxDoc + " (got docID="+ docID+ ")");  }  return ReaderUtil.subIndex(docID,this.starts);}  }
class C{  public int makeCylinder(final Vector pos,final Pattern block,final double radius,final int height,final boolean filled) throws MaxChangedBlocksException {  return this.makeCylinder(pos,block,radius,radius,height,filled);}  }
class C{  public boolean loadTableDetails(JTable table){  if (table.getRowSorter() == null) {    TableRowSorter<? extends TableModel> sorter=new TableRowSorter<>(table.getModel());    table.setRowSorter(sorter);    for (int i=0; i < table.getColumnCount(); i++) {      if (table.getColumnClass(i) == String.class || table.getColumnClass(i) == Integer.class) {        continue;      }      sorter.setSortable(i,false);    }  }  table.setRowHeight(new JComboBox<>().getPreferredSize().height);  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  table.setIntercellSpacing(new Dimension(3,1));  table.setName(getWindowFrameRef() + ":table");  Optional<JTablePersistenceManager> manager=InstanceManager.getOptionalDefault(JTablePersistenceManager.class);  if (manager.isPresent()) {    manager.get().resetState(table);    manager.get().persist(table);    return true;  }  return false;}  }
class C{  public static char[] encodeHex(final byte[] data){  return encodeHex(data,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isSendEMail(){  Object oo=get_Value(COLUMNNAME_SendEMail);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public AlgorithmInitializationException(Algorithm algorithm,Throwable cause){  super(algorithm,cause);}  }
class C{  public String toPrettyPrintingJson() throws IOException {  Map<Integer,List<String>> simplifiedPartitionMap=new TreeMap<Integer,List<String>>();  for (  Map.Entry<String,List<String>> entry : partitionMap.entrySet()) {    String longPartitionName=entry.getKey();    int partitionNumber=TerrapinUtil.getViewPartitionNumber(longPartitionName);    simplifiedPartitionMap.put(partitionNumber,entry.getValue());  }  return OBJECT_MAPPER.defaultPrettyPrintingWriter().writeValueAsString(simplifiedPartitionMap);}  }
class C{  public TargetRoll(int value,String desc,boolean cumulative){  addModifier(value,desc,cumulative);}  }
class C{  public MaterialCollection(){  super(Document.get().createULElement(),"collection");}  }
class C{  protected void startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  bridgeServerPort=bridge.getPort();}  }
class C{  private void createGui(){  final JPanel topPanel=new JPanel(new BorderLayout());  final JPanel innerTopPanel=new JPanel(new BorderLayout());  innerTopPanel.add(m_stdEditPanel);  topPanel.add(innerTopPanel);  final JPanel debuggerChooserPanel=new JPanel(new BorderLayout());  debuggerChooserPanel.setBorder(new TitledBorder("Project Debuggers"));  m_checkedList=new JCheckedListbox<>(new Vector<DebuggerTemplate>(),false);  updateCheckedListPanel();  final JScrollPane debuggerScrollPane=new JScrollPane(m_checkedList);  m_checkedListPanel.add(debuggerScrollPane);  debuggerChooserPanel.add(m_checkedListPanel,BorderLayout.CENTER);  debuggerChooserPanel.setMinimumSize(new Dimension(0,128));  debuggerChooserPanel.setPreferredSize(new Dimension(0,128));  innerTopPanel.add(debuggerChooserPanel,BorderLayout.SOUTH);  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));  buttonPanel.setBorder(new EmptyBorder(0,0,5,2));  buttonPanel.add(new JPanel());  buttonPanel.add(m_saveButton);  topPanel.add(buttonPanel,BorderLayout.SOUTH);  final JPanel bottomPanel=new CAddressSpacesTablePanel(m_table);  final JScrollPane scrollPane=new JScrollPane(m_table);  bottomPanel.setBorder(m_titledBorder);  setBorder(new EmptyBorder(0,0,0,1));  bottomPanel.add(scrollPane);  final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,bottomPanel);  splitPane.setOneTouchExpandable(true);  splitPane.setDividerLocation(splitPane.getMinimumDividerLocation());  splitPane.setResizeWeight(0.5);  add(splitPane);}  }
class C{  public static void main(String... args) throws SQLException {  new Backup().runTool(args);}  }
class C{  public void dispose(){}  }
class C{  public boolean okToSend(){  return (true);}  }
class C{  public String decryptToString(String encryptedString) throws NoSuchPaddingException, InvalidKeyException, NoSuchAlgorithmException, IOException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException {  return new String(decrypt(encryptedString));}  }
class C{  private void handleConverter(){  Attributes attrs=validatorInfo.getAttributes();  String ln=validatorInfo.getLocalName();  boolean hasConverterId=false;  boolean hasBinding=false;  for (int i=0; i < attrs.getLength(); i++) {    if (attrs.getLocalName(i).equals("converterId")) {      hasConverterId=true;    }    if (attrs.getLocalName(i).equals("binding")) {      hasBinding=true;    }  }  if (failed=(!hasBinding && !hasConverterId)) {    Object[] obj=new Object[1];    obj[0]=ln;    ResourceBundle rb=ResourceBundle.getBundle(RIConstants.TLV_RESOURCE_LOCATION);    failureMessages.append(MessageFormat.format(rb.getString("TLV_CONVERTER_ERROR"),obj));    failureMessages.append("\n");  }}  }
class C{  private RegUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static void copy(byte[] in,OutputStream out) throws IOException {  Assert.notNull(in,"No input byte array specified");  Assert.notNull(out,"No OutputStream specified");  try {    out.write(in);  }  finally {    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public void resetGraphY1MaxValue(){  double maxSpeed=Tracking.getTracking().getMaxSpeed();  if (maxSpeed > maxY1axis) {    int i=((int)(maxSpeed + 0.9999));    maxY1axis=i + 4 - (i % 4);  }  graph.getViewport().setMaxY(maxY1axis);}  }
class C{  public Object readObject(Class cl) throws IOException {  if (cl == null || cl.equals(Object.class))   return readObject();  int tag=parseTag();switch (tag) {case TAG_NULL:    expectTag(TAG_NULL_END);  return null;case TAG_MAP:{  String type=readType();  Deserializer reader;  reader=_serializerFactory.getObjectDeserializer(type,cl);  return reader.readMap(this);}case TAG_LIST:{String type=readType();int length=readLength();Deserializer reader;reader=_serializerFactory.getObjectDeserializer(type,cl);return reader.readList(this,length);}case TAG_REF:{int ref=parseInt();expectTag(TAG_REF_END);return _refs.get(ref);}case TAG_REMOTE:{String type=readType();String url=readString();expectTag(TAG_REMOTE_END);Object remote=resolveRemote(type,url);return remote;}}_peekTag=tag;Object value=_serializerFactory.getDeserializer(cl).readObject(this);return value;}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  }  if (o == this) {    return true;  }  if (!(o instanceof KeyedValues2D)) {    return false;  }  KeyedValues2D kv2D=(KeyedValues2D)o;  if (!getRowKeys().equals(kv2D.getRowKeys())) {    return false;  }  if (!getColumnKeys().equals(kv2D.getColumnKeys())) {    return false;  }  int rowCount=getRowCount();  if (rowCount != kv2D.getRowCount()) {    return false;  }  int colCount=getColumnCount();  if (colCount != kv2D.getColumnCount()) {    return false;  }  for (int r=0; r < rowCount; r++) {    for (int c=0; c < colCount; c++) {      Number v1=getValue(r,c);      Number v2=kv2D.getValue(r,c);      if (v1 == null) {        if (v2 != null) {          return false;        }      } else {        if (!v1.equals(v2)) {          return false;        }      }    }  }  return true;}  }
class C{  public void testNextLongBadBounds(){  SplittableRandom sr=new SplittableRandom();  Runnable[] throwingActions={null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  public void onUploadClicked(final View view){  if (isDfuServiceRunning()) {    showUploadCancelDialog();    return;  }  if (!mStatusOk) {    Toast.makeText(this,R.string.dfu_file_status_invalid_message,Toast.LENGTH_LONG).show();    return;  }  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(this);  final SharedPreferences.Editor editor=preferences.edit();  editor.putString(PREFS_DEVICE_NAME,mSelectedDevice.getName());  editor.putString(PREFS_FILE_NAME,mFileNameView.getText().toString());  editor.putString(PREFS_FILE_TYPE,mFileTypeView.getText().toString());  editor.putString(PREFS_FILE_SIZE,mFileSizeView.getText().toString());  editor.apply();  showProgressBar();  final boolean keepBond=preferences.getBoolean(SettingsFragment.SETTINGS_KEEP_BOND,false);  final boolean forceDfu=preferences.getBoolean(SettingsFragment.SETTINGS_ASSUME_DFU_NODE,false);  final boolean enablePRNs=preferences.getBoolean(SettingsFragment.SETTINGS_PACKET_RECEIPT_NOTIFICATION_ENABLED,Build.VERSION.SDK_INT < Build.VERSION_CODES.M);  String value=preferences.getString(SettingsFragment.SETTINGS_NUMBER_OF_PACKETS,String.valueOf(DfuServiceInitiator.DEFAULT_PRN_VALUE));  int numberOfPackets;  try {    numberOfPackets=Integer.parseInt(value);  } catch (  final NumberFormatException e) {    numberOfPackets=DfuServiceInitiator.DEFAULT_PRN_VALUE;  }  final DfuServiceInitiator starter=new DfuServiceInitiator(mSelectedDevice.getAddress()).setDeviceName(mSelectedDevice.getName()).setKeepBond(keepBond).setForceDfu(forceDfu).setPacketsReceiptNotificationsEnabled(enablePRNs).setPacketsReceiptNotificationsValue(numberOfPackets);  if (mFileType == DfuService.TYPE_AUTO)   starter.setZip(mFileStreamUri,mFilePath); else {    starter.setBinOrHex(mFileType,mFileStreamUri,mFilePath).setInitFile(mInitFileStreamUri,mInitFilePath);  }  starter.start(this,DfuService.class);}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.312 -0500",hash_original_method="9E42D14BA1D4CF35C9E8D228C35BEE02",hash_generated_method="2506025912135D07C3655F3858D23D3C") public boolean isClickable(){  return getBooleanProperty(PROPERTY_CLICKABLE);}  }
class C{  protected TreeExpansionListener createTreeExpansionListener(){  return getHandler();}  }
class C{  private static int CallNonvirtualObjectMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualObjectMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,null,true);    return env.pushJNIRef(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public Scriptable printd(final String format,final org.mozilla.javascript.Scriptable obj){  if (DebugDefaultJavascript) {    System.out.println("JpedalDefaultJavascript.printd(String,Scriptable)");  }  Date jsDate=null;  if (org.mozilla.javascript.NativeJavaObject.canConvert(obj,Date.class)) {    jsDate=(java.util.Date)org.mozilla.javascript.Context.jsToJava(obj,Date.class);  }  if (jsDate == null) {    org.mozilla.javascript.Context.throwAsScriptRuntimeEx(new RuntimeException("Not a Date()"));  }  Calendar date=Calendar.getInstance();  date.setTime(jsDate);  if (testingSetStaticDate) {    final Calendar yesterday=Calendar.getInstance();    yesterday.roll(Calendar.DAY_OF_YEAR,false);    if (date.get(Calendar.YEAR) > yesterday.get(Calendar.YEAR) || (date.get(Calendar.YEAR) == yesterday.get(Calendar.YEAR) && date.get(Calendar.DAY_OF_YEAR) > yesterday.get(Calendar.DAY_OF_YEAR))) {      date=Calendar.getInstance();      date.set(2010,10,10,10,10,10);    }  }  final char[] formatVal=format.toCharArray();  final StringBuffer retVal=new StringBuffer();  for (int i=0; i < formatVal.length; i++) {    if (formatVal[i] == 'm') {      retVal.append('M');    } else     if (formatVal[i] == 't') {      if (formatVal[i + 1] == 't') {        retVal.append('a');        i++;      } else {        if (date.get(Calendar.HOUR_OF_DAY) > 12) {          retVal.append("'P'");        } else {          retVal.append("'A'");        }      }    } else     if (formatVal[i] == 'M') {      retVal.append('m');    } else     if (formatVal[i] == 'd' && formatVal[i + 1] == 'd' && formatVal[i + 2] == 'd') {      if (formatVal[i + 3] == 'd') {        retVal.append("EEEE");        i+=3;      } else {        retVal.append("EEE");        i+=2;      }    } else     if (formatVal[i] == '\\') {      retVal.append('\'');      retVal.append(formatVal[++i]);      retVal.append('\'');    } else {      retVal.append(formatVal[i]);    }  }  final SimpleDateFormat df=new SimpleDateFormat(new String(retVal));  final String newDate=df.format(date.getTime());  if (DebugDefaultJavascript) {    System.out.println("returning String=" + newDate);  }  return context.newObject(scope,"String",new Object[]{newDate});}  }
class C{  public Element store(Object o){  return null;}  }
class C{  public String splitEvaluatorTipText(){  return "The evaluator to apply to the test data. " + "This may be a classifier, regression scheme etc.";}  }
class C{  void programmerSelected(){  log.debug("programmerSelected starts with {} buttons",buttonPool.size());  for (  JRadioButton button : buttonPool) {    button.setVisible(false);  }  buttonMap.clear();  int index=0;  if (getProgrammer() == null) {    return;  }  List<ProgrammingMode> modes=getProgrammer().getSupportedModes();  log.debug("   has {} modes",modes.size());  for (  ProgrammingMode mode : modes) {    JRadioButton button;    if (index >= buttonPool.size()) {      log.debug("   add button");      button=new JRadioButton();      buttonPool.add(button);      modeGroup.add(button);      button.addActionListener(this);      add(button);    }    log.debug("   set for {}",mode.toString());    button=buttonPool.get(index++);    button.setVisible(true);    modeGroup.add(button);    button.setText(mode.toString());    buttonMap.put(mode,button);  }  setGuiFromProgrammer();}  }
class C{  public final double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  private void showInfo(String text,int duration){  mInfo.setVisibility(View.VISIBLE);  mInfo.setText(text);  mHandler.removeMessages(FADE_OUT_INFO);  mHandler.sendEmptyMessageDelayed(FADE_OUT_INFO,duration);}  }
class C{  public static float[] multiply(float[] a,float c){  float[] result=new float[a.length];  for (int i=0; i < a.length; i++) {    result[i]=a[i] * c;  }  return result;}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  static public int packShort(final DataOutput os,final short v) throws IOException {  if (v < 0) {    throw new IllegalArgumentException("negative value: v=" + v);  }  if (v > 127) {    os.write((byte)((0xff & (v >> 8)) | 0x80));    os.write((byte)(0xff & v));    return 2;  } else {    os.write((byte)(0xff & v));    return 1;  }}  }
class C{  JdbcPreparedStatement(JdbcConnection conn,String sql){  super(conn);  this.sql=sql;  argsCnt=sql.replaceAll("[^?]","").length();}  }
class C{  public void clear(){  size=0;}  }
class C{  public void testRuleCookieEmpty() throws IOException, ServletException, InvocationTargetException {  Condition c=new Condition();  c.setType("cookie");  c.setName("abcdef");  NormalRule rule=new NormalRule();  rule.setFrom("/a\\.jsp");  rule.setTo("/b.jsp");  rule.addCondition(c);  rule.initialise(null);  RewrittenUrl rewrittenUrl=rule.matches("/a.jsp",request,response);  assertTrue(request.getCookies() == null);  assertTrue(rewrittenUrl == null);  c=new Condition();  c.setType("cookie");  c.setName("abcdef");  c.setOperator("notequal");  rule=new NormalRule();  rule.setFrom("/a\\.jsp");  rule.setTo("/b.jsp");  rule.addCondition(c);  rule.initialise(null);  rewrittenUrl=rule.matches("/a.jsp",request,response);  assertTrue(request.getCookies() == null);  assertEquals("/b.jsp",rewrittenUrl.getTarget());}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  private void preloadMemoryRealm(ClassLoader classLoader) throws Exception {  Class memoryRealm=Class.forName("org.apache.catalina.realm.MemoryRealm",true,classLoader);  memoryRealmNew=memoryRealm.getConstructor(new Class[0]);  memoryRealmSetPathname=memoryRealm.getMethod("setPathname",new Class[]{String.class});}  }
class C{  public EventBean process(EventBean theEvent,ExprEvaluatorContext exprEvaluatorContext){  if (empty) {    return theEvent;  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qUpdateIStream(entries);  }  EventBean oldEvent=theEvent;  boolean haveCloned=false;  EventBean[] eventsPerStream=new EventBean[1];  eventsPerStream[0]=theEvent;  InternalEventRouterEntry lastEntry=null;  for (int i=0; i < entries.length; i++) {    InternalEventRouterEntry entry=entries[i];    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().qUpdateIStreamApply(i,entry);    }    ExprEvaluator whereClause=entry.getOptionalWhereClause();    if (whereClause != null) {      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qUpdateIStreamApplyWhere();      }      Boolean result=(Boolean)whereClause.evaluate(eventsPerStream,true,exprEvaluatorContext);      if ((result == null) || (!result)) {        if (InstrumentationHelper.ENABLED) {          InstrumentationHelper.get().aUpdateIStreamApplyWhere(result);        }        if (InstrumentationHelper.ENABLED) {          InstrumentationHelper.get().aUpdateIStreamApply(null,false);        }        continue;      }      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aUpdateIStreamApplyWhere(true);      }    }    if (entry.isDrop()) {      return null;    }    if (lastEntry != null) {      InternalRoutePreprocessView view=lastEntry.getOutputView();      if (view.isIndicate()) {        EventBean copied=copyMethod.copy(theEvent);        view.indicate(copied,oldEvent);        oldEvent=copied;      } else {        if (entries[i].getOutputView().isIndicate()) {          oldEvent=copyMethod.copy(theEvent);        }      }    }    if (!haveCloned) {      EventBean copiedEvent=copyMethod.copy(theEvent);      if (copiedEvent == null) {        log.warn("Event of type " + theEvent.getEventType().getName() + " could not be copied");        if (InstrumentationHelper.ENABLED) {          InstrumentationHelper.get().aUpdateIStreamApply(null,false);        }        return null;      }      haveCloned=true;      eventsPerStream[0]=copiedEvent;      theEvent=copiedEvent;    }    apply(theEvent,eventsPerStream,entry,exprEvaluatorContext);    lastEntry=entry;    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aUpdateIStreamApply(theEvent,true);    }  }  if (lastEntry != null) {    InternalRoutePreprocessView view=lastEntry.getOutputView();    if (view.isIndicate()) {      view.indicate(theEvent,oldEvent);    }  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aUpdateIStream(theEvent,haveCloned);  }  return theEvent;}  }
class C{  public Property monthOfYear(){  return new Property(this,getChronology().monthOfYear());}  }
class C{  public static void serializeGroupFeaturesReply(List<OFGroupFeaturesStatsReply> groupFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupFeaturesStatsReply groupFeaturesReply=groupFeaturesReplies.get(0);  jGen.writeStringField("version",groupFeaturesReply.getVersion().toString());  jGen.writeFieldName("groupFeatures");  jGen.writeStartObject();  jGen.writeNumberField("capabilities",groupFeaturesReply.getCapabilities());  jGen.writeNumberField("maxGroupsAll",groupFeaturesReply.getMaxGroupsAll());  jGen.writeNumberField("maxGroupsSelect",groupFeaturesReply.getMaxGroupsSelect());  jGen.writeNumberField("maxGroupsIndirect",groupFeaturesReply.getMaxGroupsIndirect());  jGen.writeNumberField("maxGroupsFf",groupFeaturesReply.getMaxGroupsFf());  jGen.writeNumberField("actionsAll",groupFeaturesReply.getActionsAll());  jGen.writeNumberField("actionsSelect",groupFeaturesReply.getActionsSelect());  jGen.writeNumberField("actionsIndirect",groupFeaturesReply.getActionsIndirect());  jGen.writeNumberField("actionsFf",groupFeaturesReply.getActionsFf());  jGen.writeEndObject();}  }
class C{  public ReaderAccessibleInfo(BigIntArray edges,IntToIntPairHashMap nodeInfo){  this.edges=edges;  this.nodeInfo=nodeInfo;}  }
class C{  public RealmSampleUserItem withIdentifier(long identifier){  this.mIdentifier=identifier;  return this;}  }
class C{  public Period minusMonths(long monthsToSubtract){  return (monthsToSubtract == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtract));}  }
class C{  public void testRedeliverNewSession() throws Exception {  String text="TEST: " + System.currentTimeMillis();  Message sendMessage=session.createTextMessage(text);  if (verbose) {    LOG.info("About to send a message: " + sendMessage + " with text: "+ text);  }  producer.send(producerDestination,sendMessage);  Message unackMessage=consumer.receive(1000);  assertNotNull(unackMessage);  String unackId=unackMessage.getJMSMessageID();  assertEquals(((TextMessage)unackMessage).getText(),text);  assertFalse(unackMessage.getJMSRedelivered());  assertEquals(unackMessage.getIntProperty("JMSXDeliveryCount"),1);  consumer.close();  consumeSession.close();  consumeSession=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=createConsumer();  Message ackMessage=consumer.receive(1000);  assertNotNull(ackMessage);  ackMessage.acknowledge();  String ackId=ackMessage.getJMSMessageID();  assertEquals(((TextMessage)ackMessage).getText(),text);  assertTrue(ackMessage.getJMSRedelivered());  assertEquals(ackMessage.getIntProperty("JMSXDeliveryCount"),2);  assertEquals(unackId,ackId);  consumeSession.close();  consumer.close();  consumeSession=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=createConsumer();  assertNull(consumer.receive(1000));}  }
class C{  public synchronized boolean exists(Parameter parameter,Parameter defaultParameter){  printGotten(parameter,defaultParameter,true);  if (exists(parameter))   return true;  if (exists(defaultParameter))   return true;  return false;}  }
class C{  public IntHashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Invalid initial capacity: " + initialCapacity);  }  if (loadFactor <= 0) {    throw new IllegalArgumentException("Invalid load factor: " + loadFactor);  }  if (initialCapacity == 0) {    initialCapacity=1;  }  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  private static Instances NomToNum(Instances i) throws Exception {  System.out.println("\n Conversion function isn't implented yet");  System.out.println(i.toSummaryString());  return i;}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  private OrganizationReference createOrganizationReference(Organization provider,Organization supplier){  OrganizationReference reference=new OrganizationReference(provider,supplier,OrganizationReferenceType.TECHNOLOGY_PROVIDER_TO_SUPPLIER);  OrganizationReference orgReference=(OrganizationReference)ds.find(reference);  if (orgReference == null) {    orgReference=reference;    try {      ds.persist(orgReference);    } catch (    NonUniqueBusinessKeyException e) {      orgReference=(OrganizationReference)ds.find(reference);    }  }  return orgReference;}  }
class C{  private void loadChat(){  String html=m_chat.getHistory(MChat.CONFIDENTIALTYPE_Internal).toString();  historyText.setContent(html);}  }
class C{  public void readSector(int sectorNumber,byte[] buffer,int offset) throws IOException {  if (sectorNumber < 0 || sectorNumber >= numSectors) {    Arrays.fill(buffer,offset,offset + sectorLength,(byte)0);    Emulator.log.warn(String.format("Sector number %d out of ISO (numSectors=%d)",sectorNumber,numSectors));    return;  }  sectorDevice.readSector(sectorNumber,buffer,offset);}  }
class C{  public CircularRedirectException(String message){  super(message);}  }
class C{  public CStateFactory(final AbstractZyGraph<NodeType,EdgeType> graph,final List<IZyEditModeListener<NodeType,EdgeType>> listeners,final IStateActionFactory<NodeType,EdgeType> factory){  m_graph=graph;  m_listeners=listeners;  m_factory=factory;}  }
class C{  public static _DefinitionQueueStatus fromString(final String value) throws SOAPSerializationException {  return (_DefinitionQueueStatus)Enumeration.fromString(value,_DefinitionQueueStatus.VALUES_TO_INSTANCES);}  }
class C{  public static String formatRateString(float rate){  return String.format(java.util.Locale.US,"%.2fx",rate);}  }
class C{  public static <T>T withWriter(Path self,String charset,boolean writeBom,@ClosureParams(value=SimpleType.class,options="java.io.Writer") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newWriter(self,charset,false,writeBom),closure);}  }
class C{  private void showMessageDialog(String title,String message){  dialogFactory.createMessageDialog(title,message,null).show();}  }
class C{  public void addDesc(Entity entity){  if (entity != null) {    add("<font color='0xffffff'><a href=\"#entity:" + entity.getId() + "\">"+ entity.getShortName()+ "</a></font>",true);    String colorcode=Integer.toHexString(PlayerColors.getColor(entity.getOwner().getColorIndex()).getRGB() & 0x00f0f0f0);    add("<B><font color='" + colorcode + "'>"+ entity.getOwner().getName()+ "</font></B>");  }}  }
class C{  public void present(Object obj){  for (  Object someObj : this.toArray()) {    if (someObj instanceof MapHandlerChild) {      ((MapHandlerChild)someObj).findAndInit(obj);    }  }}  }
class C{  public String stringAttributesTipText(){  return "The range of attributes to force to be of type STRING, example " + "ranges: 'first-last', '1,4,7-14,50-last'.";}  }
class C{  public IPackageFragment[] findPackageFragments(String name,boolean partialMatch,boolean patternMatch){  boolean isStarPattern=name.equals("*");  boolean hasPatternChars=isStarPattern || (patternMatch && (name.indexOf('*') >= 0 || name.indexOf('?') >= 0));  if (partialMatch || hasPatternChars) {    String[] splittedName=Util.splitOn('.',name,0,name.length());    IPackageFragment[] oneFragment=null;    ArrayList pkgs=null;    char[] lowercaseName=hasPatternChars && !isStarPattern ? name.toLowerCase().toCharArray() : null;    Object[][] keys=this.packageFragments.keyTable;    for (int i=0, length=keys.length; i < length; i++) {      String[] pkgName=(String[])keys[i];      if (pkgName != null) {        boolean match=isStarPattern || (hasPatternChars ? CharOperation.match(lowercaseName,Util.concatCompoundNameToCharArray(pkgName),false) : Util.startsWithIgnoreCase(pkgName,splittedName,partialMatch));        if (match) {          Object value=this.packageFragments.valueTable[i];          if (value instanceof PackageFragmentRoot) {            IPackageFragment pkg=((PackageFragmentRoot)value).getPackageFragment(pkgName);            if (oneFragment == null) {              oneFragment=new IPackageFragment[]{pkg};            } else {              if (pkgs == null) {                pkgs=new ArrayList();                pkgs.add(oneFragment[0]);              }              pkgs.add(pkg);            }          } else {            IPackageFragmentRoot[] roots=(IPackageFragmentRoot[])value;            for (int j=0, length2=roots.length; j < length2; j++) {              PackageFragmentRoot root=(PackageFragmentRoot)roots[j];              IPackageFragment pkg=root.getPackageFragment(pkgName);              if (oneFragment == null) {                oneFragment=new IPackageFragment[]{pkg};              } else {                if (pkgs == null) {                  pkgs=new ArrayList();                  pkgs.add(oneFragment[0]);                }                pkgs.add(pkg);              }            }          }        }      }    }    if (pkgs == null)     return oneFragment;    int resultLength=pkgs.size();    IPackageFragment[] result=new IPackageFragment[resultLength];    pkgs.toArray(result);    return result;  } else {    String[] splittedName=Util.splitOn('.',name,0,name.length());    int pkgIndex=this.packageFragments.getIndex(splittedName);    if (pkgIndex == -1)     return null;    Object value=this.packageFragments.valueTable[pkgIndex];    String[] pkgName=(String[])this.packageFragments.keyTable[pkgIndex];    if (value instanceof PackageFragmentRoot) {      return new IPackageFragment[]{((PackageFragmentRoot)value).getPackageFragment(pkgName)};    } else {      IPackageFragmentRoot[] roots=(IPackageFragmentRoot[])value;      IPackageFragment[] result=new IPackageFragment[roots.length];      for (int i=0; i < roots.length; i++) {        result[i]=((PackageFragmentRoot)roots[i]).getPackageFragment(pkgName);      }      return result;    }  }}  }
class C{  public GreekAnalyzer(){  this(DefaultSetHolder.DEFAULT_SET);}  }
class C{  public static UpdateCartItemDialogFragment newInstance(CartProductItem cartProductItem,RequestListener requestListener){  if (cartProductItem == null) {    Timber.e(new RuntimeException(),"Created UpdateCartItemDialogFragment with null parameters.");    return null;  }  UpdateCartItemDialogFragment updateCartItemDialogFragment=new UpdateCartItemDialogFragment();  updateCartItemDialogFragment.cartProductItem=cartProductItem;  updateCartItemDialogFragment.requestListener=requestListener;  return updateCartItemDialogFragment;}  }
class C{  void readSIN() throws IOException {  while (true) {    String S=isr.readLine();    if (S == null)     return;    if (S.startsWith("EOX"))     return;  }}  }
class C{  public static void documentToValue(Document document,Value value,boolean includeAttributes){  if (includeAttributes) {    setAttributes(value,document.getDocumentElement());    elementsToSubValues(value,document.getDocumentElement().getChildNodes(),true);  } else {    elementsToSubValues(value,document.getDocumentElement().getChildNodes(),false);  }}  }
class C{  protected void installNonRolloverBorders(JComponent c){  Component[] components=c.getComponents();  for (int i=0; i < components.length; ++i) {    if (components[i] instanceof JComponent) {      ((JComponent)components[i]).updateUI();      setBorderToNonRollover(components[i]);    }  }}  }
class C{  public StackedBarRenderer(boolean renderAsPercentages){  super();  this.renderAsPercentages=renderAsPercentages;  ItemLabelPosition p=new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER);  setBasePositiveItemLabelPosition(p);  setBaseNegativeItemLabelPosition(p);  setPositiveItemLabelPositionFallback(null);  setNegativeItemLabelPositionFallback(null);}  }
class C{  public static String format(float[] f){  return (f == null) ? "null" : (f.length == 0) ? "" : formatTo(new StringBuilder(),f,", ").toString();}  }
class C{  public static long[][][] floydWarshallNumberShortestPathsWithIntermediatesMatrix(final Network network,final EdgeMetric computer,final double precision){  final int N=getNumberNodes(network);  double[][] result=new double[N][N];  long[][] number=new long[N][N];  for (int i=0; i < N; i++)   for (int j=0; j < N; j++) {    result[i][j]=Double.POSITIVE_INFINITY;    number[i][j]=0;  }  for (int i=0; i < N; i++) {    Bag bag=network.getEdgesOut(network.allNodes.objs[i]);    for (int j=0; j < bag.numObjs; j++) {      Edge edge=(Edge)(bag.objs[j]);      final int k=network.getNodeIndex(edge.getOtherNode(network.allNodes.objs[i]));      result[i][k]=computer.getWeight(edge);      number[i][k]++;    }  }  for (int i=0; i < N; i++)   result[i][i]=0;  for (int k=0; k < N; k++)   for (int i=0; i < N; i++)   for (int j=0; j < N; j++)   if (result[i][j] > (result[i][k] + result[k][j] + precision)) {    result[i][j]=result[i][k] + result[k][j];    number[i][j]=number[i][k] * number[k][j];  } else   if (abs(result[i][j] - (result[i][k] + result[k][j])) <= precision) {    number[i][j]+=number[i][k] * number[k][j];  }  long[][][] theResult=new long[N][N][N];  for (int i=0; i < N; i++)   for (int j=0; j < N; j++)   for (int k=0; k < N; k++)   if (abs(result[i][j] + result[j][k] - result[i][k]) <= precision)   theResult[i][j][k]=number[i][j] * number[j][k]; else   theResult[i][j][k]=0;  return theResult;}  }
class C{  public boolean isEnabled(){  return isEnabled;}  }
class C{  public static LockServiceImpl create(){  return create(LockServerOptions.DEFAULT);}  }
class C{  public static boolean isSubtype(IType superType,IType type) throws JavaModelException {  if (superType == null) {    return false;  }  ITypeHierarchy superTypes=type.newSupertypeHierarchy(null);  return superTypes.contains(superType);}  }
class C{  private void createFileWithContents(File dir,String fileName,String fileContents) throws IOException {  File txtFile=new File(dir,fileName);  Files.asCharSink(txtFile,StandardCharsets.UTF_8).write(fileContents);}  }
class C{  public Matrix4f rotateZYX(Vector3f angles){  return rotateZYX(angles.z,angles.y,angles.x);}  }
class C{  public boolean initialize(){  _pausingActive=false;  _stoppingBySensor=false;  _stoppingForStopSignal=false;  _stoppingByBlockOccupancy=false;  _stoppingUsingSpeedProfile=false;  try {    _address=Integer.valueOf(_activeTrain.getDccAddress()).intValue();  } catch (  NumberFormatException ex) {    log.warn("invalid dcc address '{}' for {}",_activeTrain.getDccAddress(),_activeTrain.getTrainName());    return false;  }  if ((_address < 1) || (_address > 9999)) {    log.warn("invalid dcc address '{}' for {}",_activeTrain.getDccAddress(),_activeTrain.getTrainName());    return false;  }  log.debug("{}: requesting throttle address={}",_activeTrain.getTrainName(),_address);  boolean ok=true;  if (_activeTrain.getTrainSource() == ActiveTrain.ROSTER) {    if (_activeTrain.getRosterEntry() != null) {      re=_activeTrain.getRosterEntry();      ok=InstanceManager.throttleManagerInstance().requestThrottle(_activeTrain.getRosterEntry(),this);      if (re.getSpeedProfile() != null) {        log.debug("{}: using speed profile from roster entry {}",_activeTrain.getTrainName(),re.getId());        useSpeedProfile=true;      }    } else {      ok=InstanceManager.throttleManagerInstance().requestThrottle(_address,this);    }  } else {    ok=InstanceManager.throttleManagerInstance().requestThrottle(_address,this);  }  if (!ok) {    log.warn("Throttle for locomotive address " + _address + " could not be setup.");    _activeTrain.setMode(ActiveTrain.DISPATCHED);    return false;  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void updateDocumentStructures(DocumentEvent event){  if (fDocumentPartitioners != null) {    fDocumentPartitioningChangedEvent=new DocumentPartitioningChangedEvent(this);    for (    String partitioning : fDocumentPartitioners.keySet()) {      DocumentPartitioner partitioner=fDocumentPartitioners.get(partitioning);      if (partitioner.documentChanged(event))       fDocumentPartitioningChangedEvent.setPartitionChange(partitioning,0,event.getDocument().getLength());    }  }  if (fPositions.size() > 0)   updatePositions(event);}  }
class C{  static public Sequence<IString> toIStringSequence(IString[] arr){  return new ArraySequence<IString>(true,arr);}  }
class C{  static public void assertNotNull(Object object){  assertNotNull(null,object);}  }
class C{  private void fillInRow(Example example,int row){  int column=0;  for (  Attribute attribute : regularNominalAttributes) {    double value=example.getValue(attribute);    if (Double.isNaN(value)) {      value=attribute.getMapping().size();    }    nominalColumnTable[column][row]=(byte)value;    column++;  }  labelColumn[row]=(int)example.getValue(label);  column=0;  for (  Attribute attribute : regularNumericalAttributes) {    numericalColumnTable[column][row]=example.getValue(attribute);    column++;  }  if (weight != null) {    weightColumn[row]=example.getValue(weight);  }}  }
class C{  public static void msgShort(Context context,String msg){  if (context != null && msg != null) {    Toast.makeText(context,msg.trim(),Toast.LENGTH_SHORT).show();  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  void recordAccess(HashMap<K,V> m){}  }
class C{  static void verifyPremiumNameIsNotBlocked(String domainName,DateTime priceTime,String clientId) throws EppException {  if (isDomainPremium(domainName,priceTime)) {    if (Registrar.loadByClientId(clientId).getBlockPremiumNames()) {      throw new PremiumNameBlockedException();    }  }}  }
class C{  public boolean isWrapperFor(Class<?> interfaces) throws SQLException {  return interfaces.isInstance(this);}  }
class C{  private void populateGettersFromInput(boolean isLeft){  Class inputClass;  int idx;  StoreContext store;  if (isLeft) {    idx=0;    inputClass=leftClass;    store=leftStore;  } else {    idx=1;    inputClass=rightClass;    store=rightStore;  }  String key=store.getKeys();  String timeField=store.getTimeFields();  String[] fields=store.getIncludeFields();  try {    Class c=ClassUtils.primitiveToWrapper(inputClass.getField(key).getType());    keyGetters[idx]=PojoUtils.createGetter(inputClass,key,c);  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e);  }  if (timeField != null) {    try {      Class c=ClassUtils.primitiveToWrapper(inputClass.getField(timeField).getType());      timeGetters[idx]=PojoUtils.createGetter(inputClass,timeField,c);    } catch (    NoSuchFieldException e) {      throw new RuntimeException(e);    }  }  fieldMap[idx]=new LinkedList<FieldObjectMap>();  List<FieldObjectMap> fieldsMap=fieldMap[idx];  for (  String f : fields) {    try {      Field field=inputClass.getField(f);      Class c;      if (field.getType().isPrimitive()) {        c=ClassUtils.primitiveToWrapper(field.getType());      } else {        c=field.getType();      }      FieldObjectMap fm=new FieldObjectMap();      fm.get=PojoUtils.createGetter(inputClass,f,c);      fm.set=PojoUtils.createSetter(outputClass,f,c);      fieldsMap.add(fm);    } catch (    Throwable e) {      throw new RuntimeException("Failed to populate gettter for field: " + f,e);    }  }}  }
class C{  public StatusBar(){  super();  super.setPreferredSize(new Dimension(100,16));  setMessage("Ready");}  }
class C{  public boolean inSensitiveArea(Point2D pt){  if (shape == null)   return false;  return shape.contains(pt);}  }
class C{  public ShutdownThread shutdown() throws Exception {  ShutdownThread shutdownThread=new ShutdownThread(this,getID());  shutdownThread.start();  return (shutdownThread);}  }
class C{  public void interruptLatch(final CountDownLatch latch){  if (m_releaseLatchOnInterrupt) {    removeShutdownLatch(latch);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private String parsePrefix(String item,String prefix){  String[] split=item.split(" ",2);  if (split.length == 2) {    prepare(split[1]);  }  return split[0].substring(prefix.length());}  }
class C{  @Override public boolean clonePropertiesOf(PLIObject object){  if (super.clonePropertiesOf(object)) {    if (object instanceof PLISceneElement) {      PLISceneElement element=(PLISceneElement)object;      this.setIdentifier(element.getIdentifier());      this.setCollisionEnabled(element.isCollisionEnabled());      this.setRecycledByParent(element.isRecycledByParent());synchronized (mTextures) {        element.getTextures(mTextures);      }    }    return true;  }  return false;}  }
class C{  public Boolean isValidating(){  return validating;}  }
class C{  public DSAPublicKey(byte[] encoded) throws InvalidKeyException {  decode(encoded);}  }
class C{  protected void buildSourcePath(ArrayList<String> pathList){  buildClassPath(pathList);}  }
class C{  public static BufferedReader newReader(URL url,String charset) throws MalformedURLException, IOException {  return new BufferedReader(new InputStreamReader(configuredInputStream(null,url),charset));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.GENERATOR_ENTRY__ELEMENT_REF:    return elementRef != null;case SGenPackage.GENERATOR_ENTRY__FEATURES:  return features != null && !features.isEmpty();case SGenPackage.GENERATOR_ENTRY__CONTENT_TYPE:return CONTENT_TYPE_EDEFAULT == null ? contentType != null : !CONTENT_TYPE_EDEFAULT.equals(contentType);}return super.eIsSet(featureID);}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public SessionThread(Process process,ExecutionThread parent){  super(process,parent);  initMessageQueues();  assert (parent != null);  state=parent.state().clone();  parent.scopeStack.forEach(null);}  }
class C{  protected void createMocksForTheConstructor(){  fakeCursor=PowerMock.createStrictMock(BJETxCursor.class);  EasyMock.expect(fakeCursor.cursor()).andReturn(realCursor);}  }
class C{  @Override protected void writeClosingFill(Shape s){  writeln(" f");  if (!(getPaint() instanceof Color)) {    super.writeClosingFill(s);  }}  }
class C{  protected Name slowParseFieldName() throws IOException, JsonParseException {  if (_inputPtr >= _inputEnd) {    if (!loadMore()) {      _reportInvalidEOF(": was expecting closing '\"' for name");    }  }  int i=_inputBuffer[_inputPtr++] & 0xFF;  if (i == INT_QUOTE) {    return BytesToNameCanonicalizer.getEmptyName();  }  return parseEscapedFieldName(_quadBuffer,0,0,i,0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void verifyLogging(){  String level=getPropertyValue(GeneralPropertySet.LOGGING);  try {    LoggingLevel.toLevel(level);  } catch (  IllegalArgumentException e) {    throw new ContainerException("Invalid logging level [" + level + "]. Valid levels are {\"low\", \"medium\", "+ "\"high\"}");  }}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.264 -0400",hash_original_method="E20ADCFD9D589330A90956929B5E43AA",hash_generated_method="85EAB1802F1E02890842596320011877") public E peek(){  if (isEmpty()) {    return null;  }  return elements[0];}  }
class C{  public ActionEvent(Object source,Type type){  this.source=source;  this.trigger=type;}  }
class C{  public void startRegistration() throws Exception {  RegistrationRequest req=invokeRegistration();  logger.info(" : RegistrationRequest obtained :");  logger.info(" : Reg request : " + gson.toJson(req,RegistrationRequest.class));  RegistrationRequestProcessing requestProcessor=new RegistrationRequestProcessing();  RegistrationResponse resp=requestProcessor.processRequest(req);  logger.info(" : RegistrationResponse created : ");  logger.info(" : Reg response : " + gson.toJson(resp,RegistrationResponse.class));  serverSideRegResponseProcessing(resp);  logger.info(" : RegistrationResponse sent : ");  logger.info(" : Reg response : " + gson.toJson(resp,RegistrationResponse.class));}  }
class C{  protected void updateLayoutCacheExpandedNodes(){  if (treeModel != null && treeModel.getRoot() != null)   updateExpandedDescendants(new TreePath(treeModel.getRoot()));}  }
class C{  public SelectOneHideNoSelectionITCase(String name){  super(name);}  }
class C{  public boolean sameLength(FloatMatrix a){  return length == a.length;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  StackMapTableEntry(final DataInput input,final ConstantPool constant_pool) throws IOException {  this(input.readByte() & 0xFF,-1,null,null,constant_pool);  if (frame_type >= Const.SAME_FRAME && frame_type <= Const.SAME_FRAME_MAX) {    byte_code_offset=frame_type - Const.SAME_FRAME;  } else   if (frame_type >= Const.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Const.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {    byte_code_offset=frame_type - Const.SAME_LOCALS_1_STACK_ITEM_FRAME;    types_of_stack_items=new StackMapType[1];    types_of_stack_items[0]=new StackMapType(input,constant_pool);  } else   if (frame_type == Const.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {    byte_code_offset=input.readShort();    types_of_stack_items=new StackMapType[1];    types_of_stack_items[0]=new StackMapType(input,constant_pool);  } else   if (frame_type >= Const.CHOP_FRAME && frame_type <= Const.CHOP_FRAME_MAX) {    byte_code_offset=input.readShort();  } else   if (frame_type == Const.SAME_FRAME_EXTENDED) {    byte_code_offset=input.readShort();  } else   if (frame_type >= Const.APPEND_FRAME && frame_type <= Const.APPEND_FRAME_MAX) {    byte_code_offset=input.readShort();    int number_of_locals=frame_type - 251;    types_of_locals=new StackMapType[number_of_locals];    for (int i=0; i < number_of_locals; i++) {      types_of_locals[i]=new StackMapType(input,constant_pool);    }  } else   if (frame_type == Const.FULL_FRAME) {    byte_code_offset=input.readShort();    int number_of_locals=input.readShort();    types_of_locals=new StackMapType[number_of_locals];    for (int i=0; i < number_of_locals; i++) {      types_of_locals[i]=new StackMapType(input,constant_pool);    }    int number_of_stack_items=input.readShort();    types_of_stack_items=new StackMapType[number_of_stack_items];    for (int i=0; i < number_of_stack_items; i++) {      types_of_stack_items[i]=new StackMapType(input,constant_pool);    }  } else {    throw new ClassFormatException("Invalid frame type found while parsing stack map table: " + frame_type);  }}  }
class C{  public boolean isDownloadable(){  if (!isActive())   return false;  Timestamp guarantee=getGuaranteeDate();  if (guarantee == null)   return false;  guarantee=TimeUtil.getDay(guarantee);  Timestamp now=TimeUtil.getDay(System.currentTimeMillis());  if (!now.after(guarantee)) {    getProduct();    return m_product != null && m_product.hasDownloads();  }  return false;}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {}  }
class C{  public TextEditor deleteAll(String pattern){  return replaceAll(pattern,"");}  }
class C{  private void continueAttemptToSplit(ActiveLearningNode activeLearningNode,FoundNode foundNode){  AttributeSplitSuggestion bestSuggestion=activeLearningNode.getDistributedBestSuggestion();  AttributeSplitSuggestion secondBestSuggestion=activeLearningNode.getDistributedSecondBestSuggestion();  double[] preSplitDist=activeLearningNode.getObservedClassDistribution();  AttributeSplitSuggestion nullSplit=new AttributeSplitSuggestion(null,new double[0][],this.splitCriterion.getMeritOfSplit(preSplitDist,new double[][]{preSplitDist}));  if ((bestSuggestion == null) || (nullSplit.compareTo(bestSuggestion) > 0)) {    secondBestSuggestion=bestSuggestion;    bestSuggestion=nullSplit;  } else {    if ((secondBestSuggestion == null) || (nullSplit.compareTo(secondBestSuggestion) > 0)) {      secondBestSuggestion=nullSplit;    }  }  boolean shouldSplit=false;  if (secondBestSuggestion == null) {    shouldSplit=(bestSuggestion != null);  } else {    double hoeffdingBound=computeHoeffdingBound(this.splitCriterion.getRangeOfMerit(activeLearningNode.getObservedClassDistribution()),this.splitConfidence,activeLearningNode.getWeightSeen());    if ((bestSuggestion.merit - secondBestSuggestion.merit > hoeffdingBound) || (hoeffdingBound < tieThreshold)) {      shouldSplit=true;    }  }  SplitNode parent=foundNode.getParent();  int parentBranch=foundNode.getParentBranch();  if (shouldSplit) {    if (bestSuggestion.splitTest != null) {      SplitNode newSplit=new SplitNode(bestSuggestion.splitTest,activeLearningNode.getObservedClassDistribution());      for (int i=0; i < bestSuggestion.numSplits(); i++) {        Node newChild=newLearningNode(bestSuggestion.resultingClassDistributionFromSplit(i),this.parallelismHint);        newSplit.setChild(i,newChild);      }      this.activeLeafNodeCount--;      this.decisionNodeCount++;      this.activeLeafNodeCount+=bestSuggestion.numSplits();      if (parent == null) {        this.treeRoot=newSplit;      } else {        parent.setChild(parentBranch,newSplit);      }    }  }  activeLearningNode.endSplitting();  activeLearningNode.setWeightSeenAtLastSplitEvaluation(activeLearningNode.getWeightSeen());}  }
class C{  public SnmpGauge(int v) throws IllegalArgumentException {  super(v);}  }
class C{  public void removePerspective(String name){  Perspective perspective=model.getPerspective(name);  if (perspective != null) {    removePerspective(perspective);  }}  }
class C{  public QuickOpenIntIntHashMap(){  this(defaultCapacity);}  }
class C{  protected void drawCubic(Canvas c,LineDataSet dataSet,List<Entry> entries){  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());  Entry entryFrom=dataSet.getEntryForXIndex(mMinX);  Entry entryTo=dataSet.getEntryForXIndex(mMaxX);  int minx=Math.max(dataSet.getEntryPosition(entryFrom),0);  int maxx=Math.min(dataSet.getEntryPosition(entryTo) + 1,entries.size());  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  float intensity=dataSet.getCubicIntensity();  cubicPath.reset();  int size=(int)Math.ceil((maxx - minx) * phaseX + minx);  if (size - minx >= 2) {    float prevDx=0f;    float prevDy=0f;    float curDx=0f;    float curDy=0f;    Entry prevPrev=entries.get(minx);    Entry prev=entries.get(minx);    Entry cur=entries.get(minx);    Entry next=entries.get(minx + 1);    cubicPath.moveTo(cur.getXIndex(),cur.getVal() * phaseY);    prevDx=(cur.getXIndex() - prev.getXIndex()) * intensity;    prevDy=(cur.getVal() - prev.getVal()) * intensity;    curDx=(next.getXIndex() - cur.getXIndex()) * intensity;    curDy=(next.getVal() - cur.getVal()) * intensity;    cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    for (int j=minx + 1, count=Math.min(size,entries.size() - 1); j < count; j++) {      prevPrev=entries.get(j == 1 ? 0 : j - 2);      prev=entries.get(j - 1);      cur=entries.get(j);      next=entries.get(j + 1);      prevDx=(cur.getXIndex() - prevPrev.getXIndex()) * intensity;      prevDy=(cur.getVal() - prevPrev.getVal()) * intensity;      curDx=(next.getXIndex() - prev.getXIndex()) * intensity;      curDy=(next.getVal() - prev.getVal()) * intensity;      cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    }    if (size > entries.size() - 1) {      prevPrev=entries.get((entries.size() >= 3) ? entries.size() - 3 : entries.size() - 2);      prev=entries.get(entries.size() - 2);      cur=entries.get(entries.size() - 1);      next=cur;      prevDx=(cur.getXIndex() - prevPrev.getXIndex()) * intensity;      prevDy=(cur.getVal() - prevPrev.getVal()) * intensity;      curDx=(next.getXIndex() - prev.getXIndex()) * intensity;      curDy=(next.getVal() - prev.getVal()) * intensity;      cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    }  }  if (dataSet.isDrawFilledEnabled()) {    cubicFillPath.reset();    cubicFillPath.addPath(cubicPath);    drawCubicFill(mBitmapCanvas,dataSet,cubicFillPath,trans,entryFrom.getXIndex(),entryFrom.getXIndex() + size);  }  mRenderPaint.setColor(dataSet.getColor());  mRenderPaint.setStyle(Paint.Style.STROKE);  trans.pathValueToPixel(cubicPath);  mBitmapCanvas.drawPath(cubicPath,mRenderPaint);  mRenderPaint.setPathEffect(null);}  }
class C{  protected <T>T attempt(@NotNull final ThrowingSupplier<T,TimeoutException> s){  ConnectionDroppedException t=null;  TimeoutException te=null;  for (int i=1; i <= 20; i++) {    try {      return s.get();    } catch (    ConnectionDroppedException e) {      t=e;    }catch (    TimeoutException e) {      te=e;    }    Jvm.pause(i * 25);  }  if (t != null)   throw t;  throw new ConnectionDroppedException(te);}  }
class C{  public static IdRangeChangeSource forItems(long start,long stop,long batchSize){  return new IdRangeChangeSource("Q%s",start,stop,batchSize);}  }
class C{  SensorGroup(String name){  this.name=name;  RouteManager rm=InstanceManager.getDefault(jmri.RouteManager.class);  String group=name.toUpperCase();  List<String> l=rm.getSystemNameList();  String prefix=(namePrefix + group + nameDivider).toUpperCase();  sensorList=new ArrayList<String>();  for (int i=0; i < l.size(); i++) {    String routeName=l.get(i);    if (routeName.startsWith(prefix)) {      String sensor=routeName.substring(prefix.length());      sensorList.add(sensor);    }  }}  }
class C{  public void userPresence(String user,String action){  boolean isOnline=action.equals("join") || action.equals("state-change");  if (!isOnline && this.onlineNow.contains(user))   this.onlineNow.remove(user); else   if (isOnline && !this.onlineNow.contains(user))   this.onlineNow.add(user);  notifyDataSetChanged();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_LEVEL___TRACE_LEVEL_1:    setTrace_level_1(TRACE_LEVEL_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public double[] distributionForInstance(Instance inst) throws Exception {  double[] result=(inst.classAttribute().isNominal()) ? new double[2] : new double[1];  if (m_replaceMissing != null) {    m_replaceMissing.input(inst);    inst=m_replaceMissing.output();  }  if (m_nominalToBinary != null) {    m_nominalToBinary.input(inst);    inst=m_nominalToBinary.output();  }  if (m_normalize != null) {    m_normalize.input(inst);    inst=m_normalize.output();  }  double wx=dotProd(inst,m_weights,inst.classIndex());  double z=(wx + m_weights[m_weights.length - 1]);  if (inst.classAttribute().isNumeric()) {    result[0]=z;    return result;  }  if (z <= 0) {    if (m_loss == LOGLOSS) {      result[0]=1.0 / (1.0 + Math.exp(z));      result[1]=1.0 - result[0];    } else {      result[0]=1;    }  } else {    if (m_loss == LOGLOSS) {      result[1]=1.0 / (1.0 + Math.exp(-z));      result[0]=1.0 - result[1];    } else {      result[1]=1;    }  }  return result;}  }
class C{  public void broadcastShieldFrame(ShieldFrame frame,boolean waitIfInACallback){  broadcastShieldFrame(frame,waitIfInACallback,null);}  }
class C{  public PeekingIterator(Iterator<Integer> iterator){  this.iter=iterator;  if (iterator.hasNext()) {    next=iterator.next();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.CHECK__CONDITION:    return getCondition();case SexecPackage.CHECK__REFS:  return getRefs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static <E>boolean removeElement(List<? extends E> list,Predicate<E> predicate){  for (Iterator<? extends E> iter=list.iterator(); iter.hasNext(); ) {    E obj=iter.next();    if (predicate.test(obj)) {      iter.remove();      return true;    }  }  return false;}  }
class C{  public GT_Cover_Default(){  super();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public WebField(MobileSessionCtx wsc,String columnName,String name,String description,int displayType,int fieldLength,int displayLength,boolean longField,boolean readOnly,boolean mandatory,boolean error,boolean hasDependents,boolean hasCallout,int AD_Process_ID,int AD_Window_ID,int AD_Record_ID,int AD_Table_ID,int fieldNumber,Object defaultvalue,String callOut,GridTab mTab,GridField mField,MRole mRole){  super();  m_wsc=wsc;  m_columnName=columnName;  if (name == null || name.length() == 0)   m_name=columnName; else   m_name=name;  if (description != null && description.length() > 0)   m_description=description;  m_defaultObject=defaultvalue;  m_displayType=displayType;  m_processID=AD_Process_ID;  m_windowID=AD_Window_ID;  m_tableID=AD_Table_ID;  m_recordID=AD_Record_ID;  m_fieldLength=fieldLength;  m_displayLength=displayLength;  if (m_displayLength <= 22)   m_displayLength=22; else   m_displayLength=44;  m_longField=longField;  m_readOnly=readOnly;  m_mandatory=mandatory;  m_error=error;  m_hasDependents=hasDependents;  m_hasCallout=hasCallout;  m_callOut=callOut;  m_fieldNumber=fieldNumber;  m_Tab=mTab;  m_Field=mField;  m_Role=mRole;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:35.923 -0400",hash_original_method="86830002AFDFBC8C0790A0C80E395F68",hash_generated_method="5BBC0ADA5FC6500FBA53DE1267B5D0C6") public boolean hideSubMenus(){  if (mActionButtonPopup != null) {    mActionButtonPopup.dismiss();    return true;  }  return false;}  }
class C{  private static boolean sameScript(int scriptOne,int scriptTwo){  return scriptOne == scriptTwo || scriptOne <= Script.INHERITED || scriptTwo <= Script.INHERITED;}  }
class C{  public Email bcc(String... bcc){  if (bcc == null)   throw new IllegalArgumentException("bc == null");  this.bccList.addAll(Arrays.asList(bcc));  return this;}  }
class C{  public ObjectNode retain(String... fieldNames){  return retain(Arrays.asList(fieldNames));}  }
class C{  private FileStatus(String statusString){  this.statusString=statusString;}  }
class C{  public static EncodedGraph encodeSingleGraph(StructuredGraph graph,Architecture architecture){  GraphEncoder encoder=new GraphEncoder(architecture);  encoder.prepare(graph);  encoder.finishPrepare();  long startOffset=encoder.encode(graph);  return new EncodedGraph(encoder.getEncoding(),startOffset,encoder.getObjects(),encoder.getNodeClasses(),graph.getAssumptions(),graph.getInlinedMethods());}  }
class C{  @Override public String toString(){  StringBuilder b=new StringBuilder();  b.append('{');  for (int i=nextSetBit(0); i >= 0; i=nextSetBit(i + 1)) {    int endOfRun=nextClearBit(i);    if (endOfRun - i > 1) {      if (b.length() != 1) {        b.append(", ");      }      b.append(i).append("...").append(endOfRun - 1);      i=endOfRun;    } else {      do {        if (b.length() != 1) {          b.append(", ");        }        b.append(i);      } while (++i < endOfRun);    }  }  b.append('}');  return b.toString();}  }
class C{  public static boolean isFileTypeSupported(int fileType,Sequence sequence){  List providers=getMidiFileWriters();  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,sequence)) {      return true;    }  }  return false;}  }
class C{  public static EncryptionAlgorithm forOID(String oid){  EncryptionAlgorithm algorithm=Registry.OID_ALGORITHMS.get(oid);  if (algorithm == null) {    throw new RuntimeException("Unsupported algorithm: " + oid);  }  return algorithm;}  }
class C{  public static Iterator iterator(){  return iterator(JdbcTypeCategoryEnum.class);}  }
class C{  public SearchRequest extraSource(String source){  this.extraSource=new BytesArray(source);  return this;}  }
class C{  private void ensureOpen() throws IOException {  if (str == null)   throw new IOException("Stream closed");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (generatorId: ");  result.append(generatorId);  result.append(')');  return result.toString();}  }
class C{  private void initFunctionTable(){  m_funcTable=new FunctionTable();}  }
class C{  public static boolean isContactPointEnabled(){  return contactPointEnabled;}  }
class C{  public RandomizedSet(){}  }
class C{  static MetricsManager.Metrics parseSavedMetric(String metricString) throws IllegalArgumentException {  try {    MetricsManager.Emotions emotion;    emotion=MetricsManager.Emotions.valueOf(metricString);    return emotion;  } catch (  IllegalArgumentException emotionParseFailed) {    Log.v(LOG_TAG,"Not an Emotion...");  }  try {    MetricsManager.Expressions expression;    expression=MetricsManager.Expressions.valueOf(metricString);    return expression;  } catch (  IllegalArgumentException expressionParseFailed) {    Log.v(LOG_TAG,"Not an Expression...");  }  try {    MetricsManager.Emojis emoji;    emoji=MetricsManager.Emojis.getEnum(metricString);    return emoji;  } catch (  IllegalArgumentException expressionParseFailed) {    Log.v(LOG_TAG,"Not an Emoji...");  }  throw new IllegalArgumentException("String did not match any known metric");}  }
class C{  protected void EMIT_Unary(Operator operator,Instruction s,Operand result,Operand value){  if (VM.VerifyAssertions)   opt_assert(result.isRegister() || result.isMemory());  if (!result.similar(value)) {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result.copy(),value)));  }  EMIT(MIR_UnaryAcc.mutate(s,operator,result));}  }
class C{  public void close(){  CarbonUtil.closeStreams(dataOutputStream);}  }
class C{  public UserModificationConstraintException(String message,UserModificationConstraintExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public XppReader(final Reader reader,final XmlPullParser parser,final NameCoder nameCoder){  super(nameCoder);  this.parser=parser;  this.reader=reader;  try {    parser.setInput(this.reader);  } catch (  final XmlPullParserException e) {    throw new StreamException(e);  }  moveDown();}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public boolean validate(){  boolean isValid=true;  if (!common.util.StringUtils.isEmpty(year) && !NumberUtils.isNumber(year))   return false;  if (!common.util.StringUtils.isEmpty(month) && !NumberUtils.isNumber(month)) {    return false;  }  if (!common.util.StringUtils.isEmpty(day) && !NumberUtils.isNumber(day))   return false;  if (!common.util.StringUtils.isEmpty(hour) && !NumberUtils.isNumber(hour))   return false;  if (!common.util.StringUtils.isEmpty(minutes) && !NumberUtils.isNumber(minutes))   return false;  if (!common.util.StringUtils.isEmpty(seconds) && !NumberUtils.isNumber(seconds))   return false;  try {    if (DateQualifierHelper.CALIFICADOR_TAL_Y_COMO_SE_HA_ESCRITO.equals(qualifier))     return true;    if (CustomDateFormat.DATE_FORMAT_AAAA.equals(format)) {      if (StringUtils.isNotBlank(year)) {        if (DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))         return false;        DateFormat df=(DateFormat)CustomDateFormat.SDF_YYYY.clone();        df.setLenient(false);        df.parse(year);      } else       if (StringUtils.isNotBlank(qualifier) && !DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))       isValid=false;    } else     if ((CustomDateFormat.DATE_FORMAT_MMAAAA.equals(format)) || (CustomDateFormat.DATE_FORMAT_AAAAMM.equals(format))) {      if (StringUtils.isNotBlank(year) || StringUtils.isNotBlank(month)) {        if (DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))         return false;        DateFormat df=(DateFormat)CustomDateFormat.SDF_YYYYMM.clone();        df.setLenient(false);        df.parse(year + "-" + month);      } else       if (StringUtils.isNotBlank(qualifier) && !DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))       isValid=false;    } else     if (CustomDateFormat.DATE_FORMAT_DDMMAAAA.equals(format)) {      if (StringUtils.isNotBlank(year) || StringUtils.isNotBlank(month) || StringUtils.isNotBlank(day)) {        if (DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))         return false;        DateFormat df=(DateFormat)CustomDateFormat.SDF_YYYYMMDD.clone();        df.setLenient(false);        df.parse(year + "-" + month+ "-"+ day);      } else       if (StringUtils.isNotBlank(qualifier) && !DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))       isValid=false;    } else     if (CustomDateFormat.DATE_FORMAT_AAAAMMDD.equals(format)) {      if (StringUtils.isNotBlank(year) || StringUtils.isNotBlank(month) || StringUtils.isNotBlank(day)) {        if (DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))         return false;        DateFormat df=(DateFormat)CustomDateFormat.SDF_YYYYMMDD.clone();        df.setLenient(false);        df.parse(year + "-" + month+ "-"+ day);      } else       if (StringUtils.isNotBlank(qualifier) && !DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))       isValid=false;    } else     if (CustomDateFormat.DATE_FORMAT_DDMMAAAA_HHMMSS.equals(format)) {      if (StringUtils.isNotBlank(year) || StringUtils.isNotBlank(month) || StringUtils.isNotBlank(day)|| StringUtils.isNotBlank(hour)|| StringUtils.isNotBlank(minutes)|| StringUtils.isNotBlank(seconds)) {        if (DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))         return false;        DateFormat df=(DateFormat)CustomDateFormat.SDF_YYYYMMDD_HHMMSS.clone();        df.setLenient(false);        df.parse(year + "-" + month+ "-"+ day+ " "+ hour+ SEPARADOR_HORA+ minutes+ SEPARADOR_HORA+ seconds);      } else       if (StringUtils.isNotBlank(qualifier) && !DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))       isValid=false;    } else     if (CustomDateFormat.DATE_FORMAT_AAAAMMDD_HHMMSS.equals(format)) {      if (StringUtils.isNotBlank(year) || StringUtils.isNotBlank(month) || StringUtils.isNotBlank(day)|| StringUtils.isNotBlank(hour)|| StringUtils.isNotBlank(minutes)|| StringUtils.isNotBlank(seconds)) {        if (DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))         return false;        DateFormat df=(DateFormat)CustomDateFormat.SDF_YYYYMMDD_HHMMSS.clone();        df.setLenient(false);        df.parse(year + "-" + month+ "-"+ day+ " "+ hour+ SEPARADOR_HORA+ minutes+ SEPARADOR_HORA+ seconds);      } else       if (StringUtils.isNotBlank(qualifier) && !DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))       isValid=false;    } else     if (CustomDateFormat.DATE_FORMAT_S.equals(format)) {      if (StringUtils.isNotBlank(century)) {        if (DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))         return false;        if (!StringUtils.isEmpty(century)) {          RomanNumeral.toInt(century);        }      } else       if (StringUtils.isNotBlank(qualifier) && !DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))       isValid=false;    } else     if (StringUtils.isNotBlank(qualifier) && !DateQualifierHelper.CALIFICADOR_SIN_FECHA.equals(qualifier))     isValid=false;  } catch (  Exception e) {    isValid=false;  }  return isValid;}  }
class C{  @Override public void fillAssignedKeys(Set<String> keys){  keys.add(_keyColumn.name());}  }
class C{  private int parseContentLength(final byte[] b,final int off) throws ParseException {  contentLength_=PrimitivesParser.parseLong(b,off);  if (contentLength_ < 0) {    throw new BadCiphertextException("Invalid content length in ciphertext");  }  return Long.SIZE / Byte.SIZE;}  }
class C{  @Override public LR1State goTo(Symbol symbol){  HashSet<LR1Item> ret=new HashSet<LR1Item>();  for (  LR1Item item : items) {    if (item.getNextSymbol() == symbol) {      ret.add(item.shift());    }  }  return new LR1State(ret);}  }
class C{  public void update(){  if (lastTime != -1L) {    long delta=System.nanoTime() - lastTime;    rollingAverage.addValue(delta);  }  lastTime=System.nanoTime();}  }
class C{  protected DropTargetContext createDropTargetContext(){  return new DropTargetContext(this);}  }
class C{  public font addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void removeFirst(){  if (hlist.size() != 0)   hlist.remove(0);}  }
class C{  public void update(final Node node,final NodeStatus status){  if (null == node) {    throw new NullPointerException("node cannot be null");  }  for (  final Map.Entry<NodeStatus,Set<Node>> entry : this.statusNodesMap.entrySet()) {    entry.getValue().remove(node);  }  final Set<Node> nodes=this.statusNodesMap.getOrDefault(status,null);  if (null != nodes) {    this.statusNodesMap.get(status).add(node);  }  if (!this.isPruneCandidate(node)) {    this.pruneCandidates.remove(node);  }}  }
class C{  protected AnalyticMeasurementDistribution(double actualValue,double pValue){  super(actualValue,pValue);}  }
class C{  public static double distance(final double[] src,final double[] tar){  double x1=src[0];  double x2=tar[0];  double y1=src[1];  double y2=tar[1];  return (double)Math.sqrt(Math.pow((x1 - x2),2) + Math.pow((y1 - y2),2));}  }
class C{  public void testFormatInfinityDN(){  mFReal=new FormatReal(2,2);  clearStrBuffer();  mStr=mFReal.format(mStrBuff,Float.NEGATIVE_INFINITY).toString();  assertEquals("Should be Infinity","#-Infinity#",mStr);}  }
class C{  public final void testGetReductionPolynomial02(){  assertNull(new ECFieldF2m(2000).getReductionPolynomial());}  }
class C{  public EaseIn(float a,float p){  this.a=a;  this.p=p;}  }
class C{  void initializeLocations(){  locations=new ObjectGrid2D(gridWidth,gridHeight);  for (int i=0; i < gridWidth; i++) {    for (int j=0; j < gridHeight; j++) {      Location l=new Location(i,j);      locations.set(i,j,l);    }  }}  }
class C{  public static List<Property> entityPropertiesWithoutPrimaryKey(Entity entity){  final List<Property> properties=new ArrayList<>(entity.getProperties());  final Iterator<Property> iterator=properties.iterator();  Property property;  while (iterator.hasNext()) {    property=iterator.next();    if (property.isPrimaryKey()) {      iterator.remove();      break;    }  }  return properties;}  }
class C{  public static void showInfo(Context context,int msgId){  showInfo(context,context.getString(msgId));}  }
class C{  public Set keySet(){  if (keySet == null)   keySet=Collections.synchronizedSet(new KeySet(),this);  return keySet;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  String url="/invoices.jsp";  HttpSession session=request.getSession(false);  if (session == null || session.getAttribute(WebInfo.NAME) == null)   url="/login.jsp"; else {    session.removeAttribute(WebSessionCtx.HDR_MESSAGE);    WebInfo info=(WebInfo)session.getAttribute(WebInfo.NAME);    if (info != null)     info.setMessage("");    String msg=streamInvoice(request,response);    if (msg == null || msg.length() == 0)     return;    if (info != null)     info.setMessage(msg);  }  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  boolean hasNext(){  try {    it.hasNext();    return true;  } catch (  ConsumerTimeoutException e) {    return false;  }}  }
class C{  public MailOperationException(String message){  super(message);}  }
class C{  public List<MatchResult> testFindMatches(String source,String pattern,MatchOptions options,boolean filePattern,FileType sourceFileType,String sourceExtension,boolean physicalSourceFile) throws MalformedPatternException, UnsupportedPatternException {  return super.testFindMatches(source,pattern,options,filePattern,sourceFileType,sourceExtension,physicalSourceFile);}  }
class C{  @Override public void ISTORE(int i){  IntegerValue integerExpr=env.topFrame().operandStack.popBv32();  env.topFrame().localsTable.setBv32Local(i,integerExpr);}  }
class C{  public void drawString(AttributedCharacterIterator iterator,int x,int y){  drawString(iterator,(float)x,(float)y);}  }
class C{  public void Gen_populate(android.content.ContentValues values){  gen__Id=values.getAsLong(GEN_FIELD__ID);  gen_name=values.getAsString(GEN_FIELD_NAME);}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  public static String jarResourceFileToString(String resource){  StringWriter stringWriter=new StringWriter();  try {    InputStream is=SchemaUtils.class.getClassLoader().getResourceAsStream(resource);    Preconditions.checkArgument(is != null,resource + " could not be found in the resources.");    IOUtils.copy(is,stringWriter);  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  return stringWriter.toString();}  }
class C{  public OrientationManagerImpl(Activity activity,Handler handler){  mActivity=activity;  mOrientationListener=new MyOrientationEventListener(activity);  mHandler=handler;  mIsDefaultToPortrait=isDefaultToPortrait(activity);}  }
class C{  public GeoShapeMapperBuilder maxLevels(Integer maxLevels){  this.maxLevels=maxLevels;  return this;}  }
class C{  public boolean hasCount(){  return getCount() != null;}  }
class C{  public void addMeta(T meta){  if (meta != null) {    if (mMeta == null) {      mMeta=new ArrayList<>();    }    mMeta.add(meta);  }}  }
class C{  public URI uri(){  return uri;}  }
class C{  @Override public EncodingWriter create(String javaEncoding){  return _writer;}  }
class C{  private boolean doSearch(TestChromosome test,MethodStatement statement,LocalSearchObjective<TestChromosome> objective){  logger.info("Original test: " + test.getTestCase().toCode());  boolean hasImproved=false;  if (!statement.isStatic()) {    logger.info("Replacing callee");    VariableReference callee=statement.getCallee();    List<VariableReference> objects=test.getTestCase().getObjects(callee.getType(),statement.getPosition());    objects.remove(callee);    boolean done=false;    for (    VariableReference replacement : objects) {      statement.setCallee(replacement);      if (objective.hasImproved(test)) {        done=true;        hasImproved=true;        backup(test,statement);        break;      } else {        logger.info("Undoing change");        restore(test,statement);      }    }    if (!done)     statement.setCallee(callee);  }  int numParameter=0;  for (  VariableReference parameter : statement.getParameterReferences()) {    logger.info("Replacing parameter " + numParameter);    statement.replaceParameterReference(new NullReference(test.getTestCase(),parameter.getType()),numParameter);    logger.info("Resulting test: " + test.getTestCase().toCode());    if (!objective.hasImproved(test)) {      logger.info("Undoing change");      restore(test,statement);      statement.replaceParameterReference(parameter,numParameter);      boolean done=false;      List<VariableReference> objects=test.getTestCase().getObjects(parameter.getType(),statement.getPosition());      objects.remove(parameter);      for (      VariableReference replacement : objects) {        statement.replaceParameterReference(replacement,numParameter);        logger.info("Resulting test: " + test.getTestCase().toCode());        if (objective.hasImproved(test)) {          backup(test,statement);          hasImproved=true;          done=true;          break;        } else {          logger.info("Undoing change");          restore(test,statement);        }      }      if (!done)       statement.replaceParameterReference(parameter,numParameter);    } else {      hasImproved=true;    }    numParameter++;  }  return hasImproved;}  }
class C{  public static List<VOPricedRole> toVOPricedProductRoles(List<PricedProductRole> roles,LocalizerFacade facade){  ArrayList<VOPricedRole> result=new ArrayList<VOPricedRole>();  for (  PricedProductRole currentRole : roles) {    VOPricedRole voRole=new VOPricedRole();    updateValueObject(voRole,currentRole);    voRole.setPricePerUser(currentRole.getPricePerUser());    voRole.setRole(RoleAssembler.toVORoleDefinition(currentRole.getRoleDefinition(),facade));    result.add(voRole);  }  return result;}  }
class C{  public boolean isAutoLock(){  Object oo=get_Value(COLUMNNAME_AutoLock);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void clear(){  m_Streams.clear();  m_Timestamps.clear();  m_Prefixes.clear();  if (getDefault() != null)   add(getDefault());}  }
class C{  public static String[] decodeArray(String encodedArray){  String[] items=encodedArray.split("_\\.");  ArrayList<String> list=new ArrayList<String>();  for (int i=0; i < items.length; i++) {    String item=items[i];    item=gsub("__","_",item);    if (!item.equals("")) {      list.add(item);    }  }  return list.toArray(new String[list.size()]);}  }
class C{  synchronized boolean checkForExpiration(){  if (this.lessee != null && this.leaseId > -1) {    if (this.leaseExpireTime == Long.MAX_VALUE)     return false;    long currentTime=getCurrentTime();    if (currentTime > this.leaseExpireTime) {      final RemoteThread rThread=this.lesseeThread;      this.lessee=null;      this.leaseId=-1;      this.lesseeThread=null;      this.leaseExpireTime=-1;      if (logger.isTraceEnabled(LogMarker.DLS)) {        logger.trace(LogMarker.DLS,"[checkForExpiration] Expired token at {}: {}",currentTime,toString(true));      }      this.grantor.postReleaseLock(rThread,this.lockName);      return true;    }  }  return false;}  }
class C{  @Override public final double hackcofm(){  return mass;}  }
class C{  public void preclose(){  preclosed=true;}  }
class C{  @DSSource({DSSourceKind.NFC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:52.196 -0500",hash_original_method="3FF4E80952B14CA972EE064B02088076",hash_generated_method="7379EDC1F9BB3C30C3B32834E48C5384") @Override public NdefMessage createMessage(){  NfcAdapter.CreateNdefMessageCallback callback=null;synchronized (NfcActivityManager.this) {    for (    NfcActivityState state : mNfcState.values()) {      if (state.resumed) {        callback=state.ndefMessageCallback;      }    }  }  if (callback != null) {    return callback.createNdefMessage(mDefaultEvent);  }  return null;}  }
class C{  public static Object newInstance(File file,Class<?> template){  Object result;  Object interpreter;  Class<?> cls;  result=null;  if (!isPresent()) {    return result;  }  interpreter=newClassLoader();  if (interpreter == null) {    return result;  }  try {    cls=(Class<?>)invoke(interpreter,"parseClass",new Class[]{File.class},new Object[]{file});    result=cls.newInstance();  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  public final byte[] wrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  if (mode != WRAP_MODE) {    throw new IllegalStateException();  }  return spiImpl.engineWrap(key);}  }
class C{  public LoginFailedException(String msg){  super(msg);}  }
class C{  public PSPCommunicationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public long delay(){  return head.delay;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public final AC grow(float w,int... indexes){  Float gw=new Float(w);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setGrow(gw);  }  return this;}  }
class C{  public UsedNodeAndWayFilter(IdTrackerType idTrackerType){  allNodes=new SimpleObjectStore<NodeContainer>(new SingleClassObjectSerializationFactory(NodeContainer.class),"afnd",true);  allWays=new SimpleObjectStore<WayContainer>(new SingleClassObjectSerializationFactory(WayContainer.class),"afwy",true);  allRelations=new SimpleObjectStore<RelationContainer>(new SingleClassObjectSerializationFactory(RelationContainer.class),"afrl",true);  requiredNodes=IdTrackerFactory.createInstance(idTrackerType);  requiredWays=IdTrackerFactory.createInstance(idTrackerType);}  }
class C{  public Boolean isDirectGroupsSearchEnabled(){  return directGroupsSearchEnabled;}  }
class C{  @Override public byte[] encode(BufferedImage bufferedImage) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  encode(bufferedImage,outputStream);  return outputStream.toByteArray();}  }
class C{  public void addQuestion(DNSQuestion rec) throws IOException {  MessageOutputStream record=new MessageOutputStream(512,this);  record.writeQuestion(rec);  byte[] byteArray=record.toByteArray();  record.close();  if (byteArray.length < this.availableSpace()) {    _questions.add(rec);    _questionsBytes.write(byteArray,0,byteArray.length);  } else {    throw new IOException("message full");  }}  }
class C{  public void addPutstatic(String classname,String fieldName,String desc){  addPutstatic0(null,classname,fieldName,desc);}  }
class C{  public ProxyAddress(String host,int port){  if (host == null) {    throw new NullPointerException();  }  this.host=host;  this.port=port;}  }
class C{  private ComputeState validateComputeName(String awsId,String vmName) throws Throwable {  if (this.isAwsClientMock) {    return null;  }  ComputeState computeState=getComputeByAWSId(this.host,awsId);  String tagNameValue=computeState.name;  assertNotNull("'displayName' property should be present",tagNameValue);  assertEquals(vmName,tagNameValue);  return computeState;}  }
class C{  public AddReferencesResponse AddReferences(AddReferencesRequest req) throws ServiceFaultException, ServiceResultException {  return (AddReferencesResponse)channel.serviceRequest(req);}  }
class C{  public int findInsertionPoint(E o){  return findInsertionPoint(o,0,size() - 1);}  }
class C{  public boolean hasChildNodes(){  return (null != m_firstChild);}  }
class C{  public static void loadDebuggers(final AbstractSQLProvider provider,final DebuggerTemplateManager manager) throws CouldntLoadDataException {  final CConnection connection=provider.getConnection();  final String query="SELECT * FROM " + CTableNames.DEBUGGERS_TABLE;  try (ResultSet resultSet=connection.executeQuery(query,true)){    while (resultSet.next()) {      final DebuggerTemplate debugger=new DebuggerTemplate(resultSet.getInt("id"),PostgreSQLHelpers.readString(resultSet,"name"),PostgreSQLHelpers.readString(resultSet,"host"),resultSet.getInt("port"),provider);      manager.addDebugger(debugger);    }  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  public static void closeOnEscape(final JDialog dialog){  closeOnEscape(dialog,dialog.getRootPane());}  }
class C{  private View findFocusableViewInMyBounds(final boolean leftFocus,final int left,View preferredFocusable){  final int fadingEdgeLength=getHorizontalFadingEdgeLength() / 2;  final int leftWithoutFadingEdge=left + fadingEdgeLength;  final int rightWithoutFadingEdge=left + getWidth() - fadingEdgeLength;  if ((preferredFocusable != null) && (preferredFocusable.getLeft() < rightWithoutFadingEdge) && (preferredFocusable.getRight() > leftWithoutFadingEdge)) {    return preferredFocusable;  }  return findFocusableViewInBounds(leftFocus,leftWithoutFadingEdge,rightWithoutFadingEdge);}  }
class C{  public static Object invokeStatic(Class clazz,String methodName,Class type,Object value) throws NoSuchMethodException {  return invokeStatic(clazz,methodName,new Class[]{type},new Object[]{value});}  }
class C{  @VisibleForTesting void writeTime(long time,StringBuilder builder,int resId,String lineBreak){  builder.append(context.getString(resId,StringUtils.formatElapsedTime(time)));  builder.append(lineBreak);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public BifocalDistortion(){  this(0.1,3);}  }
class C{  public void update() throws Exception {  if (state_ == VMInfoState.ERROR_DURING_ATTACH || state_ == VMInfoState.DETACHED || state_ == VMInfoState.CONNECTION_REFUSED) {    return;  }  if (proxyClient.isDead()) {    state_=VMInfoState.DETACHED;    return;  }  try {    proxyClient.flush();    osBean=proxyClient.getSunOperatingSystemMXBean();    runtimeMXBean=proxyClient.getRuntimeMXBean();    gcMXBeans=proxyClient.getGarbageCollectorMXBeans();    classLoadingMXBean_=proxyClient.getClassLoadingMXBean();    memoryMXBean=proxyClient.getMemoryMXBean();    heapMemoryUsage=memoryMXBean.getHeapMemoryUsage();    nonHeapMemoryUsage=memoryMXBean.getNonHeapMemoryUsage();    threadMXBean=proxyClient.getThreadMXBean();    systemProperties_=runtimeMXBean.getSystemProperties();    vmVersion_=extractShortVer();    osUser_=systemProperties_.get("user.name");    updateInternal();    deadlocksDetected_=threadMXBean.findDeadlockedThreads() != null || threadMXBean.findMonitorDeadlockedThreads() != null;  } catch (  Throwable e) {    Logger.getLogger("jvmtop").log(Level.FINE,"error during update",e);    updateErrorCount_++;    if (updateErrorCount_ > 10) {      state_=VMInfoState.DETACHED;    } else {      state_=VMInfoState.ATTACHED_UPDATE_ERROR;    }  }}  }
class C{  @RequestMapping(value="/businessObjectData/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}" + "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/subPartition2Values/{subPartition2Value}"+ "/subPartition3Values/{subPartition3Value}/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_DELETE) public BusinessObjectData deleteBusinessObjectData(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("subPartition3Value") String subPartition3Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestParam("deleteFiles") Boolean deleteFiles){  return businessObjectDataService.deleteBusinessObjectData(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value,subPartition3Value),businessObjectDataVersion),deleteFiles);}  }
class C{  @Override public void printError(@NotNull String text){  print(text,Style.getVcsConsoleErrorColor());}  }
class C{  public static ImportanceTransferTransaction createImportanceTransfer(){  return new ImportanceTransferTransaction(TimeInstant.ZERO,Utils.generateRandomAccount(),ImportanceTransferMode.Activate,Utils.generateRandomAccount());}  }
class C{  @Override public String rest(){  return document.substring(cursor);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord || is_ValueChanged("BOMType")) {    if (getBOMType().equals(BOMTYPE_CurrentActive)) {      MBOM[] boms=getOfProduct(getCtx(),getM_Product_ID(),get_TrxName(),"BOMType='A' AND BOMUse='" + getBOMUse() + "' AND IsActive='Y'");      if (boms.length == 0 || (boms.length == 1 && boms[0].getM_BOM_ID() == getM_BOM_ID()))       ; else {        log.saveError("Error",Msg.parseTranslation(getCtx(),"Can only have one Current Active BOM for Product BOM Use (" + getBOMType() + ")"));        return false;      }    } else     if (getBOMType().equals(BOMTYPE_Make_To_Order)) {      MBOM[] boms=getOfProduct(getCtx(),getM_Product_ID(),get_TrxName(),"IsActive='Y'");      if (boms.length == 0 || (boms.length == 1 && boms[0].getM_BOM_ID() == getM_BOM_ID()))       ; else {        log.saveError("Error",Msg.parseTranslation(getCtx(),"Can only have single Make-to-Order BOM for Product"));        return false;      }    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:19.399 -0400",hash_original_method="199BE124B4DF8BF7F646F8BC8E1CBEDF",hash_generated_method="3DC067AF5761518CF36DBCCC93012154") public static boolean isNormalized(CharSequence src,Form form){  return NativeNormalizer.isNormalized(src,form);}  }
class C{  protected final void processReleaseObjectResponse(@SuppressWarnings("UnusedParameters") Response response){}  }
class C{  public Shape createFillableFocusRectangle(int x,int y,int w,int h){  final int left=x;  final int top=y;  final int right=x + w;  final int bottom=y + h;  path.reset();  path.moveTo(left,top);  path.lineTo(left,bottom);  path.lineTo(right,bottom);  path.lineTo(right,top);  final float offset=1.4f;  final float left2=left + offset;  final float top2=top + offset;  final float right2=right - offset;  final float bottom2=bottom - offset;  path.lineTo(right2,top);  path.lineTo(right2,bottom2);  path.lineTo(left2,bottom2);  path.lineTo(left2,top2);  path.lineTo(right2,top2);  path.lineTo(right2,top);  path.closePath();  return path;}  }
class C{  private static boolean isHex(final byte c){  return ('0' <= c && c <= '9') || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');}  }
class C{  public void randomNumber() throws IOException {  writeCode(RANDOM_NUMBER);}  }
class C{  public static int test2Snippet(String s){  char[] sChars=s.toCharArray();  int count=0;  for (int i=0; i < alphabet.length && i < sChars.length; i++) {    if (alphabet[i] == sChars[i]) {      count++;    }  }  return count;}  }
class C{  public ProgressReporterLogger(){}  }
class C{  public TeamFilterParser(@NonNull Match match,Element element) throws FilterException {  String teamProperty=element.getText();  if (teamProperty == null) {    throw new MissingFilterPropertyException("team",element);  }  Team team=Team.getTeamById(match,teamProperty);  if (team == null) {    throw new InvalidFilterPropertyException("team",element);  }  this.team=team;}  }
class C{  private void onSearchEnd(int tabIndex,int nbrMessages){  if (mCurrentTabIndex == tabIndex) {    Log.d(LOG_TAG,"## onSearchEnd() nbrMsg=" + nbrMessages);    mWaitWhileSearchInProgressView.setVisibility(View.GONE);    mBackgroundImageView.setVisibility((0 == nbrMessages) && TextUtils.isEmpty(mPatternToSearchEditText.getText().toString()) ? View.VISIBLE : View.GONE);    mNoResultsTxtView.setVisibility(((0 == nbrMessages) && !TextUtils.isEmpty(mPatternToSearchEditText.getText().toString())) ? View.VISIBLE : View.GONE);  }}  }
class C{  @Deprecated protected String createExperimentTree(int indent,String selfPrefix,String childPrefix,Operator markOperator,String mark){  return createProcessTree(indent,selfPrefix,childPrefix,markOperator,mark);}  }
class C{  public final boolean isMostEnclosingThisDeref(ExpressionTree tree){  if (!isAnyEnclosingThisDeref(tree)) {    return false;  }  Element element=TreeUtils.elementFromUse(tree);  TypeElement typeElt=ElementUtils.enclosingClass(element);  ClassTree enclosingClass=getCurrentClassTree(tree);  if (enclosingClass != null && isSubtype(TreeUtils.elementFromDeclaration(enclosingClass),typeElt)) {    return true;  }  return false;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public boolean first() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    boolean b=true;    if (this.rowData.isEmpty()) {      b=false;    } else {      if (this.onInsertRow) {        this.onInsertRow=false;      }      if (this.doingUpdates) {        this.doingUpdates=false;      }      this.rowData.beforeFirst();      this.thisRow=this.rowData.next();    }    setRowPositionValidity();    return b;  }}  }
class C{  Element simulateInternal(final List<Instruction> instructions){  instructions.stream().forEach(null);  return returnElement;}  }
class C{  private void flushMyWriter(){  if (m_writer != null) {    try {      m_writer.flush();    } catch (    IOException ioe) {    }  }}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  private void processHostConfig(Operation operation,State hostState,HostConfig hostConfig){  List<Datastore> datastores=hostConfig.getDatastores();  List<Network> networks=hostConfig.getNetworks();  Set<String> imageDatastoreIds=hostConfig.getImage_datastore_ids();  try {    HostService.State patchState=new HostService.State();    patchState.agentState=AgentState.ACTIVE;    patchState.reportedDatastores=new HashSet<>();    patchState.datastoreServiceLinks=new HashMap<>();    patchState.reportedImageDatastores=new HashSet<>();    patchState.reportedNetworks=new HashSet<>();    if (datastores != null && datastores.size() > 0) {      for (      Datastore datastore : datastores) {        patchState.reportedDatastores.add(datastore.getId());        patchState.datastoreServiceLinks.put(datastore.getName(),DatastoreServiceFactory.getDocumentLink(datastore.getId()));      }    }    if (networks != null && networks.size() > 0) {      for (      Network network : networks) {        if (network.getTypes() != null && network.getTypes().contains(NetworkType.VM)) {          patchState.reportedNetworks.add(network.getId());        }      }    }    if (imageDatastoreIds != null && imageDatastoreIds.size() > 0) {      for (      String datastoreId : imageDatastoreIds) {        patchState.reportedImageDatastores.add(datastoreId);      }    }    if (hostConfig.isSetCpu_count()) {      patchState.cpuCount=hostConfig.getCpu_count();    }    if (hostConfig.isSetEsx_version()) {      patchState.esxVersion=hostConfig.getEsx_version();    }    if (hostConfig.isSetMemory_mb()) {      patchState.memoryMb=hostConfig.getMemory_mb();    }    TaskUtils.sendSelfPatch(this,patchState);  } catch (  Throwable ex) {    ServiceUtils.logWarning(this,"Failed to update " + hostState.hostAddress + " with state: "+ Utils.toJson(true,false,hostState)+ " "+ ex.getMessage());  }  setDatastoreState(operation,datastores,imageDatastoreIds);}  }
class C{  public boolean isFixedOffset(){  return savingsInstantTransitions.length == 0;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void updateShiftKeyState(EditorInfo attr){  if (attr != null && mInputView != null && mQwertyKeyboard == mInputView.getKeyboard()) {    int caps=0;    EditorInfo ei=getCurrentInputEditorInfo();    if (ei != null && ei.inputType != InputType.TYPE_NULL) {      caps=getCurrentInputConnection().getCursorCapsMode(attr.inputType);    }    mInputView.setShifted(mCapsLock || caps != 0);  }}  }
class C{  protected String codenvyFactoryJsonFileLocation(){  return GITLAB_PREFIX + this.username + "/"+ this.repository+ "/raw/"+ this.branch()+ "/.codenvy.json";}  }
class C{  public ProjectTypeResolution estimateProject(String path,String projectTypeId) throws ServerException, NotFoundException, ValueStorageException {  final ProjectTypeDef projectType=projectTypeRegistry.getProjectType(projectTypeId);  if (projectType == null) {    throw new NotFoundException("Project Type to estimate needed.");  }  final FolderEntry baseFolder=asFolder(path);  if (baseFolder == null) {    throw new NotFoundException("Folder not found: " + path);  }  return projectType.resolveSources(baseFolder);}  }
class C{  @SuppressWarnings("unchecked") public void queryForDump(String cfName,String fileName,String[] ids) throws Exception {  final Class clazz=getClassFromCFName(cfName);  if (clazz == null) {    return;  }  initDumpXmlFile(cfName);  for (  String id : ids) {    queryAndPrintRecord(URI.create(id),clazz,DbCliOperation.DUMP);  }  writeToXmlFile(fileName);}  }
class C{  private COperandTreeNode(final int nodeId,final ExpressionType type,final String value,final INaviReplacement replacement,final List<IReference> references,final SQLProvider provider){  expressionType=Preconditions.checkNotNull(type,"IE00182: Type argument can not be null");  expressionValue=Preconditions.checkNotNull(value,"IE00183: Value argument can not be null");  this.references=new ArrayList<IReference>(Preconditions.checkNotNull(references,"IE00184: References argument can not be null"));  this.provider=Preconditions.checkNotNull(provider,"IE00185: Provider argument can not be null");  id=nodeId;  this.replacement=replacement;  if (replacement != null) {    replacement.addListener(listener);    displayStyle=OperandDisplayStyle.OFFSET;  }}  }
class C{  public boolean isNonCapturing(){  return nonCapturing;}  }
class C{  public int readSI32() throws IOException {  synchBits();  int b0=in.read();  if (b0 < 0) {    throw new IOException("Unexpected end of input");  }  int b1=in.read();  if (b1 < 0) {    throw new IOException("Unexpected end of input");  }  int b2=in.read();  if (b2 < 0) {    throw new IOException("Unexpected end of input");  }  byte[] aByte=new byte[1];  int count=in.read(aByte);  if (count < 1) {    throw new IOException("Unexpected end of input");  }  bytesRead+=4;  return (int)((aByte[0] * 256 * 256* 256) + (b2 * 256 * 256) + (b1 * 256)+ b0);}  }
class C{  @Override public void visitIincInsn(int i,int value){  stack.pushInt(i);  stack.pushInt(value);  mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[132],II_V);  super.visitIincInsn(i,value);}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(original,0,combined,0,original.length);  System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  jlrField.set(instance,combined);}  }
class C{  public TodoObject(boolean deleted){  this.deleted=deleted;}  }
class C{  public <T>T run(AwapiCall<T> call,Long clientCustomerId) throws ApiException, RemoteException {  T result=null;  int count=0;  ApiException lastApiException=null;  while (maxAttemptsOnRateExceededError == 0 || count++ < maxAttemptsOnRateExceededError) {    wait(clientCustomerId,lastApiException);    try {      result=call.invoke();      break;    } catch (    ApiException e) {      boolean hasRateExceededError=false;      lastApiException=e;      for (      ApiError error : e.getErrors()) {        if (error instanceof RateExceededError) {          hasRateExceededError=true;          RateExceededError rateExceeded=(RateExceededError)error;          String scope=rateExceeded.getRateScope();          logger.info("Encountered RateExceededError: scope={}, seconds={} on {}.",scope,rateExceeded.getRetryAfterSeconds(),bucket);          Integer retryAfterSeconds=rateExceeded.getRetryAfterSeconds();          if (retryAfterSeconds == null) {            continue;          }          long waitForMills=MILLISECONDS.convert(retryAfterSeconds,SECONDS) + getRandomExtraMillis();          if ("DEVELOPER".equals(scope)) {            updateTokenWaitTime(waitForMills);          } else           if ("ACCOUNT".equals(scope)) {            updateAccountWaitTime(clientCustomerId,waitForMills);          } else {            throw new RuntimeException("Unknown RateExceededError scope: " + scope,e);          }        }      }      if (!hasRateExceededError) {        throw e;      }    }  }  if (result == null) {    throw new RuntimeException("Failed to get a valid result with AdWords API invocation after " + maxAttemptsOnRateExceededError + " attempts on RateExceededError.",lastApiException);  }  return result;}  }
class C{  default T fold(final Monoid<T> monoid){  return monoid.reduce(toStream());}  }
class C{  public static void shuffle(double[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public void check(SnmpGenericMetaServer meta,ObjectName name,SnmpMibSubRequest req,int depth) throws SnmpStatusException {  final Object data=req.getUserData();  for (Enumeration<SnmpVarBind> e=req.getElements(); e.hasMoreElements(); ) {    final SnmpVarBind var=e.nextElement();    try {      final long id=var.oid.getOidArc(depth);      check(meta,name,var.value,id,data);    } catch (    SnmpStatusException x) {      req.registerCheckException(var,x);    }  }}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  public void replaceProperty(String property,String value){  super.put(property,value);}  }
class C{  public int numParameters(){  return 2;}  }
class C{  public String toString(){  return this.encode();}  }
class C{  public Map<String,String> parseProperties(String text,char separator){  Map<String,String> properties=new HashMap<String,String>();  String[] lines=text.split("\\r\\n|\\r|\\n");  for (int i=0; i < lines.length; i++) {    int index=lines[i].indexOf(separator);    if (index > -1) {      String name=StringUtils.trimToNull(StringUtils.substring(lines[i],0,index));      String value=StringUtils.trimToNull(StringUtils.substring(lines[i],index + 1));      if (name != null) {        properties.put(name,value);      }    }  }  return properties;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep createProtectionSystem(ProtectionSystemRequestParam param) throws Exception {  ProtectionSystem system=null;  ProtectionSystem.Type systemType=ProtectionSystem.Type.valueOf(param.getSystemType());  if (!systemType.equals(ProtectionSystem.Type.rp)) {    throw APIException.badRequests.cannotRegisterSystemWithType(systemType.name());  }  system=new ProtectionSystem();  system.setId(URIUtil.createId(ProtectionSystem.class));  system.setSystemType(systemType.name());  system.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());  system.setIpAddress(param.getIpAddress());  system.setPortNumber(param.getPortNumber());  system.setUsername(param.getUserName());  system.setPassword(param.getPassword());  system.setLabel(param.getLabel());  system.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.CREATED.toString());  _dbClient.createObject(system);  auditOp(OperationTypeEnum.CREATE_PROTECTION_SYSTEM,true,null,param.getLabel(),systemType.name(),param.getIpAddress(),param.getPortNumber(),param.getUserName(),system.getId().toString());  startProtectionSystem(system);  ProtectionController controller=getController(RPController.class,ProtectionSystem._RP);  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  String taskId=UUID.randomUUID().toString();  tasks.add(new AsyncTask(ProtectionSystem.class,system.getId(),taskId));  TaskList taskList=discoverProtectionSystems(tasks,controller);  return taskList.getTaskList().listIterator().next();}  }
class C{  public static float computeContrastBetweenColors(int bg,int fg){  float bgR=Color.red(bg) / 255f;  float bgG=Color.green(bg) / 255f;  float bgB=Color.blue(bg) / 255f;  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;  float fgR=Color.red(fg) / 255f;  float fgG=Color.green(fg) / 255f;  float fgB=Color.blue(fg) / 255f;  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));}  }
class C{  public static <T>SerializableComparator<T> reverseNaturalOrder(){  return (SerializableComparator<T>)REVERSE_NATURAL_ORDER_COMPARATOR;}  }
class C{  private List<Entity> listNetwork(Entity e,boolean planned){  List<Entity> novaNetworkMembers=new LinkedList<Entity>();  List<Entity> novaUnits=getMyNovaUnits();  for (  Entity ent : novaUnits) {    if (planned) {      if (ent.getNewRoundNovaNetworkString() == e.getNewRoundNovaNetworkString()) {        novaNetworkMembers.add(ent);      }    } else {      if (ent.getC3NetId() == e.getC3NetId()) {        novaNetworkMembers.add(ent);      }    }  }  return novaNetworkMembers;}  }
class C{  public SVGOMFlowSpanElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  private void initialize(){  if (numberOfObjectives < 2) {    throw new FrameworkException("requires at least two objectives");  }  originalWeights=new NormalBoundaryIntersectionGenerator(numberOfObjectives,divisionsOuter,divisionsInner).generate();  for (int i=0; i < originalWeights.size(); i++) {    originalWeights.set(i,Vector.normalize(originalWeights.get(i)));  }  weights=new ArrayList<double[]>();  for (  double[] weight : originalWeights) {    weights.add(weight.clone());  }  minAngles=new double[weights.size()];  for (int i=0; i < weights.size(); i++) {    minAngles[i]=smallestAngleBetweenWeights(i);  }}  }
class C{  public <K,V>IgniteInternalCache<K,V> atomicsCache(){  return internalCacheEx(CU.ATOMICS_CACHE_NAME);}  }
class C{  public boolean hideSubMenus(){  if (mActionButtonPopup != null) {    mActionButtonPopup.dismiss();    return true;  }  return false;}  }
class C{  @Override protected void onInvite(String targetNick,String sourceNick,String sourceLogin,String sourceHostname,String target){  if (targetNick.equals(this.getNick())) {    Message message=new Message(service.getString(R.string.message_invite_you,sourceNick,target));    server.getConversation(server.getSelectedConversation()).addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),server.getSelectedConversation());    service.sendBroadcast(intent);  } else {    Message message=new Message(service.getString(R.string.message_invite_someone,sourceNick,targetNick,target));    server.getConversation(target).addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);    service.sendBroadcast(intent);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.439 -0400",hash_original_method="0829B6DA23F89F75CF76B7CF84C00C9F",hash_generated_method="E8E4BDB926E9E2747B073CF25256C0EE") @Override public boolean markSupported(){  return markSupported;}  }
class C{  public static void destroyMarker(){  try {    Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME1);    Region region2=cache.getRegion(Region.SEPARATOR + REGION_NAME2);    region1.destroy(MARKER);    region2.destroy(MARKER);    count=0;  } catch (  Exception e) {    e.printStackTrace();    fail("test failed due to exception in destroy ");  }}  }
class C{  public Anonymous_constraintBody_1_ createAnonymous_constraintBody_1_(){  Anonymous_constraintBody_1_Impl anonymous_constraintBody_1_=new Anonymous_constraintBody_1_Impl();  return anonymous_constraintBody_1_;}  }
class C{  public MovableOverlayView(Activity activity,Resources resources,SharedPreferences pref){  super(activity);  mActivity=activity;  mResource=resources;  mPref=pref;  mTintedTitlebar=mPref.getBoolean(Common.KEY_TINTED_TITLEBAR_ENABLED,Common.DEFAULT_TINTED_TITLEBAR_ENABLED);  if (mTintedTitlebar)   mTitleBarColor=getPrimaryDarkColor();  try {    Context module_context=activity.createPackageContext(Common.THIS_MOD_PACKAGE_NAME,Context.CONTEXT_IGNORE_SECURITY);    LayoutInflater.from(module_context).inflate(R.layout.movable_window,this);  } catch (  Exception e) {    XmlResourceParser parser=resources.getLayout(R.layout.movable_window);    activity.getWindow().getLayoutInflater().inflate(parser,this);  }  setId(ID_OVERLAY_VIEW);  setRootNamespace(false);  mDragToMoveBar=findViewByIdHelper(this,R.id.movable_action_bar,"movable_action_bar");  mTriangle=findViewByIdHelper(this,R.id.movable_corner,"movable_corner");  mQuadrant=findViewByIdHelper(this,R.id.movable_quadrant,"movable_quadrant");  mBorderOutline=(ImageView)findViewByIdHelper(this,R.id.movable_background,"movable_background");  if (mBorderOutline != null)   mBorderOutline.bringToFront();  mTitleBarIconType=mPref.getInt(Common.KEY_WINDOW_TITLEBAR_ICON_TYPE,Common.DEFAULT_WINDOW_TITLEBAR_ICONS_TYPE);  boolean titlebar_enabled=true;  boolean titlebar_separator_enabled=mPref.getBoolean(Common.KEY_WINDOW_TITLEBAR_SEPARATOR_ENABLED,Common.DEFAULT_WINDOW_TITLEBAR_SEPARATOR_ENABLED);  mTitleBarHeight=!titlebar_enabled ? 0 : Util.realDp(mPref.getInt(Common.KEY_WINDOW_TITLEBAR_SIZE,Common.DEFAULT_WINDOW_TITLEBAR_SIZE),activity);  mTitleBarDivider=!titlebar_separator_enabled ? 0 : Util.realDp(mPref.getInt(Common.KEY_WINDOW_TITLEBAR_SEPARATOR_SIZE,Common.DEFAULT_WINDOW_TITLEBAR_SEPARATOR_SIZE),activity);  mLiveResizing=mPref.getBoolean(Common.KEY_WINDOW_RESIZING_LIVE_UPDATE,Common.DEFAULT_WINDOW_RESIZING_LIVE_UPDATE);  initCornersViews();  setRootNamespace(true);}  }
class C{  public Mapping topOfFrame(){  iterator=top;  while (stack[iterator] != null)   iterator--;  iterator++;  return next();}  }
class C{  public static boolean isPublic(int accflags){  return (accflags & PUBLIC) != 0;}  }
class C{  public String toString(){  BigInteger b=toBigInteger(1);  return b.toString();}  }
class C{  public boolean visit(InfixExpression node){  return true;}  }
class C{  private static void addCurveTo(Point2D.Double[] bezCurve,BezierPath bezierPath,double errorSquared,boolean connectsCorners){  BezierPath.Node lastNode=bezierPath.get(bezierPath.size() - 1);  double error=Math.sqrt(errorSquared);  if (connectsCorners && Geom.lineContainsPoint(lastNode.x[0],lastNode.y[0],bezCurve[3].x,bezCurve[3].y,bezCurve[1].x,bezCurve[1].y,error) && Geom.lineContainsPoint(lastNode.x[0],lastNode.y[0],bezCurve[3].x,bezCurve[3].y,bezCurve[2].x,bezCurve[2].y,error)) {    bezierPath.lineTo(bezCurve[3].x,bezCurve[3].y);  } else {    bezierPath.curveTo(bezCurve[1].x,bezCurve[1].y,bezCurve[2].x,bezCurve[2].y,bezCurve[3].x,bezCurve[3].y);  }}  }
class C{  public static FrameBlock readTransformMetaDataFromPath(String spec,String metapath,String colDelim) throws IOException {  String colnamesStr=IOUtilFunctions.toString(Connection.class.getResourceAsStream(metapath + "/" + TfUtils.TXMTD_COLNAMES));  String[] colnames=IOUtilFunctions.split(colnamesStr.trim(),colDelim);  HashMap<String,String> meta=new HashMap<String,String>();  HashMap<String,String> mvmeta=new HashMap<String,String>();  int rows=0;  for (int j=0; j < colnames.length; j++) {    String colName=colnames[j];    String name=metapath + "/" + "Recode"+ "/"+ colName;    String map=IOUtilFunctions.toString(Connection.class.getResourceAsStream(name + TfUtils.TXMTD_RCD_MAP_SUFFIX));    if (map != null) {      meta.put(colName,map);      String ndistinct=IOUtilFunctions.toString(Connection.class.getResourceAsStream(name + TfUtils.TXMTD_RCD_DISTINCT_SUFFIX));      rows=Math.max(rows,Integer.parseInt(ndistinct));    }    String name2=metapath + "/" + "Bin"+ "/"+ colName;    String map2=IOUtilFunctions.toString(Connection.class.getResourceAsStream(name2 + TfUtils.TXMTD_BIN_FILE_SUFFIX));    if (map2 != null) {      meta.put(colName,map2);      rows=Math.max(rows,Integer.parseInt(map2.split(TfUtils.TXMTD_SEP)[4]));    }    String name3=metapath + File.separator + "Impute"+ File.separator+ colName;    String map3=IOUtilFunctions.toString(Connection.class.getResourceAsStream(name3 + TfUtils.TXMTD_MV_FILE_SUFFIX));    if (map3 != null) {      mvmeta.put(colName,map3);    }  }  List<Integer> recodeIDs=parseRecodeColIDs(spec,colnames);  List<Integer> binIDs=parseBinningColIDs(spec,colnames);  return convertToTransformMetaDataFrame(rows,colnames,recodeIDs,binIDs,meta,mvmeta);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  FastScatterPlot clone=(FastScatterPlot)super.clone();  if (this.data != null) {    clone.data=ArrayUtilities.clone(this.data);  }  if (this.domainAxis != null) {    clone.domainAxis=(ValueAxis)this.domainAxis.clone();    clone.domainAxis.setPlot(clone);    clone.domainAxis.addChangeListener(clone);  }  if (this.rangeAxis != null) {    clone.rangeAxis=(ValueAxis)this.rangeAxis.clone();    clone.rangeAxis.setPlot(clone);    clone.rangeAxis.addChangeListener(clone);  }  return clone;}  }
class C{  public void testMultipleCreators() throws Exception {  ObjectMapper m=new ObjectMapper();  MultiBean bean=m.readValue("123",MultiBean.class);  assertEquals(Integer.valueOf(123),bean.value);  bean=m.readValue(quote("abc"),MultiBean.class);  assertEquals("abc",bean.value);  bean=m.readValue("0.25",MultiBean.class);  assertEquals(Double.valueOf(0.25),bean.value);}  }
class C{  public float put(int key,float value){  float previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.SHIFT_EXPRESSION__LHS:    return lhs != null;case N4JSPackage.SHIFT_EXPRESSION__OP:  return op != OP_EDEFAULT;case N4JSPackage.SHIFT_EXPRESSION__RHS:return rhs != null;}return super.eIsSet(featureID);}  }
class C{  public K fileCache(boolean cache){  this.fileCache=cache;  return self();}  }
class C{  public static boolean eqv(boolean left,boolean right){  return (left == true && right == true) || (left == false && right == false);}  }
class C{  public JSweetTranspiler(File workingDir,File tsOutputDir,File jsOutputDir,File extractedCandiesJavascriptDir,String classPath){  this.workingDir=workingDir.getAbsoluteFile();  this.extractedCandyJavascriptDir=extractedCandiesJavascriptDir;  try {    tsOutputDir.mkdirs();    this.tsOutputDir=tsOutputDir.getCanonicalFile();    if (jsOutputDir != null && generateJsFiles) {      jsOutputDir.mkdirs();      this.jsOutputDir=jsOutputDir.getCanonicalFile();    }  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException("cannot locate output dirs",e);  }  this.classPath=classPath == null ? System.getProperty("java.class.path") : classPath;  logger.info("creating transpiler version " + JSweetConfig.getVersionNumber() + " (build date: "+ JSweetConfig.getBuildDate()+ ")");  logger.info("curent dir: " + new File(".").getAbsolutePath());  logger.info("tsOut: " + tsOutputDir + (tsOutputDir == null ? "" : " - " + tsOutputDir.getAbsolutePath()));  logger.info("jsOut: " + jsOutputDir + (jsOutputDir == null ? "" : " - " + jsOutputDir.getAbsolutePath()));  logger.info("candyJsOut: " + extractedCandiesJavascriptDir);  logger.debug("compile classpath: " + classPath);  logger.debug("runtime classpath: " + System.getProperty("java.class.path"));  this.candiesProcessor=new CandiesProcessor(workingDir,classPath,extractedCandyJavascriptDir);}  }
class C{  public static String identifier(SourceCode cfml,boolean throwError,boolean allowColon) throws TemplateException {  int start=cfml.getPos();  if (!cfml.isCurrentBetween('a','z') && !cfml.isCurrent('_')) {    if (throwError)     throw new TemplateException(cfml,"Invalid Identifier, the following character cannot be part of a identifier [" + cfml.getCurrent() + "]");    return null;  }  do {    cfml.next();    if (!(cfml.isCurrentBetween('a','z') || cfml.isCurrentBetween('0','9') || cfml.isCurrent('_')|| (allowColon && cfml.isCurrent(':'))|| cfml.isCurrent('-'))) {      break;    }  } while (cfml.isValidIndex());  return cfml.substring(start,cfml.getPos() - start);}  }
class C{  private void fireWorkspaceComponentAdded(WorkspaceComponent component){  for (  WorkspaceListener listener : listeners) {    listener.componentAdded(component);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.904 -0400",hash_original_method="707E3CF4FCF7B50ABDC5BD8089A4C948",hash_generated_method="B3C695434B3A659E73AEB9F3AFC5AAFF") @Override public synchronized void reset() throws IOException {  fbIndex=markFbIndex;  if (markedAtStart) {    firstBytes=null;  }  in.reset();}  }
class C{  public LocationInfo(){  m_sID=null;  m_sName=null;  m_sAddress=null;}  }
class C{  public CUnhideAndAddToSelectionAction(final ZyGraph graph,final ZyProximityNode<INaviViewNode> node){  super("Unhide and add to selection");  Preconditions.checkNotNull(graph,"IE00946: Graph argument can't be null");  Preconditions.checkNotNull(node,"IE00947: Node argument can't be null");  m_graph=graph;  m_node=node;}  }
class C{  private Flags(){}  }
class C{  public void testMergeInBothWithNodeMergeStrategy() throws Exception {  WebXml srcWebXml=getWebXml("param","value1");  WebXml mergeWebXml=getWebXml("param","value2");  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  Element format=getContextParamElement("$left:param-name","$left:param-value $right:param-value");  NodeMergeStrategy strategy=new NodeMergeStrategy(null,format);  merger.setMergeStrategy(WebXmlType.CONTEXT_PARAM,strategy);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));  assertEquals("value1 value2",getContextParamValue(WebXmlUtils.getContextParam(srcWebXml,"param")));}  }
class C{  private String stringFilter(String line){  if (line == null || line.equals("")) {    return "";  }  StringBuffer buf=new StringBuffer();  if (line.indexOf("\"") <= -1) {    return keywordFilter(line);  }  int start=0;  int startStringIndex=-1;  int endStringIndex=-1;  int tempIndex;  while ((tempIndex=line.indexOf("\"")) > -1) {    if (startStringIndex == -1) {      startStringIndex=0;      buf.append(stringFilter(line.substring(start,tempIndex)));      buf.append(stringStart).append("\"");      line=line.substring(tempIndex + 1);    } else {      startStringIndex=-1;      endStringIndex=tempIndex;      buf.append(line.substring(0,endStringIndex + 1));      buf.append(stringEnd);      line=line.substring(endStringIndex + 1);    }  }  buf.append(keywordFilter(line));  return buf.toString();}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  public boolean isAssignableTo(Type lhsType){  return isAssignable(lhsType,type);}  }
class C{  public void execute(){  writeLine(WELCOME);  executor.getContext().getCapability(Context.Capabilities.GLOBAL_CONFIG,false).ifPresent(null);  console.start();}  }
class C{  public static Map<Integer,Map<String,Object>> makeAnimalsForTesting(DataSet testData){  Map<Integer,Map<String,Object>> animals=new HashMap<>();  INDArray features=testData.getFeatureMatrix();  for (int i=0; i < features.rows(); i++) {    INDArray slice=features.slice(i);    Map<String,Object> animal=new HashMap();    animal.put("yearsLived",slice.getInt(0));    animal.put("eats",eats.get(slice.getInt(1)));    animal.put("sounds",sounds.get(slice.getInt(2)));    animal.put("weight",slice.getFloat(3));    animals.put(i,animal);  }  return animals;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.449 -0500",hash_original_method="E09AC91BFF0716A1363050785841D6F7",hash_generated_method="27D251DA038DA05A7DD877977877B001") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int rcpt(String forwardPath) throws IOException {  return __sendCommand(SMTPCommand.RCPT,forwardPath,false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node createdNode;  String prefix;  doc=(Document)load("staffNS",false);  createdNode=doc.createElement("test:employee");  prefix=createdNode.getPrefix();  assertNull("throw_Null",prefix);}  }
class C{  protected void processCloudletPause(int cloudletId,int userId,int vmId,boolean ack){  boolean status=getVmAllocationPolicy().getHost(vmId,userId).getVm(vmId,userId).getCloudletScheduler().cloudletPause(cloudletId);  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=cloudletId;    if (status) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    sendNow(userId,CloudSimTags.CLOUDLET_PAUSE_ACK,data);  }}  }
class C{  private static String usage(){  StringBuilder sb=new StringBuilder();  String nl=System.getProperty("line.separator");  sb.append("Usage: java ").append(OnlineTuner.class.getName()).append(" [OPTIONS] source_file target_file phrasal_ini initial_weights").append(nl).append(nl).append("Options:").append(nl).append("   -uw        : Uniform weight initialization (default: false)").append(nl).append("   -rw        : Randomize starting weights at the start of each epoch").append(nl).append("   -e num     : Number of online epochs").append(nl).append("   -o str     : Optimizer: [pro-sgd,mira-1best]").append(nl).append("   -of str    : Optimizer flags (format: CSV list)").append(nl).append("   -m str     : Gold scoring metric for the tuning algorithm (default: bleu-smooth)").append(nl).append("   -mf str    : Gold scoring metric flags (format: CSV list)").append(nl).append("   -n str     : Experiment name").append(nl).append("   -r str     : Use multiple references (format: CSV list)").append(nl).append("   -bw        : Set final weights to the best training epoch.").append(nl).append("   -a         : Enable Collins-style parameter averaging between epochs").append(nl).append("   -b num     : Mini-batch size (optimizer must support mini-batch learning").append(nl).append("   -ef        : Expected # of features").append(nl).append("   -wi        : # of minibatches between intermediate weight file writeouts within an epoch").append(nl).append("   -fmc num   : Minimum number of times a feature must appear (default: 0)").append(nl).append("   -tmp path  : Temp directory (default: /tmp)").append(nl).append("   -p str     : Compute pseudo references with parameters <#refs,burn-in> (format: CSV list)").append(nl).append("   -s         : Wrap references and source inputs in boundary tokens").append(nl).append("   -rand      : Randomize dev set before tuning (default: true)").append(nl).append("   -localTM   : Incrementally train a local translation model on the dev data. (default: false)").append(nl).append("   -localTMout: Output file for local translation model. (default: none)").append(nl).append("   -seq       : Enforce a strictly sequential optimization - this will make multi-threading pointless. (default: false)").append(nl).append("   -niw       : normalize the initial weights file (default: false)").append(nl).append("   -sb        : Specify for single best output. ").append(nl).append("   -pt path   : Prefix tuning file. Only one reference allowed. Or RANDOM to randomly select prefixes from reference.").append("   -ifw path  : Additional initial feature weights file in plain text. Values are only used if feature is not already present in the weight vector.");  return sb.toString();}  }
class C{  @LargeTest public void testPropertiesWMVFile() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "WMV_V7_640x480_15fps_512Kbps_wma_V9_44khz_48Kbps_s_1_30.wmv";  boolean flagForException=false;  if (MediaProfileReader.getWMVEnable() == false) {    flagForException=true;  } else {    try {      new MediaVideoItem(mVideoEditor,"m1",videoItemFilename,MediaItem.RENDERING_MODE_BLACK_BORDER);    } catch (    IllegalArgumentException e) {      flagForException=true;    }catch (    IOException e) {      flagForException=true;    }  }  assertTrue("Media Properties for a WMV File -- Unsupported file type",flagForException);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < indentSize; i++) {    sb.append(indentChar.getIndentChar());  }  return sb.toString();}  }
class C{  private void reset(){  assert m_stateLock.isWriteLocked();  m_state=null;  m_position=headerSize0;  m_rootBlock=null;  m_nextSequence=0L;}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  public String readLine() throws IOException {synchronized (lock) {    String l=super.readLine(skipLF);    skipLF=false;    if (l != null)     lineNumber++;    return l;  }}  }
class C{  protected void processStoragePolicySelectionMessageImpl(StoragePolicySelection storagePolicySelection){  StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto=storagePolicyProcessorHelperService.initiateStoragePolicyTransition(storagePolicySelection);  notificationEventService.processStorageUnitNotificationEventAsync(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG,storagePolicyTransitionParamsDto.getBusinessObjectDataKey(),storagePolicyTransitionParamsDto.getDestinationStorageName(),storagePolicyTransitionParamsDto.getNewDestinationStorageUnitStatus(),storagePolicyTransitionParamsDto.getOldDestinationStorageUnitStatus());  storagePolicyProcessorHelperService.executeStoragePolicyTransition(storagePolicyTransitionParamsDto);  storagePolicyProcessorHelperService.completeStoragePolicyTransition(storagePolicyTransitionParamsDto);  notificationEventService.processStorageUnitNotificationEventAsync(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG,storagePolicyTransitionParamsDto.getBusinessObjectDataKey(),storagePolicyTransitionParamsDto.getSourceStorageName(),storagePolicyTransitionParamsDto.getNewSourceStorageUnitStatus(),storagePolicyTransitionParamsDto.getOldSourceStorageUnitStatus());  notificationEventService.processStorageUnitNotificationEventAsync(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG,storagePolicyTransitionParamsDto.getBusinessObjectDataKey(),storagePolicyTransitionParamsDto.getDestinationStorageName(),storagePolicyTransitionParamsDto.getNewDestinationStorageUnitStatus(),storagePolicyTransitionParamsDto.getOldDestinationStorageUnitStatus());  storagePolicyProcessorHelperService.executeStoragePolicyTransitionAfterStep(storagePolicyTransitionParamsDto);}  }
class C{  void evaluate(){  double T1r, T1i, T3r, T3i;  double Rr, Ri, Sr, Si;  Xr[m0]=xr[n0] + xr[n8];  Xi[m0]=xi[n0] + xi[n8];  Xr[m1]=xr[n0] - xr[n8];  Xi[m1]=xi[n0] - xi[n8];  Rr=xr[n4] + xr[n12];  Ri=xi[n4] + xi[n12];  Sr=xi[n12] - xi[n4];  Si=xr[n4] - xr[n12];  Xr[m2]=Xr[m0] - Rr;  Xi[m2]=Xi[m0] - Ri;  Xr[m3]=Xr[m1] + Sr;  Xi[m3]=Xi[m1] + Si;  Xr[m0]+=Rr;  Xi[m0]+=Ri;  Xr[m1]-=Sr;  Xi[m1]-=Si;  Xr[m4]=xr[n2] + xr[n10];  Xi[m4]=xi[n2] + xi[n10];  Xr[m5]=xr[n2] - xr[n10];  Xi[m5]=xi[n2] - xi[n10];  Xr[m6]=xr[n6] + xr[n14];  Xi[m6]=xi[n6] + xi[n14];  Xr[m7]=xr[n6] - xr[n14];  Xi[m7]=xi[n6] - xi[n14];  Rr=Xr[m4] + Xr[m6];  Ri=Xi[m4] + Xi[m6];  Sr=Xi[m6] - Xi[m4];  Si=Xr[m4] - Xr[m6];  Xr[m4]=Xr[m0] - Rr;  Xi[m4]=Xi[m0] - Ri;  Xr[m6]=Xr[m2] + Sr;  Xi[m6]=Xi[m2] + Si;  Xr[m0]+=Rr;  Xi[m0]+=Ri;  Xr[m2]-=Sr;  Xi[m2]-=Si;  T1r=SQRT2BY2 * (Xr[m5] + Xi[m5]);  T1i=SQRT2BY2 * (Xi[m5] - Xr[m5]);  T3r=SQRT2BY2 * (Xi[m7] - Xr[m7]);  T3i=-SQRT2BY2 * (Xi[m7] + Xr[m7]);  Rr=T1r + T3r;  Ri=T1i + T3i;  Sr=T3i - T1i;  Si=T1r - T3r;  Xr[m5]=Xr[m1] - Rr;  Xi[m5]=Xi[m1] - Ri;  Xr[m7]=Xr[m3] + Sr;  Xi[m7]=Xi[m3] + Si;  Xr[m1]+=Rr;  Xi[m1]+=Ri;  Xr[m3]-=Sr;  Xi[m3]-=Si;  Xr[m8]=xr[n1] + xr[n9];  Xi[m8]=xi[n1] + xi[n9];  Xr[m9]=xr[n1] - xr[n9];  Xi[m9]=xi[n1] - xi[n9];  Rr=xr[n5] + xr[n13];  Ri=xi[n5] + xi[n13];  Sr=xi[n13] - xi[n5];  Si=xr[n5] - xr[n13];  Xr[m10]=Xr[m8] - Rr;  Xi[m10]=Xi[m8] - Ri;  Xr[m11]=Xr[m9] + Sr;  Xi[m11]=Xi[m9] + Si;  Xr[m8]+=Rr;  Xi[m8]+=Ri;  Xr[m9]-=Sr;  Xi[m9]-=Si;  Xr[m12]=xr[n3] + xr[n11];  Xi[m12]=xi[n3] + xi[n11];  Xr[m13]=xr[n3] - xr[n11];  Xi[m13]=xi[n3] - xi[n11];  Rr=xr[n7] + xr[n15];  Ri=xi[n7] + xi[n15];  Sr=xi[n15] - xi[n7];  Si=xr[n7] - xr[n15];  Xr[m14]=Xr[m12] - Rr;  Xi[m14]=Xi[m12] - Ri;  Xr[m15]=Xr[m13] + Sr;  Xi[m15]=Xi[m13] + Si;  Xr[m12]+=Rr;  Xi[m12]+=Ri;  Xr[m13]-=Sr;  Xi[m13]-=Si;  Rr=Xr[m8] + Xr[m12];  Ri=Xi[m8] + Xi[m12];  Sr=Xi[m12] - Xi[m8];  Si=Xr[m8] - Xr[m12];  Xr[m8]=Xr[m0] - Rr;  Xi[m8]=Xi[m0] - Ri;  Xr[m12]=Xr[m4] + Sr;  Xi[m12]=Xi[m4] + Si;  Xr[m0]+=Rr;  Xi[m0]+=Ri;  Xr[m4]-=Sr;  Xi[m4]-=Si;  T1r=C_1_16 * Xr[m9] + C_3_16 * Xi[m9];  T1i=C_1_16 * Xi[m9] - C_3_16 * Xr[m9];  T3r=C_3_16 * Xr[m13] + C_1_16 * Xi[m13];  T3i=C_3_16 * Xi[m13] - C_1_16 * Xr[m13];  Rr=T1r + T3r;  Ri=T1i + T3i;  Sr=T3i - T1i;  Si=T1r - T3r;  Xr[m9]=Xr[m1] - Rr;  Xi[m9]=Xi[m1] - Ri;  Xr[m13]=Xr[m5] + Sr;  Xi[m13]=Xi[m5] + Si;  Xr[m1]+=Rr;  Xi[m1]+=Ri;  Xr[m5]-=Sr;  Xi[m5]-=Si;  T1r=SQRT2BY2 * (Xr[m10] + Xi[m10]);  T1i=SQRT2BY2 * (Xi[m10] - Xr[m10]);  T3r=SQRT2BY2 * (Xi[m14] - Xr[m14]);  T3i=-SQRT2BY2 * (Xi[m14] + Xr[m14]);  Rr=T1r + T3r;  Ri=T1i + T3i;  Sr=T3i - T1i;  Si=T1r - T3r;  Xr[m10]=Xr[m2] - Rr;  Xi[m10]=Xi[m2] - Ri;  Xr[m14]=Xr[m6] + Sr;  Xi[m14]=Xi[m6] + Si;  Xr[m2]+=Rr;  Xi[m2]+=Ri;  Xr[m6]-=Sr;  Xi[m6]-=Si;  T1r=C_3_16 * Xr[m11] + C_1_16 * Xi[m11];  T1i=C_3_16 * Xi[m11] - C_1_16 * Xr[m11];  T3r=-C_1_16 * Xr[m15] - C_3_16 * Xi[m15];  T3i=-C_1_16 * Xi[m15] + C_3_16 * Xr[m15];  Rr=T1r + T3r;  Ri=T1i + T3i;  Sr=T3i - T1i;  Si=T1r - T3r;  Xr[m11]=Xr[m3] - Rr;  Xi[m11]=Xi[m3] - Ri;  Xr[m15]=Xr[m7] + Sr;  Xi[m15]=Xi[m7] + Si;  Xr[m3]+=Rr;  Xi[m3]+=Ri;  Xr[m7]-=Sr;  Xi[m7]-=Si;}  }
class C{  @SuppressWarnings("unused") void update(final Map<E,Object> __){}  }
class C{  public PlainTextConverter(){  SimpleWikiConfiguration config=null;  try {    config=new SimpleWikiConfiguration(WikiConstants.SWEBLE_CONFIG);  } catch (  IOException e) {    e.printStackTrace();  }catch (  JAXBException e) {    e.printStackTrace();  }  this.config=config;  this.wrapCol=Integer.MAX_VALUE;  this.enumerateSections=false;}  }
class C{  @Override public void updateArray(String columnLabel,Array x) throws SQLException {  throw unsupported("setArray");}  }
class C{  public static int bytesRequiredWhenCopied(Object fromObj,RVMArray type,int numElements){  return JavaHeader.bytesRequiredWhenCopied(fromObj,type,numElements);}  }
class C{  public DockEvent(Object source,EventTarget target,EventType<? extends DockEvent> eventType,double x,double y,double screenX,double screenY,PickResult pickResult,Node contents){  super(source,target,eventType);  this.x=x;  this.y=y;  this.screenX=screenX;  this.screenY=screenY;  this.sceneX=x;  this.sceneY=y;  this.pickResult=pickResult != null ? pickResult : new PickResult(target,x,y);  final Point3D p=InputEventUtils.recomputeCoordinates(this.pickResult,null);  this.x=p.getX();  this.y=p.getY();  this.z=p.getZ();  this.contents=contents;}  }
class C{  public boolean restart(final Password password) throws IOException, ServletException {  if (!singelton.can(CFMLEngine.CAN_RESTART_ALL,password))   throw new IOException("access denied to restart CFMLEngine");  return _restart();}  }
class C{  public final GF2nPolynomial gcd(GF2nPolynomial g) throws RuntimeException, ArithmeticException {  GF2nPolynomial a=new GF2nPolynomial(this);  GF2nPolynomial b=new GF2nPolynomial(g);  a.shrink();  b.shrink();  GF2nPolynomial c;  GF2nPolynomial result;  GF2nElement alpha;  while (!b.isZero()) {    c=a.remainder(b);    a=b;    b=c;  }  alpha=a.coeff[a.getDegree()];  result=a.scalarMultiply((GF2nElement)alpha.invert());  return result;}  }
class C{  protected int countTies(double[] withinDistances,int[] withinTies){  int wties=0, running=1;  for (int i=1; i <= withinDistances.length; ++i) {    if (i == withinDistances.length || withinDistances[i - 1] != withinDistances[i]) {      for (int j=i - running; j < i; j++) {        withinTies[j]=running;      }      wties+=running - 1;      running=1;    } else {      running++;    }  }  return wties;}  }
class C{  public static void info(Object message){  RuntimeSingleton.info(message);}  }
class C{  public static char[] readRequiredAmountFromReader(Reader reader,int length) throws IOException {  char[] chars=readCharAmountFromReader(reader,length);  if (chars.length != length) {    throw createFailedToReadExpected(length,chars.length);  }  return chars;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Criteria(){}  }
class C{  public void release(){}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public ConfigException(String msg,Throwable e){  super(msg,e);}  }
class C{  public double weightedTrueNegativeRate(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double trueNegTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=trueNegativeRate(i);    trueNegTotal+=(temp * classCounts[i]);  }  return trueNegTotal / classCountSum;}  }
class C{  protected SingleSubstFormat2(RandomAccessFile raf,int offset) throws IOException {  coverageOffset=raf.readUnsignedShort();  glyphCount=raf.readUnsignedShort();  substitutes=new int[glyphCount];  for (int i=0; i < glyphCount; i++) {    substitutes[i]=raf.readUnsignedShort();  }  raf.seek(offset + coverageOffset);  coverage=Coverage.read(raf);}  }
class C{  public boolean isFdr(){  return fdr;}  }
class C{  @Nullable @ObjectiveCName("editMyNameCommandWithName:") public Command<Boolean> editMyName(final String newName){  return null;}  }
class C{  protected void stopRunnerProcess(){  java.util.List<UserRunnerStatus> matchingStatuses=getMultiRemoteCodenvy().findRunners(id);  UserRunnerStatus foundStatus=checkOnlyOne(matchingStatuses,id,"runner","runners");  if (foundStatus == null) {    return;  }  UserRunnerStatus updatedStatus=stopStatus(foundStatus);  System.out.println(updatedStatus);}  }
class C{  public void addNode(N node){  if (!nodes.containsKey(node))   nodes.put(node,new Pair<HashSet<N>,HashSet<N>>(new HashSet<N>(),new HashSet<N>()));}  }
class C{  public V insert(K key,V value){  BalancedBinaryNode<K,V> t=root;  if (key == null && comparator == null) {    throw new NullPointerException("BalancedTree cannot support null key values with default comparator.");  }  if (t == null) {    size++;    root=construct(key,value,null);    return null;  }  while (true) {    int cmp=compare(key,t.key);    if (!allowDuplicates && cmp == 0) {      return t.setValue(value);    }    if (cmp <= 0) {      if (t.left != null) {        t=t.left;      } else {        size++;        t.left=construct(key,value,t);        fixAfterInsertion(t.left);        return null;      }    } else {      if (t.right != null) {        t=t.right;      } else {        size++;        t.right=construct(key,value,t);        fixAfterInsertion(t.right);        return null;      }    }  }}  }
class C{  public final boolean performItemClick(final View view,final int position,final long id){  return getView().performItemClick(view,position,id);}  }
class C{  public ListenableFuture<Void> shutdown(){synchronized (mDeviceLock) {    mLogger.d("shutdownAsync()");    if (mCurrentDevice != null) {      clearTargetDevice();      mShutdownFuture=SettableFuture.create();      mCurrentDevice.close();      return mShutdownFuture;    } else     if (mShutdownFuture != null) {      if (mShutdownFuture.isDone()) {        mShutdownFuture=null;      } else {        return mShutdownFuture;      }    }    return Futures.immediateFuture(null);  }}  }
class C{  private boolean validTreeLocation(){  BlockPos down=this.basePos.down();  net.minecraft.block.state.IBlockState state=this.world.getBlockState(down);  boolean isSoil=state.getBlock().canSustainPlant(state,this.world,down,net.minecraft.util.EnumFacing.UP,((net.minecraft.block.BlockSapling)Blocks.SAPLING));  if (!isSoil) {    return false;  } else {    int i=this.checkBlockLine(this.basePos,this.basePos.up(this.heightLimit - 1));    if (i == -1) {      return true;    } else     if (i < 6) {      return false;    } else {      this.heightLimit=i;      return true;    }  }}  }
class C{  public void remove(Result<Boolean> result){  result.ok(false);}  }
class C{  public VisibleActionGroup(String groupId,List<Action> actionList){  this.groupId=groupId;  this.actionList=actionList;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QSUB16");  translateAll(environment,instruction,"QSUB16",instructions);}  }
class C{  public PubsubFuture<List<ReceivedMessage>> pull(final String canonicalSubscriptionName){  return pull(canonicalSubscriptionName,DEFAULT_PULL_RETURN_IMMEDIATELY);}  }
class C{  public DefaultSynthStyle(DefaultSynthStyle style){  opaque=style.opaque;  if (style.insets != null) {    insets=new Insets(style.insets.top,style.insets.left,style.insets.bottom,style.insets.right);  }  if (style.states != null) {    states=new StateInfo[style.states.length];    for (int counter=style.states.length - 1; counter >= 0; counter--) {      states[counter]=(StateInfo)style.states[counter].clone();    }  }  if (style.data != null) {    data=new HashMap();    data.putAll(style.data);  }  font=style.font;  synthGraphics=style.synthGraphics;  painter=style.painter;}  }
class C{  public void dumpSchema(String schemaVersion,String dumpFilename){  SchemaRecord schemaRecord=_dbClient.querySchemaRecord(schemaVersion);  if (schemaRecord == null) {    System.err.println("No such schema version: " + schemaVersion);    return;  }  try (BufferedWriter writer=new BufferedWriter(new FileWriter(dumpFilename));BufferedReader reader=new BufferedReader(new StringReader(schemaRecord.getSchema()))){    DbSchemas dbSchemas=DbSchemaChecker.unmarshalSchemas(schemaVersion,reader);    writer.write(DbSchemaChecker.marshalSchemas(dbSchemas,schemaVersion));    System.out.println("Db Schema version " + schemaVersion + " successfully"+ " dumped to file "+ dumpFilename);  } catch (  IOException e) {    System.err.println("Caught IOException: " + e);    log.error("Caught IOException: ",e);  }}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject){  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public boolean hasAction(String action){  return getFilter().hasAction(action);}  }
class C{  @Override public <R>StreamBuilderImpl<R,U> reduce(R identity,BiFunctionSync<R,? super T,R> accumulator,BinaryOperatorSync<R> combiner){  return new ReduceAccumSync<>(this,identity,accumulator,combiner);}  }
class C{  public int compareTo(Object obj){  if (!(obj instanceof CompositeName)) {    throw new ClassCastException("Not a CompositeName");  }  return impl.compareTo(((CompositeName)obj).impl);}  }
class C{  public MasterPrivateKey(PrivateKey key,byte[] chainCode,int depth,int parent,int sequence){  this.master=key;  this.chainCode=chainCode;  this.parent=parent;  this.depth=depth;  this.sequence=sequence;}  }
class C{  private void doCalculations(){  for (int line=0; line < m_lines.length; line++) {    if (!m_lines[line].isLineTypeCalculation())     continue;    int oper_1=m_lines[line].getOper_1_ID();    int oper_2=m_lines[line].getOper_2_ID();    log.fine("Line " + line + " = #"+ oper_1+ " "+ m_lines[line].getCalculationType()+ " #"+ oper_2);    if (m_lines[line].isCalculationTypeAdd() || m_lines[line].isCalculationTypeRange()) {      if (oper_1 > oper_2) {        int temp=oper_1;        oper_1=oper_2;        oper_2=temp;      }      StringBuffer sb=new StringBuffer("UPDATE T_Report SET (");      for (int col=0; col < m_columns.length; col++) {        if (col > 0)         sb.append(",");        sb.append("Col_").append(col);      }      sb.append(") = (SELECT ");      for (int col=0; col < m_columns.length; col++) {        if (col > 0)         sb.append(",");        sb.append("COALESCE(SUM(r2.Col_").append(col).append("),0)");      }      sb.append(" FROM T_Report r2 WHERE r2.AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND r2.PA_ReportLine_ID IN (");      if (m_lines[line].isCalculationTypeAdd())       sb.append(oper_1).append(",").append(oper_2); else       sb.append(getLineIDs(oper_1,oper_2));      sb.append(") AND ABS(r2.LevelNo)<1) " + "WHERE AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND PA_ReportLine_ID=").append(m_lines[line].getPA_ReportLine_ID()).append(" AND ABS(LevelNo)<1");      int no=DB.executeUpdate(sb.toString(),get_TrxName());      if (no != 1)       log.log(Level.SEVERE,"(+) #=" + no + " for "+ m_lines[line]+ " - "+ sb.toString()); else {        log.fine("(+) Line=" + line + " - "+ m_lines[line]);        log.finest("(+) " + sb.toString());      }    } else {      StringBuffer sb=new StringBuffer("UPDATE T_Report SET (");      for (int col=0; col < m_columns.length; col++) {        if (col > 0)         sb.append(",");        sb.append("Col_").append(col);      }      sb.append(") = (SELECT ");      for (int col=0; col < m_columns.length; col++) {        if (col > 0)         sb.append(",");        sb.append("COALESCE(r2.Col_").append(col).append(",0)");      }      sb.append(" FROM T_Report r2 WHERE r2.AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND r2.PA_ReportLine_ID=").append(oper_1).append(" AND r2.Record_ID=0 AND r2.Fact_Acct_ID=0) " + "WHERE AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND PA_ReportLine_ID=").append(m_lines[line].getPA_ReportLine_ID()).append(" AND ABS(LevelNo)<1");      int no=DB.executeUpdate(sb.toString(),get_TrxName());      if (no != 1) {        log.severe("(x) #=" + no + " for "+ m_lines[line]+ " - "+ sb.toString());        continue;      }      sb=new StringBuffer("UPDATE T_Report r1 SET (");      StringBuffer fp=new StringBuffer(" UPDATE T_Report SET ");      Boolean fixPerc=false;      for (int col=0; col < m_columns.length; col++) {        if (col > 0)         sb.append(",");        sb.append("Col_").append(col);      }      sb.append(") = (SELECT ");      for (int col=0; col < m_columns.length; col++) {        if (col > 0)         sb.append(",");        sb.append("COALESCE(r1.Col_").append(col).append(",0)");        if (m_lines[line].isCalculationTypeSubtract()) {          sb.append("-");          sb.append("COALESCE(r2.Col_").append(col).append(",0)");        } else {          sb.append("/");          sb.append("DECODE (r2.Col_").append(col).append(", 0, NULL, r2.Col_").append(col).append(")");        }        if (m_lines[line].isCalculationTypePercent()) {          sb.append(" *100");          Float fixedPercentage=getFixedPercentage(get_TrxName(),getAD_PInstance_ID(),m_lines[line].getPA_ReportLine_ID(),"Col_" + col);          if (fixedPercentage > 0)           fixPerc=true;          if (col > 0) {            fp.append(",");          }          fp.append("Col_" + col + " = "+ fixedPercentage);        }      }      sb.append(" FROM T_Report r2 WHERE r2.AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND r2.PA_ReportLine_ID=").append(oper_2).append(" AND r2.Record_ID=0 AND r2.Fact_Acct_ID=0) " + "WHERE AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND PA_ReportLine_ID=").append(m_lines[line].getPA_ReportLine_ID()).append(" AND ABS(LevelNo)<1");      fp.append(" WHERE AD_PInstance_ID = " + getAD_PInstance_ID()).append(" AND PA_ReportLine_ID= " + m_lines[line].getPA_ReportLine_ID()).append(" AND ABS(LevelNo) < 1   ");      if (fixPerc) {        try {          no=DB.executeUpdate(fp.toString(),get_TrxName());        } catch (        Exception e) {          log.log(Level.SEVERE,fp.toString(),e);        }        if (no != 1)         log.severe("(x) #=" + no + " for "+ m_lines[line]+ " - "+ sb.toString()); else {          log.fine("(x) Line=" + line + " - "+ m_lines[line]);          log.finest(sb.toString());        }      } else {        no=DB.executeUpdate(sb.toString(),get_TrxName());        if (no != 1)         log.severe("(x) #=" + no + " for "+ m_lines[line]+ " - "+ sb.toString()); else {          log.fine("(x) Line=" + line + " - "+ m_lines[line]);          log.finest(sb.toString());        }      }    }  }  for (int col=0; col < m_columns.length; col++) {    if (!m_columns[col].isColumnTypeCalculation())     continue;    StringBuffer sb=new StringBuffer("UPDATE T_Report SET ");    sb.append("Col_").append(col).append("=");    int ii_1=getColumnIndex(m_columns[col].getOper_1_ID());    if (ii_1 < 0) {      log.log(Level.SEVERE,"Column Index for Operator 1 not found - " + m_columns[col]);      continue;    }    int ii_2=getColumnIndex(m_columns[col].getOper_2_ID());    if (ii_2 < 0) {      log.log(Level.SEVERE,"Column Index for Operator 2 not found - " + m_columns[col]);      continue;    }    log.fine("Column " + col + " = #"+ ii_1+ " "+ m_columns[col].getCalculationType()+ " #"+ ii_2);    if (ii_1 > ii_2 && m_columns[col].isCalculationTypeRange()) {      log.fine("Swap operands from " + ii_1 + " op "+ ii_2);      int temp=ii_1;      ii_1=ii_2;      ii_2=temp;    }    if (m_columns[col].isCalculationTypeAdd())     sb.append("COALESCE(Col_").append(ii_1).append(",0)").append("+").append("COALESCE(Col_").append(ii_2).append(",0)"); else     if (m_columns[col].isCalculationTypeSubtract())     sb.append("COALESCE(Col_").append(ii_1).append(",0)").append("-").append("COALESCE(Col_").append(ii_2).append(",0)");    if (m_columns[col].isCalculationTypePercent())     sb.append("CASE WHEN COALESCE(Col_").append(ii_2).append(",0)=0 THEN NULL ELSE ").append("COALESCE(Col_").append(ii_1).append(",0)").append("/").append("Col_").append(ii_2).append("*100 END"); else     if (m_columns[col].isCalculationTypeRange()) {      sb.append("COALESCE(Col_").append(ii_1).append(",0)");      for (int ii=ii_1 + 1; ii <= ii_2; ii++)       sb.append("+COALESCE(Col_").append(ii).append(",0)");    }    sb.append(" WHERE AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND ABS(LevelNo)<2");    int no=DB.executeUpdate(sb.toString(),get_TrxName());    if (no < 1)     log.severe("#=" + no + " for "+ m_columns[col]+ " - "+ sb.toString()); else {      log.fine("Col=" + col + " - "+ m_columns[col]);      log.finest(sb.toString());    }  }}  }
class C{  private void assertHasOneStorageFile(StorageUnitEntity storageUnitEntity){  Assert.isTrue(storageUnitEntity.getStorageFiles().size() == 1,String.format("Found %d registered storage files when expecting one in \"%s\" storage for the business object data {%s}.",storageUnitEntity.getStorageFiles().size(),storageUnitEntity.getStorage().getName(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(storageUnitEntity.getBusinessObjectData())));}  }
class C{  private FilterResolverIntf createFilterResolverTree(Expression expressionTree,AbsoluteTableIdentifier tableIdentifier,Expression intermediateExpression){  ExpressionType filterExpressionType=expressionTree.getFilterExpressionType();  BinaryExpression currentExpression=null;switch (filterExpressionType) {case OR:    currentExpression=(BinaryExpression)expressionTree;  return new LogicalFilterResolverImpl(createFilterResolverTree(currentExpression.getLeft(),tableIdentifier,currentExpression),createFilterResolverTree(currentExpression.getRight(),tableIdentifier,currentExpression),currentExpression);case AND:currentExpression=(BinaryExpression)expressionTree;return new LogicalFilterResolverImpl(createFilterResolverTree(currentExpression.getLeft(),tableIdentifier,currentExpression),createFilterResolverTree(currentExpression.getRight(),tableIdentifier,currentExpression),currentExpression);case EQUALS:case IN:return getFilterResolverBasedOnExpressionType(ExpressionType.EQUALS,false,expressionTree,tableIdentifier,expressionTree);case GREATERTHAN:case GREATERTHAN_EQUALTO:case LESSTHAN:case LESSTHAN_EQUALTO:return getFilterResolverBasedOnExpressionType(ExpressionType.EQUALS,true,expressionTree,tableIdentifier,expressionTree);case NOT_EQUALS:case NOT_IN:return getFilterResolverBasedOnExpressionType(ExpressionType.NOT_EQUALS,false,expressionTree,tableIdentifier,expressionTree);default :return getFilterResolverBasedOnExpressionType(ExpressionType.UNKNOWN,false,expressionTree,tableIdentifier,expressionTree);}}  }
class C{  public CSVReader(Reader reader){  this(reader,DEFAULT_SEPARATOR);}  }
class C{  private boolean isValidPair(String... parameters){  boolean nFound=false;  boolean eFound=false;  for (  String s : parameters) {    if ("N".equalsIgnoreCase(s) || "S".equalsIgnoreCase(s)) {      nFound=true;    } else     if ("E".equalsIgnoreCase(s) || "W".equalsIgnoreCase(s)) {      eFound=true;    }  }  return nFound && eFound;}  }
class C{  private void writeStream(Mail mail,OutputStream out,boolean update) throws IOException, MessagingException {  MimeMessage msg=mail.getMessage();  if (update) {    if (msg instanceof MimeMessageCopyOnWriteProxy) {      msg=((MimeMessageCopyOnWriteProxy)msg).getWrappedMessage();    }    if (msg instanceof MimeMessageWrapper) {      MimeMessageWrapper wrapper=(MimeMessageWrapper)msg;      wrapper.loadMessage();    }  }  OutputStream bodyOut=null;  try {    if (streamRep == null) {      bodyOut=out;    } else {      bodyOut=streamRep.put(mail.getName());    }    if (msg instanceof MimeMessageWrapper) {      ((MimeMessageWrapper)msg).writeTo(out,bodyOut,null,true);    } else {      MimeMessageUtil.writeTo(mail.getMessage(),out,bodyOut);    }    out.flush();    bodyOut.flush();  }  finally {    closeOutputStreams(out,bodyOut);  }}  }
class C{  public boolean isNetPrice(){  Object oo=get_Value(COLUMNNAME_IsNetPrice);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static Container encloseCenterMiddle(Component... cmps){  return Container.encloseIn(new FlowLayout(Component.CENTER,Component.CENTER),cmps);}  }
class C{  public Observable<Object> observable(){  return mBusSubject;}  }
class C{  private final void _appendCharacterEscape(char ch,int escCode) throws IOException, JsonGenerationException {  if (escCode >= 0) {    if ((_outputTail + 2) > _outputEnd) {      _flushBuffer();    }    _outputBuffer[_outputTail++]='\\';    _outputBuffer[_outputTail++]=(char)escCode;    return;  }  if (escCode != CharacterEscapes.ESCAPE_CUSTOM) {    if ((_outputTail + 2) > _outputEnd) {      _flushBuffer();    }    int ptr=_outputTail;    char[] buf=_outputBuffer;    buf[ptr++]='\\';    buf[ptr++]='u';    if (ch > 0xFF) {      int hi=(ch >> 8) & 0xFF;      buf[ptr++]=HEX_CHARS[hi >> 4];      buf[ptr++]=HEX_CHARS[hi & 0xF];      ch&=0xFF;    } else {      buf[ptr++]='0';      buf[ptr++]='0';    }    buf[ptr++]=HEX_CHARS[ch >> 4];    buf[ptr]=HEX_CHARS[ch & 0xF];    _outputTail=ptr;    return;  }  String escape;  if (_currentEscape == null) {    escape=_characterEscapes.getEscapeSequence(ch).getValue();  } else {    escape=_currentEscape.getValue();    _currentEscape=null;  }  int len=escape.length();  if ((_outputTail + len) > _outputEnd) {    _flushBuffer();    if (len > _outputEnd) {      _writer.write(escape);      return;    }  }  escape.getChars(0,len,_outputBuffer,_outputTail);  _outputTail+=len;}  }
class C{  private void exportProjectConstraints(Project project,File exportTempDir) throws IOException {  File constraintsDir=new File(exportTempDir + CONSTRAINTS);  FileUtils.forceMkdir(constraintsDir);  String fileName;  for (  ConstraintSet set : repository.listConstraintSets(project)) {    fileName=set.getName();    FileUtils.copyFile(repository.exportConstraintAsFile(set),new File(constraintsDir,fileName));  }}  }
class C{  public void close() throws ReplicatorException {  if (bfdi != null) {    bfdi.close();    bfdi=null;  }  setStartPosition(0);  setEventID(0);  setFileName(null);}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    if (!(dataSet.isContinuous())) {      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a continuous data set " + "or a covariance (or correlation) matrix.");      return;    }    CorrelationMatrix corrMatrix=new CorrelationMatrix(dataSet);    DataModelList list=new DataModelList();    list.add(corrMatrix);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof ICovarianceMatrix) {    ICovarianceMatrix covarianceMatrix=(ICovarianceMatrix)dataModel;    CorrelationMatrix corrMatrix=new CorrelationMatrix(covarianceMatrix);    DataModelList list=new DataModelList();    list.add(corrMatrix);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a continuous data set " + "or a covariance (or correlation) matrix.");  }}  }
class C{  private static boolean test5() throws Exception {  return doTest("5","-Dsun.net.spi.namservice.provider.1=\"dns,sun\"");}  }
class C{  public void addRow(Vector rowData){  insertRow(getRowCount(),rowData);}  }
class C{  public long createAlarm(Intent intent,long timestamp){  PendingIntent retryPIntent=PendingIntent.getService(mContext,0,intent,0);  AlarmManager am=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);  setAlarm(am,timestamp,retryPIntent);  return timestamp;}  }
class C{  protected void redoTextChange(){  if (fStart < 0 || fEnd < 0)   return;  try {    if (fDocumentUndoManager.fDocument instanceof IDocumentExtension4)     ((IDocumentExtension4)fDocumentUndoManager.fDocument).replace(fStart,fEnd - fStart,fText,fRedoModificationStamp); else     fDocumentUndoManager.fDocument.replace(fStart,fEnd - fStart,fText);  } catch (  BadLocationException x) {  }}  }
class C{  public void assertEqual(short expected,short actual,String errorMessage){  TestUtils.assertEqual(expected,actual,errorMessage);}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return null;}  }
class C{  protected void vmDeallocate(Vm vm){  getRamProvisioner().deallocateRamForVm(vm);  getBwProvisioner().deallocateBwForVm(vm);  getVmScheduler().deallocatePesForVm(vm);  setStorage(getStorage() + vm.getSize());}  }
class C{  private void handleBaseEntity(Type inputType,Type givenType,Events events){  if (null == inputType) {    fireAndSave(new NodeEvent(givenType,NodeEventType.NEW,NodeEventDetails.INITIALIZED),events);    resolveReferences(givenType,events);  } else {    if ((givenType instanceof AnnotationType) && (inputType instanceof InterfaceType)) {      mergeAnnotationAsInterface((AnnotationType)givenType,(InterfaceType)inputType,events);    } else {      merge(inputType,givenType,events);    }  }}  }
class C{  public String toString(){  return map.toString();}  }
class C{  public CompiereColor(Color bg){  this(bg,true);}  }
class C{  @Override public void process(V tuple){  double tval=tuple.doubleValue();  if (baseValue == 0) {    baseValue=tval;    return;  }  double change=tval - baseValue;  double percent=(change / baseValue) * 100;  if (percent < 0.0) {    percent=0.0 - percent;  }  if (percent > percentThreshold) {    KeyValPair<V,Double> kv=new KeyValPair<V,Double>(cloneKey(tuple),percent);    alert.emit(kv);  }  baseValue=tval;}  }
class C{  public static byte[] decodeChecked(String input) throws AddressFormatException {  byte tmp[]=decode(input);  if (tmp.length < 4)   throw new AddressFormatException("Input too short");  byte[] bytes=copyOfRange(tmp,0,tmp.length - 4);  byte[] checksum=copyOfRange(tmp,tmp.length - 4,tmp.length);  tmp=Utils.doubleDigest(bytes);  byte[] hash=copyOfRange(tmp,0,4);  if (!Arrays.equals(checksum,hash))   throw new AddressFormatException("Checksum does not validate");  return bytes;}  }
class C{  public boolean isSessionToken(String token){synchronized (sessionTokens) {    return sessionTokens.contains(token);  }}  }
class C{  public ScaleMap(double minIn,double maxIn,double minOut,double maxOut){  setInputRange(minIn,maxIn);  setOutputRange(minOut,maxOut);}  }
class C{  private static String unescapeForEncodeUriCompatability(String str){  return str.replace("%21","!").replace("%7E","~").replace("%27","'").replace("%28","(").replace("%29",")").replace("%3B",";").replace("%2F","/").replace("%3F","?").replace("%3A",":").replace("%40","@").replace("%26","&").replace("%3D","=").replace("%2B","+").replace("%24","$").replace("%2C",",").replace("%23","#");}  }
class C{  public void reset(){  isFilling=false;  ifrLength=0;  sliceType=NOT_SET;}  }
class C{  public Rule comment(){  return Sequence(FirstOf(lineComment(),blockComment()),actions.logComment(lastText()));}  }
class C{  protected void initClassDefaults(UIDefaults table){  super.initClassDefaults(table);  final String windowsPackageName="com.sun.java.swing.plaf.windows.";  Object[] uiDefaults={"ButtonUI",windowsPackageName + "WindowsButtonUI","CheckBoxUI",windowsPackageName + "WindowsCheckBoxUI","CheckBoxMenuItemUI",windowsPackageName + "WindowsCheckBoxMenuItemUI","LabelUI",windowsPackageName + "WindowsLabelUI","RadioButtonUI",windowsPackageName + "WindowsRadioButtonUI","RadioButtonMenuItemUI",windowsPackageName + "WindowsRadioButtonMenuItemUI","ToggleButtonUI",windowsPackageName + "WindowsToggleButtonUI","ProgressBarUI",windowsPackageName + "WindowsProgressBarUI","SliderUI",windowsPackageName + "WindowsSliderUI","SeparatorUI",windowsPackageName + "WindowsSeparatorUI","SplitPaneUI",windowsPackageName + "WindowsSplitPaneUI","SpinnerUI",windowsPackageName + "WindowsSpinnerUI","TabbedPaneUI",windowsPackageName + "WindowsTabbedPaneUI","TextAreaUI",windowsPackageName + "WindowsTextAreaUI","TextFieldUI",windowsPackageName + "WindowsTextFieldUI","PasswordFieldUI",windowsPackageName + "WindowsPasswordFieldUI","TextPaneUI",windowsPackageName + "WindowsTextPaneUI","EditorPaneUI",windowsPackageName + "WindowsEditorPaneUI","TreeUI",windowsPackageName + "WindowsTreeUI","ToolBarUI",windowsPackageName + "WindowsToolBarUI","ToolBarSeparatorUI",windowsPackageName + "WindowsToolBarSeparatorUI","ComboBoxUI",windowsPackageName + "WindowsComboBoxUI","TableHeaderUI",windowsPackageName + "WindowsTableHeaderUI","InternalFrameUI",windowsPackageName + "WindowsInternalFrameUI","DesktopPaneUI",windowsPackageName + "WindowsDesktopPaneUI","DesktopIconUI",windowsPackageName + "WindowsDesktopIconUI","FileChooserUI",windowsPackageName + "WindowsFileChooserUI","MenuUI",windowsPackageName + "WindowsMenuUI","MenuItemUI",windowsPackageName + "WindowsMenuItemUI","MenuBarUI",windowsPackageName + "WindowsMenuBarUI","PopupMenuUI",windowsPackageName + "WindowsPopupMenuUI","PopupMenuSeparatorUI",windowsPackageName + "WindowsPopupMenuSeparatorUI","ScrollBarUI",windowsPackageName + "WindowsScrollBarUI","RootPaneUI",windowsPackageName + "WindowsRootPaneUI"};  table.putDefaults(uiDefaults);}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedMap(boolean reversed,Comparator<V> comparator){  return new ByValueSortingTreeMap<>(ByValueComparator.<K,V>create(reversed,comparator));}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","Y");  try {    jbInit();    dynInit();    frame.getContentPane().add(panel,BorderLayout.CENTER);    frame.getContentPane().add(statusBar,BorderLayout.SOUTH);  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  public Property<T,V> property(){  return property;}  }
class C{  public static void unescapeJavaScript(Writer out,String str) throws IOException {  unescapeJava(out,str);}  }
class C{  protected Object allocateArray(int len){  return new MarkData[len];}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public long executeLargeUpdate() throws SQLException {  try {    if (this.wrappedStmt != null) {      return ((com.mysql.jdbc.PreparedStatement)this.wrappedStmt).executeLargeUpdate();    }    throw SQLError.createSQLException("No operations allowed after statement closed",SQLError.SQL_STATE_GENERAL_ERROR,this.exceptionInterceptor);  } catch (  SQLException sqlEx) {    checkAndFireConnectionError(sqlEx);  }  return -1;}  }
class C{  public static Map<StreamKind,List<Map<String,String>>> snapshot(File file) throws IOException {  try (MediaInfo mi=new MediaInfo()){    return mi.open(file).snapshot();  } }  }
class C{  public static String streamIdFromName(String name){  Objects.requireNonNull(name,"name");  if (!name.startsWith(ID_PREFIX))   return null;  return name.substring(ID_PREFIX.length());}  }
class C{  public static File imagesDir(){  lock.readLock().lock();  try {    return (images_dir != null) ? images_dir : new File(dataDir(),DEFAULT_DIR_NAME_IMAGES);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public void add(double value){  this.buffer.add(value);  this.isSorted=false;}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_test)   m_test.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  protected void fillPath(){  mPSStream.println(mFillOpStr);}  }
class C{  private void onPingReq(Message message){  LOGGER.trace("Received PingReq: {}",message);  PingData data=message.data();  Member target=data.getTo();  Member originalIssuer=data.getFrom();  String correlationId=message.correlationId();  PingData pingReqData=new PingData(membership.member(),target,originalIssuer);  Message pingMessage=Message.withData(pingReqData).qualifier(PING).correlationId(correlationId).build();  LOGGER.trace("Send transit Ping to {}",target.address());  transport.send(target.address(),pingMessage);}  }
class C{  private boolean deleteDirectoryContents(IgniteUuid parentId,final IgniteUuid id) throws IgniteCheckedException {  assert parentId != null;  assert id != null;  while (true) {    IgfsEntryInfo info=meta.info(id);    if (info != null) {      assert info.isDirectory();      final Map<String,IgfsListingEntry> listing=info.listing();      if (listing.isEmpty())       return true;      final Map<String,IgfsListingEntry> delListing=new HashMap<>(MAX_DELETE_BATCH,1.0f);      final GridCompoundFuture<Object,?> fut=new GridCompoundFuture<>();      int failedFiles=0;      for (      final Map.Entry<String,IgfsListingEntry> entry : listing.entrySet()) {        if (cancelled)         return false;        if (entry.getValue().isDirectory()) {          if (deleteDirectoryContents(id,entry.getValue().fileId()))           delListing.put(entry.getKey(),entry.getValue()); else           failedFiles++;        } else {          IgfsEntryInfo fileInfo=meta.info(entry.getValue().fileId());          if (fileInfo != null) {            assert fileInfo.isFile();            IgfsEntryInfo lockedInfo=meta.lock(fileInfo.id(),true);            if (lockedInfo == null)             failedFiles++; else {              assert IgfsUtils.DELETE_LOCK_ID.equals(lockedInfo.lockId());              fut.add(data.delete(lockedInfo));              delListing.put(entry.getKey(),entry.getValue());            }          }        }        if (delListing.size() == MAX_DELETE_BATCH)         break;      }      fut.markInitialized();      try {        fut.get();      } catch (      IgniteFutureCancelledCheckedException ignore) {        cancelled=true;        return false;      }      Collection<IgniteUuid> delIds=meta.delete(id,delListing);      if (listing.size() == delIds.size())       return true;      if (listing.size() == delListing.size() + failedFiles)       return false;    } else     return true;  }}  }
class C{  public EncodedStringValue[] split(String pattern){  String[] temp=getString().split(pattern);  EncodedStringValue[] ret=new EncodedStringValue[temp.length];  for (int i=0; i < ret.length; ++i) {    try {      ret[i]=new EncodedStringValue(mCharacterSet,temp[i].getBytes());    } catch (    NullPointerException _) {      return null;    }  }  return ret;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/release") public FileShareRestRep releaseFileSystemInternal(@PathParam("id") URI id) throws InternalException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=_fileService.queryResource(id);  if (!fs.checkInternalFlags(Flag.INTERNAL_OBJECT)) {    URI tenantURI=fs.getTenant().getURI();    if (!_permissionsHelper.userHasGivenRole(getUserFromContext(),tenantURI,Role.TENANT_ADMIN)) {      throw APIException.forbidden.onlyAdminsCanReleaseFileSystems(Role.TENANT_ADMIN.toString());    }    FSExportMap exports=fs.getFsExports();    if ((exports != null) && (!exports.isEmpty())) {      throw APIException.badRequests.cannotReleaseFileSystemExportExists(exports.keySet().toString());    }    SMBShareMap shares=fs.getSMBFileShares();    if ((shares != null) && (!shares.isEmpty())) {      throw APIException.badRequests.cannotReleaseFileSystemSharesExists(shares.keySet().toString());    }    if (fs.getOpStatus() != null) {      for (      String opId : fs.getOpStatus().keySet()) {        Operation op=fs.getOpStatus().get(opId);        if (Operation.Status.pending.name().equals(op.getStatus())) {          throw APIException.badRequests.cannotReleaseFileSystemWithTasksPending();        }      }    }    Integer snapCount=_fileService.getNumSnapshots(fs);    if (snapCount > 0) {      throw APIException.badRequests.cannotReleaseFileSystemSnapshotExists(snapCount);    }    TenantOrg rootTenant=_permissionsHelper.getRootTenant();    ArgValidator.checkFieldNotNull(fs.getVirtualPool(),"virtualPool");    VirtualPool virtualPool=_permissionsHelper.getObjectById(fs.getVirtualPool(),VirtualPool.class);    ArgValidator.checkEntity(virtualPool,fs.getVirtualPool(),false);    if (!_permissionsHelper.tenantHasUsageACL(rootTenant.getId(),virtualPool)) {      throw APIException.badRequests.cannotReleaseFileSystemRootTenantLacksVPoolACL(virtualPool.getId().toString());    }    fs.setOriginalProject(fs.getProject().getURI());    fs.setTenant(new NamedURI(rootTenant.getId(),fs.getLabel()));    fs.setProject(new NamedURI(_internalProject.getId(),fs.getLabel()));    fs.addInternalFlags(INTERNAL_FILESHARE_FLAGS);    _dbClient.updateAndReindexObject(fs);    auditOp(OperationTypeEnum.RELEASE_FILE_SYSTEM,true,null,fs.getId().toString(),fs.getOriginalProject().toString());  }  return map(fs);}  }
class C{  public void tokenizeLines(int start,int len){  if (tokenMarker == null || !tokenMarker.supportsMultilineTokens()) {    return;  }  Segment lineSegment=new Segment();  Element map=getDefaultRootElement();  len+=start;  try {    for (int i=start; i < len; i++) {      Element lineElement=map.getElement(i);      int lineStart=lineElement.getStartOffset();      getText(lineStart,lineElement.getEndOffset() - lineStart - 1,lineSegment);      tokenMarker.markTokens(lineSegment,i);    }  } catch (  BadLocationException bl) {    bl.printStackTrace();  }}  }
class C{  public DomSwitch(){  if (modelPackage == null) {    modelPackage=DomPackage.eINSTANCE;  }}  }
class C{  public void show(Point location){  show();  sendClickToCellEditor(location);}  }
class C{  private String detailBase(final Method method){  final Class<?> clazz=method.getDeclaringClass();  final String detailBase=MessageUtils.bundleNameForClass(clazz);  if (isBlank(detailBase)) {    throw new IllegalStateException("no bundle name defined for " + clazz);  }  return detailBase;}  }
class C{  public Person(int id,int orgId,String firstName,String lastName,double salary){  this.id=id;  this.orgId=orgId;  this.firstName=firstName;  this.lastName=lastName;  this.salary=salary;}  }
class C{  @Override public int nextInt(final int n){  if (n <= 0) {    throw new IllegalArgumentException("n must be >= 0");  }  if ((n & -n) == n) {    return (int)((n * (long)next(31)) >> 31);  }  int bits, val;  do {    bits=next(31);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  private int compareDatatypes(final URI leftDatatype,final URI rightDatatype){  if (XMLDatatypeUtil.isNumericDatatype(leftDatatype)) {    if (XMLDatatypeUtil.isNumericDatatype(rightDatatype)) {      return compareURIs(leftDatatype,rightDatatype);    } else {      return -1;    }  } else   if (XMLDatatypeUtil.isNumericDatatype(rightDatatype)) {    return 1;  } else   if (XMLDatatypeUtil.isCalendarDatatype(leftDatatype)) {    if (XMLDatatypeUtil.isCalendarDatatype(rightDatatype)) {      return compareURIs(leftDatatype,rightDatatype);    } else {      return -1;    }  } else   if (XMLDatatypeUtil.isCalendarDatatype(rightDatatype)) {    return 1;  } else {    return compareURIs(leftDatatype,rightDatatype);  }}  }
class C{  public DoubleMatrix[] jblas_sparseSVD(){  return org.jblas.Singular.sparseSVD(new DoubleMatrix(this.getArray()));}  }
class C{  private void verifyIndexingHelper(Object obj,boolean indexed,Collection<String> fieldPaths) throws Exception {  outer:   for (  String fieldPath : fieldPaths) {    Object fieldValue=obj;    for (    String fieldName : fieldPath.split("\\.")) {      if (fieldValue == null) {        throw new RuntimeException(String.format("field '%s' not found on %s",fieldPath,obj.getClass().getSimpleName()));      }      Field field=getField(fieldValue.getClass(),fieldName);      field.setAccessible(true);      if (field.isAnnotationPresent(Id.class)) {        continue outer;      }      fieldValue=field.get(fieldValue);      if (fieldValue instanceof Collection<?>) {        fieldValue=((Collection<?>)fieldValue).iterator().next();      }      if (fieldValue != null && fieldValue.getClass().isArray()) {        fieldValue=Array.getLength(fieldValue) == 0 ? null : Array.get(fieldValue,0);      }      if (fieldValue instanceof CidrAddressBlock) {        fieldValue=fieldValue.toString();      }    }    try {      Query<?> query=ofy().load().type(obj.getClass());      int results=query.filter(fieldPath,fieldValue).count();      assertWithMessage(String.format("%s was %sindexed",fieldPath,indexed ? "not " : "")).that(indexed).isEqualTo(results != 0);    } catch (    IllegalArgumentException e) {      if (indexed || !e.getMessage().endsWith(" is not a supported property type.")) {        assert_().fail(String.format("%s was %sindexed",fieldPath,indexed ? "not " : ""));      }    }catch (    IllegalStateException e) {      assert_().fail(String.format("%s (indexed=%b): %s",fieldPath,indexed,e.getMessage()));    }  }}  }
class C{  public RegularExpressionSwitch(){  if (modelPackage == null) {    modelPackage=RegularExpressionPackage.eINSTANCE;  }}  }
class C{  public ConcurrentHashMap(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public static void listBuckets_test() throws Exception {  println("Test: listBuckets()");  for (  Bucket bucket : client.listBuckets()) {    println(bucket);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isPermissionDeclined(@NonNull String permissionsName){  return ActivityCompat.checkSelfPermission(context.getContext(),permissionsName) != PackageManager.PERMISSION_GRANTED;}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  private void newUnitReceived(GridUriDeploymentUnitDescriptor newDesc,Collection<Class<?>> clss){  assert newDesc != null;  assert newDesc.getType() == GridUriDeploymentUnitDescriptor.Type.FILE;  if (clss != null && !clss.isEmpty()) {    try {      addResources(newDesc.getClassLoader(),newDesc,clss.toArray(new Class<?>[clss.size()]));    } catch (    IgniteSpiException e) {      U.warn(log,"Failed to register GAR class loader [newDesc=" + newDesc + ", msg="+ e.getMessage()+ ']');    }  }  Collection<ClassLoader> rmvClsLdrs=new ArrayList<>();synchronized (mux) {    if (checkMd5 && unitDeployed(newDesc.getMd5())) {      if (log.isInfoEnabled())       LT.info(log,"Skipping new deployment unit because of md5 match " + "[uri='" + U.hidePassword(newDesc.getUri()) + "', file="+ (newDesc.getFile() == null ? "N/A" : newDesc.getFile())+ ']');      return;    }    boolean isAdded=false;    boolean ignoreNewUnit=false;    for (ListIterator<GridUriDeploymentUnitDescriptor> iter=unitLoaders.listIterator(); iter.hasNext(); ) {      GridUriDeploymentUnitDescriptor desc=iter.next();      assert !newDesc.getClassLoader().equals(desc.getClassLoader()) : "URI scanners always create new class loader for every GAR file: " + newDesc;      if (desc.getType() == GridUriDeploymentUnitDescriptor.Type.FILE && newDesc.getUri().equals(desc.getUri()) && !newDesc.getFile().equals(desc.getFile())) {        iter.remove();        rmvClsLdrs.add(desc.getClassLoader());        if (!iter.hasNext())         break;        continue;      }      if (!isAdded) {        if (unitComp.compare(newDesc,desc) <= 0) {          if (checkUnitCollision(desc,newDesc)) {            iter.remove();            iter.add(newDesc);            rmvClsLdrs.add(desc.getClassLoader());          } else {            iter.set(newDesc);            iter.add(desc);          }          isAdded=true;        } else         if (checkUnitCollision(newDesc,desc)) {          ignoreNewUnit=true;          break;        }      } else       if (checkUnitCollision(newDesc,desc)) {        iter.remove();        rmvClsLdrs.add(desc.getClassLoader());      }    }    if (!ignoreNewUnit) {      if (!isAdded)       unitLoaders.add(newDesc);      if (log.isDebugEnabled())       LT.info(log,"Class loader (re)registered [clsLdr=" + newDesc.getClassLoader() + ", tstamp="+ newDesc.getTimestamp()+ ", uri='"+ U.hidePassword(newDesc.getUri())+ "', file="+ (newDesc.getFile() == null ? "N/A" : newDesc.getFile())+ ']');    }  }  for (  ClassLoader cldLdr : rmvClsLdrs)   onUnitReleased(cldLdr);}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] data=new double[numFeatures];  double[] labels=new double[numClasses];  int numChanges=0;  if (!instance.classIsMissing()) {    for (int j=0; j < num_features; j++) {      data[j]=instance.value(num_classes + j);      data[j + num_features]=1 - data[j];    }    for (int j=0; j < num_classes; j++) {      labels[j]=instance.value(j);      labels[j + num_classes]=1 - labels[j];    }    SortPair[] cateacti=ARTActivateCategories(data);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    double matchB=0;    while (!resonance) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      matchA=ART_Calculate_Match(data,weightsA[currentCategory]);      if (sumArray(weightsB[currentCategory]) == 0) {        matchB=1;      } else {        matchB=ART_Calculate_Match(labels,weightsB[currentCategory]);      }      if (matchA >= roa && matchB >= rob) {        if (currentCategory == numCategories - 1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            for (int j=0; j < data.length; j++) {              weightsA[currentCategory][j]=data[j];            }            for (int j=0; j < weightsB[currentCategory].length; j++) {              weightsB[currentCategory][j]=labels[j];            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }  }}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println(String.format("Usage: %s <project-name>",CloudMonitoringAuthSample.class.getSimpleName()));    return;  }  String project=args[0];  CloudMonitoring cloudmonitoring=authenticate();  CloudMonitoring.Timeseries.List timeseriesListRequest=cloudmonitoring.timeseries().list(project,METRIC,YOUNGEST);  System.out.println("Timeseries.list raw response:");  System.out.println(timeseriesListRequest.execute().toPrettyString());}  }
class C{  void connect(){  ConnectDialog cd;  cd=new ConnectDialog(frame);  cd.setVisible(true);  if ((cd.playerName == null) || (cd.serverAddr == null) || (cd.port == 0)) {    return;  }  boolean foundValid=false;  char[] nameChars=cd.playerName.toCharArray();  for (int loop=0; !foundValid && (loop < nameChars.length); loop++) {    if (!Character.isWhitespace(nameChars[loop])) {      foundValid=true;    }  }  if (!foundValid) {    JOptionPane.showMessageDialog(frame,Messages.getString("MegaMek.ConnectAlert.message"),Messages.getString("MegaMek.ConnectAlert.title"),JOptionPane.ERROR_MESSAGE);    return;  }  client=new Client(cd.playerName,cd.serverAddr,cd.port);  ClientGUI gui=new ClientGUI(client,controller);  controller.clientgui=gui;  frame.setCursor(new Cursor(Cursor.WAIT_CURSOR));  gui.initialize();  frame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));  if (!client.connect()) {    StringBuffer error=new StringBuffer();    error.append("Error: could not connect to server at ").append(cd.serverAddr).append(':').append(cd.port).append('.');    JOptionPane.showMessageDialog(frame,error.toString(),Messages.getString("MegaMek.ConnectAlert.title"),JOptionPane.ERROR_MESSAGE);    frame.setVisible(false);    client.die();  }  launch(gui.getFrame());}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Vector2D)) {    return false;  }  Vector2D v=(Vector2D)o;  return x == v.x && y == v.y;}  }
class C{  public String outputString(ProcessingInstruction pi){  StringWriter out=new StringWriter();  try {    output(pi,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  public static boolean isValidEdge(Coordinate orig,Coordinate dest){  int cmp=dest.compareTo(orig);  return cmp != 0;}  }
class C{  private static Pointer computePointer(IntBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.INT);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    IntBuffer t=IntBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.INT);  }  return result;}  }
class C{  public ClassNode buildMapType(ClassNode keyType,ClassNode valueType){  return parameterizedType(ClassHelper.MAP_TYPE,keyType,valueType);}  }
class C{  private void releaseWriteBuffer(WriteBuffer buff){  if (buff.capacity() <= 4 * 1024 * 1024) {    writeBuffer=buff;  }}  }
class C{  @Override public boolean supportsSchemasInPrivilegeDefinitions(){  debugCodeCall("supportsSchemasInPrivilegeDefinitions");  return true;}  }
class C{  public boolean checkSequenceDuplicates(SequencesReader[] readers,File duplicatesOutputFile) throws IOException {  final PrereadNamesInterface[] prereadNames=new PrereadNamesInterface[readers.length];  for (int i=0; i < readers.length; i++) {    prereadNames[i]=readers[i] != null ? readers[i].names() : null;  }  return checkPrereadDuplicates(prereadNames,duplicatesOutputFile);}  }
class C{  public SuspectMember(InternalDistributedMember whoSuspected,InternalDistributedMember suspectedMember,String reason){  this.whoSuspected=whoSuspected;  this.suspectedMember=suspectedMember;  this.reason=reason;}  }
class C{  protected void beforeExecute(Thread t,Runnable r){}  }
class C{  public static boolean isActive(Context context){  InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  return imm.isActive();}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  @Override public String toString(){  return "value=" + m_Value + ", index="+ m_Index;}  }
class C{  private void assertProfile(Profile profile){  Assert.assertNotNull(profile);  Assert.assertNotNull(profile.getProcessedLanguage());  Assert.assertNotNull(profile.getConsumptionPreferences());  Assert.assertNotNull(profile.getValues());  Assert.assertNotNull(profile.getNeeds());  Assert.assertNotNull(profile.getPersonality());  Assert.assertNotNull(profile.getPersonality().get(0).getRawScore());  Assert.assertNotNull(profile.getWarnings());  Assert.assertTrue(profile.getWordCount() > 0);}  }
class C{  public void connect(NetworkInterface anotherInterface){  Connection con=new CBRConnection(this.getHost(),this,anotherInterface.getHost(),anotherInterface,transmitSpeed);  this.connect(con,anotherInterface);}  }
class C{  public Properties loadProperties(String file){  try {    Properties p=new Properties();    InputStream in=FileHelper.getInputStream(file);    if (file.endsWith(".xml")) {      p.loadFromXML(in);    } else {      p.load(in);    }    in.close();    return p;  } catch (  Exception e) {    throw new IllegalArgumentException("loadProperties error,file:" + file,e);  }}  }
class C{  public Date(){  this(System.currentTimeMillis());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__HAS_NO_BODY:    return isHasNoBody();case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__DECLARED_MEMBER_ACCESS_MODIFIER:  return getDeclaredMemberAccessModifier();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public DeletingUnitWithSubscriptionsNotPermittedException(){  super();}  }
class C{  public boolean isReadonly(){  return (java.lang.Boolean)getStateHelper().eval(PropertyKeys.readonly,false);}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  for (  String updatedVar : updatedVars) {    if (!paused && state.hasChanceNode(updatedVar) && trigger.match(updatedVar).isMatching()) {      ConditionalTable.Builder builder=new ConditionalTable.Builder("parse(" + updatedVar + ")");      for (      Value v : state.queryProb(updatedVar).toDiscrete().getValues()) {        if (!(v instanceof NoneVal)) {          RelationalVal parse=parse(v.toString());          builder.addRow(new Assignment(updatedVar,v),parse,1.0);        } else {          builder.addRow(new Assignment(updatedVar,v),ValueFactory.none(),1.0);        }      }      system.addContent(builder.build());    }  }}  }
class C{  private String _extractEntirePackageName(String className){  String packageName=null;  int index=className.lastIndexOf('.');  if (index != -1) {    packageName=className.substring(0,index);  }  return packageName;}  }
class C{  public void updateInt(int columnIndex,int x) throws SQLException {  checkUpdatable();  getField(columnIndex).setInteger(x);}  }
class C{  public boolean isPlain(){  return !(hasProperties | hasAggregation | hasSubselect| hasStreamSelect| hasPreviousPrior);}  }
class C{  public Metric(String scope,String metric){  this();  setScope(scope);  setMetric(metric);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TMETHOD__DECLARED_FINAL:    setDeclaredFinal((Boolean)newValue);  return;case TypesPackage.TMETHOD__DECLARED_STATIC:setDeclaredStatic((Boolean)newValue);return;case TypesPackage.TMETHOD__DECLARED_OVERRIDE:setDeclaredOverride((Boolean)newValue);return;case TypesPackage.TMETHOD__HAS_NO_BODY:setHasNoBody((Boolean)newValue);return;case TypesPackage.TMETHOD__DECLARED_MEMBER_ACCESS_MODIFIER:setDeclaredMemberAccessModifier((MemberAccessModifier)newValue);return;case TypesPackage.TMETHOD__DECLARED_ABSTRACT:setDeclaredAbstract((Boolean)newValue);return;case TypesPackage.TMETHOD__LACKS_THIS_OR_SUPER_USAGE:setLacksThisOrSuperUsage((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public synchronized void moveToInsertRow() throws SQLException {  checkClosed();  if (!this.isUpdatable) {    throw new NotUpdatable(this.notUpdatableReason);  }  if (this.inserter == null) {    if (this.insertSQL == null) {      generateStatements();    }    this.inserter=(PreparedStatement)this.connection.clientPrepareStatement(this.insertSQL);    if (this.populateInserterWithDefaultValues) {      extractDefaultValues();    }    resetInserter();  } else {    resetInserter();  }  int numFields=this.fields.length;  this.onInsertRow=true;  this.doingUpdates=false;  this.savedCurrentRow=this.thisRow;  byte[][] newRowData=new byte[numFields][];  this.thisRow=new ByteArrayRow(newRowData,getExceptionInterceptor());  this.thisRow.setMetadata(this.fields);  for (int i=0; i < numFields; i++) {    if (!this.populateInserterWithDefaultValues) {      this.inserter.setBytesNoEscapeNoQuotes(i + 1,StringUtils.getBytes("DEFAULT"));      newRowData=null;    } else {      if (this.defaultColumnValue[i] != null) {        Field f=this.fields[i];switch (f.getMysqlType()) {case MysqlDefs.FIELD_TYPE_DATE:case MysqlDefs.FIELD_TYPE_DATETIME:case MysqlDefs.FIELD_TYPE_NEWDATE:case MysqlDefs.FIELD_TYPE_TIME:case MysqlDefs.FIELD_TYPE_TIMESTAMP:          if (this.defaultColumnValue[i].length > 7 && this.defaultColumnValue[i][0] == (byte)'C' && this.defaultColumnValue[i][1] == (byte)'U' && this.defaultColumnValue[i][2] == (byte)'R' && this.defaultColumnValue[i][3] == (byte)'R' && this.defaultColumnValue[i][4] == (byte)'E' && this.defaultColumnValue[i][5] == (byte)'N' && this.defaultColumnValue[i][6] == (byte)'T' && this.defaultColumnValue[i][7] == (byte)'_') {            this.inserter.setBytesNoEscapeNoQuotes(i + 1,this.defaultColumnValue[i]);            break;          }        this.inserter.setBytes(i + 1,this.defaultColumnValue[i],false,false);      break;default :    this.inserter.setBytes(i + 1,this.defaultColumnValue[i],false,false);}byte[] defaultValueCopy=new byte[this.defaultColumnValue[i].length];System.arraycopy(this.defaultColumnValue[i],0,defaultValueCopy,0,defaultValueCopy.length);newRowData[i]=defaultValueCopy;} else {this.inserter.setNull(i + 1,java.sql.Types.NULL);newRowData[i]=null;}}}}  }
class C{  @Realtime(limit=LINEAR) public void and(BitSet that){  long[] thatBits=that.toLongArray();  int n=MathLib.min(this.bits.length,thatBits.length);  for (int i=0; i < n; i++) {    this.bits[i]&=thatBits[i];  }  for (int i=n; i < bits.length; i++) {    this.bits[i]=0L;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.EXECUTION_REGION__DEEP_ENTER_SEQUENCE:    return getDeepEnterSequence();case SexecPackage.EXECUTION_REGION__SHALLOW_ENTER_SEQUENCE:  return getShallowEnterSequence();case SexecPackage.EXECUTION_REGION__HISTORY_VECTOR:return getHistoryVector();case SexecPackage.EXECUTION_REGION__NODES:return getNodes();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String name(){  return name;}  }
class C{  public void dumpMessages(PrintStream out) throws MessagingException {  out.println("----- Start printing messages -----");  for (  WiserMessage wmsg : this.getMessages())   wmsg.dumpMessage(out);  out.println("----- End printing messages -----");}  }
class C{  public OptionCompleter(String... options){  this();  for (  String option : options) {    add(option);  }}  }
class C{  public HashSet(){  map=new HashMap();}  }
class C{  public Swarm start() throws Exception {  this.start(false);  return this;}  }
class C{  public void spin(){  isSpinning=true;  spinHandler.sendEmptyMessage(0);}  }
class C{  public void release() throws SQLException {  initContainer();  notifyRowSetChanged();}  }
class C{  private void initMediaPlayer(){  mCanRing=true;  Uri alert=Uri.parse(sSettingsMgr.ringtone);  if (alert.toString().equals("")) {    mCanRing=false;    return;  }  mMediaPlayer=new MediaPlayer();  try {    mMediaPlayer.setDataSource(sContext,alert);  } catch (  IOException ioe) {    try {      Log.w("Could not set chosen ringtone, falling back to system default ringtone");      mMediaPlayer.setDataSource(sContext,RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM));    } catch (    Exception e) {      mCanRing=false;    }  }catch (  Exception e) {    mCanRing=false;  }  if (mCanRing) {    mMediaPlayer.setAudioStreamType(AudioManager.STREAM_ALARM);    mMediaPlayer.setLooping(true);  } else {    mMediaPlayer=null;  }}  }
class C{  @Override public void close(){  close(desiredRecordsBuilder.build());}  }
class C{  private boolean isExtensionTimeLeft(){  if (this.sylviaConfig.isUseFixedTimeCycleAsMaximalExtension()) {    return this.extensionTime < this.activeSylviaPlan.getMaxExtensionTime();  }  return true;}  }
class C{  public static void printMagnitudes(){  printMagnitudes(System.out);}  }
class C{  @Override protected boolean isContainerActive(ContainerId containerId){  return false;}  }
class C{  public void addExceptionsFromMember(InternalDistributedMember member,Set exceptions){  for (Iterator iter=exceptions.iterator(); iter.hasNext(); ) {    Exception ex=(Exception)iter.next();    if (ex instanceof CancelException) {      cacheExceptions.add(member);    } else     if (ex instanceof RegionDestroyedException) {      String r=((RegionDestroyedException)ex).getRegionFullPath();      Set<InternalDistributedMember> members=regionExceptions.get(r);      if (members == null) {        members=new HashSet<InternalDistributedMember>();        regionExceptions.put(r,members);      }      members.add(member);    } else {      List el=(List)this.fatalExceptions.get(member);      if (el == null) {        el=new ArrayList(2);        this.fatalExceptions.put(member,el);      }      el.add(ex);    }  }}  }
class C{  public int compareToIgnoreCase(XMLString str){  return m_str.compareToIgnoreCase(str.toString());}  }
class C{  public String fetch(@NotNull URLConnection urlConnection){  requireNonNull(urlConnection,"urlConnection parameter can't be null");  final String value;  try (InputStream inputStream=urlConnection.getInputStream();BufferedReader reader=new BufferedReader(new InputStreamReader(new BoundedInputStream(inputStream,getLimit()),UTF_8))){    value=reader.lines().collect(Collectors.joining("\n"));  } catch (  IOException e) {    LOG.debug("Invalid URL",e);    return null;  }  return value;}  }
class C{  public IgniteTxHeuristicCheckedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void enable(Capability c){  m_Capabilities.enable(c);}  }
class C{  public static boolean isSameItem(@Nullable ItemStack itemStack1,@Nullable ItemStack itemStack2){  return itemStack1 != null && itemStack2 != null && itemStack1.isItemEqual(itemStack2);}  }
class C{  @Override public void visitReference(JCMemberReference tree){  ReferenceTranslationContext localContext=(ReferenceTranslationContext)context;  Symbol refSym=localContext.needsBridge() ? localContext.bridgeSym : localContext.isSignaturePolymorphic() ? localContext.sigPolySym : tree.sym;  if (localContext.needsBridge()) {    bridgeMemberReference(tree,localContext);  }  JCExpression init;switch (tree.kind) {case IMPLICIT_INNER:case SUPER:    init=makeThis(localContext.owner.enclClass().asType(),localContext.owner.enclClass());  break;case BOUND:init=tree.getQualifierExpression();init=attr.makeNullCheck(init);break;case UNBOUND:case STATIC:case TOPLEVEL:case ARRAY_CTOR:init=null;break;default :throw new InternalError("Should not have an invalid kind");}List<JCExpression> indy_args=init == null ? List.<JCExpression>nil() : translate(List.of(init),localContext.prev);result=makeMetafactoryIndyCall(localContext,localContext.referenceKind(),refSym,indy_args);}  }
class C{  public Env<AttrContext> classEnv(JCClassDecl tree,Env<AttrContext> env){  Env<AttrContext> localEnv=env.dup(tree,env.info.dup(new Scope(tree.sym)));  localEnv.enclClass=tree;  localEnv.outer=env;  localEnv.info.isSelfCall=false;  localEnv.info.lint=null;  return localEnv;}  }
class C{  public Person(String name,String address,String phone,String email){  this.name=name;  this.address=address;  this.phone=phone;  this.email=email;}  }
class C{  public void bindX(DoubleProperty xProperty){  minXWorld.bind(xProperty.add(getMinX()));  maxXWorld.bind(minXWorld.add(getWidth()));}  }
class C{  public static Coordinate inCentre(Coordinate a,Coordinate b,Coordinate c){  double len0=b.distance(c);  double len1=a.distance(c);  double len2=a.distance(b);  double circum=len0 + len1 + len2;  double inCentreX=(len0 * a.x + len1 * b.x + len2 * c.x) / circum;  double inCentreY=(len0 * a.y + len1 * b.y + len2 * c.y) / circum;  return new Coordinate(inCentreX,inCentreY);}  }
class C{  public boolean removeNotificationEmailAddress(String email){  if (email == null) {    throw new IllegalArgumentException("Adding email adress 'null'.");  } else   if (email.isEmpty()) {    throw new IllegalArgumentException("Adding empty email address.");  } else {    return notificationEmailAddresses.remove(email);  }}  }
class C{  @Inline public ObjectReference traceObject(ObjectReference object){  if (Space.isInSpace(Plan.VM_SPACE,object))   return (Plan.SCAN_BOOT_IMAGE) ? object : Plan.vmSpace.traceObject(this,object);  if (Space.isInSpace(Plan.IMMORTAL,object))   return Plan.immortalSpace.traceObject(this,object);  if (Space.isInSpace(Plan.LOS,object))   return Plan.loSpace.traceObject(this,object);  if (Space.isInSpace(Plan.NON_MOVING,object))   return Plan.nonMovingSpace.traceObject(this,object);  if (Plan.USE_CODE_SPACE && Space.isInSpace(Plan.SMALL_CODE,object))   return Plan.smallCodeSpace.traceObject(this,object);  if (Plan.USE_CODE_SPACE && Space.isInSpace(Plan.LARGE_CODE,object))   return Plan.largeCodeSpace.traceObject(this,object);  if (VM.VERIFY_ASSERTIONS) {    Log.write("Failing object => ");    Log.writeln(object);    Space.printVMMap();    VM.assertions._assert(false,"No special case for space in traceObject");  }  return ObjectReference.nullReference();}  }
class C{  public SpeechConfiguration(String audioFormat,boolean isAuthNeeded){  this.audioFormat=audioFormat;  this.isAuthNeeded=isAuthNeeded;}  }
class C{  JCMethodDecl bridge(){  int prevPos=make.pos;  try {    make.at(tree);    Type samDesc=localContext.bridgedRefSig();    List<Type> samPTypes=samDesc.getParameterTypes();    Type recType=null;switch (tree.kind) {case IMPLICIT_INNER:      recType=tree.sym.owner.type.getEnclosingType();    break;case BOUND:  recType=tree.getQualifierExpression().type;break;case UNBOUND:recType=samPTypes.head;samPTypes=samPTypes.tail;break;}VarSymbol rcvr=(recType == null) ? null : addParameter("rec$",recType,false);List<Type> refPTypes=tree.sym.type.getParameterTypes();int refSize=refPTypes.size();int samSize=samPTypes.size();int last=localContext.needsVarArgsConversion() ? refSize - 1 : refSize;List<Type> l=refPTypes;for (int i=0; l.nonEmpty() && i < last; ++i) {addParameter("x$" + i,l.head,true);l=l.tail;}for (int i=last; i < samSize; ++i) {addParameter("xva$" + i,tree.varargsElement,true);}JCMethodDecl bridgeDecl=make.MethodDef(make.Modifiers(localContext.bridgeSym.flags()),localContext.bridgeSym.name,make.QualIdent(samDesc.getReturnType().tsym),List.<JCTypeParameter>nil(),params.toList(),tree.sym.type.getThrownTypes() == null ? List.<JCExpression>nil() : make.Types(tree.sym.type.getThrownTypes()),null,null);bridgeDecl.sym=(MethodSymbol)localContext.bridgeSym;bridgeDecl.type=localContext.bridgeSym.type=types.createMethodTypeWithParameters(samDesc,TreeInfo.types(params.toList()));JCExpression bridgeExpr=(tree.getMode() == ReferenceMode.INVOKE) ? bridgeExpressionInvoke(makeReceiver(rcvr)) : bridgeExpressionNew();bridgeDecl.body=makeLambdaExpressionBody(bridgeExpr,bridgeDecl);return bridgeDecl;}  finally {make.at(prevPos);}}  }
class C{  public void addArgument(String data){  if (data == null)   throw new NullPointerException("The passed string is null, have you checked its validity?");  String temp=(data.length() > 255) ? data.substring(0,255) : data;  arguments.add(temp.getBytes(Charset.forName("US-ASCII")));}  }
class C{  public static synchronized X509CertificatePair generateCertificatePair(byte[] encoded) throws CertificateException {  Object key=new Cache.EqualByteArray(encoded);  X509CertificatePair pair=cache.get(key);  if (pair != null) {    return pair;  }  pair=new X509CertificatePair(encoded);  key=new Cache.EqualByteArray(pair.encoded);  cache.put(key,pair);  return pair;}  }
class C{  @Override public void createSingleVolumeSnapshot(StorageSystem storage,URI snapshot,Boolean createInactive,Boolean readOnly,TaskCompleter taskCompleter) throws DeviceControllerException {  List<String> targetDeviceIds=null;  try {    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    _log.info("createSingleVolumeSnapshot operation START");    Volume volume=_dbClient.queryObject(Volume.class,snapshotObj.getParent());    terminateAnyRestoreSessionsForVolume(storage,volume,taskCompleter);    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,volume.getTenant().getURI());    String tenantName=tenant.getLabel();    String snapLabelToUse=_nameGenerator.generate(tenantName,snapshotObj.getLabel(),snapshot.toString(),'-',storage.getUsingSmis80() ? SmisConstants.MAX_SMI80_SNAPSHOT_NAME_LENGTH : SmisConstants.MAX_SNAPSHOT_NAME_LENGTH);    CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] inArgs=null;    CIMArgument[] outArgs=new CIMArgument[5];    if (storage.checkIfVmax3()) {      CIMObjectPath volumeGroupPath=_helper.getVolumeGroupPath(storage,storage,volume,null);      CIMObjectPath poolPath=_helper.getVolumeStoragePoolPath(storage,volume);      targetDeviceIds=createTargetDevices(storage,poolPath,volumeGroupPath,null,"SingleSnapshot",snapLabelToUse,createInactive,1,volume.getCapacity(),taskCompleter);      CIMInstance replicaSettingData=_helper.getReplicationSettingData(storage,targetDeviceIds.get(0),false);      inArgs=_helper.getCreateElementReplicaSnapInputArgumentsWithTargetAndSetting(storage,volume,targetDeviceIds.get(0),replicaSettingData,createInactive,snapLabelToUse);    } else {      if (volume.getThinlyProvisioned()) {        CIMInstance replicationSetting=ReplicationUtils.getVPSnapReplicationSetting(storage,_helper,_cimPath);        inArgs=_helper.getCreateElementReplicaVPSnapInputArguments(storage,volume,createInactive,snapLabelToUse,replicationSetting);      } else {        inArgs=_helper.getCreateElementReplicaSnapInputArguments(storage,volume,createInactive,snapLabelToUse);      }    }    _helper.invokeMethod(storage,replicationSvcPath,SmisConstants.CREATE_ELEMENT_REPLICA,inArgs,outArgs);    CIMObjectPath job=_cimPath.getCimObjectPathFromOutputArgs(outArgs,SmisConstants.JOB);    if (job != null) {      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockCreateSnapshotJob(job,storage.getId(),!createInactive,taskCompleter)));    }  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);    setInactive(snapshot,true);    if (storage.checkIfVmax3()) {      rollbackCreateSnapshot(storage,null,targetDeviceIds,taskCompleter);    }  }}  }
class C{  private void readObject(){}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == TypeDefiningElement.class) {switch (derivedFeatureID) {case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DEFINED_TYPE:    return N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public synchronized void addExtension(PacketExtension extension){  if (applicationExtensions == null) {    applicationExtensions=new ArrayList<PacketExtension>();  }  applicationExtensions.add(extension);}  }
class C{  public boolean addSpringConfig(SpringConfig springConfig,String configName){  if (springConfig == null) {    throw new IllegalArgumentException("springConfig is required");  }  if (configName == null) {    throw new IllegalArgumentException("configName is required");  }  if (mSpringConfigMap.containsKey(springConfig)) {    return false;  }  mSpringConfigMap.put(springConfig,configName);  return true;}  }
class C{  private void handleFocusForQchat(String keyValuePairs){  long vsid=0;  int callState=0;  try {    String[] pairs;    String[] fields;    pairs=keyValuePairs.split(";");    for (    String item : pairs) {      Log.d(TAG,"keyValuePair is " + item);      fields=item.split("=");      if (item.startsWith(AudioManager.VSID_KEY)) {        vsid=Long.decode(fields[1]).longValue();      } else       if (item.startsWith(AudioManager.CALL_STATE_KEY)) {        callState=Integer.decode(fields[1]).intValue();      }    }  } catch (  Exception e) {    Log.e(TAG,"Invalid number format " + e);    return;  }  if (((vsid == AudioManager.VOICE_VSID) || (vsid == AudioManager.VOICE2_VSID) || (vsid == AudioManager.IMS_VSID)) && (callState == AudioManager.CALL_ACTIVE)) {    Log.d(TAG,"Telephony call is going to ACTIVE state, see if QCHAT needs to be closed ");synchronized (mAudioFocusLock) {      if ((!mFocusStack.isEmpty()) && (mFocusStack.peek().mClientId.contains(CLIENT_ID_QCHAT)) && (mFocusStack.peek().mFocusDispatcher != null)) {        try {          Log.d(TAG,"Dispatch focus loss to QCHAT ");          mFocusStack.peek().mFocusDispatcher.dispatchAudioFocusChange(-1 * mFocusStack.peek().mFocusChangeType,mFocusStack.peek().mClientId);        } catch (        RemoteException e) {          Log.e(TAG," Failure to signal loss of focus due to " + e);          e.printStackTrace();        }        FocusStackEntry fse=mFocusStack.pop();        fse.unlinkToDeath();      }    }  }}  }
class C{  void pop(){  ByteArrayOutputStream currentMessage=mMessage;  int currentPosition=mPosition;  mMessage=stack.currentMessage;  mPosition=stack.currentPosition;  toCopy=stack;  stack=stack.next;  stackSize=stackSize - 1;  toCopy.currentMessage=currentMessage;  toCopy.currentPosition=currentPosition;}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public Long updateFileOrFolderNameSelf(String SID,Long fileExplorerItemId,String fileName) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      log.debug("deleteFileOrFolder " + fileExplorerItemId);      fileExplorerItemDao.updateFileOrFolderName(fileExplorerItemId,fileName);    }  } catch (  Exception err) {    log.error("[updateFileOrFolderNameSelf] ",err);  }  return null;}  }
class C{  public static int binarySearch(byte[] array,byte value){  return binarySearch(array,0,array.length,value);}  }
class C{  public List<Connection> restoreConnections(Context context) throws PersistenceException {  String[] connectionColumns={COLUMN_HOST,COLUMN_port,COLUMN_client_ID,COLUMN_ssl,COLUMN_KEEP_ALIVE,COLUMN_CLEAN_SESSION,COLUMN_TIME_OUT,COLUMN_USER_NAME,COLUMN_PASSWORD,COLUMN_TOPIC,COLUMN_MESSAGE,COLUMN_RETAINED,COLUMN_QOS,_ID};  String sort=COLUMN_HOST;  SQLiteDatabase db=getReadableDatabase();  Cursor c=db.query(TABLE_CONNECTIONS,connectionColumns,null,null,null,null,sort);  ArrayList<Connection> list=new ArrayList<Connection>(c.getCount());  Connection connection=null;  for (int i=0; i < c.getCount(); i++) {    if (!c.moveToNext()) {      throw new PersistenceException("Failed restoring connection - count: " + c.getCount() + "loop iteration: "+ i);    }    Long id=c.getLong(c.getColumnIndexOrThrow(_ID));    String host=c.getString(c.getColumnIndexOrThrow(COLUMN_HOST));    String clientID=c.getString(c.getColumnIndexOrThrow(COLUMN_client_ID));    int port=c.getInt(c.getColumnIndexOrThrow(COLUMN_port));    String username=c.getString(c.getColumnIndexOrThrow(COLUMN_USER_NAME));    String password=c.getString(c.getColumnIndexOrThrow(COLUMN_PASSWORD));    String topic=c.getString(c.getColumnIndexOrThrow(COLUMN_TOPIC));    String message=c.getString(c.getColumnIndexOrThrow(COLUMN_MESSAGE));    int qos=c.getInt(c.getColumnIndexOrThrow(COLUMN_QOS));    int keepAlive=c.getInt(c.getColumnIndexOrThrow(COLUMN_KEEP_ALIVE));    int timeout=c.getInt(c.getColumnIndexOrThrow(COLUMN_TIME_OUT));    boolean cleanSession=c.getInt(c.getColumnIndexOrThrow(COLUMN_CLEAN_SESSION)) == 1 ? true : false;    boolean retained=c.getInt(c.getColumnIndexOrThrow(COLUMN_RETAINED)) == 1 ? true : false;    boolean ssl=c.getInt(c.getColumnIndexOrThrow(COLUMN_ssl)) == 1 ? true : false;    MqttConnectOptions opts=new MqttConnectOptions();    opts.setCleanSession(cleanSession);    opts.setKeepAliveInterval(keepAlive);    opts.setConnectionTimeout(timeout);    opts.setPassword(password != null ? password.toCharArray() : null);    opts.setUserName(username);    if (topic != null) {      opts.setWill(topic,message.getBytes(),qos,retained);    }    connection=Connection.createConnection(clientID,host,port,context,ssl);    connection.addConnectionOptions(opts);    connection.assignPersistenceId(id);    list.add(connection);  }  c.close();  db.close();  return list;}  }
class C{  @SuppressWarnings({"unchecked"}) public boolean contains(Object obj){  return index(obj) >= 0;}  }
class C{  public AppsAction(String action,KeyStroke accelerator,boolean toggle){  this(action,accelerator,null,toggle);}  }
class C{  public void run(final double axStart,final double bxStart,final double faStart,final double fbStart,final OneDimensionalFunction func){  double u, fu;  this.ax=axStart;  this.bx=bxStart;  this.fa=faStart;  this.fb=fbStart;  if (this.fb > this.fa) {    double dum=this.ax;    this.ax=this.bx;    this.bx=dum;    dum=this.fb;    this.fb=this.fa;    this.fa=dum;  }  this.cx=this.bx + GOLD * (this.bx - this.ax);  this.fc=func.evaluate(this.cx);  while (this.fb > this.fc) {    final double r=(this.bx - this.ax) * (this.fb - this.fc);    final double q=(this.bx - this.cx) * (this.fb - this.fa);    u=this.bx - ((this.bx - this.cx) * q - (this.bx - this.ax) * r) / (2.0 * sign(fmax(fabs(q - r),TINY),q - r));    final double ulim=this.bx + GLIMIT * (this.cx - this.bx);    if ((this.bx - u) * (u - this.cx) > 0.0) {      fu=func.evaluate(u);      if (fu < this.fc) {        this.ax=bx;        this.bx=u;        this.fa=fb;        this.fb=fu;        return;      } else       if (fu > this.fb) {        this.cx=u;        this.fc=fu;        return;      }      u=this.cx + GOLD * (this.cx - this.bx);      fu=func.evaluate(u);    } else     if ((this.cx - u) * (u - ulim) > 0.0) {      fu=func.evaluate(u);      if (fu < this.fc) {        this.bx=this.cx;        this.cx=u;        u=this.cx + GOLD * (this.cx - this.bx);        this.fb=this.fc;        this.fc=fu;        fu=func.evaluate(u);      }    } else     if ((u - ulim) * (ulim - this.cx) >= 0.0) {      u=ulim;      fu=func.evaluate(u);    } else {      u=this.cx + GOLD * (this.cx - this.bx);      fu=func.evaluate(u);    }    this.ax=this.bx;    this.bx=this.cx;    this.cx=u;    this.fa=this.fb;    this.fb=this.fc;    this.fc=fu;  }}  }
class C{  public void errorHandling(Exception error){  errorHandling(error,null);}  }
class C{  public JsonObject(){  names=new ArrayList<String>();  values=new ArrayList<JsonValue>();  table=new HashIndexTable();}  }
class C{  private String badRegister(long s){  return "Attempt to register more than " + MAX_PARTIES + " parties for "+ stateToString(s);}  }
class C{  public Contour(MatOfPoint2f data){  this.mat=new MatOfPoint(data.toArray());}  }
class C{  public static boolean isNotNullNotEmptyNotWhiteSpace(final String string){  return string != null && !string.isEmpty() && !string.trim().isEmpty();}  }
class C{  @Override public synchronized void removeDataSourceListener(DataSourceListener dsl){  m_listeners.remove(dsl);}  }
class C{  public TeXFormula(TeXFormula f){  if (f != null) {    addImpl(f);  }}  }
class C{  private boolean rangeCheck(final Object key,boolean allowUpperBound){  if (key == null) {    throw new IllegalArgumentException();  }  return rangeCheck(tupleSer.serializeKey(key),allowUpperBound);}  }
class C{  void addCallback(JSObject source,String method,JSFunction callback,boolean async){  String key=source.toJSPointer() + "." + method;  callbacks.put(key,callback);  String id=JSObject.ID_KEY;  String self=source.toJSPointer();  String js=self + "." + method+ "=function(){"+ "var len=arguments.length;var url='/!cn1command/"+ self+ "."+ method+ "?'; "+ "for (var i=0; i<len; i++){"+ "var val = arguments[i]; var strval=val;"+ "if ( (typeof(val) == 'object') || (typeof(val) == 'function')){ "+ "var id = val."+ id+ "; "+ "if (typeof(id)=='undefined' || typeof("+ jsLookupTable+ "[id]) == 'undefined' || "+ jsLookupTable+ "[id]."+ id+ "!=id){"+ jsLookupTable+ ".push(val); id="+ jsLookupTable+ ".indexOf(val); Object.defineProperty(val,\""+ id+ "\",{value:id, enumerable:false});"+ "}"+ "strval='"+ jsLookupTable+ "['+id+']'"+ "}"+ "url += encodeURIComponent(typeof(val))+'='+encodeURIComponent(strval);"+ "if (i < len-1){ url += '&';}"+ "} window.location.href=url;"+ "}";  exec(js,async);}  }
class C{  protected void print(String s){  out.print(s);  out.flush();}  }
class C{  public RecursiveTreeItem(final T value,Node graphic,Callback<RecursiveTreeObject<T>,ObservableList<T>> func){  super(value,graphic);  this.childrenFactory=func;  init(value);}  }
class C{  public IJavaElement findEnclosingElement(int elementType){  if (fCompilationUnit == null)   return null;  try {    IJavaElement element=fCompilationUnit.getElementAt(getStart());    if (element == null) {      element=fCompilationUnit;    }    return element.getAncestor(elementType);  } catch (  JavaModelException e) {    return null;  }}  }
class C{  public void write(OutputStream out) throws Exception {  PrintWriter bw=null;  try {    bw=new PrintWriter(out);    for (    ConfigBlock cb : this.changes) {      bw.println("[CHANGES]");      bw.println("[" + cb.getTime() + "]");      for (      Map.Entry<String,String> e : cb.getVariables().entrySet()) {        if (e.getValue() != null)         bw.println(e.getKey() + "=" + e.getValue()); else         bw.println(e.getKey() + "=");      }      bw.println();    }    if (this.startingConfig != null) {      bw.println("[STARTING]");      bw.println("[" + this.startingConfig.getTime() + "]");      for (      Map.Entry<String,String> e : this.startingConfig.getVariables().entrySet()) {        if (e.getValue() != null)         bw.println(e.getKey() + "=" + e.getValue()); else         bw.println(e.getKey() + "=");      }      bw.println();    }    if (this.lastCheckedConfig != null) {      bw.println("[LAST]");      bw.println("[" + this.lastCheckedConfig.getTime() + "]");      for (      Map.Entry<String,String> e : this.lastCheckedConfig.getVariables().entrySet()) {        if (e.getValue() != null)         bw.println(e.getKey() + "=" + e.getValue()); else         bw.println(e.getKey() + "=");      }    }  }  finally {    if (bw != null) {      try {        bw.flush();        bw.close();      } catch (      Exception ex) {      }    }  }}  }
class C{  public static String escapePath(String subject,SubstitutionFilterChain nextFilter,SubstitutionContext ctx){  String encoding="UTF-8";  if (FIND_ENCODING_PATTERN.matcher(subject).find()) {    encoding=subject.substring(0,subject.indexOf(':'));    subject=subject.substring(subject.indexOf(':') + 1);    if (!Charset.isSupported(encoding))     encoding="UTF-8";  }  subject=nextFilter.substitute(subject,ctx);  try {    return org.tuckey.web.filters.urlrewrite.utils.URLEncoder.encodePathSegment(subject,encoding);  } catch (  UnsupportedEncodingException e) {    log.error(e,e);  }  return "";}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   updateRunHeader();  return success;}  }
class C{  @Override public void onPause(){  super.onPause();  NIMClient.getService(MsgService.class).setChattingAccount(MsgService.MSG_CHATTING_ACCOUNT_NONE,SessionTypeEnum.None);  inputPanel.onPause();  messageListPanel.onPause();}  }
class C{  public void write(String s,int off,int len) throws IOException {  for (int i=off; i < off + len; i++)   write(s.charAt(i));}  }
class C{  public StoredFluidStack removeFluids(StoredFluidStack remove,INetworkCache network,ActionType action){  return remove;}  }
class C{  public MapBean(){  this(true);}  }
class C{  protected static String buildMessage(String msg){  StackTraceElement caller=new Throwable().fillInStackTrace().getStackTrace()[2];  return caller.getClassName() + "." + caller.getMethodName()+ "(): \n"+ msg;}  }
class C{  public void print(CtMethod method){  stream.println("\n" + getMethodString(method));  MethodInfo info=method.getMethodInfo2();  ConstPool pool=info.getConstPool();  CodeAttribute code=info.getCodeAttribute();  if (code == null)   return;  Frame[] frames;  try {    frames=(new Analyzer()).analyze(method.getDeclaringClass(),info);  } catch (  BadBytecode e) {    throw new RuntimeException(e);  }  int spacing=String.valueOf(code.getCodeLength()).length();  CodeIterator iterator=code.iterator();  while (iterator.hasNext()) {    int pos;    try {      pos=iterator.next();    } catch (    BadBytecode e) {      throw new RuntimeException(e);    }    stream.println(pos + ": " + InstructionPrinter.instructionString(iterator,pos,pool));    addSpacing(spacing + 3);    Frame frame=frames[pos];    if (frame == null) {      stream.println("--DEAD CODE--");      continue;    }    printStack(frame);    addSpacing(spacing + 3);    printLocals(frame);  }}  }
class C{  public TagTreeManager(final ITagTreeManager manager){  m_manager=manager;  m_root=clone(manager.getRootTag(),null);  manager.addListener(m_listener);}  }
class C{  @Override public boolean isValidLogin(final String login,final String password){  try {    OsmDto permissions=osmRestClient.getPermissions();    if (permissions.getPermissionsDto() != null && permissions.getPermissionsDto().getPermissionDtoList() != null) {      for (      PermissionDto permissionDto : permissions.getPermissionsDto().getPermissionDtoList()) {        if ("allow_write_api".equals(permissionDto.getName())) {          return true;        }      }    }  } catch (  RetrofitError e) {    Timber.e("Couldn't request permissions " + e);  }  return false;}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public static void main(String[] args){  int m=Integer.parseInt(args[0]);  for (int i=0; i < m; i++) {    BinaryStdOut.write(i);  }  BinaryStdOut.flush();}  }
class C{  public void clearDependencies(){  this.dependencies=Collections.emptyList();}  }
class C{  public void writeValue(final int length,final int value) throws EncodingException {  if (length > 31) {    throw ErrorFactory.createEncodingException(ErrorKeys.DIFFTOOL_ENCODING_VALUE_OUT_OF_RANGE,"more than maximum length: " + value);  }  for (int i=length - 1; i >= 0; i--) {    writeBit((value >> i) & 1);  }}  }
class C{  public static String stripCharsNotInBag(String s,String bag){  int i;  StringBuilder stringBuilder=new StringBuilder("");  for (i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (bag.indexOf(c) != -1)     stringBuilder.append(c);  }  return stringBuilder.toString();}  }
class C{  public String readToDelimiter(char delim) throws FormatException {  StringBuffer buildretval=new StringBuffer();  char tmp;  try {    while ((tmp=readChar()) != delim)     buildretval.append(tmp);  } catch (  EOFException e) {  }catch (  FormatException fe) {    if (buildretval.length() == 0) {      throw fe;    }  }  return buildretval.toString();}  }
class C{  public static void write(File file,CharSequence data) throws IOException {  write(file,data,Charset.defaultCharset(),false);}  }
class C{  protected OrientationRequested(int value){  super(value);}  }
class C{  public Vec3 extractEyePoint(Vec3 result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","extractEyePoint","missingResult"));  }  result.x=-(this.m[0] * this.m[3]) - (this.m[4] * this.m[7]) - (this.m[8] * this.m[11]);  result.y=-(this.m[1] * this.m[3]) - (this.m[5] * this.m[7]) - (this.m[9] * this.m[11]);  result.z=-(this.m[2] * this.m[3]) - (this.m[6] * this.m[7]) - (this.m[10] * this.m[11]);  return result;}  }
class C{  public static void checkDNS(String dns) throws IOException {  String string=dns.toLowerCase(Locale.US);  int length=string.length();  boolean first_letter=true;  for (int i=0; i < length; i++) {    char ch=string.charAt(i);    if (first_letter) {      if ((ch > 'z' || ch < 'a') && (ch < '0' || ch > '9') && (ch != '*')) {        throw new IOException("DNS name must start with a letter: " + dns);      }      first_letter=false;      continue;    }    if (!((ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || (ch == '-')|| (ch == '.')|| (ch == '*'))) {      throw new IOException("Incorrect DNS name: " + dns);    }    if (ch == '.') {      if (string.charAt(i - 1) == '-') {        throw new IOException("Incorrect DNS name: label ends with '-': " + dns);      }      first_letter=true;    }  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WStatus.init");}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  void didAbort(final Callable task,final Throwable t,final boolean waiting){  if (INFO)   log.info("Begin: nended=" + nended);  nerror.incrementAndGet();  try {    releaseLocks(waiting);  } catch (  Throwable t2) {    log.warn("Problem(s) releasing locks: " + t2,t2);  }  if (INFO)   log.info("Ended: nended=" + nended);}  }
class C{  public SweepLineEvent(Object label,double x,Object obj){  this.eventType=INSERT;  this.label=label;  xValue=x;  this.obj=obj;}  }
class C{  static BigDecimal bomQtyASI(int p_M_Product_ID,int p_M_AttributeSetInstance_ID,int p_M_Warehouse_ID,int p_M_Locator_ID,String p_what) throws SQLException {  boolean isBOM=false;  String ProductType=null;  boolean isStocked=false;  String sql="SELECT IsBOM, ProductType, IsStocked " + "FROM M_Product " + "WHERE M_Product_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_M_Product_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    isBOM="Y".equals(rs.getString(1));    ProductType=rs.getString(2);    isStocked="Y".equals(rs.getString(3));  }  rs.close();  pstmt.close();  if (ProductType == null)   return Compiere.ZERO;  if (!isBOM && (!ProductType.equals("I") || !isStocked))   return UNLIMITED;  if (isStocked) {    return getStorageQtyASI(p_M_Product_ID,p_M_AttributeSetInstance_ID,p_M_Warehouse_ID,p_M_Locator_ID,p_what);  }  BigDecimal quantity=UNLIMITED;  BigDecimal productQuantity=null;  sql="SELECT bl.M_Product_ID , CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS Qty , p.IsBOM , p.IsStocked, p.ProductType FROM PP_Product_BOM b " + "INNER JOIN M_Product p ON (p.M_Product_ID=b.M_Product_ID) " + "INNER JOIN PP_Product_BOMLine bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID) "+ "WHERE b.M_Product_ID = ?";  pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_M_Product_ID);  rs=pstmt.executeQuery();  while (rs.next()) {    int M_ProductBOM_ID=rs.getInt(1);    BigDecimal bomQty=rs.getBigDecimal(2);    isBOM="Y".equals(rs.getString(3));    isStocked="Y".equals(rs.getString(4));    ProductType=rs.getString(5);    if (ProductType.equals("I") && isStocked) {      productQuantity=getStorageQtyASI(M_ProductBOM_ID,p_M_AttributeSetInstance_ID,p_M_Warehouse_ID,p_M_Locator_ID,p_what);      int StdPrecision=getUOMPrecision(M_ProductBOM_ID);      productQuantity=productQuantity.setScale(StdPrecision,BigDecimal.ROUND_HALF_UP).divide(bomQty,BigDecimal.ROUND_HALF_UP);      if (productQuantity.compareTo(quantity) < 0)       quantity=productQuantity;    } else     if (isBOM) {      productQuantity=bomQtyASI(M_ProductBOM_ID,p_M_AttributeSetInstance_ID,p_M_Warehouse_ID,p_M_Locator_ID,p_what);      if (productQuantity.compareTo(quantity) < 0)       quantity=productQuantity;    }  }  rs.close();  pstmt.close();  if (quantity.signum() > 0) {    int StdPrecision=getUOMPrecision(p_M_Product_ID);    return quantity.setScale(StdPrecision,BigDecimal.ROUND_HALF_UP);  }  return Adempiere.ZERO;}  }
class C{  private void joinSelf(ServerHeartbeat server,String extAddress,int extPort,String address,int port,String serverHash){  if (server != _serverSelf) {    throw new IllegalStateException(L.l("Invalid self: {0} vs {1}",server,_serverSelf));  }  if (!serverHash.equals(_serverSelf.getMachineHash())) {    throw new IllegalStateException(L.l("Invalid server hash {0} against {1}:{2}({3})",_serverSelf,address,port,serverHash));  }  if (port != _serverSelf.port()) {    throw new IllegalStateException(L.l("Invalid server port {0} against {1}:{2}({3})",_serverSelf,address,port,serverHash));  }  boolean isSSL=false;  ServerHeartbeat extServer=getCluster().createServer(extAddress,extPort,isSSL);  server.setExternalServer(extServer);  server.setMachineHash(serverHash);  server.getRack().update(server.getUpdate());  heartbeatStart(server);  updateHubHeartbeatSelf();  log.fine("join self " + server);}  }
class C{  public JdbcRow(Object[] values){  _values=values;}  }
class C{  public ZyGraphLayoutSettings(final ZyGraphLayoutSettings settings){  m_type=null;  m_defaultGraphLayout=settings.getDefaultGraphLayout();  m_animateLayoutEdgeThreshold=settings.getAnimateLayoutEdgeThreshold();  m_animateLayoutNodeThreshold=settings.getAnimateLayoutNodeThreshold();  m_autoLayoutDeactivationThreshold=settings.getAutolayoutDeactivationThreshold();  m_automaticLayouting=settings.getAutomaticLayouting();  m_layoutAnimation=settings.getAnimateLayout();  m_layoutCalculationTimeWarningThreshold=settings.getLayoutCalculationTimeWarningThreshold();  m_visibilityWarningThreshold=settings.getVisibilityWarningTreshold();  m_circularSettings=new ZyGraphCircularSettings(settings.getCircularSettings());  m_hierarchicalSettings=new ZyGraphHierarchicalSettings(settings.getHierarchicalSettings());  m_orthogonalSettings=new ZyGraphOrthogonalSettings(settings.getOrthogonalSettings());  updateLayouter();}  }
class C{  public void select(int start,int end){  editor.select(start,end);  try {    editor.scrollRectToVisible(editor.modelToView(start));  } catch (  BadLocationException e) {    e.printStackTrace();  }}  }
class C{  private ByteString bytes(String str) throws Exception {  return ByteString.copyFrom(str.getBytes("ISO-8859-1"));}  }
class C{  public ValidEdgePredicate(Graph g){  m_g=g;}  }
class C{  private DiffPart decodePaste(final int blockSize_S,final int blockSize_B,final BitReader r) throws DecodingException {  if (blockSize_S < 1 || blockSize_B < 1) {    throw new DecodingException("Invalid value for blockSize_S: " + blockSize_S + " or blockSize_B: "+ blockSize_B);  }  int s=r.read(blockSize_S);  int b=r.read(blockSize_B);  DiffPart part=new DiffPart(DiffAction.PASTE);  part.setStart(s);  part.setText(Integer.toString(b));  r.skip();  return part;}  }
class C{  public double[] primal(){  double[] x=new double[n];  for (int i=0; i < m; i++)   if (basis[i] < n)   x[basis[i]]=a[i][m + n];  return x;}  }
class C{  private void freeNode(Node<T> node){  node.item=null;  Node<T> oldNew;  do {    oldNew=freeNode;    node.next=oldNew;  } while (!casNewNode(oldNew,node));}  }
class C{  public void testTrim(){  TungstenProperties tp=new TungstenProperties();  tp.setString("a"," a");  tp.setString("b","b ");  tp.setString("c"," c c ");  tp.setString("null",null);  tp.trim();  assertEquals("Left trim","a",tp.getString("a"));  assertEquals("Right trim","b",tp.getString("b"));  assertEquals("Center space","c c",tp.getString("c"));  assertNull("Null value",tp.getString("null"));}  }
class C{  public Properties toProperties(Resource data){  Properties properties=new Properties();  PropertyUtils.setPropertyIfNotNull(properties,ResourcePropertySet.RESOURCE_NAME,data.getName());  PropertyUtils.setPropertyIfNotNull(properties,ResourcePropertySet.RESOURCE_TYPE,data.getType());  PropertyUtils.setPropertyIfNotNull(properties,ResourcePropertySet.RESOURCE_CLASS,data.getClassName());  PropertyUtils.setPropertyIfNotNull(properties,ResourcePropertySet.RESOURCE_ID,data.getId());  PropertyUtils.setPropertyIfNotNull(properties,ResourcePropertySet.PARAMETERS,getParametersAsASemicolonDelimitedString(data));  return properties;}  }
class C{  public long id(){  return id;}  }
class C{  protected boolean useMidZoom(double beginZoom,double endZoom,double midZoom){  double a=Math.abs(endZoom - beginZoom);  double b=Math.abs(midZoom - Math.max(beginZoom,endZoom));  return a < b;}  }
class C{  public static List<HttpCookie> parse(String header){  return new CookieParser(header).parse();}  }
class C{  public void visitTypeApply(JCTypeApply tree){  JCTree clazz=translate(tree.clazz,null);  result=clazz;}  }
class C{  public WalkingIterator(PrefixResolver nscontext){  super(nscontext);}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  bundle.putCharSequenceArrayList(key,value);  return this;}  }
class C{  private static void addNodeActionForm(String action,String value,Locale locale,Element parent){  parent.addElement(XML_ACTION_TEXT).addText(action);  parent.addElement(XML_FLDID_TEXT).addText(value);  parent.addElement(XML_ERROR_TEXT).addText(RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_VALIDATIONCODE_ERROR));}  }
class C{  @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  if (!controller.isEnableSQLDatabaseOutput()) {    boolean zipComp=controller.isZipCompressionEnabled();    boolean multiFile=controller.isMultipleOutputFiles();    builder.append("\t<output>\r\n");    builder.append("\t\t<OUTPUT_MODE>");    OutputCompressionEnum comp=controller.getOutputCompression();switch (comp) {case None:      builder.append(OutputType.UNCOMPRESSED);    break;case BZip2:  builder.append(OutputType.BZIP2);break;case SevenZip:builder.append(OutputType.SEVENZIP);break;default :throw new RuntimeException("Illegal Output Compression Mode");}builder.append("</OUTPUT_MODE>\r\n");String path=this.outputPathField.getText();if (path == null || path.equals("")) {errors.add(new ConfigItem(ConfigItemTypes.WARNING,ConfigErrorKeys.MISSING_VALUE,"No output path has been set."));}if (!path.endsWith(File.separator) && path.contains(File.separator)) {path+=File.separator;}builder.append("\t\t<PATH>\"" + path + "\"</PATH>\r\n");if (multiFile) {long sizeLimit=-1;String text=outputSizeLimitField.getText();if (text.length() == 0) {errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The output limit is missing."));} else {try {sizeLimit=Long.parseLong(text);if (sizeLimit < 100 * 1024 * 1024) {errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"The output limit has to be at" + " least 100MB"));}} catch (NumberFormatException nfe) {errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.ILLEGAL_INPUT,"NumberFormatException for the" + " output limit"));}}switch (comp) {case None:builder.append("\t\t<LIMIT_SQL_FILE_SIZE>" + sizeLimit + "</LIMIT_SQL_FILE_SIZE>\r\n");break;default :builder.append("\t\t<LIMIT_SQL_ARCHIVE_SIZE>" + sizeLimit + "</LIMIT_SQL_ARCHIVE_SIZE>\r\n");break;}}builder.append("\t\t<MODE_ZIP_COMPRESSION_ENABLED>" + zipComp + "</MODE_ZIP_COMPRESSION_ENABLED>\r\n");if (controller.isEnableDataFileOutput()) {builder.append("\t\t<MODE_DATAFILE_OUTPUT>true</MODE_DATAFILE_OUTPUT>\r\n");} else {builder.append("\t\t<MODE_DATAFILE_OUTPUT>false</MODE_DATAFILE_OUTPUT>\r\n");}builder.append("\t</output>\r\n");}}  }
class C{  public void applyData(Object data,int... ids){  applyData(null,data,ids);}  }
class C{  public PublisherConcatArray<T> concatAdditionalSourceFirst(Publisher<? extends T> source){  int n=array.length;  @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];  System.arraycopy(array,0,newArray,1,n);  newArray[0]=source;  return new PublisherConcatArray<>(delayError,newArray);}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  private void updateAnimationInterpolated(){  double interpolatedFrameIndex=1.0D - (double)this.tickCounter / (double)this.parentAnimationMetadata.getFrameTimeSingle(this.frameCounter);  int frameIndex=this.parentAnimationMetadata.getFrameIndex(this.frameCounter);  int frameCount=this.parentAnimationMetadata.getFrameCount() == 0 ? this.framesTextureData.size() : this.parentAnimationMetadata.getFrameCount();  int nextFrameIndex=this.parentAnimationMetadata.getFrameIndex((this.frameCounter + 1) % frameCount);  if (frameIndex != nextFrameIndex && nextFrameIndex >= 0 && nextFrameIndex < this.framesTextureData.size()) {    int[][] frame=(int[][])this.framesTextureData.get(frameIndex);    int[][] nextFrame=(int[][])this.framesTextureData.get(nextFrameIndex);    if (this.interpolatedFrameData == null || this.interpolatedFrameData.length != frame.length) {      this.interpolatedFrameData=new int[frame.length][];    }    for (int mipmapLevel=0; mipmapLevel < frame.length; ++mipmapLevel) {      if (this.interpolatedFrameData[mipmapLevel] == null) {        this.interpolatedFrameData[mipmapLevel]=new int[frame[mipmapLevel].length];      }      if (mipmapLevel < nextFrame.length && nextFrame[mipmapLevel].length == frame[mipmapLevel].length) {        for (int framePixelIndex=0; framePixelIndex < frame[mipmapLevel].length; ++framePixelIndex) {          int pixel=frame[mipmapLevel][framePixelIndex];          int nextPixel=nextFrame[mipmapLevel][framePixelIndex];          int interpR=this.interpolateColor(interpolatedFrameIndex,pixel >> 16 & 255,nextPixel >> 16 & 255);          int interpG=this.interpolateColor(interpolatedFrameIndex,pixel >> 8 & 255,nextPixel >> 8 & 255);          int interpB=this.interpolateColor(interpolatedFrameIndex,pixel & 255,nextPixel & 255);          this.interpolatedFrameData[mipmapLevel][framePixelIndex]=pixel & -16777216 | interpR << 16 | interpG << 8 | interpB;        }      }    }    TextureUtil.uploadTextureMipmap(this.interpolatedFrameData,this.width,this.height,this.originX,this.originY,false,false);  }}  }
class C{  private boolean havePage(int pageIndex){  if (pageIndex < 0 || pageIndex >= getNumberOfPages())   return false;  return true;}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  static void checkDesc(final String desc,final boolean canBeVoid){  int end=checkDesc(desc,0,canBeVoid);  if (end != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public boolean isInit(){  return init;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  static void svd_dsort2(int igap,int n,double[] array1,double[] array2){  double temp;  int i, j, index;  if (0 == igap)   return; else {    for (i=igap; i < n; i++) {      j=i - igap;      index=i;      while (j >= 0 && array1[j] > array1[index]) {        temp=array1[j];        array1[j]=array1[index];        array1[index]=temp;        temp=array2[j];        array2[j]=array2[index];        array2[index]=temp;        j-=igap;        index=j + igap;      }    }  }  svd_dsort2(igap / 2,n,array1,array2);}  }
class C{  @SuppressWarnings("unused") public void onEvent(LogoutEvent event){  finish();}  }
class C{  public Table createTable(CreateTableData data){synchronized (database) {    if (!data.temporary || data.globalTemporary) {      database.lockMeta(data.session);    }    data.schema=this;    if (data.tableEngine == null) {      DbSettings s=database.getSettings();      if (s.defaultTableEngine != null) {        data.tableEngine=s.defaultTableEngine;      } else       if (s.mvStore) {        data.tableEngine=MVTableEngine.class.getName();      }    }    if (data.tableEngine != null) {      return database.getTableEngine(data.tableEngine).createTable(data);    }    return new RegularTable(data);  }}  }
class C{  @LmlAction("quit") public void hideDialog(){  if (Actors.isShown(dialog)) {    dialog.hide();  }}  }
class C{  public void initialize(Context context,boolean is24HourMode,boolean hasInnerCircle,boolean disappearsOut,int selectionDegrees,boolean isInnerCircle){  if (mIsInitialized) {    Log.e(TAG,"This RadialSelectorView may only be initialized once.");    return;  }  Resources res=context.getResources();  int accentColor=res.getColor(R.color.mdtp_accent_color);  mPaint.setColor(accentColor);  mPaint.setAntiAlias(true);  mSelectionAlpha=SELECTED_ALPHA;  mIs24HourMode=is24HourMode;  if (is24HourMode) {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_circle_radius_multiplier_24HourMode));  } else {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_circle_radius_multiplier));    mAmPmCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_ampm_circle_radius_multiplier));  }  mHasInnerCircle=hasInnerCircle;  if (hasInnerCircle) {    mInnerNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_inner));    mOuterNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_outer));  } else {    mNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_normal));  }  mSelectionRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_selection_radius_multiplier));  mAnimationRadiusMultiplier=1;  mTransitionMidRadiusMultiplier=1f + (0.05f * (disappearsOut ? -1 : 1));  mTransitionEndRadiusMultiplier=1f + (0.3f * (disappearsOut ? 1 : -1));  mInvalidateUpdateListener=new InvalidateUpdateListener();  setSelection(selectionDegrees,isInnerCircle,false);  mIsInitialized=true;}  }
class C{  public void collapse(GraphNode master,Collection<GraphNode> picked,boolean erase,Object author){  collapser.collapse(master,picked,erase);  fireCollapseChanged(Collections.singleton(collapser.getCollapseData(master)),CollapseData.EMPTY_LIST,author);}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  @Override boolean isMasterConnection(){  return connectedToPrimaryHost();}  }
class C{  public static RowValue of(final FieldValue... fieldValues){  return new RowValue(fieldValues);}  }
class C{  public void adjustPointer(int adjustment){  mPointer+=adjustment;}  }
class C{  public static int signedLeb128Size(long value){  long remaining=value >> 7;  int count=0;  boolean hasMore=true;  int end=((value & Integer.MIN_VALUE) == 0) ? 0 : -1;  while (hasMore) {    hasMore=(remaining != end) || ((remaining & 1) != ((value >> 6) & 1));    value=remaining;    remaining>>=7;    count++;  }  return count;}  }
class C{  public void testShiftLeft2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-27;  byte rBytes[]={48,7,12,-97,-42,-117,37,-85,96};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public void saveAsJPG(String file) throws IOException {  save(file,"jpg");}  }
class C{  public NotificationChain basicSetLhs(Expression newLhs,NotificationChain msgs){  Expression oldLhs=lhs;  lhs=newLhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ASSIGNMENT_EXPRESSION__LHS,oldLhs,newLhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void isElementWellFormed(Node node){  boolean isNameWF=false;  if ((fFeatures & NAMESPACES) != 0) {    isNameWF=isValidQName(node.getPrefix(),node.getLocalName(),fIsXMLVersion11);  } else {    isNameWF=isXMLName(node.getNodeName(),fIsXMLVersion11);  }  if (!isNameWF) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"Element",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }}  }
class C{  @Override public boolean isTransformable(){  for (  Figure f : children) {    if (!f.isTransformable()) {      return false;    }  }  return true;}  }
class C{  private void prepareNoDictionaryMapping(List<CarbonDimension> dims,GraphConfigurationInfo graphConfig){  List<Boolean> noDictionaryMapping=new ArrayList<Boolean>();  for (  CarbonDimension dimension : dims) {    if (dimension.getNumberOfChild() > 0) {      break;    }    if (!dimension.getEncoder().contains(Encoding.DICTIONARY)) {      noDictionaryMapping.add(true);    } else {      noDictionaryMapping.add(false);    }  }  graphConfig.setIsNoDictionaryDimMapping(noDictionaryMapping.toArray(new Boolean[noDictionaryMapping.size()]));}  }
class C{  public void putAll(Bundle map){  unparcel();  map.unparcel();  mMap.putAll(map.mMap);  mHasFds|=map.mHasFds;  mFdsKnown=mFdsKnown && map.mFdsKnown;}  }
class C{  public short[] toArray(int start,int len){  int remaining=len;  int pos=0;  short[] array=new short[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    short[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);}  }
class C{  public void mousePressed(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());    mousePressed=true;  }}  }
class C{  public void pointValuesToPixel(float[] pts){  mMatrixValueToPx.mapPoints(pts);  mViewPortHandler.getMatrixTouch().mapPoints(pts);  mMatrixOffset.mapPoints(pts);}  }
class C{  private static final double ppmToM(double ppm){  return 1d + (ppm / 1000000d);}  }
class C{  public AbstractBaleenComponent(){}  }
class C{  private static Map applyRangeMap(final Map map,final long low,final long high){  final long capacity=(high != -1 ? high : map.size()) - low;  final Map result=new LinkedHashMap((int)Math.min(capacity,map.size()));  long c=0L;  for (  final Object obj : map.entrySet()) {    final Map.Entry entry=(Map.Entry)obj;    if (c >= low) {      if (c < high || high == -1) {        result.put(entry.getKey(),entry.getValue());      } else       break;    }    c++;  }  return result;}  }
class C{  public String toString(){  if ((dir == null) && (x != UNDEFINED)) {    return String.format("Action: " + type + " at "+ x+ ", "+ y+ ".");  } else   if ((dir != null)) {    return String.format("Action: " + type + " in direction "+ dir+ ".");  } else {    return String.format("Action: " + type + ".");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:44.576 -0500",hash_original_method="EC59E00085E1F31ADDA0DBE4C60C3840",hash_generated_method="CD39698D2E50D07981213FC662C1DBF5") public static URI resolve(final URI baseURI,final String reference){  return URIUtils.resolve(baseURI,URI.create(reference));}  }
class C{  public boolean contains(long millisInstant){  long thisStart=getStartMillis();  long thisEnd=getEndMillis();  return (millisInstant >= thisStart && millisInstant < thisEnd);}  }
class C{  public String compose(String s){  return Normalizer.normalize(s,Form.NFC);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  default B forceAddCustomEffect(final StatusEffect effect){  this.meta().addCustomEffect(effect,false);  return this.getBuilder();}  }
class C{  public String toJsonHtml(Object body){  for (int i=1; ; i++) {    try {      return this.pretty.toJson(body);    } catch (    IllegalStateException e) {      handleIllegalStateException(e,i);    }  }}  }
class C{  public StringAttributeRule(String name,String description,String[][] valid,boolean optional){  this(name,description,null,optional,0,Integer.MAX_VALUE);  validValues=new ArrayList<String>();  for (  String[] aValid : valid) {    for (    String anAValid : aValid) {      validValues.add(anAValid);    }  }  this.example=null;}  }
class C{  static Object[] toArrayImpl(Collection<?> c){  return fillArray(c,new Object[c.size()]);}  }
class C{  private void draw(){  if (mDrawer == null)   return;  if (mDrawer.shouldDraw()) {    SurfaceHolder holder=getSurfaceHolder();    Canvas c=null;    try {      c=holder.lockCanvas();      if (c != null) {        mDrawer.draw(c);      }    }  finally {      if (c != null)       holder.unlockCanvasAndPost(c);    }  }  mHandler.removeCallbacks(mUpdateDisplay);  if (mVisible) {    mHandler.postDelayed(mUpdateDisplay,33);  }}  }
class C{  protected void engineSetPadding(String paddingScheme) throws NoSuchPaddingException {  core.setPadding(paddingScheme);}  }
class C{  public UnitLocation(int id,Coords coords,int facing,int elevation){  this.entityId=id;  this.coords=coords;  this.facing=facing;  this.elevation=elevation;}  }
class C{  protected final void storeState(){}  }
class C{  private void allocateOffHeapSerialized(){  Object regionEntryValue=getValue();  storedObject=createValueAsSerializedStoredObject(regionEntryValue);  deserializedRegionEntryValue=storedObject.getValueAsDeserializedHeapObject();  serializedRegionEntryValue=storedObject.getSerializedValue();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == GET_CODE) {    Editable text=(Editable)mResults.getText();    if (resultCode == RESULT_CANCELED) {      text.append("(cancelled)");    } else {      text.append("(okay ");      text.append(Integer.toString(resultCode));      text.append(") ");      if (data != null) {        text.append(data.getAction());      }    }    text.append("\n");  }}  }
class C{  private void addNestingInformation(Map<String,List<String>> modelAccessionNestsModelAccession){  for (  String nestingModelAc : modelAccessionNestsModelAccession.keySet()) {    for (    String nestedModelAc : modelAccessionNestsModelAccession.get(nestingModelAc)) {      PfamModel nestingModel=clanData.getModelByModelAccession(nestingModelAc);      PfamModel nestedModel=clanData.getModelByModelAccession(nestedModelAc);      if (nestingModel == null) {        throw new IllegalStateException("Attempting to update PfamModel with AC " + nestingModelAc + " with nesting information, but cannot find it!");      }      if (nestedModel == null) {        throw new IllegalStateException("Attempting to update PfamModel with AC " + nestedModelAc + " with nesting information, but cannot find it!");      }      if (nestingModel.isNestedIn(nestedModel)) {        throw new IllegalStateException("Circularity detected in Clan file nesting relationship between model ACs " + nestedModelAc + " and "+ nestingModelAc+ '.');      }      nestedModel.addModelThisIsNestedIn(nestingModel);    }  }}  }
class C{  public AsyncResult BrowseAsync(BrowseRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  private void resetContent(){  resetExportButtons();  if (currentCsvFile.getContent() != null) {    currentCsvFile.getContent().getValidationError().addListener(weakErrorListListener);    currentCsvFile.getContent().setValidationConfiguration(currentConfigFile.getContent());    validationEditorController.setValidationConfiguration(currentConfigFile.getContent());    tableView=new TableView<>();    bindLineNumber();    bindMenuItemsToTableSelection(deleteRowMenuItem);    bindButtonsToTableSelection(deleteRowButton);    for (    String column : currentCsvFile.getContent().getHeader()) {      addColumn(column,tableView);    }    tableView.getItems().setAll(currentCsvFile.getContent().getRows());    tableView.setEditable(true);    setBottomAnchor(tableView,0.0);    setTopAnchor(tableView,0.0);    setLeftAnchor(tableView,0.0);    setRightAnchor(tableView,0.0);    tableWrapper.getChildren().setAll(tableView);    errorSideBar.setModel(currentCsvFile.getContent());    binExportButtons();  }}  }
class C{  private String transform(Source source,TranslationInfo translations,String packageName,String className,String locale){  String lineSep=System.getProperty("line.separator");  String bundleName=I18nUtils.bundleNameFromClassName(className);  String[] codePieces={codegenImports(translations.getClassReferences()),"[ExcludeClass]",lineSep,lineSep,"public class ",className," extends ResourceBundle",lineSep,"{",lineSep,codegenAtEmbeds(translations.getEmeds()),"    public function ",className,"()",lineSep,"    {",lineSep,codegenSuper(locale,bundleName),lineSep,"    }",lineSep,lineSep,"    override protected function getContent():Object",lineSep,"    {",lineSep,"        var content:Object =",lineSep,"        {",lineSep,codegenContent(translations.getTranslationSet()),"        };",lineSep,"        return content;",lineSep,"    }",lineSep,"}",lineSep,lineSep};  return StringJoiner.join(codePieces,null);}  }
class C{  private void clearSearchHistory(){  SearchRecentSuggestions suggestions=new SearchRecentSuggestions(this,SearchSuggestionSampleProvider.AUTHORITY,SearchSuggestionSampleProvider.MODE);  suggestions.clearHistory();}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  public void removeUser(){  this.authority.removeUserInfo();}  }
class C{  public static KDCOptions parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new KDCOptions(subDer);  }}  }
class C{  protected void initDamage(PhysicalAttackType physicalAttackType,EntityState shooterState,EntityState targetState,boolean guess,IGame game){  final String METHOD_NAME="initDamage(PhysicalAttackType, EntityState, EntityState, boolean, IGame)";  StringBuilder msg=new StringBuilder("Initializing Damage for ").append(getShooter().getDisplayName()).append(" ").append(physicalAttackType.toString()).append(" at ").append(getTarget().getDisplayName()).append(":");  if (!(getShooter() instanceof Mech)) {    owner.log(getClass(),METHOD_NAME,LogLevel.WARNING,msg.append("\n\tNot a mech!").toString());    setProbabilityToHit(0);    setMaxDamage(0);    setExpectedCriticals(0);    setKillProbability(0);    setExpectedDamageOnHit(0);    return;  }  if (shooterState == null) {    shooterState=new EntityState(getShooter());  }  if (targetState == null) {    targetState=new EntityState(getTarget());  }  if (guess) {    setHitData(owner.getFireControl().guessToHitModifierPhysical(getShooter(),shooterState,getTarget(),targetState,getAttackType(),game));  } else {    PhysicalAttackAction action=buildAction(physicalAttackType,getShooter().getId(),getTarget());    setAction(action);    setHitData(physicalAttackType.isPunch() ? ((PunchAttackAction)action).toHit(game) : ((KickAttackAction)action).toHit(game));  }  setDamageDirection(targetState,shooterState.getPosition());  if (getHitData().getValue() > 12) {    owner.log(getClass(),METHOD_NAME,LogLevel.INFO,msg.append("\n\tImpossible toHit: ").append(getHitData().getValue()).toString());    setProbabilityToHit(0);    setMaxDamage(0);    setExpectedCriticals(0);    setKillProbability(0);    setExpectedDamageOnHit(0);    return;  }  if (physicalAttackType.isPunch()) {    if ((getShooter() instanceof BipedMech) || (getShooter() instanceof TripodMech)) {      setMaxDamage((int)Math.ceil(getShooter().getWeight() / 10.0));    } else {      owner.log(getClass(),METHOD_NAME,LogLevel.WARNING,msg.append("\n\tnon-biped/tripod trying to punch!").toString());      setProbabilityToHit(0);      setMaxDamage(0);      setExpectedCriticals(0);      setKillProbability(0);      setExpectedDamageOnHit(0);      return;    }  } else {    setMaxDamage((int)Math.floor(getShooter().getWeight() / 5.0));  }  if (shooterState.hasNaturalAptPiloting()) {    msg.append("\n\tAttacker has Natural Aptitude Piloting");  }  setProbabilityToHit(Compute.oddsAbove(getHitData().getValue(),shooterState.hasNaturalAptPiloting()) / 100.0);  setExpectedDamageOnHit(getMaxDamage());  double expectedCriticalHitCount=ProbabilityCalculator.getExpectedCriticalHitCount();  final double ROLL_TWO=0.028;  setExpectedCriticals(ROLL_TWO * expectedCriticalHitCount * getProbabilityToHit());  setKillProbability(0);  if (!(getTarget() instanceof Mech)) {    return;  }  Mech targetMech=(Mech)getTarget();  for (int i=0; i <= 7; i++) {    int hitLoc=i;    while (targetMech.isLocationBad(hitLoc) && (hitLoc != Mech.LOC_CT) && (hitLoc != Mech.LOC_HEAD)) {      if (hitLoc > 7) {        hitLoc=0;      }      hitLoc=Mech.getInnerLocation(hitLoc);    }    double hitLocationProbability;    if (getAttackType().isPunch()) {      hitLocationProbability=ProbabilityCalculator.getHitProbability_Punch(getDamageDirection(),hitLoc);    } else {      hitLocationProbability=ProbabilityCalculator.getHitProbability_Kick(getDamageDirection(),hitLoc);    }    int targetArmor=targetMech.getArmor(hitLoc,(getDamageDirection() == 3));    int targetInternals=targetMech.getInternal(hitLoc);    if (targetArmor < 0) {      targetArmor=0;    }    if (targetInternals < 0) {      targetInternals=0;    }    if (getExpectedDamageOnHit() > ((targetArmor + targetInternals))) {      setExpectedCriticals(getExpectedCriticals() + hitLocationProbability * getProbabilityToHit());      if ((hitLoc == Mech.LOC_HEAD) || (hitLoc == Mech.LOC_CT)) {        setKillProbability(getKillProbability() + hitLocationProbability * getProbabilityToHit());      }    } else     if (getExpectedDamageOnHit() > (targetArmor)) {      setExpectedCriticals(getExpectedCriticals() + hitLocationProbability * ProbabilityCalculator.getExpectedCriticalHitCount() * getProbabilityToHit());    }  }}  }
class C{  public static int dip2px(Context context,float dipValue){  return (int)(dipValue * context.getResources().getDisplayMetrics().density + 0.5f);}  }
class C{  public void clear(){  mInjectedPointersDown=0;}  }
class C{  private String checkLogin(Properties ctx,int AD_User_ID,int AD_Role_ID,int AD_Client_ID,int AD_Org_ID,int M_Warehouse_ID){  String loginInfo=null;  String sql="SELECT u.Name || '@' || c.Name || '.' || o.Name || ' [' || INITCAP(USER) || ']' AS Text " + "FROM AD_User u, AD_Client c, AD_Org o, AD_User_Roles ur " + "WHERE u.AD_User_ID=?"+ " AND c.AD_Client_ID=?"+ " AND o.AD_Org_ID=?"+ " AND ur.AD_Role_ID=?"+ " AND ur.AD_User_ID=u.AD_User_ID"+ " AND (o.AD_Client_ID = 0 OR o.AD_Client_ID=c.AD_Client_ID)"+ " AND c.AD_Client_ID IN (SELECT AD_Client_ID FROM AD_Role_OrgAccess ca WHERE ca.AD_Role_ID=ur.AD_Role_ID)"+ " AND o.AD_Org_ID IN (SELECT AD_Org_ID FROM AD_Role_OrgAccess ca WHERE ca.AD_Role_ID=ur.AD_Role_ID)";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_User_ID);    pstmt.setInt(2,AD_Client_ID);    pstmt.setInt(3,AD_Org_ID);    pstmt.setInt(4,AD_Role_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     loginInfo=rs.getString(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (loginInfo == null)   return null;  KeyNamePair org=new KeyNamePair(AD_Org_ID,String.valueOf(AD_Org_ID));  KeyNamePair wh=null;  if (M_Warehouse_ID > 0)   wh=new KeyNamePair(M_Warehouse_ID,String.valueOf(M_Warehouse_ID));  Timestamp date=null;  String printer=null;  Login login=new Login(ctx);  login.loadPreferences(org,wh,date,printer);  Env.setContext(ctx,"#ShowAcct","N");  Env.setContext(ctx,"#ShowTrl","N");  return loginInfo;}  }
class C{  private void populate(Signature signature) throws Exception {  Signature substitute=new Signature(signature);  for (  Parameter parameter : signature) {    Parameter replace=create(parameter);    if (replace != null) {      substitute.add(replace);    }  }  create(substitute);}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public UnconfirmedTransactionMetaDataPair(final Transaction transaction,final UnconfirmedTransactionMetaData metaData){  super("transaction","meta",transaction,metaData);}  }
class C{  private int readDecimalPlacesSetting() throws Exception {  String key=ConfigurationKey.DECIMAL_PLACES.getKeyName();  String decimalConfigSetting=getConfigSettingValue(key);  int decimalSettingIntValue=getDecimalPlacesSettingValue(decimalConfigSetting);  return decimalSettingIntValue;}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  public static int offsetByCodePoints(char[] seq,int start,int count,int index,int codePointOffset){  if (seq == null) {    throw new NullPointerException();  }  int end=start + count;  if (start < 0 || count < 0 || end > seq.length || index < start || index > end) {    throw new IndexOutOfBoundsException();  }  if (codePointOffset == 0) {    return index;  }  if (codePointOffset > 0) {    int codePoints=codePointOffset;    int i=index;    while (codePoints > 0) {      codePoints--;      if (i >= end) {        throw new IndexOutOfBoundsException();      }      if (isHighSurrogate(seq[i])) {        int next=i + 1;        if (next < end && isLowSurrogate(seq[next])) {          i++;        }      }      i++;    }    return i;  }  int codePoints=-codePointOffset;  int i=index;  while (codePoints > 0) {    codePoints--;    i--;    if (i < start) {      throw new IndexOutOfBoundsException();    }    if (isLowSurrogate(seq[i])) {      int prev=i - 1;      if (prev >= start && isHighSurrogate(seq[prev])) {        i--;      }    }  }  return i;}  }
class C{  public MachineTag find(String namespace,String key,Integer index){  for (  MachineTag searchTag : this) {    if (searchTag.isTag(namespace,key,index)) {      return searchTag;    }  }  return null;}  }
class C{  public void testPrintMessage() throws Exception {  String javaText=TextFormat.printToString(TestUtil.getAllSet());  javaText=javaText.replace(".0\n","\n");  assertEquals(allFieldsSetText,javaText);}  }
class C{  public static void checkFieldValueFromArray(final Object value,final String fieldName,final Object... expected){  for (  Object entry : expected) {    if (entry.equals(value)) {      return;    }  }  throw APIException.badRequests.invalidParameterValueWithExpected(fieldName,value,expected);}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToXMLSAXHandler();    wasReset=true;  }  return wasReset;}  }
class C{  public static String escapeHtml(String str){  if (str == null) {    return null;  }  try {    StringWriter writer=new StringWriter((int)(str.length() * 1.5));    escapeHtml(writer,str);    return writer.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public Anonymous_complexAttribute_1_ createAnonymous_complexAttribute_1_(){  Anonymous_complexAttribute_1_Impl anonymous_complexAttribute_1_=new Anonymous_complexAttribute_1_Impl();  return anonymous_complexAttribute_1_;}  }
class C{  public void showLoadingDialog(){  LoadingDialog loading=new LoadingDialog(getResources().getString(R.string.log_progress_dialog_text));  FragmentManager fm=getSupportFragmentManager();  FragmentTransaction ft=fm.beginTransaction();  loading.show(ft,DIALOG_WAIT_TAG);}  }
class C{  public boolean hasName(){  return hasValue();}  }
class C{  public ParticleEmitterBox2D(World world){  super();  this.world=world;}  }
class C{  public static IEditorInput createFileEditorInput(IFileStore fileStore) throws CoreException {  if (fileStore == null)   throw new IllegalArgumentException("File store is null");  return new MindMapEditorInput(fileStore.toURI());}  }
class C{  public boolean hasOwned(){  return hasSource(OWNED);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.wallPaint=SerialUtilities.readPaint(stream);}  }
class C{  public void initialize(){}  }
class C{  protected VariableReference attemptGeneration(TestCase test,Type type,int position,int recursionDepth,boolean allowNull,VariableReference generatorRefToExclude,boolean canUseMocks,boolean canReuseExistingVariables) throws ConstructionFailedException {  GenericClass clazz=new GenericClass(type);  if (clazz.isEnum()) {    if (!TestUsageChecker.canUse(clazz.getRawClass()))     throw new ConstructionFailedException("Cannot generate unaccessible enum " + clazz);    return createPrimitive(test,clazz,position,recursionDepth);  } else   if (clazz.isPrimitive() || clazz.isClass() || EnvironmentStatements.isEnvironmentData(clazz.getRawClass())) {    return createPrimitive(test,clazz,position,recursionDepth);  } else   if (clazz.isString()) {    if (allowNull && Randomness.nextDouble() <= Properties.NULL_PROBABILITY) {      logger.debug("Using a null reference to satisfy the type: {}",type);      return createNull(test,type,position,recursionDepth);    } else {      return createPrimitive(test,clazz,position,recursionDepth);    }  } else   if (clazz.isArray()) {    if (allowNull && Randomness.nextDouble() <= Properties.NULL_PROBABILITY) {      logger.debug("Using a null reference to satisfy the type: {}",type);      return createNull(test,type,position,recursionDepth);    } else {      return createArray(test,clazz,position,recursionDepth);    }  } else {    if (allowNull && Randomness.nextDouble() <= Properties.NULL_PROBABILITY) {      logger.debug("Using a null reference to satisfy the type: {}",type);      return createNull(test,type,position,recursionDepth);    }    ObjectPoolManager objectPool=ObjectPoolManager.getInstance();    if (Randomness.nextDouble() <= Properties.P_OBJECT_POOL && objectPool.hasSequence(clazz)) {      TestCase sequence=objectPool.getRandomSequence(clazz);      logger.debug("Using a sequence from the object pool to satisfy the type: {}",type);      VariableReference targetObject=sequence.getLastObject(type);      int returnPos=position + targetObject.getStPosition();      for (int i=0; i < sequence.size(); i++) {        Statement s=sequence.getStatement(i);        test.addStatement(s.copy(test,position),position + i);      }      logger.debug("Return type of object sequence: {}",test.getStatement(returnPos).getReturnValue().getClassName());      return test.getStatement(returnPos).getReturnValue();    }    logger.debug("Creating new object for type {}",type);    return createObject(test,type,position,recursionDepth,generatorRefToExclude,allowNull,canUseMocks,canReuseExistingVariables);  }}  }
class C{  public Rotator(Context context){  mFinished=true;}  }
class C{  public static final double[] minus(final double[] v1,final double[] v2){  final double[] sub=new double[v1.length];  for (int i=0; i < v1.length; i++) {    sub[i]=v1[i] - v2[i];  }  return sub;}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  c.setOpaque(false);}  }
class C{  public static JsonMappingException wrapWithPath(Throwable src,Object refFrom,int index){  return wrapWithPath(src,new Reference(refFrom,index));}  }
class C{  public void assertCastable(Type s,Type t,boolean expected){  if (types.isCastable(s,t) != expected) {    String msg=expected ? " is not castable to " : " is castable to ";    error(s + msg + t);  }}  }
class C{  public static void main(String[] argv){  ArgsCliMainBaratine args=new ArgsCliMainBaratineApp(argv);  args.doMain();}  }
class C{  public TitlePaneMenuButtonWindowNotFocusedState(){  super("WindowNotFocused");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.265 -0500",hash_original_method="9B0D8B6CEE5AA7BD346EB9D2E041D4FA",hash_generated_method="4BC89F7A72DA2A988961B8D9881BB9CE") private int[] buildColumnIndiciesArray(Cursor cursor,String[] columnNames){  int[] columns=new int[columnNames.length];  for (int i=0; i < columnNames.length; i++) {    columns[i]=cursor.getColumnIndexOrThrow(columnNames[i]);  }  return columns;}  }
class C{  private void awaitControlOp(){  if (controlWaiters.size() > 0 || controlOperationExecuting.get()) {    evalWaiters.add(Thread.currentThread());    LockSupport.park(this);  }}  }
class C{  public static org.apache.nutch.storage.ProtocolStatus.Builder newBuilder(){  return new org.apache.nutch.storage.ProtocolStatus.Builder();}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (tipos.length == 0)   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.TRANSFERENCIAS_TIPO_BUSQUEDA_PREVISION,request.getLocale())));  if (estados.length == 0)   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.TRANSFERENCIAS_ESTADOS_BUSQUEDA_PREVISION,request.getLocale())));  if (!new CustomDate(this.fechaFinFormato,this.fechaA,this.fechaM,this.fechaD,this.fechaS).validate() || !new CustomDate(this.fechaIniFormato,this.fechaIniA,this.fechaIniM,this.fechaIniD,this.fechaIniS).validate() || !new CustomDate(this.fechaFinFormato,this.fechaFinA,this.fechaFinM,this.fechaFinD,this.fechaFinS).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(TransferenciasConstants.LABEL_TRANSFERENCIAS_PREVISIONES_BUSQUEDA_FECHA,request.getLocale())));  }  return errors;}  }
class C{  public Book(){}  }
class C{  @Override public boolean beginDrawingLayers(){  while (!inited) {    try {      Thread.sleep(10);    } catch (    final InterruptedException e) {      return false;    }  }  return sceneBuffer.beginUpdatingScene();}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  double total=0;  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    total+=mDataset.getValue(i);    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  float currentAngle=mRenderer.getStartAngle();  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  mPieMapper.setDimensions(radius,mCenterX,mCenterY);  boolean loadPieCfg=!mPieMapper.areAllSegmentPresent(sLength);  if (loadPieCfg) {    mPieMapper.clearPieSegments();  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  RectF oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);  List<RectF> prevLabelsBounds=new ArrayList<RectF>();  for (int i=0; i < sLength; i++) {    paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());    float value=(float)mDataset.getValue(i);    float angle=(float)(value / total * 360);    canvas.drawArc(oval,currentAngle,angle,true,paint);    drawLabel(canvas,mDataset.getCategory(i),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true);    if (mRenderer.isDisplayValues()) {      drawLabel(canvas,getLabel(mDataset.getValue(i)),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius / 2,longRadius / 2,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,false);    }    if (loadPieCfg) {      mPieMapper.addPieSegment(i,value,currentAngle,angle);    }    currentAngle+=angle;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  private EventsRawTimes(){}  }
class C{  public void handleDOMSubtreeModifiedEvent(MutationEvent evt){  if (laidoutText == null) {    computeLaidoutText(ctx,e,getTextNode());  }}  }
class C{  public void addBcc(EncodedStringValue value){  mPduHeaders.appendEncodedStringValue(value,PduHeaders.BCC);}  }
class C{  public SpecialTextUnit showUnderline(){  isShowUnderline=true;  return this;}  }
class C{  public boolean isUpdateable(){  Object oo=get_Value(COLUMNNAME_IsUpdateable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static byte[] asUnsignedByteArray(int length,BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes.length == length) {    return bytes;  }  int start=bytes[0] == 0 ? 1 : 0;  int count=bytes.length - start;  if (count > length) {    throw new IllegalArgumentException("standard length exceeded for value");  }  byte[] tmp=new byte[length];  System.arraycopy(bytes,start,tmp,tmp.length - count,count);  return tmp;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public Board(int width,int height,IHex[] hexes,Vector<Building> bldgs,Hashtable<Coords,InfernoTracker> infMap){  this.width=width;  this.height=height;  data=hexes;  buildings=bldgs;  infernos=infMap;  createBldgByCoords();}  }
class C{  public void release(){  try {    if (fileLock != null) {      Method m=fileLock.getClass().getMethod("release",new Class[]{});      m.invoke(fileLock,new Object[]{});      fileLock=null;    }  } catch (  Exception e) {  }  if (file != null) {    try {      file.close();    } catch (    IOException e) {    }    file=null;  }  if (lockFile != null && lockFile.exists()) {    lockFile.delete();  }  lockFile=null;}  }
class C{  public int size(int taskId){  return queues.get(taskId).size();}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.getXPathContext().getVarStack().setLocalVariable(m_index,m_lazyVar);}  }
class C{  private void refresh(final WorkspaceComponent component){  attributeTypePanel=new AttributeTypePanel(component,producerOrConsumer);  if (component != null) {    model.clear();    if (producerOrConsumer == ProducerOrConsumer.Producing) {      for (      PotentialAttribute potentialProducer : component.getPotentialProducers()) {        model.addElement(potentialProducer);      }    } else     if (producerOrConsumer == ProducerOrConsumer.Consuming) {      for (      PotentialAttribute potentialConsumer : component.getPotentialConsumers()) {        model.addElement(potentialConsumer);      }    }  }}  }
class C{  public GcEvery(){  super(Harness.options,"Gc Every","MMTk Harness gc-stress",new String[]{"NONE","ALLOC","SAFEPOINT","WRITEBARRIER"},System.getProperty("mmtk.harness.gc.every","NONE"));}  }
class C{  public DeferredFileOutputStream(int threshold,File outputFile){  this(threshold,outputFile,null,null,null);}  }
class C{  public Object execute(final String uri,final String cookie,final String session,final InputStream requestStream) throws VNXFilePluginException {  _logger.debug("Invoking execute method to send request.");  PostMethod postMethod=null;  try {    postMethod=new PostMethod(uri);    _logger.debug("Querying the url {}",uri);    postMethod.setRequestHeader(VNXFileConstants.COOKIE,cookie);    if (null != session) {      postMethod.setRequestHeader(VNXFileConstants.CELERRA_SESSION,session);    }    final RequestEntity requestEntity=new InputStreamRequestEntity(requestStream);    postMethod.setRequestEntity(requestEntity);    setTimeoutValues();    final int response=_client.executeMethod(postMethod);    _logger.debug("connection timeout set {}",_client.getParams().getParameter("http.connection.timeout"));    if (response != HttpStatus.SC_OK) {      _logger.error("Invalid response received from XML API Server while executing query. " + "HTTP Error code: {}",response);      if (response == 503) {        throw new VNXFilePluginException(String.format("The server is currently unable to handle the request due to a temporary overloading: HTTP code: %s:",response),VNXFilePluginException.ERRORCODE_INVALID_RESPONSE);      } else {        throw new VNXFilePluginException(String.format("Invalid response received from server: HTTP code %s:",response),VNXFilePluginException.ERRORCODE_INVALID_RESPONSE);      }    }  } catch (  final IOException ioEx) {    _logger.error("IOException occurred while sending the API request due to {}",ioEx.getMessage());    throw new VNXFilePluginException("IOException occurred while sending the API request.",ioEx.getCause());  }catch (  final Exception ex) {    _logger.error("Exception occurred while sending the API request due to {}",ex.getMessage());    throw new VNXFilePluginException("Exception occurred while sending the API request.",ex.getCause());  } finally {    try {      requestStream.close();    } catch (    final IOException ioEx) {      _logger.error("IOException occurred while closing API request stream due to {}",ioEx.getMessage());    }  }  return postMethod;}  }
class C{  public Object nextEntity(char ampersand) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=next();    if (Character.isLetterOrDigit(c) || c == '#') {      sb.append(Character.toLowerCase(c));    } else     if (c == ';') {      break;    } else {      throw syntaxError("Missing ';' in XML entity: &" + sb);    }  }  String string=sb.toString();  Object object=entity.get(string);  return object != null ? object : ampersand + string + ";";}  }
class C{  public void removeAt(int index){  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));  mSize--;}  }
class C{  private void drawHexBorder(Graphics g,Point p,Color col){  drawHexBorder(g,p,col,0);}  }
class C{  final public void apply(Model model){  w=model.apply(l);}  }
class C{  private void updateDatabaseFromHeaders(State state,InnerState innerState){  mInfo.mETag=innerState.mHeaderETag;  mDB.updateDownload(mInfo);}  }
class C{  public static boolean isWhitespace(int codePoint){  return codePoint == 0x20 || codePoint == 0x9 || codePoint == 0xA || codePoint == 0xD;}  }
class C{  public void pipe(final AbstractLogConsumer consumer) throws ExecutionException, InterruptedException {  final DynamoDBTableScan scanner=new DynamoDBTableScan(rateLimit,client);  final ScanRequest request=new ScanRequest().withTableName(tableName).withReturnConsumedCapacity(ReturnConsumedCapacity.TOTAL).withLimit(BootstrapConstants.SCAN_LIMIT).withConsistentRead(consistentScan);  final ParallelScanExecutor scanService=scanner.getParallelScanCompletionService(request,numSegments,threadPool,section,totalSections);  while (!scanService.finished()) {    SegmentedScanResult result=scanService.grab();    consumer.writeResult(result);  }  shutdown(true);  consumer.shutdown(true);}  }
class C{  public boolean isLoaded(){  return loaded;}  }
class C{  public char previous(){  if (getIndex() > begin) {    return aci.previous();  } else {    return CharacterIterator.DONE;  }}  }
class C{  public AtomicInteger(int initialValue){  value=initialValue;}  }
class C{  private void storeStaticField(XField staticField,Instruction obj,boolean pushStoredValue){  if (RLE_DEBUG) {    System.out.println("[storeStaticField for field " + staticField + " in instruction "+ handle);  }  ValueNumberFrame frame=getFrame();  AvailableLoad availableLoad=new AvailableLoad(staticField);  int numWordsConsumed=getNumWordsConsumed(obj);  ValueNumber[] inputValueList=popInputValues(numWordsConsumed);  if (pushStoredValue) {    pushOutputValues(inputValueList);  }  frame.killLoadsOfField(staticField);  frame.addAvailableLoad(availableLoad,inputValueList);  if (RLE_DEBUG) {    System.out.println("[making store of " + staticField + " available]");  }  if (VERIFY_INTEGRITY) {    checkConsumedAndProducedValues(obj,inputValueList,pushStoredValue ? inputValueList : EMPTY_INPUT_VALUE_LIST);  }}  }
class C{  public boolean hasNameValue(String name){  return nameValueMap.containsKey(name.toLowerCase());}  }
class C{  @SuppressLint("NewApi") private void send() throws IOException, InterruptedException {  int sum=1, len=0, type;  if (streamType == 0) {    fill(header,0,5);    ts+=delay;    naluLength=header[3] & 0xFF | (header[2] & 0xFF) << 8 | (header[1] & 0xFF) << 16 | (header[0] & 0xFF) << 24;    if (naluLength > 100000 || naluLength < 0)     resync();  } else   if (streamType == 1) {    fill(header,0,5);    ts=((MediaCodecInputStream)is).getLastBufferInfo().presentationTimeUs * 1000L;    naluLength=is.available() + 1;    if (!(header[0] == 0 && header[1] == 0 && header[2] == 0)) {      Log.e(TAG,"NAL units are not preceeded by 0x00000001");      streamType=2;      return;    }  } else {    fill(header,0,1);    header[4]=header[0];    ts=((MediaCodecInputStream)is).getLastBufferInfo().presentationTimeUs * 1000L;    naluLength=is.available() + 1;  }  type=header[4] & 0x1F;  if (type == 7 || type == 8) {    Log.v(TAG,"SPS or PPS present in the stream.");    count++;    if (count > 4) {      sps=null;      pps=null;    }  }  if (naluLength <= MAXPACKETSIZE - rtphl - 2) {    buffer=socket.requestBuffer();    buffer[rtphl]=header[4];    len=fill(buffer,rtphl + 1,naluLength - 1);    socket.updateTimestamp(ts);    socket.markNextPacket();    super.send(naluLength + rtphl);  } else {    header[1]=(byte)(header[4] & 0x1F);    header[1]+=0x80;    header[0]=(byte)((header[4] & 0x60) & 0xFF);    header[0]+=28;    while (sum < naluLength) {      buffer=socket.requestBuffer();      buffer[rtphl]=header[0];      buffer[rtphl + 1]=header[1];      socket.updateTimestamp(ts);      if ((len=fill(buffer,rtphl + 2,naluLength - sum > MAXPACKETSIZE - rtphl - 2 ? MAXPACKETSIZE - rtphl - 2 : naluLength - sum)) < 0)       return;      sum+=len;      if (sum >= naluLength) {        buffer[rtphl + 1]+=0x40;        socket.markNextPacket();      }      super.send(len + rtphl + 2);      header[1]=(byte)(header[1] & 0x7F);    }  }}  }
class C{  public void makeClassNot(Vector v,boolean caseless){  makeClass(new IntCharSet(v),caseless);}  }
class C{  @Override public void RemoveFromSuppressLLDPs(DatapathId sw,OFPort port){  NodePortTuple npt=new NodePortTuple(sw,port);  this.suppressLinkDiscovery.remove(npt);  discover(npt);}  }
class C{  public Pos3D rotateYaw(double yaw){  double yawRadians=Math.toRadians(yaw);  double x=xPos;  double z=zPos;  if (yaw != 0) {    xPos=x * Math.cos(yawRadians) - z * Math.sin(yawRadians);    zPos=z * Math.cos(yawRadians) + x * Math.sin(yawRadians);  }  return this;}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  public OperationPendingException(String message){  super(message);}  }
class C{  public static Model createModel(){  final XMLTree tree=XMLTree.create("project");  tree.getRoot().setAttribute("xmlns","http://maven.apache.org/POM/4.0.0").setAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance").setAttribute("xsi:schemaLocation","http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd");  return new Model(tree);}  }
class C{  final Segment<V> segmentFor(int hash){  return segments[(hash >>> segmentShift) & segmentMask];}  }
class C{  public static <U extends AbstractUser<U,ID>,ID extends Serializable>void logIn(U user){  user.decorate(user);  Authentication authentication=new UsernamePasswordAuthenticationToken(user,null,user.getAuthorities());  SecurityContextHolder.getContext().setAuthentication(authentication);}  }
class C{  public void connectPort(QsiPortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (controller != null) {    log.warn("connectPort: connect called while connected");  }  controller=p;}  }
class C{  private int reconcilePutPermits(){  putPermits+=takeSidePutPermits;  takeSidePutPermits=0;  return putPermits;}  }
class C{  public double modulus(){  return (Math.sqrt(x * x + y * y + z * z));}  }
class C{  public static double[] minmax(List<Double> values){  if (values.size() == 0) {    return new double[2];  }  double min=values.get(0);  double max=min;  int length=values.size();  for (int i=1; i < length; i++) {    double value=values.get(i);    min=Math.min(min,value);    max=Math.max(max,value);  }  return new double[]{min,max};}  }
class C{  public String execute(){  init();  ST template=getTemplate();  template.add("dtos",this.dtoModels);  String output=template.render();  return output;}  }
class C{  public FasStableConcurrent2(IndependenceTest test){  this.test=test;}  }
class C{  public UriInfo parseRequest(String resource_path,Map<String,String> query_parameters) throws ODataException {  List<PathSegment> path_segments;  if (resource_path != null && !resource_path.isEmpty()) {    path_segments=new ArrayList<>();    StringTokenizer st=new StringTokenizer(resource_path,"/");    while (st.hasMoreTokens()) {      path_segments.add(UriParser.createPathSegment(st.nextToken(),null));    }  } else   path_segments=Collections.emptyList();  if (query_parameters == null)   query_parameters=Collections.emptyMap();  return this.uriParser.parse(path_segments,query_parameters);}  }
class C{  public static int sum(int a,int b){  return a * b;}  }
class C{  public boolean containsNow(){  return contains(DateTimeUtils.currentTimeMillis());}  }
class C{  public CeylonRepoManagerBuilder noCacheRepo(boolean noCacheRepo){  this.noCacheRepo=noCacheRepo;  return this;}  }
class C{  public static byte[] toRawSignatureBytes(BigInteger[] rs) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream(64);  byte[] r=toUnsignedByteArray(rs[0]);  byte[] s=toUnsignedByteArray(rs[1]);  bos.write(r);  bos.write(s);  return bos.toByteArray();}  }
class C{  private boolean isDataAvailable(){  return m_dataProvider != null;}  }
class C{  protected void displayImageFromOtherSource(String imageUri,ImageView imageView) throws IOException {}  }
class C{  public PutIndexTemplateRequest cause(String cause){  this.cause=cause;  return this;}  }
class C{  public void toEPL(StringWriter writer){  writer.append("create table ");  writer.append(tableName);  writer.append(" (");  String delimiter="";  for (  CreateTableColumn col : columns) {    writer.append(delimiter);    col.toEPL(writer);    delimiter=", ";  }  writer.append(")");}  }
class C{  public BootstrapApi(Context context,@Nullable OkHttpClient okHttpClient,String bootStrapUrl,@Nullable JsonDeserializer<Bootstrap> customDeserializer){  this.bootStrapUrl=bootStrapUrl;  this.customDeserializer=customDeserializer;  if (okHttpClient == null) {    File cacheDir=context.getCacheDir();    Cache cache=new Cache(cacheDir,DEFAULT_CACHE_SIZE);    this.okHttpClient=new OkHttpClient.Builder().cache(cache).connectTimeout(DEFAULT_CONNECTION_TIMEOUT_SECONDS,TimeUnit.SECONDS).readTimeout(DEFAULT_CONNECTION_TIMEOUT_SECONDS,TimeUnit.SECONDS).build();  } else {    this.okHttpClient=okHttpClient;  }}  }
class C{  private boolean isSkippableReg(RegisterOperand regOp,IR ir){  return regOp.getRegister().isExcludedLiveA() || (regOp.getRegister().isValidation() && skipGuards);}  }
class C{  public boolean isUnion(){  return this.constructionElement.getAttributeNS(null,XPath2FilterContainer._ATT_FILTER).equals(XPath2FilterContainer._ATT_FILTER_VALUE_UNION);}  }
class C{  public CConnection(String host){  if (host != null) {    m_apps_host=host;    m_db_host=host;  }}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("tomee1x",ContainerType.INSTALLED,Tomee1xInstalledLocalContainer.class);  containerFactory.registerContainer("tomee1x",ContainerType.REMOTE,Tomee1xRemoteContainer.class);  containerFactory.registerContainer("tomee7x",ContainerType.INSTALLED,Tomee7xInstalledLocalContainer.class);  containerFactory.registerContainer("tomee7x",ContainerType.REMOTE,Tomee7xRemoteContainer.class);}  }
class C{  public Legend(String s){  legend=s;}  }
class C{  public List<? extends XBeeResponse> collectResponses(int wait) throws XBeeException {  return this.collectResponses(wait,null);}  }
class C{  protected Pointer(Pointer other,long byteOffset){  this(other);  this.byteOffset+=byteOffset;}  }
class C{  @LargeTest public void testVideoEditorAPI() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";  final String videoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final String imageItemFileName1=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String imageItemFileName2=INPUT_FILE_PATH + "IMG_176x144.jpg";  final String audioFilename1=INPUT_FILE_PATH + "AMRNB_8KHz_12.2Kbps_m_1_17.3gp";  final String audioFilename2=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  TransitionCrossfade transition2And4;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName1,renderingMode);  mediaVideoItem1.setExtractBoundaries(0,10000);  mVideoEditor.addMediaItem(mediaVideoItem1);  final MediaVideoItem mediaVideoItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",videoItemFileName2,renderingMode);  mediaVideoItem2.setExtractBoundaries(mediaVideoItem2.getDuration() / 4,mediaVideoItem2.getDuration() / 2);  mVideoEditor.addMediaItem(mediaVideoItem2);  final MediaVideoItem mediaVideoItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"m3",videoItemFileName3,renderingMode);  mediaVideoItem3.setExtractBoundaries(mediaVideoItem3.getDuration() / 2,mediaVideoItem3.getDuration());  mVideoEditor.addMediaItem(mediaVideoItem3);  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m4",imageItemFileName1,5000,renderingMode);  final MediaImageItem mediaImageItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m5",imageItemFileName2,5000,renderingMode);  List<MediaItem> mediaList=mVideoEditor.getAllMediaItems();  assertEquals("Media Item List Size",3,mediaList.size());  mVideoEditor.insertMediaItem(mediaImageItem1,mediaVideoItem2.getId());  mediaList=mVideoEditor.getAllMediaItems();  assertEquals("Media Item List Size",4,mediaList.size());  assertEquals("Media item 1",mediaVideoItem1,mediaList.get(0));  assertEquals("Media item 2",mediaVideoItem2,mediaList.get(1));  assertEquals("Media item 4",mediaImageItem1,mediaList.get(2));  assertEquals("Media item 3",mediaVideoItem3,mediaList.get(3));  mVideoEditor.insertMediaItem(mediaImageItem2,mediaImageItem1.getId());  mediaList=mVideoEditor.getAllMediaItems();  assertEquals("Media Item List Size",5,mediaList.size());  assertEquals("Media item 1",mediaVideoItem1,mediaList.get(0));  assertEquals("Media item 2",mediaVideoItem2,mediaList.get(1));  assertEquals("Media item 4",mediaImageItem1,mediaList.get(2));  assertEquals("Media item 5",mediaImageItem2,mediaList.get(3));  assertEquals("Media item 3",mediaVideoItem3,mediaList.get(4));  mVideoEditor.moveMediaItem(mediaVideoItem1.getId(),mediaImageItem2.getId());  mediaList=mVideoEditor.getAllMediaItems();  assertEquals("Media Item List Size",5,mediaList.size());  assertEquals("Media item 2",mediaVideoItem2,mediaList.get(0));  assertEquals("Media item 4",mediaImageItem1,mediaList.get(1));  assertEquals("Media item 5",mediaImageItem2,mediaList.get(2));  assertEquals("Media item 1",mediaVideoItem1,mediaList.get(3));  assertEquals("Media item 3",mediaVideoItem3,mediaList.get(4));  assertEquals("Media Item 1",mediaVideoItem1,mVideoEditor.getMediaItem(mediaVideoItem1.getId()));  flagForException=false;  transition2And4=null;  try {    transition2And4=mVideoEditorHelper.createTCrossFade("transition2And4",mediaVideoItem2,mediaImageItem1,2000,Transition.BEHAVIOR_MIDDLE_FAST);    mVideoEditor.addTransition(transition2And4);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertFalse("Transition2and4 cannot be created",flagForException);  TransitionCrossfade transition1And3=null;  flagForException=false;  try {    transition1And3=mVideoEditorHelper.createTCrossFade("transition1And3",mediaVideoItem1,mediaVideoItem2,5000,Transition.BEHAVIOR_MIDDLE_FAST);    mVideoEditor.addTransition(transition1And3);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition1and3 cannot be created",flagForException);  List<Transition> transitionList=mVideoEditor.getAllTransitions();  assertEquals("Transition List",1,transitionList.size());  assertEquals("Transition 2",transition2And4,mVideoEditor.getTransition(transition2And4.getId()));  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFilename1);  mVideoEditor.addAudioTrack(audioTrack);  List<AudioTrack> audioList=mVideoEditor.getAllAudioTracks();  assertEquals("Audio List",1,audioList.size());  final AudioTrack audioTrack1=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack1",audioFilename2);  flagForException=false;  try {    mVideoEditor.addAudioTrack(audioTrack1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Audio Track support is 1 ",flagForException);  flagForException=false;  try {    mVideoEditor.insertAudioTrack(audioTrack1,"audioTrack");  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Audio Track supports is 1 ",flagForException);  assertEquals("Removing AudioTrack",audioTrack,mVideoEditor.removeAudioTrack(audioTrack.getId()));  assertEquals("Removing transition",transition2And4,mVideoEditor.removeTransition(transition2And4.getId()));  assertEquals("Removing Media Item",mediaVideoItem2,mVideoEditor.removeMediaItem(mediaVideoItem2.getId()));  mVideoEditor.setAspectRatio(MediaProperties.ASPECT_RATIO_16_9);  assertEquals("Check Aspect Ratio",MediaProperties.ASPECT_RATIO_16_9,mVideoEditor.getAspectRatio());  long storyBoardDuration=mediaVideoItem1.getTimelineDuration() + mediaVideoItem3.getTimelineDuration() + mediaImageItem1.getDuration()+ mediaImageItem2.getDuration();  assertEquals("Story Board Duration",storyBoardDuration,mVideoEditor.getDuration());}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public XMLString concat(String str){  return new XString(str().concat(str));}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.630 -0400",hash_original_method="E8FD9AD99663D9910B261ED2A09CD1DD",hash_generated_method="5ECB5540B212C82C9038F5E797456C69") public void acceptPair(BluetoothAdapter adapter,BluetoothDevice device,int passkey,byte[] pin){  pairOrAcceptPair(adapter,device,passkey,pin,false);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean isModified(){  return false;}  }
class C{  public static BufferedImage createHeatMapImage(HeatMapDataset dataset,PaintScale paintScale){  ParamChecks.nullNotPermitted(dataset,"dataset");  ParamChecks.nullNotPermitted(paintScale,"paintScale");  int xCount=dataset.getXSampleCount();  int yCount=dataset.getYSampleCount();  BufferedImage image=new BufferedImage(xCount,yCount,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=image.createGraphics();  for (int xIndex=0; xIndex < xCount; xIndex++) {    for (int yIndex=0; yIndex < yCount; yIndex++) {      double z=dataset.getZValue(xIndex,yIndex);      Paint p=paintScale.getPaint(z);      g2.setPaint(p);      g2.fillRect(xIndex,yCount - yIndex - 1,1,1);    }  }  return image;}  }
class C{  private void validateTextLength(String key,String text) throws ValidationException {  if (text.length() > ADMValidator.LENGTH_TEXT) {    String title=JSFUtils.getText(key,null);    throw new ValidationException(ReasonEnum.LENGTH_TEXT,key,new Object[]{title,Integer.toString(text.length()),Integer.toString(ADMValidator.LENGTH_TEXT)});  }}  }
class C{  @Override public SocketBar createSocket(){  return new SocketChannelWrapperBar();}  }
class C{  public OutOfProcessSeleniumServer start(){  log.info("Got a request to start a new selenium server");  if (command != null) {    log.info("Server already started");    throw new RuntimeException("Server already started");  }  String classPath=buildServerAndClasspath();  int port=PortProber.findFreePort();  String localAddress=new NetworkUtils().getPrivateLocalAddress();  baseUrl=String.format("http://%s:%d",localAddress,port);  List<String> cmdLine=new LinkedList<>();  cmdLine.add("java");  cmdLine.add("-cp");  cmdLine.add(classPath);  cmdLine.add("org.openqa.grid.selenium.GridLauncher");  cmdLine.add("-port");  cmdLine.add(String.valueOf(port));  cmdLine.add("-browserSideLog");  if (captureLogs) {    cmdLine.add("-captureLogsOnQuit");  }  command=new CommandLine(cmdLine.toArray(new String[cmdLine.size()]));  if (Boolean.getBoolean("webdriver.development")) {    command.copyOutputTo(System.err);  }  command.setWorkingDirectory(InProject.locate("Rakefile").getParentFile().getAbsolutePath());  log.info("Starting selenium server: " + command.toString());  command.executeAsync();  try {    URL url=new URL(baseUrl + "/wd/hub/status");    log.info("Waiting for server status on URL " + url);    new UrlChecker().waitUntilAvailable(60,SECONDS,url);    log.info("Server is ready");  } catch (  UrlChecker.TimeoutException e) {    log.severe("Server failed to start: " + e.getMessage());    throw new RuntimeException(e);  }catch (  MalformedURLException e) {    throw new RuntimeException(e);  }  return this;}  }
class C{  public List<CourseEntry> filterForNewCourses(List<CourseEntry> courseEntryList){  List<CourseEntry> newCourseList=new ArrayList<>();  for (  CourseEntry entry : courseEntryList) {    if (this.getByCourseId(entry.getId()) == null) {      newCourseList.add(entry);    }  }  return newCourseList;}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public static void printStats(TaxonomyReader r,PrintStream out,boolean printTree) throws IOException {  out.println(r.getSize() + " total categories.");  ChildrenIterator it=r.getChildren(TaxonomyReader.ROOT_ORDINAL);  int child;  while ((child=it.next()) != TaxonomyReader.INVALID_ORDINAL) {    ChildrenIterator chilrenIt=r.getChildren(child);    int numImmediateChildren=0;    while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {      numImmediateChildren++;    }    FacetLabel cp=r.getPath(child);    out.println("/" + cp.components[0] + ": "+ numImmediateChildren+ " immediate children; "+ (1 + countAllChildren(r,child))+ " total categories");    if (printTree) {      printAllChildren(out,r,child,"  ",1);    }  }}  }
class C{  public boolean isPlayerPresent(){  if (playerName == null) {    return false;  }  Player player=SingletonRepository.getRuleProcessor().getPlayer(playerName);  if (player == null) {    return false;  }  if (player.getZone() != this.getZone()) {    return false;  }  int x=player.getX();  if (x < this.getX() || x > this.getX() + WIDTH) {    return false;  }  int y=player.getY();  if (y < this.getY() || y > this.getY() + HEIGHT) {    return false;  }  return true;}  }
class C{  @Override public boolean isPinned(){  return (pinned);}  }
class C{  private static String decodeHeader(String authorizationHeader){  final String BASIC_AUTH_CHARSET="US-ASCII";  if (null == authorizationHeader)   throw new NullPointerException("authorization header");  if (authorizationHeader.isEmpty())   throw new IllegalArgumentException("authorization header is empty");  Base64.Decoder decoder=Base64.getMimeDecoder();  byte[] decodedBytes=decoder.decode(authorizationHeader);  try {    return new String(decodedBytes,BASIC_AUTH_CHARSET);  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException("Unknown Charset: " + BASIC_AUTH_CHARSET,e);  }}  }
class C{  public TransitStopFacility createStopFacility(Id<TransitStopFacility> facilityId,Coord coord,String name,Id<Link> linkId){  TransitStopFacility newTransitStopFacility=scheduleFactory.createTransitStopFacility(facilityId,coord,false);  newTransitStopFacility.setName(name);  newTransitStopFacility.setLinkId(linkId);  return newTransitStopFacility;}  }
class C{  public Boolean isBeforeGuestStandby(){  return beforeGuestStandby;}  }
class C{  public String join(String separator) throws JSONException {  int len=length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public VcfRecord next() throws IOException {  if (mCurrent.size() == 0) {    throw new IllegalStateException("No more records");  }  final VcfRecord rec=mCurrent.poll();  setNext();  return rec;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void compress(CompressionLevel compressionLevel) throws IOException {  if (compressPos != -1) {    pos=compressPos;    deflate(this,compressionLevel);    compressPos=-1;  }}  }
class C{  public static JSONObject readJSONObject(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonObject.getJSONObject(key);  }  if (notNull && jsonObject.isNull(key)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));  }  JSONObject value=null;  if (!jsonObject.isNull(key)) {    value=jsonObject.getJSONObject(key);  }  return value;}  }
class C{  public static CAddressSpace createAddressSpace(final AbstractSQLProvider provider,final INaviProject project,final String name) throws CouldntSaveDataException {  checkArguments(provider,project);  Preconditions.checkNotNull(name,"IE00521: Address space names can not be null");  Preconditions.checkArgument(!("".equals(name)),"IE00522: Address space names can not be empty");  final CConnection connection=provider.getConnection();  final int projectId=project.getConfiguration().getId();  NaviLogger.info("Creating a new address space with name %s in project %s (%d)",name,project.getConfiguration().getName(),projectId);  try {    final String query="insert into " + CTableNames.ADDRESS_SPACES_TABLE + "(project_id, name, description, creation_date, modification_date) values(?, ?, '', NOW(), NOW()) returning id";    final PreparedStatement statement=connection.getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);    try {      statement.setInt(1,projectId);      statement.setString(2,name);      Integer addressSpaceId=null;      final ResultSet resultSet=statement.executeQuery();      try {        while (resultSet.next()) {          if (resultSet.isFirst()) {            addressSpaceId=resultSet.getInt(1);            break;          }        }      }  finally {        resultSet.close();      }      Preconditions.checkNotNull(addressSpaceId,"IE02130: Error address space id may not be null after project creation");      return PostgreSQLProjectFunctions.readAddressSpace(provider,addressSpaceId,project);    }  finally {      statement.close();    }  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  private void handleWidgetDispose(Event e){  if (e.widget == widget) {    if (action.getStyle() == IAction.AS_DROP_DOWN_MENU) {      IMenuCreator mc=action.getMenuCreator();      if (mc != null) {        mc.dispose();      }    }    action.removePropertyChangeListener(propertyListener);    if (action != null) {      String commandId=action.getActionDefinitionId();      ExternalActionManager.ICallback callback=ExternalActionManager.getInstance().getCallback();      if ((callback != null) && (commandId != null)) {        callback.removePropertyChangeListener(commandId,actionTextListener);      }    }    widget=null;    disposeOldImages();  }}  }
class C{  public static Validator<String> length(int min,int max){  return length(min,max,null);}  }
class C{  private static byte[] convertToByteArray(CharSequence charSequence){  checkNotNull(charSequence);  byte[] byteArray=new byte[charSequence.length() << 1];  for (int i=0; i < charSequence.length(); i++) {    int bytePosition=i << 1;    byteArray[bytePosition]=(byte)((charSequence.charAt(i) & 0xFF00) >> 8);    byteArray[bytePosition + 1]=(byte)(charSequence.charAt(i) & 0x00FF);  }  return byteArray;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.793 -0500",hash_original_method="60F0F464B613534040B157E1C2112C00",hash_generated_method="E7F46C5369B89F2355684BABFAC81CB3") static Duration retrieveDuration(ComprehensionTlv ctlv) throws ResultException {  int timeInterval=0;  TimeUnit timeUnit=TimeUnit.SECOND;  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  try {    timeUnit=TimeUnit.values()[(rawValue[valueIndex] & 0xff)];    timeInterval=rawValue[valueIndex + 1] & 0xff;  } catch (  IndexOutOfBoundsException e) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }  return new Duration(timeInterval,timeUnit);}  }
class C{  public Logical logical(){  return new Logical(vaultConfig);}  }
class C{  public synchronized void currentState(long state,Model currentModel){  currentState=state;  if (state % 1000 == 0) {    NumberFormatter formatter=new NumberFormatter(8);    formatter.setPadding(false);    for (int i=0; i < chains.length; i++) {      String score;      if (i == coldChain) {        score="[" + formatter.format(chains[i].getCurrentScore()) + "]";      } else {        score=formatter.format(chains[i].getCurrentScore());      }      score+=" ";      System.out.print(formatter.formatToFieldWidth(score,12));    }    System.out.println();  }  MCLogger[] loggers=mcLoggers[coldChain];  for (  MCLogger logger : loggers) {    logger.log(state);  }}  }
class C{  public static Color darker(Color color,double factor){  if (factor < 0.0)   factor=0.7; else   if (factor > 1.0)   factor=0.7;  return new Color(Math.max((int)(color.getRed() * factor),0),Math.max((int)(color.getGreen() * factor),0),Math.max((int)(color.getBlue() * factor),0));}  }
class C{  public static void dumpCounts(String fn){  PrintStream f;  try {    f=new PrintStream(new FileOutputStream(fn));  } catch (  IOException e) {    VM.sysWrite("\n\nEdgeCounts.dumpCounts: Error opening output file!!\n\n");    return;  }  dumpCountsToStream(f);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void add(TechnicalInformation value){  if (value == this) {    throw new IllegalArgumentException("Can't add object to itself!");  }  m_Additional.add(value);}  }
class C{  public void reset(final int rows,final int cols,final T val){  reset(rows,cols);  fill(val);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.581 -0500",hash_original_method="EAB4DD919BF3841A91E98F99540A239A",hash_generated_method="ACC2704BDE86D228E5A53B7C188ADD0F") public boolean decodeValueLength(int startIndex){  if ((wspData[startIndex] & 0xff) > WAP_PDU_LENGTH_QUOTE) {    return false;  }  if (wspData[startIndex] < WAP_PDU_LENGTH_QUOTE) {    unsigned32bit=wspData[startIndex];    dataLength=1;  } else {    decodeUintvarInteger(startIndex + 1);    dataLength++;  }  return true;}  }
class C{  public void success(JSONObject message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  private BigInteger exactDivideBy3(){  int len=mag.length;  int[] result=new int[len];  long x, w, q, borrow;  borrow=0L;  for (int i=len - 1; i >= 0; i--) {    x=(mag[i] & LONG_MASK);    w=x - borrow;    if (borrow > x) {      borrow=1L;    } else {      borrow=0L;    }    q=(w * 0xAAAAAAABL) & LONG_MASK;    result[i]=(int)q;    if (q >= 0x55555556L) {      borrow++;      if (q >= 0xAAAAAAABL)       borrow++;    }  }  result=trustedStripLeadingZeroInts(result);  return new BigInteger(result,signum);}  }
class C{  public static void slideInFromRightAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView,@FloatRange(from=0.0,to=1.0) float percent){  alphaAnimator(animators,view,0f);  animators.add(ObjectAnimator.ofFloat(view,"translationX",recyclerView.getLayoutManager().getWidth() * percent,0));  if (FlexibleAdapter.DEBUG)   Log.v(TAG,"Added RIGHT Animator");}  }
class C{  public HttpUriRequest from(String dsPrsID,String mmeAuthToken,String mediaStreamUrl){  String url=mediaStreamUrl + "/" + dsPrsID+ "/streams/getmetadata";  String authorization=HeadersLegacy.mobilemeAuthToken(dsPrsID,mmeAuthToken);  HttpPost request=new HttpPost(url);  request.setHeader(HttpHeaders.USER_AGENT,"iCloud.exe (unknown version) CFNetwork/520.20.9");  request.setHeader("x-apple-mme-streams-version","AfCPlf71FDRQ");  request.setHeader("x-apple-mme-streams-client-token","1a1f03da91f4a769a5b03b9c5b36667f245c3fbec3b2bcbe624f9f41b9f431e2");  request.setHeader("x-apple-mme-streams-client-udid","f5a277cb39ca5b4559b5c72880c4060800000000");  request.setHeader("x-mme-client-info","<PC><Windows;6.1(1.0);7601><com.apple.mediastreams.windows/7.5 (com.apple.mediastreams.windows/7.5)>");  request.setHeader("Authorization",authorization);  String post="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n" + "<plist version=\"1.0\">\n"+ "<dict/>\n"+ "</plist>";  request.setEntity(new StringEntity(post,StandardCharsets.UTF_8));  return request;}  }
class C{  final public int loadUnsigned8(int addr){  try {    return readableMemory[AbstractMemory.getPTE(addr)][AbstractMemory.getOffset(addr)] & 0xFF;  } catch (  NullPointerException e) {    throw new MemoryException("Memory not initialized trying to read data from address: 0x" + Integer.toHexString(addr));  }}  }
class C{  public static List<Long> ESDTest(GeoTimeSerie gts,int k,boolean useMedian,double alpha) throws WarpScriptException {  doubleCheck(gts);  GeoTimeSerie clone=new GeoTimeSerie();  clone.type=gts.type;  clone.values=gts.values;  clone.doubleValues=Arrays.copyOf(gts.doubleValues,gts.values);  clone.ticks=Arrays.copyOf(gts.ticks,gts.values);  List<Long> anomalous_ticks=new ArrayList<Long>();  int greater_j_test_passed=-1;  for (int j=0; j < k; j++) {    int N=clone.values;    if (N < 3) {      break;    }    double[] musigma=madsigma(clone,useMedian);    double m=musigma[0];    double std=musigma[1];    if (0.0D == std) {      break;    }    double z=0.0D;    double max=Double.NEGATIVE_INFINITY;    int suspicious_idx=0;    for (int i=0; i < N; i++) {      z=Math.abs((clone.doubleValues[i] - m) / std);      if (z > max) {        max=z;        suspicious_idx=i;      }    }    double p=1 - alpha / (2 * N);    double t=new TDistribution(N - 2).inverseCumulativeProbability(p);    double lambda=(N - 1) * t / Math.sqrt((N - 2 + t * t) * N);    if (max > lambda) {      greater_j_test_passed=j;    }    clone.values--;    long tmp_tick=clone.ticks[suspicious_idx];    clone.ticks[suspicious_idx]=clone.ticks[clone.values];    clone.ticks[clone.values]=tmp_tick;    clone.doubleValues[suspicious_idx]=clone.doubleValues[clone.values];  }  for (int j=0; j <= greater_j_test_passed; j++) {    anomalous_ticks.add(clone.ticks[gts.values - 1 - j]);  }  return anomalous_ticks;}  }
class C{  public void addReplacement(DimensionType dimensionType,ItemStack itemStack){  replacements.put(dimensionType,itemStack);}  }
class C{  public static void registerInterest(){  InterestResultPolicy policy=InterestResultPolicy.KEYS_VALUES;  int totalKeys=5;  Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  List keylist=new ArrayList();  for (int i=0; i < totalKeys; i++) {    keylist.add("key-" + i);  }  boolean exceptionOccured=false;  try {    region1.registerInterest("DummyKey1");  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for registerInterest(key)");  }  exceptionOccured=false;  try {    region1.registerInterest("DummyKey2",policy);  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for  registerInterest(key,policy)");  }  exceptionOccured=false;  try {    region1.registerInterest(keylist);  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for registerInterest(keylist)");  }  exceptionOccured=false;  try {    region1.registerInterest(keylist,policy);  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for registerInterest(keylist,policy)");  }  exceptionOccured=false;  try {    region1.registerInterestRegex("ke?");  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for registerInterestRegex(expr)");  }  exceptionOccured=false;  try {    region1.registerInterestRegex("ke?",InterestResultPolicy.KEYS_VALUES);  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for registerInterestRegex(expr,policy)");  }}  }
class C{  public TorTapKeyAgreement(TorPublicKey onionKey){  this.keyPair=generateKeyPair();  this.dh=createDH();  this.onionKey=onionKey;}  }
class C{  public Builder withMargins(int left,int top,int right,int bottom){  params.setMargins(convertToPixels(left,scale),convertToPixels(top,scale),convertToPixels(right,scale),convertToPixels(bottom,scale));  return this;}  }
class C{  public void importRecords(){  List<X_I_Workflow> iworkflows=getRecords(false,m_IsImportOnlyNoErrors);  for (  X_I_Workflow importWorkflow : iworkflows) {    MWFNode node=null;    MWorkflow workflow=getWorkflow(importWorkflow);    if (workflow != null) {      node=getWorkflowNode(importWorkflow,workflow);    }    if (node != null) {      if (workflow.getAD_WF_Node_ID() <= 0) {        workflow.setAD_WF_Node_ID(node.get_ID());        workflow.saveEx();      }      importWorkflow.setAD_WF_Node_ID(node.get_ID());      importWorkflow.setAD_Workflow_ID(workflow.get_ID());      imported++;    }    importWorkflow.setI_IsImported(true);    importWorkflow.setProcessed(true);    importWorkflow.saveEx();  }  for (  X_I_Workflow importWorkflow : iworkflows) {    MWFNode node=(MWFNode)importWorkflow.getAD_WF_Node();    if (node != null) {      int node_id=getID(MWFNode.Table_Name,"AD_Workflow_ID= ? AND Value=?",new Object[]{importWorkflow.getAD_Workflow_ID(),importWorkflow.getNodeNextValue()});      if (node_id > 0) {        MWFNode next=new MWFNode(getCtx(),node_id,get_TrxName());        createTransition(node,next);      }    }  }}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public static void write(byte[] from,File to) throws IOException {  asByteSink(to).write(from);}  }
class C{  public static final boolean isIplPr3IdentityReportMessage(LocoNetMessage m){  return isIplSpecificIdentityReportMessage(m,LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_PR3);}  }
class C{  public FXG2SWFTranscoder(){  spriteStack=new Stack<DefineSprite>();}  }
class C{  public void updateOtherValue(String type,AnimatableValue val){  if (type.equals("motion")) {    if (motionTransform == null) {      motionTransform=new AffineTransform();    }    if (val == null) {      motionTransform.setToIdentity();    } else {      AnimatableMotionPointValue p=(AnimatableMotionPointValue)val;      motionTransform.setToTranslation(p.getX(),p.getY());      motionTransform.rotate(p.getAngle());    }    SVGOMDocument d=(SVGOMDocument)ownerDocument;    d.getAnimatedAttributeListener().otherAnimationChanged(this,type);  } else {    super.updateOtherValue(type,val);  }}  }
class C{  protected NumericLiteral(Number number,IRI datatype){  super(XMLDatatypeUtil.toString(number),datatype);  this.number=number;}  }
class C{  protected void scrollSelf(){  Field field=null;  if (mAutoScroller == null) {    mAutoScroller=new AutoScroller(getContext(),new AccelerateInterpolator());  }  try {    field=ViewPagerCompat.class.getDeclaredField("mScroller");    field.setAccessible(true);    field.set(this,mAutoScroller);    mAutoScroller.setFactor(AutoScroller.FACTOR_LONG);  } catch (  Exception e) {    Log.e(TAG,"",e);  }  int newPosition=getCurrentItem() + 1;  this.setCurrentItem(newPosition,true);  try {    field=ViewPagerCompat.class.getDeclaredField("mScroller");    field.setAccessible(true);    field.set(this,mAutoScroller);    mAutoScroller.setFactor(AutoScroller.FACTOR_SHORT);  } catch (  Exception e) {    Log.e(TAG,"",e);  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  final int eventToSquare(MotionEvent evt){  int xCrd=(int)(evt.getX());  int yCrd=(int)(evt.getY());  int sq=-1;  if ((xCrd >= x0) && (yCrd >= y0) && (sqSize > 0)) {    int x=(xCrd - x0) / sqSize;    int y=7 - (yCrd - y0) / sqSize;    if ((x >= 0) && (x < 8) && (y >= 0)&& (y < 8)) {      if (flipped) {        x=7 - x;        y=7 - y;      }      sq=Position.getSquare(x,y);    }  }  return sq;}  }
class C{  public int indexLowest(int low,int high){  return 0;}  }
class C{  public boolean subtypeOf(CtClass clazz) throws NotFoundException {  return this == clazz || getName().equals(clazz.getName());}  }
class C{  public String globalInfo(){  return "Visualize performance charts (such as ROC).";}  }
class C{  public static void testMatchesRE2(String regexp,int flags,String match,String nonMatch){  Pattern p=Pattern.compile(regexp,flags);  String errorString="Pattern with regexp: " + regexp + " and flags: "+ flags;  assertTrue(errorString + " doesn't match: " + match,p.matches(match));  assertFalse(errorString + " matches: " + nonMatch,p.matches(nonMatch));}  }
class C{  public DirectedEdgeStar(){}  }
class C{  public void execute() throws Exception {  validate();  GrowShrink search=new GrowShrink(this.getIndependenceTest());  setSearchResults(search.findMb(this.getParams().getString("targetName",null)));  setSearchName(search.getAlgorithmName());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.GLOSSARY___WORD_1:    getWord_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public CoderResult error(){  assert (error != null);  return error;}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public static Vec2D fromRadians(double angleInRad,double magnitude){  double x=magnitude * Math.cos(angleInRad);  double y=magnitude * Math.sin(angleInRad);  return new Vec2D(x,y);}  }
class C{  public final long promote(){  return promote(value);}  }
class C{  public EditFilterWizard(){  setWindowTitle("Edit Filter");}  }
class C{  protected boolean isAnnoSubtype(AnnotationMirror subtypeAnno,AnnotationMirror supertypeAnno,boolean annosCanBeEmtpy){  if (annosCanBeEmtpy && subtypeAnno == null && supertypeAnno == null) {    return true;  }  return qualifierHierarchy.isSubtype(subtypeAnno,supertypeAnno);}  }
class C{  public IndentingWriter(Writer out){  super(out);}  }
class C{  public ParameterizedTypeRefStructural_IM createParameterizedTypeRefStructural_IM(){  ParameterizedTypeRefStructural_IMImpl parameterizedTypeRefStructural_IM=new ParameterizedTypeRefStructural_IMImpl();  return parameterizedTypeRefStructural_IM;}  }
class C{  private void removeEdge(){  boolean go=true;  int lastNode;  int proxNode;  int atualNode;  if ((parentMatrix[randomChild][0] != 1) && (childMatrix[randomParent][0] != 1)) {    lastNode=parentMatrix[randomChild][parentMatrix[randomChild][0] - 1];    for (int i=(parentMatrix[randomChild][0] - 1); (i > 0 && go); i--) {      atualNode=parentMatrix[randomChild][i];      if (atualNode != randomParent) {        proxNode=atualNode;        parentMatrix[randomChild][i]=lastNode;        lastNode=proxNode;      } else {        parentMatrix[randomChild][i]=lastNode;        go=false;      }    }    if ((childMatrix[randomParent][0] != 1) && (childMatrix[randomParent][0] != 1)) {      lastNode=childMatrix[randomParent][childMatrix[randomParent][0] - 1];      go=true;      for (int i=(childMatrix[randomParent][0] - 1); (i > 0 && go); i--) {        atualNode=childMatrix[randomParent][i];        if (atualNode != randomChild) {          proxNode=atualNode;          childMatrix[randomParent][i]=lastNode;          lastNode=proxNode;        } else {          childMatrix[randomParent][i]=lastNode;          go=false;        }      }    }    childMatrix[randomParent][(childMatrix[randomParent][0] - 1)]=-4;    childMatrix[randomParent][0]--;    parentMatrix[randomChild][(parentMatrix[randomChild][0] - 1)]=-4;    parentMatrix[randomChild][0]--;  }}  }
class C{  public static Method findAccessibleMethod(Method method) throws NoSuchMethodException {  Class<?> type=method.getDeclaringClass();  if (Modifier.isPublic(type.getModifiers()) && isPackageAccessible(type)) {    return method;  }  if (Modifier.isStatic(method.getModifiers())) {    throw new NoSuchMethodException("Method '" + method.getName() + "' is not accessible");  }  for (  Type generic : type.getGenericInterfaces()) {    try {      return findAccessibleMethod(method,generic);    } catch (    NoSuchMethodException exception) {    }  }  return findAccessibleMethod(method,type.getGenericSuperclass());}  }
class C{  protected int rangeUpper(String range){  int hyphenIndex;  if ((hyphenIndex=range.indexOf('-')) >= 0) {    return Math.max(rangeUpper(range.substring(0,hyphenIndex)),rangeUpper(range.substring(hyphenIndex + 1)));  }  return rangeSingle(range);}  }
class C{  public Observable<String> exerciseMap(Observable<String> hello){  return hello.map(null);}  }
class C{  @Nullable public static String declinedPermission(@NonNull Context context,@NonNull String[] permissions){  for (  String permission : permissions) {    if (isPermissionDeclined(context,permission)) {      return permission;    }  }  return null;}  }
class C{  protected boolean isIPBroadcast(IPv4Address ip){  IPv4Address inv_subnet_mask=subnet_mask.not();  return ip.and(inv_subnet_mask).equals(inv_subnet_mask);}  }
class C{  public static void show(@NonNull ToastBean bean){  show(bean,false);}  }
class C{  private void populateSubDomainHierarchy(Space space,DimensionIndex root,Axis axis,List<DimensionIndex> result,IDomain type) throws InterruptedException, ScopeException {  Object adapter=type.getAdapter(Domain.class);  if (adapter != null && adapter instanceof Domain) {    Domain target=(Domain)adapter;    logger.info("creating subdomain for domain " + target.toString());    try {      if (in_progress.contains(target.getId())) {        logger.info("Cyclic relation between " + axis + " and sub-domain "+ target);        if (!dimensionIndexInList(result,axis)) {          result.add(DimensionIndexCreationUtils.createInvalidIndex(root,axis,"Cyclic relation between " + axis + " and sub-domain "+ target));        }      } else {        DomainHierarchy hierarchy=this.hierarchies.get(target.getId());        if (hierarchy == null || !hierarchy.isValid()) {          ReentrantLock lock=hierarchies.lock(target.getId());          try {            DomainHierarchy check=hierarchies.get(target.getId());            if (check != null && check != hierarchy && check.isValid()) {              hierarchy=check;            }            if (hierarchy == null || !hierarchy.isValid()) {              Space unchained=space.getUniverse().S(target);              hierarchy=createDomainHierarchy(unchained);            }          }  finally {            lock.unlock();          }        }        if (hierarchy != null) {          logger.info("linking axis " + axis + " to proxy "+ hierarchy.toString());          try {            result.addAll(DimensionIndexCreationUtils.createProxyIndexes(space,hierarchy,axis));          } catch (          ScopeException e) {            logger.info("scope exception on linkin axis");          }        } else {          logger.info("Cyclic relation between " + axis + " and sub-domain "+ target);          if (!dimensionIndexInList(result,axis)) {            result.add(DimensionIndexCreationUtils.createInvalidIndex(root,axis,"Cyclic relation between " + axis + " and sub-domain "+ target));          }        }      }    } catch (    ComputingException e) {      logger.error("Unable to compute the sub-domain '" + target.getName() + "'");      if (!dimensionIndexInList(result,axis)) {        result.add(DimensionIndexCreationUtils.createInvalidIndex(root,axis,"Unable to compute the sub-domain '" + target.getName() + "'"));      }    }  } else {    logger.error("Unable to resolve the sub-domain");    if (!dimensionIndexInList(result,axis)) {      result.add(DimensionIndexCreationUtils.createInvalidIndex(root,axis,"Unable to resolve the sub-domain"));    }  }}  }
class C{  public static UniqueString uidToUniqueString(int tok){  return internTbl.get(tok);}  }
class C{  public TypeVariableBV typeVariable(Type type){  return typeVariable(hierarchy.typeNode(type));}  }
class C{  public boolean isNearlyCollinearTo(IntVector v,double tolerance){  if (this.isNull() || v.isNull()) {    return true;  }  if ((v.x == 0 && x != 0) || (v.y == 0 && y != 0) || (v.z == 0 && z == 0)) {    return false;  }  double qx=x / (double)v.x, qy=y / (double)v.y, qz=z / (double)v.z;  return Math.abs(qx - qy) < tolerance && Math.abs(qy - qz) < tolerance;}  }
class C{  private boolean isJUnit3TestSuite(Class scriptClass){  boolean isUnitTestSuite=false;  try {    try {      Class testSuiteClass=this.loader.loadClass("junit.framework.TestSuite");      if (testSuiteClass.isAssignableFrom(scriptClass)) {        isUnitTestSuite=true;      }    } catch (    ClassNotFoundException e) {    }  } catch (  Throwable e) {  }  return isUnitTestSuite;}  }
class C{  private void automergeAll(){  final List<ConflictResolution> resolutionList=new ArrayList<ConflictResolution>();  for (final Iterator<ConflictDescription> i=descriptionList.iterator(); i.hasNext(); ) {    final ConflictDescription description=i.next();    if (!isResolving(description)) {      resolutionList.add(new CoreConflictResolution(description,Messages.getString("ConflictDialog.ResolutionDescription"),Messages.getString("ConflictDialog.ResolutionHelpText"),ConflictResolutionOptions.NONE,Resolution.ACCEPT_MERGE));    }  }  final ConflictResolution[] resolutions=resolutionList.toArray(new ConflictResolution[resolutionList.size()]);  final ResolveConflictsCommand resolver=new ResolveConflictsCommand(repository,resolutions);  UICommandExecutorFactory.newUICommandExecutor(getShell()).execute(new ResourceChangingCommand(resolver));  resolutionFinished(resolutions,resolver.getStatuses());}  }
class C{  private void runLunMapDeletionOrRemoveInitiatorAlgorithm(StorageSystem storage,ExportMask exportMask,List<URI> volumes,List<Initiator> initiators,TaskCompleter taskCompleter) throws DeviceControllerException {  XtremIOClient client=null;  try {    String hostName=null;    String clusterName=null;    client=XtremIOProvUtils.getXtremIOClient(dbClient,storage,xtremioRestClientFactory);    String xioClusterName=client.getClusterDetails(storage.getSerialNumber()).getName();    boolean initiatorsOfRP=ExportUtils.checkIfInitiatorsForRP(initiators);    for (    Initiator initiator : initiators) {      if (null != initiator.getHostName()) {        hostName=initiator.getHostName();        clusterName=initiator.getClusterName();        break;      }    }    ArrayListMultimap<String,Initiator> groupInitiatorsByIG=XtremIOProvUtils.mapInitiatorToInitiatorGroup(storage.getSerialNumber(),initiators,null,xioClusterName,client);    ArrayListMultimap<String,Initiator> knownInitiatorsToIGMap=ArrayListMultimap.create();    XtremIOExportMaskInitiatorsValidator initiatorsValidator=(XtremIOExportMaskInitiatorsValidator)validator.removeVolumes(storage,exportMask.getId(),initiators);    initiatorsValidator.setInitiatorToIGMap(groupInitiatorsByIG);    initiatorsValidator.setKnownInitiatorToIGMap(knownInitiatorsToIGMap);    initiatorsValidator.validate();    Set<String> igNames=groupInitiatorsByIG.keySet();    List<URI> failedVolumes=new ArrayList<URI>();    List<String> failedIGs=new ArrayList<String>();    for (    URI volumeUri : volumes) {      BlockObject blockObj=BlockObject.fetch(dbClient,volumeUri);      _log.info("Block Obj {} , wwn {}",blockObj.getId(),blockObj.getWWN());      XtremIOVolume xtremIOVolume=null;      if (URIUtil.isType(volumeUri,Volume.class)) {        xtremIOVolume=XtremIOProvUtils.isVolumeAvailableInArray(client,blockObj.getLabel(),xioClusterName);      } else {        if (URIUtil.isType(volumeUri,BlockSnapshot.class) && BlockObject.checkForRP(dbClient,volumeUri)) {          _log.info(String.format("Dealing with a RecoverPoint bookmark lun mapping.  Checking to see if volume %s is available on array.",blockObj.getDeviceLabel()));          xtremIOVolume=XtremIOProvUtils.isVolumeAvailableInArray(client,blockObj.getDeviceLabel(),xioClusterName);        } else {          xtremIOVolume=XtremIOProvUtils.isSnapAvailableInArray(client,blockObj.getDeviceLabel(),xioClusterName);        }      }      if (null != xtremIOVolume) {        _log.info("Volume Details {}",xtremIOVolume.toString());        _log.info("Volume lunMap details {}",xtremIOVolume.getLunMaps().toString());        Set<String> lunMaps=new HashSet<String>();        boolean removeInitiator=false;        String volId=xtremIOVolume.getVolInfo().get(2);        if (xtremIOVolume.getLunMaps().isEmpty()) {          _log.info("Volume  {} doesn't have any existing export available on Array, unexported already.",xtremIOVolume.toString());          exportMask.removeFromUserCreatedVolumes(blockObj);          exportMask.removeVolume(blockObj.getId());          continue;        }        for (        List<Object> lunMapEntries : xtremIOVolume.getLunMaps()) {          @SuppressWarnings("unchecked") List<Object> igDetails=(List<Object>)lunMapEntries.get(0);          String igName=(String)igDetails.get(1);          Double IgIdDouble=(Double)igDetails.get(2);          String igId=String.valueOf(IgIdDouble.intValue());          _log.info("IG Name: {} Id: {} found in Lun Map",igName,igId);          if (!igNames.contains(igName)) {            _log.info("Volume is associated with IG {} which is not in the removal list requested, ignoring..",igName);            continue;          }          boolean igHasOtherHostInitiatorsOfSameCluster=knownInitiatorsToIGMap.get(igName).size() > groupInitiatorsByIG.get(igName).size();          if (!initiatorsOfRP && clusterName != null && igHasOtherHostInitiatorsOfSameCluster) {            removeInitiator=true;          }          if (!removeInitiator) {            @SuppressWarnings("unchecked") List<Object> tgtGroupDetails=(List<Object>)lunMapEntries.get(1);            Double tgIdDouble=(Double)tgtGroupDetails.get(2);            String tgtid=String.valueOf(tgIdDouble.intValue());            String lunMapId=volId.concat(XtremIOConstants.UNDERSCORE).concat(igId).concat(XtremIOConstants.UNDERSCORE).concat(tgtid);            _log.info("LunMap Id {} Found associated with Volume {}",lunMapId,blockObj.getLabel());            lunMaps.add(lunMapId);          }        }        for (        String lunMap : lunMaps) {          try {            client.deleteLunMap(lunMap,xioClusterName);          } catch (          Exception e) {            failedVolumes.add(volumeUri);            _log.warn("Deletion of Lun Map {} failed}",lunMap,e);          }        }        if (removeInitiator) {          _log.info("Removing requested intiators from IG instead of deleting LunMap" + " as the IG contains other Host's initiators belonging to same Cluster.");          ExportMaskValidationContext ctx=new ExportMaskValidationContext();          ctx.setStorage(storage);          ctx.setExportMask(exportMask);          ctx.setBlockObjects(volumes,dbClient);          XtremIOExportMaskVolumesValidator volumeValidator=(XtremIOExportMaskVolumesValidator)validator.removeInitiators(ctx);          volumeValidator.setIgNames(groupInitiatorsByIG.keySet());          volumeValidator.validate();          List<Initiator> initiatorsToBeRemoved=new ArrayList<Initiator>();          ExportOperationContext context=(ExportOperationContext)WorkflowService.getInstance().loadStepData(taskCompleter.getOpId());          if (context != null && context.getOperations() != null) {            ListIterator li=context.getOperations().listIterator(context.getOperations().size());            while (li.hasPrevious()) {              _log.info("Handling deleteExportMask as a result of rollback");              ExportOperationContextOperation operation=(ExportOperationContextOperation)li.previous();              if (operation != null && XtremIOExportOperationContext.OPERATION_ADD_INITIATORS_TO_INITIATOR_GROUP.equals(operation.getOperation())) {                initiatorsToBeRemoved=(List<Initiator>)operation.getArgs().get(0);                _log.info("Removing initiators {} as part of rollback",Joiner.on(',').join(initiatorsToBeRemoved));              }            }          } else {            initiatorsToBeRemoved=initiators;          }          for (          Initiator initiator : initiatorsToBeRemoved) {            try {              String initiatorName=initiator.getMappedInitiatorName(storage.getSerialNumber());              XtremIOInitiator initiatorObj=client.getInitiator(initiatorName,xioClusterName);              if (null != initiatorObj) {                client.deleteInitiator(initiatorName,xioClusterName);              } else {                _log.info("Initiator {} already deleted",initiatorName);              }            } catch (            Exception e) {              failedIGs.add(initiator.getLabel());              _log.warn("Removal of Initiator {} from IG failed",initiator.getLabel(),e);            }          }        }      } else {        exportMask.removeFromUserCreatedVolumes(blockObj);        exportMask.removeVolume(blockObj.getId());      }    }    dbClient.updateObject(exportMask);    if (!failedVolumes.isEmpty()) {      String errMsg="Export Operations failed for these volumes: ".concat(Joiner.on(", ").join(failedVolumes));      ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(errMsg,null);      taskCompleter.error(dbClient,serviceError);      return;    }    if (!failedIGs.isEmpty()) {      String errMsg="Export Operations failed deleting these initiators: ".concat(Joiner.on(", ").join(failedIGs));      ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(errMsg,null);      taskCompleter.error(dbClient,serviceError);      return;    }    deleteInitiatorGroup(groupInitiatorsByIG,client,xioClusterName);    deleteInitiatorGroupFolder(client,xioClusterName,clusterName,hostName,storage);    taskCompleter.ready(dbClient);  } catch (  Exception e) {    _log.error(String.format("Export Operations failed - maskName: %s",exportMask.getId().toString()),e);    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    taskCompleter.error(dbClient,serviceError);  }}  }
class C{  public CFollowDumpAction(final CDebugPerspectiveModel perspectiveModel,final IAddress offset){  super("Follow DWORD in Dump");  Preconditions.checkNotNull(perspectiveModel,"IE01416: Perspective model argument can not be null");  Preconditions.checkNotNull(offset,"IE01417: Offset argument can not be null");  m_perspectiveModel=perspectiveModel;  m_offset=offset;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public NoOpUserError(Throwable cause,int code,Object[] arguments){  super(UserError.getErrorMessage(code,arguments),cause);  this.code=code;}  }
class C{  public void performInit(){  fLocationList.clear();  String location=this.preferencePage.getPreferenceStore().getString(LIBRARY_PATH_LOCATION_PREFIX);  List<String> checkedLocations=new ArrayList<String>();  if (location != null && location.length() > 0) {    String[] locations=location.split(ESCAPE_REGEX + LOCATION_DELIM);    for (int i=0; i < locations.length; i++) {      String values[]=locations[i].split(ESCAPE_REGEX + STATE_DELIM);      fLocationList.add(values[0]);      if (Boolean.valueOf(values[1]).booleanValue())       checkedLocations.add(values[0]);    }    fLocationList.remove("");  }  fTableViewer.setInput(fLocationList);  fTableViewer.setCheckedElements(checkedLocations.toArray(new String[checkedLocations.size()]));  fTableViewer.refresh();  this.preferencePage.setErrorMessage(null);}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{alertId}/notifications/{notificationId}/triggers/{triggerId}") @Description("Disaccociates a trigger having the given ID from the given notification ID.  The trigger is not deleted from the alert.") public Response deleteTriggerInNotification(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,@PathParam("notificationId") BigInteger notificationId,@PathParam("triggerId") BigInteger triggerId){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (notificationId == null || notificationId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Notification Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (triggerId == null || triggerId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Trigger Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Notification notification=null;  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert == null) {    throw new WebApplicationException(Status.NOT_FOUND.getReasonPhrase(),Status.NOT_FOUND);  }  validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));  for (  Notification tempNotification : alert.getNotifications()) {    if (tempNotification.getId().equals(notificationId)) {      notification=tempNotification;      break;    }  }  if (notification == null) {    throw new WebApplicationException("Notification Id does not exist for this alert.",Status.BAD_REQUEST);  }  List<Trigger> listTrigger=new ArrayList<Trigger>(notification.getTriggers());  Iterator<Trigger> it=listTrigger.iterator();  while (it.hasNext()) {    Trigger tempTrigger=it.next();    if (tempTrigger.getId().equals(triggerId)) {      it.remove();      notification.setTriggers(listTrigger);      alert.setModifiedBy(getRemoteUser(req));      alertService.updateAlert(alert);      return Response.status(Status.OK).build();    }  }  throw new WebApplicationException("This trigger does not exist for the notification.",Status.BAD_REQUEST);}  }
class C{  public void testPreparedStatementBatch() throws SQLException {  PreparedStatement ps=connection.prepareStatement("INSERT INTO batch_updates(id, str_value, clob_value) VALUES (?, ?, ?)");  try {    ps.setInt(1,1);    ps.setString(2,"test");    ps.setNull(3,Types.LONGVARBINARY);    ps.addBatch();    ps.setInt(1,3);    ps.setCharacterStream(2,new StringReader("stream"),11);    ps.setString(3,"string");    ps.addBatch();    ps.setInt(1,2);    ps.setString(2,"another");    ps.setNull(3,Types.LONGVARBINARY);    ps.addBatch();    ps.executeBatch();    Statement stmt=connection.createStatement();    try {      ResultSet rs=stmt.executeQuery("SELECT * FROM batch_updates");      int counter=0;      while (rs.next()) {        counter++;        int id=rs.getInt(1);        String value=rs.getString(2);        String clob=rs.getString(3);        assertTrue("Should contain correct ID",id == 1 || id == 2 || id == 3);        assertTrue("Should contain correct value",id == 1 ? "test".equals(value) : id == 2 ? "another".equals(value) : id == 3 ? "stream".equals(value) && "string".equals(clob) : false);      }      assertTrue("Should insert 3 rows.",counter == 3);    }  finally {      stmt.close();    }  }  finally {    ps.close();  }}  }
class C{  public SAXException(String description){  super(description);}  }
class C{  public synchronized Relationship removeRelationship(Vertex type,Vertex target){  return removeRelationship(new BasicRelationship(this,type,target));}  }
class C{  private void clearTiers(){  tierMap=new HashMap<>();  tiersForbiddenWithin=new HashSet<>();}  }
class C{  public boolean isGeometryChanged(){  return true;}  }
class C{  public static void reset(){  MAP_KEY_TO_SCOPE.clear();  ConfigurationHolder.configuration.onScopeForestReset();  ScopeImpl.reset();}  }
class C{  private void writeByte(int x){  assert x >= 0 && x < 256;  if (n == 0) {    try {      out.write(x);    } catch (    IOException e) {      e.printStackTrace();    }    return;  }  for (int i=0; i < 8; i++) {    boolean bit=((x >>> (8 - i - 1)) & 1) == 1;    writeBit(bit);  }}  }
class C{  @DSComment("Only getActiveNetworkInfo() is important") @DSSpec(DSCat.NETWORK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.924 -0500",hash_original_method="E81AE1BB2B0829AC31FE0D849F294E67",hash_generated_method="8EECB83E305F4FE069A5F2CEC7520E99") public boolean isConnected(){synchronized (this) {    return mState == State.CONNECTED;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.400 -0500",hash_original_method="8309DDE2E41584C8A0A69308778461DD",hash_generated_method="921DB627584208513156ED32C45F27D3") public ExecutionException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static <T>T nextItem(List<T> list){  return list.get(PRNG.nextInt(list.size()));}  }
class C{  public void createComponent(Composite parent,FormToolkit toolkit,String infoText,int layoutColumns){  FormText timerText=toolkit.createFormText(parent,false);  timerText.setText("<form><p><img href=\"img\" /> <b>" + sensorConfig.getTechnologyName() + "</b></p></form>",true,false);  timerText.setImage("img",ImageFormatter.getSensorConfigImage(sensorConfig));  timerText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,layoutColumns,1));  toolkit.createLabel(parent,"Minimum level:").setLayoutData(getIndentGridData());  levelCombo=new Combo(parent,SWT.READ_ONLY);  toolkit.adapt(levelCombo,false,false);  for (  String levels : sensorConfig.getLogLevels()) {    levelCombo.add(levels);  }  createInfoLabel(parent,toolkit,infoText);  fillValue();}  }
class C{  public Matrix4d translationRotateScaleInvert(Vector3fc translation,Quaternionfc quat,Vector3fc scale){  return translationRotateScaleInvert(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z());}  }
class C{  static boolean updateIndexIfNeeded() throws org.jdom2.JDOMException, java.io.IOException {  String masterVersion=null;  DecoderIndexFile masterXmlFile=new DecoderIndexFile();  URL masterFile=FileUtil.findURL("xml/" + defaultDecoderIndexFilename(),FileUtil.Location.INSTALLED);  if (masterFile == null) {    return false;  }  Element masterRoot=masterXmlFile.rootFromURL(masterFile);  if (masterRoot.getChild("decoderIndex") != null) {    if (masterRoot.getChild("decoderIndex").getAttribute("version") != null) {      masterVersion=masterRoot.getChild("decoderIndex").getAttribute("version").getValue();    }    log.debug("master version found, is " + masterVersion);  } else {    return false;  }  String userVersion=null;  DecoderIndexFile userXmlFile=new DecoderIndexFile();  Element userRoot=userXmlFile.rootFromName(defaultDecoderIndexFilename());  if (userRoot.getChild("decoderIndex") != null) {    if (userRoot.getChild("decoderIndex").getAttribute("version") != null) {      userVersion=userRoot.getChild("decoderIndex").getAttribute("version").getValue();    }    log.debug("user version found, is " + userVersion);  }  if (masterVersion != null && masterVersion.equals(userVersion)) {    return false;  }  if (masterVersion != null) {    instance().fileVersion=Integer.parseInt(masterVersion);  }  forceCreationOfNewIndex();  return true;}  }
class C{  public Result send(SMS sms,boolean... sync){  return service.send(sms,boolToInt(true,sync));}  }
class C{  public static OnInsertSplitStreamClause create(boolean isFirst,List<OnInsertSplitStreamItem> items){  return new OnInsertSplitStreamClause(isFirst,items);}  }
class C{  @SuppressWarnings("unchecked") public void removeControlerListener(final ControlerListener l){  Class[] interfaces=l.getClass().getInterfaces();  for (  Class anInterface : interfaces) {    if (ControlerListener.class.isAssignableFrom(anInterface)) {      this.listenerList.remove(anInterface,l);    }  }}  }
