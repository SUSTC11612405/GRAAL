class C{  public MessageArea addTextBox(final String value){  setInitialised(true);  this.textBoxValue=value;  return this;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK) {    finish();    return false;  } else {    return true;  }}  }
class C{  public double distance(Instance first,Instance second){  return Math.sqrt(distance(first,second,Double.POSITIVE_INFINITY));}  }
class C{  private static void connectParentsWithChildren(final INaviView view,final INaviViewNode node){  final List<INaviEdge> incomingEdges=node.getIncomingEdges();  final List<? extends INaviViewNode> children=node.getChildren();  for (  final INaviEdge incomingEdge : incomingEdges) {    if (incomingEdge.getSource() == node) {      continue;    }    for (    final INaviViewNode child : children) {      if (child == node) {        continue;      }      if (!hasEdge(incomingEdge.getSource(),child,incomingEdge.getType())) {        view.getContent().createEdge(incomingEdge.getSource(),child,incomingEdge.getType());      }    }  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public final void testValidateUppercaseAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.UPPERCASE,true,allowedCharacters);  assertFalse(characterValidator.validate("Ab C-"));}  }
class C{  protected static List extractFeMergeNode(Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Map filterMap,BridgeContext ctx){  List srcs=null;  for (Node n=filterElement.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element e=(Element)n;    Bridge bridge=ctx.getBridge(e);    if (bridge == null || !(bridge instanceof SVGFeMergeNodeElementBridge)) {      continue;    }    Filter filter=((SVGFeMergeNodeElementBridge)bridge).createFilter(ctx,e,filteredElement,filteredNode,inputFilter,filterMap);    if (filter != null) {      if (srcs == null) {        srcs=new LinkedList();      }      srcs.add(filter);    }  }  return srcs;}  }
class C{  public final static int writeSecurityBufferAndUpdatePointer(ByteArrayOutputStream baos,short len,int pointer) throws IOException {  baos.write(writeSecurityBuffer(len,pointer));  return pointer + len;}  }
class C{  public void accept(ICompilationUnit sourceUnit,AccessRestriction accessRestriction){  CompilationResult unitResult=new CompilationResult(sourceUnit,1,1,this.options.maxProblemsPerUnit);  try {    CompilationUnitDeclaration parsedUnit=basicParser().dietParse(sourceUnit,unitResult);    this.lookupEnvironment.buildTypeBindings(parsedUnit,accessRestriction);    this.lookupEnvironment.completeTypeBindings(parsedUnit,true);  } catch (  AbortCompilationUnit e) {    if (unitResult.compilationUnit == sourceUnit) {    } else {      throw e;    }  }  if (BasicSearchEngine.VERBOSE) {    if (unitResult.problemCount > 0) {      System.out.println(unitResult);    }  }}  }
class C{  @RpcMethod public DetachISOResponse detachISO(String vmId,boolean isDeleteFile) throws InterruptedException, RpcException {  SyncHandler<DetachISOResponse,Host.AsyncClient.detach_iso_call> syncHandler=new SyncHandler<>();  detachISO(vmId,isDeleteFile,syncHandler);  syncHandler.await();  logger.info("finished detach_iso vm {}, target {}",vmId,getHostIp());  return ResponseValidator.checkDetachISOResponse(syncHandler.getResponse());}  }
class C{  public static <L,R>ImmutablePair<L,R> of(final L left,final R right){  return new ImmutablePair<L,R>(left,right);}  }
class C{  public void mediaMarker(String syncbaseID,String markerName){}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public GridHandleTable(int initCap,float loadFactor){  this.loadFactor=loadFactor;  spine=new int[initCap];  next=new int[initCap];  objs=new Object[initCap];  spineEmpty=new int[initCap];  nextEmpty=new int[initCap];  Arrays.fill(spineEmpty,-1);  Arrays.fill(nextEmpty,-1);  threshold=(int)(initCap * loadFactor);  clear();}  }
class C{  public Object firstKey(){  return key(firstEntry());}  }
class C{  public static Settings prepareSettings(Settings input){  Settings.Builder output=settingsBuilder();  initializeSettings(output,input,true);  finalizeSettings(output,null,null);  return output.build();}  }
class C{  public LabelValueComparator(final Locale locale){  c=Collator.getInstance(locale);}  }
class C{  protected void offerAt(final int pos,O e){  if (pos == NO_VALUE) {    if (size + 1 > queue.length) {      resize(size + 1);    }    index.put(e,size);    size++;    heapifyUp(size - 1,e);    heapModified();    return;  } else {    assert (pos >= 0) : "Unexpected negative position.";    assert (queue[pos].equals(e));    if (comparator == null) {      @SuppressWarnings("unchecked") Comparable<Object> c=(Comparable<Object>)e;      if (c.compareTo(queue[pos]) >= 0) {        return;      }    } else {      if (comparator.compare(e,queue[pos]) >= 0) {        return;      }    }    heapifyUp(pos,e);    heapModified();    return;  }}  }
class C{  public T caseTraceStateExited(TraceStateExited object){  return null;}  }
class C{  @Override public void run(){  if (vm != null) {    try {      vm.waitFor();    } catch (    InterruptedException ie) {      Thread.currentThread().interrupt();    }  }  if (runnable != null) {    runnable.run();  }}  }
class C{  private void highlightStackPointer(final Graphics g,final int row){  g.setColor(Color.RED);  final double width=g.getFontMetrics().getStringBounds(Strings.repeat("0",2 * getElementSize()),g).getWidth();  g.fillRect(PADDING_LEFT - 2 - (m_charWidth * m_firstColumn),(m_paddingTop + (row * m_rowHeight)) - m_charHeight,(int)width + 4,m_charHeight + 2);}  }
class C{  public ConnectTimeoutException(final String message){  super(message);}  }
class C{  public static boolean isJavaProjectNonNullAndExists(IJavaProject javaProject){  return (javaProject != null && javaProject.exists());}  }
class C{  public void showURL(String url){  SessionManager.getAppDesktop().showURL(url,true);}  }
class C{  public void enlargeByMetres(double metres){  double latMargin=metres / 110852.0;  double lngMargin=metres / (110852.0 * Math.abs(Math.cos(LatLong.radians * lat1)));  lat1-=latMargin;  lat2+=latMargin;  lng1-=lngMargin;  lng2+=lngMargin;}  }
class C{  public InvalidRequestException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testDatabaseDriverPropertiesUserAndPasswordPropertyOverrideDSUserAndPassword(){  String driverPropertyString="user=APP;password=egg;CreateDatabase=create";  Properties props=new Properties();  props.setProperty(DatasourcePropertySet.USERNAME,"sa");  props.setProperty(DatasourcePropertySet.PASSWORD,"");  props.setProperty(DatasourcePropertySet.CONNECTION_PROPERTIES,driverPropertyString);  DataSource ds=dataSourceConverter.fromProperties(props);  assertEquals("APP",ds.getUsername());  assertEquals("egg",ds.getPassword());}  }
class C{  private void primitiveObjectFieldStoreHelper(RVMMethod target,Instruction inst,IR ir,FieldReference fieldRef){  Instruction wb=Call.create4(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),PutField.getClearGuard(inst),PutField.getRef(inst).copy(),PutField.getValue(inst).copy(),PutField.getOffset(inst).copy(),IRTools.IC(fieldRef.getId()));  replaceInstructionWithBarrier(inst,wb);  if (ir.options.H2L_INLINE_PRIMITIVE_WRITE_BARRIER) {    inline(wb,ir,true);  }}  }
class C{  public SimpleStringProperty scriptProperty(){  return this.script;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 1) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {        showFeedback("This tool can only work for shapefiles of a " + "POLYLINE or POLYGON shape-type. Tool execution " + "ceased.");        return;      } else       if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {        outputShapeType=ShapeType.POLYLINE;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            recJTSGeometries[a].setUserData(record.getRecordNumber());            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (k + 1) + " of "+ numFiles+ ": Reading data:",progress);        }      }    }    try {      updateProgress("Performing operation (progress will not be updated):",-1);      g1=factory.buildGeometry(inputGeometryList);      outputGeometry=g1.buffer(0);    } catch (    Exception e) {      showFeedback("Error during analysis.");      return;    }    ShapeFile output=null;    if (outputGeometry instanceof GeometryCollection) {      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      output=new ShapeFile(outputFile,outputShapeType,fields);      output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      for (int a=0; a < numGeometries; a++) {        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof LineString) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int EHOSTDOWN(){  return Errno.EHOSTDOWN.intValue();}  }
class C{  public static void println(boolean x){  out.println(x);}  }
class C{  public boolean isSetNode(){  return this.node != null;}  }
class C{  public boolean hasChildNodes(int nodeHandle){  return (getFirstChild(nodeHandle) != NULL);}  }
class C{  private void insertUnOrderList(Editable editable,MDUnOrderListSpan mdUnOrderListSpan,int start){  mRxMDEditText.removeTextChangedListener(mTextWatcher);  String appendString=getNestedString(mdUnOrderListSpan.getNested(),false,-1);  editable.insert(start + 1,appendString);  int position=EditUtils.findNextNewLineCharCompat(editable,start + appendString.length());  editable.setSpan(new MDUnOrderListSpan(10,mdUnOrderListSpan.getColor(),mdUnOrderListSpan.getNested()),start + 1,position == -1 ? start + 1 + appendString.length() : position,Spanned.SPAN_INCLUSIVE_INCLUSIVE);  mRxMDEditText.addTextChangedListener(mTextWatcher);}  }
class C{  public StringParser(String str){  this.str=str;  currentPosition=0;  maxPosition=str == null ? 0 : str.length();}  }
class C{  private double sampleConditionalBranchColouringEM(NodeRef node,int parentColour,int childColour,double time,double childHeight,double[] matrixElements,DefaultBranchColouring initialBranchColouring){  DefaultBranchColouring history=new DefaultBranchColouring(parentColour,childColour);  int iterations=0;  int currentColour;  double currentHeight, dt;  double logLikelihood;  boolean reject, firstEvent;  double _sumRate=0.0;  String _msg="";  do {    history.clear();    currentColour=parentColour;    currentHeight=time;    logLikelihood=0.0;    reject=false;    firstEvent=true;    if (debugRejectionSampler) {      _sumRate=0.0;      _msg="sample (iter=" + iterations + ") from "+ parentColour+ " to "+ childColour+ " at "+ df.format(childHeight)+ " over "+ df.format(time)+ " rate="+ df.format(matrixElements[3 * parentColour] / time)+ "\n";    }    do {      double totalRate, migrationRate;      if (currentColour == 0) {        totalRate=matrixElements[0] / time;        migrationRate=matrixElements[1] / time;      } else {        totalRate=matrixElements[3] / time;        migrationRate=matrixElements[2] / time;      }      double U;      do {        U=MathUtils.nextDouble();      } while (U == 0.0);      if (firstEvent && (parentColour != childColour)) {        double minU=Math.exp(-totalRate * time);        U=minU + U * (1.0 - minU);      }      dt=-Math.log(U) / totalRate;      currentHeight-=dt;      if (currentHeight > 0) {        if (debugRejectionSampler) {          _sumRate+=totalRate * dt;          _msg=_msg + "rate=" + df.format(totalRate)+ "\ttime="+ df.format(dt)+ "\tintrate="+ df.format(totalRate * dt)+ "\n";        }        if (firstEvent || (migrationRate == totalRate) || (MathUtils.nextDouble() < migrationRate / totalRate)) {          currentColour=1 - currentColour;          history.addEvent(currentColour,currentHeight + childHeight);          logLikelihood+=(-totalRate * dt) + Math.log(migrationRate);        } else {          reject=true;        }      } else {        if (debugRejectionSampler) {          _sumRate+=totalRate * (currentHeight + dt);          _msg=_msg + "rate=" + df.format(totalRate)+ "\ttime="+ df.format(currentHeight + dt)+ "\tintrate="+ df.format(totalRate * (currentHeight + dt))+ "\n";        }        logLikelihood+=-totalRate * (currentHeight + dt);      }      firstEvent=false;    } while ((!reject) && (currentHeight > 0));    iterations+=1;    if (currentColour != childColour) {      reject=true;    }  } while (reject && (iterations < maxIterations));  if (debugRejectionSampler) {    _totalIntegratedRate+=_sumRate;    System.out.print(_msg);  }  if (reject) {    if (currentColour != childColour) {      double previousEventHeight=currentHeight + dt;      double finalEventHeight=0.01 * previousEventHeight;      history.addEvent(childColour,finalEventHeight + childHeight);      if (debugMessages) {        System.out.println("dr.evolution.colouring.BranchColourSampler: failed to generate sample after " + maxIterations + " trials.");        System.out.println(": height=" + time);        System.out.println(": childColour=" + childColour);        System.out.println(": childHeight=" + childHeight);        System.out.println(": migration rate 0->1 = " + matrixElements[1]);        System.out.println(": migration rate 1->0 = " + matrixElements[2]);        System.out.println(": total rate 0 = " + matrixElements[0]);        System.out.println(": total rate 1 = " + matrixElements[3]);      }    }  }  initialBranchColouring.addHistory(history);  return logLikelihood;}  }
class C{  public MatrixStack rotate(Rotation rotation){  RealMatrix rotMat=MatrixUtils.createRealMatrix(4,4);  rotMat.setSubMatrix(rotation.getMatrix(),0,0);  rotMat.setEntry(3,3,1);  current=current.preMultiply(rotMat);  return this;}  }
class C{  @Transactional public void deleteById(String id,User currentUser) throws Exception {  logHelper.logUsersOperations(OperationType.DELETE,getClassT().getName(),currentUser);  T po=findById(Long.valueOf(id));  Field lastModifiedByField=po.getClass().getDeclaredField(CommonsConstant.LAST_MODIFIED_BY);  lastModifiedByField.setAccessible(true);  lastModifiedByField.set(po,currentUser);  Field lastModifiedDateField=po.getClass().getDeclaredField(CommonsConstant.LAST_MODIFIED_DATE);  lastModifiedDateField.setAccessible(true);  lastModifiedDateField.set(po,new Date());  repository.save(setInvalid(po));}  }
class C{  public boolean isDirty(){  return DETECT_READ_CONFLICTS || this.dirty;}  }
class C{  private boolean hasChild(final ITreeNode<CTag> tag){  for (int i=0; i < getChildCount(); i++) {    final CTagNode node=(CTagNode)getChildAt(i);    if (node.getObject().getObject() == tag.getObject()) {      return true;    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.appendData(", Esquire");  childData=child.getData();  assertEquals("characterdataAppendDataGetDataAssert","Margaret Martin, Esquire",childData);}  }
class C{  public void testComputedFQCN(){  assertEquals("o.c.c.c.myc.MyContainerIsTheBest",this.generator.computedFQCN("org.codehaus.cargo.container.myc.MyContainerIsTheBest"));}  }
class C{  public ItemStack tryToFillSlots(ItemStack stack,int... slots){  if (slots.length % 2 != 0) {    throw new IllegalArgumentException("Slots must be pairs.");  }  ItemStack maxStack=stack.clone();  maxStack.setAmount(stack.getMaxStackSize());  for (int s=0; s < slots.length && stack.getAmount() > 0; s+=2) {    int start=slots[s];    int end=slots[s + 1];    int delta=start < end ? 1 : -1;    for (int i=start; i != end && stack.getAmount() > 0; i+=delta) {      if (!itemShiftClickAllowed(i,stack)) {        continue;      }      ItemStack currentStack=getItem(i);      if (currentStack == null) {        if (stack.getAmount() > stack.getMaxStackSize()) {          setItem(i,maxStack);          stack.setAmount(stack.getAmount() - stack.getMaxStackSize());        } else {          ItemStack finalStack=stack.clone();          setItem(i,finalStack);          stack.setAmount(0);        }      } else       if (currentStack.isSimilar(stack)) {        int amount=currentStack.getAmount();        int maxStackSize=Math.min(currentStack.getMaxStackSize(),getMaxStackSize());        int transfer=Math.min(stack.getAmount(),maxStackSize - amount);        if (transfer > 0) {          currentStack.setAmount(amount + transfer);          stack.setAmount(stack.getAmount() - transfer);        }        setItem(i,currentStack);      }    }  }  if (stack.getAmount() <= 0) {    stack=null;  }  return stack;}  }
class C{  public PersianAnalyzer(CharArraySet stopwords){  super(stopwords);}  }
class C{  public PublicKey engineResolvePublicKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  throw new UnsupportedOperationException();}  }
class C{  public void updateCoordinatorWithLicenseText(License license) throws CoordinatorClientException {}  }
class C{  @Override public void toggle(){  setChecked(!isChecked);}  }
class C{  public static DeterministicKeyChain watchAndFollow(DeterministicKey watchKey){  return new DeterministicKeyChain(watchKey,true);}  }
class C{  public void addRenamingCallback(OneSheeldRenamingCallback renamingCallback){  if (renamingCallback != null && !renamingCallbacks.contains(renamingCallback))   renamingCallbacks.add(renamingCallback);}  }
class C{  private Path createSubDirectory(Path parentDir,String subdirName) throws IOException {  Path subDir=parentDir.resolve(subdirName);  if (!Files.exists(subDir)) {    Files.createDirectory(subDir);  }  return subDir;}  }
class C{  private boolean hasSequence(Subgraph graph){  int oddDegreeCount=0;  for (Iterator i=graph.nodeIterator(); i.hasNext(); ) {    Node node=(Node)i.next();    if (node.getDegree() % 2 == 1)     oddDegreeCount++;  }  return oddDegreeCount <= 2;}  }
class C{  public static SmsTon valueOf(int value){switch (value) {case 0x00:    return UNKNOWN;case 0x01:  return INTERNATIONAL;case 0x02:return NATIONAL;case 0x03:return NETWORK_SPECIFIC;case 0x04:return SUBSCRIBER;case 0x05:return ALPHANUMERIC;case 0x06:return ABBREVIATED;default :return new SmsTon(value,String.valueOf(value));}}  }
class C{  public static <A>List<A> make(A x1){  return new List<A>(x1,new List<A>());}  }
class C{  public Builder async(boolean async){  this.async=async;  return this;}  }
class C{  public HistoryData(S source,S target){  this.source=source;  this.target=target;}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> of(){  return (ImmutableSortedMap<K,V>)NATURAL_EMPTY_MAP;}  }
class C{  protected void sequence_AnnotatedExportableElement_ClassExtendsClause_ClassImplementsList_Members_TypeVariables(ISerializationContext context,N4ClassDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String format(String format,Object... args){  if (args != null) {    for (int i=0; i < args.length; i++) {      if (args[i] == null) {        args[i]="null";      }    }  }  return new MessageFormat(format).format(args);}  }
class C{  public RuntimeException createException(String text){  return new RuntimeException(text + " Position " + lineno+ ":"+ colno+ " Char: "+ (char)nextChar);}  }
class C{  public void outputDDLToFile(String fileName){  this.createSchemaWriter=getWriter(fileName);}  }
class C{  private static <K,V>CacheConfiguration<K,V> cacheConfiguration(String name){  CacheConfiguration<K,V> ccfg=new CacheConfiguration<>(name);  ccfg.setAffinity(new RendezvousAffinityFunction(false,32));  ccfg.setStartSize(100);  ccfg.setStatisticsEnabled(true);  return ccfg;}  }
class C{  public ConnectionModel(){}  }
class C{  public static <A>StreamTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  public static void gotoOffset(final JFrame parent,final CMemoryViewer view,final CDebugPerspectiveModel model){  final IDebugger debugger=model.getCurrentSelectedDebugger();  if (debugger == null) {    return;  }  final TargetProcessThread activeThread=debugger.getProcessManager().getActiveThread();  final Memory memory=debugger.getProcessManager().getMemory();  final CDefaultMemoryExpressionBinding binding=new CDefaultMemoryExpressionBinding(activeThread,memory);  final CGotoDialog dlg=new CGotoDialog(parent,model.getCurrentSelectedDebugger().getProcessManager().getMemoryMap(),binding,model.getGotoAddress());  dlg.setVisible(true);  final IAddress value=dlg.getValue();  if (value != null) {    model.setGotoAddress(value);    model.setActiveMemoryAddress(value,true);    view.requestFocusInWindow();  }}  }
class C{  private void addQuote(HTMLElement quoteElement,int curAlign,boolean isStartTag){  String quote=null;  int quoteNum=isStartTag ? 0 : 1;  if (quoteTagCount == 0) {    quote="\"";  } else {    quote="'";    quoteNum+=2;  }  if ((FIXED_WIDTH) && (width - x < font.stringWidth(quote))) {    newLine(curAlign);  }  Label quoteLabel=addString(quote,curAlign);  quoteLabel.putClientProperty(CLIENT_PROPERTY_QUOTE,new Integer(quoteNum));  if (loadCSS) {    quoteElement.addAssociatedComponent(quoteLabel);  }}  }
class C{  @SuppressWarnings("ConstantConditions") public static boolean monthAfter(long first,long second){  if (isNotTime(first) || isNotTime(second)) {    return false;  }  DateOnlyCalendar firstCalendar=DateOnlyCalendar.fromTime(first);  DateOnlyCalendar secondCalendar=DateOnlyCalendar.fromTime(second);  boolean after=firstCalendar.monthAfter(secondCalendar);  firstCalendar.recycle();  secondCalendar.recycle();  return after;}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  if (!canAutoScroll) {    return super.dispatchTouchEvent(ev);  }  int action=MotionEventCompat.getActionMasked(ev);  if (stopScrollWhenTouch) {    if ((action == MotionEvent.ACTION_DOWN) && isAutoScroll) {      isStopByTouch=true;      stopAutoScroll();    } else     if (ev.getAction() == MotionEvent.ACTION_UP && isStopByTouch) {      startAutoScroll();    }  }  return super.dispatchTouchEvent(ev);}  }
class C{  private boolean readTxtData(DataInputStream dis){  try {    while (dis.available() > 0) {      int len=dis.readUnsignedByte();      if (len == 0) {        break;      }      byte[] data=new byte[len];      dis.readFully(data);      String[] keyVal=new String(data).split("=");      if (keyVal.length != 2) {        return false;      }      mTxtRecord.put(keyVal[0],keyVal[1]);    }    return true;  } catch (  IOException e) {    e.printStackTrace();  }  return false;}  }
class C{  public double distanceSq(final double x,final double y){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  return (dx * dx + dy * dy);}  }
class C{  @DSComment("MatrixCursor is array backed data structure") @DSSpec(DSCat.DATABASE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:37.751 -0500",hash_original_method="30233D359459EB079BFCFD374250902B",hash_generated_method="56703011C0300D55CE4BB4F75D9CA356") public void addRow(Iterable<?> columnValues){  int start=rowCount * columnCount;  int end=start + columnCount;  ensureCapacity(end);  if (columnValues instanceof ArrayList<?>) {    addRow((ArrayList<?>)columnValues,start);    return;  }  int current=start;  Object[] localData=data;  for (  Object columnValue : columnValues) {    this.addTaint(columnValue.getTaint());    this.addTaint(columnValue.toString().getTaint());    if (current == end) {      throw new IllegalArgumentException("columnValues.size() > columnNames.length");    }    localData[current++]=columnValue;  }  if (current != end) {    throw new IllegalArgumentException("columnValues.size() < columnNames.length");  }  rowCount++;}  }
class C{  public void testConstructorSignBytesNegative7(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,23,-101};  int aSign=-1;  byte rBytes[]={-1,11,-57,-101,1,75,-90,-46,-92,-4,14,-24,101};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  void disconnectFromDividers(){  if (nextHorizontal != null) {    nextHorizontal.removeNode(this);    nextHorizontal=null;  }  if (nextVertical != null) {    nextVertical.removeNode(this);    nextVertical=null;  }  if (prevHorizontal != null) {    prevHorizontal.removeNode(this);    prevHorizontal=null;  }  if (prevVertical != null) {    prevVertical.removeNode(this);    prevVertical=null;  }}  }
class C{  public int order(){  return soot.PhaseOptions.getInt(options,"order");}  }
class C{  @Deprecated public static int exec(@NonNull String command,@Nullable ExecuteStreamHandler streamHandler) throws IOException {  return exec(command,ExecuteWatchdog.INFINITE_TIMEOUT,streamHandler);}  }
class C{  public ExtentTest fatal(String details){  log(Status.FATAL,details);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean x=getBool(stack);  MediaNode node=getMediaNode(stack);  if (node != null)   node.setChecked(x);  return null;}  }
class C{  public static int ERANGE(){  return Errno.ERANGE.intValue();}  }
class C{  public static void enableDoubleBuffering(Component c){  RepaintManager currentManager=RepaintManager.currentManager(c);  currentManager.setDoubleBufferingEnabled(true);}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  if (z == null) {    throw new NullPointerException();  }  for (  Node node : z) {    if (node == null) {      throw new NullPointerException();    }  }  boolean independent=false;  if (sepset.get(x,y) != null) {    List<List<Node>> condSets=sepset.getSet(x,y);    for (    List<Node> condSet : condSets) {      if (condSet.size() == z.size() && condSet.containsAll(z)) {        double pValue=1.0;        if (verbose) {          TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,pValue));        }        independent=true;        break;      }    }  }  if (verbose) {    if (independent) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,getPValue()));    } else {      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(x,y,z,getPValue()));    }  }  return independent;}  }
class C{  public PKCS5S1ParametersGenerator(Digest digest){  this.digest=digest;}  }
class C{  private void saveEntityTag(SIPETagHeader etagHeader){  if (etagHeader == null) {    mEntityTag=null;  } else {    mEntityTag=etagHeader.getETag();  }  if (mEntityTag != null) {    RegistryFactory.getFactory().writeString(REGISTRY_SIP_ETAG,mEntityTag);    long etagExpiration=System.currentTimeMillis() + mExpirePeriod;    RegistryFactory.getFactory().writeLong(REGISTRY_SIP_ETAG_EXPIRATION,etagExpiration);    if (sLogger.isActivated()) {      sLogger.debug("New entity tag: " + mEntityTag + ", expire at="+ etagExpiration);    }  } else {    RegistryFactory.getFactory().removeParameter(REGISTRY_SIP_ETAG);    RegistryFactory.getFactory().removeParameter(REGISTRY_SIP_ETAG_EXPIRATION);    if (sLogger.isActivated()) {      sLogger.debug("Entity tag has been reset");    }  }}  }
class C{  public void load(List<PolicyInformation> policyInformation){  PolicyInformation[] policyInformationArray=policyInformation.toArray(new PolicyInformation[policyInformation.size()]);  Arrays.sort(policyInformationArray,new PolicyInformationComparator());  data=new Object[policyInformation.size()][1];  int i=0;  for (  PolicyInformation policyInfo : policyInformationArray) {    data[i][0]=policyInfo;    i++;  }  fireTableDataChanged();}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  protected boolean isAnimating(){  return this.animation != null;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + my_k+ ")";}  }
class C{  public void markNotShown(){  PreferenceManager.getDefaultSharedPreferences(getContext()).edit().putBoolean(mPrefsKey,false).apply();}  }
class C{  public ECPrivateKeyImpl(byte[] encoded) throws InvalidKeyException {  decode(encoded);}  }
class C{  @DELETE @Path("job/{noteId}") @ZeppelinApi public Response stopNoteJobs(@PathParam("noteId") String noteId) throws IOException, IllegalArgumentException {  LOG.info("stop note jobs {} ",noteId);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse<>(Status.NOT_FOUND,"note not found.").build();  }  for (  Paragraph p : note.getParagraphs()) {    if (!p.isTerminated()) {      p.abort();    }  }  return new JsonResponse<>(Status.OK).build();}  }
class C{  public Anonymous_guard_2_ createAnonymous_guard_2_(){  Anonymous_guard_2_Impl anonymous_guard_2_=new Anonymous_guard_2_Impl();  return anonymous_guard_2_;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String newRes=getString(stack);  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).setAudioOutput(newRes);  }  return null;}  }
class C{  public HAVING HAVING(String having){  return new HAVING(this,having);}  }
class C{  @Override public String toString(){  return "path between " + getStartVertex().toString() + " and "+ getEndVertex().toString();}  }
class C{  public NamespaceCreateRequest createNamespaceCreateRequest(String namespaceCode){  NamespaceCreateRequest request=new NamespaceCreateRequest();  request.setNamespaceCode(namespaceCode);  return request;}  }
class C{  protected Color parseColor(Properties p,String propName,Color dfault){  String colorString=p.getProperty(propName);  if (colorString == null) {    return dfault;  } else {    try {      return parseColor(colorString);    } catch (    NumberFormatException e) {      System.err.println("Unparseable number \"" + colorString + "\" in property \""+ propName+ "\"");      return dfault;    }  }}  }
class C{  @Transactional public String addReward(final JSONObject requestJSONObject) throws ServiceException {  try {    return rewardRepository.add(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds reward failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  @SuppressWarnings("IfMayBeConditional") public IgniteInternalFuture<?> dynamicStartCache(@Nullable CacheConfiguration ccfg,String cacheName,@Nullable NearCacheConfiguration nearCfg,boolean failIfExists,boolean failIfNotStarted,boolean checkThreadTx){  return dynamicStartCache(ccfg,cacheName,nearCfg,CacheType.USER,failIfExists,failIfNotStarted,checkThreadTx);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void init(Credentials credentials){  this.credentials=credentials;  setIdentifier(credentials.getUsername());}  }
class C{  public double evaluate(double[][] front,double[][] trueParetoFront){  double[] maximumValue;  double[] minimumValue;  double[][] normalizedFront;  double[][] normalizedParetoFront;  maximumValue=this.getMaximumValues(trueParetoFront);  minimumValue=this.getMinimumValues(trueParetoFront);  normalizedFront=this.getNormalizedFront(front,maximumValue,minimumValue);  normalizedParetoFront=this.getNormalizedFront(trueParetoFront,maximumValue,minimumValue);  double sum=0.0;  for (int i=0; i < front.length; i++)   sum+=Math.pow(this.distanceToClosedPoint(normalizedFront[i],normalizedParetoFront),P);  sum=Math.pow(sum,1.0 / P);  double generationalDistance=sum / normalizedFront.length;  return generationalDistance;}  }
class C{  public AuthnProviderRestRep createAuthnProvider(String filePath) throws Exception {  InputStream adFileInputStream=this.getClass().getClassLoader().getResourceAsStream(filePath);  AuthnCreateParam input=XmlUtil.unmarshal(adFileInputStream,AuthnCreateParam.class);  return createAuthnProvider(input);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  private static File moveFileIntoUploadDirectory(File file) throws NoSuchAlgorithmException, IOException {  InputStream is=new FileInputStream(file);  byte buf[]=new byte[10240];  MessageDigest algorithm=MessageDigest.getInstance("SHA1");  for (int readSize=0; readSize >= 0; readSize=is.read(buf)) {    algorithm.update(buf,0,readSize);  }  is.close();  String hash=toHex(algorithm.digest());  return moveFileIntoUploadDirectory(file,hash);}  }
class C{  public void remove(int idx){  count--;  int from=idx + 1;  int to=idx;  int nCopy=count - idx;  System.arraycopy(values,from,values,to,nCopy);  System.arraycopy(indexes,from,indexes,to,nCopy);  System.arraycopy(priorities,from,priorities,to,nCopy);  values[count]=null;  indexes[count]=0;  priorities[count]=false;}  }
class C{  public int size(){  return this.count;}  }
class C{  private void updateControls(){  Spinner difficulty=(Spinner)findViewById(R.id.spinner_difficultyLevel);  difficulty.setSelection(GameActivity.getDifficultyIndex());  Button resume=(Button)findViewById(R.id.button_resumeGame);  resume.setEnabled(GameActivity.canResumeFromSave());  CheckBox neverLoseBall=(CheckBox)findViewById(R.id.checkbox_neverLoseBall);  neverLoseBall.setChecked(GameActivity.getNeverLoseBall());  CheckBox soundEffectsEnabled=(CheckBox)findViewById(R.id.checkbox_soundEffectsEnabled);  soundEffectsEnabled.setChecked(GameActivity.getSoundEffectsEnabled());  TextView highScore=(TextView)findViewById(R.id.text_highScore);  highScore.setText(String.valueOf(mHighScore));}  }
class C{  public synchronized void modify(Long startValue,Long minValue,Long maxValue,Long increment){  if (startValue == null) {    startValue=this.value;  }  if (minValue == null) {    minValue=this.minValue;  }  if (maxValue == null) {    maxValue=this.maxValue;  }  if (increment == null) {    increment=this.increment;  }  if (!isValid(startValue,minValue,maxValue,increment)) {    throw DbException.get(ErrorCode.SEQUENCE_ATTRIBUTES_INVALID,getName(),String.valueOf(startValue),String.valueOf(minValue),String.valueOf(maxValue),String.valueOf(increment));  }  this.value=startValue;  this.valueWithMargin=startValue;  this.minValue=minValue;  this.maxValue=maxValue;  this.increment=increment;}  }
class C{  public String mapInvokeDynamicMethodName(String name,String desc){  return name;}  }
class C{  public IdentifiedUser parse(String id) throws AuthException, UnprocessableEntityException, OrmException {  return parseOnBehalfOf(null,id);}  }
class C{  boolean isFramePeerEnabled(){  if (framePeer != null) {    return framePeer.isEnabled();  }  return false;}  }
class C{  public int endPos(JCTree tree){  if (tree == null)   return Position.NOPOS;  return TreeInfo.getEndPos(tree,endPosTable);}  }
class C{  @Override protected void initListeners(){}  }
class C{  @Inline public static void byteBulkCopy(byte[] src,Offset srcOffset,byte[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(BYTE_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().byteBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.aligned8Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  void updateChildren(DocumentEvent e,Shape a){  Element elem=getElement();  DocumentEvent.ElementChange ec=e.getChange(elem);  if (e.getType() == DocumentEvent.EventType.CHANGE) {    getContainer().repaint();  } else   if (ec != null) {    Element[] removedElems=ec.getChildrenRemoved();    Element[] addedElems=ec.getChildrenAdded();    View[] added=new View[addedElems.length];    for (int i=0; i < addedElems.length; i++)     added[i]=new WrappedLine(addedElems[i]);    replace(ec.getIndex(),removedElems.length,added);    if (a != null) {      preferenceChanged(null,true,true);      getContainer().repaint();    }  }  updateMetrics();}  }
class C{  public NondeterministicVacuumEnvironment(LocationState locAState,LocationState locBState){  super(locAState,locBState);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Parcelable asParcelable(Object o){  if (o == null) {    return null;  }  if (o instanceof Parcelable) {    return (Parcelable)o;  }  if (o instanceof BigDecimal) {    return new BigDecimalParcelableAdapter((BigDecimal)o);  }  if (o instanceof BigInteger) {    return new BigIntegerParcelableAdapter((BigInteger)o);  }  if (o instanceof Boolean) {    return new BooleanParcelableAdapter((Boolean)o);  }  if (o instanceof Byte) {    return new ByteParcelableAdapter((Byte)o);  }  if (o instanceof Character) {    return new CharParcelableAdapter((Character)o);  }  if (o instanceof Double) {    return new DoubleParcelableAdapter((Double)o);  }  if (o instanceof Float) {    return new FloatParcelableAdapter((Float)o);  }  if (o instanceof Integer) {    return new IntParcelableAdapter((Integer)o);  }  if (o instanceof Long) {    return new LongParcelableAdapter((Long)o);  }  if (o instanceof Short) {    return new ShortParcelableAdapter((Short)o);  }  if (o instanceof String) {    return new StringParcelableAdapter((String)o);  }  if (o instanceof CharSequence) {    return new CharSequenceParcelableAdapter((CharSequence)o);  }  if (o instanceof ArrayList) {    return new ArrayListParcelableAdapter((ArrayList)o);  }  if (o instanceof LinkedList) {    return new LinkedListParcelableAdapter((LinkedList)o);  }  if (o instanceof LinkedHashSet) {    return new LinkedHashSetParcelableAdapter((LinkedHashSet)o);  }  if (o instanceof HashSet) {    return new HashSetParcelableAdapter((HashSet)o);  }  if (o instanceof TreeSet) {    return new TreeSetParcelableAdapter((TreeSet)o);  }  if (o instanceof LinkedHashMap) {    return new LinkedHashMapParcelableAdapter((LinkedHashMap)o);  }  if (o instanceof HashMap) {    return new HashMapParcelableAdapter((HashMap)o);  }  if (o instanceof Serializable) {    return new SerializableParcelableAdapter((Serializable)o);  }  final String message=String.format(Locale.US,"Could not convert class of type %s to Parcelable",o.getClass());  throw new IllegalArgumentException(message);}  }
class C{  public void initialise(){  if (log.isDebugEnabled()) {    log.debug("now initialising conf");  }  initDecodeUsing(decodeUsing);  boolean rulesOk=true;  for (int i=0; i < rules.size(); i++) {    final Rule rule=(Rule)rules.get(i);    if (!rule.initialise(context)) {      rulesOk=false;    }  }  for (int i=0; i < outboundRules.size(); i++) {    final OutboundRule outboundRule=(OutboundRule)outboundRules.get(i);    if (!outboundRule.initialise(context)) {      rulesOk=false;    }  }  for (int i=0; i < catchElems.size(); i++) {    final CatchElem catchElem=(CatchElem)catchElems.get(i);    if (!catchElem.initialise(context)) {      rulesOk=false;    }  }  if (rulesOk) {    ok=true;  }  if (log.isDebugEnabled()) {    log.debug("conf status " + ok);  }}  }
class C{  public static void browseDirectory(String path) throws IOException {  File directory=new File(path);  if (SystemUtilities.isMac()) {    File[] files=directory.listFiles();    if (files.length > 0) {      File child=directory.listFiles()[0];      if (ShellUtilities.execute(new String[]{"open","-R",child.getCanonicalPath()})) {        return;      }    }  } else {    try {      Desktop d=Desktop.getDesktop();      d.open(directory);      return;    } catch (    IOException io) {      if (SystemUtilities.isLinux()) {        if (ShellUtilities.execute(new String[]{"xdg-open",path})) {          return;        }      }      throw io;    }  }  throw new IOException("Unable to open " + path);}  }
class C{  private void samplePopulation(){  boolean feasible=true;  int N=problem.getNumberOfVariables();  if ((iteration - lastEigenupdate) > 1.0 / ccov / N/ 5.0) {    eigendecomposition();  }  if (checkConsistency) {    testAndCorrectNumerics();  }  population.clear();  for (int i=0; i < lambda; i++) {    Solution solution=problem.newSolution();    if (diagonalIterations >= iteration) {      do {        feasible=true;        for (int j=0; j < N; j++) {          RealVariable variable=(RealVariable)solution.getVariable(j);          double value=xmean[j] + sigma * diagD[j] * PRNG.nextGaussian();          if (value < variable.getLowerBound() || value > variable.getUpperBound()) {            feasible=false;            break;          }          variable.setValue(value);        }      } while (!feasible);    } else {      double[] artmp=new double[N];      do {        feasible=true;        for (int j=0; j < N; j++) {          artmp[j]=diagD[j] * PRNG.nextGaussian();        }        for (int j=0; j < N; j++) {          RealVariable variable=(RealVariable)solution.getVariable(j);          double sum=0.0;          for (int k=0; k < N; k++) {            sum+=B[j][k] * artmp[k];          }          double value=xmean[j] + sigma * sum;          if (value < variable.getLowerBound() || value > variable.getUpperBound()) {            feasible=false;            break;          }          variable.setValue(value);        }      } while (!feasible);    }    population.add(solution);  }  iteration++;}  }
class C{  public void populateDAO(Object value,int row,int column){  final CodeType element=(CodeType)getData().getAspect().get(row);switch (column) {case 0:{      element.setName((String)value);      break;    }case 1:{    element.setDescription((String)value);    break;  }default :{}}element.setDirty(true);}  }
class C{  public Boolean isIsPassive(){  return isPassive;}  }
class C{  public EWMA(double alpha,long interval,TimeUnit intervalUnit){  this.interval=intervalUnit.toNanos(interval);  this.alpha=alpha;}  }
class C{  protected Object delegateToFucntionService(ObjectName objectName,String methodName,Object[] args,String[] signature) throws Throwable {  Object[] functionArgs=new Object[5];  functionArgs[0]=objectName;  functionArgs[1]=methodName;  functionArgs[2]=signature;  functionArgs[3]=args;  functionArgs[4]=member.getName();  List<Object> result=null;  try {    ResultCollector rc=FunctionService.onMember(member).withArgs(functionArgs).execute(ManagementConstants.MGMT_FUNCTION_ID);    result=(List<Object>)rc.getResult();  } catch (  Exception e) {    if (logger.isDebugEnabled()) {      logger.debug(" Exception while Executing Funtion {}",e.getMessage(),e);    }    return null;  }catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable th) {    SystemFailure.checkFailure();    if (logger.isDebugEnabled()) {      logger.debug(" Exception while Executing Funtion {}",th.getMessage(),th);    }    return null;  }  return checkErrors(result.get(ManagementConstants.RESULT_INDEX));}  }
class C{  public void forceStart(){  Context context=GlobalState.getContext();  context.startService(new Intent(context,DownloadService.class));}  }
class C{  public void addSelectionPath(TreePath path){  getSelectionModel().addSelectionPath(path);}  }
class C{  Token(MessageTokenizer tokenizer,int startIndex,int endIndex){  if (startIndex < 0 || startIndex >= tokenizer.getContent().length())   throw new IllegalArgumentException("Start index must be within range of content! (Got " + startIndex + " for startIndex, must be between 0 and "+ (tokenizer.getContent().length() - 1)+ ", inclusive)");  if (endIndex <= startIndex)   throw new IllegalArgumentException("End index cannot be before or at start index! (Start index is " + startIndex + ", got "+ endIndex+ ")");  if (endIndex > tokenizer.getContent().length())   throw new IllegalArgumentException("End index must be within content's length! (End index is " + endIndex + ", length is "+ tokenizer.getContent().length()+ ")");  this.tokenizer=tokenizer;  this.startIndex=startIndex;  this.endIndex=endIndex;  content=tokenizer.getContent().substring(startIndex,endIndex);}  }
class C{  public static DataFrame addIDToDataFrame(DataFrame df,SQLContext sqlContext,String nameOfCol){  StructField[] oldSchema=df.schema().fields();  StructField[] newSchema=new StructField[oldSchema.length + 1];  for (int i=0; i < oldSchema.length; i++) {    newSchema[i]=oldSchema[i];  }  newSchema[oldSchema.length]=DataTypes.createStructField(nameOfCol,DataTypes.DoubleType,false);  JavaRDD<Row> newRows=df.rdd().toJavaRDD().zipWithIndex().map(new AddRowID());  return sqlContext.createDataFrame(newRows,new StructType(newSchema));}  }
class C{  public Boolean elementExists(String targetImgPath){  Point2D coords=getCoords(takeScreenshot(),targetImgPath);  return (coords.getX() >= 0) && (coords.getY() >= 0);}  }
class C{  public static void printUsage(PrintStream out){  String className=SpatialIndex.class.getName();  out.println("Usage:");  out.println();  out.println("java " + className + " -c file.shp");  out.println("Creates spatial index <file.ssx> from " + "shape file <file.shp>.");  out.println();  out.println("java " + className + " -d file.shp");  out.println("Dumps spatial index information, excluding " + "bounding boxes to stdout.  Useful for " + "comparing to a shape index.");  out.println();  out.println("java " + className + " -d -b file.shp");  out.println("Dumps spatial index information including " + "bounding boxes to stdout.");  out.println();}  }
class C{  public ReportServiceImpl(final List<ReportDescriptor> reportDescriptors,final Map<String,ReportWorker> reportWorkers,final ReportGenerator reportGenerator,final FileManager fileManager){  this.reportDescriptors=reportDescriptors;  this.reportWorkers=reportWorkers;  this.reportGenerator=reportGenerator;  this.fileManager=fileManager;}  }
class C{  public static void main(String[] args){  Traveler cal=new Traveler("Jaunty Cal",3);  treasureChest(cal);  treasureChest(cal);  treasureChest(cal);  cal.endJourney();}  }
class C{  @Override public void clear(){  fromList.clear();}  }
class C{  public void addListener(final IZyGraphSearchSettingsListener listener){  m_listeners.addListener(listener);}  }
class C{  public static boolean isNonSymbolScalar(IonType type){  return !IonType.isContainer(type) && !type.equals(IonType.SYMBOL);}  }
class C{  public boolean forEachValue(TLongProcedure procedure){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public void logUndo(Transaction t,long logId){  Long undoKey=getOperationId(t.getId(),logId);synchronized (undoLog) {    Object[] old=undoLog.remove(undoKey);    if (old == null) {      throw DataUtils.newIllegalStateException(DataUtils.ERROR_TRANSACTION_ILLEGAL_STATE,"Transaction {0} was concurrently rolled back",t.getId());    }  }}  }
class C{  public static String formatString(String pattern,Object... args){  return new MessageFormat(pattern,Locale.ROOT).format(args);}  }
class C{  @Override public boolean okPressed(){  float scale=scaleText.getFloatValue();  if (Float.isNaN(scale)) {    return (false);  }  float units=unitsText.getFloatValue();  if (Float.isNaN(units)) {    return (false);  }  Lighting lighting=World.getInstance().getLighting();  lighting.getShadowMap().setPolygonOffsetFactor(scale);  lighting.getShadowMap().setPolygonOffsetUnits(units);  return (true);}  }
class C{  protected void updateViewState(){}  }
class C{  public static <T>String toString(Class<T> cls,T obj,String parent){  return parent != null ? toString(cls,obj,"super",parent) : toString(cls,obj);}  }
class C{  public Model createModel(){  ModelImpl model=new ModelImpl();  return model;}  }
class C{  public Stream<T> shrink(T original,ShrinkContext context){  return shrink.shrink(original,context);}  }
class C{  public static List<PricedEventRow> createPricedEventRowList(VOServiceDetails service){  List<PricedEventRow> result=new ArrayList<PricedEventRow>();  for (  VOEventDefinition event : service.getTechnicalService().getEventDefinitions()) {    VOPricedEvent pricedEvent=null;    if (service.getPriceModel() != null) {      pricedEvent=VOFinder.findPricedEvent(service.getPriceModel().getConsideredEvents(),event);    }    if (pricedEvent == null) {      pricedEvent=new VOPricedEvent(event);    }    PricedEventRow row;    if (pricedEvent.getSteppedPrices().isEmpty()) {      row=new PricedEventRow();      row.setPricedEvent(pricedEvent);      result.add(row);    } else {      Collections.sort(pricedEvent.getSteppedPrices(),new SteppedPriceComparator());      for (      VOSteppedPrice sp : pricedEvent.getSteppedPrices()) {        row=new PricedEventRow();        row.setPricedEvent(pricedEvent);        row.setSteppedPrice(sp);        result.add(row);      }    }  }  return result;}  }
class C{  @Override public BufferedImage JPEGToRGBImage(final byte[] data,final int w,final int h,final int pX,final int pY){  BufferedImage image;  try {    Raster ras=DefaultImageHelper.readRasterFromJPeg(data);    ras=cleanupRaster(ras,pX,pY,3);    final int width=ras.getWidth();    final int height=ras.getHeight();    final int imgSize=width * height;    final byte[] iData=((DataBufferByte)ras.getDataBuffer()).getData();    for (int i=0; i < imgSize * 3; i+=3) {      final float cl=(iData[i] & 255) * C4;      final float ca=(iData[i + 1] & 255) - C5;      final float cb=(iData[i + 2] & 255) - C5;      convertToRGB(cl,ca,cb);      iData[i]=(byte)r;      iData[i + 1]=(byte)g;      iData[i + 2]=(byte)b;    }    image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);    final DataBuffer db=new DataBufferByte(iData,iData.length);    final int[] bands={0,1,2};    final Raster raster=Raster.createInterleavedRaster(db,width,height,width * 3,3,bands,null);    image.setData(raster);  } catch (  final Exception ee) {    image=null;    LogWriter.writeLog("Couldn't read JPEG, not even raster: " + ee);  }  return image;}  }
class C{  protected void paintSegment(Graphics g,Coord[] segment,Tile tile){  int pointsNo=segment.length;  for (int i=1; i < pointsNo; i++) {    Coord start=(Coord)segment[i - 1];    Coord end=(Coord)segment[i];    Point s=tile.pointPosition(start);    Point e=tile.pointPosition(end);    g.drawLine(s.getX(),s.getY(),e.getX(),e.getY());    g.drawLine(s.getX() - 1,s.getY(),e.getX() - 1,e.getY());    g.drawLine(s.getX() + 1,s.getY(),e.getX() + 1,e.getY());    g.drawLine(s.getX(),s.getY() - 1,e.getX(),e.getY() - 1);    g.drawLine(s.getX(),s.getY() + 1,e.getX(),e.getY() + 1);  }}  }
class C{  @SuppressWarnings("unchecked") public final void testIsSatisfiedWhenNotAllConstraintsAreSatisfied(){  Constraint<Object> constraint1=new ConstraintImplementation(true);  Constraint<Object> constraint2=new ConstraintImplementation(false);  Constraint<Object>[] constraints=new Constraint[2];  constraints[0]=constraint1;  constraints[1]=constraint2;  ConjunctiveConstraint<Object> conjunctiveConstraint=new ConjunctiveConstraint<>(constraints);  assertFalse(conjunctiveConstraint.isSatisfied(new Object()));}  }
class C{  public String vertexPropertyId(){  return vpId;}  }
class C{  public boolean isSentReply(){  return sentReply;}  }
class C{  private StringBinding lastFmLoginButtonTextBinding(){  return Bindings.createStringBinding(null,usingLastFmProperty);}  }
class C{  public static TermQueryBuilder termQuery(String name,Object value){  return new TermQueryBuilder(name,value);}  }
class C{  protected void assertQueryEquals(final String defType,final String... inputs) throws Exception {  SolrQueryRequest req=req();  try {    assertQueryEquals(defType,req,inputs);  }  finally {    req.close();  }}  }
class C{  public void reset(){  forms=null;}  }
class C{  protected void doDropFlow(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  if (log.isTraceEnabled()) {    log.trace("doDropFlow pi={} srcSwitch={}",new Object[]{pi,sw});  }  if (sw == null) {    log.warn("Switch is null, not installing drop flowmod for PacketIn {}",pi);    return;  }  OFFlowMod fm=(OFFlowMod)floodlightProvider.getOFMessageFactory().getMessage(OFType.FLOW_MOD);  OFMatch match=new OFMatch();  match.loadFromPacket(pi.getPacketData(),pi.getInPort());  List<OFAction> actions=new ArrayList<OFAction>();  long cookie=AppCookie.makeCookie(APP_ID,0);  fm.setCookie(cookie).setIdleTimeout(ForwardingBase.FLOWMOD_DEFAULT_IDLE_TIMEOUT).setHardTimeout(ForwardingBase.FLOWMOD_DEFAULT_HARD_TIMEOUT).setBufferId(OFPacketOut.BUFFER_ID_NONE).setMatch(match).setActions(actions).setLengthU(OFFlowMod.MINIMUM_LENGTH);  try {    if (log.isTraceEnabled()) {      log.trace("write drop flow-mod srcSwitch={} match={} " + "pi={} flow-mod={}",new Object[]{sw,match,pi,fm});    }    sw.write(fm,cntx);  } catch (  IOException e) {    log.error("Failure writing drop flow mod",e);  }  return;}  }
class C{  public void testAddEjbRef() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  EjbRef ejbRef=new EjbRef("MyEjb","com.wombat.MyEjb","com.wombat.MyEjbHome");  ejbRef.setJndiName("foo");  WebXmlUtils.addEjbRef(webXml,ejbRef);  List<Element> nl=webXml.getTags(WebXmlType.EJB_LOCAL_REF);  Element n=nl.get(0);  assertEquals("ejb-local-ref",n.getName());  Element m=(Element)n.getChildren(WebXmlType.EJB_REF_NAME,n.getNamespace()).get(0);  assertEquals("ejb-ref-name",m.getName());  assertEquals("MyEjb",m.getText());  m=(Element)n.getChildren(WebXmlType.EJB_REF_TYPE,n.getNamespace()).get(0);  assertEquals("ejb-ref-type",m.getName());  assertEquals("Session",m.getText());  m=(Element)n.getChildren(WebXmlType.LOCAL,n.getNamespace()).get(0);  assertEquals("local",m.getName());  assertEquals("com.wombat.MyEjb",m.getText());  m=(Element)n.getChildren(WebXmlType.LOCAL_HOME,n.getNamespace()).get(0);  assertEquals("local-home",m.getName());  assertEquals("com.wombat.MyEjbHome",m.getText());}  }
class C{  public OsmAgentView(OsmMap mapData){  MapStyleFactory msf=new MapStyleFactory();  EntityClassifier<EntityViewInfo> eClassifier=msf.createDefaultClassifier();  eClassifier.addRule("track_type",TRACK_NAME + 0,msf.createTrackInfo(UColor.RED));  eClassifier.addRule("track_type",TRACK_NAME + 1,msf.createTrackInfo(UColor.GREEN));  eClassifier.addRule("track_type",TRACK_NAME + 2,msf.createTrackInfo(UColor.BLUE));  mapData.setEntityClassifier(eClassifier);  mapViewPane=new MapViewPane();  mapViewPane.setMap(mapData);  mapViewPane.setPopupMenu(new MapViewPopupWithLoad());  setLayout(new BorderLayout());  add(mapViewPane,BorderLayout.CENTER);}  }
class C{  @Override public AgentAppFrame createFrame(){  return new VacuumFrame();}  }
class C{  @Override public Type NODE(){  return nodeType;}  }
class C{  public void finish(int maxDeterminizedStates){  Automaton automaton=builder.finish();  Transition t=new Transition();  if (anyTermID != -1) {    int count=automaton.initTransition(0,t);    for (int i=0; i < count; i++) {      automaton.getNextTransition(t);      if (anyTermID >= t.min && anyTermID <= t.max) {        throw new IllegalStateException("automaton cannot lead with an ANY transition");      }    }    int numStates=automaton.getNumStates();    for (int i=0; i < numStates; i++) {      count=automaton.initTransition(i,t);      for (int j=0; j < count; j++) {        automaton.getNextTransition(t);        if (automaton.isAccept(t.dest) && anyTermID >= t.min && anyTermID <= t.max) {          throw new IllegalStateException("automaton cannot end with an ANY transition");        }      }    }    int termCount=termToID.size();    Automaton newAutomaton=new Automaton();    for (int i=0; i < numStates; i++) {      newAutomaton.createState();      newAutomaton.setAccept(i,automaton.isAccept(i));    }    for (int i=0; i < numStates; i++) {      count=automaton.initTransition(i,t);      for (int j=0; j < count; j++) {        automaton.getNextTransition(t);        int min, max;        if (t.min <= anyTermID && anyTermID <= t.max) {          min=0;          max=termCount - 1;        } else {          min=t.min;          max=t.max;        }        newAutomaton.addTransition(t.source,t.dest,min,max);      }    }    newAutomaton.finishState();    automaton=newAutomaton;  }  det=Operations.removeDeadStates(Operations.determinize(automaton,maxDeterminizedStates));}  }
class C{  public static final int numberOfProverStatus(int proverNumber,String statusName) throws IllegalArgumentException {  if (proverNumber > NUMBER_OF_PROVERS || proverNumber < 0) {    throw new IllegalArgumentException("No prover number " + proverNumber);  }  for (int i=0; i < PROVER_STATUSES[proverNumber].length; i++) {    if (statusName.equals(PROVER_STATUSES[proverNumber][i])) {      return i;    }  }  throw new IllegalArgumentException("Prover " + PROVER_NAMES[proverNumber] + " has no status "+ statusName);}  }
class C{  public static Object make(ClassLoader cl,Class clazz,ClassPool cp,Annotation anon){  AnnotationImpl handler=new AnnotationImpl(anon,cp,cl);  return Proxy.newProxyInstance(cl,new Class[]{clazz},handler);}  }
class C{  private File makeCopy(){  File file=null;  try {    file=new File(name,attribute.getFileSize());    FileAttribute fileAttr=file.getFileAttribute();    attribute.copyValue(fileAttr);    fileAttr.setMasterCopy(false);  } catch (  Exception e) {    file=null;  }  return file;}  }
class C{  static void read(SocketChannel chan,byte[] data,int length,int timeout) throws TimeoutException, IOException {  ByteBuffer buf=ByteBuffer.wrap(data,0,length != -1 ? length : data.length);  int numWaits=0;  while (buf.position() != buf.limit()) {    int count;    count=chan.read(buf);    if (count < 0) {      Log.d("ddms","read: channel EOF");      throw new IOException("EOF");    } else     if (count == 0) {      if (timeout != 0 && numWaits * WAIT_TIME > timeout) {        Log.d("ddms","read: timeout");        throw new TimeoutException();      }      try {        Thread.sleep(WAIT_TIME);      } catch (      InterruptedException ie) {        Thread.currentThread().interrupt();        throw new TimeoutException("Read interrupted with immediate timeout via interruption.");      }      numWaits++;    } else {      numWaits=0;    }  }}  }
class C{  public AbstractLoggingBreakCondition(BreakTrigger breakTrigger){  this.breakTrigger=breakTrigger;}  }
class C{  private void init(){  setTitle("Add Neurons...");  JPanel basicsPanel=new JPanel(new GridBagLayout());  basicsPanel.setBorder(BorderFactory.createTitledBorder("Quantity"));  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(5,5,5,5);  gbc.weightx=0.8;  gbc.gridwidth=1;  gbc.gridx=0;  gbc.gridy=0;  basicsPanel.add(new JLabel("Number of Neurons:"),gbc);  gbc.anchor=GridBagConstraints.EAST;  gbc.insets=new Insets(5,3,0,0);  gbc.weightx=0.2;  gbc.gridx=1;  basicsPanel.add(numNeurons,gbc);  addNeuronsPanel.add(basicsPanel);  addNeuronsPanel.add(Box.createVerticalStrut(10));  addNeuronsPanel.add(combinedNeuronInfoPanel);  addNeuronsPanel.add(Box.createVerticalStrut(10));  selectLayout=new MainLayoutPanel(DEFAULT_LAYOUT,true,this);  selectLayout.setAlignmentX(CENTER_ALIGNMENT);  addNeuronsPanel.add(selectLayout);  addNeuronsPanel.add(Box.createVerticalStrut(10));  groupPanel=new NeuronGroupPanelLite(networkPanel);  groupPanel.setAlignmentX(CENTER_ALIGNMENT);  addNeuronsPanel.add(groupPanel);  setContentPane(addNeuronsPanel);  this.addButton(helpButton);}  }
class C{  public PowerLawDegreeEdgeRandomIterator(PowerLawDegreeEdgePool powerLawDegreeEdgePool){  super(powerLawDegreeEdgePool);}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public AgentAppFrame constructApplicationFrame(){  AgentAppEnvironmentView envView=createEnvironmentView();  AgentAppFrame frame=createFrame();  AgentAppController controller=createController();  frame.setEnvView(envView);  envView.setMessageLogger(frame.getMessageLogger());  frame.setController(controller);  controller.setFrame(frame);  frame.setDefaultSelection();  return frame;}  }
class C{  public Swagger2MarkupConfigBuilder withOperationOrdering(Comparator<PathOperation> operationOrdering){  Validate.notNull(operationOrdering,"%s must not be null","operationOrdering");  config.operationOrderBy=OrderBy.CUSTOM;  config.operationOrdering=operationOrdering;  return this;}  }
class C{  private boolean isValidArchId(int archId,String entidad) throws Exception {  String tblName, qual=null;  boolean valid=false;  int count=0;  ArchivesTable table=new ArchivesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tblName=table.getArchHdrTableName();    qual=table.getLoadArchIdQual(archId);    count=DbSelectFns.selectCount(dbConn,tblName,qual);    if (count > 0)     valid=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return valid;}  }
class C{  private static CellProcessor addParseLong(CellProcessor cellProcessor){  if (cellProcessor == null) {    return new ParseLong();  }  return new ParseLong((LongCellProcessor)cellProcessor);}  }
class C{  private void parseQueryModel(MybatisXmlMeta meta,Field field){  String name=field.getName();  String camelToUnderlineName=StringUtils.camelToUnderline(name);  Query query=field.getAnnotation(Query.class);  String value=null;  Predicate[] predicates=null;  if (query != null && (predicates=query.value()) != null) {    for (    Predicate predicate : predicates) {      String nameWithPredicate=name + predicate.toString();      String bind=null;switch (predicate) {case EQ:        if (field.getType().isEnum())         value="and " + camelToUnderlineName + " = #{"+ nameWithPredicate+ ",typeHandler="+ this.parseEnum(field)+ "}"; else         value="and " + camelToUnderlineName + " = #{"+ nameWithPredicate+ "}";      break;case NEQ:    if (field.getType().isEnum())     value="and " + camelToUnderlineName + " != #{"+ nameWithPredicate+ ",typeHandler="+ this.parseEnum(field)+ "}"; else     value="and " + camelToUnderlineName + " != #{"+ nameWithPredicate+ "}";  break;case GT:value="and " + camelToUnderlineName + " &gt; #{"+ nameWithPredicate+ "}";break;case GTE:value="and " + camelToUnderlineName + " &gt;= #{"+ nameWithPredicate+ "}";break;case LT:value="and " + camelToUnderlineName + " &lt; #{"+ nameWithPredicate+ "}";break;case LTE:value="and " + camelToUnderlineName + " &lt;= #{"+ nameWithPredicate+ "}";break;case EW:bind="<bind name=\"" + nameWithPredicate + "\" value=\"'%' + "+ nameWithPredicate+ "\"/>";value=bind + " and " + camelToUnderlineName+ " like #{"+ nameWithPredicate+ "}";break;case SW:bind="<bind name=\"" + nameWithPredicate + "\" value=\""+ nameWithPredicate+ " + '%'\"/>";value=bind + " and " + camelToUnderlineName+ " like #{"+ nameWithPredicate+ "}";break;case LK:bind="<bind name=\"" + nameWithPredicate + "\" value=\"'%' + "+ nameWithPredicate+ " + '%'\"/>";value=bind + " and " + camelToUnderlineName+ " like #{"+ nameWithPredicate+ "}";break;case NL:value="and " + camelToUnderlineName + " is null";break;case NN:value="and " + camelToUnderlineName + " is not null";break;case IN:if (field.getType().isEnum()) value="<if test=\"" + nameWithPredicate + ".length != 0\">\r\n"+ "\t\t\t\tand "+ camelToUnderlineName+ " in\r\n"+ "\t\t\t\t<foreach collection=\""+ nameWithPredicate+ "\" item=\"item\" open=\"(\" separator=\",\" close=\")\">\r\n"+ "\t\t\t\t#{item"+ ",typeHandler="+ this.parseEnum(field)+ "}\r\n"+ "\t\t\t\t</foreach>\r\n"+ "\t\t\t\t</if>\r\n"+ "\t\t\t\t<if test=\""+ nameWithPredicate+ ".length == 0\">\r\n"+ "\t\t\t\t1 = 2\r\n"+ "\t\t\t\t</if>"; else value="<if test=\"" + nameWithPredicate + ".length != 0\">\r\n"+ "\t\t\t\tand "+ camelToUnderlineName+ " in\r\n"+ "\t\t\t\t<foreach collection=\""+ nameWithPredicate+ "\" item=\"item\" open=\"(\" separator=\",\" close=\")\">\r\n"+ "\t\t\t\t#{item}\r\n"+ "\t\t\t\t</foreach>\r\n"+ "\t\t\t\t</if>\r\n"+ "\t\t\t\t<if test=\""+ nameWithPredicate+ ".length == 0\">\r\n"+ "\t\t\t\t1 = 2\r\n"+ "\t\t\t\t</if>";break;default :break;}meta.getQuerys().put(name + predicate,value);}}}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (Anonymous_recordEntity_1_1: ");  result.append(anonymous_recordEntity_1_1);  result.append(", trace_record_1: ");  result.append(trace_record_1);  result.append(')');  return result.toString();}  }
class C{  public List<AddressItem> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<AddressItem> list=new ArrayList<AddressItem>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public static String smartUrlFilter(String url){  return smartUrlFilter(url,true);}  }
class C{  protected int zoom(Display display,Point2D p,double zoom,boolean abs){  if (display.isTranformInProgress())   return NO_ZOOM;  double scale=display.getScale();  double result=scale * zoom;  int status=ZOOM;  if (result < m_minScale) {    zoom=m_minScale / scale;    status=MIN_ZOOM;  } else   if (result > m_maxScale) {    zoom=m_maxScale / scale;    status=MAX_ZOOM;  }  if (abs)   display.zoomAbs(p,zoom); else   display.zoom(p,zoom);  display.repaint();  return status;}  }
class C{  private void onWaypointEnd() throws SAXException {  WaypointType type=null;  if (WAYPOINT_STYLE.equals(waypointType)) {    type=WaypointType.WAYPOINT;  } else   if (STATISTICS_STYLE.equals(waypointType)) {    type=WaypointType.STATISTICS;  }  if (type == null) {    return;  }  if (photoUrl != null) {    Uri uri=Uri.parse(photoUrl);    photoUrl=getPhotoUrl(uri.getLastPathSegment());  }  addWaypoint(type);}  }
class C{  public SimpleStyleConfigurator(final Shell parent,final SimpleFeatureCollection featureCollection,final Style style){  super(parent,featureCollection,style);  this.line.addListener(this.synchronize);  this.fill.addListener(this.synchronize);  this.label.addListener(this.synchronize);  this.point.addListener(this.synchronize);  this.minScale.addListener(this.synchronize);  this.maxScale.addListener(this.synchronize);}  }
class C{  public int oom_score_adj() throws IOException {  return Integer.parseInt(read("oom_score_adj"));}  }
class C{  @Override public double diffusionDiscretization(final StochasticProcess1D sp,final double t0,final double x0,final double dt){  return sp.diffusion(t0,x0) * Math.sqrt(dt);}  }
class C{  protected ByteBufferInputStream(final ByteBuffer[] byteBuffer){  this.byteBuffer=byteBuffer;  this.n=byteBuffer.length;  long size=0;  for (int i=0; i < n; i++) {    if (i < n - 1 && byteBuffer[i].capacity() != CHUNK_SIZE)     throw new IllegalArgumentException();    size+=byteBuffer[i].capacity();  }  this.size=size;  position(0);}  }
class C{  @Override public boolean equals(Object o){  return ((o instanceof SetVal && ((SetVal)o).getSubValues().equals(getSubValues())));}  }
class C{  public boolean isValidContext(SootMethod sm){  return ptsProvider.isValidMethod(sm);}  }
class C{  public ToggleButtonGroup(Action... actions){  this(null,actions);}  }
class C{  public LogicalOrExpression createLogicalOrExpression(){  LogicalOrExpressionImpl logicalOrExpression=new LogicalOrExpressionImpl();  return logicalOrExpression;}  }
class C{  public synchronized void deleteAPI(final String id){  if (id.equals(ID_DEFAULT))   throw new RuntimeException("Cannot delete default");  if (id.equals(currentAPI))   selectAPI(ID_DEFAULT);  SQLiteDatabase db=getWritableDatabase();  db.delete("apis","id = ?",new String[]{id});  db.close();}  }
class C{  public XPathFunctionException(Throwable cause){  super(cause);}  }
class C{  public void updateMinorTickParas(){  if (scale.isDateEnabled()) {    minorTicksNumber=6;    minorGridStepInPixel=(int)(scale.getScaleTickLabels().getGridStepInPixel() / 6.0);    return;  }  if (scale.getScaleTickLabels().getGridStepInPixel() / 5 >= scale.getMinorTickMarkStepHint()) {    minorTicksNumber=5;    minorGridStepInPixel=(int)(scale.getScaleTickLabels().getGridStepInPixel() / 5.0);    return;  }  if (scale.getScaleTickLabels().getGridStepInPixel() / 4 >= scale.getMinorTickMarkStepHint()) {    minorTicksNumber=4;    minorGridStepInPixel=(int)(scale.getScaleTickLabels().getGridStepInPixel() / 4.0);    return;  }  minorTicksNumber=2;  minorGridStepInPixel=(int)(scale.getScaleTickLabels().getGridStepInPixel() / 2.0);  return;}  }
class C{  public String toString(){  return this.getAccountNumber() + "-" + this.getName();}  }
class C{  protected final void tellLocalControllers(boolean removeProfile,boolean exchangeProfiles,final List<Profile> replyProfiles){  final List<Locator> locators=Locator.getLocators();  for (int i=0; i < locators.size(); i++) {    InternalLocator l=(InternalLocator)locators.get(i);    DistributionAdvisee advisee=l.getServerLocatorAdvisee();    if (advisee != null && advisee.getProfile().equals(this)) {      continue;    }    if (this.port > 0) {      handleDistributionAdvisee(advisee,removeProfile,exchangeProfiles,replyProfiles);    } else     if (exchangeProfiles && advisee != null) {      replyProfiles.add(advisee.getProfile());    }  }}  }
class C{  @Path("propget") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse propget(final PropertyGetRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.propget(request);}  }
class C{  public static int pickUnusedPort() throws IOException {  Iterator<Integer> ports=union(generateRandomPorts(PICK_ATTEMPTS),0).iterator();  while (true) {    try (ServerSocket serverSocket=new ServerSocket(ports.next())){      return serverSocket.getLocalPort();    } catch (    IOException e) {      if (!ports.hasNext()) {        throw new IOException("Failed to acquire random port",e);      }    }  }}  }
class C{  public void close(){  this.removeClassPath(classPath);  classPath.close();  classes.clear();  softcache.clear();}  }
class C{  private Map<String,Map<String,BigDecimal>> prepareDemandForGlcode(Map<Installment,Map<String,BigDecimal>> amounts){  Module module=moduleDao.getModuleByName(PTMODULENAME);  Installment currentInstall=installmentDao.getInsatllmentByModuleForGivenDate(module,new Date());  Map<String,Map<String,BigDecimal>> demandForGlcode=new HashMap<String,Map<String,BigDecimal>>();  Map<String,BigDecimal> arrearsDemand=new HashMap<String,BigDecimal>();  Map<String,BigDecimal> currentDemand=new HashMap<String,BigDecimal>();  BigDecimal taxAmount=BigDecimal.ZERO;  BigDecimal amount=BigDecimal.ZERO;  String demandReason="";  for (  Entry<Installment,Map<String,BigDecimal>> amountsRecord : amounts.entrySet()) {    String instDesc=amountsRecord.getKey().getDescription();    Map<String,BigDecimal> demandReasonMap=amountsRecord.getValue();    if (!instDesc.equalsIgnoreCase(currentInstall.toString())) {      for (      Map.Entry<String,BigDecimal> demandReasonRecord : demandReasonMap.entrySet()) {        demandReason=demandReasonRecord.getKey();        amount=demandReasonRecord.getValue();        taxAmount=BigDecimal.ZERO;        if (arrearsDemand.get(demandReason) == null) {          arrearsDemand.put(demandReason,amount);        } else {          taxAmount=arrearsDemand.get(demandReason);          arrearsDemand.put(demandReason,taxAmount.add(amount));        }      }    } else {      for (      Map.Entry<String,BigDecimal> demandReasonRecord : demandReasonMap.entrySet()) {        demandReason=demandReasonRecord.getKey();        amount=demandReasonRecord.getValue();        taxAmount=BigDecimal.ZERO;        if (currentDemand.get(demandReason) == null) {          currentDemand.put(demandReason,amount);        } else {          taxAmount=currentDemand.get(demandReason);          currentDemand.put(demandReason,taxAmount.add(amount));        }      }    }  }  demandForGlcode.put(ARREARS_DEMAND,arrearsDemand);  demandForGlcode.put(CURRENT_DEMAND,currentDemand);  return demandForGlcode;}  }
class C{  public boolean hasContentTypeParameter(String userAgent,String param){  getContentType(userAgent);  if (contentType == null) {    return false;  }  int i=0;  int len=contentType.length();  int plen=param.length();  loop1:   while (i < len) {switch (contentType.charAt(i)) {case ' ':case ';':      break loop1;  }  i++;}if (i == len) {  contentTypeMediaType=contentType;} else {  contentTypeMediaType=contentType.substring(0,i);}loop2: for (; ; ) {  while (i < len && contentType.charAt(i) != ';') {    i++;  }  if (i == len) {    return false;  }  i++;  while (i < len && contentType.charAt(i) == ' ') {    i++;  }  if (i >= len - plen - 1) {    return false;  }  for (int j=0; j < plen; j++) {    if (!(contentType.charAt(i++) == param.charAt(j))) {      continue loop2;    }  }  if (contentType.charAt(i) == '=') {    return true;  }}}  }
class C{  public CartColorTextSpinnerAdapter(Context context,List<ProductColor> colors){  super(context,layoutID,colors);  this.colors=colors;  this.layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  @Override public void addOverrideManyToManyMapping(ManyToManyMapping mapping){  overrideManyToManyMappings.add(mapping);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.371 -0500",hash_original_method="0D428BF693BC145CE79E697041FDBB13",hash_generated_method="C6043CD0EAD75587ED688DD1766D732D") public ExtensionHeaderImpl(){}  }
class C{  protected ServiceInvocationException recreateOnClientSide(){  return reCreateOnClientSide(null);}  }
class C{  public NameScope(){  this.outerScope=null;  this.functionNestingCount=0;}  }
class C{  public void showVerifyDialog(){  Intent intent=new Intent(mContext,ContactDisplayActivity.class);  intent.putExtra("nickname",mRemoteNickname);  intent.putExtra("address",mRemoteAddress);  intent.putExtra("provider",mProviderId);  intent.putExtra("account",mAccountId);  intent.putExtra("contactId",mLastChatId);  mContext.startActivity(intent);}  }
class C{  @Override protected void annotateProxyClass(Class<?> cl) throws IOException {  annotateClass(cl);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  TaskSeriesCollection clone=(TaskSeriesCollection)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  clone.keys=new java.util.ArrayList(this.keys);  return clone;}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  private String[] convertLookupTables(LookupOp lookupOp){  LookupTable lookupTable=lookupOp.getTable();  int nComponents=lookupTable.getNumComponents();  if ((nComponents != 1) && (nComponents != 3) && (nComponents != 4))   throw new SVGGraphics2DRuntimeException(ERR_ILLEGAL_BUFFERED_IMAGE_LOOKUP_OP);  StringBuffer[] lookupTableBuf=new StringBuffer[nComponents];  for (int i=0; i < nComponents; i++)   lookupTableBuf[i]=new StringBuffer();  if (!(lookupTable instanceof ByteLookupTable)) {    int[] src=new int[nComponents];    int[] dest=new int[nComponents];    int offset=lookupTable.getOffset();    for (int i=0; i < offset; i++) {      for (int j=0; j < nComponents; j++) {        lookupTableBuf[j].append(doubleString(i / 255.0)).append(SPACE);      }    }    for (int i=offset; i <= 255; i++) {      Arrays.fill(src,i);      lookupTable.lookupPixel(src,dest);      for (int j=0; j < nComponents; j++) {        lookupTableBuf[j].append(doubleString(dest[j] / 255.0)).append(SPACE);      }    }  } else {    byte[] src=new byte[nComponents];    byte[] dest=new byte[nComponents];    int offset=lookupTable.getOffset();    for (int i=0; i < offset; i++) {      for (int j=0; j < nComponents; j++) {        lookupTableBuf[j].append(doubleString(i / 255.0)).append(SPACE);      }    }    for (int i=0; i <= 255; i++) {      Arrays.fill(src,(byte)(0xff & i));      ((ByteLookupTable)lookupTable).lookupPixel(src,dest);      for (int j=0; j < nComponents; j++) {        lookupTableBuf[j].append(doubleString((0xff & dest[j]) / 255.0)).append(SPACE);      }    }  }  String[] lookupTables=new String[nComponents];  for (int i=0; i < nComponents; i++)   lookupTables[i]=lookupTableBuf[i].toString().trim();  return lookupTables;}  }
class C{  private static void modify(final Calendar val,final int field,final ModifyType modType){  if (val.get(Calendar.YEAR) > 280000000) {    throw new ArithmeticException("Calendar value too large for accurate calculations");  }  if (field == Calendar.MILLISECOND) {    return;  }  final Date date=val.getTime();  long time=date.getTime();  boolean done=false;  final int millisecs=val.get(Calendar.MILLISECOND);  if (ModifyType.TRUNCATE == modType || millisecs < 500) {    time=time - millisecs;  }  if (field == Calendar.SECOND) {    done=true;  }  final int seconds=val.get(Calendar.SECOND);  if (!done && (ModifyType.TRUNCATE == modType || seconds < 30)) {    time=time - (seconds * 1000L);  }  if (field == Calendar.MINUTE) {    done=true;  }  final int minutes=val.get(Calendar.MINUTE);  if (!done && (ModifyType.TRUNCATE == modType || minutes < 30)) {    time=time - (minutes * 60000L);  }  if (date.getTime() != time) {    date.setTime(time);    val.setTime(date);  }  boolean roundUp=false;  for (  final int[] aField : fields) {    for (    final int element : aField) {      if (element == field) {        if (modType == ModifyType.CEILING || (modType == ModifyType.ROUND && roundUp)) {          if (field == DateUtils.SEMI_MONTH) {            if (val.get(Calendar.DATE) == 1) {              val.add(Calendar.DATE,15);            } else {              val.add(Calendar.DATE,-15);              val.add(Calendar.MONTH,1);            }          } else           if (field == Calendar.AM_PM) {            if (val.get(Calendar.HOUR_OF_DAY) == 0) {              val.add(Calendar.HOUR_OF_DAY,12);            } else {              val.add(Calendar.HOUR_OF_DAY,-12);              val.add(Calendar.DATE,1);            }          } else {            val.add(aField[0],1);          }        }        return;      }    }    int offset=0;    boolean offsetSet=false;switch (field) {case DateUtils.SEMI_MONTH:      if (aField[0] == Calendar.DATE) {        offset=val.get(Calendar.DATE) - 1;        if (offset >= 15) {          offset-=15;        }        roundUp=offset > 7;        offsetSet=true;      }    break;case Calendar.AM_PM:  if (aField[0] == Calendar.HOUR_OF_DAY) {    offset=val.get(Calendar.HOUR_OF_DAY);    if (offset >= 12) {      offset-=12;    }    roundUp=offset >= 6;    offsetSet=true;  }break;default :break;}if (!offsetSet) {final int min=val.getActualMinimum(aField[0]);final int max=val.getActualMaximum(aField[0]);offset=val.get(aField[0]) - min;roundUp=offset > ((max - min) / 2);}if (offset != 0) {val.set(aField[0],val.get(aField[0]) - offset);}}throw new IllegalArgumentException("The field " + field + " is not supported");}  }
class C{  public static void invokePropertySetters(Object parent,Element domElement){  if (parent == null) {    String message=Logging.getMessage("nullValue.nullValue.ParentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (domElement == null) {    String message=Logging.getMessage("nullValue.DocumentElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Element[] elements=WWXML.getElements(domElement,"Property",null);  if (elements == null || elements.length == 0)   return;  for (  Element element : elements) {    String propertyName=element.getAttribute("name");    if (WWUtil.isEmpty(propertyName))     continue;    String propertyValue=element.getAttribute("value");    try {      WWUtil.invokePropertyMethod(parent,propertyName,propertyValue);    } catch (    NoSuchMethodException e) {      if (parent instanceof AVList)       ((AVList)parent).setValue(propertyName,propertyValue);      continue;    }catch (    InvocationTargetException e) {      String message=Logging.getMessage("generic.ExceptionInvokingPropertyMethod",propertyName,e);      Logging.logger().warning(message);    }catch (    IllegalAccessException e) {      String message=Logging.getMessage("generic.ExceptionInvokingPropertyMethod",propertyName,e);      Logging.logger().warning(message);    }  }}  }
class C{  public static String escapeText(String text){  StrBuilder sb=new StrBuilder();  escape(sb,text,false,false);  return sb.toString();}  }
class C{  private void cmd_winSize(){  Dimension size=getSize();  if (!ADialog.ask(m_curWindowNo,this,"WinSizeSet","x=" + size.width + " - y="+ size.height)) {    setPreferredSize(null);    SwingUtilities.getWindowAncestor(this).pack();    size=new Dimension(0,0);  }  MWindow win=new MWindow(m_ctx,m_curTab.getAD_Window_ID(),null);  win.setWindowSize(size);  win.saveEx();}  }
class C{  public Object retrieve(String key){  return this.contextDataMap.get(key);}  }
class C{  public double[] applyInverse(double[] v){  if (inv == null) {    updateInverse();  }  return unhomogeneVector(times(inv,homogeneVector(v)));}  }
class C{  public void simulate(){  Object strategy=simPaneCtrl.getParamValue(PARAM_STRATEGY);  if (strategy.equals("Depth-First Search"))   experiment.startExperiment(new DepthFirstSearch(new TreeSearch())); else   if (strategy.equals("Breadth-First Search"))   experiment.startExperiment(new BreadthFirstSearch(new TreeSearch())); else   if (strategy.equals("Iterative Deepening Search"))   experiment.startExperiment(new IterativeDeepeningSearch()); else   if (strategy.equals("Greedy Best-First Search (attacking pair heuristic)"))   experiment.startExperiment(new GreedyBestFirstSearch(new GraphSearch(),new AttackingPairsHeuristic())); else   if (strategy.equals("A* search (attacking pair heuristic)"))   experiment.startExperiment(new AStarSearch(new GraphSearch(),new AttackingPairsHeuristic())); else   if (strategy.equals("Hill Climbing"))   experiment.startHillClimbingExperiment(); else   if (strategy.equals("Simulated Annealing"))   experiment.startSimulatedAnnealingExperiment(); else   if (strategy.equals("Genetic Algorithm"))   experiment.startGenAlgoExperiment(simPaneCtrl.getParamValue(PARAM_INIT_CONFIG).equals("Random"));}  }
class C{  public MonitorException(){  super();}  }
class C{  public static MCashBook createUpdateCashBook(Properties ctx,CashBookBean bean,String trxName) throws OperationException {  MCashBook cashBook=getPO(ctx,bean,trxName);  if (!cashBook.isActive() && POSTerminalManager.isCashbookPresentOnTerminal(ctx,cashBook.get_ID(),trxName)) {    throw new CashBookAlreadyAssignedException("Cannot deactivate the cash book as it has been assigned to a terminal");  }  PoManager.save(cashBook);  bean.setCashBookId(cashBook.get_ID());  return cashBook;}  }
class C{  private CGraphMagnifier(){}  }
class C{  public void endBlock() throws IOException {  if (indent.length() <= 4) {    indent="";  } else   if (indent.length() >= 4) {    indent=indent.substring(4);  }  print("}",null);  printer.println();}  }
class C{  public void updateObject(int columnIndex,Object x) throws SQLException {  throw new NotUpdatable();}  }
class C{  public Double evalDouble(String xpath){  return (Double)eval(xpath,XPathConstants.NUMBER);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public int insertAchievement(DBTransaction transaction,Achievement achievement) throws SQLException {  int achievementId=0;  String query="INSERT INTO achievement " + "(identifier, title, category, description, base_score, active) VALUES " + "('[identifier]','[title]','[category]', '[description]', [base_score], [active])";  Map<String,Object> parameters=new HashMap<String,Object>();  parameters.put("identifier",achievement.getIdentifier());  parameters.put("title",achievement.getTitle());  parameters.put("category",achievement.getCategory().toString());  parameters.put("description",achievement.getDescription());  parameters.put("base_score",achievement.getBaseScore());  parameters.put("active",achievement.isActive() ? 1 : 0);  transaction.execute(query,parameters);  achievementId=transaction.getLastInsertId("achievement","id");  return achievementId;}  }
class C{  public void doProperties(){  if (null != selectedTradelogDetail) {    transferButton.setTransferObject(selectedTradelogDetail.getIdTradestrategy());    transferButton.doClick();  }}  }
class C{  protected Instances normalizeDataSet(Instances instances) throws Exception {  m_nNonDiscreteAttribute=-1;  Enumeration<Attribute> enu=instances.enumerateAttributes();  while (enu.hasMoreElements()) {    Attribute attribute=enu.nextElement();    if (attribute.type() != Attribute.NOMINAL) {      m_nNonDiscreteAttribute=attribute.index();    }  }  if ((m_nNonDiscreteAttribute > -1) && (instances.attribute(m_nNonDiscreteAttribute).type() != Attribute.NOMINAL)) {    m_DiscretizeFilter=new Discretize();    m_DiscretizeFilter.setInputFormat(instances);    instances=Filter.useFilter(instances,m_DiscretizeFilter);  }  m_MissingValuesFilter=new ReplaceMissingValues();  m_MissingValuesFilter.setInputFormat(instances);  instances=Filter.useFilter(instances,m_MissingValuesFilter);  return instances;}  }
class C{  private Favorite createFavorite(Emoticon emote){  return new Favorite(emote.code,emote.emoteSet,0);}  }
class C{  public static ceylon.language.meta.declaration.Module checkModule(ceylon.language.meta.declaration.Module module,String name,String version){  if (module == null) {    String spec;    if (version == null)     spec=name; else     spec=name + "/" + version;    throw new ceylon.language.AssertionError("Module " + spec + " is not available");  }  return module;}  }
class C{  public static BooleanFunction serializableInstance(){  IndexedParent[] parents=new IndexedParent[2];  parents[0]=new IndexedParent(0,1);  parents[1]=new IndexedParent(1,2);  return new BooleanFunction(parents);}  }
class C{  public TrayNotification(Notification notification){  this("","",notification);}  }
class C{  public void remove(int offset,int length){  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset == 0) {    System.arraycopy(_data,length,_data,0,_pos - length);  } else   if (_pos - length == offset) {  } else {    System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));  }  _pos-=length;}  }
class C{  public AccountHeaderBuilder withProfileImagesClickable(boolean profileImagesClickable){  this.mProfileImagesClickable=profileImagesClickable;  return this;}  }
class C{  public <T extends Aspect>T persistAspect(final T transientInstance,boolean overrideVersion) throws PersistentModelException {  try {    return m_aspectHome.persist(transientInstance,overrideVersion);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error saving " + transientInstance.getClass().getSimpleName() + " please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error saving  " + transientInstance.getClass().getSimpleName() + " : "+ e.getMessage());  }}  }
class C{  protected static String extractHeaderComponent(String header,String component){  String fullComponent=component + "=\"";  int fullComponentLength=fullComponent.length();  int index1=header.indexOf(fullComponent);  if (index1 == -1) {    return null;  }  int index2=header.indexOf("\"",index1 + fullComponentLength);  if (index2 == -1) {    return null;  }  return header.substring(index1 + fullComponentLength,index2);}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public static boolean isInt(final LuaValue target){  return target != null && target.type() == LuaValue.TINT;}  }
class C{  public PortugueseAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public Remove(int playlistId,int position){  super();  addParameterToRequest("playlistid",playlistId);  addParameterToRequest("position",position);}  }
class C{  private boolean useRefunds(){  return versionSelector == PaymentChannelClient.VersionSelector.VERSION_1;}  }
class C{  private static Object fromXml(String str){  XMLDecoder decoder=null;  try {    ByteArrayInputStream in=new ByteArrayInputStream(str.getBytes("UTF-8"));    decoder=new XMLDecoder(in);    Object obj=decoder.readObject();    return obj;  } catch (  Exception e) {    SaaSSystemException se=new SaaSSystemException("Object encoding failed",e);    logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_OBJECT_ENCODING_FAILED);    throw se;  } finally {    if (decoder != null)     decoder.close();  }}  }
class C{  @Override public void closeImpl() throws IOException {  _file.close();}  }
class C{  public void testConstructor6(){  Integer[] ints=new Integer[SIZE];  for (int i=0; i < SIZE; ++i)   ints[i]=new Integer(i);  LinkedBlockingDeque q=new LinkedBlockingDeque(Arrays.asList(ints));  for (int i=0; i < SIZE; ++i)   assertEquals(ints[i],q.poll());}  }
class C{  public static RealMatrix scaleMatrix(double x,double y,double z){  return new Array2DRowRealMatrix(new double[][]{{x,0,0,0},{0,y,0,0},{0,0,z,0},{0,0,0,1}});}  }
class C{  private static void parseSortRule(String sortRule,final Map<String,SortOrder> sortingRules){  boolean isDesc=false;  char firstCharacter=sortRule.charAt(0);  if (firstCharacter == '-') {    isDesc=true;    sortRule=sortRule.substring(1);  }  if (firstCharacter == '+') {    sortRule=sortRule.substring(1);  }  sortingRules.put(sortRule,isDesc ? SortOrder.desc : SortOrder.asc);}  }
class C{  private void notifyDataSetChanged(){  if (mAdapter != null) {    mAdapter.notifyDataSetChanged();  }}  }
class C{  public void testLegacyLongMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyLongField("value",-1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyLongField("value",4,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_LONG));  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sortField=new SortField("value",SortField.Type.LONG);  sortField.setMissingValue(Long.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public synchronized void sync(){  if (file != null) {    log.flush();    file.sync();  }}  }
class C{  public static byte toByteValue(boolean b){  return (byte)(b ? 1 : 0);}  }
class C{  @SuppressWarnings("unchecked") private void validateResourceFile(MethodDeclaration methodDecl){  ITypeBinding returnTypeBinding=getReturnTypeBinding(methodDecl);  if (returnTypeBinding == null || !ClientBundleUtilities.isResourceType(returnTypeBinding) || ClientBundleUtilities.isGwtCreateResource(returnTypeBinding)) {    return;  }  try {    List<ASTNode> modifiers=(List<ASTNode>)methodDecl.getStructuralProperty(methodDecl.getModifiersProperty());    for (    ASTNode node : modifiers) {      if (isSourceAnnotation(node)) {        validateSourceAnnotationValues((Annotation)node);        return;      }    }    String resourceTypeName=returnTypeBinding.getErasure().getQualifiedName();    IType resourceType=JavaModelSearch.findType(javaProject,resourceTypeName);    if (resourceType == null) {      GWTPluginLog.logError("Could not find type " + resourceTypeName);      return;    }    IPath pckgPath=getPackagePath(methodDecl);    String methodName=methodDecl.getName().getIdentifier();    String[] defaultExtensions=ResourceTypeDefaultExtensions.getDefaultExtensions(resourceType);    if (defaultExtensions.length > 0) {      Set<IPath> possibleResourcePaths=new HashSet<IPath>();      for (      String defaultExtension : defaultExtensions) {        possibleResourcePaths.add(pckgPath.append(methodName + defaultExtension));      }      result.addAllPossibleResourcePaths(possibleResourcePaths);      for (      IPath possibleResourcePath : possibleResourcePaths) {        if (ClasspathResourceUtilities.isResourceOnClasspath(javaProject,possibleResourcePath)) {          return;        }      }    } else {      result.addProblem(ClientBundleProblem.createSourceAnnotationRequired(methodDecl,resourceType.getFullyQualifiedName()));      return;    }    String expectedFileName=computeExpectedFileNameArgument(methodName,defaultExtensions);    result.addProblem(ClientBundleProblem.createMissingResourceFile(methodDecl.getName(),expectedFileName,pckgPath));  } catch (  JavaModelException e) {    GWTPluginLog.logError(e);  }}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  protected static void updateChangeDistribution(String sessionID,List scrs,List distList,int typeDist,Integer id,Integer canDestWithoutList,String entidad) throws DistributionException, BookException, SessionException, ValidationException {  Transaction tran=null;  int error=0;  try {    Session session=HibernateUtil.currentSession(entidad);    tran=session.beginTransaction();    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    ScrOfic scrOfic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);    Date currentDate=new Date(DBEntityDAOFactory.getCurrentDBEntityDAO().getDBServerDate(entidad).getTime());    for (Iterator it=scrs.iterator(); it.hasNext(); ) {      ScrDistreg scrDistReg=(ScrDistreg)it.next();      scrDistReg=updateDistRegByTypeFromChangeDistribution(session,user,sessionID,scrDistReg,typeDist,distList,canDestWithoutList,id,entidad);      int state=-1;      if ((distList == null || distList.isEmpty()) && canDestWithoutList.intValue() == 1) {        state=0;      } else {        state=1;      }      updateInsertDistAccept(scrOfic,scrDistReg,currentDate,state,user.getName(),entidad);    }    HibernateUtil.commitTransaction(tran);  } catch (  DistributionException dE) {    error=1;    log.error("Impossible to update the distribution for the session [" + sessionID + "].",dE);    HibernateUtil.rollbackTransaction(tran);    throw dE;  }catch (  EventException eE) {    error=1;    log.error("Impossible to update the distribution for the session [" + sessionID + "].",eE);    HibernateUtil.rollbackTransaction(tran);    throw eE;  }catch (  Exception e) {    error=1;    HibernateUtil.rollbackTransaction(tran);    log.error("Impossible to update the distribution for the session [" + sessionID + "].",e);    throw new BookException(BookException.ERROR_CANNOT_UPDATE_DISTRIBUTION);  } finally {    HibernateUtil.closeSession(entidad);    closeDistRegs(sessionID,scrs,error,entidad);  }}  }
class C{  @PUT @Path("/{id}/acl") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.TENANT_ADMIN},acls={ACL.OWN},blockProxies=true) public ACLAssignments updateRoleAssignments(@PathParam("id") URI id,ACLAssignmentChanges changes){  Project project=getProjectById(id,true);  TenantOrg tenant=_permissionsHelper.getObjectById(project.getTenantOrg().getURI(),TenantOrg.class);  _permissionsHelper.updateACLs(project,changes,new ProjectACLFilter(tenant));  _dbClient.updateAndReindexObject(project);  recordProjectEvent(project,OperationTypeEnum.MODIFY_PROJECT_ACL,true);  auditOp(OperationTypeEnum.MODIFY_PROJECT_ACL,true,null,project.getId().toString(),project.getLabel(),changes);  return getRoleAssignmentsResponse(id);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ReferencingElement_IM.class) {switch (baseFeatureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:      return ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET;default :    return -1;}}if (baseClass == ReferencingElementExpression_IM.class) {switch (baseFeatureID) {default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static void printMetricHistory(List<? extends ContainerHost> hosts,PowerContainerVmAllocationPolicyMigrationAbstract vmAllocationPolicy){  for (int i=0; i < 10; i++) {    ContainerHost host=hosts.get(i);    Log.printLine("Host #" + host.getId());    Log.printLine("Time:");    if (!vmAllocationPolicy.getTimeHistory().containsKey(host.getId())) {      continue;    }    for (    Double time : vmAllocationPolicy.getTimeHistory().get(host.getId())) {      Log.format("%.2f, ",time);    }    Log.printLine();    for (    Double utilization : vmAllocationPolicy.getUtilizationHistory().get(host.getId())) {      Log.format("%.2f, ",utilization);    }    Log.printLine();    for (    Double metric : vmAllocationPolicy.getMetricHistory().get(host.getId())) {      Log.format("%.2f, ",metric);    }    Log.printLine();  }}  }
class C{  public static double of(double[] data){  double sum=0.;  for (  double v : data) {    sum+=v;  }  return sum / data.length;}  }
class C{  @Override public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory){  return new UnitsQualifierHierarchy(factory,AnnotationUtils.fromClass(elements,UnitsBottom.class));}  }
class C{  private BFINode<E> insertRight(boolean isInBFI,BFINode<E> current,BFINode<E> newChild,BFINode<E> rightmost,InsDelUpdateStatistics stat){  if (current.children == null) {    current.children=new ArrayList<BFINode<E>>();  }  current.children.add(newChild);  newChild.parent=current;  stat.nbBFNodesAccessed+=2;  if (!isInBFI) {    current.value.orBloomFilter(newChild.value);    stat.nbBFAccessed+=2;  }  if (newChild.isLeaf()) {    updateValueToTheRoot(current,newChild.value,stat);  }  stat.nbBFNodesAccessed++;  if (!current.needSplit()) {    return rightmost;  }  rightmost=splitRight(current,rightmost,stat);  return rightmost;}  }
class C{  @Override public String toString(){  return "WriteReachedAchievementCommand [id=" + id + ", playerName="+ playerName+ "]";}  }
class C{  public boolean equals(Object o2){  if (o2 != null && o2 instanceof IconGroup) {    IconGroup ig2=(IconGroup)o2;    if (ig2.getName().equals(getName()) && separateLargeIcons == ig2.hasSeparateLargeIcons()) {      if (separateLargeIcons) {        if (!largeIconSubDir.equals(ig2.largeIconSubDir))         return false;      }      return path.equals(ig2.path);    }  }  return false;}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  protected String readUTF() throws IOException {  int len=(is.read() << 8) + is.read();  StringBuffer sb=new StringBuffer();  while (len > 0) {    int d1=is.read();    if (d1 < 0)     return sb.toString(); else     if (d1 < 0x80) {      len--;      sb.append((char)d1);    } else     if ((d1 & 0xe0) == 0xc0) {      len-=2;      sb.append(((d1 & 0x1f) << 6) + (is.read() & 0x3f));    } else     if ((d1 & 0xf0) == 0xe0) {      len-=3;      sb.append(((d1 & 0x0f) << 12) + ((is.read() & 0x3f) << 6) + (is.read() & 0x3f));    } else     throw new IOException("utf-8 encoding error");  }  return sb.toString();}  }
class C{  private void closeDatabase(String dbName,CallbackContext cbc){  DBRunner r=dbrmap.get(dbName);  if (r != null) {    try {      r.q.put(new DBQuery(false,cbc));    } catch (    Exception e) {      if (cbc != null) {        cbc.error("couldn't close database" + e);      }      Log.e(SQLitePlugin.class.getSimpleName(),"couldn't close database",e);    }  } else {    if (cbc != null) {      cbc.success("database closed");    }  }}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(String message){  super(message);}  }
class C{  public CharClassException(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void environmentBind(EnvironmentClassLoader loader){}  }
class C{  public void addGossipMember(GossipMember member){  gossipMembers.add(member);}  }
class C{  @Override public void onError(AuthError ae){  if (BuildConfig.DEBUG) {    Log.e(TAG,"AuthError during authorization",ae);    Util.showAuthToast(mContext,"Error during authorization.  Please try again.");  }  if (mCallback != null) {    mCallback.onError(ae);  }}  }
class C{  GssKrb5Client(String authzID,String protocol,String serverName,Map<String,?> props,CallbackHandler cbh) throws SaslException {  super(props,MY_CLASS_NAME);  String service=protocol + "@" + serverName;  logger.log(Level.FINE,"KRB5CLNT01:Requesting service name: {0}",service);  try {    GSSManager mgr=GSSManager.getInstance();    GSSName acceptorName=mgr.createName(service,GSSName.NT_HOSTBASED_SERVICE,KRB5_OID);    GSSCredential credentials=null;    if (props != null) {      Object prop=props.get(Sasl.CREDENTIALS);      if (prop != null && prop instanceof GSSCredential) {        credentials=(GSSCredential)prop;        logger.log(Level.FINE,"KRB5CLNT01:Using the credentials supplied in " + "javax.security.sasl.credentials");      }    }    secCtx=mgr.createContext(acceptorName,KRB5_OID,credentials,GSSContext.INDEFINITE_LIFETIME);    if (credentials != null) {      secCtx.requestCredDeleg(true);    }    if (props != null) {      String prop=(String)props.get(Sasl.SERVER_AUTH);      if (prop != null) {        mutual="true".equalsIgnoreCase(prop);      }    }    secCtx.requestMutualAuth(mutual);    secCtx.requestConf(true);    secCtx.requestInteg(true);  } catch (  GSSException e) {    throw new SaslException("Failure to initialize security context",e);  }  if (authzID != null && authzID.length() > 0) {    try {      this.authzID=authzID.getBytes("UTF8");    } catch (    IOException e) {      throw new SaslException("Cannot encode authorization ID",e);    }  }}  }
class C{  public void unexpectedElement(String systemID,int lineNr,String parentElementName,String unexpectedElementName) throws XMLValidationException {  XMLUtil.errorUnexpectedElement(systemID,lineNr,parentElementName,unexpectedElementName);}  }
class C{  IntervalSet(Comparator<BasicInterval> c){  super(c);}  }
class C{  private void cancel(){  connection.removePacketListener(invitationPacketListener);  connection.removeConnectionListener(this);}  }
class C{  public boolean isNative(){  return this.isNative;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  static boolean checkIdentifier(String candidate){  MessageQueue mq=new SimpleMessageQueue();  Parser parser=new Parser(new JsTokenQueue(new JsLexer(CharProducer.Factory.fromString("var " + candidate + ";",InputSource.UNKNOWN)),InputSource.UNKNOWN),mq);  ParseTreeNode node;  try {    node=parser.parse();  } catch (  ParseException e) {    return false;  }  if (node == null || !mq.getMessages().isEmpty()) {    return false;  }  Map<String,ParseTreeNode> bindings=Maps.newHashMap();  if (!QuasiBuilder.match("{ var @p; }",node,bindings)) {    return false;  }  if (bindings.size() != 1) {    return false;  }  if (bindings.get("p") == null) {    return false;  }  if (!(bindings.get("p") instanceof Identifier)) {    return false;  }  Identifier p=(Identifier)bindings.get("p");  if (!candidate.equals(p.getName())) {    return false;  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CONSTRAINT_EXPR___NEGATIVE_CONSTRAINT_1:    getNegativeConstraint_1().clear();  return;case UmplePackage.CONSTRAINT_EXPR___STRING_EXPR_1:getStringExpr_1().clear();return;case UmplePackage.CONSTRAINT_EXPR___BOOL_EXPR_1:getBoolExpr_1().clear();return;case UmplePackage.CONSTRAINT_EXPR___GEN_EXPR_1:getGenExpr_1().clear();return;case UmplePackage.CONSTRAINT_EXPR___NUM_EXPR_1:getNumExpr_1().clear();return;case UmplePackage.CONSTRAINT_EXPR___LONE_BOOLEAN_1:setLoneBoolean_1(LONE_BOOLEAN_1_EDEFAULT);return;case UmplePackage.CONSTRAINT_EXPR___ANONYMOUS_CONSTRAINT_EXPR_11:getAnonymous_constraintExpr_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  public ClientResponse put(URI uri,Object requestBody){  WebResource webResource=_clientHelper.createRequest(_client,_authSvcEndpoints[_currentIndex++],uri);  return _clientHelper.addSignature(webResource).accept(MediaType.TEXT_PLAIN,MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON).put(ClientResponse.class,requestBody);}  }
class C{  public String lookahead(){  if (buf != null) {    return new String(buf,bufPos,buf.length - bufPos);  } else {    return text.substring(pos.getIndex());  }}  }
class C{  public void onFailure(int downloadId,int statusCode,String errMsg){}  }
class C{  boolean hasNextEFeature(){  return (eFeatureIdx < eFeatures.size());}  }
class C{  private Certificate[] establishCertChain(Certificate userCert,Certificate certToVerify) throws Exception {  if (userCert != null) {    PublicKey origPubKey=userCert.getPublicKey();    PublicKey replyPubKey=certToVerify.getPublicKey();    if (!origPubKey.equals(replyPubKey)) {      throw new Exception(rb.getString("Public.keys.in.reply.and.keystore.don.t.match"));    }    if (certToVerify.equals(userCert)) {      throw new Exception(rb.getString("Certificate.reply.and.certificate.in.keystore.are.identical"));    }  }  Hashtable<Principal,Vector<Certificate>> certs=null;  if (keyStore.size() > 0) {    certs=new Hashtable<Principal,Vector<Certificate>>(11);    keystorecerts2Hashtable(keyStore,certs);  }  if (trustcacerts) {    if (caks != null && caks.size() > 0) {      if (certs == null) {        certs=new Hashtable<Principal,Vector<Certificate>>(11);      }      keystorecerts2Hashtable(caks,certs);    }  }  Vector<Certificate> chain=new Vector<>(2);  if (buildChain((X509Certificate)certToVerify,chain,certs)) {    Certificate[] newChain=new Certificate[chain.size()];    int j=0;    for (int i=chain.size() - 1; i >= 0; i--) {      newChain[j]=chain.elementAt(i);      j++;    }    return newChain;  } else {    throw new Exception(rb.getString("Failed.to.establish.chain.from.reply"));  }}  }
class C{  public static void goToGooglePlay(Context context,String id){  try {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + id)));  } catch (  ActivityNotFoundException e) {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://play.google.com/store/apps/details?id=" + id)));  }}  }
class C{  boolean isSurpriseConnect(){  return this.kind == SURPRISE_CONNECT;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  private void collectPtsResults(TestIdentifier test,Map<String,String> testMetrics){  String perfResult=PtsReportUtil.getPtsResultFromMetrics(testMetrics);  if (perfResult == null) {    perfResult=PtsHostStore.removePtsResult(mDeviceSerial,test);  }  if (perfResult != null) {    Matcher m=mPtsLogPattern.matcher(perfResult);    if (m.find()) {      mCurrentPkgResult.reportPerformanceResult(test,CtsTestStatus.PASS,m.group(1),m.group(2));    } else {      logResult("PTS Result unrecognizable:" + perfResult);    }  }}  }
class C{  public TermQueryBuilder(String name,String value){  this(name,(Object)value);}  }
class C{  private void verifyIsRoot(){  if (hierarchyElements.size() != 0) {    throw new IllegalStateException("This is not the root. Can " + "only call addCounter() on the root node. Current node: " + hierarchy);  }}  }
class C{  @Override public boolean isAttribute(){  return eventType == XMLStreamConstants.ATTRIBUTE;}  }
class C{  public Action putAction(String name,Action action){  action.setVisualization(this);  m_actions.put(name,action);  return action;}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("blueyellow.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          if (slope[col] != 0) {            z=Math.log(((area[col]) / (Math.tan(Math.toRadians(slope[col])))));          } else {            z=areaNoData;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void validateMessageParams(java.lang.String[] param){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final boolean isCancelled(){  if (cancelled) {    pass("cancelled",cancelled);  } else {    fail("cancelled");  }  return cancelled;}  }
class C{  public BlobsTupleSerializer(){  super();}  }
class C{  public void cmov(int size,Register result,Register trueValue,Register falseValue,ConditionFlag cond){  super.csel(size,result,trueValue,falseValue,cond);}  }
class C{  public static void fillMatrix_2D(int n1,int n2,float[] m){  Random r=new Random(2);  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      m[i * n2 + j]=r.nextFloat();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:51.324 -0500",hash_original_method="5DC7CF12AEC4C5E9E1FB850AF7C3FB90",hash_generated_method="AB117DFD5F544F43BDCBD699AD4AE5E4") public boolean initialize(UsbDeviceConnection connection,UsbEndpoint endpoint){  mEndpoint=endpoint;  return native_init(connection,endpoint.getAddress(),endpoint.getAttributes(),endpoint.getMaxPacketSize(),endpoint.getInterval());}  }
class C{  void removedAt(int removedIndex){  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.removedAt(removedIndex)) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public static void writeShort(byte[] memory,int index,short value){}  }
class C{  synchronized int numQueuedFlushes(){  return flushQueue.size();}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public boolean isUseAd(){  Object oo=get_Value(COLUMNNAME_IsUseAd);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public GenericFastItemAdapter<Model,Item> clearModel(){  mItemAdapter.clearModel();  return this;}  }
class C{  public MiniDrawer withDrawer(@NonNull Drawer drawer){  this.mDrawer=drawer;  return this;}  }
class C{  public void mail() throws IOException {  checkAWTPermission();  checkExec();  checkActionSupport(Action.MAIL);  URI mailtoURI=null;  try {    mailtoURI=new URI("mailto:?");    peer.mail(mailtoURI);  } catch (  URISyntaxException e) {  }}  }
class C{  public static ChunkCoords readFromNBT(NBTTagCompound tagRoot){  if (tagRoot.hasKey("chunkCoords")) {    NBTTagCompound coordsTag=(NBTTagCompound)tagRoot.getTag("chunkCoords");    int dim=coordsTag.getInteger("dim");    int x=coordsTag.getInteger("xPos");    int y=coordsTag.getInteger("yPos");    int z=coordsTag.getInteger("zPos");    return new ChunkCoords(dim,x,y,z);  }  return null;}  }
class C{  @DSComment("not sensitive, memory stream") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.342 -0500",hash_original_method="D84F167B372983A8A32E17B936FA6E9B",hash_generated_method="ABCB19599E50D7E02937CF8C013B8534") public synchronized void reset(){  count=0;}  }
class C{  public String type(){  return this.serviceInfo().getType();}  }
class C{  public static void validateCompositeData(CompositeData cd){  if (cd == null) {    throw new NullPointerException("Null CompositeData");  }  if (!isTypeMatched(memoryNotifInfoCompositeType,cd.getCompositeType())) {    throw new IllegalArgumentException("Unexpected composite type for MemoryNotificationInfo");  }}  }
class C{  public RSAESOAEPparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  pSourceAlgorithm=DEFAULT_P_SOURCE_ALGORITHM;}  }
class C{  @Override public String toString(){  return toString(false);}  }
class C{  public boolean verifyRFC822SpecialCase(X500Name subject) throws IOException {  for (  AVA ava : subject.allAvas()) {    ObjectIdentifier attrOID=ava.getObjectIdentifier();    if (attrOID.equals((Object)PKCS9Attribute.EMAIL_ADDRESS_OID)) {      String attrValue=ava.getValueString();      if (attrValue != null) {        RFC822Name emailName;        try {          emailName=new RFC822Name(attrValue);        } catch (        IOException ioe) {          continue;        }        if (!verify(emailName)) {          return (false);        }      }    }  }  return true;}  }
class C{  public void clearAll(){  android.app.NotificationManager systemNotificationManager=(android.app.NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  systemNotificationManager.cancelAll();}  }
class C{  public Group(){}  }
class C{  public EsriGraphicFactory(){}  }
class C{  public JSLibSingleTestConfigProvider(String... blacklistFileNames) throws IOException {  blacklist=readModifierFiles(blacklistFileNames);}  }
class C{  public static void removeFromFirewall(){  if (!OSUtils.isWindows())   return;  String path=SystemUtils.getRunningPath();  if (path == null || !path.equalsIgnoreCase(GUIConstants.FROSTWIRE_EXE_FILE.getPath()))   return;  if (SystemUtils.isProgramListedOnFirewall(path)) {    SystemUtils.removeProgramFromFirewall(path);  }}  }
class C{  private SortedStructSet(Comparator c){  super(c);}  }
class C{  private static boolean typeEquals(ParameterizedType from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from.getRawType().equals(to.getRawType())) {    Type[] fromArgs=from.getActualTypeArguments();    Type[] toArgs=to.getActualTypeArguments();    for (int i=0; i < fromArgs.length; i++) {      if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("arc iterator out of bounds");  }  double angle=angStRad;  if (index == 0) {    coords[0]=(float)(x + Math.cos(angle) * w);    coords[1]=(float)(y + Math.sin(angle) * h);    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_MOVETO;  }  if (index > arcSegs) {    if (index == arcSegs + lineSegs) {      return SEG_CLOSE;    }    coords[0]=(float)x;    coords[1]=(float)y;    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_LINETO;  }  angle+=increment * (index - 1);  double relx=Math.cos(angle);  double rely=Math.sin(angle);  coords[0]=(float)(x + (relx - cv * rely) * w);  coords[1]=(float)(y + (rely + cv * relx) * h);  angle+=increment;  relx=Math.cos(angle);  rely=Math.sin(angle);  coords[2]=(float)(x + (relx + cv * rely) * w);  coords[3]=(float)(y + (rely - cv * relx) * h);  coords[4]=(float)(x + relx * w);  coords[5]=(float)(y + rely * h);  if (affine != null) {    affine.transform(coords,0,coords,0,3);  }  return SEG_CUBICTO;}  }
class C{  void release(){  this.conn=null;}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  public Plot add(String label,Population population){  Solution solution=population.get(0);  if (solution.getNumberOfObjectives() == 1) {    return add(label,population,0,0);  } else {    return add(label,population,0,1);  }}  }
class C{  public NoTalkbackSlimException(final ErrorType type,final String... args){  this(null,type,args);}  }
class C{  @Override public void startEntity(){}  }
class C{  private void fillToGalleryBottom(){  int itemSpacing=mSpacing;  int galleryBottom=getBottom() - getTop() - getPaddingBottom();  int numChildren=getChildCount();  int numItems=mItemCount;  View prevIterationView=getChildAt(numChildren - 1);  int curPosition;  int curTopEdge;  if (prevIterationView != null) {    curPosition=mFirstPosition + numChildren;    curTopEdge=prevIterationView.getBottom() + itemSpacing;  } else {    mFirstPosition=curPosition=mItemCount - 1;    curTopEdge=getPaddingTop();    mShouldStopFling=true;  }  while (curTopEdge < galleryBottom && curPosition < numItems) {    prevIterationView=makeAndAddVerticalView(curPosition,curPosition - mSelectedPosition,curTopEdge,true);    curTopEdge=prevIterationView.getBottom() + itemSpacing;    curPosition++;  }}  }
class C{  public Boolean isZeroCopyXmit(){  return zeroCopyXmit;}  }
class C{  public boolean checkRootByBuildTags(){  String buildTags=android.os.Build.TAGS;  if (buildTags != null && buildTags.contains(SU_TAG)) {    if (Constants.DEBUG_MODE_ENABLED) {      Log.d(TAG,"Build tags are found in the device");    }    return true;  }  return false;}  }
class C{  protected void init_actions(){  action_obj=new CUP$Parser$actions(this);}  }
class C{  public static void acc_align(AccurateValue c1,AccurateValue c2){  c1.acc_normalize(c2.digits.length);  c2.acc_normalize(c1.digits.length);}  }
class C{  public void startReadingFromBeginning(){  AccessibilityNodeInfoCompat rootNode=null;  AccessibilityNodeInfoCompat currentNode=null;  if (isActive()) {    return;  }  try {    rootNode=AccessibilityServiceCompatUtils.getRootInActiveWindow(mService);    if (rootNode == null) {      return;    }    TraversalStrategy traversal=new OrderedTraversalStrategy(rootNode);    try {      currentNode=AccessibilityNodeInfoUtils.searchFocus(traversal,rootNode,OrderedTraversalStrategy.SEARCH_FOCUS_FORWARD,AccessibilityNodeInfoUtils.FILTER_SHOULD_FOCUS);    }  finally {      traversal.recycle();    }    if (currentNode == null) {      return;    }    setReadingState(STATE_READING_FROM_BEGINNING);    mCursorController.setGranularity(CursorGranularity.DEFAULT,false);    if (!mWakeLock.isHeld()) {      mWakeLock.acquire();    }    mCursorController.clearCursor();    mCursorController.setCursor(currentNode);    if (WebInterfaceUtils.hasLegacyWebContent(currentNode)) {      moveIntoWebContent();    }  }  finally {    AccessibilityNodeInfoUtils.recycleNodes(rootNode,currentNode);  }}  }
class C{  public CaseClause createCaseClause(){  CaseClauseImpl caseClause=new CaseClauseImpl();  return caseClause;}  }
class C{  private void loadDBColumnNames(){switch (mFragmentId) {case Common.ARTISTS_FLIPPED_SONGS_FRAGMENT:case Common.ALBUM_ARTISTS_FLIPPED_SONGS_FRAGMENT:case Common.ALBUMS_FLIPPED_FRAGMENT:case Common.GENRES_FLIPPED_SONGS_FRAGMENT:    mDBColumnsMap.put(ListViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_TITLE);  mDBColumnsMap.put(ListViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(ListViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(ListViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(ListViewCardsAdapter.FIELD_1,DBAccessHelper.SONG_DURATION);mDBColumnsMap.put(ListViewCardsAdapter.FIELD_2,DBAccessHelper.SONG_ARTIST);mDBColumnsMap.put(ListViewCardsAdapter.FIELD_3,DBAccessHelper.SONG_TRACK_NUMBER);break;}}  }
class C{  public static String reverse(String s){  StringBuilder result=new StringBuilder(s.length());  for (int i=s.length() - 1; i >= 0; i--) {    result.append(s.charAt(i));  }  return result.toString();}  }
class C{  private void captureFacet(List<TreeNode> tree,int parent,String name,UIComponent c){  if (!c.isTransient()) {    FacetNode n=new FacetNode(parent,name,c);    int pos=tree.size();    tree.add(n);    captureRest(tree,pos,c);  }}  }
class C{  private IType computeFirstInaccessibleType(IType t1,IType t2){  int flags;  try {    flags=t1.getFlags();  } catch (  JavaModelException e) {    return t1;  }  if (Flags.isPrivate(flags)) {    return t1;  } else   if (Flags.isProtected(flags) || Flags.isPackageDefault(flags)) {    boolean samePackage=t1.getPackageFragment().getElementName().equals(t2.getPackageFragment().getElementName());    if (!samePackage) {      return t1;    }  }  if (t1.getParent() instanceof IType) {    return computeFirstInaccessibleType((IType)t1.getParent(),t2);  } else {    return null;  }}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  boolean retValue=reverseIt();  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  return retValue;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("LocalVariableEqualTarg");  println("startToMain(LocalVariableEqualTarg)");  compareAllVariables("LocalVariableEqualTarg","staticMeth");  listenUntilVMDisconnect();  if (!testFailed) {    println("\nLocalVariableEqual: passed");  } else {    throw new Exception("\nLocalVariableEqual: FAILED");  }}  }
class C{  public static CpcLocalRunner serializableInstance(){  return new CpcLocalRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public Matrix4d translationRotateTowards(double posX,double posY,double posZ,double dirX,double dirY,double dirZ,double upX,double upY,double upZ){  double invDirLength=1.0f / Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);  double ndirX=dirX * invDirLength;  double ndirY=dirY * invDirLength;  double ndirZ=dirZ * invDirLength;  double leftX, leftY, leftZ;  leftX=upY * ndirZ - upZ * ndirY;  leftY=upZ * ndirX - upX * ndirZ;  leftZ=upX * ndirY - upY * ndirX;  double invLeftLength=1.0f / Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);  leftX*=invLeftLength;  leftY*=invLeftLength;  leftZ*=invLeftLength;  double upnX=ndirY * leftZ - ndirZ * leftY;  double upnY=ndirZ * leftX - ndirX * leftZ;  double upnZ=ndirX * leftY - ndirY * leftX;  this.m00=leftX;  this.m01=leftY;  this.m02=leftZ;  this.m03=0.0;  this.m10=upnX;  this.m11=upnY;  this.m12=upnZ;  this.m13=0.0;  this.m20=ndirX;  this.m21=ndirY;  this.m22=ndirZ;  this.m23=0.0;  this.m30=posX;  this.m31=posY;  this.m32=posZ;  this.m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  @NonNull private ObjectAnimator createExitingImagePositionAnimator(){  int[] locationOnScreen=new int[2];  mAnimatedImage.getLocationOnScreen(locationOnScreen);  PropertyValuesHolder propertyLeft=PropertyValuesHolder.ofInt("left",locationOnScreen[0],mToLeft);  PropertyValuesHolder propertyTop=PropertyValuesHolder.ofInt("top",locationOnScreen[1] - getStatusBarHeight(),mToTop - getStatusBarHeight());  PropertyValuesHolder propertyRight=PropertyValuesHolder.ofInt("right",locationOnScreen[0] + mAnimatedImage.getWidth(),mToLeft + mToWidth);  PropertyValuesHolder propertyBottom=PropertyValuesHolder.ofInt("bottom",mAnimatedImage.getBottom(),mToTop + mToHeight - getStatusBarHeight());  return ObjectAnimator.ofPropertyValuesHolder(mAnimatedImage,propertyLeft,propertyTop,propertyRight,propertyBottom);}  }
class C{  public static boolean checkIfDifferentResource(ExportMask mask,Initiator existingInitiator){  boolean differentResource=false;  String maskResource=mask.getResource();  if (!NullColumnValueGetter.isNullValue(maskResource)) {    if (URIUtil.isType(URI.create(maskResource),Host.class)) {      differentResource=!maskResource.equals(existingInitiator.getHost().toString());    } else {      differentResource=!maskResource.equals(existingInitiator.getClusterName());    }  }  return differentResource;}  }
class C{  public UnitFakeDefinition createUnitFakeDefinition(){  UnitFakeDefinitionImpl unitFakeDefinition=new UnitFakeDefinitionImpl();  return unitFakeDefinition;}  }
class C{  private Option createNoArgOpt(String longOpt,String desc){  return Option.builder().longOpt(longOpt).desc(desc).build();}  }
class C{  public void delete(){  if (historyId > 0) {    try {      staticTableTag.deleteTagsForHistoryID(historyId);      staticTableHistory.delete(historyId);    } catch (    DatabaseException e) {      log.error(e.getMessage(),e);    }  }}  }
class C{  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,final List<GeoPoint> pointList){  return makeGeoPolygon(planetModel,pointList,null);}  }
class C{  public Parker(CyclicBarrier barrier,boolean absolute,long parkMillis){  this.barrier=barrier;  this.absolute=absolute;  this.amount=absolute ? parkMillis : parkMillis * 1000000;}  }
class C{  void donePressed(ActionEvent e){  if (_curLogix == null) {    log.error("null pointer to _curLogix in donePressed method");    finishDone();    return;  }  if (checkEditConditional()) {    return;  }  if (_curLogix.getSystemName().equals(SensorGroupFrame.logixSysName)) {    finishDone();    return;  }  String uName=editUserName.getText().trim();  if (!(uName.equals(_curLogix.getUserName()))) {    if (uName.length() > 0) {      Logix p=_logixManager.getByUserName(uName);      if (p != null) {        log.error("Failure to update Logix with Duplicate User Name: " + uName);        javax.swing.JOptionPane.showMessageDialog(editLogixFrame,rbx.getString("Error6"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);        return;      }    }    _curLogix.setUserName(uName);    m.fireTableDataChanged();  }  finishDone();}  }
class C{  public static long invokeL(String signature,boolean isNative,Object caller){  MethodListener i=sMethods.get(signature);  if (i != null) {    return i.onInvokeL(signature,isNative,caller);  } else   if (sDefaultListener != null) {    return sDefaultListener.onInvokeL(signature,isNative,caller);  }  return 0;}  }
class C{  public void attributeAsClass(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().attributeAsClass();}  }
class C{  private static void nioCopy(FileOutputStream fos,FileInputStream fis) throws IOException {  FileChannel outChannel=fos.getChannel();  FileChannel inChannel=fis.getChannel();  long length=inChannel.size();  long offset=0;  while (true) {    long remaining=length - offset;    long toTransfer=remaining < MAX_TRANSFER_SIZE ? remaining : MAX_TRANSFER_SIZE;    long transferredBytes=inChannel.transferTo(offset,toTransfer,outChannel);    offset+=transferredBytes;    length=inChannel.size();    if (offset >= length) {      break;    }  }}  }
class C{  protected int performBoosting(Instances train,Instances test,double[] error,int maxIterations) throws Exception {  Instances numericTrain=getNumericData(train);  double[][] trainYs=getYs(train);  double[][] trainFs=getFs(numericTrain);  double[][] probs=getProbs(trainFs);  int iteration=0;  int noMin=0;  double lastMin=Double.MAX_VALUE;  if (m_errorOnProbabilities) {    error[0]+=getMeanAbsoluteError(test);  } else {    error[0]+=getErrorRate(test);  }  while (iteration < maxIterations) {    boolean foundAttribute=performIteration(iteration,trainYs,trainFs,probs,numericTrain);    if (foundAttribute) {      iteration++;      m_numRegressions=iteration;    } else {      break;    }    if (m_errorOnProbabilities) {      error[iteration]+=getMeanAbsoluteError(test);    } else {      error[iteration]+=getErrorRate(test);    }    if (noMin > m_heuristicStop) {      break;    }    if (error[iteration] < lastMin) {      lastMin=error[iteration];      noMin=0;    } else {      noMin++;    }  }  return iteration;}  }
class C{  public CqAttributes create(){  return (CqAttributes)this.cqAttributes.clone();}  }
class C{  public static boolean isGlob(String s){  return s.indexOf('*') >= 0 || s.indexOf('?') >= 0;}  }
class C{  public ReverseNestedBuilder path(String path){  this.path=path;  return this;}  }
class C{  public HttpException(final String message,final Throwable cause){  super(message);  this.cause=cause;  try {    final Class[] paramsClasses=new Class[]{Throwable.class};    final Method initCause=Throwable.class.getMethod("initCause",paramsClasses);    initCause.invoke(this,new Object[]{cause});  } catch (  final Exception e) {  }}  }
class C{  public void highlightRoute(String src,String dst){  Object[] cells=graph.getEdgesBetween(nodes.get(src),nodes.get(dst),true);  if (cells.length == 0)   return;  ((mxCell)cells[0]).setStyle("strokeColor=" + display.getProperty("graph.edge_highlight.color","#00ff00") + ";strokeWidth=4");}  }
class C{  private void donateGoogleOnClick(){  final int index;  index=mGoogleSpinner.getSelectedItemPosition();  if (mDebug)   Timber.d("selected item in spinner: " + index);  if (mDebug) {    mHelper.launchPurchaseFlow(getActivity(),CATALOG_DEBUG[index],IabHelper.ITEM_TYPE_INAPP,0,mPurchaseFinishedListener,null);  } else {    mHelper.launchPurchaseFlow(getActivity(),mGgoogleCatalog[index],IabHelper.ITEM_TYPE_INAPP,0,mPurchaseFinishedListener,null);  }}  }
class C{  @SideEffectFree public XMLStreamException(@Nullable String msg){  super(msg);}  }
class C{  public void deleteAllEntries(){  mLocalContentResolver.delete(ImageSharingData.CONTENT_URI,null,null);  mLocalContentResolver.delete(VideoSharingData.CONTENT_URI,null,null);  mLocalContentResolver.delete(GeolocSharingData.CONTENT_URI,null,null);}  }
class C{  private static PlaceResponse checkPlaceResponse(PlaceResponse placeResponse) throws RpcException {  logger.debug("Checking {}",placeResponse);  SchedulerErrorCodeToExceptionMapper.mapErrorCodeToException(placeResponse.getResult(),placeResponse.getError());  return placeResponse;}  }
class C{  @SuppressWarnings("deprecation") @Override public IBlockState withRotation(IBlockState state,Rotation rotation){  return state.withProperty(FACING,rotation.rotate(state.getValue(FACING)));}  }
class C{  public void forceClose(){  close0(true);}  }
class C{  public static double asinInRange(double value){  if (value <= -1) {    return -Math.PI / 2;  } else   if (value >= 1) {    return Math.PI / 2;  } else {    return FastMath.asin(value);  }}  }
class C{  public static boolean isPrivate(int mod){  return (mod & PRIVATE) != 0;}  }
class C{  public Locator2Impl(Locator locator){  super(locator);  if (locator instanceof Locator2) {    Locator2 l2=(Locator2)locator;    version=l2.getXMLVersion();    encoding=l2.getEncoding();  }}  }
class C{  public boolean hasPrevSignature(){  return fieldSetFlags()[11];}  }
class C{  protected void addJoinedType(Object tokenType){  joinedTypes.add(tokenType);}  }
class C{  public InetSocketAddress socketAddress(){  return address;}  }
class C{  public static void addTransforms(MetadataRegistry registry){  addCategoryTransforms(registry);  addContentTransforms(registry);  addEntryTransforms(registry);  addEntryOutOfLineContentTransforms(registry);  addFeedTransforms(registry);  addLinkTransforms(registry);  addSourceTransforms(registry);  addPersonTransforms(registry);  addGeneratorTransforms(registry);  addAppEditedTransforms(registry);}  }
class C{  private double calculateCCI(Double sumTypicalPrice,LinkedList<Double> typicalPriceValues){  double typicalPriceSMA=sumTypicalPrice / getLength();  double sumMeanDeviation=0;  for (  double typicalPrice : typicalPriceValues) {    sumMeanDeviation=sumMeanDeviation + Math.abs(typicalPriceSMA - typicalPrice);  }  if (sumMeanDeviation == 0)   return 0;  return (typicalPriceValues.getFirst() - typicalPriceSMA) / (0.015 * (sumMeanDeviation / getLength()));}  }
class C{  protected void onOffsetChild(final View child,final int position,final boolean flowDown,final int childrenLeft,final int childTop){  child.offsetLeftAndRight(childrenLeft - child.getLeft());  child.offsetTopAndBottom(childTop - child.getTop());}  }
class C{  private void sendServer(String cmd){  out.print(cmd);  if (logger.isLoggable(PlatformLogger.Level.FINEST)) {    logger.finest("Server [" + serverAddr + "] <-- "+ cmd);  }}  }
class C{  public static void blockESPBox(BlockPos blockPos){  double x=blockPos.getX() - Minecraft.getMinecraft().getRenderManager().renderPosX;  double y=blockPos.getY() - Minecraft.getMinecraft().getRenderManager().renderPosY;  double z=blockPos.getZ() - Minecraft.getMinecraft().getRenderManager().renderPosZ;  GL11.glBlendFunc(770,771);  GL11.glEnable(GL_BLEND);  GL11.glLineWidth(1.0F);  GL11.glColor4d(0,1,0,0.15F);  GL11.glDisable(GL11.GL_TEXTURE_2D);  GL11.glDisable(GL_DEPTH_TEST);  GL11.glDepthMask(false);  drawColorBox(new AxisAlignedBB(x,y,z,x + 1.0,y + 1.0,z + 1.0));  GL11.glColor4d(0,0,0,0.5F);  RenderGlobal.drawOutlinedBoundingBox(new AxisAlignedBB(x,y,z,x + 1.0,y + 1.0,z + 1.0),-1);  GL11.glEnable(GL11.GL_TEXTURE_2D);  GL11.glEnable(GL_DEPTH_TEST);  GL11.glDepthMask(true);  GL11.glDisable(GL_BLEND);}  }
class C{  protected void processSerialized(DatabaseMapping mapping,MetadataClass referenceClass,boolean isForMapKey){  new SerializedMetadata(this).process(mapping,this,referenceClass,isForMapKey);}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  this.value.readFields(in);}  }
class C{  @POST @Produces({MediaType.TEXT_PLAIN,MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response validateAuthenticationProvider(AuthnProviderParamsToValidate param){  StringBuilder errorString=new StringBuilder();  if (!ImmutableAuthenticationProviders.checkProviderStatus(coordinator,param,keystoneApiFactory,errorString,dbClient)) {    return Response.status(Status.BAD_REQUEST).entity(errorString.toString()).build();  }  return Response.status(Status.OK).build();}  }
class C{  public Iterator<String> multiValueIterator(String k){  return new HeaderIterator(k,this);}  }
class C{  public synchronized PDFObject dereference(PDFXref ref,PDFDecrypter decrypter) throws IOException {  int id=ref.getID();  if (id >= objIdx.length || objIdx[id] == null) {    return PDFObject.nullObj;  }  PDFObject obj=objIdx[id].getObject();  if (obj != null) {    return obj;  }  int startPos=buf.position();  boolean compressed=objIdx[id].getCompressed();  if (!compressed) {    int loc=objIdx[id].getFilePos();    if (loc < 0) {      return PDFObject.nullObj;    }    buf.position(loc);    obj=readObject(ref.getID(),ref.getGeneration(),decrypter);  } else {    int compId=objIdx[id].getID();    int idx=objIdx[id].getIndex();    if (idx < 0)     return PDFObject.nullObj;    PDFXref compRef=new PDFXref(compId,0);    PDFObject compObj=dereference(compRef,decrypter);    int first=compObj.getDictionary().get("First").getIntValue();    int length=compObj.getDictionary().get("Length").getIntValue();    int n=compObj.getDictionary().get("N").getIntValue();    if (idx >= n)     return PDFObject.nullObj;    ByteBuffer strm=compObj.getStreamBuffer();    ByteBuffer oldBuf=buf;    buf=strm;    for (int i=0; i < idx; i++) {      PDFObject skip1num=readObject(-1,-1,true,IdentityDecrypter.getInstance());      PDFObject skip2num=readObject(-1,-1,true,IdentityDecrypter.getInstance());    }    PDFObject objNumPO=readObject(-1,-1,true,IdentityDecrypter.getInstance());    PDFObject offsetPO=readObject(-1,-1,true,IdentityDecrypter.getInstance());    int objNum=objNumPO.getIntValue();    int offset=offsetPO.getIntValue();    if (objNum != id)     return PDFObject.nullObj;    buf.position(first + offset);    obj=readObject(objNum,0,IdentityDecrypter.getInstance());    buf=oldBuf;  }  if (obj == null) {    obj=PDFObject.nullObj;  }  objIdx[id].setObject(obj);  buf.position(startPos);  return obj;}  }
class C{  private VirtualDataCenter newVdcForAdding(String shortId){  VirtualDataCenter vdc=new VirtualDataCenter();  URI vdcId=URIUtil.createVirtualDataCenterId(shortId);  String vdcShortId=shortId;  vdc.setShortId(vdcShortId);  vdc.setId(vdcId);  vdc.setVersion(2L);  vdc.setLocal(false);  vdc.setApiEndpoint("127.0.0.2");  vdc.setHostCount(1);  vdc.setConnectionStatus(VirtualDataCenter.ConnectionStatus.CONNECTING);  vdc.setRepStatus(VirtualDataCenter.GeoReplicationStatus.REP_NONE);  vdc.setCertificateChain(TEST_CERT);  return vdc;}  }
class C{  public Map<String,byte[]> remove(final byte[] key) throws IOException, SpaceExceededException {  final Map<String,byte[]> value=get(key);  delete(key);  return value;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe amplitude multiplier (default " + defaultAmplitude() + ").","A",1,"-A <num>"));  result.addElement(new Option("\tThe range x is randomly drawn from (default " + defaultMinRange() + ".."+ defaultMaxRange()+ ").","R",1,"-R <num>..<num>"));  result.addElement(new Option("\tThe noise rate (default " + defaultNoiseRate() + ").","N",1,"-N <num>"));  result.addElement(new Option("\tThe noise variance (default " + defaultNoiseVariance() + ").","V",1,"-V <num>"));  return result.elements();}  }
class C{  public void tryToDeleteGroupChat(String chatId){  mImDeleteOperationHandler.post(new GroupChatMessageDeleteTask(mChatService,this,mLocalContentResolver,chatId));  mImDeleteOperationHandler.post(new GroupFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver,chatId));  mImDeleteOperationHandler.post(new GroupChatDeleteTask(mChatService,this,mLocalContentResolver,chatId));}  }
class C{  public static long[] asLongArray(final List<Long> l){  final long[] a=new long[l.size()];  for (int i=0; i < a.length; i++) {    a[i]=l.get(i);  }  return a;}  }
class C{  public String htmlRuleString(XMLDocumentationHandler handler){  String html="<div class=\"requiredcompoundrule\">At least one of:";  for (  XMLSyntaxRule rule : rules) {    html+=rule.htmlRuleString(handler);  }  html+="</div>";  return html;}  }
class C{  protected void engineUpdate(byte[] input,int offset,int len){  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (len <= 0) {    return;  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset > input.length || len > input.length || (len + offset) > input.length) {    throw new IllegalArgumentException();  }  SHA1Impl.updateHash(buffer,input,offset,offset + len - 1);  messageLength+=len;}  }
class C{  public final void addElement(final Area value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  void acquireRecoveryWriteLock() throws InterruptedException {  this.recovering=true;  this.recoveryLock.writeLock().lockInterruptibly();}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  int cnt=0;  for (  ModuleConfig config : ModuleConfig.allConfigs) {    config.reload();    cnt++;  }  Toast.log().info("All ModuleConfigs reloaded (" + cnt + " reloaded)");}  }
class C{  public void owned(KeyCacheObject key,GridCacheVersion ownerMapped){  if (owned == null)   owned=new GridLeanMap<>(3);  owned.put(key,ownerMapped);}  }
class C{  private static float distance(float eventX,float startX,float eventY,float startY){  float dx=eventX - startX;  float dy=eventY - startY;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  private boolean isMediaTypeMatch(MediaType mediaType,MediaType rangePattern){  String WILDCARD="*";  String rangePatternType=rangePattern.getType();  String rangePatternSubtype=rangePattern.getSubtype();  return (rangePatternType.equals(WILDCARD) || rangePatternType.equals(mediaType.getType())) && (rangePatternSubtype.equals(WILDCARD) || rangePatternSubtype.equals(mediaType.getSubtype()));}  }
class C{  public static void trace(String str){  if (timeStamp)   System.err.print(new Date());  if (timeStampMs || timeStampMsRel) {    if (timeStampMsRel && (t0 == 0))     t0=System.currentTimeMillis();    System.err.print((System.currentTimeMillis() - t0) + " ");  }  if (caller)   System.err.print(ExceptionUtil.getCallAt(new Throwable(),1) + " ");  System.err.println(str);  if (stackLines > 0)   System.err.println(ExceptionUtil.getStackTraceLines(new Throwable(),stackLines)); else   if (stackPrefix != null)   System.err.println(ExceptionUtil.getStackTraceUpTo(new Throwable(),stackPrefix));}  }
class C{  public NamedColor(String name,int r,int g,int b){  super(r,g,b);  if (name == null) {    name="";  }  this.name=name;  names=new HashSet<>();  names.add(name);  namesLowercase=new HashSet<>();  namesLowercase.add(name.toLowerCase());}  }
class C{  public double nextDouble(double k){  double u, v, w, c, z;  if (k <= 0.0)   throw new IllegalArgumentException();  if (k_set != k) {    tau=1.0 + Math.sqrt(1.0 + 4.0 * k * k);    rho=(tau - Math.sqrt(2.0 * tau)) / (2.0 * k);    r=(1.0 + rho * rho) / (2.0 * rho);    k_set=k;  }  do {    u=randomGenerator.nextDouble();    v=randomGenerator.nextDouble();    z=Math.cos(Math.PI * u);    w=(1.0 + r * z) / (r + z);    c=k * (r - w);  } while ((c * (2.0 - c) < v) && (Math.log(c / v) + 1.0 < c));  return (randomGenerator.nextDouble() > 0.5) ? Math.acos(w) : -Math.acos(w);}  }
class C{  public static SipRequest createInvite(SipDialogPath dialog,String[] featureTags,String sdp) throws PayloadException {  return createInvite(dialog,featureTags,featureTags,sdp);}  }
class C{  public static void println(short x){  out.println(x);}  }
class C{  public static Path leftShift(Path self,byte[] bytes) throws IOException {  append(self,bytes);  return self;}  }
class C{  public static POServiceReview toPOServiceReview(ProductReview domainObject){  POServiceReview presentationObject=new POServiceReview();  presentationObject.setTitle(domainObject.getTitle());  presentationObject.setComment(domainObject.getComment());  presentationObject.setRating(domainObject.getRating());  presentationObject.setModificationDate(domainObject.getModificationDate());  presentationObject.setKey(domainObject.getKey());  presentationObject.setVersion(domainObject.getVersion());  presentationObject.setProductKey(domainObject.getProductFeedback().getProduct().getKey());  presentationObject.setUserId(domainObject.getPlatformUser().getUserId());  mapUserName(domainObject,presentationObject);  return presentationObject;}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int intValue(){  return getValue().intValue();}  }
class C{  public Array(boolean ordered,T[] array){  this(ordered,array.length,(Class)array.getClass().getComponentType());  size=array.length;  System.arraycopy(array,0,items,0,size);}  }
class C{  protected SelectedSparseObjectMatrix1D(int size,AbstractIntObjectMap elements,int zero,int stride,int[] offsets,int offset){  setUp(size,zero,stride);  this.elements=elements;  this.offsets=offsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public VirtualFile resolve(String relativeStr){  return fs.resolve(this,relativeStr);}  }
class C{  public void testVerboseMode() throws Exception {  final PrintStream backupSysOut=System.out;  final PrintStream backupSysErr=System.err;  final ByteArrayOutputStream testOut=new ByteArrayOutputStream();  final ByteArrayOutputStream testErr=new ByteArrayOutputStream();  try {    System.setOut(new PrintStream(testOut));    System.setErr(new PrintStream(testErr));    System.setProperty("IGNITE_QUIET","false");    try (Ignite ignite=G.start(getConfiguration("verboseLogGrid",LOG_PATH_VERBOSE_TEST))){      String testMsg="******* Hello Tester! ******* ";      ignite.log().error(testMsg + Level.ERROR);      ignite.log().warning(testMsg + Level.WARN);      ignite.log().info(testMsg + Level.INFO);      ignite.log().debug(testMsg + Level.DEBUG);      ignite.log().trace(testMsg + Level.TRACE);      String consoleOut=testOut.toString();      String consoleErr=testErr.toString();      assertTrue(consoleOut.contains(testMsg + Level.INFO));      assertTrue(consoleOut.contains(testMsg + Level.DEBUG));      assertTrue(consoleOut.contains(testMsg + Level.TRACE));      assertTrue(consoleOut.contains(testMsg + Level.ERROR));      assertTrue(consoleOut.contains(testMsg + Level.WARN));      assertTrue(consoleErr.contains(testMsg + Level.ERROR));      assertTrue(consoleErr.contains(testMsg + Level.WARN));      assertTrue(!consoleErr.contains(testMsg + Level.INFO));      assertTrue(consoleErr.contains(testMsg + Level.DEBUG));      assertTrue(consoleErr.contains(testMsg + Level.TRACE));    }   }  finally {    System.setProperty("IGNITE_QUIET","true");    System.setOut(backupSysOut);    System.setErr(backupSysErr);    System.out.println("**************** Out Console content ***************");    System.out.println(testOut.toString());    System.err.println("**************** Err Console content ***************");    System.err.println(testErr.toString());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isVmfsUpgradable(){  return vmfsUpgradable;}  }
class C{  private void playEffectIfEnabled(){  if (isEffectsEnabled()) {    config().getNotificationProvider().onMessageArriveInApp(context().getMessenger());  }}  }
class C{  public boolean isConnectionReset(){  return StringUtils.contains(content,"Connection reset") || StringUtils.contains(content,"Software caused connection abort: recv failed");}  }
class C{  public double mean(double[] series){  double res=0D;  int count=0;  for (  double tp : series) {    res+=tp;    count+=1;  }  if (count > 0) {    return res / ((Integer)count).doubleValue();  }  return Double.NaN;}  }
class C{  public AsyncHttpSender(CloseableHttpAsyncClient client){  super();  this.client=client;}  }
class C{  @Override public boolean supportsMultipleResultSets(){  debugCodeCall("supportsMultipleResultSets");  return false;}  }
class C{  @Override @SuppressWarnings("unchecked") public NamedList<Object> doHighlighting(DocList docs,Query query,SolrQueryRequest req,String[] defaultFields) throws IOException {  SolrParams params=req.getParams();  if (!isHighlightingEnabled(params))   return null;  SolrIndexSearcher searcher=req.getSearcher();  IndexSchema schema=searcher.getSchema();  SchemaField keyField=schema.getUniqueKeyField();  if (keyField == null) {    return null;  }  String[] fieldNames=getHighlightFields(query,req,defaultFields);  Set<String> preFetchFieldNames=getDocPrefetchFieldNames(fieldNames,req);  if (preFetchFieldNames != null) {    preFetchFieldNames.add(keyField.getName());  }  FvhContainer fvhContainer=new FvhContainer(null,null);  IndexReader reader=new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader());  NamedList fragments=new SimpleOrderedMap();  DocIterator iterator=docs.iterator();  for (int i=0; i < docs.size(); i++) {    int docId=iterator.nextDoc();    Document doc=searcher.doc(docId,preFetchFieldNames);    @SuppressWarnings("rawtypes") NamedList docHighlights=new SimpleOrderedMap();    for (    String fieldName : fieldNames) {      SchemaField schemaField=schema.getFieldOrNull(fieldName);      Object fieldHighlights;      fieldHighlights=doHighlightingOfField(doc,docId,schemaField,fvhContainer,query,reader,req,params);      if (fieldHighlights == null) {        fieldHighlights=alternateField(doc,docId,fieldName,fvhContainer,query,reader,req);      }      if (fieldHighlights != null) {        docHighlights.add(fieldName,fieldHighlights);      }    }    fragments.add(schema.printableUniqueKey(doc),docHighlights);  }  return fragments;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.807 -0500",hash_original_method="D4116A9C3735B3F595194F995C84896F",hash_generated_method="79801730538B34C12C03F956F4749FAF") static List<TextAttribute> retrieveTextAttribute(ComprehensionTlv ctlv) throws ResultException {  ArrayList<TextAttribute> lst=new ArrayList<TextAttribute>();  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  int length=ctlv.getLength();  if (length != 0) {    int itemCount=length / 4;    try {      for (int i=0; i < itemCount; i++, valueIndex+=4) {        int start=rawValue[valueIndex] & 0xff;        int textLength=rawValue[valueIndex + 1] & 0xff;        int format=rawValue[valueIndex + 2] & 0xff;        int colorValue=rawValue[valueIndex + 3] & 0xff;        int alignValue=format & 0x03;        TextAlignment align=TextAlignment.fromInt(alignValue);        int sizeValue=(format >> 2) & 0x03;        FontSize size=FontSize.fromInt(sizeValue);        if (size == null) {          size=FontSize.NORMAL;        }        boolean bold=(format & 0x10) != 0;        boolean italic=(format & 0x20) != 0;        boolean underlined=(format & 0x40) != 0;        boolean strikeThrough=(format & 0x80) != 0;        TextColor color=TextColor.fromInt(colorValue);        TextAttribute attr=new TextAttribute(start,textLength,align,size,bold,italic,underlined,strikeThrough,color);        lst.add(attr);      }      return lst;    } catch (    IndexOutOfBoundsException e) {      throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);    }  }  return null;}  }
class C{  @Override public void onEnterAnimationFinished(){  mIntroView.setVisibility(INVISIBLE);  mProgressDownloadView.setVisibility(VISIBLE);  mProgressDownloadView.setProgress(mProgressDownloadView.getProgress());}  }
class C{  public void updateView(double degrees){  degrees=(degrees + 180) % 360 - 90;  if (degrees < 0)   degrees=360 + degrees;  if (mViewWidth == 0)   mViewWidth=mEast.getWidth();  float DEGREE=90.f;  float northOffset=((float)degrees - 180.f) / DEGREE;  float westOffset=((float)degrees - 270) / DEGREE;  float eastOffset=((float)degrees - 90) / DEGREE;  float southOffset=0.f;  if (degrees > 0.f && degrees < 90.f)   southOffset=((float)degrees) / DEGREE; else   southOffset=((float)degrees - 360) / DEGREE;  mNorth.setTranslation(northOffset,mViewWidth);  mWest.setTranslation(westOffset,mViewWidth);  mEast.setTranslation(eastOffset,mViewWidth);  mSouth.setTranslation(southOffset,mViewWidth);}  }
class C{  @Override public final void openPdfArray(final byte[] data) throws PdfException {  if (data == null) {    throw new RuntimeException("Attempting to open null byte stream");  }  preOpen();  if (fileAccess.isOpen) {    closePdfFile();  }  fileAccess.openPdfArray(data);  postOpen();}  }
class C{  private void updateDB(DBIDs dbids,double[] movingVector){  throw new AbortException("FIXME: INCOMPLETE TRANSITION");}  }
class C{  public final void testGetPrime(){  RSAOtherPrimeInfo ropi=new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),BigInteger.valueOf(3L));  assertEquals(1L,ropi.getPrime().longValue());}  }
class C{  protected void onPing(String sourceNick,String sourceLogin,String sourceHostname,String target,String pingValue){  this.sendRawLine("NOTICE " + sourceNick + " :\u0001PING "+ pingValue+ "\u0001");}  }
class C{  public void monitorExit(){  mv.visitInsn(Opcodes.MONITOREXIT);}  }
class C{  public void selectConfigurableTab(Co2Configurable configurable,boolean selectCo2Tab){  Component tabComponent=configurable.getTabComponent();  if (tabComponent != null) {    Container parent=tabComponent.getParent();    if (parent instanceof JTabbedPane) {      ((JTabbedPane)parent).setSelectedComponent(tabComponent);    }  }}  }
class C{  public static Credentials acquireS4U2selfCreds(PrincipalName client,Credentials ccreds) throws KrbException, IOException {  String uRealm=client.getRealmString();  String localRealm=ccreds.getClient().getRealmString();  if (!uRealm.equals(localRealm)) {    throw new KrbException("Cross realm impersonation not supported");  }  if (!ccreds.isForwardable()) {    throw new KrbException("S4U2self needs a FORWARDABLE ticket");  }  KrbTgsReq req=new KrbTgsReq(ccreds,ccreds.getClient(),new PAData(Krb5.PA_FOR_USER,new PAForUserEnc(client,ccreds.getSessionKey()).asn1Encode()));  Credentials creds=req.sendAndGetCreds();  if (!creds.getClient().equals(client)) {    throw new KrbException("S4U2self request not honored by KDC");  }  if (!creds.isForwardable()) {    throw new KrbException("S4U2self ticket must be FORWARDABLE");  }  return creds;}  }
class C{  private void intersectEmail(String email1,String email2,Set intersect){  if (email1.indexOf('@') != -1) {    String _sub=email1.substring(email1.indexOf('@') + 1);    if (email2.indexOf('@') != -1) {      if (email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(_sub,email2)) {        intersect.add(email1);      }    } else {      if (_sub.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    }  } else   if (email1.startsWith(".")) {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (withinDomain(_sub,email1)) {        intersect.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2) || email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      } else       if (withinDomain(email2,email1)) {        intersect.add(email2);      }    } else {      if (withinDomain(email2,email1)) {        intersect.add(email2);      }    }  } else {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email2.indexOf('@') + 1);      if (_sub.equalsIgnoreCase(email1)) {        intersect.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2)) {        intersect.add(email1);      }    } else {      if (email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    }  }}  }
class C{  public static UndertowFraction createDefaultHTTPSOnlyFraction(String path,String password,String alias){  UndertowFraction fraction=new UndertowFraction();  fraction.enableHTTPS(path,password,alias);  return fraction;}  }
class C{  private static boolean hasDifferentParentFunctions(final INaviCodeNode firstNode,final INaviCodeNode secondNode){  try {    final INaviFunction startFunction=firstNode.getParentFunction();    try {      final INaviFunction endFunction=secondNode.getParentFunction();      return !startFunction.equals(endFunction);    } catch (    final MaybeNullException e) {      return true;    }  } catch (  final MaybeNullException e) {    try {      secondNode.getParentFunction();      return true;    } catch (    final MaybeNullException e1) {      return false;    }  }}  }
class C{  public BlockDenseDoubleMatrix2D(final int rows,final int cols,final BlockOrder blockOrder){  this(rows,cols,deriveDefaultBlockStripeSize(rows,cols),blockOrder);}  }
class C{  public boolean isParamTag(){  return (this.flags & PARAM_TAG) == PARAM_TAG;}  }
class C{  private void startDownloadRepeat(final String hostname,final int port,final String uri){  mRepeatDownload=true;  mSpeedTestSocket.startDownload(hostname,port,uri);}  }
class C{  private boolean checkJVMOptionIsSupported(String jvmOpt){  return !(jvmOpt.contains("-XX:OnError") || jvmOpt.contains("-XX:OnOutOfMemoryError"));}  }
class C{  TCPTransport(LinkedList<TCPEndpoint> epList){  this.epList=epList;  if (tcpLog.isLoggable(Log.BRIEF)) {    tcpLog.log(Log.BRIEF,"Version = " + TransportConstants.Version + ", ep = "+ getEndpoint());  }}  }
class C{  public String normalizeNodeWidthTipText(){  return "Whether if the widths of the KDTree node should be normalized " + "by the width of the universe or not. " + "Where, width of the node is the range of the split attribute "+ "based on the instances in that node, and width of the "+ "universe is the range of the split attribute based on all the "+ "instances (default: false).";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public int update(String key,String value){  checkKey(key);  checkValue(value);  if (!keyExists(key))   return -1;  return doUpdate(key,value);}  }
class C{  public static void showAuthDialog(String redirectURL){  Intent intent=new Intent(DroidNubeKit.getInstance().getContext(),DNKWebViewAuthActivity.class);  intent.putExtra(DroidNubeKitConstants.WEBVIEW_REDIRECT_URL_EXTRA,redirectURL);  intent.putExtra(DroidNubeKitConstants.WEBVIEW_REDIRECT_PATTERN_EXTRA,DroidNubeKitConstants.WEBVIEW_REDIRECT_URL_PREFIX + DroidNubeKit.getInstance().appContainerIdentifier.toLowerCase());  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  DroidNubeKit.getInstance().getContext().startActivity(intent);}  }
class C{  public void removeAnimation(int reactTag,int animationID){  assertViewExists(reactTag,"removeAnimation");  mOperationsQueue.enqueueRemoveAnimation(animationID);}  }
class C{  @Override public IMessage onMessage(MessageUpdateHeldHiddenBlockRevealer message,MessageContext ctx){  Minecraft.getMinecraft().addScheduledTask(null);  return null;}  }
class C{  public ExpiringMap(int timeToLive){  this(timeToLive,DEFAULT_EXPIRATION_INTERVAL);}  }
class C{  protected HeuristicFunction createHeuristicFunction(MapNode[] pNodes,int waySelection){  return new OsmSldHeuristicFunction(pNodes[1]);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:14.037 -0500",hash_original_method="6A7FA32ED0AD9506923594ED32C4601A",hash_generated_method="A7F67091EA6B158F41DE9930ED9770EF") static RILRequest obtain(int request,Message result){  RILRequest rr=null;synchronized (sPoolSync) {    if (sPool != null) {      rr=sPool;      sPool=rr.mNext;      rr.mNext=null;      sPoolSize--;    }  }  if (rr == null) {    rr=new RILRequest();  }synchronized (sSerialMonitor) {    rr.mSerial=sNextSerial++;  }  rr.mRequest=request;  rr.mResult=result;  rr.mp=Parcel.obtain();  if (result != null && result.getTarget() == null) {    throw new NullPointerException("Message target must not be null");  }  rr.mp.writeInt(request);  rr.mp.writeInt(rr.mSerial);  return rr;}  }
class C{  public void prepareSession(String remoteAddress,int remotePort,int orientationHeaderId,MediaOutput renderer,Format format,RtpStreamListener rtpStreamListener) throws NetworkException {  try {    mInputStream=new RtpInputStream(remoteAddress,remotePort,mLocalPort,format);    mInputStream.setExtensionHeaderId(orientationHeaderId);    mInputStream.addRtpStreamListener(rtpStreamListener);    mInputStream.open();    if (sLogger.isActivated()) {      sLogger.debug("Input stream: " + mInputStream.getClass().getName());    }    VideoRendererStream outputStream=new VideoRendererStream(renderer);    outputStream.open();    if (sLogger.isActivated()) {      sLogger.debug("Output stream: " + outputStream.getClass().getName());    }    Codec[] codecChain=MediaRegistry.generateDecodingCodecChain(format.getCodec());    mProcessor=new Processor(mInputStream,outputStream,codecChain);    if (sLogger.isActivated()) {      sLogger.debug("Session has been prepared with success");    }  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Can't prepare resources correctly for remoteAddress : ").append(remoteAddress).append(" with remotePort : ").append(remotePort).append(" orientationHeaderId : ").append(orientationHeaderId).append("!").toString(),e);  }}  }
class C{  public static long min(long a,long b){  return 0l;}  }
class C{  @Override public void clear(){  firstValue=null;  secondValue=null;}  }
class C{  protected void basicProcess(final DM dm,final boolean waitForGrantor){  final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);  if (isDebugEnabled_DLS) {    logger.trace(LogMarker.DLS,"[basicProcess] {}",this);  }  int replyCode=DLockReleaseReplyMessage.NOT_GRANTOR;  ReplyException replyException=null;  try {    if (svc == null || svc.isDestroyed())     return;    if (waitForGrantor) {      try {        this.grantor=DLockGrantor.waitForGrantor(this.svc);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        this.grantor=null;      }    }    if (grantor == null || grantor.isDestroyed()) {      return;    }    try {      if (lockBatch) {        grantor.releaseLockBatch(objectName,getSender());        replyCode=DLockReleaseReplyMessage.OK;      } else {        grantor.releaseIfLocked(objectName,getSender(),lockId);        replyCode=DLockReleaseReplyMessage.OK;      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      replyCode=DLockReleaseReplyMessage.NOT_GRANTOR;    }  } catch (  LockGrantorDestroyedException ignore) {  }catch (  LockServiceDestroyedException ignore) {  }catch (  RuntimeException e) {    replyException=new ReplyException(e);    if (isDebugEnabled_DLS) {      logger.trace(LogMarker.DLS,"[basicProcess] caught RuntimeException",e);    }  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    replyException=new ReplyException(e);    if (isDebugEnabled_DLS) {      logger.trace(LogMarker.DLS,"[basicProcess] caught Error",e);    }  } finally {    DLockReleaseReplyMessage replyMsg=new DLockReleaseReplyMessage();    replyMsg.serviceName=this.serviceName;    replyMsg.replyCode=replyCode;    replyMsg.setProcessorId(this.processorId);    replyMsg.setRecipient(getSender());    replyMsg.setException(replyException);    if (dm.getId().equals(getSender())) {      replyMsg.setSender(getSender());      replyMsg.dmProcess(dm);    } else {      dm.putOutgoing(replyMsg);    }    if (grantor != null && !lockBatch) {      try {        grantor.postRemoteReleaseLock(objectName);      } catch (      InterruptedException e) {        try {          dm.getCancelCriterion().checkCancelInProgress(e);        }  finally {          Thread.currentThread().interrupt();        }      }    } else {      if (DLockGrantor.DEBUG_SUSPEND_LOCK && isDebugEnabled_DLS) {        logger.trace(LogMarker.DLS,"DLockReleaseMessage, omitted postRemoteRelease lock on " + objectName + "; grantor = "+ grantor+ ", lockBatch = "+ lockBatch+ ", replyMsg = "+ replyMsg);      }    }  }}  }
class C{  public StandardRenderPolicy(OMGraphicHandlerLayer layer){  this();  setLayer(layer);}  }
class C{  @SuppressWarnings("unchecked") @SafeVarargs public static <T>T[] join(T[]... arrays){  return join(null,arrays);}  }
class C{  public final byte[] toByteArray(){  final List<Byte> argchars=new ArrayList<>();  argchars.add((byte)((type >> 24) & 0xFF));  argchars.add((byte)((type >> 16) & 0xFF));  argchars.add((byte)((type >> 8) & 0xFF));  argchars.add((byte)((type) & 0xFF));  argchars.add((byte)((packetId >> 24) & 0xFF));  argchars.add((byte)((packetId >> 16) & 0xFF));  argchars.add((byte)((packetId >> 8) & 0xFF));  argchars.add((byte)((packetId) & 0xFF));  argchars.add((byte)((arguments.size() >> 24) & 0xFF));  argchars.add((byte)((arguments.size() >> 16) & 0xFF));  argchars.add((byte)((arguments.size() >> 8) & 0xFF));  argchars.add((byte)((arguments.size()) & 0xFF));  for (  final DebugMessageArgument argument : arguments) {    argchars.addAll(argument.getBytes());  }  final byte[] ret=new byte[argchars.size()];  for (int i=0; i < argchars.size(); i++) {    ret[i]=argchars.get(i);  }  return ret;}  }
class C{  public GridQueryFieldsResultAdapter(@Nullable List<GridQueryFieldMetadata> metaData,GridCloseableIterator<List<?>> it){  this.metaData=metaData != null ? Collections.unmodifiableList(metaData) : null;  this.it=it;}  }
class C{  private boolean closeInternal(ErrorCode errorCode){  assert (!Thread.holdsLock(this));synchronized (this) {    if (this.errorCode != null) {      return false;    }    if (source.finished && sink.finished) {      return false;    }    this.errorCode=errorCode;    notifyAll();  }  connection.removeStream(id);  return true;}  }
class C{  private void initializeScreen(View rootView){  mListView=(ListView)rootView.findViewById(R.id.list_view_active_lists);}  }
class C{  public static boolean isNullOrEmpty(@Nullable Map<?,?> potentiallyNull){  return potentiallyNull == null || potentiallyNull.isEmpty();}  }
class C{  public static void transformTestSwfToWindow(String fileName,String dir,String prefix2){  String fileContents=readFileIntoString(fileName);  String height=getAttribute(fileName,"mx:Application","height");  String width=getAttribute(fileName,"mx:Application","width");  String addString="";  if (height == null || height.length() == 0)   addString=addString + " height=\"375\"";  if (width == null || width.length() == 0)   addString=addString + " width=\"500\"";  fileContents=fileContents.replaceAll(app_string,replace_string + addString);  fileContents=fileContents.replaceAll(app_string2,replace_string2);  String newFilename=getNewMxmlName(dir,fileName,prefix2);  try {    writeStringToFile(fileContents,newFilename);  } catch (  java.io.FileNotFoundException fnf) {    try {      new File(newFilename).delete();      writeStringToFile(fileContents,newFilename);    } catch (    Exception fnf2) {      fnf2.printStackTrace();    }  }catch (  Exception ee) {    ee.printStackTrace();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void run(){  amIActive=true;  try {    int i, j, progress, oldProgress;    ShapeFileRecord rec;    com.vividsolutions.jts.geom.Geometry jtsGeom;    com.vividsolutions.jts.geom.Geometry[] geomArray;    List<com.vividsolutions.jts.geom.Geometry> geomList=new ArrayList<>();    GeometryFactory factory=new GeometryFactory();    if (args.length != 3) {      showFeedback("Incorrect number of arguments given to tool.");      return;    }    String inputFile=args[0];    String clipFile=args[1];    String outputFile=args[2];    ShapeFile input=new ShapeFile(inputFile);    ShapeType shapeType=input.getShapeType().getBaseType();    ShapeFile clipRegion=new ShapeFile(clipFile);    if (clipRegion.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input clip shapefile must be of a POLYGON base ShapeType.");      return;    }    numFeatures=input.getNumberOfRecords();    AttributeTable table=input.getAttributeTable();    DBFField[] fields=table.getAllFields();    ShapeFile output=new ShapeFile(outputFile,shapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    int numClipFeatures=clipRegion.getNumberOfRecords();    BoundingBox[] clipBoxes=new BoundingBox[numClipFeatures];    for (i=0; i < numClipFeatures; i++) {      rec=clipRegion.getRecord(i);      clipBoxes[i]=rec.getGeometry().getBox();      geomArray=rec.getGeometry().getJTSGeometries();      for (int k=0; k < geomArray.length; k++) {        geomList.add(geomArray[k]);      }    }    com.vividsolutions.jts.geom.Geometry clipGeom=factory.buildGeometry(geomList);    if (!clipGeom.isValid()) {      com.vividsolutions.jts.geom.Geometry jtsGeom2=clipGeom.buffer(0d);      clipGeom=(com.vividsolutions.jts.geom.Geometry)jtsGeom2.clone();    }    ArrayList<DoWork> tasks=new ArrayList<>();    int numProcessors=Runtime.getRuntime().availableProcessors();    ExecutorService executor=Executors.newFixedThreadPool(numProcessors);    oldProgress=-1;    for (i=0; i < numFeatures; i++) {      rec=input.getRecord(i);      BoundingBox box=rec.getGeometry().getBox();      boolean isContained=false;      for (j=0; j < numClipFeatures; j++) {        if (clipBoxes[j].overlaps(box)) {          isContained=true;          break;        }      }      if (isContained) {        geomArray=rec.getGeometry().getJTSGeometries();        geomList.clear();        geomList.addAll(Arrays.asList(geomArray));        jtsGeom=factory.buildGeometry(geomList);        tasks.add(new DoWork(i,jtsGeom,clipGeom,shapeType));      }      progress=(int)(100f * i / (numFeatures - 1));      if (progress != oldProgress) {        updateProgress("Loop 1 of 2:",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    List<Future<WorkData>> results=executor.invokeAll(tasks);    executor.shutdown();    oldProgress=-1;    i=0;    for (    Future<WorkData> result : results) {      WorkData data=result.get();      int recNum=data.recordNum;      List<whitebox.geospatialfiles.shapefile.Geometry> wbGeometries=data.wbGeometries;      for (      whitebox.geospatialfiles.shapefile.Geometry geom : wbGeometries) {        Object[] rowData=table.getRecord(recNum);        output.addRecord(geom,rowData);      }      i++;      progress=(int)(100f * i / (numFeatures - 1));      if (progress != oldProgress) {        updateProgress("Writing Output:",progress);        oldProgress=progress;        if (cancelOp) {          if (!cancelOpMessagePlayed) {            showFeedback("Operation cancelled");          }          return;        }      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static CommandName named(final CommandName parent,final String name,final String descr){  return new NestedCommandNameImpl(parent,name,descr);}  }
class C{  public static GoogleAnalytics analytics(){  return analytics;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.STATE_SPECIFICATION__SCOPE:    setScope((Scope)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public long[] elements(){  return elements;}  }
class C{  public static CachedFile inCache(CachedFile cf){  if (cf == null) {    if (logger.isTraceEnabled())     logger.trace("inCache(cf) - unexpected null parameter");    return null;  }  CachedFile cf_result=cachedFilesMap.get(cf.getPath());  if (logger.isTraceEnabled())   logger.trace("inCache=" + (cf_result != null) + ": "+ cf.getPath());  return cf_result;}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=table.length;  int oldTable[]=table;  int oldValues[]=values;  byte oldState[]=state;  int newTable[]=new int[newCapacity];  int newValues[]=new int[newCapacity];  byte newState[]=new byte[newCapacity];  this.lowWaterMark=chooseLowWaterMark(newCapacity,this.minLoadFactor);  this.highWaterMark=chooseHighWaterMark(newCapacity,this.maxLoadFactor);  this.table=newTable;  this.values=newValues;  this.state=newState;  this.freeEntries=newCapacity - this.distinct;  for (int i=oldCapacity; i-- > 0; ) {    if (oldState[i] == FULL) {      int element=oldTable[i];      int index=indexOfInsertion(element);      newTable[index]=element;      newValues[index]=oldValues[i];      newState[index]=FULL;    }  }}  }
class C{  public void skipBytes(long length) throws IOException {  long skipped=0;  while (skipped < length) {    int val=in.read();    if (val < 0) {      throw new IOException("Unexpected end of input");    }    skipped++;  }  bytesRead+=length;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.GENERATOR_MODEL__ENTRIES:    getEntries().clear();  getEntries().addAll((Collection<? extends GeneratorEntry>)newValue);return;case SGenPackage.GENERATOR_MODEL__GENERATOR_ID:setGeneratorId((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Set<String> loadAllReachedAchievementsOfPlayer(String playerName) throws SQLException {  DBTransaction transaction=TransactionPool.get().beginWork();  Set<String> set=loadAllReachedAchievementsOfPlayer(transaction,playerName);  TransactionPool.get().commit(transaction);  return set;}  }
class C{  public void testStartStopContainer() throws Exception {  WebClient webClient=new WebClient();  HtmlPage htmlPage=webClient.getPage(CargoDaemonDeployableTest.daemonUrl);  assertFalse("There should be no running containers",htmlPage.asText().contains("started"));  ((HtmlTextInput)htmlPage.getElementByName("handleId")).setText("test1");  ((HtmlSelect)htmlPage.getElementByName("containerId")).getOptionByText("jetty7x").setSelected(true);  File jetty7x=new File(System.getProperty("artifacts.dir"),"jetty7x.zip");  assertTrue("File " + jetty7x + " is missing",jetty7x.isFile());  ((HtmlTextInput)htmlPage.getElementByName("installerZipUrl")).setText(jetty7x.toURI().toURL().toString());  File configurationDirectory=new File(System.getProperty("daemon.test-configurations.home"));  assertFalse("Directory " + configurationDirectory + " already exists",configurationDirectory.isDirectory());  ((HtmlTextInput)htmlPage.getElementByName("configurationHome")).setText(configurationDirectory.getAbsolutePath());  htmlPage.getElementById("addConfigurationPropertyButton").click();  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyKey_0")).setText(ServletPropertySet.PORT);  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyValue_0")).setText(System.getProperty("servlet.port"));  htmlPage.getElementById("addConfigurationPropertyButton").click();  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyKey_1")).setText(GeneralPropertySet.RMI_PORT);  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyValue_1")).setText(System.getProperty("rmi.port"));  htmlPage.getElementById("submitButton").click();  DeployableMonitor daemonMonitor=new URLDeployableMonitor(new URL("http://localhost:" + System.getProperty("servlet.port") + "/cargocpc/index.html"),CargoDaemonDeployableTest.TIMEOUT);  DeployerWatchdog daemonWatchdog=new DeployerWatchdog(daemonMonitor);  daemonWatchdog.watchForAvailability();  webClient.closeAllWindows();  htmlPage=webClient.getPage(CargoDaemonDeployableTest.daemonUrl);  HtmlElement stopButton=htmlPage.getElementById("stopContainer_test1");  assertNotNull("Container stop button did not appear. Current content: " + htmlPage.asText(),stopButton);  assertTrue("There should be running containers",htmlPage.asText().contains("started"));  stopButton.click();  daemonWatchdog.watchForUnavailability();  webClient.closeAllWindows();  htmlPage=webClient.getPage(CargoDaemonDeployableTest.daemonUrl);  assertFalse("There should be no running containers",htmlPage.asText().contains("started"));}  }
class C{  public static PreProcessor expandListKeys(){  return expandListKeys(null);}  }
class C{  private boolean requiresBadge(){  return !mBackgroundDisabled && (mTrustLevel != TRUST_UNKNOWN || mBadgeHasCertIssues || mBadgeBlockedObjectsCount > 0);}  }
class C{  public void stop(){  if (getModel().isRunning()) {    Job[] runningSpecJobs=Job.getJobManager().find(getModel().getLaunchConfiguration());    for (int i=0; i < runningSpecJobs.length; i++) {      runningSpecJobs[i].cancel();    }  }}  }
class C{  void trace(String s){  if (trace) {    System.out.println(s);  }}  }
class C{  private boolean isCollapsedGroupNode(final INaviViewNode node){  return (node instanceof INaviGroupNode) && ((INaviGroupNode)node).isCollapsed();}  }
class C{  protected void addSea(Group bg,MapHandler mh){  MapBean map=(MapBean)mh.get("com.bbn.openmap.MapBean");  if (map != null) {    Debug.message("3d","LayerMapContent: putting down sea.");    Color seaColor=map.getBackground();    Projection proj=map.getProjection();    int width=proj.getWidth();    int height=proj.getHeight();    java.awt.geom.GeneralPath background=OMGraphicAdapter.createBoxShape(-width,-height,width * 3,height * 3);    addTo(bg,OMGraphicUtil.createShape3D(background,0,seaColor,true));  }}  }
class C{  public double eval(double params[]){  return (params[0] * params[0]);}  }
class C{  public void removePanListener(PanListener listener){  if (mPan != null) {    mPan.removePanListener(listener);  }}  }
class C{  public static int computeEnumSize(final int fieldNumber,final int value){  return computeTagSize(fieldNumber) + computeEnumSizeNoTag(value);}  }
class C{  public UtilityTable queryUtil(Collection<String> variables){  try {    return new SwitchingAlgorithm().queryUtil(this,variables,evidence);  } catch (  Exception e) {    log.warning("cannot perform inference: " + e);    return new UtilityTable();  }}  }
class C{  public static void shuffle(List<?> list){  shuffle(list,new java.util.Random());}  }
class C{  public static void fill(char[] array,int start,int end,char value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void writeReport(BenchInfo[] binfo,Properties props) throws IOException {  PrintStream p=new PrintStream(out);  p.println("<REPORT>");  p.println("<NAME>" + title + "</NAME>");  p.println("<DATE>" + new Date() + "</DATE>");  p.println("<VERSION>" + props.getProperty("java.version") + "</VERSION>");  p.println("<VENDOR>" + props.getProperty("java.vendor") + "</VENDOR>");  p.println("<DIRECTORY>" + props.getProperty("java.home") + "</DIRECTORY>");  String vmName=props.getProperty("java.vm.name");  String vmInfo=props.getProperty("java.vm.info");  String vmString=(vmName != null && vmInfo != null) ? vmName + " " + vmInfo : "Undefined";  p.println("<VM_INFO>" + vmString + "</VM_INFO>");  p.println("<OS>" + props.getProperty("os.name") + " version "+ props.getProperty("os.version")+ "</OS>");  p.println("<BIT_DEPTH>" + Toolkit.getDefaultToolkit().getColorModel().getPixelSize() + "</BIT_DEPTH>");  p.println();  p.println("<DATA RUNS=\"" + 1 + "\" TESTS=\""+ binfo.length+ "\">");  for (int i=0; i < binfo.length; i++) {    BenchInfo b=binfo[i];    String score=(b.getTime() != -1) ? Double.toString(b.getTime() * b.getWeight()) : "-1";    p.println(b.getName() + "\t" + score);  }  p.println("</DATA>");  p.println("</REPORT>");}  }
class C{  public static void handleNetworkUpdated(Network network,Collection<URI> addVarrays,Collection<URI> remVarray,Collection<String> addEps,Collection<String> remEps,DbClient dbClient,CoordinatorClient coordinator){  List<StoragePort> remPorts=getEndPointsStoragePorts(remEps,dbClient);  if (!remPorts.isEmpty()) {    clearPortAssociations(remPorts,dbClient);  }  List<StoragePort> addPorts=getEndPointsStoragePorts(addEps,dbClient);  if (!addPorts.isEmpty()) {    updatePortAssociations(network,addPorts,dbClient);  }  List<StoragePort> createdAndUpdatedPorts=new ArrayList<StoragePort>(addPorts);  if ((addVarrays != null && !addVarrays.isEmpty()) || (remVarray != null && !remVarray.isEmpty())) {    List<StoragePort> updatedPorts=getNetworkStoragePorts(network.getId().toString(),addEps,dbClient);    createdAndUpdatedPorts.addAll(updatedPorts);    updatePortAssociations(network,updatedPorts,dbClient);  }  if (!remPorts.isEmpty() || (addVarrays != null && !addVarrays.isEmpty()) || (remVarray != null && !remVarray.isEmpty())) {    setNetworkConnectedVirtualArrays(network,true,dbClient);  } else   if (!addPorts.isEmpty()) {    updateConnectedVirtualArrays(network,addPorts,true,dbClient);  }  StoragePoolAssociationHelper.handleNetworkUpdated(network,addVarrays,remVarray,createdAndUpdatedPorts,remPorts,dbClient,coordinator);  StoragePortAssociationHelper.runUpdateVirtualNasAssociationsProcess(addPorts,remPorts,dbClient);}  }
class C{  protected Future<?> executeOnPooledThread(Runnable task){  return ExecutorServiceHolder.ourThreadExecutorsService.submit(task);}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKey02(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    try {      TestDataGenerator g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfoDamaged,null);      EncryptedPrivateKeyInfo epki;      if (g.ap() == null) {        epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());      } else {        epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());      }      try {        epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK());        fail(algName[i][0] + ", " + algName[i][1]);      } catch (      InvalidKeyException e) {      }      performed=true;    } catch (    TestDataGenerator.AllowedFailure allowedFailure) {    }catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public static <T>T max(Iterable<T> items){  T answer=null;  for (  T value : items) {    if (value != null) {      if (answer == null || ScriptBytecodeAdapter.compareGreaterThan(value,answer)) {        answer=value;      }    }  }  return answer;}  }
class C{  public static void serializeDouble(double valD,byte[] buffer,MutableInt offset){  long val=Double.doubleToLongBits(valD);  int offsetInt=offset.intValue();  buffer[0 + offsetInt]=(byte)((val >> 56) & 0xFFL);  buffer[1 + offsetInt]=(byte)((val >> 48) & 0xFFL);  buffer[2 + offsetInt]=(byte)((val >> 40) & 0xFFL);  buffer[3 + offsetInt]=(byte)((val >> 32) & 0xFFL);  buffer[4 + offsetInt]=(byte)((val >> 24) & 0xFFL);  buffer[5 + offsetInt]=(byte)((val >> 16) & 0xFFL);  buffer[6 + offsetInt]=(byte)((val >> 8) & 0xFFL);  buffer[7 + offsetInt]=(byte)(val & 0xFFL);  offset.add(Type.DOUBLE.getByteSize());}  }
class C{  public void updateMktDepth(int tickerId,int position,int operation,int side,double price,int size){  _log.debug("updateMktDepth: " + tickerId + " "+ position+ " "+ operation+ " "+ side+ " "+ price+ " "+ size);}  }
class C{  @Override protected AbstractFactory newFactory(){  return new FileChooserBookmarksFactory();}  }
class C{  protected Timeout deploymentTimeout(){  return new Timeout(12,5000);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:20.684 -0500",hash_original_method="062C10606C6763A75AEC213E65863835",hash_generated_method="2A1BDF8455F53C3793A6BB8693DAE109") public void onRemoteAdapterDisconnected(){}  }
class C{  public void testNonFinalBean() throws Exception {  ObjectMapper m=new ObjectMapper();  m.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);  StringBean bean=new StringBean("x");  assertEquals("{\"name\":\"x\"}",m.writeValueAsString(bean));  m=new ObjectMapper();  m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);  assertEquals("[\"" + StringBean.class.getName() + "\",{\"name\":\"x\"}]",m.writeValueAsString(bean));}  }
class C{  public static Bitmap roundBitMap(Bitmap bitmap){  Bitmap circleBitmap=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),Config.ARGB_8888);  BitmapShader shader=new BitmapShader(bitmap,TileMode.CLAMP,TileMode.CLAMP);  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);  paint.setShader(shader);  Canvas c=new Canvas(circleBitmap);  c.drawCircle(bitmap.getWidth() / 2,bitmap.getHeight() / 2,bitmap.getWidth() / 2,paint);  return circleBitmap;}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  private Method createAccess(String memberName,String subjectExpression){  Method result=null;switch (memberType) {case FIELD:    result=new Method("accessor").setBody("var t = " + subjectExpression + "."+ memberName+ "; t = t;");  break;case GETTER:result=new Method("accessor").setBody("var t = " + subjectExpression + "."+ memberName+ "; t = t;");break;case SETTER:result=new Method("accessor").setBody("" + subjectExpression + "."+ memberName+ " = null;");break;case METHOD:result=new Method("accessor").setBody("" + subjectExpression + "."+ memberName+ "();");break;default :throw new IllegalArgumentException("Unknown member type: " + memberType);}if (specification.getMemberStatic() == Member.Static.YES) result.makeStatic();return result;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("X509CollectionStoreParameters: [\n");  sb.append("  collection: " + collection + "\n");  sb.append("]");  return sb.toString();}  }
class C{  @RequestProcessing(value="/users/reset-unverified",method=HTTPRequestMethod.GET) public void resetUnverifiedUsers(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String key=Symphonys.get("keyOfSymphony");  if (!key.equals(request.getParameter("key"))) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  userMgmtService.resetUnverifiedUsers();  context.renderJSON().renderTrueResult();}  }
class C{  public SubMapImpl(FastMap<K,V> inner,K from,Boolean fromInclusive,K to,Boolean toInclusive){  this.inner=inner;  this.from=from;  this.fromInclusive=fromInclusive;  this.to=to;  this.toInclusive=toInclusive;}  }
class C{  static <T extends LifecycleObserver>boolean call(Fragment fragment,Class<T> lifecycleClazz,Object... parameters){  boolean shouldCallSuper=true;  List<GeneralController> controllers=FRAGMENT_CONTROLLER_MAP.get(fragment);  if (null != controllers) {    for (    Controller controller : controllers) {      shouldCallSuper=shouldCallSuper && checkAndCall(lifecycleClazz,controller,parameters);      callControllerPlugins(lifecycleClazz,controller,parameters);    }  }  if (OnDestroyView.class.equals(lifecycleClazz) || OnDestroy.class.equals(lifecycleClazz)) {    FRAGMENT_CONTROLLER_MAP.remove(fragment);  }  for (  PanLifecyclePlugin plugin : PAN_PLUGINS) {    try {      plugin.onFragmentLifecycle(fragment,lifecycleClazz,parameters);    } catch (    Throwable e) {      LOG.error("wtf! Your plugin is shit!",e);    }  }  return shouldCallSuper;}  }
class C{  public static void checkLoaded(Object entity,String... properties){  Objects.requireNonNull(entity);  for (  String property : properties) {    if (!isLoaded(entity,property)) {      String errorMessage=String.format("%s.%s is not loaded",entity.getClass().getSimpleName(),property);      throw new IllegalArgumentException(errorMessage);    }  }}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Compute broadcast example started.");    hello(ignite);    gatherSystemInfo(ignite);  } }  }
class C{  public Loan(double annualInterestRate,int numberOfYears,double loanAmount){  this.annualInterestRate=annualInterestRate;  this.numberOfYears=numberOfYears;  this.loanAmount=loanAmount;  loanDate=new java.util.Date();}  }
class C{  static MqttConfig newConfig(Options options){  MqttConfig config=new MqttConfig(options.get(OPT_SERVER_URI),options.get(OPT_CLIENT_ID));  if (options.get(OPT_CLEAN_SESSION) != null)   config.setCleanSession(options.get(OPT_CLEAN_SESSION));  if (options.get(OPT_CN_TIMEOUT_SEC) != null)   config.setConnectionTimeout(options.get(OPT_CN_TIMEOUT_SEC));  if (options.get(OPT_ACTION_TIMEOUT_MILLIS) != null)   config.setActionTimeToWaitMillis(options.get(OPT_ACTION_TIMEOUT_MILLIS));  if (options.get(OPT_IDLE_TIMEOUT_SEC) != null)   config.setIdleTimeout(options.get(OPT_IDLE_TIMEOUT_SEC));  if (options.get(OPT_IDLE_RECONNECT_INTERVAL_SEC) != null)   config.setSubscriberIdleReconnectInterval(options.get(OPT_IDLE_RECONNECT_INTERVAL_SEC));  if (options.get(OPT_USER_ID) != null)   config.setUserName(options.get(OPT_USER_ID));  if (options.get(OPT_PASSWORD) != null)   config.setPassword(((String)options.get(OPT_PASSWORD)).toCharArray());  return config;}  }
class C{  public void testFollowerSetsTermOnPollRequest() throws Throwable {  runOnServer(null);}  }
class C{  @SuppressWarnings("unchecked") private V report(int s) throws ExecutionException {  Object x=outcome;  if (s == NORMAL)   return (V)x;  if (s >= CANCELLED)   throw new CancellationException();  throw new ExecutionException((Throwable)x);}  }
class C{  @Override public int add(E element,int occurrences){  if (occurrences == 0) {    return count(element);  }  checkArgument(occurrences > 0,"Invalid occurrences: %s",occurrences);  while (true) {    int current=count(element);    if (current == 0) {      if (countMap.putIfAbsent(element,occurrences) == null) {        return 0;      }    } else {      checkArgument(occurrences <= Integer.MAX_VALUE - current,"Overflow adding %s occurrences to a count of %s",occurrences,current);      int next=current + occurrences;      if (countMap.replace(element,current,next)) {        return current;      }    }  }}  }
class C{  public boolean equals(AlgorithmId other){  boolean paramsEqual=(params == null ? other.params == null : params.equals(other.params));  return (algid.equals((Object)other.algid) && paramsEqual);}  }
class C{  public static void clickButtonByLabel(String text){  if (verbose) {    log("clickButtonByLabel(" + text + ")");  }  Button b=(Button)findLabelText(text);  waitFor(20);  b.pressed();  waitFor(20);  b.released();  waitFor(20);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  public void removeAllActions(){  for (ConcurrentArrayHashMap<CCNode,HashElement>.Entry e=targets.firstValue(); e != null; e=targets.nextValue(e)) {    HashElement element=e.getValue();    if (element != null)     removeAllActions(element.target);  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if ((argNum < 1) || (argNum > 2))   reportWrongNumberArgs();}  }
class C{  @Override public boolean isMovable(){  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.TYPE_REF_ANNOTATION_ARGUMENT;}  }
class C{  public int size(){  purgeBeforeRead();  return super.size();}  }
class C{  public boolean isCompleted(){  return isCompleted;}  }
class C{  private static String buildTestURL(){  GDSType gdsType=FBTestProperties.getGdsType();  try {    return GDSFactory.getJdbcUrl(gdsType,GDSFactory.getDatabasePath(gdsType,NON_EXISTENT_IP,null,"db"));  } catch (  GDSException e) {    fail("Unable to generate testURL");  }  return null;}  }
class C{  public ReadRequest(int objectId,int objectInstanceId){  this(null,new LwM2mPath(objectId,objectInstanceId));}  }
class C{  public static JSONObject processResponse(HttpResponse<String> response){  if (response != null) {    if (response.getStatus() == 200) {      try {        return new JSONObject(response.getBody());      } catch (      JSONException e) {        System.err.println("The API didn't return a JSON response. The actual response was " + response.getBody());      }    } else {      JSONObject jsonResponse=null;      try {        jsonResponse=new JSONObject(response.getBody());      } catch (      JSONException e) {      }      if (jsonResponse != null) {        System.err.println("The API returned the following error: " + jsonResponse.getString("description"));      } else {        System.err.println("The API returned error code " + response.getStatus());      }    }  }  return null;}  }
class C{  static PageDataLeaf create(PageDataIndex index,int pageId,int parentPageId){  PageDataLeaf p=new PageDataLeaf(index,pageId,index.getPageStore().createData());  index.getPageStore().logUndo(p,null);  p.rows=Row.EMPTY_ARRAY;  p.parentPageId=parentPageId;  p.columnCount=index.getTable().getColumns().length;  p.writeHead();  p.start=p.data.length();  return p;}  }
class C{  public void clearWarnings() throws SQLException {  checkClosed();  try {    this.mc.clearWarnings();  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }}  }
class C{  public void testTwoExecutionsWithDifferentConfigurationsInProject() throws Exception {  Map<String,org.codehaus.cargo.container.Container> context=new HashMap<String,org.codehaus.cargo.container.Container>();  setUpMojo(InstalledLocalContainerStub.class,InstalledLocalContainerStub.ID,StandaloneLocalConfigurationStub.class);  this.mojo.setPluginContext(context);  this.mojo.setCargoProject(createTestCargoProject("pom"));  this.mojo.getConfigurationElement().setProperties(new HashMap<String,String>());  this.mojo.getConfigurationElement().getProperties().put("foo","bar");  this.mojo.execute();  assertEquals(1,context.size());  Iterator<org.codehaus.cargo.container.Container> iter=context.values().iterator();  org.codehaus.cargo.container.Container container=iter.next();  assertEquals("bar",((LocalContainer)container).getConfiguration().getPropertyValue("foo"));  this.mojo.getConfigurationElement().getProperties().put("foo","qux");  this.mojo.execute();  assertEquals(1,context.size());  iter=context.values().iterator();  container=iter.next();  assertEquals("qux",((LocalContainer)container).getConfiguration().getPropertyValue("foo"));}  }
class C{  @Override public void U(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.U()");  }  javascript.execute(formObj,PdfDictionary.U,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  public static int binarySearch(double[] array,double value){  return binarySearch(array,0,array.length,value);}  }
class C{  public SmartJList(SmartJListItem[] listData){  super(listData);  this.init();}  }
class C{  @Override public SortBuilder missing(Object missing){  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.DBG)   System.out.println("Cancelling current file copy operation.");  FileTransfer.getFileTransfer(stack.getUIMgrSafe()).cancel();  return null;}  }
class C{  public void initialize(){  final HandlerThread backgroundThread=new HandlerThread(BACKGROUND_THREAD_NAME);  backgroundThread.start();  mBackgroundHandler=new Handler(backgroundThread.getLooper());  mImsModule.initialize();}  }
class C{  private void initParameterInvisibleSet(){  if (inVisibleProductKeys == null || inVisibleProductKeys.isEmpty()) {    parameterInvisibleSet=false;  } else {    parameterInvisibleSet=true;  }}  }
class C{  public Element store(Object o){  Element routes=new Element("routes");  setStoreElementClass(routes);  RouteManager tm=(RouteManager)o;  if (tm != null) {    java.util.Iterator<String> iter=tm.getSystemNameList().iterator();    if (!iter.hasNext()) {      return null;    }    while (iter.hasNext()) {      String sname=iter.next();      if (sname == null) {        log.error("System name null during store");        break;      }      log.debug("system name is " + sname);      Route r=tm.getBySystemName(sname);      String cTurnout=r.getControlTurnout();      int addedDelay=r.getRouteCommandDelay();      boolean routeLocked=r.getLocked();      String cLockTurnout=r.getLockControlTurnout();      Element elem=new Element("route").setAttribute("systemName",sname);      elem.addContent(new Element("systemName").addContent(sname));      storeCommon(r,elem);      if (cTurnout != null && !cTurnout.equals("")) {        elem.setAttribute("controlTurnout",cTurnout);        int state=r.getControlTurnoutState();        if (state == Route.ONTHROWN) {          elem.setAttribute("controlTurnoutState","THROWN");        } else         if (state == Route.ONCHANGE) {          elem.setAttribute("controlTurnoutState","CHANGE");        } else         if (state == Route.VETOCLOSED) {          elem.setAttribute("controlTurnoutState","VETOCLOSED");        } else         if (state == Route.VETOTHROWN) {          elem.setAttribute("controlTurnoutState","VETOTHROWN");        } else {          elem.setAttribute("controlTurnoutState","CLOSED");        }      }      if (cLockTurnout != null && !cLockTurnout.equals("")) {        elem.setAttribute("controlLockTurnout",cLockTurnout);        int state=r.getLockControlTurnoutState();        if (state == Route.ONTHROWN) {          elem.setAttribute("controlLockTurnoutState","THROWN");        } else         if (state == Route.ONCHANGE) {          elem.setAttribute("controlLockTurnoutState","CHANGE");        } else {          elem.setAttribute("controlLockTurnoutState","CLOSED");        }      }      if (addedDelay > 0) {        elem.setAttribute("addedDelay",Integer.toString(addedDelay));      }      if (routeLocked) {        elem.setAttribute("routeLocked","True");      }      int index=0;      String rTurnout=null;      while ((rTurnout=r.getOutputTurnoutByIndex(index)) != null) {        Element rElem=new Element("routeOutputTurnout").setAttribute("systemName",rTurnout);        String sState="CLOSED";        if (r.getOutputTurnoutSetState(rTurnout) == Turnout.THROWN) {          sState="THROWN";        } else         if (r.getOutputTurnoutSetState(rTurnout) == Route.TOGGLE) {          sState="TOGGLE";        }        rElem.setAttribute("state",sState);        elem.addContent(rElem);        index++;      }      index=0;      String rSensor=null;      while ((rSensor=r.getOutputSensorByIndex(index)) != null) {        Element rElem=new Element("routeOutputSensor").setAttribute("systemName",rSensor);        String sState="INACTIVE";        if (r.getOutputSensorSetState(rSensor) == Sensor.ACTIVE) {          sState="ACTIVE";        } else         if (r.getOutputSensorSetState(rSensor) == Route.TOGGLE) {          sState="TOGGLE";        }        rElem.setAttribute("state",sState);        elem.addContent(rElem);        index++;      }      index=0;      while ((rSensor=r.getRouteSensorName(index)) != null) {        Element rsElem=new Element("routeSensor").setAttribute("systemName",rSensor);        int mode=r.getRouteSensorMode(index);        String modeName;switch (mode) {case Route.ONACTIVE:          modeName="onActive";        break;case Route.ONINACTIVE:      modeName="onInactive";    break;case Route.ONCHANGE:  modeName="onChange";break;case Route.VETOACTIVE:modeName="vetoActive";break;case Route.VETOINACTIVE:modeName="vetoInactive";break;default :modeName=null;}if (modeName != null) {rsElem.setAttribute("mode",modeName);}elem.addContent(rsElem);index++;}if (r.getOutputSoundName() != null && !r.getOutputSoundName().equals("")) {Element rsElem=new Element("routeSoundFile").setAttribute("name",jmri.util.FileUtil.getPortableFilename(new java.io.File(r.getOutputSoundName())));elem.addContent(rsElem);}if (r.getOutputScriptName() != null && !r.getOutputScriptName().equals("")) {Element rsElem=new Element("routeScriptFile").setAttribute("name",jmri.util.FileUtil.getPortableFilename(new java.io.File(r.getOutputScriptName())));elem.addContent(rsElem);}if (!r.getTurnoutsAlignedSensor().equals("")) {Element rsElem=new Element("turnoutsAlignedSensor").setAttribute("name",r.getTurnoutsAlignedSensor());elem.addContent(rsElem);}log.debug("store route " + sname);routes.addContent(elem);}}return routes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.491 -0500",hash_original_method="261AEA0DB1968E370C4ADDBA675B5E74",hash_generated_method="3E38F4A58EB3BB7BBD86891532297B8F") protected final void deferMessage(Message msg){  mSmHandler.deferMessage(msg);}  }
class C{  protected SVGOMFontFaceElement(){}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:39.943 -0500",hash_original_method="E253F133593C4FA5CC62D333761B1C94",hash_generated_method="24E27C826C46B023BB99412DF746179B") protected RoutedRequest handleResponse(RoutedRequest roureq,HttpResponse response,HttpContext context) throws HttpException, IOException {  HttpRoute route=roureq.getRoute();  HttpHost proxy=route.getProxyHost();  RequestWrapper request=roureq.getRequest();  HttpParams params=request.getParams();  if (HttpClientParams.isRedirecting(params) && this.redirectHandler.isRedirectRequested(response,context)) {    if (redirectCount >= maxRedirects) {      throw new RedirectException("Maximum redirects (" + maxRedirects + ") exceeded");    }    redirectCount++;    URI uri=this.redirectHandler.getLocationURI(response,context);    HttpHost newTarget=new HttpHost(uri.getHost(),uri.getPort(),uri.getScheme());    HttpGet redirect=new HttpGet(uri);    HttpRequest orig=request.getOriginal();    redirect.setHeaders(orig.getAllHeaders());    RequestWrapper wrapper=new RequestWrapper(redirect);    wrapper.setParams(params);    HttpRoute newRoute=determineRoute(newTarget,wrapper,context);    RoutedRequest newRequest=new RoutedRequest(wrapper,newRoute);    if (this.log.isDebugEnabled()) {      this.log.debug("Redirecting to '" + uri + "' via "+ newRoute);    }    return newRequest;  }  CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);  if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {    if (this.targetAuthHandler.isAuthenticationRequested(response,context)) {      HttpHost target=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);      if (target == null) {        target=route.getTargetHost();      }      this.log.debug("Target requested authentication");      Map<String,Header> challenges=this.targetAuthHandler.getChallenges(response,context);      try {        processChallenges(challenges,this.targetAuthState,this.targetAuthHandler,response,context);      } catch (      AuthenticationException ex) {        if (this.log.isWarnEnabled()) {          this.log.warn("Authentication error: " + ex.getMessage());          return null;        }      }      updateAuthState(this.targetAuthState,target,credsProvider);      if (this.targetAuthState.getCredentials() != null) {        return roureq;      } else {        return null;      }    } else {      this.targetAuthState.setAuthScope(null);    }    if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {      this.log.debug("Proxy requested authentication");      Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);      try {        processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);      } catch (      AuthenticationException ex) {        if (this.log.isWarnEnabled()) {          this.log.warn("Authentication error: " + ex.getMessage());          return null;        }      }      updateAuthState(this.proxyAuthState,proxy,credsProvider);      if (this.proxyAuthState.getCredentials() != null) {        return roureq;      } else {        return null;      }    } else {      this.proxyAuthState.setAuthScope(null);    }  }  return null;}  }
class C{  private static void writeJson() throws IOException {  JsonObject rootObject=new JsonObject();  rootObject.addProperty("message","Hi");  JsonObject childObject=new JsonObject();  childObject.addProperty("name","World!");  rootObject.add("place",childObject);  Gson gson=new Gson();  String json=gson.toJson(rootObject);  System.out.println(json);}  }
class C{  public synchronized int search(Object o){  final Object[] dumpArray=elementData;  final int size=elementCount;  if (o != null) {    for (int i=size - 1; i >= 0; i--) {      if (o.equals(dumpArray[i])) {        return size - i;      }    }  } else {    for (int i=size - 1; i >= 0; i--) {      if (dumpArray[i] == null) {        return size - i;      }    }  }  return -1;}  }
class C{  public static Bitmap takeScreenshotBitmap(Activity activity){  if (activity == null) {    throw new IllegalArgumentException("Parameter activity cannot be null.");  }  try {    return takeBitmapUnchecked(activity);  } catch (  Exception e) {    String message="Unable to take screenshot to bitmap of activity " + activity.getClass().getName();    Log.e(TAG,message,e);    throw new UnableToTakeScreenshotException(message,e);  }}  }
class C{  @Override public void paintBarShadow(final Graphics2D g2,final BarRenderer renderer,final int row,final int column,final RectangularShape bar,final RectangleEdge base,final boolean pegShadow){}  }
class C{  public XPathExpressionException(String message){  super(message);}  }
class C{  public void testWrongNotPublic() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",getClass().getDeclaredMethod("nonPublicMethod"));  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("not public"));}  }
class C{  private Element findNextDeclaredElement(){  if (metadataIterator != null) {    while (metadataIterator.hasNext()) {      ElementKey<?,?> nextKey=metadataIterator.next();      if (ElementCreatorImpl.ELEMENT_MARKER == nextKey) {        mode=Mode.UNDECLARED;        return null;      }      ElementMetadata<?,?> childMeta=metadata.bindElement(nextKey);      if (!childMeta.isVisible()) {        continue;      }      SingleVirtualElement singleVirtual=childMeta.getSingleVirtualElement();      if (singleVirtual != null) {        Element generated=singleVirtual.generateSingle(element,metadata,childMeta);        if (generated != null) {          return generated;        }      }      MultipleVirtualElement multipleVirtual=childMeta.getMultipleVirtualElement();      if (multipleVirtual != null) {        Collection<? extends Element> virtualElements=multipleVirtual.generateMultiple(element,metadata,childMeta);        if (virtualElements != null && !virtualElements.isEmpty()) {          sublistIterator=virtualElements.iterator();          return sublistIterator.next();        }      }      Object obj=getElementObject(nextKey.getId());      Element first=firstElement(obj);      if (first != null) {        return first;      }    }    metadataIterator=null;  }  mode=Mode.UNDECLARED;  return null;}  }
class C{  @DSComment("Wifi subsystem") @DSSpec(DSCat.WIFI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.304 -0500",hash_original_method="C55861B25E581745B3C6351405363685",hash_generated_method="52E9B106CCE0D358D6536E73B2D2D055") public boolean removeNetwork(int netId){  try {    return mService.removeNetwork(netId);  } catch (  RemoteException e) {    return false;  }}  }
class C{  private static String findNon(String dir){  File d=new File(dir);  String[] x=new String[]{"foo","bar","baz"};  for (int i=0; i < x.length; i++) {    File f=new File(d,x[i]);    if (!f.exists()) {      return x[i];    }  }  for (int i=0; i < 1024; i++) {    String n="xx" + Integer.toString(i);    File f=new File(d,n);    if (!f.exists()) {      return n;    }  }  throw new RuntimeException("Can't find a non-existent file in " + dir);}  }
class C{  public static MgmtTarget toResponse(final Target target){  if (target == null) {    return null;  }  final MgmtTarget targetRest=new MgmtTarget();  targetRest.setControllerId(target.getControllerId());  targetRest.setDescription(target.getDescription());  targetRest.setName(target.getName());  targetRest.setUpdateStatus(getUpdateStatusName(target.getTargetInfo().getUpdateStatus()));  final URI address=target.getTargetInfo().getAddress();  if (address != null) {    if (IpUtil.isIpAddresKnown(address)) {      targetRest.setIpAddress(address.getHost());    }    targetRest.setAddress(address.toString());  }  targetRest.setCreatedBy(target.getCreatedBy());  targetRest.setLastModifiedBy(target.getLastModifiedBy());  targetRest.setCreatedAt(target.getCreatedAt());  targetRest.setLastModifiedAt(target.getLastModifiedAt());  targetRest.setSecurityToken(target.getSecurityToken());  final Long lastTargetQuery=target.getTargetInfo().getLastTargetQuery();  final Long installationDate=target.getTargetInfo().getInstallationDate();  if (lastTargetQuery != null) {    targetRest.setLastControllerRequestAt(lastTargetQuery);  }  if (installationDate != null) {    targetRest.setInstalledAt(installationDate);  }  targetRest.add(linkTo(methodOn(MgmtTargetRestApi.class).getTarget(target.getControllerId())).withRel("self"));  return targetRest;}  }
class C{  public void testStringMissingFacet() throws Exception {  assertU(adoc("id","0"));  assertU(adoc("id","1"));  assertU(adoc("id","2","stringdv","a"));  assertU(adoc("id","3","stringdv","z"));  assertU(commit());  assertQ(req("q","*:*","facet","true","facet.field","stringdv","facet.mincount","1","facet.missing","true"),"//lst[@name='facet_fields']/lst[@name='stringdv']/int[@name='a'][.=1]","//lst[@name='facet_fields']/lst[@name='stringdv']/int[@name='z'][.=1]","//lst[@name='facet_fields']/lst[@name='stringdv']/int[.=2]");}  }
class C{  public boolean isReferenceDataIntact(){  return referenceDataIntact;}  }
class C{  public Vector3f mult(float scalar){  return new Vector3f(x * scalar,y * scalar,z * scalar);}  }
class C{  public static void show(final String commandAlias,final Display display) throws UnknownCommandException {  Check.notNull(commandsMap,"commandsMap");  Command c=null;  if (commandAlias != null) {    c=commandsMap.findCommand(commandAlias);    if (c == null) {      throw new UnknownCommandException(commandAlias);    }  }  Help.show(c,display);}  }
class C{  private static String toString(final ISPO spo){  return (SPO.toString(spo.s()) + ":" + SPO.toString(spo.p())+ ":"+ SPO.toString(spo.o()));}  }
class C{  public static String fromUnixTime(int seconds){  SimpleDateFormat formatter=new SimpleDateFormat(DATE_TIME_FORMAT,Locale.ENGLISH);  return formatter.format(new Date(seconds * 1000L));}  }
class C{  static public void fail(String message){  throw new AssertionFailedError(message);}  }
class C{  public final int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){  ContentProviderClient contentProviderClient=null;  try {    contentProviderClient=mContentResolver.acquireContentProviderClient(uri);    return contentProviderClient.getLocalContentProvider().update(uri,values,selection,selectionArgs);  }  finally {    if (contentProviderClient != null) {      contentProviderClient.release();    }  }}  }
class C{  public ExecutionError(@Nullable Error cause){  super(cause);}  }
class C{  public void paint(Graphics2D g2,Node node,Justification justification,Shape barShape){  if (barShape != null) {    Stroke stroke=getStroke();    Shape strokedOutline=stroke.createStrokedShape(barShape);    g2.setPaint(getForeground());    g2.fill(strokedOutline);    g2.setPaint(Color.black);    g2.setStroke(new BasicStroke(0.5F));    g2.draw(strokedOutline);  }}  }
class C{  public int isValid(char[] data,int offset){  char firstchar=data[offset];  int cc=this.charClass(firstchar);  if (cc != CharacterClass.alphanumeric.ordinal())   return -1; else {switch (firstchar) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      return -1;  }}for (int i=offset + 1; i < data.length; i++) {  char it=data[i];  int charclass=this.charClass(it);  if (charclass == CharacterClass.illegal.ordinal()) {    return -1;  } else   if (charclass == CharacterClass.space.ordinal()) {    return i;  } else {    statemachine[state][charclass].process(it);    if (bad)     return -1;  }}return data.length;}  }
class C{  public void clear(){  SecurityContextHolder.clearContext();}  }
class C{  public synchronized void println(String s,int _verbosity,int[] _logs) throws OutputException {  for (int x=0; x < _logs.length; x++) {    if (_logs[x] == NO_LOGS)     break;    println(s,V_VERBOSE,(Log)(logs.elementAt(_logs[x])),false,false);  }}  }
class C{  public DensityLayerPlot(Plot p,int a,double[][] quantiles){  super("Density of " + p.name,p);  if (quantiles != null && quantiles.length > 0)   Array.checkRowDimension(quantiles,p.getData().length);  Q=quantiles;  axis=a;}  }
class C{  public static PsiElement findInjectedElementNoCommit(@NotNull PsiFile hostFile,final int offset){  if (hostFile instanceof PsiCompiledElement)   return null;  Project project=hostFile.getProject();  if (InjectedLanguageManager.getInstance(project).isInjectedFragment(hostFile))   return null;  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);  Trinity<PsiElement,PsiElement,Language> result=tryOffset(hostFile,offset,documentManager);  PsiElement injected=result.first;  return injected;}  }
class C{  public boolean verify() throws ReferenceNotInitializedException, XMLSecurityException {  byte[] elemDig=this.getDigestValue();  byte[] calcDig=this.calculateDigest(true);  boolean equal=MessageDigestAlgorithm.isEqual(elemDig,calcDig);  if (!equal) {    log.log(java.util.logging.Level.WARNING,"Verification failed for URI \"" + this.getURI() + "\"");    log.log(java.util.logging.Level.WARNING,"Expected Digest: " + Base64.encode(elemDig));    log.log(java.util.logging.Level.WARNING,"Actual Digest: " + Base64.encode(calcDig));  } else {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"Verification successful for URI \"" + this.getURI() + "\"");    }  }  return equal;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.551 -0400",hash_original_method="0C8A6A12A09534244BFD4B982DA5238A",hash_generated_method="55385276BD3EFAA7B4E98CCBFBB71931") @Override public String toString(){  return super.toString() + "[sumDirectoryContents=" + sumDirectoryContents+ "]";}  }
class C{  void m(){  gg++;  String g="gg";}  }
class C{  public void findAndUndo(Object obj){  if (obj instanceof DTEDFrameCache) {    logger.fine("removing DTEDFrameCache");    DTEDFrameCache dfc=getDTEDFrameCache();    if (dfc == obj) {      setDTEDFrameCache(null);    }  }  if (obj instanceof OMDrawingTool) {    logger.fine("removing OMDrawingTool");    OMDrawingTool odt=getDrawingTool();    if (odt == obj) {      setDrawingTool(null);    }  }}  }
class C{  public static AdClients run(AdExchangeSeller adExchangeSeller,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all ad clients for account");  System.out.println("=================================================================");  String pageToken=null;  AdClients adClients=null;  do {    adClients=adExchangeSeller.adclients().list().setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (adClients.getItems() != null && !adClients.getItems().isEmpty()) {      for (      AdClient adClient : adClients.getItems()) {        System.out.printf("Ad client for product \"%s\" with ID \"%s\" was found.\n",adClient.getProductCode(),adClient.getId());        System.out.printf("\tSupports reporting: %s\n",adClient.getSupportsReporting() ? "Yes" : "No");      }    } else {      System.out.println("No ad clients found.");    }    pageToken=adClients.getNextPageToken();  } while (pageToken != null);  System.out.println();  return adClients;}  }
class C{  public void requestAfterExplanation(@NonNull String permissionName){  if (isPermissionDeclined(permissionName)) {    ActivityCompat.requestPermissions(context,new String[]{permissionName},REQUEST_PERMISSIONS);  } else {    permissionCallback.onPermissionPreGranted(permissionName);  }}  }
class C{  private ActionBarBackground changeColor(Boolean fade){  if (fade) {    fadeBackground(mOldBackground,getColoredBackground(mNewColor));  } else {    mActionBar.setBackgroundDrawable(getColoredBackground(mNewColor));  }  return this;}  }
class C{  public Space S(Relation relation) throws ScopeException {  return new Space(this,relation);}  }
class C{  public int size(){  return getPeriodType().size();}  }
class C{  public synchronized boolean addPeer(JsonRpcPeer peer){  if (mReceivingPeers.containsKey(peer)) {    return false;  }  DisconnectReceiver disconnectReceiver=new UnregisterOnDisconnect(peer);  peer.registerDisconnectReceiver(disconnectReceiver);  mReceivingPeers.put(peer,disconnectReceiver);  mReceivingPeersSnapshot=null;  if (mListener != null) {    mListener.onPeerRegistered(peer);  }  return true;}  }
class C{  public Code39Reader(){  this(false);}  }
class C{  public synchronized void clearCookies(){  cookies.clear();}  }
class C{  public TestSubscriber(long initialRequest){  this(EmptySubscriber.instance(),initialRequest);}  }
class C{  public static boolean postTalkback(final Throwable t,final boolean prompt){  try {    final File f=Diagnostic.getLogFile();    final String filename=f == null ? "" : f.getPath();    final String stacktrace=Utils.getStackTrace(t);    if (sModuleName == null || inTest(stacktrace)) {      return true;    }    final String subject=t.getMessage();    final String commandLine=Arrays.toString(CommandLine.getCommandArgs());    final String logContents=getLogContents();    return postTalkback(subject,sModuleName,commandLine,stacktrace,logContents,filename,prompt);  } catch (  final IOException e) {    if (prompt) {      System.err.println("An error occurred sending the talkback.");    }    return false;  }}  }
class C{  public static void localizeRoleDefinition(DataService dm,long objKey) throws NonUniqueBusinessKeyException {  create(dm,objKey,LocalizedObjectTypes.ROLE_DEF_DESC);  create(dm,objKey,LocalizedObjectTypes.ROLE_DEF_NAME);}  }
class C{  public static ServiceParameterException convertToApi(org.oscm.internal.types.exception.ServiceParameterException oldEx){  return convertExceptionToApi(oldEx,ServiceParameterException.class);}  }
class C{  public static <T>T max(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)max((Collection<Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(max,next) < 0) {      max=next;    }  }  return max;}  }
class C{  public IllegalStateException(@Nullable String s){  super(s);}  }
class C{  public final void testSetMaxNumberOfCharacters(){  int maxNumberOfCharacters=2;  EditText editText=new EditText(getContext());  editText.setMaxNumberOfCharacters(maxNumberOfCharacters);  assertEquals(maxNumberOfCharacters,editText.getMaxNumberOfCharacters());}  }
class C{  public void testChangeWarContextAndDeployUndeployRemotely() throws Exception {  this.war.setContext("simple");  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/"+ this.war.getContext()+ "/index.jsp");  deployer.deploy(this.war);  PingUtils.assertPingTrue("simple war not correctly deployed",warPingURL,getLogger());  deployer.undeploy(this.war);  PingUtils.assertPingFalse("simple war not correctly undeployed",warPingURL,getLogger());}  }
class C{  private boolean cmd_saveProject(int C_Project_ID){  log.config("C_Project_ID=" + C_Project_ID);  MProject project=new MProject(Env.getCtx(),C_Project_ID,null);  if (project.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Project_ID=" + C_Project_ID);    return false;  }  int lineCount=0;  for (int i=0; i < m_selectionList.size(); i++) {    if (isSelectionSelected(m_selectionList.get(i))) {      BigDecimal qty=(BigDecimal)((VNumber)m_qtyList.get(i)).getValue();      int M_Product_ID=((Integer)m_productList.get(i)).intValue();      MProjectLine pl=new MProjectLine(project);      pl.setM_Product_ID(M_Product_ID);      pl.setPlannedQty(qty);      if (pl.save())       lineCount++; else       log.log(Level.SEVERE,"Line not saved");    }  }  log.config("#" + lineCount);  return true;}  }
class C{  public static void run(String scheduleFile,String networkFile,String crs,String outputFolder){  TransitSchedule schedule=ScheduleTools.readTransitSchedule(scheduleFile);  Network network=NetworkTools.readNetwork(networkFile);  ScheduleShapeFileWriter s2s=new ScheduleShapeFileWriter(schedule,network,crs);  s2s.routes2Polylines(outputFolder + "transitRoutes.shp");  s2s.stopFacilities2Shapes(outputFolder + "stopFacilities.shp","refLinks.shp");}  }
class C{  @SuppressWarnings("unchecked") public <T extends DataModel<?>>void processBean(@Observes ProcessBean<T> event,BeanManager beanManager){  Optional<FacesDataModel> optionalFacesDataModel=getAnnotation(beanManager,event.getAnnotated(),FacesDataModel.class);  if (optionalFacesDataModel.isPresent()) {    forClassToDataModelClass.put(optionalFacesDataModel.get().forClass(),(Class<? extends DataModel<?>>)event.getBean().getBeanClass());  }}  }
class C{  public static String trim(String list,String delimiter,int[] removeInfo,boolean multiCharacterDelimiter){  if (list.length() == 0)   return "";  if (multiCharacterDelimiter && delimiter.length() > 1) {    int from=0;    while (list.length() >= from + delimiter.length()) {      if (list.indexOf(delimiter,from) == from) {        from+=delimiter.length();        removeInfo[0]++;        continue;      }      break;    }    if (from > 0)     list=list.substring(from);    while (list.length() >= delimiter.length()) {      if (list.lastIndexOf(delimiter) == list.length() - delimiter.length()) {        removeInfo[1]++;        list=list.substring(0,list.length() - delimiter.length());        continue;      }      break;    }    return list;  }  if (list.length() == 0)   return "";  int from=0;  int to=list.length();  char[] del=delimiter.toCharArray();  char c;  outer:   while (list.length() > from) {    c=list.charAt(from);    for (int i=0; i < del.length; i++) {      if (c == del[i]) {        from++;        removeInfo[0]++;        continue outer;      }    }    break;  }  outer:   while (to > from) {    c=list.charAt(to - 1);    for (int i=0; i < del.length; i++) {      if (c == del[i]) {        to--;        removeInfo[1]++;        continue outer;      }    }    break;  }  int newLen=to - from;  if (newLen < list.length()) {    return list.substring(from,to);  }  return list;}  }
class C{  public static Trigger after(String name){  return new Trigger(name,TriggerType.AFTER);}  }
class C{  @Override public boolean parseAlignments(){  return false;}  }
class C{  private void stratStep(int numFolds){  FastVector newVec=new FastVector(m_Instances.capacity());  int start=0, j;  while (newVec.size() < numInstances()) {    j=start;    while (j < numInstances()) {      newVec.addElement(instance(j));      j=j + numFolds;    }    start++;  }  m_Instances=newVec;}  }
class C{  public BitemporalMapperBuilder pattern(String pattern){  this.pattern=pattern;  return this;}  }
class C{  protected void calculateOffset(T entity,final int swidth,final int sheight){  final Rectangle2D area=entity.getArea();  calculateOffset(swidth,sheight,(int)(IGameScreen.SIZE_UNIT_PIXELS * area.getWidth()),(int)(IGameScreen.SIZE_UNIT_PIXELS * area.getHeight()));}  }
class C{  public DTUInstance(WordAlignment sent,CoverageSet fs,CoverageSet es,boolean fContiguous,boolean eContiguous){  init(sent,fs,es,fContiguous,eContiguous);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (text: ");  result.append(text);  result.append(')');  return result.toString();}  }
class C{  public MarketingPermissionNotFoundException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public synchronized boolean verifyData(byte[] pdu){  int cnt=0;  while (!sDataSet) {    try {      Thread.sleep(TIME_WAIT);      if (cnt++ > WAIT_COUNT) {        return false;      }    } catch (    InterruptedException e) {    }  }  Log.v(LOG_TAG,"verify pdu");  boolean ret=arrayCompare(pdu,mLastReceivedPdu);  return ret;}  }
class C{  @Override public <T>Consumer<T> injector(Class<T> type){  ArrayList<InjectProgram> injectList=new ArrayList<>();  introspectInject(injectList,type);  introspectInit(injectList,type);  return new InjectProgramImpl<T>(injectList);}  }
class C{  public int compareTo(GanttCalendar when){  for (  int comparisson : comparissons) {switch (module(this.get(comparisson) - when.get(comparisson))) {case -1:      return -1;case 1:    return 1;}}return 0;}  }
class C{  public <T>Pair<T,W> withLhSide(T newLhSide){  return Pair.create(newLhSide,rhSide);}  }
class C{  public boolean isTablet(){  return impl.isTablet();}  }
class C{  final int compare(MutableBigInteger b){  int blen=b.intLen;  if (intLen < blen)   return -1;  if (intLen > blen)   return 1;  int[] bval=b.value;  for (int i=offset, j=b.offset; i < intLen + offset; i++, j++) {    int b1=value[i] + 0x80000000;    int b2=bval[j] + 0x80000000;    if (b1 < b2)     return -1;    if (b1 > b2)     return 1;  }  return 0;}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  public void multiplyVector4fByMatrix(Vector4f vector){  if (matrixValid && matrix.length == 16) {    float x=0;    float y=0;    float z=0;    float w=0;    float[] vectorArray=vector.ToArray();    if (colMaj) {      for (int i=0; i < 4; i++) {        int k=i * 4;        x+=this.matrix[k + 0] * vectorArray[i];        y+=this.matrix[k + 1] * vectorArray[i];        z+=this.matrix[k + 2] * vectorArray[i];        w+=this.matrix[k + 3] * vectorArray[i];      }    } else {      for (int i=0; i < 4; i++) {        x+=this.matrix[0 + i] * vectorArray[i];        y+=this.matrix[4 + i] * vectorArray[i];        z+=this.matrix[8 + i] * vectorArray[i];        w+=this.matrix[12 + i] * vectorArray[i];      }    }    vector.setX(x);    vector.setY(y);    vector.setZ(z);    vector.setW(w);  } else   Log.e("matrix","Matrix is invalid, is " + matrix.length + " long, this equation expects a 16 value matrix");}  }
class C{  public static int encodeRMap(byte[] bootImageRMap,byte[] referenceMap,int referenceMapLimit){  for (int index=0; index <= referenceMapLimit; index++) {    if (referenceMap[index] == 1) {      addOffset(bootImageRMap,index << LOG_BYTES_IN_ADDRESS);    }  }  return codeIndex + 1;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Fraction abs(){  if (numerator >= 0) {    return this;  }  return negate();}  }
class C{  public Consumer<O> build(){  if (prev.isPresent()) {    return prev.get().build().andThen(consumer);  }  return this.consumer;}  }
class C{  public static void dump(PrintRequestAttributeSet prats){  System.out.println("PrintRequestAttributeSet - length=" + prats.size());  Attribute[] ats=prats.toArray();  for (int i=0; i < ats.length; i++)   System.out.println(ats[i].getName() + " = " + ats[i]+ "  ("+ ats[i].getCategory()+ ")");}  }
class C{  public static double logcdf(double val,double loc,double scale,double shape){  val=(val - loc) / scale;  return Math.log1p(Math.exp(-val)) * -shape;}  }
class C{  @After public void cleanEnv() throws IOException {  FileUtils.deleteDirectory(LOCAL_TEMP_PATH_INPUT.toFile());  FileUtils.deleteDirectory(LOCAL_TEMP_PATH_OUTPUT.toFile());  cleanupS3();}  }
class C{  public void configureTable(JTable table){  table.getTableHeader().setReorderingAllowed(true);  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  for (int i=0; i < table.getColumnCount(); i++) {    int width=getPreferredWidth(i);    table.getColumnModel().getColumn(i).setPreferredWidth(width);  }  table.sizeColumnsToFit(-1);  setColumnToHoldButton(table,KILLCOL,new JButton(rb.getString("ButtonKill")));}  }
class C{  static public Locator north(){  return north(false);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_DECLARATION__DEFINED_VARIABLE:    if (resolve)     return getDefinedVariable();  return basicGetDefinedVariable();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("idea")) {    onIdea(changes.get("idea"));    fireChange(PROP_IDEA);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEDiffuseLightingElement(prefix,(AbstractDocument)doc);}  }
class C{  public int size(){  if (arrayTable == null) {    return 0;  }  return arrayTable.size();}  }
class C{  public final Iterator<KnowledgeEdge> explicitlyRequiredEdgesIterator(){  return Collections.unmodifiableSet(this.requiredEdges).iterator();}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);  this.lastMillisecond=getLastMillisecond(calendar);}  }
class C{  public Builder shouldStartProxy(boolean startProxy){  this._shouldStartProxy=startProxy;  return this;}  }
class C{  private static Collection<List<?>> decodeGeneralNames(Extension extension) throws IOException {  if (extension == null) {    return null;  }  Collection<List<?>> collection=((GeneralNames)GeneralNames.ASN1.decode(extension.getExtnValue())).getPairsList();  if (collection.size() == 0) {    return null;  }  return Collections.unmodifiableCollection(collection);}  }
class C{  private void emitSerializerImpl(List<Type> expandedTypes,int depth,StringBuilder builder,String inVar,String outVar,String i){  Type type=expandedTypes.get(depth);  String childInVar=inVar + "_";  String childOutVar=outVar + "_";  String entryVar="entry" + depth;  Class<?> rawClass=getRawClass(type);  if (isList(rawClass)) {    String childInTypeName=getImplName(expandedTypes.get(depth + 1),false);    builder.append(i).append("JsonArray ").append(outVar).append(" = new JsonArray();\n");    if (depth == 0) {      builder.append(i).append("this.").append(getEnsureName(inVar)).append("();\n");    }    builder.append(i).append("for (").append(childInTypeName).append(" ").append(childInVar).append(" : ").append(depth == 0 ? "this." + inVar : inVar).append(") {\n");  } else   if (isMap(rawClass)) {    String childInTypeName=getImplName(expandedTypes.get(depth + 1),false);    builder.append(i).append("JsonObject ").append(outVar).append(" = new JsonObject();\n");    if (depth == 0) {      builder.append(i).append("this.").append(getEnsureName(inVar)).append("();\n");    }    builder.append(i).append("for (java.util.Map.Entry<String, ").append(childInTypeName).append("> ").append(entryVar).append(" : ").append(depth == 0 ? "this." + inVar : inVar).append(".entrySet()) {\n");    builder.append(i).append("  ").append(childInTypeName).append(" ").append(childInVar).append(" = ").append(entryVar).append(".getValue();\n");  } else   if (rawClass.isEnum()) {    builder.append(i).append("JsonElement ").append(outVar).append(" = (").append(depth == 0 ? "this." + inVar : inVar).append(" == null) ? JsonNull.INSTANCE : new JsonPrimitive(").append(depth == 0 ? "this." + inVar : inVar).append(".name());\n");  } else   if (getEnclosingTemplate().isDtoInterface(rawClass)) {    builder.append(i).append("JsonElement ").append(outVar).append(" = ").append(depth == 0 ? "this." + inVar : inVar).append(" == null ? JsonNull.INSTANCE : ((").append(getImplNameForDto((Class<?>)expandedTypes.get(depth))).append(")").append(depth == 0 ? "this." + inVar : inVar).append(").toJsonElementInt(").append(COPY_JSONS_PARAM).append(");\n");  } else   if (rawClass.equals(String.class)) {    builder.append(i).append("JsonElement ").append(outVar).append(" = (").append(depth == 0 ? "this." + inVar : inVar).append(" == null) ? JsonNull.INSTANCE : new JsonPrimitive(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");  } else   if (rawClass == boolean.class || rawClass == int.class || rawClass == long.class || rawClass == double.class || rawClass == float.class || rawClass == short.class || rawClass == byte.class) {    builder.append(i).append("JsonPrimitive ").append(outVar).append(" = new JsonPrimitive(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");  } else   if (rawClass == Boolean.class || rawClass == Integer.class || rawClass == Long.class || rawClass == Double.class || rawClass == Float.class || rawClass == Short.class || rawClass == Byte.class) {    builder.append(i).append("JsonElement ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null ? JsonNull.INSTANCE : new JsonPrimitive(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");  } else   if (isAny(rawClass)) {    builder.append(i).append("JsonElement ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null || !(").append(inVar).append(" instanceof JsonElement) ? JsonNull.INSTANCE : (");    appendCopyJsonExpression(inVar,builder).append(");\n");  } else {    final Class<?> dtoImplementation=getEnclosingTemplate().getDtoImplementation(rawClass);    if (dtoImplementation != null) {      builder.append(i).append("JsonElement ").append(outVar).append(" = ").append(depth == 0 ? "this." + inVar : inVar).append(" == null ? JsonNull.INSTANCE : ((").append(dtoImplementation.getCanonicalName()).append(")").append(depth == 0 ? "this." + inVar : inVar).append(").toJsonElementInt(").append(COPY_JSONS_PARAM).append(");\n");    } else {      throw new IllegalArgumentException("Unable to generate server implementation for DTO interface " + getDtoInterface().getCanonicalName() + ". Type "+ rawClass+ " is not allowed to use in DTO interface.");    }  }  if (depth + 1 < expandedTypes.size()) {    emitSerializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "  ");  }  if (isList(rawClass)) {    builder.append(i).append("  ").append(outVar).append(".add(").append(childOutVar).append(");\n");    builder.append(i).append("}\n");  } else   if (isMap(rawClass)) {    builder.append(i).append("  ").append(outVar).append(".add(").append(entryVar).append(".getKey(), ").append(childOutVar).append(");\n");    builder.append(i).append("}\n");  }}  }
class C{  public URL(String protocol,String host,String file) throws MalformedURLException {  this(protocol,host,-1,file,null);}  }
class C{  public synchronized void message(String s){  println(s,ALL_MESSAGE_LOGS,true);}  }
class C{  @Override protected void processFileType(String file){  boolean isMp3=file.toLowerCase().endsWith(".mp3");  Log.i(LOG,"Setting " + (isMp3 ? "MP3" : "AAC") + " decoder for file "+ file);  setDecoder(isMp3 ? mp3Decoder : aacDecoder);}  }
class C{  public void write(byte[] b,int off,int len){  if (SysProperties.CHECK && (len < 0 || len % Constants.FILE_BLOCK_SIZE != 0)) {    DbException.throwInternalError("unaligned write " + name + " len "+ len);  }  checkWritingAllowed();  checkPowerOff();  try {    FileUtils.writeFully(file,ByteBuffer.wrap(b,off,len));  } catch (  IOException e) {    closeFileSilently();    throw DbException.convertIOException(e,name);  }  filePos+=len;  fileLength=Math.max(filePos,fileLength);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TStructMember.class) {switch (baseFeatureID) {case TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER:      return TypesPackage.TSTRUCT_GETTER__DEFINED_MEMBER;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void removeBeanContextServicesListener(BeanContextServicesListener bcsl){  if (bcsl == null)   throw new NullPointerException("bcsl");synchronized (bcsListeners) {    if (!bcsListeners.contains(bcsl))     return; else     bcsListeners.remove(bcsl);  }}  }
class C{  private static boolean victimIsStrongEnough(final Player player,final Player victim){  return getPlayerStrength(victim) >= ACCEPTABLE_STRENGTH_RATIO * getPlayerStrength(player);}  }
class C{  public static void info(final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.info(t.getMessage(),t);  } else {    System.err.printf("INFO: %s\n",t.getMessage());    System.err.println(t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  public Solution search(INode initial,INode goal){  INodeSet open=StateStorageFactory.create(StateStorageFactory.TREE);  INode copy=initial.copy();  scoringFunction.score(copy);  open.insert(copy);  INodeSet closed=StateStorageFactory.create(closedStorage);  if (debug != null) {    debug.visitNode(copy);    debug.markStart(copy);  }  while (!open.isEmpty()) {    INode n=open.remove();    closed.insert(n);    if (n.equals(goal)) {      if (debug != null) {        debug.markGoal(n);        for (Iterator<INode> it=open.iterator(); it.hasNext(); ) {          debug.markUnexplored(it.next());        }        if (legendOn) {          debug.visitNode(new Legend("A*Search [" + scoringFunction.getClass().getSimpleName() + "] Processed:"+ closed.size()+ " , open:"+ open.size()));        }      }      numOpen=open.size();      numClosed=closed.size();      return new Solution(initial,n,debug);    }    DepthTransition trans=(DepthTransition)n.storedData();    int depth=1;    if (trans != null) {      depth=trans.depth + 1;    }    DoubleLinkedList<IMove> moves=n.validMoves();    for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {      IMove move=it.next();      INode successor=n.copy();      move.execute(successor);      successor.storedData(new DepthTransition(move,n,depth));      scoringFunction.score(successor);      INode past=closed.contains(successor);      if (past != null) {        if (successor.score() >= past.score()) {          continue;        }        if (debug != null) {          debug.markUnexplored(successor);          debug.visitNode(successor);          debug.visitEdge(n,successor);        }        closed.remove(past);      }      numMoves++;      if (debug != null) {        debug.visitNode(successor);        debug.visitEdge(n,successor);      }      open.insert(successor);    }  }  numOpen=open.size();  numClosed=closed.size();  return new Solution(initial,goal,debug,false);}  }
class C{  public static void main(String[] args){  runFilter(new MergeManyValues(),args);}  }
class C{  private StendhalRPZone generateZone(){  mapStructure.build();  final StendhalRPZone zone=new StendhalRPZone(name,width,height);  try {    zone.addTilesets(name + ".tilesets",mapStructure.getTilesets());    zone.addLayer(name + ".0_floor",mapStructure.getLayer("0_floor"));    zone.addLayer(name + ".1_terrain",mapStructure.getLayer("1_terrain"));    zone.addLayer(name + ".2_object",mapStructure.getLayer("2_object"));    zone.addLayer(name + ".3_roof",mapStructure.getLayer("3_roof"));    zone.addCollisionLayer(name + ".collision",mapStructure.getLayer("collision"));    zone.addProtectionLayer(name + ".protection",mapStructure.getLayer("protection"));  } catch (  IOException e) {    logger.error(e);  }  portal=new ReturnTeleporter(new Spot(SingletonRepository.getRPWorld().getZone(returnZoneName),returnX,returnY));  Point pos=getPortalPosition();  portal.setPosition(pos.x,pos.y);  zone.add(portal);  zone.setMoveToAllowed(false);  zone.disallowIn();  setRandomlyColored(zone);  addPrizes(zone);  BackgroundMusicSource music=new BackgroundMusicSource(MUSIC_TRACK,(int)Math.sqrt(width * width + height * height) + 1,MUSIC_VOLUME);  music.setPosition(pos.x,pos.y);  zone.add(music);  zone.addMovementListener(new MazeMovementListener());  return zone;}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0) {    uri="http://" + uri;  } else   if (isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  public void removeEarnings(Iterable<Earning> earningsToRemove){  for (  Earning earning : earningsToRemove) {    this.getSlot(EARNINGS_SLOT_NAME).remove(earning.getID());  }  this.getZone().storeToDatabase();}  }
class C{  public void randomize(){  if (data instanceof NumericTable) {    ((NumericTable)data).randomize(getSelectedLogicalCellIndices());  }}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID);}  }
class C{  public void testBug52167() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createProcedure("testBug52167","(in _par1 decimal( 10 , 2 ) , in _par2\n varchar( 4 )) BEGIN select 1; END");  this.conn.prepareCall("{call testBug52167(?,?)}").close();}  }
class C{  public long byteSize(){  long byteSize=3;  int size=parts.size();  for (int i=0; i < size; i++) {    byteSize+=this.parts.get(i).byteSize();  }  return byteSize;}  }
class C{  @Override @Nullable public Column loadChunk(int columnX,int columnZ){  return this.loadChunk(columnX,columnZ,null);}  }
class C{  public void newArray(final Type type){  int typ;switch (type.getSort()) {case Type.BOOLEAN:    typ=Opcodes.T_BOOLEAN;  break;case Type.CHAR:typ=Opcodes.T_CHAR;break;case Type.BYTE:typ=Opcodes.T_BYTE;break;case Type.SHORT:typ=Opcodes.T_SHORT;break;case Type.INT:typ=Opcodes.T_INT;break;case Type.FLOAT:typ=Opcodes.T_FLOAT;break;case Type.LONG:typ=Opcodes.T_LONG;break;case Type.DOUBLE:typ=Opcodes.T_DOUBLE;break;default :typeInsn(Opcodes.ANEWARRAY,type);return;}mv.visitIntInsn(Opcodes.NEWARRAY,typ);}  }
class C{  public final void popCurrentNode(){  m_currentNodes.quickPop(1);}  }
class C{  @Override public boolean transactAgreedDeal(ItemParserResult res,final EventRaiser npc,final Player player){  if (getMaximalAmount(player) < res.getAmount()) {    npc.say("Hey! I'm over here! You'd better not be trying to trick me...");    return false;  } else {    for (    final Map.Entry<String,Integer> entry : getRequiredResourcesPerItem().entrySet()) {      final int amountToDrop=res.getAmount() * entry.getValue();      player.drop(entry.getKey(),amountToDrop);    }    final long timeNow=new Date().getTime();    player.setQuest(questSlot,res.getAmount() + ";" + getProductName()+ ";"+ timeNow);    npc.say("OK, I will " + getProductionActivity() + " "+ Grammar.quantityplnoun(res.getAmount(),getProductName(),"a")+ " for you, but that will take some time. Please come back in "+ getApproximateRemainingTime(player)+ ".");    return true;  }}  }
class C{  private List<StoragePort> sortPorts(List<StoragePort> storagePorts,Map<Initiator,List<StoragePort>> existingAssignments,List<StoragePort> newPorts){  Set<URI> includedPorts=new HashSet<URI>();  List<StoragePort> sortedPorts=new ArrayList<StoragePort>();  Map<URI,StoragePort> portsMap=DataObjectUtils.toMap(storagePorts);  for (int numPorts=4; numPorts >= 1; numPorts--) {    for (    List<StoragePort> ports : existingAssignments.values()) {      if (ports.size() >= numPorts) {        for (        StoragePort port : ports) {          if (!includedPorts.contains(port.getId()) && portsMap.containsKey(port.getId())) {            sortedPorts.add(port);            includedPorts.add(port.getId());          }        }      }    }  }  for (  StoragePort port : storagePorts) {    if (!includedPorts.contains(port.getId())) {      sortedPorts.add(port);      includedPorts.add(port.getId());      newPorts.add(port);    }  }  if (sortedPorts.size() != storagePorts.size()) {    _log.error("sortPorts size incorrect");    _log.error(sortedPorts.toString());    _log.error(storagePorts.toString());    return null;  }  return sortedPorts;}  }
class C{  public synchronized void start() throws ReplicatorException {  String command=vmrrControlScript + " start";  logger.info("Starting vmrr process: " + command);  execAndReturnStdout(command,true);  if (!isRunning()) {    throw new ReplicatorException("Unable to start vmrr process");  }}  }
class C{  public final boolean isNoGrid(){  return noGrid;}  }
class C{  public void stopLoadMore(){  if (mPullLoading == true) {    mPullLoading=false;    mFooterView.setState(XListViewFooter.STATE_NORMAL);  }}  }
class C{  protected void format(){}  }
class C{  public boolean matchesNormalized(final ConversationStates state,final Sentence sentence){  return matchesNormalized(state,sentence.getTriggerExpression());}  }
class C{  @Hook("java.lang.Class->getDeclaredMethod") @BackupIdentifier("Class_getDeclaredMethod") public static Method Class_getDeclaredMethod(Class cls,String name,Class[] params){  Log.d(TAG,"I'm hooked in getDeclaredMethod: " + cls + " -> "+ name);  if (name.contains("War") || name.contains("war")) {    Log.d(TAG,"make piece not war!");    name=name.replace("War","Piece").replace("war","piece");  }  return OriginalMethod.by("Class_getDeclaredMethod").invoke(cls,name,params);}  }
class C{  private void properties() throws Exception {  ComponentBean base=configBean.getComponent(cb.getBaseComponentType());  PropertyBean[] pbs=cb.getProperties();  writer.fwrite("protected enum PropertyKeys {\n");  writer.indent();  for (  PropertyBean pb : pbs) {    if (base.getProperty(pb.getPropertyName()) != null) {      if (logger.isLoggable(Level.FINER)) {        logger.log(Level.FINER,"Skipping base class property '" + pb.getPropertyName() + "'");      }      continue;    }    if ("for".equals(pb.getPropertyName())) {      writer.fwrite(pb.getPropertyName());      writer.write("Val(\"for\")");    } else     if ("public".equals(pb.getPropertyName())) {      writer.fwrite(pb.getPropertyName());      writer.write("Val(\"public\")");    } else {      writer.fwrite(pb.getPropertyName());    }    writer.write(",\n");  }  writer.write(";\n");  writer.fwrite("String toString;\n");  writer.fwrite("PropertyKeys(String toString) { this.toString = toString; }\n");  writer.fwrite("PropertyKeys() { }\n");  writer.fwrite("public String toString() {\n");  writer.indent();  writer.fwrite("return ((toString != null) ? toString : super.toString());\n");  writer.outdent();  writer.fwrite("}\n");  writer.outdent();  writer.write("}\n\n");  for (  PropertyBean pb : pbs) {    if (base.getProperty(pb.getPropertyName()) != null) {      if (logger.isLoggable(Level.FINER)) {        logger.log(Level.FINER,"Skipping base class property '" + pb.getPropertyName() + "'");      }      continue;    }    if (logger.isLoggable(Level.FINE)) {      logger.log(Level.FINE,"Generating property variable/getter/setter for '" + pb.getPropertyName() + "'");    }    properties.add(pb);    String type=pb.getPropertyClass();    String var=mangle(pb.getPropertyName());    String description="<p>Return the value of the <code>" + pb.getPropertyName() + "</code> property.</p>"+ "\n@return the property value";    DescriptionBean db=pb.getDescription("");    if (db != null) {      String temp=db.getDescription().trim();      if (temp != null && temp.length() > 0) {        description+='\n' + "<p>Contents: " + temp;      }    }    writer.writeJavadocComment(description.trim());    writer.fwrite("public ");    writer.write(type);    if ("boolean".equals(type)) {      writer.write(" is");    } else {      writer.write(" get");    }    writer.write(capitalize(pb.getPropertyName()));    writer.write("() {\n");    writer.indent();    writer.fwrite("return (");    writer.write(primitive(type) ? GeneratorUtil.convertToObject(type) : type);    writer.write(") getStateHelper().eval(PropertyKeys.");    writer.write((pb.getPropertyName().equals("for") || pb.getPropertyName().equals("public")) ? pb.getPropertyName() + "Val" : pb.getPropertyName());    if (primitive(type) || (pb.getDefaultValue() != null)) {      writer.write(", ");      writer.write(pb.getDefaultValue() != null ? pb.getDefaultValue() : TYPE_DEFAULTS.get(type));    }    writer.write(");\n\n");    writer.outdent();    writer.fwrite("}\n\n");    String maybeUnderscore=(pb.getPropertyName().equals("for") || pb.getPropertyName().equals("public")) ? "_" : "";    writer.writeJavadocComment("<p>Set the value of the <code>" + pb.getPropertyName() + "</code> property.</p>"+ "\n@param "+ maybeUnderscore+ pb.getPropertyName()+ " the new property value\n");    writer.fwrite("public void set");    writer.write(capitalize(pb.getPropertyName()));    writer.write("(");    writer.write(type);    writer.write(' ');    writer.write(var);    writer.write(") {\n");    writer.indent();    writer.fwrite("getStateHelper().put(PropertyKeys.");    writer.write((pb.getPropertyName().equals("for") || pb.getPropertyName().equals("public")) ? pb.getPropertyName() + "Val" : pb.getPropertyName());    writer.write(", ");    writer.write(var);    writer.write(");\n");    if ((pb.isPassThrough() && pb.getDefaultValue() == null) || (cb.getComponentClass().contains("HtmlCommandButton") && "onclick".equals(pb.getPropertyName()))) {      writer.fwrite("handleAttribute(\"");      writer.write(pb.getPropertyName());      writer.write("\", ");      writer.write(var);      writer.write(");\n");    }    writer.outdent();    writer.fwrite("}\n\n");    writer.write("\n");  }}  }
class C{  public void publishX1(final ClusterState clusterState){  this.discovery.publishX1(clusterState);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof CheckBoxListItem)) {    throw new IllegalArgumentException("Must be a CheckBoxListItem!");  }  return getContent().equals(((CheckBoxListItem)o).getContent());}  }
class C{  DateIterator(final Calendar startFinal,final Calendar endFinal){  super();  this.endFinal=endFinal;  spot=startFinal;  spot.add(Calendar.DATE,-1);}  }
class C{  public boolean isUseCurrencyBalancing(){  Object oo=get_Value(COLUMNNAME_UseCurrencyBalancing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ServiceState(Parcel in){  mVoiceRegState=in.readInt();  mDataRegState=in.readInt();  mRoaming=in.readInt() != 0;  mOperatorAlphaLong=in.readString();  mOperatorAlphaShort=in.readString();  mOperatorNumeric=in.readString();  mIsManualNetworkSelection=in.readInt() != 0;  mRilVoiceRadioTechnology=in.readInt();  mRilDataRadioTechnology=in.readInt();  mCssIndicator=(in.readInt() != 0);  mNetworkId=in.readInt();  mSystemId=in.readInt();  mCdmaRoamingIndicator=in.readInt();  mCdmaDefaultRoamingIndicator=in.readInt();  mCdmaEriIconIndex=in.readInt();  mCdmaEriIconMode=in.readInt();  mIsEmergencyOnly=in.readInt() != 0;}  }
class C{  public String toString(){  StringBuffer answer=new StringBuffer(attrID + ": ");  if (values.size() == 0) {    answer.append("No values");  } else {    boolean start=true;    for (Enumeration<Object> e=values.elements(); e.hasMoreElements(); ) {      if (!start)       answer.append(", ");      answer.append(e.nextElement());      start=false;    }  }  return answer.toString();}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  @Override public int current(){  return getText().getIndex();}  }
class C{  public String printHead() throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  this.printHead(baos);  return new Utf8String(baos.toByteArray()).string();}  }
class C{  private void insertChunk(final MemoryChunk chunk){  Preconditions.checkNotNull(chunk,"Error: Memory chunk can't be null");  final int index=findChunkPosition(chunk);  m_chunks.add(index,chunk);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static boolean equals(CharSequence a,CharSequence b){  if (a.length() != b.length()) {    return false;  }  int length=a.length();  for (int i=0; i < length; i++) {    if (a.charAt(i) != b.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public Algebra(double tolerance){  setProperty(new Property(tolerance));}  }
class C{  private FastMath(){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SDECLARATION__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  @Override protected void onDraw(Canvas canvas){  drawBackground(canvas,mBackgroundMode);  for (int i=0; i < mDrawableList.size(); i++) {    try {      mDrawableList.get(i).draw(canvas);    } catch (    Exception ex) {    }  }}  }
class C{  public boolean answerInlineQuery(String inlineQueryId,InlineQueryResponse inlineQueryResponse){  if (inlineQueryId != null && inlineQueryResponse != null) {    HttpResponse<String> response;    JSONObject jsonResponse;    try {      MultipartBody requests=Unirest.post(getBotAPIUrl() + "answerInlineQuery").field("inline_query_id",inlineQueryId).field("results",GSON.toJson(inlineQueryResponse.getResults())).field("cache_time",inlineQueryResponse.getCacheTime()).field("is_personal",inlineQueryResponse.isPersonal()).field("next_offset",inlineQueryResponse.getNextOffset()).field("switch_pm_text",inlineQueryResponse.getSwitchPmText()).field("switch_pm_parameter",inlineQueryResponse.getSwitchPmParameter());      response=requests.asString();      jsonResponse=Utils.processResponse(response);      if (jsonResponse != null) {        if (jsonResponse.getBoolean("result"))         return true;      }    } catch (    UnirestException e) {      e.printStackTrace();    }  }  return false;}  }
class C{  public static TreeNode buildTree(int n){  if (n == 0)   return null;  TreeNode node=new TreeNode(0);  node.left=buildTree(n / 2);  node.val=cur.val;  cur=cur.next;  node.right=buildTree(n - n / 2 - 1);  return node;}  }
class C{  public void increaseCount(){  this.count++;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String outputData=null;  WhiteboxRaster DEMGrid=null;  String inputFilesString=null;  String suffix="no OTOs";  String[] gridFiles;  WhiteboxRaster output=null;  int row, col;  int progress=0;  double noData=0;  int rows, cols;  int a, b;  double z1, z2, w1;  double[][] subGridDEM;  int colOffset, rowOffset;  boolean flag;  double minEdgeSlope=0;  int loopNum=0;  int numCellsChanged=0;  int prevNumCellsChanged=0;  boolean[] activeTile=new boolean[1];  int[][] tileCorners=new int[2][1];  boolean didSomethingHappen=false;  int currentTile, numTiles=0;  long numValidCells=0;  double cumulativeChange=0;  boolean iterateRemoveOTOs=false;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    suffix=args[1];    OTOMaxSize=(int)(Math.round(Double.valueOf(args[2])));    int halfOTOMaxSize=OTOMaxSize / 2;    double[] data=new double[OTOMaxSize + 2];    minEdgeSlope=Double.valueOf(args[3]);    iterateRemoveOTOs=Boolean.parseBoolean(args[4]);    if (suffix.equals("")) {      suffix="no OTOs";    }    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    if (OTOMaxSize < 5) {      OTOMaxSize=5;    }    gridFiles=inputFilesString.split(";");    int numPointFiles=gridFiles.length;    for (int j=0; j < numPointFiles; j++) {      inputHeader=gridFiles[j];      outputHeader=gridFiles[j].replace(".dep"," " + suffix + ".dep");      outputData=outputHeader.replace(".dep",".tas");      String tempHeaderFile=inputHeader.replace(".dep","_temp.dep");      String tempDataFile=inputHeader.replace(".dep","_temp.tas");      FileUtilities.copyFile(new File(inputHeader),new File(tempHeaderFile));      FileUtilities.copyFile(new File(inputHeader.replace(".dep",".tas")),new File(tempDataFile));      do {        numValidCells=0;        loopNum++;        prevNumCellsChanged=numCellsChanged;        numCellsChanged=0;        DEMGrid=new WhiteboxRaster(tempHeaderFile,"rw");        rows=DEMGrid.getNumberRows();        cols=DEMGrid.getNumberColumns();        noData=DEMGrid.getNoDataValue();        double resolution=(DEMGrid.getCellSizeX() + DEMGrid.getCellSizeY()) / 2;        if (loopNum == 1) {          minOTOHeight=Math.tan(minEdgeSlope * Math.PI / 180) * resolution;          if (minOTOHeight < 0) {            minOTOHeight=0;          }        }        cumulativeChange=0;        updateProgress("DEM " + (j + 1) + " Loop number "+ loopNum+ ":",-1);        if (loopNum == 1) {          FileUtilities.copyFile(new File(tempHeaderFile),new File(outputHeader));          FileUtilities.copyFile(new File(tempDataFile),new File(outputData));          output=new WhiteboxRaster(outputHeader,"rw");          colOffset=0;          flag=true;          do {            data[0]=noData;            data[OTOMaxSize + 1]=noData;            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              data[a + 1]=output.getValue(0,col);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              z1=output.getValue(0,col);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(0,col,z2);              }              a++;            }            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              data[a + 1]=output.getValue(rows - 1,col);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              z1=output.getValue(rows - 1,col);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(rows - 1,col,z2);              }              a++;            }            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              flag=false;            }          } while (flag);          rowOffset=0;          flag=true;          do {            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              data[a + 1]=output.getValue(row,0);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              z1=output.getValue(row,0);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(row,0,z2);              }              a++;            }            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              data[a + 1]=output.getValue(row,cols - 1);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              z1=output.getValue(row,cols - 1);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(row,cols - 1,z2);              }              a++;            }            rowOffset+=halfOTOMaxSize;            if (rowOffset > rows - 1) {              flag=false;            }          } while (flag);          colOffset=-1;          rowOffset=-1;          flag=true;          numTiles=-1;          do {            numTiles++;            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              colOffset=-1;              rowOffset+=halfOTOMaxSize;              if (rowOffset > rows - 1) {                flag=false;              }            }          } while (flag);          activeTile=new boolean[numTiles + 1];          tileCorners=new int[2][numTiles + 1];          colOffset=-1;          rowOffset=-1;          flag=true;          currentTile=-1;          do {            currentTile++;            activeTile[currentTile]=true;            tileCorners[0][currentTile]=colOffset;            tileCorners[1][currentTile]=rowOffset;            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              colOffset=-1;              rowOffset+=halfOTOMaxSize;              if (rowOffset > rows - 1) {                flag=false;              }            }          } while (flag);        } else {          output=new WhiteboxRaster(outputHeader,"rw");        }        colOffset=-1;        rowOffset=-1;        flag=true;        currentTile=-1;        do {          currentTile++;          if (activeTile[currentTile]) {            subGridDEM=new double[OTOMaxSize + 2][OTOMaxSize + 2];            for (row=0; row < OTOMaxSize + 2; row++) {              subGridDEM[row][0]=noData;              subGridDEM[row][OTOMaxSize + 1]=noData;            }            for (col=0; col < OTOMaxSize + 2; col++) {              subGridDEM[0][col]=noData;              subGridDEM[OTOMaxSize + 1][col]=noData;            }            numValidCells=0;            a=0;            b=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              for (col=colOffset; col < colOffset + OTOMaxSize; col++) {                subGridDEM[b + 1][a + 1]=DEMGrid.getValue(row,col);                if (subGridDEM[b + 1][a + 1] != noData) {                  numValidCells++;                }                a++;                if (a == OTOMaxSize) {                  a=0;                }              }              b++;            }            if (numValidCells > 3) {              cleavePeaks2D(subGridDEM,noData);            }            a=0;            b=0;            didSomethingHappen=false;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              for (col=colOffset; col < colOffset + OTOMaxSize; col++) {                z2=subGridDEM[b + 1][a + 1];                w1=output.getValue(row,col);                if (z2 < w1) {                  output.setValue(row,col,z2);                  cumulativeChange+=(w1 - z2) * (w1 - z2);                  didSomethingHappen=true;                  numCellsChanged++;                }                a++;                if (a == OTOMaxSize) {                  a=0;                }              }              b++;            }            if (!didSomethingHappen) {              activeTile[currentTile]=false;            }          }          colOffset+=halfOTOMaxSize;          if (colOffset > cols - 1) {            colOffset=-1;            rowOffset+=halfOTOMaxSize;            if (rowOffset > rows - 1) {              flag=false;            }            if (cancelOp) {              cancelOperation();              return;            }          }          progress=(int)(currentTile * 100d / (numTiles - 1d));          updateProgress((int)progress);        } while (flag);        DEMGrid.close();        output.close();        if (numCellsChanged > 0) {          FileUtilities.copyFile(new File(outputHeader),new File(tempHeaderFile));          FileUtilities.copyFile(new File(outputHeader.replace(".dep",".tas")),new File(tempDataFile));        }      } while ((numCellsChanged > 0) && (numCellsChanged != prevNumCellsChanged) && (loopNum < 501)&& (cumulativeChange > 0.5)&& iterateRemoveOTOs);      if ((new File(tempHeaderFile)).exists()) {        (new File(tempHeaderFile)).delete();      }      if ((new File(tempDataFile)).exists()) {        (new File(tempDataFile)).delete();      }    }    returnData(gridFiles[0].replace(".dep"," " + suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DocumentTabModelImpl(ActivityDelegate activityDelegate,StorageDelegate storageDelegate,TabCreatorManager tabCreatorManager,boolean isIncognito,int prioritizedTabId,Context context){  super(isIncognito);  mActivityDelegate=activityDelegate;  mStorageDelegate=storageDelegate;  mTabCreatorManager=tabCreatorManager;  mPrioritizedTabId=prioritizedTabId;  mContext=context;  mCurrentState=STATE_UNINITIALIZED;  mTabIdList=new ArrayList<Integer>();  mEntryMap=new SparseArray<Entry>();  mHistoricalTabs=new ArrayList<Integer>();  mInitializationObservers=new ObserverList<InitializationObserver>();  mObservers=new ObserverList<TabModelObserver>();  SharedPreferences prefs=mContext.getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  mLastShownTabId=prefs.getInt(isIncognito() ? PREF_LAST_SHOWN_TAB_ID_INCOGNITO : PREF_LAST_SHOWN_TAB_ID_REGULAR,Tab.INVALID_TAB_ID);  setCurrentState(STATE_READ_RECENT_TASKS_START);  mStorageDelegate.restoreTabEntries(isIncognito,activityDelegate,mEntryMap,mTabIdList,mHistoricalTabs);  setCurrentState(STATE_READ_RECENT_TASKS_END);}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  public boolean write(IOFSwitch sw,OFMessage msg) throws IOException {  if (!msgTypesToCache.contains(msg.getType())) {    sw.write(msg);    return true;  }  DamperEntry entry=new DamperEntry(msg,sw);  if (cache.update(entry)) {    return false;  } else {    sw.write(msg);    return true;  }}  }
class C{  public static List<IJavaCompletionProposal> createProposalsForProblemsOnAsyncType(ASTNode node,String methodBindingKey){  RpcPair rpcPair=resolveRpcPair(node,methodBindingKey,PeerTypeResolver.SYNC_RESOLVER);  return createProposal(rpcPair,BUILDER);}  }
class C{  public double query(int targetClass,DataPointPair<Integer> dataPoint){  int[] cord=new int[dimSize.length];  int skipVal=dataPointToCord(dataPoint,targetClass,cord);  return query(targetClass,skipVal,cord);}  }
class C{  private <T>PubsubFuture<T> delete(final String operation,final String path,final Class<T> responseClass){  return request(operation,HttpMethod.DELETE,path,responseClass);}  }
class C{  public Pos3D scale(double scale){  return scale(scale,scale,scale);}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Tradingday) {    Tradingday tradingday=(Tradingday)objectToCompare;    if (tradingday.getOpen().compareTo(this.getOpen()) == 0) {      if (tradingday.getClose().compareTo(this.getClose()) == 0) {        return true;      }    }  }  return false;}  }
class C{  private boolean compareTo(String remote){  return getSelfLink().compareTo(remote) < 0;}  }
class C{  public static SemanticNode semanticAnalysis(TreeNode cst,int nkind,Context ctxt) throws ParseException {  return null;}  }
class C{  public boolean isAvailable(){  if (ProvisioningStatus.COMPLETED.equals(getProvisioningStatus())) {    return true;  }  return false;}  }
class C{  public T documentReferrer(String value){  setString(DOCUMENT_REFERRER,value);  return (T)this;}  }
class C{  @Override public int hashCode(){  int result=37;  result=31 * result + groupId.hashCode();  result=31 * result + artifactId.hashCode();  result=31 * result + version.hashCode();  if (null != packaging) {    result=31 * result + packaging.hashCode();  }  if (null != classifier) {    result=31 * result + classifier.hashCode();  }  return result;}  }
class C{  private void fillIDValues(){  for (  X_I_Product_BOM importBOM : getRecords(false,m_IsImportOnlyNoErrors)) {    int AD_Org_ID=0;    if (importBOM.getAD_Org_ID() > 0)     AD_Org_ID=getID(MOrg.Table_Name,"AD_Org_ID = ?",new Object[]{importBOM.getAD_Org_ID()});    if (AD_Org_ID < 0 && importBOM.getOrgValue() != null) {      AD_Org_ID=getID(MOrg.Table_Name,"Value = ?",new Object[]{importBOM.getOrgValue()});      importBOM.setAD_Org_ID(AD_Org_ID);    } else     importBOM.setAD_Org_ID(AD_Org_ID);    int M_Product_ID=0;    if (importBOM.getM_Product_ID() > 0)     M_Product_ID=getID(MProduct.Table_Name,"M_Product_ID=?",new Object[]{importBOM.getM_Product_ID()});    if (M_Product_ID <= 0 && importBOM.getProductValue() != null) {      M_Product_ID=getID(MProduct.Table_Name,"Value=?",new Object[]{importBOM.getProductValue()});    }    importBOM.setM_Product_ID(M_Product_ID);    int M_Component_ID=0;    if (importBOM.getM_BOMProduct_ID() > 0)     M_Component_ID=getID(MProduct.Table_Name,"M_Product_ID=?",new Object[]{importBOM.getM_BOMProduct_ID()});    if (M_Component_ID <= 0 && importBOM.getProduct_BOM_Value() != null) {      M_Component_ID=getID(MProduct.Table_Name,"Value=?",new Object[]{importBOM.getProduct_BOM_Value()});    }    importBOM.setM_BOMProduct_ID(M_Component_ID);    int C_UOM_ID=0;    if (importBOM.getC_UOM_ID() > 0)     C_UOM_ID=getID(MUOM.Table_Name,"C_UOM_ID=?",new Object[]{importBOM.getC_UOM_ID()});    if (C_UOM_ID <= 0 && importBOM.getX12DE355() != null) {      C_UOM_ID=getID(MUOM.Table_Name,"X12DE355=?",new Object[]{importBOM.getX12DE355()});    }    importBOM.setC_UOM_ID(C_UOM_ID);    StringBuffer err=new StringBuffer("");    if (importBOM.getAD_Org_ID() < 0)     err.append(" @AD_Org_ID@ @NotFound@,");    if (importBOM.getM_Product_ID() <= 0)     err.append(" @M_Product_ID@ @NotFound@,");    if (importBOM.getM_BOMProduct_ID() <= 0)     err.append(" @M_ProductBOM_ID@ @NotFound@");    if (importBOM.getDocumentNo() == null)     err.append(" @FillMandatory@ @DocumentNo@");    if (err.toString() != null && err.toString().length() > 0) {      importBOM.setI_ErrorMsg(Msg.parseTranslation(getCtx(),err.toString()));    }    importBOM.saveEx();  }}  }
class C{  public WorkingSetComparator(boolean isOtherWorkingSetOnTop){  fIsOtherWorkingSetOnTop=isOtherWorkingSetOnTop;}  }
class C{  public ListItemView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  loadThemeAttributes(attrs,defStyleAttr,0);}  }
class C{  public CSV(char fieldDelimiter,char textDelimiter){  this.fieldDelimiter=fieldDelimiter;  this.textDelimiter=textDelimiter;}  }
class C{  public final Object clone() throws CloneNotSupportedException {  chooseFirstProvider();  Mac that=(Mac)super.clone();  that.spi=(MacSpi)this.spi.clone();  return that;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("PopAsynchronousTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  List meths=targetClass.methodsByName("report");  Location loc=((Method)(meths.get(0))).location();  BreakpointRequest request=erm.createBreakpointRequest(loc);  request.enable();  (new HarassThread()).start();  listenUntilVMDisconnect();  int correct=(new PopAsynchronousTarg()).fibonacci(PopAsynchronousTarg.N);  if (result == correct) {    println("Got expected result: " + result);  } else {    failure("FAIL: expected result: " + correct + ", got: "+ result);  }  if (!testFailed) {    println("PopAsynchronousTest: passed");  } else {    throw new Exception("PopAsynchronousTest: failed");  }}  }
class C{  private void initializeLogger(){  String filePath=cs.getConfigurationSetting(ConfigurationKey.LOG_FILE_PATH,Configuration.GLOBAL_CONTEXT).getValue();  String logLevel=cs.getConfigurationSetting(ConfigurationKey.LOG_LEVEL,Configuration.GLOBAL_CONTEXT).getValue();  String logConfigFile=cs.getConfigurationSetting(ConfigurationKey.LOG_CONFIG_FILE,cs.getNodeName()).getValue();  LoggerFactory.activateRollingFileAppender(filePath,logConfigFile,logLevel);}  }
class C{  @Override public void camera(){  camera(cameraX,cameraY,cameraZ,cameraX,cameraY,0,0,1,0);}  }
class C{  public TranslateExpression withReferenceFromCodebase(Expression referenceFromCodebase){  return withOption("referenceFromCodebase",referenceFromCodebase.toString());}  }
class C{  public static final double roundDouble(double d,int places){  return Math.round(d * Math.pow(10,places)) / Math.pow(10,places);}  }
class C{  public static Typeface walkwayObliqueUltraBold(Context context){  return FontSourceProcessor.process(R.raw.walkway_oblique_ultrabold,context);}  }
class C{  public void reverse(){  boolean tmp;  int limit=size / 2;  int j=size - 1;  boolean[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  public void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  for (int counter=highlights.size() - 1; counter >= 0; counter--) {    HighlightInfo tag=highlights.elementAt(counter);    if (tag instanceof LayeredHighlightInfo) {      LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;      int start=lhi.getStartOffset();      int end=lhi.getEndOffset();      if ((p0 < start && p1 > start) || (p0 >= start && p0 < end)) {        lhi.paintLayeredHighlights(g,p0,p1,viewBounds,editor,view);      }    }  }}  }
class C{  @Override public List<String> brpop(final int timeout,final String... keys){  return brpop(getArgsAddTimeout(timeout,keys));}  }
class C{  private static boolean needsAddressExpressionMenu(final IDebugger debugger,final COperandTreeNode treeNode,final BigInteger expressionAddress){  return isAddressExpression(treeNode) && (ProcessHelpers.getSectionWith(debugger.getProcessManager().getMemoryMap(),new CAddress(expressionAddress)) != null);}  }
class C{  final public TermNode s(){  return (TermNode)get(0);}  }
class C{  protected byte[] wrap(byte content_type,byte[] fragment,int offset,int len){  if (logger != null) {    logger.println("SSLRecordProtocol.wrap: TLSPlaintext.fragment[" + len + "]:");    logger.print(fragment,offset,len);  }  if (len > MAX_DATA_LENGTH) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("The provided chunk of data is too big: " + len + " > MAX_DATA_LENGTH == "+ MAX_DATA_LENGTH));  }  byte[] ciphered_fragment=fragment;  if (activeWriteState != null) {    ciphered_fragment=activeWriteState.encrypt(content_type,fragment,offset,len);    if (ciphered_fragment.length > MAX_CIPHERED_DATA_LENGTH) {      throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("The ciphered data increased more than on 1024 bytes"));    }    if (logger != null) {      logger.println("SSLRecordProtocol.wrap: TLSCiphertext.fragment[" + ciphered_fragment.length + "]:");      logger.print(ciphered_fragment);    }  }  return packetize(content_type,version,ciphered_fragment);}  }
class C{  public UnassignedClassException(String message){  super(message);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log10(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int append(final byte lhs,final byte rhs,final String fieldName){  int comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  fieldComparisons.setAt(fieldName).value(comparison);  return comparison;}  }
class C{  public static void writeDBHistory(String name,String path,String time,String type,String date){  mDb=mDbHelper.getWritableDatabase();  Log.i("OUT","Adding: " + name);  ContentValues values=new ContentValues();  values.put(FeedEntry.HISTORY_MODEL,name);  values.put(FeedEntry.HISTORY_PATH,path);  values.put(FeedEntry.HISTORY_TIME,time);  values.put(FeedEntry.HISTORY_PRINTER,type);  values.put(FeedEntry.HISTORY_DATE,date);  mDb.insert(FeedEntry.TABLE_HISTORY_NAME,null,values);  mDb.close();}  }
class C{  public static <T>void addToRequestQueue(Request<T> req){  req.setTag(TAG);  getRequestQueue().add(req);}  }
class C{  public GanttTask(TaskImpl copy){  super(copy,false);  enableEvents(true);}  }
class C{  private String[] repairBrokenRole(String role){  String[] repairedRole=this.brokenRoles.get(role);  if (repairedRole != null) {    return repairedRole;  } else {    return new String[]{role};  }}  }
class C{  public boolean start(String file){  boolean ok=true;  try {    out=new BufferedOutputStream(new FileOutputStream(file));    ok=start(out);    closeStream=true;  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public static void main(String... args) throws Exception {  new ShowProgress().test();}  }
class C{  public int computeMaxGene(int position,float[] genome){  int phenotype=phenotype(position,genome);  if (phenotype == GENE_OUTPUT)   return numInputs + numNodes - 1;  if (phenotype == GENE_FUNCTION) {    return numFunctions - 1;  }  return nodeNumber(position,genome) - 1;}  }
class C{  private char processCharacterEscapeCodes(char endDelimiter){  pos++;  if (pos >= buffer.length) {    throw new IllegalStateException("Ran out of input in escape sequence");  }  if (buffer[pos] == ESCAPE_CHAR) {    pos++;    return ESCAPE_CHAR;  } else   if (buffer[pos] == endDelimiter) {    pos++;    return endDelimiter;  } else {    return ESCAPE_CHAR;  }}  }
class C{  public boolean isExportable(){  return this.exportable;}  }
class C{  public static void testIssue41(){  Map<String,Object> nullMap=new HashMap<String,Object>();  nullMap.put("key",null);  assertFalse(nullMap.isEmpty());  NSDictionary nullDict=(NSDictionary)NSObject.fromJavaObject(nullMap);  assertTrue(nullDict.isEmpty());  nullDict.put(null,"test");  assertTrue(nullDict.isEmpty());  nullDict.put("test",null);  assertTrue(nullDict.isEmpty());  try {    assertTrue(((NSDictionary)PropertyListParser.parse(nullDict.toXMLPropertyList().getBytes())).isEmpty());  } catch (  Exception e) {    throw new AssertionError("No exception should have occurred while parsing an empty dictionary",e);  }  String[] strArr=new String[3];  strArr[0]="";  strArr[1]=null;  strArr[2]=null;  NSArray nsArr=(NSArray)NSObject.fromJavaObject(strArr);  assertTrue(nsArr.containsObject(null));  assertEquals(nsArr.objectAtIndex(1),null);  assertEquals(nsArr.objectAtIndex(2),null);  try {    nsArr.toXMLPropertyList();    throw new AssertionError("Storing a NSArray containing a null value as a XML property list should throw an exception");  } catch (  NullPointerException ex) {  }  try {    nsArr.toASCIIPropertyList();    throw new AssertionError("Storing a NSArray containing a null value as a ASCII property list should throw an exception");  } catch (  NullPointerException ex) {  }  try {    nsArr.toGnuStepASCIIPropertyList();    throw new AssertionError("Storing a NSArray containing a null value as a GnuStep ASCII property list should throw an exception");  } catch (  NullPointerException ex) {  }  try {    byte[] bin=BinaryPropertyListWriter.writeToArray(nsArr);    throw new AssertionError("Storing a NSArray containing a null value as a binary property list should throw an exception");  } catch (  IOException ex) {  }}  }
class C{  public void update(double datum){  double d=(datum == 0.0) ? 0.0 : datum;  long[] data={Double.doubleToLongBits(d)};  updateWithHash(hash(data,DEFAULT_UPDATE_SEED));}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession(true);  sess.setMaxInactiveInterval(WebEnv.TIMEOUT);  StringBuffer output=new StringBuffer();  if (configLoaded && !fatalError) {    String acceptLanguage=request.getHeader("Accept-Language");    String acceptCharset=request.getHeader("Accept-Charset");    LocaleHandler lhandler=new LocaleHandler(acceptLanguage,acceptCharset);    RequestAnalyzer thisRequest=new RequestAnalyzer(this,request,true,"");    if (thisRequest.getIsRedirect()) {      response.sendRedirect(thisRequest.getRedirectURL());    } else {      Generator thisXMLGen=new Generator(this,request,thisRequest,new StringBuffer(""));      String xmlCode=thisXMLGen.get();      String xslCode=templateCache.getCM_Template(thisRequest.getCM_Container().getCM_Template_ID(),thisRequest.getWebProject().get_ID()).getTemplateXST();      try {        output.append(XSLTProcessor.run(request,xslCode,xmlCode));      } catch (      Exception E) {        response.sendError(500);      }      response.setContentType("text/html; charset=" + lhandler.getCharset());      response.setHeader("CMBuild",buildDate);      PrintWriter out;      out=response.getWriter();      out.print(output.toString());      out.close();    }  } else   if (fatalError) {    PrintWriter out;    out=response.getWriter();    out.print("<H1>Fatal Error:" + ErrorMessage + "</H1>");    out.close();  }}  }
class C{  private static boolean validateSingleX509CertChain(List<X509Certificate> chain) throws ExternalIDPExtraneousCertsInCertChainException, ExternalIDPCertChainInvalidTrustedPathException {  final String ALGO_PKIX="PKIX";  final String CERTSTORE_PROVIDER_COLLECTION="Collection";  try {    Set<TrustAnchor> anchors=new HashSet<TrustAnchor>();    anchors.add(new TrustAnchor(chain.get(chain.size() - 1),null));    X509CertSelector targetCertSelector=new X509CertSelector();    targetCertSelector.setCertificate(chain.get(0));    CertStore builderStore=CertStore.getInstance(CERTSTORE_PROVIDER_COLLECTION,new CollectionCertStoreParameters(chain));    PKIXBuilderParameters buildParams=new PKIXBuilderParameters(anchors,targetCertSelector);    buildParams.addCertStore(builderStore);    buildParams.setRevocationEnabled(false);    CertPathBuilder pathBuilder=CertPathBuilder.getInstance(ALGO_PKIX);    CertPathBuilderResult builderResult=pathBuilder.build(buildParams);    if (chain.size() - 1 != builderResult.getCertPath().getCertificates().size()) {      throw new ExternalIDPExtraneousCertsInCertChainException(chain);    }    return true;  } catch (  CertPathBuilderException cpbe) {    throw new ExternalIDPCertChainInvalidTrustedPathException(cpbe.getMessage(),chain);  }catch (  GeneralSecurityException gse) {    throw new ExternalIDPCertChainInvalidTrustedPathException(gse.getMessage(),chain);  }}  }
class C{  public void writeRawBinary(BinaryRawWriter writer) throws BinaryObjectException {  writer.writeString(path);}  }
class C{  public boolean supportsPcm(){  return supportedEncodings.contains(AudioFormat.ENCODING_PCM_16BIT);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void show(final JFrame parent,final ICallResolverTarget target){  final CallResolverDialog dialog=new CallResolverDialog(parent,target);  dialog.setVisible(true);}  }
class C{  public void clear(){  mValues.clear();}  }
class C{  public Boolean isHeaderDigestSettable(){  return headerDigestSettable;}  }
class C{  public void startElement(String name,String nsPrefix,String nsURI,String systemID,int lineNr){  String fullName=name;  if (nsPrefix != null) {    fullName=nsPrefix + ':' + name;  }  IXMLElement elt=this.prototype.createElement(fullName,nsURI,systemID,lineNr);  if (this.stack.empty()) {    this.root=elt;  } else {    IXMLElement top=(IXMLElement)this.stack.peek();    top.addChild(elt);  }  this.stack.push(elt);}  }
class C{  public static void assertAlmostEquals(String expected,String actual,int decimals){  assertAlmostEquals(null,expected,actual,decimals);}  }
class C{  public void addAccessory(HomekitAccessory accessory){  if (accessory.getId() <= 1 && !(accessory instanceof Bridge)) {    throw new IndexOutOfBoundsException("The ID of an accessory used in a bridge must be greater than 1");  }  addAccessorySkipRangeCheck(accessory);}  }
class C{  void updateForDecoderTypeID(List<DecoderFile> pList){  decoderBox.setModel(DecoderIndexFile.jComboBoxModelFromList(pList));  decoderBox.insertItemAt("<from locomotive settings>",0);  decoderBox.setSelectedIndex(1);}  }
class C{  protected boolean isLocked(){  return locked;}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="/adhoc",produces={MediaType.APPLICATION_JSON_UTF8_VALUE}) @ApiOperation(value="run an adhoc query",notes="Run an unnamed (unidentified), ad-hoc query passed as a URL parameter",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=500,message="GemFire throws an error or exception")}) @ResponseBody @ResponseStatus(HttpStatus.OK) @PreAuthorize("@securityService.authorize('DATA', 'READ')") public ResponseEntity<String> runAdhocQuery(@RequestParam("q") String oql){  logger.debug("Running an adhoc Query ({})...",oql);  oql=decode(oql);  final Query query=getQueryService().newQuery(oql);  try {    Object queryResult=query.execute();    return processQueryResponse(queryResult,"adhoc?q=" + oql);  } catch (  FunctionDomainException fde) {    throw new GemfireRestException("A function was applied to a parameter that is improper for that function!",fde);  }catch (  TypeMismatchException tme) {    throw new GemfireRestException("Bind parameter is not of the expected type!",tme);  }catch (  NameResolutionException nre) {    throw new GemfireRestException("Name in the query cannot be resolved!",nre);  }catch (  IllegalArgumentException iae) {    throw new GemfireRestException(" The number of bound parameters does not match the number of placeholders!",iae);  }catch (  IllegalStateException ise) {    throw new GemfireRestException("Query is not permitted on this type of region!",ise);  }catch (  QueryExecutionTimeoutException qete) {    throw new GemfireRestException("Query execution time is exceeded max query execution time (gemfire.Cache.MAX_QUERY_EXECUTION_TIME) configured! ",qete);  }catch (  QueryInvocationTargetException qite) {    throw new GemfireRestException("Data referenced in from clause is not available for querying!",qite);  }catch (  QueryExecutionLowMemoryException qelme) {    throw new GemfireRestException("Query execution gets canceled due to low memory conditions and the resource manager critical heap percentage has been set!",qelme);  }catch (  Exception e) {    throw new GemfireRestException("Server has encountered while executing Adhoc query!",e);  }}  }
class C{  public void run(){  setup();  log.info("start recovering...");  for (  TaskStorageManager taskStorageManager : taskStorageManagers) {    taskStorageManager.init();    taskStorageManager.stopStores();    log.debug("restored " + taskStorageManager.toString());  }  log.info("successfully recovered in " + storeBaseDir.toString());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecommentnodename.class,args);}  }
class C{  @Override protected boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime) throws EntryExistsException, DataLocationException {  InternalDistributedMember eventSender=originalSender;  if (eventSender == null) {    eventSender=getSender();  }  final Object key=getKey();  @Released final EntryEventImpl event=EntryEventImpl.create(r,getOperation(),key,null,getCallbackArg(),false,eventSender,true,false);  try {    if (this.versionTag != null) {      this.versionTag.replaceNullIDs(getSender());      event.setVersionTag(this.versionTag);    }    if (this.bridgeContext != null) {      event.setContext(this.bridgeContext);    }    event.setEventId(eventId);    event.setPossibleDuplicate(this.posDup);    PartitionedRegionDataStore ds=r.getDataStore();    boolean sendReply=true;    event.setInvokePRCallbacks(!notificationOnly);    if (!notificationOnly) {      Assert.assertTrue(ds != null,"This process should have storage for an item in " + this.toString());      try {        Integer bucket=Integer.valueOf(PartitionedRegionHelper.getHashKey(event));        event.setCausedByMessage(this);        r.getDataView().invalidateOnRemote(event,true,false);        this.versionTag=event.getVersionTag();        if (logger.isTraceEnabled(LogMarker.DM)) {          logger.trace(LogMarker.DM,"{} invalidateLocally in bucket: {}, key: {}",getClass().getName(),bucket,key);        }      } catch (      DataLocationException e) {        ((ForceReattemptException)e).checkKey(event.getKey());        throw e;      }catch (      EntryNotFoundException eee) {        if (logger.isDebugEnabled()) {          logger.debug("{}: operateOnRegion caught EntryNotFoundException {}",getClass().getName(),eee.getMessage(),eee);        }        sendReply(getSender(),getProcessorId(),dm,new ReplyException(eee),r,startTime);        sendReply=false;      }catch (      PrimaryBucketException pbe) {        sendReply(getSender(),getProcessorId(),dm,new ReplyException(pbe),r,startTime);        return false;      }    } else {      event.setRegion(r);      event.setOriginRemote(true);      if (this.versionTag != null) {        this.versionTag.replaceNullIDs(getSender());        event.setVersionTag(this.versionTag);      }      if (this.filterInfo != null) {        event.setLocalFilterInfo(this.filterInfo.getFilterInfo(dm.getDistributionManagerId()));      }      r.invokeInvalidateCallbacks(EnumListenerEvent.AFTER_INVALIDATE,event,r.isInitialized());    }    return sendReply;  }  finally {    event.release();  }}  }
class C{  public void testMultivariateCondMIforCoupledDataFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedOneStepNoisyDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={0.1400645};  System.out.println("Kraskov Cond MI as TE - multivariate coupled data 1, k=2,l=2");  System.out.println("  (0->2)");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{2}),2,2,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{-0.0181459};  System.out.println("  (2->0):");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{2}),MatrixUtils.selectColumns(data,new int[]{0}),2,2,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.1639186};  System.out.println("  (1->3):");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{1}),MatrixUtils.selectColumns(data,new int[]{3}),2,2,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0036976};  System.out.println("  (3->1):");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{3}),MatrixUtils.selectColumns(data,new int[]{1}),2,2,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0072169};  System.out.println("  (0->1) but with k=1,l=1:");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),1,1,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0011738};  System.out.println("  (1->2) but with k=1,l=1:");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{1}),MatrixUtils.selectColumns(data,new int[]{2}),1,1,kNNs,expectedFromTRENTOOL);}  }
class C{  @Override public StellarFunction apply(String s){  StellarFunctionInfo ret=_getFunctions().get(s);  if (ret == null) {    throw new IllegalStateException("Unable to resolve function " + s);  }  return ret.getFunction();}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public Collective(Collective c,Observer o,Contributor cb,Controller cr){  this(c.name,o,cb,cr);  if (c == null)   throw new IllegalArgumentException("null collective");  if (c.cache != null)   cache.putAll(c.cache);  if (c.commands != null)   commands.putAll(c.commands);  if (contributor != null)   cache.remove(contributor.getName());}  }
class C{  public RadioButton(){  this("");}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  public static void logError(String msg,Throwable ex){  getDefault().getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.OK,msg,ex));}  }
class C{  public void map(Text key,Route value,OutputCollector<Text,Route> output,Reporter reporter) throws IOException {  if (value.isFound()) {    String lookingFor=value.getLookingFor();    output.collect(new Text(lookingFor),value);  }}  }
class C{  public static void main(String[] args){  int N=Integer.parseInt(args[0]);  Complex[] x=new Complex[N];  for (int i=0; i < N; i++) {    x[i]=new Complex(i,0);    x[i]=new Complex(-2 * Math.random() + 1,0);  }  show(x,"x");  Complex[] y=fft(x);  show(y,"y = fft(x)");  Complex[] z=ifft(y);  show(z,"z = ifft(y)");  Complex[] c=cconvolve(x,x);  show(c,"c = cconvolve(x, x)");  Complex[] d=convolve(x,x);  show(d,"d = convolve(x, x)");}  }
class C{  public ZookeeperStateMachinePersist(CuratorFramework curatorClient,String path,String logPath,int logSize){  if (logPath != null) {    Assert.state(logSize > 0 && ((logSize & -logSize) == logSize),"Log size must be positive and power of two");  }  this.curatorClient=curatorClient;  this.path=path;  this.logPath=logPath;  this.logSize=logSize;}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public static String formatRfc822Date(Date date){  return getRfc822DateFormat().format(date);}  }
class C{  public boolean hasRelationship(Vertex type,Vertex target){  Relationship relationship=getRelationship(type,target);  return (relationship != null) && (!relationship.isInverse());}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/{applicationName}",method=RequestMethod.DELETE) public JsonResponse deleteApplication(JsonInput jsonInput) throws ServiceException, CheckException {  jsonInput.validateRemoveApp();  String applicationName=jsonInput.getApplicationName();  User user=this.authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  authentificationUtils.canStartDeleteApplicationAction(user,application,Locale.ENGLISH);  try {    applicationEventPublisher.publishEvent(new ApplicationPendingEvent(application));    logger.info("delete application :" + applicationName);    applicationService.remove(application,user);  } catch (  ServiceException e) {    applicationEventPublisher.publishEvent(new ApplicationFailEvent(application));  }  logger.info("Application " + applicationName + " is deleted.");  return new HttpOk();}  }
class C{  public RestoreSnapshotRequestBuilder(ElasticsearchClient client,RestoreSnapshotAction action){  super(client,action,new RestoreSnapshotRequest());}  }
class C{  public void removeComponentListener(ComponentListener cl){  super.removeComponentListener(cl);  if (localHackList != null) {    localHackList.remove(cl);  }}  }
class C{  private void path() throws Exception {  if (data[off] == '/') {    throw new PathException("Path '%s' in %s references document root",path,type);  }  if (data[off] == '.') {    skip();  }  while (off < count) {    if (attribute) {      throw new PathException("Path '%s' in %s references an invalid attribute",path,type);    }    segment();  }  truncate();  build();}  }
class C{  @Override public final boolean equals(Object o){  if (!(o instanceof Sequence))   return false;  if (o == this)   return true;  Sequence other=(Sequence)o;  if (this.getStatementsWithInputs().size() != other.getStatementsWithInputs().size()) {    return GenInputsAbstract.debug_checks && verifyFalse("size",other);  }  for (int i=0; i < this.statements.size(); i++) {    Statement thisStatement=this.statements.get(i);    Statement otherStatement=other.statements.get(i);    if (GenInputsAbstract.debug_checks) {      assert this.statements.get(i) == thisStatement;      assert other.statements.get(i) == otherStatement;    }    if (!thisStatement.equals(otherStatement)) {      return GenInputsAbstract.debug_checks && verifyFalse("statement index " + i,other);    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.880 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void clearIssues(){  issues.clear();}  }
class C{  public int indexOf(int c){  return indexOf(c,0);}  }
class C{  @Deprecated public static String longestCommonPrefix(String... input){  String prefix="";  if (input.length > 0) {    prefix=input[0];  }  for (int i=1; i < input.length; ++i) {    String s=input[i];    int j=0;    for (int length=Math.min(prefix.length(),s.length()); j < length; ++j) {      if (prefix.charAt(j) != s.charAt(j)) {        break;      }    }    prefix=prefix.substring(0,j);  }  return prefix;}  }
class C{  private long toSubnet(InetAddress address){  if (address instanceof Inet4Address) {    return toInt(address) & (int)subnetMask;  } else {    return toLong(address) & subnetMask;  }}  }
class C{  public static File makeTempDir(String prefix){  try {    return Files.createTempDirectory(prefix).toFile();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  LoggingThreadGroup(final String name,final Logger logger){  super(name);  this.logger=logger;}  }
class C{  public boolean isDebugMode(){  return debugMode;}  }
class C{  public final CC gapX(String before,String after){  if (before != null)   hor.setGapBefore(ConstraintParser.parseBoundSize(before,true,true));  if (after != null)   hor.setGapAfter(ConstraintParser.parseBoundSize(after,true,true));  return this;}  }
class C{  public void addExpectedRemindersQuery(String expectedRemindersQuery){  this.mExpectedRemindersQueries.add(expectedRemindersQuery);}  }
class C{  @NotNull @ObjectiveCName("requestRevokeLinkCommandWithGid:") public Command<String> revokeInviteLink(int gid){  return null;}  }
class C{  private Set<String> waitForMacAppQuit(String browser){  Set<String> runningApps;  boolean appClosed=true;  final long startMillis=System.currentTimeMillis();  final long waitMillis=100;  do {    runningApps=runningApplications();    if (runningApps.contains(browser)) {      appClosed=false;      try {        Thread.sleep(waitMillis);      } catch (      InterruptedException e) {        return runningApps;      }      long currentMillis=System.currentTimeMillis();      if (currentMillis - startMillis >= MAX_TERMINATE_WAIT_MILLIS)       break;    } else {      appClosed=true;    }  } while (!appClosed);  return runningApps;}  }
class C{  public IOException checkCertificate(){  SSLSocketFactory factory=context.getSocketFactory();  try {    SSLSocket socket=(SSLSocket)factory.createSocket(host,port);    socket.setSoTimeout(10000);    socket.startHandshake();    socket.close();    return null;  } catch (  IOException e) {    return e;  }}  }
class C{  public void cleanWaitTaskQueue(){  taskManager.cleanWaitTaskQueue();}  }
class C{  public static SelectClauseSpecCompiled compileSelectAllowSubselect(SelectClauseSpecRaw spec) throws ExprValidationException {  ExprNodeSubselectDeclaredDotVisitor visitor=new ExprNodeSubselectDeclaredDotVisitor();  List<SelectClauseElementCompiled> selectElements=new ArrayList<SelectClauseElementCompiled>();  for (  SelectClauseElementRaw raw : spec.getSelectExprList()) {    if (raw instanceof SelectClauseExprRawSpec) {      SelectClauseExprRawSpec rawExpr=(SelectClauseExprRawSpec)raw;      rawExpr.getSelectExpression().accept(visitor);      selectElements.add(new SelectClauseExprCompiledSpec(rawExpr.getSelectExpression(),rawExpr.getOptionalAsName(),rawExpr.getOptionalAsName(),rawExpr.isEvents()));    } else     if (raw instanceof SelectClauseStreamRawSpec) {      SelectClauseStreamRawSpec rawExpr=(SelectClauseStreamRawSpec)raw;      selectElements.add(new SelectClauseStreamCompiledSpec(rawExpr.getStreamName(),rawExpr.getOptionalAsName()));    } else     if (raw instanceof SelectClauseElementWildcard) {      SelectClauseElementWildcard wildcard=(SelectClauseElementWildcard)raw;      selectElements.add(wildcard);    } else {      throw new IllegalStateException("Unexpected select clause element class : " + raw.getClass().getName());    }  }  return new SelectClauseSpecCompiled(selectElements.toArray(new SelectClauseElementCompiled[selectElements.size()]),spec.isDistinct());}  }
class C{  public Interpreter(){  this(new StringReader(""),System.out,System.err,false,null);  evalOnly=true;  setu("bsh.evalOnly",Primitive.TRUE);}  }
class C{  private boolean isListChildUnderClipped(float x,float y){  final View listChild=findListChildUnder(x,y);  return listChild != null && isDescendantClipped(listChild);}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.814 -0500",hash_original_method="AEC5F5D30A84CFEC2D9D1903833FB78B",hash_generated_method="94924C087BDEF419A601243DE7F68DFF") private AggregationExceptions(){}  }
class C{  @Override protected void finalize() throws Throwable {  try {    NativeCollation.closeElements(address);  }  finally {    super.finalize();  }}  }
class C{  public void testChaining() throws Exception {  BasicUserNameMapper mapper1=new BasicUserNameMapper();  mapper1.setMappings(Collections.singletonMap("1","101"));  KerberosUserNameMapper mapper2=new KerberosUserNameMapper();  mapper2.setInstance(INSTANCE);  mapper2.setRealm(REALM);  ChainedUserNameMapper mapper=create(mapper1,mapper2);  assertEquals("101" + "/" + INSTANCE + "@"+ REALM,mapper.map("1"));  assertEquals("2" + "/" + INSTANCE + "@"+ REALM,mapper.map("2"));  assertEquals(IgfsUtils.fixUserName(null) + "/" + INSTANCE+ "@"+ REALM,mapper.map(null));}  }
class C{  public static String unquote(String string){  if (string.startsWith("'") && string.endsWith("'")) {    string=string.substring(1,string.length() - 1);    if ((string.indexOf("\\n") != -1) || (string.indexOf("\\r") != -1) || (string.indexOf("\\'") != -1)|| (string.indexOf("\\\"") != -1)|| (string.indexOf("\\\\") != -1)|| (string.indexOf("\\t") != -1)|| (string.indexOf("\\%") != -1)|| (string.indexOf("\\u001E") != -1)) {      string=unbackQuoteChars(string);    }  }  return string;}  }
class C{  protected Node newNode(){  return new SVGOMVKernElement();}  }
class C{  public RolVO abrirRol(String idRol){  RolVO rol=rolDBEntity.getRolById(idRol);  getRolAuthorizationHelper().configureRol(rol);  return rol;}  }
class C{  protected Connection createConnection() throws Exception {  return connectionFactory.createConnection();}  }
class C{  public synchronized int hashCode(){  int h=0;  if (count == 0 || loadFactor < 0)   return h;  loadFactor=-loadFactor;  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   h+=e.key.hashCode() ^ e.value.hashCode();  loadFactor=-loadFactor;  return h;}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  final DistanceQuery<O> distanceQuery=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnQuery=database.getKNNQuery(distanceQuery,k + 1);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Compute kNN weights",relation.size(),LOG) : null;  DoubleMinMax minmax=new DoubleMinMax();  WritableDoubleDataStore knnw_score=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final KNNList knn=knnQuery.getKNNForDBID(iditer,k + 1);    double skn=0;    int i=0;    for (DoubleDBIDListIter neighbor=knn.iter(); i < k && neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(iditer,neighbor)) {        continue;      }      skn+=neighbor.doubleValue();      ++i;    }    if (i < k) {      skn=Double.POSITIVE_INFINITY;    }    knnw_score.putDouble(iditer,skn);    minmax.put(skn);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  DoubleRelation res=new MaterializedDoubleRelation("kNN weight Outlier Score","knnw-outlier",knnw_score,relation.getDBIDs());  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.,Double.POSITIVE_INFINITY,0.);  return new OutlierResult(meta,res);}  }
class C{  protected IntLiteralImpl(){  super();}  }
class C{  public AsyncMessageHeader(AsyncMessageHeader other){  __isset_bitfield=other.__isset_bitfield;  this.transactionId=other.transactionId;}  }
class C{  public static void update(File directory){  if (directory != null && directory.exists()) {    Properties sysProps=new Properties(System.getProperties());    sysProps.setProperty("user.dir",directory.getAbsolutePath());    System.setProperties(sysProps);  }}  }
class C{  public static int keyBindingDescriptionToKeyModifier(String keyBindingDescription){  if (StringUtils.isBlank(keyBindingDescription)) {    return 0;  } else   if (keyBindingDescription.startsWith("ALT")) {    return SWT.ALT;  } else   if (keyBindingDescription.startsWith("CTRL")) {    return SWT.CTRL;  } else   if (keyBindingDescription.startsWith("CMD")) {    return SWT.COMMAND;  } else {    return 0;  }}  }
class C{  public void deletePanel(Editor panel){  if (log.isDebugEnabled()) {    log.debug("deletePanel");  }  if (panelsList.size() == 0) {    return;  }  for (int i=0; i < panelsList.size(); i++) {    Object o=panelsList.get(i);    if (o == panel) {      if (!panel.equals(panel.getTargetFrame())) {        panel.getTargetFrame().dispose();      }      panelsList.remove(panel);      panelsSubMenu.remove(i);      if (panelsList.size() == 0) {        panelsSubMenu.add(noPanelsItem);      }      return;    }  }}  }
class C{  public AppletServer(int port) throws IOException, NotFoundException, CannotCompileException {  this(ClassPool.getDefault(),new StubGenerator(),port);}  }
class C{  public static String newStringUtf8(final byte[] bytes){  return newString(bytes,Charsets.UTF_8);}  }
class C{  public static <T>void assertSetEquals(Set<T> actualSet,T... expectedElements){  Set<T> expectedSet=new HashSet<T>(expectedElements.length);  for (  T expectedElement : expectedElements) {    expectedSet.add(expectedElement);  }  assertEquals(expectedSet,actualSet);}  }
class C{  public static void trimIndentation(String[] lines,int tabWidth,int indentWidth,boolean considerFirstLine){  String[] toDo=new String[lines.length];  int minIndent=Integer.MAX_VALUE;  for (int i=considerFirstLine ? 0 : 1; i < lines.length; i++) {    String line=lines[i];    if (containsOnlyWhitespaces(line))     continue;    toDo[i]=line;    int indent=computeIndentUnits(line,tabWidth,indentWidth);    if (indent < minIndent) {      minIndent=indent;    }  }  if (minIndent > 0) {    for (int i=considerFirstLine ? 0 : 1; i < toDo.length; i++) {      String s=toDo[i];      if (s != null)       lines[i]=trimIndent(s,minIndent,tabWidth,indentWidth); else {        String line=lines[i];        int indent=computeIndentUnits(line,tabWidth,indentWidth);        if (indent > minIndent)         lines[i]=trimIndent(line,minIndent,tabWidth,indentWidth); else         lines[i]=trimLeadingTabsAndSpaces(line);      }    }  }}  }
class C{  public ISchedulingRule modifyRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return root;  return factoryFor(resource).modifyRule(resource);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.743 -0500",hash_original_method="E0FCF5C2DD1FC8B8CECA3F88CA26F2FA",hash_generated_method="AEAC7D1422FF6F48C2FC8B5E88EABD1C") public Time(String timezone){  if (timezone == null) {    throw new NullPointerException("timezone is null!");  }  this.timezone=timezone;  this.year=1970;  this.monthDay=1;  this.isDst=-1;}  }
class C{  public static boolean checkAndConvertToken(PsiBuilder b,int l,IElementType targetTokenType,IElementType sourceTokenType){  return checkAndCollapseToken(b,l,targetTokenType,sourceTokenType);}  }
class C{  private void fetchSearchServiceCardsFromServer(String keyword){  final Map<String,String> params=new HashMap<String,String>(5);  params.put(HttpConstants.LATITUDE,SharedPreferenceHelper.getString(R.string.pref_latitude));  params.put(HttpConstants.LONGITUDE,SharedPreferenceHelper.getString(R.string.pref_longitude));  params.put(HttpConstants.TYPE,HttpConstants.SearchType.SERVICE_CARD);  params.put(HttpConstants.PER,"20");  params.put(HttpConstants.RADIUS,"50");  params.put(HttpConstants.TITLE,keyword);  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.SEARCH_SERVICES);  retroCallbackList.add(retroCallback);  params.put(HttpConstants.PAGE,"1");  mYeloApi.getServiceCards(params,retroCallback);  mSwipeRefreshLayout.setRefreshing(true);}  }
class C{  public void putInteger(BigInteger i) throws IOException {  write(DerValue.tag_Integer);  byte[] buf=i.toByteArray();  putLength(buf.length);  write(buf,0,buf.length);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LineAndShapeRenderer)) {    return false;  }  LineAndShapeRenderer that=(LineAndShapeRenderer)obj;  if (this.baseLinesVisible != that.baseLinesVisible) {    return false;  }  if (!ObjectUtilities.equal(this.seriesLinesVisible,that.seriesLinesVisible)) {    return false;  }  if (!ObjectUtilities.equal(this.linesVisible,that.linesVisible)) {    return false;  }  if (this.baseShapesVisible != that.baseShapesVisible) {    return false;  }  if (!ObjectUtilities.equal(this.seriesShapesVisible,that.seriesShapesVisible)) {    return false;  }  if (!ObjectUtilities.equal(this.shapesVisible,that.shapesVisible)) {    return false;  }  if (!ObjectUtilities.equal(this.shapesFilled,that.shapesFilled)) {    return false;  }  if (!ObjectUtilities.equal(this.seriesShapesFilled,that.seriesShapesFilled)) {    return false;  }  if (this.baseShapesFilled != that.baseShapesFilled) {    return false;  }  if (this.useOutlinePaint != that.useOutlinePaint) {    return false;  }  if (this.useSeriesOffset != that.useSeriesOffset) {    return false;  }  if (this.itemMargin != that.itemMargin) {    return false;  }  return super.equals(obj);}  }
class C{  public float readFloat() throws EOFException, FormatException {  return Float.intBitsToFloat(readInteger());}  }
class C{  public void assignOne(){  int i;  for (i=1; i < blocks; i++) {    value[i]=0x00;  }  value[0]=0x01;}  }
class C{  @Override public void filter(int kind){  PImage temp=get();  temp.filter(kind);  set(0,0,temp);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static byte[] convertDEREncodedSignatureToJWSConcatenated(final byte[] derEncodedSignatureValue) throws IOException {  final ASN1InputStream asn1InputStream=new ASN1InputStream(derEncodedSignatureValue);  final ASN1Primitive asn1Primitive=asn1InputStream.readObject();  asn1InputStream.close();  final ASN1Sequence asn1Sequence=(ASN1Sequence.getInstance(asn1Primitive));  final ASN1Integer rASN1=(ASN1Integer)asn1Sequence.getObjectAt(0);  final ASN1Integer sASN1=(ASN1Integer)asn1Sequence.getObjectAt(1);  final X9IntegerConverter x9IntegerConverter=new X9IntegerConverter();  final byte[] r=x9IntegerConverter.integerToBytes(rASN1.getValue(),32);  final byte[] s=x9IntegerConverter.integerToBytes(sASN1.getValue(),32);  final byte[] concatenatedSignatureValue=new byte[64];  System.arraycopy(r,0,concatenatedSignatureValue,0,32);  System.arraycopy(s,0,concatenatedSignatureValue,32,32);  return concatenatedSignatureValue;}  }
class C{  public boolean isForPlain(){  return ((!this.isForIn()) && (!this.isForOf()));}  }
class C{  public boolean isStatic(){  return isStatic;}  }
class C{  private void uninstallBorder(JRootPane root){  LookAndFeel.uninstallBorder(root);}  }
class C{  public static boolean equalDirs(Configuration conf,Path src,Path dest,Optional<PathFilter> filter) throws IOException {  return equalDirs(conf,src,dest,filter,false);}  }
class C{  public void managedAccountsUpdated(String accountNumber){}  }
class C{  public boolean hasANIFlag(){  return mMessage.get(sANIFlag);}  }
class C{  public Composer tweenLoop(boolean repeat){  mTweenLoop=repeat;  return this;}  }
class C{  public void testMoveRenameDirectorySourceParentRootSourceMissing() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR_NEW.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW,dir),null);  create(igfs,paths(DIR_NEW,SUBDIR_NEW),null);  igfs.rename(dir,SUBSUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,dir);}  }
class C{  public static void assertArrayEqual(double[] expected,double[] actual,double maxRelativeError,String errorMessage){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ", "+ errorMessage+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],maxRelativeError,errorMessage);  }}  }
class C{  public void testBug13453() throws Exception {  StringBuilder urlBuf=new StringBuilder(dbUrl);  if (dbUrl.indexOf('?') == -1) {    urlBuf.append('?');  } else {    urlBuf.append('&');  }  urlBuf.append("sessionVariables=@testBug13453='%25%26+%3D'");  Connection encodedConn=null;  try {    encodedConn=DriverManager.getConnection(urlBuf.toString(),null);    this.rs=encodedConn.createStatement().executeQuery("SELECT @testBug13453");    assertTrue(this.rs.next());    assertEquals("%& =",this.rs.getString(1));  }  finally {    if (this.rs != null) {      this.rs.close();      this.rs=null;    }    if (encodedConn != null) {      encodedConn.close();    }  }}  }
class C{  public boolean isLastInvoice(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_LastInvoice);}  }
class C{  @SuppressWarnings("unchecked") private <T extends Element>Collection<T> castElementCollection(Object obj){  return (Collection<T>)obj;}  }
class C{  public static <T>List<T> arrayToList(T[] array){  List<T> list=new LinkedList<>();  Collections.addAll(list,array);  return list;}  }
class C{  public static String join(final List params,final String sep){  final List<String> list=new ArrayList<>();  for (  Object value : params) {    list.add(pretty(value));  }  return StringUtils.join(list,sep);}  }
class C{  public void reset(){  functions.clear();  sources.clear();  templates.clear();}  }
class C{  public void testWriteSimpleRootValue() throws Exception {  String json=MAPPER.writeValueAsString(new FlatPojo("Bubba",1,2,false));  assertEquals("[false,\"Bubba\",1,2]",json);}  }
class C{  public boolean isFullyQualified(){  Object oo=get_Value(COLUMNNAME_IsFullyQualified);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private String[] alphaMixedNumeric(){  return combineStringArrays(alphaMixed(),JexlStringFunctions.numeric);}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  final void fireActivated(){  myDispatcher.getMulticaster().activated(this);}  }
class C{  public sectionCommonAdapter(List<String> list){  super(list);}  }
class C{  public static void notifyClientLeft(final DistributedMember clientId){  notifyListeners(clientId,true,EventType.LEFT);}  }
class C{  private void checkDividerNoHasChildren(int divId) throws Exception {  FolderTokenDividers divs=null;  FolderTokenDocuments docs=null;  FolderTokenFdrLinks links=null;  int i;  boolean alsoRemoveChildren=false;  divs=getDividerChildren(divId,alsoRemoveChildren);  if (divs.count() > 0) {    throw new IeciTdException(FolderBaseError.EC_DIVIDER_HAS_CHILDREN,FolderBaseError.EM_DIVIDER_HAS_CHILDREN);  }  docs=getDocumentChildren(divId,alsoRemoveChildren);  if (docs.count() > 0) {    throw new IeciTdException(FolderBaseError.EC_DIVIDER_HAS_CHILDREN,FolderBaseError.EM_DIVIDER_HAS_CHILDREN);  }  links=getFolderLinkChildren(divId,alsoRemoveChildren);  if (links.count() > 0) {    throw new IeciTdException(FolderBaseError.EC_DIVIDER_HAS_CHILDREN,FolderBaseError.EM_DIVIDER_HAS_CHILDREN);  }}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") private boolean isPhoneNumber(String value){  String valueNoDeshes=value.replaceAll("-","");  try {    Long.parseLong(valueNoDeshes);    return true;  } catch (  IllegalArgumentException iae) {    return false;  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TVARIABLE;}  }
class C{  protected AnnotationArgumentImpl(){  super();}  }
class C{  public FileChannelImpl(Object stream,FileDescriptor fd,int mode){  this.fd=fd;  this.stream=stream;  this.mode=mode;}  }
class C{  public void append(int key,long value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    growKeyAndValueArrays(pos + 1);  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public void replace(T item,int position){  getList().set(position,item);  notifyItemChanged(position);}  }
class C{  public Principal peerPrincipal(){  return !peerCertificates.isEmpty() ? ((X509Certificate)peerCertificates.get(0)).getSubjectX500Principal() : null;}  }
class C{  public void addStep(final IStep step){  if (step == null)   throw new IllegalArgumentException();  if (step == this)   throw new IllegalArgumentException();  steps.add(step);}  }
class C{  public DataSet subDataset(String name,List<Range> ranges){  DataSet subDataset=new DataSet(name);  for (  Range range : ranges) {    for (int index=range.getStartIndex(); index <= range.getEndIndex(); index++) {      subDataset.getExamples().add(this.getExamples().get(index));    }  }  return subDataset;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static boolean isLengthValid(String password,int validLength){  return password.length() >= validLength;}  }
class C{  public boolean addPropertyToCurrent(final String property,final String value){  boolean ret=false;  if (currentProperties != null) {    currentProperties.put(property,value);    ret=true;  }  return ret;}  }
class C{  public TunnelTimeoutTask(long tunnelTimeout){  this.tunnelTimeout=tunnelTimeout;}  }
class C{  public CacheRequest(final CharSequence url,final String method,final EtagCache cache) throws HttpRequestException {  super(url,method);  this.cache=cache;}  }
class C{  public PluginListBox(final IPluginRegistry<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> registry,final ConfigManager configFile){  super(createPluginListModel(registry,configFile));  model=(DefaultListModel<PluginItem<T>>)getModel();  checkLoadedPlugins(configFile);}  }
class C{  void fixConstraints(Method m,Block b,TypeConstraints bc,LocalVarState block_state){  verboseStatus("fixConstraints " + b);  Map<Expr,Expr> coerce_in_place=new HashMap<Expr,Expr>();  if (block_state != null) {    Set<Integer> coerced_locals=new HashSet<Integer>(bc.coercions.keySet());    for (    Integer r : coerced_locals) {      if (!block_state.read_after_def.get(r)) {        Expr generator=block_state.generating_exprs.get(r);        if (generator != null) {          coerce_in_place.put(generator,coerceExpr(m,bc.coercions.get(r).t,generator));          bc.coercions.remove(r);        }      }    }    if (!coerce_in_place.isEmpty()) {      Deque<Expr> replaced_exprs=new ArrayDeque<Expr>();      while (!b.exprs.isEmpty()) {        Expr ex=b.exprs.removeFirst();        if (coerce_in_place.containsKey(ex)) {          replaced_exprs.add(coerce_in_place.get(ex));          coerce_in_place.remove(ex);        }        replaced_exprs.add(ex);      }      assert (coerce_in_place.isEmpty());      b.exprs=replaced_exprs;    }  }  Expr last=b.succ().length > 0 ? b.exprs.removeLast() : null;  for (  Integer regnum : bc.coercions.keySet()) {    Typeref ty=bc.coercions.get(regnum);    if (ty.equals(VOID().ref)) {      Expr void_expr=new Expr(m,OP_pushundefined);      b.exprs.add(void_expr);      b.exprs.add(setlocal(m,regnum,void_expr));    }    if (ty.equals(NULL().ref)) {      Expr void_expr=new Expr(m,OP_pushnull);      b.exprs.add(void_expr);      b.exprs.add(setlocal(m,regnum,void_expr));    } else {      Expr getlocal=getlocal(m,regnum);      b.exprs.add(getlocal);      Expr coerce_expr=coerceExpr(m,ty.t,getlocal);      b.exprs.add(coerce_expr);      b.exprs.add(setlocal(m,regnum,coerce_expr));    }    verboseStatus("\tlocal " + regnum);  }  for (  Integer k : bc.killregs) {    b.exprs.add(new Expr(m,OP_kill,k.intValue()));    verboseStatus("kill " + k);  }  if (last != null)   b.exprs.add(last);}  }
class C{  public boolean parseHTTP(MessageHeader responses,ProgressSource pi,HttpURLConnection httpuc) throws IOException {  try {    serverInput=serverSocket.getInputStream();    if (capture != null) {      serverInput=new HttpCaptureInputStream(serverInput,capture);    }    serverInput=new BufferedInputStream(serverInput);    return (parseHTTPHeader(responses,pi,httpuc));  } catch (  SocketTimeoutException stex) {    if (ignoreContinue) {      closeServer();    }    throw stex;  }catch (  IOException e) {    closeServer();    cachedHttpClient=false;    if (!failedOnce && requests != null) {      failedOnce=true;      if (getRequestMethod().equals("CONNECT") || streaming || (httpuc.getRequestMethod().equals("POST") && !retryPostProp)) {      } else {        openServer();        if (needsTunneling()) {          MessageHeader origRequests=requests;          httpuc.doTunneling();          requests=origRequests;        }        afterConnect();        writeRequests(requests,poster);        return parseHTTP(responses,pi,httpuc);      }    }    throw e;  }}  }
class C{  @Override protected void preRenderCallback(EntitySpirit entitylivingbaseIn,float partialTickTime){  float f=0.5f;  GlStateManager.scale(f,f,f);  GlStateManager.disableLighting();  Minecraft.getMinecraft().entityRenderer.disableLightmap();}  }
class C{  private byte[] shortToByteArray(short number){  return new byte[]{(byte)(number >>> 8),(byte)number};}  }
class C{  private void writeOriginal(HttpServletRequest request,HttpServletResponse response,Page page) throws IOException {  response.setContentLength(page.getContentLength());  if (request.getAttribute(USING_STREAM).equals(Boolean.TRUE)) {    PrintWriter writer=new PrintWriter(response.getOutputStream());    page.writePage(writer);    writer.flush();    response.getOutputStream().flush();  } else {    page.writePage(response.getWriter());    response.getWriter().flush();  }}  }
class C{  public static IntList dincrList(IntList L,int x){  return L;}  }
class C{  public void registerSpanTagHandler(SpanTagHandler handler){  handlers.add(handler);  handlersByCharacterStyle.put(handler.getSupportedCharacterStyle(),handler);}  }
class C{  public Automaton toAutomaton(int maxDeterminizedStates) throws IllegalArgumentException, TooComplexToDeterminizeException {  return toAutomaton(null,null,maxDeterminizedStates);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public ConcurrentSkipListSet(Comparator<? super E> comparator){  m=new ConcurrentSkipListMap<E,Object>(comparator);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.VERSION_CONSTRAINT__EXCL_LOWER_BOUND:    setExclLowerBound((Boolean)newValue);  return;case N4mfPackage.VERSION_CONSTRAINT__LOWER_VERSION:setLowerVersion((DeclaredVersion)newValue);return;case N4mfPackage.VERSION_CONSTRAINT__EXCL_UPPER_BOUND:setExclUpperBound((Boolean)newValue);return;case N4mfPackage.VERSION_CONSTRAINT__UPPER_VERSION:setUpperVersion((DeclaredVersion)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public String toString(){  if (m_root == null) {    return "No model built yet!";  }  return m_root.toString(m_printLeafModels);}  }
class C{  public <T extends Expression>List<T> all(final Class<T> expected){  final List<T> result=ImmutableList.copyOf(args.stream().map(null).iterator());  args.clear();  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  @LargeTest public void testNullAPIs() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final String maskFilename=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  boolean flagForException=false;  try {    mVideoEditor.addAudioTrack(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Video Editor with null Audio Track",flagForException);  flagForException=false;  try {    mVideoEditor.addMediaItem(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Video Editor with NULL Image Item ",flagForException);  flagForException=false;  try {    mVideoEditor.addMediaItem(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Video Editor with NULL Video Item ",flagForException);  MediaVideoItem mediaVideoItem1=null;  try {    mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  } catch (  IllegalArgumentException e) {    assertTrue("Cannot Create Video Item",false);  }  mediaVideoItem1.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem1);  flagForException=false;  try {    mediaVideoItem1.addEffect(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Video with null effect ",flagForException);  flagForException=false;  try {    mediaVideoItem1.addOverlay(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Video with null overlay ",flagForException);  final MediaImageItem mediaImageItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",maskFilename,10000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaImageItem.setDuration(15000);  mVideoEditor.addMediaItem(mediaImageItem);  flagForException=false;  try {    mediaImageItem.addEffect(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Image with null effect ",flagForException);  flagForException=false;  try {    mediaImageItem.addOverlay(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Image with null overlay ",flagForException);  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  mVideoEditor.addAudioTrack(audioTrack);  flagForException=false;  try {    mVideoEditor.addTransition(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Added null transition ",flagForException);  flagForException=false;  try {    mVideoEditor.addTransition(null);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Added null transition ",flagForException);}  }
class C{  public WaypointPainter(){  setAntialiasing(true);  setCacheable(false);}  }
class C{  public AgentConfigImpl(String[] args){  this(toProperties(args));  this.originalCmdLineArgs=args;}  }
class C{  public void removeItemByTitle(String title){  mItemMap.remove(title);  mAdapter.remove(title);}  }
class C{  public void updateRectangle(float lt1,float ln1,float lt2,float ln2,int lType,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRectangle.write(lt1,ln1,lt2,ln2,lType,properties,link.dos);}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,HttpCookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          HttpCookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,HttpCookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public float value(){  return _map._values[_index];}  }
class C{  @Override public String toString(){  return Integer.toString(id);}  }
class C{  public void deleteProject(String applicationName){  try {    logger.info("JenkinsService : deleteProject " + applicationName);    if (rootToken == null || rootToken.trim().length() == 0) {      logger.warn("Cannot use this feature because no token for Jenkins");      return;    }    if (jenkinsOpen) {      HttpClient httpclient=HttpClientBuilder.create().build();      String uri="http://" + JENKINS_IP + "/job/"+ applicationName+ "/doDelete";      HttpPost post=new HttpPost(uri);      post.setHeader("Authorization",rootToken);      httpclient.execute(post);    }  } catch (  Exception e) {    logger.error(applicationName,e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.280 -0500",hash_original_method="B8FAFDCBEF6ED1DBF49858CA951E344D",hash_generated_method="8AA59EA901BC30D3E50F0E3A0F1E227C") private void release(int pointer){  addTaint(pointer);}  }
class C{  public static void save(ChunkStorage storage,NBTTagCompound nbt,boolean packet){  ResourceLocation type=ChunkStorage.getStorageTypeID(storage.getClass());  if (type == null)   throw new RuntimeException("Chunk storage type not mapped");  nbt.setString("type",type.toString());  NBTTagCompound storageNBT=new NBTTagCompound();  if (packet) {    storage.writeToPacketNBT(storageNBT);  } else {    storage.writeToNBT(storageNBT);  }  nbt.setTag("storage",storageNBT);}  }
class C{  public void testRemoveElement(){  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=1; i < SIZE; i+=2) {    assertTrue(q.contains(i));    assertTrue(q.remove(i));    assertFalse(q.contains(i));    assertTrue(q.contains(i - 1));  }  for (int i=0; i < SIZE; i+=2) {    assertTrue(q.contains(i));    assertTrue(q.remove(i));    assertFalse(q.contains(i));    assertFalse(q.remove(i + 1));    assertFalse(q.contains(i + 1));  }  assertTrue(q.isEmpty());}  }
class C{  public <U>SimpleReactStream<Integer> from(final IntStream stream){  return from(stream.boxed());}  }
class C{  public void requestSwfInfo(int at,int isolateId) throws NoResponseException {  DMessage dm=DMessageCache.alloc(4);  dm.setType(DMessage.OutSwfInfo);  dm.setTargetIsolate(isolateId);  dm.putWord(at);  dm.putWord(0);  int to=getPreference(SessionManager.PREF_CONTEXT_RESPONSE_TIMEOUT);  if (!simpleRequestResponseMessage(dm,DMessage.InSwfInfo,to))   throw new NoResponseException(to);}  }
class C{  public boolean containsPair(String variable,Value value){  Value v=map.get(variable);  return v != null && v.equals(value);}  }
class C{  protected String lowerCaseName(String name){  return name.toLowerCase(Locale.US);}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,String pathDocumentFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,parentDivId,fileExt,sortOrder,pathDocumentFile,null);}  }
class C{  private void commandUnmonitor(StringTokenizer t) throws NoSessionException {  if (!t.hasMoreTokens()) {    env.error("Argument required");  } else {    env.getMonitorListModel().remove(t.nextToken(""));  }}  }
class C{  public Connection createConnection(ConnectionFactory cf) throws JMSException {  Connection connection=cf.createConnection();  if (getClientID() != null) {    connection.setClientID(getClientID());  }  return connection;}  }
class C{  public FragmentedHandshakeMessage(byte[] fragmentedBytes,HandshakeType type,int fragmentOffset,int messageLength,InetSocketAddress peerAddress){  super(peerAddress);  this.type=type;  this.messageLength=messageLength;  this.fragmentedBytes=Arrays.copyOf(fragmentedBytes,fragmentedBytes.length);  setFragmentOffset(fragmentOffset);  setFragmentLength(fragmentedBytes.length);}  }
class C{  private Executors(){}  }
class C{  public static void writeThrowable(File file,Throwable object) throws IOException {  try {    write(file,object);  } catch (  NotSerializableException e) {    write(file,new ThrowableCopy(object));  }}  }
class C{  public boolean isMatch(){  return EdgeType.LINK == edgeType && !propertyTypes.isEmpty();}  }
class C{  public Object[] elements(){  Object[] objects=new Object[_elementOrder.size()];  for (int i=0; i < _elementOrder.size(); i++) {    objects[i]=_elements.get(_elementOrder.get(i));  }  return objects;}  }
class C{  private void appendPolygonTaggedText(Polygon polygon,int level,Writer writer) throws IOException {  writer.write("POLYGON ");  appendPolygonText(polygon,level,false,writer);}  }
class C{  public static byte[] copyOf(byte[] arr,int newLength){  return copyOf(arr,0,newLength,0);}  }
class C{  public synchronized void addConnectionEventListener(ConnectionEventListener connectioneventlistener){  if (this.connectionEventListeners != null) {    this.connectionEventListeners.put(connectioneventlistener,connectioneventlistener);  }}  }
class C{  public BigDecimal parseLargeKanjiNumeral(NumberBuffer buffer){  int i=buffer.position();  if (i >= buffer.length()) {    return null;  }  char c=buffer.charAt(i);  int power=exponents[c];  if (power > 3) {    buffer.advance();    return BigDecimal.TEN.pow(power);  }  return null;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public synchronized void dispose(){  CloseableReference.closeSafely(mPreviewBitmap);  mPreviewBitmap=null;  CloseableReference.closeSafely(mDecodedFrames);  mDecodedFrames=null;}  }
class C{  public void removeLocalTempTableIndex(Index index){  if (localTempTableIndexes != null) {    localTempTableIndexes.remove(index.getName());synchronized (database) {      index.removeChildrenAndResources(this);    }  }}  }
class C{  public AxisEntity(Shape area,Axis axis,String toolTipText,String urlText){  super(area,toolTipText,urlText);  ParamChecks.nullNotPermitted(axis,"axis");  this.axis=axis;}  }
class C{  @Override public jolie.State state(){  return state;}  }
class C{  public synchronized void open(){  open=true;  notifyAll();}  }
class C{  public void close(){  mImageSharingCache.clear();  if (sLogger.isActivated()) {    sLogger.info("Image sharing service API is closed");  }}  }
class C{  public String lookup(String query,boolean preferUnicode){  DateTime now=clock.nowUtc();  try {    return new WhoisReader(new StringReader(query),now).readCommand().executeQuery(now).getPlainTextOutput(preferUnicode,disclaimer);  } catch (  WhoisException e) {    return e.getPlainTextOutput(preferUnicode,disclaimer);  }catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private Utils(){  throw new AssertionError();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (many: ");  result.append(many);  result.append(')');  return result.toString();}  }
class C{  public static Document loadXMLDoc(String filePath){  InputStream instream=null;  logger.info("Loading configuration file " + filePath);  instream=Play.application().resourceAsStream(filePath);  if (instream == null) {    logger.info("Configuation file not present in classpath. File:  " + filePath);    throw new RuntimeException("Unable to read " + filePath);  }  logger.info("Configuation file loaded. File: " + filePath);  Document document=null;  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    document=builder.parse(instream);  } catch (  ParserConfigurationException e) {    throw new RuntimeException("XML Parser could not be created.",e);  }catch (  SAXException e) {    throw new RuntimeException(filePath + " is not properly formed",e);  }catch (  IOException e) {    throw new RuntimeException("Unable to read " + filePath,e);  }  return document;}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (((EventConstraints)m_listenee).eventGeneratable("dataSet") || ((EventConstraints)m_listenee).eventGeneratable("trainingSet") || ((EventConstraints)m_listenee).eventGeneratable("testSet")) {      return true;    } else {      return false;    }  }  return true;}  }
class C{  public static String azimuthToCompassBearing(double azimuth){  String str="";  if (azimuth < 0) {    azimuth+=360;  }  if (azimuth == 0) {    str="N" + String.format("%04.1f",azimuth);  }  if (azimuth < 90) {    str="N" + String.format("%04.1f",azimuth) + "E";  } else   if (azimuth == 90) {    str=String.format("%04.1f",azimuth) + "E";  } else   if (azimuth < 180) {    str="S" + String.format("%04.1f",(180 - azimuth)) + "E";  } else   if (azimuth == 180) {    str="S" + String.format("%04.1f",azimuth);  } else   if (azimuth < 270) {    str="S" + String.format("%04.1f",(azimuth - 180)) + "W";  } else   if (azimuth == 270) {    str=String.format("%04.1f",(azimuth - 180)) + "W";  } else {    str="N" + String.format("%04.1f",(360 - azimuth)) + "W";  }  return (str);}  }
class C{  public static double limitZoom(double value,OrbitViewLimits viewLimits){  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double[] limits=viewLimits.getZoomLimits();  double newValue=value;  if (value < limits[0]) {    newValue=limits[0];  } else   if (value > limits[1]) {    newValue=limits[1];  }  return newValue;}  }
class C{  public boolean addAll(Iterable<? extends Solution> iterable){  boolean changed=false;  for (  Solution solution : iterable) {    changed|=add(solution);  }  return changed;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT:    return basicSetExtendedRuntimeEnvironment(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final DataSet subsetColumns(List<Node> vars){  vars=GraphUtils.replaceNodes(vars,getVariables());  if (!(getVariables().containsAll(vars))) {    List<Node> missingVars=new ArrayList<>(vars);    missingVars.removeAll(getVariables());    throw new IllegalArgumentException("All vars must be original vars: " + missingVars);  }  int[] rows=new int[tetradMatrix.rows()];  for (int i=0; i < rows.length; i++) {    rows[i]=i;  }  int[] columns=new int[vars.size()];  for (int j=0; j < columns.length; j++) {    columns[j]=getVariables().indexOf(vars.get(j));  }  TetradMatrix _data=tetradMatrix.getSelection(rows,columns).copy();  ColtDataSet _dataSet=new ColtDataSet(0,new LinkedList<Node>());  _dataSet.tetradMatrix=_data;  _dataSet.variables=vars;  _dataSet.selection=new HashSet<>();  _dataSet.knowledge=knowledge.copy();  return _dataSet;}  }
class C{  public Boolean isNetworkReservationSupported(){  return networkReservationSupported;}  }
class C{  public LogIndex(File logDir,String filePrefix,long retentionMillis,int bufferSize,boolean isWritable) throws ReplicatorException, InterruptedException {  index=new ArrayList<LogIndexEntry>();  this.logDir=logDir;  this.filePrefix=filePrefix;  this.retentionMillis=retentionMillis;  this.bufferSize=bufferSize;  build(isWritable);}  }
class C{  private void modifyIconOfSameSwId(final Object itemId,final Long oldSwId,final String oldFileName){  for (  final Object rowId : tabelContainer.getItemIds()) {    final Item newItem=tabelContainer.getItem(rowId);    final Long newBaseSwId=(Long)newItem.getItemProperty(BASE_SOFTWARE_ID).getValue();    final String newFileName=(String)newItem.getItemProperty(FILE_NAME).getValue();    if (!rowId.equals(itemId) && newBaseSwId.equals(oldSwId) && newFileName.equals(oldFileName)) {      final HorizontalLayout layout=(HorizontalLayout)newItem.getItemProperty(FILE_NAME_LAYOUT).getValue();      final Label warningLabel=(Label)layout.getComponent(1);      if (warningLabel.isVisible()) {        warningLabel.removeStyleName(SPUIStyleDefinitions.ERROR_LABEL);        warningLabel.setDescription(i18n.get(ALREADY_EXISTS_MSG));        newItem.getItemProperty(WARNING_ICON).setValue(warningLabel);        redErrorLabelCount--;        break;      }    }  }}  }
class C{  public void readRegistry(IExtensionRegistry registry,String pluginId,String extensionPoint){  IExtensionPoint point=registry.getExtensionPoint(pluginId,extensionPoint);  if (point == null) {    return;  }  IExtension[] extensions=point.getExtensions();  if (extensions.length <= 0)   return;  int i=0;  for (i=0; i < extensions.length; i++) {    readExtension(extensions[i]);  }}  }
class C{  public static SparkRunner create(SparkPipelineOptions options){  return new SparkRunner(options);}  }
class C{  public void assertValid(ObjectReference object){  if (object.isNull())   return;  if (objects.containsKey(object)) {    objects.get(object).assertLive();    return;  }  if (copiedObjects.contains(object))   return;  assert false : object + " is not a valid object reference";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static UIManager createInstance(){  return new UIManager();}  }
class C{  private <T>T processEntryProcessor(EntryProcessor<K,V,T> entryProcessor,TCacheJSR107MutableEntry<K,V> me,Object... args){  T result=entryProcessor.process(me,args);  K key;  V value;switch (me.operation()) {case REMOVE:    key=me.getKey();  remove(key);break;case SET:key=me.getKey();value=me.getValue();put(key,value);break;case LOAD:key=me.getKey();value=me.getValue();putNoWriteThrough(key,value);break;case REMOVE_WRITE_THROUGH:key=me.getKey();remove(key,false);break;case GET:key=me.getKey();AccessTimeObjectHolder<V> holder=tcache.peekHolder(key);if (holder != null) {holder.updateMaxIdleTime(tcache.expiryPolicy.getExpiryForAccess());}break;default :break;}return result;}  }
class C{  public static void main(String[] args){  ResourceBundleUtil.setVerbose(true);  Application app;  String os=System.getProperty("os.name").toLowerCase();  if (os.startsWith("mac")) {    app=new OSXApplication();  } else   if (os.startsWith("win")) {    app=new SDIApplication();  } else {    app=new SDIApplication();  }  SVGApplicationModel model=new SVGApplicationModel();  model.setName("JHotDraw SVG");  model.setVersion(Main.class.getPackage().getImplementationVersion());  model.setCopyright("Copyright 2006-2010 (c) by the authors of JHotDraw.\n" + "This software is licensed under LGPL and Creative Commons 3.0 Attribution.");  model.setViewClassName("org.jhotdraw.samples.svg.SVGView");  app.setModel(model);  app.launch(args);}  }
class C{  static public int extractAddressNumber(byte[] packet){switch (extractAddressType(packet)) {case BROADCAST:    return 0;case NO_ADDRESS:case IDLE:  return -1;case LOCO_SHORT_ADDRESS:return packet[0] & 0xFF;case LOCO_LONG_ADDRESS:return (packet[0] & 0x3F) << 8 | (packet[1] & 0xFF);case ACCESSORY_ADDRESS:log.warn("extractAddressNumber can't handle ACCESSORY_ADDRESS in {}",format(packet));return -1;}return 0;}  }
class C{  @Deprecated public void detect(String url,OnDetectUrlFileListener onDetectUrlFileListener){  getDownloadTaskManager().detect(url,onDetectUrlFileListener,null);}  }
class C{  public Matrix4d m22(double m22){  this.m22=m22;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public MutableDateTime(long instant,DateTimeZone zone){  super(instant,zone);}  }
class C{  public GapContent(int initialLength){  super(Math.max(initialLength,2));  char[] implied=new char[1];  implied[0]='\n';  replace(0,0,implied,implied.length);  marks=new MarkVector();  search=new MarkData(0);  queue=new ReferenceQueue<StickyPosition>();}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof GoXref))   return false;  final GoXref goXref=(GoXref)o;  return new EqualsBuilder().append(getIdentifier(),goXref.getIdentifier()).append(getName(),goXref.getName()).append(getDatabaseName(),goXref.getDatabaseName()).append(getCategory(),goXref.getCategory()).append(getEntries(),goXref.getEntries()).isEquals();}  }
class C{  public boolean isFileTransferThumbnailSupported(){  return mFileTransferThumbnail;}  }
class C{  String internalsprintf(final String s) throws IllegalArgumentException {  final String s2;  if (conversionCharacter == 's' || conversionCharacter == 'S') {    s2=printSFormat(s);  } else {    throw new IllegalArgumentException("Cannot " + "format a String with a format using a " + conversionCharacter + " conversion character.");  }  return s2;}  }
class C{  public Observable<String> exerciseMap(Observable<String> hello){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  public void takePictureNow(PhotoCaptureParameters params,CaptureSession session){  long dt=SystemClock.uptimeMillis() - mTakePictureStartMillis;  Log.v(TAG,"Taking shot with extra AF delay of " + dt + " ms.");  try {    CaptureRequest.Builder builder=mDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);    builder.setTag(RequestTag.CAPTURE);    addBaselineCaptureKeysToRequest(builder);    if (sCaptureImageFormat == ImageFormat.RAW_SENSOR) {      builder.set(CaptureRequest.STATISTICS_LENS_SHADING_MAP_MODE,CaptureRequest.STATISTICS_LENS_SHADING_MAP_MODE_ON);    } else     if (sCaptureImageFormat == ImageFormat.JPEG) {      builder.set(CaptureRequest.JPEG_QUALITY,JPEG_QUALITY);      builder.set(CaptureRequest.JPEG_ORIENTATION,CameraUtil.getJpegRotation(params.orientation,mCharacteristics));    }    builder.addTarget(mPreviewSurface);    builder.addTarget(mCaptureImageReader.getSurface());    CaptureRequest request=builder.build();    if (DEBUG_WRITE_CAPTURE_DATA) {      final String debugDataDir=makeDebugDir(params.debugDataFolder,"normal_capture_debug");      Log.i(TAG,"Writing capture data to: " + debugDataDir);      CaptureDataSerializer.toFile("Normal Capture",request,new File(debugDataDir,"capture.txt"));    }    mCaptureSession.capture(request,mCaptureCallback,mCameraHandler);  } catch (  CameraAccessException e) {    Log.e(TAG,"Could not access camera for still image capture.");    broadcastReadyState(true);    params.callback.onPictureTakingFailed();    return;  }synchronized (mCaptureQueue) {    mCaptureQueue.add(new InFlightCapture(params,session));  }}  }
class C{  public static String constructQueueRedisKey(String queueName,String shardName,int priority,PinLaterJobState state){  return String.format("%s_%s_%s.p%1d_s%1d",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue());}  }
class C{  public HashCodeBuilder append(boolean[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  public void onHostManualConfigurationNext(HostInfo hostInfo){  if (hostId != -1) {    HostManager hostManager=HostManager.getInstance(this);    HostInfo newHostInfo=hostManager.editHost(hostId,hostInfo);    hostManager.switchHost(newHostInfo);  }  Intent intent=new Intent(this,HostManagerActivity.class).addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  public void removeMeasurementListener(MeasurementListener l){  if (measurementListeners.contains(l)) {    measurementListeners.removeElement(l);  }}  }
class C{  public static int bin_of_logrpu(double logrpu,HistogramBins hbins){  for (int i=0; i < hbins.get_LOG_BIN_CENTERS().length; ++i) {    if (hbins.get_LOG_BIN_CENTERS()[i] >= logrpu) {      return i;    }  }  return hbins.get_NBINS() - 1;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.AUTO_TRANSITION_BLOCK___GUARD_1:    return getGuard_1();case UmplePackage.AUTO_TRANSITION_BLOCK___ACTION_1:  return getAction_1();case UmplePackage.AUTO_TRANSITION_BLOCK___STATE_NAME_1:return getStateName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Benchmark public void parse() throws InterruptedException, IOException {  ClassReader classReader=new ClassReader(clazz);  classReader.accept(new ClassAnalyzer("MyHash"),ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);}  }
class C{  public Intersection(final SummaryFactory<S> summaryFactory){  summaryFactory_=summaryFactory;  isEmpty_=false;  theta_=Long.MAX_VALUE;  isFirstCall_=true;}  }
class C{  public static int compare(boolean left,Object right) throws PageException {  if (right instanceof Boolean)   return compare(left,((Boolean)right).booleanValue()); else   if (right instanceof String)   return compare(left ? 1 : 0,(String)right); else   if (right instanceof Number)   return compare(left ? 1D : 0D,((Number)right).doubleValue()); else   if (right instanceof Date)   return compare(left ? 1 : 0,((Date)right)); else   if (right instanceof Castable) {    if (isComparableComponent((Castable)right))     return -compareComponent((Castable)right,left);    return -((Castable)right).compareTo(left);  } else   if (right instanceof Locale)   return compare(Caster.toString(left),((Locale)right)); else   if (right == null)   return 1; else   if (right instanceof Character)   return compare(left,((Character)right).toString()); else   if (right instanceof Calendar)   return compare(left ? 1 : 0,((Calendar)right).getTime()); else   if (right instanceof TimeZone)   return compare(Caster.toString(left),((TimeZone)right)); else   return error(true,false);}  }
class C{  public MoveEvaluation(){  this.move=null;  this.score=minimum();}  }
class C{  public void testIntSpecialValues() throws Exception {  int[] values=new int[]{Integer.MIN_VALUE,Integer.MIN_VALUE + 1,Integer.MIN_VALUE + 2,-64765767,-4000,-3000,-2000,-1000,-1,0,1,10,300,765878989,Integer.MAX_VALUE - 2,Integer.MAX_VALUE - 1,Integer.MAX_VALUE};  BytesRef[] encoded=new BytesRef[values.length];  for (int i=0; i < values.length; i++) {    encoded[i]=new BytesRef(new byte[Integer.BYTES]);    NumericUtils.intToSortableBytes(values[i],encoded[i].bytes,encoded[i].offset);    assertEquals("forward and back conversion should generate same int",values[i],NumericUtils.sortableBytesToInt(encoded[i].bytes,encoded[i].offset));  }  for (int i=1; i < encoded.length; i++) {    assertTrue("check sort order",encoded[i - 1].compareTo(encoded[i]) < 0);  }}  }
class C{  private static void copyBytes(ByteBuffer from,ByteBuffer to,int bytesToRead){  ByteBuffer temporaryBuffer=from.duplicate();  temporaryBuffer.limit(temporaryBuffer.position() + bytesToRead);  to.put(temporaryBuffer);  from.position(from.position() + bytesToRead);}  }
class C{  public static boolean isFetcher(Thread t){  final FetcherInfo info=FetcherInfo.getFetcherInfo();synchronized (info.waitList) {    for (int i=0; i < info.fetchers.length; i++) {      if (info.fetchers[i] == t) {        return true;      }    }  }  return false;}  }
class C{  public boolean isSOPriceList(){  Object oo=get_Value(COLUMNNAME_IsSOPriceList);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void createOrReplacePredictedLabelFor(ExampleSet exampleSet,Model model){  Attribute predictedLabel=exampleSet.getAttributes().getPredictedLabel();  if (predictedLabel != null) {    exampleSet.getAttributes().remove(predictedLabel);    exampleSet.getExampleTable().removeAttribute(predictedLabel);  }}  }
class C{  public boolean firstTimeIn(){  try {    mRetainedFragment=(RetainedFragment)mFragmentManager.get().findFragmentByTag(mRetainedFragmentTag);    if (mRetainedFragment == null) {      Log.d(TAG,"Creating new RetainedFragment " + mRetainedFragmentTag);      mRetainedFragment=new RetainedFragment();      mFragmentManager.get().beginTransaction().add(mRetainedFragment,mRetainedFragmentTag).commit();      return true;    } else {      Log.d(TAG,"Returning existing RetainedFragment " + mRetainedFragmentTag);      return false;    }  } catch (  NullPointerException e) {    Log.d(TAG,"NPE in firstTimeIn()");    return false;  }}  }
class C{  public boolean equals(Object p){  if (p instanceof PrincipalImpl || p instanceof GroupImpl) {    if ((super.hashCode() & p.hashCode()) == p.hashCode())     return true; else     return false;  } else {    return false;  }}  }
class C{  public static short[] subarray(short[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return EMPTY_SHORT_ARRAY;  }  short[] subarray=new short[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  static void checkInternalName(final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (name.charAt(0) == '[') {    checkDesc(name,false);  } else {    checkInternalName(name,0,-1,msg);  }}  }
class C{  protected boolean isPrimarySubtype(AnnotatedTypeMirror subtype,AnnotatedTypeMirror supertype){  return isPrimarySubtype(subtype,supertype,false);}  }
class C{  public boolean isInterface(){  return itf;}  }
class C{  @Override public void post(Runnable runnable){  handler.post(runnable);}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  if (_byteBuffer == null)   throw new IOException("Writer closed");  final int off_plus_len=off + len;  for (int i=off; i < off_plus_len; ) {    char c=cbuf[i++];    if (c < 0x80) {      _byteBuffer.put((byte)c);    } else {      write(c);    }  }}  }
class C{  private boolean findAdditionalEpisodeFiles(TvShowEpisode episode,File videoFile,File[] directoryContents){  boolean newFileFound=false;  List<MediaFile> existingMediaFiles=episode.getMediaFiles();  for (  File file : directoryContents) {    if (file.isFile()) {      MediaFile mf=new MediaFile(file);      if (existingMediaFiles.contains(mf)) {        continue;      }      if (mf.getType().equals(MediaFileType.VIDEO) || !mf.getBasename().startsWith(FilenameUtils.getBaseName(videoFile.getName())) || file.getName().startsWith(skipFilesStartingWith)) {        continue;      }      if (mf.getType() == MediaFileType.SUBTITLE) {        episode.setSubtitles(true);      }      if (mf.getType() == MediaFileType.GRAPHIC) {        LOGGER.debug("parsing unknown graphic " + mf.getFilename());        String vfilename=videoFile.getName();        if (FilenameUtils.getBaseName(vfilename).equals(FilenameUtils.getBaseName(mf.getFilename())) || FilenameUtils.getBaseName(Utils.cleanStackingMarkers(vfilename)).trim().equals(FilenameUtils.getBaseName(mf.getFilename())) || episode.getTitle().equals(FilenameUtils.getBaseName(mf.getFilename()))) {          mf.setType(MediaFileType.THUMB);        }      }      episode.addToMediaFiles(mf);      newFileFound=true;    } else {      if (file.getName().equalsIgnoreCase("subs") || file.getName().equalsIgnoreCase("subtitle")) {        File[] subDirContent=file.listFiles();        if (subDirContent == null) {          LOGGER.error("Whops. Cannot access directory: " + file.getName());        } else {synchronized (filesFound) {            filesFound.addAll(Arrays.asList(subDirContent));          }          for (          File subDirFile : subDirContent) {            if (FilenameUtils.getBaseName(subDirFile.getName()).startsWith(FilenameUtils.getBaseName(videoFile.getName()))) {              MediaFile mf=new MediaFile(subDirFile);              if (existingMediaFiles.contains(mf)) {                continue;              }              if (mf.getType() == MediaFileType.SUBTITLE) {                episode.setSubtitles(true);              }              episode.addToMediaFiles(mf);              newFileFound=true;            }          }        }      }    }  }  return newFileFound;}  }
class C{  protected void onPreGet(){}  }
class C{  @ReactMethod public void cropImage(String uri,ReadableMap options,final Callback success,final Callback error){  ReadableMap offset=options.hasKey("offset") ? options.getMap("offset") : null;  ReadableMap size=options.hasKey("size") ? options.getMap("size") : null;  if (offset == null || size == null || !offset.hasKey("x") || !offset.hasKey("y") || !size.hasKey("width") || !size.hasKey("height")) {    throw new JSApplicationIllegalArgumentException("Please specify offset and size");  }  if (uri == null || uri.isEmpty()) {    throw new JSApplicationIllegalArgumentException("Please specify a URI");  }  CropTask cropTask=new CropTask(getReactApplicationContext(),uri,(int)offset.getDouble("x"),(int)offset.getDouble("y"),(int)size.getDouble("width"),(int)size.getDouble("height"),success,error);  if (options.hasKey("displaySize")) {    ReadableMap targetSize=options.getMap("displaySize");    cropTask.setTargetSize(targetSize.getInt("width"),targetSize.getInt("height"));  }  cropTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);}  }
class C{  public static void updateArtwork(MovieSet movieSet){  findArtworkInArtworkFolder(movieSet);  for (  Movie movie : new ArrayList<>(movieSet.getMovies())) {    findArtworkInMovieFolder(movieSet,movie);  }}  }
class C{  public AsicManifestDocument(final byte[] bytes,final String name){  this.bytes=bytes;  this.name=name;  this.mimeType=MimeType.XML;  final Document document=DSSXMLUtils.buildDOM(bytes);  signatureUri=DSSXMLUtils.getValue(document,"/asic:ASiCManifest/asic:SigReference/@URI");  if (StringUtils.isBlank(signatureUri)) {    throw new DSSException("The AsicManifest file must contains the URI of the related signature.");  }}  }
class C{  void calculateColumnRequirements(int axis){  for (  SizeRequirements req : columnRequirements) {    req.minimum=0;    req.preferred=0;    req.maximum=Integer.MAX_VALUE;  }  Container host=getContainer();  if (host != null) {    if (host instanceof JTextComponent) {      skipComments=!((JTextComponent)host).isEditable();    } else {      skipComments=true;    }  }  boolean hasMultiColumn=false;  int nrows=getRowCount();  for (int i=0; i < nrows; i++) {    RowView row=getRow(i);    int col=0;    int ncells=row.getViewCount();    for (int cell=0; cell < ncells; cell++) {      View cv=row.getView(cell);      if (skipComments && !(cv instanceof CellView)) {        continue;      }      for (; row.isFilled(col); col++)       ;      int rowSpan=getRowsOccupied(cv);      int colSpan=getColumnsOccupied(cv);      if (colSpan == 1) {        checkSingleColumnCell(axis,col,cv);      } else {        hasMultiColumn=true;        col+=colSpan - 1;      }      col++;    }  }  if (hasMultiColumn) {    for (int i=0; i < nrows; i++) {      RowView row=getRow(i);      int col=0;      int ncells=row.getViewCount();      for (int cell=0; cell < ncells; cell++) {        View cv=row.getView(cell);        if (skipComments && !(cv instanceof CellView)) {          continue;        }        for (; row.isFilled(col); col++)         ;        int colSpan=getColumnsOccupied(cv);        if (colSpan > 1) {          checkMultiColumnCell(axis,col,colSpan,cv);          col+=colSpan - 1;        }        col++;      }    }  }}  }
class C{  default Count valuesOfKey(Key key,long cost,boolean isEstimateOk){  return null;}  }
class C{  public static String generateLimitJumpToQuery(AbstractSqlPagingQueryProvider provider,String limitClause){  StringBuilder sql=new StringBuilder();  sql.append("SELECT ").append(provider.getSelectClause());  sql.append(" FROM ").append(provider.getFromClause());  sql.append(provider.getWhereClause() == null ? "" : " WHERE " + provider.getWhereClause());  sql.append(" ORDER BY ").append(buildSortClause(provider));  sql.append(" ").append(limitClause);  return sql.toString();}  }
class C{  void bindingRequired(){synchronized (this) {    resourceBinded=true;    notify();  }}  }
class C{  @Override public boolean hasMoreElements(){  return m_Tokenizer.hasMoreElements();}  }
class C{  public static Object stringToValue(String string){  if ("".equals(string)) {    return string;  }  if ("true".equalsIgnoreCase(string)) {    return Boolean.TRUE;  }  if ("false".equalsIgnoreCase(string)) {    return Boolean.FALSE;  }  if ("null".equalsIgnoreCase(string)) {    return JSONObject.NULL;  }  if ("0".equals(string)) {    return new Integer(0);  }  try {    char initial=string.charAt(0);    boolean negative=false;    if (initial == '-') {      initial=string.charAt(1);      negative=true;    }    if (initial == '0' && string.charAt(negative ? 2 : 1) == '0') {      return string;    }    if ((initial >= '0' && initial <= '9')) {      if (string.indexOf('.') >= 0) {        return Double.valueOf(string);      } else       if (string.indexOf('e') < 0 && string.indexOf('E') < 0) {        Long myLong=new Long(string);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    }  } catch (  Exception ignore) {  }  return string;}  }
class C{  protected final void CMOV_MOV(Instruction s,RegisterOperand result,ConditionOperand cond,Operand trueValue,Operand falseValue){  if (result.similar(trueValue)) {    EMIT(MIR_CondMove.mutate(s,IA32_CMOV,result,asReg(s,IA32_MOV,falseValue),COND(cond.flipCode())));  } else   if (result.similar(falseValue)) {    EMIT(MIR_CondMove.mutate(s,IA32_CMOV,result,asReg(s,IA32_MOV,trueValue),COND(cond)));  } else {    if (falseValue.isRegister()) {      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result,trueValue)));      EMIT(MIR_CondMove.mutate(s,IA32_CMOV,result.copyRO(),falseValue,COND(cond.flipCode())));    } else {      if (trueValue.isRegister()) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result,falseValue)));        EMIT(MIR_CondMove.mutate(s,IA32_CMOV,result.copyRO(),trueValue,COND(cond)));      } else {        int true_const=((IntConstantOperand)trueValue).value;        int false_const=((IntConstantOperand)falseValue).value;        if (cond.isLOWER()) {          EMIT(CPOS(s,MIR_BinaryAcc.mutate(s,IA32_SBB,result,result.copyRO())));          if (true_const - false_const != -1) {            if (true_const - false_const == 1) {              EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,result.copyRO())));            } else {              EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_AND,result.copyRO(),IC(true_const - false_const))));            }          }          if (false_const != 0) {            EMIT(MIR_BinaryAcc.create(IA32_ADD,result.copyRO(),IC(false_const)));          }        } else         if (cond.isHIGHER_EQUAL()) {          EMIT(CPOS(s,MIR_BinaryAcc.mutate(s,IA32_SBB,result,result.copyRO())));          if (false_const - true_const != -1) {            if (false_const - true_const == 1) {              EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,result.copyRO())));            } else {              EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_AND,result.copyRO(),IC(false_const - true_const))));            }          }          if (true_const != 0) {            EMIT(MIR_BinaryAcc.create(IA32_ADD,result,IC(true_const)));          }        } else {          EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,result.copyRO(),COND(cond))));          if ((true_const - false_const) == 1) {            EMIT(CPOS(s,MIR_Unary.create(IA32_MOVZX__B,result.copyRO(),result.copyRO())));            EMIT(MIR_BinaryAcc.mutate(s,IA32_ADD,result,IC(false_const)));          } else           if ((false_const - true_const) == 1) {            EMIT(CPOS(s,MIR_Unary.create(IA32_MOVZX__B,result.copyRO(),result.copyRO())));            EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,result.copyRO())));            EMIT(MIR_BinaryAcc.mutate(s,IA32_ADD,result,IC(false_const)));          } else           if (((false_const - true_const) > 0) && ((false_const - true_const) <= 0xFF)) {            EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SUB,result.copyRO(),IC(1))));            EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_AND,result.copyRO(),IC(false_const - true_const))));            EMIT(MIR_BinaryAcc.mutate(s,IA32_ADD,result,IC(true_const)));          } else {            if (((true_const - false_const) > 0xFF) || ((true_const - false_const) < 0)) {              EMIT(CPOS(s,MIR_Unary.create(IA32_MOVZX__B,result.copyRO(),result.copyRO())));            }            EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,result.copyRO())));            EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_AND,result.copyRO(),IC(true_const - false_const))));            EMIT(MIR_BinaryAcc.mutate(s,IA32_ADD,result,IC(false_const)));          }        }      }    }  }}  }
class C{  private long now(){  if (outer.outer.clock == null) {    return System.currentTimeMillis();  } else {    return outer.outer.clock.currentTimeMillis();  }}  }
class C{  @Override public void success(Object model,int requestId){switch (requestId) {case HttpConstants.ApiResponseCodes.CREATE_WALL:{      Toast.makeText(getActivity(),"Wall Posted",Toast.LENGTH_SHORT).show();      break;    }case ApiResponseCodes.UPDATE_WALL:{    Toast.makeText(getActivity(),"Wall Updated",Toast.LENGTH_SHORT).show();    break;  }default :break;}}  }
class C{  public Long addRoomToOrganisation(long user_level,long rooms_id,long organisation_id){  try {    if (authLevelManagement.checkAdminLevel(user_level)) {      Rooms_Organisation rOrganisation=new Rooms_Organisation();      rOrganisation.setRoom(this.getRoomById(rooms_id));      log.debug("addRoomToOrganisation rooms '" + rOrganisation.getRoom().getName() + "'");      rOrganisation.setStarttime(new Date());      rOrganisation.setOrganisation(organisationmanagement.getOrganisationById(organisation_id));      rOrganisation.setDeleted("false");      rOrganisation=em.merge(rOrganisation);      long returnId=rOrganisation.getRooms_organisation_id();      return returnId;    }  } catch (  Exception ex2) {    log.error("[addRoomToOrganisation] ",ex2);  }  return null;}  }
class C{  public String initialAnchorRandomTipText(){  return "Whether the initial anchor is chosen randomly.";}  }
class C{  public void disconnectPort(QsiPortController p){  istream=null;  ostream=null;  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected LnPortController");  }  controller=null;}  }
class C{  protected VisorGridEvent map(Event evt,int type,IgniteUuid id,String name,UUID nid,long ts,String msg,String shortDisplay){  if (evt instanceof TaskEvent)   return taskEvent((TaskEvent)evt,type,id,name,nid,ts,msg,shortDisplay);  if (evt instanceof JobEvent)   return jobEvent((JobEvent)evt,type,id,name,nid,ts,msg,shortDisplay);  if (evt instanceof DeploymentEvent)   return deploymentEvent((DeploymentEvent)evt,type,id,name,nid,ts,msg,shortDisplay);  if (evt instanceof DiscoveryEvent)   return discoveryEvent((DiscoveryEvent)evt,type,id,name,nid,ts,msg,shortDisplay);  return null;}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  protected boolean switchToNext(){  if (_nextParser >= _parsers.length) {    return false;  }  delegate=_parsers[_nextParser++];  return true;}  }
class C{  public static double[][] covarianceMatrix(double[][] data,double[] means){  int numVariables=data[0].length;  double[][] covariances=new double[numVariables][numVariables];  for (int r=0; r < numVariables; r++) {    for (int c=r; c < numVariables; c++) {      covariances[r][c]=covarianceTwoColumns(data,r,c,means[r],means[c]);      covariances[c][r]=covariances[r][c];    }  }  return covariances;}  }
class C{  @Deprecated public T withTintSelectedIcon(boolean iconTinted){  return withIconTintingEnabled(iconTinted);}  }
class C{  public static Action decreaseFontSizeAction(JTextPane textPane){  return changeFontSizeAction(textPane,"A-",DECREASE_FONT_SIZE,-1);}  }
class C{  public void show(){  show(sDefaultTimeout);}  }
class C{  public WampSerialization serialization(){  return this.serialization;}  }
class C{  public int compareTo(GPSRecord o){  return (int)(this.getTime() - o.getTime());}  }
class C{  @Override protected String doIt() throws Exception {  log.info("C_PaymentTerm_ID=" + getRecord_ID());  MPaymentTerm pt=new MPaymentTerm(getCtx(),getRecord_ID(),get_TrxName());  String msg=pt.validate();  pt.saveEx();  String validMsg=Msg.parseTranslation(getCtx(),"@OK@");  if (validMsg.equals(msg))   return msg;  throw new AdempiereUserError(msg);}  }
class C{  @Override public String delete(){  if (field != null) {    field.setTranslation(new TreeMap<String,String>());    trans.setTmap(this.mapping.getExtension().getRowType(),property,new TreeMap<String,String>(),new TreeMap<String,String>());    saveResource();    addActionMessage(getText("manage.translation.deleted",new String[]{field.getTerm().toString()}));    reloadSourceValues();  } else {    LOG.error("User wanted to deleted translation for propertyMapping field, but field was null");  }  Extension ext=mapping.getExtension();  id=(ext != null) ? ext.getRowType() : null;  return NONE;}  }
class C{  private boolean isSubscribed(){  final SharedPreferences settings=getSharedPreferencesForCurrentUser();  return settings.getBoolean(HAS_SUBSCRIPTION,false);}  }
class C{  @SuppressWarnings("unchecked") private void showOrHideMessage(final Item childItem,final ActionStatus actionStatus){  if (managementUIState.isActionHistoryMaximized()) {    childItem.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_MSGS_HIDDEN).setValue(actionStatus.getMessages());  }}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  @Deprecated public void addEventListener(WalletEventListener listener,Executor executor){  addCoinsReceivedEventListener(executor,listener);  addCoinsSentEventListener(executor,listener);  addChangeEventListener(executor,listener);  addKeyChainEventListener(executor,listener);  addReorganizeEventListener(executor,listener);  addScriptChangeEventListener(executor,listener);  addTransactionConfidenceEventListener(executor,listener);}  }
class C{  public boolean hasSeqno(long seqno){  return (seqno >= startSeqno && seqno <= endSeqno);}  }
class C{  public void openThriftReader(String filePath) throws IOException {  thriftReader=new ThriftReader(filePath);  thriftReader.open();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected IJavaElement createHandle(LambdaExpression lambdaExpression,IJavaElement parent){  org.eclipse.jdt.internal.core.LambdaExpression lambdaElement=LambdaFactory.createLambdaExpression((JavaElement)parent,lambdaExpression);  IMethod lambdaMethodElement=lambdaElement.getMethod();  this.methodHandles.add(lambdaMethodElement);  return lambdaMethodElement;}  }
class C{  public static void main(String[] args){  TestRunner.run(RecipientListRouterTest.class);}  }
class C{  private void putOffUniform(final Player player){  if (UNIFORM.isPartOf(player.getOutfit())) {    player.returnToOriginalOutfit();  }}  }
class C{  public boolean contains(Interval other){  return this.start <= other.start && this.end >= other.end;}  }
class C{  private EdgeResult(final INaviViewNode node,final EdgeType type){  m_node=node;  m_type=type;}  }
class C{  protected String resolveNodeName(Node node){switch (tagCase) {case DEFAULT:    return node.getNodeName();case RAW:  return node.getNodeRawName();case LOWERCASE:return node.getNodeRawName().toLowerCase();case UPPERCASE:return node.getNodeRawName().toUpperCase();}return null;}  }
class C{  public SourceSinkPair(String source,String sink){  super(source,sink);}  }
class C{  protected ReactionImpl(){  super();}  }
class C{  public SendableTextMessage.SendableTextMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  public BaseHeap64(){  super(Harness.options,"Base Heap 64","Base Heap Size in 64-bit mode (scaled for the current plan)",0);}  }
class C{  protected void addBaseTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_PrimitiveType_baseType_feature"),getString("_UI_PropertyDescriptor_description","_UI_PrimitiveType_baseType_feature","_UI_PrimitiveType_type"),TypesPackage.Literals.PRIMITIVE_TYPE__BASE_TYPE,true,false,true,null,null,null));}  }
class C{  public String canBeDeleted(){  return null;}  }
class C{  public void pushConstant(ConstantExpression expression){  MethodVisitor mv=controller.getMethodVisitor();  Object value=expression.getValue();  ClassNode origType=expression.getType().redirect();  ClassNode type=ClassHelper.getUnwrapper(origType);  boolean boxing=origType != type;  boolean asPrimitive=boxing || ClassHelper.isPrimitiveType(type);  if (value == null) {    mv.visitInsn(ACONST_NULL);  } else   if (boxing && value instanceof Boolean) {    Boolean bool=(Boolean)value;    String text=bool ? "TRUE" : "FALSE";    mv.visitFieldInsn(GETSTATIC,"java/lang/Boolean",text,"Ljava/lang/Boolean;");    boxing=false;    type=origType;  } else   if (asPrimitive) {    pushPrimitiveConstant(mv,value,type);  } else   if (value instanceof BigDecimal) {    String className=BytecodeHelper.getClassInternalName(value.getClass().getName());    mv.visitTypeInsn(NEW,className);    mv.visitInsn(DUP);    mv.visitLdcInsn(value.toString());    mv.visitMethodInsn(INVOKESPECIAL,className,"<init>","(Ljava/lang/String;)V",false);  } else   if (value instanceof BigInteger) {    String className=BytecodeHelper.getClassInternalName(value.getClass().getName());    mv.visitTypeInsn(NEW,className);    mv.visitInsn(DUP);    mv.visitLdcInsn(value.toString());    mv.visitMethodInsn(INVOKESPECIAL,className,"<init>","(Ljava/lang/String;)V",false);  } else   if (value instanceof String) {    mv.visitLdcInsn(value);  } else {    throw new ClassGeneratorException("Cannot generate bytecode for constant: " + value + " of type: "+ type.getName());  }  push(type);  if (boxing)   box();}  }
class C{  public void configureNextLayoutAnimation(ReadableMap config,Callback success,Callback error){  mOperationsQueue.enqueueConfigureLayoutAnimation(config,success,error);}  }
class C{  public static boolean hasAnyRole(String... roles){  for (  String role : roles) {    if (hasRoles(role)) {      return true;    }  }  return false;}  }
class C{  public void reshape(int x,int y,int width,int height){  if ((width != this.width) || (height != this.height)) {    resetMapping();  }  super.reshape(x,y,width,height);}  }
class C{  public boolean removeAll(Collection<?> c){  hashCodeUpToDate=false;  return batchRemove(c,false);}  }
class C{  public void clear(){  warnings.clear();}  }
class C{  private static AdSenseHost initializeAdsensehost() throws Exception {  Credential credential=authorize();  AdSenseHost adsensehost=new AdSenseHost.Builder(new NetHttpTransport(),new JacksonFactory(),credential).setApplicationName(APPLICATION_NAME).build();  return adsensehost;}  }
class C{  public short readShort(){  return scanner.nextShort();}  }
class C{  private String addDisableImageAccessForCreateReplicaStep(Workflow workflow,ProtectionSystem rpSystem,Class<? extends DataObject> clazz,List<URI> copyList,Set<String> volumeWWNs,String waitFor) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method disableImageAccessExecuteMethod=new Workflow.Method(METHOD_DISABLE_IMAGE_ACCESS_CREATE_REPLICA_STEP,rpSystem.getId(),clazz,copyList,volumeWWNs);  workflow.createStep(STEP_DISABLE_IMAGE_ACCESS,String.format("Disable image access for bookmark"),waitFor,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),disableImageAccessExecuteMethod,null,stepId);  _log.info(String.format("Added disable access for bookmark step [%s] in workflow",stepId));  return STEP_DISABLE_IMAGE_ACCESS;}  }
class C{  public int addOutput(){  int index=outputs.size();  outputs.add(Functions.discard());  outputContext.add(DEFAULT_OUTPUT_CONTEXT);  return index;}  }
class C{  public static boolean hasNativeWebContent(AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  if (!supportsWebActions(node)) {    return false;  }  AccessibilityNodeInfoCompat parent=node.getParent();  if (supportsWebActions(parent)) {    if (parent != null) {      parent.recycle();    }    return true;  }  if (parent != null) {    parent.recycle();  }  return node.getChildCount() > 0;}  }
class C{  void clear(){  myStack.clear();}  }
class C{  private int compareChars(char c1,char c2,boolean caseIndependent){  if (caseIndependent) {    c1=RECharacter.toLowerCase(c1);    c2=RECharacter.toLowerCase(c2);  }  return ((int)c1 - (int)c2);}  }
class C{  private void launchSearch(KeyNamePair pp){  if (pp.getName().equals(Msg.getMsg(Env.getCtx(),"Search"))) {    find();  } else {    filter(pp.getKey());  }}  }
class C{  public void updateLayers(){  Debug.message("imageserver","OGCMRH: updateLayers updating...");  if (layers == null) {    layers=new Layer[0];    Debug.message("imageserver","OGCMRH: updateLayers layers==null, so create new layer.");  }  if (getLayerHandler() == null) {    Debug.message("imageserver","OGCMRH: updateLayers: LayerHandler is null.");    return;  }  Layer[] newLayers=getLayerHandler().getLayers();  if (layers.length < newLayers.length) {    Debug.message("ms","OGCserver: updateLayers: NEW LAYERS COMES.");    List tmpLayers=new ArrayList();    for (int j=0; j < layers.length; j++) {      tmpLayers.add(layers[j]);    }    for (int i=0; i < newLayers.length; i++) {      boolean layerAlreadyAdded=false;      for (int j=0; j < layers.length; j++) {        String layerName=layers[j].getName();        String newLayerName=newLayers[i].getName();        if (layerName.trim().equalsIgnoreCase(newLayerName.trim())) {          layerAlreadyAdded=true;        }      }      if (!layerAlreadyAdded) {        tmpLayers.add(newLayers[i]);      }    }    Layer[] newArrLayers=(Layer[])tmpLayers.toArray(new Layer[tmpLayers.size()]);    layers=newArrLayers;    for (int j=0; j < layers.length; j++) {      layers[j].setPropertyPrefix(layers[j].getName());    }  } else {    Debug.message("ms","OGCserver: updateLayers: UPDATE LAYERS COMES.");    for (int i=0; i < newLayers.length; i++) {      for (int j=0; j < layers.length; j++) {        if (layers[j].getName().trim().equalsIgnoreCase(newLayers[i].getName().trim())) {          String[] oldLayers=staticLayersNames.split(" ");          boolean found=false;          for (int k=0; k < oldLayers.length; k++) {            if (oldLayers[k].equals(newLayers[i].getName().trim())) {              found=true;              break;            }          }          if (found == false) {            layers[j]=newLayers[i];            layers[j].setPropertyPrefix(layers[j].getName());          }        }      }    }  }  createWmsLayers();}  }
class C{  private Instance votedReclassifyExample(Instance example) throws Exception {  int classVotes[]=new int[getNumClasses()];  for (int i=0; i < classVotes.length; i++) {    classVotes[i]=0;  }  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {    RuleList rl=e.nextElement();    int classValue=(int)rl.classifyInstance(example);    if (classValue >= 0) {      classVotes[classValue]++;    }  }  int maxVote=0;  int vote=-1;  for (int i=0; i < classVotes.length; i++) {    if (classVotes[i] > maxVote) {      maxVote=classVotes[i];      vote=i;    }  }  if (vote >= 0) {    example.setClassValue(vote);  } else {    throw new Exception("Error in instance classification.");  }  return example;}  }
class C{  private void shiftSegments(int fromIdx,int offset){  for (  Element element : elements) {    if (element.end.left > fromIdx) {      shiftSegment(element.start,fromIdx,offset);      shiftSegment(element.end,fromIdx,offset);      if (element.text != null) {        for (        Segment textSegment : element.text) {          shiftSegment(textSegment,fromIdx,offset);        }      }    }  }}  }
class C{  public void exportToGPX(OutputStream outputStream) throws XmlPullParserException, IllegalArgumentException, IllegalStateException, IOException {  XmlSerializer serializer=XmlPullParserFactory.newInstance().newSerializer();  serializer.setOutput(outputStream,"UTF-8");  serializer.startDocument("UTF-8",null);  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  serializer.startTag(null,"gpx");  serializer.attribute(null,"xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");  serializer.attribute(null,"xmlns","http://www.topografix.com/GPX/1/0");  serializer.attribute(null,"xsi:schemaLocation","http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd");  serializer.attribute(null,"version","1.0");  serializer.attribute(null,"creator","Vespucci");  serializer.startTag(null,"trk");  serializer.startTag(null,"trkseg");  boolean hasPoints=false;  for (  TrackPoint pt : getTrackPoints()) {    if (hasPoints && pt.isNewSegment()) {      serializer.endTag(null,"trkseg");      serializer.startTag(null,"trkseg");    }    hasPoints=true;    pt.toXml(serializer);  }  serializer.endTag(null,"trkseg");  serializer.endTag(null,"trk");  serializer.endTag(null,"gpx");  serializer.endDocument();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Ministry.getInstance().getJobClipDuration(getInt(stack)));}  }
class C{  public int start_production(){  return 1;}  }
class C{  @Override public final R visitNoType(AnnotatedNoType type,P p){  return defaultAction(type,p);}  }
class C{  public static void resetSavedSequenceSet(ImapSession session){  session.setAttribute(SEARCHRES_SAVED_SET,null);}  }
class C{  PBES2Core(String kdfAlgo,String cipherAlgo,int keySize) throws NoSuchAlgorithmException, NoSuchPaddingException {  this.cipherAlgo=cipherAlgo;  keyLength=keySize * 8;  pbeAlgo="PBEWith" + kdfAlgo + "And"+ cipherAlgo+ "_"+ keyLength;  if (cipherAlgo.equals("AES")) {    blkSize=AESConstants.AES_BLOCK_SIZE;    cipher=new CipherCore(new AESCrypt(),blkSize);switch (kdfAlgo) {case "HmacSHA1":      kdf=new PBKDF2Core.HmacSHA1();    break;case "HmacSHA224":  kdf=new PBKDF2Core.HmacSHA224();break;case "HmacSHA256":kdf=new PBKDF2Core.HmacSHA256();break;case "HmacSHA384":kdf=new PBKDF2Core.HmacSHA384();break;case "HmacSHA512":kdf=new PBKDF2Core.HmacSHA512();break;default :throw new NoSuchAlgorithmException("No Cipher implementation for " + kdfAlgo);}} else {throw new NoSuchAlgorithmException("No Cipher implementation for " + pbeAlgo);}cipher.setMode("CBC");cipher.setPadding("PKCS5Padding");}  }
class C{  protected String computeExtension(String packaging){  String extension;  if (packaging.equalsIgnoreCase(Deployable.EJB) || packaging.equalsIgnoreCase(Deployable.BUNDLE)) {    extension="jar";  } else   if (packaging.equalsIgnoreCase(Deployable.UBERWAR)) {    extension="war";  } else   if (packaging.startsWith(Deployable.JBOSS)) {    extension=packaging.substring(Deployable.JBOSS_STRIP);  } else {    extension=packaging;  }  return extension;}  }
class C{  public static byte[] strToIPv4(String ipv4AddrStr){  if (ipv4AddrStr.length() == 0)   return null;  byte[] address=new byte[IN4_ADDR_SIZE];  String[] tokens=ipv4AddrStr.split("\\.",-1);  long currentTkn;  try {switch (tokens.length) {case 1:      currentTkn=Long.parseLong(tokens[0]);    if (currentTkn < 0 || currentTkn > 0xffffffffL)     return null;  address[0]=(byte)((currentTkn >> 24) & 0xff);address[1]=(byte)(((currentTkn & 0xffffff) >> 16) & 0xff);address[2]=(byte)(((currentTkn & 0xffff) >> 8) & 0xff);address[3]=(byte)(currentTkn & 0xff);break;case 2:currentTkn=Integer.parseInt(tokens[0]);if (currentTkn < 0 || currentTkn > 0xff) return null;address[0]=(byte)(currentTkn & 0xff);currentTkn=Integer.parseInt(tokens[1]);if (currentTkn < 0 || currentTkn > 0xffffff) return null;address[1]=(byte)((currentTkn >> 16) & 0xff);address[2]=(byte)(((currentTkn & 0xffff) >> 8) & 0xff);address[3]=(byte)(currentTkn & 0xff);break;case 3:for (int i=0; i < 2; i++) {currentTkn=Integer.parseInt(tokens[i]);if (currentTkn < 0 || currentTkn > 0xff) return null;address[i]=(byte)(currentTkn & 0xff);}currentTkn=Integer.parseInt(tokens[2]);if (currentTkn < 0 || currentTkn > 0xffff) return null;address[2]=(byte)((currentTkn >> 8) & 0xff);address[3]=(byte)(currentTkn & 0xff);break;case 4:for (int i=0; i < 4; i++) {currentTkn=Integer.parseInt(tokens[i]);if (currentTkn < 0 || currentTkn > 0xff) return null;address[i]=(byte)(currentTkn & 0xff);}break;default :return null;}} catch (NumberFormatException e) {return null;}return address;}  }
