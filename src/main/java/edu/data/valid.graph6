class C{  public boolean isRealmSubject(String subjectName) throws NameNotFoundException {  return users.isRealmSubject(subjectName);}  }
class C{  public Object clone() throws CloneNotSupportedException {  TemplateSubPatternAssociation tspa=(TemplateSubPatternAssociation)super.clone();  tspa.m_next=null;  return tspa;}  }
class C{  public void firePropertyChange(PropertyChangeEvent event){  String propertyName=event.getPropertyName();  Object oldValue=event.getOldValue();  Object newValue=event.getNewValue();  if (newValue != null && oldValue != null && newValue.equals(oldValue)) {    return;  }  notifyEachListener:   for (  PropertyChangeListener p : listeners) {    while (p instanceof PropertyChangeListenerProxy) {      PropertyChangeListenerProxy proxy=(PropertyChangeListenerProxy)p;      if (!Objects.equal(proxy.getPropertyName(),propertyName)) {        continue notifyEachListener;      }      p=(PropertyChangeListener)proxy.getListener();    }    p.propertyChange(event);  }}  }
class C{  public static boolean insertLineByNumber(String filePath,int lineNum,String line){  boolean success=false;  try {    if (line != null) {      LineNumberReader reader=getLineNumReader(filePath);      StringWriter writer=new StringWriter();      if (lineNum > 1) {        reader=(LineNumberReader)copyTillLine(reader,writer,lineNum);      }      writeLine(writer,line);      if (reader != null) {        success=copyTillEnd(reader,writer);        if (!success) {          throw new Exception("ERROR: Failed to copy lines");        }        String tempFilePath=filePath + ".tmp";        success=writeToFile(tempFilePath,writer);        if (!success) {          throw new Exception("ERROR: Writing to File");        }        File tempFile=new File(tempFilePath);        if (tempFile.exists() && tempFile.isFile()) {          copyFile(tempFilePath,filePath);        }        tempFile.delete();        success=true;      }    }  } catch (  Exception ex) {    Debug.log("FileUtils.insertLineByNumber() threw exception : ",ex);  }  return success;}  }
class C{  @Inject public DocsAccessAuditFilter(AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory){  super(AuditConstants.Component.DOCUMENTATION,auditEventPublisher,auditEventFactory);}  }
class C{  @Override public void removeAttribute(String name,boolean notify){  removeAttribute(name,notify,true);}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  public HttpEndpointConfigManager(ServerContext serverContext){  this.serverContext=checkNotNull(serverContext,"serverContext cannot be null");  this.auhtzFilterManager=new AuthorizationMechanismManager();  this.router=serverContext.getHTTPRouter();  this.startedApplications=new HashMap<>();}  }
class C{  DeletePrevCharAction(){  super(deletePrevCharAction);}  }
class C{  public DefaultColorSelectionModel(Color color){  selectedColor=color;}  }
class C{  public void push(EventQueue newEventQueue){  if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {    getEventLog().fine("EventQueue.push(" + newEventQueue + ")");  }  pushPopLock.lock();  try {    EventQueue topQueue=this;    while (topQueue.nextQueue != null) {      topQueue=topQueue.nextQueue;    }    if (topQueue.fwDispatcher != null) {      throw new RuntimeException("push() to queue with fwDispatcher");    }    if ((topQueue.dispatchThread != null) && (topQueue.dispatchThread.getEventQueue() == this)) {      newEventQueue.dispatchThread=topQueue.dispatchThread;      topQueue.dispatchThread.setEventQueue(newEventQueue);    }    while (topQueue.peekEvent() != null) {      try {        newEventQueue.postEventPrivate(topQueue.getNextEventPrivate());      } catch (      InterruptedException ie) {        if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {          getEventLog().fine("Interrupted push",ie);        }      }    }    topQueue.postEventPrivate(new InvocationEvent(topQueue,dummyRunnable));    newEventQueue.previousQueue=topQueue;    topQueue.nextQueue=newEventQueue;    if (appContext.get(AppContext.EVENT_QUEUE_KEY) == topQueue) {      appContext.put(AppContext.EVENT_QUEUE_KEY,newEventQueue);    }    pushPopCond.signalAll();  }  finally {    pushPopLock.unlock();  }}  }
class C{  public void remove(SessionID sessionID){  remoteSessionSet.remove(sessionID);}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  public boolean addUser(@NotNull User user){  int updatedRows=0;  try {    final PreparedStatement preparedStatement=connetion.getPreparedStatement("INSERT INTO Users (userId, userHash) " + "VALUES (?,?)");    preparedStatement.setInt(1,user.getUserId());    if ((user.getUserHash() == null) || (user.getUserHash() == 0L)) {      preparedStatement.setNull(2,Types.NUMERIC);    } else {      preparedStatement.setLong(2,user.getUserHash());    }    updatedRows=preparedStatement.executeUpdate();  } catch (  SQLException e) {    BotLogger.error(LOGTAG,e);  }  return updatedRows > 0;}  }
class C{  public Builder withUserId(String userId){  this.userId=userId;  return this;}  }
class C{  public static boolean isNameRegistrationSuccess(HttpServletRequest request){  String status=request.getParameter(IFSConstants.REGISTRATION_STATUS);  if (status != null && status.equalsIgnoreCase(IFSConstants.REGISTRATION_SUCCESS)) {    return true;  } else {    return false;  }}  }
class C{  public String toString(){  if (description != null) {    return description;  }  return super.toString();}  }
class C{  private void doAcquireInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public final int accumulateAndGet(int x,IntBinaryOperator accumulatorFunction){  int prev, next;  do {    prev=get();    next=accumulatorFunction.applyAsInt(prev,x);  } while (!compareAndSet(prev,next));  return next;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore2.class,args);}  }
class C{  public Version createVersion(int value){  ProtoVersionField protoVersionField=new ProtoVersionField();  try {    protoVersionField.setVersion(value);  } catch (  SdpException s) {    s.printStackTrace();    return null;  }  return protoVersionField;}  }
class C{  private void configureMessageLabel(JLabel label){  Color color=(Color)DefaultLookup.get(optionPane,this,"OptionPane.messageForeground");  if (color != null) {    label.setForeground(color);  }  Font messageFont=(Font)DefaultLookup.get(optionPane,this,"OptionPane.messageFont");  if (messageFont != null) {    label.setFont(messageFont);  }}  }
class C{  public static final String encode(String src){  return new String(encode(src.getBytes()));}  }
class C{  private void parse_index_access() throws SyntaxException {  Expression e=parsedExps.pop();  nextNode(false);  if (current instanceof Element) {    expecting("]",current.previous(),current,err);    parsedExps.push(new AST.Index(e,Collections.emptyList(),e.line_col()));    nextNode(true);  } else {    expecting("]",current,current.next() == null ? null : current.next().next(),err);    List<Statement> stmts=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);    List<Expression> exps=new ArrayList<>();    for (    Statement stmt : stmts) {      if (stmt instanceof Expression) {        exps.add((Expression)stmt);      } else {        err.UnexpectedTokenException("index access expression",stmt.toString(),stmt.line_col());        err.debug("ignore the statement");      }    }    parsedExps.push(new AST.Index(e,exps,e.line_col()));    nextNode(false);    nextNode(true);  }  parse_expression();}  }
class C{  public void sendData() throws IOException {  if (writer != null) {    writer.write(buffer.toString());    buffer=new StringBuilder();  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Shootme : Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  protected void convertURI(MessageBytes uri,Request request) throws IOException {  ByteChunk bc=uri.getByteChunk();  int length=bc.getLength();  CharChunk cc=uri.getCharChunk();  cc.allocate(length,-1);  String enc=connector.getURIEncoding();  if (enc != null) {    B2CConverter conv=request.getURIConverter();    try {      if (conv == null) {        conv=new B2CConverter(B2CConverter.getCharset(enc),true);        request.setURIConverter(conv);      } else {        conv.recycle();      }    } catch (    IOException e) {      log.error(sm.getString("coyoteAdapter.invalidEncoding"));      connector.setURIEncoding(null);    }    if (conv != null) {      try {        conv.convert(bc,cc,true);        uri.setChars(cc.getBuffer(),cc.getStart(),cc.getLength());        return;      } catch (      IOException ioe) {        request.getResponse().sendError(HttpServletResponse.SC_BAD_REQUEST);      }    }  }  byte[] bbuf=bc.getBuffer();  char[] cbuf=cc.getBuffer();  int start=bc.getStart();  for (int i=0; i < length; i++) {    cbuf[i]=(char)(bbuf[i + start] & 0xff);  }  uri.setChars(cbuf,0,length);}  }
class C{  public void add(String fieldName,String value){  if (fieldName == null)   throw new IllegalArgumentException("fieldname == null");  if (value == null)   throw new IllegalArgumentException("value == null");  if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {    throw new IllegalArgumentException("Unexpected header: " + fieldName + ": "+ value);  }  addLenient(fieldName,value);}  }
class C{  public String displayStructureAsPlainText(){  return "";}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  mScroller.startScroll(startX,startY,dx,dy);}  }
class C{  public void testRead3() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  int expected=data.length;  byte[] result=new byte[expected];  int skip=2;  int ind=skip;  cis.read(null,0,skip);  int got=skip + cis.read(result,0,1);  while (true) {    for (int j=0; j < got - ind; j++) {      assertEquals("read(byte[] b, int off, int len) " + "returned incorrect data.",result[j],data[ind + j]);    }    if (got == expected) {      break;    } else     if (got > expected) {      fail("The data returned by " + "read(byte[] b, int off, int len) " + "is larger than expected.");    } else {      ind=got;      got+=cis.read(result,0,3);    }  }  if (cis.read(result,0,1) != -1) {    fail("read() should return -1 at the end of the stream.");  }}  }
class C{  public void postTerminateNameIDSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,ManageNameIDRequest idRequest,ManageNameIDResponse idResponse,String binding){  return;}  }
class C{  public void testIsMalformed(){  assertFalse(CoderResult.UNDERFLOW.isMalformed());  assertFalse(CoderResult.OVERFLOW.isMalformed());  assertTrue(CoderResult.malformedForLength(1).isMalformed());  assertFalse(CoderResult.unmappableForLength(1).isMalformed());}  }
class C{  public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  if (!rewriteExif(filename,tags)) {    ExifData tempData=mData;    mData=new ExifData(DEFAULT_BYTE_ORDER);    FileInputStream is=null;    ByteArrayOutputStream bytes=null;    try {      is=new FileInputStream(filename);      bytes=new ByteArrayOutputStream();      doExifStreamIO(is,bytes);      byte[] imageBytes=bytes.toByteArray();      readExif(imageBytes);      setTags(tags);      writeExif(imageBytes,filename);    } catch (    IOException e) {      closeSilently(is);      throw e;    } finally {      is.close();      mData=tempData;    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignedInfoType createSignedInfoType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignedInfoTypeImpl();}  }
class C{  public static NSObject parse(byte[] bytes) throws ParseException {  ASCIIPropertyListParser parser=new ASCIIPropertyListParser(bytes);  return parser.parse();}  }
class C{  public void test_RSAMultiPrimePrivateCrtKey(){  RSAMulti rsam=new RSAMulti(publicExponent,primeExponentP,primeExponentQ,primeP,primeQ,crtCoefficient,opi);  try {    assertEquals(rsam.getCrtCoefficient(),crtCoefficient);    assertEquals(rsam.getPrimeExponentP(),primeExponentP);    assertEquals(rsam.getPrimeExponentQ(),primeExponentQ);    assertEquals(rsam.getPrimeP(),primeP);    assertEquals(rsam.getPrimeQ(),primeQ);    assertEquals(rsam.getPublicExponent(),publicExponent);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public ChunkRemover(final GUID... guids){  this.toRemove=new HashSet<GUID>();  for (  final GUID current : guids) {    this.toRemove.add(current);  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdatamiddle.class,args);}  }
class C{  public static int convertToUtf32(char[] text,int idx){  return (text[idx] - 0xd800) * 0x400 + text[idx + 1] - 0xdc00 + 0x10000;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  HeaderFactoryImpl headerFactoryImpl=(HeaderFactoryImpl)headerFactory;  ListIterator li=null;  AllowHeader allow=null;  String allowMethods=new String();  li=request.getHeaders(AllowHeader.NAME);  try {    while (li.hasNext()) {      allow=(AllowHeader)li.next();      allowMethods=allowMethods.concat(allow.getMethod()).concat(" ");    }  } catch (  Exception ex) {    System.out.println("\n(!) Exception getting Allow header! - " + ex);  }  RequireHeader require=null;  String requireOptionTags=new String();  li=null;  li=request.getHeaders(RequireHeader.NAME);  try {    while (li.hasNext()) {      require=(RequireHeader)li.next();      requireOptionTags=requireOptionTags.concat(require.getOptionTag()).concat(" ");    }  } catch (  Exception ex) {    System.out.println("\n(!) Exception getting Require header! - " + ex);  }  SupportedHeader supported=null;  String supportedOptionTags=new String();  li=request.getHeaders(SupportedHeader.NAME);  try {    while (li.hasNext()) {      supported=(SupportedHeader)li.next();      supportedOptionTags=supportedOptionTags.concat(supported.getOptionTag()).concat(" ");    }  } catch (  NullPointerException ex) {    System.out.println("\n(!) Exception getting Supported header! - " + ex);  }  PCalledPartyIDHeader calledParty;  try {    calledParty=(PCalledPartyIDHeader)request.getHeader(PCalledPartyIDHeader.NAME);    if (calledParty != null) {      System.out.println(".: P-Called-Party-ID = " + calledParty.getAddress().toString());    } else     System.out.println(".: NOT received P-Called-Party-ID ! ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Called-Party-ID header! - " + ex);  }  ListIterator associatedURIList;  try {    associatedURIList=request.getHeaders(PAssociatedURIHeader.NAME);    if (associatedURIList != null) {      System.out.print(".: P-Associated-URI = ");      while (associatedURIList.hasNext()) {        PAssociatedURIHeader associatedURI=(PAssociatedURIHeader)associatedURIList.next();        System.out.print(associatedURI.getAssociatedURI().toString());        if (associatedURIList.hasNext())         System.out.print(", ");      }    } else     System.out.println(".: NOT received P-Associated-URI ! ");    System.out.print("\n");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Associated-URI header! - " + ex);  }  PAccessNetworkInfoHeader accessInfo=null;  try {    accessInfo=(PAccessNetworkInfoHeader)request.getHeader(PAccessNetworkInfoHeader.NAME);    if (accessInfo != null) {      System.out.print(".: P-Access-Network-Info: Access Type = " + accessInfo.getAccessType());      if (accessInfo.getAccessType().equalsIgnoreCase(PAccessNetworkInfoHeader.GGGPP_UTRAN_TDD))       System.out.print(" - Cell ID = " + accessInfo.getUtranCellID3GPP());    } else     System.out.println(".: NOT received P-Access-Network-Info ! ");    System.out.println("");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Access-Network-Info header! - " + ex);  }  if (accessInfo != null) {    PAccessNetworkInfo accessInfoClone=(PAccessNetworkInfo)accessInfo.clone();    System.out.println("--> clone = " + accessInfoClone.toString());    System.out.println("--> equals? " + accessInfoClone.equals(accessInfo));  }  ListIterator visitedNetList;  try {    visitedNetList=request.getHeaders(PVisitedNetworkIDHeader.NAME);    if (visitedNetList != null) {      System.out.print(".: P-Visited-Network-ID = ");      while (visitedNetList.hasNext()) {        PVisitedNetworkIDHeader visitedID=(PVisitedNetworkIDHeader)visitedNetList.next();        System.out.print(visitedID.getVisitedNetworkID());        if (visitedNetList.hasNext())         System.out.print(", ");      }      System.out.print("\n");    } else     System.out.print(".: NOT received P-Visited-Network-ID ! ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Visited-Network-ID header! - " + ex);  }  ListIterator privacyList;  try {    privacyList=request.getHeaders(PrivacyHeader.NAME);    if (privacyList != null && privacyList.hasNext()) {      System.out.print(".: Privacy = ");      while (privacyList.hasNext()) {        PrivacyHeader privacy=(PrivacyHeader)privacyList.next();        System.out.print(privacy.getPrivacy());        if (privacyList.hasNext())         System.out.print("; ");      }      System.out.println("");    } else     System.out.println(".: NOT received Privacy ! ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting Privacy header! - " + ex);  }  PPreferredIdentityHeader preferredID;  try {    preferredID=(PPreferredIdentityHeader)request.getHeader(PPreferredIdentityHeader.NAME);    if (preferredID != null) {      System.out.println(".: P-Preferred-Identity = " + preferredID.getAddress().toString());    } else     System.out.println(".: NOT received P-Preferred-Identity ! ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Preferred-Identity header! - " + ex);  }  ListIterator assertedIDList;  try {    assertedIDList=request.getHeaders(PAssertedIdentityHeader.NAME);    if (assertedIDList != null && assertedIDList.hasNext()) {      System.out.print(".: P-Asserted-Identity = ");      while (assertedIDList.hasNext()) {        PAssertedIdentityHeader assertedID=(PAssertedIdentityHeader)assertedIDList.next();        System.out.print(assertedID.getAddress().toString());        if (assertedIDList.hasNext())         System.out.print(", ");      }      System.out.println("");    } else     System.out.println(".: NOT received P-Asserted-Identity... ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Asserted-Identity header! - " + ex);  }  PChargingFunctionAddressesHeader chargAddr;  try {    chargAddr=(PChargingFunctionAddressesHeader)request.getHeader(PChargingFunctionAddressesHeader.NAME);    if (chargAddr != null) {      Iterator param=chargAddr.getParameterNames();      System.out.print(".: P-Charging-Function-Addresses = ");      if (param != null) {        while (param.hasNext()) {          String paramName=(String)param.next();          System.out.print(paramName + "=" + chargAddr.getParameter(paramName));          if (param.hasNext())           System.out.print(", ");        }      }      System.out.println("");    } else     System.out.println(".: NOT containing P-Charging-Function-Addresses... ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Charging-Function-Addresses header! - " + ex);  }  PChargingVectorHeader chargVect;  try {    chargVect=(PChargingVectorHeader)request.getHeader(PChargingVectorHeader.NAME);    if (chargVect != null) {      Iterator param=chargVect.getParameterNames();      System.out.print(".: P-Charging-Vector = ");      if (param != null && param.hasNext()) {        while (param.hasNext()) {          String paramName=(String)param.next();          System.out.print(paramName + "=" + chargVect.getParameter(paramName));          if (param.hasNext())           System.out.print(", ");        }      }      System.out.println("");    } else     System.out.println(".: NOT containing P-Charging-Vector... ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Charging-Vector header! - " + ex);  }  ListIterator mediaAuthList;  try {    mediaAuthList=request.getHeaders(PMediaAuthorizationHeader.NAME);    if (mediaAuthList != null) {      System.out.print(".: P-Media-Authorization = ");      while (mediaAuthList.hasNext()) {        PMediaAuthorizationHeader mediaAuth=(PMediaAuthorizationHeader)mediaAuthList.next();        System.out.print(mediaAuth.getToken());        if (mediaAuthList.hasNext())         System.out.print(", ");      }      System.out.println("");    } else     System.out.println(".: NOT containing P-Media-Authorization... ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting P-Media-Authorization header! - " + ex);  }  ListIterator secClientList;  try {    secClientList=request.getHeaders(SecurityClientHeader.NAME);    if (secClientList != null) {      while (secClientList.hasNext()) {        System.out.println(".: " + ((SecurityClientHeader)secClientList.next()).toString());      }    } else     System.out.println(".: NOT containing Security-Client header... ");  } catch (  Exception ex) {    System.out.println("(!) Exception getting Security-Client header! - " + ex);  }  SecurityServerList secServerList=null;  if (requireOptionTags.indexOf("sec-agree") != -1) {    secServerList=new SecurityServerList();    try {      SecurityServerHeader secServer1=headerFactoryImpl.createSecurityClientHeader();      secServer1.setSecurityMechanism("ipsec-3gpp");      secServer1.setAlgorithm("hmac-md5-96");      secServer1.setEncryptionAlgorithm("des-cbc");      secServer1.setSPIClient(10000);      secServer1.setSPIServer(10001);      secServer1.setPortClient(5063);      secServer1.setPortServer(4166);      secServer1.setPreference(0.1f);      SecurityServerHeader secServer2=headerFactoryImpl.createSecurityClientHeader();      secServer2.setSecurityMechanism("ipsec-3gpp");      secServer2.setAlgorithm("hmac-md5-96");      secServer2.setEncryptionAlgorithm("des-cbc");      secServer2.setSPIClient(20000);      secServer2.setSPIServer(20001);      secServer2.setPortClient(5073);      secServer2.setPortServer(4286);      secServer2.setPreference(0.5f);      request.addHeader(secServer1);      request.addHeader(secServer2);    } catch (    Exception ex) {      System.out.println("(!) Exception adding Security-Server header : " + ex);    }  }  ListIterator<Header> pathList=(ListIterator<Header>)request.getHeaders(PathHeader.NAME);  if (pathList != null && pathList.hasNext()) {    System.out.print(".: Path received : ");    while (pathList.hasNext()) {      PathHeader path=(PathHeader)pathList.next();      if (path != null)       System.out.print(path.getAddress().toString());      if (pathList.hasNext())       System.out.print(", ");    }    System.out.println("");  }  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    if (secServerList != null && !secServerList.isEmpty()) {      RequireHeader requireHeader=headerFactory.createRequireHeader("sec-agree");      this.okResponse.setHeader(requireHeader);      this.okResponse.setHeader(secServerList);    }    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized E elementAt(int location){  if (location < elementCount) {    return (E)elementData[location];  }  throw arrayIndexOutOfBoundsException(location,elementCount);}  }
class C{  @Override public void write(int b){  for (  OutputStream s : targetStreams) {    try {      s.write(b);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public void initialize(int keysize,SecureRandom random){}  }
class C{  public void deleteLogFileAfterSuccess(){  if (isEnabled()) {    fileHandler.close();    logFile.delete();  }}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x))     return true;    i=(i + 1) & mask;  }  return false;}  }
class C{  public AppInfo(Context context,LauncherActivityInfoCompat info,UserHandleCompat user,IconCache iconCache){  this.componentName=info.getComponentName();  this.container=ItemInfo.NO_ID;  flags=initFlags(info);  firstInstallTime=info.getFirstInstallTime();  iconCache.getTitleAndIcon(this,info,true);  intent=makeLaunchIntent(context,info,user);  this.user=user;}  }
class C{  public static SearchFilter createGreaterOrEqualFilter(AttributeType attributeType,Set<String> attributeOptions,ByteString assertionValue){  return new SearchFilter(FilterType.GREATER_OR_EQUAL,null,null,attributeType,attributeOptions,assertionValue,null,null,null,null,false);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.KeyInfoType createKeyInfoType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.KeyInfoTypeImpl();}  }
class C{  public boolean isSubregion(){  return subregion;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    logger.info("shootme: got an ACK " + requestEvent.getRequest());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    if (ackCount == 1) {      dialog=inviteTid.getDialog();      Thread.sleep(100);      this.sendReInvite(sipProvider);    } else     ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    String s="Unexpected error";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.ExtensionElementImpl();}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementById02.class,args);}  }
class C{  public static void appendInt(AbstractStringBuilder sb,int i){  convertInt(sb,i);}  }
class C{  protected boolean isNotSameAsOwner(MultistepExprHolder head,ElemTemplateElement ete){  MultistepExprHolder next=head;  while (null != next) {    ElemTemplateElement elemOwner=getElemFromExpression(next.m_exprOwner.getExpression());    if (elemOwner == ete)     return false;    next=next.m_next;  }  return true;}  }
class C{  public static void sort(byte[] a){  doSort(a,0,a.length - 1);}  }
class C{  public void endElement(String qName) throws SAXException {  if (!namespaces) {    if (contentHandler != null) {      contentHandler.endElement("","",qName.intern());    }    return;  }  String names[]=processName(qName,false,false);  if (contentHandler != null) {    contentHandler.endElement(names[0],names[1],names[2]);    Enumeration prefixes=nsSupport.getDeclaredPrefixes();    while (prefixes.hasMoreElements()) {      String prefix=(String)prefixes.nextElement();      contentHandler.endPrefixMapping(prefix);    }  }  nsSupport.popContext();}  }
class C{  public int plaline_len(int offset){  return lines_list.size() + offset;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  Attr clonedTitle;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  clonedTitle=(Attr)titleAttr.cloneNode(false);  textNode.setNodeValue("text_node_not_cloned");  value=clonedTitle.getValue();  assertEquals("attrValue","Yesterday",value);  value=clonedTitle.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  lastChild=clonedTitle.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","terday",value);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ResourceRef[");  sb.append("className=");  sb.append(getClassName());  sb.append(",factoryClassLocation=");  sb.append(getFactoryClassLocation());  sb.append(",factoryClassName=");  sb.append(getFactoryClassName());  Enumeration<RefAddr> refAddrs=getAll();  while (refAddrs.hasMoreElements()) {    RefAddr refAddr=refAddrs.nextElement();    sb.append(",{type=");    sb.append(refAddr.getType());    sb.append(",content=");    sb.append(refAddr.getContent());    sb.append("}");  }  sb.append("]");  return (sb.toString());}  }
class C{  public LDAPURL(String scheme,String host,int port,DN baseDN,LinkedHashSet<String> attributes,SearchScope scope,SearchFilter filter,List<String> extensions){  this.host=toLowerCase(host);  if (scheme == null) {    this.scheme="ldap";  } else {    this.scheme=toLowerCase(scheme);  }  this.port=toPort(port);  if (baseDN == null) {    this.baseDN=DEFAULT_BASE_DN;    this.rawBaseDN=DEFAULT_BASE_DN.toString();  } else {    this.baseDN=baseDN;    this.rawBaseDN=baseDN.toString();  }  if (attributes == null) {    this.attributes=new LinkedHashSet<>();  } else {    this.attributes=attributes;  }  if (scope == null) {    this.scope=DEFAULT_SEARCH_SCOPE;  } else {    this.scope=scope;  }  if (filter == null) {    this.filter=DEFAULT_SEARCH_FILTER;    this.rawFilter=DEFAULT_SEARCH_FILTER.toString();  } else {    this.filter=filter;    this.rawFilter=filter.toString();  }  if (extensions == null) {    this.extensions=new LinkedList<>();  } else {    this.extensions=extensions;  }}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  @NonNull public static Interpolator linear(){  return new LinearInterpolator();}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  @Override public String toString(){  return (toXML());}  }
class C{  public static void encode(String content,ErrorCorrectionLevel ecLevel,QRCode qrCode) throws WriterException {  encode(content,ecLevel,null,qrCode);}  }
class C{  @Override public void onCreate(){synchronized (this) {    if (!isAlreadyRunning) {      isAlreadyRunning=true;    } else {      return;    }  }  alertUserOnStartStop(true);  for (  SystemServiceEventMonitor monitor : MONITORS) {    try {      monitor.init();      Logger.w(TAG,monitor.getMonitorName() + ": Start\n");    } catch (    Exception e) {      Logger.e(TAG,monitor.getMonitorName() + " did not start.\nThe following error occurred: " + e+ e.getMessage()+ e.getStackTrace());    }  }}  }
class C{  public boolean isWrapperFor(Class<?> wrappedType){  if (wrappedType.isAssignableFrom(response.getClass())) {    return true;  }  if (response instanceof ServletResponseWrapper) {    return ((ServletResponseWrapper)response).isWrapperFor(wrappedType);  }  return false;}  }
class C{  private void processModifyDN(Map<DN,DN> modDNMap,boolean log){  if (modDNMap != null) {    if (log) {      writeLog(modDNMap);    } else {      for (      DN baseDN : getBaseDNsToSearch()) {        doBaseDN(baseDN,modDNMap);      }    }  }}  }
class C{  public boolean isCaseInsensitive(){  return isCaseInsensitive;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public JobStateReasons(){  super();}  }
class C{  public static boolean isStandard(SchemaElement fileElement){  final String fileName=getElementSchemaFile(fileElement);  if (fileName != null) {    return standardSchemaFileNames.contains(fileName) || fileName.toLowerCase().contains("-rfc");  }  String xOrigin=getElementOrigin(fileElement);  if (xOrigin != null) {    return standardSchemaOrigins.contains(xOrigin) || xOrigin.startsWith("RFC ") || xOrigin.startsWith("draft-");  }  return false;}  }
class C{  public void unassignServices(String realmName,Set names) throws AMConsoleException {  if ((names != null) && !names.isEmpty()) {    if ((realmName == null) || (realmName.trim().length() == 0)) {      realmName="/";    }    String[] params=new String[2];    params[0]=realmName;    String curServiceName="";    try {      OrganizationConfigManager scm=new OrganizationConfigManager(getUserSSOToken(),realmName);      AMIdentityRepository repo=new AMIdentityRepository(getUserSSOToken(),realmName);      AMIdentity realmIdentity=repo.getRealmIdentity();      Set realmServices=realmIdentity.getAssignedServices();      for (Iterator iter=names.iterator(); iter.hasNext(); ) {        String name=(String)iter.next();        curServiceName=name;        params[1]=name;        logEvent("ATTEMPT_UNASSIGN_SERVICE_FROM_REALM",params);        if (realmServices.contains(name)) {          realmIdentity.unassignService(name);        } else {          scm.unassignService(name);        }        logEvent("SUCCEED_UNASSIGN_SERVICE_FROM_REALM",params);      }    } catch (    SMSException e) {      String strError=getErrorString(e);      String[] paramsEx={realmName,curServiceName,strError};      logEvent("SMS_EXCEPTION_UNASSIGN_SERVICE_FROM_REALM",paramsEx);      throw new AMConsoleException(strError);    }catch (    SSOException e) {      String strError=getErrorString(e);      String[] paramsEx={realmName,curServiceName,strError};      logEvent("SSO_EXCEPTION_UNASSIGN_SERVICE_FROM_REALM",paramsEx);      throw new AMConsoleException(strError);    }catch (    IdRepoException e) {      String strError=getErrorString(e);      String[] paramsEx={realmName,curServiceName,strError};      logEvent("IDREPO_EXCEPTION_UNASSIGN_SERVICE_FROM_REALM",paramsEx);      throw new AMConsoleException(strError);    }  }}  }
class C{  void addPolicyListener(PolicyListener policyListener){  String listenerServiceName=policyListener.getServiceTypeName();  Set newListeners=new HashSet();  newListeners.add(policyListener);  Set oldListeners=(Set)policyListenersMap.get(listenerServiceName);  if (oldListeners != null) {    newListeners.addAll(oldListeners);  }  policyListenersMap.put(listenerServiceName,newListeners);}  }
class C{  public void remove(DN userDN,ClientConnection clientConnection){  lock.writeLock().lock();  try {    CopyOnWriteArraySet<ClientConnection> connectionSet=userMap.get(userDN);    if (connectionSet != null) {      connectionSet.remove(clientConnection);      if (connectionSet.isEmpty()) {        userMap.remove(userDN);      }    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public JCheckBox(String text){  this(text,null,false);}  }
class C{  public XPathException(String message){  super(message);  if (message == null) {    throw new NullPointerException("message == null");  }  this.cause=null;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.restartServer();  numSubordinatesType=DirectoryServer.getSchema().getAttributeType("numsubordinates");  entries=TestCaseUtils.makeEntries("dn: dc=example,dc=com","objectclass: top","objectclass: domain","dc: example","","dn: ou=People,dc=example,dc=com","objectclass: top","objectclass: organizationalUnit","ou: People","","dn: ou=Employees,ou=People,dc=example,dc=com","objectclass: top","objectclass: organizationalUnit","ou: Employees","","dn: ou=Buildings,dc=example,dc=com","objectclass: top","objectclass: organizationalUnit","ou: Buildings","","dn: uid=user.0,ou=People,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","givenName: Aaccf","sn: Amar","cn: Aaccf Amar","initials: AQA","employeeNumber: 0","uid: user.0","mail: user.0@example.com","userPassword: password","telephoneNumber: 380-535-2354","homePhone: 707-626-3913","pager: 456-345-7750","mobile: 366-674-7274","street: 99262 Eleventh Street","l: Salem","st: NM","postalCode: 36530","postalAddress: Aaccf Amar$99262 Eleventh Street$Salem, NM  36530","description: This is the description for Aaccf Amar.","","dn: uid=user.1,ou=People,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","givenName: Aaren","sn: Atp","cn: Aaren Atp","initials: APA","employeeNumber: 1","uid: user.1","mail: user.1@example.com","userPassword: password","telephoneNumber: 643-278-6134","homePhone: 546-786-4099","pager: 508-261-3187","mobile: 377-267-7824","street: 78113 Fifth Street","l: Chico","st: TN","postalCode: 72322","postalAddress: Aaren Atp$78113 Fifth Street$Chico, TN  72322","description: This is the description for Aaren Atp.","","dn: uid=user.2,ou=Employees,ou=People,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","givenName: Aarika","sn: Atpco","cn: Aarika Atpco","initials: ARA","employeeNumber: 2","uid: user.2","mail: user.2@example.com","userPassword: password","telephoneNumber: 547-504-3498","homePhone: 955-899-7308","pager: 710-832-9316","mobile: 688-388-4525","street: 59208 Elm Street","l: Youngstown","st: HI","postalCode: 57377","postalAddress: Aarika Atpco$59208 Elm Street$Youngstown, HI  57377","description: This is the description for Aarika Atpco.");  TestCaseUtils.clearBackend("userRoot");  TestCaseUtils.addEntries(entries);}  }
class C{  protected SearchResults(Connection connection,ConnectionEntryReader ldapSearchResult,Connection conn){  this(connection,ldapSearchResult,conn,null);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.DoNotCacheConditionElement createDoNotCacheConditionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.DoNotCacheConditionElementImpl();}  }
class C{  private static VersionIdentifier parseVersionString(final InputStream xml) throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  final DocumentBuilder builder=factory.newDocumentBuilder();  final Document doc=builder.parse(xml);  final XPathFactory xPathfactory=XPathFactory.newInstance();  final XPath xpath=xPathfactory.newXPath();  final XPathExpression expr=xpath.compile("/metadata/versioning/versions/version");  return VersionRetriever.parseNodeList((NodeList)expr.evaluate(doc,XPathConstants.NODESET));}  }
class C{  private static int compateOids(ObjectIdentifier oid1,ObjectIdentifier oid2){  if (oid1 == oid2) {    return 0;  }  int[] ioid1=oid1.getOid();  int[] ioid2=oid2.getOid();  int min=ioid1.length < ioid2.length ? ioid1.length : ioid2.length;  for (int i=0; i < min; ++i) {    if (ioid1[i] < ioid2[i]) {      return -1;    }    if (ioid1[i] > ioid2[i]) {      return 1;    }    if ((i + 1) == ioid1.length && (i + 1) < ioid2.length) {      return -1;    }    if ((i + 1) < ioid1.length && (i + 1) == ioid2.length) {      return 1;    }  }  return 0;}  }
class C{  public final V updateAndGet(UnaryOperator<V> updateFunction){  V prev, next;  do {    prev=get();    next=updateFunction.apply(prev);  } while (!compareAndSet(prev,next));  return next;}  }
class C{  public boolean isColumnEnabled(final int col){  return this.columnsValues.get(col).isEnabled();}  }
class C{  public IdentityMapperConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  identityMappers=new ConcurrentHashMap<>();}  }
class C{  public AuthenticationStatement(Element element) throws SAMLException {  if (element == null) {    SAMLUtilsCommon.debug.message("AuthenticationStatement: null input.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  boolean valid=SAMLUtilsCommon.checkStatement(element,"AuthenticationStatement");  if (!valid) {    SAMLUtilsCommon.debug.message("AuthenticationStatement: Wrong input.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }  int i=0;  NamedNodeMap atts=((Node)element).getAttributes();  int attCount=atts.getLength();  for (i=0; i < attCount; i++) {    Node att=atts.item(i);    if (att.getNodeType() == Node.ATTRIBUTE_NODE) {      String attName=att.getLocalName();      if (attName == null || attName.length() == 0) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("AuthenticationStatement:" + "Attribute name is either null or empty.");        }        continue;      }      if (attName.equals("AuthenticationMethod")) {        _authenticationMethod=((Attr)att).getValue().trim();      } else       if (attName.equals("AuthenticationInstant")) {        try {          _authenticationInstant=DateUtils.stringToDate(((Attr)att).getValue());        } catch (        ParseException pe) {          SAMLUtilsCommon.debug.error("AuthenticationStatement:StringToDate",pe);          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongDateFormat"));        }      }    }  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        String tagName=currentNode.getLocalName();        String tagNS=currentNode.getNamespaceURI();        if ((tagName == null) || tagName.length() == 0 || tagNS == null || tagNS.length() == 0) {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("AuthenticationStatement: The" + " tag name or tag namespace of child" + " element is either null or empty.");          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));        }        if (tagName.equals("Subject") && tagNS.equals(SAMLConstants.assertionSAMLNameSpaceURI)) {          if (this._subject != null) {            if (SAMLUtilsCommon.debug.messageEnabled()) {              SAMLUtilsCommon.debug.message("Authentication" + "Statement:should only contain one subject");            }            throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("oneElement"));          } else {            this._subject=createSubject((Element)currentNode);          }        } else         if (tagName.equals("SubjectLocality") && tagNS.equals(SAMLConstants.assertionSAMLNameSpaceURI)) {          if (_subjectLocality != null) {            if (SAMLUtilsCommon.debug.messageEnabled()) {              SAMLUtilsCommon.debug.message("Authentication" + "Statement: should at most " + "contain one SubjectLocality.");            }            throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("oneElement"));          } else {            _subjectLocality=createSubjectLocality((Element)currentNode);          }        } else         if (tagName.equals("AuthorityBinding") && tagNS.equals(SAMLConstants.assertionSAMLNameSpaceURI)) {          if (_authorityBinding == null) {            _authorityBinding=new ArrayList();          }          if ((_authorityBinding.add(createAuthorityBinding((Element)currentNode))) == false) {            if (SAMLUtilsCommon.debug.messageEnabled()) {              SAMLUtilsCommon.debug.message("Authentication Statment: failed to" + " add to the AuthorityBinding list.");            }            throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("addListError"));          }        } else {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("AuthenticationStatement:" + "Wrong element " + tagName + "included.");          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));        }      }    }  }  if (this._subject == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthenticationStatement should " + "contain one subject.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElement"));  }}  }
class C{  public ConnectionException(){  super();}  }
class C{  public ServerController(Application application,Installation installation){  if (installation == null) {    throw new NullPointerException("installation cannot be null");  }  this.application=application;  this.installation=installation;}  }
class C{  public static void closeSession() throws HibernateException {  Session session=(Session)threadLocal.get();  threadLocal.set(null);  if (session != null) {    session.close();  }}  }
class C{  public void endComposition(){}  }
class C{  public int hashCode(){  int hash=attrID.hashCode();  int num=values.size();  Object val;  for (int i=0; i < num; i++) {    val=values.elementAt(i);    if (val != null) {      if (val.getClass().isArray()) {        Object it;        int len=Array.getLength(val);        for (int j=0; j < len; j++) {          it=Array.get(val,j);          if (it != null) {            hash+=it.hashCode();          }        }      } else {        hash+=val.hashCode();      }    }  }  return hash;}  }
class C{  public EngineRuleSet(){  this("");}  }
class C{  public ConfiguredReplication configureReplication(ConnectionWrapper conn,Map<DN,Set<HostPort>> replicationServers,int replicationPort,boolean useSecureReplication,Set<Integer> usedReplicationServerIds,Set<Integer> usedReplicaServerIds) throws ApplicationException {  boolean synchProviderCreated;  boolean synchProviderEnabled;  boolean replicationServerCreated;  boolean secureReplicationEnabled;  try {    RootCfgClient root=conn.getRootConfiguration();    ReplicationSynchronizationProviderCfgClient sync=null;    try {      sync=(ReplicationSynchronizationProviderCfgClient)root.getSynchronizationProvider("Multimaster Synchronization");    } catch (    ManagedObjectNotFoundException monfe) {    }    if (sync == null) {      ReplicationSynchronizationProviderCfgDefn provider=ReplicationSynchronizationProviderCfgDefn.getInstance();      sync=root.createSynchronizationProvider(provider,"Multimaster Synchronization",new ArrayList<PropertyException>());      sync.setJavaClass(org.opends.server.replication.plugin.MultimasterReplication.class.getName());      sync.setEnabled(Boolean.TRUE);      synchProviderCreated=true;      synchProviderEnabled=false;    } else {      synchProviderCreated=false;      if (!sync.isEnabled()) {        sync.setEnabled(Boolean.TRUE);        synchProviderEnabled=true;      } else {        synchProviderEnabled=false;      }    }    sync.commit();    ReplicationServerCfgClient replicationServer;    if (!sync.hasReplicationServer()) {      if (useSecureReplication) {        CryptoManagerCfgClient crypto=root.getCryptoManager();        if (!crypto.isSSLEncryption()) {          crypto.setSSLEncryption(true);          crypto.commit();          secureReplicationEnabled=true;        } else {          secureReplicationEnabled=false;        }      } else {        secureReplicationEnabled=false;      }      int id=getReplicationId(usedReplicationServerIds);      usedReplicationServerIds.add(id);      replicationServer=sync.createReplicationServer(ReplicationServerCfgDefn.getInstance(),new ArrayList<PropertyException>());      replicationServer.setReplicationServerId(id);      replicationServer.setReplicationPort(replicationPort);      replicationServerCreated=true;    } else {      secureReplicationEnabled=false;      replicationServer=sync.getReplicationServer();      usedReplicationServerIds.add(replicationServer.getReplicationServerId());      replicationServerCreated=false;    }    Set<String> servers=replicationServer.getReplicationServer();    if (servers == null) {      servers=new HashSet<>();    }    Set<String> oldServers=new HashSet<>(servers);    for (    Set<HostPort> rs : replicationServers.values()) {      servers.addAll(toLowerCaseStrings(rs));    }    replicationServer.setReplicationServer(servers);    replicationServer.commit();    Set<String> newReplicationServers=intersect(servers,oldServers);    String[] domainNames=sync.listReplicationDomains();    if (domainNames == null) {      domainNames=new String[]{};    }    Set<ConfiguredDomain> domainsConf=new HashSet<>();    ReplicationDomainCfgClient[] domains=new ReplicationDomainCfgClient[domainNames.length];    for (int i=0; i < domains.length; i++) {      domains[i]=sync.getReplicationDomain(domainNames[i]);    }    for (    DN dn : replicationServers.keySet()) {      ReplicationDomainCfgClient domain=null;      boolean isCreated;      String domainName=null;      for (int i=0; i < domains.length && domain == null; i++) {        if (dn.equals(domains[i].getBaseDN())) {          domain=domains[i];          domainName=domainNames[i];        }      }      if (domain == null) {        int replicaServerId=getReplicationId(usedReplicaServerIds);        usedReplicaServerIds.add(replicaServerId);        domainName=getDomainName(domainNames,dn);        domain=sync.createReplicationDomain(ReplicationDomainCfgDefn.getInstance(),domainName,new ArrayList<PropertyException>());        domain.setServerId(replicaServerId);        domain.setBaseDN(dn);        isCreated=true;      } else {        isCreated=false;      }      oldServers=domain.getReplicationServer();      if (oldServers == null) {        oldServers=new TreeSet<>();      }      servers=toLowerCaseStrings(replicationServers.get(dn));      domain.setReplicationServer(servers);      usedReplicaServerIds.add(domain.getServerId());      domain.commit();      Set<String> addedServers=intersect(servers,oldServers);      domainsConf.add(new ConfiguredDomain(domainName,isCreated,addedServers));    }    return new ConfiguredReplication(synchProviderCreated,synchProviderEnabled,replicationServerCreated,secureReplicationEnabled,newReplicationServers,domainsConf);  } catch (  Throwable t) {    throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,INFO_ERROR_CONFIGURING_REMOTE_GENERIC.get(conn.getHostPort(),t),t);  }}  }
class C{  void ReconstructPrivateSubrs(int Font,IndexBaseItem[] fdPrivateBase,OffsetItem[] fdSubrs){  for (int i=0; i < fonts[Font].fdprivateLengths.length; i++) {    if (fdSubrs[i] != null && fonts[Font].PrivateSubrsOffset[i] >= 0) {      OutputList.addLast(new SubrMarkerItem(fdSubrs[i],fdPrivateBase[i]));      if (NewLSubrsIndex[i] != null)       OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewLSubrsIndex[i])),0,NewLSubrsIndex[i].length));    }  }}  }
class C{  public int hashCode(){  int hashCode=0;  for (int i=0; i < mag.length; i++)   hashCode=(int)(31 * hashCode + (mag[i] & LONG_MASK));  return hashCode * signum;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public boolean isGlobal(){  return telephoneNumber.isGlobal();}  }
class C{  public Object clone() throws CloneNotSupportedException {  if (this instanceof Cloneable) {    return super.clone();  } else {    throw new CloneNotSupportedException();  }}  }
class C{  public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new FileExistsException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      FileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  public void push(float val){  this.push(new BaseTypeWrapper(val));}  }
class C{  private MimeHeaderField createHeader(){  if (limit > -1 && count >= limit) {    throw new IllegalStateException(sm.getString("headers.maxCountFail",Integer.valueOf(limit)));  }  MimeHeaderField mh;  int len=headers.length;  if (count >= len) {    int newLength=count * 2;    if (limit > 0 && newLength > limit) {      newLength=limit;    }    MimeHeaderField tmp[]=new MimeHeaderField[newLength];    System.arraycopy(headers,0,tmp,0,len);    headers=tmp;  }  if ((mh=headers[count]) == null) {    headers[count]=mh=new MimeHeaderField();  }  count++;  return mh;}  }
class C{  public ModifyCommonMsg(CSN csn,String entryUUID,DN dn){  super(csn,entryUUID,dn);}  }
class C{  List<String> performCommand(String[] cmdAttribs,int max,long timeout) throws IOException {  List<String> lines=new ArrayList<String>(20);  Process proc=null;  InputStream in=null;  OutputStream out=null;  InputStream err=null;  BufferedReader inr=null;  try {    Thread monitor=ThreadMonitor.start(timeout);    proc=openProcess(cmdAttribs);    in=proc.getInputStream();    out=proc.getOutputStream();    err=proc.getErrorStream();    inr=new BufferedReader(new InputStreamReader(in));    String line=inr.readLine();    while (line != null && lines.size() < max) {      line=line.toLowerCase(Locale.ENGLISH).trim();      lines.add(line);      line=inr.readLine();    }    proc.waitFor();    ThreadMonitor.stop(monitor);    if (proc.exitValue() != 0) {      throw new IOException("Command line returned OS error code '" + proc.exitValue() + "' for command "+ Arrays.asList(cmdAttribs));    }    if (lines.isEmpty()) {      throw new IOException("Command line did not return any info " + "for command " + Arrays.asList(cmdAttribs));    }    return lines;  } catch (  InterruptedException ex) {    throw new IOExceptionWithCause("Command line threw an InterruptedException " + "for command " + Arrays.asList(cmdAttribs) + " timeout="+ timeout,ex);  } finally {    IOUtils.closeQuietly(in);    IOUtils.closeQuietly(out);    IOUtils.closeQuietly(err);    IOUtils.closeQuietly(inr);    if (proc != null) {      proc.destroy();    }  }}  }
class C{  public final void testEqualsObject(){  CodeSigner one=new CodeSigner(cpath,ts);  CodeSigner two=new CodeSigner(cpath,ts);  CodeSigner three=new CodeSigner(cpath,null);  CertPath cpath2=TestCertUtils.genCertPath(5,3);  CodeSigner four=new CodeSigner(cpath2,null);  assertTrue(one.equals(one));  assertTrue(one.equals(two));  assertTrue(two.equals(one));  assertFalse(one.equals(three));  assertFalse(three.equals(one));  assertTrue(three.equals(three));  assertFalse(three.equals(four));  assertFalse(one.equals(null));  assertFalse(one.equals(new Object()));}  }
class C{  @Override public Foo fetchByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator){  int count=countByUuid(uuid);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid(uuid,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  private void deleteSubtree(DN dn) throws LdapException {  for (  DN child : listEntries(dn,Filter.objectClassPresent())) {    deleteSubtree(child);  }  connection.delete(dn.toString());}  }
class C{  public boolean is_equal_last(PlaPointInt a_point){  if (a_point == null)   return false;  PlaPointInt last=get_last();  if (last == null)   return false;  return last.equals(a_point);}  }
class C{  private void transfer(Entry<K,V>[] src,Entry<K,V>[] dest){  for (int j=0; j < src.length; ++j) {    Entry<K,V> e=src[j];    src[j]=null;    while (e != null) {      Entry<K,V> next=e.next;      Object key=e.get();      if (key == null) {        e.next=null;        e.value=null;        size--;      } else {        int i=indexFor(e.hash,dest.length);        e.next=dest[i];        dest[i]=e;      }      e=next;    }  }}  }
class C{  @Override public void write(int idx) throws IOException {  try {    beforeWrite(1);    out.write(idx);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public void testDelete3() throws SQLException {  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = 1;");  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE id = 1;");}  }
class C{  @SuppressWarnings("unchecked") public void writeFloat(float x) throws SQLException {  attribs.add(Float.valueOf(x));}  }
class C{  public static void rebuildSessionFactory(){  try {    configuration.configure();    serviceRegistry=new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();    sessionFactory=configuration.buildSessionFactory(serviceRegistry);  } catch (  Exception e) {    System.err.println("%%%% Error Creating SessionFactory %%%%");    e.printStackTrace();  }}  }
class C{  public AMIdentityWrapper(AMIdentity amIdentity){  this.amIdentity=amIdentity;}  }
class C{  @Override public void accept(final MethodVisitor mv){switch (type) {case Opcodes.F_NEW:case Opcodes.F_FULL:    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));  break;case Opcodes.F_APPEND:mv.visitFrame(type,local.size(),asArray(local),0,null);break;case Opcodes.F_CHOP:mv.visitFrame(type,local.size(),null,0,null);break;case Opcodes.F_SAME:mv.visitFrame(type,0,null,0,null);break;case Opcodes.F_SAME1:mv.visitFrame(type,0,null,1,asArray(stack));break;}}  }
class C{  public void endDocument() throws SAXException {  if (documentHandler != null)   documentHandler.endDocument();}  }
class C{  public boolean isRealm(String candidate){  return SMSEntry.checkIfEntryExists(DNMapper.orgNameToDN(candidate),getSSOToken());}  }
class C{  private String wrap(final LocalizableMessage msg){  return wrapText(msg,MAX_LINE_WIDTH);}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  cipher.init(forEncryption,params);}  }
class C{  public static Clause and(Iterable<Clause> clauses){  return new AndClause(clauses);}  }
class C{  public static Color deriveColorHSB(Color base,float dH,float dS,float dB){  float hsb[]=Color.RGBtoHSB(base.getRed(),base.getGreen(),base.getBlue(),null);  hsb[0]+=dH;  hsb[1]+=dS;  hsb[2]+=dB;  return Color.getHSBColor(hsb[0] < 0 ? 0 : (hsb[0] > 1 ? 1 : hsb[0]),hsb[1] < 0 ? 0 : (hsb[1] > 1 ? 1 : hsb[1]),hsb[2] < 0 ? 0 : (hsb[2] > 1 ? 1 : hsb[2]));}  }
class C{  public static String cleanRealm(String realm){  if (realm == null) {    return "/";  }  if (!realm.startsWith("/")) {    realm="/" + realm;  }  if (realm.length() > 1 && realm.endsWith("/")) {    realm=realm.substring(0,realm.length() - 1);  }  return realm;}  }
class C{  public void closeAllOpenPositions(){  if (recyclerView == null) {    return;  }  for (int i=openedPositions.size() - 1; i >= 0; i--) {    closeOpenPosition(openedPositions.keyAt(i));  }  openedPositions.clear();}  }
class C{  static void importMap(InputStream is,Map<String,String> m) throws IOException, InvalidPreferencesFormatException {  try {    Document doc=loadPrefsDoc(is);    Element xmlMap=doc.getDocumentElement();    String mapVersion=xmlMap.getAttribute("MAP_XML_VERSION");    if (mapVersion.compareTo(MAP_XML_VERSION) > 0)     throw new InvalidPreferencesFormatException("Preferences map file format version " + mapVersion + " is not supported. This java installation can read"+ " versions "+ MAP_XML_VERSION+ " or older. You may need"+ " to install a newer version of JDK.");    NodeList entries=xmlMap.getChildNodes();    for (int i=0, numEntries=entries.getLength(); i < numEntries; i++) {      Element entry=(Element)entries.item(i);      m.put(entry.getAttribute("key"),entry.getAttribute("value"));    }  } catch (  SAXException e) {    throw new InvalidPreferencesFormatException(e);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.RespondWithElement createRespondWithElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RespondWithElementImpl();}  }
class C{  public static void test_diff_getResourceAsStream() throws IOException {  ClassLoader cl=TestMethods.class.getClassLoader();  InputStream in=cl.getResourceAsStream("test2/Resource2.txt");  byte[] contents=readFully(in);  String s=new String(contents,"UTF-8");  assertSame("Who doesn't like a good biscuit?\n",s.intern());}  }
class C{  public static ValueExp value(long val){  return new NumericValueExp(val);}  }
class C{  public ContextEnvironmentMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public void scrollRectToVisible(Rectangle r){  Insets i=getInsets();  int x0=r.x + visibility.getValue() - i.left;  int x1=x0 + r.width;  if (x0 < visibility.getValue()) {    visibility.setValue(x0);  } else   if (x1 > visibility.getValue() + visibility.getExtent()) {    visibility.setValue(x1 - visibility.getExtent());  }}  }
class C{  public Object execute(CommandSession session,List<Object> arguments) throws Exception {  try {    if (tgt instanceof Function) {      return ((Function)tgt).execute(session,arguments);    } else {      return Reflective.invoke(session,tgt,function,arguments);    }  } catch (  IllegalArgumentException e) {    List<Object> method=new ArrayList<Object>();    method.add(function);    session.getConsole().println(Reflective.invoke(session,tgt,"getUsage",method));    return null;  }}  }
class C{  public boolean isValidYear(int year){  return (day == 29 && month == 2 && Year.isLeap(year) == false) == false;}  }
class C{  public static final boolean isDebugEnabled(){  return isDebugEnabled;}  }
class C{  @DataProvider(name="sequenceValues") public Object[][] createSequenceValues(){  return new Object[][]{{"{123,122}",true},{"{ 123,1}",true},{"{ 123   ,   1   }",true},{"{0123,}",false},{"{0123 42 }",false},{"{123  , 11 ",false},{" {123  , 11 ",false},{" 123  , 11}",false}};}  }
class C{  public ArrayList(){  this.elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA;}  }
class C{  private void dropAllTables(SQLiteDatabase db){  db.execSQL("DROP TABLE IF EXISTS " + HistoryContract.HistoryEntry.TABLE_NAME);}  }
class C{  @Override public void init(Subject subject,Map sharedState,Map options){  debug.message("SampleAuth::init");  this.options=options;  this.sharedState=sharedState;  this.bundle=amCache.getResBundle(amAuthSampleAuth,getLoginLocale());}  }
class C{  public void putField(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTFIELD,owner,name,type);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String name;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  name=docType.getName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("doctypeName","svg",name);  } else {    assertEquals("documenttypeGetDocTypeAssert","staff",name);  }}  }
class C{  public SQLSyntaxErrorException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  void removeAttributeValues(String attrName,Set values) throws SMSException {  if (attrName != null) {    Map attrs=getAttributes();    Set origValues=(Set)attrs.get(attrName);    if (origValues != null && !origValues.isEmpty()) {      Set newValues=new HashSet(origValues);      newValues.removeAll(values);      if (newValues.isEmpty()) {        removeAttribute(attrName);      } else {        Map newAttrs=new HashMap();        newAttrs.put(attrName,newValues);        setAttributes(newAttrs);      }    }  }}  }
class C{  public BandwidthFieldParser(String bandwidthField){  this.lexer=new Lexer("charLexer",bandwidthField);}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnameaccessnodelist.class,args);}  }
class C{  @Override public void initializeForParent(TemplateEntry parentEntry){  if (resetOnNewParents) {    nextValue=initialValue;  }}  }
class C{  public void hset(String key,String field,String value){  call(null);}  }
class C{  private void handleRequestControls() throws DirectoryException {  LocalBackendWorkflowElement.evaluateProxyAuthControls(this);  LocalBackendWorkflowElement.removeAllDisallowedControls(entryDN,this);  for (ListIterator<Control> iter=getRequestControls().listIterator(); iter.hasNext(); ) {    final Control c=iter.next();    final String oid=c.getOID();    if (OID_LDAP_ASSERTION.equals(oid)) {      LDAPAssertionRequestControl assertControl=getRequestControl(LDAPAssertionRequestControl.DECODER);      SearchFilter filter;      try {        filter=assertControl.getSearchFilter();      } catch (      DirectoryException de) {        logger.traceException(de);        throw newDirectoryException(currentEntry,de.getResultCode(),ERR_MODDN_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }      if (!getAccessControlHandler().isAllowed(this,currentEntry,filter)) {        throw new DirectoryException(ResultCode.INSUFFICIENT_ACCESS_RIGHTS,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(oid));      }      try {        if (!filter.matchesEntry(currentEntry)) {          throw newDirectoryException(currentEntry,ResultCode.ASSERTION_FAILED,ERR_MODDN_ASSERTION_FAILED.get(entryDN));        }      } catch (      DirectoryException de) {        if (de.getResultCode() == ResultCode.ASSERTION_FAILED) {          throw de;        }        logger.traceException(de);        throw newDirectoryException(currentEntry,de.getResultCode(),ERR_MODDN_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }    } else     if (OID_LDAP_NOOP_OPENLDAP_ASSIGNED.equals(oid)) {      noOp=true;    } else     if (OID_LDAP_READENTRY_PREREAD.equals(oid)) {      preReadRequest=getRequestControl(LDAPPreReadRequestControl.DECODER);      iter.set(preReadRequest);    } else     if (OID_LDAP_READENTRY_POSTREAD.equals(oid)) {      if (c instanceof LDAPPostReadRequestControl) {        postReadRequest=(LDAPPostReadRequestControl)c;      } else {        postReadRequest=getRequestControl(LDAPPostReadRequestControl.DECODER);        iter.set(postReadRequest);      }    } else     if (LocalBackendWorkflowElement.isProxyAuthzControl(oid)) {      continue;    } else     if (c.isCritical() && !backend.supportsControl(oid)) {      throw new DirectoryException(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_MODDN_UNSUPPORTED_CRITICAL_CONTROL.get(entryDN,oid));    }  }}  }
class C{  private byte[] ipWithSubnetMask(byte[] ip,byte[] subnetMask){  int ipLength=ip.length;  byte[] temp=new byte[ipLength * 2];  System.arraycopy(ip,0,temp,0,ipLength);  System.arraycopy(subnetMask,0,temp,ipLength,ipLength);  return temp;}  }
class C{  private String badArrive(long s){  return "Attempted arrival of unregistered party for " + stateToString(s);}  }
class C{  private void createInputAttributeUpdated(){  inputAttributeUpdater=new AttributeTracker();}  }
class C{  public void test_getPrimeExponentP(){  assertEquals("invalid prime exponent P",Util.rsaCrtParam.getPrimeExponentP(),key.getPrimeExponentP());}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle r=(Rectangle)a;  g.clipRect(r.x,r.y,r.width,r.height);  super.paint(g,adjustAllocation(a));}  }
class C{  public Signer(String name){  super(name);}  }
class C{  private void createPurgeHistoricalSubCommand() throws ArgumentException {  maximumDurationArg=IntegerArgument.builder("maximumDuration").description(INFO_DESCRIPTION_PURGE_HISTORICAL_MAXIMUM_DURATION.get()).required().lowerBound(0).defaultValue(PurgeConflictsHistoricalTask.DEFAULT_MAX_DURATION).valuePlaceholder(INFO_MAXIMUM_DURATION_PLACEHOLDER.get()).buildArgument();  purgeHistoricalSubCmd=new SubCommand(this,PURGE_HISTORICAL_SUBCMD_NAME,INFO_DESCRIPTION_SUBCMD_PURGE_HISTORICAL.get());  addArgumentsToSubCommand(purgeHistoricalSubCmd,secureArgsList.getHostNameArg(),secureArgsList.getPortArg(),maximumDurationArg);  addArgumentsToSubCommand(purgeHistoricalSubCmd,taskArgs.getArguments());}  }
class C{  public static Foo fetchByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public List<Statement> parse() throws SyntaxException {  List<Statement> list=new ArrayList<>();  while (true) {    if (isParsingMap) {      annosIsEmpty();      modifiersIsEmpty();      if (current == null)       break;      LineCol lineCol=current.getLineCol();      parse_expression();      boolean continueParsing=true;      if (parsedExps.empty()) {        err.SyntaxException("key is not set",current == null ? lineCol : current.getLineCol());        jumpToTheNearestEndingNode();        nextNode(true);        continueParsing=false;      } else {        Expression key=parsedExps.pop();        list.add(key);      }      if (!continueParsing)       continue;      if (null == current || current.next() instanceof EndingNode || (current.next() instanceof Element && ((Element)current.next()).getContent().equals(","))) {        err.SyntaxException("value is not set",current == null ? lineCol : current.getLineCol());        list.remove(list.size() - 1);        nextNode(true);        if (current instanceof EndingNode)         nextNode(true);        continue;      }      expecting(":",current.previous(),current,err);      nextNode(false);      parse_expression();      if (parsedExps.empty()) {        err.SyntaxException("value is not set",current == null ? lineCol : current.getLineCol());        jumpToTheNearestEndingNode();        list.remove(list.size() - 1);      } else {        Expression value=parsedExps.pop();        list.add(value);      }      nextNode(true);      assert last1VarUnaryOps.empty();      last2VarOps.clear();    } else {      Statement stmt;      try {        stmt=parse_statement();      } catch (      ParseFail ignore) {        jumpToTheNearestEndingNode();        continue;      }catch (      SyntaxException e) {        err.SyntaxException(e.msg,e.lineCol);        jumpToTheNearestEndingNode();        continue;      }      if (current == null && stmt == null)       break;      if (!parsedExps.empty()) {        LineCol theFirstLineCol=null;        StringBuilder sb=new StringBuilder();        for (        Expression e : parsedExps) {          sb.append(e.toString()).append(" at ").append(e.line_col().fileName).append("(").append(e.line_col().line).append(",").append(e.line_col().column).append(")\n");          if (theFirstLineCol == null)           theFirstLineCol=e.line_col();        }        err.SyntaxException("got tokens which are no where to place\n" + sb + "the parsed statement is \n"+ stmt+ "\n",theFirstLineCol);        parsedExps.clear();      }      assert last1VarUnaryOps.empty();      last2VarOps.clear();      if (stmt != null)       list.add(stmt);      nextNode(true);    }  }  return list;}  }
class C{  public void update(JsonValue token) throws CoreTokenException {  cts.update(tokenAdapter.toToken(token));}  }
class C{  protected boolean checkFuncNum(){  return this.ckFinderFuncNum != null;}  }
class C{  @Override public Principal authenticate(X509Certificate[] certs){  String username=null;  if (certs != null && certs.length > 0) {    username=certs[0].getSubjectDN().getName();  }  Principal authenticatedUser=super.authenticate(certs);  return filterLockedAccounts(username,authenticatedUser);}  }
class C{  public void deleteGroupContainers(Set groupContainerDNs) throws AMException, SSOException {  Iterator iter=groupContainerDNs.iterator();  while (iter.hasNext()) {    String groupContainerDN=(String)iter.next();    AMGroupContainer groupContainer=new AMGroupContainerImpl(token,groupContainerDN);    groupContainer.delete();  }}  }
class C{  public void doClick(){  doClick(68);}  }
class C{  final double internalNextDouble(double origin,double bound){  double r=(nextLong() >>> 11) * DOUBLE_UNIT;  if (origin < bound) {    r=r * (bound - origin) + origin;    if (r >= bound)     r=Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);  }  return r;}  }
class C{  public void menuSelectionChanged(boolean isIncluded){  setArmed(isIncluded);}  }
class C{  public ParsePosition(int index){  this.index=index;}  }
class C{  public Set searchSubOrganizationalUnits(String wildcard,int level) throws AMException, SSOException {  return searchSubOrganizationalUnits(wildcard,null,level);}  }
class C{  public void detach(){  m_iterator=null;  super.detach();}  }
class C{  public SoundException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private boolean addIndexEntry(ServiceType resourceType,String resourceName,String policyName) throws PolicyException {  ResourceIndex resourceIndex=(ResourceIndex)resourceIndices.get(resourceType.getName());  if (resourceIndex == null) {    resourceIndex=refreshResourceIndexFromDataStore(resourceType);  }  return resourceIndex.addIndexEntry(resourceName,policyName);}  }
class C{  public byte[] writeByteArray(){  byte[] data;  String charSetName=getTextEncodingCharSet();  try {    stripTrailingNull();    String stringValue=(String)value;    String actualCharSet=null;    if (charSetName.equals(TextEncoding.CHARSET_UTF_16)) {      if (TagOptionSingleton.getInstance().isEncodeUTF16BomAsLittleEndian()) {        actualCharSet=TextEncoding.CHARSET_UTF_16_LE_ENCODING_FORMAT;      } else {        actualCharSet=TextEncoding.CHARSET_UTF_16_BE_ENCODING_FORMAT;      }    }    ByteBuffer outputBuffer=ByteBuffer.allocate((stringValue.length() + 3) * 3);    List<String> values=splitByNullSeperator(stringValue);    checkTrailingNull(values,stringValue);    for (int i=0; i < values.size(); i++) {      String next=values.get(i);      if (actualCharSet != null) {        if (actualCharSet.equals(TextEncoding.CHARSET_UTF_16_LE_ENCODING_FORMAT)) {          outputBuffer.put(writeStringUTF16LEBOM(next,i,values.size()));        } else         if (actualCharSet.equals(TextEncoding.CHARSET_UTF_16_BE_ENCODING_FORMAT)) {          outputBuffer.put(writeStringUTF16BEBOM(next,i,values.size()));        }      } else {        CharsetEncoder charsetEncoder=Charset.forName(charSetName).newEncoder();        charsetEncoder.onMalformedInput(CodingErrorAction.IGNORE);        charsetEncoder.onUnmappableCharacter(CodingErrorAction.IGNORE);        outputBuffer.put(writeString(charsetEncoder,next,i,values.size()));      }    }    outputBuffer.flip();    data=new byte[outputBuffer.limit()];    outputBuffer.rewind();    outputBuffer.get(data,0,outputBuffer.limit());    setSize(data.length);  } catch (  CharacterCodingException ce) {    logger.severe(ce.getMessage() + ":" + charSetName+ ":"+ value);    throw new RuntimeException(ce);  }  return data;}  }
class C{  protected AbstractPoolEntry(ClientConnectionOperator connOperator,HttpRoute route){  super();  if (connOperator == null) {    throw new IllegalArgumentException("Connection operator may not be null");  }  this.connOperator=connOperator;  this.connection=connOperator.createConnection();  this.route=route;  this.tracker=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix01.class,args);}  }
class C{  protected void unbindThread(ClassLoader oldContextClassLoader){  if (isUseNaming()) {    ContextBindings.unbindThread(this,getNamingToken());  }  unbind(false,oldContextClassLoader);}  }
class C{  private static void connect(){  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  Connection connection=null;  try {    connection=factory.getConnection();    connection.bind(bindDN,bindPassword.toCharArray());    System.out.println("Authenticated as " + bindDN + ".");  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  public DNLock tryWriteLockSubtree(final DN subtree){  return acquireLockFromCache(subtree).tryWriteLockSubtree();}  }
class C{  public boolean isSelected(ButtonModel m){  return (m == selection);}  }
class C{  public void deleteAllRules(){  deleteRules(getRules());}  }
class C{  @Override protected Member[] publishEntryInfo(Object key,Object value) throws ChannelException {  if (!(key instanceof Serializable && value instanceof Serializable))   return new Member[0];  Member[] backup=getMapMembers();  if (backup == null || backup.length == 0)   return null;  try {    MapMessage msg=new MapMessage(getMapContextName(),MapMessage.MSG_COPY,false,(Serializable)key,(Serializable)value,null,channel.getLocalMember(false),backup);    getChannel().send(backup,msg,getChannelSendOptions());  } catch (  ChannelException e) {    FaultyMember[] faultyMembers=e.getFaultyMembers();    if (faultyMembers.length == 0)     throw e;    ArrayList<Member> faulty=new ArrayList<>();    for (    FaultyMember faultyMember : faultyMembers) {      if (!(faultyMember.getCause() instanceof RemoteProcessException)) {        faulty.add(faultyMember.getMember());      }    }    Member[] realFaultyMembers=faulty.toArray(new Member[faulty.size()]);    if (realFaultyMembers.length != 0) {      backup=excludeFromSet(realFaultyMembers,backup);      if (backup.length == 0) {        throw e;      } else {        if (log.isWarnEnabled()) {          log.warn(sm.getString("replicatedMap.unableReplicate.completely",key,Arrays.toString(backup),Arrays.toString(realFaultyMembers)),e);        }      }    }  }  return backup;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  entryDNType=CoreSchema.getEntryDNAttributeType();}  }
class C{  public com.sun.identity.saml2.jaxb.metadataextquery.ActionNamespaceElement createActionNamespaceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.ActionNamespaceElementImpl();}  }
class C{  public void makeTrainTest() throws Exception {  int labels[]=new int[dataNum];  int labelClassNum[]=new int[20];  BufferedReader trUsers=new BufferedReader(new InputStreamReader(new FileInputStream(labelFile)));  String line="";  while ((line=trUsers.readLine()) != null) {    String[] strs=line.split("\t");    labels[Integer.valueOf(strs[0])]=Integer.valueOf(strs[1]);    labelClassNum[labels[Integer.valueOf(strs[0])]]++;  }  trUsers.close();  int countClassNum=0;  for (int i=0; i < labelClassNum.length; i++) {    if (labelClassNum[i] != 0)     countClassNum++;  }  int labelClass[]=new int[countClassNum];  Random r_classifier=new Random(123l);  for (int i=0; i < dataNum; i++) {    double nextRandom=r_classifier.nextDouble();    if (nextRandom <= limitRandom) {      TestTrain[i]=1;      labelClass[labels[i]]++;    }  }  for (int i=0; i < labelClass.length; i++) {    if (labelClass[i] == 0) {      Random r_classifier2=new Random(123l);      for (int j=0; j < dataNum; j++) {        if (labels[j] == i) {          double nextRandom2=r_classifier2.nextDouble();          if (nextRandom2 <= limitRandom) {            TestTrain[j]=1;          }        }      }    }  }}  }
class C{  public boolean ackReplied(){  boolean result=ackReplied;  ackReplied=false;  return result;}  }
class C{  public void parse(List<CMapObject> ls) throws java.io.IOException {  ls.clear();  CMapObject ob;  while ((ob=readObject()) != null) {    ls.add(ob);    if (ob.isLiteral())     break;  }}  }
class C{  private void loadInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD),index);}  }
class C{  public org.omg.PortableServer.Servant preinvoke(byte[] oid,org.omg.PortableServer.POA adapter,String operation,org.omg.PortableServer.ServantLocatorPackage.CookieHolder the_cookie) throws org.omg.PortableServer.ForwardRequest {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("preinvoke",_opsClass);  ServantLocatorOperations $self=(ServantLocatorOperations)$so.servant;  try {    return $self.preinvoke(oid,adapter,operation,the_cookie);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public WrongTransaction(){  super(WrongTransactionHelper.id());}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public boolean disableSynchronization(){  return isPropertyTrue(PROPERTY_DISABLE_SYNCHRONIZATION);}  }
class C{  public void moveToFront(Component c){  setPosition(c,0);}  }
class C{  public void updateAttributeSyntax(Syntax syntax,Schema schema){  attributeSyntaxPanel.update(syntax,schema);  schemaElementPanel=attributeSyntaxPanel;  ((CardLayout)mainPanel.getLayout()).show(mainPanel,attributeSyntaxPanel.getTitle().toString());}  }
class C{  private void saveSubjects() throws PolicyException, SSOException {  if (realmSubjects != null) {    pm.saveRealmSubjects(realmSubjects);  }}  }
class C{  public String documentationReferenceGuideUrl(){  return properties.getProperty("doc.guide.ref.url");}  }
class C{  public void toggle(boolean skipAnimation){  if (this.mUnfolded) {    this.fold(skipAnimation);  } else {    this.unfold(skipAnimation);  }}  }
class C{  public Map<String,List<String>> toMultimap(boolean response){  Map<String,List<String>> result=new TreeMap<String,List<String>>(FIELD_NAME_COMPARATOR);  for (int i=0; i < namesAndValues.size(); i+=2) {    String fieldName=namesAndValues.get(i);    String value=namesAndValues.get(i + 1);    List<String> allValues=new ArrayList<String>();    List<String> otherValues=result.get(fieldName);    if (otherValues != null) {      allValues.addAll(otherValues);    }    allValues.add(value);    result.put(fieldName,Collections.unmodifiableList(allValues));  }  if (response && statusLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(statusLine)));  } else   if (requestLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(requestLine)));  }  return Collections.unmodifiableMap(result);}  }
class C{  @Override public boolean equals(Object p_ob){  if (p_ob == null)   return false;  if (this == p_ob)   return true;  if (!(p_ob instanceof PlaVectorInt))   return false;  PlaVectorInt other=(PlaVectorInt)p_ob;  return v_x == other.v_x && v_y == other.v_y;}  }
class C{  public void test_getIterator$Ljava_text_AttributedCharacterIterator$AttributeII(){  String test="Test string";  try {    Map<AttributedCharacterIterator.Attribute,String> hm=new HashMap<AttributedCharacterIterator.Attribute,String>();    AttributedCharacterIterator.Attribute[] aci=new AttributedCharacterIterator.Attribute[3];    aci[0]=new TestAttributedCharacterIteratorAttribute("att1");    aci[1]=new TestAttributedCharacterIteratorAttribute("att2");    aci[2]=new TestAttributedCharacterIteratorAttribute("att3");    hm.put(aci[0],"value1");    hm.put(aci[1],"value2");    AttributedString attrString=new AttributedString(test);    attrString.addAttributes(hm,2,4);    AttributedCharacterIterator it=attrString.getIterator(aci,1,5);    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[0]) == null);    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[1]) == null);    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[2]) == null);    it.next();    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[0]).equals("value1"));    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[1]).equals("value2"));    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[2]) == null);    try {      attrString.getIterator(aci,-1,5);      fail("IllegalArgumentException is not thrown.");    } catch (    IllegalArgumentException iae) {    }    try {      attrString.getIterator(aci,6,5);      fail("IllegalArgumentException is not thrown.");    } catch (    IllegalArgumentException iae) {    }    try {      attrString.getIterator(aci,3,2);      fail("IllegalArgumentException is not thrown.");    } catch (    IllegalArgumentException iae) {    }  } catch (  Exception e) {    fail("Unexpected exceptiption " + e.toString());  }}  }
class C{  public int compareTo(Object o1){  QCharset q1=(QCharset)o1;  if (qFactor < q1.qFactor) {    return 1;  }  if (qFactor > q1.qFactor) {    return -1;  }  return name.compareTo(q1.name);}  }
class C{  public boolean hasNameValue(String name){  return nameValueMap.containsKey(name.toLowerCase());}  }
class C{  public void noop() throws IOException {  spdyWriter.noop();}  }
class C{  private void checkConflicts(TemplateSubPatternAssociation head,XPathContext xctxt,int targetNode,QName mode){}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public void printStackTrace(PrintStream ps){  ps.println(fetchStackTrace());}  }
class C{  public BrokerWriter(int count){  this.count=count;}  }
class C{  public final void testRead05(){  InputStream is=new ByteArrayInputStream(myMessage);  DigestInputStream dis=new DigestInputStream(is,null);  try {    for (int i=0; i < MY_MESSAGE_LEN; i++) {      dis.read();    }    fail("read() must not work when digest functionality is on");  } catch (  Exception e) {  }}  }
class C{  private Entry createTestEntry(AttributeType type,String value){  String[] values=new String[]{value};  return createTestEntry(type,values);}  }
class C{  public IPv6Condition(){  this(PrivilegeManager.debug);}  }
class C{  public PlaLineInt plaline_first_next(){  return plaline(1);}  }
class C{  @Override public void addCookie(final Cookie cookie){  if (included || isCommitted()) {    return;  }  cookies.add(cookie);  String header=generateCookieString(cookie);  addHeader("Set-Cookie",header,getContext().getCookieProcessor().getCharset());}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,splitPane);}  }
class C{  private void init(String providerID,NameIdentifier localNameIdentifier,NameIdentifier remoteNameIdentifier,boolean isRoleIDP) throws FSAccountMgmtException {  if ((providerID == null) || (providerID.length() <= 0)) {    FSUtils.debug.error("FSAccountFedInfo.init(): Invalid Argument: providerID is " + providerID);    throw new FSAccountMgmtException(IFSConstants.NULL_PROVIDER_ID,null);  }  if (localNameIdentifier == null && remoteNameIdentifier == null) {    FSUtils.debug.error("FSAccountFedInfo.Constructor(): Invalid " + "Argument: both NameIdentifiers are null");    throw new FSAccountMgmtException(IFSConstants.NULL_NAME_IDENTIFIER,null);  }  this.providerID=providerID;  this.localNameIdentifier=localNameIdentifier;  this.remoteNameIdentifier=remoteNameIdentifier;  this.isRoleIDP=isRoleIDP;  this.isActive=true;  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAccountFedInfo.init() : " + "providerID :: " + this.providerID + ", isRoleIDP :: "+ this.isRoleIDP);    if (localNameIdentifier != null) {      FSUtils.debug.message("FSAccountFedInfo.init() : localNameIdentifier" + this.localNameIdentifier.toString());    }    if (remoteNameIdentifier != null) {      FSUtils.debug.message("FSAccountFedInfo.init() : remoteNameIdentifier" + this.remoteNameIdentifier.toString());    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("X509CollectionStoreParameters: [\n");  sb.append("  collection: " + collection + "\n");  sb.append("]");  return sb.toString();}  }
class C{  public String toString(){  return "java.util.ServiceLoader[" + service.getName() + "]";}  }
class C{  public static boolean isAuthorized(Object credential){  return authorizer.isAuthorized(credential);}  }
class C{  public int viewToModel(GlyphView v,float x,float y,Shape a,Position.Bias[] biasReturn){  sync(v);  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  int p0=v.getStartOffset();  int p1=v.getEndOffset();  TabExpander expander=v.getTabExpander();  Segment text=v.getText(p0,p1);  int[] justificationData=getJustificationData(v);  int offs=Utilities.getTabbedTextOffset(v,text,metrics,alloc.x,(int)x,expander,p0,justificationData);  SegmentCache.releaseSharedSegment(text);  int retValue=p0 + offs;  if (retValue == p1) {    retValue--;  }  biasReturn[0]=Position.Bias.Forward;  return retValue;}  }
class C{  public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){  if (key.equals(getString(R.string.pref_key_notification))) {    setNotification(sharedPreferences.getBoolean(key,true));  } else   if (key.equals(getString(R.string.pref_key_gmail_signature))) {    setGmailSignaturePrefDescription(sharedPreferences.getBoolean(key,false));  } else   if (key.equals(getString(R.string.pref_key_sms_signature))) {    setSmsSignaturePrefDescription(sharedPreferences.getBoolean(key,false));  }}  }
class C{  public Builder removeAuxiliaryObjectClass(String objectClassNameOrOID){  this.auxiliaryClassOIDs.remove(objectClassNameOrOID);  return this;}  }
class C{  final ElemContext push(){  ElemContext frame=this.m_next;  if (frame == null) {    frame=new ElemContext(this);    this.m_next=frame;  }  frame.m_startTagOpen=true;  return frame;}  }
class C{  private void waitTaskCompleted(Entry taskEntry,TaskState expectedState,long expectedLeft,long expectedDone) throws Exception {  log("waitTaskCompleted " + taskEntry.toLDIFString());{    Entry resultEntry=getCompletionTime(taskEntry);    String stateString=resultEntry.parseAttribute(ATTR_TASK_STATE).asString();    TaskState taskState=TaskState.fromString(stateString);    assertEquals(taskState,expectedState,"The task completed in an unexpected state");    Set<String> logMessages=resultEntry.parseAttribute(ATTR_TASK_LOG_MESSAGES).asSetOfString();    if (taskState != TaskState.COMPLETED_SUCCESSFULLY && logMessages.isEmpty()) {      fail("No log messages were written to the task entry on a failed task");    }    assertAttributeValue(resultEntry,ATTR_TASK_INITIALIZE_LEFT,expectedLeft,"The number of entries to process is not correct.");    assertAttributeValue(resultEntry,ATTR_TASK_INITIALIZE_DONE,expectedDone,"The number of entries processed is not correct.");  }}  }
class C{  public DiscoveryException(String s){  super(s);  fillInStackTrace();}  }
class C{  public String toString(){  return getClass().getName() + "[field=" + field+ ",attribute="+ attribute+ ",beginIndex="+ beginIndex+ ",endIndex="+ endIndex+ ']';}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  fsb().sendSAXComment(lh,m_start,m_length);}  }
class C{  public boolean retainAll(Collection<?> c){  Objects.requireNonNull(c);  return batchRemove(c,true);}  }
class C{  private void displayToolTip(MouseEvent event){  JComponent component=(JComponent)event.getSource();  String toolTipText;  if (component instanceof JTable) {    JTable table=(JTable)component;    int row=table.rowAtPoint(event.getPoint());    int column=table.columnAtPoint(event.getPoint());    if (row != -1 && column != -1) {      TableCellRenderer renderer=table.getCellRenderer(row,column);      Component comp=renderer.getTableCellRendererComponent(table,table.getValueAt(row,column),true,true,row,column);      if (comp instanceof JComponent) {        Rectangle rect=table.getCellRect(row,column,true);        int x=event.getPoint().x - rect.x;        int y=event.getPoint().y - rect.y;        MouseEvent tEv=new MouseEvent(table,event.getID(),event.getWhen(),event.getModifiers(),x,y,event.getClickCount(),event.isPopupTrigger(),event.getButton());        toolTipText=((JComponent)comp).getToolTipText(tEv);      } else {        toolTipText=null;      }    } else {      toolTipText=null;    }  } else {    toolTipText=component.getToolTipText();  }  if (toolTipText != null) {    Point preferredLocation=component.getToolTipLocation(event);    Rectangle sBounds=component.getGraphicsConfiguration().getBounds();    JToolTip tip=component.createToolTip();    tip.setTipText(toolTipText);    Dimension size=tip.getPreferredSize();    Point location=new Point();    Point screenLocation=component.getLocationOnScreen();    if (preferredLocation != null) {      location.x=screenLocation.x + preferredLocation.x;      location.y=screenLocation.y + preferredLocation.y;    } else {      location.x=screenLocation.x + event.getX();      location.y=screenLocation.y + event.getY() + 20;    }    if (location.x < sBounds.x) {      location.x=sBounds.x;    } else     if (location.x - sBounds.x + size.width > sBounds.width) {      location.x=sBounds.x + Math.max(0,sBounds.width - size.width);    }    if (location.y < sBounds.y) {      location.y=sBounds.y;    } else     if (location.y - sBounds.y + size.height > sBounds.height) {      location.y=sBounds.y + Math.max(0,sBounds.height - size.height);    }    PopupFactory popupFactory=PopupFactory.getSharedInstance();    tipWindow=popupFactory.getPopup(component,tip,location.x,location.y);    tipWindow.show();    isTooltipVisible=true;  }}  }
class C{  public void clearPasswordChangedTime(){  logger.trace("Clearing password changed time for user %s",userDNString);  clearAttribute(OP_ATTR_PWPOLICY_CHANGED_TIME_LC);  try {    passwordChangedTime=getGeneralizedTime0(userEntry,OP_ATTR_CREATE_TIMESTAMP_LC);    if (passwordChangedTime < 0) {      passwordChangedTime=0;    }  } catch (  Exception e) {    passwordChangedTime=0;  }}  }
class C{  public ModifyOperation processModify(ModifyChangeRecordEntry modifyRecord){  return processModify(ByteString.valueOfObject(modifyRecord.getDN()),modifyRecord.getModifications(),null);}  }
class C{  public void configure(MetricReference ref,MetricAnalysisConfiguration config){  metricStatisticsMap.get(ref).config=config;  if (!isAnalysisStarted(ref)) {    startAnalysis(ref);  }}  }
class C{  private void removeDITContentRule(String definition,SchemaBuilder newSchemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  Schema currentSchema=newSchemaBuilder.toSchema();  String ruleOid=SchemaUtils.parseDITContentRuleOID(definition);  if (!currentSchema.hasDITContentRule(ruleOid)) {    LocalizableMessage message=ERR_SCHEMA_MODIFY_REMOVE_NO_SUCH_DCR.get(ruleOid);    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  newSchemaBuilder.removeDITContentRule(ruleOid);  addElementIfNotNull(modifiedSchemaFiles,getElementSchemaFile(currentSchema.getDITContentRule(ruleOid)));}  }
class C{  protected String replace(String str){  String result=str;  int pos_start=str.indexOf("${");  if (pos_start >= 0) {    StringBuilder builder=new StringBuilder();    int pos_end=-1;    while (pos_start >= 0) {      builder.append(str,pos_end + 1,pos_start);      pos_end=str.indexOf('}',pos_start + 2);      if (pos_end < 0) {        pos_end=pos_start - 1;        break;      }      String propName=str.substring(pos_start + 2,pos_end);      String replacement=replaceWebApplicationProperties(propName);      if (replacement == null) {        replacement=propName.length() > 0 ? System.getProperty(propName) : null;      }      if (replacement != null) {        builder.append(replacement);      } else {        builder.append(str,pos_start,pos_end + 1);      }      pos_start=str.indexOf("${",pos_end + 1);    }    builder.append(str,pos_end + 1,str.length());    result=builder.toString();  }  return result;}  }
class C{  public void switchAntenna(int type){  mService.switchAntennaAsync(type);}  }
class C{  private ClassDef parse_class() throws SyntaxException {  LineCol lineCol=current.getLineCol();  Set<Modifier> set=new HashSet<>(modifiers);  modifiers.clear();  Set<AST.Anno> annos=new HashSet<>(this.annos);  this.annos.clear();  nextNode(false);  if (current instanceof Element) {    String name=((Element)current).getContent();    if (current.getTokenType() != TokenType.VALID_NAME) {      err.UnexpectedTokenException("valid class name",name,current.getLineCol());      err.debug("assume the token is a valid name");    }    List<VariableDef> params=null;    Set<String> newParamNames=new HashSet<>();    nextNode(true);    if (current instanceof Element) {      String p=((Element)current).getContent();switch (p) {case "(":        nextNode(false);      if (current instanceof ElementStartNode) {        List<Statement> list=parseElemStart((ElementStartNode)current,false,Collections.emptySet(),false);        params=new ArrayList<>();        boolean MustHaveInit=false;        for (        Statement stmt : list) {          if (stmt instanceof AST.Access) {            if (MustHaveInit) {              err.SyntaxException("expecting parameter with init value",stmt.line_col());              err.debug("assume it has init value");            }            AST.Access access=(AST.Access)stmt;            if (access.exp != null) {              err.SyntaxException("parameter cannot be " + access.toString(),access.line_col());              err.debug("ignore access.exp");            }            VariableDef v=new VariableDef(access.name,Collections.emptySet(),Collections.emptySet(),current.getLineCol());            params.add(v);            newParamNames.add(v.getName());          } else           if (stmt instanceof VariableDef) {            if (((VariableDef)stmt).getInit() == null) {              if (MustHaveInit) {                err.SyntaxException("expecting parameter with init value",stmt.line_col());                err.debug("assume it has init value");              }            } else {              MustHaveInit=true;            }            params.add((VariableDef)stmt);            newParamNames.add(((VariableDef)stmt).getName());          } else {            err.SyntaxException("parameter cannot be " + stmt.toString(),stmt.line_col());            err.debug("ignore this parameter def");          }        }        nextNode(false);        expecting(")",current.previous(),current,err);        nextNode(true);      } else       if (current instanceof Element) {        expecting(")",current.previous(),current,err);        params=Collections.emptyList();        nextNode(true);      } else {        err.UnexpectedTokenException(current.toString(),current.getLineCol());        err.debug("ignore the parameters");      }    break;case ":":  break;default :err.UnexpectedTokenException("( or :",p,current.getLineCol());err.debug("ignore the token");nextNode(true);}}AST.Invocation invocation=null;List<AST.Access> accesses=new ArrayList<>();if (current instanceof Element) {expecting(":",current.previous(),current,err);nextNode(false);while (true) {if (current.getTokenType() == TokenType.VALID_NAME) {Expression e=get_exp(true);if (e instanceof AST.Access) {accesses.add((AST.Access)e);} else if (e instanceof AST.Invocation && ((AST.Invocation)e).exp instanceof AST.Access) {if (invocation == null) {invocation=(AST.Invocation)e;} else {err.SyntaxException("Multiple Inheritance is not allowed",e.line_col());err.debug("ignore the arguments and only record the name");accesses.add((AST.Access)((AST.Invocation)e).exp);}} else {err.SyntaxException("super class or super interfaces cannot be " + e.toString(),e.line_col());err.debug("ignore this inheritance");}if (current instanceof EndingNode && ((EndingNode)current).getType() == EndingNode.STRONG) {nextNode(true);} else {break;}} else {break;}}}List<Statement> stmts=null;if (current instanceof ElementStartNode) {stmts=parseElemStart((ElementStartNode)current,true,newParamNames,false);}return new ClassDef(name,set,params == null ? Collections.emptyList() : params,invocation,accesses,annos,stmts == null ? Collections.emptyList() : stmts,lineCol);} else {err.UnexpectedTokenException("class name",current.toString(),current.getLineCol());err.debug("ignore this class definition");throw new ParseFail();}}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("LoginConfig[");  sb.append("authMethod=");  sb.append(authMethod);  if (realmName != null) {    sb.append(", realmName=");    sb.append(realmName);  }  if (loginPage != null) {    sb.append(", loginPage=");    sb.append(loginPage);  }  if (errorPage != null) {    sb.append(", errorPage=");    sb.append(errorPage);  }  sb.append("]");  return (sb.toString());}  }
class C{  ArchiveException(String message){  super(message);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node textNode;  Node retval;  Node refChild=null;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        textNode=doc.createCDATASection("terday");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    textNode=doc.createCDATASection("terday");{      boolean success=false;      try {        retval=titleAttr.insertBefore(textNode,refChild);      } catch (      DOMException ex) {        success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);      }      assertTrue("throw_HIERARCHY_REQUEST_ERR",success);    }  }}  }
class C{  public XMLFilterImpl(XMLReader parent){  super();  setParent(parent);}  }
class C{  public void postRegisterNameIdentifierSuccess(String hostedProviderID,HttpServletRequest request,HttpServletResponse response,String userDN,FSNameRegistrationRequest regRequest,FSNameRegistrationResponse regResponse,String regProfile){  FSUtils.debug.message("In FSDefaultSPAdapter.postRegistrationNameIdentifierSuccess");}  }
class C{  private String doSASLGSSAPI(ByteSequence bindDN,ByteSequence bindPassword,Map<String,List<String>> saslProperties,List<Control> requestControls,List<Control> responseControls) throws ClientException, LDAPException {  String kdc=null;  String realm=null;  gssapiBindDN=bindDN;  gssapiAuthID=null;  gssapiAuthzID=null;  gssapiQoP="auth";  gssapiAuthPW=bindPassword != null ? bindPassword.toString().toCharArray() : null;  if (saslProperties == null || saslProperties.isEmpty()) {    LocalizableMessage message=ERR_LDAPAUTH_NO_SASL_PROPERTIES.get(SASL_MECHANISM_GSSAPI);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  for (  Entry<String,List<String>> entry : saslProperties.entrySet()) {    String name=entry.getKey();    String lowerName=toLowerCase(name);    List<String> values=entry.getValue();    if (lowerName.equals(SASL_PROPERTY_AUTHID)) {      gssapiAuthID=getSingleValue(values,ERR_LDAPAUTH_AUTHID_SINGLE_VALUED);    } else     if (lowerName.equals(SASL_PROPERTY_AUTHZID)) {      gssapiAuthzID=getSingleValue(values,ERR_LDAPAUTH_AUTHZID_SINGLE_VALUED);    } else     if (lowerName.equals(SASL_PROPERTY_KDC)) {      kdc=getSingleValue(values,ERR_LDAPAUTH_KDC_SINGLE_VALUED);    } else     if (lowerName.equals(SASL_PROPERTY_QOP)) {      Iterator<String> iterator=values.iterator();      if (iterator.hasNext()) {        gssapiQoP=toLowerCase(iterator.next());        if (iterator.hasNext()) {          LocalizableMessage message=ERR_LDAPAUTH_QOP_SINGLE_VALUED.get();          throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);        }        if (gssapiQoP.equals("auth")) {        } else         if (gssapiQoP.equals("auth-int") || gssapiQoP.equals("auth-conf")) {          LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_QOP_NOT_SUPPORTED.get(gssapiQoP);          throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);        } else {          LocalizableMessage message=ERR_LDAPAUTH_GSSAPI_INVALID_QOP.get(gssapiQoP);          throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);        }      }    } else     if (lowerName.equals(SASL_PROPERTY_REALM)) {      realm=getSingleValue(values,ERR_LDAPAUTH_REALM_SINGLE_VALUED);    } else {      LocalizableMessage message=ERR_LDAPAUTH_INVALID_SASL_PROPERTY.get(name,SASL_MECHANISM_GSSAPI);      throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);    }  }  if (gssapiAuthID == null || gssapiAuthID.length() == 0) {    LocalizableMessage message=ERR_LDAPAUTH_SASL_AUTHID_REQUIRED.get(SASL_MECHANISM_GSSAPI);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  if (gssapiAuthzID == null) {    gssapiAuthzID=gssapiAuthID;  }  if (realm != null) {    System.setProperty(KRBV_PROPERTY_REALM,realm);  }  if (kdc != null) {    System.setProperty(KRBV_PROPERTY_KDC,kdc);  }  String configFileName;  try {    File tempFile=File.createTempFile("login","conf");    configFileName=tempFile.getAbsolutePath();    tempFile.deleteOnExit();    try (BufferedWriter w=new BufferedWriter(new FileWriter(tempFile,false))){      w.write(getClass().getName() + " {");      w.newLine();      w.write("  com.sun.security.auth.module.Krb5LoginModule required " + "client=TRUE useTicketCache=TRUE;");      w.newLine();      w.write("};");      w.newLine();    }   } catch (  Exception e) {    LocalizableMessage message=ERR_LDAPAUTH_GSSAPI_CANNOT_CREATE_JAAS_CONFIG.get(getExceptionMessage(e));    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message,e);  }  System.setProperty(JAAS_PROPERTY_CONFIG_FILE,configFileName);  System.setProperty(JAAS_PROPERTY_SUBJECT_CREDS_ONLY,"true");  LoginContext loginContext;  try {    loginContext=new LoginContext(getClass().getName(),this);    loginContext.login();  } catch (  Exception e) {    LocalizableMessage message=ERR_LDAPAUTH_GSSAPI_LOCAL_AUTHENTICATION_FAILED.get(getExceptionMessage(e));    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message,e);  }  try {    Subject.doAs(loginContext.getSubject(),this);  } catch (  Exception e) {    if (e instanceof ClientException) {      throw (ClientException)e;    } else     if (e instanceof LDAPException) {      throw (LDAPException)e;    }    LocalizableMessage message=ERR_LDAPAUTH_GSSAPI_REMOTE_AUTHENTICATION_FAILED.get(getExceptionMessage(e));    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message,e);  }  return null;}  }
class C{  public void reset(){  super.reset();  H1=0xcbbb9d5dc1059ed8l;  H2=0x629a292a367cd507l;  H3=0x9159015a3070dd17l;  H4=0x152fecd8f70e5939l;  H5=0x67332667ffc00b31l;  H6=0x8eb44a8768581511l;  H7=0xdb0c2e0d64f98fa7l;  H8=0x47b5481dbefa4fa4l;}  }
class C{  public MemoryHandler(Handler target,int size,Level pushLevel){  if (target == null || pushLevel == null) {    throw new NullPointerException();  }  if (size <= 0) {    throw new IllegalArgumentException();  }  sealed=false;  configure();  sealed=true;  this.target=target;  this.pushLevel=pushLevel;  this.size=size;  init();}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){switch (requestCode) {case RESOLVE_CONNECTION_REQUEST_CODE:case NO_RESOLUTION_REQUEST_CODE:    if (resultCode == Activity.RESULT_OK) {      connect();    }  break;}}  }
class C{  @Inject public SessionQueryManager(SessionQueryFactory queryFactory){  this.queryFactory=queryFactory;}  }
class C{  public NASIPAddressAttribute(byte[] octets){  super(octets);  byte[] addr=new byte[octets.length - 2];  System.arraycopy(octets,2,addr,0,addr.length);  try {    ip=InetAddress.getByAddress(addr);  } catch (  UnknownHostException e) {    e.printStackTrace();  }}  }
class C{  public static void addTryCatch(MethodNode mn,String catchType,String handleType){  if (mn.name.startsWith("<") || AccessHelper.isAbstract(mn.access)) {    return;  }  LabelNode start=new LabelNode();  LabelNode handler=new LabelNode();  LabelNode end=new LabelNode();  if (mn.localVariables == null) {    mn.localVariables=new ArrayList<LocalVariableNode>(5);  }  int index=mn.localVariables.size();  mn.instructions.insert(start);  mn.instructions.add(handler);  mn.instructions.add(new InsnNode(Opcodes.NOP));  mn.instructions.add(end);  mn.instructions.add(new InsnNode(Opcodes.ACONST_NULL));  mn.instructions.add(new InsnNode(Opcodes.ATHROW));  LocalVariableNode exVar=new LocalVariableNode("excptn","L" + catchType + ";",null,start,handler,index);  TryCatchBlockNode tryBlock=new TryCatchBlockNode(start,end,handler,handleType == null ? null : ("L" + handleType + ";"));  mn.localVariables.add(exVar);  mn.tryCatchBlocks.add(tryBlock);  mn.exceptions.add(catchType);}  }
class C{  public void test_swapLjava_util_ListII(){  LinkedList smallList=new LinkedList();  for (int i=0; i < 10; i++) {    smallList.add(objArray[i]);  }  try {    Collections.swap(smallList,-1,6);    fail("Expected IndexOutOfBoundsException for -1");  } catch (  IndexOutOfBoundsException e) {  }  try {    Collections.swap(smallList,6,-1);    fail("Expected IndexOutOfBoundsException for -1");  } catch (  IndexOutOfBoundsException e) {  }  try {    Collections.swap(smallList,6,11);    fail("Expected IndexOutOfBoundsException for 11");  } catch (  IndexOutOfBoundsException e) {  }  try {    Collections.swap(smallList,11,6);    fail("Expected IndexOutOfBoundsException for 11");  } catch (  IndexOutOfBoundsException e) {  }  try {    Collections.swap(null,1,1);    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  Collections.swap(smallList,4,7);  assertEquals("Didn't Swap the element at position 4 ",new Integer(7),smallList.get(4));  assertEquals("Didn't Swap the element at position 7 ",new Integer(4),smallList.get(7));  for (int i=0; i < 10; i++) {    if (i != 4 && i != 7)     assertEquals("shouldn't have swapped the element at position " + i,new Integer(i),smallList.get(i));  }}  }
class C{  @Override public boolean elementAvailable() throws IOException {  return reader.elementAvailable();}  }
class C{  public NSArray(NSObject... a){  array=a;}  }
class C{  private boolean store_trace(BrdTracep p_trace){  ShapeTile offset_shape;  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  if (search_tree.is_clearance_compensation_used()) {    double curr_offset=p_trace.get_compensated_half_width(search_tree) + c_offset_add;    offset_shape=shape.offset(curr_offset);  } else {    double cl_offset=r_board.get_clearance(p_trace.clearance_idx(),cl_class,p_trace.get_layer()) + c_offset_add;    offset_shape=shape.offset(p_trace.get_half_width());    offset_shape=offset_shape.offset(cl_offset);  }  ArrayList<PlaToupleInt> entries=offset_shape.entrance_points(p_trace.polyline());  for (  PlaToupleInt entry_tuple : entries) {    PlaPointFloat entry_approx=p_trace.polyline().plaline(entry_tuple.v_a).intersection_approx(offset_shape.border_line(entry_tuple.v_b));    if (entry_approx.is_NaN())     System.err.println("store_trace entry_approx.isNaN, fix it !");    insert_entry_point(p_trace,entry_tuple.v_a,entry_tuple.v_b,entry_approx);  }  if (p_trace.shares_net_no(own_net_nos)) {    found_obstacle=p_trace;    return true;  }  if (!p_trace.is_nets_normal())   return false;  PlaPointInt end_corner=p_trace.corner_first().round();  Collection<BrdItem> contact_list;  for (int index=0; index < 2; ++index) {    if (offset_shape.contains(end_corner)) {      if (index == 0) {        contact_list=p_trace.get_start_contacts();      } else {        contact_list=p_trace.get_end_contacts();      }      int contact_count=0;      boolean store_end_corner=true;      Iterator<BrdItem> it=contact_list.iterator();      while (it.hasNext()) {        BrdItem contact_item=it.next();        if (!contact_item.is_route()) {          found_obstacle=contact_item;          return false;        }        if (contact_item instanceof BrdTracep) {          if (contact_item.is_shove_fixed() || ((BrdTracep)contact_item).get_half_width() != p_trace.get_half_width() || contact_item.clearance_idx() != p_trace.clearance_idx()) {            if (offset_shape.contains_inside(end_corner)) {              found_obstacle=contact_item;              return false;            }          }        } else         if (contact_item instanceof BrdAbitVia) {          ShapeTile via_shape=((BrdAbitVia)contact_item).get_tile_shape_on_layer(layer);          double via_trace_diff=via_shape.smallest_radius() - p_trace.get_compensated_half_width(search_tree);          if (!search_tree.is_clearance_compensation_used()) {            int via_clearance=r_board.get_clearance(contact_item.clearance_idx(),cl_class,layer);            int trace_clearance=r_board.get_clearance(p_trace.clearance_idx(),cl_class,layer);            if (trace_clearance > via_clearance) {              via_trace_diff+=via_clearance - trace_clearance;            }          }          if (via_trace_diff < 0) {            found_obstacle=contact_item;            return false;          }          if (via_trace_diff == 0 && !offset_shape.contains_inside(end_corner)) {            store_end_corner=false;          }        }        ++contact_count;      }      if (contact_count == 1 && store_end_corner) {        PlaPoint projection=offset_shape.nearest_border_point(end_corner);        int projection_side=offset_shape.contains_on_border_line_no(projection);        int trace_line_segment_no;        if (index == 0) {          trace_line_segment_no=0;        } else {          trace_line_segment_no=p_trace.polyline().plaline_len(-1);        }        if (projection_side >= 0) {          insert_entry_point(p_trace,trace_line_segment_no,projection_side,projection.to_float());        }      } else       if (contact_count == 0 && offset_shape.contains_inside(end_corner)) {        shape_contains_trace_tails=true;      }    }    end_corner=p_trace.corner_last().round();  }  found_obstacle=p_trace;  return true;}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  String tokenID=token.getTokenID().toString();  String userDN=token.getPrincipal().getName();  boolean roleMatch=false;  Set roleSet=null;  if (subjectRoles.size() > 0) {    Iterator roleIter=subjectRoles.iterator();    while (roleIter.hasNext()) {      Boolean matchFound=null;      String valueDN=(String)roleIter.next();      if ((matchFound=SubjectEvaluationCache.isMember(tokenID,ldapServer,valueDN)) != null) {        if (debug.messageEnabled()) {          debug.message("DSAMERole.isMember():Got membership " + "from cache of " + token.getPrincipal().getName() + " in DSAME role "+ valueDN+ " :"+ matchFound.booleanValue());        }        boolean result=matchFound.booleanValue();        if (result) {          return result;        } else {          continue;        }      }      boolean listeningToSsoToken=true;      if (!PolicyEvaluator.ssoListenerRegistry.containsKey(tokenID)) {        try {          token.addSSOTokenListener(PolicyEvaluator.ssoListener);          PolicyEvaluator.ssoListenerRegistry.put(tokenID,PolicyEvaluator.ssoListener);          if (debug.messageEnabled()) {            debug.message("DSAMERole.isMember(): sso listener added .\n");          }        } catch (        SSOTokenListenersUnsupportedException ex) {          debug.message("DSAMERole.isMember(): could not add sso listener: {}",ex.getMessage());          listeningToSsoToken=false;        }      }      if (debug.messageEnabled()) {        debug.message("DSAMERole:isMember():entry for " + valueDN + " not in subject evaluation cache, fetching "+ "from NS User Cache.");      }      if (roleSet == null) {        roleSet=PolicyEvaluator.getUserNSRoleValues(token);      }      if ((roleSet != null) && !roleSet.isEmpty()) {        if (debug.messageEnabled()) {          debug.message("DSAMERole.isMember():" + "\n  user roles: " + roleSet + "\n  subject roles: "+ subjectRoles);        }        if (roleSet.contains(valueDN)) {          roleMatch=true;        }      }      if (debug.messageEnabled()) {        debug.message("DSAMERole.isMember:adding entry " + tokenID + " "+ ldapServer+ " "+ valueDN+ " "+ roleMatch+ " in subject evaluation cache.");      }      if (listeningToSsoToken) {        SubjectEvaluationCache.addEntry(tokenID,ldapServer,valueDN,roleMatch);      }      if (roleMatch) {        break;      }    }  }  if (debug.messageEnabled()) {    if (!roleMatch) {      debug.message("DSAMERole.isMember(): User " + userDN + " is not a member of this DSAMERole object");    } else {      debug.message("DSAMERole.isMember(): User " + userDN + " is a member of this DSAMERole object");    }  }  return roleMatch;}  }
class C{  public static VirtualListViewRequestControl newAssertionControl(final boolean isCritical,final ByteString assertionValue,final int beforeCount,final int afterCount,final ByteString contextID){  Reject.ifNull(assertionValue);  Reject.ifFalse(beforeCount >= 0,"beforeCount is less than 0");  Reject.ifFalse(afterCount >= 0,"afterCount is less than 0");  return new VirtualListViewRequestControl(isCritical,beforeCount,afterCount,-1,-1,assertionValue,contextID);}  }
class C{  protected ModifyOperationWrapper(ModifyOperation modify){  super(modify);}  }
class C{  static StringBuilder appendQuotedString(StringBuilder target,String key){  target.append('"');  for (int i=0, len=key.length(); i < len; i++) {    char ch=key.charAt(i);switch (ch) {case '\n':      target.append("%0A");    break;case '\r':  target.append("%0D");break;case '"':target.append("%22");break;default :target.append(ch);break;}}target.append('"');return target;}  }
class C{  public void paintTabbedPaneContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  protected void webConfig(){  WebXmlParser webXmlParser=new WebXmlParser(context.getXmlNamespaceAware(),context.getXmlValidation(),context.getXmlBlockExternal());  Set<WebXml> defaults=new HashSet<>();  defaults.add(getDefaultWebXmlFragment(webXmlParser));  WebXml webXml=createWebXml();  InputSource contextWebXml=getContextWebXmlSource();  if (!webXmlParser.parseWebXml(contextWebXml,webXml,false)) {    ok=false;  }  ServletContext sContext=context.getServletContext();  Map<String,WebXml> fragments=processJarsForWebFragments(webXml,webXmlParser);  Set<WebXml> orderedFragments=null;  orderedFragments=WebXml.orderWebFragments(webXml,fragments,sContext);  if (ok) {    processServletContainerInitializers();  }  if (!webXml.isMetadataComplete() || typeInitializerMap.size() > 0) {    Map<String,JavaClassCacheEntry> javaClassCache=new HashMap<>();    if (ok) {      WebResource[] webResources=context.getResources().listResources("/WEB-INF/classes");      for (      WebResource webResource : webResources) {        if ("META-INF".equals(webResource.getName())) {          continue;        }        processAnnotationsWebResource(webResource,webXml,webXml.isMetadataComplete(),javaClassCache);      }    }    if (ok) {      processAnnotations(orderedFragments,webXml.isMetadataComplete(),javaClassCache);    }    javaClassCache.clear();  }  if (!webXml.isMetadataComplete()) {    if (ok) {      ok=webXml.merge(orderedFragments);    }    webXml.merge(defaults);    if (ok) {      convertJsps(webXml);    }    if (ok) {      configureContext(webXml);    }  } else {    webXml.merge(defaults);    convertJsps(webXml);    configureContext(webXml);  }  if (context.getLogEffectiveWebXml()) {    log.info("web.xml:\n" + webXml.toXml());  }  if (ok) {    Set<WebXml> resourceJars=new LinkedHashSet<>();    for (    WebXml fragment : orderedFragments) {      resourceJars.add(fragment);    }    for (    WebXml fragment : fragments.values()) {      if (!resourceJars.contains(fragment)) {        resourceJars.add(fragment);      }    }    processResourceJARs(resourceJars);  }  if (ok) {    for (    Map.Entry<ServletContainerInitializer,Set<Class<?>>> entry : initializerClassMap.entrySet()) {      if (entry.getValue().isEmpty()) {        context.addServletContainerInitializer(entry.getKey(),null);      } else {        context.addServletContainerInitializer(entry.getKey(),entry.getValue());      }    }  }}  }
class C{  public boolean contains(BrdViaInfo p_via_info){  for (  BrdViaInfo curr_info : this.vinfo_list) {    if (p_via_info == curr_info) {      return true;    }  }  return false;}  }
class C{  public MissingFormatArgumentException(String s){  if (s == null)   throw new NullPointerException();  this.s=s;}  }
class C{  public static String decDecode(final String value){  return decode(value,5,10);}  }
class C{  public LogConfigurationException(Throwable cause){  super(cause);}  }
class C{  public boolean isCanceled(){  return schedule == null;}  }
class C{  public static void fillCache(int decimals){  int step=1;switch (decimals) {case 0:    step=100;  break;case 1:step=10;break;}for (int i=1; i < byteCacheSize; i+=step) {if (byteCache[i] != null) continue;byteCache[i]=convertToBytes(i);}}  }
class C{  public static void addEntries(List<Entry> entries) throws Exception {  for (  Entry entry : entries) {    addEntry(entry);  }}  }
class C{  @DataProvider(name="testDNs") public Object[][] createData(){  return new Object[][]{{"","",""},{"   ","",""},{"cn=","cn=","cn="},{"cn= ","cn=","cn="},{"cn =","cn=","cn="},{"cn = ","cn=","cn="},{"dc=com","dc=com","dc=com"},{"dc=com+o=com","dc=com+o=com","dc=com+o=com"},{"DC=COM","dc=com","DC=COM"},{"dc = com","dc=com","dc=com"},{" dc = com ","dc=com","dc=com"},{"dc=example,dc=com","dc=example,dc=com","dc=example,dc=com"},{"dc=example, dc=com","dc=example,dc=com","dc=example,dc=com"},{"dc=example ,dc=com","dc=example,dc=com","dc=example,dc=com"},{"dc =example , dc  =   com","dc=example,dc=com","dc=example,dc=com"},{"givenName=John+cn=Doe,ou=People,dc=example,dc=com","cn=doe+givenname=john,ou=people,dc=example,dc=com","givenName=John+cn=Doe,ou=People,dc=example,dc=com"},{"givenName=John\\+cn=Doe,ou=People,dc=example,dc=com","givenname=john\\+cn=doe,ou=people,dc=example,dc=com","givenName=John\\+cn=Doe,ou=People,dc=example,dc=com"},{"cn=Doe\\, John,ou=People,dc=example,dc=com","cn=doe\\, john,ou=people,dc=example,dc=com","cn=Doe\\, John,ou=People,dc=example,dc=com"},{"UID=jsmith,DC=example,DC=net","uid=jsmith,dc=example,dc=net","UID=jsmith,DC=example,DC=net"},{"OU=Sales+CN=J. Smith,DC=example,DC=net","cn=j. smith+ou=sales,dc=example,dc=net","OU=Sales+CN=J. Smith,DC=example,DC=net"},{"CN=James \\\"Jim\\\" Smith\\, III,DC=example,DC=net","cn=james \\\"jim\\\" smith\\, iii,dc=example,dc=net","CN=James \\\"Jim\\\" Smith\\, III,DC=example,DC=net"},{"CN=John Smith\\2C III,DC=example,DC=net","cn=john smith\\, iii,dc=example,dc=net","CN=John Smith\\, III,DC=example,DC=net"},{"CN=\\23John Smith\\20,DC=example,DC=net","cn=\\#john smith,dc=example,dc=net","CN=\\#John Smith\\ ,DC=example,DC=net"},{"CN=Before\\0dAfter,DC=example,DC=net","cn=before after,dc=example,dc=net","CN=Before\\0dAfter,DC=example,DC=net"},{"2.5.4.3=#04024869","cn=hi","2.5.4.3=#04024869"},{"1.1.1=","1.1.1=","1.1.1="},{"CN=Lu\\C4\\8Di\\C4\\87","cn=lu\u010di\u0107","CN=Lu\u010di\u0107"},{"ou=\\e5\\96\\b6\\e6\\a5\\ad\\e9\\83\\a8,o=Airius","ou=\u55b6\u696d\u90e8,o=airius","ou=\u55b6\u696d\u90e8,o=Airius"},{"photo=\\ john \\ ,dc=com","photo=\\ john \\ ,dc=com","photo=\\ john \\ ,dc=com"},{"AB-global=","ab-global=","AB-global="},{"OU= Sales + CN = J. Smith ,DC=example,DC=net","cn=j. smith+ou=sales,dc=example,dc=net","OU=Sales+CN=J. Smith,DC=example,DC=net"},{"cn=John+dc=","dc=+cn=john","cn=John+dc="},{"O=\"Sue, Grabbit + Runn\",C=US","o=sue\\, grabbit \\+ runn,c=us","O=Sue\\, Grabbit \\+ Runn,C=US"},{"O=\"John \\\"Tiger\\\" Smith\",C=US","o=john \\\"tiger\\\" smith,c=us","O=John \\\"Tiger\\\" Smith,C=US"}};}  }
class C{  @Override public final boolean cancellationRequested(){  cancellationWasRequested=true;  return false;}  }
class C{  @Deprecated public String toLocaleString(){  DateFormat formatter=DateFormat.getDateTimeInstance();  return formatter.format(this);}  }
class C{  public static Service create(java.net.URL wsdlDocumentLocation,QName serviceName){  return new Service(wsdlDocumentLocation,serviceName);}  }
class C{  public static boolean isBomByte(byte byteToCheck){  return (byteToCheck == (byte)239 || byteToCheck == (byte)187 || byteToCheck == (byte)191) || (byteToCheck == (byte)254 || byteToCheck == (byte)255);}  }
class C{  public void sendRelationRemovalNotification(String relationId,List<ObjectName> unregMBeanList) throws IllegalArgumentException, RelationNotFoundException {  if (relationId == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"sendRelationRemovalNotification",new Object[]{relationId,unregMBeanList});  sendNotificationInt(3,"Removal of relation " + relationId,relationId,unregMBeanList,null,null,null);  RELATION_LOGGER.exiting(RelationService.class.getName(),"sendRelationRemovalNotification");  return;}  }
class C{  public FrameBodyTSOA(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public static boolean isSpace(int c){  return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  public void addCRL(X509CRLHolder crl){  crls.add(crl.toASN1Structure());}  }
class C{  protected boolean isValidLine(String line){  return true;}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public final void insertElementAt(Object value,int at){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  public int purge(){  int result=0;synchronized (queue) {    for (int i=queue.size(); i > 0; i--) {      if (queue.get(i).state == TimerTask.CANCELLED) {        queue.quickRemove(i);        result++;      }    }    if (result != 0)     queue.heapify();  }  return result;}  }
class C{  private boolean isElementIndex(int index){  return index >= 0 && index < size;}  }
class C{  private void executeNoTimeoutScenario() throws Exception {  UpdateMsg updateMsg=checkAssuredParametersOnReceivedUpdateMsg();  sleep(NO_TIMEOUT_RS_SLEEP_TIME);  AckMsg ackMsg=new AckMsg(updateMsg.getCSN());  session.publish(ackMsg);  scenarioExecuted=true;}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (!other.getClass().equals(this.getClass()))   return false;  NameValue that=(NameValue)other;  if (this == that)   return true;  if (this.name == null && that.name != null || this.name != null && that.name == null)   return false;  if (this.name != null && that.name != null && this.name.compareToIgnoreCase(that.name) != 0)   return false;  if (this.value != null && that.value == null || this.value == null && that.value != null)   return false;  if (this.value == that.value)   return true;  if (value instanceof String) {    if (isQuotedString)     return this.value.equals(that.value);    String val=(String)this.value;    String val1=(String)that.value;    return val.compareToIgnoreCase(val1) == 0;  } else   return this.value.equals(that.value);}  }
class C{  public FileWriterWithEncoding(File file,CharsetEncoder encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  protected int consumed(){  return consumed;}  }
class C{  public void readByteArray(byte[] arr,int offset) throws InvalidDataTypeException {  if (arr == null) {    throw new NullPointerException("Byte array is null");  }  if ((offset < 0) || (offset >= arr.length)) {    throw new InvalidDataTypeException("Offset to byte array is out of bounds: offset = " + offset + ", array.length = "+ arr.length);  }  if (offset + size > arr.length) {    throw new InvalidDataTypeException("Offset plus size to byte array is out of bounds: offset = " + offset + ", size = "+ size+ " + arr.length "+ arr.length);  }  long lvalue=0;  for (int i=offset; i < (offset + size); i++) {    lvalue<<=8;    lvalue+=(arr[i] & 0xff);  }  value=lvalue;  logger.config("Read NumberFixedlength:" + value);}  }
class C{  public KeyStoreBuilder withPassword(final String password){  return withPassword(password.toCharArray());}  }
class C{  public void addQualifier(XMPNode qualNode) throws XMPException {  assertQualifierNotExisting(qualNode.getName());  qualNode.setParent(this);  qualNode.getOptions().setQualifier(true);  getOptions().setHasQualifiers(true);  if (qualNode.isLanguageNode()) {    options.setHasLanguage(true);    getQualifier().add(0,qualNode);  } else   if (qualNode.isTypeNode()) {    options.setHasType(true);    getQualifier().add(!options.getHasLanguage() ? 0 : 1,qualNode);  } else {    getQualifier().add(qualNode);  }}  }
class C{  public FrameBodyTDRC(FrameBodyTDAT body){  originalID=ID3v23Frames.FRAME_ID_V3_TDAT;  date=body.getText();  setMonthOnly(body.isMonthOnly());  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  setObjectValue(DataTypes.OBJ_TEXT,getFormattedText());}  }
class C{  public SessionSubject(NameIdentifier nameIdentifier,SubjectConfirmation subjectConfirmation,IDPProvidedNameIdentifier idpNameIdentifier) throws FSMsgException, SAMLException {  super(nameIdentifier,subjectConfirmation,idpNameIdentifier);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributerestoredefaultvalue.class,args);}  }
class C{  public SSOProviderImpl() throws SSOException {  this(SessionCache.getInstance());}  }
class C{  public DelayRequestControl(boolean isCritical,long delayDuration){  super(OID_DELAY_REQUEST,isCritical);  this.delayDuration=delayDuration;}  }
class C{  public boolean isMultiplexed(){  return framedConnection != null;}  }
class C{  protected Error(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  GF256Poly addOrSubtract(GF256Poly other){  if (!field.equals(other.field)) {    throw new IllegalArgumentException("GF256Polys do not have same GF256 field");  }  if (isZero()) {    return other;  }  if (other.isZero()) {    return this;  }  int[] smallerCoefficients=this.coefficients;  int[] largerCoefficients=other.coefficients;  if (smallerCoefficients.length > largerCoefficients.length) {    int[] temp=smallerCoefficients;    smallerCoefficients=largerCoefficients;    largerCoefficients=temp;  }  int[] sumDiff=new int[largerCoefficients.length];  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);  for (int i=lengthDiff; i < largerCoefficients.length; i++) {    sumDiff[i]=GF256.addOrSubtract(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);  }  return new GF256Poly(field,sumDiff);}  }
class C{  static public void assertEquals(Object expected,Object actual){  assertEquals(null,expected,actual);}  }
class C{  public static int mainPasswordModify(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  BooleanArgument provideDNForAuthzID;  BooleanArgument showUsage;  BooleanArgument trustAll;  BooleanArgument useSSL;  BooleanArgument useStartTLS;  FileBasedArgument bindPWFile;  StringArgument certNickname;  FileBasedArgument currentPWFile;  FileBasedArgument newPWFile;  FileBasedArgument sslKeyStorePINFile;  FileBasedArgument sslTrustStorePINFile;  IntegerArgument ldapPort;  StringArgument authzID;  StringArgument bindDN;  StringArgument bindPW;  StringArgument controlStr;  StringArgument currentPW;  StringArgument ldapHost;  StringArgument newPW;  StringArgument sslKeyStore;  StringArgument sslKeyStorePIN;  StringArgument sslTrustStore;  StringArgument sslTrustStorePIN;  IntegerArgument connectTimeout;  StringArgument propertiesFileArgument;  BooleanArgument noPropertiesFileArgument;  LocalizableMessage toolDescription=INFO_LDAPPWMOD_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_LDAPPASSWORDMODIFY.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    propertiesFileArgument=StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    argParser.setFilePropertiesArgument(propertiesFileArgument);    noPropertiesFileArgument=BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildAndAddToParser(argParser);    argParser.setNoPropertiesFileArgument(noPropertiesFileArgument);    ldapHost=StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(INFO_LDAPPWMOD_DESCRIPTION_HOST.get()).defaultValue("127.0.0.1").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    ldapPort=IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(INFO_LDAPPWMOD_DESCRIPTION_PORT.get()).range(1,65535).defaultValue(389).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    useSSL=BooleanArgument.builder(OPTION_LONG_USE_SSL).shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_LDAPPWMOD_DESCRIPTION_USE_SSL.get()).buildAndAddToParser(argParser);    useStartTLS=BooleanArgument.builder(OPTION_LONG_START_TLS).shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_LDAPPWMOD_DESCRIPTION_USE_STARTTLS.get()).buildAndAddToParser(argParser);    bindDN=StringArgument.builder(OPTION_LONG_BINDDN).shortIdentifier(OPTION_SHORT_BINDDN).description(INFO_LDAPPWMOD_DESCRIPTION_BIND_DN.get()).valuePlaceholder(INFO_BINDDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPW=StringArgument.builder(OPTION_LONG_BINDPWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_LDAPPWMOD_DESCRIPTION_BIND_PW.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPWFile=FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_LDAPPWMOD_DESCRIPTION_BIND_PW_FILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    authzID=StringArgument.builder("authzID").shortIdentifier('a').description(INFO_LDAPPWMOD_DESCRIPTION_AUTHZID.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildAndAddToParser(argParser);    provideDNForAuthzID=BooleanArgument.builder("provideDNForAuthzID").shortIdentifier('A').description(INFO_LDAPPWMOD_DESCRIPTION_PROVIDE_DN_FOR_AUTHZID.get()).buildAndAddToParser(argParser);    newPW=StringArgument.builder("newPassword").shortIdentifier('n').description(INFO_LDAPPWMOD_DESCRIPTION_NEWPW.get()).valuePlaceholder(INFO_NEW_PASSWORD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    newPWFile=FileBasedArgument.builder("newPasswordFile").shortIdentifier('N').description(INFO_LDAPPWMOD_DESCRIPTION_NEWPWFILE.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    currentPW=StringArgument.builder("currentPassword").shortIdentifier('c').description(INFO_LDAPPWMOD_DESCRIPTION_CURRENTPW.get()).valuePlaceholder(INFO_CURRENT_PASSWORD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    currentPWFile=FileBasedArgument.builder("currentPasswordFile").shortIdentifier('C').description(INFO_LDAPPWMOD_DESCRIPTION_CURRENTPWFILE.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustAll=trustAllArgument();    argParser.addArgument(trustAll);    sslKeyStore=StringArgument.builder(OPTION_LONG_KEYSTOREPATH).shortIdentifier(OPTION_SHORT_KEYSTOREPATH).description(INFO_LDAPPWMOD_DESCRIPTION_KEYSTORE.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    sslKeyStorePIN=StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_LDAPPWMOD_DESCRIPTION_KEYSTORE_PIN.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    sslKeyStorePINFile=FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_LDAPPWMOD_DESCRIPTION_KEYSTORE_PINFILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    certNickname=StringArgument.builder("certNickname").description(INFO_DESCRIPTION_CERT_NICKNAME.get()).valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    sslTrustStore=StringArgument.builder(OPTION_LONG_TRUSTSTOREPATH).shortIdentifier(OPTION_SHORT_TRUSTSTOREPATH).description(INFO_LDAPPWMOD_DESCRIPTION_TRUSTSTORE.get()).valuePlaceholder(INFO_TRUSTSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    sslTrustStorePIN=StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).description(INFO_LDAPPWMOD_DESCRIPTION_TRUSTSTORE_PIN.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    sslTrustStorePINFile=FileBasedArgument.builder(OPTION_LONG_TRUSTSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD_FILE).description(INFO_LDAPPWMOD_DESCRIPTION_TRUSTSTORE_PINFILE.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    controlStr=StringArgument.builder("control").shortIdentifier('J').description(INFO_DESCRIPTION_CONTROLS.get()).multiValued().valuePlaceholder(INFO_LDAP_CONTROL_PLACEHOLDER.get()).buildAndAddToParser(argParser);    connectTimeout=IntegerArgument.builder(OPTION_LONG_CONNECT_TIMEOUT).description(INFO_DESCRIPTION_CONNECTION_TIMEOUT.get()).lowerBound(0).defaultValue(CliConstants.DEFAULT_LDAP_CONNECT_TIMEOUT).valuePlaceholder(INFO_TIMEOUT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  try {    throwIfArgumentsConflict(bindPW,bindPWFile);    throwIfArgumentsConflict(newPW,newPWFile);    throwIfArgumentsConflict(currentPW,currentPWFile);    throwIfArgumentsConflict(useSSL,useStartTLS);    throwIfArgumentsConflict(sslKeyStorePIN,sslKeyStorePINFile);    throwIfArgumentsConflict(sslTrustStorePIN,sslTrustStorePINFile);  } catch (  final ArgumentException conflict) {    printWrappedText(err,conflict.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  if (bindDN.isPresent()) {    if (!bindPW.isPresent() && !bindPWFile.isPresent()) {      argParser.displayMessageAndUsageReference(err,ERR_LDAPPWMOD_BIND_DN_AND_PW_MUST_BE_TOGETHER.get());      return CLIENT_SIDE_PARAM_ERROR;    }  } else   if (bindPW.isPresent() || bindPWFile.isPresent()) {    argParser.displayMessageAndUsageReference(err,ERR_LDAPPWMOD_BIND_DN_AND_PW_MUST_BE_TOGETHER.get());    return CLIENT_SIDE_PARAM_ERROR;  } else {    if (provideDNForAuthzID.isPresent()) {      argParser.displayMessageAndUsageReference(err,ERR_LDAPPWMOD_DEPENDENT_ARGS.get(provideDNForAuthzID.getLongIdentifier(),bindDN.getLongIdentifier()));      return CLIENT_SIDE_PARAM_ERROR;    }    if (!authzID.isPresent() || (!currentPW.isPresent() && !currentPWFile.isPresent())) {      argParser.displayMessageAndUsageReference(err,ERR_LDAPPWMOD_ANON_REQUIRES_AUTHZID_AND_CURRENTPW.get());      return CLIENT_SIDE_PARAM_ERROR;    }  }  String host=ldapHost.getValue();  int port;  try {    port=ldapPort.getIntValue();  } catch (  Exception e) {    printWrappedText(err,e.toString());    return CLIENT_SIDE_PARAM_ERROR;  }  ArrayList<Control> controls=new ArrayList<>();  if (controlStr.isPresent()) {    for (    String ctrlString : controlStr.getValues()) {      LDAPControl ctrl=LDAPToolUtils.getControl(ctrlString,err);      if (ctrl == null) {        printWrappedText(err,ERR_TOOL_INVALID_CONTROL_STRING.get(ctrlString));        return CLIENT_SIDE_PARAM_ERROR;      }      controls.add(ctrl);    }  }  if (initializeServer) {    DirectoryServer.bootstrapClient();  }  AtomicInteger nextMessageID=new AtomicInteger(1);  LDAPConnectionOptions connectionOptions=new LDAPConnectionOptions();  connectionOptions.setUseSSL(useSSL.isPresent());  connectionOptions.setStartTLS(useStartTLS.isPresent());  connectionOptions.setVersionNumber(3);  if (connectionOptions.useSSL() || connectionOptions.useStartTLS()) {    String keyPIN=null;    if (sslKeyStorePIN.isPresent()) {      keyPIN=sslKeyStorePIN.getValue();    } else     if (sslKeyStorePINFile.isPresent()) {      keyPIN=sslKeyStorePINFile.getValue();    }    String trustPIN=null;    if (sslTrustStorePIN.isPresent()) {      trustPIN=sslTrustStorePIN.getValue();    } else     if (sslTrustStorePINFile.isPresent()) {      trustPIN=sslTrustStorePINFile.getValue();    }    try {      String clientAlias;      if (certNickname.isPresent()) {        clientAlias=certNickname.getValue();      } else {        clientAlias=null;      }      SSLConnectionFactory sslConnectionFactory=new SSLConnectionFactory();      sslConnectionFactory.init(trustAll.isPresent(),sslKeyStore.getValue(),keyPIN,clientAlias,sslTrustStore.getValue(),trustPIN);      connectionOptions.setSSLConnectionFactory(sslConnectionFactory);    } catch (    Exception e) {      printWrappedText(err,ERR_LDAPPWMOD_ERROR_INITIALIZING_SSL.get(e));      return CLIENT_SIDE_PARAM_ERROR;    }  }  LDAPConnection connection=new LDAPConnection(host,port,connectionOptions,out,err);  String dn;  String pw;  if (bindPW.isPresent()) {    dn=bindDN.getValue();    pw=bindPW.getValue();    if ("-".equals(pw)) {      try {        out.print(INFO_LDAPAUTH_PASSWORD_PROMPT.get(dn));        char[] pwChars=ConsoleApplication.readPassword();        while (pwChars.length == 0) {          printWrappedText(err,INFO_LDAPAUTH_NON_EMPTY_PASSWORD.get());          out.print(INFO_LDAPAUTH_PASSWORD_PROMPT.get(dn));          pwChars=ConsoleApplication.readPassword();        }        pw=new String(pwChars);      } catch (      Exception ex) {        printWrappedText(err,ex.getMessage());        return CLIENT_SIDE_PARAM_ERROR;      }    }  } else   if (bindPWFile.isPresent()) {    dn=bindDN.getValue();    pw=bindPWFile.getValue();  } else {    dn=null;    pw=null;  }  try {    int timeout=connectTimeout.getIntValue();    connection.connectToHost(dn,pw,nextMessageID,timeout);  } catch (  LDAPConnectionException lce) {    printWrappedText(err,ERR_LDAPPWMOD_CANNOT_CONNECT.get(lce.getMessage()));    return lce.getResultCode();  }catch (  ArgumentException e) {    e.printStackTrace();    throw new IllegalStateException("Unexpected error: " + e,e);  }  LDAPReader reader=connection.getLDAPReader();  LDAPWriter writer=connection.getLDAPWriter();  ByteStringBuilder builder=new ByteStringBuilder();  ASN1Writer asn1Writer=ASN1.getWriter(builder);  try {    asn1Writer.writeStartSequence();    if (authzID.isPresent()) {      asn1Writer.writeOctetString(TYPE_PASSWORD_MODIFY_USER_ID,authzID.getValue());    } else     if (provideDNForAuthzID.isPresent()) {      asn1Writer.writeOctetString(TYPE_PASSWORD_MODIFY_USER_ID,"dn:" + dn);    }    if (currentPW.isPresent()) {      asn1Writer.writeOctetString(TYPE_PASSWORD_MODIFY_OLD_PASSWORD,currentPW.getValue());    } else     if (currentPWFile.isPresent()) {      asn1Writer.writeOctetString(TYPE_PASSWORD_MODIFY_OLD_PASSWORD,currentPWFile.getValue());    } else     if (provideDNForAuthzID.isPresent()) {      asn1Writer.writeOctetString(TYPE_PASSWORD_MODIFY_OLD_PASSWORD,pw);    }    if (newPW.isPresent()) {      asn1Writer.writeOctetString(TYPE_PASSWORD_MODIFY_NEW_PASSWORD,newPW.getValue());    } else     if (newPWFile.isPresent()) {      asn1Writer.writeOctetString(TYPE_PASSWORD_MODIFY_NEW_PASSWORD,newPWFile.getValue());    }    asn1Writer.writeEndSequence();  } catch (  Exception e) {    err.println(e);  }  ExtendedRequestProtocolOp extendedRequest=new ExtendedRequestProtocolOp(OID_PASSWORD_MODIFY_REQUEST,builder.toByteString());  LDAPMessage requestMessage=new LDAPMessage(nextMessageID.getAndIncrement(),extendedRequest,controls);  try {    writer.writeMessage(requestMessage);  } catch (  Exception e) {    printWrappedText(err,ERR_LDAPPWMOD_CANNOT_SEND_PWMOD_REQUEST.get(e));    unbind(nextMessageID,writer);    close(reader,writer);    return 1;  }  LDAPMessage responseMessage=null;  try {    responseMessage=reader.readMessage();  } catch (  Exception e) {    printWrappedText(err,ERR_LDAPPWMOD_CANNOT_READ_PWMOD_RESPONSE.get(e));    unbind(nextMessageID,writer);    close(reader,writer);    return 1;  }  ExtendedResponseProtocolOp extendedResponse=responseMessage.getExtendedResponseProtocolOp();  int resultCode=extendedResponse.getResultCode();  if (resultCode != LDAPResultCode.SUCCESS) {    printWrappedText(err,ERR_LDAPPWMOD_FAILED.get(resultCode));    LocalizableMessage errorMessage=extendedResponse.getErrorMessage();    if (errorMessage != null && errorMessage.length() > 0) {      printWrappedText(err,ERR_LDAPPWMOD_FAILURE_ERROR_MESSAGE.get(errorMessage));    }    DN matchedDN=extendedResponse.getMatchedDN();    if (matchedDN != null) {      printWrappedText(err,ERR_LDAPPWMOD_FAILURE_MATCHED_DN.get(matchedDN));    }    unbind(nextMessageID,writer);    close(reader,writer);    return resultCode;  } else {    printWrappedText(out,INFO_LDAPPWMOD_SUCCESSFUL.get());    LocalizableMessage additionalInfo=extendedResponse.getErrorMessage();    if (additionalInfo != null && additionalInfo.length() > 0) {      printWrappedText(out,INFO_LDAPPWMOD_ADDITIONAL_INFO.get(additionalInfo));    }  }  for (  Control c : responseMessage.getControls()) {    if (c.getOID().equals(OID_PASSWORD_POLICY_CONTROL)) {      try {        PasswordPolicyResponseControl pwPolicyControl=PasswordPolicyResponseControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());        PasswordPolicyWarningType pwPolicyWarningType=pwPolicyControl.getWarningType();        if (pwPolicyWarningType != null) {          printWrappedText(out,INFO_LDAPPWMOD_PWPOLICY_WARNING.get(pwPolicyWarningType,pwPolicyControl.getWarningValue()));        }        PasswordPolicyErrorType pwPolicyErrorType=pwPolicyControl.getErrorType();        if (pwPolicyErrorType != null) {          printWrappedText(out,INFO_LDAPPWMOD_PWPOLICY_ERROR.get(pwPolicyErrorType));        }      } catch (      Exception e) {        printWrappedText(err,ERR_LDAPPWMOD_CANNOT_DECODE_PWPOLICY_CONTROL.get(e));      }    }  }  ByteString responseValue=extendedResponse.getValue();  if (responseValue != null) {    try {      ASN1Reader asn1Reader=ASN1.getReader(responseValue);      asn1Reader.readStartSequence();      while (asn1Reader.hasNextElement()) {        if (asn1Reader.peekType() == TYPE_PASSWORD_MODIFY_GENERATED_PASSWORD) {          printWrappedText(out,INFO_LDAPPWMOD_GENERATED_PASSWORD.get(asn1Reader.readOctetStringAsString()));        } else {          printWrappedText(err,ERR_LDAPPWMOD_UNRECOGNIZED_VALUE_TYPE.get(asn1Reader.readOctetStringAsString()));        }      }      asn1Reader.readEndSequence();    } catch (    Exception e) {      printWrappedText(err,ERR_LDAPPWMOD_COULD_NOT_DECODE_RESPONSE_VALUE.get(e));      unbind(nextMessageID,writer);      close(reader,writer);      return 1;    }  }  unbind(nextMessageID,writer);  close(reader,writer);  return 0;}  }
class C{  public BasicAttributes(){}  }
class C{  protected ReplyToParser(Lexer lexer){  super(lexer);}  }
class C{  public void removeResource(String resourceName){  resourceName=ObjectName.unquote(resourceName);  NamingResourcesImpl nresources=(NamingResourcesImpl)this.resource;  if (nresources == null) {    return;  }  ContextResource resource=nresources.findResource(resourceName);  if (resource == null) {    throw new IllegalArgumentException("Invalid resource name '" + resourceName + "'");  }  nresources.removeResource(resourceName);}  }
class C{  public LoginServiceAttribute(byte[] octets){  super(octets);  service=OctetUtils.toIntVal(octets);}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  @Override public boolean representsSameNode(BrowserNodeInfo node){  return node != null && node.getNode() == node;}  }
class C{  public void paintText(SynthContext ss,Graphics g,String text,Icon icon,int hAlign,int vAlign,int hTextPosition,int vTextPosition,int iconTextGap,int mnemonicIndex,int textOffset){  if ((icon == null) && (text == null)) {    return;  }  JComponent c=ss.getComponent();  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g);  Insets insets=SynthLookAndFeel.getPaintingInsets(ss,paintInsets);  paintViewR.x=insets.left;  paintViewR.y=insets.top;  paintViewR.width=c.getWidth() - (insets.left + insets.right);  paintViewR.height=c.getHeight() - (insets.top + insets.bottom);  paintIconR.x=paintIconR.y=paintIconR.width=paintIconR.height=0;  paintTextR.x=paintTextR.y=paintTextR.width=paintTextR.height=0;  String clippedText=layoutText(ss,fm,text,icon,hAlign,vAlign,hTextPosition,vTextPosition,paintViewR,paintIconR,paintTextR,iconTextGap);  if (icon != null) {    Color color=g.getColor();    if (ss.getStyle().getBoolean(ss,"TableHeader.alignSorterArrow",false) && "TableHeader.renderer".equals(c.getName())) {      paintIconR.x=paintViewR.width - paintIconR.width;    } else {      paintIconR.x+=textOffset;    }    paintIconR.y+=textOffset;    SynthIcon.paintIcon(icon,ss,g,paintIconR.x,paintIconR.y,paintIconR.width,paintIconR.height);    g.setColor(color);  }  if (text != null) {    View v=(View)c.getClientProperty(BasicHTML.propertyKey);    if (v != null) {      v.paint(g,paintTextR);    } else {      paintTextR.x+=textOffset;      paintTextR.y+=textOffset;      paintText(ss,g,clippedText,paintTextR,mnemonicIndex);    }  }}  }
class C{  public void writeLog(String msgId,String msg,String userDN){  String[] obj={userDN};  logger.doLog(MessageFormat.format(getLocalizedString(msgId),(Object[])obj) + " " + msg);}  }
class C{  public NodeNameFilter(String filter){  if ((filter != null) && (filter.length() != 0) && !filter.equals("*")) {    int idx=filter.indexOf('*');    while (idx != -1) {      filter=filter.substring(0,idx) + ".*" + filter.substring(idx + 1);      idx=filter.indexOf('*',idx + 2);    }    pattern=Pattern.compile(filter.toLowerCase());  }}  }
class C{  public MaskFormatter(){  setAllowsInvalid(false);  containsLiteralChars=true;  maskChars=EmptyMaskChars;  placeholder=' ';}  }
class C{  public static String urlDecode(String text){  if (StringUtils.isEmpty(text)) {    return text;  }  try {    if (text.contains("%8")) {      return URLDecoder.decode(text,"UTF-8");    }    return URLDecoder.decode(text,"ascii");  } catch (  Exception ex) {    LOG.warn("Error decoding " + text,ex);  }  return text;}  }
class C{  public static Files newInstance(int service){  Files fragment=new Files();  Bundle args=new Bundle();  args.putInt(ARG_SERVICE,service);  fragment.setArguments(args);  return fragment;}  }
class C{  @SuppressWarnings("unchecked") private LockManager(final long lockTimeout,final TimeUnit lockTimeoutUnit,final int numberOfBuckets){  Reject.ifFalse(lockTimeout >= 0,"lockTimeout must be a non-negative integer");  Reject.ifNull(lockTimeoutUnit,"lockTimeoutUnit must be non-null");  Reject.ifFalse(numberOfBuckets > 0,"numberOfBuckets must be a positive integer");  this.lockTimeout=lockTimeout;  this.lockTimeoutUnits=lockTimeoutUnit;  this.numberOfBuckets=getNumberOfBuckets(numberOfBuckets);  this.lockTable=new LinkedList[this.numberOfBuckets];  for (int i=0; i < this.numberOfBuckets; i++) {    this.lockTable[i]=new LinkedList<>();  }}  }
class C{  public void characters(final char chars[],final int start,final int length) throws org.xml.sax.SAXException {  if (length == 0 || (m_inEntityRef && !m_expandDTDEntities))   return;  m_docIsEmpty=false;  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();  }  if (m_cdataStartCalled || m_elemContext.m_isCdataSection) {    cdata(chars,start,length);    return;  }  if (m_cdataTagOpen)   closeCDATA();  if (m_disableOutputEscapingStates.peekOrFalse() || (!m_escaping)) {    charactersRaw(chars,start,length);    if (m_tracer != null)     super.fireCharEvent(chars,start,length);    return;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  try {    int i;    int startClean;    final int end=start + length;    int lastDirtyCharProcessed=start - 1;    final Writer writer=m_writer;    boolean isAllWhitespace=true;    i=start;    while (i < end && isAllWhitespace) {      char ch1=chars[i];      if (m_charInfo.shouldMapTextChar(ch1)) {        writeOutCleanChars(chars,i,lastDirtyCharProcessed);        String outputStringForChar=m_charInfo.getOutputStringForChar(ch1);        writer.write(outputStringForChar);        isAllWhitespace=false;        lastDirtyCharProcessed=i;        i++;      } else {switch (ch1) {case CharInfo.S_SPACE:          i++;        break;case CharInfo.S_LINEFEED:      lastDirtyCharProcessed=processLineFeed(chars,i,lastDirtyCharProcessed,writer);    i++;  break;case CharInfo.S_CARRIAGERETURN:writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#13;");lastDirtyCharProcessed=i;i++;break;case CharInfo.S_HORIZONAL_TAB:i++;break;default :isAllWhitespace=false;break;}}}if (i < end || !isAllWhitespace) m_ispreserve=true;for (; i < end; i++) {char ch=chars[i];if (m_charInfo.shouldMapTextChar(ch)) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);String outputStringForChar=m_charInfo.getOutputStringForChar(ch);writer.write(outputStringForChar);lastDirtyCharProcessed=i;} else {if (ch <= 0x1F) {switch (ch) {case CharInfo.S_HORIZONAL_TAB:break;case CharInfo.S_LINEFEED:lastDirtyCharProcessed=processLineFeed(chars,i,lastDirtyCharProcessed,writer);break;case CharInfo.S_CARRIAGERETURN:writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#13;");lastDirtyCharProcessed=i;break;default :writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;break;}} else if (ch < 0x7F) {} else if (ch <= 0x9F) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;} else if (ch == CharInfo.S_LINE_SEPARATOR) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#8232;");lastDirtyCharProcessed=i;} else if (m_encodingInfo.isInEncoding(ch)) {} else {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;}}}startClean=lastDirtyCharProcessed + 1;if (i > startClean) {int lengthClean=i - startClean;m_writer.write(chars,startClean,lengthClean);}m_isprevtext=true;} catch (IOException e) {throw new SAXException(e);}if (m_tracer != null) super.fireCharEvent(chars,start,length);}  }
class C{  OneStepIteratorForward(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_axis=WalkerFactory.getAxisFromStep(compiler,firstStepPos);}  }
class C{  public int next(){  if (_currentNode != DTM.NULL) {    for (int node=(NOTPROCESSED == _currentNode) ? _firstch(makeNodeIdentity(_startNode)) : _nextsib(_currentNode); node != END; node=_nextsib(node)) {      if (m_expandedNameTable.getNamespaceID(_exptype(node)) == _nsType) {        _currentNode=node;        return returnNode(node);      }    }  }  return END;}  }
class C{  public VLVResponseControl(int targetPosition,int contentCount,int vlvResultCode){  this(false,targetPosition,contentCount,vlvResultCode,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node fcNode;  Node psNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  fcNode=employeeNode.getFirstChild();  psNode=fcNode.getPreviousSibling();  assertNull("nodeGetPreviousSiblingNullAssert1",psNode);}  }
class C{  public boolean hasMember(PersistentObject po) throws UMSException {  boolean hasTheMember=false;  Attr attr=po.getAttribute(COMPUTED_MEMBER_ATTR_NAME);  if (attr != null) {    if (attr.contains(getGuid().getDn()) || attr.contains(getGuid().getDn().toLowerCase())) {      hasTheMember=true;    }  }  return hasTheMember;}  }
class C{  public void copy(){  invokeAction("copy",TransferHandler.getCopyAction());}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public MonitoredCTSConnectionFactory(ConnectionFactory<C> connectionFactory,CTSConnectionMonitoringStore monitorStore){  this.connectionFactory=connectionFactory;  this.monitorStore=monitorStore;}  }
class C{  protected void initCipher() throws IOException {  try {    cipher.init(Cipher.DECRYPT_MODE,key,params);  } catch (  InvalidKeyException e) {    throw new IOException(e);  }catch (  InvalidAlgorithmParameterException e) {    throw new IOException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentityreferencenodetype.class,args);}  }
class C{  public static void clearServerCookie(String cookieName,HttpServletRequest request,HttpServletResponse response){  if (utilDebug.messageEnabled()) {    utilDebug.message("In clear server Cookie = " + cookieName);  }  if (cookieName != null && cookieName.length() != 0) {    Set<String> domains=getCookieDomainsForRequest(request);    if (!domains.isEmpty()) {      for (Iterator it=domains.iterator(); it.hasNext(); ) {        String domain=(String)it.next();        Cookie cookie=createCookie(cookieName,"LOGOUT",0,domain);        response.addCookie(cookie);        utilDebug.message("In clear server Cookie added cookie");      }    } else {      response.addCookie(createCookie(cookieName,"LOGOUT",0,null));      utilDebug.message("In clear server added cookie no domain");    }  }}  }
class C{  public boolean verify(PublicKey key,Provider sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  getSigningTime();  return doVerify(key,sigProvider);}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {if (signature.length() == pos) {return pos;}switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  public void quitClicked(){  Set<String> runningTasks=new HashSet<>();  for (  Task task : getInfo().getTasks()) {    if (task.getState() == Task.State.RUNNING) {      runningTasks.add(task.getTaskDescription().toString());    }  }  boolean confirmed=true;  if (!runningTasks.isEmpty()) {    String allTasks=Utilities.getStringFromCollection(runningTasks,"<br>");    LocalizableMessage title=INFO_CTRL_PANEL_CONFIRMATION_REQUIRED_SUMMARY.get();    LocalizableMessage msg=INFO_CTRL_PANEL_RUNNING_TASKS_CONFIRMATION_DETAILS.get(allTasks);    confirmed=Utilities.displayConfirmationDialog(Utilities.getParentDialog(this),title,msg);  }  if (confirmed) {    System.exit(0);  }}  }
class C{  public final void testCertificateCertificateRep(){  MyCertificate c1=new MyCertificate("TEST_TYPE",testEncoding);  MyCertificateRep rep=c1.new MyCertificateRep("TEST_TYPE",new byte[]{(byte)1,(byte)2,(byte)3});  assertTrue(Arrays.equals(new byte[]{(byte)1,(byte)2,(byte)3},rep.getData()));  assertEquals("TEST_TYPE",rep.getType());  try {    c1.new MyCertificateRep(null,null);  } catch (  Exception e) {    fail("Unexpected exeption " + e.getMessage());  }  try {    MyCertificate.MyCertificateRep rep1=c1.new MyCertificateRep("X509",TestUtils.getX509Certificate_v3());    assertEquals("X509",rep1.getType());    assertTrue(Arrays.equals(TestUtils.getX509Certificate_v3(),rep1.getData()));  } catch (  Exception e) {    fail("Unexpected exeption " + e.getMessage());  }}  }
class C{  private <T extends PasswordGeneratorCfg>PasswordGenerator<T> loadGenerator(String className,T configuration,boolean initialize) throws InitializationException {  try {    PasswordGeneratorCfgDefn definition=PasswordGeneratorCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends PasswordGenerator> generatorClass=propertyDefinition.loadClass(className,PasswordGenerator.class);    PasswordGenerator<T> generator=generatorClass.newInstance();    if (initialize) {      generator.initializePasswordGenerator(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!generator.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_PWGENERATOR_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return generator;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_PWGENERATOR_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public UMUserPasswordResetOptionsData(String question,String questionLocalizedName,String answer,int dataStatus){  this.question=question.trim();  this.questionLocalizedName=questionLocalizedName;  this.answer=answer.trim();  this.dataStatus=dataStatus;}  }
class C{  public static SlowQueryLogDecider create(SlowQueryConfiguration configuration){  return new SlowQueryLogDecider(configuration);}  }
class C{  @Nullable @Override public ActionMode onWindowStartingSupportActionMode(ActionMode.Callback callback){  return null;}  }
class C{  public XPathExpressionException(Throwable cause){  super(cause);}  }
class C{  private static Properties parseJNDIContext() throws NamingException {  NamingEnumeration<?> bindings=ic.listBindings("");  Properties properties=new Properties();  enumerateBindings(bindings,properties);  return properties;}  }
class C{  private void publishInDebugLogger(String message,Throwable t){  tracer.traceException(message,t);}  }
class C{  public void addLayer(PdfLayer layer){  PdfArray layers=getPdfObject().getAsArray(PdfName.OCGs);  if (layers == null) {    layers=new PdfArray();    getPdfObject().put(PdfName.OCGs,layers);  }  layers.add(layer.getPdfObject());  layers.setModified();}  }
class C{  private <T>void castAndAddValues(Collection<T> destination,Collection<?> source,PropertyDefinition<T> pd){  for (  Object o : source) {    destination.add(pd.castValue(o));  }}  }
class C{  public boolean afterEveryday(OmniDate compareDate){  return !beforeEveryday(compareDate);}  }
class C{  static final void computeVisibleRect(Component c,Rectangle visibleRect){  Container p=c.getParent();  Rectangle bounds=c.getBounds();  if (p == null || p instanceof Window || p instanceof Applet) {    visibleRect.setBounds(0,0,bounds.width,bounds.height);  } else {    computeVisibleRect(p,visibleRect);    visibleRect.x-=bounds.x;    visibleRect.y-=bounds.y;    SwingUtilities.computeIntersection(0,0,bounds.width,bounds.height,visibleRect);  }}  }
class C{  private static void readIndex(){  try {    readIndexMulti();  } catch (  Exception ex) {    throw new AssertionError(ex);  }  zoneInfos=new ZoneInfo[ids.length];}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){  invalidateLayout(comp.getParent());}  }
class C{  public boolean visitNumberLiteral(ExpressionOwner owner,XNumber num){  return true;}  }
class C{  Object stringToValue(String text,Format f) throws ParseException {  if (f == null) {    return text;  }  return f.parseObject(text);}  }
class C{  @Inject public UmaRouterProvider(AuditEventPublisher eventPublisher,AuditEventFactory eventFactory,OAuth2RequestFactory requestFactory){  this.eventPublisher=eventPublisher;  this.eventFactory=eventFactory;  this.requestFactory=requestFactory;}  }
class C{  Permission resolve(Permission p,java.security.cert.Certificate certs[]){  if (this.certs != null) {    if (certs == null) {      return null;    }    boolean match;    for (int i=0; i < this.certs.length; i++) {      match=false;      for (int j=0; j < certs.length; j++) {        if (this.certs[i].equals(certs[j])) {          match=true;          break;        }      }      if (!match)       return null;    }  }  try {    Class<?> pc=p.getClass();    if (name == null && actions == null) {      try {        Constructor<?> c=pc.getConstructor(PARAMS0);        return (Permission)c.newInstance(new Object[]{});      } catch (      NoSuchMethodException ne) {        try {          Constructor<?> c=pc.getConstructor(PARAMS1);          return (Permission)c.newInstance(new Object[]{name});        } catch (        NoSuchMethodException ne1) {          Constructor<?> c=pc.getConstructor(PARAMS2);          return (Permission)c.newInstance(new Object[]{name,actions});        }      }    } else {      if (name != null && actions == null) {        try {          Constructor<?> c=pc.getConstructor(PARAMS1);          return (Permission)c.newInstance(new Object[]{name});        } catch (        NoSuchMethodException ne) {          Constructor<?> c=pc.getConstructor(PARAMS2);          return (Permission)c.newInstance(new Object[]{name,actions});        }      } else {        Constructor<?> c=pc.getConstructor(PARAMS2);        return (Permission)c.newInstance(new Object[]{name,actions});      }    }  } catch (  NoSuchMethodException nsme) {    if (debug != null) {      debug.println("NoSuchMethodException:\n  could not find " + "proper constructor for " + type);      nsme.printStackTrace();    }    return null;  }catch (  Exception e) {    if (debug != null) {      debug.println("unable to instantiate " + name);      e.printStackTrace();    }    return null;  }}  }
class C{  public MockResponse(){  setBody(new byte[0]);}  }
class C{  public DeferredFileOutputStream(int threshold,String prefix,String suffix,File directory){  this(threshold,null,prefix,suffix,directory);  if (prefix == null) {    throw new IllegalArgumentException("Temporary file prefix is missing");  }}  }
class C{  public void handle(Callback[] callback) throws IOException, UnsupportedCallbackException {  AuthContext.authDebug.message("AuthLoginThread::handle()");  authContext.submittedInformation=null;synchronized (this) {    authContext.informationRequired=callback;    this.notify();  }  AuthContext.authDebug.message("AuthLoginThread::handle() sent notify to wake up sleeping threads");  while (authContext.submittedInformation == null) {    try {      AuthContext.authDebug.message("AuthLoginThread::handle() " + "waiting for Callbacks to be submitted");synchronized (this) {        if (authContext.submittedInformation == null)         this.wait();      }      AuthContext.authDebug.message("AuthLoginThread::handle() " + "woke up from waiting for Callbacks to be submitted");    } catch (    InterruptedException ie) {    }  }  authContext.loginContext.updateSharedState(authContext.submittedInformation);  callback=authContext.submittedInformation;}  }
class C{  static String doRequestResourceNormalization(String originalRequestResource,String delimiter,String wildcard){  String requestResource=originalRequestResource;  String leftPrecedence=SystemPropertiesManager.get(Constants.DELIMITER_PREF_LEFT,Boolean.FALSE.toString());  if (Boolean.parseBoolean(leftPrecedence)) {    if (requestResource.endsWith(delimiter)) {      requestResource=requestResource + DUMMY_URI;    } else     if (requestResource.endsWith(delimiter + wildcard)) {      requestResource=requestResource.substring(0,requestResource.length() - 1) + DUMMY_URI;    }  }  while (requestResource.endsWith(PARAM_WILDCARD)) {    int len=requestResource.length();    requestResource=requestResource.substring(0,len - 2);  }  return requestResource;}  }
class C{  public AWTException(String msg){  super(msg);}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.AttributeElement createAttributeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.AttributeElementImpl();}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer result=new StringBuffer(300);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;  }  result.append("<").append(prefix).append("AuthorityBinding").append(uri).append(" AuthorityKind=\"");switch (_authorityKind) {case AuthorityKindType.AUTHENTICATION:    result.append("samlp:AuthenticationQuery");  break;case AuthorityKindType.ATTRIBUTE:result.append("samlp:AttributeQuery");break;case AuthorityKindType.AUTHORIZATION:result.append("samlp:AuthorizationDecisionQuery");break;}result.append("\"").append(" Location=\"").append(_location).append("\"").append(" Binding=\"").append(_binding).append("\"").append(" />\n");return (result.toString());}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  attrMap=new HashMap();  int count=s.readInt();  Attribute attr;  for (int i=0; i < count; i++) {    attr=(Attribute)s.readObject();    add(attr);  }}  }
class C{  @SuppressWarnings("UnusedDeclaration") public static String downloadString(URL url,Proxy proxy){  return downloadString(url,proxy,DEFAULT_READ_TIMEOUT,DEFAULT_SOCKET_TIMEOUT,"utf-8");}  }
class C{  public static String obfuscate(String s){  StringBuilder buf=new StringBuilder();  byte[] b=s.getBytes();  buf.append(__OBFUSCATE);  for (int i=0; i < b.length; i++) {    byte b1=b[i];    byte b2=b[s.length() - (i + 1)];    int i1=127 + b1 + b2;    int i2=127 + b1 - b2;    int i0=i1 * 256 + i2;    String x=Integer.toString(i0,36);    buf.append(new String(new char[4 - x.length()]).replace("\0","0"));    buf.append(x);  }  return buf.toString();}  }
class C{  JapaneseImperialCalendar(TimeZone zone,Locale aLocale){  super(zone,aLocale);  jdate=jcal.newCalendarDate(zone);  setTimeInMillis(System.currentTimeMillis());}  }
class C{  private void savesoapLogout(String losoapLocation,List logList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {  if (losoapLocation != null && losoapLocation.length() > 0) {    SingleLogoutServiceElement slsElemSoap=objFact.createSingleLogoutServiceElement();    slsElemSoap.setBinding(soapBinding);    slsElemSoap.setLocation(losoapLocation);    logList.add(slsElemSoap);  }}  }
class C{  public synchronized void bake(){  if (handlers != null)   return;  List<RegisteredListener> entries=new ArrayList<RegisteredListener>();  for (  Entry<EventPriority,ArrayList<RegisteredListener>> entry : handlerslots.entrySet()) {    entries.addAll(entry.getValue());  }  handlers=entries.toArray(new RegisteredListener[entries.size()]);}  }
class C{  public Vector multiply(Vector vec){  x*=vec.x;  y*=vec.y;  z*=vec.z;  return this;}  }
class C{  public static void openURL(String url) throws WebBrowserException {  try {    if (isMacOS()) {      Class<?> fileMgr=Class.forName("com.apple.eio.FileManager");      Method openURL=fileMgr.getDeclaredMethod("openURL",new Class[]{String.class});      openURL.invoke(null,url);    } else     if (isWindows()) {      String[] cmd={"rundll32","url.dll,FileProtocolHandler",url};      Runtime.getRuntime().exec(cmd);    } else {      String[] browsers={"firefox","opera","konqueror","epiphany","mozilla","netscape"};      String browser=null;      for (int count=0; count < browsers.length && browser == null; count++) {        if (Runtime.getRuntime().exec(new String[]{"which",browsers[count]}).waitFor() == 0) {          browser=browsers[count];        }      }      if (browser == null) {        throw new WebBrowserException(url,LocalizableMessage.raw("Could not find web browser"),null);      } else {        Runtime.getRuntime().exec(new String[]{browser,url});      }    }  } catch (  ClassNotFoundException cnfe) {    throw new WebBrowserException(url,LocalizableMessage.raw("Class Not Found Exception"),cnfe);  }catch (  IOException ioe) {    throw new WebBrowserException(url,LocalizableMessage.raw("IO Exception"),ioe);  }catch (  InterruptedException ie) {    throw new WebBrowserException(url,LocalizableMessage.raw("Interrupted Exception"),ie);  }catch (  NoSuchMethodException nsme) {    throw new WebBrowserException(url,LocalizableMessage.raw("No Such Method Exception"),nsme);  }catch (  InvocationTargetException ite) {    throw new WebBrowserException(url,LocalizableMessage.raw("Invocation Target Exception"),ite);  }catch (  IllegalAccessException iae) {    throw new WebBrowserException(url,LocalizableMessage.raw("Illegal Access Exception"),iae);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  propertySheetModel.clear();  forwardTo();}  }
class C{  @Update(operationDescription=@Operation) public Promise<ResourceResponse,ResourceException> update(UpdateRequest request){  Long offset=request.getContent().get("offset").asLong();  setOffset(offset);  String offsetString=valueOf(offset);  return newResourceResponse(offsetString,offsetString,json(object(field("offset",offset)))).asPromise();}  }
class C{  public void testCase10(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=1;  int bSign=1;  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public NotFoundException(){  super();}  }
class C{  public String buildJvmVendor(){  return properties.getProperty("build.jvm.vendor");}  }
class C{  public ConflictingSchemaElementException(final LocalizableMessage message){  super(message);}  }
class C{  public void paintTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  public static void main(String[] argv){  if (argv.length < 1) {    System.err.println("clihelper-output system property is not set");    System.exit(1);  }  String outfile=argv[0];  try {    Class[] classes={AccessManager.class,FederationManager.class};    StringBuffer buff=new StringBuffer();    getCommands(classes,buff);    BufferedWriter out=new BufferedWriter(new FileWriter(outfile));    out.write(buff.toString());    out.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public BERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public void addToDocument(final Document document,final Element parent){  Element element=this.toElement(document);  for (  XmlElementData xmlElementData : this.childrens) {    element.appendChild(xmlElementData.toElement(document));  }  for (  XmlAttribute attribute : this.attributes) {    element.setAttribute(attribute.getKey(),attribute.getValue());  }  if (parent != null) {    parent.appendChild(element);  } else {    document.appendChild(element);  }}  }
class C{  public String canonicalize(String res) throws PolicyException {  return res;}  }
class C{  public static Foo fetchByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  @SuppressWarnings("unchecked") private V report(int s) throws ExecutionException {  Object x=outcome;  if (s == NORMAL)   return (V)x;  if (s >= CANCELLED)   throw new CancellationException();  throw new ExecutionException((Throwable)x);}  }
class C{  public void configChanged(ConfigurationActionEvent e){  if (AuthnSvcUtils.debug.messageEnabled()) {    AuthnSvcUtils.debug.message("AuthnSvcService.configChanged");  }  setValues();}  }
class C{  void incrementInCount(){  inCount++;}  }
class C{  private void updateUserUninstallDataForConfirmUninstallPanel(QuickSetup qs) throws UserDataException {  UninstallUserData uud=getUninstallUserData();  uud.setRemoveLibrariesAndTools((Boolean)qs.getFieldValue(FieldName.REMOVE_LIBRARIES_AND_TOOLS));  uud.setRemoveDatabases((Boolean)qs.getFieldValue(FieldName.REMOVE_DATABASES));  uud.setRemoveConfigurationAndSchema((Boolean)qs.getFieldValue(FieldName.REMOVE_CONFIGURATION_AND_SCHEMA));  uud.setRemoveBackups((Boolean)qs.getFieldValue(FieldName.REMOVE_BACKUPS));  uud.setRemoveLDIFs((Boolean)qs.getFieldValue(FieldName.REMOVE_LDIFS));  uud.setRemoveLogs((Boolean)qs.getFieldValue(FieldName.REMOVE_LOGS));  uud.setUpdateRemoteReplication(false);  Set<String> dbs=new HashSet<>();  Set<?> s=(Set<?>)qs.getFieldValue(FieldName.EXTERNAL_DB_DIRECTORIES);  for (  Object v : s) {    dbs.add((String)v);  }  Set<String> logs=new HashSet<>();  s=(Set<?>)qs.getFieldValue(FieldName.EXTERNAL_LOG_FILES);  for (  Object v : s) {    logs.add((String)v);  }  uud.setExternalDbsToRemove(dbs);  uud.setExternalLogsToRemove(logs);  if (dbs.isEmpty() && logs.isEmpty() && !uud.getRemoveLibrariesAndTools()&& !uud.getRemoveDatabases()&& !uud.getRemoveConfigurationAndSchema()&& !uud.getRemoveBackups()&& !uud.getRemoveLDIFs()&& !uud.getRemoveLogs()) {    throw new UserDataException(Step.CONFIRM_UNINSTALL,INFO_NOTHING_SELECTED_TO_UNINSTALL.get());  }}  }
class C{  public synchronized static String formatDate(final java.util.Date object,String pattern){  if (pattern == null || pattern.equals("")) {    pattern=JKFormatUtil.DEFAULT_DATE_PATTERN;  }  return JKFormatUtil.getDateFormatter(pattern).format(object);}  }
class C{  private int socksGetServerPort(){  InetSocketAddress addr=(InetSocketAddress)proxy.address();  return addr.getPort();}  }
class C{  private static void insertVarInsn(InsnList instructions,boolean loading,int sort,int index){switch (sort) {case Type.ARRAY:case Type.OBJECT:    instructions.insert(new VarInsnNode(loading ? Opcodes.ALOAD : Opcodes.ASTORE,index));  break;case Type.INT:case Type.BOOLEAN:instructions.insert(new VarInsnNode(loading ? Opcodes.ILOAD : Opcodes.ISTORE,index));break;case Type.FLOAT:instructions.insert(new VarInsnNode(loading ? Opcodes.FLOAD : Opcodes.FSTORE,index));break;case Type.DOUBLE:instructions.insert(new VarInsnNode(loading ? Opcodes.DLOAD : Opcodes.DSTORE,index));break;case Type.LONG:instructions.insert(new VarInsnNode(loading ? Opcodes.LLOAD : Opcodes.LSTORE,index));break;}}  }
class C{  public TopologyMsg createTopologyMsgForRS(){  List<DSInfo> dsInfos=new ArrayList<>();  for (  DataServerHandler dsHandler : connectedDSs.values()) {    dsInfos.add(dsHandler.toDSInfo());  }  List<RSInfo> rsInfos=newArrayList(toRSInfo(localReplicationServer,generationId));  return new TopologyMsg(dsInfos,rsInfos);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void schedule(TimerTask task,long delay){  if (delay < 0)   throw new IllegalArgumentException("Negative delay.");  sched(task,System.currentTimeMillis() + delay,0);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element badElement;  doc=(Document)load("staff",true);{    boolean success=false;    try {      badElement=doc.createElement("invalid^Name");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public DirectColorModel(int bits,int rmask,int gmask,int bmask,int amask){  super(ColorSpace.getInstance(ColorSpace.CS_sRGB),bits,rmask,gmask,bmask,amask,false,amask == 0 ? Transparency.OPAQUE : Transparency.TRANSLUCENT,ColorModel.getDefaultTransferType(bits));  setFields();}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public boolean delete(){  return deleteStrategy.deleteQuietly(new File(path));}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AttributeStatementElement createAttributeStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementElementImpl();}  }
class C{  public static JsonValue newEmptyRequirements(){  return emptyJson();}  }
class C{  public KeyRep(Type type,String algorithm,String format,byte[] encoded){  if (type == null || algorithm == null || format == null || encoded == null) {    throw new NullPointerException("invalid null input(s)");  }  this.type=type;  this.algorithm=algorithm;  this.format=format.toUpperCase(Locale.ENGLISH);  this.encoded=encoded.clone();}  }
class C{  private String readLine() throws IOException {  StringBuilder sb=new StringBuilder();  int c;  while ((c=ctrlInput.read()) != '\n') {    sb.append((char)c);  }  return sb.toString();}  }
class C{  public void fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling round rect: " + new Rectangle(x,y,width,height)+ " arcWidth: "+ arcWidth+ " archHeight: "+ arcHeight);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillRoundRect(x,y,width,height,arcWidth,arcHeight);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillRoundRect(x,y,width,height,arcWidth,arcHeight);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillRoundRect(x,y,width,height,arcWidth,arcHeight);}  }
class C{  public ServerEditSessionViewBean(){  super("ServerEditSession",DEFAULT_DISPLAY_URL);}  }
class C{  public void test_initLjava_security_KeyStore$C() throws NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  KeyManagerFactory[] keyMF=createKMFac();  assertNotNull("KeyManagerFactory object were not created",keyMF);  KeyStore ksNull=null;  KeyManager[] km;  for (int i=0; i < keyMF.length; i++) {    keyMF[i].init(ksNull,new char[10]);    km=keyMF[i].getKeyManagers();    assertNotNull("Result should not be null",km);    assertTrue("Length of result KeyManager array should not be 0",(km.length > 0));  }  KeyStore ks;  try {    ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(null,null);  } catch (  KeyStoreException e) {    fail(e.toString() + "default KeyStore type is not supported");    return;  }catch (  Exception e) {    fail("Unexpected: " + e.toString());    return;  }  for (int i=0; i < keyMF.length; i++) {    try {      keyMF[i].init(ks,new char[10]);    } catch (    KeyStoreException e) {    }    km=keyMF[i].getKeyManagers();    assertNotNull("Result has not be null",km);    assertTrue("Length of result KeyManager array should not be 0",(km.length > 0));  }}  }
class C{  public JKSecurityException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  public static void clear(Context context){  try {    PendingActionContext pendingActionContext=context.asContext(PendingActionContext.class);    pendingActionContext.clear();  } catch (  IllegalArgumentException e) {    logger.debug("No PendingActionContext found");  }}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute(createQueryString("/stop").toString());}  }
class C{  public void addField(String vorbisCommentKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  TagField tagfield=createField(vorbisCommentKey,value);  addField(tagfield);}  }
class C{  public final void testClone03(){  CollectionCertStoreParameters cp1=new CollectionCertStoreParameters();  CollectionCertStoreParameters cp2=(CollectionCertStoreParameters)cp1.clone();  CollectionCertStoreParameters cp3=(CollectionCertStoreParameters)cp2.clone();  assertTrue(cp1.getCollection() == cp2.getCollection() && cp3.getCollection() == cp2.getCollection());}  }
class C{  private final int _shortUTF8Encode(char[] str,int i,int end){  int ptr=_outputTail;  final byte[] outBuf=_outputBuffer;  do {    int c=str[i];    if (c > 0x7F) {      return _shortUTF8Encode2(str,i,end,ptr);    }    outBuf[ptr++]=(byte)c;  } while (++i < end);  int codedLen=ptr - _outputTail;  _outputTail=ptr;  return codedLen;}  }
class C{  public Object clone(){  ActionDecision clone=new ActionDecision();  clone.actionName=actionName;  clone.timeToLive=timeToLive;  if (values != null) {    Iterator valuesIter=values.iterator();    clone.values=new HashSet(values.size());    while (valuesIter.hasNext()) {      clone.values.add(valuesIter.next());    }  }  if (advices != null) {    Iterator adviceIter=advices.keySet().iterator();    clone.advices=new HashMap(advices.size());    while (adviceIter.hasNext()) {      String key=(String)adviceIter.next();      clone.advices.put(key,advices.get(key));    }  }  return clone;}  }
class C{  public CMSSignedData generate(CMSProcessable content,boolean encapsulate,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  if (content instanceof CMSTypedData) {    return this.generate(((CMSTypedData)content).getContentType().getId(),content,encapsulate,sigProvider);  } else {    return this.generate(DATA,content,encapsulate,sigProvider);  }}  }
class C{  private synchronized void connectInternal(InetAddress address,int port) throws SocketException {  if (port < 0 || port > 0xFFFF) {    throw new IllegalArgumentException("connect: " + port);  }  if (address == null) {    throw new IllegalArgumentException("connect: null address");  }  checkAddress(address,"connect");  if (isClosed())   return;  SecurityManager security=System.getSecurityManager();  if (security != null) {    if (address.isMulticastAddress()) {      security.checkMulticast(address);    } else {      security.checkConnect(address.getHostAddress(),port);      security.checkAccept(address.getHostAddress(),port);    }  }  if (!isBound())   bind(new InetSocketAddress(0));  if (oldImpl || (impl instanceof AbstractPlainDatagramSocketImpl && ((AbstractPlainDatagramSocketImpl)impl).nativeConnectDisabled())) {    connectState=ST_CONNECTED_NO_IMPL;  } else {    try {      getImpl().connect(address,port);      connectState=ST_CONNECTED;      int avail=getImpl().dataAvailable();      if (avail == -1) {        throw new SocketException();      }      explicitFilter=avail > 0;      if (explicitFilter) {        bytesLeftToFilter=getReceiveBufferSize();      }    } catch (    SocketException se) {      connectState=ST_CONNECTED_NO_IMPL;    }  }  connectedAddress=address;  connectedPort=port;}  }
class C{  public void keyTyped(KeyEvent e){  getHandler().keyTyped(e);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforeinvalidnodetype.class,args);}  }
class C{  public Location multiply(double m){  x*=m;  y*=m;  z*=m;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodechildnodesappendchild.class,args);}  }
class C{  protected void paintComponent(Graphics g){  if (ui != null) {    super.paintComponent(g);  } else   if (isOpaque()) {    g.setColor(getBackground());    g.fillRect(0,0,getWidth(),getHeight());  }}  }
class C{  public RestoringInputStream(InputStream inStream){  this.inStream=inStream;}  }
class C{  public ANDCondition(Condition... conditions){  Reject.ifNull(conditions);  this.conditions=Arrays.asList(conditions);}  }
class C{  public SecurityException(){  super();}  }
class C{  private boolean acceptSequence(char... sequence){  for (int i=0; i < sequence.length; i++) {    if (data[index + i] != sequence[i])     return false;  }  return true;}  }
class C{  private void implPutAll(Map<?,?> t){  for (  Map.Entry<?,?> e : t.entrySet()) {    implPut(e.getKey(),e.getValue());  }}  }
class C{  public void actionPerformed(ActionEvent e){  ActionMap map=tabPane.getActionMap();  if (map != null) {    String actionKey;    if (e.getSource() == scrollForwardButton) {      actionKey="scrollTabsForwardAction";    } else {      actionKey="scrollTabsBackwardAction";    }    Action action=map.get(actionKey);    if (action != null && action.isEnabled()) {      action.actionPerformed(new ActionEvent(tabPane,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));    }  }}  }
class C{  protected static final String find(CharChunk name){  int pos=findClosest(name,ccCache,ccCache.length);  if ((pos < 0) || (compare(name,ccCache[pos].name) != 0)) {    return null;  } else {    return ccCache[pos].value;  }}  }
class C{  public void test_addAttributesLjava_util_MapII(){  AttributedString as=new AttributedString("test");  Map<AttributedCharacterIterator.Attribute,String> whm=new WeakHashMap<AttributedCharacterIterator.Attribute,String>();  try {    whm.put(new TestAttributedCharacterIteratorAttribute("test1"),"value1");    whm.put(new TestAttributedCharacterIteratorAttribute("test2"),"value2");    whm.put(new TestAttributedCharacterIteratorAttribute("test3"),"value3");    as.addAttributes(whm,0,3);  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    as.addAttributes(null,0,3);    fail("Expected NullPointerException was not thrown");  } catch (  NullPointerException e) {  }  try {    as.addAttributes(whm,0,0);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void schemaChanged(String serviceName,String version){  if (debug.messageEnabled()) {    debug.message("authlevel : schemaChanged " + serviceName + ", ver="+ version);  }  if (serviceName.equals(CORE_AUTH)) {    initialize();  } else {    String moduleName=moduleServiceMap.get(serviceName);    if (!listenerMap.isEmpty()) {      try {        ListenerMapEntry entry=listenerMap.remove(moduleName);        if (entry != null) {          entry.removeListeners();          entry=addServiceListener(serviceName);          if (entry != null) {            listenerMap.put(moduleName,entry);          }        }      } catch (      Exception e) {        debug.error("can't add listener for " + serviceName,e);        return;      }    }  }  updateAuthConfiguration(serviceName,"","");  updateGlobalAuthLevelMap(serviceName);}  }
class C{  private E advance(){  lastRet=nextNode;  E x=nextItem;  Node<E> pred, p;  if (nextNode == null) {    p=first();    pred=null;  } else {    pred=nextNode;    p=succ(nextNode);  }  for (; ; ) {    if (p == null) {      nextNode=null;      nextItem=null;      return x;    }    E item=p.item;    if (item != null) {      nextNode=p;      nextItem=item;      return x;    } else {      Node<E> next=succ(p);      if (pred != null && next != null)       pred.casNext(p,next);      p=next;    }  }}  }
class C{  public ACTIVITY_COMPLETED(String detailMessage,int minorCode,CompletionStatus completionStatus){  super(detailMessage,minorCode,completionStatus);}  }
class C{  public static StyledParagraph deleteChar(AttributedCharacterIterator aci,char[] chars,int deletePos,StyledParagraph oldParagraph){  deletePos-=aci.getBeginIndex();  if (oldParagraph.decorations == null && oldParagraph.fonts == null) {    oldParagraph.length-=1;    return oldParagraph;  }  if (oldParagraph.getRunLimit(deletePos) == deletePos + 1) {    if (deletePos == 0 || oldParagraph.getRunLimit(deletePos - 1) == deletePos) {      return new StyledParagraph(aci,chars);    }  }  oldParagraph.length-=1;  if (oldParagraph.decorations != null) {    deleteFrom(deletePos,oldParagraph.decorationStarts,oldParagraph.decorations.size());  }  if (oldParagraph.fonts != null) {    deleteFrom(deletePos,oldParagraph.fontStarts,oldParagraph.fonts.size());  }  return oldParagraph;}  }
class C{  public String toURI(){  CharArrayBuffer buffer=new CharArrayBuffer(32);  buffer.append(this.schemeName);  buffer.append("://");  buffer.append(this.hostname);  if (this.port != -1) {    buffer.append(':');    buffer.append(Integer.toString(this.port));  }  return buffer.toString();}  }
class C{  public void update(Token token,ResultHandler<Token,?> handler) throws CoreTokenException {  Reject.ifNull(token);  try {    taskExecutor.execute(token.getTokenId(),taskFactory.update(token,handler));  } catch (  DataLayerException e) {    throw new CoreTokenException("Error in data layer",e);  }}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  @Override public int available() throws IOException {  return end - pos;}  }
class C{  static public String encode(byte[] data){  char[] out=new char[((data.length + 2) / 3) * 4];  for (int i=0, index=0; i < data.length; i+=3, index+=4) {    boolean quad=false;    boolean trip=false;    int val=(0xFF & (int)data[i]);    val<<=8;    if ((i + 1) < data.length) {      val|=(0xFF & (int)data[i + 1]);      trip=true;    }    val<<=8;    if ((i + 2) < data.length) {      val|=(0xFF & (int)data[i + 2]);      quad=true;    }    out[index + 3]=alphabet[(quad ? (val & 0x3F) : 64)];    val>>=6;    out[index + 2]=alphabet[(trip ? (val & 0x3F) : 64)];    val>>=6;    out[index + 1]=alphabet[val & 0x3F];    val>>=6;    out[index + 0]=alphabet[val & 0x3F];  }  return new String(out);}  }
class C{  protected void handleStartTag(TagElement tag){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  String attrValue;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  attrValue=testAddr.getAttributeNS("http://www.nist.gov","domestic");  assertEquals("attrValue","Yes",attrValue);}  }
class C{  public MLetContent(URL url,Map<String,String> attributes,List<String> types,List<String> values){  this.documentURL=url;  this.attributes=Collections.unmodifiableMap(attributes);  this.types=Collections.unmodifiableList(types);  this.values=Collections.unmodifiableList(values);  String att=getParameter("codebase");  if (att != null) {    if (!att.endsWith("/")) {      att+="/";    }    try {      baseURL=new URL(documentURL,att);    } catch (    MalformedURLException e) {    }  }  if (baseURL == null) {    String file=documentURL.getFile();    int i=file.lastIndexOf('/');    if (i >= 0 && i < file.length() - 1) {      try {        baseURL=new URL(documentURL,file.substring(0,i + 1));      } catch (      MalformedURLException e) {      }    }  }  if (baseURL == null)   baseURL=documentURL;}  }
class C{  private void removeMatchingRuleUse(String definition,SchemaBuilder newSchemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  Schema currentSchema=newSchemaBuilder.toSchema();  String mruOid=SchemaUtils.parseMatchingRuleUseOID(definition);  if (!currentSchema.hasMatchingRuleUse(mruOid)) {    LocalizableMessage message=ERR_SCHEMA_MODIFY_REMOVE_NO_SUCH_MR_USE.get(mruOid);    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  newSchemaBuilder.removeMatchingRuleUse(mruOid);  addElementIfNotNull(modifiedSchemaFiles,getElementSchemaFile(currentSchema.getMatchingRuleUse(mruOid)));}  }
class C{  public void testConstrDoubleMathContext(){  double a=732546982374982347892379283571094797.287346782359284756;  int precision=21;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="732546982374982285074";  int resScale=-15;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void error(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  private void addField(TypeSpec.Builder navigatorBuilder,Element e){  String fieldName=e.getSimpleName().toString();  TypeName fieldType=TypeName.get(e.asType());  FieldSpec fieldSpec=FieldSpec.builder(fieldType,fieldName,Modifier.PRIVATE).build();  navigatorBuilder.addField(fieldSpec);}  }
class C{  public boolean isExists() throws SSOException {  return (true);}  }
class C{  @Override public final void withPageIndicator(@LayoutRes int resId){  mIndicatorRes=resId;}  }
class C{  public synchronized void newPixels(int x,int y,int w,int h){  newPixels(x,y,w,h,true);}  }
class C{  public int hashCode(){  return encryptedString.hashCode();}  }
class C{  public JobOriginatingUserName(String userName,Locale locale){  super(userName,locale);}  }
class C{  public LineBotCallbackRequestParser(@NonNull LineSignatureValidator lineSignatureValidator){  this.lineSignatureValidator=lineSignatureValidator;  this.objectMapper=buildObjectMapper();}  }
class C{  public boolean isDoubleMetaphoneEqual(String value1,String value2){  return isDoubleMetaphoneEqual(value1,value2,false);}  }
class C{  public boolean isCellEditable(EventObject anEvent){  if (anEvent instanceof MouseEvent) {    return ((MouseEvent)anEvent).getClickCount() >= clickCountToStart;  }  return true;}  }
class C{  public AuthScope(final String host,int port,final String realm){  this(host,port,realm,ANY_SCHEME);}  }
class C{  private boolean compareAndIncrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect + 1);}  }
class C{  private void readConfiguration(ComponentContext compContext){  JsonValue config=enhancedConfig.getConfigurationAsJson(compContext);  if (!config.isNull()) {    location=config.get(CONFIG_LOCATION).defaultTo(EngineLocation.embedded.name()).as(enumConstant(EngineLocation.class));    useDataSource=config.get(CONFIG_USE_DATASOURCE).defaultTo("default").asString();    JsonValue mailconfig=config.get(CONFIG_MAIL);    if (mailconfig.isNotNull()) {      mailhost=mailconfig.get(CONFIG_MAIL_HOST).defaultTo(LOCALHOST).asString();      mailport=mailconfig.get(CONFIG_MAIL_PORT).defaultTo(DEFAULT_MAIL_PORT).asInteger();      mailusername=mailconfig.get(CONFIG_MAIL_USERNAME).asString();      mailpassword=mailconfig.get(CONFIG_MAIL_PASSWORD).asString();      starttls=mailconfig.get(CONFIG_MAIL_STARTTLS).defaultTo(false).asBoolean();    }    JsonValue engineConfig=config.get(CONFIG_ENGINE);    if (!engineConfig.isNull()) {      url=config.get(new JsonPointer(CONFIG_ENGINE_URL)).asString();      username=config.get(new JsonPointer(CONFIG_ENGINE_USERNAME)).asString();      password=config.get(new JsonPointer(CONFIG_ENGINE_PASSWORD)).asString();    }    tablePrefix=config.get(CONFIG_TABLE_PREFIX).defaultTo("").asString();    tablePrefixIsSchema=config.get(CONFIG_TABLE_PREFIX_IS_SCHEMA).defaultTo(false).asBoolean();    historyLevel=config.get(CONFIG_HISTORY).asString();    workflowDir=config.get(CONFIG_WORKFLOWDIR).defaultTo("workflow").asString();  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.XACMLPDPDescriptorType createXACMLPDPDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLPDPDescriptorTypeImpl();}  }
class C{  protected byte[] wrap(byte content_type,DataStream dataStream){  byte[] fragment=dataStream.getData(MAX_DATA_LENGTH);  return wrap(content_type,fragment,0,fragment.length);}  }
class C{  public static void deregisterListeners(){  DirectoryServer.deregisterBackupTaskListener(instance);  DirectoryServer.deregisterRestoreTaskListener(instance);  DirectoryServer.deregisterExportTaskListener(instance);  DirectoryServer.deregisterImportTaskListener(instance);}  }
class C{  public static boolean isHistoricalAttribute(Attribute attr){  AttributeType attrType=attr.getAttributeDescription().getAttributeType();  return HISTORICAL_ATTRIBUTE_NAME.equals(attrType.getNameOrOID());}  }
class C{  public boolean elementAvailable(String ns,String elemName) throws javax.xml.transform.TransformerException {  boolean isAvailable=false;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (extNS != null)     isAvailable=extNS.isElementAvailable(elemName);  }  return isAvailable;}  }
class C{  public static String format(String format,Object... args){  if (args != null) {    for (int i=0; i < args.length; i++) {      if (args[i] == null) {        args[i]="null";      }    }  }  return new MessageFormat(format).format(args);}  }
class C{  public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_any",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireIssuerSerialReferenceElement createRequireIssuerSerialReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireIssuerSerialReferenceElementImpl();}  }
class C{  public boolean isAuthorized(String logName,String operation,Object credential){  SSOToken ssoToken=null;  if (credential instanceof SSOToken) {    ssoToken=(SSOToken)credential;  }  if (ssoToken == null) {    Debug.error("ISAuthorizer.isAuthorized(): SSO Token is null ");    return false;  }  try {    String tmpID=ssoToken.getPrincipal().getName();    if (Debug.messageEnabled()) {      Debug.message("ISAuthorizer.isAuthorized():logName = " + logName + ", op = "+ operation+ ", uid = "+ tmpID);    }    String thisSubConfig="LogWrite";    if (operation.equalsIgnoreCase("READ")) {      thisSubConfig="LogRead";    }    SSOTokenManager ssoMgr=SSOTokenManager.getInstance();    if (ssoMgr.isValidToken(ssoToken)) {      Map tmap=new HashMap();      Set actSet;      actSet=Collections.singleton(operation);      try {        String amRealm=ssoToken.getProperty(Constants.ORGANIZATION);        DelegationPermission dp=new DelegationPermission(amRealm,"iPlanetAMLoggingService","1.0","application",thisSubConfig,actSet,tmap);        DelegationEvaluator de=new DelegationEvaluatorImpl();        if (de.isAllowed(ssoToken,dp,null)) {          return true;        } else {          Debug.error(logName + ":ISAuthorizer.isAuthorized():log rqt to " + operation+ " by "+ tmpID+ " denied.");        }      } catch (      DelegationException dex) {        String loggedByID=ssoToken.getPrincipal().getName();        Debug.error("ISAuthorizer.isAuthorized():delegation error: " + "user: " + loggedByID + ", logName = "+ logName+ ", op = "+ operation+ ", msg = "+ dex.getMessage());      }    } else {      String loggedByID=ssoToken.getPrincipal().getName();      Debug.error("ISAuthorizer.isAuthorized(): access denied " + "for user : " + loggedByID);    }  } catch (  SSOException ssoe) {    Debug.error("ISAuthorizer.isAuthorized(): SSOException: ",ssoe);  }  return false;}  }
class C{  public static int countAll(){  return getPersistence().countAll();}  }
class C{  protected int read(byte[] buffer) throws IOException {  return mTiffStream.read(buffer);}  }
class C{  public PrintStream format(Locale l,String format,Object... args){  try {synchronized (this) {      ensureOpen();      if ((formatter == null) || (formatter.locale() != l))       formatter=new Formatter(this,l);      formatter.format(l,format,args);    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }  return this;}  }
class C{  public NSDate(byte[] bytes,final int startIndex,final int endIndex){  date=new Date(EPOCH + (long)(1000 * BinaryPropertyListParser.parseDouble(bytes,startIndex,endIndex)));}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  int length=getSortElemCount();  for (int i=0; i < length; i++) {    getSortElem(i).endCompose(sroot);  }  super.endCompose(sroot);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subConfigName=getStringOptionValue(IArgument.SUB_CONFIGURATION_NAME);  String realmName=getStringOptionValue(IArgument.REALM_NAME);  if ((realmName == null) || (realmName.length() == 0)) {    deleteSubConfigToRoot(serviceName,subConfigName);  } else {    deleteSubConfigFromRealm(realmName,serviceName,subConfigName);  }}  }
class C{  public void runSQL(String connectionString,String createTable) throws SQLException {  Connection conn=DriverManager.getConnection(connectionString);  Statement st=conn.createStatement();  System.err.println(createTable);  st.execute(createTable);  st.close();  conn.close();}  }
class C{  protected boolean scrollDown(TextView widget,Spannable buffer,int amount){  final Layout layout=widget.getLayout();  final int innerHeight=getInnerHeight(widget);  final int bottom=widget.getScrollY() + innerHeight;  int bottomLine=layout.getLineForVertical(bottom);  if (layout.getLineTop(bottomLine + 1) < bottom + 1) {    bottomLine+=1;  }  final int limit=layout.getLineCount() - 1;  if (bottomLine <= limit) {    bottomLine=Math.min(bottomLine + amount - 1,limit);    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(bottomLine + 1) - innerHeight);    return true;  }  return false;}  }
class C{  public JKXmlException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  @Override public void close(){  closed=true;}  }
class C{  public static String removeSlashFromEnd(String string){  if (string != null && !string.equals("") && string.charAt(string.length() - 1) == '/') {    return string.substring(0,string.length() - 1);  }  return string;}  }
class C{  public TestCase(Node node){  parseNode(node);}  }
class C{  protected static boolean isWhitespace(int ch,boolean isWhitespace){  return ((isWhitespace && ch == 0) || ch == 9 || ch == 10 || ch == 12 || ch == 13 || ch == 32);}  }
class C{  public AudioFileIO(){  this.modificationHandler=new ModificationHandler();  prepareReadersAndWriters();}  }
class C{  public ID3v24Tag(ByteBuffer buffer) throws TagException {  this(buffer,"");}  }
class C{  public void testPBEKeySpec3(){  char[] password=new char[]{'1','2','3','4','5'};  byte[] salt=new byte[]{1,2,3,4,5};  int iterationCount=10;  try {    PBEKeySpec pbeks=new PBEKeySpec(null,salt,iterationCount);    assertTrue("An empty char[] should be used in case of null input " + "char array.",pbeks.getPassword().length == 0);  } catch (  IllegalArgumentException e) {    fail("Unexpected IllegalArgumentException was thrown.");  }catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }  try {    new PBEKeySpec(password,null,iterationCount);    fail("A NullPointerException should be was thrown " + "in the case of null salt.");  } catch (  IllegalArgumentException e) {    fail("Unexpected IllegalArgumentException was thrown.");  }catch (  NullPointerException e) {  }  try {    new PBEKeySpec(password,new byte[0],iterationCount);    fail("An IllegalArgumentException should be thrown " + "in the case of empty salt.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,-1);    fail("An IllegalArgumentException should be thrown " + "in the case of negative iterationCount.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,0);    fail("An IllegalArgumentException should be thrown " + "in the case of zero iterationCount.");  } catch (  IllegalArgumentException e) {  }  PBEKeySpec pbeks=new PBEKeySpec(password,salt,iterationCount);  password[0]++;  assertFalse("The change of password specified in the constructor " + "should not cause the change of internal array.",password[0] == pbeks.getPassword()[0]);  salt[0]++;  assertFalse("The change of salt specified in the constructor " + " should not cause the change of internal array.",salt[0] == pbeks.getSalt()[0]);}  }
class C{  public boolean hasParameters(){  return authParams.size() != 0;}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);  if (cause != null) {    cause.printStackTrace(s);  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public boolean isDefinitelyWritable(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return true;}  }
class C{  void add(final UpdateMsg updateMsg) throws ChangelogException {  if (shutdown.get()) {    throw new ChangelogException(ERR_COULD_NOT_ADD_CHANGE_TO_SHUTTING_DOWN_REPLICA_DB.get(updateMsg.toString(),String.valueOf(baseDN),String.valueOf(serverId)));  }  log.append(Record.from(updateMsg.getCSN(),updateMsg));  final CSNLimits limits=csnLimits;  final boolean updateNew=limits.newestCSN == null || limits.newestCSN.isOlderThan(updateMsg.getCSN());  final boolean updateOld=limits.oldestCSN == null;  if (updateOld || updateNew) {    csnLimits=new CSNLimits(updateOld ? updateMsg.getCSN() : limits.oldestCSN,updateNew ? updateMsg.getCSN() : limits.newestCSN);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitDurationType createActivationLimitDurationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitDurationTypeImpl();}  }
class C{  public void clearRecordedBytes(){  buffer.clear();}  }
class C{  public StringBuffer(){}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final AncestorIterator clone=(AncestorIterator)super.clone();    clone._startNode=_startNode;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public Set<PdfName> keySet(){  return map.keySet();}  }
class C{  public boolean isInstantGrowable(){  return (getData() & 0x8) == 0x8;}  }
class C{  public boolean containsAll(Collection<?> values){  for (  Object v : values) {    if (!contains(ByteString.valueOfObject(v))) {      return false;    }  }  return true;}  }
class C{  public DataProviderEvent(final LocalizableMessage reason,final Set<Type> types){  Reject.ifNull(reason,types);  Reject.ifTrue(types.isEmpty());  this.reason=reason;  final EnumSet<Type> tmp=EnumSet.noneOf(Type.class);  tmp.addAll(types);  this.types=Collections.unmodifiableSet(tmp);}  }
class C{  @Override public void write(int b){}  }
class C{  public void testGetInstance1(){  if (this.cert == null) {    return;  }  try {    ByteArrayInputStream bais=new ByteArrayInputStream(cert.getEncoded());    X509Certificate.getInstance(bais);  } catch (  java.security.cert.CertificateEncodingException e) {    fail("Unexpected CertificateEncodingException was thrown.");  }catch (  CertificateEncodingException e) {    fail("Unexpected CertificateEncodingException was thrown.");  }catch (  CertificateException e) {  }  try {    X509Certificate.getInstance((InputStream)null);    fail("No expected CertificateException");  } catch (  CertificateException e) {  }}  }
class C{  public void handle(Exception ex){}  }
class C{  public Dimension minimumLayoutSize(Container target){  Dimension size;synchronized (this) {    checkContainer(target);    checkRequests();    size=new Dimension(xTotal.minimum,yTotal.minimum);  }  Insets insets=target.getInsets();  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);  return size;}  }
class C{  public FSAuthnRequest(){  setIssueInstant(newDate());}  }
class C{  public void handleQueryParameters(){  if (didQueryParameters) {    return;  }  didQueryParameters=true;  if (queryMB == null || queryMB.isNull()) {    return;  }  if (log.isDebugEnabled()) {    log.debug("Decoding query " + decodedQuery + " "+ queryStringEncoding);  }  try {    decodedQuery.duplicate(queryMB);  } catch (  IOException e) {    e.printStackTrace();  }  processParameters(decodedQuery,queryStringEncoding);}  }
class C{  @Override public synchronized boolean isAccessToUnderlyingConnectionAllowed(){  return this.accessToUnderlyingConnectionAllowed;}  }
class C{  public static void sendProxyAuthnRequest(AuthnRequest authnRequest,String preferredIDP,SPSSODescriptorElement spSSODescriptor,String hostedEntityId,HttpServletRequest request,HttpServletResponse response,String realm,String relayState,String originalBinding) throws SAML2Exception, IOException {  String classMethod="IDPProxyUtil.sendProxyAuthnRequest: ";  String destination=null;  SPSSODescriptorElement localDescriptor=null;  SPSSOConfigElement localDescriptorConfig=null;  IDPSSODescriptorElement idpDescriptor=null;  String binding;  try {    idpDescriptor=IDPSSOUtil.metaManager.getIDPSSODescriptor(realm,preferredIDP);    List<SingleSignOnServiceElement> ssoServiceList=idpDescriptor.getSingleSignOnService();    SingleSignOnServiceElement endpoint=getMatchingSSOEndpoint(ssoServiceList,originalBinding);    if (endpoint == null) {      SAML2Utils.debug.error(classMethod + "Single Sign-on service is not found for the proxying IDP.");      throw new SAML2Exception(SAML2Utils.bundle.getString("ssoServiceNotFoundIDPProxy"));    }    binding=endpoint.getBinding();    destination=endpoint.getLocation();    localDescriptor=IDPSSOUtil.metaManager.getSPSSODescriptor(realm,hostedEntityId);    localDescriptorConfig=IDPSSOUtil.metaManager.getSPSSOConfig(realm,hostedEntityId);  } catch (  SAML2MetaException e) {    SAML2Utils.debug.error(classMethod,e);    throw new SAML2Exception(e.getMessage());  }  AuthnRequest newAuthnRequest=getNewAuthnRequest(hostedEntityId,destination,realm,authnRequest);  SAML2ServiceProviderAdapter spAdapter=SAML2Utils.getSPAdapterClass(hostedEntityId,realm);  if (spAdapter != null) {    spAdapter.preSingleSignOnRequest(hostedEntityId,preferredIDP,realm,request,response,newAuthnRequest);  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "New Authentication request:" + newAuthnRequest.toXMLString());  }  String requestID=newAuthnRequest.getID();  IDPCache.authnRequestCache.put(requestID,newAuthnRequest);  IDPCache.proxySPAuthnReqCache.put(requestID,authnRequest);  boolean signingNeeded=idpDescriptor.isWantAuthnRequestsSigned() || localDescriptor.isAuthnRequestsSigned();  String relayStateID=null;  if (relayState != null && relayState.length() > 0) {    relayStateID=SPSSOFederate.getRelayStateID(relayState,authnRequest.getID());  }  if (binding.equals(SAML2Constants.HTTP_POST)) {    if (signingNeeded) {      String certAlias=SPSSOFederate.getParameter(SAML2MetaUtils.getAttributes(localDescriptorConfig),SAML2Constants.SIGNING_CERT_ALIAS);      SPSSOFederate.signAuthnRequest(certAlias,newAuthnRequest);    }    String authXMLString=newAuthnRequest.toXMLString(true,true);    String encodedReqMsg=SAML2Utils.encodeForPOST(authXMLString);    SAML2Utils.postToTarget(request,response,"SAMLRequest",encodedReqMsg,"RelayState",relayStateID,destination);  } else {    String authReqXMLString=newAuthnRequest.toXMLString(true,true);    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + " AuthnRequest: " + authReqXMLString);    }    String encodedXML=SAML2Utils.encodeForRedirect(authReqXMLString);    StringBuffer queryString=new StringBuffer().append(SAML2Constants.SAML_REQUEST).append(SAML2Constants.EQUAL).append(encodedXML);    if (relayStateID != null && relayStateID.length() > 0) {      queryString.append("&").append(SAML2Constants.RELAY_STATE).append("=").append(URLEncDec.encode(relayStateID));    }    StringBuffer redirectURL=new StringBuffer().append(destination).append(destination.contains("?") ? "&" : "?");    if (signingNeeded) {      String certAlias=SPSSOFederate.getParameter(SAML2MetaUtils.getAttributes(localDescriptorConfig),SAML2Constants.SIGNING_CERT_ALIAS);      String signedQueryStr=SPSSOFederate.signQueryString(queryString.toString(),certAlias);      redirectURL.append(signedQueryStr);    } else {      redirectURL.append(queryString);    }    response.sendRedirect(redirectURL.toString());  }  String[] data={destination};  LogUtil.access(Level.INFO,LogUtil.REDIRECT_TO_SP,data,null);  AuthnRequestInfo reqInfo=new AuthnRequestInfo(request,response,realm,hostedEntityId,preferredIDP,newAuthnRequest,relayState,null);synchronized (SPCache.requestHash) {    SPCache.requestHash.put(requestID,reqInfo);  }  if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {    try {      long sessionExpireTime=currentTimeMillis() / 1000 + SPCache.interval;      SAML2FailoverUtils.saveSAML2TokenWithoutSecondaryKey(requestID,new AuthnRequestInfoCopy(reqInfo),sessionExpireTime);      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + " SAVE AuthnRequestInfoCopy for requestID " + requestID);      }    } catch (    SAML2TokenRepositoryException se) {      SAML2Utils.debug.error(classMethod + " SAVE AuthnRequestInfoCopy for requestID " + requestID+ ", failed!",se);    }  }}  }
class C{  public void testCase19(){  byte aBytes[]={0};  byte bBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  int aSign=0;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public void change_user_unit(UnitMeasure p_unit){  PlaCoordTransform old_transform=coordinate_transform;  coordinate_transform=new PlaCoordTransform(old_transform.user_unit_factor,p_unit,old_transform.board_unit_factor,old_transform.board_unit);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof MBeanServerPermission))   return false;  MBeanServerPermission that=(MBeanServerPermission)obj;  return (this.mask == that.mask);}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void removeEntry(SSOToken token,String entryDN,int objectType,boolean recursive,boolean softDelete) throws AMException, SSOException {  if (debug.messageEnabled()) {    debug.message("DirectoryServicesImpl.removeEntry(): Removing: " + entryDN + " & recursive: "+ recursive);  }  if (recursive) {    removeSubtree(token,entryDN,softDelete);  } else {    removeSingleEntry(token,entryDN,objectType,softDelete);  }  if (objectType == AMObject.ORGANIZATION && ServiceManager.isCoexistenceMode() && ServiceManager.isRealmEnabled()) {    try {      OrganizationConfigManager ocm=new OrganizationConfigManager(token,entryDN);      ocm.deleteSubOrganization(null,recursive);    } catch (    SMSException smse) {      if (debug.messageEnabled()) {        debug.message("DirectoryServicesImpl::removeEntry " + "unable to delete corresponding realm: " + entryDN);      }    }  }}  }
class C{  public boolean equal(org.omg.DynamicAny.DynAny dyn_any){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("equal",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    return $self.equal(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void processTopoInfoFromRS(TopologyMsg topoMsg){  final RSInfo rsInfo=topoMsg.getRsInfos().get(0);  generationId=rsInfo.getGenerationId();  groupId=rsInfo.getGroupId();  weight=rsInfo.getWeight();synchronized (remoteDirectoryServers) {    clearRemoteLSHandlers();    for (    DSInfo dsInfo : topoMsg.getReplicaInfos().values()) {      DSInfo clonedDSInfo=dsInfo.cloneWithReplicationServerId(serverId);      LightweightServerHandler lsh=new LightweightServerHandler(this,clonedDSInfo);      lsh.startHandler();      remoteDirectoryServers.put(lsh.getServerId(),lsh);    }  }}  }
class C{  public String formatDateTime(DateTime date){  return date.withChronology(chrono).toString();}  }
class C{  String[] processName(String qName,boolean isAttribute){  String name[];  Hashtable table;  declsOK=false;  if (isAttribute) {    table=attributeNameTable;  } else {    table=elementNameTable;  }  name=(String[])table.get(qName);  if (name != null) {    return name;  }  name=new String[3];  name[2]=qName.intern();  int index=qName.indexOf(':');  if (index == -1) {    if (isAttribute) {      if (qName == "xmlns" && namespaceDeclUris)       name[0]=NSDECL; else       name[0]="";    } else     if (defaultNS == null) {      name[0]="";    } else {      name[0]=defaultNS;    }    name[1]=name[2];  } else {    String prefix=qName.substring(0,index);    String local=qName.substring(index + 1);    String uri;    if ("".equals(prefix)) {      uri=defaultNS;    } else {      uri=(String)prefixTable.get(prefix);    }    if (uri == null || (!isAttribute && "xmlns".equals(prefix))) {      return null;    }    name[0]=uri;    name[1]=local.intern();  }  table.put(name[2],name);  return name;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.TokenType createTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TokenTypeImpl();}  }
class C{  public static void addSuperiorObjectClasses(Map<ObjectClass,String> objectClasses){  HashSet<ObjectClass> additionalClasses=null;  for (  ObjectClass oc : objectClasses.keySet()) {    for (    ObjectClass superiorClass : oc.getSuperiorClasses()) {      if (!objectClasses.containsKey(superiorClass)) {        if (additionalClasses == null) {          additionalClasses=new HashSet<>();        }        additionalClasses.add(superiorClass);      }    }  }  if (additionalClasses != null) {    for (    ObjectClass oc : additionalClasses) {      addObjectClassChain(oc,objectClasses);    }  }}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new UnmodifiableRandomAccessList<E>(list);  }  return this;}  }
class C{  private static void processNewLoggerObject(Logger result){  Formatter formatter=null;  String handlerClass=LogManager.HANDLER;  String formatterClass=LogManager.FORMATTER;  String levelProp=LogConstants.LOG_PROP_PREFIX + "." + result.logName+ ".level";  String levelString=lm.getProperty(levelProp);  if ((levelString == null) || !(levelString.length() > 0)) {    levelString=SystemProperties.get(levelProp);    if ((levelString == null) || !(levelString.length() > 0)) {      levelString=lm.getProperty(LogConstants.LOGGING_LEVEL);      if ((levelString == null) || !(levelString.length() > 0)) {        levelString=LogConstants.DEFAULT_LOGGING_LEVEL_STR;      }    }  }  Level logLevel=null;  try {    logLevel=Level.parse(levelString);  } catch (  IllegalArgumentException iaex) {    logLevel=LogConstants.DEFAULT_LOGGING_LEVEL;  }  result.setLevel(logLevel);  String logStatus=lm.getProperty(LogConstants.LOG_STATUS_ATTR);  if (logStatus != null && logStatus.startsWith("INACTIVE")) {    logLevel=Level.OFF;  }  result.setLevel(logLevel);  Class clz=null;  Class[] parameters={String.class};  Object[] parameterObjects={result.logName};  Constructor cons=null;  Handler handler=null;  if (handlerClass == null) {    Debug.error("Logger:processNewLoggerObject:" + "HandlerClass not in classpath ");    return;  }  try {    clz=Class.forName(handlerClass);  } catch (  Exception e) {    Debug.error("Logger:processNewLoggerObject:" + "HandlerClass not in classpath: " + handlerClass,e);    return;  }  try {    if (clz != null) {      cons=clz.getDeclaredConstructor(parameters);    }  } catch (  Exception e) {    Debug.error("Logger:processNewLoggerObject:" + "constructor parameter mismatch ",e);    return;  }  try {    if (cons != null) {      handler=(Handler)cons.newInstance(parameterObjects);    }  } catch (  Exception e) {    Debug.error("Logger:processNewLoggerObject:" + "Could not instantiate handler: " + handlerClass,e);    return;  }  if (formatterClass == null) {    Debug.error("Logger:processNewLoggerObject:" + "formatterClass not in classpath ");    return;  }  try {    clz=Thread.currentThread().getContextClassLoader().loadClass(formatterClass);  } catch (  Exception e) {    Debug.error("Logger:processNewLoggerObject:" + "Could not load Formatter Class: " + formatterClass,e);    return;  }  try {    if (clz != null) {      formatter=(Formatter)clz.newInstance();    }  } catch (  Exception e) {    Debug.error("Logger:processNewLoggerObject:" + "Could not get Formatter instance " + formatterClass,e);    return;  }  try {    handler.setFormatter(formatter);    result.addHandler(handler);  } catch (  Exception e) {    Debug.error("Logger:processNewLoggerObject:" + "Unable to add Handler",e);    return;  }  String filterClassName=lm.getProperty(LogConstants.FILTER_CLASS_NAME);  try {    if (filterClassName != null) {      Filter filter=(Filter)Class.forName(filterClassName).newInstance();      result.setFilter(filter);    }  } catch (  Exception e) {    Debug.error("Logger:processNewLoggerObject:" + "Could not set Filter: " + filterClassName,e);  }  result.setUseParentHandlers(false);  resolveHostName=Boolean.valueOf(lm.getProperty(LogConstants.LOG_RESOLVE_HOSTNAME_ATTR)).booleanValue();}  }
class C{  public NotBoundException(){  super();}  }
class C{  protected void installListeners(){  if ((itemListener=createItemListener()) != null) {    comboBox.addItemListener(itemListener);  }  if ((propertyChangeListener=createPropertyChangeListener()) != null) {    comboBox.addPropertyChangeListener(propertyChangeListener);  }  if ((keyListener=createKeyListener()) != null) {    comboBox.addKeyListener(keyListener);  }  if ((focusListener=createFocusListener()) != null) {    comboBox.addFocusListener(focusListener);  }  if ((popupMouseListener=popup.getMouseListener()) != null) {    comboBox.addMouseListener(popupMouseListener);  }  if ((popupMouseMotionListener=popup.getMouseMotionListener()) != null) {    comboBox.addMouseMotionListener(popupMouseMotionListener);  }  if ((popupKeyListener=popup.getKeyListener()) != null) {    comboBox.addKeyListener(popupKeyListener);  }  if (comboBox.getModel() != null) {    if ((listDataListener=createListDataListener()) != null) {      comboBox.getModel().addListDataListener(listDataListener);    }  }  if ((mouseWheelListener=createMouseWheelListener()) != null) {    comboBox.addMouseWheelListener(mouseWheelListener);  }}  }
class C{  public PropertyException(String message){  super(message);}  }
class C{  public ELException(Throwable pRootCause){  super(pRootCause);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodechildnodes.class,args);}  }
class C{  public void startRow(){}  }
class C{  public Packet(PacketType packetType,short id,Authenticator auth){  this(packetType);  this.id=id;  authenticator=auth;}  }
class C{  public ISLocaleContext(String orgDN){  this();  setOrgLocale(orgDN);}  }
class C{  public Object clone(){  ResourceEnvIPCondition theClone=null;  try {    theClone=(ResourceEnvIPCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public void put(String name,String supported,String level,boolean isDefault){  SAMLv2AuthContext c=new SAMLv2AuthContext();  c.name=name;  c.supported=supported;  c.key="";  c.value="";  c.level=level;  c.isDefault=isDefault;  collections.put(name,c);}  }
class C{  private void decryptBuffer(CipherState state,ByteBuffer inByteBuffer,ByteBuffer outByteBuffer) throws IOException {  int inputSize=inByteBuffer.remaining();  try {    int n=state.getCryptoCipher().update(inByteBuffer,outByteBuffer);    if (n < inputSize) {      state.getCryptoCipher().doFinal(inByteBuffer,outByteBuffer);      state.reset(true);    }  } catch (  ShortBufferException e) {    throw new IOException(e);  }catch (  IllegalBlockSizeException e) {    throw new IOException(e);  }catch (  BadPaddingException e) {    throw new IOException(e);  }}  }
class C{  public FrameBodyTIPL(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static void addConstraint(Constraint constraint){  TestChildCfgDefn.getInstance().registerConstraint(constraint);}  }
class C{  public void next(){  index++;}  }
class C{  public void addOperand(PdfLayer layer){  getPdfObject().add(layer.getPdfObject());  getPdfObject().setModified();}  }
class C{  public static int resetLDIFExportCount(){  return ldifExportCounter.getAndSet(0);}  }
class C{  public void initialize(Map configParams) throws PolicyException {  if (configParams == null) {    throw (new PolicyException(ResBundleUtils.rbName,"ldapusers_initialization_failed",null,null));  }  String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);  if (configuredLdapServer == null) {    debug.error("LDAPUsers.initialize(): failed to get LDAP " + "server name. If you enter more than one server name " + "in the policy config service's Primary LDAP Server "+ "field, please make sure the ldap server name is preceded "+ "with the local server name.");    throw (new PolicyException(ResBundleUtils.rbName,"invalid_ldap_server_host",null,null));  }  ldapServer=configuredLdapServer.toLowerCase();  localDS=PolicyUtils.isLocalDS(ldapServer);  aliasEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.USER_ALIAS_ENABLED));  String authid=(String)configParams.get(PolicyConfig.LDAP_BIND_DN);  String authpw=(String)configParams.get(PolicyConfig.LDAP_BIND_PASSWORD);  if (authpw != null) {    authpw=PolicyUtils.decrypt(authpw);  }  baseDN=(String)configParams.get(PolicyConfig.LDAP_USERS_BASE_DN);  userSearchFilter=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_FILTER);  String scope=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_SCOPE);  if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {    userSearchScope=SearchScope.BASE_OBJECT;  } else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {    userSearchScope=SearchScope.SINGLE_LEVEL;  } else {    userSearchScope=SearchScope.WHOLE_SUBTREE;  }  userRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_USER_SEARCH_ATTRIBUTE);  int minPoolSize;  int maxPoolSize;  try {    timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));    maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));    minPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MIN_SIZE));    maxPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MAX_SIZE));  } catch (  NumberFormatException nfe) {    throw (new PolicyException(nfe));  }  boolean sslEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.LDAP_SSL_ENABLED));  Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);  if ((orgNameSet != null) && (!orgNameSet.isEmpty())) {    Iterator items=orgNameSet.iterator();    orgName=(String)items.next();  }  if (debug.messageEnabled()) {    debug.message("LDAPUsers.initialize(): getting params" + "\nldapServer: " + ldapServer + "\nauthid: "+ authid+ "\nbaseDN: "+ baseDN+ "\nuserSearchFilter: "+ userSearchFilter+ "\nuserRDNAttrName: "+ userRDNAttrName+ "\ntimeLimit: "+ timeLimit+ "\nmaxResults: "+ maxResults+ "\nminPoolSize: "+ minPoolSize+ "\nmaxPoolSize: "+ maxPoolSize+ "\nSSLEnabled: "+ sslEnabled+ "\nOrgName: "+ orgName);  }  LDAPConnectionPools.initConnectionPool(ldapServer,authid,authpw,sslEnabled,minPoolSize,maxPoolSize);  connPool=LDAPConnectionPools.getConnectionPool(ldapServer);  initialized=true;}  }
class C{  public ClasspathLicenseLocator(ClassLoader classLoader,Charset charset,String... licenseFiles){  super(charset,licenseFiles);  if (classLoader == null) {    throw new NullPointerException("ClassLoader is null");  }  this.classLoader=classLoader;}  }
class C{  public ManageNameIDResponse createManageNameIDResponse(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.MANAGE_NAMEID_RESPONSE,value);  if (obj == null) {    return new ManageNameIDResponseImpl(value);  } else {    return (ManageNameIDResponse)obj;  }}  }
class C{  public static void filterHiddenAttributes(Set attributeSchemas){  removeAttributeSchemaWithoutI18nKey(attributeSchemas);  for (Iterator iter=attributeSchemas.iterator(); iter.hasNext(); ) {    AttributeSchema as=(AttributeSchema)iter.next();    String any=as.getAny();    if (!hasAnyAttribute(any,ANY_REQUIRED) && !hasAnyAttribute(any,ANY_DISPLAY) && !hasAnyAttribute(any,ANY_ADMIN_DISPLAY)&& !hasAnyAttribute(any,ANY_DISPLAYRO)&& !hasAnyAttribute(any,ANY_ADMIN_DISPLAYRO)) {      iter.remove();    } else     if (getTagClassName(as) == null) {      iter.remove();    }  }}  }
class C{  private void init(Subject adminSubject,Subject subject,String realm,String applicationName,String normalisedResourceName,String requestedResourceName,Set<String> actions,Map<String,Set<String>> envParameters,boolean recursive) throws EntitlementException {  this.adminSubject=adminSubject;  this.subject=subject;  this.realm=realm;  this.applicationName=applicationName;  this.normalisedResourceName=normalisedResourceName;  this.requestedResourceName=requestedResourceName;  this.envParameters=envParameters;  this.actionNames=new HashSet<String>();  if (CollectionUtils.isNotEmpty(actions)) {    this.actionNames.addAll(actions);  }  Application appl=getApplication();  entitlementCombiner=appl.getEntitlementCombiner();  entitlementCombiner.init(realm,applicationName,normalisedResourceName,requestedResourceName,this.actionNames,recursive);  this.recursive=recursive;  if (PolicyConstants.DEBUG.messageEnabled()) {    Debug debug=PolicyConstants.DEBUG;    debug.message("[PolicyEval] PrivilegeEvaluator:init()");    debug.message("[PolicyEval] subject: " + getPrincipalId(subject));    debug.message("[PolicyEval] realm: " + realm);    debug.message("[PolicyEval] applicationName: " + applicationName);    debug.message("[PolicyEval] normalisedResourceName: " + this.normalisedResourceName);    debug.message("[PolicyEval] requestedResourceName: " + this.requestedResourceName);    debug.message("[PolicyEval] actions: " + actionNames);    if ((envParameters != null) && !envParameters.isEmpty()) {      debug.message("[PolicyEval] envParameters: " + envParameters.toString());    }  }}  }
class C{  @Override public String toString(){  return value != null ? String.format("Optional[%s]",value) : "Optional.empty";}  }
class C{  public int size(){  return methods.size();}  }
class C{  private static Exception extractException(Exception e){  while (e instanceof PrivilegedActionException) {    e=((PrivilegedActionException)e).getException();  }  return e;}  }
class C{  @Override public int read() throws IOException {  if (buffer == null) {    throw new IOException("Stream was closed.");  }  while (pos == end) {    if (end_reached) {      return -1;    }    owner.needAppData();  }  return buffer[pos++] & 0xFF;}  }
class C{  final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  public int[] readLabels() throws Exception {  int labels[]=new int[dataNum];  BufferedReader trUsers=new BufferedReader(new InputStreamReader(new FileInputStream(labelFile)));  String line="";  while ((line=trUsers.readLine()) != null) {    String[] strs=line.split("\t");    labels[Integer.valueOf(strs[0])]=Integer.valueOf(strs[1]);  }  trUsers.close();  return labels;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if ((len % frameSize) != 0) {    len-=(len % frameSize);    if (len == 0) {      return 0;    }  }  if (frameLength != AudioSystem.NOT_SPECIFIED) {    if (framePos >= frameLength) {      return -1;    } else {      if ((len / frameSize) > (frameLength - framePos)) {        len=(int)(frameLength - framePos) * frameSize;      }    }  }  int bytesRead=0;  int thisOff=off;  if (pushBackLen > 0 && len >= pushBackLen) {    System.arraycopy(pushBackBuffer,0,b,off,pushBackLen);    thisOff+=pushBackLen;    len-=pushBackLen;    bytesRead+=pushBackLen;    pushBackLen=0;  }  int thisBytesRead=stream.read(b,thisOff,len);  if (thisBytesRead == -1) {    return -1;  }  if (thisBytesRead > 0) {    bytesRead+=thisBytesRead;  }  if (bytesRead > 0) {    pushBackLen=bytesRead % frameSize;    if (pushBackLen > 0) {      if (pushBackBuffer == null) {        pushBackBuffer=new byte[frameSize];      }      System.arraycopy(b,off + bytesRead - pushBackLen,pushBackBuffer,0,pushBackLen);      bytesRead-=pushBackLen;    }    framePos+=bytesRead / frameSize;  }  return bytesRead;}  }
class C{  public static void addServerDefaults(String serviceName,String subConfigName,String instanceName,String instanceID,Set values,String serverConfigXML) throws UpgradeException {  String classMethod="UpgradeUtils:addServerDefaults : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "serviceName :" + serviceName);    debug.message(classMethod + "subConfigName :" + subConfigName);    debug.message(classMethod + "instanceName:" + instanceName);    debug.message(classMethod + "instanceID:" + instanceID);    debug.message(classMethod + "values:" + values);  }  try {    ServiceConfigManager scm=new ServiceConfigManager(serviceName,getSSOToken());    ServiceConfig globalSvcConfig=scm.getGlobalConfig(null);    ServiceConfig gConfig=globalSvcConfig.getSubConfig(subConfigName);    Map serverValues=new HashMap(4);    Set setServerId=new HashSet(2);    setServerId.add(instanceID);    serverValues.put(ATTR_SERVER_ID,setServerId);    Set setServerConfigXML=new HashSet(2);    String file=configDir + File.separator + SERVER_CONFIG_XML;    if (serverConfigXML == null) {      serverConfigXML=readFile(file);    }    setServerConfigXML.add(serverConfigXML);    serverValues.put(ATTR_SERVER_CONFIG,values);    serverValues.put(ATTR_SERVER_CONFIG_XML,setServerConfigXML);    if (instanceName == null) {      gConfig.addSubConfig(CONFIG_SERVER_DEFAULT,SUB_SCHEMA_SERVER,0,serverValues);    } else {      gConfig.addSubConfig(instanceName,SUB_SCHEMA_SERVER,0,serverValues);    }  } catch (  Exception e) {    debug.error(classMethod + "Error adding server instance :",e);    throw new UpgradeException(e.getMessage());  }}  }
class C{  public MaskFormatter(String mask) throws ParseException {  this();  setMask(mask);}  }
class C{  public float transformAngle(float angle){  float ta=scalingY < 0 ? -angle : angle;  return (float)(scalingX < 0 ? Math.PI - ta : ta);}  }
class C{  public SASLResponse(Element element) throws AuthnSvcException {  Element statusE=null;  Element ptE=null;  Element dataE=null;  Element roE=null;  Element credentialsE=null;  NodeList nl=element.getChildNodes();  int length=nl.getLength();  int i;  for (i=0; i < length; i++) {    Node child=nl.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)child;      String localName=childElement.getLocalName();      String namespaceURI=childElement.getNamespaceURI();      if (AuthnSvcConstants.NS_AUTHN_SVC.equals(namespaceURI) && AuthnSvcConstants.TAG_STATUS.equals(localName)) {        statusE=childElement;        break;      } else {        throw new AuthnSvcException("missingStatus");      }    }  }  String statusCodeStr=XMLUtils.getNodeAttributeValue(statusE,AuthnSvcConstants.ATTR_CODE);  QName statusCodeQN=Utils.convertStringToQName(statusCodeStr,statusE);  if (!AuthnSvcConstants.NS_AUTHN_SVC.equals(statusCodeQN.getNamespaceURI())) {    throw new AuthnSvcException("invalidStatusCodeNS");  }  statusCode=statusCodeQN.getLocalPart();  for (i=i + 1; i < length; i++) {    Node child=nl.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)child;      String localName=childElement.getLocalName();      String namespaceURI=childElement.getNamespaceURI();      if (AuthnSvcConstants.NS_AUTHN_SVC.equals(namespaceURI)) {        if (AuthnSvcConstants.TAG_STATUS.equals(localName)) {          throw new AuthnSvcException("tooManyStatus");        } else         if (AuthnSvcConstants.TAG_PASSWORD_TRANSFORMS.equals(localName)) {          if (ptE != null) {            throw new AuthnSvcException("tooManyPT");          } else           if (dataE != null || roE != null || credentialsE != null) {            throw new AuthnSvcException("invalidSeq");          }          ptE=childElement;        } else         if (AuthnSvcConstants.TAG_DATA.equals(localName)) {          if (dataE != null) {            throw new AuthnSvcException("tooManyData");          } else           if (roE != null || credentialsE != null) {            throw new AuthnSvcException("invalidSeq");          }          dataE=childElement;        } else         if (AuthnSvcConstants.TAG_CREDENTIALS.equals(localName)) {          if (credentialsE != null) {            throw new AuthnSvcException("tooManyCr");          }          credentialsE=childElement;        } else {          throw new AuthnSvcException("invalidChild");        }      } else       if (DiscoConstants.DISCO_NS.equals(namespaceURI) && AuthnSvcConstants.TAG_RESOURCE_OFFERING.equals(localName)) {        if (roE != null) {          throw new AuthnSvcException("tooManyRO");        } else         if (credentialsE != null) {          throw new AuthnSvcException("invalidSeq");        }        roE=childElement;      } else {        throw new AuthnSvcException("invalidChild");      }    }  }  if (ptE != null) {    passwordTransforms=new PasswordTransforms(ptE);  }  data=AuthnSvcUtils.decodeDataElement(dataE);  if (roE != null) {    try {      resourceOffering=new ResourceOffering(roE);    } catch (    Exception ex) {      throw new AuthnSvcException(ex);    }  }  if (credentialsE != null) {    credentials=new ArrayList();    nl=credentialsE.getChildNodes();    for (i=0; i < nl.getLength(); i++) {      Node child=nl.item(i);      if (child.getNodeType() == Node.ELEMENT_NODE) {        credentials.add(child);      }    }  }  serverMechanism=XMLUtils.getNodeAttributeValue(element,AuthnSvcConstants.ATTR_SERVER_MECHANISM);  id=XMLUtils.getNodeAttributeValue(element,AuthnSvcConstants.ATTR_id);}  }
class C{  public NightModeHelper(Activity activity){  int currentMode=(activity.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);  mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);  init(activity,-1,mPrefs.getInt(PREF_KEY,currentMode));}  }
class C{  void commitEdit() throws ParseException {  JFormattedTextField ftf=getFormattedTextField();  if (ftf != null) {    ftf.commitEdit();  }}  }
class C{  protected void startNode(int node) throws org.xml.sax.SAXException {  XPathContext xcntxt=m_transformer.getXPathContext();  try {    if (DTM.ELEMENT_NODE == m_dtm.getNodeType(node)) {      xcntxt.pushCurrentNode(node);      if (m_startNode != node) {        super.startNode(node);      } else {        String elemName=m_dtm.getNodeName(node);        String localName=m_dtm.getLocalName(node);        String namespace=m_dtm.getNamespaceURI(node);        m_handler.startElement(namespace,localName,elemName);        boolean hasNSDecls=false;        DTM dtm=m_dtm;        for (int ns=dtm.getFirstNamespaceNode(node,true); DTM.NULL != ns; ns=dtm.getNextNamespaceNode(node,ns,true)) {          SerializerUtils.ensureNamespaceDeclDeclared(m_handler,dtm,ns);        }        for (int attr=dtm.getFirstAttribute(node); DTM.NULL != attr; attr=dtm.getNextAttribute(attr)) {          SerializerUtils.addAttribute(m_handler,attr);        }      }    } else {      xcntxt.pushCurrentNode(node);      super.startNode(node);      xcntxt.popCurrentNode();    }  } catch (  javax.xml.transform.TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  private byte[] apply(Collection<BlobStrategy> strategies,boolean perform,byte[] data) throws TokenStrategyFailedException {  if (data == null) {    return null;  }  byte[] r=Arrays.copyOf(data,data.length);  for (  BlobStrategy strategy : strategies) {    if (perform) {      r=strategy.perform(r);    } else {      r=strategy.reverse(r);    }  }  return r;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  if (getPrimaryModel() == null) {    throw new ModelControlException("Primary model is null");  }  if (choices != null) {    getPrimaryModel().setSize(choices.length);  } else {    getPrimaryModel().setSize(0);  }  super.beginDisplay(event);  resetTileIndex();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelisttraverselist.class,args);}  }
class C{  public ConnectionParameters bindPassword(String password){  bindPassword=password;  return this;}  }
class C{  public static Foo findByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  public NotificationTypeNotificationMessageTemplateElement(){}  }
class C{  private ResourceException generateNotFoundException(String tokenId){  return new NotFoundException("Token " + tokenId + " not found");}  }
class C{  private void updateFont(Font font){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  if (font == null) {    style.removeAttribute(StyleConstants.FontFamily);    style.removeAttribute(StyleConstants.FontSize);    style.removeAttribute(StyleConstants.Bold);    style.removeAttribute(StyleConstants.Italic);  } else {    StyleConstants.setFontFamily(style,font.getName());    StyleConstants.setFontSize(style,font.getSize());    StyleConstants.setBold(style,font.isBold());    StyleConstants.setItalic(style,font.isItalic());  }}  }
class C{  protected void fireIntervalRemoved(Object source,int index0,int index1){  Object[] listeners=listenerList.getListenerList();  ListDataEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ListDataListener.class) {      if (e == null) {        e=new ListDataEvent(source,ListDataEvent.INTERVAL_REMOVED,index0,index1);      }      ((ListDataListener)listeners[i + 1]).intervalRemoved(e);    }  }}  }
class C{  public int offsetRequested(){  return offs;}  }
class C{  public PrinterStateReasons(int initialCapacity){  super(initialCapacity);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.PasswordString createPasswordString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.PasswordStringImpl();}  }
class C{  private boolean hasKeyAttributes(){  Boolean b=hasKeyAttributes;  if (b == null) {synchronized (this) {      String s;      s=getAttribute("SupportedKeyFormats");      if (s != null) {        supportedFormats=s.split("\\|");      }      s=getAttribute("SupportedKeyClasses");      if (s != null) {        String[] classNames=s.split("\\|");        List<Class<?>> classList=new ArrayList<>(classNames.length);        for (        String className : classNames) {          Class<?> clazz=getKeyClass(className);          if (clazz != null) {            classList.add(clazz);          }        }        supportedClasses=classList.toArray(CLASS0);      }      boolean bool=(supportedFormats != null) || (supportedClasses != null);      b=Boolean.valueOf(bool);      hasKeyAttributes=b;    }  }  return b.booleanValue();}  }
class C{  public void autoScale(VerticalScaler scaler,float bottomOffset,List<DataSet> dataSets){  scrollInProgress=false;  computePointsWithinXRange(dataSets);  if (pointsCountWithinXRange == 0) {    return;  }  float topPoint=Float.MIN_VALUE;  float bottomPoint=Float.MAX_VALUE;  for (int i=0; i < pointsCountWithinXRange * 2; i+=2) {    float y=xRangePoints[i + 1];    if (y > topPoint) {      topPoint=y;    }    if (y < bottomPoint) {      bottomPoint=y;    }  }  float currMaxY=viewportRect.bottom;  float currMinY=viewportRect.top;  computeYAxisStops(bottomPoint,topPoint);  float topAxisY=yStops.stops[yStops.numStops - 1];  float bottomAxisY=yStops.stops[0];  float bottomOffsetFraction=bottomOffset / contentRect.height();  float newMinY=(bottomAxisY - bottomOffsetFraction * topAxisY) / (1 - bottomOffsetFraction);  float minDiff=Math.abs(currMinY - newMinY);  float maxDiff=Math.abs(currMaxY - topAxisY);  if (minDiff > 0 || maxDiff > 0) {    scaler.startScalingY(currMaxY,currMinY,topAxisY,newMinY);  }}  }
class C{  @SuppressWarnings("unchecked") public boolean equals(Object other){  if (other == this)   return true;  if (other instanceof SIPHeaderList) {    SIPHeaderList<SIPHeader> that=(SIPHeaderList<SIPHeader>)other;    if (this.hlist == that.hlist)     return true; else     if (this.hlist == null)     return that.hlist == null || that.hlist.size() == 0;    return this.hlist.equals(that.hlist);  }  return false;}  }
class C{  private static String alias(boolean user,X509Certificate x,int index){  String prefix=user ? "user:" : "system:";  X500Principal subject=x.getSubjectX500Principal();  int intHash=NativeCrypto.X509_NAME_hash_old(subject);  String strHash=IntegralToString.intToHexString(intHash,false,8);  return prefix + strHash + '.'+ index;}  }
class C{  public static boolean isWeakKey(byte[] key,int offset,int length){  for (int i=offset; i < length; i+=DES_KEY_LENGTH) {    if (DESParameters.isWeakKey(key,i)) {      return true;    }  }  return false;}  }
class C{  public static void main(String[] args) throws TestFailed, ClassNotFoundException {  testFailLoadAndGc();}  }
class C{  public PWResetSuccessViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  registerChildren();}  }
class C{  public Timestamp(long time){  super((time / 1000) * 1000);  nanos=(int)((time % 1000) * 1000000);  if (nanos < 0) {    nanos=1000000000 + nanos;    super.setTime(((time / 1000) - 1) * 1000);  }}  }
class C{  public void hide(){  hide(null);}  }
class C{  private boolean doAcquireSharedNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void layoutContainer(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Rectangle availR=scrollPane.getBounds();  availR.x=availR.y=0;  Insets insets=parent.getInsets();  availR.x=insets.left;  availR.y=insets.top;  availR.width-=insets.left + insets.right;  availR.height-=insets.top + insets.bottom;  boolean leftToRight=SwingUtilities.isLeftToRight(scrollPane);  Rectangle colHeadR=new Rectangle(0,availR.y,0,0);  if ((colHead != null) && (colHead.isVisible())) {    int colHeadHeight=Math.min(availR.height,colHead.getPreferredSize().height);    colHeadR.height=colHeadHeight;    availR.y+=colHeadHeight;    availR.height-=colHeadHeight;  }  Rectangle rowHeadR=new Rectangle(0,0,0,0);  if ((rowHead != null) && (rowHead.isVisible())) {    int rowHeadWidth=Math.min(availR.width,rowHead.getPreferredSize().width);    rowHeadR.width=rowHeadWidth;    availR.width-=rowHeadWidth;    if (leftToRight) {      rowHeadR.x=availR.x;      availR.x+=rowHeadWidth;    } else {      rowHeadR.x=availR.x + availR.width;    }  }  Border viewportBorder=scrollPane.getViewportBorder();  Insets vpbInsets;  if (viewportBorder != null) {    vpbInsets=viewportBorder.getBorderInsets(parent);    availR.x+=vpbInsets.left;    availR.y+=vpbInsets.top;    availR.width-=vpbInsets.left + vpbInsets.right;    availR.height-=vpbInsets.top + vpbInsets.bottom;  } else {    vpbInsets=new Insets(0,0,0,0);  }  Component view=(viewport != null) ? viewport.getView() : null;  Dimension viewPrefSize=(view != null) ? view.getPreferredSize() : new Dimension(0,0);  Dimension extentSize=(viewport != null) ? viewport.toViewCoordinates(availR.getSize()) : new Dimension(0,0);  boolean viewTracksViewportWidth=false;  boolean viewTracksViewportHeight=false;  boolean isEmpty=(availR.width < 0 || availR.height < 0);  Scrollable sv;  if (!isEmpty && view instanceof Scrollable) {    sv=(Scrollable)view;    viewTracksViewportWidth=sv.getScrollableTracksViewportWidth();    viewTracksViewportHeight=sv.getScrollableTracksViewportHeight();  } else {    sv=null;  }  Rectangle vsbR=new Rectangle(0,availR.y - vpbInsets.top,0,0);  boolean vsbNeeded;  if (isEmpty) {    vsbNeeded=false;  } else   if (vsbPolicy == VERTICAL_SCROLLBAR_ALWAYS) {    vsbNeeded=true;  } else   if (vsbPolicy == VERTICAL_SCROLLBAR_NEVER) {    vsbNeeded=false;  } else {    vsbNeeded=!viewTracksViewportHeight && (viewPrefSize.height > extentSize.height);  }  if ((vsb != null) && vsbNeeded) {    adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);    extentSize=viewport.toViewCoordinates(availR.getSize());  }  Rectangle hsbR=new Rectangle(availR.x - vpbInsets.left,0,0,0);  boolean hsbNeeded;  if (isEmpty) {    hsbNeeded=false;  } else   if (hsbPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {    hsbNeeded=true;  } else   if (hsbPolicy == HORIZONTAL_SCROLLBAR_NEVER) {    hsbNeeded=false;  } else {    hsbNeeded=!viewTracksViewportWidth && (viewPrefSize.width > extentSize.width);  }  if ((hsb != null) && hsbNeeded) {    adjustForHSB(true,availR,hsbR,vpbInsets);    if ((vsb != null) && !vsbNeeded && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {      extentSize=viewport.toViewCoordinates(availR.getSize());      vsbNeeded=viewPrefSize.height > extentSize.height;      if (vsbNeeded) {        adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);      }    }  }  if (viewport != null) {    viewport.setBounds(availR);    if (sv != null) {      extentSize=viewport.toViewCoordinates(availR.getSize());      boolean oldHSBNeeded=hsbNeeded;      boolean oldVSBNeeded=vsbNeeded;      viewTracksViewportWidth=sv.getScrollableTracksViewportWidth();      viewTracksViewportHeight=sv.getScrollableTracksViewportHeight();      if (vsb != null && vsbPolicy == VERTICAL_SCROLLBAR_AS_NEEDED) {        boolean newVSBNeeded=!viewTracksViewportHeight && (viewPrefSize.height > extentSize.height);        if (newVSBNeeded != vsbNeeded) {          vsbNeeded=newVSBNeeded;          adjustForVSB(vsbNeeded,availR,vsbR,vpbInsets,leftToRight);          extentSize=viewport.toViewCoordinates(availR.getSize());        }      }      if (hsb != null && hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED) {        boolean newHSBbNeeded=!viewTracksViewportWidth && (viewPrefSize.width > extentSize.width);        if (newHSBbNeeded != hsbNeeded) {          hsbNeeded=newHSBbNeeded;          adjustForHSB(hsbNeeded,availR,hsbR,vpbInsets);          if ((vsb != null) && !vsbNeeded && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {            extentSize=viewport.toViewCoordinates(availR.getSize());            vsbNeeded=viewPrefSize.height > extentSize.height;            if (vsbNeeded) {              adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);            }          }        }      }      if (oldHSBNeeded != hsbNeeded || oldVSBNeeded != vsbNeeded) {        viewport.setBounds(availR);      }    }  }  vsbR.height=availR.height + vpbInsets.top + vpbInsets.bottom;  hsbR.width=availR.width + vpbInsets.left + vpbInsets.right;  rowHeadR.height=availR.height + vpbInsets.top + vpbInsets.bottom;  rowHeadR.y=availR.y - vpbInsets.top;  colHeadR.width=availR.width + vpbInsets.left + vpbInsets.right;  colHeadR.x=availR.x - vpbInsets.left;  if (rowHead != null) {    rowHead.setBounds(rowHeadR);  }  if (colHead != null) {    colHead.setBounds(colHeadR);  }  if (vsb != null) {    if (vsbNeeded) {      if (colHead != null && UIManager.getBoolean("ScrollPane.fillUpperCorner")) {        if ((leftToRight && upperRight == null) || (!leftToRight && upperLeft == null)) {          vsbR.y=colHeadR.y;          vsbR.height+=colHeadR.height;        }      }      vsb.setVisible(true);      vsb.setBounds(vsbR);    } else {      vsb.setVisible(false);    }  }  if (hsb != null) {    if (hsbNeeded) {      if (rowHead != null && UIManager.getBoolean("ScrollPane.fillLowerCorner")) {        if ((leftToRight && lowerLeft == null) || (!leftToRight && lowerRight == null)) {          if (leftToRight) {            hsbR.x=rowHeadR.x;          }          hsbR.width+=rowHeadR.width;        }      }      hsb.setVisible(true);      hsb.setBounds(hsbR);    } else {      hsb.setVisible(false);    }  }  if (lowerLeft != null) {    lowerLeft.setBounds(leftToRight ? rowHeadR.x : vsbR.x,hsbR.y,leftToRight ? rowHeadR.width : vsbR.width,hsbR.height);  }  if (lowerRight != null) {    lowerRight.setBounds(leftToRight ? vsbR.x : rowHeadR.x,hsbR.y,leftToRight ? vsbR.width : rowHeadR.width,hsbR.height);  }  if (upperLeft != null) {    upperLeft.setBounds(leftToRight ? rowHeadR.x : vsbR.x,colHeadR.y,leftToRight ? rowHeadR.width : vsbR.width,colHeadR.height);  }  if (upperRight != null) {    upperRight.setBounds(leftToRight ? vsbR.x : rowHeadR.x,colHeadR.y,leftToRight ? vsbR.width : rowHeadR.width,colHeadR.height);  }}  }
class C{  private void createReplicationServer(String testCase) throws Exception {  SortedSet<String> replServers=new TreeSet<>();  String dir=testName + RS_ID + testCase+ "Db";  replicationServer=new ReplicationServer(new ReplServerFakeConfiguration(replServerPort,dir,0,RS_ID,0,100,replServers));}  }
class C{  public Event35Log.Builder clearEventCount(){  eventCount=null;  fieldSetFlags()[2]=false;  return this;}  }
class C{  public boolean containsValue(long val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isInteger() && num.intValue() == val)       return true;    }  }  return false;}  }
class C{  public String toString(){  return super.toString() + " hasBeenDone: " + hasBeenDone+ " alive: "+ alive;}  }
class C{  public File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException {  int startByte=(int)((MP3AudioHeader)audioHeader).getMp3StartByte();  if (startByte >= 0) {    FileInputStream fis=new FileInputStream(file);    FileChannel fc=fis.getChannel();    ByteBuffer bb=ByteBuffer.allocate(startByte);    fc.read(bb);    FileOutputStream out=new FileOutputStream(outputFile);    out.write(bb.array());    out.close();    fc.close();    fis.close();    return outputFile;  }  throw new TagNotFoundException("There is no ID3v2Tag data in this file");}  }
class C{  public void removeReferral(Referral referral){  String referralName=referrals.getReferralName(referral);  if (referralName != null) {    removeReferral(referralName);  }}  }
class C{  public DefaultTreeModel(TreeNode root){  this(root,false);}  }
class C{  public static void clearViewStates(){  JKJsfUtil.getViewMap().clear();}  }
class C{  public FilePermissionCollection(){  perms=new ArrayList<>();}  }
class C{  public boolean includesSystemIndex(){  for (  String index : rebuildList) {    if ("dn2id".equalsIgnoreCase(index) || "dn2uri".equalsIgnoreCase(index)) {      return true;    }  }  return false;}  }
class C{  private void raiseIOException(String host,int port,String protocol){  IOExceptionEvent ioError=new IOExceptionEvent(this,host,port,protocol);  sipProvider.handleEvent(ioError,null);  setState(SIPDialog.TERMINATED_STATE);}  }
class C{  public void change_side(PlaPointInt p_pole){  on_front=!on_front;  if (location != null)   location=location.mirror_vertical(p_pole);}  }
class C{  private void processPath(ManagedObjectPath<?,?> path){  AbstractManagedObjectDefinition<?,?> d=path.getManagedObjectDefinition();  for (  RelationDefinition<?,?> r : d.getRelationDefinitions()) {    if (!r.hasOption(RelationOption.HIDDEN)) {      r.accept(visitor,path);    }  }}  }
class C{  public SoundException(final String message){  super(message);}  }
class C{  public ClientAbortException(){  super();}  }
class C{  public static boolean endsWith(final String value,final String search){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return endsWith(value,search,value.length(),true);}  }
class C{  public static boolean inactive(ActivationID id) throws UnknownObjectException, ActivationException, RemoteException {  return ActivationGroup.currentGroup().inactiveObject(id);}  }
class C{  public WindowRandomAccessSource(IRandomAccessSource source,long offset){  this(source,offset,source.length() - offset);}  }
class C{  public MirroredTypesException(List<? extends TypeMirror> types){  super("Attempt to access Class objects for TypeMirrors " + (types=new ArrayList<TypeMirror>(types)).toString());  this.types=Collections.unmodifiableList(types);}  }
class C{  private static void createAMConfigProperties(String configFile,StringBuffer templateFile,String serverURL,String baseDir,String appUser,String appPassword,String wscProviderName) throws IOException {  String content=templateFile.toString();  String server_protocol=null;  String server_host=null;  String server_port=null;  String deploy_uri=null;  int indexProtocol=serverURL.indexOf("://");  if (indexProtocol != -1) {    server_protocol=serverURL.substring(0,indexProtocol);    String tempServerURL=serverURL.substring(indexProtocol + 3);    int indexHost=tempServerURL.indexOf(":");    if (indexHost != -1) {      server_host=tempServerURL.substring(0,indexHost);      tempServerURL=tempServerURL.substring(indexHost + 1);      int indexPort=tempServerURL.indexOf("/");      if (indexPort != -1) {        server_port=tempServerURL.substring(0,indexPort);        deploy_uri=tempServerURL.substring(indexPort);      } else {        System.out.println("Error : Incorrect Server URL Syntax");      }    } else {      System.out.println("Error : Incorrect Server URL Syntax");    }  } else {    System.out.println("Error : Incorrect Server URL Syntax");  }  if ((deploy_uri != null) && (deploy_uri.length() > 0)) {    if (deploy_uri.charAt(0) != '/') {      deploy_uri="/" + deploy_uri;    }    content=content.replaceAll("/@DEPLOY_URI@",deploy_uri);  }  content=content.replaceAll("@SERVER_PROTOCOL@",server_protocol);  content=content.replaceAll("@SERVER_HOST@",server_host);  content=content.replaceAll("@SERVER_PORT@",server_port);  String newBaseDir=baseDir.trim().replace("\\","/");  content=content.replaceAll("@DEBUG_DIR@",newBaseDir + "/debug");  content=content.replaceAll("@KEYSTORE_LOCATION@",newBaseDir + "/resources");  content=content.replaceAll("@APPLICATION_USER@",appUser);  content=content.replaceAll("@ENCODED_APPLICATION_PASSWORD@",Crypt.encrypt(appPassword));  if ((wscProviderName != null) && (wscProviderName.trim().length() != 0) && (!wscProviderName.equals("<@wsc.providername@>"))) {    content=content.replaceAll("com.sun.identity.wss.wsc.providername=","com.sun.identity.wss.wsc.providername=" + wscProviderName);  }  writeToFile(content,configFile);}  }
class C{  public void send(Packet response) throws RadiusProcessingException {  if (sendWasCalled) {    LOG.warning("Handler class '" + clientConfig.getAccessRequestHandlerClass().getSimpleName() + "' declared for client "+ clientConfig.getName()+ " called send more than once.");    return;  }  sendWasCalled=true;  if (response == null) {    LOG.error("Handler class '" + clientConfig.getAccessRequestHandlerClass().getSimpleName() + "' declared for client "+ clientConfig.getName()+ " attempted to send a null response. Rejecting access.");    send(new AccessReject());    return;  }  response.setIdentifier(requestId);  injectResponseAuthenticator(response);  if (clientConfig.isLogPackets()) {    logPacketContent(response,"\nPacket to " + clientConfig.getName() + ":");  }  final ByteBuffer reqBuf=ByteBuffer.wrap(response.getOctets());  try {    LOG.message("Sending response of type " + response.getType() + " to "+ clientConfig.getName());    channel.send(reqBuf,source);  } catch (  final IOException e) {    LOG.error("Unable to send response to " + clientConfig.getName() + ".",e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String substring;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  substring=child.substringData(9,10);  assertEquals("characterdataSubStringExceedsValueAssert","Martin",substring);}  }
class C{  public static boolean hasClass(MavenProject project,String... classNames){  URLClassLoader compileClassLoader=getCompileClassLoader(project);  for (  String className : classNames) {    try {      compileClassLoader.loadClass(className);      return true;    } catch (    Throwable e) {    }  }  return false;}  }
class C{  public Properties(){  this(null);}  }
class C{  public static BooleanArgument addBaseEntryArgument() throws ArgumentException {  return BooleanArgument.builder("addBaseEntry").shortIdentifier('a').description(INFO_ARGUMENT_DESCRIPTION_ADDBASE.get()).buildArgument();}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return resolvedDeserializedProfile;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnContextType createAuthnContextType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl();}  }
class C{  public AcceptHeader createAcceptHeader(String contentType,String contentSubType) throws ParseException {  if (contentType == null || contentSubType == null)   throw new NullPointerException("contentType or subtype is null ");  Accept accept=new Accept();  accept.setContentType(contentType);  accept.setContentSubType(contentSubType);  return accept;}  }
class C{  public void reportEvent(ValidatableObject source,String formattedMessage) throws AbortSerializationException {  reportEvent(source,new ValidationEventImpl(ValidationEvent.ERROR,formattedMessage,new ValidationEventLocatorImpl(source)));}  }
class C{  private boolean entryExists(ReadableTransaction txn,final DN entryDN){  EntryCache<?> entryCache=DirectoryServer.getEntryCache();  return (entryCache != null && entryCache.containsEntry(entryDN)) || dn2id.get(txn,entryDN) != null;}  }
class C{  static boolean hasPermission(final Context context,final String permission){  boolean permGranted=context.checkCallingOrSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;  if (EasyDeviceInfo.debuggable && !permGranted) {    Log.e(EasyDeviceInfo.nameOfLib,">\t" + permission);    Log.w(EasyDeviceInfo.nameOfLib,"\nPermission not granted/missing!\nMake sure you have declared the permission in your manifest file (and granted it on API 23+).\n");  }  return permGranted;}  }
class C{  @Override public void notifyAuthDataChanged(){  notifyAuthDataChanged(null);}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  protected void engineUpdate(byte b) throws SignatureException {  msgDigest.update(b);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.ReferenceTypeImpl();}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  } else   if (this == o) {    return true;  }  try {    ProfileStackFrame f=(ProfileStackFrame)o;    return className.equals(f.className) && methodName.equals(f.methodName);  } catch (  Exception e) {    logger.traceException(e);    return false;  }}  }
class C{  @Override public Foo remove(long fooId) throws NoSuchFooException {  return remove((Serializable)fooId);}  }
class C{  protected GitHubClient updateRateLimits(HttpURLConnection request){  String limit=request.getHeaderField("X-RateLimit-Limit");  if (limit != null && limit.length() > 0)   try {    requestLimit=Integer.parseInt(limit);  } catch (  NumberFormatException nfe) {    requestLimit=-1;  } else   requestLimit=-1;  String remaining=request.getHeaderField("X-RateLimit-Remaining");  if (remaining != null && remaining.length() > 0)   try {    remainingRequests=Integer.parseInt(remaining);  } catch (  NumberFormatException nfe) {    remainingRequests=-1;  } else   remainingRequests=-1;  return this;}  }
class C{  private void findFreePorts() throws Exception {  int[] ports=TestCaseUtils.findFreePorts(3);  int i=0;  rs1Port=ports[i++];  rs2Port=ports[i++];  rs3Port=ports[i++];}  }
class C{  public boolean isEqual(AttributeSet attr){  return attributes.isEqual(attr);}  }
class C{  private String extractResponseBody(TesterAjpMessage message) throws Exception {  Assert.assertEquals((byte)'A',message.buf[0]);  Assert.assertEquals((byte)'B',message.buf[1]);  message.processHeader(false);  Assert.assertEquals(0x03,message.readByte());  int len=message.readInt();  Assert.assertTrue(len > 0);  return message.readString(len);}  }
class C{  public DottedBorder(float width){  super(width);}  }
class C{  public Period negated(){  return multipliedBy(-1);}  }
class C{  protected ExifTag addTag(ExifTag tag,int ifdId){  if (tag != null && ExifTag.isValidIfd(ifdId)) {    IfdData ifdData=getOrCreateIfdData(ifdId);    return ifdData.setTag(tag);  }  return null;}  }
class C{  @Override public synchronized void markReturning(){  state=PooledObjectState.RETURNING;}  }
class C{  protected static void loadClassAnnotation(Context context,Class<?> classClass){  Resource resourceAnnotation=classClass.getAnnotation(Resource.class);  if (resourceAnnotation != null) {    addResource(context,resourceAnnotation);  }  Resources resourcesAnnotation=classClass.getAnnotation(Resources.class);  if (resourcesAnnotation != null && resourcesAnnotation.value() != null) {    for (    Resource resource : resourcesAnnotation.value()) {      addResource(context,resource);    }  }  DeclareRoles declareRolesAnnotation=classClass.getAnnotation(DeclareRoles.class);  if (declareRolesAnnotation != null && declareRolesAnnotation.value() != null) {    for (    String role : declareRolesAnnotation.value()) {      context.addSecurityRole(role);    }  }}  }
class C{  @Override public void accept(final MethodVisitor mv){  mv.visitInsn(opcode);  acceptAnnotations(mv);}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  final Segment<K,V>[] segments=this.segments;  long previousSum=0L;  int lockCount=0;  try {    for (int retries=-1; ; retries++) {      long sum=0L;      for (int j=0; j < segments.length; j++) {        Segment<K,V> segment;        if (retries == RETRIES_BEFORE_LOCK) {          segment=ensureSegment(j);          segment.lock();          lockCount++;        } else {          segment=segmentAt(segments,j);          if (segment == null)           continue;        }        HashEntry<K,V>[] tab=segment.table;        if (tab != null) {          for (int i=0; i < tab.length; i++) {            HashEntry<K,V> e;            for (e=entryAt(tab,i); e != null; e=e.next) {              V v=e.value;              if (v != null && value.equals(v))               return true;            }          }          sum+=segment.modCount;        }      }      if ((retries >= 0 && sum == previousSum) || lockCount > 0)       return false;      previousSum=sum;    }  }  finally {    for (int j=0; j < lockCount; j++)     segments[j].unlock();  }}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  flushPending();  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public void fillDefaultParamMethod(SInvokable invokable,SemanticScope scope) throws SyntaxException {  Map<SInvokable,Expression> invokePair=defaultParamInvokable.get(invokable);  SInvokable methodToInvoke=invokePair.keySet().iterator().next();  Expression arg=invokePair.get(methodToInvoke);  if (invokable instanceof SConstructorDef) {    Ins.InvokeSpecial invoke=new Ins.InvokeSpecial(scope.getThis(),methodToInvoke,LineCol.SYNTHETIC);    int count=1;    for (    SParameter p : invokable.getParameters()) {      invoke.arguments().add(new Ins.TLoad(p,count++,LineCol.SYNTHETIC));    }    List<SParameter> paramsOfLast=methodToInvoke.getParameters();    invoke.arguments().add(parseValueFromExpression(arg,paramsOfLast.get(paramsOfLast.size() - 1).type(),scope));    invokable.statements().add(invoke);  } else {    assert invokable instanceof SMethodDef;    SMethodDef methodDef=(SMethodDef)invokable;    SMethodDef lastMethod=(SMethodDef)methodToInvoke;    boolean isStatic=lastMethod.modifiers().contains(SModifier.STATIC);    Ins.Invoke invoke;    if (lastMethod.modifiers().contains(SModifier.PRIVATE)) {      invoke=new Ins.InvokeSpecial(new Ins.This(methodDef.declaringType()),lastMethod,LineCol.SYNTHETIC);    } else     if (isStatic) {      invoke=new Ins.InvokeStatic(lastMethod,LineCol.SYNTHETIC);    } else {      invoke=new Ins.InvokeVirtual(new Ins.This(methodDef.declaringType()),lastMethod,LineCol.SYNTHETIC);    }    for (int ii=0; ii < methodDef.getParameters().size(); ++ii) {      invoke.arguments().add(new Ins.TLoad(methodDef.getParameters().get(ii),ii + (isStatic ? 0 : 1),LineCol.SYNTHETIC));    }    List<SParameter> lastParams=lastMethod.getParameters();    invoke.arguments().add(parseValueFromExpression(arg,lastParams.get(lastParams.size() - 1).type(),null));    if (methodDef.getReturnType().equals(VoidType.get())) {      methodDef.statements().add(invoke);    } else {      methodDef.statements().add(new Ins.TReturn(invoke,LineCol.SYNTHETIC));    }  }}  }
class C{  public AccessibleJTreeNode(JTree t,TreePath p,Accessible ap){  tree=t;  path=p;  accessibleParent=ap;  treeModel=t.getModel();  obj=p.getLastPathComponent();  if (treeModel != null) {    isLeaf=treeModel.isLeaf(obj);  }}  }
class C{  public void writeAttrString(Writer writer,String string,String encoding) throws IOException {  final int len=string.length();  if (len > m_attrBuff.length) {    m_attrBuff=new char[len * 2 + 1];  }  string.getChars(0,len,m_attrBuff,0);  final char[] stringChars=m_attrBuff;  for (int i=0; i < len; i++) {    char ch=stringChars[i];    if (m_charInfo.shouldMapAttrChar(ch)) {      accumDefaultEscape(writer,ch,i,stringChars,len,false,true);    } else {      if (0x0 <= ch && ch <= 0x1F) {switch (ch) {case CharInfo.S_HORIZONAL_TAB:          writer.write("&#9;");        break;case CharInfo.S_LINEFEED:      writer.write("&#10;");    break;case CharInfo.S_CARRIAGERETURN:  writer.write("&#13;");break;default :writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');break;}} else if (ch < 0x7F) {writer.write(ch);} else if (ch <= 0x9F) {writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');} else if (ch == CharInfo.S_LINE_SEPARATOR) {writer.write("&#8232;");} else if (m_encodingInfo.isInEncoding(ch)) {writer.write(ch);} else {writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');}}}}  }
class C{  private synchronized void initialize(){  final Map<String,ListenerMapEntry> newMap=new HashMap<>();  registerListener(CORE_AUTH,newMap);  registerListener(AMAuthConfigUtils.SERVICE_NAME,newMap);  Iterator it=AuthD.getAuth().getAuthenticators();  if (it != null) {    while (it.hasNext()) {      String moduleName=(String)it.next();      String moduleServiceName=AuthUtils.getModuleServiceName(moduleName);      ListenerMapEntry entry=listenerMap.remove(moduleName);      if (entry != null) {        if (debug.messageEnabled()) {          debug.message("initialize, existing " + moduleName);        }        newMap.put(moduleName,entry);      } else {        try {          entry=addServiceListener(moduleServiceName);          if (entry != null) {            newMap.put(moduleName,entry);          }        } catch (        Exception e) {          if (debug.messageEnabled()) {            debug.message("authlevel, add service listener," + e.getMessage());          }        }      }      moduleServiceMap.putIfAbsent(moduleServiceName,moduleName);      updateGlobalAuthLevelMap(moduleServiceName);    }  }  if (!listenerMap.isEmpty()) {    for (    ListenerMapEntry entry : listenerMap.values()) {      entry.removeListeners();    }  }synchronized (listenerMap) {    listenerMap.clear();    listenerMap.putAll(newMap);  }}  }
class C{  public static void doAsPrivilege(final String methodName,final Servlet targetObject,final Class<?>[] targetParameterTypes,final Object[] targetArguments,Principal principal) throws Exception {  Method method=null;  Method[] methodsCache=classCache.get(Servlet.class);  if (methodsCache == null) {    method=createMethodAndCacheIt(methodsCache,Servlet.class,methodName,targetParameterTypes);  } else {    method=findMethod(methodsCache,methodName);    if (method == null) {      method=createMethodAndCacheIt(methodsCache,Servlet.class,methodName,targetParameterTypes);    }  }  execute(method,targetObject,targetArguments,principal);}  }
class C{  public static double distance(Position point1,Position point2,String units) throws TurfException {  return distance(Point.fromCoordinates(point1),Point.fromCoordinates(point2),units);}  }
class C{  public static boolean containsModifiedMessage(TlsContext tlsContext){  return (getModifiedMessagePosition(tlsContext) != -1);}  }
class C{  @Override public void firePropertyChange(String propertyName,short oldValue,short newValue){}  }
class C{  public int compareTo(File pathname){  return fs.compare(this,pathname);}  }
class C{  public void drawBytes(byte data[],int offset,int length,int x,int y){  DebugGraphicsInfo info=info();  Font font=graphics.getFont();  if (debugLog()) {    info().log(toShortString() + " Drawing bytes at: " + new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawBytes(data,offset,length,x,y);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawBytes(data,offset,length,x,y);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawBytes(data,offset,length,x,y);}  }
class C{  private ThreadGroup(){  this.name="system";  this.maxPriority=Thread.MAX_PRIORITY;  this.parent=null;}  }
class C{  public PlaPoint corner(int p_no){  int corners_count=corner_count();  if (p_no < 0) {    System.err.println(classname + "corner: p_no is < 0 adjusted to 0");    p_no=0;  } else   if (p_no >= corners_count) {    System.out.println(classname + "corner: p_no must be less than arr.length - 1");    p_no=corners_count - 1;  }  if (precalculated_corners == null) {    precalculated_corners=new PlaPoint[corners_count];  }  if (precalculated_corners[p_no] != null)   return precalculated_corners[p_no];  precalculated_corners[p_no]=plaline(p_no).intersection(plaline(p_no + 1),"should never happen");  return precalculated_corners[p_no];}  }
class C{  public static Certificate[] verifySignature(InputStream signature,InputStream signatureBlock) throws IOException, GeneralSecurityException {  BerInputStream bis=new BerInputStream(signatureBlock);  ContentInfo info=(ContentInfo)ContentInfo.ASN1.decode(bis);  SignedData signedData=info.getSignedData();  if (signedData == null) {    throw new IOException("No SignedData found");  }  Collection<org.apache.harmony.security.x509.Certificate> encCerts=signedData.getCertificates();  if (encCerts.isEmpty()) {    return null;  }  X509Certificate[] certs=new X509Certificate[encCerts.size()];  int i=0;  for (  org.apache.harmony.security.x509.Certificate encCert : encCerts) {    certs[i++]=new X509CertImpl(encCert);  }  List<SignerInfo> sigInfos=signedData.getSignerInfos();  SignerInfo sigInfo;  if (!sigInfos.isEmpty()) {    sigInfo=sigInfos.get(0);  } else {    return null;  }  X500Principal issuer=sigInfo.getIssuer();  BigInteger snum=sigInfo.getSerialNumber();  int issuerSertIndex=0;  for (i=0; i < certs.length; i++) {    if (issuer.equals(certs[i].getIssuerDN()) && snum.equals(certs[i].getSerialNumber())) {      issuerSertIndex=i;      break;    }  }  if (i == certs.length) {    return null;  }  if (certs[issuerSertIndex].hasUnsupportedCriticalExtension()) {    throw new SecurityException("Can not recognize a critical extension");  }  final String daOid=sigInfo.getDigestAlgorithm();  final String daName=sigInfo.getDigestAlgorithmName();  final String deaOid=sigInfo.getDigestEncryptionAlgorithm();  String alg=null;  Signature sig=null;  if (daOid != null && deaOid != null) {    alg=daOid + "with" + deaOid;    try {      sig=Signature.getInstance(alg);    } catch (    NoSuchAlgorithmException e) {    }    if (sig == null) {      final String deaName=sigInfo.getDigestEncryptionAlgorithmName();      alg=daName + "with" + deaName;      try {        sig=Signature.getInstance(alg);      } catch (      NoSuchAlgorithmException e) {      }    }  }  if (sig == null && daOid != null) {    alg=daOid;    try {      sig=Signature.getInstance(alg);    } catch (    NoSuchAlgorithmException e) {    }    if (sig == null && daName != null) {      alg=daName;      try {        sig=Signature.getInstance(alg);      } catch (      NoSuchAlgorithmException e) {      }    }  }  if (sig == null) {    return null;  }  sig.initVerify(certs[issuerSertIndex]);  List<AttributeTypeAndValue> atr=sigInfo.getAuthenticatedAttributes();  byte[] sfBytes=new byte[signature.available()];  signature.read(sfBytes);  if (atr == null) {    sig.update(sfBytes);  } else {    sig.update(sigInfo.getEncodedAuthenticatedAttributes());    byte[] existingDigest=null;    for (    AttributeTypeAndValue a : atr) {      if (Arrays.equals(a.getType().getOid(),MESSAGE_DIGEST_OID)) {        if (existingDigest != null) {          throw new SecurityException("Too many MessageDigest attributes");        }        Collection<?> entries=a.getValue().getValues(ASN1OctetString.getInstance());        if (entries.size() != 1) {          throw new SecurityException("Too many values for MessageDigest attribute");        }        existingDigest=(byte[])entries.iterator().next();      }    }    if (existingDigest == null) {      throw new SecurityException("Missing MessageDigest in Authenticated Attributes");    }    MessageDigest md=null;    if (daOid != null) {      md=MessageDigest.getInstance(daOid);    }    if (md == null && daName != null) {      md=MessageDigest.getInstance(daName);    }    if (md == null) {      return null;    }    byte[] computedDigest=md.digest(sfBytes);    if (!Arrays.equals(existingDigest,computedDigest)) {      throw new SecurityException("Incorrect MD");    }  }  if (!sig.verify(sigInfo.getEncryptedDigest())) {    throw new SecurityException("Incorrect signature");  }  return createChain(certs[issuerSertIndex],certs);}  }
class C{  public JTextArea(String text,int rows,int columns){  this(null,text,rows,columns);}  }
class C{  public void testDoubleValueNegNotRounded(){  byte[] a={-128,1,2,3,4,5,-128,23,1,-3,-5};  int aSign=-1;  double result=-1.5474726438794828E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public String toString(){  return getClass().getName() + "[selectedCheckbox=" + selectedCheckbox+ "]";}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"URL_COLLECT\"";  db.execSQL(sql);}  }
class C{  public ImageReadParam(){}  }
class C{  @Override public int size(){  return size;}  }
class C{  public void removeSharedOrganizationNames(Set names) throws SMSException, SSOException {}  }
class C{  @Override public Class<?> resolveClass(ObjectStreamClass classDesc) throws ClassNotFoundException, IOException {  String name=classDesc.getName();  if (allowedClassNamePattern != null) {    boolean allowed=allowedClassNamePattern.matcher(name).matches();    if (!allowed) {      boolean doLog=warnOnFailure && reportedClasses.add(name);      String msg=sm.getString("customObjectInputStream.nomatch",name,allowedClassNameFilter);      if (doLog) {        log.warn(msg);      } else       if (log.isDebugEnabled()) {        log.debug(msg);      }      throw new InvalidClassException(msg);    }  }  try {    return Class.forName(name,false,classLoader);  } catch (  ClassNotFoundException e) {    try {      return super.resolveClass(classDesc);    } catch (    ClassNotFoundException e2) {      throw e;    }  }}  }
class C{  public PluginResult.PostResponse invokePostResponseAddPlugins(PostResponseAddOperation addOperation){  PluginResult.PostResponse result=null;  for (  DirectoryServerPlugin p : postResponseAddPlugins) {    if (isInternalOperation(addOperation,p)) {      continue;    }    try {      result=p.doPostResponse(addOperation);    } catch (    Exception e) {      logException(addOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(addOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostResponse.continueOperationProcessing();  }  return result;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (getClass() != obj.getClass())   return false;  DecimalFormatSymbols other=(DecimalFormatSymbols)obj;  return (zeroDigit == other.zeroDigit && groupingSeparator == other.groupingSeparator && decimalSeparator == other.decimalSeparator && percent == other.percent && perMill == other.perMill && digit == other.digit && minusSign == other.minusSign && patternSeparator == other.patternSeparator && infinity.equals(other.infinity) && NaN.equals(other.NaN) && currencySymbol.equals(other.currencySymbol) && intlCurrencySymbol.equals(other.intlCurrencySymbol) && currency == other.currency && monetarySeparator == other.monetarySeparator && exponentialSeparator.equals(other.exponentialSeparator) && locale.equals(other.locale));}  }
class C{  public static int[] copyOf(int[] original,int newLength){  int[] copy=new int[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public static boolean isWReplyURLValid(String metaAlias,String wreply,String role){  boolean result=false;  if (metaAlias != null) {    String realm=WSFederationMetaUtils.getRealmByMetaAlias(metaAlias);    try {      String hostEntityID=WSFederationUtils.getMetaManager().getEntityByMetaAlias(metaAlias);      if (hostEntityID != null) {        validateWReplyURL(realm,hostEntityID,wreply,role);        result=true;      }    } catch (    WSFederationException e) {      if (debug.messageEnabled()) {        debug.message("WSFederationUtils.isWReplyURLValid(): wreply " + wreply + " for role "+ role+ " triggered an exception: "+ e.getMessage(),e);      }      result=false;    }  }  if (debug.messageEnabled()) {    debug.message("WSFederationUtils.isWReplyURLValid(): wreply " + wreply + " for role "+ role+ " was valid? "+ result);  }  return result;}  }
class C{  private void deleteBackend(ConnectionWrapper connWrapper,BackendDescriptor backend) throws Exception {  RootCfgClient root=connWrapper.getRootConfiguration();  root.removeBackend(backend.getBackendID());  root.commit();}  }
class C{  public int intValue(){  return intValue;}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.size=size;  this.certainty=certainty;  this.random=random;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  protected void uninstallComboBoxModelListeners(ComboBoxModel model){  if (model != null && listDataListener != null) {    model.removeListDataListener(listDataListener);  }}  }
class C{  protected void close(Connection dbConnection){  if (dbConnection == null)   return;  try {    preparedCredentials.close();  } catch (  Throwable f) {    ExceptionUtils.handleThrowable(f);  }  this.preparedCredentials=null;  try {    preparedRoles.close();  } catch (  Throwable f) {    ExceptionUtils.handleThrowable(f);  }  this.preparedRoles=null;  try {    dbConnection.close();  } catch (  SQLException e) {    containerLog.warn(sm.getString("jdbcRealm.close"),e);  } finally {    this.dbConnection=null;  }}  }
class C{  public void addSubpaths(List<? extends Subpath> subpaths){  if (subpaths.size() > 0) {    for (    Subpath subpath : subpaths) {      this.subpaths.add(new Subpath(subpath));    }    currentPoint=this.subpaths.get(subpaths.size() - 1).getLastPoint();  }}  }
class C{  public static void saveException(Context context,Throwable exception,Thread thread){  CrashConstants.loadFromContext(context);  final Date now=new Date();  final Date startDate=new Date(JecApp.getStartupTimestamp());  final StringWriter result=new StringWriter();  final PrintWriter printWriter=new PrintWriter(result);  exception.printStackTrace(printWriter);  String filename=UUID.randomUUID().toString();  CrashDetails crashDetails=new CrashDetails(filename,exception);  crashDetails.setAppPackage(CrashConstants.APP_PACKAGE);  crashDetails.setAppVersionCode(CrashConstants.APP_VERSION);  crashDetails.setAppVersionName(CrashConstants.APP_VERSION_NAME);  crashDetails.setAppStartDate(startDate);  crashDetails.setAppCrashDate(now);  crashDetails.setOsVersion(CrashConstants.ANDROID_VERSION);  crashDetails.setOsBuild(CrashConstants.ANDROID_BUILD);  crashDetails.setDeviceManufacturer(CrashConstants.PHONE_MANUFACTURER);  crashDetails.setDeviceModel(CrashConstants.PHONE_MODEL);  if (thread != null) {    crashDetails.setThreadName(thread.getName() + "-" + thread.getId());  }  if (CrashConstants.CRASH_IDENTIFIER != null) {    crashDetails.setReporterKey(CrashConstants.CRASH_IDENTIFIER);  }  crashDetails.writeCrashReport();}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static long asMatchAllSocketsSocketIdentifier(final long socketIdentifier){  return 0xFFFF0000FFFFFFFFL & socketIdentifier;}  }
class C{  public LDAPConnection connect(LDAPConnectionConsoleInteraction ui,PrintStream out,PrintStream err) throws LDAPConnectionException, SSLConnectionException, ArgumentException {  try {    ui.run();    LDAPConnectionOptions options=new LDAPConnectionOptions();    options.setVersionNumber(3);    return connect(ui.getHostName(),ui.getPortNumber(),ui.getBindDN().toString(),ui.getBindPassword(),ui.populateLDAPOptions(options),ui.getConnectTimeout(),out,err);  } catch (  OpenDsException e) {    err.println(isSSLException(e) ? ERR_TASKINFO_LDAP_EXCEPTION_SSL.get(ui.getHostName(),ui.getPortNumber()) : e.getMessageObject());    throw e;  }}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public void testDoPhase() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  DHParameterSpec dhPs=((DHPrivateKey)privKey).getParams();  SecureRandom randomNull=null;  SecureRandom random=new SecureRandom();  for (int i=0; i < kAgs.length; i++) {    try {      kAgs[i].doPhase(publKey,true);      fail("IllegalStateException expected");    } catch (    IllegalStateException e) {    }    kAgs[i].init(privKey);    try {      kAgs[i].doPhase(privKey,false);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].doPhase(privKey,true);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    kAgs[i].init(privKey,dhPs);    kAgs[i].doPhase(publKey,true);    kAgs[i].init(privKey,dhPs,random);    kAgs[i].doPhase(publKey,true);  }}  }
class C{  static DynamicMBean createMBean(UserDatabase userDatabase) throws Exception {  String mname=createManagedName(userDatabase);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    Exception e=new Exception("ManagedBean is not found with " + mname);    throw new MBeanException(e);  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  DynamicMBean mbean=managed.createMBean(userDatabase);  ObjectName oname=createObjectName(domain,userDatabase);  if (mserver.isRegistered(oname)) {    mserver.unregisterMBean(oname);  }  mserver.registerMBean(mbean,oname);  return (mbean);}  }
class C{  public boolean equals(XObject obj2){  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.equals(this);  if (null != m_obj) {    return m_obj.equals(obj2.m_obj);  } else {    return obj2.m_obj == null;  }}  }
class C{  public boolean beginContentStaticTextResultDisplay(ChildDisplayEvent event){  if ((ResultVal == null) || (ResultVal.length() == 0)) {    return false;  } else {    return true;  }}  }
class C{  void commit(){  for (  MyProperty<?> p : properties.values()) {    p.commit();  }}  }
class C{  public void rewind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("rewind",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.rewind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void removeRenderStatement(String instanceId){  if (!WXUtils.isUiThread()) {    throw new WXRuntimeException("[WXRenderManager] removeRenderStatement can only be called in main thread");  }  WXRenderStatement statement=mRegistries.remove(instanceId);  if (statement != null) {    statement.destroy();  }}  }
class C{  private Element createKeyInfo() throws SecurityTokenException {  X509Certificate cert=getX509Certificate();  Document doc=null;  try {    doc=XMLUtils.newDocument();  } catch (  Exception e) {    debug.error("createKeyInfo: ",e);    throw new SecurityTokenException(e.getMessage());  }  String keyNameTextString=null;  String base64CertString=null;  PublicKey pk=null;  try {    pk=cert.getPublicKey();    keyNameTextString=cert.getSubjectDN().getName();    base64CertString=Base64.encode(cert.getEncoded());  } catch (  Exception e) {    debug.error("createKeyInfo: ",e);    throw new SecurityTokenException(e.getMessage());  }  Element keyInfo=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,SAMLConstants.TAG_KEYINFO);  keyInfo.setAttribute("xmlns",SAMLConstants.XMLSIG_NAMESPACE_URI);  if ((keyInfoType != null) && (keyInfoType.equalsIgnoreCase("certificate"))) {    Element x509Data=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,SAMLConstants.TAG_X509DATA);    Element x509Certificate=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,SAMLConstants.TAG_X509CERTIFICATE);    Text certText=doc.createTextNode(base64CertString);    x509Certificate.appendChild(certText);    keyInfo.appendChild(x509Data).appendChild(x509Certificate);  } else {    Element keyName=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,SAMLConstants.TAG_KEYNAME);    Text keyNameText=doc.createTextNode(keyNameTextString);    Element keyvalue=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,SAMLConstants.TAG_KEYVALUE);    if (pk.getAlgorithm().equals("DSA")) {      DSAPublicKey dsakey=(DSAPublicKey)pk;      DSAParams dsaParams=dsakey.getParams();      BigInteger _p=dsaParams.getP();      BigInteger _q=dsaParams.getQ();      BigInteger _g=dsaParams.getG();      BigInteger _y=dsakey.getY();      Element DSAKeyValue=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,"DSAKeyValue");      Element p=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,"P");      Text value_p=doc.createTextNode(Base64.encode(_p.toByteArray()));      p.appendChild(value_p);      DSAKeyValue.appendChild(p);      Element q=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,"Q");      Text value_q=doc.createTextNode(Base64.encode(_q.toByteArray()));      q.appendChild(value_q);      DSAKeyValue.appendChild(q);      Element g=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,"G");      Text value_g=doc.createTextNode(Base64.encode(_g.toByteArray()));      g.appendChild(value_g);      DSAKeyValue.appendChild(g);      Element y=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,"Y");      Text value_y=doc.createTextNode(Base64.encode(_y.toByteArray()));      y.appendChild(value_y);      DSAKeyValue.appendChild(y);      keyvalue.appendChild(DSAKeyValue);    } else {      RSAPublicKey rsakey=(RSAPublicKey)pk;      BigInteger exponent=rsakey.getPublicExponent();      BigInteger modulus=rsakey.getModulus();      Element RSAKeyValue=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,"RSAKeyValue");      Element modulusNode=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,"Modulus");      Element exponentNode=doc.createElementNS(SAMLConstants.XMLSIG_NAMESPACE_URI,"Exponent");      RSAKeyValue.appendChild(modulusNode);      RSAKeyValue.appendChild(exponentNode);      Text modulusValue=doc.createTextNode(Base64.encode(modulus.toByteArray()));      modulusNode.appendChild(modulusValue);      Text exponentValue=doc.createTextNode(Base64.encode(exponent.toByteArray()));      exponentNode.appendChild(exponentValue);      keyvalue.appendChild(RSAKeyValue);    }    keyInfo.appendChild(keyName).appendChild(keyNameText);    keyInfo.appendChild(keyvalue);  }  return keyInfo;}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (!(params instanceof KeyParameter)) {    throw new IllegalArgumentException("invalid parameter passed to DESede init - " + params.getClass().getName());  }  byte[] keyMaster=((KeyParameter)params).getKey();  if (keyMaster.length != 24 && keyMaster.length != 16) {    throw new IllegalArgumentException("key size must be 16 or 24 bytes.");  }  this.forEncryption=encrypting;  byte[] key1=new byte[8];  System.arraycopy(keyMaster,0,key1,0,key1.length);  workingKey1=generateWorkingKey(encrypting,key1);  byte[] key2=new byte[8];  System.arraycopy(keyMaster,8,key2,0,key2.length);  workingKey2=generateWorkingKey(!encrypting,key2);  if (keyMaster.length == 24) {    byte[] key3=new byte[8];    System.arraycopy(keyMaster,16,key3,0,key3.length);    workingKey3=generateWorkingKey(encrypting,key3);  } else {    workingKey3=workingKey1;  }}  }
class C{  public static EntryChangeNotificationResponseControl newControl(final PersistentSearchChangeType type,final DN previousName,final long changeNumber){  return new EntryChangeNotificationResponseControl(false,type,previousName,changeNumber);}  }
class C{  public static void processSamlResponse(HttpServletRequest request,HttpServletResponse response,PrintWriter out) throws IOException {  String url=getUrl(request,response);  XUIState xuiState=InjectorHolder.getInstance(XUIState.class);  if (xuiState.isXUIEnabled()) {    response.sendRedirect(url);  } else {    out.println(getAutoSubmittingFormHtml(url));  }}  }
class C{  public void error(SourceLocator srcLctr,String msg,Object args[],Exception e) throws TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.fatalError(new TransformerException(formattedMsg,srcLctr)); else   throw new TransformerException(formattedMsg,srcLctr);}  }
class C{  public final void writeBoolean(boolean v) throws IOException {  out.write(v ? 1 : 0);  incCount(1);}  }
class C{  public InvalidGrantException(){  this("The provided access grant is invalid, expired, or revoked.");}  }
class C{  public XmlStreamReader(InputStream is,boolean lenient) throws IOException {  this(is,lenient,null);}  }
class C{  private void updateDisplayName(){  String className=mAttributes.get("class");  if (className == null)   return;  String text=mAttributes.get("text");  if (text == null)   return;  String contentDescription=mAttributes.get("content-desc");  if (contentDescription == null)   return;  String index=mAttributes.get("index");  if (index == null)   return;  String bounds=mAttributes.get("bounds");  if (bounds == null) {    return;  }  className=className.replace("android.widget.","");  className=className.replace("android.view.","");  StringBuilder builder=new StringBuilder();  builder.append('(');  builder.append(index);  builder.append(") ");  builder.append(className);  if (!text.isEmpty()) {    builder.append(':');    builder.append(text);  }  if (!contentDescription.isEmpty()) {    builder.append(" {");    builder.append(contentDescription);    builder.append('}');  }  builder.append(' ');  builder.append(bounds);  mDisplayName=builder.toString();}  }
class C{  public final String readUTF() throws IOException {  return readUTF(this);}  }
class C{  protected void paintText(Graphics g,JComponent c,Rectangle textRect,String text){  AbstractButton b=(AbstractButton)c;  ButtonModel model=b.getModel();  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g);  int mnemonicIndex=b.getDisplayedMnemonicIndex();  if (model.isEnabled()) {    g.setColor(b.getForeground());    SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x + getTextShiftOffset(),textRect.y + fm.getAscent() + getTextShiftOffset());  } else {    g.setColor(b.getBackground().brighter());    SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x,textRect.y + fm.getAscent());    g.setColor(b.getBackground().darker());    SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x - 1,textRect.y + fm.getAscent() - 1);  }}  }
class C{  public StatefulAccessToken(JsonValue token) throws InvalidGrantException {  super(token);  validateTokenName(getTokenName(),getTokenId());}  }
class C{  public Resource createResource(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE);  if (obj == null) {    return new ResourceImpl();  } else {    return (Resource)obj;  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends Comparable<? super T>> list,T object){  if (list == null) {    throw new NullPointerException("list == null");  }  if (list.isEmpty()) {    return -1;  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends Comparable<? super T>> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-it.next().compareTo(object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=-list.get(mid).compareTo(object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,int[] result,int[] resultSpan){  return findNearestArea(pixelX,pixelY,minSpanX,minSpanY,spanX,spanY,true,result,resultSpan);}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  byte[] asn1EncPrincipal=(byte[])ois.readObject();  byte[] encRealm=(byte[])ois.readObject();  try {    Realm realmObject=new Realm(new DerValue(encRealm));    PrincipalName krb5Principal=new PrincipalName(new DerValue(asn1EncPrincipal),realmObject);    realm=realmObject.toString();    fullName=krb5Principal.toString();    nameType=krb5Principal.getNameType();  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  public DirectoryRMIServerSocketFactory(SSLSocketFactory sslSocketFactory,boolean needClientCertificate){  this.needClientCertificate=needClientCertificate;  this.sslSocketFactory=sslSocketFactory;}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,systemLineSeparator);}  }
class C{  protected int processByte(){  return 0;}  }
class C{  static byte[] toIntegerBytes(final BigInteger bigInt){  int bitlen=bigInt.bitLength();  bitlen=((bitlen + 7) >> 3) << 3;  final byte[] bigBytes=bigInt.toByteArray();  if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {    return bigBytes;  }  int startSrc=0;  int len=bigBytes.length;  if ((bigInt.bitLength() % 8) == 0) {    startSrc=1;    len--;  }  final int startDst=bitlen / 8 - len;  final byte[] resizedBytes=new byte[bitlen / 8];  System.arraycopy(bigBytes,startSrc,resizedBytes,startDst,len);  return resizedBytes;}  }
class C{  @DataProvider(name="persistentSearchChangeTypeData") public Object[][] createPersistentSearchChangeTypeData(){  Map<Integer,String> values=new HashMap<>();  values.put(1,"add");  values.put(2,"delete");  values.put(4,"modify");  values.put(8,"modDN");  return new Object[][]{{values}};}  }
class C{  private static final <T>int findIgnoreCase(MapElement<T>[] map,CharChunk name,int start,int end){  int a=0;  int b=map.length - 1;  if (b == -1) {    return -1;  }  if (compareIgnoreCase(name,start,end,map[0].name) < 0) {    return -1;  }  if (b == 0) {    return 0;  }  int i=0;  while (true) {    i=(b + a) / 2;    int result=compareIgnoreCase(name,start,end,map[i].name);    if (result == 1) {      a=i;    } else     if (result == 0) {      return i;    } else {      b=i;    }    if ((b - a) == 1) {      int result2=compareIgnoreCase(name,start,end,map[b].name);      if (result2 < 0) {        return a;      } else {        return b;      }    }  }}  }
class C{  protected PoolableConnectionFactory createPoolableConnectionFactory(final ConnectionFactory driverConnectionFactory) throws SQLException {  PoolableConnectionFactory connectionFactory=null;  try {    connectionFactory=new PoolableConnectionFactory(driverConnectionFactory,registeredJmxName);    connectionFactory.setValidationQuery(validationQuery);    connectionFactory.setValidationQueryTimeout(validationQueryTimeout);    connectionFactory.setConnectionInitSql(connectionInitSqls);    connectionFactory.setDefaultReadOnly(defaultReadOnly);    connectionFactory.setDefaultAutoCommit(defaultAutoCommit);    connectionFactory.setDefaultTransactionIsolation(defaultTransactionIsolation);    connectionFactory.setDefaultCatalog(defaultCatalog);    connectionFactory.setCacheState(cacheState);    connectionFactory.setPoolStatements(poolPreparedStatements);    connectionFactory.setMaxOpenPrepatedStatements(maxOpenPreparedStatements);    connectionFactory.setMaxConnLifetimeMillis(maxConnLifetimeMillis);    connectionFactory.setRollbackOnReturn(getRollbackOnReturn());    connectionFactory.setEnableAutoCommitOnReturn(getEnableAutoCommitOnReturn());    connectionFactory.setDefaultQueryTimeout(getDefaultQueryTimeout());    connectionFactory.setFastFailValidation(fastFailValidation);    connectionFactory.setDisconnectionSqlCodes(disconnectionSqlCodes);    validateConnectionFactory(connectionFactory);  } catch (  final RuntimeException e) {    throw e;  }catch (  final Exception e) {    throw new SQLException("Cannot create PoolableConnectionFactory (" + e.getMessage() + ")",e);  }  return connectionFactory;}  }
class C{  public void dispatchTakePictureIntent(){  Intent takePictureIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  if (takePictureIntent.resolveActivity(activity.getPackageManager()) != null) {    File photoFile=null;    try {      photoFile=createImageFile();    } catch (    IOException ex) {      Log.e(TAG,"IOException",ex);    }    if (photoFile != null) {      takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(photoFile));      activity.startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);    }  }}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return Arrays.copyOf(queue,size);  }  finally {    lock.unlock();  }}  }
class C{  public static String normalize(String path){  return normalize(path,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(-5,3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  private Object stringToValue(String value,boolean completeMatch) throws ParseException {  int errorOffset;  if ((errorOffset=getInvalidOffset(value,completeMatch)) == -1) {    if (!getValueContainsLiteralCharacters()) {      value=stripLiteralChars(value);    }    return super.stringToValue(value);  }  throw new ParseException("stringToValue passed invalid value",errorOffset);}  }
class C{  private Readers(){}  }
class C{  boolean hasConnectionError(){  return connectionError;}  }
class C{  @Deprecated protected static boolean checkFontDictionary(PdfDictionary fontDic,PdfName fontType,boolean isException){  if (fontDic == null || fontDic.get(PdfName.Subtype) == null || !fontDic.get(PdfName.Subtype).equals(fontType)) {    if (isException) {      throw new PdfException(PdfException.DictionaryDoesntHave1FontData).setMessageParams(fontType.getValue());    }    return false;  }  return true;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);}  }
class C{  public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.insertUpdate(e,a,f);}  }
class C{  public void configChanged(ConfigurationActionEvent e){  if (debug.messageEnabled()) {    debug.message("SAML2MetaServiceListener.configChanged: config=" + e.getConfigurationName() + ", component="+ e.getComponentName());  }  SAML2MetaCache.clear();  String realm=e.getRealm();  SPCache.clear(realm);  IDPCache.clear(realm);  KeyUtil.clear();}  }
class C{  public static RDN valueOf(final String rdn,final Schema schema){  final SubstringReader reader=new SubstringReader(rdn);  final RDN parsedRdn;  try {    parsedRdn=decode(reader,schema);  } catch (  final UnknownSchemaElementException e) {    throw new LocalizedIllegalArgumentException(ERR_RDN_TYPE_NOT_FOUND.get(rdn,e.getMessageObject()));  }  if (reader.remaining() > 0) {    throw new LocalizedIllegalArgumentException(ERR_RDN_TRAILING_GARBAGE.get(rdn,reader.read(reader.remaining())));  }  return parsedRdn;}  }
class C{  public static boolean fileExists(String path){  return new File(path).isFile();}  }
class C{  public void init(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  super.init(compiler,opPos,stepType);switch (stepType) {case OpCodes.OP_FUNCTION:case OpCodes.OP_EXTFUNCTION:    m_mustHardReset=true;case OpCodes.OP_GROUP:case OpCodes.OP_VARIABLE:  m_expr=compiler.compile(opPos);m_expr.exprSetParent(this);if (m_expr instanceof org.apache.xpath.operations.Variable) {m_canDetachNodeset=false;}break;default :m_expr=compiler.compile(opPos + 2);m_expr.exprSetParent(this);}}  }
class C{  public void publish(ReplicationMsg msg){  publish(msg,false,true);}  }
class C{  private void checkTypeParameter(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertEquals("T",typeParameter.getName());  assertEquals(method,typeParameter.getGenericDeclaration());}  }
class C{  @Override public void unavailable(UnavailableException unavailable){  getServletContext().log(sm.getString("standardWrapper.unavailable",getName()));  if (unavailable == null)   setAvailable(Long.MAX_VALUE); else   if (unavailable.isPermanent())   setAvailable(Long.MAX_VALUE); else {    int unavailableSeconds=unavailable.getUnavailableSeconds();    if (unavailableSeconds <= 0)     unavailableSeconds=60;    setAvailable(System.currentTimeMillis() + (unavailableSeconds * 1000L));  }}  }
class C{  public Document createDefaultDocument(Font defaultFont,Color foreground){  StyleSheet styles=getStyleSheet();  StyleSheet ss=new StyleSheet();  ss.addStyleSheet(styles);  BasicDocument doc=new BasicDocument(ss,defaultFont,foreground);  doc.setAsynchronousLoadPriority(Integer.MAX_VALUE);  doc.setPreservesUnknownTags(false);  return doc;}  }
class C{  public NASPortTypeAttribute(int portType){  super(OctetUtils.toOctets(AttributeType.NAS_PORT_TYPE,portType));  this.portType=portType;}  }
class C{  public void removeUpdate(DocumentEvent e){  if (getUpdatePolicy() == NEVER_UPDATE || (getUpdatePolicy() == UPDATE_WHEN_ON_EDT && !SwingUtilities.isEventDispatchThread())) {    int length=component.getDocument().getLength();    dot=Math.min(dot,length);    mark=Math.min(mark,length);    if ((e.getOffset() < dot || e.getOffset() < mark) && selectionTag != null) {      try {        component.getHighlighter().changeHighlight(selectionTag,Math.min(dot,mark),Math.max(dot,mark));      } catch (      BadLocationException e1) {        e1.printStackTrace();      }    }    return;  }  int offs0=e.getOffset();  int offs1=offs0 + e.getLength();  int newDot=dot;  boolean adjustDotBias=false;  int newMark=mark;  boolean adjustMarkBias=false;  if (e instanceof AbstractDocument.UndoRedoDocumentEvent) {    setDot(offs0);    return;  }  if (newDot >= offs1) {    newDot-=(offs1 - offs0);    if (newDot == offs1) {      adjustDotBias=true;    }  } else   if (newDot >= offs0) {    newDot=offs0;    adjustDotBias=true;  }  if (newMark >= offs1) {    newMark-=(offs1 - offs0);    if (newMark == offs1) {      adjustMarkBias=true;    }  } else   if (newMark >= offs0) {    newMark=offs0;    adjustMarkBias=true;  }  if (newMark == newDot) {    forceCaretPositionChange=true;    try {      setDot(newDot,guessBiasForOffset(newDot,dotBias,dotLTR));    }  finally {      forceCaretPositionChange=false;    }    ensureValidPosition();  } else {    Position.Bias dotBias=DefaultCaret.this.dotBias;    Position.Bias markBias=DefaultCaret.this.markBias;    if (adjustDotBias) {      dotBias=guessBiasForOffset(newDot,dotBias,dotLTR);    }    if (adjustMarkBias) {      markBias=guessBiasForOffset(mark,markBias,markLTR);    }    setDot(newMark,markBias);    if (getDot() == newMark) {      moveDot(newDot,dotBias);    }    ensureValidPosition();  }}  }
class C{  public BootstrapFailure(String message){  super(message);}  }
class C{  public BigInteger abs(){  return (signum >= 0 ? this : this.negate());}  }
class C{  private void handlePrivilegeUpdates() throws SSOException, SMSException {  for (  ChangeSet<String,Set<String>> change : privilegeUpdates) {    final String configName=change.getIdentifier();    final Set<String> newPermissions=change.getData();    final ServiceConfig privilegeConfig=privilegesConfig.getSubConfig(configName);    privilegeConfig.addAttribute(LIST_OF_PERMISSIONS,newPermissions);  }}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  static void putCircleOfTrust(String realm,String name,CircleOfTrustDescriptor cotDescriptor){  String classMethod="CircleOfTrustCache:putCircleOfTrust";  String cacheKey=buildCacheKey(realm,name);  if (debug.messageEnabled()) {    debug.message(classMethod + ": cacheKey = " + cacheKey);  }  cotCache.put(cacheKey,cotDescriptor);}  }
class C{  private List<ACLEntry> findACLEntryByRoleAndType(final String type,final String role){  List<ACLEntry> res=new ArrayList<>();  for (  ACLEntry item : aclEntries) {    if (item.role.equals(role) && item.type.equals(type)) {      res.add(item);    }  }  return res;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public int compareTo(Integer object){  return compare(value,object.value);}  }
class C{  public void removeAllChildren(){  for (int i=getChildCount() - 1; i >= 0; i--) {    remove(i);  }}  }
class C{  public Div add(Image element){  childElements.add(element);  return this;}  }
class C{  public RequestLine parseSIPRequestLine(String requestLine) throws ParseException {  requestLine+="\n";  return new RequestLineParser(requestLine).parse();}  }
class C{  private static void register(String URI,String filename,String MIME){  OfflineResolver._uriMap.put(URI,filename);  OfflineResolver._mimeMap.put(URI,MIME);}  }
class C{  public void allowDetachToRelease(boolean allowRelease){  m_allowRelease=allowRelease;}  }
class C{  public static void validateRootDirectory(File rootDirectory) throws IllegalArgumentException {  LocalizableMessage failureReason=null;  if (rootDirectory == null) {    failureReason=INFO_ERROR_INSTALL_ROOT_DIR_NULL.get();  } else   if (!rootDirectory.exists()) {    failureReason=INFO_ERROR_INSTALL_ROOT_DIR_NO_EXIST.get(Utils.getPath(rootDirectory));  } else   if (!rootDirectory.isDirectory()) {    failureReason=INFO_ERROR_INSTALL_ROOT_DIR_NOT_DIR.get(Utils.getPath(rootDirectory));  } else {    String[] children=rootDirectory.list();    if (children != null) {      Set<String> childrenSet=CollectionUtils.newHashSet(children);      for (      String dir : REQUIRED_DIRECTORIES) {        if (!childrenSet.contains(dir)) {          failureReason=INFO_ERROR_INSTALL_ROOT_DIR_NO_DIR.get(Utils.getPath(rootDirectory),dir);        }      }    } else {      failureReason=INFO_ERROR_INSTALL_ROOT_DIR_EMPTY.get(Utils.getPath(rootDirectory));    }  }  if (failureReason != null) {    throw new IllegalArgumentException(failureReason.toString());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrdeletedatacountnegative.class,args);}  }
class C{  public boolean isAlias(){  return type == Type.ALIAS;}  }
class C{  public boolean isUnaryOption(String cmdName){  return unaryOptionNames.contains(cmdName);}  }
class C{  @Override public String toString(){  return "FileDeleteStrategy[" + name + "]";}  }
class C{  public EventSetDescriptor(String eventSetName,Class<?> listenerType,MethodDescriptor listenerMethodDescriptors[],Method addListenerMethod,Method removeListenerMethod) throws IntrospectionException {  setName(eventSetName);  this.listenerMethodDescriptors=(listenerMethodDescriptors != null) ? listenerMethodDescriptors.clone() : null;  setAddListenerMethod(addListenerMethod);  setRemoveListenerMethod(removeListenerMethod);  setListenerType(listenerType);}  }
class C{  public static TitledBorder createTitledBorder(Border border){  return new TitledBorder(border);}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  @NonNull public final <U>U as(@NonNull Function<? super Agera,? extends U> converter){  return converter.apply(this);}  }
class C{  @Override public void roll(int field,boolean increment){  roll(field,increment ? 1 : -1);}  }
class C{  public static void putBoolean(final String key,final boolean value){  try {    systemRoot.putBoolean(fixKey(key),value);  } catch (  final Exception e) {    System.err.print(e);  }}  }
class C{  public char charAt(int index){  return str().charAt(index);}  }
class C{  public void enable(){  try {    loadDataState();  } catch (  Exception e) {    logger.error(ERR_LOADING_GENERATION_ID,getBaseDN(),stackTraceToSingleLineString(e));    return;  }  enableService();  disabled=false;}  }
class C{  public SAML2ConfigBuilder tokenLifetimeInSeconds(long lifetimeInSeconds){  this.tokenLifetimeInSeconds=lifetimeInSeconds;  return this;}  }
class C{  public ConstantCallSite(MethodHandle target){  super(target);  isFrozen=true;}  }
class C{  public IIOByteBuffer(byte[] data,int offset,int length){  this.data=data;  this.offset=offset;  this.length=length;}  }
class C{  public CRAMMD5SASLMechanismHandler(){  super();}  }
class C{  public AttributedString(AttributedCharacterIterator text){  this(text,text.getBeginIndex(),text.getEndIndex(),null);}  }
class C{  public void initialize(Map configParams) throws PolicyException {  if (configParams == null) {    throw (new PolicyException(ResBundleUtils.rbName,"org_initialization_failed",null,null));  }  String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);  if (configuredLdapServer == null) {    debug.error("Organization.initialize(): failed to get LDAP " + "server name. If you enter more than one server name " + "in the policy config service's Primary LDAP Server "+ "field, please make sure the ldap server name is preceded "+ "with the local server name.");    throw (new PolicyException(ResBundleUtils.rbName,"invalid_ldap_server_host",null,null));  }  ldapServer=configuredLdapServer.toLowerCase();  localDS=PolicyUtils.isLocalDS(ldapServer);  aliasEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.USER_ALIAS_ENABLED)).booleanValue();  authid=(String)configParams.get(PolicyConfig.LDAP_BIND_DN);  authpw=(String)configParams.get(PolicyConfig.LDAP_BIND_PASSWORD);  if (authpw != null) {    authpw=PolicyUtils.decrypt(authpw);  }  baseDN=(String)configParams.get(PolicyConfig.LDAP_BASE_DN);  userSearchFilter=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_FILTER);  String scope=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_SCOPE);  if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {    userSearchScope=SearchScope.BASE_OBJECT;  } else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {    userSearchScope=SearchScope.SINGLE_LEVEL;  } else {    userSearchScope=SearchScope.WHOLE_SUBTREE;  }  userRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_USER_SEARCH_ATTRIBUTE);  orgSearchFilter=(String)configParams.get(PolicyConfig.LDAP_ORG_SEARCH_FILTER);  scope=(String)configParams.get(PolicyConfig.LDAP_ORG_SEARCH_SCOPE);  if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {    orgSearchScope=SearchScope.BASE_OBJECT;  } else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {    orgSearchScope=SearchScope.SINGLE_LEVEL;  } else {    orgSearchScope=SearchScope.WHOLE_SUBTREE;  }  orgRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_ORG_SEARCH_ATTRIBUTE);  try {    timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));    maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));    minPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MIN_SIZE));    maxPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MAX_SIZE));  } catch (  NumberFormatException nfe) {    throw (new PolicyException(nfe));  }  String ssl=(String)configParams.get(PolicyConfig.LDAP_SSL_ENABLED);  if (ssl.equalsIgnoreCase("true")) {    sslEnabled=true;  } else {    sslEnabled=false;  }  Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);  if ((orgNameSet != null) && (!orgNameSet.isEmpty())) {    Iterator items=orgNameSet.iterator();    orgName=(String)items.next();  }  if (debug.messageEnabled()) {    debug.message("Organization.initialize(): getting params" + "\nldapServer: " + ldapServer + "\nauthid: "+ authid+ "\nbaseDN: "+ baseDN+ "\nuserSearchFilter: "+ userSearchFilter+ "\nuserRDNAttrName: "+ userRDNAttrName+ "\norgSearchFilter: "+ orgSearchFilter+ "\norgRDNAttrName: "+ orgRDNAttrName+ "\ntimeLimit: "+ timeLimit+ "\nmaxResults: "+ maxResults+ "\nminPoolSize: "+ minPoolSize+ "\nmaxPoolSize: "+ maxPoolSize+ "\nSSLEnabled: "+ sslEnabled+ "\nOrgName: "+ orgName);  }  LDAPConnectionPools.initConnectionPool(ldapServer,authid,authpw,sslEnabled,minPoolSize,maxPoolSize);  connPool=LDAPConnectionPools.getConnectionPool(ldapServer);  initialized=true;}  }
class C{  protected void handleCHANGE_SESSION_ID(SessionMessage msg,Member sender) throws IOException {  counterReceive_EVT_CHANGE_SESSION_ID++;  DeltaSession session=(DeltaSession)findSession(msg.getSessionID());  if (session != null) {    String newSessionID=deserializeSessionId(msg.getSession());    session.setPrimarySession(false);    changeSessionId(session,newSessionID,notifySessionListenersOnReplication,notifyContainerListenersOnReplication);  }}  }
class C{  public void extractArchiveForSetup(File openDJZipFile) throws EmbeddedDirectoryServerException {  try {    File serverRoot=new File(configParams.getServerRootDirectory());    if (!ARCHIVE_ROOT_DIRECTORY.equals(serverRoot.getName())) {      throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_ARCHIVE_SETUP_WRONG_ROOT_DIRECTORY.get(ARCHIVE_ROOT_DIRECTORY,serverRoot));    }    File deployDirectory=serverRoot.getParentFile();    StaticUtils.extractZipArchive(openDJZipFile,deployDirectory,EXECUTABLE_DJ_DIRECTORIES,EXECUTABLE_DJ_FILES);  } catch (  IOException e) {    throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_SETUP_EXTRACT_ARCHIVE.get(openDJZipFile,configParams.getServerRootDirectory(),StaticUtils.stackTraceToSingleLineString(e)));  }}  }
class C{  public Call<GitHubUserResponse> searchGitHubUser(String userKeyword,int page,int perPage){  return gitHubService.searchUser(userKeyword,page,perPage);}  }
class C{  public static BackupInfo decode(BackupDirectory backupDirectory,List<String> encodedInfo) throws ConfigException {  String backupID=null;  Date backupDate=null;  boolean isIncremental=false;  boolean isCompressed=false;  boolean isEncrypted=false;  byte[] unsignedHash=null;  byte[] signedHash=null;  HashSet<String> dependencies=new HashSet<>();  HashMap<String,String> backupProperties=new HashMap<>();  String backupPath=backupDirectory.getPath();  try {    for (    String line : encodedInfo) {      int equalPos=line.indexOf('=');      if (equalPos < 0) {        LocalizableMessage message=ERR_BACKUPINFO_NO_DELIMITER.get(line,backupPath);        throw new ConfigException(message);      } else       if (equalPos == 0) {        LocalizableMessage message=ERR_BACKUPINFO_NO_NAME.get(line,backupPath);        throw new ConfigException(message);      }      String name=line.substring(0,equalPos);      String value=line.substring(equalPos + 1);      if (name.equals(PROPERTY_BACKUP_ID)) {        if (backupID == null) {          backupID=value;        } else {          LocalizableMessage message=ERR_BACKUPINFO_MULTIPLE_BACKUP_IDS.get(backupPath,backupID,value);          throw new ConfigException(message);        }      } else       if (name.equals(PROPERTY_BACKUP_DATE)) {        SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_GMT_TIME);        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));        backupDate=dateFormat.parse(value);      } else       if (name.equals(PROPERTY_IS_INCREMENTAL)) {        isIncremental=Boolean.valueOf(value);      } else       if (name.equals(PROPERTY_IS_COMPRESSED)) {        isCompressed=Boolean.valueOf(value);      } else       if (name.equals(PROPERTY_IS_ENCRYPTED)) {        isEncrypted=Boolean.valueOf(value);      } else       if (name.equals(PROPERTY_UNSIGNED_HASH)) {        unsignedHash=Base64.decode(value);      } else       if (name.equals(PROPERTY_SIGNED_HASH)) {        signedHash=Base64.decode(value);      } else       if (name.equals(PROPERTY_DEPENDENCY)) {        dependencies.add(value);      } else       if (name.startsWith(PROPERTY_CUSTOM_PREFIX)) {        String propertyName=name.substring(PROPERTY_CUSTOM_PREFIX.length());        backupProperties.put(propertyName,value);      } else {        LocalizableMessage message=ERR_BACKUPINFO_UNKNOWN_PROPERTY.get(backupPath,name,value);        throw new ConfigException(message);      }    }  } catch (  ConfigException ce) {    throw ce;  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_BACKUPINFO_CANNOT_DECODE.get(backupPath,getExceptionMessage(e));    throw new ConfigException(message,e);  }  if (backupID == null) {    LocalizableMessage message=ERR_BACKUPINFO_NO_BACKUP_ID.get(backupPath);    throw new ConfigException(message);  }  if (backupDate == null) {    LocalizableMessage message=ERR_BACKUPINFO_NO_BACKUP_DATE.get(backupID,backupPath);    throw new ConfigException(message);  }  return new BackupInfo(backupDirectory,backupID,backupDate,isIncremental,isCompressed,isEncrypted,unsignedHash,signedHash,dependencies,backupProperties);}  }
class C{  protected void writeStartTag(String tag) throws IOException {  indent();  write(tag);  write(NEWLINE);  incrIndent();}  }
class C{  public Builder addUnicodeLocaleAttribute(String attribute){  try {    localeBuilder.addUnicodeLocaleAttribute(attribute);  } catch (  LocaleSyntaxException e) {    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());  }  return this;}  }
class C{  private void updateEntryPane(){  ViewPositions pos=Utilities.getViewPositions(entryPane);  boolean canDisplayMonitorInformation=true;  if (getInfo() == null) {    return;  }  ServerDescriptor server=getInfo().getServerDescriptor();  ServerDescriptor.ServerStatus status=server.getStatus();  if (status == ServerDescriptor.ServerStatus.STARTED) {    if (!server.isAuthenticated()) {      canDisplayMonitorInformation=false;      entryPane.displayMessage(INFO_CTRL_PANEL_AUTHENTICATION_REQUIRED_SUMMARY.get());    }  } else {    canDisplayMonitorInformation=false;    entryPane.displayMessage(INFO_CTRL_PANEL_SERVER_NOT_RUNNING_SUMMARY.get());  }  if (canDisplayMonitorInformation) {    TreePath[] paths=treePane.getTree().getSelectionPaths();    TreePath path=null;    if (paths != null && paths.length == 1) {      path=paths[0];    }    if (path != null) {      GeneralMonitoringTreeNode node=(GeneralMonitoringTreeNode)path.getLastPathComponent();      entryPane.update((NodeType)node.getIdentifier());    } else     if (paths != null && paths.length > 1) {      entryPane.displayMessage(MULTIPLE_ITEMS_SELECTED);    } else {      entryPane.displayMessage(NO_ELEMENT_SELECTED);    }  }  Utilities.updateViewPositions(pos);}  }
class C{  public PdfPage addNewPage(int index,PageSize pageSize){  checkClosingStatus();  PdfPage page=new PdfPage(this,pageSize);  checkAndAddPage(index,page);  currentPage=page;  dispatchEvent(new PdfDocumentEvent(PdfDocumentEvent.START_PAGE,page));  dispatchEvent(new PdfDocumentEvent(PdfDocumentEvent.INSERT_PAGE,page));  return currentPage;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber((int)(left.num() / right.num()));}  }
class C{  public boolean isHD(){  return streams.containsKey("1080p") || streams.containsKey("4096p");}  }
class C{  @Override public void memberAdded(Member member){  for (int i=0; i < membershipListeners.size(); i++) {    MembershipListener membershipListener=membershipListeners.get(i);    if (membershipListener != null)     membershipListener.memberAdded(member);  }}  }
class C{  protected String buildPreamble(CommandSender sender){  return ChatColor.GRAY + preamble;}  }
class C{  public SAX2DTM2(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean buildIdIndex,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);  int shift;  for (shift=0; (blocksize>>>=1) != 0; ++shift)   ;  m_blocksize=1 << shift;  m_SHIFT=shift;  m_MASK=m_blocksize - 1;  m_buildIdIndex=buildIdIndex;  m_values=new Vector(32,512);  m_maxNodeIndex=1 << DTMManager.IDENT_DTM_NODE_BITS;  m_exptype_map0=m_exptype.getMap0();  m_nextsib_map0=m_nextsib.getMap0();  m_firstch_map0=m_firstch.getMap0();  m_parent_map0=m_parent.getMap0();}  }
class C{  public long insert(Long ruleID,Long eventAttributeID,Long externalAttributeID,Long dataFilterID,Long parentRuleFilterID,String ruleFilterData){  if (ruleID == null || eventAttributeID == null || externalAttributeID == null || dataFilterID == null || parentRuleFilterID == null || ruleFilterData == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_RULEID,ruleID);  initialValues.put(KEY_EVENTATTRIBUTEID,eventAttributeID);  initialValues.put(KEY_EXTERNALATTRIBUTEID,externalAttributeID);  initialValues.put(KEY_DATAFILTERID,dataFilterID);  initialValues.put(KEY_PARENTRULEFILTERID,parentRuleFilterID);  initialValues.put(KEY_RULEFILTERDATA,ruleFilterData);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public INV_IDENT(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  @Deprecated public void name(byte[] value){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  protected void forwardToLoginPage(Request request,HttpServletResponse response,LoginConfig config) throws IOException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("formAuthenticator.forwardLogin",request.getRequestURI(),request.getMethod(),config.getLoginPage(),context.getName()));  }  String loginPage=config.getLoginPage();  if (loginPage == null || loginPage.length() == 0) {    String msg=sm.getString("formAuthenticator.noLoginPage",context.getName());    log.warn(msg);    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,msg);    return;  }  if (getChangeSessionIdOnAuthentication()) {    Session session=request.getSessionInternal(false);    if (session != null) {      Manager manager=request.getContext().getManager();      manager.changeSessionId(session);      request.changeSessionId(session.getId());    }  }  String oldMethod=request.getMethod();  request.getCoyoteRequest().method().setString("GET");  RequestDispatcher disp=context.getServletContext().getRequestDispatcher(loginPage);  try {    if (context.fireRequestInitEvent(request)) {      disp.forward(request.getRequest(),response);      context.fireRequestDestroyEvent(request);    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    String msg=sm.getString("formAuthenticator.forwardLoginFail");    log.warn(msg,t);    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,t);    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,msg);  } finally {    request.getCoyoteRequest().method().setString(oldMethod);  }}  }
class C{  public void fireTreeWillExpand(TreePath path) throws ExpandVetoException {  Object[] listeners=listenerList.getListenerList();  TreeExpansionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeWillExpandListener.class) {      if (e == null)       e=new TreeExpansionEvent(this,path);      ((TreeWillExpandListener)listeners[i + 1]).treeWillExpand(e);    }  }}  }
class C{  public int addFaultyMember(FaultyMember[] mbrs){  int result=0;  for (int i=0; mbrs != null && i < mbrs.length; i++) {    if (addFaultyMember(mbrs[i]))     result++;  }  return result;}  }
class C{  public ClearanceMatrix(int p_class_count,BrdLayerStructure p_layer_structure,String[] p_name_arr){  class_count=Math.max(p_class_count,1);  layer_structure=p_layer_structure;  clearance_rows=new ClearanceMatrixRow[class_count];  for (int index=0; index < class_count; ++index) {    clearance_rows[index]=new ClearanceMatrixRow(this,p_name_arr[index]);  }  max_value_on_layer=new int[layer_structure.size()];}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public byte readByte() throws SQLException {  Byte attrib=(Byte)getNextAttribute();  return (attrib == null) ? 0 : attrib.byteValue();}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public void addSource(final DOMImplementationSource s){  if (s == null) {    throw new NullPointerException();  }  if (!sources.contains(s)) {    sources.addElement(s);  }}  }
class C{  public void firePropertyChange(String propertyName,short oldValue,short newValue){}  }
class C{  public org.w3c.dom.Document encryptAndReplaceResourceID(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keyStrength,java.lang.String certAlias,int kekStrength,java.lang.String providerID) throws EncryptionException {  return encryptAndReplace(doc,element,secretKeyAlg,keyStrength,keyProvider.getPublicKey(certAlias),kekStrength,providerID,true);}  }
class C{  public void insert(String s,int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  ensurePopupMenuCreated();  popupMenu.insert(new JMenuItem(s),pos);}  }
class C{  private void grow(){  int oldCapacity=queue.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity < 0)   newCapacity=Integer.MAX_VALUE;  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  public static <Element>void writeGeneratedOutput(String root,Multimap<Element,GeneratedResult> elements) throws IOException {  Map<String,Doc> files=new LinkedHashMap<>();  for (  GeneratedResult generatedResult : elements.values()) {    files.put(generatedResult.getFilename(),generatedResult.getDoc());  }  ToolUtil.writeFiles(files,root);}  }
class C{  protected String paramString(){  String rootPaneString=(rootPane != null ? rootPane.toString() : "");  String rootPaneCheckingEnabledString=(rootPaneCheckingEnabled ? "true" : "false");  return super.paramString() + ",rootPane=" + rootPaneString+ ",rootPaneCheckingEnabled="+ rootPaneCheckingEnabledString;}  }
class C{  private static void deployDirectoryDirsAndFiles() throws IOException {  String cleanupRequiredString=System.getProperty(PROPERTY_CLEANUP_REQUIRED,"true");  boolean cleanupRequired=!"false".equalsIgnoreCase(cleanupRequiredString);  if (cleanupRequired) {    deleteDirectory(paths.testInstallRoot);    deleteDirectory(paths.testInstanceRoot);    paths.testInstallRoot.mkdirs();    paths.testInstanceRoot.mkdirs();  }  File testInstanceSchema=new File(paths.testInstanceRoot,"config" + File.separator + "schema");  testInstanceSchema.mkdirs();  String[] installSubDirectories={"bin","lib","bat","config"};  String[] instanceSubDirectories={"bak","changelogDb","classes","config","db","import-tmp","db_verify","ldif","locks","logs","db_rebuild","db_unindexed","db_index_test","db_import_test"};  for (  String s : installSubDirectories) {    new File(paths.testInstallRoot,s).mkdir();  }  for (  String s : instanceSubDirectories) {    new File(paths.testInstanceRoot,s).mkdir();  }  File serverClassesDir=new File(paths.buildDir,"classes");  File unitClassesDir=new File(paths.unitRoot,"classes");  File libDir=new File(paths.buildDir.getPath() + "/package/opendj/lib");  File upgradeDir=new File(paths.buildDir.getPath() + "/package/opendj/template/config/upgrade");  System.out.println("libDir=" + libDir);  File resourceDir=new File(paths.buildRoot,"resource");  File testResourceDir=new File(paths.testSrcRoot,"resource");  File testSchemaDir=new File(paths.testInstanceRoot,"config");  File testClassesDir=new File(paths.testInstanceRoot,"classes");  File testLibDir=new File(paths.testInstallRoot,"lib");  File testBinDir=new File(paths.testInstallRoot,"bin");  String opendmkJarFileLocation=System.getProperty(PROPERTY_OPENDMK_LOCATION);  File opendmkJar=new File(opendmkJarFileLocation,"jdmkrt.jar");  File snmpResourceDir=new File(paths.buildRoot + File.separator + "src"+ File.separator+ "snmp"+ File.separator+ "resource");  File snmpConfigDir=new File(snmpResourceDir,"config");  File testSnmpResourceDir=new File(paths.testConfigDir + File.separator + "snmp");  if (Boolean.getBoolean(PROPERTY_COPY_CLASSES_TO_TEST_PKG)) {    copyDirectory(serverClassesDir,testClassesDir);    copyDirectory(unitClassesDir,testClassesDir);  }  if (paths.installedRoot != null) {    copyDirectory(new File(paths.installedRoot),paths.testInstallRoot);  } else {    copyDirectory(libDir,testLibDir);    copyDirectory(new File(resourceDir,"bin"),testBinDir);    copyDirectory(new File(resourceDir,"config"),paths.testConfigDir);    copyDirectory(upgradeDir,new File(paths.testConfigDir,"upgrade"));    copyDirectory(new File(resourceDir,"schema"),new File(testSchemaDir,"schema"));    copyDirectory(new File(resourceDir,"MakeLDIF"),new File(paths.testConfigDir,"MakeLDIF"));    copyDirectory(new File(snmpResourceDir,"security"),new File(testSnmpResourceDir,"security"));    copyFileFromTo("server.keystore",testResourceDir,paths.testConfigDir);    copyFileFromTo("server.truststore",testResourceDir,paths.testConfigDir);    copyFileFromTo("client.keystore",testResourceDir,paths.testConfigDir);    copyFileFromTo("client-emailAddress.keystore",testResourceDir,paths.testConfigDir);    copyFileFromTo("client.truststore",testResourceDir,paths.testConfigDir);    copyFileFromTo("server-cert.p12",testResourceDir,paths.testConfigDir);    copyFileFromTo("client-cert.p12",testResourceDir,paths.testConfigDir);    File installLoc=new File(paths.testInstallRoot + File.separator + "instance.loc");    installLoc.deleteOnExit();    try (FileWriter w=new FileWriter(installLoc)){      w.write(paths.testInstanceRoot.getAbsolutePath());    }     if (opendmkJar.exists()) {      appendFile(new File(snmpConfigDir,"config.snmp.ldif"),new File(paths.testConfigDir,"config.ldif"));    }    for (    File f : testBinDir.listFiles()) {      try {        FilePermission.setPermissions(f,FilePermission.decodeUNIXMode("755"));      } catch (      Exception e) {      }    }    if (OperatingSystem.isUnixBased()) {      try {        FilePermission perm=FilePermission.decodeUNIXMode("755");        for (        File f : testBinDir.listFiles()) {          if (f.getName().endsWith(".sh")) {            FilePermission.setPermissions(f,perm);          }        }      } catch (      Exception e) {      }    }  }  copyTestConfigChangesFile();}  }
class C{  public boolean removeTimingCode(final long timestamp,final int... types){  resolveRelativeTimestamps();  final Set<Integer> typeSet=toSet(types);  final List<EventTimingCode> codes=(List<EventTimingCode>)getObjectValue(DataTypes.OBJ_TIMED_EVENT_LIST);  boolean removed=false;  for (final ListIterator<EventTimingCode> iterator=codes.listIterator(); iterator.hasNext(); ) {    final EventTimingCode code=iterator.next();    if (timestamp == code.getTimestamp() && typeSet.contains(code.getType())) {      iterator.remove();      removed=true;    }    if (timestamp > code.getTimestamp()) {      break;    }  }  return removed;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public JKNamespace(){}  }
class C{  private void extractNodes(){  Map<String,Node> xfaNodes=extractXFANodes(domDocument);  if (xfaNodes.containsKey("template")) {    templateNode=xfaNodes.get("template");  }  if (xfaNodes.containsKey("datasets")) {    datasetsNode=xfaNodes.get("datasets");    Node dataNode=findDataNode(datasetsNode);    datasetsSom=new Xml2SomDatasets(dataNode != null ? dataNode : datasetsNode.getFirstChild());  }  if (datasetsNode == null)   createDatasetsNode(domDocument.getFirstChild());}  }
class C{  private void populateLabelAndFieldMaps(){  HashMap<FieldName,LabelFieldDescriptor> hm=new HashMap<>();  hm.put(FieldName.HOST_NAME,new LabelFieldDescriptor(INFO_HOST_NAME_LABEL.get(),INFO_HOST_NAME_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.HOST_FIELD_SIZE));  hm.put(FieldName.SERVER_PORT,new LabelFieldDescriptor(INFO_SERVER_PORT_LABEL.get(),INFO_SERVER_PORT_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.PORT_FIELD_SIZE));  hm.put(FieldName.ADMIN_CONNECTOR_PORT,new LabelFieldDescriptor(INFO_ADMIN_CONNECTOR_PORT_LABEL.get(),INFO_ADMIN_CONNECTOR_PORT_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.PORT_FIELD_SIZE));  hm.put(FieldName.SECURITY_OPTIONS,new LabelFieldDescriptor(INFO_SERVER_SECURITY_LABEL.get(),INFO_SERVER_SECURITY_TOOLTIP.get(),LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.DIRECTORY_MANAGER_DN,new LabelFieldDescriptor(INFO_SERVER_DIRECTORY_MANAGER_DN_LABEL.get(),INFO_SERVER_DIRECTORY_MANAGER_DN_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.DN_FIELD_SIZE));  hm.put(FieldName.DIRECTORY_MANAGER_PWD,new LabelFieldDescriptor(INFO_SERVER_DIRECTORY_MANAGER_PWD_LABEL.get(),INFO_SERVER_DIRECTORY_MANAGER_PWD_TOOLTIP.get(),LabelFieldDescriptor.FieldType.PASSWORD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.PASSWORD_FIELD_SIZE));  hm.put(FieldName.DIRECTORY_MANAGER_PWD_CONFIRM,new LabelFieldDescriptor(INFO_SERVER_DIRECTORY_MANAGER_PWD_CONFIRM_LABEL.get(),INFO_SERVER_DIRECTORY_MANAGER_PWD_CONFIRM_TOOLTIP.get(),LabelFieldDescriptor.FieldType.PASSWORD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.PASSWORD_FIELD_SIZE));  for (  FieldName fieldName : hm.keySet()) {    LabelFieldDescriptor desc=hm.get(fieldName);    String defaultValue=getDefaultValue(fieldName);    JLabel label=UIFactory.makeJLabel(desc);    if (fieldName != FieldName.SECURITY_OPTIONS) {      JTextComponent field=UIFactory.makeJTextComponent(desc,defaultValue);      hmFields.put(fieldName,field);      label.setLabelFor(field);    } else {      lSecurity=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,LocalizableMessage.raw(defaultValue),UIFactory.TextStyle.SECONDARY_FIELD_VALID);    }    hmLabels.put(fieldName,label);  }  LabelFieldDescriptor desc=new LabelFieldDescriptor(INFO_SERVER_LOCATION_LABEL.get(),INFO_SERVER_LOCATION_PARENT_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.PATH_FIELD_SIZE);  lServerLocation=UIFactory.makeJLabel(desc);  tfServerLocationParent=UIFactory.makeJTextComponent(desc,"");  lServerLocation.setLabelFor(tfServerLocationParent);  hmLabels.put(FieldName.SERVER_LOCATION,lServerLocation);  desc=new LabelFieldDescriptor(INFO_SERVER_LOCATION_LABEL.get(),INFO_SERVER_LOCATION_RELATIVE_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.RELATIVE_PATH_FIELD_SIZE);  tfServerLocationRelativePath=UIFactory.makeJTextComponent(desc,"");  String defaultPath=getDefaultValue(FieldName.SERVER_LOCATION);  if (defaultPath != null) {    int index=defaultPath.lastIndexOf(File.separator);    if (index != -1) {      String parent=defaultPath.substring(0,index);      String relativeDir=defaultPath.substring(index + 1);      tfServerLocationParent.setText(parent);      tfServerLocationRelativePath.setText(relativeDir);    }  }}  }
class C{  static int findDominantColorByHue(Bitmap bitmap,int samples){  final int height=bitmap.getHeight();  final int width=bitmap.getWidth();  int sampleStride=(int)Math.sqrt((height * width) / samples);  if (sampleStride < 1) {    sampleStride=1;  }  float[] hsv=new float[3];  float[] hueScoreHistogram=new float[360];  float highScore=-1;  int bestHue=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int argb=bitmap.getPixel(x,y);      int alpha=0xFF & (argb >> 24);      if (alpha < 0x80) {        continue;      }      int rgb=argb | 0xFF000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue < 0 || hue >= hueScoreHistogram.length) {        continue;      }      float score=hsv[1] * hsv[2];      hueScoreHistogram[hue]+=score;      if (hueScoreHistogram[hue] > highScore) {        highScore=hueScoreHistogram[hue];        bestHue=hue;      }    }  }  SparseArray<Float> rgbScores=new SparseArray<Float>();  int bestColor=0xff000000;  highScore=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int rgb=bitmap.getPixel(x,y) | 0xff000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue == bestHue) {        float s=hsv[1];        float v=hsv[2];        int bucket=(int)(s * 100) + (int)(v * 10000);        float score=s * v;        Float oldTotal=rgbScores.get(bucket);        float newTotal=oldTotal == null ? score : oldTotal + score;        rgbScores.put(bucket,newTotal);        if (newTotal > highScore) {          highScore=newTotal;          bestColor=rgb;        }      }    }  }  return bestColor;}  }
class C{  protected void sessions(PrintWriter writer,ContextName cn,int idle,StringManager smClient){  if (debug >= 1) {    log("sessions: Session information for web application '" + cn + "'");    if (idle >= 0)     log("sessions: Session expiration for " + idle + " minutes '"+ cn+ "'");  }  if (!validateContextName(cn,writer,smClient)) {    return;  }  String displayPath=cn.getDisplayName();  try {    Context context=(Context)host.findChild(cn.getName());    if (context == null) {      writer.println(smClient.getString("managerServlet.noContext",RequestUtil.filter(displayPath)));      return;    }    Manager manager=context.getManager();    if (manager == null) {      writer.println(smClient.getString("managerServlet.noManager",RequestUtil.filter(displayPath)));      return;    }    int maxCount=60;    int histoInterval=1;    int maxInactiveInterval=context.getSessionTimeout();    if (maxInactiveInterval > 0) {      histoInterval=maxInactiveInterval / maxCount;      if (histoInterval * maxCount < maxInactiveInterval)       histoInterval++;      if (0 == histoInterval)       histoInterval=1;      maxCount=maxInactiveInterval / histoInterval;      if (histoInterval * maxCount < maxInactiveInterval)       maxCount++;    }    writer.println(smClient.getString("managerServlet.sessions",displayPath));    writer.println(smClient.getString("managerServlet.sessiondefaultmax","" + maxInactiveInterval));    Session[] sessions=manager.findSessions();    int[] timeout=new int[maxCount + 1];    int notimeout=0;    int expired=0;    for (int i=0; i < sessions.length; i++) {      int time=(int)(sessions[i].getIdleTimeInternal() / 1000L);      if (idle >= 0 && time >= idle * 60) {        sessions[i].expire();        expired++;      }      time=time / 60 / histoInterval;      if (time < 0)       notimeout++; else       if (time >= maxCount)       timeout[maxCount]++; else       timeout[time]++;    }    if (timeout[0] > 0)     writer.println(smClient.getString("managerServlet.sessiontimeout","<" + histoInterval,"" + timeout[0]));    for (int i=1; i < maxCount; i++) {      if (timeout[i] > 0)       writer.println(smClient.getString("managerServlet.sessiontimeout","" + (i) * histoInterval + " - <" + (i + 1) * histoInterval,"" + timeout[i]));    }    if (timeout[maxCount] > 0) {      writer.println(smClient.getString("managerServlet.sessiontimeout",">=" + maxCount * histoInterval,"" + timeout[maxCount]));    }    if (notimeout > 0)     writer.println(smClient.getString("managerServlet.sessiontimeout.unlimited","" + notimeout));    if (idle >= 0)     writer.println(smClient.getString("managerServlet.sessiontimeout.expired",">" + idle,"" + expired));  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log("ManagerServlet.sessions[" + displayPath + "]",t);    writer.println(smClient.getString("managerServlet.exception",t.toString()));  }}  }
class C{  private void insertIntoDynamicTable(int index,Header entry){  headerList.add(entry);  int delta=entry.hpackSize;  if (index != -1) {    delta-=dynamicTable[dynamicTableIndex(index)].hpackSize;  }  if (delta > maxDynamicTableByteCount) {    clearDynamicTable();    return;  }  int bytesToRecover=(dynamicTableByteCount + delta) - maxDynamicTableByteCount;  int entriesEvicted=evictToRecoverBytes(bytesToRecover);  if (index == -1) {    if (headerCount + 1 > dynamicTable.length) {      Header[] doubled=new Header[dynamicTable.length * 2];      System.arraycopy(dynamicTable,0,doubled,dynamicTable.length,dynamicTable.length);      nextHeaderIndex=dynamicTable.length - 1;      dynamicTable=doubled;    }    index=nextHeaderIndex--;    dynamicTable[index]=entry;    headerCount++;  } else {    index+=dynamicTableIndex(index) + entriesEvicted;    dynamicTable[index]=entry;  }  dynamicTableByteCount+=delta;}  }
class C{  public Subject(NameIdentifier nameIdentifier) throws SAMLException {  if (nameIdentifier == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject:  null NameIdentifier " + "specified");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  _nameIdentifier=nameIdentifier;}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return exp.apply(name) == false;}  }
class C{  public static String toString(final Object object,boolean useCurrentTostringIfAvailable){  if (object == null) {    return "[NULL]";  }  if (useCurrentTostringIfAvailable && isMethodDirectlyExists(object,"toString")) {    return object.toString();  }  return ToStringBuilder.reflectionToString(object,ToStringStyle.SHORT_PREFIX_STYLE);}  }
class C{  public SSLContextBuilder(){  try {    keyManager=KeyManagers.useJvmDefaultKeyStore();  } catch (  GeneralSecurityException|IOException ex) {    keyManager=null;  }}  }
class C{  static void updateTracerSettings(){  DebugLogPublisher<DebugLogPublisherCfg>[] publishers=loggerStorage.getLogPublishers().toArray(new DebugLogPublisher[0]);  for (  DebugTracer tracer : classTracers.values()) {    tracer.updateSettings(publishers);  }}  }
class C{  public FrameBodyTCOP(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public Separator(){  this(null);}  }
class C{  @Override public Promise<Void,AuthenticationException> cleanSubject(MessageInfoContext messageInfo,Subject subject){  return newResultPromise(null);}  }
class C{  public void testSigner(){  Signer s=new SignerStub();  assertNotNull(s);  assertNull(s.getPrivateKey());}  }
class C{  public Set searchGroupContainers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER),getSearchFilter(AMObject.GROUP_CONTAINER),wildcard,avPairs,level);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    serverTransaction=sipProvider.getNewServerTransaction(request);    dialog=(DialogExt)sipProvider.getNewDialog(serverTransaction);    dialog.disableSequenceNumberValidation();  } catch (  Exception e) {    e.printStackTrace();  }  for (int q=0; q < 1000; q++) {    try {      Response okResponse=messageFactory.createResponse(180,request);      FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);      from.removeParameter("tag");      Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");      ContactHeader contactHeader=headerFactory.createContactHeader(address);      ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);      toHeader.setTag("4321");      FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);      fromHeader.setTag("12345");      okResponse.addHeader(contactHeader);      serverTransaction.sendResponse(okResponse);    } catch (    Exception ex) {      ex.printStackTrace();    }    if (q % 100 == 0)     System.out.println("Send " + q);  }  try {    Response okResponse=messageFactory.createResponse(200,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);    fromHeader.setTag("12345");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private Value __parseValueFromAccess(AST.Access access,SemanticScope scope,boolean isTryingToAssign) throws SyntaxException {  List<Import> imports=fileNameToImport.get(access.line_col().fileName);  if (access.exp == null) {    if (access.name.equals("this")) {      if (scope.getThis() == null) {        err.SyntaxException("static scope do not have `this` to access",access.line_col());        return null;      }      return scope.getThis();    }    LeftValue v=scope.getLeftValue(access.name);    if (null == v) {      SFieldDef f=findFieldFromTypeDef(access.name,scope.type(),scope.type(),FIND_MODE_ANY,true);      if (null != f) {        if (f.modifiers().contains(SModifier.STATIC)) {          return new Ins.GetStatic(f,access.line_col());        } else {          return new Ins.GetField(f,scope.getThis(),access.line_col());        }      }      for (      Import im : imports) {        if (im.importAll) {          if (im.pkg == null) {            f=findFieldFromTypeDef(access.name,getTypeWithAccess(im.access,imports),scope.type(),FIND_MODE_STATIC,true);            if (null != f) {              return new Ins.GetStatic(f,access.line_col());            }          }        }      }    } else {      if (isTryingToAssign) {        if (!v.canChange()) {          err.SyntaxException("cannot assign an immutable variable",access.line_col());        }      }      return new Ins.TLoad(v,scope,access.line_col());    }    if (enableTypeAccess) {      try {        return parseValueFromAccessType(access,imports,scope.type());      } catch (      Throwable ignore) {      }    }    if (scope.getThis() == null) {      err.SyntaxException("cannot find static field " + scope.type().fullName() + "."+ access.name,access.line_col());      return null;    } else {      return invokeGetField(scope.getThis(),access.name,scope.type(),access.line_col());    }  } else {    if (access.exp instanceof AST.Access) {      AST.Access access1=(AST.Access)access.exp;      if (access1.exp == null && access1.name.equals("this")) {        if (scope.getThis() == null) {          err.SyntaxException("static methods don't have `this` variable",access1.line_col());          return null;        }        SFieldDef f=findFieldFromTypeDef(access.name,scope.type(),scope.type(),FIND_MODE_NON_STATIC,true);        if (null != f) {          return new Ins.GetField(f,scope.getThis(),access.line_col());        }        return invokeGetField(scope.getThis(),access.name,scope.type(),access.line_col());      } else       if (access1.exp instanceof AST.Access && access1.name.equals("this")) {        STypeDef type=getTypeWithAccess((AST.Access)access1.exp,imports);        assert type != null;        if (!type.isAssignableFrom(scope.type())) {          err.SyntaxException("`SuperClass` in SuperClass.this should be super class of this class",access1.line_col());          return null;        }        SFieldDef f=findFieldFromTypeDef(access.name,type,scope.type(),FIND_MODE_NON_STATIC,false);        if (null != f) {          return new Ins.GetField(f,scope.getThis(),access.line_col());        } else {          err.SyntaxException("cannot find static field `" + access.name + "` in "+ type,access.line_col());          return null;        }      }    } else     if (access.exp instanceof AST.PackageRef && enableTypeAccess) {      try {        return parseValueFromAccessType(access,imports,scope.type());      } catch (      Throwable ignore) {      }    }    STypeDef type=null;    if (access.exp instanceof AST.Access) {      try {        type=getTypeWithAccess((AST.Access)access.exp,imports);      } catch (      Throwable ignore) {      }    }    Value v=null;    SyntaxException ex=null;    try {      if (type != null) {        enableTypeAccess=false;      }      v=parseValueFromExpression(access.exp,null,scope);    } catch (    Throwable e) {      if (e instanceof SyntaxException)       ex=(SyntaxException)e;    } finally {      if (type != null) {        enableTypeAccess=true;      }    }    if (v != null && !isGetFieldAtRuntime(v))     type=null;    if (type != null) {      SFieldDef f=findFieldFromTypeDef(access.name,type,scope == null ? null : scope.type(),FIND_MODE_STATIC,true);      if (null != f) {        return new Ins.GetStatic(f,access.line_col());      } else {        try {          assert scope != null;          v=parseValueFromAccessType((AST.Access)access.exp,imports,scope.type());        } catch (        Throwable ignore) {          err.SyntaxException("cannot find accessible static field `" + access.name + "` in "+ type,access.line_col());          return null;        }      }    }    if (v != null) {      if (v.type() instanceof SArrayTypeDef) {        if (access.name.equals("length"))         return new Ins.ArrayLength(v,access.line_col()); else         return invokeGetField(v,access.name,scope.type(),access.line_col());      } else {        if (v.type() instanceof PrimitiveTypeDef) {          v=boxPrimitive(v,access.line_col());        }        SFieldDef f=findFieldFromTypeDef(access.name,v.type(),scope.type(),FIND_MODE_NON_STATIC,true);        if (null == f) {          return invokeGetField(v,access.name,scope.type(),access.line_col());        } else {          return new Ins.GetField(f,v,access.line_col());        }      }    }    if (ex == null) {      err.SyntaxException("cannot parse " + access,access.line_col());      return null;    } else     throw ex;  }}  }
class C{  void modifyEntry(IndexBuffer buffer,EntryID entryID,Entry oldEntry,Entry newEntry) throws StorageRuntimeException {  for (  MatchingRuleIndex index : indexIdToIndexes.values()) {    TreeMap<ByteString,Boolean> modifiedKeys=new TreeMap<>();    index.modifyEntry(oldEntry,newEntry,modifiedKeys);    for (    Map.Entry<ByteString,Boolean> modifiedKey : modifiedKeys.entrySet()) {      if (modifiedKey.getValue()) {        buffer.put(index,modifiedKey.getKey(),entryID);      } else {        buffer.remove(index,modifiedKey.getKey(),entryID);      }    }  }}  }
class C{  public static <T,U>T[] copyOfRange(U[] original,int from,int to,Class<? extends T[]> newType){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  @SuppressWarnings("unchecked") T[] copy=((Object)newType == (Object)Object[].class) ? (T[])new Object[newLength] : (T[])Array.newInstance(newType.getComponentType(),newLength);  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  @DataProvider(name="eclRequestControl") public Object[][] createECLRequestControlTest(){  return new Object[][]{{true,""},{false,"o=test:;"},{false,"o=test:000001210b6f21e904b100000002;"},{false,"o=test:000001210b6f21e904b100000001;o=test2:000001210b6f21e904b100000002;"},{false,"o=test:000001210b6f21e904b100000001 000001210b6f21e904b200000001;" + "o=test2:000001210b6f21e904b100000002 000001210b6f21e904b200000002;"}};}  }
class C{  public PdfXObject addImage(ImageData image,float x,float y,float height,boolean asInline,boolean dummy){  return addImage(image,height / image.getHeight() * image.getWidth(),0,0,height,x,y,asInline);}  }
class C{  public static void sort(double[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public double toDouble(){  if (m_length == 0)   return Double.NaN;  int i;  char c;  String valueString=fsb().getString(m_start,m_length);  for (i=0; i < m_length; i++)   if (!XMLCharacterRecognizer.isWhiteSpace(valueString.charAt(i)))   break;  if (i == m_length)   return Double.NaN;  if (valueString.charAt(i) == '-')   i++;  for (; i < m_length; i++) {    c=valueString.charAt(i);    if (c != '.' && (c < '0' || c > '9'))     break;  }  for (; i < m_length; i++)   if (!XMLCharacterRecognizer.isWhiteSpace(valueString.charAt(i)))   break;  if (i != m_length)   return Double.NaN;  try {    return new Double(valueString).doubleValue();  } catch (  NumberFormatException nfe) {    return Double.NaN;  }}  }
class C{  public void addListener(AMClientDataListener cdl){synchronized (listeners) {    if (!listeners.contains(cdl)) {      listeners.add(cdl);    }  }}  }
class C{  public NameFileFilter(String[] names){  this(names,null);}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.EntityConfigType createEntityConfigType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.EntityConfigTypeImpl();}  }
class C{  public void testCase6(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={9,18,27,36,45,54,63,9,18,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public final void testHashCode() throws CertificateEncodingException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  Certificate c2=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue(c1.hashCode() == c2.hashCode());  assertFalse(c1.hashCode() == new MyCertificate("TEST_TYPE",cert.getEncoded()).hashCode());  assertFalse(c1.hashCode() == cert.hashCode());}  }
class C{  public static boolean isCorrectConfirmationMethod(SubjectConfirmation sc){  if (sc == null) {    return false;  }  Set cmSet=sc.getConfirmationMethod();  if ((cmSet == null) || (cmSet.size() != 1)) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLUtils.isCorrectConfirmationMethod:" + " missing ConfirmationMethod in the Subject.");    }    return false;  }  String conMethod=(String)cmSet.iterator().next();  if ((conMethod == null) || (!conMethod.equals(SAMLConstants.CONFIRMATION_METHOD_IS))) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLUtils.isCorrectConfirmationMethod:" + " wrong ConfirmationMethod value.");    }    return false;  }  return true;}  }
class C{  public Set<BrdItem> filter(Set<BrdItem> p_items){  Set<BrdItem> result=new TreeSet<BrdItem>();  for (  BrdItem curr_item : p_items) {    if (curr_item.is_selected_by_filter(this)) {      result.add(curr_item);    }  }  return result;}  }
class C{  public FrameBodySYLT(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void reset() throws IOException {synchronized (lock) {    ensureOpen();    next=mark;  }}  }
class C{  public void testKeyPairGenerator03() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < algs.length; i++) {    try {      KeyPairGenerator.getInstance(algs[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      KeyPairGenerator.getInstance(algs[i],"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public void componentRemoved(ContainerEvent e){  ((ContainerListener)a).componentRemoved(e);  ((ContainerListener)b).componentRemoved(e);}  }
class C{  protected void deployDirectories(File appBase,String[] files){  if (files == null)   return;  ExecutorService es=host.getStartStopExecutor();  List<Future<?>> results=new ArrayList<>();  for (int i=0; i < files.length; i++) {    if (files[i].equalsIgnoreCase("META-INF"))     continue;    if (files[i].equalsIgnoreCase("WEB-INF"))     continue;    File dir=new File(appBase,files[i]);    if (dir.isDirectory()) {      ContextName cn=new ContextName(files[i],false);      if (isServiced(cn.getName()) || deploymentExists(cn.getName()))       continue;      results.add(es.submit(new DeployDirectory(this,cn,dir)));    }  }  for (  Future<?> result : results) {    try {      result.get();    } catch (    Exception e) {      log.error(sm.getString("hostConfig.deployDir.threaded.error"),e);    }  }}  }
class C{  public String[] findLifecycleListenerNames() throws MBeanException {  Container container=null;  List<String> result=new ArrayList<>();  try {    container=(Container)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  LifecycleListener[] listeners=container.findLifecycleListeners();  for (  LifecycleListener listener : listeners) {    result.add(listener.getClass().getName());  }  return result.toArray(new String[result.size()]);}  }
class C{  public static String dumpBeans(MBeanServer mbeanServer,Set<ObjectName> names){  StringBuilder buf=new StringBuilder();  Iterator<ObjectName> it=names.iterator();  while (it.hasNext()) {    ObjectName oname=it.next();    buf.append("Name: ");    buf.append(oname.toString());    buf.append(CRLF);    try {      MBeanInfo minfo=mbeanServer.getMBeanInfo(oname);      String code=minfo.getClassName();      if ("org.apache.commons.modeler.BaseModelMBean".equals(code)) {        code=(String)mbeanServer.getAttribute(oname,"modelerType");      }      buf.append("modelerType: ");      buf.append(code);      buf.append(CRLF);      MBeanAttributeInfo attrs[]=minfo.getAttributes();      Object value=null;      for (int i=0; i < attrs.length; i++) {        if (!attrs[i].isReadable())         continue;        String attName=attrs[i].getName();        if ("modelerType".equals(attName))         continue;        if (attName.indexOf('=') >= 0 || attName.indexOf(':') >= 0 || attName.indexOf(' ') >= 0) {          continue;        }        try {          value=mbeanServer.getAttribute(oname,attName);        } catch (        JMRuntimeException rme) {          Throwable cause=rme.getCause();          if (cause instanceof UnsupportedOperationException) {            if (log.isDebugEnabled()) {              log.debug("Error getting attribute " + oname + " "+ attName,rme);            }          } else           if (cause instanceof NullPointerException) {            if (log.isDebugEnabled()) {              log.debug("Error getting attribute " + oname + " "+ attName,rme);            }          } else {            log.error("Error getting attribute " + oname + " "+ attName,rme);          }          continue;        }catch (        Throwable t) {          ExceptionUtils.handleThrowable(t);          log.error("Error getting attribute " + oname + " "+ attName,t);          continue;        }        if (value == null)         continue;        String valueString;        try {          Class<?> c=value.getClass();          if (c.isArray()) {            int len=Array.getLength(value);            StringBuilder sb=new StringBuilder("Array[" + c.getComponentType().getName() + "] of length "+ len);            if (len > 0) {              sb.append(CRLF);            }            for (int j=0; j < len; j++) {              sb.append("\t");              Object item=Array.get(value,j);              if (item == null) {                sb.append("NULL VALUE");              } else {                try {                  sb.append(escape(item.toString()));                } catch (                Throwable t) {                  ExceptionUtils.handleThrowable(t);                  sb.append("NON-STRINGABLE VALUE");                }              }              if (j < len - 1) {                sb.append(CRLF);              }            }            valueString=sb.toString();          } else {            valueString=escape(value.toString());          }          buf.append(attName);          buf.append(": ");          buf.append(valueString);          buf.append(CRLF);        } catch (        Throwable t) {          ExceptionUtils.handleThrowable(t);        }      }    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);    }    buf.append(CRLF);  }  return buf.toString();}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterDelete(Context context,DeleteRequest request,RequestHandler next){  final String resource=ServerContextUtils.getResourceId(request,context);  final String action=ServerContextUtils.getDeleteString(request);  logAccess(resource,action,context);  return next.handleDelete(context,request);}  }
class C{  public FrameBodyTORY(){}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  public ReconAuditEventBuilder reconAction(ReconciliationService.ReconAction action){  if (null != action) {    jsonValue.put(RECON_ACTION,action.name());  }  return self();}  }
class C{  @DataProvider(name="invalidasciidata") public Object[][] createInValidASCIIData(){  return new Object[][]{{'\u200A'}};}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.FederationTerminationNotificationType createFederationTerminationNotificationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.FederationTerminationNotificationTypeImpl();}  }
class C{  public java.awt.Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  if (image == null)   return null;  int f=foreground.getRGB();  int g=background.getRGB();  java.awt.Canvas canvas=new java.awt.Canvas();  int w=width + 2 * ws;  int h=height + 2 * ws;  int[] pix=new int[w * h];  int stride=(w + 7) / 8;  int ptr=0;  for (int k=0; k < h; ++k) {    int p=k * stride;    for (int j=0; j < w; ++j) {      int b=image[p + j / 8] & 0xff;      b<<=j % 8;      pix[ptr++]=(b & 0x80) == 0 ? g : f;    }  }  java.awt.Image img=canvas.createImage(new java.awt.image.MemoryImageSource(w,h,pix,0,w));  return img;}  }
class C{  public void fill_ellipse(PlaEllipse p_ellipse,Graphics p_g,Color p_color,double p_translucency_factor){  PlaEllipse[] ellipse_arr=new PlaEllipse[1];  ellipse_arr[0]=p_ellipse;  fill_ellipse_arr(ellipse_arr,p_g,p_color,p_translucency_factor);}  }
class C{  public X500Name(String dirName){  CertificateInfo.X509NameTokenizer nTok=new CertificateInfo.X509NameTokenizer(dirName);  while (nTok.hasMoreTokens()) {    String token=nTok.nextToken();    int index=token.indexOf('=');    if (index == -1) {      throw new IllegalArgumentException();    }    String id=token.substring(0,index).toUpperCase();    String value=token.substring(index + 1);    List<String> vs=values.get(id);    if (vs == null) {      vs=new ArrayList<>();      values.put(id,vs);    }    vs.add(value);  }}  }
class C{  public ByteStringBuilder ensureAdditionalCapacity(final int size){  final int newCount=this.length + size;  if (newCount > buffer.length) {    final byte[] newbuffer=new byte[Math.max(buffer.length << 1,newCount)];    System.arraycopy(buffer,0,newbuffer,0,buffer.length);    buffer=newbuffer;  }  return this;}  }
class C{  protected FocusListener createFocusListener(){  return getHandler();}  }
class C{  @Override public String toString(){  return getClass().getName() + "[attribute=" + myAttribute+ ", field="+ myField+ ", beginIndex="+ beginIndex+ ", endIndex="+ endIndex+ "]";}  }
class C{  public static List<SearchResultEntry> findMethods(String text,boolean byDesc){  List<SearchResultEntry> results=new ArrayList<SearchResultEntry>();  for (  MappedClass mc : VisualizerWindow.instance.getMappings().values()) {    if (byDesc) {      List<MappedMember> methodList=mc.findMethodsByDesc(text);      for (      MappedMember mm : methodList) {        results.add(new SearchResultEntry(mc.getNode(),mm.getMethodNode(),-1));      }    } else {      List<MappedMember> methodList=mc.findMethodsByName(text,false);      for (      MappedMember mm : methodList) {        results.add(new SearchResultEntry(mc.getNode(),mm.getMethodNode(),-1));      }    }  }  return results;}  }
class C{  public Future<Job> save(){  Objects.requireNonNull(this.type,"Job type cannot be null");  if (this.id > 0)   return update();  Future<Job> future=Future.future();  client.incr(RedisHelper.getKey("ids"),null);  return future.compose(null);}  }
class C{  protected void IdKeyPattern() throws javax.xml.transform.TransformerException {  FunctionCall();}  }
class C{  public void waitForSuspension() throws InterruptedException, ExecutionException {  if (programPromise == null)   return;  CpsThreadGroup g=programPromise.get();  g.scheduleRun().get();}  }
class C{  public void addNotify(ComponentPeer peer){  if (peer == componentPeer)   return;  componentPeer=peer;  for (Component c=component; c != null && peer instanceof LightweightPeer; c=c.getParent()) {    peer=c.getPeer();  }  if (peer instanceof DropTargetPeer) {    nativePeer=peer;    ((DropTargetPeer)peer).addDropTarget(this);  } else {    nativePeer=null;  }}  }
class C{  private void processWorkerExit(Worker w,boolean completedAbruptly){  if (completedAbruptly)   decrementWorkerCount();  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    completedTaskCount+=w.completedTasks;    workers.remove(w);  }  finally {    mainLock.unlock();  }  tryTerminate();  int c=ctl.get();  if (runStateLessThan(c,STOP)) {    if (!completedAbruptly) {      int min=allowCoreThreadTimeOut ? 0 : corePoolSize;      if (min == 0 && !workQueue.isEmpty())       min=1;      if (workerCountOf(c) >= min)       return;    }    addWorker(null,false);  }}  }
class C{  public Time createTime() throws SdpException {  TimeField timeImpl=new TimeField();  timeImpl.setZero();  return timeImpl;}  }
class C{  public CreationTemplate(String name,AttrSet required,AttrSet optional,Class cls){  this(name,required,optional);  ArrayList classes=new ArrayList();  classes.add(cls);  setCreationClasses(classes);}  }
class C{  public static boolean constantTimeAreEqual(byte[] a,byte[] b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  if (a.length != b.length) {    return false;  }  int nonEqual=0;  for (int i=0; i != a.length; i++) {    nonEqual|=(a[i] ^ b[i]);  }  return nonEqual == 0;}  }
class C{  public AtomicIntegerArray(int length){  array=new int[length];}  }
class C{  public ExtendedOperationWrapper(ExtendedOperation extended){  super(extended);}  }
class C{  public AffineTransform(){  m00=m11=1.0;}  }
class C{  public FrameBodyTOLY(){}  }
class C{  @Inject public UmaAuditTokenDatastore(JavaBeanAdapterFactory adapterFactory,TaskExecutor taskExecutor,TaskFactory taskFactory){  super((JavaBeanAdapter<UmaAuditEntry>)adapterFactory.create(UmaAuditEntry.class),taskExecutor,taskFactory);}  }
class C{  private void loadAndInstallEntryCache(String className,EntryCacheCfg configuration) throws InitializationException {  EntryCache<? extends EntryCacheCfg> entryCache=loadEntryCache(className,configuration,true);  cacheOrderMap.put(configuration.getCacheLevel(),entryCache);  cacheNameToLevelMap.put(configuration.dn(),configuration.getCacheLevel());  setCacheOrder(cacheOrderMap);  EntryCacheMonitorProvider monitor=new EntryCacheMonitorProvider(configuration.dn().rdn().getFirstAVA().getAttributeValue().toString(),entryCache);  try {    RootCfg rootConfiguration=serverContext.getRootConfig();    monitor.initializeMonitorProvider((EntryCacheMonitorProviderCfg)rootConfiguration.getMonitorProvider(DEFAULT_ENTRY_CACHE_MONITOR_PROVIDER));  } catch (  ConfigException ce) {    return;  }  entryCache.setEntryCacheMonitor(monitor);  DirectoryServer.registerMonitorProvider(monitor);}  }
class C{  public Value invokeMethodWithArgs(LineCol lineCol,STypeDef targetType,Value invokeOn,String methodName,List<Value> args,SemanticScope scope) throws SyntaxException {  List<SMethodDef> methods=new ArrayList<>();  int FIND_MODE;  if (invokeOn.equals(NullValue.get())) {    FIND_MODE=FIND_MODE_STATIC;  } else {    FIND_MODE=FIND_MODE_NON_STATIC;  }  if (targetType.equals(NullTypeDef.get())) {    targetType=getTypeWithName("java.lang.Object",LineCol.SYNTHETIC);  }  findMethodFromTypeWithArguments(lineCol,methodName,args,scope.type(),targetType,FIND_MODE,methods,true);  if (methods.isEmpty()) {    args.add(0,new Ins.GetClass(targetType,(SClassDef)getTypeWithName("java.lang.Class",LineCol.SYNTHETIC)));    args.add(1,invokeOn);    args.add(2,NullValue.get());    return new Ins.InvokeDynamic(getInvokeDynamicBootstrapMethod(),methodName,args,getTypeWithName("java.lang.Object",lineCol),Dynamic.INVOKE_STATIC,lineCol);  } else {    SMethodDef method=findBestMatch(args,methods,lineCol);    args=castArgsForMethodInvoke(args,method.getParameters(),lineCol);    if (method.modifiers().contains(SModifier.STATIC)) {      Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);      invokeStatic.arguments().addAll(args);      if (invokeStatic.type().equals(VoidType.get())) {        return new ValueAnotherType(getTypeWithName("lt.lang.Unit",LineCol.SYNTHETIC),invokeStatic,invokeStatic.line_col());      }      return invokeStatic;    } else     if (method.modifiers().contains(SModifier.PRIVATE)) {      Ins.InvokeSpecial invokeSpecial=new Ins.InvokeSpecial(invokeOn,method,lineCol);      invokeSpecial.arguments().addAll(args);      if (invokeSpecial.type().equals(VoidType.get())) {        return new ValueAnotherType(getTypeWithName("lt.lang.Unit",LineCol.SYNTHETIC),invokeSpecial,invokeSpecial.line_col());      }      return invokeSpecial;    } else     if (method.declaringType() instanceof SInterfaceDef) {      Ins.InvokeInterface invokeInterface=new Ins.InvokeInterface(invokeOn,method,lineCol);      invokeInterface.arguments().addAll(args);      if (invokeInterface.type().equals(VoidType.get())) {        return new ValueAnotherType(getTypeWithName("lt.lang.Unit",LineCol.SYNTHETIC),invokeInterface,invokeInterface.line_col());      }      return invokeInterface;    } else {      Ins.InvokeVirtual invokeVirtual=new Ins.InvokeVirtual(invokeOn,method,lineCol);      invokeVirtual.arguments().addAll(args);      if (invokeVirtual.type().equals(VoidType.get())) {        return new ValueAnotherType(getTypeWithName("lt.lang.Unit",LineCol.SYNTHETIC),invokeVirtual,invokeVirtual.line_col());      }      return invokeVirtual;    }  }}  }
class C{  public static void deregisterSASLMechanismHandler(String name){  DirectoryServer.deregisterSASLMechanismHandler(name);}  }
class C{  public static boolean serviceExists(ServiceConfig serviceConfig){  return serviceConfig != null && serviceConfig.exists();}  }
class C{  private String validateBackendName(final Set<BackendDescriptor> existingBackends,final Set<LocalizableMessage> errors){  final Object selectedItem=backends.getSelectedItem();  if (!selectedItem.equals(NEW_BACKEND_TEXT)) {    return selectedItem.toString();  }  final String backendName=newBackend.getText().trim();  if (backendName.length() == 0) {    errors.add(ERR_NEW_BACKEND_NAME_REQUIRED.get());    setPrimaryInvalid(lBackend);    return backendName;  }  for (  BackendDescriptor backend : existingBackends) {    if (backendName.equalsIgnoreCase(backend.getBackendID())) {      errors.add(ERR_BACKEND_ALREADY_EXISTS.get(backendName));      setPrimaryInvalid(lBackend);    }  }  return backendName;}  }
class C{  private static String toHexString(byte b[]){  int pos=0;  char[] c=new char[b.length * 2];  for (int i=0; i < b.length; i++) {    c[pos++]=toHex[(b[i] >> 4) & 0x0F];    c[pos++]=toHex[b[i] & 0x0f];  }  return new String(c);}  }
class C{  public PrinterName(String printerName,Locale locale){  super(printerName,locale);}  }
class C{  private static void parseProperties(Properties p){  ProviderImpl impl=null;  String key=null;  String[] propertyNames=null;  for (Enumeration<?> e=p.propertyNames(); e.hasMoreElements(); ) {    String str=(String)e.nextElement();    int w=str.length();    if (str.startsWith(SyncFactory.ROWSET_SYNC_PROVIDER)) {      impl=new ProviderImpl();      impl.setIndex(providerImplIndex++);      if (w == (SyncFactory.ROWSET_SYNC_PROVIDER).length()) {        propertyNames=getPropertyNames(false);      } else {        propertyNames=getPropertyNames(true,str.substring(w - 1));      }      key=p.getProperty(propertyNames[0]);      impl.setClassname(key);      impl.setVendor(p.getProperty(propertyNames[1]));      impl.setVersion(p.getProperty(propertyNames[2]));      implementations.put(key,impl);    }  }}  }
class C{  private void initializeService(){  try {    readServiceConfig();    Object[] cTypes=((Set)rawServiceData.get(LOCALE_CHARSET_ATTR)).toArray();    for (int i=0; i < cTypes.length; i++) {      createLocaleEntry((String)cTypes[i]);    }    cTypes=((Set)rawServiceData.get(CHARSET_ALIAS_ATTR)).toArray();    for (int i=0; i < cTypes.length; i++) {      createCharsetAliasEntry((String)cTypes[i]);    }  } catch (  SSOException ex) {    debug.error("Unable to get internal SSOToken for locale attribute ",ex);  }catch (  SMSException ex) {    debug.error("Unable to get  locale attribute value",ex);  }}  }
class C{  public static String print(Node node,String encoding){  if (node == null) {    return null;  }  try {    TransformerFactory tFactory=TransformerFactory.newInstance();    Transformer transformer=tFactory.newTransformer();    transformer.setOutputProperty("omit-xml-declaration","yes");    transformer.setOutputProperty("encoding",encoding);    DOMSource source=new DOMSource(node);    ByteArrayOutputStream os=new ByteArrayOutputStream(2000);    StreamResult result=new StreamResult(os);    transformer.transform(source,result);    return os.toString(encoding);  } catch (  Exception e) {    return null;  }}  }
class C{  public String scheme(){  return scheme;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.StatementAbstractType createStatementAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl();}  }
class C{  public boolean isFragment(){  return fragment;}  }
class C{  private static boolean signaturesAreTheSame(Method subM,Method parentM){  String name=parentM.getName();  if (subM.getName().equals(name)) {    if (subM.getParameterCount() == parentM.getParameterCount()) {      for (int i=0; i < subM.getParameterCount(); ++i) {        Class<?> subP=subM.getParameterTypes()[i];        Class<?> parentP=parentM.getParameterTypes()[i];        if (!subP.equals(parentP))         return false;      }    }    Set<Method> set;    if (overriddenMethods.containsKey(parentM)) {      set=overriddenMethods.get(parentM);    } else {      set=new HashSet<>();      overriddenMethods.put(parentM,set);    }    set.add(subM);    return true;  }  return false;}  }
class C{  public SaltedSHA1PasswordStorageScheme(){  super();}  }
class C{  public void registerExtension(String namespace){  if (namespaceIndex(namespace,m_extensions) == -1) {    int predef=namespaceIndex(namespace,m_predefExtensions);    if (predef != -1)     m_extensions.add(m_predefExtensions.get(predef)); else     if (!(m_unregisteredExtensions.contains(namespace)))     m_unregisteredExtensions.add(namespace);  }}  }
class C{  public void init(boolean trustAll,String keyStorePath,String keyStorePassword,String clientAlias,String trustStorePath,String trustStorePassword) throws SSLConnectionException {  try {    SSLContext ctx=SSLContext.getInstance("TLS");    KeyManager[] keyManagers=null;    TrustManager[] trustManagers=null;    if (trustAll) {      BlindTrustManagerProvider blindTrustProvider=new BlindTrustManagerProvider();      trustManagers=blindTrustProvider.getTrustManagers();    } else     if (trustStorePath == null) {      trustManagers=PromptTrustManager.getTrustManagers();    } else {      TrustManager[] tmpTrustManagers=getTrustManagers(KeyStore.getDefaultType(),null,trustStorePath,trustStorePassword);      trustManagers=new TrustManager[tmpTrustManagers.length];      for (int i=0; i < trustManagers.length; i++) {        trustManagers[i]=new ExpirationCheckTrustManager((X509TrustManager)tmpTrustManagers[i]);      }    }    if (keyStorePath != null) {      keyManagers=getKeyManagers(KeyStore.getDefaultType(),null,keyStorePath,keyStorePassword);      if (clientAlias != null) {        keyManagers=SelectableCertificateKeyManager.wrap(keyManagers,CollectionUtils.newTreeSet(clientAlias));      }    }    ctx.init(keyManagers,trustManagers,new java.security.SecureRandom());    sslSocketFactory=ctx.getSocketFactory();  } catch (  Exception e) {    throw new SSLConnectionException(ERR_TOOLS_CANNOT_CREATE_SSL_CONNECTION.get(e.getMessage()),e);  }}  }
class C{  public String encode(){  return uriString;}  }
class C{  public static GSSAPISASLBindRequest unmodifiableGSSAPISASLBindRequest(final GSSAPISASLBindRequest request){  if (request instanceof UnmodifiableGSSAPISASLBindRequestImpl) {    return request;  }  return new UnmodifiableGSSAPISASLBindRequestImpl(request);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  String attrValue;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS(nullNS,"defaultAttr");  attribute=(Attr)attributes.getNamedItemNS(nullNS,"defaultAttr");  attrValue=attribute.getNodeValue();  assertNotNull("namednodemapremovenameditemns02",attribute);  assertEquals("namednodemapremovenameditemns02_attrValue","defaultVal",attrValue);}  }
class C{  public ContextRuleSet(String prefix){  this(prefix,true);}  }
class C{  public int addNodeInDocOrder(Node node,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  return addNodeInDocOrder(node,true,support);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  Attr newAttribute;  Attr oldAttr;  Attr districtAttr;  String attrVal;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=(Element)elementList.item(0);  newAttribute=doc.createAttribute("lang");  oldAttr=testAddress.setAttributeNode(newAttribute);  assertNull("old_attr_doesnt_exist",oldAttr);  districtAttr=testAddress.getAttributeNode("lang");  assertNotNull("new_district_accessible",districtAttr);  attrVal=testAddress.getAttribute("lang");  assertEquals("attr_value","",attrVal);}  }
class C{  public CompareOperation processCompare(ByteString rawEntryDN,String attributeType,ByteString assertionValue,List<Control> controls){  CompareOperationBasis compareOperation=new CompareOperationBasis(this,nextOperationID(),nextMessageID(),controls,rawEntryDN,attributeType,assertionValue);  compareOperation.setInternalOperation(true);  compareOperation.run();  return compareOperation;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentnodename.class,args);}  }
class C{  public void paint(Graphics g){  Color bColor;  if (isDropCell) {    bColor=DefaultLookup.getColor(this,ui,"Tree.dropCellBackground");    if (bColor == null) {      bColor=getBackgroundSelectionColor();    }  } else   if (selected) {    bColor=getBackgroundSelectionColor();  } else {    bColor=getBackgroundNonSelectionColor();    if (bColor == null) {      bColor=getBackground();    }  }  int imageOffset=-1;  if (bColor != null && fillBackground) {    imageOffset=getLabelStart();    g.setColor(bColor);    if (getComponentOrientation().isLeftToRight()) {      g.fillRect(imageOffset,0,getWidth() - imageOffset,getHeight());    } else {      g.fillRect(0,0,getWidth() - imageOffset,getHeight());    }  }  if (hasFocus) {    if (drawsFocusBorderAroundIcon) {      imageOffset=0;    } else     if (imageOffset == -1) {      imageOffset=getLabelStart();    }    if (getComponentOrientation().isLeftToRight()) {      paintFocus(g,imageOffset,0,getWidth() - imageOffset,getHeight(),bColor);    } else {      paintFocus(g,0,0,getWidth() - imageOffset,getHeight(),bColor);    }  }  super.paint(g);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehasattributes04.class,args);}  }
class C{  public long position(Blob pattern,long start) throws SerialException, SQLException {  isValid();  return position(pattern.getBytes(1,(int)(pattern.length())),start);}  }
class C{  public DefaultTableModel(Vector data,Vector columnNames){  setDataVector(data,columnNames);}  }
class C{  private static void initializeParams(){  String cacheSize=SystemProperties.get(CACHE_MAX_SIZE_KEY,"10000");  try {    maxSize=Integer.parseInt(cacheSize);    if (maxSize < 1) {      maxSize=10000;    }    if (debug.messageEnabled()) {      debug.message("CachedDirectoryServicesImpl.intializeParams() " + "Caching size set to: " + maxSize);    }  } catch (  NumberFormatException ne) {    maxSize=10000;    debug.warning("CachedDirectoryServicesImpl.initializeParams() " + "- invalid value for cache size specified. Setting " + "to default value: "+ maxSize);  }}  }
class C{  public String str(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.KeyIdentifierElement createKeyIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.KeyIdentifierElementImpl();}  }
class C{  protected void handleParseConversionException(Exception e) throws SAXException {  if (e instanceof RuntimeException)   throw (RuntimeException)e;  ParseConversionEvent pce=new ParseConversionEventImpl(ValidationEvent.ERROR,e.getMessage(),new ValidationEventLocatorImpl(context.getLocator()),e);  context.handleEvent(pce,true);}  }
class C{  public InterruptedIOException(String detailMessage){  super(detailMessage);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute1;  Attr attribute2;  Attr attrNode;  String attrName;  String attrNS;  String attrValue;  NamedNodeMap attributes;  Attr newAttribute;  int length;  doc=(Document)load("staff",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/Level2","new:element");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p1:att");  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p2:att");  attribute2.setValue("value2");  newAttribute=element.setAttributeNodeNS(attribute1);  newAttribute=element.setAttributeNodeNS(attribute2);  attrNode=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/att1","att");  attrName=attrNode.getNodeName();  attrNS=attrNode.getNamespaceURI();  assertEquals("elementsetattributenodens01_attrName","p2:att",attrName);  assertEquals("elementsetattributenodens01_attrNS","http://www.w3.org/DOM/Test/att1",attrNS);  attributes=element.getAttributes();  length=(int)attributes.getLength();  assertEquals("length",1,length);}  }
class C{  @Override public Foo remove(long fooId) throws NoSuchFooException {  return remove((Serializable)fooId);}  }
class C{  public PlaceAutocompleteAdapter(Context context,int resource,GoogleApiClient googleApiClient,LatLngBounds bounds,AutocompleteFilter filter){  super(context,resource);  mResultList=new ArrayList<>();  mContext=context;  mGoogleApiClient=googleApiClient;  mBounds=bounds;  mPlaceFilter=filter;}  }
class C{  public boolean chainIsNotPinned(List<X509Certificate> chain){  for (  X509Certificate cert : chain) {    String fingerprint=getFingerprint(cert);    if (pinnedFingerprints.contains(fingerprint)) {      return false;    }  }  logPinFailure(chain);  return enforcing;}  }
class C{  private static void connectSSL(){  secureConnect();}  }
class C{  public GitHubClient(final String hostname,final int port,final String scheme){  final StringBuilder uri=new StringBuilder(scheme);  uri.append("://");  uri.append(hostname);  if (port > 0)   uri.append(':').append(port);  baseUri=uri.toString();  if (HOST_API.equals(hostname))   prefix=null; else   prefix=SEGMENT_V3_API;}  }
class C{  public ProtobufSchema parse(String schemaAsString) throws IOException {  return parseNative(schemaAsString).forFirstType();}  }
class C{  private void updateEnabledState(){  updateEnabledState(spinner,spinner.isEnabled());}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){}  }
class C{  private void checkExcludedIP(Set excluded,byte[] ip) throws PKIXNameConstraintValidatorException {  if (excluded.isEmpty()) {    return;  }  Iterator it=excluded.iterator();  while (it.hasNext()) {    byte[] ipWithSubnet=(byte[])it.next();    if (isIPConstrained(ip,ipWithSubnet)) {      throw new PKIXNameConstraintValidatorException("IP is from an excluded subtree.");    }  }}  }
class C{  private void showNotification(Intent intent){  String title=intent.getStringExtra(ShowNotificationAction.PARAM_TITLE);  String message=intent.getStringExtra(ShowNotificationAction.PARAM_ALERT_MESSAGE);  UtilUI.showNotification(this,UtilUI.NOTIFICATION_ACTION,title,message);  ResultProcessor.process(this,intent,ResultProcessor.RESULT_SUCCESS,null);}  }
class C{  public void testSealedObject2() throws Exception {  try {    new SealedObject(null){    };    fail("NullPointerException should be thrown in the case " + "of null SealedObject.");  } catch (  NullPointerException e) {  }  String secret="secret string";  Cipher cipher=new NullCipher();  SealedObject so1=new SealedObject(secret,cipher);  SealedObject so2=new SealedObject(so1){  };  assertEquals("The secret content of the object should equals " + "to the secret content of initial object.",secret,so2.getObject(cipher));  assertEquals("The algorithm which was used to seal the object " + "should be the same as the algorithm used to seal the " + "initial object",so1.getAlgorithm(),so2.getAlgorithm());}  }
class C{  @Override public boolean isStretchWidth(){  return true;}  }
class C{  protected void writeHeader(RandomAccessFile file,int size) throws IOException {  String str;  int offset=0;  byte[] buffer=new byte[5];  str=Integer.toString(getSize());  for (int i=0; i < (5 - str.length()); i++) {    buffer[i]=(byte)'0';  }  offset+=(5 - str.length());  for (int i=0; i < str.length(); i++) {    buffer[i + offset]=(byte)str.charAt(i);  }  file.write(buffer);}  }
class C{  private static Subscription addNotificationObject(SetMultimap<DN,Subscription> nodeChangeSubscribers,DN dn,SMSEventListener eventListener){  final Subscription subscription=new Subscription(eventListener,dn,nodeChangeSubscribers);  nodeChangeSubscribers.put(dn,subscription);  return subscription;}  }
class C{  public ECPResponseImpl(){  isMutable=true;}  }
class C{  public ConfigurationFramework initialize(final String installPath,final String instancePath) throws ConfigException {  return initialize(installPath,instancePath,RootCfgDefn.class.getClassLoader());}  }
class C{  @Override public void store(PrintWriter aWriter,int indent,Object aElement) throws Exception {  StoreDescription elementDesc=getRegistry().findDescription(aElement.getClass());  if (elementDesc != null) {    if (aElement instanceof StandardManager) {      StandardManager manager=(StandardManager)aElement;      if (!isDefaultManager(manager)) {        if (log.isDebugEnabled())         log.debug(sm.getString("factory.storeTag",elementDesc.getTag(),aElement));        super.store(aWriter,indent,aElement);      }    } else {      super.store(aWriter,indent,aElement);    }  } else {    if (log.isWarnEnabled())     log.warn(sm.getString("factory.storeNoDescriptor",aElement.getClass()));  }}  }
class C{  public void test_digest$BII() throws Exception {  for (  Entry<Provider,List<String>> e : digestAlgs.entrySet()) {    for (    String algorithm : e.getValue()) {      MessageDigest digest=MessageDigest.getInstance(algorithm,e.getKey().getName());      assertNotNull(digest);      int len=digest.getDigestLength();      byte[] digestBytes=new byte[len];      digest.digest(digestBytes,0,digestBytes.length);    }    try {      MessageDigest.getInstance("SHA").digest(new byte[]{},Integer.MAX_VALUE,755);      fail();    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public Polynomial25519 reciprocal(){  return innerReciprocal(this);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue03.class,args);}  }
class C{  protected static ProgressDialog showProgressDialog(Activity activity,int titleResourceId,int messageResourceId){  return ProgressDialogUtils.showProgressDialog(activity,titleResourceId,messageResourceId);}  }
class C{  public Attachment(final String name,final T defaultValue){  this.name=name;  this.defaultValue=defaultValue;}  }
class C{  private void init(SSLParametersImpl sslParameters,String[] enabledProtocols,String[] enabledCipherSuites) throws IOException {  this.sslParameters=sslParameters;  this.enabledProtocols=enabledProtocols;  this.enabledCipherSuites=enabledCipherSuites;}  }
class C{  private static String parseEscapedSequence(StringCharacterIterator iterator) throws UnsupportedEncodingException {  char c=iterator.next();  if (c == '\\') {    return new String(new byte[]{0,'\\'},"UTF-8");  } else   if (c == '"') {    return new String(new byte[]{0,'\"'},"UTF-8");  } else   if (c == 'b') {    return new String(new byte[]{0,'\b'},"UTF-8");  } else   if (c == 'n') {    return new String(new byte[]{0,'\n'},"UTF-8");  } else   if (c == 'r') {    return new String(new byte[]{0,'\r'},"UTF-8");  } else   if (c == 't') {    return new String(new byte[]{0,'\t'},"UTF-8");  } else   if (c == 'U' || c == 'u') {    String byte1="";    byte1+=iterator.next();    byte1+=iterator.next();    String byte2="";    byte2+=iterator.next();    byte2+=iterator.next();    byte[] stringBytes={(byte)Integer.parseInt(byte1,16),(byte)Integer.parseInt(byte2,16)};    return new String(stringBytes,"UTF-8");  } else {    String num="";    num+=c;    num+=iterator.next();    num+=iterator.next();    int asciiCode=Integer.parseInt(num,8);    byte[] stringBytes={0,(byte)asciiCode};    return new String(stringBytes,"UTF-8");  }}  }
class C{  public Set createAssignableDynamicGroups(Map groupsMap) throws AMException, SSOException {  Iterator iter=groupsMap.keySet().iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupName=(String)iter.next();    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + groupName+ ","+ super.entryDN;    Map attributes=(Map)groupsMap.get(groupName);    AMAssignableDynamicGroupImpl groupImpl=new AMAssignableDynamicGroupImpl(super.token,groupDN);    groupImpl.setAttributes(attributes);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  public XMLString trim(){  return fixWhiteSpace(true,true,false);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.GenerationType createGenerationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GenerationTypeImpl();}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  @DataProvider(name="byteSequenceProvider") public Object[][] byteSequenceProvider() throws Exception {  final Object[][] builders=byteStringBuilderProvider();  final Object[][] addlSequences=new Object[builders.length + 1][];  System.arraycopy(builders,0,addlSequences,0,builders.length);  addlSequences[builders.length]=new Object[]{new ByteStringBuilder().appendBytes(EIGHT_BYTES).subSequence(2,6),new byte[]{b(0x03),b(0x04),b(0x05),b(0x06)}};  return addlSequences;}  }
class C{  @Override public boolean isValid(){  if (!this.isValid) {    return false;  }  if (this.expiring) {    return true;  }  if (ACTIVITY_CHECK && accessCount.get() > 0) {    return true;  }  if (maxInactiveInterval > 0) {    int timeIdle=(int)(getIdleTimeInternal() / 1000L);    if (timeIdle >= maxInactiveInterval) {      expire(true);    }  }  return this.isValid;}  }
class C{  public static Long valueOf(String string) throws NumberFormatException {  return valueOf(parseLong(string));}  }
class C{  void registerInternalPlugin(InternalDirectoryServerPlugin plugin){  pluginLock.lock();  try {    registerPlugin0(plugin,plugin.getPluginTypes());  }  finally {    pluginLock.unlock();  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AttributeAuthorityDescriptorElement createAttributeAuthorityDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AttributeAuthorityDescriptorElementImpl();}  }
class C{  public void fatalError(TransformerException exception) throws TransformerException {  if (m_throwExceptionOnError)   throw exception; else {    PrintWriter pw=getErrorWriter();    printLocation(pw,exception);    pw.println(exception.getMessage());  }}  }
class C{  public void executeLogin(Subject subject,IndexType loginIndexType,String loginIndexName,String locale,String redirectUrl) throws AuthLoginException {  boolean errorState=false;  internalAuthError=false;  processDone=false;  isFailed=false;  if (authContext.getLoginState() == null) {    debug.error("Error: authContext.getLoginState()");    loginStatus.setStatus(LoginStatus.AUTH_FAILED);    if (authContext.getLoginState() != null) {      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_ERROR);    }    setErrorMsgAndTemplate();    internalAuthError=true;    throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null);  }  java.util.Locale loginLocale=com.sun.identity.shared.locale.Locale.getLocale(authContext.getLoginState().getLocale());  bundle=AMResourceBundleCache.getInstance().getResBundle(BUNDLE_NAME,loginLocale);  exceedRetryLimit=AMResourceBundleCache.getInstance().getResBundle("amAuthLDAP",loginLocale).getString(ISAuthConstants.EXCEED_RETRY_LIMIT);  if (debug.messageEnabled()) {    debug.message("authContext.getLoginState() : " + authContext.getLoginState());  }  if (redirectUrl != null) {    Callback[] redirectCallback=new Callback[1];    redirectCallback[0]=new RedirectCallback(redirectUrl,null,"GET");    if (isPureJAAS()) {      authContext.getLoginState().setReceivedCallback_NoThread(redirectCallback);    } else {      authContext.getLoginState().setReceivedCallback(redirectCallback,this);    }    return;  }  this.indexType=loginIndexType;  this.indexName=loginIndexName;  try {    if (StringUtils.isNotEmpty(locale)) {      authContext.getLoginState().setLocale(locale);    }  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("Error setting locale");      debug.message("Exception ",e);    }  }  if (authContext.getOrgDN() != null && !authContext.getOrgDN().isEmpty()) {    orgDN=authContext.getOrgDN();    authContext.getLoginState().setQualifiedOrgDN(orgDN);  } else {    orgDN=authContext.getLoginState().getOrgDN();  }  String clientType=authContext.getLoginState().getClientType();  if (debug.messageEnabled()) {    debug.message("orgDN : " + orgDN);    debug.message("clientType : " + clientType);  }  if (indexType == IndexType.MODULE_INSTANCE && !authContext.getLoginState().getEnableModuleBasedAuth() && !indexName.equals(ISAuthConstants.APPLICATION_MODULE)) {    String moduleClassName=null;    try {      AMAuthenticationManager authManager=new AMAuthenticationManager(AccessController.doPrivileged(AdminTokenAction.getInstance()),orgDN);      AMAuthenticationInstance authInstance=authManager.getAuthenticationInstance(indexName);      moduleClassName=authInstance.getType();    } catch (    AMConfigurationException amce) {      debug.error("AMLoginContext.executeLogin(): Unable to get authentication config",amce);    }    if (moduleClassName != null && !moduleClassName.equalsIgnoreCase(ISAuthConstants.FEDERATION_MODULE)) {      throwExceptionIfModuleBasedAuthenticationDisabled();    }  }  IndexType prevIndexType=authContext.getLoginState().getIndexType();  if (prevIndexType == IndexType.LEVEL || prevIndexType == IndexType.COMPOSITE_ADVICE) {    authContext.getLoginState().setPreviousIndexType(prevIndexType);  }  authContext.getLoginState().setIndexType(indexType);  authContext.getLoginState().setIndexName(indexName);  try {    if (processIndexType(indexType,indexName,orgDN,clientType)) {      return;    }  } catch (  AuthLoginException le) {    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    debug.message("Error  : ",le);    throw le;  }catch (  Exception e) {    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    debug.message("Error : ",e);    throw new AuthLoginException(e);  }  configName=getConfigName(indexType,indexName,orgDN,clientType);  if (configName == null) {    authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_CONFIG_NOT_FOUND);    debug.message("Config not found");    setErrorMsgAndTemplate();    internalAuthError=true;    loginStatus.setStatus(LoginStatus.AUTH_FAILED);    authContext.getLoginState().logFailed(bundle.getString("noConfig"),"NOCONFIG");    auditor.auditLoginFailure(authContext.getLoginState(),NO_CONFIG);    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_CONFIG_NOT_FOUND,null);  }  if (debug.messageEnabled()) {    debug.message("Creating login context object\n" + "\n orgDN : " + orgDN + "\n configName : "+ configName);  }  try {    Configuration configuration=getConfiguration();    boolean jaasCheck=jaasModuleDetector.isPureJAASModulePresent(configName,configuration);    if (jaasCheck) {      debug.message("Using pure jaas mode.");      if (authThread == null) {        authThread=new AuthThreadManager();        authThread.start();      }    }    loginContext=LoginContextFactory.getInstance().createLoginContext(this,subject,configName,jaasCheck,configuration);    setJAASCheck(jaasCheck);  } catch (  AuthLoginException ae) {    debug.error("JAAS module for config: " + configName + ", "+ ae.getMessage());    if (debug.messageEnabled()) {      debug.message("AuthLoginException",ae);    }    if (indexType == IndexType.USER && AMAuthErrorCode.AUTH_CONFIG_NOT_FOUND.equals(ae.getErrorCode())) {      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_LOGIN_FAILED);    } else {      authContext.getLoginState().setErrorCode(ae.getErrorCode());    }    setErrorMsgAndTemplate();    authContext.getLoginState().logFailed(bundle.getString("loginContextCreateFailed"));    auditor.auditLoginFailure(authContext.getLoginState());    internalAuthError=true;    loginStatus.setStatus(LoginStatus.AUTH_FAILED);    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    throw ae;  }catch (  LoginException le) {    debug.error("in creating LoginContext.");    if (debug.messageEnabled()) {      debug.message("Exception ",le);    }    authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_ERROR);    authContext.getLoginState().logFailed(bundle.getString("loginContextCreateFailed"));    auditor.auditLoginFailure(authContext.getLoginState());    setErrorMsgAndTemplate();    loginStatus.setStatus(LoginStatus.AUTH_FAILED);    internalAuthError=true;    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null,le);  }catch (  SecurityException se) {    debug.error("security in creating LoginContext.");    if (debug.messageEnabled()) {      debug.message("Exception ",se);    }    authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_ERROR);    setErrorMsgAndTemplate();    authContext.getLoginState().logFailed(bundle.getString("loginContextCreateFailed"));    auditor.auditLoginFailure(authContext.getLoginState());    internalAuthError=true;    loginStatus.setStatus(LoginStatus.AUTH_FAILED);    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null);  }catch (  Exception e) {    debug.error("Creating DSAMECallbackHandler: " + e.getMessage());    authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_ERROR);    setErrorMsgAndTemplate();    authContext.getLoginState().logFailed(bundle.getString("loginContextCreateFailed"));    auditor.auditLoginFailure(authContext.getLoginState());    internalAuthError=true;    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    loginStatus.setStatus(LoginStatus.AUTH_FAILED);    throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null,e);  }  try {    if (isPureJAAS()) {      if (jaasThread != null) {        jaasThread.interrupt();        jaasThread=null;        errorState=true;      } else {        jaasThread=new JAASLoginThread(this);        jaasThread.start();      }    } else {      runLogin();    }  } catch (  IllegalThreadStateException ite) {    errorState=true;  }catch (  Exception e) {    errorState=true;  }  if (errorState) {    loginStatus.setStatus(LoginStatus.AUTH_RESET);    authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_ERROR);    setErrorMsgAndTemplate();    internalAuthError=true;    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null);  }  debug.message("AMLoginContext:Thread started... returning.");}  }
class C{  public BaseCalendarEvent(int id,String title,String description,String location,int color,Calendar startTime,Calendar endTime,boolean allDay,String startAndEndTime){  this.mId=id;  this.mTitle=title;  this.mDescription=description;  this.mLocation=location;  this.mColor=color;  this.mStartTime=startTime;  this.mEndTime=endTime;  this.mAllDay=allDay;  this.mStartAndEndTime=startAndEndTime;}  }
class C{  public JProgressBar(BoundedRangeModel newModel){  setModel(newModel);  updateUI();  setOrientation(defaultOrientation);  setBorderPainted(true);  setStringPainted(false);  setString(null);  setIndeterminate(false);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public XNull(){  super();}  }
class C{  public void init(FilterConfig filterConfig){  ServletContext cxt=filterConfig.getServletContext();  Map<String,String> configData=new HashMap<String,String>();  ResourceBundle res=ResourceBundle.getBundle("configparam");  for (Enumeration e=res.getKeys(); e.hasMoreElements(); ) {    String key=(String)e.nextElement();    String val=res.getString(key);    configData.put(key,val);  }  EmbeddedOpenSSO embOpenSSO=new EmbeddedOpenSSO(cxt,System.getProperty("user.home") + "/" + cxt.getContextPath(),configData);  initialized=embOpenSSO.isConfigured();  if (!initialized) {    embOpenSSO.configure();  }  embOpenSSO.startup();}  }
class C{  public void collapsePath(TreePath path){  setExpandedState(path,false);}  }
class C{  private <M extends Configuration>void deregisterAddListener(DN baseDN,ConfigurationAddListener<M> listener){  try {    if (configRepository.hasEntry(baseDN)) {      for (      ConfigAddListener configListener : configRepository.getAddListeners(baseDN)) {        if (configListener instanceof ConfigAddListenerAdaptor) {          ConfigAddListenerAdaptor<?> adaptor=(ConfigAddListenerAdaptor<?>)configListener;          ServerManagedObjectAddListener<?> smoListener=adaptor.getServerManagedObjectAddListener();          if (smoListener instanceof ServerManagedObjectAddListenerAdaptor<?>) {            ServerManagedObjectAddListenerAdaptor<?> adaptor2=(ServerManagedObjectAddListenerAdaptor<?>)smoListener;            if (adaptor2.getConfigurationAddListener() == listener) {              configRepository.deregisterAddListener(baseDN,adaptor);            }          }        }      }    } else {      deregisterDelayedAddListener(baseDN,listener);    }  } catch (  ConfigException e) {    logger.trace("Unable to deregister add listener",e);  }}  }
class C{  public SQLTimeoutException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  @Override protected void reducePermits(int reduction){  super.reducePermits(reduction);}  }
class C{  public void addMethod(String method){  if (method == null)   return;  String results[]=new String[methods.length + 1];  for (int i=0; i < methods.length; i++)   results[i]=methods[i];  results[methods.length]=method;  methods=results;}  }
class C{  protected String parseName(String name) throws NamingException {  if ((!initialContext) && (name.startsWith(prefix))) {    return (name.substring(prefixLength));  } else {    if (initialContext) {      return (name);    } else {      throw new NamingException(sm.getString("selectorContext.noJavaUrl"));    }  }}  }
class C{  public void addLdapConnectionArgument(final Argument argument) throws ArgumentException {  addArgument(argument,ldapArgGroup);}  }
class C{  private TypeSpec.Builder generateTypeBuilder(){  String clzName=parser.getClzName();  clzName=clzName + SUFFIX;  return TypeSpec.classBuilder(clzName).addModifiers(Modifier.PUBLIC);}  }
class C{  private static void extractPolyItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){  logger.log(Level.FINE,"Rect found" + currentGroupNode.getTextContent());  if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {    NamedNodeMap a=currentGroupNode.getAttributes();    int len=a.getLength();    for (int itemIndex=0; itemIndex < len; itemIndex++) {      Node n=a.item(itemIndex);      String name=n.getNodeName();      String value=n.getNodeValue();      if (name.equals(SVG_STYLE)) {        addStyleToPath(child,value);      } else       if (presentationMap.containsKey(name)) {        child.fillPresentationAttributes(name,value);      } else       if (name.equals(SVG_POINTS)) {        PathBuilder builder=new PathBuilder();        String[] split=value.split("[\\s,]+");        float baseX=Float.parseFloat(split[0]);        float baseY=Float.parseFloat(split[1]);        builder.absoluteMoveTo(baseX,baseY);        for (int j=2; j < split.length; j+=2) {          float x=Float.parseFloat(split[j]);          float y=Float.parseFloat(split[j + 1]);          builder.relativeLineTo(x - baseX,y - baseY);          baseX=x;          baseY=y;        }        builder.relativeClose();        child.setPathData(builder.toString());      }    }  }}  }
class C{  public void add(MutableTreeNode newChild){  if (newChild != null && newChild.getParent() == this)   insert(newChild,getChildCount() - 1); else   insert(newChild,getChildCount());}  }
class C{  public SASLResponse(String statusCode){  this.statusCode=statusCode;}  }
class C{  public static final int previousMonthLength(int year,int month){  return (month > 0) ? monthLength(year,month - 1) : 31;}  }
class C{  public boolean functionAvailable(String ns,String funcName) throws javax.xml.transform.TransformerException {  boolean isAvailable=false;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (extNS != null)     isAvailable=extNS.isFunctionAvailable(funcName);  }  return isAvailable;}  }
class C{  protected MemorySection(ConfigurationSection parent,String path){  Validate.notNull(parent,"Parent cannot be null");  Validate.notNull(path,"Path cannot be null");  this.path=path;  this.parent=parent;  this.root=parent.getRoot();  Validate.notNull(root,"Path cannot be orphaned");  this.fullPath=createPath(parent,path);}  }
class C{  protected void paintHorizontalLine(Graphics g,JComponent c,int y,int left,int right){  if (lineTypeDashed) {    drawDashedHorizontalLine(g,y,left,right);  } else {    g.drawLine(left,y,right,y);  }}  }
class C{  public boolean removeAttribute(Attribute attribute,Collection<? super ByteString> missingValues){  attachment=null;  AttributeDescription attrDesc=attribute.getAttributeDescription();  AttributeType attrType=attrDesc.getAttributeType();  if (attrType.isObjectClass()) {    return removeObjectClassAttribute(attribute,missingValues);  }  return removeNonObjectClassAttribute(attribute,missingValues);}  }
class C{  public UserNamePasswordValidationException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public boolean isStored(){  return isISStored;}  }
class C{  private void emitDataFrame(boolean outFinished) throws IOException {  long toWrite;synchronized (FramedStream.this) {    writeTimeout.enter();    try {      while (bytesLeftInWriteWindow <= 0 && !finished && !closed && errorCode == null) {        waitForIo();      }    }  finally {      writeTimeout.exitAndThrowIfTimedOut();    }    checkOutNotClosed();    toWrite=Math.min(bytesLeftInWriteWindow,sendBuffer.size());    bytesLeftInWriteWindow-=toWrite;  }  writeTimeout.enter();  try {    connection.writeData(id,outFinished && toWrite == sendBuffer.size(),sendBuffer,toWrite);  }  finally {    writeTimeout.exitAndThrowIfTimedOut();  }}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  @Override public void connectionClosed(final ConnectionEvent event){  final PooledConnection pc=(PooledConnection)event.getSource();  if (!validatingSet.contains(pc)) {    final PooledConnectionAndInfo pci=pcMap.get(pc);    if (pci == null) {      throw new IllegalStateException(NO_KEY_MESSAGE);    }    try {      _pool.returnObject(pci.getUserPassKey(),pci);    } catch (    final Exception e) {      System.err.println("CLOSING DOWN CONNECTION AS IT COULD " + "NOT BE RETURNED TO THE POOL");      pc.removeConnectionEventListener(this);      try {        _pool.invalidateObject(pci.getUserPassKey(),pci);      } catch (      final Exception e3) {        System.err.println("EXCEPTION WHILE DESTROYING OBJECT " + pci);        e3.printStackTrace();      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetnotationstype.class,args);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof IfdData) {    IfdData data=(IfdData)obj;    if (data.getId() == mIfdId && data.getTagCount() == getTagCount()) {      ExifTag[] tags=data.getAllTags();      for (      ExifTag tag : tags) {        if (ExifInterface.isOffsetTag(tag.getTagId())) {          continue;        }        ExifTag tag2=mExifTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public void unmanageApp(String contextName){  if (isServiced(contextName)) {    deployed.remove(contextName);    host.removeChild(host.findChild(contextName));  }}  }
class C{  @Override public void onFailure(Throwable t){}  }
class C{  public void paintPopupMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private static Object increment(final Object object,final Number amount,final JsonPointer field) throws BadRequestException {  if (object instanceof Long) {    return ((Long)object) + amount.longValue();  } else   if (object instanceof Integer) {    return ((Integer)object) + amount.intValue();  } else   if (object instanceof Float) {    return ((Float)object) + amount.floatValue();  } else   if (object instanceof Double) {    return ((Double)object) + amount.doubleValue();  } else {    throw new BadRequestException("The field '" + field + "' is not a number");  }}  }
class C{  public void sort(DTMIterator v,Vector keys,XPathContext support) throws javax.xml.transform.TransformerException {  m_keys=keys;  int n=v.getLength();  Vector nodes=new Vector();  for (int i=0; i < n; i++) {    NodeCompareElem elem=new NodeCompareElem(v.item(i));    nodes.addElement(elem);  }  Vector scratchVector=new Vector();  mergesort(nodes,scratchVector,0,n - 1,support);  for (int i=0; i < n; i++) {    v.setItem(((NodeCompareElem)nodes.elementAt(i)).m_node,i);  }  v.setCurrentPos(0);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s11_linear_no_tag_repository();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public void parseForMethod(GenericDeclaration genericDecl,String signature,Class<?>[] rawExceptionTypes){  setInput(genericDecl,signature);  if (!eof) {    parseMethodTypeSignature(rawExceptionTypes);  } else {    Method m=(Method)genericDecl;    this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;    Class<?>[] parameterTypes=m.getParameterTypes();    if (parameterTypes.length == 0) {      this.parameterTypes=ListOfTypes.EMPTY;    } else {      this.parameterTypes=new ListOfTypes(parameterTypes);    }    Class<?>[] exceptionTypes=m.getExceptionTypes();    if (exceptionTypes.length == 0) {      this.exceptionTypes=ListOfTypes.EMPTY;    } else {      this.exceptionTypes=new ListOfTypes(exceptionTypes);    }    this.returnType=m.getReturnType();  }}  }
class C{  public static DragSourceMotionListener add(DragSourceMotionListener a,DragSourceMotionListener b){  return (DragSourceMotionListener)addInternal(a,b);}  }
class C{  public Builder usage(AttributeUsage attributeUsage){  this.attributeUsage=attributeUsage;  return this;}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  fsb.append((char[])m_obj,m_start,m_length);}  }
class C{  public void testEquals(){  byte[] key=new byte[]{1,2,3,4,5};  String algorithm="Algorithm";  SecretKeySpec ks1=new SecretKeySpec(key,algorithm);  SecretKeySpec ks2=new SecretKeySpec(key,algorithm);  SecretKeySpec ks3=new SecretKeySpec(key,algorithm);  assertTrue("The equivalence relation should be reflexive.",ks1.equals(ks1));  assertTrue("Objects built on the same parameters should be equal.",ks1.equals(ks2));  assertTrue("The equivalence relation should be symmetric.",ks2.equals(ks1));  assertTrue("Objects built on the equal parameters should be equal.",ks2.equals(ks3));  assertTrue("The equivalence relation should be transitive.",ks1.equals(ks3));  assertFalse("Should not be equal to null object.",ks1.equals(null));  ks2=new SecretKeySpec(new byte[]{1},algorithm);  assertFalse("Objects should not be equal.",ks1.equals(ks2));  ks2=new SecretKeySpec(key,"Another Algorithm");  assertFalse("Objects should not be equal.",ks1.equals(ks2));}  }
class C{  protected void expandParentAndReceiver(){  FHTreeStateNode parent=(FHTreeStateNode)getParent();  if (parent != null)   parent.expandParentAndReceiver();  expand();}  }
class C{  @AfterClass public void tearDown(){  TestCfg.cleanup();}  }
class C{  public byte[] close(){  Fax4PostEncode();  return outBuf.toByteArray();}  }
class C{  public synchronized void putAll(Map<? extends K,? extends V> t){  for (  Map.Entry<? extends K,? extends V> e : t.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public ServerSideSortRequestControl(String sortOrderString) throws LDAPException {  this(false,sortOrderString);}  }
class C{  public void dragOver(DragSourceDragEvent dsde){  ((DragSourceListener)a).dragOver(dsde);  ((DragSourceListener)b).dragOver(dsde);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetnotations.class,args);}  }
class C{  public StatusImpl(Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  public boolean update(Long dataTypeID,String dataTypeName,String dataTypeClassName){  if (dataTypeID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (dataTypeName != null) {    args.put(KEY_DATATYPENAME,dataTypeName);  }  if (dataTypeClassName != null) {    args.put(KEY_DATATYPECLASSNAME,dataTypeClassName);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_DATATYPEID + "=" + dataTypeID,null) > 0;  }  return false;}  }
class C{  public static int px2sp(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument08.class,args);}  }
class C{  public static long copyStream(InputStream in,OutputStream out) throws IOException {  Reject.ifNull(in,out);  final byte[] buffer=new byte[BUFFER_SIZE];  long bytesCopied=0L;  for (int bytesRead=in.read(buffer); bytesRead != -1; bytesRead=in.read(buffer)) {    out.write(buffer,0,bytesRead);    bytesCopied+=bytesRead;  }  return bytesCopied;}  }
class C{  public void testCase25(){  byte aBytes[]={-1,-1,-1,-1,-1,-1,-1,-1};  byte bBytes[]={-128,-128,-128,-128,-128,-128,-128,-128,-128};  int aSign=1;  int bSign=1;  byte rBytes[]={-128,127,127,127,127,127,127,127,127};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public void removeAll(Integer[] array){  for (int i=(array.length - 1); i >= 0; --i) {    list.remove(array[i].intValue());  }}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  static void detectAltText(XMPNode arrayNode){  if (arrayNode.getOptions().isArrayAlternate() && arrayNode.hasChildren()) {    boolean isAltText=false;    for (Iterator it=arrayNode.iterateChildren(); it.hasNext(); ) {      XMPNode child=(XMPNode)it.next();      if (child.getOptions().getHasLanguage()) {        isAltText=true;        break;      }    }    if (isAltText) {      arrayNode.getOptions().setArrayAltText(true);      normalizeLangArray(arrayNode);    }  }}  }
class C{  private Component createTextPane(){  LocalizableMessage text;  if (ce.getType() == UserDataCertificateException.Type.NOT_TRUSTED) {    text=INFO_CERTIFICATE_NOT_TRUSTED_TEXT.get(ce.getHost(),ce.getPort(),ce.getHost(),ce.getPort());  } else {    text=INFO_CERTIFICATE_NAME_MISMATCH_TEXT.get(ce.getHost(),ce.getPort(),ce.getHost(),ce.getHost(),ce.getPort(),ce.getHost(),ce.getPort());  }  JPanel p=UIFactory.makeJPanel();  p.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridwidth=GridBagConstraints.RELATIVE;  gbc.anchor=GridBagConstraints.NORTHWEST;  p.add(UIFactory.makeJLabel(UIFactory.IconType.WARNING_LARGE,null,UIFactory.TextStyle.NO_STYLE),gbc);  gbc.weightx=1.0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.fill=GridBagConstraints.BOTH;  gbc.insets.left=UIFactory.LEFT_INSET_PRIMARY_FIELD;  gbc.insets.bottom=0;  explanationPane=UIFactory.makeHtmlPane(null,UIFactory.INSTRUCTIONS_FONT);  explanationPane.setOpaque(false);  explanationPane.setEditable(false);  explanationPane.addHyperlinkListener(this);  p.add(explanationPane,gbc);  if (ce.getChain() != null && ce.getChain().length > 0) {    LocalizableMessageBuilder mb=new LocalizableMessageBuilder();    mb.append(text);    mb.append(INFO_CERTIFICATE_SHOW_DETAILS_TEXT.get());    explanationWithShowDetails=UIFactory.applyFontToHtml(mb.toString(),UIFactory.INSTRUCTIONS_FONT);    LocalizableMessageBuilder mb2=new LocalizableMessageBuilder();    mb2.append(text);    mb2.append(INFO_CERTIFICATE_HIDE_DETAILS_TEXT.get());    explanationWithHideDetails=UIFactory.applyFontToHtml(mb2.toString(),UIFactory.INSTRUCTIONS_FONT);    explanationPane.setText(explanationWithShowDetails);  } else {    explanationPane.setText(text.toString());  }  return p;}  }
class C{  public INV_OBJREF(){  this("");}  }
class C{  public void registerReplicationSession(DeltaSession session){  List<DeltaSession> sessions=crossContextSessions.get();  if (sessions != null) {    if (!sessions.contains(session)) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("ReplicationValve.crossContext.registerSession",session.getIdInternal(),session.getManager().getContext().getName()));      }      sessions.add(session);    }  }}  }
class C{  public static boolean usedInProtocol(Object session,String protocol){  SingleLogoutManager.debug.message("MultiProtocolUtils.usedInProtocol");  if ((session == null) || (protocol == null)) {    return false;  }  if (SingleLogoutManager.debug.messageEnabled()) {    SingleLogoutManager.debug.message("MultiProtocolUtils.usedInProto:" + " protocol=" + protocol + ", session="+ session);  }  try {    SessionProvider provider=SessionManager.getProvider();    String[] vals=provider.getProperty(session,SingleLogoutManager.FEDERATION_PROTOCOLS);    if (SingleLogoutManager.debug.messageEnabled()) {      SingleLogoutManager.debug.message("MultiProtocolUtils.usedInProtocol: protocols=" + vals);    }    if ((vals != null) && (vals.length != 0)) {      for (int i=0; i < vals.length; i++) {        if (protocol.equals(vals[i])) {          return true;        }      }    }    return false;  } catch (  SessionException ex) {    SingleLogoutManager.debug.message("MPUtils.usedInProtocol",ex);  }catch (  UnsupportedOperationException ex) {    SingleLogoutManager.debug.message("MPUtils.usedInProtocol",ex);  }  return false;}  }
class C{  public AuthErrorCodeException(String authErrorCode,String rbName,String messageCode){  this(authErrorCode,rbName,messageCode,null);}  }
class C{  public static List<Control> createDelayControlList(long delay){  Control c=new DelayRequestControl(false,delay);  return CollectionUtils.newArrayList(c);}  }
class C{  public BezierCurve(List<Point> controlPoints){  this.controlPoints=new ArrayList<>(controlPoints);}  }
class C{  public boolean isQuiet(){  return quietArg.isPresent();}  }
class C{  @Override public JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  toJSONObject(jo);  jo.put("pConditionName",pConditionName);  if (eCondition != null) {    JSONObject subjo=new JSONObject();    subjo.put("className",eCondition.getClass().getName());    subjo.put("state",eCondition.getState());    jo.put("memberECondition",subjo);  }  return jo;}  }
class C{  private void handleArgumentField(int begin,int end,int argIndex,FieldPosition position,List<FieldContainer> fields){  if (fields != null) {    fields.add(new FieldContainer(begin,end,Field.ARGUMENT,Integer.valueOf(argIndex)));  } else {    if (position != null && position.getFieldAttribute() == Field.ARGUMENT && position.getEndIndex() == 0) {      position.setBeginIndex(begin);      position.setEndIndex(end);    }  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public static String extractServerId(String id){  if (id == null || id.length() < 2) {    return null;  }  return id.substring(id.length() - 2);}  }
class C{  public void testCertPathValidator07() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < validValues.length; i++) {    certPV=CertPathValidator.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider name",certPV.getProvider().getName(),defaultProviderName);  }}  }
class C{  public static OAuthProblemException handleMissingParameters(Set<String> missingParams){  StringBuilder sb=new StringBuilder("Missing parameters: ");  if (null != missingParams && !missingParams.isEmpty()) {    for (    String missingParam : missingParams) {      sb.append(missingParam).append(" ");    }  }  return handleOAuthProblemException(sb.toString().trim());}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public String toHTML(){  StringBuffer buff=new StringBuffer();  boolean passed=passed();  String titleTag=(passed) ? "tblMainPassedSuite" : "tblMainFailedSuite";  String countTag=(passed) ? "tblMainPassed" : "tblMainFailed";  String urlName=name + "/index.html";  Object[] args={urlName,name};  String hrefName=MessageFormat.format(HTMLConstants.HREF,args);  Object[] params={titleTag,hrefName};  buff.append("<tr>");  buff.append(MessageFormat.format(HTMLConstants.TBL_ENTRY,params));  params[0]=countTag;  params[1]=Integer.toString(getNumberOfPasses());  buff.append(MessageFormat.format(HTMLConstants.TBL_ENTRY,params));  params[1]=Integer.toString(getNumberOfFailed());  buff.append(MessageFormat.format(HTMLConstants.TBL_ENTRY,params));  params[1]=Integer.toString(getNumberOfSkipped());  buff.append(MessageFormat.format(HTMLConstants.TBL_ENTRY,params));  buff.append("</tr>");  return buff.toString();}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  infoKey=((InfoKey)elems.elementAt(0)).str;  infoValue=((InfoValue)elems.elementAt(1)).str;}  }
class C{  public void testGetDigestAlgorithm(){  String mdName="SHA-1";  String mgfName="MGF1";  AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;  PSource pSrc=PSource.PSpecified.DEFAULT;  OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);  assertTrue("The returned value does not equal to the " + "value specified in the constructor.",ps.getDigestAlgorithm().equals(mdName));}  }
class C{  public FramedAppleTalkNetworkAttribute(int networkNumber){  super(OctetUtils.toOctets(AttributeType.FRAMED_APPLETALK_NETWORK,networkNumber));  this.networkNumber=networkNumber;}  }
class C{  protected void paintDeterminate(Graphics g,JComponent c){  if (!(g instanceof Graphics2D)) {    return;  }  Insets b=progressBar.getInsets();  int barRectWidth=progressBar.getWidth() - (b.right + b.left);  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);  if (barRectWidth <= 0 || barRectHeight <= 0) {    return;  }  int cellLength=getCellLength();  int cellSpacing=getCellSpacing();  int amountFull=getAmountFull(b,barRectWidth,barRectHeight);  Graphics2D g2=(Graphics2D)g;  g2.setColor(progressBar.getForeground());  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    if (cellSpacing == 0 && amountFull > 0) {      g2.setStroke(new BasicStroke((float)barRectHeight,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL));    } else {      g2.setStroke(new BasicStroke((float)barRectHeight,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0.f,new float[]{cellLength,cellSpacing},0.f));    }    if (BasicGraphicsUtils.isLeftToRight(c)) {      g2.drawLine(b.left,(barRectHeight / 2) + b.top,amountFull + b.left,(barRectHeight / 2) + b.top);    } else {      g2.drawLine((barRectWidth + b.left),(barRectHeight / 2) + b.top,barRectWidth + b.left - amountFull,(barRectHeight / 2) + b.top);    }  } else {    if (cellSpacing == 0 && amountFull > 0) {      g2.setStroke(new BasicStroke((float)barRectWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL));    } else {      g2.setStroke(new BasicStroke((float)barRectWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0f,new float[]{cellLength,cellSpacing},0f));    }    g2.drawLine(barRectWidth / 2 + b.left,b.top + barRectHeight,barRectWidth / 2 + b.left,b.top + barRectHeight - amountFull);  }  if (progressBar.isStringPainted()) {    paintString(g,b.left,b.top,barRectWidth,barRectHeight,amountFull,b);  }}  }
class C{  public SessionException(Throwable rootCause){  super(rootCause);}  }
class C{  public static Fragment4 newInstance(int sectionNumber){  Fragment4 fragment=new Fragment4();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap notations;  Entity entity;  Notation notation;  String entityName;  String notationName;  String nullNS=null;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  entity=(Entity)entities.getNamedItemNS(nullNS,"ent1");  assertNull("entityNull",entity);  notation=(Notation)notations.getNamedItemNS(nullNS,"notation1");  assertNull("notationNull",notation);}  }
class C{  public ParameterBlock add(Object obj){  parameters.addElement(obj);  return this;}  }
class C{  public JKColumnFilter(final JKTableColumn column){  this.column=column;}  }
class C{  public int compare(Object o1,Object o2){  String s1=(String)o1;  return (s1.compareTo((String)o2));}  }
class C{  synchronized void remove(CSN csn){  pendingChanges.remove(csn);}  }
class C{  @Override public String toString(){  String pattern=printerParser.toString();  pattern=pattern.startsWith("[") ? pattern : pattern.substring(1,pattern.length() - 1);  return pattern;}  }
class C{  public void addAttribute(String attrName,Set values) throws SSOException, SMSException {  validateServiceInstance();  SMSEntry e=instance.getSMSEntry();  SMSUtils.addAttribute(e,attrName,values,Collections.EMPTY_SET);  e.save(token);  instance.refresh(e);}  }
class C{  public static ComponentUI createUI(JComponent c){  String key=c.getUIClassID().intern();  if (key == "ButtonUI") {    return SynthButtonUI.createUI(c);  } else   if (key == "CheckBoxUI") {    return SynthCheckBoxUI.createUI(c);  } else   if (key == "CheckBoxMenuItemUI") {    return SynthCheckBoxMenuItemUI.createUI(c);  } else   if (key == "ColorChooserUI") {    return SynthColorChooserUI.createUI(c);  } else   if (key == "ComboBoxUI") {    return SynthComboBoxUI.createUI(c);  } else   if (key == "DesktopPaneUI") {    return SynthDesktopPaneUI.createUI(c);  } else   if (key == "DesktopIconUI") {    return SynthDesktopIconUI.createUI(c);  } else   if (key == "EditorPaneUI") {    return SynthEditorPaneUI.createUI(c);  } else   if (key == "FileChooserUI") {    return SynthFileChooserUI.createUI(c);  } else   if (key == "FormattedTextFieldUI") {    return SynthFormattedTextFieldUI.createUI(c);  } else   if (key == "InternalFrameUI") {    return SynthInternalFrameUI.createUI(c);  } else   if (key == "LabelUI") {    return SynthLabelUI.createUI(c);  } else   if (key == "ListUI") {    return SynthListUI.createUI(c);  } else   if (key == "MenuBarUI") {    return SynthMenuBarUI.createUI(c);  } else   if (key == "MenuUI") {    return SynthMenuUI.createUI(c);  } else   if (key == "MenuItemUI") {    return SynthMenuItemUI.createUI(c);  } else   if (key == "OptionPaneUI") {    return SynthOptionPaneUI.createUI(c);  } else   if (key == "PanelUI") {    return SynthPanelUI.createUI(c);  } else   if (key == "PasswordFieldUI") {    return SynthPasswordFieldUI.createUI(c);  } else   if (key == "PopupMenuSeparatorUI") {    return SynthSeparatorUI.createUI(c);  } else   if (key == "PopupMenuUI") {    return SynthPopupMenuUI.createUI(c);  } else   if (key == "ProgressBarUI") {    return SynthProgressBarUI.createUI(c);  } else   if (key == "RadioButtonUI") {    return SynthRadioButtonUI.createUI(c);  } else   if (key == "RadioButtonMenuItemUI") {    return SynthRadioButtonMenuItemUI.createUI(c);  } else   if (key == "RootPaneUI") {    return SynthRootPaneUI.createUI(c);  } else   if (key == "ScrollBarUI") {    return SynthScrollBarUI.createUI(c);  } else   if (key == "ScrollPaneUI") {    return SynthScrollPaneUI.createUI(c);  } else   if (key == "SeparatorUI") {    return SynthSeparatorUI.createUI(c);  } else   if (key == "SliderUI") {    return SynthSliderUI.createUI(c);  } else   if (key == "SpinnerUI") {    return SynthSpinnerUI.createUI(c);  } else   if (key == "SplitPaneUI") {    return SynthSplitPaneUI.createUI(c);  } else   if (key == "TabbedPaneUI") {    return SynthTabbedPaneUI.createUI(c);  } else   if (key == "TableUI") {    return SynthTableUI.createUI(c);  } else   if (key == "TableHeaderUI") {    return SynthTableHeaderUI.createUI(c);  } else   if (key == "TextAreaUI") {    return SynthTextAreaUI.createUI(c);  } else   if (key == "TextFieldUI") {    return SynthTextFieldUI.createUI(c);  } else   if (key == "TextPaneUI") {    return SynthTextPaneUI.createUI(c);  } else   if (key == "ToggleButtonUI") {    return SynthToggleButtonUI.createUI(c);  } else   if (key == "ToolBarSeparatorUI") {    return SynthSeparatorUI.createUI(c);  } else   if (key == "ToolBarUI") {    return SynthToolBarUI.createUI(c);  } else   if (key == "ToolTipUI") {    return SynthToolTipUI.createUI(c);  } else   if (key == "TreeUI") {    return SynthTreeUI.createUI(c);  } else   if (key == "ViewportUI") {    return SynthViewportUI.createUI(c);  }  return null;}  }
class C{  public static GeometryCollection fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  gson.registerTypeAdapter(Geometry.class,new GeometryDeserializer());  return gson.create().fromJson(json,GeometryCollection.class);}  }
class C{  private void processIpv4(final String rule){  final String[] s=rule.split("/",-1);  this.ruleMask=new byte[IN4ADDRSZ];  this.prefixMask=new byte[IN4ADDRSZ];  prefixMask(processPrefix(s,IPV4MAXPREFIX));  processIPv4Subnet(s.length == 0 ? rule : s[0]);}  }
class C{  private void fireMenuKeyPressed(MenuKeyEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyPressed(event);    }  }}  }
class C{  public void onEnterAnimationComplete(){}  }
class C{  @Override public Promise<Void,AuthenticationException> cleanSubject(MessageInfoContext messageInfo,Subject subject){  return newResultPromise(null);}  }
class C{  public static void saveCurrentViewChecksum(){  final String currentView=JKJsfUtil.getCurrentView();  if (currentView == null) {    throw new IllegalStateException("current view is null");  }  final long checksum=JKJsfUtil.calculateCurrentViewChecksum();  JKJsfUtil.getSessionMap().put(JKJsfUtil.getChecksumKey(currentView),checksum);}  }
class C{  public static void removeSiteSecondaryURLs(SSOToken ssoToken,String siteName,Collection secondaryURLs) throws SMSException, SSOException {  ServiceConfig rootNode=getRootSiteConfig(ssoToken);  ServiceConfig sc=rootNode.getSubConfig(siteName);  ServiceConfig accessPoint=sc.getSubConfig(SUBCONFIG_ACCESS_URL);  Set secondary=accessPoint.getSubConfigNames("*");  if ((secondary != null) && !secondary.isEmpty()) {    for (Iterator i=secondary.iterator(); i.hasNext(); ) {      String secName=(String)i.next();      if (secondaryURLs.contains(secName)) {        accessPoint.removeSubConfig(secName);      }    }  }}  }
class C{  public boolean isCachedFile(){  return true;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public static UnbindRequest newUnbindRequest(){  return new UnbindRequestImpl();}  }
class C{  private void logMessage(String message){  checkLogFile();  String logInfo=message;  if (printWriter != null) {    printWriter.println(logInfo);  }  if (sipStack.isLoggingEnabled()) {    stackLogger.logInfo(logInfo);  }}  }
class C{  private String formatQuoteToCSV(OHLCquote quote){  String csvData=null;  CsvMapper mapper=new CsvMapper();  CsvSchema schema=mapper.schemaFor(OHLCquote.class).withHeader().withColumnSeparator(',');  try {    csvData=mapper.writer(schema).writeValueAsString(quote);  } catch (  JsonProcessingException e) {    System.out.println("TimeRangeOHLCActionHandler.formatQuoteToCSV(): ERROR: JsonProcessingException on quote");    e.printStackTrace();  }  return csvData;}  }
class C{  public synchronized void release(){  for (int i=current; i >= 0; i--) {    doRelease(handlers[i]);  }}  }
class C{  public ConfigurationException(){  super();}  }
class C{  public void removeAllElements(){  if (objects.size() > 0) {    int firstIndex=0;    int lastIndex=objects.size() - 1;    objects.removeAllElements();    selectedObject=null;    fireIntervalRemoved(this,firstIndex,lastIndex);  } else {    selectedObject=null;  }}  }
class C{  private void handleNonCORS(final HttpServletRequest request,final HttpServletResponse response,final FilterChain filterChain) throws IOException, ServletException {  filterChain.doFilter(request,response);}  }
class C{  private void writeLDIFLine(Attribute attribute,final boolean typesOnly,BufferedWriter writer,boolean wrapLines,int wrapColumn) throws IOException {  String attrName=attribute.getAttributeDescription().toString();  if (typesOnly) {    StringBuilder attrLine=new StringBuilder(attrName);    attrLine.append(":");    LDIFWriter.writeLDIFLine(attrLine,writer,wrapLines,wrapColumn);  } else {    for (    ByteString v : attribute) {      StringBuilder attrLine=new StringBuilder(attrName);      appendLDIFSeparatorAndValue(attrLine,v);      LDIFWriter.writeLDIFLine(attrLine,writer,wrapLines,wrapColumn);    }  }}  }
class C{  public static Element parseXML(String xmlString) throws DiscoveryException {  try {    debug.message("DiscoUtils.parseXML: xmlString=" + xmlString);    Document doc=XMLUtils.toDOMDocument(xmlString,debug);    return doc.getDocumentElement();  } catch (  Exception ex) {    debug.error("DiscoUtils.parseXML: Parsing error.",ex);    throw new DiscoveryException(ex);  }}  }
class C{  public StandardSession(Manager manager){  super();  this.manager=manager;  if (ACTIVITY_CHECK) {    accessCount=new AtomicInteger();  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (  IRenderer renderer : childRenderers) {    sb.append(renderer.toString());  }  return sb.toString();}  }
class C{  private String replaceConstants(String line,int lineNumber,Map<String,String> constants,List<LocalizableMessage> warnings){  int closePos=line.lastIndexOf(']');  do {    while (closePos > 0 && line.charAt(closePos - 1) == '\\') {      closePos=line.lastIndexOf(']',closePos - 1);    }    if (closePos > 0) {      StringBuilder lineBuffer=new StringBuilder(line);      int openPos=line.lastIndexOf('[',closePos);      if ((openPos > 0 && line.charAt(openPos - 1) != '\\') || openPos == 0) {        String constantName=toLowerCase(line.substring(openPos + 1,closePos));        String constantValue=constants.get(constantName);        if (constantValue == null) {          LocalizableMessage message=WARN_MAKELDIF_WARNING_UNDEFINED_CONSTANT.get(constantName,lineNumber);          warnings.add(message);        } else {          lineBuffer.replace(openPos,closePos + 1,constantValue);        }      }      if (openPos >= 0) {        closePos=openPos;      }      line=lineBuffer.toString();      closePos=line.lastIndexOf(']',closePos);    }  } while (closePos > 0);  return line;}  }
class C{  public void zoomInImage(float scale,float centerX,float centerY){  if (scale <= getMaxScale()) {    postScale(scale / getCurrentScale(),centerX,centerY);  }}  }
class C{  public final PlaVectorInt change_length_approx(double p_length){  PlaPointFloat new_point=to_float().change_size(p_length);  return new_point.round().to_vector();}  }
class C{  public SecureTimestampGenerator(){}  }
