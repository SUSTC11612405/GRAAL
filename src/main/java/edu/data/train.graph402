class C{  protected static Class boxVar(Class c){  if (Boolean.TYPE.equals(c)) {    return Boolean.class;  } else   if (Character.TYPE.equals(c)) {    return Character.class;  } else   if (Byte.TYPE.equals(c)) {    return Byte.class;  } else   if (Double.TYPE.equals(c)) {    return Double.class;  } else   if (Float.TYPE.equals(c)) {    return Float.class;  } else   if (Integer.TYPE.equals(c)) {    return Integer.class;  } else   if (Long.TYPE.equals(c)) {    return Long.class;  } else   if (Short.TYPE.equals(c)) {    return Short.class;  } else {    return c;  }}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:30.004 -0500",hash_original_method="16EB9D1F1ED26940A9147EEAE266AF00",hash_generated_method="319815EF84D49A0963FB89C5F675344D") public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  BigInteger n=key.getParameters().getN();  BigInteger e=calculateE(n,message);  if (r.compareTo(ONE) < 0 || r.compareTo(n) >= 0) {    return false;  }  if (s.compareTo(ONE) < 0 || s.compareTo(n) >= 0) {    return false;  }  BigInteger c=s.modInverse(n);  BigInteger u1=e.multiply(c).mod(n);  BigInteger u2=r.multiply(c).mod(n);  ECPoint G=key.getParameters().getG();  ECPoint Q=((ECPublicKeyParameters)key).getQ();  ECPoint point=ECAlgorithms.sumOfTwoMultiplies(G,u1,Q,u2);  BigInteger v=point.getX().toBigInteger().mod(n);  return v.equals(r);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  private NameAndTypeConstant parseNameAndTypeConstant(int index) throws IOException {  int nameIndex=readShort();  int descriptorIndex=readShort();  return new NameAndTypeConstant(_class.getConstantPool(),index,nameIndex,descriptorIndex);}  }
class C{  void scheduleTransmission(boolean lastAttemptFailed){  this.failedToday=lastAttemptFailed;  this.nextTransmission=new Date(lastReset.getTime() + getTransmissionInterval());}  }
class C{  protected void computeBoundaryVertices(Terrain terrain,ExtrudedBoundaryInfo boundary,Vec4 refPoint){  Vec4[] topVertices=boundary.capVertices;  if (topVertices == null || topVertices.length < boundary.locations.size())   topVertices=new Vec4[boundary.locations.size()];  Vec4[] bottomVertices=boundary.baseVertices;  if (bottomVertices == null || bottomVertices.length < boundary.locations.size())   bottomVertices=new Vec4[boundary.locations.size()];  Vec4 N=null;  Vec4 vaa=null;  double vaaLength=0;  double vaLength=0;  boundary.faceCount=boundary.locations.size() - 1;  for (int i=0; i < boundary.faceCount; i++) {    LatLon location=boundary.locations.get(i);    Vec4 vert=terrain.getSurfacePoint(location.getLatitude(),location.getLongitude(),0);    if (this.getBaseDepth() == 0) {      bottomVertices[i]=vert.subtract3(refPoint);    } else {      double length=vert.getLength3();      bottomVertices[i]=vert.multiply3((length - this.getBaseDepth()) / length).subtract3(refPoint);    }    if (this.getAltitudeMode() == WorldWind.CONSTANT || !(location instanceof Position)) {      if (vaa == null) {        Position refPos=this.getReferencePosition();        N=terrain.getGlobe().computeSurfaceNormalAtLocation(refPos.getLatitude(),refPos.getLongitude());        vaa=N.multiply3(this.getHeight());        vaaLength=vaa.getLength3();        vaLength=refPoint.dot3(N);      }      double delta=vert.dot3(N) - vaLength;      vert=vert.add3(vaa.multiply3(1d - delta / vaaLength));    } else     if (this.getAltitudeMode() == WorldWind.RELATIVE_TO_GROUND) {      vert=terrain.getSurfacePoint(location.getLatitude(),location.getLongitude(),((Position)location).getAltitude());    } else {      vert=terrain.getGlobe().computePointFromPosition(location.getLatitude(),location.getLongitude(),((Position)location).getAltitude() * terrain.getVerticalExaggeration());    }    topVertices[i]=vert.subtract3(refPoint);  }  topVertices[boundary.locations.size() - 1]=topVertices[0];  bottomVertices[boundary.locations.size() - 1]=bottomVertices[0];  boundary.capVertices=topVertices;  boundary.baseVertices=bottomVertices;}  }
class C{  public GraphFrame(final GraphWindow window,final View2D view2d,final BackEndDebuggerProvider debuggerProvider){  m_window=window;  m_view2d=view2d;  m_debuggerProvider=debuggerProvider;}  }
class C{  protected void okPressed(){  IPreferenceStore store=ProverUIActivator.getDefault().getPreferenceStore();  store.setValue(EXTRA_OPTIONS_KEY,extraOptionsText.getText());  store.setValue(TOOLBOX_MODE_KEY,toolboxMode.getSelection());  store.setValue(ISATOOL_KEY,isatool.getSelection());  store.setValue(STATUS_CHECK_KEY,noProving.getSelection());  store.setValue(ISACHECK_KEY,isacheck.getSelection());  store.setValue(NOISA_KEY,noisa.getSelection());  store.setValue(PARANOID_KEY,paranoid.getSelection());  store.setValue(FP_NORMAL_KEY,fpNormal.getSelection());  store.setValue(FP_FORGET_ALL_KEY,fpForgetAll.getSelection());  store.setValue(FP_FORGET_CURRENT_KEY,fpForgetCurrent.getSelection());  ArrayList command=new ArrayList();  if (isatool.getSelection()) {  } else   if (isacheck.getSelection()) {    command.add(ITLAPMOptions.ISACHECK);  }  if (fpForgetAll.getSelection()) {    command.add(ITLAPMOptions.FORGET_ALL);  } else   if (fpForgetCurrent.getSelection()) {    command.add(ITLAPMOptions.FORGET_CURRENT);  }  if (paranoid.isEnabled() && paranoid.getSelection()) {    command.add(ITLAPMOptions.PARANOID);  }  ProverHelper.setThreadsOption(command);  ProverHelper.setSolverOption(command);  ProverHelper.setSafeFPOption(command);  String extraOptions=extraOptionsText.getText();  StringBuilder argument=new StringBuilder();  int state=0;  for (int j=0; j < extraOptions.length(); j++) {    char c=extraOptions.charAt(j);switch (state) {case 0:      if (c == ' ') {      } else       if (c == '\'') {        state=2;      } else {        argument.append(c);        state=1;      }    break;case 1:  if (c == ' ') {    command.add(argument.toString());    argument.setLength(0);    state=0;  } else   if (c == '\'') {    state=2;  } else {    argument.append(c);  }break;case 2:if (c == '\'') {state=1;} else {argument.append(c);}break;}}if (state == 1 || state == 2) {command.add(argument.toString());}TLAEditor editor=EditorUtil.getActiveTLAEditor();Assert.isNotNull(editor,"User attempted to run general prover dialog without a tla editor active. This is a bug.");ProverJob proverJob=new ProverJob(((FileEditorInput)editor.getEditorInput()).getFile(),((ITextSelection)editor.getSelectionProvider().getSelection()).getOffset(),noProving.getSelection(),(String[])command.toArray(new String[command.size()]),toolboxMode.getSelection());proverJob.setUser(true);proverJob.schedule();super.okPressed();}  }
class C{  public int search(int o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  private boolean isEscapingDisabled(){  return m_disableOutputEscapingStates.peekOrFalse();}  }
class C{  void init(final IStore store,final int maxAlloc,final IAllocationContext context){  m_store=store;  m_context=context;  m_next=null;  m_blobThreshold=maxAlloc - 4;  if (m_buf == null || m_buf.length != m_blobThreshold)   m_buf=new byte[m_blobThreshold];  reset();}  }
class C{  public ResultMatrixHTML(ResultMatrix matrix){  super(matrix);}  }
class C{  public static boolean isArrayElement(@NotNull PsiElement element){  return element instanceof JsonValue && element.getParent() instanceof JsonArray;}  }
class C{  LayoutVisitor(SurfacePriviledged<T> surface){  this.dividerSize=surface.getDividerSize();  this.surface=surface;}  }
class C{  private void obtainDimAmount(@StyleRes final int themeResourceId){  TypedArray typedArray=getContext().getTheme().obtainStyledAttributes(themeResourceId,new int[]{R.attr.bottomSheetDimAmount});  float dimAmount=typedArray.getFraction(0,1,1,-1);  if (dimAmount != -1) {    setDimAmount(dimAmount);  }}  }
class C{  public static void sendEmail(Context context,final String receiver,final String subject,final String text,final File... files){  sendEmail(context,new String[]{receiver},subject,text,null,null,null,files);}  }
class C{  public void repeat(float offset,String syncbaseID){}  }
class C{  private BinaryReaderExImpl reader(@Nullable BinaryReaderHandles rCtx,boolean forUnmarshal){  BinaryOffheapInputStream stream=new BinaryOffheapInputStream(ptr,size,false);  stream.position(start);  return new BinaryReaderExImpl(ctx,stream,ctx.configuration().getClassLoader(),rCtx,forUnmarshal);}  }
class C{  public static Builder withQualifier(String qualifier){  return builder().qualifier(qualifier);}  }
class C{  public static String start(Frame owner,String header,String script,boolean editable,int WindowNo){  GroovyEditor se=new GroovyEditor(owner,header,script,WindowNo);  return se.getScript();}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new BorderLayout(0,0));  final JScrollPane scrollPane1=new JScrollPane();  contentPane.add(scrollPane1,BorderLayout.CENTER);  spiTable=new JTable();  scrollPane1.setViewportView(spiTable);}  }
class C{  @Uninterruptible public static long prepareLong(Object object,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return -1;}  }
class C{  @Override protected boolean canTriggerWalking(){  return false;}  }
class C{  public static String rilRadioTechnologyToString(int rt){  String rtString;switch (rt) {case RIL_RADIO_TECHNOLOGY_UNKNOWN:    rtString="Unknown";  break;case RIL_RADIO_TECHNOLOGY_GPRS:rtString="GPRS";break;case RIL_RADIO_TECHNOLOGY_EDGE:rtString="EDGE";break;case RIL_RADIO_TECHNOLOGY_UMTS:rtString="UMTS";break;case RIL_RADIO_TECHNOLOGY_IS95A:rtString="CDMA-IS95A";break;case RIL_RADIO_TECHNOLOGY_IS95B:rtString="CDMA-IS95B";break;case RIL_RADIO_TECHNOLOGY_1xRTT:rtString="1xRTT";break;case RIL_RADIO_TECHNOLOGY_EVDO_0:rtString="EvDo-rev.0";break;case RIL_RADIO_TECHNOLOGY_EVDO_A:rtString="EvDo-rev.A";break;case RIL_RADIO_TECHNOLOGY_HSDPA:rtString="HSDPA";break;case RIL_RADIO_TECHNOLOGY_HSUPA:rtString="HSUPA";break;case RIL_RADIO_TECHNOLOGY_HSPA:rtString="HSPA";break;case RIL_RADIO_TECHNOLOGY_EVDO_B:rtString="EvDo-rev.B";break;case RIL_RADIO_TECHNOLOGY_EHRPD:rtString="eHRPD";break;case RIL_RADIO_TECHNOLOGY_LTE:rtString="LTE";break;case RIL_RADIO_TECHNOLOGY_HSPAP:rtString="HSPAP";break;case RIL_RADIO_TECHNOLOGY_DCHSPAP:rtString="DCHSPAP";break;case RIL_RADIO_TECHNOLOGY_GSM:rtString="GSM";break;case RIL_RADIO_TECHNOLOGY_TD_SCDMA:rtString="TD-SCDMA";break;default :rtString="Unexpected";Rlog.w(LOG_TAG,"Unexpected radioTechnology=" + rt);break;}return rtString;}  }
class C{  public void testPropertyLoading() throws Exception {  pm.loadProperties();  TungstenProperties tp=pm.getProperties();  assertTrue("Property file must contain some properties",tp.size() > 0);}  }
class C{  public boolean hasStarredExt(){  return hasExtension(GphotoStarred.class);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.395 -0500",hash_original_method="5604753D706326222B1B40A76BAB0566",hash_generated_method="A62B05E21869F10B6E83B3E60C41CE47") static public void assertEquals(String message,long expected,long actual){  assertEquals(message,new Long(expected),new Long(actual));}  }
class C{  public void addBitmapToCache(String data,Bitmap bitmap){  if (data == null || bitmap == null) {    return;  }synchronized (mMemoryCache) {    VolleyLog.d(TAG,"Memory cache put - " + data);    mMemoryCache.put(data,bitmap);  }}  }
class C{  public TDoubleLongHashMapDecorator(TDoubleLongHashMap map){  super();  this._map=map;}  }
class C{  void swapActions(int row){  ConditionalAction temp=_actionList.get(row);  for (int i=row; i > _nextInOrder; i--) {    _actionList.set(i,_actionList.get(i - 1));  }  _actionList.set(_nextInOrder,temp);  _nextInOrder++;  if (_nextInOrder >= _actionList.size()) {    _inReorderMode=false;  }  _actionTableModel.fireTableDataChanged();}  }
class C{  protected final int mapKeyCode(int keyCode){switch (keyCode) {case KeyEvent.VK_ENTER:    return DOMKeyEvent.DOM_VK_ENTER;case KeyEvent.VK_KANA_LOCK:  return DOMKeyEvent.DOM_VK_UNDEFINED;case KeyEvent.VK_INPUT_METHOD_ON_OFF:return DOMKeyEvent.DOM_VK_UNDEFINED;default :return keyCode;}}  }
class C{  private void resumeDocumentListenerNotification(){  if (fDeferredDocumentEvent != null) {    DocumentEvent event=fDeferredDocumentEvent;    fDeferredDocumentEvent=null;    doFireDocumentChanged(event);  }}  }
class C{  public LocalVacuumEnvironmentPercept(String agentLocation,VacuumEnvironment.LocationState state){  setAttribute(ATTRIBUTE_AGENT_LOCATION,agentLocation);  setAttribute(ATTRIBUTE_STATE,state);}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  int action=MotionEventCompat.getActionMasked(ev);  if (stopScrollWhenTouch) {    if ((action == MotionEvent.ACTION_DOWN) && isAutoScroll) {      isStopByTouch=true;      stopAutoScroll();    } else     if (ev.getAction() == MotionEvent.ACTION_UP && isStopByTouch) {      startAutoScroll();    }  }  if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT || slideBorderMode == SLIDE_BORDER_MODE_CYCLE) {    touchX=ev.getX();    if (ev.getAction() == MotionEvent.ACTION_DOWN) {      downX=touchX;    }    int currentItem=getCurrentItem();    PagerAdapter adapter=getAdapter();    int pageCount=adapter == null ? 0 : adapter.getCount();    if ((currentItem == 0 && downX <= touchX) || (currentItem == pageCount - 1 && downX >= touchX)) {      if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT) {        getParent().requestDisallowInterceptTouchEvent(false);      } else {        if (pageCount > 1) {          setCurrentItem(pageCount - currentItem - 1,isBorderAnimation);        } else {        }        getParent().requestDisallowInterceptTouchEvent(true);      }      return super.dispatchTouchEvent(ev);    }  }  getParent().requestDisallowInterceptTouchEvent(true);  return super.dispatchTouchEvent(ev);}  }
class C{  protected PduHeaders parseHeaders(ByteArrayInputStream pduDataStream){  if (pduDataStream == null) {    return null;  }  boolean keepParsing=true;  PduHeaders headers=new PduHeaders();  while (keepParsing && (pduDataStream.available() > 0)) {    pduDataStream.mark(1);    int headerField=extractByteValue(pduDataStream);    if ((headerField >= TEXT_MIN) && (headerField <= TEXT_MAX)) {      pduDataStream.reset();      byte[] bVal=parseWapString(pduDataStream,TYPE_TEXT_STRING);      if (LOCAL_LOGV)       Log.v(LOG_TAG,"TextHeader: " + new String(bVal));      continue;    }switch (headerField) {case PduHeaders.MESSAGE_TYPE:{        int messageType=extractByteValue(pduDataStream);        if (LOCAL_LOGV)         Log.v(LOG_TAG,"parseHeaders: messageType: " + messageType);switch (messageType) {case PduHeaders.MESSAGE_TYPE_FORWARD_REQ:case PduHeaders.MESSAGE_TYPE_FORWARD_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_STORE_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_STORE_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_DESCR:case PduHeaders.MESSAGE_TYPE_DELETE_REQ:case PduHeaders.MESSAGE_TYPE_DELETE_CONF:case PduHeaders.MESSAGE_TYPE_CANCEL_REQ:case PduHeaders.MESSAGE_TYPE_CANCEL_CONF:          return null;      }      try {        headers.setOctet(messageType,headerField);      } catch (      InvalidHeaderValueException e) {        log("Set invalid Octet value: " + messageType + " into the header filed: "+ headerField);        return null;      }catch (      RuntimeException e) {        log(headerField + "is not Octet header field!");        return null;      }      break;    }case PduHeaders.REPORT_ALLOWED:case PduHeaders.ADAPTATION_ALLOWED:case PduHeaders.DELIVERY_REPORT:case PduHeaders.DRM_CONTENT:case PduHeaders.DISTRIBUTION_INDICATOR:case PduHeaders.QUOTAS:case PduHeaders.READ_REPORT:case PduHeaders.STORE:case PduHeaders.STORED:case PduHeaders.TOTALS:case PduHeaders.SENDER_VISIBILITY:case PduHeaders.READ_STATUS:case PduHeaders.CANCEL_STATUS:case PduHeaders.PRIORITY:case PduHeaders.STATUS:case PduHeaders.REPLY_CHARGING:case PduHeaders.MM_STATE:case PduHeaders.RECOMMENDED_RETRIEVAL_MODE:case PduHeaders.CONTENT_CLASS:case PduHeaders.RETRIEVE_STATUS:case PduHeaders.STORE_STATUS:case PduHeaders.RESPONSE_STATUS:{    int value=extractByteValue(pduDataStream);    if (LOCAL_LOGV)     Log.v(LOG_TAG,"parseHeaders: byte: " + headerField + " value: "+ value);    try {      headers.setOctet(value,headerField);    } catch (    InvalidHeaderValueException e) {      log("Set invalid Octet value: " + value + " into the header filed: "+ headerField);      return null;    }catch (    RuntimeException e) {      log(headerField + "is not Octet header field!");      return null;    }    break;  }case PduHeaders.DATE:case PduHeaders.REPLY_CHARGING_SIZE:case PduHeaders.MESSAGE_SIZE:{  try {    long value=parseLongInteger(pduDataStream);    if (LOCAL_LOGV)     Log.v(LOG_TAG,"parseHeaders: longint: " + headerField + " value: "+ value);    headers.setLongInteger(value,headerField);  } catch (  RuntimeException e) {    log(headerField + "is not Long-Integer header field!");    return null;  }  break;}case PduHeaders.MESSAGE_COUNT:case PduHeaders.START:case PduHeaders.LIMIT:{try {  long value=parseIntegerValue(pduDataStream);  if (LOCAL_LOGV)   Log.v(LOG_TAG,"parseHeaders: int: " + headerField + " value: "+ value);  headers.setLongInteger(value,headerField);} catch (RuntimeException e) {  log(headerField + "is not Long-Integer header field!");  return null;}break;}case PduHeaders.TRANSACTION_ID:case PduHeaders.REPLY_CHARGING_ID:case PduHeaders.AUX_APPLIC_ID:case PduHeaders.APPLIC_ID:case PduHeaders.REPLY_APPLIC_ID:case PduHeaders.MESSAGE_ID:case PduHeaders.REPLACE_ID:case PduHeaders.CANCEL_ID:case PduHeaders.CONTENT_LOCATION:{byte[] value=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (null != value) {try {  if (LOCAL_LOGV)   Log.v(LOG_TAG,"parseHeaders: string: " + headerField + " value: "+ new String(value));  headers.setTextString(value,headerField);} catch (NullPointerException e) {  log("null pointer error!");}catch (RuntimeException e) {  log(headerField + "is not Text-String header field!");  return null;}}break;}case PduHeaders.SUBJECT:case PduHeaders.RECOMMENDED_RETRIEVAL_MODE_TEXT:case PduHeaders.RETRIEVE_TEXT:case PduHeaders.STATUS_TEXT:case PduHeaders.STORE_STATUS_TEXT:case PduHeaders.RESPONSE_TEXT:{EncodedStringValue value=parseEncodedStringValue(pduDataStream);if (null != value) {try {if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: encoded string: " + headerField + " value: "+ value.getString());headers.setEncodedStringValue(value,headerField);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.BCC:case PduHeaders.CC:case PduHeaders.TO:{EncodedStringValue value=parseEncodedStringValue(pduDataStream);if (null != value) {byte[] address=value.getTextString();if (null != address) {String str=new String(address);if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: (to/cc/bcc) address: " + headerField + " value: "+ str);int endIndex=str.indexOf("/");if (endIndex > 0) {str=str.substring(0,endIndex);}try {value.setTextString(str.getBytes());} catch (NullPointerException e) {log("null pointer error!");return null;}}try {headers.appendEncodedStringValue(value,headerField);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.DELIVERY_TIME:case PduHeaders.EXPIRY:case PduHeaders.REPLY_CHARGING_DEADLINE:{parseValueLength(pduDataStream);int token=extractByteValue(pduDataStream);long timeValue;try {timeValue=parseLongInteger(pduDataStream);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}if (PduHeaders.VALUE_RELATIVE_TOKEN == token) {timeValue=System.currentTimeMillis() / 1000 + timeValue;}try {if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: time value: " + headerField + " value: "+ timeValue);headers.setLongInteger(timeValue,headerField);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}break;}case PduHeaders.FROM:{EncodedStringValue from=null;parseValueLength(pduDataStream);int fromToken=extractByteValue(pduDataStream);if (PduHeaders.FROM_ADDRESS_PRESENT_TOKEN == fromToken) {from=parseEncodedStringValue(pduDataStream);if (null != from) {byte[] address=from.getTextString();if (null != address) {String str=new String(address);int endIndex=str.indexOf("/");if (endIndex > 0) {str=str.substring(0,endIndex);}try {from.setTextString(str.getBytes());} catch (NullPointerException e) {log("null pointer error!");return null;}}}} else {try {from=new EncodedStringValue(PduHeaders.FROM_INSERT_ADDRESS_TOKEN_STR.getBytes());} catch (NullPointerException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}try {if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: from address: " + headerField + " value: "+ from.getString());headers.setEncodedStringValue(from,PduHeaders.FROM);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}break;}case PduHeaders.MESSAGE_CLASS:{pduDataStream.mark(1);int messageClass=extractByteValue(pduDataStream);if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: MESSAGE_CLASS: " + headerField + " value: "+ messageClass);if (messageClass >= PduHeaders.MESSAGE_CLASS_PERSONAL) {try {if (PduHeaders.MESSAGE_CLASS_PERSONAL == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_PERSONAL_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_ADVERTISEMENT == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_ADVERTISEMENT_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_INFORMATIONAL == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_INFORMATIONAL_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_AUTO == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_AUTO_STR.getBytes(),PduHeaders.MESSAGE_CLASS);}} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}} else {pduDataStream.reset();byte[] messageClassString=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (null != messageClassString) {try {headers.setTextString(messageClassString,PduHeaders.MESSAGE_CLASS);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}}}break;}case PduHeaders.MMS_VERSION:{int version=parseShortInteger(pduDataStream);try {if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: MMS_VERSION: " + headerField + " value: "+ version);headers.setOctet(version,PduHeaders.MMS_VERSION);} catch (InvalidHeaderValueException e) {log("Set invalid Octet value: " + version + " into the header filed: "+ headerField);return null;}catch (RuntimeException e) {log(headerField + "is not Octet header field!");return null;}break;}case PduHeaders.PREVIOUSLY_SENT_BY:{parseValueLength(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}EncodedStringValue previouslySentBy=parseEncodedStringValue(pduDataStream);if (null != previouslySentBy) {try {if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: PREVIOUSLY_SENT_BY: " + headerField + " value: "+ previouslySentBy.getString());headers.setEncodedStringValue(previouslySentBy,PduHeaders.PREVIOUSLY_SENT_BY);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.PREVIOUSLY_SENT_DATE:{parseValueLength(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}try {long perviouslySentDate=parseLongInteger(pduDataStream);if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: PREVIOUSLY_SENT_DATE: " + headerField + " value: "+ perviouslySentDate);headers.setLongInteger(perviouslySentDate,PduHeaders.PREVIOUSLY_SENT_DATE);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}break;}case PduHeaders.MM_FLAGS:{if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: MM_FLAGS: " + headerField + " NOT REALLY SUPPORTED");parseValueLength(pduDataStream);extractByteValue(pduDataStream);parseEncodedStringValue(pduDataStream);break;}case PduHeaders.MBOX_TOTALS:case PduHeaders.MBOX_QUOTAS:{if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: MBOX_TOTALS: " + headerField);parseValueLength(pduDataStream);extractByteValue(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}break;}case PduHeaders.ELEMENT_DESCRIPTOR:{if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: ELEMENT_DESCRIPTOR: " + headerField);parseContentType(pduDataStream,null);break;}case PduHeaders.CONTENT_TYPE:{HashMap<Integer,Object> map=new HashMap<Integer,Object>();byte[] contentType=parseContentType(pduDataStream,map);if (null != contentType) {try {if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: CONTENT_TYPE: " + headerField + contentType.toString());headers.setTextString(contentType,PduHeaders.CONTENT_TYPE);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}}mStartParam=(byte[])map.get(PduPart.P_START);mTypeParam=(byte[])map.get(PduPart.P_TYPE);keepParsing=false;break;}case PduHeaders.CONTENT:case PduHeaders.ADDITIONAL_HEADERS:case PduHeaders.ATTRIBUTES:default :{if (LOCAL_LOGV) Log.v(LOG_TAG,"parseHeaders: Unknown header: " + headerField);log("Unknown header");}}}return headers;}  }
class C{  public void writeAll(List<String[]> allLines){  for (  String[] line : allLines) {    writeNext(line);  }}  }
class C{  public SRaster(LLPoint ll1,short width,short height,byte[] pixels,short colorsTotal,CTEntry[] ct,short transparent,short x_hot,short y_hot){  super(GraphicType.GT_Raster,RenderType.RT_LatLon,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint((short)0,(short)0);  ll1_=ll1;  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  pixels_=pixels;  transparent_=transparent;  makeMatch(colorsTotal,ct);}  }
class C{  public Lookup(Name name,int type){  this(name,type,DClass.IN);}  }
class C{  public static Element drawLp(SVGPlot svgp,Projection2D proj,NumberVector mid,double radius,double p){  final double[] v_mid=mid.toArray();  final long[] dims=proj.getVisibleDimensions2D();  final double kappax, kappay;  if (p > 1.) {    final double kappal=Math.pow(0.5,1. / p);    kappax=Math.min(1.3,4. * (2 * kappal - 1) / 3.);    kappay=0;  } else   if (p < 1.) {    final double kappal=1 - Math.pow(0.5,1. / p);    kappax=0;    kappay=Math.min(1.3,4. * (2 * kappal - 1) / 3.);  } else {    kappax=0;    kappay=0;  }  SVGPath path=new SVGPath();  for (int dim=BitsUtil.nextSetBit(dims,0); dim >= 0; dim=BitsUtil.nextSetBit(dims,dim + 1)) {    v_mid[dim]+=radius;    double[] pvp0=proj.fastProjectDataToRenderSpace(v_mid);    v_mid[dim]-=radius;    v_mid[dim]-=radius;    double[] pvm0=proj.fastProjectDataToRenderSpace(v_mid);    v_mid[dim]+=radius;    double[] tvd0=new double[v_mid.length];    tvd0[dim]=radius;    double[] vd0=proj.fastProjectRelativeDataToRenderSpace(tvd0);    for (int dim2=BitsUtil.nextSetBit(dims,0); dim2 >= 0; dim2=BitsUtil.nextSetBit(dims,dim2 + 1)) {      if (dim < dim2) {        v_mid[dim2]+=radius;        double[] pv0p=proj.fastProjectDataToRenderSpace(v_mid);        v_mid[dim2]-=radius;        v_mid[dim2]-=radius;        double[] pv0m=proj.fastProjectDataToRenderSpace(v_mid);        v_mid[dim2]+=radius;        double[] tv0d=new double[v_mid.length];        tv0d[dim2]=radius;        double[] v0d=proj.fastProjectRelativeDataToRenderSpace(tv0d);        if (p > 1) {          path.moveTo(pvp0[0],pvp0[1]);          final double s_pp1_x=pvp0[0] + v0d[0] * kappax;          final double s_pp1_y=pvp0[1] + v0d[1] * kappax;          final double s_pp2_x=pv0p[0] + vd0[0] * kappax;          final double s_pp2_y=pv0p[1] + vd0[1] * kappax;          path.cubicTo(s_pp1_x,s_pp1_y,s_pp2_x,s_pp2_y,pv0p[0],pv0p[1]);          final double s_mp1_x=pv0p[0] - vd0[0] * kappax;          final double s_mp1_y=pv0p[1] - vd0[1] * kappax;          final double s_mp2_x=pvm0[0] + v0d[0] * kappax;          final double s_mp2_y=pvm0[1] + v0d[1] * kappax;          path.cubicTo(s_mp1_x,s_mp1_y,s_mp2_x,s_mp2_y,pvm0[0],pvm0[1]);          final double s_mm1_x=pvm0[0] - v0d[0] * kappax;          final double s_mm1_y=pvm0[1] - v0d[1] * kappax;          final double s_mm2_x=pv0m[0] - vd0[0] * kappax;          final double s_mm2_y=pv0m[1] - vd0[1] * kappax;          path.cubicTo(s_mm1_x,s_mm1_y,s_mm2_x,s_mm2_y,pv0m[0],pv0m[1]);          final double s_pm1_x=pv0m[0] + vd0[0] * kappax;          final double s_pm1_y=pv0m[1] + vd0[1] * kappax;          final double s_pm2_x=pvp0[0] - v0d[0] * kappax;          final double s_pm2_y=pvp0[1] - v0d[1] * kappax;          path.cubicTo(s_pm1_x,s_pm1_y,s_pm2_x,s_pm2_y,pvp0[0],pvp0[1]);          path.close();        } else         if (p < 1) {          final double s_vp0_x=pvp0[0] - vd0[0] * kappay;          final double s_vp0_y=pvp0[1] - vd0[1] * kappay;          final double s_v0p_x=pv0p[0] - v0d[0] * kappay;          final double s_v0p_y=pv0p[1] - v0d[1] * kappay;          final double s_vm0_x=pvm0[0] + vd0[0] * kappay;          final double s_vm0_y=pvm0[1] + vd0[1] * kappay;          final double s_v0m_x=pv0m[0] + v0d[0] * kappay;          final double s_v0m_y=pv0m[1] + v0d[1] * kappay;          path.moveTo(pvp0[0],pvp0[1]);          path.cubicTo(s_vp0_x,s_vp0_y,s_v0p_x,s_v0p_y,pv0p[0],pv0p[1]);          path.cubicTo(s_v0p_x,s_v0p_y,s_vm0_x,s_vm0_y,pvm0[0],pvm0[1]);          path.cubicTo(s_vm0_x,s_vm0_y,s_v0m_x,s_v0m_y,pv0m[0],pv0m[1]);          path.cubicTo(s_v0m_x,s_v0m_y,s_vp0_x,s_vp0_y,pvp0[0],pvp0[1]);          path.close();        } else {          path.moveTo(pvp0[0],pvp0[1]);          path.lineTo(pv0p[0],pv0p[1]);          path.lineTo(pvm0[0],pvm0[1]);          path.lineTo(pv0m[0],pv0m[1]);          path.lineTo(pvp0[0],pvp0[1]);          path.close();        }      }    }  }  return path.makeElement(svgp);}  }
class C{  protected AbstractGraph(V[] vertices,int[][] edges){  for (int i=0; i < vertices.length; i++)   addVertex(vertices[i]);  createAdjacencyLists(edges,vertices.length);}  }
class C{  public CTrackingResultsToolbar(final IGraphPanelExtender extender,final CTrackingResultContainer container){  m_container=Preconditions.checkNotNull(container,"IE02305: container argument can not be null");  m_extender=Preconditions.checkNotNull(extender,"IE02306: extender argument can not be null");  setFloatable(false);  createAndAddIconToToolbar(this,new ClearAction(),"data/clearinstructionhighlighting_up.png","data/clearinstructionhighlighting_hover.png","data/clearinstructionhighlighting_down.png");  createAndAddIconToToolbar(this,new CloneAction(),"data/createnewgraph_up.png","data/createnewgraph_hover.png","data/createnewgraph_down.png");}  }
class C{  public EMailDialog(Frame owner,String title,MUser from,String to,String subject,String message,File attachment){  super(owner,title,true);  commonInit(from,to,subject,message,attachment);}  }
class C{  private void calcAngles(){  mDrawAngles=new float[mData.getYValCount()];  mAbsoluteAngles=new float[mData.getYValCount()];  List<PieDataSet> dataSets=mData.getDataSets();  int cnt=0;  for (int i=0; i < mData.getDataSetCount(); i++) {    PieDataSet set=dataSets.get(i);    List<Entry> entries=set.getYVals();    for (int j=0; j < entries.size(); j++) {      mDrawAngles[cnt]=calcAngle(Math.abs(entries.get(j).getVal()));      if (cnt == 0) {        mAbsoluteAngles[cnt]=mDrawAngles[cnt];      } else {        mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];      }      cnt++;    }  }}  }
class C{  static int hash(Object x){  int h=System.identityHashCode(x);  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  public double distanceTo(Point2D that){  double dx=this.x - that.x;  double dy=this.y - that.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public ConePortrayal3D(double scale){  this(Color.white,scale);}  }
class C{  @Override public void instanceIsActive() throws AtlasException {  LOG.info("Reacting to active: initializing index");  try {    initialize();  } catch (  RepositoryException e) {    throw new AtlasException("Error in reacting to active on initialization",e);  }catch (  IndexException e) {    throw new AtlasException("Error in reacting to active on initialization",e);  }}  }
class C{  private List<List<Object>> explodeRow(Heading head,List<Object> row) throws SQLException {  List<List<Object>> rows=new ArrayList<List<Object>>();  rows.add(row);  for (int ri=0; ri < head.getColumnCount(); ri++) {    if (!head.getColumn(ri).isVisible())     continue;    Object element=row.get(ri);    if (element instanceof ESResultSet) {      ESResultSet nested=(ESResultSet)element;      String parent=head.getColumn(ri).getColumn();      long nestedCount=nested.getTotal();      if (nestedCount == 0) {        nested.close();        continue;      }      int rowCount=rows.size();      for (int n=0; n < nestedCount - 1; n++)       for (int i=0; i < rowCount; i++)       rows.add(Utils.clone(rows.get(i)));      for (int i=0; i < rows.size(); i++) {        List<Object> destinationRow=rows.get(i);        List<Object> nestedRow=nested.getRow(i % (int)nestedCount);        for (        Column nestedCol : nested.getHeading().columns()) {          String nestedColName=parent + "." + nestedCol.getColumn();          Column destinationCol=head.getColumnByLabel(nestedColName);          if (destinationCol == null) {            destinationCol=new Column(nestedColName).setAlias(nestedCol.getAlias()).setSqlType(nestedCol.getSqlType()).setVisible(nestedCol.isVisible());            head.add(destinationCol);          }          Object value=nestedRow.get(nestedCol.getIndex());          destinationRow.set(destinationCol.getIndex(),value);        }      }      nested.close();      row.set(ri,null);    }  }  return rows;}  }
class C{  public boolean isInterface(String className) throws IllegalArgumentException {  checkClass(className);  ClassNode node=getClassNode(className);  if ((node.access & Opcodes.ACC_INTERFACE) == Opcodes.ACC_INTERFACE)   return true;  return false;}  }
class C{  @SuppressWarnings("rawtypes") @Override public void doExplosionB(boolean spawnExtraParticles){  worldObj.playSoundEffect(explosionX,explosionY,explosionZ,"random.explode",4.0F,(1.0F + (worldObj.rand.nextFloat() - worldObj.rand.nextFloat()) * 0.2F) * 0.7F);  if (explosionSize >= 2.0F && isSmoking) {    worldObj.spawnParticle("hugeexplosion",explosionX,explosionY,explosionZ,1.0D,0.0D,0.0D);  } else {    worldObj.spawnParticle("largeexplode",explosionX,explosionY,explosionZ,1.0D,0.0D,0.0D);  }  Iterator iterator;  ChunkPosition chunkposition;  int i, j, k;  Block block;  if (isSmoking) {    iterator=affectedBlockPositions.iterator();    while (iterator.hasNext()) {      chunkposition=(ChunkPosition)iterator.next();      i=chunkposition.chunkPosX;      j=chunkposition.chunkPosY;      k=chunkposition.chunkPosZ;      block=worldObj.getBlock(i,j,k);      explodeBlockAt(block,i,j,k,spawnExtraParticles);    }  }  if (isFlaming) {    iterator=affectedBlockPositions.iterator();    while (iterator.hasNext()) {      chunkposition=(ChunkPosition)iterator.next();      i=chunkposition.chunkPosX;      j=chunkposition.chunkPosY;      k=chunkposition.chunkPosZ;      block=worldObj.getBlock(i,j,k);      Block block1=worldObj.getBlock(i,j - 1,k);      if (block == Blocks.air && block1.func_149730_j() && rand.nextInt(3) == 0) {        worldObj.setBlock(i,j,k,Blocks.fire);      }    }  }  notifyClients();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildGoldSourceArea(zone);}  }
class C{  public void deleteAll(){  mContext.getContentResolver().delete(TrackerProvider.CONTENT_URI,null,null);}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLRange) {    if (this == o)     return true;    PLRange range=(PLRange)o;    return (min == range.min && max == range.max);  }  return false;}  }
class C{  public MultiDirectoryPropertyEditor(){  setPathSeparator(';');}  }
class C{  public boolean weakNeighbors(double[] v1,double[] v2,PCAFilteredResult pca1,PCAFilteredResult pca2){  if (pca1.getCorrelationDimension() < pca2.getCorrelationDimension()) {    return false;  }  if (!approximatelyLinearDependent(pca1,pca2)) {    return false;  }  if (pca1.getCorrelationDimension() == pca2.getCorrelationDimension() && !approximatelyLinearDependent(pca2,pca1)) {    return false;  }  if (mahalanobisDistance(pca1.similarityMatrix(),v1,v2) > settings.tau) {    return false;  }  if (pca1.getCorrelationDimension() == pca2.getCorrelationDimension()) {    return mahalanobisDistance(pca2.similarityMatrix(),v1,v2) <= settings.tau;  }  return true;}  }
class C{  @Override public double[][] processIds(DBIDs ids,Relation<? extends NumberVector> database){  return CovarianceMatrix.make(database,ids).destroyToNaiveMatrix();}  }
class C{  private void parseResult(String result){  try {    JSONObject response=new JSONObject(result);    JSONArray posts=response.optJSONArray("posts");    GridItem item;    for (int i=0; i < posts.length(); i++) {      JSONObject post=posts.optJSONObject(i);      String title=post.optString("title");      item=new GridItem();      item.setTitle(title);      JSONArray attachments=post.getJSONArray("attachments");      if (null != attachments && attachments.length() > 0) {        JSONObject attachment=attachments.getJSONObject(0);        if (attachment != null)         item.setImage(attachment.getString("url"));      }      mGridData.add(item);    }  } catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  public static VecBufferSequence emptyVecBufferSequence(int coordsPerVec){  if (coordsPerVec < 1) {    String message=Logging.getMessage("generic.ArgumentOutOfRange",coordsPerVec);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new VecBufferSequence(VecBuffer.emptyVecBuffer(coordsPerVec));}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  private void send() throws IOException, SQLException {  this.indexWriter.write(articleIndex);  this.indexWriter.write(revisionIndex);  this.indexWriter.write(chronoIndex);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Ignore @Test public void testRegionFactoryPropertiesRegionAttributes(){}  }
class C{  public Object valueAt(double lat,double lon,Projection proj){  int lat_index=-1;  int lon_index=-1;  if (renderType == RENDERTYPE_LATLON) {    lat_index=(int)Math.round((lat - latitude) / verticalResolution);    lon_index=(int)Math.round((lon - longitude) / horizontalResolution);  } else   if (renderType == RENDERTYPE_XY || renderType == RENDERTYPE_OFFSET) {    if (getNeedToRegenerate()) {      if (proj == null) {        return null;      }      generate(proj);    }    Point pt=(Point)proj.forward(lat,lon,new Point());    lat_index=(int)Math.round((pt.y - point1.y) / verticalResolution);    lon_index=(int)Math.round((pt.x - point1.x) / horizontalResolution);  }  GridData gd=getData();  if (gd != null && (lat_index >= 0 || lat_index < rows) && (lon_index >= 0 || lon_index < columns)) {    Object obj=null;    if (major == COLUMN_MAJOR) {      obj=gd.get(lon_index,lat_index);    } else {      obj=gd.get(lat_index,lon_index);    }    return obj;  }  return null;}  }
class C{  public ImprovedOrientationSensor1Provider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE));  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR));}  }
class C{  private String parseIdentifier(){  Token token=scanToken();  if (token != Token.IDENTIFIER) {    throw error("expected identifier at {0}",token);  }  return _lexeme;}  }
class C{  public TransformAnimation(TimedElement timedElement,AnimatableElement animatableElement,int calcMode,float[] keyTimes,float[] keySplines,boolean additive,boolean cumulative,AnimatableValue[] values,AnimatableValue from,AnimatableValue to,AnimatableValue by,short type){  super(timedElement,animatableElement,calcMode == CALC_MODE_PACED ? CALC_MODE_LINEAR : calcMode,calcMode == CALC_MODE_PACED ? null : keyTimes,keySplines,additive,cumulative,values,from,to,by);  this.calcMode=calcMode;  this.type=type;  if (calcMode != CALC_MODE_PACED) {    return;  }  int count=this.values.length;  float[] cumulativeDistances1;  float[] cumulativeDistances2=null;  float[] cumulativeDistances3=null;switch (type) {case SVGTransform.SVG_TRANSFORM_ROTATE:    cumulativeDistances3=new float[count];  cumulativeDistances3[0]=0f;case SVGTransform.SVG_TRANSFORM_SCALE:case SVGTransform.SVG_TRANSFORM_TRANSLATE:cumulativeDistances2=new float[count];cumulativeDistances2[0]=0f;default :cumulativeDistances1=new float[count];cumulativeDistances1[0]=0f;}for (int i=1; i < this.values.length; i++) {switch (type) {case SVGTransform.SVG_TRANSFORM_ROTATE:cumulativeDistances3[i]=cumulativeDistances3[i - 1] + ((AnimatableTransformListValue)this.values[i - 1]).distanceTo3(this.values[i]);case SVGTransform.SVG_TRANSFORM_SCALE:case SVGTransform.SVG_TRANSFORM_TRANSLATE:cumulativeDistances2[i]=cumulativeDistances2[i - 1] + ((AnimatableTransformListValue)this.values[i - 1]).distanceTo2(this.values[i]);default :cumulativeDistances1[i]=cumulativeDistances1[i - 1] + ((AnimatableTransformListValue)this.values[i - 1]).distanceTo1(this.values[i]);}}switch (type) {case SVGTransform.SVG_TRANSFORM_ROTATE:float totalLength=cumulativeDistances3[count - 1];keyTimes3=new float[count];keyTimes3[0]=0f;for (int i=1; i < count - 1; i++) {keyTimes3[i]=cumulativeDistances3[i] / totalLength;}keyTimes3[count - 1]=1f;case SVGTransform.SVG_TRANSFORM_SCALE:case SVGTransform.SVG_TRANSFORM_TRANSLATE:totalLength=cumulativeDistances2[count - 1];keyTimes2=new float[count];keyTimes2[0]=0f;for (int i=1; i < count - 1; i++) {keyTimes2[i]=cumulativeDistances2[i] / totalLength;}keyTimes2[count - 1]=1f;default :totalLength=cumulativeDistances1[count - 1];this.keyTimes=new float[count];this.keyTimes[0]=0f;for (int i=1; i < count - 1; i++) {this.keyTimes[i]=cumulativeDistances1[i] / totalLength;}this.keyTimes[count - 1]=1f;}}  }
class C{  void stopFading(){  mHandler.removeMessages(MSG_FADE);}  }
class C{  public Builder transform(Transformation transformation){  if (transformation == null) {    throw new IllegalArgumentException("Transformation must not be null.");  }  if (transformations == null) {    transformations=new ArrayList<Transformation>(2);  }  transformations.add(transformation);  return this;}  }
class C{  protected void transfer(String seqRange) throws IOException {  try {    final int rangePos=seqRange.indexOf('-');    if (rangePos == -1) {      transfer(Long.parseLong(seqRange));    } else {      final String start=seqRange.substring(0,rangePos);      final String end=seqRange.substring(rangePos + 1);      final long startIdx;      if (start.length() == 0) {        startIdx=0;      } else {        startIdx=Long.parseLong(start);      }      final long endIdx;      if (end.length() == 0) {        endIdx=mReader.numberSequences() - 1;      } else {        endIdx=Long.parseLong(end);      }      if (startIdx > endIdx) {        throw new NumberFormatException("Invalid range: " + seqRange);      }      for (long i=startIdx; i <= endIdx; i++) {        transfer(i);      }    }  } catch (  final NumberFormatException e) {    warnInvalidSequence(seqRange);  }}  }
class C{  public void addColumn(String name,int sqlType,int precision,int scale){  int valueType=DataType.convertSQLTypeToValueType(sqlType);  addColumn(name,sqlType,DataType.getDataType(valueType).name,precision,scale);}  }
class C{  private static int toSentenceOffset(int corpusPosition){  return -1 * (corpusPosition + 1);}  }
class C{  public MemoryRegion(Memory memory,long memOffsetBytes,long capacityBytes){  assertBounds(memOffsetBytes,capacityBytes,memory.getCapacity());  mem_=memory;  memOffsetBytes_=memOffsetBytes;  capacityBytes_=capacityBytes;}  }
class C{  public static FSInfo instance(Context context){  FSInfo instance=context.get(FSInfo.class);  if (instance == null)   instance=new FSInfo();  return instance;}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(Iterable<? extends E> initialContents){  return new Builder<E>(Ordering.<E>natural()).create(initialContents);}  }
class C{  public void resetValue(){  getStateHelper().remove(PropertyKeys.value);}  }
class C{  public void addPropertyChangeListener(final PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  private Instruction maxDominatorDepth(Instruction a,Instruction b){  BasicBlock aBlock=getBlock(a);  BasicBlock bBlock=getBlock(b);  int aDomDepth=dominator.depth(aBlock);  int bDomDepth=dominator.depth(bBlock);  if (aDomDepth > bDomDepth)   return a;  if (aDomDepth < bDomDepth)   return b;  if (VM.VerifyAssertions)   VM._assert(aBlock == bBlock);  return a.isBranch() ? a : b;}  }
class C{  private void checkArgument(boolean condition,String errorMsg){  if (!condition) {    throw new IllegalArgumentException(errorMsg);  }}  }
class C{  public void test_clone(){  Format fm=new MockFormat();  Format fmc=(Format)fm.clone();  assertEquals(fm.getClass(),fmc.getClass());}  }
class C{  public void readContent(byte[] dst,int offset,int length){  System.arraycopy(content,0,dst,offset,length);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Matrix3f) || o == null) {    return false;  }  if (this == o) {    return true;  }  Matrix3f comp=(Matrix3f)o;  if (Float.compare(m00,comp.m00) != 0) {    return false;  }  if (Float.compare(m01,comp.m01) != 0) {    return false;  }  if (Float.compare(m02,comp.m02) != 0) {    return false;  }  if (Float.compare(m10,comp.m10) != 0) {    return false;  }  if (Float.compare(m11,comp.m11) != 0) {    return false;  }  if (Float.compare(m12,comp.m12) != 0) {    return false;  }  if (Float.compare(m20,comp.m20) != 0) {    return false;  }  if (Float.compare(m21,comp.m21) != 0) {    return false;  }  if (Float.compare(m22,comp.m22) != 0) {    return false;  }  return true;}  }
class C{  public String sqlMetadata_functionArguments(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_functionArguments(catalogName,schemaName);}  }
class C{  @Deprecated public String generateMinimalConfig(){  ObjectFactory of=new ObjectFactory();  FileType matsim_config=of.createFileType();  matsim_config.setInputFile(this.matsimExternalConfigFileName);  FileType network=of.createFileType();  network.setInputFile(this.networkInputFileName);  InputPlansFileType inputPlansFileType=of.createInputPlansFileType();  if (this.startMode == CreateTestMATSimConfig.COLD_START)   inputPlansFileType.setInputFile(""); else   if (this.startMode == CreateTestMATSimConfig.WARRM_START)   inputPlansFileType.setInputFile(this.inputPlansFileName);  InputPlansFileType hotStratPlansFile=of.createInputPlansFileType();  if (this.startMode == CreateTestMATSimConfig.HOT_START)   hotStratPlansFile.setInputFile(this.hotstartPlansFileName); else   hotStratPlansFile.setInputFile("");  ControlerType controler=of.createControlerType();  controler.setFirstIteration(this.firstIteration);  controler.setLastIteration(this.lastIteration);  PlanCalcScoreType planCalcScore=of.createPlanCalcScoreType();  planCalcScore.setActivityType0(this.activityType_0);  planCalcScore.setActivityType1(this.activityType_1);  planCalcScore.setHomeActivityTypicalDuration(this.homeActivityTypicalDuration);  planCalcScore.setWorkActivityTypicalDuration(this.workActivityTypicalDuration);  planCalcScore.setWorkActivityOpeningTime(this.workActivityOpeningTime);  planCalcScore.setWorkActivityLatestStartTime(this.workActivityLatestStartTime);  UrbansimParameterType ubansimParameterType=of.createUrbansimParameterType();  ubansimParameterType.setYear(this.year);  ubansimParameterType.setOpusHome(this.opusHome);  ubansimParameterType.setOpusDataPath(this.opusDataPath);  ubansimParameterType.setMatsim4Opus(this.matsim4opus);  ubansimParameterType.setMatsim4OpusConfig(this.matsim4opusConfig);  ubansimParameterType.setMatsim4OpusOutput(this.matsim4opusOutput);  ubansimParameterType.setMatsim4OpusTemp(this.matsim4opusTemp);  ubansimParameterType.setTestParameter(this.customParameter);  Matsim4UrbansimContolerType matsim4UrbanSimControlerType=of.createMatsim4UrbansimContolerType();  matsim4UrbanSimControlerType.setCellSizeCellBasedAccessibility(this.cellSizeCellBasedAccessibility);  FileType shapeFile=of.createFileType();  shapeFile.setInputFile(this.shapeFileCellBasedAccessibilityInputFile);  matsim4UrbanSimControlerType.setShapeFileCellBasedAccessibility(shapeFile);  AccessibilityParameterType accessibilityParameterType=of.createAccessibilityParameterType();  accessibilityParameterType.setUseLogitScaleParameterFromMATSim(true);  accessibilityParameterType.setUseCarParameterFromMATSim(true);  accessibilityParameterType.setUseWalkParameterFromMATSim(true);  ConfigType configType=of.createConfigType();  configType.setMatsimConfig(matsim_config);  configType.setNetwork(network);  configType.setInputPlansFile(inputPlansFileType);  configType.setHotStartPlansFile(hotStratPlansFile);  configType.setControler(controler);  configType.setPlanCalcScore(planCalcScore);  Matsim4UrbansimType matsim4UrbanSimType=of.createMatsim4UrbansimType();  matsim4UrbanSimType.setUrbansimParameter(ubansimParameterType);  matsim4UrbanSimType.setMatsim4UrbansimContoler(matsim4UrbanSimControlerType);  matsim4UrbanSimType.setAccessibilityParameter(accessibilityParameterType);  MatsimConfigType matsimConfigType=of.createMatsimConfigType();  matsimConfigType.setConfig(configType);  matsimConfigType.setMatsim4Urbansim(matsim4UrbanSimType);  return writeConfigFileV2(matsimConfigType);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @LargeTest public void testSyncBetweenTextAndDomNodeNavigation() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<p>"+ "First"+ "</p>"+ "<button>Second</button>"+ "<p>"+ "Third"+ "</p>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,META_STATE_ALT_LEFT_ON);  assertSelectionString("1");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_RIGHT,META_STATE_ALT_LEFT_ON);  assertSelectionString("3");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_RIGHT,META_STATE_ALT_LEFT_ON);  assertSelectionString("4");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<button>Second</button>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,META_STATE_ALT_LEFT_ON);  assertSelectionString("0");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,META_STATE_ALT_LEFT_ON);  assertSelectionString("1");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Third");}  }
class C{  public static PrereadType typeFromFormat(InputFormat format){switch (format) {case SDF:case FASTA:case FASTQ:case SAM_PE:case SAM_SE:    return PrereadType.UNKNOWN;case TSV_CG:case FASTQ_CG:case SAM_CG:  return PrereadType.CG;case SOLEXA:case SOLEXA1_3:return PrereadType.SOLEXA;default :throw new IllegalArgumentException("Unknown Input format " + format);}}  }
class C{  public NetworkAwarePriorityQueue(int initialCapacity,Comparator<JobHolder> comparator){  super(initialCapacity,comparator,new TimeAwareComparator(comparator));}  }
class C{  public static Date convertStringToDate(String aMask,String strDate) throws ParseException {  SimpleDateFormat df;  Date date;  df=new SimpleDateFormat(aMask);  if (log.isDebugEnabled()) {    log.debug("converting '" + strDate + "' to date with mask '"+ aMask+ "'");  }  try {    date=df.parse(strDate);  } catch (  ParseException pe) {    throw new ParseException(pe.getMessage(),pe.getErrorOffset());  }  return (date);}  }
class C{  public void killWorkers(Set<ContainerPlan> containers){  for (  ContainerPlan container : containers) {    LOG.log(Level.INFO,"Find and kill container for executor {0}",container.getId());    Optional<HeronWorker> worker=multiKeyWorkerMap.lookupByWorkerId(container.getId());    if (worker.isPresent()) {      LOG.log(Level.INFO,"Killing container {0} for executor {1}",new Object[]{worker.get().evaluator.getId(),worker.get().workerId});      worker.get().evaluator.close();    } else {      LOG.log(Level.WARNING,"Did not find evaluator for {0}",container.getId());    }    containerPlans.remove(container.getId());  }}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public void initInference(){  if (lambda == null) {    System.out.println("numFetures: " + feaGen.numFeatures());    lambda=new double[feaGen.numFeatures() + 1];    for (int i=0; i < feaGen.features.size(); i++) {      Feature f=(Feature)feaGen.features.get(i);      lambda[f.idx]=f.wgt;    }  }}  }
class C{  public void println() throws IOException {  out.write(lineSep);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tInitial count (alpha)\n","A",1,"-A <alpha>"));  return newVector.elements();}  }
class C{  public OMPoint(double lat,double lon,int offsetx,int offsety,int radius){  setRenderType(RENDERTYPE_OFFSET);  set(lat,lon,offsetx,offsety);  this.radius=radius;}  }
class C{  public void fixHttpsURLConnection(){  HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());}  }
class C{  public Key keyOf(int i){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new IllegalArgumentException("Specified index is not in the queue");  return nodes[i].key;}  }
class C{  public ScopedClassPool createScopedClassPool(ClassLoader cl,ClassPool src){  return factory.create(cl,src,this);}  }
class C{  protected ThresholdVisualizePanel createPanel(Instances data,String title) throws Exception {  ThresholdVisualizePanel result=super.createPanel(data,title);  result.setROCString("PRC area: " + Utils.doubleToString(ThresholdCurve.getPRCArea(data),3));  result.setUpComboBoxes(result.getInstances());  setComboBoxIndices(data,result);  return result;}  }
class C{  public static String quoteAndEscape(String source,char quoteChar,char[] quotingTriggers){  return quoteAndEscape(source,quoteChar,new char[]{quoteChar},quotingTriggers,'\\',false);}  }
class C{  public boolean checkSlotsAndSizesUnordered(@Nonnull IInventory inv,@Nonnull ItemStack[] filter,int[] from){  return checkSlotsAndSizesUnordered(inv,Arrays.asList(filter),from);}  }
class C{  public void testPrefixMappedFaceletPage() throws Exception {}  }
class C{  public HistoryCommands(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;}  }
class C{  public Object groupChange(String groupColumnName,Object value){  if (!isGroupColumn(groupColumnName))   return null;  Object newValue=value;  if (newValue == null)   newValue=NULL;  if (m_groupMap.containsKey(groupColumnName)) {    Object oldValue=m_groupMap.get(groupColumnName);    if (newValue.equals(oldValue))     return null;    m_groupMap.put(groupColumnName,newValue);    return oldValue;  }  m_groupMap.put(groupColumnName,newValue);  return null;}  }
class C{  public Vertex evaluateIF(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,1,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex value=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex result=network.createVertex(Primitive.NULL);  if (value.is(Primitive.TRUE)) {    List<Vertex> thens=expression.orderedRelations(Primitive.THEN);    if (thens != null) {      Vertex returnPrimitive=network.createVertex(Primitive.RETURN);      for (      Vertex then : thens) {        result=evaluateExpression(then,variables,network,startTime,maxTime,stack);        if (variables.containsKey(returnPrimitive)) {          return result;        }      }    }  } else {    List<Vertex> elseifs=expression.orderedRelations(Primitive.ELSEIF);    boolean match=false;    if (elseifs != null) {      for (      Vertex elseif : elseifs) {        Vertex returnPrimitive=network.createVertex(Primitive.RETURN);        result=evaluateExpression(elseif,variables,network,startTime,maxTime,stack);        if (variables.containsKey(returnPrimitive)) {          return result;        }        if (!result.is(Primitive.NULL)) {          match=true;          break;        }      }    }    if (!match) {      List<Vertex> elses=expression.orderedRelations(Primitive.ELSE);      if (elses != null) {        Vertex returnPrimitive=network.createVertex(Primitive.RETURN);        for (        Vertex elseExpressions : elses) {          result=evaluateExpression(elseExpressions,variables,network,startTime,maxTime,stack);          if (variables.containsKey(returnPrimitive)) {            return result;          }        }      }    }  }  return result;}  }
class C{  public static Map<String,Set<String>> parse(final URI uri,final String encoding){  Map<String,Set<String>> result=Collections.emptyMap();  final String query=uri.getRawQuery();  if (query != null && query.length() > 0) {    result=new HashMap<>();    parse(result,new Scanner(query),encoding,true);  }  return result;}  }
class C{  private int countBuddies(Player player){  return player.countBuddies();}  }
class C{  private RandomUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public int search(Object o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  static void rawError(String msg){  System.err.println(msg);}  }
class C{  public static void optimizeStylesheets(ServiceContext context) throws IOException {  int[] info=context.info;  RsrcIfc[] allRsrcs=context.allRsrcs;  ConfigData configData=context.configData;  int iAll=0;  int i=0;  while (i < info.length) {    if (info[i] == HtmlAnalyzer.EOF_KIND)     break;    if (info[i] == HtmlAnalyzer.LINK_KIND && allRsrcs[iAll] instanceof CssRsrc) {      CssRsrc cssRsrc=(CssRsrc)allRsrcs[iAll];      if (!cssRsrc.isOptimized) {        cssRsrc.isOptimized=true;        if (configData.isDebug)         System.out.println("Loading images of stylesheet: " + cssRsrc.url);        ServiceContext cssContext=new ServiceContext();        cssContext.client=context.client;        cssContext.cache=context.cache;        cssContext.isCss=true;        cssContext.variant=CacheUtils.NON_PAGE_VARIANT;        cssContext.isHtml=false;        cssContext.isHttps=context.isHttps;        cssContext.isServiceWithIframe=false;        cssContext.base=context.base;        cssContext.isStateFull=false;        cssContext.orig=cssRsrc.origData;        cssContext.host=context.host;        cssContext.requestHost=context.requestHost;        cssContext.configData=context.configData;        HtmlAnalyzer cssAnalyzer=new HtmlAnalyzer();        int[] cssInfo=cssAnalyzer.analyze(cssContext);        cssContext.info=cssInfo;        cssContext.request=context.request;        cssContext.base=cssRsrc.url;        cssContext.url=cssRsrc.url;        boolean noInline=ServiceUtils.loadMissingRsrcs(cssContext);        if (noInline)         cssRsrc.isInlinable=false;        if (cssRsrc.isInlinable) {          byte[] optimData=ServiceUtils.buildResponseToBrowser(cssContext,false);          cssRsrc.optimData=optimData;          cssRsrc.optimGzip=toGzip(optimData);          cssRsrc.optimGzipEncoding="gzip";        } else {          byte[] optimGzip=ServiceUtils.buildResponseToBrowser(cssContext,true);          cssRsrc.optimGzip=optimGzip;          cssRsrc.optimGzipEncoding="gzip";        }      }      if (!cssRsrc.isInlinable && allRsrcs[iAll] instanceof CssRsrc)       allRsrcs[iAll]=null;    }    if (info[i] == HtmlAnalyzer.IMG_KIND || info[i] == HtmlAnalyzer.CSS_IMG_KIND || info[i] == HtmlAnalyzer.INPUT_KIND || info[i] == HtmlAnalyzer.SCRIPT_KIND || info[i] == HtmlAnalyzer.LINK_KIND)     iAll++;    i+=HtmlAnalyzer.INFO_LENS[info[i]];  }}  }
class C{  public synchronized void clear(){  head=null;  tail=null;  count=0;  _totalSize=0;}  }
class C{  public ExitAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_F4,InputEvent.ALT_MASK));  putValue(LONG_DESCRIPTION,res.getString("ExitAction.statusbar"));  putValue(NAME,res.getString("ExitAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExitAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExitAction.image")))));}  }
class C{  public static String prettyPrint(byte[] xmlBytes){  return prettyPrint(new String(xmlBytes,UTF_8));}  }
class C{  public boolean hasController(){  return (controller != null);}  }
class C{  public AccountHeaderBuilder withHeaderBackground(@DrawableRes int headerBackgroundRes){  this.mHeaderBackground=new ImageHolder(headerBackgroundRes);  return this;}  }
class C{  @SuppressWarnings("rawtypes") public static String interpolate(String text,Map namespace){  Iterator keys=namespace.keySet().iterator();  while (keys.hasNext()) {    String key=keys.next().toString();    Object obj=namespace.get(key);    if (obj == null) {      throw new NullPointerException("The value of the key '" + key + "' is null.");    }    String value=obj.toString();    text=StringUtils.replace(text,"${" + key + "}",value);    if (key.indexOf(" ") == -1) {      text=StringUtils.replace(text,"$" + key,value);    }  }  return text;}  }
class C{  private void startCosuMode(){  Intent launchIntent=null;  String mode=mConfig.getMode();  String[] kioskApps=mConfig.getKioskApps();  if (CosuUtils.DEBUG)   Log.d(CosuUtils.TAG,"Starting Cosu mode: " + mode);  if (mode == null) {    mode=MODE_DEFAULT;  }  if (MODE_CUSTOM.equals(mode)) {    launchIntent=new Intent(this,KioskModeActivity.class);    launchIntent.putExtra(KioskModeActivity.LOCKED_APP_PACKAGE_LIST,kioskApps);    getPackageManager().setComponentEnabledSetting(new ComponentName(getPackageName(),KioskModeActivity.class.getName()),PackageManager.COMPONENT_ENABLED_STATE_ENABLED,PackageManager.DONT_KILL_APP);  } else   if (MODE_SINGLE.equals(mode)) {    if (kioskApps.length != 0) {      if (CosuUtils.DEBUG)       Log.d(CosuUtils.TAG,"  Launching app " + kioskApps[0]);      launchIntent=getPackageManager().getLaunchIntentForPackage(kioskApps[0]);    }  } else {    launchIntent=new Intent(Intent.ACTION_MAIN);    launchIntent.addCategory(Intent.CATEGORY_HOME);  }  if (launchIntent == null) {    Log.e(CosuUtils.TAG,"No launch intent specified. Mode=" + mode);    finishWithFailure();    return;  }  launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(launchIntent);  Toast.makeText(this,R.string.setup_cosu_success,Toast.LENGTH_LONG).show();  unregisterReceiver(mInstallReceiver);  unregisterReceiver(mDownloadReceiver);  if (mHandler.hasMessages(CosuUtils.MSG_DOWNLOAD_TIMEOUT)) {    Log.w(CosuUtils.TAG,"Download timeout messages remaining on handler thread.");    mHandler.removeMessages(CosuUtils.MSG_DOWNLOAD_TIMEOUT);  }  finish();}  }
class C{  public CustomizedDistributedRowLock<K> withColumnPrefix(String prefix){  this.prefix=prefix;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static long copyAndCloseOutput(InputStream input,OutputStream output) throws IOException {  try (OutputStream outputStream=output){    return copy(input,outputStream);  } }  }
class C{  protected void recordSelected(int key){  m_C_BPartner_ID=key;  refresh();  p_centerSouth.setOpen(true);  return;}  }
class C{  public boolean isEmpty(){  return children.isEmpty();}  }
class C{  public BackgroundLayer(){  this(ImageSource.fromResource(R.drawable.gov_nasa_worldwind_worldtopobathy2004053),new ImageOptions(WorldWind.RGB_565));}  }
class C{  public FailureSequence(){  opSequence=new ArrayDequeSolution<DequeOperation>();}  }
class C{  public _QueuedBuildUpdate(final _QueuedBuildUpdate_Flag[] flags){  super(flags);}  }
class C{  protected boolean isCommunityEdition(){  return Util.isCommunityEdition(((MySQLConnection)this.conn).getServerVersion());}  }
class C{  private FileUtils(){}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  @Override public Object clone(){  AggregateObjectMapping mappingObject=(AggregateObjectMapping)super.clone();  Map<String,DatabaseField> aggregateToSourceFields=new HashMap<String,DatabaseField>();  aggregateToSourceFields.putAll(getAggregateToSourceFields());  mappingObject.setAggregateToSourceFields(aggregateToSourceFields);  return mappingObject;}  }
class C{  private void reportDisplaySelection(@Nullable GSAContextDisplaySelection displaySelection){  Tab currentTab=mActivity.getActivityTab();  reportUsageOfCurrentContextIfPossible(currentTab,false,displaySelection);}  }
class C{  public void dispose() throws IOException {  position=-1;  randomAccessFile.close();  overflowFile.delete();}  }
class C{  private void stepOutput(final Port port){  final Pipe sendingPipe=getCasing().getSendingPipe(getFace(),port);  if (!sendingPipe.isWriting()) {    sendingPipe.beginWrite(input[channel]);  }}  }
class C{  public Peer(PeerNetwork network,String address){  this.address=address;  this.network=network;  lastSeen=new Date();}  }
class C{  private static void create(IgniteFileSystem fs,IgfsPath path,@Nullable byte[] data) throws IgniteException, IOException {  assert fs != null;  assert path != null;  try (OutputStream out=fs.create(path,true)){    System.out.println();    System.out.println(">>> Created file: " + path);    if (data != null) {      out.write(data);      System.out.println();      System.out.println(">>> Wrote data to file: " + path);    }  }   System.out.println();}  }
class C{  public static void show(final Window parent,final String content){  final CLogFileDialog dialog=new CLogFileDialog(parent,content);  GuiHelper.centerChildToParent(parent,dialog,true);  dialog.setVisible(true);}  }
class C{  public static <T extends SabresObject>void printSchema(Class<T> clazz){  Schema.printSchema(clazz.getSimpleName());}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public void subtract(final Number operand){  this.value-=operand.doubleValue();}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {}  }
class C{  AccessControlContext optimize(){  AccessControlContext acc;  DomainCombiner combiner=null;  AccessControlContext parent=null;  Permission[] permissions=null;  if (isPrivileged) {    acc=privilegedContext;    if (acc != null) {      if (acc.isWrapped) {        permissions=acc.permissions;        parent=acc.parent;      }    }  } else {    acc=AccessController.getInheritedAccessControlContext();    if (acc != null) {      if (acc.isLimited) {        parent=acc;      }    }  }  boolean skipStack=(context == null);  boolean skipAssigned=(acc == null || acc.context == null);  ProtectionDomain[] assigned=(skipAssigned) ? null : acc.context;  ProtectionDomain[] pd;  boolean skipLimited=((acc == null || !acc.isWrapped) && parent == null);  if (acc != null && acc.combiner != null) {    if (getDebug() != null) {      debug.println("AccessControlContext invoking the Combiner");    }    combiner=acc.combiner;    pd=combiner.combine(context,assigned);  } else {    if (skipStack) {      if (skipAssigned) {        calculateFields(acc,parent,permissions);        return this;      } else       if (skipLimited) {        return acc;      }    } else     if (assigned != null) {      if (skipLimited) {        if (context.length == 1 && context[0] == assigned[0]) {          return acc;        }      }    }    pd=combine(context,assigned);    if (skipLimited && !skipAssigned && pd == assigned) {      return acc;    } else     if (skipAssigned && pd == context) {      calculateFields(acc,parent,permissions);      return this;    }  }  this.context=pd;  this.combiner=combiner;  this.isPrivileged=false;  calculateFields(acc,parent,permissions);  return this;}  }
class C{  public void transformPoint(Object nativeTransform,float[] in,float[] out){  AffineTransform t=(AffineTransform)nativeTransform;  t.transform(in,0,out,0,1);  clamp(out);}  }
class C{  public boolean hasProfileMetaData(){  return hasExtension(ProfileMetaData.class);}  }
class C{  @Override public DataSet simulateData(int sampleSize,long seed,boolean latentDataSaved){  RandomUtil random=RandomUtil.getInstance();  long _seed=random.getSeed();  random.setSeed(seed);  DataSet dataSet=simulateData(sampleSize,latentDataSaved);  random.revertSeed(_seed);  return dataSet;}  }
class C{  public void mouseMoved(MouseEvent event){  if (tipShowing) {    checkForTipChange(event);  } else   if (showImmediately) {    JComponent component=(JComponent)event.getSource();    toolTipText=component.getToolTipText(event);    if (toolTipText != null) {      preferredLocation=component.getToolTipLocation(event);      mouseEvent=event;      insideComponent=component;      exitTimer.stop();      showTipWindow();    }  } else {    insideComponent=(JComponent)event.getSource();    mouseEvent=event;    toolTipText=null;    enterTimer.restart();  }}  }
class C{  public ModelClassGenerator(int AD_Table_ID,String directory,String packageName){  this.packageName=packageName;  StringBuffer mandatory=new StringBuffer();  StringBuffer sb=createColumns(AD_Table_ID,mandatory);  String tableName=createHeader(AD_Table_ID,sb,mandatory,packageName);  if (!directory.endsWith(File.separator))   directory+=File.separator;  writeToFile(sb,directory + tableName + ".java");}  }
class C{  public static void murmur3(final BitVector bv,final long prefixLength,final long[] hh1,final long[] hh2,final long[] cc1,final long cc2[],final long h[]){  final int startStateWord=(int)(prefixLength / (2 * Long.SIZE));  long precomputedUpTo=startStateWord * 2L * Long.SIZE;  long h1=hh1[startStateWord];  long h2=hh2[startStateWord];  long c1=cc1[startStateWord];  long c2=cc2[startStateWord];  long k1, k2;  if (prefixLength > precomputedUpTo) {    if (prefixLength - precomputedUpTo > Long.SIZE) {      k1=bv.getLong(precomputedUpTo,precomputedUpTo+=Long.SIZE);      k2=bv.getLong(precomputedUpTo,prefixLength);    } else {      k1=bv.getLong(precomputedUpTo,prefixLength);      k2=0;    }    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  h2^=prefixLength;  h1+=h2;  h2+=h1;  h1=finalizeMurmur3(h1);  h2=finalizeMurmur3(h2);  h1+=h2;  h2+=h1;  h[0]=h1;  h[1]=h2;}  }
class C{  private double errorsForTree() throws Exception {  double errors=0;  if (m_isLeaf)   return errorsForLeaf(); else {    for (int i=0; i < m_sons.length; i++)     if (Utils.eq(localModel().distribution().perBag(i),0)) {      errors+=m_test.perBag(i) - m_test.perClassPerBag(i,localModel().distribution().maxClass());    } else     errors+=son(i).errorsForTree();    return errors;  }}  }
class C{  private Bytestream createStreamHostActivation(){  Bytestream activate=new Bytestream(this.sessionID);  activate.setMode(null);  activate.setType(IQ.Type.SET);  activate.setTo(this.streamHost.getJID());  activate.setToActivate(this.target);  return activate;}  }
class C{  public MapMouseSupport(){  this(null,true);}  }
class C{  @Override public void emitTuple(HashMap<K,Integer> tuple){  most.emit(tuple);}  }
class C{  public AtomDataParser(){  super(AltFormat.ATOM,IAtom.class);}  }
class C{  public int hashCode(){  return m_value.hashCode();}  }
class C{  @PUT @Path("/{id}/resume") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.TENANT_ADMIN}) public TaskResourceRep resumeWorkflow(@PathParam("id") URI uri){  Workflow workflow=queryResource(uri);  verifySuspendedWorkflow(workflow);  String taskId=UUID.randomUUID().toString();  Operation op=initTaskStatus(_dbClient,workflow,taskId,Operation.Status.pending,ResourceOperationTypeEnum.WORKFLOW_RESUME);  getController().resumeWorkflow(uri,taskId);  return toTask(workflow,taskId,op);}  }
class C{  public GridClientFutureTimeoutException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  void finishPacket(ByteBuffer buffer){  addTlv(buffer,DHCP_MESSAGE_TYPE,DHCP_MESSAGE_TYPE_OFFER);  addTlv(buffer,DHCP_SERVER_IDENTIFIER,mServerIdentifier);  addTlv(buffer,DHCP_LEASE_TIME,mLeaseTime);  if (mLeaseTime != null) {    addTlv(buffer,DHCP_RENEWAL_TIME,Integer.valueOf(mLeaseTime.intValue() / 2));  }  addTlv(buffer,DHCP_SUBNET_MASK,mSubnetMask);  addTlv(buffer,DHCP_ROUTER,mGateway);  addTlv(buffer,DHCP_DOMAIN_NAME,mDomainName);  addTlv(buffer,DHCP_BROADCAST_ADDRESS,mBroadcastAddress);  addTlv(buffer,DHCP_DNS_SERVER,mDnsServers);  addTlvEnd(buffer);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  @Override public int compareTo(Object o1){  int result;  long difference;  if (o1 instanceof FixedMillisecond) {    FixedMillisecond t1=(FixedMillisecond)o1;    difference=this.time - t1.time;    if (difference > 0) {      result=1;    } else {      if (difference < 0) {        result=-1;      } else {        result=0;      }    }  } else   if (o1 instanceof RegularTimePeriod) {    result=0;  } else {    result=1;  }  return result;}  }
class C{  private void serializeMap(Map<?,?> map,File file){  try {    ObjectOutputStream os=new ObjectOutputStream(new FileOutputStream(file));    os.writeObject(map);    os.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static char[] toPrimitive(Character[] array,char valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_CHAR_ARRAY;  }  final char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    Character b=array[i];    result[i]=(b == null ? valueForNull : b.charValue());  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getSingleAssociationEnd_();}  }
class C{  public boolean isVector(){  return columns == 1 || rows == 1;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gduf");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void waitSensorInactive(Sensor mSensor){  if (log.isDebugEnabled()) {    log.debug("waitSensorInActive starts");  }  waitSensorState(mSensor,Sensor.INACTIVE);  return;}  }
class C{  public static double blackFormulaImpliedStdDev(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real final double guess,@Real final double accuracy,@Real final double displacement){  return blackFormulaImpliedStdDev(payoff.optionType(),strike,forward,blackPrice,discount,guess,accuracy,displacement);}  }
class C{  @Override public int compare(Value[] a,Value[] b){  for (int i=0, len=queryColumnIndexes.length; i < len; i++) {    int idx=queryColumnIndexes[i];    int type=sortTypes[i];    Value ao=a[idx];    Value bo=b[idx];    boolean aNull=ao == ValueNull.INSTANCE, bNull=bo == ValueNull.INSTANCE;    if (aNull || bNull) {      if (aNull == bNull) {        continue;      }      return compareNull(aNull,type);    }    int comp=database.compare(ao,bo);    if (comp != 0) {      return (type & DESCENDING) == 0 ? comp : -comp;    }  }  return 0;}  }
class C{  public DiagnosticTool(){  super("EA");  setSize(800,600);  setMinimumSize(new Dimension(800,600));  setExtendedState(JFrame.MAXIMIZED_BOTH);  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  initialize();  layoutMenu();  layoutComponents();}  }
class C{  public static void logNoMoreArchives(final Logger logger){  logger.logMessage(Level.INFO,"Consumer initiates SHUTDOWN: no more archives available.");}  }
class C{  public PingApplication(Settings s){  if (s.contains(PING_PASSIVE)) {    this.passive=s.getBoolean(PING_PASSIVE);  }  if (s.contains(PING_INTERVAL)) {    this.interval=s.getDouble(PING_INTERVAL);  }  if (s.contains(PING_OFFSET)) {    this.lastPing=s.getDouble(PING_OFFSET);  }  if (s.contains(PING_SEED)) {    this.seed=s.getInt(PING_SEED);  }  if (s.contains(PING_PING_SIZE)) {    this.pingSize=s.getInt(PING_PING_SIZE);  }  if (s.contains(PING_PONG_SIZE)) {    this.pongSize=s.getInt(PING_PONG_SIZE);  }  if (s.contains(PING_DEST_RANGE)) {    int[] destination=s.getCsvInts(PING_DEST_RANGE,2);    this.destMin=destination[0];    this.destMax=destination[1];  }  rng=new Random(this.seed);  super.setAppID(APP_ID);}  }
class C{  @Override public boolean isCritical(){  return true;}  }
class C{  public static void dynamicBridgeTo(CodeArray instructions){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void add(ReadablePeriod period){  add(period,1);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static boolean isAcceptableVersion(NetworkParameters params,int version){  for (  int v : params.getAcceptableAddressCodes()) {    if (version == v) {      return true;    }  }  return false;}  }
class C{  public HttpResponse delete(String path,ParameterMap params){  return execute(new HttpDelete(path,params));}  }
class C{  final int internalNextInt(int origin,int bound){  if (origin < bound) {    int n=bound - origin;    if (n > 0) {      return nextInt(n) + origin;    } else {      int r;      do {        r=nextInt();      } while (r < origin || r >= bound);      return r;    }  } else {    return nextInt();  }}  }
class C{  protected ClassLoader(){  this(getSystemClassLoader(),false);}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof ECPoint) {    if (this.affineX != null) {      ECPoint otherPoint=(ECPoint)other;      return this.affineX.equals(otherPoint.affineX) && this.affineY.equals(otherPoint.affineY);    } else {      return other == POINT_INFINITY;    }  }  return false;}  }
class C{  static boolean createMethod(Tree.Parameter parameter){  return createMethod(parameter.getParameterModel());}  }
class C{  private void postProcessRelationships(PatchRequestScope requestScope){  actions.forEach(null);}  }
class C{  protected JvmRTClassPathTableMeta createJvmRTClassPathTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmRTClassPathTableMetaImpl(mib,objectserver);}  }
class C{  private boolean hasStaticModifier(int access){  return (access & Opcodes.ACC_STATIC) == Opcodes.ACC_STATIC;}  }
class C{  public Vertex define(Vertex source,Vertex vertex){  return define(source,vertex,null);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T newProxyInstance(Class<T> interfaceClass,T delegate,Strictness strictness,Thread current){  return (T)Proxy.newProxyInstance(interfaceClass.getClassLoader(),new Class<?>[]{interfaceClass},new ThreadConfinedProxy(delegate,strictness,current.getName(),current.getId()));}  }
class C{  public Response api(final String url,final String methodType,final Map<String,String> params,final Map<String,String> headerParams,final String body) throws Exception {  Response response;  try {    response=getCurrentProvider().api(url,methodType,params,headerParams,body);  } catch (  Exception e) {    throw new SocialAuthException("Error while making request to URL : " + url,e);  }  return response;}  }
class C{  @Override public String[] determineColumnConstraints(ResultProducer rp) throws Exception {  return null;}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){  final double sourceX=source.getX();  for (int axisIdx=0; axisIdx < getAxisCount(); axisIdx++) {    final ValueAxis axis=getAxis(axisIdx);    if (axis != null) {      if (useAnchor) {        double anchorX=axis.java2DToValue(sourceX,info.getDataArea(),RectangleEdge.BOTTOM);        axis.resizeRange(factor,anchorX);      } else {        axis.resizeRange(factor);      }    }  }}  }
class C{  public static Optional<String> ifEmpty(String str){  return Optional.ofNullable(str).filter(null);}  }
class C{  public void verify(TransactionOutput output) throws VerificationException {  if (output.parent != null) {    if (!getOutpoint().getHash().equals(output.getParentTransaction().getHash()))     throw new VerificationException("This input does not refer to the tx containing the output.");    if (getOutpoint().getIndex() != output.getIndex())     throw new VerificationException("This input refers to a different output on the given tx.");  }  Script pubKey=output.getScriptPubKey();  int myIndex=getParentTransaction().getInputs().indexOf(this);  getScriptSig().correctlySpends(getParentTransaction(),myIndex,pubKey);}  }
class C{  public void increment(){  if (value == null) {    value=1;  } else {    value++;  }}  }
class C{  protected InternalReadReport asyncStreamRead(EntityDefinition ed,Scan scan,QualifierCreationListener listener) throws IOException {  long counter=0;  long startTimestamp=0;  long stopTimestamp=0;  InternalScanner scanner=this.getCurrentRegion().getScanner(scan);  List<Cell> results=new ArrayList<Cell>();  try {    boolean hasMoreRows;    do {      hasMoreRows=scanner.next(results);      Map<String,byte[]> kvMap=new HashMap<String,byte[]>();      if (!results.isEmpty()) {        counter++;        byte[] row=results.get(0).getRow();        long timestamp=RowkeyBuilder.getTimestamp(row,ed);        if (startTimestamp == 0 || startTimestamp > timestamp) {          startTimestamp=timestamp;        }        if (stopTimestamp == 0 || stopTimestamp < timestamp) {          stopTimestamp=timestamp;        }        for (        Cell kv : results) {          String qualifierName=Bytes.toString(kv.getQualifier());          Qualifier qualifier=null;          if (!ed.isTag(qualifierName)) {            qualifier=ed.getQualifierNameMap().get(qualifierName);            if (qualifier == null) {              LOG.error("qualifier for field " + qualifierName + " not exist");              throw new IOException(new NullPointerException("qualifier for field " + qualifierName + " is null"));            }            qualifierName=qualifier.getDisplayName();          }          if (kv.getValue() != null)           kvMap.put(qualifierName,kv.getValue());        }        if (!kvMap.isEmpty())         listener.qualifierCreated(kvMap);        results.clear();      } else {        if (LOG.isDebugEnabled())         LOG.warn("Empty batch of KeyValue");      }    } while (hasMoreRows);  } catch (  IOException ex) {    LOG.error(ex.getMessage(),ex);    throw ex;  } finally {    if (scanner != null) {      scanner.close();    }  }  return new InternalReadReport(counter,startTimestamp,stopTimestamp);}  }
class C{  public void runUsingBootstrapper(Project project) throws Exception {  runUsing(P2BootstrapInstallation.latest().outsideJvmRunner(project));}  }
class C{  public String makeString(){  return "CustomChunkGenerator";}  }
class C{  final long internalNextLong(long origin,long bound){  long r=mix64(nextSeed());  if (origin < bound) {    long n=bound - origin, m=n - 1;    if ((n & m) == 0L)     r=(r & m) + origin; else     if (n > 0L) {      for (long u=r >>> 1; u + m - (r=u % n) < 0L; u=mix64(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix64(nextSeed());    }  }  return r;}  }
class C{  public static Element createPixel(RenderScript rs,DataType dt,DataKind dk){  if (!(dk == DataKind.PIXEL_L || dk == DataKind.PIXEL_A || dk == DataKind.PIXEL_LA || dk == DataKind.PIXEL_RGB || dk == DataKind.PIXEL_RGBA || dk == DataKind.PIXEL_DEPTH || dk == DataKind.PIXEL_YUV)) {    throw new RSIllegalArgumentException("Unsupported DataKind");  }  if (!(dt == DataType.UNSIGNED_8 || dt == DataType.UNSIGNED_16 || dt == DataType.UNSIGNED_5_6_5 || dt == DataType.UNSIGNED_4_4_4_4 || dt == DataType.UNSIGNED_5_5_5_1)) {    throw new RSIllegalArgumentException("Unsupported DataType");  }  if (dt == DataType.UNSIGNED_5_6_5 && dk != DataKind.PIXEL_RGB) {    throw new RSIllegalArgumentException("Bad kind and type combo");  }  if (dt == DataType.UNSIGNED_5_5_5_1 && dk != DataKind.PIXEL_RGBA) {    throw new RSIllegalArgumentException("Bad kind and type combo");  }  if (dt == DataType.UNSIGNED_4_4_4_4 && dk != DataKind.PIXEL_RGBA) {    throw new RSIllegalArgumentException("Bad kind and type combo");  }  if (dt == DataType.UNSIGNED_16 && dk != DataKind.PIXEL_DEPTH) {    throw new RSIllegalArgumentException("Bad kind and type combo");  }  int size=1;switch (dk) {case PIXEL_LA:    size=2;  break;case PIXEL_RGB:size=3;break;case PIXEL_RGBA:size=4;break;case PIXEL_DEPTH:size=2;break;}boolean norm=true;int id=rs.nElementCreate(dt.mID,dk.mID,norm,size);return new Element(id,rs,dt,dk,norm,size);}  }
class C{  public CModuleViewsContainerComponent(final JTree projectTree,final IViewContainer container){  super(new BorderLayout());  Preconditions.checkNotNull(projectTree,"IE02045: Project tree argument can not be null");  Preconditions.checkNotNull(container,"IE02048: Container argument can not be null");  m_flowComponent=new CUserViewsComponent(projectTree,container);  add(m_flowComponent);}  }
class C{  @Override public void removeProperties(){  File file=Paths.get(System.getProperty(catalinaHomeEnvPropName),confFolderName,propFileName).toFile();  if (file.exists()) {    file.delete();  }}  }
class C{  private void typeIntoWebField(String id,String text){  onWebView().withElement(findElement(Locator.ID,id)).perform(clearElement()).perform(webKeys(text));}  }
class C{  public ClassDependency(Class<?> cl){  _cl=cl;  _className=cl.getName();}  }
class C{  public boolean isAutoDownloadIsAllowed(){  return allowUpdatesAutoDownload;}  }
class C{  public void addRunInfo(){  addLine(META_STRING + "CL=" + CommandLine.getCommandLine());  addLine(META_STRING + "RUN-ID=" + CommandLine.getRunId());}  }
class C{  public MBeanTrustPermission(String name,String actions){  super(name,actions);  validate(name,actions);}  }
class C{  public Envelope boundary(){  Double minLongitude=this.rawPointRDD.min((PointXComparator)GeometryComparatorFactory.createComparator("point","x")).getX();  Double maxLongitude=this.rawPointRDD.max((PointXComparator)GeometryComparatorFactory.createComparator("point","x")).getX();  Double minLatitude=this.rawPointRDD.min((PointYComparator)GeometryComparatorFactory.createComparator("point","y")).getY();  Double maxLatitude=this.rawPointRDD.max((PointYComparator)GeometryComparatorFactory.createComparator("point","y")).getY();  this.boundary[0]=minLongitude;  this.boundary[1]=minLatitude;  this.boundary[2]=maxLongitude;  this.boundary[3]=maxLatitude;  this.boundaryEnvelope=new Envelope(minLongitude,maxLongitude,minLatitude,maxLatitude);  return boundaryEnvelope;}  }
class C{  public AnalysisSmartCacheMatch(AnalysisSmartCacheSignature signature){  super();  this.signature=signature;}  }
class C{  public final TextBuilder append(double d){  return append(d,-1,(Math.abs(d) >= 1E7) || (Math.abs(d) < 0.001),false);}  }
class C{  @Override public void onSuccess(DescribeInternetGatewaysRequest request,DescribeInternetGatewaysResult result){  OperationContext.restoreOperationContext(this.opContext);  for (  InternetGateway resultGateway : result.getInternetGateways()) {    for (    InternetGatewayAttachment attachment : resultGateway.getAttachments()) {      if (this.aws.vpcs.containsKey(attachment.getVpcId())) {        NetworkState networkStateToUpdate=this.aws.vpcs.get(attachment.getVpcId());        networkStateToUpdate.customProperties.put(AWS_GATEWAY_ID,resultGateway.getInternetGatewayId());        this.aws.vpcs.put(attachment.getVpcId(),networkStateToUpdate);      }    }  }  this.aws.networkCreationStage=this.next;  this.service.handleNetworkStateChanges(this.aws);}  }
class C{  @DSComment("IO movement methodName") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.427 -0500",hash_original_method="BFEE5D773C8C1A637BA8549A5548CE5E",hash_generated_method="E341FECD54C25953BA09A90E6F690069") public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static RegExpExpression regexp(Expression left,Expression right){  return new RegExpExpression(left,right);}  }
class C{  @Override public boolean addAll(int location,Collection<? extends E> collection){  if (location < 0 || location > size) {    throw new IndexOutOfBoundsException("" + location + " out of: "+ size);  }  Object[] dumparray=toObjectArray(collection);  int growSize=dumparray.length;  if (growSize == 0) {    return false;  }  if (location == 0) {    growAtFront(growSize);    firstIndex-=growSize;  } else   if (location == size) {    if (firstIndex + size > array.length - growSize) {      growAtEnd(growSize);    }  } else {    if (array.length - size < growSize) {      growForInsert(location,growSize);    } else     if (firstIndex + size > array.length - growSize || (firstIndex > 0 && location < size / 2)) {      int newFirst=firstIndex - growSize;      if (newFirst < 0) {        int index=location + firstIndex;        System.arraycopy(array,index,array,index - newFirst,size - location);        newFirst=0;      }      System.arraycopy(array,firstIndex,array,newFirst,location);      firstIndex=newFirst;    } else {      int index=location + firstIndex;      System.arraycopy(array,index,array,index + growSize,size - location);    }  }  System.arraycopy(dumparray,0,this.array,location + firstIndex,growSize);  size+=growSize;  modCount++;  return true;}  }
class C{  public byte[] data(){  long now=System.currentTimeMillis();  _names.clear();  MessageOutputStream message=new MessageOutputStream(_maxUDPPayload,this);  message.writeShort(_multicast ? 0 : this.getId());  message.writeShort(this.getFlags());  message.writeShort(this.getNumberOfQuestions());  message.writeShort(this.getNumberOfAnswers());  message.writeShort(this.getNumberOfAuthorities());  message.writeShort(this.getNumberOfAdditionals());  for (  DNSQuestion question : _questions) {    message.writeQuestion(question);  }  for (  DNSRecord record : _answers) {    message.writeRecord(record,now);  }  for (  DNSRecord record : _authoritativeAnswers) {    message.writeRecord(record,now);  }  for (  DNSRecord record : _additionals) {    message.writeRecord(record,now);  }  return message.toByteArray();}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public ElapsedTimeCollector(){  super();  startTime=System.nanoTime();}  }
class C{  @Override public AggregateableEvaluation aggregate(Evaluation evaluation){  m_Incorrect+=evaluation.incorrect();  m_Correct+=evaluation.correct();  m_Unclassified+=evaluation.unclassified();  m_MissingClass+=evaluation.m_MissingClass;  m_WithClass+=evaluation.m_WithClass;  if (evaluation.m_ConfusionMatrix != null) {    double[][] newMatrix=evaluation.confusionMatrix();    if (newMatrix != null) {      for (int i=0; i < m_ConfusionMatrix.length; i++) {        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {          m_ConfusionMatrix[i][j]+=newMatrix[i][j];        }      }    }  }  double[] newClassPriors=evaluation.m_ClassPriors;  if (newClassPriors != null && m_ClassPriors != null) {    for (int i=0; i < this.m_ClassPriors.length; i++) {      m_ClassPriors[i]=newClassPriors[i];    }  }  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;  m_TotalCost+=evaluation.totalCost();  m_SumErr+=evaluation.m_SumErr;  m_SumAbsErr+=evaluation.m_SumAbsErr;  m_SumSqrErr+=evaluation.m_SumSqrErr;  m_SumClass+=evaluation.m_SumClass;  m_SumSqrClass+=evaluation.m_SumSqrClass;  m_SumPredicted+=evaluation.m_SumPredicted;  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;  m_SumClassPredicted+=evaluation.m_SumClassPredicted;  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;  m_SumKBInfo+=evaluation.m_SumKBInfo;  double[] newMarginCounts=evaluation.m_MarginCounts;  if (newMarginCounts != null) {    for (int i=0; i < m_MarginCounts.length; i++) {      m_MarginCounts[i]+=newMarginCounts[i];    }  }  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;  m_TotalCoverage+=evaluation.m_TotalCoverage;  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;  if (predsToAdd != null) {    if (m_Predictions == null) {      m_Predictions=new ArrayList<Prediction>();    }    for (int i=0; i < predsToAdd.size(); i++) {      m_Predictions.add(predsToAdd.get(i));    }  }  return this;}  }
class C{  public static void main(String[] args){  try {    (new RequestSync()).run(args);  } catch (  IllegalArgumentException e) {    showUsage();    System.err.println("Error: " + e);    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace(System.err);    System.exit(1);  }}  }
class C{  public static boolean isPrimitiveType(PsiType type){  return type instanceof PsiPrimitiveType;}  }
class C{  public static NSObject parse(InputStream is) throws IOException, PropertyListFormatException {  byte[] buf=PropertyListParser.readAll(is);  return parse(buf);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static Date nextDate(final String IMMcode,final boolean mainCycle,final Date referenceDate){  final Date immDate=date(IMMcode,referenceDate);  return nextDate(immDate.inc(),mainCycle);}  }
class C{  public final void clear(){  first=null;}  }
class C{  public SVGOMSubImageRefElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  private void initializeColumnMap(Schema schema){  setColumnNames(schema.getFields());  keyMethodMap=new ArrayList<Getter>();  for (int i=0; i < getColumnNames().size(); i++) {    try {      keyMethodMap.add(generateGettersForField(cls,getColumnNames().get(i).name()));    } catch (    NoSuchFieldException|SecurityException e) {      throw new RuntimeException("Failed to initialize pojo class getters for field - ",e);    }  }}  }
class C{  private static final String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  protected boolean checkCollectionItemTypes(Collection collection,Class<?> itemClass){  for (  Object collectionItem : collection) {    if (!itemClass.isAssignableFrom(collectionItem.getClass()))     return false;  }  return true;}  }
class C{  public boolean isInclusive(){  return inclusive;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public JstlIntegrationITCase(String name){  super(name);}  }
class C{  public void testGetColumnsUsingInfoSchema() throws Exception {  if (versionMeetsMinimum(5,0,7)) {    createTable("t1","(c1 char(1))");    Properties props=new Properties();    props.put("useInformationSchema","true");    Connection conn1=null;    try {      conn1=getConnectionWithProps(props);      DatabaseMetaData metaData=conn1.getMetaData();      this.rs=metaData.getColumns(null,null,"t1",null);      this.rs.next();      assertEquals("t1",this.rs.getString("TABLE_NAME"));      assertEquals("c1",this.rs.getString("COLUMN_NAME"));      assertEquals("CHAR",this.rs.getString("TYPE_NAME"));      assertEquals("1",this.rs.getString("COLUMN_SIZE"));    }  finally {      if (conn1 != null) {        conn1.close();      }    }  }}  }
class C{  @Override public void toggleSelection(Figure figure){  if (selectedFigures.contains(figure)) {    removeFromSelection(figure);  } else {    addToSelection(figure);  }}  }
class C{  public BigOperatorAtom(Atom base,Atom under,Atom over,boolean limits){  this(base,under,over);  this.limits=limits;  limitsSet=true;}  }
class C{  private void report(String name,int burnin,double mrsd,double scale){  int count=0;  Map<String,List<Double>> heightMap=new HashMap<String,List<Double>>();  Set<String> states=new TreeSet<String>();  try {    FileReader fileReader=new FileReader(new File(name));    TreeImporter importer=new NexusImporter(fileReader);    while (importer.hasTree()) {      Tree tree=importer.importNextTree();      if (count >= burnin) {        for (int i=0; i < tree.getInternalNodeCount(); i++) {          NodeRef node=tree.getInternalNode(i);          Object value=tree.getNodeAttribute(node,"state");          if (value != null) {            String state=value.toString();            List<Double> heights=heightMap.get(state);            if (heights == null) {              heights=new ArrayList<Double>();              heightMap.put(state,heights);              states.add(state);            }            double h=tree.getNodeHeight(node) * scale;            if (Double.isNaN(mrsd)) {              heights.add(h);            } else {              heights.add(mrsd - h);            }          } else {            System.out.println("Node missing state");          }        }      }      count++;    }    boolean first=true;    int maxCount=0;    for (    String state : states) {      if (first) {        first=false;      } else {        System.out.print("\t");      }      System.out.print(state);      List<Double> heights=heightMap.get(state);      if (heights.size() > maxCount) {        maxCount=heights.size();      }    }    System.out.println();    for (int i=0; i < maxCount; i++) {      first=true;      for (      String state : states) {        if (first) {          first=false;        } else {          System.out.print("\t");        }        List<Double> heights=heightMap.get(state);        if (i < heights.size()) {          System.out.print(heights.get(i));        }      }      System.out.println();    }  } catch (  Importer.ImportException e) {    System.err.println("Error Parsing Input Tree: " + e.getMessage());  }catch (  IOException e) {    System.err.println("Error Parsing Input Tree: " + e.getMessage());  }}  }
class C{  public DispatchingEventReplayer<T> filter(Predicate<Event> predicate){  return new DispatchingEventReplayer<>(causalOrderComparator,dispatcher,eventReplayer.filter(predicate));}  }
class C{  public _QueueStatus(){  super();}  }
class C{  @Override public TransferResult<V,S> visitLocalVariable(LocalVariableNode n,TransferInput<V,S> in){  S store=in.getRegularStore();  V valueFromStore=store.getValue(n);  V valueFromFactory=getValueFromFactory(n.getTree(),n);  V value=moreSpecificValue(valueFromFactory,valueFromStore);  return new RegularTransferResult<>(finishValue(value,store),store);}  }
class C{  public Door(final String clazz){  this(clazz,"This door is closed");}  }
class C{  public DelphiFunction(String functionName){  setName(functionName);  setRealName(functionName);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.GENERIC_DECLARATION;}  }
class C{  protected void onLastListItem(){  if (swipeListViewListener != null) {    swipeListViewListener.onLastListItem();  }}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  private void indexArrayStore(int e,int i){  if (valueIndexStore.length < e) {    int oldLength=valueIndexStore.length;    valueIndexStore=Arrays.copyOf(valueIndexStore,e + 2);    Arrays.fill(valueIndexStore,oldLength,valueIndexStore.length,-1);  }  valueIndexStore[e]=i;}  }
class C{  protected Node newNode(){  return new GenericComment();}  }
class C{  private ScreenOverlayType createLegend() throws IOException {  this.writer.addNonKMLFile(MatsimResource.getAsInputStream("countsKml/countsLegend240x300.png"),"countsLegend.png");  ScreenOverlayType overlay=kmlObjectFactory.createScreenOverlayType();  LinkType icon=kmlObjectFactory.createLinkType();  icon.setHref("./countsLegend.png");  overlay.setIcon(icon);  overlay.setName("Legend");  Vec2Type overlayXY=kmlObjectFactory.createVec2Type();  overlayXY.setX(0.0);  overlayXY.setY(0.0);  overlayXY.setXunits(UnitsEnumType.FRACTION);  overlayXY.setYunits(UnitsEnumType.FRACTION);  overlay.setOverlayXY(overlayXY);  Vec2Type screenXY=kmlObjectFactory.createVec2Type();  screenXY.setX(0.02);  screenXY.setY(0.07);  screenXY.setXunits(UnitsEnumType.FRACTION);  screenXY.setYunits(UnitsEnumType.FRACTION);  overlay.setScreenXY(screenXY);  return overlay;}  }
class C{  private SpeechletResponse handleNextEventRequest(Session session){  String cardTitle="More events on this day in history";  ArrayList<String> events=(ArrayList<String>)session.getAttribute(SESSION_TEXT);  int index=(Integer)session.getAttribute(SESSION_INDEX);  String speechOutput="";  String cardOutput="";  if (events == null) {    speechOutput="With History Buff, you can get historical events for any day of the year." + " For example, you could say today, or August thirtieth." + " Now, which day do you want?";  } else   if (index >= events.size()) {    speechOutput="There are no more events for this date. Try another date by saying, " + " get events for august thirtieth.";  } else {    StringBuilder speechOutputBuilder=new StringBuilder();    StringBuilder cardOutputBuilder=new StringBuilder();    for (int i=0; i < PAGINATION_SIZE && index < events.size(); i++) {      speechOutputBuilder.append("<p>");      speechOutputBuilder.append(events.get(index));      speechOutputBuilder.append("</p> ");      cardOutputBuilder.append(events.get(index));      cardOutputBuilder.append(" ");      index++;    }    if (index < events.size()) {      speechOutputBuilder.append(" Wanna go deeper in history?");      cardOutputBuilder.append(" Wanna go deeper in history?");    }    session.setAttribute(SESSION_INDEX,index);    speechOutput=speechOutputBuilder.toString();    cardOutput=cardOutputBuilder.toString();  }  String repromptText="Do you want to know more about what happened on this date?";  SimpleCard card=new SimpleCard();  card.setTitle(cardTitle);  card.setContent(cardOutput.toString());  SpeechletResponse response=newAskResponse("<speak>" + speechOutput + "</speak>",true,repromptText,false);  response.setCard(card);  return response;}  }
class C{  private static LinuxDesktop detectDesktopSession(){  ArrayList<String> command=new ArrayList<String>();  command.add("sh");  command.add("-c");  command.add("echo \"$DESKTOP_SESSION\"");  Map<String,Object> desktops=new HashMap<String,Object>();  desktops.put("kde",LinuxDesktop.desktopKde);  desktops.put("gnome",LinuxDesktop.desktopGnome);  desktops.put("cinnamon",LinuxDesktop.desktopCinnamon);  desktops.put("xfce",LinuxDesktop.desktopXfce);  String desktop=isExpectedCommandOutput(command,desktops,true);  if (desktop != null && !desktop.isEmpty()) {    return (LinuxDesktop)desktops.get(desktop);  }  return LinuxDesktop.desktopUnknown;}  }
class C{  public BigdataNTriplesParser(BigdataValueFactory valueFactory){  super(valueFactory);}  }
class C{  static <T>boolean removeIf(Iterable<T> removeFrom,Predicate<? super T> predicate){  if (removeFrom instanceof RandomAccess && removeFrom instanceof List) {    return removeIfFromRandomAccessList((List<T>)removeFrom,checkNotNull(predicate));  }  return Iterators.removeIf(removeFrom.iterator(),predicate);}  }
class C{  public boolean hasNext(Pattern pattern){  ensureOpen();  if (pattern == null)   throw new NullPointerException();  hasNextPattern=null;  saveState();  while (true) {    if (getCompleteTokenInBuffer(pattern) != null) {      matchValid=true;      cacheResult();      return revertState(true);    }    if (needInput)     readInput(); else     return revertState(false);  }}  }
class C{  public int selectPivotIndex(Comparable<?>[] ar,int left,int right){  return left;}  }
class C{  public void removeAll(){  recentSearches.clear();  save();  fireChangeEvent();}  }
class C{  @SuppressWarnings("unchecked") public boolean offer(E e){  MutableInt ival=hmap.get(e);  if (ival != null) {    ival.increment();    return true;  }  if (q.size() < qbound) {    if (ival == null) {      hmap.put(e,new MutableInt(1));    }    return q.offer(e);  }  boolean ret=false;  boolean insert;  Comparable<? super E> head=(Comparable<? super E>)q.peek();  if (ascending) {    insert=head.compareTo(e) < 0;  } else {    insert=head.compareTo(e) > 0;  }  if (insert && q.offer(e)) {    hmap.put(e,new MutableInt(1));    ret=true;    E drop=q.poll();    hmap.remove(drop);  }  return ret;}  }
class C{  public void writeMessageTo(OutputStream out) throws IOException, MessagingException {  if (message != null) {    message.writeTo(out);  } else {    throw new MessagingException("No message set for this MailImpl.");  }}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector();  OptionUtils.addOption(newVector,compressionTipText(),"" + getDefaultCompression(),"compression");  OptionUtils.addOption(newVector,numberAutoencodersTipText(),"" + getDefaultNumberAutoencoders(),"numberAutoencoders");  OptionUtils.addOption(newVector,optimizeAETipText(),"" + getDefaultOptimizeAE(),"optimizeAE");  OptionUtils.add(newVector,super.listOptions());  return OptionUtils.toEnumeration(newVector);}  }
class C{  public ImmutableListPathCore(@Nullable String root,Iterable<String> path){  this.root=root;  this.path=ImmutableList.copyOf(checkNotNull(path,"path must be non-null"));}  }
class C{  private ServiceRequestBuffer createDefaultPropertiesSRB(FbService service){  return createPropertiesSRB(service,0);}  }
class C{  public Set keySet(){  if (keySet == null) {    keySet=new ReferenceKeySet(this);  }  return keySet;}  }
class C{  public void preDeregister() throws java.lang.Exception {}  }
class C{  public boolean intersects(final PlanetModel planetModel,final Plane p,final GeoPoint[] notablePoints,final Membership[] bounds){  if (circlePlane == null)   return false;  return circlePlane.intersects(planetModel,p,notablePoints,this.notablePoints,bounds,this.cutoffPlanes);}  }
class C{  public static Matrix identity(int size){  Matrix result=new Matrix(size,size);  for (int i=0; i < size; i++) {    result.set(i,i,(byte)1);  }  return result;}  }
class C{  private HostAddress searchForMasterHostAddress(Protocol protocol,List<HostAddress> loopAddress) throws QueryException {  String masterHostName=null;  proxy.lock.lock();  try {    Date date=new Date();    Timestamp currentTime=new Timestamp(date.getTime() - 3 * 60 * 1000);    sqlDateFormat.setTimeZone(TimeZone.getTimeZone(protocol.getServerData("system_time_zone")));    SingleExecutionResult executionResult=new SingleExecutionResult(null,0,true,false);    protocol.executeQuery(false,executionResult,"select server_id from " + dbName + ".replica_host_status "+ "where session_id = 'MASTER_SESSION_ID' "+ "and last_update_timestamp = ("+ "select max(last_update_timestamp) from "+ dbName+ ".replica_host_status "+ "where session_id = 'MASTER_SESSION_ID' "+ "and last_update_timestamp > '"+ currentTime+ "')",ResultSet.TYPE_FORWARD_ONLY);    MariaSelectResultSet queryResult=executionResult.getResultSet();    if (!queryResult.isBeforeFirst()) {      return null;    } else {      queryResult.next();      masterHostName=queryResult.getString(1);    }  } catch (  SQLException sqle) {  } finally {    proxy.lock.unlock();  }  Matcher matcher;  if (masterHostName != null) {    for (    HostAddress hostAddress : loopAddress) {      matcher=clusterPattern.matcher(hostAddress.host);      if (hostAddress.host.startsWith(masterHostName) && !matcher.find()) {        return hostAddress;      }    }    HostAddress masterHostAddress;    if (urlEndStr.equals("") && protocol.getHost().indexOf(".") > -1) {      urlEndStr=protocol.getHost().substring(protocol.getHost().indexOf("."));    } else {      return null;    }    masterHostAddress=new HostAddress(masterHostName + urlEndStr,protocol.getPort(),null);    loopAddress.add(masterHostAddress);    urlParser.setHostAddresses(loopAddress);    return masterHostAddress;  }  return null;}  }
class C{  public static void demean(double[][] data,TetradVector means){  int rows=data[0].length;  for (int j=0; j < data.length; j++) {    for (int i=0; i < rows; i++) {      data[j][i]=data[j][i] - means.get(j);    }  }}  }
class C{  protected static Object callMethodJValuePtr(JNIEnvironment env,int objJREF,int methodID,Address argAddress,TypeReference expectedReturnType,boolean nonVirtual) throws InvocationTargetException {  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    MethodReference mr=MemberReference.getMethodRef(methodID);    Object[] args=packageParametersFromJValuePtr(mr,argAddress);    return callMethod(obj,mr,args,expectedReturnType,nonVirtual);  } catch (  Throwable unexpected) {    if (JNIFunctions.traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public DualInetAddress parseInetAddressConfig(Configuration config){  String addresses=config.getConfig(Constants.CONFIG_DUAL_INETADDRESSES);  if (addresses.trim().length() > 0) {    String[] inetAddresses=addresses.split(",");    try {      if (inetAddresses.length > 1) {        String ip4=(inetAddresses[0] == null) ? null : inetAddresses[0];        String ip6=(inetAddresses[1] == null) ? null : inetAddresses[1];        return DualInetAddress.fromAddresses(ip4,ip6);      } else {        return DualInetAddress.fromAddress(inetAddresses[0]);      }    } catch (    UnknownHostException ex) {      log.warn("Exception reading InetAddressConfig from coordinator: ",ex);      return null;    }  }  return null;}  }
class C{  public boolean retainEntries(TObjectIntProcedure<K> procedure){  boolean modified=false;  K[] keys=(K[])_set;  int[] values=_values;  stopCompactingOnRemove();  try {    for (int i=keys.length; i-- > 0; ) {      if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    startCompactingOnRemove(modified);  }  return modified;}  }
class C{  public static void append(File file,Object text) throws IOException {  append(file,text,false);}  }
class C{  protected ActionArgumentValue[] readArgumentValues(NodeList nodeList,ActionArgument[] args) throws ActionException {  List<Node> nodes=getMatchingNodes(nodeList,args);  ActionArgumentValue[] values=new ActionArgumentValue[args.length];  for (int i=0; i < args.length; i++) {    ActionArgument arg=args[i];    Node node=findActionArgumentNode(nodes,arg);    if (node == null) {      throw new ActionException(ErrorCode.ARGUMENT_VALUE_INVALID,"Could not find argument '" + arg.getName() + "' node");    }    log.fine("Reading action argument: " + arg.getName());    String value=XMLUtil.getTextContent(node);    values[i]=createValue(arg,value);  }  return values;}  }
class C{  public void updateRTO(long newRTO){  overallRTO[currentArrayElement]=newRTO;  currentArrayElement=(currentArrayElement + 1) % RTOARRAYSIZE;  calculateMeanOverallRTO();  setCurrentRTO(newRTO);}  }
class C{  public static TermVectorsFromLucene createTermBasedRRIVectors(FlagConfig flagConfig) throws IOException, RuntimeException {  TermVectorsFromLucene termVectors=new TermVectorsFromLucene(flagConfig);  termVectors.luceneUtils=new LuceneUtils(flagConfig);  termVectors.createTermBasedRRIVectorsImpl();  return termVectors;}  }
class C{  public synchronized void disconnect(DiscordDisconnectedEvent.Reason reason){  if (startingUp.get() && reason != DiscordDisconnectedEvent.Reason.INIT_ERROR)   reason=DiscordDisconnectedEvent.Reason.INIT_ERROR;  if (reason == DiscordDisconnectedEvent.Reason.LOGGED_OUT || reason == DiscordDisconnectedEvent.Reason.INIT_ERROR || reason == DiscordDisconnectedEvent.Reason.INVALID_SESSION) {    clearCache();  }  isConnected.set(false);  if (withReconnects && (reason == DiscordDisconnectedEvent.Reason.UNKNOWN || reason == DiscordDisconnectedEvent.Reason.MISSED_PINGS || reason == DiscordDisconnectedEvent.Reason.TIMEOUT || reason == DiscordDisconnectedEvent.Reason.INIT_ERROR || reason == DiscordDisconnectedEvent.Reason.INVALID_SESSION || (reason == DiscordDisconnectedEvent.Reason.RECONNECTION_FAILED && reconnectAttempts.get() <= maxReconnectAttempts))) {    isReconnecting.set(true);    if (reconnectAttempts.incrementAndGet() > maxReconnectAttempts) {      Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Reconnection was attempted too many times ({} attempts)",reconnectAttempts);      isReconnecting.set(false);      disconnect(DiscordDisconnectedEvent.Reason.RECONNECTION_FAILED);      return;    } else {      final TimerTask cancelReconnectTask=cancelReconnectTaskSupplier.get();      Discord4J.LOGGER.info(LogMarkers.WEBSOCKET,"Attempting to reconnect...");      cancelReconnectTimer.schedule(cancelReconnectTask,TimeUnit.SECONDS.toMillis(((int)(INITIAL_RECONNECT_TIME * Math.pow(2,reconnectAttempts.get()))) + ThreadLocalRandom.current().nextLong(-2,2)));      if (reason == DiscordDisconnectedEvent.Reason.INIT_ERROR || reason == DiscordDisconnectedEvent.Reason.INVALID_SESSION) {        try {          client.ws=new DiscordWS(client,gateway,timeoutTime,maxMissedPingCount,isDaemon,maxReconnectAttempts,async);          disconnect(DiscordDisconnectedEvent.Reason.RECONNECTING);        } catch (        Exception e) {          Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Error caught while attempting to reconnect.",e);        }      } else       if (session == null || !session.isOpen()) {        try {          connect();        } catch (        UnresolvedAddressException|URISyntaxException|IOException e) {          Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Error caught while attempting to reconnect.",e);          disconnect(DiscordDisconnectedEvent.Reason.RECONNECTION_FAILED);          return;        }      }    }  }  client.dispatcher.dispatch(new DiscordDisconnectedEvent(reason));  executorService.shutdownNow();  startingUp.set(false);  sentPing.set(false);  missedPingCount.set(0);  if (!isReconnecting.get()) {    client.ws=null;    for (    DiscordVoiceWS vws : client.voiceConnections.values()) {      VoiceDisconnectedEvent.Reason voiceReason;      try {        voiceReason=VoiceDisconnectedEvent.Reason.valueOf(reason.toString());      } catch (      IllegalArgumentException e) {        voiceReason=VoiceDisconnectedEvent.Reason.UNKNOWN;      }      vws.disconnect(voiceReason);    }    Runtime.getRuntime().removeShutdownHook(shutdownHook);    if (reason != DiscordDisconnectedEvent.Reason.INIT_ERROR) {      session.close();    }  }}  }
class C{  @Override protected void onOpen(String peerHostName){  _linkService.onConnectionOpen(peerHostName);}  }
class C{  public static boolean hasNestedSqlStatements(InvocationSequenceData data){  return (null != data.isNestedSqlStatements()) && data.isNestedSqlStatements().booleanValue();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void defaultFontOrDeath(String method,float size){  if (parent != null) {    textFont=parent.createDefaultFont(size);  } else {    throw new RuntimeException("Use textFont() before " + method + "()");  }}  }
class C{  @Override protected K extractKey(final String name){  final String key=unescape(name.substring(0,name.length() - 4));  if ("null@null".equals(key)) {    return null;  }  final int idx=key.indexOf('@');  if (idx < 0) {    final ConversionException exception=new ConversionException("No valid key");    exception.add("key",key);    throw exception;  }  final Class<?> type=getMapper().realClass(key.substring(0,idx));  final Converter converter=getConverterLookup().lookupConverterForType(type);  if (converter instanceof SingleValueConverter) {    final SingleValueConverter svConverter=(SingleValueConverter)converter;    @SuppressWarnings("unchecked") final K k=(K)svConverter.fromString(key.substring(idx + 1));    return k;  } else {    final ConversionException exception=new ConversionException("No SingleValueConverter available for key type");    exception.add("key-type",type.getName());    throw exception;  }}  }
class C{  private File createCacheXml(String contents) throws IOException {  File cacheXml=File.createTempFile("cache","xml");  PrintStream pstream=new PrintStream(cacheXml);  pstream.print(contents);  pstream.close();  return cacheXml;}  }
class C{  void include(char minmax,boolean include){  include(minmax,minmax,include);}  }
class C{  public int indexOfAnyBut(final CharSet s,final int from){  final char[] a=array;  final int length=length();  int i=(from < 0 ? 0 : from) - 1;  while (++i < length)   if (!s.contains(a[i]))   return i;  return -1;}  }
class C{  public boolean matches(NodeSpec from,EntitySpec to){  if (!Objects.equals(this.fromNode,from)) {    return false;  }  if (!Objects.equals(this.fromNode.getRelationSpec().getEntitySpec(),to)) {    return false;  }  return true;}  }
class C{  @Override public void pool(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean intersects(Coordinate p0,Coordinate p1){  Envelope segEnv=new Envelope(p0,p1);  if (!rectEnv.intersects(segEnv))   return false;  if (rectEnv.intersects(p0))   return true;  if (rectEnv.intersects(p1))   return true;  if (p0.compareTo(p1) > 0) {    Coordinate tmp=p0;    p0=p1;    p1=tmp;  }  boolean isSegUpwards=false;  if (p1.y > p0.y)   isSegUpwards=true;  if (isSegUpwards) {    li.computeIntersection(p0,p1,diagDown0,diagDown1);  } else {    li.computeIntersection(p0,p1,diagUp0,diagUp1);  }  if (li.hasIntersection())   return true;  return false;}  }
class C{  @Override public void onAction(){  onAction(ActionType.OPEN);}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="pid",defaultValue="0") Integer pid,@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  LOGGER.info("pid = " + pid);  LOGGER.info("startPage = " + startPage);  RestWrapper restWrapper=null;  Integer processId=pid;  try {    if (pid == 0) {      processId=null;    }    if (processId != null)     processDAO.securityCheck(processId,principal.getName(),"read");    List<InstanceExec> instanceExecs=instanceExecDAO.list(processId,startPage,pageSize);    for (    InstanceExec ie : instanceExecs) {      ie.setTableStartTs(DateConverter.dateToString(ie.getStartTs()));      ie.setTableEndTs(DateConverter.dateToString(ie.getEndTs()));    }    restWrapper=new RestWrapper(instanceExecs,RestWrapper.OK);    LOGGER.info("All records listed from InstanceExec by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public EnvironmentField(){  this("");  setEnvironment(Environment.getSystemWide());}  }
class C{  public void parse(Reader in,ContentHandler contentHandler,boolean isResume) throws IOException, ParseException {  if (!isResume) {    reset(in);    handlerStatusStack=new LinkedList();  } else {    if (handlerStatusStack == null) {      isResume=false;      reset(in);      handlerStatusStack=new LinkedList();    }  }  LinkedList statusStack=handlerStatusStack;  try {    do {switch (status) {case S_INIT:        contentHandler.startJSON();      nextToken();switch (token.type) {case Yytoken.TYPE_VALUE:      status=S_IN_FINISHED_VALUE;    statusStack.addFirst(new Integer(status));  if (!contentHandler.primitive(token.value))   return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:nextToken();if (token.type == Yytoken.TYPE_EOF) {contentHandler.endJSON();status=S_END;return;} else {status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}case S_IN_OBJECT:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));if (!contentHandler.startObjectEntry(key)) return;} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endObject()) return;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:nextToken();switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.primitive(token.value)) return;if (!contentHandler.endObjectEntry()) return;break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;default :status=S_IN_ERROR;}break;case S_IN_PAIR_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.endObjectEntry()) return;break;case S_IN_ARRAY:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (!contentHandler.primitive(token.value)) return;break;case Yytoken.TYPE_RIGHT_SQUARE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_END:return;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {status=S_IN_ERROR;throw ie;}catch (ParseException pe) {status=S_IN_ERROR;throw pe;}catch (RuntimeException re) {status=S_IN_ERROR;throw re;}catch (Error e) {status=S_IN_ERROR;throw e;}status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public Node(Value value){  this.value=value;}  }
class C{  public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {  LOG.info("SolrSuggester.build(" + name + ")");  dictionary=dictionaryFactory.create(core,searcher);  lookup.build(dictionary);  if (storeDir != null) {    File target=getStoreFile();    if (!lookup.store(new FileOutputStream(target))) {      LOG.error("Store Lookup build failed");    } else {      LOG.info("Stored suggest data to: " + target.getAbsolutePath());    }  }}  }
class C{  public ActionListener(Context context,Action action,Connection connection,String... additionalArgs){  this.context=context;  this.action=action;  this.connection=connection;  this.clientHandle=connection.handle();  this.additionalArgs=additionalArgs;}  }
class C{  public static int parseUnsigned(String value) throws ParsingException {  boolean isHex=(value.length() > 2 && value.charAt(0) == '0' && (value.charAt(1) == 'x' || value.charAt(1) == 'X'));  long v=0;  int i=isHex ? 2 : 0;  for (; i < value.length(); i++) {    char ch=value.charAt(i);    if (isHex) {      if (ch >= '0' && ch <= '9')       v=(v * 0x10) + ch - '0'; else       if (ch >= 'a' && ch <= 'f')       v=(v * 0x10) + ch - 'a' + 0x0a; else       if (ch >= 'A' && ch <= 'F')       v=(v * 0x10) + ch - 'A' + 0x0a; else       break;    } else {      if (ch >= '0' && ch <= '9')       v=(v * 10) + ch - '0'; else       break;    }  }  if (i != value.length()) {switch (value.charAt(i)) {case 'k':case 'K':      v*=1024;    i++;  break;case 'm':case 'M':v*=1048576;i++;break;}}if (i != value.length()) {throw new ParsingException("Unrecognized value : " + value);}return (int)v;}  }
class C{  public double linearDistance(final PlanetModel planetModel,final double x,final double y,final double z,final Membership... bounds){  if (evaluateIsZero(x,y,z)) {    if (meetsAllBounds(x,y,z,bounds))     return 0.0;    return Double.POSITIVE_INFINITY;  }  final Plane perpPlane=new Plane(this.y * z - this.z * y,this.z * x - this.x * z,this.x * y - this.y * x,0.0);  final GeoPoint[] intersectionPoints=findIntersections(planetModel,perpPlane);  double minDistance=Double.POSITIVE_INFINITY;  for (  final GeoPoint intersectionPoint : intersectionPoints) {    if (meetsAllBounds(intersectionPoint,bounds)) {      final double theDistance=intersectionPoint.linearDistance(x,y,z);      if (theDistance < minDistance) {        minDistance=theDistance;      }    }  }  return minDistance;}  }
class C{  public SabresQuery<T> whereStartsWith(String key,String prefix){  addWhere(key,Where.startsWith(key,prefix));  return this;}  }
class C{  public Resource(String name,String sum,String platform){  this.name=name;  this.sum=sum.trim();  this.platform=platform;}  }
class C{  GeneralPath drawPolygon(Polygon polygon,GeomInfo2D info,boolean fill){  GeneralPath p=drawGeometry(polygon.getExteriorRing(),info,fill);  for (int i=0; i < polygon.getNumInteriorRing(); i++) {    p.append(drawGeometry(polygon.getInteriorRingN(i),info,false),false);  }  return p;}  }
class C{  public void incrementCurrentCount() throws GenericEntityException {  incrementCurrentCount(true);}  }
class C{  private Geometry createValidArea(Geometry rawAreaGeom){  if (isEnsureValidTopology)   return rawAreaGeom.buffer(0.0);  return rawAreaGeom;}  }
class C{  @Override public int hashCode(){  return this.data.hashCode();}  }
class C{  public void put(int key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public static void println(double x){  out.println(x);}  }
class C{  private void initTimers(){  try {    timerMgmt.initTimers();  } catch (  ValidationException e) {  }}  }
class C{  public void disconnect(){  mEditText.removeTextChangedListener(mChangeListener);}  }
class C{  public PositionalMethod positionalmethod(){  return positionalmethod;}  }
class C{  public void addDataSources(final int numDataSources){  for (int i=0; i < numDataSources; i++) {    addDataSource();  }}  }
class C{  public boolean bytesAvailable(){  return byteStream.available() > 0;}  }
class C{  public WildFly9xCliConfigurationFactory(Configuration configuration){  super(configuration);}  }
class C{  public static void generateParallelLines(List<Position> controlPositions,List<Position> leftPositions,List<Position> rightPositions,double distance,Globe globe){  if (controlPositions == null || leftPositions == null || rightPositions == null) {    String message=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (controlPositions.size() < 2) {    String message=Logging.getMessage("generic.LengthIsInvalid");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Iterator<? extends Position> iterator=controlPositions.iterator();  Position posB=iterator.next();  Position posA=iterator.next();  Vec4 ptA=globe.computePointFromLocation(posA);  Vec4 ptB=globe.computePointFromLocation(posB);  Vec4 ptC;  Vec4 prevOffset=null;  prevOffset=generateParallelPoints(ptB,null,ptA,leftPositions,rightPositions,distance,posB.getElevation(),globe,prevOffset);  double prevElevation;  while (iterator.hasNext()) {    prevElevation=posA.getElevation();    posA=iterator.next();    ptC=ptB;    ptB=ptA;    ptA=globe.computePointFromLocation(posA);    prevOffset=generateParallelPoints(ptB,ptC,ptA,leftPositions,rightPositions,distance,prevElevation,globe,prevOffset);  }  generateParallelPoints(ptA,ptB,null,leftPositions,rightPositions,distance,posA.getElevation(),globe,prevOffset);}  }
class C{  public String suppressMappingReportTipText(){  return "Don't output a report of model-to-input mappings.";}  }
class C{  public void processOperators(final RoundEnvironment env){  for (  final Element e : sortElements(env,operator.class)) {    final ExecutableElement ex=(ExecutableElement)e;    final operator op=ex.getAnnotation(operator.class);    doc documentation=ex.getAnnotation(doc.class);    if (documentation == null) {      final doc[] docs=op.doc();      if (docs.length > 0)       documentation=op.doc()[0];    }    if (documentation == null) {      emitWarning("GAML: operator '" + op.value()[0] + "' is not documented",e);    }    final boolean stat=ex.getModifiers().contains(Modifier.STATIC);    final String declClass=rawNameOf(ex.getEnclosingElement());    final List<? extends VariableElement> argParams=ex.getParameters();    final String[] args=new String[argParams.size()];    for (int i=0; i < args.length; i++) {      args[i]=rawNameOf(argParams.get(i));    }    final int n=args.length;    final boolean scope=n > 0 && args[0].contains("IScope");    final int actual_args_number=n + (scope ? -1 : 0) + (!stat ? 1 : 0);    String methodName=ex.getSimpleName().toString();    final String[] classes=new String[actual_args_number];    int begin=0;    if (!stat) {      classes[0]=declClass;      begin=1;    }    final int shift=scope ? 1 : 0;    try {      for (int i=0; i < actual_args_number - begin; i++) {        classes[begin + i]=args[i + shift];      }    } catch (    final Exception e1) {    }    final String ret=rawNameOf(ex.getReturnType());    methodName=stat ? declClass + "." + methodName : methodName;    final StringBuilder sb=new StringBuilder();    sb.append(OPERATOR_PREFIX);    sb.append(actual_args_number).append(SEP);    for (    final String s : classes) {      sb.append(s).append(SEP);    }    sb.append(op.can_be_const()).append(SEP);    sb.append(op.type()).append(SEP);    sb.append(op.content_type()).append(SEP);    sb.append(op.index_type()).append(SEP);    sb.append(op.iterator()).append(SEP);    sb.append(op.expected_content_type().length).append(SEP);    for (int i=0; i < op.expected_content_type().length; i++) {      sb.append(op.expected_content_type()[i]).append(SEP);    }    sb.append(ret).append(SEP);    sb.append(methodName).append(SEP);    sb.append(stat).append(SEP);    sb.append(scope);    final String[] names=op.value();    for (int i=0; i < names.length; i++) {      sb.append(SEP).append(names[i]);    }    gp.put(sb.toString(),"");  }}  }
class C{  private ServiceCall<TranslationResult> translateRequest(List<String> texts,String modelId,Language source,Language target){  Validator.isTrue((texts != null) && !texts.isEmpty(),"texts cannot be null or empty");  final JsonObject contentJson=new JsonObject();  final JsonArray paragraphs=new JsonArray();  for (  String text : texts) {    Validator.notNull(text,"text cannot be null");    paragraphs.add(new JsonPrimitive(text));  }  contentJson.add(TEXT,paragraphs);  final RequestBuilder requestBuilder=RequestBuilder.post(PATH_TRANSLATE).header(HttpHeaders.ACCEPT,HttpMediaType.APPLICATION_JSON);  if (source != null) {    contentJson.addProperty(SOURCE,source.toString());  }  if (target != null) {    contentJson.addProperty(TARGET,target.toString());  }  if ((modelId != null) && !modelId.isEmpty()) {    contentJson.addProperty(MODEL_ID,modelId);  }  requestBuilder.bodyJson(contentJson);  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(TranslationResult.class));}  }
class C{  public static void copy(File src,File dest,boolean overwrite) throws IOException {  assert src != null;  assert dest != null;  if (!src.exists())   throw new FileNotFoundException("Source can't be found: " + src);  if (src.getAbsoluteFile().equals(dest.getAbsoluteFile()))   throw new IOException("Source and destination are the same [src=" + src + ", dest="+ dest+ ']');  if (dest.exists()) {    if (!dest.isDirectory() && !overwrite)     throw new IOException("Destination already exists: " + dest);    if (!dest.canWrite())     throw new IOException("Destination is not writable:" + dest);  } else {    File parent=dest.getParentFile();    if (parent != null && !parent.exists())     parent.mkdirs();    if (src.isDirectory())     dest.mkdir();  }  if (src.isDirectory()) {    File[] files=src.listFiles();    for (    File file : files) {      if (file.isDirectory()) {        File dir=new File(dest,file.getName());        if (!dir.exists() && !dir.mkdirs())         throw new IOException("Can't create directory: " + dir);        copy(file,dir,overwrite);      } else       copy(file,dest,overwrite);    }  } else {    File file=dest.exists() && dest.isDirectory() ? new File(dest,src.getName()) : dest;    if (!overwrite && file.exists())     throw new IOException("Destination already exists: " + file);    FileInputStream in=null;    FileOutputStream out=null;    try {      in=new FileInputStream(src);      out=new FileOutputStream(file);      copy(in,out);    }  finally {      if (in != null)       in.close();      if (out != null) {        out.getFD().sync();        out.close();      }    }  }}  }
class C{  public boolean isCrash(String testPath){  for (  String prefix : getPrefixes(testPath)) {    if (mCrashList.contains(prefix)) {      return true;    }  }  return false;}  }
class C{  protected AbstractXYItemLabelGenerator(){  this("{2}",NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());}  }
class C{  static double sin_roquen_9(double v){  double i=java.lang.Math.rint(v * PI_INV);  double x=v - i * Math.PI;  double qs=1 - 2 * ((int)i & 1);  double x2=x * x;  double r;  x=qs * x;  r=s5;  r=r * x2 + s4;  r=r * x2 + s3;  r=r * x2 + s2;  r=r * x2 + s1;  return x * r;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:00.724 -0500",hash_original_method="31062813EF8734E09BA3D189CC3AAF0B",hash_generated_method="9C313AB700168328343E482F4B2D2542") private TBSCertList(int version,AlgorithmIdentifier signature,Name issuer,Date thisUpdate,Date nextUpdate,List<RevokedCertificate> revokedCertificates,Extensions crlExtensions,byte[] encoding){  this.version=version;  this.signature=signature;  this.issuer=issuer;  this.thisUpdate=thisUpdate;  this.nextUpdate=nextUpdate;  this.revokedCertificates=revokedCertificates;  this.crlExtensions=crlExtensions;  this.encoding=encoding;}  }
class C{  @Override public StringBuilder appendToBuffer(StringBuilder buf){  int percentage=(int)(getProcessed() * 100.0 / total);  buf.append(getTask());  buf.append(": ");  buf.append(getProcessed());  buf.append("/");  buf.append(total);  buf.append(" [");  if (percentage < 100) {    buf.append(' ');  }  if (percentage < 10) {    buf.append(' ');  }  buf.append(percentage);  buf.append("%]");  return buf;}  }
class C{  public DateTimeFormatterBuilder appendOptional(DateTimeParser parser){  checkParser(parser);  DateTimeParser[] parsers=new DateTimeParser[]{parser,null};  return append0(null,new MatchingParser(parsers));}  }
class C{  public void run(){  log.info("BEGIN mBtWorkerThread");  try {    ser.run();  } catch (  Exception ex) {  }  connectionLost();}  }
class C{  protected void loadInvoice(int C_Invoice_ID,int M_Locator_ID){  loadTableOIS(getInvoiceData(C_Invoice_ID,M_Locator_ID));}  }
class C{  private void formatTable(){  formatColumns();  setAutoCreateColumnsFromModel(false);  isFormatted=true;}  }
class C{  public static void generateExtensionManager(File rootFolder) throws IOException {  File outFile=new File(rootFolder,REGISTRY_PATH);  StringBuilder builder=new StringBuilder();  builder.append("package " + "org.eclipse.che.ide.client;\n\n");  generateImports(builder);  generateClass(builder);  FileUtils.writeStringToFile(outFile,builder.toString());}  }
class C{  private boolean hasNextPostponed(){  return !postponedRoutes.isEmpty();}  }
class C{  @Override public int update(Uri uri,ContentValues cvs,String selection,String[] selectionArgs){  return mImpl.update(uri,cvs,selection,selectionArgs);}  }
class C{  public void testFloatReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new FloatDocValuesField("value",30.1F));  doc.add(newStringField("value","30.1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatDocValuesField("value",-1.3F));  doc.add(newStringField("value","-1.3",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatDocValuesField("value",4.2F));  doc.add(newStringField("value","4.2",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("30.1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1.3",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  private IntrospectionEndpoint(){}  }
class C{  public CResolveFunctionDialog(final Window owner,final IDatabase database,final INaviModule module){  super(owner,"Resolve imported functions",ModalityType.APPLICATION_MODAL);  Preconditions.checkNotNull(database,"IE02062: Database argument can't be null");  Preconditions.checkState(database.isLoaded(),"IE02063: Database must be loaded before functions can be redirected");  m_module=Preconditions.checkNotNull(module,"IE02064: Module argument can't be null");  Preconditions.checkState(module.isLoaded(),"IE02065: Module must be loaded before functions can be redirected");  Preconditions.checkState(module.inSameDatabase(database),"IE02066: Module is not in the given database");  setLayout(new BorderLayout());  new CDialogEscaper(this);  final JPanel outerPanel=new JPanel(new BorderLayout());  outerPanel.setBorder(new EmptyBorder(5,5,5,5));  final JPanel innerPanel=new JPanel(new GridLayout(2,3));  innerPanel.setBorder(new LineBorder(Color.BLUE));  innerPanel.add(createLabel("Source Module"));  innerPanel.add(createLabel("Parent String"));  innerPanel.add(createLabel("Target Module"));  innerPanel.add(createLabel(module.getConfiguration().getName()));  m_parentBox=new JComboBox<String>(generateParentBoxVector(module));  m_parentBox.setBorder(new EmptyBorder(0,5,5,5));  innerPanel.add(m_parentBox);  m_targetModuleBox=new JComboBox<CModuleWrapper>(generateTargetBoxVector(database,module));  m_targetModuleBox.setBorder(new EmptyBorder(0,5,5,5));  innerPanel.add(m_targetModuleBox);  outerPanel.add(innerPanel);  add(outerPanel);  add(new CPanelTwoButtons(new InternalListener(),"Apply","Close"),BorderLayout.SOUTH);  pack();}  }
class C{  public static void saveChartAsPNG(File file,JFreeChart chart,int width,int height) throws IOException {  saveChartAsPNG(file,chart,width,height,null);}  }
class C{  public RightSimplePrereadNames(SimplePrereadNames leftNames){  mLeftNames=leftNames;}  }
class C{  public JCMethodInvocation App(JCExpression meth){  return Apply(null,meth,List.<JCExpression>nil()).setType(meth.type.getReturnType());}  }
class C{  private void createProfilers(){  if (Controller.options.GATHER_PROFILE_DATA) {    Controller.organizers.add(new AccumulatingMethodSampleOrganizer());    createDynamicCallGraphOrganizer();  }}  }
class C{  public void write(OutputStream s) throws IOException {  byte profileData[];  profileData=getData();  s.write(profileData);}  }
class C{  public void seekTo(int msec) throws IllegalStateException {  Log.d(TAG,"seekTo = " + msec);  if (mediaPlayer != null) {    if (mediaPlayer.getDuration() > -1 && msec <= mediaPlayer.getDuration()) {      lastState=currentState;      pause();      mediaPlayer.seekTo(msec);      startLoading();    }  } else   throw new RuntimeException("Media Player is not initialized");}  }
class C{  public TileDirectory(String path,int tileID,float n,float s,float e,float w){  StringBuffer strbuf=new StringBuffer(path.toLowerCase());  strbuf.append("/");  tilename=strbuf.toString().intern();  this.tileID=tileID;  if (e < w) {    e+=360.0;  }  westlon=w;  eastlon=e;  northlat=n;  southlat=s;}  }
class C{  public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  public MarkdownDialog(Frame owner){  super(owner);}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  out.write(b,off,len);  cksum.update(b,off,len);}  }
class C{  public int rank(){  double eps=Math.pow(2.0,-52.0);  double tol=Math.max(m,n) * s[0] * eps;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public void collapsePath(Object... path){  Container c=this;  int plen=path.length;  for (int iter=0; iter < plen - 1; iter++) {    c=expandPathNode(isInitialized(),c,path[iter]);  }  collapsePathNode(c,path[plen - 1]);}  }
class C{  public void addEntry(RefactoringStatusEntry entry){  Assert.isNotNull(entry);  fEntries.add(entry);  fSeverity=Math.max(fSeverity,entry.getSeverity());}  }
class C{  public static String identityToString(Object obj){  if (obj == null) {    return EMPTY_STRING;  }  return obj.getClass().getName() + "@" + getIdentityHexString(obj);}  }
class C{  public JAMonBufferListener(String name,BufferList list){  this.name=name;  this.list=list;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static void gluOrtho2D(GL10 gl,double left,double right,double bottom,double top){  gl.glOrthof((float)left,(float)right,(float)bottom,(float)top,-1.0f,1.0f);}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);}  }
class C{  public UrlWithScore(Text url,FloatWritable score){  this.url=url;  this.score=score;}  }
class C{  public boolean isIncludeNullsBPartner(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsBPartner);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void insertNodes(String pName,String pPath,CatalogTreeNode pParent){  CatalogTreeNode newNode=null;  if (pPath == null) {    newNode=new CatalogTreeNode("Image Index");  } else {    newNode=new CatalogTreeNode(pName);  }  if (log.isDebugEnabled()) {    log.debug("insertNodeInto: newNode= " + newNode.getUserObject() + ", into parent= "+ pParent.getUserObject());  }  insertNodeInto(newNode,pParent,pParent.getChildCount());}  }
class C{  private void onTurnReached(){  degradateCorpse();  if (isCompletelyRotten()) {    for (    RPObject obj : getSlot(CONTENT_SLOT)) {      new ItemLogger().timeout((Item)obj);    }    getZone().remove(this);  } else {    SingletonRepository.getTurnNotifier().notifyInSeconds(getDegradationStepTimeout(),this.corpseDegradator);  }}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  public IdentityArrayList(int initialCapacity){  super();  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  this.elementData=new Object[initialCapacity];}  }
class C{  public PeerNetwork clone(){  PeerNetwork clone=new BluetoothPeerNetwork(mBluetoothDevice);  return clone;}  }
class C{  public String dasherize(String word){  return word.replace('_','-');}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void writeKeystore(File configDefaults) throws IOException {  File keystoreXML=new File(configDefaults,"cargo-keystore.xml");  PrintStream writer=ServerConfigUtils.open(keystoreXML);  writer.print("  <keyStore password=\"");  writer.print(genPassword());  writer.println("\"/>");  ServerConfigUtils.close(writer);}  }
class C{  public static TextEdit reformat(int kind,String source,int indentationLevel,String lineSeparator,Map<String,String> options){  return reformat(kind,source,0,source.length(),indentationLevel,lineSeparator,options);}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public int queueSize(){  return this.constraintQueue.size();}  }
class C{  public static Ed25519GroupElement p1xp1(final Ed25519FieldElement X,final Ed25519FieldElement Y,final Ed25519FieldElement Z,final Ed25519FieldElement T){  return new Ed25519GroupElement(CoordinateSystem.P1xP1,X,Y,Z,T);}  }
class C{  public boolean hasActiveNonDaemonThreads(){  return threads.hasActiveNonDaemonThreads();}  }
class C{  GlowChunk(GlowWorld world,int x,int z){  this.world=world;  this.x=x;  this.z=z;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:01.321 -0400",hash_original_method="EF448538603DF9678C43993C9C67A762",hash_generated_method="8B46B6EE8B5EE9FC37766D9D032B0286") public String flattenToString(){  return mValue;}  }
class C{  public boolean timeout(){  return (timer.getTime() > timeout);}  }
class C{  public void play(){  if (mAudioManager == null) {    return;  }  int status=mAudioManager.requestAudioFocus(mAudioFocusListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);  if (D)   LOG.info("Starting playback: audio focus request status = " + status);  if (status != AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {    return;  }  try {    mAudioManager.registerMediaButtonEventReceiver(new ComponentName(getPackageName(),MediaButtonIntentReceiver.class.getName()));  } catch (  SecurityException e) {    e.printStackTrace();  }  if (mPlayer != null && mPlayer.isInitialized()) {    setNextTrack();    final long duration=mPlayer.duration();    if (mRepeatMode != REPEAT_CURRENT && duration > 2000 && mPlayer.position() >= duration - 2000) {      gotoNext(true);    }    mPlayer.start();    if (mPlayerHandler != null) {      mPlayerHandler.removeMessages(FADE_DOWN);      mPlayerHandler.sendEmptyMessage(FADE_UP);    }    if (!mIsSupposedToBePlaying) {      mIsSupposedToBePlaying=true;      notifyChange(PLAYSTATE_CHANGED);    }    cancelShutdown();    updateNotification();  } else   if (mPlayListLen <= 0) {    setShuffleMode(SHUFFLE_AUTO);  }}  }
class C{  public Plane(final Vector A,final Vector B){  super(A,B);  D=0.0;}  }
class C{  public ObjectAlreadyExistsException(Trigger offendingTrigger){  super("Unable to store Trigger with name: '" + offendingTrigger.getKey().getName() + "' and group: '"+ offendingTrigger.getKey().getGroup()+ "', because one already exists with this identification.");}  }
class C{  public void estimateCPTs() throws Exception {  m_BayesNetEstimator.estimateCPTs(this);}  }
class C{  public StoragePortRestRep deregister(URI id){  return client.post(StoragePortRestRep.class,getDeregisterUrl(),id);}  }
class C{  public final void testGetEncoded() throws CertificateException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertNotNull(c1.getEncoded());  assertTrue(Arrays.equals(testEncoding,c1.getEncoded()));  CertificateFactory cf=CertificateFactory.getInstance("X.509");  byte[] expectedEncoding=cert.getEncoded();  Certificate actual=cf.generateCertificate(new ByteArrayInputStream(expectedEncoding));  byte[] actualEncoding=actual.getEncoded();  assertTrue(Arrays.equals(expectedEncoding,actualEncoding));  assertFalse(expectedEncoding[4] == 200);  expectedEncoding[4]=(byte)200;  try {    cf.generateCertificate(new ByteArrayInputStream(expectedEncoding));    fail();  } catch (  CertificateException expected) {  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(", name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public void resetScrolling(){  touchState=TOUCH_STATE_REST;}  }
class C{  public Matrix3d scaling(double x,double y,double z){  m00=x;  m01=0.0;  m02=0.0;  m10=0.0;  m11=y;  m12=0.0;  m20=0.0;  m21=0.0;  m22=z;  return this;}  }
class C{  public IJavaElement[] resolveElementAtOffset() throws JavaModelException {  if (fResolvedElements != null)   return fResolvedElements;  fResolvedElements=SelectionConverter.codeResolve(fElement,this);  return fResolvedElements;}  }
class C{  public void clear(){  mValues.clear();}  }
class C{  public boolean hasService(String serviceName){  return serviceName.equals(MORTAR_SERVICE) || findService(serviceName,false) != null;}  }
class C{  public FciOrient(SepsetProducer sepsets){  this.sepsets=sepsets;  if (sepsets instanceof SepsetsGreedy) {    SepsetsGreedy _sepsets=(SepsetsGreedy)sepsets;    this.dag=_sepsets.getDag();  } else   if (sepsets instanceof DagSepsets) {    DagSepsets _sepsets=(DagSepsets)sepsets;    this.dag=_sepsets.getDag();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public T cloneValue(T val){  return val;}  }
class C{  public void closeServer() throws IOException {  if (!serverIsOpen()) {    return;  }  serverSocket.close();  serverSocket=null;  serverInput=null;  serverOutput=null;}  }
class C{  public static SquareTerrain createSquareTerrainFromBitmap(SquareTerrain.Parameters prs,boolean createVBOs){  int divisions=prs.divisions;  if (!((prs.divisions != 0) && ((prs.divisions & (prs.divisions - 1)) == 0))) {    throw new RuntimeException("Divisions must be x^2");  }  double[][] terrain=new double[divisions + 1][divisions + 1];  double[][] temperature=new double[divisions + 1][divisions + 1];  Vector3[][] normals=new Vector3[divisions + 1][divisions + 1];  boolean useColorBitmap=prs.colorMapBitmap != null;  int colorpixels[]=null;  Bitmap bnew=Bitmap.createBitmap(divisions + 1,divisions + 1,Bitmap.Config.ARGB_8888);  Canvas cnv=new Canvas(bnew);  cnv.drawBitmap(prs.heightMapBitmap,new Rect(0,0,prs.heightMapBitmap.getWidth(),prs.heightMapBitmap.getHeight()),new Rect(0,0,divisions + 1,divisions + 1),null);  int pixels[]=new int[(divisions + 1) * (divisions + 1)];  bnew.getPixels(pixels,0,divisions + 1,0,0,divisions + 1,divisions + 1);  if (useColorBitmap) {    colorpixels=new int[(divisions + 1) * (divisions + 1)];    Paint clearPaint=new Paint();    clearPaint.setXfermode(new PorterDuffXfermode(android.graphics.PorterDuff.Mode.CLEAR));    cnv.drawRect(0,0,prs.colorMapBitmap.getWidth(),prs.colorMapBitmap.getHeight(),clearPaint);    cnv.drawBitmap(prs.colorMapBitmap,new Rect(0,0,prs.colorMapBitmap.getWidth(),prs.colorMapBitmap.getHeight()),new Rect(0,0,divisions + 1,divisions + 1),null);    bnew.getPixels(colorpixels,0,divisions + 1,0,0,divisions + 1,divisions + 1);  }  bnew.recycle();  int color;  int cols=divisions + 1;  double min, max;  terrain[0][0]=Color.green(0) / 255f * prs.scale.y;  min=max=terrain[0][0];  double alt;  double temp;  float oneover255=1f / 255f;  for (int i=0; i <= divisions; ++i) {    for (int j=0; j <= divisions; ++j) {      color=pixels[i + j * cols];      alt=Color.green(color) * oneover255 * prs.scale.y;      temp=Color.red(color) * oneover255 * (prs.maxTemp - prs.minTemp) + prs.minTemp;      if (i > 0 && j > 0) {        temp=((temperature[i - 1][j] + temperature[i][j - 1]) * 0.5f + temp) * 0.5f;        alt=((terrain[i - 1][j] + terrain[i][j - 1]) * 0.5f + alt) * 0.5f;      } else       if (j > 0) {        temp=(temperature[i][j - 1] + temp) * 0.5f;        alt=(terrain[i][j - 1] + alt) * 0.5f;      } else       if (i > 0) {        temp=(temperature[i - 1][j] + temp) * 0.5f;        alt=(terrain[i - 1][j] + alt) * 0.5f;      }      temperature[i][j]=temp;      terrain[i][j]=alt;      if (alt < min)       min=alt; else       if (alt > max)       max=alt;      normals[i][j]=new Vector3(0f,1f,0f);    }  }  Vector3 scale=prs.scale;  Vector3 v0=new Vector3();  Vector3 v1=new Vector3();  Vector3 v2=new Vector3();  Vector3 na=new Vector3();  Vector3 nb=new Vector3();  Vector3 nc=new Vector3();  Vector3 nd=new Vector3();  for (int x=1; x < divisions; x++) {    for (int z=1; z < divisions; z++) {      v0.x=(x - 1) * scale.x;      v0.z=z * scale.z;      v0.y=terrain[x - 1][z];      v1.x=x * scale.x;      v1.z=(z - 1) * scale.z;      v1.y=terrain[x][z - 1];      v2.x=x * scale.x;      v2.z=z * scale.z;      v2.y=terrain[x][z];      na=v1.subtract(v0).cross(v2.subtract(v0));      v0.x=x * scale.x;      v0.z=z * scale.z;      v0.y=terrain[x][z];      v1.x=x * scale.x;      v1.z=(z - 1) * scale.z;      v1.y=terrain[x][z - 1];      v2.x=(x + 1) * scale.x;      v2.z=z * scale.z;      v2.y=terrain[x + 1][z];      nb=v1.subtract(v0).cross(v2.subtract(v0));      v0.x=x * scale.x;      v0.z=z * scale.z;      v0.y=terrain[x][z];      v1.x=(x + 1) * scale.x;      v1.z=z * scale.z;      v1.y=terrain[x + 1][z];      v2.x=x * scale.x;      v2.z=(z + 1) * scale.z;      v2.y=terrain[x][z + 1];      nc=v1.subtract(v0).cross(v2.subtract(v0));      v0.x=x * scale.x;      v0.z=z * scale.z;      v0.y=terrain[x][z];      v1.x=x * scale.x;      v1.z=(z + 1) * scale.z;      v1.y=terrain[x][z + 1];      v2.x=(x - 1) * scale.x;      v2.z=z * scale.z;      v2.y=terrain[x - 1][z];      nd=v1.subtract(v0).cross(v2.subtract(v0));      normals[x][z].y=0f;      normals[x][z].add(na);      normals[x][z].add(nb);      normals[x][z].add(nc);      normals[x][z].add(nd);    }  }  SquareTerrain sq=new SquareTerrain(divisions,terrain,normals,temperature,scale.x,scale.z);  float[] vertices=new float[(divisions + 1) * (divisions + 1) * 3];  float[] nors=new float[(divisions + 1) * (divisions + 1) * 3];  float[] colors=new float[(divisions + 1) * (divisions + 1) * 4];  float[] textureCoords=new float[(divisions + 1) * (divisions + 1) * 2];  int[] indices=new int[(divisions) * (divisions) * 6];  int ii=0;  int nn=0;  int tt=0;  int xx=0;  int cc=0;  double maxtt=1f / (divisions + 1);  double xmid=(divisions * scale.x) / 2f;  double zmid=(divisions * scale.z) / 2f;  double percalt=0;  float r, g, b, a;  a=1f;  float a_basecolor=(float)((float)Color.alpha(prs.basecolor) * oneover255);  float a_middlecolor=(float)Color.alpha(prs.middlecolor) * oneover255;  float a_upcolor=(float)Color.alpha(prs.upcolor) * oneover255;  float g_basecolor=(float)Color.green(prs.basecolor) * oneover255;  float g_middlecolor=(float)Color.green(prs.middlecolor) * oneover255;  float g_upcolor=(float)Color.green(prs.upcolor) * oneover255;  float b_basecolor=(float)Color.blue(prs.basecolor) * oneover255;  float b_middlecolor=(float)Color.blue(prs.middlecolor) * oneover255;  float b_upcolor=(float)Color.blue(prs.upcolor) * oneover255;  float r_basecolor=(float)Color.red(prs.basecolor) * oneover255;  float r_middlecolor=(float)Color.red(prs.middlecolor) * oneover255;  float r_upcolor=(float)Color.red(prs.upcolor) * oneover255;  int bmpcolor;  float a_bmp;  float r_bmp;  float g_bmp;  float b_bmp;  for (int i=0; i <= divisions; ++i) {    for (int j=0; j <= divisions; ++j) {      vertices[ii++]=(float)(i * scale.x - xmid);      vertices[ii++]=(float)terrain[i][j];      vertices[ii++]=(float)(j * scale.z - zmid);      percalt=sq.getPercAltitude(i,j);      if (percalt < 0.5) {        temp=(percalt - 0.0) * 2;        r=(float)(r_basecolor + (r_middlecolor - r_basecolor) * temp);        g=(float)(g_basecolor + (g_middlecolor - g_basecolor) * temp);        b=(float)(b_basecolor + (b_middlecolor - b_basecolor) * temp);        a=(float)(a_basecolor + (a_middlecolor - a_basecolor) * temp);      } else {        temp=(percalt - 0.5) * 2;        r=(float)(r_middlecolor + (r_upcolor - r_middlecolor) * temp);        g=(float)(g_middlecolor + (g_upcolor - g_middlecolor) * temp);        b=(float)(b_middlecolor + (b_upcolor - b_middlecolor) * temp);        a=(float)(a_middlecolor + (a_upcolor - a_middlecolor) * temp);      }      if (useColorBitmap) {        bmpcolor=colorpixels[i + j * cols];        a_bmp=(float)Color.alpha(bmpcolor) * oneover255;        r_bmp=(float)Color.red(bmpcolor) * oneover255;        g_bmp=(float)Color.green(bmpcolor) * oneover255;        b_bmp=(float)Color.blue(bmpcolor) * oneover255;        r=r * (1f - a_bmp) + a_bmp * r_bmp;        g=g * (1f - a_bmp) + a_bmp * g_bmp;        b=b * (1f - a_bmp) + a_bmp * b_bmp;      }      r=r < 0f ? 0f : r;      r=r > 1f ? 1f : r;      g=g < 0f ? 0f : g;      g=g > 1f ? 1f : g;      b=b < 0f ? 0f : b;      b=b > 1f ? 1f : b;      a=a < 0f ? 0f : a;      a=a > 1f ? 1f : a;      colors[cc++]=r;      colors[cc++]=g;      colors[cc++]=b;      colors[cc++]=a;      normals[i][j].normalize();      nors[nn++]=(float)normals[i][j].x;      nors[nn++]=(float)normals[i][j].y;      nors[nn++]=(float)normals[i][j].z;      textureCoords[tt++]=(float)(i * maxtt * prs.textureMult);      textureCoords[tt++]=(float)(j * maxtt * prs.textureMult);    }  }  for (int i=0; i < divisions; i+=2) {    for (int j=0; j < divisions; j+=2) {      indices[xx++]=(i) + (j) * cols;      indices[xx++]=(i + 1) + (j) * cols;      indices[xx++]=(i) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j) * cols;      indices[xx++]=(i + 1) + (j + 1) * cols;      indices[xx++]=(i) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j) * cols;      indices[xx++]=(i + 2) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j) * cols;      indices[xx++]=(i + 2) + (j) * cols;      indices[xx++]=(i + 2) + (j + 1) * cols;      indices[xx++]=(i) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 2) * cols;      indices[xx++]=(i) + (j + 2) * cols;      indices[xx++]=(i) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 2) * cols;      indices[xx++]=(i + 1) + (j + 1) * cols;      indices[xx++]=(i + 2) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 2) * cols;      indices[xx++]=(i + 2) + (j + 1) * cols;      indices[xx++]=(i + 2) + (j + 2) * cols;      indices[xx++]=(i + 1) + (j + 2) * cols;    }  }  sq.setData(vertices,nors,textureCoords,colors,indices,createVBOs);  nors=null;  colors=null;  indices=null;  textureCoords=null;  vertices=null;  return sq;}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("argument to delete() is null");  int i=hash(key);  if (st[i].contains(key))   n--;  st[i].delete(key);  if (m > INIT_CAPACITY && n <= 2 * m)   resize(m / 2);}  }
class C{  public DEPExportFormat exportDEP(){  return cashBoxParameters.getDepModul().exportDEP();}  }
class C{  protected void applySetTimestamp(Long timestamp) throws SQLException {  if (timestamp != null && conn.supportsControlTimestamp()) {    if (timestamp.longValue() != currentTimestamp) {      currentTimestamp=timestamp.longValue();      statement.addBatch(conn.getControlTimestampQuery(timestamp));    }  }}  }
class C{  private void checkQuery(String expRes,String qry) throws Exception {  assertEquals(0,executeHiveQuery("drop table if exists result"));  assertEquals(0,executeHiveQuery("create table result " + "row format delimited fields terminated by ' ' " + "stored as textfile "+ "location '/result' as "+ qry));  IgfsInputStream in=igfs.open(new IgfsPath("/result/000000_0"));  byte[] buf=new byte[(int)in.length()];  in.read(buf);  assertEquals(expRes,new String(buf));}  }
class C{  public void fireDataChanged(int type,int index){  if (listeners != null) {    listeners.fireDataChangeEvent(index,type);  }}  }
class C{  public final double mean(){  long count=0;  double mean=0;  int[][] fieldx=null;  int[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        mean+=fieldxy[z];        count++;      }    }  }  return (count == 0 ? 0 : mean / count);}  }
class C{  public void arrayStore(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));}  }
class C{  private void onMouseUp(){  panel.setStyleName(toolbarResources.toolbar().popupButtonPanelOver());}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.selectionListeners.remove(listener);}  }
class C{  public static <T>Callable<T> memoizeCallable(Callable<T> s){  Map<Object,T> lazy=new ConcurrentHashMap<>();  return null;}  }
class C{  @Override public void zoom(double percent){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private JSlider createMasterVolumeSlider(){  JSlider slider=new JSlider(0,100);  float volume=ClientSingletonRepository.getSound().getVolume();  slider.setValue(Numeric.floatToInt(volume,100f));  slider.addChangeListener(new MasterVolumeListener());  return slider;}  }
class C{  public void generateCode(BlockScope currentScope){  if ((this.bits & ASTNode.IsReachable) == 0) {    return;  }}  }
class C{  public Time(Date date){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(date) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    time=new DERGeneralizedTime(d);  } else {    time=new DERUTCTime(d.substring(2));  }}  }
class C{  public void resetPullRequestApproval(String project,String repository,String pullRequestId,String user,StashClient stashClient){  try {    stashClient.resetPullRequestApproval(project,repository,pullRequestId);    LOGGER.info("Pull-request {} ({}/{}) NOT APPROVED by user \"{}\"",pullRequestId,project,repository,user);  } catch (  StashClientException e) {    LOGGER.error("Unable to reset pull-request approval",e);  }}  }
class C{  static long unsignedMultAddAdd(int a,int b,int c,int d){  return (a & 0xFFFFFFFFL) * (b & 0xFFFFFFFFL) + (c & 0xFFFFFFFFL) + (d & 0xFFFFFFFFL);}  }
class C{  public void removeAll(){  final DeleteValue deleteValue=new DeleteValue.Builder(LOCATION).build();  LOGGER.debug("Deleting key (async): {}",LOCATION);  try (Timer.Context context=deleteTimer.time()){    client.executeAsync(deleteValue);  } }  }
class C{  @Override public void eventHappened(MapEvent event){  if (event.getType() == MapEvent.Type.MAP_NEW) {    adjustToFit();    fireMapViewEvent(new MapViewEvent(this,MapViewEvent.Type.NEW_MAP));  } else {    isImageUpToDate=false;    repaint();  }}  }
class C{  public AsyncBufferedOutputStream(OutputStream out,int bufSize){  this(out,bufSize,5);}  }
class C{  public void deleteAllAvatars(InstanceConfig config){  config.addCredentials(this);  POST(this.url + "/delete-all-avatars",config.toXML());}  }
class C{  public static Object defaultValue(Class<?> cls){  if (cls == Integer.TYPE) {    return Integer.valueOf(0);  }  if (cls == Long.TYPE) {    return Long.valueOf(0L);  }  if (cls == Boolean.TYPE) {    return Boolean.FALSE;  }  if (cls == Double.TYPE) {    return Double.valueOf(0.0);  }  if (cls == Float.TYPE) {    return Float.valueOf(0.0f);  }  if (cls == Byte.TYPE) {    return Byte.valueOf((byte)0);  }  if (cls == Short.TYPE) {    return Short.valueOf((short)0);  }  if (cls == Character.TYPE) {    return '\0';  }  throw new IllegalArgumentException("Class " + cls.getName() + " is not a primitive type");}  }
class C{  public void disable(){  setEnabled(false);}  }
class C{  @Override public Iterator<GamlCompilationError> iterator(){  return limit(concat(items(),getImportedErrors()),MAX_SIZE).iterator();}  }
class C{  @Override public boolean determineExportGroupCreateSteps(Workflow workflow,String previousStep,BlockStorageDevice device,StorageSystem storage,ExportGroup exportGroup,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,boolean zoningStepNeeded,String token) throws Exception {  Map<String,URI> portNameToInitiatorURI=new HashMap<String,URI>();  List<URI> volumeURIs=new ArrayList<URI>();  volumeURIs.addAll(volumeMap.keySet());  Map<URI,URI> hostToExistingExportMaskMap=new HashMap<URI,URI>();  List<URI> hostURIs=new ArrayList<URI>();  List<String> portNames=new ArrayList<String>();  List<Initiator> initiators=null;  if (initiatorURIs != null && !initiatorURIs.isEmpty()) {    initiators=_dbClient.queryObject(Initiator.class,initiatorURIs);  } else {    _log.warn("Internal warning: Need to add the initiatorURIs to the call that assembles this step for validation to occur.");  }  processInitiators(exportGroup,initiatorURIs,portNames,portNameToInitiatorURI,hostURIs);  queryHostInitiatorsAndAddToList(portNames,portNameToInitiatorURI,initiatorURIs,hostURIs);  Map<String,Set<URI>> matchingExportMaskURIs=device.findExportMasks(storage,portNames,false);  boolean masksWithStoragePortFromVArrayFound=false;  Set<String> storagePortURIsAssociatedWithVArrayAndStorageArray=ExportMaskUtils.getStoragePortUrisAssociatedWithVarrayAndStorageArray(storage.getId(),exportGroup.getVirtualArray(),_dbClient);  Set<String> checkMasks=mergeWithExportGroupMaskURIs(exportGroup,matchingExportMaskURIs.values());  for (  String maskURIStr : checkMasks) {    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,URI.create(maskURIStr));    if (Sets.intersection(storagePortURIsAssociatedWithVArrayAndStorageArray,exportMask.getStoragePorts()).isEmpty()) {      for (      Map.Entry<String,Set<URI>> entry : matchingExportMaskURIs.entrySet()) {        entry.getValue().remove(exportMask.getId());      }      continue;    } else {      masksWithStoragePortFromVArrayFound=true;    }  }  if (matchingExportMaskURIs.isEmpty() || !masksWithStoragePortFromVArrayFound) {    _log.info(String.format("No existing mask found w/ initiators { %s }",Joiner.on(",").join(portNames)));    createNewExportMaskWorkflowForInitiators(initiatorURIs,exportGroup,workflow,volumeMap,storage,token,previousStep);  } else {    _log.info(String.format("Mask(s) found w/ initiators {%s}. " + "MatchingExportMaskURIs {%s}, portNameToInitiators {%s}",Joiner.on(",").join(portNames),Joiner.on(",").join(matchingExportMaskURIs.values()),Joiner.on(",").join(portNameToInitiatorURI.entrySet())));    List<URI> initiatorURIsCopy=new ArrayList<URI>();    initiatorURIsCopy.addAll(initiatorURIs);    Map<URI,Map<URI,Integer>> existingMasksToUpdateWithNewVolumes=new HashMap<URI,Map<URI,Integer>>();    Map<URI,Set<Initiator>> existingMasksToUpdateWithNewInitiators=new HashMap<URI,Set<Initiator>>();    for (    Map.Entry<String,Set<URI>> entry : matchingExportMaskURIs.entrySet()) {      URI initiatorURI=portNameToInitiatorURI.get(entry.getKey());      Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorURI);      initiatorURIsCopy.remove(initiatorURI);      List<URI> exportMaskURIs=new ArrayList<URI>();      exportMaskURIs.addAll(entry.getValue());      List<ExportMask> masks=_dbClient.queryObject(ExportMask.class,exportMaskURIs);      _log.info(String.format("initiator %s masks {%s}",initiator.getInitiatorPort(),Joiner.on(',').join(exportMaskURIs)));      for (      ExportMask mask : masks) {        if (Sets.intersection(storagePortURIsAssociatedWithVArrayAndStorageArray,mask.getStoragePorts()).isEmpty())         continue;        if (null == mask.getMaskName()) {          String maskName=ExportMaskUtils.getMaskName(_dbClient,initiators,exportGroup,storage);          _log.info("Generated mask name: {}",maskName);          mask.setMaskName(maskName);        }        _log.info(String.format("mask %s has initiator %s",mask.getMaskName(),initiator.getInitiatorPort()));        if (mask.getCreatedBySystem()) {          _log.info(String.format("initiator %s is in persisted mask %s",initiator.getInitiatorPort(),mask.getMaskName()));          if (mask.getInitiators() != null) {            for (            String existingMaskInitiatorStr : mask.getInitiators()) {              Iterator<URI> initiatorIter=initiatorURIsCopy.iterator();              while (initiatorIter.hasNext()) {                Initiator initiatorCopy=_dbClient.queryObject(Initiator.class,initiatorIter.next());                if (initiatorCopy != null && initiatorCopy.getId() != null && !mask.hasInitiator(initiatorCopy.getId().toString())) {                  Initiator existingMaskInitiator=_dbClient.queryObject(Initiator.class,URI.create(existingMaskInitiatorStr));                  if (existingMaskInitiator != null && initiatorCopy.getHost() != null && initiatorCopy.getHost().equals(existingMaskInitiator.getHost())) {                    Set<Initiator> existingMaskInitiators=existingMasksToUpdateWithNewInitiators.get(mask.getId());                    if (existingMaskInitiators == null) {                      existingMaskInitiators=new HashSet<Initiator>();                      existingMasksToUpdateWithNewInitiators.put(mask.getId(),existingMaskInitiators);                    }                    existingMaskInitiators.add(initiatorCopy);                    initiatorIter.remove();                  }                }              }            }          }        } else {          mask.addInitiator(initiator);          if (!NullColumnValueGetter.isNullURI(initiator.getHost())) {            hostToExistingExportMaskMap.put(initiator.getHost(),mask.getId());          }        }        for (        URI boURI : volumeURIs) {          BlockObject bo=BlockObject.fetch(_dbClient,boURI);          if (!mask.hasExistingVolume(bo)) {            _log.info(String.format("volume %s is not in mask %s",bo.getNativeGuid(),mask.getMaskName()));            Map<URI,Integer> newVolumes=existingMasksToUpdateWithNewVolumes.get(mask.getId());            if (newVolumes == null) {              newVolumes=new HashMap<URI,Integer>();              existingMasksToUpdateWithNewVolumes.put(mask.getId(),newVolumes);            }            Integer requestedHLU=volumeMap.get(bo.getId());            StringMap existingVolumesInMask=mask.getExistingVolumes();            if (existingVolumesInMask != null && requestedHLU.intValue() != ExportGroup.LUN_UNASSIGNED && !ExportGroup.LUN_UNASSIGNED_DECIMAL_STR.equals(requestedHLU.toString()) && existingVolumesInMask.containsValue(requestedHLU.toString())) {              ExportOrchestrationTask completer=new ExportOrchestrationTask(exportGroup.getId(),token);              ServiceError serviceError=DeviceControllerException.errors.exportHasExistingVolumeWithRequestedHLU(boURI.toString(),requestedHLU.toString());              completer.error(_dbClient,serviceError);              return false;            }            newVolumes.put(bo.getId(),requestedHLU);            mask.addToUserCreatedVolumes(bo);          }        }        Map<URI,Integer> volumeMapForExistingMask=existingMasksToUpdateWithNewVolumes.get(mask.getId());        if (volumeMapForExistingMask != null && !volumeMapForExistingMask.isEmpty()) {          mask.addVolumes(volumeMapForExistingMask);        }        Set<Initiator> initiatorSetForExistingMask=existingMasksToUpdateWithNewInitiators.get(mask.getId());        if (initiatorSetForExistingMask != null && initiatorSetForExistingMask.isEmpty()) {          mask.addInitiators(initiatorSetForExistingMask);        }        updateZoningMap(exportGroup,mask);        _dbClient.updateAndReindexObject(mask);        exportGroup.addExportMask(mask.getId());        _dbClient.updateAndReindexObject(exportGroup);      }    }    Map<URI,List<URI>> hostInitiatorMap=new HashMap<URI,List<URI>>();    if (!initiatorURIsCopy.isEmpty()) {      for (      URI newExportMaskInitiator : initiatorURIsCopy) {        Initiator initiator=_dbClient.queryObject(Initiator.class,newExportMaskInitiator);        List<URI> initiatorSet=hostInitiatorMap.get(initiator.getHost());        if (initiatorSet == null) {          initiatorSet=new ArrayList<URI>();          hostInitiatorMap.put(initiator.getHost(),initiatorSet);        }        initiatorSet.add(initiator.getId());        _log.info(String.format("host = %s, " + "initiators to add: %d, " + "existingMasksToUpdateWithNewVolumes.size = %d",initiator.getHost(),hostInitiatorMap.get(initiator.getHost()).size(),existingMasksToUpdateWithNewVolumes.size()));      }    }    _log.info(String.format("existingMasksToUpdateWithNewVolumes.size = %d",existingMasksToUpdateWithNewVolumes.size()));    if (!hostInitiatorMap.isEmpty()) {      for (      URI hostID : hostInitiatorMap.keySet()) {        if (hostToExistingExportMaskMap.containsKey(hostID)) {          URI existingExportMaskURI=hostToExistingExportMaskMap.get(hostID);          Set<Initiator> toAddInits=new HashSet<Initiator>();          List<URI> hostInitaitorList=hostInitiatorMap.get(hostID);          for (          URI initURI : hostInitaitorList) {            Initiator initiator=_dbClient.queryObject(Initiator.class,initURI);            if (!initiator.getInactive()) {              toAddInits.add(initiator);            }          }          _log.info(String.format("Need to add new initiators to existing mask %s, %s",existingExportMaskURI.toString(),Joiner.on(',').join(hostInitaitorList)));          existingMasksToUpdateWithNewInitiators.put(existingExportMaskURI,toAddInits);          continue;        }        _log.info(String.format("new export masks %s",Joiner.on(",").join(hostInitiatorMap.get(hostID))));        generateExportMaskCreateWorkflow(workflow,previousStep,storage,exportGroup,hostInitiatorMap.get(hostID),volumeMap,token);      }    }    Map<URI,String> stepMap=new HashMap<URI,String>();    for (    Map.Entry<URI,Map<URI,Integer>> entry : existingMasksToUpdateWithNewVolumes.entrySet()) {      ExportMask mask=_dbClient.queryObject(ExportMask.class,entry.getKey());      Map<URI,Integer> volumesToAdd=entry.getValue();      _log.info(String.format("adding these volumes %s to mask %s",Joiner.on(",").join(volumesToAdd.keySet()),mask.getMaskName()));      stepMap.put(entry.getKey(),generateExportMaskAddVolumesWorkflow(workflow,null,storage,exportGroup,mask,volumesToAdd,null));    }    for (    Entry<URI,Set<Initiator>> entry : existingMasksToUpdateWithNewInitiators.entrySet()) {      ExportMask mask=_dbClient.queryObject(ExportMask.class,entry.getKey());      Set<Initiator> initiatorsToAdd=entry.getValue();      List<URI> initiatorsURIs=new ArrayList<URI>();      for (      Initiator initiator : initiatorsToAdd) {        initiatorsURIs.add(initiator.getId());      }      _log.info(String.format("adding these initiators %s to mask %s",Joiner.on(",").join(initiatorsURIs),mask.getMaskName()));      previousStep=stepMap.get(entry.getKey()) == null ? previousStep : stepMap.get(entry.getKey());      generateExportMaskAddInitiatorsWorkflow(workflow,previousStep,storage,exportGroup,mask,initiatorsURIs,null,token);    }  }  return true;}  }
class C{  public static List<INaviModule> loadModules(final AbstractSQLProvider provider,final List<INaviRawModule> rawModules,final DebuggerTemplateManager debuggerManager) throws CouldntLoadDataException {  Preconditions.checkNotNull(rawModules,"IE02043: rawModules argument can not be null");  PostgreSQLDatabaseFunctions.checkArguments(provider,debuggerManager);  final List<CModule> modules=new ArrayList<>();  final CConnection connection=provider.getConnection();  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.MODULES_TABLE)) {    return new ArrayList<INaviModule>(modules);  }  final String query="SELECT id, raw_module_id, " + CTableNames.MODULES_TABLE + ".name, "+ " md5, sha1, description, import_time, modification_date, file_base, image_base, stared, "+ " initialization_state, debugger_id, "+ " (SELECT count(*) FROM "+ CTableNames.FUNCTIONS_TABLE+ " "+ " WHERE id = "+ CTableNames.FUNCTIONS_TABLE+ ".module_id) "+ " AS function_count, "+ " (SELECT count(*) FROM "+ CTableNames.MODULE_VIEWS_TABLE+ " JOIN "+ CTableNames.VIEWS_TABLE+ " ON view_id = id "+ " WHERE type = 'non-native' and module_id = "+ CTableNames.MODULES_TABLE+ ".id) "+ " AS view_count FROM "+ CTableNames.MODULES_TABLE+ " "+ " WHERE raw_module_id IS NOT NULL ORDER BY id";  try (ResultSet resultSet=connection.executeQuery(query,true)){    while (resultSet.next()) {      final int moduleId=resultSet.getInt("id");      final String name=PostgreSQLHelpers.readString(resultSet,"name");      final String md5=PostgreSQLHelpers.readString(resultSet,"md5");      final String sha1=PostgreSQLHelpers.readString(resultSet,"sha1");      final String comment=PostgreSQLHelpers.readString(resultSet,"description");      final Timestamp timestamp=resultSet.getTimestamp("import_time");      final Timestamp modificationDate=resultSet.getTimestamp("modification_date");      int functionCount=resultSet.getInt("function_count");      final int viewCount=resultSet.getInt("view_count");      final IAddress imageBase=PostgreSQLHelpers.loadAddress(resultSet,"image_base");      final IAddress fileBase=PostgreSQLHelpers.loadAddress(resultSet,"file_base");      final int debuggerId=resultSet.getInt("debugger_id");      final boolean isStared=resultSet.getBoolean("stared");      final int initializationState=resultSet.getInt("initialization_state");      final DebuggerTemplate description=debuggerManager.findDebugger(debuggerId);      final int rawModuleId=resultSet.getInt("raw_module_id");      final INaviRawModule rawModule=PostgreSQLDatabaseFunctions.findRawModule(rawModuleId,rawModules);      if ((functionCount == 0) && (rawModule != null)) {        functionCount=rawModule.getFunctionCount();      }      modules.add(new CModule(moduleId,name,comment,timestamp,modificationDate,md5,sha1,functionCount,viewCount,fileBase,imageBase,description,rawModule,initializationState,isStared,provider));    }  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }  return new ArrayList<INaviModule>(modules);}  }
class C{  private void executeAction(Action action,Form form,long timeout) throws XMPPException {  AdHocCommandData data=new AdHocCommandData();  data.setType(IQ.Type.SET);  data.setTo(getOwnerJID());  data.setNode(getNode());  data.setSessionID(sessionID);  data.setAction(action);  if (form != null) {    data.setForm(form.getDataFormToSend());  }  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(data.getPacketID()));  connection.sendPacket(data);  Packet response=collector.nextResult(timeout);  collector.cancel();  if (response == null) {    throw new XMPPException("No response from server on status set.");  }  if (response.getError() != null) {    throw new XMPPException(response.getError());  }  AdHocCommandData responseData=(AdHocCommandData)response;  this.sessionID=responseData.getSessionID();  super.setData(responseData);}  }
class C{  public static String generateLocation(){  String loc=System.getProperty("user.timezone","nowhere");  final int p=loc.indexOf('/');  if (p > 0) {    loc=loc.substring(0,p);  }  loc=loc + "/" + System.getProperty("user.language","dumb");  return loc;}  }
class C{  public Env<A> dup(JCTree tree,A info){  return dupto(new Env<A>(tree,info));}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  protected boolean checkOrAreEqual(final AnnotatedTypeMirror type1,final AnnotatedTypeMirror type2,final VisitHistory visited){  if (visited.contains(type1,type2)) {    return true;  }  final Boolean result=areEqual(type1,type2,visited);  visited.add(type1,type2);  return result;}  }
class C{  public String qtyConfirmed(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  I_DD_OrderLine line=GridTabWrapper.create(mTab,I_DD_OrderLine.class);  if (line.getConfirmedQty().compareTo(line.getQtyOrdered().subtract(line.getQtyInTransit()).subtract(line.getQtyDelivered())) > 0) {    String info=Msg.parseTranslation(ctx,"@ConfirmedQty@ : " + line.getConfirmedQty() + " > @QtyToDeliver@ : "+ line.getQtyOrdered().subtract(line.getQtyInTransit()).subtract(line.getQtyDelivered()));    mTab.fireDataStatusEEvent("",info,false);    line.setConfirmedQty(line.getQtyOrdered().subtract(line.getQtyInTransit()).subtract(line.getQtyDelivered()));  }  return "";}  }
class C{  public static Key parse(final String str){  final Key r=new Key();  r.fromString(str);  return r;}  }
class C{  private boolean saveParameters(){  log.config("");  StringBuffer sb=new StringBuffer();  int size=m_mFields.size();  for (int i=0; i < size; i++) {    GridField field=(GridField)m_mFields.get(i);    if (field.isMandatory(true)) {      VEditor vEditor=(VEditor)m_vEditors.get(i);      Object data=vEditor.getValue();      if (data == null || data.toString().length() == 0) {        field.setInserting(true);        field.setError(true);        if (sb.length() > 0)         sb.append(", ");        sb.append(field.getHeader());      } else       field.setError(false);      VEditor vEditor2=(VEditor)m_vEditors2.get(i);      if (vEditor2 != null) {        Object data2=vEditor.getValue();        GridField field2=(GridField)m_mFields2.get(i);        if (data2 == null || data2.toString().length() == 0) {          field.setInserting(true);          field2.setError(true);          if (sb.length() > 0)           sb.append(", ");          sb.append(field.getHeader());        } else         field2.setError(false);      }    }  }  if (sb.length() != 0) {    ADialog.error(m_WindowNo,this,"FillMandatory",sb.toString());    return false;  }  for (int i=0; i < m_mFields.size(); i++) {    VEditor editor=(VEditor)m_vEditors.get(i);    VEditor editor2=(VEditor)m_vEditors2.get(i);    Object result=editor.getValue();    Object result2=null;    if (editor2 != null)     result2=editor2.getValue();    if (result == null && result2 == null)     continue;    MPInstancePara para=new MPInstancePara(Env.getCtx(),m_processInfo.getAD_PInstance_ID(),i);    GridField mField=(GridField)m_mFields.get(i);    para.setParameterName(mField.getColumnName());    if (result instanceof Timestamp || result2 instanceof Timestamp) {      para.setP_Date((Timestamp)result);      if (editor2 != null && result2 != null)       para.setP_Date_To((Timestamp)result2);    } else     if (result instanceof Integer || result2 instanceof Integer) {      if (result != null) {        Integer ii=(Integer)result;        para.setP_Number(ii.intValue());      }      if (editor2 != null && result2 != null) {        Integer ii=(Integer)result2;        para.setP_Number_To(ii.intValue());      }    } else     if (result instanceof BigDecimal || result2 instanceof BigDecimal) {      para.setP_Number((BigDecimal)result);      if (editor2 != null && result2 != null)       para.setP_Number_To((BigDecimal)result2);    } else     if (result instanceof Boolean) {      Boolean bb=(Boolean)result;      String value=bb.booleanValue() ? "Y" : "N";      para.setP_String(value);    } else {      if (result != null)       para.setP_String(result.toString());      if (editor2 != null && result2 != null)       para.setP_String_To(result2.toString());    }    para.setInfo(editor.getDisplay());    if (editor2 != null)     para.setInfo_To(editor2.getDisplay());    para.saveEx();    log.fine(para.toString());  }  return true;}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public String toString(){  String s="";  s+=String.format("%.2f N + %.2f",slope(),intercept());  return s + "  (R^2 = " + String.format("%.3f",R2())+ ")";}  }
class C{  public boolean removeRedundantBucketForRegion(InternalDistributedMember target,int bucketId){  boolean removed=false;  if (getLeaderRegion().getDistributionManager().getId().equals(target)) {    removed=getLeaderRegion().getDataStore().removeBucket(bucketId,false);  } else {    RemoveBucketResponse response=RemoveBucketMessage.send(target,getLeaderRegion(),bucketId,false);    if (response != null) {      removed=response.waitForResponse();    }  }  return removed;}  }
class C{  boolean useVolatileDoubleBuffer(){  return volatileImageBufferEnabled;}  }
class C{  public static int putInt(byte[] bytes,int offset,int val){  if (littleEndian) {    val=Integer.reverseBytes(val);  }  theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);  return offset + Bytes.SIZEOF_INT;}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  iter=col.iterator();}  }
class C{  private void clearNotificationInternal(){  Log.v(TAG,ACTION_CLEAR_NOTIFICATION);  NotificationManagerCompat.from(this).cancel(Constants.MOBILE_NOTIFICATION_ID);}  }
class C{  private void resetTimer(){  if (fadeOutTime > 0) {    if (timer == null || timer._run == false) {      timer=new FadeTimer();      timer.execute();    } else {      timer.resetTimer();    }  }}  }
class C{  public Path createClasspath(){  if (this.classpath == null)   return this.classpath=new Path(getProject()); else   return this.classpath.createPath();}  }
class C{  private byte[] nextToken(byte[] token) throws IOException {  return negotiator.nextToken(token);}  }
class C{  public void removeFromAllTypes(TilePipe pipe,TileEntity tile){  if (pipe.isInitialized())   networks.get(pipe.getNetworkID()).removeFromAll(tile);}  }
class C{  public void testConstrStringExceptionEmptyExponent2(){  String a="-238768.787678287e-";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  private static List<Person> createPersons(final double depTime,final Link depLink,final Link destLink,final Network network,final int count){  double departureTime=depTime;  List<Person> persons=new ArrayList<Person>(count);  for (int i=0; i < count; i++) {    Person person=PopulationUtils.getFactory().createPerson(Id.create(i + (int)departureTime,Person.class));    Plan plan1=PersonUtils.createAndAddPlan(person,true);    Activity a1=PopulationUtils.createAndAddActivityFromLinkId(plan1,"h",depLink.getId());    a1.setEndTime(departureTime);    Leg leg1=PopulationUtils.createAndAddLeg(plan1,TransportMode.car);    leg1.setDepartureTime(departureTime);    leg1.setTravelTime(10);    NetworkRoute route=new LinkNetworkRouteImpl(depLink.getId(),destLink.getId());    route.setLinkIds(depLink.getId(),NetworkUtils.getLinkIds("2"),destLink.getId());    leg1.setRoute(route);    PopulationUtils.createAndAddActivityFromLinkId(plan1,"w",destLink.getId());    persons.add(person);    departureTime++;  }  return persons;}  }
class C{  public void testConstructorStringRadix10Negative(){  String value="-234871376037";  int radix=36;  byte rBytes[]={-4,48,71,62,-76,93,-105,13};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public URI toURI() throws URISyntaxException {  return new URI(toExternalForm());}  }
class C{  protected void unCutSelectedBean(){  if (Debug.debugging("beanbox"))   Debug.output("Enter> unCutSelectedBean");  if (selectedBean == null || selectedBeanLocation == null) {    if (Debug.debugging("beanbox"))     Debug.output("selectedBean=" + selectedBean);    if (Debug.debugging("beanbox"))     Debug.output("selectedBeanLocation=" + selectedBeanLocation);    clearSelection();    return;  }  selectedBeanBox.showUnCut(selectedBean);  clearSelection();  if (Debug.debugging("beanbox"))   Debug.output("Exit> unCutSelectedBean");}  }
class C{  private boolean tryToMove(float deltaY){  if ((deltaY > 0 && mCurrentPos == 0)) {    if (DEBUG) {      Log.d(LOG_TAG,String.format("has reached the bottom"));    }    return false;  }  if ((deltaY < 0 && mCurrentPos == -mHeaderHeight)) {    if (DEBUG) {      Log.d(LOG_TAG,String.format("has reached the top"));    }    return false;  }  int to=mCurrentPos + (int)deltaY;  if (to < -mHeaderHeight) {    if (DEBUG) {      Log.d(LOG_TAG,String.format("over top"));    }    to=-mHeaderHeight;  }  if (to > 0) {    if (DEBUG) {      Log.d(LOG_TAG,String.format("over bottom"));    }    to=0;  }  return moveTo(to);}  }
class C{  public SnmpStringFixed(byte[] v){  super(v);}  }
class C{  public void testFieldTypeTablesMatch() throws Exception {  FieldDescriptor.Type[] values1=FieldDescriptor.Type.values();  WireFormat.FieldType[] values2=WireFormat.FieldType.values();  assertEquals(values1.length,values2.length);  for (int i=0; i < values1.length; i++) {    assertEquals(values1[i].toString(),values2[i].toString());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public long bytesPerValue(BytesRef term){  if (term == null) {    return 0;  }  return 2 * term.length;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public void removeAttack(AttackHandler ah){  attacks.removeElement(ah);}  }
class C{  public float modelZ(float x,float y,float z){  showMissingWarning("modelZ");  return 0;}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  wwd.setWorldWindowController(new CameraController());  Camera camera=new Camera();  camera.set(34.2,-119.2,10000,WorldWind.ABSOLUTE,90,70,0);  Globe globe=wwd.getGlobe();  wwd.getNavigator().setAsCamera(globe,camera);  return wwd;}  }
class C{  @Override public boolean equivalent(IMFBaseResourceType other){  if (other == null || !(other instanceof IMFTrackFileResourceType)) {    return false;  }  IMFTrackFileResourceType otherTrackFileResource=IMFTrackFileResourceType.class.cast(other);  boolean result=true;  result&=super.equivalent(otherTrackFileResource);  result&=trackFileId.equals(otherTrackFileResource.getTrackFileId());  result&=sourceEncoding.equals(otherTrackFileResource.getSourceEncoding());  return result;}  }
class C{  public XmlTextBuilder(){  m_textBuf=new StringBuffer(DEFAULT_CAPACITY);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.494 -0500",hash_original_method="6AC69FAB0F79D0D17493B5AE3A868686",hash_generated_method="4039ABFF0D42614771CF6ADECC95A827") private static boolean is7bitDcs(int dcs){  return ((dcs & 0x8C) == 0x00) || ((dcs & 0xF4) == 0xF0);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.SYMBOL_TABLE__ENTRIES:    return getEntries();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String group=null;  if (Beans.hasProperty(wi,RosterGroupSelector.SELECTED_ROSTER_GROUP)) {    group=(String)Beans.getProperty(wi,RosterGroupSelector.SELECTED_ROSTER_GROUP);  }  if (group == null) {    group=(String)JOptionPane.showInputDialog(_who,"<html><b>Rename roster group</b><br>Select the roster group to rename.</html>","Rename Roster Group",JOptionPane.INFORMATION_MESSAGE,null,Roster.getDefault().getRosterGroupList().toArray(),null);  }  if (group == null || group.equals(Roster.ALLENTRIES)) {    return;  }  String entry=(String)JOptionPane.showInputDialog(_who,"<html><b>Rename roster group</b><br>Enter the new name for roster group \"" + group + "\".</html>","Rename Roster Group " + group,JOptionPane.INFORMATION_MESSAGE,null,null,null);  if (entry == null || entry.equals(Roster.ALLENTRIES)) {    return;  } else   if (Roster.getDefault().getRosterGroupList().contains(entry)) {    JOptionPane.showMessageDialog(_who,"<html><b>Unable to rename roster group</b><br>The roster group named \"" + entry + "\" already exists.","Rename Roster Group " + group,JOptionPane.ERROR_MESSAGE);  }  Roster.getDefault().renameRosterGroupList(group,entry);  Roster.getDefault().writeRoster();}  }
class C{  @Override public boolean tryCaptureView(View child,int pointerId){  return child.equals(mConfigView.getContainer());}  }
class C{  public ExternalEventsQueue(String filePath,int nrofPreload){  setNrofPreload(nrofPreload);  init(filePath);}  }
class C{  static void checkUnsignedShort(final int value,final String msg){  if (value < 0 || value > 65535) {    throw new IllegalArgumentException(msg + " (must be an unsigned short): " + value);  }}  }
class C{  public Object addHighlight(int p0,int p1,Highlighter.HighlightPainter p) throws BadLocationException {  if (p0 < 0) {    throw new BadLocationException("Invalid start offset",p0);  }  if (p1 < p0) {    throw new BadLocationException("Invalid end offset",p1);  }  Document doc=component.getDocument();  HighlightInfo i=(getDrawsLayeredHighlights() && (p instanceof LayeredHighlighter.LayerPainter)) ? new LayeredHighlightInfo() : new HighlightInfo();  i.painter=p;  i.p0=doc.createPosition(p0);  i.p1=doc.createPosition(p1);  highlights.addElement(i);  safeDamageRange(p0,p1);  return i;}  }
class C{  public static XObject eval(Node contextNode,String str,PrefixResolver prefixResolver) throws TransformerException {  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  XPathContext xpathSupport=new XPathContext(false);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  public static void useThreadLocalSettings(boolean useThreadSettings){  if (useThreadSettings) {    LOCAL_SETTINGS.set(GLOBAL_SETTINGS.copy());  } else {    LOCAL_SETTINGS.remove();  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CommodityChannelIndexDataset)) {    return false;  }  CommodityChannelIndexDataset that=(CommodityChannelIndexDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public synchronized GameData parse(final InputStream stream,final AtomicReference<String> gameName,final boolean delayParsing) throws GameParseException, SAXException, EngineVersionException, IllegalArgumentException {  if (stream == null) {    throw new IllegalArgumentException("Stream must be non null");  }  Document doc=null;  try {    doc=getDocument(stream);  } catch (  final IOException|ParserConfigurationException e) {    throw new IllegalStateException("Error parsing: " + mapName,e);  }  final Element root=doc.getDocumentElement();  data=new GameData();  parseInfo(getSingleChild("info",root));  if (gameName != null) {    gameName.set(data.getGameName());  }  parseMinimumEngineVersionNumber(getSingleChild("triplea",root,true));  parseGameLoader(getSingleChild("loader",root));  if (!errorsSAX.isEmpty()) {    for (    final SAXParseException error : errorsSAX) {      System.err.println("SAXParseException: game: " + (data == null ? "?" : (data.getGameName() == null ? "?" : data.getGameName())) + ", line: "+ error.getLineNumber()+ ", column: "+ error.getColumnNumber()+ ", error: "+ error.getMessage());    }  }  parseDiceSides(getSingleChild("diceSides",root,true));  final Element playerListNode=getSingleChild("playerList",root);  parsePlayerList(playerListNode);  parseAlliances(playerListNode);  final Node properties=getSingleChild("propertyList",root,true);  if (properties != null) {    parseProperties(properties);  }  if (delayParsing) {    return data;  }  parseMap(getSingleChild("map",root));  final Element resourceList=getSingleChild("resourceList",root,true);  if (resourceList != null) {    parseResources(resourceList);  }  final Element unitList=getSingleChild("unitList",root,true);  if (unitList != null) {    parseUnits(unitList);  }  final Element relationshipTypes=getSingleChild("relationshipTypes",root,true);  if (relationshipTypes != null) {    parseRelationshipTypes(relationshipTypes);  }  final Element territoryEffectList=getSingleChild("territoryEffectList",root,true);  if (territoryEffectList != null) {    parseTerritoryEffects(territoryEffectList);  }  parseGamePlay(getSingleChild("gamePlay",root));  final Element production=getSingleChild("production",root,true);  if (production != null) {    parseProduction(production);  }  final Element technology=getSingleChild("technology",root,true);  if (technology != null) {    parseTechnology(technology);  } else {    TechAdvance.createDefaultTechAdvances(data);  }  final Element attachmentList=getSingleChild("attachmentList",root,true);  if (attachmentList != null) {    parseAttachments(attachmentList);  }  final Node initialization=getSingleChild("initialize",root,true);  if (initialization != null) {    parseInitialization(initialization);  }  data.getRelationshipTracker().setNullPlayerRelations();  data.getRelationshipTracker().setSelfRelations();  if (data.getGameLoader() instanceof games.strategy.triplea.TripleA) {    checkThatAllUnitsHaveAttachments(data);    TechAbilityAttachment.setDefaultTechnologyAttachments(data);  }  try {    validate();  } catch (  final Exception e) {    ClientLogger.logQuietly("Error parsing: " + mapName,e);    throw new GameParseException(mapName,e.getMessage());  }  return data;}  }
class C{  protected final void fireServiceRevoked(Class<?> serviceClass,boolean revokeNow){  fireServiceRevoked(new BeanContextServiceRevokedEvent(this,serviceClass,revokeNow));}  }
class C{  public boolean isMultiValue(){  return (values.size() > 1);}  }
class C{  private void removeGlobalHotkeys(){  if (globalHotkeys != null) {    globalHotkeys.unregisterAllHotkeys();  }}  }
class C{  protected static final MediaCodecInfo selectVideoCodec(final String mimeType){  if (DEBUG)   Log.v(TAG,"selectVideoCodec:");  final int numCodecs=MediaCodecList.getCodecCount();  for (int i=0; i < numCodecs; i++) {    final MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    final String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (types[j].equalsIgnoreCase(mimeType)) {        if (DEBUG)         Log.i(TAG,"codec:" + codecInfo.getName() + ",MIME="+ types[j]);        final int format=selectColorFormat(codecInfo,mimeType);        if (format > 0) {          return codecInfo;        }      }    }  }  return null;}  }
class C{  IgniteTransactionHolder(Transaction transaction){  this.transaction=transaction;}  }
class C{  public final void writeBytes(String str) throws IOException {  byte[] bytes=new byte[str.length()];  for (int index=0; index < str.length(); index++) {    bytes[index]=(byte)(str.charAt(index) & 0xFF);  }  write(bytes);}  }
class C{  public static void warn(final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.warn(t.getMessage(),t);  } else {    System.err.printf("WARN: %s\n",t.getMessage());    System.err.println(t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  @SuppressWarnings("rawtypes") public void init(){  try {    final IV<?,?>[] ivs=resolveTerms(new URI[]{Vocab.ADDED,Vocab.REMOVED});    added=ivs[0];    removed=ivs[1];    nullTime=new XSDNumericIV(0l);  } catch (  RuntimeException ex) {    throw ex;  }catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  private final OpDefNode generateLambda(TreeNode syntaxTreeNode,ModuleNode cm) throws AbortException {  TreeNode[] children=syntaxTreeNode.heirs();  int arity=(children.length - 2) / 2;  Context ctxt=new Context(moduleTable,errors);  symbolTable.pushContext(ctxt);  FormalParamNode[] params=new FormalParamNode[arity];  int argPos=1;  for (int i=0; i < arity; i++) {    params[i]=new FormalParamNode(children[argPos].getUS(),0,children[argPos],symbolTable,cm);    argPos=argPos + 2;  }  pushFormalParams(params);  ExprNode body=generateExpression(children[children.length - 1],cm);  popFormalParams();  symbolTable.popContext();  return new OpDefNode(S_lambda,UserDefinedOpKind,params,false,body,cm,null,syntaxTreeNode,true,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException ex) {    throw new InternalError("Clone error");  }}  }
class C{  public UserDataImpl(ExtensionPoint extensionPoint){  super(extensionPoint);}  }
class C{  @Override public String toString(){  return "tib \"" + value + "\"";}  }
class C{  public static long fib(long index){  long f0=0;  long f1=1;  long currentFib=0;  if (index == 0)   return f0; else   if (index == 1)   return f1; else {    for (int i=1; i < index; i++) {      currentFib=f0 + f1;      f0=f1;      f1=currentFib;    }    return currentFib;  }}  }
class C{  public void catchException(final Label start,final Label end,final Type exception){  if (exception == null) {    mv.visitTryCatchBlock(start,end,mark(),null);  } else {    mv.visitTryCatchBlock(start,end,mark(),exception.getInternalName());  }}  }
class C{  public static String createDomainRoid(long repoId,String tld){  return createRoid(repoId,getRoidSuffixForTld(tld));}  }
class C{  public double cond(){  return new SingularValueDecomposition(this).cond();}  }
class C{  public String toString(){  return this.msg;}  }
class C{  public HashTable(HashTable t){  count=t.count;  table=new Entry[t.table.length];  for (int i=0; i < table.length; i++) {    Entry e=t.table[i];    Entry n=null;    if (e != null) {      n=new Entry(e.hash,e.key,e.value,null);      table[i]=n;      e=e.next;      while (e != null) {        n.next=new Entry(e.hash,e.key,e.value,null);        n=n.next;        e=e.next;      }    }  }}  }
class C{  public static void handleConnectFailure(Throwable t){  logger.error("handleConnectFailure() - throwable of type: " + t.getClass().getName());  surfaceThrowable("(datastore connect)",t);}  }
class C{  public void notify(String message){  log.debug(message);}  }
class C{  public RawAudioRecorder(int audioSource,int sampleRate){  super(audioSource,sampleRate);  try {    int bufferSize=getBufferSize();    int framePeriod=bufferSize / (2 * RESOLUTION_IN_BYTES * CHANNELS);    createRecorder(audioSource,sampleRate,bufferSize);    createBuffer(framePeriod);    setState(State.READY);  } catch (  Exception e) {    if (e.getMessage() == null) {      handleError("Unknown error occurred while initializing recorder");    } else {      handleError(e.getMessage());    }  }}  }
class C{  public static ComponentUI createUI(JComponent ta){  return new CompiereTextAreaUI(ta);}  }
class C{  public boolean hasSkippedCount(){  return getSkippedCount() != 0;}  }
class C{  protected void installComboBoxModelListeners(ComboBoxModel model){  if (model != null && (listDataListener=createListDataListener()) != null) {    model.addListDataListener(listDataListener);  }}  }
class C{  public void restoreState(){  for (  StaticCache cache : cacheList) {    cache.restoreState();  }}  }
class C{  public void postPaint(Display d,Graphics2D g){  g.setFont(d.getFont());  g.setColor(d.getForeground());  g.drawString(PrefuseLib.getDisplayStats(d),5,15);}  }
class C{  public static EditPatientDialogFragment newInstance(Patient patient){  EditPatientDialogFragment fragment=new EditPatientDialogFragment();  Bundle args=new Bundle();  args.putBoolean("new",patient == null);  if (patient != null) {    args.putString("uuid",patient.uuid);    args.putString("id",patient.id);    args.putString("givenName",patient.givenName);    args.putString("familyName",patient.familyName);    args.putString("birthdate",Utils.toString(patient.birthdate));    args.putInt("gender",patient.gender);  }  fragment.setArguments(args);  return fragment;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  public PDataPartitionFormat determineDataPartitionFormat(String var){  PDataPartitionFormat dpf=null;  List<PDataPartitionFormat> dpfc=new LinkedList<PDataPartitionFormat>();  try {    ParForStatement pfs=(ParForStatement)_statements.get(0);    rDeterminePartitioningCandidates(var,pfs.getBody(),dpfc);    for (    PDataPartitionFormat tmp : dpfc) {      if (dpf != null && dpf != tmp)       dpf=PDataPartitionFormat.NONE; else       dpf=tmp;    }    if (dpf == null)     dpf=PDataPartitionFormat.NONE;  } catch (  LanguageException e) {    LOG.trace("Unable to determine partitioning candidates.",e);    dpf=PDataPartitionFormat.NONE;  }  return dpf;}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  private String toBase64(byte[] bytes){  String ret=null;  try {    ret=new String(Base64.encodeBase64(bytes),Charset.forName("utf-8")).trim();  } catch (  Exception e) {    throw new RuntimeException(e);  }  return ret;}  }
class C{  public TimerRateHolder(){  paceFormat=new SimpleDateFormat(DEFAULT_PACE_FORMAT);  paceZero=DEFAULT_PACE_BASELINE_VALUE;}  }
class C{  @Override protected void executionStarted(){  m_ButtonApplyFilter.setEnabled(false);  m_ButtonRemoveAttributes.setEnabled(false);  m_PanelDataSummary.setEnabled(false);  m_PanelAttributes.setEnabled(false);}  }
class C{  public DateTime toDateTime(Element el,String attributeName,DateTime defaultValue){  String value=el.getAttribute(attributeName);  if (value == null)   return defaultValue;  DateTime dtValue=Caster.toDate(value,false,null,null);  if (dtValue == null)   return defaultValue;  return dtValue;}  }
class C{  public ImmutableOpenIntMap<VType> build(){  IntObjectHashMap<VType> map=this.map;  this.map=null;  return new ImmutableOpenIntMap<>(map);}  }
class C{  public static void main(String[] args){  File file=new File(outputDir);  System.out.println("Verzeichnis " + file + " erstellt: "+ file.mkdirs());  Config config=ConfigUtils.createConfig();  config.network().setInputFile(NETFILE_current);  Scenario scenario=ScenarioUtils.loadScenario(config);  createRPScheme(scenario);  log.info("### Done. all RPSchemes were created. ###");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.014 -0500",hash_original_method="13E1A18DB49260CED334452DE885FB8A",hash_generated_method="28A5EE30497C1876B145CE4886521D9B") public static ExecutorService singleThreadExecutor(){synchronized (QueuedWork.class) {    if (sSingleThreadExecutor == null) {      sSingleThreadExecutor=Executors.newSingleThreadExecutor();    }    return sSingleThreadExecutor;  }}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public Iterable<Key> levelOrder(){  Queue<Key> keys=new Queue<Key>();  Queue<Node> queue=new Queue<Node>();  queue.enqueue(root);  while (!queue.isEmpty()) {    Node x=queue.dequeue();    if (x == null)     continue;    keys.enqueue(x.key);    queue.enqueue(x.left);    queue.enqueue(x.right);  }  return keys;}  }
class C{  public ArithmeticException(){}  }
class C{  public boolean next() throws IOException {  boolean hasNext=true;  try {    oldId=stream.readInt();    oldText=stream.readUTFAsArray();  } catch (  EOFException e) {    hasNext=false;  }  return hasNext;}  }
class C{  public double nextDouble(double mean,double gamma,double cut){  double val, rval, displ;  if (gamma == 0.0)   return mean;  if (cut == Double.NEGATIVE_INFINITY) {    rval=2.0 * randomGenerator.raw() - 1.0;    displ=0.5 * gamma * Math.tan(rval * (Math.PI / 2.0));    return mean + displ;  } else {    val=Math.atan(2.0 * cut / gamma);    rval=2.0 * randomGenerator.raw() - 1.0;    displ=0.5 * gamma * Math.tan(rval * val);    return mean + displ;  }}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public Result matchEquivalences(RevisionHistory history,String toRepository){  Result equivMatch=history.findRevisions(null,new RepositoryEquivalenceMatcher(toRepository,db),SearchType.LINEAR);  return equivMatch;}  }
class C{  public static float max(float a,float b){  return (a >= b) ? a : b;}  }
class C{  public QueryBuilder range(Optional<QueryDateRange> range){  checkNotNull(range,"range");  this.range=pickOptional(this.range,range).filter(null);  return this;}  }
class C{  protected Intent assertNextStartedActivity(BaseFragmentActivity currentActivity,Class<? extends Activity> nextActivityClass){  ShadowActivity shadowActivity=Shadows.shadowOf(currentActivity);  Intent intent=shadowActivity.getNextStartedActivity();  assertNotNull(intent);  assertThat(intent).hasComponent(currentActivity,nextActivityClass);  return intent;}  }
class C{  Key(String hexCoords,EntityMovementMode movementMode){  if (StringUtil.isNullOrEmpty(hexCoords)) {    throw new IllegalArgumentException("Starting Coords is NULL or Empty.");  }  if (movementMode == null) {    throw new IllegalArgumentException("Movement Type is NULL.");  }  this.hexCoords=hexCoords;  this.movementMode=movementMode;}  }
class C{  public boolean isActiveLock(){synchronized (activeLocks) {    return !activeLocks.isEmpty();  }}  }
class C{  public double[] computeLocalInfoDistanceOfPreviousObservations(){  return computeLocalInfoDistanceUsingPreviousObservations(sourceObservations,destObservations,true);}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  String command=e.getActionCommand();  if (command.equals(zoomInCmd)) {    zoomDelegate.fireZoom(ZoomEvent.RELATIVE,zoomInFactor);  } else   if (command.equals(zoomOutCmd)) {    zoomDelegate.fireZoom(ZoomEvent.RELATIVE,zoomOutFactor);  }}  }
class C{  public synchronized void add(Rectangle r,int id){  if (r.isEmpty()) {    return;  }  int addTo=UPDATE;  if (id == PaintEvent.PAINT) {    addTo=(r.width > r.height) ? HORIZONTAL : VERTICAL;  }  if (paintRects[addTo] != null) {    paintRects[addTo].add(r);  } else {    paintRects[addTo]=new Rectangle(r);  }}  }
class C{  public NumberTextField(String label,double initialValue,boolean doubleEachTime){  if (doubleEachTime)   setValues(label,initialValue,2,0); else   setValues(label,initialValue,1,1);}  }
class C{  private synchronized void abandonAudioFocus(){  if (mHasAudioFocus) {    final AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);    am.abandonAudioFocus(this);    unregisterReceiver(mAudioNoisyReceiver);    mWakeLock.release();    mRemoteMetadata.setActive(false);    mHasAudioFocus=false;  }}  }
class C{  public static Field<String> ofString(String name){  return ofString(name,null);}  }
class C{  public void close() throws IOException {  for (  String propFilePath : originalContents.keySet()) {    writeToFile(propFilePath,originalContents.get(propFilePath));  }}  }
class C{  static int svd_imin(int a,int b){  return Math.min(a,b);}  }
class C{  public Where(){}  }
class C{  @Override public void onResume(){  super.onResume();  if (mAdView != null) {    mAdView.resume();  }}  }
class C{  private final void addToBook(Position pos,Move moveToAdd){  ArrayList<BookEntry> ent=bookMap.get(pos.zobristHash());  if (ent == null) {    ent=new ArrayList<BookEntry>();    bookMap.put(pos.zobristHash(),ent);  }  for (int i=0; i < ent.size(); i++) {    BookEntry be=ent.get(i);    if (be.move.equals(moveToAdd)) {      be.weight++;      return;    }  }  BookEntry be=new BookEntry(moveToAdd);  ent.add(be);  numBookMoves++;}  }
class C{  public static CheckBox createToggle(String text,Image icon){  CheckBox cb=new CheckBox(text,icon);  cb.setToggle(true);  return cb;}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  private LocalCommand newInstanceOfCmd(String commandNode,String sessionID) throws XMPPException {  AdHocCommandInfo commandInfo=commands.get(commandNode);  LocalCommand command;  try {    command=(LocalCommand)commandInfo.getCommandInstance();    command.setSessionID(sessionID);    command.setName(commandInfo.getName());    command.setNode(commandInfo.getNode());  } catch (  InstantiationException e) {    e.printStackTrace();    throw new XMPPException(new XMPPError(XMPPError.Condition.interna_server_error));  }catch (  IllegalAccessException e) {    e.printStackTrace();    throw new XMPPException(new XMPPError(XMPPError.Condition.interna_server_error));  }  return command;}  }
class C{  private static String escapeString(String raw){  StringBuilder escaped=new StringBuilder();  int start=0;  int index=-1;  while ((index=raw.indexOf('\'',start)) >= 0) {    String section=raw.substring(start,index);    if (!section.isEmpty()) {      escaped.append('\'').append(section).append('\'');    }    escaped.append("\\'");    start=index + 1;  }  if (start < raw.length()) {    escaped.append('\'').append(raw.substring(start)).append('\'');  }  return escaped.toString();}  }
class C{  protected SimpleQuery genAnalysisQueryWithSoftFiltering(DashboardAnalysis analysis,MeasureGroup group,boolean cachable,boolean optimize) throws ScopeException, SQLScopeException, ComputingException, InterruptedException {  DashboardSelection soft_filters=new DashboardSelection();  List<Axis> hidden_slice=new ArrayList<Axis>();  Collection<Domain> domains=analysis.getAllDomains();  int slice_numbers=0;  float row_estimate=1;  Measure master=group.getMaster();  SimpleQuery query=new SimpleQuery(master.getParent());  boolean defaultOrder=!analysis.hasOrderBy() && !analysis.hasLimit() && cachable;  HashSet<Axis> slices=new HashSet<Axis>();  for (  GroupByAxis groupBy : analysis.getGrouping()) {    Domain target=groupBy.getAxis().getParent().getRoot();    if (!domains.contains(target)) {      List<String> names=new ArrayList<String>(domains.size());      for (      Domain domain : domains) {        names.add(domain.getName());      }      throw new ScopeException("the Axis '" + groupBy.getAxis().prettyPrint() + "' is incompatible with the query scope "+ names);    }    Space hook=computeSinglePath(analysis,master,groupBy.getAxis().getParent().getTop(),mandatory_link);    Axis axis=hook.A(groupBy.getAxis());    ISelectPiece piece=query.select(axis);    if (defaultOrder)     query.orderBy(piece,ORDERING.DESCENT);    slice_numbers++;{      float size=axis.getEstimatedSize();      if (size > 0)       row_estimate=row_estimate * size;    }    slices.add(axis);  }  if (analysis.hasRollup()) {    query.rollUp(analysis.getRollup(),analysis.isRollupGrandTotal());  }  for (  DomainSelection selection : analysis.getSelection().get()) {    if (selection.hasConditions()) {      for (      ExpressionInput condition : selection.getConditions()) {        query.where(condition.getExpression());      }    }    for (    Axis axis : selection.getFilters()) {      Collection<DimensionMember> filters=selection.getMembers(axis);      Dimension dimension=axis.getDimension();      if (!optimize) {        query.where(axis,filters);      } else {        if ((dimension.getType().equals(Type.CATEGORICAL) || dimension.getType().equals(Type.INDEX)) && slices.contains(axis)) {          if (soft_filters != null) {            soft_filters.add(axis,filters);          }        } else {          boolean generalize=false;          IDomain image=axis.getDefinition().getImageDomain();          if (!image.isInstanceOf(SetDomain.SET) && !image.isInstanceOf(IDomain.CONDITIONAL)) {            if (slice_numbers < 10 && filters.size() == 1 && dimension.getType().equals(Type.CATEGORICAL)) {              float size=axis.getEstimatedSize();              if (size < 10000 && row_estimate * size < 200000) {                generalize=true;                slice_numbers++;                row_estimate=row_estimate * size;              } else {              }            }          }          if (generalize) {            ISelectPiece axisP=query.select(axis);            if (defaultOrder)             query.orderBy(axisP,ORDERING.DESCENT);            if (hidden_slice != null) {              hidden_slice.add(axis);            }            if (soft_filters != null) {              soft_filters.add(axis,filters);            }          } else {            query.where(axis,filters);          }        }      }    }  }  if (!soft_filters.isEmpty() || !hidden_slice.isEmpty()) {    query.addPostProcessing(new DataMatrixTransformHideColumns<Axis>(hidden_slice));    query.addPostProcessing(new DataMatrixTransformSoftFilter(soft_filters));  }  for (  Measure buddy : group.getKPIs()) {    query.select(buddy);  }  if (analysis.hasLimit()) {    query.limit(analysis.getLimit());  }  if (!defaultOrder) {    if (analysis.hasOrderBy()) {      query.orderBy(analysis.getOrders());    }    if (analysis.hasOffset()) {      query.offset(analysis.getOffset());    }  }  return query;}  }
class C{  public void updateOffScreen(int width,int height){  offScreenWidth=width;  offScreenHeight=height;}  }
class C{  @Override public void rateIndividuals(String filename,String outputFolder){  Map<String,Integer[]> personMap=new TreeMap<String,Integer[]>();  LOG.info("Processing records for person-specific scoring.");  Counter counter=new Counter("   lines # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null && counter.getCounter() < maxLines) {      String[] sa=line.split(",");      String id=sa[1];      if (!personMap.containsKey(id)) {        Integer[] ia={0,0,0,0};        personMap.put(id,ia);      }      Integer[] thisArray=personMap.get(id);      RISK_GROUP risk=getRiskGroup(line);      int index;switch (risk) {case NONE:        index=0;      break;case LOW:    index=1;  break;case MEDIUM:index=2;break;case HIGH:index=3;break;default :throw new RuntimeException("Don't know where to get risk values for " + risk.toString());}int oldCount=thisArray[index];thisArray[index]=oldCount + 1;counter.incCounter();}} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot read from " + filename);} finally {try {br.close();} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot close " + filename);}}counter.printCounter();LOG.info("Done processing records. Unique persons identified: " + personMap.size());String outputFilename=outputFolder + (outputFolder.endsWith("/") ? "" : "/") + "riskClassCountsPerPerson.csv";LOG.info("Writing the per-person risk classes counts to " + outputFilename);BufferedWriter bw=IOUtils.getBufferedWriter(outputFilename);try {bw.write("id,none,low,medium,high");bw.newLine();for (String id : personMap.keySet()) {Integer[] thisArray=personMap.get(id);bw.write(String.format("%s,%d,%d,%d,%d\n",id,thisArray[0],thisArray[1],thisArray[2],thisArray[3]));}} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot write to " + outputFilename);} finally {try {bw.close();} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot close " + outputFilename);}}LOG.info("Done writing the per-person risk classes counts.");}  }
class C{  public ObjectStat(String bucketName,String name,Date createdTime,long length,String etag,String contentType){  this.bucketName=bucketName;  this.name=name;  this.contentType=contentType;  this.createdTime=(Date)createdTime.clone();  this.length=length;  if (etag != null) {    this.etag=etag.replaceAll("\"","");  } else {    this.etag="";  }}  }
class C{  void displayErrorDialog(Window w,String error){  ToolDialog ed=new ToolDialog(PolicyTool.getMessage("Error"),tool,this,true);  Point location=((w == null) ? getLocationOnScreen() : w.getLocationOnScreen());  ed.setLayout(new GridBagLayout());  JLabel label=new JLabel(error);  addNewComponent(ed,label,0,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH);  JButton okButton=new JButton(PolicyTool.getMessage("OK"));  ActionListener okListener=new ErrorOKButtonListener(ed);  okButton.addActionListener(okListener);  addNewComponent(ed,okButton,1,0,1,1,1,0.0,0.0,GridBagConstraints.VERTICAL);  ed.getRootPane().setDefaultButton(okButton);  ed.getRootPane().registerKeyboardAction(okListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);  ed.pack();  ed.setLocationRelativeTo(w);  ed.setVisible(true);}  }
class C{  public boolean isDeclaredAsync(){  return declaredAsync;}  }
class C{  private void processPlayFileRequest(Intent intent){  if (mState != State.PREPARING) {    mFile=intent.getExtras().getParcelable(EXTRA_FILE);    mAccount=intent.getExtras().getParcelable(EXTRA_ACCOUNT);    mPlayOnPrepared=intent.getExtras().getBoolean(EXTRA_PLAY_ON_LOAD,false);    mStartPosition=intent.getExtras().getInt(EXTRA_START_POSITION,0);    tryToGetAudioFocus();    playMedia();  }}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  protected void statementPrepareCallAfter(CallableStatementProxy statement){  statementLog("{conn-" + statement.getConnectionProxy().getId() + ", cstmt-"+ statement.getId()+ "} created. ");}  }
class C{  public boolean ping(){  final URI uri=UriBuilder.fromUri(rootUri).path("/ping").build();  LOGGER.debug("GET {}",uri);  final String response=client.target(uri).request().get(String.class);  return "pong".equals(response);}  }
class C{  private static void enumerateBindings(NamingEnumeration<?> bindings,Properties properties) throws NamingException {  boolean syncProviderObj=false;  try {    Binding bd=null;    Object elementObj=null;    String element=null;    while (bindings.hasMore()) {      bd=(Binding)bindings.next();      element=bd.getName();      elementObj=bd.getObject();      if (!(ic.lookup(element) instanceof Context)) {        if (ic.lookup(element) instanceof SyncProvider) {          syncProviderObj=true;        }      }      if (syncProviderObj) {        SyncProvider sync=(SyncProvider)elementObj;        properties.put(SyncFactory.ROWSET_SYNC_PROVIDER,sync.getProviderID());        syncProviderObj=false;      }    }  } catch (  javax.naming.NotContextException e) {    bindings.next();    enumerateBindings(bindings,properties);  }}  }
class C{  public void xtestMassageServiceCall() throws IOException {  abstactAskService("PREFIX eg: <http://example.com/a#>","prefix xsd:  <http://www.w3.org/2001/XMLSchema#>","ASK {","?x eg:p ?y ","BIND (xsd:integer(substr(?y,3)) as ?yy )"," SERVICE <> {"," FILTER (true )","{ SELECT ?x ?yy {","?x eg:q ?yy ","} ORDER BY ?yy LIMIT 1 }","} }");}  }
class C{  public void testNextLong(){  long f=ThreadLocalRandom.current().nextLong();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextLong() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public static void addImportedModules(HashSet<ModuleNode> modules,HashSet<String> symbols,Location loc,ModuleNode node){  if (modules.contains(node)) {    return;  }  modules.add(node);  HashSet<ModuleNode> extendees=node.getExtendedModuleSet();  Iterator<ModuleNode> iter=extendees.iterator();  while (iter.hasNext()) {    ModuleNode modNode=iter.next();    addImportedModules(modules,symbols,infiniteLoc,modNode);  }  InstanceNode[] instances=node.getInstances();  for (int i=0; i < instances.length; i++) {    if (earlierLine(instances[i].stn.getLocation(),loc) && (!instances[i].getLocal() || earlierLine(loc,infiniteLoc))) {      if (instances[i].getName() != null) {        symbols.add(instances[i].getName().toString());      } else {        addImportedModules(modules,symbols,infiniteLoc,instances[i].getModule());      }    }  }}  }
class C{  public javax.crypto.SecretKey engineLookupAndResolveSecretKey(Element element,String baseURI,StorageResolver storage){  return null;}  }
class C{  public boolean isInside(Contour contour){  return left() >= contour.left() && right() <= contour.right() && top() >= contour.top() && bottom() <= contour.bottom();}  }
class C{  private void updateEndpointsAssociation(Network network,Collection<String> endpoints,NetworkEndpointParam.EndpointOp op){  _log.info("updateEndpointsAssociation: update the port and pools associations following {} endpoints operation",op.name());  if (op.equals(NetworkEndpointParam.EndpointOp.add)) {    NetworkAssociationHelper.handleNetworkUpdated(network,null,null,endpoints,null,_dbClient,_coordinator);  } else {    NetworkAssociationHelper.handleNetworkUpdated(network,null,null,null,endpoints,_dbClient,_coordinator);  }}  }
class C{  public Object clone(){  try {    CharacterIteratorWrapper result=(CharacterIteratorWrapper)super.clone();    result.iterator=(CharacterIterator)this.iterator.clone();    return result;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public void testTransactionRollbackOnSend() throws Exception {  Destination destination=createDestination(getClass().getName());  Connection connection=createConnection();  connection.setClientID(idGen.generateId());  connection.start();  Session consumerSession=connection.createSession(true,Session.CLIENT_ACKNOWLEDGE);  MessageConsumer consumer=consumerSession.createConsumer(destination);  Session producerSession=connection.createSession(true,Session.AUTO_ACKNOWLEDGE);  MessageProducer producer=producerSession.createProducer(destination);  producer.setDeliveryMode(deliveryMode);  TextMessage sentMsg=producerSession.createTextMessage();  sentMsg.setText("msg1");  producer.send(sentMsg);  producerSession.commit();  Message recMsg=consumer.receive(RECEIVE_TIMEOUT);  consumerSession.commit();  assertTrue(recMsg.equals(sentMsg));  sentMsg=producerSession.createTextMessage();  sentMsg.setText("msg2");  producer.send(sentMsg);  producerSession.rollback();  sentMsg=producerSession.createTextMessage();  sentMsg.setText("msg3");  producer.send(sentMsg);  producerSession.commit();  recMsg=consumer.receive(RECEIVE_TIMEOUT);  assertTrue(recMsg.equals(sentMsg));  consumerSession.commit();  connection.close();}  }
class C{  public static void copyStream(InputStream fin,OutputStream fout) throws IOException {  int bufsize=4096;  byte[] buf=null;  for (int i=0; i < 64; ++i) {    if (i < 8) {      bufsize*=2;      buf=new byte[bufsize];    }    int size=0;    int len=0;    do {      len=fin.read(buf,size,bufsize - size);      if (len >= 0)       size+=len; else {        fout.write(buf,0,size);        return;      }    } while (size < bufsize);    fout.write(buf);  }  throw new IOException("too much data");}  }
class C{  private CBookmarkFunctions(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CTagTreeNodeMenuBuilder(final JFrame parent,final ZyGraph graph,final ITagManager tagManager,final ITreeNode<CTag> tag){  m_popupMenu=new JPopupMenu();  m_popupMenu.add(CActionProxy.proxy(new CAddTagToSelectedNodesAction(parent,graph,tag)));  m_popupMenu.add(new JSeparator());  m_popupMenu.add(CActionProxy.proxy(new CRemoveTagFromSelectedNodesAction(parent,graph,tag)));  m_popupMenu.add(CActionProxy.proxy(new CRemoveTagFromAllNodesAction(parent,graph,tag.getObject())));  m_popupMenu.add(new JSeparator());  m_popupMenu.add(CActionProxy.proxy(new CAppendTagAction(parent,tagManager,tag)));  m_popupMenu.add(CActionProxy.proxy(new CInsertTagAction(parent,tagManager,tag)));  m_popupMenu.add(new JSeparator());  m_popupMenu.add(CActionProxy.proxy(new CEditTagAction(parent,tag.getObject())));  m_popupMenu.add(new JSeparator());  m_popupMenu.add(CActionProxy.proxy(new CDeleteTagAction(parent,tagManager,tag)));  m_popupMenu.add(CActionProxy.proxy(new CDeleteTagSubtreeAction(parent,tagManager,tag)));}  }
class C{  protected String bratRenderLaterCommand(){  return "Wicket.$('" + vis.getMarkupId() + "').dispatcher.post('current', "+ "['"+ getCollection()+ "', '1234', {}, true]);";}  }
class C{  void updateFlipArms(boolean armsFlipped){  if (ce() == null) {    return;  }  if (armsFlipped == ce().getArmsFlipped()) {    return;  }  twisting=false;  torsoTwist(null);  clearAttacks();  ce().setArmsFlipped(armsFlipped);  attacks.addElement(new FlipArmsAction(cen,armsFlipped));  updateTarget();  refreshAll();}  }
class C{  public void makeShape(){  setShape(new RoundRectangle2D.Double(0,0,_width,_height,_radius,_radius));}  }
class C{  public static void moveAtomicReplace(String source,String target){  FilePath.get(source).moveTo(FilePath.get(target),true);}  }
class C{  public static void reloadInstance(CFMLEngine engine,ConfigServerImpl cs,ConfigWebImpl cw,boolean force) throws SAXException, ClassException, PageException, IOException, TagLibException, FunctionLibException, BundleException {  Resource configFile=cw.getConfigFile();  Resource configDir=cw.getConfigDir();  int iDoNew=doNew(engine,configDir,false);  boolean doNew=iDoNew != NEW_NONE;  if (configFile == null)   return;  if (second(cw.getLoadTime()) > second(configFile.lastModified()) && !force)   return;  Document doc=loadDocument(configFile);  createContextFiles(configDir,null,doNew);  cw.reset();  load(cs,cw,doc,true,doNew);  createContextFilesPost(configDir,cw,null,false,doNew);  ((CFMLEngineImpl)ConfigWebUtil.getEngine(cw)).onStart(cw,true);}  }
class C{  public String storeArchiveOnFileSystem(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  return "StoreArchiveWarning";}  }
class C{  public static String generateKey(String uri){  String regEx="[^a-zA-Z0-9_-]";  Pattern p=Pattern.compile(regEx);  Matcher m=p.matcher(uri);  String key=m.replaceAll("").trim();  int length=key.length();  if (length <= 120) {    return key;  } else {    return key.substring(0,120);  }}  }
class C{  public void forceLeader(int timeout){  long start=System.currentTimeMillis();  while (!cmember.isLeader()) {    try {      cmember.forceLeader();      if (timeout >= 0 && System.currentTimeMillis() - start > timeout) {        break;      }      Thread.sleep(1000);    } catch (    Exception e) {      logger.error(e.getMessage(),e);    }  }}  }
class C{  public void trim(Function<V,? extends V> valueCompactor) throws IllegalArgumentException, ClassCastException {  if (valueCompactor != null) {    for (Iterator<TrieNode<V>> iter=new NodeIterator(root,true); iter.hasNext(); ) {      TrieNode<V> node=iter.next();      node.trim();      V value=node.getValue();      if (value != null)       node.setValue(valueCompactor.apply(value));    }  }}  }
class C{  public void addListener(CacheListener<K,V> listener){  listeners.add(listener);}  }
class C{  private void removeParserNotices(ParseResult res){  if (noticesToHighlights != null) {    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();    for (Iterator i=noticesToHighlights.entrySet().iterator(); i.hasNext(); ) {      Map.Entry entry=(Map.Entry)i.next();      ParserNotice notice=(ParserNotice)entry.getKey();      if (shouldRemoveNotice(notice,res)) {        if (entry.getValue() != null) {          h.removeParserHighlight(entry.getValue());        }        i.remove();        if (DEBUG_PARSING) {          System.out.println("[DEBUG]: ... notice removed: " + notice);        }      } else {        if (DEBUG_PARSING) {          System.out.println("[DEBUG]: ... notice not removed: " + notice);        }      }    }  }}  }
class C{  public WritableRaster createCompatibleWritableRaster(){  return createCompatibleWritableRaster(width,height);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.WILDCARD;}  }
class C{  public boolean remove(String word){  return m_Words.remove(word);}  }
class C{  public boolean definitelyDifferent(FieldReference that){  if (this == that)   return false;  if (getName() != that.getName() || getDescriptor() != that.getDescriptor()) {    return true;  }  RVMField mine=peekResolvedField();  RVMField theirs=that.peekResolvedField();  if (mine == null || theirs == null)   return false;  return mine != theirs;}  }
class C{  public Matrix plus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] + B.A[i][j];    }  }  return X;}  }
class C{  public FluentFunction<T,R> after(final BiConsumer<T,R> action){  return withFn(null);}  }
class C{  public void addEventListener(MultimediaMessagingSessionListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IMultimediaMessagingSessionListener multimediaMessagingSessionListener=new MultimediaMessagingSessionListenerImpl(listener);    mMultimediaMessagingSessionListeners.put(listener,new WeakReference<>(multimediaMessagingSessionListener));    mApi.addEventListener2(multimediaMessagingSessionListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  static public void fatalError(boolean assertion,String str){  if (!assertion) {    throw new FatalErrorException(str);  }}  }
class C{  public Snippet createSnippet(){  SnippetImpl snippet=new SnippetImpl();  return snippet;}  }
class C{  private static OFActionSetDlDst decode_set_dst_mac(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+))").matcher(actionToDecode);  if (n.matches()) {    MacAddress macaddr=MacAddress.of(get_mac_addr(n,actionToDecode,log));    if (macaddr != null) {      OFActionSetDlDst.Builder ab=OFFactories.getFactory(version).actions().buildSetDlDst();      ab.setDlAddr(macaddr);      log.debug("action {}",ab.build());      return ab.build();    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  protected void start(SocketChannel channel) throws IOException {  mChannel=channel;  if (mPacketFormatter == null)   setPacketFormatter(new AsyncFormatter());  if (mPacketParser == null)   setPacketParser(new AsyncParser(getId(),getCachePath()));  AsyncSocketAdapter socketAdapter=new AsyncSocketAdapter(mChannel,this,mConnectDelivery);  setSender(socketAdapter);  setReceiver(socketAdapter);  setSendDispatcher(new AsyncSendDispatcher(mSender,mSendDelivery,mPacketFormatter,getProgressPrecision()));  setReceiveDispatcher(new AsyncReceiveDispatcher(mReceiver,mPacketParser,this,mReceiveDelivery));  isClosed=false;}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.traceTest=true;  test.test();}  }
class C{  public boolean isClosing(){  return _lifecycle.isDestroying();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","nckjxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public CaseWhenThenExpression(){}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(){  return new ConcurrentHashMap<K,V>();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (!action.has("progress_type")) {    sendProgressTypes(player);  } else   if (!action.has("item")) {    sendItemList(player,action.get("progress_type"));  } else {    sendDetails(player,action.get("progress_type"),action.get("item"));  }  player.notifyWorldAboutChanges();}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  private void skipToEndOfLine(){  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n') {      pos++;      break;    }  }}  }
class C{  private static String computeEventUID(Event event){  if (null != event) {    return (event.roomId + "-" + event.eventId);  } else {    return "invalid";  }}  }
class C{  public boolean removeFirstOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i + 1) & mask;  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Deprecated public SparseEdge(SparseVertex v1,SparseVertex v2){  vertices=new Tuple<SparseVertex,SparseVertex>(v1,v2);}  }
class C{  public void registerStatement(Statement stmt){  this.openStatements.addIfAbsent(stmt);}  }
class C{  public boolean addPathMatcher(PathMatcherTerm matcher){  return matchers.add(matcher);}  }
class C{  public void add(String expr,BasicStroke stroke){  Predicate p=(Predicate)ExpressionParser.parse(expr);  add(p,stroke);}  }
class C{  public boolean isUseLogCatAppender(){  return useLogCatAppender;}  }
class C{  public void addVideoSharingInvitationRejected(ContactId remoteContact,VideoContent content,VideoSharing.ReasonCode reasonCode,long timestamp){  mVideoSharingService.addVideoSharingInvitationRejected(remoteContact,content,reasonCode,timestamp);}  }
class C{  private static boolean eq(long v1,long v2){  return v1 == v2;}  }
class C{  public boolean isSpringForce(){  return true;}  }
class C{  public void mouseExited(java.awt.event.MouseEvent e){}  }
class C{  public HalfEdge findEdge(Coordinate orig,Coordinate dest){  HalfEdge e=(HalfEdge)vertexMap.get(orig);  if (e == null)   return null;  return e.find(dest);}  }
class C{  @Override public String globalInfo(){  return " SplitEvaluator that produces results for a classification scheme " + "on a nominal class attribute, including weighted misclassification " + "costs.";}  }
class C{  public static double quantile(double x,double mu,double sigma,double skew){  x=NormalDistribution.standardNormalQuantile(x);  if (Math.abs(skew) > 0.) {    x=(1. - Math.exp(-skew * x)) / skew;  }  return mu + sigma * x;}  }
class C{  public void createNetwork(Scenario scenario){  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord(1.0,10000.0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord(2500.0,10000.0));  Node node3=NetworkUtils.createAndAddNode(network,Id.create("3",Node.class),new Coord(4500.0,10000.0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create("4",Node.class),new Coord(17500.0,10000.0));  Node node5=NetworkUtils.createAndAddNode(network,Id.create("5",Node.class),new Coord(19999.0,10000.0));  Node node6=NetworkUtils.createAndAddNode(network,Id.create("6",Node.class),new Coord(19999.0,1500.0));  Node node7=NetworkUtils.createAndAddNode(network,Id.create("7",Node.class),new Coord(1.0,1500.0));  Node node8=NetworkUtils.createAndAddNode(network,Id.create("8",Node.class),new Coord(12500.0,12499.0));  Node node9=NetworkUtils.createAndAddNode(network,Id.create("9",Node.class),new Coord(12500.0,7500.0));  final Node fromNode=node1;  final Node toNode=node2;  NetworkUtils.createAndAddLink(network,Id.create("12",Link.class),fromNode,toNode,(double)1000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode1=node2;  final Node toNode1=node3;  NetworkUtils.createAndAddLink(network,Id.create("23",Link.class),fromNode1,toNode1,(double)2000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode2=node4;  final Node toNode2=node5;  NetworkUtils.createAndAddLink(network,Id.create("45",Link.class),fromNode2,toNode2,(double)2000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode3=node5;  final Node toNode3=node6;  NetworkUtils.createAndAddLink(network,Id.create("56",Link.class),fromNode3,toNode3,(double)1000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode4=node6;  final Node toNode4=node7;  NetworkUtils.createAndAddLink(network,Id.create("67",Link.class),fromNode4,toNode4,(double)1000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode5=node7;  final Node toNode5=node1;  NetworkUtils.createAndAddLink(network,Id.create("71",Link.class),fromNode5,toNode5,(double)1000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode6=node3;  final Node toNode6=node8;  NetworkUtils.createAndAddLink(network,Id.create("38",Link.class),fromNode6,toNode6,(double)5000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode7=node3;  final Node toNode7=node9;  NetworkUtils.createAndAddLink(network,Id.create("39",Link.class),fromNode7,toNode7,(double)5000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode8=node8;  final Node toNode8=node4;  NetworkUtils.createAndAddLink(network,Id.create("84",Link.class),fromNode8,toNode8,(double)5000,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  final Node fromNode9=node9;  final Node toNode9=node4;  NetworkUtils.createAndAddLink(network,Id.create("94",Link.class),fromNode9,toNode9,(double)4999,100.00 / 3.6,(double)3600,(double)1,null,(String)"22");  for (Integer i=0; i < 5; i++) {    for (Integer j=0; j < 4; j++) {      String idpart=i.toString() + j.toString();      double xCoord=6563. + (i + 1) * 625;      double yCoord=7188. + (j - 1) * 625;      Node nodeA=NetworkUtils.createAndAddNode(network,Id.create("node_" + idpart + "A",Node.class),new Coord(xCoord,yCoord));      Node nodeB=NetworkUtils.createAndAddNode(network,Id.create("node_" + idpart + "B",Node.class),new Coord(xCoord,yCoord + 1.));      final Node fromNode10=nodeA;      final Node toNode10=nodeB;      NetworkUtils.createAndAddLink(network,Id.create("link_p" + idpart,Link.class),fromNode10,toNode10,(double)10,30.0,(double)3600,(double)1);    }  }}  }
class C{  public T caseAssociationClassDefinition_(AssociationClassDefinition_ object){  return null;}  }
class C{  private static IPackageFragmentRoot addVariableRTJar(IJavaProject jproject,IPath rtStubsPath,String libVarName,String srcVarName,String srcrootVarName) throws CoreException {  IPath[] rtJarPaths=findRtJar(rtStubsPath);  IPath libVarPath=new Path(libVarName);  IPath srcVarPath=null;  IPath srcrootVarPath=null;  JavaCore.setClasspathVariable(libVarName,rtJarPaths[0],null);  if (srcVarName != null) {    IPath varValue=rtJarPaths[1] != null ? rtJarPaths[1] : Path.EMPTY;    JavaCore.setClasspathVariable(srcVarName,varValue,null);    srcVarPath=new Path(srcVarName);  }  if (srcrootVarName != null) {    IPath varValue=rtJarPaths[2] != null ? rtJarPaths[2] : Path.EMPTY;    JavaCore.setClasspathVariable(srcrootVarName,varValue,null);    srcrootVarPath=new Path(srcrootVarName);  }  return addVariableEntry(jproject,libVarPath,srcVarPath,srcrootVarPath);}  }
class C{  public double previousCoupon(Date settlement){  if (settlement.isNull()) {    settlement=settlementDate();  }  return CashFlows.getInstance().previousCouponRate(cashflows_,settlement);}  }
class C{  public BusinessObjectFormat createTestBusinessObjectFormat(List<Attribute> attributes){  createTestDatabaseEntitiesForBusinessObjectFormatTesting();  BusinessObjectFormatCreateRequest request=createBusinessObjectFormatCreateRequest(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.PARTITION_KEY,AbstractServiceTest.FORMAT_DESCRIPTION,attributes,getTestAttributeDefinitions(),getTestSchema());  return businessObjectFormatService.createBusinessObjectFormat(request);}  }
class C{  public String toString(){  return toOrder(DEFAULT_ORDER);}  }
class C{  public Builder fill(int color){  this.fillColor=color;  return this;}  }
class C{  public void dispose(){  super.dispose();}  }
class C{  private void createTriggerIds(TriggerProcess tp){  List<TriggerProcessParameter> params=Collections.emptyList();  TriggerType triggerType=tp.getTriggerDefinition().getType();  TriggerMessage tm=new TriggerMessage(triggerType,params,Collections.singletonList(supplier));  TriggerProcessIdentifier tpi1=new TriggerProcessIdentifier(TriggerProcessIdentifierName.ORGANIZATION_KEY,String.valueOf(tp.getUser().getOrganization().getKey()));  tpi1.setTriggerProcess(tp);  tp.setTriggerProcessIdentifiers(Arrays.asList(tpi1));  if (triggerType == TriggerType.REGISTER_OWN_USER) {    TriggerProcessIdentifier tpi2=new TriggerProcessIdentifier(TriggerProcessIdentifierName.USER_ID,user.getUserId());    tpi2.setTriggerProcess(tp);    tp.setTriggerProcessIdentifiers(Arrays.asList(tpi1,tpi2));  }  triggerProcessData=new TriggerProcessMessageData(tp,tm);}  }
class C{  public String lookupNamespace(String prefix){  String uri=null;  final Stack stack=getPrefixStack(prefix);  if (stack != null && !stack.isEmpty()) {    uri=((MappingRecord)stack.peek()).m_uri;  }  if (uri == null)   uri=EMPTYSTRING;  return uri;}  }
class C{  private Object[] sortArray(Object[] items){  if (items.length > 0 && items[0] instanceof Comparable) {    Arrays.sort(items);  }  return items;}  }
class C{  public T caseAnonymous_action_1_(Anonymous_action_1_ object){  return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.828 -0500",hash_original_method="974B8EFFC4FED3C302A251DC7978304A",hash_generated_method="F9E6293C38B6A411D0A3D8B4F70C0426") protected TestResult createResult(){  return new TestResult();}  }
class C{  protected String paramString(){  return "x=" + getX() + " y="+ getY()+ " width="+ getWidth()+ " height="+ getHeight();}  }
class C{  public void dispose(){  m_manager.removeListener(m_breakpointManagerListener);}  }
class C{  public void connectionLost() throws MqttException {  boolean reconnected=false;synchronized (connLock) {    while (!reconnected && !connLockNotified) {      try {        wmqttClient.connect();        reconnected=true;      } catch (      MqttException mqe) {        if (userConnect) {          throw mqe;        }      }      try {        connLock.wait(2000);      } catch (      InterruptedException ie) {      }    }    connLockNotified=false;  }  if (reconnected) {    try {      String requestTopic[]={REQ_TOPIC};      wmqttClient.subscribe(requestTopic,subQoS);    } catch (    MqttException e) {      disconnectClient();      destroyClient();      throw e;    }  }}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  private void writeEventTypes(int[] types,BinaryRawWriterEx writer){  if (types == null) {    writer.writeIntArray(null);    return;  }  int[] resultTypes=new int[types.length];  int idx=0;  for (  int t : types)   if (platformCtx.isEventTypeSupported(t))   resultTypes[idx++]=t;  writer.writeIntArray(Arrays.copyOf(resultTypes,idx));}  }
class C{  public Vector divide(double x,double y,double z){  return new Vector(this.x / x,this.y / y,this.z / z);}  }
class C{  public void resetAndEnsureCapacity(final int minCapacity){  final int len0=size();  backing.ensureCapacity(minCapacity);  final int len1=backing.len();  if (len1 > len0) {    final Value[] a=backing.array();    for (int i=len0; i < len1; i++) {      if (a[i] == null)       break;      a[i]=null;    }  }  this.vertices=backing.slice(0,minCapacity);}  }
class C{  public void addActionListener(ActionListener l){  dispatcher.addListener(l);}  }
class C{  private static Options initCommandLineOptions(){  Options options=new Options();  options.addOption(OptionBuilder.withLongOpt("gui").withDescription("Start VectAlign GUI").create(OPTION_GUI));  options.addOption(OptionBuilder.withLongOpt("start").withDescription("Starting VectorDrawable path (\"string\", txt file or SVG file)").hasArg().withArgName("\"string\"|txt_file|svg_file").create(OPTION_FROM));  options.addOption(OptionBuilder.withLongOpt("end").withDescription("Ending VectorDrawable path (\"string\", txt file or SVG file)").hasArg().withArgName("\"string\"|txt_file|svg_file").create(OPTION_TO));  options.addOption(OptionBuilder.withLongOpt("mode").withDescription("Aligning technique (default is BASE)").hasArg().withArgName("BASE|LINEAR|SUB_BASE|SUB_LINEAR").create(OPTION_MODE));  options.addOption(OptionBuilder.withLongOpt("version").withDescription("Print the version of the application").create(OPTION_VERSION));  options.addOption(OptionBuilder.withLongOpt("help").create(OPTION_HELP));  return options;}  }
class C{  public final void sub(Matrix4f m1){  this.m00-=m1.m00;  this.m01-=m1.m01;  this.m02-=m1.m02;  this.m03-=m1.m03;  this.m10-=m1.m10;  this.m11-=m1.m11;  this.m12-=m1.m12;  this.m13-=m1.m13;  this.m20-=m1.m20;  this.m21-=m1.m21;  this.m22-=m1.m22;  this.m23-=m1.m23;  this.m30-=m1.m30;  this.m31-=m1.m31;  this.m32-=m1.m32;  this.m33-=m1.m33;}  }
class C{  public ServerConnectivityException(){}  }
class C{  protected static FontUIResource _getControlTextFont(){  if (controlFont == null) {    try {      controlFont=new FontUIResource(Font.getFont("swing.plaf.metal.controlFont",new Font(FONT_DEFAULT,Font.PLAIN,FONT_SIZE)));    } catch (    Exception e) {      controlFont=new FontUIResource(FONT_DEFAULT,Font.PLAIN,FONT_SIZE);    }  }  return controlFont;}  }
class C{  private LenientChronology(Chronology base){  super(base,null);}  }
class C{  public static int encodeLongitude(double longitude){  checkLongitude(longitude);  if (longitude == 180.0D) {    longitude=Math.nextDown(longitude);  }  return (int)Math.floor(longitude / LON_DECODE);}  }
class C{  public static Stopwatch createStarted(Ticker ticker){  return new Stopwatch(ticker).start();}  }
class C{  public StartupActionsPreferencesPanel(){  initComponents();  this.actionsTbl.getSelectionModel().addListSelectionListener(null);  ArrayList<JMenuItem> items=new ArrayList<>();  InstanceManager.getDefault(StartupActionsManager.class).getFactories().values().stream().forEach(null);  items.sort(null);  items.stream().forEach(null);}  }
class C{  protected WritableRaster(SampleModel sampleModel,Point origin){  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF:    setTypeRef((TypeRef)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  @Inline @Unpreemptible("We may boost the size of the stack with GC disabled and may get preempted doing this") public static void disableGC(){  disableGC(false);}  }
class C{  public boolean isSetPersist(){  return EncodingUtils.testBit(__isset_bitfield,__PERSIST_ISSET_ID);}  }
class C{  final public void print(double v){  Writer out=this.out;  if (out == null)   return;  try {    String s=String.valueOf(v);    out.write(s,0,s.length());  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public void fireBindTargetChange(Component source,String propertyName,Object oldValue,Object newValue){  if (listeners == null || listeners.size() == 0) {    return;  }  BindTarget[] array;synchronized (this) {    array=new BindTarget[listeners.size()];    int alen=array.length;    for (int iter=0; iter < alen; iter++) {      array[iter]=(BindTarget)listeners.get(iter);    }  }  if (Display.getInstance().isEdt()) {    fireBindTargetChangeSync(array,source,propertyName,oldValue,newValue);  } else {    bindTargetArray=true;    Runnable cl=new CallbackClass(array,new Object[]{source,propertyName,oldValue,newValue});    if (blocking) {      Display.getInstance().callSeriallyAndWait(cl);    } else {      Display.getInstance().callSerially(cl);    }  }}  }
class C{  public void testNominalInstances(){  runTestOnData(generateData(5,0,5));}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(XYCoordinateType.DATA)) {    return XYCoordinateType.DATA;  } else   if (this.equals(XYCoordinateType.RELATIVE)) {    return XYCoordinateType.RELATIVE;  } else   if (this.equals(XYCoordinateType.INDEX)) {    return XYCoordinateType.INDEX;  }  return null;}  }
class C{  private MapItem(ItemType type,Section section,Item firstItem,Item lastItem,int itemCount){  super(ALIGNMENT,WRITE_SIZE);  if (type == null) {    throw new NullPointerException("type == null");  }  if (section == null) {    throw new NullPointerException("section == null");  }  if (firstItem == null) {    throw new NullPointerException("firstItem == null");  }  if (lastItem == null) {    throw new NullPointerException("lastItem == null");  }  if (itemCount <= 0) {    throw new IllegalArgumentException("itemCount <= 0");  }  this.type=type;  this.section=section;  this.firstItem=firstItem;  this.lastItem=lastItem;  this.itemCount=itemCount;}  }
class C{  public void parseTemplate(){  destroyHeavyWidgets();  final String template=templateInput.getText();  parser.getData().addActionContainer(getViewId(),this);  try {    final Array<Actor> actors=parser.parseTemplate(template);    resultTable.clear();    for (    final Actor actor : actors) {      resultTable.add(actor).row();    }  } catch (  final Exception exception) {    onParsingError(exception);  }}  }
class C{  public static SimpleDatabase loadXml(InputStream inputStream) throws Exception {  KeePassFile result=getSerializer().read(KeePassFile.class,inputStream);  result.root.group.uuid=UUID.randomUUID();  return new SimpleDatabase(result);}  }
class C{  @SuppressWarnings("unchecked") public static boolean checkETagValidators(final HttpServletRequest req,final HttpServletResponse resp,final Method reqMethod,final String etag){  final List<String> ifNoneMatchList=Collections.list(req.getHeaders("If-None-Match"));  if (ifNoneMatchList.size() > 0 && isMatchingEtag(ifNoneMatchList,etag)) {    if (reqMethod == Method.GET || reqMethod == Method.HEAD) {      sendNotModified(resp);    } else {      sendPreconditionFailed(resp);    }    return true;  }  final List<String> ifMatchList=Collections.list(req.getHeaders("If-Match"));  if (ifMatchList.size() > 0 && !isMatchingEtag(ifMatchList,etag)) {    sendPreconditionFailed(resp);    return true;  }  return false;}  }
class C{  public static final char toLowerCase(char ch){  if (ch >= 'A' && ch <= 'Z')   return (char)(ch | 0x20);  return ch;}  }
class C{  public boolean forEachDescending(TLongProcedure procedure){  for (int i=_pos; i-- > 0; ) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  private boolean verifyResults(Collection result,String[] expected,boolean ordered){  if (result.size() != expected.length) {    return false;  }  String[] res=new String[result.size()];  int i=0;  for (  Object e : result) {    res[i++]=String.valueOf(e);  }  if (!ordered) {    Arrays.sort(res);    Arrays.sort(expected);  }  return Arrays.equals(res,expected);}  }
class C{  public Tradingday findTradingdayByOpenCloseDate(final ZonedDateTime openDate,final ZonedDateTime closeDate) throws PersistentModelException {  return m_tradingdayHome.findByOpenCloseDate(openDate,closeDate);}  }
class C{  private void cleanupService(){  if (mService != null) {    try {      mContext.unbindService(this);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Unable to unbind from licensing service (already unbound)");    }    mService=null;  }}  }
class C{  public void init() throws ServletException {}  }
class C{  public ServiceCall<TranslationResult> translate(final List<String> texts,final Language source,final Language target){  return translateRequest(texts,null,source,target);}  }
class C{  public boolean isExported(){  EObject _eContainer=this.eContainer();  return (_eContainer instanceof ExportDeclaration);}  }
class C{  @Deprecated protected void eliminateRedundantCandidates(){synchronized (localCandidates) {    for (int i=0; i < localCandidates.size(); i++) {      LocalCandidate cand=localCandidates.get(i);      for (int j=i + 1; j < localCandidates.size(); ) {        LocalCandidate cand2=localCandidates.get(j);        if ((cand != cand2) && cand.getTransportAddress().equals(cand2.getTransportAddress()) && cand.getBase().equals(cand2.getBase())&& (cand.getPriority() >= cand2.getPriority())) {          localCandidates.remove(j);          if (logger.isLoggable(Level.FINEST)) {            logger.finest("eliminating redundant cand: " + cand2);          }        } else         j++;      }    }  }}  }
class C{  public void testPutWhenOffsetIsNonZero(){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(40);  byteBuffer.order(ByteOrder.nativeOrder());  IntBuffer intBuffer=byteBuffer.asIntBuffer();  int[] source={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};  intBuffer.put(source,2,2);  intBuffer.put(source,4,2);  assertEquals(4,intBuffer.get(0));  assertEquals(5,intBuffer.get(1));  assertEquals(6,intBuffer.get(2));  assertEquals(7,intBuffer.get(3));}  }
class C{  public void testXXMaxPermSizeMemoryArgumentOverride() throws Exception {  AbstractInstalledLocalContainerStub container=new AbstractInstalledLocalContainerStub(configuration);  container.getConfiguration().setProperty(GeneralPropertySet.JVMARGS,"-XX:MaxPermSize=256m");  container.startInternal();  JvmLauncher java=container.getJava();  String commandLine=java.getCommandLine();  checkString(commandLine,"-Xms128m");  checkString(commandLine,"-Xmx512m");  checkString(commandLine,"-XX:MaxPermSize=256m");}  }
class C{  public DoHttpRequestTask(AsyncHttpClient httpClient,AsyncCallback callback){  this.client=httpClient;  this.callback=callback;}  }
class C{  private void writeDirectoryPostResource(StringBuilder sb,String path){  sb.append("className=\"" + DIR_RESOURCE_SET + "\" base=\"");  sb.append(path.replace("&","&amp;"));}  }
class C{  void processPortsChanged(Operator op){  if (model.getOperatorRect(op) != null) {    model.setOperatorRect(op,model.getOperatorRect(op));    ensureProcessSizeFits(op.getExecutionUnit(),model.getOperatorRect(op));  }}  }
class C{  public URIConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  public SimpleScope createSimpleScope(){  SimpleScopeImpl simpleScope=new SimpleScopeImpl();  return simpleScope;}  }
class C{  private HttpEntity executeHttpRequest(HttpUriRequest request) throws ClientProtocolException, IOException {  HttpResponse response=getClient().execute(request);  if (response.getStatusLine().getStatusCode() != 200) {    throw new GooglePlayException(new String(Utils.readAll(response.getEntity().getContent())));  }  return response.getEntity();}  }
class C{  public Builder canSkip(boolean canSkip){  this.canSkip=canSkip;  return this;}  }
class C{  public void doColor(){  Color color=JColorChooser.showDialog(this,"Set Text Color",jTextArea1.getForeground());  if (color != null) {    jTextArea1.setBackground(color);    this.repaint();  }}  }
class C{  public void endVisit(ASTNode node){}  }
class C{  public boolean isScheduling(){  return checkAssignmentType(ASSIGNMENT_TYPE_SCHEDULING);}  }
class C{  public static Bitmap base64ToBitmap(String b64){  byte[] imageAsBytes=Base64.decode(b64.getBytes(),Base64.DEFAULT);  return BitmapFactory.decodeByteArray(imageAsBytes,0,imageAsBytes.length);}  }
class C{  public MovingAverage(long timeSpan,ChronoUnit unit){  this.timeSpan=timeSpan;  this.unit=unit;  this.windowTime=unit.getDuration().toMillis() * timeSpan;}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public NettyOptions properties(){  return properties;}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowMediaPlayer.getUseEvr());}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public void println(float x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  protected void disconnect(SocketHandler h){  _handlers.remove(h);}  }
class C{  int adjustIconOffset(int offset){  maxIconOffset=Math.max(maxIconOffset,offset);  return maxIconOffset;}  }
class C{  public static Customer createCustomer(){  List<Department> departments=new ArrayList<Department>();  departments.add(new Department(222,"Oceanview 66","89210","USA"));  departments.add(new Department(333,"Lakeside 41","22020","USA"));  departments.add(new Department(444,"Highstreet 341","11030","USA"));  Customer customer=new Customer(123,"Honda",departments);  return customer;}  }
class C{  public RTHtml<RTImage,RTAudio,RTVideo> convert(final Spanned text,RTFormat.Html rtFormat){  mText=text;  mRTFormat=rtFormat;  mOut=new StringBuilder();  mImages=new ArrayList<RTImage>();  mParagraphStyles.clear();  convertParagraphs();  return new RTHtml<RTImage,RTAudio,RTVideo>(rtFormat,mOut.toString(),mImages);}  }
class C{  public Header nextHeader() throws NoSuchElementException {  final int current=this.currentIndex;  if (current < 0) {    throw new NoSuchElementException("Iteration already finished.");  }  this.currentIndex=findNext(current);  return this.allHeaders[current];}  }
class C{  @Override protected void init() throws ConfigurationException, LoggingException {  this.sqlEncoder=new TimedSQLEncoder(logger);  super.sqlEncoder=this.sqlEncoder;}  }
class C{  protected Node popNode(Stack<Node> stack,Class<? extends Node> cls,String uri){  Node top=stack.isEmpty() ? null : stack.peek();  if (top != null) {    if (nodeMatches(top,cls,uri)) {      Node node=stack.pop();      poppedNodes.push(node);      return node;    } else {      for (int i=stack.size() - 2; i >= 0; i--) {        if (nodeMatches(stack.get(i),cls,uri)) {          Node node=stack.remove(i);          poppedNodes.push(node);          return node;        }      }    }  }  return null;}  }
class C{  public CommentListProvider id(int id){  mImageId=id;  return this;}  }
class C{  public String[] queryUniqueIdentifiersForFileSystems(String arrayId) throws InvalidArgument, NotFound, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryUniqueIdentifiersForFileSystems(): ";  log.info(methodName + "Entry with arrayId[" + arrayId+ "]");  sslUtil.checkHttpRequest(true,true);  Util.uniqueIdIsValid(arrayId);  SOSManager sosManager=contextManager.getSOSManager();  String[] ids=sosManager.queryUniqueIdentifiersForFileSystems(arrayId);  log.info(methodName + "Exit returning ids of size[" + ids.length+ "]");  return ids;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tnumber of clusters. (default = 2).","N",1,"-N <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  boolean retval;  if (!this.getClass().equals(other.getClass())) {    retval=false;  } else {    UDPMessageChannel that=(UDPMessageChannel)other;    retval=this.getKey().equals(that.getKey());  }  return retval;}  }
class C{  public void receiveErrorqueryUniqueIdentifiersForEntity(java.lang.Exception e){}  }
class C{  public Boolean isHttpDigest(){  return httpDigest;}  }
class C{  public void log(String tag,String message,LoggerLevel loggerLevel,boolean write){switch (loggerLevel) {case V:    Log.v(tag,message);  break;case D:Log.d(tag,message);break;case I:Log.i(tag,message);break;case W:Log.w(tag,message);break;case E:Log.e(tag,message);break;case WTF:Log.wtf(tag,message);break;}if (fos != null && write) {writeLog(tag,message);}}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  @Override public int analyseProtocol(){  logging.log(getClass(),"\nAnalyse: " + getProtocol() + " with ID: "+ getToken(),Logging.DEBUG);  ArrayList<SSOProtocol> last_protocolflow=SSOProtocol.getLastProtocolFlow();  if (last_protocolflow != null) {    double listsize=(double)last_protocolflow.size();    double protocol=0;    double token=0;    long tmp=0;    long curr_time=0;    long last_time=0;    boolean wait=true;    for (    SSOProtocol sso : last_protocolflow) {      if (sso.getProtocol().contains(this.getProtocol())) {        logging.log(getClass(),sso.getProtocol(),Logging.DEBUG);        protocol++;      }      if (sso.getToken().equals(this.getToken())) {        logging.log(getClass(),sso.getToken(),Logging.DEBUG);        token++;      }      if (wait) {        wait=false;      } else {        curr_time=sso.getTimestamp();        tmp+=curr_time - last_time;        logging.log(getClass(),"Diff: " + (curr_time - last_time),Logging.DEBUG);      }      last_time=sso.getTimestamp();    }    if (listsize >= 0) {      double diff_time=((double)tmp / listsize);      double curr_diff_time=getTimestamp() - last_protocolflow.get(last_protocolflow.size() - 1).getTimestamp();      double time_bonus=0;      logging.log(getClass(),"CurrDiff:" + curr_diff_time + " Diff:"+ diff_time,Logging.DEBUG);      if (curr_diff_time <= (diff_time + 4000)) {        time_bonus=0.35;      }      double prob=((protocol / listsize) + (token / listsize) * 2) / 3 + (time_bonus);      logging.log(getClass(),"Probability: " + prob,Logging.DEBUG);      if (prob >= 0.7) {        return getIDOfLastList();      }    }  }  return newProtocolflowID();}  }
class C{  static boolean matches(CodeSigner[] signers,CodeSigner[] oldSigners,CodeSigner[] newSigners){  if ((oldSigners == null) && (signers == newSigners))   return true;  boolean match;  if ((oldSigners != null) && !isSubSet(oldSigners,signers))   return false;  if (!isSubSet(newSigners,signers)) {    return false;  }  for (int i=0; i < signers.length; i++) {    boolean found=((oldSigners != null) && contains(oldSigners,signers[i])) || contains(newSigners,signers[i]);    if (!found)     return false;  }  return true;}  }
class C{  public void reverseBranch(int which,CodeAddress newTarget){  finisher.reverseBranch(which,newTarget);}  }
class C{  public void testQuestionmark() throws IOException {  Directory indexStore=getIndexStore("body",new String[]{"metal","metals","mXtals","mXtXls"});  IndexReader reader=DirectoryReader.open(indexStore);  IndexSearcher searcher=newSearcher(reader);  Query query1=new WildcardQuery(new Term("body","m?tal"));  Query query2=new WildcardQuery(new Term("body","metal?"));  Query query3=new WildcardQuery(new Term("body","metals?"));  Query query4=new WildcardQuery(new Term("body","m?t?ls"));  Query query5=new WildcardQuery(new Term("body","M?t?ls"));  Query query6=new WildcardQuery(new Term("body","meta??"));  assertMatches(searcher,query1,1);  assertMatches(searcher,query2,1);  assertMatches(searcher,query3,0);  assertMatches(searcher,query4,3);  assertMatches(searcher,query5,0);  assertMatches(searcher,query6,1);  reader.close();  indexStore.close();}  }
class C{  public static void upsample(Mat img,double scale){  Imgproc.pyrUp(img,img,new Size((double)img.width() * scale,(double)img.height() * scale));}  }
class C{  public int hashCode(){  return index;}  }
class C{  public static int extractInt(Object objToGetInt){  if (objToGetInt instanceof Integer) {    return (Integer)objToGetInt;  }  return Integer.parseInt(objToGetInt.toString());}  }
class C{  public SimpleFragmentIntent<F> replaceExtras(SimpleFragmentIntent<?> src){  extras=src.extras != null ? new Bundle(src.extras) : null;  return this;}  }
class C{  public boolean hasField(Object target){  return this.field.getDeclaringClass().isAssignableFrom(target.getClass());}  }
class C{  public Method lookupMethod(String name,Class<?>... params){  Map<Integer,Method> map=methods.get(name);  Integer key=getKey(params);  Method result=null;  if ((null == map) || null == (result=map.get(key))) {    map=declaredMethods.get(name);    if (null != map) {      result=map.get(key);    }  }  return result;}  }
class C{  public final AC shrink(){  return shrink(100f,curIx);}  }
class C{  private void createVirtualNetwork(CreateVirtualNetworkWorkflowDocument state,Operation operation){  VirtualNetworkService.State postState=new VirtualNetworkService.State();  postState.parentId=state.parentId;  postState.parentKind=state.parentKind;  postState.name=state.name;  postState.description=state.description;  postState.state=SubnetState.CREATING;  postState.routingType=state.routingType;  ServiceHostUtils.getCloudStoreHelper(getHost()).createPost(VirtualNetworkService.FACTORY_LINK).setBody(postState).setCompletion(null).sendWith(this);}  }
class C{  public Param createParam(){  ParamImpl param=new ParamImpl();  return param;}  }
class C{  public void delaunayPlace(DelaunayVertex site){  DelaunayTriangle triangle=locate(site);  if (triangle == null) {    throw new IllegalArgumentException("No containing triangle");  }  if (triangle.contains(site)) {    return;  }  Set<DelaunayTriangle> cavity=getCavity(site,triangle);  mostRecent=update(site,cavity);}  }
class C{  public void updateLong(int columnIndex,long x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateLong(columnIndex,x);}  }
class C{  public ThreePaneTLRWindow(String name,String menubarFile,String toolbarFile){  super(name);  buildGUI(menubarFile,toolbarFile);  pack();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public SolrQuery addOrUpdateSort(String field,ORDER order){  return addOrUpdateSort(new SortClause(field,order));}  }
class C{  public T caseTrace(Trace object){  return null;}  }
class C{  public Builder filterRegex(String filterRegex){  if (!filterRegex.isEmpty()) {    this.filterRegexes.add(filterRegex);  }  return this;}  }
class C{  public void addSocket(IceSocketWrapper sock,TransportAddress remoteAddress){  netAccessManager.addSocket(sock,remoteAddress);}  }
class C{  public boolean match(int value){  if (a == 0) {    return value == b;  }  if (a > 0) {    if (value < b) {      return false;    }    return (value - b) % a == 0;  }  if (value > b) {    return false;  }  return (b - value) % (-a) == 0;}  }
class C{  private int roundUpPower2(int x){  x=x - 1;  x=x | (x >> 1);  x=x | (x >> 2);  x=x | (x >> 4);  x=x | (x >> 8);  x=x | (x >> 16);  return x + 1;}  }
class C{  public void removeData(byte[] buf,int off,int len,int skip){  read(buf,off,len,skip);  removeData(skip + len);}  }
class C{  public String randomKey(){  checkIsInMulti();  client.randomKey();  return client.getBulkReply();}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Atomic stamped example started.");    String stampedName=UUID.randomUUID().toString();    String val=UUID.randomUUID().toString();    String stamp=UUID.randomUUID().toString();    IgniteAtomicStamped<String,String> stamped=ignite.atomicStamped(stampedName,val,stamp,true);    System.out.println("Atomic stamped initial [value=" + stamped.value() + ", stamp="+ stamped.stamp()+ ']');    IgniteRunnable c=new StampedUpdateClosure(stampedName);    ignite.compute().broadcast(c);    String newVal=UUID.randomUUID().toString();    String newStamp=UUID.randomUUID().toString();    System.out.println("Try to change value and stamp of atomic stamped with wrong expected value and stamp.");    stamped.compareAndSet("WRONG EXPECTED VALUE",newVal,"WRONG EXPECTED STAMP",newStamp);    ignite.compute().run(c);    System.out.println("Try to change value and stamp of atomic stamped with correct value and stamp.");    stamped.compareAndSet(val,newVal,stamp,newStamp);    ignite.compute().run(c);  }   System.out.println();  System.out.println("Finished atomic stamped example...");  System.out.println("Check all nodes for output (this node is also part of the cluster).");}  }
class C{  public void testNextDoubleBadBound(){  ThreadLocalRandom r=ThreadLocalRandom.current();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);}  }
class C{  public GsonGetRequest(@NonNull final String url,@NonNull final Type type,@NonNull final Response.Listener<T> listener,@NonNull final Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  this.type=type;  this.listener=listener;}  }
class C{  protected ArrayList<Choiceable> asyncGetResults(CharSequence constraint){  ArrayList<Choiceable> resultList=new ArrayList<Choiceable>();  for (  Choiceable c : backupList) {    if (c.getTitleText().toLowerCase().contains(constraint.toString().toLowerCase()) || EditTextUtil.removeAccents(c.getTitleText().toLowerCase()).contains(constraint.toString().toLowerCase())) {      resultList.add(c);    }  }  return resultList;}  }
class C{  protected Cookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  Cookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  public VNXeCommandJob updateFileSystemQuotaAsync(String quotaId,FileSystemQuotaModifyParam param) throws VNXeException {  _logger.info("Async update quota with ID: " + quotaId);  unsetQueryParameters();  MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();  queryParams.add(VNXeConstants.TIMEOUT,"0");  VNXUnityTreeQuota quota=getFileSystemQuota(quotaId);  unsetQueryParameters();  setQueryParameters(queryParams);  _url=URL_INSTANCE + quota.getId() + URL_MODIFY;  return postRequestAsync(param);}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  public X509Certificate generate(PrivateKey key) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,(SecureRandom)null);}  }
class C{  private static float quarterValue(int intValue){  float floatValue=intValue;  return floatValue / 4.0f;}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  private Copier(){  instanceNotAllowed(getClass());}  }
class C{  public Edge pickOne(){  return oneEdge;}  }
class C{  public void addTrackSegment(){  numTrackSegments++;  String name="";  boolean duplicate=true;  while (duplicate) {    name="T" + numTrackSegments;    if (finder.findTrackSegmentByName(name) == null) {      duplicate=false;    }    if (duplicate) {      numTrackSegments++;    }  }  newTrack=new TrackSegment(name,beginObject,beginPointType,foundObject,foundPointType,dashedLine.isSelected(),mainlineTrack.isSelected(),this);  trackList.add(newTrack);  setDirty(true);  setLink(newTrack,TRACK,beginObject,beginPointType);  setLink(newTrack,TRACK,foundObject,foundPointType);  LayoutBlock b=provideLayoutBlock(blockIDField.getText().trim());  if (b != null) {    newTrack.setLayoutBlock(b);    auxTools.setBlockConnectivityChanged();    String sensorName=(blockSensor.getText().trim());    if (sensorName.length() > 0) {      if (!validateSensor(sensorName,b,this)) {        b.setOccupancySensorName("");      } else {        blockSensor.setText(b.getOccupancySensorName());      }    }    newTrack.updateBlockInfo();  }}  }
class C{  private void executeUpdate(String[] args) throws IOException, ServiceException, InterruptedException {  String docIdToUpdate=args[1];  String filePath=args[2];  DocumentListEntry currentEntry=docs.service.getEntry(new URL(DEFAULT_DOCLIST_FEED_URL + "/" + docIdToUpdate),DocumentListEntry.class);  MediaFileSource mediaFile=getMediaFileSource(filePath);  ResumableGDataFileUploader uploader=new ResumableGDataFileUploader.Builder(docs.service,mediaFile,currentEntry).title(mediaFile.getName()).requestType(ResumableGDataFileUploader.RequestType.UPDATE_MEDIA_ONLY).build();  uploader.start();  while (!uploader.isDone()) {    try {      Thread.sleep(100);    } catch (    InterruptedException ie) {      output.println("Media update interrupted at: " + String.format("%3.0f",uploader.getProgress() * 100) + "%");      throw ie;    }  }  DocumentListEntry updatedEntry=uploader.getResponse(DocumentListEntry.class);  output.println("Finished update");}  }
class C{  @Override public int hashCode(){  int hc=hashCodeValue;  if (hc == 0) {    hc=baseLocale.hashCode();    if (localeExtensions != null) {      hc^=localeExtensions.hashCode();    }    hashCodeValue=hc;  }  return hc;}  }
class C{  public Map<Integer,Integer> popMissingBlocks(){  ChangeSet changeSet=getChangeSet();  if (changeSet instanceof BlockBagChangeSet) {    BlockBagChangeSet bbcs=(BlockBagChangeSet)changeSet;    BlockBag bag=bbcs.getBlockBag();    if (bag != null) {      bag.flushChanges();      Map<Integer,Integer> missingBlocks=((BlockBagChangeSet)changeSet).popMissing();      if (!missingBlocks.isEmpty()) {        StringBuilder str=new StringBuilder();        int size=missingBlocks.size();        int i=0;        for (        Map.Entry<Integer,Integer> entry : missingBlocks.entrySet()) {          int combined=entry.getKey();          int id=FaweCache.getId(combined);          int data=FaweCache.getData(combined);          int amount=entry.getValue();          BlockType type=BlockType.fromID(id);          str.append((type != null ? type.getName() : "" + id)).append((data != 0 ? ":" + data : "")).append((amount != 1 ? "x" + amount : ""));          ++i;          if (i != size) {            str.append(", ");          }        }        BBC.WORLDEDIT_SOME_FAILS_BLOCKBAG.send(player,str.toString());      }    }  }  return new HashMap<>();}  }
class C{  public Builder(@NonNull TokenRequest request){  setRequest(request);  mAdditionalParameters=Collections.emptyMap();}  }
class C{  public static boolean isComponentVisible(Component child){  if (child.getParent() instanceof TabSheet) {    TabSheet tabSheet=(TabSheet)child.getParent();    TabSheet.Tab tab=tabSheet.getTab(child);    if (!tab.isVisible()) {      return false;    }  }  if (child.getParent() instanceof CubaGroupBox) {    return isComponentVisible(child.getParent());  }  return child.isVisible() && (child.getParent() == null || isComponentVisible(child.getParent()));}  }
class C{  public static void mark(HalfEdge e){  ((MarkHalfEdge)e).mark();}  }
class C{  public void testBlockingStop_LastLink() throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  Fixture f=new Fixture(3,true,0,false);  f.simEngine.doSimStep(100);  assertEquals(0,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(101);  f.simEngine.doSimStep(101);  assertEquals(1,f.qlink2.getAllVehicles().size());  MobsimVehicle[] vehicles=f.qlink2.getAllVehicles().toArray(new MobsimVehicle[2]);  assertEquals(f.transitVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(102);  f.simEngine.doSimStep(102);  assertEquals(2,f.qlink2.getAllVehicles().size());  vehicles=f.qlink2.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(f.normalVehicle,vehicles[1]);  f.qsim.getSimTimer().setTime(201);  f.simEngine.doSimStep(201);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(202);  f.simEngine.doSimStep(202);  assertEquals(1,f.qlink3.getAllVehicles().size());  vehicles=f.qlink3.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(1,f.qlink2.getAllVehicles().size());  vehicles=f.qlink2.getAllVehicles().toArray(vehicles);  assertEquals(f.normalVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(203);  f.simEngine.doSimStep(203);  assertEquals(2,f.qlink3.getAllVehicles().size());  vehicles=f.qlink3.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(f.normalVehicle,vehicles[1]);  f.qsim.getSimTimer().setTime(302);  f.simEngine.doSimStep(302);  assertEquals(2,f.qlink3.getAllVehicles().size());  f.qsim.getSimTimer().setTime(303);  f.simEngine.doSimStep(303);  assertEquals(2,f.qlink3.getAllVehicles().size());  assertEquals(2,f.qlink3.getAllNonParkedVehicles().size());  vehicles=f.qlink3.getAllNonParkedVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(f.normalVehicle,vehicles[1]);  f.qsim.getSimTimer().setTime(321);  f.simEngine.doSimStep(321);  assertEquals(2,f.qlink3.getAllVehicles().size());  assertEquals(0,f.qlink3.getAllNonParkedVehicles().size());}  }
class C{  public void subscribeToSyncBrokerService_changeServiceIdInBP() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForBroker");  VendorData brokerData=setupNewBroker("2013-01-03 08:10:00");  setCutOffDay(brokerData.getAdminKey(),1);  CustomerData brokerCustomerData=registerCustomer(brokerData,"brokerCustomer");  setDateFactory("2013-07-10 20:00:00");  VOServiceDetails brokerService=grantResalePermission(supplierData,supplService,brokerData);  brokerService=publishActivateService(brokerData,brokerService);  subscribe(brokerCustomerData.getAdminUser(),"brokerSubscription2",brokerService,"2013-08-18 00:00:00","ADMIN");  updateServiceId(supplierData,supplService,"supplSrvForBroker_new","2013-08-30 10:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("subscribeToSyncBrokerService_changeServiceIdInBP",new TestData(supplierData,brokerData));}  }
class C{  private int decodeDrcChannelExclusions(DynamicRangeControl cheDrc){  int numExclChan=0;  do {    for (int i=0; i < 7; i++) {      cheDrc.excludeMask[numExclChan++]=br.read1();    }  } while (numExclChan < MAX_CHANNELS - 7 && br.readBool());  return numExclChan / 7;}  }
class C{  private static void scanDir(File dir,int level,boolean isInWrittenToRoute) throws ServletException {  for (  File file : dir.listFiles()) {    if (file.isDirectory()) {      if (file.getName().contains(".")) {        String path=file.getAbsolutePath();        String domain=file.getName();        ConfigData configData=new ConfigData();        configData.dirPath=dir.getPath();        loadOtherDomains(path,File.separator + "other-domains.txt",configData);        loadContentFirstPatterns(path,File.separator + "content-first.txt",configData);        loadDeferPatterns(path,File.separator + "defer.txt",configData);        loadStateFullPatterns(path,File.separator + "state-full.txt",configData);        loadStateLessPatterns(path,File.separator + "state-less.txt",configData);        loadNoInlinePatterns(path,File.separator + "no-inline.txt",configData);        loadProperties(path,File.separator + "properties.txt",configData);        configData.domain=domain;        _configs.put(domain,configData);        if (configData.otherDomains != null) {          for (          String otherDomain : configData.otherDomains) {            _configs.put(otherDomain,configData);          }        }      } else {        if (isInWrittenToRoute && level < _configDirs.length) {          try {            int num=Integer.parseInt(file.getName());            if (num > _configDirs[level]) {              _configDirs[level]=num;              for (int l=level + 1; l < _configDirs.length; l++) {                _configDirs[l]=0;              }              scanDir(file,level + 1,true);              continue;            }          } catch (          NumberFormatException e) {          }        }        scanDir(file,level + 1,false);      }    }  }}  }
class C{  public void emitUnpack(){  println("\";");  nl();  println("  private static int [] zzUnpack" + name + "() {");  println("    int [] result = new int[" + numEntries + "];");  println("    int offset = 0;");  for (int i=0; i < chunks; i++) {    println("    offset = zzUnpack" + name + "("+ constName()+ "_PACKED_"+ i+ ", offset, result);");  }  println("    return result;");  println("  }");  nl();  println("  private static int zzUnpack" + name + "(String packed, int offset, int [] result) {");  println("    int i = 0;       /* index in packed string  */");  println("    int j = offset;  /* index in unpacked array */");  println("    int l = packed.length();");  println("    while (i < l) {");  println("      int count = packed.charAt(i++);");  println("      int value = packed.charAt(i++);");  if (translate == 1) {    println("      value--;");  } else   if (translate != 0) {    println("      value-= " + translate);  }  println("      do result[j++] = value; while (--count > 0);");  println("    }");  println("    return j;");  println("  }");}  }
class C{  public int isSSL(){  return sslConnection ? 1 : 0;}  }
class C{  private void $$$setupUI$$$(){  settingsPanel=new JPanel();  settingsPanel.setLayout(new GridLayoutManager(1,1,new Insets(0,0,0,0),-1,-1));  final JScrollPane scrollPane1=new JScrollPane();  scrollPane1.setVerticalScrollBarPolicy(22);  settingsPanel.add(scrollPane1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  scrollPane1.setBorder(BorderFactory.createTitledBorder("List of valid commands:"));  validCommandsEdit=new JTextArea();  validCommandsEdit.setText("");  validCommandsEdit.putClientProperty("html.disable",Boolean.TRUE);  scrollPane1.setViewportView(validCommandsEdit);}  }
class C{  public static String removeTimestampFromId(String id){  if (id != null && id.contains("#")) {    return id.substring(0,id.lastIndexOf("#"));  }  return id;}  }
class C{  public CeylonRepoManagerBuilder timeout(int timeout){  this.timeout=timeout;  return this;}  }
class C{  public static String left(String s,int width,char fillChar){  if (s.length() >= width) {    return s;  }  StringBuffer sb=new StringBuffer(width);  sb.append(s);  for (int i=width - s.length(); --i >= 0; ) {    sb.append(fillChar);  }  return sb.toString();}  }
class C{  @SideEffectFree public void severe(@Nullable String msg){  throw new RuntimeException();}  }
class C{  public short[] encodeAxis(){  short[] vals=new short[axisV.length];  for (int i=0; i < vals.length; i++) {    vals[i]=(short)(axisV[i] * 127);  }  return vals;}  }
class C{  public static UserDTO findByUsername(String username){  for (  UserDTO userDTO : users) {    if (userDTO.getLogin().equals(username)) {      return userDTO;    }  }  return null;}  }
class C{  public double median(){  final Median median=new Median();  return median.evaluate(this.vector);}  }
class C{  public Set<RawProtein<SuperFamilyHmmer3RawMatch>> parse(InputStream is) throws IOException {  Map<String,RawProtein<SuperFamilyHmmer3RawMatch>> data=new HashMap<String,RawProtein<SuperFamilyHmmer3RawMatch>>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(is));    String line;    while ((line=reader.readLine()) != null) {      Set<SuperFamilyHmmer3RawMatch> rawMatches=parseLine(line);      SuperFamilyHmmer3RawMatch rawMatch;      for (      SuperFamilyHmmer3RawMatch rawMatche : rawMatches) {        rawMatch=rawMatche;        String sequenceId=rawMatch.getSequenceIdentifier();        if (data.containsKey(sequenceId)) {          RawProtein<SuperFamilyHmmer3RawMatch> rawProtein=data.get(sequenceId);          rawProtein.addMatch(rawMatch);        } else {          RawProtein<SuperFamilyHmmer3RawMatch> rawProtein=new RawProtein<SuperFamilyHmmer3RawMatch>(sequenceId);          rawProtein.addMatch(rawMatch);          data.put(sequenceId,rawProtein);        }      }    }  }  finally {    if (reader != null) {      reader.close();    }  }  return new HashSet<RawProtein<SuperFamilyHmmer3RawMatch>>(data.values());}  }
class C{  public void addCharge(AttackAction ea){  pendingCharges.addElement(ea);  processGameEvent(new GameNewActionEvent(this,ea));}  }
class C{  public void prepareSession(MediaInput player,String remoteAddress,int remotePort,RtpInputStream rtpStream,RtpStreamListener rtpStreamListener) throws RtpException {  try {    inputStream=new VideoCaptureStream(format,player);    inputStream.open();    outputStream=new RtpOutputStream(remoteAddress,remotePort,rtpStream);    outputStream.addRtpStreamListener(rtpStreamListener);    outputStream.open();    Codec[] codecChain=MediaRegistry.generateEncodingCodecChain(format.getCodec());    processor=new Processor(inputStream,outputStream,codecChain);  } catch (  Exception e) {    throw new RtpException("Can't prepare resources");  }}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  private static void saveSettings(final JFrame parent){  ConfigManager.instance().saveSettings(parent);}  }
class C{  @Override public T execute() throws CodenvyException {  return response().getValue();}  }
class C{  @Override public FileStatus[] listStatus(Path f) throws IOException {  Path absolutePath=makeAbsolute(f);  String key=pathToKey(absolutePath);  if (key.length() > 0) {    FileMetadata meta=store.retrieveMetadata(key);    if (meta != null) {      return new FileStatus[]{newFile(meta,absolutePath)};    }  }  URI pathUri=absolutePath.toUri();  Set<FileStatus> status=new TreeSet<FileStatus>();  String priorLastKey=null;  do {    PartialListing listing=store.list(key,OSS_MAX_LISTING_LENGTH,priorLastKey,false);    for (    FileMetadata fileMetadata : listing.getFiles()) {      Path subPath=keyToPath(fileMetadata.getKey());      String relativePath=pathUri.relativize(subPath.toUri()).getPath();      if (fileMetadata.getKey().equals(key + "/")) {      } else       if (relativePath.endsWith(FOLDER_SUFFIX)) {        status.add(newDirectory(new Path("/" + relativePath.substring(0,relativePath.indexOf(FOLDER_SUFFIX)))));      } else {        Path modifiedPath=new Path("/" + subPath.toString());        status.add(newFile(fileMetadata,modifiedPath));      }    }    for (    String commonPrefix : listing.getCommonPrefixes()) {      Path subPath=keyToPath(commonPrefix);      String relativePath=pathUri.relativize(subPath.toUri()).getPath();      status.add(newDirectory(new Path("/" + relativePath)));    }    priorLastKey=listing.getPriorLastKey();  } while (priorLastKey != null);  if (status.isEmpty()) {    return new FileStatus[0];  }  return status.toArray(new FileStatus[status.size()]);}  }
class C{  public static Builder builder(KeepAliveResponse response){  return new Builder(response);}  }
class C{  public int compare(Authenticator a1,Authenticator a2){  if (a1.getWeight() < a2.getWeight()) {    return -1;  } else   if (a1.getWeight() > a2.getWeight()) {    return 1;  } else   if (!a1.getClass().equals(a2.getClass())) {    return -1;  } else {    return a1.getClass().getName().compareTo(a2.getClass().getName());  }}  }
class C{  @SuppressWarnings({"PMD.CollapsibleIfStatements"}) public static void checkIMFCompliance(List<PartitionPack> partitionPacks,IMFErrorLogger imfErrorLogger){  int previousNumberOfErrors=imfErrorLogger.getErrors().size();  for (  PartitionPack partitionPack : partitionPacks) {    if (partitionPack.hasHeaderMetadata()) {      if (partitionPack.hasEssenceContainer() || partitionPack.hasIndexTableSegments()) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("PartitionPack at offset %d : header metadata = true, essenceContainerData = %s, indexTableSegment = %s, a partition shall have only one of header metadata, essence or index table.",partitionPack.getPartitionByteOffset(),partitionPack.hasEssenceContainer(),partitionPack.hasIndexTableSegments()));      }    } else     if (partitionPack.hasEssenceContainer()) {      if (partitionPack.hasHeaderMetadata() || partitionPack.hasIndexTableSegments()) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("PartitionPack at offset %d : essenceContainerData = true, header metadata = %s, indexTableSegment = %s, a partition shall have only one of header metadata, essence or index table.",partitionPack.getPartitionByteOffset(),partitionPack.hasHeaderMetadata(),partitionPack.hasIndexTableSegments()));      }    } else     if (partitionPack.hasIndexTableSegments()) {      if (partitionPack.hasEssenceContainer() || partitionPack.hasHeaderMetadata()) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("PartitionPack at offset %d : indexTableSegment = true, essenceContainerData = %s, header metadata = %s, a partition shall have only one of header metadata, essence or index table.",partitionPack.getPartitionByteOffset(),partitionPack.hasEssenceContainer(),partitionPack.hasHeaderMetadata()));      }    }  }  if (imfErrorLogger.hasFatalErrors(previousNumberOfErrors,imfErrorLogger.getNumberOfErrors())) {    throw new MXFException(String.format("Found fatal errors in the IMFTrackFile that violate the IMF Core constraints"),imfErrorLogger);  }}  }
class C{  public static int pointAsPixel(int pt,Component component){  return pt == 0 ? 0 : getUnitConverter().pointAsPixel(pt,component);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  void assignOne(){  polynomial.assignOne();}  }
class C{  public String toString(){  return super.toString() + "    Reason Code: " + getReasonCode();}  }
class C{  private boolean isCurrentVdcIsolated(){  VirtualDataCenter localVdc=VdcUtil.getLocalVdc();  return VirtualDataCenter.ConnectionStatus.ISOLATED.equals(localVdc.getConnectionStatus());}  }
class C{  public static boolean pointInView(View v,float localX,float localY,float slop){  return localX >= -slop && localY >= -slop && localX < (v.getWidth() + slop) && localY < (v.getHeight() + slop);}  }
class C{  public String valueOf(char c){  return String.valueOf(c);}  }
class C{  @Benchmark public void reflection(){  run();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  final boolean seqNumOverflow(){  return (block.length != 0 && block[0] == (byte)0xFF && block[1] == (byte)0xFF && block[2] == (byte)0xFF && block[3] == (byte)0xFF && block[4] == (byte)0xFF && block[5] == (byte)0xFF && block[6] == (byte)0xFF);}  }
class C{  public synchronized void terminate(){  if (adaptor == null)   return;  try {    jvmmib.terminate();  } catch (  Exception x) {    log.debug("jmxremote.AdaptorBootstrap.getTargetList.terminate",x.toString());  } finally {    jvmmib=null;  }  try {    adaptor.stop();  }  finally {    adaptor=null;  }}  }
class C{  @Override public boolean isArrayContentDetail(){  return super.isArrayContentDetail();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.866 -0500",hash_original_method="5D1D071EC3D763C118809FF93B3AD7D2",hash_generated_method="54629D8B18A57A2E1721D58027EED67E") public static String copyValueOf(char[] data){  return new String(data,0,data.length);}  }
class C{  public static <T>boolean any(Iterator<T> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure closure){  BooleanClosureWrapper bcw=new BooleanClosureWrapper(closure);  for (Iterator iter=self; iter.hasNext(); ) {    if (bcw.call(iter.next()))     return true;  }  return false;}  }
class C{  void cleanupOperation(double newValue,double oldValue){}  }
class C{  private int read(byte[] buffer,int offset,int byteCount) throws IOException {  if (byteCount == 0) {    return 0;  }  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (shutdownInput) {    return -1;  }  int readCount=IoBridge.recvfrom(true,fd,buffer,offset,byteCount,0,null,false);  if (readCount == 0) {    throw new SocketTimeoutException();  }  if (readCount == -1) {    shutdownInput=true;  }  return readCount;}  }
class C{  public boolean contains(MethodOrMethodContext m){  return set.contains(m);}  }
class C{  public BaselineCompilerImpl(BaselineCompiledMethod cm,short[] genLocLoc,short[] floatLocLoc){  super(cm);  localFixedLocations=genLocLoc;  localFloatLocations=floatLocLoc;  use_nonvolatile_registers=USE_NONVOLATILE_REGISTERS && !method.hasBaselineNoRegistersAnnotation();  if (VM.VerifyAssertions)   VM._assert(T7.value() <= LAST_VOLATILE_GPR.value());  if (VM.VerifyAssertions)   VM._assert(F3.value() <= LAST_VOLATILE_FPR.value());  if (VM.VerifyAssertions)   VM._assert(S0.value() < S1.value() && S1.value() <= LAST_SCRATCH_GPR.value());  stackHeights=new int[bcodes.length()];  startLocalOffset=getInternalStartLocalOffset(method);  emptyStackOffset=getEmptyStackOffset(method);  fullStackOffset=emptyStackOffset - (method.getOperandWords() << LOG_BYTES_IN_STACKSLOT);  asm=new Assembler(bcodes.length(),shouldPrint,this);}  }
class C{  public String chompBalanced(char open,char close){  StringBuilder accum=new StringBuilder();  int depth=0;  char last=0;  do {    if (isEmpty())     break;    Character c=consume();    if (last == 0 || last != ESC) {      if (c.equals(open))       depth++; else       if (c.equals(close))       depth--;    }    if (depth > 0 && last != 0)     accum.append(c);    last=c;  } while (depth > 0);  return accum.toString();}  }
class C{  public void test_addSubjectAlternativeNameLintLbyte_array2() throws Exception {  GeneralName san0=new GeneralName(new OtherName("1.2.3.4.5",new byte[]{1,2,0,1}));  GeneralName san1=new GeneralName(1,"rfc@822.Name");  GeneralName san2=new GeneralName(2,"dNSName");  GeneralNames sans1=new GeneralNames();  sans1.addName(san0);  sans1.addName(san1);  sans1.addName(san2);  X509CertSelector selector=new X509CertSelector();  selector.addSubjectAlternativeName(0,san0.getEncodedName());  selector.addSubjectAlternativeName(1,san1.getEncodedName());  selector.addSubjectAlternativeName(2,san2.getEncodedName());  GeneralNames sans2=new GeneralNames();  sans2.addName(san0);  TestCert cert1=new TestCert(sans1);  TestCert cert2=new TestCert(sans2);  assertTrue(selector.match(cert1));  assertFalse(selector.match(cert2));  selector.setSubjectAlternativeNames(null);  GeneralName name=new GeneralName(new Name("O=Android"));  try {    selector.addSubjectAlternativeName(0,name.getEncodedName());  } catch (  IOException e) {  }}  }
class C{  public CompletableFuture<Void> close(){  CompletableFuture<Void> future=new CompletableFuture<>();  submitter.close().thenCompose(null).thenCompose(null).whenComplete(null);  return future;}  }
class C{  synchronized void enqueue(Reference<? extends T> reference){  if (head == null) {    reference.queueNext=reference;  } else {    reference.queueNext=head;  }  head=reference;  notify();}  }
class C{  @Override protected void initializeLatticeCells(){  if (Dominators.COMPUTE_POST_DOMINATORS) {    BasicBlock exit=ir.cfg.exit();    DominatorCell last=(DominatorCell)getCell(exit);    for (    final DF_LatticeCell latticeCell : cells.values()) {      DominatorCell cell=(DominatorCell)latticeCell;      if (cell == last) {        cell.addSingleBlock(cell.block);      } else {        cell.setTOP(ir);      }    }  } else {    BasicBlock start=ir.cfg.entry();    DominatorCell first=(DominatorCell)getCell(start);    for (    final DF_LatticeCell latticeCell : cells.values()) {      DominatorCell cell=(DominatorCell)latticeCell;      if (cell == first) {        cell.addSingleBlock(cell.block);      } else {        cell.setTOP(ir);      }    }  }}  }
class C{  public boolean waitForActive(long timeout){  LifecycleState state=getState();  if (state.isActive()) {    return true;  } else   if (state.isAfterActive()) {    return false;  }  long waitEnd=CurrentTime.getCurrentTimeActual() + timeout;synchronized (this) {    while ((state=_state).isBeforeActive() && CurrentTime.getCurrentTimeActual() < waitEnd) {      if (state.isActive()) {        return true;      } else       if (state.isAfterActive()) {        return false;      }      try {        long delta=waitEnd - CurrentTime.getCurrentTimeActual();        if (delta > 0) {          wait(delta);        }      } catch (      InterruptedException e) {      }    }  }  return _state.isActive();}  }
class C{  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){  return factory.getDefaultEnvelope();}  }
class C{  public ByteMemberValue(ConstPool cp){  super('B',cp);  setValue((byte)0);}  }
class C{  public void handle(short operation,String key,Object data,Node src,Node dst){  notifications.add(new UserDataNotification(operation,key,data,src,dst));}  }
class C{  private Map<String,String> projectParameters(){  Map<String,String> parameters=dataObject.getSource().getProject().getParameters();  if (parameters == null) {    parameters=new HashMap<String,String>();    dataObject.getSource().getProject().setParameters(parameters);  }  return parameters;}  }
class C{  public PSUpdateableTest(String name){  super(name);}  }
class C{  public DrawerBuilder withHeaderPadding(boolean headerPadding){  this.mHeaderPadding=headerPadding;  return this;}  }
class C{  public void deleteRowkeys(List<byte[]> rowkeys) throws IOException {  final List<Delete> deletes=new ArrayList<Delete>(rowkeys.size());  for (  byte[] rowkey : rowkeys) {    final Delete delete=createDelete(rowkey);    deletes.add(delete);  }  tbl.delete(deletes);}  }
class C{  public GuestPanel(final String id){  super(id);  final Pair<Class<? extends Page>,PageParameters> target=determineRedirectTarget();  final Shop shop=ApplicationDirector.getCurrentShop();  final boolean guestSupported=customerServiceFacade.isShopGuestCheckoutSupported(shop);  add(new GuestForm(GUEST_FORM,"B2G",target.getFirst(),target.getSecond()));  setVisible(guestSupported);}  }
class C{  public boolean saveModel(EObject model,String filename,String cwd,IImportedModelProvider importedModels){  logger.info("Saving Franca model: root file is " + filename + ", "+ (importedModels != null ? importedModels.getNModels() : 0)+ " imported models.");  if (!initResourcesRecursively(model,filename,cwd,importedModels))   return false;  return saveModelRecursively(model,filename,cwd);}  }
class C{  public final boolean isWarnEnabled(){  return m_priority.isLowerOrEqual(Priority.WARN);}  }
class C{  @Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){  int length=xLabels.size();  if (length > 0) {    boolean showLabels=mRenderer.isShowLabels();    boolean showGridY=mRenderer.isShowGridY();    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));    for (int i=0; i < length; i++) {      long label=Math.round(xLabels.get(i));      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));      if (showLabels) {        paint.setColor(mRenderer.getXLabelsColor());        canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3,paint,mRenderer.getXLabelsAngle());      }      if (showGridY) {        paint.setColor(mRenderer.getGridColor());        canvas.drawLine(xLabel,bottom,xLabel,top,paint);      }    }  }  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);}  }
class C{  protected FaultSourceImpl(){  super();}  }
class C{  synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    cleanup();    notifyProgListenerEnd(operationValue,jmri.ProgListener.FailedTimeout);  }}  }
class C{  public void connect(){  try {    if (sftp != null) {      log.debug(this,"connect","sftp is not null");    }    JSch jsch=new JSch();    jsch.getSession(username,host,port);    Session sshSession=jsch.getSession(username,host,port);    log.debug(this,"connect","Session created.");    sshSession.setPassword(password);    Properties sshConfig=new Properties();    sshConfig.put("StrictHostKeyChecking","no");    sshSession.setConfig(sshConfig);    sshSession.connect();    log.debug(this,"connect","Session connected,Opening Channel.");    Channel channel=sshSession.openChannel("sftp");    channel.connect();    sftp=(ChannelSftp)channel;    log.debug(this,"connect","Connected to " + host);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public ParseFile(File file){  this(file,null);}  }
class C{  public void dragExit(DropTargetEvent dte){}  }
class C{  protected void sendTestMessage(EasyDccMessage m){  notifyMessage(m,null);  return;}  }
class C{  public ToStringBuilder append(short value){  style.append(buffer,null,value);  return this;}  }
class C{  public void adaptModifying(JsonObject conf){  if (conf.has("environments") && conf.get("environments").isJsonArray()) {    final JsonObject newEnvironments=new JsonObject();    for (    JsonElement environmentEl : conf.get("environments").getAsJsonArray()) {      if (!environmentEl.isJsonObject()) {        throw new IllegalArgumentException("Bad format, expected environment to be json object");      }      final JsonObject env=environmentEl.getAsJsonObject();      if (!env.has("name") || env.get("name").isJsonNull()) {        throw new IllegalArgumentException("Bad format, expected environment to provide a name");      }      final String envName=env.get("name").getAsString();      newEnvironments.add(envName,asEnvironment(env,envName));    }    conf.add("environments",newEnvironments);  }}  }
class C{  @Override public boolean removeAll(Collection<?> c){  throw new UnsupportedOperationException();}  }
class C{  private boolean checkoutOrNotify(@NotNull List<GitRepository> repositories,@NotNull String reference,@Nullable String newBranch,boolean force){  GitCompoundResult compoundResult=new GitCompoundResult(myProject);  for (  GitRepository repository : repositories) {    compoundResult.append(repository,myGit.checkout(repository,reference,newBranch,force,myDetach));  }  if (compoundResult.totalSuccess()) {    return true;  }  notifyError("Couldn't checkout " + reference,compoundResult.getErrorOutputWithReposIndication());  return false;}  }
class C{  public void read(@WillClose InputStream in) throws IOException {  BufferedInputStream prefStream=null;  Properties props=new Properties();  try {    prefStream=new BufferedInputStream(in);    props.load(prefStream);  }  finally {    try {      if (prefStream != null) {        prefStream.close();      }    } catch (    IOException ioe) {    }  }  if (props.size() == 0) {    return;  }  Properties prefixlessProperties=new Properties();  for (  Map.Entry<?,?> e : props.entrySet()) {    if (e.getKey() instanceof String) {      String key=e.getKey().toString();      String value=e.getValue().toString();      prefixlessProperties.setProperty(key.replace("/instance/edu.umd.cs.findbugs.plugin.eclipse/",""),value);    } else {      prefixlessProperties.put(e.getKey(),e.getValue());    }  }  props=prefixlessProperties;  for (int i=0; i < MAX_RECENT_FILES; i++) {    String key="recent" + i;    String projectName=(String)props.get(key);    if (projectName != null) {      recentProjectsList.add(projectName);    }  }  for (  Map.Entry<?,?> e : props.entrySet()) {    String key=(String)e.getKey();    if (!key.startsWith("detector") || key.startsWith("detector_")) {      continue;    }    String detectorState=(String)e.getValue();    int pipePos=detectorState.indexOf(BOOL_SEPARATOR);    if (pipePos >= 0) {      String name=detectorState.substring(0,pipePos);      String enabled=detectorState.substring(pipePos + 1);      detectorEnablementMap.put(name,Boolean.valueOf(enabled));    }  }  if (props.get(FILTER_SETTINGS_KEY) != null) {    filterSettings=ProjectFilterSettings.fromEncodedString(props.getProperty(FILTER_SETTINGS_KEY));  } else {    String threshold=(String)props.get(DETECTOR_THRESHOLD_KEY);    if (threshold != null) {      try {        int detectorThreshold=Integer.parseInt(threshold);        setUserDetectorThreshold(detectorThreshold);      } catch (      NumberFormatException nfe) {      }    }  }  if (props.get(FILTER_SETTINGS2_KEY) != null) {    ProjectFilterSettings.hiddenFromEncodedString(filterSettings,props.getProperty(FILTER_SETTINGS2_KEY));  }  if (props.get(RUN_AT_FULL_BUILD) != null) {    runAtFullBuild=Boolean.parseBoolean(props.getProperty(RUN_AT_FULL_BUILD));  }  effort=props.getProperty(EFFORT_KEY,EFFORT_DEFAULT);  cloudId=props.getProperty(CLOUD_ID_KEY);  includeFilterFiles=readProperties(props,KEY_INCLUDE_FILTER);  excludeFilterFiles=readProperties(props,KEY_EXCLUDE_FILTER);  excludeBugsFiles=readProperties(props,KEY_EXCLUDE_BUGS);  customPlugins=readProperties(props,KEY_PLUGIN);}  }
class C{  public List(){  this(new DefaultListModel());}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZONE_OFFSET_TYPE,this);}  }
class C{  public PaymentPanelMagCard(MagCardReader cardreader,JPaymentNotifier notifier){  m_notifier=notifier;  m_cardreader=cardreader;  initComponents();  if (m_cardreader != null) {    m_jKeyFactory.addKeyListener(new KeyBarsListener());    jReset.setEnabled(true);  } else {    jReset.setEnabled(false);  }}  }
class C{  public void adjustForIllegalMove(boolean adjustClocks){  adjustForIllegalMove(null,adjustClocks);}  }
class C{  public static void rCleanupRuntimeProgram(ProgramBlock pb,String[] outputs){  if (pb instanceof WhileProgramBlock) {    WhileProgramBlock wpb=(WhileProgramBlock)pb;    for (    ProgramBlock pbc : wpb.getChildBlocks())     rCleanupRuntimeProgram(pbc,outputs);  } else   if (pb instanceof IfProgramBlock) {    IfProgramBlock ipb=(IfProgramBlock)pb;    for (    ProgramBlock pbc : ipb.getChildBlocksIfBody())     rCleanupRuntimeProgram(pbc,outputs);    for (    ProgramBlock pbc : ipb.getChildBlocksElseBody())     rCleanupRuntimeProgram(pbc,outputs);  } else   if (pb instanceof ForProgramBlock) {    ForProgramBlock fpb=(ForProgramBlock)pb;    for (    ProgramBlock pbc : fpb.getChildBlocks())     rCleanupRuntimeProgram(pbc,outputs);  } else {    ArrayList<Instruction> tmp=pb.getInstructions();    cleanupRuntimeInstructions(tmp,outputs);  }}  }
class C{  protected void init(){  for (int i=0; i < config.getFilter().getInclusions().size(); i++) {    inclusions.add(Pattern.compile(config.getFilter().getInclusions().get(i)).asPredicate());  }  for (int i=0; i < config.getFilter().getExclusions().size(); i++) {    exclusions.add(Pattern.compile(config.getFilter().getExclusions().get(i)).asPredicate());  }}  }
class C{  public IAEItemStack findAEStack(ItemStack stack){  try {    return getStorage().getItemInventory().getStorageList().findPrecise(createItemStack(stack));  } catch (  GridAccessException e) {    return null;  }}  }
class C{  public SortContainer(Comparable value,int index){  super();  m_Value=value;  m_Index=index;}  }
class C{  private void queueAlarm(Alarm alarm,TransactionBuilder builder,BluetoothGattCharacteristic characteristic){  byte[] alarmCalBytes=MiBandDateConverter.calendarToRawBytes(alarm.getAlarmCal());  byte[] alarmMessage=new byte[]{MiBandService.COMMAND_SET_TIMER,(byte)alarm.getIndex(),(byte)(alarm.isEnabled() ? 1 : 0),alarmCalBytes[0],alarmCalBytes[1],alarmCalBytes[2],alarmCalBytes[3],alarmCalBytes[4],alarmCalBytes[5],(byte)(alarm.isSmartWakeup() ? 30 : 0),(byte)alarm.getRepetitionMask()};  builder.write(characteristic,alarmMessage);}  }
class C{  public int makeNewSsaReg(){  int reg=registerCount++;  spareRegisterBase=registerCount;  onInsnsChanged();  return reg;}  }
class C{  public WarExtraClasspathWithContextTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  String noItemMovementMessage=player.getZone().getNoItemMoveMessage();  return noItemMovementMessage;}  }
class C{  @Override public void register(EValidatorRegistrar registrar){}  }
class C{  public CipherOutputStream(OutputStream os,StreamCipher cipher){  super(os);  this.streamCipher=cipher;}  }
class C{  public NioClientManager(){  try {    selector=SelectorProvider.provider().openSelector();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isSuspectMember(InternalDistributedMember m){  return this.suspectedMemberInView.containsKey(m);}  }
class C{  public void test() throws IOException {  SparseGraphMLReader reader=new SparseGraphMLReader();  Graph graph=reader.readGraph(getPackageInputDirectory() + "test.graphml.gz");  SnowballSampler<Graph,Vertex,Edge> sampler=new SnowballSampler<Graph,Vertex,Edge>();  sampler.setSeedGenerator(new FixedSizeRandomPartition<Vertex>(1,1));  sampler.run(graph);  Degree degree=Degree.getInstance();  for (int it=0; it <= sampler.getIteration(); it++) {    Set<? extends SampledVertex> vertices=SnowballPartitions.createSampledPartition(sampler.getSampledGraph().getVertices(),it);    DescriptiveStatistics distr=degree.statistics(vertices);    String reference=String.format("%1$s/k.%2$s.txt",getPackageInputDirectory(),it);    String tmp=String.format("%1$s/k.%2$s.txt",getPackageInputDirectory(),it);    StatsWriter.writeHistogram(Histogram.createHistogram(distr,new LinearDiscretizer(1.0),false),"bin","count",tmp);    assertEquals(CRCChecksum.getCRCFromFile(reference),CRCChecksum.getCRCFromFile(tmp));  }}  }
class C{  private boolean isTagChar(int ch){  return (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9' || ch == ':' || ch == '-');}  }
class C{  private int handleGH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && !isVowel(charAt(value,index - 1))) {    result.append('K');    index+=2;  } else   if (index == 0) {    if (charAt(value,index + 2) == 'I') {      result.append('J');    } else {      result.append('K');    }    index+=2;  } else   if ((index > 1 && contains(value,index - 2,1,"B","H","D")) || (index > 2 && contains(value,index - 3,1,"B","H","D")) || (index > 3 && contains(value,index - 4,1,"B","H"))) {    index+=2;  } else {    if (index > 2 && charAt(value,index - 1) == 'U' && contains(value,index - 3,1,"C","G","L","R","T")) {      result.append('F');    } else     if (index > 0 && charAt(value,index - 1) != 'I') {      result.append('K');    }    index+=2;  }  return index;}  }
class C{  public String[] parseLine(String nextLine) throws IOException {  return parseLine(nextLine,false);}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  public static com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder newBuilder(){  return new com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder();}  }
class C{  protected void assertEquals(String message,Message m1,Message m2) throws JMSException {  assertFalse(message + ": expected {" + m1+ "}, but was {"+ m2+ "}",m1 == null ^ m2 == null);  if (m1 == null) {    return;  }  assertTrue(message + ": expected {" + m1+ "}, but was {"+ m2+ "}",m1.getClass() == m2.getClass());  if (m1 instanceof TextMessage) {    assertTextMessageEqual(message,(TextMessage)m1,(TextMessage)m2);  } else {    assertEquals(message,m1,m2);  }}  }
class C{  public void writeTag(final int fieldNumber,final int wireType) throws IOException {  writeRawVarint32(WireFormatNano.makeTag(fieldNumber,wireType));}  }
class C{  final public void println(Object v){  Writer out=this.out;  if (out == null)   return;  try {    if (v == null)     out.write(_nullChars,0,_nullChars.length); else {      String s=v.toString();      out.write(s,0,s.length());    }    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public final boolean canRedoMove(){  int nVar=tree.variations().size();  return nVar > 0;}  }
class C{  protected final void TRAP_IF_IMM(Instruction s,boolean longConstant){  RegisterOperand gRes=TrapIf.getGuardResult(s);  RegisterOperand v1=(RegisterOperand)TrapIf.getVal1(s);  ConstantOperand v2=(ConstantOperand)TrapIf.getVal2(s);  ConditionOperand cond=TrapIf.getCond(s);  TrapCodeOperand tc=TrapIf.getTCode(s);  if (VM.BuildFor32Addr && longConstant) {    if (VM.VerifyAssertions) {      opt_assert((tc.getTrapCode() == RuntimeEntrypoints.TRAP_DIVIDE_BY_ZERO) && (((LongConstantOperand)v2).value == 0L));    }    RegisterOperand vr=v1.copyRO();    vr.setType(TypeReference.Int);    RegisterOperand rr=regpool.makeTempInt();    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,rr,vr)));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,rr.copy(),new RegisterOperand(regpool.getSecondReg(v1.getRegister()),TypeReference.Int))));    v1=rr.copyD2U();    v2=IC(0);  }  EMIT(MIR_TrapIf.mutate(s,IA32_TRAPIF,gRes,v1,v2,COND(cond),tc));}  }
class C{  public boolean tieneDescendientes(int tipoObjeto,String idObjeto,String idClfPadre){  int nofDocs=0, nofClasif=0;  if (TipoObjeto.DESCRIPTOR == tipoObjeto) {    nofDocs=docDocumentoDescrDBEntity.getCountDocumentosByIdClfPadre(idObjeto,idClfPadre);    nofClasif=docClasifDescrDBEntity.getCountClasificadoresByIdClfPadre(idObjeto,idClfPadre);  } else {    nofDocs=docDocumentoCFDBEntity.getCountDocumentosByIdClfPadre(idObjeto,idClfPadre);    nofClasif=docClasifCFDBEntity.getCountClasificadoresByIdClfPadre(idObjeto,idClfPadre);  }  if (nofDocs + nofClasif > 0)   return true; else   return false;}  }
class C{  static public double percDiff(Number value,Number base){  ArgumentChecking.notNull(value,"value");  ArgumentChecking.notNull(base,"base");  return percDiff(value.doubleValue(),base.doubleValue());}  }
class C{  public void cleanUp() throws SubversionException {  if (sshScript != null) {    try {      sshScript.delete();    } catch (    ServerException e) {      throw new SubversionException(e);    }  }}  }
class C{  public void removeContentProposalListener(IContentProposalListener listener){  proposalListeners.remove(listener);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static int computeOrientation(Coordinate p1,Coordinate p2,Coordinate q){  return orientationIndex(p1,p2,q);}  }
class C{  public static float[] toFloatArray(byte[] in,int offset,int length){  float[] result=new float[length / 4];  byte[] tmp=new byte[4];  for (int i=offset; i < length / 4; i++) {    System.arraycopy(in,(i - offset) * 4 + offset,tmp,0,4);    result[i]=toFloat(tmp);  }  return result;}  }
class C{  protected ComboPopup createPopup(){  return new BasicComboPopup(comboBox);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int extraGroupArgs=curNumberOfParameters - 2;  final java.util.ArrayList extraArgs=new java.util.ArrayList();  while (extraGroupArgs-- > 0)   extraArgs.add(stack.pop());  String groupMethName=getString(stack);  Object dataObj=stack.pop();  Object[] linearData;  if (dataObj instanceof java.util.Collection)   linearData=((java.util.Collection)dataObj).toArray(); else   if (dataObj instanceof java.util.Map)   linearData=((java.util.Map)dataObj).keySet().toArray(); else   linearData=(Object[])dataObj;  java.util.Map groupedMap=new java.util.LinkedHashMap();  if (linearData != null && linearData.length > 0) {    if ("GetPeopleListInShowInRoles".equals(groupMethName)) {      String[] roleStrs=getStringListObj(extraArgs.get(0));      int[] roles=new int[roleStrs.length];      for (int i=0; i < roles.length; i++)       roles[i]=Show.getRoleForString(roleStrs[i]);      for (int i=0; i < linearData.length; i++) {        Show s=getShowObj(linearData[i]);        boolean addedAny=false;        if (s != null) {          byte[] currRoles=s.getRoles();          for (int j=0; j < currRoles.length; j++) {            for (int k=0; k < roles.length; k++) {              if (roles[k] == currRoles[j]) {                String peep=s.getPerson(j);                if (peep != null && peep.length() > 0) {                  addedAny=true;                  java.util.Vector currVec=(java.util.Vector)groupedMap.get(peep);                  if (currVec == null) {                    groupedMap.put(peep,currVec=new java.util.Vector());                    currVec.add(linearData[i]);                  } else {                    if (!currVec.contains(linearData[i]))                     currVec.add(linearData[i]);                  }                }              }            }          }        }        if (!addedAny) {          java.util.Vector currVec=(java.util.Vector)groupedMap.get(null);          if (currVec == null) {            groupedMap.put(null,currVec=new java.util.Vector());            currVec.add(linearData[i]);          } else {            currVec.add(linearData[i]);          }        }      }    } else     if ("GetShowCategoriesList".equals(groupMethName)) {      sage.jep.function.PostfixMathCommandI groupMeth=(sage.jep.function.PostfixMathCommandI)Catbert.getAPI().get(groupMethName);      for (int i=0; i < linearData.length; i++) {        Show currShow=getShowObj(linearData[i]);        int numCats=(currShow == null) ? 0 : currShow.getNumCategories();        for (int m=0; m < numCats; m++) {          String currCat=currShow.getCategory(m);          if ("Movie".equals(currCat))           continue;          java.util.Vector currVec=(java.util.Vector)groupedMap.get(currCat);          if (currVec == null) {            groupedMap.put(currCat,currVec=new java.util.Vector());            currVec.add(linearData[i]);          } else {            currVec.add(linearData[i]);          }        }        if (numCats == 0 && currShow != null) {          java.util.Vector currVec=(java.util.Vector)groupedMap.get(null);          if (currVec == null) {            groupedMap.put(null,currVec=new java.util.Vector());            currVec.add(linearData[i]);          } else {            if (!currVec.contains(linearData[i]))             currVec.add(linearData[i]);          }        }      }    } else {      sage.jep.function.PostfixMathCommandI groupMeth=(sage.jep.function.PostfixMathCommandI)Catbert.getAPI().get(groupMethName);      for (int i=0; i < linearData.length; i++) {        stack.push(linearData[i]);        for (int k=extraArgs.size() - 1; k >= 0; k--)         stack.push(extraArgs.get(k));        groupMeth.setCurNumberOfParameters(1 + extraArgs.size());        groupMeth.run(stack);        Object currKey=stack.pop();        Object[] keyData;        if (currKey instanceof Object[])         keyData=(Object[])currKey; else         if (currKey instanceof java.util.Collection)         keyData=((java.util.Collection)currKey).toArray(); else         if (currKey == null)         keyData=Pooler.EMPTY_OBJECT_ARRAY; else         keyData=new Object[]{currKey};        for (int m=0; m < keyData.length; m++) {          java.util.Vector currVec=(java.util.Vector)groupedMap.get(keyData[m]);          if (currVec == null) {            groupedMap.put(keyData[m],currVec=new java.util.Vector());            currVec.add(linearData[i]);          } else {            if (!currVec.contains(linearData[i]))             currVec.add(linearData[i]);          }        }        if (keyData.length == 0) {          java.util.Vector currVec=(java.util.Vector)groupedMap.get(null);          if (currVec == null) {            groupedMap.put(null,currVec=new java.util.Vector());            currVec.add(linearData[i]);          } else {            if (!currVec.contains(linearData[i]))             currVec.add(linearData[i]);          }        }      }    }  }  return (groupedMap);}  }
class C{  public void connect() throws IOException {  if (isConnected() && tree.session.transport.tconHostName == null) {    tree.treeDisconnect(true);  }  if (isConnected()) {    return;  }  getUncPath0();  getFirstAddress();  for (; ; ) {    try {      doConnect();      return;    } catch (    SmbAuthException sae) {      throw sae;    }catch (    SmbException se) {      if (getNextAddress() == null)       throw se;      if (log.level >= 3)       se.printStackTrace(log);    }  }}  }
class C{  public Object data(int rnum){  return contents.get(rnum);}  }
class C{  public SearchSourceBuilder indexBoost(String index,float indexBoost){  if (this.indexBoost == null) {    this.indexBoost=new ObjectFloatHashMap<>();  }  this.indexBoost.put(index,indexBoost);  return this;}  }
class C{  protected ServerBase(ServerBuilder builder,SystemManager systemManager,ServerBartender selfServer) throws Exception {  Objects.requireNonNull(builder);  Objects.requireNonNull(systemManager);  Objects.requireNonNull(selfServer);  _builder=builder;  _startTime=builder.getStartTime();  _systemManager=systemManager;  _selfServer=selfServer;  _serverLocal.set(this,_systemManager.getClassLoader());  _lifecycle=new Lifecycle(log,getClass().getSimpleName() + "[]");}  }
class C{  public AbstractContainerFactoryValidator(ContainerType type){  this.type=type;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.525 -0500",hash_original_method="58F8F26763BA19E1F1B373F32B389D6B",hash_generated_method="B66047CBA5F4925ECDEC49FBC2F485FA") public boolean isRunning(){  return ((mCurFrame + -1) == 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.449 -0500",hash_original_method="049BA210A39AB5443B08132FD51D457E",hash_generated_method="67E667399F88AE435AF274DA2626B05F") public AddressImpl parseAddress(String address) throws ParseException {  AddressParser addressParser=new AddressParser(address);  return addressParser.address(true);}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(AxisLabelLocation.HIGH_END)) {    return AxisLabelLocation.HIGH_END;  }  if (this.equals(AxisLabelLocation.MIDDLE)) {    return AxisLabelLocation.MIDDLE;  }  if (this.equals(AxisLabelLocation.LOW_END)) {    return AxisLabelLocation.LOW_END;  }  return null;}  }
class C{  public SQLTimeoutException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public StateSwitchItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public UpdateRequest doc(byte[] source,int offset,int length){  safeDoc().source(source,offset,length);  return this;}  }
class C{  void dispatch(String controllerId,String instanceId,PropertyHandler paramHandler) throws Exception {  Operation operationState=paramHandler.getOperation();  FlowState flowState=paramHandler.getState();  logger.debug("Dispatching in VServerProcessor with OperationState=" + operationState + " and FlowState="+ flowState);  FlowState newState=null;  if (VSystemStatus.ERROR.equals(paramHandler.getIaasContext().getVSystemStatus())) {    newState=FlowState.FAILED;    disableExclusiveProcessing(controllerId,instanceId,paramHandler);  } else {switch (operationState) {case VSERVER_CREATION:      newState=manageCreationProcess(controllerId,instanceId,paramHandler,flowState,newState);    break;case VSERVER_MODIFICATION:  newState=manageModificationProcess(controllerId,instanceId,paramHandler,flowState,newState);break;case VSERVER_MODIFICATION_VDISK_CREATION:newState=manageModificationVDiskCreation(controllerId,instanceId,paramHandler,flowState,newState);break;case VSERVER_MODIFICATION_VDISK_DELETION:newState=manageModificationVDiskDeletion(controllerId,instanceId,paramHandler,flowState,newState);break;case VSERVER_DELETION:newState=manageDeletionProcess(controllerId,instanceId,paramHandler,flowState,newState);break;case VSERVER_ACTIVATION:newState=manageActivationProcess(controllerId,instanceId,paramHandler,flowState,newState);break;case VSERVER_OPERATION:newState=manageOperationsProcess(controllerId,instanceId,paramHandler,flowState,newState);break;default :}}if (newState != null) {paramHandler.setState(newState);logger.debug("Dispatch in VServerProcessor returns new FlowState=" + newState);} else {logger.debug("Dispatch in VServerProcessor leaves FlowState unchanged");}}  }
class C{  public ArbitraryLengthPath(Scope scope,Var subject,TupleExpr pathExpression,Var object,long minLength){  this(scope,subject,pathExpression,object,null,minLength);}  }
class C{  public boolean isRetained(){  return retained;}  }
class C{  boolean isRejoinable(){  return sessionId != null && sessionId.length() != 0 && !invalidated && isLocalAuthenticationValid();}  }
class C{  @Override public void endDrawingLayers(){  sceneBuffer.endUpdatingScene();  getSurface().invalidateVisibleRegions();}  }
class C{  public static IMethodBinding findMethodInType(ITypeBinding type,String methodName,ITypeBinding[] parameters){  if (type.isPrimitive())   return null;  IMethodBinding[] methods=type.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    if (parameters == null) {      if (methodName.equals(methods[i].getName()))       return methods[i];    } else {      if (isEqualMethod(methods[i],methodName,parameters))       return methods[i];    }  }  return null;}  }
class C{  @Override public boolean onContentLongClick(int position){  return false;}  }
class C{  public double searchresultsminscore(){  return searchresultsminscore;}  }
class C{  @Uninterruptible public boolean madeTraced(){  return madeTraced;}  }
class C{  Task<Void> synchronizeAllAuthDataAsync(){  Map<String,Map<String,String>> authData;synchronized (mutex) {    if (!isCurrentUser()) {      return Task.forResult(null);    }    authData=getAuthData();  }  List<Task<Void>> tasks=new ArrayList<>(authData.size());  for (  String authType : authData.keySet()) {    tasks.add(synchronizeAuthDataAsync(authType));  }  return Task.whenAll(tasks);}  }
class C{  public static String asString(IBinding binding){  if (binding instanceof IMethodBinding)   return asString((IMethodBinding)binding); else   if (binding instanceof ITypeBinding)   return ((ITypeBinding)binding).getQualifiedName(); else   if (binding instanceof IVariableBinding)   return asString((IVariableBinding)binding);  return binding.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static long parseLong(String text) throws DataParseException {  try {    if (text.length() > 0) {      char c=text.charAt(text.length() - 1);      if (c == 'l' || c == 'L')       text=text.substring(0,text.length() - 1);    }    return Long.parseLong(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  @SuppressWarnings("unchecked") private void readDirectory() throws AcmeException {synchronized (this) {    Date now=new Date();    if (directoryMap == null || !directoryCacheExpiry.after(now)) {      directoryMap=provider().directory(this,getServerUri());      directoryCacheExpiry=new Date(now.getTime() + 60 * 60 * 1000L);      Object meta=directoryMap.get("meta");      if (meta != null && meta instanceof Map) {        metadata=new Metadata((Map<String,Object>)meta);      } else {        metadata=new Metadata();      }      resourceMap.clear();      for (      Map.Entry<String,Object> entry : directoryMap.entrySet()) {        Resource res=Resource.parse(entry.getKey());        if (res != null) {          try {            resourceMap.put(res,new URI(entry.getValue().toString()));          } catch (          URISyntaxException ex) {            throw new AcmeProtocolException("Illegal URI for resource " + res,ex);          }        }      }    }  }}  }
class C{  private void adjustCaret(MouseEvent e){  if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0 && getDot() != -1)   moveCaret(e); else   positionCaret(e);}  }
class C{  public String urlForPOISearch(String tag,BoundingBox bb,int limit,int timeout){  StringBuilder s=new StringBuilder();  s.append(mService + "?data=");  String sBB="(" + bb.getLatSouth() + ","+ bb.getLonWest()+ ","+ bb.getLatNorth()+ ","+ bb.getLonEast()+ ")";  String data="[out:json][timeout:" + timeout + "];("+ "node["+ tag+ "]"+ sBB+ ";"+ "way["+ tag+ "]"+ sBB+ ";"+ "relation["+ tag+ "]"+ sBB+ ";"+ ");out qt center "+ limit+ " tags;";  Log.d(BonusPackHelper.LOG_TAG,"data=" + data);  s.append(URLEncoder.encode(data));  return s.toString();}  }
class C{  public static int generate(int crc,byte[] buffer){  return generate(crc,buffer,0,buffer.length);}  }
class C{  public static String appendParameter(CtClass type,String descriptor){  int i=descriptor.indexOf(')');  if (i < 0)   return descriptor; else {    StringBuffer newdesc=new StringBuffer();    newdesc.append(descriptor.substring(0,i));    toDescriptor(newdesc,type);    newdesc.append(descriptor.substring(i));    return newdesc.toString();  }}  }
class C{  public void init(long chainlength,Likelihood likelihood,MCMCOperator[] operators,Logger[] loggers){  MCMCOptions options=new MCMCOptions(chainlength);  MCMCCriterion criterion=new MCMCCriterion();  criterion.setTemperature(1);  OperatorSchedule schedule=new SimpleOperatorSchedule();  for (  MCMCOperator operator : operators)   schedule.addOperator(operator);  init(options,likelihood,Prior.UNIFORM_PRIOR,schedule,loggers);}  }
class C{  public GoToPopup(String caption,List<GoToItem> items){  this.caption=caption;  this.items=items;  initComponents();  jList1.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));  addFocusListener(this);  init();}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  private static void saveFileLog(final File file,final String filename){  if (Cfg.DEBUG) {    Check.requires(file != null,"null file");  }  if (Cfg.DEBUG) {    Check.requires(file.exists(),"file should exist");  }  if (Cfg.DEBUG) {    Check.requires(!filename.endsWith("/"),"path shouldn't end with /");  }  if (Cfg.DEBUG) {    Check.requires(!filename.endsWith("*"),"path shouldn't end with *");  }  byte[] content;  if (!file.canRead()) {    if (Cfg.DEBUG) {      Check.log(TAG + " (saveFileLog): not readable");    }    return;  }  try {    int length=(int)file.length();    if (Cfg.DEBUG) {      Check.log(TAG + " (saveFileLog) %s length: %s",filename,length);    }    final byte[] additional=Protocol.logDownloadAdditional(filename);    EvidenceBuilder ev=new EvidenceBuilder(EvidenceType.DOWNLOAD,additional);    DataInputStream is=new DataInputStream(new FileInputStream(file));    ev.write(is,length);    is.close();    ev.close();  } catch (  IOException e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (saveFileLog) Error: " + e);    }  }}  }
class C{  public static boolean fileDelete(String file){  return (new File(file)).delete();}  }
class C{  void qsort2(int left,int right){  if (right <= left) {    return;  }  int pivotIndex=pi.selectPivotIndex(ar,left,right);  pivotIndex=partition(left,right,pivotIndex);  qsortThread(left,pivotIndex - 1);  qsortThread(pivotIndex + 1,right);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ErrorInfoParser.parse");  ErrorInfoList list=new ErrorInfoList();  try {    headerName(TokenTypes.ERROR_INFO);    while (lexer.lookAhead(0) != '\n') {      do {        ErrorInfo errorInfo=new ErrorInfo();        errorInfo.setHeaderName(SIPHeaderNames.ERROR_INFO);        this.lexer.SPorHT();        this.lexer.match('<');        URLParser urlParser=new URLParser((Lexer)this.lexer);        GenericURI uri=urlParser.uriReference(true);        errorInfo.setErrorInfo(uri);        this.lexer.match('>');        this.lexer.SPorHT();        super.parse(errorInfo);        list.add(errorInfo);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');        } else         break;      } while (true);    }    return list;  }  finally {    if (debug)     dbg_leave("ErrorInfoParser.parse");  }}  }
class C{  private void testExportImportMultipleWithPause(TrackFileFormat trackFileFormat){  addTracksWithPause();  exportImport(trackFileFormat);}  }
class C{  public void explodeItems(List<ShoppingCartItem> shoppingCartItems,LocalDispatcher dispatcher){  if (dispatcher == null)   return;synchronized (cartLines) {    for (    ShoppingCartItem item : shoppingCartItems) {      try {        int thisIndex=items().indexOf(item);        List<ShoppingCartItem> explodedItems=item.explodeItem(this,dispatcher);        for (        ShoppingCartItem explodedItem : explodedItems) {          String orderItemSeqId=UtilFormatOut.formatPaddedNumber(nextItemSeq,5);          explodedItem.setOrderItemSeqId(orderItemSeqId);          addItemToEnd(explodedItem);          setItemShipGroupQty(explodedItem,BigDecimal.ONE,thisIndex);          nextItemSeq++;        }      } catch (      CartItemModifyException e) {        Debug.logError(e,"Problem exploding (unitizing) item! Item not exploded.",module);      }    }  }}  }
class C{  public boolean passesMacroFilters(List filters){  return true;}  }
class C{  public void testBug23626() throws Exception {  Class<?> clazz=this.conn.getClass();  DriverPropertyInfo[] dpi=new NonRegisteringDriver().getPropertyInfo(dbUrl,null);  StringBuilder missingSettersBuf=new StringBuilder();  StringBuilder missingGettersBuf=new StringBuilder();  Class<?>[][] argTypes={new Class[]{String.class},new Class[]{Integer.TYPE},new Class[]{Long.TYPE},new Class[]{Boolean.TYPE}};  for (int i=0; i < dpi.length; i++) {    String propertyName=dpi[i].name;    if (propertyName.equals("HOST") || propertyName.equals("PORT") || propertyName.equals("DBNAME")|| propertyName.equals("user")|| propertyName.equals("password")) {      continue;    }    StringBuilder mutatorName=new StringBuilder("set");    mutatorName.append(Character.toUpperCase(propertyName.charAt(0)));    mutatorName.append(propertyName.substring(1));    StringBuilder accessorName=new StringBuilder("get");    accessorName.append(Character.toUpperCase(propertyName.charAt(0)));    accessorName.append(propertyName.substring(1));    try {      clazz.getMethod(accessorName.toString(),(Class[])null);    } catch (    NoSuchMethodException nsme) {      missingGettersBuf.append(accessorName.toString());      missingGettersBuf.append("\n");    }    boolean foundMethod=false;    for (int j=0; j < argTypes.length; j++) {      try {        clazz.getMethod(mutatorName.toString(),argTypes[j]);        foundMethod=true;        break;      } catch (      NoSuchMethodException nsme) {      }    }    if (!foundMethod) {      missingSettersBuf.append(mutatorName);      missingSettersBuf.append("\n");    }  }  assertEquals("Missing setters for listed configuration properties.","",missingSettersBuf.toString());  assertEquals("Missing getters for listed configuration properties.","",missingSettersBuf.toString());}  }
class C{  public void removeTopologyListener(GridClientTopologyListener lsnr){  topLsnrs.remove(lsnr);}  }
class C{  public static void flattenBooleanQuery(BooleanQuery to,BooleanQuery from){  for (  BooleanClause clause : from.clauses()) {    Query cq=clause.getQuery();    cq.setBoost(cq.getBoost() * from.getBoost());    if (cq instanceof BooleanQuery && !clause.isRequired() && !clause.isProhibited()) {      flattenBooleanQuery(to,(BooleanQuery)cq);    } else {      to.add(clause);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:50.361 -0500",hash_original_method="C39E6F512687738DD8D987CDE63A2838",hash_generated_method="CB5BB89DAF09C50398A7481146A40D42") private Object writeReplace(){  return new UnmodifiableList<E>(list);}  }
class C{  private PathExpression createPathExpression(boolean twoFiltersInFirstMatcher,boolean cumulativeSecondMatcher,boolean recursive){  PathExpression pathExpression=new PathExpression();  MultipleDirectedRelationFinder finder;  PathMatcherTerm term;  finder=new MultipleDirectedRelationFinder();  finder.addRelation(MockRelation.CLASSFILE,true,false);  if (twoFiltersInFirstMatcher) {    finder.addRelation(MockRelation.DIRECTORY,true,false);  }  RelationshipSetAdapter setAdapter=new RelationshipSetAdapter("Temporary",finder,relations);  term=new PathMatcherTerm(setAdapter,recursive,false);  pathExpression.addPathMatcher(term);  finder=new MultipleDirectedRelationFinder();  finder.addRelation(MockRelation.CLASS,true,false);  setAdapter=new RelationshipSetAdapter("Temporary",finder,relations);  term=new PathMatcherTerm(setAdapter,recursive,cumulativeSecondMatcher);  pathExpression.addPathMatcher(term);  return pathExpression;}  }
class C{  public void removeTile(String tag,int id){  if (sService == null) {    Log.w(TAG,"not connected to CMStatusBarManagerService");    return;  }  String pkg=mContext.getPackageName();  if (localLOGV)   Log.v(TAG,pkg + ": remove(" + id+ ")");  try {    sService.removeCustomTileWithTag(pkg,tag,id,UserHandle.myUserId());  } catch (  RemoteException e) {    Slog.w("CMStatusBarManager","warning: no cm status bar service");  }}  }
class C{  public int doStartTag() throws JspException {  String server=null;  String port=null;  String protocol=null;  String context=null;  StringBuffer tag=null;  protocol=(String)pageContext.getServletContext().getAttribute(MvcDefs.PLUGIN_PROTOCOL);  server=(String)pageContext.getServletContext().getAttribute(MvcDefs.PLUGIN_HTTP_SERVER);  port=(String)pageContext.getServletContext().getAttribute(MvcDefs.PLUGIN_HTTP_PORT);  context=(String)((HttpServletRequest)pageContext.getRequest()).getContextPath();  if (protocol == null) {    protocol=pageContext.getRequest().getScheme();  }  if (server == null) {    server=pageContext.getRequest().getServerName();  }  if (port == null) {    port=String.valueOf(pageContext.getRequest().getServerPort());  }  tag=new StringBuffer(protocol + "://" + server);  if (logger.isDebugEnabled()) {    logger.debug("protocol: " + protocol);    logger.debug("server: " + server);    logger.debug("port: " + port);    logger.debug("context: " + context);  }  if ((port != null) && !port.equals(""))   tag.append(":" + port);  tag.append(context).append(MvcDefs.CHAR_SLASH);  String baseTag=renderBaseElement(tag);  JspWriter out=pageContext.getOut();  try {    out.write(baseTag);  } catch (  IOException e) {    pageContext.setAttribute(Globals.EXCEPTION_KEY,e,PageContext.REQUEST_SCOPE);    throw new JspException(messages.getMessage("common.io",e.toString()));  }  return EVAL_BODY_INCLUDE;}  }
class C{  public CreateExecParams withDetach(boolean detach){  this.detach=detach;  return this;}  }
class C{  @Override public boolean deletesAreDetected(int type){  debugCodeCall("deletesAreDetected",type);  return false;}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscapes(char[] cs,String r){  checkNotNull(r);  for (  char c : cs) {    addEscape(c,r);  }  return this;}  }
class C{  @Override public List<SourceRecord> poll() throws InterruptedException {  List<SourceRecord> records=new ArrayList<>();  MqttMessageProcessor message=mQueue.take();  log.debug("[{}] Polling new data from queue for '{}' topic.",mMqttClientId,mKafkaTopic);  Collections.addAll(records,message.getRecords(mKafkaTopic));  return records;}  }
class C{  public static MmContent createMmContent(Uri uri,String mimeType,Disposition disposition){  final FileDescription desc=FileFactory.getFactory().getFileDescription(uri);  MmContent content=ContentManager.createMmContent(uri,mimeType,desc.getSize(),desc.getName());  if (Disposition.RENDER == disposition) {    content.setPlayable(true);  }  return content;}  }
class C{  public OMGraphicHash(int initialCapacity){  super(initialCapacity);}  }
class C{  protected boolean validListContainsNomineeForComponent(Component component){synchronized (validList) {    for (    CandidatePair pair : validList) {      if (pair.isNominated() && pair.getParentComponent() == component) {        return true;      }    }  }  return false;}  }
class C{  public static void main(String[] args){  TestHtmlTableTags tester=new TestHtmlTableTags();  run(tester,ARGS,TABLE_TAGS_TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public static void assertTrue(boolean condition){  Assert.assertTrue(condition);}  }
class C{  public boolean isAndAfterTerminate(){  return andAfterTerminate;}  }
class C{  private void makeCurrencyTable() throws Exception {  handleTableCreation("currency table",bigquery().query(CURRENCY_TABLE_SQL.build(),bigquery().buildDestinationTable("Currency").description("Generated table of currency information.").build()));}  }
class C{  private List<CarbonDictionaryColumnMetaChunk> readDictionaryMetadataFile() throws IOException {  CarbonDictionaryMetadataReader columnMetadataReaderImpl=getDictionaryMetadataReader();  List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunkList=null;  try {    dictionaryMetaChunkList=columnMetadataReaderImpl.read();  }  finally {    columnMetadataReaderImpl.close();  }  return dictionaryMetaChunkList;}  }
class C{  @Override public String createString(int length){  checkArgument(length > 0,"String length must be positive.");  String password="";  for (int i=0; i < length; i++) {    password+=iterator.next();  }switch (rule) {case PREPEND_COUNTER:    return String.format("%04d_%s",counter++,password);case DEFAULT:default :  return password;}}  }
class C{  protected boolean isOobInlineChanged(){  return true;}  }
class C{  public HostnameVerifier hostnameVerifier(){  return hostnameVerifier;}  }
class C{  public NewAngular2ProjectWizard(){  IDialogSettings workbenchSettings=IDEWorkbenchPlugin.getDefault().getDialogSettings();  IDialogSettings section=workbenchSettings.getSection("BasicNewProjectResourceWizard");  if (section == null) {    section=workbenchSettings.addNewSection("BasicNewProjectResourceWizard");  }  setDialogSettings(section);}  }
class C{  public static HashMap<String,Object> deepMerge(HashMap<String,Object> def,JsonObject conf){  return _deepMerge(def,JSONUtil.jsonToHash(conf));}  }
class C{  public static PNCounter newPNCounter(long adds,long removes){  return new StateBasedPNCounter(adds,removes);}  }
class C{  public static StatisticsInfo composeStatsWithPrefix(StatisticsInfo info,final String fullPrefix,boolean forWriting){  ArrayList<StatisticsInfo> infos=new ArrayList<StatisticsInfo>((fullPrefix.length() + 3) * info.getConjuncts().size());  for (  StatisticsInfo conjunct : info.getConjuncts()) {    if (forWriting) {      infos.add(conjunct);    }    for (int i=0; i <= fullPrefix.length(); i++) {      infos.add(composeWithPrefix(conjunct,fullPrefix.substring(0,i),forWriting));    }    infos.add(composeWithPrefix(conjunct,fullPrefix,!forWriting));  }  return StatisticsInfo.createComposite(infos);}  }
class C{  public boolean removeCard(String tag){  Card card=mVisibleCards.get(tag);  if (card != null) {    mVisibleCards.remove(tag);    mLayout.removeView(card.getView());    return true;  } else {    card=mHiddenCards.remove(tag);    return card != null;  }}  }
class C{  public static byte toByteFromNibbles(byte[] nibbles,int start){  return toByte(nibbles[start],nibbles[start + 1]);}  }
class C{  protected boolean havePairOfUnitsIgnoringOrder(AnnotatedTypeMirror lht,AnnotationMirror u1,AnnotatedTypeMirror rht,AnnotationMirror u2){  return havePairOfUnits(lht,u1,rht,u2) || havePairOfUnits(lht,u2,rht,u1);}  }
class C{  public Bidi(String paragraph,int flags){  if (paragraph == null) {    throw new IllegalArgumentException("paragraph is null");  }  bidiBase=new BidiBase(paragraph.toCharArray(),0,null,0,paragraph.length(),flags);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  public boolean isEnd(){  return mDialEnd;}  }
class C{  public void handleUpdate(){  Timer timer=getTimer();  if (timer != null && (isAutoUpdate() || !timer.isRunning())) {    timer.restart();  }}  }
class C{  public static RecurrenceIterator createRecurrenceIterator(Recurrence recurrence,ICalDate start,TimeZone timezone){  DateValue startValue=convert(start,timezone);  return RecurrenceIteratorFactory.createRecurrenceIterator(recurrence,startValue,timezone);}  }
class C{  public final CC shrinkPrioY(int p){  ver.setShrinkPriority(p);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.334 -0500",hash_original_method="C2854E9815730958E1E62BF3BEF2BE82",hash_generated_method="4F1E1CBAC3FB5DB4FC16487167CA2CDC") public static void cursorStringToInsertHelper(Cursor cursor,String field,InsertHelper inserter,int index){  inserter.bind(index,cursor.getString(cursor.getColumnIndexOrThrow(field)));}  }
class C{  public RhythmOverlay(){  super();}  }
class C{  @TargetApi(Build.VERSION_CODES.M) @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (mPermissionRequest != null) {    mPermissionRequest.onRequestPermissionsResult(requestCode,permissions,grantResults);    mPermissionRequest=null;  }}  }
class C{  public static void writeln(char c,boolean flush){  write(c);  writelnWithFlush(flush);}  }
class C{  public static ConstantNode forPrimitive(JavaConstant constant){  assert constant.getJavaKind() != JavaKind.Object;  return forConstant(constant,null);}  }
class C{  public InlineQueryResultContact.InlineQueryResultContactBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public void abort(){  if (mManager != null)   mManager.abort();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.600 -0500",hash_original_method="6DB17C60367E4FD9EA73FA0EFFFEAB7B",hash_generated_method="293C7EAF90EF82E175C90ED5777290CA") public boolean decodeContentLength(int startIndex){  return decodeIntegerValue(startIndex);}  }
class C{  static void textUTF8ToProperties(String source,String target) throws Exception {  if (!new File(source).exists()) {    return;  }  LineNumberReader reader=new LineNumberReader(new InputStreamReader(new FileInputStream(source),"UTF-8"));  try {    SortedProperties prop=new SortedProperties();    StringBuilder buff=new StringBuilder();    String key=null;    boolean found=false;    while (true) {      String line=reader.readLine();      if (line == null) {        break;      }      line=line.trim();      if (line.length() == 0) {        continue;      }      if (line.startsWith("@")) {        if (key != null) {          prop.setProperty(key,buff.toString());          buff.setLength(0);        }        found=true;        key=line.substring(1);      } else {        if (buff.length() > 0) {          buff.append(System.getProperty("line.separator"));        }        buff.append(line);      }    }    if (found) {      prop.setProperty(key,buff.toString());    }    prop.store(target);  }  finally {    reader.close();  }}  }
class C{  public void dynInit() throws Exception {  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2163,DisplayType.TableDir);  fOrg=new VLookup("AD_Org_ID",false,false,true,orgL);  fOrg.addVetoableChangeListener(this);  MLookup docActionL=MLookupFactory.get(Env.getCtx(),m_WindowNo,3494,DisplayType.List,Env.getLanguage(Env.getCtx()),"DocAction",135,false,"AD_Ref_List.Value IN ('CO','PR')");  docAction=new VLookup("DocAction",true,false,true,docActionL);  docAction.addVetoableChangeListener(this);  docAction.setValue("PR");  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);  fBPartner=new VLookup("C_BPartner_ID",false,false,true,bpL);  fBPartner.addVetoableChangeListener(this);  lDocType.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));  cmbDocType.addItem(new KeyNamePair(MInOut.Table_ID,Msg.translate(Env.getCtx(),"M_InOut_ID")));  cmbDocType.addActionListener(this);  panel.getStatusBar().setStatusLine(Msg.getMsg(Env.getCtx(),"InvGenerateSel"));}  }
class C{  public void sendRequest(SloRequestSettings requestSettings,HttpServletResponse response) throws IOException {  Validate.notNull(requestSettings,"requestSettings");  Validate.notNull(response,"response");  Validate.notNull(getMessageStore(),"MessageStore");  Validate.notNull(getMetadataSettings(),"MetadataSettings");  String redirectUrl=getRequestUrl(requestSettings);  if (redirectUrl != null) {    response.sendRedirect(redirectUrl);  } else {    if (SamlUtils.isIdpSupportSLO(getMetadataSettings(),requestSettings)) {      logger.error("Failed to send out the SLO request!");    } else {      logger.warn(String.format("SLO end point does not exist for IDP: %s, SLO request is not sent.",requestSettings.getIDPAlias()));    }  }}  }
class C{  protected final void load_cached_value(int value_type) throws IOException {  if (_v.isEmpty()) {    load_scalar_value();  }}  }
class C{  @POST @Path("/{machineId}/{stateId}/retries/inc") @Transactional public Response incrementRetry(@PathParam("machineId") Long machineId,@PathParam("stateId") Long stateId) throws Exception {  this.workFlowExecutionController.incrementExecutionRetries(machineId,stateId);  return Response.status(Response.Status.ACCEPTED.getStatusCode()).build();}  }
class C{  public static String convertToString(int character){  return (encode(character));}  }
class C{  public Boolean isVmDirectPathGen2Supported(){  return vmDirectPathGen2Supported;}  }
class C{  public void restoreState(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  RestorableSupport restorableSupport;  try {    restorableSupport=RestorableSupport.parse(stateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  String s=restorableSupport.getStateValueAsString("imagePath");  if (s != null)   this.setImageSource(s);  RestorableSupport.StateObject so=restorableSupport.getStateObject("position");  if (so != null) {    Double lat=restorableSupport.getStateValueAsDouble(so,"latitude");    Double lon=restorableSupport.getStateValueAsDouble(so,"longitude");    Double elev=restorableSupport.getStateValueAsDouble(so,"elevation");    if (lat != null && lon != null && elev != null)     this.setPosition(Position.fromDegrees(lat,lon,elev));  }  so=restorableSupport.getStateObject("size");  if (so != null) {    Double width=restorableSupport.getStateValueAsDouble(so,"width");    Double height=restorableSupport.getStateValueAsDouble(so,"height");    if (width != null && height != null)     this.setSize(new Dimension(width.intValue(),height.intValue()));  }  s=restorableSupport.getStateValueAsString("toolTipText");  if (s != null)   this.setToolTipText(s);  so=restorableSupport.getStateObject("toolTipFont");  if (so != null) {    String name=restorableSupport.getStateValueAsString(so,"name");    Integer style=restorableSupport.getStateValueAsInteger(so,"style");    Integer size=restorableSupport.getStateValueAsInteger(so,"size");    if (name != null && style != null && size != null)     this.setToolTipFont(new Font(name,style,size));  }  s=restorableSupport.getStateValueAsString("toolTipTextColor");  if (s != null) {    Color color=RestorableSupport.decodeColor(s);    if (color != null)     this.setToolTipTextColor(color);  }  s=restorableSupport.getStateValueAsString("backgroundImagePath");  if (s != null)   this.setBackgroundImage(s);  Boolean b=restorableSupport.getStateValueAsBoolean("highlighted");  if (b != null)   this.setHighlighted(b);  Double d=restorableSupport.getStateValueAsDouble("highlightScale");  if (d != null)   this.setHighlightScale(d);  b=restorableSupport.getStateValueAsBoolean("visible");  if (b != null)   this.setVisible(b);  b=restorableSupport.getStateValueAsBoolean("showToolTip");  if (b != null)   this.setShowToolTip(b);  b=restorableSupport.getStateValueAsBoolean("alwaysOnTop");  if (b != null)   this.setAlwaysOnTop(b);  d=restorableSupport.getStateValueAsDouble("backgroundScale");  if (d != null)   this.setBackgroundScale(d);  so=restorableSupport.getStateObject(null,"avlist");  if (so != null) {    RestorableSupport.StateObject[] avpairs=restorableSupport.getAllStateObjects(so,"");    if (avpairs != null) {      for (      RestorableSupport.StateObject avp : avpairs) {        if (avp != null)         this.setValue(avp.getName(),avp.getValue());      }    }  }}  }
class C{  public synchronized void removeTemplate(DockerSlaveTemplate t){  templates.remove(t);}  }
class C{  @SuppressWarnings("unused") private int readInt2(InputStream s) throws java.io.IOException {  int i1=s.read() & 0xFF;  int i2=s.read() & 0xFF;  return i1 + (i2 << 8);}  }
class C{  default String renderValue(Generator gen,M model){  return ifelse(model.getValue(),null,EMPTY);}  }
class C{  public void start(){  super.start();  createGrids();  for (int x=0; x < gridWidth; x++)   for (int y=0; y < gridHeight; y++) {    schedule.scheduleRepeating(new Agent(x,y));  }}  }
class C{  public static LaunchSession launchSessionForAppId(String appId){  LaunchSession launchSession=new LaunchSession();  launchSession.appId=appId;  return launchSession;}  }
class C{  public Vector3D sub(Vector3D a){  return (new Vector3D(x - a.x,y - a.y,z - a.z));}  }
class C{  public static boolean isPropositionSymbolIdentifierPart(char ch){  return Character.isJavaIdentifierPart(ch);}  }
class C{  public boolean isReference(){  return value.isReference();}  }
class C{  public static long copyAndClose(InputStream in,OutputStream out) throws IOException {  try {    long len=copyAndCloseInput(in,out);    out.close();    return len;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    closeSilently(out);  }}  }
class C{  public PeriodType withDaysRemoved(){  return withFieldRemoved(3,"NoDays");}  }
class C{  public void dup2(){  mv.visitInsn(Opcodes.DUP2);}  }
class C{  public static SSLManager instance(){  if (sInstance == null) {synchronized (SSLManager.class) {      if (sInstance == null) {        sInstance=new SSLManager();      }    }  }  return sInstance;}  }
class C{  protected SelectedDenseDoubleMatrix1D(double[] elements,int[] offsets){  this(offsets.length,elements,0,1,offsets,0);}  }
class C{  public LinearEquations(double[][] m,double[] c) throws IllegalDimension {  int n=m.length;  if (m[0].length != n)   throw new IllegalDimension("Illegal system: a" + n + " by "+ m[0].length+ " matrix is not a square matrix");  if (c.length != n)   throw new IllegalDimension("Illegal system: a " + n + " by "+ n+ " matrix cannot build a system with a "+ c.length+ "-dimensional vector");  rows=new double[n][n + 1];  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++)     rows[i][j]=m[i][j];    rows[i][n]=c[i];  }}  }
class C{  protected boolean unmountObb_noThrow(String obbFilePath,boolean force){  Log.i(LOG_TAG,"doUnmountObb_noThrow() on " + obbFilePath);  assertTrue("Null path was passed in for OBB file!",obbFilePath != null);  boolean success=true;  ObbListener obbListener=new ObbListener();  assertTrue("unmountObb call failed",mSm.unmountObb(obbFilePath,force,obbListener));  boolean stateChanged=doWaitForObbStateChange(obbListener);  if (force) {    success&=stateChanged;    success&=(OnObbStateChangeListener.UNMOUNTED == obbListener.state());    success&=!mSm.isObbMounted(obbFilePath);  }  return success;}  }
class C{  public PostfixExpression createPostfixExpression(){  PostfixExpressionImpl postfixExpression=new PostfixExpressionImpl();  return postfixExpression;}  }
class C{  public void putInt(String key,int value){  preferences.edit().putInt(key,value).apply();}  }
class C{  public JMenu createJMenu(String name,String specialization) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JMenu result=new JMenu(getSpecializedString(name + TEXT_SUFFIX,specialization));  initializeJMenuItem(result,name,specialization);  List items=getSpecializedStringList(name,specialization);  Iterator it=items.iterator();  while (it.hasNext()) {    result.add(createJMenuComponent((String)it.next(),specialization));  }  return result;}  }
class C{  public static void prettyPrintVideos(List<YouTubeVideo> videos){  Log.d(TAG,"=============================================================");  Log.d(TAG,"\t\tTotal Videos: " + videos.size());  Log.d(TAG,"=============================================================\n");  Iterator<YouTubeVideo> playlistEntries=videos.iterator();  while (playlistEntries.hasNext()) {    YouTubeVideo playlistItem=playlistEntries.next();    Log.d(TAG," video name  = " + playlistItem.getTitle());    Log.d(TAG," video id    = " + playlistItem.getId());    Log.d(TAG," duration    = " + playlistItem.getDuration());    Log.d(TAG," thumbnail   = " + playlistItem.getThumbnailURL());    Log.d(TAG,"\n-------------------------------------------------------------\n");  }}  }
class C{  public Builder maskStrings(String fullyQualifiedColumnNames,int numberOfChars){  return maskStrings(fullyQualifiedColumnNames,numberOfChars,'*');}  }
class C{  @Override public void clear(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public Vector3f mulTransposeDirection(Matrix4fc mat){  return mulTransposeDirection(mat,this);}  }
class C{  private static void checkEquals(double expected,double actual,String label){  if (expected == actual) {    System.out.println("PASS: " + label + ": Expected "+ expected+ " and you gave "+ actual);  } else {    System.out.println("FAIL: " + label + ": Expected "+ expected+ " and you gave "+ actual);  }}  }
class C{  protected boolean isPlainSupported(){  return plainData != null;}  }
class C{  HueSaturationSelector(HSLSelectionModel model){  super(model);}  }
class C{  public static double mouseX(){synchronized (mouseLock) {    return mouseX;  }}  }
class C{  public GenericFeed retrievePageOfGroups(Link next) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getNextPage(next);}  }
class C{  @Override public void scale(float sx,float sy,float sz){  scaleImpl(sx,sy,sz);}  }
class C{  private void add(int pos,VALUE reference){  VALUE entry=reference;  String key=entry.getKey();  if (this.keyed.containsKey(key) && !unkeyedKey(key)) {    int oldPos=indexOf(entry);    this.keyed.remove(key);    this.ordered.remove(oldPos);    if (oldPos < pos) {      pos--;    }  }  this.keyed.put(key,entry);  if (pos >= this.ordered.size()) {    this.ordered.add(entry);  } else {    this.ordered.add(pos,entry);  }}  }
class C{  public static ChainingTextParser<ChainingTextParser<?>> parse(Reader reader){  return new ChainingTextParser<ChainingTextParser<?>>(reader);}  }
class C{  public static DateFormat inputDateFormat(){  return utc(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'",Locale.ROOT));}  }
class C{  public EventStoreBuilder tcpWriteBufferLowWaterMark(int size){  tcpSettingsBuilder.writeBufferLowWaterMark(size);  return this;}  }
class C{  public boolean endsWith(CharSeq suffix){  return this.endsWith(suffix.str);}  }
class C{  public void init(int size,int columns,OnColorSelectedListener listener){  mNumColumns=columns;  Resources res=getResources();  if (size == ColorPickerDialog.SIZE_LARGE) {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_large);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_large);  } else {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_small);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_small);  }  mOnColorSelectedListener=listener;  mDescription=res.getString(R.string.color_swatch_description);  mDescriptionSelected=res.getString(R.string.color_swatch_description_selected);}  }
class C{  public PrintInfo(String Name,int AD_Table_ID,int Record_ID){  setName(Name);  setAD_Table_ID(AD_Table_ID);  setRecord_ID(Record_ID);}  }
class C{  public IllegalComponentStateException(String s){  super(s);}  }
class C{  public SearchableTextAreaPanel(JTextArea textArea,boolean showBarByDefault){  super(new BorderLayout());  this.textArea=textArea;  createAndShowGUI(showBarByDefault);}  }
class C{  private void updateHostState(Operation operation,State hostState,AgentState agentState){  if (hostState.agentState != agentState) {    State patchState=new State();    patchState.agentState=agentState;    ServiceUtils.logInfo(this,"Agent state for host " + hostState.hostAddress + " changed from "+ hostState.agentState+ " "+ "-> "+ agentState);    TaskUtils.sendSelfPatch(this,patchState);  }  if (operation != null) {    operation.complete();  }}  }
class C{  public boolean isMaxXSet(){  return isMaxXSet(0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  FilePreferencesImpl(boolean userNode){  super(null,"");  this.userNode=userNode;  path=userNode ? USER_HOME : SYSTEM_HOME;  initPrefs();}  }
class C{  @Override public String toString(){  return TemplateLoaderUtils.getClassNameForToString(this) + "(" + "baseDir=\""+ baseDir+ "\""+ (canonicalBasePath != null ? ", canonicalBasePath=\"" + canonicalBasePath + "\"" : "")+ (emulateCaseSensitiveFileSystem ? ", emulateCaseSensitiveFileSystem=true" : "")+ ")";}  }
class C{  @Override public String basePath(){  return "/wm/staticflowentrypusher";}  }
class C{  public synchronized void removeSeries(XYSeries series){  mSeries.remove(series);}  }
class C{  public boolean wildcard(){  return wildcard;}  }
class C{  public static void main(String[] args){  SpringApplication.run(Starter.class,args);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void starCameraPhotoPreviewActivity(Context context){  Intent intent=new Intent(context,CameraPhotoPreviewActivity.class);  intent.putExtra(Const.Extras.TYPE_OF_PHOTO_INTENT,Const.PhotoIntents.CAMERA);  ((Activity)context).startActivityForResult(intent,Const.RequestCode.PHOTO_CHOOSE);}  }
class C{  public DataBuffer createDataBuffer(){  DataBuffer dataBuffer=null;  int size=scanlineStride * height;switch (dataType) {case DataBuffer.TYPE_BYTE:    dataBuffer=new DataBufferByte(size,numBanks);  break;case DataBuffer.TYPE_USHORT:dataBuffer=new DataBufferUShort(size,numBanks);break;case DataBuffer.TYPE_SHORT:dataBuffer=new DataBufferShort(size,numBanks);break;case DataBuffer.TYPE_INT:dataBuffer=new DataBufferInt(size,numBanks);break;case DataBuffer.TYPE_FLOAT:dataBuffer=new DataBufferFloat(size,numBanks);break;case DataBuffer.TYPE_DOUBLE:dataBuffer=new DataBufferDouble(size,numBanks);break;default :throw new IllegalArgumentException("dataType is not one " + "of the supported types.");}return dataBuffer;}  }
class C{  public static boolean validatePassword(char[] password,String correctHash) throws NoSuchAlgorithmException, InvalidKeySpecException {  String[] params=correctHash.split(":");  int iterations=Integer.parseInt(params[ITERATION_INDEX]);  byte[] salt=fromHex(params[SALT_INDEX]);  byte[] hash=fromHex(params[PBKDF2_INDEX]);  byte[] testHash=pbkdf2(password,salt,iterations,hash.length);  return slowEquals(hash,testHash);}  }
class C{  static void l2bBig(long[] in,int inOfs,byte[] out,int outOfs,int len){  if ((inOfs < 0) || ((in.length - inOfs) < len / 8) || (outOfs < 0)|| ((out.length - outOfs) < len)) {    throw new ArrayIndexOutOfBoundsException();  }  len+=outOfs;  while (outOfs < len) {    long i=in[inOfs++];    out[outOfs++]=(byte)(i >> 56);    out[outOfs++]=(byte)(i >> 48);    out[outOfs++]=(byte)(i >> 40);    out[outOfs++]=(byte)(i >> 32);    out[outOfs++]=(byte)(i >> 24);    out[outOfs++]=(byte)(i >> 16);    out[outOfs++]=(byte)(i >> 8);    out[outOfs++]=(byte)(i);  }}  }
class C{  public Page addItems(ArrayList<ItemStack> items){  pageItems.addAll(items);  return this;}  }
class C{  public static Codons findByName(String codeStr){  Codons codons=null;  if (codeStr.equals(GeneticCode.UNIVERSAL.getName())) {    codons=Codons.UNIVERSAL;  } else   if (codeStr.equals(GeneticCode.VERTEBRATE_MT.getName())) {    codons=Codons.VERTEBRATE_MT;  } else   if (codeStr.equals(GeneticCode.YEAST.getName())) {    codons=Codons.YEAST;  } else   if (codeStr.equals(GeneticCode.MOLD_PROTOZOAN_MT.getName())) {    codons=Codons.MOLD_PROTOZOAN_MT;  } else   if (codeStr.equals(GeneticCode.INVERTEBRATE_MT.getName())) {    codons=Codons.INVERTEBRATE_MT;  } else   if (codeStr.equals(GeneticCode.CILIATE.getName())) {    codons=Codons.CILIATE;  } else   if (codeStr.equals(GeneticCode.ECHINODERM_MT.getName())) {    codons=Codons.ECHINODERM_MT;  } else   if (codeStr.equals(GeneticCode.EUPLOTID_NUC.getName())) {    codons=Codons.EUPLOTID_NUC;  } else   if (codeStr.equals(GeneticCode.BACTERIAL.getName())) {    codons=Codons.BACTERIAL;  } else   if (codeStr.equals(GeneticCode.ALT_YEAST.getName())) {    codons=Codons.ALT_YEAST;  } else   if (codeStr.equals(GeneticCode.ASCIDIAN_MT.getName())) {    codons=Codons.ASCIDIAN_MT;  } else   if (codeStr.equals(GeneticCode.FLATWORM_MT.getName())) {    codons=Codons.FLATWORM_MT;  } else   if (codeStr.equals(GeneticCode.BLEPHARISMA_NUC.getName())) {    codons=Codons.BLEPHARISMA_NUC;  } else   if (codeStr.equals(GeneticCode.NO_STOPS.getName())) {    codons=Codons.NO_STOPS;  } else {    throw new RuntimeException("Unknown genetics code");  }  return codons;}  }
class C{  public void storageViewAddInitiators(URI vplexURI,URI exportURI,URI maskURI,List<URI> initiatorURIs,List<URI> targetURIs,boolean sharedExportMask,String stepId) throws DeviceControllerException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    ExportGroup exportGroup=getDataObject(ExportGroup.class,exportURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,vplexURI);    for (    ExportMask exportMask : exportMasks) {      if (maskURI != null && !exportMask.getId().equals(maskURI)) {        continue;      }      _log.info("Refreshing ExportMask {}",exportMask.getMaskName());      String vplexClusterName=VPlexUtil.getVplexClusterName(exportMask,vplexURI,client,_dbClient);      VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,exportMask.getMaskName());      VPlexControllerUtils.refreshExportMask(_dbClient,storageView,exportMask,VPlexControllerUtils.getTargetPortToPwwnMap(client,vplexClusterName),_networkDeviceController);      boolean updateExportMask=false;      Set<URI> exportMaskHosts=VPlexUtil.getExportMaskHosts(_dbClient,exportMask,sharedExportMask);      if (targetURIs != null && targetURIs.isEmpty() == false) {        List<PortInfo> targetPortInfos=new ArrayList<PortInfo>();        List<URI> targetsAddedToStorageView=new ArrayList<URI>();        for (        URI target : targetURIs) {          if (exportMask.getStoragePorts().contains(target.toString())) {            continue;          }          Set<String> zoningMapTargets=BlockStorageScheduler.getTargetIdsFromAssignments(exportMask.getZoningMap());          if (!zoningMapTargets.contains(target.toString())) {            continue;          }          StoragePort port=getDataObject(StoragePort.class,target,_dbClient);          PortInfo pi=new PortInfo(port.getPortNetworkId().toUpperCase().replaceAll(":",""),null,port.getPortName(),null);          targetPortInfos.add(pi);          targetsAddedToStorageView.add(target);        }        if (!targetPortInfos.isEmpty()) {          client.addTargetsToStorageView(exportMask.getMaskName(),targetPortInfos);          for (          URI target : targetsAddedToStorageView) {            exportMask.addTarget(target);            updateExportMask=true;          }        }      }      List<PortInfo> initiatorPortInfos=new ArrayList<PortInfo>();      List<String> initiatorPortWwns=new ArrayList<String>();      Map<PortInfo,Initiator> portInfosToInitiatorMap=new HashMap<PortInfo,Initiator>();      for (      URI initiatorURI : initiatorURIs) {        Initiator initiator=getDataObject(Initiator.class,initiatorURI,_dbClient);        if (!exportMaskHosts.contains(VPlexUtil.getInitiatorHost(initiator))) {          continue;        }        PortInfo portInfo=new PortInfo(initiator.getInitiatorPort().toUpperCase().replaceAll(":",""),initiator.getInitiatorNode().toUpperCase().replaceAll(":",""),initiator.getLabel(),getVPlexInitiatorType(initiator));        initiatorPortInfos.add(portInfo);        initiatorPortWwns.add(initiator.getInitiatorPort());        portInfosToInitiatorMap.put(portInfo,initiator);      }      if (!initiatorPortInfos.isEmpty()) {        String lockName=null;        boolean lockAcquired=false;        try {          StringSet portIds=exportMask.getStoragePorts();          StoragePort exportMaskPort=getDataObject(StoragePort.class,URI.create(portIds.iterator().next()),_dbClient);          String clusterId=ConnectivityUtil.getVplexClusterOfPort(exportMaskPort);          lockName=_vplexApiLockManager.getLockName(vplexURI,clusterId);          lockAcquired=_vplexApiLockManager.acquireLock(lockName,LockTimeoutValue.get(LockType.VPLEX_API_LIB));          if (!lockAcquired) {            throw VPlexApiException.exceptions.couldNotObtainConcurrencyLock(vplex.getLabel());          }          client.addInitiatorsToStorageView(exportMask.getMaskName(),vplexClusterName,initiatorPortInfos);          for (          PortInfo portInfo : initiatorPortInfos) {            Initiator initForThisPortInfo=portInfosToInitiatorMap.get(portInfo);            exportMask.addInitiator(initForThisPortInfo);            if (!exportMask.hasExistingInitiator(initForThisPortInfo)) {              exportMask.addToUserCreatedInitiators(initForThisPortInfo);            }            updateExportMask=true;          }          _log.info("attempting to fail if failure_003_late_in_add_initiator_to_mask is set");          InvokeTestFailure.internalOnlyInvokeTestFailure(InvokeTestFailure.ARTIFICIAL_FAILURE_003);          for (          String wwn : initiatorPortWwns) {            if (exportMask.hasExistingInitiator(wwn)) {              _log.info("initiator port {} has been added to the storage view {} by the user, but it " + "was already in existing initiators, removing from existing initiators.",wwn,exportMask.forDisplay());              exportMask.removeFromExistingInitiators(wwn);              updateExportMask=true;            }          }          if (updateExportMask) {            _dbClient.updateObject(exportMask);          }        }  finally {          if (lockAcquired) {            _vplexApiLockManager.releaseLock(lockName);          }        }      }    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception adding initiator to Storage View: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception adding initiator to Storage View: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.ADD_STORAGE_VIEW_INITIATOR.getName();    ServiceError serviceError=VPlexApiException.errors.storageViewAddInitiatorFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  private void placeMobileJammers(){  int numJammers=0;  Bag people=socialNetwork.getAllNodes();  for (  Object person : people) {    if (((Person)person).trustPolicy == Person.TRUST_POLICY_ADVERSARY) {      ((Person)person).trustPolicy=Person.TRUST_POLICY_ADVERSARY_JAMMER;      System.err.println("Assigned node " + ((Person)person).name + " to be a mobile jammer.");      numJammers+=1;    }    if (numJammers >= NUMBER_OF_MOBILE_JAMMERS) {      break;    }  }  if (numJammers < NUMBER_OF_MOBILE_JAMMERS) {    System.err.println("You don't have enough adversaries to establish this many mobile jammers. Please set the -na flag.");  }}  }
class C{  private void enableMinimumsForQuality(){  final int currentQuality=getDpm().getPasswordQuality(getAdmin());  final DpcPreferenceBase minLength=(DpcPreferenceBase)findPreference(Keys.MIN_LENGTH);  if (currentQuality >= DevicePolicyManager.PASSWORD_QUALITY_NUMERIC) {    minLength.clearCustomConstraint();  } else {    minLength.setCustomConstraint(R.string.not_for_password_quality);  }  final DpcPreferenceBase minLetters=(DpcPreferenceBase)findPreference(Keys.MIN_LETTERS);  final DpcPreferenceBase minNumeric=(DpcPreferenceBase)findPreference(Keys.MIN_NUMERIC);  final DpcPreferenceBase minLower=(DpcPreferenceBase)findPreference(Keys.MIN_LOWERCASE);  final DpcPreferenceBase minUpper=(DpcPreferenceBase)findPreference(Keys.MIN_UPPERCASE);  final DpcPreferenceBase minSymbols=(DpcPreferenceBase)findPreference(Keys.MIN_SYMBOLS);  final DpcPreferenceBase minNonLetter=(DpcPreferenceBase)findPreference(Keys.MIN_NONLETTER);  if (currentQuality == DevicePolicyManager.PASSWORD_QUALITY_COMPLEX) {    minLetters.clearCustomConstraint();    minNumeric.clearCustomConstraint();    minLower.clearCustomConstraint();    minUpper.clearCustomConstraint();    minSymbols.clearCustomConstraint();    minNonLetter.clearCustomConstraint();  } else {    minLetters.setCustomConstraint(R.string.not_for_password_quality);    minNumeric.setCustomConstraint(R.string.not_for_password_quality);    minLower.setCustomConstraint(R.string.not_for_password_quality);    minUpper.setCustomConstraint(R.string.not_for_password_quality);    minSymbols.setCustomConstraint(R.string.not_for_password_quality);    minNonLetter.setCustomConstraint(R.string.not_for_password_quality);  }}  }
class C{  private void menuUser(HtmlCode html,boolean isEmployee,MStore wstore){  nl(html,true);  if (isEmployee) {    a a=new a("notes.jsp");    a.setClass("menuMain");    a.addElement("Notices");    html.addElement(a);    nl(html,false);  }  a a=new a("expenses.jsp");  a.setClass("menuSub");  a.addElement("Expenses");  html.addElement(a);}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(host.length() + 8);  if (host.indexOf(':') >= 0) {    builder.append('[').append(host).append(']');  } else {    builder.append(host);  }  if (hasPort()) {    builder.append(':').append(port);  }  return builder.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.EMBEDDED ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static Collection<ClusterNode> affinityNodes(GridCacheContext ctx,AffinityTopologyVersion topOrder){  return ctx.discovery().cacheAffinityNodes(ctx.namex(),topOrder);}  }
class C{  public static String isInputBitFree(int nAddress,int bitNum){  if ((nAddress < 0) || (nAddress > 127)) {    log.error("illegal node adddress in free bit test");    return ("");  }  if ((bitNum < 1) || (bitNum > 2048)) {    log.error("illegal bit number in free bit test");    return ("");  }  jmri.Sensor s=null;  String sysName="";  sysName=makeSystemName("S",nAddress,bitNum);  s=jmri.InstanceManager.sensorManagerInstance().getBySystemName(sysName);  if (s != null) {    return (sysName);  }  String altName="";  altName=convertSystemNameToAlternate(sysName);  s=jmri.InstanceManager.sensorManagerInstance().getBySystemName(altName);  if (s != null) {    return (altName);  }  return ("");}  }
class C{  private void loadAdminUsersId(String entidad) throws Exception {  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  UsersTable usrTbl=new UsersTable();  int counter;  BasicUserImpl user;  String qual;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    tableInfo.setTableObject(usrTbl);    tableInfo.setClassName(UsersTable.class.getName());    qual=usrTbl.getLoadAminUsersQual(ISicresAdminUserDefsKeys.PRODUCT_USER);    tableInfo.setTablesMethod("getUserAdminTableNames");    tableInfo.setColumnsMethod("getAdminUserColumnNames");    rowInfo=new DynamicRow();    rowsInfo=new DynamicRows();    rowInfo.setClassName(BasicUserImpl.class.getName());    rowInfo.setValuesMethod("loadValues");    rowsInfo.add(rowInfo);    DynamicFns.selectMultiple(dbConn,qual,true,tableInfo,rowsInfo);    for (counter=0; counter < rowInfo.getRowCount(); counter++) {      user=(BasicUserImpl)rowInfo.getRow(counter);      _adminUsers.add(user);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  private CoderFactoryFromStaticMethods(Class<?> coderClazz){  this.factoryMethod=getFactoryMethod(coderClazz);  this.getComponentsMethod=getInstanceComponentsMethod(coderClazz);}  }
class C{  protected boolean isOnPipe(UUID uuid){  UserConnection userConnection=getUserConnection(uuid);  return userConnection != null && userConnection.get(ProtocolInfo.class).getPipeline().contains(requiredPipeline);}  }
class C{  public boolean coverMe(int a,int b){  if (a < 0 || b < 0) {    return false;  }  if (a == 0 || b == 0) {    return false;  }  final int c1=2 * 3 * 5;  final int c2=4 * 27 * 25;  if (a == c1 || a == c2) {    return false;  }  if (b == c1 || b == c2) {    return false;  }  if ((a % c1) != 0)   return false;  if ((b % c2) != 0)   return false;  final int c3=a / c1;  final int c4=b / c2;  if (c3 == c4)   return true;  return false;}  }
class C{  public SmsMmsMessage(Context _context,Bundle b){  context=_context;  fromAddress=b.getString(EXTRAS_FROM_ADDRESS);  messageBody=b.getString(EXTRAS_MESSAGE_BODY);  timestamp=b.getLong(EXTRAS_TIMESTAMP);  contactId=b.getString(EXTRAS_CONTACT_ID);  contactLookupKey=b.getString(EXTRAS_CONTACT_LOOKUP);  contactName=b.getString(EXTRAS_CONTACT_NAME);  unreadCount=b.getInt(EXTRAS_UNREAD_COUNT,1);  threadId=b.getLong(EXTRAS_THREAD_ID,0);  messageType=b.getInt(EXTRAS_MESSAGE_TYPE,MESSAGE_TYPE_SMS);  notify=b.getBoolean(EXTRAS_NOTIFY,false);  reminderCount=b.getInt(EXTRAS_REMINDER_COUNT,0);  messageId=b.getLong(EXTRAS_MESSAGE_ID,0);  fromEmailGateway=b.getBoolean(EXTRAS_EMAIL_GATEWAY,false);}  }
class C{  @Override public Long hsetnx(final String key,final String field,final String value){  checkIsInMultiOrPipeline();  client.hsetnx(key,field,value);  return client.getIntegerReply();}  }
class C{  protected ContinueStatementImpl(){  super();}  }
class C{  private static List<AccessorTuple> filterMissingApiFieldsImplementedBySuperGetSet(List<AccessorTuple> missingApiFields,List<TMember> concreteInheritedMembers){  return missingApiFields.stream().filter(null).collect(Collectors.toList());}  }
class C{  public void testCase21byZero(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  try {    aNumber.divideAndRemainder(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  @Override public boolean isCaseSensitive(int columnIndex){  return true;}  }
class C{  public void newRound(int roundNumber){  if (turnsIVLeftToBurn > 0) {    turnsIVLeftToBurn--;  } else   if (turnsLeftToBurn > 0) {    turnsLeftToBurn--;  }}  }
class C{  final boolean isTransient(){  return Modifier.isTransient(getModifiers());}  }
class C{  public static double metersToDegreesLongitude(double meters,double degreesLatitude){  double cosLat=FastMath.cos(FastMath.toRadians(degreesLatitude));  return metersToDegreesLatitude(meters) / cosLat;}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public static void reportImmediately(ResourceAggregator aggregator,Resource.Operation op,int tenantclass,long work,long latency){  ImmediateReport.Builder builder=ImmediateReport.newBuilder().mergeFrom(aggregator.getImmediateReportPrototype());  builder.setTimestamp(System.currentTimeMillis());  builder.setOperation(op);  builder.setTenantClass(tenantclass);  builder.setWork(work);  builder.setLatency(latency);  getReporter().reportImmediately(builder);}  }
class C{  static public Timestamp addMinutess(Timestamp dateTime,int offset){  if (dateTime == null)   dateTime=new Timestamp(System.currentTimeMillis());  if (offset == 0)   return dateTime;  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(dateTime);  cal.add(Calendar.MINUTE,offset);  return new Timestamp(cal.getTimeInMillis());}  }
class C{  private BufferedImages(){}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_TITLE_SET,stack.getUIMgrSafe().getVideoFrame().getDVDTitle() - 1,1);  return null;}  }
class C{  public static final void shuffle(float[] a,int start,int len,Random r){  for (int i=start + len; i > 1; --i) {    float t=a[i];    int j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  public GridClientNode updateNode(GridClientNodeImpl node){  lock.writeLock().lock();  try {    boolean newNode=!nodes.containsKey(node.nodeId());    GridClientNodeImpl preparedNode=prepareNode(node);    if (newNode || metricsCache || attrCache) {      Map<UUID,GridClientNodeImpl> updatedTop=new HashMap<>(nodes);      updatedTop.put(node.nodeId(),preparedNode);      nodes=updatedTop;      lastError=null;    }    if (newNode)     notifyEvents(Collections.singletonList(new TopologyEvent(true,preparedNode)));    return preparedNode;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @Override public DSSDocument signDocument(final DSSDocument document,final XAdESSignatureParameters parameters,final byte[] signatureValue) throws DSSException {  SignatureBuilder builder=parameters.getContext().getBuilder();  if (builder != null) {    builder=parameters.getContext().getBuilder();  } else {    builder=XAdESSignatureBuilder.getSignatureBuilder(parameters,document,certificateVerifier);  }  final DSSDocument dssDocument=builder.signDocument(signatureValue);  parameters.getContext().setBuilder(builder);  return dssDocument;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.249 -0500",hash_original_method="B60D02054E03A30F41C10CC4F7B33B2F",hash_generated_method="F1EA5FFDDCACED770F5C70B4F30E69A0") public final boolean owns(ConditionObject condition){  return (((condition.getTaintInt() + getTaintInt())) == 1);}  }
class C{  public void step(){  stepCounter=3;  stepSizeMultiplier=3;}  }
