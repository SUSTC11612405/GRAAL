class C{  private void prepareParams(Node parent) throws JasperException {  if (parent == null)   return;  Node.Nodes subelements=parent.getBody();  if (subelements != null) {    for (int i=0; i < subelements.size(); i++) {      Node n=subelements.getNode(i);      if (n instanceof Node.ParamAction) {        Node.Nodes paramSubElements=n.getBody();        for (int j=0; (paramSubElements != null) && (j < paramSubElements.size()); j++) {          Node m=paramSubElements.getNode(j);          if (m instanceof Node.NamedAttribute) {            generateNamedAttributeValue((Node.NamedAttribute)m);          }        }      }    }  }}  }
class C{  public THLParallelQueueExtractor(){}  }
class C{  private boolean isRemovable(Product product){  String a_path=cfgManager.getArchiveConfiguration().getIncomingConfiguration().getPath();  if (a_path.startsWith("file:/"))   a_path=a_path.substring(6);  File a_file=new File(a_path);  if (a_file.exists() && a_file.isDirectory()) {    a_path=a_file.getAbsolutePath();    String p_file=product.getPath().getPath();    return p_file.startsWith(a_path) && !product.getLocked();  }  return false;}  }
class C{  public static byte[] serializeAsByteArray(Object b) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ObjectOutputStream out=new ObjectOutputStream(bos);  try {    out.writeObject(b);  }  finally {    out.close();  }  return bos.toByteArray();}  }
class C{  public BatchFraction jdbcJobRepository(final DatasourcesFraction datasource){  return jdbcJobRepository(datasource.getKey(),datasource);}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  private void drawTick(Graphics g,Insets insets){  g.drawLine(insets.left + 2,ICON_WIDTH / 2,insets.left + 4,ICON_WIDTH - insets.bottom - 2);  g.drawLine(ICON_WIDTH - insets.right - 2,ICON_WIDTH / 3,insets.left + 4,ICON_WIDTH - insets.bottom - 2);}  }
class C{  public static void removeBreakpoint(int lineNumber,BPINSTRUCTION_STATUS status){  if (breakpoints.containsKey(lineNumber)) {    breakpoints.get(lineNumber).setBPInstructionStatus(status);    System.out.format("Breakpoint deleted at %s, line %d.\n",breakpoints.get(lineNumber).getBPInstructionLocation(),lineNumber);  }}  }
class C{  @Override public Long smove(final String srckey,final String dstkey,final String member){  checkIsInMultiOrPipeline();  client.smove(srckey,dstkey,member);  return client.getIntegerReply();}  }
class C{  public boolean isMathMode(){  return ignoreWhiteSpace;}  }
class C{  public String minInstNumTipText(){  return "The lower boundary for instances per cluster.";}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  BigDecimal toBigDecimal(int sign,int scale){  if (intLen == 0 || sign == 0)   return BigDecimal.zeroValueOf(scale);  int[] mag=getMagnitudeArray();  int len=mag.length;  int d=mag[0];  if (len > 2 || (d < 0 && len == 2))   return new BigDecimal(new BigInteger(mag,sign),INFLATED,scale,0);  long v=(len == 2) ? ((mag[1] & LONG_MASK) | (d & LONG_MASK) << 32) : d & LONG_MASK;  return BigDecimal.valueOf(sign == -1 ? -v : v,scale);}  }
class C{  public void clearAll(){  for (  IGuiModule mod : modules) {    mod.clear();  }  highlighter.reparseAll();}  }
class C{  public Collection<? extends ImmutableClassType> removeInstrumentationPoints(){  return removeInstrumentationPoints(classCache.getLookupService().findAll());}  }
class C{  @SuppressForbidden(reason="accesses jvm default tempdir as a self-test") static void selfTest() throws IOException {  try {    Path p=Files.createTempFile(null,null);    try {      Files.delete(p);    } catch (    IOException ignored) {    }  } catch (  SecurityException problem) {    throw new SecurityException("Security misconfiguration: cannot access java.io.tmpdir",problem);  }}  }
class C{  public static void d(String msg,Throwable cause){  Log.d(LOG_TAG,msg,cause);}  }
class C{  public void replace(NavigationStack stack){  check();  history.kill();  dispatcher.dispatch(add(History.NAV_TYPE_PUSH,stack));}  }
class C{  public RemoteOperationResult execute(OwnCloudClient client,FileDataStorageManager storageManager){  if (storageManager == null)   throw new IllegalArgumentException("Trying to execute a sync operation with a " + "NULL storage manager");  mStorageManager=storageManager;  return super.execute(client);}  }
class C{  public BigDecimal removeQuantity(final BigDecimal quantity) throws CartItemRequiresDeletion {  final BigDecimal notNullQty=MoneyUtils.notNull(quantity,BigDecimal.ZERO);  if (MoneyUtils.isFirstBiggerThanSecond(notNullQty,BigDecimal.ZERO)) {    if (MoneyUtils.isFirstBiggerThanOrEqualToSecond(notNullQty,this.quantity)) {      throw new CartItemRequiresDeletion();    } else {      this.quantity=this.quantity.subtract(notNullQty);    }  }  return getQty();}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  private void createRequisition(){  int noReqs=0;  String info="";  MRequisition requisition=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenish("M_WarehouseSource_ID IS NULL");  for (int i=0; i < replenishs.length; i++) {    X_T_Replenish replenish=replenishs[i];    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    if (requisition == null || requisition.getM_Warehouse_ID() != replenish.getM_Warehouse_ID()) {      requisition=new MRequisition(getCtx(),0,get_TrxName());      requisition.setAD_User_ID(getAD_User_ID());      requisition.setC_DocType_ID(p_C_DocType_ID);      requisition.setDescription(Msg.getMsg(getCtx(),"Replenishment"));      requisition.setAD_Org_ID(wh.getAD_Org_ID());      requisition.setM_Warehouse_ID(wh.getM_Warehouse_ID());      if (!requisition.save())       return;      log.fine(requisition.toString());      noReqs++;      info+=" - " + requisition.getDocumentNo();    }    MRequisitionLine line=new MRequisitionLine(requisition);    line.setM_Product_ID(replenish.getM_Product_ID());    line.setC_BPartner_ID(replenish.getC_BPartner_ID());    line.setQty(replenish.getQtyToOrder());    line.setPrice();    line.saveEx();  }  m_info="#" + noReqs + info;  log.info(m_info);}  }
class C{  public void ddpOrient(Node a,Node b,Node c,Graph graph){  Queue<Node> Q=new ArrayDeque<>();  Set<Node> V=new HashSet<>();  Node e=null;  int distance=0;  Map<Node,Node> previous=new HashMap<>();  List<Node> cParents=graph.getParents(c);  Q.offer(a);  V.add(a);  V.add(b);  previous.put(a,b);  while (!Q.isEmpty()) {    Node t=Q.poll();    if (e == null || e == t) {      e=t;      distance++;      if (distance > 0 && distance > (maxPathLength == -1 ? 1000 : maxPathLength))       return;    }    final List<Node> nodesInTo=graph.getNodesInTo(t,Endpoint.ARROW);    for (    Node d : nodesInTo) {      if (V.contains(d))       continue;      previous.put(d,t);      Node p=previous.get(t);      if (!graph.isDefCollider(d,t,p)) {        continue;      }      previous.put(d,t);      if (!graph.isAdjacentTo(d,c)) {        if (doDdpOrientation(d,a,b,c,previous,graph)) {          return;        }      }      if (cParents.contains(d)) {        Q.offer(d);        V.add(d);      }    }  }}  }
class C{  public void update(byte b){  if (preSig == null && messageLength < mBuf.length) {    mBuf[messageLength++]=b;  } else {    digest.update(b);  }}  }
class C{  public void startDrag(Cursor dragCursor,Image dragImage,Point imageOffset,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {  dragSource.startDrag(this,dragCursor,dragImage,imageOffset,transferable,dsl);}  }
class C{  protected int[] readColorTable(int ncolors){  int nbytes=3 * ncolors;  int[] tab=null;  byte[] c=new byte[nbytes];  int n=0;  try {    n=in.read(c);  } catch (  IOException e) {  }  if (n < nbytes) {    status=STATUS_FORMAT_ERROR;  } else {    tab=new int[256];    int i=0;    int j=0;    while (i < ncolors) {      int r=c[j++] & 0xff;      int g=c[j++] & 0xff;      int b=c[j++] & 0xff;      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;    }  }  return tab;}  }
class C{  private final void ensureCapacity(int minCapacity){  int oldCapacity=data.length;  if (minCapacity > oldCapacity) {    int[] oldData=data;    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity)     newCapacity=minCapacity;    data=new int[newCapacity];    System.arraycopy(oldData,0,data,0,size);  }}  }
class C{  public AbortProcessingException(String message){  super(message);}  }
class C{  public static boolean isOrgLevelOnly(int AD_Client_ID,int AD_Table_ID){  Boolean share=isShared(AD_Client_ID,AD_Table_ID);  if (share != null)   return !share.booleanValue();  return false;}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  final boolean hasEmptyAction=this.action == null || this.action.isEmptyBlock() || ((this.action.bits & IsUsefulEmptyStatement) != 0);  if (hasEmptyAction && this.elementVariable.binding.resolvedPosition == -1 && this.kind == ARRAY) {    this.collection.generateCode(this.scope,false);    return;  }switch (this.kind) {case ARRAY:    this.collection.generateCode(this.scope,true);  break;case RAW_ITERABLE:case GENERIC_ITERABLE:this.collection.generateCode(this.scope,true);break;}BranchLabel actionLabel=new BranchLabel();actionLabel.tagBits|=BranchLabel.USED;BranchLabel conditionLabel=new BranchLabel();conditionLabel.tagBits|=BranchLabel.USED;if (!hasEmptyAction) {this.action.generateCode(this.scope);}}  }
class C{  public void clearTakebackMessages(String gameId){  gameToTakebackMessages.remove(gameId);}  }
class C{  public void clipRect(int x,int y,int width,int height){  gc.clipRect(x,y,width,height);}  }
class C{  public CancelResponse Cancel(CancelRequest req) throws ServiceFaultException, ServiceResultException {  return (CancelResponse)channel.serviceRequest(req);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public BatchEnvironment(OutputStream out,ClassPath path,Main main){  super(out,new ClassPath(""),path);  this.main=main;}  }
class C{  void reset(){  target=null;  reset(true);}  }
class C{  public ScriptEngineProvider(){  if (SCRIPT_ENGINE_CACHE == null)   SCRIPT_ENGINE_CACHE=new LRUCache<String,ScriptEngine>(2,10);}  }
class C{  private void order(long qAddr){  mem.writeShort(qAddr,order);}  }
class C{  protected TransportOrder(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:32.336 -0500",hash_original_method="964842F017E82BDA48950DE2BC18315A",hash_generated_method="53C38DCE26AD4C0BE411F5C62632EEC7") public void copyFrom(Message o){  this.flags=o.flags & ~FLAGS_TO_CLEAR_ON_COPY_FROM;  this.what=o.what;  this.arg1=o.arg1;  this.arg2=o.arg2;  this.obj=o.obj;  this.replyTo=o.replyTo;  if (o.data != null) {    this.data=(Bundle)o.data.clone();  } else {    this.data=null;  }}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  public static long nanosecondsToRun(Runnable runnable){  long start=TimeKeeper.getCurrentTimeAsNanos();  runnable.run();  long end=TimeKeeper.getCurrentTimeAsNanos();  return end - start;}  }
class C{  private String determineSwcLibraryVersion(){  if (forceLibraryVersion1) {    return VersionInfo.LIB_VERSION_1_0;  }  return VersionInfo.LIB_VERSION_1_2;}  }
class C{  public void testInvalidPositionsInput() throws Exception {  String testFile="testola => the test";  Analyzer analyzer=new EnglishAnalyzer();  SolrSynonymParser parser=new SolrSynonymParser(true,true,analyzer);  expectThrows(ParseException.class,null);  analyzer.close();}  }
class C{  public boolean containsProperly(Geometry geom){  boolean isAllInPrepGeomAreaInterior=isAllTestComponentsInTargetInterior(geom);  if (!isAllInPrepGeomAreaInterior)   return false;  List lineSegStr=SegmentStringUtil.extractSegmentStrings(geom);  boolean segsIntersect=prepPoly.getIntersectionFinder().intersects(lineSegStr);  if (segsIntersect)   return false;  if (geom instanceof Polygonal) {    boolean isTargetGeomInTestArea=isAnyTargetComponentInAreaTest(geom,prepPoly.getRepresentativePoints());    if (isTargetGeomInTestArea)     return false;  }  return true;}  }
class C{  protected void appendDateValue(long date){  appendLongInteger(date);}  }
class C{  public int digestLength(){  return digest.getDigestLength();}  }
class C{  @Override public void onChapter(final PdfWriter writer,final Document document,final float paragraphPosition,final Paragraph title){}  }
class C{  private void processFullPassCode(){  if (ACTION_CHECK.equals(getIntent().getAction())) {    if (checkPassCode()) {      finish();    } else {      showErrorAndRestart(R.string.pass_code_wrong,R.string.pass_code_enter_pass_code,View.INVISIBLE);    }  } else   if (ACTION_CHECK_WITH_RESULT.equals(getIntent().getAction())) {    if (checkPassCode()) {      Intent resultIntent=new Intent();      resultIntent.putExtra(KEY_CHECK_RESULT,true);      setResult(RESULT_OK,resultIntent);      finish();    } else {      showErrorAndRestart(R.string.pass_code_wrong,R.string.pass_code_enter_pass_code,View.INVISIBLE);    }  } else   if (ACTION_REQUEST_WITH_RESULT.equals(getIntent().getAction())) {    if (!mConfirmingPassCode) {      requestPassCodeConfirmation();    } else     if (confirmPassCode()) {      savePassCodeAndExit();    } else {      showErrorAndRestart(R.string.pass_code_mismatch,R.string.pass_code_configure_your_pass_code,View.VISIBLE);    }  }}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof BasicStroke)) {    return false;  }  BasicStroke bs=(BasicStroke)obj;  if (width != bs.width) {    return false;  }  if (join != bs.join) {    return false;  }  if (cap != bs.cap) {    return false;  }  if (miterlimit != bs.miterlimit) {    return false;  }  if (dash != null) {    if (dash_phase != bs.dash_phase) {      return false;    }    if (!java.util.Arrays.equals(dash,bs.dash)) {      return false;    }  } else   if (bs.dash != null) {    return false;  }  return true;}  }
class C{  public long transferTo(long position,long count,OutputStream dst) throws IOException {  return transferTo(position,count,Channels.newChannel(dst));}  }
class C{  public boolean showPopUp(JPopupMenu popup){  return false;}  }
class C{  public static NERAnnotator buildNerAnnotator(ResourceManager nonDefaultRm,String viewName){  if (null == nerAnnotatorMap)   nerAnnotatorMap=new HashMap<>();  if (!nerAnnotatorMap.containsKey(viewName)) {    NERAnnotator ner=new NERAnnotator(nonDefaultRm,viewName);    nerAnnotatorMap.put(viewName,ner);  } else {    logger.warn("You are replacing an existing NER model for the view name '" + viewName + "'. ");  }  return nerAnnotatorMap.get(viewName);}  }
class C{  public void resize(int wid,int hgt){  graphHeight=hgt;  graphWidth=wid;  setRange(xMin,xMax,yMin,yMax);}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  public static String nameForStreamAlias(String alias){  Objects.requireNonNull(alias,"alias");  return ALIAS_PREFIX + alias;}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,Chronology chronology){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,chronology);}  }
class C{  public FunctionInputException(ParserRuleContext ctx,String i18n,Object... arguments){  super(ctx,i18n,arguments);}  }
class C{  @Override public ServiceExceptionFutureTimeout rethrow(String msg){  return new ServiceExceptionFutureTimeout(msg,this);}  }
class C{  public void pushCatch(){  push(CATCH);}  }
class C{  public void testConstrStringWithExponentWithoutPoint3(){  String a="238768787678287e-214";  int aScale=214;  BigInteger bA=new BigInteger("238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @Override public int compare(String pattern1,String pattern2){  PatternInfo info1=new PatternInfo(pattern1);  PatternInfo info2=new PatternInfo(pattern2);  if (info1.isLeastSpecific() && info2.isLeastSpecific()) {    return 0;  } else   if (info1.isLeastSpecific()) {    return 1;  } else   if (info2.isLeastSpecific()) {    return -1;  }  boolean pattern1EqualsPath=pattern1.equals(path);  boolean pattern2EqualsPath=pattern2.equals(path);  if (pattern1EqualsPath && pattern2EqualsPath) {    return 0;  } else   if (pattern1EqualsPath) {    return -1;  } else   if (pattern2EqualsPath) {    return 1;  }  if (info1.isPrefixPattern() && info2.getDoubleWildcards() == 0) {    return 1;  } else   if (info2.isPrefixPattern() && info1.getDoubleWildcards() == 0) {    return -1;  }  if (info1.getTotalCount() != info2.getTotalCount()) {    return info1.getTotalCount() - info2.getTotalCount();  }  if (info1.getLength() != info2.getLength()) {    return info2.getLength() - info1.getLength();  }  if (info1.getSingleWildcards() < info2.getSingleWildcards()) {    return -1;  } else   if (info2.getSingleWildcards() < info1.getSingleWildcards()) {    return 1;  }  if (info1.getUriVars() < info2.getUriVars()) {    return -1;  } else   if (info2.getUriVars() < info1.getUriVars()) {    return 1;  }  return 0;}  }
class C{  public void mark(){  if (markedState != null) {    Rectangle bounds=markedState.getRectangle();    bounds.grow(3,3);    bounds.width+=1;    bounds.height+=1;    setBounds(bounds);    if (getParent() == null) {      setVisible(true);      if (KEEP_ON_TOP) {        graphComponent.getGraphControl().add(this,0);      } else {        graphComponent.getGraphControl().add(this);      }    }    repaint();    eventSource.fireEvent(new mxEventObject(mxEvent.MARK,"state",markedState));  }}  }
class C{  public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  private void processExceptionSensorData(EntityManager entityManager,InvocationSequenceData invData,InvocationSequenceData topInvocationParent){  if (CollectionUtils.isNotEmpty(invData.getExceptionSensorDataObjects())) {    for (    ExceptionSensorData exceptionData : invData.getExceptionSensorDataObjects()) {      if (exceptionData.getExceptionEvent() == ExceptionEvent.CREATED) {        topInvocationParent.setNestedExceptions(Boolean.TRUE);        exceptionMessageCmrProcessor.process(exceptionData,entityManager);        exceptionData.addInvocationParentId(topInvocationParent.getId());        passToChainedProcessors(exceptionData,entityManager);      }    }  }}  }
class C{  public static String replace(String str,String old_str,String new_str){  int o=0;  StringBuilder buf=new StringBuilder();  for (int i=str.indexOf(old_str); i > -1; i=str.indexOf(old_str,i + 1)) {    if (i > o) {      buf.append(str.substring(o,i));    }    buf.append(new_str);    o=i + old_str.length();  }  buf.append(str.substring(o,str.length()));  return buf.toString();}  }
class C{  public boolean isCaretDecodingEnabled(){  return reader.isCaretDecodingEnabled();}  }
class C{  private void removeFromLists(int analysisId,GefaehrdungsUmsetzung gef) throws CommandException {  FindRiskAnalysisListsByParentID command=new FindRiskAnalysisListsByParentID(analysisId);  getCommandService().executeCommand(command);  FinishedRiskAnalysisLists lists=command.getFoundLists();  if (lists != null) {    lists.removeGefaehrdungCompletely(gef);  }}  }
class C{  public Model rotate(float rotation,float x,float y,float z,Vec3UV center){  ROTATION_MATRIX.setRotations((float)Math.toRadians(x * rotation),(float)Math.toRadians(y * rotation),(float)Math.toRadians(z * rotation));  for (  Box box : this.modelBoxes) {    for (    Quad quad : box.quads) {      for (int i=0; i < 4; i++) {        Vec3UV vec=quad.vertices[i];        Vec3UV rotatedPoint=null;        rotatedPoint=ROTATION_MATRIX.transformVec(vec,center);        vec.x=rotatedPoint.x;        vec.y=rotatedPoint.y;        vec.z=rotatedPoint.z;      }    }  }  Vec3UV rotatedFwdVec=ROTATION_MATRIX.transformVec(this.fwdVec,center);  this.fwdVec.x=rotatedFwdVec.x;  this.fwdVec.y=rotatedFwdVec.y;  this.fwdVec.z=rotatedFwdVec.z;  Vec3UV rotatedUpVec=ROTATION_MATRIX.transformVec(this.upVec,center);  this.upVec.x=rotatedUpVec.x;  this.upVec.y=rotatedUpVec.y;  this.upVec.z=rotatedUpVec.z;  return this;}  }
class C{  public boolean isSessionIdValid(){  return sessionId == null || sessionIdPattern != null;}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  int end=m_length + m_start;  char[] buf=new char[m_length];  FastStringBuffer fsb=fsb();  boolean edit=false;  int d=0;  boolean pres=false;  for (int s=m_start; s < end; s++) {    char c=fsb.charAt(s);    if (isSpace(c)) {      if (!pres) {        if (' ' != c) {          edit=true;        }        buf[d++]=' ';        if (doublePunctuationSpaces && (d != 0)) {          char prevChar=buf[d - 1];          if (!((prevChar == '.') || (prevChar == '!') || (prevChar == '?'))) {            pres=true;          }        } else {          pres=true;        }      } else {        edit=true;        pres=true;      }    } else {      buf[d++]=c;      pres=false;    }  }  if (trimTail && 1 <= d && ' ' == buf[d - 1]) {    edit=true;    d--;  }  int start=0;  if (trimHead && 0 < d && ' ' == buf[0]) {    edit=true;    start++;  }  XMLStringFactory xsf=XMLStringFactoryImpl.getFactory();  return edit ? xsf.newstr(buf,start,d - start) : this;}  }
class C{  public SassColor(double red,double green,double blue){  this(red,green,blue,1);}  }
class C{  private String shortenUpdateLabel(String update){  return "u" + Integer.parseInt(update.substring(6));}  }
class C{  private void checkInEdgesAreInLoop(BasicBlock block) throws NonRegularLoopException {  Enumeration<BasicBlock> block_inEdges=block.getIn();  while (block_inEdges.hasMoreElements()) {    BasicBlock curEdgeBB=block_inEdges.nextElement();    if ((!isInLoop(curEdgeBB)) && (block != header)) {      throw new NonRegularLoopException("Parallelization giving up: edge into a block in the loop from a block outside of the loop, and the block wasn't the loop header" + ((block == exit) ? " (it was the exit block though)" : ""));    }  }}  }
class C{  public GrayscaleMatrix(final int[] pixels,final int width,final int height){  this(width,height);  if (width * height != pixels.length) {    throw new IllegalArgumentException("Pixels array does not match specified width and height!");  }  for (int i=0; i < this.data.length; i++) {    this.data[i]=convertRGBToGrayscale(pixels[i]);  }}  }
class C{  public String readHeaders() throws IOException {  int i=0;  byte b;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  int size=0;  while (i < HEADER_SEPARATOR.length) {    try {      b=readByte();    } catch (    IOException e) {      throw e;    }    if (++size > HEADER_PART_SIZE_MAX) {      String logMEssage=format("Header section has more than %s bytes (maybe it is not properly terminated)",Integer.valueOf(HEADER_PART_SIZE_MAX));      throw new FileUploadException(MalformedStreamException,logMEssage);    }    if (b == HEADER_SEPARATOR[i]) {      i++;    } else {      i=0;    }    baos.write(b);  }  String headers=null;  if (headerEncoding != null) {    try {      headers=baos.toString(headerEncoding);    } catch (    UnsupportedEncodingException e) {      headers=baos.toString();    }  } else {    headers=baos.toString();  }  return headers;}  }
class C{  public UiBuilder<T> enabled(){  this.control.setEnabled(true);  return this;}  }
class C{  public static int EDESTADDRREQ(){  return Errno.EDESTADDRREQ.intValue();}  }
class C{  public void reset(){  this.buffer.setLength(0);}  }
class C{  public Graph search(){  this.logger.log("info","Starting VCCPC algorithm");  this.logger.log("info","Independence test = " + getIndependenceTest() + ".");  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  Vcfas fas=new Vcfas(getIndependenceTest());  definitelyNonadjacencies=new HashSet<>();  markovInAllPatterns=new HashSet<>();  long startTime=System.currentTimeMillis();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List<Node> allNodes=getIndependenceTest().getVariables();  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  fas.setVerbose(verbose);  graph=fas.search();  apparentlyNonadjacencies=fas.getApparentlyNonadjacencies();  if (isDoOrientation()) {    if (verbose) {      System.out.println("CPC orientation...");    }    SearchGraphUtils.pcOrientbk(knowledge,graph,allNodes);    orientUnshieldedTriples(knowledge,getIndependenceTest(),getDepth());    MeekRules meekRules=new MeekRules();    meekRules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);    meekRules.setKnowledge(knowledge);    meekRules.orientImplied(graph);  }  List<Triple> ambiguousTriples=new ArrayList(graph.getAmbiguousTriples());  int[] dims=new int[ambiguousTriples.size()];  for (int i=0; i < ambiguousTriples.size(); i++) {    dims[i]=2;  }  List<Graph> patterns=new ArrayList<>();  Map<Graph,List<Triple>> newColliders=new IdentityHashMap<>();  Map<Graph,List<Triple>> newNonColliders=new IdentityHashMap<>();  CombinationGenerator generator=new CombinationGenerator(dims);  int[] combination;  while ((combination=generator.next()) != null) {    Graph _graph=new EdgeListGraph(graph);    newColliders.put(_graph,new ArrayList<Triple>());    newNonColliders.put(_graph,new ArrayList<Triple>());    for (    Graph graph : newColliders.keySet()) {    }    for (int k=0; k < combination.length; k++) {      Triple triple=ambiguousTriples.get(k);      _graph.removeAmbiguousTriple(triple.getX(),triple.getY(),triple.getZ());      if (combination[k] == 0) {        newColliders.get(_graph).add(triple);        Node x=triple.getX();        Node y=triple.getY();        Node z=triple.getZ();        _graph.setEndpoint(x,y,Endpoint.ARROW);        _graph.setEndpoint(z,y,Endpoint.ARROW);      }      if (combination[k] == 1) {        newNonColliders.get(_graph).add(triple);      }    }    patterns.add(_graph);  }  List<Graph> _patterns=new ArrayList<>(patterns);  GRAPH:   for (  Graph graph : new ArrayList<>(patterns)) {    List<Triple> colliders=newColliders.get(graph);    List<Triple> nonColliders=newNonColliders.get(graph);    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(x) || (graph.getEdge(y,z).pointsTowards(z))) {        patterns.remove(graph);        continue GRAPH;      }    }    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      graph.setEndpoint(x,y,Endpoint.ARROW);      graph.setEndpoint(z,y,Endpoint.ARROW);    }    for (    Triple triple : nonColliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(y)) {        graph.removeEdge(y,z);        graph.addDirectedEdge(y,z);      }      if (graph.getEdge(y,z).pointsTowards(y)) {        graph.removeEdge(x,y);        graph.addDirectedEdge(y,x);      }    }    for (    Edge edge : graph.getEdges()) {      if (Edges.isBidirectedEdge(edge)) {        patterns.remove(graph);        continue GRAPH;      }    }    MeekRules rules=new MeekRules();    rules.orientImplied(graph);    if (graph.existsDirectedCycle()) {      patterns.remove(graph);      continue GRAPH;    }  }  MARKOV:   for (  Edge edge : apparentlyNonadjacencies.keySet()) {    Node x=edge.getNode1();    Node y=edge.getNode2();    for (    Graph _graph : new ArrayList<>(patterns)) {      List<Node> boundaryX=new ArrayList<>(boundary(x,_graph));      List<Node> boundaryY=new ArrayList<>(boundary(y,_graph));      List<Node> futureX=new ArrayList<>(future(x,_graph));      List<Node> futureY=new ArrayList<>(future(y,_graph));      if (y == x) {        continue;      }      if (boundaryX.contains(y) || boundaryY.contains(x)) {        continue;      }      IndependenceTest test=independenceTest;      if (!futureX.contains(y)) {        if (test.isIndependent(x,y,boundaryX)) {          if (!futureY.contains(x)) {            if (test.isIndependent(y,x,boundaryY)) {              definitelyNonadjacencies.add(edge);              continue MARKOV;            }          }        }      }    }  }  for (  Edge edge : definitelyNonadjacencies) {    if (apparentlyNonadjacencies.keySet().contains(edge)) {      apparentlyNonadjacencies.keySet().remove(edge);    }  }  System.out.println("Definitely Nonadjacencies:");  for (  Edge edge : definitelyNonadjacencies) {    System.out.println(edge);  }  System.out.println("markov in all patterns:" + markovInAllPatterns);  System.out.println("patterns:" + patterns);  System.out.println("Apparently Nonadjacencies:");  for (  Edge edge : apparentlyNonadjacencies.keySet()) {    System.out.println(edge);  }  System.out.println("Definitely Nonadjacencies:");  for (  Edge edge : definitelyNonadjacencies) {    System.out.println(edge);  }  TetradLogger.getInstance().log("apparentlyNonadjacencies","\n Apparent Non-adjacencies" + apparentlyNonadjacencies);  TetradLogger.getInstance().log("definitelyNonadjacencies","\n Definite Non-adjacencies" + definitelyNonadjacencies);  TetradLogger.getInstance().log("patterns","Disambiguated Patterns: " + patterns);  TetradLogger.getInstance().log("graph","\nReturning this graph: " + graph);  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - startTime;  TetradLogger.getInstance().log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  TetradLogger.getInstance().log("info","Finishing CPC algorithm.");  logTriples();  TetradLogger.getInstance().flush();  return graph;}  }
class C{  public SamRegionRestriction(RegionRestriction restriction){  super(restriction.getSequenceName(),restriction.getStart(),restriction.getEnd());}  }
class C{  public static <A>double[] alphaBetaPWM(A data,NumberArrayAdapter<?,A> adapter,final int nmom){  final int n=adapter.size(data);  final double[] xmom=new double[nmom << 1];  double aweight=1. / n, bweight=aweight;  for (int i=0; i < n; i++) {    final double val=adapter.getDouble(data,i);    xmom[0]+=aweight * val;    xmom[1]+=bweight * val;    for (int j=1, k=2; j < nmom; j++, k+=2) {      aweight*=(n - i - j + 1) / (n - j + 1);      bweight*=(i - j + 1) / (n - j + 1);      xmom[k + 1]+=aweight * val;      xmom[k + 1]+=bweight * val;    }  }  return xmom;}  }
class C{  public static char nextChar(){  return (char)(nextInt(32,128));}  }
class C{  private String[] cleanTextForVTT(Caption current){  String[] lines;  String text=current.content;  lines=text.split("<br />");  for (int i=0; i < lines.length; i++) {    lines[i]=lines[i].replaceAll("<.*?>","");  }  return lines;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.459 -0500",hash_original_method="7B4A8A6A74B23286EE840983B92045A0",hash_generated_method="1E4226B8F66BE4AA92E3E4C4EF7174D4") public void proceed(String username,String password){}  }
class C{  protected static String stringProperty(String name){  return stringProperty(name,null);}  }
class C{  public boolean textboxKeyTyped(char p_146201_1_,int p_146201_2_){  if (!field_146213_o)   return false; else switch (p_146201_1_) {case 1:    func_146202_e();  func_146199_i(0);return true;case 3:GuiScreen.setClipboardString(func_146207_c());return true;case 22:if (field_146226_p) func_146191_b(GuiScreen.getClipboardString());return true;case 24:GuiScreen.setClipboardString(func_146207_c());if (field_146226_p) func_146191_b("");return true;default :switch (p_146201_2_) {case 14:if (GuiScreen.isCtrlKeyDown()) {if (field_146226_p) func_146177_a(-1);} else if (field_146226_p) func_146175_b(-1);return true;case 199:if (GuiScreen.isShiftKeyDown()) func_146199_i(0); else func_146196_d();return true;case 203:if (GuiScreen.isShiftKeyDown()) {if (GuiScreen.isCtrlKeyDown()) func_146199_i(func_146183_a(-1,func_146186_n())); else func_146199_i(func_146186_n() - 1);} else if (GuiScreen.isCtrlKeyDown()) func_146190_e(func_146187_c(-1)); else func_146182_d(-1);return true;case 205:if (GuiScreen.isShiftKeyDown()) {if (GuiScreen.isCtrlKeyDown()) func_146199_i(func_146183_a(1,func_146186_n())); else func_146199_i(func_146186_n() + 1);} else if (GuiScreen.isCtrlKeyDown()) func_146190_e(func_146187_c(1)); else func_146182_d(1);return true;case 207:if (GuiScreen.isShiftKeyDown()) func_146199_i(field_146216_j.length()); else func_146202_e();return true;case 211:if (GuiScreen.isCtrlKeyDown()) {if (field_146226_p) func_146177_a(1);} else if (field_146226_p) func_146175_b(1);return true;default :if (ChatAllowedCharacters.isAllowedCharacter(p_146201_1_)) {if (field_146226_p) func_146191_b(Character.toString(p_146201_1_));return true;} else return false;}}}  }
class C{  public static int truncatedCompareTo(final Date date1,final Date date2,final int field){  final Date truncatedDate1=truncate(date1,field);  final Date truncatedDate2=truncate(date2,field);  return truncatedDate1.compareTo(truncatedDate2);}  }
class C{  public static void halt(final JFrame parent,final IDebugger debugger){  checkArguments(parent,debugger);  if (!debugger.isConnected()) {    return;  }  try {    debugger.halt();  } catch (  final DebugExceptionWrapper e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00083: " + "Could not send halt command";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the halt command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  @Override public void runTool(String... args) throws SQLException {  isWindows=Utils.getProperty("os.name","").startsWith("Windows");  boolean tcpStart=false, pgStart=false, webStart=false, toolStart=false;  boolean browserStart=false;  boolean startDefaultServers=true;  boolean printStatus=args != null && args.length > 0;  String driver=null, url=null, user=null, password=null;  boolean tcpShutdown=false, tcpShutdownForce=false;  String tcpPassword="";  String tcpShutdownServer="";  for (int i=0; args != null && i < args.length; i++) {    String arg=args[i];    if (arg == null) {      continue;    } else     if ("-?".equals(arg) || "-help".equals(arg)) {      showUsage();      return;    } else     if ("-url".equals(arg)) {      startDefaultServers=false;      url=args[++i];    } else     if ("-driver".equals(arg)) {      driver=args[++i];    } else     if ("-user".equals(arg)) {      user=args[++i];    } else     if ("-password".equals(arg)) {      password=args[++i];    } else     if (arg.startsWith("-web")) {      if ("-web".equals(arg)) {        startDefaultServers=false;        webStart=true;      } else       if ("-webAllowOthers".equals(arg)) {      } else       if ("-webDaemon".equals(arg)) {      } else       if ("-webSSL".equals(arg)) {      } else       if ("-webPort".equals(arg)) {        i++;      } else {        showUsageAndThrowUnsupportedOption(arg);      }    } else     if ("-tool".equals(arg)) {      startDefaultServers=false;      webStart=true;      toolStart=true;    } else     if ("-browser".equals(arg)) {      startDefaultServers=false;      webStart=true;      browserStart=true;    } else     if (arg.startsWith("-tcp")) {      if ("-tcp".equals(arg)) {        startDefaultServers=false;        tcpStart=true;      } else       if ("-tcpAllowOthers".equals(arg)) {      } else       if ("-tcpDaemon".equals(arg)) {      } else       if ("-tcpSSL".equals(arg)) {      } else       if ("-tcpPort".equals(arg)) {        i++;      } else       if ("-tcpPassword".equals(arg)) {        tcpPassword=args[++i];      } else       if ("-tcpShutdown".equals(arg)) {        startDefaultServers=false;        tcpShutdown=true;        tcpShutdownServer=args[++i];      } else       if ("-tcpShutdownForce".equals(arg)) {        tcpShutdownForce=true;      } else {        showUsageAndThrowUnsupportedOption(arg);      }    } else     if (arg.startsWith("-pg")) {      if ("-pg".equals(arg)) {        startDefaultServers=false;        pgStart=true;      } else       if ("-pgAllowOthers".equals(arg)) {      } else       if ("-pgDaemon".equals(arg)) {      } else       if ("-pgPort".equals(arg)) {        i++;      } else {        showUsageAndThrowUnsupportedOption(arg);      }    } else     if ("-properties".equals(arg)) {      i++;    } else     if ("-trace".equals(arg)) {    } else     if ("-ifExists".equals(arg)) {    } else     if ("-baseDir".equals(arg)) {      i++;    } else {      showUsageAndThrowUnsupportedOption(arg);    }  }  if (startDefaultServers) {    webStart=true;    toolStart=true;    browserStart=true;    tcpStart=true;    pgStart=true;  }  if (tcpShutdown) {    out.println("Shutting down TCP Server at " + tcpShutdownServer);    Server.shutdownTcpServer(tcpShutdownServer,tcpPassword,tcpShutdownForce,false);  }  SQLException startException=null;  boolean webRunning=false;  if (url != null) {    Connection conn=JdbcUtils.getConnection(driver,url,user,password);    Server.startWebServer(conn);  }  if (webStart) {    try {      web=Server.createWebServer(args);      web.setShutdownHandler(this);      web.start();      if (printStatus) {        out.println(web.getStatus());      }      webRunning=true;    } catch (    SQLException e) {      printProblem(e,web);      startException=e;    }  }  if (toolStart && webRunning && !GraphicsEnvironment.isHeadless()) {    loadFont();    try {      if (!createTrayIcon()) {        showWindow();      }    } catch (    Exception e) {      e.printStackTrace();    }  }  if (browserStart && web != null) {    openBrowser(web.getURL());  }  if (tcpStart) {    try {      tcp=Server.createTcpServer(args);      tcp.start();      if (printStatus) {        out.println(tcp.getStatus());      }      tcp.setShutdownHandler(this);    } catch (    SQLException e) {      printProblem(e,tcp);      if (startException == null) {        startException=e;      }    }  }  if (pgStart) {    try {      pg=Server.createPgServer(args);      pg.start();      if (printStatus) {        out.println(pg.getStatus());      }    } catch (    SQLException e) {      printProblem(e,pg);      if (startException == null) {        startException=e;      }    }  }  if (startException != null) {    shutdown();    throw startException;  }}  }
class C{  public void testCreateWarDeployableWithInvalidProperty(){  Property property=new Property();  property.setName("invalidProperty");  property.setValue("whatever");  this.element.setType("war");  this.element.setFile("/some/path/to/war");  this.element.addConfiguredProperty(property);  try {    this.element.createDeployable("customContainer");    fail("Should have thrown an exception here");  } catch (  BuildException expected) {    assertEquals("Invalid property [invalidProperty] for deployable type [war]",expected.getMessage());  }}  }
class C{  public void print(java.lang.Object obj){  return;}  }
class C{  protected boolean intersectsFrustum(DrawContext dc,OrderedLabel olbl){  View view=dc.getView();  Frustum frustum=view.getFrustumInModelCoordinates();  if (olbl.placePoint != null && (frustum.getNear().distanceTo(olbl.placePoint) < 0 || frustum.getFar().distanceTo(olbl.placePoint) < 0)) {    return false;  }  if (dc.isPickingMode())   return dc.getPickFrustums().intersectsAny(olbl.screenExtent); else   return view.getViewport().intersects(olbl.screenExtent);}  }
class C{  public static boolean existingEntity(Collection<Entity> entities,int begin,int end,Class<? extends Entity> clazz){  return entities.stream().anyMatch(null);}  }
class C{  public byte[] encode(byte[] raw){  return toAsciiBytes(raw);}  }
class C{  public static Sampler MIRRORED_REPEAT_NEAREST(RenderScript rs){  if (rs.mSampler_MIRRORED_REPEAT_NEAREST == null) {    Builder b=new Builder(rs);    b.setMinification(Value.NEAREST);    b.setMagnification(Value.NEAREST);    b.setWrapS(Value.MIRRORED_REPEAT);    b.setWrapT(Value.MIRRORED_REPEAT);    rs.mSampler_MIRRORED_REPEAT_NEAREST=b.create();  }  return rs.mSampler_MIRRORED_REPEAT_NEAREST;}  }
class C{  public long realValueForRawNumber(long rawNumber){  final long value;  if (rawNumber == 0) {    value=0;  } else   if (!cycle) {    value=startsWith + ((rawNumber - 1) * increment);    if ((value < minValue) || (value > maxValue)) {      throw new SequenceLimitExceededException(this);    }  } else {    boolean isIncreasing=(increment > 0);    long absInc=Math.abs(increment);    long numPreCycle;    if (isIncreasing) {      numPreCycle=((maxValue - startsWith) / absInc) + 1;    } else {      numPreCycle=((startsWith - minValue) / absInc) + 1;    }    if ((rawNumber <= numPreCycle) || (numPreCycle == 0)) {      value=startsWith + ((rawNumber - 1) * increment);    } else {      long perCycle=((maxValue - minValue) / absInc) + 1;      long n=(rawNumber - numPreCycle - 1) % perCycle;      value=(isIncreasing ? minValue : maxValue) + (n * increment);    }  }  return value;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public String dontReplaceMissingValuesTipText(){  return "Replace missing values globally with mean/mode.";}  }
class C{  public void loadPage(final String url_text){  try {    logger.info("Loading Page: " + url_text);    view.setCursor(new Cursor(Cursor.WAIT_CURSOR));    view.setDocument(url_text);    view.addDocumentListener(BrowserPanel.this);    updateButtons();    setStatus("Successfully loaded: " + url_text);    if (listener != null) {      listener.pageLoadSuccess(url_text,view.getDocumentTitle());    }  } catch (  XRRuntimeException ex) {    XRLog.general(Level.SEVERE,"Runtime exception",ex);    setStatus("Can't load document");    handlePageLoadFailed(url_text,ex);  }catch (  Exception ex) {    XRLog.general(Level.SEVERE,"Could not load page for display.",ex);    ex.printStackTrace();  }}  }
class C{  @Override public void basicTypes(int anInt,long aLong,boolean aBoolean,float aFloat,double aDouble,String aString) throws RemoteException {}  }
class C{  public void scan(List<? extends JCTree> trees){  if (trees != null)   for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail)   scan(l.head);}  }
class C{  public double R2(){  return R2;}  }
class C{  public Node elementAt(int i){  if (null == m_map)   return null;  return m_map[i];}  }
class C{  public ImException(ImErrorInfo error){  super(error.getDescription());  mError=error;}  }
class C{  private void parseServerResponse(String response) throws RequestFailureException {  String appId=mGenerator.getAppId();  boolean sentPingAndUpdate=!mSendInstallEvent;  ResponseParser parser=new ResponseParser(appId,mSendInstallEvent,sentPingAndUpdate,sentPingAndUpdate);  parser.parseResponse(response);  mTimestampForNewRequest=mBackoffScheduler.getCurrentTime() + MS_BETWEEN_REQUESTS;  mLatestVersion=parser.getNewVersion();  mMarketURL=parser.getURL();  scheduleRepeatingAlarm();}  }
class C{  private SpeechletResponse buildSpeechletResponse(final String title,final String output,final boolean shouldEndSession){  SimpleCard card=new SimpleCard();  card.setTitle(String.format("HelloWorldSpeechlet - %s",title));  card.setContent(String.format("HelloWorldSpeechlet - %s",output));  PlainTextOutputSpeech speech=new PlainTextOutputSpeech();  speech.setText(output);  SpeechletResponse response=new SpeechletResponse();  response.setShouldEndSession(shouldEndSession);  response.setOutputSpeech(speech);  response.setCard(card);  return response;}  }
class C{  public static boolean isNormalized(CharSequence src,java.text.Normalizer.Form form,int option){  return NormalizerBase.isNormalized(src.toString(),form,option);}  }
class C{  public T onmousedown(String value){  return attr("onmousedown",value);}  }
class C{  public static HttpResponse doPost(String host,String path,String method,Map<String,String> headers,Map<String,String> querys,String body) throws Exception {  HttpClient httpClient=wrapClient(host);  HttpPost request=new HttpPost(buildUrl(host,path,querys));  for (  Map.Entry<String,String> e : headers.entrySet()) {    request.addHeader(e.getKey(),e.getValue());  }  if (StringUtils.isNotBlank(body)) {    request.setEntity(new StringEntity(body,"utf-8"));  }  return httpClient.execute(request);}  }
class C{  public static void containsAll(final String str,final String... subs){  boolean ok=true;  final StringBuilder sb=new StringBuilder();  for (  final String sub : subs) {    if (!str.contains(sub)) {      sb.append("'").append(sub).append("' was not contained in:").append(str).append(StringUtils.LS);      ok=false;    }    Assert.assertTrue(sb.toString(),ok);  }}  }
class C{  private void calculateColumnMapping(){  this.columnMapping=new int[this.dataTable.getNumberOfColumns()];  for (int i=0; i < this.columnMapping.length; i++) {    this.columnMapping[i]=i;  }switch (columnMappingType) {case ORDERED:    break;case WEIGHTS:  if (this.dataTable.isSupportingColumnWeights()) {    this.columnMapping=new int[this.dataTable.getNumberOfColumns()];    List<WeightIndex> indices=new LinkedList<WeightIndex>();    for (int i=0; i < this.dataTable.getNumberOfColumns(); i++) {      if ((colorColumn != i) && (!shouldIgnoreColumn(i))) {        indices.add(new WeightIndex(i,Math.abs(this.dataTable.getColumnWeight(i))));      } else {        indices.add(new WeightIndex(i,0.0d));      }    }    Collections.sort(indices);    Iterator<WeightIndex> w=indices.iterator();    int counter=0;    while (w.hasNext()) {      this.columnMapping[counter++]=w.next().getIndex();    }  } else {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.plotter.RadVizPlotter.using_weight_based_ordering_error");  }break;case RANDOM:this.columnMapping=new int[this.dataTable.getNumberOfColumns()];List<Integer> indices=new ArrayList<Integer>();for (int i=0; i < this.columnMapping.length; i++) {this.columnMapping[i]=i;if ((colorColumn != i) && (!shouldIgnoreColumn(i))) {indices.add(i);}}Random random=new Random(orderRandomSeed);for (int i=0; i < this.columnMapping.length; i++) {if ((colorColumn != i) && (!shouldIgnoreColumn(i))) {int other=indices.get(random.nextInt(indices.size()));int dummy=this.columnMapping[i];this.columnMapping[i]=this.columnMapping[other];this.columnMapping[other]=dummy;}}break;default :break;}}  }
class C{  private static void copyFile(final InputStream in,final String destinationFilePath) throws IOException {  FilesUtility.ensureDirectoryExists(new File(destinationFilePath).getParent());  OutputStream out=new FileOutputStream(destinationFilePath);  byte[] buf=new byte[8192];  int len;  while ((len=in.read(buf)) > 0) {    out.write(buf,0,len);  }  in.close();  out.close();}  }
class C{  public void testGetMetaData() throws SQLException {  PreparedStatement ps=null;  try {    String query="update zoo set name='Masha', family='cat' where id=?;";    ps=conn.prepareStatement(query);    assertNotNull(ps);    ResultSetMetaData meta=ps.getMetaData();    assertNotNull(meta);  }  finally {    try {      ps.close();    } catch (    SQLException ee) {    }  }  try {    String query="select * from zoo where id = ?";    ps=conn.prepareStatement(query);    ResultSetMetaData rsmd=ps.getMetaData();    assertNotNull(rsmd);    assertEquals(3,rsmd.getColumnCount());    assertEquals("id",rsmd.getColumnName(1));  }  finally {    try {      ps.close();    } catch (    SQLException ee) {    }  }  try {    ps.getMetaData();    fail("SQLException expected");  } catch (  SQLException e) {  }}  }
class C{  public AsynchInputStream(InputStream input,int pipeSize,int bufferSize){  assert pipeSize >= 1024;  mQueue=new ConcurrentByteQueue(pipeSize);  if (input == null) {    throw new IllegalArgumentException("File cannot be null");  }  mAsynchInput=new AsynchInput(input,mQueue,bufferSize);  mThread=new Thread(mAsynchInput,"AsynchInputStream");  mThread.setDaemon(true);  mThread.start();}  }
class C{  protected int engineGetOutputSize(int inputLen){  return core.getOutputSize(inputLen);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  void assignZero(){  mPol=new long[mLength];}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,int numClasses,int classType,int classIndex,boolean multiInstance) throws Exception {  TestInstances dataset=new TestInstances();  dataset.setSeed(seed);  dataset.setNumInstances(numInstances);  dataset.setNumNominal(numNominal);  dataset.setNumNumeric(numNumeric);  dataset.setNumString(numString);  dataset.setNumDate(numDate);  dataset.setNumRelational(numRelational);  dataset.setNumClasses(numClasses);  if (classType == NO_CLASS) {    dataset.setClassType(Attribute.NOMINAL);    dataset.setClassIndex(TestInstances.NO_CLASS);  } else {    dataset.setClassType(classType);    dataset.setClassIndex(classIndex);  }  dataset.setNumClasses(numClasses);  dataset.setMultiInstance(multiInstance);  dataset.setWords(getWords());  dataset.setWordSeparators(getWordSeparators());  return process(dataset.generate());}  }
class C{  public float r(){  return this.m[0];}  }
class C{  public Geometry createGeometry(Object obj){  final Geometry geometry;  if (obj instanceof String) {    final Matcher listMatcher=GEO_POINT_PATTERN.matcher((String)obj);    if (listMatcher.matches()) {      final double y=Double.valueOf(listMatcher.group(1));      final double x=Double.valueOf(listMatcher.group(2));      geometry=geometryFactory.createPoint(new Coordinate(x,y));    } else {      GeoPoint geoPoint=ElasticCompatLoader.getCompat(null).decodeGeohash((String)obj);      if (geoPoint != null) {        final double lat=geoPoint.lat();        final double lon=geoPoint.lon();        geometry=geometryFactory.createPoint(new Coordinate(lon,lat));      } else {        geometry=null;      }    }  } else   if (obj instanceof List && ((List<?>)obj).size() == 2) {    final List<?> values=(List<?>)obj;    if (Number.class.isAssignableFrom(values.get(0).getClass())) {      final double x=((Number)values.get(0)).doubleValue();      final double y=((Number)values.get(1)).doubleValue();      geometry=geometryFactory.createPoint(new Coordinate(x,y));    } else     if (values.get(0) instanceof String) {      final double x=Double.valueOf((String)values.get(0));      final double y=Double.valueOf((String)values.get(1));      geometry=geometryFactory.createPoint(new Coordinate(x,y));    } else {      geometry=null;    }  } else   if (obj instanceof Map) {    geometry=createGeometry((Map<String,Object>)obj);  } else {    geometry=null;  }  return geometry;}  }
class C{  public String url(){  return url;}  }
class C{  public boolean isCommitting(){  return ((commitAfterRows > 0) || (commitAfterMillis > 0));}  }
class C{  public void exportStatements(Resource subj,IRI pred,Value obj,RDFHandler handler,Resource... contexts) throws RepositoryException, RDFHandlerException {  if (isAllContext(contexts)) {    super.exportStatements(subj,pred,obj,isIncludeInferred(),handler,getReadContexts());  } else {    super.exportStatements(subj,pred,obj,isIncludeInferred(),handler,contexts);  }}  }
class C{  protected void checkResultByFile(@TestDataFile @NonNls @NotNull String filePath){  checkResultByFile(null,filePath,false);}  }
class C{  public ShardRestoreStatus(String nodeId){  this(nodeId,State.INIT);}  }
class C{  public void publish(String serviceName,String instanceName,Map<String,String> values,long publishTime) throws IOException {  ServiceInfo info=ServiceInfo.create("_" + serviceName + "._tcp.local.",instanceName,9999,0,0,values);  this.jmdns.registerService(info);  if (publishTime > 0) {    sleep(publishTime);    this.close();  }}  }
class C{  public void deleteField(String fieldName) throws DBFException {  if (fieldName == null) {    throw new DBFException("fieldName can not be null");  }  DBFField[] fields=getAllFields();  for (int i=0; i < fields.length; i++) {    if (fieldName.equals(fields[i].getName())) {      deleteField(i);      break;    }  }}  }
class C{  public ProjectHostingWriteDemo(ProjectHostingService service,String project,String username,String password) throws AuthenticationException, MalformedURLException {  this.username=username;  client=new ProjectHostingClient(service,project,username,password);}  }
class C{  public ContentType(){  this(null);}  }
class C{  public void resume() throws IllegalStateTransitionException {  assertStateTransitionsAllowed();  if (state != AdapterState.PAUSED) {    throw new IllegalStateTransitionException("Cannot resume from the " + state + " state");  }  state=AdapterState.STARTED;}  }
class C{  public void resize(int w,int h){  if (w <= 0 && h <= 0) {    throw new IllegalArgumentException("width or height must be > 0 for resize");  }  if (w == 0) {    float diff=(float)h / (float)height;    w=(int)(width * diff);  } else   if (h == 0) {    float diff=(float)w / (float)width;    h=(int)(height * diff);  }  bitmap=Bitmap.createScaledBitmap(bitmap,w,h,true);  this.width=w;  this.height=h;  updatePixels();}  }
class C{  @LargeTest public void testPreviewWithOverlay() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";  final String overlayFilename1=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  final String overlayFilename2=INPUT_FILE_PATH + "IMG_640x480_Overlay2.png";  final int previewFrom=5000;  final int previewTo=10000;  final boolean previewLoop=false;  final int previewCallbackFrameCount=1;  final int setAspectRatio=MediaProperties.ASPECT_RATIO_4_3;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final Semaphore blockTillPreviewCompletes=new Semaphore(1);  previewStart=false;  previewStop=false;  boolean flagForException=false;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName,renderingMode);  mVideoEditor.addMediaItem(mediaVideoItem);  mediaVideoItem.setExtractBoundaries(0,10000);  final Bitmap mBitmap1=mVideoEditorHelper.getBitmap(overlayFilename1,640,480);  final OverlayFrame overlayOnMvi1=mVideoEditorHelper.createOverlay(mediaVideoItem,"OverlayOnMvi1",mBitmap1,0,5000);  mediaVideoItem.addOverlay(overlayOnMvi1);  final Bitmap mBitmap2=mVideoEditorHelper.getBitmap(overlayFilename2,640,480);  final OverlayFrame overlayOnMvi2=mVideoEditorHelper.createOverlay(mediaVideoItem,"OverlayOnMvi2",mBitmap2,5000,9000);  mediaVideoItem.addOverlay(overlayOnMvi2);  List<Overlay> overlayList=mediaVideoItem.getAllOverlays();  assertEquals("Overlay Size",2,overlayList.size());  assertEquals("Overlay 1",overlayOnMvi1,overlayList.get(0));  assertEquals("Overlay 2",overlayOnMvi2,overlayList.get(1));  mVideoEditor.setAspectRatio(setAspectRatio);  validatePreviewProgress(0,-1,previewLoop,mVideoEditor.getDuration());}  }
class C{  public void alertStarting(AlertingState alertingState,double violationValue){  Alert alert=new Alert(alertingState.getAlertingDefinition(),alertingState.getLastCheckTime());  alertRegistry.registerAlert(alert);  alertingState.setAlert(alert);  alertingState.setExtremeValue(violationValue);  for (  IAlertAction alertAction : alertActions) {    alertAction.onStarting(alertingState);  }}  }
class C{  public Builder images(File imagesFile){  Validator.notNull(imagesFile,"'imagesFile' cannot be null");  this.imagesFile=imagesFile;  return this;}  }
class C{  private void handleShowOnFirstLaunch(){  if (mActivity != null && mDrawerLayout != null && mShowDrawerOnFirstLaunch) {    SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(mActivity);    if (!preferences.getBoolean(Drawer.PREF_USER_LEARNED_DRAWER,false)) {      mDrawerLayout.openDrawer(mSliderLayout);      SharedPreferences.Editor editor=preferences.edit();      editor.putBoolean(Drawer.PREF_USER_LEARNED_DRAWER,true);      editor.apply();    }  }}  }
class C{  public static void installGlassPane(Form f,Painter p){  Painter existing=f.getGlassPane();  if (existing == null) {    f.setGlassPane(p);    return;  }  if (existing instanceof PainterChain) {    f.setGlassPane(((PainterChain)existing).addPainter(p));  } else {    PainterChain pc=new PainterChain(new Painter[]{existing,p});    f.setGlassPane(pc);  }}  }
class C{  public synchronized void reset(){  super.reset();  if (this.indexes != null) {    this.indexes=new SimpleLookupTable();    this.indexStates=null;  }  this.indexLocations=new SimpleLookupTable();  this.javaPluginLocation=null;}  }
class C{  public static void clear(Color color){  offscreen.setColor(color);  offscreen.fillRect(0,0,width,height);  offscreen.setColor(penColor);  draw();}  }
class C{  public static OMGrid read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  Debug.message("linkdetail","LinkGrid: reading from link.");  OMGrid grid=null;  float lat=0;  float lon=0;  int x=0;  int y=0;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_OFFSET:    lat=dis.readFloat();  lon=dis.readFloat();Debug.message("linkdetail","LinkGrid: Offset Lat/Lon = " + lat + "/"+ lon+ " with");case RENDERTYPE_XY:x=dis.readInt();y=dis.readInt();Debug.message("linkdetail","LinkGrid: x/y = " + x + "/"+ y);break;case RENDERTYPE_LATLON:default :lat=dis.readFloat();lon=dis.readFloat();Debug.message("linkdetail","LinkGrid: Lat/Lon = " + lat + "/"+ lon);}int rows=dis.readInt();int columns=dis.readInt();float orientation=dis.readFloat();float vResolution=dis.readFloat();float hResolution=dis.readFloat();int major=dis.readByte();int length=dis.readInt();Debug.message("linkdetail","LinkGrid details: rows = " + rows + ", columns = "+ columns+ ", orientation = "+ orientation+ ", vertical resolution = "+ vResolution+ ", horizontal resolution = "+ hResolution+ ", major dimension = "+ (major == LinkGraphicConstants.COLUMN_MAJOR ? "COLUMN_MAJOR" : "ROW_MAJOR")+ ", with number of points = "+ length);int[][] data;if (major == LinkGraphicConstants.COLUMN_MAJOR) {data=new int[columns][rows];} else {data=new int[rows][columns];}for (int i=0; i < data.length; i++) {for (int j=0; j < data[0].length; j++) {data[i][j]=dis.readInt();}}Debug.message("linkdetail","LinkGrid read all the data.");switch (renderType) {case RENDERTYPE_OFFSET:grid=new OMGrid(lat,lon,x,y,vResolution,hResolution,data);break;case RENDERTYPE_XY:grid=new OMGrid(x,y,vResolution,hResolution,data);break;case RENDERTYPE_LATLON:default :grid=new OMGrid(lat,lon,vResolution,hResolution,data);}Debug.message("linkdetail","LinkGrid created OMGrid.");if (grid != null) {grid.setMajor(major == LinkGraphicConstants.COLUMN_MAJOR ? true : false);grid.setOrientation(orientation);LinkProperties.loadPropertiesIntoOMGraphic(dis,grid,propertiesBuffer);}Debug.message("linkdetail","LinkGrid done.");return grid;}  }
class C{  public JRadioButton(String text,boolean selected){  this(text,null,selected);}  }
class C{  protected boolean openForm(int AD_Form_ID,String className,String name){  log.info("AD_Form_ID=" + AD_Form_ID + " - Class="+ className);  Properties ctx=Env.getCtx();  Env.setContext(ctx,m_WindowNo,"WindowName",name);  setTitle(Env.getHeader(ctx,m_WindowNo));  try {    m_panel=(FormPanel)Class.forName(className).newInstance();  } catch (  Exception e) {    log.log(Level.SEVERE,"Class=" + className + ", AD_Form_ID="+ AD_Form_ID,e);    return false;  }  m_panel.init(m_WindowNo,this);  p_AD_Form_ID=AD_Form_ID;  return true;}  }
class C{  protected void redistributeMipsDueToOverSubscription(){  double totalRequiredMipsByAllVms=0;  Map<String,List<Double>> mipsMapCapped=new HashMap<String,List<Double>>();  for (  Map.Entry<String,List<Double>> entry : getMipsMapRequested().entrySet()) {    double requiredMipsByThisVm=0.0;    String vmId=entry.getKey();    List<Double> mipsShareRequested=entry.getValue();    List<Double> mipsShareRequestedCapped=new ArrayList<>();    double peMips=getPeCapacity();    for (    Double mips : mipsShareRequested) {      if (mips > peMips) {        mipsShareRequestedCapped.add(peMips);        requiredMipsByThisVm+=peMips;      } else {        mipsShareRequestedCapped.add(mips);        requiredMipsByThisVm+=mips;      }    }    mipsMapCapped.put(vmId,mipsShareRequestedCapped);    if (getVmsMigratingIn().contains(entry.getKey())) {      requiredMipsByThisVm*=0.1;    }    totalRequiredMipsByAllVms+=requiredMipsByThisVm;  }  double totalAvailableMips=ContainerVmPeList.getTotalMips(getPeList());  double scalingFactor=totalAvailableMips / totalRequiredMipsByAllVms;  getMipsMap().clear();  for (  Map.Entry<String,List<Double>> entry : mipsMapCapped.entrySet()) {    String vmUid=entry.getKey();    List<Double> requestedMips=entry.getValue();    List<Double> updatedMipsAllocation=new ArrayList<>();    for (    Double mips : requestedMips) {      if (getVmsMigratingOut().contains(vmUid)) {        mips*=scalingFactor;        mips*=0.9;      } else       if (getVmsMigratingIn().contains(vmUid)) {        mips*=0.1;        mips*=scalingFactor;      } else {        mips*=scalingFactor;      }      updatedMipsAllocation.add(Math.floor(mips));    }    getMipsMap().put(vmUid,updatedMipsAllocation);  }  mipsMapCapped.clear();  setAvailableMips(0);}  }
class C{  public static boolean contentEqualsIgnoreEOL(final Reader input1,final Reader input2) throws IOException {  BufferedReader br1=IOUtils.toBufferedReader(input1);  BufferedReader br2=IOUtils.toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  @Override @JsonIgnore public boolean isRelative(){  return this.isRelative;}  }
class C{  private static void printHelpAndExit(){  String jarPath=Acr122Manager.class.getProtectionDomain().getCodeSource().getLocation().getFile();  String jarName=jarPath.substring(jarPath.lastIndexOf('/') + 1);  StringBuilder sb=new StringBuilder("Usage: java -jar ");  sb.append(jarName).append(" [option]\n");  sb.append("Options:\n");  sb.append("\t-h, --help\t\t\tshow this help message and exit\n");  sb.append("\t-d, --dump [KEYS...]\t\tdump Mifare Classic 1K cards using KEYS\n");  sb.append("\t-w, --write S B KEY DATA\twrite DATA to sector S, block B of Mifare Classic 1K cards using KEY\n");  sb.append("Examples:\n");  sb.append("\tjava -jar ").append(jarName).append(" --dump FF00A1A0B000 FF00A1A0B001 FF00A1A0B099\n");  sb.append("\tjava -jar ").append(jarName).append(" --write 13 2 FF00A1A0B001 FFFFFFFFFFFF00000000060504030201");  System.out.println(sb.toString());  System.exit(0);}  }
class C{  public static byte[] encodeUnsignedLongBRANCHMISPREDICT(long value){  byte[] buf=null;  if (0 != (value & 0x8000000000000000L)) {    buf=new byte[10];  } else   if (0 != (value & 0xff00000000000000L)) {    buf=new byte[9];  } else   if (0 != (value & 0xfffe000000000000L)) {    buf=new byte[8];  } else   if (0 != (value & 0xfffffc0000000000L)) {    buf=new byte[7];  } else   if (0 != (value & 0xfffffff800000000L)) {    buf=new byte[6];  } else   if (0 != (value & 0xfffffffff0000000L)) {    buf=new byte[5];  } else   if (0 != (value & 0xffffffffffe00000L)) {    buf=new byte[4];  } else   if (0 != (value & 0xffffffffffffc000L)) {    buf=new byte[3];  } else   if (0 != (value & 0xffffffffffffff80L)) {    buf=new byte[2];  } else {    buf=new byte[1];  }  byte count=0;  while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {    buf[count++]=(byte)(((int)value & 0x7F) | 0x80);    value>>>=7;  }  buf[count]=(byte)(value & 0x7f);  return buf;}  }
class C{  public void clearAllConnectionsFor(BlockPos node,World world,TargetingInfo target){  IImmersiveConnectable iic=toIIC(node,world);  WireType type=target == null ? null : iic.getCableLimiter(target);  if (type == null)   return;  for (  Set<Connection> conl : getMultimap(world.provider.getDimension()).values()) {    Iterator<Connection> it=conl.iterator();    while (it.hasNext()) {      Connection con=it.next();      if (con.cableType == type)       if (node.equals(con.start) || node.equals(con.end)) {        it.remove();        IImmersiveConnectable other;        if (node.equals(con.start))         other=toIIC(con.end,world); else         other=toIIC(con.start,world);        if (iic != null)         iic.removeCable(con);        if (other != null)         other.removeCable(con);        if (node.equals(con.end)) {          double dx=node.getX() + .5 + Math.signum(con.start.getX() - con.end.getX());          double dy=node.getY() + .5 + Math.signum(con.start.getY() - con.end.getY());          double dz=node.getZ() + .5 + Math.signum(con.start.getZ() - con.end.getZ());          if (world.getGameRules().getBoolean("doTileDrops"))           world.spawnEntityInWorld(new EntityItem(world,dx,dy,dz,con.cableType.getWireCoil(con)));          if (world.isBlockLoaded(con.start))           world.addBlockEvent(con.start,world.getBlockState(con.start).getBlock(),-1,0);        } else         if (world.isBlockLoaded(con.end))         world.addBlockEvent(con.end,world.getBlockState(con.end).getBlock(),-1,0);      }    }  }  if (world.isBlockLoaded(node))   world.addBlockEvent(node,world.getBlockState(node).getBlock(),-1,0);  IESaveData.setDirty(world.provider.getDimension());  resetCachedIndirectConnections();}  }
class C{  protected int engineGetKeySize(Key key) throws InvalidKeyException {  return (key.getEncoded().length * 8);}  }
class C{  public static boolean isTranslucencySupported(){  boolean isTranslucencySupported=false;  try {    if (JVM.current().isOrLater(JVM.JDK1_7)) {      GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();      GraphicsDevice gd=ge.getDefaultScreenDevice();      Class _WindowTranslucency=Class.forName("java.awt.GraphicsDevice$WindowTranslucency");      isTranslucencySupported=((Boolean)(ReflectHelper.invokeMethod(GraphicsDevice.class,gd,"isWindowTranslucencySupported",new Class[]{_WindowTranslucency},new Object[]{Enum.valueOf(_WindowTranslucency,"TRANSLUCENT")}))).booleanValue();    } else     if (JVM.current().isOrLater(JVM.JDK1_6)) {      Class _WindowTranslucency=Class.forName("com.sun.awt.AWTUtilities$Translucency");      isTranslucencySupported=((Boolean)(ReflectHelper.invokeMethod(Class.forName("com.sun.awt.AWTUtilities"),_WindowTranslucency,"isTranslucencySupported",new Class[]{_WindowTranslucency},new Object[]{Enum.valueOf(_WindowTranslucency,"TRANSLUCENT")}))).booleanValue();    }  } catch (  Exception e) {    if (BeautyEyeLNFHelper.debug)     e.printStackTrace();    LogHelper.debug("Exception at WindowTranslucencyHelper.isTranslucencySupported()," + e.getMessage());  }  return isTranslucencySupported;}  }
class C{  @CanIgnoreReturnValue public Builder addEscape(char c,String replacement){  checkNotNull(replacement);  replacementMap.put(c,replacement);  return this;}  }
class C{  public static void sendStillInitializing(InternalDistributedMember recipient,int processorId,DM dm){  ManageBucketReplyMessage m=new ManageBucketReplyMessage(processorId,false,true);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public DriverTask createConsistencyGroupSnapshot(VolumeConsistencyGroup volumeConsistencyGroup,List<VolumeSnapshot> snapshots,List<CapabilityInstance> capabilities){  DellSCDriverTask task=new DellSCDriverTask("createCGSnapshot");  try {    StorageCenterAPI api=connectionManager.getConnection(volumeConsistencyGroup.getStorageSystemId());    ScVolume[] volumes=api.getConsistencyGroupVolumes(volumeConsistencyGroup.getNativeId());    for (    ScVolume volume : volumes) {      api.checkAndInitVolume(volume.instanceId);    }    ScReplay[] replays=api.createConsistencyGroupSnapshots(volumeConsistencyGroup.getNativeId());    if (populateCgSnapshotInfo(snapshots,replays)) {      task.setStatus(TaskStatus.READY);    } else {      task.setStatus(TaskStatus.PARTIALLY_FAILED);    }  } catch (  StorageCenterAPIException|DellSCDriverException dex) {    String error=String.format("Error creating CG snapshots %s: %s",volumeConsistencyGroup.getDisplayName(),dex);    LOG.error(error);    task.setFailed(error);  }  return task;}  }
class C{  public TransmissionHistoryModel(Type units){  this(TRANSMISSION_HISTORY_MODEL,units);}  }
class C{  public static boolean arrayEndsWith(final byte[] array,final byte[] str){  boolean result=false;  if (array.length >= str.length) {    result=true;    int index=str.length;    int arrindex=array.length;    while (--index >= 0) {      if (array[--arrindex] != str[index]) {        result=false;        break;      }    }  }  return result;}  }
class C{  public DateTime(){  final long millisecs=System.currentTimeMillis();  this.date=new Date(millisecs);  ticks=millisecs * MILLISEC + TICSK_FROM_1601_TO_1970;}  }
class C{  public double inversePurity(){  return smInversePurity;}  }
class C{  protected static void fatal(String msg,Throwable t){  System.out.println(msg);  if (t != null)   t.printStackTrace();  fail();}  }
class C{  private void fillCatData(CustomCategory presetCategory){  name.setText(presetCategory.getName());  DefaultListModel dlm=(DefaultListModel)filterList.getModel();  for (int i=0; i < dlm.getSize(); i++) {    if (presetCategory.hasInFilters(((Filter)dlm.elementAt(i)).getName())) {      moveFilter(filterList,catFilters,i);      i--;    }  }}  }
class C{  public static DateTimeFormatter ordinalDate(){  if (od == null) {    od=new DateTimeFormatterBuilder().append(yearElement()).append(dayOfYearElement()).toFormatter();  }  return od;}  }
class C{  protected void sendFunctionGroup4(){  setSpeedSetting(this.speedSetting);  if (sendA2command) {    int locoAddr=address.getNumber();    if (address.isLongAddress()) {      locoAddr+=0xC000;    }    int data=0x00 | (f20 ? 0x80 : 0) | (f19 ? 0x40 : 0)| (f18 ? 0x20 : 0)| (f17 ? 0x10 : 0)| (f16 ? 0x08 : 0)| (f15 ? 0x04 : 0)| (f14 ? 0x02 : 0)| (f13 ? 0x01 : 0);    byte[] bl=NceBinaryCommand.nceLocoCmd(locoAddr,NceBinaryCommand.LOCO_CMD_FG4,(byte)data);    NceMessage m=NceMessage.createBinaryMessage(tc,bl);    tc.sendNceMessage(m,null);  } else {    byte[] result=jmri.NmraPacket.function13Through20Packet(address.getNumber(),address.isLongAddress(),getF13(),getF14(),getF15(),getF16(),getF17(),getF18(),getF19(),getF20());    NceMessage m=NceMessage.sendPacketMessage(tc,result);    tc.sendNceMessage(m,null);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.263 -0500",hash_original_method="65AF02D93E753F97E0AF00F542D03529",hash_generated_method="F29F21797D70C4B06E85B79AB9E1968B") public ServerHeader createServerHeader(List product) throws ParseException {  if (product == null)   throw new NullPointerException("null productList arg");  Server server=new Server();  server.setProduct(product);  return server;}  }
class C{  public boolean startsWith(Name n){  if (n instanceof CompositeName) {    return (impl.startsWith(n.size(),n.getAll()));  } else {    return false;  }}  }
class C{  public boolean isVarargs(){  return testAllFlags(VARARGS) && isInvocable();}  }
class C{  public int distanceTo(Coord4D obj){  int subX=xCoord - obj.xCoord;  int subY=yCoord - obj.yCoord;  int subZ=zCoord - obj.zCoord;  return (int)MathHelper.sqrt_double(subX * subX + subY * subY + subZ * subZ);}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    dynInit();    jbInit();    frame.getContentPane().add(commandPanel,BorderLayout.SOUTH);    frame.getContentPane().add(mainPanel,BorderLayout.CENTER);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public void put(String key,Object value){  Bindings nn=getBindings(ScriptContext.ENGINE_SCOPE);  if (nn != null) {    nn.put(key,value);  }}  }
class C{  public static boolean isMetricUnits(Context context){  return STATS_UNITS_DEFAULT.equals(getString(context,R.string.stats_units_key,STATS_UNITS_DEFAULT));}  }
class C{  @Override public void removeSquelchStateListener(){  mSquelchStateListener=null;}  }
class C{  @Override public synchronized void mark(int readlimit){  super.mark(readlimit);  if (cacheRequest != null) {    marked=true;    markCount=0;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforenodeancestor.class,args);}  }
class C{  public void applyMissingAndOutlierTreatments(double[] values) throws Exception {  for (int i=0; i < m_miningMeta.size(); i++) {    MiningFieldMetaInfo mfi=m_miningMeta.get(i);    values[i]=mfi.applyMissingValueTreatment(values[i]);    values[i]=mfi.applyOutlierTreatment(values[i]);  }}  }
class C{  private File prepareTestDir(String name) throws Exception {  File testDir=new File(name);  if (testDir.exists()) {    for (    File child : testDir.listFiles()) {      child.delete();    }    testDir.delete();  }  if (testDir.exists())   throw new Exception("Unable to clear test dir: " + testDir.getAbsolutePath());  testDir.mkdirs();  return testDir;}  }
class C{  @Override public final int readUnsignedByte() throws IOException {  return dis.readUnsignedByte();}  }
class C{  public static String hashpw(byte[] password0,final String salt){  BCrypt B;  String real_salt;  byte passwordb[]=null, saltb[], hashed[];  char minor=(char)0;  int rounds, off=0;  final StringBuffer rs=new StringBuffer();  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {    throw new IllegalArgumentException("Invalid salt version");  }  if (salt.charAt(2) == '$') {    off=3;  } else {    minor=salt.charAt(2);    if (minor != 'a' || salt.charAt(3) != '$') {      throw new IllegalArgumentException("Invalid salt revision");    }    off=4;  }  if (salt.charAt(off + 2) > '$') {    throw new IllegalArgumentException("Missing salt rounds");  }  rounds=Integer.parseInt(salt.substring(off,off + 2));  real_salt=salt.substring(off + 3,off + 25);  try {    if (minor >= (byte)'a') {      passwordb=Arrays.copyOf(password0,password0.length + 1);      passwordb[passwordb.length - 1]=(byte)0;    } else {      passwordb=Arrays.copyOf(password0,password0.length);    }    saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);    B=new BCrypt();    hashed=B.crypt_raw(passwordb,saltb,rounds,bf_crypt_ciphertext.clone());  }  finally {    if (password0 != null) {      Arrays.fill(password0,(byte)'\0');      password0=null;    }    if (passwordb != null) {      Arrays.fill(passwordb,(byte)'\0');      passwordb=null;    }  }  rs.append("$2");  if (minor >= 'a') {    rs.append(minor);  }  rs.append("$");  if (rounds < 10) {    rs.append("0");  }  if (rounds > 30) {    throw new IllegalArgumentException("rounds exceeds maximum (30)");  }  rs.append(Integer.toString(rounds));  rs.append("$");  rs.append(encode_base64(saltb,saltb.length));  rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));  return rs.toString();}  }
class C{  public String toStringFull(){  StringBuilder sb=new StringBuilder(toString());  sb.append("\n Read:\n");  for (  PngChunk chunk : chunks) {    sb.append(chunk).append(" G=" + chunk.getChunkGroup() + "\n");  }  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.239 -0500",hash_original_method="B728DA55BB20CAF41F04A8721ACC9EB9",hash_generated_method="0BA08D94C9C70E0F15187FE74361DB91") public void addRect(float left,float top,float right,float bottom,Direction dir){  detectSimplePath(left,top,right,bottom,dir);  addTaint(left + top + right+ bottom+ dir.nativeInt);}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public boolean isDrawCenterTextEnabled(){  return mDrawCenterText;}  }
class C{  public String complete(String prefix){  return complete(prefix,root,"");}  }
class C{  public void doReply(InputStream in,OutputStream out,String cmd) throws IOException, BadHttpRequest {  if (cmd.startsWith("POST /rmi "))   processRMI(in,out); else   if (cmd.startsWith("POST /lookup "))   lookupName(cmd,in,out); else   super.doReply(in,out,cmd);}  }
class C{  public void addRows(int n){  for (int i=0; i < n; i++)   addRow();}  }
class C{  public void evaluate(ClassificationTester tester,View goldView,View predictionView){  super.cleanAttributes(goldView,predictionView);  gold=(PredicateArgumentView)goldView;  prediction=(PredicateArgumentView)predictionView;  goldToPredictionPredicateMapping=getGoldToPredictionPredicateMapping();  for (  Constituent gp : gold.getPredicates()) {    if (!goldToPredictionPredicateMapping.containsKey(gp)) {      tester.recordGoldOnly("V");      continue;    }    Constituent pp=goldToPredictionPredicateMapping.get(gp);    Map<IntPair,Record> goldLabels=getArgumentMap(gold,gp);    Map<IntPair,Record> predictedLabels=getArgumentMap(prediction,pp);    Set<IntPair> goldDone=new HashSet<>();    for (    IntPair predictedSpan : predictedLabels.keySet()) {      Record p=predictedLabels.get(predictedSpan);      Record g=goldLabels.get(predictedSpan);      if (g == null) {        tester.recordPredictionOnly(p.baseLabel);        continue;      }      Map<IntPair,String> gComponents=g.components;      Map<IntPair,String> pComponents=p.components;      assert gComponents != null;      assert pComponents != null;      if (gComponents.size() == 1 && pComponents.size() == 1) {        tester.record(g.baseLabel,p.baseLabel);        goldDone.add(predictedSpan);      } else       if (gComponents.size() > 1 && pComponents.size() == 1) {        tester.recordPredictionOnly(p.baseLabel);      } else       if (gComponents.size() == 1 && pComponents.size() > 1) {        tester.recordPredictionOnly(p.baseLabel);      } else {        if (p.baseLabel.startsWith("AM")) {          Set<IntPair> set=new HashSet<>();          set.addAll(gComponents.keySet());          set.addAll(pComponents.keySet());          for (          IntPair s : set) {            String gLabel=gComponents.get(s);            String pLabel=pComponents.get(s);            if (gLabel != null && pLabel != null)             tester.record(gLabel,pLabel); else             if (gLabel == null)             tester.recordPredictionOnly(pLabel); else             tester.recordGoldOnly(gLabel);          }          goldDone.add(predictedSpan);        } else {          boolean allOK=p.baseLabel.equals(g.baseLabel);          Set<IntPair> goldSpansLeft=new HashSet<>(gComponents.keySet());          for (          IntPair pSpan : pComponents.keySet()) {            if (gComponents.containsKey(pSpan))             goldSpansLeft.remove(pSpan); else {              allOK=false;              break;            }          }          if (allOK) {            tester.record(g.baseLabel,p.baseLabel);            goldDone.add(predictedSpan);          } else {            tester.recordPredictionOnly(p.baseLabel);          }        }      }    }    for (    IntPair gSpan : goldLabels.keySet()) {      if (!goldDone.contains(gSpan))       tester.recordGoldOnly(goldLabels.get(gSpan).baseLabel);    }  }}  }
class C{  public void testLocalsAverageCorrectly(TransferEntropyCalculator teCalc,int timeSteps,int k) throws Exception {  System.out.println("Testing locals average correctly");  teCalc.initialise(k);  RandomGenerator rg=new RandomGenerator();  double[] sourceData=rg.generateNormalData(timeSteps,0,1);  double[] destData=rg.generateNormalData(timeSteps,0,1);  teCalc.setObservations(sourceData,destData);  double te=teCalc.computeAverageLocalOfObservations();  double[] teLocal=teCalc.computeLocalOfPreviousObservations();  System.out.printf("Average was %.5f\n",te);  assertEquals(te,MatrixUtils.mean(teLocal,k,timeSteps - k),0.00001);}  }
class C{  @Nullable private String capitalFirst(@Nullable String str){  return str == null ? null : str.isEmpty() ? "" : Character.toUpperCase(str.charAt(0)) + str.substring(1);}  }
class C{  public void dispose(){  m_graph.getSettings().getEdgeSettings().removeListener(m_settingsListener);  m_graph.getSettings().getProximitySettings().removeListener(m_proximityListener);}  }
class C{  protected AbstractRefactoringDescriptorResourceMapping(final RefactoringDescriptorProxy descriptor){  Assert.isNotNull(descriptor);  fDescriptor=descriptor;}  }
class C{  public static synchronized Identifier lookup(String s){  Identifier id=(Identifier)hash.get(s);  if (id == null) {    hash.put(s,id=new Identifier(s));  }  return id;}  }
class C{  public static RoutingService.Builder buildRoutingService(SocketAddress address){  return SingleHostRoutingService.newBuilder().address(address);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceEntity_();}  }
class C{  public BooleanLiteral(boolean b){  m_value=b;}  }
class C{  public TabStop(float pos){  this(pos,ALIGN_LEFT,LEAD_NONE);}  }
class C{  @RequestProcessing(value="/admin/article/{articleId}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showArticle(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String articleId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/article.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject article=articleQueryService.getArticle(articleId);  dataModel.put(Article.ARTICLE,article);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public boolean isUp(){  ServerBartender server=_server;  return server != null && server.isUp();}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  g2.setPaint(this.fillPaint);  Rectangle2D f=DialPlot.rectangleByRadius(frame,this.radius,this.radius);  Ellipse2D e=new Ellipse2D.Double(f.getX(),f.getY(),f.getWidth(),f.getHeight());  g2.fill(e);  g2.setPaint(this.outlinePaint);  g2.setStroke(this.outlineStroke);  g2.draw(e);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.EXECUTION_STATE__STATE_VECTOR:    return stateVector != null;case SexecPackage.EXECUTION_STATE__SUB_SCOPES:  return subScopes != null && !subScopes.isEmpty();case SexecPackage.EXECUTION_STATE__SUPER_SCOPE:return superScope != null;case SexecPackage.EXECUTION_STATE__ENTER_SEQUENCES:return enterSequences != null && !enterSequences.isEmpty();case SexecPackage.EXECUTION_STATE__EXIT_SEQUENCE:return exitSequence != null;case SexecPackage.EXECUTION_STATE__INIT_SEQUENCE:return initSequence != null;case SexecPackage.EXECUTION_STATE__LEAF:return leaf != LEAF_EDEFAULT;case SexecPackage.EXECUTION_STATE__ENTRY_ACTION:return entryAction != null;case SexecPackage.EXECUTION_STATE__EXIT_ACTION:return exitAction != null;}return super.eIsSet(featureID);}  }
class C{  public NewGameWorldAction(Workspace workspace){  super("Game World",workspace);}  }
class C{  public boolean isCellSpannedThroughVertically(int row,int column){  return tablePositions[row * columns + column] == V_SPAN_CONSTRAINT || tablePositions[row * columns + column] == VH_SPAN_CONSTRAINT;}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (item.getItemId() == android.R.id.home) {    showAd();  }  return true;}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public void addObjPartNoCopying(Object o){  if (o == null || o instanceof byte[]) {    addRawPart((byte[])o,false);  } else {    serializeAndAddPartNoCopying(o);  }}  }
class C{  public boolean isDescription(){  Object oo=get_Value(COLUMNNAME_IsDescription);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CharTrie(InputStream inputStream,DataManipulate dataManipulate) throws IOException {  super(inputStream,dataManipulate);  if (!isCharTrie()) {    throw new IllegalArgumentException("Data given does not belong to a char trie.");  }  m_friendAgent_=new FriendAgent();}  }
class C{  @Override protected RdKNNNode createNewDirectoryNode(){  return new RdKNNNode(dirCapacity,false);}  }
class C{  public static Date max(final Date... t){  QL.require(t != null,"argument cannot be null");  if (t.length == 0)   return new Date(); else {    Date max=t[0];    for (int i=1; i < t.length; i++) {      final Date curr=t[i];      if (curr.gt(max)) {        max=curr;      }    }    return max;  }}  }
class C{  public static KeyCombination create(String keyString){  if (keyString == null) {    return null;  }  keyString=keyString.toUpperCase();  Key key;  Modifier[] modifiers=null;  if (keyString.contains("-")) {    String[] keys=keyString.split("-",-1);    int modifiersCnt=keys.length;    key=Key.valueOf(keys[modifiersCnt - 1]);    --modifiersCnt;    modifiers=new Modifier[modifiersCnt];    for (int i=0; i < modifiersCnt; i++) {      modifiers[i]=Modifier.valueOf(keys[i]);    }  } else {    key=Key.valueOf(keyString);  }  return new KeyCombination(key,modifiers);}  }
class C{  public static String adnStringFieldToString(byte[] data,int offset,int length){  if (length == 0) {    return "";  }  if (length >= 1) {    if (data[offset] == (byte)0x80) {      int ucslen=(length - 1) / 2;      String ret=null;      try {        ret=new String(data,offset + 1,ucslen * 2,"utf-16be");      } catch (      UnsupportedEncodingException ex) {        Log.e(LOG_TAG,"implausible UnsupportedEncodingException",ex);      }      if (ret != null) {        ucslen=ret.length();        while (ucslen > 0 && ret.charAt(ucslen - 1) == '\uFFFF')         ucslen--;        return ret.substring(0,ucslen);      }    }  }  boolean isucs2=false;  char base='\0';  int len=0;  if (length >= 3 && data[offset] == (byte)0x81) {    len=data[offset + 1] & 0xFF;    if (len > length - 3)     len=length - 3;    base=(char)((data[offset + 2] & 0xFF) << 7);    offset+=3;    isucs2=true;  } else   if (length >= 4 && data[offset] == (byte)0x82) {    len=data[offset + 1] & 0xFF;    if (len > length - 4)     len=length - 4;    base=(char)(((data[offset + 2] & 0xFF) << 8) | (data[offset + 3] & 0xFF));    offset+=4;    isucs2=true;  }  if (isucs2) {    StringBuilder ret=new StringBuilder();    while (len > 0) {      if (data[offset] < 0) {        ret.append((char)(base + (data[offset] & 0x7F)));        offset++;        len--;      }      int count=0;      while (count < len && data[offset + count] >= 0)       count++;      ret.append(GsmAlphabet.gsm8BitUnpackedToString(data,offset,count));      offset+=count;      len-=count;    }    return ret.toString();  }  Resources resource=Resources.getSystem();  String defaultCharset="";  return GsmAlphabet.gsm8BitUnpackedToString(data,offset,length,defaultCharset.trim());}  }
class C{  public static Comparator<Integer> integerComparator(){  return INT_COMPARATOR;}  }
class C{  @SuppressWarnings("unused") private void paintGrid(SeaGlassContext context,Graphics g,int rMin,int rMax,int cMin,int cMax){  g.setColor(table.getGridColor());  Rectangle minCell=table.getCellRect(rMin,cMin,true);  Rectangle maxCell=table.getCellRect(rMax,cMax,true);  Rectangle damagedArea=minCell.union(maxCell);  SynthGraphicsUtils synthG=context.getStyle().getGraphicsUtils(context);  if (table.getShowHorizontalLines()) {    int tableWidth=damagedArea.x + damagedArea.width;    int y=damagedArea.y;    for (int row=rMin; row <= rMax; row++) {      y+=table.getRowHeight(row);      synthG.drawLine(context,"Table.grid",g,damagedArea.x,y - 1,tableWidth - 1,y - 1);    }  }  if (table.getShowVerticalLines()) {    TableColumnModel cm=table.getColumnModel();    int tableHeight=damagedArea.y + damagedArea.height;    int x;    if (table.getComponentOrientation().isLeftToRight()) {      x=damagedArea.x;      for (int column=cMin; column <= cMax; column++) {        int w=cm.getColumn(column).getWidth();        x+=w;        synthG.drawLine(context,"Table.grid",g,x - 1,0,x - 1,tableHeight - 1);      }    } else {      x=damagedArea.x;      for (int column=cMax; column >= cMin; column--) {        int w=cm.getColumn(column).getWidth();        x+=w;        synthG.drawLine(context,"Table.grid",g,x - 1,0,x - 1,tableHeight - 1);      }    }  }}  }
class C{  public void testCreateDocument1() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  boolean success=false;  try {    domImpl.createDocument(namespaceURI,malformedName,docType);  } catch (  DOMException ex) {    success=(ex.code == DOMException.NAMESPACE_ERR);  }  assertTrue("throw_NAMESPACE_ERR",success);}  }
class C{  public boolean isX509Token(){  return x509Token;}  }
class C{  @Override public void clear(){  if (mPanorama != null) {    mFileDownloaderManager.removeAll();    this.setPanorama(null);  }}  }
class C{  public Object parse(File file){  return parseFile(file,null);}  }
class C{  private void decodeAuto(Context ctx,IoSession session,IoBuffer in,ProtocolDecoderOutput out) throws CharacterCodingException, ProtocolDecoderException {  int matchCount=ctx.getMatchCount();  int oldPos=in.position();  int oldLimit=in.limit();  while (in.hasRemaining()) {    byte b=in.get();    boolean matched=false;switch (b) {case '\r':      matchCount++;    break;case '\n':  matchCount++;matched=true;break;default :matchCount=0;}if (matched) {int pos=in.position();in.limit(pos);in.position(oldPos);ctx.append(in);in.limit(oldLimit);in.position(pos);if (ctx.getOverflowPosition() == 0) {IoBuffer buf=ctx.getBuffer();buf.flip();buf.limit(buf.limit() - matchCount);try {byte[] data=new byte[buf.limit()];buf.get(data);CharsetDecoder decoder=ctx.getDecoder();CharBuffer buffer=decoder.decode(ByteBuffer.wrap(data));String str=buffer.toString();writeText(session,str,out);}  finally {buf.clear();}} else {int overflowPosition=ctx.getOverflowPosition();ctx.reset();throw new RecoverableProtocolDecoderException("Line is too long: " + overflowPosition);}oldPos=pos;matchCount=0;}}in.position(oldPos);ctx.append(in);ctx.setMatchCount(matchCount);}  }
class C{  static public double log10(double value){  return Math.log(value) * 0.43429448190325176;}  }
class C{  public void pushDebugRect(Rect rect,int color){  if (rect.left > rect.right) {    int tmp=rect.right;    rect.right=rect.left;    rect.left=tmp;  }  if (rect.top > rect.bottom) {    int tmp=rect.bottom;    rect.bottom=rect.top;    rect.top=tmp;  }  mRenderHost.pushDebugRect(rect,color);}  }
class C{  void error(String msg){  Messager messager=processingEnv.getMessager();  messager.printMessage(Diagnostic.Kind.ERROR,msg);}  }
class C{  public String functionName(int fn){  if (fn == F_ADD)   return "+";  if (fn == F_SUB)   return "-";  if (fn == F_MUL)   return "*";  if (fn == F_DIV)   return "/";  if (fn == F_LT)   return "<";  if (fn == F_LTE)   return "<=";  if (fn == F_GT)   return ">";  if (fn == F_GTE)   return ">=";  if (fn == F_EQ)   return "=";  if (fn == F_AND)   return "and";  if (fn == F_OR)   return "or";  if (fn == F_NOT)   return "not";  if (fn == F_NOR)   return "nor";  if (fn == F_NAND)   return "nand";  if (fn == F_NEG)   return "neg";  if (fn == F_IF)   return "if";  if (fn == F_IFLEZ)   return "iflez"; else   return "UNKNOWN FUNCTION";}  }
class C{  public MatrixOfVecs(int rows,int cols,boolean sparse){  this.rows=new ArrayList<Vec>(rows);  for (int i=0; i < rows; i++)   this.rows.add(sparse ? new SparseVector(cols) : new DenseVector(cols));}  }
class C{  public boolean isDisplayNameAlreadyTaken(String displayName,String id){  return resourceDao.isUniqueAttributeAlreadyTaken(displayName,id,GroupEntity_.displayName,GroupEntity.class);}  }
class C{  public void writeFieldIdNoSchemaUpdate(int fieldId){  int fieldOff=out.position() - start;  schema.push(fieldId,fieldOff);  fieldCnt++;}  }
class C{  private boolean changeTableClosure(TableClosure tableClosure){  if (!tableClosure.equals(this.tableClosure)) {    if (this.tableClosure != null) {      this.tableClosure.removeChangeListener(tableClosureListener);    }    this.tableClosure=tableClosure;    table2ClassName.clear();    this.tableClosure.addChangeListener(tableClosureListener);    return true;  }  return false;}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public java.net.URL readURL() throws SQLException {  return (java.net.URL)getNextAttribute();}  }
class C{  public boolean dominates(BasicBlock master,BasicBlock slave){  DominatorTreeNode masterNode=dominatorInfoMap[master.getNumber()];  DominatorTreeNode slaveNode=dominatorInfoMap[slave.getNumber()];  return slaveNode.isDominatedBy(masterNode);}  }
class C{  public void buildReport(String organizationId,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  List<ReportResultData> reportData=dao.retrieveProviderSupplierReportData(organizationId);  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  converter.convertToXml(reportData,result.getData(),Collections.<String,String>emptyMap());}  }
class C{  public void test_abort(){class AbortException extends RuntimeException {    private static final long serialVersionUID=1L;  }  final IAtomicStore store=(IAtomicStore)getStore();  try {    for (int i=0; i < 100; i++) {      store.write(getRandomData());    }    throw new AbortException();  } catch (  AbortException ex) {    store.abort();    for (int i=0; i < 100; i++) {      store.write(getRandomData());    }  }catch (  Throwable t) {    store.abort();    fail("Unexpected exception: " + t,t);  } finally {    store.destroy();  }}  }
class C{  public boolean isCompleted(){  return isCompleted;}  }
class C{  public void reset(){  super.reset();  H0=0x67452301;  H1=0xefcdab89;  H2=0x98badcfe;  H3=0x10325476;  H4=0xc3d2e1f0;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  @Override public void adds(int size,Register dst,Register src,int immediate){  if (immediate < 0) {    subs(size,dst,src,-immediate);  } else   if (!(dst.equals(src) && immediate == 0)) {    super.adds(size,dst,src,immediate);  }}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "InstanceStreamToBatchMaker.gif",BeanVisual.ICON_PATH + "InstanceStreamToBatchMaker_animated.gif");}  }
class C{  public void swapCards(int i,int j){  Card temp=cards.get(i);  cards.set(i,cards.get(j));  cards.set(j,temp);}  }
class C{  public ProofOfPossession(){  tagNo=TYPE_RA_VERIFIED;  obj=DERNull.INSTANCE;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.244 -0500",hash_original_method="E534E6CFFABE07F7DCCE5DEDEA13040B",hash_generated_method="E534E6CFFABE07F7DCCE5DEDEA13040B") void append(char[] xml,int offset,int length) throws SAXException {  try {    appendChars(this.pointer,xml,offset,length);  } catch (  ExpatException e) {    throw new ParseException(e.getMessage(),this.locator);  }}  }
class C{  protected void checkMIForGivenData(double[][] var1,double[][] var2,int[] kNNs,double[] expectedResults) throws Exception {  ConditionalMutualInfoCalculatorMultiVariateKraskov condMiCalc=getNewCalc(expectedResults == null ? 1 : 2);  for (int kIndex=0; kIndex < kNNs.length; kIndex++) {    int k=kNNs[kIndex];    condMiCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(k));    condMiCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);    condMiCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");    condMiCalc.initialise(var1[0].length,var2[0].length,0);    condMiCalc.setObservations(var1,var2,null);    double mi=condMiCalc.computeAverageLocalOfObservations();    condMiCalc.initialise(var1[0].length,var2[0].length,0);    condMiCalc.setObservations(var1,var2,new double[var1.length][]);    double miFromEmptyVectors=condMiCalc.computeAverageLocalOfObservations();    double expectedMi=0.0;    if (expectedResults == null) {      MutualInfoCalculatorMultiVariateKraskov1 miCalc=new MutualInfoCalculatorMultiVariateKraskov1();      miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(k));      miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);      miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");      miCalc.initialise(var1[0].length,var2[0].length);      miCalc.setObservations(var1,var2);      expectedMi=miCalc.computeAverageLocalOfObservations();    } else {      expectedMi=expectedResults[kIndex];    }    System.out.printf("k=%d: Average MI %.8f (expected %.8f)\n",k,mi,expectedMi);    assertEquals(expectedMi,mi,0.0000001);    assertEquals(expectedMi,miFromEmptyVectors,0.0000001);  }}  }
class C{  public Jcpc(IndependenceTest independenceTest,Score score){  if (independenceTest == null) {    throw new NullPointerException();  }  if (score == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.score=score;}  }
class C{  public static void sort(Comparable[] a){  int n=a.length;  for (int i=0; i < n; i++) {    int min=i;    for (int j=i + 1; j < n; j++) {      if (less(a[j],a[min]))       min=j;    }    exch(a,i,min);    assert isSorted(a,0,i);  }  assert isSorted(a);}  }
class C{  public static boolean intentDataToFile(final Context context,final Uri uri,final String targetFile){  return intentDataToFile(context,uri,new File(targetFile));}  }
class C{  public void loadAIMLFileAsLog(File file,String encoding,boolean pin){  try {    loadAIMLFileAsLog(new FileInputStream(file),encoding,MAX_FILE_SIZE,pin);  } catch (  IOException exception) {    throw new SelfParseException("Parsing error occurred",exception);  }}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,ResultPoint bottomRight,float moduleWidth){  int topRowDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleWidth);  int bottomRowDimension=MathUtils.round(ResultPoint.distance(bottomLeft,bottomRight) / moduleWidth);  return ((((topRowDimension + bottomRowDimension) >> 1) + 8) / 17) * 17;}  }
class C{  public boolean isDragging(){  return draggingPointer != -1;}  }
class C{  public void recordBlockExportOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,String evDesc,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status);    String evType;    evType=opType.getEvType(opStatus);    String opStage=AuditLogManager.AUDITOP_END;    _logger.info("opType: {} detail: {}",opType.toString(),evType + ':' + evDesc);    ExportGroup exportGroup=(ExportGroup)extParam[0];    recordBlockExportEvent(dbClient,exportGroup.getId(),evType,status,evDesc);switch (opType) {case CREATE_EXPORT_GROUP:case UPDATE_EXPORT_GROUP:case DELETE_EXPORT_GROUP:      AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,exportGroup.getLabel(),exportGroup.getId().toString(),exportGroup.getVirtualArray().toString(),exportGroup.getProject().toString());    break;case ADD_EXPORT_INITIATOR:case DELETE_EXPORT_INITIATOR:  Initiator initiator=(Initiator)extParam[1];AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,initiator.getProtocol(),initiator.getInitiatorNode(),initiator.getInitiatorPort(),initiator.getHostName(),exportGroup.getLabel(),exportGroup.getId().toString());break;case ADD_EXPORT_VOLUME:case DELETE_EXPORT_VOLUME:BlockObject bo=(BlockObject)extParam[1];AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,bo.getId().toString(),exportGroup.getLabel(),exportGroup.getId().toString());break;default :_logger.error("unrecognized block export operation type");}_logger.info(String.format("ExportGroup after %s Operation%n%s",opType,exportGroup.toString()));} catch (Exception e) {_logger.error("Failed to record block export operation {}, err: {}",opType.toString(),e);}}  }
class C{  public void overridePosition(boolean override){  if (override) {    overriddenPositionStopWatch.start();  } else {    overriddenPositionStopWatch.stop();  }  overridePosition=override;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void writeCustomObject(Object object) throws IOException {  throw new IOException("unexpected object: " + object);}  }
class C{  void selectNotify(){  updateStatusBar();}  }
class C{  public void readData(DataInput din) throws IOException {}  }
class C{  public boolean isCreateLevelsSequentially(){  Object oo=get_Value(COLUMNNAME_CreateLevelsSequentially);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized void createTestPoints(ReadOnlyVector3 p,double tileWidth,double tileLength){  double width=tileWidth * pixelWidth / 2;  double length=tileLength * pixelLength / 2;  testPoint=new Vector3[5];  testPoint[0]=new Vector3(p.getX() - width,p.getY() - length,p.getZ());  testPoint[1]=new Vector3(p.getX() + width,p.getY() - length,p.getZ());  testPoint[2]=new Vector3(p.getX() + width,p.getY() + length,p.getZ());  testPoint[3]=new Vector3(p.getX() - width,p.getY() + length,p.getZ());  testPoint[4]=new Vector3(p);}  }
class C{  private void desolveGapLessBuffer(){  final int gap=this.imageWidth - getWidth();  final int pixelSize=getPixelSize();  Buffer imagebuffer=getImageBuffer();  imagebuffer.limit(getPixelSizeInData());  imagebuffer.rewind();  this.gapLessBuffer.rewind();  this.gapLessBuffer.limit(0);  PrimitiveType<Buffer> type=primitiveType();  while (this.gapLessBuffer.limit() < pixelSize) {    this.gapLessBuffer.limit(this.gapLessBuffer.position() + getWidth());    type.appendBuffer(imagebuffer,this.gapLessBuffer);    imagebuffer.position(Math.min(imagebuffer.position() + gap,imagebuffer.limit()));  }  this.gapLessBuffer=null;}  }
class C{  protected void clearEditInfo(){  m_editFlag=FolderEditFlag.NONE;}  }
class C{  public boolean isClosing(){  return (this.state == CLOSING);}  }
class C{  protected boolean afterDelete(boolean success){  if (success) {    updateHeader();    Object ii=get_ValueOld("S_ResourceAssignment_ID");    if (ii instanceof Integer) {      int old_S_ResourceAssignment_ID=((Integer)ii).intValue();      if (old_S_ResourceAssignment_ID != 0) {        MResourceAssignment ra=new MResourceAssignment(getCtx(),old_S_ResourceAssignment_ID,get_TrxName());        ra.delete(false);      }    }  }  return success;}  }
class C{  public UpdateRequest add(final SolrInputDocument doc,Integer commitWithin){  return add(doc,commitWithin,null);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  public Executor callbackExecutor(){  return callbackExecutor;}  }
class C{  @Override public VolatileImage createBackBuffer(WComponentPeer peer){  Component target=(Component)peer.getTarget();  int w=Math.max(1,target.getWidth());  int h=Math.max(1,target.getHeight());  return new SunVolatileImage(target,w,h,Boolean.TRUE);}  }
class C{  private int writeOrdsOriented(CoordinateSequence seq,int dim,double[] ordData,int ordIndex,boolean isWriteCCW){  Coordinate[] coords=seq.toCoordinateArray();  boolean isCCW=CGAlgorithms.isCCW(coords);  if (isCCW != isWriteCCW) {    return writeOrdsReverse(seq,dim,ordData,ordIndex);  }  return writeOrds(seq,dim,ordData,ordIndex);}  }
class C{  public void unsetExtendAttrs(){  this.extendAttrs=null;}  }
class C{  private void storeInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);}  }
class C{  public void updateCheque_DD_Card_Deposit_Receipt(final Map instrumentDetailsMap){  updateInstrumentAndPayinSql(instrumentDetailsMap);  addToBankReconcilationSQL(instrumentDetailsMap);}  }
class C{  public static File createFile(Path path){  File file=path.toAbsolutePath().toFile();  if (file.exists() && file.canRead() && file.canWrite()) {    if (file.isFile())     return file;    throw new IllegalStateException("Expecting '" + path + "' to be a file but found a directory");  }  file.getParentFile().mkdirs();  try {    Files.createFile(path);  } catch (  IOException e) {    throw new IllegalStateException("Unable to create the file '" + path + "': "+ e.getMessage(),e);  }  return file;}  }
class C{  @Override public Throwable fillInStackTrace(){  return this;}  }
class C{  public static List<String> dumpResource(Class<?> forClass,String path) throws IOException {  InputStream is=(forClass == null) ? ClassLoader.getSystemResourceAsStream(path) : forClass.getResourceAsStream(path);  if (is == null) {    throw new FileNotFoundException("For class " + forClass + ": "+ path);  }  return readStream(is);}  }
class C{  public Builder precision(double meters){  int level=GeoUtils.geoHashLevelsForPrecision(meters);  if (GeoUtils.geoHashCellSize(level) < meters) {    level=Math.max(1,level - 1);  }  return precision(level);}  }
class C{  public void trimToSize(){  if (_data.length > size()) {    float[] tmp=new float[size()];    toNativeArray(tmp,0,tmp.length);    _data=tmp;  }}  }
class C{  Account(int newId,double newBalance){  id=newId;  balance=newBalance;  dateCreated=new Date();}  }
class C{  public void start(Stage stage) throws Exception {  stage.setScene(new Scene(new MyDemoPane()));  stage.setTitle("JFreeChart: CrosshairOverlayFXDemo1.java");  stage.setWidth(700);  stage.setHeight(390);  stage.show();}  }
class C{  public static String s4(int v){  char[] result=new char[9];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 8; i++) {    result[8 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public DeleteObjectsResult deleteObjects(DeleteObjectsRequest deleteObjectsRequest){  assertParameterNotNull(deleteObjectsRequest,"deleteObjectsRequest");  String bucketName=deleteObjectsRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_DELETE,null);  byte[] rawContent=deleteObjectsRequestMarshaller.marshall(deleteObjectsRequest);  Map<String,String> headers=new HashMap<String,String>();  addDeleteObjectsRequiredHeaders(headers,rawContent);  addDeleteObjectsOptionalHeaders(headers,deleteObjectsRequest);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.POST).setBucket(bucketName).setParameters(params).setHeaders(headers).setInputSize(rawContent.length).setInputStream(new ByteArrayInputStream(rawContent)).setOriginalRequest(deleteObjectsRequest).build();  return doOperation(request,deleteObjectsResponseParser,bucketName,null,true);}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public void notifyUnRegistration(RcsServiceRegistration.ReasonCode reasonCode){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceUnRegistered(reasonCode);  }}  }
class C{  public void expandOpenContainers(Tree tree){  if (tree == null) {    String message=Logging.getMessage("nullValue.TreeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (this.mustExpandNode())   tree.expandPath(this.getPath());  for (  TreeNode child : this.getChildren()) {    if (child instanceof KMLFeatureTreeNode)     ((KMLFeatureTreeNode)child).expandOpenContainers(tree);  }}  }
class C{  @Override public void addAttribute(String name,float value){  String str=Float.toString(value);  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);  ((Element)current).setAttribute(name,str);}  }
class C{  private void allocateOrderPosition(ShippingOrderPosition shippingOrderPosition){  ShippingOrderPositionSplit split;  PackagingUnit pUnit;  int splitNo=1;  while (!shippingOrderPosition.isAllocated()) {    splitNo=shippingOrderPosition.getNextSplitNumber();    split=new ShippingOrderPositionSplit(shippingOrderPosition,splitNo);    try {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Trying to allocate OrderPosition: " + shippingOrderPosition.getPositionId());      }      pUnit=allocator.allocate(new AllocationRule(shippingOrderPosition.getQtyOrdered(),shippingOrderPosition.getProduct()));    } catch (    AllocationException ae) {      shippingOrderPosition.setNextAllocationDate(new Date());    }  }}  }
class C{  protected AngularObject(String name,T o,String noteId,String paragraphId,AngularObjectListener listener){  this.name=name;  this.noteId=noteId;  this.paragraphId=paragraphId;  this.listener=listener;  object=o;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedatabegining.class,args);}  }
class C{  public static void updatePolicyItem(GitVcsSettings.UpdateChangesPolicy updateChangesPolicy,JRadioButton stashRadioButton,JRadioButton shelveRadioButton){switch (updateChangesPolicy == null ? GitVcsSettings.UpdateChangesPolicy.STASH : updateChangesPolicy) {case STASH:    stashRadioButton.setSelected(true);  return;case SHELVE:shelveRadioButton.setSelected(true);return;default :assert false : "Unknown policy value: " + updateChangesPolicy;}}  }
class C{  public void resolveMemberMethods(MethodFilter methodFilter){  _memberMethods=new AnnotatedMethodMap();  AnnotatedMethodMap mixins=new AnnotatedMethodMap();  _addMemberMethods(_class,methodFilter,_memberMethods,_primaryMixIn,mixins);  for (  Class<?> cls : _superTypes) {    Class<?> mixin=(_mixInResolver == null) ? null : _mixInResolver.findMixInClassFor(cls);    _addMemberMethods(cls,methodFilter,_memberMethods,mixin,mixins);  }  if (_mixInResolver != null) {    Class<?> mixin=_mixInResolver.findMixInClassFor(Object.class);    if (mixin != null) {      _addMethodMixIns(_class,methodFilter,_memberMethods,mixin,mixins);    }  }  if (_annotationIntrospector != null) {    if (!mixins.isEmpty()) {      Iterator<AnnotatedMethod> it=mixins.iterator();      while (it.hasNext()) {        AnnotatedMethod mixIn=it.next();        try {          Method m=Object.class.getDeclaredMethod(mixIn.getName(),mixIn.getParameterClasses());          if (m != null) {            AnnotatedMethod am=_constructMethod(m);            _addMixOvers(mixIn.getAnnotated(),am,false);            _memberMethods.add(am);          }        } catch (        Exception e) {        }      }    }  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  void sendMessageToHandlerNoControllerReset(List<OFMessage> messages) throws Exception {  setupMessageEvent(messages);  handler.messageReceived(ctx,messageEvent);}  }
class C{  public static void copy(File src,File dst) throws IOException {  InputStream in=new FileInputStream(src);  OutputStream out=new FileOutputStream(dst);  byte[] buf=new byte[8192];  int len;  while ((len=in.read(buf)) > 0)   out.write(buf,0,len);  in.close();  out.close();}  }
class C{  static public void showDepthWarning(String method){  showWarning(method + "() can only be used with a renderer that " + "supports 3D, such as P3D or OPENGL.");}  }
class C{  public void writeField(final String name,final boolean value) throws java.io.IOException {  writeField(name,Boolean.toString(value));}  }
class C{  public static int EADDRINUSE(){  return Errno.EADDRINUSE.intValue();}  }
class C{  public ContourAttrib(double level){  this.level=level;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  double x=dataset.getXValue(series,item);  if (!domainAxis.getRange().contains(x)) {    return;  }  double xx=domainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());  Shape entityArea=null;  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  PlotOrientation orientation=plot.getOrientation();  RectangleEdge location=plot.getRangeAxisEdge();  Paint itemPaint=getItemPaint(series,item);  Stroke itemStroke=getItemStroke(series,item);  g2.setPaint(itemPaint);  g2.setStroke(itemStroke);  if (dataset instanceof OHLCDataset) {    OHLCDataset hld=(OHLCDataset)dataset;    double yHigh=hld.getHighValue(series,item);    double yLow=hld.getLowValue(series,item);    if (!Double.isNaN(yHigh) && !Double.isNaN(yLow)) {      double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,location);      double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,location);      if (orientation == PlotOrientation.HORIZONTAL) {        g2.draw(new Line2D.Double(yyLow,xx,yyHigh,xx));        entityArea=new Rectangle2D.Double(Math.min(yyLow,yyHigh),xx - 1.0,Math.abs(yyHigh - yyLow),2.0);      } else       if (orientation == PlotOrientation.VERTICAL) {        g2.draw(new Line2D.Double(xx,yyLow,xx,yyHigh));        entityArea=new Rectangle2D.Double(xx - 1.0,Math.min(yyLow,yyHigh),2.0,Math.abs(yyHigh - yyLow));      }    }    double delta=getTickLength();    if (domainAxis.isInverted()) {      delta=-delta;    }    if (getDrawOpenTicks()) {      double yOpen=hld.getOpenValue(series,item);      if (!Double.isNaN(yOpen)) {        double yyOpen=rangeAxis.valueToJava2D(yOpen,dataArea,location);        if (this.openTickPaint != null) {          g2.setPaint(this.openTickPaint);        } else {          g2.setPaint(itemPaint);        }        if (orientation == PlotOrientation.HORIZONTAL) {          g2.draw(new Line2D.Double(yyOpen,xx + delta,yyOpen,xx));        } else         if (orientation == PlotOrientation.VERTICAL) {          g2.draw(new Line2D.Double(xx - delta,yyOpen,xx,yyOpen));        }      }    }    if (getDrawCloseTicks()) {      double yClose=hld.getCloseValue(series,item);      if (!Double.isNaN(yClose)) {        double yyClose=rangeAxis.valueToJava2D(yClose,dataArea,location);        if (this.closeTickPaint != null) {          g2.setPaint(this.closeTickPaint);        } else {          g2.setPaint(itemPaint);        }        if (orientation == PlotOrientation.HORIZONTAL) {          g2.draw(new Line2D.Double(yyClose,xx,yyClose,xx - delta));        } else         if (orientation == PlotOrientation.VERTICAL) {          g2.draw(new Line2D.Double(xx,yyClose,xx + delta,yyClose));        }      }    }  } else {    if (item > 0) {      double x0=dataset.getXValue(series,item - 1);      double y0=dataset.getYValue(series,item - 1);      double y=dataset.getYValue(series,item);      if (Double.isNaN(x0) || Double.isNaN(y0) || Double.isNaN(y)) {        return;      }      double xx0=domainAxis.valueToJava2D(x0,dataArea,plot.getDomainAxisEdge());      double yy0=rangeAxis.valueToJava2D(y0,dataArea,location);      double yy=rangeAxis.valueToJava2D(y,dataArea,location);      if (orientation == PlotOrientation.HORIZONTAL) {        g2.draw(new Line2D.Double(yy0,xx0,yy,xx));      } else       if (orientation == PlotOrientation.VERTICAL) {        g2.draw(new Line2D.Double(xx0,yy0,xx,yy));      }    }  }  if (entities != null) {    addEntity(entities,entityArea,dataset,series,item,0.0,0.0);  }}  }
class C{  public static void writeIntList(IonWriter writer,int[] values) throws IOException {  if (writer instanceof PrivateListWriter) {    ((PrivateListWriter)writer).writeIntList(values);    return;  }  writer.stepIn(IonType.LIST);  for (int ii=0; ii < values.length; ii++) {    writer.writeInt(values[ii]);  }  writer.stepOut();}  }
class C{  public int length(){  return right - left + 1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Vector2f multLocal(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x*=vec.x;  y*=vec.y;  return this;}  }
class C{  public Channel copyOf(){  Channel channel=new Channel(mName);  channel.setSystem(mSystem);  channel.setSite(mSite);  channel.setAliasListName(mAliasListName);  AuxDecodeConfiguration aux=new AuxDecodeConfiguration();  for (  DecoderType auxType : aux.getAuxDecoders()) {    aux.addAuxDecoder(auxType);  }  channel.setAuxDecodeConfiguration(aux);  channel.setDecodeConfiguration(DecoderFactory.copy(mDecodeConfiguration));  EventLogConfiguration log=new EventLogConfiguration();  for (  EventLogType logType : mEventLogConfiguration.getLoggers()) {    log.addLogger(logType);  }  channel.setEventLogConfiguration(log);  RecordConfiguration record=new RecordConfiguration();  for (  RecorderType recordType : mRecordConfiguration.getRecorders()) {    record.addRecorder(recordType);  }  channel.setRecordConfiguration(record);  channel.setSourceConfiguration(SourceConfigFactory.copy(mSourceConfiguration));  return channel;}  }
class C{  public void put(String fieldName,BigDecimal v){  if (v == null) {    putNull(fieldName);  } else {    _put(fieldName,numberNode(v));  }}  }
class C{  public void start(){  if (TransitionConfig.isDebug()) {    getTransitionStateHolder().start();  }  mLastProgress=Float.MIN_VALUE;  TransitionController transitionController;  for (int i=0, size=mTransitionControls.size(); i < size; i++) {    transitionController=mTransitionControls.get(i);    if (mInterpolator != null) {      transitionController.setInterpolator(mInterpolator);    }    if (mTarget != null) {      transitionController.setTarget(mTarget);    }    transitionController.setUpdateStateAfterUpdateProgress(mUpdateStateAfterUpdateProgress);    transitionController.start();  }}  }
class C{  public boolean isSymmetricPositiveDefinite(){  return isSymmetricPositiveDefinite;}  }
class C{  public static Map<String,List<DataFileFooter>> createDataFileFooterMappingForSegments(List<TableBlockInfo> tableBlockInfoList) throws IndexBuilderException {  Map<String,List<DataFileFooter>> segmentBlockInfoMapping=new HashMap<>();  for (  TableBlockInfo blockInfo : tableBlockInfoList) {    List<DataFileFooter> eachSegmentBlocks=new ArrayList<>();    String segId=blockInfo.getSegmentId();    DataFileFooter dataFileMatadata=null;    List<DataFileFooter> metadataList=segmentBlockInfoMapping.get(segId);    try {      dataFileMatadata=CarbonUtil.readMetadatFile(blockInfo.getFilePath(),blockInfo.getBlockOffset(),blockInfo.getBlockLength());    } catch (    CarbonUtilException e) {      throw new IndexBuilderException(e);    }    if (null == metadataList) {      eachSegmentBlocks.add(dataFileMatadata);      segmentBlockInfoMapping.put(segId,eachSegmentBlocks);    } else {      metadataList.add(dataFileMatadata);    }  }  return segmentBlockInfoMapping;}  }
class C{  public ProtocolErrorException(final IScope scope,final String message){  super(scope,message);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public AbFocusView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  private void renderPaymentItems(){  for (  BasicPaymentItem basicPaymentItem : loadedBasicPaymentItems.getBasicPaymentItems()) {    RenderPaymentItem renderer=new RenderPaymentItem();    renderer.renderPaymentItem(basicPaymentItem,(ViewGroup)findViewById(R.id.listPaymentProducts));  }  if (!loadedBasicPaymentItems.getAccountsOnFile().isEmpty()) {    findViewById(R.id.listAccountsOnFileHeader).setVisibility(View.VISIBLE);    findViewById(R.id.listAccountsOnFile).setVisibility(View.VISIBLE);    findViewById(R.id.listAccountsOnFileDivider).setVisibility(View.VISIBLE);    for (    AccountOnFile accountOnFile : loadedBasicPaymentItems.getAccountsOnFile()) {      RenderAccountOnFile accountRenderer=new RenderAccountOnFile();      accountRenderer.renderAccountOnFile(accountOnFile,accountOnFile.getPaymentProductId(),(ViewGroup)findViewById(R.id.listAccountsOnFile));    }  }  dialogUtil.dismissDialog(progressDialog);}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.wallPaint,stream);}  }
class C{  public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request,HttpServletResponse response){  String trackingCodeId=request.getParameter("ptc");  if (UtilValidate.isNotEmpty(trackingCodeId)) {    Delegator delegator=(Delegator)request.getAttribute("delegator");    GenericValue trackingCode;    try {      trackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",trackingCodeId).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);      return "error";    }    if (trackingCode == null) {      String dtc=request.getParameter("dtc");      if (UtilValidate.isEmpty(dtc)) {        dtc=EntityUtilProperties.getPropertyValue("general","partner.trackingCodeId.default",delegator);      }      if (UtilValidate.isNotEmpty(dtc)) {        GenericValue defaultTrackingCode=null;        try {          defaultTrackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",dtc).cache().queryOne();        } catch (        GenericEntityException e) {          Debug.logError(e,"Error looking up Default values TrackingCode with trackingCodeId [" + dtc + "], not using the dtc value for new TrackingCode defaults",module);        }        if (defaultTrackingCode != null) {          defaultTrackingCode.set("trackingCodeId",trackingCodeId);          defaultTrackingCode.set("trackingCodeTypeId","PARTNER_MGD");          defaultTrackingCode.set("createdDate",UtilDateTime.nowTimestamp());          defaultTrackingCode.set("createdByUserLogin",null);          defaultTrackingCode.set("lastModifiedDate",UtilDateTime.nowTimestamp());          defaultTrackingCode.set("lastModifiedByUserLogin",null);          trackingCode=defaultTrackingCode;          try {            trackingCode.create();          } catch (          GenericEntityException e) {            Debug.logError(e,"Error creating new Partner TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);            return "error";          }        }      }      if (trackingCode == null) {        trackingCode=delegator.makeValue("TrackingCode");        trackingCode.set("trackingCodeId",trackingCodeId);        trackingCode.set("trackingCodeTypeId","PARTNER_MGD");        trackingCode.set("createdDate",UtilDateTime.nowTimestamp());        trackingCode.set("lastModifiedDate",UtilDateTime.nowTimestamp());        trackingCode.set("trackableLifetime",Long.valueOf(10000000000L));        trackingCode.set("billableLifetime",Long.valueOf(2592000));        trackingCode.set("comments","This TrackingCode has default values because no default TrackingCode could be found.");        Debug.logWarning("No default TrackingCode record was found, using a TrackingCode with hard coded default values: " + trackingCode,module);        try {          trackingCode.create();        } catch (        GenericEntityException e) {          Debug.logError(e,"Error creating new Partner TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);          return "error";        }      }    }    return processTrackingCode(trackingCode,request,response,"TKCDSRC_URL_PARAM");  } else {    return "success";  }}  }
class C{  public static void downloadJre(String jreVersion,String platform,String location){  String property;  if (jreVersion == null) {    property=System.getProperty("java.runtime.version");  } else {    property=jreVersion;  }  Matcher m=Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)_(\\d+)\\-b(\\d+)").matcher(property);  if (m.matches()) {    String urlString="http://download.oracle.com/otn-pub/java/jdk/" + m.group(2) + "u"+ m.group(4)+ "-b"+ m.group(5)+ "/jre-"+ m.group(2)+ "u"+ m.group(4)+ "-"+ platform+ ".tar.gz";    attemptDownload(urlString,new File(location),0);  }}  }
class C{  public void generate(){  List<String> targets=new ArrayList<>();  for (  Map.Entry<YeomanGeneratorType,List<String>> entry : namesByTypes.entrySet()) {    YeomanGeneratorType type=entry.getKey();    List<String> names=entry.getValue();    for (    String name : names) {      targets.add("angular:".concat(type.getName().toLowerCase(Locale.ENGLISH)));      targets.add(name);    }  }  BuildOptions buildOptions=dtoFactory.createDto(BuildOptions.class).withTargets(targets).withBuilderName("yeoman");  builderAgent.build(buildOptions,"Using Yeoman generator...","The Yeoman generator has finished","Failed to use Yeoman generator","yeoman",this);  view.disableGenerateButton();  view.enableProgressOnGenerateButton();}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public Interval toInterval(DateTimeZone zone){  zone=DateTimeUtils.getZone(zone);  DateTime start=toDateTimeAtStartOfDay(zone);  DateTime end=plusDays(1).toDateTimeAtStartOfDay(zone);  return new Interval(start,end);}  }
class C{  private static Capitalization containsAt(String s,int index,String... substrings){  for (  String substring : substrings) {    if (index + substring.length() <= s.length()) {      boolean found=true;      Boolean up1=null;      Boolean up2=null;      for (int i=0; i < substring.length(); i++) {        char c1=s.charAt(index + i);        char c2=substring.charAt(i);        if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {          found=false;          break;        } else         if (Character.isLetter(c1)) {          if (up1 == null) {            up1=Character.isUpperCase(c1);          } else           if (up2 == null) {            up2=Character.isUpperCase(c1);          }        }      }      if (found) {        return Capitalization.toCapitalization(up1,up2);      }    }  }  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.596 -0500",hash_original_method="B2134E4964C5B0957E3BC21A40B5447F",hash_generated_method="8A2FEDC9D2FB04DC6D60E0090934AFF3") synchronized void syncSettingsAndCreateHandler(BrowserFrame frame){  mBrowserFrame=frame;  if (DebugFlags.WEB_SETTINGS) {    junit.framework.Assert.assertTrue(frame.mNativeFrame != 0);  }  SharedPreferences sp=mContext.getSharedPreferences(PREF_FILE,Context.MODE_PRIVATE);  if (mDoubleTapToastCount > 0) {    mDoubleTapToastCount=sp.getInt(DOUBLE_TAP_TOAST_COUNT,mDoubleTapToastCount);  }  nativeSync(frame.mNativeFrame);  mSyncPending=false;  mEventHandler.createHandler();}  }
class C{  public static boolean shouldIgnoreCaseChange(@NotNull String onePath,@NotNull String secondPath){  return !SystemInfo.isFileSystemCaseSensitive && onlyCaseChanged(onePath,secondPath);}  }
class C{  public final byte[] genExemptionBlob() throws IllegalStateException, ExemptionMechanismException {  if (!isInit) {    throw new IllegalStateException("ExemptionMechanism is not initialized");  }  generated=false;  byte[] result=spiImpl.engineGenExemptionBlob();  generated=true;  return result;}  }
class C{  @Override public void run(){  String cname=controller.getName() + " [" + controller.getType().toString()+ "]";  UsbNode cNode=UsbNode.getNode(cname,controller,null);  cNode=(UsbNode)insertNode(cNode,dRoot);  String dname=component.getName() + " [" + component.getIdentifier().toString()+ "]";  UsbNode dNode=UsbNode.getNode(dname,controller,component);  dNode=(UsbNode)insertNode(dNode,cNode);  dNode.setValue(value);  pcs.firePropertyChange("Value",dNode,Float.valueOf(value));}  }
class C{  public InternalDistributedMember(String i,int p){  this(i,p,Version.CURRENT);}  }
class C{  public int read() throws IOException {  int len=read(rbuf,0,1);  if (len <= 0)   return -1;  return (rbuf[0] & 0xFF);}  }
class C{  public static void grantUriPermissions(Context context,Intent intent,int permissions){  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {    List<ResolveInfo> resInfoList=context.getPackageManager().queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);    for (    ResolveInfo resolveInfo : resInfoList) {      String packageName=resolveInfo.activityInfo.packageName;      context.grantUriPermission(packageName,intent.getData(),permissions);    }  } else {    intent.addFlags(permissions);  }}  }
class C{  public ColorfulAdapter(ColorDataSet data){  mDataSet=data;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String idrisiHeaderFile=null;  String idrisiDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      idrisiDataFile=imageFiles[i];      if (!((new File(idrisiDataFile)).exists())) {        showFeedback("IDRISI raster file does not exist.");        break;      }      idrisiHeaderFile=idrisiDataFile.replace(".rst",".rdc");      if (!idrisiHeaderFile.contains(".rdc")) {        idrisiHeaderFile=idrisiDataFile.replace(".RST",".rdc");      }      whiteboxHeaderFile=idrisiHeaderFile.replace(".rdc",".dep");      whiteboxDataFile=idrisiHeaderFile.replace(".rdc",".tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      if (!createHeaderFile(idrisiHeaderFile,whiteboxHeaderFile)) {        showFeedback("IDRISI header file was not read properly. " + "Tool failed to import");        return;      }      int length;      byte[] buffer=new byte[1024];      if (!idrisiFileIsByteDataType && !idrisiFileIsRGB) {        File fromfile=new File(idrisiDataFile);        inStream=new FileInputStream(fromfile);        File tofile=new File(whiteboxDataFile);        outStream=new FileOutputStream(tofile);        while ((length=inStream.read(buffer)) > 0) {          outStream.write(buffer,0,length);        }        outStream.close();        inStream.close();      } else       if (!idrisiFileIsRGB) {        RandomAccessFile rIn=null;        FileChannel inChannel=null;        int numBytesToRead=nrows * ncols;        ByteBuffer buf=ByteBuffer.allocate(numBytesToRead);        rIn=new RandomAccessFile(idrisiDataFile,"r");        inChannel=rIn.getChannel();        inChannel.position(0);        inChannel.read(buf);        java.nio.ByteOrder byteorder=java.nio.ByteOrder.nativeOrder();        buf.order(byteorder);        buf.rewind();        byte[] ba=new byte[numBytesToRead];        buf.get(ba);        WhiteboxRaster wr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        double z;        int row=0, col=0;        for (int j=0; j < numBytesToRead; j++) {          z=(double)(ba[j] & 0xff);          wr.setValue(row,col,z);          col++;          if (col == ncols) {            col=0;            row++;          }        }        wr.close();        inChannel.close();      } else {        RandomAccessFile rIn=null;        FileChannel inChannel=null;        int numBytesToRead=nrows * ncols * 3;        ByteBuffer buf=ByteBuffer.allocate(numBytesToRead);        rIn=new RandomAccessFile(idrisiDataFile,"r");        inChannel=rIn.getChannel();        inChannel.position(0);        inChannel.read(buf);        java.nio.ByteOrder byteorder=java.nio.ByteOrder.nativeOrder();        buf.order(byteorder);        buf.rewind();        byte[] ba=new byte[numBytesToRead];        buf.get(ba);        int r, g, b;        WhiteboxRaster wr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        double z;        int row=0, col=0;        for (int j=0; j < numBytesToRead; j+=3) {          b=(int)(ba[j] & 0xff);          g=(int)(ba[j + 1] & 0xff);          r=(int)(ba[j + 2] & 0xff);          z=(double)((255 << 24) | (b << 16) | (g << 8)| r);          wr.setValue(row,col,z);          col++;          if (col == ncols) {            col=0;            row++;          }        }        wr.close();        inChannel.close();      }      output=new WhiteboxRaster(whiteboxHeaderFile,"r");      output.findMinAndMaxVals();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.writeHeaderFile();      output.close();      returnData(whiteboxHeaderFile);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void changeAnnId(int annId){  m_annId=annId;}  }
class C{  public BufferedImagePixelMatrix(final BufferedImage image){  if (image == null) {    throw new IllegalArgumentException("image must not be null");  }  this.image=makeIndexedRGBImage(image);  this.propertyChangeSupport=new PropertyChangeSupport(this);}  }
class C{  public cudaTextureDesc(){}  }
class C{  void drawChar(Graphics g,char character,int x,int y){}  }
class C{  public FileWriter(String fileName) throws IOException {  super(new FileOutputStream(fileName));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testExtFuncNotAllowed(){  Policy p=new SimplePolicy(new AllPermission());  Policy.setPolicy(p);  System.setSecurityManager(new SecurityManager());  try {    evaluate(false);  } catch (  XPathFactoryConfigurationException e) {    fail(e.getMessage());  }catch (  XPathExpressionException ex) {    System.out.println("testExtFuncNotAllowed: OK");  } finally {    System.setSecurityManager(null);  }}  }
class C{  public static Border createEtchedRaised(){  Border b=new Border();  b.type=TYPE_ETCHED_RAISED;  b.themeColors=true;  b.thickness=2;  return b;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void rotateX(double degrees){  Transform3D other=new Transform3D();  other.rotX(degrees * Math.PI / 180);  transform(other);}  }
class C{  public CategoricalResults result(int i){  if (i < 0 || i >= getNumberOfPaths())   throw new IndexOutOfBoundsException("Invalid path, can to return a result for path " + i);  return results[i];}  }
class C{  private static boolean equalsMayBeNullOrZeroLen(String s1,String s2){  int len1=(s1 == null) ? 0 : s1.length();  int len2=(s2 == null) ? 0 : s2.length();  return (len1 != len2) ? false : (len1 == 0) ? true : s1.equals(s2);}  }
class C{  public String rawOutputTipText(){  return "Save raw output (useful for debugging). If set, then output is " + "sent to the destination specified by outputFile";}  }
class C{  protected VariableValue createIndexedVariableFromElement(Element e,String name,String comment,String cvName,boolean readOnly,boolean infoOnly,boolean writeOnly,boolean opsOnly,String cv,String mask,String item,String productID,String modelID,String familyID) throws NumberFormatException {  VariableValue iv=null;  Element child;  if ((child=e.getChild("indexedVal")) != null) {    iv=processIndexedVal(child,name,comment,cvName,readOnly,infoOnly,writeOnly,opsOnly,cv,mask,item);  } else   if ((child=e.getChild("ienumVal")) != null) {    iv=processIEnumVal(child,name,comment,cvName,readOnly,infoOnly,writeOnly,opsOnly,cv,mask,item,productID,modelID,familyID);  } else   if ((child=e.getChild("indexedPairVal")) != null) {    iv=processIndexedPairVal(child,readOnly,infoOnly,writeOnly,name,comment,cvName,opsOnly,cv,mask,item);  }  return iv;}  }
class C{  private void updateRtl(Resources resources){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {    mRtl=resources.getConfiguration().getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;  } else {    mRtl=false;  }}  }
class C{  public static RowLimitClause create(int numRows,int offset){  return new RowLimitClause(numRows,offset,null,null);}  }
class C{  public BeanInstance(JComponent container,Object bean,int x,int y,Integer... tab){  m_bean=bean;  m_x=x;  m_y=y;  addBean(container,tab);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList currentList=getList();  Projection proj=getProjection();  if (currentList != null && proj != null) {    currentList.generate(proj);  }  return currentList;}  }
class C{  public LinkNode(int value){  this.value=value;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoVolRecUc[");  buffer.append("m_actSize = ").append(m_actSize);  buffer.append(", m_stat = ").append(m_stat);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void init(){  startTimer();  ActionStatisticsCollector.getInstance().start();}  }
class C{  protected Timeout undeploymentTimeout(){  return new Timeout(20,5000);}  }
class C{  public KLHandler(String device){  try {    setDeviceName(device);  } catch (  Exception ex) {    log.fatal(ex);  }  commTimer=new Timer(commTimeoutTime,commTimeoutHandler);  commTimer.setInitialDelay(commTimeoutTime);  commTimer.stop();}  }
class C{  public String startSetTipText(){  return "Set the start point for the search. This is specified as a comma " + "seperated list off attribute indexes starting at 1. It can include " + "ranges. Eg. 1,2,5-9,17.";}  }
class C{  public boolean isReference(){  return value.isReference();}  }
class C{  public static byte[] decompress(byte[] data) throws IOException, DataFormatException {  Inflater inflater=new Inflater(Boolean.TRUE);  inflater.setInput(data);  ByteArrayOutputStream outputStream=new ByteArrayOutputStream(data.length);  byte[] buffer=new byte[1024];  while (!inflater.finished()) {    int count=inflater.inflate(buffer);    outputStream.write(buffer,0,count);  }  outputStream.close();  byte[] output=outputStream.toByteArray();  inflater.end();  return output;}  }
class C{  private static Value callToString(Session session,Value v,int isolateId){  v=safeValue(v,isolateId);  return callFunction(session,v,"toString",new Value[0],isolateId);}  }
class C{  public void clearWarnings(){  throw new UnsupportedOperationException();}  }
class C{  @Deprecated public XmlFriendlyReplacer(final String dollarReplacement,final String underscoreReplacement){  super(dollarReplacement,underscoreReplacement);}  }
class C{  static public void triggerAction(final int i,BaseEvent baseEvent){  if (Cfg.DEBUG) {    Check.requires(actionsMap != null," (triggerAction) Assert failed, null actionsMap");  }  Action action=actionsMap.get(Integer.valueOf(i));  if (Cfg.DEBUG) {    Check.asserts(action != null," (triggerAction) Assert failed, null action");  }  int qq=action.getQueue();  @SuppressWarnings("unchecked") ArrayList<Trigger> act=(ArrayList<Trigger>)triggeredActions[qq];  Object tsem=triggeredSemaphore[qq];  if (Cfg.DEBUG)   Check.asserts(act != null,"triggerAction, null act");  if (Cfg.DEBUG)   Check.asserts(tsem != null,"triggerAction, null tsem");  Trigger trigger=new Trigger(i,baseEvent);synchronized (act) {    if (!act.contains(trigger)) {      act.add(new Trigger(i,baseEvent));    }  }  if (Cfg.DEBUG) {    Check.log(TAG + " (triggerAction): notifing queue: " + qq+ " size: "+ triggeredActions[qq].size());  }synchronized (tsem) {    try {      tsem.notifyAll();    } catch (    final Exception ex) {      if (Cfg.EXCEPTION) {        Check.log(ex);      }      if (Cfg.DEBUG) {        Check.log(ex);      }    }  }}  }
class C{  public IconicsDrawable iconOffsetXDp(int iconOffsetXDp){  return iconOffsetXPx(Utils.convertDpToPx(mContext,iconOffsetXDp));}  }
class C{  protected <T>T executeSingleResultQuery(CriteriaQuery<T> criteria,String message){  List<T> resultList=entityManager.createQuery(criteria).getResultList();  Validate.isTrue(resultList.size() < 2,message);  return resultList.size() == 1 ? resultList.get(0) : null;}  }
class C{  public void sort(){  if (dirty) {    if (facetFieldSort.equals(FacetParams.FACET_SORT_COUNT)) {      Collections.sort(this.explicitValues,new PivotFacetCountComparator());    } else     if (facetFieldSort.equals(FacetParams.FACET_SORT_INDEX)) {      Collections.sort(this.explicitValues,new PivotFacetValueComparator());    }    dirty=false;  }  for (  PivotFacetValue value : this.explicitValues)   if (value.getChildPivot() != null) {    value.getChildPivot().sort();  }  if (missingValue != null && missingValue.getChildPivot() != null) {    missingValue.getChildPivot().sort();  }}  }
class C{  private StringBuilder resolveDefines(StringBuilder str,SubRangeAggregator excluded,Set<String> defines){  if (str == null) {    return null;  }  try {    CompilerDirectiveFactory factory=new CompilerDirectiveFactory();    List<CompilerDirective> allDirectives=factory.produce(str.toString());    SubRangeAggregator toComment=processCompilerDirectives(allDirectives,defines,excluded);    commentUnwantedDefinitions(str,toComment);  } catch (  CompilerDirectiveFactorySyntaxException e) {    DelphiUtils.LOG.trace(e.getMessage());  }catch (  DefineResolverException e) {    DelphiUtils.LOG.debug(e.getMessage());  }  return str;}  }
class C{  public void markShown(){  PreferenceManager.getDefaultSharedPreferences(getContext()).edit().putBoolean(mPrefsKey,true).apply();}  }
class C{  public PTBTokenizer(){  this(false);}  }
class C{  public void makePdf2Png(String pdf_filename){  String cmd="perl " + _home + "/resources/scripts/convert_pdf2png.pl "+ _output_directory+ " "+ pdf_filename;  String command_result=Util.executeCommand(cmd);}  }
class C{  public void cacheFlagsOn(int cacheFlagsOn){  this.cacheFlagsOn=cacheFlagsOn;}  }
class C{  private DigestURL(){  super();  this.hash=null;}  }
class C{  public static DoubleMatrix2D greater(DoubleMatrix2D A,double s){  return A.assign(F.greater(s));}  }
class C{  public final static boolean isSubDelimiter(int c){switch (c) {case '!':case '$':case '&':case '\'':case '(':case ')':case '*':case '+':case ',':case ';':case '=':    return true;default :  return false;}}  }
class C{  public Context createSubcontext(Name name) throws NamingException {  checkIsDestroyed();  Name parsedName=getParsedName(name);  if (parsedName.size() == 0 || parsedName.get(0).length() == 0) {    throw new InvalidNameException(LocalizedStrings.ContextImpl_NAME_CAN_NOT_BE_EMPTY.toLocalizedString());  }  String subContextName=parsedName.get(0);  Object boundObject=ctxMaps.get(parsedName.get(0));  if (parsedName.size() == 1) {    if (boundObject == null) {      Context subContext=new ContextImpl(this,subContextName);      ctxMaps.put(subContextName,subContext);      return subContext;    } else {      throw new NameAlreadyBoundException(LocalizedStrings.ContextImpl_NAME_0_IS_ALREADY_BOUND.toLocalizedString(subContextName));    }  } else {    if (boundObject instanceof Context) {      return ((Context)boundObject).createSubcontext(parsedName.getSuffix(1));    } else {      throw new NotContextException(LocalizedStrings.ContextImpl_EXPECTED_CONTEXT_BUT_FOUND_0.toLocalizedString(boundObject));    }  }}  }
class C{  Boolean isJDK12Target(Class clazz){  return (Boolean)jdk12AppletInfo.get(clazz.toString());}  }
class C{  public void saveDatabase(){  Intent i=new Intent("com.felkertech.cumulustv.RECEIVER");  i.putExtra(INTENT_EXTRA_ACTION,INTENT_EXTRA_ACTION_DATABASE_WRITE);  sendBroadcast(i);  finish();}  }
class C{  public double zSum(){  double sum=0;  int s=stride;  int i=index(0);  final double[] elems=this.elements;  if (elems == null)   throw new InternalError();  for (int k=size; --k >= 0; ) {    sum+=elems[i];    i+=s;  }  return sum;}  }
class C{  public final void writeChars(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    int v=s.charAt(i);    write((v >>> 8) & 0xFF);    write((v) & 0xFF);  }}  }
class C{  private static <I,A>ConsumedT<I,A> consError(boolean consumed,Input<I> input,String expected){  final Message<I> msg=Message.lazy(null);  return ConsumedT.of(consumed,null);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public static double pdf(double x,double lower,double upper){  return (x >= lower && x <= upper ? 1.0 / (upper - lower) : 0.0);}  }
class C{  public pre addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected void expirePage(P page){  if (LOG.isDebuggingFine()) {    LOG.debugFine("Write to backing:" + page.getPageID());  }  if (page.isDirty()) {    file.writePage(page);  }}  }
class C{  public void testCreateDeployerForRemoteContainers(){  this.factory.registerDeployer(RemoteContainerStub.ID,DeployerType.REMOTE,RemoteDeployerStub.class);  Deployer deployer=this.factory.createDeployer(new RemoteContainerStub());  assertEquals(RemoteDeployerStub.class.getName(),deployer.getClass().getName());  assertEquals(DeployerType.REMOTE,deployer.getType());}  }
class C{  public static String nextCode(final String immCode,final boolean mainCycle){  return nextCode(immCode,mainCycle,new Date());}  }
class C{  public void actionPerformed(ActionEvent e){  workbench.deselectAll();  for (  Component comp : workbench.getComponents()) {    if (comp instanceof DisplayNode) {      Node node=((DisplayNode)comp).getModelNode();      if (node.getNodeType() == NodeType.LATENT) {        workbench.selectNode(node);      }    }  }  for (  Component comp : workbench.getComponents()) {    if (comp instanceof DisplayEdge) {      Edge edge=((DisplayEdge)comp).getModelEdge();      if (edge.getNode1().getNodeType() == NodeType.LATENT && edge.getNode2().getNodeType() == NodeType.LATENT) {        workbench.selectEdge(edge);      }    }  }}  }
class C{  public static ContentValues values(Place place){  return values(new ContentValues(15),place);}  }
class C{  public void saveSelectionPaths(TreePath[] treePaths){  selectedPaths=treePaths;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public JsonArrayRequest(int method,String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,null,listener,errorListener);}  }
class C{  public WrappedByteBuffer putPrefixedString(int fieldSize,String v,Charset cs){  if (fieldSize == 0) {    return this;  }  boolean utf16=cs.name().startsWith("UTF-16");  if (utf16 && (fieldSize == 1)) {    throw new IllegalArgumentException("fieldSize is not even for UTF-16 character set");  }  java.nio.ByteBuffer strBuf=cs.encode(v);  _autoExpand(fieldSize + strBuf.limit());  int len=strBuf.remaining();switch (fieldSize) {case 1:    put((byte)len);  break;case 2:putShort((short)len);break;case 4:putInt(len);break;default :throw new IllegalArgumentException("Illegal argument, field size should be 1,2 or 4 and fieldSize is: " + fieldSize);}_buf.put(strBuf);return this;}  }
class C{  public CloneCommand createCloneCommand(){  CloneCommand cloneCommand=new CloneCommand(repository,gitSshScriptProvider,credentialsLoader,gitAskPassScript);  cloneCommand.setLineConsumerFactory(gitOutputPublisherFactory);  return cloneCommand;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.222 -0500",hash_original_method="82ADC719B633E23931D943624F51E118",hash_generated_method="4CD109DB55737959103AA18D0543B705") protected boolean isTokenSeparator(char ch){  return (ch == ',');}  }
class C{  public void decrIndent(){  currentIndent-=deltaIndent;}  }
class C{  public Page(Wikipedia wiki,String pName) throws WikiApiException {  this(wiki,pName,false);}  }
class C{  public void addToSecond(E ent,double dist,int pos){  secondAssignments.add(new DistanceEntry<>(ent,dist,pos));}  }
class C{  public NavDrawerAdapter(final Context context,final int drawerItemPrimaryOptionsResId,final int drawerItemSecondaryOptionsResId){  mLayoutInflater=LayoutInflater.from(context);  mNavDrawerPrimaryOptions=context.getResources().getStringArray(drawerItemPrimaryOptionsResId);  mNavDrawerSecondaryOptions=context.getResources().getStringArray(drawerItemSecondaryOptionsResId);}  }
class C{  private void generateKey() throws Exception {  KeyGenerator keygen=KeyGenerator.getInstance(ALGO);  SecretKey key=keygen.generateKey();  persistKey(key);}  }
class C{  @Override synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=RETURNSENT;    if (!getCanRead()) {      _error=jmri.ProgListener.OK;    } else {      _error=jmri.ProgListener.FailedTimeout;    }    controller().sendXNetMessage(XNetMessage.getExitProgModeMsg(),this);  }}  }
class C{  public String info(String msg,Object... params){  if (level.intValue() < Level.INFO.intValue())   return (NO_MESSAGE);  return (format(msg,params));}  }
class C{  boolean isVersion(int major,int minor,int subminor){  return ((major == getServerMajorVersion()) && (minor == getServerMinorVersion()) && (subminor == getServerSubMinorVersion()));}  }
class C{  public CRFSegmenter(){}  }
class C{  public static float cos(float angle){  return sinCache[((int)((angle * UNKNOWN_CONST) + ((SIN_CACHE_SIZE + 1) / 4)) & SIN_CACHE_SIZE)];}  }
class C{  public void receiveResultqueryAssociatedPortsForProcessor(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedPortsForProcessorResponse result){}  }
class C{  public void preloadIcon(ComponentName componentName,Bitmap icon,int dpi,String label,long userSerial,InvariantDeviceProfile idp){  try {    PackageManager packageManager=mContext.getPackageManager();    packageManager.getActivityIcon(componentName);    return;  } catch (  PackageManager.NameNotFoundException e) {  }  ContentValues values=newContentValues(Bitmap.createScaledBitmap(icon,idp.iconBitmapSize,idp.iconBitmapSize,true),label,Color.TRANSPARENT);  values.put(IconDB.COLUMN_COMPONENT,componentName.flattenToString());  values.put(IconDB.COLUMN_USER,userSerial);  mIconDb.insertOrReplace(values);}  }
class C{  public boolean isForce(){  return force;}  }
class C{  public String displayName(){  return displayName;}  }
class C{  public String toString(){  if (m_pass == null)   return "EMailAuthenticator[]";  if (CLogMgt.isLevelFinest())   return "EMailAuthenticator[" + m_pass.getUserName() + "/"+ m_pass.getPassword()+ "]";  return "EMailAuthenticator[" + m_pass.getUserName() + "/************]";}  }
class C{  public FeatureTypeLibrary createFeatureTypeLibrary(){  FeatureTypeLibraryImpl featureTypeLibrary=new FeatureTypeLibraryImpl();  return featureTypeLibrary;}  }
class C{  public AgentLoadException(String s){  super(s);}  }
class C{  public void testNextLongBounded(){  for (long bound=2; bound < MAX_LONG_BOUND; bound+=15485863) {    long f=ThreadLocalRandom.current().nextLong(bound);    assertTrue(0 <= f && f < bound);    int i=0;    long j;    while (i < NCALLS && (j=ThreadLocalRandom.current().nextLong(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  public static byte[] read(final InputStream source) throws IOException {  byte[] content;  try {    content=read(source,-1);  }  finally {    try {      source.close();    } catch (    IOException ignoredException) {    }  }  return content;}  }
class C{  private static boolean isLinkMode(FeatureStructure aFs,Feature aFeature){  try {    ArrayFS slotFs=(ArrayFS)BratAjaxCasUtil.getFeatureFS(aFs,aFeature.getShortName());    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public double norm1(){  double f=0;  for (int j=0; j < n; j++) {    double s=0;    for (int i=0; i < m; i++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public static final void enableForSupplier(Organization operator,Organization supplier,DataService ds,boolean customerDefault,boolean serviceDefault,String... types) throws Exception {  assert (operator.hasRole(OrganizationRoleType.PLATFORM_OPERATOR));  assert (supplier.hasRole(OrganizationRoleType.SUPPLIER));  OrganizationRole suppRole=null;  for (  OrganizationToRole ref : supplier.getGrantedRoles()) {    OrganizationRole role=ref.getOrganizationRole();    if (role.getRoleName() == OrganizationRoleType.SUPPLIER) {      suppRole=role;      break;    }  }  assert (suppRole != null);  OrganizationReference orgRef=new OrganizationReference(operator,supplier,OrganizationReferenceType.PLATFORM_OPERATOR_TO_SUPPLIER);  try {    orgRef=(OrganizationReference)ds.getReferenceByBusinessKey(orgRef);  } catch (  ObjectNotFoundException e) {    ds.persist(orgRef);  }  for (  String type : types) {    PaymentType pt=new PaymentType();    pt.setPaymentTypeId(type);    pt=(PaymentType)ds.getReferenceByBusinessKey(pt);    OrganizationRefToPaymentType ref=new OrganizationRefToPaymentType();    ref.setOrganizationReference(orgRef);    ref.setOrganizationRole(suppRole);    ref.setPaymentType(pt);    ref.setUsedAsDefault(customerDefault);    ref.setUsedAsServiceDefault(serviceDefault);    ds.persist(ref);  }}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=mult * result + (this.requiredRoles == null ? 0 : this.requiredRoles.hashCode());  result=mult * result + (this.lossAction == null ? 0 : this.lossAction.hashCode());  result=mult * result + (this.resumptionAction == null ? 0 : this.resumptionAction.hashCode());  return result;}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder(1000);  result.append(getString(new String[]{"emptyBB","occupiedBB","notColorToMoveBB","color[WHITE]","color[BLACK]"},new long[]{emptyBB,occupiedBB,getNotColorToMoveBB(),getColorBB(WHITE),getColorBB(BLACK)})).append("\n\n");  result.append(getString(new String[]{"[WHITE][PAWN]","[WHITE][KNIGHT]","[WHITE][BISHOP]","[WHITE][ROOK]","[WHITE][QUEEN]","[WHITE][KING]"},new long[]{getPieceBB(WHITE,PAWN),getPieceBB(WHITE,KNIGHT),getPieceBB(WHITE,BISHOP),getPieceBB(WHITE,ROOK),getPieceBB(WHITE,QUEEN),getPieceBB(WHITE,KING)})).append("\n\n");  result.append(getString(new String[]{"[BLACK][PAWN]","[BLACK][KNIGHT]","[BLACK][BISHOP]","[BLACK][ROOK]","[BLACK][QUEEN]","[BLACK][KING]"},new long[]{getPieceBB(BLACK,PAWN),getPieceBB(BLACK,KNIGHT),getPieceBB(BLACK,BISHOP),getPieceBB(BLACK,ROOK),getPieceBB(BLACK,QUEEN),getPieceBB(BLACK,KING)})).append("\n\n");  for (int i=7; i > -1; i--) {    for (int j=0; j < 8; j++) {      int square=getSquare(i,j);      int piece=getPiece(square);      int color=(getBitboard(square) & getColorBB(colorToMove)) != 0L ? colorToMove : getOppositeColor(colorToMove);      result.append("|").append(COLOR_PIECE_TO_CHAR[color].charAt(piece));    }    result.append("|   ");switch (i) {case 7:      result.append("To Move: ").append(COLOR_DESCRIPTION[colorToMove]).append(" " + "Last Move: ").append(moves.getSize() == 0 ? "" : moves.getLast());    break;case 6:  result.append(getPieceCountsString());break;case 5:result.append("Moves: ").append(halfMoveCount).append(" EP: ").append(getSan(epSquare)).append(" Castle: ").append(getFenCastle());break;case 4:result.append("FEN: ").append(toFen());break;case 3:result.append("State: ").append(state).append(" Variant=").append(getHeader(PgnHeader.Variant)).append(" Result=").append(getResult());break;case 2:result.append("Event: ").append(getHeader(PgnHeader.Event)).append(" Site=").append(getHeader(PgnHeader.Site)).append(" Date=").append(getHeader(PgnHeader.Date));break;case 1:result.append("WhiteName: ").append(getHeader(PgnHeader.White)).append(" BlackName=").append(getHeader(PgnHeader.Black)).append(" WhiteTime=").append(getHeader(PgnHeader.WhiteRemainingMillis)).append(" whiteLag=").append(getHeader(PgnHeader.WhiteLagMillis)).append(" blackRemainingTImeMillis = ").append(getHeader(PgnHeader.BlackRemainingMillis)).append(" blackLag=").append(getHeader(PgnHeader.BlackLagMillis));break;default :result.append("initialWhiteClock: ").append(getHeader(PgnHeader.WhiteClock)).append(" initialBlackClocks=").append(getHeader(PgnHeader.BlackClock));break;}result.append("\n");}String legalMovesString=Arrays.toString(getLegalMoves().asArray());result.append("\n");result.append(WordUtils.wrap("\nLegals=" + legalMovesString,80,"\n",true));result.append(WordUtils.wrap("\nMovelist=" + moves,80,"\n",true));List<String> squaresWithPromoteMasks=new LinkedList<String>();for (int i=0; i < board.length; i++) {if ((getPieceWithPromoteMask(i) & PROMOTED_MASK) != 0) {squaresWithPromoteMasks.add(getSan(i));}}result.append("\nSquares with promote masks: ").append(squaresWithPromoteMasks);return result.toString();}  }
class C{  public static Match createCopy(Match m){  return m.createBuilder().build();}  }
class C{  private void disableUnsupportedButtons(){  try {    if (mPauseButton != null && !mPlayer.canPause()) {      mPauseButton.setEnabled(false);    }    if (mProgress != null && !mPlayer.canSeekBackward() && !mPlayer.canSeekForward()) {      mProgress.setEnabled(false);    }  } catch (  IncompatibleClassChangeError ex) {  }}  }
class C{  public static Properties loadRawConfig(Context context,int resId){  InputStream in=context.getResources().openRawResource(resId);  if (in == null)   throw new IllegalStateException("caused by under /res/raw the config of " + resId + " is not found!");  return load(in,"caused by config =" + resId + ".properties load failed or File Not Found !");}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sxit");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void execute(){  RunnableExecutorPair list;synchronized (this) {    if (executed) {      return;    }    executed=true;    list=runnables;    runnables=null;  }  RunnableExecutorPair reversedList=null;  while (list != null) {    RunnableExecutorPair tmp=list;    list=list.next;    tmp.next=reversedList;    reversedList=tmp;  }  while (reversedList != null) {    executeListener(reversedList.runnable,reversedList.executor);    reversedList=reversedList.next;  }}  }
class C{  public void close() throws IOException {  is.close();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().isPlayin());}  }
class C{  private TemplateSubPatternAssociation insertAssociationIntoList(TemplateSubPatternAssociation head,TemplateSubPatternAssociation item,boolean isWildCardInsert){  double priority=getPriorityOrScore(item);  double workPriority;  int importLevel=item.getImportLevel();  int docOrder=item.getDocOrderPos();  TemplateSubPatternAssociation insertPoint=head;  TemplateSubPatternAssociation next;  boolean insertBefore;  while (true) {    next=insertPoint.getNext();    if (null == next)     break; else {      workPriority=getPriorityOrScore(next);      if (importLevel > next.getImportLevel())       break; else       if (importLevel < next.getImportLevel())       insertPoint=next; else       if (priority > workPriority)       break; else       if (priority < workPriority)       insertPoint=next; else       if (docOrder >= next.getDocOrderPos())       break; else       insertPoint=next;    }  }  if ((null == next) || (insertPoint == head)) {    workPriority=getPriorityOrScore(insertPoint);    if (importLevel > insertPoint.getImportLevel())     insertBefore=true; else     if (importLevel < insertPoint.getImportLevel())     insertBefore=false; else     if (priority > workPriority)     insertBefore=true; else     if (priority < workPriority)     insertBefore=false; else     if (docOrder >= insertPoint.getDocOrderPos())     insertBefore=true; else     insertBefore=false;  } else   insertBefore=false;  if (isWildCardInsert) {    if (insertBefore) {      item.setNext(insertPoint);      String key=insertPoint.getTargetString();      item.setTargetString(key);      putHead(key,item);      return item;    } else {      item.setNext(next);      insertPoint.setNext(item);      return head;    }  } else {    if (insertBefore) {      item.setNext(insertPoint);      if (insertPoint.isWild() || item.isWild())       m_wildCardPatterns=item; else       putHead(item.getTargetString(),item);      return item;    } else {      item.setNext(next);      insertPoint.setNext(item);      return head;    }  }}  }
class C{  public boolean isEmpty(){  return (impl.isEmpty());}  }
class C{  protected void addPreferencesFromPreferenceScreen(WearPreferenceScreen preferenceScreen){  addPreferences(preferenceScreen.getChildren());}  }
class C{  public int executeUpdate() throws SQLException {  checkValidity();synchronized (getSynchronizationObject()) {    notifyStatementStarted();    try {      if (internalExecute(isExecuteProcedureStatement) && !generatedKeys) {        throw new FBSQLException("Update statement returned results.");      }      return getUpdateCount();    }  finally {      notifyStatementCompleted();    }  }}  }
class C{  private ExportMaskPlacementDescriptor(Map<URI,Volume> volumes){  if (masks != null) {    this.masks=new HashMap<>(masks);  }  this.unplacedVolumes=new HashMap<>(volumes);  this.volumesToPlace=new HashMap<>(volumes);  this.maskToVolumes=new HashMap<>();  this.maskExportGroupMap=new HashMap<>();  this.placementHint=PlacementHint.VOLUMES_TO_SINGLE_MASK;  this.exportMaskPolicy=new HashMap<>();  this.equivalentMasks=new HashMap<>();  this.volumeToAlternativeMasks=new HashMap<>();}  }
class C{  public Builder csrf(String requestToken,String responseToken){  this.csrfRequestToken=requestToken;  this.csrfResponseToken=responseToken;  return this;}  }
class C{  private byte[] convertBitListToByteArray(List<Integer> bitList){  byte[] data=null;  data=new byte[bitList.size() >> 3];  for (int i=0; i < ((bitList.size() >> 3) << 3); i++) {    setWatermarkBit(data,i,(bitList.get(i)).intValue());  }  return data;}  }
class C{  public ConvergenceException(){  this(LocalizedFormats.CONVERGENCE_FAILED);}  }
class C{  public boolean isShowTotal(){  Object oo=get_Value(COLUMNNAME_IsShowTotal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static double[][] normaliseIntoNewArray(double[][] matrix){  double[] means=means(matrix);  double[] stds=stdDevs(matrix,means);  return normaliseIntoNewArray(matrix,means,stds);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.LOCAL_DATE_TYPE,this);}  }
class C{  public Builder writeGraph(final String configurationFile) throws ConfigurationException {  return writeGraph(new PropertiesConfiguration(configurationFile));}  }
class C{  protected JavaModel() throws Error {  super(null);}  }
class C{  public synchronized Object remove(Object key){  if (key == null) {    String message=Logging.getMessage("nullValue.KeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.entries.remove(key);}  }
class C{  public static Viewport boundingRectForUnitSquare(Matrix4 unitSquareTransform,Viewport result){  if (unitSquareTransform == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WWMath","boundingRectForUnitSquare","missingMatrix"));  }  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WWMath","boundingRectForUnitSquare","missingResult"));  }  double[] m=unitSquareTransform.m;  double x1=m[3];  double y1=m[7];  double x2=m[0] + m[3];  double y2=m[4] + m[7];  double x3=m[1] + m[3];  double y3=m[5] + m[7];  double x4=m[0] + m[1] + m[3];  double y4=m[4] + m[5] + m[7];  int minX=(int)Math.min(Math.min(x1,x2),Math.min(x3,x4));  int maxX=(int)Math.max(Math.max(x1,x2),Math.max(x3,x4));  int minY=(int)Math.min(Math.min(y1,y2),Math.min(y3,y4));  int maxY=(int)Math.max(Math.max(y1,y2),Math.max(y3,y4));  return result.set(minX,minY,maxX - minX,maxY - minY);}  }
class C{  @Override protected void reloadSummaries(){  super.reloadSummaries();  int local, global;  local=mDPM.getPasswordQuality(mDeviceAdminSample);  global=mDPM.getPasswordQuality(null);  mPasswordQuality.setSummary(localGlobalSummary(qualityValueToString(local),qualityValueToString(global)));  local=mDPM.getPasswordMinimumLength(mDeviceAdminSample);  global=mDPM.getPasswordMinimumLength(null);  mMinLength.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumLetters(mDeviceAdminSample);  global=mDPM.getPasswordMinimumLetters(null);  mMinLetters.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumNumeric(mDeviceAdminSample);  global=mDPM.getPasswordMinimumNumeric(null);  mMinNumeric.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumLowerCase(mDeviceAdminSample);  global=mDPM.getPasswordMinimumLowerCase(null);  mMinLowerCase.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumUpperCase(mDeviceAdminSample);  global=mDPM.getPasswordMinimumUpperCase(null);  mMinUpperCase.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumSymbols(mDeviceAdminSample);  global=mDPM.getPasswordMinimumSymbols(null);  mMinSymbols.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumNonLetter(mDeviceAdminSample);  global=mDPM.getPasswordMinimumNonLetter(null);  mMinNonLetter.setSummary(localGlobalSummary(local,global));}  }
class C{  public java.sql.PreparedStatement prepareStatement(String sql) throws SQLException {  checkClosed();  java.sql.PreparedStatement res=null;  try {    res=PreparedStatementWrapper.getInstance(this,this.pooledConnection,this.mc.prepareStatement(sql));  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return res;}  }
class C{  private byte[] fixTree(int nodeIdx) throws Exception {  LOG.trace("fixTree({})",nodeIdx);  if (nodeIdx >= maxIndex) {    return null;  }  if (get(nodeIdx) != null) {    return get(nodeIdx);  }  byte[] leftValue=get(leftIdx(nodeIdx));  if (leftValue == null) {    return fixTree(leftIdx(nodeIdx));  }  byte[] rightValue=fixTree(rightIdx(nodeIdx));  if (rightValue == null) {    LOG.trace("{} -> left({})",nodeIdx,leftIdx(nodeIdx));    return leftValue;  }  byte[] stepDigest=digestHashStep(hashAlgorithm,leftValue,rightValue);  LOG.trace("Fixing: {} + {} -> {}",new Object[]{leftIdx(nodeIdx),rightIdx(nodeIdx),nodeIdx});  nodes[nodeIdx]=stepDigest;  return stepDigest;}  }
class C{  public void generate(FileSystem fs) throws IOException {  Path p=new Path(this.filename);  boolean generate=false;  try {    FileStatus status=fs.getFileStatus(p);    if (!status.isFile()) {      System.out.printf("Input path %s already exists, but it is not a file.\n",p.toString());      generate=true;    } else {      long blockSize=status.getBlockSize();      if (blockSize != blockSizeBytes) {        System.out.printf("Input file %s exists with blockSize=%d, but expected blockSize=%d.\n",p.toString(),blockSize,blockSizeBytes);        generate=true;      }      long fileSize=status.getLen();      if (fileSize > fileSizeBytes + 2000 || fileSize < fileSizeBytes - 2000) {        System.out.printf("Input file %s exists with fileSize=%d, but expected fileSize=%d\n",p.toString(),fileSize,fileSizeBytes);        generate=true;      }    }    if (generate) {      System.out.printf("Deleting existing path %s\n",p.toString());      if (!fs.delete(p,true)) {        throw new IOException("Unable to delete existing path " + p);      }    }  } catch (  FileNotFoundException e) {    System.out.printf("Input path %s does not exist\n",p.toString());    generate=true;  }  if (generate) {    System.out.printf("Generating input file file %s with blockSize=%d and fileSize=%d.\n",p.toString(),blockSizeBytes,fileSizeBytes);    DataGenerator.createAndWriteFile(fs,p,fileSizeBytes,blockSizeBytes,nReplicas,lineLength);  } else {    System.out.printf("Input file %s already exists with blockSize=%d and fileSize=%d.\n",p.toString(),blockSizeBytes,fileSizeBytes);  }}  }
class C{  @Override public void createOrUpdateMetadata(byte[] metadata) throws IOException {  checkClosedOrInError("createOrUpdateMetadata");  String zkPath=getZKPath();  LOG.debug("Setting application specific metadata on {}",zkPath);  try {    Stat currentStat=writerZKC.get().exists(zkPath,false);    if (currentStat == null) {      if (metadata.length > 0) {        Utils.zkCreateFullPathOptimistic(writerZKC,zkPath,metadata,writerZKC.getDefaultACL(),CreateMode.PERSISTENT);      }    } else {      writerZKC.get().setData(zkPath,metadata,currentStat.getVersion());    }  } catch (  InterruptedException ie) {    throw new DLInterruptedException("Interrupted on creating or updating container metadata",ie);  }catch (  Exception exc) {    throw new IOException("Exception creating or updating container metadata",exc);  }}  }
class C{  public static void appendToSystemPath(URL path){  if (path == null) {    throw new IllegalArgumentException("Null path");  }  try {    ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();    final Method method=URLClassLoader.class.getDeclaredMethod("addURL",new Class[]{URL.class});    method.setAccessible(true);    method.invoke(systemClassLoader,path);  } catch (  Exception ex) {    throw new RuntimeException("Add URL failed: " + path,ex);  }}  }
class C{  public void dispose(){  m_debugPerspectiveModel.removeListener(m_debugListener);  final IDebugger activeDebugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  synchronizeDebugger(activeDebugger,null);}  }
class C{  public static boolean doesShareExist(FileObject fileObject,String shareName){  SMBShareMap existingShares=fileObject.getSMBFileShares();  if (existingShares != null && !existingShares.isEmpty()) {    SMBFileShare existingShare=existingShares.get(shareName);    if (existingShare != null) {      _log.info("CIFS share: {}, exists in ",shareName,fileObject.getId());      return true;    }  }  _log.info("CIFS share: {}, does not exist in {}",shareName,fileObject.getId());  return false;}  }
class C{  @Override public Bundle updateCredentials(AccountAuthenticatorResponse response,Account account,String authTokenType,Bundle loginOptions){  return null;}  }
class C{  public SplitByCollinearColumnsAction(DataEditor editor){  super("Split Data by Collinear Columns");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public void query(Envelope queryEnv,KdNodeVisitor visitor){  queryNode(root,queryEnv,true,visitor);}  }
class C{  public void test_agg08() throws MalformedQueryException {  final String query="PREFIX : <http://www.example.org/>\n" + "SELECT ((?O1 + ?O2) AS ?O12) (COUNT(?O1) AS ?C)\n" + "WHERE { ?S :p ?O1; :q ?O2 } GROUP BY (?O1 + ?O2)\n"+ "ORDER BY ?O12";  negativeTest(query);}  }
class C{  @Inline static void compilePutfieldBarrierByte(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.byteFieldWriteBarrierMethod);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.DISJUNCTION__ELEMENTS:    getElements().clear();  return;}super.eUnset(featureID);}  }
class C{  public void resumeTransfer(){  if (sLogger.isActivated()) {    sLogger.warn("Transfer is resuming");  }  mIsCancelled=false;  mIsPaused=false;  getListener().onHttpTransferResumed();}  }
class C{  public void initWithoutJUnitForFixture(Class fixture,Method method){  this.testClass=fixture;  this.testMethodName=method.getName();}  }
class C{  public NotificationChain basicSetRhs(Expression newRhs,NotificationChain msgs){  Expression oldRhs=rhs;  rhs=newRhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.MULTIPLICATIVE_EXPRESSION__RHS,oldRhs,newRhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.ENTITY_PROPERTY_SOURCE__PROPERTY:    return property != null;}return super.eIsSet(featureID);}  }
class C{  public void addChannel(WritableByteChannel writer){  writers.add(writer);}  }
class C{  public Env<A> dupto(Env<A> that){  that.next=this;  that.outer=this.outer;  that.toplevel=this.toplevel;  that.enclClass=this.enclClass;  that.enclMethod=this.enclMethod;  return that;}  }
class C{  @Override protected void finalize() throws Throwable {  this.internalStopAnimation(null);  mInitialLookAt=mLookAtRotation=null;  mFovRange=null;  mInternalListener=mListener=null;  super.finalize();}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawBackground(0);  drawCenteredString(fontRendererObj,(entry != null ? "Edit" : "Add") + " Keybind",width / 2,20,16777215);  drawString(fontRendererObj,"Key: " + key,width / 2 - 100,47,10526880);  drawString(fontRendererObj,"Command",width / 2 - 100,87,10526880);  commandBox.drawTextBox();  super.drawScreen(par1,par2,par3);}  }
class C{  public void onCombineConfigure(){}  }
class C{  private void add(String place,Action action,MenuItemPresentationFactory presentationFactory){  Presentation presentation=presentationFactory.getPresentation(action);  if (action instanceof ActionGroup) {    ActionGroup group=(ActionGroup)action;    table.setText(0,menuBarItems.size(),presentation.getText());    Element element=table.getCellFormatter().getElement(0,menuBarItems.size());    MenuBarItem item=new MenuBarItem(group,actionManager,presentationFactory,place,element,this,keyBindingAgent,resources.menuCss());    item.onMouseOut();    menuBarItems.put(element,item);    action2barItem.put(group,item);  } else   if (action instanceof CustomComponentAction) {    Widget widget=((CustomComponentAction)action).createCustomComponent(presentation);    table.setWidget(0,menuBarItems.size(),widget);    Element element=table.getCellFormatter().getElement(0,menuBarItems.size());    menuBarItems.put(element,null);  }}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.540 -0500",hash_original_method="C7C9FE1639F9BA6211C746BC2E590EF8",hash_generated_method="B751B33CC0BF2EE6E2C7273D514854B1") public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  public static EncryptionKey acquireSecretKey(char[] password,String salt,int etype,byte[] s2kparams) throws KrbException {  return new EncryptionKey(stringToKey(password,salt,s2kparams,etype),etype,null);}  }
class C{  private TungstenProperties testConditionWithResults(){  TungstenProperties retProps=new TungstenProperties();  retProps.setObject(STATUS_KEY,testCondition);  retProps.setString(STATUS_MESSAGE_KEY,String.format("Test vector enabled. Returning condition=%s",testCondition));  CLUtils.println(retProps.toNameValuePairs());  return retProps;}  }
class C{  public static boolean isMiddleMouseButton(MouseEvent anEvent){  return ((anEvent.getModifiersEx() & InputEvent.BUTTON2_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON2);}  }
class C{  public void startFullSync(){  SyncAccountService.startFullSync();}  }
class C{  @Override protected Void doInBackground(Void... Voids){  int udpDataCounterColumn=0;  int udpDataCounterRow=0;  int[][] udpDataArray=new int[Constants.PreProcParam.UDP_IMG_DATA][Constants.PreProcParam.UDP_NUM_SAMPLES];  try {    try {      s=new DatagramSocket(port);      s.setSoTimeout(3000);    } catch (    IOException e) {      e.printStackTrace();    }    while (true) {      try {        byte[] message=new byte[Constants.PreProcParam.UDP_NUM_SAMPLES];        DatagramPacket p=new DatagramPacket(message,message.length);        try {          s.receive(p);          byte[] byteArray=p.getData();          int[] intArray=ImageHelper.convert(byteArray);          System.arraycopy(intArray,0,udpDataArray[udpDataCounterRow],udpDataCounterColumn * intArray.length,intArray.length);          udpDataCounterColumn++;        } catch (        Exception e) {          e.printStackTrace();        }      } catch (      Exception e) {        e.printStackTrace();      } finally {        if (udpDataCounterColumn >= Constants.PreProcParam.UDP_NUM_UDP_PACKET_CHUNKS) {          udpDataCounterRow++;          udpDataCounterColumn=0;        }        if (udpDataCounterRow >= Constants.PreProcParam.UDP_IMG_DATA) {          ScanConversion scnConv=ScanConversion.getInstance(udpDataArray);          scnConv.setUdpData();          refreshUI(scnConv);          udpDataCounterRow=0;        }      }    }  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public Application(@JsonProperty("applicationId") final String applicationId){  this.applicationId=applicationId;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.227 -0400",hash_original_method="50CCAFE3157E2FBE31CA5FF7D33760D6",hash_generated_method="F21AC66262FA3D6050863402F8A7F28D") final boolean isOwnedBy(AbstractQueuedLongSynchronizer sync){  return sync == AbstractQueuedLongSynchronizer.this;}  }
class C{  public int findGCTraceIndex(String gcTraceName){  ArgumentChecking.notNull(gcTraceName,"gcTraceName");  int index=0;  for (  GCTrace trace : this) {    if (trace.getName().equals(gcTraceName)) {      return index;    }    ++index;  }  return -1;}  }
class C{  private boolean isAsciiLetter(int c){  return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');}  }
class C{  public Dimension preferredLayoutSize(Container container){  int prePrimary=0;  int preSecondary=0;  Insets insets=splitPane.getInsets();  for (int counter=0; counter < 3; counter++) {    if (components[counter] != null) {      Dimension preSize=components[counter].getPreferredSize();      int secSize=getSizeForSecondaryAxis(preSize);      prePrimary+=getSizeForPrimaryAxis(preSize);      if (secSize > preSecondary)       preSecondary=secSize;    }  }  if (insets != null) {    prePrimary+=getSizeForPrimaryAxis(insets,true) + getSizeForPrimaryAxis(insets,false);    preSecondary+=getSizeForSecondaryAxis(insets,true) + getSizeForSecondaryAxis(insets,false);  }  if (axis == 0) {    return new Dimension(prePrimary,preSecondary);  }  return new Dimension(preSecondary,prePrimary);}  }
class C{  public void parentExplotion(int PP_Product_BOM_ID,BigDecimal qtyRequiered) throws Exception {  ArrayList<Object> parameters=new ArrayList<Object>();  parameters.add(PP_Product_BOM_ID);  final StringBuilder whereClause=new StringBuilder(MPPProductBOMLine.COLUMNNAME_PP_Product_BOM_ID).append("=?");  if (p_BackflushGroup != null) {    whereClause.append(" AND ").append(MPPProductBOMLine.COLUMNNAME_BackflushGroup).append("LIKE ?");    parameters.add(p_BackflushGroup);  }  List<MPPProductBOMLine> bomLines=new Query(getCtx(),MPPProductBOMLine.Table_Name,whereClause.toString(),get_TrxName()).setClient_ID().setOnlyActiveRecords(true).setParameters(parameters).setOrderBy(MPPProductBOMLine.COLUMNNAME_Line).list();  for (  MPPProductBOMLine line : bomLines) {    if (line.isValidFromTo(p_DateTrx)) {      SeqNo+=1;      MProduct product=new MProduct(getCtx(),line.getM_Product_ID(),get_TrxName());      X_T_BOMLine tboml=new X_T_BOMLine(ctx,0,null);      tboml.setAD_Org_ID(product.getAD_Org_ID());      tboml.setPP_Product_BOM_ID(PP_Product_BOM_ID);      tboml.setPP_Product_BOMLine_ID(line.get_ID());      tboml.setM_Product_ID(line.getM_Product_ID());      tboml.setLevelNo(LevelNo);      tboml.setDateTrx(p_DateTrx);      tboml.setLevels(levels.substring(0,LevelNo) + LevelNo);      tboml.setSeqNo(SeqNo);      tboml.setAD_PInstance_ID(AD_PInstance_ID);      tboml.setSel_Product_ID(p_M_Product_ID);      tboml.setQtyBOM(line.getQty(true));      tboml.setQtyRequired(qtyRequiered.multiply(line.getQty(true)));      tboml.setM_Warehouse_ID(p_M_Warehouse_ID);      tboml.setImplosion(false);      tboml.saveEx();      component(line.getM_Product_ID(),tboml.getQtyBOM());    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_CONDITION___LHS_1:    return LHS_1_EDEFAULT == null ? lhS_1 != null : !LHS_1_EDEFAULT.equals(lhS_1);case UmplePackage.TRACE_CONDITION___CONDITION_RHS_1:  return conditionRHS_1 != null && !conditionRHS_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void remove(int offset,int length) throws BadLocationException {  super.remove(offset,length);}  }
class C{  public boolean isSetRegisterResponse(){  return this.registerResponse != null;}  }
class C{  protected AbstractNormalization(){  super();}  }
class C{  public String diff_text2(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.DELETE) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,InputStream inputStreamDocumentFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,parentDivId,fileExt,sortOrder,inputStreamDocumentFile,null);}  }
class C{  public boolean hasTable(int tag){  return this.tables.containsKey(tag);}  }
class C{  @Override public GroovyFile createGroovyFile(CharSequence idText,boolean isPhysical,@Nullable PsiElement context){  GroovyFileImpl file=createDummyFile(idText,isPhysical);  file.setContext(context);  return file;}  }
class C{  public final GF2nPolynomial multiplyAndReduce(GF2nPolynomial b,GF2nPolynomial g) throws RuntimeException, ArithmeticException {  return multiply(b).reduce(g);}  }
class C{  public void write(File file,Drawing drawing) throws IOException {  BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(file));  try {    write(out,drawing);  }  finally {    out.close();  }}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case STARTED:      queryHostsForDatastore(current);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :throw new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage));}} catch (Throwable e) {failTask(e,null);}}  }
class C{  public String gameSummaryStrScore(Game g){  if (g.homeTeam == this) {    return g.homeScore + " - " + g.awayScore;  } else {    return g.awayScore + " - " + g.homeScore;  }}  }
class C{  ClientResponse put(URI uri,String vplexSessionId,String jsonFormat){  return setResourceHeaders(_client.resource(uri),vplexSessionId,jsonFormat,VPlexApiConstants.CACHE_CONTROL_MAXAGE_ZERO).put(ClientResponse.class);}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);  if (null != startState.taskState.subStage && null != patchState.taskState.subStage) {    checkState(patchState.taskState.subStage.ordinal() >= startState.taskState.subStage.ordinal());  }  if (TaskState.TaskStage.STARTED == patchState.taskState.stage) {    checkNotNull(patchState.taskState.subStage);  }}  }
class C{  protected boolean read(){  if (!nReuseHeader) {    Debug.message("iso8211","DDFRecord reusing header, calling readHeader()");    return readHeader();  }  byte[] tempData=new byte[nDataSize - nFieldOffset];  int nReadBytes=poModule.read(tempData,0,tempData.length);  System.arraycopy(pachData,nFieldOffset,tempData,0,tempData.length);  if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) {    return false;  } else   if (nReadBytes != (int)(nDataSize - nFieldOffset)) {    Debug.error("DDFRecord: Data record is short on DDF file.");    return false;  }  return true;}  }
class C{  public void appendUncommafied(final String value){  sb.append(value);}  }
class C{  public SortableAndSearchableTable(int numRows,int numColumns){  super(numRows,numColumns);}  }
class C{  public void clear(){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("ProcessInfo[");  sb.append(m_Title).append(",Process_ID=").append(m_AD_Process_ID);  if (m_AD_PInstance_ID != 0)   sb.append(",AD_PInstance_ID=").append(m_AD_PInstance_ID);  if (m_Record_ID != 0)   sb.append(",Record_ID=").append(m_Record_ID);  if (m_ClassName != null)   sb.append(",ClassName=").append(m_ClassName);  sb.append(",Error=").append(isError());  if (m_TransientObject != null)   sb.append(",Transient=").append(m_TransientObject);  if (m_SerializableObject != null)   sb.append(",Serializable=").append(m_SerializableObject);  sb.append(",Summary=").append(getSummary()).append(",Log=").append(m_logs == null ? 0 : m_logs.size());  sb.append("]");  return sb.toString();}  }
class C{  public CreateWindowClause addView(String namespace,String name,Expression... parameters){  views.add(View.create(namespace,name,parameters));  return this;}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  public boolean isValidInfrastructureTld(String iTld){  iTld=unicodeToASCII(iTld);  return Arrays.binarySearch(INFRASTRUCTURE_TLDS,(chompLeadingDot(iTld.toLowerCase(Locale.ENGLISH)))) >= 0;}  }
class C{  public void error(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {  error(srcLctr,null,null,msg,args);}  }
class C{  public final float random(float howsmall,float howbig){  if (howsmall >= howbig)   return howsmall;  float diff=howbig - howsmall;  return random(diff) + howsmall;}  }
class C{  public AABB(ReadonlyVec3D pos,ReadonlyVec3D extent){  super(pos);  setExtent(extent);}  }
class C{  private boolean isUnderline(AttributedCharacterIterator ati){  Object attr=ati.getAttribute(TextAttribute.UNDERLINE);  if (TextAttribute.UNDERLINE_ON.equals(attr))   return true; else   return false;}  }
class C{  private boolean equal(int[] array1,int[] array2){  if (array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  protected SVGUtilities(){}  }
class C{  public synchronized Iterator<AbstractSetting> iterator(){  return settings.iterator();}  }
class C{  public void startCameraPreview(SurfaceHolder surfaceHolder) throws Exception {  mCamera.setErrorCallback(mCameraErrorCallback);  mCamera.setPreviewDisplay(surfaceHolder);  mCamera.startPreview();  Thread.sleep(WAIT_GENERIC);}  }
class C{  public int bytesLeft(){  return limit - position;}  }
class C{  public static CountryPicker newInstance(String dialogTitle){  CountryPicker picker=new CountryPicker();  Bundle bundle=new Bundle();  bundle.putString("dialogTitle",dialogTitle);  picker.setArguments(bundle);  return picker;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void startPreferenceFragment(Fragment fragment,boolean push){  FragmentTransaction transaction=getFragmentManager().beginTransaction();  transaction.replace(com.android.internal.R.id.prefs,fragment);  if (push) {    transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);    transaction.addToBackStack(BACK_STACK_PREFS);  } else {    transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);  }  transaction.commitAllowingStateLoss();}  }
class C{  public void testStats(){  checkStatistics("MIN",m_Instances.attributeStats(m_AttIndex).numericStats.min);  checkStatistics("MAX",m_Instances.attributeStats(m_AttIndex).numericStats.max);  checkStatistics("MEAN",m_Instances.attributeStats(m_AttIndex).numericStats.mean);  checkStatistics("SD",m_Instances.attributeStats(m_AttIndex).numericStats.stdDev);  checkStatistics("COUNT",m_Instances.attributeStats(m_AttIndex).numericStats.count);  checkStatistics("SUM",m_Instances.attributeStats(m_AttIndex).numericStats.sum);  checkStatistics("SUMSQUARED",m_Instances.attributeStats(m_AttIndex).numericStats.sumSq);}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") void writeArray(Object[] arr) throws IOException {  int len=arr.length;  writeInt(len);  for (int i=0; i < len; i++) {    Object obj=arr[i];    writeObject0(obj);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numUpslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numUpslopeNeighbours=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 > z) {              numUpslopeNeighbours++;            }          }          output.setValue(row,col,numUpslopeNeighbours);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Builder builder(){  return new Builder(new AppendResponse());}  }
class C{  protected AnimatableValue[] parseValues(){  boolean isCSS=animationType == AnimationEngine.ANIM_TYPE_CSS;  String valuesString=element.getAttributeNS(null,SVG_VALUES_ATTRIBUTE);  int len=valuesString.length();  if (len == 0) {    return null;  }  ArrayList values=new ArrayList(7);  int i=0, start=0, end;  char c;  outer:   while (i < len) {    while (valuesString.charAt(i) == ' ') {      i++;      if (i == len) {        break outer;      }    }    start=i++;    if (i != len) {      c=valuesString.charAt(i);      while (c != ';') {        i++;        if (i == len) {          break;        }        c=valuesString.charAt(i);      }    }    end=i++;    AnimatableValue val=eng.parseAnimatableValue(element,animationTarget,attributeNamespaceURI,attributeLocalName,isCSS,valuesString.substring(start,end));    if (!checkValueType(val)) {      throw new BridgeException(ctx,element,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VALUES_ATTRIBUTE,valuesString});    }    values.add(val);  }  AnimatableValue[] ret=new AnimatableValue[values.size()];  return (AnimatableValue[])values.toArray(ret);}  }
class C{  public int read(String name){  status=STATUS_OK;  try {    name=name.trim().toLowerCase();    if ((name.indexOf("file:") >= 0) || (name.indexOf(":/") > 0)) {      URL url=new URL(name);      in=new BufferedInputStream(url.openStream());    } else {      in=new BufferedInputStream(new FileInputStream(name));    }    status=read(in);  } catch (  IOException e) {    status=STATUS_OPEN_ERROR;  }  return status;}  }
class C{  public IDrawerItem generateMiniDrawerItem(IDrawerItem drawerItem){  if (drawerItem instanceof PrimaryDrawerItem) {    return new MiniDrawerItem((PrimaryDrawerItem)drawerItem).withEnableSelectedBackground(mEnableSelectedMiniDrawerItemBackground);  } else   if (drawerItem instanceof SecondaryDrawerItem && mIncludeSecondaryDrawerItems) {    return new MiniDrawerItem((SecondaryDrawerItem)drawerItem).withEnableSelectedBackground(mEnableSelectedMiniDrawerItemBackground);  } else   if (drawerItem instanceof ProfileDrawerItem) {    MiniProfileDrawerItem mpdi=new MiniProfileDrawerItem((ProfileDrawerItem)drawerItem);    mpdi.withEnabled(mEnableProfileClick);    return mpdi;  }  return null;}  }
class C{  @Override public void addChangeListener(DialLayerChangeListener listener){  this.listenerList.add(DialLayerChangeListener.class,listener);}  }
class C{  private boolean isKatakanaIterationMark(char c){  if (normalizeKana) {    return c == KATAKANA_ITERATION_MARK || c == KATAKANA_VOICED_ITERATION_MARK;  } else {    return false;  }}  }
class C{  @Override public void onFailure(Throwable t){  System.out.println("-------------------------------------------------------------");  System.out.println("-------------------------------------------------------------");  System.out.println("-------------------------------------------------------------");  System.out.println("-------------------------------------------------------------");  System.out.println("UNEXPECTED FAILURE");  System.out.println(String.format("FAILED %s#%s",method.getDeclaringClass(),method.getName()));  System.out.println("REASON: " + t.getMessage());  System.out.println("STACKTRACE:");  System.out.println(ExceptionUtils.getStackTrace(t));  System.out.println("-------------------------------------------------------------");  System.out.println("-------------------------------------------------------------");  System.out.println("-------------------------------------------------------------");}  }
class C{  public void populateAll() throws GeneralException {  ArtifactInfoContext infoContext=new ArtifactInfoContext();  ArtifactInfoGatherer infoGatherer=new ArtifactInfoGatherer(infoContext);  try {    if (this.modelForm instanceof ModelSingleForm) {      infoGatherer.visit((ModelSingleForm)this.modelForm);    } else {      infoGatherer.visit((ModelGrid)this.modelForm);    }  } catch (  Exception e) {    throw new GeneralException(e);  }  populateEntitiesFromNameSet(infoContext.getEntityNames());  populateServicesFromNameSet(infoContext.getServiceNames());  this.populateFormExtended();  this.populateLinkedRequests(infoContext.getRequestLocations());  this.populateTargetedRequests(infoContext.getTargetLocations());}  }
class C{  public PemInfo(String type,PemAttributes attributes,byte[] content){  this.type=type;  this.attributes=attributes;  this.content=content;}  }
class C{  public boolean mayHaveChildren(@NotNull Node parent){  return !parent.isLeaf();}  }
class C{  protected void updateAnnotationSetInScene(ATypeElement type,AnnotatedTypeFactory atf,String jaifPath,AnnotatedTypeMirror rhsATM,AnnotatedTypeMirror lhsATM,TypeUseLocation defLoc){  if (rhsATM instanceof AnnotatedNullType && ignoreNullAssignments) {    return;  }  AnnotatedTypeMirror atmFromJaif=AnnotatedTypeMirror.createType(rhsATM.getUnderlyingType(),atf,false);  typeElementToATM(atmFromJaif,type,atf);  updatesATMWithLUB(atf,rhsATM,atmFromJaif);  if (lhsATM instanceof AnnotatedTypeVariable) {    Set<AnnotationMirror> upperAnnos=((AnnotatedTypeVariable)lhsATM).getUpperBound().getEffectiveAnnotations();    if (upperAnnos.size() == rhsATM.getAnnotations().size() && atf.getQualifierHierarchy().isSubtype(rhsATM.getAnnotations(),upperAnnos)) {      return;    }  }  updateTypeElementFromATM(rhsATM,lhsATM,atf,type,1,defLoc);  modifiedScenes.add(jaifPath);}  }
class C{  @Override public void changeAmount(int amount){  recharge.setCurrentAmount(amount);  stream.onNext(recharge);}  }
class C{  protected void closeSession(final String message){  closeSession(message,null);}  }
class C{  public DeviceAutomator openNotification(){  mDevice.openNotification();  return this;}  }
class C{  public boolean isWebSocketUpgrade(){  if (!getResponseHeader().isEmpty()) {    String connectionHeader=getResponseHeader().getHeader("connection");    String upgradeHeader=getResponseHeader().getHeader("upgrade");    if (connectionHeader != null && connectionHeader.equalsIgnoreCase("upgrade")) {      if (upgradeHeader != null && upgradeHeader.equalsIgnoreCase("websocket")) {        return true;      }    }  }  return false;}  }
class C{  public void testSSLWithEmptyProtocolsAndCipherSuitesProperties(){  testSSLProtocolsAndCipherSuitesProperties(SecurityHelperTest.TEST_ARG.BOTH);}  }
class C{  public Chunk provideChunk(int p_73154_1_,int p_73154_2_){  this.rand.setSeed((long)p_73154_1_ * 341873128712L + (long)p_73154_2_ * 132897987541L);  Block[] ablock=new Block[65536];  byte[] abyte=new byte[65536];  this.func_147424_a(p_73154_1_,p_73154_2_,ablock);  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,p_73154_1_ * 16,p_73154_2_ * 16,16,16);  this.replaceBlocksForBiome(p_73154_1_,p_73154_2_,ablock,abyte,this.biomesForGeneration);  this.caveGenerator.func_151539_a(this,this.worldObj,p_73154_1_,p_73154_2_,ablock);  this.ravineGenerator.func_151539_a(this,this.worldObj,p_73154_1_,p_73154_2_,ablock);  if (this.craterGenerator != null)   this.craterGenerator.func_151539_a(this,this.worldObj,p_73154_1_,p_73154_2_,ablock);  if (this.geodeGenerator != null)   this.geodeGenerator.func_151539_a(this,this.worldObj,p_73154_1_,p_73154_2_,ablock);  if (this.mapFeaturesEnabled) {  }  Chunk chunk=new Chunk(this.worldObj,ablock,abyte,p_73154_1_,p_73154_2_);  byte[] abyte1=chunk.getBiomeArray();  for (int k=0; k < abyte1.length; ++k) {    abyte1[k]=(byte)this.biomesForGeneration[k].biomeID;  }  chunk.generateSkylightMap();  return chunk;}  }
class C{  public void test_PBKDF2_b8312059() throws Exception {  char[] password="\u0141\u0142".toCharArray();  byte[] salt="salt".getBytes();  int iterations=4096;  int keyLength=160;  byte[] expected_utf8=new byte[]{(byte)0x4c,(byte)0xe0,(byte)0x6a,(byte)0xb8,(byte)0x48,(byte)0x04,(byte)0xb7,(byte)0xe7,(byte)0x72,(byte)0xf2,(byte)0xaf,(byte)0x5e,(byte)0x54,(byte)0xe9,(byte)0x03,(byte)0xad,(byte)0x59,(byte)0x64,(byte)0x8b,(byte)0xab};  byte[] expected_8bit=new byte[]{(byte)0x6e,(byte)0x43,(byte)0xe0,(byte)0x18,(byte)0xc5,(byte)0x50,(byte)0x0d,(byte)0xa7,(byte)0xfe,(byte)0x7a,(byte)0x44,(byte)0x4d,(byte)0x99,(byte)0x5d,(byte)0x8c,(byte)0xae,(byte)0xc1,(byte)0xc9,(byte)0x17,(byte)0xce};  test_PBKDF2_UTF8(password,salt,iterations,keyLength,expected_utf8);  test_PBKDF2_8BIT(password,salt,iterations,keyLength,expected_8bit);}  }
class C{  @Override public void purchaseProduct(CommonProductDetails product,RequestPurchaseProductsHandler handler,String verificationPayload){  if (iapHelper != null) {    iapHelper.purchaseProduct(product,handler,verificationPayload);  }}  }
class C{  public String toString(){  return String.format("method '%s'",name);}  }
class C{  public WrappingStringBuilder wrapTextWithNewLines(final String s){  final String[] arr=s.split("\r?\n");  for (  final String i : arr) {    wrapText(i);    append(StringUtils.LS);  }  return this;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public static BasicType toBasicType(int i){  for (int j=0; j < basicTypes.length; j++) {    if (basicTypes[j].intValue() == j) {      return (basicTypes[j]);    }  }  return ILLEGAL;}  }
class C{  public ReactiveSeq<R> generate(final T1 input1,final T2 input2,final T3 input3){  return ReactiveSeq.generate(null);}  }
class C{  protected void registerWindowAttributes(){  addAttributeProcessor(new KeepWithinStageLmlAttribute(),"keepWithinStage","keepWithin");  addAttributeProcessor(new ModalLmlAttribute(),"modal");  addAttributeProcessor(new MovableLmlAttribute(),"movable");  addAttributeProcessor(new ResizeableLmlAttribute(),"resizeable","resizable");  addAttributeProcessor(new ResizeBorderLmlAttribute(),"resizeBorder","border");  addAttributeProcessor(new TitleAlignmentLmlAttribute(),"titleAlign","titleAlignment");  addAttributeProcessor(new TitleLmlAttribute(),"title");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(getFile(stack).isHidden());}  }
class C{  @SuppressWarnings("deprecation") public static LocalTime fromDateFields(Date date){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  return new LocalTime(date.getHours(),date.getMinutes(),date.getSeconds(),(((int)(date.getTime() % 1000)) + 1000) % 1000);}  }
class C{  private SsaToRop(SsaMethod ssaMethod,boolean minimizeRegisters){  this.minimizeRegisters=minimizeRegisters;  this.ssaMeth=ssaMethod;  this.interference=LivenessAnalyzer.constructInterferenceGraph(ssaMethod);}  }
class C{  public MvcComponent(String name){  super(name);}  }
class C{  public BasicTextPaneUI(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:38.212 -0500",hash_original_method="681AF804F244AC355854B5C9066D8457",hash_generated_method="75B8F32279746472E2F7526E56846850") public void parse(final SetCookie cookie,final String portValue) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof SetCookie2) {    SetCookie2 cookie2=(SetCookie2)cookie;    if (portValue != null && portValue.trim().length() > 0) {      int[] ports=parsePortAttribute(portValue);      cookie2.setPorts(ports);    }  }}  }
class C{  public static boolean isDefaultAllowAutoFailback(){  return DEFAULT_ALLOW_AUTO_FAILBACK;}  }
class C{  public static <K>Map<K,Double> normalize(Map<K,Double> map){  Double maxValue=0.0;  for (  Double v : map.values()) {    if (v > maxValue)     maxValue=v;  }  for (  Map.Entry<K,Double> e : map.entrySet()) {    map.put(e.getKey(),map.get(e.getKey()) / maxValue);  }  return map;}  }
class C{  public static AsyncCreateInstanceResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncCreateInstanceResponseE object=new AsyncCreateInstanceResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","asyncCreateInstanceResponse").equals(reader.getName())) {          object.setAsyncCreateInstanceResponse(org.oscm.xsd.AsyncCreateInstanceResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static Filter[] makeCopies(Filter model,int num) throws Exception {  if (model == null) {    throw new Exception("No model filter set");  }  Filter[] filters=new Filter[num];  SerializedObject so=new SerializedObject(model);  for (int i=0; i < filters.length; i++) {    filters[i]=(Filter)so.getObject();  }  return filters;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long q=((Number)stack.pop()).longValue();  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()))   Carny.getInstance().setStopPadding(a,q);  return null;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public ElasticSearchTransportClient(ElasticSearchEventSerializer serializer){  this.serializer=serializer;  openLocalDiscoveryClient();}  }
class C{  public static MethExecutorResult executeObject(Object target,String selector,Object[] args){  try {    Class receiverClass=target.getClass();    Object res=null;    try {      Class[] paramTypes;      if (args == null) {        paramTypes=new Class[0];      } else {        paramTypes=new Class[args.length];        for (int i=0; i < args.length; i++) {          if (args[i] == null) {            paramTypes[i]=Object.class;          } else {            paramTypes[i]=args[i].getClass();          }        }      }      Method theMethod=getMethod(receiverClass,selector,paramTypes);      theMethod.setAccessible(true);      res=theMethod.invoke(target,args);      return new MethExecutorResult(res);    } catch (    InvocationTargetException invTargEx) {      Throwable targEx=invTargEx.getTargetException();      if (targEx == null) {        return new MethExecutorResult(res);      } else {        return new MethExecutorResult(targEx);      }    }  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable t) {    return new MethExecutorResult(t);  }}  }
class C{  public static boolean vpoolChangeRequiresMigration(VirtualPool currentVpool,VirtualPool newVpool){  s_logger.info(String.format("Checking vpoolChangeRequiresMigration from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool)) {    return false;  }  String[] include=new String[]{PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS};  return !analyzeChanges(currentVpool,newVpool,include,null,null).isEmpty();}  }
class C{  protected void error(RequestContext context,String key,Exception error){  try {    HttpServletRequest request=context.getRequest();    String filename=request.getRemoteAddr();    end(filename,key,ExceptionUtils.getMessage(error) + ":\n" + ExceptionUtils.getStackTrace(error));  } catch (  Exception e) {  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDR");  translateAll(environment,instruction,"LDR",instructions);}  }
class C{  EmulatedFieldsForDumping(ObjectOutputStream oos,ObjectStreamClass streamClass){  this.oos=oos;  this.emulatedFields=new EmulatedFields(streamClass.fields(),(ObjectStreamField[])null);}  }
class C{  public QueueNode next(QueueNode next){  return m_Next=next;}  }
class C{  XBaseWindow(Rectangle bounds){  this(new XCreateWindowParams(new Object[]{BOUNDS,bounds}));}  }
class C{  public BigInteger[] generateSignature(byte[] message){  BigInteger n=key.getParameters().getN();  BigInteger e=calculateE(n,message);  BigInteger r=null;  BigInteger s=null;  do {    BigInteger k=null;    int nBitLength=n.bitLength();    do {      do {        k=new BigInteger(nBitLength,random);      } while (k.equals(ZERO) || k.compareTo(n) >= 0);      ECPoint p=key.getParameters().getG().multiply(k);      BigInteger x=p.getX().toBigInteger();      r=x.mod(n);    } while (r.equals(ZERO));    BigInteger d=((ECPrivateKeyParameters)key).getD();    s=k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n);  } while (s.equals(ZERO));  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  public static float[] convertClip(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.CLIP_INDEX);  int primitiveType=v.getPrimitiveType();switch (primitiveType) {case CSSPrimitiveValue.CSS_RECT:    float[] off=new float[4];  off[0]=v.getTop().getFloatValue();off[1]=v.getRight().getFloatValue();off[2]=v.getBottom().getFloatValue();off[3]=v.getLeft().getFloatValue();return off;case CSSPrimitiveValue.CSS_IDENT:return null;default :throw new IllegalStateException("Unexpected primitiveType:" + primitiveType);}}  }
class C{  public static boolean isCSSNameCharacter(char c){  return c >= 128 || ((NAME[c >> 5] & (1 << (c & 0x1F))) != 0);}  }
class C{  public void selected(SelectEvent event){}  }
class C{  public DelegatingResourceLoader(Map<String,ResourceLoader> loaders){  this(loaders,null);}  }
class C{  public boolean isIPVideoCallSupported(){  return mIpVideoCall;}  }
class C{  private CLoopHighlighter(){}  }
class C{  void codeAppend(Environment env,Context ctx,Assembler asm,ClassDeclaration sbClass,boolean needBuffer) throws ClassNotFound, AmbiguousMember {  if (type.isType(TC_CLASS)) {    left.codeAppend(env,ctx,asm,sbClass,needBuffer);    right.codeAppend(env,ctx,asm,sbClass,false);  } else {    super.codeAppend(env,ctx,asm,sbClass,needBuffer);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:10.457 -0500",hash_original_method="4B78087A434BCC06D8E64A3B5F0E26A9",hash_generated_method="70531B076501D18170292338579EDB83") public BoringLayout replaceOrMake(CharSequence source,TextPaint paint,int outerwidth,Alignment align,float spacingmult,float spacingadd,BoringLayout.Metrics metrics,boolean includepad,TextUtils.TruncateAt ellipsize,int ellipsizedWidth){  boolean trust;  if (ellipsize == null || ellipsize == TextUtils.TruncateAt.MARQUEE) {    replaceWith(source,paint,outerwidth,align,spacingmult,spacingadd);    mEllipsizedWidth=outerwidth;    mEllipsizedStart=0;    mEllipsizedCount=0;    trust=true;  } else {    replaceWith(TextUtils.ellipsize(source,paint,ellipsizedWidth,ellipsize,true,this),paint,outerwidth,align,spacingmult,spacingadd);    mEllipsizedWidth=ellipsizedWidth;    trust=false;  }  init(getText(),paint,outerwidth,align,spacingmult,spacingadd,metrics,includepad,trust);  return this;}  }
class C{  public Person(int id,String firstName,String lastName,double salary){  this(id,0,firstName,lastName,salary);}  }
class C{  public void addAttributes(Request request) throws StunException {  MessageFactory.addLongTermCredentialAttributes(request,getUsername(),getRealm(),getNonce());}  }
class C{  public ReferenceOctetStreamData(InputStream octetStream,String uri,String mimeType){  if (octetStream == null) {    throw new NullPointerException("octetStream is null");  }  this.octetStream=octetStream;  this.uri=uri;  this.mimeType=mimeType;}  }
class C{  public static Validator<String> allowedChars(String[] chars,BiFunction<String,StringAllowedCharsValidator,? extends IllegalArgumentException> exception){  return new ValidatorEntry<>(StringAllowedCharsValidator.create(joinRanges(chars)),exception);}  }
class C{  public void hleKernelThreadWait(SceKernelThreadInfo thread,int micros,boolean forever){  thread.wait.forever=forever;  thread.wait.micros=micros;  if (forever) {    thread.wait.microTimeTimeout=0;    thread.wait.waitTimeoutAction=null;  } else {    if (micros < THREAD_DELAY_MINIMUM_MICROS) {      micros=THREAD_DELAY_MINIMUM_MICROS * 2;    }    long longMicros=((long)micros) & 0xFFFFFFFFL;    thread.wait.microTimeTimeout=Emulator.getClock().microTime() + longMicros;    thread.wait.waitTimeoutAction=new TimeoutThreadAction(thread);    thread.wait.waitStateChecker=timeoutThreadWaitStateChecker;  }  if (LOG_CONTEXT_SWITCHING && log.isDebugEnabled() && !isIdleThread(thread)) {    log.debug("-------------------- hleKernelThreadWait micros=" + micros + " forever:"+ forever+ " thread:'"+ thread.name+ "' caller:"+ getCallingFunction());  }}  }
class C{  private Anchor(int type){  this.type=type;}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  Position aircraft=new Position(34.2,-119.2,3000);  Position airport=new Position(34.1192744,-119.1195850,4.0);  Globe globe=wwd.getGlobe();  double heading=aircraft.greatCircleAzimuth(airport);  double distanceRadians=aircraft.greatCircleDistance(airport);  double distance=distanceRadians * globe.getRadiusAt(aircraft.latitude,aircraft.longitude);  double tilt=Math.toDegrees(Math.atan(distance / aircraft.altitude));  Camera camera=new Camera();  camera.set(aircraft.latitude,aircraft.longitude,aircraft.altitude,WorldWind.ABSOLUTE,heading,tilt,0);  wwd.getNavigator().setAsCamera(globe,camera);  return wwd;}  }
class C{  public void stopScanning(){  Log.d(TAG,"Stopping Scanning");  mBluetoothLeScanner.stopScan(mScanCallback);  mScanCallback=null;  mAdapter.notifyDataSetChanged();}  }
class C{  protected Address createAddress(String street,String houseNumber,String postalCode,String city,String country){  final Address address=new Address();  address.setStreet(street);  address.setHouseNumber(houseNumber);  address.setPostalCode(postalCode);  address.setCity(city);  address.setCountry(country);  return address;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:46.887 -0500",hash_original_method="8D4A1EEE314B3C48143C50241149E8EC",hash_generated_method="76FDAD0D1C9C56ADCDC8D83ED45FFD6D") private void findClasses(String packageName,Set<String> classNames,Set<String> subpackageNames){  String packagePrefix=packageName + '.';  String pathPrefix=packagePrefix.replace('.','/');  for (  String entryName : classPath) {    File classPathEntry=new File(entryName);    if (classPathEntry.exists()) {      try {        if (entryName.endsWith(".apk")) {          findClassesInApk(entryName,packageName,classNames,subpackageNames);        } else {          for (          String apkPath : apkPaths) {            File file=new File(apkPath);            scanForApkFiles(file,packageName,classNames,subpackageNames);          }        }      } catch (      IOException e) {        throw new AssertionError("Can't read classpath entry " + entryName + ": "+ e.getMessage());      }    }  }}  }
class C{  private void addTermFrequencies(Map<String,Int> termFreqMap,Terms vector) throws IOException {  addTermFrequencies(termFreqMap,vector,null);}  }
class C{  public ParallelCompositeReader(boolean closeSubReaders,CompositeReader... readers) throws IOException {  this(closeSubReaders,readers,readers);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.491 -0500",hash_original_method="FE04684AB3D72B8C190BB2063ADDA47F",hash_generated_method="FE04684AB3D72B8C190BB2063ADDA47F") Uri openFileChooser(String acceptType){  if (mWebChromeClient == null) {    return null;  }  Message myMessage=obtainMessage(OPEN_FILE_CHOOSER);  UploadFile uploadFile=new UploadFile();  UploadFileMessageData data=new UploadFileMessageData(uploadFile,acceptType);  myMessage.obj=data;synchronized (this) {    sendMessage(myMessage);    try {      wait();    } catch (    InterruptedException e) {      Log.e(LOGTAG,"Caught exception while waiting for openFileChooser");      Log.e(LOGTAG,Log.getStackTraceString(e));    }  }  return uploadFile.getResult();}  }
class C{  protected int index(Object key,Object obj,int ignoreThisSlot){  HashIndexSetProperties metaData=hashIndexSetProperties;  int hash;  int pos;  Object[] set=metaData.set;  int mask=metaData.mask;  Object curr;  hash=computeHash(key);  if (!((curr=set[pos=(it.unimi.dsi.fastutil.HashCommon.mix(hash)) & mask]) == null || curr == REMOVED)) {    if (((curr).equals(obj) && pos != ignoreThisSlot))     return pos;    while (!((curr=set[pos=(pos + 1) & mask]) == null || curr == REMOVED)) {      if (((curr).equals(obj)) && pos != ignoreThisSlot)       return pos;    }  }  return -1;}  }
class C{  public int hashCode(){  int result=17;  result=37 * result + hashCode(x);  result=37 * result + hashCode(y);  return result;}  }
class C{  public static void systemInformation(){  StringBuffer sb=new StringBuffer();  sb.append("-=-=-=- Device Information -=-=-=-\n");  sb.append("Brand : ").append(android.os.Build.BRAND).append("\n");  sb.append("Manufacturer : ").append(android.os.Build.MANUFACTURER).append("\n");  sb.append("Model : ").append(android.os.Build.MODEL).append("\n");  sb.append("Bootloader : ").append(android.os.Build.BOARD).append("\n");  sb.append("CPU ABI : ").append(android.os.Build.CPU_ABI).append("\n");  sb.append("CPU ABI 2 : ").append(android.os.Build.CPU_ABI2).append("\n");  sb.append("-=-=-=- /Device Information -=-=-=-\n\n");  sb.append("-=-=-=- OpenGL Information -=-=-=-\n");  if (sGL10 != null) {    sb.append("Vendor : ").append(sGL10.glGetString(GL10.GL_VENDOR)).append("\n");    sb.append("Renderer : ").append(sGL10.glGetString(GL10.GL_RENDERER)).append("\n");    sb.append("Version : ").append(sGL10.glGetString(GL10.GL_VERSION)).append("\n");    String extensions=sGL10.glGetString(GL10.GL_EXTENSIONS);    String[] ext=extensions.split(" ");    int extLength=ext.length;    if (extLength > 0) {      sb.append("Extensions : ").append(ext[0]).append("\n");      for (int i=1; i < extLength; i++) {        sb.append(" : ").append(ext[i]).append("\n");      }    }  } else {    sb.append("OpenGL info : Cannot find OpenGL information. Please call this function from initScene().\n");  }  sb.append("-=-=-=- /OpenGL Information -=-=-=-\n");  sb.append(Capabilities.getInstance().toString());  RajLog.i(sb.toString());}  }
class C{  public boolean isRectangleType(){  return type == TYPE_LINE || type == TYPE_BEVEL_LOWERED || type == TYPE_BEVEL_RAISED || type == TYPE_ETCHED_LOWERED || type == TYPE_ETCHED_RAISED || type == TYPE_COMPOUND || type == TYPE_EMPTY || type == TYPE_DOTTED || type == TYPE_DASHED || type == TYPE_DOUBLE || type == TYPE_OUTSET || type == TYPE_INSET || type == TYPE_GROOVE || type == TYPE_RIDGE;}  }
class C{  public static void importResources(IContainer importTarget,Bundle bundle,String bundleSourcePath) throws CoreException, IOException {  Enumeration<?> entryPaths=bundle.getEntryPaths(bundleSourcePath);  while (entryPaths.hasMoreElements()) {    String path=(String)entryPaths.nextElement();    IPath name=new Path(path.substring(bundleSourcePath.length()));    if (path.endsWith("/.svn/")) {      continue;    } else     if (path.endsWith("/")) {      IFolder folder=importTarget.getFolder(name);      if (folder.exists()) {        folder.delete(true,null);      }      folder.create(true,true,null);      importResources(folder,bundle,path);    } else {      URL url=bundle.getEntry(path);      IFile file=importTarget.getFile(name);      if (!file.exists()) {        file.create(url.openStream(),true,null);      } else {        file.setContents(url.openStream(),true,false,null);      }    }  }}  }
class C{  @Override public XMLStreamWriter createXMLStreamWriter(Result result) throws XMLStreamException {  try {    if (result instanceof StreamResult) {      return new WbXmlStreamWriter(new FileOutputStream(result.getSystemId()),(WbXmlDefinition)props.get(DEFINITION_PROPERTY),(WbXmlEncoder.StrtblType)props.get(ENCODING_TYPE_PROPERTY),(Boolean)props.get(SKIP_SPACES_PROPERTY));    } else {      throw new XMLStreamException("WBXML only support StreamResult!");    }  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public ViewSource(V source){  super(source);  onSourceCreated();}  }
class C{  public static void write(float lt,float ln,int offset_x1,int offset_y1,int w,int h,int[] pix,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeByte(COLORMODEL_DIRECT);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(pix.length);  for (int i=0; i < pix.length; i++) {    dos.writeInt(pix[i]);  }  properties.write(dos);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public synchronized void waitForInterrupt(double timeout){  try {    wait((long)(timeout * 1000));  } catch (  Exception e) {  }}  }
class C{  public static void copy(Path from,Path to) throws IOException {  copy(from,to,false);}  }
class C{  public static IPackageFragmentRoot addLibrary(IJavaProject jproject,IPath path,IPath sourceAttachPath,IPath sourceAttachRoot) throws JavaModelException {  IClasspathEntry cpe=JavaCore.newLibraryEntry(path,sourceAttachPath,sourceAttachRoot);  addToClasspath(jproject,cpe);  IResource workspaceResource=ResourcesPlugin.getWorkspace().getRoot().findMember(path);  if (workspaceResource != null) {    return jproject.getPackageFragmentRoot(workspaceResource);  }  return jproject.getPackageFragmentRoot(path.toString());}  }
class C{  public MapWidget(Bundle bundle,Context context,String rootMapFolder,int initialZoomLevel){  super(context);  initCommonStuff(context);  String configPath=OfflineMapUtil.getConfigFilePath(rootMapFolder);  try {    MapConfigParser configParser=new MapConfigParser(rootMapFolder);    config=configParser.parse(context,configPath);    tileProvider=new AssetTileProvider(getContext(),config);    int maxZoomLevel=OfflineMapUtil.getMaxZoomLevel(config.getImageWidth(),config.getImageHeight());    int zoomLevel=initialZoomLevel;    float scale=1.0f;    if (bundle != null) {      if (bundle.containsKey("com.ls.zoomLevel"))       zoomLevel=bundle.getInt("com.ls.zoomLevel");      if (bundle.containsKey("com.ls.scale"))       scale=bundle.getFloat("com.ls.scale");    }    if (zoomLevel > maxZoomLevel) {      grid=new Grid(this,config,tileProvider,maxZoomLevel);      if (scale == 1.0f) {        scale=(float)Math.pow(2,zoomLevel - maxZoomLevel);      }    } else {      grid=new Grid(this,config,tileProvider,zoomLevel);    }    this.scale=scale;    grid.setInternalScale(scale);    initPositionPin();    restoreMapPosition(bundle);  } catch (  SAXException e) {    Log.e(TAG,"Exception: " + e);    e.printStackTrace();  }catch (  IOException e) {    Log.e(TAG,"Exception: " + e);    e.printStackTrace();  }}  }
class C{  public static <E>Set<E> of(E e1,E e2,E e3,E e4,E e5,E e6){  return new ImmutableCollections.SetN<E>(e1,e2,e3,e4,e5,e6);}  }
class C{  @Override public void init(final IBuildDefinition buildDefinition){  this.buildDefinition=buildDefinition;  createBuildWizards=getCreateBuildConfigurationWizards();  setWindowTitle(Messages.getString("CreateBuildConfigurationWizard.WindowTitle"));  setDefaultPageImageDescriptor(imageHelper.getImageDescriptor("icons/build_wiz.png"));  setNeedsProgressMonitor(true);  setForcePreviousAndNextButtons(true);}  }
class C{  public static X509Certificate loadX509CertificateFromFile(File x509CertificateFile) throws IOException, CertificateNotYetValidException, CertificateExpiredException, CertificateException {  if (!x509CertificateFile.exists()) {    String message="The given file \"" + x509CertificateFile + "\" does not exist.";    LOG.error(message);    throw new IOException(message);  } else   if (!x509CertificateFile.canRead()) {    String message="The given file \"" + x509CertificateFile + "\" cannot be read.";    LOG.error(message);    throw new IOException(message);  }  CertificateFactory certificateFactory=null;  try {    certificateFactory=CertificateFactory.getInstance("X.509",BouncyCastleProvider.PROVIDER_NAME);  } catch (  NoSuchProviderException e) {    LOG.error("Certificate provider not found.",e);    throw new RuntimeException("Certificate provider not found.",e);  }  Certificate certificate=certificateFactory.generateCertificate(new FileInputStream(x509CertificateFile));  if (certificate == null) {    String message="The given file \"" + x509CertificateFile + "\" does not contain a X.509 certificate.";    LOG.error(message);    throw new CertificateException(message);  }  if (!certificate.getType().equalsIgnoreCase("x.509")) {    String message="The certificate contained in the given file \"" + x509CertificateFile + "\" is not a X.509 certificate.";    LOG.error(message);    throw new CertificateException(message);  }  X509Certificate x509Certificate=(X509Certificate)certificate;  x509Certificate.checkValidity();  return x509Certificate;}  }
class C{  public static Solution newSolution(double... objectives){  return new Solution(objectives);}  }
class C{  public void shutdown(GL10 gl){  if (gl != null) {    if (mState > STATE_NEW) {      int[] textures=new int[1];      textures[0]=mTextureID;      gl.glDeleteTextures(1,textures,0);      mState=STATE_NEW;    }  }}  }
class C{  public void incomingStarted(){  mIncomingStarted=true;}  }
class C{  void adjustElementLevel(int value){  elementLevel=elementLevel + value;}  }
class C{  public CSSEngineEvent(CSSEngine source,Element elt,int[] props){  super(source);  element=elt;  properties=props;}  }
class C{  void clearBridgeSecret(){  expectedBridgeSecret=-1;}  }
class C{  public Object parseCommandLine(String[] args){  Options options=CommandLineParameters.getCommandLineOptions();  List<String> javaOpts=new ArrayList<String>();  String version=EvoSuite.class.getPackage().getImplementationVersion();  if (version == null) {    version="";  }  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (!line.hasOption(Setup.NAME)) {      String[] unrecognized=line.getArgs();      if (unrecognized.length > 0) {        String msg="";        if (unrecognized.length == 1) {          msg="There is one unrecognized input:";        } else {          msg="There are " + unrecognized.length + " unrecognized inputs:";        }        msg+=" " + Arrays.toString(unrecognized);        msg+="\nRecall, '-Dx=v' assignments should have no space, i.e. '-Dx= v' and '-Dx = v' are wrong";        throw new IllegalArgumentException(msg);      }    }    setupProperties();    if (TestSuiteWriterUtils.needToUseAgent() && Properties.JUNIT_CHECK) {      ClassPathHacker.initializeToolJar();    }    if (!line.hasOption("regressionSuite")) {      if (line.hasOption("criterion")) {        javaOpts.add("-Dcriterion=" + line.getOptionValue("criterion"));        try {          Properties.getInstance().setValue("criterion",line.getOptionValue("criterion"));        } catch (        Exception e) {          throw new Error("Invalid value for criterion: " + e.getMessage());        }      }    } else {      javaOpts.add("-Dcriterion=regression");    }    CommandLineParameters.handleSeed(javaOpts,line);    CommandLineParameters.addJavaDOptions(javaOpts,line);    CommandLineParameters.handleClassPath(line);    CommandLineParameters.handleJVMOptions(javaOpts,line);    if (line.hasOption("base_dir")) {      base_dir_path=line.getOptionValue("base_dir");      File baseDir=new File(base_dir_path);      if (!baseDir.exists()) {        LoggingUtils.getEvoLogger().error("Base directory does not exist: " + base_dir_path);        return null;      }      if (!baseDir.isDirectory()) {        LoggingUtils.getEvoLogger().error("Specified base directory is not a directory: " + base_dir_path);        return null;      }    }    CommandLineParameters.validateInputOptionsAndParameters(line);    if (!line.hasOption(ListClasses.NAME)) {      LoggingUtils.getEvoLogger().info("* EvoSuite " + version);      String conf=Properties.CONFIGURATION_ID;      if (conf != null && !conf.isEmpty()) {        LoggingUtils.getEvoLogger().info("* Configuration: " + conf);      }    }    if (Properties.CLIENT_ON_THREAD) {      MSecurityManager.setRunningClientOnThread(true);    }    if (Properties.SPAWN_PROCESS_MANAGER_PORT != null) {      SpawnProcessKeepAliveChecker.getInstance().registerToRemoteServerAndDieIfFails(Properties.SPAWN_PROCESS_MANAGER_PORT);    }    if (line.hasOption(Help.NAME)) {      return Help.execute(options);    }    if (line.hasOption(Setup.NAME)) {      return Setup.execute(javaOpts,line);    }    if (line.hasOption(MeasureCoverage.NAME)) {      return MeasureCoverage.execute(options,javaOpts,line);    }    if (line.hasOption(ListClasses.NAME)) {      return ListClasses.execute(options,line);    }    if (line.hasOption(WriteDependencies.NAME)) {      return WriteDependencies.execute(options,javaOpts,line);    }    if (line.hasOption(PrintStats.NAME)) {      return PrintStats.execute(options,javaOpts,line);    }    if (line.hasOption(ListParameters.NAME)) {      return ListParameters.execute();    }    if (line.hasOption(Continuous.NAME)) {      return Continuous.execute(options,javaOpts,line);    }    return TestGeneration.executeTestGeneration(options,javaOpts,line);  } catch (  ParseException exp) {    logger.error("Parsing failed.  Reason: " + exp.getMessage());    Help.execute(options);  }  return null;}  }
class C{  public CopyLogAction(final JTextArea area){  super("Copy");  m_area=area;}  }
class C{  private long readXmlLength(GcsFilename xmlLengthFilename) throws IOException {  try (InputStream input=gcsUtils.openInputStream(xmlLengthFilename)){    return Long.parseLong(new String(ByteStreams.toByteArray(input),UTF_8).trim());  } }  }
class C{  public static CCallgraph loadCallgraph(final AbstractSQLProvider provider,final CModule module,final int callgraphId,final List<INaviFunction> functions) throws CouldntLoadDataException {  checkArguments(provider,module,functions);  final CConnection connection=provider.getConnection();  try {    final Pair<List<ICallgraphNode>,Map<Integer,CCallgraphNode>> nodeResult=loadNodes(connection,callgraphId,functions);    final List<ICallgraphEdge> edges=loadEdges(connection,callgraphId,nodeResult.second());    return new CCallgraph(nodeResult.first(),edges);  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public X509CertificateHolder(byte[] certEncoding) throws IOException {  this(parseBytes(certEncoding));}  }
class C{  public static double covariance(double[] x,double[] y,double xmean,double ymean,double xstdev,double ystdev){  if (x.length != y.length)   throw new IllegalArgumentException("x and y arrays must be same length!");  int count=x.length;  double covar=0.0;  for (int i=0; i < x.length; i++) {    if (Double.isNaN(x[i]) || Double.isNaN(y[i])) {      count--;    } else {      covar+=(x[i] - xmean) * (y[i] - ymean);    }  }  covar/=count;  covar/=(xstdev * ystdev);  return covar;}  }
class C{  public static void createBootImageObjects(Vector<String> typeNames,String bootImageTypeNamesFile) throws IllegalAccessException {  Callbacks.notifyBootImage(typeNames.elements());  long startTime=0;  long stopTime=0;  if (verbosity.isAtLeast(SUMMARY))   say("loading");  if (profile)   startTime=System.currentTimeMillis();  for (  String typeName : typeNames) {    if (verbosity.isAtLeast(TYPE_NAMES))     say("typeName:",typeName);    RVMType type;    try {      TypeReference tRef=TypeReference.findOrCreate(typeName);      type=tRef.resolve();    } catch (    NoClassDefFoundError ncdf) {      ncdf.printStackTrace(System.out);      fail(bootImageTypeNamesFile + " contains a class named \"" + typeName+ "\", but we can't find a class with that name: "+ ncdf);      return;    }catch (    IllegalArgumentException ila) {      ila.printStackTrace(System.out);      fail(bootImageTypeNamesFile + " is supposed to contain type names.  It contains \"" + typeName+ "\", which does not parse as a legal type name: "+ ila);      return;    }    type.markAsBootImageClass();    typeName=typeName.replace('/','.');    if (typeName.startsWith("L"))     typeName=typeName.substring(1,typeName.length() - 1);    bootImageTypes.put(typeName,type);  }  if (profile) {    stopTime=System.currentTimeMillis();    System.out.println("PROF: \tloading types " + (stopTime - startTime) + " ms");  }  int typeCount=bootImageTypes.size();  JMXSupport.CLASS_LOADING_JMX_SUPPORT.setClassLoadedCountForBootimage(typeCount);  if (verbosity.isAtLeast(SUMMARY))   say(String.valueOf(typeCount)," types");  if (profile)   startTime=System.currentTimeMillis();  if (verbosity.isAtLeast(SUMMARY))   say("resolving");  for (  RVMType type : bootImageTypes.values()) {    if (verbosity.isAtLeast(DETAILED))     say("resolving " + type);    type.resolve();  }  for (  RVMType type : bootImageTypes.values()) {    type.allBootImageTypesResolved();  }  if (profile) {    stopTime=System.currentTimeMillis();    System.out.println("PROF: \tresolving types " + (stopTime - startTime) + " ms");  }  BootRecord bootRecord=BootRecord.the_boot_record;  RVMClass rvmBRType=getRvmType(bootRecord.getClass()).asClass();  RVMArray intArrayType=RVMArray.IntArray;  bootImage.allocateDataStorage(rvmBRType.getInstanceSize(),ObjectModel.getAlignment(rvmBRType),ObjectModel.getOffsetForAlignment(rvmBRType,false));  Address jtocAddress=bootImage.allocateDataStorage(intArrayType.getInstanceSize(0),VM.BuildForIA32 ? 16 : ObjectModel.getAlignment(intArrayType),ObjectModel.getOffsetForAlignment(intArrayType,false));  bootImage.resetAllocator();  bootRecord.tocRegister=jtocAddress.plus(intArrayType.getInstanceSize(Statics.middleOfTable));  ArchitectureFactory.initOutOfLineMachineCode();  if (profile)   startTime=System.currentTimeMillis();  if (verbosity.isAtLeast(SUMMARY))   say("instantiating");  if (verbosity.isAtLeast(SUMMARY))   say("setting up compilation infrastructure and pre-compiling easy cases");  CompilationOrder order=new CompilationOrder(typeCount,numThreads);  for (  RVMType type : bootImageTypes.values()) {    order.addType(type);  }  order.fixUpMissingSuperClasses();  if (verbosity.isAtLeast(SUMMARY))   say(" compiling with " + numThreads + " threads");  ExecutorService threadPool=Executors.newFixedThreadPool(numThreads);  int runnableCount=order.getCountOfNeededWorkers();  while (runnableCount > 0) {    try {      threadPool.execute(order.getNextRunnable());      runnableCount--;    } catch (    InterruptedException e) {      throw new Error("Build interrupted",e);    }  }  threadPool.shutdown();  try {    while (!threadPool.awaitTermination(Long.MAX_VALUE,TimeUnit.SECONDS)) {      say("Compilation really shouldn't take this long");    }  } catch (  InterruptedException e) {    throw new Error("Build interrupted",e);  }  if (BootImageWorker.instantiationFailed) {    throw new Error("Error during instantiaion");  }  if (profile) {    stopTime=System.currentTimeMillis();    System.out.println("PROF: \tinstantiating types " + (stopTime - startTime) + " ms");  }  staticsJunk=Statics.bootImageInstantiationFinished();  FunctionTable functionTable=BuildJNIFunctionTable.buildTable();  JNIEnvironment.initFunctionTable(functionTable);  if (verbosity.isAtLeast(SUMMARY))   say("field info gathering");  if (profile)   startTime=System.currentTimeMillis();  bootImageTypeFields=new HashMap<Key,FieldInfo>(typeCount);  HashSet<String> invalidEntrys=new HashSet<String>();  for (  RVMType rvmType : bootImageTypes.values()) {    FieldInfo fieldInfo;    if (!rvmType.isClassType())     continue;    Class<?> jdkType=getJdkType(rvmType);    if (jdkType == null)     continue;    Key key=new Key(jdkType);    fieldInfo=bootImageTypeFields.get(key);    if (fieldInfo != null) {      fieldInfo.rvmType=rvmType;    } else {      if (verbosity.isAtLeast(SUMMARY))       say("making fieldinfo for " + rvmType);      fieldInfo=new FieldInfo(jdkType,rvmType);      bootImageTypeFields.put(key,fieldInfo);      for (Class<?> cls=jdkType.getSuperclass(); cls != null; cls=cls.getSuperclass()) {        key=new Key(cls);        fieldInfo=bootImageTypeFields.get(key);        if (fieldInfo != null) {          break;        } else {          if (verbosity.isAtLeast(SUMMARY))           say("making fieldinfo for " + jdkType);          fieldInfo=new FieldInfo(cls,null);          bootImageTypeFields.put(key,fieldInfo);        }      }    }  }  for (  FieldInfo fieldInfo : bootImageTypeFields.values()) {    RVMType rvmType=fieldInfo.rvmType;    if (rvmType == null) {      if (verbosity.isAtLeast(SUMMARY))       say("bootImageTypeField entry has no rvmType:" + fieldInfo.jdkType);      continue;    }    Class<?> jdkType=fieldInfo.jdkType;    if (verbosity.isAtLeast(SUMMARY))     say("building static and instance fieldinfo for " + rvmType);    RVMField[] rvmFields=rvmType.getStaticFields();    fieldInfo.jdkStaticFields=new Field[rvmFields.length];    for (int j=0; j < rvmFields.length; j++) {      String rvmName=rvmFields[j].getName().toString();      for (      Field f : fieldInfo.jdkFields) {        if (f.getName().equals(rvmName)) {          fieldInfo.jdkStaticFields[j]=f;          f.setAccessible(true);          break;        }      }    }    rvmFields=rvmType.getInstanceFields();    fieldInfo.jdkInstanceFields=new Field[rvmFields.length];    for (int j=0; j < rvmFields.length; j++) {      String rvmName=rvmFields[j].getName().toString();      jdkType=getJdkType(rvmFields[j].getDeclaringClass());      if (jdkType == null)       continue;      FieldInfo jdkFieldInfo=bootImageTypeFields.get(new Key(jdkType));      if (jdkFieldInfo == null)       continue;      Field[] jdkFields=jdkFieldInfo.jdkFields;      for (      Field f : jdkFields) {        if (f.getName().equals(rvmName)) {          fieldInfo.jdkInstanceFields[j]=f;          f.setAccessible(true);          break;        }      }    }  }  if (profile) {    stopTime=System.currentTimeMillis();    System.out.println("PROF: \tcreating type mapping " + (stopTime - startTime) + " ms");  }  startupThread=RVMThread.setupBootThread();  byte[] stack=startupThread.getStack();  int idx=stack.length - 1;  if (VM.LittleEndian) {    stack[idx--]=(byte)0xde;    stack[idx--]=(byte)0xad;    stack[idx--]=(byte)0xba;    stack[idx--]=(byte)0xbe;  } else {    stack[idx--]=(byte)0xbe;    stack[idx--]=(byte)0xba;    stack[idx--]=(byte)0xad;    stack[idx--]=(byte)0xde;  }  BootstrapClassLoader.setBootstrapRepositories(bootImageRepositoriesAtExecutionTime);  if (verbosity.isAtLeast(SUMMARY))   say("populating jtoc with static fields");  if (profile)   startTime=System.currentTimeMillis();  for (  RVMType rvmType : bootImageTypes.values()) {    if (verbosity.isAtLeast(SUMMARY))     say("  jtoc for ",rvmType.toString());    if (!rvmType.isClassType())     continue;    Class<?> jdkType=getJdkType(rvmType);    if (jdkType == null && verbosity.isAtLeast(SUMMARY)) {      say("host has no class \"" + rvmType + "\"");    }    RVMField[] rvmFields=rvmType.getStaticFields();    for (int j=0; j < rvmFields.length; ++j) {      RVMField rvmField=rvmFields[j];      TypeReference rvmFieldType=rvmField.getType();      Offset rvmFieldOffset=rvmField.getOffset();      String rvmFieldName=rvmField.getName().toString();      Field jdkFieldAcc=null;      if (jdkType != null && jdkType.equals(java.util.concurrent.locks.AbstractQueuedSynchronizer.class)) {        RVMClass c=(RVMClass)rvmType;        if (rvmFieldName.equals("stateOffset")) {          Statics.setSlotContents(rvmFieldOffset,c.findDeclaredField(Atom.findOrCreateAsciiAtom("state")).getOffset().toLong());          continue;        } else         if (rvmFieldName.equals("headOffset")) {          Statics.setSlotContents(rvmFieldOffset,c.findDeclaredField(Atom.findOrCreateAsciiAtom("head")).getOffset().toLong());          continue;        } else         if (rvmFieldName.equals("tailOffset")) {          Statics.setSlotContents(rvmFieldOffset,c.findDeclaredField(Atom.findOrCreateAsciiAtom("tail")).getOffset().toLong());          continue;        } else         if (rvmFieldName.equals("waitStatusOffset")) {          try {            Statics.setSlotContents(rvmFieldOffset,((RVMClass)getRvmType(Class.forName("java.util.concurrent.locks.AbstractQueuedSynchronizer$Node"))).findDeclaredField(Atom.findOrCreateAsciiAtom("waitStatus")).getOffset().toLong());          } catch (          ClassNotFoundException e) {            throw new Error(e);          }          continue;        }      } else       if (jdkType != null && jdkType.equals(java.util.concurrent.locks.LockSupport.class)) {        RVMClass c=(RVMClass)rvmType;        if (rvmFieldName.equals("parkBlockerOffset")) {          Statics.setSlotContents(rvmFieldOffset,((RVMClass)getRvmType(java.lang.Thread.class)).findDeclaredField(Atom.findOrCreateAsciiAtom("parkBlocker")).getOffset().toLong());          continue;        }      }      if (jdkType != null)       jdkFieldAcc=getJdkFieldAccessor(jdkType,j,STATIC_FIELD);      if (jdkFieldAcc == null) {        if (jdkType != null) {          if (!copyKnownStaticField(jdkType,rvmFieldName,rvmFieldType,rvmFieldOffset)) {            if (verbosity.isAtLeast(DETAILED)) {              traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);              traceContext.traceFieldNotInHostJdk();              traceContext.pop();            }            Statics.setSlotContents(rvmFieldOffset,0);            if (!VM.runningTool)             bootImage.countNulledReference();            invalidEntrys.add(jdkType.getName());          }        } else {          if (verbosity.isAtLeast(DETAILED)) {            traceContext.push(rvmFieldType.toString(),rvmFieldType.toString(),rvmFieldName);            traceContext.traceFieldNotInHostJdk();            traceContext.pop();          }          Statics.setSlotContents(rvmFieldOffset,0);          if (!VM.runningTool)           bootImage.countNulledReference();          invalidEntrys.add(rvmField.getDeclaringClass().toString());        }        continue;      }      if (!Modifier.isStatic(jdkFieldAcc.getModifiers())) {        if (verbosity.isAtLeast(DETAILED))         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);        if (verbosity.isAtLeast(DETAILED))         traceContext.traceFieldNotStaticInHostJdk();        if (verbosity.isAtLeast(DETAILED))         traceContext.pop();        Statics.setSlotContents(rvmFieldOffset,0);        if (!VM.runningTool)         bootImage.countNulledReference();        invalidEntrys.add(jdkType.getName());        continue;      }      if (!equalTypes(jdkFieldAcc.getType().getName(),rvmFieldType)) {        if (verbosity.isAtLeast(DETAILED))         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);        if (verbosity.isAtLeast(DETAILED))         traceContext.traceFieldDifferentTypeInHostJdk();        if (verbosity.isAtLeast(DETAILED))         traceContext.pop();        Statics.setSlotContents(rvmFieldOffset,0);        if (!VM.runningTool)         bootImage.countNulledReference();        invalidEntrys.add(jdkType.getName());        continue;      }      if (verbosity.isAtLeast(DETAILED))       say("    populating jtoc slot ",String.valueOf(Statics.offsetAsSlot(rvmFieldOffset))," with ",rvmField.toString());      if (rvmFieldType.isPrimitiveType()) {        if (rvmFieldType.isBooleanType()) {          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getBoolean(null) ? 1 : 0);        } else         if (rvmFieldType.isByteType()) {          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getByte(null));        } else         if (rvmFieldType.isCharType()) {          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getChar(null));        } else         if (rvmFieldType.isShortType()) {          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getShort(null));        } else         if (rvmFieldType.isIntType()) {          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getInt(null));        } else         if (rvmFieldType.isLongType()) {          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getLong(null));        } else         if (rvmFieldType.isFloatType()) {          float f=jdkFieldAcc.getFloat(null);          Statics.setSlotContents(rvmFieldOffset,Float.floatToIntBits(f));        } else         if (rvmFieldType.isDoubleType()) {          double d=jdkFieldAcc.getDouble(null);          Statics.setSlotContents(rvmFieldOffset,Double.doubleToLongBits(d));        } else         if (rvmFieldType.equals(TypeReference.Address) || rvmFieldType.equals(TypeReference.Word) || rvmFieldType.equals(TypeReference.Extent)|| rvmFieldType.equals(TypeReference.Offset)) {          Object o=jdkFieldAcc.get(null);          String msg=" static field " + rvmField.toString();          boolean warn=rvmFieldType.equals(TypeReference.Address);          Statics.setSlotContents(rvmFieldOffset,getWordValue(o,msg,warn));        } else {          fail("unexpected primitive field type: " + rvmFieldType);        }      } else {        final Object o=jdkFieldAcc.get(null);        if (verbosity.isAtLeast(ADDRESSES))         say("       setting with ",Services.addressAsHexString(Magic.objectAsAddress(o)));        Statics.setSlotContents(rvmFieldOffset,o);      }    }  }  if (verbosity.isAtLeast(DETAILED)) {    for (    final String entry : invalidEntrys) {      say("Static fields of type are invalid: ",entry);    }  }  if (profile) {    stopTime=System.currentTimeMillis();    System.out.println("PROF: \tinitializing jtoc " + (stopTime - startTime) + " ms");  }}  }
class C{  final public short unpackShort() throws IOException {  if (off + 1 > limit)   throw new EOFException();  short b=(short)buf[off++];  short v;  if ((b & 0x80) != 0) {    v=(short)((b & 0x7f) << 8);    if (off + 1 > limit)     throw new EOFException();    b=buf[off++];    v|=(b & 0xff);  } else {    v=b;  }  return (short)v;}  }
class C{  private boolean populateCloudConfig(VirtualMachineConfigSpec spec){  if (this.disks == null || this.disks.size() == 0) {    return false;  }  DiskState bootDisk=this.disks.stream().filter(null).findFirst().orElse(null);  if (bootDisk == null) {    return false;  }  boolean customizationsApplied=false;  VmConfigSpec vapp=new VmConfigSpec();  vapp.getOvfEnvironmentTransport().add(OvfDeployer.TRANSPORT_ISO);  String cloudConfig=getFileItemByPath(bootDisk,CLOUD_CONFIG_PROPERTY_USER_DATA);  if (cloudConfig != null) {    VAppPropertySpec property=new VAppPropertySpec();    property.setOperation(ArrayUpdateOperation.ADD);    VAppPropertyInfo userDataInfo=new VAppPropertyInfo();    userDataInfo.setType("string");    userDataInfo.setUserConfigurable(true);    userDataInfo.setId(CLOUD_CONFIG_PROPERTY_USER_DATA);    userDataInfo.setValue(Base64.getEncoder().encodeToString(cloudConfig.getBytes()));    property.setInfo(userDataInfo);    vapp.getProperty().add(property);    customizationsApplied=true;  }  String publicKeys=getFileItemByPath(bootDisk,CLOUD_CONFIG_PROPERTY_PUBLIC_KEYS);  if (publicKeys != null) {    VAppPropertySpec property=new VAppPropertySpec();    property.setOperation(ArrayUpdateOperation.ADD);    VAppPropertyInfo publicKeysInfo=new VAppPropertyInfo();    if (customizationsApplied) {      publicKeysInfo.setKey(1);    }    publicKeysInfo.setType("string");    publicKeysInfo.setUserConfigurable(true);    publicKeysInfo.setId(CLOUD_CONFIG_PROPERTY_PUBLIC_KEYS);    publicKeysInfo.setValue(publicKeys);    property.setInfo(publicKeysInfo);    vapp.getProperty().add(property);    customizationsApplied=true;  }  if (customizationsApplied) {    spec.setVAppConfig(vapp);  }  return customizationsApplied;}  }
class C{  public void writeJarFromContent(final String className,final String content,final File outputFile) throws IOException {  FileOutputStream fileOutputStream=new FileOutputStream(outputFile);  writeJarFromContent(className,content,fileOutputStream);  fileOutputStream.close();}  }
class C{  public boolean isPolyfilled(){  final ContainerType<?> containingType=this.getContainingType();  if ((containingType == null)) {    return false;  }  return (containingType.isPolyfill() || containingType.isStaticPolyfill());}  }
class C{  public void fatalError(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  private CTraceOptionsDialog(final Window parent){  super(parent,"Trace Options",ModalityType.DOCUMENT_MODAL);  setLayout(new BorderLayout());  m_maximumHitsField.setText("1");  final JPanel upperPanel=new JPanel(new BorderLayout());  final JPanel innerPanel=new JPanel(new GridLayout(1,1));  innerPanel.add(createPanel("Maximum Hits",m_maximumHitsField));  upperPanel.add(innerPanel,BorderLayout.NORTH);  upperPanel.setBorder(new CompoundBorder(new EmptyBorder(5,5,5,5),new TitledBorder("")));  add(upperPanel);  final CPanelTwoButtons panel=new CPanelTwoButtons(new InternalListener(),"OK","Cancel");  getRootPane().setDefaultButton(panel.getFirstButton());  add(panel,BorderLayout.SOUTH);  setSize(400,200);}  }
class C{  public void recordType(CtClass t){  dollarType=t;}  }
class C{  public void clearPieSegments(){  mPieSegmentList.clear();}  }
class C{  public static boolean isConformantSchemeName(String p_scheme){  if (p_scheme == null || p_scheme.trim().length() == 0) {    return false;  }  if (!isAlpha(p_scheme.charAt(0))) {    return false;  }  char testChar;  for (int i=1; i < p_scheme.length(); i++) {    testChar=p_scheme.charAt(i);    if (!isAlphanum(testChar) && SCHEME_CHARACTERS.indexOf(testChar) == -1) {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.906 -0400",hash_original_method="993C51C687E08EF24896DA5A822225E0",hash_generated_method="B586BECA4E62CE98E39B41CAF9DF7822") @SuppressWarnings("unchecked") public Class<? extends Enum> enumType(){  return enumType;}  }
class C{  public void drawOval(int x,int y,int width,int height){  mGraphics.drawOval(x,y,width,height);}  }
class C{  public void disconnected(){  mSrcContext=null;  mSrcHandler=null;  mSrcMessenger=null;  mDstMessenger=null;  mDeathMonitor=null;  mConnection=null;}  }
class C{  private void collectionParallelStream(){  Stream<Trade> parallelStreams=trades.parallelStream();  parallelStreams.forEach(null);}  }
class C{  public static PortRole valueOfRole(String role){  PortRole[] portRoles=values();  for (int i=0; i < portRoles.length; i++) {    if (portRoles[i].getRoleName().equals(role)) {      return portRoles[i];    }  }  return null;}  }
class C{  public boolean contains(char attributeID){  return unknownAttributes.contains(attributeID);}  }
class C{  public static void removeDatasource(String sourcePath,String dsName,boolean saveBackup) throws IOException {  String destPath=Util.getTmpFilename();  removeDatasource(sourcePath,destPath,dsName);  copyFile(destPath,sourcePath,saveBackup);}  }
class C{  public void testGaps3(){  final JPanel panel=new JPanel(new GridBagLayout());  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  final JButton btn3=new JButton();  btn3.setPreferredSize(new Dimension(100,20));  final JButton btn4=new JButton();  btn4.setPreferredSize(new Dimension(100,20));  GridBagConverter converter=new GridBagConverter(new Insets(0,0,0,0),7,0,false,false);  converter.addComponent(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn3,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn4,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(314,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.954 -0500",hash_original_method="F31F235B9BB042EFEA7068DFA90BA302",hash_generated_method="9B6ED1818CC1E09851A53170CD8008B7") public Path toPath(){  Path path=new Path();  float[] point=new float[2];  point[0]=-width / 2;  point[1]=height / 2;  Matrix matrix=new Matrix();  matrix.setRotate(orientation);  matrix.postTranslate(centerX,centerY);  matrix.mapPoints(point);  path.moveTo(point[0],point[1]);  point[0]=-width / 2;  point[1]=-height / 2;  matrix.mapPoints(point);  path.lineTo(point[0],point[1]);  point[0]=width / 2;  point[1]=-height / 2;  matrix.mapPoints(point);  path.lineTo(point[0],point[1]);  point[0]=width / 2;  point[1]=height / 2;  matrix.mapPoints(point);  path.lineTo(point[0],point[1]);  path.close();  return path;}  }
class C{  static ModularResultant combineRho(ModularResultant modRes1,ModularResultant modRes2){  BigInteger mod1=modRes1.modulus;  BigInteger mod2=modRes2.modulus;  BigInteger prod=mod1.multiply(mod2);  BigIntEuclidean er=BigIntEuclidean.calculate(mod2,mod1);  BigIntPolynomial rho1=(BigIntPolynomial)modRes1.rho.clone();  rho1.mult(er.x.multiply(mod2));  BigIntPolynomial rho2=(BigIntPolynomial)modRes2.rho.clone();  rho2.mult(er.y.multiply(mod1));  rho1.add(rho2);  rho1.mod(prod);  return new ModularResultant(rho1,null,prod);}  }
class C{  public SwimmingPool(){  super();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  @Override public Generator<ILineSegment> construct(String[] args){  return new LoadFromFileGenerator(args[0]);}  }
class C{  public Matrix4d m00(double m00){  this.m00=m00;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  private void signalLine(int line){  try {    scrollPaneExpression.getGutter().addLineTrackingIcon(line - 1,ERROR_ICON);  } catch (  BadLocationException e) {  }}  }
class C{  public int splitSegment(Point2D.Double split,double tolerance){  int i=findSegment(split,tolerance);  if (i != -1) {    addNode(i + 1,new BezierPath.Node(split));  }  return i + 1;}  }
class C{  public JSONArray put(Collection<?> value){  this.put(new JSONArray(value));  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.491 -0500",hash_original_method="802ED383C458692C5D5C796DB1F0E3E6",hash_generated_method="4C99D9EF19B1B897A26ADFFD29AB2AD4") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int quit() throws IOException {  return sendCommand(SMTPCommand.QUIT);}  }
class C{  public Collection<AltFormat> registeredFormats(){  return Collections.unmodifiableCollection(altHandlers.keySet());}  }
class C{  public static <D extends EntityDTO,E extends JPAEntity>D createDtoObject(Class<D> clazz,E entity){  D result=null;  try {    result=clazz.newInstance();    BeanUtils.copyProperties(result,entity);    result.setCreatedById(entity.getCreatedBy() != null ? entity.getCreatedBy().getId() : null);    result.setModifiedById(entity.getModifiedBy() != null ? entity.getModifiedBy().getId() : null);  } catch (  Exception ex) {    throw new WebApplicationException("DTO transformation failed.",Status.INTERNAL_SERVER_ERROR);  }  return result;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  private void processBlock(int label){  RegisterSpecSet primaryState=resultInfo.mutableCopyOfStarts(label);  BasicBlock block=blocks.labelToBlock(label);  InsnList insns=block.getInsns();  int insnSz=insns.size();  boolean canThrowDuringLastInsn=block.hasExceptionHandlers() && (insns.getLast().getResult() != null);  int freezeSecondaryStateAt=insnSz - 1;  RegisterSpecSet secondaryState=primaryState;  for (int i=0; i < insnSz; i++) {    if (canThrowDuringLastInsn && (i == freezeSecondaryStateAt)) {      primaryState.setImmutable();      primaryState=primaryState.mutableCopy();    }    Insn insn=insns.get(i);    RegisterSpec result;    result=insn.getLocalAssignment();    if (result == null) {      result=insn.getResult();      if (result != null && primaryState.get(result.getReg()) != null) {        primaryState.remove(primaryState.get(result.getReg()));      }      continue;    }    result=result.withSimpleType();    RegisterSpec already=primaryState.get(result);    if (!result.equals(already)) {      RegisterSpec previous=primaryState.localItemToSpec(result.getLocalItem());      if (previous != null && (previous.getReg() != result.getReg())) {        primaryState.remove(previous);      }      resultInfo.addAssignment(insn,result);      primaryState.put(result);    }  }  primaryState.setImmutable();  IntList successors=block.getSuccessors();  int succSz=successors.size();  int primarySuccessor=block.getPrimarySuccessor();  for (int i=0; i < succSz; i++) {    int succ=successors.get(i);    RegisterSpecSet state=(succ == primarySuccessor) ? primaryState : secondaryState;    if (resultInfo.mergeStarts(succ,state)) {      Bits.set(workSet,succ);    }  }}  }
class C{  public int interprete(final EvolutionState state,LambdaTree theTree){  int naturalNumber=0;  GPNode iter=theTree.child;  NodeCheck.checkForType(state,iter,"L");  iter=iter.children[0];  NodeCheck.checkForType(state,iter,"L");  iter=iter.children[0];  NodeCheck.checkForType(state,iter,"P");  int numberOfP=iter.depth() - 1;  for (int i=0; i < numberOfP - 1; i++) {    GPNode lkid=iter.children[0];    NodeCheck.checkForIndex(state,lkid,2);    naturalNumber++;    iter=iter.children[1];    NodeCheck.checkForType(state,iter,"P");  }  GPNode lkid=iter.children[0];  NodeCheck.checkForIndex(state,lkid,2);  naturalNumber++;  GPNode rkid=iter.children[1];  NodeCheck.checkForIndex(state,rkid,1);  return naturalNumber;}  }
class C{  public StockQuoteService(){  stockQuotes.put("IBM",new Stock("IBM","International Business Machines",149.62,150.78,149.18));  stockQuotes.put("GOOG",new Stock("GOOG","Alphabet Inc.",652.30,657.81,643.15));  stockQuotes.put("AMZN",new Stock("AMZN","Amazon.com",548.90,553.20,543.10));}  }
class C{  static void scheduleNow(Activity a){  getInstance()._schedule(a,System.currentTimeMillis());}  }
class C{  public void onStartRandomClicked(final View view){  this.startInterpolatedAnim(this.random.nextFloat());}  }
class C{  public AdapterPath append(@NonNull AdapterPathSegment segment){  mSegments.add(segment);  return this;}  }
class C{  public ImageRequest build(){  validate();  return new ImageRequest(this);}  }
class C{  public int addTmpStore(IMXStore store){  if (null != store) {    int pos=mTmpStores.indexOf(store);    if (pos < 0) {      mTmpStores.add(store);      pos=mTmpStores.indexOf(store);    }    return pos;  }  return -1;}  }
class C{  private static String[] splitWorker(String str,String separatorChars,int max,boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return EMPTY_STRING_ARRAY;  }  List list=new ArrayList();  int sizePlus1=1;  int i=0, start=0;  boolean match=false;  boolean lastMatch=false;  if (separatorChars == null) {    while (i < len) {      if (Character.isWhitespace(str.charAt(i))) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  } else   if (separatorChars.length() == 1) {    char sep=separatorChars.charAt(0);    while (i < len) {      if (str.charAt(i) == sep) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  } else {    while (i < len) {      if (separatorChars.indexOf(str.charAt(i)) >= 0) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  }  if (match || (preserveAllTokens && lastMatch)) {    list.add(str.substring(start,i));  }  return (String[])list.toArray(new String[list.size()]);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void discoverUnManagedCifsShares(AccessProfile profile){  URI systemId=profile.getSystemId();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,systemId);  if (null == storageSystem) {    return;  }  String detailedStatusMessage="Discovery of NetApp Unmanaged Cifs shares started";  NetAppApi netAppApi=new NetAppApi.Builder(storageSystem.getIpAddress(),storageSystem.getPortNumber(),storageSystem.getUsername(),storageSystem.getPassword()).https(true).build();  Collection<String> attrs=new ArrayList<String>();  for (  String property : ntpPropertiesList) {    attrs.add(SupportedNtpFileSystemInformation.getFileSystemInformation(property));  }  try {    List<UnManagedCifsShareACL> unManagedCifsShareACLList=new ArrayList<UnManagedCifsShareACL>();    List<UnManagedCifsShareACL> oldunManagedCifsShareACLList=new ArrayList<UnManagedCifsShareACL>();    List<Map<String,String>> fileSystemInfo=netAppApi.listVolumeInfo(null,attrs);    List<VFilerInfo> vFilers=netAppApi.listVFilers(null);    List<Map<String,String>> listShares=netAppApi.listShares(null);    if (listShares != null && !listShares.isEmpty()) {      _logger.info("total no of shares in netapp system (s) {}",listShares.size());    }    HashSet<UnManagedSMBFileShare> unManagedSMBFileShareHashSet=null;    HashMap<String,HashSet<UnManagedSMBFileShare>> unMangedSMBFileShareMapSet=getAllCifsShares(listShares);    for (    String key : unMangedSMBFileShareMapSet.keySet()) {      String filesystem=key;      unManagedSMBFileShareHashSet=unMangedSMBFileShareMapSet.get(key);      _logger.info("FileSystem Path {}",filesystem);      String nativeId=null;      if (!filesystem.startsWith(VOL_ROOT_NO_SLASH)) {        nativeId=VOL_ROOT_NO_SLASH + filesystem;      } else {        nativeId=filesystem;      }      if (filesystem.contains(ROOT_VOL)) {        _logger.info("Ignore and not discover root filesystem {} on NTP array",filesystem);        continue;      }      if (filesystem.contains(SNAPSHOT)) {        _logger.info("Ignore exports for snapshot {}",filesystem);        continue;      }      String shareNativeId=getFSPathIfSubDirectoryExport(nativeId);      String fsUnManagedFsNativeGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingFileSystem(storageSystem.getSystemType(),storageSystem.getSerialNumber().toUpperCase(),shareNativeId);      UnManagedFileSystem unManagedFs=checkUnManagedFileSystemExistsInDB(fsUnManagedFsNativeGuid);      boolean fsAlreadyExists=unManagedFs == null ? false : true;      if (fsAlreadyExists) {        _logger.info("retrieve info for file system: " + filesystem);        String vFiler=getOwningVfiler(filesystem,fileSystemInfo);        if (vFiler != null && !vFiler.equalsIgnoreCase(DEFAULT_FILER)) {          _logger.info("Ignoring {} because it is owned by {}",filesystem,vFiler);          continue;        }        String addr=null;        if (vFiler == null || vFiler.isEmpty()) {          StoragePort port=getStoragePortPool(storageSystem);          addr=port.getPortName();        } else {          addr=getVfilerAddress(vFiler,vFilers);        }        UnManagedSMBShareMap tempUnManagedSMBShareMap=new UnManagedSMBShareMap();        createShareMap(unManagedSMBFileShareHashSet,tempUnManagedSMBShareMap,addr,nativeId);        if (!tempUnManagedSMBShareMap.isEmpty() && tempUnManagedSMBShareMap.size() > 0) {          unManagedFs.setUnManagedSmbShareMap(tempUnManagedSMBShareMap);          unManagedFs.setHasShares(true);          unManagedFs.putFileSystemCharacterstics(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString(),TRUE);          _logger.debug("SMB Share map for NetApp UMFS {} = {}",unManagedFs.getLabel(),unManagedFs.getUnManagedSmbShareMap());        }        List<UnManagedCifsShareACL> tempUnManagedCifsShareAclList=getACLs(unManagedSMBFileShareHashSet,netAppApi,unManagedFs.getId());        UnManagedCifsShareACL existingACL=null;        for (        UnManagedCifsShareACL unManagedCifsShareACL : tempUnManagedCifsShareAclList) {          _logger.info("Unmanaged File share acls : {}",unManagedCifsShareACL);          String fsShareNativeId=unManagedCifsShareACL.getFileSystemShareACLIndex();          _logger.info("UMFS Share ACL index {}",fsShareNativeId);          String fsUnManagedFileShareNativeGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingFileShare(storageSystem,fsShareNativeId);          _logger.info("Native GUID {}",fsUnManagedFileShareNativeGuid);          unManagedCifsShareACL.setNativeGuid(fsUnManagedFileShareNativeGuid);          existingACL=checkUnManagedFsCifsACLExistsInDB(_dbClient,unManagedCifsShareACL.getNativeGuid());          if (existingACL == null) {            unManagedCifsShareACLList.add(unManagedCifsShareACL);          } else {            existingACL.setInactive(true);            oldunManagedCifsShareACLList.add(existingACL);            unManagedCifsShareACLList.add(unManagedCifsShareACL);          }        }{          _dbClient.persistObject(unManagedFs);          _logger.info("File System {} has Shares and their Count is {}",unManagedFs.getId(),tempUnManagedSMBShareMap.size());        }        if (!unManagedCifsShareACLList.isEmpty() && unManagedCifsShareACLList.size() >= MAX_UMFS_RECORD_SIZE) {          _logger.info("Saving Number of New UnManagedCifsShareACL(s) {}",unManagedCifsShareACLList.size());          _dbClient.createObject(unManagedCifsShareACLList);          unManagedCifsShareACLList.clear();        }        if (!oldunManagedCifsShareACLList.isEmpty() && oldunManagedCifsShareACLList.size() >= MAX_UMFS_RECORD_SIZE) {          _logger.info("Update Number of Old UnManagedCifsShareACL(s) {}",oldunManagedCifsShareACLList.size());          _dbClient.persistObject(oldunManagedCifsShareACLList);          oldunManagedCifsShareACLList.clear();        }      } else {        _logger.info("FileSystem " + unManagedFs + "is not present in ViPR DB. Hence ignoring "+ filesystem+ " share");      }    }    if (!unManagedCifsShareACLList.isEmpty()) {      _logger.info("Saving Number of New UnManagedCifsShareACL(s) {}",unManagedCifsShareACLList.size());      _dbClient.createObject(unManagedCifsShareACLList);    }    if (!oldunManagedCifsShareACLList.isEmpty()) {      _logger.info("Saving Number of Old UnManagedCifsShareACL(s) {}",oldunManagedCifsShareACLList.size());      _dbClient.persistObject(oldunManagedCifsShareACLList);    }    storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.COMPLETE.toString());    detailedStatusMessage=String.format("Discovery completed successfully for NetApp: %s",systemId.toString());  } catch (  NetAppException ve) {    if (null != storageSystem) {      cleanupDiscovery(storageSystem);      storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.ERROR.toString());    }    _logger.error("discoverStorage failed.  Storage system: " + systemId);  }catch (  Exception e) {    if (null != storageSystem) {      cleanupDiscovery(storageSystem);      storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.ERROR.toString());    }    _logger.error("discoverStorage failed. Storage system: " + systemId,e);  } finally {    if (storageSystem != null) {      try {        storageSystem.setLastDiscoveryStatusMessage(detailedStatusMessage);        _dbClient.persistObject(storageSystem);      } catch (      Exception ex) {        _logger.error("Error while persisting object to DB",ex);      }    }  }}  }
class C{  int copyType(int srcIndex){  String name=srcPool.getUtf8Info(srcIndex);  String newName=Descriptor.rename(name,classnames);  return destPool.addUtf8Info(newName);}  }
class C{  void invalidate(){  if (mBitmap != null) {    mBitmap.recycle();    mBitmap=null;  }  if (mFilename != null) {    new File(mFilename).delete();    mFilename=null;  }  if (mBitmapFileName != null) {    new File(mBitmapFileName).delete();    mBitmapFileName=null;  }}  }
class C{  public HistoryReadResponse HistoryRead(HistoryReadRequest req) throws ServiceFaultException, ServiceResultException {  return (HistoryReadResponse)channel.serviceRequest(req);}  }
class C{  @Override public String toString(){  return getValue();}  }
class C{  public boolean isPresenceBasedDelivery(){  return parseBoolean(getFieldValue(ConfigureNodeFields.presence_based_delivery));}  }
class C{  protected Instance specifier(int i){  return m_Specifiers.get(i);}  }
class C{  public boolean isEstablished(){  return mMsrpSession != null && mMsrpSession.isEstablished();}  }
class C{  @Override public long rangeCount(final byte[] fromKey,final byte[] toKey){  final LongAggregator handler=new LongAggregator();  final RangeCountProcedure proc=new RangeCountProcedure(false,false,fromKey,toKey);  submit(fromKey,toKey,proc,handler);  return handler.getResult();}  }
class C{  private void test(Mode mode,int keysCnt) throws Exception {  startUp();switch (mode) {case TEST_LOCAL:{      IgniteCache<Integer,Integer> cache=cachesLoc[0];      fillCache(cache,keysCnt);      cache.localClearAll(keySet(cache));      assert cache.localSize() == 0;      break;    }case TEST_PARTITIONED:{    fillCache(cachesPartitioned[0],keysCnt);    warmCache(cachesPartitioned[2],keysCnt);    assert cachesPartitioned[2].localSize() == 0;    assert cachesPartitioned[2].localSize() == 0;    stopGrid(2);    warmCache(cachesPartitioned[1],keysCnt);    assert cachesPartitioned[1].localSize() != 0;    cachesPartitioned[1].localClearAll(keySet(cachesPartitioned[1]));    assert cachesPartitioned[1].localSize() == 0;    fillCache(cachesPartitioned[1],keysCnt);    stopGrid(1);    assert cachesPartitioned[0].localSize() != 0;    cachesPartitioned[0].localClearAll(keySet(cachesPartitioned[0]));    assert cachesPartitioned[0].localSize() == 0;    break;  }default :{  assert mode == Mode.TEST_COLOCATED || mode == Mode.TEST_REPLICATED;  IgniteCache<Integer,Integer>[] caches=mode == Mode.TEST_COLOCATED ? cachesColocated : cachesReplicated;  fillCache(caches[0],keysCnt);  for (  IgniteCache<Integer,Integer> cache : caches) {    assert cache.localSize() != 0;    cache.localClearAll(keySet(cache));    assert cache.localSize() == 0;  }}}}  }
class C{  @Override public String open(){  Shell shell=new Shell(getParent(),getStyle());  shell.setText(getText());  createContents(shell);  shell.pack();  errorText.setText(getMessage());  SWTUtils.center(shell);  shell.open();  Display display=getParent().getDisplay();  while (!shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  return input;}  }
class C{  public Object clone(){  CK_DATE copy=null;  try {    copy=(CK_DATE)super.clone();  } catch (  CloneNotSupportedException cnse) {    throw (RuntimeException)(new RuntimeException("Clone error").initCause(cnse));  }  copy.year=this.year.clone();  copy.month=this.month.clone();  copy.day=this.day.clone();  return copy;}  }
class C{  public List<MethodNode> handleAmbiguousMethods(final List<MethodNode> nodes,final Expression origin){  return nodes;}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void load(InputStream input,Class<?> resourceBase) throws ParseException {  if (resourceBase == null) {    throw new IllegalArgumentException("You must supply a valid resource base Class");  }  if (defaultsMap == null) {    defaultsMap=new HashMap<String,Object>();  }  new SynthParser().parse(input,(DefaultSynthStyleFactory)factory,null,resourceBase,defaultsMap);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MReportColumn[").append(get_ID()).append(" - ").append(getName()).append(" - ").append(getDescription()).append(", SeqNo=").append(getSeqNo()).append(", AmountType=").append(getPAAmountType()).append(", PeriodType=").append(getPAPeriodType()).append(", CurrencyType=").append(getCurrencyType()).append("/").append(getC_Currency_ID()).append(" - ColumnType=").append(getColumnType());  if (isColumnTypeCalculation())   sb.append(" - Calculation=").append(getCalculationType()).append(" - ").append(getOper_1_ID()).append(" - ").append(getOper_2_ID()); else   if (isColumnTypeRelativePeriod())   sb.append(" - Period=").append(getRelativePeriod()); else   sb.append(" - SegmentValue ElementType=").append(getElementType());  sb.append("]");  return sb.toString();}  }
class C{  @Nullable private static PyFunction resolveRedirectToFunction(@NotNull String redirect,@NotNull PsiElement reference){  final QualifiedName qualifiedName=QualifiedName.fromDottedString(redirect);  final String functionName=qualifiedName.getLastComponent();  final PyPsiFacade facade=PyPsiFacade.getInstance(reference.getProject());  final List<PsiElement> items=facade.qualifiedNameResolver(qualifiedName.removeLastComponent()).fromElement(reference).resultsAsList();  for (  PsiElement item : items) {    if (item instanceof PsiDirectory) {      item=((PsiDirectory)item).findFile(PyNames.INIT_DOT_PY);    }    if (item instanceof PyFile) {      final PsiElement element=((PyFile)item).getElementNamed(functionName);      if (element instanceof PyFunction) {        return (PyFunction)element;      }    }  }  return null;}  }
class C{  @SuppressWarnings("unchecked") private Method findMatchingMethod(JDiffMethod method){  Method[] methods=mClass.getDeclaredMethods();  for (  Method m : methods) {    if (matches(method,m)) {      return m;    }  }  return null;}  }
class C{  void keyClass(Class<?> keyCls){  this.keyCls=keyCls;}  }
class C{  public boolean isGroupChatStoreForwardSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_GROUP_CHAT_SF);}  }
class C{  private void testInitRepeat(final RepeatVars repeatVars,final boolean download,final RepeatWrapper repeatWrapper) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  Class[] cArg=new Class[1];  cArg[0]=boolean.class;  final Method method=repeatWrapper.getClass().getDeclaredMethod("initRepeat",cArg);  method.setAccessible(true);  Assert.assertNotNull(method);  method.invoke(repeatWrapper,download);  Assert.assertEquals(repeatVars.isRepeatDownload(),download);  Assert.assertEquals(repeatVars.isRepeatUpload(),!download);  Assert.assertEquals(repeatVars.isFirstDownloadRepeat(),download);  Assert.assertEquals(repeatVars.isFirstUploadRepeat(),!download);  testRepeatVarsInit(repeatVars);}  }
class C{  public String[] readUnicode(){  if (data == null) {    return null;  }  int defType=0;  final String[] unicodeMappings=new String[65536];  final int length=data.length;  boolean inDef=false;  try {    while (true) {      while (ptr < length && data[ptr] == 9) {        ptr++;      }      if (ptr >= length) {        break;      } else       if (ptr + 4 < length && data[ptr] == 'e' && data[ptr + 1] == 'n' && data[ptr + 2] == 'd' && data[ptr + 3] == 'b' && data[ptr + 4] == 'f') {        defType=0;        inDef=false;      } else       if (inDef) {        readLineValue(unicodeMappings,defType);      }      if (ptr >= length) {        break;      } else       if (data[ptr] == 'b' && data[ptr + 1] == 'e' && data[ptr + 2] == 'g' && data[ptr + 3] == 'i' && data[ptr + 4] == 'n' && data[ptr + 5] == 'b' && data[ptr + 6] == 'f' && data[ptr + 7] == 'c' && data[ptr + 8] == 'h' && data[ptr + 9] == 'a' && data[ptr + 10] == 'r') {        defType=1;        ptr+=10;        inDef=true;      } else       if (data[ptr] == 'b' && data[ptr + 1] == 'e' && data[ptr + 2] == 'g' && data[ptr + 3] == 'i' && data[ptr + 4] == 'n' && data[ptr + 5] == 'b' && data[ptr + 6] == 'f' && data[ptr + 7] == 'r' && data[ptr + 8] == 'a' && data[ptr + 9] == 'n' && data[ptr + 10] == 'g' && data[ptr + 11] == 'e') {        defType=2;        ptr+=11;        inDef=true;      }      ptr++;    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception setting up text object " + e);  }  return unicodeMappings;}  }
class C{  public double computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    return NaN;  }  long numerator=(long)index * (dataset.length - 1);  int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);  int remainder=(int)(numerator - (long)quotient * scale);  selectInPlace(quotient,dataset,0,dataset.length - 1);  if (remainder == 0) {    return dataset[quotient];  } else {    selectInPlace(quotient + 1,dataset,quotient + 1,dataset.length - 1);    return interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CSVParser(char separator,char quotechar){  this(separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  private void readDataLayer(InputStream in) throws IOException {  RPObject obj=new RPObject();  obj.readObject(new InputSerializer(in));  zoneInfo.setColorMethod(null);  String color=obj.get("color");  if (color != null && isColoringEnabled()) {    zoneInfo.setZoneColor(MathHelper.parseIntDefault(color,0x00ff00));    zoneInfo.setColorMethod(getBlend(obj.get("color_method")));  }  if (isColoringEnabled()) {    zoneInfo.setEffectBlend(getEffectBlend(obj.get("blend_method"),zoneInfo.getColorMethod()));  } else {    zoneInfo.setEffectBlend(null);  }  String weather=obj.get("weather");  if (weather != null) {    weatherName=weather;    if (drawWeather) {      this.weather=new WeatherLayerRenderer(weather,zoneInfo.getZoneColor(),zoneInfo.getColorMethod());    }  }  String danger=obj.get("danger_level");  if (danger != null) {    try {      dangerLevel=Double.parseDouble(danger);    } catch (    NumberFormatException e) {      Logger.getLogger(Zone.class).warn("Invalid danger level: " + danger,e);    }  }  readableName=obj.get("readable_name");  requireData=false;}  }
class C{  public void clear(){  m_lucene=new LuceneSearcher();  super.clear();}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  g2.setPaint(linePaint);  g2.setStroke(lineStroke);  double gradient=getGradient();  double intercept=getYIntercept();  double x1=xAxis.getMinAxis();  double y1=(gradient * x1) + intercept;  double x2=xAxis.getMaxAxis();  double y2=(gradient * x2) + intercept;  drawLine(g2,x1,y1,x2,y2);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypesystemid01.class,args);}  }
class C{  private void interpolateUntouchedPoints(final int direction){  final int[] points;  final int[] original;  final boolean[] touched=new boolean[this.touched[GLYPH_ZONE].length];  if (direction == IUPx) {    points=x[GLYPH_ZONE];    original=x[ORIGINAL + GLYPH_ZONE];    for (int i=0; i < this.touched[GLYPH_ZONE].length; i++) {      touched[i]=this.touched[GLYPH_ZONE][i][0];    }  } else {    points=y[GLYPH_ZONE];    original=y[ORIGINAL + GLYPH_ZONE];    for (int i=0; i < this.touched[GLYPH_ZONE].length; i++) {      touched[i]=this.touched[GLYPH_ZONE][i][1];    }  }  int contourStart=0;  while (contourStart < points.length) {    final int[] touchedPointNumbers=new int[original.length];    int touchedCount=0, point=0;    do {      if (touched[contourStart + point]) {        touchedPointNumbers[touchedCount]=contourStart + point;        touchedCount++;      }      point++;    } while (!contour[GLYPH_ZONE][contourStart + point - 1] && (contourStart + point) < contour[GLYPH_ZONE].length);    if (touchedCount == 1) {      final int shift=points[touchedPointNumbers[0]] - original[touchedPointNumbers[0]];      for (int i=contourStart; i < contourStart + point; i++) {        if (!touched[i]) {          points[i]+=shift;        }      }    } else     if (touchedCount > 1) {      for (int i=0; i < touchedCount; i++) {        if (i + 1 >= touchedCount) {          interpolateRange(touchedPointNumbers[i] + 1,contourStart + point - 1,touchedPointNumbers[i],touchedPointNumbers[0],points,original);          interpolateRange(contourStart,touchedPointNumbers[0] - 1,touchedPointNumbers[i],touchedPointNumbers[0],points,original);        } else {          interpolateRange(touchedPointNumbers[i] + 1,touchedPointNumbers[i + 1] - 1,touchedPointNumbers[i],touchedPointNumbers[i + 1],points,original);        }      }    }    contourStart+=point;  }}  }
class C{  public static Float toFloat(Object o,Float defaultValue){  if (o instanceof Float)   return (Float)o;  if (defaultValue != null)   return new Float(toFloatValue(o,defaultValue.floatValue()));  float res=toFloatValue(o,Float.MIN_VALUE);  if (res == Float.MIN_VALUE)   return defaultValue;  return new Float(res);}  }
class C{  @Override public boolean wasNull() throws SQLException {  return getOpenResultSet().wasNull();}  }
class C{  public static void unregisterSASLMechanism(String name){  implementedMechanisms.remove(name);  mechanismsPreferences.remove(name);}  }
class C{  public boolean execute(IRequestProcessor requestProcessor,IEventSender eventSender,ICvsListenerRegistry listenerRegistry,IClientEnvironment clientEnvironment,IProgressViewer progressViewer) throws CommandException, AuthenticationException {  final ICvsFiles cvsFiles;  try {    cvsFiles=scanFileSystem(clientEnvironment);  } catch (  IOException ex) {    throw new IOCommandException(ex);  }  final Requests requests=new Requests(CommandRequest.STATUS,clientEnvironment);  requests.addArgumentRequest(includeTags,"-v");  addFileRequests(cvsFiles,requests,clientEnvironment);  requests.addLocalPathDirectoryRequest();  addArgumentRequests(requests);  final IRequestsProgressHandler requestsProgressHandler=new FileStateRequestsProgressHandler(new RangeProgressViewer(progressViewer,0.0,0.5),cvsFiles);  final ICvsListener responseProgressHandler=new FileInfoAndMessageResponseProgressHandler(new RangeProgressViewer(progressViewer,0.5,1.0),cvsFiles,EXAM_DIR);  final ICvsListener statusMessageParser=new StatusMessageParser(eventSender,getFileObjects(),clientEnvironment.getCvsFileSystem());  final ICvsListener listener=new DualListener(statusMessageParser,responseProgressHandler);  listener.registerListeners(listenerRegistry);  try {    return requestProcessor.processRequests(requests,requestsProgressHandler);  }  finally {    listener.unregisterListeners(listenerRegistry);  }}  }
class C{  public static String toLocalizedInteger(long value){  return NUMBER_FORMAT0.format(value);}  }
class C{  public static void complete(Operation operation) throws WorldEditException {  while (operation != null) {    operation=operation.resume(context);  }}  }
class C{  private void drawEnabledGraphic(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createTabCloseIcon(2,2,width - 4,height - 4);  g.setPaint(createGraphicInnerShadowGradient(s));  g.fill(s);}  }
class C{  public static void main(String[] args) throws Exception {  String input=Utils.getOption('i',args);  String output=Utils.getOption('o',args);  boolean print=Utils.getFlag('p',args);  Vector<String> words=new Vector<String>();  for (  String arg : args) {    if (arg.trim().length() > 0) {      words.add(arg.trim());    }  }  Stopwords stopwords=new Stopwords();  if (input.length() != 0) {    stopwords.read(input);  }  if (output.length() != 0) {    stopwords.write(output);  }  if (print) {    System.out.println("\nStopwords:");    Enumeration<String> enm=stopwords.elements();    int i=0;    while (enm.hasMoreElements()) {      System.out.println((i + 1) + ". " + enm.nextElement());      i++;    }  }  if (words.size() > 0) {    System.out.println("\nChecking for stopwords:");    for (int i=0; i < words.size(); i++) {      System.out.println((i + 1) + ". " + words.get(i)+ ": "+ stopwords.is(words.get(i).toString()));    }  }}  }
class C{  public boolean contains(Material type,int dataValue){  if (materials.isEmpty()) {    return true;  }  for (  Map.Entry<Material,Integer> material : materials) {    if (material.getKey().equals(type) && (material.getValue() == ANY_DATA_VALUE || material.getValue() == dataValue)) {      return true;    }  }  return false;}  }
class C{  public Task<VcenterRestRep> create(URI tenantId,VcenterCreateParam input){  return create(tenantId,input,false);}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public QueueProcessor(@NotNull Consumer<T> processor){  this(processor,Conditions.alwaysFalse());}  }
class C{  private static InsnList returnDummy(Type returnType){  Validate.notNull(returnType);  Validate.isTrue(returnType.getSort() != Type.METHOD);  InsnList ret=new InsnList();switch (returnType.getSort()) {case Type.VOID:    ret.add(new InsnNode(Opcodes.RETURN));  break;case Type.BOOLEAN:case Type.BYTE:case Type.SHORT:case Type.CHAR:case Type.INT:ret.add(new InsnNode(Opcodes.ICONST_0));ret.add(new InsnNode(Opcodes.IRETURN));break;case Type.LONG:ret.add(new InsnNode(Opcodes.LCONST_0));ret.add(new InsnNode(Opcodes.LRETURN));break;case Type.FLOAT:ret.add(new InsnNode(Opcodes.FCONST_0));ret.add(new InsnNode(Opcodes.FRETURN));break;case Type.DOUBLE:ret.add(new InsnNode(Opcodes.DCONST_0));ret.add(new InsnNode(Opcodes.DRETURN));break;case Type.OBJECT:case Type.ARRAY:ret.add(new InsnNode(Opcodes.ACONST_NULL));ret.add(new InsnNode(Opcodes.ARETURN));break;default :throw new IllegalStateException();}return ret;}  }
class C{  @Override public int compareTo(Object obj){  if (!(obj instanceof XYCoordinate)) {    throw new IllegalArgumentException("Incomparable object.");  }  XYCoordinate that=(XYCoordinate)obj;  if (this.x > that.x) {    return 1;  } else   if (this.x < that.x) {    return -1;  } else {    if (this.y > that.y) {      return 1;    } else     if (this.y < that.y) {      return -1;    }  }  return 0;}  }
class C{  public void errorError(SAXParseException spe){  if (LOG.isErrorEnabled()) {    LOG.error("Fatal err: " + spe.toString() + ": "+ spe.getMessage());    LOG.error("Last known line is " + location.getLineNumber() + ", column "+ location.getColumnNumber());  }}  }
class C{  public DVariable(String name,DValue value,int isolateId){  m_rawName=name;  m_attribs=value.getAttributes();  if (name != null) {    if (!isAttributeSet(VariableAttribute.PUBLIC_SCOPE)) {      int doubleColon=name.lastIndexOf("::");      if (doubleColon >= 0) {        m_namespace=name.substring(0,doubleColon);        int at=m_namespace.indexOf('@');        if (at != -1)         m_namespace=m_namespace.substring(0,at);        name=name.substring(doubleColon + 2);      }    }  }  m_name=name;  m_nonProtoParentId=Value.UNKNOWN_ID;  m_value=value;  value.setSession(m_session);  m_isolateId=isolateId;}  }
class C{  protected void selectNextPossibleValue(){  int si;  if (comboBox.isPopupVisible()) {    si=listBox.getSelectedIndex();  } else {    si=comboBox.getSelectedIndex();  }  if (si < comboBox.getModel().getSize() - 1) {    listBox.setSelectedIndex(si + 1);    listBox.ensureIndexIsVisible(si + 1);    if (!isTableCellEditor) {      if (!(UIManager.getBoolean("ComboBox.noActionOnKeyNavigation") && comboBox.isPopupVisible())) {        comboBox.setSelectedIndex(si + 1);      }    }    comboBox.repaint();  }}  }
class C{  public void unRegisterForceConstraint(ForceConstraint con){  constraints.remove(con);  constraintRows-=con.GetConstraintRows();}  }
class C{  synchronized void disconnectCamera(){  Tango oldTango=mTango;  mTango=null;  if (oldTango != null) {    oldTango.disconnectCamera(mCameraId);  }  mConnectedTextureId=-1;  mIsCameraConfigured=false;}  }
class C{  protected void completeCommandline(Commandline cmd){  super.completeCommandline(cmd);  if (verbose) {    appendOption(cmd,"--verbose");  }  if (categories != null) {    appendOptionArgument(cmd,"--categories",getCategories());  }  if (categoryPrefix != null) {    appendOptionArgument(cmd,"--category-prefix",getCategoryPrefix());  }  if (repositoryName != null) {    appendOptionArgument(cmd,"--repository-name",getRepositoryName());  }  for (  Module module : moduleSet.getModules()) {    log("Adding module: " + module,Project.MSG_VERBOSE);    cmd.createArgument().setValue(module.toSpec());  }}  }
class C{  public ReplicatorPlugin instantiate(int id) throws ReplicatorException {  ReplicatorPlugin plugin=PluginLoader.load(pluginClass.getName());  if (plugin instanceof FilterManualProperties)   ((FilterManualProperties)plugin).setConfigPrefix(prefix); else   properties.applyProperties(plugin);  return plugin;}  }
class C{  @Deprecated public static void assertNotEquals(String itemName,String notExpected,String actual){  try {    if (Comparators.nullSafeEquals(notExpected,actual)) {      Assert.fail(itemName + " should not equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public head addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public JobMediaSheetsCompleted(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public void init(Controller c){  super.init(c);  display=new Display2D(600,600,this);  display.setClipping(false);  displayFrame=display.createFrame();  displayFrame.setTitle("WaterWorld Display");  c.registerFrame(displayFrame);  displayFrame.setVisible(true);  display.attach(ground,"Ground");  display.attach(water,"Water");  raindropChart=new TimeSeriesChartGenerator();  raindropChart.setTitle("Number of Raindrops in Simulation");  raindropChart.setYAxisLabel("Number of Raindrops");  raindropChart.setXAxisLabel("Time");  JFrame chartFrame=raindropChart.createFrame(this);  chartFrame.setVisible(true);  chartFrame.pack();  c.registerFrame(chartFrame);}  }
class C{  public S2Point interpolate(double fraction){  if (fraction <= 0) {    return vertex(0);  }  double lengthSum=0;  for (int i=1; i < numVertices(); ++i) {    lengthSum+=vertex(i - 1).angle(vertex(i));  }  double target=fraction * lengthSum;  for (int i=1; i < numVertices(); ++i) {    double length=vertex(i - 1).angle(vertex(i));    if (target < length) {      double f=Math.sin(target) / Math.sin(length);      return S2Point.add(S2Point.mul(vertex(i - 1),(Math.cos(target) - f * Math.cos(length))),S2Point.mul(vertex(i),f));    }    target-=length;  }  return vertex(numVertices() - 1);}  }
class C{  public void startRotate(float startAngle,float dAngle,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartAngle=startAngle;  mDeltaAngle=dAngle;}  }
class C{  public static void createAnalysisContext(Project project,List<ClassDescriptor> appClassList,@CheckForNull String sourceInfoFileName) throws IOException {  AnalysisContext analysisContext=new AnalysisContext(project);  AnalysisContext.setCurrentAnalysisContext(analysisContext);  analysisContext.clearRepository();  if (sourceInfoFileName != null) {    SourceInfoMap sourceInfoMap=analysisContext.getSourceInfoMap();    sourceInfoMap.read(new FileInputStream(sourceInfoFileName));  }}  }
class C{  public List<TaskResourceRep> findCreatedSince(URI tenantId,long startTime,int maxCount){  return getByRefs(listByTenant(tenantId,maxCount,startTime,null));}  }
class C{  BiCubicInterpolator(SpatialGrid sg){  this.sg=sg;  sgNaNcheck();  double[] x_coords=coord(sg.getXmin(),sg.getXmax(),sg.getResolution());  double[] y_coords=coord(sg.getYmin(),sg.getYmax(),sg.getResolution());  double[][] mirroredValues=sg.getMatrix();  BivariateRealGridInterpolator interpolator=new BicubicSplineInterpolator();  try {    interpolatingFunction=interpolator.interpolate(y_coords,x_coords,mirroredValues);  } catch (  MathException e) {    e.printStackTrace();  }}  }
class C{  protected boolean termFilter(Term term,String[] desiredFields,int minFreq,int maxFreq,int maxNonAlphabet,int minTermLength){  boolean isDesiredField=false;  for (int i=0; i < desiredFields.length; ++i) {    if (term.field().compareToIgnoreCase(desiredFields[i]) == 0) {      isDesiredField=true;    }  }  if (stoplistContains(term.text()))   return false;  if (!startlistContains(term.text()))   return false;  if (!isDesiredField) {    return false;  }  if (maxNonAlphabet != -1) {    int nonLetter=0;    String termText=term.text();    if (termText.length() < minTermLength)     return false;    for (int i=0; i < termText.length(); ++i) {      if (!Character.isLetter(termText.charAt(i)))       nonLetter++;      if (nonLetter > maxNonAlphabet)       return false;    }  }  int termfreq=getGlobalTermFreq(term);  if (termfreq < minFreq | termfreq > maxFreq) {    return false;  }  return true;}  }
class C{  protected String doIt() throws Exception {  int To_GL_JournalBatch_ID=getRecord_ID();  log.info("doIt - From GL_JournalBatch_ID=" + m_GL_JournalBatch_ID + " to "+ To_GL_JournalBatch_ID);  if (To_GL_JournalBatch_ID == 0)   throw new IllegalArgumentException("Target GL_JournalBatch_ID == 0");  if (m_GL_JournalBatch_ID == 0)   throw new IllegalArgumentException("Source GL_JournalBatch_ID == 0");  MJournalBatch from=new MJournalBatch(getCtx(),m_GL_JournalBatch_ID,get_TrxName());  MJournalBatch to=new MJournalBatch(getCtx(),To_GL_JournalBatch_ID,get_TrxName());  int no=to.copyDetailsFrom(from);  return "@Copied@=" + no;}  }
class C{  public static void runInFX(Runnable doRun){  if (Platform.isFxApplicationThread()) {    doRun.run();    return;  }  Platform.runLater(doRun);}  }
class C{  public void test_newInstanceLjava_lang_ClassI(){  int[] x;  x=(int[])Array.newInstance(int.class,100);  assertEquals("Failed to instantiate array properly",100,x.length);  boolean thrown=false;  try {    Array.newInstance(null,100);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }  thrown=false;  try {    Array.newInstance(int[].class,-1);  } catch (  NegativeArraySizeException e) {    thrown=true;  }  if (!thrown) {    fail("Negative array size failed to throw NegativeArraySizeException");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.736 -0500",hash_original_method="8781F33C8E67EE4404420C5C91B2F2B8",hash_generated_method="87140C85C67216BE036BC30AAD49D863") protected final Class<?> findSystemClass(String className) throws ClassNotFoundException {  return Class.forName(className,false,getSystemClassLoader());}  }
class C{  @NoInline public static void write(MemberReference value){  write(value.getType().getName());  write(".");  write(value.getName());  write(" ");  write(value.getDescriptor());}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public static byte[] concatenate(byte[] a,byte[] b){  byte[] output=new byte[a.length + b.length];  System.arraycopy(a,0,output,0,a.length);  System.arraycopy(b,0,output,a.length,b.length);  return output;}  }
class C{  @RequestMapping(value="details",method=RequestMethod.GET) public String prepareUpdateForm(@ModelAttribute("updatePodcastOwnMetadataByFeedUrlForm") PodcastByFeedUrlForm updatePodcastOwnMetadataByFeedUrlForm,@ModelAttribute("podcast") Podcast podcast,BindingResult bindingResult,ModelMap model) throws BusinessException {  String feedUrl=updatePodcastOwnMetadataByFeedUrlForm.getFeedUrl();  Integer podcastId=readService.getPodcastIdForFeedUrl(feedUrl);  podcast=readService.getPodcastById(podcastId);  if (podcast.getCategories() != null && podcast.getCategories().size() > 0) {    List<Integer> categoryIDs=new ArrayList<Integer>();    for (    Category category : podcast.getCategories()) {      categoryIDs.add(category.getCategoryId());    }    podcast.setCategoryIDs(categoryIDs);  }  if (podcast.getTags() != null && podcast.getTags().size() > 0) {    StringBuilder tagsStr=new StringBuilder();    for (    Tag tag : podcast.getTags()) {      tagsStr.append(tag.getName()).append(",");    }    podcast.setTagsStr(tagsStr.toString().substring(0,tagsStr.length() - 1));  }  model.addAttribute("podcast",podcast);  model.addAttribute("updateFrequencies",UpdateFrequencyType.values());  model.addAttribute("mediaTypes",MediaType.values());  model.addAttribute("languageCodes",LanguageCode.values());  model.addAttribute("allCategories",readService.getAllAvailableCategories());  return "updateForm_def";}  }
class C{  public BloomEffect(RajawaliScene scene,Camera camera,int width,int height,int lowerThreshold,int upperThreshold,BlendMode blendMode){  super();  mScene=scene;  mCamera=camera;  mWidth=width;  mHeight=height;  mLowerThreshold=lowerThreshold;  mUpperThreshold=upperThreshold;  mBlendMode=blendMode;}  }
class C{  public RequestHandle post(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(null,url,params,responseHandler);}  }
class C{  protected Builder entity(final String group,final ENTITY_DEF entityDef){  elementDefs.addEntity(group,entityDef);  return this;}  }
class C{  public static void addMissingJmsResources(LocalConfiguration configuration){  boolean containsJmsSiBus=false;  boolean containsJmsSiBusMember=false;  boolean containsJmsConnectionFactory=false;  boolean containsJmsQueue=false;  List<Resource> websphereResources=configuration.getResources();  for (  Resource resource : websphereResources) {    if (WebSphereConfigurationEntryType.JMS_SIBUS.equals(resource.getType())) {      containsJmsSiBus=true;    } else     if (WebSphereConfigurationEntryType.JMS_SIBUS_MEMBER.equals(resource.getType())) {      containsJmsSiBusMember=true;    } else     if (WebSphereConfigurationEntryType.JMS_CONNECTION_FACTORY.equals(resource.getType())) {      containsJmsConnectionFactory=true;    } else     if (WebSphereConfigurationEntryType.JMS_QUEUE.equals(resource.getType())) {      containsJmsQueue=true;    }  }  if ((containsJmsConnectionFactory || containsJmsQueue) && !containsJmsSiBus) {    String jmsSiBusName=configuration.getPropertyValue(WebSpherePropertySet.JMS_SIBUS);    Resource jmsSiBus=new Resource(jmsSiBusName,WebSphereConfigurationEntryType.JMS_SIBUS);    jmsSiBus.setId(jmsSiBusName);    websphereResources.add(jmsSiBus);  }  if ((containsJmsConnectionFactory || containsJmsQueue) && !containsJmsSiBusMember) {    Resource jmsSiBusMember=new Resource("",WebSphereConfigurationEntryType.JMS_SIBUS_MEMBER);    websphereResources.add(jmsSiBusMember);  }}  }
class C{  synchronized public LdapResult ldapBind(String dn,byte[] toServer,Control[] bindCtls,String auth,boolean pauseAfterReceipt) throws java.io.IOException, NamingException {  ensureOpen();  conn.abandonOutstandingReqs(null);  BerEncoder ber=new BerEncoder();  int curMsgId=conn.getMsgId();  LdapResult res=new LdapResult();  res.status=LDAP_OPERATIONS_ERROR;  ber.beginSeq(Ber.ASN_SEQUENCE | Ber.ASN_CONSTRUCTOR);  ber.encodeInt(curMsgId);  ber.beginSeq(LdapClient.LDAP_REQ_BIND);  ber.encodeInt(isLdapv3 ? LDAP_VERSION3 : LDAP_VERSION2);  ber.encodeString(dn,isLdapv3);  if (auth != null) {    ber.beginSeq(Ber.ASN_CONTEXT | Ber.ASN_CONSTRUCTOR | 3);    ber.encodeString(auth,isLdapv3);    if (toServer != null) {      ber.encodeOctetString(toServer,Ber.ASN_OCTET_STR);    }    ber.endSeq();  } else {    if (toServer != null) {      ber.encodeOctetString(toServer,Ber.ASN_CONTEXT);    } else {      ber.encodeOctetString(null,Ber.ASN_CONTEXT,0,0);    }  }  ber.endSeq();  if (isLdapv3) {    encodeControls(ber,bindCtls);  }  ber.endSeq();  LdapRequest req=conn.writeRequest(ber,curMsgId,pauseAfterReceipt);  if (toServer != null) {    ber.reset();  }  BerDecoder rber=conn.readReply(req);  rber.parseSeq(null);  rber.parseInt();  if (rber.parseByte() != LDAP_REP_BIND) {    return res;  }  rber.parseLength();  parseResult(rber,res,isLdapv3);  if (isLdapv3 && (rber.bytesLeft() > 0) && (rber.peekByte() == (Ber.ASN_CONTEXT | 7))) {    res.serverCreds=rber.parseOctetString((Ber.ASN_CONTEXT | 7),null);  }  res.resControls=isLdapv3 ? parseControls(rber) : null;  conn.removeRequest(req);  return res;}  }
class C{  public static String ThisThese(final int quantity){  return makeUpperCaseWord(thisthese(quantity));}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  if (rect.left + rect.width() > width || rect.top + rect.height() > height)   return new PlanarYUVLuminanceSource(data,height,width,rect.left,rect.top,rect.width(),rect.height(),false);  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  private void onBreakpointsChanged(){  final List<Breakpoint> breakpointList=process.getCurrentBreakpointList();  SwingUtilities.invokeLater(new ModelSetter(breakpointList,getSelection()));}  }
class C{  public boolean isRoot(){  return reader.isRoot(this);}  }
class C{  private void injectHostname(Socket socket,String host){  try {    if (Integer.valueOf(Build.VERSION.SDK) >= 4) {      Field field=InetAddress.class.getDeclaredField("hostName");      field.setAccessible(true);      field.set(socket.getInetAddress(),host);    }  } catch (  Exception ignored) {  }}  }
class C{  public Reduction(Token root){  elements=new ArrayList();  set(0,root);}  }
class C{  private void configureToggleCommentAction(){  IAction action=getAction("ToggleComment");  if (action instanceof ToggleCommentAction) {    ISourceViewer sourceViewer=getSourceViewer();    SourceViewerConfiguration configuration=getSourceViewerConfiguration();    ((ToggleCommentAction)action).configure(sourceViewer,configuration);  }}  }
class C{  DirectArrayOfDoublesUnion(final int nomEntries,final int numValues,final long seed,final Memory dstMem){  super(new DirectArrayOfDoublesQuickSelectSketch(nomEntries,3,1f,numValues,seed,dstMem));  mem_=dstMem;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Override public IGangliaMetadataMessage newDecl(String hostName,String metricName,Object value){  return null;}  }
class C{  public T caseGuard_(Guard_ object){  return null;}  }
class C{  protected int defaultNumExamples(){  return 100;}  }
class C{  public XMLDocument(String xml) throws Exception {  this();  read(xml);}  }
class C{  public SequenceMatcher(String a,String b){  this.set_seqs(a,b);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static String stringDefaultValue(String bytes){  try {    return new String(bytes.getBytes("ISO-8859-1"),"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException("Java VM does not support a standard character set.",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.149 -0500",hash_original_method="80970884A2E49299D172B83B85177CAF",hash_generated_method="67923345C9A98253BC505F1A153CFB5F") public ServerHelloDone(HandshakeIODataStream in,int length) throws IOException {  if (length != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerHelloDone");  }}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Utf8_info ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);  return ci.convert();}  }
class C{  @Override public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public StoragePortRestRep register(URI portId,URI storageSystemId){  String registerUrl=PathConstants.STORAGE_PORT_BY_STORAGE_SYSTEM_URL + "/{portId}/register";  return client.post(StoragePortRestRep.class,registerUrl,storageSystemId,portId);}  }
class C{  public static <T>AddQuery<T> start(T query,long correlationId){  return start(query,correlationId,"default",null);}  }
class C{  public void mouseExited(MouseEvent e){  if (isVisible())   e.consume();}  }
class C{  public static String formatBytesToMBytes(long bytes){  return decFormat.format((double)bytes / (1024 * 1024)) + " Mb";}  }
class C{  private static void sleep(){  System.out.println(".. sleeping-ini .. -> " + Thread.activeCount());  Thread.yield();  try {    Thread.sleep(1000);  } catch (  final InterruptedException ie) {  }  System.out.println(".. sleeping-end .. -> " + Thread.activeCount());}  }
class C{  public boolean with_arrayref(){  return soot.PhaseOptions.getBoolean(options,"with-arrayref");}  }
class C{  public void removeFromCompletedList(DownloadInfoRunnable downloadInfoRunnable){  mCompletedList.remove(downloadInfoRunnable);}  }
class C{  public MetricSchemaRecordQuery(String namespace,String scope,String metric,String tagKey,String tagValue){  setNamespace(namespace);  setScope(scope);  setMetric(metric);  setTagKey(tagKey);  setTagValue(tagValue);}  }
class C{  private boolean shouldFinishPreviousActivity(Activity activity){  Uri uri=Small.getUri(activity);  if (uri != null) {    String fullscreen=uri.getQueryParameter("_fullscreen");    if (!TextUtils.isEmpty(fullscreen) && "1".equals(fullscreen)) {      return true;    }  }  return false;}  }
class C{  public TransferSubscriptionsResponse clone(){  TransferSubscriptionsResponse result=new TransferSubscriptionsResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new TransferResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public static Number decodeInteger(byte[] value) throws TlvException {  BigInteger bi=new BigInteger(value);  if (value.length == 1) {    return bi.byteValue();  } else   if (value.length <= 2) {    return bi.shortValue();  } else   if (value.length <= 4) {    return bi.intValue();  } else   if (value.length <= 8) {    return bi.longValue();  } else {    throw new TlvException("Invalid length for an integer value: " + value.length);  }}  }
class C{  public static String createLibName(String baseName){  OSType osType=calculateOS();  ARCHType archType=calculateArch();  String libName=baseName;  libName+="-" + osType.toString().toLowerCase(Locale.ENGLISH);  libName+="-" + archType.toString().toLowerCase(Locale.ENGLISH);  return libName;}  }
class C{  public boolean dataDefinitionIgnoredInTransactions() throws SQLException {  return false;}  }
class C{  public boolean isAutoSpace(){  return autoSpace;}  }
class C{  public BCCTest(String name){  super(name);}  }
class C{  public T selected(String value){  return attr("selected",value);}  }
class C{  private boolean matches(String str,String ptrn){  return str != null && (ptrn == null || str.toUpperCase().matches(ptrn.toUpperCase().replace("%",".*").replace("_",".")));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    return getAstStructuralMembers();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:  if (resolve)   return getStructuralType();return basicGetStructuralType();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:return getGenStructuralMembers();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:return getPostponedSubstitutions();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__DEFINED_TYPING_STRATEGY:return getDefinedTypingStrategy();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Map<Integer,Double> compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  public Map<Integer,Field> asMap(){  return fields;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC2ParameterSpec)) {    return false;  }  RC2ParameterSpec ps=(RC2ParameterSpec)obj;  return (effectiveKeyBits == ps.effectiveKeyBits) && (Arrays.equals(iv,ps.iv));}  }
class C{  protected Expression equals(int opPos) throws TransformerException {  return compileOperation(new Equals(),opPos);}  }
class C{  public void addApplicationListener(ApplicationListener al){  this.appListeners.add(al);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public String makeUniqueName(String prefix){  throw new RuntimeException("not available in " + getName());}  }
class C{  private static void initializeRegistry(){  register(PipelineOptions.class);  Set<PipelineOptionsRegistrar> pipelineOptionsRegistrars=Sets.newTreeSet(ObjectsClassComparator.INSTANCE);  pipelineOptionsRegistrars.addAll(Lists.newArrayList(ServiceLoader.load(PipelineOptionsRegistrar.class,CLASS_LOADER)));  for (  PipelineOptionsRegistrar registrar : pipelineOptionsRegistrars) {    for (    Class<? extends PipelineOptions> klass : registrar.getPipelineOptions()) {      register(klass);    }  }}  }
class C{  public static boolean isMachineBlock(Block aBlock,int aMeta){  if (GT_Utility.isBlockInvalid(aBlock))   return false;  return (sMachineIDs.containsKey(aBlock) && (sMachineIDs.get(aBlock) & B[aMeta]) != 0);}  }
class C{  public ReadCommEventLogRequest(){  super();  setFunctionCode(Modbus.READ_COMM_EVENT_LOG);  setDataLength(0);}  }
class C{  public void addText(String text) throws ConfigException {  text=text.trim();  _text=text;  String[] split=Pattern.compile("\\s+").split(text);  if (split.length > 0)   _minutes=parseRange(split[0],0,59);  if (split.length > 1)   _hours=parseRange(split[1],0,23); else   _hours=parseRange("*",0,23);  if (split.length > 2)   _days=parseRange(split[2],1,31);  if (split.length > 3)   _months=parseRange(split[3],1,12);  if (split.length > 4) {    _daysOfWeek=parseRange(split[4],0,7);    if (_daysOfWeek[7])     _daysOfWeek[0]=_daysOfWeek[7];  }}  }
class C{  BreakpointRequest breakpointAtMethod(String methodName) throws Exception {  List meths=targetClass.methodsByName(methodName);  if (meths.size() != 1) {    throw new Exception("test error: should be one " + methodName);  }  Method meth=(Method)meths.get(0);  return erm.createBreakpointRequest(meth.location());}  }
class C{  public void preferenceItemDetails(String strClass,String item,String description){  if (!classPreferenceList.containsKey(strClass)) {    classPreferenceList.put(strClass,new ClassPreferences());  }  ArrayList<PreferenceList> a=classPreferenceList.get(strClass).getPreferenceList();  for (int i=0; i < a.size(); i++) {    if (a.get(i).getItem().equals(item)) {      a.get(i).setDescription(description);      return;    }  }  a.add(new PreferenceList(item,description));}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileSessionCtx wsc=MobileSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  MobileDoc doc=null;  int AD_Menu_ID=MobileUtil.getParameterAsInt(request,"AD_Menu_ID");  String fileName=MobileUtil.getParameter(request,"File");  if (AD_Menu_ID > 0) {    doc=createParameterPage(wsc,AD_Menu_ID,0,0,0,0,null,null);  } else {    doPost(request,response);  }  if (doc == null)   doc=MobileDoc.createWindow("Process Not Found");  MobileUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  private void handleHtmlDoClear(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,servletText.pageTitleClearDb(),true).setPaneId("clear");  pageWrapper.addHeader();  final String csrft=requestAndResponse.getParameter("csrft");  if (isTheCsrftWrong(requestAndResponse,csrft)) {    requestAndResponse.print(servletText.errorRequiresSignIn(false));  } else   if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    dbLogic.clearData();    if (sessionManager != null) {      try {        sessionManager.reallyShutdownSessions();      } catch (      final Exception e) {      }    }    createTheUserForSingleUserMode();    requestAndResponse.print(servletText.sentenceCleared());  }  pageWrapper.addFooter();}  }
class C{  public void endBlock() throws IOException {  if (blockStack == null || blockStack.isEmpty()) {    return;  }  int[] blockInfo=(int[])blockStack.pop();  if (blocks == null) {    blocks=new ArrayList();  }  int offset=blockInfo[0];  int codeSize=((int)out.getBytesWritten()) - offset;  blockInfo[0]=offset - 2;  blockInfo[1]=codeSize;  blocks.add(blockInfo);}  }
class C{  public ItemEngraving(String par1,int par2){  super();  setUnlocalizedName("engraving_" + par1);  setMaxDamage(par2);}  }
class C{  public final void mergeCSVPartFiles(String srcFileName,String destFileName,CSVFileFormatProperties csvprop,long rlen,long clen) throws IOException {  Configuration conf=new Configuration(ConfigurationManager.getCachedJobConf());  Path srcFilePath=new Path(srcFileName);  Path mergedFilePath=new Path(destFileName);  FileSystem hdfs=FileSystem.get(conf);  if (hdfs.exists(mergedFilePath)) {    hdfs.delete(mergedFilePath,true);  }  OutputStream out=hdfs.create(mergedFilePath,true);  if (csvprop.hasHeader()) {    StringBuilder sb=new StringBuilder();    for (int i=0; i < clen; i++) {      sb.append("C" + (i + 1));      if (i < clen - 1)       sb.append(csvprop.getDelim());    }    sb.append('\n');    out.write(sb.toString().getBytes());    sb.setLength(0);  }  if (hdfs.isDirectory(srcFilePath)) {    try {      FileStatus[] contents=hdfs.listStatus(srcFilePath);      Path[] partPaths=new Path[contents.length];      int numPartFiles=0;      for (int i=0; i < contents.length; i++) {        if (!contents[i].isDirectory()) {          partPaths[i]=contents[i].getPath();          numPartFiles++;        }      }      Arrays.sort(partPaths);      for (int i=0; i < numPartFiles; i++) {        InputStream in=hdfs.open(partPaths[i]);        try {          IOUtils.copyBytes(in,out,conf,false);          if (i < numPartFiles - 1)           out.write('\n');        }  finally {          IOUtilFunctions.closeSilently(in);        }      }    }  finally {      IOUtilFunctions.closeSilently(out);    }  } else   if (hdfs.isFile(srcFilePath)) {    InputStream in=null;    try {      in=hdfs.open(srcFilePath);      IOUtils.copyBytes(in,out,conf,true);    }  finally {      IOUtilFunctions.closeSilently(in);      IOUtilFunctions.closeSilently(out);    }  } else {    throw new IOException(srcFilePath.toString() + ": No such file or directory");  }}  }
class C{  public ErrorMessage(ErrorMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetError()) {    this.error=new SyncError(other.error);  }  if (other.isSetType()) {    this.type=other.type;  }}  }
class C{  public void and(BitVector other){  if (this == other)   return;  checkSize(other);  final long[] theBits=this.bits;  final long[] otherBits=other.bits;  for (int i=theBits.length; --i >= 0; )   theBits[i]&=otherBits[i];}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.181 -0500",hash_original_method="2F1F4217686C723813009E2E078B2257",hash_generated_method="0FBB255CA3773D98A3FCEEF44B21219C") public static boolean isVoipSupported(Context context){  return context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_SIP_VOIP) && isApiSupported(context);}  }
class C{  public static List<? extends Element> childElementList(Element element,String... childElementNames){  return childElementList(element,UtilMisc.toSetArray(childElementNames));}  }
class C{  @Deprecated public void listTagsByNotebook(String notebookGuid,OnClientCallback<List<Tag>> callback){  AsyncReflector.execute(mClient,callback,"listTagsByNotebook",mAuthenticationToken,notebookGuid);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private boolean parseCommandWord(BashPsiBuilder builder){  boolean isWord=Parsing.word.isWordToken(builder);  if (!isWord) {    return false;  }  final PsiBuilder.Marker cmdMarker=builder.mark();  if (!Parsing.word.parseWord(builder)) {    cmdMarker.drop();    return false;  }  cmdMarker.done(GENERIC_COMMAND_ELEMENT);  return true;}  }
class C{  @Override public AttributedCharacterIterator formatToCharacterIterator(Object obj){  CharacterIteratorFieldDelegate delegate=new CharacterIteratorFieldDelegate();  StringBuffer sb=new StringBuffer();  if (obj instanceof Double || obj instanceof Float) {    format(((Number)obj).doubleValue(),sb,delegate);  } else   if (obj instanceof Long || obj instanceof Integer || obj instanceof Short|| obj instanceof Byte|| obj instanceof AtomicInteger|| obj instanceof AtomicLong) {    format(((Number)obj).longValue(),sb,delegate);  } else   if (obj instanceof BigDecimal) {    format((BigDecimal)obj,sb,delegate);  } else   if (obj instanceof BigInteger) {    format((BigInteger)obj,sb,delegate,false);  } else   if (obj == null) {    throw new NullPointerException("formatToCharacterIterator must be passed non-null object");  } else {    throw new IllegalArgumentException("Cannot format given Object as a Number");  }  return delegate.getIterator(sb.toString());}  }
class C{  public void update(Graphics g,JComponent c){  if (g == null) {    throw new NullPointerException("graphics must be non-null");  }  if (c.isOpaque() && (c.getBackground() instanceof UIResource) && ((JToolBar)c).getOrientation() == JToolBar.HORIZONTAL && UIManager.get("MenuBar.gradient") != null) {    JRootPane rp=SwingUtilities.getRootPane(c);    JMenuBar mb=(JMenuBar)findRegisteredComponentOfType(c,JMenuBar.class);    if (mb != null && mb.isOpaque() && (mb.getBackground() instanceof UIResource)) {      Point point=new Point(0,0);      point=SwingUtilities.convertPoint(c,point,rp);      int x=point.x;      int y=point.y;      point.x=point.y=0;      point=SwingUtilities.convertPoint(mb,point,rp);      if (point.x == x && y == point.y + mb.getHeight() && mb.getWidth() == c.getWidth() && MetalUtils.drawGradient(c,g,"MenuBar.gradient",0,-mb.getHeight(),c.getWidth(),c.getHeight() + mb.getHeight(),true)) {        setLastMenuBar(mb);        paint(g,c);        return;      }    }    if (MetalUtils.drawGradient(c,g,"MenuBar.gradient",0,0,c.getWidth(),c.getHeight(),true)) {      setLastMenuBar(null);      paint(g,c);      return;    }  }  setLastMenuBar(null);  super.update(g,c);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Vertex applyNEW(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex newVertex=null;  newVertex=network.createVertex();  for (  Relationship argument : arguments) {    Vertex type=argument.getTarget().applyQuotient(variables,network);    newVertex.addRelationship(Primitive.INSTANTIATION,type);    if (!type.hasRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION)) {      Collection<Relationship> specializations=type.getRelationships(Primitive.INSTANTIATION);      if (specializations != null) {        for (        Relationship specialization : specializations) {          type.addRelationship(Primitive.SPECIALIZATION,specialization.getTarget());        }        type.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);      }    }  }  return newVertex;}  }
class C{  private void handleResponseFailure(long requestId,Throwable t){  ContextualFuture future=responseFutures.remove(requestId);  if (future != null) {    future.context.executor().execute(null);  }}  }
class C{  public static void startThreads(){  stopping=false;  startWatchDog();  startProctor();}  }
class C{  public boolean isRestartRequired(){  return restartRequired;}  }
class C{  public static void escapeJavaScript(Writer out,String str) throws IOException {  escapeJavaStyleString(out,str,true,true);}  }
class C{  private void removeNPC(String name){  SpeakerNPC npc=NPCList.get().get(name);  if (npc == null) {    return;  }  npc.getZone().remove(npc);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public String toString(){  return new String(buffer,0,size);}  }
class C{  public void sessionCreated(HttpSessionEvent event){  ApplicationAssociate associate=getAssociate();  if (associate != null && associate.isDevModeEnabled()) {    activeSessions.add(event.getSession());  }  boolean doCreateToken=true;  if (null != associate) {    Application application=associate.getApplication();    ViewHandler viewHandler=application.getViewHandler();    doCreateToken=!viewHandler.getProtectedViewsUnmodifiable().isEmpty();  }  if (doCreateToken) {    StateHelper.createAndStoreCryptographicallyStrongTokenInSession(event.getSession());  }}  }
class C{  public void initializeLayoutBlockPaths(){  log.debug("start initializeLayoutBlockPaths");  java.util.Iterator<String> iter=getSystemNameList().iterator();  while (iter.hasNext()) {    String sName=iter.next();    if (sName == null) {      log.error("System name null during 1st initialization of LayoutBlocks");    } else {      log.debug("initializeLayoutBlock on \"{}\"",sName);      LayoutBlock b=getBySystemName(sName);      b.initializeLayoutBlock();    }  }  badBeanErrors=0;  iter=getSystemNameList().iterator();  while (iter.hasNext()) {    String sName=iter.next();    if (sName == null) {      log.error("System name null during 2nd initialization of LayoutBlocks");    } else {      log.debug("LayoutBlock initialization - system name = " + sName);      LayoutBlock b=getBySystemName(sName);      b.updatePaths();      if (b.getBlock().getValue() != null) {        b.getBlock().setValue(null);      }    }  }  if (badBeanErrors > 0) {    JOptionPane.showMessageDialog(null,"" + badBeanErrors + " "+ Bundle.getMessage("Warn2"),Bundle.getMessage("WarningTitle"),JOptionPane.ERROR_MESSAGE);  }  try {    new BlockValueFile().readBlockValues();  } catch (  org.jdom2.JDOMException jde) {    log.error("JDOM Exception when retreiving block values " + jde);  }catch (  java.io.IOException ioe) {    log.error("I/O Exception when retreiving block values " + ioe);  }  initialized=true;  log.debug("start initializeLayoutBlockRouting");  initializeLayoutBlockRouting();  log.debug("end initializeLayoutBlockRouting and initializeLayoutBlockPaths");}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public LessEqualConstraint(Number constraintValue){  super(constraintValue);}  }
class C{  public static void registerAdditionalObjectColors(final String groupProperties,final String pluginName,final ClassLoader classLoader,final Plugin provider){  try {    IO_CLASS_TO_COLOR_MAP.parseProperties(groupProperties,"io.",".color",classLoader,provider);  } catch (  IOException e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.flow.ProcessRenderer.loading_io_object_colors_error",pluginName);  }}  }
class C{  public boolean isGradientBarEnabled(){  return null == gradientBarEnabled ? _gradientBarEnabled : gradientBarEnabled.get();}  }
class C{  private boolean updateStartAndEndMarkers(GoogleMap googleMap){  if (showEndMarker) {    for (int i=locations.size() - 1; i >= 0; i--) {      CachedLocation cachedLocation=locations.get(i);      if (cachedLocation.valid) {        MarkerOptions markerOptions=new MarkerOptions().position(cachedLocation.getLatLng()).anchor(MARKER_X_ANCHOR,MARKER_Y_ANCHOR).draggable(false).visible(true).icon(BitmapDescriptorFactory.fromResource(R.drawable.ic_marker_red_paddle));        googleMap.addMarker(markerOptions);        break;      }    }  }  boolean hasStartMarker=false;  for (int i=0; i < locations.size(); i++) {    CachedLocation cachedLocation=locations.get(i);    if (cachedLocation.valid) {      MarkerOptions markerOptions=new MarkerOptions().position(cachedLocation.getLatLng()).anchor(MARKER_X_ANCHOR,MARKER_Y_ANCHOR).draggable(false).visible(true).icon(BitmapDescriptorFactory.fromResource(R.drawable.ic_marker_green_paddle));      googleMap.addMarker(markerOptions);      hasStartMarker=true;      break;    }  }  return hasStartMarker;}  }
class C{  public void valueChanged(TreeSelectionEvent e){  try {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)e.getPath().getLastPathComponent();    if (node.getUserObject() instanceof Strategy) {      newButton.setTransferObject(node.getUserObject());      messageText.setText(null);    }    if (node.getUserObject() instanceof Rule) {      Rule rule=(Rule)node.getUserObject();      if (null != currentRule) {        if (currentRule.getRule().length > 0) {          if (!(new String(currentRule.getRule())).equals(getContent())) {            currentRule.setRule(getContent().getBytes());            currentRule.setDirty(true);          }        }        if (null != currentRule.getComment() && !currentRule.getComment().equals(commentText.getText())) {          currentRule.setComment(commentText.getText());          currentRule.setDirty(true);        }      }      compileButton.setTransferObject(rule);      setContent(null);      messageText.setText(null);      try {        Class<?> thisClass=this.dynacode.loadClass(StrategyRule.PACKAGE + rule.getStrategy().getClassName());        setMessageText(null,false,false,null);        addClassDefinition(thisClass,"Methods for class: " + thisClass.getName(),messageText.getDocument());        addClassDefinition(thisClass.getSuperclass(),"Methods for super class: " + thisClass.getSuperclass().getName(),messageText.getDocument());      } catch (      Throwable ex) {        this.setStatusBarMessage("Strategy definition could not be loaded Msg:" + ex.getMessage() + " Please compile and save the strategy.",BasePanel.INFORMATION);      }      setContent(new String(rule.getRule()));      commentText.setText(rule.getComment());      commentText.setCaretPosition(0);      messageText.setCaretPosition(0);      currentRule=rule;    }  } catch (  Exception ex) {    setErrorMessage("Error finding Strategy code.",ex.getMessage(),ex);  }}  }
class C{  public GeneralPath(int rule,int initialCapacity){  setWindingRule(rule);  types=new byte[initialCapacity];  points=new float[initialCapacity * 2];}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.STEP__COMMENT:    return getComment();case SexecPackage.STEP__CALLER:  return getCaller();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Matrix compute(Matrix loghyper,Matrix X){  Matrix K=new Matrix(X.getRowDimension(),X.getRowDimension());  for (int i=0; i < f.length; i++) {    Matrix loghyperi=loghyper.getMatrix(idx[i],idx[i + 1] - 1,0,0);    K.plusEquals(f[i].compute(loghyperi,X));  }  return K;}  }
class C{  public void paintLabelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public XMLElement(String fullName,String namespace,String systemID,int lineNr){  this.attributes=new ArrayList();  this.children=new ArrayList(8);  this.fullName=fullName;  if (namespace == null) {    this.name=fullName;  } else {    int index=fullName.indexOf(':');    if (index >= 0) {      this.name=fullName.substring(index + 1);    } else {      this.name=fullName;    }  }  this.namespace=namespace;  this.content=null;  this.lineNr=lineNr;  this.systemID=systemID;  this.parent=null;}  }
class C{  public final void mul(GMatrix m1){  int i, j, k;  if (nCol != m1.nRow || nCol != m1.nCol) {    throw new MatrixSizeException();  }  double[][] tmp=new double[nRow][nCol];  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      tmp[i][j]=0.0;      for (k=0; k < nCol; k++) {        tmp[i][j]+=values[i][k] * m1.values[k][j];      }    }  }  values=tmp;}  }
class C{  public DirectionOfAttackAviation(String sidc){  super(sidc);}  }
class C{  public MultiMatchQueryBuilder type(Object type){  this.type=type == null ? null : Type.parse(type.toString().toLowerCase(Locale.ROOT),ParseFieldMatcher.EMPTY);  return this;}  }
class C{  @Override public Launcher build(){  LauncherImpl launcher=new LauncherImpl();  launcher.setNativeFastCheck(nativeFastCheck);  launcher.setPrintDebugCommandline(printDebugCommandline);  launcher.setUseDaemonThreads(useDaemonThreads);  return launcher;}  }
class C{  private void removeNodes(final List<DefaultMutableTreeNode> nodes){  for (  final DefaultMutableTreeNode node : nodes) {    if (node instanceof TypeMemberTreeNode) {      final TypeMember member=((TypeMemberTreeNode)node).getTypeMember();      nestedStructNodes.get(member.getBaseType()).removeAll(memberNodes.get(member));      memberNodes.remove(member,node);    }    node.removeFromParent();  }}  }
class C{  public int numLocas(){  return this.numGlyphs + 1;}  }
class C{  protected void openProgrammer(){  if (rosterEntry == null) {    return;  }  java.util.ResourceBundle rbt=java.util.ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle");  String title=java.text.MessageFormat.format(rbt.getString("FrameOpsProgrammerTitle"),new Object[]{rosterEntry.getId()});  int address=Integer.parseInt(rosterEntry.getDccAddress());  boolean longAddr=true;  if (address < 100) {    longAddr=false;  }  Programmer programmer=InstanceManager.getDefault(jmri.ProgrammerManager.class).getAddressedProgrammer(longAddr,address);  JFrame p=new PaneOpsProgFrame(null,rosterEntry,title,"programmers" + File.separator + ProgDefault.getDefaultProgFile()+ ".xml",programmer);  p.pack();  p.setVisible(true);}  }
class C{  private String c(String str){  return str + count;}  }
class C{  EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){  EgDemandDetails demandDetail=null;  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {    final Installment currInstallment=getCurrentInstallment(module);    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException(" Penalty Demand reason Master is null in method  insertPenalty");    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);    if (egDemandReason == null)     throw new ApplicationRuntimeException(" Penalty Demand reason is null in method  insertPenalty ");    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);  }  return demandDetail;}  }
class C{  public void commit(final Set<String> graphSourceNamesToCloseTxOn){  closeTx(graphSourceNamesToCloseTxOn,Transaction.Status.COMMIT);}  }
class C{  private boolean isVertical(){  return (sashStyle & SWT.VERTICAL) != 0;}  }
class C{  boolean isInsideWorkTree() throws GitException {  final EmptyGitCommand emptyGitCommand=nativeGit.createEmptyGitCommand();  try {    emptyGitCommand.setNextParameter("rev-parse").setNextParameter("--is-inside-work-tree").execute();    final String output=emptyGitCommand.getText();    return Boolean.valueOf(output);  } catch (  GitException ge) {    String msg=ge.getMessage();    if (msg != null && notInGitRepoErrorPattern.matcher(msg).matches()) {      return false;    }    throw ge;  }}  }
class C{  private void initializeDefaults(){  this.astKind=K_COMPILATION_UNIT;  this.rawSource=null;  this.typeRoot=null;  this.bits=0;  this.sourceLength=-1;  this.sourceOffset=0;  this.workingCopyOwner=DefaultWorkingCopyOwner.PRIMARY;  this.unitName=null;  this.project=null;  this.classpaths=null;  this.sourcepaths=null;  this.sourcepathsEncodings=null;  Map options=JavaCore.getOptions();  options.remove(JavaCore.COMPILER_TASK_TAGS);  this.compilerOptions=options;}  }
class C{  public boolean isGuaranteeDateMandatory(){  Object oo=get_Value(COLUMNNAME_IsGuaranteeDateMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int size(){  return coordinates.length;}  }
class C{  private static String formatJson2Byte2Hex(String json){  int len=ByteHexConverter.getByteLen(json);  ByteWriteFactory byteWriteFactory=new ByteWriteFactory(4 + len);  byteWriteFactory.writeInt(len);  byteWriteFactory.writeString(json,len);  byte[] bytes=byteWriteFactory.getBytes();  String hex=ByteHexConverter.byte2hex(bytes);  return hex;}  }
class C{  @LargeTest public void testThumbnailWithHeightAsZero() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  final int atTime=100;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  try {    final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);    final int outWidth=(mediaVideoItem.getWidth() / 2);    final int outHeight=-1;    mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Thumbnail List with Zero Height",flagForException);}  }
class C{  private DeviceStatusUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public void addIntersection(IfaEx ifa,Mac mac){  IfaEx ifaex=this.getOrSetIfa(ifa);}  }
class C{  public static WrappedByteBuffer wrap(byte[] bytes,int offset,int length){  return new WrappedByteBuffer(bytes,offset,length);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  LessonEntityDao.createTable(db,ifNotExists);  FlashcardEntityDao.createTable(db,ifNotExists);}  }
class C{  public void throwException(){  mv.visitInsn(Opcodes.ATHROW);}  }
class C{  private void createAndExecuteTasks(Executor executor,ProcedureFactory<BT> procedureFactory,T[] array){  this.procedures=new ArrayProcedureFJTask[this.taskCount];  int sectionSize=array.length / this.taskCount;  int size=this.taskCount;  for (int index=0; index < size; index++) {    ArrayProcedureFJTask<T,BT> procedureFJTask=new ArrayProcedureFJTask<>(this,procedureFactory,array,index,sectionSize,index == this.taskCount - 1);    this.procedures[index]=procedureFJTask;    executor.execute(procedureFJTask);  }}  }
class C{  public NodeEndpoint(final String protocol,final String host,final int port){  this.protocol=protocol;  this.host=getNonNormalizedHost(host);  this.normalizedHost=getNormalizedHost(this.host);  this.port=port;  this.url=this.createUrl();}  }
class C{  protected boolean isReply(){  return Boolean.valueOf(getInitParameter("isReply"));}  }
class C{  public void createBug10476_upgradeSuspendedSubscription() throws Exception {  setDateFactory("2013-08-02 09:00:00");  String customerAdminId="Bug10476UpgrSusCustomerAdmin";  VOOrganization customer=orgSetup.registerCustomer("Bug10476UpgrSusCustomer",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,customerAdminId,supplierMarketplace.getMarketplaceId(),basicSetup.getSupplierOrgID());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10476_UPGRSUS_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,technicalServiceAsync,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),3);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(customerAdmin.getKey(),"BUG10476_UPGRSUS",serviceDetails,customerAdmin,VOServiceFactory.getRole(serviceDetails,"GUEST"));  setDateFactory("2013-08-02 10:00:00");  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  setDateFactory("2013-08-03 00:00:00");  paymentSetup.deleteCustomerPaymentTypes(basicSetup.getSupplierAdminKey(),customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  setDateFactory("2013-08-04 12:00:00");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails upgradedServiceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10476_UPGRSUS_FREE_SERVICE",TestService.EXAMPLE_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,upgradedServiceDetails);  setDateFactory("2013-08-10 22:10:00");  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(customerAdmin.getKey(),subDetails,upgradedServiceDetails);  setDateFactory("2013-08-10 23:10:00");  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  setDateFactory("2013-08-11 15:00:00");  paymentSetup.reassignCustomerPaymentTypes(basicSetup.getSupplierAdminKey(),customer);  upgradedSubDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),upgradedSubDetails.getSubscriptionId());  setDateFactory("2013-08-15 08:12:00");  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10476_UPGRSUS",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10476_UPGRSUS",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("BUG10476_UPGRSUS",customer);}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder title(String title){  this.title=title;  return this;}  }
class C{  public long convertGeodeticToPolarStereographic(double Latitude,double Longitude){  double dlam;  double slat;  double essin;  double t;  double rho;  double pow_es;  long Error_Code=POLAR_NO_ERROR;  if ((Latitude < -PI_OVER_2) || (Latitude > PI_OVER_2)) {    Error_Code|=POLAR_LAT_ERROR;  }  if ((Latitude < 0) && (Southern_Hemisphere == 0)) {    Error_Code|=POLAR_LAT_ERROR;  }  if ((Latitude > 0) && (Southern_Hemisphere == 1)) {    Error_Code|=POLAR_LAT_ERROR;  }  if ((Longitude < -PI) || (Longitude > TWO_PI)) {    Error_Code|=POLAR_LON_ERROR;  }  if (Error_Code == POLAR_NO_ERROR) {    if (Math.abs(Math.abs(Latitude) - PI_OVER_2) < 1.0e-10) {      Easting=0.0;      Northing=0.0;    } else {      if (Southern_Hemisphere != 0) {        Longitude*=-1.0;        Latitude*=-1.0;      }      dlam=Longitude - Polar_Origin_Long;      if (dlam > PI) {        dlam-=TWO_PI;      }      if (dlam < -PI) {        dlam+=TWO_PI;      }      slat=Math.sin(Latitude);      essin=es * slat;      pow_es=Math.pow((1.0 - essin) / (1.0 + essin),es_OVER_2);      t=Math.tan(PI_Over_4 - Latitude / 2.0) / pow_es;      if (Math.abs(Math.abs(Polar_Origin_Lat) - PI_OVER_2) > 1.0e-10)       rho=Polar_a_mc * t / tc; else       rho=two_Polar_a * t / e4;      if (Southern_Hemisphere != 0) {        Easting=-(rho * Math.sin(dlam) - Polar_False_Easting);        Northing=rho * Math.cos(dlam) + Polar_False_Northing;      } else       Easting=rho * Math.sin(dlam) + Polar_False_Easting;      Northing=-rho * Math.cos(dlam) + Polar_False_Northing;    }  }  return (Error_Code);}  }
class C{  public DViewCrl(JFrame parent,String title,X509CRL crl){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.crl=crl;  initComponents();}  }
class C{  protected void logInfo(Exception ex){  System.out.println("INFO: Exception: " + ex);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int compareTo(Number left,Character right){  return compareTo(left,Integer.valueOf(right));}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isString()) {        ((StringToNominal)m_FilteredClassifier.getFilter()).setAttributeRange("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final double perClassPerBag(int bagIndex,int classIndex){  return m_perClassPerBag[bagIndex][classIndex];}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.CONTAINER_TYPE___GET_OWNED_CTOR:    return getOwnedCtor();case TypesPackage.CONTAINER_TYPE___FIND_OWNED_MEMBER__STRING:  return findOwnedMember((String)arguments.get(0));case TypesPackage.CONTAINER_TYPE___FIND_OWNED_MEMBER__STRING_BOOLEAN_BOOLEAN:return findOwnedMember((String)arguments.get(0),(Boolean)arguments.get(1),(Boolean)arguments.get(2));case TypesPackage.CONTAINER_TYPE___GET_OR_CREATE_OWNED_MEMBERS_BY_NAME_AND_ACCESS:return getOrCreateOwnedMembersByNameAndAccess();}return super.eInvoke(operationID,arguments);}  }
class C{  public void enablePaging(){  mViewPager.setPagingEnabled(true);}  }
class C{  public static String genValue(String... columns){  return Joiner.on("\t").useForNull("NULL").join(columns);}  }
class C{  public UpdateResponse remove(long id) throws IOException, SolrServerException {  UpdateResponse res=solrClient.deleteById(String.valueOf(id));  solrClient.commit(false,true,true);  return res;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @PostConstruct public void initialize(){  platformService=APPlatformServiceFactory.getInstance();}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  private int findPrecedingOrAncestorOrSelf(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  while (DTM.NULL != context) {    if (null != fromMatchPattern) {      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        context=DTM.NULL;        break;      }    }    if (null != countMatchPattern) {      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    int prevSibling=dtm.getPreviousSibling(context);    if (DTM.NULL == prevSibling) {      context=dtm.getParent(context);    } else {      context=dtm.getLastChild(prevSibling);      if (context == DTM.NULL)       context=prevSibling;    }  }  return context;}  }
class C{  private void addStatementInputPatches(boolean isShadow,int i,int xFrom,int xToAbove,int xToBelow,InputView inputView,ViewPoint inputLayoutOrigin){  int xOffset=xFrom + inputView.getFieldLayoutWidth();  mHelper.setPointMaybeFlip(mInputConnectorOffsets.get(i),xOffset + mPatchManager.mStatementInputPadding,inputLayoutOrigin.y + mPatchManager.mStatementTopThickness);  final NinePatchDrawable statementTopDrawable=getColoredPatchDrawable(isShadow ? R.drawable.statementinput_top_shadow : R.drawable.statementinput_top);  final NinePatchDrawable statementTopBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.statementinput_top_border);  final NinePatchDrawable statementConnectionHighlight=mPatchManager.getPatchDrawable(R.drawable.statementinput_top_connection);  mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,xOffset,inputLayoutOrigin.y,xToAbove,inputLayoutOrigin.y + statementTopDrawable.getIntrinsicHeight());  statementTopDrawable.setBounds(tempRect);  statementTopBorderDrawable.setBounds(tempRect);  statementConnectionHighlight.setBounds(tempRect);  mBlockPatches.add(statementTopDrawable);  mBlockBorderPatches.add(statementTopBorderDrawable);  mInputConnectionHighlightPatches.set(i,statementConnectionHighlight);  final NinePatchDrawable statementBottomDrawable=getColoredPatchDrawable(isShadow ? R.drawable.statementinput_bottom_shadow : R.drawable.statementinput_bottom);  final NinePatchDrawable statementBottomBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.statementinput_bottom_border);  final int connectorHeight=Math.max(inputView.getTotalChildHeight(),inputView.getMeasuredHeight());  mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,xOffset,inputLayoutOrigin.y + statementTopDrawable.getIntrinsicHeight(),xToBelow,inputLayoutOrigin.y + connectorHeight);  statementBottomDrawable.setBounds(tempRect);  statementBottomBorderDrawable.setBounds(tempRect);  mBlockPatches.add(statementBottomDrawable);  mBlockBorderPatches.add(statementBottomBorderDrawable);}  }
class C{  public static void clearActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Clear Actions Instruction not supported in OpenFlow 1.0");    return;  }  if (inst != null && inst.trim().isEmpty()) {    OFInstructionClearActions i=OFFactories.getFactory(fmb.getVersion()).instructions().clearActions();    log.debug("Appending ClearActions instruction: {}",i);    appendInstruction(fmb,i);    log.debug("All instructions after append: {}",fmb.getInstructions());  } else {    log.error("Got non-empty or null string, but ClearActions should not have any String sub-fields: {}",inst);  }}  }
class C{  public ConsistencyException(Throwable arg0){  super(arg0);}  }
class C{  private ClassifierSplitModel localModel(){  return m_localModel;}  }
class C{  public Enumeration<String> communities(){  HashSet<String> set=new HashSet<String>();  Vector<String> res=new Vector<String>();  for (Enumeration<AclEntry> e=acl.entries(); e.hasMoreElements(); ) {    AclEntryImpl entry=(AclEntryImpl)e.nextElement();    for (Enumeration<String> cs=entry.communities(); cs.hasMoreElements(); ) {      set.add(cs.nextElement());    }  }  String[] objs=set.toArray(new String[0]);  for (int i=0; i < objs.length; i++)   res.addElement(objs[i]);  return res.elements();}  }
class C{  public static DishModel serializableInstance(){  return new DishModel(1,1.0);}  }
class C{  public TObjectDoubleHashMap(){  super();}  }
class C{  public static IceMediaStream build(Agent parentAgent,String name){  return new IceMediaStream(parentAgent,name);}  }
class C{  public String escapeElementEntities(String str){  if (escapeOutput == false)   return str;  StringBuffer buffer;  char ch;  String entity;  buffer=null;  for (int i=0; i < str.length(); i++) {    ch=str.charAt(i);switch (ch) {case '<':      entity="&lt;";    break;case '>':  entity="&gt;";break;case '&':entity="&amp;";break;case '\r':entity="&#xD;";break;case '\n':entity=lineSeparator;break;default :entity=null;break;}if (buffer == null) {if (entity != null) {buffer=new StringBuffer(str.length() + 20);buffer.append(str.substring(0,i));buffer.append(entity);}} else {if (entity == null) {buffer.append(ch);} else {buffer.append(entity);}}}return (buffer == null) ? str : buffer.toString();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (para[i].getParameterName().equalsIgnoreCase("C_Project_ID")) {      m_C_Project_ID=para[i].getParameterAsInt();    } else     if (para[i].getParameterName().equalsIgnoreCase("M_Product_ID")) {      m_Product_ID=para[i].getParameterAsInt();    } else     if (para[i].getParameterName().equalsIgnoreCase("UseLifeYears")) {      m_UseLifeYears=para[i].getParameterAsInt();    } else     if (para[i].getParameterName().equalsIgnoreCase("DateTrx")) {      m_DateTrx=(Timestamp)para[i].getParameter();    } else {      log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);    }  }}  }
class C{  private static boolean evalBoolOp(final IRepFilterBean filterBean,final Boolean value){  if (value == null)   return false;  final boolean fvalue=(Boolean)filterBean.getValue();switch ((Operator)filterBean.getOperator()) {case EQUAL:    return value.booleanValue() == fvalue;case NOT_EQUAL:  return value.booleanValue() != fvalue;default :throw new RuntimeException("Unhandled operator: " + filterBean.getOperator());}}  }
class C{  public boolean saveError(String AD_Message,Exception ex,boolean issueError){  Env.getCtx().put(LAST_EXCEPTION,ex);  return saveError(AD_Message,ex.getLocalizedMessage(),issueError);}  }
class C{  public Main allowMissingModules(boolean allowMissingModules){  this.allowMissingModules=allowMissingModules;  return this;}  }
class C{  public void documentRelease(){}  }
class C{  @Uninterruptible @NoInline private int countFramesUninterruptible(RVMThread stackTraceThread){  int stackFrameCount=0;  Address fp;  if (stackTraceThread == RVMThread.getCurrentThread()) {    fp=Magic.getFramePointer();  } else {    AbstractRegisters contextRegisters=stackTraceThread.getContextRegisters();    fp=contextRegisters.getInnermostFramePointer();  }  fp=Magic.getCallerFramePointer(fp);  while (Magic.getCallerFramePointer(fp).NE(StackFrameLayout.getStackFrameSentinelFP())) {    int compiledMethodId=Magic.getCompiledMethodID(fp);    if (compiledMethodId != StackFrameLayout.getInvisibleMethodID()) {      CompiledMethod compiledMethod=CompiledMethods.getCompiledMethod(compiledMethodId);      if ((compiledMethod.getCompilerType() != CompiledMethod.TRAP) && compiledMethod.hasBridgeFromNativeAnnotation()) {        fp=RuntimeEntrypoints.unwindNativeStackFrame(fp);      }    }    stackFrameCount++;    fp=Magic.getCallerFramePointer(fp);  }  return stackFrameCount;}  }
class C{  public boolean contains(int fileId,int line){  boolean found=false;  Iterator<Location> i=iterator();  while (i.hasNext() && !found) {    Location l=i.next();    int id=(l.getFile() == null) ? -1 : l.getFile().getId();    if (id == fileId && l.getLine() == line)     found=true;  }  return found;}  }
class C{  public void tradeOrderCancelled(TradeOrder tradeOrder){}  }
class C{  public void adjustTimer(DrawContext dc,double newEyeDistance){  if (this.timerAdjustedEyeDistance == 0)   return;  if (this.timer.isExpired(dc))   return;  double oldPixelSize=dc.getView().computePixelSizeAtDistance(this.timerAdjustedEyeDistance);  double newPixelSize=dc.getView().computePixelSizeAtDistance(newEyeDistance);  if (newPixelSize < oldPixelSize / 2) {    long remainingTime=this.timer.getExpiryTime() - dc.getFrameTimeStamp();    this.timer.setExpiryTime(dc.getFrameTimeStamp() + remainingTime / 2);    this.timerAdjustedEyeDistance=newEyeDistance;  }}  }
class C{  private boolean execute(boolean readResponse) throws IOException {  try {    httpEngine.sendRequest();    if (readResponse) {      httpEngine.readResponse();    }    return true;  } catch (  IOException e) {    if (handleFailure(e)) {      return false;    } else {      throw e;    }  }}  }
class C{  @Override public void finalizeAggregation() throws Exception {}  }
class C{  protected void removeImages(ImageTile[] selectedTiles2){  ImageTile[] selectedTiles=getSelectedTiles();  if (selectedTiles != null && selectedTiles.length > 0) {    String confirmStringMulti=i18n.get(ImageTileLayer.class,"removeConfirmMultiple","Are you sure you want to remove these images from the layer?");    String confirmStringSolo=i18n.get(ImageTileLayer.class,"removeConfirmSolo","Are you sure you want to remove this image from the layer?");    String confirmTitleString=i18n.get(ImageTileLayer.class,"removeConfirmTitle","Remove Images?");    int answer=JOptionPane.showConfirmDialog(this,(selectedTiles.length == 1 ? confirmStringSolo : confirmStringMulti),confirmTitleString,JOptionPane.YES_NO_OPTION);    if (answer == JOptionPane.YES_OPTION) {      OMGraphicList list=getList();      if (list != null) {        for (int i=0; i < selectedTiles.length; i++) {          ImageTile selectedTile=selectedTiles[i];          list.remove(selectedTile);          ((DefaultListModel)getListModel()).removeElement(selectedTile);        }        if (resultsList != null) {          resultsList.repaint();        }        repaint();      }    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static byte[] encodeArray(final byte[] a,final int length){  return encodeArray(a,a,0,length);}  }
class C{  public boolean containsKey(Object[] key){  return (key == null ? false : dataMap.containsKey(Arrays.asList(key)));}  }
class C{  public static long composeSegment(@IntRange(from=MIN_SEGMENT,to=MAX_SEGMENT) int segment,long wrappedId){  if (segment < MIN_SEGMENT || segment > MAX_SEGMENT) {    throw new IllegalArgumentException("Segment value is out of range. (segment = " + segment + ")");  }  return (((long)segment) << BIT_OFFSET_SEGMENT) | (wrappedId & (BIT_MASK_RESERVED_SIGN_FLAG | BIT_MASK_GROUP_ID | BIT_MASK_CHILD_ID));}  }
class C{  public DataTable createPairwiseDataTable(){  return new DataTablePairwiseMatrixExtractionAdapter(this,this.rowNames,this.columnNames,new String[]{firstAttributeName,secondAttributeName,name});}  }
class C{  public static void logExceptionRetrieveArchive(final Logger logger,final ArchiveDescription archive,final Exception e){  logger.logException(Level.SEVERE,"Exception while accessing archive " + archive.toString(),e);}  }
class C{  public Boolean isAcceptRouterAdvert(){  return acceptRouterAdvert;}  }
class C{  public ProfileExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void store32(int addr,int value){  store8(addr + 3,value >> 24);  store8(addr + 2,value >> 16);  store8(addr + 1,value >> 8);  store8(addr + 0,value);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int multipleGeneVectorCrossover(final int min,final int max,final int start,final int subpopulation,final Individual[] inds,final EvolutionState state,final int thread){  if (!(inds[0] instanceof GeneVectorIndividual))   state.output.fatal("Trying to produce gene vector individuals when you can't!");  if (sources.length <= 2)   state.output.error("Only two parents specified!");  int n=typicalIndsProduced();  if (n < min)   n=min;  if (n > max)   n=max;  for (int i=0; i < parents.length; i++) {    sources[i].produce(1,1,i,subpopulation,parents,state,thread);    if (!(sources[i] instanceof BreedingPipeline))     parents[i]=(GeneVectorIndividual)(parents[i].clone());  }  VectorSpecies species=(VectorSpecies)inds[0].species;  for (int i=0; i < parents[0].genomeLength(); i++) {    if (state.random[thread].nextBoolean(species.crossoverProbability)) {      for (int j=parents.length - 1; j > 0; j--) {        int swapIndex=state.random[thread].nextInt(j);        Gene temp=((GeneVectorIndividual)parents[j]).genome[i];        ((GeneVectorIndividual)parents[j]).genome[i]=((GeneVectorIndividual)parents[swapIndex]).genome[i];        ((GeneVectorIndividual)parents[swapIndex]).genome[i]=temp;      }    }  }  for (int i=0, q=start; i < parents.length; i++, q++) {    parents[i].evaluated=false;    if (q < inds.length) {      inds[q]=(GeneVectorIndividual)parents[i];    }  }  return n;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  EventData(){}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public SolrConfig() throws ParserConfigurationException, IOException, SAXException {  this((SolrResourceLoader)null,DEFAULT_CONF_FILE,null);}  }
class C{  public HTMLWriter(Writer out) throws IOException {  this(out,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">");}  }
class C{  static int binaryGcd(int a,int b){  if (b == 0)   return a;  if (a == 0)   return b;  int aZeros=Integer.numberOfTrailingZeros(a);  int bZeros=Integer.numberOfTrailingZeros(b);  a>>>=aZeros;  b>>>=bZeros;  int t=(aZeros < bZeros ? aZeros : bZeros);  while (a != b) {    if ((a + 0x80000000) > (b + 0x80000000)) {      a-=b;      a>>>=Integer.numberOfTrailingZeros(a);    } else {      b-=a;      b>>>=Integer.numberOfTrailingZeros(b);    }  }  return a << t;}  }
class C{  public static final boolean isHexCharacter(char ch){  return (ch <= 'f') && (dataTable[ch] & HEX_CHARACTER_MASK) > 0;}  }
class C{  public static Date parseStandardDate(String date){  SimpleDateFormat formatter=new SimpleDateFormat("yyyyMMdd",Locale.getDefault());  formatter.setLenient(false);  try {    return formatter.parse(date);  } catch (  ParseException e) {    e.printStackTrace();    return new Date();  }}  }
class C{  public void synced(int tenant,long time_nanos){  finished(Operation.SYNC,tenant,0,time_nanos);}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  @Override public void update(ReadOnlyTimer timer){  if (initializingCount > 0) {    viewpointNode.changed.set(true);    initializingCount--;  }  if (viewpointNode.changed.get()) {    for (int i=0; i < viewDependentList.size(); ++i) {      viewDependentList.get(i).update(viewpointNode.getCamera());    }  }}  }
class C{  public void testCap1Submit(){  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>(basicExecutor,1);  TestSubscriber s1=new TestSubscriber();  TestSubscriber s2=new TestSubscriber();  p.subscribe(s1);  p.subscribe(s2);  for (int i=1; i <= 20; ++i) {    assertTrue(p.estimateMinimumDemand() <= 1);    assertTrue(p.submit(i) >= 0);  }  p.close();  s2.awaitComplete();  s1.awaitComplete();  assertEquals(20,s2.nexts);  assertEquals(1,s2.completes);  assertEquals(20,s1.nexts);  assertEquals(1,s1.completes);}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  public static <T>T splitEachLine(InputStream stream,Pattern pattern,String charset,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return splitEachLine(new BufferedReader(new InputStreamReader(stream,charset)),pattern,closure);}  }
class C{  private void streamBlocks(){  Set<Key> previousChunks=new HashSet<>(knownChunks);  ArrayList<Key> newChunks=new ArrayList<>();  int centralX=location.getBlockX() >> 4;  int centralZ=location.getBlockZ() >> 4;  int radius=Math.min(server.getViewDistance(),1 + settings.getViewDistance());  for (int x=centralX - radius; x <= centralX + radius; x++) {    for (int z=centralZ - radius; z <= centralZ + radius; z++) {      Key key=new Key(x,z);      if (knownChunks.contains(key)) {        previousChunks.remove(key);      } else {        newChunks.add(key);      }    }  }  if (newChunks.isEmpty() && previousChunks.isEmpty()) {    return;  }  Collections.sort(newChunks,null);  for (  Key key : newChunks) {    world.getChunkManager().forcePopulation(key.getX(),key.getZ());    knownChunks.add(key);    chunkLock.acquire(key);  }  boolean skylight=world.getEnvironment() == Environment.NORMAL;  for (  Key key : newChunks) {    GlowChunk chunk=world.getChunkAt(key.getX(),key.getZ());    session.send(chunk.toMessage(skylight));  }  for (  Key key : newChunks) {    GlowChunk chunk=world.getChunkAt(key.getX(),key.getZ());    for (    TileEntity entity : chunk.getRawTileEntities()) {      entity.update(this);    }  }  for (  Key key : previousChunks) {    session.send(new UnloadChunkMessage(key.getX(),key.getZ()));    knownChunks.remove(key);    chunkLock.release(key);  }  previousChunks.clear();}  }
class C{  protected AbstractGraphicsNode(){}  }
class C{  public long sum(){  long sum=0L;  for (  AtomicLong value : map.values()) {    sum=sum + value.get();  }  return sum;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void validateSendEvent(){  if (!coordinatorClientExt.isControlNode()) {    throw APIException.badRequests.eventsNotAllowedOnNonControlNode();  }  if (!isConnectEMCConfigured()) {    throw APIException.badRequests.connectEMCNotConfigured();  }}  }
class C{  public static Object validateAndEvaluate(String viewName,StatementContext statementContext,ExprNode expression) throws ViewParameterException {  return validateAndEvaluateExpr(viewName,statementContext,expression,new StreamTypeServiceImpl(statementContext.getEngineURI(),false),0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void resolveColumns(){  if (_columnMask != null && _columnMask.length == _columnCount) {    int newColumnCount=0;    for (int i=0; i < _columnMask.length; i++) {      if (_columnMask[i] == Boolean.TRUE) {        newColumnCount++;      }    }    ArrayList<List<Object>> records=null;    if (_records != null) {      records=new ArrayList<List<Object>>(_rowCount);    }    int[] lengths=new int[newColumnCount];    byte[] decimalCounts=new byte[newColumnCount];    byte[] types=new byte[newColumnCount];    String[] names=new String[newColumnCount];    int newIndex=0;    for (int i=0; i < _columnMask.length; i++) {      if (_columnMask[i] == Boolean.TRUE) {        lengths[newIndex]=_lengths[i];        decimalCounts[newIndex]=_decimalCounts[i];        types[newIndex]=_types[i];        names[newIndex]=_names[i];        if (records != null) {          records.add(_records.get(i));        }        newIndex++;      }    }    _lengths=lengths;    _decimalCounts=decimalCounts;    _types=types;    _names=names;    _columnCount=newColumnCount;    if (records != null) {      _records=records;    }  }}  }
class C{  private AtomicInteger state(){  return states[THREAD_IDX.get() % states.length];}  }
class C{  public Cloudlet(final int cloudletId,final long cloudletLength,final int pesNumber,final long cloudletFileSize,final long cloudletOutputSize,final UtilizationModel utilizationModelCpu,final UtilizationModel utilizationModelRam,final UtilizationModel utilizationModelBw,final boolean record){  userId=-1;  status=CREATED;  this.cloudletId=cloudletId;  numberOfPes=pesNumber;  execStartTime=0.0;  finishTime=-1.0;  classType=0;  netToS=0;  this.cloudletLength=Math.max(1,cloudletLength);  this.cloudletFileSize=Math.max(1,cloudletFileSize);  this.cloudletOutputSize=Math.max(1,cloudletOutputSize);  resList=new ArrayList<Resource>(2);  index=-1;  this.record=record;  vmId=-1;  accumulatedBwCost=0.0;  costPerBw=0.0;  requiredFiles=new LinkedList<String>();  setUtilizationModelCpu(utilizationModelCpu);  setUtilizationModelRam(utilizationModelRam);  setUtilizationModelBw(utilizationModelBw);}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  public void testFlipBitNegativeOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=191;  byte rBytes[]={-1,127,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public AccountCreator(final String username,final String password,final String email){  this.username=username.trim();  this.password=password.trim();  this.email=email.trim();}  }
class C{  public StrBuilder appendln(float value){  return append(value).appendNewLine();}  }
class C{  @Override public int size(){  return _map.size();}  }
class C{  public Classifier[][] classifiers(){  return m_Classifiers.toArray(new Classifier[0][0]);}  }
class C{  private void testStdDev(String testName,Sparsity sparsity,DataType dataType,ExecType platform){  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsityVal;switch (sparsity) {case EMPTY:sparsityVal=0;break;case SPARSE:sparsityVal=sparsitySparse;break;case DENSE:default :sparsityVal=sparsityDense;}int r;int c;switch (dataType) {case ROWVECTOR:r=1;c=cols;break;case COLUMNVECTOR:r=rows;c=1;break;case MATRIX:default :r=rows;c=cols;}double[][] X=getRandomMatrix(r,c,-1,1,sparsityVal,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");}  finally {rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  public void addStateValueAsBoolean(StateObject context,String name,boolean booleanValue){  if (context != null && !containsElement(context.elem)) {    String message=Logging.getMessage("RestorableSupport.InvalidStateObject");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (name == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  addStateValueAsString(context,name,Boolean.toString(booleanValue));}  }
class C{  public static File createTempFile() throws IOException {  return File.createTempFile(PREFIX,SUFFIX);}  }
class C{  public void curved(double cx,double cy,double ax,double ay){  double[] points=new double[]{pen.x,pen.y,cx,cy,ax,ay};  int[] deltas=addCurveSubdivideAware(points);  pen.x=ax;  pen.y=ay;  dxSumTwips+=(deltas[2] + deltas[0]);  dySumTwips+=(deltas[3] + deltas[1]);}  }
class C{  public static void clear(){  instance=null;}  }
class C{  public ZoomOutTool(){  this(CursorTool.ANY_BUTTON);}  }
class C{  @Factory public static Matcher<Class<?>> isUtilityClass(){  return new IsUtilityClassMatcher();}  }
class C{  public TransferEntropyCalculatorMultiVariateKraskov() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(COND_MI_CALCULATOR_KRASKOV1);  kraskovAlgorithmNumber=1;  props=new Hashtable<String,String>();}  }
class C{  private void addCountsSimRealPerHourGraphs(final FolderType folder,final int timestep,final TimeSpanType timespan){  StringBuffer filenameBoard, filenameAlight;  ScreenOverlayType overlayBoard, overlayAlight;  try {    filenameBoard=new StringBuffer("board-" + SIMREALGRAPHNAME + Integer.toString(timestep)+ PNG);    filenameAlight=new StringBuffer("alight-" + SIMREALGRAPHNAME + Integer.toString(timestep)+ PNG);    PtCountsSimRealPerHourGraph graphBoard=new PtCountsSimRealPerHourGraph(this.boardCountComparisonFilter.getCountsForHour(null),this.iter,filenameBoard.toString(),PtCountsType.Boarding);    PtCountsSimRealPerHourGraph graphAlight=new PtCountsSimRealPerHourGraph(this.alightCountComparisonFilter.getCountsForHour(null),this.iter,filenameAlight.toString(),PtCountsType.Alighting);    graphBoard.createChart(timestep);    graphAlight.createChart(timestep);    this.writeChartToKmz(filenameBoard.toString(),graphBoard.getChart());    this.writeChartToKmz(filenameAlight.toString(),graphAlight.getChart());    overlayBoard=kmlObjectFactory.createScreenOverlayType();    LinkType iconBoard=kmlObjectFactory.createLinkType();    iconBoard.setHref("./" + filenameBoard.toString());    overlayBoard.setIcon(iconBoard);    overlayBoard.setName(graphBoard.getChartTitle());    Vec2Type overlayXYBoard=kmlObjectFactory.createVec2Type();    overlayXYBoard.setX(1.0);    overlayXYBoard.setY(1.0);    overlayXYBoard.setXunits(UnitsEnumType.FRACTION);    overlayXYBoard.setYunits(UnitsEnumType.FRACTION);    overlayBoard.setOverlayXY(overlayXYBoard);    Vec2Type screenXYBoard=kmlObjectFactory.createVec2Type();    screenXYBoard.setX(0.98);    screenXYBoard.setY(0.98);    screenXYBoard.setXunits(UnitsEnumType.FRACTION);    screenXYBoard.setYunits(UnitsEnumType.FRACTION);    overlayBoard.setScreenXY(screenXYBoard);    overlayBoard.setAbstractTimePrimitiveGroup(kmlObjectFactory.createTimeSpan(timespan));    folder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(overlayBoard));    overlayAlight=kmlObjectFactory.createScreenOverlayType();    LinkType iconAlight=kmlObjectFactory.createLinkType();    iconAlight.setHref("./" + filenameAlight.toString());    overlayAlight.setIcon(iconAlight);    overlayAlight.setName(graphAlight.getChartTitle());    Vec2Type overlayXYAlight=kmlObjectFactory.createVec2Type();    overlayXYAlight.setX(1.0);    overlayXYAlight.setY(0.6);    overlayXYAlight.setXunits(UnitsEnumType.FRACTION);    overlayXYAlight.setYunits(UnitsEnumType.FRACTION);    overlayAlight.setOverlayXY(overlayXYAlight);    Vec2Type screenXYAlight=kmlObjectFactory.createVec2Type();    screenXYAlight.setX(0.98);    screenXYAlight.setY(0.58);    screenXYAlight.setXunits(UnitsEnumType.FRACTION);    screenXYAlight.setYunits(UnitsEnumType.FRACTION);    overlayAlight.setScreenXY(screenXYAlight);    overlayAlight.setAbstractTimePrimitiveGroup(kmlObjectFactory.createTimeSpan(timespan));    folder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(overlayAlight));  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void addConnectionCallback(OneSheeldConnectionCallback connectionCallback){  if (connectionCallback != null && !connectionCallbacks.contains(connectionCallback))   connectionCallbacks.add(connectionCallback);}  }
class C{  void commitEdit() throws ParseException {  JFormattedTextField ftf=getFormattedTextField();  if (ftf != null) {    ftf.commitEdit();  }}  }
class C{  protected void loadValue(String sValue){  try {    value=Float.valueOf(sValue.trim()).floatValue();  } catch (  NumberFormatException nfe) {    revertToDefault();  }}  }
class C{  public WrappedInputStream(InputStream in,boolean deterministic){  this.in=in;  this.deterministic=deterministic;}  }
class C{  @Override public String visit(final ASTString node,final Object data) throws VisitorException {  return node.getValue();}  }
class C{  private void initializeProximityBrowserNonNative(){  m_disableLayoutingInternally=true;  final boolean previousSetting=m_settings.getLayoutSettings().getAutomaticLayouting();  m_settings.getLayoutSettings().setAutomaticLayouting(false);  final Collection<NaviNode> nodes=GraphHelpers.getVisibleNodes(ViewableGraph.wrap(this));  showNodes(nodes,false);  m_settings.getLayoutSettings().setAutomaticLayouting(previousSetting);  m_disableLayoutingInternally=false;  if (m_rawView.getConfiguration().getId() == -1) {    doLayout();  }}  }
class C{  public NecronomiconEnchantmentRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,boolean requiresSacrifice,EnchantmentData enchantment,Object... offerings){  super(unlocalizedName,bookType,dimension,requiredEnergy,requiresSacrifice,offerings);  this.enchantment=enchantment;}  }
class C{  static public boolean isSyncEnabled(Context context){  Cursor cursor=null;  try {    cursor=context.getContentResolver().query(CONTENT_URI,new String[]{VALUE},KEY + "=?",new String[]{KEY_SYNC_ENABLED},null);    if (cursor == null || !cursor.moveToFirst()) {      return false;    }    return cursor.getInt(0) != 0;  }  finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public void removeAllZeros(){  Iterator<Map.Entry<K,AtomicLong>> entryIterator=map.entrySet().iterator();  while (entryIterator.hasNext()) {    Map.Entry<K,AtomicLong> entry=entryIterator.next();    AtomicLong atomic=entry.getValue();    if (atomic != null && atomic.get() == 0L) {      entryIterator.remove();    }  }}  }
class C{  public CustomizedOsmNetworkReader(final Network network,final CoordinateTransformation transformation,final boolean useHighwayDefaults){  log.warn("This is experimental customized version of the org.matsim.core.utils.io.OsmNetworkReader and should only be used by persons how now what they do. " + "The additional tags and the interpretation of the tags may change without notice, so don't rely on the status quo!" + "If you not exactly know what are you doing here, leave it! [gl nov' 2012]");  this.network=network;  this.transform=transformation;  if (useHighwayDefaults) {    log.info("Falling back to default values.");    this.setHighwayDefaults(1,"motorway",2,120.0 / 3.6,1.0,2000,true);    this.setHighwayDefaults(1,"motorway_link",1,80.0 / 3.6,1.0,1500,true);    this.setHighwayDefaults(2,"trunk",1,80.0 / 3.6,1.0,2000);    this.setHighwayDefaults(2,"trunk_link",1,50.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary",1,80.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary_link",1,60.0 / 3.6,1.0,1500);    this.setHighwayDefaults(4,"secondary",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults(5,"tertiary",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"minor",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"unclassified",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"residential",1,30.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"living_street",1,15.0 / 3.6,1.0,300);  }}  }
class C{  private void action_loadBOM(){  m_frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  reload=false;  int M_Product_ID=getM_Product_ID();  if (M_Product_ID == 0)   return;  MProduct M_Product=MProduct.get(getCtx(),M_Product_ID);  treeInfo.setText("    Current Selection: " + M_Product.getValue());  Vector<Object> line=new Vector<Object>(17);  line.add(new Boolean(false));  line.add(new Boolean(M_Product.isActive()));  line.add(new Integer(0));  KeyNamePair pp=new KeyNamePair(M_Product.getM_Product_ID(),M_Product.getValue().concat("_").concat(M_Product.getName()));  line.add(pp);  MUOM u=new MUOM(M_Product.getCtx(),M_Product.getC_UOM_ID(),M_Product.get_TrxName());  KeyNamePair uom=new KeyNamePair(M_Product.getC_UOM_ID(),u.getUOMSymbol());  line.add(uom);  line.add(Env.ONE);  DefaultMutableTreeNode parent=new DefaultMutableTreeNode(line);  m_root=(DefaultMutableTreeNode)parent.getRoot();  dataBOM.clear();  if (isImplosion()) {    for (    MProductBOM bomline : getParentBOMs(M_Product_ID)) {      addParent(bomline,parent);    }    m_tree=new myJTree(parent);    m_tree.addMouseListener(mouseListener);  } else {    for (    MProductBOM bom : getChildBOMs(M_Product_ID,true)) {      addChild(bom,parent);    }    m_tree=new myJTree(parent);    m_tree.addMouseListener(mouseListener);  }  m_tree.addTreeSelectionListener(this);  treePane.getViewport().add(m_tree,null);  loadTableBOM();  dataPane.getViewport().add(tableBOM,null);  splitPane.setDividerLocation(DIVIDER_LOCATION);  m_frame.setCursor(Cursor.getDefaultCursor());}  }
class C{  @NotNull public List<Object> asList(){  return values;}  }
class C{  static AsynchronousFileChannel newAsynchronousFileChannel(UnixPath path,Set<? extends OpenOption> options,int mode,ThreadPool pool) throws UnixException {  Flags flags=Flags.toFlags(options);  if (!flags.read && !flags.write) {    flags.read=true;  }  if (flags.append)   throw new UnsupportedOperationException("APPEND not allowed");  FileDescriptor fdObj=open(-1,path,null,flags,mode);  return SimpleAsynchronousFileChannelImpl.open(fdObj,flags.read,flags.write,pool);}  }
class C{  private static BinlogEventV4 formBinLogQueryEvent(String dbName){  BinlogEventV4HeaderImpl queryEventHeader=new BinlogEventV4HeaderImpl();  queryEventHeader.setTimestamp(System.currentTimeMillis());  queryEventHeader.setEventType(MySQLConstants.QUERY_EVENT);  queryEventHeader.setServerId(1);  QueryEvent queryEvent=new QueryEvent(queryEventHeader);  queryEvent.setDatabaseNameLength(dbName.length());  queryEvent.setDatabaseName(StringColumn.valueOf(dbName.getBytes()));  queryEvent.setSql(StringColumn.valueOf("BEGIN".getBytes()));  return queryEvent;}  }
class C{  private BigDecimal findLatestPublishedPublicVersion(Resource resource){  if (resource != null) {    List<VersionHistory> history=resource.getVersionHistory();    if (!history.isEmpty()) {      VersionHistory latestVersion=history.get(0);      if (!latestVersion.getPublicationStatus().equals(PublicationStatus.DELETED) && !latestVersion.getPublicationStatus().equals(PublicationStatus.PRIVATE)) {        return new BigDecimal(latestVersion.getVersion());      }    } else     if (resource.isRegistered()) {      return resource.getEmlVersion();    }  }  return null;}  }
class C{  public ValidatorException(FacesMessage message,Throwable cause){  super(message.getSummary(),cause);  this.message=message;}  }
class C{  public static Validator<String> allowedChars(char[] chars,BiFunction<String,StringAllowedCharsValidator,? extends IllegalArgumentException> exception){  return new ValidatorEntry<>(StringAllowedCharsValidator.create(chars),exception);}  }
class C{  protected void doCreateLineSymbols(FeatureMap featureMap,Collection<VPFSymbol> outCollection){  for (  Map.Entry<VPFSymbolKey,CombinedFeature> entry : featureMap.entrySet()) {    CombinedFeature feature=entry.getValue();    for (    VPFSymbolAttributes attr : this.getSymbolAttributes(feature,entry.getKey())) {switch (attr.getFeatureType()) {case LINE:        this.addLineSymbol(feature,attr,outCollection);      break;case LABEL:    this.addTextLabel(feature,attr,outCollection);  break;}}}}  }
class C{  public static void schedule(Runnable runnable){  Bukkit.getScheduler().scheduleSyncDelayedTask(Computers.getInstance(),runnable);}  }
class C{  @Override public boolean printingEnabled(OptOptions options,boolean before){  return false;}  }
class C{  public static Entity makeScreenBounds(double thickness){  double w=FXGL.getSettings().getWidth();  double h=FXGL.getSettings().getHeight();  Entity bounds=new Entity();  bounds.addComponent(new PositionComponent(0,0));  bounds.addComponent(new RotationComponent(0));  bounds.addComponent(new BoundingBoxComponent(new HitBox("LEFT",new Point2D(-thickness,0),BoundingShape.box(thickness,h)),new HitBox("RIGHT",new Point2D(w,0),BoundingShape.box(thickness,h)),new HitBox("TOP",new Point2D(0,-thickness),BoundingShape.box(w,thickness)),new HitBox("BOT",new Point2D(0,h),BoundingShape.box(w,thickness))));  bounds.addComponent(new PhysicsComponent());  return bounds;}  }
class C{  private void removeListeners(){  m_bookmarkManager.removeListener(m_listener);  for (  final CCodeBookmark bookmark : m_bookmarkManager) {    bookmark.removeListener(m_listener);  }}  }
class C{  public static String stripHTMLEntities(String text,char translateNbspTo){  if (text == null) {    return null;  }  if (text.indexOf('&') < 0) {    return text;  }  int originalTextLength=text.length();  StringBuilder sb=new StringBuilder(originalTextLength);  for (int i=0; i < originalTextLength; i++) {    int whereAmp=text.indexOf('&',i);    if (whereAmp < 0) {      sb.append(text.substring(i));      break;    } else {      sb.append(text.substring(i,whereAmp));      i=whereAmp;      String possEntity=text.substring(i + 1,Math.min(i + LONGEST_ENTITY,text.length()));      char t=possBareHTMLEntityWithSemicolonToChar(possEntity,translateNbspTo);      if (t != 0) {        sb.append(t);        int whereSemi=possEntity.indexOf(";",SHORTEST_ENTITY - 2);        i+=whereSemi + 1;      } else {        sb.append('&');      }    }  }  return (sb.length() == originalTextLength) ? text : sb.toString();}  }
class C{  public void destroyReaderModeControl(){  if (mControl != null) {    ((ViewGroup)mControl.getParent()).removeView(mControl);    mControl=null;    if (mResourceLoader != null) {      mResourceLoader.unregisterResource(R.id.reader_mode_view);    }  }}  }
class C{  public void addScrAdress(ScrAddress address,List doms){  if (address != null && doms != null) {    addresses.add(address);    dom.put(address.getId(),doms);  }}  }
class C{  public void writeChunk(OutputStream os){  writeChunkHeader(os);  if (len > 0) {    if (data == null)     throw new PngjOutputException("cannot write chunk, raw chunk data is null [" + id + "]");    PngHelperInternal.writeBytes(os,data,0,len);  }  computeCrcForWriting();  writeChunkCrc(os);}  }
class C{  public static File createTempFile(byte[] fileContents,String namePrefix,String extension) throws IOException {  Preconditions.checkNotNull(fileContents,"file contents missing");  File tempFile=File.createTempFile(namePrefix,extension);  try (FileOutputStream fos=new FileOutputStream(tempFile)){    fos.write(fileContents);  }   return tempFile;}  }
class C{  public String[] validBaudRates(){  log.debug("validBaudRates should not have been invoked");  return null;}  }
class C{  public static boolean isInterface(int mod){  return (mod & INTERFACE) != 0;}  }
class C{  public Vector2f interpolate(Vector2f beginVec,Vector2f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y;  return this;}  }
class C{  public Grammar(String fileName,String grammarText,ANTLRToolListener listener) throws org.antlr.runtime.RecognitionException {  this(fileName,grammarText,null,listener);}  }
class C{  public static String cancelledWatermarkAbsolutePath(){  final HttpServletRequest request=ServletActionContext.getRequest();  final String url=WebUtils.extractRequestDomainURL(request,false);  final String imagePath=url.concat(ReportConstants.IMAGE_CONTEXT_PATH).concat("/resources/global/images/cancelled_watermark.png");  return imagePath;}  }
class C{  public DoubleArrayListParameter(OptionID optionID){  super(optionID);}  }
class C{  public static Object readField(final Object target,final String fieldName) throws IllegalAccessException {  return FieldUtils.readField(target,fieldName,false);}  }
class C{  public static boolean hasKitKatOrNewer(){  return hasSdkOrNewer(VERSION_CODE_KITKAT);}  }
class C{  public NarClassLoader(final File narWorkingDirectory) throws ClassNotFoundException, IOException {  super(new URL[0]);  this.narWorkingDirectory=narWorkingDirectory;  updateClasspath(narWorkingDirectory);}  }
class C{  public static void dumpCountsToStream(PrintStream stream){  if (data == null)   return;  for (int i=0; i < data.length; i++) {    if (data[i] != null) {      NormalMethod m=(NormalMethod)MemberReference.getMethodRef(i).peekResolvedMethod();      if (m != null) {        new BranchProfiles(m,data[i]).print(stream);      }    }  }}  }
class C{  public XBooleanStatic(boolean b){  super(b);  m_val=b;}  }
class C{  public MysqlDataTruncation(String message,int index,boolean parameter,boolean read,int dataSize,int transferSize,int vendorErrorCode){  super(index,parameter,read,dataSize,transferSize);  this.message=message;  this.vendorErrorCode=vendorErrorCode;}  }
class C{  public static void closeInputStream(InputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing InputStream." + e);    }  }}  }
class C{  public NumericEntityEscaper(){  this(0,Integer.MAX_VALUE,true);}  }
class C{  @Override public boolean onSearchRequested(){  if (mMenuMode.getSelectedItemPosition() == MENUMODE_DISABLED) {    return false;  }  final String queryPrefill=mQueryPrefill.getText().toString();  Bundle appDataBundle=null;  final String queryAppDataString=mQueryAppData.getText().toString();  if (queryAppDataString != null) {    appDataBundle=new Bundle();    appDataBundle.putString("demo_key",queryAppDataString);  }  startSearch(queryPrefill,false,appDataBundle,false);  return true;}  }
class C{  public static Test suite(){  TestSuite suite=new TestSuite("TdaSuite");  suite.addTest(com.pironet.tda.DumpParserFactoryTest.suite());  suite.addTest(com.pironet.tda.SunJDKParserTest.suite());  return suite;}  }
class C{  public void select(int index){  checkWidget();  if (index == -1) {    this.table.deselectAll();    this.text.setText("");    this.setBackground(null);    return;  }  if (0 <= index && index < this.table.getItemCount()) {    if (index != getSelectionIndex()) {      TableItem item=this.table.getItem(index);      if (item.getImage() != null) {        this.imageLabel.setImage(item.getImage());      }      if (item.getBackground() != null) {        this.setBackground(item.getBackground());      }      this.text.setText(item.getText());      this.table.select(index);      this.table.showSelection();    }  }}  }
class C{  public static boolean asBoolean(char[] array){  return array.length > 0;}  }
class C{  public final boolean isCaretVisible(){  return (!caretBlinks || blink) && caretVisible;}  }
class C{  public MRRecord(Name name,int dclass,long ttl,Name newName){  super(name,Type.MR,dclass,ttl,newName,"new name");}  }
class C{  void retry(){  if (mRetryCount < HttpsProvisioningUtils.RETRY_MAX_COUNT) {    mRetryCount++;    int retryDelay=HttpsProvisioningUtils.RETRY_BASE_TIMEOUT + 2 * (mRetryCount - 1) * HttpsProvisioningUtils.RETRY_BASE_TIMEOUT;    HttpsProvisioningService.startRetryAlarm(mCtx,mRetryIntent,retryDelay);    if (sLogger.isActivated()) {      sLogger.debug("Retry provisioning count: " + mRetryCount);    }  } else {    if (sLogger.isActivated()) {      sLogger.debug("No more retry for provisioning");    }  }}  }
class C{  public boolean pokerTest(byte[] bitstring) throws RandomDataGenerationException {  if (bitstring.length != ranges.getBitstreamLength())   throw new RandomDataGenerationException("Invalid bitstring length");  int[] numSet=new int[16];  for (int i=0; i < bitstring.length; i++) {    int res=bitstring[i] & 0xF0;    numSet[res >>> 4]++;    numSet[bitstring[i] & 0xF]++;  }  int sum=0;  for (int i=0; i < numSet.length; i++) {    sum+=(numSet[i] * numSet[i]);  }  double Y=0.0032 * sum - 5000;  if ((Y > ranges.getPokerBorders()[0]) && (Y < ranges.getPokerBorders()[1]))   return true;  return false;}  }
class C{  public static int[] concatAllInt(int[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  int[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  public HistoryUpdateResponse HistoryUpdate(RequestHeader RequestHeader,ExtensionObject... HistoryUpdateDetails) throws ServiceFaultException, ServiceResultException {  HistoryUpdateRequest req=new HistoryUpdateRequest(RequestHeader,HistoryUpdateDetails);  return (HistoryUpdateResponse)channel.serviceRequest(req);}  }
class C{  public static boolean contains(final int[] array,final int valueToFind){  return ArrayUtils.indexOf(array,valueToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  public long deleteHead(String id,int version){  if (INFO)   log.info("id=" + id + ", version="+ version);  final IKeyBuilder keyBuilder=getFileDataIndex().getIndexMetadata().getKeyBuilder();  final byte[] fromKey=keyBuilder.reset().appendText(id,true,false).append(version).getKey();  final byte[] toKey=keyBuilder.reset().appendText(id,true,false).append(version + 1).getKey();  final ITupleIterator itr=getFileDataIndex().rangeIterator(fromKey,toKey,1,IRangeQuery.KEYS | IRangeQuery.REMOVEALL,null);  if (!itr.hasNext()) {    log.warn("Nothing to delete: id=" + id + ", version="+ version);    return -1L;  }  final long block=new BlockIdentifierIterator(id,version,itr).next();  if (INFO)   log.info("id=" + id + ", version="+ version+ " : deleted block="+ block);  return block;}  }
class C{  public static boolean isInterface(int mod){  return (mod & INTERFACE) != 0;}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  private SpanQuery pt(String s,PayloadFunction fn){  return new PayloadScoreQuery(new SpanTermQuery(new Term(FIELD,s)),fn,random().nextBoolean());}  }
class C{  public WebImage(Element e,int w,int h,String src){  imgElement=e;  width=w;  height=h;  srcUrl=src;  if (srcUrl == null) {    srcUrl="";  }}  }
class C{  public void addSimpleMethod(SimpleMethod method){  this.simpleMethodNameSet.add(method.getLocationAndName());}  }
class C{  public void addHeader(Header header){  if (header == null) {    return;  }  headers.add(header);}  }
class C{  public void dispose(){  mAudioOutput.dispose();  mAudioOutput=null;}  }
class C{  public void fireJavascriptEvent(String action){  sendEventMessage(action);}  }
class C{  public void jump(int index){  if (index > pos) {    throw new IllegalArgumentException("cannot jump past " + "end of data");  }  pos=index;}  }
class C{  public List<V> replace(K key,Collection<V> values){  List<V> replaced=removeAll(key);  putAll(key,values);  return replaced;}  }
class C{  public PurityResult scan(Iterable<? extends Tree> nodes,PurityResult p){  PurityResult r=p;  if (nodes != null) {    for (    Tree node : nodes) {      r=scan(node,r);    }  }  return r;}  }
class C{  public static void compose(String session,String config,String[] hashtags){  final Activity currentActivity=UnityPlayer.currentActivity;  final CardConfig cardConfig=new Gson().fromJson(config,CardConfig.class);  final Card card=new Card.AppCardBuilder(currentActivity).imageUri(Uri.parse(cardConfig.imageUri)).googlePlayId(cardConfig.appGooglePlayId).iPadId(cardConfig.appIPadId).iPhoneId(cardConfig.appIPhoneId).build();  final Intent intent=new ComposerActivity.Builder(currentActivity).session(TwitterSessionHelper.deserialize(session)).card(card).hashtags(hashtags).createIntent();  currentActivity.startActivity(intent);}  }
class C{  void reportError(String msg,Element e){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  public boolean isAlertEnabled(){  return mAlertOn;}  }
class C{  @Deprecated public URL toURL() throws MalformedURLException {  if (isInvalid()) {    throw new MalformedURLException("Invalid file path");  }  return new URL("file","",slashify(getAbsolutePath(),isDirectory()));}  }
class C{  public boolean isDeclared(int index){  if ((index < 0) || (index >= mLength)) {    throw new ArrayIndexOutOfBoundsException("");  }  return ((mItems[(index << 3) + 5]) != null);}  }
class C{  public OperationStateException(String message,Object[] params){  super(message,params);}  }
class C{  public void testORImplicit() throws Exception {  BooleanQuery.Builder expected=new BooleanQuery.Builder();  expected.add(new TermQuery(new Term("field","foo")),Occur.SHOULD);  expected.add(new TermQuery(new Term("field","bar")),Occur.SHOULD);  SimpleQueryParser parser=new SimpleQueryParser(new MockAnalyzer(random()),"field");  assertEquals(expected.build(),parser.parse("foo bar"));}  }
class C{  public boolean isValueSet(){  return valueSet;}  }
class C{  @SuppressWarnings("unchecked") public final <T extends Extension>boolean hasRepeatingExtension(Class<T> extensionClass){  List<T> ret=(List<T>)repeatingExtensionMap.get(extensionClass);  return ret != null && !ret.isEmpty();}  }
class C{  public Future<?> drainContinuously(){  return drainer.submit(new ContinuousDrain());}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  public synchronized void render(Graphics g){  if (getNeedToRegenerate() || pt == null || !isVisible())   return;  g=g.create();  g.setFont(getFont());  setGraphicsForEdge(g);  if (fm == null) {    fm=g.getFontMetrics();  }  Polygon currentPolyBounds=computeBounds(this.polyBounds);  this.polyBounds=currentPolyBounds;  Shape s=getShape();  if (isRenderable(s)) {    if (shouldRenderFill()) {      setGraphicsForFill(g);      fill(g,s);      if (textureMask != null && textureMask != fillPaint) {        setGraphicsColor(g,textureMask);        fill(g,s);      }    }    if (isMatted()) {      if (isSelected()) {        setGraphicsColor(g,getSelectPaint());      } else {        setGraphicsColor(g,getMattingPaint());      }      draw(g,s);    }  }  double rx=0.0;  double rw=0.0;  double woffset=0.0;  Double currentRenderRotationAngle=renderRotationAngle;  if (g instanceof Graphics2D && currentRenderRotationAngle != null) {    Rectangle rect=currentPolyBounds.getBounds();    rx=rect.getX();    rw=rect.getWidth();    woffset=0.0;switch (justify) {case JUSTIFY_LEFT:      break;case JUSTIFY_CENTER:    woffset=rw / 2;  break;case JUSTIFY_RIGHT:woffset=rw;}((Graphics2D)g).rotate(currentRenderRotationAngle,rx + woffset,pt.getY());}setGraphicsForEdge(g);int height;if (fmHeight == HEIGHT) {height=fm.getHeight();} else if (fmHeight == ASCENT_LEADING) {height=fm.getHeight() - fm.getDescent();} else if (fmHeight == ASCENT_DESCENT) {height=fm.getAscent() + fm.getDescent();} else {height=fm.getAscent();}int baselineLocation=(int)pt.getY();if (baseline == BASELINE_MIDDLE) {baselineLocation+=(fm.getAscent() - fm.getDescent()) / 2;} else if (baseline == BASELINE_TOP) {baselineLocation+=(fm.getAscent() - fm.getDescent());}switch (justify) {case JUSTIFY_LEFT:for (int i=0; i < parsedData.length; i++) {renderString(g,parsedData[i],pt.getX(),baselineLocation + (height * i));}break;case JUSTIFY_CENTER:computeStringWidths(fm);for (int i=0; i < parsedData.length; i++) {renderString(g,parsedData[i],pt.getX() - (widths[i] / 2),baselineLocation + (height * i));}break;case JUSTIFY_RIGHT:computeStringWidths(fm);for (int i=0; i < parsedData.length; i++) {renderString(g,parsedData[i],pt.getX() - widths[i],baselineLocation + (height * i));}break;}}  }
class C{  public static boolean hasRegisteredParts(){  return !partProviders.isEmpty();}  }
class C{  public void checkLoadExternalResource(){  if (se != null) {    throw se;  }}  }
class C{  public static String toString(short value){  return Integer.toString(value);}  }
class C{  public void clear(){  map.clear();}  }
class C{  public static double sum(double[] doubles){  double sum=0;  for (int i=0; i < doubles.length; i++) {    sum+=doubles[i];  }  return sum;}  }
class C{  public void testUnequalObjectsUnequal(){  String value1="12378246728727834290276457386374882976782849";  String value2="-5634562095872038262928728727834290276457386374882976782849";  BigInteger aNumber1=new BigInteger(value1);  BigInteger aNumber2=new BigInteger(value2);  int code1=aNumber1.hashCode();  int code2=aNumber2.hashCode();  if (!aNumber1.equals(aNumber2)) {    assertTrue("hash codes for unequal objects are equal",code1 != code2);  }}  }
