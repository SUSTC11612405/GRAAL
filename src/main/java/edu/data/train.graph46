class C{  public SearchSourceBuilder postFilter(QueryBuilder postFilter){  this.postQueryBuilder=postFilter;  return this;}  }
class C{  public static Number multiply(BigDecimal left,Double right){  return NumberMath.multiply(left,right);}  }
class C{  public static void printList(GeometricObject[] list){  System.out.print("Sorted elements: ");  for (  GeometricObject e : list) {    System.out.printf("%.2f ",e.getArea());  }  System.out.println();}  }
class C{  private Type enterClass(String s){  return reader.enterClass(names.fromString(s)).type;}  }
class C{  public void move(int position,long duration,@Nullable TimeInterpolator interpolator){  if (isAnimating || 0 > position || layoutSize < position)   return;  if (duration <= 0) {    isExpanded=position > closePosition;    setLayoutSize(position);    requestLayout();    notifyListeners();    return;  }  createExpandAnimator(getCurrentPosition(),position,duration,interpolator == null ? this.interpolator : interpolator).start();}  }
class C{  @Override public MemBufferHolder<BigDataPMemAllocator> resizeBuffer(MemBufferHolder<BigDataPMemAllocator> mholder,long size){  MemBufferHolder<BigDataPMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    int bufpos=mholder.get().position();    int buflimit=mholder.get().limit();    ByteBuffer buf=m_nvmasvc.resizeByteBuffer(m_nid,mholder.get(),size);    if (null == buf && m_activegc) {      forceGC();      buf=m_nvmasvc.resizeByteBuffer(m_nid,mholder.get(),size);    }    if (null != buf) {      mholder.clear();      mholder.destroy();      buf.position(bufpos <= size ? bufpos : 0);      buf.limit(buflimit <= size ? buflimit : (int)size);      ret=new MemBufferHolder<BigDataPMemAllocator>(this,buf);      if (ac) {        m_bufcollector.register(ret);      }    }  }  return ret;}  }
class C{  public int compareTo(VersionInfo other){  return m_version_ - other.m_version_;}  }
class C{  private void statInit(){  fieldValue.setWidth("100%");  fieldName.setWidth("100%");  labelValue.setValue(Msg.getMsg(Env.getCtx(),"Value"));  fieldValue.addEventListener(Events.ON_CHANGE,this);  fieldValue.setAttribute("zk_component_ID","Lookup_Criteria_fieldValue");  labelName.setValue(Msg.getMsg(Env.getCtx(),"Name"));  fieldName.addEventListener(Events.ON_CANCEL,this);  fieldName.setAttribute("zk_component_ID","Lookup_Criteria_fieldName");  fBPartner_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(I_A_Asset.Table_Name,I_A_Asset.COLUMNNAME_C_BPartner_ID),DisplayType.Search),Msg.translate(Env.getCtx(),"C_BPartner_ID"),"",false,false,true);  fBPartner_ID.addValueChangeListener(this);  fBPartner_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_fBPartner_ID");  fProduct_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(I_A_Asset.Table_Name,I_A_Asset.COLUMNNAME_M_Product_ID),DisplayType.Search),Msg.translate(Env.getCtx(),"M_Product_ID"),"",false,false,true);  fProduct_ID.addValueChangeListener(this);  fProduct_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_fProduct_ID");  Rows rows=new Rows();  Row row=new Row();  rows.appendChild(row);  row.appendChild(labelValue.rightAlign());  row.appendChild(fieldValue);  row.appendChild(fBPartner_ID.getLabel().rightAlign());  row.appendChild(fBPartner_ID.getComponent());  row=new Row();  rows.appendChild(row);  row.appendChild(labelName.rightAlign());  row.appendChild(fieldName);  row.appendChild(fProduct_ID.getLabel().rightAlign());  row.appendChild(fProduct_ID.getComponent());  p_criteriaGrid.appendChild(rows);  super.setSizes();}  }
class C{  public AbstractButton addAction(Action action){  return addAction(action,0,false);}  }
class C{  private void closeWriter(IndexWriter writer){  try {    writer.optimize();    writer.close();  } catch (  Exception e1) {    e1.printStackTrace();  }}  }
class C{  public Vec4 computeSurfaceNormalAtPoint(Vec4 point){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double eqSquared=this.equatorialRadius * this.equatorialRadius;  double polSquared=this.polarRadius * this.polarRadius;  double x=(point.x - this.center.x) / eqSquared;  double y=(point.y - this.center.y) / polSquared;  double z=(point.z - this.center.z) / eqSquared;  return new Vec4(x,y,z).normalize3();}  }
class C{  void rebindListenerServices(){  final int currentUser=ActivityManager.getCurrentUser();  String flat=Settings.Secure.getStringForUser(mContext.getContentResolver(),Settings.Secure.ENABLED_NOTIFICATION_LISTENERS,currentUser);  NotificationListenerInfo[] toRemove=new NotificationListenerInfo[mListeners.size()];  final ArrayList<ComponentName> toAdd;synchronized (mNotificationList) {    toRemove=mListeners.toArray(toRemove);    toAdd=new ArrayList<ComponentName>();    final HashSet<ComponentName> newEnabled=new HashSet<ComponentName>();    final HashSet<String> newPackages=new HashSet<String>();    if (flat != null) {      String[] components=flat.split(ENABLED_NOTIFICATION_LISTENERS_SEPARATOR);      for (int i=0; i < components.length; i++) {        final ComponentName component=ComponentName.unflattenFromString(components[i]);        if (component != null) {          newEnabled.add(component);          toAdd.add(component);          newPackages.add(component.getPackageName());        }      }      mEnabledListenersForCurrentUser=newEnabled;      mEnabledListenerPackageNames=newPackages;    }  }  for (  NotificationListenerInfo info : toRemove) {    final ComponentName component=info.component;    final int oldUser=info.userid;    Slog.v(TAG,"disabling notification listener for user " + oldUser + ": "+ component);    unregisterListenerService(component,info.userid);  }  final int N=toAdd.size();  for (int i=0; i < N; i++) {    final ComponentName component=toAdd.get(i);    Slog.v(TAG,"enabling notification listener for user " + currentUser + ": "+ component);    registerListenerService(component,currentUser);  }}  }
class C{  protected final void addConverter(String name,String converterId){  this.factories.put(name,new ConverterHandlerFactory(converterId));}  }
class C{  public boolean isData(){  return false;}  }
class C{  private String printLine(String[] in){  StringBuilder sb=new StringBuilder();  sb.append("[");  for (int i=0; i < in.length; i++) {    sb.append(in[i]);    if (i != in.length - 1) {      sb.append("; ");    }  }  sb.append("]");  return sb.toString();}  }
class C{  public static boolean equals(double firstDouble,double secondDouble,double epsilon){  if (firstDouble == secondDouble)   return true;  return Math.abs(firstDouble - secondDouble) < epsilon;}  }
class C{  protected void configureColumnControl(){  Container p=getParent();  if (p instanceof JViewport) {    Container gp=p.getParent();    if (gp instanceof JScrollPane) {      JScrollPane scrollPane=(JScrollPane)gp;      JViewport viewport=scrollPane.getViewport();      if (viewport == null || viewport.getView() != this) {        return;      }      if (isColumnControlVisible()) {        verticalScrollPolicy=scrollPane.getVerticalScrollBarPolicy();        scrollPane.setCorner(JScrollPane.UPPER_TRAILING_CORNER,getColumnControl());        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);      } else {        if (verticalScrollPolicy != 0) {          scrollPane.setVerticalScrollBarPolicy(verticalScrollPolicy);        }        try {          scrollPane.setCorner(JScrollPane.UPPER_TRAILING_CORNER,null);        } catch (        Exception ex) {        }      }    }  }}  }
class C{  private void generateL2(){  int dim=vi[vi.length - 1];  this.A2=new short[dim][dim];  this.A2inv=null;  ComputeInField c=new ComputeInField();  while (this.A2inv == null) {    for (int i=0; i < dim; i++) {      for (int j=0; j < dim; j++) {        A2[i][j]=(short)(sr.nextInt() & GF2Field.MASK);      }    }    this.A2inv=c.inverse(A2);  }  b2=new short[dim];  for (int i=0; i < dim; i++) {    b2[i]=(short)(sr.nextInt() & GF2Field.MASK);  }}  }
class C{  private SampleBean(int num){  this.num=num;  str=String.valueOf(num);}  }
class C{  public InsertRow(int numCols){  origVals=new Object[numCols];  colsInserted=new BitSet(numCols);  cols=numCols;  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public void write(String s,int off,int len) throws IOException {  if (writer != null) {    writer.write(s,off,len);  } else {    ensureOpen();    if (len >= bufferSize - nextChar)     reAllocBuff(len);    s.getChars(off,off + len,cb,nextChar);    nextChar+=len;  }}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, DEMHeader, outputHeader;  int row, col, x, y;  int progress;  int c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag;  double flowDir, flowLength, flowLengthThroughCell;  double zSt, zCurrent, zLastCell;  double rad2Deg=180.0 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  DEMHeader=args[1];  outputHeader=args[2];  double d=Double.parseDouble(args[3]);  if (d <= 0) {    showFeedback("The vertical drop parameter must be set to a positive numerical value.");    return;  }  String outputType=args[4].toLowerCase().trim();  if (pointerHeader.isEmpty() || DEMHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    double noData=pointer.getNoDataValue();    double gridResX=pointer.getCellSizeX();    double gridResY=pointer.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster dem=new WhiteboxRaster(DEMHeader,"r");    if (dem.getNumberColumns() != cols || dem.getNumberRows() != rows) {      showFeedback("Each of the input images must have the same dimensions (i.e. rows and columns).");      return;    }    double demNoData=dem.getNoDataValue();    if (pointer.getXYUnits().toLowerCase().contains("deg") || dem.getXYUnits().toLowerCase().contains("deg")) {      double p1=111412.84;      double p2=-93.5;      double p3=0.118;      double lat=Math.toRadians((pointer.getNorth() - pointer.getSouth()) / 2.0);      double longlen=(p1 * Math.cos(lat)) + (p2 * Math.cos(3 * lat)) + (p3 * Math.cos(5 * lat));      for (int i=0; i < 8; i++) {        gridLengths[i]=gridLengths[i] * longlen;      }    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);switch (outputType) {case "tangent":      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {            zSt=dem.getValue(row,col);            flag=false;            x=col;            y=row;            flowLength=0;            do {              zLastCell=dem.getValue(row,col);              flowDir=pointer.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                zCurrent=dem.getValue(y,x);                if (zCurrent != demNoData) {                  if ((zSt - zCurrent) < d) {                    flowLength+=gridLengths[c];                  } else {                    flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);                    flowLength+=flowLengthThroughCell;                    output.setValue(row,col,d / flowLength);                    flag=true;                  }                } else {                  if (flowLength > 0) {                    output.setValue(row,col,(zSt - zLastCell) / flowLength);                  } else {                    output.setValue(row,col,noData);                  }                  flag=true;                }              } else {                if (flowLength > 0) {                  output.setValue(row,col,(zSt - zLastCell) / flowLength);                } else {                  output.setValue(row,col,noData);                }                flag=true;              }            } while (!flag);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    break;case "degrees":  for (row=0; row < rows; row++) {    for (col=0; col < cols; col++) {      if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {        zSt=dem.getValue(row,col);        flag=false;        x=col;        y=row;        flowLength=0;        do {          zLastCell=dem.getValue(row,col);          flowDir=pointer.getValue(y,x);          if (flowDir > 0) {            c=(int)(Math.log(flowDir) / LnOf2);            x+=dX[c];            y+=dY[c];            zCurrent=dem.getValue(y,x);            if (zCurrent != demNoData) {              if ((zSt - zCurrent) < d) {                flowLength+=gridLengths[c];              } else {                flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);                flowLength+=flowLengthThroughCell;                output.setValue(row,col,Math.atan(d / flowLength) * rad2Deg);                flag=true;              }            } else {              if (flowLength > 0) {                output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength) * rad2Deg);              } else {                output.setValue(row,col,noData);              }              flag=true;            }          } else {            if (flowLength > 0) {              output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength) * rad2Deg);            } else {              output.setValue(row,col,noData);            }            flag=true;          }        } while (!flag);      }    }    if (cancelOp) {      cancelOperation();      return;    }    progress=(int)(100f * row / (rows - 1));    updateProgress(progress);  }break;case "radians":for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {  if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {    zSt=dem.getValue(row,col);    flag=false;    x=col;    y=row;    flowLength=0;    do {      zLastCell=dem.getValue(row,col);      flowDir=pointer.getValue(y,x);      if (flowDir > 0) {        c=(int)(Math.log(flowDir) / LnOf2);        x+=dX[c];        y+=dY[c];        zCurrent=dem.getValue(y,x);        if (zCurrent != demNoData) {          if ((zSt - zCurrent) < d) {            flowLength+=gridLengths[c];          } else {            flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);            flowLength+=flowLengthThroughCell;            output.setValue(row,col,Math.atan(d / flowLength));            flag=true;          }        } else {          if (flowLength > 0) {            output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength));          } else {            output.setValue(row,col,noData);          }          flag=true;        }      } else {        if (flowLength > 0) {          output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength));        } else {          output.setValue(row,col,noData);        }        flag=true;      }    } while (!flag);  }}if (cancelOp) {  cancelOperation();  return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}break;case "distance":for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {zSt=dem.getValue(row,col);flag=false;x=col;y=row;flowLength=0;do {  zLastCell=dem.getValue(row,col);  flowDir=pointer.getValue(y,x);  if (flowDir > 0) {    c=(int)(Math.log(flowDir) / LnOf2);    x+=dX[c];    y+=dY[c];    zCurrent=dem.getValue(y,x);    if (zCurrent != demNoData) {      if ((zSt - zCurrent) < d) {        flowLength+=gridLengths[c];      } else {        flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);        flowLength+=flowLengthThroughCell;        output.setValue(row,col,flowLength);        flag=true;      }    } else {      if (flowLength > 0) {        output.setValue(row,col,flowLength);      } else {        output.setValue(row,col,noData);      }      flag=true;    }  } else {    if (flowLength > 0) {      output.setValue(row,col,flowLength);    } else {      output.setValue(row,col,noData);    }    flag=true;  }} while (!flag);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}break;}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());pointer.close();dem.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  protected static void advance() throws java.io.IOException {  int old_char;  old_char=next_char;  next_char=next_char2;  if (next_char == EOF_CHAR)   next_char2=EOF_CHAR; else   next_char2=System.in.read();  current_position++;  if (old_char == '\n') {    current_line++;    current_position=1;  }}  }
class C{  public HttpMessage(HttpRequestHeader reqHeader){  setRequestHeader(reqHeader);}  }
class C{  @Deprecated @Override public final void add(E e){  throw new UnsupportedOperationException();}  }
class C{  public Result filterOut(List<String> sources){  Result ret=new Result();  for (  ResultEntry l : this.log) {    if (!sources.contains(l.getSource())) {      ret.add(l);    }  }  return ret;}  }
class C{  public Signal(final Adapter<T> continuous,final Adapter<T> discrete){  this.continuous=continuous;  this.discrete=discrete;}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  boolean shouldTransmitOnShutdown(){  return EULADialog.getEULAAccepted();}  }
class C{  private Set<RelocatedAddress> relocate(final Set<BreakpointAddress> addresses){  final Set<RelocatedAddress> relocatedAddresses=new HashSet<RelocatedAddress>();  for (  final BreakpointAddress breakpointAddress : addresses) {    relocatedAddresses.add(fileToMemory(breakpointAddress.getModule(),breakpointAddress.getAddress()));  }  return relocatedAddresses;}  }
class C{  public static void initLogging(){  File agentJar=SpringAgent.getInspectitJarFile();  if (null == agentJar) {    return;  }  initLogDirLocation();  String parserFactoryProperty=System.clearProperty(SAX_PARSER_FACTORY_PROPERTY);  try {    LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();    JoranConfigurator configurator=new JoranConfigurator();    configurator.setContext(context);    context.reset();    InputStream is=null;    try {      String logFileLocation=System.getProperty(LOG_FILE_PROPERTY);      if (null != logFileLocation) {        File logFile=new File(logFileLocation).getAbsoluteFile();        if (logFile.exists()) {          is=new FileInputStream(logFile);        }      }      if ((null == is) && (null != agentJar)) {        String logPath=agentJar.getParent() + File.separator + File.separator+ DEFAULT_LOG_FILE_NAME;        File logFile=new File(logPath);        if (logFile.exists()) {          is=new FileInputStream(logFile);        }      }      if (null != is) {        try {          configurator.doConfigure(is);        } catch (        JoranException e) {        } finally {          is.close();        }      }    } catch (    IOException e) {    }    StatusPrinter.printInCaseOfErrorsOrWarnings(context);    MinlogToSLF4JLogger.init();  }  finally {    if (null != parserFactoryProperty) {      System.setProperty(SAX_PARSER_FACTORY_PROPERTY,parserFactoryProperty);    }  }}  }
class C{  protected void save(){  int tab;  List<EvaluationStatistics> stats;  int retVal;  String msg;  tab=m_TabbedPane.getSelectedIndex();  if (tab == TAB_RAW)   stats=m_ModelRaw.getStatistics(); else   if (tab == TAB_AGGREGATED)   stats=m_ModelAggregated.getStatistics(); else   if (tab == TAB_MEASUREMENT)   stats=m_ModelMeasurement.getStatistics(); else   return;  if (tab == TAB_MEASUREMENT) {    m_FileChooserMeasurement.setDialogTitle("Save measurement");    retVal=m_FileChooserMeasurement.showSaveDialog(this);    if (retVal != MeasurementEvaluationStatisticsExporterFileChooser.APPROVE_OPTION)     return;  } else {    if (tab == TAB_RAW)     m_FileChooser.setDialogTitle("Save raw"); else     m_FileChooser.setDialogTitle("Save aggregated");    retVal=m_FileChooser.showSaveDialog(this);    if (retVal != EvaluationStatisticsExporterFileChooser.APPROVE_OPTION)     return;  }  if (tab == TAB_MEASUREMENT) {    FileBasedMeasurementEvaluationStatisticsExporter mexporter=m_FileChooserMeasurement.getWriter();    mexporter.setFile(m_FileChooserMeasurement.getSelectedFile());    mexporter.setMeasurement((String)m_ComboBoxMeasurements.getSelectedItem());    mexporter.addLogListener(getOwner());    msg=mexporter.export(stats);    mexporter.removeLogListener(getOwner());  } else {    FileBasedEvaluationStatisticsExporter exporter=m_FileChooser.getWriter();    exporter.setFile(m_FileChooser.getSelectedFile());    exporter.addLogListener(getOwner());    msg=exporter.export(stats);    exporter.removeLogListener(getOwner());  }  if (msg != null) {    JOptionPane.showMessageDialog(this,"Export failed:\n" + msg,"Error",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public static void main(String[] args) throws Exception {  new LaunchDiagnosticTool().start(args);}  }
class C{  public Boolean isTopologyRunning(String topologyName){  return awaitResult(delegate.isTopologyRunning(topologyName));}  }
class C{  public static double logBinomial(final int nn,final int n){  assert n >= 0;  assert nn >= n;  if (nn <= 1 || n == 0 || n == nn) {    return 0.0;  }  if (n == 1 || n == (nn - 1)) {    return Math.log(nn);  }  if (n == 2 || n == (nn - 2)) {    return Math.log((double)nn * (nn - 1) / 2.0);  }  return logFactorial(nn) - logFactorial(n) - logFactorial(nn - n);}  }
class C{  public UnsignedInteger subtract(int decrement){  return valueOf(getValue() - decrement);}  }
class C{  private void addInvoice(Organization org) throws ObjectNotFoundException, NonUniqueBusinessKeyException {  if (!org.hasRole(OrganizationRoleType.SUPPLIER) && !org.hasRole(OrganizationRoleType.RESELLER)) {    return;  }  Organization operator=dm.getCurrentUser().getOrganization();  if (!org.canPermitPaymentType(PaymentType.INVOICE)) {    PaymentType paymentType=new PaymentType();    paymentType.setPaymentTypeId(PaymentType.INVOICE);    paymentType=(PaymentType)dm.getReferenceByBusinessKey(paymentType);    OrganizationRefToPaymentType apt=new OrganizationRefToPaymentType();    OrganizationReference orgRef=findOrCreateOrganizationReference(operator,org);    apt.setOrganizationReference(orgRef);    apt.setPaymentType(paymentType);    OrganizationRole role=(OrganizationRole)dm.getReferenceByBusinessKey(new OrganizationRole(orgRef.getReferenceType() == OrganizationReferenceType.PLATFORM_OPERATOR_TO_RESELLER ? OrganizationRoleType.RESELLER : OrganizationRoleType.SUPPLIER));    apt.setOrganizationRole(role);    if (isSupplierSetsInvoiceAsDefaultEnabled()) {      apt.setUsedAsDefault(true);      apt.setUsedAsServiceDefault(true);    }    org.getSourcesForType(orgRef.getReferenceType()).get(0).getPaymentTypes().add(apt);    dm.persist(apt);  }}  }
class C{  @Inline public static boolean addressInVM(Address address){  return Space.isMappedAddress(address);}  }
class C{  private String buildFullMessage(String msg,Object arg0,Object arg1,Object arg2,Object[] argArray){  StringBuilder sb=null;  int lastIndex=0;  int argC=0;  while (true) {    int argIndex=msg.indexOf(ARG_STRING,lastIndex);    if (argIndex == -1) {      break;    }    if (sb == null) {      sb=new StringBuilder(128);    }    sb.append(msg,lastIndex,argIndex);    lastIndex=argIndex + ARG_STRING_LENGTH;    if (argArray == null) {      if (argC == 0) {        appendArg(sb,arg0);      } else       if (argC == 1) {        appendArg(sb,arg1);      } else       if (argC == 2) {        appendArg(sb,arg2);      } else {      }    } else     if (argC < argArray.length) {      appendArg(sb,argArray[argC]);    } else {    }    argC++;  }  if (sb == null) {    return msg;  } else {    sb.append(msg,lastIndex,msg.length());    return sb.toString();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CSVFormat withQuoteChar(final char quoteChar){  return withQuoteChar(Character.valueOf(quoteChar));}  }
class C{  public boolean isOnOrBefore(JulianDate d){  return (julian < d.julian || julian == d.julian);}  }
class C{  public static cuComplex cuCadd(cuComplex x,cuComplex y){  return cuCmplx(cuCreal(x) + cuCreal(y),cuCimag(x) + cuCimag(y));}  }
class C{  @Override public void run(){  amIActive=true;  String inputWatershedFile;  int row, col;  int i;  int topRow, bottomRow, leftCol, rightCol;  float progress;  double increment;  double rowYCoord, colXCoord;  double[][] geometry;  BoundingBox box;  int numPoints, numParts, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputWatershedFile=args[1];  outputHeader=args[2];  increment=Double.parseDouble(args[3]);  if ((demHeader == null) || (inputWatershedFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(DEM.getPreferredPalette());    if (inputWatershedFile.toLowerCase().endsWith(".dep")) {      watershedHeader=inputWatershedFile;      watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberColumns() != cols || watershed.getNumberRows() != rows) {        showFeedback("The input files must have the same dimensions.");        return;      }      double[] demData;      boolean isBorderingCell;      double w;      int[] dX={1,1,1,0,-1,-1,-1,0};      int[] dY={-1,0,1,1,1,0,-1,-1};      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          w=watershed.getValue(row,col);          if (w > 0 && demData[col] != noData) {            isBorderingCell=false;            for (i=0; i < 8; i++) {              if (watershed.getValue(row + dY[i],col + dX[i]) != w) {                isBorderingCell=true;                break;              }            }            if (isBorderingCell) {              output.setValue(row,col,demData[col] + increment);            }          } else {            output.setValue(row,col,demData[col]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else     if (inputWatershedFile.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputWatershedFile);      if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {        showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");        return;      }      ArrayList<RecordInfo> myList=new ArrayList<RecordInfo>();      for (      ShapeFileRecord record : input.records) {        i=record.getRecordNumber();        box=getBoundingBoxFromShapefileRecord(record);        myList.add(new RecordInfo(box.getMaxY(),i));      }      Collections.sort(myList);      long heapSize=Runtime.getRuntime().totalMemory();      int flushSize=(int)(heapSize / 32);      int j, numCellsToWrite;      PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<RowPriorityGridCell>(flushSize);      RowPriorityGridCell cell;      int numRecords=input.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      progress=0;      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=input.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][0] < box.getMinX()) {              box.setMinX(geometry[i][0]);            }            if (geometry[i][0] > box.getMaxX()) {              box.setMaxX(geometry[i][0]);            }            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=DEM.getRowFromYCoordinate(box.getMaxY());          bottomRow=DEM.getRowFromYCoordinate(box.getMinY());          leftCol=DEM.getColumnFromXCoordinate(box.getMinX());          rightCol=DEM.getColumnFromXCoordinate(box.getMaxX());          for (row=topRow; row <= bottomRow; row++) {            rowYCoord=DEM.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                  col=DEM.getColumnFromXCoordinate(xPrime);                  pq.add(new RowPriorityGridCell(row,col,increment));                }              }            }          }          for (col=leftCol; col <= rightCol; col++) {            colXCoord=DEM.getXCoordinateFromColumn(col);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                if (x1 != x2) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                  row=DEM.getRowFromYCoordinate(yPrime);                  pq.add(new RowPriorityGridCell(row,col,increment));                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,DEM.getValue(cell.row,cell.col) + increment);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress((int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress((int)progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        output.setValue(cell.row,cell.col,DEM.getValue(cell.row,cell.col) + increment);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress((int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      output.flush();      double[] demData;      double[] outputData;      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        outputData=output.getRowValues(row);        for (col=0; col < cols; col++) {          if (outputData[col] == noData) {            output.setValue(row,col,demData[col]);          }        }      }      output.flush();    } else {      showFeedback("The input watershed file must be either a Whitebox raster or shapefile.");      return;    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void postProcessFunctionSet(){  nodes=new GPNode[nodes_h.size()][];  terminals=new GPNode[terminals_h.size()][];  nonterminals=new GPNode[nonterminals_h.size()][];  Enumeration e=nodes_h.keys();  while (e.hasMoreElements()) {    GPType gpt=(GPType)(e.nextElement());    GPNode[] gpfi=(GPNode[])(nodes_h.get(gpt));    nodes[gpt.type]=gpfi;  }  e=nonterminals_h.keys();  while (e.hasMoreElements()) {    GPType gpt=(GPType)(e.nextElement());    GPNode[] gpfi=(GPNode[])(nonterminals_h.get(gpt));    nonterminals[gpt.type]=gpfi;  }  e=terminals_h.keys();  while (e.hasMoreElements()) {    GPType gpt=(GPType)(e.nextElement());    GPNode[] gpfi=(GPNode[])(terminals_h.get(gpt));    terminals[gpt.type]=gpfi;  }  int max_arity=0;  for (int x=0; x < nodes.length; x++)   for (int y=0; y < nodes[x].length; y++)   if (max_arity < nodes[x][y].children.length)   max_arity=nodes[x][y].children.length;  nodesByArity=new GPNode[nodes.length][max_arity + 1][];  for (int x=0; x < nodes.length; x++)   for (int a=0; a <= max_arity; a++) {    int num_of_a=0;    for (int y=0; y < nodes[x].length; y++)     if (nodes[x][y].children.length == a)     num_of_a++;    nodesByArity[x][a]=new GPNode[num_of_a];    int cur_a=0;    for (int y=0; y < nodes[x].length; y++)     if (nodes[x][y].children.length == a)     nodesByArity[x][a][cur_a++]=nodes[x][y];  }  nonterminalsUnderArity=new GPNode[nonterminals.length][max_arity + 1][];  for (int x=0; x < nonterminals.length; x++)   for (int a=0; a <= max_arity; a++) {    int num_of_a=0;    for (int y=0; y < nonterminals[x].length; y++)     if (nonterminals[x][y].children.length <= a)     num_of_a++;    nonterminalsUnderArity[x][a]=new GPNode[num_of_a];    int cur_a=0;    for (int y=0; y < nonterminals[x].length; y++)     if (nonterminals[x][y].children.length <= a)     nonterminalsUnderArity[x][a][cur_a++]=nonterminals[x][y];  }  nonterminalsOverArity=new GPNode[nonterminals.length][max_arity + 1][];  for (int x=0; x < nonterminals.length; x++)   for (int a=0; a <= max_arity; a++) {    int num_of_a=0;    for (int y=0; y < nonterminals[x].length; y++)     if (nonterminals[x][y].children.length >= a)     num_of_a++;    nonterminalsOverArity[x][a]=new GPNode[num_of_a];    int cur_a=0;    for (int y=0; y < nonterminals[x].length; y++)     if (nonterminals[x][y].children.length >= a)     nonterminalsOverArity[x][a][cur_a++]=nonterminals[x][y];  }}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public void invoke(Object service,BurlapInput in,BurlapOutput out) throws Exception {  in.readCall();  ServiceContext context=ServiceContext.getContext();  String header;  while ((header=in.readHeader()) != null) {    Object value=in.readObject();    context.addHeader(header,value);  }  String methodName=in.readMethod();  Method method=getMethod(methodName);  if (log.isLoggable(Level.FINE))   log.fine(this + " invoking " + methodName+ " ("+ method+ ")");  if (method != null) {  } else   if ("_burlap_getAttribute".equals(in.getMethod())) {    String attrName=in.readString();    in.completeCall();    String value=null;    if ("java.api.class".equals(attrName))     value=getAPIClassName(); else     if ("java.home.class".equals(attrName))     value=getHomeClassName(); else     if ("java.object.class".equals(attrName))     value=getObjectClassName();    out.startReply();    out.writeObject(value);    out.completeReply();    return;  } else   if (method == null) {    out.startReply();    out.writeFault("NoSuchMethodException","The service has no method named: " + in.getMethod(),null);    out.completeReply();    return;  }  Class[] args=method.getParameterTypes();  Object[] values=new Object[args.length];  for (int i=0; i < args.length; i++)   values[i]=in.readObject(args[i]);  in.completeCall();  Object result=null;  try {    result=method.invoke(service,values);  } catch (  Throwable e) {    log.log(Level.FINE,service + "." + method.getName()+ "() failed with exception:\n"+ e.toString(),e);    if (e instanceof InvocationTargetException && e.getCause() instanceof Exception)     e=((InvocationTargetException)e).getTargetException();    out.startReply();    out.writeFault("ServiceException",e.getMessage(),e);    out.completeReply();    return;  }  out.startReply();  out.writeObject(result);  out.completeReply();}  }
class C{  private boolean isPhysicalPageEmpty(Eml eml){  String homepageUrl=eml.getDistributionUrl();  for (  PhysicalData data : eml.getPhysicalData()) {    boolean isLinkEmpty=isExternalLinkEmpty(data);    if (!isLinkEmpty) {      return false;    }  }  return Strings.isNullOrEmpty(homepageUrl);}  }
class C{  public void fillPolygon(int xPoints[],int yPoints[],int nPoints){  g.fillPolygon(xPoints,yPoints,nPoints);}  }
class C{  protected SVGOMFEFuncBElement(){}  }
class C{  @Override protected int availableIDsSize(){  return this.idsAvailable.size() + this.durableIDsList.size();}  }
class C{  private static <T>LoadResult<T> loadPluginFiles(final String pluginPath,final Set<File> pluginFiles,final IStandardDescriptionUpdater descriptionUpdater){  final ArrayList<Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>> loadedPlugins=new ArrayList<>();  final ArrayList<Pair<String,Throwable>> failedPlugins=new ArrayList<>();  for (  final File pluginFile : pluginFiles) {    if (pluginFile.getName().endsWith(".jar")) {      descriptionUpdater.next();      descriptionUpdater.setDescription(String.format("Loading plugin JAR file '%s'",pluginFile.getName()));      JarPluginLoader.processJarFile(pluginFile,loadedPlugins,failedPlugins);    } else     if (pluginFile.getName().endsWith(".class")) {      descriptionUpdater.next();      descriptionUpdater.setDescription(String.format("Loading plugin CLASS file '%s'",pluginFile.getName()));      ClassPluginLoader.processClassFile(pluginPath,pluginFile,loadedPlugins,failedPlugins);    }  }  return new LoadResult<T>(loadedPlugins,failedPlugins);}  }
class C{  static public void println(String msg){  println(msg,CLLogLevel.normal);}  }
class C{  public static void evolve(RealVariable v1,RealVariable v2,double distributionIndex){  evolve_asymmetric(v1,v2,distributionIndex,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public LikeExpression(){  not=false;}  }
class C{  public static boolean hasValidCover(IGame game,Coords pos,int elevation){  if ((pos == null) || (elevation > 0)) {    return false;  }  boolean hasMovedEntity=false;  for (  Entity e : game.getEntitiesVector(pos)) {    if (e.isDone() && !(e instanceof Infantry) && (e.getElevation() == elevation)) {      hasMovedEntity=true;      break;    }  }  if (!hasMovedEntity) {    Enumeration<Entity> wrecks=game.getWreckedEntities();    while (wrecks.hasMoreElements()) {      Entity e=wrecks.nextElement();      if (pos.equals(e.getPosition()) && !(e instanceof Infantry)) {        hasMovedEntity=true;      }    }  }  return hasMovedEntity;}  }
class C{  public void addImage(String imagePath,List<? extends LatLon> corners) throws IOException, WWRuntimeException {  AVList params=new AVListImpl();  if (null != corners) {    Sector sector=Sector.boundingSector(corners);    params.setValue(AVKey.SECTOR,sector);  }  DataRaster raster=this.openDataRaster(imagePath,params);  final BufferedImage image=this.getBufferedImage(raster);  if (null != raster && image != null) {    this.addImage(imagePath,image,corners);  } else {    String message=Logging.getMessage("generic.ImageReadFailed",imagePath);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }}  }
class C{  public DynamicClassLoader(ClassLoader parent){  this(parent,true,false);}  }
class C{  protected void doConfigure() throws ReplicatorException {  String roleName=properties.getString(ReplicatorConf.ROLE);  if (ReplicatorConf.ROLE_MASTER.equals(roleName) || ReplicatorConf.ROLE_SLAVE.equals(roleName)) {  } else {    if (roleName == null) {      throw new ReplicatorException("Property replicator.role is not set; must be the name of a pipeline");    } else {      logger.warn("Setting role to a value other than master or slave: " + roleName);    }  }  logger.info("Replicator role: " + roleName);  assertPropertyDefault(ReplicatorConf.AUTO_ENABLE,ReplicatorConf.AUTO_ENABLE_DEFAULT);  assertPropertyDefault(ReplicatorConf.AUTO_RECOVERY_MAX_ATTEMPTS,ReplicatorConf.AUTO_RECOVERY_MAX_ATTEMPTS_DEFAULT);  autoRecoveryMaxAttempts=properties.getInt(ReplicatorConf.AUTO_RECOVERY_MAX_ATTEMPTS);  if (autoRecoveryMaxAttempts > 0) {    assertPropertyDefault(ReplicatorConf.AUTO_RECOVERY_DELAY_INTERVAL,ReplicatorConf.AUTO_RECOVERY_DELAY_INTERVAL_DEFAULT);    this.autoRecoveryDelayMillis=properties.getInterval(ReplicatorConf.AUTO_RECOVERY_DELAY_INTERVAL).longValue();    assertPropertyDefault(ReplicatorConf.AUTO_RECOVERY_RESET_INTERVAL,ReplicatorConf.AUTO_RECOVERY_RESET_INTERVAL_DEFAULT);    this.autoRecoveryResetMillis=properties.getInterval(ReplicatorConf.AUTO_RECOVERY_RESET_INTERVAL).longValue();  }  assertPropertyDefault(ReplicatorConf.SOURCE_ID,ReplicatorConf.SOURCE_ID_DEFAULT);  siteName=assertPropertyDefault(ReplicatorConf.SITE_NAME,ReplicatorConf.SITE_NAME_DEFAULT);  clusterName=assertPropertyDefault(ReplicatorConf.CLUSTER_NAME,ReplicatorConf.CLUSTER_NAME_DEFAULT);  String replicatorName=assertPropertySet(ReplicatorConf.OPEN_REPLICATOR);  if (openReplicator != null) {    openReplicator.release();  }  openReplicator=loadAndConfigurePlugin(ReplicatorConf.OPEN_REPLICATOR,replicatorName);  openReplicator.configure(properties);}  }
class C{  public CsvInteractionWriter(String csvFilename){  this.csvFilename=csvFilename;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof IfdData) {    IfdData data=(IfdData)obj;    if (data.getId() == mIfdId && data.getTagCount() == getTagCount()) {      ExifTag[] tags=data.getAllTags();      for (      ExifTag tag : tags) {        if (ExifInterface.isOffsetTag(tag.getTagId())) {          continue;        }        ExifTag tag2=mExifTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  private void addRequestHeaders(InnerState innerState,HttpGet request){  if (innerState.mContinuingDownload) {    if (innerState.mHeaderETag != null) {      request.addHeader("If-Match",innerState.mHeaderETag);    }    request.addHeader("Range","bytes=" + innerState.mBytesSoFar + "-");  }}  }
class C{  public DeviceAutomator openQuickSettings(){  mDevice.openQuickSettings();  return this;}  }
class C{  public int size(){  return usageTable.size();}  }
class C{  protected static double calcP_i(double f,double mu,double sigma){  final double fmu=f - mu;  return ONEBYSQRT2PI / sigma * Math.exp(fmu * fmu / (-2 * sigma * sigma));}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.PATTERN;}  }
class C{  public void restoreLayout(){  TupleSet focus=getGroup(Visualization.FOCUS_ITEMS);  focus.clear();  focus.addTuple(getVisualRootItem());  autoLayout();  Consumer<VisualNode> set=null;  map.values().stream().forEach(set);  resetThresholds();}  }
class C{  public CandlestickRenderer(double candleWidth){  this(candleWidth,true,new HighLowItemLabelGenerator());}  }
class C{  public static int deleteInOutMA(int M_InOut_ID,String trxName){  String sql="DELETE FROM M_InOutLineMA ma WHERE EXISTS " + "(SELECT * FROM M_InOutLine l WHERE l.M_InOutLine_ID=ma.M_InOutLine_ID" + " AND M_InOut_ID=" + M_InOut_ID + ")";  return DB.executeUpdate(sql,trxName);}  }
class C{  public int compareTo(AppVersion other){  int result=major - other.major;  if (result == 0) {    result=minor - other.minor;  }  if (result == 0) {    result=patch - other.patch;  }  if (result == 0 && (milestone > -1 || other.milestone > -1)) {    if (milestone > -1) {      if (other.milestone == -1) {        result=-1;      } else {        result=milestone - other.milestone;      }    } else {      if (other.milestone > -1) {        result=1;      }    }  }  if (result == 0 && !ObjectUtil.nullEquals(modifier,other.modifier)) {    if (modifier == null) {      result=1;    } else     if (other.modifier == null) {      result=-1;    } else {      result=modifier.compareToIgnoreCase(other.modifier);    }  }  return result;}  }
class C{  public DefaultToken(){  super();}  }
class C{  private void handleHtmlShowSignedOut(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleSignedOut();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("welcome");  pageWrapper.addHeader();  if (!isUserSignedIn(requestAndResponse)) {    requestAndResponse.print(servletText.sentenceYouHaveBeenSignedOut());  } else {    requestAndResponse.print(servletText.sentenceYouHaveNotBeenSignedOut());  }  pageWrapper.addFooter();}  }
class C{  public void add(boolean priority,CreateMarkerTask c){  lock.lock();  sendEmptyMessage(BLANK);  if (priority) {    mOnScreenCreateMarkerTasks.add(c);  } else {    mCreateMarkerTasks.add(c);  }  lock.unlock();}  }
class C{  public boolean hasDescription(){  return description != null;}  }
class C{  public void markUpdated(){  setLastUpdated(new Date());}  }
class C{  public static int[] toIntArrayModQ(int q,BigInteger[] input){  BigInteger bq=BigInteger.valueOf(q);  int[] result=new int[input.length];  for (int i=0; i < input.length; i++) {    result[i]=input[i].mod(bq).intValue();  }  return result;}  }
class C{  public static TermsEnumTermsQueryBuilder termsEnumTermsQuery(String name,BytesRef[] values,int cacheKey) throws IOException {  return new TermsEnumTermsQueryBuilder(name,values,cacheKey);}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  @Override public int hashCode(){  return parent_file.hashCode();}  }
class C{  private String createString(String f){  return "srcXInBytes=" + srcXInBytes + f+ "srcY="+ srcY+ f+ "srcZ="+ srcZ+ f+ "srcLOD="+ srcLOD+ f+ "srcMemoryType="+ CUmemorytype.stringFor(srcMemoryType)+ f+ "srcHost ="+ srcHost+ f+ "srcDevice ="+ srcDevice+ f+ "srcArray ="+ srcArray+ f+ "srcPitch="+ srcPitch+ f+ "srcHeight="+ srcHeight+ f+ "dstXInBytes="+ dstXInBytes+ f+ "dstY="+ dstY+ f+ "dstZ="+ dstZ+ f+ "dstLOD="+ dstLOD+ f+ "dstMemoryType="+ CUmemorytype.stringFor(dstMemoryType)+ f+ "dstHost ="+ dstHost+ f+ "dstDevice ="+ dstDevice+ f+ "dstArray ="+ dstArray+ f+ "dstPitch="+ dstPitch+ f+ "dstHeight="+ dstHeight+ f+ "WidthInBytes="+ WidthInBytes+ f+ "Height="+ Height+ f+ "Depth="+ Depth;}  }
class C{  @LogMessageDoc(level="INFO",message="[{id}->{id}] Synchronizing local state to remote node",explanation="Normal state resynchronization is occurring") public void antientropy(Node node){  if (!rpcService.isConnected(node.getNodeId()))   return;  logger.info("[{}->{}] Synchronizing local state to remote node",getLocalNodeId(),node.getNodeId());  for (  SynchronizingStorageEngine store : storeRegistry.values()) {    if (Scope.LOCAL.equals(store.getScope())) {      if (node.getDomainId() != getClusterConfig().getNode().getDomainId())       continue;    } else     if (Scope.UNSYNCHRONIZED.equals(store.getScope())) {      continue;    }    IClosableIterator<Entry<ByteArray,List<Versioned<byte[]>>>> entries=store.entries();    try {      SyncMessage bsm=TProtocolUtil.getTSyncOfferMessage(store.getName(),store.getScope(),store.isPersistent());      int count=0;      while (entries.hasNext()) {        if (!rpcService.isConnected(node.getNodeId()))         return;        Entry<ByteArray,List<Versioned<byte[]>>> pair=entries.next();        KeyedVersions kv=TProtocolUtil.getTKeyedVersions(pair.getKey(),pair.getValue());        bsm.getSyncOffer().addToVersions(kv);        count+=1;        if (count >= 50) {          sendSyncOffer(node.getNodeId(),bsm);          bsm.getSyncOffer().unsetVersions();          count=0;        }      }      sendSyncOffer(node.getNodeId(),bsm);    } catch (    InterruptedException e) {      throw new RuntimeException(e);    } finally {      entries.close();    }  }}  }
class C{  public void flickrAuthorize(){  oAuthRequest.setRequestUrl(AUTHORIZE_URL);  oAuthRequest.initParam(new MapParams<String,String>().put(OAuthParams.OAUTH_TOKEN,oAuthRequest.getOAuthToken()).put(PERMS,WRITE_PERM).toMap());  oAuthRequest.signRequest(Verb.GET);  eventBus.post(new PleaseAuthorizeEvent(oAuthRequest));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.929 -0500",hash_original_method="1D9E886326ACAAED42A7320F81B83BDE",hash_generated_method="82AA82F3CD16F5D859C1EB06D94C7EA9") public void round(Rect dst){  dst.set(FastMath.round(left),FastMath.round(top),FastMath.round(right),FastMath.round(bottom));}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public boolean hasReplacedArmour(final ItemStack stack){  return stack.hasTagCompound() && stack.getTagCompound().hasKey(KEY_REPLACED_ARMOUR,NBT.TAG_LIST);}  }
class C{  public void test_updateLargeValueWithLargeValue(){  final MyRawStore store=new MyRawStore(new SimpleMemoryRawStore());  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setRawRecords(true);  metadata.setMaxRecLen(64);  final BTree btree=BTree.create(store,metadata);  assertEquals(64,btree.getMaxRecLen());  assertTrue(((ILeafData)btree.getRoot()).hasRawRecords());  final byte[] key=new byte[]{1};  final byte[] val=new byte[btree.getMaxRecLen() + 1];  r.nextBytes(val);  assertNull(btree.insert(key,val));  final Leaf root=(Leaf)btree.getRoot();  final long addr=root.getRawRecord(0);  assertTrue(addr != IRawStore.NULL);  final ByteBuffer actual=btree.readRawRecord(addr);  TestCase3.assertEquals(val,actual);  final byte[] newval=new byte[btree.getMaxRecLen() + 1];  r.nextBytes(newval);  store.expectDelete=addr;  final byte[] oldval=btree.insert(key,newval);  assertEquals(IRawStore.NULL,store.expectDelete);  assertEquals(val,oldval);  final long addr2=root.getRawRecord(0);  assertTrue(addr2 != IRawStore.NULL);  final ByteBuffer actual2=btree.readRawRecord(addr2);  TestCase3.assertEquals(newval,actual2);}  }
class C{  private static URI cookieUri(URI uri,HttpCookie cookie){  URI cookieUri=uri;  if (cookie.getDomain() != null) {    String domain=cookie.getDomain();    if (domain.charAt(0) == '.') {      domain=domain.substring(1);    }    try {      cookieUri=new URI(uri.getScheme() == null ? "http" : uri.getScheme(),domain,cookie.getPath() == null ? "/" : cookie.getPath(),null);    } catch (    URISyntaxException e) {      Log.w(TAG,e);    }  }  return cookieUri;}  }
class C{  public void removeTabAt(int index){  checkIndex(index);  Component component=getComponentAt(index);  boolean shouldChangeFocus=false;  int selected=getSelectedIndex();  String oldName=null;  if (component == visComp) {    shouldChangeFocus=(SwingUtilities.findFocusOwner(visComp) != null);    visComp=null;  }  if (accessibleContext != null) {    if (index == selected) {      pages.get(index).firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.SELECTED,null);      oldName=accessibleContext.getAccessibleName();    }    accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,component,null);  }  setTabComponentAt(index,null);  pages.remove(index);  putClientProperty("__index_to_remove__",Integer.valueOf(index));  if (selected > index) {    setSelectedIndexImpl(selected - 1,false);  } else   if (selected >= getTabCount()) {    setSelectedIndexImpl(selected - 1,false);    Page newSelected=(selected != 0) ? pages.get(selected - 1) : null;    changeAccessibleSelection(null,oldName,newSelected);  } else   if (index == selected) {    fireStateChanged();    changeAccessibleSelection(null,oldName,pages.get(index));  }  if (component != null) {    Component components[]=getComponents();    for (int i=components.length; --i >= 0; ) {      if (components[i] == component) {        super.remove(i);        component.setVisible(true);        break;      }    }  }  if (shouldChangeFocus) {    SwingUtilities2.tabbedPaneChangeFocusTo(getSelectedComponent());  }  revalidate();  repaint();}  }
class C{  @Override public final void write(int b){  try {    this.buffer.put((byte)(b & 0xff));  } catch (  BufferOverflowException e) {    expand(1);    this.buffer.put((byte)(b & 0xff));  }catch (  BufferUnderflowException e) {    expand(1);    this.buffer.put((byte)(b & 0xff));  }}  }
class C{  public Element create(){  mRS.validate();  Element[] ein=new Element[mCount];  String[] sin=new String[mCount];  int[] asin=new int[mCount];  java.lang.System.arraycopy(mElements,0,ein,0,mCount);  java.lang.System.arraycopy(mElementNames,0,sin,0,mCount);  java.lang.System.arraycopy(mArraySizes,0,asin,0,mCount);  int[] ids=new int[ein.length];  for (int ct=0; ct < ein.length; ct++) {    ids[ct]=ein[ct].getID(mRS);  }  int id=mRS.nElementCreate2(ids,sin,asin);  return new Element(id,mRS,ein,sin,asin);}  }
class C{  private int verifyPercentInString(String propertyString,String property){  int returnValue;  try {    returnValue=Integer.valueOf(propertyString).intValue();  } catch (  NumberFormatException e) {    throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_A_VALID_NUMBER_AND_NOT_1.toLocalizedString(new Object[]{property,propertyString}));  }  if (returnValue < 0) {    throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_POSITIVE_NUMBER_AND_THE_VALUE_GIVEN_1_IS_NOT_ACCEPTABLE.toLocalizedString(new Object[]{property,Integer.valueOf(returnValue)}));  } else   if (returnValue > 100) {    throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_LESS_THAN_2_BUT_WAS_1.toLocalizedString(new Object[]{property,Integer.valueOf(returnValue),Integer.valueOf(100)}));  }  return returnValue;}  }
class C{  public void disconnect(){  LOG.entering(CLASS_NAME,"disconnect");  stream.stop();  stream=null;}  }
class C{  protected boolean isAllTestComponentsInTargetInterior(Geometry testGeom){  List coords=ComponentCoordinateExtracter.getCoordinates(testGeom);  for (Iterator i=coords.iterator(); i.hasNext(); ) {    Coordinate p=(Coordinate)i.next();    int loc=targetPointLocator.locate(p);    if (loc != Location.INTERIOR)     return false;  }  return true;}  }
class C{  public static Map<String,Float> parseFieldBoosts(String[] fieldLists){  if (null == fieldLists || 0 == fieldLists.length) {    return new HashMap<>();  }  Map<String,Float> out=new HashMap<>(7);  for (  String in : fieldLists) {    if (null == in) {      continue;    }    in=in.trim();    if (in.length() == 0) {      continue;    }    String[] bb=whitespacePattern.split(in);    for (    String s : bb) {      String[] bbb=caratPattern.split(s);      out.put(bbb[0],1 == bbb.length ? null : Float.valueOf(bbb[1]));    }  }  return out;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void onConnect(OneSheeldDevice device){}  }
class C{  protected boolean configureResources(B builder,Set<Resource> resources){  return false;}  }
class C{  public synchronized void close(){  if (!mOpened) {    return;  }  mRtpInput.close();  mRtpSender.stopSession();  try {    NativeH264Encoder.DeinitEncoder();  } catch (  UnsatisfiedLinkError e) {    Log.d(LOGTAG,ExceptionUtil.getFullStackTrace(e));  }  mOpened=false;  mEventListener.onPlayerClosed();}  }
class C{  public Generator(){  this(DEFAULT_BASE_WIDTH,DEFAULT_BASE_HEIGHT);}  }
class C{  public YearMonth withChronologyRetainFields(Chronology newChronology){  newChronology=DateTimeUtils.getChronology(newChronology);  newChronology=newChronology.withUTC();  if (newChronology == getChronology()) {    return this;  } else {    YearMonth newYearMonth=new YearMonth(this,newChronology);    newChronology.validate(newYearMonth,getValues());    return newYearMonth;  }}  }
class C{  public KeyRecordIterator select(Statement stmt,Qualifier... qualifiers){  return select(stmt,false,null,qualifiers);}  }
class C{  public boolean saveLine(){  MProduct product=getProduct();  if (product == null)   return false;  BigDecimal QtyOrdered=(BigDecimal)f_quantity.getValue();  BigDecimal PriceActual=(BigDecimal)f_price.getValue();  if (p_posPanel.m_order == null) {    p_posPanel.m_order=PosOrderModel.createOrder(p_posPanel.p_pos,p_posPanel.f_order.getBPartner());  }  MOrderLine line=null;  if (p_posPanel.m_order != null) {    line=p_posPanel.m_order.createLine(product,QtyOrdered,PriceActual);    if (line == null)     return false;    line.saveEx();  }  orderLineId=line.getC_OrderLine_ID();  setM_Product_ID(0);  return true;}  }
class C{  private void actionInfo() throws PageException {  if (variable == null)   throw new ApplicationException("attribute variable is not defined for tag file");  pageContext.setVariable(variable,getInfo(pageContext,file,serverPassword));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardCategorySeriesLabelGenerator)) {    return false;  }  StandardCategorySeriesLabelGenerator that=(StandardCategorySeriesLabelGenerator)obj;  if (!this.formatPattern.equals(that.formatPattern)) {    return false;  }  return true;}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  @Override public void startGame(){  super.startGame();  for (int xIndex=0; xIndex < board.length; xIndex++) {    for (int yIndex=0; yIndex < board[xIndex].length; yIndex++) {      board[xIndex][yIndex]=null;    }  }  for (  BoardToken token : tokens) {    token.resetToHomePosition();  }}  }
class C{  @Override public Comparable bitsToValue(long globalOrd){  BytesRef bytesRef=lookupOrdFunction.apply((int)globalOrd);  return sf.getType().toObject(sf,bytesRef).toString();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private String computeShortSignature(Method m){  StringBuffer out=new StringBuffer();  out.append(Utils.extractClassname(getClassName()) + " " + getMethodName()+ " (");  String delim="";  for (int i=0; i < m.getArgs().length; i++) {    Type argType=m.getActualArgType(i);    out.append(delim);    out.append(Utils.extractClassname(argType.toString()));    delim=", ";  }  return out.append(")").toString();}  }
class C{  private void invoiceDone(){  if (m_invoice != null) {    if (m_linecount == 0)     m_invoice.delete(false); else {      m_invoice.processIt(MInvoice.ACTION_Prepare);      m_invoice.saveEx();      addLog(0,null,m_invoice.getGrandTotal(),m_invoice.getDocumentNo());    }  }  m_invoice=null;}  }
class C{  public void registerDefaultSupplierOrganisation() throws Exception {  String orgName="GreenPeaceOrgSupplier";  String supplierUserId=orgName + "_" + createUniqueKey();  supplier=orgSetup.createOrganization(supplierUserId,orgName,TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  supplierAdmin=orgSetup.getUser(supplierUserId,false);}  }
class C{  public int lengthKeyName(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_KEYNAME);}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public SchemaField(SchemaField prototype,String name){  this(name,prototype.type,prototype.properties,prototype.defaultValue);  args=prototype.args;}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int x2=BytesTo32Bits(src,srcIndex) ^ gSubKeys[OUTPUT_WHITEN];  int x3=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[OUTPUT_WHITEN + 1];  int x0=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[OUTPUT_WHITEN + 2];  int x1=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[OUTPUT_WHITEN + 3];  int k=ROUND_SUBKEYS + 2 * ROUNDS - 1;  int t0, t1;  for (int r=0; r < ROUNDS; r+=2) {    t0=Fe32_0(x2);    t1=Fe32_3(x3);    x1^=t0 + 2 * t1 + gSubKeys[k--];    x0=(x0 << 1 | x0 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);    x1=x1 >>> 1 | x1 << 31;    t0=Fe32_0(x0);    t1=Fe32_3(x1);    x3^=t0 + 2 * t1 + gSubKeys[k--];    x2=(x2 << 1 | x2 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);    x3=x3 >>> 1 | x3 << 31;  }  Bits32ToBytes(x0 ^ gSubKeys[INPUT_WHITEN],dst,dstIndex);  Bits32ToBytes(x1 ^ gSubKeys[INPUT_WHITEN + 1],dst,dstIndex + 4);  Bits32ToBytes(x2 ^ gSubKeys[INPUT_WHITEN + 2],dst,dstIndex + 8);  Bits32ToBytes(x3 ^ gSubKeys[INPUT_WHITEN + 3],dst,dstIndex + 12);}  }
class C{  protected void locateMatches(JavaProject javaProject,PossibleMatchSet matchSet,int expected) throws CoreException {  PossibleMatch[] possibleMatches=matchSet.getPossibleMatches(javaProject.getPackageFragmentRoots());  int length=possibleMatches.length;  if (this.progressMonitor != null && expected > length) {    this.progressWorked+=expected - length;    this.progressMonitor.worked(expected - length);  }  for (int index=0; index < length; ) {    int max=Math.min(MAX_AT_ONCE,length - index);    locateMatches(javaProject,possibleMatches,index,max);    index+=max;  }  this.patternLocator.clear();}  }
class C{  public Map<String,List<String>> toMultimap(boolean response){  Map<String,List<String>> result=new TreeMap<String,List<String>>(FIELD_NAME_COMPARATOR);  for (int i=0; i < namesAndValues.size(); i+=2) {    String fieldName=namesAndValues.get(i);    String value=namesAndValues.get(i + 1);    List<String> allValues=new ArrayList<String>();    List<String> otherValues=result.get(fieldName);    if (otherValues != null) {      allValues.addAll(otherValues);    }    allValues.add(value);    result.put(fieldName,Collections.unmodifiableList(allValues));  }  if (response && statusLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(statusLine)));  } else   if (requestLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(requestLine)));  }  return Collections.unmodifiableMap(result);}  }
class C{  public static void logError(String s,Throwable e){  if (e == null) {    e=new Exception(s);  }  System.out.flush();  System.err.println("ERROR: " + s + " "+ e.toString()+ " ------------------------------");  e.printStackTrace();synchronized (BaseTestCase.class) {    try {      FileChannel fc=FilePath.get("error.lock").open("rw");      FileLock lock;      while (true) {        lock=fc.tryLock();        if (lock != null) {          break;        }        Thread.sleep(10);      }      FileWriter fw=new FileWriter("error.txt",true);      PrintWriter pw=new PrintWriter(fw);      e.printStackTrace(pw);      pw.close();      fw.close();      lock.release();    } catch (    Throwable t) {      t.printStackTrace();    }  }  System.err.flush();}  }
class C{  @Override public boolean equals(Object o){  if (o == null || !(o instanceof BooleanClause))   return false;  BooleanClause other=(BooleanClause)o;  return this.query.equals(other.query) && this.occur == other.occur;}  }
class C{  @Override public void transmitDiff(final Task<Diff> result){  writeOutput(result);}  }
class C{  public HitonMb(IndependenceTest test,int depth,boolean symmetric){  if (test == null) {    throw new NullPointerException();  }  this.independenceTest=test;  this.variables=test.getVariables();  this.depth=depth;  this.symmetric=symmetric;}  }
class C{  private double Poisson(double x){  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));}  }
class C{  protected T_State enterEntryPoint(final int entryPoint){  throw new IllegalStateException(Error.ERROR_UNHANDLED_ENTRY_POINT.getDescription(entryPoint,getClass().getSimpleName()));}  }
class C{  public LagartoParser(String string,boolean emitStrings){  super(emitStrings);  initialize(UnsafeUtil.getChars(string));}  }
class C{  public int idDelta(int segment){  isValidIndex(segment);  return idDelta(this.data,this.segCount,segment);}  }
class C{  public JsonParser createJsonParser(File f) throws IOException, JsonParseException {  return _createJsonParser(new FileInputStream(f),_createContext(f,true));}  }
class C{  private BackgroundInitializer<?> checkName(final String name){  final BackgroundInitializer<?> init=initializers.get(name);  if (init == null) {    throw new NoSuchElementException("No child initializer with name " + name);  }  return init;}  }
class C{  private void createShader(){  mDefaultAngularFrequency=2.0f * Math.PI / DEFAULT_WAVE_LENGTH_RATIO / getWidth();  mDefaultAmplitude=getHeight() * DEFAULT_AMPLITUDE_RATIO;  mDefaultWaterLevel=getHeight() * DEFAULT_WATER_LEVEL_RATIO;  mDefaultWaveLength=getWidth();  Bitmap bitmap=Bitmap.createBitmap(getWidth(),getHeight(),Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  Paint wavePaint=new Paint();  wavePaint.setStrokeWidth(2);  wavePaint.setAntiAlias(true);  final int endX=getWidth() + 1;  final int endY=getHeight() + 1;  float[] waveY=new float[endX];  wavePaint.setColor(mBehindWaveColor);  for (int beginX=0; beginX < endX; beginX++) {    double wx=beginX * mDefaultAngularFrequency;    float beginY=(float)(mDefaultWaterLevel + mDefaultAmplitude * Math.sin(wx));    canvas.drawLine(beginX,beginY,beginX,endY,wavePaint);    waveY[beginX]=beginY;  }  wavePaint.setColor(mFrontWaveColor);  final int wave2Shift=(int)(mDefaultWaveLength / 4);  for (int beginX=0; beginX < endX; beginX++) {    canvas.drawLine(beginX,waveY[(beginX + wave2Shift) % endX],beginX,endY,wavePaint);  }  mWaveShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);  mViewPaint.setShader(mWaveShader);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.CHARACTER_CLASS_RANGE;}  }
class C{  public static Number power(Integer self,Integer exponent){  if (exponent >= 0) {    BigInteger answer=BigInteger.valueOf(self).pow(exponent);    if (answer.compareTo(BI_INT_MIN) >= 0 && answer.compareTo(BI_INT_MAX) <= 0) {      return answer.intValue();    } else {      return answer;    }  } else {    return power(self,(double)exponent);  }}  }
class C{  private static void usage(){  System.out.println("Syntax: EventFeedDemo <username> <password>");  System.out.println("\nThe username and password are used for " + "authentication.  The sample application will modify the specified " + "user's calendars so you may want to use a test account.");}  }
class C{  public static boolean integrity(Object o){  if ((o != null) && (o instanceof Integrity)) {    ((Integrity)o).integrity();  }  return true;}  }
class C{  private void write(String s) throws SAXException {  try {    output.write(s);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public void logAPIRequest(String customerId,String clientId,String userId,String userLogin,HttpServletRequest req){  StringBuilder log=new StringBuilder();  log.append("customerId:").append(customerId).append('\t');  log.append("clientId:").append(clientId).append('\t');  log.append("userId:").append(userId);  if (userLogin != null) {    log.append('(').append(userLogin).append(')');  }  log.append('\t');  String reqIp=getRemoteIP(req);  String reqMethod=req.getMethod();  String reqPath=req.getPathInfo();  String reqQuery=req.getQueryString();  log.append("request:").append(reqIp).append(' ').append(reqMethod).append(' ').append(reqPath);  if (reqQuery != null) {    log.append('?').append(reqQuery);  }  loggerAPI.info(log.toString());}  }
class C{  protected void findTop() throws IOException {  if (!source.hasTop()) {    return;  }  PropertiesIterator iter=new PropertiesIterator(source,currentRange,currentColumnFamilies,currentColumnFamiliesInclusive,group,workKey,elementConverter);  Properties topProperties=reduce(iter);  try {    topValue=elementConverter.getValueFromProperties(group,topProperties);    topKey=new Key(workKey.getRowData().getBackingArray(),group.getBytes(CommonConstants.UTF_8),elementConverter.buildColumnQualifier(group,topProperties),elementConverter.buildColumnVisibility(group,topProperties),elementConverter.buildTimestamp(topProperties));  } catch (  AccumuloElementConversionException e) {    throw new RuntimeException(e);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final boolean isPrecise(){  return true;}  }
class C{  public static GetEventsParams create(){  return new GetEventsParams();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  boolean firstNonZeroCoefficientPrinted=false;  for (int n=0; n < coefficients.length; n++) {    if (coefficients[n] != 0) {      if (firstNonZeroCoefficientPrinted)       sb.append(coefficients[n] > 0 ? " + " : " "); else       firstNonZeroCoefficientPrinted=true;      if (n == 0 || coefficients[n] != 1)       sb.append(Double.toString(coefficients[n]));      if (n > 0)       sb.append(" X^" + n);    }  }  return sb.toString();}  }
class C{  @DSComment("no action when removing callback") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.099 -0500",hash_original_method="C6393138E31F9EAAF3B1058E5B49E67E",hash_generated_method="5CC997F28F688299E6A370A6AB8EBED4") public void removeUpdates(LocationListener listener){  if (listener == null) {    throw new IllegalArgumentException("listener==null");  }  if (false) {    Log.d(TAG,"removeUpdates: listener = " + listener);  }  try {    ListenerTransport transport=mListeners.remove(listener);    if (transport != null) {      mService.removeUpdates(transport);    }  } catch (  RemoteException ex) {    Log.e(TAG,"removeUpdates: DeadObjectException",ex);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  @Override public void respond(String response){  getUser().send().message(response);}  }
class C{  public Iterator<Unit> iterator(){  if (mBody != null) {    Chain<Unit> units=mBody.getUnits();    return units.iterator(mHead,mTail);  } else {    return null;  }}  }
class C{  public void addItem(Object obj){  if (obj instanceof TimerRateHolder) {    super.addItem(obj);  } else {    Debug.error("TimerRateComboBox: Only TimerRateHolders can be added");  }}  }
class C{  private static void prependInteger(final List<Byte> list,final int number){  list.add(0,(byte)(number & 0xFF));  list.add(0,(byte)(number >> 8 & 0xFF));  list.add(0,(byte)(number >> 16 & 0xFF));  list.add(0,(byte)(number >> 24 & 0xFF));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void createFramebufferTexture(){  this.tex=glGenTextures();  glBindTexture(GL_TEXTURE_2D,tex);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,features,attributes,prodCatalogId,configWrapper,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  public int size(){  return innerChain.size();}  }
class C{  public LocationsBuilder add(long start,MockNode... nodes){  locs.put(start,Arrays.asList(nodes));  return this;}  }
class C{  public static void mapping(String mappedFieldName,Class<?> mappedClass,Class<?> targetClass){  throw new MappingErrorException(MSG.INSTANCE.message(mappingErrorException2,mappedFieldName,mappedClass.getSimpleName(),targetClass.getSimpleName()));}  }
class C{  public T casePackage(org.yakindu.base.types.Package object){  return null;}  }
class C{  public Vector3f subtractLocal(float subtractX,float subtractY,float subtractZ){  x-=subtractX;  y-=subtractY;  z-=subtractZ;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.030 -0500",hash_original_method="5080586E74AB22D43AADEE459D5D8F50",hash_generated_method="5080586E74AB22D43AADEE459D5D8F50") TFTPAckPacket(DatagramPacket datagram) throws TFTPPacketException {  super(TFTPPacket.ACKNOWLEDGEMENT,datagram.getAddress(),datagram.getPort());  byte[] data;  data=datagram.getData();  if (getType() != data[1])   throw new TFTPPacketException("TFTP operator code does not match type.");  _blockNumber=(((data[2] & 0xff) << 8) | (data[3] & 0xff));}  }
class C{  public Object clone(){  ParameterBlock theClone;  try {    theClone=(ParameterBlock)super.clone();  } catch (  Exception e) {    return null;  }  if (sources != null) {    theClone.setSources((Vector)sources.clone());  }  if (parameters != null) {    theClone.setParameters((Vector)parameters.clone());  }  return (Object)theClone;}  }
class C{  public ReflectElement(ReflectGetter<E> getter,ReflectSetter<E> setter){  this.getter=getter;  this.setter=setter;}  }
class C{  RPairList(){}  }
class C{  private static void blur(int[] srcPixels,int[] dstPixels,int width,int height,float[] kernel,int radius){  float a;  float r;  float g;  float b;  int ca;  int cr;  int cg;  int cb;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      a=r=g=b=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset];        float blurFactor=kernel[radius + i];        a+=blurFactor * ((pixel >> 24) & 0xFF);        r+=blurFactor * ((pixel >> 16) & 0xFF);        g+=blurFactor * ((pixel >> 8) & 0xFF);        b+=blurFactor * ((pixel) & 0xFF);      }      ca=(int)(a + 0.5f);      cr=(int)(r + 0.5f);      cg=(int)(g + 0.5f);      cb=(int)(b + 0.5f);      dstPixels[index]=((ca > 255 ? 255 : ca) << 24) | ((cr > 255 ? 255 : cr) << 16) | ((cg > 255 ? 255 : cg) << 8)| (cb > 255 ? 255 : cb);      index+=height;    }  }}  }
class C{  public static AuthRequest forEmail(final String email){  final AccountExternalId.Key i=new AccountExternalId.Key(SCHEME_MAILTO,email);  final AuthRequest r=new AuthRequest(i.get());  r.setEmailAddress(email);  return r;}  }
class C{  public void addEventListener2(IVideoSharingListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Add a video sharing event listener");  }  try {synchronized (mLock) {      mBroadcaster.addEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private static Field fieldForName(Class<?> type,String fieldName){  for (  Field f : type.getDeclaredFields()) {    if (fieldName.equals(f.getName())) {      return f;    }  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Builder builder(){  return new Builder(new RegisterRequest());}  }
class C{  public static org.oscm.vo.VOServiceOperationParameterValues convertToApi(org.oscm.internal.vo.VOServiceOperationParameterValues oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceOperationParameterValues newVO=new org.oscm.vo.VOServiceOperationParameterValues();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameterId(oldVO.getParameterId());  newVO.setParameterName(oldVO.getParameterName());  newVO.setParameterValue(oldVO.getParameterValue());  newVO.setMandatory(oldVO.isMandatory());  newVO.setType(EnumConverter.convert(oldVO.getType(),OperationParameterType.class));  newVO.setValues(oldVO.getValues());  return newVO;}  }
class C{  public void eliminarRoles(String[] roles){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateInTokenField(CAMPO_ID,roles));  deleteVO(qual.toString(),TABLE_NAME);  qual.setLength(0);  qual.append("WHERE ").append(DBUtils.generateInTokenField(PermisoRolDBEntityImpl.CAMPO_ID_ROL,roles));  deleteVO(qual.toString(),PermisoRolDBEntityImpl.TABLE_NAME);}  }
class C{  public CacheInfo(final String cacheName){  this.name=cacheName;}  }
class C{  public TIntIntHashMapDecorator(TIntIntHashMap map){  super();  this._map=map;}  }
class C{  public static long readInt64(byte[] bytes,int offset){  return (bytes[offset] & 0xffl) | ((bytes[offset + 1] & 0xffl) << 8) | ((bytes[offset + 2] & 0xffl) << 16)| ((bytes[offset + 3] & 0xffl) << 24)| ((bytes[offset + 4] & 0xffl) << 32)| ((bytes[offset + 5] & 0xffl) << 40)| ((bytes[offset + 6] & 0xffl) << 48)| ((bytes[offset + 7] & 0xffl) << 56);}  }
class C{  public TFloatFloatHashMap(int initialCapacity,TFloatHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  protected void end(){  elapsedTime=System.currentTimeMillis() - elapsedTime;}  }
class C{  public int next(){  int node;  do {    node=_currentNode;    _currentNode=m_traverser.next(_startNode,_currentNode);  } while (node != DTM.NULL && (getExpandedTypeID(node) != _nodeType && getNodeType(node) != _nodeType));  return (node == DTM.NULL ? DTM.NULL : returnNode(node));}  }
class C{  public static JPanel createDialogButtonPanel(JButton[] jbPositives,JButton jbNegative,JButton[] jbOthers,boolean resizable,String insets){  if (insets == null) {    insets="";  } else {    insets+=",";  }  JPanel panel=new JPanel(new MigLayout(insets + "nogrid, fillx, aligny 100%"));  if (jbPositives != null) {    for (    JButton jButton : jbPositives) {      panel.add(jButton,"tag ok");    }  }  if (jbOthers != null) {    for (    JButton jButton : jbOthers) {      panel.add(jButton,"sgx");    }  }  if (jbNegative != null) {    panel.add(jbNegative,"tag cancel");  }  return panel;}  }
class C{  public void firePropertyChange(PropertyChangeEvent event){  Object oldValue=event.getOldValue();  Object newValue=event.getNewValue();  if (oldValue == null || newValue == null || !oldValue.equals(newValue)) {    String name=event.getPropertyName();    PropertyChangeListener[] common=this.map.get(null);    PropertyChangeListener[] named=(name != null) ? this.map.get(name) : null;    fire(common,event);    fire(named,event);  }}  }
class C{  public synchronized boolean collides(final Entity entity,final double x,final double y){  return collides(entity,x,y,true);}  }
class C{  public void sendResetRoundDeployment(){  send(new Packet(Packet.COMMAND_RESET_ROUND_DEPLOYMENT));}  }
class C{  public TupleQueryResultHandlerException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public WarehouseServiceImpl(final GenericDAO<Warehouse,Long> genericDao,final GenericDAO<Shop,Long> shopDao,final GenericDAO<ShopWarehouse,Long> shopWarehouseDao){  super(genericDao);  this.shopDao=shopDao;  this.shopWarehouseDao=shopWarehouseDao;}  }
class C{  private void appendCheckedStatus(AccessibilityNodeInfoCompat node,AccessibilityEvent event,SpannableStringBuilder descriptionBuilder){  if (node.isCheckable() && !mRuleSwitch.accept(node,event)) {    CharSequence checkedString=mContext.getString(node.isChecked() ? R.string.value_checked : R.string.value_not_checked);    StringBuilderUtils.appendWithSeparator(descriptionBuilder,checkedString);  }}  }
class C{  public Deamon(Object monitor){  this.monitor=monitor;}  }
class C{  public void emergencyClose(){  setShutdown();  services.emergencyClose();  if (directChannel != null) {    directChannel.emergencyClose();  }}  }
class C{  protected boolean shouldSpawnJvm(){  return true;}  }
class C{  public String sqlMetadata_operatorSignatures(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_operatorSignatures(catalogName,schemaName);}  }
class C{  private void writeFormBinary(OutputStream writer,String key,Binary value) throws IOException {  if (!value.isCanceled()) {    String binaryFieldBuilder=startBoundary + "\r\n" + "Content-Disposition: form-data; name=\""+ key+ "\""+ "; filename=\""+ value.getFileName()+ "\"\r\n"+ "Content-Type: "+ value.getMimeType()+ "\r\n"+ "Content-Transfer-Encoding: binary\r\n\r\n";    writer.write(binaryFieldBuilder.getBytes());    if (writer instanceof CounterOutputStream) {      ((CounterOutputStream)writer).write(value.getLength());    } else {      value.onWriteBinary(writer);    }  }}  }
class C{  public String unprunedTipText(){  return "Whether pruning is performed.";}  }
class C{  public void removeZoomListener(ZoomListener listener){  if (mPinchZoom != null) {    mPinchZoom.removeZoomListener(listener);  }}  }
class C{  public void render(Graphics2D g){  AffineTransform ot=g.getTransform();  AffineTransform lt=new AffineTransform();  lt.translate(this.transform.getTranslationX() * SCALE,this.transform.getTranslationY() * SCALE);  lt.rotate(this.transform.getRotation());  g.transform(lt);  for (  BodyFixture fixture : this.fixtures) {    Convex convex=fixture.getShape();    Graphics2DRenderer.render(g,convex,SCALE,color);  }  g.setTransform(ot);}  }
class C{  private static boolean isMerge(InstructionHandle handle){  if (handle.hasTargeters()) {    InstructionTargeter[] targeterList=handle.getTargeters();    for (    InstructionTargeter targeter : targeterList) {      if (targeter instanceof BranchInstruction) {        return true;      }    }  }  return false;}  }
class C{  public static int find(byte[] a,int fromIndex,int toIndex,byte key){  int result=-1;  if (fromIndex < 0) {    fromIndex=0;  }  toIndex=Math.min(toIndex,a.length);  for (int i=fromIndex; fromIndex < toIndex && result == -1 && i < toIndex; i++) {    if (a[i] == key) {      result=i;    }  }  return result;}  }
class C{  protected ImplementationFactory(){}  }
class C{  private void calcEntryCountIncludingStacks(List<BarEntry> yVals){  mEntryCountStacks=0;  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getVals();    if (vals == null)     mEntryCountStacks++; else     mEntryCountStacks+=vals.length;  }}  }
class C{  public Optional<Duration> extent(){  return extent;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter number of disks: ");  int n=input.nextInt();  System.out.println("The move are:");  moveDisks(n,'A','B','C');  System.out.println(numberOfMoves + " moves are needed to move " + n+ " disks from tower A to tower B.");}  }
class C{  public <T>T unmarshal(final HierarchicalStreamReader reader){  return unmarshal(reader,null,null);}  }
class C{  public void doInference(List data){  for (int i=0; i < data.size(); i++) {    Observation obsr=(Observation)data.get(i);    classify(obsr);  }}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToSAXHandler();    wasReset=true;  }  return wasReset;}  }
class C{  public boolean isCompactionFlow(){  return isCompactionFlow;}  }
class C{  @Override public void reset(){  mIdents.clear();  mEmergencyIdents.clear();  resetState();}  }
class C{  public static void compile(final Iterable<String> code,final MachineState state) throws ParseException {  state.clear();  final String[] lines=Iterables.toArray(code,String.class);  if (lines.length > Settings.maxLinesPerProgram) {    throw new ParseException(Constants.MESSAGE_TOO_MANY_LINES,Settings.maxLinesPerProgram,0,0);  }  for (int lineNumber=0; lineNumber < lines.length; lineNumber++) {    lines[lineNumber]=lines[lineNumber].toUpperCase(Locale.ENGLISH);  }  state.code=lines;  try {    final List<Validator> validators=new ArrayList<>();    for (int lineNumber=0; lineNumber < lines.length; lineNumber++) {      if (lines[lineNumber].length() > Settings.maxColumnsPerLine) {        throw new ParseException(Constants.MESSAGE_LINE_TOO_LONG,lineNumber,Settings.maxColumnsPerLine,Settings.maxColumnsPerLine);      }      final Matcher commentMatcher=PATTERN_COMMENT.matcher(lines[lineNumber]);      final String line=commentMatcher.replaceFirst("");      final Matcher lineMatcher=PATTERN_LINE.matcher(line);      if (lineMatcher.matches()) {        parseLabel(lineMatcher,state,lineNumber);        parseInstruction(lineMatcher,state,lineNumber,validators);      } else {        throw new ParseException(Constants.MESSAGE_UNEXPECTED_TOKEN,lineNumber,0,0);      }    }    for (    final Validator validator : validators) {      validator.accept(state);    }  } catch (  final ParseException e) {    state.clear();    state.code=lines;    throw e;  }}  }
class C{  private static String classDescriptorToInternalName(String descriptor){  return descriptor.substring(1,descriptor.length() - 1);}  }
class C{  public NetworkBuilder<N,E> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  public Matrix4 rotate(Vector3 axis,float degrees){  if (degrees == 0)   return this;  quat.set(axis,degrees);  return rotate(quat);}  }
class C{  public ReilMemory(final Endianness endianness){  this.endianness=Preconditions.checkNotNull(endianness,"Error: Argument endianness can't be null");}  }
class C{  private PropertyChangeListener createVSBPropertyChangeListener(){  return getHandler();}  }
class C{  static int toCodePoint(char ch){  int codePoint=ch;  return codePoint;}  }
class C{  public XObject eval(Node contextNode,String str) throws TransformerException {  return eval(contextNode,str,contextNode);}  }
class C{  public Cow(){  super(createImageIcon("tooltip/cow.gif",getString("ToolTipDemo.bessie")));  setAlignmentX(CENTER_ALIGNMENT);  cowgon.addPoint(3,20);  cowgon.addPoint(44,4);  cowgon.addPoint(79,15);  cowgon.addPoint(130,11);  cowgon.addPoint(252,5);  cowgon.addPoint(181,17);  cowgon.addPoint(301,45);  cowgon.addPoint(292,214);  cowgon.addPoint(269,209);  cowgon.addPoint(266,142);  cowgon.addPoint(250,161);  cowgon.addPoint(235,218);  cowgon.addPoint(203,206);  cowgon.addPoint(215,137);  cowgon.addPoint(195,142);  cowgon.addPoint(143,132);  cowgon.addPoint(133,189);  cowgon.addPoint(160,200);  cowgon.addPoint(97,196);  cowgon.addPoint(107,182);  cowgon.addPoint(118,185);  cowgon.addPoint(110,144);  cowgon.addPoint(59,77);  cowgon.addPoint(30,82);  cowgon.addPoint(30,35);  cowgon.addPoint(15,36);}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String xoredFlags=environment.getNextVariableString();  final String combinedFlags=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,xoredFlags));  instructions.add(ReilHelpers.createOr(offset + 1,OperandSize.BYTE,xoredFlags,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,combinedFlags));  return new Pair<OperandSize,String>(OperandSize.BYTE,combinedFlags);}  }
class C{  public <A extends Annotation>Expressions buildSharePermissionExpressions(final PersistentResource resource){  PermissionCondition condition=new PermissionCondition(SharePermission.class,resource);  Class<?> resourceClass=resource.getResourceClass();  if (!entityDictionary.entityHasChecksForPermission(resourceClass,SharePermission.class)) {    SharePermissionExpression unshared=new SharePermissionExpression(condition);    return new Expressions(unshared,unshared);  }  final Function<Check,Expression> deferredCheckFn=getDeferredExpressionFor(resource,null);  final Function<Check,Expression> immediateCheckFn=getImmediateExpressionFor(resource,null);  final Function<Function<Check,Expression>,Expression> expressionFunction=null;  return new Expressions(expressionFunction.apply(deferredCheckFn),expressionFunction.apply(immediateCheckFn));}  }
class C{  protected static boolean inputOperandsAreRegisterLiteral(final ReilInstruction instruction){  final OperandType firstOperandType=instruction.getFirstOperand().getType();  final OperandType secondOperandType=instruction.getSecondOperand().getType();  return (firstOperandType == OperandType.REGISTER) && (secondOperandType == OperandType.INTEGER_LITERAL);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  GeometryFactory factory=new GeometryFactory();  double distTolerance=10;  boolean loseNoFeatures=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  distTolerance=Double.parseDouble(args[2]);  loseNoFeatures=Boolean.parseBoolean(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    if (shapeType.getBaseType() == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYGON;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE) {      outputShapeType=ShapeType.POLYLINE;    } else {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    int numOutputFields=input.getAttributeTable().getFieldCount() + 1;    int numInputFields=input.getAttributeTable().getFieldCount();    DBFField[] inputFields=input.getAttributeTable().getAllFields();    DBFField fields[]=new DBFField[numOutputFields];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    System.arraycopy(inputFields,0,fields,1,numInputFields);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      Object[] attData=input.getAttributeTable().getRecord(recordNum - 1);      recJTS=record.getGeometry().getJTSGeometries();      ArrayList<com.vividsolutions.jts.geom.Geometry> geomList=new ArrayList<>();      for (int a=0; a < recJTS.length; a++) {        geomList.add(recJTS[a]);      }      DouglasPeuckerSimplifier dps=new DouglasPeuckerSimplifier(factory.buildGeometry(geomList));      dps.setDistanceTolerance(distTolerance);      com.vividsolutions.jts.geom.Geometry outputGeom=dps.getResultGeometry();      if (outputGeom.isEmpty() && loseNoFeatures) {        outputGeom=factory.buildGeometry(geomList);      }      if (!outputGeom.isEmpty()) {        for (int a=0; a < outputGeom.getNumGeometries(); a++) {          com.vividsolutions.jts.geom.Geometry g=outputGeom.getGeometryN(a);          if (g instanceof com.vividsolutions.jts.geom.Polygon && !g.isEmpty()) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;            ArrayList<ShapefilePoint> pnts=new ArrayList<>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] buffCoords=p.getExteriorRing().getCoordinates();            if (!Topology.isLineClosed(buffCoords)) {              System.out.println("Exterior ring not closed.");            }            if (Topology.isClockwisePolygon(buffCoords)) {              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            } else {              for (i=buffCoords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              buffCoords=p.getInteriorRingN(b).getCoordinates();              if (!Topology.isLineClosed(buffCoords)) {                System.out.println("Interior ring not closed.");              }              if (Topology.isClockwisePolygon(buffCoords)) {                for (i=buffCoords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              } else {                for (i=0; i < buffCoords.length; i++) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());            Object[] rowData=new Object[numOutputFields];            rowData[0]=new Double(recordNum - 1);            System.arraycopy(attData,0,rowData,1,numInputFields);            output.addRecord(wbPoly,rowData);          } else           if (g instanceof com.vividsolutions.jts.geom.LineString && !g.isEmpty()) {            LineString ls=(LineString)g;            ArrayList<ShapefilePoint> pnts=new ArrayList<>();            int[] parts={0};            Coordinate[] coords=ls.getCoordinates();            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            Object[] rowData=new Object[numOutputFields];            rowData[0]=new Double(recordNum - 1);            System.arraycopy(attData,0,rowData,1,numInputFields);            output.addRecord(wbGeometry,rowData);          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress(progress);      }    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void propertyChange(PropertyChangeEvent pce){  resetTimeBounds();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void addLineSegments(Coordinate[] pts){  double lineLen=0.0;  for (int i=0; i < pts.length - 1; i++) {    double segmentLen=pts[i].distance(pts[i + 1]);    if (segmentLen == 0.0)     continue;    lineLen+=segmentLen;    double midx=(pts[i].x + pts[i + 1].x) / 2;    lineCentSum.x+=segmentLen * midx;    double midy=(pts[i].y + pts[i + 1].y) / 2;    lineCentSum.y+=segmentLen * midy;  }  totalLength+=lineLen;  if (lineLen == 0.0 && pts.length > 0)   addPoint(pts[0]);}  }
class C{  private static boolean versionMatches(Integer v1,Integer v2){  if (v1 == null || v1 == 0 || v2 == null || v2 == 0) {    return true;  }  return v1.equals(v2);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("RStatusCategory[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  protected void parseClass() throws SyntaxError, IOException {  String doc=scanner.docComment;  int mod=parseModifiers(MM_CLASS | MM_MEMBER);  parseNamedClass(mod,PACKAGE,doc);}  }
class C{  public HeatMap(Integer gridSize){  this.gridSize=gridSize;  this.values=new ArrayList<Tuple<Coord,Double>>();}  }
class C{  public void prepare(){  prepare(null);}  }
class C{  public RefactoringDescriptorProxyAdapter(final RefactoringDescriptor descriptor){  Assert.isNotNull(descriptor);  fDescriptor=descriptor;}  }
class C{  public static void reverse(float[] array){  int len=array.length - 1;  int len2=array.length / 2;  for (int i=0; i < len2; i++) {    float tmp=array[i];    array[i]=array[len - i];    array[len - i]=tmp;  }}  }
class C{  private void testExportImportOneWithMarker(TrackFileFormat trackFileFormat){  addTrackWithMarker();  exportImport(trackFileFormat);  assertTrue(EndToEndTestUtils.SOLO.waitForText(EndToEndTestUtils.trackName));  EndToEndTestUtils.SOLO.clickOnText(EndToEndTestUtils.trackName);  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.track_detail_chart_tab));  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_edit),true);  instrumentation.waitForIdleSync();  assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.trackName));  assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.activityType));  assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.trackDescription));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.generic_cancel));  if (EndToEndTestUtils.hasGpsSignal) {    EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_markers),true);    assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.WAYPOINT_NAME + 1));    assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.WAYPOINT_TYPE + 1));    assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.WAYPOINT_DESCRIPTION + 1));    assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.WAYPOINT_NAME + 2));    assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.WAYPOINT_TYPE + 2));    assertTrue(EndToEndTestUtils.SOLO.searchText(EndToEndTestUtils.WAYPOINT_DESCRIPTION + 2));  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getImmutable_();}  }
class C{  public boolean canGetFile(String path){  return canGetFile(new File(path));}  }
class C{  protected void paintCaption(Graphics g,Rectangle rect){  String s=getTargetLabel();  if (s.equals("")) {    return;  }  g.setFont(getTargetFont());  FontMetrics fm=g.getFontMetrics();  String str=getTargetLabel();  int width=fm.stringWidth(str);  int textx=rect.x + (rect.width - width) / 2;  int texty=rect.y + CAPTION_MARGIN_TOP + fm.getAscent();  int sepy=rect.y + rect.height - CAPTION_SEPARATOR_HEIGHT / 2;  g.setColor(isTargetEnabled() ? getForegroundColor() : getDisabledColor());  g.drawString(s,textx,texty);  draw3DRect(g,rect.x,sepy,rect.width,2,false);}  }
class C{  public int read() throws IOException {  this.readInt=this.is.read();  this.readChar=(char)this.readInt;  return this.readInt;}  }
class C{  public void readDocs(Document[] docs,DocList ids,Set<String> fields) throws IOException {  final DocIterator iter=ids.iterator();  for (int i=0; i < docs.length; i++) {    docs[i]=doc(iter.nextDoc(),fields);  }}  }
class C{  public String alternate(){  current++;  current%=alternates.length;  return "";}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=PKIXExtensions.SubjectInfoAccess_Id;    this.critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  static private String LONG_Max_Plus(){  return "9223372036854775808";}  }
class C{  public void flush(){  flush(FlushReason.EXPLICIT);}  }
class C{  public static boolean isProtected(int accflags){  return (accflags & PROTECTED) != 0;}  }
class C{  public void testPutWhenOffsetIsNonZero(){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(40);  byteBuffer.order(ByteOrder.nativeOrder());  ShortBuffer shortBuffer=byteBuffer.asShortBuffer();  short[] source={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};  shortBuffer.put(source,2,2);  shortBuffer.put(source,4,2);  assertEquals(4,shortBuffer.get(0));  assertEquals(5,shortBuffer.get(1));  assertEquals(6,shortBuffer.get(2));  assertEquals(7,shortBuffer.get(3));}  }
class C{  public void minLocal(Vector3f other){  x=other.x < x ? other.x : x;  y=other.y < y ? other.y : y;  z=other.z < z ? other.z : z;}  }
class C{  @SuppressWarnings("unchecked") private void registerDef(Instruction s,BasicBlock b,String a){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  if (heapTypes != null) {    if (!heapTypes.contains(a)) {      return;    }  }  HeapVariable<Object> H=findOrCreateHeapVariable(a);  H.registerDef(b);  HeapOperand<Object>[] Hprime=new HeapOperand[1];  Hprime[0]=new HeapOperand<Object>(H);  Hprime[0].setInstruction(s);  defs.put(s,Hprime);}  }
class C{  @Override public double derivative(final double x){  final double xn=(x - average) / sigma;  return gaussian.op(xn) / sigma;}  }
class C{  public static GetBucketImageResult parseBucketImage(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    GetBucketImageResult result=new GetBucketImageResult();    result.SetBucketName(root.getChildText("Name"));    result.SetDefault404Pic(root.getChildText("Default404Pic"));    result.SetStyleDelimiters(root.getChildText("StyleDelimiters"));    result.SetStatus(root.getChildText("Status"));    result.SetIsAutoSetContentType(root.getChildText("AutoSetContentType").equals("True"));    result.SetIsForbidOrigPicAccess(root.getChildText("OrigPicForbidden").equals("True"));    result.SetIsSetAttachName(root.getChildText("SetAttachName").equals("True"));    result.SetIsUseStyleOnly(root.getChildText("UseStyleOnly").equals("True"));    result.SetIsUseSrcFormat(root.getChildText("UseSrcFormat").equals("True"));    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public List<AbstractOption> popOptionsUpTo(AbstractOption needle){  List<AbstractOption> result=new ArrayList<AbstractOption>();  PluginOptionContainer container=getPlugin().getPluginOptions();  if (!container.contains(needle)) {    return result;  }  while (container.size() > 0) {    AbstractOption last=container.getByIndex(container.size() - 1);    if (last == needle) {      break;    }    container.remove(last);    result.add(last);  }  log().info("Popped: " + result.toString());  return result;}  }
class C{  protected boolean pageDown(TextView widget,Spannable buffer){  return false;}  }
class C{  private String generateTransactionId(final Long officeId){  final AppUser user=this.context.authenticatedUser();  final Long time=System.currentTimeMillis();  final String uniqueVal=String.valueOf(time) + user.getId() + officeId;  final String transactionId=Long.toHexString(Long.parseLong(uniqueVal));  return transactionId;}  }
class C{  public boolean isNewLineAfterDeclaration(){  return newLineAfterDeclaration;}  }
class C{  public DriverTask deleteVolumeMirror(VolumeMirror mirror){  LOG.info("Deleting volume mirror {}",mirror);  DellSCDriverTask task=new DellSCDriverTask("deleteVolumeMirror");  try {    StorageCenterAPI api=connectionManager.getConnection(mirror.getStorageSystemId());    ScCopyMirrorMigrate cmm=api.getMirror(mirror.getNativeId());    api.deleteMirror(cmm.instanceId);    api.deleteVolume(cmm.destinationVolume.instanceId);    task.setStatus(TaskStatus.READY);  } catch (  StorageCenterAPIException|DellSCDriverException dex) {    String error=String.format("Error deleting volume mirror %s: %s",mirror.getNativeId(),dex);    LOG.error(error);    task.setFailed(error);  }  return task;}  }
class C{  private void computeClosure(){  for (Enumeration<GraphNode> e=enumerateVertices(); e.hasMoreElements(); ) {    ValueGraphVertex v=(ValueGraphVertex)e.nextElement();    if (v.getName() instanceof Register) {      if (v.getLabel() instanceof Register) {        if (v.getName() != v.getLabel()) {          ValueGraphVertex v2=getVertex(v.getLabel());          if (VM.VerifyAssertions) {            if (v2.getName() instanceof Register && v2.getLabel() instanceof Register && v2.getLabel() != v2.getName()) {              VM._assert(VM.NOT_REACHED);            }          }          v.copyVertex(v2);        }      }    }  }}  }
class C{  public static <V,V1 extends V,V2 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2);}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public CompositeStageActivityTypes(final StageActivityTypes... components){  for (  StageActivityTypes c : components) {    addActivityTypes(c);  }}  }
class C{  public void mouseReleased(MouseEvent e){  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();  down=null;  vv.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public static boolean bytesEqual(byte[] a1,byte[] a2){  if (a1 == a2) {    return true;  } else   if (a1 == null || a2 == null) {    return false;  } else   if (a1.length != a2.length) {    return false;  } else {    for (int i=0; i < a1.length; i++)     if (a1[i] != a2[i])     return false;  }  return true;}  }
class C{  private static void filterBlacklistedPlugins(){  Iterator<Plugin> i=ALL_PLUGINS.iterator();  while (i.hasNext()) {    Plugin plugin=i.next();    if (plugin.isIncompatible()) {      plugin.disabled=true;      i.remove();      INCOMPATIBLE_PLUGINS.add(plugin);    }  }}  }
class C{  public T caseAutoTransition_(AutoTransition_ object){  return null;}  }
class C{  protected void registerHorizontalGroupAttributes(){  addAttributeProcessor(new HorizontalGroupAlignmentLmlAttribute(),"groupAlign");  addAttributeProcessor(new HorizontalGroupFillLmlAttribute(),"groupFill");  addAttributeProcessor(new HorizontalGroupPaddingBottomLmlAttribute(),"groupPadBottom");  addAttributeProcessor(new HorizontalGroupPaddingLeftLmlAttribute(),"groupPadLeft");  addAttributeProcessor(new HorizontalGroupPaddingLmlAttribute(),"groupPad","padding");  addAttributeProcessor(new HorizontalGroupPaddingRightLmlAttribute(),"groupPadRight");  addAttributeProcessor(new HorizontalGroupPaddingTopLmlAttribute(),"groupPadTop");  addAttributeProcessor(new HorizontalGroupReverseLmlAttribute(),"reverse");  addAttributeProcessor(new HorizontalGroupSpacingLmlAttribute(),"groupSpace","spacing");}  }
class C{  public colgroup addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public T caseIndexedAccessExpression(IndexedAccessExpression object){  return null;}  }
class C{  public UpdateRequest upsert(Map source,XContentType contentType){  safeUpsertRequest().source(source,contentType);  return this;}  }
class C{  public TextureAtlasElement(TextureAtlas atlas,Object imageSource){  if (atlas == null) {    String msg=Logging.getMessage("nullValue.AtlasIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (WWUtil.isEmpty(imageSource)) {    String msg=Logging.getMessage("nullValue.ImageSource");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.atlas=atlas;  this.imageSource=imageSource;}  }
class C{  public List<List<AttributeTypeAndValue>> parse() throws IOException {  List<List<AttributeTypeAndValue>> list=new ArrayList<List<AttributeTypeAndValue>>();  String attType=nextAT();  if (attType == null) {    return list;  }  List<AttributeTypeAndValue> atav=new ArrayList<AttributeTypeAndValue>();  while (true) {    if (pos == chars.length) {      atav.add(new AttributeTypeAndValue(attType,new AttributeValue("",false)));      list.add(0,atav);      return list;    }switch (chars[pos]) {case '"':      atav.add(new AttributeTypeAndValue(attType,new AttributeValue(quotedAV(),hasQE)));    break;case '#':  atav.add(new AttributeTypeAndValue(attType,new AttributeValue(hexAV(),encoded)));break;case '+':case ',':case ';':atav.add(new AttributeTypeAndValue(attType,new AttributeValue("",false)));break;default :atav.add(new AttributeTypeAndValue(attType,new AttributeValue(escapedAV(),hasQE)));}if (pos >= chars.length) {list.add(0,atav);return list;}if (chars[pos] == ',' || chars[pos] == ';') {list.add(0,atav);atav=new ArrayList<AttributeTypeAndValue>();} else if (chars[pos] != '+') {throw new IOException("Invalid distinguished name string");}pos++;attType=nextAT();if (attType == null) {throw new IOException("Invalid distinguished name string");}}}  }
class C{  @Override public void updateSQLXML(String columnLabel,SQLXML xmlObject) throws SQLException {  throw unsupported("SQLXML");}  }
class C{  public void editButtonActionPerformed(){  nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(AcelaNode)_memo.getTrafficController().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeAddrStatic.setText(Integer.toString(nodeAddress));  nodeAddrBox.setVisible(false);  nodeAddrField.setVisible(false);  nodeAddrStatic.setVisible(true);  nodeType=curNode.getNodeType();  nodeTypeBox.setSelectedIndex(nodeType);  nodeTypeBox.setVisible(true);  nodeTypeStatic.setText(AcelaNode.getModuleNames()[nodeType]);  nodeTypeStatic.setVisible(false);  int numoutputbits=curNode.getNumOutputBitsPerCard();  if (numoutputbits > 0) {    for (int o=0; o < numoutputbits; o++) {      if (curNode.getOutputInit(o) == 0) {        initialState[o]=rb.getString("InitialStateOff");      } else {        initialState[o]=rb.getString("InitialStateOn");      }      if (curNode.getOutputWired(o) == 0) {        outputWired[o]=rb.getString("OutputWiredNO");      } else {        outputWired[o]=rb.getString("OutputWiredNC");      }      if (curNode.getOutputType(o) == 0) {        outputType[o]=rb.getString("OutputTypeONOFF");      } else {        if (curNode.getOutputType(o) == 1) {          outputType[o]=rb.getString("OutputTypePULSE");        } else {          outputType[o]=rb.getString("OutputTypeBLINK");        }      }      outputLength[o]=String.valueOf(curNode.getOutputLength(o));    }  }  int numsensorbits=curNode.getNumSensorBitsPerCard();  if (numsensorbits > 0) {    for (int i=0; i < numsensorbits; i++) {      if (curNode.getSensorType(i) == 0) {        filterType[i]=rb.getString("FilterTypeNoise");      } else       if (curNode.getSensorType(i) == 1) {        filterType[i]=rb.getString("FilterTypeDebounce");      } else       if (curNode.getSensorType(i) == 2) {        filterType[i]=rb.getString("FilterTypeCarGap");      } else {        filterType[i]=rb.getString("FilterTypeDirtyTrack");      }      if (curNode.getSensorPolarity(i) == 0) {        filterPolarity[i]=rb.getString("FilterNormalPolarity");      } else {        filterPolarity[i]=rb.getString("FilterInversePolarity");      }      filterThreshold[i]=String.valueOf(curNode.getSensorThreshold(i));    }  }  editMode=true;  addButton.setVisible(false);  editButton.setVisible(false);  deleteButton.setVisible(false);  doneButton.setVisible(false);  updateButton.setVisible(true);  cancelButton.setVisible(true);  statusText1.setText(editStatus1);  statusText2.setText(editStatus2);  statusText3.setText(editStatus3);  d8outputConfigModel.setEditMode(true);  swoutputConfigModel.setEditMode(true);  ymoutputConfigModel.setEditMode(true);  TBoutputConfigModel.setEditMode(true);  TBsensorConfigModel.setEditMode(true);  smoutputConfigModel.setEditMode(true);  wmsensorConfigModel.setEditMode(true);  sysensorConfigModel.setEditMode(true);  contentPane.repaint();}  }
class C{  public static final double clampAngleDegree(double angle){  if (angle >= 360.0)   angle%=360.0d;  if (angle < 0.0) {    angle%=360.0d;    if (angle < 0.0)     angle+=360;  }  return angle;}  }
class C{  public boolean isNoLocal(){  return noLocal;}  }
class C{  public void paintComponent(java.awt.Graphics g){  if (!(drawStripes=isOpaque())) {    super.paintComponent(g);    return;  }  updateZebraColors();  final java.awt.Insets insets=getInsets();  final int w=getWidth() - insets.left - insets.right;  final int h=getHeight() - insets.top - insets.bottom;  final int x=insets.left;  int y=insets.top;  int nRows=0;  int startRow=0;  int rowHeight=getRowHeight();  if (rowHeight > 0) {    nRows=h / rowHeight;  } else {    final int nItems=getRowCount();    rowHeight=17;    for (int i=0; i < nItems; i++, y+=rowHeight) {      Rectangle rect=getRowBounds(i);      rowHeight=rect != null ? rect.height : rowHeight;      g.setColor(getSelectionModel().isRowSelected(i) ? defaultRenderer.getBackgroundSelectionColor() : rowColors[i & 1]);      g.fillRect(x,y,w,rowHeight);    }    nRows=nItems + (insets.top + h - y) / rowHeight;    startRow=nItems;  }  for (int i=startRow; i < nRows; i++, y+=rowHeight) {    g.setColor(getSelectionModel().isRowSelected(i) ? defaultRenderer.getBackgroundSelectionColor() : rowColors[i & 1]);    g.fillRect(x,y,w,rowHeight);  }  final int remainder=insets.top + h - y;  if (remainder > 0) {    g.setColor(rowColors[nRows & 1]);    g.fillRect(x,y,w,remainder);  }  setOpaque(false);  super.paintComponent(g);  setOpaque(true);}  }
class C{  public static byte[] decode(String s){  return decode(s,NO_OPTIONS);}  }
class C{  public ObjectMatrix1D make(ObjectMatrix1D[] parts){  if (parts.length == 0)   return make(0);  int size=0;  for (int i=0; i < parts.length; i++)   size+=parts[i].size();  ObjectMatrix1D vector=make(size);  size=0;  for (int i=0; i < parts.length; i++) {    vector.viewPart(size,parts[i].size()).assign(parts[i]);    size+=parts[i].size();  }  return vector;}  }
class C{  protected void useAuthentication(String authToken){  this.authToken=authToken;}  }
class C{  public boolean onOverrideUrlLoading(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null && plugin.onOverrideUrlLoading(url)) {      return true;    }  }  return false;}  }
class C{  @Override void doConstrainedMaxCScores(List<String> sentence,Grammar grammar,Lexicon lexicon,final boolean scale){  short[] numSubStatesArray=grammar.numSubStates;  double initVal=Double.NEGATIVE_INFINITY;  maxcScore=new double[length][length + 1][numStates];  maxcSplit=new int[length][length + 1][numStates];  maxcChild=new int[length][length + 1][numStates];  maxcLeftChild=new int[length][length + 1][numStates];  maxcRightChild=new int[length][length + 1][numStates];  ArrayUtil.fill(maxcScore,Double.NEGATIVE_INFINITY);  double logNormalizer=iScore[0][length][0][0];  for (int diff=1; diff <= length; diff++) {    for (int start=0; start < (length - diff + 1); start++) {      int end=start + diff;      Arrays.fill(maxcSplit[start][end],-1);      Arrays.fill(maxcChild[start][end],-1);      Arrays.fill(maxcLeftChild[start][end],-1);      Arrays.fill(maxcRightChild[start][end],-1);      if (diff > 1) {        for (int pState=0; pState < numSubStatesArray.length; pState++) {          if (!allowedStates[start][end][pState])           continue;          BinaryRule[] parentRules=grammar.splitRulesWithP(pState);          int nParentStates=numSubStatesArray[pState];          for (int i=0; i < parentRules.length; i++) {            BinaryRule r=parentRules[i];            int lState=r.leftChildState;            int rState=r.rightChildState;            int narrowR=narrowRExtent[start][lState];            boolean iPossibleL=(narrowR < end);            if (!iPossibleL) {              continue;            }            int narrowL=narrowLExtent[end][rState];            boolean iPossibleR=(narrowL >= narrowR);            if (!iPossibleR) {              continue;            }            int min1=narrowR;            int min2=wideLExtent[end][rState];            int min=(min1 > min2 ? min1 : min2);            if (min > narrowL) {              continue;            }            int max1=wideRExtent[start][lState];            int max2=narrowL;            int max=(max1 < max2 ? max1 : max2);            if (min > max) {              continue;            }            double[][][] scores=r.getScores2();            int nLeftChildStates=numSubStatesArray[lState];            int nRightChildStates=numSubStatesArray[rState];            double scoreToBeat=maxcScore[start][end][pState];            for (int split=min; split <= max; split++) {              double ruleScore=0;              if (!allowedStates[start][split][lState])               continue;              if (!allowedStates[split][end][rState])               continue;              double leftChildScore=maxcScore[start][split][lState];              double rightChildScore=maxcScore[split][end][rState];              if (leftChildScore == initVal || rightChildScore == initVal)               continue;              double scalingFactor=0.0;              if (scale)               scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][pState] + iScale[start][split][lState] + iScale[split][end][rState] - iScale[0][length][0]));              double gScore=leftChildScore + scalingFactor + rightChildScore;              if (gScore < scoreToBeat)               continue;              for (int lp=0; lp < nLeftChildStates; lp++) {                double lIS=iScore[start][split][lState][lp];                if (lIS == 0)                 continue;                for (int rp=0; rp < nRightChildStates; rp++) {                  if (scores[lp][rp] == null)                   continue;                  double rIS=iScore[split][end][rState][rp];                  if (rIS == 0)                   continue;                  for (int np=0; np < nParentStates; np++) {                    double pOS=oScore[start][end][pState][np];                    if (pOS == 0)                     continue;                    double ruleS=scores[lp][rp][np];                    if (ruleS == 0)                     continue;                    ruleScore+=(pOS * ruleS * lIS* rIS) / logNormalizer;                  }                }              }              if (ruleScore == 0)               continue;              if (doVariational) {                double norm=0;                for (int np=0; np < nParentStates; np++) {                  norm+=oScore[start][end][pState][np] / logNormalizer * iScore[start][end][pState][np];                }                ruleScore/=norm;              }              gScore+=Math.log(ruleScore);              if (gScore > scoreToBeat) {                scoreToBeat=gScore;                maxcScore[start][end][pState]=gScore;                maxcSplit[start][end][pState]=split;                maxcLeftChild[start][end][pState]=lState;                maxcRightChild[start][end][pState]=rState;              }            }          }        }      } else {        for (int tag=0; tag < numSubStatesArray.length; tag++) {          if (!allowedStates[start][end][tag])           continue;          int nTagStates=numSubStatesArray[tag];          String word=sentence.get(start);          if (grammar.isGrammarTag(tag))           continue;          double[] lexiconScoreArray=lexicon.score(word,(short)tag,start,false,false);          double lexiconScores=0;          for (int tp=0; tp < nTagStates; tp++) {            double pOS=oScore[start][end][tag][tp];            double ruleS=lexiconScoreArray[tp];            lexiconScores+=(pOS * ruleS) / logNormalizer;          }          double scalingFactor=0.0;          if (doVariational)           lexiconScores=1; else           if (scale)           scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][tag] - iScale[0][length][0]));          maxcScore[start][end][tag]=Math.log(lexiconScores) + scalingFactor;        }      }      double[] maxcScoreStartEnd=new double[numStates];      for (int i=0; i < numStates; i++) {        maxcScoreStartEnd[i]=maxcScore[start][end][i];      }      double[][] ruleScores=null;      if (doVariational)       ruleScores=new double[numStates][numStates];      boolean foundOne=false;      for (int pState=0; pState < numSubStatesArray.length; pState++) {        if (!allowedStates[start][end][pState])         continue;        int nParentStates=numSubStatesArray[pState];        UnaryRule[] unaries=grammar.getClosedSumUnaryRulesByParent(pState);        if (doVariational)         unaries=grammar.getUnaryRulesByParent(pState).toArray(new UnaryRule[0]);        for (int r=0; r < unaries.length; r++) {          UnaryRule ur=unaries[r];          int cState=ur.childState;          if ((pState == cState))           continue;          if (iScore[start][end][cState] == null)           continue;          double childScore=maxcScore[start][end][cState];          if (childScore == initVal)           continue;          double scalingFactor=0.0;          if (scale)           scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][pState] + iScale[start][end][cState] - iScale[0][length][0]));          double gScore=scalingFactor + childScore;          if (gScore < maxcScoreStartEnd[pState])           continue;          double[][] scores=ur.getScores2();          int nChildStates=numSubStatesArray[cState];          double ruleScore=0;          for (int cp=0; cp < nChildStates; cp++) {            double cIS=iScore[start][end][cState][cp];            if (cIS == 0)             continue;            if (scores[cp] == null)             continue;            for (int np=0; np < nParentStates; np++) {              double pOS=oScore[start][end][pState][np];              if (pOS < 0)               continue;              double ruleS=scores[cp][np];              if (ruleS == 0)               continue;              ruleScore+=(pOS * ruleS * cIS) / logNormalizer;              foundOne=true;            }          }          if (ruleScore == 0)           continue;          if (doVariational) {            double norm=0;            for (int np=0; np < nParentStates; np++) {              norm+=oScore[start][end][pState][np] / logNormalizer * iScore[start][end][pState][np];            }            ruleScore/=norm;            ruleScores[pState][cState]=Math.max(ruleScore,ruleScores[pState][cState]);          }          gScore+=Math.log(ruleScore);          if (gScore > maxcScoreStartEnd[pState]) {            maxcScoreStartEnd[pState]=gScore;            maxcChild[start][end][pState]=cState;          }        }      }      if (foundOne && doVariational)       maxcScoreStartEnd=closeVariationalRules(ruleScores,start,end);      maxcScore[start][end]=maxcScoreStartEnd;    }  }}  }
class C{  public void testWithFail(Attribute att) throws Exception {  test(att,false);}  }
class C{  public static OptionHandler parse(String[] options,char option,OptionHandler defValue) throws Exception {  return parse(options,"" + option,defValue);}  }
class C{  public static void analyzeCoverage(){  Sandbox.goingToExecuteSUTCode();  TestGenerationContext.getInstance().goingToExecuteSUTCode();  Sandbox.goingToExecuteUnsafeCodeOnSameThread();  ExecutionTracer.setCheckCallerThread(false);  try {    String cp=ClassPathHandler.getInstance().getTargetProjectClasspath();    if (Properties.TARGET_CLASS.endsWith(".jar") || Properties.TARGET_CLASS.contains(File.separator)) {      targetClasses=DependencyAnalysis.analyzeTarget(Properties.TARGET_CLASS,Arrays.asList(cp.split(File.pathSeparator)));    } else {      targetClasses.add(Properties.TARGET_CLASS);      DependencyAnalysis.analyzeClass(Properties.TARGET_CLASS,Arrays.asList(cp.split(File.pathSeparator)));    }    LoggingUtils.getEvoLogger().info("* Finished analyzing classpath");  } catch (  Throwable e) {    LoggingUtils.getEvoLogger().error("* Error while initializing target class: " + (e.getMessage() != null ? e.getMessage() : e.toString()));    logger.error("Problem for " + Properties.TARGET_CLASS + ". Full stack:",e);    return;  } finally {    Sandbox.doneWithExecutingUnsafeCodeOnSameThread();    Sandbox.doneWithExecutingSUTCode();    TestGenerationContext.getInstance().doneWithExecutingSUTCode();  }  List<Class<?>> testClasses=getTestClasses();  LoggingUtils.getEvoLogger().info("* Found " + testClasses.size() + " test class(es)");  if (testClasses.isEmpty())   return;  sortTestClasses(testClasses);  Class<?>[] tests=testClasses.toArray(new Class<?>[testClasses.size()]);  LoggingUtils.getEvoLogger().info("* Executing test(s)");  if (Properties.SELECTED_JUNIT == null) {    boolean origUseAgent=EvoRunner.useAgent;    boolean origUseClassLoader=EvoRunner.useClassLoader;    try {      EvoRunner.useAgent=false;      EvoRunner.useClassLoader=false;      List<JUnitResult> results=executeTests(tests);      printReport(results);    }  finally {      EvoRunner.useAgent=origUseAgent;      EvoRunner.useClassLoader=origUseClassLoader;    }  } else {    JUnitTestCarvedChromosomeFactory carvedFactory=new JUnitTestCarvedChromosomeFactory(null);    TestSuiteChromosome testSuite=carvedFactory.getCarvedTestSuite();    int goals=0;    for (    Properties.Criterion pc : Properties.CRITERION) {      LoggingUtils.getEvoLogger().info("* Coverage analysis for criterion " + pc);      TestFitnessFactory ffactory=FitnessFunctions.getFitnessFactory(pc);      goals+=ffactory.getCoverageGoals().size();      FitnessFunction ffunction=FitnessFunctions.getFitnessFunction(pc);      ffunction.getFitness(testSuite);      CoverageCriteriaAnalyzer.analyzeCoverage(testSuite,pc);    }    TestSuiteGenerator.writeJUnitTestsAndCreateResult(testSuite);    StatisticsSender.executedAndThenSendIndividualToMaster(testSuite);    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Total_Goals,goals);    if (Properties.COVERAGE_MATRIX)     throw new IllegalArgumentException("Coverage matrix not yet available when measuring coverage of a carved test suite");  }}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return voidIt();}  }
class C{  public void checkpoint() throws IOException, InterruptedException {  if (this.stateQueue.suspendAll()) {    MP.printMessage(EC.TLC_CHECKPOINT_START,"-- Checkpointing of run " + this.metadir + " compl");    this.stateQueue.beginChkpt();    this.trace.beginChkpt();    this.fpSetManager.checkpoint(this.filename);    this.stateQueue.resumeAll();    UniqueString.internTbl.beginChkpt(this.metadir);    this.stateQueue.commitChkpt();    this.trace.commitChkpt();    UniqueString.internTbl.commitChkpt(this.metadir);    this.fpSetManager.commitChkpt();    MP.printMessage(EC.TLC_CHECKPOINT_END,"eted.");  }}  }
class C{  public GPUImageFilterGroup(){  this(null);}  }
class C{  public final boolean popAndTop(){  m_index--;  return (m_index >= 0) ? m_values[m_index] : false;}  }
class C{  public double magnitude(){  return Math.sqrt(this.dot(this));}  }
class C{  @Override public int compareTo(Route o){  return ((Integer)switchPorts.size()).compareTo(o.switchPorts.size());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.917 -0500",hash_original_method="09339315E74F09704223BAA476796553",hash_generated_method="2C68E0B96E192360B579F5B500C88F97") public X509Name(Vector oids,Vector values){  this(oids,values,new X509DefaultEntryConverter());}  }
class C{  private int stringToFlow(String flowcontrol){  if (ModbusUtil.isBlank(flowcontrol) || flowcontrol.equalsIgnoreCase("none")) {    return AbstractSerialConnection.FLOW_CONTROL_DISABLED;  } else   if (flowcontrol.equalsIgnoreCase("xon/xoff out")) {    return AbstractSerialConnection.FLOW_CONTROL_XONXOFF_OUT_ENABLED;  } else   if (flowcontrol.equalsIgnoreCase("xon/xoff in")) {    return AbstractSerialConnection.FLOW_CONTROL_XONXOFF_IN_ENABLED;  } else   if (flowcontrol.equalsIgnoreCase("rts/cts")) {    return AbstractSerialConnection.FLOW_CONTROL_CTS_ENABLED | AbstractSerialConnection.FLOW_CONTROL_RTS_ENABLED;  } else   if (flowcontrol.equalsIgnoreCase("dsr/dtr")) {    return AbstractSerialConnection.FLOW_CONTROL_DSR_ENABLED | AbstractSerialConnection.FLOW_CONTROL_DTR_ENABLED;  }  return AbstractSerialConnection.FLOW_CONTROL_DISABLED;}  }
class C{  private int[] generateTable(){  if (dataCount == 0) {    int[] tmpArray=new int[2];    tmpArray[0]=composeEntry(0,DEFAULT_VALUE);    tmpArray[1]=composeEntry(UPPER_LIMIT,DEFAULT_VALUE);    tempTable=null;    return tmpArray;  }  Arrays.sort(tempTable,0,dataCount);  int[] newTempTable=new int[dataCount * 2 + 3];  int old_index=0;  int new_index=0;  int loop_count=dataCount - 1;  long data=tempTable[old_index];  int start=(int)(data >> 32) & CODEPOINT_MASK;  int end=(int)(data >> 8) & CODEPOINT_MASK;  if (start != Character.MIN_SUPPLEMENTARY_CODE_POINT) {    newTempTable[new_index++]=composeEntry(Character.MIN_SUPPLEMENTARY_CODE_POINT,defaultValue);  }  newTempTable[new_index++]=composeEntry(start,(int)data);  for (int i=0; i < loop_count; i++) {    data=tempTable[++old_index];    int nextStart=(int)(data >> 32) & CODEPOINT_MASK;    if (end != start && end != nextStart - 1) {      newTempTable[new_index++]=composeEntry(end + 1,defaultValue);    }    newTempTable[new_index++]=composeEntry(nextStart,(int)data);    start=nextStart;    end=(int)(data >> 8) & CODEPOINT_MASK;  }  newTempTable[new_index++]=composeEntry(++end,defaultValue);  if (end < UPPER_LIMIT) {    newTempTable[new_index++]=composeEntry(UPPER_LIMIT,defaultValue);  }  dataTable=new int[new_index];  System.arraycopy(newTempTable,0,dataTable,0,new_index);  tempTable=null;  return dataTable;}  }
class C{  public float nextFloat(boolean includeZero,boolean includeOne){  float d=0.0f;  do {    d=nextFloat();    if (includeOne && nextBoolean())     d+=1.0f;  } while ((d > 1.0f) || (!includeZero && d == 0.0f));  return d;}  }
class C{  @Override protected void onStop(){  super.onStop();  ResponseHandler.unregister(mDungeonsPurchaseObserver);}  }
class C{  private String stripOffCR(String str){  String[] arr=str.split("\n");  StringBuilder buf=new StringBuilder();  for (  String s : arr) {    if (s.endsWith("\r")) {      buf.append(s.substring(0,s.length() - 1));    } else {      buf.append(s);    }    buf.append("\n");  }  return buf.toString();}  }
class C{  public RoleGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,String inGroupType,Object inGroupObject,java.util.Vector inFiles,int grouperRole,boolean groupKidsByAlbum){  this(inSource,inParent,inGroupLabel,inGroupType,inGroupObject,inFiles,new int[]{grouperRole},groupKidsByAlbum);}  }
class C{  public synchronized void flush() throws IOException {  while (pos > 0)   push();}  }
class C{  public static MethodType canonicalize(MethodType mt,int howRet,int howArgs){  Class<?>[] ptypes=mt.ptypes();  Class<?>[] ptc=MethodTypeForm.canonicalizeAll(ptypes,howArgs);  Class<?> rtype=mt.returnType();  Class<?> rtc=MethodTypeForm.canonicalize(rtype,howRet);  if (ptc == null && rtc == null) {    return null;  }  if (rtc == null)   rtc=rtype;  if (ptc == null)   ptc=ptypes;  return MethodType.makeImpl(rtc,ptc,true);}  }
class C{  private void checkRemoved() throws IllegalStateException {  if (rmvd)   throw removedError();  if (rmvCheck) {    try {      rmvd=seqView.get(key) == null;    } catch (    IgniteCheckedException e) {      throw U.convertException(e);    }    rmvCheck=false;    if (rmvd) {      ctx.kernalContext().dataStructures().onRemoved(key,this);      throw removedError();    }  }}  }
class C{  public boolean read(final SocketChannel channel) throws IOException {  readCalls++;  if (targetSize < 0) {    if (sizeBuffer == null) {      sizeBuffer=ByteBuffer.allocate(4);    }    final int size=channel.read(sizeBuffer);    if (logger.isLoggable(Level.FINEST)) {      logger.finest("read size_buffer bytes:" + size);    }    if (size == -1) {      throw new IOException("Socket closed");    }    if (!sizeBuffer.hasRemaining()) {      sizeBuffer.flip();      targetSize=sizeBuffer.getInt();      if ((targetSize & 0xFF000000) != MAGIC) {        throw new IOException("Did not write magic!");      }      targetSize=targetSize & 0x00ffffff;      if (targetSize <= 0 || targetSize > MAX_MESSAGE_SIZE) {        throw new IOException("Invalid triplea packet size:" + targetSize);      }      contentBuffer=ByteBuffer.allocate(targetSize);      sizeBuffer=null;    } else {      return false;    }  }  final int size=channel.read(contentBuffer);  if (logger.isLoggable(Level.FINEST)) {    logger.finest("read content bytes:" + size);  }  if (size == -1) {    throw new IOException("Socket closed");  }  return !contentBuffer.hasRemaining();}  }
class C{  boolean isFinishing(){  return finishing.get();}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  private List<Quote> readXML(InputStream stream) throws XmlPullParserException, IOException {  List<Quote> quotes=new ArrayList<>();  boolean isInsideItem=false;  boolean isInsideAuthor=false;  boolean isInsideQuote=false;  Quote quote=null;  XmlPullParserFactory factory=XmlPullParserFactory.newInstance();  XmlPullParser parser=factory.newPullParser();  parser.setInput(stream,"UTF-8");  int eventType=parser.getEventType();  while (eventType != XmlPullParser.END_DOCUMENT) {    if (eventType == XmlPullParser.START_TAG) {      String tag=parser.getName();      if ("item".equals(tag)) {        isInsideItem=true;        quote=new Quote();      } else       if (isInsideItem && "title".equals(tag)) {        isInsideAuthor=true;      } else       if (isInsideItem && "description".equals(tag)) {        isInsideQuote=true;      }    } else     if (eventType == XmlPullParser.END_TAG) {      String tag=parser.getName();      if ("item".equals(tag)) {        isInsideItem=false;        quotes.add(quote);      } else       if (isInsideItem && "title".equals(tag)) {        isInsideAuthor=false;      } else       if (isInsideItem && "description".equals(tag)) {        isInsideQuote=false;      }    } else     if (eventType == XmlPullParser.TEXT) {      String text=parser.getText();      if (isInsideAuthor) {        quote.setAuthor(text);      } else       if (isInsideQuote) {        quote.setQuote(text);      }    }    eventType=parser.next();  }  return quotes;}  }
class C{  public long updateTtl(long elapsedTime){  this.ttl-=elapsedTime;  this.currentAnimTimeMillis+=elapsedTime;  if (this.currentAnimTimeMillis >= this.getUpdateTextureMillis() && this.animFrames > 0) {    this.currentAnimTimeMillis=0;    int pos=this.getTextPos();    pos++;    if (pos < this.animFrames) {      this.setTextPos(pos);    } else {      this.setTextPos(0);    }  }  return this.ttl;}  }
class C{  protected void stopHarvestTiming(Collection<LocalCandidate> harvest){  if (harvest != null)   stopHarvestTiming(harvest.size()); else   stopHarvestTiming(0);}  }
class C{  private void paintWithPen(int penObject,Shape shape){  if (penObject >= 0) {    Color col=getColorFromObject(penObject);    if (!(firstEffectivePaint && (col.equals(Color.white)))) {      Rectangle rec=shape.getBounds();      resizeBounds((int)rec.getMinX(),(int)rec.getMinY());      resizeBounds((int)rec.getMaxX(),(int)rec.getMaxY());      firstEffectivePaint=false;    }  }}  }
class C{  public static String antidote(List<String> topicLevels){  return antidote(String.join("/",topicLevels));}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public AttributeInfo(char[] sp,char[] n,char[] sp1,char[] sp2,String val,char delim,boolean entity){  space=sp;  name=n;  space1=sp1;  space2=sp2;  value=val;  delimiter=delim;  entityReferences=entity;}  }
class C{  private void drawDragBorder(final ExecutionUnit process,final Graphics2D g2){  double width=model.getProcessWidth(process);  double height=model.getProcessHeight(process);  Shape dragFrame=new RoundRectangle2D.Double(DRAG_BORDER_PADDING,DRAG_BORDER_PADDING,width - 2 * DRAG_BORDER_PADDING,height - 2 * DRAG_BORDER_PADDING,DRAG_BORDER_CORNER,DRAG_BORDER_CORNER);  g2.setColor(BORDER_DRAG_COLOR);  g2.setStroke(BORDER_DRAG_STROKE);  g2.draw(dragFrame);}  }
class C{  public SymbolPart parseHierarchy(Properties props,SymbolPart parent){  String hCode=getHierarchyNumber() + hierarchyAddition;  String entry=props.getProperty(hCode);  SymbolPart sp=null;  if (entry != null) {    sp=new SymbolPart(this,entry,props,parent);    parseHierarchy(hCode,props,sp);  }  return sp;}  }
class C{  public int subspacedim(){  return coeff[0].length - coeff.length;}  }
class C{  public boolean isServiceRegistered(){  return ServerApiUtils.isImsConnected();}  }
class C{  public static CommandLineResult executeCommandLine(@Nullable final Map<String,String> env,final String cmd,@Nullable final String[] args,@Nullable final String[] redactedArgs,final long timeout,@Nullable final File workingDirectory,@Nullable LineConsumerFactory lineConsumerFactory) throws IOException {  CommandLine command=new CommandLine(cmd);  if (args != null) {    for (    String arg : args) {      command.add(arg);    }  }  CommandLine redactedCommand=new CommandLine(command);  if (redactedArgs != null) {    for (    String arg : redactedArgs) {      redactedCommand.add(arg);    }  }  LOG.debug("Running command: " + command.toString());  final ProcessBuilder processBuilder=new ProcessBuilder(redactedCommand.toShellCommand());  Map<String,String> environment=processBuilder.environment();  if (env != null) {    environment.putAll(env);  }  environment.put("LANG","en_US.UTF-8");  environment.put("GDM_LANG","en_US.UTF-8");  environment.put("LANGUAGE","us");  processBuilder.directory(workingDirectory);  LineConsumer lineConsumer=LineConsumer.DEV_NULL;  if (lineConsumerFactory != null) {    lineConsumer=lineConsumerFactory.newLineConsumer();  }  final CommandLineOutputProcessor stdOutConsumer=new CommandLineOutputProcessor(new ArrayList<String>());  final CommandLineOutputProcessor stdErrConsumer=new CommandLineOutputProcessor(new ArrayList<String>());  final Process process=processBuilder.start();  final Watchdog watcher;  if (timeout > 0) {    watcher=new Watchdog(timeout,TimeUnit.MILLISECONDS);    watcher.start(new CancellableProcessWrapper(process));  }  try (LineConsumer consumer=new CompositeLineConsumer(lineConsumer,stdOutConsumer)){    ProcessUtil.process(process,consumer,stdErrConsumer);    process.waitFor();  } catch (  InterruptedException e) {    throw new IOException(e);  }  return new CommandLineResult(command,process.exitValue(),stdOutConsumer.getOutput(),stdErrConsumer.getOutput());}  }
class C{  private static void addCommonPermissions(Permissions permissions){  permissions.add(new AudioPermission("play"));  permissions.add(new AWTPermission("listenToAllAWTEvents"));  permissions.add(new AWTPermission("setWindowAlwaysOnTop"));  permissions.add(new AWTPermission("watchMousePointer"));  permissions.add(new LoggingPermission("control",""));  permissions.add(new SocketPermission("*","connect, listen, accept, resolve"));  permissions.add(new URLPermission("http://-","*:*"));  permissions.add(new URLPermission("https://-","*:*"));  permissions.add(new RuntimePermission("accessClassInPackage.sun.*"));  permissions.add(new RuntimePermission("accessDeclaredMembers"));  permissions.add(new RuntimePermission("getenv.*"));  permissions.add(new RuntimePermission("getFileSystemAttributes"));  permissions.add(new RuntimePermission("readFileDescriptor"));  permissions.add(new RuntimePermission("writeFileDescriptor"));  permissions.add(new RuntimePermission("queuePrintJob"));}  }
class C{  @Override public void stop() throws IllegalStateException {  log.i("stop");  if (getPlayState() == PLAYSTATE_STOPPED) {    log.i("already in stopped state");    return;  }  trackHandlerGate.close();  Message msg=trackHandler.obtainMessage(MSG_STOP_TRACK);  if (log.allowDebug()) {    log.d("Sending stop Directtrack handler thread");  }  trackHandler.sendMessage(msg);  trackHandlerGate.block();  if (log.allowDebug()) {    log.d("Stopping Direct Track Done");  }}  }
class C{  public static String stringFor(int n){switch (n) {case CU_OUT_KEY_VALUE_PAIR:    return "CU_OUT_KEY_VALUE_PAIR";case CU_OUT_CSV:  return "CU_OUT_CSV";}return "INVALID CUoutput_mode: " + n;}  }
class C{  public ObjectDetection(FeatureDetectorType detector,DescriptorExtractorType extractor,DescriptorMatcherType matcher){  this.detector=FeatureDetector.create(detector.val());  this.extractor=DescriptorExtractor.create(extractor.val());  this.matcher=DescriptorMatcher.create(matcher.val());}  }
class C{  public void changeScrollPeriod(int duration){  this.mScrollPeriod=duration;}  }
class C{  private ColorStateList createTextColor(int accentColor){  int[][] states=new int[][]{new int[]{android.R.attr.state_pressed},new int[]{android.R.attr.state_selected},new int[]{}};  int[] colors=new int[]{accentColor,Color.WHITE,Color.BLACK};  return new ColorStateList(states,colors);}  }
class C{  public IfElseCascade(int start,int end,boolean bElse,String tokenVarName,String condition,Map<String,Integer> tokenToStateMap){  this.start=start;  this.end=end;  this.bElse=bElse;  this.tokenVarName=tokenVarName;  this.condition=condition;  this.tokenToStateMap=tokenToStateMap;}  }
class C{  @Override protected List<Double> computeRelatedness(Page page1,Page page2) throws WikiApiException {  List<Double> relatednessValues=new ArrayList<Double>();  Set<Category> categories1=relatednessUtilities.getCategories(page1);  Set<Category> categories2=relatednessUtilities.getCategories(page2);  if (categories1 == null || categories2 == null) {    return null;  }  Category root=wiki.getMetaData().getMainCategory();  if (!catGraph.getGraph().containsVertex(root.getPageId())) {    logger.error("The root node is not part of this graph. Cannot compute Resnik relatedness.");    return null;  }  for (  Category cat1 : categories1) {    for (    Category cat2 : categories2) {      Category lcs=catGraph.getLCS(cat1,cat2);      if (lcs == null) {        continue;      }      double relatedness=catGraph.getIntrinsicInformationContent(lcs);      relatednessValues.add(relatedness);    }  }  return relatednessValues;}  }
class C{  public void closeAllWindows(){  app.cleanupBackgroundTasks();  app.closeAllWindows();}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  private SSLSocketFactory createFactory() throws Exception {  SSLSocketFactory ssFactory=null;  String host="localhost";  int port=8086;  if (_keyStore == null) {    return createAnonymousFactory(null,port);  }  SSLContext sslContext=SSLContext.getInstance(_sslContext);  KeyManagerFactory kmf=KeyManagerFactory.getInstance(keyManagerFactory());  kmf.init(_keyStore,keyStorePassword().toCharArray());  sslContext.init(kmf.getKeyManagers(),null,null);  SSLEngine engine=sslContext.createSSLEngine();  _enabledProtocols=enabledProtocols(engine.getEnabledProtocols());  engine.setEnabledProtocols(_enabledProtocols);  ssFactory=sslContext.getSocketFactory();  return ssFactory;}  }
class C{  public UnicodeEscapeSequence createUnicodeEscapeSequence(){  UnicodeEscapeSequenceImpl unicodeEscapeSequence=new UnicodeEscapeSequenceImpl();  return unicodeEscapeSequence;}  }
class C{  public static <T>HashSet<T> hashSet(int initialCapacity,float loadFactor){  return new HashSet<T>(initialCapacity,loadFactor);}  }
class C{  private static Map<String,Object> updateKafkaProperties(Map<String,Object> currentConfig,Map<String,String> ignoredProperties,Map<String,Object> updates){  for (  String key : updates.keySet()) {    checkArgument(!ignoredProperties.containsKey(key),"No need to configure '%s'. %s",key,ignoredProperties.get(key));  }  Map<String,Object> config=new HashMap<>(currentConfig);  config.putAll(updates);  return config;}  }
class C{  public void start(){  if (!active) {    active=true;    if (logger.isInfoEnabled())     logger.info(JMX_NAME + " iniciado");  }}  }
class C{  public ACEDocument processAceEntry(File subFolderEntry,String annotationFile) throws FileNotFoundException {  try {    ACEDocumentAnnotation annotationACE=ReadACEAnnotation.readDocument(annotationFile);    return processAceEntry(subFolderEntry,annotationACE,annotationFile);  } catch (  XMLException e) {    logger.error("Error while processing ACE Document " + annotationFile,e);  }  return null;}  }
class C{  private static String asTag(Class<?> cls){  if (cls.isAnonymousClass()) {    return asTag(cls.getEnclosingClass());  }  return cls.getSimpleName();}  }
class C{  public void add(ReadableDuration duration){  add(duration,1);}  }
class C{  @Override public void updateFile(String fileName,String newText) throws TypeScriptException {  int seq=SequenceHelper.getRequestSeq();  String tempFileName=null;  int requestSeq=-1;  Request request=null;  try {    tempFileName=FileTempHelper.updateTempFile(newText,seq);    request=new ReloadRequest(fileName,tempFileName,seq);    JsonObject response=execute(request,true,null).get().asObject();    requestSeq=response.getInt("request_seq",-1);  } catch (  Exception e) {    throwTypeScriptException(request,e);  } finally {    if (requestSeq != -1) {      FileTempHelper.freeTempFile(requestSeq);    }  }}  }
class C{  public synchronized void shutdown(boolean deleteData){  if (factory != null) {    try {      factory.shutdown();      try {        server.getZKDatabase().close();      } catch (      IOException e) {        LOGGER.error("Unable to close zookeeper DB",e);      }    }  finally {      factory=null;      if (deleteData) {        try {          IoUtil.delete(this.snapshotDir,this.logDir);        } catch (        IOException e) {          LOGGER.error("Unable to delete data upon shutdown",e);        }      }    }  }}  }
class C{  public static DeleteUsersResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteUsersResponse object=new DeleteUsersResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteUsersResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteUsersResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public JobDetail selectJobDetail(Connection conn,JobKey jobKey,ClassLoadHelper loadHelper) throws ClassNotFoundException, IOException, SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_JOB_DETAIL));    ps.setString(1,jobKey.getName());    ps.setString(2,jobKey.getGroup());    rs=ps.executeQuery();    JobDetailImpl job=null;    if (rs.next()) {      job=new JobDetailImpl();      job.setName(rs.getString(COL_JOB_NAME));      job.setGroup(rs.getString(COL_JOB_GROUP));      job.setDescription(rs.getString(COL_DESCRIPTION));      job.setJobClass(loadHelper.loadClass(rs.getString(COL_JOB_CLASS),Job.class));      job.setDurability(getBoolean(rs,COL_IS_DURABLE));      job.setRequestsRecovery(getBoolean(rs,COL_REQUESTS_RECOVERY));      Map<?,?> map=null;      if (canUseProperties()) {        map=getMapFromProperties(rs);      } else {        map=(Map<?,?>)getObjectFromBlob(rs,COL_JOB_DATAMAP);      }      if (null != map) {        job.setJobDataMap(new JobDataMap(map));      }    }    return job;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){  if (x < this.minX) {    throw new RasterFormatException("x lies outside raster");  }  if (y < this.minY) {    throw new RasterFormatException("y lies outside raster");  }  if ((x + width < x) || (x + width > this.width + this.minX)) {    throw new RasterFormatException("(x + width) is outside raster");  }  if ((y + height < y) || (y + height > this.height + this.minY)) {    throw new RasterFormatException("(y + height) is outside raster");  }  SampleModel sm;  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList); else   sm=sampleModel;  int deltaX=x0 - x;  int deltaY=y0 - y;  return new ByteBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);}  }
class C{  public double[] predTransform(double[] preds){  return preds;}  }
class C{  public void generateTransformedImageSingle(BufferedImage image){  if (parserOptions.isRawImagesExtracted()) {    objectStoreStreamRef.saveStoredImageAsBytes('R' + currentImage,image,false);  }  final Area clipping_shape=gs.getClippingShape();  final ImageTransformer image_transformation=new ImageTransformer(gs,image);  float x=image_transformation.getImageX();  float y=image_transformation.getImageY();  float w=image_transformation.getImageW();  float h=image_transformation.getImageH();  if (customImageHandler != null && clipping_shape != null && clipping_shape.getBounds().getWidth() > 1 && clipping_shape.getBounds().getHeight() > 1 && !customImageHandler.imageHasBeenScaled()) {    if (!clipping_shape.contains(x,y,w,h)) {      image_transformation.clipImage(clipping_shape);      x=image_transformation.getImageX();      y=image_transformation.getImageY();      w=image_transformation.getImageW();      h=image_transformation.getImageH();    }  }  image=image_transformation.getImage();  if (image != null) {    pdfImages.setImageInfo(currentImage,parserOptions.getPageNumber(),x,y,w,h);    if (parserOptions.isFinalImagesExtracted()) {      objectStoreStreamRef.saveStoredImageAsBytes(currentImage,ImageCommands.addBackgroundToMask(image,isMask),false);    }  }}  }
class C{  public boolean hasTranslationMemory(){  return hasExtension(TmsElement.class);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassLabelUI();}  }
class C{  public void add(LineMergeDirectedEdge directedEdge){  directedEdges.add(directedEdge);}  }
class C{  public void initializeSerializerProps(){  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CANONICAL_FORM,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CDATA_SECTIONS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CHECK_CHAR_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_COMMENTS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DATATYPE_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_TRUE);  if ((fFeatures & INFOSET) != 0) {    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACES,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACE_DECLARATIONS,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_COMMENTS,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_WELLFORMED,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CDATA_SECTIONS,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE_IF_SCHEMA,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DATATYPE_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  }  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACES,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACE_DECLARATIONS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_SPLIT_CDATA,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE_IF_SCHEMA,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_WELLFORMED,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_INDENT,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(OutputPropertiesFactory.S_KEY_INDENT_AMOUNT,Integer.toString(3));  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DISCARD_DEFAULT_CONTENT,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,"no");}  }
class C{  public boolean isTextDisabled(){  return textDisabled;}  }
class C{  public static String capitalize(String text){  if (text.length() == 0) {    return text;  }  return Character.toUpperCase(text.charAt(0)) + text.substring(1,text.length());}  }
class C{  public String toString(){  String s=map.size() + "\n" + map.toString();  return s;}  }
class C{  public boolean isPurchaseQty(){  Object oo=get_Value(COLUMNNAME_IsPurchaseQty);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean chargeCustomerInternal(BillingResult billingResult) throws PSPCommunicationException, PSPProcessingException {  if (billingResult.getResultXML().trim().equals("")) {    return false;  }  PaymentResult paymentResult=billingResult.getPaymentResult();  boolean paymentResultChanged=true;  OrganizationHistory customer=null;  long customerKey=0;  ChargingResult response=null;  try {    if (paymentResult == null) {      paymentResult=new PaymentResult();      paymentResult.setBillingResult(billingResult);    } else {      if (paymentResult.getProcessingStatus() == PaymentProcessingStatus.SUCCESS) {        paymentResultChanged=false;        return false;      }      paymentResult.setProcessingResult((String)null);      paymentResult.setProcessingException((String)null);    }    paymentResult.setProcessingTime(System.currentTimeMillis());    Long subscriptionKey=billingResult.getSubscriptionKey();    if (subscriptionKey == null) {      PSPProcessingException e=new PSPProcessingException("Payment processing for billing result " + billingResult.getKey() + " aborted, as no subscription key is available");      throw e;    }    Long supplierKey=Long.valueOf(billingResult.getChargingOrgKey());    OrganizationHistory supplierHistory=getSupplierHistoryForObjectKey(supplierKey);    customer=getCustomerHistory(billingResult.getOrganizationTKey());    customerKey=customer.getKey();    PaymentHistoryData phd=new PaymentHistoryReader(dm).getPaymentHistory(billingResult.getSubscriptionKey().longValue());    if (phd.getPaymentTypeHistory() == null || phd.getPaymentTypeHistory().getDataContainer().getCollectionType() != PaymentCollectionType.PAYMENT_SERVICE_PROVIDER) {      paymentResultChanged=false;      return false;    }    BigDecimal overallCosts=billingResult.getGrossAmount();    if (overallCosts == null || overallCosts.doubleValue() <= 0.0) {      paymentResultChanged=false;      return false;    }    RequestData requestData=getRequestDataForCharging(phd,supplierHistory);    ChargingData chargingData=getChargingData(billingResult,phd.getPaymentInfoHistory());    final String wsdl=phd.getPspHistory().getWsdlUrl();    response=portLocator.getPort(wsdl).charge(requestData,chargingData);    if (response != null) {      paymentResult.setProcessingResult(response.getProcessingResult());    } else {      paymentResult.setProcessingResult("NO RESPONSE RETRIEVED FROM PSP " + wsdl);    }  } catch (  IOException e) {    handleExceptionAndMarkForRetry(paymentResult,e);  }catch (  org.oscm.types.exceptions.PSPCommunicationException e) {    paymentResult.setProcessingException(e);    paymentResult.setProcessingStatus(PaymentProcessingStatus.RETRY);    throw ExceptionConverter.convertToUp(e);  }catch (  PSPProcessingException e) {    paymentResult.setProcessingException(e);    paymentResult.setProcessingStatus(PaymentProcessingStatus.FAILED_INTERNAL);    throw e;  }catch (  Exception e) {    PSPProcessingException ppe=new PSPProcessingException("Debiting the customer '" + customerKey + "' failed.",e);    logger.logError(Log4jLogger.SYSTEM_LOG,ppe,LogMessageIdentifier.ERROR_PROCESS_CHARGING_FAILED);    paymentResult.setProcessingException(ppe);    paymentResult.setProcessingStatus(PaymentProcessingStatus.FAILED_INTERNAL);    throw ppe;  } finally {    if (paymentResultChanged) {      billingResult.setPaymentResult(paymentResult);    }  }  if (response == null || "error".equals(response.getProcessingResult())) {    PSPProcessingException ppe=new PSPProcessingException("Processing failed as PSP returned failure during processing. Debiting customer '" + customerKey + "' failed.");    logger.logWarn(Log4jLogger.SYSTEM_LOG,ppe,LogMessageIdentifier.WARN_CHARGING_CUSTOMER_FAILED,Long.toString(customerKey));    paymentResult.setProcessingException(ppe);    paymentResult.setProcessingStatus(PaymentProcessingStatus.FAILED_EXTERNAL);    throw ppe;  }  paymentResult.setProcessingStatus(PaymentProcessingStatus.SUCCESS);  return true;}  }
class C{  public BrowserID(IHttpRequestResponse message,String protocol,IBurpExtenderCallbacks callbacks){  super(message,protocol,callbacks);  super.setToken(findToken());  super.setProtocolflowID(analyseProtocol());  add(this,getProtocolflowID());}  }
class C{  public boolean isEmpty(){  return storage == null || this.storage.isEmpty();}  }
class C{  public boolean isTaggingEnabled(){  return taggingEnabled;}  }
class C{  public static int string2int(String s,int radix) throws NumberFormatException {  if (radix == 10) {    return Integer.parseInt(s,radix);  } else {    char[] cs=s.toCharArray();    int limit=Integer.MAX_VALUE / (radix / 2);    int n=0;    for (int i=0; i < cs.length; i++) {      int d=Character.digit(cs[i],radix);      if (n < 0 || n > limit || n * radix > Integer.MAX_VALUE - d)       throw new NumberFormatException();      n=n * radix + d;    }    return n;  }}  }
class C{  public double r(){  return Math.sqrt(x * x + y * y);}  }
class C{  private void processChallenge(byte[][] challengeVal,List<byte[]> realmChoices) throws SaslException, UnsupportedEncodingException {  if (challengeVal[CHARSET] != null) {    if (!"utf-8".equals(new String(challengeVal[CHARSET],encoding))) {      throw new SaslException("DIGEST-MD5: digest-challenge format " + "violation. Unrecognised charset value: " + new String(challengeVal[CHARSET]));    } else {      encoding="UTF8";      useUTF8=true;    }  }  if (challengeVal[ALGORITHM] == null) {    throw new SaslException("DIGEST-MD5: Digest-challenge format " + "violation: algorithm directive missing");  } else   if (!"md5-sess".equals(new String(challengeVal[ALGORITHM],encoding))) {    throw new SaslException("DIGEST-MD5: Digest-challenge format " + "violation. Invalid value for 'algorithm' directive: " + challengeVal[ALGORITHM]);  }  if (challengeVal[NONCE] == null) {    throw new SaslException("DIGEST-MD5: Digest-challenge format " + "violation: nonce directive missing");  } else {    nonce=challengeVal[NONCE];  }  try {    String[] realmTokens=null;    if (challengeVal[REALM] != null) {      if (realmChoices == null || realmChoices.size() <= 1) {        negotiatedRealm=new String(challengeVal[REALM],encoding);      } else {        realmTokens=new String[realmChoices.size()];        for (int i=0; i < realmTokens.length; i++) {          realmTokens[i]=new String(realmChoices.get(i),encoding);        }      }    }    NameCallback ncb=authzid == null ? new NameCallback("DIGEST-MD5 authentication ID: ") : new NameCallback("DIGEST-MD5 authentication ID: ",authzid);    PasswordCallback pcb=new PasswordCallback("DIGEST-MD5 password: ",false);    if (realmTokens == null) {      RealmCallback tcb=(negotiatedRealm == null ? new RealmCallback("DIGEST-MD5 realm: ") : new RealmCallback("DIGEST-MD5 realm: ",negotiatedRealm));      cbh.handle(new Callback[]{tcb,ncb,pcb});      negotiatedRealm=tcb.getText();      if (negotiatedRealm == null) {        negotiatedRealm="";      }    } else {      RealmChoiceCallback ccb=new RealmChoiceCallback("DIGEST-MD5 realm: ",realmTokens,0,false);      cbh.handle(new Callback[]{ccb,ncb,pcb});      int[] selected=ccb.getSelectedIndexes();      if (selected == null || selected[0] < 0 || selected[0] >= realmTokens.length) {        throw new SaslException("DIGEST-MD5: Invalid realm chosen");      }      negotiatedRealm=realmTokens[selected[0]];    }    passwd=pcb.getPassword();    pcb.clearPassword();    username=ncb.getName();  } catch (  SaslException se) {    throw se;  }catch (  UnsupportedCallbackException e) {    throw new SaslException("DIGEST-MD5: Cannot perform callback to " + "acquire realm, authentication ID or password",e);  }catch (  IOException e) {    throw new SaslException("DIGEST-MD5: Error acquiring realm, authentication ID or password",e);  }  if (username == null || passwd == null) {    throw new SaslException("DIGEST-MD5: authentication ID and password must be specified");  }  int srvMaxBufSize=(challengeVal[MAXBUF] == null) ? DEFAULT_MAXBUF : Integer.parseInt(new String(challengeVal[MAXBUF],encoding));  sendMaxBufSize=(sendMaxBufSize == 0) ? srvMaxBufSize : Math.min(sendMaxBufSize,srvMaxBufSize);}  }
class C{  public static void cancelRipple(View v){  Drawable background=v.getBackground();  if (background instanceof RippleDrawable)   ((RippleDrawable)background).cancel(); else   if (background instanceof ToolbarRippleDrawable)   ((ToolbarRippleDrawable)background).cancel();  if (v instanceof ViewGroup) {    ViewGroup vg=(ViewGroup)v;    for (int i=0, count=vg.getChildCount(); i < count; i++)     RippleManager.cancelRipple(vg.getChildAt(i));  }}  }
class C{  public ExecuteRequest(final String path){  this(new LwM2mPath(path),null);}  }
class C{  private void launchApplicationWindow(){  SystemDock.updateMenu();  WindowManagerImpl windowManager=(WindowManagerImpl)WindowManager.getInstance();  IdeEventQueue.getInstance().setWindowManager(windowManager);  windowManager.showFrame();}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  lineMark=line;  columnMark=column;  super.mark(readAheadLimit);}  }
class C{  public DateEditor(JSpinner spinner){  this(spinner,getDefaultPattern(spinner.getLocale()));}  }
class C{  private void initWidget(){  this.container=(CoordinatorLayout)findViewById(R.id.activity_about_container);  Toolbar toolbar=(Toolbar)findViewById(R.id.activity_about_toolbar);  toolbar.setNavigationIcon(R.drawable.ic_toolbar_back);  toolbar.setTitle(R.string.action_about);  toolbar.setNavigationOnClickListener(this);  ImageView appIcon=(ImageView)findViewById(R.id.container_about_app_appIcon);  Glide.with(this).load(R.drawable.ic_launcher).diskCacheStrategy(DiskCacheStrategy.NONE).into(appIcon);  findViewById(R.id.container_about_app_github).setOnClickListener(this);  findViewById(R.id.container_about_app_email).setOnClickListener(this);  findViewById(R.id.container_about_thx_location).setOnClickListener(this);  findViewById(R.id.container_about_thx_juhe).setOnClickListener(this);  findViewById(R.id.container_about_thx_hefeng).setOnClickListener(this);  findViewById(R.id.container_about_thx_retrofit).setOnClickListener(this);  findViewById(R.id.container_about_thx_glide).setOnClickListener(this);}  }
class C{  public MathSequence(){  super(0);  ensureArguments(0);}  }
class C{  public void test_add_scan(){  final MyListener<String> listener=new MyListener<String>();  final HardReferenceQueue<String> cache=new HardReferenceQueue<String>(listener,5,2);  final String ref0="0";  final String ref1="1";  final String ref2="2";  assertEquals("size",0,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",0,cache.getHeadIndex());  assertTrue("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{},cache.toArray(new String[0]));  assertTrue(cache.add(ref0));  assertEquals("size",1,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",1,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref0},cache.toArray(new String[0]));  assertFalse(cache.add(ref0));  assertTrue(cache.add(ref1));  assertEquals("size",2,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",2,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref0,ref1},cache.toArray(new String[0]));  assertFalse(cache.add(ref1));  assertFalse(cache.add(ref0));  assertTrue(cache.add(ref2));  assertEquals("size",3,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",3,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref0,ref1,ref2},cache.toArray(new String[0]));  assertFalse(cache.add(ref2));  assertFalse(cache.add(ref1));  assertTrue(cache.add(ref0));  assertEquals("size",4,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",4,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertFalse("full",cache.isFull());  assertEquals("order",new String[]{ref0,ref1,ref2,ref0},cache.toArray(new String[0]));  assertFalse(cache.add(ref0));  assertFalse(cache.add(ref2));  assertTrue(cache.add(ref1));  assertEquals("size",5,cache.size());  assertEquals("tail",0,cache.getTailIndex());  assertEquals("head",0,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertTrue("full",cache.isFull());  assertEquals("order",new String[]{ref0,ref1,ref2,ref0,ref1},cache.toArray(new String[0]));  assertFalse(cache.add(ref1));  assertFalse(cache.add(ref0));  listener.setExpectedRef(ref0);  assertTrue(cache.add(ref2));  listener.assertEvicted();  assertEquals("size",5,cache.size());  assertEquals("tail",1,cache.getTailIndex());  assertEquals("head",1,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertTrue("full",cache.isFull());  assertEquals("order",new String[]{ref1,ref2,ref0,ref1,ref2},cache.toArray(new String[0]));  assertFalse(cache.add(ref2));  assertFalse(cache.add(ref1));  listener.setExpectedRef(ref1);  assertTrue(cache.add(ref0));  listener.assertEvicted();  assertEquals("size",5,cache.size());  assertEquals("tail",2,cache.getTailIndex());  assertEquals("head",2,cache.getHeadIndex());  assertFalse("empty",cache.isEmpty());  assertTrue("full",cache.isFull());  assertEquals("order",new String[]{ref2,ref0,ref1,ref2,ref0},cache.toArray(new String[0]));}  }
class C{  @Pure @ShouldBePure public static String testParam2Good(Object in1,Object in2){  Pure4J.immutable(in1,in2);  return in1.toString() + in2.toString();}  }
class C{  protected void appendShortInteger(int value){  append((value | 0x80) & 0xff);}  }
class C{  public void insertFoundation(short card){  short suit=(short)(((card - 1) % 4));  short rank=(short)(1 + ((card - 1) >> 2));  foundationEncoding[suit]=rank;}  }
class C{  protected boolean writeListType(Output out,Object listType){  if (listType instanceof List<?>) {    writeList(out,(List<?>)listType);  } else {    return false;  }  return true;}  }
class C{  private void updateBP(HashSet<Integer> bps){  log.info("#" + bps.size());  Iterator<Integer> it=bps.iterator();  while (it.hasNext()) {    int C_BPartner_ID=it.next();    MBPartner bp=new MBPartner(getCtx(),C_BPartner_ID,get_TrxName());    bp.setTotalOpenBalance();    if (bp.save())     log.fine(bp.toString()); else     log.log(Level.SEVERE,"BP not updated - " + bp);  }}  }
class C{  private void addHandler(Handler handler,ClassLoader loader){  ArrayList<Handler> handlers=new ArrayList<Handler>();  handlers.add(handler);  for (ClassLoader ptr=loader; ptr != null; ptr=ptr.getParent()) {    Handler[] localHandlers=_localHandlers.getLevel(ptr);    if (localHandlers != null) {      for (int i=0; i < localHandlers.length; i++) {        int p=handlers.indexOf(localHandlers[i]);        if (p < 0) {          handlers.add(localHandlers[i]);        } else {          Handler oldHandler=handlers.get(p);          if (localHandlers[i].getLevel().intValue() < oldHandler.getLevel().intValue()) {            handlers.set(p,localHandlers[i]);          }        }      }    }  }  Handler[] newHandlers=new Handler[handlers.size()];  handlers.toArray(newHandlers);  if (loader == _systemClassLoader)   loader=null;  _localHandlers.set(newHandlers,loader);}  }
class C{  @Override protected void prepareNewBatch(String stmt) throws SQLException {  if (logger.isDebugEnabled()) {    logger.debug("Preparing new JDBC batch");  }  this.pendingSqlStatement=stmt;  this.pendingPreparedStatement=conn.prepareStatement(stmt);  this.pendingRowChanges=new LinkedList<RowReference>();}  }
class C{  public HookResult(int result,String smtpDescription){  this(result,null,smtpDescription);}  }
class C{  public static boolean isLeopard(){  return isMac() && getOsVersion().startsWith("10.5");}  }
class C{  public Route provideRoute(String systemName,String userName){  Route r;  r=getByUserName(systemName);  if (r != null) {    return r;  }  r=getBySystemName(systemName);  if (r != null) {    return r;  }  r=new DefaultRoute(systemName,userName);  register(r);  if (systemName.startsWith("IR:AUTO:")) {    try {      int autoNumber=Integer.parseInt(systemName.substring(8));      if (autoNumber > lastAutoRouteRef) {        lastAutoRouteRef=autoNumber;      }    } catch (    NumberFormatException e) {      log.warn("Auto generated SystemName " + systemName + " is not in the correct format");    }  }  return r;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.TRACE_STATE_ENTERED;}  }
class C{  public MetadataGeneratorTool(){  this.args=new CommandLineArgs();}  }
class C{  @SuppressWarnings("unchecked") public Frame<V>[] analyze(final String owner,final MethodNode m) throws AnalyzerException {  if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {    frames=(Frame<V>[])new Frame<?>[0];    return frames;  }  n=m.instructions.size();  insns=m.instructions;  handlers=(List<TryCatchBlockNode>[])new List<?>[n];  frames=(Frame<V>[])new Frame<?>[n];  subroutines=new Subroutine[n];  queued=new boolean[n];  queue=new int[n];  top=0;  for (int i=0; i < m.tryCatchBlocks.size(); ++i) {    TryCatchBlockNode tcb=m.tryCatchBlocks.get(i);    int begin=insns.indexOf(tcb.start);    int end=insns.indexOf(tcb.end);    for (int j=begin; j < end; ++j) {      List<TryCatchBlockNode> insnHandlers=handlers[j];      if (insnHandlers == null) {        insnHandlers=new ArrayList<TryCatchBlockNode>();        handlers[j]=insnHandlers;      }      insnHandlers.add(tcb);    }  }  Subroutine main=new Subroutine(null,m.maxLocals,null);  List<AbstractInsnNode> subroutineCalls=new ArrayList<AbstractInsnNode>();  Map<LabelNode,Subroutine> subroutineHeads=new HashMap<LabelNode,Subroutine>();  findSubroutine(0,main,subroutineCalls);  while (!subroutineCalls.isEmpty()) {    JumpInsnNode jsr=(JumpInsnNode)subroutineCalls.remove(0);    Subroutine sub=subroutineHeads.get(jsr.label);    if (sub == null) {      sub=new Subroutine(jsr.label,m.maxLocals,jsr);      subroutineHeads.put(jsr.label,sub);      findSubroutine(insns.indexOf(jsr.label),sub,subroutineCalls);    } else {      sub.callers.add(jsr);    }  }  for (int i=0; i < n; ++i) {    if (subroutines[i] != null && subroutines[i].start == null) {      subroutines[i]=null;    }  }  Frame<V> current=newFrame(m.maxLocals,m.maxStack);  Frame<V> handler=newFrame(m.maxLocals,m.maxStack);  current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)));  Type[] args=Type.getArgumentTypes(m.desc);  int local=0;  if ((m.access & ACC_STATIC) == 0) {    Type ctype=Type.getObjectType(owner);    current.setLocal(local++,interpreter.newValue(ctype));  }  for (int i=0; i < args.length; ++i) {    current.setLocal(local++,interpreter.newValue(args[i]));    if (args[i].getSize() == 2) {      current.setLocal(local++,interpreter.newValue(null));    }  }  while (local < m.maxLocals) {    current.setLocal(local++,interpreter.newValue(null));  }  merge(0,current,null);  init(owner,m);  while (top > 0) {    int insn=queue[--top];    Frame<V> f=frames[insn];    Subroutine subroutine=subroutines[insn];    queued[insn]=false;    AbstractInsnNode insnNode=null;    try {      insnNode=m.instructions.get(insn);      int insnOpcode=insnNode.getOpcode();      int insnType=insnNode.getType();      if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) {        merge(insn + 1,f,subroutine);        newControlFlowEdge(insn,insn + 1);      } else {        current.init(f).execute(insnNode,interpreter);        subroutine=subroutine == null ? null : subroutine.copy();        if (insnNode instanceof JumpInsnNode) {          JumpInsnNode j=(JumpInsnNode)insnNode;          if (insnOpcode != GOTO && insnOpcode != JSR) {            merge(insn + 1,current,subroutine);            newControlFlowEdge(insn,insn + 1);          }          int jump=insns.indexOf(j.label);          if (insnOpcode == JSR) {            merge(jump,current,new Subroutine(j.label,m.maxLocals,j));          } else {            merge(jump,current,subroutine);          }          newControlFlowEdge(insn,jump);        } else         if (insnNode instanceof LookupSwitchInsnNode) {          LookupSwitchInsnNode lsi=(LookupSwitchInsnNode)insnNode;          int jump=insns.indexOf(lsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < lsi.labels.size(); ++j) {            LabelNode label=lsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnNode instanceof TableSwitchInsnNode) {          TableSwitchInsnNode tsi=(TableSwitchInsnNode)insnNode;          int jump=insns.indexOf(tsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < tsi.labels.size(); ++j) {            LabelNode label=tsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnOpcode == RET) {          if (subroutine == null) {            throw new AnalyzerException(insnNode,"RET instruction outside of a sub routine");          }          for (int i=0; i < subroutine.callers.size(); ++i) {            JumpInsnNode caller=subroutine.callers.get(i);            int call=insns.indexOf(caller);            if (frames[call] != null) {              merge(call + 1,frames[call],current,subroutines[call],subroutine.access);              newControlFlowEdge(insn,call + 1);            }          }        } else         if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) {          if (subroutine != null) {            if (insnNode instanceof VarInsnNode) {              int var=((VarInsnNode)insnNode).var;              subroutine.access[var]=true;              if (insnOpcode == LLOAD || insnOpcode == DLOAD || insnOpcode == LSTORE || insnOpcode == DSTORE) {                subroutine.access[var + 1]=true;              }            } else             if (insnNode instanceof IincInsnNode) {              int var=((IincInsnNode)insnNode).var;              subroutine.access[var]=true;            }          }          merge(insn + 1,current,subroutine);          newControlFlowEdge(insn,insn + 1);        }      }      List<TryCatchBlockNode> insnHandlers=handlers[insn];      if (insnHandlers != null) {        for (int i=0; i < insnHandlers.size(); ++i) {          TryCatchBlockNode tcb=insnHandlers.get(i);          Type type;          if (tcb.type == null) {            type=Type.getObjectType("java/lang/Throwable");          } else {            type=Type.getObjectType(tcb.type);          }          int jump=insns.indexOf(tcb.handler);          if (newControlFlowExceptionEdge(insn,tcb)) {            handler.init(f);            handler.clearStack();            handler.push(interpreter.newValue(type));            merge(jump,handler,subroutine);          }        }      }    } catch (    AnalyzerException e) {      throw new AnalyzerException(e.node,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }catch (    Exception e) {      throw new AnalyzerException(insnNode,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }  }  return frames;}  }
class C{  private void parseClass() throws IOException {  int magic=readInt();  if (magic != JavaClass.MAGIC)   throw error(L.l("bad magic number in class file"));  int minor=readShort();  int major=readShort();  _class.setMajor(major);  _class.setMinor(minor);  parseConstantPool();  int accessFlags=readShort();  _class.setAccessFlags(accessFlags);  int thisClassIndex=readShort();  _class.setThisClass(_cp.getClass(thisClassIndex).getName());  int superClassIndex=readShort();  if (superClassIndex > 0)   _class.setSuperClass(_cp.getClass(superClassIndex).getName());  int interfaceCount=readShort();  for (int i=0; i < interfaceCount; i++) {    int classIndex=readShort();    _class.addInterface(_cp.getClass(classIndex).getName());  }  int fieldCount=readShort();  for (int i=0; i < fieldCount; i++) {    parseField();  }  int methodCount=readShort();  for (int i=0; i < methodCount; i++)   parseMethod();  int attrCount=readShort();  for (int i=0; i < attrCount; i++) {    Attribute attr=parseAttribute();    _class.addAttribute(attr);  }}  }
class C{  public static void checkPermission(Permission perm) throws AccessControlException {  if (true)   return;  if (perm == null)   throw new NullPointerException();  Object[] domains=getProtectionDomains(1);  AccessControlContext acc=(AccessControlContext)domains[0];  ProtectionDomain[] pDomains=null;  if (acc != null && acc.domainCombiner != null) {    pDomains=acc.domainCombiner.combine(toArrayOfProtectionDomains(domains,null),acc.domainsArray);  } else {    pDomains=toArrayOfProtectionDomains(domains,acc);  }  for (int i=0, length=pDomains.length; i < length; i++) {    if (!pDomains[i].implies(perm)) {      throw new AccessControlException("Access Denied " + perm,perm);    }  }}  }
class C{  void compress(){  if (getCount < GET_THRESHOLD)   if (!isModified() && ClassPool.releaseUnmodifiedClassFile)   removeClassFile(); else   if (isFrozen() && !wasPruned)   saveClassFile();  getCount=0;}  }
class C{  private void insertSymbol(String symbol){  ExpressionEditor editor=this.focused;  if (editor != null) {    editor.insertLastFocused(symbol,true);  } else {    this.editors.get(0).insertLastFocused(symbol,true);  }}  }
class C{  public int recordReturnType(CtClass type,String castName,String resultName,SymbolTable tbl) throws CompileError {  returnType=type;  returnCastName=castName;  returnVarName=resultName;  if (resultName == null)   return -1; else {    int varNo=getMaxLocals();    int locals=varNo + recordVar(type,resultName,varNo,tbl);    setMaxLocals(locals);    return varNo;  }}  }
class C{  public static <T>T wrapException(Callable<T> throwingCode){  try {    return throwingCode.call();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void notifyFunctionStateChanged(int functionNumber,boolean isSet){  if (log.isDebugEnabled()) {    log.debug("notifyFunctionStateChanged: functionNumber= " + functionNumber + " isSet= "+ isSet);  }switch (functionNumber) {case 0:    _throttle.setF0(isSet);  break;case 1:_throttle.setF1(isSet);break;case 2:_throttle.setF2(isSet);break;case 3:_throttle.setF3(isSet);break;case 4:_throttle.setF4(isSet);break;case 5:_throttle.setF5(isSet);break;case 6:_throttle.setF6(isSet);break;case 7:_throttle.setF7(isSet);break;case 8:_throttle.setF8(isSet);break;case 9:_throttle.setF9(isSet);break;case 10:_throttle.setF10(isSet);break;case 11:_throttle.setF11(isSet);break;case 12:_throttle.setF12(isSet);break;case 13:_throttle.setF13(isSet);break;case 14:_throttle.setF14(isSet);break;case 15:_throttle.setF15(isSet);break;case 16:_throttle.setF16(isSet);break;case 17:_throttle.setF17(isSet);break;case 18:_throttle.setF18(isSet);break;case 19:_throttle.setF19(isSet);break;case 20:_throttle.setF20(isSet);break;case 21:_throttle.setF21(isSet);break;case 22:_throttle.setF22(isSet);break;case 23:_throttle.setF23(isSet);break;case 24:_throttle.setF24(isSet);break;case 25:_throttle.setF25(isSet);break;case 26:_throttle.setF26(isSet);break;case 27:_throttle.setF27(isSet);break;case 28:_throttle.setF28(isSet);break;}}  }
class C{  public static final boolean isLeapYear(int year){  return ((year & 0x3) == 0) && ((year % 100 != 0) || (year % 400 == 0));}  }
class C{  @Override public boolean allProceduresAreCallable(){  debugCodeCall("allProceduresAreCallable");  return true;}  }
class C{  public String isValid(String newText){  try {    URI.create(newText);    return null;  } catch (  Exception e) {    return e.getMessage();  }}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.item=null;  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public TimeSeriesPlotComponent(final String name,final TimeSeriesModel model){  super(name);  this.model=model;  initializeAttributes();  addListener();}  }
class C{  public void unRegisterEvent(Object object){  if (noParamMap.containsKey(object)) {    noParamMap.remove(object);  }  if (hasParamMap.containsKey(object)) {    hasParamMap.remove(object);  }}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
class C{  public List<HostStorageDomain> addWWNsToHostStorageDomain(String systemId,List<HostStorageDomain> hsdList,String model) throws Exception {  InputStream responseStream=null;  List<HostStorageDomain> hsdResponseList=null;  try {    String addWWNToHSDsQuery=constructWWNQuery(systemId,hsdList,model);    log.info("batch query to add FC initiators to HostStorageDomains: {}",addWWNToHSDsQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addWWNToHSDsQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      hsdResponseList=(List<HostStorageDomain>)javaResult.getBean(HDSConstants.HSD_RESPONSE_BEAN_ID);      if (null == hsdResponseList || hsdResponseList.isEmpty()) {        throw HDSException.exceptions.notAbleToAddInitiatorsToHostStorageDomain(systemId);      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Batch query to add FC initiators to HSDs failed due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return hsdResponseList;}  }
class C{  public Builder collapseKey(String value){  collapseKey=value;  return this;}  }
class C{  public void testField(){  checkPBEKey key=new checkPBEKey();  assertEquals("Incorrect serialVersionUID",key.getSerVerUID(),-1430015993304333921L);}  }
class C{  public static Map<String,Object> discVirtualsWithDiscVariants(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  Locale locale=(Locale)context.get("locale");  String errMsg=null;  try {    EntityCondition conditionOne=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("isVariant",EntityOperator.EQUALS,"Y"),EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp)),EntityOperator.AND);    EntityListIterator eliOne=EntityQuery.use(delegator).from("Product").where(conditionOne).queryIterator();    GenericValue productOne=null;    int numSoFarOne=0;    while ((productOne=eliOne.next()) != null) {      String virtualProductId=ProductWorker.getVariantVirtualId(productOne);      GenericValue virtualProduct=EntityQuery.use(delegator).from("Product").where("productId",virtualProductId).queryOne();      if (virtualProduct == null) {        continue;      }      List<GenericValue> passocList=EntityQuery.use(delegator).from("ProductAssoc").where("productId",virtualProductId,"productIdTo",productOne.get("productId"),"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();      if (passocList.size() > 0) {        for (        GenericValue passoc : passocList) {          passoc.set("thruDate",nowTimestamp);          passoc.store();        }        numSoFarOne++;        if (numSoFarOne % 500 == 0) {          Debug.logInfo("Expired variant ProductAssocs for " + numSoFarOne + " sales discontinued variant products.",module);        }      }    }    eliOne.close();    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("isVirtual",EntityOperator.EQUALS,"Y"),EntityCondition.makeCondition(EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);    EntityListIterator eli=EntityQuery.use(delegator).from("Product").where(condition).queryIterator();    GenericValue product=null;    int numSoFar=0;    while ((product=eli.next()) != null) {      List<GenericValue> passocList=EntityQuery.use(delegator).from("ProductAssoc").where("productId",product.get("productId"),"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();      if (passocList.size() == 0) {        product.set("salesDiscontinuationDate",nowTimestamp);        delegator.store(product);        numSoFar++;        if (numSoFar % 500 == 0) {          Debug.logInfo("Sales discontinued " + numSoFar + " virtual products that have no valid variants.",module);        }      }    }    eli.close();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());    errMsg=UtilProperties.getMessage(resourceError,"productutilservices.entity_error_running_discVirtualsWithDiscVariants",messageMap,locale);    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  return ServiceUtil.returnSuccess();}  }
class C{  public CF6(int numberOfVariables){  super(numberOfVariables,2,2);}  }
class C{  public final TextBuilder append(String str,int start,int end){  if (str == null)   return append("null");  if ((start < 0) || (end < 0) || (start > end)|| (end > str.length()))   throw new IndexOutOfBoundsException("start: " + start + ", end: "+ end+ ", str.length(): "+ str.length());  int newLength=_length + end - start;  while (_capacity < newLength) {    increaseCapacity();  }  for (int i=start, j=_length; i < end; ) {    char[] chars=_high[j >> B1];    int dstBegin=j & M1;    int inc=MathLib.min(C1 - dstBegin,end - i);    str.getChars(i,(i+=inc),chars,dstBegin);    j+=inc;  }  _length=newLength;  return this;}  }
class C{  public static File createDirectory(Path path){  File dir=path.toAbsolutePath().toFile();  if (dir.exists() && dir.canRead() && dir.canWrite()) {    if (dir.isDirectory())     return dir;    throw new IllegalStateException("Expecting '" + path + "' to be a directory but found a file");  }  dir.mkdirs();  return dir;}  }
class C{  public void clear(){  datePicker.clear();  timePicker.clear();}  }
class C{  private StellarFunction resolveFunction(String funcName){  try {    return functionResolver.apply(funcName);  } catch (  Exception e) {    String valid=Joiner.on(',').join(functionResolver.getFunctions());    String error=format("Unable to resolve function named '%s'.  Valid functions are %s",funcName,valid);    throw new ParseException(error,e);  }}  }
class C{  public static String createValidECMAIdentifier(String origIdentifier){  return origIdentifier.replace("-","$_");}  }
class C{  public String seedTipText(){  return "The seed value for the random number generator.";}  }
class C{  @Nullable public static PsiMethod findMethodByName(PsiClass clazz,String name){  PsiMethod[] methods=clazz.getMethods();  for (int i=methods.length - 1; i >= 0; i--) {    PsiMethod method=methods[i];    if (name.equals(method.getName())) {      return method;    }  }  return null;}  }
class C{  private void closeWall(String wallId){  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.CLOSE_WALL);  Bundle args=new Bundle();  args.putString(AppConstants.Keys.WALL_ID,wallId);  retroCallback.setExtras(args);  retroCallbackList.add(retroCallback);  CloseWallRequestModel closeWallRequestModel=new CloseWallRequestModel();  closeWallRequestModel.setIs_solved("1");  getActivity().finish();  mYeloApi.closeWall(wallId,closeWallRequestModel,retroCallback);}  }
class C{  public boolean equals(Object o){  double[][] va;  if (o instanceof Matrix) {    va=((Matrix)o).values;  } else   if (o instanceof double[][]) {    va=(double[][])o;  } else   return false;  if (va == null)   return false;  if (va.length != values.length || va[0].length != values[0].length)   return false;  for (int i=0; i < rows; i++) {    for (int j=0; j < columns; j++)     if (get(i,j) != va[i][j])     return false;  }  return true;}  }
class C{  public static boolean intersectRayTriangles(Ray ray,List<Vector3> triangles,Vector3 intersection){  float min_dist=Float.MAX_VALUE;  boolean hit=false;  if (triangles.size() % 3 != 0)   throw new RuntimeException("triangle list size is not a multiple of 3");  for (int i=0; i < triangles.size() - 2; i+=3) {    boolean result=intersectRayTriangle(ray,triangles.get(i),triangles.get(i + 1),triangles.get(i + 2),tmp);    if (result == true) {      float dist=ray.origin.tmp().sub(tmp).len2();      if (dist < min_dist) {        min_dist=dist;        best.set(tmp);        hit=true;      }    }  }  if (!hit)   return false; else {    if (intersection != null)     intersection.set(best);    return true;  }}  }
class C{  @Override public boolean interpret(PLIView view,String text){  mView=view;  try {    PLCommandTokenizer tokenizer=new PLCommandTokenizer();    tokenizer.tokenize(text);    this.parseCommands(tokenizer.getTokens(),0);  } catch (  Throwable e) {    PLLog.error("PLCommandInterpreter::interpret",e);    return false;  } finally {    mView=null;  }  return true;}  }
class C{  private void findHome(){  String home=System.getProperty("replicator.home.dir");  if (home == null)   home=System.getProperty("manager.home");  if (home == null)   home=System.getProperty("cluster.home");  if (home == null)   home=System.getProperty("user.dir");  if (home != null)   manifestPath=home + File.separator + ".."+ File.separator+ manifestFileName; else   manifestPath=manifestFileName;}  }
class C{  public static void branchWithCommit(Collection<GitRepository> repositories,String name,String file){  GitScenarios.branchWithCommit(repositories,name,file,"branch content");}  }
class C{  protected void removeOverCapacityEntries(){  int count=this.size() - this.getCapacity();  if (count <= 0)   return;  java.util.Iterator<java.util.Map.Entry<K,V>> iter=this.entrySet().iterator();  for (int i=0; i < count && iter.hasNext(); i++) {    iter.next();    iter.remove();  }}  }
class C{  public PolygonRDD(JavaRDD<Polygon> rawPolygonRDD){  this.setRawPolygonRDD(rawPolygonRDD.persist(StorageLevel.MEMORY_ONLY()));}  }
class C{  static int svd_imax(int a,int b){  return Math.max(a,b);}  }
class C{  @Override public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public LinkProperties(DataInput dis) throws IOException {  read(dis);}  }
class C{  private Map<URI,List<URI>> internalAssignStoragePorts(StorageSystem system,URI varray,List<Initiator> newInitiators,Collection<URI> volumeURIs,ExportPathParams pathParams,StringSetMap existingZoningMap){  checkPathParams(pathParams,system);  _log.info(String.format("Assigning Ports for Array %s params %s Varray %s",system.getNativeGuid(),pathParams.toString(),varray));  Map<Initiator,List<StoragePort>> existingAssignments=generateInitiatorsToStoragePortsMap(existingZoningMap,varray);  Map<NetworkLite,List<Initiator>> initiatorsByNetwork=getInitiatorsByNetwork(newInitiators,existingZoningMap,_dbClient);  Map<Initiator,NetworkLite> initiatorsToNetworkLiteMap=getInitiatorToNetworkLiteMap(initiatorsByNetwork);  Map<NetworkLite,List<StoragePort>> portsByNetwork=selectStoragePortsInNetworks(system.getId(),initiatorsByNetwork.keySet(),varray,pathParams);  Map<NetworkLite,List<StoragePort>> allocatedPorts=allocatePorts(system,varray,initiatorsByNetwork,portsByNetwork,volumeURIs,pathParams,existingZoningMap);  StoragePortsAssigner assigner=StoragePortsAssignerFactory.getAssigner(system.getSystemType());  Map<Initiator,List<StoragePort>> assignments=new HashMap<Initiator,List<StoragePort>>();  Map<URI,Map<URI,List<Initiator>>> hostsToNetToInitiators=getHostInitiatorsMapFromNetworkLite(initiatorsByNetwork);  Map<URI,List<StoragePort>> allocatedPortsMap=getAllocatedPortsMap(allocatedPorts);  for (  URI hostURI : hostsToNetToInitiators.keySet()) {    assigner.assignPortsToHost(assignments,hostsToNetToInitiators.get(hostURI),allocatedPortsMap,pathParams,existingAssignments,hostURI,initiatorsToNetworkLiteMap);  }  validateMinPaths(system,pathParams,existingAssignments,assignments,newInitiators);  return convertAssignmentsToURIs(assignments);}  }
class C{  public Builder mappings(String from,String to){  if (mappings == null) {    mappings=new HashMap<String,String>();  }  mappings.put(from,to);  return this;}  }
class C{  public boolean isOnSaturday(){  Object oo=get_Value(COLUMNNAME_OnSaturday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int makeListItemSurveyResp(Delegator delegator,GenericValue item,List<String> surveyResps) throws GenericEntityException {  if (UtilValidate.isNotEmpty(surveyResps)) {    int count=0;    for (    String responseId : surveyResps) {      GenericValue listResp=delegator.makeValue("ShoppingListItemSurvey");      listResp.set("shoppingListId",item.getString("shoppingListId"));      listResp.set("shoppingListItemSeqId",item.getString("shoppingListItemSeqId"));      listResp.set("surveyResponseId",responseId);      delegator.create(listResp);      count++;    }    return count;  }  return -1;}  }
class C{  public boolean isMoveCursors(){  if (moveCursors == null) {    return true;  } else {    return moveCursors;  }}  }
class C{  public static DecimalStyle of(Locale locale){  Objects.requireNonNull(locale,"locale");  DecimalStyle info=CACHE.get(locale);  if (info == null) {    info=create(locale);    CACHE.putIfAbsent(locale,info);    info=CACHE.get(locale);  }  return info;}  }
class C{  String traceback(int level){  StringBuffer sb=new StringBuffer();  sb.append("stack traceback:");  for (DebugLib.CallFrame c; (c=getCallFrame(level++)) != null; ) {    sb.append("\n\t");    sb.append(c.shortsource());    sb.append(':');    if (c.currentline() > 0)     sb.append(c.currentline() + ":");    sb.append(" in ");    DebugInfo ar=auxgetinfo("n",c.f,c);    if (c.linedefined() == 0)     sb.append("main chunk"); else     if (ar.name != null) {      sb.append("function '");      sb.append(ar.name);      sb.append('\'');    } else {      sb.append("function <" + c.shortsource() + ":"+ c.linedefined()+ ">");    }  }  sb.append("\n\t[Java]: in ?");  return sb.toString();}  }
class C{  private int numberSharedLevels(long[] a,long[] b){  for (int i=0, j=a.length - 1; i < a.length; i++, j--) {    final long diff=a[j] ^ b[j];    if (diff != 0) {      final int expected=(a.length * Long.SIZE) - (d * h);      return ((BitsUtil.numberOfLeadingZeros(diff) + i * Long.SIZE) - expected) / d;    }  }  return h - 1;}  }
class C{  protected void fillToolbar(){  ToolBarManager toolBarManager=getToolBarManager();  if (toolBarManager == null)   return;  fInput.fillToolBar(toolBarManager,this);  toolBarManager.update(true);}  }
class C{  protected final void writeEndTag(String tagname) throws UncheckedIOException {  try {    if (doPrettyPrint) {      this.indentationLevel--;      if (!this.noWhitespaces) {        this.writer.write(NL);        indent();      } else {        this.noWhitespaces=false;      }    }    this.writer.write("</" + tagname + ">");  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public strike addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private void doubleTriangle(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node B : nodes) {    List<Node> intoBArrows=graph.getNodesInTo(B,Endpoint.ARROW);    List<Node> intoBCircles=graph.getNodesInTo(B,Endpoint.CIRCLE);    List<Node> possA=new LinkedList<>(intoBArrows);    List<Node> possC=new LinkedList<>(intoBArrows);    for (    Node D : intoBCircles) {      for (      Node A : possA) {        for (        Node C : possC) {          if (C == A) {            continue;          }          if (!graph.isAdjacentTo(A,D) || !graph.isAdjacentTo(C,D)) {            continue;          }          if (graph.isDefCollider(A,D,C)) {            continue;          }          if (!isArrowpointAllowed(graph,D,B)) {            continue;          }          graph.setEndpoint(D,B,Endpoint.ARROW);          changeFlag=true;        }      }    }  }}  }
class C{  static <K>boolean checkInvariants(TreeNode<K> t){  TreeNode<K> tp=t.parent, tl=t.left, tr=t.right, tb=t.prev, tn=(TreeNode<K>)t.next;  if (tb != null && tb.next != t)   return false;  if (tn != null && tn.prev != t)   return false;  if (tp != null && t != tp.left && t != tp.right)   return false;  if (tl != null && (tl.parent != t || tl.hash > t.hash))   return false;  if (tr != null && (tr.parent != t || tr.hash < t.hash))   return false;  if (t.red && tl != null && tl.red && tr != null && tr.red)   return false;  if (tl != null && !checkInvariants(tl))   return false;  if (tr != null && !checkInvariants(tr))   return false;  return true;}  }
class C{  @Override public String toString(){  final StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(address.toHexString());  stringBuilder.append(": ");  stringBuilder.append(ReilHelpers.MnemonicCodeToMnemonic(mnemonic));  stringBuilder.append(" [");  stringBuilder.append(firstOperand.getSize());  stringBuilder.append(" ");  stringBuilder.append(firstOperand);  stringBuilder.append(", ");  stringBuilder.append(secondOperand.getSize());  stringBuilder.append(" ");  stringBuilder.append(secondOperand);  stringBuilder.append(", ");  stringBuilder.append(thirdOperand.getSize());  stringBuilder.append(" ");  stringBuilder.append(thirdOperand);  stringBuilder.append("]");  return stringBuilder.toString();}  }
class C{  public long rangeCount(boolean exactCount){  if (exactCount && ndx.getIndexMetadata().getDeleteMarkers()) {    long n=0L;    final Iterator itr=ndx.rangeIterator(fromKey,toKey,0,0,null);    while (itr.hasNext()) {      itr.next();      n++;    }    return n;  }  return ndx.rangeCount(fromKey,toKey);}  }
class C{  public int countTokens(){  int count=0;  boolean inToken=false;  for (int i=position, length=string.length(); i < length; i++) {    if (delimiters.indexOf(string.charAt(i),0) >= 0) {      if (returnDelimiters)       count++;      if (inToken) {        count++;        inToken=false;      }    } else {      inToken=true;    }  }  if (inToken)   count++;  return count;}  }
class C{  @DSSpec(DSCat.INTERNET) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.619 -0500",hash_original_method="9C6F28F8DBD161E857A3A3894EC60A85",hash_generated_method="D7D8C3012B2E8229BBDDE272C9BE3C3D") @Override public void connect(SocketAddress endpoint) throws IOException {  super.connect(endpoint);  init();}  }
class C{  public DatabaseUtils(File propsFile) throws Exception {  this(loadProperties(propsFile));}  }
class C{  void loadProtoIds() throws IOException {  int count=mHeaderItem.protoIdsSize;  mProtoIds=new ProtoIdItem[count];  seek(mHeaderItem.protoIdsOff);  for (int i=0; i < count; i++) {    mProtoIds[i]=new ProtoIdItem();    mProtoIds[i].shortyIdx=readInt();    mProtoIds[i].returnTypeIdx=readInt();    mProtoIds[i].parametersOff=readInt();  }  for (int i=0; i < count; i++) {    ProtoIdItem protoId=mProtoIds[i];    int offset=protoId.parametersOff;    if (offset == 0) {      protoId.types=new int[0];      continue;    } else {      seek(offset);      int size=readInt();      protoId.types=new int[size];      for (int j=0; j < size; j++) {        protoId.types[j]=readShort() & 0xffff;      }    }  }}  }
class C{  public static <T>Task<T> cast(CompletionStage<T> stage){  if (stage instanceof Task) {    return (Task<T>)stage;  }  final Task<T> t=new Task<>();  stage.whenComplete(null);  return t;}  }
class C{  protected void doNodeConnect(Node n){  if (!shutDown && n.getNodeId() < syncManager.getLocalNodeId()) {    Short nodeId=n.getNodeId();synchronized (connections) {      NodeConnection c=connections.get(n.getNodeId());      if (c == null) {        connections.put(nodeId,c=new NodeConnection());      }      if (logger.isTraceEnabled()) {        logger.trace("[{}->{}] Connection state: {}",new Object[]{syncManager.getLocalNodeId(),nodeId,c.state});      }      if (c.state.equals(NodeConnectionState.NONE)) {        if (logger.isDebugEnabled()) {          logger.debug("[{}->{}] Attempting connection {} {}",new Object[]{syncManager.getLocalNodeId(),nodeId,n.getHostname(),n.getPort()});        }        SocketAddress sa=new InetSocketAddress(n.getHostname(),n.getPort());        c.pendingFuture=clientBootstrap.connect(sa);        c.pendingFuture.addListener(new ConnectCFListener(n));        c.state=NodeConnectionState.PENDING;      }    }  }}  }
class C{  public boolean handleMessage(Message m,Object object){  return false;}  }
class C{  static boolean compareNotNull(Database database,Value l,Value r,int compareType){  boolean result;switch (compareType) {case EQUAL:case EQUAL_NULL_SAFE:    result=database.areEqual(l,r);  break;case NOT_EQUAL:case NOT_EQUAL_NULL_SAFE:result=!database.areEqual(l,r);break;case BIGGER_EQUAL:result=database.compare(l,r) >= 0;break;case BIGGER:result=database.compare(l,r) > 0;break;case SMALLER_EQUAL:result=database.compare(l,r) <= 0;break;case SMALLER:result=database.compare(l,r) < 0;break;default :throw DbException.throwInternalError("type=" + compareType);}return result;}  }
class C{  public void addUser(User user){  this.users.add(user);  this.fireTableRowsInserted(this.users.size() - 1,this.users.size() - 1);}  }
class C{  public boolean checkChangeForGroup(final String uri,final String groupName) throws IOException {  notNull(uri);  notNull(groupName);  LOG.debug("group={}, uri={}",groupName,uri);  final ResourceChangeInfo resourceInfo=changeInfoMap.get(uri);  if (resourceInfo.isCheckRequiredForGroup(groupName)) {    final InputStream inputStream=locatorFactory.locate(uri);    try {      final String currentHash=hashStrategy.getHash(inputStream);      resourceInfo.updateHashForGroup(currentHash,groupName);    }  finally {      IOUtils.closeQuietly(inputStream);    }  }  return resourceInfo.isChanged(groupName);}  }
class C{  public void mouseMoved(){}  }
class C{  protected synchronized void waitTillCurrent(){  Trace.trace(Item.SCHED_DETAIL,"%d: waiting for thread wakeup",getId());  while (!isCurrent) {    try {      this.wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  public static final Geo[] hull(Geo[] geos,double tolerance){  Geo pivot=findHighest(geos);  TreeSet sortedGeos=new TreeSet(new PivotAngleComparator(pivot));  for (int i=0; i < geos.length; i++) {    Geo g=geos[i];    if (g != pivot) {      sortedGeos.add(g);    }  }  Stack hullStack=new Stack();  hullStack.push(pivot);  Geo gCross, midCross=null;  Geo geo=null, endGeo=null, midGeo=null;  Iterator sortedGeoIt=sortedGeos.iterator();  if (sortedGeoIt.hasNext()) {    midGeo=(Geo)sortedGeoIt.next();    while (midGeo.distance(pivot) == 0 && sortedGeoIt.hasNext()) {      midGeo=(Geo)sortedGeoIt.next();    }  }  Geo lastGeoRead=midGeo;  while (sortedGeoIt.hasNext() && midGeo != null) {    geo=(Geo)sortedGeoIt.next();    double dist=geo.distance(lastGeoRead);    if (dist <= tolerance) {      continue;    }    endGeo=(Geo)hullStack.peek();    midCross=endGeo.crossNormalize(midGeo);    gCross=midGeo.crossNormalize(geo);    Geo i=gCross.crossNormalize(midCross).antipode();    if (midGeo.distance(i) < Math.PI / 2) {      hullStack.push(midGeo);      endGeo=midGeo;      midGeo=geo;    } else {      while (hullStack.size() > 1) {        midGeo=(Geo)hullStack.pop();        endGeo=(Geo)hullStack.peek();        midCross=endGeo.crossNormalize(midGeo);        gCross=midGeo.crossNormalize(geo);        i=gCross.crossNormalize(midCross).antipode();        if (midGeo.distance(i) < Math.PI / 2) {          hullStack.push(midGeo);          midGeo=geo;          break;        }      }    }    lastGeoRead=geo;  }  if (midGeo != null) {    hullStack.push(midGeo);  }  hullStack.push(pivot);  Geo[] regionGeos=new Geo[hullStack.size()];  int i=0;  while (!hullStack.isEmpty()) {    regionGeos[i++]=(Geo)hullStack.pop();  }  return regionGeos;}  }
class C{  public boolean isSubsignature(IMethod overriding,IMethod overridden) throws JavaModelException {  if (!overridden.getElementName().equals(overriding.getElementName())) {    return false;  }  int nParameters=overridden.getNumberOfParameters();  if (nParameters != overriding.getNumberOfParameters()) {    return false;  }  if (!hasCompatibleTypeParameters(overriding,overridden)) {    return false;  }  return nParameters == 0 || hasCompatibleParameterTypes(overriding,overridden);}  }
class C{  private void validateStorageUnitNotificationFilter(StorageUnitNotificationFilter filter){  Assert.notNull(filter,"A storage unit notification filter must be specified.");  validateStorageUnitNotificationFilterBusinessObjectDefinitionFields(filter);  trimStorageUnitNotificationFilterBusinessObjectFormatFields(filter);  Assert.hasText(filter.getStorageName(),"A storage name must be specified.");  filter.setStorageName(filter.getStorageName().trim());  if (filter.getNewStorageUnitStatus() != null) {    filter.setNewStorageUnitStatus(filter.getNewStorageUnitStatus().trim());  }  if (filter.getOldStorageUnitStatus() != null) {    filter.setOldStorageUnitStatus(filter.getOldStorageUnitStatus().trim());  }  if (StringUtils.isNotBlank(filter.getNewStorageUnitStatus()) && StringUtils.isNotBlank(filter.getOldStorageUnitStatus())) {    Assert.isTrue(!filter.getOldStorageUnitStatus().equalsIgnoreCase(filter.getNewStorageUnitStatus()),"The new storage unit status is the same as the old one.");  }}  }
class C{  @Override public synchronized void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  @Override @SuppressWarnings("unchecked") public boolean equals(Object o){  Bean<? extends DataObject> bean=(Bean<? extends DataObject>)o;  if (dataClass != bean.getDataClass()) {    return false;  }  for (  PropertyDescriptor property : getProperties()) {    Object myVal=getValue(property.getName());    Object yourVal=bean.getValue(property.getName());    if (myVal == null && yourVal == null) {      continue;    }    if (myVal == null || yourVal == null) {      return false;    }    if (!myVal.equals(yourVal)) {      return false;    }  }  return true;}  }
class C{  public void addAnalytics(){  AtomicReference<Range<Integer>> range=new AtomicReference<>();  AtomicReference<Boolean> isPublish1hzOutsideRange=new AtomicReference<>();  range.set(app.utils().getRange(sensorId,"outside1hzMeanRange",Integer.class));  isPublish1hzOutsideRange.set(false);  app.mqttDevice().commands(commandId("set1hzMeanRangeThreshold")).tag(commandId("set1hzMeanRangeThreshold")).sink(null);  app.mqttDevice().commands(commandId("setPublish1hzOutsideRange")).tag(commandId("setPublish1hzOutsideRange")).sink(null);  PeriodicRandomSensor simulatedSensorFactory=new PeriodicRandomSensor();  TStream<Pair<Long,Integer>> raw1khz=simulatedSensorFactory.newInteger(t,1,255).tag("raw1khz");  traceStream(raw1khz,"raw1khz");  TStream<JsonObject> j1khz=JsonTuples.wrap(raw1khz,sensorId);  traceStream(j1khz,"j1khz");  TStream<JsonObject> j1hzStats=JsonTuples.batch(j1khz,1000,JsonTuples.statistics(MIN,MAX,MEAN,STDDEV)).tag("1hzStats");  j1hzStats=j1hzStats.last(30,JsonTuples.keyFn()).aggregate(null);  traceStream(j1hzStats,"j1hzStats");  TStream<JsonObject> outside1hzMeanRange=j1hzStats.filter(null).tag("outside1hzMeanRange");  traceStream(outside1hzMeanRange,null);  app.utils().logStream(outside1hzMeanRange,"ALERT","outside1hzMeanRange");  app.mqttDevice().events(PlumbingStreams.pressureReliever(outside1hzMeanRange.filter(null),null,30),app.sensorEventId(sensorId,"outside1hzMeanRangeEvent"),QoS.FIRE_AND_FORGET);  periodicallyPublishLastNInfo(outside1hzMeanRange,10,30,"periodicLastOutsideRangeEvent");}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Secured public void payBill(long userId,BigDecimal amount,Date created,PaymentType payType,String details,boolean updateCache) throws ConcurrentUpdateSqlException, Exception {  checkAccessFor_ADMIN();  long id=universal.nextSeqFor(payments);  PaymentExt payment=PaymentExt.createSystemBill(id,userId,amount,created,payType,details);  BigDecimal newVal=doPayment(userId,payment,updateCache);  log.info("bill payed: userId=" + userId + (newVal != null ? ", newBalance=" + newVal : "")+ ", req="+ getReqInfoStr());}  }
class C{  private void addNetworkInfo(){  try {    Enumeration<NetworkInterface> networkInterfaces=NetworkInterface.getNetworkInterfaces();    while (networkInterfaces.hasMoreElements()) {      NetworkInterface networkInterface=networkInterfaces.nextElement();      Enumeration<InetAddress> inetAddresses=networkInterface.getInetAddresses();      while (inetAddresses.hasMoreElements()) {        InetAddress inetAddress=inetAddresses.nextElement();        String hostAddress=inetAddress.getHostAddress();        if (!hostAddress.equals("0.0.0.0") && !hostAddress.regionMatches(0,"127",0,3) && !hostAddress.contains(":")) {          addString("Network Interface: " + networkInterface.getName());          addString(" Long Name: " + networkInterface.getDisplayName());          addString(" Host Name: " + inetAddress.getHostName());          addString(" IP address: " + hostAddress);        }      }    }  } catch (  SocketException ex) {    addString("Unable to enumerate Network Interfaces");  }  Collection<ZeroConfService> services=ZeroConfService.allServices();  for (  InetAddress address : ZeroConfService.netServices().keySet()) {    addString("ZeroConfService host: " + ZeroConfService.hostName(address) + " running "+ services.size()+ " service(s)");  }  if (services.size() > 0) {    for (    ZeroConfService service : services) {      addString("ZeroConfService: " + service.serviceInfo().getQualifiedName() + "  ");      addString(" Name: " + service.name() + "   ");      try {        for (        String address : service.serviceInfo().getHostAddresses()) {          addString(" Address:" + address + "   ");        }      } catch (      NullPointerException ex) {        addString(" Address: [unknown due to NPE]");      }      addString(" Port: " + service.serviceInfo().getPort() + "   ");      addString(" Server: " + service.serviceInfo().getServer() + "   ");      addString(" Type: " + service.type() + "   ");      try {        for (        String url : service.serviceInfo().getURLs()) {          addString(" URL: " + url + "   ");        }      } catch (      NullPointerException ex) {        addString(" URL: [unknown due to NPE]");      }      addString(" Published: " + (service.isPublished() ? "yes" : "no"));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.713 -0500",hash_original_method="C034852EE12EEF6A2A977B845769FACB",hash_generated_method="D475DAA260B368EF490A5249CEC7163B") private Header createDigestHeader(final Credentials credentials,final String digest) throws AuthenticationException {  CharArrayBuffer buffer=new CharArrayBuffer(128);  if (isProxy()) {    buffer.append(AUTH.PROXY_AUTH_RESP);  } else {    buffer.append(AUTH.WWW_AUTH_RESP);  }  buffer.append(": Digest ");  String uri=getParameter("uri");  String realm=getParameter("realm");  String nonce=getParameter("nonce");  String opaque=getParameter("opaque");  String response=digest;  String algorithm=getParameter("algorithm");  String uname=credentials.getUserPrincipal().getName();  List<BasicNameValuePair> params=new ArrayList<BasicNameValuePair>(20);  params.add(new BasicNameValuePair("username",uname));  params.add(new BasicNameValuePair("realm",realm));  params.add(new BasicNameValuePair("nonce",nonce));  params.add(new BasicNameValuePair("uri",uri));  params.add(new BasicNameValuePair("response",response));  if (qopVariant != QOP_MISSING) {    params.add(new BasicNameValuePair("qop",getQopVariantString()));    params.add(new BasicNameValuePair("nc",NC));    params.add(new BasicNameValuePair("cnonce",getCnonce()));  }  if (algorithm != null) {    params.add(new BasicNameValuePair("algorithm",algorithm));  }  if (opaque != null) {    params.add(new BasicNameValuePair("opaque",opaque));  }  for (int i=0; i < params.size(); i++) {    BasicNameValuePair param=params.get(i);    if (i > 0) {      buffer.append(", ");    }    boolean noQuotes="nc".equals(param.getName()) || "qop".equals(param.getName());    BasicHeaderValueFormatter.DEFAULT.formatNameValuePair(buffer,param,!noQuotes);  }  return new BufferedHeader(buffer);}  }
class C{  public void run(){  double dist=Integer.MAX_VALUE;  int idx=-1;  int targetLen=target.length;  int end=offset + len;  for (int i=offset; i < end; i++) {    double d=0;    for (int j=0; j < targetLen; j++) {      double delta=target[j] - points[i][j];      d+=delta * delta;    }    d=Math.sqrt(d);    if (d < dist) {      dist=d;      idx=i;    }  }  best=dist;  bestIndex=idx;}  }
class C{  public RecordsMatcher<T> atMostNOfThem(int n){  return new RecordsMatcher<>(MatcherCombiner.atMost(matchers,n));}  }
class C{  public static String deriveFault(Span span){  List<SpanHttpDeriverUtil.HttpCode> errorCodes=SpanHttpDeriverUtil.getClientOrServerErrors(SpanHttpDeriverUtil.getHttpStatusCodes(span.getBinaryAnnotations()));  if (errorCodes.size() > 0) {    return errorCodes.iterator().next().getDescription();  }  return null;}  }
class C{  public static RefactoringStatus checkName(String name,IStatus status){  RefactoringStatus result=new RefactoringStatus();  if ("".equals(name))   return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.Checks_Choose_name);  if (status.isOK())   return result;switch (status.getSeverity()) {case IStatus.ERROR:    return RefactoringStatus.createFatalErrorStatus(status.getMessage());case IStatus.WARNING:  return RefactoringStatus.createWarningStatus(status.getMessage());case IStatus.INFO:return RefactoringStatus.createInfoStatus(status.getMessage());default :return new RefactoringStatus();}}  }
class C{  public void run(){  try {    nibbleIncomingData();  } catch (  java.io.IOException e) {    log.warn("nibble: Exception: " + e.toString());  }  while (true) {    try {      handleIncomingData();    } catch (    java.io.IOException e) {      log.warn("run: Exception: " + e.toString());    }  }}  }
class C{  public static byte[] calculateDigest(AlgorithmIdentifier algorithm,byte[] data) throws OperatorCreationException, IOException {  DigestCalculator dc=createDigestCalculator(algorithm);  return calculateDigest(dc,data);}  }
class C{  double shiftPortSpacing(final Port port,final double delta){  final Ports<? extends Port> ports=port.getPorts();  final int myIndex=ports.getAllPorts().indexOf(port);  final Double old=(double)model.getPortSpacing(port);  double newY=old + delta;  if (model.isSnapToGrid()) {    newY=Math.floor(newY / (ProcessDrawer.PORT_SIZE * 3d / 2d)) * (ProcessDrawer.PORT_SIZE * 3 / 2);  }  double diff=newY - old;  if (diff == 0) {    return 0;  } else   if (diff > 0) {    for (int i=myIndex + 1; i < ports.getNumberOfPorts(); i++) {      Port other=ports.getPortByIndex(i);      double otherSpacing=model.getPortSpacing(other);      if (otherSpacing < diff) {        model.resetPortSpacing(other);      } else {        model.setPortSpacing(other,(int)(otherSpacing - diff));        break;      }    }    model.setPortSpacing(port,(int)(old + diff));    Point bottomPortPos=ProcessDrawUtils.createPortLocation(ports.getPortByIndex(ports.getNumberOfPorts() - 1),model);    double height=model.getProcessHeight(ports.getOwner().getConnectionContext());    if (bottomPortPos != null && bottomPortPos.getY() > height) {      double tooMuch=bottomPortPos.getY() - height;      diff-=tooMuch;      model.setPortSpacing(port,(int)(old + diff));    }    return diff;  } else   if (diff < 0) {    double actuallyRemoved=0;    for (int i=myIndex; i >= 0; i--) {      Port other=ports.getPortByIndex(i);      double otherSpacing=model.getPortSpacing(other);      if (otherSpacing < -diff) {        actuallyRemoved+=model.getPortSpacing(other);        model.resetPortSpacing(other);      } else {        model.setPortSpacing(other,(int)(otherSpacing + diff));        actuallyRemoved=-diff;        break;      }    }    if (ports.getNumberOfPorts() > myIndex + 1) {      Port other=ports.getPortByIndex(myIndex + 1);      model.setPortSpacing(other,(int)(model.getPortSpacing(other) + actuallyRemoved));    }    return -actuallyRemoved;  } else {    return 0;  }}  }
class C{  public static Value lessThan(Session session,Value x,Value y){  x=safeValue(x,Isolate.DEFAULT_ID);  y=safeValue(y,Isolate.DEFAULT_ID);  Value px=toPrimitive(session,x,PreferredType.NUMBER,x.getIsolateId());  Value py=toPrimitive(session,y,PreferredType.NUMBER,y.getIsolateId());  if (px.getType() == VariableType.STRING && py.getType() == VariableType.STRING) {    String sx=px.getValueAsString();    String sy=py.getValueAsString();    return DValue.forPrimitive(new Boolean(sx.compareTo(sy) < 0),x.getIsolateId());  } else {    double dx=toNumber(session,px);    double dy=toNumber(session,py);    if (Double.isNaN(dx) || Double.isNaN(dy))     return DValue.forPrimitive(Value.UNDEFINED,x.getIsolateId());    return DValue.forPrimitive(new Boolean(dx < dy),x.getIsolateId());  }}  }
class C{  private void checkOneNode(int id) throws Exception {  try (Ignite ignite=G.start(getConfiguration("grid" + id))){    String id8=U.id8(ignite.cluster().localNode().id());    String logPath="work/log/ignite-" + id8 + ".log";    File logFile=U.resolveIgnitePath(logPath);    assertNotNull("Failed to resolve path: " + logPath,logFile);    assertTrue("Log file does not exist: " + logFile,logFile.exists());    String logContent=U.readFileToString(logFile.getAbsolutePath(),"UTF-8");    assertTrue("Log file does not contain it's node ID: " + logFile,logContent.contains(">>> Local node [ID=" + id8.toUpperCase()));  } }  }
class C{  protected ClassDefinition_Impl(){  super();}  }
class C{  @Override public void startTour(Tour tour,int currentStep){  GwtTour.startTour(tour,currentStep);}  }
class C{  synchronized Session createSession(User user){  if (closing) {    return null;  }  if (exclusiveSession != null) {    throw DbException.get(ErrorCode.DATABASE_IS_IN_EXCLUSIVE_MODE);  }  Session session=new Session(this,user,++nextSessionId);  userSessions.add(session);  trace.info("connecting session #{0} to {1}",session.getId(),databaseName);  if (delayedCloser != null) {    delayedCloser.reset();    delayedCloser=null;  }  return session;}  }
class C{  public static boolean startCheckPrint(int C_Payment_ID,boolean IsDirectPrint){  int HR_PaySelectionCheck_ID=getHRPaySelectionCheckById(Env.getCtx(),C_Payment_ID,null);  if (HR_PaySelectionCheck_ID > 0) {    return startDocumentPrint(ReportEngine.HR_CHECK,HR_PaySelectionCheck_ID,null,-1,IsDirectPrint);  }  boolean ok=MPaySelectionCheck.deleteGeneratedDraft(Env.getCtx(),C_Payment_ID,null);  int C_PaySelectionCheck_ID=0;  MPaySelectionCheck psc=MPaySelectionCheck.getOfPayment(Env.getCtx(),C_Payment_ID,null);  if (psc != null)   C_PaySelectionCheck_ID=psc.getC_PaySelectionCheck_ID(); else {    psc=MPaySelectionCheck.createForPayment(Env.getCtx(),C_Payment_ID,null);    if (psc != null)     C_PaySelectionCheck_ID=psc.getC_PaySelectionCheck_ID();  }  return startDocumentPrint(ReportEngine.CHECK,C_PaySelectionCheck_ID,null,-1,IsDirectPrint);}  }
class C{  public AnimSVGTransformList(){  itemList=new ArrayList(1);}  }
class C{  public IndexRequest refresh(boolean refresh){  this.refresh=refresh;  return this;}  }
class C{  private void showTabs(){  mainPanel.removeAll();  tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.urls"),getUrlsTableScrollPane());  tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.messages"),getMessagesTableScrollPanel());  getShowMessagesToggleButton().setText(Constant.messages.getString("spider.toolbar.button.showmessages.label.selected"));  tabbedPane.setSelectedIndex(1);  mainPanel.add(tabbedPane);  mainPanel.revalidate();  mainPanel.repaint();}  }
class C{  static Set<String> parsePathParameters(String path){  Matcher m=PARAM_URL_REGEX.matcher(path);  Set<String> patterns=new LinkedHashSet<String>();  while (m.find()) {    patterns.add(m.group(1));  }  return patterns;}  }
class C{  @After public void teardown(){  if (hdfsPropFile != null) {    hdfsPropFile.delete();  }}  }
class C{  @Override public SysMemAllocator disableActiveGC(){  m_activegc=false;  return this;}  }
class C{  private static boolean hasSource(ITypeRoot je){  if (je == null || !je.exists())   return false;  try {    return je.getBuffer() != null;  } catch (  JavaModelException ex) {    LOG.error(ex.getMessage(),ex);  }  return false;}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  public CDialogUpdater(final JCriteriumTree jtree,final CCriteriumTree ctree,final JPanel conditionPanel,final JButton conditionButton,final JButton executeButton){  m_jtree=jtree;  m_ctree=ctree;  m_defineConditionPanel=conditionPanel;  m_addConditionButton=conditionButton;  m_executeButton=executeButton;  m_jtree.addTreeSelectionListener(m_treeSelectionListener);  m_ctree.addListener(m_treeCriteriumlListener);}  }
class C{  @Override public void stop(){  sender.stop();}  }
class C{  protected void clearMod2Txrun(){  mod2=mod2 & ~MOD2_TXRUN_MASK;}  }
class C{  private static boolean endsWith(final CharSequence str,final CharSequence suffix,final boolean ignoreCase){  if (str == null || suffix == null) {    return str == null && suffix == null;  }  if (suffix.length() > str.length()) {    return false;  }  final int strOffset=str.length() - suffix.length();  return CharSequenceUtils.regionMatches(str,ignoreCase,strOffset,suffix,0,suffix.length());}  }
class C{  private static int computeVisualLength(CharSequence seq,int tablen){  int size=0;  for (int i=0; i < seq.length(); i++) {    char ch=seq.charAt(i);    if (ch == '\t') {      if (tablen != 0)       size+=tablen - size % tablen;    } else {      size++;    }  }  return size;}  }
class C{  public double distance(final java.awt.geom.Point2D p){  final double dx=(double)this.x - p.getX();  final double dy=(double)this.y - p.getY();  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public TypeConstraint createTypeConstraint(){  TypeConstraintImpl typeConstraint=new TypeConstraintImpl();  return typeConstraint;}  }
class C{  public void put(String localFile,String remoteTargetDirectory,String mode) throws IOException {  put(new String[]{localFile},remoteTargetDirectory,mode);}  }
class C{  private static void writeJpegFile(OutputStream os,List<Section> sections) throws IOException {  os.write(0xff);  os.write(M_SOI);  for (  Section section : sections) {    os.write(0xff);    os.write(section.marker);    if (section.length > 0) {      int lh=section.length >> 8;      int ll=section.length & 0xff;      os.write(lh);      os.write(ll);    }    os.write(section.data);  }}  }
class C{  @After public void tearDown() throws Exception {  Aspects portfolioAccounts=m_tradePersistentModel.findAspectsByClassName(PortfolioAccount.class.getName());  for (  Aspect aspect : portfolioAccounts.getAspect()) {    m_tradePersistentModel.removeAspect(aspect);  }  Aspects accounts=m_tradePersistentModel.findAspectsByClassName(Account.class.getName());  for (  Aspect aspect : accounts.getAspect()) {    m_tradePersistentModel.removeAspect(aspect);  }}  }
class C{  static void mkdirOrThrow(File dir) throws IOException {  if (!dir.mkdirs() && !dir.isDirectory()) {    throw new IOException("cannot mkdir: " + dir);  }}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> reverseOrder(){  return new Builder<K,V>(Ordering.natural().reverse());}  }
class C{  public void findAndInit(Object obj){}  }
class C{  public void addExtensionNamespace(String uri,ExtensionHandler extNS){  m_extensionFunctionNamespaces.put(uri,extNS);}  }
class C{  public Contributor(String name){  super(KEY,name);}  }
class C{  public void loadFile(File f) throws org.jdom2.JDOMException, java.io.IOException {  root=rootFromFile(f);}  }
class C{  public TextSwitcher(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public int unsetMask(int mask){  value=unsetMask(value,mask);  return value;}  }
class C{  public SprogType(int type){  if (log.isDebugEnabled()) {    log.debug("SprogType(int) ctor, type: " + type);  }  sprogType=type;}  }
class C{  public void updateDepthBuffer(){  this.depthBuffer.blitDepthBuffer(this.getMainFramebuffer());  this.getMainFramebuffer().bindFramebuffer(false);  GlStateManager.bindTexture(0);}  }
class C{  public void testDefaultInitialState(){  ForkJoinPool p=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(p);    assertSame(ForkJoinPool.defaultForkJoinWorkerThreadFactory,p.getFactory());    assertFalse(p.getAsyncMode());    assertEquals(0,p.getActiveThreadCount());    assertEquals(0,p.getStealCount());    assertEquals(0,p.getQueuedTaskCount());    assertEquals(0,p.getQueuedSubmissionCount());    assertFalse(p.hasQueuedSubmissions());    assertFalse(p.isShutdown());    assertFalse(p.isTerminating());    assertFalse(p.isTerminated());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public abbr addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private double calculateDist(Point basisPoint1,Point basisPoint2,Point slopeP1,Point slopeP2){  double basisPoint2XAtPoint1Time=calculateSlope(slopeP2,slopeP1) * (basisPoint1.y - basisPoint2.y) + basisPoint2.x;  return basisPoint2XAtPoint1Time - basisPoint1.x;}  }
class C{  private final void realloc(int newSize,int newOffset){  if (newSize != bytes.length) {    byte[] newBytes=new byte[newSize];    System.arraycopy(bytes,offset,newBytes,newOffset,length);    bytes=newBytes;    offset=newOffset;  }}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] dist=new double[num_classes];  double[] currentData=new double[numFeatures];  double[] ranking=new double[num_classes];  for (int j=0; j < num_features; j++) {    currentData[j]=instance.value(num_classes + j);    currentData[num_features + j]=1 - currentData[j];  }  SortPair[] sortedActivations=ARTActivateCategories(currentData);  java.util.Arrays.sort(sortedActivations);  double diff_act=sortedActivations[0].getValue() - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < numCategories; i++) {    activ_change=(sortedActivations[0].getValue() - sortedActivations[i].getValue()) / sortedActivations[0].getValue();    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  for (int i=0; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    for (int j=0; j < num_classes; j++) {      ranking[j]=ranking[j] + best_matches[i] * weightsB[currentCategory][j];    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  public boolean isKerberosToken(){  return kerberosToken;}  }
class C{  public void sync() throws IOException {  structureLock.readLock().lock();  try {    writeFileHeader();  }  finally {    structureLock.readLock().unlock();  }  if (forceSync) {    nioFile.force(false);  }}  }
class C{  private PreferencesUtil(){}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public static Object loadFileRelative(String loaddir,String file){  try {    requireLoad();    if (supported()) {      return ScriptLoader.loadRelative(loaddir,engine,(file.contains(".") ? file : file + ".js"));    }  } catch (  Exception e) {    Toast.log().error("Could not Load JavaScript script files: " + e);    Toast.log().exception(e);  }  return null;}  }
class C{  public CTextArea(JTextArea textArea){  super(textArea);  m_textArea=textArea;  super.setOpaque(false);  super.getViewport().setOpaque(false);  m_textArea.setLineWrap(true);  m_textArea.setWrapStyleWord(true);  m_textArea.firePropertyChange("editable",!isEditable(),isEditable());}  }
class C{  public static Class[] toClass(Object[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_CLASS_ARRAY;  }  Class[] classes=new Class[array.length];  for (int i=0; i < array.length; i++) {    classes[i]=array[i] == null ? null : array[i].getClass();  }  return classes;}  }
class C{  public Boolean isTargetHeaderDigestSettable(){  return targetHeaderDigestSettable;}  }
class C{  public static <T>Permutations<T> create(T[] in,T[] out){  return new Permutations<T>(in,out,in.length);}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public LaggedFactor(String factor,int lag){  if (factor == null) {    throw new NullPointerException("Factor name must not be null");  }  if (lag < 0) {    throw new IllegalArgumentException("Lag must be >= 0");  }  this.factor=factor;  this.lag=lag;}  }
class C{  public Plane(int firstAxis,int secondAxis){  super();  this.firstAxis=firstAxis;  this.secondAxis=secondAxis;  theta=Double.NaN;}  }
class C{  public void testSetF7Momentary(){  boolean f7Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF7Momentary(f7Momentary);}  }
class C{  @Override public void paintComponent(Graphics g){  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);  Dimension size=getSize();  Insets insets=getInsets();  double ww=size.getWidth() - insets.left - insets.right;  double hh=size.getHeight() - insets.top - insets.bottom;  g2.setStroke(new BasicStroke(1.0f));  double y1=insets.top;  double y2=y1 + hh;  double xx=insets.left;  Line2D line=new Line2D.Double();  int count=0;  while (xx <= insets.left + ww) {    count++;    line.setLine(xx,y1,xx,y2);    g2.setPaint(this.palette.getColor(count));    g2.draw(line);    xx+=1;  }}  }
class C{  public void checkCondition(Environment env,Context ctx,Vset vset,Hashtable exp,ConditionVars cvars){  right.checkCondition(env,ctx,vset,exp,cvars);  type=right.type;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPreference[");  sb.append(get_ID()).append("-").append(getAttribute()).append("-").append(getValue()).append("]");  return sb.toString();}  }
class C{  public ImageOptions(){}  }
class C{  public MekaDialog(){  this((Frame)null);}  }
class C{  public T take(Object key){  return map(key).take(key);}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  Shape s0=modelToView(p0,a,b0);  Shape s1;  if (p1 == getEndOffset()) {    try {      s1=modelToView(p1,a,b1);    } catch (    BadLocationException ble) {      s1=null;    }    if (s1 == null) {      Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();      s1=new Rectangle(alloc.x + alloc.width - 1,alloc.y,1,alloc.height);    }  } else {    s1=modelToView(p1,a,b1);  }  Rectangle r0=s0.getBounds();  Rectangle r1=(s1 instanceof Rectangle) ? (Rectangle)s1 : s1.getBounds();  if (r0.y != r1.y) {    Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();    r0.x=alloc.x;    r0.width=alloc.width;  }  r0.add(r1);  if (p1 > p0)   r0.width-=r1.width;  return r0;}  }
class C{  @SuppressWarnings("ConstantConditions") public static ExternalResources initialize(@NonNull Context context,Url url){  if (null == context) {    throw new IllegalArgumentException("Context must not be null.");  }  if (null == url) {    throw new IllegalArgumentException("Path must not be null.");  }synchronized (ExternalResources.class) {    if (null != singleton) {      throw new IllegalStateException("Singleton instance already exists.");    }    singleton=new Builder(context,url).build();  }  return singleton;}  }
class C{  public Builder withTokenizer(String name,Map<String,String> params) throws IOException {  Objects.requireNonNull(name,"Tokenizer name may not be null");  tokenizer.set(applyResourceLoader(TokenizerFactory.forName(name,applyDefaultParams(params))));  componentsAdded=true;  return this;}  }
class C{  public static CommonTransitions createSlide(int type,boolean forward,int duration){  return createSlide(type,forward,duration,false);}  }
class C{  public Location toLocation(){  return LocationUtils.buildLocation(latitude,longitude);}  }
class C{  public double distanceSq(final Double2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void end(){  Texture tex=(Texture)tile();  Image image=canvas.image;  if (tex != null && tex.pixelWidth == image.pixelWidth() && tex.pixelHeight == image.pixelHeight())   tex.update(image); else   super.setTile(canvas.image.createTexture(Texture.Config.DEFAULT));}  }
class C{  private void updateSchema(final IBindingSet bset){  @SuppressWarnings("rawtypes") final Iterator<IVariable> vitr=bset.vars();  while (vitr.hasNext()) {    schema.add(vitr.next());  }}  }
class C{  public static void sort(byte[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public static BlockSnapshot validateSnapshot(URI snapshotURI,UriInfo uriInfo,DbClient dbClient){  ArgValidator.checkUri(snapshotURI);  BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,snapshotURI);  ArgValidator.checkEntity(snapshot,snapshotURI,BlockServiceUtils.isIdEmbeddedInURL(snapshotURI,uriInfo),true);  return snapshot;}  }
class C{  @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 120 + 12,"Cancel"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 72 + 12,"Connect"));  buttonList.add(new GuiButton(2,width / 2 - 100,height / 4 + 96 + 12,"Reset"));  proxyBox=new GuiTextField(0,fontRendererObj,width / 2 - 100,60,200,20);  proxyBox.setFocused(true);  WurstClient.INSTANCE.analytics.trackPageView("/multiplayer/use-proxy","Use Proxy");}  }
class C{  public FastAdapterBottomSheetDialog<Item> move(int fromPosition,int toPosition){  mFastItemAdapter.move(fromPosition,toPosition);  return this;}  }
class C{  private void readPending(IsolationLevel level) throws RepositoryException {  clear(store);  RepositoryConnection con=store.getConnection();  try {    con.begin(level);    con.add(RDF.NIL,RDF.TYPE,RDF.LIST);    assertEquals(1,count(con,RDF.NIL,RDF.TYPE,RDF.LIST,false));    con.remove(RDF.NIL,RDF.TYPE,RDF.LIST);    con.commit();  }  finally {    con.close();  }}  }
class C{  public boolean commitTransactionStage2(ReadWriteThreadManager rwtm) throws IOException {  InputStream rfIn=new BufferedInputStream(new FileInputStream(getRollForwardFile(false)));  readRollForwardHeader(rfIn);  byte[] recordData=new byte[recordSize];  byte[] idBytes=new byte[4];  for (; ; ) {    if (database.isCancelOpen)     return false;    if (!readFullyForRollForward(rfIn,idBytes,true))     break;    int id=Util.byteArrayToInt(idBytes,0);    if (id > committedNextRowId)     throw new IllegalStateException("rollforward log attempted to write to a row not in committed set," + " row id requested: " + id + ", this: "+ this);    readFullyForRollForward(rfIn,recordData,false);synchronized (this) {      rwRaf.seek(recordSize * id + HEADER_SIZE);      rwRaf.write(recordData);    }    if (rwtm != null && rwtm.isReadingThreadsActive())     rwtm.pauseForReadingThreads();  }  rfIn.close();synchronized (this) {    if (committedNextRowId != (int)((rwRaf.length() - HEADER_SIZE) / recordSize)) {      committedNextRowId=(int)((rwRaf.length() - HEADER_SIZE) / recordSize);      rwRaf.seek(NEXT_ROW_ID_POS);      rwRaf.writeInt(committedNextRowId);    }  }  rwRaf.getFD().sync();  return true;}  }
class C{  public boolean isMaxYSet(){  return isMaxYSet(0);}  }
class C{  public void selectionChanged(IAction action,ISelection selection){}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix1D other){  if (other instanceof SelectedSparseDoubleMatrix1D) {    SelectedSparseDoubleMatrix1D otherMatrix=(SelectedSparseDoubleMatrix1D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseDoubleMatrix1D) {    SparseDoubleMatrix1D otherMatrix=(SparseDoubleMatrix1D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  ClientResponse post(URI resourceURI,String postData,String jsonFormat){  ClientResponse response=_client.post(resourceURI,postData,_vplexSessionId,jsonFormat);  updateVPLEXSessionId(response);  return response;}  }
class C{  public synchronized boolean available(){  return (Counter.availablePermits() > 0);}  }
class C{  public void add(int theOpCode,int theOperand){  if (DEBUGCODE) {    System.out.println("Add " + bytecodeStr(theOpCode) + ", "+ Integer.toHexString(theOperand));  }  int newStack=itsStackTop + stackChange(theOpCode);  if (newStack < 0 || Short.MAX_VALUE < newStack)   badStack(newStack);switch (theOpCode) {case ByteCode.GOTO:    addSuperBlockStart(itsCodeBufferTop + 3);case ByteCode.IFEQ:case ByteCode.IFNE:case ByteCode.IFLT:case ByteCode.IFGE:case ByteCode.IFGT:case ByteCode.IFLE:case ByteCode.IF_ICMPEQ:case ByteCode.IF_ICMPNE:case ByteCode.IF_ICMPLT:case ByteCode.IF_ICMPGE:case ByteCode.IF_ICMPGT:case ByteCode.IF_ICMPLE:case ByteCode.IF_ACMPEQ:case ByteCode.IF_ACMPNE:case ByteCode.JSR:case ByteCode.IFNULL:case ByteCode.IFNONNULL:{    if ((theOperand & 0x80000000) != 0x80000000) {      if ((theOperand < 0) || (theOperand > 65535))       throw new IllegalArgumentException("Bad label for branch");    }    int branchPC=itsCodeBufferTop;    addToCodeBuffer(theOpCode);    if ((theOperand & 0x80000000) != 0x80000000) {      addToCodeInt16(theOperand);      int target=theOperand + branchPC;      addSuperBlockStart(target);      itsJumpFroms.put(target,branchPC);    } else {      int targetPC=getLabelPC(theOperand);      if (DEBUGLABELS) {        int theLabel=theOperand & 0x7FFFFFFF;        System.out.println("Fixing branch to " + theLabel + " at "+ targetPC+ " from "+ branchPC);      }      if (targetPC != -1) {        int offset=targetPC - branchPC;        addToCodeInt16(offset);        addSuperBlockStart(targetPC);        itsJumpFroms.put(targetPC,branchPC);      } else {        addLabelFixup(theOperand,branchPC + 1);        addToCodeInt16(0);      }    }  }break;case ByteCode.BIPUSH:if ((byte)theOperand != theOperand) throw new IllegalArgumentException("out of range byte");addToCodeBuffer(theOpCode);addToCodeBuffer((byte)theOperand);break;case ByteCode.SIPUSH:if ((short)theOperand != theOperand) throw new IllegalArgumentException("out of range short");addToCodeBuffer(theOpCode);addToCodeInt16(theOperand);break;case ByteCode.NEWARRAY:if (!(0 <= theOperand && theOperand < 256)) throw new IllegalArgumentException("out of range index");addToCodeBuffer(theOpCode);addToCodeBuffer(theOperand);break;case ByteCode.GETFIELD:case ByteCode.PUTFIELD:if (!(0 <= theOperand && theOperand < 65536)) throw new IllegalArgumentException("out of range field");addToCodeBuffer(theOpCode);addToCodeInt16(theOperand);break;case ByteCode.LDC:case ByteCode.LDC_W:case ByteCode.LDC2_W:if (!(0 <= theOperand && theOperand < 65536)) throw new IllegalArgumentException("out of range index");if (theOperand >= 256 || theOpCode == ByteCode.LDC_W || theOpCode == ByteCode.LDC2_W) {if (theOpCode == ByteCode.LDC) {addToCodeBuffer(ByteCode.LDC_W);} else {addToCodeBuffer(theOpCode);}addToCodeInt16(theOperand);} else {addToCodeBuffer(theOpCode);addToCodeBuffer(theOperand);}break;case ByteCode.RET:case ByteCode.ILOAD:case ByteCode.LLOAD:case ByteCode.FLOAD:case ByteCode.DLOAD:case ByteCode.ALOAD:case ByteCode.ISTORE:case ByteCode.LSTORE:case ByteCode.FSTORE:case ByteCode.DSTORE:case ByteCode.ASTORE:if (!(0 <= theOperand && theOperand < 65536)) throw new ClassFileFormatException("out of range variable");if (theOperand >= 256) {addToCodeBuffer(ByteCode.WIDE);addToCodeBuffer(theOpCode);addToCodeInt16(theOperand);} else {addToCodeBuffer(theOpCode);addToCodeBuffer(theOperand);}break;default :throw new IllegalArgumentException("Unexpected opcode for 1 operand");}itsStackTop=(short)newStack;if (newStack > itsMaxStack) itsMaxStack=(short)newStack;if (DEBUGSTACK) {System.out.println("After " + bytecodeStr(theOpCode) + " stack = "+ itsStackTop);}}  }
class C{  public static short unsignedByteToShort(byte b){  if ((b & 0x80) == 0x80)   return (short)(128 + (b & 0x7f));  return b;}  }
class C{  public void automaticHeightMap(){  int sy=sections.length - 1;  for (; sy >= 0; --sy) {    if (sections[sy] != null) {      break;    }  }  int y=(sy + 1) * 16;  for (int x=0; x < WIDTH; ++x) {    for (int z=0; z < HEIGHT; ++z) {      heightMap[z * WIDTH + x]=(byte)lowerHeightMap(x,y,z);    }  }}  }
class C{  void reconnect(){  traceDebug(TAG,"Reconnect to server, client size=" + connections.size());  for (  MqttConnection client : connections.values()) {    traceDebug("Reconnect Client:",client.getClientId() + '/' + client.getServerURI());    if (this.isOnline()) {      client.reconnect();    }  }}  }
class C{  public RVMType resolve() throws NoClassDefFoundError, IllegalArgumentException {synchronized (classloader) {    return resolveInternal();  }}  }
class C{  public DPolicyQualifierInfoChooser(JFrame parent,String title,PolicyQualifierInfo policyQualifierInfo) throws IOException {  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(policyQualifierInfo);}  }
class C{  private void synchronizeDebugger(final IDebugger oldDebugger,final IDebugger newDebugger){  if (oldDebugger != null) {    oldDebugger.getProcessManager().removeListener(m_processListener);    m_debugPerspectiveModel.getTraceLogger(oldDebugger).removeListener(m_traceListener);    synchronizeThread(oldDebugger.getProcessManager().getActiveThread(),null);  }  if (newDebugger != null) {    newDebugger.getProcessManager().addListener(m_processListener);    m_debugPerspectiveModel.getTraceLogger(newDebugger).addListener(m_traceListener);    final TargetInformation targetInformation=newDebugger.getProcessManager().getTargetInformation();    if (targetInformation != null) {      updateFromDebuggerOptions(targetInformation.getDebuggerOptions());    }    synchronizeThread(null,newDebugger.getProcessManager().getActiveThread());  }  m_toolBar.updateGui();}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:11.217 -0500",hash_original_method="46994FD8CFA49DCC9FB18F8A8634FC48",hash_generated_method="82446CDD6D1A4F793B9B6E366FCF0162") static public Font createFromFile(RenderScript rs,Resources res,String path,float pointSize){  rs.validate();  int dpi=res.getDisplayMetrics().densityDpi;  int fontId=rs.nFontCreateFromFile(path,pointSize,dpi);  if (fontId == 0) {    throw new RSRuntimeException("Unable to create font from file " + path);  }  Font rsFont=new Font(fontId,rs);  return rsFont;}  }
class C{  public long msecsTo(ElapsedTimer other){  return MILLISECONDS.convert(_startTimeNanos - other._startTimeNanos,NANOSECONDS);}  }
class C{  public void removeEventListener2(IImageSharingListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mBroadcaster.removeEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public File show(){  File result=null;  int returnVal=myFileChooser.showOpenDialog(null);  if (returnVal == JFileChooser.APPROVE_OPTION) {    result=myFileChooser.getSelectedFile();  }  return result;}  }
class C{  public static void encodeTimestamp(byte[] array,int pointer,double timestamp){  for (int i=0; i < 8; i++) {    double base=Math.pow(2,(3 - i) * 8);    array[pointer + i]=(byte)(timestamp / base);    timestamp=timestamp - (double)(unsignedByteToShort(array[pointer + i]) * base);  }  array[7]=(byte)(Math.random() * 255.0);}  }
class C{  @SuppressWarnings("unchecked") public Iterator<AbstractPage> postOrderIterator(){  return new Striterator(postOrderIterator2()).append(new SingleValueIterator(this));}  }
class C{  public void testResourcesAvailable(){  new HindiAnalyzer().close();}  }
class C{  public List<Modifier> newModifiers(int flags){  if (this.apiLevel == AST.JLS2) {    unsupportedIn2();  }  List<Modifier> result=new ArrayList<Modifier>(3);  if (Modifier.isPublic(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));  }  if (Modifier.isProtected(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.PROTECTED_KEYWORD));  }  if (Modifier.isPrivate(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD));  }  if (Modifier.isAbstract(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD));  }  if (Modifier.isStatic(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));  }  if (Modifier.isFinal(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.FINAL_KEYWORD));  }  if (Modifier.isSynchronized(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD));  }  if (Modifier.isNative(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.NATIVE_KEYWORD));  }  if (Modifier.isStrictfp(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.STRICTFP_KEYWORD));  }  if (Modifier.isTransient(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.TRANSIENT_KEYWORD));  }  if (Modifier.isVolatile(flags)) {    result.add(newModifier(Modifier.ModifierKeyword.VOLATILE_KEYWORD));  }  return result;}  }
class C{  public static void writePaddedInteger(Writer out,int value,int size) throws IOException {  if (value < 0) {    out.write('-');    if (value != Integer.MIN_VALUE) {      value=-value;    } else {      for (; size > 10; size--) {        out.write('0');      }      out.write("" + -(long)Integer.MIN_VALUE);      return;    }  }  if (value < 10) {    for (; size > 1; size--) {      out.write('0');    }    out.write(value + '0');  } else   if (value < 100) {    for (; size > 2; size--) {      out.write('0');    }    int d=((value + 1) * 13421772) >> 27;    out.write(d + '0');    out.write(value - (d << 3) - (d << 1) + '0');  } else {    int digits;    if (value < 1000) {      digits=3;    } else     if (value < 10000) {      digits=4;    } else {      digits=(int)(Math.log(value) / LOG_10) + 1;    }    for (; size > digits; size--) {      out.write('0');    }    out.write(Integer.toString(value));  }}  }
class C{  public ObjectFactory(){}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.368 -0500",hash_original_method="1D26914F95E4E8CAB857832B14C412F2",hash_generated_method="1D26914F95E4E8CAB857832B14C412F2") void onHangupLocal(){  cause=DisconnectCause.LOCAL;}  }
class C{  public void clear(){  infoQueue.clear();  allocator.release(dataQueue.toArray(new Allocation[dataQueue.size()]));  dataQueue.clear();  totalBytesDropped=0;  totalBytesWritten=0;  lastAllocation=null;  lastAllocationOffset=allocationLength;}  }
class C{  public void release(){  mBluetoothAdapter=null;  if (mReceiver != null) {    mContext.unregisterReceiver(mReceiver);  }}  }
class C{  public DocumentosTabla(){}  }
class C{  public static int toaFromString(String s){  if (s != null && s.length() > 0 && s.charAt(0) == '+') {    return TOA_International;  }  return TOA_Unknown;}  }
class C{  public static CiClass extractCiClass(File file) throws FileNotFoundException, IllegalArgumentException {  if (!FileExtractor.isPHPFile(file)) {    throw new IllegalArgumentException(String.format("%s is not a .php file\n",file.getAbsolutePath()));  }  CiClass retval=null;  URL docLink=null;  String className=null;  TokenSequence<PHPTokenId> tokenSeq=getTokensFromFile(file);  if (tokenSeq != null) {    boolean done=false;    while (!done && tokenSeq.moveNext()) {      Token token=tokenSeq.token();      if (token.id().equals(PHPTokenId.PHPDOC_COMMENT)) {        String docComment=token.text().toString();        String[] arr=docComment.split("\\s+");        for (        String s : arr) {          if (s.startsWith(ciDocBase)) {            try {              s=s.replaceFirst("/user_guide/","/userguide3/");              s=s.replaceFirst("http://","http://www.");              docLink=new URL(s);            } catch (            MalformedURLException mue) {              mue.printStackTrace(System.err);            }            done=(className != null);            break;          }        }      } else       if (token.id().equals(PHPTokenId.PHP_CLASS)) {        while (tokenSeq.moveNext()) {          if (tokenSeq.token().id().equals(PHPTokenId.PHP_STRING)) {            className=tokenSeq.token().text().toString();            done=(docLink != null);            break;          }        }      }    }    if (className == null) {      int index=file.getName().lastIndexOf(".");      className=file.getName().substring(0,index);    }    retval=new CiClass(className,docLink);  }  return retval;}  }
class C{  public static ConstantNode forIntegerBits(int bits,long value){  return forIntegerBits(bits,JavaConstant.forPrimitiveInt(bits,value));}  }
class C{  public void createLog(final IRootBlockView rootBlock) throws FileNotFoundException, IOException {  if (rootBlock == null)   throw new IllegalArgumentException();  if (m_rootBlock != null)   throw new IllegalStateException();  if (haLog.isInfoEnabled())   haLog.info("rootBlock=" + rootBlock,new StackInfoReport());  m_rootBlock=rootBlock;  m_nextSequence=0L;  final long commitCounter=rootBlock.getCommitCounter();  final File log=getHALogFileName(m_haLogDir,commitCounter + 1);  if (log.exists() && !log.delete()) {    throw new IOException("Could not delete: " + log);  }  final File parentDir=log.getParentFile();  if (!parentDir.exists())   if (!parentDir.mkdirs())   throw new IOException("Could not create directory: " + parentDir);  final Lock lock=m_stateLock.writeLock();  lock.lock();  try {    m_state=new FileState(log,rootBlock.getStoreType());    m_state.m_raf.seek(0);    m_state.m_raf.writeInt(MAGIC);    m_state.m_raf.writeInt(VERSION1);    writeRootBlock(true,rootBlock);    writeRootBlock(false,rootBlock);  }  finally {    lock.unlock();  }}  }
class C{  public final Sequence extend(TypedOperation operation,Variable... inputs){  return extend(operation,Arrays.asList(inputs));}  }
class C{  public Map<Long,Collection<ClusterNode>> topologyHistory(){  return topHist;}  }
class C{  public boolean isDeviceTV(Context context){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    UiModeManager uiManager=(UiModeManager)context.getSystemService(Context.UI_MODE_SERVICE);    return uiManager != null && uiManager.getCurrentModeType() == Configuration.UI_MODE_TYPE_TELEVISION;  }  return false;}  }
class C{  public void appendOpenCodeTag(){  text.append("<code>");}  }
class C{  public RotationVectorProvider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR));}  }
class C{  protected void sendFunctionGroup2(){  byte[] result=jmri.NmraPacket.function5Through8Packet(address.getNumber(),address.isLongAddress(),getF5(),getF6(),getF7(),getF8());  EasyDccMessage m=new EasyDccMessage(4 + 3 * result.length);  int i=0;  m.setElement(i++,'S');  m.setElement(i++,' ');  m.setElement(i++,'0');  m.setElement(i++,'1');  for (int j=0; j < result.length; j++) {    m.setElement(i++,' ');    m.addIntAsTwoHex(result[j] & 0xFF,i);    i=i + 2;  }  tc.sendEasyDccMessage(m,null);}  }
class C{  public int size(){  return elements.size();}  }
class C{  public HashedMap(){  super(DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_THRESHOLD);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 174) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public CIMArgument[] addElement(CIMArgument[] args,CIMArgument element){  List<CIMArgument> argsList=new ArrayList<CIMArgument>(Arrays.asList(args));  argsList.add(element);  CIMArgument[] argsNew={};  return argsList.toArray(argsNew);}  }
class C{  public TestNanoSparqlServerWithProxyIndexManager(){  this(null,getTemporaryJournal(BufferMode.DiskRW),TestMode.triples);}  }
class C{  public static Marker convertMarker(Element e,Value v,BridgeContext ctx){  if (v.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {    return null;  } else {    String uri=v.getStringValue();    Element markerElement=ctx.getReferencedElement(e,uri);    Bridge bridge=ctx.getBridge(markerElement);    if (bridge == null || !(bridge instanceof MarkerBridge)) {      throw new BridgeException(ctx,e,ERR_CSS_URI_BAD_TARGET,new Object[]{uri});    }    return ((MarkerBridge)bridge).createMarker(ctx,markerElement,e);  }}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  public GradientFormatter(float maxScore,String minForegroundColor,String maxForegroundColor,String minBackgroundColor,String maxBackgroundColor){  highlightForeground=(minForegroundColor != null) && (maxForegroundColor != null);  if (highlightForeground) {    if (minForegroundColor.length() != 7) {      throw new IllegalArgumentException("minForegroundColor is not 7 bytes long eg a hex " + "RGB value such as #FFFFFF");    }    if (maxForegroundColor.length() != 7) {      throw new IllegalArgumentException("minForegroundColor is not 7 bytes long eg a hex " + "RGB value such as #FFFFFF");    }    fgRMin=hexToInt(minForegroundColor.substring(1,3));    fgGMin=hexToInt(minForegroundColor.substring(3,5));    fgBMin=hexToInt(minForegroundColor.substring(5,7));    fgRMax=hexToInt(maxForegroundColor.substring(1,3));    fgGMax=hexToInt(maxForegroundColor.substring(3,5));    fgBMax=hexToInt(maxForegroundColor.substring(5,7));  }  highlightBackground=(minBackgroundColor != null) && (maxBackgroundColor != null);  if (highlightBackground) {    if (minBackgroundColor.length() != 7) {      throw new IllegalArgumentException("minBackgroundColor is not 7 bytes long eg a hex " + "RGB value such as #FFFFFF");    }    if (maxBackgroundColor.length() != 7) {      throw new IllegalArgumentException("minBackgroundColor is not 7 bytes long eg a hex " + "RGB value such as #FFFFFF");    }    bgRMin=hexToInt(minBackgroundColor.substring(1,3));    bgGMin=hexToInt(minBackgroundColor.substring(3,5));    bgBMin=hexToInt(minBackgroundColor.substring(5,7));    bgRMax=hexToInt(maxBackgroundColor.substring(1,3));    bgGMax=hexToInt(maxBackgroundColor.substring(3,5));    bgBMax=hexToInt(maxBackgroundColor.substring(5,7));  }  this.maxScore=maxScore;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public OrderInfo order(String serviceId,MultivaluedMap<String,String> parameters) throws ValidationException {  return doOrder(client.uriBuilder(SERVICE_URL).build(serviceId),parameters);}  }
class C{  private QueryBuilderKraken parseInsert(){  Token token;  if ((token=scanToken()) != Token.INTO) {    throw error("expected INTO at '{0}'",token);  }  TableKraken table=parseTable();  Objects.requireNonNull(table);  TableKelp tableKelp=table.getTableKelp();  ArrayList<Column> columns=new ArrayList<>();  boolean isKeyHash=false;  if ((token=scanToken()) == Token.LPAREN) {    do {      String columnName=parseIdentifier();      Column column=tableKelp.getColumn(columnName);      if (column == null) {        throw error("'{0}' is not a valid column in {1}",columnName,table.getName());      }      columns.add(column);    } while ((token=scanToken()) == Token.COMMA);    if (token != Token.RPAREN) {      throw error("expected ')' at '{0}'",token);    }    token=scanToken();  } else {    for (    Column column : tableKelp.getColumns()) {      if (column.name().startsWith(":")) {        continue;      }      columns.add(column);    }  }  if (token != Token.VALUES)   throw error("expected VALUES at '{0}'",token);  if ((token=scanToken()) != Token.LPAREN) {    throw error("expected '(' at '{0}'",token);  }  ArrayList<ExprKraken> values=new ArrayList<>();  InsertQueryBuilder query;  query=new InsertQueryBuilder(this,_sql,table,columns);  _query=query;  do {    ExprKraken expr=parseExpr();    values.add(expr);  } while ((token=scanToken()) == Token.COMMA);  if (token != Token.RPAREN) {    throw error("expected ')' at '{0}'",token);  }  if (columns.size() != values.size()) {    throw error("number of columns does not match number of values");  }  ParamExpr[] params=_params.toArray(new ParamExpr[_params.size()]);  query.setParams(params);  query.setValues(values);  return query;}  }
class C{  public static boolean isLigature(char c){  int charVal=c;  if ((charVal < 0xFE70) || (charVal > 0xFEFC))   return false;  if ((charVal <= 0xFE72) || (charVal == 0xFE74) || (charVal >= 0xFE76 && charVal <= 0xFE7F)|| (charVal >= 0xFEF5)) {    return true;  }  return false;}  }
class C{  public URIName(DerValue derValue) throws IOException {  this(derValue.getIA5String());}  }
class C{  public static boolean equals(Block block,int meta,ItemStack stack){  if (stack == null)   return false;  return block == getBlock(stack) && meta == stack.getItemDamage();}  }
class C{  public boolean isScreenBright(){  return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,mScreenBright);}  }
class C{  @Override public void removeRule(int ruleid){  Iterator<ACLRule> iter=this.ruleSet.iterator();  while (iter.hasNext()) {    ACLRule rule=iter.next();    if (rule.getId() == ruleid) {      iter.remove();      break;    }  }  logger.info("No.{} ACL rule removed.",ruleid);  enforceRemovedRule(ruleid);}  }
class C{  public void dispose(){  for (  final Entry<ColorPanel,IColorPanelListener> entry : m_listenerMap.entrySet()) {    entry.getKey().removeListener(entry.getValue());  }}  }
class C{  Parsed toUnresolved(){  return currentParsed();}  }
class C{  public void oneTimeDriverInit(DriverThread dt){  if (verbose)   System.out.println(dt.getName() + ": oneTimeDriverInit() called");}  }
class C{  public static void registerEntity(String serviceName,EntityDefinition entityDef){  final String table=entityDef.getTable();  if (entityServiceMap.containsKey(serviceName)) {    final EntityDefinition existing=entityServiceMap.get(serviceName);    if (entityDef.getClass().equals(existing.getClass())) {      return;    }    throw new IllegalArgumentException("Service " + serviceName + " has already been registered by "+ existing.getClass().getName()+ ", so class "+ entityDef.getClass()+ " can NOT be registered");  }synchronized (EntityDefinitionManager.class) {    checkPrefix(entityDef);    entityServiceMap.put(serviceName,entityDef);    Map<Integer,EntityDefinition> entityHashMap=entityPrefixMap.get(table);    if (entityHashMap == null) {      entityHashMap=new ConcurrentHashMap<Integer,EntityDefinition>();      entityPrefixMap.put(table,entityHashMap);    }    entityHashMap.put(entityDef.getPrefix().hashCode(),entityDef);    final IndexDefinition[] indexes=entityDef.getIndexes();    if (indexes != null) {      for (      IndexDefinition index : indexes) {        Map<Integer,IndexDefinition> indexHashMap=indexPrefixMap.get(table);        if (indexHashMap == null) {          indexHashMap=new ConcurrentHashMap<Integer,IndexDefinition>();          indexPrefixMap.put(table,indexHashMap);        }        indexHashMap.put(index.getIndexPrefix().hashCode(),index);      }    }    classMap.put(entityDef.getEntityClass(),entityDef);  }  if (LOG.isDebugEnabled()) {    LOG.debug(entityDef.getEntityClass().getSimpleName() + " entity registered successfully, table name: " + entityDef.getTable()+ ", prefix: "+ entityDef.getPrefix()+ ", service: "+ serviceName+ ", CF: "+ entityDef.getColumnFamily());  } else {    LOG.info(String.format("Registered %s (%s)",entityDef.getEntityClass().getSimpleName(),serviceName));  }}  }
class C{  private void parse(final String osmFilename,final InputStream stream) throws UncheckedIOException {  if (this.hierarchyLayers.isEmpty()) {    log.warn("No hierarchy layer specified. Will convert every highway specified by setHighwayDefaults.");  }  OsmXmlParser parser=null;  if (this.slowButLowMemory) {    log.info("parsing osm file first time: identifying nodes used by ways");    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    parser.enableOptimization(1);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("parsing osm file second time: loading required nodes and ways");    parser.enableOptimization(2);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("done loading data");  } else {    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }  }  convert();  log.info("= conversion statistics: ==========================");  log.info("osm: # nodes read:       " + parser.nodeCounter.getCounter());  log.info("osm: # ways read:        " + parser.wayCounter.getCounter());  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  log.info("BikeObjectAttributs for cyclewaytype created: " + countCyclewaytype + " which is "+ ((float)countCyclewaytype / this.network.getLinks().size()) * 100 + "%");  log.info("BikeObjectAttributs for surface created:      " + countSurface + " which is "+ ((float)countSurface / this.network.getLinks().size()) * 100 + "%");  log.info("BikeObjectAttributs for smoothness created:   " + countSmoothness + " which is "+ ((float)countSmoothness / this.network.getLinks().size()) * 100 + "%");  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  public StringArraySequence(String[] stringArray){  this.stringArray=stringArray;}  }
class C{  @AfterClass public static void afterClass() throws IOException, InterruptedException {  HELPER.stop();}  }
class C{  private <R>GridClientFutureAdapter<R> makeRequest(GridClientMessage msg,TcpClientFuture<R> fut) throws GridClientConnectionResetException, GridClientClosedException {  return makeRequest(msg,fut,false);}  }
class C{  static byte[] readFile(InputStream in,long expectedSize) throws IOException {  if (expectedSize > Integer.MAX_VALUE) {    throw new OutOfMemoryError("file is too large to fit in a byte array: " + expectedSize + " bytes");  }  return expectedSize == 0 ? ByteStreams.toByteArray(in) : ByteStreams.toByteArray(in,(int)expectedSize);}  }
class C{  public CloudDebugProcessHandler(CloudDebugProcess process){  this.process=process;  if (process != null && process.getProcessState() != null) {    String userEmail=process.getProcessState().getUserEmail();    if (userEmail != null) {      final CredentialedUser user=Services.getLoginService().getAllUsers().get(userEmail);      if (user.getGoogleLoginState() != null) {        user.getGoogleLoginState().addLoginListener(new LogoutDebugProcessDetacher<CloudDebugProcessHandler>(this));      } else {        LOG.error("GoogleLoginState is null. To launch a debug session user needs to be logged in");      }    } else {      LOG.error("userEmail is null. To launch a debug session user needs to be logged in");    }  } else {    LOG.error("process or process state is null. This should only happen in tests");  }}  }
class C{  public static List<org.oscm.internal.vo.VOOrganization> convertToUpVOOrganization(List<org.oscm.vo.VOOrganization> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOOrganization> newVO=new ArrayList<org.oscm.internal.vo.VOOrganization>();  for (  org.oscm.vo.VOOrganization tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public void open(String remoteAddr,int remotePort) throws NetworkException, PayloadException {  try {    mSocket=new Socket(remoteAddr,remotePort);  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Failed to open socket for address : ").append(remoteAddr).append(" and port : ").append(remotePort).toString(),e);  }}  }
class C{  public boolean offer(E e){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.offer(e);    if (q.peek() == e) {      leader=null;      available.signal();    }    return true;  }  finally {    lock.unlock();  }}  }
class C{  public LALR1CPItem shift(){  if (stripped.position >= stripped.getProduction().getRHS().size())   throw new RuntimeException("Shifting not possible: Item already closed: " + stripped.production.toString(stripped.position));  return new LALR1CPItem(new LR0Item(stripped.production,stripped.position + 1),lookaheads);}  }
class C{  public void onAppReady(){  Log.d(TAG,"App Ready");  if (config().getAutoJoinType() == AutoJoinType.AFTER_INIT) {    joinGroups();  }}  }
class C{  public String nextToken(String delim){  delimiters=delim;  delimsChanged=true;  setMaxDelimChar();  return nextToken();}  }
class C{  @SuppressWarnings("unchecked") private void notifyBatchClustererListeners(BatchClustererEvent ce){  Vector<BatchClustererListener> l;synchronized (this) {    l=(Vector<BatchClustererListener>)m_batchClustererListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptClusterer(ce);    }  }}  }
class C{  public void minlon(double parsed){  minlon=parsed;}  }
class C{  private static List<String> buildTestCommand(File testFile,String modelLocation,String outputPredictions) throws IOException {  List<String> result=new ArrayList<>();  result.add(resolveSVMHmmClassifyCommand());  result.add(testFile.getAbsolutePath());  result.add(modelLocation);  result.add(outputPredictions);  return result;}  }
class C{  private static byte[] encode(byte[] source,int off,int len,byte[] alphabet){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / Integer.MAX_VALUE)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == Integer.MAX_VALUE) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == Integer.MAX_VALUE) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public synchronized void addZoomListener(ZoomListener listener){  mZoomListeners.add(listener);}  }
class C{  private float calcRank(DecompoundedWord aSplit){  float result=0;  for (  Fragment elem : aSplit.getSplits()) {    result+=-1 * Math.log(freq(elem).doubleValue() / getFinder().getUnigramCount().doubleValue());  }  return result;}  }
class C{  public static boolean isWebappProject(IProject proj){  return !"".equals(detectDefaultWebappdir(proj));}  }
class C{  public Note insertNote(Note note,User user) throws UnauthorizedException {  if (user == null) {    throw new UnauthorizedException("missing user");  }  EntityManager mgr=getEntityManager();  try {    note.setEmailAddress(user.getEmail());    mgr.persist(note);  }  finally {    mgr.close();  }  DevicePing.pingAllDevices(user.getEmail(),note.getId(),"insert");  return note;}  }
class C{  private void addSpiDependency(GridTestNode node) throws Exception {  node.addAttribute(U.spiAttribute(getSpi(),ATTR_SPI_CLASS),JobStealingFailoverSpi.class.getName());}  }
class C{  public TCacheStatistics(String id){  this.setId(id);}  }
class C{  protected XYMultipleSeriesDataset buildBarDataset(String[] titles,List<double[]> values){  XYMultipleSeriesDataset dataset=new XYMultipleSeriesDataset();  int length=titles.length;  for (int i=0; i < length; i++) {    CategorySeries series=new CategorySeries(titles[i]);    double[] v=values.get(i);    int seriesLength=v.length;    for (int k=0; k < seriesLength; k++) {      series.add(v[k]);    }    dataset.addSeries(series.toXYSeries());  }  return dataset;}  }
class C{  private static boolean isExactMatch(Token token,String str,int startIndex,boolean doLowerCase){  if ((startIndex < 0) || (startIndex + token.chunk.length) > str.length()) {    return false;  }  for (int ti=0, si=startIndex; ti < token.chunk.length; ++ti, ++si) {    char tch=token.chunk[ti];    char sch=str.charAt(si);    if (doLowerCase) {      sch=Character.toLowerCase(sch);    }    if ((tch != sch) && !token.wildIndex.get(ti)) {      return false;    }  }  return true;}  }
class C{  public void stopTimers(){  AppUI appUI=AppUI.getCurrent();  if (timers != null) {    for (    Timer timer : timers) {      timer.stop();      WebTimer webTimer=(WebTimer)timer;      appUI.removeTimer(webTimer.getTimerImpl());    }    timers.clear();  }}  }
class C{  public static void writeln(Offset o){  writeln(o,true);}  }
class C{  public static boolean isXML11Space(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);}  }
class C{  public static void init(){  try {    initializeEnvironment();  } catch (  Throwable e) {    log().log(Level.FINER,e.toString(),e);  }  try {    init(Thread.currentThread().getContextClassLoader());  } catch (  Throwable e) {    log().log(Level.FINER,e.toString(),e);  }}  }
class C{  public ListProperty(List<T> values){  if (values == null) {    throw new NullPointerException(Messages.INSTANCE.getExceptionMessage(18));  }  this.values=values;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:39.885 -0500",hash_original_method="AB3B67AC2C613250AEA5BEF5DC292179",hash_generated_method="F36B2CA49B0AE46BFBBD8786458F5BC5") public void save(OutputStream stream) throws IOException {  save(stream,false);}  }
class C{  void handleCancel(){  if (DEBUG)   Log.d(TAG,"handleCancel()");  KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(false);  mKeyguardScreenCallback.showBackupSecurity();  stop();  mKeyguardScreenCallback.userActivity(BACKUP_LOCK_TIMEOUT);}  }
class C{  private static Analytics initializeAnalytics() throws Exception {  Credential credential=authorize();  return new Analytics.Builder(HTTP_TRANSPORT,JSON_FACTORY,credential).setApplicationName(APPLICATION_NAME).build();}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public static String debugWildCards(int wildcards){  String str="";  if ((wildcards & OFPFW_IN_PORT) != 0)   str+="|" + STR_IN_PORT;  if ((wildcards & OFPFW_DL_DST) != 0)   str+="|" + STR_DL_DST;  if ((wildcards & OFPFW_DL_SRC) != 0)   str+="|" + STR_DL_SRC;  if ((wildcards & OFPFW_DL_TYPE) != 0)   str+="|" + STR_DL_TYPE;  if ((wildcards & OFPFW_DL_VLAN) != 0)   str+="|" + STR_DL_VLAN;  if ((wildcards & OFPFW_DL_VLAN_PCP) != 0)   str+="|" + STR_DL_VLAN_PCP;  int nwDstMask=Math.max(32 - ((wildcards & OFPFW_NW_DST_MASK) >> OFPFW_NW_DST_SHIFT),0);  int nwSrcMask=Math.max(32 - ((wildcards & OFPFW_NW_SRC_MASK) >> OFPFW_NW_SRC_SHIFT),0);  if (nwDstMask < 32)   str+="|" + STR_NW_DST + "(/"+ nwDstMask+ ")";  if (nwSrcMask < 32)   str+="|" + STR_NW_SRC + "(/"+ nwSrcMask+ ")";  if ((wildcards & OFPFW_NW_PROTO) != 0)   str+="|" + STR_NW_PROTO;  if ((wildcards & OFPFW_NW_TOS) != 0)   str+="|" + STR_NW_TOS;  if ((wildcards & OFPFW_TP_DST) != 0)   str+="|" + STR_TP_DST;  if ((wildcards & OFPFW_TP_SRC) != 0)   str+="|" + STR_TP_SRC;  if ((str.length() > 0) && (str.charAt(0) == '|'))   str=str.substring(1);  return str;}  }
class C{  public synchronized void abort(){  if (!isComplete) {    xmlReader.abort();    isComplete=true;  }}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(url);  if (headers != null)   delete.setHeaders(headers);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public void upgradeStatus(BatchStatus status){  this.status=this.status.upgradeTo(status);}  }
class C{  public String qualifiedPortName(){  if (getPortName().startsWith(getPortGroup())) {    return getPortName();  } else {    return getPortGroup() + ":" + getPortName();  }}  }
class C{  public static void cleanupAttachmentsForCall(UUID callId){  File dir=getAttachmentsDirectoryForCall(callId,false);  if (dir != null) {    Utility.deleteDirectory(dir);  }}  }
class C{  private long checkZone(String MGRSString){  int i=0;  int j=0;  int num_digits=0;  long error_code=MGRS_NO_ERROR;  while (i < MGRSString.length() && MGRSString.charAt(i) == ' ') {    i++;  }  j=i;  while (i < MGRSString.length() && Character.isDigit(MGRSString.charAt(i))) {    i++;  }  num_digits=i - j;  if (num_digits > 2)   error_code|=MGRS_STRING_ERROR; else   if (num_digits <= 0)   error_code|=MGRS_NOZONE_WARNING;  return error_code;}  }
class C{  public int indexOf(final char ch){  return indexOf(ch,0);}  }
class C{  public MbfsPatternRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  public void testAddressMappings(){  int i=10000000;  while (--i > 0) {    final int sector=r.nextInt(32 * 1024);    final int bit=r.nextInt(32 * 1024);    final int rwaddr=SectorAllocator.makeAddr(sector,bit);    final int rsector=SectorAllocator.getSectorIndex(rwaddr);    final int rbit=SectorAllocator.getSectorOffset(rwaddr);    assertTrue("Address Error " + i + " , sector: "+ sector+ " != "+ rsector+ " or "+ bit+ " != "+ rbit,(sector == rsector) && (bit == rbit));  }}  }
class C{  void unexecuteNSDecls(TransformerImpl transformer,String ignorePrefix) throws TransformerException {  try {    if (null != m_prefixTable) {      SerializationHandler rhandler=transformer.getResultTreeHandler();      int n=m_prefixTable.size();      for (int i=0; i < n; i++) {        XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);        if (!decl.getIsExcluded() && !(null != ignorePrefix && decl.getPrefix().equals(ignorePrefix))) {          rhandler.endPrefixMapping(decl.getPrefix());        }      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public static File resourceToFile(final String resource,final File file) throws IOException {  try (InputStream stream=Resources.getResourceAsStream(resource)){    return FileHelper.streamToFile(stream,file);  } }  }
class C{  public static Scale toScale(String s){  return map.get(s);}  }
class C{  public boolean isUrlSafe(){  return this.encodeTable == URL_SAFE_ENCODE_TABLE;}  }
class C{  @Override protected void imageImpl(PImage src,float x1,float y1,float x2,float y2,int u1,int v1,int u2,int v2){  if (src.bitmap != null && src.bitmap.isRecycled()) {    src.bitmap=null;  }  if (src.bitmap == null && src.format == ALPHA) {    src.bitmap=Bitmap.createBitmap(src.width,src.height,Config.ARGB_8888);    int[] px=new int[src.pixels.length];    for (int i=0; i < px.length; i++) {      px[i]=src.pixels[i] << 24 | 0xFFFFFF;    }    src.bitmap.setPixels(px,0,src.width,0,0,src.width,src.height);    src.modified=false;  }  if (src.bitmap == null || src.width != src.bitmap.getWidth() || src.height != src.bitmap.getHeight()) {    if (src.bitmap != null)     src.bitmap.recycle();    src.bitmap=Bitmap.createBitmap(src.width,src.height,Config.ARGB_8888);    src.modified=true;  }  if (src.modified) {    if (!src.bitmap.isMutable()) {      src.bitmap.recycle();      src.bitmap=Bitmap.createBitmap(src.width,src.height,Config.ARGB_8888);    }    if (src.pixels != null) {      src.bitmap.setPixels(src.pixels,0,src.width,0,0,src.width,src.height);    }    src.modified=false;  }  if (imageImplSrcRect == null) {    imageImplSrcRect=new Rect(u1,v1,u2,v2);    imageImplDstRect=new RectF(x1,y1,x2,y2);  } else {    imageImplSrcRect.set(u1,v1,u2,v2);    imageImplDstRect.set(x1,y1,x2,y2);  }  canvas.drawBitmap(src.bitmap,imageImplSrcRect,imageImplDstRect,tint ? tintPaint : null);  MemoryInfo mi=new MemoryInfo();  ActivityManager activityManager=(ActivityManager)parent.getApplicationContext().getSystemService(android.content.Context.ACTIVITY_SERVICE);  activityManager.getMemoryInfo(mi);  if (mi.lowMemory) {    src.bitmap.recycle();    src.bitmap=null;  }}  }
class C{  public void addStatement(AstNode statement){  assertNotNull(statement);  if (statements == null) {    statements=new ArrayList<AstNode>();  }  int end=statement.getPosition() + statement.getLength();  this.setLength(end - this.getPosition());  statements.add(statement);  statement.setParent(this);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF:    return basicSetTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static List<Integer> createColors(int[] colors){  List<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(i);  }  return result;}  }
class C{  private void generateCodePath(String scopeName,ConditionalBlock block,List<Fingerprint.Payload> payloads){  if (payloads.isEmpty()) {    return;  }  Fingerprint.Payload payload=payloads.remove(0);  if (hasAlwaysBlock(payload)) {    generateAlwaysBlock(payload,block,payload.getAlways());  }  List<Object> operationList=payload.getOperation();  List<Object> nextOperations=new ArrayList<>();  while (!operationList.isEmpty()) {    operationList.forEach(null);    operationList.clear();    operationList.addAll(nextOperations);    nextOperations.clear();  }}  }
class C{  public FireworkMetaBuilder start(final FireworkMeta meta){  return new FireworkMetaBuilder(meta);}  }
class C{  public void findAndInit(Object obj){  super.findAndInit(obj);  if (obj instanceof MouseDelegator) {    ((MouseDelegator)obj).addPropertyChangeListener(this);  }  for (  Layer layer : getLayers()) {    layer.findAndInit(obj);  }}  }
class C{  @POST @javax.ws.rs.Path("/update-dependencies-wait-build-end") @Produces(MediaType.APPLICATION_JSON) public void waitUpdateDependencyBuildEnd(@QueryParam("projectpath") String projectPath,BuildTaskDescriptor descriptor,@Context UriInfo uriInfo) throws Exception {  try {    BuildTaskDescriptor finishedBuildStatus=waitTaskFinish(descriptor);    if (finishedBuildStatus.getStatus() == BuildStatus.FAILED) {      buildFailed(finishedBuildStatus);    }    javaProjectService.removeProject(wsId,projectPath);    File projectDepDir=new File(temp,wsId + projectPath);    projectDepDir.mkdirs();    Link downloadLink=findLink("download result",finishedBuildStatus.getLinks());    if (downloadLink != null) {      File zip=doDownload(downloadLink.getHref(),projectPath,"dependencies.zip");      ZipUtils.unzip(new DeleteOnCloseFileInputStream(zip),projectDepDir);    }    BuildOptions buildOptions=DtoFactory.getInstance().createDto(BuildOptions.class);    buildOptions.getOptions().put("-Dclassifier","sources");    String url=apiUrl + "/builder/" + wsId+ "/dependencies";    BuildTaskDescriptor dependencies=getDependencies(url,projectPath,"copy",buildOptions);    BuildTaskDescriptor buildTaskDescriptor=waitTaskFinish(dependencies);    if (finishedBuildStatus.getStatus() == BuildStatus.FAILED) {      buildFailed(finishedBuildStatus);    }    File projectSourcesJars=new File(projectDepDir,"sources");    projectSourcesJars.mkdirs();    downloadLink=findLink("download result",buildTaskDescriptor.getLinks());    if (downloadLink != null) {      File zip=doDownload(downloadLink.getHref(),projectPath,"sources.zip");      ZipUtils.unzip(new DeleteOnCloseFileInputStream(zip),projectSourcesJars);    }    javaProjectService.getOrCreateJavaProject(wsId,projectPath);  } catch (  Throwable debug) {    LOG.warn("RestNameEnvironment",debug);    throw new WebApplicationException(debug);  }}  }
class C{  public void add(BollingerBandsItem dataItem,boolean notify){  if (!this.isEmpty()) {    BollingerBandsItem item0=(BollingerBandsItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  public void onConfiguration(ContactsOps.View view,boolean firstTimeIn){  super.onConfiguration(view,firstTimeIn);  if (firstTimeIn) {    initializeCommands();    unregisterContentObserver();  } else   queryContacts();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void installApp(String url){  AppUpdater updator=new AppUpdater();  updator.setContext(context);  updator.execute(url);}  }
class C{  public void createDataServicesConfiguration(String clusterName) throws ConfigurationException {  String dataServicesConfigFileName=getModulePropertiesFileName(ConfigurationConstants.TR_SERVICES_PROPS,getClusterHome());  File dataServicesConfigFile=new File(dataServicesConfigFileName);  TungstenProperties configProps=new TungstenProperties();  if (dataServicesConfigFile.exists()) {    logger.debug(String.format("DataServices configuration already exists at '%s'",dataServicesConfigFileName));    InputStream is=null;    try {      is=new FileInputStream(dataServicesConfigFile);      configProps.load(is);    } catch (    FileNotFoundException e) {      throw new ConfigurationException(e.getLocalizedMessage());    }catch (    IOException e) {      throw new ConfigurationException("Error while loading " + dataServicesConfigFileName + ": "+ e.getLocalizedMessage());    } finally {      if (is != null) {        try {          is.close();        } catch (        Exception ignored) {        }      }    }  }  if (configProps.getString(clusterName) == null || configProps.getString(clusterName).isEmpty()) {    configProps.setString(clusterName,"localhost:" + RouterGatewayConstants.DEFAULT_GATEWAY_PORT);  }  logger.info("Writing out data services configuration to '" + dataServicesConfigFileName + "'");  logger.info("dataservices.properties contains:" + configProps);  OutputStream os=null;  try {    os=new FileOutputStream(dataServicesConfigFile);    configProps.store(os);  } catch (  IOException i) {    throw new ConfigurationException("Error while storing properties:" + i);  }}  }
class C{  public RESULT process(){  RESULT result=null;  do {    QueryBundle<QUERY_TYPE,META_QUERY,QUEUE_CONTEXT> queryBundle=queryQueueManager.dequeue();    if (queryBundle == null) {      return null;    }    result=queryExecutor.executeQuery(queryBundle.getQuery(),queryBundle.getMetaQuery(),queryBundle.getQueueContext());  } while (result == null);  return result;}  }
class C{  protected void nextDownElement(){  int editingColumn=getActiveColumn();  int editingRow=getActiveRow();  int nextRow=editingRow + 1;  if (editingRow == -1) {    return;  }  if (editingColumn == -1) {    editingColumn=0;  }  if (nextRow > impl.getRowCount() - 1) {    nextRow=0;  }  moveToStart(nextRow,editingColumn);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Command(String command,int id){  this.command=command;  this.commandId=id;}  }
class C{  public final CC sizeGroupX(String s){  hor.setSizeGroup(s);  return this;}  }
class C{  protected void discoverOnAllPorts(){  if (log.isTraceEnabled()) {    log.trace("Sending LLDP packets out of all the enabled ports");  }  for (  long sw : floodlightProvider.getAllSwitchDpids()) {    IOFSwitch iofSwitch=floodlightProvider.getSwitch(sw);    if (iofSwitch == null)     continue;    if (iofSwitch.getEnabledPorts() != null) {      for (      ImmutablePort ofp : iofSwitch.getEnabledPorts()) {        if (isLinkDiscoverySuppressed(sw,ofp.getPortNumber()))         continue;        if (autoPortFastFeature && iofSwitch.isFastPort(ofp.getPortNumber()))         continue;        sendDiscoveryMessage(sw,ofp.getPortNumber(),true,false);        NodePortTuple npt=new NodePortTuple(sw,ofp.getPortNumber());        addToMaintenanceQueue(npt);      }    }  }}  }
class C{  public static byte[] serializeJdk(Object obj) throws IOException {  ByteArrayOutputStream byteOut=null;  ObjectOutputStream objOut=null;  try {    byteOut=new ByteArrayOutputStream(512);    objOut=new ObjectOutputStream(byteOut);    objOut.writeObject(obj);    objOut.flush();    return byteOut.toByteArray();  }  finally {    close(objOut);    close(byteOut);  }}  }
class C{  public static float[][] calc(float[] xpoints,float[] ypoints,boolean geometryClosed,int steps){  if (geometryClosed) {    return new NatCubicSpline.CLOSED().withSteps(steps).calc(xpoints,ypoints);  }  return new NatCubicSpline().withSteps(steps).calc(xpoints,ypoints);}  }
class C{  public Vector3d cross(double x,double y,double z){  return set(this.y * z - this.z * y,this.z * x - this.x * z,this.x * y - this.y * x);}  }
class C{  public static List<Dashboard> findDashboardsByOwner(EntityManager em,PrincipalUser user){  TypedQuery<Dashboard> query=em.createNamedQuery("Dashboard.getDashboardsOwnedBy",Dashboard.class);  try {    query.setParameter("owner",user);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  public Gobble(Reader reader){  this(null,null,reader);}  }
class C{  public boolean needSave(){  return needSave(m_rowChanged,false);}  }
class C{  private void updateOne(long currentSerial) throws IndexOutOfBoundsException, IllegalArgumentException {  int type=getCARD8();  ++idx;  int nameLen=getCARD16();  int nameIdx=idx;  idx=(idx + nameLen + 3) & ~0x3;  long lastChanged=getCARD32();  if (lastChanged <= currentSerial) {    if (type == TYPE_INTEGER) {      idx+=4;    } else     if (type == TYPE_STRING) {      int len=getINT32();      idx=(idx + len + 3) & ~0x3;    } else     if (type == TYPE_COLOR) {      idx+=8;    } else {      throw new IllegalArgumentException("Unknown type: " + type);    }    return;  }  idx=nameIdx;  String name=getString(nameLen);  idx+=4;  Object value=null;  if (type == TYPE_INTEGER) {    value=Integer.valueOf(getINT32());  } else   if (type == TYPE_STRING) {    value=getString(getINT32());  } else   if (type == TYPE_COLOR) {    int r=getCARD16();    int g=getCARD16();    int b=getCARD16();    int a=getCARD16();    value=new Color(r / 65535.0f,g / 65535.0f,b / 65535.0f,a / 65535.0f);  } else {    throw new IllegalArgumentException("Unknown type: " + type);  }  if (name == null) {    return;  }  updatedSettings.put(name,value);}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,String productId,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,String parentProductId,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return makeItem(cartLocation,productId,selectedAmount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,cart,triggerExternalOpsBool,triggerPriceRulesBool,parentProductId,skipInventoryChecks,skipProductChecks);}  }
class C{  public static String lcfirst(String input){  return withFirst(input,null);}  }
class C{  public void removeUpdaterListener(final WorkspaceUpdaterListener listener){  updaterListeners.remove(listener);}  }
class C{  private String state(){  return "mirrorApp: " + getApp().completeState() + "\nmavenGroup: "+ def.group+ "\ngoomph:"+ GOOMPH_VERSION+ "\nrepo2runnable:"+ def.repo2runnable;}  }
class C{  public static String loadString(File file){  if (null == file || !file.exists()) {    return "";  }  FileInputStream fis=null;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  try {    fis=new FileInputStream(file);    int restSize=fis.available();    int bufSize=restSize > BUF_SIZE ? BUF_SIZE : restSize;    byte[] buf=new byte[bufSize];    while (fis.read(buf) != -1) {      baos.write(buf);      restSize-=bufSize;      if (restSize <= 0) {        break;      }      if (restSize < bufSize) {        bufSize=restSize;      }      buf=new byte[bufSize];    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  SecurityException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  return baos.toString();}  }
class C{  private void removeLastTimestampValidationData(){  final Element toRemove=xadesSignature.getLastTimestampValidationData();  if (toRemove != null) {    unsignedSignaturePropertiesDom.removeChild(toRemove);  }}  }
class C{  public final short readShort() throws java.io.IOException {  return 0;}  }
class C{  public static String formatDate(Context context,Calendar date,FileTimeDisplay fileTimeDisplay){  final Calendar _yesterday=Calendar.getInstance();  _yesterday.add(Calendar.DAY_OF_YEAR,-1);  String res;  if (android.text.format.DateUtils.isToday(date.getTimeInMillis())) {    res=android.text.format.DateUtils.formatDateTime(context,date.getTimeInMillis(),_FormatShortTime);  } else   if (date.get(Calendar.YEAR) == _yesterday.get(Calendar.YEAR) && date.get(Calendar.DAY_OF_YEAR) == _yesterday.get(Calendar.DAY_OF_YEAR)) {    res=String.format("%s, %s",context.getString(R.string.afc_yesterday),android.text.format.DateUtils.formatDateTime(context,date.getTimeInMillis(),_FormatShortTime));  } else   if (date.get(Calendar.YEAR) == _yesterday.get(Calendar.YEAR)) {    if (fileTimeDisplay.isShowTimeForOldDaysThisYear())     res=android.text.format.DateUtils.formatDateTime(context,date.getTimeInMillis(),_FormatShortTime | _FormatMonthAndDay); else     res=android.text.format.DateUtils.formatDateTime(context,date.getTimeInMillis(),_FormatMonthAndDay);  } else {    if (fileTimeDisplay.isShowTimeForOldDays())     res=android.text.format.DateUtils.formatDateTime(context,date.getTimeInMillis(),_FormatShortTime | _FormatMonthAndDay | _FormatYear); else     res=android.text.format.DateUtils.formatDateTime(context,date.getTimeInMillis(),_FormatMonthAndDay | _FormatYear);  }  return res;}  }
class C{  private String generateExecutionData(String data){  return "global.$executionData = " + data + ";";}  }
class C{  public CSearchOutputPanel(final JHexView hexView){  super(new BorderLayout());  m_hexView=hexView;  m_table=new JTable(new CSearchResultModel());  m_table.getSelectionModel().addListSelectionListener(new InternalSelectionListener());  add(new JScrollPane(m_table));}  }
class C{  public void addDependency(MultiVariable master,MultiVariable slave){  MultiVariableGuess guess=getMultiVariableGuess();  if (guess == null) {    guess=new MultiVariableGuess();    setMultiVariableGuess(guess);  }  guess.addDependency(master,slave);}  }
class C{  void outputDocTypeDecl(String name,boolean closeDecl) throws SAXException {  if (m_cdataTagOpen)   closeCDATA();  try {    final java.io.Writer writer=m_writer;    writer.write("<!DOCTYPE ");    writer.write(name);    String doctypePublic=getDoctypePublic();    if (null != doctypePublic) {      writer.write(" PUBLIC \"");      writer.write(doctypePublic);      writer.write('\"');    }    String doctypeSystem=getDoctypeSystem();    if (null != doctypeSystem) {      if (null == doctypePublic)       writer.write(" SYSTEM \""); else       writer.write(" \"");      writer.write(doctypeSystem);      if (closeDecl) {        writer.write("\">");        writer.write(m_lineSep,0,m_lineSepLen);        closeDecl=false;      } else       writer.write('\"');    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public static boolean isHotSpotVM(){  return isJVM(JAVA_HOTSPOT_JVM_NAME);}  }
class C{  public TestSetEvent(Object source,Instances testSet,int setNum,int maxSetNum){  this(source,testSet);  m_setNumber=setNum;  m_maxSetNumber=maxSetNum;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.059 -0400",hash_original_method="50E37064F43FB111250793273CC27B2F",hash_generated_method="5EDB523FEB7611F8337B49DDF83B9BF4") @Override public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  public static UpgradeSubscriptionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UpgradeSubscriptionResponse object=new UpgradeSubscriptionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"upgradeSubscriptionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (UpgradeSubscriptionResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  NormalBURS(IR ir){  super(ir);}  }
class C{  public SimpleResourceAccess(ResourceSet resourceSet){  this.resourceSet=resourceSet;}  }
class C{  @Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){  this.actionMode=mode;  return false;}  }
class C{  public static String encodeBase64String(byte[] binaryData){  return org.apache.commons.codec.binary.Base64.encodeBase64String(binaryData);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void testNodeProcessing(){  SumKeyVal<String,Double> oper=new SumKeyVal<String,Double>();  oper.setType(Double.class);  CollectorTestSink sumSink=new CollectorTestSink();  oper.sum.setSink(sumSink);  oper.beginWindow(0);  oper.data.process(new KeyValPair("a",2.0));  oper.data.process(new KeyValPair("b",20.0));  oper.data.process(new KeyValPair("c",1000.0));  oper.data.process(new KeyValPair("a",1.0));  oper.data.process(new KeyValPair("a",10.0));  oper.data.process(new KeyValPair("b",5.0));  oper.data.process(new KeyValPair("d",55.0));  oper.data.process(new KeyValPair("b",12.0));  oper.data.process(new KeyValPair("d",22.0));  oper.data.process(new KeyValPair("d",14.2));  oper.data.process(new KeyValPair("d",46.0));  oper.data.process(new KeyValPair("e",2.0));  oper.data.process(new KeyValPair("a",23.0));  oper.data.process(new KeyValPair("d",4.0));  oper.endWindow();  Assert.assertEquals("number emitted tuples",5,sumSink.collectedTuples.size());  for (  Object o : sumSink.collectedTuples) {    KeyValPair<String,Double> e=(KeyValPair<String,Double>)o;    Double val=(Double)e.getValue();    if (e.getKey().equals("a")) {      Assert.assertEquals("emitted value for 'a' was ",new Double(36),val);    } else     if (e.getKey().equals("b")) {      Assert.assertEquals("emitted tuple for 'b' was ",new Double(37),val);    } else     if (e.getKey().equals("c")) {      Assert.assertEquals("emitted tuple for 'c' was ",new Double(1000),val);    } else     if (e.getKey().equals("d")) {      Assert.assertEquals("emitted tuple for 'd' was ",new Double(141.2),val);    } else     if (e.getKey().equals("e")) {      Assert.assertEquals("emitted tuple for 'e' was ",new Double(2),val);    }  }}  }
class C{  @Override public boolean updatesAreDetected(int type){  debugCodeCall("updatesAreDetected",type);  return false;}  }
class C{  @Deprecated public Scenario loadScenario(){  String currentDir=new File("tmp").getAbsolutePath();  currentDir=currentDir.substring(0,currentDir.length() - 3);  log.info("loading scenario from base directory: " + currentDir);  this.loadNetwork();  this.loadActivityFacilities();  this.loadPopulation();  if (this.config.households().getInputFile() != null) {    this.loadHouseholds();  }  if (this.config.transit().isUseTransit()) {    this.loadTransit();  }  if (this.config.vehicles().getVehiclesFile() != null) {    this.loadVehicles();  }  if (this.config.network().getLaneDefinitionsFile() != null) {    this.loadLanes();  }  return this.scenario;}  }
class C{  void check(Scope scope){  int bogusCount=0;  for (Scope.Entry se=scope.elems; se != null; se=se.sibling) {    Symbol sym=se.sym;    if (sym.owner != se.scope.owner) {      if (bogus.contains(sym)) {        bogusCount++;      } else {        log("Warning: " + sym.name + ":"+ sym+ " appears to be bogus");        bogus.add(sym);      }    } else {      Set<Symbol> syms=map.get(sym.name);      if (syms == null) {        error("check: no entries found for " + sym.name + ":"+ sym+ " in reference map");      } else       if (!syms.contains(sym)) {        error("check: symbol " + sym.name + ":"+ sym+ " not found in reference map");      }    }  }  if (bogusCount > 0) {    log("Warning: " + bogusCount + " other bogus entries previously reported");  }  for (  Map.Entry<Name,Set<Symbol>> me : map.entrySet()) {    Name name=me.getKey();    Scope.Entry se=scope.lookup(name);    assert (se != null);    if (se.sym == null) {      error("check: no entries found for " + name + " in scope");      continue;    }    nextSym:     for (    Symbol sym : me.getValue()) {      for (Scope.Entry e=se; e.sym != null; e=e.next()) {        if (sym == e.sym)         continue nextSym;      }      error("check: symbol " + sym + " not found in scope");    }  }}  }
class C{  public static void devicePermissionDelete(Context context,String accessToken,String identifier,int permissionId,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  delete(context,String.format(getApiServerUrl() + DEVICE_PERMISSION_DELETE,identifier,permissionId),headerList,null,responseHandler);}  }
class C{  public void close() throws SQLException {  close(true);}  }
class C{  public SpecificInsteonLight(String systemName,SerialTrafficController tc,String userName){  super(systemName,tc,userName);  this.tc=tc;}  }
class C{  public static int computeMessageSizeNoTag(final MessageNano value){  final int size=value.getSerializedSize();  return computeRawVarint32Size(size) + size;}  }
class C{  public boolean restoreState(Object savedState){  if (savedState instanceof SavedState) {    if (((SavedState)savedState).restoreState(this)) {      iSavedState=savedState;      return true;    }  }  return false;}  }
class C{  @Override public void startDocument(){  this.objects.clear();  this.handler=null;}  }
class C{  public void test_GET_accessPath_delete_p_o_Literal() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long result=countResults(doGetWithAccessPath(null,RDFS.LABEL,new LiteralImpl("Bryan")));  assertEquals(1,result);}  }
class C{  public DataNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void limitOutput(List<Employee> employees){  Stream<String> employeesNamesStream=employees.stream().map(null).limit(3);  employeesNamesStream.forEach(null);}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(HistogramType.FREQUENCY)) {    return HistogramType.FREQUENCY;  } else   if (this.equals(HistogramType.RELATIVE_FREQUENCY)) {    return HistogramType.RELATIVE_FREQUENCY;  } else   if (this.equals(HistogramType.SCALE_AREA_TO_1)) {    return HistogramType.SCALE_AREA_TO_1;  }  return null;}  }
class C{  public WhereBuilder or(WhereBuilder where){  String condition=whereItems.size() == 0 ? " " : "OR ";  return expr(condition + "(" + where.toString()+ ")");}  }
class C{  private void doRestoreSession(){  initializeGameGrid();  if (board.restoreSession(gameGrid)) {    redrawTilesInGameGrid();  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  return errors;}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  if (state.getUtilityNodes().size() == 1) {    UtilityNode urnode=state.getUtilityNodes().stream().findFirst().get();    if (urnode.getFunction() instanceof AnchoredRule) {      AnchoredRule arule=(AnchoredRule)urnode.getFunction();      if (arule.getInputRange().linearise().size() == 1 && arule.getParameters().isEmpty()) {        system.getModule(ForwardPlanner.class).trigger(state,updatedVars);        return;      }    }  }  try {    for (    ActionNode action : state.getActionNodes()) {      displayWizardBox(action);    }    state.addToState(Assignment.createDefault(state.getActionNodeIds()).removePrimes());    state.removeNodes(state.getActionNodeIds());    state.removeNodes(state.getUtilityNodeIds());  } catch (  RuntimeException e) {    log.warning("could not apply wizard control: " + e);  }}  }
class C{  @Override public String toString(){  int max=0;  for (int i=0; i < confusion.length; i++) {    for (int j=0; j < confusion[i].length; j++) {      if (confusion[i][j] > max) {        max=confusion[i][j];      }    }  }  String classPrefix="C_";  NumberFormat nf=NumberFormat.getInstance();  nf.setParseIntegerOnly(true);  int labelLength=Integer.toString(labels.size()).length();  nf.setMaximumIntegerDigits(labelLength);  nf.setMinimumIntegerDigits(labelLength);  int cell=Math.max(Integer.toString(max).length(),labelLength + classPrefix.length());  String separator=" ";  StringBuilder representation=new StringBuilder();  for (int i=1; i <= labels.size(); i++) {    representation.append(separator);    String label=classPrefix + nf.format(i);    int space=cell - labelLength - classPrefix.length();    for (int s=0; s <= space; s++) {      representation.append(' ');    }    representation.append(label);  }  representation.append('\n');  for (int row=0; row < confusion.length; row++) {    for (int col=0; col < confusion[row].length; col++) {      representation.append(separator);      String entry=Integer.toString(confusion[row][col]);      int space=cell - entry.length();      for (int s=0; s <= space; s++) {        representation.append(' ');      }      representation.append(entry);    }    representation.append(separator);    representation.append(classPrefix);    representation.append(nf.format(row + 1));    representation.append(": ");    representation.append(labels.get(row));    representation.append('\n');  }  return representation.toString();}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  int toSend=length;  int sent;  long start=System.currentTimeMillis();  while (toSend > 0) {synchronized (pseudoTcp) {      sent=pseudoTcp.send(buffer,offset + length - toSend,toSend);    }    if (sent > 0) {      toSend-=sent;    } else {      try {        logger.log(Level.FINER,"Write wait for notify");synchronized (write_notify) {          if (writeTimeout > 0) {            long elapsed=System.currentTimeMillis() - start;            long left=writeTimeout - elapsed;            if (left <= 0) {              IOException exc=new IOException("Write operation timeout");              pseudoTcp.closedown(exc);              throw exc;            }            write_notify.wait(left);          } else {            write_notify.wait();          }        }        logger.log(Level.FINER,"Write notified, available: " + pseudoTcp.getAvailableSendBuffer());        if (exception != null) {          throw exception;        }      } catch (      InterruptedException ex) {        if (exception != null) {          throw new IOException("Write aborted",exception);        } else {          throw new IOException("Write aborted",ex);        }      }    }  }}  }
class C{  public static void prepareHotStart(Scenario scenario){  M4UControlerConfigModuleV3 module=ConfigurationUtils.getMATSim4UrbaSimControlerConfigModule(scenario);  UrbanSimParameterConfigModuleV3 uspModule=M4UConfigUtils.getUrbanSimParameterConfigAndPossiblyConvert(scenario.getConfig());  String hotStartFile=module.getHotStartPlansFileLocation().trim();  if (exists(hotStartFile)) {    String plansFile=uspModule.getMATSim4OpusOutput() + InternalConstants.GENERATED_PLANS_FILE_NAME;    try {      log.info("Preparing hot start for next MATSim run ...");      FileCopy.fileCopy(new File(plansFile),new File(hotStartFile));    } catch (    Exception e) {      log.error("Error while copying plans file, i. e. hot start will not work!");      e.printStackTrace();    }    log.info("Hot start preparation successful!");  } else {    log.info("can not prepare hotStart. hotstart-file does not exist: " + hotStartFile);  }}  }
class C{  public void output(OutputStream out){  try {    out.write(versionDecl.getBytes());  } catch (  Exception e) {  }  for (int i=0; i < prolog.size(); i++) {    ConcreteElement e=(ConcreteElement)prolog.elementAt(i);    e.output(out);  }  if (content != null)   content.output(out);}  }
class C{  public static IntStream dropWhile(IntStream stream,IntPredicate predicate){  Objects.requireNonNull(stream);  Objects.requireNonNull(predicate);  return StreamSupport.intStream(new WhileOps.UnorderedWhileSpliterator.OfInt.Dropping(stream.spliterator(),true,predicate),stream.isParallel()).onClose(null);}  }
class C{  protected void _addClassMixIns(AnnotationMap annotations,Class<?> toMask){  if (_mixInResolver != null) {    _addClassMixIns(annotations,toMask,_mixInResolver.findMixInClassFor(toMask));  }}  }
class C{  private void updateRegisterField(){  if (m_clearRegisterCheckbox.isSelected()) {    m_clearRegisterField.setEditable(false);    m_clearRegisterField.setText("Enter a list of whitespace-separated registers here");    m_clearRegisterField.setBackground(Color.LIGHT_GRAY);  } else {    m_clearRegisterField.setEditable(true);    m_clearRegisterField.setText("");    m_clearRegisterField.setBackground(Color.WHITE);  }}  }
class C{  public DiasporaPod fromJson(JSONObject json) throws JSONException {  JSONArray jarr;  if (json.has("name")) {    name=json.getString("name");  }  if (json.has("mainLangs")) {    jarr=json.getJSONArray("mainLangs");    for (int i=0; i < jarr.length(); i++) {      String val=jarr.getString(i);      if (!mainLangs.contains(val)) {        mainLangs.add(val);      }    }  }  if (json.has("podUrls")) {    jarr=json.getJSONArray("podUrls");    for (int i=0; i < jarr.length(); i++) {      DiasporaPodUrl podUrl=new DiasporaPodUrl().fromJson(jarr.getJSONObject(i));      if (!podUrls.contains(podUrl)) {        podUrls.add(podUrl);      }    }  }  if (json.has("score")) {    score=json.getInt("score");  }  if (json.has("active6")) {    active6=json.getLong("active6");  }  if (json.has("id")) {    id=json.getInt("id");  }  return this;}  }
class C{  private View fillSpecific(int position,int top){  View temp=makeAndAddView(position,top,true,false);  mFirstPosition=position;  final int dividerHeight=mDividerHeight;  if (!mStackFromBottom) {    fillUp(position - 1,getFillChildTop());    adjustViewsUpOrDown();    fillDown(position + 1,getFillChildBottom() + mDividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooHigh(childCount);    }  } else {    fillDown(position + 1,temp.getBottom() + dividerHeight);    adjustViewsUpOrDown();    fillUp(position - 1,getFillChildTop());    int childCount=getChildCount();    if (childCount > 0) {      correctTooLow(childCount);    }  }  return null;}  }
class C{  public InterfaceInvokeExpr newInterfaceInvokeExpr(Local base,SootMethodRef method,List args){  return new JInterfaceInvokeExpr(base,method,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.915 -0400",hash_original_method="AA99CD590672754F26A4EEAA3056CABB",hash_generated_method="A8E8F097898534372BDC255832D74B58") public XmlStreamWriter(File file,String defaultEncoding) throws FileNotFoundException {  this(new FileOutputStream(file),defaultEncoding);}  }
class C{  public RepositoriesImpl(){  _list=new ArrayList();}  }
class C{  @HLEFunction(nid=0x07F58C24,version=150,checkInsideInterrupt=true) public int __sceSasGetAllEnvelopeHeights(int sasCore,TPointer32 heightsAddr){  checkSasHandleGood(sasCore);  IMemoryWriter memoryWriter=MemoryWriter.getMemoryWriter(heightsAddr.getAddress(),voices.length * 4,4);  for (int i=0; i < voices.length; i++) {    int voiceHeight=voices[i].getEnvelope().height;    memoryWriter.writeNext(voiceHeight);    if (log.isTraceEnabled() && voiceHeight != 0) {      log.trace(String.format("__sceSasGetAllEnvelopeHeights height voice #%d=0x%08X",i,voiceHeight));    }  }  memoryWriter.flush();  return 0;}  }
class C{  public <R>MapStream<K,R> mapValue(BiFunction<? super K,? super V,? extends R> mapper){  return new MapStream<>(inner.map(null));}  }
class C{  @Override public String toPMML(Instances train){  return LogisticProducerHelper.toPMML(train,m_structure,m_Par,m_NumClasses);}  }
class C{  private ArrayList<String> parseJson(String text){  text=text.substring(text.indexOf("\\nEvents\\n") + SIZE_OF_EVENTS,text.indexOf("\\n\\n\\nBirths"));  ArrayList<String> events=new ArrayList<String>();  if (text.isEmpty()) {    return events;  }  int startIndex=0, endIndex=0;  while (endIndex != -1) {    endIndex=text.indexOf("\\n",startIndex + DELIMITER_SIZE);    String eventText=(endIndex == -1 ? text.substring(startIndex) : text.substring(startIndex,endIndex));    Pattern pattern=Pattern.compile("\\\\u2013\\s*");    Matcher matcher=pattern.matcher(eventText);    eventText=matcher.replaceAll("");    pattern=Pattern.compile("(^\\d+)");    matcher=pattern.matcher(eventText);    if (matcher.find()) {      eventText=matcher.replaceFirst(matcher.group(1) + ",");    }    eventText="In " + eventText;    startIndex=endIndex + 2;    events.add(eventText);  }  Collections.reverse(events);  return events;}  }
class C{  public static boolean replanFutureTrip(Trip trip,Plan plan,String mainMode,double departureTime,Network network,TripRouter tripRouter){  Person person=plan.getPerson();  Activity fromActivity=trip.getOriginActivity();  Activity toActivity=trip.getDestinationActivity();  Link fromLink=network.getLinks().get(fromActivity.getLinkId());  Link toLink=network.getLinks().get(toActivity.getLinkId());  Facility<ActivityFacility> fromFacility=new LinkWrapperFacility(fromLink);  Facility<ActivityFacility> toFacility=new LinkWrapperFacility(toLink);  final List<? extends PlanElement> newTrip=tripRouter.calcRoute(mainMode,fromFacility,toFacility,departureTime,person);  TripRouter.insertTrip(plan,trip.getOriginActivity(),newTrip,trip.getDestinationActivity());  return true;}  }
class C{  public void addFeature(String layerName,Map<String,?> attributes,Geometry geometry){  if (geometry instanceof MultiPolygon || geometry.getClass().equals(GeometryCollection.class)) {    splitAndAddFeatures(layerName,attributes,(GeometryCollection)geometry);    return;  }  if (this.smallGeometryThreshold > 0) {    if (geometry instanceof Polygon && geometry.getArea() < this.smallGeometryThreshold) {      return;    }    if (geometry instanceof LineString && geometry.getLength() < this.smallGeometryThreshold) {      return;    }  }  if (geometry instanceof Point) {    if (!clipCovers(geometry)) {      return;    }  } else {    geometry=clipGeometry(geometry);  }  if (geometry instanceof MultiPolygon || geometry.getClass().equals(GeometryCollection.class)) {    splitAndAddFeatures(layerName,attributes,(GeometryCollection)geometry);    return;  }  if (geometry.isEmpty() || geometry.getCoordinates() == null || geometry.getCoordinates().length == 0) {    return;  }  if (this.simplificationFactor > 0) {    try {      geometry=TopologyPreservingSimplifier.simplify(geometry,this.simplificationFactor);    } catch (    Exception e) {      LOGGER.warning("Geometry cannot be simplified!! " + geometry.toString());      if (geometry instanceof LineString) {        List<Coordinate> coordinates=new ArrayList<>();        for (        Coordinate coordinate : geometry.getCoordinates()) {          if (coordinate.x > 0 && coordinate.y > 0) {            coordinates.add(coordinate);          }        }        GeometryFactory gm=new GeometryFactory();        geometry=gm.createLineString(coordinates.toArray(new Coordinate[coordinates.size()]));      }    }  }  for (  Coordinate coordinate : geometry.getCoordinates()) {    if (coordinate.x == 0 && coordinate.y == 0) {      LOGGER.warning("0 Value detected in Geometry " + geometry.toString());    }  }  Layer layer=layers.get(layerName);  if (layer == null) {    layer=new Layer();    layers.put(layerName,layer);  }  Feature feature=new Feature();  feature.geometry=geometry;  for (  Map.Entry<String,?> e : attributes.entrySet()) {    if (e.getValue() == null) {      continue;    }    feature.tags.add(layer.key(e.getKey()));    feature.tags.add(layer.value(e.getValue()));  }  layer.features.add(feature);}  }
class C{  @Override public int hashCode(){  return m_p1.hashCode() + m_p2.hashCode();}  }
class C{  private static float pxToDp(float px){  return px / Resources.getSystem().getDisplayMetrics().density;}  }
class C{  public void dispatch(Remote obj,RemoteCall call) throws IOException {  int num;  long op;  try {    ObjectInput in;    try {      in=call.getInputStream();      num=in.readInt();      if (num >= 0) {        if (skel != null) {          oldDispatch(obj,call,num);          return;        } else {          throw new UnmarshalException("skeleton class not found but required " + "for client version");        }      }      op=in.readLong();    } catch (    Exception readEx) {      throw new UnmarshalException("error unmarshalling call header",readEx);    }    MarshalInputStream marshalStream=(MarshalInputStream)in;    marshalStream.skipDefaultResolveClass();    Method method=hashToMethod_Map.get(op);    if (method == null) {      throw new UnmarshalException("unrecognized method hash: " + "method not supported by remote object");    }    logCall(obj,method);    Object[] params=null;    try {      unmarshalCustomCallData(in);      params=unmarshalParameters(obj,method,marshalStream);    } catch (    java.io.IOException e) {      throw new UnmarshalException("error unmarshalling arguments",e);    }catch (    ClassNotFoundException e) {      throw new UnmarshalException("error unmarshalling arguments",e);    } finally {      call.releaseInputStream();    }    Object result;    try {      result=method.invoke(obj,params);    } catch (    InvocationTargetException e) {      throw e.getTargetException();    }    try {      ObjectOutput out=call.getResultStream(true);      Class<?> rtype=method.getReturnType();      if (rtype != void.class) {        marshalValue(rtype,result,out);      }    } catch (    IOException ex) {      throw new MarshalException("error marshalling return",ex);    }  } catch (  Throwable e) {    logCallException(e);    ObjectOutput out=call.getResultStream(false);    if (e instanceof Error) {      e=new ServerError("Error occurred in server thread",(Error)e);    } else     if (e instanceof RemoteException) {      e=new ServerException("RemoteException occurred in server thread",(Exception)e);    }    if (suppressStackTraces) {      clearStackTraces(e);    }    out.writeObject(e);  } finally {    call.releaseInputStream();    call.releaseOutputStream();  }}  }
class C{  protected void rotateOrthogonal(){  for (int i=0; i < entries.size(); i++) {    NamedIcon icon=entries.get(i).icon;    icon.setRotation(icon.getRotation() + 1,this);  }  inactive.setRotation(inactive.getRotation() + 1,this);  unknown.setRotation(unknown.getRotation() + 1,this);  inconsistent.setRotation(inconsistent.getRotation() + 1,this);  displayState();  repaint();}  }
class C{  public static V2 remote(){  V2 v=new V2();  v.N.sendToRemote(true);  return v;}  }
class C{  public boolean intersects(double minLatitude,double minLongitude,double deltaLatitude,double deltaLongitude){  double maxLatitude=Location.clampLatitude(minLatitude + (deltaLatitude > 0 ? deltaLatitude : Double.NaN));  double maxLongitude=Location.clampLongitude(minLongitude + (deltaLongitude > 0 ? deltaLongitude : Double.NaN));  return this.minLatitude < maxLatitude && this.maxLatitude > minLatitude && this.minLongitude < maxLongitude && this.maxLongitude > minLongitude;}  }
class C{  private void clearCurrentDirectory(){  File directory=new File(getCurrentDirectory());  if (directory.exists() && directory.isDirectory()) {    String[] listing=directory.list();    for (    String aListing : listing) {      File file=new File(getCurrentDirectory(),aListing);      boolean deleted=file.delete();    }  }  if (!directory.exists()) {    directory.mkdirs();  }}  }
class C{  public static String quote(String string){  boolean quote=false;  if ((string.indexOf('\n') != -1) || (string.indexOf('\r') != -1) || (string.indexOf('\'') != -1)|| (string.indexOf('"') != -1)|| (string.indexOf('\\') != -1)|| (string.indexOf('\t') != -1)|| (string.indexOf('%') != -1)|| (string.indexOf('\u001E') != -1)) {    string=backQuoteChars(string);    quote=true;  }  if ((quote == true) || (string.indexOf('{') != -1) || (string.indexOf('}') != -1)|| (string.indexOf(',') != -1)|| (string.equals("?"))|| (string.indexOf(' ') != -1)|| (string.equals(""))) {    string=("'".concat(string)).concat("'");  }  return string;}  }
class C{  public File file(){  return file;}  }
class C{  public final boolean isDebugEnabled(){  return false;}  }
class C{  public static ReferenceRanges<String> createReferenceRanges(SAMFileHeader header,SamFilterParams params) throws IOException {  final ReferenceRanges<String> nameRangeMap;  if (params.bedRegionsFile() != null) {    nameRangeMap=createBedReferenceRanges(header,params.bedRegionsFile());  } else   if (params.restriction() != null) {    final SamRegionRestriction regionRestriction=params.restriction();    nameRangeMap=createSingleReferenceRange(header,regionRestriction);  } else {    nameRangeMap=createFullReferenceRanges(header);  }  validateRanges(header,nameRangeMap);  return nameRangeMap;}  }
class C{  public N4ClassifierDefinition basicGetOwner(){  if (eContainerFeatureID() != N4JSPackage.N4_MEMBER_DECLARATION__OWNER)   return null;  return (N4ClassifierDefinition)eInternalContainer();}  }
class C{  public Uri remapUri(Uri uri){  return null;}  }
class C{  public final void testSetMessageDigest(){  for (int ii=0; ii < algorithmName.length; ii++) {    try {      DigestInputStream dis=new DigestInputStream(null,null);      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      dis.setMessageDigest(md);      assertTrue(dis.getMessageDigest() == md);      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  private void addStatementToBuffer(final BigdataStatement stmt){  if (DEBUG)   log.debug(stmt.toString());  if (filter != null) {    if (filter.isValid(stmt)) {      buffer.add(stmt);    }  } else {    buffer.add(stmt);  }}  }
class C{  public void removeLike(Song song){  removeLikingImpl(song,PREF_LIKED_ENTRIES);}  }
class C{  public boolean putIfAbsent(final Key key,final Value value){  root=root.putIfAbsent(key,value,last,EMPTY);  if (last.nextNode != null) {    last=last.nextNode;    size++;    return true;  } else {    return false;  }}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void removeLayoutCallback(LayoutCallback callback){  if (callbackList != null)   callbackList.remove(callback);}  }
class C{  public StrBuilder reverse(){  if (size == 0) {    return this;  }  int half=size / 2;  char[] buf=buffer;  for (int leftIdx=0, rightIdx=size - 1; leftIdx < half; leftIdx++, rightIdx--) {    char swap=buf[leftIdx];    buf[leftIdx]=buf[rightIdx];    buf[rightIdx]=swap;  }  return this;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Page[");  sb.append(m_pageNo).append(",Elements=").append(m_elements.size());  sb.append("]");  return sb.toString();}  }
class C{  public Quaternionf rotationAxis(float angle,float axisX,float axisY,float axisZ){  float hangle=angle / 2.0f;  float sinAngle=(float)Math.sin(hangle);  float invVLength=(float)(1.0 / Math.sqrt(axisX * axisX + axisY * axisY + axisZ * axisZ));  x=axisX * invVLength * sinAngle;  y=axisY * invVLength * sinAngle;  z=axisZ * invVLength * sinAngle;  w=(float)Math.cos(hangle);  return this;}  }
class C{  public int send(Connection connection,Object object,SocketAddress address) throws IOException {  DatagramChannel datagramChannel=this.datagramChannel;  if (datagramChannel == null)   throw new SocketException("Connection is closed.");synchronized (writeLock) {    try {      try {        serialization.write(connection,writeBuffer,object);      } catch (      Exception ex) {        throw new KryoNetException("Error serializing object of type: " + object.getClass().getName(),ex);      }      writeBuffer.flip();      int length=writeBuffer.limit();      datagramChannel.send(writeBuffer,address);      lastCommunicationTime=System.currentTimeMillis();      boolean wasFullWrite=!writeBuffer.hasRemaining();      return wasFullWrite ? length : -1;    }  finally {      writeBuffer.clear();    }  }}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  if (uri == null) {    LogUtils.log(this,Log.WARN,NULL_URI_FORMAT_STRING);    return null;  }  final SQLiteQueryBuilder queryBuilder=new SQLiteQueryBuilder();  queryBuilder.setTables(LabelsTable.TABLE_NAME);  String groupBy=null;switch (sUriMatcher.match(uri)) {case LABELS:    if (TextUtils.isEmpty(sortOrder)) {      sortOrder=LabelsTable.KEY_ID;    }  break;case LABELS_ID:final String labelIdString=uri.getLastPathSegment();final int labelId;try {labelId=Integer.parseInt(labelIdString);} catch (NumberFormatException e) {LogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);return null;}final String where=String.format("%s = %d",LabelsTable.KEY_ID,labelId);queryBuilder.appendWhere(where);break;case PACKAGE_SUMMARY:projection=new String[]{LabelsTable.KEY_PACKAGE_NAME,"COUNT(*)"};groupBy=LabelsTable.KEY_PACKAGE_NAME;sortOrder=LabelsTable.KEY_PACKAGE_NAME;break;default :LogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);return null;}initializeDatabaseIfNull();return queryBuilder.query(mDatabase,projection,selection,selectionArgs,groupBy,null,sortOrder);}  }
class C{  public List<List<Integer>> zigzagLevelOrder(TreeNode root){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (root == null)   return res;  Queue<TreeNode> q=new LinkedList<TreeNode>();  q.add(root);  boolean toggle=false;  while (!q.isEmpty()) {    List<Integer> curLevel=new ArrayList<Integer>();    int size=q.size();    for (int i=0; i < size; i++) {      TreeNode n=q.poll();      if (!toggle)       curLevel.add(n.val); else       curLevel.add(0,n.val);      if (n.left != null)       q.add(n.left);      if (n.right != null)       q.add(n.right);    }    toggle=!toggle;    res.add(curLevel);  }  return res;}  }
class C{  public static <T>Flux<T> intersperse(Flux<T> flux,T value){  return Flux.fromIterable(null);}  }
class C{  public boolean isForEach(){  return isForEach;}  }
class C{  public boolean isError(){  return getState().isError();}  }
class C{  public static FilterResult includedIf(boolean included,Supplier<String> inclusionReasonSupplier,Supplier<String> exclusionReasonSupplier){  return included ? included(inclusionReasonSupplier.get()) : excluded(exclusionReasonSupplier.get());}  }
class C{  public RANSAC(Regressor baseRegressor,int iterations,int initialTrainSize,int minResultSize,double maxPointError){  setInitialTrainSize(initialTrainSize);  setIterations(iterations);  setMaxPointError(maxPointError);  setMinResultSize(minResultSize);  this.baseRegressor=baseRegressor;}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  @Field(12) public __VARIANT_NAME_3_union punkVal(Pointer<IUnknown> punkVal){  this.io.setPointerField(this,12,punkVal);  return this;}  }
class C{  public String useRelativePathTipText(){  return "Use relative rather than absolute paths";}  }
class C{  private void processAnsiCommand_h(){  if (getAnsiParameter(0) == 4) {  }}  }
class C{  public void truncate(long newLen){  assert newLen <= getPosition();  assert newLen >= 0;  int blockIndex=(int)(newLen >> blockBits);  nextWrite=(int)(newLen & blockMask);  if (nextWrite == 0) {    blockIndex--;    nextWrite=blockSize;  }  blocks.subList(blockIndex + 1,blocks.size()).clear();  if (newLen == 0) {    current=null;  } else {    current=blocks.get(blockIndex);  }  assert newLen == getPosition();}  }
class C{  public String toString(){  return super.toString() + "{m=" + m+ ",entryCount="+ entryCount+ ",height="+ height+ ",leafCount="+ leafCount+ ",nodeCount="+ nodeCount+ ",utilReport="+ utilReport+ "}";}  }
class C{  public void invalidate(){  MOD_COUNT++;}  }
class C{  public Control createContents(Composite parent){  Control contents=super.createContents(parent);  noDefaultAndApplyButton();  return contents;}  }
class C{  public void print(char[] x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  @After public void commitTransaction(){  ServerConfDatabaseCtx.get().commitTransaction();}  }
class C{  public void testGetContextWhenOverrideAndLeadingSlash(){  WAR war=new WAR("c:/some/path/to/war/test.war");  war.setContext("/");  assertEquals("",war.getContext());}  }
class C{  private void postPlugin(final boolean isPing) throws IOException {  String pluginName=modName;  MinecraftServer server=FMLCommonHandler.instance().getMinecraftServerInstance();  boolean onlineMode=server.isServerInOnlineMode();  String pluginVersion=modVersion;  String serverVersion;  if (server.isDedicatedServer()) {    serverVersion="MinecraftForge (MC: " + server.getMinecraftVersion() + ")";  } else {    serverVersion="MinecraftForgeSSP (MC: " + server.getMinecraftVersion() + ")";  }  int playersOnline=server.getCurrentPlayerCount();  StringBuilder json=new StringBuilder(1024);  json.append('{');  appendJSONPair(json,"guid",guid);  appendJSONPair(json,"plugin_version",pluginVersion);  appendJSONPair(json,"server_version",serverVersion);  appendJSONPair(json,"players_online",Integer.toString(playersOnline));  String osname=System.getProperty("os.name");  String osarch=System.getProperty("os.arch");  String osversion=System.getProperty("os.version");  String java_version=System.getProperty("java.version");  int coreCount=Runtime.getRuntime().availableProcessors();  if (osarch.equals("amd64")) {    osarch="x86_64";  }  appendJSONPair(json,"osname",osname);  appendJSONPair(json,"osarch",osarch);  appendJSONPair(json,"osversion",osversion);  appendJSONPair(json,"cores",Integer.toString(coreCount));  appendJSONPair(json,"auth_mode",onlineMode ? "1" : "0");  appendJSONPair(json,"java_version",java_version);  if (isPing) {    appendJSONPair(json,"ping","1");  }  json.append('}');  URL url=new URL(BASE_URL + String.format(REPORT_URL,urlEncode(pluginName)));  URLConnection connection;  if (isMineshafterPresent()) {    connection=url.openConnection(Proxy.NO_PROXY);  } else {    connection=url.openConnection();  }  byte[] uncompressed=json.toString().getBytes();  byte[] compressed=gzip(json.toString());  connection.addRequestProperty("User-Agent","MCStats/" + REVISION);  connection.addRequestProperty("Content-Type","application/json");  connection.addRequestProperty("Content-Encoding","gzip");  connection.addRequestProperty("Content-Length",Integer.toString(compressed.length));  connection.addRequestProperty("Accept","application/json");  connection.addRequestProperty("Connection","close");  connection.setDoOutput(true);  OutputStream os=connection.getOutputStream();  os.write(compressed);  os.flush();  final BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));  String response=reader.readLine();  os.close();  reader.close();  if (response == null || response.startsWith("ERR") || response.startsWith("7")) {    if (response == null) {      response="null";    } else     if (response.startsWith("7")) {      response=response.substring(response.startsWith("7,") ? 2 : 1);    }    throw new IOException(response);  }}  }
class C{  public double nextCoupon(Date settlement){  if (settlement.isNull()) {    settlement=settlementDate();  }  return CashFlows.getInstance().nextCouponRate(cashflows_,settlement);}  }
class C{  protected static void compareStringSets(@NotNull final String message,@NotNull final Set<String> actual,@NotNull final Set<String> expected){  final Joiner joiner=Joiner.on("\n");  Assert.assertEquals(message,joiner.join(new TreeSet<String>(actual)),joiner.join(new TreeSet<String>(expected)));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public CCwantImageSize scale(float scale){  return new CCwantImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public static String formatString(String s){  StringBuilder result=new StringBuilder(s.length() + 2);  result.append('"');  for (int i=0; i < s.length(); i++) {switch (s.charAt(i)) {case '\\':      if ((i + 1 < s.length()) && (s.charAt(i + 1) == 'u')) {        result.append("\\");      } else {        result.append("\\\\");      }    break;case '"':  result.append("\\\"");break;case '\b':result.append("\\b");break;case '\t':result.append("\\t");break;case '\f':result.append("\\f");break;case '\r':result.append("\\r");break;case '\n':result.append("\\n");break;default :if (s.charAt(i) < ' ') {result.append("\\x").append((int)s.charAt(i)).append("X");} else {result.append(s.charAt(i));}}}result.append('"');return result.toString();}  }
class C{  public static boolean isLegal(Range range){  if (range != null && range.startPos >= 0 && range.endPos > 0 && range.endPos > range.startPos) {    return true;  }  return false;}  }
class C{  public void addRule(Rule rule){  rules.add(rule);}  }
class C{  public static byte[] versionToBytes(GridCacheVersion ver){  assert ver != null;  byte[] bytes=new byte[28];  U.intToBytes(ver.topologyVersion(),bytes,0);  U.longToBytes(ver.globalTime(),bytes,4);  U.longToBytes(ver.order(),bytes,12);  U.intToBytes(ver.nodeOrderAndDrIdRaw(),bytes,20);  return bytes;}  }
class C{  public WriteBuffer putDouble(double x){  ensureCapacity(8).putDouble(x);  return this;}  }
class C{  public static long microsecond2tick(Sequence seq,long micros,TempoCache cache){  if (seq.getDivisionType() != Sequence.PPQ) {    double dTick=(((double)micros) * ((double)seq.getDivisionType()) * ((double)seq.getResolution())) / ((double)1000000);    long tick=(long)dTick;    if (cache != null) {      cache.currTempo=(int)cache.getTempoMPQAt(tick);    }    return tick;  }  if (cache == null) {    cache=new TempoCache(seq);  }  long[] ticks=cache.ticks;  int[] tempos=cache.tempos;  int cacheCount=tempos.length;  int resolution=seq.getResolution();  long us=0;  long tick=0;  int newReadPos=0;  int i=1;  if (micros > 0 && cacheCount > 0) {    while (i < cacheCount) {      long nextTime=us + ticks2microsec(ticks[i] - ticks[i - 1],tempos[i - 1],resolution);      if (nextTime > micros) {        break;      }      us=nextTime;      i++;    }    tick=ticks[i - 1] + microsec2ticks(micros - us,tempos[i - 1],resolution);    if (Printer.debug)     Printer.debug("microsecond2tick(" + (micros / 1000) + ") = "+ tick+ " ticks.");  }  cache.currTempo=tempos[i - 1];  return tick;}  }
class C{  public IComment editGlobalCodeNodeComment(final IComment oldComment,final String commentText) throws CouldntSaveDataException {  if (m_parentFunction != null) {    return CommentManager.get(m_provider).editGlobalCodeNodeComment(m_codeNode,oldComment,commentText);  }  return null;}  }
class C{  public SchemaField(String name,FieldType type){  this(name,type,type.properties,null);}  }
class C{  public String toString(){  return "SimpleBroadcastInterface " + super.toString();}  }
class C{  public int next(int nbits){  long x=seed;  x^=(x << 21);  x^=(x >>> 35);  x^=(x << 4);  seed=x;  x&=((1L << nbits) - 1);  return (int)x;}  }
class C{  public static int digit(int ch,int radix){  int props=getProperty(ch);  int value;  if (getNumericType(props) == NumericType.DECIMAL) {    value=UCharacterProperty.getUnsignedValue(props);  } else {    value=getEuropeanDigit(ch);  }  return (0 <= value && value < radix) ? value : -1;}  }
class C{  public static DetailsFragment newInstance(@IntRange(from=1,to=6) int kittenNumber){  Bundle args=new Bundle();  args.putInt(ARG_KITTEN_NUMBER,kittenNumber);  DetailsFragment fragment=new DetailsFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  void loadClassDefs() throws IOException {  int count=mHeaderItem.classDefsSize;  mClassDefs=new ClassDefItem[count];  seek(mHeaderItem.classDefsOff);  for (int i=0; i < count; i++) {    mClassDefs[i]=new ClassDefItem();    mClassDefs[i].classIdx=readInt();    readInt();    readInt();    readInt();    readInt();    readInt();    readInt();    readInt();  }}  }
class C{  protected void externalFrame(DockWrapper wrapper){  freeWrapper(wrapper);  externalFrameWrappers.add(wrapper);  wrapper.makeExternalFrame();}  }
class C{  protected boolean isDeptInstructorUnique(InstructorEditForm frm,HttpServletRequest request){  String query="from DepartmentalInstructor " + "where externalUniqueId=:puid and department.uniqueId=:deptId";  if (frm.getInstructorId() != null && frm.getInstructorId().trim().length() > 0) {    query+=" and uniqueId!=:uniqueId";  }  DepartmentalInstructorDAO ddao=new DepartmentalInstructorDAO();  org.hibernate.Session hibSession=ddao.getSession();  HttpSession httpSession=request.getSession();  String deptId=(String)httpSession.getAttribute(Constants.DEPT_ID_ATTR_NAME);  Query q=hibSession.createQuery(query);  q.setString("puid",frm.getPuId().trim());  q.setLong("deptId",Long.parseLong(deptId));  if (frm.getInstructorId() != null && frm.getInstructorId().trim().length() > 0) {    q.setString("uniqueId",frm.getInstructorId().trim());  }  return (q.list().size() == 0);}  }
class C{  public TDoubleFloatHashMap(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int elemNum=getInt(stack);  Object obj=stack.pop();  Object rv=null;  try {    if (obj == null)     rv=null; else     if (obj instanceof java.util.List)     rv=((java.util.List)obj).get(elemNum); else     if (obj.getClass().isArray())     rv=java.lang.reflect.Array.get(obj,elemNum);  } catch (  Exception e) {  }  return (rv);}  }
class C{  protected IJavaElement createImportHandle(ImportReference importRef){  char[] importName=CharOperation.concatWith(importRef.getImportName(),'.');  if ((importRef.bits & ASTNode.OnDemand) != 0)   importName=CharOperation.concat(importName,".*".toCharArray());  Openable openable=this.currentPossibleMatch.openable;  if (openable instanceof CompilationUnit)   return ((CompilationUnit)openable).getImport(new String(importName));  IType binaryType=((ClassFile)openable).getType();  String typeName=binaryType.getElementName();  int lastDollar=typeName.lastIndexOf('$');  if (lastDollar == -1)   return binaryType;  return createTypeHandle(typeName.substring(0,lastDollar));}  }
class C{  public T caseAnonymous_state_1_(Anonymous_state_1_ object){  return null;}  }
class C{  public static RegexpElement buildRegexp(FContract contract){  Set<FState> statesVisited=new HashSet<FState>();  List<FState> statesToVisit=new LinkedList<FState>();  FState initial=contract.getStateGraph().getInitial();  statesToVisit.add(initial);  Map<FState,Multimap<FState,TraceElement>> traceElementMap=new HashMap<FState,Multimap<FState,TraceElement>>();  Set<TraceElement> traceElements=new HashSet<TraceElement>();  int stateNum=contract.getStateGraph().getStates().size();  List<FState> states=contract.getStateGraph().getStates();  RegexpElement[][][] regexpArray=new RegexpElement[stateNum][stateNum][stateNum];  while (!statesToVisit.isEmpty()) {    FState state=statesToVisit.remove(0);    statesVisited.add(state);    Multimap<FState,TraceElement> innerMap=ArrayListMultimap.create();    for (    FTransition transition : state.getTransitions()) {      TraceElement traceElement=new FrancaTraceElement(state,transition);      traceElements.add(traceElement);      innerMap.put(transition.getTo(),traceElement);      if (!statesVisited.contains(transition.getTo())) {        statesToVisit.add(transition.getTo());      }    }    traceElementMap.put(state,innerMap);  }  for (int i=0; i < stateNum; i++) {    for (int j=0; j < stateNum; j++) {      Collection<TraceElement> elements=traceElementMap.get(states.get(i)).get(states.get(j));      if (elements != null) {        Collection<RegexpElement> regexpElements=new ArrayList<RegexpElement>();        for (        TraceElement e : elements) {          regexpElements.add(new SingleElement(e));        }        if (i != j) {          regexpArray[i][j][0]=new OrElement(regexpElements.toArray(new RegexpElement[0]));        } else {          regexpArray[i][j][0]=RegexpHelper.union(new OrElement(regexpElements.toArray(new RegexpElement[0])),EmptyElement.INSTANCE);        }      } else {        regexpArray[i][j][0]=NullElement.INSTANCE;      }    }  }  if (states.size() > 0) {    for (int k=1; k < stateNum; k++) {      for (int i=0; i < stateNum; i++) {        for (int j=0; j < stateNum; j++) {          regexpArray[i][j][k]=RegexpHelper.union(regexpArray[i][j][k - 1],RegexpHelper.and(RegexpHelper.and(regexpArray[i][k][k - 1],RegexpHelper.closure(regexpArray[k][k][k - 1])),regexpArray[k][j][k - 1]));        }      }    }  }  RegexpElement result=regexpArray[0][0][stateNum - 1];  if (states.size() > 1) {    for (int i=1; i < stateNum; i++) {      result=RegexpHelper.union(result,regexpArray[0][i][stateNum - 1]);    }  }  return result;}  }
class C{  private void paintMinimizeEnabled(Graphics2D g,JComponent c,int width,int height){  iconifyPainter.paintEnabled(g,c,width,height);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.BASE_TYPE_REF__DYNAMIC:    setDynamic(DYNAMIC_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,int macSizeInBits,BlockCipherPadding padding){  if ((macSizeInBits % 8) != 0) {    throw new IllegalArgumentException("MAC size must be multiple of 8");  }  this.cipher=new CBCBlockCipher(cipher);  this.padding=padding;  this.macSize=macSizeInBits / 8;  mac=new byte[cipher.getBlockSize()];  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public LocationOperand(FieldReference loc){  type=FIELD_ACCESS;  fieldRef=loc;}  }
class C{  public OperationNotSupportException(){  super();}  }
class C{  private void makePaintIndex(){  if (this.plot == null) {    return;  }  WaferMapDataset data=this.plot.getDataset();  Number dataMin=data.getMinValue();  Number dataMax=data.getMaxValue();  Set uniqueValues=data.getUniqueValues();  if (uniqueValues.size() <= this.paintLimit) {    int count=0;    for (Iterator i=uniqueValues.iterator(); i.hasNext(); ) {      this.paintIndex.put(i.next(),new Integer(count++));    }  } else {switch (this.paintIndexMethod) {case POSITION_INDEX:      makePositionIndex(uniqueValues);    break;case VALUE_INDEX:  makeValueIndex(dataMax,dataMin,uniqueValues);break;default :break;}}}  }
class C{  @SuppressWarnings("unchecked") protected void handleActivity(Method method,AbstractActivity<?> activity){  try {    StateType targetState=(StateType)method.invoke(this,activity);    setState(targetState);  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  public DisjunctiveConstraint(@NonNull final Constraint<Type>[] constraints){  setConstraints(constraints);}  }
class C{  public void removePoint(int index){  distanceMatrix.remove(index);  for (  List<Pair<Integer,Double>> distances : distanceMatrix) {    ListIterator<Pair<Integer,Double>> iterator=distances.listIterator();    while (iterator.hasNext()) {      Pair<Integer,Double> point=iterator.next();      if (point.getFirst() == index) {        iterator.remove();      } else       if (point.getFirst() > index) {        iterator.set(new Pair<Integer,Double>(point.getFirst() - 1,point.getSecond()));      }    }  }}  }
class C{  private void sb6(int a,int b,int c,int d){  int t1=~a;  int t2=a ^ d;  int t3=b ^ t2;  int t4=t1 | t2;  int t5=c ^ t4;  X1=b ^ t5;  int t7=t2 | X1;  int t8=d ^ t7;  int t9=t5 & t8;  X2=t3 ^ t9;  int t11=t5 ^ t8;  X0=X2 ^ t11;  X3=(~t5) ^ (t3 & t11);}  }
class C{  @Override public void release(){  this.id=null;}  }
class C{  public View create(Element elem){  RTextArea c=getRTextArea();  if (c instanceof RSyntaxTextArea) {    RSyntaxTextArea area=(RSyntaxTextArea)c;    View v;    if (area.getLineWrap())     v=new WrappedSyntaxView(elem); else     v=new SyntaxView(elem);    return v;  }  return null;}  }
class C{  public static void assertEquals(String message,byte expected,byte actual){  Assert.assertEquals(message,expected,actual);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void pasteSubsession(List sessionElements,Point upperLeft){  getWorkbench().pasteSubgraph(sessionElements,upperLeft);  getWorkbench().deselectAll();  for (  Object o : sessionElements) {    if (o instanceof GraphNode) {      Node modelNode=(Node)o;      getWorkbench().selectNode(modelNode);    }  }  getWorkbench().selectConnectingEdges();}  }
class C{  SSADictionary(Set<Object> heapTypes,boolean uphi,boolean insertPEIDeps,IR ir){  this.heapTypes=heapTypes;  this.uphi=uphi;  this.insertPEIDeps=insertPEIDeps;  this.ir=ir;}  }
class C{  private void trimHistory(){  while (mmHistory.size() > mmMaxHistorySize) {    mmHistory.removeFirst();    mmPosition--;  }  if (mmPosition < 0) {    mmPosition=0;  }}  }
class C{  public String buildTweetMessage(Item i,int q,int p){  StringBuilder message=new StringBuilder();  message.append("New offer for ");  message.append(Grammar.quantityplnoun(q,i.getName(),"a"));  message.append(" at ");  message.append(p);  message.append(" money. ");  String stats="";  String description=i.describe();  int start=description.indexOf("Stats are (");  if (start > -1) {    stats=description.substring(start);  }  message.append(stats);  return message.toString();}  }
class C{  private String normalizeArgTypeName(String name) throws NoSessionException {  int i=0;  StringBuffer typePart=new StringBuffer();  StringBuffer arrayPart=new StringBuffer();  name=name.trim();  int nameLength=name.length();  boolean isVarArgs=name.endsWith("...");  if (isVarArgs) {    nameLength-=3;  }  while (i < nameLength) {    char c=name.charAt(i);    if (Character.isWhitespace(c) || c == '[') {      break;    }    typePart.append(c);    i++;  }  while (i < nameLength) {    char c=name.charAt(i);    if ((c == '[') || (c == ']')) {      arrayPart.append(c);    } else     if (!Character.isWhitespace(c)) {      throw new IllegalArgumentException("Invalid argument type name");    }    i++;  }  name=typePart.toString();  if ((name.indexOf('.') == -1) || name.startsWith("*.")) {    try {      List<?> refs=specs.runtime.findClassesMatchingPattern(name);      if (refs.size() > 0) {        name=((ReferenceType)(refs.get(0))).name();      }    } catch (    IllegalArgumentException e) {    }  }  name+=arrayPart.toString();  if (isVarArgs) {    name+="...";  }  return name;}  }
class C{  public AcronymDataArrayAdapter(Context context){  super(context,R.layout.acronym_data_row);}  }
class C{  public void generateSmap() throws IOException {}  }
class C{  public static <C extends Comparable<?>>Range<C> downTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return greaterThan(endpoint);case CLOSED:  return atLeast(endpoint);default :throw new AssertionError();}}  }
class C{  public Matrix4x3f scale(Vector3fc xyz){  return scale(xyz.x(),xyz.y(),xyz.z(),this);}  }
class C{  public CircleBuilder radius(Distance radius){  return radius(radius.value,radius.unit);}  }
class C{  public boolean checkData(){  return composer.checkNode();}  }
class C{  synchronized boolean isAttached(Monitor monitorToFind){  return monitors.contains(monitorToFind);}  }
class C{  @Override public String routing(){  return this.routing;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getRecordingQuality();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.976 -0500",hash_original_method="5B583BB83679498D2C51EBF7375CF750",hash_generated_method="5FFFFA9C91536F01676F6077DEBFAF87") public Finished(byte[] bytes){  data=bytes;  length=data.length;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void addBlock(Unit head,Unit tail,int index,int length,List<Block> blockList,Map<Unit,Block> unitToBlock){  Block block=new Block(head,tail,mBody,index,length,this);  blockList.add(block);  unitToBlock.put(tail,block);  unitToBlock.put(head,block);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (deep: ");  result.append(deep);  result.append(')');  return result.toString();}  }
class C{  public AdapterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public Pair<Node,Node> crossover(Node individualA,Node individualB){  boolean isGood=false;  Node newIndividualA=null;  Node newIndividualB=null;  for (int tries=0; tries < 20; tries++) {    newIndividualA=individualA.cloneTree();    newIndividualB=individualB.cloneTree();    Node randomNodeA=pickRandomNode(newIndividualA);    Node randomNodeB=pickRandomNode(newIndividualB);    if (randomNodeA != null && randomNodeB != null) {      Node aParent=randomNodeA.getParent();      List<Node> aChilds=aParent.getChildrens();      int aIndex=aChilds.indexOf(randomNodeA);      Node bParent=randomNodeB.getParent();      List<Node> bChilds=bParent.getChildrens();      int bIndex=bChilds.indexOf(randomNodeB);      aChilds.set(aIndex,randomNodeB);      bChilds.set(bIndex,randomNodeA);      randomNodeA.setParent(bParent);      randomNodeB.setParent(aParent);      if (checkMaxDepth(newIndividualA,1) && checkMaxDepth(newIndividualB,1) && newIndividualA.isValid()&& newIndividualB.isValid()) {        isGood=true;        break;      }    }  }  if (isGood) {    return new Pair<Node,Node>(newIndividualA,newIndividualB);  } else {    return null;  }}  }
class C{  public Remote toStub() throws IOException {  final Remote stub=IIOPHelper.toStub(this);  return stub;}  }
class C{  public Reduction asReduction(){  return new Reduction(this);}  }
class C{  public boolean isClear(){  return clear;}  }
class C{  public void clear(){  mCategories.clear();  mTitles.clear();  mValues.clear();}  }
class C{  public AbstractResources<T> withInactive(boolean inactive){  this.includeInactive=inactive;  return this;}  }
class C{  public AccountHeaderBuilder withProfiles(@NonNull ArrayList<IProfile> profiles){  this.mProfiles=IdDistributor.checkIds(profiles);  return this;}  }
class C{  public SpherePortrayal3D(Color color,double scale,int divisions){  this(appearanceForColor(color),true,false,scale,divisions);}  }
class C{  public void addYTextLabel(double y,String text){  addYTextLabel(y,text,0);}  }
class C{  private boolean tryMapReg(RegisterSpec ssaSpec,int ropReg,int maxAllowedCategory){  if (ssaSpec.getCategory() <= maxAllowedCategory && !ssaRegsMapped.get(ssaSpec.getReg()) && canMapReg(ssaSpec,ropReg)) {    addMapping(ssaSpec,ropReg);    return true;  }  return false;}  }
class C{  public void dispose(){  manager.cancelDisposeExec(disposeRunnable);  if (table != null) {    for (    Entry entry : table.values()) {      if (entry.image != null) {        manager.destroyImage(entry.descriptor);      }    }    table=null;  }  display=null;}  }
class C{  public ChopTriangleConnector(){}  }
class C{  private void validateHost(State state) throws Throwable {  CloudStoreHelper cloudStoreHelper=HostUtils.getCloudStoreHelper(this);  URI cloudStoreUri=cloudStoreHelper.getCloudStoreURI(null);  Operation uniqueHostIpQuery=buildUniqueHostIpQuery(state,cloudStoreUri);  Operation allMgmtHostsQuery=buildAllMgmtHostsQuery(cloudStoreUri);  OperationSequence.create(uniqueHostIpQuery,allMgmtHostsQuery).setCompletion(null).sendWith(this);}  }
class C{  protected BitwiseXorExpressionImpl(){  super();}  }
class C{  @VisibleForTesting protected HttpURLConnection createConnection() throws RequestFailureException {  try {    URL url=new URL(mGenerator.getServerUrl());    HttpURLConnection connection=(HttpURLConnection)url.openConnection();    connection.setConnectTimeout(MS_CONNECTION_TIMEOUT);    connection.setReadTimeout(MS_CONNECTION_TIMEOUT);    return connection;  } catch (  MalformedURLException e) {    throw new RequestFailureException("Caught a malformed URL exception.",e);  }catch (  IOException e) {    throw new RequestFailureException("Failed to open connection to URL",e);  }}  }
class C{  public void addForwardEdge(GraphEdge edge){  SuccessorEdges.Mutable successors=getNodeSuccessors(edge.getHead());  successors.addForwardEdge(edge);}  }
class C{  private static boolean isElementFromByteCode(Element elt,Element orig){  if (elt == null) {    return false;  }  if (elt instanceof Symbol.ClassSymbol) {    Symbol.ClassSymbol clss=(Symbol.ClassSymbol)elt;    if (null != clss.classfile) {      return (clss.classfile.getName().endsWith(".class") || clss.classfile.getName().endsWith(".class)") || clss.classfile.getName().endsWith(".class)]"));    } else {      return false;    }  }  return isElementFromByteCode(elt.getEnclosingElement(),elt);}  }
class C{  public String toString(String pattern){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).print(this);}  }
class C{  @PUT @Consumes({Servlets.JSON_MEDIA_TYPE,MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public Response update(@Context HttpServletRequest request){  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"TypesResource.update()");    }    final String typeDefinition=Servlets.getRequestPayload(request);    LOG.info("Updating type with definition {} ",typeDefinition);    JSONObject typesJson=metadataService.updateType(typeDefinition);    final JSONArray typesJsonArray=typesJson.getJSONArray(AtlasClient.TYPES);    JSONArray typesResponse=new JSONArray();    for (int i=0; i < typesJsonArray.length(); i++) {      final String name=typesJsonArray.getString(i);      typesResponse.put(new JSONObject(){{          put(AtlasClient.NAME,name);        }      });    }    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put(AtlasClient.TYPES,typesResponse);    return Response.ok().entity(response).build();  } catch (  TypeExistsException e) {    LOG.error("Type already exists",e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.CONFLICT));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to persist types",e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to persist types",e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  private void verifyMigrationFailed(String version){  CoordinatorClient coordinator=getCoordinator();  Assert.assertEquals(MigrationStatus.FAILED,coordinator.getMigrationStatus());  String checkpoint=getCheckpoint(version);  log.info("Current migration checkpoint: {}",checkpoint);  Assert.assertNotNull(checkpoint);  String failedCallbackName=com.emc.storageos.db.server.upgrade.util.callbacks2.Resource3NewFlagsInitializer.class.getSimpleName();  Assert.assertNotSame(failedCallbackName,checkpoint);}  }
class C{  public boolean waitForDraw(long timeout) throws InterruptedException {  return drawLock.tryAcquire(timeout,TimeUnit.MILLISECONDS);}  }
class C{  public static void assertLinePattern(File file,String regex) throws IOException {  CommentedLineReader reader=null;  Pattern pattern=Pattern.compile(regex);  try {    reader=new CommentedLineReader(new FileReader(file));    String line=null;    while ((line=reader.readLine()) != null) {      if (!pattern.matcher(line).matches()) {        Assert.fail("line does not match pattern: " + line);      }    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.EVENT_DEFINITION___AFTER_EVERY_EVENT_1:    getAfterEveryEvent_1().clear();  getAfterEveryEvent_1().addAll((Collection<? extends AfterEveryEvent_>)newValue);return;case UmplePackage.EVENT_DEFINITION___AFTER_EVENT_1:getAfterEvent_1().clear();getAfterEvent_1().addAll((Collection<? extends AfterEvent_>)newValue);return;case UmplePackage.EVENT_DEFINITION___EVENT_1:setEvent_1((String)newValue);return;case UmplePackage.EVENT_DEFINITION___ANONYMOUS_EVENT_DEFINITION_11:getAnonymous_eventDefinition_1_1().clear();getAnonymous_eventDefinition_1_1().addAll((Collection<? extends Anonymous_eventDefinition_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean contains(Point2D p){switch (pointerEventType) {case VISIBLE_PAINTED:case VISIBLE_FILL:case VISIBLE_STROKE:case VISIBLE:    return isVisible && super.contains(p);case PAINTED:case FILL:case STROKE:case ALL:  return super.contains(p);case NONE:return false;default :return false;}}  }
class C{  public DoubleFft1d(int n){  if (n < 1) {    throw new IllegalArgumentException("n must be greater than 0");  }  this.n=n;  if (!ConcurrencyUtils.isPowerOf2(n)) {    if (getReminder(n,factors) >= 211) {      plan=Plans.BLUESTEIN;      nBluestein=ConcurrencyUtils.nextPow2(n * 2 - 1);      bk1=new double[2 * nBluestein];      bk2=new double[2 * nBluestein];      this.ip=new int[2 + (int)Math.ceil(2 + (1 << (int)(Math.log(nBluestein + 0.5) / Math.log(2)) / 2))];      this.w=new double[nBluestein];      int twon=2 * nBluestein;      nw=ip[0];      if (twon > (nw << 2)) {        nw=twon >> 2;        makewt(nw);      }      nc=ip[1];      if (nBluestein > (nc << 2)) {        nc=nBluestein >> 2;        makect(nc,w,nw);      }      bluesteini();    } else {      plan=Plans.MIXED_RADIX;      wtable=new double[4 * n + 15];      wtable_r=new double[2 * n + 15];      cffti();      rffti();    }  } else {    plan=Plans.SPLIT_RADIX;    this.ip=new int[2 + (int)Math.ceil(2 + (1 << (int)(Math.log(n + 0.5) / Math.log(2)) / 2))];    this.w=new double[n];    int twon=2 * n;    nw=ip[0];    if (twon > (nw << 2)) {      nw=twon >> 2;      makewt(nw);    }    nc=ip[1];    if (n > (nc << 2)) {      nc=n >> 2;      makect(nc,w,nw);    }  }}  }
class C{  protected void doDrawText(TextRenderer textRenderer,OrderedLabel olbl){  Color color=this.material.getDiffuse();  Color backgroundColor=this.computeBackgroundColor(color);  float opacity=(float)this.getOpacity();  int x=olbl.screenPoint.x;  int y=olbl.screenPoint.y;  float[] compArray=new float[3];  if (AVKey.TEXT_EFFECT_SHADOW.equals(this.effect) && backgroundColor != null) {    backgroundColor.getRGBColorComponents(compArray);    textRenderer.setColor(compArray[0],compArray[1],compArray[2],opacity);    this.drawMultiLineText(textRenderer,x + 1,y - 1,olbl);  }  color.getRGBColorComponents(compArray);  textRenderer.setColor(compArray[0],compArray[1],compArray[2],opacity);  this.drawMultiLineText(textRenderer,x,y,olbl);}  }
class C{  EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  private View fillUp(int pos,int bottom){  int end=mListPadding.top;  int childBottom=getFillChildTop();  while (childBottom > end && pos >= 0) {    makeAndAddView(pos,getItemBottom(pos),false,false);    pos--;    childBottom=getItemBottom(pos);  }  mFirstPosition=pos + 1;  return null;}  }
class C{  private static Charset toCharset(String csn) throws UnsupportedEncodingException {  requireNonNull(csn,"charsetName");  try {    return Charset.forName(csn);  } catch (  IllegalCharsetNameException|UnsupportedCharsetException unused) {    throw new UnsupportedEncodingException(csn);  }}  }
class C{  private void sendSMS(String message,String contactInformation){  ResolvedContact rc=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_CELL);  if (rc == null) {    send(R.string.chat_no_match_for,contactInformation);  } else   if (rc.isDistinct()) {    sendSMSByPhoneNumber(message,rc.getNumber(),rc.getName());  } else {    askForMoreDetails(rc.getCandidates());  }}  }
class C{  public static boolean isLegal(boolean expression,String message){  if (!expression)   throw new IllegalArgumentException(message);  return expression;}  }
class C{  public KMLWriter(){}  }
class C{  static File sequenceIndexFile(final File dir){  return new File(dir,SEQUENCE_INDEX_FILENAME);}  }
class C{  private void init(Context context,AttributeSet attrs){  if (attrs != null) {    TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.MetaballMenuImageView,0,0);    mnDefaultImage=a.getResourceId(R.styleable.MetaballMenuImageView_defaultImage,0);    mnSelectedImage=a.getResourceId(R.styleable.MetaballMenuImageView_selectedImage,0);    a.recycle();  }  if (mnDefaultImage != 0)   setImageResource(mnDefaultImage);}  }
class C{  public void refreshing(){  mHintTextView.setText(R.string.pulltorefresh_listview_header_hint_loading);}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.COMPOSITE_PROCESSOR;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double calculatePValue(double t,int v){  return 2 * (1 - StudentsTDistribution.cdf(Math.abs(t),v));}  }
class C{  public RowList(Session session){  this.session=session;  maxMemory=session.getDatabase().getMaxOperationMemory();}  }
class C{  private void initializeLight(String systemName){  mSystemName=systemName;  mBit=AcelaAddress.getBitFromSystemName(systemName);  AcelaNode mNode=AcelaAddress.getNodeFromSystemName(mSystemName,_memo);  if (mNode != null) {    int initstate;    int initbit;    initbit=mBit - mNode.getStartingOutputAddress();    initstate=mNode.getOutputInit(initbit);    if (initstate == 1) {      setState(ON);    } else {      setState(OFF);    }  }}  }
class C{  private void removeNotification(){  ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).cancel(NOTIFICATION_ID);}  }
class C{  public void i(Object str){  if (debug) {    if (logLevel <= Log.INFO) {      String name=getFunctionName();      if (name != null) {        Log.i(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.i(tag,str.toString());      }    }  }}  }
class C{  public static int YToTileY(int y,int tileGridYOffset,int tileHeight){  y-=tileGridYOffset;  if (y < 0) {    y+=1 - tileHeight;  }  return y / tileHeight;}  }
class C{  void recordAccess(ParameterizedHashMap<K,V> m){}  }
class C{  private int handleX(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('S');    index++;  } else {    if (!((index == value.length() - 1) && (contains(value,index - 3,3,"IAU","EAU") || contains(value,index - 2,2,"AU","OU")))) {      result.append("KS");    }    index=contains(value,index + 1,1,"C","X") ? index + 2 : index + 1;  }  return index;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null)   return new Integer(tun.getRemoteInfo(remoteName).sequenceDelay); else   return null;}  }
class C{  public ProbabilisticMAPIndependence(DataSet dataSet){  this.data=dataSet;  int[] counts=new int[dataSet.getNumColumns() + 2];  for (int j=0; j < dataSet.getNumColumns(); j++) {    counts[j + 1]=((DiscreteVariable)(dataSet.getVariable(j))).getNumCategories();  }  if (!dataSet.isDiscrete()) {    throw new IllegalArgumentException("Not a discrete data set.");  }  int[][] cases=new int[dataSet.getNumRows() + 1][dataSet.getNumColumns() + 2];  for (int i=0; i < dataSet.getNumRows(); i++) {    for (int j=0; j < dataSet.getNumColumns(); j++) {      cases[i + 1][j + 1]=dataSet.getInt(i,j) + 1;    }  }  bci=new BCInference(cases,counts);  nodes=dataSet.getVariables();  indices=new HashMap<>();  for (int i=0; i < nodes.size(); i++) {    indices.put(nodes.get(i),i);  }  this.H=new HashMap<>();}  }
class C{  protected StaticBaseTypeRefImpl(){  super();}  }
class C{  public LocalTime(int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,Chronology chronology){  super();  chronology=DateTimeUtils.getChronology(chronology).withUTC();  long instant=chronology.getDateTimeMillis(0L,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);  iChronology=chronology;  iLocalMillis=instant;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateattribute.class,args);}  }
class C{  public void unexpectedPCData(String systemID,int lineNr,String parentElementName) throws XMLValidationException {  XMLUtil.errorUnexpectedPCData(systemID,lineNr,parentElementName);}  }
class C{  boolean shouldUpdateSelectedStateFromAction(){  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void mouseEntered(MouseEvent e){}  }
class C{  public BlockColouredSlab(Material material,EnumColourGroup colourGroup,SlabGroup<EnumDyeColor,EnumColourGroup,BlockColouredSlab> slabGroup){  super(material,slabGroup,colourGroup);}  }
class C{  public static String keyFor(String name){  if (name != null) {    boolean sortfirst=false;    if (name.equals(UNKNOWN_STRING)) {      return "\001";    }    if (name.startsWith("\001")) {      sortfirst=true;    }    name=name.trim().toLowerCase();    if (name.startsWith("the ")) {      name=name.substring(4);    }    if (name.startsWith("an ")) {      name=name.substring(3);    }    if (name.startsWith("a ")) {      name=name.substring(2);    }    if (name.endsWith(", the") || name.endsWith(",the") || name.endsWith(", an")|| name.endsWith(",an")|| name.endsWith(", a")|| name.endsWith(",a")) {      name=name.substring(0,name.lastIndexOf(','));    }    name=name.replaceAll("[\\[\\]\\(\\)\"'.,?!]","").trim();    if (name.length() > 0) {      StringBuilder b=new StringBuilder();      b.append('.');      int nl=name.length();      for (int i=0; i < nl; i++) {        b.append(name.charAt(i));        b.append('.');      }      name=b.toString();      String key=DatabaseUtils.getCollationKey(name);      if (sortfirst) {        key="\001" + key;      }      return key;    } else {      return "";    }  }  return null;}  }
class C{  public FindVersionTagMessage(){}  }
class C{  public void resetAllDiscovery(){  this.discoveredStaticAspects.clear();  this.saveContainer();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BINDING_ELEMENT;}  }
class C{  private boolean parseBackslash(){  index++;  if (peek() == '\n') {    appendNode(new HardLineBreak());    index++;  } else   if (index < input.length() && ESCAPABLE.matcher(input.substring(index,index + 1)).matches()) {    appendText(input,index,index + 1);    index++;  } else {    appendText("\\");  }  return true;}  }
class C{  public static void main(String[] args){  TestBadLinkOption tester=new TestBadLinkOption();  run(tester,ARGS,TEST,NEG_TEST);  tester.printSummary();}  }
class C{  public ProcessParameterPanel(int WindowNo,ProcessInfo pi,String width){  m_WindowNo=WindowNo;  m_processInfo=pi;  this.width=width;  initComponent();}  }
class C{  public static double deadband(double deadband,double value){  return (Math.abs(value) > deadband) ? value : 0;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @SuppressWarnings("unchecked") public Iter<O> iterParentsReverse(){  if (nump == 0) {    return (Iter<O>)EMPTY_ITERATOR;  }  return new ItrParentsReverse();}  }
class C{  synchronized public boolean release(DTM dtm,boolean shouldHardDelete){  if (DEBUG) {    System.out.println("Releasing " + (shouldHardDelete ? "HARD" : "soft") + " dtm="+ dtm.getDocumentBaseURI());  }  if (dtm instanceof SAX2DTM) {    ((SAX2DTM)dtm).clearCoRoutine();  }  if (dtm instanceof DTMDefaultBase) {    org.apache.xml.utils.SuballocatedIntVector ids=((DTMDefaultBase)dtm).getDTMIDs();    for (int i=ids.size() - 1; i >= 0; --i)     m_dtms[ids.elementAt(i) >>> DTMManager.IDENT_DTM_NODE_BITS]=null;  } else {    int i=getDTMIdentity(dtm);    if (i >= 0) {      m_dtms[i >>> DTMManager.IDENT_DTM_NODE_BITS]=null;    }  }  dtm.documentRelease();  return true;}  }
class C{  private byte[] readReportFromGcs(GcsFilename reportFilename) throws IOException, PGPException {  try (InputStream gcsInput=gcsUtils.openInputStream(reportFilename);Ghostryde.Decryptor decryptor=ghostryde.openDecryptor(gcsInput,stagingDecryptionKey);Ghostryde.Decompressor decompressor=ghostryde.openDecompressor(decryptor);Ghostryde.Input xmlInput=ghostryde.openInput(decompressor)){    return ByteStreams.toByteArray(xmlInput);  } }  }
class C{  public static String[] readFile(String networkEngineToConfig) throws IOException {  ArrayList<String> ret=new ArrayList<String>();  InputStream inStream=new FileInputStream(networkEngineToConfig);  InputStreamReader inFile=new InputStreamReader(inStream);  BufferedReader inBuf=new BufferedReader(inFile);  String line;  while ((line=inBuf.readLine()) != null)   ret.add(line);  inBuf.close();  return ret.toArray(new String[ret.size()]);}  }
class C{  public void assign(WorkflowStateConstant newState){  String s=validateStateChange(newState);  if (s == null)   throw new IllegalArgumentException("Invalid state change to " + newState.name.get() + " while current is "+ toString());  if (name.compareAndSet(s,newState.name.get()))   for (  StateListener l : listeners)   l.stateChanged(this); else   throw new ConcurrentModificationException("Concurrent state change to " + newState.name.get() + " from "+ name.get()+ " which changed recently from "+ s);}  }
class C{  public static void main(String args[]){  SpatialGrid test=SpatialGrid.readFromFile("/Users/thomas/Development/opus_home/data/seattle_parcel/results/interpolationQuickTest/results/400.0travel_time_accessibility.txt");  test.writeToFile("/Users/thomas/Development/opus_home/data/seattle_parcel/results/interpolationQuickTest/results/400.0travel_time_accessibilityTEST.txt");}  }
class C{  public static boolean initializeEntityActivationState(Entity entity,SpigotWorldConfig config){  if (config == null && DimensionManager.getWorld(0) != null) {    config=DimensionManager.getWorld(0).spigotConfig;  } else {    return true;  }  if ((entity.activationType == 3 && config.miscActivationRange == 0) || (entity.activationType == 2 && config.animalActivationRange == 0) || (entity.activationType == 1 && config.monsterActivationRange == 0)|| (entity instanceof EntityPlayer && !(entity instanceof FakePlayer))|| entity instanceof EntityThrowable|| entity instanceof EntityDragon|| entity instanceof EntityDragonPart|| entity instanceof EntityWither|| entity instanceof EntityFireball|| entity instanceof EntityWeatherEffect|| entity instanceof EntityTNTPrimed|| entity instanceof EntityFallingBlock|| entity instanceof EntityEnderCrystal|| entity instanceof EntityFireworkRocket|| entity instanceof EntityVillager|| (entity.getClass().getSuperclass() == Entity.class && !entity.isCreatureType(EnumCreatureType.creature,false) && !entity.isCreatureType(EnumCreatureType.ambient,false) && !entity.isCreatureType(EnumCreatureType.monster,false) && !entity.isCreatureType(EnumCreatureType.waterCreature,false))) {    return true;  }  return false;}  }
class C{  protected boolean flushCachesIfTransient(final Object object){  if (isTransientEntity(object)) {    for (    final String cacheName : cachesToFlushForTransientEntities) {      final Cache cache=cacheManager.getCache(cacheName);      cache.clear();    }    return true;  }  return false;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void openFragment(RootFragment from,RootFragment to){  addFragment(from,to,null,KEEP_CURRENT);}  }
class C{  public void acquireWriteLock(){}  }
class C{  public static void run(AdSense adsense,String adClientId,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all URL channels for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  do {    UrlChannels urlChannels=adsense.urlchannels().list(adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (urlChannels.getItems() != null && !urlChannels.getItems().isEmpty()) {      for (      UrlChannel channel : urlChannels.getItems()) {        System.out.printf("URL channel with URL pattern \"%s\" was found.\n",channel.getUrlPattern());      }    } else {      System.out.println("No URL channels found.");    }    pageToken=urlChannels.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public void testGetHttpMethod_NameWithRestPrefix(){  initializePsiClass("\"\"","\"\"");  initializePsiMethod("updateFoo","\"\"","\"\"");  MockitoAnnotations.initMocks(this);  RestSignatureInspection inspection=new RestSignatureInspection();  String httpMethod=inspection.getHttpMethod(mockPsiMethod);  assertEquals("PUT",httpMethod);}  }
class C{  static public double normalize(final double rawScore,final double totalRawScore){  if (totalRawScore == 0d) {    return 0d;  }  return rawScore / totalRawScore;}  }
class C{  public MultiTextEdit(int offset,int length){  super(offset,length);  fDefined=true;}  }
class C{  private Client createrRestClient() throws KeyManagementException, NoSuchAlgorithmException {  ClientConfig clientConfig=new ClientConfig();  if (this.connectionTimeout != 0) {    clientConfig.property(ClientProperties.CONNECT_TIMEOUT,this.connectionTimeout);    clientConfig.property(ClientProperties.READ_TIMEOUT,this.connectionTimeout);  }  clientConfig.register(new LoggingFilter());  Client client=null;  if (this.baseURI.startsWith("https")) {    client=createSLLClient(clientConfig);  } else {    client=ClientBuilder.newClient(clientConfig);  }  return client;}  }
class C{  public static boolean resetAndTest(RegExp regexp,String input){  regexp.setLastIndex(0);  return regexp.test(input);}  }
class C{  private void writeDirectoryPostResource(Element postResourceEl,String path){  postResourceEl.setAttribute("className",DIR_RESOURCE_SET);  postResourceEl.setAttribute("base",path.replace("&","&amp;"));}  }
class C{  public boolean verify(PublicKey verificationKey,Signature verificationEngine) throws InvalidKeyException, SignatureException {  verificationEngine.initVerify(verificationKey);  verificationEngine.update(content);  return verificationEngine.verify(signature);}  }
class C{  public static void loadLicense(){  byte[] encLicense=new byte[256];  String license=null;  try {    FileInputStream fis=new FileInputStream(LICENSE_FILE_PATH);    fis.read(encLicense);    fis.close();    RSAPublicKey pubKey=getPublicKey();    Cipher cipher=Cipher.getInstance("RSA");    cipher.init(Cipher.DECRYPT_MODE,pubKey);    byte[] decLicenseBytes=cipher.doFinal(encLicense);    license=new String(decLicenseBytes);  } catch (  Exception exc) {    exc.printStackTrace();    return;  }  if (license == null)   return;  _licenseLastModified=new File(LICENSE_FILE_PATH).lastModified();  String galiel="galiel314.com ";  if (license.startsWith(galiel)) {    String dateStr=license.substring(galiel.length(),galiel.length() + DateUtils.PATTERN_RFC1123.length());    try {      Date date=DateUtils.parseDate(dateStr);      galielExpirationTime=1000 * 3600 * 24* 14 + date.getTime();      isGaliel=true;      return;    } catch (    IllegalArgumentException exc) {      exc.printStackTrace();      return;    }  }  String[] domains=license.split(",");  licensedDomains=new HashSet<String>(domains.length);  for (  String d : domains)   licensedDomains.add(d);}  }
class C{  public static Function<String,String> tr(final String regexp,final String replacement){  Objects.requireNonNull(regexp,"The regular expression must not be null");  Objects.requireNonNull(replacement,"The replacement must not be null");  return null;}  }
class C{  public void testTooLargeEditDistance(){  assertFalse(sh.isASuggestion("sniyr","about"));  assertFalse(sh.isDefaultCorrection("rjw","the"));}  }
class C{  @Deprecated public void angularBindGlobal(String name,Object o,AngularObjectWatcher watcher){  angularBind(name,o,null,watcher);}  }
class C{  public Section_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_label=jcas.getRequiredFeatureDE(casType,"label","uima.cas.String",featOkTst);  casFeatCode_label=(null == casFeat_label) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_label).getCode();}  }
class C{  private AsciiFuncs(){}  }
class C{  private Object writeReplace(){  return new Stub(getZone());}  }
class C{  public void fireControlerReplanningEvent(final int iteration){  ReplanningEvent event=new ReplanningEvent(this.controler,iteration);  ReplanningListener[] listener=this.coreListenerList.getListeners(ReplanningListener.class);  for (  ReplanningListener aListener : listener) {    log.info("calling notifyReplanning on " + aListener.getClass().getCanonicalName());    aListener.notifyReplanning(event);  }  listener=this.listenerList.getListeners(ReplanningListener.class);  for (  ReplanningListener aListener : listener) {    log.info("calling notifyReplanning on " + aListener.getClass().getCanonicalName());    aListener.notifyReplanning(event);  }  log.info("[it." + iteration + "] all ControlerReplanningListeners called.");}  }
class C{  @Override public void addSite(String siteId) throws Exception {  String sitePath=getSitePrefix(siteId);  String siteConfigPath=sitePath + ZkPath.CONFIG;  String siteServicePath=sitePath + ZkPath.SERVICE;  String siteMutexPath=sitePath + ZkPath.MUTEX;  String siteErrorPath=siteConfigPath + ZkPath.SITEERROR;  String siteMonitorState=siteConfigPath + ZkPath.SITEMONITORSTATE;  String siteNetworkState=siteConfigPath + ZkPath.SITENETWORKSTATE;  String siteTargetConfig=siteConfigPath + ZkPath.SITETARGETCONFIG;  ZooKeeper zooKeeper=getZkConnection().curator().getZookeeperClient().getZooKeeper();  try {    log.info("create ZK path {}, and its sub zone nodes",sitePath);    ZKPaths.mkdirs(zooKeeper,siteServicePath);    ZKPaths.mkdirs(zooKeeper,siteMutexPath);    ZKPaths.mkdirs(zooKeeper,siteErrorPath);    ZKPaths.mkdirs(zooKeeper,siteMonitorState);    ZKPaths.mkdirs(zooKeeper,siteNetworkState);    ZKPaths.mkdirs(zooKeeper,siteTargetConfig);  } catch (  Exception e) {    log.error("Failed to set site info of {}. Error {}",sitePath,e);    throw e;  }}  }
class C{  private void sortAxes(){  for (int d=0; d < shared.dim; d++) {    double dist=shared.camera.squaredDistanceFromCamera(shared.layout.getNode(d).getX(),shared.layout.getNode(d).getY());    axes[d].first=-dist;    axes[d].second=d;  }  Arrays.sort(axes);  for (int i=0; i < shared.dim; i++) {    dindex[axes[i].second]=i;  }}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  private void blockRMI(String methodName,Object... args) throws InternalException {  queueTask(_dbClient,StorageSystem.class,_dispatcher,methodName,args);}  }
class C{  public boolean showTimestamp(){  return preferences.getBoolean(resources.getString(R.string.key_show_timestamp),Boolean.parseBoolean(resources.getString(R.string.default_show_timestamp)));}  }
class C{  public static void closeOutputStream(OutputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e);    }  }}  }
class C{  public void increaseBounds(Object bounds,Object add){  SpatialKey a=(SpatialKey)add;  SpatialKey b=(SpatialKey)bounds;  if (a.isNull() || b.isNull()) {    return;  }  for (int i=0; i < dimensions; i++) {    b.setMin(i,Math.min(b.min(i),a.min(i)));    b.setMax(i,Math.max(b.max(i),a.max(i)));  }}  }
class C{  private void parseContext(Attributes attributes) throws SAXException {  Mode mode=getUseMode(attributes);  md.lastMode=mode;  try {    Vector paths=Path.parse(attributes.getValue("","path"));    if (md.modeUsage != null) {      for (int i=0, len=paths.size(); i < len; i++) {        Path path=(Path)paths.elementAt(i);        if (!md.modeUsage.addContext(path.isRoot(),path.getNames(),mode))         error("duplicate_path",path.toString());      }    }  } catch (  Path.ParseException e) {    error(e.getMessageKey());  }}  }
class C{  public void rewindToPosition(int position){  if (position > bufferPos - bufferStart) {    throw new IllegalArgumentException("Position " + position + " is beyond current "+ (bufferPos - bufferStart));  }  if (position < 0) {    throw new IllegalArgumentException("Bad position " + position);  }  bufferPos=bufferStart + position;}  }
class C{  public void enableImageTransforms(boolean enable){  mTransformsEnabled=enable;  if (!mTransformsEnabled) {    resetTransformations();  }}  }
class C{  public boolean hasClusterVisibility(List<String> clusterIds){  return visibleClusters.containsAll(clusterIds);}  }
class C{  public MacroException(String message){  super(message);}  }
class C{  public static Monitor startNano(MonKey key){  return factory.startNano(key);}  }
class C{  @Override @CallSuper public void onItemReleased(int position){  if (FlexibleAdapter.DEBUG)   Log.v(TAG,"onItemReleased position=" + position + " mode="+ mAdapter.getMode()+ " actionState="+ (mActionState == ItemTouchHelper.ACTION_STATE_SWIPE ? "Swipe(1)" : "Drag(2)"));  if (!alreadySelected) {    if (shouldAddSelectionInActionMode() && mAdapter.getMode() == SelectableAdapter.MODE_MULTI) {      mAdapter.mItemLongClickListener.onItemLongClick(position);      if (mAdapter.isSelected(position)) {        toggleActivation();      }    } else     if (shouldActivateViewWhileSwiping() && itemView.isActivated()) {      mAdapter.toggleSelection(position);      toggleActivation();    } else     if (mActionState == ItemTouchHelper.ACTION_STATE_DRAG) {      mAdapter.toggleSelection(position);      if (itemView.isActivated()) {        toggleActivation();      }    }  }  mLongClickSkipped=false;  mActionState=ItemTouchHelper.ACTION_STATE_IDLE;}  }
class C{  synchronized String _get(String parameter){  if (parameter == null) {    return null;  }  if (checked)   return null;  checked=true;  String result=getProperty(parameter);  if (result == null) {    int size=parents.size();    for (int x=0; x < size; x++) {      result=((ParameterDatabase)(parents.elementAt(x)))._get(parameter);      if (result != null) {        return result;      }    }  } else {    result=result.trim();    if (result.length() == 0)     result=null;  }  return result;}  }
class C{  public void testBadStreamSize(){  Random r=new Random();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);}  }
class C{  protected Date compute(String dateString,String patternString){  String defaultLocale=Locale.getDefault().getISO3Language();  return compute(dateString,patternString,defaultLocale);}  }
class C{  public boolean avoid_deadlock(){  return soot.PhaseOptions.getBoolean(options,"avoid-deadlock");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.414 -0500",hash_original_method="753B9D60ED7A0B20EEF34D565E176B23",hash_generated_method="E47C679CD7DF7D08B5A5B970D46843F7") static public void assertEquals(String message,short expected,short actual){  assertEquals(message,new Short(expected),new Short(actual));}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getTransformedShape().contains(p);}  }
class C{  public void updateObject(SimpleBeanObject object){  if (getObject(object.getId()) == null)   return;  removeObject(object.getId());  addObject(object);}  }
class C{  public boolean isDetailedMode(){  return _isDetailedMode;}  }
class C{  public ListFilesReply(final int packetId,final int errorCode,final RemoteFileSystem fileSystem){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(fileSystem,"IE01060: File system argument can not be null");  } else {    if (fileSystem != null) {      throw new IllegalArgumentException("IE01061: File system argument must be null");    }  }  remoteFileSystem=fileSystem;}  }
class C{  public Object createHandler(Deployable deployable) throws Exception {  Object handler=getClassLoader().loadClass("org.mortbay.jetty.webapp.WebAppContext").newInstance();  handler.getClass().getMethod("setContextPath",new Class[]{String.class}).invoke(handler,new Object[]{"/" + ((WAR)deployable).getContext()});  handler.getClass().getMethod("setWar",new Class[]{String.class}).invoke(handler,new Object[]{deployable.getFile()});  handler.getClass().getMethod("setDefaultsDescriptor",String.class).invoke(handler,getFileHandler().append(getConfiguration().getHome(),"etc/webdefault.xml"));  handler.getClass().getMethod("setExtraClasspath",String.class).invoke(handler,JettyUtils.getExtraClasspath((WAR)deployable,false));  setDefaultRealm(handler);  return handler;}  }
class C{  protected void uninstallComponents(){  uninstallTabContainer();  if (scrollableTabLayoutEnabled()) {    tabPane.remove(tabScroller.viewport);    tabPane.remove(tabScroller.scrollForwardButton);    tabPane.remove(tabScroller.scrollBackwardButton);    tabScroller=null;  }}  }
class C{  public static void startActivity(Context context,Class activityClass){  context.startActivity(new Intent(context,activityClass));}  }
class C{  public String exponentTipText(){  return "The exponent value.";}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean is2D(){  return !is3D;}  }
class C{  public Object clone(){  RandomSamplingAssistant copy=(RandomSamplingAssistant)super.clone();  copy.sampler=(RandomSampler)this.sampler.clone();  return copy;}  }
class C{  public static <T>Set<T> add(Set<T> set,T e){  if (set == null) {    Set<T> ret=new HashSet<T>();    ret.add(e);    return ret;  } else {    set.add(e);    return set;  }}  }
class C{  public static void v(String msg,Throwable cause){  if (BuildConfig.DEBUG) {    Log.v(LOG_TAG,msg,cause);  }}  }
class C{  public KeyRecordIterator select(Statement stmt,Map<String,String> sortMap,Qualifier... qualifiers){  KeyRecordIterator results=null;  if (qualifiers != null && qualifiers.length > 0) {    Map<String,Object> originArgs=new HashMap<String,Object>();    originArgs.put("includeAllFields",1);    String filterFuncStr=buildFilterFunction(qualifiers);    originArgs.put("filterFuncStr",filterFuncStr);    String sortFuncStr=buildSortFunction(sortMap);    originArgs.put("sortFuncStr",sortFuncStr);    stmt.setAggregateFunction(this.getClass().getClassLoader(),AS_UTILITY_PATH,QUERY_MODULE,"select_records",Value.get(originArgs));    ResultSet resultSet=this.client.queryAggregate(null,stmt);    results=new KeyRecordIterator(stmt.getNamespace(),resultSet);  } else {    RecordSet recordSet=this.client.query(null,stmt);    results=new KeyRecordIterator(stmt.getNamespace(),recordSet);  }  return results;}  }
class C{  private static void addWhereDirectoryPath(QueryParameter newQuery,String selectedAbsolutePath){  if (FotoViewerParameter.includeSubItems) {    newQuery.addWhere(FotoSql.SQL_COL_PATH + " like ?",selectedAbsolutePath + "%").addOrderBy(FotoSql.SQL_COL_PATH);  } else {    newQuery.addWhere(SQL_EXPR_FOLDER + " =  ?",selectedAbsolutePath).addOrderBy(FotoSql.SQL_COL_PATH);  }}  }
class C{  public static void addPTModeToNetwork(TransitSchedule schedule,Network network){  log.info("... Adding mode \"pt\" to all links with public transit");  Map<Id<Link>,? extends Link> networkLinks=network.getLinks();  Set<Id<Link>> transitLinkIds=new HashSet<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : line.getRoutes().values()) {      if (transitRoute.getRoute() != null) {        transitLinkIds.addAll(getTransitRouteLinkIds(transitRoute));      }    }  }  for (  Id<Link> transitLinkId : transitLinkIds) {    Link transitLink=networkLinks.get(transitLinkId);    if (!transitLink.getAllowedModes().contains(TransportMode.pt)) {      Set<String> modes=new HashSet<>();      modes.addAll(transitLink.getAllowedModes());      modes.add(TransportMode.pt);      transitLink.setAllowedModes(modes);    }  }}  }
class C{  protected void createPTRoutes(){  log.info("Creating pt routes...");  Counter counter=new Counter("route # ");  this.router=new PTLRFastAStarLandmarksWeighting(this.network);  this.pseudoNetworkCreatorBusAndTram=new PseudoNetworkCreatorBusAndTram(this.schedule,this.network,"PseudoNetwork_");  for (  TransitLine line : this.schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      counter.incCounter();      if (route.getTransportMode().equals(BUS)) {        setMode(BUS);        routeLine(route);      } else       if (route.getTransportMode().equals(TRAM)) {        setMode(TRAM);        routeLine(route);      } else {        this.pseudoNetworkCreatorBusAndTram.createLine(route);      }    }  }  counter.printCounter();  log.info("Creating pt routes... done.");}  }
class C{  public void test_ticket_1007_boolean1() throws Exception {  new TestHelper("ticket-1007-boolean1","ticket-1007-boolean1.rq","ticket-1007-custom.trig","ticket-1007-boolean.srx",false).runTest();}  }
class C{  TimePeriod remediateTokenValidity(SamlTokenSpec spec,Date issueInstantTime){  assert spec != null;  assert issueInstantTime != null;  validateSigningCert(issueInstantTime);  Date tokenStartTime=getTokenStartTime(spec,issueInstantTime);  log.debug("Token start time will be {}",tokenStartTime);  Date tokenEndTime=getTokenEndTime(tokenStartTime,spec);  log.debug("Token end time will be {}",tokenEndTime);  return new TimePeriod(tokenStartTime,tokenEndTime);}  }
class C{  public static UpgradeSubscription parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UpgradeSubscription object=new UpgradeSubscription();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"upgradeSubscription".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (UpgradeSubscription)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list3=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","parameterValues").equals(reader.getName())) {      list3.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));      boolean loopDone3=false;      while (!loopDone3) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone3=true;        } else {          if (new javax.xml.namespace.QName("","parameterValues").equals(reader.getName())) {            list3.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));          } else {            loopDone3=true;          }        }      }      object.setParameterValues((org.oscm.xsd.ServiceParameter[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.ServiceParameter.class,list3));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static IntBuffer createIntBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 4);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asIntBuffer();}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 3) {    X.println("Usage: " + GridNioBenchmarkClient.class.getSimpleName() + " <connections count> <host> <port>");    return;  }  final int connCnt=Integer.parseInt(args[0]);  final String host=args[1];  final int port=Integer.parseInt(args[2]);  new GridNioBenchmarkClient(connCnt,host,port).run();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CheckBox(String text){  this(text,null);}  }
class C{  public synchronized void addSession(MXSession session){  mLoginStorage.addCredentials(session.getHomeserverConfig());synchronized (instance) {    mMXSessions.add(session);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static int checkTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':    return pos + 1;default :  return checkFieldTypeSignature(signature,pos);}}  }
class C{  boolean threadOwnsResources(){  DM d=getDM();  if (d != null) {    return d.getSystem().threadOwnsResources() && !AlertAppender.isThreadAlerting();  }  return false;}  }
class C{  public static boolean isDay(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,1,31);}  }
class C{  public void pop(){  mv.visitInsn(Opcodes.POP);}  }
class C{  private OfflineRegion containsInOfflineRegion(List<OfflineRegion> regions,LatLngBounds bounds){  for (  OfflineRegion offlineRegion : regions) {    if (((OfflineTilePyramidRegionDefinition)offlineRegion.getDefinition()).getBounds().equals(bounds)) {      return offlineRegion;    }  }  return null;}  }
class C{  public final Int3D discretize(final Double3D location,int discretization){  return new Int3D((int)(location.x / discretization),(int)(location.y / discretization),(int)(location.z / discretization));}  }
class C{  @Override public void beginDrawingLayer(final ILayer layer){  super.beginDrawingLayer(layer);  GamaPoint currentOffset, currentScale;  if (!(layer instanceof OverlayLayer)) {    final double currentZLayer=getMaxEnvDim() * layer.getPosition().getZ();    double z_scale;    if (layer.getExtent().getZ() > 0) {      z_scale=layer.getExtent().getZ();    } else {      z_scale=1;    }    currentOffset=new GamaPoint(getXOffsetInPixels() / (getWidth() / data.getEnvWidth()),getYOffsetInPixels() / (getHeight() / data.getEnvHeight()),currentZLayer);    currentScale=new GamaPoint(getLayerWidth() / getWidth(),getLayerHeight() / getHeight(),z_scale);  } else {    currentOffset=new GamaPoint(getXOffsetInPixels() / (getWidth() / data.getEnvWidth()),getYOffsetInPixels() / (getHeight() / data.getEnvHeight()),1);    currentScale=new GamaPoint(getLayerWidth() / getWidth(),getLayerHeight() / getHeight(),1);  }  final ModelScene scene=sceneBuffer.getSceneToUpdate();  if (scene != null) {    scene.beginDrawingLayer(layer,currentOffset,currentScale,currentAlpha);  }}  }
class C{  public boolean isMinValueSet(){  return mMinValue != MathHelper.NULL_VALUE;}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  String name=method.getName();  if (method.getDeclaringClass() == GroovyObject.class) {    if (name.equals("getMetaClass")) {      return getMetaClass();    } else     if (name.equals("setMetaClass")) {      return setMetaClass((MetaClass)args[0]);    }  }  return InvokerHelper.invokeMethod(extension,method.getName(),args);}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public void loadSections(Element sharedSections,Element perNodeSections){  List<Element> sectionList=sharedSections.getChildren("section");  if (log.isDebugEnabled()) {    log.debug("Found " + sectionList.size() + " sections");  }  SectionManager tm=InstanceManager.getDefault(jmri.SectionManager.class);  for (int i=0; i < sectionList.size(); i++) {    if (sectionList.get(i).getAttribute("systemName") == null) {      log.warn("unexpected null in systemName " + sectionList.get(i) + " "+ (sectionList.get(i)).getAttributes());      break;    }    String sysName=(sectionList.get(i)).getAttribute("systemName").getValue();    String userName=null;    if (sectionList.get(i).getAttribute("userName") != null) {      userName=(sectionList.get(i)).getAttribute("userName").getValue();    }    Section x=tm.createNewSection(sysName,userName);    if (x != null) {      loadCommon(x,(sectionList.get(i)));      if (sectionList.get(i).getAttribute("creationtype") != null) {        String creationType=sectionList.get(i).getAttribute("creationtype").getValue();        if (creationType.equals("userdefined")) {          x.setSectionType(Section.USERDEFINED);        } else         if (creationType.equals("signalmastlogic")) {          x.setSectionType(Section.SIGNALMASTLOGIC);        }      }      if (sectionList.get(i).getAttribute("fsensorname") != null) {        String forName=(sectionList.get(i)).getAttribute("fsensorname").getValue();        x.delayedSetForwardBlockingSensorName(forName);      }      if (sectionList.get(i).getAttribute("rsensorname") != null) {        String revName=sectionList.get(i).getAttribute("rsensorname").getValue();        x.delayedSetReverseBlockingSensorName(revName);      }      if (sectionList.get(i).getAttribute("fstopsensorname") != null) {        String forName=sectionList.get(i).getAttribute("fstopsensorname").getValue();        x.delayedSetForwardStoppingSensorName(forName);      }      if (sectionList.get(i).getAttribute("rstopsensorname") != null) {        String revName=sectionList.get(i).getAttribute("rstopsensorname").getValue();        x.delayedSetReverseStoppingSensorName(revName);      }      List<Element> sectionBlockList=sectionList.get(i).getChildren("blockentry");      for (int n=0; n < sectionBlockList.size(); n++) {        Element elem=sectionBlockList.get(n);        x.delayedAddBlock(elem.getAttribute("sName").getValue());      }      List<Element> sectionEntryPointList=sectionList.get(i).getChildren("entrypoint");      for (int n=0; n < sectionEntryPointList.size(); n++) {        Element elem=sectionEntryPointList.get(n);        String blockName=elem.getAttribute("toblock").getValue();        String fromBlockName=elem.getAttribute("fromblock").getValue();        String fromBlockDirection="";        if (elem.getAttribute("fromblockdirection") != null) {          fromBlockDirection=elem.getAttribute("fromblockdirection").getValue();        }        EntryPoint ep=new EntryPoint(blockName,fromBlockName,fromBlockDirection);        try {          ep.setDirection(elem.getAttribute("direction").getIntValue());        } catch (        Exception e) {          log.error("Data Conversion Exception when loading direction of entry point - " + e);        }        boolean fixed=true;        if (elem.getAttribute("fixed").getValue().equals("no")) {          fixed=false;        }        ep.setFixed(fixed);        if (ep.isForwardType()) {          x.addToForwardList(ep);        } else         if (ep.isReverseType()) {          x.addToReverseList(ep);        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.165 -0500",hash_original_method="5E0B2221F8D2EF0994AAAD177B417545",hash_generated_method="F4F65B7E9093228D7B22317C2AE4DEBF") public void tunnelProxy(HttpHost next,boolean secure,HttpParams params) throws IOException {  if (next == null) {    throw new IllegalArgumentException("Next proxy must not be null.");  }  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  this.connection.update(null,next,secure,params);  this.tracker.tunnelProxy(next,secure);}  }
class C{  public CoapObserveRelation observe(CoapHandler handler){  Request request=newGet().setURI(uri).setObserve();  return observe(request,handler);}  }
class C{  @Override public String toString(){  return "CUDA_MEMCPY3D[" + createString(",") + "]";}  }
class C{  @Override public List<Action> search(Problem problem,Queue<Node> frontier){  if (frontier instanceof PriorityQueue<?>)   nodeComparator=((PriorityQueue<Node>)frontier).comparator();  explored.clear();  frontierNodeLookup.clear();  return super.search(problem,frontier);}  }
class C{  public boolean isHorizontalCover(){  return (transitionType == TYPE_COVER || transitionType == TYPE_FAST_SLIDE) && slideType == SLIDE_HORIZONTAL;}  }
class C{  public static long parseUnsignedInt(byte[] bytes,int startIndex,int endIndex){  long l=0;  for (int i=startIndex; i < endIndex; i++) {    l<<=8;    l|=bytes[i] & 0xFF;  }  l&=0xFFFFFFFFL;  return l;}  }
class C{  protected Vector<Double> makeTestValueList(int seed,int numValues,Instances data,int attrIndex,int attrType) throws Exception {  double[] minMax=getMinimumMaximum(data,attrIndex);  double minValue=minMax[0];  double maxValue=minMax[1];  double range=maxValue - minValue;  Vector<Double> values=new Vector<Double>(numValues);  Random random=new Random(seed);  if (attrType == Attribute.NOMINAL) {    for (int i=0; i < numValues; i++) {      Double v=new Double((Math.abs(random.nextInt()) % (int)range) + (int)minValue);      values.add(v);    }  }  if (attrType == Attribute.NUMERIC) {    for (int i=0; i < numValues; i++) {      Double v=new Double(random.nextDouble() * range + minValue);      values.add(v);    }  }  return values;}  }
class C{  public void testBug32246() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  dropTable("test_table_2");  dropTable("test_table_1");  doBug32246(this.conn);  dropTable("test_table_2");  dropTable("test_table_1");  doBug32246(getConnectionWithProps("useDirectRowUnpack=false"));}  }
class C{  @Override public void statusChanged(boolean on){  if (on) {    navigationBtn.setImageResource(R.drawable.ic_directions_white_24dp);  } else {    navigationBtn.setImageResource(R.drawable.ic_navigation_white_24dp);  }}  }
class C{  public static String[][] invert(final String[][] array){  final String[][] newarray=new String[array.length][2];  for (int i=0; i < array.length; i++) {    newarray[i][0]=array[i][1];    newarray[i][1]=array[i][0];  }  return newarray;}  }
class C{  private void acquireWorkflowLockOrThrow(Workflow workflow,List<String> locks) throws LockRetryException {  _log.info("Attempting to acquire workflow lock {}",Joiner.on(',').join(locks));  _workflowService.acquireWorkflowLocks(workflow,locks,LockTimeoutValue.get(LockType.RP_CG));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.COMPLEX_TYPE__FEATURES:    getFeatures().clear();  return;case TypesPackage.COMPLEX_TYPE__SUPER_TYPES:getSuperTypes().clear();return;}super.eUnset(featureID);}  }
class C{  CompilationUnitCompletion(ICompilationUnit unit){  reset(unit);  setIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION,true);  setIgnored(CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,true);  setIgnored(CompletionProposal.KEYWORD,true);  setIgnored(CompletionProposal.LABEL_REF,true);  setIgnored(CompletionProposal.METHOD_DECLARATION,true);  setIgnored(CompletionProposal.METHOD_NAME_REFERENCE,true);  setIgnored(CompletionProposal.METHOD_REF,true);  setIgnored(CompletionProposal.CONSTRUCTOR_INVOCATION,true);  setIgnored(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER,true);  setIgnored(CompletionProposal.PACKAGE_REF,true);  setIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION,true);  setIgnored(CompletionProposal.VARIABLE_DECLARATION,true);  setIgnored(CompletionProposal.TYPE_REF,true);}  }
class C{  @NotNull public List<HTMLMasonMethodDefinition> findMethodDefinitionByNameInChildComponents(String name){  List<HTMLMasonMethodDefinition> result=new ArrayList<HTMLMasonMethodDefinition>();  Set<HTMLMasonFileImpl> recursionSet=new THashSet<HTMLMasonFileImpl>();  collectMethodDefinitionByNameInChildComponents(name,result,recursionSet);  return result;}  }
class C{  public void putStopTime(Integer key,StopTime stopTime){  stopTimes.put(key,stopTime);}  }
class C{  long readWrite(long pos,ByteBuffer b,int off,int len,boolean write){  long end=pos + len;  if (end > length) {    if (write) {      changeLength(end);    } else {      len=(int)(length - pos);    }  }  while (len > 0) {    int l=(int)Math.min(len,BLOCK_SIZE - (pos & BLOCK_SIZE_MASK));    int page=(int)(pos >>> BLOCK_SIZE_SHIFT);    expand(page);    ByteBuffer block=data[page];    int blockOffset=(int)(pos & BLOCK_SIZE_MASK);    if (write) {      ByteBuffer tmp=b.slice();      tmp.position(off);      tmp.limit(off + l);      block.position(blockOffset);      block.put(tmp);    } else {      ByteBuffer tmp=block.duplicate();      tmp.position(blockOffset);      tmp.limit(l + blockOffset);      int oldPosition=b.position();      b.position(off);      b.put(tmp);      b.position(oldPosition);    }    if (compress) {      compressLater(page);    }    off+=l;    pos+=l;    len-=l;  }  return pos;}  }
class C{  protected void writeContent(Element elem,boolean needsIndenting) throws IOException, BadLocationException {  AttributeSet attr=elem.getAttributes();  writeNonHTMLAttributes(attr);  if (needsIndenting) {    indent();  }  writeHTMLTags(attr);  text(elem);}  }
class C{  public WeakHashtable(){}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public List<JournalFile> orderFiles() throws Exception {  List<String> fileNames=fileFactory.listFiles(filesRepository.getFileExtension());  List<JournalFile> orderedFiles=new ArrayList<>(fileNames.size());  for (  String fileName : fileNames) {    SequentialFile file=fileFactory.createSequentialFile(fileName);    if (file.size() >= SIZE_HEADER) {      file.open();      try {        JournalFileImpl jrnFile=readFileHeader(file);        orderedFiles.add(jrnFile);      }  finally {        file.close();      }    } else {      ActiveMQJournalLogger.LOGGER.ignoringShortFile(fileName);      file.delete();    }  }  Collections.sort(orderedFiles,new JournalFileComparator());  return orderedFiles;}  }
class C{  static void rotateArray(double[][] a,int size,int x){  int i, j, n, start;  double t1, t2;  if (x == 0)   return;  j=start=0;  t1=a[0][0];  int len=a.length;  for (i=0; i < size; i++) {    n=(j >= x) ? j - x : j + size - x;    t2=a[n % len][n / len];    a[n % len][n / len]=t1;    t1=t2;    j=n;    if (j == start) {      start=++j;      t1=a[j % len][j / len];    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void beforeStop(){  if (readWorker != null)   readWorker.cancel();  U.closeQuiet(sock);  if (readWorker != null)   U.join(readWorker,log);}  }
class C{  public boolean includeGlobalState(){  return includeGlobalState;}  }
class C{  protected void generateMergedHeader(){  if (m_keySpec == null || m_keySpec.length() == 0) {    if (m_log != null) {      String msg=statusMessagePrefix() + "ERROR: Key fields are null!";      m_log.statusMessage(msg);      m_log.logMessage(msg);      stop();      m_busy=false;      return;    }  }  String resolvedKeySpec=m_keySpec;  try {    resolvedKeySpec=m_env.substitute(m_keySpec);  } catch (  Exception ex) {  }  String[] parts=resolvedKeySpec.split(KEY_SPEC_SEPARATOR);  if (parts.length != 2) {    if (m_log != null) {      String msg=statusMessagePrefix() + "ERROR: Invalid key specification: " + m_keySpec;      m_log.statusMessage(msg);      m_log.logMessage(msg);      stop();      m_busy=false;      return;    }  }  for (int i=0; i < 2; i++) {    String rangeS=parts[i].trim();    Range r=new Range();    r.setUpper(i == 0 ? m_headerOne.numAttributes() : m_headerTwo.numAttributes());    try {      r.setRanges(rangeS);      if (i == 0) {        m_keyIndexesOne=r.getSelection();      } else {        m_keyIndexesTwo=r.getSelection();      }    } catch (    IllegalArgumentException e) {      String[] names=rangeS.split(",");      if (i == 0) {        m_keyIndexesOne=new int[names.length];      } else {        m_keyIndexesTwo=new int[names.length];      }      for (int j=0; j < names.length; j++) {        String aName=names[j].trim();        Attribute anAtt=(i == 0) ? m_headerOne.attribute(aName) : m_headerTwo.attribute(aName);        if (anAtt == null) {          if (m_log != null) {            String msg=statusMessagePrefix() + "ERROR: Invalid key attribute name: " + aName;            m_log.statusMessage(msg);            m_log.logMessage(msg);            stop();            m_busy=false;            return;          }        }        if (i == 0) {          m_keyIndexesOne[j]=anAtt.index();        } else {          m_keyIndexesTwo[j]=anAtt.index();        }      }    }  }  if (m_keyIndexesOne == null || m_keyIndexesTwo == null) {    if (m_log != null) {      String msg=statusMessagePrefix() + "ERROR: Key fields are null!";      m_log.statusMessage(msg);      m_log.logMessage(msg);      stop();      m_busy=false;      return;    }  }  if (m_keyIndexesOne.length != m_keyIndexesTwo.length) {    if (m_log != null) {      String msg=statusMessagePrefix() + "ERROR: number of key fields are different for each input!";      m_log.statusMessage(msg);      m_log.logMessage(msg);      stop();      m_busy=false;      return;    }  }  for (int i=0; i < m_keyIndexesOne.length; i++) {    if (m_headerOne.attribute(m_keyIndexesOne[i]).type() != m_headerTwo.attribute(m_keyIndexesTwo[i]).type()) {      if (m_log != null) {        String msg=statusMessagePrefix() + "ERROR: type of key corresponding key fields differ: " + "input 1 - "+ Attribute.typeToStringShort(m_headerOne.attribute(m_keyIndexesOne[i]))+ " input 2 - "+ Attribute.typeToStringShort(m_headerTwo.attribute(m_keyIndexesTwo[i]));        m_log.statusMessage(msg);        m_log.logMessage(msg);        stop();        m_busy=false;        return;      }    }  }  ArrayList<Attribute> newAtts=new ArrayList<Attribute>();  Set<String> nameLookup=new HashSet<String>();  for (int i=0; i < m_headerOne.numAttributes(); i++) {    newAtts.add((Attribute)m_headerOne.attribute(i).copy());    nameLookup.add(m_headerOne.attribute(i).name());  }  for (int i=0; i < m_headerTwo.numAttributes(); i++) {    String name=m_headerTwo.attribute(i).name();    if (nameLookup.contains(name)) {      name=name + "_2";    }    newAtts.add(m_headerTwo.attribute(i).copy(name));  }  m_mergedHeader=new Instances(m_headerOne.relationName() + "+" + m_headerTwo.relationName(),newAtts,0);  m_ie.setStructure(m_mergedHeader);  notifyInstanceListeners(m_ie);  m_stringAttsPresent=false;  if (m_mergedHeader.checkForStringAttributes()) {    m_stringAttsPresent=true;    m_headerPool=new ArrayList<Instances>();    m_count=new AtomicInteger();    for (int i=0; i < 10; i++) {      try {        m_headerPool.add((Instances)(new SerializedObject(m_mergedHeader)).getObject());      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  public boolean isEmpty(){  return timeWindow.isEmpty();}  }
class C{  public int byteSize(){  return this.data.length;}  }
class C{  public long count(){  return count;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getRootPanel().isAcceleratedDrawing());}  }
class C{  public Builder(int nodeCount,Path baseDir){  this.nodeCount=nodeCount;  this.baseDir=baseDir;}  }
class C{  public UpdateInventoryOutput replyOk(){  UpdateInventoryOutput ok=new UpdateInventoryOutput();  ok.setCode("OK");  return ok;}  }
class C{  public static KeyStoreType detectKeyStoreType(InputStream is) throws IOException {  byte[] contents=ReadUtil.readFully(is);  DataInputStream dis=null;  try {    dis=new DataInputStream(new ByteArrayInputStream(contents));    if (dis.available() < 4) {      return null;    }    int i1=dis.readInt();    if (i1 == JKS_MAGIC_NUMBER) {      return JKS;    }    if (i1 == JCEKS_MAGIC_NUMBER) {      return JCEKS;    }    if ((i1 == 0) || (i1 == 1) || (i1 == 2)) {      if (contents.length < 26) {        return null;      }      dis.skip(contents.length - 25);      if (dis.readByte() == 0) {        if (i1 == 1) {          return BKS_V1;        } else {          return BKS;        }      } else {        return UBER;      }    }  }  finally {    IOUtils.closeQuietly(dis);  }  ASN1Primitive pfx=null;  try {    pfx=ASN1Primitive.fromByteArray(contents);  } catch (  IOException e) {    return null;  }  if ((pfx != null) && (pfx instanceof ASN1Sequence)) {    ASN1Sequence sequence=(ASN1Sequence)pfx;    if ((sequence.size() == 2) || (sequence.size() == 3)) {      ASN1Encodable firstComponent=sequence.getObjectAt(0);      if (firstComponent instanceof ASN1Integer) {        ASN1Integer version=(ASN1Integer)firstComponent;        if (version.getValue().intValue() == 3) {          return PKCS12;        }      }    }  }  return null;}  }
class C{  public String classifiersTipText(){  return "The classifiers to evaluate.";}  }
class C{  public static void main(String[] args){  rGen=new Random();  rGen.setSeed(1);  int numSearches=50;  int NUM_TRIALS=100;  int scale=1;  System.out.println("n\tRec(2)\tDbl(2)\tRec(10)\tDbl(10)");  for (int n=4; n <= 131072; n*=2) {    double dr[]=new double[2];    double r[]=new double[2];    for (int d=2; d <= 10; d*=5) {      for (int t=1; t <= NUM_TRIALS; t++) {        IMultiPoint[] points=randomPoints(n,d,scale);        System.gc();        IMultiPoint[] searchPoints=randomPoints(numSearches,d,scale);        KDTree tree=KDFactory.generate(points);        DimensionalNode.numDoubleRecursions=0;        DimensionalNode.numRecursions=0;        for (        IMultiPoint imp : searchPoints) {          tree.nearest(imp);        }        dr[d / 10]=DimensionalNode.numDoubleRecursions / (1.0 * numSearches);        r[d / 10]=DimensionalNode.numRecursions / (1.0 * numSearches);      }    }    System.out.println(n + "\t" + r[0]+ "\t"+ dr[0]+ "\t"+ r[1]+ "\t"+ dr[1]);  }}  }
class C{  public void beginProcessTokens(){}  }
class C{  @Override public void createTargetsForExistingSource(String fs,List<FileDescriptor> fileDescriptors,String taskId) throws ControllerException {  Workflow workflow=null;  List<URI> fsUris=FileDescriptor.getFileSystemURIs(fileDescriptors);  CreateMirrorFileSystemsCompleter completer=new CreateMirrorFileSystemsCompleter(fsUris,taskId,fileDescriptors);  try {    workflow=_workflowService.getNewWorkflow(this,CREATE_MIRROR_FILESYSTEMS_WF_NAME,false,taskId);    String waitFor=null;    s_logger.info("Generating steps for creating mirror filesystems...");    waitFor=_fileDeviceController.addStepsForCreateFileSystems(workflow,waitFor,fileDescriptors,taskId);    waitFor=_fileReplicationDeviceController.addStepsForCreateFileSystems(workflow,waitFor,fileDescriptors,taskId);    String successMessage="Change filesystems vpool successful for: " + fs;    Object[] callbackArgs=new Object[]{fsUris};    workflow.executePlan(completer,successMessage,new WorkflowCallback(),callbackArgs,null,null);  } catch (  Exception ex) {    s_logger.error("Could not change the filesystem vpool: " + fs,ex);    releaseWorkflowLocks(workflow);    String opName=ResourceOperationTypeEnum.CHANGE_FILE_SYSTEM_VPOOL.getName();    ServiceError serviceError=DeviceControllerException.errors.createFileSharesFailed(fsUris.toString(),opName,ex);    completer.error(s_dbClient,_locker,serviceError);  }}  }
class C{  public final void goForward(int variation){  goForward(variation,true);}  }
class C{  public static String sanitize(final String input){  if (input == null) {    return "";  }  String s="";  for (int i=0; i < input.length(); i++) {    char c=input.charAt(i);    if (c == '*') {      s+="\\2a";    } else     if (c == '(') {      s+="\\28";    } else     if (c == ')') {      s+="\\29";    } else     if (c == '\\') {      s+="\\5c";    } else     if (c == '\u0000') {      s+="\\00";    } else     if (c <= 0x7f) {      s+=String.valueOf(c);    } else     if (c >= 0x080) {      try {        byte[] utf8bytes=String.valueOf(c).getBytes("UTF8");        for (        byte b : utf8bytes) {          s+=String.format("\\%02x",b);        }      } catch (      UnsupportedEncodingException e) {      }    }  }  return s;}  }
class C{  public void testChooseClientAlias_Combinations() throws Exception {  test_ChooseClientAlias_KeyType("RSA","RSA","RSA",true);  test_ChooseClientAlias_KeyType("RSA","EC","RSA",true);  test_ChooseClientAlias_KeyType("RSA","EC","EC",false);  test_ChooseClientAlias_KeyType("EC","RSA","EC_RSA",true);  test_ChooseClientAlias_KeyType("EC","EC","EC_RSA",false);  test_ChooseClientAlias_KeyType("EC","EC","EC_EC",true);  test_ChooseClientAlias_KeyType("EC","RSA","EC_EC",false);  test_ChooseClientAlias_KeyType("EC","RSA","RSA",false);}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider02(){  try {    TrustManagerFactory.getInstance(null,getDefaultProvider());    fail("");  } catch (  NoSuchAlgorithmException expected) {  }catch (  NullPointerException expected) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i],getDefaultProvider());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
