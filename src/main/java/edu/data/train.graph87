class C{  Object[] redoAction(){  if (!canRedo())   return null;  return actionList.get(actionsIndex++);}  }
class C{  public DoubleFactor(){  matrix=new HashMap<Assignment,double[]>();}  }
class C{  public static boolean isPreMarket(ZonedDateTime date){  if (getTradingDayStart(date).isAfter(date)) {    return true;  }  return false;}  }
class C{  public static void printf(String fmt,long x){  System.out.print(new Format(fmt).format(x));}  }
class C{  public Integer[] createFullBigArray(int length){  Integer[] fullSelection=new Integer[length];  for (int i=0; i < length; i++) {    fullSelection[i]=i;  }  return fullSelection;}  }
class C{  private void showNotification(String text){  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,Controller.class),0);  Notification.Builder noteBuilder=new Notification.Builder(this).setSmallIcon(R.drawable.stat_sample).setTicker(text).setWhen(System.currentTimeMillis()).setContentTitle(getText(R.string.service_start_arguments_label)).setContentText(text).setContentIntent(contentIntent);  noteBuilder.setOngoing(true);  mNM.notify(R.string.service_created,noteBuilder.build());}  }
class C{  public DirtyFlagMap(final int initialCapacity){  map=new HashMap<K,V>(initialCapacity);}  }
class C{  public X509CRLHolder(CertificateList x509CRL){  this.x509CRL=x509CRL;  this.extensions=x509CRL.getTBSCertList().getExtensions();  this.isIndirect=isIndirectCRL(extensions);  this.issuerName=new GeneralNames(new GeneralName(x509CRL.getIssuer()));}  }
class C{  public void shutdown(){}  }
class C{  public static boolean isRelevantResourceChange(IResourceDelta delta){  if (delta == null) {    return false;  }  int relevantChanges=IResourceDelta.CONTENT | IResourceDelta.DESCRIPTION | IRESOURCEDELTA_LOCAL_CHANGED| IResourceDelta.OPEN| IResourceDelta.REPLACED| IResourceDelta.TYPE;  if (delta.getKind() != IResourceDelta.CHANGED || (delta.getFlags() & relevantChanges) != 0) {    return true;  }  return false;}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.TENANT_ADMIN}) public TaskResourceRep deactivateVcenter(@PathParam("id") URI id,@DefaultValue("false") @QueryParam("detach-storage") boolean detachStorage) throws DatabaseException {  if (ComputeSystemHelper.isVcenterInUse(_dbClient,id) && !detachStorage) {    throw APIException.badRequests.resourceHasActiveReferences(Vcenter.class.getSimpleName(),id);  } else {    Vcenter vcenter=queryObject(Vcenter.class,id,true);    verifyAuthorizedSystemAdminOrTenantOrgUser(_permissionsHelper.convertToACLEntries(vcenter.getAcls()));    checkIfOtherTenantsUsingTheVcenter(vcenter);    String taskId=UUID.randomUUID().toString();    Operation op=_dbClient.createTaskOpStatus(Vcenter.class,vcenter.getId(),taskId,ResourceOperationTypeEnum.DELETE_VCENTER);    ComputeSystemController controller=getController(ComputeSystemController.class,null);    controller.detachVcenterStorage(vcenter.getId(),true,taskId);    auditOp(OperationTypeEnum.DELETE_VCENTER,true,null,vcenter.auditParameters());    TaskResourceRep taskResourceRep=toTask(vcenter,taskId,op);    updateTaskTenant(taskResourceRep);    return taskResourceRep;  }}  }
class C{  public static void handleFilteredAttributes(Field component,Datasource datasource,MetaPropertyPath mpp){  if (component.isRequired() && datasource.getState() == Datasource.State.VALID && datasource.getItem() != null && mpp.getMetaProperty().getRange().isClass()) {    Entity targetItem=datasource.getItem();    MetaProperty[] propertiesChain=mpp.getMetaProperties();    if (propertiesChain.length > 1) {      List<String> basePropertiesList=Arrays.stream(propertiesChain).limit(propertiesChain.length - 1).map(null).collect(Collectors.toList());      String basePropertyItem=StringUtils.join(basePropertiesList,'.');      targetItem=datasource.getItem().getValueEx(basePropertyItem);    }    if (targetItem instanceof BaseGenericIdEntity) {      String metaPropertyName=mpp.getMetaProperty().getName();      Object value=targetItem.getValue(metaPropertyName);      BaseGenericIdEntity baseGenericIdEntity=(BaseGenericIdEntity)targetItem;      String[] filteredAttributes=getFilteredAttributes(baseGenericIdEntity);      if (value == null && filteredAttributes != null && ArrayUtils.contains(filteredAttributes,metaPropertyName)) {        component.setRequired(false);      }    }  }}  }
class C{  public StreamInfoManager(TwitchApi api,StreamInfoListener listener){  this.listener=listener;  this.api=api;  pendingRequests=new HashMap<>();  invalidStreamInfo=new StreamInfo("invalid",listener);  invalidStreamInfo.setRequested();}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  Number dataValue=dataset.getValue(row,column);  if (dataValue == null) {    return;  }  double value=dataValue.doubleValue();  Comparable group=this.seriesToGroupMap.getGroup(dataset.getRowKey(row));  PlotOrientation orientation=plot.getOrientation();  double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,row,column);  double positiveBase=0.0;  double negativeBase=0.0;  for (int i=0; i < row; i++) {    if (group.equals(this.seriesToGroupMap.getGroup(dataset.getRowKey(i)))) {      Number v=dataset.getValue(i,column);      if (v != null) {        double d=v.doubleValue();        if (d > 0) {          positiveBase=positiveBase + d;        } else {          negativeBase=negativeBase + d;        }      }    }  }  double translatedBase;  double translatedValue;  boolean positive=(value > 0.0);  boolean inverted=rangeAxis.isInverted();  RectangleEdge barBase;  if (orientation == PlotOrientation.HORIZONTAL) {    if (positive && inverted || !positive && !inverted) {      barBase=RectangleEdge.RIGHT;    } else {      barBase=RectangleEdge.LEFT;    }  } else {    if (positive && !inverted || !positive && inverted) {      barBase=RectangleEdge.BOTTOM;    } else {      barBase=RectangleEdge.TOP;    }  }  RectangleEdge location=plot.getRangeAxisEdge();  if (value > 0.0) {    translatedBase=rangeAxis.valueToJava2D(positiveBase,dataArea,location);    translatedValue=rangeAxis.valueToJava2D(positiveBase + value,dataArea,location);  } else {    translatedBase=rangeAxis.valueToJava2D(negativeBase,dataArea,location);    translatedValue=rangeAxis.valueToJava2D(negativeBase + value,dataArea,location);  }  double barL0=Math.min(translatedBase,translatedValue);  double barLength=Math.max(Math.abs(translatedValue - translatedBase),getMinimumBarLength());  Rectangle2D bar;  if (orientation == PlotOrientation.HORIZONTAL) {    bar=new Rectangle2D.Double(barL0,barW0,barLength,state.getBarWidth());  } else {    bar=new Rectangle2D.Double(barW0,barL0,state.getBarWidth(),barLength);  }  getBarPainter().paintBar(g2,this,row,column,bar,barBase);  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(value < 0.0));  }  if (state.getInfo() != null) {    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addItemEntity(entities,dataset,row,column,bar);    }  }}  }
class C{  public static void print(){  out.flush();}  }
class C{  protected void checkForValue(String check,boolean checkExists) throws Exception {  setContainer(createContainer(createConfiguration(ConfigurationType.STANDALONE)));  getInstalledLocalContainer().getConfiguration().configure(getInstalledLocalContainer());  File conf=new File(getInstalledLocalContainer().getConfiguration().getHome(),"conf");  if (!conf.isDirectory()) {    throw new IllegalArgumentException(conf + " is not a directory");  }  List<File> serverXmlFiles=new ArrayList<File>();  if (getContainer().getId().equals("jonas4x")) {    serverXmlFiles.add(new File(conf,"server.xml"));  } else   if (getContainer().getId().equals("jonas5x")) {    for (    File confFile : conf.listFiles()) {      if (confFile.getName().startsWith("tomcat") && confFile.getName().endsWith(".xml")) {        serverXmlFiles.add(confFile);      }    }    File deploy=new File(getInstalledLocalContainer().getConfiguration().getHome(),"deploy");    if (deploy.isDirectory()) {      for (      File deployFile : deploy.listFiles()) {        if (deployFile.getName().startsWith("tomcat") && deployFile.getName().endsWith(".xml")) {          serverXmlFiles.add(deployFile);        }      }    }  }  if (serverXmlFiles.isEmpty()) {    throw new IllegalArgumentException("Unknown container: " + getContainer().getId());  }  for (  File serverXmlFile : serverXmlFiles) {    BufferedReader reader=new BufferedReader(new FileReader(serverXmlFile));    try {      String line;      while ((line=reader.readLine()) != null) {        if (checkExists) {          if (line.contains(check)) {            return;          }        } else {          assertTrue("Line in file " + serverXmlFile + " contains "+ check,!line.contains(check));        }      }    }  finally {      reader.close();    }  }  if (checkExists) {    fail("None of the files " + serverXmlFiles + " contains "+ check);  }}  }
class C{  public boolean isCritical(){  return critical;}  }
class C{  static void runBenchmarks(){  harness.runBenchmarks(reporter,verbose);}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public void init(ProgressThread thread){  ((CardLayout)(getLayout())).first(this);  loading=true;  thread.addProgressThreadListener(this);}  }
class C{  private float handleRun(int start,int measureLimit,int limit,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  if (start == measureLimit) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    if (fmi != null) {      expandMetricsFromPaint(fmi,wp);    }    return 0f;  }  if (mSpanned == null) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    final int mlimit=measureLimit;    return handleText(wp,start,mlimit,start,limit,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);  }  mMetricAffectingSpanSpanSet.init(mSpanned,mStart + start,mStart + limit);  mCharacterStyleSpanSet.init(mSpanned,mStart + start,mStart + limit);  final float originalX=x;  for (int i=start, inext; i < measureLimit; i=inext) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    inext=mMetricAffectingSpanSpanSet.getNextTransition(mStart + i,mStart + limit) - mStart;    int mlimit=Math.min(inext,measureLimit);    ReplacementSpan replacement=null;    for (int j=0; j < mMetricAffectingSpanSpanSet.numberOfSpans; j++) {      if ((mMetricAffectingSpanSpanSet.spanStarts[j] >= mStart + mlimit) || (mMetricAffectingSpanSpanSet.spanEnds[j] <= mStart + i))       continue;      MetricAffectingSpan span=mMetricAffectingSpanSpanSet.spans[j];      if (span instanceof ReplacementSpan) {        replacement=(ReplacementSpan)span;      } else {        span.updateDrawState(wp);      }    }    if (replacement != null) {      x+=handleReplacement(replacement,wp,i,mlimit,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);      continue;    }    for (int j=i, jnext; j < mlimit; j=jnext) {      jnext=mCharacterStyleSpanSet.getNextTransition(mStart + j,mStart + mlimit) - mStart;      wp.set(mPaint);      for (int k=0; k < mCharacterStyleSpanSet.numberOfSpans; k++) {        if ((mCharacterStyleSpanSet.spanStarts[k] >= mStart + jnext) || (mCharacterStyleSpanSet.spanEnds[k] <= mStart + j))         continue;        CharacterStyle span=mCharacterStyleSpanSet.spans[k];        span.updateDrawState(wp);      }      x+=handleText(wp,j,jnext,i,inext,runIsRtl,c,x,top,y,bottom,fmi,needWidth || jnext < measureLimit);    }  }  return x - originalX;}  }
class C{  public SolrQuery addFacetField(String... fields){  add(FacetParams.FACET_FIELD,fields);  this.set(FacetParams.FACET,true);  return this;}  }
class C{  public StyledSplitPaneDivider(StyledSplitPaneUI ui,Style style){  super(ui);  this.style=style;  addMouseListener(new DividerMouseListener(this));}  }
class C{  public ReplyProcessor21(InternalDistributedSystem system,InternalDistributedMember member,CancelCriterion cancelCriterion){  this(system,Collections.singleton(member),cancelCriterion);}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY()); else   m_adaptee.popupMenu.setVisible(false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.108 -0500",hash_original_method="38A4F60AF5C7022C0469BD89E2BC1895",hash_generated_method="045043271B86F52234688B4AF50F6AD1") public CompletionInfo(long id,int index,CharSequence text){  mId=id;  mPosition=index;  mText=text;  mLabel=null;}  }
class C{  protected Position computeIntersection(AbstractShape shape,Point screenPoint){  try {    Terrain terrain=this.wwd.getSceneController().getDrawContext().getTerrain();    Line line=this.wwd.getView().computeRayFromScreenPoint(screenPoint.x,screenPoint.y);    List<Intersection> intersections=shape.intersect(line,terrain);    if (intersections != null && !intersections.isEmpty())     return intersections.get(0).getIntersectionPosition();  } catch (  InterruptedException ignored) {  }  return null;}  }
class C{  private synchronized void clear(){  snaps=null;  this.notHeardFrom=new ArrayList();  this.heardFrom=new ArrayList();}  }
class C{  public void testSetF2(){  boolean f2=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF2(f2);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup1 needs to be implemented if invoked");}  }
class C{  public static byte[] decode(final char[] data){  int tempLen=data.length;  for (int ix=0; ix < data.length; ix++) {    if ((data[ix] > 255) || (codes[data[ix]] < 0)) {      --tempLen;    }  }  int len=(tempLen / 4) * 3;  if ((tempLen % 4) == 3) {    len+=2;  }  if ((tempLen % 4) == 2) {    len+=1;  }  final byte[] out=new byte[len];  int shift=0;  int accum=0;  int index=0;  for (int ix=0; ix < data.length; ix++) {    final int value=(data[ix] > 255) ? -1 : codes[data[ix]];    if (value >= 0) {      accum<<=6;      shift+=6;      accum|=value;      if (shift >= 8) {        shift-=8;        out[index++]=(byte)((accum >> shift) & 0xff);      }    }  }  if (index != out.length) {    throw new Error("Miscalculated data length (wrote " + index + " instead of "+ out.length+ ")");  }  return out;}  }
class C{  public RxPeople seed(String seed){  mSeed=seed;  return mRxPeople;}  }
class C{  @Override public Void visitPackage(PackageElement e,Void p){  return null;}  }
class C{  public TFloatHashSet(TFloatHashingStrategy strategy){  super(strategy);}  }
class C{  public static String displayScriptHistory(List<String> scriptHistory){  StringBuilder sb=new StringBuilder();  sb.append("MLContext Script History:\n");  if (scriptHistory.isEmpty()) {    sb.append("None");  }  int i=1;  for (  String history : scriptHistory) {    sb.append("--------------------------------------------\n");    sb.append("#" + (i++) + ":\n");    sb.append(history);  }  return sb.toString();}  }
class C{  private ProcessBuilder createProcessBuilder(){  String sep=":";  String ggClsPath=HadoopJob.class.getProtectionDomain().getCodeSource().getLocation().getPath() + sep + HadoopJobTracker.class.getProtectionDomain().getCodeSource().getLocation().getPath()+ sep+ ConcurrentHashMap8.class.getProtectionDomain().getCodeSource().getLocation().getPath();  ProcessBuilder res=new ProcessBuilder();  res.environment().put("HADOOP_HOME",hadoopHome);  res.environment().put("HADOOP_CLASSPATH",ggClsPath);  res.environment().put("HADOOP_CONF_DIR",testWorkDir.getAbsolutePath());  res.redirectErrorStream(true);  return res;}  }
class C{  private static void onReturnPressed(KeyEvent event) throws BadLocationException {  JEditorPane editor=(JEditorPane)event.getSource();  Document doc=editor.getDocument();  int pos=editor.getCaretPosition();  String indent=getIndent(doc,pos);  Element root=doc.getDefaultRootElement();  Element elem=root.getElement(root.getElementIndex(pos));  int start=elem.getStartOffset();  String line=doc.getText(start,pos - start);  if (isStartElement(line)) {    indent+="\t";  }  doc.insertString(pos,"\n" + indent,null);  event.consume();}  }
class C{  private void applyOppositeBicyclePermissions(Way way,EnumSet<EdgeStore.EdgeFlag> backward){  String cyclewayLeftTagValue=way.getTag("cycleway:left");  String cyclewayRightTagValue=way.getTag("cycleway:right");  String cyclewayTagValue=way.getTag("cycleway");  boolean addedBikePermissions=false;  if (cyclewayTagValue != null && cyclewayTagValue.startsWith("opposite")) {    backward.add(EdgeStore.EdgeFlag.ALLOWS_BIKE);    addedBikePermissions=true;  } else   if (cyclewayRightTagValue != null) {    if (cyclewayRightTagValue.startsWith("opposite")) {      backward.add(EdgeStore.EdgeFlag.ALLOWS_BIKE);      addedBikePermissions=true;    }  }  if (!addedBikePermissions && cyclewayLeftTagValue != null) {    if (cyclewayLeftTagValue.startsWith("opposite")) {      backward.add(EdgeStore.EdgeFlag.ALLOWS_BIKE);    }  }}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public void processTuple(String line) throws RuntimeException {  if (pattern == null) {    throw new RuntimeException("regex has not been set");  }  Matcher matcher=pattern.matcher(line);  if (matcher.matches()) {    Map<String,Object> outputMap=new HashMap<String,Object>();    for (    String key : pattern.groupNames()) {      outputMap.put(key,matcher.group(key));    }    output.emit(outputMap);  }}  }
class C{  public static AsyncUpgradeSubscriptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncUpgradeSubscriptionE object=new AsyncUpgradeSubscriptionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","asyncUpgradeSubscription").equals(reader.getName())) {          object.setAsyncUpgradeSubscription(org.oscm.xsd.AsyncUpgradeSubscription.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public String readString(){  if (isEmpty())   throw new RuntimeException("Reading from empty input stream");  StringBuilder sb=new StringBuilder();  while (!isEmpty()) {    char c=readChar();    sb.append(c);  }  return sb.toString();}  }
class C{  MP4Reader(){}  }
class C{  public static List<Entry> loadEntriesFromAssets(AssetManager am,String path){  List<Entry> entries=new ArrayList<Entry>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(am.open(path),"UTF-8"));    String line=reader.readLine();    while (line != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(vals,Integer.parseInt(split[split.length - 1])));      }      line=reader.readLine();    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        Log.e(LOG,e.toString());      }    }  }  return entries;}  }
class C{  protected List<Fact> createActivityControl(MAcctSchema as){  final ArrayList<Fact> facts=new ArrayList<Fact>();  final Fact fact=new Fact(this,as,Fact.POST_Actual);  facts.add(fact);  final MProduct product=m_cc.getM_Product();  MAccount debit=m_line.getAccount(ProductCost.ACCTTYPE_P_WorkInProcess,as);  for (  MCostDetail cd : m_line.getCostDetail(as,false)) {    BigDecimal costs=cd.getAmt().add(cd.getCurrentCostPriceLL()).negate();    if (costs.signum() == 0)     continue;    MCostElement element=MCostElement.get(getCtx(),cd.getM_CostElement_ID());    MAccount credit=m_line.getAccount(as,element);    createLines(element,as,fact,product,debit,credit,costs,m_cc.getMovementQty());  }  return facts;}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1){  return of(Ordering.natural(),k1,v1);}  }
class C{  private float safeRate(long divident,long divisor,int defaultValue){  if (divisor == 0)   return defaultValue; else   return 100F * divident / divisor;}  }
class C{  public void moveToCurrentRow() throws SQLException {  checkState();  rs.moveToCurrentRow();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.donations_activity);  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();  DonationsFragment donationsFragment;  donationsFragment=DonationsFragment.newInstance(false,true,GOOGLE_PUBKEY,GOOGLE_CATALOG,getResources().getStringArray(R.array.donation_google_catalog_values),false,null,null,null,false,null,null,false,null);  ft.replace(R.id.donations_activity_container,donationsFragment,"donationsFragment");  ft.commit();}  }
class C{  @Nullable public static PyCallExpression findCallExpParent(@NotNull final PsiElement anchor,@NotNull final FQNamesProvider functionName){  final PsiElement parent=PsiTreeUtil.findFirstParent(anchor,new MyFunctionCondition(functionName));  if (parent instanceof PyCallExpression) {    return (PyCallExpression)parent;  }  return null;}  }
class C{  private static int addAndCheck(final int x,final int y){  final long s=(long)x + (long)y;  if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {    throw new ArithmeticException("overflow: add");  }  return (int)s;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  protected void loadChars(AbstractMRReply msg,DataInputStream istream) throws java.io.IOException {  byte char1=readByteProtected(istream);  if (logDebug) {    log.debug("loadChars: " + char1);  }  if ((char1 & 0xFF) == Constants.HEAD_STX) {    msg.setElement(0,char1);    byte char2=readByteProtected(istream);    if ((char2 & 0xFF) == Constants.FUNCTION_REQ_STD) {      msg.setElement(1,char2);      byte addr1=readByteProtected(istream);      msg.setElement(2,addr1);      byte addr2=readByteProtected(istream);      msg.setElement(3,addr2);      byte addr3=readByteProtected(istream);      msg.setElement(4,addr3);      byte flag1=readByteProtected(istream);      msg.setElement(5,flag1);      int bufsize=2 + 1;      if ((flag1 & Constants.FLAG_BIT_STDEXT) != 0x00) {        bufsize=14 + 1;      }      for (int i=6; i < (5 + bufsize); i++) {        byte byt=readByteProtected(istream);        msg.setElement(i,byt);      }    } else     if ((char2 & 0xFF) == Constants.FUNCTION_REQ_X10) {      msg.setElement(1,char2);      byte addrx1=readByteProtected(istream);      msg.setElement(2,addrx1);      byte cmd1=readByteProtected(istream);      msg.setElement(3,cmd1);      byte ack1=readByteProtected(istream);      msg.setElement(4,ack1);    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_STD) {      msg.setElement(1,char2);      for (int i=2; i < (2 + 9); i++) {        byte byt=readByteProtected(istream);        msg.setElement(2,byt);      }    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_EXT) {      msg.setElement(1,char2);      for (int i=2; i < (2 + 23); i++) {        byte byt=readByteProtected(istream);        msg.setElement(2,byt);      }    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_X10) {      msg.setElement(1,char2);      byte rawX10data=readByteProtected(istream);      msg.setElement(2,rawX10data);      byte x10Flag=readByteProtected(istream);      msg.setElement(3,x10Flag);      if ((x10Flag & 0xFF) == Constants.FLAG_X10_RECV_CMD) {        if (logDebug) {          log.debug("loadChars: X10 Command Poll Received " + X10Sequence.houseValueToText((rawX10data & 0xF0) >> 4) + " "+ X10Sequence.functionName((rawX10data & 0x0F)));        }      } else {        if (logDebug) {          log.debug("loadChars: X10 Unit Poll Received " + X10Sequence.houseValueToText((rawX10data & 0xF0) >> 4) + " "+ X10Sequence.formatCommandByte(rawX10data));        }      }    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_BUTTON) {      msg.setElement(1,char2);      byte dat=readByteProtected(istream);      msg.setElement(2,dat);    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_BUTTON_RESET) {      msg.setElement(1,char2);    } else {      msg.setElement(1,char2);      if (logDebug) {        log.debug("loadChars: Unknown cmd byte " + char2);      }    }  }}  }
class C{  @Override public int hashCode(){  return lowerBound.hashCode() * 31 + upperBound.hashCode();}  }
class C{  public AsyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  public void actionPerformed(ActionEvent e){  navigateToNextDemo();}  }
class C{  public void print(long lnum){  print(String.valueOf(lnum));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(5);  value=textNode.getNodeValue();  assertEquals("textSplitTextTwoAssert","Roger",value);}  }
class C{  public static String[] lsDirectory(String resourceDir,String dirListingFile) throws IOException {  String dir=localResourceDir + resourceDir;  if (!new File(dir).exists()) {    if (dirListingFile == null) {      log.error("Could not list dir {} from classpath without a listing file.",resourceDir);      System.exit(-1);    }    log.debug("Loading dir listing {} from classpath.",dirListingFile);    InputStream stream=loadResource(resourceDir + "/" + dirListingFile);    InFile in=new InFile(stream);    String line;    List<String> files=new ArrayList<>();    while ((line=in.readLine()) != null) {      files.add(line);    }    in.close();    return files.toArray(new String[files.size()]);  } else {    log.debug("Found dir {} in local path.",resourceDir);    String[] files=new File(dir).list();    for (int i=0; i < files.length; i++) {      files[i]=resourceDir + "/" + files[i];    }    return files;  }}  }
class C{  public List<BackupSetInfo> listBackup(){  checkOnStandby();  log.info("Listing backup sets");  return listBackup(true);}  }
class C{  private void nextGeneration(){  trip.signalAll();  count=parties;  generation=new Generation();}  }
class C{  static String determineResourceName(AttachmentResource attachmentResource,boolean includeExtension){  final String datasourceName=attachmentResource.getDataSource().getName();  String resourceName;  if (!valueNullOrEmpty(attachmentResource.getName())) {    resourceName=attachmentResource.getName();  } else   if (!valueNullOrEmpty(datasourceName)) {    resourceName=datasourceName;  } else {    resourceName="resource" + UUID.randomUUID();  }  if (includeExtension && !valueNullOrEmpty(datasourceName)) {    String possibleFilename=datasourceName;    if (possibleFilename.contains(".")) {      String extension=possibleFilename.substring(possibleFilename.lastIndexOf("."),possibleFilename.length());      if (!resourceName.endsWith(extension)) {        resourceName+=extension;      }    }  } else   if (!includeExtension && resourceName.contains(".") && resourceName.equals(datasourceName)) {    String extension=resourceName.substring(resourceName.lastIndexOf("."),resourceName.length());    resourceName=resourceName.replace(extension,"");  }  return resourceName;}  }
class C{  public String mapFieldName(String owner,String name,String desc){  return name;}  }
class C{  public void onUpOrCancel(long time){  if (mModelSelectorButton.onUpOrCancel() && mTabModelSelector != null) {    getActiveStripLayoutHelper().finishAnimation();    if (!mModelSelectorButton.isVisible())     return;    mTabModelSelector.selectModel(!mTabModelSelector.isIncognitoSelected());    return;  }  getActiveStripLayoutHelper().onUpOrCancel(time);}  }
class C{  @Override public IContainer reverse(final IScope scope) throws GamaRuntimeException {  return new GamaPair(value,key,type.getContentType(),type.getKeyType());}  }
class C{  @Nullable public GridCacheMvccCandidate remove(GridCacheVersion ver){  remove0(ver,false);  return anyOwner();}  }
class C{  public void addA_Qty_Current(BigDecimal qty){  setA_QTY_Current(getA_QTY_Current().add(qty));}  }
class C{  public PayloadAttributeImpl(BytesRef payload){  this.payload=payload;}  }
class C{  public static <T extends Annotation>void forEachAnnotatedField(Class<? extends T> annotation,Class<?> clazz,BiConsumer<Field,T> action){  Arrays.stream(clazz.getDeclaredFields()).filter(null).forEachOrdered(null);}  }
class C{  public final void warn(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {    log(SimpleLog.LOG_LEVEL_WARN,message,null);  }}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  handler.popElemTemplateElement();}  }
class C{  public static String format(String s){  List<String> color_repl=new ArrayList<>();  Matcher m=colorPattern.matcher(s);  while (m.find())   color_repl.add(m.group(1));  String[] split=s.split(colorPattern.pattern());  String total="";  for (int i=0; i < split.length; i++) {    if (i >= color_repl.size())     total+=split[i]; else {      total+=colorize(split[i],Colors.get(color_repl.get(i)));    }  }  return total;}  }
class C{  public T caseVariableDefinition(VariableDefinition object){  return null;}  }
class C{  protected String makeAnnotationText(LayerList layers){  StringBuilder text=new StringBuilder();  Color color;  int i=0;  for (  Layer layer : layers) {    if (!this.isMinimized() || layer == this) {      color=(i == this.selectedIndex) ? this.highlightColor : this.color;      color=(i == this.dragRefIndex) ? dragColor : color;      text.append("<a href=\"");      text.append(i);      text.append("\"><font color=\"");      text.append(encodeHTMLColor(color));      text.append("\">");      text.append((layer.isEnabled() ? layerEnabledSymbol : layerDisabledSymbol));      text.append(" ");      text.append((layer.isEnabled() ? "<b>" : "<i>"));      text.append(layer.getName());      text.append((layer.isEnabled() ? "</b>" : "</i>"));      text.append("</a><br />");    }    i++;  }  return text.toString();}  }
class C{  public static void writeJSONString(Map map,Writer out) throws IOException {  if (map == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=map.entrySet().iterator();  out.write('{');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Map.Entry entry=(Map.Entry)iter.next();    out.write('\"');    out.write(escape(String.valueOf(entry.getKey())));    out.write('\"');    out.write(':');    JSONValue.writeJSONString(entry.getValue(),out);  }  out.write('}');}  }
class C{  public Builder deleteX509Certificates(){  deleteFields.add("x509Certificates");  return this;}  }
class C{  public boolean equals(PageSource ps){  if (this == ps)   return true;  if (ps instanceof PageSourceImpl)   return _getClassName().equals(((PageSourceImpl)ps)._getClassName());  return _getClassName().equals(ClassUtil.extractName(ps.getClassName()));}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  boolean canDelete(){  return canDelete;}  }
class C{  public void testOneWordQuery() throws Exception {  final String input="monster";  MockTokenizer wt=new MockTokenizer(MockTokenizer.WHITESPACE,false);  wt.setReader(new StringReader(input));  CommonGramsFilter cgf=new CommonGramsFilter(wt,commonWords);  TokenFilter nsf=new CommonGramsQueryFilter(cgf);  assertTokenStreamContents(nsf,new String[]{"monster"});}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","pusc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void keyPressed(KeyEvent event){  if (event.character == '\r' || event.character == '\n') {    enterPressed();  }}  }
class C{  public void withdraw(double amount){  balance-=amount;}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  return proxy.isDataFlavorSupported(flavor);}  }
class C{  @Override public void storeState(){  partialBufferHelper.storeState();  evolutionaryProcessDelegate.storeState();  if (useScaleFactors || useAutoScaling) {    scaleBufferHelper.storeState();    System.arraycopy(scaleBufferIndices,0,storedScaleBufferIndices,0,scaleBufferIndices.length);  }  flip=true;}  }
class C{  public void onTurnReached(final int currentTurn){  getZone().remove(this);}  }
class C{  private void resize(int N){  Key[] array=(Key[])new Comparable[N];  for (int i=0; i < Math.min(keys.length,array.length); i++) {    array[i]=keys[i];    keys[i]=null;  }  keys=array;}  }
class C{  public char toUnicode(String name){  for (int i=0; i < ntables; i++) {    char uc=tables[i].toUnicode(name);    if (uc != '\uffff')     return (uc);  }  return ('\uffff');}  }
class C{  public static void openBrowser(Context context,String url){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setData(Uri.parse(url));  sendIntent(context,intent);}  }
class C{  public Version(String version) throws VersionException {  this(version,".");}  }
class C{  void writeBlocks(int prefixLength,int count) throws IOException {  assert count > 0;  assert prefixLength > 0 || count == pending.size();  int lastSuffixLeadLabel=-1;  boolean hasTerms=false;  boolean hasSubBlocks=false;  int start=pending.size() - count;  int end=pending.size();  int nextBlockStart=start;  int nextFloorLeadLabel=-1;  for (int i=start; i < end; i++) {    PendingEntry ent=pending.get(i);    int suffixLeadLabel;    if (ent.isTerm) {      PendingTerm term=(PendingTerm)ent;      if (term.termBytes.length == prefixLength) {        assert lastSuffixLeadLabel == -1;        suffixLeadLabel=-1;      } else {        suffixLeadLabel=term.termBytes[prefixLength] & 0xff;      }    } else {      PendingBlock block=(PendingBlock)ent;      assert block.prefix.length > prefixLength;      suffixLeadLabel=block.prefix.bytes[block.prefix.offset + prefixLength] & 0xff;    }    if (suffixLeadLabel != lastSuffixLeadLabel) {      int itemsInBlock=i - nextBlockStart;      if (itemsInBlock >= minItemsInBlock && end - nextBlockStart > maxItemsInBlock) {        boolean isFloor=itemsInBlock < count;        newBlocks.add(writeBlock(prefixLength,isFloor,nextFloorLeadLabel,nextBlockStart,i,hasTerms,hasSubBlocks));        hasTerms=false;        hasSubBlocks=false;        nextFloorLeadLabel=suffixLeadLabel;        nextBlockStart=i;      }      lastSuffixLeadLabel=suffixLeadLabel;    }    if (ent.isTerm) {      hasTerms=true;    } else {      hasSubBlocks=true;    }  }  if (nextBlockStart < end) {    int itemsInBlock=end - nextBlockStart;    boolean isFloor=itemsInBlock < count;    newBlocks.add(writeBlock(prefixLength,isFloor,nextFloorLeadLabel,nextBlockStart,end,hasTerms,hasSubBlocks));  }  assert newBlocks.isEmpty() == false;  PendingBlock firstBlock=newBlocks.get(0);  assert firstBlock.isFloor || newBlocks.size() == 1;  firstBlock.compileIndex(newBlocks,scratchBytes,scratchIntsRef);  pending.subList(pending.size() - count,pending.size()).clear();  pending.add(firstBlock);  newBlocks.clear();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RelativeDateFormat)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  RelativeDateFormat that=(RelativeDateFormat)obj;  if (this.baseMillis != that.baseMillis) {    return false;  }  if (this.showZeroDays != that.showZeroDays) {    return false;  }  if (this.showZeroHours != that.showZeroHours) {    return false;  }  if (!this.positivePrefix.equals(that.positivePrefix)) {    return false;  }  if (!this.daySuffix.equals(that.daySuffix)) {    return false;  }  if (!this.hourSuffix.equals(that.hourSuffix)) {    return false;  }  if (!this.minuteSuffix.equals(that.minuteSuffix)) {    return false;  }  if (!this.secondSuffix.equals(that.secondSuffix)) {    return false;  }  if (!this.dayFormatter.equals(that.dayFormatter)) {    return false;  }  if (!this.hourFormatter.equals(that.hourFormatter)) {    return false;  }  if (!this.minuteFormatter.equals(that.minuteFormatter)) {    return false;  }  if (!this.secondFormatter.equals(that.secondFormatter)) {    return false;  }  return true;}  }
class C{  public void processFinished(){}  }
class C{  public void addPart(String key,Object value){  jsonParams.put(key,value);}  }
class C{  protected void shutdown(){  session=null;  version=null;  in=null;  handshakeProtocol=null;  alertProtocol=null;  appData=null;  if (pendingConnectionState != null) {    pendingConnectionState.shutdown();  }  pendingConnectionState=null;  if (activeReadState != null) {    activeReadState.shutdown();  }  activeReadState=null;  if (activeReadState != null) {    activeReadState.shutdown();  }  activeWriteState=null;}  }
class C{  @SuppressWarnings("deprecation") private static void addPropertyResolvers(CompositeELResolver target,ApplicationAssociate associate){  PropertyResolver pr=getDelegatePR(associate,false);  if (pr != null) {    target.add(new PropertyResolverChainWrapper(pr));  }}  }
class C{  @DSComment("IO movement methodName") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.365 -0500",hash_original_method="B4D6325E78B6FA18E9BDD75F37F7F7A7",hash_generated_method="BC0B7A6C7758DC73C629DDD9DF9A80E6") public static long queryNumEntries(SQLiteDatabase db,String table,String selection,String[] selectionArgs){  String s=(!TextUtils.isEmpty(selection)) ? " where " + selection : "";  return longForQuery(db,"select count(*) from " + table + s,selectionArgs);}  }
class C{  public static TabHolderFragment newInstance(){  return new TabHolderFragment();}  }
class C{  public void writeFile(String name,String mimeType,String fileName,InputStream is) throws java.io.IOException {  if (is == null) {    throw new IllegalArgumentException("Input stream cannot be null.");  }  if (fileName == null || fileName.length() == 0) {    throw new IllegalArgumentException("File name cannot be null or empty.");  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"; filename=\""+ fileName+ "\"");  out.writeBytes(NEWLINE);  if (mimeType != null) {    out.writeBytes("Content-Type: " + mimeType);    out.writeBytes(NEWLINE);  }  out.writeBytes(NEWLINE);  byte[] data=new byte[1024];  int r=0;  while ((r=is.read(data,0,data.length)) != -1) {    out.write(data,0,r);  }  try {    is.close();  } catch (  Exception e) {  }  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEMergeNodeElement(prefix,(AbstractDocument)doc);}  }
class C{  protected void printComments(IssueCommentsFeed commentsFeed){  for (  IssueCommentsEntry commentEntry : commentsFeed.getEntries()) {    printComment(commentEntry);  }}  }
class C{  public static void assertConflationStatus(){  assertNotNull(statMap);  Long confCount=(Long)statMap.get("eventsConflated");  assertTrue("No Conflation found: eventsConflated value is " + confCount.longValue(),confCount.longValue() > (0));  assertTrue("Error in Conflation found: eventsConflated value is " + confCount.longValue(),confCount.longValue() <= (200));}  }
class C{  public int peek(int n){  try {    return m_map[m_firstFree - (1 + n)];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public boolean isValid(){  return true;}  }
class C{  @Override public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesLowerCaseQuotedIdentifiers");  String m=getMode();  return m.equals("MySQL");}  }
class C{  private void onTreeSelection(Event e){  Treeitem ti=centerTree.getSelectedItem();  SimpleTreeNode stn=(SimpleTreeNode)ti.getValue();  MTreeNode tn=(MTreeNode)stn.getData();  log.info(tn.toString());  if (tn == null)   return;  ListModel model=centerList.getModel();  int size=model.getSize();  int index=-1;  for (index=0; index < size; index++) {    ListItem item=(ListItem)model.getElementAt(index);    if (item.id == tn.getNode_ID())     break;  }  centerList.setSelectedIndex(index);}  }
class C{  private void refreshKeys(){  this.keys.clear();  for (int i=0; i < getSeriesCount(); i++) {    TaskSeries series=(TaskSeries)this.data.get(i);    Iterator iterator=series.getTasks().iterator();    while (iterator.hasNext()) {      Task task=(Task)iterator.next();      String key=task.getDescription();      int index=this.keys.indexOf(key);      if (index < 0) {        this.keys.add(key);      }    }  }}  }
class C{  public boolean isClassPathEntry(final FileBean file){  return isClassPathEntry(file.getPath());}  }
class C{  public ImageSource region(Rect sRegion){  this.sRegion=sRegion;  setInvariants();  return this;}  }
class C{  public IDPConfiguration(String alias,String entityID,X509Certificate signingCertificate,List<String> nameIDFormats,List<SingleSignOnService> singleSignOnServices,List<SingleLogoutService> singleLogoutServices,int clockTolerance,boolean useSiteAffinityIfAvailable){  Validate.notEmpty(entityID,"entityID");  Validate.notEmpty(alias,"alias");  Validate.notNull(singleSignOnServices);  this.entityID=entityID;  this.alias=alias;  this.nameIDFormats=nameIDFormats;  this.signingCertificate=signingCertificate;  this.singleSignOnServices=singleSignOnServices;  this.singleLogoutServices=singleLogoutServices;  this.clockTolerance=clockTolerance;  this.useSiteAffinityIfAvailable=useSiteAffinityIfAvailable;}  }
class C{  public ContinuousDistribution createContinuous(String headVar){  List<double[]> values=new ArrayList<double[]>();  for (  Assignment a : samples) {    Value v=a.getValue(headVar);    if (v instanceof ArrayVal) {      values.add(((ArrayVal)v).getArray());    } else     if (v instanceof DoubleVal) {      values.add(new double[]{((DoubleVal)v).getDouble()});    }  }  return new ContinuousDistribution(headVar,new KernelDensityFunction(values));}  }
class C{  public Answer findType(String typeName,String packageName,boolean partialMatch,int acceptFlags,boolean considerSecondaryTypes,boolean waitForIndexes,boolean checkRestrictions,IProgressMonitor monitor){  if (packageName == null || packageName.length() == 0) {    packageName=IPackageFragment.DEFAULT_PACKAGE_NAME;  } else   if (typeName.length() > 0 && ScannerHelper.isLowerCase(typeName.charAt(0))) {    if (findPackageFragments(packageName + "." + typeName,false) != null)     return null;  }  JavaElementRequestor elementRequestor=new JavaElementRequestor();  seekPackageFragments(packageName,false,elementRequestor);  IPackageFragment[] packages=elementRequestor.getPackageFragments();  IType type=null;  int length=packages.length;  HashSet projects=null;  IJavaProject javaProject=null;  Answer suggestedAnswer=null;  for (int i=0; i < length; i++) {    type=findType(typeName,packages[i],partialMatch,acceptFlags,waitForIndexes,considerSecondaryTypes);    if (type != null) {      AccessRestriction accessRestriction=null;      if (checkRestrictions) {        accessRestriction=getViolatedRestriction(typeName,packageName,type,accessRestriction);      }      Answer answer=new Answer(type,accessRestriction);      if (!answer.ignoreIfBetter()) {        if (answer.isBetter(suggestedAnswer))         return answer;      } else       if (answer.isBetter(suggestedAnswer))       suggestedAnswer=answer;    } else     if (suggestedAnswer == null && considerSecondaryTypes) {      if (javaProject == null) {        javaProject=packages[i].getJavaProject();      } else       if (projects == null) {        if (!javaProject.equals(packages[i].getJavaProject())) {          projects=new HashSet(3);          projects.add(javaProject);          projects.add(packages[i].getJavaProject());        }      } else {        projects.add(packages[i].getJavaProject());      }    }  }  if (suggestedAnswer != null)   return suggestedAnswer;  if (considerSecondaryTypes && javaProject != null) {    if (projects == null) {      type=findSecondaryType(packageName,typeName,javaProject,waitForIndexes,monitor);    } else {      Iterator allProjects=projects.iterator();      while (type == null && allProjects.hasNext()) {        type=findSecondaryType(packageName,typeName,(IJavaProject)allProjects.next(),waitForIndexes,monitor);      }    }  }  if (type != null) {    ICompilationUnit unit=type.getCompilationUnit();    if (unit != null && unit.isWorkingCopy()) {      IType[] types=null;      try {        types=unit.getTypes();      } catch (      JavaModelException e) {        return null;      }      boolean typeFound=false;      for (int i=0, typesLength=types == null ? 0 : types.length; i < typesLength; i++) {        if (types[i].getElementName().equals(typeName)) {          typeFound=true;          break;        }      }      if (!typeFound)       type=null;    }  }  return type == null ? null : new Answer(type,null);}  }
class C{  private static void trySetRenderArg(String name,Promise<?> promise){  try {    Object value=await(promise);    renderArgs.put(name,value);  } catch (  Exception e) {    Throwable cause=Common.unwrap(e);    String message=Common.getUserMessage(cause);    renderArgs.put(name + "_error",message);    Logger.warn(cause,"Could not set renderArg '%s'",name);  }}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public void testDivisionKnuthMultiDigitsByOneDigit(){  byte aBytes[]={113,-83,123,-5,18,-34,67,39,-29};  byte bBytes[]={2,-3,-4,-5};  int aSign=1;  int bSign=-1;  byte rBytes[]={-38,2,7,30,109,-43};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public UncreatedSystemException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void writeFormatted(Geometry geometry,boolean useFormatting,Writer writer) throws IOException {  this.useFormatting=useFormatting;  formatter=createFormatter(geometry.getPrecisionModel());  appendGeometryTaggedText(geometry,0,writer);}  }
class C{  private void init(){}  }
class C{  public void clearBlacklist(){  sendMessage(CMD_CLEAR_BLACKLIST);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.ROUTE__OWNED_ENDPOINTS:    return ((InternalEList<?>)getOwnedEndpoints()).basicRemove(otherEnd,msgs);case EipPackage.ROUTE__OWNED_CHANNELS:  return ((InternalEList<?>)getOwnedChannels()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public SslProtocol sslProtocol(){  String protocol=reader.getString(SSL_PROTOCOL,DEFAULT_SSL_PROTOCOL).replace(".","_");  try {    return SslProtocol.valueOf(protocol);  } catch (  IllegalArgumentException e) {    throw new ConfigurationException("unknown SSL protocol: " + protocol,e);  }}  }
class C{  private static int[] makePositive(int a[]){  int keep, j;  for (keep=0; keep < a.length && a[keep] == -1; keep++)   ;  for (j=keep; j < a.length && a[j] == 0; j++)   ;  int extraInt=(j == a.length ? 1 : 0);  int result[]=new int[a.length - keep + extraInt];  for (int i=keep; i < a.length; i++)   result[i - keep + extraInt]=~a[i];  for (int i=result.length - 1; ++result[i] == 0; i--)   ;  return result;}  }
class C{  @Override public void startElement(String uri,String name,String qName,Attributes atts){  inside=qName;  this.attributes=atts;  if (qName.equals("function"))   startFunction(); else   if (qName.equals("argument"))   startArg(); else   if (qName.equals("return"))   startReturn(); else   if (qName.equals("bundle"))   startBundle();}  }
class C{  static boolean isLinux(){  return getOperatingSystem().startsWith("Linux");}  }
class C{  public void addNeighbor(MapNode node){  if (node == null) {    return;  }  addToList(node);}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.SOURCE_FRAGMENT;}  }
class C{  private void receiveMessage() throws IOException, ClassNotFoundException {  Logger.debug(getClass().getName(),"a MESSAGE arrived");  String to=(String)ais.readObject();  IAgent rec=null;  boolean mHandled=false;  if (to != null) {    AgentBox box=(AgentBox)boxes.get(to);    if (box != null)     rec=box.agent;  }  if (rec == null) {    oos.writeByte(NOT_OK);    Logger.debug(getClass().getName(),to + " is not here");  } else {    oos.writeByte(OK);    oos.flush();    Message m=(Message)ais.readObject();    m.sender.host=socket.getInetAddress();    try {      mHandled=rec.handleMessage(m,AgentInputStream.getObject(m.getBinary(),rec));    } catch (    Exception e) {      oos.writeByte(NOT_OK);      Logger.error(getClass().getName(),"Handling the message " + m.toString() + " raised an Exception",e);    }    if (!mHandled)     oos.writeByte(NOT_OK); else {      if (m.reply != null) {        oos.writeByte(MESSAGE);        oos.writeObject(m.reply);      } else       oos.writeByte(OK);    }  }}  }
class C{  private int truncate(int a){  if (a < 0)   return 0; else   if (a > 255)   return 255; else   return a;}  }
class C{  @Override public void alarm(DeployService2Impl<I> deploy,Result<I> result){  result.ok(deploy.get());}  }
class C{  public void registerMessage(Class<?> cls){  AtomicInteger cntr=cntMap.get(cls);  if (cntr == null)   cntMap.put(cls,new AtomicInteger());}  }
class C{  public static int generateRandom(int lowerBound,int upperBound){  if (lowerBound >= upperBound) {    throw new IllegalArgumentException("lowerBound must be smaller than upperBound");  }  return rnd.nextInt(upperBound - lowerBound) + lowerBound;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public Collaborators createCollaborators(GHPersonSet<GHUser> ghCollaborators) throws IOException {  Collaborators collaborators=DtoFactory.getInstance().createDto(Collaborators.class);  for (  GHUser collaborator : ghCollaborators) {    collaborators.getCollaborators().add(createUser(collaborator));  }  return collaborators;}  }
class C{  private Object readResolve(){  if (iChronology == null) {    return new LocalDateTime(iLocalMillis,ISOChronology.getInstanceUTC());  }  if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {    return new LocalDateTime(iLocalMillis,iChronology.withUTC());  }  return this;}  }
class C{  private FileStreamTransformDirective findTransformTarget(Set<SootMethod> methods){  for (  SootMethod method : methods) {    String signature=method.getSignature();    for (    FileStreamTransformDirective directive : transformDirectives) {      if (directive.sig.equals(signature))       return directive;    }  }  return null;}  }
class C{  private Set<String> findLogicalUnits(Map<String,Set<String>> systemVolumesMap){  Set<String> logicalUnitPaths=new HashSet<String>();  List<VPlexClusterInfo> clusterInfoList=getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    List<VPlexStorageSystemInfo> systemInfoList=getStorageSystemInfoForCluster(clusterInfo.getName());    for (    VPlexStorageSystemInfo systemInfo : systemInfoList) {      for (      Entry<String,Set<String>> entry : systemVolumesMap.entrySet()) {        String systemGuid=entry.getKey();        if (systemInfo.matches(systemGuid)) {          Set<String> volumeWWNs=entry.getValue();          StringBuilder uriBuilder=new StringBuilder();          uriBuilder.append(VPlexApiConstants.URI_CLUSTERS.toString());          uriBuilder.append(clusterInfo.getName());          uriBuilder.append(VPlexApiConstants.URI_STORAGE_SYSTEMS.toString());          uriBuilder.append(systemInfo.getName());          uriBuilder.append(VPlexApiConstants.URI_LOGICAL_UNITS);          URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));          s_logger.info("Find logical units request URI is {}",requestURI.toString());          ClientResponse response=_vplexApiClient.get(requestURI);          String responseStr=response.getEntity(String.class);          s_logger.info("Response is {}",responseStr);          int status=response.getStatus();          response.close();          if (status != VPlexApiConstants.SUCCESS_STATUS) {            s_logger.error("Failed getting logical units for context {}",uriBuilder.toString());          }          List<VPlexLogicalUnitInfo> logUnitInfoList=VPlexApiUtils.getChildrenFromResponse(uriBuilder.toString(),responseStr,VPlexLogicalUnitInfo.class);          for (          VPlexLogicalUnitInfo logUnitInfo : logUnitInfoList) {            String logUnitName=logUnitInfo.getName();            int indexWWNStart=logUnitName.indexOf(":") + 1;            String logUnitWWN=logUnitName.substring(indexWWNStart).toUpperCase();            if (volumeWWNs.contains(logUnitWWN)) {              logicalUnitPaths.add(logUnitInfo.getPath());            }          }          break;        }      }    }  }  return logicalUnitPaths;}  }
class C{  public T standby(String value){  return attr("standby",value);}  }
class C{  public static double roundUpZ(final double startValue){  return startValue + zStep;}  }
class C{  public SchemaRegistrySingle(){}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  long[] oldKeys=_set;  double[] oldVals=_values;  byte[] oldStates=_states;  _set=new long[newCapacity];  _values=new double[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      long o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  private void handleDeviceUnlocked(){  if (isIdle()) {    final String text=mContext.getString(R.string.value_device_unlocked);    mSpeechController.speak(text,SpeechController.QUEUE_MODE_INTERRUPT,0,null);  }}  }
class C{  public List<IvrZone> showActiveIvrZone() throws NetworkDeviceControllerException {  return showIvrZones(true);}  }
class C{  public static void copy(File from,Charset charset,Appendable to) throws IOException {  asCharSource(from,charset).copyTo(to);}  }
class C{  protected Selector parseSelector(){  pseudoElement=null;  Selector result=parseSimpleSelector();  loop:   for (; ; ) {switch (current) {default :      break loop;case LexicalUnits.IDENTIFIER:case LexicalUnits.ANY:case LexicalUnits.HASH:case LexicalUnits.DOT:case LexicalUnits.LEFT_BRACKET:case LexicalUnits.COLON:    if (pseudoElement != null) {      throw createCSSParseException("pseudo.element.position");    }  int currentLine=getLineNumber();result=selectorFactory.createDescendantSelector(result,parseSimpleSelector());if (result != null) {if (result instanceof AbstractSelector) {  ((AbstractSelector)result).setLineNumber(currentLine);}}break;case LexicalUnits.PLUS:if (pseudoElement != null) {throw createCSSParseException("pseudo.element.position");}nextIgnoreSpaces();result=selectorFactory.createDirectAdjacentSelector((short)1,result,parseSimpleSelector());break;case LexicalUnits.PRECEDE:if (pseudoElement != null) {throw createCSSParseException("pseudo.element.position");}nextIgnoreSpaces();result=selectorFactory.createChildSelector(result,parseSimpleSelector());}}if (pseudoElement != null) {result=selectorFactory.createChildSelector(result,selectorFactory.createPseudoElementSelector(null,pseudoElement));}return result;}  }
class C{  private int normalizeCutOffDay(int cutOffDay){  if (cutOffDay > 28)   return 28;  return cutOffDay;}  }
class C{  public boolean isSuitableForContainer(Container container){  return (getContainerScheduler().getPeCapacity() >= container.getCurrentRequestedMaxMips() && getContainerScheduler().getAvailableMips() >= container.getWorkloadTotalMips() && getContainerRamProvisioner().isSuitableForContainer(container,container.getCurrentRequestedRam()) && getContainerBwProvisioner().isSuitableForContainer(container,container.getCurrentRequestedBw()));}  }
class C{  private final void storeMatrix(){  log.info("  gather hourly ttimes to the matrix...");  System.out.println("0%       10%       20%       30%       40%       50%       60%       70%       80%       90%       100%");  System.out.println("+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+");  int nofZones=ttimeMatrix.size();  int cnt=0;  for (  Id fzone : ttimeMatrix.keySet()) {    st.calculate(network,network.getNodes().get(fzone),hour * 3600);    Map<Id,Tuple<Double,Integer>> tmap=ttimeMatrix.get(fzone);    for (    Id tzone : tmap.keySet()) {      Tuple<Double,Integer> tuple=tmap.get(tzone);      String key=fzone.toString() + "," + tzone.toString();      String values=matrix.get(key);      if (tuple.getSecond() == 0) {        if (fzone.equals(tzone)) {          double ttime=calcAverageIntraZonalTravelTime(st);          values=values + "," + Math.round(ttime);        } else {          double ttime=st.getTree().get(tzone).getTime() - hour * 3600;          values=values + "," + Math.round(ttime);        }      } else {        values=values + "," + Math.round(tuple.getFirst() / tuple.getSecond());      }      matrix.put(key,values);    }    cnt++;    if ((cnt % ((int)(nofZones / 100.0))) == 0) {      System.out.print(".");    }  }  System.out.print("\n");  log.info("  done.");}  }
class C{  public TransferSubscriptionsRequest clone(){  TransferSubscriptionsRequest result=new TransferSubscriptionsRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionIds=SubscriptionIds == null ? null : SubscriptionIds.clone();  result.SendInitialValues=SendInitialValues;  return result;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.332 -0500",hash_original_method="48714A437D8A9113BC5943C1BF674836",hash_generated_method="2A6EC70C28CF56F4B80C25920A682A8B") public static void apply(int gravity,int w,int h,Rect container,Rect outRect,int layoutDirection){  int absGravity=getAbsoluteGravity(gravity,layoutDirection);  apply(absGravity,w,h,container,0,0,outRect);}  }
class C{  @Override public boolean supportsGroupByBeyondSelect(){  debugCodeCall("supportsGroupByBeyondSelect");  return true;}  }
class C{  public static String normalizeSystemName(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  String nName="";  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num=Integer.valueOf(systemName.substring(2)).intValue();    int nAddress=num / 1000;    int bitNum=num - (nAddress * 1000);    nName=systemName.substring(0,2) + Integer.toString((nAddress * 1000) + bitNum);  } else {    int nAddress=Integer.valueOf(s).intValue();    int bitNum=Integer.parseInt(systemName.substring(k,systemName.length()));    nName=systemName.substring(0,2) + Integer.toString(nAddress) + "B"+ Integer.toString(bitNum);  }  return nName;}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return conn == null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String toMatchValue(Object value){  if (value == null) {    return null;  } else   if (value instanceof String) {    return (String)value;  } else   if (value instanceof Boolean) {    return toMatchValue((boolean)value);  } else   if (value instanceof URI) {    return toMatchValue((URI)value);  } else   if (value instanceof Enum) {    return toMatchValue((Enum<?>)value);  } else {    return value.toString();  }}  }
class C{  public static void main(String[] args) throws IgniteException {  Ignition.start("examples/config/filesystem/example-igfs.xml");}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream temp, bytes;  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(pvno));  bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(msgType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),encPart.asn1Encode());  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x15),temp);  return bytes.toByteArray();}  }
class C{  public final int lastIndexOf(Object elem){  for (int i=(m_firstFree - 1); i >= 0; i--) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  private int processCqs(Message m,int startMessagePart,int numCqParts,int messageType,Object key,Object value){  return processCqs(m,startMessagePart,numCqParts,messageType,key,value,null,null);}  }
class C{  public static void ensureOffsetLength(final char[] a,final int offset,final int length){  ensureOffsetLength(a.length,offset,length);}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  @Override public boolean solutionGoodEnough(Population pop) throws OperatorException {  return pop.empty() || generationsWOImp > 0 && pop.getGenerationsWithoutImproval() >= generationsWOImp || pop.getGeneration() >= maxGenerations;}  }
class C{  @Path("move") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse move(final MoveRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.move(request);}  }
class C{  public void readContent() throws IOException {  if (offset + length > buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    offset+=length;  } else {    int bytesRead=in.read(buffer,offset,length);    if (bytesRead != length) {      int c=bytesRead;      do {        if (c < 1 || bytesRead > length) {          throw new ASN1Exception("Failed to read encoded content");        }        c=in.read(buffer,offset + bytesRead,length - bytesRead);        bytesRead+=c;      } while (bytesRead != length);    }    offset+=length;  }}  }
class C{  public static JavaFileObject makeSource(String name,String code){  return new JavaSourceFromString(name,code);}  }
class C{  @Override public String toString(){  return "PDF(" + variable + ")="+ function.toString();}  }
class C{  public void chopFrame(int pos,int offsetDelta,int k) throws BadBytecode {}  }
class C{  public void updatePixels(){  updatePixelsImpl(0,0,width,height);}  }
class C{  @Override public Query termQuery(Object value,@Nullable QueryParseContext context){  if (context == null) {    return super.termQuery(value,context);  }  if (isSameIndex(value,context.index().getName())) {    return Queries.newMatchAllQuery();  } else {    return Queries.newMatchNoDocsQuery();  }}  }
class C{  public static int codePointBefore(char[] seq,int index){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length;  if (index < 1 || index > len) {    throw new IndexOutOfBoundsException();  }  char low=seq[--index];  if (--index < 0) {    return low;  }  char high=seq[index];  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return low;}  }
class C{  public static String xmlText(String text,boolean escapeNewline){  int length=text.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char ch=text.charAt(i);switch (ch) {case '<':      buff.append("&lt;");    break;case '>':  buff.append("&gt;");break;case '&':buff.append("&amp;");break;case '\'':buff.append("&apos;");break;case '\"':buff.append("&quot;");break;case '\r':case '\n':if (escapeNewline) {buff.append("&#x").append(Integer.toHexString(ch)).append(';');} else {buff.append(ch);}break;case '\t':buff.append(ch);break;default :if (ch < ' ' || ch > 127) {buff.append("&#x").append(Integer.toHexString(ch)).append(';');} else {buff.append(ch);}}}return buff.toString();}  }
class C{  public void shiftRight() throws IOException {  print("shiftRight",null);}  }
class C{  double H(){  int[] n=new int[numberOfGroups];  double[] rbar=new double[numberOfGroups];  for (  RankedObservation observation : data) {    n[observation.getGroup()]++;    rbar[observation.getGroup()]+=observation.getRank();  }  double H=0.0;  for (int i=0; i < numberOfGroups; i++) {    H+=Math.pow(rbar[i],2.0) / n[i];  }  int N=data.size();  return 12.0 / (N * (N + 1)) * H - 3.0 * (N + 1);}  }
class C{  public static void stopRinging(){  Log.d(LOG_TAG,"stopRinging");  if (null != mRingTone) {    mRingTone.stop();    mRingTone=null;  }  if (null != mRingbackTone) {    mRingbackTone.stop();    mRingbackTone=null;  }  if ((null != mRingingPlayer) && mRingingPlayer.isPlaying()) {    Log.d(LOG_TAG,"stop mRingingPLayer");    try {      mRingingPlayer.pause();    } catch (    Exception e) {      Log.e(LOG_TAG,"stop mRingingPLayer failed " + e.getLocalizedMessage());    }  }  if ((null != mRingbackPlayer) && mRingbackPlayer.isPlaying()) {    Log.d(LOG_TAG,"stop mRingbackPlayer");    try {      mRingbackPlayer.pause();    } catch (    Exception e) {      Log.e(LOG_TAG,"stop mRingbackPlayer failed " + e.getLocalizedMessage());    }  }}  }
class C{  public CampoDatoVO createCampoDato(CampoDatoVO campoDatoVO){  DbConnection conn=getConnection();  try {    campoDatoVO.setId(getGuid(campoDatoVO.getId()));    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,campoDatoVO));    return campoDatoVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  removeListener(SWT.Selection,listener);}  }
class C{  public void select(int position){  if (showPreviousButton) {    if (position > 0) {      previous.setVisibility(View.VISIBLE);    } else {      previous.setVisibility(View.INVISIBLE);    }  }  if (position < slideAmount - 1) {    next.setImageResource(R.drawable.introduction_ic_arrow_next);    if (showSkipButton) {      skip.setVisibility(View.VISIBLE);    }  } else {    next.setImageResource(R.drawable.introduction_ic_done);    if (showSkipButton) {      skip.setVisibility(View.GONE);    }  }}  }
class C{  public VirtualFile createFile(String filename,String content) throws FileNotFoundException {  return myTest.createFileInCommand(filename,content);}  }
class C{  public void ancestorMoved(HierarchyEvent e){}  }
class C{  private static void loadLibraryResource(String libName) throws Throwable {  String libPrefix=createLibPrefix();  String libExtension=createLibExtension();  String fullName=libPrefix + libName;  String resourceName="/lib/" + fullName + "."+ libExtension;  InputStream inputStream=LibUtils.class.getResourceAsStream(resourceName);  if (inputStream == null) {    throw new NullPointerException("No resource found with name '" + resourceName + "'");  }  File tempFile=File.createTempFile(fullName,"." + libExtension);  tempFile.deleteOnExit();  OutputStream outputStream=null;  try {    outputStream=new FileOutputStream(tempFile);    byte[] buffer=new byte[8192];    while (true) {      int read=inputStream.read(buffer);      if (read < 0) {        break;      }      outputStream.write(buffer,0,read);    }    outputStream.flush();    outputStream.close();    outputStream=null;    System.load(tempFile.toString());  }  finally {    if (outputStream != null) {      outputStream.close();    }  }}  }
class C{  public boolean canAcceptVariables(){  return true;}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  @SuppressWarnings("unused") protected final boolean cancelOperation(@NonNull final String tag){  return mHelper.cancelOperation(tag,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.025 -0500",hash_original_method="5E02E1586BFD98056E8E0E2C4C1BAAF7",hash_generated_method="F8CE9F1C5675EE19596CA54C4A157327") public void write(int bits,int data) throws AccessException {  if ((bits < 0) || (bits > 8)) {    throw new AccessException("illegal write (" + bits + " bits)");  }  possExpand(bits);  data&=(-1 >>> (32 - bits));  int index=mPos >>> 3;  int offset=16 - (mPos & 0x07) - bits;  data<<=offset;  mPos+=bits;  mBuf[index]|=data >>> 8;  if (offset < 8)   mBuf[index + 1]|=data & 0xFF;}  }
class C{  private void addFacetToProject(IProjectFacet facetOfInterest,IFacetedProject facetedProject,IProgressMonitor monitor) throws EarlyExit {  IFacetedProjectWorkingCopy workingCopy=facetedProject.createWorkingCopy();  workingCopy.addProjectFacet(facetOfInterest.getDefaultVersion());  markToUseMavenDependencies(facetOfInterest,workingCopy);  try {    workingCopy.commitChanges(monitor);  } catch (  CoreException e) {    String facetId="";    if (facetOfInterest != null) {      facetId=facetOfInterest.getId();    }    String message="GwtMavenFacetManager.addFacetToProject() Error committing addition of (facetId=" + facetId + ") facet to project. Exiting.";    GwtMavenPlugin.logError(message,e);    throw new EarlyExit();  }  try {    GWTNature.addNatureToProject(facetedProject.getProject());  } catch (  CoreException e) {    GwtMavenPlugin.logError("GwtMavenFacetManager.addFacetToProject() Error setting GWT Nature.",e);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public RandomizedCollection(){  list=new ArrayList<Integer>();  r=new Random();}  }
class C{  @Override public void detachView(boolean retainInstance){  mView=null;}  }
class C{  @Override public String toString(){  return "TimePeriodValue[" + getPeriod() + ","+ getValue()+ "]";}  }
class C{  public int count(){  int cnt=0;synchronized (nonPersistentJobQueue) {    cnt+=nonPersistentJobQueue.count();  }synchronized (persistentJobQueue) {    cnt+=persistentJobQueue.count();  }  return cnt;}  }
class C{  public float envelope(){  return envelope(mLeft,mRight);}  }
class C{  private float dpToPx(float dp){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getContext().getResources().getDisplayMetrics());}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public String kernelTipText(){  return "The kernel to use.";}  }
class C{  public synchronized void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  public void testResolver() throws Exception {  byte[] data=array(F.t(wrap(1),24));  assertSplit(0,4,0,8,data,8);  assertSplit(0,8,0,8,data,8);  assertSplit(0,12,0,16,data,8);  assertSplit(0,16,0,16,data,8);  assertSplit(0,20,0,24,data,8);  assertSplit(0,24,0,24,data,8);  assertSplit(0,28,0,24,data,8);  assertSplit(0,32,0,24,data,8);  assertSplitNull(2,2,data,8);  assertSplitNull(2,6,data,8);  assertSplit(2,10,8,8,data,8);  assertSplit(2,14,8,8,data,8);  assertSplit(2,18,8,16,data,8);  assertSplit(2,22,8,16,data,8);  assertSplit(2,26,8,16,data,8);  assertSplit(2,30,8,16,data,8);  assertSplit(8,4,8,8,data,8);  assertSplit(8,8,8,8,data,8);  assertSplit(8,12,8,16,data,8);  assertSplit(8,16,8,16,data,8);  assertSplit(8,20,8,16,data,8);  assertSplit(8,24,8,16,data,8);  assertSplitNull(10,2,data,8);  assertSplitNull(10,6,data,8);  assertSplit(10,10,16,8,data,8);  assertSplit(10,14,16,8,data,8);  assertSplit(10,18,16,8,data,8);  assertSplit(10,22,16,8,data,8);  assertSplit(16,4,16,8,data,8);  assertSplit(16,8,16,8,data,8);  assertSplit(16,12,16,8,data,8);  assertSplit(16,16,16,8,data,8);  assertSplitNull(18,2,data,8);  assertSplitNull(18,6,data,8);  assertSplitNull(18,10,data,8);  assertSplitNull(18,14,data,8);  assertSplitNull(24,4,data,8);  assertSplitNull(24,8,data,8);  assertSplitNull(26,2,data,8);  assertSplitNull(26,6,data,8);}  }
class C{  public static CommandLineResult executeCommandLine(@Nullable final Map<String,String> env,final String cmd,@Nullable final String[] args,final long timeout,@Nullable final File workingDirectory) throws IOException {  return executeCommandLine(env,cmd,args,null,timeout,workingDirectory);}  }
class C{  static boolean isLightColor(final int color){  final int r=Color.red(color);  final int g=Color.green(color);  final int b=Color.blue(color);  final double threshold=0.21 * r + 0.72 * g + 0.07 * b;  return threshold > 170;}  }
class C{  static ComputedDayOfField ofWeekOfYearField(WeekFields weekDef){  return new ComputedDayOfField("WeekOfYear",weekDef,WEEKS,YEARS,WEEK_OF_YEAR_RANGE);}  }
class C{  public SigmoidalRule(SquashingFunction sFunction){  super(sFunction);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_EVENT_DEFINITION_1__PARAMETER_LIST_1:    return ((InternalEList<?>)getParameterList_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static IJavaModelStatus validateClasspathEntry(IJavaProject project,IClasspathEntry entry,boolean checkSourceAttachment){  throw new UnsupportedOperationException();}  }
class C{  static public String generateSaveFileName(Context c,String fileName){  String path=getSaveFilePath(c) + File.separator + fileName;  return path;}  }
class C{  @Override public int previousIndex(){  return tokenPos - 1;}  }
class C{  public RlmiParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  public static void main(String[] args){  System.out.println(new SystemInfo());}  }
class C{  private static byte[] copyOfRange(byte[] from,int start,int end){  int length=end - start;  byte[] result=new byte[length];  System.arraycopy(from,start,result,0,length);  return result;}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  if (p_AD_Client_ID == 0)   p_AD_Client_ID=Env.getAD_Client_ID(getCtx());  AD_Table_ID=getTable_ID();  StringBuffer sb=new StringBuffer("AD_Table_ID=").append(AD_Table_ID);  sb.append("; Record_ID=").append(getRecord_ID());  ProcessInfoParameter[] paras=getParameter();  for (  ProcessInfoParameter para : paras) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("EXP_Format_ID"))     p_EXP_Format_ID=para.getParameterAsInt(); else     if (name.equals("FileName"))     p_FileName=(String)para.getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_EXP_Format_ID == 0)   p_EXP_Format_ID=p_Record_ID;  if (p_FileName == null) {    String fileNameOr=org.compiere.util.Ini.findAdempiereHome() + System.getProperty("file.separator") + "data"+ System.getProperty("file.separator")+ "ExportFile.xml";    p_FileName=fileNameOr;  }  log.info(sb.toString());}  }
class C{  public UserDeletionConstraintException(){  super();}  }
class C{  public void post(CoapHandler handler,String payload,int format,int accept){  asynchronous(accept(format(newPost().setURI(uri).setPayload(payload),format),accept),handler);}  }
class C{  private void optimizeMMChain(Hop hop) throws HopsException {  if (LOG.isTraceEnabled()) {    LOG.trace("MM Chain Optimization for HOP: (" + " " + hop.getClass().getSimpleName() + ", "+ hop.getHopID()+ ", "+ hop.getName()+ ")");  }  ArrayList<Hop> mmChain=new ArrayList<Hop>();  ArrayList<Hop> mmOperators=new ArrayList<Hop>();  ArrayList<Hop> tempList;  mmOperators.add(hop);  for (  Hop hi : hop.getInput()) {    mmChain.add(hi);  }  int i=0;  while (i < mmChain.size()) {    boolean expandable=false;    Hop h=mmChain.get(i);    if (h instanceof AggBinaryOp && ((AggBinaryOp)h).isMatrixMultiply() && !((AggBinaryOp)hop).hasLeftPMInput()&& h.getVisited() != Hop.VisitStatus.DONE) {      if (h.getParent().size() > 1 || inputCount((Hop)((h.getParent().toArray())[0]),h) > 1) {        expandable=false;        break;      } else       expandable=true;    }    h.setVisited(Hop.VisitStatus.DONE);    if (!expandable) {      i=i + 1;    } else {      tempList=mmChain.get(i).getInput();      if (tempList.size() != 2) {        throw new HopsException(hop.printErrorLocation() + "Hops::rule_OptimizeMMChain(): AggBinary must have exactly two inputs.");      }      mmOperators.add(mmChain.get(i));      mmChain.set(i,tempList.get(0));      mmChain.add(i + 1,tempList.get(1));    }  }  if (LOG.isTraceEnabled()) {    LOG.trace("Identified MM Chain: ");    for (    Hop h : mmChain) {      logTraceHop(h,1);    }  }  if (mmChain.size() == 2) {    return;  } else {    double[] dimsArray=new double[mmChain.size() + 1];    boolean dimsKnown=getDimsArray(hop,mmChain,dimsArray);    if (dimsKnown) {      clearLinksWithinChain(hop,mmOperators);      int size=mmChain.size();      int[][] split=mmChainDP(dimsArray,mmChain.size());      LOG.trace("Optimal MM Chain: ");      mmChainRelinkHops(mmOperators.get(0),0,size - 1,mmChain,mmOperators,1,split,1);    }  }}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0)   return;  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  @SuppressWarnings("unchecked") public <T>T clone(T origin){  final Class<?> implClass=origin.getClass();  DtoProvider provider=dtoImpl2Providers.get(implClass);  if (provider == null) {    Class<?> dtoInterface=null;    Class<?>[] interfaces=implClass.getInterfaces();    if (interfaces.length == 0) {      return null;    }    for (    Class<?> i : interfaces) {      if (i.isAnnotationPresent(DTO.class)) {        if (dtoInterface != null) {          throw new IllegalArgumentException("Unable determine DTO interface. Type " + implClass.getName() + " implements or extends more than one interface annotated with @DTO annotation.");        }        dtoInterface=i;      }    }    if (dtoInterface != null) {      provider=getDtoProvider(dtoInterface);    }  }  if (provider == null) {    throw new IllegalArgumentException("Unknown DTO type " + implClass);  }  return (T)provider.clone(origin);}  }
class C{  void writeEntry(TrackerEntry entry){  mContext.getContentResolver().insert(TrackerProvider.CONTENT_URI,entry.getAsContentValues());}  }
class C{  public void addOreSpawn(Block block,World world,Random random,int blockXPos,int blockZPos,int maxX,int maxZ,int maxVeinSize,int chancesToSpawn,int minY,int maxY){  assert maxY > minY : "The maximum Y must be greater than the Minimum Y";  assert maxX > 0 && maxX <= 16 : "addOreSpawn: The Maximum X must be greater than 0 and less than 16";  assert minY > 0 : "addOreSpawn: The Minimum Y must be greater than 0";  assert maxY < 256 && maxY > 0 : "addOreSpawn: The Maximum Y must be less than 256 but greater than 0";  assert maxZ > 0 && maxZ <= 16 : "addOreSpawn: The Maximum Z must be greater than 0 and less than 16";  int diffBtwnMinMaxY=maxY - minY;  for (int x=0; x < chancesToSpawn; x++) {    int posX=blockXPos + random.nextInt(maxX);    int posY=minY + random.nextInt(diffBtwnMinMaxY);    int posZ=blockZPos + random.nextInt(maxZ);    (new WorldGenMinable(block,maxVeinSize)).generate(world,random,posX,posY,posZ);  }}  }
class C{  void readFile(String name) throws org.jdom2.JDOMException, java.io.IOException {  Element root=rootFromName(name);  if (root == null) {    log.debug("ConsistRoster file could not be read");    return;  }  if (root.getChild("roster") != null) {    List<Element> l=root.getChild("roster").getChildren("consist");    if (log.isDebugEnabled()) {      log.debug("readFile sees " + l.size() + " children");    }    for (int i=0; i < l.size(); i++) {      addEntry(new NceConsistRosterEntry(l.get(i)));    }    for (int i=0; i < numEntries(); i++) {      NceConsistRosterEntry r=_list.get(i);      String tempComment=r.getComment();      StringBuffer buf=new StringBuffer();      for (int k=0; k < tempComment.length(); k++) {        if (tempComment.startsWith("<?p?>",k)) {          buf.append("\n");          k=k + 4;        } else {          buf.append(tempComment.substring(k,k + 1));        }      }      r.setComment(buf.toString());    }  } else {    log.error("Unrecognized ConsistRoster file contents in file: " + name);  }}  }
class C{  @Deprecated public HyperLogLog(int log2m,RegisterSet registerSet){  if (log2m < 0 || log2m > 30) {    throw new IllegalArgumentException("log2m argument is " + log2m + " and is outside the range [0, 30]");  }  this.registerSet=registerSet;  this.log2m=log2m;  int m=1 << this.log2m;  alphaMM=getAlphaMM(log2m,m);}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller,String adClientId,String customChannelId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all ad units for custom channel %s\n",customChannelId);  System.out.println("=================================================================");  String pageToken=null;  do {    AdUnits adUnits=adExchangeSeller.customchannels().adunits().list(adClientId,customChannelId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (adUnits.getItems() != null && !adUnits.getItems().isEmpty()) {      for (      AdUnit unit : adUnits.getItems()) {        System.out.printf("Ad unit with code \"%s\", name \"%s\" and status \"%s\" was found.\n",unit.getCode(),unit.getName(),unit.getStatus());      }    } else {      System.out.println("No ad units found.");    }    pageToken=adUnits.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  public void testStartStopContainer() throws Exception {  WebClient webClient=new WebClient();  HtmlPage htmlPage=webClient.getPage(CargoDaemonBrowserTest.daemonUrl);  assertFalse("There should be no running containers",htmlPage.asText().contains("started"));  ((HtmlTextInput)htmlPage.getElementByName("handleId")).setText("test1");  ((HtmlSelect)htmlPage.getElementByName("containerId")).getOptionByText("jetty7x").setSelected(true);  File jetty7x=new File(System.getProperty("artifacts.dir"),"jetty7x.zip");  assertTrue("File " + jetty7x + " is missing",jetty7x.isFile());  ((HtmlTextInput)htmlPage.getElementByName("installerZipUrl")).setText(jetty7x.toURI().toURL().toString());  File configurationDirectory=new File(System.getProperty("daemon.test-configurations.home"));  assertFalse("Directory " + configurationDirectory + " already exists",configurationDirectory.isDirectory());  ((HtmlTextInput)htmlPage.getElementByName("configurationHome")).setText(configurationDirectory.getAbsolutePath());  htmlPage.getElementById("addConfigurationPropertyButton").click();  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyKey_0")).setText(ServletPropertySet.PORT);  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyValue_0")).setText(System.getProperty("servlet.port"));  htmlPage.getElementById("addConfigurationPropertyButton").click();  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyKey_1")).setText(GeneralPropertySet.RMI_PORT);  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyValue_1")).setText(System.getProperty("rmi.port"));  htmlPage.getElementById("submitButton").click();  DeployableMonitor daemonMonitor=new URLDeployableMonitor(new URL("http://localhost:" + System.getProperty("servlet.port") + "/cargocpc/index.html"),CargoDaemonBrowserTest.TIMEOUT);  DeployerWatchdog daemonWatchdog=new DeployerWatchdog(daemonMonitor);  daemonWatchdog.watchForAvailability();  webClient.closeAllWindows();  htmlPage=webClient.getPage(CargoDaemonBrowserTest.daemonUrl);  HtmlElement stopButton=htmlPage.getElementById("stopContainer_test1");  assertNotNull("Container stop button did not appear. Current content: " + htmlPage.asText(),stopButton);  assertTrue("There should be running containers",htmlPage.asText().contains("started"));  stopButton.click();  daemonWatchdog.watchForUnavailability();  webClient.closeAllWindows();  htmlPage=webClient.getPage(CargoDaemonBrowserTest.daemonUrl);  assertFalse("There should be no running containers",htmlPage.asText().contains("started"));}  }
class C{  public boolean isCellEditable(int row,int col){  if (!m_rows.isValidRow(row)) {    return false;  } else {    return getColumn(col).isCellEditable(row);  }}  }
class C{  public static Vector<?> create(Vector<String> markerNames,String prefix,Properties properties,ProgressSupport progressSupport){  return getInstance()._create(markerNames,prefix,properties,progressSupport,false);}  }
class C{  protected void rename(String name){  m_name=name;  if (m_editFlag == FolderEditFlag.NONE)   m_editFlag=FolderEditFlag.UPDATE;}  }
class C{  public static mat4 r_add(mat4 matA,mat4 matB){  float[] a=matA.m;  float[] b=matB.m;  mat4 result=new mat4();  for (int i=0; i < 16; ++i) {    result.m[i]=a[i] + b[i];  }  return result;}  }
class C{  public static String replaceFirst(String string,String oldString,String newString){  String result=string;  if (string != null) {    int i=string.indexOf(oldString);    if (i >= 0) {      result=string.substring(0,i) + newString;      if (i + oldString.length() < string.length() - 1) {        result+=string.substring(i + oldString.length());      }    }  }  return result;}  }
class C{  public void cancel(){  cancelled=true;  Thread thread=this.thread;  if (thread != null) {    thread.interrupt();  }}  }
class C{  private void addToComment(Object[] inheritDoc){  String desc=(String)inheritDoc[0];  @SuppressWarnings("unchecked") List<String> para=(List<String>)inheritDoc[1];  String retu=(String)inheritDoc[2];  if (desc != null) {    if (inheritDocTagLocation != null && inheritDocTagLocation.equals("before-description")) {      this.description=desc + this.description;    } else {      this.description+=desc;    }  }  if (para != null) {    if (this.paramTags != null) {      int diff=para.size() - this.paramTags.size();      if (diff > 0) {        int size=this.paramTags.size();        for (int i=size; i < size + diff; i++)         this.paramTags.add(para.get(i));      }    } else     this.paramTags=para;  }  if (this.returnTag == null && retu != null)   this.returnTag=retu;}  }
class C{  private void writeHexDigit(byte b){  try {    if (b > 9) {      buffOut.write(b - 9 + 0x40);    } else {      buffOut.write(b + 0x30);    }  } catch (  IOException e) {  }}  }
class C{  private Calendar inUTC(Calendar cal){  Calendar utc=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  utc.setTimeInMillis(cal.getTimeInMillis());  return utc;}  }
class C{  public static void main(String[] args){  TestNewLineInLink tester=new TestNewLineInLink();  run(tester,ARGS,new String[][]{},NEGATED_TEST);  tester.printSummary();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.828 -0500",hash_original_method="C0C59EBD9F5AF1603D81C107186D4E66",hash_generated_method="D4FE196EFDC8540DC58A2E6EE0804DA1") public void removeToTag(){  parameters.delete(ParameterNames.TO_TAG);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS07.class,args);}  }
class C{  public String toFormattedString(){  return "JITOptions:\n    " + createString("\n    ");}  }
class C{  public void increment(){  if (mCount == 0 && !mFirstIncRunnables.isEmpty()) {    int numRunnables=mFirstIncRunnables.size();    for (int i=0; i < numRunnables; i++) {      mFirstIncRunnables.get(i).run();    }  }  mCount++;}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].mType=source[i].mType;    for (int j=0; j < source[i].mParams.length; j++) {      target[i].mParams[j]=source[i].mParams[j];    }  }}  }
class C{  public void delete(String key){  root=delete(root,key,0);}  }
class C{  public double untransform(double value){  return value;}  }
class C{  public static SecretKeys generateKey() throws GeneralSecurityException {  fixPrng();  KeyGenerator keyGen=KeyGenerator.getInstance(CIPHER);  keyGen.init(AES_KEY_LENGTH_BITS);  SecretKey confidentialityKey=keyGen.generateKey();  byte[] integrityKeyBytes=randomBytes(HMAC_KEY_LENGTH_BITS / 8);  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);  return new SecretKeys(confidentialityKey,integrityKey);}  }
class C{  public boolean equals(Object object){  return object == null || object == this;}  }
class C{  void calculatePressed(ActionEvent e){  if (checkEditConditional()) {    return;  }  if (numConditionals > 0) {    String cName="";    Conditional c=null;    for (int i=0; i < numConditionals; i++) {      cName=_curLogix.getConditionalByNumberOrder(i);      if (cName != null) {        c=_conditionalManager.getBySystemName(cName);        if (c == null) {          log.error("Invalid conditional system name when calculating - " + cName);        } else {          c.calculate(false,null);        }      } else {        log.error("null conditional system name when calculating");      }    }    conditionalTableModel.fireTableDataChanged();  }}  }
class C{  @Ignore public void notVulnerableTest(){  MetricOracle notVulnerableOracle=MetricOracleBuilder.create().withCount(24).withDuration(1000).withContent("OK").build();  DoSAttack[] attacks=IntelligentDoSLibraryImpl.getAllAttacks();  IDoSTestHelper.iterate(notVulnerableOracle,attacks,impl);  assertThat(impl.hasFurtherAttack(),is(false));  assertThat(impl.getSuccessfulAttacks().size(),is(0));}  }
class C{  protected void writeNetscapeExt() throws IOException {  out.write(0x21);  out.write(0xff);  out.write(11);  writeString("NETSCAPE" + "2.0");  out.write(3);  out.write(1);  writeShort(repeat);  out.write(0);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static double valueOfHexDoubleLiteral(char[] source){  return Double.parseDouble(new String(source));}  }
class C{  public static double info(int counts[]){  int total=0;  int c;  double x=0;  for (int j=0; j < counts.length; j++) {    x-=xlogx(counts[j]);    total+=counts[j];  }  return x + xlogx(total);}  }
class C{  public static <T>boolean addAll(Collection<? super T> c,T... a){  boolean modified=false;  for (int i=0; i < a.length; i++) {    modified|=c.add(a[i]);  }  return modified;}  }
class C{  public static void snapToCycleDay(Time time,int cycleDay){  if (cycleDay > time.getActualMaximum(MONTH_DAY)) {    time.month+=1;    time.monthDay=1;    time.second=-1;  } else {    time.monthDay=cycleDay;  }  time.normalize(true);}  }
class C{  public SparseIntArray(int initialCapacity){  mKeys=new int[initialCapacity];  mValues=new int[initialCapacity];  mSize=0;}  }
class C{  private void clearParserNoticeHighlights(Parser parser){  RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();  if (h != null) {    h.clearParserHighlights(parser);  }  if (noticesToHighlights != null) {    for (Iterator i=noticesToHighlights.entrySet().iterator(); i.hasNext(); ) {      Map.Entry entry=(Map.Entry)i.next();      ParserNotice notice=(ParserNotice)entry.getKey();      if (notice.getParser() == parser) {        i.remove();      }    }  }}  }
class C{  public Object parse(byte[] bytes,String charset){  if (bytes == null) {    throw new IllegalArgumentException("bytes must not be null");  }  if (charset == null) {    throw new IllegalArgumentException("charset must not be null");  }  Object content;  content=createParser().parse(bytes,charset);  return content;}  }
class C{  public static PipelineOp compileJoinGraph(final QueryEngine queryEngine,final JoinGraph joinGraph,final Path path){  if (queryEngine == null)   throw new IllegalArgumentException();  if (joinGraph == null)   throw new IllegalArgumentException();  if (path == null)   throw new IllegalArgumentException();  final IPredicate<?>[] predicates=path.getPredicates();  final IConstraint[] constraints=joinGraph.getConstraints();  final Set<IVariable<?>> doneSet=new LinkedHashSet<IVariable<?>>(joinGraph.getDoneSet());  final JoinGroupNode rtoJoinGroup=(JoinGroupNode)joinGraph.getRequiredProperty(JoinGraph.Annotations.JOIN_GROUP);  final Map<Integer,StatementPatternNode> index=getIndex(rtoJoinGroup);  final BOpIdFactory idFactory=new BOpIdFactory();  idFactory.reserveIds(predicates);  idFactory.reserveIds(constraints);  final IConstraint[][] constraintAttachmentArray=PartitionedJoinGroup.getJoinGraphConstraints(predicates,constraints,null,true);  final AST2BOpContext ctx=getExecutionContext(queryEngine,(NT)joinGraph.getRequiredProperty(JoinGraph.Annotations.NT));  PipelineOp left=null;  for (int i=0; i < predicates.length; i++) {    final Predicate<?> pred=(Predicate<?>)predicates[i];    final IConstraint[] attachedJoinConstraints=constraintAttachmentArray[i];    final boolean optional=pred.isOptional();    final StatementPatternNode sp=index.get(pred.getId());    left=join(left,pred,optional ? new LinkedHashSet<IVariable<?>>(doneSet) : doneSet,attachedJoinConstraints == null ? null : Arrays.asList(attachedJoinConstraints),null,sp.getQueryHints(),ctx);  }  return left;}  }
class C{  public void remove(String key){  deleteNode(getNode(key.trim().toLowerCase(locale)));}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:      return N4JSPackage.SWITCH_STATEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :    return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.696 -0500",hash_original_method="6782015769BAD3CE7033564D51D44773",hash_generated_method="5F9D0864E5714EA6E374497F09D12465") void reset(){  mHttpRequest.removeHeaders(CONTENT_LENGTH_HEADER);  if (mBodyProvider != null) {    try {      mBodyProvider.reset();    } catch (    IOException ex) {      if (HttpLog.LOGV)       HttpLog.v("failed to reset body provider " + getUri());    }    setBodyProvider(mBodyProvider,mBodyLength);  }  if (mReceivedBytes > 0) {    mFailCount=0;    HttpLog.v("*** Request.reset() to range:" + mReceivedBytes);    mHttpRequest.setHeader("Range","bytes=" + mReceivedBytes + "-");  }}  }
class C{  public BasicNurbsCurve(Vec4D[] cps,float[] uK,int degree){  this(cps,new KnotVector(uK,degree));}  }
class C{  public void reset(){  System.arraycopy(initialState,0,chain,0,chain.length);  ubiInit(PARAM_TYPE_MESSAGE);}  }
class C{  public FacetResult search() throws IOException {  FacetsCollector fc=new FacetsCollector();  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);  Facets facets=new LongRangeFacetCounts("timestamp",fc,PAST_HOUR,PAST_SIX_HOURS,PAST_DAY);  return facets.getTopChildren(10,"timestamp");}  }
class C{  public void run(){  boolean periodic=isPeriodic();  if (!canRunInCurrentRunState(periodic))   cancel(false); else   if (!periodic)   ScheduledFutureTask.super.run(); else   if (ScheduledFutureTask.super.runAndReset()) {    setNextRunTime();    reExecutePeriodic(outerTask);  }}  }
class C{  public boolean isNominal(int index){  return m_nominalCols.isInRange(index);}  }
class C{  public VariableTypeNode clone(){  VariableTypeNode result=new VariableTypeNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  result.Value=Value;  result.DataType=DataType;  result.ValueRank=ValueRank;  result.ArrayDimensions=ArrayDimensions == null ? null : ArrayDimensions.clone();  result.IsAbstract=IsAbstract;  return result;}  }
class C{  public void send(byte[] theBytes){  if (isRunning) {    try {      DatagramPacket myPacket=new DatagramPacket(theBytes,theBytes.length,_myNetAddress.inetaddress(),_myNetAddress.port());      send(myPacket);    } catch (    NullPointerException npe) {      Logger.printError("Multicast.send","a nullpointer exception occured." + npe);    }  } else {    Logger.printWarning("Multicast.send","DatagramSocket is not running. Packet has not been sent.");  }}  }
class C{  public Range findRangeBounds(XYDataset dataset){  if (dataset != null) {    Range r=DatasetUtilities.findRangeBounds(dataset,false);    if (r == null) {      return null;    } else {      return new Range(r.getLowerBound() + this.yOffset,r.getUpperBound() + this.blockHeight + this.yOffset);    }  } else {    return null;  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public DViewCertCsrPem(JFrame parent,String title,X509Certificate cert) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.cert=cert;  initComponents();}  }
class C{  public static void putAttribute(final Message message,final String resourceName,final String attribute){  message.putStringProperty(ManagementHelper.HDR_RESOURCE_NAME,new SimpleString(resourceName));  message.putStringProperty(ManagementHelper.HDR_ATTRIBUTE,new SimpleString(attribute));}  }
class C{  public final AC shrinkWeight(float w){  return shrink(w);}  }
class C{  public void deleteAll(){  HttpDeleteAllAvatarsAction action=new HttpDeleteAllAvatarsAction(this,(InstanceConfig)MainActivity.instance.credentials());  action.execute();}  }
class C{  public boolean isSetGetRequest(){  return this.getRequest != null;}  }
class C{  public static void closeSilently(ResultSet rs){  if (rs != null) {    try {      rs.close();    } catch (    SQLException e) {    }  }}  }
class C{  public Vertex applyAPPEND(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex source=arguments.get(2).getTarget().applyQuotient(variables,network);  Vertex type=arguments.get(1).getTarget().applyQuotient(variables,network);  Vertex target=arguments.get(0).getTarget().applyQuotient(variables,network);  Relationship relationship=source.addRelationship(type,target,Integer.MAX_VALUE);  if (arguments.size() == 5) {    Vertex metaType=arguments.get(3).getTarget().applyQuotient(variables,network);    Vertex metaTarget=arguments.get(4).getTarget().applyQuotient(variables,network);    if (!metaTarget.is(Primitive.NULL)) {      Vertex meta=network.createMeta(relationship);      meta.addRelationship(metaType,metaTarget);    }  }  return source;}  }
class C{  public JavaModelStatus(int code,IJavaElement element){  this(code,new IJavaElement[]{element});}  }
class C{  private long decompressLinearSearch(final LongArray compressed,final long pos,final long searchKey,final int ngramOrder,final T outputVal,final long searchOffset){  final long firstKey=compressed.get(pos);  final BitStream bits=getCompressedBits(compressed,pos + 1);  final long offset=offsetCoder.decompress(bits);  final boolean wordBitOn=bits.nextBit();  int currWord=wordOf(firstKey);  long currSuffix=contextOffsetOf(firstKey);  final boolean foundKeyFirst=searchOffset >= 0 ? searchOffset == offset : firstKey == searchKey;  final CompressibleValueContainer<T> compressibleValues=(CompressibleValueContainer<T>)values;  compressibleValues.decompress(bits,ngramOrder,!foundKeyFirst,outputVal);  if (foundKeyFirst)   return searchOffset >= 0 ? firstKey : offset;  long currKey=-1;  for (int k=1; !bits.finished(); ++k) {    int newWord=-1;    long nextSuffix=-1;    if (wordBitOn) {      final int wordDelta=(int)wordCoder.decompress(bits);      final boolean wordDeltaIsZero=wordDelta == 0;      final long suffixDelta=suffixCoder.decompress(bits);      newWord=currWord + wordDelta;      nextSuffix=wordDeltaIsZero ? (currSuffix + suffixDelta) : suffixDelta;    } else {      final long suffixDelta=suffixCoder.decompress(bits);      newWord=currWord;      nextSuffix=(currSuffix + suffixDelta);    }    currKey=combineToKey(newWord,nextSuffix);    currWord=newWord;    currSuffix=nextSuffix;    final long currOffset=offset + k;    final boolean foundKey=searchOffset >= 0 ? searchOffset == currOffset : currKey == searchKey;    compressibleValues.decompress(bits,ngramOrder,!foundKey,outputVal);    if (foundKey) {      return searchOffset >= 0 ? currKey : currOffset;    }    if (searchOffset >= 0) {      if (currOffset > searchOffset)       return -1;    } else     if (currKey > searchKey)     return -1;  }  return -1;}  }
class C{  public boolean removeEdge(Edge e){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public static void test_diff_getInstanceVariable(){  Target2 target=new Target2();  target.setInstanceMagri(10098);  assertSame(10098,target.instanceMagri);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.684 -0500",hash_original_method="7ABF15BC63C3D8D706564084308C24AA",hash_generated_method="8B63F8B806AFB677E63BCABBAD3CA2D8") public ObjectIdentifier(int[] oid){  validateOid(oid);  this.oid=oid;}  }
class C{  public boolean isUsingWildcard(){  for (  SelectClauseElementCompiled element : selectClauseElements) {    if (element instanceof SelectClauseElementWildcard) {      return true;    }  }  return false;}  }
class C{  public static SpannableString typeface(CharSequence sequence,TypefaceCollection typefaceCollection){  return typeface(sequence,typefaceCollection,Typeface.NORMAL);}  }
class C{  @Override public void addParameter(String type,Map<String,Object> processVariables,String uuidElement,Map<String,String> emailParameter) throws MissingParameterException {  String taskTitle=getTaskService().loadTaskTitle(type,processVariables);  emailParameter.put(TEMPLATE_TASK_TITLE,taskTitle);  emailParameter.put(IRemindService.TEMPLATE_SUBJECT,Messages.getString("GsmExecuteEmailHandler.3",taskTitle));  String taskDescription=getTaskService().loadTaskDescription(type,processVariables);  emailParameter.put(TEMPLATE_TASK_DESCRIPTION,taskDescription);}  }
class C{  public DefaultReadFuture(IoSession session){  super(session);}  }
class C{  public void testStats() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())));  Document doc=new Document();  FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);  ft.setIndexOptions(IndexOptions.DOCS);  ft.freeze();  Field f=newField("foo","bar",ft);  doc.add(f);  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  assertEquals(-1,ir.totalTermFreq(new Term("foo",new BytesRef("bar"))));  assertEquals(-1,ir.getSumTotalTermFreq("foo"));  ir.close();  dir.close();}  }
class C{  public void flushFileCache(){  if (mImageProvider != null) {    mImageProvider.flushFileCache();  }}  }
class C{  public object addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:51.375 -0400",hash_original_method="3CBD59E51BDF71619DF7A535106C8B20",hash_generated_method="727D3B804ABECC8E1705A29B02DBA6A9") protected DrmEvent(int uniqueId,int type,String message){  mUniqueId=uniqueId;  mType=type;  if (null != message) {    mMessage=message;  }}  }
class C{  public JmxManager(String host,int beanPort,int registryPort,String serviceName,AuthenticationInfo authInfo){  this.host=host;  this.beanPort=beanPort;  this.registryPort=registryPort;  this.serviceName=serviceName;  this.authenticationInfo=authInfo;  if (authenticationInfo == null) {    try {      authenticationInfo=SecurityHelper.loadAuthenticationInformation();      if (authenticationInfo.isAuthenticationNeeded()) {        PasswordManager passwordManager=new PasswordManager(authenticationInfo,ClientApplicationType.RMI_JMX);        String goodPassword=passwordManager.getEncryptedPasswordForUser(authenticationInfo.getUsername());        authenticationInfo.setPassword(goodPassword);      }    } catch (    ConfigurationException e) {      logger.error(MessageFormat.format("Could not get security information. Will use default values: {0}",e));    }  }}  }
class C{  private void readObject(){}  }
class C{  public void stopAutoFailThread(){  if (isAutoFail() && autoFailThread != null && autoFailThread.isAlive()) {    isTestSuccess.set(true);    if (verbose) {      LOG.info("Stopping auto fail thread...");    }    LOG.info("Stopping auto fail thread...");    autoFailThread.interrupt();  }}  }
class C{  protected void unhandledMessageWritten(OFMessage m){  switchManagerCounters.unhandledMessage.increment();  if (log.isDebugEnabled()) {    String msg=getSwitchStateMessage(m,"Ignoring unexpected written message");    log.debug(msg);  }}  }
class C{  public static int bin2Dec(String binaryString){  int index=0;  int n=binaryString.length() - 1;  int result=0;  return bin2Dec(binaryString,index,n,result);}  }
class C{  public void repaint(){  initialiseHeader();  this.setModel(this.getModel());  return;}  }
class C{  protected URL makeCommentEntryUrl(String issueId,String commentId) throws MalformedURLException {  return new URL(issuesBaseUri + "/" + issueId+ "/comments"+ PROJECTION+ "/"+ commentId);}  }
class C{  private void validateUnions(Class type) throws Exception {  for (  Label label : elements) {    String[] options=label.getPaths();    Contact contact=label.getContact();    for (    String option : options) {      Annotation union=contact.getAnnotation();      Label other=elements.get(option);      if (label.isInline() != other.isInline()) {        throw new UnionException("Inline must be consistent in %s for %s",union,contact);      }      if (label.isRequired() != other.isRequired()) {        throw new UnionException("Required must be consistent in %s for %s",union,contact);      }    }  }}  }
class C{  @Deprecated public SimpleTriggerImpl(String name,String group){  this(name,group,new Date(),null,0,0);}  }
class C{  public CArbitraryViewsTable(final JTree projectTree,final CAbstractTreeViewsTableModel model,final IViewContainer container,final IHelpInformation helpInfo){  super(projectTree,model,container,helpInfo);}  }
class C{  public void onGeolocationPermissionsHidePrompt(){  if (mWebChromeClient == null) {    return;  }  Message hideMessage=obtainMessage(GEOLOCATION_PERMISSIONS_HIDE_PROMPT);  sendMessage(hideMessage);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:05.759 -0500",hash_original_method="709C1002A236E5295587B41728563E8C",hash_generated_method="F4CFC8C1619D6C16694F6E6BC8D04107") public void finish(){  nContextFinish();}  }
class C{  protected static File createDesktopFile(final File scriptFile,final File desktopFile) throws IOException {  final FileWriter fileWriter=new FileWriter(desktopFile);  final BufferedWriter bufferedWriter=new BufferedWriter(fileWriter);  try {    bufferedWriter.write("[Desktop Entry]\n" + "Name=VSTS Protocol Handler\n" + "Comment=Custom protocol handler for the IntelliJ VSTS plugin\n"+ "Exec=" + scriptFile.getAbsolutePath() + " %u\n"+ "Icon=\n"+ "Terminal=False\n"+ "Type=Application\n"+ "X-MultipleArgs=True\n"+ "MimeType=x-scheme-handler/vsoi\n"+ "Encoding=UTF-8\n"+ "Categories=Network;Application;");  }  finally {    if (bufferedWriter != null) {      bufferedWriter.close();    }  }  return desktopFile;}  }
class C{  public void unregister(OnExternalResourcesChangeListener listener){  Logger.v(TAG,"Unregister listener:" + listener.getClass().getSimpleName());  listeners.remove(listener);}  }
class C{  private boolean dispatchDrawUsingBitmap(Canvas canvas){  Bitmap unmaskBitmap=tryObtainRenderUnmaskBitmap();  Bitmap maskBitmap=tryObtainRenderMaskBitmap();  if (unmaskBitmap == null || maskBitmap == null) {    return false;  }  drawUnmasked(new Canvas(unmaskBitmap));  canvas.drawBitmap(unmaskBitmap,0,0,mAlphaPaint);  drawMasked(new Canvas(maskBitmap));  canvas.drawBitmap(maskBitmap,0,0,null);  return true;}  }
class C{  public void deinstall(JTextComponent c){  if (!(c instanceof RTextArea))   throw new IllegalArgumentException("c must be instance of RTextArea");  super.deinstall(c);}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  Iterator<NBT_Tag> iter=elements.iterator();  while (iter.hasNext()) {    NBT_Tag ret=iter.next();    ret.save(stream);  }  TAG_End end=new TAG_End("");  end.save(stream);}  }
class C{  public boolean remove(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.remove(o);  }  finally {    lock.unlock();  }}  }
class C{  public int freeBlocks(int num){  assert num >= 0 : "free blocks must be >= 0 but was: " + num;  final int stop;  final int count;  if (num > freeBlocks) {    stop=0;    count=freeBlocks;  } else {    stop=freeBlocks - num;    count=num;  }  while (freeBlocks > stop) {    freeByteBlocks[--freeBlocks]=null;  }  bytesUsed.addAndGet(-count * blockSize * Integer.BYTES);  assert bytesUsed.get() >= 0;  return count;}  }
class C{  public void show(){  if (comboBox instanceof CComboBox && !((CComboBox)comboBox).displayPopup())   return;  if (comboBox instanceof CField && !((CField)comboBox).displayPopup())   return;  super.show();}  }
class C{  public static Object map(final JBBPFieldStruct rootStructure,final Object mappingClassInstance,final JBBPMapperCustomFieldProcessor customFieldProcessor){  return map(rootStructure,mappingClassInstance,customFieldProcessor,0);}  }
class C{  @Override public void onFinishInflate(){  if (!alreadyInflated_) {    alreadyInflated_=true;    inflate(getContext(),layout.gv_item_menu,this);    onViewChangedNotifier_.notifyViewChanged(this);  }  super.onFinishInflate();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TYPE__CONSTRAINT:    getConstraint().clear();  return;case TypesPackage.TYPE__ABSTRACT:setAbstract(ABSTRACT_EDEFAULT);return;case TypesPackage.TYPE__VISIBLE:setVisible(VISIBLE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public void onDetailLoadSuccess(final Media item){  MediaDetailActivity.startActivity(mContext,item);}  }
class C{  public Jerry prev(){  List<Node> result=new NodeList(nodes.length);  for (  Node node : nodes) {    result.add(node.getPreviousSiblingElement());  }  return new Jerry(this,result);}  }
class C{  public void stop(){  if (started) {    timeUs=elapsedRealtimeMinus(deltaUs);    started=false;  }}  }
class C{  public void defineFillStyle(Color[] colors,int[] ratios,Transform matrix,boolean radial){  GradientFill fill=new GradientFill(colors,ratios,matrix,radial);  elements.add(fill);  for (int i=0; i < colors.length; i++) {    if (colors[i] == null) {      continue;    }    if (colors[i] instanceof AlphaColor) {      hasAlpha=true;    }  }}  }
class C{  public String sqlMetadata_foreignKeyTables(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_foreignKeyTables(catalogName,schemaName);}  }
class C{  protected SVGOMPatternElement(){}  }
class C{  public String toString(){  return this.operatingSystem.toString() + "-" + this.browser.toString();}  }
class C{  public void destroyPresenter(){  this.helper.destroyPresenter();}  }
class C{  @Override protected void recordVersions(RegionVersionHolder vh,BitSet bs){  List<Integer> list=new ArrayList<Integer>();  for (int i=1; i < bs.length(); i++) {    if (bs.get(i)) {      list.add(i);    }  }  Collections.shuffle(list,random);  for (  Integer version : list) {    vh.recordVersion(version);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.009 -0500",hash_original_method="AD0C1E28FA77467C1A6AC08BEE60D8C5",hash_generated_method="AD53C9D2D02AE2A023D701CAAA2EB8F3") public boolean isTypeZero(){  return (protocolIdentifier == 0x40);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:45.042 -0500",hash_original_method="03C848B66796F8DBDE7832677AAFA935",hash_generated_method="4F616F61747CD5D98531C671A2ACFE93") public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= 16;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public boolean isShowingHeaders(){  return mShowingHeaders;}  }
class C{  public void doReply(InputStream in,OutputStream out,String cmd) throws IOException, BadHttpRequest {  if (cmd.startsWith("POST /rmi "))   processRMI(in,out); else   if (cmd.startsWith("POST /lookup "))   lookupName(cmd,in,out); else   super.doReply(in,out,cmd);}  }
class C{  public String globalInfo(){  return "RandomRBF data is generated by first creating a random set of " + "centers for each class. Each center is randomly assigned a weight, " + "a central point per attribute, and a standard deviation. To "+ "generate new instances, a center is chosen at random taking the "+ "weights of each center into consideration. Attribute values are "+ "randomly generated and offset from the center, where the overall "+ "vector has been scaled so that its length equals a value sampled "+ "randomly from the Gaussian distribution of the center. The "+ "particular center chosen determines the class of the instance.\n "+ "RandomRBF data contains only numeric attributes as it is "+ "non-trivial to include nominal values.";}  }
class C{  public int readHeader() throws IOException {  int read=0;  do {    int count=read(readHeader,read,4 - read);    if (count <= 0) {      throw new EOFException("unexpected end of stream, read " + read + " bytes from "+ 4);    }    read+=count;  } while (read < 4);  int packetLength=(readHeader[0] & 0xff) + ((readHeader[1] & 0xff) << 8) + ((readHeader[2] & 0xff) << 16);  lastPacketSeq=(readHeader[3] & 0xff);  logger.trace("read packet seq:" + lastPacketSeq + " length:"+ packetLength+ " remaining:"+ remainingBytes);  return packetLength;}  }
class C{  public void put(final String key,final float value){  put(key,Float.toString(value));}  }
class C{  protected void addDefinition(String namespaceURI,String localName,XBLOMDefinitionElement def,Element imp){  ImportRecord ir=(ImportRecord)imports.get(imp);  DefinitionRecord oldDefRec=null;  DefinitionRecord defRec;  TreeSet defs=(TreeSet)definitionLists.get(namespaceURI,localName);  if (defs == null) {    defs=new TreeSet();    definitionLists.put(namespaceURI,localName,defs);  } else   if (defs.size() > 0) {    oldDefRec=(DefinitionRecord)defs.first();  }  XBLOMTemplateElement template=null;  for (Node n=def.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n instanceof XBLOMTemplateElement) {      template=(XBLOMTemplateElement)n;      break;    }  }  defRec=new DefinitionRecord(namespaceURI,localName,def,template,imp);  defs.add(defRec);  definitions.put(def,imp,defRec);  addDefinitionElementListeners(def,ir);  if (defs.first() != defRec) {    return;  }  if (oldDefRec != null) {    XBLOMDefinitionElement oldDef=oldDefRec.definition;    XBLOMTemplateElement oldTemplate=oldDefRec.template;    if (oldTemplate != null) {      removeTemplateElementListeners(oldTemplate,ir);    }    removeDefinitionElementListeners(oldDef,ir);  }  if (template != null) {    addTemplateElementListeners(template,ir);  }  if (isProcessing) {    rebind(namespaceURI,localName,document.getDocumentElement());  }}  }
class C{  private AFTPClient actionClose() throws PageException {  FTPConnection conn=_createConnection();  AFTPClient client=pool.remove(conn);  Struct cfftp=writeCfftp(client);  cfftp.setEL("succeeded",Caster.toBoolean(client != null));  return client;}  }
class C{  public SourceAwareIterator allMembers(){  return new SourceAwareIterator(false);}  }
class C{  public boolean bytesAvailable(final int expectedBytes){  int bytesLeft=byteStream.available();  return bytesLeft >= expectedBytes;}  }
class C{  @Override public void run(final Plan plan){  processPlan(plan);}  }
class C{  public static ArrayList listTopLevelDirectoriesAndFiles(File rootDir,FilenameFilter filter){  ArrayList list=new ArrayList();  File[] files=rootDir.listFiles(filter);  for (int i=0; i < Array.getLength(files); ++i) {    try {      String filePath=files[i].getCanonicalPath().toLowerCase();      if (filePath.endsWith(File.separator + "swfs") == false) {        list.add(files[i]);      } else {        list.addAll(listTopLevelDirectoriesAndFiles(files[i],filter));      }    } catch (    IOException e) {      e.printStackTrace();    }  }  return list;}  }
class C{  @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") public static void create(File root,BufferedImage splash,BufferedImage icon,String name,String perspective) throws IOException {  String startupMessageRect=rect(MESSAGE_MARGIN,splash.getHeight() - MESSAGE_VOFFSET,splash.getWidth() - 2 * MESSAGE_MARGIN,MESSAGE_HEIGHT);  String startupProgressRect=rect(PROGRESS_MARGIN,splash.getHeight() - PROGRESS_MARGIN - PROGRESS_HEIGHT,splash.getWidth() - 2 * PROGRESS_MARGIN,PROGRESS_HEIGHT);  ImmutableMap<String,Function<String,String>> map=ImmutableMap.of("plugin.xml",null,"plugin_customization.ini",null);  FileMisc.cleanDir(root);  Objects.requireNonNull(splash);  icon=makeSquare(icon);  for (  String subpath : template) {    if (subpath.equals("splash.bmp")) {      writeImage(new File(root,subpath),splash,RESOLUTION_UNCHANGED,"BMP");    } else     if (subpath.startsWith(eclipse) && subpath.endsWith(dot_png)) {      String number=subpath.substring(eclipse.length(),subpath.length() - dot_png.length());      int resolution=Integer.parseInt(number);      writeImage(new File(root,subpath),icon,resolution,"PNG");    } else {      String templateValue=Resources.toString(BrandingProductPlugin.class.getResource(subpath),StandardCharsets.UTF_8);      Function<String,String> function=map.getOrDefault(subpath,Function.identity());      String content=function.apply(templateValue);      Path path=root.toPath().resolve(subpath);      Files.createDirectories(path.getParent());      Files.write(path,content.getBytes(StandardCharsets.UTF_8));    }  }}  }
class C{  public void registerMemoryTrimmable(MemoryTrimmable trimmable){}  }
class C{  private void pushPersonalizedOffers(final String placeId,final User user){  LOG.info("adding a task to recommendations-queue");  Queue queue=QueueFactory.getQueue("recommendations-queue");  try {    String userEmail=user.getEmail();    queue.add(withUrl("/tasks/recommendations").param("userEmail",userEmail).param("placeId",placeId));    LOG.info("task added");  } catch (  RuntimeException e) {    LOG.severe(e.getMessage());  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (anyPlusAccess: ");  result.append(anyPlusAccess);  result.append(", nameOfAnyPlusProperty: ");  result.append(nameOfAnyPlusProperty);  result.append(')');  return result.toString();}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem())   return;  String s=new String(ch,start,length);  append(m_doc.createTextNode(s));}  }
class C{  @Override public IndexInput openInput(String name,IOContext context) throws IOException {  ensureOpen();  ensureCanRead(name);  Path path=directory.resolve(name);  try (FileChannel c=FileChannel.open(path,StandardOpenOption.READ)){    final String resourceDescription="MMapIndexInput(path=\"" + path.toString() + "\")";    final boolean useUnmap=getUseUnmap();    return ByteBufferIndexInput.newInstance(resourceDescription,map(resourceDescription,c,0,c.size()),c.size(),chunkSizePower,new ByteBufferGuard(resourceDescription,useUnmap ? CLEANER : null));  } }  }
class C{  private boolean waitForResultTimedLocked(int resultId){  final long startTimeMillis=SystemClock.uptimeMillis();  if (DEBUG) {    Log.d(TAG,"Waiting for CVOX result with ID " + resultId + "...");  }  while (true) {    if (mResultId > resultId) {      if (DEBUG) {        Log.w(TAG,"Aborted CVOX result");      }      return false;    }    final long elapsedTimeMillis=(SystemClock.uptimeMillis() - startTimeMillis);    if (DEBUG) {      Log.w(TAG,"Check " + mResultId + " versus expected "+ resultId);    }    if (mResultId == resultId) {      if (DEBUG) {        Log.w(TAG,"Received CVOX result after " + elapsedTimeMillis + " ms");      }      return true;    }    final long waitTimeMillis=(RESULT_TIMEOUT - elapsedTimeMillis);    if (waitTimeMillis <= 0) {      if (DEBUG) {        Log.w(TAG,"Timed out while waiting for CVOX result");      }      return false;    }    try {      if (DEBUG) {        Log.w(TAG,"Start waiting...");      }      mResultLock.wait(waitTimeMillis);    } catch (    InterruptedException ie) {      if (DEBUG) {        Log.w(TAG,"Interrupted while waiting for CVOX result");      }    }  }}  }
class C{  public boolean currentFuncResultSeen(){  return !m_currentFuncResult.empty() && m_currentFuncResult.peek() != null;}  }
class C{  Entry read(final String key,final MapHeap base){  Entry ret=null;  try {    String copyOfKey=normalize(key);    if (copyOfKey.length() > keyLength) {      copyOfKey=copyOfKey.substring(0,keyLength);    }    final Map<String,String> record=base.get(UTF8.getBytes(copyOfKey));    ret=(record == null) ? newEntry(copyOfKey,ANONYMOUS,Domains.LOCALHOST,"New Page",UTF8.getBytes("")) : new Entry(copyOfKey,record);  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }catch (  final SpaceExceededException e) {    ConcurrentLog.logException(e);  }  return ret;}  }
class C{  public synchronized void removeThresholdDataListener(ThresholdDataListener cl){  m_thresholdListeners.remove(cl);}  }
class C{  public void reverse(long srcPos,long destPos){  assert srcPos < destPos;  assert destPos < getPosition();  int srcBlockIndex=(int)(srcPos >> blockBits);  int src=(int)(srcPos & blockMask);  byte[] srcBlock=blocks.get(srcBlockIndex);  int destBlockIndex=(int)(destPos >> blockBits);  int dest=(int)(destPos & blockMask);  byte[] destBlock=blocks.get(destBlockIndex);  int limit=(int)(destPos - srcPos + 1) / 2;  for (int i=0; i < limit; i++) {    byte b=srcBlock[src];    srcBlock[src]=destBlock[dest];    destBlock[dest]=b;    src++;    if (src == blockSize) {      srcBlockIndex++;      srcBlock=blocks.get(srcBlockIndex);      src=0;    }    dest--;    if (dest == -1) {      destBlockIndex--;      destBlock=blocks.get(destBlockIndex);      dest=blockSize - 1;    }  }}  }
class C{  public boolean hasOwnedAnnotation(final TAnnotableElement element){  return getOwnedAnnotation(element) != null;}  }
class C{  public IDrawerItem generateMiniDrawerItem(IDrawerItem drawerItem){  if (drawerItem instanceof PrimaryDrawerItem) {    return new MiniDrawerItem((PrimaryDrawerItem)drawerItem).withEnableSelectedBackground(mEnableSelectedMiniDrawerItemBackground);  } else   if (drawerItem instanceof SecondaryDrawerItem && mIncludeSecondaryDrawerItems) {    return new MiniDrawerItem((SecondaryDrawerItem)drawerItem).withEnableSelectedBackground(mEnableSelectedMiniDrawerItemBackground);  } else   if (drawerItem instanceof ProfileDrawerItem) {    MiniProfileDrawerItem mpdi=new MiniProfileDrawerItem((ProfileDrawerItem)drawerItem);    mpdi.withEnabled(mEnableProfileClick);    return mpdi;  }  return null;}  }
class C{  public TypeReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean insideDocComment,SearchParticipant participant,IResource resource){  super(enclosingElement,accuracy,offset,length,insideDocComment,participant,resource);}  }
class C{  public void shiftLines(String text,boolean forward){  if (text.length() == 0)   return;  int linesInText=(text.length() - 1) / numberOfColumns + 1;  int currentLimit=Math.min(data.length(),linesTimesColumns);  TextChangingEvent event=new TextChangingEvent(this);  event.start=forward ? 0 : currentLimit;  event.newText=text;  event.replaceCharCount=0;  event.newCharCount=text.length();  event.replaceLineCount=0;  event.newLineCount=linesInText;  for (  TextChangeListener myTextListener : textListeners)   myTextListener.textChanging(event);  data.insert(event.start,text);  TextChangedEvent changedEvent=new TextChangedEvent(this);  for (  TextChangeListener myTextListener : textListeners)   myTextListener.textChanged(changedEvent);  event=new TextChangingEvent(this);  event.start=forward ? linesTimesColumns - 1 : 0;  event.newText="";  event.replaceCharCount=linesInText * numberOfColumns - linesTimesColumns + currentLimit;  event.newCharCount=0;  event.replaceLineCount=linesInText;  event.newLineCount=0;  for (  TextChangeListener myTextListener : textListeners)   myTextListener.textChanging(event);  if (forward)   data.delete(linesTimesColumns,linesTimesColumns + event.replaceCharCount); else   data.delete(0,event.replaceCharCount);  changedEvent=new TextChangedEvent(this);  for (  TextChangeListener myTextListener : textListeners)   myTextListener.textChanged(changedEvent);}  }
class C{  public int degree(){  if (terms.size() > 0) {    return terms.get(0).expt;  } else {    return 0;  }}  }
class C{  public void goReturnPointExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  InvocationStack invocationStack=getInvocationStack(request);  ClientInvocation lastClientReturnPoint=invocationStack.goToReturnPoint(request);  if ((lastClientReturnPoint != null) && (lastClientReturnPoint == invocationStack.getHome())) {    setReturnActionFordward(request,new ActionForward("/action/homepage?method=loadBandeja",true));  } else {    ActionRedirect redirect=new ActionRedirect(new ActionForward(lastClientReturnPoint.getInvocationURI(),true),true);    if (lastClientReturnPoint.getTreeView() != null) {      redirect.addParameter(Constants.TREE_VIEW_RELOAD,Boolean.TRUE);    }    setReturnActionFordward(request,redirect);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  @Override public void start(){}  }
class C{  public boolean equals(Message that){  if (that == null) {    return false;  }  boolean this_present_receivers=true & this.isSetReceivers();  boolean that_present_receivers=true & that.isSetReceivers();  if (this_present_receivers || that_present_receivers) {    if (!(this_present_receivers && that_present_receivers)) {      return false;    }    if (!this.receivers.equals(that.receivers)) {      return false;    }  }  boolean this_present_sender=true & this.isSetSender();  boolean that_present_sender=true & that.isSetSender();  if (this_present_sender || that_present_sender) {    if (!(this_present_sender && that_present_sender)) {      return false;    }    if (!this.sender.equals(that.sender)) {      return false;    }  }  boolean this_present_subject=true & this.isSetSubject();  boolean that_present_subject=true & that.isSetSubject();  if (this_present_subject || that_present_subject) {    if (!(this_present_subject && that_present_subject)) {      return false;    }    if (!this.subject.equals(that.subject)) {      return false;    }  }  boolean this_present_messageType=true & this.isSetMessageType();  boolean that_present_messageType=true & that.isSetMessageType();  if (this_present_messageType || that_present_messageType) {    if (!(this_present_messageType && that_present_messageType)) {      return false;    }    if (!this.messageType.equals(that.messageType)) {      return false;    }  }  boolean this_present_extendAttrs=true & this.isSetExtendAttrs();  boolean that_present_extendAttrs=true & that.isSetExtendAttrs();  if (this_present_extendAttrs || that_present_extendAttrs) {    if (!(this_present_extendAttrs && that_present_extendAttrs)) {      return false;    }    if (!this.extendAttrs.equals(that.extendAttrs)) {      return false;    }  }  boolean this_present_attachments=true & this.isSetAttachments();  boolean that_present_attachments=true & that.isSetAttachments();  if (this_present_attachments || that_present_attachments) {    if (!(this_present_attachments && that_present_attachments)) {      return false;    }    if (!this.attachments.equals(that.attachments)) {      return false;    }  }  boolean this_present_params=true & this.isSetParams();  boolean that_present_params=true & that.isSetParams();  if (this_present_params || that_present_params) {    if (!(this_present_params && that_present_params)) {      return false;    }    if (!this.params.equals(that.params)) {      return false;    }  }  return true;}  }
class C{  public final boolean compareAndSet(double expect,double update){  return updater.compareAndSet(this,doubleToRawLongBits(expect),doubleToRawLongBits(update));}  }
class C{  public void run(){  LogConnection connection=null;  Protocol protocol;  try {    protocol=new Protocol(context,socket,resetPeriod);  } catch (  SSLHandshakeException e) {    logger.error("Received SSL handshake exception",e);    logger.error("SSL handshake failed; ensure client replicator has SSL enabled: host=" + socket.getSocket().getInetAddress().toString());    return;  }catch (  IOException e) {    logger.error("Unable to start connector handler",e);    return;  }  try {    long minSeqno, maxSeqno;    maxSeqno=thl.getMaxStoredSeqno();    minSeqno=thl.getMinStoredSeqno();    LogValidator logValidator=new LogValidator();    protocol.serverHandshake(logValidator,minSeqno,maxSeqno,server.isUseSSL());    Thread.currentThread().setName("connector-handler-" + protocol.getClientSourceId());    while (!cancelled) {      ProtocolReplEventRequest request;      request=protocol.waitReplEventRequest();      long seqno=request.getSeqNo();      if (logger.isDebugEnabled())       logger.debug("Request " + seqno);      long prefetchRange=request.getPrefetchRange();      short fragno=0;      if (connection == null) {        if (this.altSeqno > -1) {          logger.info("Seeking alternate sequence number: seqno=" + altSeqno);          seqno=altSeqno;          altSeqno=-1;        }        connection=thl.connect(true);        if (!connection.seek(seqno)) {          String message="Requested event (#" + seqno + " / "+ fragno+ ") not found in database";          logger.warn(message);          sendError(protocol,message);          return;        }        connection.setTimeoutMillis(heartbeatMillis);      }      long i=0;      while (i < prefetchRange) {        THLEvent event=null;        try {          event=connection.next(true);        } catch (        LogTimeoutException e) {          sendHeartbeat(protocol);          continue;        }        if (event == null) {          continue;        }        if (checkFirstSeqno) {          logger.info("Checking first seqno returned by THL for consistency: client expected seqno=" + seqno + " server returned seqno="+ event.getSeqno());          if (event.getSeqno() != seqno) {            THLException e=new THLException("Server does not have seqno expected by the client: client requested seqno=" + seqno + " server seqno returned="+ event.getSeqno());            protocol.sendError(e.getMessage());            throw e;          }          checkFirstSeqno=false;        }        ReplEvent revent=event.getReplEvent();        if (revent instanceof ReplDBMSEvent && ((ReplDBMSEvent)revent).getDBMSEvent() instanceof DBMSEmptyEvent) {          if (logger.isDebugEnabled())           logger.debug("Got an empty event");          sendEvent(protocol,revent,(seqno + i >= thl.getMaxStoredSeqno()));          i++;          fragno=0;        } else {          if (revent instanceof ReplDBMSEvent) {            ReplDBMSEvent replDBMSEvent=(ReplDBMSEvent)revent;            if (replDBMSEvent.getLastFrag()) {              if (replDBMSEvent instanceof ReplDBMSFilteredEvent) {                ReplDBMSFilteredEvent ev=(ReplDBMSFilteredEvent)replDBMSEvent;                i+=1 + ev.getSeqnoEnd() - ev.getSeqno();              } else {                if (logger.isDebugEnabled())                 logger.debug("Last fragment of event " + replDBMSEvent.getSeqno() + " reached : "+ replDBMSEvent.getFragno());                i++;              }              fragno=0;            } else {              if (logger.isDebugEnabled())               logger.debug("Not the last frag for event " + replDBMSEvent.getSeqno() + "("+ replDBMSEvent.getFragno()+ ")");              if (replDBMSEvent instanceof ReplDBMSFilteredEvent) {                ReplDBMSFilteredEvent ev=(ReplDBMSFilteredEvent)replDBMSEvent;                fragno=(short)(ev.getFragnoEnd() + 1);              } else               fragno++;            }          } else {            if (logger.isDebugEnabled())             logger.debug("Got " + revent.getClass());            i++;            fragno=0;          }          sendEvent(protocol,revent,(seqno + i >= thl.getMaxStoredSeqno()));        }      }    }  } catch (  InterruptedException e) {    if (cancelled)     logger.info("Connector handler cancelled"); else     logger.error("Connector handler terminated by unexpected interrupt",e);  }catch (  EOFException e) {    if (logger.isDebugEnabled())     logger.debug("Connector handler terminated by java.io.EOFException",e); else     logger.info("Connector handler terminated by java.io.EOFException");  }catch (  IOException e) {    if (logger.isDebugEnabled())     logger.debug("Connector handler terminated by i/o exception",e); else     logger.info("Connector handler terminated by i/o exception");  }catch (  THLException e) {    String message="Connector handler terminated by THL exception: " + e.getMessage();    logger.error(message,e);    try {      sendError(protocol,message);    } catch (    IOException e2) {      logger.warn("Unable to send error to client, disconnecting");    }  }catch (  Throwable t) {    String message="Connector handler terminated by unexpected exception";    logger.error(message,t);    try {      sendError(protocol,message);    } catch (    IOException e2) {      logger.warn("Unable to send error to client, disconnecting");    }  } finally {    if (connection != null)     connection.release();    try {      socket.close();    } catch (    Exception e) {      logger.warn("Error on closing connection handle",e);    }    server.removeClient(this);    logger.info("Terminating THL client connection from source ID: " + protocol.getClientSourceId());  }}  }
class C{  public boolean isQuiesce(){  return quiesce;}  }
class C{  private static Uri createDirectoryAndSaveFile(Context context,InputStream inputStream,String fileName){  Bitmap imageToSave=BitmapFactory.decodeStream(inputStream);  if (imageToSave == null)   return null;  File directory=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) + "/ImageDir");  if (!directory.exists()) {    File newDirectory=new File(directory.getAbsolutePath());    newDirectory.mkdirs();  }  File file=new File(directory,getTemporaryFilename(fileName));  if (file.exists())   file.delete();  try (FileOutputStream outputStream=new FileOutputStream(file)){    imageToSave.compress(Bitmap.CompressFormat.JPEG,100,outputStream);    outputStream.flush();  } catch (  Exception e) {    return null;  }  String absolutePathToImage=file.getAbsolutePath();  ContentValues values=new ContentValues();  values.put(Images.Media.TITLE,fileName);  values.put(Images.Media.DESCRIPTION,fileName);  values.put(Images.Media.DATE_TAKEN,System.currentTimeMillis());  values.put(Images.ImageColumns.BUCKET_DISPLAY_NAME,file.getName().toLowerCase(Locale.US));  values.put("_data",absolutePathToImage);  ContentResolver cr=context.getContentResolver();  cr.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);  Log.d(TAG,"absolute path to image file is " + absolutePathToImage);  return Uri.parse(absolutePathToImage);}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  DataSetEvent de=new DataSetEvent(e.getSource(),e.getTrainingSet());  acceptDataSet(de);}  }
class C{  protected long checkInstant(long instant,Chronology chronology){  return chronology.dayOfMonth().roundFloor(instant);}  }
class C{  public int compareTo(Object o){  BufferSubgraph graph=(BufferSubgraph)o;  if (this.rightMostCoord.x < graph.rightMostCoord.x) {    return -1;  }  if (this.rightMostCoord.x > graph.rightMostCoord.x) {    return 1;  }  return 0;}  }
class C{  void put(final ByteVector out){  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / (ClassWriter.ACC_SYNTHETIC_ATTRIBUTE / Opcodes.ACC_SYNTHETIC));  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  out.putShort(attributeCount);}  }
class C{  public static double normalInverse(double y0){  double x, y, z, y2, x0, x1;  int code;  final double s2pi=Math.sqrt(2.0 * Math.PI);  if (y0 <= 0.0)   throw new IllegalArgumentException();  if (y0 >= 1.0)   throw new IllegalArgumentException();  code=1;  y=y0;  if (y > (1.0 - 0.13533528323661269189)) {    y=1.0 - y;    code=0;  }  if (y > 0.13533528323661269189) {    y=y - 0.5;    y2=y * y;    x=y + y * (y2 * polevl(y2,P0,4) / p1evl(y2,Q0,8));    x=x * s2pi;    return (x);  }  x=Math.sqrt(-2.0 * Math.log(y));  x0=x - Math.log(x) / x;  z=1.0 / x;  if (x < 8.0)   x1=z * polevl(z,P1,8) / p1evl(z,Q1,8); else   x1=z * polevl(z,P2,8) / p1evl(z,Q2,8);  x=x0 - x1;  if (code != 0)   x=-x;  return (x);}  }
class C{  public Builder addMatch1Method(Match1MethodSpec match1MethodSpec){  match1Methods.addAll(new Match1MethodPermutationBuilder(matchType,match1MethodSpec,MAX_ARITY).build());  return this;}  }
class C{  public static boolean isBlackListed(@Nonnull Size size,@Nonnull String blacklistString){  String[] blacklistStringArray=blacklistString.split(",");  if (blacklistStringArray.length == 0) {    return false;  }  Set<String> blacklistedSizes=new HashSet(Lists.newArrayList(blacklistStringArray));  return isBlackListed(size,blacklistedSizes);}  }
class C{  @NotNull @ObjectiveCName("deleteGroupWithGid:") public Promise<Void> deleteGroup(int gid){  return modules.getGroupsModule().deleteGroup(gid);}  }
class C{  public static boolean write(OutputStream stream,Object o) throws Exception {  Class<?> xstreamClass;  java.lang.reflect.Constructor<?> constructor;  Object xstream;  Class<?>[] serializeArgsClasses=new Class[2];  Object[] serializeArgs=new Object[2];  java.lang.reflect.Method methodSerialize;  boolean result=false;  xstreamClass=Class.forName("com.thoughtworks.xstream.XStream");  constructor=xstreamClass.getConstructor();  xstream=constructor.newInstance();  serializeArgsClasses[0]=Object.class;  serializeArgsClasses[1]=OutputStream.class;  serializeArgs[0]=o;  serializeArgs[1]=stream;  methodSerialize=xstreamClass.getMethod("toXML",serializeArgsClasses);  try {    methodSerialize.invoke(xstream,serializeArgs);    result=true;  } catch (  Exception ex) {    result=false;  }  return result;}  }
class C{  public static void printf(String pattern,Object... args){  Clock.assertStopped();  System.err.printf(pattern,args);  System.err.flush();}  }
class C{  private void updateLimit(int limit){  currentCycle.setLimit(limit);  updatePlanCycles();  confirmUpdate.setTextColor(resources.getColor(R.color.light_gray));}  }
class C{  public OtherName(ObjectIdentifier oid,byte[] value) throws IOException {  if (oid == null || value == null) {    throw new NullPointerException("parameters may not be null");  }  this.oid=oid;  this.nameValue=value;  gni=getGNI(oid,value);  if (gni != null) {    name=gni.toString();  } else {    name="Unrecognized ObjectIdentifier: " + oid.toString();  }}  }
class C{  public void writeToObject(Object data){  getTable().commitEditing();  Property[] properties=getProperties();  for (int i=0, c=properties.length; i < c; i++) {    properties[i].writeToObject(data);  }}  }
class C{  protected FullTextSettings(){}  }
class C{  @Override public boolean supportsGetGeneratedKeys(){  debugCodeCall("supportsGetGeneratedKeys");  return true;}  }
class C{  public void sendToAllAround(IMessage message,NetworkRegistry.TargetPoint point){  netHandler.sendToAllAround(message,point);}  }
class C{  @SuppressWarnings("deprecation") public int removeAbove(final Vector position,final int apothem,final int height) throws MaxChangedBlocksException {  checkNotNull(position);  checkArgument(apothem >= 1,"apothem >= 1");  checkArgument(height >= 1,"height >= 1");  final Region region=new CuboidRegion(this.getWorld(),position.add(-apothem + 1,0,-apothem + 1),position.add(apothem - 1,height - 1,apothem - 1));  final Pattern pattern=new SingleBlockPattern(new BaseBlock(BlockID.AIR));  return this.setBlocks(region,pattern);}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByVDC(String shortVdcId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.VDC_ID_PARAM,shortVdcId);  VirtualPoolList response=client.getURI(VirtualPoolList.class,builder.build());  return ResourceUtils.defaultList(response.getVirtualPool());}  }
class C{  public boolean canUserInitiateMoveFromEmptySquare(int squareId){  if (isBughouse() && ChessBoardUtils.isPieceJailSquare(squareId)) {    return isUserWhite && ChessBoardUtils.isJailSquareWhitePiece(squareId) || !isUserWhite && ChessBoardUtils.isJailSquareBlackPiece(squareId);  } else {    return false;  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Product_ID"))     p_M_Product_ID=para[i].getParameterAsInt(); else     if (name.equals("Qty"))     p_Qty=(BigDecimal)para[i].getParameter(); else     if (name.equals("IsCreateSingleOrder"))     p_IsCreateSingleOrder="Y".equals(para[i].getParameter()); else     if (name.equals("Bill_BPartner_ID"))     p_Bill_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("p_Bill_Location_ID"))     p_Bill_Location_ID=para[i].getParameterAsInt(); else     if (name.equals("IsTest"))     p_IsTest="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_M_DistributionList_ID=getRecord_ID();}  }
class C{  public void mkdir(String key) throws IOException {  key=key.replace(" ","");  if (key.endsWith("/") && !key.equals("/")) {    throw new InvalidParameterException("Trailing slash not allowed in zookeeper path");  }  String[] split=key.split("/");  StringBuilder builder=new StringBuilder();  for (  String s : split) {    builder.append(s);    if (!s.isEmpty() && !exists(builder.toString())) {      zkState.set(builder.toString(),null);    }    builder.append("/");  }}  }
class C{  public boolean hasFeature(String feature,String version){  return getDOMImplementation().hasFeature(feature,version);}  }
class C{  public nobr removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private Object stringToObject(MColumn column,String value){  if (value == null)   return null;  if (DisplayType.isText(column.getAD_Reference_ID()) || column.getAD_Reference_ID() == DisplayType.List || column.getColumnName().equals("EntityType") || column.getColumnName().equals("AD_Language")) {    return value;  } else   if (DisplayType.isNumeric(column.getAD_Reference_ID())) {    return new BigDecimal(value);  } else   if (DisplayType.isID(column.getAD_Reference_ID())) {    return Integer.valueOf(value);  } else   if (DisplayType.YesNo == column.getAD_Reference_ID()) {    return "true".equalsIgnoreCase(value);  } else   if (DisplayType.Button == column.getAD_Reference_ID() && column.getAD_Reference_Value_ID() == 0) {    return "true".equalsIgnoreCase(value) ? "Y" : "N";  } else   if (DisplayType.Button == column.getAD_Reference_ID() && column.getAD_Reference_Value_ID() != 0) {    return value;  } else   if (DisplayType.isDate(column.getAD_Reference_ID())) {    return Timestamp.valueOf(value);  } else   return null;}  }
class C{  public List<EdxLocalParseChannel> filterForInactiveCourses(List<CourseEntry> courseEntryList){  Set<String> activeCourseList=new HashSet<>();  for (  CourseEntry entry : courseEntryList) {    activeCourseList.add(entry.getId());  }  List<EdxLocalParseChannel> inactiveCourseList=new LinkedList<EdxLocalParseChannel>();  for (  EdxLocalParseChannel pc : this) {    if (!activeCourseList.contains(pc.getCourseId())) {      inactiveCourseList.add(pc);    }  }  return inactiveCourseList;}  }
class C{  public RPClassDumper(String outputFolder){  this.outputFolder=outputFolder;}  }
class C{  protected long unwrapValue(Object value){  return ((Long)value).longValue();}  }
class C{  public boolean isInRange(long value,long min,long max){  return LONG_VALIDATOR.isInRange(value,min,max);}  }
class C{  protected void nodeToBeRemoved(Node n){}  }
class C{  private int _convertSurrogate(int firstPart,int secondPart){  if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {    throw new IllegalArgumentException("Broken surrogate pair: first char 0x" + Integer.toHexString(firstPart) + ", second 0x"+ Integer.toHexString(secondPart)+ "; illegal combination");  }  return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);}  }
class C{  public static int truncatedCompareTo(final Calendar cal1,final Calendar cal2,final int field){  final Calendar truncatedCal1=truncate(cal1,field);  final Calendar truncatedCal2=truncate(cal2,field);  return truncatedCal1.compareTo(truncatedCal2);}  }
class C{  public RuntimePermission(String name,String actions){  super(name,actions);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RAckParser.parse");  RAck rack=new RAck();  try {    headerName(TokenTypes.RACK);    rack.setHeaderName(SIPHeaderNames.RACK);    try {      String number=this.lexer.number();      rack.setRSequenceNumber(Long.parseLong(number));      this.lexer.SPorHT();      number=this.lexer.number();      rack.setCSequenceNumber(Long.parseLong(number));      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      rack.setMethod(token.getTokenValue());    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return rack;  }  finally {    if (debug)     dbg_leave("RAckParser.parse");  }}  }
class C{  public static ReferenceContainerCache<HostReference> collect(final SeedDB seeds,final WebStructureGraph myGraph,int maxcount){  final ReferenceContainerCache<HostReference> index=new ReferenceContainerCache<HostReference>(WebStructureGraph.hostReferenceFactory,Base64Order.enhancedCoder,6);  final Iterator<Seed> si=seeds.seedsConnected(true,false,null,0.99f);  final ArrayList<IndexRetrieval> jobs=new ArrayList<IndexRetrieval>();  while (maxcount-- > 0 && si.hasNext()) {    final IndexRetrieval loader=new IndexRetrieval(index,si.next());    loader.start();    jobs.add(loader);  }  if (myGraph != null)   try {    final ReferenceContainerCache<HostReference> myIndex=myGraph.incomingReferences();    ConcurrentLog.info("BlockRank","loaded " + myIndex.size() + " host indexes from my peer");    index.merge(myIndex);  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }catch (  final SpaceExceededException e) {    ConcurrentLog.logException(e);  }  for (  final IndexRetrieval job : jobs)   try {    job.join();  } catch (  final InterruptedException e) {  }  ConcurrentLog.info("BlockRank","create " + index.size() + " host indexes from all peers");  return index;}  }
class C{  public SnmpOpaque(String v){  super(v);}  }
class C{  public boolean isInRange(short value,short min,short max){  return SHORT_VALIDATOR.isInRange(value,min,max);}  }
class C{  public void randomize(){  int i;  for (i=0; i < blocks; i++) {    value[i]=rand.nextInt();  }  zeroUnusedBits();}  }
class C{  private static DoubleWritable covertToDistance(DoubleWritable value){  if (Math.abs(value.get()) > 0) {    value.set((1.0 / value.get()) - 1.0);  } else {    value.set(Double.MAX_VALUE);  }  return value;}  }
class C{  public CustomizedDistributedRowLock<K> expireLockAfter(long timeout,TimeUnit unit){  this.timeout=timeout;  this.timeoutUnits=unit;  return this;}  }
class C{  public void renderWithParents(float scale){  if (this.parent != null) {    this.parent.renderWithParents(scale);  }  this.render(scale);}  }
class C{  @SuppressWarnings({"rawtypes"}) public boolean consumeItems(@Nonnull IInventory inv,@Nonnull List expected){  final int[] slots=findItemSlots(inv,expected);  if (!checkSlotsAndSizes(inv,expected,slots))   return false;  return consumeItemsInSlots(inv,expected,slots);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void failure(MessageInfo messageInfo,String faultCode,String faultMessage){  if (monitorAgentImpl != null) {    monitorAgentImpl.failure(messageInfo,faultCode,faultMessage);  }}  }
class C{  public boolean revokeSharedContact(ContactId contact) throws PayloadException, NetworkException {  HttpResponse response=mXdm.addContactToRevokedList(contact);  if ((response == null) || (!response.isSuccessfullResponse())) {    return false;  }  response=mXdm.removeContactFromGrantedList(contact);  if ((response != null) && (response.isSuccessfullResponse() || response.isNotFoundResponse())) {    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:01.569 -0400",hash_original_method="77A09A4D28981B0EED9193BA2388A580",hash_generated_method="0D0FA58CCC10978747A5E4E7C40D6623") public AtCommandResult process(String raw_input){  String input=clean(raw_input);  if (input.regionMatches(0,"A/",0,2)) {    input=new String(mLastInput);  } else {    mLastInput=new String(input);  }  if (input.equals("")) {    return new AtCommandResult(AtCommandResult.UNSOLICITED);  }  if (!input.regionMatches(0,"AT",0,2)) {    return new AtCommandResult(AtCommandResult.ERROR);  }  int index=2;  AtCommandResult result=new AtCommandResult(AtCommandResult.UNSOLICITED);  while (index < input.length()) {    char c=input.charAt(index);    if (isAtoZ(c)) {      String args=input.substring(index + 1);      if (mBasicHandlers.containsKey((Character)c)) {        result.addResult(mBasicHandlers.get((Character)c).handleBasicCommand(args));        return result;      } else {        result.addResult(new AtCommandResult(AtCommandResult.ERROR));        return result;      }    }    if (c == '+') {      int i=findEndExtendedName(input,index + 1);      String commandName=input.substring(index,i);      if (!mExtHandlers.containsKey(commandName)) {        result.addResult(new AtCommandResult(AtCommandResult.ERROR));        return result;      }      AtCommandHandler handler=mExtHandlers.get(commandName);      int endIndex=findChar(';',input,index);      int type;      if (i >= endIndex) {        type=TYPE_ACTION;      } else       if (input.charAt(i) == '?') {        type=TYPE_READ;      } else       if (input.charAt(i) == '=') {        if (i + 1 < endIndex) {          if (input.charAt(i + 1) == '?') {            type=TYPE_TEST;          } else {            type=TYPE_SET;          }        } else {          type=TYPE_SET;        }      } else {        type=TYPE_ACTION;      }switch (type) {case TYPE_ACTION:        result.addResult(handler.handleActionCommand());      break;case TYPE_READ:    result.addResult(handler.handleReadCommand());  break;case TYPE_TEST:result.addResult(handler.handleTestCommand());break;case TYPE_SET:Object[] args=generateArgs(input.substring(i + 1,endIndex));result.addResult(handler.handleSetCommand(args));break;}if (result.getResultCode() != AtCommandResult.OK) {return result;}index=endIndex;} else {index++;}}return result;}  }
class C{  private Set<URI> filterExportMasksByVPlexRequirements(StorageSystem vplex,StorageSystem array,URI varrayURI,ExportMaskPlacementDescriptor placementDescriptor){  Map<URI,ExportMask> maskSet=placementDescriptor.getMasks();  Map<URI,Volume> volumeMap=placementDescriptor.getVolumesToPlace();  Set<URI> invalidMasks=new HashSet<>();  boolean externallyCreatedMasks=false;  boolean viprCreatedMasks=false;  for (  URI exportMaskURI : placementDescriptor.getPlacedMasks()) {    ExportMask mask=maskSet.get(exportMaskURI);    _log.info(String.format("Validating ExportMask %s (%s) %s",mask.getMaskName(),mask.getId(),(mask.getCreatedBySystem() ? "ViPR created" : "Externally created")));    if (VPlexBackEndOrchestratorUtil.validateExportMask(varrayURI,_initiatorPortMap,mask,invalidMasks,_directorToInitiatorIds,_idToInitiatorMap,_dbClient,_coordinator,_portWwnToClusterMap)) {      if (mask.getCreatedBySystem()) {        viprCreatedMasks=true;      } else {        externallyCreatedMasks=true;      }    }  }  for (  URI invalidMask : invalidMasks) {    placementDescriptor.invalidateExportMask(invalidMask);  }  if (!externallyCreatedMasks || viprCreatedMasks) {    Map<ExportMask,ExportGroup> uninitializedMasks=searchDbForExportMasks(array,_initiators,false);    for (    ExportMask mask : uninitializedMasks.keySet()) {      if (!placementDescriptor.hasUnPlacedVolumes()) {        break;      }      validateMaskAndPlaceVolumes(array,varrayURI,maskSet,invalidMasks,mask,placementDescriptor,volumeMap,String.format("Validating uninitialized ViPR ExportMask %s (%s)",mask.getMaskName(),mask.getId()));    }  }  if (!invalidMasks.isEmpty()) {    _log.info("Following masks were considered invalid: {}",CommonTransformerFunctions.collectionToString(invalidMasks));  }  return invalidMasks;}  }
class C{  public String createUUID(){  return java.util.UUID.randomUUID().toString();}  }
class C{  public Class<?> type(){  if (isClass) {    return (Class<?>)object;  } else {    return object.getClass();  }}  }
class C{  public PowerDatacenterNonPowerAware(String name,DatacenterCharacteristics characteristics,VmAllocationPolicy vmAllocationPolicy,List<Storage> storageList,double schedulingInterval) throws Exception {  super(name,characteristics,vmAllocationPolicy,storageList,schedulingInterval);}  }
class C{  public static void checkArgument(boolean test,String message,Object... arguments){  if (!test) {    throw newIllegalArgumentException(message,arguments);  }}  }
class C{  protected RegionAttributes createRegionAttributesForPR(int redundancy,int localMaxMem){  AttributesFactory attr=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  PartitionAttributes prAttr=paf.setRedundantCopies(redundancy).setLocalMaxMemory(localMaxMem).setTotalNumBuckets(totalNumBuckets).create();  attr.setPartitionAttributes(prAttr);  return attr.create();}  }
class C{  @Provides @Config("brdaInterval") public static Duration provideBrdaInterval(){  return Duration.standardDays(7);}  }
class C{  public double[] nearbyMAVs(MavDemo mavdemo){  for (int i=0; i < 8; i++)   proximitySensors[i]=Double.MAX_VALUE;  final double d=mavdemo.sensorRangeDistance * mavdemo.sensorRangeDistance;  final Bag nearbyMavs=mavdemo.mavs.getNeighborsWithinDistance(new Double2D(x,y),16,false,false);  for (int i=0; i < nearbyMavs.numObjs; i++) {    final Mav mav=(Mav)(nearbyMavs.objs[i]);    final double mavDistance=(mav.x - x) * (mav.x - x) + (mav.y - y) * (mav.y - y);    if (mavDistance < d) {      final int octant=sensorForPoint(mav.x,mav.y);      proximitySensors[octant]=Math.min(proximitySensors[octant],mavDistance);    }  }  return proximitySensors;}  }
class C{  @Deprecated public synchronized void addToW(IFeatureVector fv,float alpha){  super.addSparseFeatureVector(fv,alpha);}  }
class C{  private double resolve_four_points(int ul,int ur,int lr,int ll,double lat_index,double lon_index){  double top_avg=((lon_index - new Double(Math.floor(lon_index)).floatValue()) * (float)(ur - ul)) + ul;  double bottom_avg=((lon_index - new Double(Math.floor(lon_index)).floatValue()) * (float)(lr - ll)) + ll;  double right_avg=((lat_index - new Double(Math.floor(lat_index)).floatValue()) * (float)(ur - lr)) + lr;  double left_avg=((lat_index - new Double(Math.floor(lat_index)).floatValue()) * (float)(ul - ll)) / 100.0F + ll;  double lon_avg=((lat_index - new Double(Math.floor(lat_index)).floatValue()) * (top_avg - bottom_avg)) + bottom_avg;  double lat_avg=((lon_index - new Double(Math.floor(lon_index)).floatValue()) * (right_avg - left_avg)) + left_avg;  double result=(lon_avg + lat_avg) / 2.0;  return result;}  }
class C{  @Override public void close() throws IOException {  finish();  super.close();}  }
class C{  public static final boolean isHexCharacter(char ch){  return (ch <= 'f') && (dataTable[ch] & HEX_CHARACTER_MASK) > 0;}  }
class C{  public void initialize(){  m_matrix=new Object[m_size][m_size];  for (int i=0; i < m_size; i++) {    for (int j=0; j < m_size; j++) {      setCell(i,j,i == j ? new Double(0.0) : new Double(1.0));    }  }}  }
class C{  public UndertowFraction enableHTTPS(String path,String password,String alias){  return enableHTTPS(path,password,password,alias);}  }
class C{  public static void uiImpl_win(){  UIManager.put("FileChooserUI",org.jb2011.lnf.beautyeye.ch20_filechooser.BEFileChooserUIWin.class.getName());}  }
class C{  public void init() throws ServletException {}  }
class C{  public void deRegisterTask(Long taskId){  this.redriverActorProxy.tell(new TaskRedriverDetails(taskId,TaskRedriverDetails.RegisterAction.Deregister),ActorRef.noSender());}  }
class C{  static void compileArrayStoreBarrierShort(Assembler asm,BaselineCompilerImpl compiler){  arrayStoreBarrierHelper(asm,compiler,Entrypoints.shortArrayWriteBarrierMethod);}  }
class C{  PTAgent(BaggageAPI baggageApi,EmitAPI emitApi,DynamicManager dynamic){  this.baggageApi=baggageApi;  this.emitApi=emitApi;  this.dynamic=dynamic;  PubSub.subscribe(PivotTracingConfig.COMMANDS_TOPIC,subscriber);}  }
class C{  public boolean matches(final SysInfoBean s){  Objects.requireNonNull(s);  if (!Objects.equals(osName,s.osName))   return false;  if (!Objects.equals(osVersion,s.osVersion))   return false;  if (!Objects.equals(availProcs,s.availProcs))   return false;  if (!Objects.equals(userName,s.userName))   return false;  if (!Objects.equals(userCountry,s.userCountry))   return false;  if (!Objects.equals(userTimeZone,s.userTimeZone))   return false;  if (!Objects.equals(mainRootSize,s.mainRootSize))   return false;  return true;}  }
class C{  public NATURAL_LEFT_JOIN NATURAL_LEFT_JOIN(String tableToJoin){  return new NATURAL_LEFT_JOIN(this,tableToJoin);}  }
class C{  public void initializeScreen(){  mListView=(ListView)findViewById(R.id.list_view_friends_share);  Toolbar toolbar=(Toolbar)findViewById(R.id.app_bar);  setSupportActionBar(toolbar);  if (getSupportActionBar() != null) {    getSupportActionBar().setDisplayHomeAsUpEnabled(true);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.942 -0500",hash_original_method="EC64256DA9DAF95A4E5DDEFAF84087E3",hash_generated_method="FDE5F684F2AD1C9B8754D076EFA6B089") public boolean stopScoUsingVirtualVoiceCall(BluetoothDevice device){  if (DBG)   log("stopScoUsingVirtualVoiceCall()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.stopScoUsingVirtualVoiceCall(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public boolean isEver(){  return ever;}  }
class C{  void sortTerms(){  if (sortedTerms == null) {    sortedTerms=terms.sort();  }}  }
class C{  public void applyAngularImpulse(float impulse){  applyBodyAngularImpulse(physicsWorld.toMeters(impulse));}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  FeatureBean fb=null;  try {    fb=(FeatureBean)digester.peek();  } catch (  Exception e) {    throw new IllegalStateException("No parent FeatureBean on object stack");  }  String lang=attributes.getValue("lang");  if (lang == null) {    lang=attributes.getValue("xml:lang");  }  if (lang == null) {    lang="";  }  DisplayNameBean dnb=fb.getDisplayName(lang);  if (dnb == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[DisplayNameRule]{" + digester.getMatch() + "} New ("+ lang+ ")");    }    Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);    dnb=(DisplayNameBean)clazz.newInstance();    dnb.setLang(lang);    fb.addDisplayName(dnb);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[DisplayNameRule]{" + digester.getMatch() + "} Old ("+ lang+ ")");    }  }  digester.push(dnb);}  }
class C{  public static CreateInstanceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateInstanceResponse object=new CreateInstanceResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"createInstanceResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (CreateInstanceResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.InstanceResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void addIndex(int index){  add(index >> 8,index);}  }
class C{  @Override public int compareTo(@NonNull Obs other){  if (value == null || other.value == null) {    return Objects.equals(value,other.value) ? 0 : value == null ? -1 : 1;  }  if (conceptType != other.conceptType) {    return getTypeOrdering().compareTo(other.getTypeOrdering());  }  if (conceptType == ConceptType.NUMERIC) {    return Double.valueOf(value).compareTo(Double.valueOf(other.value));  }  if (conceptType == ConceptType.CODED || conceptType == ConceptType.BOOLEAN) {    return getCodedValueOrdering().compareTo(other.getCodedValueOrdering());  }  return value.compareTo(other.value);}  }
class C{  public static String convertTimeSecondsToHMS(long longSecs){  long days=longSecs / (60 * 60 * 24);  long remainder=longSecs % (60 * 60 * 24);  long hours=remainder / (60 * 60);  remainder=remainder % (60 * 60);  long mins=remainder / (60);  remainder=remainder % (60);  long secs=remainder;  String strDaysHrsMinsSecs="";  if (days > 0) {    strDaysHrsMinsSecs+=days + " Days ";  }  if (hours > 0) {    strDaysHrsMinsSecs+=hours + " Hours ";  } else {    strDaysHrsMinsSecs+="0 Hours ";  }  if (mins > 0) {    strDaysHrsMinsSecs+=mins + " Mins ";  } else {    strDaysHrsMinsSecs+="0 Mins ";  }  strDaysHrsMinsSecs+=secs + " Secs";  return strDaysHrsMinsSecs;}  }
class C{  public static boolean downloadUrlToStream(String urlString,OutputStream outputStream){  disableConnectionReuseIfNecessary();  HttpURLConnection urlConnection=null;  BufferedOutputStream out=null;  BufferedInputStream in=null;  try {    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE);    out=new BufferedOutputStream(outputStream,IO_BUFFER_SIZE);    int b;    while ((b=in.read()) != -1) {      out.write(b);    }    return true;  } catch (  final IOException e) {    Log.e(TAG,"Error in downloadBitmap - " + e);  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    try {      if (out != null) {        out.close();      }      if (in != null) {        in.close();      }    } catch (    final IOException e) {    }  }  return false;}  }
class C{  public <T>T fromXML(final URL url){  return fromXML(url,null);}  }
class C{  public void goingToExecuteUnsafeCodeOnSameThread() throws SecurityException, IllegalStateException {  if (!privilegedThreads.contains(Thread.currentThread())) {    throw new SecurityException("Current thread is not privileged");  }  if (privilegedThreadToIgnore != null) {    throw new IllegalStateException("The thread is already executing unsafe code");  }  privilegedThreadToIgnore=Thread.currentThread();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.MULTIPLICITY___BOUND_1:    return BOUND_1_EDEFAULT == null ? bound_1 != null : !BOUND_1_EDEFAULT.equals(bound_1);case UmplePackage.MULTIPLICITY___LOWER_BOUND_1:  return LOWER_BOUND_1_EDEFAULT == null ? lowerBound_1 != null : !LOWER_BOUND_1_EDEFAULT.equals(lowerBound_1);case UmplePackage.MULTIPLICITY___UPPER_BOUND_1:return UPPER_BOUND_1_EDEFAULT == null ? upperBound_1 != null : !UPPER_BOUND_1_EDEFAULT.equals(upperBound_1);case UmplePackage.MULTIPLICITY___BOUND_INT:return bound_int != BOUND_INT_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public ReferenceQueue(){}  }
class C{  public int compareTo(final Date other){  return CoreUtils.nullSafeComparator(this.getZonedDateTime(),other.getZonedDateTime());}  }
class C{  public CombinedCoordPanel(String comment,ActionListener closeButtonListener){  setup(comment,closeButtonListener);}  }
class C{  public void sendLogout(CharSequence text) throws IOException {  prepare(txMessage,Logout);  txMessage.addField(Text).setString(text);  send(txMessage);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static final String crypt(String salt,String original){  while (salt.length() < 2)   salt+="A";  StringBuilder buffer=new StringBuilder(" ");  char charZero=salt.charAt(0);  char charOne=salt.charAt(1);  buffer.setCharAt(0,charZero);  buffer.setCharAt(1,charOne);  int Eswap0=con_salt[charZero];  int Eswap1=con_salt[charOne] << 4;  byte key[]=new byte[8];  for (int i=0; i < key.length; i++)   key[i]=(byte)0;  for (int i=0; i < key.length && i < original.length(); i++) {    int iChar=original.charAt(i);    key[i]=(byte)(iChar << 1);  }  int schedule[]=des_set_key(key);  int out[]=body(schedule,Eswap0,Eswap1);  byte b[]=new byte[9];  intToFourBytes(out[0],b,0);  intToFourBytes(out[1],b,4);  b[8]=0;  for (int i=2, y=0, u=0x80; i < 13; i++) {    for (int j=0, c=0; j < 6; j++) {      c<<=1;      if ((b[y] & u) != 0)       c|=1;      u>>>=1;      if (u == 0) {        y++;        u=0x80;      }      buffer.setCharAt(i,(char)cov_2char[c]);    }  }  return (buffer.toString());}  }
class C{  public Segment(float aX,float aY,float aZ,float bX,float bY,float bZ){  this.a.set(aX,aY,aZ);  this.b.set(bX,bY,bZ);}  }
class C{  public void close(){  mOneToOneChatCache.clear();  mGroupChatCache.clear();  if (sLogger.isActivated()) {    sLogger.info("Chat service API is closed");  }}  }
class C{  @Override public UIAcceleration clone(){  return new UIAcceleration(this);}  }
class C{  public void plug(final Object theObject,final String theMethodName,final String theAddrPattern,final String theTypeTag){  final OscPlug myOscPlug=new OscPlug();  myOscPlug.plug(theObject,theMethodName,theAddrPattern,theTypeTag);  if (_myOscPlugMap.containsKey(theAddrPattern)) {    _myOscPlugMap.get(theAddrPattern).add(myOscPlug);  } else {    ArrayList<OscPlug> myOscPlugList=new ArrayList<OscPlug>();    myOscPlugList.add(myOscPlug);    _myOscPlugMap.put(theAddrPattern,myOscPlugList);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.910 -0500",hash_original_method="B2C558B84E6818BCD922065D1FCE7093",hash_generated_method="4C04A183D7C55A05B3A2973CB3A01FEE") public void bindSampler(Sampler vs,int slot) throws IllegalArgumentException {  mRS.validate();  if ((slot < 0) || (slot >= mTextureCount)) {    throw new IllegalArgumentException("Slot ID out of range.");  }  int id=vs != null ? vs.getID() : 0;  mRS.nProgramBindSampler(getID(),slot,id);}  }
class C{  public final GeneralPath elementAt(final int id){  if (id >= max_size) {    return null;  } else {    return items[id];  }}  }
class C{  private void sendStageProgressPatch(com.vmware.xenon.common.TaskState.TaskStage stage){  ServiceUtils.logInfo(this,"sendStageProgressPatch %s",stage);  TaskUtils.sendSelfPatch(this,buildPatch(stage,null));}  }
class C{  public static void drawMasked(Bitmap src,Drawable mask,Bitmap dest,int clearColor){  clearBitmap(dest,clearColor);  Canvas canvas=new Canvas(dest);  canvas.drawBitmap(src,new Rect(0,0,src.getWidth(),src.getHeight()),new Rect(0,0,dest.getWidth(),dest.getHeight()),new Paint(Paint.FILTER_BITMAP_FLAG));  if (mask instanceof BitmapDrawable) {    ((BitmapDrawable)mask).getPaint().setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));  } else   if (mask instanceof NinePatchDrawable) {    ((NinePatchDrawable)mask).getPaint().setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));  } else {    throw new RuntimeException("Supported only BitmapDrawable or NinePatchDrawable");  }  mask.setBounds(0,0,mask.getIntrinsicWidth(),mask.getIntrinsicHeight());  mask.draw(canvas);  canvas.setBitmap(null);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ReactiveElement.class) {switch (baseFeatureID) {case SGraphPackage.REACTIVE_ELEMENT__LOCAL_REACTIONS:      return SGraphPackage.STATE__LOCAL_REACTIONS;default :    return -1;}}if (baseClass == ScopedElement.class) {switch (baseFeatureID) {case SGraphPackage.SCOPED_ELEMENT__SCOPES:  return SGraphPackage.STATE__SCOPES;case SGraphPackage.SCOPED_ELEMENT__NAMESPACE:return SGraphPackage.STATE__NAMESPACE;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:return SGraphPackage.STATE__NAME;default :return -1;}}if (baseClass == Vertex.class) {switch (baseFeatureID) {case SGraphPackage.VERTEX__PARENT_REGION:return SGraphPackage.STATE__PARENT_REGION;case SGraphPackage.VERTEX__INCOMING_TRANSITIONS:return SGraphPackage.STATE__INCOMING_TRANSITIONS;case SGraphPackage.VERTEX__OUTGOING_TRANSITIONS:return SGraphPackage.STATE__OUTGOING_TRANSITIONS;default :return -1;}}if (baseClass == RegularState.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == CompositeElement.class) {switch (baseFeatureID) {case SGraphPackage.COMPOSITE_ELEMENT__REGIONS:return SGraphPackage.STATE__REGIONS;default :return -1;}}if (baseClass == DocumentedElement.class) {switch (baseFeatureID) {case BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION:return SGraphPackage.STATE__DOCUMENTATION;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private void updateColumnWidths(){  if (TblVehIDs.getRowCount() >= 1) {    TblVehIDs.getColumn(EcuDataPv.FIELDS[EcuDataPv.FID_PID]).setPreferredWidth(20);    TblVehIDs.getColumn(EcuDataPv.FIELDS[EcuDataPv.FID_OFS]).setPreferredWidth(20);    TblVehIDs.getColumn(EcuDataPv.FIELDS[EcuDataPv.FID_DESCRIPT]).setPreferredWidth(350);    TblVehIDs.getColumn(EcuDataPv.FIELDS[EcuDataPv.FID_VALUE]).setPreferredWidth(350);  }}  }
class C{  private void fixOnMeasure(int widthMeasureSpec,int heightMeasureSpec){  CharSequence text=getText();  if (text instanceof Spanned) {    SpannableStringBuilder builder=new SpannableStringBuilder(text);    fixSpannedWithSpaces(builder,widthMeasureSpec,heightMeasureSpec);  } else {    if (BuildConfig.DEBUG) {      Log.d(HtmlTextView.TAG,"The text isn't a Spanned");    }    fallbackToString(widthMeasureSpec,heightMeasureSpec);  }}  }
class C{  public void cancelThumbnailDownload(){  if (mGetThumbnailTask != null && mGetThumbnailTask.getStatus() != AsyncTask.Status.FINISHED) {    mGetThumbnailTask.cancel(false);  }}  }
class C{  public int computeJobSerialize(long jobPtr,long memPtr){  enter();  try {    return PlatformCallbackUtils.computeJobSerialize(envPtr,jobPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public static double charge(ItemStack itemStack,double amount){  if (itemStack != null) {    if (itemStack.getItem() instanceof IEnergizedItem) {      IEnergizedItem energizedItem=(IEnergizedItem)itemStack.getItem();      if (energizedItem.canReceive(itemStack)) {        double energyToSend=Math.min(energizedItem.getMaxTransfer(itemStack),Math.min(energizedItem.getMaxEnergy(itemStack) - energizedItem.getEnergy(itemStack),amount));        energizedItem.setEnergy(itemStack,energizedItem.getEnergy(itemStack) + energyToSend);        return energyToSend;      }    }  }  return 0;}  }
class C{  private String scanTagUri(String name,Mark startMark){  StringBuilder chunks=new StringBuilder();  int length=0;  char ch=reader.peek(length);  while (Constant.URI_CHARS.has(ch)) {    if (ch == '%') {      chunks.append(reader.prefixForward(length));      length=0;      chunks.append(scanUriEscapes(name,startMark));    } else {      length++;    }    ch=reader.peek(length);  }  if (length != 0) {    chunks.append(reader.prefixForward(length));    length=0;  }  if (chunks.length() == 0) {    throw new ScannerException("while scanning a " + name,startMark,"expected URI, but found " + ch + "("+ ((int)ch)+ ")",reader.getMark());  }  return chunks.toString();}  }
class C{  public void doc(int docID,StoredFieldVisitor fieldVisitor) throws IOException {  reader.document(docID,fieldVisitor);}  }
class C{  public LayoutParams(int width,int height,int minHeight,int maxHeight){  super(width,height);  this.minHeight=minHeight;  this.maxHeight=maxHeight;}  }
class C{  public final TextBuilder append(int i){  if (i <= 0) {    if (i == 0)     return append("0");    if (i == Integer.MIN_VALUE)     return append("-2147483648");    append('-');    i=-i;  }  int digits=MathLib.digitLength(i);  if (_capacity < _length + digits)   increaseCapacity();  _length+=digits;  for (int index=_length - 1; ; index--) {    int j=i / 10;    _high[index >> B1][index & M1]=(char)('0' + i - (j * 10));    if (j == 0)     return this;    i=j;  }}  }
class C{  public static BigInteger toBigIntegerValue(Object decoded){  return new BigInteger((byte[])decoded);}  }
class C{  protected final void sendMessageAtFrontOfQueue(int what){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageAtFrontOfQueue(obtainMessage(what));}  }
class C{  public static PeriodRange create(Date dateInSinglePeriod) throws AdeException {  final Date singlePeriodStart=PeriodUtils.getContainingPeriodStart(dateInSinglePeriod);  return new PeriodRange(singlePeriodStart,singlePeriodStart);}  }
class C{  public static RunnerOptions fromConfig(CeylonConfig config){  RunnerOptions options=new RunnerOptions();  options.mapOptions(config);  return options;}  }
class C{  protected void recalcWidthCache(){  Enumeration enumeration=getColumns();  totalColumnWidth=0;  while (enumeration.hasMoreElements()) {    totalColumnWidth+=((TableColumn)enumeration.nextElement()).getWidth();  }}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__CHARACTER:    setCharacter((String)newValue);  return;case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__SEQUENCE:setSequence((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void newMapElement(MapElementState.Type type,MapElement mapElement){}  }
class C{  public CronThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,threadFactory,handler);  this.cronJobWatchDogs=new ArrayList<>();}  }
class C{  public static <T>ComboBox<T> comboBox(String tip,T... items){  ComboBox<T> cb=new ComboBox<>(FXCollections.observableArrayList(items));  cb.setMaxWidth(Double.MAX_VALUE);  cb.getSelectionModel().select(0);  tooltip(cb,tip);  return cb;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  doPost(request,response);}  }
class C{  public static <T extends Enum<T> & EnumClass<V>,V>T fromId(Class<T> e,V id,T defaultValue){  if (id == null)   return defaultValue;  for (  T enumConstant : e.getEnumConstants()) {    if (enumConstant.getId().equals(id)) {      return enumConstant;    }  }  throw new IllegalArgumentException("Can't parse " + e.getSimpleName() + " from id "+ id);}  }
class C{  public static final double[][] sigma(double A[][]){  double X[][]=new double[A.length][A[0].length];  for (int i=0; i < A.length; i++) {    for (int j=0; j < A[i].length; j++) {      X[i][j]=sigma(A[i][j]);    }  }  return X;}  }
class C{  public synchronized void incrementLock(){  lock.lock();  try {    this.total++;  }  finally {    lock.unlock();  }}  }
class C{  private static boolean isFiniteSlow(Automaton a,int s,HashSet<Integer> path){  path.add(s);  Transition t=new Transition();  int count=a.initTransition(s,t);  for (int i=0; i < count; i++) {    a.getNextTransition(t);    if (path.contains(t.dest) || !isFiniteSlow(a,t.dest,path)) {      return false;    }  }  path.remove(s);  return true;}  }
class C{  public void createAsyncScenario05() throws Exception {  freePeriodBasicScenario("test_05","Test05Customer","test05CustomerOrg",3,TestPriceModel.EXAMPLE_FP_PUDAY_ROLES_PAR_EVENTS,false,false,null);}  }
class C{  public void pushStream(char[] inStream,int inFileid,String name,String inBaseDir,String inEncoding){  includeStack.push(new IncludeState(cursor,line,col,fileid,fileName,baseDir,encoding,stream));  cursor=0;  line=1;  col=1;  fileid=inFileid;  fileName=name;  baseDir=inBaseDir;  encoding=inEncoding;  stream=inStream;}  }
class C{  public static void main(String[] args) throws Exception {  ConverterFileChooser fc;  int retVal;  AbstractFileLoader loader;  AbstractFileSaver saver;  Instances data;  fc=new ConverterFileChooser();  retVal=fc.showOpenDialog(null);  if (retVal == ConverterFileChooser.APPROVE_OPTION) {    loader=fc.getLoader();    data=loader.getDataSet();    retVal=fc.showSaveDialog(null);    if (retVal == ConverterFileChooser.APPROVE_OPTION) {      saver=fc.getSaver();      saver.setInstances(data);      saver.writeBatch();    } else {      System.out.println("Saving aborted!");    }  } else {    System.out.println("Loading aborted!");  }}  }
class C{  public static boolean hasExtensionFactory(String typeUri){  return _extensionFactories.containsKey(typeUri);}  }
class C{  public final void increaseScheduledWriteMessages(){  throughputCalculationLock.lock();  try {    scheduledWriteMessages++;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  private TargetInformationParser(){}  }
class C{  @Override protected void initializeArbitraryXml(ExtensionProfile profile,Class<? extends ExtensionPoint> extPoint,ElementHandler handler){  handler.initializeXmlBlob(xmlBlob,true,false);}  }
class C{  public DummyAccess(String url){  LOG.debug("Dummy access");  accessURL=url;}  }
class C{  @Override protected boolean logMultipleExceptions(){  return false;}  }
class C{  @Override public String toString(String value) throws ValueConverterException {  String withSlashes=IS_CONVERSION_REQUIRED ? value.replace(DELIMITER_INTERNAL,DELIMITER_MODULE_SPECIFIER) : value;  return delegateService.toString(withSlashes,grammarAccess.getSTRINGRule().getName());}  }
class C{  public static boolean isVisible(final IMethodBinding b,final ASTNode n,final CompilationUnit u){  final int ms=b.getModifiers();  if (Modifier.isPublic(ms))   return true;  final ITypeBinding mc=b.getDeclaringClass();  if (Modifier.isProtected(ms) && mc.getPackage().equals(getPackage(u)))   return true;  final ITypeBinding nc=container(n);  return nc != null && nc.equals(mc);}  }
class C{  public static void main(String[] argv){  runClassifier(new Stacking(),argv);}  }
class C{  SessionId(byte sessionId[]){  this.sessionId=sessionId;}  }
class C{  public ZyGraphMouseSettings(final GraphSettingsConfigItem type){  Preconditions.checkNotNull(type,"IE02024: Type argument can't be null");  m_type=type;}  }
class C{  public AuthChallengeResponse(AuthChallengeResponse other){  if (other.isSetChallenge()) {    this.challenge=other.challenge;  }  if (other.isSetResponse()) {    this.response=other.response;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.INT_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void verifyPom(){  String pomFileName=pomFile.getAbsolutePath();  log.info("Verifying file " + pomFileName);  XmlOrderedResult xmlOrderedResult=isPomElementsSorted();  if (!xmlOrderedResult.isOrdered()) {switch (verifyFailType) {case WARN:      log.warn(xmlOrderedResult.getErrorMessage());    log.warn(String.format(TEXT_FILE_NOT_SORTED,pomFileName));  break;case SORT:log.info(xmlOrderedResult.getErrorMessage());log.info(String.format(TEXT_FILE_NOT_SORTED,pomFileName));sortPom();break;case STOP:log.error(xmlOrderedResult.getErrorMessage());log.error(String.format(TEXT_FILE_NOT_SORTED,pomFileName));throw new FailureException(String.format(TEXT_FILE_NOT_SORTED,pomFileName));default :log.error(xmlOrderedResult.getErrorMessage());throw new IllegalStateException(verifyFailType.toString());}}}  }
class C{  public long insertWithOverflow(long element){  if (size < maxSize) {    add(element);    return sentinel;  } else   if (element > heap[1]) {    long ret=heap[1];    heap[1]=element;    updateTop();    return ret;  } else {    return element;  }}  }
class C{  void assignLocalToStaticField(Local right,String field){  PurityNode node=PurityGlobalNode.node;  localEscapes(right);  mutated.put(node,field);  nodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  public TermNode right(){  return (TermNode)super.getRequiredProperty(Annotations.RIGHT_TERM);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  private void updateParamsForAuth(String[] authNames,Map<String,String> queryParams,Map<String,String> headerParams){  for (  String authName : authNames) {    Authentication auth=authentications.get(authName);    if (auth == null) {      throw new RuntimeException("Authentication undefined: " + authName);    }    auth.applyToParams(queryParams,headerParams);  }}  }
class C{  public void write(PrintWriter writer,Janitor janitor){  write(writer,janitor,warnings,"warning");  write(writer,janitor,errors,"error");}  }
class C{  private static boolean isSlash(char x){  if (x == File.separatorChar)   return true;  if (win32 && (x == '/'))   return true;  return false;}  }
class C{  public static void join(Appendable out,CharSequence sep,Iterable<? extends CharSequence> items) throws IOException {  Iterator<? extends CharSequence> it=items.iterator();  if (!it.hasNext()) {    return;  }  out.append(it.next());  while (it.hasNext()) {    out.append(sep).append(it.next());  }}  }
class C{  public SAX2DTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  this(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,DEFAULT_BLOCKSIZE,true,false);}  }
class C{  @SuppressWarnings("unused") private void verifyAllBlocksAreReachable(String where){  BitVector reachableNormalBlocks=new BitVector(cfg.numberOfNodes());  BitVector reachableExceptionBlocks=new BitVector(cfg.numberOfNodes());  resetBasicBlockMap();  verifyAllBlocksAreReachable(where,cfg.entry(),reachableNormalBlocks,reachableExceptionBlocks,false);  boolean hasUnreachableBlocks=false;  StringBuilder unreachablesString=new StringBuilder();  for (int j=0; j < cfg.numberOfNodes(); j++) {    if (!reachableNormalBlocks.get(j) && !reachableExceptionBlocks.get(j)) {      hasUnreachableBlocks=true;      if (basicBlockMap[j] != null) {        basicBlockMap[j].printExtended();      }      unreachablesString.append(" BB").append(j);    }  }  if (hasUnreachableBlocks) {    verror(where,"Unreachable blocks in the CFG which will confuse dominators:" + unreachablesString);  }}  }
class C{  private static boolean isPrimitive(String typeDescriptor){  return typeDescriptor.length() == 1;}  }
class C{  public NumericNode numberNode(BigDecimal v){  return DecimalNode.valueOf(v);}  }
class C{  public TLAExpr cloneAndNormalize(){  TLAExpr result=new TLAExpr();  result.tokens=new Vector();  int i=0;  while (i < this.tokens.size()) {    Vector newline=new Vector();    Vector line=(Vector)this.tokens.elementAt(i);    int j=0;    while (j < line.size()) {      newline.add(((TLAToken)line.elementAt(j)).Clone());      j=j + 1;    }    ;    result.tokens.add(newline);    i=i + 1;  }  ;  result.setOrigin(this.getOrigin());  result.normalize();  return result;}  }
class C{  @Override public void pausePlaying(){  if (mController != null) {    mController.pausePlaying();  }  mCallbacks.onPause();  pushControllerState();  reportPlayingChanged();}  }
class C{  public static void execute(String zipFileName,String directory,String db,boolean quiet) throws SQLException {  try {    new Backup().process(zipFileName,directory,db,quiet);  } catch (  Exception e) {    throw DbException.toSQLException(e);  }}  }
class C{  public FacebookException(Throwable throwable){  super(throwable);}  }
class C{  public RotatedProblems(){  super();}  }
class C{  public void updateDefaultValue(int defaultValue){  this.defaultValue=defaultValue;  if (!valueSet) {    this.value=defaultValue;  }}  }
class C{  public static BitmapDrawable mockBitmapDrawable(){  return mockDrawable(BitmapDrawable.class);}  }
class C{  protected void parseSelector(String selector){  selectorType=SELECTOR_INVALID;  Scanner scanner=new Scanner(selector);  int token=scanner.next();  if (token == Scanner.NAME) {    String name1=scanner.getStringValue();    token=scanner.next();    if (token == Scanner.EOF) {      selectorType=SELECTOR_QNAME;      prefix=null;      localName=name1;      index=0;      return;    } else     if (token == Scanner.COLON) {      token=scanner.next();      if (token == Scanner.NAME) {        String name2=scanner.getStringValue();        token=scanner.next();        if (token == Scanner.EOF) {          selectorType=SELECTOR_QNAME;          prefix=name1;          localName=name2;          index=0;          return;        } else         if (token == Scanner.LEFT_SQUARE_BRACKET) {          token=scanner.next();          if (token == Scanner.NUMBER) {            int number=Integer.parseInt(scanner.getStringValue());            token=scanner.next();            if (token == Scanner.RIGHT_SQUARE_BRACKET) {              token=scanner.next();              if (token == Scanner.EOF) {                selectorType=SELECTOR_QNAME;                prefix=name1;                localName=name2;                index=number;                return;              }            }          }        }      } else       if (token == Scanner.LEFT_SQUARE_BRACKET) {        token=scanner.next();        if (token == Scanner.NUMBER) {          int number=Integer.parseInt(scanner.getStringValue());          token=scanner.next();          if (token == Scanner.RIGHT_SQUARE_BRACKET) {            token=scanner.next();            if (token == Scanner.EOF) {              selectorType=SELECTOR_QNAME;              prefix=null;              localName=name1;              index=number;              return;            }          }        }      } else       if (token == Scanner.LEFT_PARENTHESIS) {        if (name1.equals("id")) {          token=scanner.next();          if (token == Scanner.STRING) {            String id=scanner.getStringValue();            token=scanner.next();            if (token == Scanner.RIGHT_PARENTHESIS) {              token=scanner.next();              if (token == Scanner.EOF) {                selectorType=SELECTOR_ID;                localName=id;                return;              }            }          }        }      }    }  } else   if (token == Scanner.ASTERISK) {    token=scanner.next();    if (token == Scanner.EOF) {      selectorType=SELECTOR_ANY;      return;    } else     if (token == Scanner.LEFT_SQUARE_BRACKET) {      token=scanner.next();      if (token == Scanner.NUMBER) {        int number=Integer.parseInt(scanner.getStringValue());        token=scanner.next();        if (token == Scanner.RIGHT_SQUARE_BRACKET) {          token=scanner.next();          if (token == Scanner.EOF) {            selectorType=SELECTOR_ANY;            index=number;            return;          }        }      }    }  }}  }
class C{  public static RefactoringStatus checkFilesToBeChanged(IFile[] files,IProgressMonitor monitor) throws CoreException {  return new RefactoringStatus();}  }
class C{  public SubscriptionStateException(String message,SubscriptionStateExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  protected boolean redirectIncomingEdges(V oldNode,V newNode){  Set<E> incomings=incomingEdgesOf(oldNode);  for (  E incomingEdge : incomings) {    if (!redirectEdgeTarget(incomingEdge,newNode))     return false;  }  return true;}  }
class C{  private void updateProgress(int uploaded,int total){  double totalPercentage=(double)uploaded / total;  double scaledPercentage=totalPercentage * (PROGRESS_UPLOAD_DATA_MAX - PROGRESS_UPLOAD_DATA_MIN) + PROGRESS_UPLOAD_DATA_MIN;  publishProgress((int)scaledPercentage);}  }
class C{  public boolean isCellEditable(int row,int col){  return !(col < getBayesIm().getNumParents(getNodeIndex()));}  }
class C{  private void processDependencies(GridField changedField){  String columnName=changedField.getColumnName();  if (!hasDependants(columnName))   return;  ArrayList<GridField> list=getDependantFields(columnName);  for (int i=0; i < list.size(); i++) {    GridField dependentField=(GridField)list.get(i);    if (dependentField != null && dependentField.getLookup() instanceof MLookup) {      MLookup mLookup=(MLookup)dependentField.getLookup();      if (mLookup.getValidation().indexOf("@" + columnName + "@") != -1) {        log.fine(columnName + " changed - " + dependentField.getColumnName()+ " set to null");        setValue(dependentField,null);      }    }  }}  }
class C{  @NonNull public static <T>Optional<T> absent(){  return ABSENT;}  }
class C{  public boolean isQtyPercentage(){  Object oo=get_Value(COLUMNNAME_IsQtyPercentage);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected boolean isPreviouslyUnprocessed(){  return true;}  }
class C{  public void testBug28469() throws Exception {  PreparedStatement commentStmt=null;  try {    String[] statementsToTest={"-- COMMENT\nSELECT 1","# COMMENT\nSELECT 1","/* comment */ SELECT 1"};    for (int i=0; i < statementsToTest.length; i++) {      commentStmt=this.conn.prepareStatement(statementsToTest[i]);      assertNotNull(commentStmt.getMetaData());      try {        commentStmt.executeUpdate();        fail("Should not be able to call executeUpdate() on a SELECT statement!");      } catch (      SQLException sqlEx) {      }      this.rs=commentStmt.executeQuery();      this.rs.next();      assertEquals(1,this.rs.getInt(1));    }    createTable("testBug28469","(field1 INT)");    String[] updatesToTest={"-- COMMENT\nUPDATE testBug28469 SET field1 = 2","# COMMENT\nUPDATE testBug28469 SET field1 = 2","/* comment */ UPDATE testBug28469 SET field1 = 2"};    for (int i=0; i < updatesToTest.length; i++) {      commentStmt=this.conn.prepareStatement(updatesToTest[i]);      assertNull(commentStmt.getMetaData());      try {        this.rs=commentStmt.executeQuery();        fail("Should not be able to call executeQuery() on a SELECT statement!");      } catch (      SQLException sqlEx) {      }      try {        this.rs=this.stmt.executeQuery(updatesToTest[i]);        fail("Should not be able to call executeQuery() on a SELECT statement!");      } catch (      SQLException sqlEx) {      }    }  }  finally {    if (commentStmt != null) {      commentStmt.close();    }  }}  }
class C{  public ActivityToModeAnalysis(Scenario sc,Set<Id> personsOfInterest,int slotSize,String targetCoordinateSystem){  super(ActivityToModeAnalysis.class.getSimpleName());  this.net=sc.getNetwork();  this.handler=new ActivityToModeAnalysisHandler(this.net,personsOfInterest);  this.handlerPlanCoord=new ActivityToModeWithPlanCoordHandler(sc,personsOfInterest);  this.slotSize=slotSize;  this.targetCoordinateSystem=targetCoordinateSystem;}  }
class C{  public SpreadsheetEntry(){  getCategories().add(CATEGORY);}  }
class C{  public boolean match(String text){  return match(text,0,text.length());}  }
class C{  public StAndrewsSocialNetworkParser(String filename,char delimiter,int rowsToSkip,MessagePropagationSimulation sim) throws FileNotFoundException {  this.sim=sim;  this.delimiter=delimiter;  this.rowsToSkip=rowsToSkip;  parseNetworkFile(filename);}  }
class C{  public Triangle(double side1,double side2,double side3) throws IllegalTriangleException {  if (side1 + side2 <= side3 || side1 + side3 <= side2 || side2 + side3 <= side1)   throw new IllegalTriangleException(side1,side2,side3);  this.side1=side1;  this.side2=side2;  this.side3=side3;}  }
class C{  public static boolean searchForKey(PartitionedRegion par,Date key){  boolean foundIt=false;  final int numBucks=par.getTotalNumberOfBuckets();  for (int b=0; b < numBucks; b++) {    if (par.getBucketKeys(b).contains(key)) {      foundIt=true;      break;    }  }  if (!foundIt) {    LogWriterUtils.getLogWriter().severe("Key " + key + " not found in any bucket");  }  return foundIt;}  }
class C{  public static void removeConnectionList(Integer tab){  TABBED_CONNECTIONS.remove(tab.intValue());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(60);  sb.append("GJChronology");  sb.append('[');  sb.append(getZone().getID());  if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {    sb.append(",cutover=");    DateTimeFormatter printer;    if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {      printer=ISODateTimeFormat.date();    } else {      printer=ISODateTimeFormat.dateTime();    }    printer.withChronology(withUTC()).printTo(sb,iCutoverMillis);  }  if (getMinimumDaysInFirstWeek() != 4) {    sb.append(",mdfw=");    sb.append(getMinimumDaysInFirstWeek());  }  sb.append(']');  return sb.toString();}  }
class C{  public boolean isReader(){  return opcode == Opcode.GETFIELD || opcode == Opcode.GETSTATIC;}  }
class C{  public void testLastWordisStopWord() throws Exception {  final String input="dog the";  MockTokenizer wt=new MockTokenizer(MockTokenizer.WHITESPACE,false);  wt.setReader(new StringReader(input));  CommonGramsFilter cgf=new CommonGramsFilter(wt,commonWords);  TokenFilter nsf=new CommonGramsQueryFilter(cgf);  assertTokenStreamContents(nsf,new String[]{"dog_the"});}  }
class C{  public static long difference(long s1,long s2){  return s1 & ~s2;}  }
class C{  public static int unpackInt(final byte[] array,final JBBPIntCounter position){  final int code=array[position.getAndIncrement()] & 0xFF;  if (code < 0x80) {    return code;  }  final int result;switch (code) {case 0x80:{      result=((array[position.getAndIncrement()] & 0xFF) << 8) | (array[position.getAndIncrement()] & 0xFF);    }  break;case 0x81:{  result=((array[position.getAndIncrement()] & 0xFF) << 24) | ((array[position.getAndIncrement()] & 0xFF) << 16) | ((array[position.getAndIncrement()] & 0xFF) << 8)| (array[position.getAndIncrement()] & 0xFF);}break;default :throw new IllegalArgumentException("Unsupported packed integer prefix [0x" + Integer.toHexString(code).toUpperCase(Locale.ENGLISH) + ']');}return result;}  }
class C{  public synchronized void add(double value){  add(mCategories.size() + "",value);}  }
class C{  @Override public Instance generateExample() throws Exception {  throw new Exception("Examples cannot be generated one by one.");}  }
class C{  public static IssuingDistributionPoint decode(byte[] encoding) throws IOException {  IssuingDistributionPoint idp=(IssuingDistributionPoint)ASN1.decode(encoding);  idp.encoding=encoding;  return idp;}  }
class C{  @RequestMapping(value="/dataProviders/{dataProviderName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_DATA_PROVIDERS_DELETE) public DataProvider deleteDataProvider(@PathVariable("dataProviderName") String dataProviderName){  return dataProviderService.deleteDataProvider(new DataProviderKey(dataProviderName));}  }
class C{  public StatementListNode generateAssignExpr(NodeFactory nodeFactory,HashSet<String> configNamespaces,boolean generateDocComments,StatementListNode statementList,Node lvalueBase){  if ((lvalueBase instanceof ThisExpressionNode) && hasDefinition() && ((Model)value).isDeclared()) {    Node valueExpr=generateValueExpr(nodeFactory,configNamespaces,generateDocComments);    ListNode list=nodeFactory.list(null,valueExpr);    ExpressionStatementNode expressionStatement=nodeFactory.expressionStatement(list);    return nodeFactory.statementList(statementList,expressionStatement);  } else {    return super.generateAssignExpr(nodeFactory,configNamespaces,generateDocComments,statementList,lvalueBase);  }}  }
class C{  public final boolean isLenient(){  return lenient;}  }
class C{  public static long memoryUsageOf(Instrumentation inst,final Object obj){  return inst.getObjectSize(obj);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  builder.put(k5,v5);  return builder.build();}  }
class C{  public static String hosthash(final String host,final int port) throws MalformedURLException {  String h=host;  if (h.indexOf("//") < 0) {    if (port == 80 || port == 8080 || port == 8090)     h="http://" + h; else     if (port == 443)     h="https://" + h; else     if (port == 21 || port == 2121)     h="ftp://" + h; else     if (port > 999)     h="http://" + h + ":"+ port; else     h="http://" + h;  }  DigestURL url=new DigestURL(h);  return (url == null) ? null : ASCII.String(url.hash(),6,6);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isAllowStatistics(){  Object oo=get_Value(COLUMNNAME_IsAllowStatistics);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int signatureIndex(int i){  return descriptorIndex(i);}  }
class C{  public <T>T createBean(FacesContext facesContext,Contextual<T> contextual,CreationalContext<T> creational){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Creating @ViewScoped CDI bean using contextual: {0}",contextual);  }  if (!(contextual instanceof PassivationCapable)) {    throw new IllegalArgumentException("ViewScoped bean " + contextual.toString() + " must be PassivationCapable, but is not.");  }  T result=contextual.create(creational);  if (result != null) {    String name=getName(result);    facesContext.getViewRoot().getViewMap(true).put(name,result);    String passivationCapableId=((PassivationCapable)contextual).getId();    getContextMap(facesContext).put(passivationCapableId,new ViewScopeContextObject(passivationCapableId,name));  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.205 -0400",hash_original_method="3ED9D0D071477B613E998B33D61DD4C5",hash_generated_method="BBEFB627E25524A6B5E2B21CE60A6901") public final boolean hasContended(){  return head != null;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public void ifCmp(final Type type,final int mode,final Label label){switch (type.getSort()) {case Type.LONG:    mv.visitInsn(Opcodes.LCMP);  break;case Type.DOUBLE:mv.visitInsn(mode == GE || mode == GT ? Opcodes.DCMPL : Opcodes.DCMPG);break;case Type.FLOAT:mv.visitInsn(mode == GE || mode == GT ? Opcodes.FCMPL : Opcodes.FCMPG);break;case Type.ARRAY:case Type.OBJECT:switch (mode) {case EQ:mv.visitJumpInsn(Opcodes.IF_ACMPEQ,label);return;case NE:mv.visitJumpInsn(Opcodes.IF_ACMPNE,label);return;}throw new IllegalArgumentException("Bad comparison for type " + type);default :int intOp=-1;switch (mode) {case EQ:intOp=Opcodes.IF_ICMPEQ;break;case NE:intOp=Opcodes.IF_ICMPNE;break;case GE:intOp=Opcodes.IF_ICMPGE;break;case LT:intOp=Opcodes.IF_ICMPLT;break;case LE:intOp=Opcodes.IF_ICMPLE;break;case GT:intOp=Opcodes.IF_ICMPGT;break;}mv.visitJumpInsn(intOp,label);return;}mv.visitJumpInsn(mode,label);}  }
class C{  public void readFile(final String filename,final String dtdFilename) throws UncheckedIOException {  log.info("trying to read config from " + filename);  this.localDtd=dtdFilename;  readFile(filename);  this.localDtd=null;}  }
class C{  public byte[] read(final int offset,int length){  length=Math.min(length,(int)file.length() - offset);  InputStream in=null;  if (Cfg.DEBUG) {    Check.asserts(file != null," (read) Assert failed, null file");  }  if (length == 0) {    return null;  }  try {    in=new BufferedInputStream(new FileInputStream(file),length);    final byte[] buffer=new byte[length];    in.skip(offset);    in.read(buffer,0,length);    return buffer;  } catch (  final IOException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(e);    }  } finally {    if (in != null) {      try {        in.close();      } catch (      final IOException e) {        if (Cfg.EXCEPTION) {          Check.log(e);        }        if (Cfg.DEBUG) {          Check.log(e);        }      }    }  }  return null;}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public InterpreterGroup(String id){  this.id=id;  allInterpreterGroups.put(id,this);}  }
class C{  public static void hideKeyboard(Activity activity){  View view=activity.getCurrentFocus();  if (view != null) {    hideKeyboard(activity,view);  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private String _extractEntireClassName(String className){  return className;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.291 -0500",hash_original_method="1014277FB075F3AB2B83403F67794F88",hash_generated_method="5D76AFF5D2F6192231E91D760493C620") public boolean shouldOverrideKeyEvent(WebView view,KeyEvent event){  return false;}  }
class C{  public OnStateMachineError(Object source,StateMachine<?,?> stateMachine,Exception exception){  super(source);  this.stateMachine=stateMachine;  this.exception=exception;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.METHOD_DECLARATION__TYPE_VARS:    getTypeVars().clear();  getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case N4JSPackage.METHOD_DECLARATION__DECLARED_TYPE_REF:setDeclaredTypeRef((TypeRef)newValue);return;case N4JSPackage.METHOD_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;case N4JSPackage.METHOD_DECLARATION__DECLARED_NAME:setDeclaredName((LiteralOrComputedPropertyName)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  private long sumRam(Environment environment) throws ServerException {  CheServicesEnvironmentImpl composeEnv=environmentParser.parse(environment);  long sumBytes=composeEnv.getServices().values().stream().mapToLong(null).sum();  return sumBytes / BYTES_TO_MEGABYTES_DIVIDER;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.883 -0500",hash_original_method="DD72EF524B8A5B3FA338ADFF302C8897",hash_generated_method="E02B8FF1D1D899E020F14CC4178D9E93") public void writeToParcel(Parcel dest,int flags){  dest.writeLong(durationMillis);  dest.writeString(serviceDetails);}  }
class C{  public final void testAddHelperTextColor(){  int helperTextColor=Color.BLACK;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperTextColor(helperTextColor);  passwordEditText.addHelperTextColor(helperTextColor);  assertEquals(1,passwordEditText.getHelperTextColors().size());  assertEquals(helperTextColor,(int)passwordEditText.getHelperTextColors().iterator().next());}  }
class C{  public SegmentFile file(){  return file;}  }
class C{  public void saveFailedKey(Object key,Exception cause){  if (key == null) {    return;  }  if (firstFailedKey == null || cause instanceof CancelException) {    firstFailedKey=key;    firstCauseOfFailure=cause;  }}  }
class C{  public MapBuilder<K,V> withPageSize(int pageSize){  if (memoryManager != null) {    throw new IllegalStateException("Can not change pageSize after the memory manager initalized");  }  this.pageSize=pageSize;  return this;}  }
class C{  public InvalidClusterSetupAction(String message){  super(message);}  }
class C{  protected void playImpl(InputStream is,int expectedKBitSecRate) throws Exception {  BufferReader reader=new BufferReader(computeInputBufferSize(expectedKBitSecRate,decodeBufferCapacityMs),is);  new Thread(reader).start();  PCMFeed pcmfeed=null;  Thread pcmfeedThread=null;  long profMs=0;  long profSamples=0;  long profSampleRate=0;  int profCount=0;  try {    Decoder.Info info=decoder.start(reader);    Log.d(LOG,"play(): samplerate=" + info.getSampleRate() + ", channels="+ info.getChannels());    profSampleRate=info.getSampleRate() * info.getChannels();    if (info.getChannels() > 2) {      throw new RuntimeException("Too many channels detected: " + info.getChannels());    }    short[][] decodeBuffers=createDecodeBuffers(3,info);    short[] decodeBuffer=decodeBuffers[0];    int decodeBufferIndex=0;    pcmfeed=createPCMFeed(info);    pcmfeedThread=new Thread(pcmfeed);    pcmfeedThread.start();    if (info.getFirstSamples() != null) {      short[] firstSamples=info.getFirstSamples();      Log.d(LOG,"First samples length: " + firstSamples.length);      pcmfeed.feed(firstSamples,firstSamples.length);      info.setFirstSamples(null);    }    do {      long tsStart=System.currentTimeMillis();      info=decoder.decode(decodeBuffer,decodeBuffer.length);      int nsamp=info.getRoundSamples();      profMs+=System.currentTimeMillis() - tsStart;      profSamples+=nsamp;      profCount++;      Log.d(LOG,"play(): decoded " + nsamp + " samples");      if (nsamp == 0 || stopped)       break;      if (!pcmfeed.feed(decodeBuffer,nsamp) || stopped)       break;      int kBitSecRate=computeAvgKBitSecRate(info);      if (Math.abs(expectedKBitSecRate - kBitSecRate) > 1) {        Log.i(LOG,"play(): changing kBitSecRate: " + expectedKBitSecRate + " -> "+ kBitSecRate);        reader.setCapacity(computeInputBufferSize(kBitSecRate,decodeBufferCapacityMs));        expectedKBitSecRate=kBitSecRate;      }      decodeBuffer=decodeBuffers[++decodeBufferIndex % 3];    } while (!stopped);  }  finally {    boolean stopImmediatelly=stopped;    stopped=true;    if (pcmfeed != null)     pcmfeed.stop(!stopImmediatelly);    decoder.stop();    reader.stop();    int perf=0;    if (profCount > 0)     Log.i(LOG,"play(): average decoding time: " + profMs / profCount + " ms");    if (profMs > 0) {      perf=(int)((1000 * profSamples / profMs - profSampleRate) * 100 / profSampleRate);      Log.i(LOG,"play(): average rate (samples/sec): audio=" + profSampleRate + ", decoding="+ (1000 * profSamples / profMs)+ ", audio/decoding= "+ perf+ " %  (the higher, the better; negative means that decoding is slower than needed by audio)");    }    if (pcmfeedThread != null)     pcmfeedThread.join();    if (playerCallback != null)     playerCallback.playerStopped(perf);  }}  }
class C{  public static void main(String[] args) throws AdeException {  final MessageStats upload=new MessageStats();  try {    upload.run(args);  } catch (  AdeUsageException e) {    upload.getMessageHandler().handleUserException(e);  }catch (  AdeInternalException e) {    upload.getMessageHandler().handleAdeInternalException(e);  }catch (  AdeException e) {    upload.getMessageHandler().handleAdeException(e);  }catch (  Throwable e) {    upload.getMessageHandler().handleUnexpectedException(e);  } finally {    upload.quietCleanup();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private synchronized void initDiskCache(final Context context){  if (mDiskCache == null || mDiskCache.isClosed()) {    File diskCacheDir=getDiskCacheDir(context,TAG);    if (diskCacheDir != null) {      if (!diskCacheDir.exists()) {        diskCacheDir.mkdirs();      }      if (getUsableSpace(diskCacheDir) > DISK_CACHE_SIZE) {        try {          mDiskCache=DiskLruCache.open(diskCacheDir,1,1,DISK_CACHE_SIZE);        } catch (        final IOException e) {          diskCacheDir=null;        }      }    }  }}  }
class C{  public T caseOperation(Operation object){  return null;}  }
class C{  public MP3Header(int data) throws Exception {  if ((data & 0xffe00000) != 0xffe00000) {    throw new Exception("invalid frame sync word");  }  this.data=data;  data&=0x1fffff;  audioVersionId=(byte)((data >> 19) & 3);  layerDescription=(byte)((data >> 17) & 3);  protectionBit=((data >> 16) & 1) == 0;  bitRateIndex=(byte)((data >> 12) & 15);  samplingRateIndex=(byte)((data >> 10) & 3);  paddingBit=((data >> 9) & 1) != 0;  channelMode=(byte)((data >> 6) & 3);}  }
class C{  public AbstractMRMessage createInitPacket(){  return null;}  }
class C{  public Map32(){  descriptorMap=new int[VMLayoutConstants.MAX_CHUNKS];  prevLink=new int[VMLayoutConstants.MAX_CHUNKS];  nextLink=new int[VMLayoutConstants.MAX_CHUNKS];  spaceMap=new Space[VMLayoutConstants.MAX_CHUNKS];  regionMap=new IntArrayFreeList(VMLayoutConstants.MAX_CHUNKS);  globalPageMap=new IntArrayFreeList(1,1,HeapParameters.MAX_SPACES);  sharedFLMap=new FreeListPageResource[HeapParameters.MAX_SPACES];  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(BITS_IN_ADDRESS == LOG_ADDRESS_SPACE || VMLayoutConstants.HEAP_END.diff(MAP_BASE_ADDRESS).toWord().rshl(LOG_ADDRESS_SPACE).isZero());}  }
class C{  public static int hash(long value){  return ((int)(value ^ (value >>> 32)));}  }
class C{  public boolean isShowLabels(){  return mShowXLabels || mShowYLabels;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void writeObject(Object object) throws IOException {  if (object == null)   writeNull(); else   if (object instanceof String)   writeString((String)object); else   if (object instanceof Boolean)   writeBoolean(((Boolean)object).booleanValue()); else   if (object instanceof Integer)   writeInt(((Integer)object).intValue()); else   if (object instanceof Long)   writeLong(((Long)object).longValue()); else   if (object instanceof Date)   writeUTCDate(((Date)object).getTime()); else   if (object instanceof byte[]) {    byte[] data=(byte[])object;    writeBytes(data,0,data.length);  } else   if (object instanceof Vector) {    Vector vector=(Vector)object;    int size=vector.size();    writeListBegin(size,null);    for (int i=0; i < size; i++)     writeObject(vector.elementAt(i));    writeListEnd();  } else   if (object instanceof Hashtable) {    Hashtable hashtable=(Hashtable)object;    writeMapBegin(null);    Enumeration e=hashtable.keys();    while (e.hasMoreElements()) {      Object key=e.nextElement();      Object value=hashtable.get(key);      writeObject(key);      writeObject(value);    }    writeMapEnd();  } else   writeCustomObject(object);}  }
class C{  public static void run(){  RemoveStupidOverrides transformer=new RemoveStupidOverrides();  for (  SootClass clz : Scene.v().getClasses()) {    String clzName=clz.getName();    if (!clzName.startsWith("java.lang")) {      SootMethod[] methods=clz.getMethods().toArray(new SootMethod[0]);      for (      SootMethod meth : methods) {        if (meth.isConcrete() && !meth.isStatic() && !meth.isConstructor())         try {          transformer.removeMethodIfStupid(clz,meth);        } catch (        Exception e) {          logger.debug("Error in RemoveStupidOverrides. Ignoring...",e);        }      }    }  }}  }
class C{  private void notifyDifferenceListeners(final int type,final Node controlNode,final Node testNode,final String msg){  if (type == XMLDogConstants.EVENT_NODE_IDENTICAL) {    for (int i=0; i < _listeners.size(); i++) {      ((DifferenceListener)_listeners.get(i)).identicalNodeFound(controlNode,testNode,msg);    }  } else   if (type == XMLDogConstants.EVENT_NODE_SIMILAR) {    for (int i=0; i < _listeners.size(); i++) {      ((DifferenceListener)_listeners.get(i)).similarNodeFound(controlNode,testNode,msg);    }  } else   if (type == XMLDogConstants.EVENT_NODE_MISMATCH) {    for (int i=0; i < _listeners.size(); i++) {      ((DifferenceListener)_listeners.get(i)).nodeNotFound(controlNode,testNode,msg);    }  } else {  }}  }
class C{  public byte[] serializeBytes(byte version){  Preconditions.checkArgument(version <= CUR_VERSION && version >= VERSION0);  byte[] data=new byte[CUR_VERSION == version ? VERSION1_LEN : VERSION0_LEN];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put(version);  bb.putLong(logSegmentSequenceNo);  bb.putLong(entryId);  bb.putLong(slotId);  return data;}  }
class C{  private static int findCodewordIndex(long symbol){  int first=0;  int upto=SYMBOL_TABLE.length;  while (first < upto) {    int mid=(first + upto) >>> 1;    if (symbol < SYMBOL_TABLE[mid]) {      upto=mid;    } else     if (symbol > SYMBOL_TABLE[mid]) {      first=mid + 1;    } else {      return mid;    }  }  return -1;}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  public InvalidPhraseException(Throwable cause,String phrase){  super(cause,new Object[]{phrase});}  }
class C{  public static String jvmVersion(){  return jvmImplVer;}  }
class C{  public boolean isSummarized(){  Object oo=get_Value(COLUMNNAME_IsSummarized);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private View parseView(String id,JSONObject metaData,boolean rootView) throws IOException, ScreenConfigException {  try {    JSONArray elementsMetadata=metaData.getJSONArray("elements");    JSONObject lazyDependencies=metaData.getJSONObject("lazyDeps");    String html=metaData.getString("_html");    JSONArray nativeControllers=metaData.getJSONArray("nativeControllers");    JSONArray nativeBindings=metaData.getJSONArray("nativeBindings");    View view=new View(id,lazyDependencies,html,rootView);    int length=nativeControllers.length();    for (int i=0; i < length; i++) {      JSONObject nativeController=nativeControllers.getJSONObject(i);      String method=nativeController.getString("method");      String controllerCall=nativeController.getString("controllerCall");      view.addNativeControllerCall(method,controllerCall);    }    length=nativeBindings.length();    for (int i=0; i < length; i++) {      JSONObject nativeBinding=nativeBindings.getJSONObject(i);      String elementId=nativeBinding.getString("elementId");      String dataBinding=nativeBinding.getString("dataBinding");      String attributeName=nativeBinding.getString("attributeName");      view.addNativeDataBinding(elementId,dataBinding,attributeName);    }    length=elementsMetadata.length();    for (int i=0; i < length; i++) {      JSONObject compCandidate=elementsMetadata.getJSONObject(i);      if (isScreenDefinition(compCandidate)) {        parseViewElement(view,compCandidate);      } else       if (isDataProviderDefinition(compCandidate)) {        parseDataProviderElement(view,compCandidate);      } else       if (isValidWidget(compCandidate)) {        try {          createWidget(compCandidate,view);        } catch (        ScreenConfigException e) {          throw new ScreenConfigException("Error creating widget on view [" + id + "].",e);        }      }    }    return view;  } catch (  JSONException e) {    throw new ScreenConfigException("Error parsing view [" + id + "].",e);  }}  }
class C{  public boolean isMandatory(){  return this.mandatory;}  }
class C{  public List<V> replace(K key,V value){  List<V> replaced=removeAll(key);  if (value != null) {    put(key,value);  }  return replaced;}  }
class C{  public void add(Permission permission){  perms.put(permission,permission);}  }
class C{  @Override public NClob createNClob() throws SQLException {  try {    int id=getNextId(TraceObject.CLOB);    debugCodeAssign("NClob",TraceObject.CLOB,id,"createNClob()");    checkClosedForWrite();    try {      Value v=ValueLobDb.createTempClob(new InputStreamReader(new ByteArrayInputStream(Utils.EMPTY_BYTES)),0);      session.addTemporaryLob(v);      return new JdbcClob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String paramToQueryString(Map<String,String> params,String charset) throws UnsupportedEncodingException {  if (params == null || params.size() == 0) {    return null;  }  StringBuilder paramString=new StringBuilder();  boolean first=true;  for (  Entry<String,String> p : params.entrySet()) {    String key=p.getKey();    String val=p.getValue();    if (!first) {      paramString.append("&");    }    paramString.append(key);    if (val != null) {      paramString.append("=").append(HttpUtil.urlEncode(val,charset));    }    first=false;  }  return paramString.toString();}  }
class C{  @Override public void onCanceled(T data){  super.onCanceled(data);  onReleaseResources(data);}  }
class C{  public String serialize(TreeNode root){  if (root == null) {    return "#,";  }  String mid=root.val + ",";  String left=serialize(root.left);  String right=serialize(root.right);  mid+=left + right;  return mid;}  }
class C{  @GET @Path("class/null") public String nullControllerClass(){  return null;}  }
class C{  public void end(Asteroids asteroids){  if (stopper != null)   stopper.stop();  asteroids.field.remove(this);}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> deactivateFullCopy(URI consistencyGroupId,URI fullCopyId){  final String url=getIdUrl() + "/protection/full-copies/{fcid}/deactivate";  return postTasks(url,consistencyGroupId,fullCopyId);}  }
class C{  public FunctionLibException(String message){  super(message);}  }
class C{  public double key(){  return _map._set[_index];}  }
class C{  public Type1Message(int flags,String suppliedDomain,String suppliedWorkstation){  setFlags(getDefaultFlags() | flags);  setSuppliedDomain(suppliedDomain);  if (suppliedWorkstation == null)   suppliedWorkstation=getDefaultWorkstation();  setSuppliedWorkstation(suppliedWorkstation);}  }
class C{  public void initialize(){  s1=0.0;  s2=0.0;}  }
class C{  public IntObjectHashMap(int initialCapacity){  this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:07.592 -0500",hash_original_method="F902144182B3E2AF28D0016B48F7903B",hash_generated_method="A5CFF847D9766B0A2C3B4C2401D2B43A") private synchronized void addLock(FileLock lock) throws OverlappingFileLockException {  long lockEnd=lock.position() + lock.size();  for (  FileLock existingLock : locks) {    if (existingLock.position() > lockEnd) {      break;    }    if (existingLock.overlaps(lock.position(),lock.size())) {      throw new OverlappingFileLockException();    }  }  locks.add(lock);}  }
class C{  public static boolean isErrorResponseType(char type){  return ((type & 0x0110) == STUN_ERROR_RESP);}  }
class C{  public Packet decodePacket(RTMP rtmp,IoBuffer in){  final int remaining=in.remaining();  if (remaining < 1) {    rtmp.bufferDecoding(1);    return null;  }  final int position=in.position();  byte headerByte=in.get();  int headerValue;  int byteCount;  if ((headerByte & 0x3f) == 0) {    if (remaining < 2) {      in.position(position);      rtmp.bufferDecoding(2);      return null;    }    headerValue=(headerByte & 0xff) << 8 | (in.get() & 0xff);    byteCount=2;  } else   if ((headerByte & 0x3f) == 1) {    if (remaining < 3) {      in.position(position);      rtmp.bufferDecoding(3);      return null;    }    headerValue=(headerByte & 0xff) << 16 | (in.get() & 0xff) << 8 | (in.get() & 0xff);    byteCount=3;  } else {    headerValue=headerByte & 0xff;    byteCount=1;  }  final int channelId=RTMPUtils.decodeChannelId(headerValue,byteCount);  if (channelId < 0) {    throw new ProtocolException("Bad channel id: " + channelId);  }  int headerLength=RTMPUtils.getHeaderLength(RTMPUtils.decodeHeaderSize(headerValue,byteCount));  headerLength+=byteCount - 1;  if (headerLength + byteCount - 1 > remaining) {    log.debug("Header too small, buffering. remaining: {}",remaining);    in.position(position);    rtmp.bufferDecoding(headerLength + byteCount - 1);    return null;  }  in.position(position);  Header lastHeader=rtmp.getLastReadHeader(channelId);  final Header header=decodeHeader(in,lastHeader);  if (header == null) {    throw new ProtocolException("Header is null, check for error");  }  rtmp.setLastReadHeader(channelId,header);  Packet packet=rtmp.getLastReadPacket(channelId);  if (packet == null) {    packet=new Packet(header.clone());    rtmp.setLastReadPacket(channelId,packet);  }  final IoBuffer buf=packet.getData();  final int readRemaining=header.getSize() - buf.position();  final int chunkSize=rtmp.getReadChunkSize();  final int readAmount=(readRemaining > chunkSize) ? chunkSize : readRemaining;  if (in.remaining() < readAmount) {    in.position(position);    rtmp.bufferDecoding(headerLength + readAmount);    return null;  }  BufferUtils.put(buf,in,readAmount);  if (buf.position() < header.getSize()) {    rtmp.continueDecoding();    return null;  }  if (buf.position() > header.getSize()) {    log.warn("Packet size expanded from {} to {} ({})",new Object[]{(header.getSize()),buf.position(),header});  }  buf.flip();  try {    final IRTMPEvent message=decodeMessage(rtmp,packet.getHeader(),buf);    message.setHeader(packet.getHeader());    final Header lastReadHeader=rtmp.getLastReadPacketHeader(channelId);    if (lastReadHeader != null && (message instanceof AudioData || message instanceof VideoData) && RTMPUtils.compareTimestamps(lastReadHeader.getTimer(),packet.getHeader().getTimer()) >= 0) {      message.setTimestamp(lastReadHeader.getTimer() + 1);    } else {      message.setTimestamp(header.getTimer());    }    rtmp.setLastReadPacketHeader(channelId,packet.getHeader());    packet.setMessage(message);    if (message instanceof ChunkSize) {      ChunkSize chunkSizeMsg=(ChunkSize)message;      rtmp.setReadChunkSize(chunkSizeMsg.getSize());    } else     if (message instanceof Abort) {      log.debug("Abort packet detected");      Abort abort=(Abort)message;      rtmp.setLastReadPacket(abort.getChannelId(),null);      packet=null;    }    if (packet != null && packet.getHeader().isGarbage()) {      packet=null;    } else {      lastHeader=rtmp.getLastReadHeader(channelId);      lastHeader.setTimerBase(header.getTimer());    }  }  finally {    rtmp.setLastReadPacket(channelId,null);  }  return packet;}  }
class C{  public static boolean isNetworkConnected(Context context){  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetwork=cm.getActiveNetworkInfo();  return activeNetwork != null && activeNetwork.isConnectedOrConnecting();}  }
class C{  public static boolean isConditionalBranch(int opcode){  return (flagsArray[opcode & 0xff] & FALL_THROUGH) != 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  public PipelineEnvelopeJson importPipeline(String pipelineName,String rev,Boolean overwrite,PipelineEnvelopeJson pipelineEnvelope) throws ApiException {  Object postBody=pipelineEnvelope;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling importPipeline");  }  if (pipelineEnvelope == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineEnvelope' when calling importPipeline");  }  String path="/v1/pipeline/{pipelineName}/import".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  queryParams.addAll(apiClient.parameterToPairs("","overwrite",overwrite));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={"application/json"};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PipelineEnvelopeJson>(){  };  return apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  private boolean isHardLineBreak(final CharacterIterator cit){  final int currentIndex=cit.getIndex();  char currentChar=cit.previous();  while (currentChar != CharacterIterator.DONE && !Character.isLetterOrDigit(currentChar)) {    if (currentChar == '\n') {      cit.setIndex(currentIndex);      return true;    }    currentChar=cit.previous();  }  cit.setIndex(currentIndex);  return false;}  }
class C{  private boolean isCreature(int x,int y){  Occupant o=getOccupant(x,y);  return o instanceof Creature;}  }
class C{  private static Bitmap transform(@NonNull final Matrix scaler,@NonNull final Bitmap source,final int targetWidth,final int targetHeight,final int options){  final boolean scaleUp=(options & OPTIONS_SCALE_UP) != 0;  final boolean recycle=(options & OPTIONS_RECYCLE_INPUT) != 0;  int deltaX=source.getWidth() - targetWidth;  int deltaY=source.getHeight() - targetHeight;  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);    Canvas c=new Canvas(b2);    int deltaXHalf=Math.max(0,deltaX / 2);    int deltaYHalf=Math.max(0,deltaY / 2);    final Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));    int dstX=(targetWidth - src.width()) / 2;    int dstY=(targetHeight - src.height()) / 2;    final Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);    c.drawBitmap(source,src,dst,null);    if (recycle) {      source.recycle();    }    c.setBitmap(null);    return b2;  }  float bitmapWidthF=source.getWidth();  float bitmapHeightF=source.getHeight();  float bitmapAspect=bitmapWidthF / bitmapHeightF;  float viewAspect=(float)targetWidth / targetHeight;  Matrix scalerMatrix=scaler;  if (bitmapAspect > viewAspect) {    float scale=targetHeight / bitmapHeightF;    if (scale < .9F || scale > 1F) {      scaler.setScale(scale,scale);    } else {      scalerMatrix=null;    }  } else {    float scale=targetWidth / bitmapWidthF;    if (scale < .9F || scale > 1F) {      scaler.setScale(scale,scale);    } else {      scalerMatrix=null;    }  }  final Bitmap b1;  if (scalerMatrix != null) {    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scalerMatrix,true);  } else {    b1=source;  }  if (recycle && b1 != source) {    source.recycle();  }  final int dx1=Math.max(0,b1.getWidth() - targetWidth);  final int dy1=Math.max(0,b1.getHeight() - targetHeight);  final Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);  if (b2 != b1) {    if (recycle || b1 != source) {      b1.recycle();    }  }  return b2;}  }
class C{  private String toString(Position position){  return "P[" + position.getOffset() + "+"+ position.getLength()+ "]";}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.IMPORT_SPECIFIER__FLAGGED_USED_IN_CODE:    setFlaggedUsedInCode(FLAGGED_USED_IN_CODE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void removeCommandListener(String formName,ActionListener l){  if (localCommandListeners == null) {    return;  }  EventDispatcher d=(EventDispatcher)localCommandListeners.get(formName);  if (d == null) {    return;  }  d.removeListener(l);}  }
class C{  public void addTargetRequests(List<String> requests){synchronized (targetRequests) {    for (    String s : requests) {      if (StringUtils.isBlank(s) || s.equals("#") || s.startsWith("javascript:")) {        continue;      }      s=UrlUtils.canonicalizeUrl(s,url.toString());      targetRequests.add(new Request(s));    }  }}  }
class C{  void addNewEntry(K key,V value,int hash,int index){  table[index]=new HashMapEntry<K,V>(key,value,hash,table[index]);}  }
class C{  public TimeOffset(final long offset){  super(offset,TimeOffset.class);}  }
class C{  protected void selectHorizontalAutoTickUnit(Graphics2D g2,Rectangle2D drawArea,Rectangle2D dataArea,RectangleEdge edge){  double tickLabelWidth=estimateMaximumTickLabelWidth(g2,getTickUnit());  double n=getRange().getLength() * tickLabelWidth / dataArea.getWidth();  setTickUnit((NumberTickUnit)getStandardTickUnits().getCeilingTickUnit(n),false,false);}  }
class C{  public boolean equals(Object o){  return o instanceof POS && ((POS)o).value == value;}  }
class C{  public AxisEntity(Shape area,Axis axis,String toolTipText){  this(area,axis,toolTipText,null);}  }
class C{  public void testCheckTryAgainInterval(){  int numResources=100;  int maxTries=2;  int tryAgainInterval=500;  AbsentResourceList list=new AbsentResourceList(numResources,maxTries,250,tryAgainInterval);  for (int i=0; i < maxTries; i++) {    this.markResourcesAbsent(list,numResources);  }  try {    Thread.sleep((long)(1.01 * tryAgainInterval));    this.testResourcesNotAbsent(list,numResources);  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  public boolean isMultiKeyMode(){  return multiKeyMode;}  }
class C{  public List<VariableReference> satisfyParameters(TestCase test,VariableReference callee,List<Type> parameterTypes,int position,int recursionDepth,boolean allowNull,boolean excludeCalleeGenerators,boolean canReuseExistingVariables) throws ConstructionFailedException {  if (callee == null && excludeCalleeGenerators) {    throw new IllegalArgumentException("Exclude generators on null callee");  }  List<VariableReference> parameters=new ArrayList<>();  logger.debug("Trying to satisfy {} parameters at position {}",parameterTypes.size(),position);  for (  Type parameterType : parameterTypes) {    logger.debug("Current parameter type: {}",parameterType);    if (parameterType instanceof CaptureType) {      throw new ConstructionFailedException("Cannot satisfy capture type");    }    GenericClass parameterClass=new GenericClass(parameterType);    if (parameterClass.hasTypeVariables()) {      logger.debug("Parameter has type variables, replacing with wildcard");      parameterType=parameterClass.getWithWildcardTypes().getType();    }    int previousLength=test.size();    VariableReference var=null;    if (canReuseExistingVariables) {      logger.debug("Can re-use variables");      var=createOrReuseVariable(test,parameterType,position,recursionDepth,callee,allowNull,excludeCalleeGenerators,true);    } else {      logger.debug("Cannot re-use variables: attempt at creating new one");      var=createVariable(test,parameterType,position,recursionDepth,callee,allowNull,excludeCalleeGenerators,true,false);      if (var == null) {        throw new ConstructionFailedException("Failed to create variable for type " + parameterType + " at position "+ position);      }    }    assert !(!allowNull && ConstraintHelper.isNull(var,test));    if (var.getStPosition() < position && ConstraintHelper.getLastPositionOfBounded(var,test) >= position) {      String msg="Bounded variable issue when calling satisfyParameters()";      AtMostOnceLogger.warn(logger,msg);      throw new ConstructionFailedException(msg);    }    if (!var.isAssignableTo(parameterType)) {      throw new ConstructionFailedException("Error: " + var + " is not assignable to "+ parameterType);    }    parameters.add(var);    int currentLength=test.size();    position+=currentLength - previousLength;  }  logger.debug("Satisfied {} parameters",parameterTypes.size());  return parameters;}  }
class C{  public boolean showAppMenu(View anchorView,boolean isByHardwareButton,boolean startDragging){  assert !(isByHardwareButton && startDragging);  if (!mDelegate.shouldShowAppMenu() || isAppMenuShowing())   return false;  if (mMenu == null) {    PopupMenu tempMenu=new PopupMenu(mActivity,anchorView);    tempMenu.inflate(mMenuResourceId);    mMenu=tempMenu.getMenu();  }  mDelegate.prepareMenu(mMenu);  ContextThemeWrapper wrapper=new ContextThemeWrapper(mActivity,mDelegate.getMenuThemeResourceId());  if (mAppMenu == null) {    TypedArray a=wrapper.obtainStyledAttributes(new int[]{android.R.attr.listPreferredItemHeightSmall,android.R.attr.listDivider});    int itemRowHeight=a.getDimensionPixelSize(0,0);    Drawable itemDivider=a.getDrawable(1);    int itemDividerHeight=itemDivider != null ? itemDivider.getIntrinsicHeight() : 0;    a.recycle();    mAppMenu=new AppMenu(mMenu,itemRowHeight,itemDividerHeight,this,mActivity.getResources());    mAppMenuDragHelper=new AppMenuDragHelper(mActivity,mAppMenu,itemRowHeight);  }  Rect appRect=new Rect();  mActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(appRect);  if (appRect.left < 0 && appRect.top < 0) {    appRect.left=0;    appRect.top=0;    appRect.right=mActivity.getWindow().getDecorView().getWidth();    appRect.bottom=mActivity.getWindow().getDecorView().getHeight();  }  int rotation=mActivity.getWindowManager().getDefaultDisplay().getRotation();  Point pt=new Point();  mActivity.getWindowManager().getDefaultDisplay().getSize(pt);  mAppMenu.show(wrapper,anchorView,isByHardwareButton,rotation,appRect,pt.y);  return true;}  }
class C{  static boolean askForDownload(final int updateSize,final boolean update){  float size=(float)updateSize / 1024;  if (size > 10) {    size=(int)size;  }  final String sizeString=NumberFormat.getInstance().format(size);  int resCode;  if (update) {    resCode=LoneOptionDialog.showConfirmDialog("There is a new version which is " + sizeString + " KB.\r\n"+ "Should "+ ClientGameConfiguration.get("GAME_NAME")+ " be updated?",DIALOG_TITLE,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);  } else {    resCode=LoneOptionDialog.showConfirmDialog("We need to download some additional files which are " + sizeString + " KB.\r\n"+ "Should "+ ClientGameConfiguration.get("GAME_NAME")+ " be installed?",DIALOG_TITLE,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);  }  return (resCode == JOptionPane.YES_OPTION);}  }
class C{  public boolean generate(Projection proj){  needToRegenerate=false;switch (renderType) {case RENDERTYPE_XY:    point1=new Point(eunit.p1.x,eunit.p1.y);  break;case RENDERTYPE_OFFSET:point1=(Point)proj.forward(eunit.ll1.lat,eunit.ll1.lon,new Point());point1.x+=eunit.p1.x;point1.y+=eunit.p1.y;break;case RENDERTYPE_LATLON:point1=(Point)proj.forward(eunit.ll1.lat,eunit.ll1.lon,new Point());break;case RENDERTYPE_UNKNOWN:System.err.println("JUnit.generate: invalid RenderType");return false;}String image_path="fmsymbols/";image_path+=eunit.group;image_path+="/";image_path+=eunit.symbol;image_path+=".xbm";symbol_=new ImageIcon(image_path.toLowerCase());image_path="fmsymbols/echelons/";image_path+=eunit.echelon;image_path+=".xbm";echelon_=new ImageIcon(image_path.toLowerCase());return true;}  }
class C{  public VisualPosition logicalToVisualPosition(@NotNull LogicalPosition logical,@NotNull VisualPosition softWrapUnawareVisual) throws IllegalStateException {  if (logical.visualPositionAware) {    return logical.toVisualPosition();  }  List<? extends SoftWrap> softWraps=myStorage.getSoftWraps();  int maxOffset=myEditor.logicalPositionToOffset(logical);  int endIndex=myStorage.getSoftWrapIndex(maxOffset);  if (endIndex < 0) {    endIndex=-endIndex - 2;  }  if (endIndex < 0 || endIndex >= softWraps.size()) {    return softWrapUnawareVisual;  }  int lineDiff=0;  int column=-1;  int targetLogicalLineStartOffset=myEditor.logicalPositionToOffset(new LogicalPosition(logical.line,0));  for (int i=endIndex; i >= 0; i--) {    SoftWrap softWrap=softWraps.get(i);    if (softWrap == null) {      assert false;      continue;    }    if (column < 0 && softWrap.getStart() >= targetLogicalLineStartOffset) {      column=softWrap.getIndentInColumns() + SoftWrapModelImpl.getEditorTextRepresentationHelper(myEditor).toVisualColumnSymbolsNumber(softWrap.getStart(),maxOffset,softWrap.getIndentInPixels());      lineDiff++;    } else {      lineDiff+=i + 1;      break;    }  }  int columnToUse=column >= 0 ? column : softWrapUnawareVisual.column;  return new VisualPosition(softWrapUnawareVisual.line + lineDiff,columnToUse);}  }
class C{  private int size(){  return nWords + offset;}  }
class C{  public final AC growPrio(int p,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setGrowPriority(p);  }  return this;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  protected void sendTestMessage(SerialMessage m,SerialListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  public static List<ContributorStats> buildStats(List<Contributor> contributors){  Map<String,List<Contributor>> contributorByLoginId=getDistinctContributors(contributors);  return contributorByLoginId.values().stream().map(null).collect(Collectors.toCollection(null));}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected boolean isDocumentAcquired(){  return fAcquireCount > 0;}  }
class C{  public void process() throws MessagingException {  Store store=null;  Folder folder;  StringBuilder logMessageBuffer=new StringBuilder("Starting fetching mail from server '");  logMessageBuffer.append(getHost());  logMessageBuffer.append("' for user '");  logMessageBuffer.append(getUser());  logMessageBuffer.append("' in folder '");  logMessageBuffer.append(getJavaMailFolderName());  logMessageBuffer.append("'");  getLogger().info(logMessageBuffer.toString());  try {    store=getSession().getStore(getJavaMailProviderName());    if (getHost() != null || getUser() != null || getPassword() != null)     store.connect(getHost(),getUser(),getPassword()); else     store.connect();    folder=store.getFolder(getJavaMailFolderName());    if (folder == null)     getLogger().error(getFetchTaskName() + " No default folder");    new FolderProcessor(folder,getAccount()).process();  } catch (  MessagingException ex) {    getLogger().error("A MessagingException has terminated processing of this Folder",ex);  } finally {    try {      if (null != store && store.isConnected())       store.close();    } catch (    MessagingException ex) {      getLogger().error("A MessagingException occured while closing the Store",ex);    }    logMessageBuffer=new StringBuilder("Finished fetching mail from server '");    logMessageBuffer.append(getHost());    logMessageBuffer.append("' for user '");    logMessageBuffer.append(getUser());    logMessageBuffer.append("' in folder '");    logMessageBuffer.append(getJavaMailFolderName());    logMessageBuffer.append("'");    getLogger().info(logMessageBuffer.toString());  }}  }
class C{  public boolean isVariableOneToOne(){  return false;}  }
class C{  boolean isCompositionAreaVisible(){  if (compositionArea != null) {    return compositionArea.isCompositionAreaVisible();  }  return false;}  }
class C{  private void loadStyledAttributes(AttributeSet attrs,int defStyleAttr){  if (attrs != null) {    setAttributeSet(getContext().getTheme().obtainStyledAttributes(attrs,R.styleable.SlidePager,defStyleAttr,0));    mStartAtEnd=mAttributes.getBoolean(R.styleable.SlidePager_slide_start_at_end,false);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardXYItemRenderer)) {    return false;  }  StandardXYItemRenderer that=(StandardXYItemRenderer)obj;  if (this.baseShapesVisible != that.baseShapesVisible) {    return false;  }  if (this.plotLines != that.plotLines) {    return false;  }  if (this.plotImages != that.plotImages) {    return false;  }  if (this.plotDiscontinuous != that.plotDiscontinuous) {    return false;  }  if (this.gapThresholdType != that.gapThresholdType) {    return false;  }  if (this.gapThreshold != that.gapThreshold) {    return false;  }  if (!ObjectUtilities.equal(this.shapesFilled,that.shapesFilled)) {    return false;  }  if (!this.seriesShapesFilled.equals(that.seriesShapesFilled)) {    return false;  }  if (this.baseShapesFilled != that.baseShapesFilled) {    return false;  }  if (this.drawSeriesLineAsPath != that.drawSeriesLineAsPath) {    return false;  }  if (!ShapeUtilities.equal(this.legendLine,that.legendLine)) {    return false;  }  return super.equals(obj);}  }
class C{  public void calcMinorTick(){  minorTick=1;  minorTickCount=8;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.STATE___STATE_NAME_1:    setStateName_1((String)newValue);  return;case UmplePackage.STATE___STATE_INTERNAL_1:getStateInternal_1().clear();getStateInternal_1().addAll((Collection<? extends StateInternal_>)newValue);return;case UmplePackage.STATE___FINAL_1:setFinal_1((Boolean)newValue);return;case UmplePackage.STATE___ANONYMOUS_STATE_11:getAnonymous_state_1_1().clear();getAnonymous_state_1_1().addAll((Collection<? extends Anonymous_state_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private boolean processAlert(MAlert alert){  if (!alert.isValid())   return false;  log.info("" + alert);  StringBuffer message=new StringBuffer(alert.getAlertMessage()).append(Env.NL);  boolean valid=true;  boolean processed=false;  ArrayList<File> attachments=new ArrayList<File>();  MAlertRule[] rules=alert.getRules(false);  for (int i=0; i < rules.length; i++) {    if (i > 0)     message.append(Env.NL);    String trxName=null;    MAlertRule rule=rules[i];    if (!rule.isValid())     continue;    log.fine("" + rule);    String sql=rule.getPreProcessing();    if (sql != null && sql.length() > 0) {      int no=DB.executeUpdate(sql,false,trxName);      if (no == -1) {        ValueNamePair error=CLogger.retrieveError();        rule.setErrorMsg("Pre=" + error.getName());        m_errors.append("Pre=" + error.getName());        rule.setIsValid(false);        rule.saveEx();        valid=false;        break;      }    }    sql=rule.getSql(true);    try {      String text=null;      if (MSysConfig.getBooleanValue("ALERT_SEND_ATTACHMENT_AS_XLS",true,Env.getAD_Client_ID(getCtx())))       text=getExcelReport(rule,sql,trxName,attachments); else       text=getPlainTextReport(rule,sql,trxName,attachments);      if (text != null && text.length() > 0) {        message.append(text);        processed=true;      }    } catch (    Exception e) {      rule.setErrorMsg("Select=" + e.getLocalizedMessage());      m_errors.append("Select=" + e.getLocalizedMessage());      rule.setIsValid(false);      rule.saveEx();      valid=false;      break;    }    sql=rule.getPostProcessing();    if (sql != null && sql.length() > 0) {      int no=DB.executeUpdate(sql,false,trxName);      if (no == -1) {        ValueNamePair error=CLogger.retrieveError();        rule.setErrorMsg("Post=" + error.getName());        m_errors.append("Post=" + error.getName());        rule.setIsValid(false);        rule.saveEx();        valid=false;        break;      }    }    if (trxName != null) {      Trx trx=Trx.get(trxName,false);      if (trx != null) {        trx.commit();        trx.close();      }    }  }  if (!valid) {    alert.setIsValid(false);    alert.saveEx();    return false;  }  if (!processed) {    m_summary.append(alert.getName()).append("=No Result - ");    return true;  }  DateFormat df=DisplayType.getDateFormat(DisplayType.DateTime);  message.append("\n\n");  message.append(Msg.translate(getCtx(),"Date")).append(" : ").append(df.format(new Timestamp(System.currentTimeMillis())));  Collection<Integer> users=alert.getRecipientUsers();  int countMail=notifyUsers(users,alert.getAlertSubject(),message.toString(),attachments);  m_summary.append(alert.getName()).append(" (EMails+Notes=").append(countMail).append(") - ");  return valid;}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  XYItemRendererState state=super.initialise(g2,dataArea,plot,data,info);  state.setProcessVisibleItemsOnly(false);  return state;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  return IOUtils.getFileAsString(f);}  }
class C{  @Override public boolean canConnect(Connector start,Connector end){  if ((start.getOwner() instanceof TaskFigure) && (end.getOwner() instanceof TaskFigure)) {    TaskFigure sf=(TaskFigure)start.getOwner();    TaskFigure ef=(TaskFigure)end.getOwner();    if (ef.getPredecessors().contains(sf)) {      return false;    }    return !sf.isDependentOf(ef);  }  return false;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static String shortenClass(Class<?> clazz){  Preconditions.checkNotNull(clazz);  String[] subpackages=clazz.getCanonicalName().split("\\.");  StringBuilder builder=new StringBuilder();  for (int index=0; index < subpackages.length - 1; index++) {    builder.append(subpackages[index].substring(0,1) + ".");  }  return builder.append(subpackages[subpackages.length - 1]).toString();}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder(getClass().getName());  buf.append("[dir: ");  buf.append(direction);  buf.append(" baselevel: ");  buf.append(paraLevel);  buf.append(" length: ");  buf.append(length);  buf.append(" runs: ");  if (levels == null) {    buf.append("none");  } else {    buf.append('[');    buf.append(levels[0]);    for (int i=1; i < levels.length; i++) {      buf.append(' ');      buf.append(levels[i]);    }    buf.append(']');  }  buf.append(" text: [0x");  buf.append(Integer.toHexString(text[0]));  for (int i=1; i < text.length; i++) {    buf.append(" 0x");    buf.append(Integer.toHexString(text[i]));  }  buf.append("]]");  return buf.toString();}  }
class C{  public void load(Properties props){  HashMap<String,Object> map=new HashMap<String,Object>();  Enumeration<?> keys=props.propertyNames();  while (keys.hasMoreElements()) {    String key=(String)keys.nextElement();    map.put(key,props.getProperty(key));  }  properties=map;}  }
class C{  @Override public ItemStack onItemRightClick(ItemStack par1ItemStack,World par2World,EntityPlayer par3EntityPlayer){  par3EntityPlayer.setItemInUse(par1ItemStack,this.getMaxItemUseDuration(par1ItemStack));  return par1ItemStack;}  }
class C{  public void output(PrintWriter out){  m_html.output(out);}  }
class C{  public void saveProject(ProjectContext projectContext){  EditorAssetManager assetManager=projectContext.assetManager;  for (  Asset asset : assetManager.getDirtyAssets()) {    try {      Log.debug(TAG,"Saving dirty asset: {}",asset);      assetManager.saveAsset(asset);      System.out.println(asset.getName());    } catch (    IOException e) {      Log.exception(TAG,e);    }  }  assetManager.getDirtyAssets().clear();  kryoManager.saveProjectContext(projectContext);  kryoManager.saveScene(projectContext,projectContext.currScene);  Log.debug(TAG,"Saving currentProject {}",projectContext.name + " [" + projectContext.path+ "]");}  }
class C{  public String generateDataURI(final InputStream inputStream,final String fileName) throws IOException {  final StringWriter writer=new StringWriter();  final byte[] bytes=IOUtils.toByteArray(inputStream);  inputStream.close();  final String mimeType=getMimeType(fileName);  generateDataURI(bytes,writer,mimeType);  return writer.toString();}  }
class C{  public void hideRecycler(){  mRecycler.setVisibility(View.GONE);}  }
class C{  protected final void unregisterMBean() throws IgniteSpiException {  if (spiMBean != null) {    MBeanServer jmx=ignite.configuration().getMBeanServer();    assert jmx != null;    try {      jmx.unregisterMBean(spiMBean);      if (log.isDebugEnabled())       log.debug("Unregistered SPI MBean: " + spiMBean);    } catch (    JMException e) {      throw new IgniteSpiException("Failed to unregister SPI MBean: " + spiMBean,e);    }  }}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  @Override public String aggregationKeysTipText(){  return "The keys to use for aggregating the statistics (blank-separated).";}  }
class C{  public static CreateServiceSessionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateServiceSessionResponse object=new CreateServiceSessionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"createServiceSessionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (CreateServiceSessionResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.506 -0500",hash_original_method="CEE88C8969112A140A79BE7502F1A5FB",hash_generated_method="B2F1E1C5DB311B07C47A34E4E860BCF2") public void putPendingTransaction(SIPServerTransaction tr){  if (stackLogger.isLoggingEnabled())   stackLogger.logDebug("putPendingTransaction: " + tr);  this.pendingTransactions.put(tr.getTransactionId(),tr);}  }
class C{  public static Gamma serializableInstance(){  return new Gamma();}  }
class C{  public static long[] nullToEmpty(final long[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_LONG_ARRAY;  }  return array;}  }
class C{  public synchronized Enumeration<K> keys(){  return this.<K>getEnumeration(KEYS);}  }
class C{  private void deleteImageToImageDatastoreMapping(final State current,String imageId,Operation.CompletionHandler completionHandler){  sendRequest(getCloudStoreHelper().createDelete(ServiceUriPaths.CLOUDSTORE_ROOT + "/images-to-image-datastore-mapping/" + imageId+ "_"+ current.datastore).setBody("{}").setCompletion(completionHandler));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.816 -0400",hash_original_method="A05F35CDD31E9B8D4D5DBF3B8BA2A28A",hash_generated_method="22643CEC97564B2ABE2730A7BD5343B6") private void onCreateDeviceResult(String address,int result){  if (DBG)   log("Result of onCreateDeviceResult:" + result);switch (result) {case CREATE_DEVICE_ALREADY_EXISTS:    String path=mBluetoothService.getObjectPathFromAddress(address);  if (path != null) {    mBluetoothService.discoverServicesNative(path,"");    break;  }Log.w(TAG,"Device exists, but we don't have the bluez path, failing");case CREATE_DEVICE_FAILED:mBluetoothService.sendUuidIntent(address);mBluetoothService.makeServiceChannelCallbacks(address);break;case CREATE_DEVICE_SUCCESS:}}  }
class C{  public void hide(){  animate(View.GONE);}  }
class C{  public InlineQueryResponse.InlineQueryResponseBuilder results(InlineQueryResult... results){  this.results=Arrays.asList(results);  return this;}  }
class C{  protected final void throwObjectContractViolation(Object o1,Object o2) throws IllegalArgumentException {  throw new IllegalArgumentException("Equal objects must have equal hashcodes. " + "During rehashing, Trove discovered that " + "the following two objects claim to be "+ "equal (as in java.lang.Object.equals() or TObjectHashingStrategy.equals()) "+ "but their hashCodes (or those calculated by "+ "your TObjectHashingStrategy) are not equal."+ "This violates the general contract of "+ "java.lang.Object.hashCode().  See bullet point two "+ "in that method's documentation. "+ "object #1 =" + o1 + (o1 == null ? "" : " (" + o1.getClass() + ")")+ ", hashCode="+ _hashingStrategy.computeHashCode((T)o1)+ "; object #2 ="+ o2+ (o2 == null ? "" : " (" + o2.getClass() + ")")+ ", hashCode="+ _hashingStrategy.computeHashCode((T)o2));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.105 -0500",hash_original_method="B0E12E7D32AA325023C77D5BAE46A99F",hash_generated_method="46AAB543916B79A7A87F80E188ACB237") static protected boolean hasList(Class<?> sipHdrClass){  if (!initialized)   initializeListMap();  return headerListTable.get(sipHdrClass) != null;}  }
class C{  public long toSecs(){  return TimeUnit.SECONDS.convert(length,timeUnit);}  }
class C{  public Vector(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public static Command show(String title,String text,Command[] cmds,int type,Image icon,long timeout){  return show(title,text,null,cmds,type,icon,timeout);}  }
class C{  public AsyncResult DeleteMonitoredItemsAsync(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,UnsignedInteger... MonitoredItemIds){  DeleteMonitoredItemsRequest req=new DeleteMonitoredItemsRequest(RequestHeader,SubscriptionId,MonitoredItemIds);  return channel.serviceRequestAsync(req);}  }
class C{  @LargeTest public void testFrameOverlaySetAndGetImage() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String overlayFile1=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  boolean flagForException=false;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,10000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem1);  final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);  final OverlayFrame overlayFrame1=mVideoEditorHelper.createOverlay(mediaImageItem1,"overlayId1",mBitmap,5000,5000);  mediaImageItem1.addOverlay(overlayFrame1);  overlayFrame1.setDuration(5000);  assertEquals("Overlay Duration",5000,overlayFrame1.getDuration());  try {    overlayFrame1.setDuration(mediaImageItem1.getDuration() + 10000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay Duration > Media Item Duration",flagForException);  assertEquals("Overlay Duration",5000,overlayFrame1.getDuration());  flagForException=false;  try {    overlayFrame1.setDuration(-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay Duration = -1",flagForException);}  }
class C{  public T casePrecondition_(Precondition_ object){  return null;}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (!(other instanceof SystemMemberType))   return false;  final SystemMemberType that=(SystemMemberType)other;  if (this.ordinal != that.ordinal)   return false;  return true;}  }
class C{  private Polygon findPolygon(final int x,final int y){  final Point startPoint=new Point(x,y);  while (inBounds(startPoint.x,startPoint.y - 1) && !isBlack(startPoint.x,startPoint.y)) {    startPoint.y--;  }  final List<Point> points=new ArrayList<>(100);  points.add(new Point(startPoint));  int currentDirection=2;  Point currentPoint=new Point(startPoint);  int iterCount=0;  while (!currentPoint.equals(startPoint) || points.size() == 1) {    iterCount++;    if (iterCount > 100000) {      JOptionPane.showMessageDialog(this,"Failed to grab the polygon. Failed at point: " + currentPoint.getX() + ","+ currentPoint.getY()+ "\r\n"+ "Note that this is a common error and can usually be fixed by 'smoothing out' the territory border and removing any anti-aliasing.");      return null;    }    int tempDirection;    for (int i=2; i >= -3; i--) {      tempDirection=(currentDirection + i) % 8;      if (tempDirection < 0) {        tempDirection+=8;      }      if (isOnEdge(tempDirection,currentPoint)) {        if (i != 0) {          points.add(currentPoint);          currentPoint=new Point(currentPoint);          move(currentPoint,tempDirection);          currentDirection=tempDirection;        } else {          move(currentPoint,currentDirection);        }        break;      }    }  }  final int[] xpoints=new int[points.size()];  final int[] ypoints=new int[points.size()];  int i=0;  for (  final Point item : points) {    xpoints[i]=item.x;    ypoints[i]=item.y;    i++;  }  System.out.println("Done finding polygon. total points;" + xpoints.length);  return new Polygon(xpoints,ypoints,xpoints.length);}  }
class C{  public void next(){  index++;}  }
class C{  public double[] toDistribution(){  final double[] ret=new double[getLength()];  long tot=0;  for (int i=0; i < getLength(); i++) {    tot+=getValue(i);  }  for (int i=0; i < getLength(); i++) {    ret[i]=(double)getValue(i) / tot;  }  return ret;}  }
class C{  public static void register(ActivityListener activityListener,Context context){  if (!(context instanceof ListenableActivity) && context instanceof ContextWrapper) {    context=((ContextWrapper)context).getBaseContext();  }  if (context instanceof ListenableActivity) {    ListenableActivity listenableActivity=(ListenableActivity)context;    Listener listener=new Listener(activityListener);    listenableActivity.addActivityListener(listener);  }}  }
class C{  private void launchIntent(String url,String referer,String headers,String externalAppId,boolean forceNewTab,Intent intent){  if (mUIInitialized) {    mLayoutManager.hideOverview(false);    getToolbarManager().finishAnimations();  }  if (TextUtils.equals(externalAppId,getPackageName())) {    getCurrentTabCreator().launchUrl(url,TabLaunchType.FROM_LINK,intent,mIntentHandlingTimeMs);  } else {    getTabCreator(false).launchUrlFromExternalApp(url,referer,headers,externalAppId,forceNewTab,intent,mIntentHandlingTimeMs);  }}  }
class C{  public void onScreenChange(boolean turnedOn){  if (DEBUG_LOGS)   Log.v(TAG,"onScreenChange: " + turnedOn);  if (turnedOn) {    mWasStepSensorUpdatedThisGlance=false;    mWereStepCountsUpdatedThisGlance=false;    bubbleManager.newGlance();    if (RANDOM_TIME_PER_GLANCE) {      mTimeManager.addRandomInc();    }    registerTimeZoneReceiver();    mStepCounterRegistered=DEBUG_FAKE_NO_STEP_SENSOR ? false : mSensorStepCount.register();    if (mUseStepDetector)     mSensorStepDetector.register();    mSensorAccelerometer.register();    mTwentyFourHourTime=DateFormat.is24HourFormat(getApplicationContext());  } else {    bubbleManager.byeGlance();    unregisterTimeZoneReceiver();    mSensorStepCount.unregister();    if (mUseStepDetector)     mSensorStepDetector.unregister();    mSensorAccelerometer.unregister();    bubbleManager.resetMotion();    splashScreen.deactivate();  }  updateTimer();}  }
class C{  public AppLauncher closeOutOnExit(boolean closeOutOnExit){  this.closeOutOnExit=closeOutOnExit;  return this;}  }
class C{  public boolean isFfxsr(){  return ffxsr;}  }
class C{  public GraphEvent popNext(){synchronized (queue) {    return queue.pollFirst();  }}  }
class C{  public AllTests(Class<?> klass) throws Throwable {  super(klass);}  }
class C{  public java.lang.StringBuilder insert(int offset,java.lang.String str){  return null;}  }
class C{  public static void isLocale(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_LOCALE,flag);  isLocaleSupported(member,value);}  }
class C{  public void transformValues(TFloatFunction function){  byte[] states=_states;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  private DaVinci(int poolSize){  if (poolSize <= 0) {    poolSize=DEFAULT_NETWORK_THREAD_POOL_SIZE;  }  mDefaultRequestQueue=VolleyManager.newRequestQueue(mContext,poolSize);  mDefaultDaImageLoader=new VinciImageLoader(mContext,mDefaultRequestQueue);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public static Tooltip create(final Element targetElement,final String header,final PositionController.VerticalAlign vAlign,final PositionController.HorizontalAlign hAlign,final String... tooltipText){  final PositionerBuilder positionrBuilder=new TooltipPositionerBuilder().setVerticalAlign(vAlign).setHorizontalAlign(hAlign);  final Positioner positioner=positionrBuilder.buildAnchorPositioner(targetElement);  final Builder builder=new Builder(targetElement,positioner);  builder.setTooltipRenderer(new ListRenderer(header,tooltipText));  return builder.build();}  }
class C{  @Ignore("TODO: Disabled for 52349") @Test public void testParallelAsyncEventQueueHA_Scenario1(){  Integer lnPort=(Integer)vm0.invoke(null);  vm1.invoke(createCacheRunnable(lnPort));  vm2.invoke(createCacheRunnable(lnPort));  LogWriterUtils.getLogWriter().info("Created the cache");  vm1.invoke(null);  vm2.invoke(null);  LogWriterUtils.getLogWriter().info("Created the AsyncEventQueue");  vm1.invoke(null);  vm2.invoke(null);  LogWriterUtils.getLogWriter().info("Created PR with AsyncEventQueue");  vm1.invoke(pauseAsyncEventQueueRunnable());  vm2.invoke(pauseAsyncEventQueueRunnable());  Wait.pause(1000);  LogWriterUtils.getLogWriter().info("Paused the AsyncEventQueue");  vm1.invoke(null);  LogWriterUtils.getLogWriter().info("Done puts");  Set<Integer> primaryBucketsvm2=(Set<Integer>)vm2.invoke(null);  LogWriterUtils.getLogWriter().info("Primary buckets on vm2: " + primaryBucketsvm2);  vm2.invoke(null);  Wait.pause(1000);  vm1.invoke(null);  vm1.invoke(null);  vm1.invoke(null);}  }
class C{  @Keep protected void onNotificationRemoved(final String key) throws Exception {}  }
class C{  public void endElement(String qName) throws SAXException {  if (!namespaces) {    if (contentHandler != null) {      contentHandler.endElement("","",qName.intern());    }    return;  }  String names[]=processName(qName,false,false);  if (contentHandler != null) {    contentHandler.endElement(names[0],names[1],names[2]);    Enumeration prefixes=nsSupport.getDeclaredPrefixes();    while (prefixes.hasMoreElements()) {      String prefix=(String)prefixes.nextElement();      contentHandler.endPrefixMapping(prefix);    }  }  nsSupport.popContext();}  }
class C{  public Intersection(Vec4 intersectionPoint,double intersectionLength,boolean isTangent){  this(intersectionPoint,isTangent);  this.intersectionLength=intersectionLength;}  }
class C{  public void clearGenericFontFamilies(){  genericFontFamilies=null;}  }
class C{  public String createProcessTree(int indent){  return createProcessTree(indent,"","",null,null);}  }
class C{  public void testUnsizedLongsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.longs().limit(size).parallel().forEach(null);  assertEquals(size,counter.sum());}  }
class C{  void dispose(){  myDocument.removeDocumentListener(myDocumentListener);  if (!myProject.isDefault()) {    EditorHistoryManager.getInstance(myProject).updateHistoryEntry(myFile,false);  }  disposeEditor(myEditor);  myConnection.disconnect();  myFile.getFileSystem().removeVirtualFileListener(myVirtualFileListener);}  }
class C{  protected void stopBridgeServer(Cache cache){  CacheServer bridge=(CacheServer)cache.getCacheServers().iterator().next();  bridge.stop();  assertFalse(bridge.isRunning());}  }
class C{  @Override public int indexOf(Object object){  return indexOf(object,0);}  }
class C{  public boolean equals(Object obj){  return (obj instanceof TextHitInfo) && equals((TextHitInfo)obj);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  View v=super.newView(context,cursor,parent);  v.setTag(new ChildViewCache(v));  return v;}  }
class C{  public int prepareInt(Offset offset){  return loadInt(offset);}  }
class C{  static void installLazyActionMap(final JComponent c,final Class<AquaTabbedPaneCopyFromBasicUI> loaderClass,final String defaultsKey){  ActionMap map=(ActionMap)UIManager.get(defaultsKey);  if (map == null) {    map=new LazyActionMap(loaderClass);    UIManager.getLookAndFeelDefaults().put(defaultsKey,map);  }  SwingUtilities.replaceUIActionMap(c,map);}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public boolean containsAll(Collection<?> coll){  for (  Object e : coll) {    if (!contains(e))     return false;  }  return true;}  }
class C{  public long checkValidValue(long value,TemporalField field){  if (isValidValue(value) == false) {    throw new DateTimeException(genInvalidFieldMessage(field,value));  }  return value;}  }
class C{  protected GatheredEvent createGatheredEventObject(final EventType type,final String id,final Date date){  GatheredEvent e=new GatheredEvent();  e.setActor("Anonymous");  e.setEventId(id);  e.setOccurrenceTime(date.getTime());  e.setSubscriptionTKey(subscriptionKey);  e.setType(type);  return e;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public img addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void disposeSplash(){  if (m_instance != null) {    m_instance.getOwner().dispose();    m_instance=null;  }}  }
class C{  protected boolean recoverStatement() throws SyntaxError, IOException {  while (true) {switch (token) {case EOF:case RBRACE:case LBRACE:case IF:case FOR:case WHILE:case DO:case TRY:case CATCH:case FINALLY:case BREAK:case CONTINUE:case RETURN:      return true;case VOID:case STATIC:case PUBLIC:case PRIVATE:case SYNCHRONIZED:case INTERFACE:case CLASS:case TRANSIENT:    expect(RBRACE);  return false;case LPAREN:match(LPAREN,RPAREN);scan();break;case LSQBRACKET:match(LSQBRACKET,RSQBRACKET);scan();break;default :scan();break;}}}  }
class C{  public void initialize(File propsFile){  initialize(loadProperties(propsFile));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.506 -0500",hash_original_method="C56C38D458207E713A2F639173CF494C",hash_generated_method="DE8BE02083584D99A675147A77CADEB0") public CompareResult<InetAddress> compareDnses(LinkProperties target){  CompareResult<InetAddress> result=new CompareResult<InetAddress>();  result.removed=new ArrayList<InetAddress>(mDnses);  result.added.clear();  if (target != null) {    for (    InetAddress newAddress : target.getDnses()) {      if (!result.removed.remove(newAddress)) {        result.added.add(newAddress);      }    }  }  return result;}  }
class C{  public void trainClassifier(File dir,String... args) throws Exception {  File trainingDataFile=(dir.isDirectory() ? getTrainingDataFile(dir) : dir);  train(trainingDataFile.getPath(),args);}  }
class C{  public SAXException(String message){  super(message);  this.exception=null;}  }
class C{  public static boolean isTokenName(String id){  return Character.isUpperCase(id.charAt(0));}  }
class C{  public void paint(final Graphics g){  final Dimension size=getSize();  int x=0;  int y=0;  final boolean horizontal=splitPane.getOrientation() == SwingConstants.HORIZONTAL;  final int maxSize=getMaxDividerSize();  boolean doPaint=true;  if (horizontal) {    if (size.height > maxSize) {      final int diff=size.height - maxSize;      y=diff / 2;      size.height=maxSize;    }    if (size.height < 4)     doPaint=false;  } else {    if (size.width > maxSize) {      final int diff=size.width - maxSize;      x=diff / 2;      size.width=maxSize;    }    if (size.width < 4)     doPaint=false;  }  if (doPaint) {    painter.state.set(getState());    painter.paint(g,splitPane,x,y,size.width,size.height);  }  super.paint(g);}  }
class C{  public static boolean traceCoversGoal(DefUseCoverageTestFitness goal,Chromosome individual,ExecutionTrace trace){  String goalVariable=goal.getGoalVariable();  Use goalUse=goal.getGoalUse();  Definition goalDefinition=goal.getGoalDefinition();  if (trace.getPassedUses(goalVariable) == null)   return false;  Set<Integer> objectPool=determineConsiderableObjects(goal,trace);  for (  Integer objectID : objectPool) {    List<Integer> usePositions=DefUseExecutionTraceAnalyzer.getUsePositions(goalUse,trace,objectID);    if (usePositions.size() == 0)     continue;    if (isSpecialDefinition(goalDefinition))     return true;    for (    Integer usePos : usePositions) {      if (DefUseExecutionTraceAnalyzer.getActiveDefinitionIdAt(goalVariable,trace,usePos,objectID) == goalDefinition.getDefId())       return true;    }  }  return false;}  }
class C{  public void stop(){  cancelAllTasks();  worlds.stop();  executor.shutdownNow();  asyncTaskExecutor.shutdown();synchronized (inTickTaskCondition) {    inTickTasks.stream().filter(null).forEach(null);    inTickTasks.clear();  }}  }
class C{  public RingBuffer(int maxCapacity,EvictionHandler evictionHandler){  mMaxCapacity=maxCapacity;  mEvictionHandler=evictionHandler;}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  public static void main(String[] args) throws Exception {  TestTempTableCrash.test();}  }
class C{  void initState(){  mIndex=-1;  mWho=null;  mAdded=false;  mRemoving=false;  mResumed=false;  mFromLayout=false;  mInLayout=false;  mRestored=false;  mBackStackNesting=0;  mFragmentManager=null;  mActivity=null;  mFragmentId=0;  mContainerId=0;  mTag=null;  mHidden=false;  mDetached=false;  mRetaining=false;  mLoaderManager=null;  mLoadersStarted=false;  mCheckedForLoaderManager=false;}  }
class C{  void appletReload(){  panel.sendEvent(AppletPanel.APPLET_STOP);  panel.sendEvent(AppletPanel.APPLET_DESTROY);  panel.sendEvent(AppletPanel.APPLET_DISPOSE);  AppletPanel.flushClassLoader(panel.getClassLoaderCacheKey());  try {    panel.joinAppletThread();    panel.release();  } catch (  InterruptedException e) {    return;  }  panel.createAppletThread();  panel.sendEvent(AppletPanel.APPLET_LOAD);  panel.sendEvent(AppletPanel.APPLET_INIT);  panel.sendEvent(AppletPanel.APPLET_START);}  }
class C{  public Fits(String filename) throws FitsException {  this(filename,CompressionManager.isCompressed(filename));}  }
class C{  public CertificateSerialNumber(DerInputStream in) throws IOException {  serial=new SerialNumber(in);}  }
class C{  protected void recordVersions(RegionVersionHolder vh,BitSet bs){  for (int i=1; i < bs.length(); i++) {    if (bs.get(i)) {      vh.recordVersion(i);    }  }}  }
class C{  public void saveFrame(File file) throws IOException {  if (!mEglCore.isCurrent(mEGLSurface)) {    throw new RuntimeException("Expected EGL context/surface is not current");  }  String filename=file.toString();  int width=getWidth();  int height=getHeight();  ByteBuffer buf=ByteBuffer.allocateDirect(width * height * 4);  buf.order(ByteOrder.LITTLE_ENDIAN);  GLES20.glReadPixels(0,0,width,height,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,buf);  GlUtil.checkGlError("glReadPixels");  buf.rewind();  BufferedOutputStream bos=null;  try {    bos=new BufferedOutputStream(new FileOutputStream(filename));    Bitmap bmp=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);    bmp.copyPixelsFromBuffer(buf);    bmp.compress(Bitmap.CompressFormat.PNG,90,bos);    bmp.recycle();  }  finally {    if (bos != null)     bos.close();  }  Log.d(TAG,"Saved " + width + "x"+ height+ " frame as '"+ filename+ "'");}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  lh.comment((char[])m_obj,m_start,m_length);}  }
class C{  private String printXFormat(final long x){  String sx=null;  if (x == Long.MIN_VALUE) {    sx="8000000000000000";  } else   if (x < 0) {    final String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,16);switch (t.length()) {case 1:      sx="800000000000000" + t;    break;case 2:  sx="80000000000000" + t;break;case 3:sx="8000000000000" + t;break;case 4:sx="800000000000" + t;break;case 5:sx="80000000000" + t;break;case 6:sx="8000000000" + t;break;case 7:sx="800000000" + t;break;case 8:sx="80000000" + t;break;case 9:sx="8000000" + t;break;case 10:sx="800000" + t;break;case 11:sx="80000" + t;break;case 12:sx="8000" + t;break;case 13:sx="800" + t;break;case 14:sx="80" + t;break;case 15:sx='8' + t;break;case 16:switch (t.charAt(0)) {case '1':sx='9' + t.substring(1,16);break;case '2':sx='a' + t.substring(1,16);break;case '3':sx='b' + t.substring(1,16);break;case '4':sx='c' + t.substring(1,16);break;case '5':sx='d' + t.substring(1,16);break;case '6':sx='e' + t.substring(1,16);break;case '7':sx='f' + t.substring(1,16);break;}break;}} else {sx=Long.toString(x,16);}return printXFormat(sx);}  }
class C{  private VisorIgfsProfilerClearJob(String arg,boolean debug){  super(arg,debug);}  }
class C{  @Override public String toString(){  return title;}  }
class C{  public final int _nextsib2(int identity){  if (identity < m_blocksize)   return m_nextsib_map0[identity]; else   return m_nextsib_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  public static SortedMap<byte[],Integer> hashSentence(final String sentence,int maxlength){  final SortedMap<byte[],Integer> map=new TreeMap<byte[],Integer>(Base64Order.enhancedCoder);  WordTokenizer words=new WordTokenizer(new SentenceReader(sentence),null);  try {    int pos=0;    StringBuilder word;    byte[] hash;    Integer oldpos;    while (words.hasMoreElements() && maxlength-- > 0) {      word=words.nextElement();      hash=Word.word2hash(word);      oldpos=map.put(hash,LargeNumberCache.valueOf(pos));      if (oldpos != null) {        map.put(hash,oldpos);      }      pos+=word.length() + 1;    }    return map;  }  finally {    words.close();    words=null;  }}  }
class C{  public static void main(String[] args) throws IOException {  File f=new File("Attack.report.txt");  FileWriter fw=new FileWriter(f);  pw=new PrintWriter(fw);  FreeCellNode goal=Deal.goal();  Scanner sc=new Scanner(new File(args[0]));  while (sc.hasNext()) {    int dealNumber=sc.nextInt();    System.out.println("Searching board:" + dealNumber);    FreeCellNode fc=Deal.initialize(new File("artifacts","32000.txt"),dealNumber);    System.out.println(fc.toString());    pw.println("working on: " + dealNumber);    pw.println(fc);    pw.flush();    System.out.println("working on: " + dealNumber);    IScore eval=new BoardScorer();    GoalDirectedStagedDeepening<short[]> gdsd=new GoalDirectedStagedDeepening<short[]>(goal,eval);    gdsd.setLookAhead(7);    Result res=gdsd.fullSearch(fc,eval,FreeCellNode.comparator());    Stack<IMove> st=res.solution();    if (res.success) {      System.out.println("  Solution found!");      pw.println(st.size() + " moves");    } else {      System.out.println(" No solution uncovered.");      pw.println("  NO SOLUTION FOUND!");    }    pw.flush();  }  sc.close();}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int missingLevel,boolean predictorMissing,boolean classMissing,int numTrain,int numTest,int numClasses,ArrayList<String> accepts){  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,TestInstances.CLASS_IS_LAST,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  private static void fixRectangleOrientation(double[] m,Rectangle2D clip){  if (clip.getWidth() > 0 != (m[2] - m[0] > 0)) {    double t=m[0];    m[0]=m[2];    m[2]=t;  }  if (clip.getHeight() > 0 != (m[3] - m[1] > 0)) {    double t=m[1];    m[1]=m[3];    m[3]=t;  }}  }
class C{  public void testBug21876798() throws Exception {  createTable("testBug21876798","(tst INT, val INT)");  for (int tst=0; tst < 4; tst++) {    boolean useServerPrepStmts=(tst & 0x1) != 0;    boolean rewriteBatchedStatements=(tst & 0x2) != 0;    Properties props=new Properties();    props.setProperty("useServerPrepStmts",Boolean.toString(useServerPrepStmts));    props.setProperty("rewriteBatchedStatements",Boolean.toString(rewriteBatchedStatements));    String testCase=String.format("Case: %d [ %s | %s ]",tst,useServerPrepStmts ? "useSPS" : "-",rewriteBatchedStatements ? "rwBatchedStmts" : "-");    Connection highLevelConn=getLoadBalancedConnection(props);    assertTrue(testCase,highLevelConn.getClass().getName().startsWith("com.sun.proxy") || highLevelConn.getClass().getName().startsWith("$Proxy"));    Connection lowLevelConn=getMasterSlaveReplicationConnection(props);    ((ReplicationConnection)lowLevelConn).setProxy((MySQLConnection)highLevelConn);    this.pstmt=lowLevelConn.prepareStatement("INSERT INTO testBug21876798 VALUES (?, ?)");    for (int i=1; i <= 4; i++) {      this.pstmt.setInt(1,tst);      this.pstmt.setInt(2,i);      this.pstmt.addBatch();    }    this.pstmt.executeBatch();    this.rs=this.stmt.executeQuery("SELECT val FROM testBug21876798 WHERE tst = " + tst);    for (int i=1; i <= 4; i++) {      assertTrue(testCase + "/Row#" + i,this.rs.next());      assertEquals(testCase + "/Row#" + i,i,this.rs.getInt(1));    }    assertFalse(testCase,this.rs.next());    this.pstmt=lowLevelConn.prepareStatement("UPDATE testBug21876798 SET val = ? WHERE tst = ? AND val = ?");    for (int i=1; i <= 4; i++) {      this.pstmt.setInt(1,-i);      this.pstmt.setInt(2,tst);      this.pstmt.setInt(3,i);      this.pstmt.addBatch();    }    this.pstmt.executeBatch();    this.rs=this.stmt.executeQuery("SELECT val FROM testBug21876798 WHERE tst = " + tst);    for (int i=1; i <= 4; i++) {      assertTrue(testCase + "/Row#" + i,this.rs.next());      assertEquals(testCase + "/Row#" + i,-i,this.rs.getInt(1));    }    assertFalse(testCase,this.rs.next());    lowLevelConn.close();    highLevelConn.close();  }}  }
class C{  protected void useAsReference(MapEntity entity){  currMatchLevel=getMatchLevel(entity);}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  public double distanceSq(final double x,final double y){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  return (dx * dx + dy * dy);}  }
class C{  protected void calculatePartialsPartialsPruning(double[] partials1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3){  double sum1, sum2;  int u=0;  int v=0;  int w=0;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      sum1=matrices1[w] * partials1[v];      sum2=matrices2[w] * partials2[v];      sum1+=matrices1[w + 1] * partials1[v + 1];      sum2+=matrices2[w + 1] * partials2[v + 1];      sum1+=matrices1[w + 2] * partials1[v + 2];      sum2+=matrices2[w + 2] * partials2[v + 2];      sum1+=matrices1[w + 3] * partials1[v + 3];      sum2+=matrices2[w + 3] * partials2[v + 3];      partials3[u]=sum1 * sum2;      u++;      sum1=matrices1[w + 4] * partials1[v];      sum2=matrices2[w + 4] * partials2[v];      sum1+=matrices1[w + 5] * partials1[v + 1];      sum2+=matrices2[w + 5] * partials2[v + 1];      sum1+=matrices1[w + 6] * partials1[v + 2];      sum2+=matrices2[w + 6] * partials2[v + 2];      sum1+=matrices1[w + 7] * partials1[v + 3];      sum2+=matrices2[w + 7] * partials2[v + 3];      partials3[u]=sum1 * sum2;      u++;      sum1=matrices1[w + 8] * partials1[v];      sum2=matrices2[w + 8] * partials2[v];      sum1+=matrices1[w + 9] * partials1[v + 1];      sum2+=matrices2[w + 9] * partials2[v + 1];      sum1+=matrices1[w + 10] * partials1[v + 2];      sum2+=matrices2[w + 10] * partials2[v + 2];      sum1+=matrices1[w + 11] * partials1[v + 3];      sum2+=matrices2[w + 11] * partials2[v + 3];      partials3[u]=sum1 * sum2;      u++;      sum1=matrices1[w + 12] * partials1[v];      sum2=matrices2[w + 12] * partials2[v];      sum1+=matrices1[w + 13] * partials1[v + 1];      sum2+=matrices2[w + 13] * partials2[v + 1];      sum1+=matrices1[w + 14] * partials1[v + 2];      sum2+=matrices2[w + 14] * partials2[v + 2];      sum1+=matrices1[w + 15] * partials1[v + 3];      sum2+=matrices2[w + 15] * partials2[v + 3];      partials3[u]=sum1 * sum2;      u++;      v+=4;    }    w+=matrixSize;  }}  }
class C{  protected void sendDeviceMovedNotification(Device d){  cntDeviceMoved.increment();  deviceSyncManager.storeDevice(d);  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();  if (listeners != null) {    for (    IDeviceListener listener : listeners) {      listener.deviceMoved(d);    }  }}  }
class C{  public static char nextKeyTyped(){synchronized (keyLock) {    return keysTyped.removeLast();  }}  }
class C{  private static void recursiveSet(CopycatClient client,AtomicInteger counter){  client.submit(new SetCommand(UUID.randomUUID().toString())).thenRun(null);}  }
class C{  public static <T>boolean changeIndex(List<T> list,T element,int index){  final int oldIndex=list.indexOf(element);  final int listSize=list.size();  if (index != oldIndex && oldIndex != -1) {    if (listSize == 1) {      return true;    }    list.remove(oldIndex);    list.add(index,element);    return true;  }  return false;}  }
class C{  public NceConsistRosterEntry(){}  }
class C{  @Override public short shortValue(){  return value;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public static String prepare(String s){  return s != null ? s.trim().toLowerCase() : "";}  }
class C{  private void prepareGroupSnapshotData(){  ArrayList<DataObject> newObjectsToBeCreated=new ArrayList<DataObject>();  StorageSystem system=new StorageSystem();  URI systemURI=URIUtil.createId(StorageSystem.class);  system.setId(systemURI);  system.setSystemType(DiscoveredDataObject.Type.vmax.name());  system.setFirmwareVersion(VMAX3_SYSTEM_FW_VERSION);  newObjectsToBeCreated.add(system);  BlockConsistencyGroup cg=new BlockConsistencyGroup();  URI cgURI=URIUtil.createId(BlockConsistencyGroup.class);  cg.setId(cgURI);  newObjectsToBeCreated.add(cg);  URI projectURI=URIUtil.createId(Project.class);  for (int i=0; i < GRP_SETTINGS_INSTANCE_COUNT; i++) {    for (int j=0; j < SNAPVX_SNAPSHOT_COUNT; j++) {      BlockSnapshot snapshot=new BlockSnapshot();      URI snapshotURI=URIUtil.createId(BlockSnapshot.class);      snapshot.setId(snapshotURI);      snapshot.setLabel(BASE_GRP_SNAPVX_SNAPSHOT_NAME + i + j);      snapshot.setSnapsetLabel(BASE_GRP_SNAPVX_SNAPSHOT_NAME + i);      snapshot.setProject(new NamedURI(projectURI,PROJECT_NAME));      URI parentURI=URIUtil.createId(Volume.class);      snapshot.setParent(new NamedURI(parentURI,GRP_PARENT_NAME + i + j));      snapshot.setConsistencyGroup(cgURI);      snapshot.setSettingsInstance(BASE_GRP_SETTINGS_INSTANCE + i);      snapshot.setStorageController(systemURI);      newObjectsToBeCreated.add(snapshot);    }  }  _dbClient.createObject(newObjectsToBeCreated);}  }
class C{  public VmfsDatastoreExpandSpec pickBestExpandSpec(HostScsiDisk disk,List<VmfsDatastoreOption> expandOptions){  if ((expandOptions == null) || expandOptions.isEmpty()) {    return null;  }  for (  VmfsDatastoreOption option : expandOptions) {    VmfsDatastoreExpandSpec spec=(VmfsDatastoreExpandSpec)option.getSpec();    String diskName=spec.getExtent().getDiskName();    if (StringUtils.equals(diskName,disk.getCanonicalName())) {      return spec;    }  }  return null;}  }
class C{  static void checkMap(Map<String,Class<?>> map){  if (map != null && map.size() > 0) {    throw DbException.getUnsupportedException("map.size > 0");  }}  }
class C{  public PutResult putAnnotations(List<Annotation> annotations) throws IOException {  String requestUrl=COLLECTION_RESOURCE + RESOURCE;  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,annotations);  assertValidResponse(response,requestUrl);  Map<String,Object> map=fromJson(response.getResult(),new TypeReference<Map<String,Object>>(){  });  List<String> errorMessages=(List<String>)map.get("Error Messages");  return new PutResult(String.valueOf(map.get("Success")),String.valueOf(map.get("Errors")),errorMessages);}  }
class C{  static public int day(){  time.setToNow();  return time.monthDay;}  }
class C{  public void writeToParcel(Parcel parcel,int flags){  final boolean oldAllowFds=parcel.pushAllowFds(mAllowFds);  try {    if (mParcelledData != null) {      int length=mParcelledData.dataSize();      parcel.writeInt(length);      parcel.writeInt(0x4C444E42);      parcel.appendFrom(mParcelledData,0,length);    } else {      parcel.writeInt(-1);      parcel.writeInt(0x4C444E42);      int oldPos=parcel.dataPosition();      parcel.writeMapInternal(mMap);      int newPos=parcel.dataPosition();      parcel.setDataPosition(oldPos - 8);      int length=newPos - oldPos;      parcel.writeInt(length);      parcel.setDataPosition(newPos);    }  }  finally {    parcel.restoreAllowFds(oldAllowFds);  }}  }
class C{  public static int gluUnProject(double winX,double winY,double winZ,double[] model,int modelOffset,double[] project,int projectOffset,int[] view,int viewOffset,double[] obj,int objOffset){  double[] scratch=sScratch;synchronized (scratch) {    final int PM_OFFSET=0;    final int INVPM_OFFSET=16;    final int V_OFFSET=0;    Matrix.multiplyMM(scratch,PM_OFFSET,project,projectOffset,model,modelOffset);    if (!Matrix.invertM(scratch,INVPM_OFFSET,scratch,PM_OFFSET)) {      return GL10.GL_FALSE;    }    scratch[V_OFFSET + 0]=2.0 * (winX - view[viewOffset + 0]) / view[viewOffset + 2] - 1.0;    scratch[V_OFFSET + 1]=2.0 * (winY - view[viewOffset + 1]) / view[viewOffset + 3] - 1.0;    scratch[V_OFFSET + 2]=2.0 * winZ - 1.0;    scratch[V_OFFSET + 3]=1.0;    Matrix.multiplyMV(obj,objOffset,scratch,INVPM_OFFSET,scratch,V_OFFSET);  }  return GL10.GL_TRUE;}  }
class C{  public void updateView(){  if (fInputElement != null && fParentComposite != null) {    IndicatorViewState oldState=fStateMap.get(fInputElement);    boolean reload=fFilesToReoad.contains(fInputElement);    if (reload || oldState == null) {      JsonObject jsonObject=DroidsafePluginUtilities.parseIndicatorFile(fInputElement);      if (jsonObject == null)       return;      fFilesToReoad.remove(fInputElement);      fState=new IndicatorViewState(fInputElement,jsonObject,getSecuritySpec(),oldState);      fStateMap.put(fInputElement,fState);    } else {      fState=oldState;    }    setPartName(fState.indicatorType);    showPage(PAGE_VIEWER);    fTreeViewer.setInput(fState.jsonObject);    if (fTreeViewer.getSorter() == null)     sortByField(getSortByField());  } else {    setPartName(DEFAULT_PART_NAME);  }}  }
class C{  public boolean hasParameters(){  return authParams.size() != 0;}  }
class C{  public EntryBuffer clear(){  for (int i=0; i < buffer.length; i++) {    buffer[i]=null;  }  return this;}  }
class C{  private static int preferSignature(Object[] args,Class<?>[] sig1,boolean vararg1,Class<?>[] sig2,boolean vararg2){  int totalPreference=0;  for (int j=0; j < args.length; j++) {    Class<?> type1=vararg1 && j >= sig1.length ? sig1[sig1.length - 1] : sig1[j];    Class<?> type2=vararg2 && j >= sig2.length ? sig2[sig2.length - 1] : sig2[j];    if (type1 == type2) {      continue;    }    Object arg=args[j];    int rank1=NativeJavaObject.getConversionWeight(arg,type1);    int rank2=NativeJavaObject.getConversionWeight(arg,type2);    int preference;    if (rank1 < rank2) {      preference=PREFERENCE_FIRST_ARG;    } else     if (rank1 > rank2) {      preference=PREFERENCE_SECOND_ARG;    } else {      if (rank1 == NativeJavaObject.CONVERSION_NONTRIVIAL) {        if (type1.isAssignableFrom(type2)) {          preference=PREFERENCE_SECOND_ARG;        } else         if (type2.isAssignableFrom(type1)) {          preference=PREFERENCE_FIRST_ARG;        } else {          preference=PREFERENCE_AMBIGUOUS;        }      } else {        preference=PREFERENCE_AMBIGUOUS;      }    }    totalPreference|=preference;    if (totalPreference == PREFERENCE_AMBIGUOUS) {      break;    }  }  return totalPreference;}  }
class C{  public double manhattanDistance(final Double3D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  final double dz=Math.abs((double)this.z - p.z);  return dx + dy + dz;}  }
class C{  public static boolean isAsocReg(UseCaseConf useCaseConf,Integer folderId,Integer bookId) throws BookException, SessionException, ValidationException {  return FolderAsocSession.isAsocRegsFdr(useCaseConf.getSessionID(),bookId,folderId.intValue(),useCaseConf.getEntidadId());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.284 -0500",hash_original_method="5AAB9E5D017D2C4FE1A2773C7915D068",hash_generated_method="5AAB9E5D017D2C4FE1A2773C7915D068") TFTPReadRequestPacket(DatagramPacket datagram) throws TFTPPacketException {  super(TFTPPacket.READ_REQUEST,datagram);}  }
class C{  public String descriptor(int i){  return getConstPool().getUtf8Info(descriptorIndex(i));}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  private void recomputeSeperation(double[][] means,double[][] cdist,int[][] cnum,LongStatistic diststat){  final int k=means.length;  for (int i=1; i < k; i++) {    DoubleVector mi=DoubleVector.wrap(means[i]);    for (int j=0; j < i; j++) {      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));    }  }  double[] buf=new double[k - 1];  for (int i=0; i < k; i++) {    System.arraycopy(cdist[i],0,buf,0,i);    System.arraycopy(cdist[i],i + 1,buf,i,k - i - 1);    for (int j=0; j < buf.length; j++) {      cnum[i][j]=j < i ? j : (j + 1);    }    DoubleIntegerArrayQuickSort.sort(buf,cnum[i],k - 1);  }  if (diststat != null) {    diststat.increment((k * (k - 1)) >> 1);  }}  }
class C{  @Override public Collection<Integer> positions(){  return this.positions;}  }
class C{  public synchronized void search(String searchString,boolean regexp){  int i;  SearchParameters params;  m_RegExpSearch=regexp;  m_SearchString=searchString;  params=new SearchParameters(m_SearchString,m_RegExpSearch);  if (m_SearchString == null) {    m_DisplayIndices=null;  } else {    m_DisplayIndices=new TIntArrayList();    for (i=0; i < getActualRowCount(); i++) {      if (isSearchMatch(params,m_SortedIndices[i]))       m_DisplayIndices.add(i);    }  }  fireTableDataChanged();}  }
class C{  public boolean isEnabled(){  return params.isEnabled;}  }
class C{  private void initControls(){  mCancelBtn=(Button)findViewById(R.id.folder_picker_btn_cancel);  mCancelBtn.setOnClickListener(this);  mChooseBtn=(Button)findViewById(R.id.folder_picker_btn_choose);  mChooseBtn.setOnClickListener(this);}  }
class C{  public boolean hasMobileData(){  assertTrue(mConnectionUtil.waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,ConnectionUtil.LONG_TIMEOUT));  assertTrue("Not connected to mobile",mConnectionUtil.isConnectedToMobile());  assertFalse("Still connected to wifi.",mConnectionUtil.isConnectedToWifi());  return mConnectionUtil.hasData();}  }
class C{  public void actionPerformed(ActionEvent evt){  panel.getSharedContext().setDebug_draw_font_metrics(!panel.getSharedContext().debugDrawFontMetrics());  panel.repaint();}  }
class C{  ASN1ObjectIdentifier(ASN1ObjectIdentifier oid,String branchID){  if (!isValidBranchID(branchID,0)) {    throw new IllegalArgumentException("string " + branchID + " not a valid OID branch");  }  this.identifier=oid.getId() + "." + branchID;}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  public static File openFile(String path){  try {    return new File(path);  } catch (  Error e) {    return null;  }}  }
class C{  public RydePgpFileOutputStream(@Provided @Config("rdeRydeBufferSize") Integer bufferSize,@WillNotClose OutputStream os,DateTime modified,String filename){  super(createDelegate(bufferSize,os,modified,filename));}  }
class C{  public void windowClosing(WindowEvent e){  System.exit(0);}  }
class C{  public void pointClicked(Point2D point,boolean isShiftDown){  double x=untransformX(point.getX());  double y=untransformY(point.getY());  if (markBounds != null) {    int mark=-1;    for (int i=0; i < markBounds.size(); i++) {      if ((markBounds.get(i)).contains(point)) {        mark=i;        break;      }    }    fireMarkClickedEvent(mark,x,y,isShiftDown);  }  firePointClickedEvent(x,y,isShiftDown);}  }
class C{  public void alignItemsVertically(float padding){  float height=-padding;  for (  CCNode item : children_) {    height+=item.getContentSize().height * item.getScaleY() + padding;  }  float y=height / 2.0f;  for (int i=0; i < children_.size(); i++) {    CCMenuItem item=(CCMenuItem)children_.get(i);    item.setPosition(0,y - item.getContentSize().height * item.getScaleY() / 2.0f);    y-=item.getContentSize().height * item.getScaleY() + padding;  }}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof Double)   return new Long(Math.round(((Double)o).doubleValue())); else   return new Integer(Math.round(((Number)o).floatValue()));}  }
class C{  public ParallelTaskBuilder prepareHttpGet(String url){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.getHttpMeta().setHttpMethod(HttpMethod.GET);  cb.getHttpMeta().setRequestUrlPostfix(url);  return cb;}  }
class C{  public static X509Certificate decodeX509Certificate(byte[] encodedCertificate) throws CertificateException {  try {    if (encodedCertificate == null)     throw new IllegalArgumentException("null arg");    CertificateFactory cf=CertificateFactory.getInstance("X.509");    ByteArrayInputStream bais=new ByteArrayInputStream(encodedCertificate);    X509Certificate result=(X509Certificate)cf.generateCertificate(bais);    bais.close();    return result;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public Map<Value,Set<URI>> predecessors(){  return predecessors;}  }
class C{  public void testConstructorBytesZero(){  byte aBytes[]={0,0,0,-0,+0,0,-0};  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public boolean hasPhoneNumbers(){  return hasRepeatingExtension(PhoneNumber.class);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.PRECONDITION___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.PRECONDITION___CONSTRAINT_1:getConstraint_1().clear();return;}super.eUnset(featureID);}  }
class C{  private static int mod(int a,final int B){  final int N=a / B;  a-=N * B;  if (a < 0) {    return a + B;  }  return a;}  }
class C{  public Timezone(UtcOffset offset){  this(offset,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:56.151 -0500",hash_original_method="13C71D739499D98499F08E0B68D72954",hash_generated_method="3B4139C4D3E5EEAC06EE22EAA7358A3F") public int[] startSubnegotiationRemote(){  return null;}  }
class C{  public SignatureData build(SigningKey signingKey,String signatureAlgorithmId) throws Exception {  log.trace("Sign, {} part(s)",parts.size());  SigningRequest request=new SigningRequest(signingCert,parts);  request.getExtraCertificates().addAll(extraCertificates);  request.getOcspResponses().addAll(ocspResponses);  return signingKey.calculateSignature(request,signatureAlgorithmId);}  }
class C{  public static String decode(String str,String charset) throws RuntimeException {  byte[] bytes;  try {    bytes=str.getBytes("ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("ASCII is not supported!",e);  }  byte[] decoded=decode(bytes);  try {    return new String(decoded,charset);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("Unsupported charset: " + charset,e);  }}  }
class C{  @SuppressWarnings("deprecation") @Override public void onItemClick(AdapterView<?> parent,View v,int position,long id){  String pt=(String)list.get(position).get("path");  String fn=(String)list.get(position).get("name");  if (fn.equals(sRoot) || fn.equals(sParent)) {    File fl=new File(pt);    String ppt=fl.getParent();    if (ppt != null) {      path=ppt;    } else {      path=sRoot;    }  } else {    File fl=new File(pt);    if (fl.isFile()) {      ((Activity)getContext()).dismissDialog(this.dialogid);      Bundle bundle=new Bundle();      bundle.putString("path",pt);      bundle.putString("name",fn);      this.callback.callback(bundle);      return;    } else     if (fl.isDirectory()) {      path=pt;    }  }  this.refreshFileList();}  }
class C{  public void clear(){synchronized (this) {    internalMap=new HashMap<K,V>();  }}  }
class C{  public Enumeration<String> attributeNames(){  return Collections.enumeration(new LinkedList<String>(values.keySet()));}  }
class C{  public int hashCode(){  return 0;}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  public static void flip(IBoard board,boolean horiz,boolean vert){  if (!vert && !horiz) {    return;  }  int stopX;  int stopY;  int width=board.getWidth();  int height=board.getHeight();  if (horiz) {    stopX=width / 2;    stopY=height;  } else {    stopX=width;    stopY=height / 2;  }  int newX;  int newY;  IHex tempHex;  ITerrain terr;  for (int oldX=0; oldX < stopX; oldX++) {    if (horiz) {      newX=width - oldX - 1;    } else {      newX=oldX;    }    for (int oldY=0; oldY < stopY; oldY++) {      if (vert) {        newY=height - oldY - 1;      } else {        newY=oldY;      }      tempHex=board.getHex(oldX,oldY);      board.setHex(oldX,oldY,board.getHex(newX,newY));      board.setHex(newX,newY,tempHex);      IHex newHex=board.getHex(newX,newY);      IHex oldHex=board.getHex(oldX,oldY);      terr=newHex.getTerrain(Terrains.ROAD);      if (null != terr) {        terr.flipExits(horiz,vert);      }      terr=oldHex.getTerrain(Terrains.ROAD);      if (null != terr) {        terr.flipExits(horiz,vert);      }      terr=newHex.getTerrain(Terrains.BUILDING);      if (null != terr) {        terr.flipExits(horiz,vert);      }      terr=oldHex.getTerrain(Terrains.BUILDING);      if (null != terr) {        terr.flipExits(horiz,vert);      }      terr=newHex.getTerrain(Terrains.FUEL_TANK);      if (null != terr) {        terr.flipExits(horiz,vert);      }      terr=oldHex.getTerrain(Terrains.FUEL_TANK);      if (null != terr) {        terr.flipExits(horiz,vert);      }      terr=newHex.getTerrain(Terrains.BRIDGE);      if (null != terr) {        terr.flipExits(horiz,vert);      }      terr=oldHex.getTerrain(Terrains.BRIDGE);      if (null != terr) {        terr.flipExits(horiz,vert);      }    }  }}  }
class C{  public static void checkAndSetColorParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Color color=getColor(context,paramName,xpath);    if (color != null)     params.setValue(paramKey,color);  }}  }
class C{  public Iterator<E> headIterator(E to){  return new BinarySearchTreeIterator<E>(this.root,null,to);}  }
class C{  public JSONContent(Map content){  super(content);}  }
class C{  public static void mapping(String mappedFieldName,String mappedClassName){  throw new MappingErrorException(MSG.INSTANCE.message(mappingErrorException2length,mappedFieldName,mappedClassName));}  }
class C{  public static void checkAndAppendSectorElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o != null && o instanceof Sector) {    appendSector(context,path,(Sector)o);  }}  }
class C{  @Override public String toString(){  return new String(buf,0,count);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static double bessi0(double x){  double ax, ans;  double y;  if ((ax=Math.abs(x)) < 3.75) {    y=x / 3.75;    y*=y;    ans=1.0 + y * (3.5156229 + y * (3.0899424 + y * (1.2067492 + y * (0.2659732 + y * (0.360768e-1 + y * 0.45813e-2)))));  } else {    y=3.75 / ax;    ans=(Math.exp(ax) / Math.sqrt(ax)) * (0.39894228 + y * (0.1328592e-1 + y * (0.225319e-2 + y * (-0.157565e-2 + y * (0.916281e-2 + y * (-0.2057706e-1 + y * (0.2635537e-1 + y * (-0.1647633e-1 + y * 0.392377e-2))))))));  }  return ans;}  }
class C{  public void addListener(NavigatorListener listener){  listeners.add(listener);}  }
class C{  private void insertEnvelope(PendingEnvelope pendingEnvelope){  pendingEnvelopQueue.add(pendingEnvelope);  int queueSize=pendingEnvelopQueue.size();  taskMetrics.pendingMessages().set(queueSize);  log.trace("Insert envelope to task {} queue.",taskName);  log.debug("Task {} pending envelope count is {} after insertion.",taskName,queueSize);}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  } else {    boolean sixpack=((count % 6) == 0);    if (sixpack) {      sb.append((char)LATCH_TO_BYTE);    } else {      sb.append((char)LATCH_TO_BYTE_PADDED);    }  }  int idx=startpos;  if (count >= 6) {    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  public static void addFilterLibrary(String libraryPath){  if (mLogVerbose)   Log.v(TAG,"Adding filter library " + libraryPath);synchronized (mClassLoaderGuard) {    if (mLibraries.contains(libraryPath)) {      if (mLogVerbose)       Log.v(TAG,"Library already added");      return;    }    mLibraries.add(libraryPath);    mCurrentClassLoader=new PathClassLoader(libraryPath,mCurrentClassLoader);  }}  }
class C{  public DefaultClientWebRequestBuilder cookie(HttpCookie cookie){  this.cookies.add(cookie.getName(),cookie);  return this;}  }
class C{  private void onBluetoothDisconnected(Context context,Intent intent){  BluetoothDevice device;  device=(BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  Log.i(TAG,"Bluetooth broadcast: disconnected! (from " + device + ")");}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute1;  Attr attribute2;  Attr attrNode;  String attrName;  String attrNS;  String attrValue;  NamedNodeMap attributes;  Attr newAttribute;  int length;  doc=(Document)load("staff",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/Level2","new:element");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p1:att");  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p2:att");  attribute2.setValue("value2");  newAttribute=element.setAttributeNodeNS(attribute1);  newAttribute=element.setAttributeNodeNS(attribute2);  attrNode=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/att1","att");  attrName=attrNode.getNodeName();  attrNS=attrNode.getNamespaceURI();  assertEquals("elementsetattributenodens01_attrName","p2:att",attrName);  assertEquals("elementsetattributenodens01_attrNS","http://www.w3.org/DOM/Test/att1",attrNS);  attributes=element.getAttributes();  length=(int)attributes.getLength();  assertEquals("length",1,length);}  }
class C{  protected void doDestroy(Object key,String regionName){  Region region=getCache().getRegion(regionName);  assertNotNull(region);  region.destroy(key);}  }
class C{  public synchronized void renderDataForProjection(Projection proj,Graphics g){  if (proj == null) {    logger.warning("Layer(" + getName() + ").renderDataForProjection: null projection!");    return;  } else   if (!proj.equals(getProjection())) {    setProjection(proj.makeClone());    setList(getRenderPolicy().prepare());  }  paint(g);}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  public JSONArray append(int value){  this.append(new Integer(value));  return this;}  }
class C{  private void add(final String name,final int[] frameIndexes,final int[] frameDelays){  acquire(name).add(frameIndexes,frameDelays);}  }
class C{  public ConstantOptionletVolatility(final int settlementDays,final Calendar cal,final BusinessDayConvention bdc,final double vol,final DayCounter dc){  super(settlementDays,cal,bdc,dc);  this.volatility_=new Handle<Quote>(new SimpleQuote(vol));}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public StandardOutputPrinter(final int level){  super(level,System.out);}  }
class C{  public IgniteContainer(ContainerId id,NodeId nodeId,double cpuCores,double mem){  this.id=id;  this.nodeId=nodeId;  this.cpuCores=cpuCores;  this.mem=mem;}  }
class C{  public void write(int b) throws IOException {  raf.write(b);}  }
class C{  public void notifyDead(final Creature dead){  if (!respawning) {    respawning=true;    SingletonRepository.getTurnNotifier().notifyInTurns(calculateNextRespawnTurn(),this);  }  creatures.remove(dead);}  }
class C{  @Override public String toString(){  return name;}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  draw(g2,area);  return null;}  }
class C{  public CPanel(CompiereColor bc){  this();  init();  setBackgroundColor(bc);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.393 -0500",hash_original_method="BBB0EEA794A5EB08AF57745D59E4ED21",hash_generated_method="8A569DEE210BC5DBEB5FC34B66E0FD8E") private final void invokeEnterMethods(int stateStackEnteringIndex){  for (int i=stateStackEnteringIndex; i <= mStateStackTopIndex; i++) {    if (mDbg)     Log.d(TAG,"invokeEnterMethods: " + mStateStack[i].state.getName());    mStateStack[i].state.enter();    mStateStack[i].active=true;  }}  }
class C{  public void changeKey(int i,Key key){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  if (greater(key,nodes[i].key))   increaseKey(i,key); else   decreaseKey(i,key);}  }
class C{  private Network createNetwork(String uniqueId){  Network network;  List<Network> results=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,Network.class,"nativeId",uniqueId);  if (results == null || results.isEmpty()) {    network=new Network();    network.setId(URIUtil.createId(Network.class));    network.setTransportType(StorageProtocol.Transport.ScaleIO.name());    network.setNativeId(uniqueId);    network.setLabel(String.format("%s-ScaleIONetwork",uniqueId));    network.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.name());    network.setInactive(false);    _dbClient.createObject(network);  } else {    network=results.get(0);  }  return network;}  }
class C{  private static void printVisitNumPagesDetails(VisitNumPagesDetails visitNumPagesDetails){  System.out.println("Goal Type:  VISIT_NUM_PAGES");  System.out.println("VISIT_NUM_PAGES - Comparison Type: " + visitNumPagesDetails.getComparisonType());  System.out.println("VISIT_NUM_PAGES - Comparison Value: " + visitNumPagesDetails.getComparisonValue());}  }
class C{  public Path createSourcepath(){  if (compileSourcepath == null) {    compileSourcepath=new Path(getProject());  }  return compileSourcepath.createPath();}  }
class C{  protected Expression bool(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.Bool(),opPos);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void beginMessage(int type) throws IOException {  byteOutput=new ByteArrayOutputStream();  messageOutput=new DataOutputStream(byteOutput);  messageOutput.write(type);  messageOutput.writeInt(0);}  }
class C{  public List asList(){  return Collections.unmodifiableList(fContent);}  }
class C{  public void receiveImageSharingInvitation(ImageTransferSession session){  if (sLogger.isActivated()) {    sLogger.info("Receive image sharing invitation from " + session.getRemoteContact() + " displayName="+ session.getRemoteDisplayName());  }  String sharingId=session.getSessionID();  ImageSharingPersistedStorageAccessor persistedStorage=new ImageSharingPersistedStorageAccessor(sharingId,mRichCallLog);  ImageSharingImpl imageSharing=new ImageSharingImpl(sharingId,mRichcallService,mBroadcaster,persistedStorage,this);  addImageSharing(imageSharing,sharingId);  session.addListener(imageSharing);}  }
class C{  List<Product> replaceByCustomerSpecificProducts(List<Product> products,long supplierKey,Organization organization){  List<Product> customerProducts=getProductDao().getProductForCustomerOnly(supplierKey,organization);  Map<Long,Product> keyToProduct=new HashMap<>();  for (  Product prod : customerProducts) {    keyToProduct.put(Long.valueOf(prod.getTemplate().getKey()),prod);  }  List<Product> temp=new ArrayList<>(products.size());  for (  Product prod : products) {    Long key=Long.valueOf(prod.getKey());    if (keyToProduct.containsKey(key)) {      Product custSpec=keyToProduct.get(key);      if (custSpec.getStatus() == ServiceStatus.ACTIVE) {        temp.add(custSpec);      }    } else     if (prod.getStatus() == ServiceStatus.ACTIVE) {      temp.add(prod);    }  }  return temp;}  }
class C{  public ObjectParser(final Class<?> type,final String[] packages,final String[] factoryMethod){  this(NO_CONTEXT,type,packages,factoryMethod);}  }
class C{  public static final boolean isSmeManualAcknowledgment(byte esmClass){  return isMessageType(esmClass,SMPPConstant.ESMCLS_SME_MANUAL_ACK);}  }
class C{  public void monitorPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"monitorPolicy started.");  }  String payload=Preference.getString(context,Constants.PreferenceFlag.APPLIED_POLICY);  PolicyOperationsMapper operationsMapper=new PolicyOperationsMapper();  ObjectMapper mapper=new ObjectMapper();  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);  mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);  PolicyComplianceChecker policyChecker=new PolicyComplianceChecker(context);  ArrayList<ComplianceFeature> result=new ArrayList<>();  try {    if (payload != null) {      List<org.wso2.emm.agent.beans.Operation> operations=mapper.readValue(payload,mapper.getTypeFactory().constructCollectionType(List.class,org.wso2.emm.agent.beans.Operation.class));      for (      org.wso2.emm.agent.beans.Operation op : operations) {        op=operationsMapper.getOperation(op);        result.add(policyChecker.checkPolicyState(op));      }      operation.setStatus(resources.getString(R.string.operation_value_completed));      operation.setPayLoad(mapper.writeValueAsString(result));      resultBuilder.build(operation);    }  } catch (  IOException e) {    operation.setStatus(resources.getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing policy monitor payload stream.");    resultBuilder.build(operation);    throw new AndroidAgentException("Error occurred while parsing stream.",e);  }  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"monitorPolicy completed.");  }}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Order_ID"))     p_C_Order_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Invoice_ID"))     p_C_Invoice_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public TagDispatcherBuilder enableNdefCheck(boolean enableNdefCheck){  this.enableNdefCheck=enableNdefCheck;  return this;}  }
class C{  public static int[] copyFrom(int[] array){  return copyFrom(array,array.length);}  }
class C{  public FeatureExtractor processQuery(Tree<String> tree,Map<String,FeatureExtractor> cf) throws EdisonException {  String uniqueLabel=uniquify(tree);  if (cf.containsKey(uniqueLabel))   return cf.get(uniqueLabel);  if (tree.getNumberOfChildren() != 3) {    throw new EdisonException("Invalid query. Expecting (if <query> <if-true> <if-false>).\n" + tree);  }  Tree<String> condition=tree.getChild(0);  Predicate<Constituent> predicate;  if (condition.getLabel().equals("exists")) {    predicate=processExists(condition);  } else {    throw new EdisonException("Unknown query '" + condition.getLabel() + "'");  }  FeatureExtractor ifTrue=createFex(tree.getChild(1),cf);  FeatureExtractor ifFalse=createFex(tree.getChild(2),cf);  ConditionalFeatureExtractor fex=new ConditionalFeatureExtractor(predicate,ifTrue,ifFalse);  CachedFeatureCollection cfx=new CachedFeatureCollection("",fex);  cf.put(uniqueLabel,cfx);  return cfx;}  }
class C{  @Override public int compare(final IOperandTreeNode lhs,final IOperandTreeNode rhs){  return lhs.getValue().compareTo(rhs.getValue());}  }
class C{  private boolean anyCharactersAreTheSame(char separator,char quotechar,char escape){  return isSameCharacter(separator,quotechar) || isSameCharacter(separator,escape) || isSameCharacter(quotechar,escape);}  }
class C{  public static <E extends Comparable<E>>void sort(ArrayList<E> list){  E currentMin;  int currentMinIndex;  for (int i=0; i < list.size() - 1; i++) {    currentMin=list.get(i);    currentMinIndex=i;    for (int j=i + 1; j < list.size(); j++) {      if (currentMin.compareTo(list.get(j)) > 0) {        currentMin=list.get(j);        currentMinIndex=j;      }    }    if (currentMinIndex != i) {      list.set(currentMinIndex,list.get(i));      list.set(i,currentMin);    }  }}  }
class C{  public int addNodeInDocOrder(int node,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  return addNodeInDocOrder(node,true,support);}  }
class C{  public void logWarning(String message){  getLog().log(new Status(IStatus.WARNING,PLUGIN_ID,message));}  }
class C{  private static Model createShapesModel(Dataset dataset){  Model model=dataset.getDefaultModel();  Set<Graph> graphs=new HashSet<Graph>();  Graph baseGraph=model.getGraph();  graphs.add(baseGraph);  for (  Statement s : model.listStatements(null,SH.shapesGraph,(RDFNode)null).toList()) {    if (s.getObject().isURIResource()) {      String graphURI=s.getResource().getURI();      Model sm=dataset.getNamedModel(graphURI);      graphs.add(sm.getGraph());    }  }  if (graphs.size() > 1) {    MultiUnion union=new MultiUnion(graphs.iterator());    union.setBaseGraph(baseGraph);    return ModelFactory.createModelForGraph(union);  } else {    return model;  }}  }
class C{  public static String generateNativeGuid(StorageSystem device,String uniqueId,String type){  String typeStr="UNKNOWN";  if (OBJECT_TYPE_SET.contains(type)) {    typeStr=type;  }  return String.format("%s+%s+%s+%s",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),typeStr,uniqueId);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetnextsiblingnull.class,args);}  }
class C{  @Override public void onPause(){  if (mAdView != null) {    mAdView.pause();  }  super.onPause();}  }
class C{  public Anonymous_linkingOp_2_ createAnonymous_linkingOp_2_(){  Anonymous_linkingOp_2_Impl anonymous_linkingOp_2_=new Anonymous_linkingOp_2_Impl();  return anonymous_linkingOp_2_;}  }
class C{  private Node parse(Sentence sent,Integer trace){  if (trace == null)   trace=this._trace;  Node tree=new Node("S");  for (  Token elem : sent) {    tree.append(new Node(elem.getAnnotation("pos"),elem.toString()));  }  for (  int i : x.countTo(this._loop)) {    for (    RegexpChunkParser parser : this._stages) {      tree=parser.parse(tree,trace);    }  }  return tree;}  }
class C{  public static long lArrayGet(long[] a,int i){  try {    return a[i];  } catch (  Throwable t) {    return a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)];  }}  }
class C{  public void swap(){  if (alternateBounds != null) {    mxRectangle old=new mxRectangle(getX(),getY(),getWidth(),getHeight());    x=alternateBounds.getX();    y=alternateBounds.getY();    width=alternateBounds.getWidth();    height=alternateBounds.getHeight();    alternateBounds=old;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.387 -0500",hash_original_method="84525B5DDEB8A0E58F9024DAD2E7A518",hash_generated_method="3B025416C0341984FEB74CA30FB3B7FC") private void init(AccessibilityNodeInfo other){  mSealed=other.mSealed;  mAccessibilityViewId=other.mAccessibilityViewId;  mParentAccessibilityViewId=other.mParentAccessibilityViewId;  mAccessibilityWindowId=other.mAccessibilityWindowId;  mConnectionId=other.mConnectionId;  mBoundsInParent.set(other.mBoundsInParent);  mBoundsInScreen.set(other.mBoundsInScreen);  mPackageName=other.mPackageName;  mClassName=other.mClassName;  mText=other.mText;  mContentDescription=other.mContentDescription;  mActions=other.mActions;  mBooleanProperties=other.mBooleanProperties;  mChildAccessibilityIds=other.mChildAccessibilityIds.clone();}  }
class C{  @Override public Record process(GenericData.Record record,String topic) throws Exception {  MetastoreAuditRecord eventRecord=null;  if (record != null) {    final GenericData.Record auditHeader=(GenericData.Record)record.get("auditHeader");    final String server=ClusterUtil.matchClusterCode(String.valueOf(auditHeader.get("server")));    final String instance=String.valueOf(auditHeader.get("instance"));    final String appName=String.valueOf(auditHeader.get("appName"));    String eventName;    GenericData.Record content;    final Object oldInfo;    final Object newInfo;    if (record.get("metastoreTableAuditContent") != null) {      eventName="MetastoreTableAuditEvent";      content=(GenericData.Record)record.get("metastoreTableAuditContent");      oldInfo=content.get("oldTable");      newInfo=content.get("newTable");    } else     if (record.get("metastorePartitionAuditContent") != null) {      eventName="MetastorePartitionAuditEvent";      content=(GenericData.Record)record.get("metastorePartitionAuditContent");      oldInfo=content.get("oldPartition");      newInfo=content.get("newPartition");    } else {      throw new IllegalArgumentException("Unknown Metastore Audit event: " + record);    }    final String eventType=String.valueOf(content.get("eventType"));    final String metastoreThriftUri=String.valueOf(content.get("metastoreThriftUri"));    final String metastoreVersion=StringUtil.toStringReplaceNull(content.get("metastoreVersion"),null);    final long timestamp=(long)content.get("timestamp");    final String isSuccessful=String.valueOf(content.get("isSuccessful"));    final String isDataDeleted=String.valueOf(content.get("isDataDeleted"));    final GenericData.Record rec=newInfo != null ? (GenericData.Record)newInfo : (GenericData.Record)oldInfo;    final String dbName=String.valueOf(rec.get("dbName"));    final String tableName=String.valueOf(rec.get("tableName"));    final String partition=StringUtil.toStringReplaceNull(rec.get("values"),"?");    final String location=StringUtil.toStringReplaceNull(rec.get("location"),null);    final String owner=StringUtil.toStringReplaceNull(rec.get("owner"),null);    final long createTime=(long)rec.get("createTime");    final long lastAccessTime=(long)rec.get("lastAccessTime");    eventRecord=new MetastoreAuditRecord(server,instance,appName,eventName,eventType,timestamp);    eventRecord.setEventInfo(metastoreThriftUri,metastoreVersion,isSuccessful,isDataDeleted);    eventRecord.setTableInfo(dbName,tableName,partition,location,owner,createTime,lastAccessTime);  }  return eventRecord;}  }
class C{  public CursorWrapper(Cursor cursor){  mCursor=cursor;}  }
class C{  public static <T>List<CloseableReference<T>> cloneOrNull(Collection<CloseableReference<T>> refs){  if (refs == null) {    return null;  }  List<CloseableReference<T>> ret=new ArrayList<>(refs.size());  for (  CloseableReference<T> ref : refs) {    ret.add(CloseableReference.cloneOrNull(ref));  }  return ret;}  }
class C{  public String rotateKey(){  return rotateKey(false);}  }
class C{  @Inject QuartzSchedulingService(AlertService alertService,GlobalInterlockService globalInterlockService,UserService userService,ServiceManagementService serviceManagementRecordService,AuditService auditService,SystemConfiguration config){  super(config);  requireArgument(alertService != null,"Alert service cannot be null.");  requireArgument(globalInterlockService != null,"Global interlock service cannot be null.");  requireArgument(userService != null,"User service cannot be null.");  requireArgument(serviceManagementRecordService != null,"Service management record service cannot be null.");  requireArgument(auditService != null,"Audit service cannot be null.");  requireArgument(config != null,"System configuration cannot be null.");  _alertService=alertService;  _globalInterlockService=globalInterlockService;  _userService=userService;  _serviceManagementRecordService=serviceManagementRecordService;  _auditService=auditService;  _configuration=config;}  }
class C{  private int read() throws IOException {  if (_peekOffset < _peekLength)   return _peek[_peekOffset++] & 0xff; else   return _is.read();}  }
class C{  public String toStringX(Properties ctx){  String in=Msg.getMsg(ctx,"Include");  String ex=Msg.getMsg(ctx,"Exclude");  StringBuffer sb=new StringBuffer();  sb.append(Msg.translate(ctx,"AD_Table_ID")).append("=").append(getTableName(ctx)).append(", ").append(Msg.translate(ctx,"AD_Column_ID")).append("=").append(getColumnName(ctx)).append(" (").append(Msg.translate(ctx,"IsReadOnly")).append("=").append(isReadOnly()).append(") - ").append(isExclude() ? ex : in);  return sb.toString();}  }
class C{  private long computeAge(long nowMillis){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,TimeUnit.SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testmodInversePos1(){  byte aBytes[]={24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte mBytes[]={122,45,36,100,122,45};  int aSign=1;  int mSign=1;  byte rBytes[]={47,3,96,62,87,19};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modInverse(modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void rejectDrag(){  getDropTargetContext().rejectDrag();}  }
class C{  @Override public int hashCode(){  return Arrays.hashCode(ipaddress);}  }
class C{  private static int atLeast(Automaton.Builder builder,String x,int n,Collection<Integer> initials,boolean zeros){  int s=builder.createState();  if (x.length() == n) {    builder.setAccept(s,true);  } else {    if (zeros) {      initials.add(s);    }    char c=x.charAt(n);    builder.addTransition(s,atLeast(builder,x,n + 1,initials,zeros && c == '0'),c);    if (c < '9') {      builder.addTransition(s,anyOfRightLength(builder,x,n + 1),(char)(c + 1),'9');    }  }  return s;}  }
class C{  @Override public void addPages(){  newFileCreationPage=new EipModelWizardNewFileCreationPage("Whatever",selection);  newFileCreationPage.setTitle(EipEditorPlugin.INSTANCE.getString("_UI_EipModelWizard_label"));  newFileCreationPage.setDescription(EipEditorPlugin.INSTANCE.getString("_UI_EipModelWizard_description"));  newFileCreationPage.setFileName(EipEditorPlugin.INSTANCE.getString("_UI_EipEditorFilenameDefaultBase") + "." + FILE_EXTENSIONS.get(0));  addPage(newFileCreationPage);  if (selection != null && !selection.isEmpty()) {    Object selectedElement=selection.iterator().next();    if (selectedElement instanceof IResource) {      IResource selectedResource=(IResource)selectedElement;      if (selectedResource.getType() == IResource.FILE) {        selectedResource=selectedResource.getParent();      }      if (selectedResource instanceof IFolder || selectedResource instanceof IProject) {        newFileCreationPage.setContainerFullPath(selectedResource.getFullPath());        String defaultModelBaseFilename=EipEditorPlugin.INSTANCE.getString("_UI_EipEditorFilenameDefaultBase");        String defaultModelFilenameExtension=FILE_EXTENSIONS.get(0);        String modelFilename=defaultModelBaseFilename + "." + defaultModelFilenameExtension;        for (int i=1; ((IContainer)selectedResource).findMember(modelFilename) != null; ++i) {          modelFilename=defaultModelBaseFilename + i + "."+ defaultModelFilenameExtension;        }        newFileCreationPage.setFileName(modelFilename);      }    }  }  initialObjectCreationPage=new EipModelWizardInitialObjectCreationPage("Whatever2");  initialObjectCreationPage.setTitle(EipEditorPlugin.INSTANCE.getString("_UI_EipModelWizard_label"));  initialObjectCreationPage.setDescription(EipEditorPlugin.INSTANCE.getString("_UI_Wizard_initial_object_description"));  addPage(initialObjectCreationPage);}  }
class C{  public int length(){  return mText.length - mGapLength;}  }
class C{  public void insertBeforeInCodeOrder(BasicBlock old,BasicBlock toAdd){  if (IR.SANITY_CHECK)   VM._assert(toAdd.next == null);  if (IR.SANITY_CHECK)   VM._assert(toAdd.prev == null);  SpaceEffGraphNode oldPrev=old.prev;  if (oldPrev == null) {    if (IR.SANITY_CHECK)     VM._assert(_firstNode == old);    _firstNode=toAdd;    toAdd.append(old);  } else {    oldPrev.append(toAdd);    toAdd.append(old);  }}  }
class C{  public void deleteMap(String mapName){  maps.remove(mapName);}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  @Override public void close(){  channel.close();}  }
class C{  public static boolean currIsCanceled(){  if (Thread.currentThread() instanceof CancelableThread)   return ((CancelableThread)Thread.currentThread()).isCanceled;  return false;}  }
class C{  public static long decryptCFB(final byte[] concatenatedHashValue,final String base64EncryptedTurnOverValue,final SecretKey symmetricKey) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);  byteBufferIV.put(concatenatedHashValue);  final byte[] IV=byteBufferIV.array();  final byte[] encryptedTurnOverValue=CashBoxUtils.base64Decode(base64EncryptedTurnOverValue,false);  final IvParameterSpec ivSpec=new IvParameterSpec(IV);  final Cipher cipher=Cipher.getInstance("AES/CFB/NoPadding","BC");  cipher.init(Cipher.DECRYPT_MODE,symmetricKey,ivSpec);  final byte[] testPlainTurnOverValueComplete=cipher.doFinal(encryptedTurnOverValue);  return getLong(testPlainTurnOverValueComplete);}  }
class C{  public void testGetAudit(){  System.out.println("getAudit");  Audit audit=createMock(Audit.class);  Audit auditReturnedByAuditCommand=createMock(Audit.class);  AuditCommand mockAuditCommand=createMock(AuditCommand.class);  expect(mockAuditCommand.getAudit()).andReturn(auditReturnedByAuditCommand);  replay(mockAuditCommand);  AuditServiceThreadImpl instance=initialiseAuditServiceThread(audit);  assertEquals(audit,instance.getAudit());  instance=initialiseAuditServiceThread(mockAuditCommand);  assertEquals(auditReturnedByAuditCommand,instance.getAudit());}  }
class C{  private boolean isColouredRisk(CnATreeElement asset,CnATreeElement scenario,int riskColour,char riskType){  RiskAnalysisServiceImpl raService=new RiskAnalysisServiceImpl();  int yellowNum=0;switch (riskType) {case 'c':    yellowNum=numOfYellowFields[0];  break;case 'i':yellowNum=numOfYellowFields[1];break;case 'a':yellowNum=numOfYellowFields[2];break;default :break;}if (raService.getRiskColor(asset,scenario,riskType,yellowNum,scenarioProbType) == riskColour) {return true;}return false;}  }
class C{  private int deleteTable(String tableName){  String sql="DELETE  FROM  " + tableName + " WHERE AD_Language=?";  int no=DB.executeUpdateEx(sql,new Object[]{getAD_Language()},get_TrxName());  log.fine(tableName + " #" + no);  return no;}  }
class C{  protected void addBeanConnectionRelation(MetaBean meta,String connection){  Vector<String> relations;  Object key;  relations=getBeanConnectionRelation(meta);  relations.add(connection);  if (meta == null) {    key=REGULAR_CONNECTION;  } else {    key=meta;  }  m_BeanConnectionRelation.put(key,relations);}  }
class C{  public void beforeInsert(int index,long element){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.write(client_version);  out.write(random);  out.writeUint8(session_id.length);  out.write(session_id);  int size=cipher_suites.length << 1;  out.writeUint16(size);  for (int i=0; i < cipher_suites.length; i++) {    out.write(cipher_suites[i].toBytes());  }  out.writeUint8(compression_methods.length);  for (int i=0; i < compression_methods.length; i++) {    out.write(compression_methods[i]);  }}  }
class C{  public static Schema addAttributeToSchema(Schema schema,Attribute attribute){  if (schema.containsField(attribute.getFieldName())) {    return schema;  }  List<Attribute> attributes=new ArrayList<>(schema.getAttributes());  attributes.add(attribute);  Schema newSchema=new Schema(attributes.toArray(new Attribute[attributes.size()]));  return newSchema;}  }
class C{  public static long binarySearch(char[] selector,MethodBinding[] sortedMethods){  if (sortedMethods == null)   return -1;  int max=sortedMethods.length;  if (max == 0)   return -1;  int left=0, right=max - 1, selectorLength=selector.length;  int mid=0;  char[] midSelector;  while (left <= right) {    mid=left + (right - left) / 2;    int compare=compare(selector,midSelector=sortedMethods[mid].selector,selectorLength,midSelector.length);    if (compare < 0) {      right=mid - 1;    } else     if (compare > 0) {      left=mid + 1;    } else {      int start=mid, end=mid;      while (start > left && CharOperation.equals(sortedMethods[start - 1].selector,selector)) {        start--;      }      while (end < right && CharOperation.equals(sortedMethods[end + 1].selector,selector)) {        end++;      }      return start + ((long)end << 32);    }  }  return -1;}  }
class C{  @Override public void onCreate(final Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  private ScanContext grab() throws ExecutionException, InterruptedException {  Future<ScanContext> ret=exec.take();  ScanRequest originalRequest=ret.get().getScanRequest();  int segment=originalRequest.getSegment();  ScanSegmentWorker sw=workers[segment];  if (sw.hasNext()) {    currentFutures[segment]=exec.submit(sw);  } else {    finishSegment(segment);    currentFutures[segment]=null;  }  return ret.get();}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public List<AuditLog> loadAuditLogs(List<String> operationIds,long startTime,long endTime){  TypedQuery<AuditLog> query;  if (operationIds == null || operationIds.isEmpty()) {    query=em.createNamedQuery("AuditLog.findByDateRange",AuditLog.class);  } else {    query=em.createNamedQuery("AuditLog.findByOperationAndDateRange",AuditLog.class);    query.setParameter("operationIds",operationIds);  }  query.setParameter("startTime",Long.valueOf(startTime));  query.setParameter("endTime",Long.valueOf(endTime));  return query.getResultList();}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.ls.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  private Set unionIP(Set excluded,byte[] ip){  if (excluded.isEmpty()) {    if (ip == null) {      return excluded;    }    excluded.add(ip);    return excluded;  } else {    Set union=new HashSet();    Iterator it=excluded.iterator();    while (it.hasNext()) {      byte[] _excluded=(byte[])it.next();      union.addAll(unionIPRange(_excluded,ip));    }    return union;  }}  }
class C{  public Panel(){  initComponents();}  }
class C{  private VirtualNAS findvNasByNativeId(StorageSystem system,String nativeId){  URIQueryResultList results=new URIQueryResultList();  VirtualNAS vNas=null;  String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nativeId,NativeGUIDGenerator.VIRTUAL_NAS);  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVirtualNASByNativeGuidConstraint(nasNativeGuid),results);  Iterator<URI> iter=results.iterator();  while (iter.hasNext()) {    VirtualNAS tmpVnas=_dbClient.queryObject(VirtualNAS.class,iter.next());    if (tmpVnas != null && !tmpVnas.getInactive()) {      vNas=tmpVnas;      _logger.info("found virtual NAS {}",tmpVnas.getNativeGuid() + ":" + tmpVnas.getNasName());      break;    }  }  return vNas;}  }
class C{  private MapChangeListener<Integer,Track> musicottTracksChangeListener(){  return null;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public int read(byte bytes[]) throws IOException {  return read(bytes,0,bytes.length);}  }
class C{  private void insert(Map<String,String> abbrevToItem,String item,String abbrev){  abbrev=expand(item,abbrev);  if (!abbrevToItem.containsKey(abbrev)) {    abbrevToItem.put(abbrev,item);  } else {    String other=abbrevToItem.get(abbrev);    if (!item.equals(other)) {      if (!abbrev.equals(other)) {        abbrevToItem.put(abbrev,null);        if (other != null) {          insert(abbrevToItem,other,abbrev);        }      }      if (other == null && item.equals(abbrev)) {        abbrevToItem.put(abbrev,item);      } else {        insert(abbrevToItem,item,abbrev);      }    }  }}  }
class C{  private TaskResourceRep performProtectionAction(URI id,Copy copy,String op) throws InternalException {  ArgValidator.checkFieldUriType(copy.getCopyID(),Volume.class,"copyID");  Volume volume=queryVolumeResource(id);  Volume copyVolume=queryVolumeResource(copy.getCopyID());  ArgValidator.checkEntity(volume,id,true);  ArgValidator.checkEntity(copyVolume,copy.getCopyID(),true);  if (op.equalsIgnoreCase(ProtectionOp.SWAP.getRestOp()) && !NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {    ExportUtils.validateConsistencyGroupBookmarksExported(_dbClient,volume.getConsistencyGroup());  }  if (op.equalsIgnoreCase(ProtectionOp.CHANGE_ACCESS_MODE.getRestOp()) && !Copy.ImageAccessMode.DIRECT_ACCESS.name().equalsIgnoreCase(copy.getAccessMode())) {    throw APIException.badRequests.unsupportedAccessMode(copy.getAccessMode());  }  if (isNullURI(volume.getProtectionController())) {    throw new ServiceCodeException(ServiceCode.IO_ERROR,"Attempt to do protection link management on unprotected volume: {0}",new Object[]{volume.getWWN()});  }  checkForPendingTasks(Arrays.asList(volume.getTenant().getURI()),Arrays.asList(volume));  String task=UUID.randomUUID().toString();  Operation status=new Operation();  status.setResourceType(ProtectionOp.getResourceOperationTypeEnum(op));  _dbClient.createTaskOpStatus(Volume.class,volume.getId(),task,status);  _log.info(String.format("Protection %s --- VolumeId id: %s on Protection Appliance: %s",task,id,volume.getProtectionController()));  ProtectionSystem system=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());  String deviceType=system.getSystemType();  if (!deviceType.equals(DiscoveredDataObject.Type.rp.name())) {    throw APIException.badRequests.protectionForRpClusters();  }  RPController controller=getController(RPController.class,system.getSystemType());  controller.performProtectionOperation(system.getId(),id,copy.getCopyID(),copy.getPointInTime(),copy.getAccessMode(),op,task);  return toTask(volume,task,status);}  }
class C{  protected void restoreState(){  likelihoodKnown=storedLikelihoodKnown;  logLikelihood=storedLogLikelihood;  treeLength=storedTreeLength;}  }
class C{  public Iterable<VarInfo<NAME,BINDING>> vars(){  return Collections.unmodifiableMap(vars).values();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.STRING_LITERAL__VALUE:    setValue((String)newValue);  return;case N4JSPackage.STRING_LITERAL__RAW_VALUE:setRawValue((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void write(OutputStream out,Drawing drawing,java.util.List<Figure> figures) throws IOException {  document=new XMLElement("svg",SVG_NAMESPACE);  document.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink");  document.setAttribute("version","1.2");  document.setAttribute("baseProfile","tiny");  writeViewportAttributes(document,drawing.getAttributes());  initStorageContext(document);  defs=new XMLElement("defs");  document.addChild(defs);  for (  Figure f : figures) {    writeElement(document,f);  }  PrintWriter writer=new PrintWriter(new OutputStreamWriter(out,"UTF-8"));  writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  XMLWriter xmlWriter=new XMLWriter(writer);  xmlWriter.write(document,isPrettyPrint);  writer.flush();  document.dispose();}  }
class C{  @Override protected void finalize() throws Throwable {  super.finalize();  styledAttributes.recycle();}  }
class C{  public static CategoryLabelPositions createUpRotationLabelPositions(double angle){  return new CategoryLabelPositions(new CategoryLabelPosition(RectangleAnchor.BOTTOM,TextBlockAnchor.BOTTOM_LEFT,TextAnchor.BOTTOM_LEFT,-angle,CategoryLabelWidthType.RANGE,0.50f),new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.TOP_RIGHT,TextAnchor.TOP_RIGHT,-angle,CategoryLabelWidthType.RANGE,0.50f),new CategoryLabelPosition(RectangleAnchor.RIGHT,TextBlockAnchor.BOTTOM_RIGHT,TextAnchor.BOTTOM_RIGHT,-angle,CategoryLabelWidthType.RANGE,0.50f),new CategoryLabelPosition(RectangleAnchor.LEFT,TextBlockAnchor.TOP_LEFT,TextAnchor.TOP_LEFT,-angle,CategoryLabelWidthType.RANGE,0.50f));}  }
class C{  public void decrementTargetsCountAll(){  final long decrementAndGet=targetsCountAll.decrementAndGet();  if (decrementAndGet < 0) {    targetsCountAll.set(0);  }}  }
class C{  @Nullable public SearchShardTarget shard(){  return this.shardTarget;}  }
class C{  private void sendPluginNotReadyToWork(String eventName,CallbackContext callback){  PluginResult pluginResult=PluginResultHelper.createPluginResult(eventName,null,ChcpError.ASSETS_FOLDER_IN_NOT_YET_INSTALLED);  callback.sendPluginResult(pluginResult);}  }
class C{  public void print(CtMethod method){  stream.println("\n" + getMethodString(method));  MethodInfo info=method.getMethodInfo2();  ConstPool pool=info.getConstPool();  CodeAttribute code=info.getCodeAttribute();  if (code == null)   return;  Frame[] frames;  try {    frames=(new Analyzer()).analyze(method.getDeclaringClass(),info);  } catch (  BadBytecode e) {    throw new RuntimeException(e);  }  int spacing=String.valueOf(code.getCodeLength()).length();  CodeIterator iterator=code.iterator();  while (iterator.hasNext()) {    int pos;    try {      pos=iterator.next();    } catch (    BadBytecode e) {      throw new RuntimeException(e);    }    stream.println(pos + ": " + InstructionPrinter.instructionString(iterator,pos,pool));    addSpacing(spacing + 3);    Frame frame=frames[pos];    if (frame == null) {      stream.println("--DEAD CODE--");      continue;    }    printStack(frame);    addSpacing(spacing + 3);    printLocals(frame);  }}  }
class C{  @Override public Generator<ILineSegment> construct(String[] args){  return new GridGenerator(Double.valueOf(args[0]),Double.valueOf(args[1]));}  }
class C{  public void buildReport(String organizationId,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  List<ReportResultData> reportData=eventDao.retrieveProviderEventReportData(organizationId);  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  converter.convertToXml(reportData,result.getData(),Collections.<String,String>emptyMap());}  }
class C{  public synchronized float recoveredBytesPercent(){  long total=0;  long recovered=0;  for (  File file : fileDetails.values()) {    if (file.reused() == false) {      total+=file.length();      recovered+=file.recovered();    }  }  if (total == 0 && fileDetails.size() == 0) {    return 0.0f;  }  if (total == recovered) {    return 100.0f;  } else {    return 100.0f * recovered / total;  }}  }
class C{  public void sendNceMessage(NceMessage m,NceListener reply){  try {    NceMessageCheck.checkMessage(getAdapterMemo(),m);  } catch (  JmriException e) {    log.error(e.getMessage());    new Exception().printStackTrace();    return;  }  sendMessage(m,reply);}  }
class C{  @Override public void run(){synchronized (mEventToPost) {    if (!isUpdateAvailable)     isUpdateAvailable=isUpdateAvailable();  }  if (isUpdateAvailable) {    EventBus.getDefault().postSticky(mEventToPost);  }}  }
class C{  public void logging(String msg1,String msg2,String msg3){  System.out.print(msg1);  System.out.print(" ");  System.out.print(msg2);  System.out.print(" ");  System.out.println(msg3);}  }
class C{  public BinaryHttpResponseHandler(){  super();}  }
class C{  public static void main(String[] args){  TestEmptyClass tester=new TestEmptyClass();  int exitCode=run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();  if (exitCode != 0) {    throw new Error("Error found while executing Javadoc");  }}  }
class C{  public void notest_stress_alloc_performance(){  final Properties properties=new Properties(getProperties());  properties.setProperty(RWStore.Options.ALLOCATION_SIZES,"1,2,3,4,5,6,7,8");  final Journal store=(Journal)getStore(properties);  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    System.out.println("File: " + rw.getStoreFile().getAbsolutePath());    final ArrayList<Integer> addrs=new ArrayList<Integer>();    final Random r=new Random();    for (int i=0; i < 2048 * 64; i++) {      addrs.add(rw.alloc(1 + r.nextInt(500),null));    }    final long s1=System.nanoTime();    for (int t=0; t < 1024 * 1024; t++) {      final int i=r.nextInt(addrs.size());    }    final long s2=System.nanoTime();    System.out.println("Random iter: " + (s2 - s1) + "ns");    System.out.println("File size: " + rw.getStoreFile().length());    for (int run=0; run < 20; run++) {      for (int i=0; i < 2048 * 64; i++) {        addrs.add(rw.alloc(1 + r.nextInt(500),null));      }      final long s3=System.nanoTime();      for (int t=0; t < 1024 * 1024; t++) {        final int i=r.nextInt(addrs.size());        rw.free(addrs.get(i),1);        addrs.set(i,rw.alloc(1 + r.nextInt(500),null));      }      final long s4=System.nanoTime();      System.out.println("Test1 Alloc: " + (s4 - s3) + "ns");      System.out.println("File size: " + rw.getStoreFile().length());    }  }  finally {    store.destroy();  }}  }
class C{  public static Date parseDate(String dateStr){  String formatString="";  if (dateStr.length() == 16)   dateStr=dateStr.substring(0,14);  if (dateStr.length() == 15)   formatString="yyyyMMdd'T'hhmmss";  if (dateStr.length() == 8)   formatString="yyyyMMdd";  SimpleDateFormat formatter=new SimpleDateFormat(formatString);  ParsePosition pos=new ParsePosition(0);  return formatter.parse(dateStr,pos);}  }
class C{  private static void dumpArgs(StringBuffer buffer,String[] args){  assert (buffer != null) : "buffer must be non-null";  assert (args != null) : "args must be non-null";  buffer.append("args: [");  for (int i=0, e=args.length; i < e; i++) {    if (i != 0) {      buffer.append(' ');    }    buffer.append(args[i]);  }  buffer.append("]");}  }
class C{  private static <T>SortedSet<T> cast(Iterable<T> iterable){  return (SortedSet<T>)iterable;}  }
class C{  public void toDirectionVector(double degrees,double latitude,double longitude,double ecefVector[]){  double radians=Math.toRadians(degrees) - 360;  double east=Math.sin(radians);  double north=Math.cos(radians);  double lat_=Math.toRadians(latitude);  double lon_=Math.toRadians(longitude);  double up=0.0;  double enuVector[]={east,north,up};  this.enu2ecef(ecefVector,lat_,lon_,enuVector);}  }
class C{  public static final double gammaln(double x){  double ser=1.00000000090015;  double y=x;  double tmp=x + 5.5;  tmp-=(x + 0.5) * Math.log(tmp);  for (int j=0; j < 5; j++) {    ser+=COFGAMMALN[j] / ++y;  }  return -tmp + Math.log(ser * 2.5066282751072975 / x);}  }
class C{  public boolean isSameAs(UnconditionalValueDerefSet otherFact){  return valueNumbersUnconditionallyDereferenced.equals(otherFact.valueNumbersUnconditionallyDereferenced) && derefLocationSetMap.equals(otherFact.derefLocationSetMap);}  }
class C{  public int size(){  return csvFiles.size();}  }
class C{  protected int defaultNumAttributes(){  return 10;}  }
class C{  public MarshalOutputStream(OutputStream out) throws IOException {  this(out,ObjectStreamConstants.PROTOCOL_VERSION_1);}  }
class C{  private boolean processCompletionStageReplicationProposal(Operation op){  if (!hasOption(ServiceOption.REPLICATION)) {    return false;  }  if (op.getAction() == Action.GET || op.isReplicationDisabled() || op.isFromReplication()) {    return false;  }  if (hasOption(ServiceOption.OWNER_SELECTION) && !hasOption(ServiceOption.DOCUMENT_OWNER)) {    return false;  }  if (op.getAction() == Action.DELETE && !op.hasBody()) {    ServiceDocument body=op.getLinkedState();    op.setBodyNoCloning(body);  }  if (!op.hasBody()) {    return false;  }  op.nestCompletion(null);  getHost().replicateRequest(this.context.options,op.getLinkedState(),getPeerNodeSelectorPath(),getSelfLink(),op);  return true;}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setRecursive(true);  setCheckThatUnedited(false);  setForceEvenIfEdited(true);  setTemporaryWatch(null);}  }
class C{  private boolean verifyTargetStoragePoolAvailability(Volume volume,VirtualPool vpool){  if (volume.checkPersonality(Volume.PersonalityTypes.METADATA.name())) {    VirtualPool journalVpool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    if (verifyStoragePoolAvailability(journalVpool,volume)) {      return true;    }  } else {    if (vpool.getProtectionVarraySettings() != null && !vpool.getProtectionVarraySettings().isEmpty()) {      String settingsURI=vpool.getProtectionVarraySettings().get(volume.getVirtualArray().toString());      VpoolProtectionVarraySettings settings=dbClient.queryObject(VpoolProtectionVarraySettings.class,URI.create(settingsURI));      URI protectionVpoolId=vpool.getId();      if (settings.getVirtualPool() != null) {        protectionVpoolId=settings.getVirtualPool();      }      VirtualPool protectionVpool=dbClient.queryObject(VirtualPool.class,protectionVpoolId);      if (verifyStoragePoolAvailability(protectionVpool,volume)) {        return true;      }    }  }  return false;}  }
class C{  public void destroyBody(Body body){  JointEdge jointEdge=body.body.getJointList();  while (jointEdge != null) {    JointEdge next=jointEdge.next;    world.destroyJoint(jointEdge.joint);    joints.remove(jointEdge.joint);    jointEdge=next;  }  world.destroyBody(body.body);  bodies.remove(body.body);  for (  Fixture fixture : body.fixtures) {    fixtures.remove(fixture.fixture);  }}  }
class C{  public void textElement(String elName,boolean value) throws IOException {  textElement(elName,String.valueOf(value));}  }
class C{  public boolean isUnused(){  return (numEntries < 1) && waitingThreads.isEmpty();}  }
class C{  public void init() throws ServletException {}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    sage.plugin.PluginWrapper.Dependency[] depends=pluggy.getDependencies();    java.util.ArrayList rv=new java.util.ArrayList();    for (int i=0; i < depends.length; i++) {      if ((depends[i].minVersion == null || depends[i].minVersion.length() == 0) && (depends[i].maxVersion == null || depends[i].maxVersion.length() == 0))       rv.add(depends[i].type + ": " + depends[i].id); else       rv.add(depends[i].type + ": " + depends[i].id+ " "+ depends[i].minVersion+ ((depends[i].maxVersion == null || depends[i].maxVersion.length() == 0) ? "+" : ("-" + depends[i].maxVersion)));    }    if (pluggy.isDesktopOnly())     rv.add(Sage.rez("DesktopOnly"));    if (!pluggy.isLinuxOK() || !pluggy.isMacOK() || !pluggy.isWinOK()) {      String osStr="";      if (pluggy.isWinOK())       osStr+="Windows";      if (pluggy.isLinuxOK()) {        if (osStr.length() > 0)         osStr+=", ";        osStr+="Linux";      }      if (pluggy.isMacOK()) {        if (osStr.length() > 0)         osStr+=", ";        osStr+="Macintosh";      }      osStr=Sage.rez("OS") + ": " + osStr;      rv.add(osStr);    }    return (String[])rv.toArray(Pooler.EMPTY_STRING_ARRAY);  }  return Pooler.EMPTY_STRING_ARRAY;}  }
class C{  public void onPlaceChange(Place newPlace){  if (LOG.isLoggable(Level.FINE))   LOG.fine(name + " - on place change: " + newPlace);  AppActivity nextActivity=getNextActivity(newPlace);  if (LOG.isLoggable(Level.FINE))   LOG.fine(name + " - next activity is: " + nextActivity);  if (nextActivity == null) {    nextActivity=NULL_ACTIVITY;  }  if (currentActivity.equals(nextActivity)) {    if (LOG.isLoggable(Level.FINE))     LOG.fine(name + " - activity unchanged");    return;  } else {    if (LOG.isLoggable(Level.FINE))     LOG.fine(name + " - activity changed, transitioning");  }  if (startingNext) {    tryStopOrCancel(false);    currentActivity=NULL_ACTIVITY;    startingNext=false;  } else   if (!currentActivity.equals(NULL_ACTIVITY)) {    showWidget(null);    if (LOG.isLoggable(Level.FINE))     LOG.fine(name + " - removing current activity registrations: " + activityRegistrations);    eventBus.removeAll(activityRegistrations);    activityRegistrations.clear();    tryStopOrCancel(true);  }  currentActivity=nextActivity;  if (currentActivity.equals(NULL_ACTIVITY)) {    Label nullLabel=new Label("No activity available for given place.");    nullLabel.getElement().getStyle().setColor("red");    nullLabel.getElement().getStyle().setFontWeight(Style.FontWeight.BOLD);    showWidget(nullLabel);  } else {    startingNext=true;    tryStart();  }}  }
class C{  static LinearLayout myCardSet(Context top,String header,View v,TextView title){  LinearLayout ll=new LinearLayout(top);  ll.setOrientation(LinearLayout.VERTICAL);  if (title == null)   title=new TextView(top);  title.setTextSize(10.0f);  title.setText(header);  ll.addView(title);  ll.addView(v);  return ll;}  }
class C{  @Transient public double distanceTo(Point point){  return GeolocHelper.distance(this.location,point);}  }
class C{  @NotNull public PsiQuery childrenCall(@NotNull final FQNamesProvider name){  final List<PsiElement> result=new ArrayList<PsiElement>();  for (  final PsiElement element : myPsiElements) {    for (    final PyCallExpression call : PsiTreeUtil.findChildrenOfType(element,PyCallExpression.class)) {      if (call.isCallee(name)) {        result.add(call);      }    }  }  return new PsiQuery(result.toArray(new PsiElement[result.size()]));}  }
class C{  public void addMeta(List<T> metas){  if (metas != null) {    if (mMeta == null) {      mMeta=new ArrayList<>();    }    mMeta.addAll(metas);  }}  }
class C{  public boolean insert(int val){  Integer v=val;  if (list.contains(v)) {    return false;  }  list.add(v);  return true;}  }
class C{  protected void verifyFileContents(ParcelFileDescriptor pfd,File file) throws IOException {  byte[] actual=new byte[FILE_BLOCK_READ_SIZE];  byte[] expected=new byte[FILE_BLOCK_READ_SIZE];  AutoCloseInputStream input=new ParcelFileDescriptor.AutoCloseInputStream(pfd);  assertEquals(file.length(),pfd.getStatSize());  DataInputStream inFile=new DataInputStream(new FileInputStream(file));  int actualRead=0;  int expectedRead=0;  while (((actualRead=input.read(actual)) != -1) && ((expectedRead=inFile.read(expected)) != -1)) {    assertEquals(actualRead,expectedRead);    compareByteArrays(actual,expected);  }}  }
class C{  public ZyGraphHierarchicalSettings(final GraphSettingsConfigItem type){  m_type=Preconditions.checkNotNull(type,"IE02018: Type argument can't be null");}  }
class C{  public void promoteVerifiedReplacement(){  List<KBucketEntry> entriesRef=entries;  KBucketEntry toRemove=entriesRef.stream().filter(null).findAny().orElse(null);  if (toRemove == null && entriesRef.size() >= DHTConstants.MAX_ENTRIES_PER_BUCKET)   return;  KBucketEntry replacement=pollVerifiedReplacementEntry();  if (replacement != null)   modifyMainBucket(toRemove,replacement);}  }
class C{  @Override public Boolean exists(final byte[] key){  checkIsInMultiOrPipeline();  client.exists(key);  return client.getIntegerReply() == 1;}  }
class C{  private final boolean drawElevationLine(Coords src,int direction){  final IHex srcHex=game.getBoard().getHex(src);  final IHex destHex=game.getBoard().getHexInDir(src,direction);  if ((destHex == null) && (srcHex.getLevel() != 0)) {    return true;  } else   if (destHex == null) {    return false;  } else   if (srcHex.getLevel() != destHex.getLevel()) {    return true;  } else {    return (srcHex.floor() != destHex.floor());  }}  }
class C{  private void commonInit(MUser from,String to,String subject,String message,File attachment){  m_client=MClient.get(Env.getCtx());  try {    int WindowNo=0;    int AD_Column_ID=0;    Lookup lookup=MLookupFactory.get(Env.getCtx(),WindowNo,AD_Column_ID,DisplayType.Search,Env.getLanguage(Env.getCtx()),"AD_User_ID",0,false,"EMail IS NOT NULL");    fUser=new VLookup("AD_User_ID",false,false,true,lookup);    fUser.addVetoableChangeListener(this);    fCcUser=new VLookup("AD_User_ID",false,false,true,lookup);    fCcUser.addVetoableChangeListener(this);    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"EMailDialog",ex);  }  set(from,to,subject,message);  setAttachment(attachment);  AEnv.showCenterScreen(this);}  }
class C{  @SuppressWarnings("unchecked") static void checkDhtTopology(GridDhtCache<Integer,String> dht,int idx,IgniteLogger log){  assert dht != null;  assert idx >= 0;  assert log != null;  log.info("Checking balanced state of cache #" + idx);  Affinity<Object> aff=(Affinity)dht.affinity();  Ignite ignite=dht.context().grid();  ClusterNode locNode=ignite.cluster().localNode();  GridDhtPartitionTopology top=dht.topology();  Collection<Integer> affParts=new HashSet<>();  GridDhtPartitionMap2 map=dht.topology().partitions(locNode.id());  if (map != null)   for (  int p : map.keySet())   affParts.add(p);  if (F.isEmpty(affParts))   return;  for (  int p : affParts)   assert top.localPartition(p,false) != null : "Partition does not exist in topology: [cache=" + idx + ", part="+ p+ "]";  for (  GridDhtLocalPartition p : top.localPartitions()) {    assert affParts.contains(p.id()) : "Invalid local partition: [cache=" + idx + ", part="+ p+ ", node partitions="+ affParts+ "]";    assert p.state() == OWNING : "Invalid partition state [cache=" + idx + ", part="+ p+ "]";    Collection<ClusterNode> partNodes=aff.mapPartitionToPrimaryAndBackups(p.id());    assert partNodes.contains(locNode) : "Partition affinity nodes does not contain local node: [cache=" + idx + "]";  }  for (  GridCacheEntryEx e : dht.entries()) {    GridDhtCacheEntry entry=(GridDhtCacheEntry)e;    if (!affParts.contains(entry.partition()))     log.warning("Partition of stored entry is obsolete for node: [cache=" + idx + ", entry="+ entry+ ", node partitions="+ affParts+ "]");    int p=aff.partition(entry.key());    if (!affParts.contains(p))     log.warning("Calculated entry partition is not in node partitions: [cache=" + idx + ", part="+ p+ ", entry="+ entry+ ", node partitions="+ affParts+ "]");  }}  }
class C{  public static void test1000Words() throws Exception {  DatabaseMemory.TEST=true;  DatabaseMemory.RECREATE_DATABASE=true;  Bot bot=Bot.createInstance();  bot.setDebugLevel(Level.OFF);  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://en.wiktionary.org/wiki/Category:1000_English_basic_words"));  bot.shutdown();}  }
class C{  public ClassPathResource(String location,ClassLoader classLoader){  this.location=location;  this.classLoader=classLoader;}  }
class C{  public ReadCharactersFromHallOfFameCommand(String fametype,int max,boolean ascending){  this.fametype=fametype;  this.max=max;  this.ascending=ascending;}  }
class C{  @Deprecated public boolean keepOffspring(Chromosome parent,Chromosome offspring){  return isBetterOrEqual(offspring,parent);}  }
class C{  public void clearReferences(){  refMap.clear();  refId=0;}  }
class C{  @IntRange(from=MIN_WRAPPED_VIEW_TYPE,to=MAX_WRAPPED_VIEW_TYPE) public static int extractWrappedViewTypePart(int composedViewType){  return (composedViewType << (32 - BIT_WIDTH_WRAPPED_VIEW_TYPE - BIT_OFFSET_WRAPPED_VIEW_TYPE)) >> (32 - BIT_WIDTH_WRAPPED_VIEW_TYPE);}  }
class C{  public static String[] buildInput(int n){  String[] strings=new String[n];  for (int i=0; i < n; i++) {    StringBuffer mixed=new StringBuffer(baseString);    for (int s=0; s < elementSize; s++) {      int j;      char c, d;      j=1 + (int)(elementSize * Math.random());      j%=elementSize;      c=mixed.charAt(s);      d=mixed.charAt(j);      mixed.replace(s,s + 1,"" + d);      mixed.replace(j,j + 1,"" + c);    }    strings[i]=new String(mixed);  }  return strings;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static <T>List<T> compose(List<? extends T> l1,List<? extends T> l2,List<? extends T> l3){  return new ComposedList(l1,l2,l3);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.945 -0500",hash_original_method="9B3201AE5D07B0FE82D467B91B0DEBA5",hash_generated_method="879B54130E22C02EF54785AE920934C3") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static boolean isArrayByteBase64(byte[] arrayOctect){  arrayOctect=discardWhitespace(arrayOctect);  int length=arrayOctect.length;  if (length == 0) {    return true;  }  for (int i=0; i < length; i++) {    if (!isBase64(arrayOctect[i])) {      return false;    }  }  return true;}  }
class C{  public SearchSourceBuilder aggregations(byte[] aggregationsBinary,int aggregationsBinaryOffset,int aggregationsBinaryLength){  return aggregations(new BytesArray(aggregationsBinary,aggregationsBinaryOffset,aggregationsBinaryLength));}  }
class C{  public static void transform(double[] x,double[] zz,double[] psum,double[][] M,double[] lamda_l,int nx,int n_obj){  int k=nx - n_obj + 1;  double[] p=new double[nx];  for (int i=0; i < nx; i++) {    double z=0.0;    for (int j=0; j < nx; j++) {      z+=M[i][j] * x[j];    }    if (z >= 0 && z <= 1) {      zz[i]=z;      p[i]=0;    } else     if (z < 0) {      zz[i]=-lamda_l[i] * z;      p[i]=-z;    } else {      zz[i]=1 - lamda_l[i] * (z - 1);      p[i]=z - 1;    }  }  for (int j=0; j < n_obj; j++) {    psum[j]=0;  }  for (int i=nx - k + 1; i <= nx; i++) {    for (int j=0; j < n_obj; j++) {      psum[j]=Math.sqrt(Math.pow(psum[j],2) + Math.pow(p[i - 1],2));    }  }  for (int i=1; i <= n_obj; i++) {    for (int j=n_obj - i; j >= 1; j--) {      psum[i - 1]=Math.sqrt(Math.pow(psum[i - 1],2) + Math.pow(p[j - 1],2));    }    if (i > 1) {      psum[i - 1]=Math.sqrt(Math.pow(psum[i - 1],2) + Math.pow(p[(n_obj - i + 1) - 1],2));    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public MetaPopulationModel(ArrayList<DemographicModel> demographicModels,Parameter populationProportions){  this(META_POPULATION_MODEL,demographicModels,populationProportions);}  }
class C{  public DSFIDNotFoundException(String msg,int dsfid){  super(msg);  this.dsfid=dsfid;  this.versionOrdinal=Version.CURRENT.ordinal();}  }
class C{  private Element addElement(Element parent,String name,String value){  final Element e=parent.getOwnerDocument().createElementNS("",name);  if (value != null && value.trim().length() > 0) {    e.setTextContent(value);  }  parent.appendChild(e);  return e;}  }
class C{  public SampleDriver(){  handlers=new ArrayList<SampleHandler>();  handlers.add(new CertificateSampleHandler());  handlers.add(new GroupSampleHandler());  handlers.add(new SolutionUserSampleHandler());  handlers.add(new UserSampleHandler());}  }
class C{  public GenericEntry addMemberToGroup(String groupId,String memberName) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty(APPS_PROP_GROUP_MEMBER_ID,memberName);  return insert(new URL(baseDomainUrl + groupId + "/member"),entry);}  }
class C{  public ExtentVisibilitySupport(){}  }
class C{  private Type(final int sort){  this.sort=sort;  this.len=1;}  }
class C{  public boolean abort() throws LoginException {  if (debug)   System.out.println("\t\t[LdapLoginModule] " + "aborted authentication");  if (succeeded == false) {    return false;  } else   if (succeeded == true && commitSucceeded == false) {    succeeded=false;    cleanState();    ldapPrincipal=null;    userPrincipal=null;    authzPrincipal=null;  } else {    logout();  }  return true;}  }
class C{  public void updateVarsAndTerminals(Rule r){  for (int j=0; j < r.lhs.size(); j++) {    if (isVariable(r.lhs.get(j)) && !vars.contains(r.lhs.get(j))) {      vars.add(r.lhs.get(j));    } else     if (isTerminal(r.lhs.get(j)) && !terminals.contains(r.lhs.get(j))) {      terminals.add(r.lhs.get(j));    }  }  if (r.rhs != null) {    for (int j=0; j < r.rhs.size(); j++) {      if (isVariable(r.rhs.get(j)) && !vars.contains(r.rhs.get(j))) {        vars.add(r.rhs.get(j));      } else       if (isTerminal(r.rhs.get(j)) && !terminals.contains(r.rhs.get(j))) {        terminals.add(r.rhs.get(j));      }    }  }  Collections.sort(vars);  Collections.sort(terminals);}  }
class C{  protected Shape prepareFinalVertexShape(RenderContext<V,E> rc,V v,Layout<V,E> layout,int[] coords){  Shape shape=rc.getVertexShapeTransformer().apply(v);  Point2D p=layout.apply(v);  p=rc.getMultiLayerTransformer().transform(Layer.LAYOUT,p);  float x=(float)p.getX();  float y=(float)p.getY();  coords[0]=(int)x;  coords[1]=(int)y;  AffineTransform xform=AffineTransform.getTranslateInstance(x,y);  shape=xform.createTransformedShape(shape);  return shape;}  }
class C{  public Offer(final Item item,final Integer price,final Player offerer){  super();  setRPClass("offer");  hide();  if (!hasSlot(OFFER_ITEM_SLOT_NAME)) {    this.addSlot(OFFER_ITEM_SLOT_NAME);  }  if (item != null) {    getSlot(OFFER_ITEM_SLOT_NAME).add(item);  }  this.put(PRICE_ATTRIBUTE,price.intValue());  this.put(OFFERER_ATTRIBUTE_NAME,offerer.getName());  put(OFFERER_CID_ATTRIBUTE,getPlayerCID(offerer));  updateTimestamp();}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  public boolean isWeaponBlockedAt(int loc,boolean isRear){  return false;}  }
class C{  private static void configure(){  register("area",null,null,InvisibleEntity2DView.class);  register("block",null,null,LookableEntity2DView.class);  register("blood",null,null,Blood2DView.class);  register("creature","ent",null,BossCreature2DView.class);  register("growing_entity_spawner","items/grower/wood_grower",null,CarrotGrower2DView.class);  register("growing_entity_spawner","items/grower/carrot_grower",null,CarrotGrower2DView.class);  register("chest",null,null,Chest2DView.class);  register("corpse",null,null,Corpse2DView.class);  register("creature",null,null,Creature2DView.class);  register("door",null,null,Door2DView.class);  register("fire",null,null,UseableEntity2DView.class);  register("fish_source",null,null,UseableEntity2DView.class);  register("game_board",null,null,GameBoard2DView.class);  register("gate",null,null,Gate2DView.class);  register("gold_source",null,null,UseableEntity2DView.class);  register("growing_entity_spawner",null,null,GrainField2DView.class);  register("house_portal",null,null,HousePortal2DView.class);  register("item","box",null,Box2DView.class);  register("item","special","mithril clasp",Item2DView.class);  register("item",null,null,Item2DView.class);  register("npc",null,null,NPC2DView.class);  register("cat",null,null,Pet2DView.class);  register("pet",null,null,Pet2DView.class);  register("baby_dragon",null,null,Pet2DView.class);  register("purple_dragon",null,null,Pet2DView.class);  register("plant_grower",null,null,PlantGrower2DView.class);  register("player",null,null,Player2DView.class);  register("portal",null,null,Portal2DView.class);  register("sheep",null,null,Sheep2DView.class);  register("food",null,null,SheepFood2DView.class);  register("spell",null,null,Spell2DView.class);  register("sign",null,null,Sign2DView.class);  register("blackboard",null,null,Sign2DView.class);  register("rented_sign",null,null,Sign2DView.class);  register("shop_sign",null,null,ShopSign2DView.class);  register("tradecentersign",null,null,TradeCenterSign2DView.class);  register("item","jewellery",null,StackableItem2DView.class);  register("item","flower",null,StackableItem2DView.class);  register("item","resource",null,StackableItem2DView.class);  register("item","herb",null,StackableItem2DView.class);  register("item","misc",null,StackableItem2DView.class);  register("item","money",null,StackableItem2DView.class);  register("item","missile",null,StackableItem2DView.class);  register("item","ammunition",null,StackableItem2DView.class);  register("item","container",null,StackableItem2DView.class);  register("item","special",null,StackableItem2DView.class);  register("item","club","wizard_staff",UseableItem2DView.class);  register("item","misc","seed",UseableItem2DView.class);  register("item","misc","bulb",UseableItem2DView.class);  register("item","scroll",null,UseableItem2DView.class);  register("item","food",null,UseableItem2DView.class);  register("item","drink",null,UseableItem2DView.class);  register("item","tool","foodmill",UseableItem2DView.class);  register("item","tool","sugarmill",UseableItem2DView.class);  register("item","tool","scrolleraser",UseableItem2DView.class);  register("item","ring",null,Ring2DView.class);  register("item","ring","wedding",UseableRing2DView.class);  register("useable_entity",null,null,UseableEntity2DView.class);  register("wall",null,null,Wall2DView.class);  register("walkblocker",null,null,WalkBlocker2DView.class);  register("well_source",null,null,UseableEntity2DView.class);}  }
class C{  public static Drawable bitmapToDrawable(@SuppressWarnings("UnusedParameters") Context mContext,Bitmap bitmap){  return new BitmapDrawable(bitmap);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'IMAGE_CACHE' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'URL' TEXT,"+ "'PATH' TEXT);");}  }
class C{  public void drawAtPoint(GL10 gl,CGPoint point){  gl.glEnable(GL_TEXTURE_2D);  loadTexture(gl);  float width=(float)mWidth * _maxS;  float height=(float)mHeight * _maxT;  float vertices[]={point.x,point.y,0.0f,width + point.x,point.y,0.0f,point.x,height + point.y,0.0f,width + point.x,height + point.y,0.0f};  mVertices.put(vertices);  mVertices.position(0);  float coordinates[]={0.0f,_maxT,_maxS,_maxT,0.0f,0.0f,_maxS,0.0f};  mCoordinates.put(coordinates);  mCoordinates.position(0);  gl.glEnableClientState(GL_VERTEX_ARRAY);  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glBindTexture(GL_TEXTURE_2D,_name);  gl.glTexParameterx(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT);  gl.glTexParameterx(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT);  gl.glVertexPointer(3,GL_FLOAT,0,mVertices);  gl.glTexCoordPointer(2,GL_FLOAT,0,mCoordinates);  gl.glDrawArrays(GL_TRIANGLE_STRIP,0,4);  gl.glDisableClientState(GL_VERTEX_ARRAY);  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glDisable(GL_TEXTURE_2D);}  }
class C{  public static double acosInRange(final double value){  if (value <= -1.0) {    return Math.PI;  } else   if (value >= 1.0) {    return 0.0;  } else {    return acos(value);  }}  }
class C{  public StdOutWriter(OutputStream out){  super(out,true);}  }
class C{  @SuppressWarnings("deprecation") public FrameBlock readFirstBlock(String fname) throws IOException {  JobConf job=new JobConf(ConfigurationManager.getCachedJobConf());  FileSystem fs=FileSystem.get(job);  Path path=new Path(fname);  LongWritable key=new LongWritable();  FrameBlock value=new FrameBlock();  Path lpath=getSequenceFilePaths(fs,path)[0];  SequenceFile.Reader reader=new SequenceFile.Reader(fs,lpath,job);  try {    reader.next(key,value);  }  finally {    IOUtilFunctions.closeSilently(reader);  }  return value;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public RsFluent withStatus(final int code){  return new RsFluent(new RsWithStatus(this,code));}  }
class C{  public void unregisterListener(IListener listener){  Class<?> rawType=TypeResolver.resolveRawArgument(IListener.class,listener.getClass());  if (Event.class.isAssignableFrom(rawType)) {    if (classListeners.containsKey(rawType)) {      classListeners.get(rawType).removeIf(null);      Discord4J.LOGGER.trace(LogMarkers.EVENTS,"Unregistered IListener {}",listener.getClass().getSimpleName());    }  }}  }
class C{  public NbtTagDouble(){}  }
class C{  public IllegalArgumentException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected RMID(String classname,String options,String args,OutputStream out,OutputStream err,int port){  super(classname,options,args,out,err);  this.port=port;}  }
class C{  void calcGlobalScore(){  for (int iNode=0; iNode < m_nNodes; iNode++) {    ParentSet parentSet=m_BayesNet.getParentSet(iNode);    while (parentSet.getNrOfParents() > 0) {      parentSet.deleteLastParent(m_BayesNet.m_Instances);    }  }  for (int iNode=0; iNode < m_nNodes; iNode++) {    ParentSet parentSet=m_BayesNet.getParentSet(iNode);    for (int iNode2=0; iNode2 < m_nNodes; iNode2++) {      if (m_bits[iNode2 + iNode * m_nNodes]) {        parentSet.addParent(iNode2,m_BayesNet.m_Instances);      }    }  }  try {    m_fScore=calcScore(m_BayesNet);  } catch (  Exception e) {  }}  }
class C{  private void rolloverLogTask(){  try {    if (_isInit) {      flush();    }  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);  }  _isRollingOver=true;  try {    if (!_isInit)     return;    Path savedPath=null;    long now=CurrentTime.currentTime();    long lastPeriodEnd=_nextPeriodEnd;    _nextPeriodEnd=nextRolloverTime(now);    Path path=getPath();synchronized (_logLock) {      flushTempStream();      long length=Files.size(path);      if (lastPeriodEnd <= now && lastPeriodEnd > 0) {        closeLogStream();        savedPath=getSavedPath(lastPeriodEnd - 1);      } else       if (path != null && getRolloverSize() <= length) {        closeLogStream();        savedPath=getSavedPath(now);      }    }    if (savedPath != null) {      movePathToArchive(savedPath);    }  } catch (  IOException e) {    e.printStackTrace();  } finally {synchronized (_logLock) {      _isRollingOver=false;      flushTempStream();    }    _rolloverListener.requeue(_rolloverAlarm);  }}  }
class C{  public void combos(){  Combo.popular(cbOrganizacao,ControleDAO.getBanco().getOrganizacaoDAO().combo());}  }
