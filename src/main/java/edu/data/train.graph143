class C{  public boolean isMissingAt(int rowIndex,int columnIndex){  boolean result;  result=false;  if ((rowIndex >= 0) && (rowIndex < getRowCount()) && (columnIndex > 0)&& (columnIndex < getColumnCount())) {    result=(m_Data.instance(rowIndex).isMissing(columnIndex - 1));  }  return result;}  }
class C{  @LargeTest public void testPropertiesMPEGNTSC() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_161kbps_s_0_26.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_3_2;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_MPEG4;  final int duration=26866;  final int videoBitrate=403000;  final int audioBitrate=160000;  final int fps=30;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=48000;  final int audioChannel=2;  final int videoProfile=MediaProperties.MPEG4Profile.MPEG4ProfileSimple;  final int videoLevel=MediaProperties.MPEG4Level.MPEG4Level1;  final int width=720;  final int height=MediaProperties.HEIGHT_480;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  @Override public Bagging aggregate(Bagging toAggregate) throws Exception {  if (!m_Classifier.getClass().isAssignableFrom(toAggregate.m_Classifier.getClass())) {    throw new Exception("Can't aggregate because base classifiers differ");  }  if (m_classifiersCache == null) {    m_classifiersCache=new ArrayList<Classifier>();    m_classifiersCache.addAll(Arrays.asList(m_Classifiers));  }  m_classifiersCache.addAll(Arrays.asList(toAggregate.m_Classifiers));  return this;}  }
class C{  private long adjustEndTimeForPerUnitPriceModel(final BillingInput billingInput,final PriceModelInput priceModelInput){  long adjustetEndTime=priceModelInput.getPriceModelPeriodEnd();  if (priceModelInput.getPriceModelHistory().getDataContainer().getType() == org.oscm.internal.types.enumtypes.PriceModelType.PER_UNIT) {    if (priceModelInput.isOldestPriceModelOfPeriod() && priceModelInput.getDeactivationTime() == -1) {      adjustetEndTime=billingInput.getBillingPeriodEnd();    }  }  return adjustetEndTime;}  }
class C{  public int importKeysAndEncrypt(final List<ECKey> keys,CharSequence password){  keyChainGroupLock.lock();  try {    checkNotNull(getKeyCrypter(),"Wallet is not encrypted");    return importKeysAndEncrypt(keys,getKeyCrypter().deriveKey(password));  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  @JsonProperty("filter") void filter(ConditionBuilder<?,?> filterBuilder){  builder.filter(filterBuilder);}  }
class C{  public void createSubUsageScenario18() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-02-05 00:00:00") - DateTimeHandling.daysToMillis(5.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO18_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_PARS_FREEP,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),5);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO18_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-02-05 00:00:00") + DateTimeHandling.daysToMillis(11);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO18_PERUNIT_MONTH",subDetails);}  }
class C{  public Luffa512(){  super();}  }
class C{  private void readHeader() throws OpenStegoException {  this.dataHeader=new DCTDataHeader(this,this.config);}  }
class C{  public static String replace(String s,String key,String value){  try {    return s.replace(getPlaceholder(key),URLEncoder.encode(value,"UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean makeDirs(String filePath){  String folderName=getFolderName(filePath);  if (StringUtils.isEmpty(folderName)) {    return false;  }  File folder=new File(folderName);  return (folder.exists() && folder.isDirectory()) ? true : folder.mkdirs();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.470 -0500",hash_original_method="09914F60338D027B2BB13037BC713EDF",hash_generated_method="5C825957353297221E26BC173ADA838D") public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Number must be non-null");  }  double doubleValue=number.doubleValue();  JSON.checkDouble(doubleValue);  if (number.equals(NEGATIVE_ZERO)) {    return "-0";  }  long longValue=number.longValue();  if (doubleValue == (double)longValue) {    return Long.toString(longValue);  }  return number.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badSubstring;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badSubstring=child.substringData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public final int findNodeAtPoint(Point2D point){  if (nodeRectVert == null || nodeRectHoriz == null)   return -1;  int i=0;  double x=point.getX();  double y=point.getY();  while (i < nodeRectVert.length) {    if (nodeRectVert[i].contains(x,y) || nodeRectHoriz[i].contains(x,y))     return i; else     i++;  }  return -1;}  }
class C{  private CompletableFuture<Void> listen(){  CompletableFuture<Void> future=new CompletableFuture<>();  context.getThreadContext().executor().execute(null);  return future;}  }
class C{  public DefaultSymbolFactory(){}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  public void createAsyncScenario36a() throws Exception {  setDateFactory("2013-03-28 10:15:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO_36a",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_1,technicalServiceAsync,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  String customerAdminId="SCENARIO_36aCustomer";  orgSetup.registerCustomer("SCENARIO_36aCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,customerAdminId,supplierMarketplace.getMarketplaceId(),basicSetup.getSupplierOrgID());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO_36a",serviceDetails,basicSetup.getCustomerUser1(),role);  setDateFactory("2013-03-28 10:20:00");  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  VOServiceDetails serviceDetails2=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO_36a_2",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES_2,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,serviceDetails2);  setDateFactory("2013-03-30 10:20:00");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceDetails2);  setDateFactory("2013-03-30 20:20:00");  upgradedSubDetails=deleteBillingContactsAndUpdateSub(customerAdmin.getKey(),upgradedSubDetails);  setDateFactory("2013-04-10 10:20:00");  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  setDateFactory("2013-04-15 10:20:00");  upgradedSubDetails=restoreBillingContactForSubscription(customerAdmin.getKey(),upgradedSubDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  setDateFactory("2013-04-30 10:20:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO_36a",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO_36a",upgradedSubDetails);}  }
class C{  public static boolean isCaseInsensitive(){  Boolean value=_caseInsensitive.get();  if (value == null) {    return _isCaseInsensitive;  } else   return value.booleanValue();}  }
class C{  public static String refreshLock(EntityManager em,long type,String key,String note){  EntityTransaction tx=null;  try {    tx=em.getTransaction();    tx.begin();    GlobalInterlock lock=_findAndRefreshLock(em,type);    if (lock == null) {      throw new GlobalInterlockException("No lock of type " + type + " exists for key "+ key+ ".");    }    String ref=Long.toHexString(lock.lockTime);    if (ref.equalsIgnoreCase(key)) {      lock.lockTime=System.currentTimeMillis();      lock.note=note;      em.merge(lock);      em.flush();      tx.commit();      return Long.toHexString(lock.lockTime);    }    throw new GlobalInterlockException("This process doesn't own the type " + type + " lock having key "+ key+ ".");  }  finally {    if (tx != null && tx.isActive()) {      tx.rollback();    }  }}  }
class C{  public static boolean isPolylineInsidePolygon(GeoArray poly,GeoArray region){  int polySize=poly.getSize();  Geo testPoint=new Geo();  for (int i=0; i < polySize; i++) {    poly.get(i,testPoint);    if (isPointInPolygon(testPoint,region)) {      return true;    }  }  return false;}  }
class C{  public RemoteProductTypeServiceImpl(final DtoProductTypeService dtoProductTypeService){  super(dtoProductTypeService);  this.dtoProductTypeService=dtoProductTypeService;}  }
class C{  public void postRegister(Boolean registrationDone){}  }
class C{  public static void showNetworkUnavailableMessage(Context context){  AlertDialog.Builder builder=CommonDialogUtils.getAlertDialogWithOneButton(context,context.getResources().getString(R.string.error_network_unavailable),context.getResources().getString(R.string.button_ok),null);  builder.show();}  }
class C{  public CoapObserveRelation observe(CoapHandler handler,int accept){  Request request=newGet().setURI(uri).setObserve();  return observe(accept(request,accept),handler);}  }
class C{  public void repeat(float offset,String syncbaseID,int repeatIteration){}  }
class C{  public void render(Graphics2D g,Shape shape){  render(g,shape,false);}  }
class C{  public Builder use(final List<List<String>> use){  this.use=use;  return this;}  }
class C{  ElementMetadataImpl(Schema schema,ElementTransform transform,ElementKey<?,?> parent,ElementKey<D,E> key,MetadataContext context){  super(schema,transform,parent,key,context);  this.elemKey=key;  TransformKey transformSource=transform.getSource();  if (transformSource != null) {    ElementKey<D,E> transformSourceKey=ElementKey.of(transformSource.getKey().getId(),key.getDatatype(),key.getElementType());    if (transformSourceKey.equals(elemKey)) {      this.sourceKey=elemKey;    } else {      this.sourceKey=transformSourceKey;    }  } else {    this.sourceKey=elemKey;  }  transform=ElementTransform.mergeSource(schema,key,transform,context);  this.cardinality=firstNonNull(transform.getCardinality(),Cardinality.SINGLE);  this.isContentRequired=firstNonNull(transform.getContentRequired(),true);  this.validator=firstNonNull(transform.getValidator(),DEFAULT_VALIDATOR);  this.properties=transform.getProperties();  this.virtualElementHolder=transform.getVirtualElementHolder();  this.isFlattened=transform.isFlattened();  this.attributes=getAttributes(transform.getAttributes().values());  this.renamedAttributes=getRenamedAttributes();  this.elements=getElements(transform.getElements().values());  this.renamedElements=getRenamedElements();  if (transform.getAdaptations().isEmpty()) {    this.adaptations=null;  } else {    this.adaptations=AdaptationRegistryFactory.create(schema,transform);  }}  }
class C{  private synchronized void updateStatistics(){  if (System.currentTimeMillis() < m_nextStats)   return;  String sql="SELECT " + "(SELECT COUNT(*) FROM R_Request r" + " INNER JOIN R_Status s ON (r.R_Status_ID=s.R_Status_ID AND s.IsOpen='Y') "+ "WHERE r.R_RequestType_ID=x.R_RequestType_ID) AS OpenNo, "+ "(SELECT COUNT(*) FROM R_Request r "+ "WHERE r.R_RequestType_ID=x.R_RequestType_ID) AS TotalNo, "+ "(SELECT COUNT(*) FROM R_Request r "+ "WHERE r.R_RequestType_ID=x.R_RequestType_ID AND Created>addDays(SysDate,-30)) AS New30No, "+ "(SELECT COUNT(*) FROM R_Request r"+ " INNER JOIN R_Status s ON (r.R_Status_ID=s.R_Status_ID AND s.IsClosed='Y') "+ "WHERE r.R_RequestType_ID=x.R_RequestType_ID AND r.Updated>addDays(SysDate,-30)) AS Closed30No "+ "FROM R_RequestType x WHERE R_RequestType_ID=?";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,getR_RequestType_ID());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      m_openNo=rs.getInt(1);      m_totalNo=rs.getInt(2);      m_new30No=rs.getInt(3);      m_closed30No=rs.getInt(4);    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  m_nextStats=System.currentTimeMillis() + 3600000;}  }
class C{  public FlipAnimation(View fromView,View toView){  this.fromView=fromView;  this.toView=toView;  setDuration(700);  setFillAfter(false);  setInterpolator(new AccelerateDecelerateInterpolator());}  }
class C{  public static void sleep(){  try {    Thread.sleep(Long.MAX_VALUE);  } catch (  InterruptedException iex) {  }}  }
class C{  public static void main(String[] args){  df.setMaximumFractionDigits(7);  double a=-1;  double b=+1;  System.out.println("n\ta\tb\tc\tf(c)");  for (int i=1; i <= 20; i++) {    double c=(a + b) / 2;    System.out.println(i + "\t" + df.format(a)+ "\t"+ df.format(b)+ "\t"+ df.format(c)+ "\t"+ df.format(f(c)));    int signfa=(int)Math.signum(f(a));    int signfc=(int)Math.signum(f(c));    if (signfa == signfc) {      a=c;    } else {      b=c;    }  }}  }
class C{  public static boolean isStyleElement(Node node){  return node.getNodeType() == Node.ELEMENT_NODE && UiBinderConstants.UI_BINDER_XML_NAMESPACE.equals(node.getNamespaceURI()) && UiBinderConstants.UI_BINDER_STYLE_ELEMENT_NAME.equalsIgnoreCase(node.getLocalName());}  }
class C{  @Override public boolean supportsResultSetType(int type){  debugCodeCall("supportsResultSetType",type);  return type != ResultSet.TYPE_SCROLL_SENSITIVE;}  }
class C{  @Override public synchronized int hashCode(){  int result=1;  for (int i=0; i < elementCount; i++) {    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());  }  return result;}  }
class C{  public ChartColor(int r,int g,int b){  super(r,g,b);}  }
class C{  public static ParameterPair serializableInstance(){  return new ParameterPair();}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height >> 1;  int halfWidth=width >> 1;  int deltaY=Math.max(1,height / (MAX_MODULES << 3));  int deltaX=Math.max(1,width / (MAX_MODULES << 3));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth >> 1);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight >> 1);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight >> 1);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth >> 1);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth >> 2);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  public void close(){  out.close();}  }
class C{  public void merge(MarkovChain that){  Hashtable<String,Vector<String>> thatChain=that.chain;  Hashtable<String,Vector<String>> newChain=new Hashtable<>();  Set<String> thisKeys=chain.keySet();  Set<String> thatKeys=thatChain.keySet();  Set<String> keys=new HashSet<>();  keys.addAll(thisKeys);  keys.addAll(thatKeys);  for (  String key : keys) {    Vector<String> newPair=new Vector<>();    Vector<String> thisPair=chain.get(key);    Vector<String> thatPair=thatChain.get(key);    if (thisPair != null)     newPair.addAll(thisPair);    if (thatPair != null)     newPair.addAll(thatPair);    chain.remove(key);    thatChain.remove(key);    newChain.put(key,newPair);  }  chain=newChain;}  }
class C{  public void add(int index,Object element){  content.beforeInsert(index,value(element));  modCount++;}  }
class C{  synchronized public void clear(){  for (  Timer timer : timers) {    timer.cancel();  }  timers.clear();  mostUsedValues.clear();}  }
class C{  public void apply(PermissionSet<PermissionType> permissionSet) throws GuacamoleException {  if (!addedPermissions.isEmpty())   permissionSet.addPermissions(addedPermissions);  if (!removedPermissions.isEmpty())   permissionSet.removePermissions(removedPermissions);}  }
class C{  public void skip(int bytes) throws IOException {  if (bytes > 0) {    if (stream.skip(bytes) != bytes) {      throw new EOFException();    }    bytesRead+=bytes;  }}  }
class C{  public static void renameTvShowRoot(TvShow show){  LOGGER.debug("TV show year: " + show.getYear());  LOGGER.debug("TV show path: " + show.getPath());  String newPathname=generateTvShowDir(SETTINGS.getRenamerTvShowFoldername(),show);  String oldPathname=show.getPath();  if (!newPathname.isEmpty()) {    Path srcDir=Paths.get(oldPathname);    Path destDir=Paths.get(newPathname);    if (!srcDir.toAbsolutePath().toString().equals(destDir.toAbsolutePath().toString())) {      try {        if (!Files.exists(destDir.getParent())) {          Files.createDirectory(destDir.getParent());        }        boolean ok=Utils.moveDirectorySafe(srcDir,destDir);        if (ok) {          show.updateMediaFilePath(srcDir,destDir);          show.setPath(newPathname);          for (          TvShowEpisode episode : new ArrayList<>(show.getEpisodes())) {            episode.replacePathForRenamedFolder(srcDir,destDir);            episode.updateMediaFilePath(srcDir,destDir);          }          show.saveToDb();        }      } catch (      Exception e) {        LOGGER.error("error moving folder: ",e.getMessage());        MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,srcDir,"message.renamer.failedrename",new String[]{":",e.getLocalizedMessage()}));      }    }  }}  }
class C{  SideEffectAnnotation methodSideEffectAnnotation(Element element,boolean issueErrorIfMoreThanOnePresent){  if (element != null) {    List<SideEffectAnnotation> sideEffectAnnotationPresent=new ArrayList<>();    for (    SideEffectAnnotation sea : SideEffectAnnotation.values()) {      if (getDeclAnnotationNoAliases(element,sea.getAnnotationClass()) != null) {        sideEffectAnnotationPresent.add(sea);      }    }    int count=sideEffectAnnotationPresent.size();    if (count == 0) {      return defaults.applyUncheckedCodeDefaults(element) ? SideEffectAnnotation.MAYRELEASELOCKS : SideEffectAnnotation.RELEASESNOLOCKS;    }    if (count > 1 && issueErrorIfMoreThanOnePresent) {    }    SideEffectAnnotation weakest=sideEffectAnnotationPresent.get(0);    for (    SideEffectAnnotation sea : sideEffectAnnotationPresent) {      if (sea.isWeakerThan(weakest)) {        weakest=sea;      }    }    return weakest;  }  return SideEffectAnnotation.weakest();}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  protected void updateMeans(double[][] means,double[][] meanshift,List<ModifiableDBIDs> clusters,int[] changesize){  for (int i=0; i < k; i++) {    int newsize=clusters.get(i).size(), oldsize=newsize - changesize[i];    if (newsize == 0) {      continue;    }    if (oldsize == 0) {      means[i]=times(meanshift[i],1. / newsize);      continue;    }    if (oldsize == newsize) {      plusTimesEquals(means[i],meanshift[i],1. / (double)newsize);      continue;    }    plusTimesEquals(timesEquals(means[i],oldsize / (double)newsize),meanshift[i],1. / (double)newsize);  }}  }
class C{  public static BitwiseByteArray loadBitwise(File file,long startVal,long endVal,int range) throws IOException {  final long adjStartVal=startVal / BITS_PER_LONG * BITS_PER_LONG;  final long adjEndVal=endVal % BITS_PER_LONG == 0 ? endVal : (endVal / BITS_PER_LONG + 1) * BITS_PER_LONG;  final BitwiseByteArray ret=new BitwiseByteArray(adjEndVal - adjStartVal,CompressedByteArray.minBits(range));  ret.mOffset=startVal - adjStartVal;  ret.mSize=endVal - startVal;  ret.mValuesSet=adjEndVal - adjStartVal;  final long startSeekPos=adjStartVal / BITS_PER_LONG * ret.mBits * 8;  final long endSeekPos=adjEndVal / BITS_PER_LONG * ret.mBits * 8;  final ByteBuffer buf=ByteBuffer.allocate(64 * 1024).order(ByteOrder.BIG_ENDIAN);  int dataArray=0;  long absolutePosition=startSeekPos;  try (FileInputStream stream=new FileInputStream(file)){    try (FileChannel channel=stream.getChannel()){      if (startSeekPos > 0) {        channel.position(startSeekPos);      }      int dFrom=0;      while (absolutePosition < endSeekPos && channel.read(buf) != -1) {        buf.flip();        final long maxLimit=endSeekPos - absolutePosition;        final int size=(int)Math.min((long)buf.limit(),maxLimit);        int numLongs=size / 8;        int dTo=Math.min(ret.mData[dataArray].length,dFrom + numLongs);        while (numLongs > 0) {          buf.asLongBuffer().get(ret.mData[dataArray],dFrom,dTo - dFrom);          final int dataAdvance=(dTo - dFrom) * 8;          buf.position(dataAdvance);          absolutePosition+=dataAdvance;          numLongs-=dTo - dFrom;          if (numLongs > 0) {            dataArray++;            dFrom=0;            dTo=Math.min(ret.mData[dataArray].length,dFrom + numLongs);          }          dFrom+=dTo - dFrom;        }        buf.compact();      }    }   }   return ret;}  }
class C{  public DynamoDBConsumerWorker(BatchWriteItemRequest batchWriteItemRequest,AmazonDynamoDBClient client,RateLimiter rateLimiter,String tableName){  this.batch=batchWriteItemRequest;  this.client=client;  this.rateLimiter=rateLimiter;  this.tableName=tableName;  this.exponentialBackoffTime=BootstrapConstants.INITIAL_RETRY_TIME_MILLISECONDS;}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public void swap(String n0,String n1){  if (n0 == null || n1 == null) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Can not swap unnamed cores.");  }  n0=checkDefault(n0);  n1=checkDefault(n1);  solrCores.swap(n0,n1);  coresLocator.swap(this,solrCores.getCoreDescriptor(n0),solrCores.getCoreDescriptor(n1));  log.info("swapped: " + n0 + " with "+ n1);}  }
class C{  public OperatorRule(IToken token){  fToken=token;}  }
class C{  public static void stripUnnecessaryComments(String javaFile,Charset encoding) throws IOException {  String content=Files.toString(new File(javaFile),encoding);  content=new NewlineNormalizer().toUnixLineDelimiter(content);  content=content.replaceAll("(?m)^(\\s+)// .*/(\\w+\\.g:.*)$","$1// $2");  content=content.replaceAll("(public String getGrammarFileName\\(\\) \\{ return \").*/(\\w+\\.g)(\"; \\})","$1$2$3");  Files.write(content,new File(javaFile),encoding);}  }
class C{  private void serializeVersion0(final V val,final short version,final DataOutput out) throws IOException {  final byte termCode=getTermCode(val);  out.writeByte(termCode);switch (termCode) {case ITermIndexCodes.TERM_CODE_BND:{      out.writeUTF(((BNode)val).getID());      break;    }case ITermIndexCodes.TERM_CODE_URI:{    out.writeUTF(((URI)val).stringValue());    break;  }case ITermIndexCodes.TERM_CODE_LIT:out.writeUTF(((Literal)val).getLabel());break;case ITermIndexCodes.TERM_CODE_LCL:out.writeUTF(((Literal)val).getLanguage());out.writeUTF(((Literal)val).getLabel());break;case ITermIndexCodes.TERM_CODE_DTL:out.writeUTF(((Literal)val).getDatatype().stringValue());out.writeUTF(((Literal)val).getLabel());break;default :throw new IOException(ERR_CODE + " : " + termCode);}}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  listeners.remove(listener);}  }
class C{  public void privateDnsRouteSet(boolean enabled){  mPrivateDnsRouteSet.set(enabled);}  }
class C{  public void reset(){  currentLength=0;  for (int i=0; i < schedule.getOperatorCount(); i++) {    schedule.getOperator(i).reset();  }}  }
class C{  public static char[] toCharArray(final Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  IOUtils.copy(input,sw);  return sw.toCharArray();}  }
class C{  public void prepare(String additionalPath) throws ReplicatorException, InterruptedException, SQLException {  db=DatabaseFactory.createDatabase(url,user,pass);  db.connect();  OracleDatabase oracle=new OracleDatabase();  reservedWordsOracle=oracle.getReservedWords();  MySQLDatabase mysql=new MySQLDatabase();  reservedWordsMySQL=mysql.getReservedWords();  String userPath="";  if (additionalPath != null)   userPath="," + additionalPath;  velocity=new VelocityEngine();  velocity.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,"org.apache.velocity.runtime.log.Log4JLogChute");  velocity.setProperty(Log4JLogChute.RUNTIME_LOG_LOG4J_LOGGER,DDLScan.class.toString());  velocity.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH,".," + ReplicatorRuntimeConf.locateReplicatorHomeDir() + "/support/ddlscan"+ userPath);  velocity.setProperty(RuntimeConstants.SET_NULL_ALLOWED,true);  velocity.init();}  }
class C{  private void installClientDecorations(JRootPane root){  installBorder(root);  JComponent titlePane=createTitlePane(root);  setTitlePane(root,titlePane);  installWindowListeners(root,root.getParent());  installLayout(root);  if (myWindow != null) {    root.revalidate();    root.repaint();  }}  }
class C{  public synchronized QueueConnectionFactory lookupQueueConnectionFactory(String name) throws JMSException, NamingException {  if (usingJNDI) {    return super.lookupQueueConnectionFactory(name);  } else {    MQQueueConnectionFactory qcf=new MQQueueConnectionFactory();    configureMQConnectionFactory(qcf);    return qcf;  }}  }
class C{  public Builder nt(){  this.withThread=false;  return this;}  }
class C{  protected void addOccurrences(TextChangeManager manager,IProgressMonitor pm,RefactoringStatus status) throws CoreException {  pm.beginTask("",fOccurrences.length);  for (int i=0; i < fOccurrences.length; i++) {    ICompilationUnit cu=fOccurrences[i].getCompilationUnit();    if (cu == null)     continue;    SearchMatch[] results=fOccurrences[i].getSearchResults();    List<SearchMatch> declarationsInThisCu=new ArrayList<SearchMatch>();    List<SearchMatch> referencesInThisCu=new ArrayList<SearchMatch>();    for (int j=0; j < results.length; j++) {      if (results[j] instanceof MethodDeclarationMatch)       declarationsInThisCu.add(results[j]); else       referencesInThisCu.add(results[j]);    }    if (declarationsInThisCu.size() > 0) {      if (fDelegateUpdating) {        CompilationUnitRewrite rewrite=new CompilationUnitRewrite(cu);        rewrite.setResolveBindings(true);        for (Iterator<SearchMatch> iter=declarationsInThisCu.iterator(); iter.hasNext(); ) {          SearchMatch element=iter.next();          MethodDeclaration method=ASTNodeSearchUtil.getMethodDeclarationNode((IMethod)element.getElement(),rewrite.getRoot());          DelegateCreator creator=new DelegateMethodCreator();          creator.setDeclareDeprecated(fDelegateDeprecation);          creator.setDeclaration(method);          creator.setSourceRewrite(rewrite);          creator.setNewElementName(getNewElementName());          creator.prepareDelegate();          creator.createEdit();        }        TextChange changeForThisCu=rewrite.createChange(true);        changeForThisCu.setKeepPreviewEdits(true);        manager.manage(cu,changeForThisCu);      }      for (Iterator<SearchMatch> iter=declarationsInThisCu.iterator(); iter.hasNext(); ) {        SearchMatch element=iter.next();        simpleUpdate(element,cu,manager.get(cu));      }    }    if (fUpdateReferences) {      for (Iterator<SearchMatch> iter=referencesInThisCu.iterator(); iter.hasNext(); ) {        SearchMatch element=iter.next();        simpleUpdate(element,cu,manager.get(cu));      }    }    pm.worked(1);    if (pm.isCanceled())     throw new OperationCanceledException();  }  pm.done();}  }
class C{  public void createBug11021_upgradeSuspendedSubscription() throws Exception {  setDateFactory("2013-08-02 10:00:00");  String customerAdminId="Bug11021UpgrSusCustomerAdmin";  VOOrganization customer=orgSetup.registerCustomer("Bug11021UpgrSusCustomer",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,customerAdminId,supplierMarketplace.getMarketplaceId(),basicSetup.getSupplierOrgID());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG11021_UPGRSUS_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),3);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(customerAdmin.getKey(),"BUG11021_UPGRSUS",serviceDetails,customerAdmin,VOServiceFactory.getRole(serviceDetails,"GUEST"));  setDateFactory("2013-08-03 00:00:00");  subDetails=deleteBillingContactsAndUpdateSub(customerAdmin.getKey(),subDetails);  setDateFactory("2013-08-04 12:00:00");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails upgradedServiceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG11021_UPGRSUS_FREE_SERVICE",TestService.EXAMPLE2,TestPriceModel.FREE,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,upgradedServiceDetails);  setDateFactory("2013-08-10 23:10:00");  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(customerAdmin.getKey(),subDetails,upgradedServiceDetails);  setDateFactory("2013-08-15 08:12:00");  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG11021_UPGRSUS",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG11021_UPGRSUS",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("BUG11021_UPGRSUS",customer);}  }
class C{  public static FiltersFragment newInstance(ArrayList<Filter> filters,ArrayList<Filter> selectedFilters){  FiltersFragment fragment=new FiltersFragment();  Bundle args=new Bundle();  args.putParcelableArrayList(FILTER_DATA,filters);  args.putParcelableArrayList(SELECTED_FILTER_DATA,selectedFilters);  fragment.setArguments(args);  return fragment;}  }
class C{  public int match(Uri data){  String host=data.getHost();  if (host == null) {    return NO_MATCH_DATA;  }  if (mWild) {    if (host.length() < mHost.length()) {      return NO_MATCH_DATA;    }    host=host.substring(host.length() - mHost.length());  }  if (host.compareToIgnoreCase(mHost) != 0) {    return NO_MATCH_DATA;  }  if (mPort >= 0) {    if (mPort != data.getPort()) {      return NO_MATCH_DATA;    }    return MATCH_CATEGORY_PORT;  }  return MATCH_CATEGORY_HOST;}  }
class C{  private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {  char c;  int i;  JSONObject jsonobject=null;  String string;  String tagName;  Object token;  token=x.nextToken();  if (token == BANG) {    c=x.next();    if (c == '-') {      if (x.next() == '-') {        x.skipPast("-->");        return false;      }      x.back();    } else     if (c == '[') {      token=x.nextToken();      if ("CDATA".equals(token)) {        if (x.next() == '[') {          string=x.nextCDATA();          if (string.length() > 0) {            context.accumulate("content",string);          }          return false;        }      }      throw x.syntaxError("Expected 'CDATA['");    }    i=1;    do {      token=x.nextMeta();      if (token == null) {        throw x.syntaxError("Missing '>' after '<!'.");      } else       if (token == LT) {        i+=1;      } else       if (token == GT) {        i-=1;      }    } while (i > 0);    return false;  } else   if (token == QUEST) {    x.skipPast("?>");    return false;  } else   if (token == SLASH) {    token=x.nextToken();    if (name == null) {      throw x.syntaxError("Mismatched close tag " + token);    }    if (!token.equals(name)) {      throw x.syntaxError("Mismatched " + name + " and "+ token);    }    if (x.nextToken() != GT) {      throw x.syntaxError("Misshaped close tag");    }    return true;  } else   if (token instanceof Character) {    throw x.syntaxError("Misshaped tag");  } else {    tagName=(String)token;    token=null;    jsonobject=new JSONObject();    for (; ; ) {      if (token == null) {        token=x.nextToken();      }      if (token instanceof String) {        string=(String)token;        token=x.nextToken();        if (token == EQ) {          token=x.nextToken();          if (!(token instanceof String)) {            throw x.syntaxError("Missing value");          }          jsonobject.accumulate(string,XML.stringToValue((String)token));          token=null;        } else {          jsonobject.accumulate(string,"");        }      } else       if (token == SLASH) {        if (x.nextToken() != GT) {          throw x.syntaxError("Misshaped tag");        }        if (jsonobject.length() > 0) {          context.accumulate(tagName,jsonobject);        } else {          context.accumulate(tagName,"");        }        return false;      } else       if (token == GT) {        for (; ; ) {          token=x.nextContent();          if (token == null) {            if (tagName != null) {              throw x.syntaxError("Unclosed tag " + tagName);            }            return false;          } else           if (token instanceof String) {            string=(String)token;            if (string.length() > 0) {              jsonobject.accumulate("content",XML.stringToValue(string));            }          } else           if (token == LT) {            if (parse(x,jsonobject,tagName)) {              if (jsonobject.length() == 0) {                context.accumulate(tagName,"");              } else               if (jsonobject.length() == 1 && jsonobject.opt("content") != null) {                context.accumulate(tagName,jsonobject.opt("content"));              } else {                context.accumulate(tagName,jsonobject);              }              return false;            }          }        }      } else {        throw x.syntaxError("Misshaped tag");      }    }  }}  }
class C{  public static Filter createFilterForObjectClassAndFilter(final String objectClass,final Filter filter){  String[] objectClasses=processObjectClasses(objectClass);  return createFilterForObjectClassAndFilter(objectClasses,filter);}  }
class C{  public static <T>T[] reallocateBuffer(Class<T> klass,T[] oldBuffer,int oldCapacity,int newCapacity){  assert (newCapacity > oldCapacity);  @SuppressWarnings("unchecked") T[] newBuffer=(T[])ArrayReflection.newInstance(klass,newCapacity);  if (oldBuffer != null) {    System.arraycopy(oldBuffer,0,newBuffer,0,oldCapacity);  }  for (int i=oldCapacity; i < newCapacity; i++) {    try {      newBuffer[i]=ClassReflection.newInstance(klass);    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  return newBuffer;}  }
class C{  protected void sequence_Parameters(ISerializationContext context,Parameters semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void onOpenClicked(@NotNull Notification notification){  notification.setState(READ);  Notification.OpenNotificationHandler openHandler=notification.getOpenHandler();  if (openHandler != null) {    openHandler.onOpenClicked();  } else {    dialogFactory.createMessageDialog(notification.getType().toString(),DATA_FORMAT.format(notification.getTime()) + " " + notification.getMessage(),null).show();  }}  }
class C{  public E sample(){  return sample(new Random());}  }
class C{  public CertificateRequest(HandshakeIODataStream in,int length) throws IOException {  int size=in.readUint8();  certificate_types=new byte[size];  Streams.readFully(in,certificate_types);  size=in.readUint16();  int totalPrincipalsLength=0;  int principalLength=0;  ArrayList<X500Principal> principals=new ArrayList<X500Principal>();  while (totalPrincipalsLength < size) {    principalLength=in.readUint16();    principals.add(new X500Principal(in));    totalPrincipalsLength+=2;    totalPrincipalsLength+=principalLength;  }  certificate_authorities=principals.toArray(new X500Principal[principals.size()]);  this.length=3 + certificate_types.length + totalPrincipalsLength;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateRequest");  }}  }
class C{  @Override public Trie optimize(Trie orig){  List<CharSequence> cmds=orig.cmds;  List<Row> rows=new ArrayList<>();  List<Row> orows=orig.rows;  int remap[]=new int[orows.size()];  Arrays.fill(remap,1);  for (int j=orows.size() - 1; j >= 0; j--) {    if (eat(orows.get(j),remap)) {      remap[j]=0;    }  }  Arrays.fill(remap,-1);  rows=removeGaps(orig.root,orows,new ArrayList<Row>(),remap);  return new Trie(orig.forward,remap[orig.root],cmds,rows);}  }
class C{  public void enableMotor(boolean flag){  m_bodyA.setAwake(true);  m_bodyB.setAwake(true);  m_enableMotor=flag;}  }
class C{  public Pkcs11SignatureToken(String pkcs11Path,char[] password,int slotIndex){  this(pkcs11Path,password);  this.slotIndex=slotIndex;}  }
class C{  private void updateLineHeaderList(Editable editable,int start,int before,int after){  int position=EditUtils.findNextNewLineCharCompat(editable,start);  int nested=calculateNested(editable,start,0);  if (nested == -1) {    return;  }  if (isOrderList(editable,start,false)) {    int number=calculateOrderListNumber(editable,start,0);    editable.setSpan(new MDOrderListSpan(10,nested,number),start,position,Spanned.SPAN_INCLUSIVE_INCLUSIVE);  } else   if (isUnOrderList(editable,start,false)) {    editable.setSpan(new MDUnOrderListSpan(10,mRxMDConfiguration.getUnOrderListColor(),nested),start,position,Spanned.SPAN_INCLUSIVE_INCLUSIVE);  }}  }
class C{  public String crossValidateTipText(){  return "Whether hold-one-out cross-validation will be used to " + "select the best k value between 1 and the value specified as " + "the KNN parameter.";}  }
class C{  @Dev public IncrementQuestAction(final String questname,@Dev(defaultValue="1") final int index,final int increment){  this.questname=questname;  this.index=index;  this.increment=increment;}  }
class C{  public void addResponseCodeListener(ActionListener<NetworkEvent> a){  if (responseCodeListeners == null) {    responseCodeListeners=new EventDispatcher();    responseCodeListeners.setBlocking(false);  }  responseCodeListeners.addListener(a);}  }
class C{  protected static String mangle(String name){  if (JAVA_KEYWORDS.contains(name)) {    return ('_' + name);  } else {    return (name);  }}  }
class C{  public static LT lt(final BackendKey key){  return new LT(key);}  }
class C{  protected void merge(Object in1,Object in2,Object out){  FlowSet inSet1=(FlowSet)in1, inSet2=(FlowSet)in2;  FlowSet outSet=(FlowSet)out;  inSet1.intersection(inSet2,outSet);}  }
class C{  public MenuInflater(Context context){  mContext=context;  mRealOwner=context;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  public CRemoteFileBrowserLoader(final JFrame parent,final IDebugger debugger){  m_parent=Preconditions.checkNotNull(parent,"IE01498: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01499: Debugger argument can not be null");  m_debugger.addListener(m_listener);}  }
class C{  @Override public void camera(float eyeX,float eyeY,float eyeZ,float centerX,float centerY,float centerZ,float upX,float upY,float upZ){  float z0=eyeX - centerX;  float z1=eyeY - centerY;  float z2=eyeZ - centerZ;  eyeDist=PApplet.sqrt(z0 * z0 + z1 * z1 + z2 * z2);  if (nonZero(eyeDist)) {    z0/=eyeDist;    z1/=eyeDist;    z2/=eyeDist;  }  float y0=upX;  float y1=upY;  float y2=upZ;  float x0=y1 * z2 - y2 * z1;  float x1=-y0 * z2 + y2 * z0;  float x2=y0 * z1 - y1 * z0;  y0=z1 * x2 - z2 * x1;  y1=-z0 * x2 + z2 * x0;  y2=z0 * x1 - z1 * x0;  float xmag=PApplet.sqrt(x0 * x0 + x1 * x1 + x2 * x2);  if (nonZero(xmag)) {    x0/=xmag;    x1/=xmag;    x2/=xmag;  }  float ymag=PApplet.sqrt(y0 * y0 + y1 * y1 + y2 * y2);  if (nonZero(ymag)) {    y0/=ymag;    y1/=ymag;    y2/=ymag;  }  modelview.set(x0,x1,x2,0,y0,y1,y2,0,z0,z1,z2,0,0,0,0,1);  float tx=-eyeX;  float ty=-eyeY;  float tz=-eyeZ;  modelview.translate(tx,ty,tz);  modelviewInv.set(modelview);  modelviewInv.invert();  camera.set(modelview);  cameraInv.set(modelviewInv);  updateProjmodelview();}  }
class C{  public static boolean containsEnvVariables(String source){  return (source.indexOf("${") >= 0);}  }
class C{  public static LinearScaling fromMinMax(double min,double max){  double zoom=1.0 / (max - min);  return new LinearScaling(zoom,-min * zoom);}  }
class C{  public void sendToAllAround(AbstractPacket message,NetworkRegistry.TargetPoint point){  this.channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.ALLAROUNDPOINT);  this.channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(point);  this.channels.get(Side.SERVER).writeAndFlush(message);}  }
class C{  private void truncateUncommittedEntries(){  if (type() == CopycatServer.State.PASSIVE) {    context.getLog().truncate(Math.min(context.getCommitIndex(),context.getLog().lastIndex()));  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"sbb");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a sbb instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  if (sourceResult.getSize() != targetResult.getSize()) {    throw new InternalTranslationException("Error: The operands of SBB instructions must have equal size");  }  final OperandSize size=sourceResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String carryMask=String.valueOf(Helpers.getCarryMask(size));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String shiftCarry=String.valueOf(-size.getBitSize());  final OperandSize resultSize=TranslationHelpers.getNextSize(size);  final String msb1=environment.getNextVariableString();  final String msb2=environment.getNextVariableString();  final String subResult=environment.getNextVariableString();  final String subResultTemp=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String msbSameBefore=environment.getNextVariableString();  final String msbChanged=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempCf=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,sourceRegister,size,msbMask,size,msb1));  instructions.add(ReilHelpers.createAnd(offset + 1,size,targetRegister,size,msbMask,size,msb2));  instructions.add(ReilHelpers.createSub(offset + 2,size,sourceRegister,size,targetRegister,resultSize,subResultTemp));  instructions.add(ReilHelpers.createSub(offset + 3,resultSize,subResultTemp,OperandSize.BYTE,Helpers.CARRY_FLAG,resultSize,subResult));  instructions.add(ReilHelpers.createAnd(offset + 4,resultSize,subResult,resultSize,msbMask,size,msbResult));  instructions.add(ReilHelpers.createBsh(offset + 5,size,msbResult,size,shiftValue,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createXor(offset + 6,size,msb1,size,msb2,size,msbSameBefore));  instructions.add(ReilHelpers.createXor(offset + 7,size,msb1,size,msbResult,size,msbChanged));  instructions.add(ReilHelpers.createAnd(offset + 8,size,msbSameBefore,size,msbChanged,size,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 9,size,tempOf,size,shiftValue,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 10,resultSize,subResult,resultSize,carryMask,resultSize,tempCf));  instructions.add(ReilHelpers.createBsh(offset + 11,resultSize,tempCf,resultSize,shiftCarry,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 12,resultSize,subResult,resultSize,truncateMask,size,truncatedResult));  instructions.add(ReilHelpers.createBisz(offset + 13,size,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.writeBack(environment,offset + 14,targetOperand,truncatedResult,size,targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public static String decode(byte[] utf8,int start,int length,boolean replace) throws CharacterCodingException {  return decode(ByteBuffer.wrap(utf8,start,length),replace);}  }
class C{  public boolean isSynchronous(){  return this.isSynchronous;}  }
class C{  public static File toFile(Object obj,File defaultValue){  if (obj instanceof File)   return (File)obj;  String str=Caster.toString(obj,null);  if (str == null)   return defaultValue;  return FileUtil.toFile(str);}  }
class C{  private void addVendorConnectionDataAndCloseTag(){  addCommonConnectionAttributes();  endDataSourceTag();  addNestedDriverPropertyTags();  closeDataSourceTag();}  }
class C{  @Override public ClusterNodeSettings build(){  checkArgument(!isNullOrEmpty(super.clusterDns),"clusterDns is empty");  if (super.externalGossipPort == null) {    super.externalGossipPort=30778;  }  return super.build();}  }
class C{  public static int longestValidParentheses(String s){  if (s == null)   return 0;  Stack<Integer> stack=new Stack<Integer>();  int maxLen=0;  int len=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '(')     stack.push(i); else     if (s.isEmpty())     len=0; else {      int matchedPos=stack.pop();      int matchedLen=i - matchedPos + 1;      if (s.isEmpty()) {        len+=matchedLen;        matchedLen=len;      } else       matchedLen=i - stack.peek();      maxLen=Math.max(maxLen,matchedLen);    }  }  return maxLen;}  }
class C{  public AbOuterListView(Context context){  super(context);  mGestureDetector=new GestureDetector(new YScrollDetector());  setFadingEdgeLength(0);}  }
class C{  protected boolean analyzeTraces(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,List<ExecutionResult> results,Set<String> calledMethods){  boolean hasTimeoutOrTestException=false;  for (  ExecutionResult result : results) {    if (result.hasTimeout() || result.hasTestException()) {      hasTimeoutOrTestException=true;    }    for (    Statement stmt : result.test) {      if (!isValidPosition(result,stmt.getPosition()))       break;      if ((stmt instanceof MethodStatement || stmt instanceof ConstructorStatement)) {        EntityWithParametersStatement ps=(EntityWithParametersStatement)stmt;        String className=ps.getDeclaringClassName();        String methodDesc=ps.getDescriptor();        String methodName=ps.getMethodName() + methodDesc;        String fullName=className + "." + methodName;        if (!methods.contains(fullName) || removedMethods.contains(fullName))         continue;        if (methodCoverageMap.containsKey(fullName)) {          calledMethods.add(fullName);          result.test.addCoveredGoal(methodCoverageMap.get(fullName));          if (Properties.TEST_ARCHIVE) {            TestsArchive.instance.putTest(this,methodCoverageMap.get(fullName),result);            toRemoveMethods.add(fullName);            suite.isToBeUpdated(true);          }        }      }    }  }  return hasTimeoutOrTestException;}  }
class C{  public XTIFFDirectory createDirectory(){  return new XTIFFDirectory();}  }
class C{  public final int size(){  return m_index + 1;}  }
class C{  public void syncVdcCerts(VdcCertListParam vdcCertListParam,String VdcName){  WebResource rRoot=createRequest(VDCCONFIG_CERT_URI);  rRoot.accept(MediaType.APPLICATION_XML);  try {    addSignature(rRoot).post(vdcCertListParam);  } catch (  UnauthorizedException e) {    throw GeoException.fatals.remoteVdcAuthorizationFailed(VdcName,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    throw GeoException.fatals.connectVdcSyncCertFail(VdcName,e);  }}  }
class C{  private void addMacro(MacroHandler macroHandler,String name,String expression,boolean enforceNumberFormat,ExpressionParser parser) throws ExpressionException {  Expression exp=parser.parse(expression);  ExpressionType type=exp.getExpressionType();  if (type == ExpressionType.DATE) {    Date date=exp.evaluateDate();    if (date != null) {      macroHandler.addMacro(name,Tools.formatDateTime(date));    } else {      macroHandler.addMacro(name,null);    }  } else {    Object result=exp.evaluate();    if (result instanceof UnknownValue) {      macroHandler.addMacro(name,null);    } else     if (result instanceof Number && Double.isNaN(((Number)result).doubleValue())) {      macroHandler.addMacro(name,null);    } else {      try {        if (enforceNumberFormat) {          macroHandler.addMacro(name,Tools.formatIntegerIfPossible(Double.parseDouble(result.toString())));        } else         if (type == ExpressionType.INTEGER) {          double doubleValue=((Double)result).doubleValue();          int intValue=((Double)result).intValue();          macroHandler.addMacro(name,doubleValue == intValue ? Integer.toString(intValue) : result.toString());        } else {          macroHandler.addMacro(name,result.toString());        }      } catch (      NumberFormatException e) {        macroHandler.addMacro(name,result.toString());      }    }  }}  }
class C{  public DefaultCaret(){}  }
class C{  public DisplayEdge(DisplayNode node1,Point mouseTrackPoint,int type){  if (node1 == null) {    throw new NullPointerException("Node1 must not be null.");  }  if (mouseTrackPoint == null) {    throw new NullPointerException("Mouse track point must not " + "be null.");  }  if (type < 0 || type > 4) {    throw new IllegalArgumentException("Type must be one of " + "DIRECTED, NONDIRECTED, " + "UNDIRECTED, PARTIALLY_ORIENTED, "+ " or BIDIRECTED.");  }  this.node1=node1;  this.mouseTrackPoint=mouseTrackPoint;  this.type=type;  this.mode=HALF_ANCHORED;  resetBounds();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultHeatMapDataset clone=(DefaultHeatMapDataset)super.clone();  clone.zValues=DataUtilities.clone(this.zValues);  return clone;}  }
class C{  protected void sequence_BogusTypeRefFragment_ColonSepTypeRef_GetterHeader_PropertyGetterDeclaration(ISerializationContext context,PropertyGetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public ToggleGridAction(DrawingEditor editor){  super(editor);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,ID);  updateViewState();}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  googleMap.clear();  UiSettings settings=googleMap.getUiSettings();  if (locationManager != null) {    settings.setMyLocationButtonEnabled(this.myLocationButton);    googleMap.setMyLocationEnabled(this.showsUserLocation);  }  settings.setScrollGesturesEnabled(this.scrollGestures);  settings.setZoomGesturesEnabled(this.zoomGestures);  settings.setTiltGesturesEnabled(this.tiltGestures);  settings.setRotateGesturesEnabled(this.rotateGestures);  settings.setCompassEnabled(this.compassButton);  if (cameraUpdate != null) {    googleMap.moveCamera(cameraUpdate);  }  addMapMarkers(googleMap);  googleMap.setOnMarkerClickListener(this);  if (firstMapReady) {    googleMap.setOnCameraChangeListener(this);    googleMap.setOnMapClickListener(this);    googleMap.setOnMapLongClickListener(this);    googleMap.setOnMarkerDragListener(this);    googleMap.setOnMyLocationButtonClickListener(this);    firstMapReady=false;  }}  }
class C{  public ActorRef actorOf(Props props,String path){  String dispatcherId=props.getDispatcher() == null ? DEFAULT_DISPATCHER : props.getDispatcher();  ActorDispatcher mailboxesDispatcher;synchronized (dispatchers) {    if (!dispatchers.containsKey(dispatcherId)) {      throw new RuntimeException("Unknown dispatcherId '" + dispatcherId + "'");    }    mailboxesDispatcher=dispatchers.get(dispatcherId);  }  return mailboxesDispatcher.referenceActor(path,props);}  }
class C{  public static NbtOutputStream writeCompressed(NbtTag tag,File file) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new GZIPOutputStream(new FileOutputStream(file,false)));  out.write(tag);  return out;}  }
class C{  private static void skipNotSendingRequest() throws Exception {  LOG.info("TEST 9: skipNotSendingRequest - STARTED");  String id="0987654321";  queue.markAsRemoved(id);  SendingCtx sendingCtx=queue.startSending();  if (sendingCtx != null) {    throw new IntegrationTestFailedException("Should return empty sending ctx if no messages are in queue!");  }  QueueInfo expectedQueueInfo=new QueueInfo(AsyncDBTestUtil.getProvider(),new QueueState(0,0,new Date(),0,"1234567890",new Date(),LAST_SEND_RESULT_FAILURE));  validateQueueInfo(expectedQueueInfo);  if (!queue.getRequests().isEmpty()) {    throw new IntegrationTestFailedException("Queue should contain no requests at this point!");  }  validateAsyncLog();  SUCCESSFUL_STEPS.add("skipNotSendingRequest");  LOG.info("TEST 9: skipNotSendingRequest - FINISHED");}  }
class C{  public boolean emitToClassfile(){  return !type.isLocal() || isValidOffset;}  }
class C{  private PolicyEvaluator createPolicyEvaluator(AlertDefinitionAPIEntity alertDef){  String policyType=alertDef.getTags().get(AlertConstants.POLICY_TYPE);  Class<? extends PolicyEvaluator> evalCls=PolicyManager.getInstance().getPolicyEvaluator(policyType);  if (evalCls == null) {    String msg="No policy evaluator defined for policy type : " + policyType;    LOG.error(msg);    throw new IllegalStateException(msg);  }  String needValidationConfigKey=AlertConstants.ALERT_EXECUTOR_CONFIGS + "." + alertExecutorId+ ".needValidation";  boolean needValidation=!config.hasPath(needValidationConfigKey) || config.getBoolean(needValidationConfigKey);  AbstractPolicyDefinition policyDef=null;  try {    policyDef=JsonSerDeserUtils.deserialize(alertDef.getPolicyDef(),AbstractPolicyDefinition.class,PolicyManager.getInstance().getPolicyModules(policyType));  } catch (  Exception ex) {    LOG.error("Fail initial alert policy def: " + alertDef.getPolicyDef(),ex);  }  PolicyEvaluator pe;  try {    pe=evalCls.getConstructor(Config.class,String.class,AbstractPolicyDefinition.class,String[].class,boolean.class).newInstance(config,alertDef.getTags().get("policyId"),policyDef,sourceStreams,needValidation);  } catch (  Exception ex) {    LOG.error("Fail creating new policyEvaluator",ex);    LOG.warn("Broken policy definition and stop running : " + alertDef.getPolicyDef());    throw new IllegalStateException(ex);  }  return pe;}  }
class C{  public void test_mergeDown(){}  }
class C{  @Override public void run(int connId,String[] args){  if (!canRunRestrictedCommand(connId)) {    server.sendServerChat(connId,restrictedResponse);    return;  }  IPlayer player=server.getPlayer(connId);  if (server.getGame().isForceVictory()) {    server.sendServerChat(getAdmitsDefeat(player.getName()));    player.setAdmitsDefeat(true);  } else {    server.sendServerChat(getWantsDefeat(player.getName()));    server.sendServerChat(connId,note);  }}  }
class C{  static boolean isSpace(int ch){  return (ch >= '\u2000') || (ch <= '\u200a') || ch == '\u205f' || isLineBreak(ch);}  }
class C{  public static void reportBug(final Window parent){  try {    Desktop.getDesktop().browse(new URL("https://github.com/google/binnavi/issues").toURI());  } catch (  final Exception e) {    CUtilityFunctions.logException(e);    CMessageBox.showError(parent,"Could not open the bugtracker URL in the browser.");  }}  }
class C{  public void remove(E e){  if (objects.contains(e)) {    objects.remove(e);  }}  }
class C{  public T caseDerivedAttribute_(DerivedAttribute_ object){  return null;}  }
class C{  private void readLineAttributes(IXMLElement elem,HashMap<AttributeKey,Object> a) throws IOException {  Object objectValue;  String value;  double doubleValue;  objectValue=toPaint(elem,readInheritColorAttribute(elem,"fill","none"));  if (objectValue instanceof Color) {    FILL_COLOR.put(a,(Color)objectValue);  } else   if (objectValue instanceof Gradient) {    FILL_GRADIENT.putClone(a,(Gradient)objectValue);  } else   if (objectValue == null) {    FILL_COLOR.put(a,null);  } else {    FILL_COLOR.put(a,null);    if (DEBUG) {      System.out.println("SVGInputFormat not implemented  fill=" + objectValue);    }  }  objectValue=readInheritAttribute(elem,"fill-opacity","1");  FILL_OPACITY.put(a,toDouble(elem,(String)objectValue,1d,0d,1d));  value=readInheritAttribute(elem,"fill-rule","nonzero");  WINDING_RULE.put(a,SVG_FILL_RULES.get(value));  objectValue=toPaint(elem,readInheritColorAttribute(elem,"stroke","black"));  if (objectValue instanceof Color) {    STROKE_COLOR.put(a,(Color)objectValue);  } else   if (objectValue instanceof Gradient) {    STROKE_GRADIENT.putClone(a,(Gradient)objectValue);  } else   if (objectValue == null) {    STROKE_COLOR.put(a,null);  } else {    STROKE_COLOR.put(a,null);    if (DEBUG) {      System.out.println("SVGInputFormat not implemented  stroke=" + objectValue);    }  }  value=readInheritAttribute(elem,"stroke-dasharray","none");  if (!value.equals("none")) {    String[] values=toWSOrCommaSeparatedArray(value);    double[] dashes=new double[values.length];    for (int i=0; i < values.length; i++) {      dashes[i]=toNumber(elem,values[i]);    }    STROKE_DASHES.put(a,dashes);  }  doubleValue=toNumber(elem,readInheritAttribute(elem,"stroke-dashoffset","0"));  STROKE_DASH_PHASE.put(a,doubleValue);  IS_STROKE_DASH_FACTOR.put(a,false);  value=readInheritAttribute(elem,"stroke-linecap","butt");  STROKE_CAP.put(a,SVG_STROKE_LINECAPS.get(value));  value=readInheritAttribute(elem,"stroke-linejoin","miter");  STROKE_JOIN.put(a,SVG_STROKE_LINEJOINS.get(value));  doubleValue=toDouble(elem,readInheritAttribute(elem,"stroke-miterlimit","4"),4d,1d,Double.MAX_VALUE);  STROKE_MITER_LIMIT.put(a,doubleValue);  IS_STROKE_MITER_LIMIT_FACTOR.put(a,false);  objectValue=readInheritAttribute(elem,"stroke-opacity","1");  STROKE_OPACITY.put(a,toDouble(elem,(String)objectValue,1d,0d,1d));  doubleValue=toNumber(elem,readInheritAttribute(elem,"stroke-width","1"));  STROKE_WIDTH.put(a,doubleValue);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (!((EventConstraints)m_listenee).eventGeneratable("batchClassifier")) {      return false;    }  }  return true;}  }
class C{  public Binh(){  super(2,2);}  }
class C{  public static long toLongPow10(double d,int n){  long bits=Double.doubleToLongBits(d);  boolean isNegative=(bits >> 63) != 0;  int exp=((int)(bits >> 52)) & 0x7FF;  long m=bits & 0x000fffffffffffffL;  if (exp == 0x7FF)   throw new ArithmeticException("Cannot convert to long (Infinity or NaN)");  if (exp == 0) {    if (m == 0)     return 0L;    return toLongPow10(d * 1E16,n - 16);  }  m|=0x0010000000000000L;  int pow2=exp - 1023 - 52;  if (n >= 0) {    long x0=0;    long x1=0;    long x2=m & MASK_32;    long x3=m >>> 32;    while (n != 0) {      int i=(n >= POW5_INT.length) ? POW5_INT.length - 1 : n;      int coef=POW5_INT[i];      if (((int)x0) != 0)       x0*=coef;      if (((int)x1) != 0)       x1*=coef;      x2*=coef;      x3*=coef;      x1+=x0 >>> 32;      x0&=MASK_32;      x2+=x1 >>> 32;      x1&=MASK_32;      x3+=x2 >>> 32;      x2&=MASK_32;      pow2+=i;      n-=i;      long carry=x3 >>> 32;      if (carry != 0) {        x0=x1;        x1=x2;        x2=x3 & MASK_32;        x3=carry;        pow2+=32;      }    }    int shift=31 - MathLib.bitLength(x3);    pow2-=shift;    m=(shift < 0) ? (x3 << 31) | (x2 >>> 1) : (((x3 << 32) | x2) << shift) | (x1 >>> (32 - shift));  } else {    long x1=m;    long x0=0;    while (true) {      int shift=63 - MathLib.bitLength(x1);      x1<<=shift;      x1|=x0 >>> (63 - shift);      x0=(x0 << shift) & MASK_63;      pow2-=shift;      if (n == 0)       break;      int i=(-n >= POW5_INT.length) ? POW5_INT.length - 1 : -n;      int divisor=POW5_INT[i];      long wh=(x1 >>> 32);      long qh=wh / divisor;      long r=wh - qh * divisor;      long wl=(r << 32) | (x1 & MASK_32);      long ql=wl / divisor;      r=wl - ql * divisor;      x1=(qh << 32) | ql;      wh=(r << 31) | (x0 >>> 32);      qh=wh / divisor;      r=wh - qh * divisor;      wl=(r << 32) | (x0 & MASK_32);      ql=wl / divisor;      x0=(qh << 32) | ql;      n+=i;      pow2-=i;    }    m=x1;  }  if (pow2 > 0)   throw new ArithmeticException("Overflow");  if (pow2 < -63)   return 0;  m=(m >> -pow2) + ((m >> -(pow2 + 1)) & 1);  return isNegative ? -m : m;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public StringDict(int length){  count=0;  keys=new String[length];  values=new String[length];}  }
class C{  public static <B>Builder<B> builder(){  return new Builder<B>();}  }
class C{  private void storeResourcePools(Collection<ResourcePoolState> resourcePools){  for (  ResourcePoolState rp : resourcePools) {    ResourcePoolData rpData=new ResourcePoolData();    rpData.resourcePoolState=rp;    rpData.computeStateLinks=new HashSet<>();    this.result.resourcesPools.put(rp.documentSelfLink,rpData);  }}  }
class C{  public void receiveErrorqueryUniqueIdentifiersForFileSystems(java.lang.Exception e){}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public void test_ticket_1105_quads_update4() throws Exception {  new UpdateTestHelper("ticket_1105_quads_update4","ticket_1105_update4.rq","ticket_1105.trig");}  }
class C{  public static void nodesToPath(PathDataNode[] node,Path path){  float[] current=new float[4];  char previousCommand='m';  for (int i=0; i < node.length; i++) {    addCommand(path,current,previousCommand,node[i].mType,node[i].mParams);    previousCommand=node[i].mType;  }}  }
class C{  public SplittedExampleSet(ExampleSet exampleSet,Partition partition){  this.parent=(ExampleSet)exampleSet.clone();  this.partition=partition;}  }
class C{  public String toXML(boolean header){  return null;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (derivedFeatureID) {case TypesPackage.TENUM__AST_ELEMENT:      return TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static void createPermissionItem(CollectionDatasource<Permission,UUID> ds,Datasource<Role> roleDs,final String permissionTarget,PermissionType type,Integer value){  Permission permission=null;  for (  Permission p : ds.getItems()) {    if (ObjectUtils.equals(p.getTarget(),permissionTarget)) {      permission=p;      break;    }  }  if (permission == null) {    if (ds instanceof RestorablePermissionDatasource) {      RestorablePermissionDatasource datasource=(RestorablePermissionDatasource)ds;      permission=datasource.findRemovedEntity(null);      if (permission != null) {        datasource.restoreEntity(permission);      }    }  }  if (permission == null) {    Metadata metadata=AppBeans.get(Metadata.NAME);    Permission newPermission=metadata.create(Permission.class);    newPermission.setRole(roleDs.getItem());    newPermission.setTarget(permissionTarget);    newPermission.setType(type);    newPermission.setValue(value);    ds.addItem(newPermission);  } else {    permission.setValue(value);  }}  }
class C{  public void remove(){  throw new UnsupportedOperationException("This is a read only iterator.");}  }
class C{  public void addMoney(Money money){  getMoney().add(money);}  }
class C{  public void testHasProperty(){  UnboundBean instance=new UnboundBeanImpl();  assertTrue(instance.hasProperty(STRING_PROPERTY));  assertTrue(instance.hasProperty(INDEXED_PROPERTY));  assertFalse(instance.hasProperty(MAPPED_STRING));  assertFalse(instance.hasProperty(MAPPED_INDEXED));  assertFalse(instance.hasProperty(NOT_A_PROPERTY));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:05.062 -0400",hash_original_method="32C24B2CF557E0D0099C886AAC112577",hash_generated_method="009BD546487B1FA8F6E49F0554F2D42A") public DSAPrivateKeyImpl(PKCS8EncodedKeySpec keySpec) throws InvalidKeySpecException {  super("DSA");  AlgorithmIdentifier ai;  ThreeIntegerSequence threeInts=null;  String alg, algName;  byte[] encoding=keySpec.getEncoded();  PrivateKeyInfo privateKeyInfo=null;  try {    privateKeyInfo=(PrivateKeyInfo)PrivateKeyInfo.ASN1.decode(encoding);  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode keySpec encoding: " + e);  }  try {    x=new BigInteger((byte[])ASN1Integer.getInstance().decode(privateKeyInfo.getPrivateKey()));  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  ai=privateKeyInfo.getAlgorithmIdentifier();  try {    threeInts=(ThreeIntegerSequence)ThreeIntegerSequence.ASN1.decode(ai.getParameters());  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  p=new BigInteger(threeInts.p);  q=new BigInteger(threeInts.q);  g=new BigInteger(threeInts.g);  params=new DSAParameterSpec(p,q,g);  setEncoding(encoding);  alg=ai.getAlgorithm();  algName=AlgNameMapper.map2AlgName(alg);  setAlgorithm(algName == null ? alg : algName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.922 -0500",hash_original_method="9846573335398B4F61F3531E4C57F2B5",hash_generated_method="80D0985321ECA2E6F1ECECF536BFEBFB") public static String canonicalizePath(String path,boolean discardRelativePrefix){  return path;}  }
class C{  public boolean containsKey(K key){  return map.containsKey(key);}  }
class C{  private void onBluetoothPeerFound(Context context,Intent intent){  log.debug("Peer found broadcast received.");}  }
class C{  private void showTopDividerWithProgressBar(){  mProgressBar.setVisibility(View.VISIBLE);  mTopDividerNoProgress.setVisibility(View.GONE);  mBottomPadding.setVisibility(View.GONE);}  }
class C{  public void store16(int addr,int value){  store8(addr,value >> 8);  store8(addr + 1,value);}  }
class C{  @Override public Class<CumulativeTimeBucket> handledType(){  return CumulativeTimeBucket.class;}  }
class C{  protected QuantifierImpl(){  super();}  }
class C{  public void fillWithLoot(@Nullable EntityPlayer player){  final World world=worldContainer.getContainedWorld();  if (lootTableLocation != null && !world.isRemote) {    final LootTable lootTable=world.getLootTableManager().getLootTableFromLocation(lootTableLocation);    lootTableLocation=null;    final Random random=lootTableSeed == 0 ? new Random() : new Random(lootTableSeed);    final LootContext.Builder builder=new LootContext.Builder((WorldServer)world);    if (player != null) {      builder.withLuck(player.getLuck());    }    InventoryUtils.fillItemHandlerWithLoot(this,lootTable,random,builder.build());  }}  }
class C{  public static <F>boolean replace(AtomicReferenceFieldUpdater<F,Subscription> field,F instance,Subscription s){  for (; ; ) {    Subscription a=field.get(instance);    if (a == CancelledSubscription.INSTANCE) {      s.cancel();      return false;    }    if (field.compareAndSet(instance,a,s)) {      return true;    }  }}  }
class C{  public Uri remapUri(Uri uri){  return null;}  }
class C{  public static JMenu leftShift(JMenu self,Component component){  self.add(component);  return self;}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mScroller.startScroll(startX,startY,dx,dy,duration);}  }
class C{  public Vec3D closestPointOnSurface(Vec3D p){  Vec3D ab=b.sub(a);  Vec3D ac=c.sub(a);  Vec3D bc=c.sub(b);  ReadonlyVec3D pa=p.sub(a);  ReadonlyVec3D pb=p.sub(b);  ReadonlyVec3D pc=p.sub(c);  Vec3D ap=a.sub(p);  Vec3D bp=b.sub(p);  Vec3D cp=c.sub(p);  float snom=pa.dot(ab);  float tnom=pa.dot(ac);  if (snom <= 0.0f && tnom <= 0.0f) {    return a;  }  float sdenom=pb.dot(a.sub(b));  float tdenom=pc.dot(a.sub(c));  float unom=pb.dot(bc);  float udenom=pc.dot(b.sub(c));  if (sdenom <= 0.0f && unom <= 0.0f) {    return b;  }  if (tdenom <= 0.0f && udenom <= 0.0f) {    return c;  }  ReadonlyVec3D n=ab.cross(ac);  float vc=n.dot(ap.crossSelf(bp));  if (vc <= 0.0f && snom >= 0.0f && sdenom >= 0.0f) {    return a.add(ab.scaleSelf(snom / (snom + sdenom)));  }  float va=n.dot(bp.crossSelf(cp));  if (va <= 0.0f && unom >= 0.0f && udenom >= 0.0f) {    return b.add(bc.scaleSelf(unom / (unom + udenom)));  }  float vb=n.dot(cp.crossSelf(ap));  if (vb <= 0.0f && tnom >= 0.0f && tdenom >= 0.0f) {    return a.add(ac.scaleSelf(tnom / (tnom + tdenom)));  }  float u=va / (va + vb + vc);  float v=vb / (va + vb + vc);  float w=1.0f - u - v;  return a.scale(u).addSelf(b.scale(v)).addSelf(c.scale(w));}  }
class C{  public static void showToast(final Context context,final int resId){  showToast(context,resId,false);}  }
class C{  void updateViewPropertiesToCardTransform(OverviewCardTransform toTransform,int duration){  updateViewPropertiesToCardTransform(toTransform,duration,null);}  }
class C{  public void clear(){  q.clear();}  }
class C{  static final public String hex(int what,int digits){  String stuff=Integer.toHexString(what).toUpperCase();  if (digits > 8) {    digits=8;  }  int length=stuff.length();  if (length > digits) {    return stuff.substring(length - digits);  } else   if (length < digits) {    return "00000000".substring(8 - (digits - length)) + stuff;  }  return stuff;}  }
class C{  public String toString(){  return m_html.toString();}  }
class C{  private boolean hasOtherMapAndReduceParentNode(Lop tmpNode,ArrayList<Lop> nodeList,Lop node){  if (tmpNode.getExecLocation() == ExecLocation.MapAndReduce)   return true;  for (  Lop n : tmpNode.getOutputs()) {    if (nodeList.contains(n) && isChild(n,node,IDMap)) {      if (!n.equals(node) && n.getExecLocation() == ExecLocation.MapAndReduce)       return true; else       return hasOtherMapAndReduceParentNode(n,nodeList,node);    }  }  return false;}  }
class C{  @Override public void close() throws IOException {  if (!mSeenEof) {    mThread.interrupt();    try {      mThread.join();    } catch (    final InterruptedException e) {      throw new IOException("AsynchInputStream interrupted during close");    } finally {      super.close();    }  }  checkException();}  }
class C{  public static float stringToLon(String text_lon){  int hemisphere=1;  String s_seconds;  char[] contents=text_lon.toCharArray();  String s_degrees=String.valueOf(contents,0,3);  String s_minutes=String.valueOf(contents,3,2);  if (text_lon.charAt(7) == '.') {    s_seconds=String.valueOf(contents,5,4);    if (text_lon.charAt(9) == 'W')     hemisphere=-1;  } else {    s_seconds=String.valueOf(contents,5,2);    if (text_lon.charAt(7) == 'W')     hemisphere=-1;  }  float result=Float.valueOf(s_degrees).floatValue() + (Float.valueOf(s_minutes).floatValue() / 60.0F) + (Float.valueOf(s_seconds).floatValue() / 3600.0F);  result*=hemisphere;  return result;}  }
class C{  public GroovyBugError(String message){  this(message,null);}  }
class C{  public static String readFile(File file) throws IOException {  return FileUtil.readURL(FileUtil.fileToURL(file));}  }
class C{  public Coordinate project(Coordinate p){  if (p.equals(p0) || p.equals(p1))   return new Coordinate(p);  double r=projectionFactor(p);  Coordinate coord=new Coordinate();  coord.x=p0.x + r * (p1.x - p0.x);  coord.y=p0.y + r * (p1.y - p0.y);  return coord;}  }
class C{  public Doctype addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @RequestMapping(value={ApiUrl.COMPLAINT_UPLOAD_SUPPORT_DOCUMENT},method=RequestMethod.POST) public ResponseEntity<String> uploadSupportDocs(@PathVariable final String complaintNo,@RequestParam("files") final MultipartFile file){  try {    final Complaint complaint=complaintService.getComplaintByCRN(complaintNo);    final FileStoreMapper uploadFile=fileStoreService.store(file.getInputStream(),file.getOriginalFilename(),file.getContentType(),PGRConstants.MODULE_NAME);    complaint.getSupportDocs().add(uploadFile);    complaintService.update(complaint,null,null);    return getResponseHandler().success("",getMessage("msg.complaint.update.success"));  } catch (  final Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return getResponseHandler().error(getMessage("server.error"));  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public BlockVirtualPoolRestRep createBlockVirtualPool(BlockVirtualPoolParam param) throws DatabaseException {  ArgValidator.checkFieldNotEmpty(param.getName(),VPOOL_NAME);  checkForDuplicateName(param.getName(),VirtualPool.class);  ArgValidator.checkFieldNotEmpty(param.getDescription(),VPOOL_DESCRIPTION);  VirtualPoolUtil.validateBlockVirtualPoolCreateParams(param,_dbClient);  Map<URI,VpoolRemoteCopyProtectionSettings> remoteSettingsMap=new HashMap<URI,VpoolRemoteCopyProtectionSettings>();  List<VpoolProtectionVarraySettings> protectionSettings=new ArrayList<VpoolProtectionVarraySettings>();  Map<URI,VpoolProtectionVarraySettings> protectionSettingsMap=new HashMap<URI,VpoolProtectionVarraySettings>();  VirtualPool vpool=prepareVirtualPool(param,remoteSettingsMap,protectionSettingsMap,protectionSettings);  if (!protectionSettings.isEmpty()) {    _dbClient.createObject(protectionSettings);  }  if (!remoteSettingsMap.isEmpty()) {    _dbClient.createObject(new ArrayList(remoteSettingsMap.values()));  }  StringBuffer errorMessage=new StringBuffer();  ImplicitPoolMatcher.matchVirtualPoolWithAllStoragePools(vpool,_dbClient,_coordinator,errorMessage);  Set<URI> allSrdfTargetVPools=SRDFUtils.fetchSRDFTargetVirtualPools(_dbClient);  Set<URI> allRpTargetVPools=RPHelper.fetchRPTargetVirtualPools(_dbClient);  if (null != vpool.getMatchedStoragePools() || null != vpool.getInvalidMatchedPools()) {    ImplicitUnManagedObjectsMatcher.matchVirtualPoolsWithUnManagedVolumes(vpool,allSrdfTargetVPools,allRpTargetVPools,_dbClient,true);  }  _dbClient.createObject(vpool);  QosService.createQosSpecification(vpool,_dbClient);  recordOperation(OperationTypeEnum.CREATE_VPOOL,VPOOL_CREATED_DESCRIPTION,vpool);  return toBlockVirtualPool(_dbClient,vpool,VirtualPool.getProtectionSettings(vpool,_dbClient),VirtualPool.getRemoteProtectionSettings(vpool,_dbClient));}  }
class C{  public void stop() throws Exception {  if (server != null)   server.stop(); else   throw new IllegalStateException("Jetty server has not yet been started.");}  }
class C{  private XNetMessage loadChars() throws java.io.IOException {  int i;  byte char1;  char1=readByteProtected(inpipe);  int len=(char1 & 0x0f) + 2;  XNetMessage msg=new XNetMessage(len);  msg.setElement(0,char1 & 0xFF);  for (i=1; i < len; i++) {    char1=readByteProtected(inpipe);    msg.setElement(i,char1 & 0xFF);  }  return msg;}  }
class C{  public ResultVO validate(BaseParam param,User currentUser,Logger logger,OperationType operationType) throws Exception {  if (currentUser == null || currentUser.getId() == null) {    return resultHelper.infoResp(logger,ErrorType.SYS0003,ErrorType.SYS0003.description());  }  return validate(param,operationType);}  }
class C{  public DCPConnection connection(){  return connection;}  }
class C{  public static <I>Parser<I,Unit> eof(){  return null;}  }
class C{  private static double computeCorrelationSum(double[][] points,double r){  double sum=0.0;  int n=points.length;  for (int i=0; i <= n - 2; i++) {    for (int j=i + 1; j <= n - 1; j++) {      if ((r - distance(points[i],points[j])) >= 0) {        sum+=1.0;      }    }  }  return sum / (n * (n - 1) / 2.0);}  }
class C{  protected boolean isServiceDocument(ODataUri uri){  return uri != null && uri.relativeUri() instanceof ServiceRootUri;}  }
class C{  public void pointValuesToPixel(float[] pts){  mMatrixValueToPx.mapPoints(pts);  mViewPortHandler.getMatrixTouch().mapPoints(pts);  mMatrixOffset.mapPoints(pts);}  }
class C{  public NotificationGlobal global(){  return (NotificationGlobal)CENTER.get(GLOBAL);}  }
class C{  public synchronized StringBuffer replace(int start,int end,String string){  replace0(start,end,string);  return this;}  }
class C{  public ParsableBitArray(byte[] data,int limit){  this.data=data;  byteLimit=limit;}  }
class C{  public AnimationObject copy(){  AnimationObject o=new AnimationObject();  o.imageName=imageName;  o.res=res;  o.img=img;  o.frames=frames;  o.motionX=motionX;  o.motionY=motionY;  o.orientation=orientation;  o.width=width;  o.height=height;  o.opacity=opacity;  o.frameWidth=frameWidth;  o.frameHeight=frameHeight;  o.frameDelay=frameDelay;  o.framesInitialized=framesInitialized;  o.startTime=startTime;  o.endTime=endTime;  return o;}  }
class C{  public LinearScalingModel(double maxValue,int maxRepresentation){  this.maxValue=maxValue;  this.maxRepresentation=maxRepresentation;  calculateScale();}  }
class C{  @Override public void mouseReleased(MouseEvent e){  if (inBounds(e))   apply();  this.setBackground(bgPassive);  this.repaint();}  }
class C{  public Bundler putStringArray(String key,String[] value){  bundle.putStringArray(key,value);  return this;}  }
class C{  public static void checkInstancesStopped(AmazonEC2AsyncClient client,VerificationHost host,List<String> instanceIdsToStop,ArrayList<Boolean> stopFlags) throws Throwable {  AWSEnumerationAsyncHandler enumerationHandler=new AWSEnumerationAsyncHandler(host,AWSEnumerationAsyncHandler.MODE.CHECK_STOP,null,null,stopFlags,null,null);  DescribeInstancesRequest request=new DescribeInstancesRequest().withInstanceIds(instanceIdsToStop);  client.describeInstancesAsync(request,enumerationHandler);  host.waitFor("Waiting to get response from AWS ",null);}  }
class C{  private static boolean isAdHost(String host){  if (TextUtils.isEmpty(host)) {    return false;  }  int index=host.indexOf(".");  return index >= 0 && (AD_HOSTS.contains(host) || index + 1 < host.length() && isAdHost(host.substring(index + 1)));}  }
class C{  public boolean isAttribute(){  return label.isAttribute();}  }
class C{  public static void removeLogFilter(LogFilter filter){  if (filter == null || filters == null || filters.isEmpty()) {    return;  }  if (filters.contains(filter)) {    filters.remove(filter);  }}  }
class C{  public ToStringBuilder append(final long[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public SubstitutionModelDelegate(Tree tree,BranchModel branchModel,int partitionNumber){  this(tree,branchModel,partitionNumber,BUFFER_POOL_SIZE_DEFAULT);}  }
class C{  public MessageBuilder withChannel(String channelID){  this.channelID=channelID;  return this;}  }
class C{  private static void updateGrabbedCursor(Cursor cur){  XBaseWindow target=XAwtState.getGrabWindow();  if (target instanceof XWindowPeer) {    XWindowPeer grabber=(XWindowPeer)target;    grabber.pSetCursor(cur);  }}  }
class C{  private void destroyListener(){  if (onImageUpdateListener == null) {    return;  }  DataChangeListener.removeOnImageUpdateListener(onImageUpdateListener);  onImageUpdateListener=null;}  }
class C{  protected void runCommandForced(String... args) throws Exception {  runCommand(ObjectArrays.concat("--force",args));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SVGLocatableSupport(){}  }
class C{  Node(V key,Object value,Node<V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public static String byteArrayToHexString(byte[] bytes,int pos,int len){  StringBuilder sb=new StringBuilder(bytes.length * 2);  Formatter formatter=new Formatter(sb);  for (int i=pos; i < pos + len; ++i) {    formatter.format("%02x",bytes[i]);  }  return sb.toString();}  }
class C{  void bitcoinSerializeToStream(OutputStream stream) throws IOException {  stream.write(new VarInt(data.length).encode());  stream.write(data);  Utils.uint32ToByteStreamLE(hashFuncs,stream);  Utils.uint32ToByteStreamLE(nTweak,stream);  stream.write(nFlags);}  }
class C{  protected void processWindowEvent(WindowEvent e){  super.processWindowEvent(e);  if (e.getID() == WindowEvent.WINDOW_OPENED) {    if (m_displayType == DisplayType.Time)     fHour.requestFocus(); else     if (m_today != null)     m_today.requestFocus();  }}  }
class C{  public boolean estimateCarTime(String networkFilename,String linkstatsFilename,String plansFilename,String eventsFilename,String zoneShapefile,String zoneIdField,String hours,String outputFilename,boolean write){  log.info("Phase 1: Calculating actual travel times.");  MyZoneReader r=new MyZoneReader(zoneShapefile);  r.readZones(Integer.parseInt(zoneIdField));  zones=r.getZoneList();  Scenario s=ScenarioUtils.createScenario(ConfigUtils.createConfig());  MatsimNetworkReader nr=new MatsimNetworkReader(s.getNetwork());  nr.readFile(networkFilename);  PopulationReader mpr=new PopulationReader(s);  mpr.readFile(plansFilename);  MyPlansProcessor mpp=new MyPlansProcessor(s,zones);  mpp.processPlans();  DenseDoubleMatrix2D partialMatrix=mpp.getOdMatrix();  log.info("Phase 2: Calculating missing intra- and inter-zonal travel times.");  MyLinkStatsReader mlsr=new MyLinkStatsReader(linkstatsFilename);  Map<Id<Link>,Double> linkstats=mlsr.readSingleHour(hours);  MyZoneToZoneRouter mzzr=new MyZoneToZoneRouter(s,zones);  mapZoneIdToListEntry=mzzr.getZoneToMatrixMap();  mapListEntryToZoneId=mzzr.getMatrixToZoneMap();  mzzr.prepareTravelTimeData(eventsFilename);  boolean empties=mzzr.processZones(partialMatrix,linkstats);  if (empties) {    log.warn("OD Matrix contains empty values");  } else {    odMatrix=mzzr.getOdMatrix();  }  if (write) {    mzzr.writeOdMatrixToCsv(outputFilename,odMatrix);  }  return empties;}  }
class C{  public void addPreprocessorDirective(String directive){  if (mPreprocessorDirectives == null)   mPreprocessorDirectives=new ArrayList<String>();  mPreprocessorDirectives.add(directive);}  }
class C{  public List<Interceptor> interceptors(){  return interceptors;}  }
class C{  public void warn(Object message,Throwable exception){  log(Level.WARNING,String.valueOf(message),exception);}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> putAll(RangeMap<K,? extends V> rangeMap){  for (  Entry<Range<K>,? extends V> entry : rangeMap.asMapOfRanges().entrySet()) {    put(entry.getKey(),entry.getValue());  }  return this;}  }
class C{  @Override protected Void doInBackground(Runnable... params){  if (params != null) {    try {      for (int i=0; i < params.length; i++) {        params[i].run();      }    }  finally {      mHandler.removeCallbacks(mShowProgressDialogRunnable);    }  }  return null;}  }
class C{  public static int hash(String key){  long tableSize=2147483647;  long hashValue=0;  for (int i=0; i < key.length(); i++)   hashValue=(37 * hashValue) + (key.charAt(i) - 31);  hashValue%=tableSize;  if (hashValue < 0)   hashValue+=tableSize;  int retValue=(int)hashValue;  return retValue;}  }
class C{  public void append(StringBuffer buffer,String fieldName,long value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public PatternFitEditor(PatternFitModel comparison){  this.comparison=comparison;  setup();}  }
class C{  @RequestMapping(value="/topics",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Topic> createTopic(@Valid @RequestBody Topic topic) throws URISyntaxException {  log.debug("REST request to save Topic : {}",topic);  if (topic.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new topic cannot already have an ID").body(null);  }  Topic result=topicsService.createTopic(topic);  return ResponseEntity.created(new URI("/api/topics/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("topic",result.getId().toString())).body(result);}  }
class C{  public IntegratedParserConfigurationMMImpl(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  protected ObjectMatrix1D like1D(int size,int zero,int stride){  return new DenseObjectMatrix1D(size,this.elements,zero,stride);}  }
class C{  public static TokenSpec findCurrentTokenSpec(IRegion regionInput){  TLAEditor editor=EditorUtil.getTLAEditorWithFocus();  if (editor == null) {    return null;  }  String moduleName=editor.getModuleName();  ModuleNode moduleNode=ResourceHelper.getModuleNode(moduleName);  if (moduleNode == null) {    return null;  }  ISourceViewer internalSourceViewer=editor.publicGetSourceViewer();  IDocument document=internalSourceViewer.getDocument();  ITextSelection selection=(ITextSelection)editor.getSelectionProvider().getSelection();  IRegion region=regionInput;  if (regionInput == null) {    region=new Region(selection.getOffset(),selection.getLength());  }  String currentLine;  int currentPos;  int offsetOfLine;  try {    int lineNumber=document.getLineOfOffset(region.getOffset());    int lineDelimLength=0;    String delim=document.getLineDelimiter(lineNumber);    if (delim != null) {      lineDelimLength=delim.length();    }    ;    offsetOfLine=document.getLineOffset(lineNumber);    currentLine=document.get(offsetOfLine,document.getLineLength(lineNumber) - lineDelimLength);    currentPos=region.getOffset() - offsetOfLine;  } catch (  BadLocationException e) {    TLAEditorActivator.getDefault().logDebug("Exception thrown",e);    return null;  }  TokenSpec[] tokenSpecs=findTokenSpecs(currentLine,currentPos);  int goodIndex=-1;  SymbolNode symbol=null;  for (int i=0; i < tokenSpecs.length; i++) {    int leftPos=tokenSpecs[i].leftPos;    int rightPos=tokenSpecs[i].rightPos;    tokenSpecs[i].leftPos=leftPos + offsetOfLine;    tokenSpecs[i].rightPos=rightPos + offsetOfLine;    Location location=EditorUtil.getLocationAt(document,tokenSpecs[i].leftPos,rightPos - leftPos);    symbol=EditorUtil.lookupOriginalSymbol(UniqueString.uniqueStringOf(tokenSpecs[i].token),moduleNode,location,null);    if (symbol != null) {      goodIndex=i;      break;    }  }  if (goodIndex == -1) {    if (tokenSpecs.length == 0) {      return null;    } else {      goodIndex=0;    }  }  TokenSpec result=new TokenSpec(tokenSpecs[goodIndex].token,tokenSpecs[goodIndex].leftPos,tokenSpecs[goodIndex].rightPos);  result.resolvedSymbol=symbol;  return result;}  }
class C{  public double eval(double params[]){  return (-params[0]);}  }
class C{  public static String read(Context context,String filename){  try {    FileInputStream fis=context.openFileInput(filename);    StringBuilder builder=new StringBuilder();    int ch;    while ((ch=fis.read()) != -1) {      builder.append((char)ch);    }    return builder.toString();  } catch (  Exception e) {    Log.e(Functions.class.getSimpleName(),e.getMessage(),e);  }  return "";}  }
class C{  public static void stopMousePropagation(Element element){  element.addEventListener(Event.MOUSEDOWN,STOP_PROPAGATION_EVENT_LISTENER,false);  element.addEventListener(Event.MOUSEMOVE,STOP_PROPAGATION_EVENT_LISTENER,false);  element.addEventListener(Event.MOUSEUP,STOP_PROPAGATION_EVENT_LISTENER,false);  element.addEventListener(Event.CLICK,STOP_PROPAGATION_EVENT_LISTENER,false);  element.addEventListener(Event.DBLCLICK,STOP_PROPAGATION_EVENT_LISTENER,false);}  }
class C{  private void declareNamespace(String prefix,String uri,ObjArray declarations){  Set prefixes=(Set)uriToPrefix.get(uri);  if (prefixes == null) {    prefixes=new HashSet();    uriToPrefix.put(uri,prefixes);  }  if (!prefixes.contains(prefix)) {    String oldURI=(String)prefixToURI.get(prefix);    prefixes.add(prefix);    prefixToURI.put(prefix,uri);    if (declarations != null)     declarations.add(new Namespace(lib,prefix,uri));    if (oldURI != null) {      prefixes=(Set)uriToPrefix.get(oldURI);      prefixes.remove(prefix);    }  }}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  @Override public void create() throws IOException {  Files.createDirectories(_path.getParent());  if (Files.exists(_path)) {    throw new IOException(L.l("CREATE for path '{0}' failed, because the file already exists.  CREATE can not override an existing table.",_path));  }  init();}  }
class C{  @Override public void recordExecutionTime(String aspect,long timeInMs,double sampleRate){  send(messageFor(aspect,Long.toString(timeInMs),"ms",sampleRate));}  }
class C{  public static int footerLength(){  return 16;}  }
class C{  public OrderedSparseMultigraph(){  vertices=new LinkedHashMap<V,Pair<Set<E>>>();  edges=new LinkedHashMap<E,Pair<V>>();  directedEdges=new LinkedHashSet<E>();}  }
class C{  public void testDoChangeSessionDeliveryMode() throws Exception {  Destination destination=createDestination("foo.bar");  Connection connection=createConnection();  connection.start();  Session consumerSession=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageConsumer consumer1=consumerSession.createConsumer(destination);  consumer1.setMessageListener(this);  MessageConsumer consumer2=consumerSession.createConsumer(destination);  try {    consumer2.receive(10);    fail("Did not receive expected exception.");  } catch (  JMSException e) {    assertTrue(e instanceof IllegalStateException);  }}  }
class C{  public static CCParticleSystem particleWithFile(String plistFile){  return null;}  }
class C{  public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  private void readObject(){}  }
class C{  public boolean equals(Object object){  return object == null || object == this;}  }
class C{  private int parseInt() throws IOException {  int sign=1;  int ch=read();  if (ch == '-') {    sign=-1;    ch=read();  }  int value=0;  for (; ch >= '0' && ch <= '9'; ch=read())   value=10 * value + ch - '0';  _peek=ch;  return sign * value;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) @Path("/{id}/start") public TaskResourceRep startSnapshot(@PathParam("id") URI id) throws InternalException {  ArgValidator.checkFieldUriType(id,BlockSnapshot.class,"id");  BlockSnapshot snapshot=(BlockSnapshot)queryResource(id);  Volume volume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);  StorageSystem storage=_permissionsHelper.getObjectById(volume.getStorageController(),StorageSystem.class);  if (!snapshot.getIsSyncActive()) {    throw APIException.badRequests.cannotEstablishGroupRelationForInactiveSnapshot(snapshot.getLabel());  }  if (!volume.hasConsistencyGroup() || !snapshot.hasConsistencyGroup()) {    throw APIException.badRequests.blockObjectHasNoConsistencyGroup();  }  String taskId=UUID.randomUUID().toString();  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl("default");  auditOp(OperationTypeEnum.ESTABLISH_VOLUME_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,id.toString(),volume.getId().toString(),snapshot.getStorageController().toString());  return blockServiceApiImpl.establishVolumeAndSnapshotGroupRelation(storage,volume,snapshot,taskId);}  }
class C{  private FeatureStructure newChain(JCas aJCas,AnnotationFS aFirstLink){  Type chainType=getAnnotationType(aJCas.getCas());  FeatureStructure newChain=aJCas.getCas().createFS(chainType);  newChain.setFeatureValue(chainType.getFeatureByBaseName(chainFirstFeatureName),aFirstLink);  aJCas.addFsToIndexes(newChain);  return newChain;}  }
class C{  public SerializerRegistry register(Class<?> type,TypeSerializerFactory factory){  return register(type,calculateTypeId(type),factory);}  }
class C{  public void cancelCellEditing(){  fireEditingCanceled();}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public boolean isIconifiable(){  return iconable;}  }
class C{  public boolean next() throws IOException {  String line;  boolean result=(line=bf.readLine()) != null;  if (result) {    String[] cells=line.split(this.regex);    if (cells.length < this.headers.size()) {      if (this.ignoreTrailingBlanks) {        String newline=line;        for (int i=cells.length; i < this.headers.size(); i++)         newline+=this.regex;        cells=newline.split(this.regex,headers.size());      } else       throw new IndexOutOfBoundsException();    } else     if (cells.length > this.headers.size() && !this.truncatingTrailingData)     throw new IndexOutOfBoundsException();    this.cr=new HashMap<String,String>();    for (int i=0; i < headers.size(); i++)     this.cr.put(headers.get(i),cells[i]);  }  return result;}  }
class C{  public int indexOfComponent(Component component){  return contentPane.getComponentIndex(component);}  }
class C{  protected Clustering<?> runClusteringAlgorithm(ResultHierarchy hierarchy,Result parent,DBIDs ids,DataStore<DoubleVector> store,int dim,String title){  SimpleTypeInformation<DoubleVector> t=new VectorFieldTypeInformation<>(DoubleVector.FACTORY,dim);  Relation<DoubleVector> sample=new MaterializedRelation<>(t,ids,title,store);  ProxyDatabase d=new ProxyDatabase(ids,sample);  Clustering<?> clusterResult=samplesAlgorithm.run(d);  d.getHierarchy().remove(sample);  d.getHierarchy().remove(clusterResult);  hierarchy.add(parent,sample);  hierarchy.add(sample,clusterResult);  return clusterResult;}  }
class C{  public InlineQueryResultCachedVideo build(){  return new InlineQueryResultCachedVideo(id,video_file_id,title,caption,description,reply_markup,input_message_content);}  }
class C{  @Override @CanIgnoreReturnValue public int read(byte[] bytes,int off,int len) throws IOException {  int numOfBytesRead=in.read(bytes,off,len);  if (numOfBytesRead != -1) {    hasher.putBytes(bytes,off,numOfBytesRead);  }  return numOfBytesRead;}  }
class C{  @Override public int count(final byte[] termHash){  final Integer cachedCount=this.countCache.get(termHash);  if (cachedCount != null)   return cachedCount.intValue();  int countFile=0;  try {    countFile=this.array.count(termHash);  } catch (  final Throwable e) {    ConcurrentLog.logException(e);  }  assert countFile >= 0;  final ReferenceContainer<ReferenceType> countRam=this.ram.get(termHash,null);  assert countRam == null || countRam.size() >= 0;  int c=countRam == null ? countFile : countFile + countRam.size();synchronized (this.removeDelayedURLs) {    final HandleSet s=this.removeDelayedURLs.get(termHash);    if (s != null)     c-=s.size();    if (c < 0)     c=0;  }  if (MemoryControl.shortStatus())   this.countCache.clear();  this.countCache.insert(termHash,c);  return c;}  }
class C{  public PerfectHash(byte[] data){  this.data=data=expand(data);  plus=new int[data.length];  next=new int[data.length];  for (int i=0, p=0; i < data.length; i++) {    plus[i]=p;    int n=data[i] & 255;    p+=n < 2 ? n : n >= MAX_SPLIT ? (n / OFFSETS) : 0;  }}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  if (m_inCData) {    cdata(ch,start,length);    return;  }  String s=new String(ch,start,length);  Node childNode;  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {    ((Text)childNode).appendData(s);  } else {    Text text=m_doc.createTextNode(s);    append(text);  }}  }
class C{  public static boolean isValidDisambigRankFileStrict(String san){  if (san.length() == 5) {    return PIECES.indexOf(san.charAt(0)) != -1 && FILES.indexOf(san.charAt(1)) != -1 && RANKS.indexOf(san.charAt(2)) != -1 && FILES.indexOf(san.charAt(3)) != -1 && RANKS.indexOf(san.charAt(4)) != -1;  } else {    return false;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__DESCRIPTION:  return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__TYPE:return type != null;}return super.eIsSet(featureID);}  }
class C{  public void instanceOf(final Type type){  typeInsn(Opcodes.INSTANCEOF,type);}  }
class C{  public TObjectHash(int initialCapacity,TObjectHashingStrategy<T> strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  private PaxosResponse confirmLeader(PaxosAcceptor acceptor,long seq){  return new PaxosResponseImpl(seq >= acceptor.getLatestSequencePreparedOrAccepted());}  }
class C{  public void testHyphens() throws IOException {  Analyzer a=new IrishAnalyzer();  assertAnalyzesTo(a,"n-athair",new String[]{"athair"},new int[]{2});  a.close();}  }
class C{  public static double pareto(double alpha){  if (!(alpha > 0.0))   throw new IllegalArgumentException("Shape parameter alpha must be positive");  return Math.pow(1 - uniform(),-1.0 / alpha) - 1.0;}  }
class C{  public void loadServers(){  servers=Hermes.getInstance().getServersAsArrayList();  notifyDataSetChanged();}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=new long[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    long[][] newBuffers=new long[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  public void receiveIsComposingEvent(ContactId contact,boolean state){  for (  ImsSessionListener listener : mSession.getListeners()) {    ((ChatSessionListener)listener).onIsComposingEventReceived(contact,state);  }  stopExpirationTimer(contact);}  }
class C{  protected void bindViewHelper(BaseViewHolder viewHolder){  Context ctx=viewHolder.itemView.getContext();  viewHolder.itemView.setId(getIdentifier());  viewHolder.itemView.setSelected(isSelected());  viewHolder.itemView.setTag(this);  int selectedColor=getSelectedColor(ctx);  int color=getColor(ctx);  int selectedTextColor=getSelectedTextColor(ctx);  int iconColor=getIconColor(ctx);  int selectedIconColor=getSelectedIconColor(ctx);  UIUtils.setBackground(viewHolder.view,DrawerUIUtils.getSelectableBackground(ctx,selectedColor));  StringHolder.applyTo(this.getName(),viewHolder.name);  StringHolder.applyToOrHide(this.getDescription(),viewHolder.description);  viewHolder.name.setTextColor(getTextColorStateList(color,selectedTextColor));  ColorHolder.applyToOr(getDescriptionTextColor(),viewHolder.description,getTextColorStateList(color,selectedTextColor));  if (getTypeface() != null) {    viewHolder.name.setTypeface(getTypeface());    viewHolder.description.setTypeface(getTypeface());  }  Drawable icon=ImageHolder.decideIcon(getIcon(),ctx,iconColor,isIconTinted(),1);  Drawable selectedIcon=ImageHolder.decideIcon(getSelectedIcon(),ctx,selectedIconColor,isIconTinted(),1);  ImageHolder.applyMultiIconTo(icon,iconColor,selectedIcon,selectedIconColor,isIconTinted(),viewHolder.icon);  DrawerUIUtils.setDrawerVerticalPadding(viewHolder.view);}  }
class C{  public static void deactivateCert(String certId) throws Exception {  LOG.trace("Deactivating cert '{}'",certId);  execute(new ActivateCert(certId,false));}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  protected Constants(){}  }
class C{  public InputStage(InputStage next){  mNext=next;}  }
class C{  public final void testGetPrimeQ(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrimeQ()));}  }
class C{  protected ExifTag addTag(ExifTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  static GeoPath fromPath(final double[] pathLatitudes,final double[] pathLongitudes,final double pathWidthMeters){  if (pathLatitudes.length != pathLongitudes.length) {    throw new IllegalArgumentException("same number of latitudes and longitudes required");  }  final GeoPoint[] points=new GeoPoint[pathLatitudes.length];  for (int i=0; i < pathLatitudes.length; i++) {    final double latitude=pathLatitudes[i];    final double longitude=pathLongitudes[i];    GeoUtils.checkLatitude(latitude);    GeoUtils.checkLongitude(longitude);    points[i]=new GeoPoint(PlanetModel.WGS84,fromDegrees(latitude),fromDegrees(longitude));  }  return GeoPathFactory.makeGeoPath(PlanetModel.WGS84,fromMeters(pathWidthMeters),points);}  }
class C{  public String peek(){  int savedPosition=position;  boolean savedEmptyReturned=emptyReturned;  int savedtokenCount=tokenCount;  String retval=nextToken();  position=savedPosition;  emptyReturned=savedEmptyReturned;  tokenCount=savedtokenCount;  return (retval);}  }
class C{  public void resetExceptionDetail(){  JAMonBufferListener jaMonBufferListener=getExceptionBufferListener();  if (jaMonBufferListener == null) {    return;  }  jaMonBufferListener.getBufferList().reset();}  }
class C{  public int length(){  int m=maxLength >> ADDRESS_BITS;  while (m > 0 && data[m] == 0) {    m--;  }  maxLength=(m << ADDRESS_BITS) + (64 - Long.numberOfLeadingZeros(data[m]));  return maxLength;}  }
class C{  public static void show(Window owner,Joint joint){  EditJointDialog dialog=new EditJointDialog(owner,joint);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    dialog.pnlJoint.setJoint(joint);  }}  }
class C{  public static void main(String a[]){  RecursiveWarmup RecursiveWarmup=new RecursiveWarmup();  List<Integer> list1=new ArrayList<>();  list1.add(1);  list1.add(2);  list1.add(3);  list1.add(4);  List<Integer> list2=new ArrayList<>();  list2.add(1);  List<Integer> list3=new ArrayList<>();  System.out.println("========= String reverse test cases =========");  System.out.println(RecursiveWarmup.reverse("apple"));  System.out.println(RecursiveWarmup.reverse("a"));  System.out.println(RecursiveWarmup.reverse(""));  System.out.println("========= String reverse recursive test cases =========");  System.out.println(RecursiveWarmup.reverseRecursive("apple"));  System.out.println(RecursiveWarmup.reverseRecursive("a"));  System.out.println(RecursiveWarmup.reverseRecursive(""));  System.out.println("========== List reverse test cases ==========");  System.out.println(RecursiveWarmup.reverse(list1));  System.out.println(RecursiveWarmup.reverse(list2));  System.out.println(RecursiveWarmup.reverse(list3));  System.out.println("========== List reverse recursive test cases ==========");  System.out.println(RecursiveWarmup.reverseRecursive(list1));  System.out.println(RecursiveWarmup.reverseRecursive(list2));  System.out.println(RecursiveWarmup.reverseRecursive(list3));  System.exit(0);}  }
class C{  public static int nthIndex(String s,char ch,int n){  int index=0;  for (int i=0; i < n; i++) {    if (index == s.length() - 1) {      return -1;    }    index=s.indexOf(ch,index + 1);    if (index == -1) {      return (-1);    }  }  return index;}  }
class C{  public void removeAnnotation(int index){  mAnnotations.remove(index);  mStringXY.removeByIndex(index);}  }
class C{  public boolean isBeforeFirst() throws SQLException {  return fbFetcher.isBeforeFirst();}  }
class C{  TCPChannel(TCPTransport tr,TCPEndpoint ep){  this.tr=tr;  this.ep=ep;}  }
class C{  private MathHelper(){}  }
class C{  final public long unpackLong() throws IOException {  if (off + 1 > limit)   throw new EOFException();  int b=buf[off++];  int nbytes;  long l;  if ((b & 0x80) != 0) {    nbytes=8;    l=b & 0x7f;  } else {    nbytes=b >> 4;    l=b & 0x0f;  }  if (off + nbytes - 1 > limit)   throw new EOFException();  for (int i=1; i < nbytes; i++) {    b=buf[off++];    l=(l << 8) + (0xff & b);  }  return l;}  }
class C{  public void adapt(boolean increaseTimeout){  if (!enabled)   return;  if (increaseTimeout) {    if ((elmMsgTimeout + ELM_TIMEOUT_RES) < ELM_TIMEOUT_MAX) {      setElmMsgTimeout(elmMsgTimeout + ELM_TIMEOUT_RES);      setElmTimeoutLrnLow(elmMsgTimeout);    }  } else {    if ((elmMsgTimeout - ELM_TIMEOUT_RES) >= getElmTimeoutLrnLow()) {      setElmMsgTimeout(elmMsgTimeout - ELM_TIMEOUT_RES);    }  }}  }
class C{  private byte[] createBatch(long timestamp,int numberOfNonces,long seed,int numberOfMessages,int totalMessagesSize,boolean useSignatures,byte[][] messages,byte[][] signatures,ServerViewController controller){  int size=20 + (numberOfNonces > 0 ? 8 : 0) + (numberOfMessages * (4 + (useSignatures ? TOMUtil.getSignatureSize(controller) : 0)))+ totalMessagesSize;  ByteBuffer proposalBuffer=ByteBuffer.allocate(size);  proposalBuffer.putLong(timestamp);  proposalBuffer.putInt(numberOfNonces);  if (numberOfNonces > 0) {    proposalBuffer.putLong(seed);  }  proposalBuffer.putInt(numberOfMessages);  for (int i=0; i < numberOfMessages; i++) {    putMessage(proposalBuffer,messages[i],false,signatures[i]);  }  return proposalBuffer.array();}  }
class C{  private static boolean isPrintableChar(char c){  if (Character.isISOControl(c)) {    return false;  }  Character.UnicodeBlock block=Character.UnicodeBlock.of(c);  return block != null && block != Character.UnicodeBlock.SPECIALS;}  }
class C{  private Uri insertContentValues(Uri url,UrlType urlType,ContentValues contentValues){switch (urlType) {case TRACKPOINTS:    return insertTrackPoint(url,contentValues);case TRACKS:  return insertTrack(url,contentValues);case WAYPOINTS:return insertWaypoint(url,contentValues);default :throw new IllegalArgumentException("Unknown url " + url);}}  }
class C{  public CSelectNodesAction(final ZyGraph graph,final CTag tag){  super("Select Nodes");  m_graph=Preconditions.checkNotNull(graph,"IE02313: Graph argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE02314: Tag can't be null");}  }
class C{  public boolean isMaxXSet(){  return isMaxXSet(0);}  }
class C{  private void moveToContent(){  while (reader.getEventType() != XMLStreamConstants.CDATA && reader.getEventType() != XMLStreamConstants.START_ELEMENT && reader.getEventType() != XMLStreamConstants.END_ELEMENT && reader.getEventType() != XMLStreamConstants.ENTITY_REFERENCE && reader.getEventType() != XMLStreamConstants.CHARACTERS && reader.getEventType() != XMLStreamConstants.END_DOCUMENT)   try {    reader.next();  } catch (  XMLStreamException e) {    return;  }}  }
class C{  public byte[] calculateKeyedChecksum(byte[] data,int size,byte[] key,int usage) throws KrbCryptoException {  byte[] new_data=new byte[size + confounderSize()];  byte[] conf=Confounder.bytes(confounderSize());  System.arraycopy(conf,0,new_data,0,confounderSize());  System.arraycopy(data,0,new_data,confounderSize(),size);  try {    if (DESKeySpec.isWeak(key,0)) {      key[7]=(byte)(key[7] ^ 0xF0);    }  } catch (  InvalidKeyException ex) {  }  byte[] residue_ivec=new byte[key.length];  byte[] residue=Des.des_cksum(residue_ivec,new_data,key);  byte[] cksum=new byte[cksumSize()];  System.arraycopy(conf,0,cksum,0,confounderSize());  System.arraycopy(residue,0,cksum,confounderSize(),cksumSize() - confounderSize());  byte[] new_key=new byte[keySize()];  System.arraycopy(key,0,new_key,0,key.length);  for (int i=0; i < new_key.length; i++)   new_key[i]=(byte)(new_key[i] ^ 0xf0);  try {    if (DESKeySpec.isWeak(new_key,0)) {      new_key[7]=(byte)(new_key[7] ^ 0xF0);    }  } catch (  InvalidKeyException ex) {  }  byte[] ivec=new byte[new_key.length];  byte[] enc_cksum=new byte[cksum.length];  Des.cbc_encrypt(cksum,enc_cksum,new_key,ivec,true);  return enc_cksum;}  }
class C{  public ByteArrayOutputStream outputStream(){  return mBytes;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  try {    issetBitfield=0;    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  private int loadMainDataFromFile(String dctFilePath) throws IOException {  int i, cnt, length, total=0;  int[] buffer=new int[3];  byte[] intBuffer=new byte[4];  String tmpword;  DataInputStream dctFile=new DataInputStream(Files.newInputStream(Paths.get(dctFilePath)));  for (i=GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {    dctFile.read(intBuffer);    cnt=ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();    if (cnt <= 0) {      wordItem_charArrayTable[i]=null;      wordItem_frequencyTable[i]=null;      continue;    }    wordItem_charArrayTable[i]=new char[cnt][];    wordItem_frequencyTable[i]=new int[cnt];    total+=cnt;    int j=0;    while (j < cnt) {      dctFile.read(intBuffer);      buffer[0]=ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();      dctFile.read(intBuffer);      buffer[1]=ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();      dctFile.read(intBuffer);      buffer[2]=ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();      wordItem_frequencyTable[i][j]=buffer[0];      length=buffer[1];      if (length > 0) {        byte[] lchBuffer=new byte[length];        dctFile.read(lchBuffer);        tmpword=new String(lchBuffer,"GB2312");        wordItem_charArrayTable[i][j]=tmpword.toCharArray();      } else {        wordItem_charArrayTable[i][j]=null;      }      j++;    }    String str=getCCByGB2312Id(i);    setTableIndex(str.charAt(0),i);  }  dctFile.close();  return total;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isPrimaryKey(){  return isPrimaryKey(false);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private void processTypeRestriction(QueryService qs){  if (selectorTypeRestriction != null) {    qs.addCriteria("oa:hasTarget/oa:hasSelector" + selectorTypeRestriction);  }  if (bodyTypeRestriction != null) {    qs.addCriteria("oa:hasBody" + bodyTypeRestriction);  }  if (targetTypeRestriction != null) {    qs.addCriteria("oa:hasTarget" + targetTypeRestriction);  }}  }
class C{  protected void emit_N4MethodDeclaration_SemicolonKeyword_1_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  protected void sequence_AnnotatedN4MemberDeclaration_BogusTypeRefFragment_ColonSepTypeRef_GetterHeader_N4GetterDeclaration(ISerializationContext context,N4GetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private String dateToString(Date input){  if (input == null) {    return null;  } else {    return input.toString();  }}  }
class C{  public void printLayoutToStdOut() throws KeeperException, InterruptedException {  StringBuilder sb=new StringBuilder();  printLayout("/",0,sb);  System.out.println(sb.toString());}  }
class C{  public BitmapDrawer rotateRegistration(float regX,float regY){  setRotateRegistration(regX,regY);  return this;}  }
class C{  private void validateInitiatorHostOS(List<URI> initiators){  Set<String> hostTypes=new HashSet<String>();  List<URI> hostList=new ArrayList<URI>();  URI fillerHostURI=NullColumnValueGetter.getNullURI();  if (initiators != null && !initiators.isEmpty()) {    for (    URI initiatorUri : initiators) {      Initiator ini=queryObject(Initiator.class,initiatorUri,true);      URI hostURI=(ini.getHost() == null) ? fillerHostURI : ini.getHost();      if (!hostList.isEmpty() && hostList.contains(hostURI)) {        continue;      } else {        hostList.add(hostURI);      }      if (hostURI == fillerHostURI) {        hostTypes.add(String.valueOf(fillerHostURI));      } else {        Host host=queryObject(Host.class,hostURI,true);        hostTypes.add(host.getType());      }    }    if (hostTypes.size() != 1) {      throw APIException.badRequests.initiatorHostsInSameOS();    }  }}  }
class C{  public ClusterGroupEmptyException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public boolean deleteCalendar(String calName) throws SchedulerException {  validateState();  return resources.getJobStore().removeCalendar(calName);}  }
class C{  public void buildNamespaceAuthorizations(ApplicationUser applicationUser){  String userId=applicationUser.getUserId();  if (BooleanUtils.isNotTrue(configurationHelper.getBooleanProperty(ConfigurationValue.USER_NAMESPACE_AUTHORIZATION_ENABLED)) || isNamespaceAuthorizationAdmin(userId)) {    applicationUser.setNamespaceAuthorizations(getAllNamespaceAuthorizations());  } else {    Set<NamespaceAuthorization> namespaceAuthorizations=new HashSet<>();    applicationUser.setNamespaceAuthorizations(namespaceAuthorizations);    for (    UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationDao.getUserNamespaceAuthorizationsByUserId(userId)) {      namespaceAuthorizations.add(toNamespaceAuthorization(userNamespaceAuthorizationEntity));    }    for (    UserNamespaceAuthorizationEntity wildcardEntity : userNamespaceAuthorizationDao.getUserNamespaceAuthorizationsByUserIdStartsWith(WildcardHelper.WILDCARD_TOKEN)) {      if (wildcardHelper.matches(userId.toUpperCase(),wildcardEntity.getUserId().toUpperCase())) {        namespaceAuthorizations.add(toNamespaceAuthorization(wildcardEntity));      }    }  }}  }
class C{  public RemoteProductTypeAttrServiceImpl(final DtoProductTypeAttrService dtoProductTypeAttrService){  super(dtoProductTypeAttrService);}  }
class C{  public SAXException(String message){  super(message);  this.exception=null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_2__MORE_CODE_1:    return moreCode_1 != null && !moreCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private long adjustStartTimeForPerUnitPriceModel(final BillingInput billingInput,final PriceModelInput priceModelInput){  long adjustedStartTime=priceModelInput.getPmStartAdjustedToFreePeriod();  if (priceModelInput.isPerUnitPriceModel()) {    if (priceModelInput.isYoungestPriceModelOfPeriod() && !priceModelInput.isResumedPriceModel()) {      if (priceModelInput.getFreePeriodEnd() > billingInput.getBillingPeriodStart()) {        adjustedStartTime=priceModelInput.getFreePeriodEnd();      } else {        adjustedStartTime=billingInput.getBillingPeriodStart();      }    }  }  return adjustedStartTime;}  }
class C{  CompoundIteratorImpl(Collection<RecurrenceIterator> inclusions,Collection<RecurrenceIterator> exclusions){  queue=new PriorityQueue<HeapElement>(inclusions.size() + exclusions.size(),HeapElement.CMP);  for (  RecurrenceIterator it : inclusions) {    HeapElement el=new HeapElement(true,it);    if (el.shift()) {      queue.add(el);      ++nInclusionsRemaining;    }  }  for (  RecurrenceIterator it : exclusions) {    HeapElement el=new HeapElement(false,it);    if (el.shift()) {      queue.add(el);    }  }}  }
class C{  public XmlParser(StreamProperties props,XmlEventSource eventSource){  Preconditions.checkNotNull(props,"stream properties");  Preconditions.checkNotNull(eventSource,"eventSource");  this.props=props;  this.eventSource=eventSource;}  }
class C{  public String runningQueriesToString(){  return queries2.values().stream().map(null).collect(Collectors.joining("\n"));}  }
class C{  private void verifyPropertiesNotChanged() throws VerificationFailedException {  Schema from, to;  Map<Entity,Entity> commonEntities;  Map<Property,Property> commonProperties;  for (int i=0; i < mSchemas.size(); i++) {    if (i == 0) {      continue;    }    to=mSchemas.get(i);    from=mSchemas.get(i - 1);    commonEntities=Utils.getCommonEntitiesAsMap(from,to,resolveEntityRenameDescription(from,to,mEntityRenameDescList));    for (    Map.Entry<Entity,Entity> entityEntry : commonEntities.entrySet()) {      commonProperties=Utils.getCommonPropertiesAsMap(entityEntry.getKey(),entityEntry.getValue());      for (      Map.Entry<Property,Property> propertyEntry : commonProperties.entrySet()) {        if (!Utils.areEquivalent(propertyEntry.getKey(),propertyEntry.getValue())) {          throw new VerificationFailedException(String.format(Locale.US,"Property '%s' on Entity '%s' constraints changed when going from schema %d to schema %d",propertyEntry.getKey().getPropertyName(),entityEntry.getValue().getClassName(),from.getVersion(),to.getVersion()));        }      }    }  }}  }
class C{  public static Object randomSample(Node Xi,Map<RandomVariable,Object> event,Randomizer r){  return Xi.getCPD().getSample(r.nextDouble(),getEventValuesForParents(Xi,event));}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public static boolean hasProperty(String name){  return getProperty(name) != null;}  }
class C{  public GPathResult parents(){  throw new GroovyRuntimeException("parents() not implemented yet");}  }
class C{  public static void writeErrorData(Throwable err,BinaryRawWriterEx writer){  writeErrorData(err,writer,null);}  }
class C{  private void suppressWarningsIfOneLiveStoreOnLine(BugAccumulator accumulator,BitSet liveStoreSourceLineSet){  if (!SUPPRESS_IF_AT_LEAST_ONE_LIVE_STORE_ON_LINE) {    return;  }  entryLoop:   for (Iterator<? extends BugInstance> i=accumulator.uniqueBugs().iterator(); i.hasNext(); ) {    for (    SourceLineAnnotation annotation : accumulator.locations(i.next())) {      if (liveStoreSourceLineSet.get(annotation.getStartLine())) {        i.remove();        continue entryLoop;      }    }  }}  }
class C{  public ExceptionlessInputStream(InputStream in){  super(new DataInputStream(in));  dis=(DataInputStream)this.in;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void appendStyle(HtmlBasedComponent component,String style){  String oldStyle="";  if (component.getStyle() != null) {    oldStyle=component.getStyle();  }  component.setStyle(oldStyle + "; " + style);  return;}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public static void reverse(final char[] buffer){  reverse(buffer,0,buffer.length);}  }
class C{  public final void testGetAlgorithmsLjava_lang_String(){  String[] servicesNames={"Signature","MessageDigest","Cipher","Mac","KeyStore"};  String[] invalidServiceNames={"Rubbish","",null};  for (int i=0; i < servicesNames.length; i++) {    Set<String> algs=Security.getAlgorithms(servicesNames[i]);    assertTrue("no services with specified name: " + servicesNames[i],algs.size() > 0);  }  for (int i=0; i < invalidServiceNames.length; i++) {    Set<String> algs=Security.getAlgorithms(invalidServiceNames[i]);    assertTrue("services with specified name: " + invalidServiceNames[i],algs.size() == 0);  }}  }
class C{  public void testInPlaceDevelopment() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/cargo-sample-maven2-inPlaceDevelopment-test/");  final String initialExpected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",initialExpected,url,logger);  final String modifiedExpected="Modified page for testing";  File index=new File(System.getProperty("expandedWebapp.directory"),"index.html");  assertTrue(index + " does not exist",index.isFile());  FileWriter writer=new FileWriter(index);  writer.write(modifiedExpected);  writer.close();  PingUtils.assertPingTrue(url.getPath() + " not modified",modifiedExpected,url,logger);}  }
class C{  public int indexOf(int elem,int index){  if (index >= m_firstFree)   return -1;  int bindex=index >>> m_SHIFT;  int boffset=index & m_MASK;  int maxindex=m_firstFree >>> m_SHIFT;  int[] block;  for (; bindex < maxindex; ++bindex) {    block=m_map[bindex];    if (block != null)     for (int offset=boffset; offset < m_blocksize; ++offset)     if (block[offset] == elem)     return offset + bindex * m_blocksize;    boffset=0;  }  int maxoffset=m_firstFree & m_MASK;  block=m_map[maxindex];  for (int offset=boffset; offset < maxoffset; ++offset)   if (block[offset] == elem)   return offset + maxindex * m_blocksize;  return -1;}  }
class C{  public static ConnectionIdAttribute createConnectionIdAttribute(int connectionIdValue){  ConnectionIdAttribute attribute=new ConnectionIdAttribute();  attribute.setConnectionIdValue(connectionIdValue);  return attribute;}  }
class C{  public static boolean sql_inj(String str){  String inj_str="'|and|exec|insert|select|delete|update|count|*|%|chr|mid|master|truncate|char|declare|;|or|-|+|,";  ArrayList inj_stra=strSplit(inj_str,"|");  for (int i=0; i < inj_stra.size(); i++) {    if (str.indexOf((String)inj_stra.get(i)) >= 0) {      return true;    }  }  return false;}  }
class C{  public void increaseFrequency(int recursionDepth,int value){  frequencies.increaseFrequency(recursionDepth,value);}  }
class C{  public MemberName(Class<?> type){  init(type.getDeclaringClass(),type.getSimpleName(),type,flagsMods(IS_TYPE,type.getModifiers(),REF_NONE));  initResolved(true);}  }
class C{  private List<AbstractOption> addConfigOptions(){  List<AbstractOption> result;  if (getPlugin() == null) {    log().debug("No plugin set?");    result=Collections.<AbstractOption>emptyList();  } else {    List<AbstractOption> newOptions=new ArrayList<AbstractOption>();    log().info("Adding optionSoapAction");    newOptions.add(0,optionSoapAction);    log().info("Adding abortOnFirstSuccess");    newOptions.add(1,abortOnFirstSuccess);    log().info("Adding optionUseSchema");    newOptions.add(2,optionUseSchema);    log().info("Adding optionSchemaFiles");    newOptions.add(3,optionSchemaFiles);    log().info("Adding optionMustContainString");    newOptions.add(4,optionMustContainString);    if (optionPayloadList.size() > 0) {      log().info("Adding View Button");      newOptions.add(5,optionView);    }    if (optionMustContainString.isOn()) {      log().info("Adding optionTheContainedString");      newOptions.add(5,optionTheContainedString);    }    result=newOptions;  }  return result;}  }
class C{  private void dynParameter() throws Exception {  Properties ctx=Env.getCtx();  MLookup orgLookup=MLookupFactory.get(ctx,m_WindowNo,0,3660,DisplayType.TableDir);  orgField=new VLookup("AD_Org_ID",false,false,true,orgLookup);  MLocatorLookup locatorLookup=new MLocatorLookup(ctx,m_WindowNo);  locatorField=new VLocator("M_Locator_ID",false,false,true,locatorLookup,m_WindowNo);  MLookup productLookup=MLookupFactory.get(ctx,m_WindowNo,0,3668,DisplayType.Search);  productField=new VLookup("M_Product_ID",false,false,true,productLookup);  productField.addVetoableChangeListener(this);  MLookup mtypeLookup=MLookupFactory.get(ctx,m_WindowNo,0,3666,DisplayType.List);  mtypeField=new VLookup("MovementType",false,false,true,mtypeLookup);  dateFField=new VDate("DateFrom",false,false,true,DisplayType.Date,Msg.getMsg(Env.getCtx(),"DateFrom"));  dateTField=new VDate("DateTo",false,false,true,DisplayType.Date,Msg.getMsg(Env.getCtx(),"DateTo"));  confirmPanel.addActionListener(this);  statusBar.setStatusLine("");}  }
class C{  @Override public String toString(){  return "{" + "id=" + getId() + " oplet="+ oplet.getClass().getSimpleName()+ "}";}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  public CommentExtractor(CommonTokenStream tokenStream){  this.tokenStream=tokenStream;  extractComments();}  }
class C{  public static BufferedReader newReader(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedReader(new InputStreamReader(new FileInputStream(file),charset));}  }
class C{  public DTMDefaultBaseIterators(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);}  }
class C{  public ConnectToConfigurationServerTask(final Shell shell,final URI serverURI){  super(shell,serverURI,null);}  }
class C{  public double jaccardSimilarity(BitVector v2){  return BitsUtil.intersectionSize(bits,v2.bits) / (double)BitsUtil.unionSize(bits,v2.bits);}  }
class C{  public boolean isSetCount(){  return EncodingUtils.testBit(__isset_bitfield,__COUNT_ISSET_ID);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isFinal_1(){  return final_1;}  }
class C{  @SuppressWarnings("unchecked") private Segment<K,V> segmentForHash(int h){  long u=(((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;  return (Segment<K,V>)UNSAFE.getObjectVolatile(segments,u);}  }
class C{  String convertExternNameToTypingName(String externTypeName){  String typingName=this.externsMap.get(externTypeName);  if (typingName != null) {    return typingName;  } else {    return externTypeName;  }}  }
class C{  @Override public void onTcpWriteable(PseudoTCPBase tcp){  if (tcp != sender) {    return;  }  logger.log(Level.FINER,"Flow Control Lifted");  try {    writeData();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static StddevProjectionExpression stddev(String propertyName){  return new StddevProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public void elementRemoved(String uuid){  cache.remove(uuid);  if (LOG.isDebugEnabled()) {    LOG.debug("Element removed from cache, uuid: " + uuid);  }}  }
class C{  public PeerTaskResults<T> executeParallelFailFast(){  Preconditions.checkArgument(!CollectionUtil.isCollectionEmpty(peerTasks),"No peer task found for execution");  Set<PeerTaskResult<T>> results=executeParallel(peerTasks,true);  peerTasks.clear();  return new PeerTaskResults<>(results);}  }
class C{  public IgniteInternalFuture<Object> releaseFuture(){  return releaseFut;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassTableUI();}  }
class C{  public static Builder newBuilder(AclEntry entry){  return new Builder(entry.type,entry.who,entry.perms,entry.flags);}  }
class C{  public static GalleryFragment newInstance(String param1,String param2){  GalleryFragment fragment=new GalleryFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the contact service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the contact service!",e);    }  }  Intent serviceIntent=new Intent(IContactService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  public void close() throws IOException {  if (Debug.debugging("binaryfile")) {    Debug.output("FileInputReader.close()");  }  try {    if (inputFile != null)     inputFile.close();  } catch (  Exception e) {    e.printStackTrace();  }  inputFile=null;}  }
class C{  private Collection<?> retrieveAll(Example example){  final QueryDescriptor descriptor=queryDescriptionExtractor.extract(repositoryMetadata,configuration,example);  final Invocation invocation=createInvocation(descriptor,example);  final SelectDataStoreOperation<Serializable,Object> select=new SelectDataStoreOperation<>(descriptor);  return select.execute(dataStore,repositoryConfiguration,invocation);}  }
class C{  @Deprecated public static <T>Var<T> var(){  return new Var<>();}  }
class C{  public static boolean startsWithIgnoreCase(String src,String subS,int startIndex){  String sub=subS.toLowerCase();  int sublen=sub.length();  if (startIndex + sublen > src.length()) {    return false;  }  int j=0;  int i=startIndex;  while (j < sublen) {    char source=Character.toLowerCase(src.charAt(i));    if (sub.charAt(j) != source) {      return false;    }    j++;    i++;  }  return true;}  }
class C{  @Override public boolean supportsStatementPooling(){  debugCodeCall("supportsStatementPooling");  return false;}  }
class C{  private void buildPTR(){  double[] temp_row;  double[][] PTRA;  int k;  PivotTransform pt;  PTR=Matrix.identity(n,n);  PTRA=PTR.getArray();  k=pivotTransformQueue.size();  while (k-- > 0) {    pt=pivotTransformQueue.removeLast();    temp_row=PTRA[pt.pos1];    PTRA[pt.pos1]=PTRA[pt.pos2];    PTRA[pt.pos2]=temp_row;  }}  }
class C{  public static double AEWSRmaxFitness(boolean useTrainingData,GEPIndividual ind,double range[]){  int len=(useTrainingData ? GEPDependentVariable.trainingData.getDependentVariableValues().length : GEPDependentVariable.testingData.getDependentVariableValues().length);  return (len * range[0]);}  }
class C{  protected void emit_TAnnotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  private void fitText(String text,int textWidth){  if (textWidth > 0) {    int availableWidth=textWidth - this.getPaddingLeft() - this.getPaddingRight();    float trySize=maxTextSize;    textPaint.setTextSize(trySize);    while ((trySize > minTextSize) && (textPaint.measureText(text) > availableWidth)) {      trySize-=1;      if (trySize <= minTextSize) {        trySize=minTextSize;        break;      }      textPaint.setTextSize(trySize);    }    this.setTextSize(trySize);  }}  }
class C{  protected void unhandledMessageWritten(OFMessage m){  switchManagerCounters.unhandledMessage.increment();  if (log.isDebugEnabled()) {    String msg=getSwitchStateMessage(m,"Ignoring unexpected written message");    log.debug(msg);  }}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  protected void initCiphers() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, RandomDataGenerationException, InvalidAlgorithmParameterException, NoSuchProviderException {  this.encCipher=Cipher.getInstance(CIPHER_CHUNK,getCryptoProvider());  this.decCipher=Cipher.getInstance(CIPHER_CHUNK,getCryptoProvider());  this.lastChunkCipher=Cipher.getInstance(CIPHER_LASTCHUNK,getCryptoProvider());  this.srWrapper=SecureRandomWrapper.getInstance();}  }
class C{  public static void generateRPClass(){  RPClass clazz=new RPClass("blocktarget");  clazz.isA("area");}  }
class C{  private void synchronizeThread(final TargetProcessThread oldThread,final TargetProcessThread newThread){  if (oldThread != null) {    oldThread.removeListener(m_threadListener);  }  if (newThread != null) {    newThread.addListener(m_threadListener);  }  m_toolBar.updateGui();}  }
class C{  private Intent[] buildIntentsToViewsLists(){  Intent[] intents=new Intent[3];  intents[0]=Intent.makeRestartActivityTask(new ComponentName(this,com.example.android.apis.ApiDemos.class));  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.setClass(IntentActivityFlags.this,com.example.android.apis.ApiDemos.class);  intent.putExtra("com.example.android.apis.Path","Views");  intents[1]=intent;  intent=new Intent(Intent.ACTION_MAIN);  intent.setClass(IntentActivityFlags.this,com.example.android.apis.ApiDemos.class);  intent.putExtra("com.example.android.apis.Path","Views/Lists");  intents[2]=intent;  return intents;}  }
class C{  public static void delete(File file) throws IOException {  if (!file.exists())   return;  if (file.isDirectory()) {    for (    File child : listFiles(file)) {      delete(child);    }  }  Files.delete(file.toPath());}  }
class C{  private Map<String,String> checkVipDiff(PropertyInfoExt localProps,PropertyInfoRestRep rep){  String vipAddrV4=rep.getProperty("network_vip");  String vipAddrV6=rep.getProperty("network_vip6");  Map<String,String> diffProps=new HashMap<String,String>();  if (!vipAddrV4.equals(localProps.getProperty("network_vip"))) {    diffProps.put("network_vip",vipAddrV4);    _log.warn("Detected changed vip. remote vip: {}, local repo vip: {}",vipAddrV4,localProps.getProperty("network_vip"));  }  if (!vipAddrV6.equals(localProps.getProperty("network_vip6"))) {    diffProps.put("network_vip6",vipAddrV6);    _log.warn("Detected changed vip. remote vip: {}, local repo vip: {}",vipAddrV6,localProps.getProperty("network_vip6"));  }  return diffProps;}  }
class C{  public Set<String> names(){  TreeSet<String> result=new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < length(); i++) {    result.add(getFieldName(i));  }  return Collections.unmodifiableSet(result);}  }
class C{  protected void removeReloadablePropertySourceFromEnvironment() throws Exception {  if (propertySourceHoldingLocation != null) {    throw new Exception("Reloadable property source has already been removed.");  }  MutablePropertySources mutablePropertySources=getMutablePropertySources();  propertySourceHoldingLocation=(ReloadablePropertySource)mutablePropertySources.remove(ReloadablePropertySource.class.getName());  if (propertySourceHoldingLocation == null) {    throw new Exception("Property source with name \"" + ReloadablePropertySource.class.getName() + "\" is not configured and couldn't be removed from the environment.");  }}  }
class C{  private GroovyScriptEngine(URL[] roots,ClassLoader parent,ResourceConnector rc){  if (roots == null)   roots=EMPTY_URL_ARRAY;  this.roots=roots;  if (rc == null)   rc=this;  this.rc=rc;  if (parent == CL_STUB)   parent=this.getClass().getClassLoader();  this.parentLoader=parent;  this.groovyLoader=initGroovyLoader();}  }
class C{  public AdapterPath clear(){  mSegments.clear();  return this;}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  private void createBlockNodes(){  if (m_function.isLoaded()) {    final List<BasicBlock> blocks=m_function.getGraph().getNodes();    for (    final BasicBlock block : blocks) {      add(new FunctionTreeBlockNode(block));    }  }}  }
class C{  @Override public void forceBlockingFlush(){  if (!runsElassandra)   return;  MappingInfo mappingInfo=this.mappingAtomicReference.get();  if (mappingInfo == null || mappingInfo.indices.size() == 0) {    logger.warn("Elasticsearch not ready, cannot flush Elasticsearch index");    return;  }  for (  MappingInfo.IndexInfo indexInfo : mappingInfo.indices) {    try {      IndexShard indexShard=indexInfo.indexService.shard(0);      if (indexShard != null) {        if (indexShard.state() == IndexShardState.STARTED) {          indexShard.flush(new FlushRequest().force(false).waitIfOngoing(true));          if (logger.isDebugEnabled())           logger.debug("Elasticsearch index=[{}] flushed",indexInfo.name);        } else {          if (logger.isDebugEnabled())           logger.warn("Cannot flush index=[{}], state=[{}]",indexInfo.name,indexShard.state());        }      }    } catch (    ElasticsearchException e) {      logger.error("Error while flushing index {}",e,indexInfo.name);    }  }}  }
class C{  private DHCrypt(int keyLength,DHParameterSpec params,SecureRandom random){  try {    KeyPairGenerator kpg=JsseJce.getKeyPairGenerator("DiffieHellman");    if (params != null) {      kpg.initialize(params,random);    } else {      kpg.initialize(keyLength,random);    }    DHPublicKeySpec spec=generateDHPublicKeySpec(kpg);    if (spec == null) {      throw new RuntimeException("Could not generate DH keypair");    }    publicValue=spec.getY();    modulus=spec.getP();    base=spec.getG();  } catch (  GeneralSecurityException e) {    throw new RuntimeException("Could not generate DH keypair",e);  }}  }
class C{  public static UnManagedVolume checkUnManagedVolumeExistsInDB(DbClient dbClient,String nativeGuid){  URIQueryResultList unManagedVolumeList=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeInfoNativeIdConstraint(nativeGuid),unManagedVolumeList);  if (unManagedVolumeList.iterator().hasNext()) {    URI unManagedVolumeURI=unManagedVolumeList.iterator().next();    UnManagedVolume volumeInfo=dbClient.queryObject(UnManagedVolume.class,unManagedVolumeURI);    if (!volumeInfo.getInactive()) {      return volumeInfo;    }  }  return null;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean hasError(){  return fSeverity == FATAL || fSeverity == ERROR;}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new SliceGenerator();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:06.297 -0500",hash_original_method="A1A5E1FE4CAABF0AED8ED513B68BEBB1",hash_generated_method="19A8799E1FA0C65A24990C8EC07E917D") public Resources(AssetManager assets,DisplayMetrics metrics,Configuration config){  this(assets,metrics,config,(CompatibilityInfo)null);}  }
class C{  public void addSubView(ISubView subView,String tabName,Image tabImage){  super.addSubView(subView);  tabNames.put(subView,tabName);  tabImageMap.put(subView,tabImage);}  }
class C{  public static String milliSecToString(long mS){  long rem_mS=(long)(mS % 1000.0);  long rem_sec=(long)((mS / 1000.0) % 60.0);  long rem_min=(long)((mS / 60000.0) % 60.0);  long hr=(long)(mS / 3600000.0);  String mSstr=zeroPad(Long.toString(rem_mS),3);  String secStr=zeroPad(Long.toString(rem_sec),2);  String minStr=zeroPad(Long.toString(rem_min),2);  return String.format("%d:%2s:%2s.%3s",hr,minStr,secStr,mSstr);}  }
class C{  public Long addClientToChatNotification(Long room_id){  try {    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    String streamid=currentClient.getStreamid();    currentClient.setIsChatNotification(true);    currentClient.setChatUserRoomId(room_id);    this.clientListManager.updateClientByStreamId(streamid,currentClient);  } catch (  Exception err) {    log.error("[addClientToCahtNotification]",err);  }  return new Long(-1);}  }
class C{  public void disconnect(){synchronized (CONNECTION_SYNC) {    if (this.logWriterAppender != null) {      LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);    }    try {      if (thisAdminDS == this) {        thisAdminDS=null;      }      if (this.gfManagerAgent != null && this.gfManagerAgent.isListening()) {synchronized (this) {          if (this.health != null) {            this.health.close();          }        }        this.gfManagerAgent.removeJoinLeaveListener(this);        this.gfManagerAgent.disconnect();      }      this.gfManagerAgent=null;      if (this.config instanceof DistributedSystemConfigImpl) {        ((DistributedSystemConfigImpl)this.config).setDistributedSystem(null);      }    }  finally {      if (logWriterAppender != null) {        LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);      }    }  }}  }
class C{  public void expandToObjectAndSelect(Object elementOrTreePath,int level){  if (checkBusy()) {    return;  }  Object parent=getParentElement(elementOrTreePath);  if (((parent != null) && getExpandedState(parent)) || isRootElement(elementOrTreePath)) {    Widget w=internalGetWidgetToSelect(elementOrTreePath);    if (null != w) {      List<Object> selectionList=new ArrayList<>();      selectionList.add(w);      setSelection(selectionList);      objectToSelect.set(null);    } else {      objectToSelect.set(elementOrTreePath);    }  } else {    objectToSelect.set(elementOrTreePath);    List<Object> objectsToExpand=createObjectList(parent,new ArrayList<>());    if (!objectsToExpand.isEmpty()) {      objectsToBeExpanded.addAll(objectsToExpand);      Widget w=internalExpand(elementOrTreePath,true);      if (w != null) {        internalExpandToLevel(w,level);      }    } else {      Widget w=internalGetWidgetToSelect(elementOrTreePath);      if (null != w) {        List<Object> selectionList=new ArrayList<>();        selectionList.add(w);        setSelection(selectionList);        objectToSelect.set(null);      }    }  }}  }
class C{  void scheduleConsolidateStoreNow(){  this.storeConsolidateTask.reschedule(0,TimeUnit.MILLISECONDS);}  }
class C{  ConfProxyUtilCreateInstance(){  super("confproxy-create-instance");  getOptions().addOption(PROXY_INSTANCE);}  }
class C{  public void reset(){  canImport=false;  setPageComplete(false);}  }
class C{  public void testIsWritable(){  try {    assertTrue(rsmd.isWritable(1));    assertTrue(rsmd.isWritable(2));    assertTrue(rsmd.isWritable(3));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isWritable" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isWritable(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public Element addElementToRegistry(String hashcode,String value,boolean filter){  if (hashcode == null)   return (this);  setFilterState(filter);  addElementToRegistry(hashcode,value);  return (this);}  }
class C{  public void addNeuronsToPanel(final List<Neuron> neurons,final Layout layout){  Network net=getNetwork();  ArrayList<NeuronNode> nodes=new ArrayList<NeuronNode>();  for (  Neuron neuron : neurons) {    nodes.add(new NeuronNode(this,neuron));    net.addNeuron(neuron);  }  setSelection(nodes);  layout.setInitialLocation(whereToAdd);  layout.layoutNeurons(getSelectedModelNeurons());  whereToAdd.setLocation(neurons.get(neurons.size() - 1).getX() + DEFAULT_SPACING + 10,whereToAdd.getY());  repaint();}  }
class C{  public void testAddIssuerLjavax_security_auth_x500_X500Principal02(){  X509CRLSelector selector=new X509CRLSelector();  X500Principal iss1=new X500Principal("O=First Org.");  X500Principal iss2=new X500Principal("O=Second Org.");  CRL crl1=new TestCRL(iss1);  CRL crl2=new TestCRL(iss2);  selector.addIssuer(iss1);  assertTrue("The CRL should match the selection criteria.",selector.match(crl1));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl2));  selector.addIssuer(iss2);  assertTrue("The CRL should match the selection criteria.",selector.match(crl2));}  }
class C{  private static byte[] generateRawKey(){  return DeviceUtils.getDeviceUUID(AndroidFactory.getApplicationContext()).toString().getBytes(UTF8);}  }
class C{  @Synchronized("accessLock") @SuppressWarnings("unchecked") public U createUser(@NonNull UserHostmask userHostmask){  if (containsUser(userHostmask))   throw new RuntimeException("Cannot create a user from hostmask that already exists: " + userHostmask);  U user=(U)botFactory.createUser(userHostmask);  userNickMap.put(userHostmask.getNick().toLowerCase(locale),user);  return user;}  }
class C{  public int minPatches(int[] nums,int n){  int total=0, i=0;  for (long miss=1; miss <= n; total++) {    miss+=(i < nums.length && nums[i] <= miss) ? nums[i++] : miss;  }  return total - i;}  }
class C{  private GoogleMapLocationUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public BugObject(int id){  this.id=id;}  }
class C{  private Query parse(String text){  Analyzer analyzer=new MockAnalyzer(random());  SimpleQueryParser parser=new SimpleQueryParser(analyzer,"field");  parser.setDefaultOperator(Occur.MUST);  return parser.parse(text);}  }
class C{  private void scaleLayout(float scale){  if (!hasEditor()) {    return;  }  getEditor().scaleLayout(scale,scale);}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  private void sort(int columnIndex,int sortCount){  SortOrder order=SortOrder.values()[sortCount % 2];  List<RowSorter.SortKey> sortKeys=new ArrayList<>();  if (columnIndex != 0) {    sortKeys.add(new RowSorter.SortKey(0,SortOrder.DESCENDING));  }  sortKeys.add(new RowSorter.SortKey(columnIndex,order));  sorter.setSortKeys(sortKeys);  this.sortCount=sortCount;  sortedColumn=columnIndex;}  }
class C{  public static void removeNotification(){  if (null != mActiveEventStreamService) {    mActiveEventStreamService.clearNotification();  }}  }
class C{  public static GridState createRadialGridState(ReadOnlyVector3 position){  GridState state=new GridState(MapElementState.Type.RadialGrid,"RadialGrid",Grid.defaultCellSize,RadialGrid.defaultColor,RadialGrid.defaultLabelVisible,position,RadialGrid.defaultLineWidth);  state.rings=RadialGrid.defaultRings;  state.compassRose=RadialGrid.defaultCompassRose;  return (state);}  }
class C{  @Override protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {  return new ActiveMQConnectionFactory("tcp://localhost:61616");}  }
class C{  public static void createParentDirs(File file) throws IOException {  checkNotNull(file);  File parent=file.getCanonicalFile().getParentFile();  if (parent == null) {    return;  }  parent.mkdirs();  if (!parent.isDirectory()) {    throw new IOException("Unable to create parent directories of " + file);  }}  }
class C{  private void hideOldWidget(){  oldWidget.setVisible(false);  oldWidget=null;}  }
class C{  public <T extends VPlexResourceInfo>T renameResource(T resourceInfo,String newName) throws VPlexApiException {  return _virtualVolumeMgr.renameVPlexResource(resourceInfo,newName);}  }
class C{  public static void logResult(String logEntry){  try {    vaResultsLog.write(logEntry + "\n");  } catch (  IOException ioe) {    logger.warn("Unable to write to the va-results.log file.",ioe);  }}  }
class C{  public void writeAttrString(final java.io.Writer writer,String string,String encoding) throws IOException {  final int end=string.length();  if (end > m_attrBuff.length) {    m_attrBuff=new char[end * 2 + 1];  }  string.getChars(0,end,m_attrBuff,0);  final char[] chars=m_attrBuff;  int cleanStart=0;  int cleanLength=0;  char ch=0;  for (int i=0; i < end; i++) {    ch=chars[i];    if (escapingNotNeeded(ch) && (!m_charInfo.shouldMapAttrChar(ch))) {      cleanLength++;    } else     if ('<' == ch || '>' == ch) {      cleanLength++;    } else     if (('&' == ch) && ((i + 1) < end) && ('{' == chars[i + 1])) {      cleanLength++;    } else {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      int pos=accumDefaultEntity(writer,ch,i,chars,end,false,true);      if (i != pos) {        i=pos - 1;      } else {        if (Encodings.isHighUTF16Surrogate(ch)) {          writeUTF16Surrogate(ch,chars,i,end);          i++;        }        String outputStringForChar=m_charInfo.getOutputStringForChar(ch);        if (null != outputStringForChar) {          writer.write(outputStringForChar);        } else         if (escapingNotNeeded(ch)) {          writer.write(ch);        } else {          writer.write("&#");          writer.write(Integer.toString(ch));          writer.write(';');        }      }      cleanStart=i + 1;    }  }  if (cleanLength > 1) {    if (cleanStart == 0)     writer.write(string); else     writer.write(chars,cleanStart,cleanLength);  } else   if (cleanLength == 1) {    writer.write(ch);  }}  }
class C{  protected void indexNulls(InputStream is,long ptr,OutputStream os){  boolean moreRecords=true;  byte rHdr[]=new byte[SHAPE_RECORD_HEADER_LENGTH];  byte outBuf[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];  int result;  int nRecords=0;  int recLengthWords, recLengthBytes;  long recOffset;  int recBufSize=20;  byte recBuf[]=new byte[recBufSize];  double x;  double y;  try {    while (moreRecords) {      result=is.read(rHdr,0,SHAPE_RECORD_HEADER_LENGTH);      if (result < 0) {        moreRecords=false;        if (logger.isLoggable(Level.FINE)) {          logger.fine("Found " + nRecords + " records");          logger.fine("recBufSize = " + recBufSize);        }      } else {        nRecords++;        recOffset=ptr;        readBEInt(rHdr,0);        recLengthWords=readBEInt(rHdr,4);        recLengthBytes=recLengthWords * 2;        if (recLengthBytes > recBufSize) {          if (logger.isLoggable(Level.FINE)) {            logger.fine("Shapefile SpatialIndex increasing recBufSize to " + recLengthBytes);          }          recBufSize=recLengthBytes;          recBuf=new byte[recBufSize];        }        result=is.read(recBuf,0,recLengthBytes);        x=0;        y=0;        ptr+=recLengthBytes + 8;        writeBEInt(outBuf,0,(int)(recOffset / 2));        writeBEInt(outBuf,4,recLengthWords);        writeLEDouble(outBuf,8,x);        writeLEDouble(outBuf,16,y);        writeLEDouble(outBuf,24,x);        writeLEDouble(outBuf,32,y);        os.write(outBuf,0,SPATIAL_INDEX_RECORD_LENGTH);      }    }  } catch (  java.io.IOException e) {    e.printStackTrace();  } finally {    try {      is.close();    } catch (    java.io.IOException e) {    }  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private static boolean remoteBooleanMethod(){  return BOOLEAN_VALUE;}  }
class C{  public void deleteClosedConnections(){  connectionPool.deleteClosedConnections();}  }
class C{  public void initializeAcelaNode(AcelaNode node){synchronized (this) {    setMustInit(node,true);    node.initNode();  }}  }
class C{  static void invokeOnThreadInThreadPool(Groupable channel,Runnable task){  boolean invokeDirect;  GroupAndInvokeCount thisGroupAndInvokeCount=myGroupAndInvokeCount.get();  AsynchronousChannelGroupImpl targetGroup=channel.group();  if (thisGroupAndInvokeCount == null) {    invokeDirect=false;  } else {    invokeDirect=(thisGroupAndInvokeCount.group == targetGroup);  }  try {    if (invokeDirect) {      task.run();    } else {      targetGroup.executeOnPooledThread(task);    }  } catch (  RejectedExecutionException ree) {    throw new ShutdownChannelGroupException();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.251 -0500",hash_original_method="4393C033D6B63EF338EB93DE3E753573",hash_generated_method="5DB2D9E57BFAA6FD56609D8C5F508B28") public ReplyToHeader createReplyToHeader(Address address){  if (address == null)   throw new NullPointerException("null address");  ReplyTo replyTo=new ReplyTo();  replyTo.setAddress(address);  return replyTo;}  }
class C{  public TimingHit serverResponseTime(Integer value){  setInteger(SERVER_RESPONSE_TIME,value);  return this;}  }
class C{  public static void chineseStringToPinyinUnit(String chineseString,List<PinyinUnit> pinyinUnit){  if ((null == chineseString) || (null == pinyinUnit)) {    return;  }  String chineseStr=chineseString.toLowerCase();  if (null == format) {    format=new HanyuPinyinOutputFormat();  }  format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);  int chineseStringLength=chineseStr.length();  StringBuffer nonPinyinString=new StringBuffer();  PinyinUnit pyUnit=null;  String originalString=null;  String[] pinyinStr=null;  boolean lastChineseCharacters=true;  int startPosition=-1;  for (int i=0; i < chineseStringLength; i++) {    char ch=chineseStr.charAt(i);    try {      pinyinStr=PinyinHelper.toHanyuPinyinStringArray(ch,format);    } catch (    BadHanyuPinyinOutputFormatCombination e) {      e.printStackTrace();    }    if (null == pinyinStr) {      if (true == lastChineseCharacters) {        pyUnit=new PinyinUnit();        lastChineseCharacters=false;        startPosition=i;        nonPinyinString.delete(0,nonPinyinString.length());      }      nonPinyinString.append(ch);    } else {      if (false == lastChineseCharacters) {        originalString=nonPinyinString.toString();        String[] str={nonPinyinString.toString()};        addPinyinUnit(pinyinUnit,pyUnit,false,originalString,str,startPosition);        nonPinyinString.delete(0,nonPinyinString.length());        lastChineseCharacters=true;      }      pyUnit=new PinyinUnit();      startPosition=i;      originalString=String.valueOf(ch);      addPinyinUnit(pinyinUnit,pyUnit,true,originalString,pinyinStr,startPosition);    }  }  if (false == lastChineseCharacters) {    originalString=nonPinyinString.toString();    String[] str={nonPinyinString.toString()};    addPinyinUnit(pinyinUnit,pyUnit,false,originalString,str,startPosition);    nonPinyinString.delete(0,nonPinyinString.length());    lastChineseCharacters=true;  }}  }
class C{  public void write(Writer writer,Object o) throws Exception {  toXML(o).write(writer);}  }
class C{  public JavacPathFileManager(Context context,boolean register,Charset charset){  super(charset);  if (register)   context.put(JavaFileManager.class,this);  pathsForLocation=new HashMap<Location,PathsForLocation>();  fileSystems=new HashMap<Path,FileSystem>();  setContext(context);}  }
class C{  @Override public void rendererChanged(RendererChangeEvent event){  Plot parent=getParent();  if (parent != null) {    if (parent instanceof RendererChangeListener) {      RendererChangeListener rcl=(RendererChangeListener)parent;      rcl.rendererChanged(event);    } else {      throw new RuntimeException("The renderer has changed and I don't know what to do!");    }  } else {    configureRangeAxes();    PlotChangeEvent e=new PlotChangeEvent(this);    notifyListeners(e);  }}  }
class C{  public void removeListener(IMessageListener listener){synchronized (listeners) {    listeners.remove(listener);  }}  }
class C{  public SharedObject(){  super();  ownerMessage=new SharedObjectMessage(null,null,-1,false);  creationTime=System.currentTimeMillis();}  }
class C{  private void doReadWrite(String fileName){  if (null != fileName) {    this.setStatusBarMessage("Saving file " + fileName,BasePanel.INFORMATION);    try (FileWriter fileWriter=new FileWriter(fileName);PrintWriter writer=new PrintWriter(fileWriter)){      writer.println(TradelogSummaryTableModel.PERIOD + "," + TradelogSummaryTableModel.BATTING_AVERAGE+ ","+ TradelogSummaryTableModel.SHARPE_RATIO+ ","+ TradelogSummaryTableModel.GROSS_PL+ ","+ TradelogSummaryTableModel.QUANTITY+ ","+ TradelogSummaryTableModel.COMMISSION+ ","+ TradelogSummaryTableModel.NET_PL+ ","+ TradelogSummaryTableModel.WIN_COUNT+ ","+ TradelogSummaryTableModel.WIN_AMOUNT+ ","+ TradelogSummaryTableModel.LOSS_COUNT+ ","+ TradelogSummaryTableModel.LOSS_AMOUNT+ ","+ TradelogSummaryTableModel.POSITION_COUNT+ ","+ TradelogSummaryTableModel.CONTRACT_COUNT);      if (null != m_tradelogReport) {        for (        TradelogSummary tradelogSummary : m_tradelogReport.getTradelogSummary()) {          writer.println(formatTradelogSummaryLine(tradelogSummary));        }      }      writer.println(TradelogDetailTableModel.DATE + "," + TradelogDetailTableModel.SYMBOL+ ","+ TradelogDetailTableModel.LONGSHORT+ ","+ TradelogDetailTableModel.TIER+ ","+ TradelogDetailTableModel.MARKET_BIAS+ ","+ TradelogDetailTableModel.MARKET_BAR+ ","+ TradelogDetailTableModel.STRATEGY+ ","+ TradelogDetailTableModel.STATUS+ ","+ TradelogDetailTableModel.ACTION+ ","+ TradelogDetailTableModel.STOP_PRICE+ ","+ TradelogDetailTableModel.STATUS+ ","+ TradelogDetailTableModel.FILLED_DATE+ ","+ TradelogDetailTableModel.QUANTITY+ ","+ TradelogDetailTableModel.AVG_FILL_PRICE+ ","+ TradelogDetailTableModel.COMMISION+ ","+ TradelogDetailTableModel.PROFIT_LOSS);      if (null != m_tradelogReport) {        for (        TradelogDetail tradelogDetail : m_tradelogReport.getTradelogDetail()) {          writer.println(formatTradelogDetailLine(tradelogDetail));        }      }      writer.flush();      writer.close();      fileWriter.close();      this.setStatusBarMessage("File: " + fileName + " saved.",BasePanel.INFORMATION);    } catch (    Exception ex) {      setErrorMessage("Error Reading Writing.",ex.getMessage(),ex);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setPCCode(getString(stack));  return null;}  }
class C{  public GroupEntity(String name,String description){  this.name=name;  this.description=description;}  }
class C{  @SuppressWarnings("unchecked") public static LiveChannelListing parseListLiveChannels(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    LiveChannelListing liveChannelListing=new LiveChannelListing();    liveChannelListing.setTruncated(Boolean.valueOf(root.getChildText("IsTruncated")));    if (root.getChild("Prefix") != null) {      String prefix=root.getChildText("Prefix");      liveChannelListing.setPrefix(isNullOrEmpty(prefix) ? null : prefix);    }    if (root.getChild("Marker") != null) {      String marker=root.getChildText("Marker");      liveChannelListing.setMarker(isNullOrEmpty(marker) ? null : marker);    }    if (root.getChild("MaxKeys") != null) {      String maxKeys=root.getChildText("MaxKeys");      liveChannelListing.setMaxKeys(Integer.valueOf(maxKeys));    }    if (root.getChild("NextMarker") != null) {      String nextMarker=root.getChildText("NextMarker");      liveChannelListing.setNextMarker(isNullOrEmpty(nextMarker) ? null : nextMarker);    }    List<Element> liveChannelElems=root.getChildren("LiveChannel");    for (    Element elem : liveChannelElems) {      LiveChannel liveChannel=new LiveChannel();      liveChannel.setName(elem.getChildText("Name"));      liveChannel.setDescription(elem.getChildText("Description"));      liveChannel.setStatus(LiveChannelStatus.parse(elem.getChildText("Status")));      liveChannel.setLastModified(DateUtil.parseIso8601Date(elem.getChildText("LastModified")));      List<String> publishUrls=new ArrayList<String>();      List<Element> publishElems=elem.getChild("PublishUrls").getChildren("Url");      for (      Element urlElem : publishElems) {        publishUrls.add(urlElem.getText());      }      liveChannel.setPublishUrls(publishUrls);      List<String> playUrls=new ArrayList<String>();      List<Element> playElems=elem.getChild("PlayUrls").getChildren("Url");      for (      Element urlElem : playElems) {        playUrls.add(urlElem.getText());      }      liveChannel.setPlayUrls(playUrls);      liveChannelListing.addLiveChannel(liveChannel);    }    return liveChannelListing;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public static FetchRequest createFetchRequest(){  return new FetchRequest();}  }
class C{  public void testOrderedByDatatype() throws Exception {  int lastType=Integer.MIN_VALUE;  while (typeInfoRs.next()) {    String name=typeInfoRs.getString("TYPE_NAME");    int type=typeInfoRs.getInt("DATA_TYPE");    assertTrue("type " + type + " ("+ name+ ") less than last type "+ lastType,type >= lastType);    lastType=type;  }}  }
class C{  public StackOfIntegers(int capacity){  elements=new int[capacity];}  }
class C{  @Override public int hashCode(){  if (hash == 0) {    int result=17;    result=37 * result + range.hashCode();    long bitsWeight=Double.doubleToLongBits(weight);    result=37 * result + (int)(bitsWeight ^ (bitsWeight >>> 32));    hash=result;  }  return hash;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static final String nameForDaemon(final CassandraDaemonTask daemon){  return nameForDaemon(daemon.getName());}  }
class C{  public boolean isSetErrorCode(){  return EncodingUtils.testBit(__isset_bitfield,__ERRORCODE_ISSET_ID);}  }
class C{  private ByteBuffer bufferObject(final Object obj) throws IOException {  return ByteBuffer.wrap(SerializerUtil.serialize(obj));}  }
class C{  private void updateDatabaseFromHeaders(State state,InnerState innerState){  mInfo.mETag=innerState.mHeaderETag;  mDB.updateDownload(mInfo);}  }
class C{  public DLSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public static PKCS10CertificationRequest generateCsr(X509Certificate cert,PrivateKey privateKey,SignatureType signatureType,String challenge,String unstructuredName,boolean useExtensions,Provider provider) throws CryptoException {  try {    JcaPKCS10CertificationRequestBuilder csrBuilder=new JcaPKCS10CertificationRequestBuilder(cert.getSubjectX500Principal(),cert.getPublicKey());    if (challenge != null) {      csrBuilder.addAttribute(pkcs_9_at_challengePassword,new DERUTF8String(challenge));    }    if (unstructuredName != null) {      csrBuilder.addAttribute(pkcs_9_at_unstructuredName,new DERUTF8String(unstructuredName));    }    if (useExtensions) {      Certificate certificate=Certificate.getInstance(cert.getEncoded());      Extensions extensions=certificate.getTBSCertificate().getExtensions();      if (extensions != null) {        csrBuilder.addAttribute(pkcs_9_at_extensionRequest,extensions.toASN1Primitive());      }    }    if (provider != null && provider.getService("Signature",signatureType.jce()) == null) {      provider=new BouncyCastleProvider();    }    ContentSigner contentSigner=null;    if (provider == null) {      contentSigner=new JcaContentSignerBuilder(signatureType.jce()).build(privateKey);    } else {      contentSigner=new JcaContentSignerBuilder(signatureType.jce()).setProvider(provider).build(privateKey);    }    PKCS10CertificationRequest csr=csrBuilder.build(contentSigner);    if (!verifyCsr(csr)) {      throw new CryptoException(res.getString("NoVerifyGenPkcs10Csr.exception.message"));    }    return csr;  } catch (  CertificateEncodingException e) {    throw new CryptoException(res.getString("NoGeneratePkcs10Csr.exception.message"),e);  }catch (  OperatorCreationException e) {    throw new CryptoException(res.getString("NoGeneratePkcs10Csr.exception.message"),e);  }}  }
class C{  public void trace(Marker marker,String msg,Throwable t){}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the number of balls to drop: ");  int drops=input.nextInt();  System.out.print("Enter the number of slots in the bean machine: ");  int nails=input.nextInt() - 1;  String[] paths=new String[nails * drops];  int[] balls=new int[nails];  int numberOfRs=0;  for (int i=0; i < paths.length; i++) {    paths[i]=getRandomPath();    if (paths[i] == "R") {      numberOfRs++;    }    if ((i + 1) % nails == 0) {      balls[numberOfRs]++;      numberOfRs=0;    }  }  print(paths,nails);  print(balls);}  }
class C{  public FireworkEffect(boolean flicker,boolean trail,Collection<Color> colors,Collection<Color> fadeColors,FireworkEffectType type){  Validate.notNull(colors,"Colors can't be null");  Validate.notNull(type,"Type can't be null");  if (colors.isEmpty()) {    throw new IllegalStateException("Cannot make FireworkEffect without any color");  }  this.flicker=flicker;  this.trail=trail;  this.colors=ImmutableList.copyOf(colors);  this.fadeColors=(fadeColors == null) ? ImmutableList.of() : ImmutableList.copyOf(fadeColors);  this.type=type;}  }
class C{  public void increment(){  String s=value;  if (s == null) {    randomize();    return;  } else   if (s.isEmpty()) {    s+=Randomness.nextChar();  } else {    s=replaceCharAt(s,Randomness.nextInt(s.length()),Randomness.nextChar());  }  value=s;}  }
class C{  public static String formatJavaDocBox(String text){  requireNonNull(text);  return formatTextBox(text,JAVA_DOC_WIDTH,JAVADOC_WORDS,JAVA_DOC_SINGLE_LINE_WORDS);}  }
class C{  public Builder delete(){  return method(METHOD_DELETE,null);}  }
class C{  public String byteStringNoComma(){  StringBuffer retval=new StringBuffer();  try {    while (true) {      char next=lookAhead(0);      if (next == '\n' || next == ',') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {  }  return retval.toString();}  }
class C{  @Override public void addEventToPool(SchedulableEvent event){  if (event instanceof MidiEvent) {    MidiEvent midiEvent=(MidiEvent)event;    if (midiEvent.data.length == POOL_EVENT_SIZE) {      super.addEventToPool(event);    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  protected void onStop(double totalMillis,double lastMillis){}  }
class C{  @Override public void removeFromSelection(Figure figure){  Set<Figure> oldSelection=new HashSet<Figure>(selectedFigures);  if (selectedFigures.remove(figure)) {    Set<Figure> newSelection=new HashSet<Figure>(selectedFigures);    invalidateHandles();    figure.removeFigureListener(handleInvalidator);    fireSelectionChanged(oldSelection,newSelection);    repaint();  }}  }
class C{  public NotificationChain basicSetDeclaredName(LiteralOrComputedPropertyName newDeclaredName,NotificationChain msgs){  LiteralOrComputedPropertyName oldDeclaredName=declaredName;  declaredName=newDeclaredName;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_FIELD_DECLARATION__DECLARED_NAME,oldDeclaredName,newDeclaredName);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void animateX(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TYPE_PARAMETER__BOUND:    setBound((Type)null);  return;}super.eUnset(featureID);}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitLiteralResultElement(this);}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public DocumentPartitioningChangedEvent(Document document){  fDocument=document;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  void decryptUsingPassword(char[] password,KrbAsReq asReq,PrincipalName cname) throws KrbException, Asn1Exception, IOException {  int encPartKeyType=rep.encPart.getEType();  EncryptionKey dkey=EncryptionKey.acquireSecretKey(cname,password,encPartKeyType,PAData.getSaltAndParams(encPartKeyType,rep.pAData));  decrypt(dkey,asReq);}  }
class C{  public static void writeToFile(List<String> csvLines,String filename) throws FileNotFoundException, UnsupportedEncodingException {  PrintWriter writer=new PrintWriter(filename,"UTF-8");  csvLines.forEach(null);  writer.close();}  }
class C{  public static void writeContentToResponse(byte[] content,String filename,String contentType) throws IOException {  FacesContext fc=FacesContext.getCurrentInstance();  writeContentToResponse(content,filename,contentType,fc);  fc.responseComplete();}  }
class C{  public NoQueueServersAvailableException(String message){  super(message);}  }
class C{  public TIntFloatHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public void dock(Node node,DockPos dockPos){  dock(node,dockPos,root);}  }
class C{  public boolean canSoftwareBreakpoint(){  return canSoftwareBreakpoints;}  }
class C{  private void validateSteppedPrices(Event event,PricedEvent pe,List<SteppedPrice> steppedPrices) throws ValidationException {  if (!steppedPrices.isEmpty() && BigDecimal.ZERO.compareTo(pe.getEventPrice()) != 0) {    ValidationException ve=new ValidationException(ValidationException.ReasonEnum.STEPPED_EVENT_PRICING,"eventPrice",new Object[]{event.getEventIdentifier()});    logger.logWarn(Log4jLogger.SYSTEM_LOG,ve,LogMessageIdentifier.WARN_STEPPED_PRICING_MIXED_WITH_BASEPRICE,pe.getPriceModel().getProduct().getProductId(),"priced event",String.valueOf(pe.getKey()));    throw ve;  }}  }
class C{  public float drawLine(Token token,Graphics2D g,float x,float y){  float nextX=x;  while (token != null && token.isPaintable() && nextX < clipEnd) {    nextX=token.paint(g,nextX,y,host,this,clipStart);    token=token.getNextToken();  }  if (host.getEOLMarkersVisible()) {    g.setColor(host.getForegroundForTokenType(Token.WHITESPACE));    g.setFont(host.getFontForTokenType(Token.WHITESPACE));    g.drawString("\u00B6",nextX,y);  }  return nextX;}  }
class C{  @Override public void earlyStartup(){  monitor.debug("EARLY STATRTUP: gUIBatchLaconizer");  startSpartan();}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof SolarisNumericUserPrincipal))   return false;  SolarisNumericUserPrincipal that=(SolarisNumericUserPrincipal)o;  if (this.getName().equals(that.getName()))   return true;  return false;}  }
class C{  public void markAsDestroyedInCqResultKeys(Object key){  if (!CqServiceProvider.MAINTAIN_KEYS) {    return;  }  if (this.cqResultKeys != null) {synchronized (this.cqResultKeys) {      this.cqResultKeys.put(key,Token.DESTROYED);      if (!this.cqResultKeysInitialized) {        if (this.destroysWhileCqResultsInProgress != null) {          this.destroysWhileCqResultsInProgress.add(key);        }      }    }  }}  }
class C{  public void showIntro(View view,String id,String text,FocusGravity focusGravity){  new MaterialIntroView.Builder(ToolbarMenuItemActivity.this).enableDotAnimation(true).setFocusGravity(focusGravity).setFocusType(Focus.MINIMUM).setDelayMillis(100).enableFadeAnimation(true).performClick(true).setInfoText(text).setTarget(view).setListener(this).setUsageId(id).show();}  }
class C{  private boolean addPoint(Date date,Log log){  clearExpiredPoints();  eventTimes.add(date);  logger.debug("eventTimes :" + eventTimes.size());  return checkStatus(log);}  }
class C{  public CMAES(Problem problem,int lambda){  this(problem,lambda,null,new NondominatedPopulation());}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  surfaceScale=createLiveAnimatedNumber(null,SVG_SURFACE_SCALE_ATTRIBUTE,1f);  specularConstant=createLiveAnimatedNumber(null,SVG_SPECULAR_CONSTANT_ATTRIBUTE,1f);  specularExponent=createLiveAnimatedNumber(null,SVG_SPECULAR_EXPONENT_ATTRIBUTE,1f);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void expandLeft(SegmentTreeNode node){  if ((node.lson=computeLeftChild(node)) != null) {    expandLeft(node.lson);    expandRight(node.lson);  }}  }
class C{  public void toEPL(StringWriter writer){  if (keyword == null) {    return;  }  writer.write("for ");  writer.write(keyword.getName());  if (expressions.size() == 0) {    return;  }  writer.write("(");  String delimiter="";  for (  Expression child : expressions) {    writer.write(delimiter);    child.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    delimiter=", ";  }  writer.write(")");}  }
class C{  public void removeTagDefinition(int tagId){  getTagInfo().delete(tagId);}  }
class C{  public GlobeBrowserBalloon(String text,Position position){  super(text);  if (position == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.position=position;}  }
class C{  void stop(){  imageFile.getWorkspace().removeResourceChangeListener(this);}  }
class C{  protected BufferedImage createBufferedImage(int width,int height){  BufferedImage image=ImageUtil.createCompatibleBufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  ImageUtil.clearImage(image);  return image;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.901 -0500",hash_original_method="8110C8E7476BAC12ED22AD12D0A85400",hash_generated_method="48AB28D83654864E9BDD43DDAAC51E5F") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public static final boolean isConversionRequired(){  return !_noConversionRequired;}  }
class C{  public boolean isWSPausableSubscriptionManagerInterfaceSupport(){  return wsPausableSubscriptionManagerInterfaceSupport;}  }
class C{  static public void assertEquals(int expected,int actual){  assertEquals(null,expected,actual);}  }
class C{  private void deleteSelectedLines(){  if (linesList.getSelectedIndex() == -1) {    return;  }  for (  Object value : linesList.getSelectedValues()) {    AxisParallelLineConfiguration line=(AxisParallelLineConfiguration)value;    if (horizontalLineRadiobutton.isSelected()) {      RangeAxisConfig config=(RangeAxisConfig)rangeAxisSelectionCombobox.getSelectedItem();      config.getCrossHairLines().removeLine(line);    } else {      engine.getPlotInstance().getMasterPlotConfiguration().getDomainConfigManager().getCrosshairLines().removeLine(line);    }  }  updateLineList();}  }
class C{  @Deprecated public static boolean isRef(String name){  return isChangeRef(name);}  }
class C{  public Iter(){}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  protected void ensureArguments(String operator,int expected,List<Vertex> arguments,TextStream stream){  if (arguments.size() != expected) {    throw new SelfParseException("'" + operator + "' requires "+ expected+ " arguments not: "+ arguments.size(),stream);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.493 -0400",hash_original_method="DC2C6FD0F14A1434DB9ECFEAE61B09B4",hash_generated_method="22B73DC538D97F34DC1D079961A2A003") public boolean accept(File dir,String name){  return true;}  }
class C{  @RequestProcessing(value="/top/balance",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showBalance(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/top/balance.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final List<JSONObject> users=pointtransferQueryService.getTopBalanceUsers(Symphonys.getInt("topBalanceCnt"));  dataModel.put(Common.TOP_BALANCE_USERS,users);  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  @Override public final void moveTo(final float x,final float y){  shape_primitives.addElement(M);  shape_primitive_x.addElement(x);  shape_primitive_y.addElement(y);  shape_primitive_x2.addElement(0);  shape_primitive_y2.addElement(0);  shape_primitive_x3.addElement(0);  shape_primitive_y3.addElement(0);}  }
class C{  public String toExtendedString(){  StringBuffer buf=new StringBuffer();  buf.append(this.toString());  buf.append(" columns=");  buf.append(listColumns(allColumns));  buf.append(" keys=(");  for (int i=0; i < this.keys.size(); i++) {    if (i > 0)     buf.append(",");    buf.append(keys.get(i));  }  buf.append(")");  return buf.toString();}  }
class C{  public static DeleteIndexRequest deleteIndexRequest(String index){  return new DeleteIndexRequest(index);}  }
class C{  public DefaultSymbolFactory(){}  }
class C{  public Metric metric(final Object key,final String unit,final Object... name){  final Metric metric=metrics.get(key);  if (metric == null) {    final Metric newMetric=new Metric(name,unit);    final Metric existingMetric=metrics.putIfAbsent(key,newMetric);    return fromNullable(existingMetric).or(newMetric);  }  return metric;}  }
class C{  @Override public String toString(){  return "DetectorNode[" + factory.getReportedBugPatternCodes() + "]";}  }
class C{  public static void print(String message){  if (!isDisabled()) {    try {      getOutput().write(message.getBytes());    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static void fireTriggers(final HashSet<TriggerAttachment> triggersToBeFired,final HashMap<ICondition,Boolean> testedConditionsSoFar,final IDelegateBridge aBridge,final String beforeOrAfter,final String stepName,final boolean useUses,final boolean testUses,final boolean testChance,final boolean testWhen){  final HashSet<TriggerAttachment> triggersToFire=new HashSet<>();  for (  final TriggerAttachment t : triggersToBeFired) {    if (testChance && !t.testChance(aBridge)) {      continue;    }    triggersToFire.add(t);  }  triggerNotifications(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerPlayerPropertyChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerRelationshipTypePropertyChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerTerritoryPropertyChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerTerritoryEffectPropertyChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerUnitPropertyChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerRelationshipChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerAvailableTechChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerTechChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerProductionChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerProductionFrontierEditChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerSupportChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerChangeOwnership(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerUnitRemoval(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerPurchase(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerUnitPlacement(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerResourceChange(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerActivateTriggerOther(testedConditionsSoFar,triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  triggerVictory(triggersToFire,aBridge,beforeOrAfter,stepName,useUses,testUses,false,testWhen);  if (useUses) {    setUsesForWhenTriggers(triggersToFire,aBridge,useUses);  }}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (notequalsOp_1: ");  result.append(notequalsOp_1);  result.append(')');  return result.toString();}  }
class C{  @Override public void onScroll(int y){  if (mTransparentEnabled) {    setTitleBarTranslate(interpolate(mEndFadePosition - y));  }}  }
class C{  public AbstractMessageDeserializer(Type versionedMessageType,MessageVersion expectedVersion,Map<Type,JsonDeserializer> deserializerMap,Logger notificationLogger){  super(versionedMessageType,expectedVersion,getDeserializer(deserializerMap),notificationLogger);}  }
class C{  private void escapePath(){  final StringBuilder ptmp=new StringBuilder(this.path.length() + 10);  boolean modified=false;  final int len=this.path.length();  for (int i=0; i < len; i++) {    int ch=this.path.charAt(i);    if (ch <= 0x7F) {      if (UNRESERVED_PATH.get(ch)) {        ptmp.append((char)ch);      } else {        ptmp.append(hex[ch]);        modified=true;      }    } else     if (ch <= 0x07FF) {      ptmp.append(hex[0xc0 | (ch >> 6)]);      ptmp.append(hex[0x80 | (ch & 0x3F)]);      modified=true;    } else {      ptmp.append(hex[0xe0 | (ch >> 12)]);      ptmp.append(hex[0x80 | ((ch >> 6) & 0x3F)]);      ptmp.append(hex[0x80 | (ch & 0x3F)]);      modified=true;    }  }  if (modified) {    this.path=ptmp.toString();  }}  }
class C{  protected double SVMOutput(int index) throws Exception {  double result=-m_b;  for (int i=m_supportVectors.getNext(-1); i != -1; i=m_supportVectors.getNext(i)) {    result+=(m_alpha[i] - m_alphaStar[i]) * m_kernel.eval(index,i,m_data.instance(index));  }  return result;}  }
class C{  public static RuntimeException createRuntimeException(final ErrorKeys errorId){  return new RuntimeException(errorId.toString());}  }
class C{  public void init(PlatformAffinityFunction func){  assert func != null;  this.func=func;}  }
class C{  public BombPayloadDialog(JFrame parent,String title,int[] bombs,boolean spaceBomb,boolean bombDump,int limit,int numFighters){  super(parent,title,true);  initialize(parent,title,bombs,spaceBomb,bombDump,limit,numFighters);}  }
class C{  StringVector processPREFIX_URLLIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    String prefix=tokenizer.nextToken();    String url=handler.getNamespaceForPrefix(prefix);    if (url != null)     strings.addElement(url); else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix}));  }  return strings;}  }
class C{  public CurrencyException(String message,Object[] params){  super(message,params);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static ButtonInfo[] loadButtonMap(Context context){  String saved=Settings.System.getStringForUser(context.getContentResolver(),Settings.System.NAV_BUTTONS,UserHandle.USER_CURRENT);  if (saved == null) {    saved=NavigationButtons.DEFAULT_SETTING_STRING;  }  String[] buttons=saved.split("\\|");  if (buttons.length < SLOT_COUNT) {    buttons=NavigationButtons.DEFAULT_SETTING_STRING.split("\\|");  }  ButtonInfo[] result=new ButtonInfo[6];  for (int i=0; i < result.length; i++) {    result[i]=BUTTON_MAP.get(buttons[i]);    if (result[i] == null) {      result[i]=EMPTY;    }  }  return result;}  }
class C{  public boolean lookingAt(){  return matcher.lookingAt();}  }
class C{  @Override public void clearOutputTurnouts(){  _outputTurnoutList=new ArrayList<>();}  }
class C{  public Boolean isAutoConfigurationEnabled(){  return autoConfigurationEnabled;}  }
class C{  protected Float wrapValue(float k){  return new Float(k);}  }
class C{  private static Object applyRangeIterable(final Iterable<Object> iterable,final long low,final long high){  boolean single=high != -1 ? (high - low == 1) : false;  final Collection resultCollection=single ? null : (iterable instanceof Set) ? new LinkedHashSet() : new LinkedList();  Object result=single ? null : resultCollection;  long c=0L;  for (  final Object item : iterable) {    if (c >= low) {      if (c < high || high == -1) {        if (single) {          result=item;          break;        } else {          resultCollection.add(item);        }      } else       break;    }    c++;  }  if (null == result)   throw FastNoSuchElementException.instance();  return result;}  }
class C{  @Deprecated public Intent putExtra(String name,IBinder value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putIBinder(name,value);  return this;}  }
class C{  public Modulo3Equation eliminate(final int var,final Modulo3Equation equation){  assert this.list.getLong(var) != 0;  assert equation.list.getLong(var) != 0;  final int mul=this.list.getLong(var) == equation.list.getLong(var) ? 1 : 2;  sub(equation,mul);  return this;}  }
class C{  public void put(K key,V value){  putToMap(key,value,Constants.EXPIRY_NOCHANGE,cacheTimeSpread(),false,false);}  }
class C{  protected ExpressionException invalidKey(String key){  return new ExpressionException("key [" + key + "] doesn't exist in struct");}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  protected boolean isFileSpecifyingModuleSpecifier(String specifier){  return specifier.length() > 0 && specifier.charAt(specifier.length() - 1) != IPath.SEPARATOR;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:14.280 -0500",hash_original_method="0D77FBD1C1F349CB6A533B80F899FC6F",hash_generated_method="C66ADC636E87867704F6F5AA6E39475A") private int translateStatus(int status){switch (status & 0x7) {case SmsManager.STATUS_ON_ICC_READ:    return 1;case SmsManager.STATUS_ON_ICC_UNREAD:  return 0;case SmsManager.STATUS_ON_ICC_SENT:return 3;case SmsManager.STATUS_ON_ICC_UNSENT:return 2;}return 1;}  }
class C{  public ContextValueString(String value){  super(value);}  }
class C{  public NotificationExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  protected String handleBigDecimal(BigDecimal decimal){  return decimal == null ? "" : decimal.toString();}  }
class C{  public static final int readInt(byte[] src,int pos){  return ((0xFF & src[pos]) << 8 | (0xFF & src[pos + 1]));}  }
class C{  public void addInstanceField(EncodedField field){  classData.addInstanceField(field);}  }
class C{  public void resetInsideClassCache(){  final Map<Class<?>,Field[]> fieldz=cachedClasses;  if (fieldz != null) {synchronized (fieldz) {      fieldz.clear();    }  }}  }
class C{  @Override public AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,RectangleEdge edge,AxisSpace space){  if (space == null) {    space=new AxisSpace();  }  if (!isVisible()) {    return space;  }  space=super.reserveSpace(g2,plot,plotArea,edge,space);  double maxdim=getMaxDim(g2,edge);  if (RectangleEdge.isTopOrBottom(edge)) {    space.add(maxdim,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    space.add(maxdim,edge);  }  return space;}  }
class C{  public int readChar() throws IOException {  if (position == count) {    fillBuffer();  }  if (count == -1) {    return END_OF_STREAM;  }  int result=buffer[position++];  if (result < 0) {    charError("ASCII");  }  return result;}  }
class C{  @Override public ProcessStreams createProcessStreams(ProcessDescription processDescription){  Preconditions.checkNotNull(processDescription);  return createAndRegisterNewConsole(processDescription);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="gov:faculty";  Document doc;  Element newElement;  String elementName;  doc=(Document)load("staffNS",false);  newElement=doc.createElementNS(namespaceURI,qualifiedName);  elementName=newElement.getTagName();  assertEquals("throw_Equals",qualifiedName,elementName);}  }
class C{  private void toggleNature(IProject project) throws CoreException {  if (project.hasNature(UmletNature.NATURE_ID)) {    removeUmletNature(project);  } else {    addUmletNature(project);  }}  }
class C{  public MailMessage addAttachment(DataSource attachment){  if (attachment != null) {    attachments.add(attachment);  }  return this;}  }
class C{  @Override public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public VisorLogSearchResult(UUID nid,String filePath,long fileSize,long lastModified,String[] lines,int lineNum,int lineCnt,String encoding){  this.nid=nid;  this.filePath=filePath;  this.fileSize=fileSize;  this.lastModified=lastModified;  this.lines=lines;  this.lineNum=lineNum;  this.lineCnt=lineCnt;  this.encoding=encoding;}  }
class C{  public static void sort(int[] list){  for (int i=0; i < list.length - 1; i++) {    int min=list[i];    int minIndex=i;    for (int j=i + 1; j < list.length; j++) {      if (list[j] < min) {        min=list[j];        minIndex=j;      }    }    if (minIndex != i) {      list[minIndex]=list[i];      list[i]=min;    }  }}  }
class C{  public Set<Integer> backupPartitions(UUID nodeId){  Set<Integer> set=backup.get(nodeId);  return set == null ? Collections.<Integer>emptySet() : set;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public StaticMap scale(int scale){  this.scale=scale;  return this;}  }
class C{  public ReplyToParser(String replyTo){  super(replyTo);}  }
class C{  public E element(){  return getFirst();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:45.975 -0500",hash_original_method="17739E86F508FAF2AC931D73653ADB87",hash_generated_method="4EFB9055EDEFBA920DC4D386DCB3CCF7") public void resetRetryCount(){  mRetryCount=0;  if (DBG)   log("resetRetryCount: " + mRetryCount);}  }
class C{  public static ArrayBasedEscaperMap create(Map<Character,String> replacements){  return new ArrayBasedEscaperMap(createReplacementArray(replacements));}  }
class C{  private static void downloadLine(SearchResultDataLine line){  if (line == null) {    throw new NullPointerException("Tried to download null line");  }  line.getSearchResult().download(false);}  }
class C{  @Deprecated public Bit(boolean bit){  this.bit=bit;}  }
class C{  private void queryAndCompareUIF(Object... params) throws Exception {  final QueryResponse expect=query(params);  final Object[] newParams=Arrays.copyOf(params,params.length + 2);  newParams[newParams.length - 2]="facet.method";  newParams[newParams.length - 1]="uif";  final QueryResponse uifResult=query(newParams);  compareResponses(expect,uifResult);}  }
class C{  protected DbfHandler createDbfHandler(String dbfFileName) throws FormatException, IOException {  BinaryBufferedFile bbf=new BinaryBufferedFile(dbfFileName);  return new DbfHandler(bbf);}  }
class C{  private SolrInputDocument findDecendent(SolrInputDocument parent,String childId){  if (childId.equals(parent.getFieldValue("id"))) {    return parent;  }  if (!parent.hasChildDocuments()) {    return null;  }  for (  SolrInputDocument kid : parent.getChildDocuments()) {    SolrInputDocument result=findDecendent(kid,childId);    if (null != result) {      return result;    }  }  return null;}  }
class C{  private static String[] sampleCharactersFromNetwork(String initialization,MultiLayerNetwork net,CharacterIterator iter,Random rng,int charactersToSample,int numSamples){  if (initialization == null) {    initialization=String.valueOf(iter.getRandomCharacter());  }  INDArray initializationInput=Nd4j.zeros(numSamples,iter.inputColumns(),initialization.length());  char[] init=initialization.toCharArray();  for (int i=0; i < init.length; i++) {    int idx=iter.convertCharacterToIndex(init[i]);    for (int j=0; j < numSamples; j++) {      initializationInput.putScalar(new int[]{j,idx,i},1.0f);    }  }  StringBuilder[] sb=new StringBuilder[numSamples];  for (int i=0; i < numSamples; i++)   sb[i]=new StringBuilder(initialization);  net.rnnClearPreviousState();  INDArray output=net.rnnTimeStep(initializationInput);  output=output.tensorAlongDimension(output.size(2) - 1,1,0);  for (int i=0; i < charactersToSample; i++) {    INDArray nextInput=Nd4j.zeros(numSamples,iter.inputColumns());    for (int s=0; s < numSamples; s++) {      double[] outputProbDistribution=new double[iter.totalOutcomes()];      for (int j=0; j < outputProbDistribution.length; j++)       outputProbDistribution[j]=output.getDouble(s,j);      int sampledCharacterIdx=sampleFromDistribution(outputProbDistribution,rng);      nextInput.putScalar(new int[]{s,sampledCharacterIdx},1.0f);      sb[s].append(iter.convertIndexToCharacter(sampledCharacterIdx));    }    output=net.rnnTimeStep(nextInput);  }  String[] out=new String[numSamples];  for (int i=0; i < numSamples; i++)   out[i]=sb[i].toString();  return out;}  }
class C{  public static final void addMenuItem(String s,ActionListener l,JPopupMenu m,boolean enable,int idx){  JMenuItem item=m instanceof SkinPopupMenu ? new SkinMenuItem(s) : new JMenuItem(s);  item.addActionListener(l);  item.setEnabled(enable);  m.add(item,idx);}  }
class C{  public HashAttributeSet(AttributeSet attributes){  this(attributes,Attribute.class);}  }
class C{  private static SecretKey makeDesKeys(byte[] input,String desStrength) throws NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {  byte[] subkey1=addDesParity(input,0,7);  KeySpec spec=null;  SecretKeyFactory desFactory=SecretKeyFactory.getInstance(desStrength);switch (desStrength) {case "des":    spec=new DESKeySpec(subkey1,0);  if (logger.isLoggable(Level.FINEST)) {    traceOutput(DP_CLASS_NAME,"makeDesKeys","DIGEST42:DES key input: ",input);    traceOutput(DP_CLASS_NAME,"makeDesKeys","DIGEST43:DES key parity-adjusted: ",subkey1);    traceOutput(DP_CLASS_NAME,"makeDesKeys","DIGEST44:DES key material: ",((DESKeySpec)spec).getKey());    logger.log(Level.FINEST,"DIGEST45: is parity-adjusted? {0}",Boolean.valueOf(DESKeySpec.isParityAdjusted(subkey1,0)));  }break;case "desede":byte[] subkey2=addDesParity(input,7,7);byte[] ede=new byte[subkey1.length * 2 + subkey2.length];System.arraycopy(subkey1,0,ede,0,subkey1.length);System.arraycopy(subkey2,0,ede,subkey1.length,subkey2.length);System.arraycopy(subkey1,0,ede,subkey1.length + subkey2.length,subkey1.length);spec=new DESedeKeySpec(ede,0);if (logger.isLoggable(Level.FINEST)) {traceOutput(DP_CLASS_NAME,"makeDesKeys","DIGEST46:3DES key input: ",input);traceOutput(DP_CLASS_NAME,"makeDesKeys","DIGEST47:3DES key ede: ",ede);traceOutput(DP_CLASS_NAME,"makeDesKeys","DIGEST48:3DES key material: ",((DESedeKeySpec)spec).getKey());logger.log(Level.FINEST,"DIGEST49: is parity-adjusted? ",Boolean.valueOf(DESedeKeySpec.isParityAdjusted(ede,0)));}break;default :throw new IllegalArgumentException("Invalid DES strength:" + desStrength);}return desFactory.generateSecret(spec);}  }
class C{  public VariableReference addMethod(TestCase test,GenericMethod method,int position,int recursionDepth) throws ConstructionFailedException {  logger.debug("Recursion depth: " + recursionDepth);  if (recursionDepth > Properties.MAX_RECURSION) {    logger.debug("Max recursion depth reached");    throw new ConstructionFailedException("Max recursion depth reached");  }  logger.debug("Adding method " + method);  int length=test.size();  VariableReference callee=null;  List<VariableReference> parameters=null;  try {    if (!method.isStatic()) {      callee=createOrReuseVariable(test,method.getOwnerType(),position,recursionDepth,null,false,false,false);      assert !(test.getStatement(callee.getStPosition()) instanceof FunctionalMockStatement);      position+=test.size() - length;      length=test.size();      logger.debug("Found callee of type " + method.getOwnerType() + ": "+ callee.getName());      if (!TestUsageChecker.canUse(method.getMethod(),callee.getVariableClass())) {        logger.debug("Cannot call method " + method + " with callee of type "+ callee.getClassName());        throw new ConstructionFailedException("Cannot apply method to this callee");      }    }    parameters=satisfyParameters(test,callee,Arrays.asList(method.getParameterTypes()),position,recursionDepth + 1,true,false,true);  } catch (  ConstructionFailedException e) {    throw e;  }  int newLength=test.size();  position+=(newLength - length);  Statement st=new MethodStatement(test,method,callee,parameters);  VariableReference ret=test.addStatement(st,position);  if (callee != null)   ret.setDistance(callee.getDistance() + 1);  return ret;}  }
class C{  public int recurseInteractionFrames(Graphics2D g2,Vector<Integer> interactionframes,HashMap<String,String> interactionframesText,int pos,int recursionLevel){  int pos1=interactionframes.elementAt(pos);  int posX;  while (pos < interactionframes.size() && (posX=interactionframes.elementAt(pos)) > 0) {    pos1=posX;    pos++;    pos=recurseInteractionFrames(g2,interactionframes,interactionframesText,pos,recursionLevel + 1);    if (pos1 <= 0) {      return pos;    }    int pos2=interactionframes.elementAt(pos) * -1;    drawInteractionFrame(g2,pos1,pos2,recursionLevel,interactionframesText.get("" + pos1));    pos++;  }  return pos;}  }
class C{  private void drawAsciiPanel(final Graphics g){  if (isEnabled()) {    g.setColor(m_fontColorAscii);  } else {    g.setColor(m_disabledColor != m_bgColorAscii ? m_disabledColor : Color.WHITE);  }  final int characterWidth=getCharacterWidth(g);  final int initx=getAsciiViewLeft() + m_paddingAsciiLeft;  int x=initx;  int y=m_paddingTop;  byte[] data=null;  int bytesToDraw;  if (m_status == DefinitionStatus.DEFINED) {    bytesToDraw=getBytesToDraw();    data=m_dataProvider.getData(getFirstVisibleOffset(),bytesToDraw);  } else {    bytesToDraw=getMaximumVisibleBytes();  }  long currentOffset=getFirstVisibleOffset();  for (int i=0; i < bytesToDraw; i++, currentOffset++) {    ColoredRange range=findColoredRange(currentOffset);    if ((range != null) && ((currentOffset + bytesToDraw) < range.getStart())) {      range=null;    }    if ((i != 0) && ((i % m_bytesPerRow) == 0)) {      x=initx;      y+=m_rowHeight;    }    if (m_status == DefinitionStatus.DEFINED) {      char c=(char)data[i];      c=Convert.isPrintableCharacter(c) ? c : '.';      final String dataString=String.valueOf(c);      if (isEnabled()) {        final long normalizedOffset=m_flipBytes ? ((currentOffset & -m_bytesPerColumn) + m_bytesPerColumn) - (currentOffset % m_bytesPerColumn) - 1 : currentOffset;        if (isSelectedOffset(normalizedOffset)) {          g.setColor(m_selectionColor);          g.fillRect(x,y - m_charHeight,m_charWidth,m_charHeight + 2);          g.setColor(m_fontColorAscii);        } else         if ((range != null) && range.containsOffset(currentOffset)) {          final Color bgColor=range.getBackgroundColor();          if (bgColor != null) {            g.setColor(bgColor);          } else {            System.out.println("FOO");          }          g.fillRect(x,y - m_charHeight,m_charWidth,m_charHeight + 2);          g.setColor(range.getColor());        } else         if ((m_colormap != null) && m_colormap.colorize(data,i)) {          final Color backgroundColor=m_colormap.getBackgroundColor(data,i);          final Color foregroundColor=m_colormap.getForegroundColor(data,i);          if (backgroundColor != null) {            g.setColor(backgroundColor);            g.fillRect(x,y - m_charHeight,m_charWidth,m_charHeight + 2);          }          if (foregroundColor != null) {            g.setColor(foregroundColor);          }        } else {          g.setColor(m_fontColorAscii);        }      } else {        g.setColor(m_disabledColor != m_bgColorAscii ? m_disabledColor : Color.WHITE);      }      g.drawString(dataString,x,y);    } else {      g.drawString("?",x,y);    }    x+=characterWidth;    if ((range != null) && ((range.getStart() + range.getSize()) <= currentOffset)) {      range=findColoredRange(currentOffset);      if ((range != null) && ((currentOffset + bytesToDraw) < range.getStart())) {        range=null;      }    }  }}  }
class C{  public PcGesSearchEditor(PcdRunner runner){  super(runner,"Result forbid_latent_common_causes");}  }
class C{  private String handleZoningUpdate(URI export,List<URI> initiators,Map<URI,Integer> blockObjectMap,Workflow workflow,String waitFor,List<ExportMask> exportMasksToCreateOnDevice,List<ExportMask> exportMasksToUpdateOnDevice){  String zoningStepId=workflow.createStepId();  List<URI> exportMaskURIs=new ArrayList<URI>();  for (  ExportMask mask : exportMasksToCreateOnDevice) {    exportMaskURIs.add(mask.getId());  }  for (  ExportMask mask : exportMasksToUpdateOnDevice) {    exportMaskURIs.add(mask.getId());  }  List<URI> volumeURIs=new ArrayList<URI>();  volumeURIs.addAll(blockObjectMap.keySet());  Workflow.Method zoningExecuteMethod=_networkDeviceController.zoneExportMasksCreateMethod(export,exportMaskURIs,volumeURIs);  Workflow.Method zoningRollbackMethod=_networkDeviceController.zoneRollbackMethod(export,zoningStepId);  zoningStepId=workflow.createStep(ZONING_STEP,String.format("Zone ExportGroup %s for initiators %s",export,initiators.toString()),waitFor,nullURI,"network-system",_networkDeviceController.getClass(),zoningExecuteMethod,zoningRollbackMethod,zoningStepId);  return zoningStepId;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  @JmsListener(id=HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE,containerFactory="storagePolicyProcessorJmsListenerContainerFactory",destination=HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE) public void processMessage(String payload,@Headers Map<Object,Object> allHeaders){  LOGGER.info("Message received from the JMS queue. jmsQueueName=\"{}\" jmsMessageHeaders=\"{}\" jmsMessagePayload={}",HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE,allHeaders,payload);  try {    StoragePolicySelection storagePolicySelection=jsonHelper.unmarshallJsonToObject(StoragePolicySelection.class,payload);    LOGGER.debug("Received storage policy selection message: businessObjectDataKey={} storagePolicyKey={} storagePolicyVersion={}",jsonHelper.objectToJson(storagePolicySelection.getBusinessObjectDataKey()),jsonHelper.objectToJson(storagePolicySelection.getStoragePolicyKey()),storagePolicySelection.getStoragePolicyVersion());    storagePolicyProcessorService.processStoragePolicySelectionMessage(storagePolicySelection);  } catch (  RuntimeException|IOException e) {    LOGGER.error("Failed to process message from the JMS queue. jmsQueueName=\"{}\" jmsMessagePayload={}",HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE,payload,e);  }}  }
class C{  public SegmentIntersector computeSelfNodes(LineIntersector li,boolean computeRingSelfNodes,boolean isDoneIfProperInt){  SegmentIntersector si=new SegmentIntersector(li,true,false);  si.setIsDoneIfProperInt(isDoneIfProperInt);  EdgeSetIntersector esi=createEdgeSetIntersector();  boolean isRings=parentGeom instanceof LinearRing || parentGeom instanceof Polygon || parentGeom instanceof MultiPolygon;  boolean computeAllSegments=computeRingSelfNodes || !isRings;  esi.computeIntersections(edges,si,computeAllSegments);  addSelfIntersectionNodes(argIndex);  return si;}  }
class C{  private int neighbors(TicTacToeBoard board){  int count=0;  for (int cd=-1; cd <= 1; cd++) {    for (int rd=-1; rd <= 1; rd++) {      if ((cd == 0) && (rd == 0)) {        continue;      }      int tcol=col + cd;      int trow=row + rd;      if ((0 <= tcol) && (tcol < board.numColumns()) && (0 <= trow)&& (trow < board.numRows())) {        if (board.get(tcol,trow) == player.getMark()) {          count++;        }      }    }  }  return count;}  }
class C{  public static boolean isWebpHeader(final byte[] imageHeaderBytes,final int offset,final int headerSize){  return headerSize >= SIMPLE_WEBP_HEADER_LENGTH && matchBytePattern(imageHeaderBytes,offset,WEBP_RIFF_BYTES) && matchBytePattern(imageHeaderBytes,offset + 8,WEBP_NAME_BYTES);}  }
class C{  private static Multimap<String,BindingSet> loadPcjResults(final Connector accumuloConn,final String pcjTableName) throws PcjException, TableNotFoundException, BindingSetConversionException {  final Multimap<String,BindingSet> fetchedResults=HashMultimap.create();  final PcjTables pcjs=new PcjTables();  final PcjMetadata pcjMetadata=pcjs.getPcjMetadata(accumuloConn,pcjTableName);  for (  final VariableOrder varOrder : pcjMetadata.getVarOrders()) {    final Scanner scanner=accumuloConn.createScanner(pcjTableName,new Authorizations());    scanner.fetchColumnFamily(new Text(varOrder.toString()));    for (    final Entry<Key,Value> entry : scanner) {      final byte[] serializedResult=entry.getKey().getRow().getBytes();      final BindingSet result=converter.convert(serializedResult,varOrder);      fetchedResults.put(varOrder.toString(),result);    }  }  return fetchedResults;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long x=getLong(stack);  return (x == 0) ? "" : Sage.dfjMed(x);}  }
class C{  static List<File> load(Context context,ApplicationInfo applicationInfo,File dexDir) throws IOException {  return load(context,applicationInfo,dexDir,false);}  }
class C{  public Digraph(Digraph G){  this(G.V());  this.E=G.E();  for (int v=0; v < V; v++)   this.indegree[v]=G.indegree(v);  for (int v=0; v < G.V(); v++) {    Stack<Integer> reverse=new Stack<Integer>();    for (    int w : G.adj[v]) {      reverse.push(w);    }    for (    int w : reverse) {      adj[v].add(w);    }  }}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public void testTimedPoll() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.poll(SHORT_DELAY_MS,MILLISECONDS));  }  assertNull(q.poll(SHORT_DELAY_MS,MILLISECONDS));}  }
class C{  public boolean contains(final Interval interval){  if (interval == EMPTY_INTERVAL)   return true;  if (this == EMPTY_INTERVAL)   return false;  return left <= interval.left && interval.right <= right;}  }
class C{  public void deleteRowkeys(List<byte[]> rowkeys) throws IOException {  final List<Delete> deletes=new ArrayList<Delete>(rowkeys.size());  for (  byte[] rowkey : rowkeys) {    final Delete delete=createDelete(rowkey);    deletes.add(delete);  }  tbl.delete(deletes);}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  private static void printlnPropList(List<Map<String,String>> propList,boolean json){  int maxName=4;  int maxValue=5;  for (  Map<String,String> props : propList) {    for (    String key : props.keySet()) {      if (key.length() > maxName)       maxName=key.length();    }  }  String headerFormat="%-" + maxName + "s  %-"+ maxValue+ "s\n";  String valueFormat="%-" + maxName + "s: %s\n";  String nextValFormat="%-" + maxName + "s  %s\n";  int propIdx=0;  if (json)   println("[");  for (  Map<String,String> props : propList) {    if (json) {      if (propIdx > 0)       println(",");      printPropertiesJSON(props,propIdx);    } else {      printf(headerFormat,"NAME","VALUE");      printf(headerFormat,"----","-----");      TreeSet<String> treeSet=new TreeSet<String>(props.keySet());      for (      String key : treeSet) {        String value=props.get(key);        if (value != null) {          String[] split=value.split("\n");          boolean first=true;          for (          String string : split) {            if (first) {              printf(valueFormat,key,string);              first=false;            } else             printf(nextValFormat,"",string);          }        } else         printf(valueFormat,key,value);      }    }    propIdx++;  }  if (json)   println("\n]");}  }
class C{  public void testRandomUnibiStrings() throws Exception {  checkRandomData(random(),unibiAnalyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public void testNullOffer(){  SubmissionPublisher<Integer> p=basicPublisher();  try {    p.offer(null,null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public boolean removeFacetField(String name){  boolean b=this.remove(FacetParams.FACET_FIELD,name);  if (this.get(FacetParams.FACET_FIELD) == null && this.get(FacetParams.FACET_QUERY) == null) {    this.setFacet(false);  }  return b;}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (mShader == null)   return;  float radius=mCenterX <= mCenterY ? mCenterX - 75.0f : mCenterY - 75.0f;  canvas.rotate(mRotateDegrees,mCenterX,mCenterY);  canvas.drawCircle(mCenterX,mCenterY,radius,mPaintCover);  canvas.rotate(-mRotateDegrees,mCenterX,mCenterY);  canvas.drawCircle(mCenterX,mCenterY,mButtonRadius,mPaintButton);  canvas.drawBitmap(isRotating() ? mBitmapPause : mBitmapPlay,mCenterX - mBitmapPause.getWidth() / 2f,mCenterY - mBitmapPause.getHeight() / 2f,mPaintPlayPause);  if (mProgressVisibility) {    canvas.drawArc(rectF,145,250,false,mPaintProgressEmpty);    canvas.drawArc(rectF,145,calculatePastProgressDegree(),false,mPaintProgressLoaded);    String leftTime=secondsToTime(calculateLeftSeconds());    mPaintTime.getTextBounds(leftTime,0,leftTime.length(),mRectText);    canvas.drawText(leftTime,(float)(mCenterX * Math.cos(Math.toRadians(35.0))) + mWidth / 2.0f - mRectText.width() / 1.5f,(float)(mCenterX * Math.sin(Math.toRadians(35.0))) + mHeight / 2.0f + mRectText.height() + 15.0f,mPaintTime);    String passedTime=secondsToTime(calculatePassedSeconds());    mPaintTime.getTextBounds(passedTime,0,passedTime.length(),mRectText);    canvas.drawText(passedTime,(float)(mCenterX * -Math.cos(Math.toRadians(35.0))) + mWidth / 2.0f - mRectText.width() / 3.0f,(float)(mCenterX * Math.sin(Math.toRadians(35.0))) + mHeight / 2.0f + mRectText.height() + 15.0f,mPaintTime);  }}  }
class C{  private static void deleteRecursiveSilent(CarbonFile f){  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursiveSilent(c);      }    }  }  if (f.exists() && !f.delete()) {    return;  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.THIS_TYPE_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return TypeRefsPackage.THIS_TYPE_REF___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.THIS_TYPE_REF___GET_TYPING_STRATEGY;case TypeRefsPackage.TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return TypeRefsPackage.THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private static Map<String,AssetFieldDescriptor> createAssetFieldsFromItems(Collection<? extends ServiceItemRestRep> items,Map<String,ServiceFieldRestRep> providedFields){  List<ServiceFieldRestRep> fields=ServiceFieldRestRep.getAssetFields(items);  Map<String,AssetFieldDescriptor> assetFields=createAssetFields(fields,providedFields);  providedFields=addFieldsByType(fields,providedFields);  for (  ServiceItemRestRep child : items) {    if (child instanceof ServiceFieldGroupRestRep) {      assetFields.putAll(createAssetFieldsFromItems(((ServiceFieldGroupRestRep)child).getItems(),providedFields));    } else     if (child instanceof ServiceFieldTableRestRep) {      assetFields.putAll(createAssetFieldsFromItems(((ServiceFieldTableRestRep)child).getItems(),providedFields));    }  }  return assetFields;}  }
class C{  public SnmpStatusException(int status){  errorStatus=status;}  }
class C{  @Override public String put(final String key,final String value){  for (int i=0; i < contents.length; i+=2) {    final String k=contents[i];    if (k.equals(key)) {      final String oldValue=contents[i + 1];      contents[i + 1]=value;      return oldValue;    }  }  return null;}  }
class C{  public static void createTimeoutPage(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,String message) throws ServletException, IOException {  log.info(message);  WebSessionCtx wsc=WebSessionCtx.get(request);  String windowTitle="Timeout";  if (wsc != null)   windowTitle=Msg.getMsg(wsc.ctx,"Timeout");  WebDoc doc=WebDoc.create(windowTitle);  body body=doc.getBody();  if (message != null && message.length() > 0)   body.addElement(new p(message,AlignType.CENTER));  body.addElement(getLoginButton(wsc == null ? null : wsc.ctx));  body.addElement(new hr());  body.addElement(new small(servlet.getClass().getName()));  createResponse(request,response,servlet,null,doc,false);}  }
class C{  @LargeTest public void testMediaImageItemOverlays() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String overlayItemFileName=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  final int imageItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaImageItem1",imageItemFileName,12000,imageItemRenderingMode);  mVideoEditor.addMediaItem(mediaImageItem1);  assertTrue("Overlay List Size",(mediaImageItem1.getAllOverlays().size() == 0) ? true : false);  assertNull("Overlay Item by ID",mediaImageItem1.getOverlay("xyz"));  final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayItemFileName,640,480);  final OverlayFrame overlayFrame=mVideoEditorHelper.createOverlay(mediaImageItem1,"overlayId",mBitmap,5000,5000);  mediaImageItem1.addOverlay(overlayFrame);  assertTrue("Overlay List Size",(mediaImageItem1.getAllOverlays().size() == 1) ? true : false);  assertEquals("Overlay Item by Valid ID",overlayFrame,mediaImageItem1.getOverlay(overlayFrame.getId()));  assertNull("Overlay Item by Invalid ID",mediaImageItem1.getOverlay("xyz"));  assertNull("Remove Overlay Item by Invalid ID",mediaImageItem1.removeOverlay("xyz"));  assertTrue("Overlay List Size",(mediaImageItem1.getAllOverlays().size() == 1) ? true : false);  assertEquals("Overlay Removed",overlayFrame,mediaImageItem1.removeOverlay(overlayFrame.getId()));  assertTrue("Overlay List Size",(mediaImageItem1.getAllOverlays().size() == 0) ? true : false);  assertNull("Overlay Item by ID",mediaImageItem1.getOverlay("effectId"));}  }
class C{  public TypeDeclaration buildTypeDeclaration(IType type,CompilationUnitDeclaration compilationUnit) throws JavaModelException {  PackageFragment pkg=(PackageFragment)type.getPackageFragment();  char[][] packageName=Util.toCharArrays(pkg.names);  if (packageName.length > 0) {    compilationUnit.currentPackage=new ImportReference(packageName,new long[]{0},false,ClassFileConstants.AccDefault);  }  TypeDeclaration typeDeclaration=convert(type,null,null);  IType alreadyComputedMember=type;  IType parent=type.getDeclaringType();  TypeDeclaration previousDeclaration=typeDeclaration;  while (parent != null) {    TypeDeclaration declaration=convert(parent,alreadyComputedMember,previousDeclaration);    alreadyComputedMember=parent;    previousDeclaration=declaration;    parent=parent.getDeclaringType();  }  compilationUnit.types=new TypeDeclaration[]{previousDeclaration};  return typeDeclaration;}  }
class C{  public boolean validate(InputNode node) throws Exception {  InputNode from=node.getParent();  Class type=entry.getType();  String name=node.getName();  while (node != null) {    boolean valid=root.validate(node,type);    if (valid == false) {      return false;    }    node=from.getNext(name);  }  return true;}  }
class C{  public void write(PrintStream out){  write(out,table);}  }
class C{  public void clear(){  for (int i=0; i < segments.length; ++i) {    segments[i].clear();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ScatterRenderer)) {    return false;  }  ScatterRenderer that=(ScatterRenderer)obj;  if (!ObjectUtilities.equal(this.seriesShapesFilled,that.seriesShapesFilled)) {    return false;  }  if (this.baseShapesFilled != that.baseShapesFilled) {    return false;  }  if (this.useFillPaint != that.useFillPaint) {    return false;  }  if (this.drawOutlines != that.drawOutlines) {    return false;  }  if (this.useOutlinePaint != that.useOutlinePaint) {    return false;  }  if (this.useSeriesOffset != that.useSeriesOffset) {    return false;  }  if (this.itemMargin != that.itemMargin) {    return false;  }  return super.equals(obj);}  }
class C{  static void closeWindows(){  s_closingWindows=true;  for (int i=0; i < s_hiddenWindows.size(); i++) {    CFrame hidden=s_hiddenWindows.get(i);    hidden.dispose();  }  s_hiddenWindows.clear();  s_closingWindows=false;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return IPV4;case 2:  return PORT;case 3:return SERVICE_NAME;default :return null;}}  }
class C{  private static Id<Link> useCloserRefLinkForChildStopFacility(TransitSchedule schedule,Network network,TransitRoute transitRoute,TransitStopFacility stopFacility,Collection<? extends Link> comparingLinks){  double minDist=CoordTools.distanceStopFacilityToLink(stopFacility,network.getLinks().get(stopFacility.getLinkId()));  Link minLink=null;  for (  Link comparingLink : comparingLinks) {    double distCompare=CoordTools.distanceStopFacilityToLink(stopFacility,comparingLink);    if (distCompare < minDist) {      minDist=distCompare;      minLink=comparingLink;    }  }  if (minLink != null) {    TransitStopFacility newChildStopFacility;    String[] split=stopFacility.getId().toString().split(suffixChildStopFacilitiesRegex);    Id<TransitStopFacility> newChildStopFacilityId=Id.create(split[0] + suffixChildStopFacilities + minLink.getId(),TransitStopFacility.class);    if (schedule.getFacilities().containsKey(newChildStopFacilityId)) {      newChildStopFacility=schedule.getFacilities().get(newChildStopFacilityId);    } else {      newChildStopFacility=schedule.getFactory().createTransitStopFacility(newChildStopFacilityId,stopFacility.getCoord(),false);      newChildStopFacility.setName(stopFacility.getName());      newChildStopFacility.setStopPostAreaId(stopFacility.getStopPostAreaId());      newChildStopFacility.setLinkId(minLink.getId());      schedule.addStopFacility(newChildStopFacility);    }    transitRoute.getStop(stopFacility).setStopFacility(newChildStopFacility);    return minLink.getId();  } else {    return null;  }}  }
class C{  private void removeCarsFromStaging(){  if (_departStageTrack == null) {    return;  }  for (  Car car : _carList) {    if (car.getTrack() == _departStageTrack && car.getTrain() == null) {      if (car.getKernel() != null) {        for (        Car c : car.getKernel().getCars())         c.setLocation(car.getLocation(),null);      } else {        car.setLocation(car.getLocation(),null);      }    }  }}  }
class C{  public void fireRequestToolTip(String tip){  fireRequestToolTip(new InfoDisplayEvent(this,tip));}  }
class C{  public void startOrientationDetection(OrientationListener orientationListener){  startLibrarySensorDetection(new OrientationDetector(orientationListener),orientationListener);}  }
class C{  public AbstractMRNodeTrafficController(){}  }
class C{  public static String calculateFileHash(File file) throws Exception {  MD5 md5=new MD5();  InputStream in=new BufferedInputStream(new FileInputStream(file));  int len;  byte[] buff=new byte[8192];  while ((len=in.read(buff)) > 0) {    md5.write(buff,len);  }  return md5.calculateHash();}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof ZoneInfoOld)) {    return false;  }  ZoneInfoOld that=(ZoneInfoOld)obj;  return (getID().equals(that.getID()) && (getLastRawOffset() == that.getLastRawOffset()) && (checksum == that.checksum));}  }
class C{  public HessianConnectionException(String message,Throwable rootCause){  super(message,rootCause);}  }
class C{  Preferences(){}  }
class C{  public static short addElem(short x,short y){  return (short)(x ^ y);}  }
class C{  public static SignalPlanData createSignalPlan(SignalControlDataFactory fac,int cycleTime,int offset,Id<SignalPlan> signalPlanId){  SignalPlanData signalPlan=fac.createSignalPlanData(signalPlanId);  signalPlan.setCycleTime(cycleTime);  signalPlan.setOffset(offset);  return signalPlan;}  }
class C{  private void checkIfAtLogin(){  checkIfIdDisplayed(R.id.login_main_view);  checkIfIdDisplayed(R.id.username_text_input);  checkIfIdDisplayed(R.id.password_text_input);  checkIfIdDisplayed(R.id.login_button);}  }
class C{  private TermsBuilder buildAggregationQuery(List<Column> aggs,int index,QueryState state){  Column agg=aggs.get(index);  TermsBuilder result=null;  if (aggs.get(index).getOp() == Operation.NONE) {    result=AggregationBuilders.terms(agg.getAggName()).field(agg.getColumn());    result.size(state.getIntProp(Utils.PROP_FETCH_SIZE,10000));  }  if (index < aggs.size() - 1)   result.subAggregation(buildAggregationQuery(aggs,index + 1,state)); else   addMetrics(result,state.getHeading(),true);  return result;}  }
class C{  public static String toTypeString(Object[] arguments,int maxSize){  if (arguments == null) {    return "null";  }  StringBuilder argBuf=new StringBuilder();  for (int i=0; i < arguments.length; i++) {    if (maxSize != -1 && argBuf.length() > maxSize) {      argBuf.append("...");      break;    } else {      if (i > 0) {        argBuf.append(", ");      }      argBuf.append(arguments[i] != null ? typeName(arguments[i]) : "null");    }  }  return argBuf.toString();}  }
class C{  public static void initIcons(){  Iconify.with(new FontAwesomeModule()).with(new EntypoModule()).with(new TypiconsModule()).with(new MaterialModule()).with(new MaterialCommunityModule()).with(new MeteoconsModule()).with(new WeathericonsModule()).with(new SimpleLineIconsModule()).with(new IoniconsModule());}  }
class C{  private LayoutManager createLayout(){  SeaGlassContext context=getContext(this);  LayoutManager lm=(LayoutManager)style.get(context,"InternalFrameTitlePane.titlePaneLayout");  context.dispose();  return (lm != null) ? lm : new SeaGlassTitlePaneLayout();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  Object newValue=evt.getNewValue();  if (newValue != null && newValue.equals(evt.getOldValue())) {    return;  }  for (int i=0; i < _clients.size(); i++) {    _clients.get(i).calculate(_enabled,evt);  }}  }
class C{  Cube(Counter[][] colors,int count){  this.colors=colors;  this.count=count;}  }
class C{  public ServiceInfo updateService(long serviceInfoId,String serviceNo,String serviceName,String fullName,String serviceProcess,String serviceMethod,String serviceDossier,String serviceCondition,String serviceDuration,String serviceActors,String serviceResults,String serviceRecords,String serviceFee,String serviceInstructions,String administrationCode,String administrationIndex,String domainCode,String domainIndex,String onlineUrl,long[] fileTemplateIds,ServiceContext context) throws PortalException, SystemException {  ServiceInfo service=null;  long serviceId=counterLocalService.increment(ServiceInfo.class.getName());  int hasTemplateFiles=0;  if (fileTemplateIds.length != 0) {    hasTemplateFiles=1;  }  DictItem dictItemDomain=DictItemLocalServiceUtil.getDictItem(Long.valueOf(domainCode));  DictItem dictItemAdmin=DictItemLocalServiceUtil.getDictItem(Long.valueOf(administrationCode));  Date now=new Date();  service=serviceInfoPersistence.fetchByPrimaryKey(serviceInfoId);  service.setUserId(context.getUserId());  service.setModifiedDate(now);  service.setServiceNo(serviceNo);  service.setServiceName(serviceName);  service.setFullName(fullName);  service.setServiceProcess(serviceProcess);  service.setServiceMethod(serviceMethod);  service.setServiceDossier(serviceDossier);  service.setServiceCondition(serviceCondition);  service.setServiceDuration(serviceDuration);  service.setServiceActors(serviceActors);  service.setServiceResults(serviceResults);  service.setServiceRecords(serviceRecords);  service.setServiceFee(serviceFee);  service.setServiceInstructions(serviceInstructions);  service.setAdministrationCode(administrationCode);  service.setAdministrationIndex(dictItemAdmin.getTreeIndex());  service.setDomainCode(domainCode);  service.setDomainIndex(dictItemDomain.getTreeIndex());  service.setOnlineUrl(onlineUrl);  service.setHasTemplateFiles(hasTemplateFiles);  long classTypeId=0;  boolean visible=true;  Date startDate=null;  Date endDate=null;  Date expirationDate=null;  String mimeType=ContentTypes.TEXT_HTML;  String title=serviceName;  String description=fullName;  String summary=serviceProcess;  String url=null;  String layoutUuid=null;  int height=0;  int width=0;  Integer priority=null;  boolean sync=false;  serviceFileTemplateLocalService.addServiveFiles(serviceInfoId,fileTemplateIds);  assetEntryLocalService.updateEntry(context.getUserId(),context.getScopeGroupId(),ServiceInfo.class.getName(),service.getServiceinfoId(),service.getUuid(),classTypeId,context.getAssetCategoryIds(),context.getAssetTagNames(),visible,startDate,endDate,expirationDate,mimeType,title,description,summary,url,layoutUuid,height,width,priority,sync);  serviceInfoPersistence.update(service);  Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(ServiceInfo.class);  indexer.reindex(service);  return service;}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_buildThread != null) {    newVector.addElement("Stop");  }  return newVector.elements();}  }
class C{  public long average(){  if (cnt > 0)   avg=sum / cnt;  return avg;}  }
class C{  private void basicDestroy(LocalRegion region,DiskRegion dr){  if (dr.isBackup()) {    if (region != null) {      region.closeEntries();    }    PersistentOplogSet oplogSet=getPersistentOplogSet(dr);    oplogSet.basicDestroy(dr);  } else {    dr.freeAllEntriesOnDisk(region);    if (region != null) {      region.closeEntries();    }  }}  }
class C{  public static LocalResult read(Session session,ResultSet rs,int maxrows){  Expression[] cols=Expression.getExpressionColumns(session,rs);  int columnCount=cols.length;  LocalResult result=new LocalResult(session,cols,columnCount);  try {    for (int i=0; (maxrows == 0 || i < maxrows) && rs.next(); i++) {      Value[] list=new Value[columnCount];      for (int j=0; j < columnCount; j++) {        int type=result.getColumnType(j);        list[j]=DataType.readValue(session,rs,j + 1,type);      }      result.addRow(list);    }  } catch (  SQLException e) {    throw DbException.convert(e);  }  result.done();  return result;}  }
class C{  public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);synchronized (dateFormat) {    return dateFormat.format(date);  }}  }
class C{  public static IndexedParent serializableInstance(){  return new IndexedParent(0,1);}  }
class C{  private void createXlsReport(){  SmjXlsReport xls=new SmjXlsReport();  HSSFWorkbook book=xls.generate(data,generalTitle,clientName,clientNIT,periodName,currencyName,m_columns,city,logoId);  fileXls=xls.tofile(book,generalTitle);  revalidate();}  }
class C{  protected ActionMap createActionMap(){  ActionMap m=new ActionMap();  m.put(DeleteAction.ID,new DeleteAction());  m.put(SelectAllAction.ID,new SelectAllAction());  m.put(IncreaseHandleDetailLevelAction.ID,new IncreaseHandleDetailLevelAction(this));  m.put(MoveAction.East.ID,new MoveAction.East(this));  m.put(MoveAction.West.ID,new MoveAction.West(this));  m.put(MoveAction.North.ID,new MoveAction.North(this));  m.put(MoveAction.South.ID,new MoveAction.South(this));  m.put(MoveConstrainedAction.East.ID,new MoveConstrainedAction.East(this));  m.put(MoveConstrainedAction.West.ID,new MoveConstrainedAction.West(this));  m.put(MoveConstrainedAction.North.ID,new MoveConstrainedAction.North(this));  m.put(MoveConstrainedAction.South.ID,new MoveConstrainedAction.South(this));  m.put(CutAction.ID,new CutAction());  m.put(CopyAction.ID,new CopyAction());  m.put(PasteAction.ID,new PasteAction());  return m;}  }
class C{  void stringConversion(Converter converter,String expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "' to String";  try {    Object result=converter.convert(String.class,value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public LeagueRound nextRound(){  List<? extends LeagueRound> nextRounds=rounds();  if (nextRounds == null || nextRounds.isEmpty()) {    throw new IllegalStateException("No more rounds left");  }  LeagueRound nextRound=nextRounds.remove(0);  service.delete(nextRound,nextRound.id());  return nextRound;}  }
class C{  public int next(){  final int result=_currentNode;  _currentNode=END;  return returnNode(result);}  }
class C{  public Builder withIndex(long index){  request.index=Assert.argNot(index,index < 0,"index cannot be less than 0");  return this;}  }
class C{  public static int digit(char ch,int radix){  return 0;}  }
class C{  public static void waitForGivenURLTermToAppear(String urlTerm,int waitCount){  for (int index=0; index < waitCount; index++) {    if (WebUIDriver.getWebDriver().getCurrentUrl().contains(urlTerm)) {      break;    } else {      Sleeper.sleepTightInSeconds(1);      index=index + 1;    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static double min(double[][] values){  double min=Double.MAX_VALUE;  for (int i=0; i < values.length; i++) {    for (int j=0; j < values[i].length; j++) {      min=(values[i][j] < min) ? values[i][j] : min;    }  }  return min;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  public Builder end(long timeMillis){  event.localEnd.setTimeInMillis(timeMillis);  return this;}  }
class C{  public boolean canSet(Class type){  if (type == null)   return false;  if (Number.class.isAssignableFrom(type) || String.class.isAssignableFrom(type)) {    return true;  } else {    return m_columnType.isAssignableFrom(type);  }}  }
class C{  private Preference findPreferenceByResId(int resId){  return findPreference(getString(resId));}  }
class C{  public static String escapeHTML(String html){  return html.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\"","&quot;").replace("\"'","&#039;");}  }
class C{  public AttributeCertificateIssuer(AttCertIssuer issuer){  form=issuer.getIssuer();}  }
class C{  public GenerateTangentsVisualPanel1(){  initComponents();}  }
class C{  public boolean isAntilogCalculated(){  return parameters.getBoolean("antilogCalculated",antilogCalculated);}  }
class C{  public void drawCCScene(GL10 gl){  calculateDeltaTime();  if (!isPaused) {    CCScheduler.sharedScheduler().tick(dt);  }  gl.glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  GLResourceHelper.sharedHelper().update(gl);  if (nextCCScene_ != null)   setNextScene();  gl.glPushMatrix();  applyOrientation(gl);  ccMacros.CC_ENABLE_DEFAULT_GL_STATES(gl);  if (runningCCScene_ != null)   runningCCScene_.visit(gl);  if (displayFPS)   showFPS(gl);  if (ccConfig.CC_ENABLE_PROFILERS) {  }  ccMacros.CC_DISABLE_DEFAULT_GL_STATES(gl);  gl.glPopMatrix();}  }
class C{  private void suspendApp(){  Log.d(LOG_TAG,"SuspendApp");  if (Matrix.getInstance(ConsoleApplication.this).getSharedGcmRegistrationManager().useGCM()) {    CommonActivityUtils.pauseEventStream(ConsoleApplication.this);  }  PIDsRetriever.getIntance().onAppBackgrounded();  MyPresenceManager.advertiseAllUnavailable();}  }
class C{  public static GetEvents parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetEvents object=new GetEvents();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getEvents".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetEvents)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","lastEventId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setLastEventId(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      object.setLastEventId(java.lang.Long.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static String generateSoundJSON(AbstractResourcePack pack){  JsonObject fakeSoundJSON=new JsonObject();  for (  String domain : (Set<String>)pack.getResourceDomains()) {    if (pack instanceof FileResourcePack) {      try {        ZipFile zipFile=new ZipFile(pack.resourcePackFile);        if (zipFile.getEntry("assets/" + domain + "/sounds/") != null) {          Enumeration zipEntries=zipFile.entries();          while (zipEntries.hasMoreElements()) {            String zipPath=((ZipEntry)zipEntries.nextElement()).getName();            String prefix="assets/" + domain + "/sounds/";            if (zipPath.startsWith(prefix) && !zipPath.equals(prefix)) {              String soundName=zipPath.replaceFirst(prefix,"").replaceFirst("[.][^.]+$","");              ZipEntry entry=zipFile.getEntry(zipPath);              if (!soundName.contains("/")) {                JsonObject sound=new JsonObject();                sound.addProperty("category","ambient");                JsonArray sounds=new JsonArray();                if (entry.isDirectory()) {                  Enumeration zipEntries2=zipFile.entries();                  while (zipEntries2.hasMoreElements()) {                    String zipPath2=((ZipEntry)zipEntries2.nextElement()).getName();                    if (zipPath2.startsWith(prefix + soundName + "/") && !zipFile.getEntry(zipPath2).isDirectory()) {                      String randomSoundName=zipPath2.replaceFirst(prefix + soundName + "/","");                      sounds.add(new JsonPrimitive(soundName + "/" + randomSoundName.replaceFirst("[.][^.]+$","")));                    }                  }                } else {                  sounds.add(new JsonPrimitive(soundName));                }                sound.add("sounds",sounds);                fakeSoundJSON.add(soundName,sound);              }            }          }        }      } catch (      Exception e) {        e.printStackTrace();        throw new ExceptionInInitializerError("Error generating fake sound JSON file.");      }    } else {      File folder=new File(pack.resourcePackFile,"assets/" + domain + "/sounds/");      if (folder.exists()) {        File[] listOfFiles=folder.listFiles();        for (int i=0; i < listOfFiles.length; i++) {          File listedFile=listOfFiles[i];          JsonObject sound=new JsonObject();          sound.addProperty("category","ambient");          JsonArray sounds=new JsonArray();          String listedName=listedFile.getName().replaceFirst("[.][^.]+$","");          if (listedFile.isFile()) {            sounds.add(new JsonPrimitive(listedName));          } else           if (listedFile.isDirectory()) {            for (            File soundItemFile : listedFile.listFiles())             sounds.add(new JsonPrimitive(listedName + "/" + soundItemFile.getName().replaceFirst("[.][^.]+$","")));          }          sound.add("sounds",sounds);          fakeSoundJSON.add(listedName,sound);        }      }    }  }  return fakeSoundJSON.toString();}  }
class C{  public static ChartTheme createDarknessTheme(){  StandardChartTheme theme=new StandardChartTheme("Darkness");  theme.titlePaint=Color.white;  theme.subtitlePaint=Color.white;  theme.legendBackgroundPaint=Color.black;  theme.legendItemPaint=Color.white;  theme.chartBackgroundPaint=Color.black;  theme.plotBackgroundPaint=Color.black;  theme.plotOutlinePaint=Color.yellow;  theme.baselinePaint=Color.white;  theme.crosshairPaint=Color.red;  theme.labelLinkPaint=Color.lightGray;  theme.tickLabelPaint=Color.white;  theme.axisLabelPaint=Color.white;  theme.shadowPaint=Color.darkGray;  theme.itemLabelPaint=Color.white;  theme.drawingSupplier=new DefaultDrawingSupplier(new Paint[]{Color.decode("0xFFFF00"),Color.decode("0x0036CC"),Color.decode("0xFF0000"),Color.decode("0xFFFF7F"),Color.decode("0x6681CC"),Color.decode("0xFF7F7F"),Color.decode("0xFFFFBF"),Color.decode("0x99A6CC"),Color.decode("0xFFBFBF"),Color.decode("0xA9A938"),Color.decode("0x2D4587")},new Paint[]{Color.decode("0xFFFF00"),Color.decode("0x0036CC")},new Stroke[]{new BasicStroke(2.0f)},new Stroke[]{new BasicStroke(0.5f)},DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE);  theme.wallPaint=Color.darkGray;  theme.errorIndicatorPaint=Color.lightGray;  theme.gridBandPaint=new Color(255,255,255,20);  theme.gridBandAlternatePaint=new Color(255,255,255,40);  theme.shadowGenerator=null;  return theme;}  }
class C{  public void actionPerformed(ActionEvent e){  log.info(e.getActionCommand());  if ("Refresh".equals(e.getActionCommand()) || e.getSource() == f_value || e.getSource() == f_upc || e.getSource() == f_name || e.getSource() == f_sku) {    setResults(MWarehousePrice.find(p_ctx,m_M_PriceList_Version_ID,m_M_Warehouse_ID,f_value.getText(),f_name.getText(),f_upc.getText(),f_sku.getText(),null));    return;  } else   if ("Reset".equals(e.getActionCommand())) {    reset();    return;  } else   if ("Previous".equalsIgnoreCase(e.getActionCommand())) {    int rows=m_table.getRowCount();    if (rows == 0)     return;    int row=m_table.getSelectedRow();    row--;    if (row < 0)     row=0;    m_table.getSelectionModel().setSelectionInterval(row,row);    m_table.scrollRectToVisible(m_table.getCellRect(row,1,true));    return;  } else   if ("Next".equalsIgnoreCase(e.getActionCommand())) {    int rows=m_table.getRowCount();    if (rows == 0)     return;    int row=m_table.getSelectedRow();    row++;    if (row >= rows)     row=rows - 1;    m_table.getSelectionModel().setSelectionInterval(row,row);    m_table.scrollRectToVisible(m_table.getCellRect(row,1,true));    return;  }  close();}  }
class C{  @CheckResult public boolean intersect(Rect r){  return intersect(r.left,r.top,r.right,r.bottom);}  }
class C{  public static void submit(Element rootElement,Patient patient){  if (rootElement == null)   return;  Element formNode=XformBuilder.getElement(rootElement,XformBuilder.NODE_FORM);  if (formNode == null)   return;  PersonService ps=Context.getPersonService();  List<Relationship> relationships=new ArrayList<Relationship>();  for (int i=0; i < formNode.getChildCount(); i++) {    if (formNode.getType(i) != Element.ELEMENT || !RelationshipBuilder.NODE_PATIENT_RELATIONSHIP.equals(formNode.getElement(i).getName())) {      continue;    }    Element relationshipNode=formNode.getElement(i);    String uuid=relationshipNode.getAttributeValue(null,XformBuilder.ATTRIBUTE_UUID);    Person otherPerson=null;    RelationshipType relationshipType=null;    boolean isPersonA=false;    Person personA;    Person personB;    Element relationshipTypeNode=XformBuilder.getElement(relationshipNode,RelationshipBuilder.BIND_PATIENT_RELATIONSHIP_TYPE_ID);    if (relationshipTypeNode != null) {      String relationTypeIdString=XformBuilder.getTextValue(relationshipTypeNode);      if (StringUtils.isNotBlank(relationTypeIdString))       relationshipType=ps.getRelationshipType(Integer.valueOf(relationTypeIdString));      if (relationshipType == null)       throw new APIException("Cannot find relation type with id:" + relationTypeIdString);    }    Element AorBNode=XformBuilder.getElement(relationshipNode,RelationshipBuilder.BIND_PATIENT_RELATIONSHIP_A_OR_B);    if (AorBNode == null) {      throw new APIException("Cannot determine if the patient is A or B in the relationship:" + relationshipType.getName());    }    String AorB=XformBuilder.getTextValue(AorBNode);    if (AorB != null && ("A".equalsIgnoreCase(AorB) || "B".equalsIgnoreCase(AorB))) {      isPersonA="A".equalsIgnoreCase(AorB);    } else {      throw new APIException("Cannot determine if the patient is A or B in the relationship:" + relationshipType.getName());    }    Element relativeNode=XformBuilder.getElement(relationshipNode,RelationshipBuilder.BIND_RELATIVE);    if (relativeNode != null) {      Element relativeUuidNode=XformBuilder.getElement(relativeNode,RelationshipBuilder.BIND_RELATIVE_UUID);      if (relativeUuidNode != null) {        String relativeUuid=XformBuilder.getTextValue(relativeUuidNode);        if (StringUtils.isNotBlank(relativeUuid))         otherPerson=ps.getPersonByUuid(relativeUuid);      }    }    if (otherPerson == null)     throw new APIException("Cannot determine if the relattive in the relationship:" + relationshipType.getName());    if (isPersonA) {      personA=patient;      personB=otherPerson;    } else {      personB=patient;      personA=otherPerson;    }    Relationship relationship=null;    if (StringUtils.isNotBlank(uuid)) {      relationship=ps.getRelationshipByUuid(uuid);      if (relationship == null)       throw new APIException("Failed to find relationship with uuid:" + uuid);    } else {      relationship=new Relationship();      relationship.setRelationshipType(relationshipType);    }    relationship.setPersonA(personA);    relationship.setPersonB(personB);    relationships.add(relationship);  }  for (  Relationship relationship : relationships) {    ps.saveRelationship(relationship);  }}  }
class C{  public StorageUnitEntity createStorageUnitEntity(StorageEntity storageEntity,BusinessObjectDataEntity businessObjectDataEntity,String storageUnitStatus,String directoryPath){  StorageUnitStatusEntity storageUnitStatusEntity=storageUnitStatusDao.getStorageUnitStatusByCode(storageUnitStatus);  if (storageUnitStatusEntity == null) {    storageUnitStatusEntity=storageUnitStatusDaoTestHelper.createStorageUnitStatusEntity(storageUnitStatus);  }  return createStorageUnitEntity(storageEntity,businessObjectDataEntity,storageUnitStatusEntity,directoryPath);}  }
class C{  public Boolean isThemeConstant(String constantName){  String c=getThemeConstant(constantName,null);  if (c == null) {    return null;  }  if (c.equalsIgnoreCase("true") || c.equals("1")) {    return Boolean.TRUE;  }  return Boolean.FALSE;}  }
class C{  public void registerBiome(BiomeGenBase biome){  registeredBiomes.add(biome);}  }
class C{  final void internalSetModifiers(int pmodifiers){  supportedOnlyIn2();  preValueChange(MODIFIERS_PROPERTY);  this.modifierFlags=pmodifiers;  postValueChange(MODIFIERS_PROPERTY);}  }
class C{  private void verifyMinimumSupportedFirmwareVersion(ProtectionSystem system) throws ControllerException {  try {    String version=system.getMajorVersion();    String minimumSupportedVersion=VersionChecker.getMinimumSupportedVersion(Type.valueOf(system.getSystemType()));    _log.info("Verifying version details : Minimum Supported Version {} - Discovered Firmware Version {}",minimumSupportedVersion,version);    if (VersionChecker.verifyVersionDetails(minimumSupportedVersion,version) < 0) {      system.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.INCOMPATIBLE.name());      throw DeviceControllerExceptions.recoverpoint.versionNotSupported(version,minimumSupportedVersion);    } else {      system.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    }  } catch (  Exception ex) {    throw DeviceControllerExceptions.recoverpoint.verifyVersionFailed(ex.getMessage(),ex);  }}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  @RequestMapping(value="/namespaceIamRoleAuthorizations",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_POST) public NamespaceIamRoleAuthorization createNamespaceIamRoleAuthorization(@RequestBody NamespaceIamRoleAuthorizationCreateRequest request){  return namespaceIamRoleAuthorizationService.createNamespaceIamRoleAuthorization(request);}  }
class C{  public void testAdd(){  System.out.println("add");  AuditServiceListener listener=EasyMock.createMock(AuditServiceListener.class);  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  instance.add(listener);  assertEquals(1,instance.getListeners().size());}  }
class C{  public CaliforniumFormatter(){  logPolicy=new LogPolicy();}  }
class C{  protected void handleFileWorkingDirectoryButtonSelected(){  DirectoryDialog dialog=new DirectoryDialog(getShell(),SWT.SAVE);  dialog.setMessage(TypeScriptUIMessages.Launch_MainTab_select_workingDir);  dialog.setFilterPath(workDirectoryField.getText());  String text=dialog.open();  if (text != null) {    workDirectoryField.setText(text);  }}  }
class C{  boolean leafNodeNeedsBase(int p_76493_1_){  return (double)p_76493_1_ >= (double)this.heightLimit * 0.2D;}  }
class C{  public Graph(Table nodes,boolean directed,String nodeKey,String sourceKey,String targetKey){  Table edges=new Table();  edges.addColumn(sourceKey,int.class,new Integer(-1));  edges.addColumn(targetKey,int.class,new Integer(-1));  init(nodes,edges,directed,nodeKey,sourceKey,targetKey);}  }
class C{  private void maybeWriteTar(Codebase codebase) throws CommandException {  Preconditions.checkNotNull(codebase);  if (Strings.isNullOrEmpty(tarfile)) {    return;  }  cmd.runCommand("tar",ImmutableList.of("--mtime=1980-01-01","--owner=0","--group=0","-c","-f",tarfile,"."),codebase.path().getAbsolutePath());  ui.message("tar of codebase \"%s\" created at %s",codebase,tarfile);}  }
class C{  public void testIPv6Functions() throws Exception {  if (!versionMeetsMinimum(5,6,11)) {    return;  }  String[][] dataSamples=new String[][]{{"127.0.0.1","172.0.0.1"},{"192.168.1.1","::ffff:192.168.1.1"},{"10.1","::ffff:10.1"},{"172.16.260.4","172.16.260.4"},{"::1","::1"},{"10AA:10bb:10CC:10dd:10EE:10FF:10aa:10BB","10aa:10bb:10cc:10dd:10ee:10ff:10aa:10bb"},{"00af:0000:0000:0000:10af:000a:000b:0001","00af:0000:0000:0000:10af:000a:000b:0001"},{"48:4df1::0010:ad3:1100","48:4df1::0010:ad3:1100"},{"2000:abcd:1234:0000:efgh:1000:2000:3000","2000:abcd:1234:0000:efgh:1000:2000:3000"},{"2000:abcd:1234:0000:1000:2000:3000","2000:abcd:1234:0000:1000:2000:3000"}};  String[][] dataExpected=new String[][]{{"127.0.0.1","172.0.0.1"},{"192.168.1.1","::ffff:192.168.1.1"},{"10.0.0.1",null},{null,null},{null,"::1"},{null,"10aa:10bb:10cc:10dd:10ee:10ff:10aa:10bb"},{null,"af::10af:a:b:1"},{null,"48:4df1::10:ad3:1100"},{null,null},{null,null}};  createTable("testWL5787","(id INT AUTO_INCREMENT PRIMARY KEY, ipv4 INT UNSIGNED, ipv6 VARBINARY(16))");  Connection testConn=this.conn;  if (versionMeetsMinimum(5,7,10)) {    Properties props=new Properties();    props.put("jdbcCompliantTruncation","false");    String sqlMode=getMysqlVariable("sql_mode");    if (sqlMode.contains("STRICT_TRANS_TABLES")) {      sqlMode=removeSqlMode("STRICT_TRANS_TABLES",sqlMode);      props.put("sessionVariables","sql_mode='" + sqlMode + "'");    }    testConn=getConnectionWithProps(props);  }  this.pstmt=testConn.prepareStatement("INSERT INTO testWL5787 VALUES (NULL, INET_ATON(?), INET6_ATON(?))");  for (  String[] data : dataSamples) {    this.pstmt.setString(1,data[0]);    this.pstmt.setString(2,data[1]);    this.pstmt.addBatch();  }  int c=0;  for (  int r : this.pstmt.executeBatch()) {    c+=r;  }  assertEquals("Failed inserting data samples: wrong number of inserts.",dataSamples.length,c);  this.rs=this.stmt.executeQuery("SELECT id, INET_NTOA(ipv4), INET6_NTOA(ipv6) FROM testWL5787");  int i=0;  while (this.rs.next()) {    i=this.rs.getInt(1);    assertEquals("Wrong IPv4 data in row [" + i + "].",dataExpected[i - 1][0],this.rs.getString(2));    assertEquals("Wrong IPv6 data in row [" + i + "].",dataExpected[i - 1][1],this.rs.getString(3));  }  this.pstmt.close();  testConn.close();}  }
class C{  private TableCell cell(String content,int rowSpan,int colSpan,boolean noWrap){  TableCell cell=cell(content,rowSpan,colSpan,noWrap,"left","top");  return (cell);}  }
class C{  public void run(){  loadTab();}  }
class C{  private boolean ensureValidRect(){  if (mRectIsDirty) {    mRectIsDirty=false;    Rect bounds=getBounds();    float inset=0;    if (mStrokePaint != null) {      inset=mStrokePaint.getStrokeWidth() * 0.5f;    }    final GradientState st=mGradientState;    mRect.set(bounds.left + inset,bounds.top + inset,bounds.right - inset,bounds.bottom - inset);    final int[] colors=st.mColors;    if (colors != null) {      RectF r=mRect;      float x0, x1, y0, y1;      if (st.mGradient == LINEAR_GRADIENT) {        final float level=st.mUseLevel ? (float)getLevel() / 10000.0f : 1.0f;switch (st.mOrientation) {case TOP_BOTTOM:          x0=r.left;        y0=r.top;      x1=x0;    y1=level * r.bottom;  break;case TR_BL:x0=r.right;y0=r.top;x1=level * r.left;y1=level * r.bottom;break;case RIGHT_LEFT:x0=r.right;y0=r.top;x1=level * r.left;y1=y0;break;case BR_TL:x0=r.right;y0=r.bottom;x1=level * r.left;y1=level * r.top;break;case BOTTOM_TOP:x0=r.left;y0=r.bottom;x1=x0;y1=level * r.top;break;case BL_TR:x0=r.left;y0=r.bottom;x1=level * r.right;y1=level * r.top;break;case LEFT_RIGHT:x0=r.left;y0=r.top;x1=level * r.right;y1=y0;break;default :x0=r.left;y0=r.top;x1=level * r.right;y1=level * r.bottom;break;}mFillPaint.setShader(new LinearGradient(x0,y0,x1,y1,colors,st.mPositions,Shader.TileMode.CLAMP));if (!mGradientState.mHasSolidColor) {mFillPaint.setColor(mAlpha << 24);}} else if (st.mGradient == RADIAL_GRADIENT) {x0=r.left + (r.right - r.left) * st.mCenterX;y0=r.top + (r.bottom - r.top) * st.mCenterY;final float level=st.mUseLevel ? (float)getLevel() / 10000.0f : 1.0f;mFillPaint.setShader(new RadialGradient(x0,y0,level * st.mGradientRadius,colors,null,Shader.TileMode.CLAMP));if (!mGradientState.mHasSolidColor) {mFillPaint.setColor(mAlpha << 24);}} else if (st.mGradient == SWEEP_GRADIENT) {x0=r.left + (r.right - r.left) * st.mCenterX;y0=r.top + (r.bottom - r.top) * st.mCenterY;int[] tempColors=colors;float[] tempPositions=null;if (st.mUseLevel) {tempColors=st.mTempColors;final int length=colors.length;if (tempColors == null || tempColors.length != length + 1) {tempColors=st.mTempColors=new int[length + 1];}System.arraycopy(colors,0,tempColors,0,length);tempColors[length]=colors[length - 1];tempPositions=st.mTempPositions;final float fraction=1.0f / (float)(length - 1);if (tempPositions == null || tempPositions.length != length + 1) {tempPositions=st.mTempPositions=new float[length + 1];}final float level=(float)getLevel() / 10000.0f;for (int i=0; i < length; i++) {tempPositions[i]=i * fraction * level;}tempPositions[length]=1.0f;}mFillPaint.setShader(new SweepGradient(x0,y0,tempColors,tempPositions));if (!mGradientState.mHasSolidColor) {mFillPaint.setColor(mAlpha << 24);}}}}return !mRect.isEmpty();}  }
class C{  private boolean containsNullValue(){  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  private boolean cmd_saveProject(int C_Project_ID){  log.config("C_Project_ID=" + C_Project_ID);  MProject project=new MProject(Env.getCtx(),C_Project_ID,null);  if (project.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Project_ID=" + C_Project_ID);    return false;  }  int lineCount=0;  for (int i=0; i < m_selectionList.size(); i++) {    if (isSelectionSelected(m_selectionList.get(i))) {      BigDecimal qty=(BigDecimal)((VNumber)m_qtyList.get(i)).getValue();      int M_Product_ID=((Integer)m_productList.get(i)).intValue();      MProjectLine pl=new MProjectLine(project);      pl.setM_Product_ID(M_Product_ID);      pl.setPlannedQty(qty);      if (pl.save())       lineCount++; else       log.log(Level.SEVERE,"Line not saved");    }  }  log.config("#" + lineCount);  return true;}  }
class C{  private void populateLookup(RenameRequest rename) throws ReplicatorException {  if (!lookupSchemaTableCol.containsKey(rename.getOrigSchema())) {    Hashtable<String,Hashtable<String,RenameRequest>> lookupTableCol=new Hashtable<String,Hashtable<String,RenameRequest>>();    lookupSchemaTableCol.put(rename.getOrigSchema(),lookupTableCol);  }  Hashtable<String,Hashtable<String,RenameRequest>> lookupTableCol=lookupSchemaTableCol.get(rename.getOrigSchema());  if (!lookupTableCol.containsKey(rename.getOrigTable())) {    Hashtable<String,RenameRequest> lookupCol=new Hashtable<String,RenameRequest>();    lookupTableCol.put(rename.getOrigTable(),lookupCol);  }  Hashtable<String,RenameRequest> lookupCol=lookupTableCol.get(rename.getOrigTable());  if (!lookupCol.containsKey(rename.getOrigColumn())) {    lookupCol.put(rename.getOrigColumn(),rename);  } else   throw new ReplicatorException("Duplicate matching row: " + rename.toString());}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  if (SynthLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof IndexedPropertyDescriptor)) {    return false;  }  IndexedPropertyDescriptor other=(IndexedPropertyDescriptor)obj;  return (super.equals(other) && (indexedPropertyType == null ? other.indexedPropertyType == null : indexedPropertyType.equals(other.indexedPropertyType)) && (indexedGetter == null ? other.indexedGetter == null : indexedGetter.equals(other.indexedGetter))&& (indexedSetter == null ? other.indexedSetter == null : indexedSetter.equals(other.indexedSetter)));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCIES__PROJECT_DEPENDENCIES:    return ((InternalEList<?>)getProjectDependencies()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public boolean isSynchronous(){  return mode == DispatchMode.SYNCHRONOUS;}  }
class C{  public int foo(){  return 10;}  }
class C{  public static void addStartupListener(StartUpListener s){  m_StartupListeners.add(s);}  }
class C{  public void register(Function function,Object source,boolean addARQFunction){  functions.put(function.getURI(),function);  if (source != null) {    sources.put(function.asNode(),source);  }  ExtraPrefixes.add(function);  if (addARQFunction) {    registerARQFunction(function);    if (function.isMagicProperty()) {      registerARQPFunction(function);    }  }}  }
class C{  protected SymmetricMatrix secureAdd(SymmetricMatrix a){  return new SymmetricMatrix(addComponents(a));}  }
class C{  private Cache createCache() throws Exception {  Properties props=new Properties();  DistributedSystem ds=getSystem(props);  ds.disconnect();  ds=getSystem(props);  Cache cache=null;  cache=CacheFactory.create(ds);  if (cache == null) {    throw new Exception("CacheFactory.create() returned null ");  }  return cache;}  }
class C{  public void decrement(){  super.set(Long.valueOf(super.get().longValue() - 1));}  }
class C{  public static org.oscm.internal.vo.VOServiceReview convertToUp(org.oscm.vo.VOServiceReview oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceReview newVO=new org.oscm.internal.vo.VOServiceReview();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setTitle(oldVO.getTitle());  newVO.setComment(oldVO.getComment());  newVO.setRating(oldVO.getRating());  newVO.setModificationDate(oldVO.getModificationDate());  newVO.setProductKey(oldVO.getProductKey());  newVO.setUserId(oldVO.getUserId());  newVO.setUserName(oldVO.getUserName());  return newVO;}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public boolean isInteger(){  return (m_Integer != null);}  }
class C{  public void clear(){  tabs.removeAll();  inspectors.clear();}  }
class C{  public T caseTypedElement(TypedElement object){  return null;}  }
class C{  public DomainObjectException(String message){  super(message);}  }
class C{  public void removeContentProposalListener(ICompletionProposalListener listener){  proposalListeners2.remove(listener);}  }
class C{  protected Object doCreateFromCapabilities(OGCCapabilities caps,AVList params){  return null;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public List<DefaultItem> load() throws SAXException, IOException {  final GroupsXMLLoader groupsLoader=new GroupsXMLLoader(uri);  final List<URI> groups=groupsLoader.load();  final ItemsXMLLoader loader=new ItemsXMLLoader();  final List<DefaultItem> list=new LinkedList<DefaultItem>();  for (  final URI groupUri : groups) {    LOGGER.debug("Loading item group [" + groupUri + "]");    list.addAll(loader.load(groupUri));  }  return list;}  }
class C{  protected HistoryEntryImpl(){  super();}  }
class C{  public void step(SimState state){  takeMobilityTraceStep();}  }
class C{  public MimeVersionParser(String mimeVersion){  super(mimeVersion);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int nRows, nCols;  double z;  int progress=0;  int i, a;  double noData=-32768;  double outputNoData=-32768;  String inputDataString=null;  int numImages=0;  double sumOfWeights=0;  double d=0;  double weight=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String[] dataSplit=args[0].split(";");  outputHeader=args[1];  if (outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  ArrayList<String> imageFiles=new ArrayList<>();  ArrayList<Double> weights=new ArrayList<>();  for (a=0; a < dataSplit.length; a+=2) {    if (!dataSplit[a].trim().equals("") && !dataSplit[a].trim().toLowerCase().equals("not specified")) {      imageFiles.add(dataSplit[a]);      weights.add(Double.parseDouble(dataSplit[a + 1]));      sumOfWeights+=weights.get(numImages);      numImages++;    }  }  for (a=0; a < numImages; a++) {    d=weights.get(a) / sumOfWeights;    weights.set(a,d);  }  try {    image=new WhiteboxRaster(imageFiles.get(0),"r");    nRows=image.getNumberRows();    nCols=image.getNumberColumns();    outputNoData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",imageFiles.get(0),WhiteboxRaster.DataType.FLOAT,0);    for (i=0; i < numImages; i++) {      progress=(int)(100f * (i + 1) / numImages);      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      weight=weights.get(i);      if (i > 0) {        image=new WhiteboxRaster(imageFiles.get(i),"r");        noData=image.getNoDataValue();        if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      double[] data=null;      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=output.getValue(row,col);            if (z != outputNoData) {              output.setValue(row,col,z + data[col] * weight);            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected HARegionQueue createHARegionQueue(String name) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,HARegionQueue.BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public boolean isShowSummary(){  return (Boolean)getStateHelper().eval(PropertyKeys.showSummary,false);}  }
class C{  public static List<Object> extractRawValues(String path,Map<String,Object> map){  List<Object> values=new ArrayList<>();  String[] pathElements=Strings.splitStringToArray(path,'.');  if (pathElements.length == 0) {    return values;  }  extractRawValues(values,map,pathElements,0);  return values;}  }
class C{  public void println(long x){  return;}  }
class C{  public static void loadFromConfigFiles(Properties propertyFile,String configFileName) throws Exception {  Enumeration<URL> resources=Thread.currentThread().getContextClassLoader().getResources(configFileName);  while (resources.hasMoreElements()) {    URL url=resources.nextElement();    URLStreamManager streamManager=new URLStreamManager(url);    propertyFile.load(streamManager.open());    streamManager.close();  }}  }
class C{  public static long bytesLEtoLong(byte[] b,int offset){  if ((b.length - offset) < 8) {    throw new IllegalArgumentException("Less then 8 bytes starting from offset:" + offset);  }  long m=0;  for (int i=0; i < 8; i++) {    m|=((((long)b[i + offset]) & 0xff) << (8 * i));  }  return m;}  }
class C{  public static Method reply(){  return create(REPLY);}  }
class C{  public static boolean isPresent(String[] array,String element){  if (!isNull(array))   for (  String item : array)   if (element.matches(item))   return true;  return false;}  }
class C{  public double eval(double params[]){  return ((Math.PI / 2.0) - Math.atan(params[0]));}  }
class C{  public static Ed25519EncodedFieldElement multiplyAndAddModGroupOrder(final Ed25519EncodedFieldElement a,final Ed25519EncodedFieldElement b,final Ed25519EncodedFieldElement c){  final BigInteger result=toBigInteger(a).multiply(toBigInteger(b)).add(toBigInteger(c)).mod(Ed25519Group.GROUP_ORDER);  return toEncodedFieldElement(result);}  }
class C{  public static int parseDtsAudioSampleCount(byte[] data){  int nblks=((data[4] & 0x01) << 6) | ((data[5] & 0xFC) >> 2);  return (nblks + 1) * 32;}  }
class C{  private void tryDoFirstLight(){  BlockPos pos=this.getCoords().getMinBlockPos();  final int radius=17;  if (!world.isAreaLoaded(pos.add(-radius,-radius,-radius),pos.add(15 + radius,15 + radius,15 + radius))) {    return;  }  ((ICubicWorldServer)this.world).getFirstLightProcessor().diffuseSkylight(this);  this.isInitialLightingDone=true;}  }
class C{  @SuppressWarnings("unchecked") public <T>T unwrap(final Class<T> iface) throws SQLException {  try {    if (isWrapperFor(iface)) {      return (T)this;    } else {      throw new SQLException("The receiver is not a wrapper and does not implement the interface");    }  } catch (  Exception e) {    throw new SQLException("The receiver is not a wrapper and does not implement the interface");  }}  }
class C{  public GuacamoleResourceNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  public MMRoll(MMRandom rng,int max){  super(max,0);  this.total=rng.randomInt(this.faces) + this.min;  all.addElement(this.total);}  }
class C{  protected StateSpecificationImpl(){  super();}  }
class C{  public List<ErrorLogger.ErrorObject> build() throws IOException, ParserConfigurationException, SAXException, JAXBException {  org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType cplRoot=IMFCPLObjectFieldsFactory.constructCompositionPlaylistType_2016();  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  cplRoot.setId(UUIDHelper.fromUUID(this.uuid));  cplRoot.setAnnotation(this.annotationText);  cplRoot.setIssueDate(IMFUtils.createXMLGregorianCalendar());  cplRoot.setIssuer(this.issuer);  cplRoot.setCreator(this.creator);  cplRoot.setContentOriginator(null);  cplRoot.setContentTitle(buildCPLUserTextType_2016("Not Included","en"));  cplRoot.setContentKind(null);  org.smpte_ra.schemas.st2067_2_2016.ContentVersionType contentVersionType=buildContentVersionType(IMFUUIDGenerator.getInstance().getUrnUUID(),buildCPLUserTextType_2016("Photon CompositionPlaylistBuilder","en"));  List<org.smpte_ra.schemas.st2067_2_2016.ContentVersionType> contentVersionTypeList=new ArrayList<>();  contentVersionTypeList.add(contentVersionType);  cplRoot.setContentVersionList(buildContentVersionList(contentVersionTypeList));  cplRoot.setLocaleList(null);  cplRoot.setExtensionProperties(null);  cplRoot.getEditRate().addAll(this.compositionEditRate);  cplRoot.setCompositionTimecode(null);  cplRoot.setTotalRunningTime(LocalTime.MIN.plusSeconds(totalRunningTime).toString());  List<org.smpte_ra.schemas.st2067_2_2016.EssenceDescriptorBaseType> essenceDescriptorList=new ArrayList<>();  List<CompositionPlaylistBuilder_2016.SequenceTypeTuple> sequenceTypeTuples=new ArrayList<>();  for (  Composition.VirtualTrack virtualTrack : virtualTracks) {    essenceDescriptorList.addAll(buildEDLForVirtualTrack(virtualTrack));    List<org.smpte_ra.schemas.st2067_2_2016.BaseResourceType> trackResourceList=buildTrackResourceList(virtualTrack);    UUID sequenceId=IMFUUIDGenerator.getInstance().generateUUID();    UUID trackId=IMFUUIDGenerator.getInstance().generateUUID();    SequenceTypeTuple sequenceTypeTuple=buildSequenceTypeTuple(sequenceId,trackId,buildResourceList(trackResourceList),virtualTrack.getSequenceTypeEnum());    sequenceTypeTuples.add(sequenceTypeTuple);  }  org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.EssenceDescriptorList essenceDescriptorListType=buildEssenceDescriptorList(essenceDescriptorList);  cplRoot.setEssenceDescriptorList(essenceDescriptorListType);  UUID segmentId=IMFUUIDGenerator.getInstance().generateUUID();  org.smpte_ra.schemas.st2067_2_2016.SegmentType segmentType=buildSegment(segmentId,buildCPLUserTextType_2016("Segment-1","en"));  populateSequenceListForSegment(sequenceTypeTuples,segmentType);  cplRoot.setSegmentList(buildSegmentList(new ArrayList<SegmentType>(){{      add(segmentType);    }  }));  cplRoot.setSigner(null);  cplRoot.setSignature(null);  try {    String nodeString="<ApplicationIdentification xmlns=\"http://www.smpte-ra.org/schemas/2067-2/2016\">" + this.applicationId + "</ApplicationIdentification>";    Element element=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(nodeString.getBytes("UTF-8"))).getDocumentElement();    org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.ExtensionProperties extensionProperties=new org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.ExtensionProperties();    extensionProperties.getAny().add(element);    cplRoot.setExtensionProperties(extensionProperties);  } catch (  SAXException ex) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,"Failed to create DOM node for ApplicationIdentification");  }  File outputFile=new File(this.workingDirectory + File.separator + this.cplFileName);  serializeCPLToXML(cplRoot,outputFile);  return imfErrorLogger.getErrors();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.109 -0500",hash_original_method="76B5FD8D10654A26BCBBF314A697FBF8",hash_generated_method="D767C5066EA6C12716CC36785DA5ED59") public void copy1DRangeFromUnchecked(int off,int count,short[] d){  int dataSize=mType.mElement.getSizeBytes() * count;  data1DChecks(off,count,d.length * 2,dataSize);  mRS.nAllocationData1D(getIDSafe(),off,mSelectedLOD,count,d,dataSize);}  }
class C{  public final Class<? extends Annotation> loadExternalAnnotationClass(final String annoName){  try {    final Class<? extends Annotation> annoClass=Class.forName(annoName,true,getAppClassLoader()).asSubclass(Annotation.class);    return annoClass;  } catch (  ClassNotFoundException e) {    checker.userErrorAbort(checker.getClass().getSimpleName() + ": could not load class for annotation: " + annoName+ "; ensure that your classpath is correct");  }catch (  ClassCastException e) {    checker.userErrorAbort(checker.getClass().getSimpleName() + ": class " + annoName+ " is not an annotation");  }  return null;}  }
class C{  public String allocateLandedCosts(){  if (isProcessed())   return "Processed";  MLandedCost[] lcs=MLandedCost.getLandedCosts(this);  if (lcs.length == 0)   return "";  String sql="DELETE C_LandedCostAllocation WHERE C_InvoiceLine_ID=" + getC_InvoiceLine_ID();  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.info("Deleted #" + no);  int inserted=0;  if (lcs.length == 1) {    MLandedCost lc=lcs[0];    if (lc.getM_InOut_ID() != 0 && lc.getM_InOutLine_ID() == 0) {      ArrayList<MInOutLine> list=new ArrayList<MInOutLine>();      MInOut ship=new MInOut(getCtx(),lc.getM_InOut_ID(),get_TrxName());      MInOutLine[] lines=ship.getLines();      for (int i=0; i < lines.length; i++) {        if (lines[i].isDescription() || lines[i].getM_Product_ID() == 0)         continue;        if (lc.getM_Product_ID() == 0 || lc.getM_Product_ID() == lines[i].getM_Product_ID())         list.add(lines[i]);      }      if (list.size() == 0)       return "No Matching Lines (with Product) in Shipment";      BigDecimal total=Env.ZERO;      for (int i=0; i < list.size(); i++) {        MInOutLine iol=(MInOutLine)list.get(i);        total=total.add(iol.getBase(lc.getLandedCostDistribution()));      }      if (total.signum() == 0)       return "Total of Base values is 0 - " + lc.getLandedCostDistribution();      for (int i=0; i < list.size(); i++) {        MInOutLine iol=(MInOutLine)list.get(i);        MLandedCostAllocation lca=new MLandedCostAllocation(this,lc.getM_CostElement_ID());        lca.setM_Product_ID(iol.getM_Product_ID());        lca.setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());        lca.setM_InOutLine_ID(iol.getM_InOutLine_ID());        BigDecimal base=iol.getBase(lc.getLandedCostDistribution());        lca.setBase(base);        lca.setQty(iol.getMovementQty());        if (base.signum() != 0) {          double result=getLineNetAmt().multiply(base).doubleValue();          result/=total.doubleValue();          lca.setAmt(result,getPrecision());        }        if (!lca.save())         return "Cannot save line Allocation = " + lca;        inserted++;      }      log.info("Inserted " + inserted);      allocateLandedCostRounding();      return "";    } else     if (lc.getM_InOutLine_ID() != 0) {      MInOutLine iol=new MInOutLine(getCtx(),lc.getM_InOutLine_ID(),get_TrxName());      if (iol.isDescription() || iol.getM_Product_ID() == 0)       return "Invalid Receipt Line - " + iol;      MLandedCostAllocation lca=new MLandedCostAllocation(this,lc.getM_CostElement_ID());      lca.setM_Product_ID(iol.getM_Product_ID());      lca.setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());      BigDecimal base=iol.getBase(lc.getLandedCostDistribution());      lca.setBase(base);      lca.setAmt(getLineNetAmt());      lca.setQty(iol.getMovementQty());      if (lca.save())       return "";      return "Cannot save single line Allocation = " + lc;    } else     if (lc.getM_Product_ID() != 0) {      MLandedCostAllocation lca=new MLandedCostAllocation(this,lc.getM_CostElement_ID());      lca.setM_Product_ID(lc.getM_Product_ID());      lca.setAmt(getLineNetAmt());      if (lca.save())       return "";      return "Cannot save Product Allocation = " + lc;    } else     return "No Reference for " + lc;  }  String LandedCostDistribution=lcs[0].getLandedCostDistribution();  int M_CostElement_ID=lcs[0].getM_CostElement_ID();  for (int i=0; i < lcs.length; i++) {    MLandedCost lc=lcs[i];    if (!LandedCostDistribution.equals(lc.getLandedCostDistribution()))     return "Multiple Landed Cost Rules must have consistent Landed Cost Distribution";    if (lc.getM_Product_ID() != 0 && lc.getM_InOut_ID() == 0 && lc.getM_InOutLine_ID() == 0)     return "Multiple Landed Cost Rules cannot directly allocate to a Product";    if (M_CostElement_ID != lc.getM_CostElement_ID())     return "Multiple Landed Cost Rules cannot different Cost Elements";  }  ArrayList<MInOutLine> list=new ArrayList<MInOutLine>();  for (int ii=0; ii < lcs.length; ii++) {    MLandedCost lc=lcs[ii];    if (lc.getM_InOut_ID() != 0 && lc.getM_InOutLine_ID() == 0) {      MInOut ship=new MInOut(getCtx(),lc.getM_InOut_ID(),get_TrxName());      MInOutLine[] lines=ship.getLines();      for (int i=0; i < lines.length; i++) {        if (lines[i].isDescription() || lines[i].getM_Product_ID() == 0)         continue;        if (lc.getM_Product_ID() == 0 || lc.getM_Product_ID() == lines[i].getM_Product_ID())         list.add(lines[i]);      }    } else     if (lc.getM_InOutLine_ID() != 0) {      MInOutLine iol=new MInOutLine(getCtx(),lc.getM_InOutLine_ID(),get_TrxName());      if (!iol.isDescription() && iol.getM_Product_ID() != 0)       list.add(iol);    }  }  if (list.size() == 0)   return "No Matching Lines (with Product)";  BigDecimal total=Env.ZERO;  for (int i=0; i < list.size(); i++) {    MInOutLine iol=(MInOutLine)list.get(i);    total=total.add(iol.getBase(LandedCostDistribution));  }  if (total.signum() == 0)   return "Total of Base values is 0 - " + LandedCostDistribution;  for (int i=0; i < list.size(); i++) {    MInOutLine iol=(MInOutLine)list.get(i);    MLandedCostAllocation lca=new MLandedCostAllocation(this,lcs[0].getM_CostElement_ID());    lca.setM_Product_ID(iol.getM_Product_ID());    lca.setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());    BigDecimal base=iol.getBase(LandedCostDistribution);    lca.setBase(base);    lca.setQty(iol.getMovementQty());    if (base.signum() != 0) {      double result=getLineNetAmt().multiply(base).doubleValue();      result/=total.doubleValue();      lca.setAmt(result,getPrecision());    }    if (!lca.save())     return "Cannot save line Allocation = " + lca;    inserted++;  }  log.info("Inserted " + inserted);  allocateLandedCostRounding();  return "";}  }
class C{  private static void assertArgument(boolean expression,String message){  if (expression) {    throw new IllegalArgumentException(message);  }}  }
class C{  void newConditionalPressed(ActionEvent e){  if (checkEditConditional()) {    return;  }  if (_curLogix.getSystemName().equals(SensorGroupFrame.logixSysName)) {    javax.swing.JOptionPane.showMessageDialog(editLogixFrame,java.text.MessageFormat.format(rbx.getString("Warn8"),new Object[]{SensorGroupFrame.logixUserName,SensorGroupFrame.logixSysName}),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);    return;  }  int num=_curLogix.getNumConditionals() + 1;  _curConditional=null;  String cName=null;  while (_curConditional == null) {    cName=_curLogix.getSystemName() + "C" + Integer.toString(num);    _curConditional=_conditionalManager.createNewConditional(cName,"");    num++;    if (num == 1000) {      break;    }  }  if (_curConditional == null) {    log.error("Failure to create Conditional with System Name: " + cName);    return;  }  _curLogix.addConditional(cName,-1);  conditionalTableModel.fireTableRowsInserted(numConditionals,numConditionals);  conditionalRowNumber=numConditionals;  numConditionals++;  _showReminder=true;  _actionList=new ArrayList<ConditionalAction>();  _variableList=new ArrayList<ConditionalVariable>();  makeEditConditionalWindow();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.671 -0500",hash_original_method="F442F4A57014D62724BCC0FFB03CA549",hash_generated_method="7CBF6AECDEAC88AF1032F8EF8101BFA7") public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,Object content) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reason=SIPResponse.getReasonPhrase(statusCode);  if (reason == null)   throw new ParseException(statusCode + " Unknown",0);  statusLine.setReasonPhrase(reason);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  static byte[] toIntegerBytes(final BigInteger bigInt){  int bitlen=bigInt.bitLength();  bitlen=((bitlen + 7) >> 3) << 3;  final byte[] bigBytes=bigInt.toByteArray();  if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {    return bigBytes;  }  int startSrc=0;  int len=bigBytes.length;  if ((bigInt.bitLength() % 8) == 0) {    startSrc=1;    len--;  }  final int startDst=bitlen / 8 - len;  final byte[] resizedBytes=new byte[bitlen / 8];  System.arraycopy(bigBytes,startSrc,resizedBytes,startDst,len);  return resizedBytes;}  }
class C{  private AttributeSet removeHTMLTags(AttributeSet old,AttributeSet attr){  if (!(attr instanceof LargeConversionSet) && !(attr instanceof SmallConversionSet)) {    Enumeration names=attr.getAttributeNames();    while (names.hasMoreElements()) {      Object key=names.nextElement();      if (key instanceof StyleConstants) {        HTML.Tag tag=HTML.getTagForStyleConstantsKey((StyleConstants)key);        if (tag != null && old.isDefined(tag)) {          old=super.removeAttribute(old,tag);        }      }    }  }  return old;}  }
class C{  private static <E>List<TypeAdapter> buildKnownAdapters(){  List<TypeAdapter> result=Lists.newArrayList();  result.add(new TypeAdapter(CollapseDataWrapper.class,new CollapseDataWrapperAdapter<E>()));  result.add(new TypeAdapter(CollapseTreeRoot.class,new CollapseTreeRootAdapter<E>()));  result.add(new TypeAdapter(HierarchyRoot.class,new HierarchyRootAdapter()));  result.add(new TypeAdapter(NodeWrapper.class,new NodeWrapperAdapter<E>()));  result.add(new TypeAdapter(NodeWrapperRoot.class,new NodeWrapperRootAdapter<E>()));  result.add(new TypeAdapter(SolitaryRoot.class,new SolitaryRootAdapter()));  result.add(new TypeAdapter(ViewerRoot.class,new ViewerRootAdapter()));  return result;}  }
class C{  protected void cleanupS3(){  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=getTestS3FileTransferRequestParamsDto();  for (  String s3KeyPrefix : new String[]{S3_TEST_PARENT_PATH_V0,S3_TEST_PARENT_PATH_V1,S3_TEST_PATH_V0,S3_TEST_PATH_V1,S3_SIMPLE_TEST_PATH}) {    s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefix);    if (!s3Service.listDirectory(s3FileTransferRequestParamsDto).isEmpty()) {      s3Service.deleteDirectory(s3FileTransferRequestParamsDto);    }  }}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public synchronized void updateLayerLabels(){  if (layerHandler != null) {    setLayers(layerHandler.getLayers());  }}  }
class C{  public void addAnnotation(String lineId,int pointIdx,String annotation){  addAnnotation(getLineIndex(lineId),pointIdx,annotation,-0.78f);}  }
class C{  private void transferData(State state,InputStream in,OutputStream out) throws StopRequestException {  StorageSpaceVerifier spaceVerifier=new StorageSpaceVerifier(storageManager,originalDownloadInfo.getDestination(),state.filename);  DataWriter checkedWriter=new CheckedWriter(spaceVerifier,out);  DataWriter dataWriter=new NotifierWriter(getContentResolver(),checkedWriter,downloadNotifier,originalDownloadInfo,checkOnWrite);  DataTransferer dataTransferer;  if (originalDownloadInfo.shouldAllowTarUpdate(state.mimeType)) {    dataTransferer=new TarTruncator(dataWriter);  } else {    dataTransferer=new RegularDataTransferer(dataWriter);  }  State newState=dataTransferer.transferData(state,in);  handleEndOfStream(newState);}  }
class C{  private void updateButtons(){  boolean favoriteSelected=false;  boolean nonFavoriteSelected=false;  for (  String game : list.getSelectedValuesList()) {    if (favorites.contains(game)) {      favoriteSelected=true;    } else {      nonFavoriteSelected=true;    }  }  addToFavoritesButton.setEnabled(nonFavoriteSelected);  removeFromFavoritesButton.setEnabled(favoriteSelected);}  }
class C{  public int available() throws IOException {  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  return xzIn == null ? 0 : xzIn.available();}  }
class C{  private void checkCoverTree(Node cur,int[] counts,int depth){  counts[0]+=1;  counts[1]+=depth;  counts[2]=depth > counts[2] ? depth : counts[2];  counts[3]+=cur.singletons.size() - 1;  counts[4]+=cur.singletons.size() - (cur.children == null ? 0 : 1);  if (cur.children != null) {    ++depth;    for (    Node chi : cur.children) {      checkCoverTree(chi,counts,depth);    }    assert (!cur.children.isEmpty()) : "Empty childs list.";  }}  }
class C{  public static byte[] toByteArray(Short[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].byteValue();  }  return result;}  }
class C{  public void annotate(final NEWord startword){  for (int i=0; i < dictionaries.size(); i++) {    dictionaries.get(i).match(startword);    dictionariesIgnoreCase.get(i).match(startword);  }}  }
class C{  public static boolean isLocal(Declaration decl){  return isLocalNotInitializer(decl) || isLocalToInitializer(decl);}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public void testAddContextParamToEmptyDocument() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlElement contextParamElement=createContextParamElement(webXml.getDescriptorType(),"param","value");  webXml.addTag(contextParamElement);  assertTrue(WebXmlUtils.hasContextParam(webXml,"param"));}  }
class C{  protected int defaultNumExamples(){  return 100;}  }
class C{  public CSSEncoder(Mode mode){  _mode=mode;  _lowMask=mode.lowMask();  _highMask=mode.highMask();}  }
class C{  public void initializeAfterLoading(){  super.initializeAfterLoading();  Utils.removeEmptyStringsFromList(tags);}  }
class C{  public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){  long st=System.nanoTime();  int res=_db.read(table,key,fields,result);  long en=System.nanoTime();  _measurements.measure("READ",(int)((en - st) / 1000));  _measurements.reportReturnCode("READ",res);  return res;}  }
class C{  public String tag(String inner,String c1,String c2){  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;  String s="[";  if (color)   s+="<" + c1 + ">";  s+=inner;  if (color)   s+="<" + c2 + ">";  s+="] ";  if (color)   s+="<" + c1 + ">";  return color ? Pretty.format(s) : s;}  }
class C{  public ExtraTree(){  this(Integer.MAX_VALUE,5);}  }
class C{  private String nextToInternal(String excluded){  int start=pos;  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n' || excluded.indexOf(c) != -1) {      return in.substring(start,pos);    }  }  return in.substring(start);}  }
class C{  private SimilarityMatrix computeSimilarityMatrixImage(Relation<O> relation,DBIDIter iter){  ArrayModifiableDBIDs order=DBIDUtil.newArray(relation.size());  for (; iter.valid(); iter.advance()) {    order.add(iter);  }  if (order.size() != relation.size()) {    throw new IllegalStateException("Iterable result doesn't match database size - incomplete ordering?");  }  DistanceQuery<O> dq=distanceFunction.instantiate(relation);  final int size=order.size();  final int ltotal=2 * size;  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Similarity Matrix Image",ltotal,LOG) : null;  DoubleMinMax minmax=new DoubleMinMax();{    DBIDArrayIter id1=order.iter();    DBIDArrayIter id2=order.iter();    for (; id1.valid(); id1.advance()) {      id2.seek(id1.getOffset());      for (; id2.valid(); id2.advance()) {        final double dist=dq.distance(id1,id2);        if (!Double.isNaN(dist) && !Double.isInfinite(dist)) {          if (!skipzero || dist > 0.0) {            minmax.put(dist);          }        }      }      LOG.incrementProcessed(prog);    }  }  double zoom=minmax.getMax() - minmax.getMin();  if (zoom > 0.0) {    zoom=1. / zoom;  }  LinearScaling scale=new LinearScaling(zoom,-minmax.getMin() * zoom);  BufferedImage img=new BufferedImage(size,size,BufferedImage.TYPE_INT_RGB);{    DBIDArrayIter id1=order.iter();    DBIDArrayIter id2=order.iter();    for (int x=0; x < size && id1.valid(); x++, id1.advance()) {      id2.seek(id1.getOffset());      for (int y=x; y < size && id2.valid(); y++, id2.advance()) {        double ddist=dq.distance(id1,id2);        if (ddist > 0.0) {          ddist=scale.getScaled(ddist);        }        if (scaling != null) {          ddist=scaling.getScaled(ddist);        }        int dist=0xFF & (int)(255 * ddist);        int col=0xff000000 | (dist << 16) | (dist << 8)| dist;        img.setRGB(x,y,col);        img.setRGB(y,x,col);      }      LOG.incrementProcessed(prog);    }  }  LOG.ensureCompleted(prog);  return new SimilarityMatrix(img,relation,order);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Activate protected void activate(Map<String,Object> properties){}  }
class C{  public boolean synchronize(DBObject_Table_Column sourceColumn){  boolean success=true;  String vendor=m_parent.getVendor();  String catalog=m_parent.getCatalog();  String schema=m_parent.getSchema();  String sql=null;  Statement stmt=m_parent.setStatement();  String sourceName=sourceColumn.getName();  String targetName=m_name;  if (!targetName.equalsIgnoreCase(sourceName)) {    sql=s_dbEngine.sqlObjectDetail_renameColumn(vendor,catalog,schema,m_table,m_name,sourceName);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    targetName=sourceName;    setName(targetName);  }  String sourceType=s_dbEngine.translateDataType(sourceColumn.getParent().getVendor(),vendor,sourceColumn.getType(),sourceColumn.getSize(),sourceColumn.getPrecision());  String targetType=s_dbEngine.translateDataType(vendor,vendor,m_type,m_size,m_precision);  if (!targetType.equals(sourceType)) {    sql=s_dbEngine.sqlObjectDetail_createTemporaryColumn(vendor,catalog,schema,m_table,sourceType);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    sql=s_dbEngine.sqlObjectDetail_saveTemporaryColumn(vendor,catalog,schema,m_table,m_name,sourceType);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    if (!isNullable()) {      sql=s_dbEngine.sqlObjectDetail_setColumnNullable(vendor,catalog,schema,m_table,m_name);      if (m_parent.executeUpdate(stmt,sql,false,false) == null)       success=false;      setNullable(true);    }    if (m_default != null) {      sql=s_dbEngine.sqlObjectDetail_dropColumnDefault(vendor,catalog,schema,m_table,m_name);      if (m_parent.executeUpdate(stmt,sql,false,false) == null)       success=false;      setDefault(null);    }    sql=s_dbEngine.sqlObjectDetail_eraseColumn(vendor,catalog,schema,m_table,m_name);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    sql=s_dbEngine.sqlObjectDetail_modifyColumnType(vendor,catalog,schema,m_table,m_name,sourceType);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    setType(sourceColumn.getType());    setSize(sourceColumn.getSize());    setPrecision(sourceColumn.getPrecision());    sql=s_dbEngine.sqlObjectDetail_restoreTemporaryColumn(vendor,catalog,schema,m_table,m_name);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    sql=s_dbEngine.sqlObjectDetail_dropTemporaryColumn(vendor,catalog,schema,m_table);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;  }  String sourceDefault=sourceColumn.getDefault();  if (sourceDefault != null)   sourceDefault=s_dbEngine.translateExpression(sourceColumn.getParent().getVendor(),vendor,sourceDefault).trim();  String targetDefault=m_default;  if (targetDefault != null)   targetDefault=targetDefault.trim();  if (sourceDefault == null) {    if (targetDefault != null) {      sql=s_dbEngine.sqlObjectDetail_dropColumnDefault(vendor,catalog,schema,m_table,m_name);      if (m_parent.executeUpdate(stmt,sql,false,false) == null)       success=false;      setDefault(null);    }  } else {    if (targetDefault == null || !targetDefault.equals(sourceDefault)) {      sql=s_dbEngine.sqlObjectDetail_setColumnDefault(vendor,catalog,schema,m_table,m_name,sourceDefault);      if (m_parent.executeUpdate(stmt,sql,false,false) == null)       success=false;      setDefault(sourceDefault);    }  }  if (sourceColumn.isNullable() && this.isNotNullable()) {    sql=s_dbEngine.sqlObjectDetail_setColumnNullable(vendor,catalog,schema,m_table,m_name);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    setNullable(true);  } else   if (sourceColumn.isNotNullable() && this.isNullable()) {    sql=s_dbEngine.sqlObjectDetail_prepareColumnNotNullable(vendor,catalog,schema,m_table,m_name,m_type,m_default);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    sql=s_dbEngine.sqlObjectDetail_dropColumnNullable(vendor,catalog,schema,m_table,m_name);    if (m_parent.executeUpdate(stmt,sql,false,false) == null)     success=false;    setNullable(false);  }  m_parent.releaseStatement(stmt);  return success;}  }
class C{  public FastAdapterDialog<Item> withNegativeButton(String text){  return withButton(BUTTON_NEGATIVE,text,null);}  }
class C{  private ODGFigure createLineFigure(Point2D.Double p1,Point2D.Double p2,Map<AttributeKey,Object> a) throws IOException {  ODGPathFigure figure=new ODGPathFigure();  figure.setBounds(p1,p2);  figure.setAttributes(a);  return figure;}  }
class C{  public boolean waitUntilStarted(int timeout){  int cnt=0;  while (cnt < timeout) {    if (isStarted()) {      log.info("Dbsvc startup OK");      return true;    }    sleep(4);    cnt++;  }  return false;}  }
class C{  public void delete(int key){  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public DateEditor(JSpinner spinner,String dateFormatPattern){  this(spinner,new SimpleDateFormat(dateFormatPattern,spinner.getLocale()));}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Boolean isDelegatable(){  return delegatable;}  }
class C{  public String toString(){  return uri;}  }
class C{  public AbstractProblem(int numberOfVariables,int numberOfObjectives){  this(numberOfVariables,numberOfObjectives,0);}  }
class C{  public static void end(){  Log.writeln("<xml-end/> <!-- Non-xml data follows ... -->");}  }
class C{  private void extractParameters(ResultPoint[] bullsEyeCorners) throws NotFoundException {  if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || !isValid(bullsEyeCorners[2])|| !isValid(bullsEyeCorners[3])) {    throw NotFoundException.getNotFoundInstance();  }  int length=2 * nbCenterLayers;  int[] sides={sampleLine(bullsEyeCorners[0],bullsEyeCorners[1],length),sampleLine(bullsEyeCorners[1],bullsEyeCorners[2],length),sampleLine(bullsEyeCorners[2],bullsEyeCorners[3],length),sampleLine(bullsEyeCorners[3],bullsEyeCorners[0],length)};  shift=getRotation(sides,length);  long parameterData=0;  for (int i=0; i < 4; i++) {    int side=sides[(shift + i) % 4];    if (compact) {      parameterData<<=7;      parameterData+=(side >> 1) & 0x7F;    } else {      parameterData<<=10;      parameterData+=((side >> 2) & (0x1f << 5)) + ((side >> 1) & 0x1F);    }  }  int correctedData=getCorrectedParameterData(parameterData,compact);  if (compact) {    nbLayers=(correctedData >> 6) + 1;    nbDataBlocks=(correctedData & 0x3F) + 1;  } else {    nbLayers=(correctedData >> 11) + 1;    nbDataBlocks=(correctedData & 0x7FF) + 1;  }}  }
class C{  @Deprecated public void loadUrl(final String url,int time){  this.splashscreenTime=time;  this.loadUrl(url);}  }
class C{  public int create(Map<String,Object> metadata){  if (metadata == null)   throw new IllegalArgumentException();  assertString(metadata,FileMetadataSchema.ID);  metadata=new HashMap<String,Object>(metadata);  metadata.put(FileMetadataSchema.VERSION,AutoIncIntegerCounter.INSTANCE);  final ITPS tps=getFileMetadataIndex().write(metadataSchema,metadata,AUTO_TIMESTAMP_UNIQUE,null,null);  final int version=(Integer)tps.get(FileMetadataSchema.VERSION).getValue();  if (INFO)   log.info("Created new version: id=" + metadata.get(FileMetadataSchema.ID) + ", version="+ version);  return version;}  }
class C{  public final void identityMinus(){  int i, j;  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=-values[i][j];    }  }  int l;  if (nRow < nCol) {    l=nRow;  } else {    l=nCol;  }  for (i=0; i < l; i++) {    values[i][i]+=1.0;  }}  }
class C{  public static void checkFieldSignature(final String signature){  int pos=checkFieldTypeSignature(signature,0);  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  private ArrayList<String> findRejectedPermissions(ArrayList<String> wanted){  ArrayList<String> result=new ArrayList<String>();  for (  String perm : wanted) {    if (!hasPermission(perm) && !shouldWeAsk(perm)) {      result.add(perm);    }  }  return result;}  }
class C{  public XMLException(String systemID,int lineNr,String msg){  this(systemID,lineNr,null,msg,true);}  }
class C{  public void put(String key,File file,String contentType,String customFileName) throws FileNotFoundException {  if (file == null || !file.exists()) {    throw new FileNotFoundException();  }  if (key != null) {    fileParams.put(key,new FileWrapper(file,contentType,customFileName));  }}  }
class C{  public boolean visit(ReplaceEdit edit){  return visitNode(edit);}  }
class C{  protected int findTokenEnd(int from){  if (from < 0) {    throw new IllegalArgumentException("Token start position must not be negative: " + from);  }  final int to=this.currentHeader.length();  int end=from + 1;  while ((end < to) && isTokenChar(this.currentHeader.charAt(end))) {    end++;  }  return end;}  }
class C{  private int recursiveEmitLine(final SpannableStringBuilder out,final String in,int start,MarkToken token){  int pos=start, a, b;  final SpannableStringBuilder temp=new SpannableStringBuilder();  while (pos < in.length()) {    final MarkToken mt=this.getToken(in,pos);    if (token != MarkToken.NONE && (mt == token || token == MarkToken.EM_STAR && mt == MarkToken.STRONG_STAR || token == MarkToken.EM_UNDERSCORE && mt == MarkToken.STRONG_UNDERSCORE)) {      return pos;    }switch (mt) {case LINK:      temp.clear();    b=this.checkLink(temp,in,pos);  if (b > 0) {    out.append(temp);    pos=b;  } else {    out.append(in.charAt(pos));  }break;case EM_STAR:case EM_UNDERSCORE:temp.clear();b=this.recursiveEmitLine(temp,in,pos + 1,mt);if (b > 0) {this.config.decorator.openEmphasis(out);out.append(temp);this.config.decorator.closeEmphasis(out);pos=b;} else {out.append(in.charAt(pos));}break;case STRONG_STAR:case STRONG_UNDERSCORE:temp.clear();b=this.recursiveEmitLine(temp,in,pos + 2,mt);if (b > 0) {this.config.decorator.openStrong(out);out.append(temp);this.config.decorator.closeStrong(out);pos=b + 1;} else {out.append(in.charAt(pos));}break;case STRIKE:temp.clear();b=this.recursiveEmitLine(temp,in,pos + 2,mt);if (b > 0) {this.config.decorator.openStrike(out);out.append(temp);this.config.decorator.closeStrike(out);pos=b + 1;} else {out.append(in.charAt(pos));}break;case SUPER:temp.clear();b=this.recursiveEmitLine(temp,in,pos + 1,mt);if (b > 0) {this.config.decorator.openSuper(out);out.append(temp);this.config.decorator.closeSuper(out);pos=b;} else {out.append(in.charAt(pos));}break;case CODE_SINGLE:case CODE_DOUBLE:a=pos + (mt == MarkToken.CODE_DOUBLE ? 2 : 1);b=this.findToken(in,a,mt);if (b > 0) {pos=b + (mt == MarkToken.CODE_DOUBLE ? 1 : 0);while (a < b && in.charAt(a) == ' ') {a++;}if (a < b) {while (in.charAt(b - 1) == ' ') {b--;}this.config.decorator.openCodeSpan(out);out.append(in.substring(a,b));this.config.decorator.closeCodeSpan(out);}} else {out.append(in.charAt(pos));}break;case USER:if (token == MarkToken.LINK) {out.append(in.charAt(pos));} else {temp.clear();b=this.checkUserLink(temp,in,pos);if (b > 0) {out.append(temp);pos=b;} else {out.append(in.charAt(pos));}}break;case ZONE:if (token == MarkToken.LINK) {out.append(in.charAt(pos));} else {temp.clear();b=this.checkZoneLink(temp,in,pos);if (b > 0) {out.append(temp);pos=b;} else {out.append(in.charAt(pos));}}break;case ESCAPE:pos++;default :out.append(in.charAt(pos));break;}pos++;}return -1;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  return encodeBytes(source,off,len,NO_OPTIONS);}  }
class C{  public SubscriptionAlreadyExistsException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private void updateStateTable(Vector<Integer> rows,String pendingChars,short newValue){  short[] newValues=new short[numCategories + 1];  for (int i=0; i < pendingChars.length(); i++)   newValues[(int)(pendingChars.charAt(i)) - 0x100]=newValue;  for (int i=0; i < rows.size(); i++) {    mergeStates(rows.elementAt(i).intValue(),newValues,rows);  }}  }
class C{  public void cutToClipboard(OsmElement e,int lat,int lon){  dirty=true;  if (e instanceof Node) {    clipboard.cutTo(e,lat,lon);    removeNode((Node)e);  } else   if (e instanceof Way) {    ArrayList<Node> nodes=new ArrayList<Node>(((Way)e).getNodes());    for (    Node nd : nodes) {      if (currentStorage.getWays(nd).size() > 1) {        Log.d("StorageDelegator","Duplicating node");        Node newNode=factory.createNodeWithNewId(nd.getLat(),nd.getLon());        newNode.setTags(nd.getTags());        ((Way)e).replaceNode(nd,newNode);      }    }    clipboard.cutTo(e,lat,lon);    removeWay((Way)e);    nodes=new ArrayList<Node>(((Way)e).getNodes());    for (    Node nd : nodes) {      removeNode(nd);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().setOverscanScaleWidth(getFloat(stack));  return null;}  }
class C{  private void loadCache0(BinaryRawReaderEx reader,boolean loc){  PlatformCacheEntryFilter filter=null;  Object pred=reader.readObjectDetached();  if (pred != null)   filter=platformCtx.createCacheEntryFilter(pred,0);  Object[] args=reader.readObjectArray();  if (loc)   cache.localLoadCache(filter,args); else   cache.loadCache(filter,args);}  }
class C{  public static PatternStream create(PatternExpr expression){  return new PatternStream(expression);}  }
class C{  public int hashCode(){  int hash=37;  hash+=37 * hash + Float.floatToIntBits(x);  hash+=37 * hash + Float.floatToIntBits(y);  hash+=37 * hash + Float.floatToIntBits(z);  return hash;}  }
class C{  public static void removeLogAdministrator(LogAdministrator admin){  logAdministrators_.remove(admin);  if (service_ != null) {    admin.deregisterLogControl(service_.getLogControl());  }}  }
class C{  private Entry readRef() throws IOException {  int i=in.readUnsignedShort();  return i == 0 ? null : cls.cpMap[i];}  }
class C{  public MicroHessianOutput(OutputStream os){  init(os);}  }
class C{  public static DataInputStream newDataInputStream(Path self) throws IOException {  return new DataInputStream(Files.newInputStream(self));}  }
class C{  public void increment(String key){  increment(key,1);}  }
class C{  public void testCommandLine() throws Exception {  doTest(true);}  }
class C{  public NetworkClient(String host,int port) throws IOException {  openServer(host,port);}  }
class C{  private void loopViews(ViewGroup view){  for (int i=0; i < view.getChildCount(); i++) {    View v=view.getChildAt(i);    if (v instanceof ViewGroup) {      this.loopViews((ViewGroup)v);    } else {      view.setOnFocusChangeListener(null);    }  }}  }
class C{  private void testDownload(final String uri) throws TimeoutException {  mWaiter=new Waiter();  mSocket.startDownload(SPEED_TEST_SERVER_HOST,SPEED_TEST_SERVER_PORT,uri);  mWaiter.await(WAITING_TIMEOUT_LONG_OPERATION,SECONDS);  testTransferRate();  mSocket.forceStopTask();}  }
class C{  public static XPath2FilterContainer04 newInstanceIntersect(Document doc,String xpath2filter){  return new XPath2FilterContainer04(doc,xpath2filter,XPath2FilterContainer04._ATT_FILTER_VALUE_INTERSECT);}  }
class C{  public static void showToast(String message,int duration,int icon,int gravity){  if (message == null || message.equalsIgnoreCase(""))   return;  long time=System.currentTimeMillis();  if (!message.equalsIgnoreCase(lastToast) || Math.abs(time - lastToastTime) > 2000) {    View view=LayoutInflater.from(context()).inflate(R.layout.view_toast,null);    ((TextView)view.findViewById(R.id.tv_text)).setText(message);    if (icon != 0) {      ImageView mIcon=(ImageView)view.findViewById(R.id.iv_icon);      mIcon.setImageResource(icon);      mIcon.setVisibility(View.VISIBLE);    }    Toast toast=new Toast(context());    toast.setView(view);    toast.setGravity(gravity,0,TDevice.getActionBarHeight(context()));    toast.setDuration(duration);    toast.show();    lastToast=message;    lastToastTime=System.currentTimeMillis();  }}  }
class C{  public static boolean[][] loadImage(File file,char offChar) throws FileNotFoundException, RuntimeException {  ArrayList<String> rows=loadImagePad(file,offChar);  String s=rows.get(0);  boolean[][] img=new boolean[rows.size()][s.length()];  for (int i=0; i < rows.size(); i++) {    s=rows.get(i);    for (int j=0; j < s.length(); j++) {      char c=s.charAt(j);      if (c == offChar) {        img[i][j]=false;      } else {        img[i][j]=true;      }    }  }  return img;}  }
class C{  public boolean canTraverseOutsideSubtree(){  return super.canTraverseOutsideSubtree() ? true : m_arg2.canTraverseOutsideSubtree();}  }
class C{  public FoundFile lookupInClassPath(String fileName){  for (  String dir : classPath) {    FoundFile ret;    if (isJar(dir)) {      ret=lookupInJar(dir,fileName);    } else {      ret=lookupInDir(dir,fileName);    }    if (ret != null)     return ret;  }  return null;}  }
class C{  @VisibleForTesting public static GaeUserCredentials forLoggedOutUser(){  return new GaeUserCredentials(null,null);}  }
class C{  protected static byte[] encodeDHPublicKey(DHPublicKeyParameters pubkey){  return pubkey.getY().toByteArray();}  }
class C{  public ToStringBuilder append(boolean[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public boolean currentTemplateRuleIsNull(){  return ((!m_currentTemplateRuleIsNull.isEmpty()) && (m_currentTemplateRuleIsNull.peek() == true));}  }
class C{  protected static int rotl(int x,int y){  return (x << y) | (x >>> -y);}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  public GridClientMarshaller defaultMarshaller(){  return dfltMarsh;}  }
class C{  public void reset(){  this.fBuffer.setLength(0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:57.055 -0400",hash_original_method="AD713D45F791E4E6A2C9A577BB6C7C99",hash_generated_method="4B1BB15AE210DB53B570CCC23417FA6B") public int loadGraph(Context context,int resourceId){  FilterGraph graph=null;  try {    graph=getGraphReader().readGraphResource(context,resourceId);  } catch (  GraphIOException e) {    throw new RuntimeException("Could not read graph: " + e.getMessage());  }  return addGraph(graph);}  }
class C{  public CertPinManager(String path,TrustedCertificateStore store) throws PinManagerException {  if (path == null) {    throw new NullPointerException("path == null");  }  pinFile=new File(path);  certStore=store;  rebuild();}  }
class C{  static void d(String msg){  log(Log.DEBUG,DEFAULT_TAG,msg);}  }
class C{  public static void writeFully(FileChannel channel,ByteBuffer src) throws IOException {  do {    channel.write(src);  } while (src.remaining() > 0);}  }
class C{  public Vertex parseTemplate(Vertex formula,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  return parseFormula(formula,stream,elements,debug,network);}  }
class C{  private void saveSettings(){  restartRequired=false;  reconnectRequired=false;  saveStringSettings();  saveBooleanSettings();  saveIntegerSettings();  saveListSettings();  saveMapSettings();  owner.setUsercolorData(usercolorSettings.getData());  owner.setUsericonData(imageSettings.getData());  owner.hotkeyManager.setData(hotkeySettings.getData());  if (restartRequired) {    JOptionPane.showMessageDialog(this,RESTART_REQUIRED_INFO,"Info",JOptionPane.INFORMATION_MESSAGE);  }  if (reconnectRequired) {    String[] options=new String[]{"Reconnect now","Reconnect manually"};    int result=JOptionPane.showOptionDialog(this,RECONNECT_REQUIRED_INFO,"Reconect?",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,null,options,null);    if (result == 0) {      owner.reconnect();    }  }}  }
class C{  public void addMessage(String msgId,long inputTime,boolean isWrapperMessage) throws AdeException {  m_messageInputDateTime=new DateTime(inputTime).withZone(s_outTimeZone);  determineAndProcessEndOfInterval(inputTime);  MessageStats msgRateStats=m_msgIdToMsgStatsMap.get(msgId);  if (msgRateStats == null) {    if (m_msgIdToMsgStatsMap.size() >= s_maxMsgToKeep) {      return;    }    msgRateStats=new MessageStats(msgId,m_numberOf10MinutesSlotsToKeep,isWrapperMessage);    m_msgIdToMsgStatsMap.put(msgId,msgRateStats);  }  final int indexOf10MinutesMsgCountArray=(int)((inputTime - m_beginOfInterval) / TEN_MINUTES);  if (indexOf10MinutesMsgCountArray > m_currentIndex10MinutesMsgCountArray) {    m_currentIndex10MinutesMsgCountArray=indexOf10MinutesMsgCountArray;  }  if (inputTime >= m_beginOfInterval) {    msgRateStats.addMessage(m_currentIndex10MinutesMsgCountArray);  }}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public static int[] transformPosition(final Point newOrigin,final int[] polygonPoints){  Check.notNull(newOrigin,"newOrigin");  Check.notNull(polygonPoints,"polygon points");  Check.isTrue((polygonPoints.length > 0),"polygon points not empty");  Check.isTrue((polygonPoints.length % 2) == 0,"even number of polygon points");  final int[] newPolygonPoints=new int[polygonPoints.length];  for (int i=0; i < polygonPoints.length; i+=2) {    newPolygonPoints[i]=polygonPoints[i] + newOrigin.x;    newPolygonPoints[i + 1]=polygonPoints[i + 1] + newOrigin.y;  }  return newPolygonPoints;}  }
class C{  protected void determineAssignments(KDTreeNode node,Instances centers,int[] candidates,int[] assignments,double pc) throws Exception {  int[] owners=refineOwners(node,centers,candidates);  if (owners.length == 1) {    for (int i=node.m_Start; i <= node.m_End; i++) {      assignments[m_InstList[i]]=owners[0];    }  } else   if (!node.isALeaf()) {    determineAssignments(node.m_Left,centers,owners,assignments,pc);    determineAssignments(node.m_Right,centers,owners,assignments,pc);  } else {    assignSubToCenters(node,centers,owners,assignments);  }}  }
class C{  public boolean contains(int x,int y){  Polygon clickRegion=getClickRegion();  if (clickRegion != null) {    return clickRegion.contains(new Point(x,y));  } else {    return false;  }}  }
class C{  public String toString(){  return getClass().getName() + "[dropPoint=" + getDropPoint()+ ","+ "path="+ path+ ","+ "childIndex="+ index+ "]";}  }
class C{  protected boolean containsNullAndAllowMultipleNull(SearchRow newRow){  Mode mode=database.getMode();  if (mode.uniqueIndexSingleNull) {    return false;  } else   if (mode.uniqueIndexSingleNullExceptAllColumnsAreNull) {    for (    int index : columnIds) {      Value v=newRow.getValue(index);      if (v != ValueNull.INSTANCE) {        return false;      }    }    return true;  }  for (  int index : columnIds) {    Value v=newRow.getValue(index);    if (v == ValueNull.INSTANCE) {      return true;    }  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GF2nPolynomialElement squarePreCalc(){  GF2nPolynomialElement result=new GF2nPolynomialElement(this);  result.squareThisPreCalc();  result.reduceThis();  return result;}  }
class C{  public boolean removeProtectionStep(List<URI> volumeURIs,URI newVpoolURI,String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  try {    for (    URI volumeURI : volumeURIs) {      Volume volume=_dbClient.queryObject(Volume.class,volumeURI);      if (RPHelper.isVPlexVolume(volume,_dbClient)) {        VPlexUtil.updateVPlexBackingVolumeVpools(volume,newVpoolURI,_dbClient);      }      VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,newVpoolURI);      _log.info(String.format("Removing protection from Volume [%s] (%s) and moving it to Virtual Pool [%s] (%s)",volume.getLabel(),volume.getId(),vpool.getLabel(),vpool.getId()));      RPHelper.rollbackProtectionOnVolume(volume,vpool,_dbClient);    }    WorkflowStepCompleter.stepSucceded(stepId);    return true;  } catch (  Exception e) {    stepFailed(stepId,e,"removeProtection operation failed.");    return false;  }}  }
class C{  protected String fixEOLs(String value){  return value.replaceAll("(\\r\\n?)|\n","\n");}  }
class C{  public void removeChild(CCNode child,boolean doCleanup){  CCSprite sprite=(CCSprite)child;  if (sprite == null)   return;  removeSpriteFromAtlas(sprite);  super.removeChild(sprite,doCleanup);}  }
class C{  public UpdaterTask(){}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  public void removeComponent(URI includeNamespace){  namespaces.remove(includeNamespace);}  }
class C{  public void writeAsReference() throws IOException {  File parent=m_RefFile.getParentFile();  if (!parent.exists()) {    parent.mkdirs();  }  Writer w=new BufferedWriter(new FileWriter(m_RefFile));  w.write(m_Output.toString());  w.close();}  }
class C{  public static Number optimizeNumberRepresentation(Number number){  if (number instanceof BigDecimal) {    BigDecimal bd=(BigDecimal)number;    if (bd.scale() == 0) {      number=bd.unscaledValue();    } else {      double d=bd.doubleValue();      if (d != Double.POSITIVE_INFINITY && d != Double.NEGATIVE_INFINITY) {        return Double.valueOf(d);      }    }  }  if (number instanceof BigInteger) {    BigInteger bi=(BigInteger)number;    if (bi.compareTo(INTEGER_MAX) <= 0 && bi.compareTo(INTEGER_MIN) >= 0) {      return Integer.valueOf(bi.intValue());    }    if (bi.compareTo(LONG_MAX) <= 0 && bi.compareTo(LONG_MIN) >= 0) {      return Long.valueOf(bi.longValue());    }  }  return number;}  }
class C{  public void dragOver(DropTargetDragEvent e){  Point pt=e.getLocation();  if (pt.equals(_ptLast)) {    return;  }  int nDeltaLeftRight=pt.x - _ptLast.x;  if (((_nLeftRight > 0) && (nDeltaLeftRight < 0)) || ((_nLeftRight < 0) && (nDeltaLeftRight > 0))) {    _nLeftRight=0;  }  _nLeftRight+=nDeltaLeftRight;  _ptLast=pt;  Graphics2D g2=(Graphics2D)getGraphics();  if (!DragSource.isDragImageSupported()) {    paintImmediately(_raGhost.getBounds());    _raGhost.setRect(pt.x - m_ptOffset.x,pt.y - m_ptOffset.y,m_imgGhost.getWidth(),m_imgGhost.getHeight());    g2.drawImage(m_imgGhost,AffineTransform.getTranslateInstance(_raGhost.getX(),_raGhost.getY()),null);  } else {    paintImmediately(_raCueLine.getBounds());  }  TreePath path=getClosestPathForLocation(pt.x,pt.y);  if (!(path == _pathLast)) {    _nLeftRight=0;    _pathLast=path;    _timerHover.restart();  }  Rectangle raPath=getPathBounds(path);  _raCueLine.setRect(0,raPath.y + (int)raPath.getHeight(),getWidth(),2);  g2.setColor(_colorCueLine);  g2.fill(_raCueLine);  if (_nLeftRight > 20) {    g2.drawImage(_imgRight,AffineTransform.getTranslateInstance(pt.x - m_ptOffset.x,pt.y - m_ptOffset.y),null);    _nShift=+1;  } else   if (_nLeftRight < -20) {    g2.drawImage(_imgLeft,AffineTransform.getTranslateInstance(pt.x - m_ptOffset.x,pt.y - m_ptOffset.y),null);    _nShift=-1;  } else {    _nShift=0;  }  _raGhost=_raGhost.createUnion(_raCueLine);  if (path.equals(m_selectedTreePath)) {    e.rejectDrag();  } else {    e.acceptDrag(e.getDropAction());  }}  }
class C{  public static final void clear(final double[] v1){  Arrays.fill(v1,0.0);}  }
class C{  public void removeListener(final IZyGraphEdgeSettingsListener listener){  listeners.removeListener(listener);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Project_ID"))     m_C_Project_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_ProjectLine_ID"))     m_C_ProjectLine_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("ConsolidateDocument"))     m_ConsolidateDocument="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void remove(TimePeriod period,Comparable seriesName){  remove(period,seriesName,true);}  }
class C{  @SuppressWarnings("UnusedReturnValue") @Override public final boolean openPdfFileFromURL(final String pdfUrl,final boolean supportLinearized) throws PdfException {  preOpen();  InputStream is=null;  String rawFileName=null;  try {    final URL url;    url=new URL(pdfUrl);    rawFileName=url.getPath().substring(url.getPath().lastIndexOf('/') + 1);    is=url.openStream();  } catch (  final IOException e) {    LogWriter.writeLog("Exception: " + e.getMessage());  }  final boolean flag=fileAccess.readFile(supportLinearized,is,rawFileName,null);  postOpen();  return flag;}  }
class C{  public void removeOne(){  removeFromWorld();}  }
class C{  public Matrix4x3d m30(double m30){  this.m30=m30;  properties&=~(PROPERTY_IDENTITY);  return this;}  }
class C{  public static int gluUnProject(float winX,float winY,float winZ,float[] model,int modelOffset,float[] project,int projectOffset,int[] view,int viewOffset,float[] obj,int objOffset){  float[] scratch=sScratch;synchronized (scratch) {    final int PM_OFFSET=0;    final int INVPM_OFFSET=16;    final int V_OFFSET=0;    Matrix.multiplyMM(scratch,PM_OFFSET,project,projectOffset,model,modelOffset);    if (!Matrix.invertM(scratch,INVPM_OFFSET,scratch,PM_OFFSET)) {      return GL10.GL_FALSE;    }    scratch[V_OFFSET + 0]=2.0f * (winX - view[viewOffset + 0]) / view[viewOffset + 2] - 1.0f;    scratch[V_OFFSET + 1]=2.0f * (winY - view[viewOffset + 1]) / view[viewOffset + 3] - 1.0f;    scratch[V_OFFSET + 2]=2.0f * winZ - 1.0f;    scratch[V_OFFSET + 3]=1.0f;    Matrix.multiplyMV(obj,objOffset,scratch,INVPM_OFFSET,scratch,V_OFFSET);  }  return GL10.GL_TRUE;}  }
class C{  @Override public String toString(){  return new String(this.toByteArray());}  }
class C{  private ServiceRequestBuffer createStatsSRB(FbService service,int options){  return createRequestBuffer(service,isc_action_svc_db_stats,options);}  }
class C{  public void start(){  startTime=System.currentTimeMillis();  running=true;}  }
class C{  public boolean isUnloadedClassLoader(){  return false;}  }
class C{  public PointExtracter(List pts){  this.pts=pts;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node fchildNode;  String childName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  fchildNode=employeeNode.getFirstChild();  childName=fchildNode.getNodeName();  if (equals("#text",childName)) {    fchildNode=fchildNode.getNextSibling();    childName=fchildNode.getNodeName();  }  assertEquals("nodeName","employeeId",childName);}  }
class C{  public static String evaluateClusterer(Clusterer clusterer,String[] options) throws Exception {  int seed=1, folds=10;  boolean doXval=false;  Instances train=null;  Random random;  String trainFileName, testFileName, seedString, foldsString;  String objectInputFileName, objectOutputFileName, attributeRangeString;  String graphFileName;  String[] savedOptions=null;  boolean printClusterAssignments=false;  Range attributesToOutput=null;  StringBuffer text=new StringBuffer();  int theClass=-1;  boolean forceBatch=Utils.getFlag("force-batch-training",options);  boolean updateable=(clusterer instanceof UpdateableClusterer) && !forceBatch;  DataSource source=null;  Instance inst;  if (Utils.getFlag('h',options) || Utils.getFlag("help",options)) {    boolean globalInfo=Utils.getFlag("synopsis",options) || Utils.getFlag("info",options);    throw new Exception("Help requested." + makeOptionString(clusterer,globalInfo));  }  try {    objectInputFileName=Utils.getOption('l',options);    objectOutputFileName=Utils.getOption('d',options);    trainFileName=Utils.getOption('t',options);    testFileName=Utils.getOption('T',options);    graphFileName=Utils.getOption('g',options);    try {      attributeRangeString=Utils.getOption('p',options);    } catch (    Exception e) {      throw new Exception(e.getMessage() + "\nNOTE: the -p option has changed. " + "It now expects a parameter specifying a range of attributes "+ "to list with the predictions. Use '-p 0' for none.");    }    if (attributeRangeString.length() != 0) {      printClusterAssignments=true;      if (!attributeRangeString.equals("0")) {        attributesToOutput=new Range(attributeRangeString);      }    }    if (trainFileName.length() == 0) {      if (objectInputFileName.length() == 0) {        throw new Exception("No training file and no object " + "input file given.");      }      if (testFileName.length() == 0) {        throw new Exception("No training file and no test file given.");      }    } else {      if ((objectInputFileName.length() != 0) && (printClusterAssignments == false)) {        throw new Exception("Can't use both train and model file " + "unless -p specified.");      }    }    seedString=Utils.getOption('s',options);    if (seedString.length() != 0) {      seed=Integer.parseInt(seedString);    }    foldsString=Utils.getOption('x',options);    if (foldsString.length() != 0) {      folds=Integer.parseInt(foldsString);      doXval=true;    }  } catch (  Exception e) {    throw new Exception('\n' + e.getMessage() + makeOptionString(clusterer,false));  }  try {    if (trainFileName.length() != 0) {      source=new DataSource(trainFileName);      train=source.getStructure();      String classString=Utils.getOption('c',options);      if (classString.length() != 0) {        if (classString.compareTo("last") == 0) {          theClass=train.numAttributes();        } else         if (classString.compareTo("first") == 0) {          theClass=1;        } else {          theClass=Integer.parseInt(classString);        }        if (theClass != -1) {          if (doXval || testFileName.length() != 0) {            throw new Exception("Can only do class based evaluation on the " + "training data");          }          if (objectInputFileName.length() != 0) {            throw new Exception("Can't load a clusterer and do class based " + "evaluation");          }          if (objectOutputFileName.length() != 0) {            throw new Exception("Can't do class based evaluation and save clusterer");          }        }      } else {        if (train.classIndex() != -1) {          theClass=train.classIndex() + 1;          System.err.println("Note: using class attribute from dataset, i.e., attribute #" + theClass);        }      }      if (theClass != -1) {        if (theClass < 1 || theClass > train.numAttributes()) {          throw new Exception("Class is out of range!");        }        if (!train.attribute(theClass - 1).isNominal()) {          throw new Exception("Class must be nominal!");        }        train.setClassIndex(theClass - 1);      }    }  } catch (  Exception e) {    throw new Exception("ClusterEvaluation: " + e.getMessage() + '.');  }  if (options != null) {    savedOptions=new String[options.length];    System.arraycopy(options,0,savedOptions,0,options.length);  }  if (objectInputFileName.length() != 0) {    Utils.checkForRemainingOptions(options);  }  if (clusterer instanceof OptionHandler) {    ((OptionHandler)clusterer).setOptions(options);  }  Utils.checkForRemainingOptions(options);  Instances trainHeader=train;  if (objectInputFileName.length() != 0) {    java.io.ObjectInputStream ois=new java.io.ObjectInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(objectInputFileName)));    clusterer=(Clusterer)ois.readObject();    try {      trainHeader=(Instances)ois.readObject();    } catch (    Exception ex) {    }    ois.close();  } else {    if (theClass == -1) {      if (updateable) {        clusterer.buildClusterer(source.getStructure());        while (source.hasMoreElements(train)) {          inst=source.nextElement(train);          ((UpdateableClusterer)clusterer).updateClusterer(inst);        }        ((UpdateableClusterer)clusterer).updateFinished();      } else {        clusterer.buildClusterer(source.getDataSet());      }    } else {      Remove removeClass=new Remove();      removeClass.setAttributeIndices("" + theClass);      removeClass.setInvertSelection(false);      removeClass.setInputFormat(train);      if (updateable) {        Instances clusterTrain=Filter.useFilter(train,removeClass);        clusterer.buildClusterer(clusterTrain);        trainHeader=clusterTrain;        while (source.hasMoreElements(train)) {          inst=source.nextElement(train);          removeClass.input(inst);          removeClass.batchFinished();          Instance clusterTrainInst=removeClass.output();          ((UpdateableClusterer)clusterer).updateClusterer(clusterTrainInst);        }        ((UpdateableClusterer)clusterer).updateFinished();      } else {        Instances clusterTrain=Filter.useFilter(source.getDataSet(),removeClass);        clusterer.buildClusterer(clusterTrain);        trainHeader=clusterTrain;      }      ClusterEvaluation ce=new ClusterEvaluation();      ce.setClusterer(clusterer);      ce.evaluateClusterer(train,trainFileName);      return "\n\n=== Clustering stats for training data ===\n\n" + ce.clusterResultsToString();    }  }  if (printClusterAssignments) {    return printClusterings(clusterer,trainFileName,testFileName,attributesToOutput);  }  text.append(clusterer.toString());  text.append("\n\n=== Clustering stats for training data ===\n\n" + printClusterStats(clusterer,trainFileName));  if (testFileName.length() != 0) {    DataSource test=new DataSource(testFileName);    Instances testStructure=test.getStructure();    if (!trainHeader.equalHeaders(testStructure)) {      throw new Exception("Training and testing data are not compatible\n" + trainHeader.equalHeadersMsg(testStructure));    }    text.append("\n\n=== Clustering stats for testing data ===\n\n" + printClusterStats(clusterer,testFileName));  }  if ((clusterer instanceof DensityBasedClusterer) && (doXval == true) && (testFileName.length() == 0)&& (objectInputFileName.length() == 0)) {    random=new Random(seed);    random.setSeed(seed);    train=source.getDataSet();    train.randomize(random);    text.append(crossValidateModel(clusterer.getClass().getName(),train,folds,savedOptions,random));  }  if (objectOutputFileName.length() != 0) {    saveClusterer(objectOutputFileName,clusterer,trainHeader);  }  if ((clusterer instanceof Drawable) && (graphFileName.length() != 0)) {    BufferedWriter writer=new BufferedWriter(new FileWriter(graphFileName));    writer.write(((Drawable)clusterer).graph());    writer.newLine();    writer.flush();    writer.close();  }  return text.toString();}  }
class C{  public String format(LogRecord record){  String key=Integer.toString(record.getThreadID());  String name=(String)threadNames.get(key);  if (name == null) {    name=Thread.currentThread().getName() + ": ";    threadNames.put(key,name);  }  String message=formatMessage(record);  StringBuilder sb=new StringBuilder(message.length() + 100);  sb.append(name).append(message).append(ls);  Throwable t=record.getThrown();  if (t != null) {    StringWriter sw=new StringWriter();    PrintWriter pw=new PrintWriter(sw);    t.printStackTrace(pw);    pw.close();    sb.append(sw.toString());  }  return sb.toString();}  }
class C{  public JPanel generateContentPanelPoliciesScripts(String title,String[][] policies,String[][] scripts,String[][] printers,String[][] certs,String help_title,String help_link,String icon){  JPanel panelContent=new JPanel(new BorderLayout());  JPanel header=new JPanel();  ImageIcon icon_image=generateIcon(icon);  header.add(new JLabel(title,icon_image,JLabel.CENTER)).setForeground(Color.WHITE);  header.setBackground(Color.decode("#5C6B84"));  panelContent.setBorder(BorderFactory.createLineBorder(Color.BLACK));  JPanel container=new JPanel();  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));  if (!(help_title.equals("") && help_link.equals(""))) {    container.add(new URLLabel(help_title,help_link));    container.add(new JLabel("   "));  }  JPanel data1=new JPanel();  JPanel data2=new JPanel();  JPanel data3=new JPanel();  if (policies.length > 0) {    JTable policies_table=generateTable("Policy Name,Ongoing?,Checkin Trigger?",policies);    data1.add(policies_table);    JScrollPane scroll1=new JScrollPane(data1);    scroll1.setViewportView(policies_table);    container.add(scroll1);  }  if (scripts.length > 0) {    JTable scripts_table=generateTable("Script Name",scripts);    data2.add(scripts_table);    JScrollPane scroll2=new JScrollPane(data1);    scroll2.setViewportView(scripts_table);    container.add(scroll2);  }  if (printers.length > 0) {    this.showPrinters=true;  }  JTable change_certs=generateTable("Object,Value",certs);  data3.add(change_certs);  JScrollPane scroll3=new JScrollPane(data3);  scroll3.setViewportView(change_certs);  container.add(scroll3);  container.setBackground(Color.decode("#FFFFFF"));  JScrollPane data=new JScrollPane(container);  panelContent.add(header,BorderLayout.NORTH);  panelContent.add(container,BorderLayout.CENTER);  return panelContent;}  }
class C{  private static double dot(int g[],double x,double y,double z,double w){  return g[0] * x + g[1] * y + g[2] * z + g[3] * w;}  }
class C{  @Override public Set<Object> keySet(){  checkInitialized();  return Collections.unmodifiableSet(super.keySet());}  }
class C{  public void testSharedMode() throws Exception {  depMode=DeploymentMode.SHARED;  processTest(true);}  }
class C{  public static String toListString(Collection arg){  return toListString(arg,-1);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__OWNED_MEMBERS_RAW:    getOwnedMembersRaw().clear();  return;case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPE_VARS:getTypeVars().clear();return;case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPING_STRATEGY:setTypingStrategy(TYPING_STRATEGY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean isProperAncestorOf(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  public void add(List<String> row){  if (row.size() != numCols) {    throw new UnsupportedOperationException("Array is wrong size");  }  data.add(Collections.unmodifiableList(new ArrayList<String>(row)));  numRows++;  for (int i=0; i < numCols; i++) {    if (row.get(i).length() > maxColLengths.get(i)) {      maxColLengths.set(i,row.get(i).length());    }  }}  }
class C{  public static boolean cs_usolve(Dcs U,double[] x){  int p, j, n, Up[], Ui[];  double Ux[];  if (!Dcs_util.CS_CSC(U) || x == null)   return (false);  n=U.n;  Up=U.p;  Ui=U.i;  Ux=U.x;  for (j=n - 1; j >= 0; j--) {    x[j]/=Ux[Up[j + 1] - 1];    for (p=Up[j]; p < Up[j + 1] - 1; p++) {      x[Ui[p]]-=Ux[p] * x[j];    }  }  return (true);}  }
class C{  public static SslSettings trustAllCertificates(){  return new SslSettings(true,null,false);}  }
class C{  private int scanToken(int startPos){  int position=startPos;  while (position < maxPosition) {    if (!hasSurrogates) {      char c=str.charAt(position);      if ((c <= maxDelimCodePoint) && (delimiters.indexOf(c) >= 0))       break;      position++;    } else {      int c=str.codePointAt(position);      if ((c <= maxDelimCodePoint) && isDelimiter(c))       break;      position+=Character.charCount(c);    }  }  if (retDelims && (startPos == position)) {    if (!hasSurrogates) {      char c=str.charAt(position);      if ((c <= maxDelimCodePoint) && (delimiters.indexOf(c) >= 0))       position++;    } else {      int c=str.codePointAt(position);      if ((c <= maxDelimCodePoint) && isDelimiter(c))       position+=Character.charCount(c);    }  }  return position;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public static void addPlugin(ViewDumpPlugin viewDumpPlugin){  sPlugins.add(viewDumpPlugin);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SnmpIpAddress(long b1,long b2,long b3,long b4){  super(b1,b2,b3,b4);  if ((components[0] > 255) || (components[1] > 255) || (components[2] > 255)|| (components[3] > 255)) {    throw new IllegalArgumentException();  }}  }
class C{  @Nullable public static Method findNonPublicMethod(Class<?> cls,String name,Class<?>... paramTypes){  while (cls != null) {    try {      Method mtd=cls.getDeclaredMethod(name,paramTypes);      if (mtd.getReturnType() != void.class) {        mtd.setAccessible(true);        return mtd;      }    } catch (    NoSuchMethodException ignored) {    }    cls=cls.getSuperclass();  }  return null;}  }
class C{  private boolean containsNullValue(){  LongEntry<VALUE> tab[]=table;  for (int i=0; i < tab.length; i++)   for (LongEntry<VALUE> e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.EQUALITY_EXPRESSION__LHS:    return basicSetLhs(null,msgs);case N4JSPackage.EQUALITY_EXPRESSION__RHS:  return basicSetRhs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public DateRangeMapperBuilder pattern(String pattern){  this.pattern=pattern;  return this;}  }
class C{  public ListEntry(BaseEntry sourceEntry){  super(sourceEntry);  getCategories().add(CATEGORY);  if (this.getExtension(CustomElementCollection.class) == null) {    init();  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:06.720 -0500",hash_original_method="92F5EAFF00040EF543528D1059933772",hash_generated_method="7FD93B48818FA167E312FB737B2A4BEA") @Override public int read() throws IOException {  if (buffer == null) {    throw new IOException("Stream was closed.");  }  while (pos == end) {    if (end_reached) {      return -1;    }    owner.needAppData();  }  return buffer[pos++] & 0xFF;}  }
class C{  public void testAndNotPosPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-96};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.andNot(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public Pet retrievePet(){  if (player.hasSlot("#pets")) {    final RPSlot slot=player.getSlot("#pets");    if (slot.size() > 0) {      final RPObject object=slot.getFirst();      slot.remove(object.getID());      player.removeSlot("#pets");      if (object.get("type").equals("cat")) {        return new Cat(object,player);      } else       if (object.get("type").equals("baby_dragon")) {        return new BabyDragon(object,player);      } else       if (object.get("type").equals("purple_dragon")) {        return new PurpleDragon(object,player);      }    }  }  return null;}  }
class C{  protected void add(String field){  record.add(Objects.requireNonNull(field));}  }
class C{  public static double roundUpX(final double startValue){  return startValue + xStep;}  }
class C{  public void delete(){  checkPermission(Permission.MANAGE_CHANNEL);  ((JDAImpl)channel.getJDA()).getRequester().delete(Requester.DISCORD_API_PREFIX + "channels/" + channel.getId());}  }
class C{  protected ProtocolMessage readMessage() throws IOException, ReplicatorException {  if (ois == null) {    ois=new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));  }  Object obj;  try {    obj=ois.readObject();  } catch (  ClassNotFoundException e) {    throw new THLException(e.getMessage());  }  if (obj instanceof ProtocolMessage == false)   throw new THLException("Invalid object in stream");  return (ProtocolMessage)obj;}  }
class C{  public void release(){  allocator.assertOpen();  final BufferLedger oldLedger=map.remove(allocator);  oldLedger.allocator.dissociateLedger(oldLedger);  if (oldLedger == owningLedger) {    if (map.isEmpty()) {      oldLedger.allocator.releaseBytes(size);      underlying.release();      amDestructionTime=System.nanoTime();      owningLedger=null;    } else {      BufferLedger newLedger=map.values().iterator().next();      oldLedger.transferBalance(newLedger);    }  } else {    if (map.isEmpty()) {      throw new IllegalStateException("The final removal of a ledger should be connected to the owning ledger.");    }  }}  }
class C{  public final static NameValuePair[] parseParameters(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseParameters(buffer,cursor);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  protected void assertSinglePaymentEntry(final String orderNum,final String expectedAmount,final String expectedOperation,final String expectedResult,final boolean expectedSettled){  assertMultiPaymentEntry(orderNum,Arrays.asList(expectedAmount),Arrays.asList(expectedOperation),Arrays.asList(expectedResult),Arrays.asList(expectedSettled));}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.024 -0500",hash_original_method="ECC74DE3478988E64B883DFDAEC329B4",hash_generated_method="6CCAA0CEB8A5375232BFAD5CE0634B39") @SuppressWarnings({"UnusedParameters"}) public BitmapDrawable(Resources res){  mBitmapState=new BitmapState((Bitmap)null);  mBitmapState.mTargetDensity=mTargetDensity;}  }
class C{  private void checkForUnusedArguments(Map<String,Integer> args,RuleContext ctx,DelphiPMDNode node,String methodName){  for (  Map.Entry<String,Integer> entry : args.entrySet()) {    if (entry.getValue() == 0 && !ignoredArg(entry.getKey())) {      addViolation(ctx,node,"Unused argument: '" + entry.getKey() + "' at "+ methodName);    }  }}  }
class C{  private void fes(Graph graph){  TetradLogger.getInstance().log("info","** FORWARD EQUIVALENCE SEARCH");  while (!sortedArrows.isEmpty()) {    Arrow arrow=sortedArrows.first();    sortedArrows.remove(arrow);    Node x=arrow.getA();    Node y=arrow.getB();    clearArrow(x,y);    if (graph.isAdjacentTo(x,y)) {      continue;    }    if (!validInsert(x,y,arrow.getHOrT(),arrow.getNaYX(),graph)) {      continue;    }    Set<Node> t=arrow.getHOrT();    double bump=arrow.getBump();    insert(x,y,t,graph,bump);    score+=bump;    Set<Node> visited=rebuildPatternRestricted(graph,x,y);    Set<Node> toProcess=new HashSet<>();    for (    Node node : visited) {      final Set<Node> neighbors=getNeighbors(node,graph);      final Set<Node> storedNeighbors=this.neighbors.get(node);      if (!neighbors.equals(storedNeighbors)) {        toProcess.add(node);        this.neighbors.put(node,neighbors);      }    }    Edge xy=graph.getEdge(x,y);    if (xy.pointsTowards(x)) {      toProcess.add(x);    } else     if (xy.pointsTowards(y)) {      toProcess.add(y);    }    reevaluateForward(graph,toProcess);    storeGraph(graph);  }}  }
class C{  static public void assertNotNull(Object object){  assertNotNull(null,object);}  }
class C{  public boolean reverseAccrualIt(){  log.info("reverseAccrualIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.608 -0500",hash_original_method="9B2F4C7AC7E3D2DC3FE02C5A18455E2B",hash_generated_method="8F51775A76902E195D62404B13C84DFB") public void resendAck() throws SipException {  if (this.getLastAckSent() != null) {    if (getLastAckSent().getHeader(TimeStampHeader.NAME) != null && sipStack.generateTimeStampHeader) {      TimeStamp ts=new TimeStamp();      try {        ts.setTimeStamp(System.currentTimeMillis());        getLastAckSent().setHeader(ts);      } catch (      InvalidArgumentException e) {      }    }    this.sendAck(getLastAckSent(),false);  }}  }
class C{  public static SimpleBigDecimal approximateDivisionByN(BigInteger k,BigInteger s,BigInteger vm,byte a,int m,int c){  int _k=(m + 5) / 2 + c;  BigInteger ns=k.shiftRight(m - _k - 2 + a);  BigInteger gs=s.multiply(ns);  BigInteger hs=gs.shiftRight(m);  BigInteger js=vm.multiply(hs);  BigInteger gsPlusJs=gs.add(js);  BigInteger ls=gsPlusJs.shiftRight(_k - c);  if (gsPlusJs.testBit(_k - c - 1)) {    ls=ls.add(ECConstants.ONE);  }  return new SimpleBigDecimal(ls,c);}  }
class C{  public void validate(FacesContext context,UIComponent uiComponent,Object value) throws ValidatorException {  if (value == null) {    return;  }  String stringValue=value.toString();  if (stringValue.length() == 0) {    return;  }  validate(context,uiComponent,stringValue);}  }
class C{  public void scan(JCTree tree){  if (tree != null)   tree.accept(this);}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public ElementType(String name,int model,int memberOf,int flags,Schema schema){  theName=name;  theModel=model;  theMemberOf=memberOf;  theFlags=flags;  theAtts=new AttributesImpl();  theSchema=schema;  theNamespace=namespace(name,false);  theLocalName=localName(name);}  }
class C{  public final float[] findText(final String[] terms,final int searchType) throws PdfException {  if (terms == null) {    return new float[]{};  }  final Vector_Float resultCoords=new Vector_Float(0);  final Vector_String resultTeasers=new Vector_String(0);  copyToArrays();  cleanupShadowsAndDrownedObjects(false);  final int[] items=getsortedUnusedFragments(true,false);  final int[] unsorted=getWritingModeCounts(items);  final int[] writingModes=getWritingModeOrder(unsorted);  for (int u=0; u != writingModes.length; u++) {    final int mode=writingModes[u];    if (unsorted[mode] != 0) {      searchWritingMode(items,mode,searchType,terms,resultCoords,resultTeasers);    }  }  return resultCoords.get();}  }
class C{  public static void write(Path self,String text,String charset,boolean writeBom) throws IOException {  Writer writer=null;  try {    OutputStream out=Files.newOutputStream(self);    if (writeBom) {      IOGroovyMethods.writeUTF16BomIfRequired(out,charset);    }    writer=new OutputStreamWriter(out,Charset.forName(charset));    writer.write(text);    writer.flush();    Writer temp=writer;    writer=null;    temp.close();  }  finally {    closeWithWarning(writer);  }}  }
class C{  private void writeString(String string) throws JSONException {  if (string.length() == 0) {    zero();    zero();    write(end,this.substringhuff);    zero();  } else {    Kim kim=new Kim(string);    int integer=this.stringkeep.find(kim);    if (integer != none) {      one();      writeAndTick(integer,this.stringkeep);    } else {      writeSubstring(kim);      this.stringkeep.register(kim);    }  }}  }
class C{  void markChanged(){  changed=true;}  }
class C{  public Object clone(){  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    ObjectOutputStream out=new ObjectOutputStream(baos);    out.writeObject(this);    out.close();    ByteArrayInputStream bin=new ByteArrayInputStream(baos.toByteArray());    ObjectInputStream in=new ObjectInputStream(bin);    Object clone=in.readObject();    in.close();    return (clone);  } catch (  ClassNotFoundException cnfe) {    throw new InternalError(cnfe.toString());  }catch (  StreamCorruptedException sce) {    throw new InternalError(sce.toString());  }catch (  IOException ioe) {    throw new InternalError(ioe.toString());  }}  }
class C{  public boolean isZoomEnabled(){  return mZoomEnabled;}  }
class C{  public DrawerBuilder withGenerateMiniDrawer(boolean generateMiniDrawer){  this.mGenerateMiniDrawer=generateMiniDrawer;  return this;}  }
class C{  public boolean isMainlineA(){  if (connectA != null) {    return ((TrackSegment)connectA).getMainline();  } else {    if ((type == DOUBLE_XOVER) || (type == LH_XOVER) || (type == RH_XOVER)) {      if (connectB != null) {        return ((TrackSegment)connectB).getMainline();      }    } else     if (((connectB != null) && (((TrackSegment)connectB).getMainline())) || ((connectC != null) && (((TrackSegment)connectC).getMainline()))) {      return true;    }  }  return false;}  }
class C{  public int size(){  return statistics.size();}  }
class C{  @Override public boolean hasFunctionalLegAES(){  boolean frontRightLeg=false;  boolean frontLeftLeg=false;  boolean rearRightLeg=false;  boolean rearLeftLeg=false;  for (  Mounted mounted : getMisc()) {    if ((mounted.getLocation() == Mech.LOC_LLEG) || (mounted.getLocation() == Mech.LOC_RLEG) || (mounted.getLocation() == Mech.LOC_LARM)|| (mounted.getLocation() == Mech.LOC_RARM)) {      if (((MiscType)mounted.getType()).hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM) && !mounted.isDestroyed() && !mounted.isBreached()&& !mounted.isMissing()) {        if (mounted.getLocation() == Mech.LOC_LLEG) {          rearLeftLeg=true;        } else         if (mounted.getLocation() == Mech.LOC_RLEG) {          rearRightLeg=true;        } else         if (mounted.getLocation() == Mech.LOC_RARM) {          frontRightLeg=true;        } else {          frontLeftLeg=true;        }      } else       if (((MiscType)mounted.getType()).hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM)) {        return false;      }    }  }  return frontLeftLeg && frontRightLeg && rearRightLeg&& rearLeftLeg;}  }
class C{  public static void writeJSONString(Map map,Writer out) throws IOException {  if (map == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=map.entrySet().iterator();  out.write('{');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Map.Entry entry=(Map.Entry)iter.next();    out.write('\"');    out.write(escape(String.valueOf(entry.getKey())));    out.write('\"');    out.write(':');    JSONValue.writeJSONString(entry.getValue(),out);  }  out.write('}');}  }
class C{  public void enqueue(QueueListNode<T> node){synchronized (lock) {    Preconditions.checkNotNull(node);    size++;    if (head == null) {      head=node;      tail=node;      node.setNext(null);      node.setPrev(null);      return;    }    tail.setNext(node);    node.setPrev(tail);    node.setNext(null);    tail=node;  }}  }
class C{  public boolean checkPrefLevels(List lst,List prefList){  for (int i=0; i < lst.size(); i++) {    String id=((String)prefList.get(i));    String value=((String)lst.get(i));    if (id == null || id.trim().equals(Preference.BLANK_PREF_VALUE)) {      continue;    }    if (value == null || value.trim().equals(Preference.BLANK_PREF_VALUE)) {      return false;    }  }  return true;}  }
class C{  private String retrieveFromCache(String url){  String savedJson;  savedJson=mCacheQueryHandler.get(getContext(),url);  log("---------- body found in offline saver : " + savedJson);  log("----- NO NETWORK : retrieving ends");  return savedJson;}  }
class C{  public void addOption(String option){  this.options.put(option,null);}  }
class C{  private AuthenticatedUser authenticateUser(Credentials credentials) throws GuacamoleException {  GuacamoleCredentialsException authFailure=null;  for (  AuthenticationProvider authProvider : authProviders) {    try {      AuthenticatedUser authenticatedUser=authProvider.authenticateUser(credentials);      if (authenticatedUser != null)       return authenticatedUser;    } catch (    GuacamoleCredentialsException e) {      if (authFailure == null)       authFailure=e;    }  }  if (authFailure != null)   throw authFailure;  throw new GuacamoleInvalidCredentialsException("Permission Denied.",CredentialsInfo.USERNAME_PASSWORD);}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  private void dynInit(){  genForm.configureMiniTable(miniTable);  miniTable.setRowSelectionAllowed(true);  miniTable.getModel().addTableModelListener(this);  statusBar.setStatusDB(" ");  tabbedPane.addChangeListener(this);}  }
class C{  public IconSwitchCompat(Context context){  this(context,null);}  }
class C{  public long transferTo(WritableByteChannel dst) throws IOException {  return transferTo(0L,_size,dst);}  }
class C{  public static List<Conflict> resolveConflictsByPath(final ServerContext context,final List<String> conflicts,final ResolveConflictsCommand.AutoResolveType type){  final Command<List<Conflict>> conflictsCommand=new ResolveConflictsCommand(context,conflicts,type);  return conflictsCommand.runSynchronously();}  }
class C{  public static synchronized SplashWindow instance(){  if (INSTANCE == null) {    INSTANCE=new SplashWindow();  }  return INSTANCE;}  }
class C{  protected IMultiPoint nearest(double[] rawTarget,double min[]){  IMultiPoint result=null;  double d=shorter(rawTarget,min[0]);  if (d >= 0 && d < min[0]) {    min[0]=d;    result=point;  }  double dp=Math.abs(coord - rawTarget[dimension - 1]);  IMultiPoint newResult=null;  int numDblRec=0;  if (dp < min[0]) {    if (above != null) {      numDblRec++;      newResult=above.nearest(rawTarget,min);      if (newResult != null) {        result=newResult;      }    }    if (below != null) {      numDblRec++;      newResult=below.nearest(rawTarget,min);      if (newResult != null) {        result=newResult;      }    }    if (numDblRec == 2) {      numDoubleRecursions++;    } else     if (numDblRec == 1) {      numRecursions++;    }  } else {    numRecursions++;    if (rawTarget[dimension - 1] < coord) {      if (below != null) {        newResult=below.nearest(rawTarget,min);      }    } else {      if (above != null) {        newResult=above.nearest(rawTarget,min);      }    }    if (newResult != null) {      return newResult;    }  }  return result;}  }
class C{  public Instance lastInstance(){  return m_Instances.get(m_Instances.size() - 1);}  }
class C{  public void removeMessageListener(MessageListener listener){  m_notifier.remove(listener);}  }
class C{  public Projection create(Properties props) throws ProjectionException {  try {    LatLonPoint llp=convertToLLP((Point2D)props.get(ProjectionFactory.CENTER));    float scale=PropUtils.floatFromProperties(props,ProjectionFactory.SCALE,10000000);    int height=PropUtils.intFromProperties(props,ProjectionFactory.HEIGHT,100);    int width=PropUtils.intFromProperties(props,ProjectionFactory.WIDTH,100);    return new Gnomonic(llp,scale,width,height);  } catch (  Exception e) {    if (Debug.debugging("proj")) {      Debug.output("GnomonicLoader: problem creating Gnomonic projection " + e.getMessage());    }  }  throw new ProjectionException("GnomonicLoader: problem creating Gnomonic projection");}  }
class C{  public final void print(char[] buffer,int offset,int length) throws IOException {  if (_source == null)   return;  if (_writeEncoding != null) {    _isDisableFlush=true;    _writeEncoding.write(this,buffer,offset,length);    _isDisableFlush=false;    return;  }  printLatin1(buffer,offset,length);}  }
class C{  @Override public boolean inRange(int value){  return value >= begin && value <= end;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.INTERFACE_MEMBER_DECLARATION___CONSTANT_DECLARATION_1:    getConstantDeclaration_1().clear();  getConstantDeclaration_1().addAll((Collection<? extends ConstantDeclaration_>)newValue);return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___ABSTRACT_METHOD_DECLARATION_1:getAbstractMethodDeclaration_1().clear();getAbstractMethodDeclaration_1().addAll((Collection<? extends AbstractMethodDeclaration_>)newValue);return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___POSITION_1:getPosition_1().clear();getPosition_1().addAll((Collection<? extends Position_>)newValue);return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___DISPLAY_COLOR_1:getDisplayColor_1().clear();getDisplayColor_1().addAll((Collection<? extends DisplayColor_>)newValue);return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___IS_A1:getIsA_1().clear();getIsA_1().addAll((Collection<? extends IsA_>)newValue);return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___EXTRA_CODE_1:getExtraCode_1().clear();getExtraCode_1().addAll((Collection<? extends ExtraCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static FilterStream create(Filter filter,String streamName){  return new FilterStream(filter,streamName);}  }
class C{  @Override public Builder<K,V> putAll(K key,V... values){  return putAll(key,Arrays.asList(values));}  }
class C{  public void init(){  numLabels=model.data.numLabels();  temp=new double[numLabels];}  }
class C{  public void prepareStatement(String sql,boolean specifyTypeAndConcur,int resultSetType,int resultSetConcurrency) throws GenericDataSourceException, GenericEntityException {  this.prepareStatement(sql,specifyTypeAndConcur,resultSetType,resultSetConcurrency,-1,-1);}  }
class C{  public Event addDetail(final String name,final Object value){  if (name == null)   throw new IllegalArgumentException();synchronized (this) {    if (details == null) {      details=newDetails();    }    details.put(name,value);  }  return this;}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public AbstractResponse(String code,CharSequence description){  if (code == null)   throw new IllegalArgumentException("code can not be null");  this.setRetCode(code);  this.appendLine(description);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public XhtmlDocument appendTitle(Element value){  title.addElement(value);  return (this);}  }
class C{  public int read() throws IOException {  return in.read();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void copyIntoColumn(double[][] destination,int column,int destFromRowNumber,double[] source,int sourceFromRowNumber,int rows) throws Exception {  if (sourceFromRowNumber + rows > source.length) {    throw new Exception("Attempting to copy too many rows " + rows + " after the start row "+ sourceFromRowNumber+ " from the source of length "+ source.length);  }  if (destFromRowNumber + rows > destination.length) {    throw new Exception("Attempting to copy too many rows " + rows + " after the start row "+ destFromRowNumber+ " from the destination of length "+ destination.length);  }  for (int r=0; r < rows; r++) {    destination[r + destFromRowNumber][column]=source[r + sourceFromRowNumber];  }}  }
class C{  @Override public List<byte[]> read() throws IOException {  return read(0L);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected void putInvalid(String cacheName){  try {    grid(0).cache(cacheName).put(KEY_VAL,KEY_VAL);    assert false : "topology validation broken";  } catch (  CacheException ex) {    assert ex.getCause() instanceof IgniteCheckedException && ex.getCause().getMessage().contains("cache topology is not valid");  }}  }
class C{  public Anonymous_concreteMethodDeclaration_1_ createAnonymous_concreteMethodDeclaration_1_(){  Anonymous_concreteMethodDeclaration_1_Impl anonymous_concreteMethodDeclaration_1_=new Anonymous_concreteMethodDeclaration_1_Impl();  return anonymous_concreteMethodDeclaration_1_;}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  public SetPublishingModeResponse SetPublishingMode(RequestHeader RequestHeader,Boolean PublishingEnabled,UnsignedInteger... SubscriptionIds) throws ServiceFaultException, ServiceResultException {  SetPublishingModeRequest req=new SetPublishingModeRequest(RequestHeader,PublishingEnabled,SubscriptionIds);  return (SetPublishingModeResponse)channel.serviceRequest(req);}  }
class C{  public static boolean loadStore(IPreferenceStore store,OS os,CommandDataList cmdDataList,MenuDataList menuDataList){  Command cmdProper=getProperCommand();  initializeDefaults(store,cmdProper);  final String postfix=" (" + Version.v1_4.getName() + ")";  String IdStr=store.getString(PreferenceEntry.preferenceListString.getString());  Command command=Command.valueOf(IdStr);  int position=menuDataList.size();  String openCmd=store.getString(PreferenceEntry.preferenceTargetOpen.getString());  CommandData cmdDataOpen=new CommandData(null,PresetType.presetUser,os,command.getConsole(),ResourceType.resourceTypeFileOrDirectory,false,null,Category.categoryOpen,CommandType.commandTypeExecute,migrateCommandVariables(openCmd));  cmdDataList.add(cmdDataOpen);  MenuData menuDataOpen=new MenuData(cmdDataOpen.getId(),true,MenuNameType.menuNameTypeOpenHere,null,cmdDataOpen.getId());  menuDataOpen.setPosition(position++);  menuDataOpen.setNamePattern(menuDataOpen.getNamePattern() + postfix);  menuDataOpen.setNameType(MenuNameType.menuNameTypeUser);  menuDataList.add(menuDataOpen);  String runCmd=store.getString(PreferenceEntry.preferenceTargetRun.getString());  CommandData cmdDataRun=new CommandData(null,PresetType.presetUser,os,command.getConsole(),ResourceType.resourceTypeFileOrDirectory,false,null,Category.categoryRun,CommandType.commandTypeExecute,migrateCommandVariables(runCmd));  cmdDataList.add(cmdDataRun);  MenuData menuDataRun=new MenuData(cmdDataRun.getId(),true,MenuNameType.menuNameTypeRunWith,null,cmdDataRun.getId());  menuDataRun.setPosition(position++);  menuDataRun.setNamePattern(menuDataRun.getNamePattern() + postfix);  menuDataRun.setNameType(MenuNameType.menuNameTypeUser);  menuDataList.add(menuDataRun);  String exploreCmd=store.getString(PreferenceEntry.preferenceTargetExplore.getString());  CommandData cmdDataExplore=new CommandData(null,PresetType.presetUser,os,command.getExplorer(),ResourceType.resourceTypeFileOrDirectory,false,null,Category.categoryExplore,CommandType.commandTypeExecute,migrateCommandVariables(exploreCmd));  cmdDataList.add(cmdDataExplore);  MenuData menuDataExplore=new MenuData(cmdDataExplore.getId(),true,MenuNameType.menuNameTypeShowIn,null,cmdDataExplore.getId());  menuDataExplore.setPosition(position++);  menuDataExplore.setNamePattern(menuDataExplore.getNamePattern() + postfix);  menuDataExplore.setNameType(MenuNameType.menuNameTypeUser);  menuDataList.add(menuDataExplore);  String copyPathCmd=store.getString(PreferenceEntry.preferenceTargetCopyPath.getString());  CommandData cmdDataCopyPath=new CommandData(null,PresetType.presetUser,os,"Full Path",ResourceType.resourceTypeFileOrDirectory,false,null,Category.categoryClipboard,CommandType.commandTypeClipboard,migrateCommandVariables(copyPathCmd));  cmdDataList.add(cmdDataCopyPath);  MenuData menuDataCopyPath=new MenuData(cmdDataCopyPath.getId(),true,MenuNameType.menuNameTypeCopyToClipboard,null,cmdDataCopyPath.getId());  menuDataCopyPath.setPosition(position++);  menuDataCopyPath.setNamePattern(menuDataCopyPath.getNamePattern() + postfix);  menuDataCopyPath.setNameType(MenuNameType.menuNameTypeUser);  menuDataList.add(menuDataCopyPath);  return true;}  }
class C{  public int length(){  List<A> l=this;  int len=0;  while (l.tail != null) {    l=l.tail;    len++;  }  return len;}  }
class C{  protected void process(Document document) throws Exception {  System.out.println("about to output: " + document);  DOMWriter writer=new DOMWriter();  org.w3c.dom.Document domDocument=writer.write(document);  DOMReader reader=new DOMReader();  Document doc2=reader.read(domDocument);  System.out.println("parsed back again: " + doc2);  XMLWriter xmlWriter=new XMLWriter(System.out);  xmlWriter.write(doc2);}  }
class C{  public SessionNode(Class modelClass){  this("???",modelClass.getName(),new Class[]{modelClass});}  }
class C{  public OutlierResult run(Relation<P> spatial,Relation<? extends NumberVector> relation){  DistanceQuery<P> distFunc=getDistanceFunction().instantiate(spatial);  WritableDataStore<double[]> similarityVectors=DataStoreUtil.makeStorage(spatial.getDBIDs(),DataStoreFactory.HINT_TEMP,double[].class);  WritableDataStore<DBIDs> neighbors=DataStoreUtil.makeStorage(spatial.getDBIDs(),DataStoreFactory.HINT_TEMP,DBIDs.class);  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  double[][] E=new double[ids.size()][ids.size()];  KNNHeap heap=DBIDUtil.newHeap(k);{    int i=0;    for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {      final double val=relation.get(id).doubleValue(0);      assert (heap.size() == 0);      int j=0;      for (DBIDIter n=ids.iter(); n.valid(); n.advance(), j++) {        if (i == j) {          continue;        }        final double e;        final double distance=distFunc.distance(id,n);        heap.insert(distance,n);        if (distance == 0) {          LOG.warning("Zero distances are not supported - skipping: " + DBIDUtil.toString(id) + " "+ DBIDUtil.toString(n));          e=0;        } else {          double diff=Math.abs(val - relation.get(n).doubleValue(0));          double exp=Math.exp(Math.pow(diff,alpha));          e=exp / distance;        }        E[j][i]=e;      }      ModifiableDBIDs nids=DBIDUtil.newArray(heap.size());      while (heap.size() > 0) {        nids.add(heap.poll());      }      neighbors.put(id,nids);    }  }  for (int i=0; i < E[0].length; i++) {    double sum=0.0;    for (int j=0; j < E.length; j++) {      sum+=E[j][i];    }    if (sum == 0) {      sum=1.0;    }    for (int j=0; j < E.length; j++) {      E[j][i]=-c * E[j][i] / sum;    }  }  assert (E.length == E[0].length);  for (int col=0; col < E[0].length; col++) {    assert (E[col][col] == 0.0);    E[col][col]=1.0;  }  E=timesEquals(inverse(E),1 - c);{    int i=0;    for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {      double[] sim=getCol(E,i);      similarityVectors.put(id,sim);    }  }  E=null;  DoubleMinMax minmax=new DoubleMinMax();  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(spatial.getDBIDs(),DataStoreFactory.HINT_STATIC);  for (DBIDIter id=ids.iter(); id.valid(); id.advance()) {    double gmean=1.0;    int cnt=0;    for (DBIDIter iter=neighbors.get(id).iter(); iter.valid(); iter.advance()) {      if (DBIDUtil.equal(id,iter)) {        continue;      }      double sim=VMath.angle(similarityVectors.get(id),similarityVectors.get(iter));      gmean*=sim;      cnt++;    }    final double score=Math.pow(gmean,1.0 / cnt);    minmax.put(score);    scores.putDouble(id,score);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("randomwalkec","RandomWalkEC",scores,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0.0);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public void write(File file) throws TransformerException, IOException {  write(file,(Integer)null);}  }
class C{  public Iterator<NativeDataBinding> iterateNativeDataBindings(){  return nativeBindings.iterator();}  }
class C{  public static void basicPattern(Graph graph,boolean orientInPlace){  Set<Edge> undirectedEdges=new HashSet<>();  NEXT_EDGE:   for (  Edge edge : graph.getEdges()) {    if (!edge.isDirected()) {      continue;    }    Node x=Edges.getDirectedEdgeTail(edge);    Node y=Edges.getDirectedEdgeHead(edge);    for (    Node parent : graph.getParents(y)) {      if (parent != x) {        if (!graph.isAdjacentTo(parent,x)) {          continue NEXT_EDGE;        }      }    }    undirectedEdges.add(edge);  }  for (  Edge nextUndirected : undirectedEdges) {    if (orientInPlace) {      nextUndirected.setEndpoint1(Endpoint.TAIL);      nextUndirected.setEndpoint2(Endpoint.TAIL);    } else {      Node node1=nextUndirected.getNode1();      Node node2=nextUndirected.getNode2();      graph.removeEdge(node1,node2);      graph.addUndirectedEdge(node1,node2);    }  }}  }
class C{  public void putDocumentInCache(int n,Source source){  int cachedNode=getNode(source);  if (DTM.NULL != cachedNode) {    if (!(cachedNode == n))     throw new RuntimeException("Programmer's Error!  " + "putDocumentInCache found reparse of doc: " + source.getSystemId());    return;  }  if (null != source.getSystemId()) {    m_sourceTree.addElement(new SourceTree(n,source.getSystemId()));  }}  }
class C{  public ProjectionMap(){  map=new LinkedHashMap<>();}  }
class C{  public static int hash(int seed,char[] charArray){  if (charArray == null) {    return 0;  }  for (  char aChar : charArray) {    seed=hash(seed,aChar);  }  return seed;}  }
class C{  private void onPrimary(){  try {    Ignite pri=ignite;    for (int i=0; i < RETRIES; i++) {      if (DEBUG)       log.info("***");      if (DEBUG || i % LOG_FREQ == 0)       log.info("*** Primary Iteration #" + i + " ***");      if (DEBUG)       log.info("***");      IgniteCache<String,Integer> c=pri.cache(null);      Integer oldCntr=c.localPeek(CNTR_KEY,CachePeekMode.ONHEAP);      GridCacheEntryEx dhtNear=near(pri).peekEx(CNTR_KEY);      try (Transaction tx=pri.transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){        if (DEBUG)         log.info("Started tx [grid=" + pri.name() + ", primary=true, xid="+ tx.xid()+ ", oldCntr="+ oldCntr+ ", node="+ pri.name()+ ", dhtEntry="+ dht(pri).peekEx(CNTR_KEY)+ ", dhtNear="+ dhtNear+ ']');        int curCntr=c.get(CNTR_KEY);        assertTrue(lockedMultiNode.compareAndSet(false,true));        if (dhtNear == null)         dhtNear=near(pri).peekEx(CNTR_KEY);        if (DEBUG)         log.info("Read counter [grid=" + pri.name() + ", primary=true, curCntr="+ curCntr+ ", oldCntr="+ oldCntr+ ", node="+ pri.name()+ ", dhtEntry="+ dht(pri).peekEx(CNTR_KEY)+ ", dhtNear="+ dhtNear+ ']');        int global=globalCntrMultiNode.get();        assert curCntr >= global : invalid("Counter mismatch",pri,true,curCntr,global);        int newCntr=curCntr + 1;        if (DEBUG)         log.info("Setting global counter [old=" + global + ", new="+ newCntr+ ']');        assert globalCntrMultiNode.compareAndSet(global,newCntr) : invalid("Invalid global counter",pri,true,newCntr,global);        int prev=c.getAndPut(CNTR_KEY,newCntr);        if (DEBUG) {          log.info("Put new value [grid=" + pri.name() + ", primary=true, prev="+ prev+ ", newCntr="+ newCntr+ ']');        }        assert curCntr == prev : invalid("Counter mismatch",pri,true,curCntr,prev);        assertTrue(lockedMultiNode.compareAndSet(true,false));        tx.commit();        if (DEBUG)         log.info("Committed tx: " + tx);      }     }  } catch (  Exception e) {    log.error(e.getMessage(),e);    fail(e.getMessage());  }}  }
class C{  public static LocationsBuilder create(){  return new LocationsBuilder();}  }
class C{  public static AffineTransformation reorderAxesTransformation(int dim,int[] axes){  double[][] m=zeroMatrix(dim + 1);  for (int i=0; i < axes.length; i++) {    assert (0 < axes[i] && axes[i] <= dim);    m[i][axes[i] - 1]=1.0;  }  int useddim=1;  for (int i=axes.length; i < dim + 1; i++) {{      boolean search=true;      while (search) {        search=false;        for (        int a : axes) {          if (a == useddim) {            search=true;            useddim++;            break;          }        }      }    }    m[i][useddim - 1]=1.0;    useddim++;  }  assert (useddim - 2 == dim);  return new AffineTransformation(dim,m,null);}  }
class C{  private void startMainActivity(){  Intent intent=new Intent(getActivity(),MainActivity.class);  startActivity(intent);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void skipWhiteSpace(LineNumberReader reader) throws IOException {  while (true) {    reader.mark(10);    int c=reader.read();    if (Character.isWhitespace((char)c)) {      continue;    }    reader.reset();    break;  }}  }
class C{  public double[] znorm(double[] series,double normalizationThreshold){  double[] res=new double[series.length];  double mean=mean(series);  double sd=stDev(series);  if (sd < normalizationThreshold) {    return res;  }  for (int i=0; i < res.length; i++) {    res[i]=(series[i] - mean) / sd;  }  return res;}  }
class C{  public static String constructRequestUri(String path,MultiMap params,List<String> paramsToRemove,String subResource,SlashHandling slashHandling){  String result=path;  if (paramsToRemove != null) {    for (    String paramToRemove : paramsToRemove) {      params.remove(paramToRemove);    }  }  boolean pathEndsWithSlash=result.endsWith(SLASH);  if (subResource != null) {    if (pathEndsWithSlash) {      result=result + subResource;    } else {      result=result + SLASH + subResource;    }  }  if (slashHandling.equals(SlashHandling.END_WITH_SLASH)) {    if (!pathEndsWithSlash) {      result=result + SLASH;    }  } else   if (slashHandling.equals(SlashHandling.END_WITHOUT_SLASH)) {    result=removeFromEndOfString(result,SLASH);  }  if (!params.isEmpty()) {    result=result + "?" + ExpansionDeltaUtil.mapToDelimetedString(params,"&");  }  return result;}  }
class C{  private static InetAddress decodeIpv6(String input,int pos,int limit){  byte[] address=new byte[16];  int b=0;  int compress=-1;  int groupOffset=-1;  for (int i=pos; i < limit; ) {    if (b == address.length) {      return null;    }    if (i + 2 <= limit && input.regionMatches(i,"::",0,2)) {      if (compress != -1) {        return null;      }      i+=2;      b+=2;      compress=b;      if (i == limit) {        break;      }    } else     if (b != 0) {      if (input.regionMatches(i,":",0,1)) {        i++;      } else       if (input.regionMatches(i,".",0,1)) {        if (!decodeIpv4Suffix(input,groupOffset,limit,address,b - 2)) {          return null;        }        b+=2;        break;      } else {        return null;      }    }    int value=0;    groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      int hexDigit=decodeHexDigit(c);      if (hexDigit == -1) {        break;      }      value=(value << 4) + hexDigit;    }    int groupLength=i - groupOffset;    if (groupLength == 0 || groupLength > 4) {      return null;    }    address[b++]=(byte)((value >>> 8) & 0xff);    address[b++]=(byte)(value & 0xff);  }  if (b != address.length) {    if (compress == -1) {      return null;    }    System.arraycopy(address,compress,address,address.length - (b - compress),b - compress);    Arrays.fill(address,compress,compress + (address.length - b),(byte)0);  }  try {    return InetAddress.getByAddress(address);  } catch (  UnknownHostException e) {    throw new AssertionError();  }}  }
class C{  public static Stroke convertStroke(Element e){  Value v;  v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.STROKE_WIDTH_INDEX);  float width=v.getFloatValue();  if (width == 0.0f)   return null;  v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.STROKE_LINECAP_INDEX);  int linecap=convertStrokeLinecap(v);  v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.STROKE_LINEJOIN_INDEX);  int linejoin=convertStrokeLinejoin(v);  v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.STROKE_MITERLIMIT_INDEX);  float miterlimit=convertStrokeMiterlimit(v);  v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.STROKE_DASHARRAY_INDEX);  float[] dasharray=convertStrokeDasharray(v);  float dashoffset=0;  if (dasharray != null) {    v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.STROKE_DASHOFFSET_INDEX);    dashoffset=v.getFloatValue();    if (dashoffset < 0) {      float dashpatternlength=0;      for (int i=0; i < dasharray.length; i++) {        dashpatternlength+=dasharray[i];      }      if ((dasharray.length % 2) != 0)       dashpatternlength*=2;      if (dashpatternlength == 0) {        dashoffset=0;      } else {        while (dashoffset < 0)         dashoffset+=dashpatternlength;      }    }  }  return new BasicStroke(width,linecap,linejoin,miterlimit,dasharray,dashoffset);}  }
class C{  public ServiceConfigurationError(String message){  super(message);}  }
class C{  public void queueAt(long wakeTime){  boolean isNotify=_clock.queueAt(this,wakeTime);  if (isNotify) {    _coordinatorThread.wake();  }}  }
class C{  private List<ValidationError> checkForNoRatesPresent(){  if (overheadRates != null && overheadRates.isEmpty())   return Arrays.asList(new ValidationError("overheadrate","estimate.overhead.altleastone_overheadrate_needed")); else   return null;}  }
class C{  public Contact addContact(String contact){  Contact prop=new Contact(contact);  addContact(prop);  return prop;}  }
class C{  default void onLiveProcessingStarted(CatchUpSubscription subscription){}  }
class C{  public static void remove(){  AUTH_TOKEN.remove();}  }
class C{  protected int defaultMinInstNum(){  return 1;}  }
class C{  public IonObjectReader(Class typeClass){  this(typeClass,new IonObjectReaderConfiguratorNopImpl());}  }
class C{  public static boolean isOsgi(){  return osgi;}  }
class C{  private void changeTestMode(){  boolean testMode=preferenceUtils.getBoolean(testModeOpened,false);  if (testMode) {    restoreData();  }  preferenceUtils.putBoolean(testModeOpened,!testMode);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static int showDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,@NotNull String[] options,int defaultOptionIndex,@Nullable Icon icon){  return showDialog(message,title,options,defaultOptionIndex,icon,null);}  }
class C{  public int read(char ch[],int offset,int length) throws IOException {  if (length > fBuffer.length) {    length=fBuffer.length;  }  int count=fInputStream.read(fBuffer,0,length);  for (int i=0; i < count; i++) {    int b0=fBuffer[i];    if (b0 < 0) {      throw new IOException(Localizer.getMessage("jsp.error.xml.invalidASCII",Integer.toString(b0)));    }    ch[offset + i]=(char)b0;  }  return count;}  }
class C{  public int availableInProcess(){  return Math.max(0,maxInProcess - pending.size());}  }
class C{  public boolean retainEntries(TObjectFloatProcedure<K> procedure){  boolean modified=false;  K[] keys=(K[])_set;  float[] values=_values;  stopCompactingOnRemove();  try {    for (int i=keys.length; i-- > 0; ) {      if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    startCompactingOnRemove(modified);  }  return modified;}  }
class C{  public static int dsGenerateTaint(String constant){  return 0;}  }
class C{  public String saveLocalizedValues(){  setLocalizeVisible(false);  dirty=true;  menuBean.setCurrentPageLink(initUrl);  return null;}  }
class C{  public void clear(){  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);  selection.clear();  if (!oldSelection.isEmpty()) {    fireSelectionChanged(oldSelection,selection);  }}  }
class C{  private GlobalCodeNodeCommentSynchronizer(){}  }
class C{  public static final byte[] deflate(byte[] in){  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(in.length / EXPECTED_COMPRESSION_RATIO);  DeflaterOutputStream outStream=new DeflaterOutputStream(byteOut);  try {    outStream.write(in);  } catch (  Exception e) {    LOG.error("Error compressing: ",e);  }  try {    outStream.close();  } catch (  IOException e) {    LOG.error("Error closing: ",e);  }  return byteOut.toByteArray();}  }
class C{  private int rightmostDip(){  for (int i=n - 2; i >= 0; i--) {    if (index[i] < index[i + 1]) {      return i;    }  }  return -1;}  }
class C{  public void onFindToolbarHidden(){}  }
class C{  public String toString(){  return value;}  }
class C{  public void finalize(){}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  private void logMessage(String msg,Object[] obj){  if (getMonitoringPropertiesLoader().isToLogIndications()) {    _logger.debug(msg,obj);  }}  }
class C{  public boolean addEdges(List<Edge> edges){  return getEdges().addAll(edges);}  }
class C{  void purge(long cutoff){  while (sampleCount >= MIN_QUEUE_SIZE && oldest != null && cutoff - oldest.timestamp > 0) {    Sample removed=oldest;    if (removed.accelerating) {      acceleratingCount--;    }    sampleCount--;    oldest=removed.next;    if (oldest == null) {      newest=null;    }    pool.release(removed);  }}  }
class C{  public final synchronized void reportPromotePiece(int choice){  if (promoteMove == null)   return;  final boolean white=game.currPos().whiteMove;  int promoteTo;switch (choice) {case 1:    promoteTo=white ? Piece.WROOK : Piece.BROOK;  break;case 2:promoteTo=white ? Piece.WBISHOP : Piece.BBISHOP;break;case 3:promoteTo=white ? Piece.WKNIGHT : Piece.BKNIGHT;break;default :promoteTo=white ? Piece.WQUEEN : Piece.BQUEEN;break;}promoteMove.promoteTo=promoteTo;Move m=promoteMove;promoteMove=null;makeHumanMove(m);}  }
class C{  public XMLSignatureInput performTransforms(XMLSignatureInput xmlSignatureInput) throws TransformationException {  return performTransforms(xmlSignatureInput,null);}  }
class C{  public Vector2f add(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  return new Vector2f(x + vec.x,y + vec.y);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ArcDialFrame)) {    return false;  }  ArcDialFrame that=(ArcDialFrame)obj;  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  if (!PaintUtilities.equal(this.foregroundPaint,that.foregroundPaint)) {    return false;  }  if (this.startAngle != that.startAngle) {    return false;  }  if (this.extent != that.extent) {    return false;  }  if (this.innerRadius != that.innerRadius) {    return false;  }  if (this.outerRadius != that.outerRadius) {    return false;  }  if (!this.stroke.equals(that.stroke)) {    return false;  }  return super.equals(obj);}  }
class C{  public String formatValue(Object value){  String text;  if (formatter == null) {    if (value == null) {      text="";    } else {      MetadataTools metadataTools=AppBeans.get(MetadataTools.NAME);      if (metaProperty != null) {        text=metadataTools.format(value,metaProperty);      } else       if (datatype != null) {        text=datatype.format(value,locale);      } else {        text=metadataTools.format(value);      }    }  } else {    text=formatter.format(value);  }  return text;}  }
class C{  public StdOutWriter(OutputStream out){  super(out,true);}  }
class C{  public void testInsufficientMaterial() throws ChessParseError {  Game game=new Game(null,new TimeControlData());  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.setPos(TextIO.readFEN("4k3/8/8/8/8/8/8/4K3 w - - 0 1"));  assertEquals(Game.GameState.DRAW_NO_MATE,game.getGameState());  final int a1=Position.getSquare(0,0);  Position pos=new Position(game.currPos());  pos.setPiece(a1,Piece.WROOK);  game.setPos(pos);  assertEquals(Game.GameState.ALIVE,game.getGameState());  pos.setPiece(a1,Piece.BQUEEN);  game.setPos(pos);  assertEquals(Game.GameState.ALIVE,game.getGameState());  pos.setPiece(a1,Piece.WPAWN);  game.setPos(pos);  assertEquals(Game.GameState.ALIVE,game.getGameState());  pos.setPiece(a1,Piece.BKNIGHT);  game.setPos(pos);  assertEquals(Game.GameState.DRAW_NO_MATE,game.getGameState());  pos.setPiece(a1,Piece.WBISHOP);  game.setPos(pos);  assertEquals(Game.GameState.DRAW_NO_MATE,game.getGameState());  final int c1=Position.getSquare(2,0);  pos.setPiece(c1,Piece.WKNIGHT);  game.setPos(pos);  assertEquals(Game.GameState.ALIVE,game.getGameState());  pos.setPiece(c1,Piece.BBISHOP);  game.setPos(pos);  assertEquals(Game.GameState.DRAW_NO_MATE,game.getGameState());  pos.setPiece(c1,Piece.WBISHOP);  game.setPos(pos);  assertEquals(Game.GameState.DRAW_NO_MATE,game.getGameState());  final int b2=Position.getSquare(1,1);  pos.setPiece(b2,Piece.WBISHOP);  game.setPos(pos);  assertEquals(Game.GameState.DRAW_NO_MATE,game.getGameState());  pos.setPiece(b2,Piece.BBISHOP);  game.setPos(pos);  assertEquals(Game.GameState.DRAW_NO_MATE,game.getGameState());  final int b3=Position.getSquare(1,2);  pos.setPiece(b3,Piece.WBISHOP);  game.setPos(pos);  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.setPos(TextIO.readFEN("8/8/8/8/8/8/8/K3nnk1 w - - 0 1"));  assertEquals(Game.GameState.ALIVE,game.getGameState());}  }
class C{  public static boolean isXML11NCName(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  CDFTsr8(int xoffset,int xstride,int Xoffset){  m=3;  N=8;  this.xoffset=xoffset;  this.xstride=xstride;  this.Xoffset=Xoffset;  n0=xoffset;  n1=n0 + xstride;  n2=n1 + xstride;  n3=n2 + xstride;  n4=n3 + xstride;  n5=n4 + xstride;  n6=n5 + xstride;  n7=n6 + xstride;  m0=Xoffset;  m1=m0 + 1;  m2=m1 + 1;  m3=m2 + 1;  m4=m3 + 1;  m5=m4 + 1;  m6=m5 + 1;  m7=m6 + 1;}  }
class C{  public boolean subscribeSMIProviderConnection(String smisProviderURI){  _log.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  boolean isSuccess=false;  try {    _log.debug("smisProviderURI :{}",smisProviderURI);    CimConnection cimConnection=getSMISProviderConnection(smisProviderURI);    if (null != cimConnection) {      _connectionManager.subscribe(cimConnection);      isSuccess=true;    }  } catch (  Exception e) {    _log.error("subscription for the SMIS provider {} is failed",smisProviderURI);    _log.error(e.getMessage(),e);  }  _log.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());  return isSuccess;}  }
class C{  public SearchResult findByName(String tenantName,SearchCriteria criteria,int limit) throws Exception {  return getService().findByName(tenantName,criteria,limit,this.getServiceContext());}  }
class C{  public void addDecayAcceleration(float acceleration){  this.decayAccelerationLevel=Math.min(this.decayAccelerationLevel + acceleration,40.0F);}  }
class C{  public static String deriveOperation(Span span){  if (SpanHttpDeriverUtil.isHttp(span)) {    return SpanHttpDeriverUtil.getHttpMethod(span);  }  return span.getName();}  }
class C{  public SparseArray(){  this(10);}  }
class C{  protected void sequence_LineStart(ISerializationContext context,LineStart semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Token updateSuffixToken(Token suffixToken,Token lastPrefixToken){  suffixToken.setOffset(lastPrefixToken.endOffset() + suffixToken.startOffset(),lastPrefixToken.endOffset() + suffixToken.endOffset());  return suffixToken;}  }
class C{  public static IPackageFragmentRoot addLibraryWithImport(IJavaProject jproject,IPath jarPath,IPath sourceAttachPath,IPath sourceAttachRoot) throws IOException, CoreException {  IProject project=jproject.getProject();  IFile newFile=project.getFile(jarPath.lastSegment());  InputStream inputStream=null;  try {    inputStream=new FileInputStream(jarPath.toFile());    newFile.create(inputStream,true,null);  }  finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {      }    }  }  return addLibrary(jproject,newFile.getFullPath(),sourceAttachPath,sourceAttachRoot);}  }
class C{  public void insert(final AbstractInsnNode insn){  ++size;  if (first == null) {    first=insn;    last=insn;  } else {    first.prev=insn;    insn.next=first;  }  first=insn;  cache=null;  insn.index=0;}  }
class C{  private void sendEMail(MClient client,int AD_User_ID,String email,String subject,String message,File pdf,boolean isHtml){  if (AD_User_ID != 0) {    MUser user=MUser.get(getCtx(),AD_User_ID);    email=user.getEMail();    if (email != null && email.length() > 0) {      email=email.trim();      if (!m_emails.contains(email)) {        client.sendEMail(null,user,subject,message,pdf,isHtml);        m_emails.add(email);      }    } else     log.info("No EMail for User " + user.getName());  } else   if (email != null && email.length() > 0) {    if (email.indexOf(';') == -1) {      email=email.trim();      if (!m_emails.contains(email)) {        client.sendEMail(email,subject,message,pdf,isHtml);        m_emails.add(email);      }      return;    }    StringTokenizer st=new StringTokenizer(email,";");    while (st.hasMoreTokens()) {      String email1=st.nextToken().trim();      if (email1.length() == 0)       continue;      if (!m_emails.contains(email1)) {        client.sendEMail(email1,subject,message,pdf,isHtml);        m_emails.add(email1);      }    }  }}  }
class C{  void notifyArriving(Integer id){  firePropertyChange("Arriving",null,id);}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> putAll(RangeMap<K,? extends V> rangeMap){  for (  Entry<Range<K>,? extends V> entry : rangeMap.asMapOfRanges().entrySet()) {    put(entry.getKey(),entry.getValue());  }  return this;}  }
class C{  public int size(){  return map.size();}  }
class C{  public static void addTokenToSentence(LinkedVector sentence,String token,String tag){  NEWord word=new NEWord(new Word(token),null,tag);  Vector<NEWord> v=NEWord.splitWord(word);  if (ParametersForLbjCode.currentParameters.tokenizationScheme.equals(TokenizationScheme.DualTokenizationScheme)) {    sentence.add(word);    word.parts=new String[v.size()];    for (int j=0; j < v.size(); j++)     word.parts[j]=v.elementAt(j).form;  } else {    if (ParametersForLbjCode.currentParameters.tokenizationScheme.equals(TokenizationScheme.LbjTokenizationScheme)) {      for (int j=0; j < v.size(); j++)       sentence.add(v.elementAt(j));    } else {      System.err.println("Fatal error in BracketFileManager.readAndAnnotate - unrecognized tokenization scheme: " + ParametersForLbjCode.currentParameters.tokenizationScheme);      System.exit(0);    }  }}  }
class C{  public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public Object run(URI source,List args) throws CompilationFailedException, IOException {  return run(new GroovyCodeSource(source),((String[])args.toArray(new String[args.size()])));}  }
class C{  @SafeVarargs public final void injectElements(TimestampedValue<InputT>... values) throws Exception {  injectElements(Arrays.asList(values));}  }
class C{  CompilationUnitCompletion(CompilationUnit unit){  reset(unit);  setIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION,true);  setIgnored(CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,true);  setIgnored(CompletionProposal.KEYWORD,true);  setIgnored(CompletionProposal.LABEL_REF,true);  setIgnored(CompletionProposal.METHOD_DECLARATION,true);  setIgnored(CompletionProposal.METHOD_NAME_REFERENCE,true);  setIgnored(CompletionProposal.METHOD_REF,true);  setIgnored(CompletionProposal.CONSTRUCTOR_INVOCATION,true);  setIgnored(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER,true);  setIgnored(CompletionProposal.PACKAGE_REF,true);  setIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION,true);  setIgnored(CompletionProposal.VARIABLE_DECLARATION,true);  setIgnored(CompletionProposal.TYPE_REF,true);}  }
class C{  private void syncProgress(SeekBar seekBar){  float value=seekBarProgressToPrefValue(seekBar.getProgress());  if (value != mValue) {    if (callChangeListener(value)) {      setValue(value,false);    } else {      seekBar.setProgress(prefValueToSeekBarProgress(mValue));    }  }}  }
class C{  public boolean addGpsTags(double latitude,double longitude){  ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));  ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));  ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? ExifInterface.GpsLatitudeRef.NORTH : ExifInterface.GpsLatitudeRef.SOUTH);  ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? ExifInterface.GpsLongitudeRef.EAST : ExifInterface.GpsLongitudeRef.WEST);  if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {    return false;  }  setTag(latTag);  setTag(longTag);  setTag(latRefTag);  setTag(longRefTag);  return true;}  }
class C{  public T caseFunctionBlockMappingModel(FunctionBlockMappingModel object){  return null;}  }
class C{  private static void checkIndexForBinarySearch(int length,int start,int end){  if (start > end) {    throw new IllegalArgumentException();  }  if (length < end || 0 > start) {    throw new ArrayIndexOutOfBoundsException();  }}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  MatrixAspectPanel(String aspect){  this.aspect=aspect;}  }
class C{  static void stripDelimiter(StringBuilder cql,Delimiter delimiter){  int last;  for (last=cql.length(); last > 0; last--) {    if (!Character.isWhitespace(cql.charAt(last - 1))) {      break;    }  }  cql.delete(last - delimiter.getDelimiter().length(),cql.length());}  }
class C{  public void printStackTrace(PrintStream s){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(new PrintWriter(s));  } else {    super.printStackTrace(s);  }}  }
