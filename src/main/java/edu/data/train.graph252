class C{  public static boolean shuffle(Object[] objArray){  if (objArray == null) {    return false;  }  return shuffle(objArray,getRandom(objArray.length));}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return resolvedDeserializedProfile;}  }
class C{  @Override public void onDetach(){  super.onDetach();  if (getChildFragmentManager().getFragments() != null) {    getChildFragmentManager().getFragments().clear();  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.FUNCTION_DECLARATION___IS_EXTERNAL:    return isExternal();case N4JSPackage.FUNCTION_DECLARATION___IS_EXPORTED:  return isExported();case N4JSPackage.FUNCTION_DECLARATION___IS_EXPORTED_AS_DEFAULT:return isExportedAsDefault();case N4JSPackage.FUNCTION_DECLARATION___GET_EXPORTED_NAME:return getExportedName();case N4JSPackage.FUNCTION_DECLARATION___IS_TOPLEVEL:return isToplevel();case N4JSPackage.FUNCTION_DECLARATION___IS_ASYNC:return isAsync();case N4JSPackage.FUNCTION_DECLARATION___GET_LOCAL_ARGUMENTS_VARIABLE:return getLocalArgumentsVariable();case N4JSPackage.FUNCTION_DECLARATION___GET_DEFINED_FUNCTION_OR_ACCESSOR:return getDefinedFunctionOrAccessor();case N4JSPackage.FUNCTION_DECLARATION___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  public static void printMethods(Class cl){  Method[] methods=cl.getDeclaredMethods();  for (  Method m : methods) {    Class retType=m.getReturnType();    String name=m.getName();    System.out.print("   ");    String modifiers=Modifier.toString(m.getModifiers());    if (modifiers.length() > 0)     System.out.print(modifiers + " ");    System.out.print(retType.getName() + " " + name+ "(");    Class[] paramTypes=m.getParameterTypes();    for (int j=0; j < paramTypes.length; j++) {      if (j > 0)       System.out.print(", ");      System.out.print(paramTypes[j].getName());    }    System.out.println(");");  }}  }
class C{  @Override public int hashCode(){  int result=carbonTableIdentifier.hashCode();  result=31 * result + columnIdentifier.hashCode();  return result;}  }
class C{  public static <T,R>TransactionFlow<T,R> of(TransactionTemplate transactionManager,Function<T,R> fn){  return new TransactionFlow<>(transactionManager,fn);}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  if (!isFirstBatchDone() || m_filterAfterFirstBatch) {    return Parser.filter(m_Expression,instances);  } else {    return instances;  }}  }
class C{  private JButton addKeybindButton(JPanel panel,String buttonText){  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.EAST;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,5,0);  gbc.gridx=1;  gbc.gridy=keybindButtonGridYCounter++;  JButton jbtn=new JButton(buttonText);  panel.add(jbtn,gbc);  return jbtn;}  }
class C{  private long cacheResponseAge(){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public void remove(CacheObject key) throws IgniteCheckedException {  try {    writer.deleteDocuments(new Term(KEY_FIELD_NAME,org.apache.commons.codec.binary.Base64.encodeBase64String(key.valueBytes(objectContext()))));  } catch (  IOException e) {    throw new IgniteCheckedException(e);  } finally {    updateCntr.incrementAndGet();  }}  }
class C{  public static TermsQueryBuilder termsQuery(String name,String... values){  return new TermsQueryBuilder(name,values);}  }
class C{  public Executor withCheckpointFrequency(int checkpointFrequency){  this.checkpointFrequency=checkpointFrequency;  return this;}  }
class C{  public final double meanOrMode(int attIndex){  double result, found;  int[] counts;  if (attribute(attIndex).isNumeric()) {    result=found=0;    for (int j=0; j < numInstances(); j++) {      if (!instance(j).isMissing(attIndex)) {        found+=instance(j).weight();        result+=instance(j).weight() * instance(j).value(attIndex);      }    }    if (Utils.eq(found,0)) {      return 0;    } else {      return result / found;    }  } else   if (attribute(attIndex).isNominal()) {    counts=new int[attribute(attIndex).numValues()];    for (int j=0; j < numInstances(); j++) {      if (!instance(j).isMissing(attIndex)) {        counts[(int)instance(j).value(attIndex)]+=instance(j).weight();      }    }    return (double)Utils.maxIndex(counts);  } else {    return 0;  }}  }
class C{  public TabInfo(String name,Icon icon,JComponent component){  this.name=name;  this.component=component;  this.header=new TabHeader(name,icon);}  }
class C{  public boolean isRegistered() throws XMPPException {  return getRegisterInfo().isRegistered();}  }
class C{  private static byte CallNonvirtualByteMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualByteMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Byte,true);    return Reflection.unwrapByte(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  boolean removeMapping(Object o){  if (!(o instanceof Map.Entry))   return false;  Entry<K,V>[] tab=getTable();  Map.Entry<?,?> entry=(Map.Entry<?,?>)o;  Object k=maskNull(entry.getKey());  int h=hash(k);  int i=indexFor(h,tab.length);  Entry<K,V> prev=tab[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (h == e.hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return true;    }    prev=e;    e=next;  }  return false;}  }
class C{  private boolean isPreferredTarget(RPEntity target){  return !(target instanceof AttackableCreature);}  }
class C{  public String toString(){  return m_mimeType + "(" + m_extension+ ")";}  }
class C{  public void addPoint(final double lat,final double lon){  if (isDone)   throw new IllegalStateException("Can't call addPoint() if done() already called");  points.add(new GeoPoint(planetModel,lat,lon));}  }
class C{  public TextStyle regExTextStyle(){  TextStyle textStyle=defaultTextStyle().copy();  textStyle.setColor(new RGB(255,128,64));  return textStyle;}  }
class C{  private CIMObjectPath[] execQuery(StorageSystem storageDevice,CIMObjectPath queryClass,String wql,boolean throwException) throws WBEMException {  log.info("ExecQuery: {}",wql);  CloseableIterator<CIMInstance> instances=null;  try {    long start=System.currentTimeMillis();    instances=getClient(storageDevice).execQuery(queryClass,wql,QUERY_LANG);    log.info("ExecQuery took {}ms",System.currentTimeMillis() - start);    Iterator<CIMObjectPath> transform=transform(instances,getInstanceToObjectPathFn());    return toArray(transform,CIMObjectPath.class);  } catch (  WBEMException e) {    log.warn("Failed to perform SMI-S query: {}",wql,e);    if (throwException) {      throw e;    }  } finally {    if (instances != null) {      instances.close();    }  }  return new CIMObjectPath[0];}  }
class C{  public void testRandomStrings() throws Exception {  Random random=random();  checkRandomData(random,analyzer,500 * RANDOM_MULTIPLIER);}  }
class C{  public void insertString(int offs,String str,AttributeSet a) throws BadLocationException {  if (str != null) {    if (!(editMask.isEmpty())) {      Character selected=editMask.get(new Integer(offs));      if (selected != null) {        if (Character.isLetter(selected.charValue())) {        } else {          str=selected.charValue() + str;        }      } else {        return;      }    }  } else {    return;  }  char[] upper=str.toCharArray();  for (int i=0; i < upper.length; i++) {    upper[i]=Character.toUpperCase(upper[i]);    Character selected=editMask.get(new Integer(offs + i));    if (selected != null) {      if (Character.isLetter(selected.charValue())) {        if (!(Character.isDigit(upper[i]))) {          return;        }      }    }  }  if (super.getLength() > offs) {    super.remove(offs,upper.length);  }  super.insertString(offs,new String(upper),a);}  }
class C{  public void unselected(){  isSelected_=false;}  }
class C{  public static void printUsage(){  System.out.println("Usage: FeatureGeneration -lbl/-unlbl -inputfile/-inputdir [input file/input dir]");}  }
class C{  private boolean isUpScrollRequired(){  return elements.length > tabsThatFitInComposite && topVisibleIndex != 0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private Map<String,Action> loadAllReferencedActions(Auth auth){  Map<String,Action> actionMap=new HashMap<String,Action>();  for (  Userprofile userprofile : auth.getUserprofiles().getUserprofile()) {    List<ProfileRef> profileList=userprofile.getProfileRef();    if (profileList != null) {      for (      ProfileRef profileRef : profileList) {        Profile profileWithActions=getProfileMap().get(profileRef.getName());        if (profileWithActions != null) {          List<Action> actionList=profileWithActions.getAction();          for (          Action action : actionList) {            actionMap.put(action.getId(),action);          }        } else {          log.error("Could not find profile " + profileRef.getName() + " of user "+ getAuthService().getUsername());        }      }    }  }  return actionMap;}  }
class C{  private void updateConfigFile(String content,Path configFile) throws IOException {  Files.write(configFile,content.getBytes(),StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.CREATE);}  }
class C{  protected boolean isFatalAlert(){  return (alert[0] == 2);}  }
class C{  public static CommitParams create(@NotNull String container){  return new CommitParams().withContainer(container);}  }
class C{  public void approve(){  Integer userId=null;  if (parameters.get(ACTIONNAME)[0] != null && parameters.get(ACTIONNAME)[0].contains("reject"))   userId=Integer.valueOf(parameters.get("approverUserId")[0]); else   if (null != parameters.get("approverUserId") && Integer.valueOf(parameters.get("approverUserId")[0]) != -1)   userId=Integer.valueOf(parameters.get("approverUserId")[0]); else   userId=ApplicationThreadLocals.getUserId().intValue();  final Position positionByUserId=eisCommonService.getPositionByUserId(userId.longValue());  final PersonalInformation empForCurrentUser=budgetDetailService.getEmpForCurrentUser();  String name="";  if (empForCurrentUser != null)   name=empForCurrentUser.getName();  if (name == null)   name=empForCurrentUser.getEmployeeFirstName();  if (LOGGER.isInfoEnabled())   LOGGER.info("===============Processing " + savedbudgetDetailList.size() + "Budget line items");  if (parameters.get("actionName")[0].contains("approv"))   for (  final BudgetDetail detail : savedbudgetDetailList) {    validateAmount(detail);    if (consolidatedScreen)     detail.setApprovedAmount(detail.getApprovedAmount().multiply(BigDecimal.valueOf(1000)));    final String comment=detail.getState() == null ? "" : detail.getState().getExtraInfo();    detail.transition(true).withStateValue("END").withOwner(positionByUserId).withComments(comment);    budgetDetailService.persist(detail);    final BudgetDetail detailBE=(BudgetDetail)persistenceService.find("from BudgetDetail where id=?",detail.getNextYrId());    if (consolidatedScreen)     detailBE.setApprovedAmount(detail.getNextYrapprovedAmount().multiply(BigDecimal.valueOf(1000))); else     detailBE.setApprovedAmount(detail.getNextYrapprovedAmount());    detailBE.transition(true).withStateValue("END").withOwner(getPosition()).withComments(comment);    budgetDetailService.persist(detailBE);  } else   for (  final BudgetDetail detail : savedbudgetDetailList) {    validateAmount(detail);    if (consolidatedScreen)     detail.setApprovedAmount(detail.getApprovedAmount().multiply(BigDecimal.valueOf(1000)));    final String comment=detail.getState() == null ? "" : detail.getState().getExtraInfo();    detail.transition(true).withStateValue("Forwarded by " + name).withOwner(positionByUserId).withComments(comment);    budgetDetailService.persist(detail);    final BudgetDetail detailBE=(BudgetDetail)persistenceService.find("from BudgetDetail where id=?",detail.getNextYrId());    if (consolidatedScreen)     detailBE.setApprovedAmount(detail.getNextYrapprovedAmount().multiply(BigDecimal.valueOf(1000))); else     detailBE.setApprovedAmount(detail.getNextYrapprovedAmount());    detailBE.transition(true).withStateValue("Forwarded by " + name).withOwner(positionByUserId).withComments(comment);    budgetDetailService.persist(detailBE);  }  if (LOGGER.isInfoEnabled())   LOGGER.info("Processed Budget line items");  if (getTopBudget().getState().getOwnerPosition() != null && getTopBudget().getState().getOwnerPosition().getId() != positionByUserId.getId())   getTopBudget().transition(true).withStateValue("Forwarded by " + name).withOwner(positionByUserId).withComments(comments);  final Budget beBudget=budgetService.find("from Budget where referenceBudget=?",getTopBudget());  if (beBudget.getState().getOwnerPosition() != null && beBudget.getState().getOwnerPosition().getId() != positionByUserId.getId())   beBudget.transition(true).withStateValue("Forwarded by " + name).withOwner(positionByUserId).withComments(comments);  if (parameters.get("actionName")[0].contains("approv")) {    if (topBudget.getState().getValue().equals("END"))     addActionMessage(getMessage("budgetdetail.approved.end")); else     addActionMessage(getMessage("budgetdetail.approved") + budgetService.getEmployeeNameAndDesignationForPosition(positionByUserId));  } else   addActionMessage(getMessage("budgetdetail.approved") + budgetService.getEmployeeNameAndDesignationForPosition(positionByUserId));  showButton=false;}  }
class C{  public BasicHttpResponse(final StatusLine statusline){  this(statusline,null,null);}  }
class C{  private void checkDestination(InetAddress destAddr,int dstPort){  if (dstPort < 0 || dstPort > 65535) {    throw new IllegalArgumentException("Port out of range: " + dstPort);  }}  }
class C{  public ShapeData(DrawContext dc,ExtrudedPolygon shape){  super(dc,shape.minExpiryTime,shape.maxExpiryTime);  if (shape.boundaries.size() < 1) {    this.boundaries.add(new ExtrudedBoundaryInfo(new ArrayList<LatLon>()));    return;  }  for (  List<? extends LatLon> boundary : shape.boundaries) {    this.boundaries.add(new ExtrudedBoundaryInfo(boundary));  }  this.copySideTextureReferences(shape);}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  public static int suggestShardSideQueueSize(int finalSize,int numberOfShards){  assert numberOfShards >= 1;  if (numberOfShards == 1) {    return finalSize;  }  final long shardSampleSize=(long)finalSize * Math.min(10,numberOfShards);  return (int)Math.min(Integer.MAX_VALUE,Math.max(10,shardSampleSize));}  }
class C{  public boolean isSetSender(){  return this.sender != null;}  }
class C{  public void addKeyBinding(String keyBinding,ActionListener action){  Hashtable current=bindings;  StringTokenizer st=new StringTokenizer(keyBinding);  while (st.hasMoreTokens()) {    KeyStroke keyStroke=parseKeyStroke(st.nextToken());    if (keyStroke == null)     return;    if (st.hasMoreTokens()) {      Object o=current.get(keyStroke);      if (o instanceof Hashtable)       current=(Hashtable)o; else {        o=new Hashtable();        current.put(keyStroke,o);        current=(Hashtable)o;      }    } else     current.put(keyStroke,action);  }}  }
class C{  public List<NamedBean> discoverPairDest(NamedBean source,LayoutEditor editor,Class<?> T,int pathMethod) throws JmriException {  if (log.isDebugEnabled()) {    log.debug("discover pairs from source " + source.getDisplayName());  }  LayoutBlockManager lbm=InstanceManager.getDefault(LayoutBlockManager.class);  LayoutBlock lFacing=lbm.getFacingBlockByNamedBean(source,editor);  List<LayoutBlock> lProtecting=lbm.getProtectingBlocksByNamedBean(source,editor);  ArrayList<NamedBean> ret=new ArrayList<NamedBean>();  ArrayList<FacingProtecting> beanList=generateBlocksWithBeans(editor,T);  try {    for (    LayoutBlock lb : lProtecting) {      ret.addAll(discoverPairDest(source,lb,lFacing,beanList,pathMethod));    }  } catch (  JmriException e) {    throw e;  }  return ret;}  }
class C{  private void addChild(int x,int childPageId,SearchRow row){  int rowLength=index.getRowSize(data,row,onlyPosition);  int pageSize=index.getPageStore().getPageSize();  int last=entryCount == 0 ? pageSize : offsets[entryCount - 1];  if (last - rowLength < start + CHILD_OFFSET_PAIR_LENGTH) {    readAllRows();    onlyPosition=true;    int o=pageSize;    for (int i=0; i < entryCount; i++) {      o-=index.getRowSize(data,getRow(i),true);      offsets[i]=o;    }    last=entryCount == 0 ? pageSize : offsets[entryCount - 1];    rowLength=index.getRowSize(data,row,true);    if (SysProperties.CHECK && last - rowLength < start + CHILD_OFFSET_PAIR_LENGTH) {      throw DbException.throwInternalError();    }  }  int offset=last - rowLength;  if (entryCount > 0) {    if (x < entryCount) {      offset=(x == 0 ? pageSize : offsets[x - 1]) - rowLength;    }  }  rows=insert(rows,entryCount,x,row);  offsets=insert(offsets,entryCount,x,offset);  add(offsets,x + 1,entryCount + 1,-rowLength);  childPageIds=insert(childPageIds,entryCount + 1,x + 1,childPageId);  start+=CHILD_OFFSET_PAIR_LENGTH;  if (pageStoreInternalCount) {    if (rowCount != UNKNOWN_ROWCOUNT) {      rowCount+=offset;    }  }  entryCount++;  written=false;  changeCount=index.getPageStore().getChangeCount();}  }
class C{  protected ServiceInvocationImpl(){  super();}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  viewHolder.image.setIcon(getModel().icon);  viewHolder.name.setText(getModel().icon.getName());}  }
class C{  private String checkColumnName(String columnName){  return M_Element.getColumnName(columnName);}  }
class C{  public static void dismissProgressDialog(ProgressDialog progressDialog){  try {    if (progressDialog != null && progressDialog.isShowing()) {      progressDialog.dismiss();    }  } catch (  Exception e) {    logThis(TAG,"dismissProgressDialog Exception",e);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"bt");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a bt instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree targetOperand=instruction.getOperands().get(0);  final IOperandTree sourceOperand=instruction.getOperands().get(1);  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final String negatedIndex=environment.getNextVariableString();  final String shiftedTarget=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,"0",sourceResult.getSize(),sourceResult.getRegister(),OperandSize.WORD,negatedIndex));  instructions.add(ReilHelpers.createBsh(offset++,targetResult.getSize(),targetResult.getRegister(),OperandSize.WORD,negatedIndex,targetResult.getSize(),shiftedTarget));  instructions.add(ReilHelpers.createAnd(offset++,targetResult.getSize(),shiftedTarget,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public TriggerAPPodAction(int entityId,int equipId){  super(entityId);  this.podId=equipId;}  }
class C{  public static int effectiveDistance(IGame game,Entity attacker,Targetable target){  return Compute.effectiveDistance(game,attacker,target,false);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (eventName.compareTo("trainingSet") == 0) {    if (m_trainingProvider == null) {      return false;    } else {      if (m_trainingProvider instanceof EventConstraints) {        if (!((EventConstraints)m_trainingProvider).eventGeneratable("trainingSet")) {          return false;        }      }    }  }  if (eventName.compareTo("dataSet") == 0) {    if (m_dataProvider == null) {      if (m_instanceProvider == null) {        m_connectedFormat=null;        notifyDataFormatListeners();      }      return false;    } else {      if (m_dataProvider instanceof EventConstraints) {        if (!((EventConstraints)m_dataProvider).eventGeneratable("dataSet")) {          m_connectedFormat=null;          notifyDataFormatListeners();          return false;        }      }    }  }  if (eventName.compareTo("instance") == 0) {    if (m_instanceProvider == null) {      if (m_dataProvider == null) {        m_connectedFormat=null;        notifyDataFormatListeners();      }      return false;    } else {      if (m_instanceProvider instanceof EventConstraints) {        if (!((EventConstraints)m_instanceProvider).eventGeneratable("instance")) {          m_connectedFormat=null;          notifyDataFormatListeners();          return false;        }      }    }  }  if (eventName.compareTo("testSet") == 0) {    if (m_testProvider == null) {      return false;    } else {      if (m_testProvider instanceof EventConstraints) {        if (!((EventConstraints)m_testProvider).eventGeneratable("testSet")) {          return false;        }      }    }  }  return true;}  }
class C{  public static String asString(InputStream pStream) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  copy(pStream,baos,true);  return baos.toString();}  }
class C{  public void addObject(Resource resource,Object entity) throws RepositoryException {  if (entity instanceof RDFObjectBehaviour) {    RDFObjectBehaviour support=(RDFObjectBehaviour)entity;    Object delegate=support.getBehaviourDelegate();    if (delegate != entity) {      addObject(resource,delegate);      return;    }  }synchronized (merged) {    merged.add(resource);  }  boolean autoCommit=isAutoCommit();  if (autoCommit) {    setAutoCommit(false);  }  try {    Class<?> proxy=entity.getClass();    Set<URI> list=getTypes(proxy,new HashSet<URI>(4));    for (    URI type : list) {      types.addTypeStatement(resource,type);    }    Object result=of.createObject(resource,list);    if (result instanceof Mergeable) {      ((Mergeable)result).merge(entity);    }    if (autoCommit) {      setAutoCommit(true);    }    cachedObjects.remove(resource);  }  finally {    if (autoCommit && !isAutoCommit()) {      rollback();      setAutoCommit(true);    }  }}  }
class C{  public static void generateComparisonReport(String resultsDir,String baseXMLFileName,String targetXMLFileName){  XMLHTMLReporter.resultsDir=resultsDir;  J2DAnalyzer.readResults(baseXMLFileName);  J2DAnalyzer.SingleResultSetHolder baseSRSH=(J2DAnalyzer.SingleResultSetHolder)J2DAnalyzer.results.elementAt(0);  Enumeration baseEnum_=baseSRSH.getKeyEnumeration();  Vector baseKeyvector=new Vector();  while (baseEnum_.hasMoreElements()) {    baseKeyvector.add(baseEnum_.nextElement());  }  String baseKeys[]=new String[baseKeyvector.size()];  baseKeyvector.copyInto(baseKeys);  J2DAnalyzer.sort(baseKeys);  J2DAnalyzer.readResults(targetXMLFileName);  J2DAnalyzer.SingleResultSetHolder targetSRSH=(J2DAnalyzer.SingleResultSetHolder)J2DAnalyzer.results.elementAt(1);  Enumeration targetEnum_=baseSRSH.getKeyEnumeration();  Vector targetKeyvector=new Vector();  while (targetEnum_.hasMoreElements()) {    targetKeyvector.add(targetEnum_.nextElement());  }  String targetKeys[]=new String[targetKeyvector.size()];  targetKeyvector.copyInto(targetKeys);  J2DAnalyzer.sort(targetKeys);  baseBuild=(String)baseSRSH.getProperties().get("java.vm.version");  targetBuild=(String)targetSRSH.getProperties().get("java.vm.version");  generateSysPropsReport(targetSRSH);  File reportFile=new File(resultsDir,"J2DBench_Complete_Report.html");  PrintWriter writer=openFile(reportFile.getAbsolutePath(),HTMLGEN_FILE_NEW);  String header=getHeader(baseSRSH,targetSRSH,"J2DBench - Complete Report","System_Properties.html");  writer.println(header);  writer.flush();  StringBuffer startTags=new StringBuffer();  startTags.append("<tr>");  startTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Num Reps</b></td>");  startTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Num Units</b></td>");  startTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Name</b></td>");  startTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Options</b></td>");  startTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>" + baseBuild + " Score</b></td>");  startTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\"><b>" + targetBuild + " Score</b></td>");  startTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>% Speedup</b></td>");  startTags.append("</tr>");  StringBuffer worseResultTags=new StringBuffer(startTags.toString());  StringBuffer sameResultTags=new StringBuffer(startTags.toString());  StringBuffer betterResultTags=new StringBuffer(startTags.toString());  Map consolBaseRes=new HashMap();  Map consolTargetResult=new HashMap();  Map testCaseBaseResult=new HashMap();  Map testCaseResultCount=new HashMap();  Map testCaseTargetResult=new HashMap();  for (int k=0; k < targetKeys.length; k++) {    J2DAnalyzer.ResultHolder baseTCR=baseSRSH.getResultByKey(targetKeys[k]);    J2DAnalyzer.ResultHolder targetTCR=targetSRSH.getResultByKey(targetKeys[k]);    Object curTestCountObj=testCaseResultCount.get(baseTCR.getName());    int curTestCount=0;    if (curTestCountObj != null) {      curTestCount=((Integer)curTestCountObj).intValue();    }    curTestCount++;    testCaseBaseResult.put(baseTCR.getName() + "_" + (curTestCount - 1),baseTCR);    testCaseTargetResult.put(targetTCR.getName() + "_" + (curTestCount - 1),targetTCR);    testCaseResultCount.put(baseTCR.getName(),new Integer(curTestCount));    addGroup(baseTCR.getName());    double baseScore=baseTCR.getScore();    double targetScore=targetTCR.getScore();    int selColorIndex=selectColor(baseScore,targetScore);    StringBuffer tagBuffer=new StringBuffer();    tagBuffer.append("<tr bgcolor=\"" + color[selColorIndex] + "\">");    tagBuffer.append("<td align=\"center\">" + baseTCR.getScore() + "</td>");    tagBuffer.append("<td align=\"center\">" + baseTCR.getUnits() + "</td>");    tagBuffer.append("<td align=\"center\">" + baseTCR.getName() + "</td>");    tagBuffer.append("<td valign=\"center\"><ul>");    Map map=baseTCR.getOptions();    Iterator iter=map.keySet().iterator();    while (iter.hasNext()) {      Object key=iter.next().toString();      Object value=map.get(key).toString();      tagBuffer.append("<li>" + key + " = "+ value+ "</li>");    }    tagBuffer.append("</ul></td>");    tagBuffer.append("<td valign=\"center\" align=\"center\">" + decimalFormat.format(baseTCR.getScore()) + "</td>");    tagBuffer.append("<td valign=\"center\" align=\"center\">" + decimalFormat.format(targetTCR.getScore()) + "</td>");    tagBuffer.append("<td valign=\"center\" align=\"center\">" + decimalFormat.format(calculateSpeedupPercentage(baseTCR.getScore(),targetTCR.getScore())) + "</td>");    tagBuffer.append("</tr>");switch (selColorIndex) {case 0:      betterResultTags.append(tagBuffer.toString());    break;case 1:  sameResultTags.append(tagBuffer.toString());break;case 2:worseResultTags.append(tagBuffer.toString());break;}Object curTotalScoreObj=consolBaseRes.get(baseTCR.getName());double curTotalScore=0;if (curTotalScoreObj != null) {curTotalScore=((Double)curTotalScoreObj).doubleValue();}curTotalScore=curTotalScore + baseTCR.getScore();consolBaseRes.put(baseTCR.getName(),new Double(curTotalScore));curTotalScoreObj=consolTargetResult.get(targetTCR.getName());curTotalScore=0;if (curTotalScoreObj != null) {curTotalScore=((Double)curTotalScoreObj).doubleValue();}curTotalScore=curTotalScore + targetTCR.getScore();consolTargetResult.put(targetTCR.getName(),new Double(curTotalScore));}writer.println("<br><hr WIDTH=\"100%\" size=\"1\">");writer.println("<A NAME=\"results\"></A><H3>Results:</H3>");writer.println("<table cellspacing=\"0\" " + "cellpadding=\"3\" border=\"1\" width=\"80%\">");writer.println("<tr><td colspan=\"7\" bgcolor=\"#f0f0f0\">" + "<font size=\"+1\">Tests which run BETTER on target" + "</font></td></tr>");writer.println(betterResultTags.toString());writer.flush();writer.println("<tr><td colspan=\"7\">&nbsp;<br>&nbsp;</td></tr>");writer.println("<tr><td colspan=\"7\" bgcolor=\"#f0f0f0\">" + "<font size=\"+1\">Tests which run " + "SAME on target</font></td></tr>");writer.println(sameResultTags.toString());writer.flush();writer.println("<tr><td colspan=\"7\">&nbsp;<br>&nbsp;</td></tr>");writer.println("<tr><td colspan=\"7\" bgcolor=\"#f0f0f0\">" + "<font size=\"+1\">Tests which run WORSE on target" + "</font></td></tr>");writer.println(worseResultTags.toString());writer.flush();writer.println("</table>");writer.println(getFooter());writer.flush();writer.close();generateTestCaseSummaryReport(baseSRSH,targetSRSH,consolBaseRes,consolTargetResult,testCaseBaseResult,testCaseResultCount,testCaseTargetResult);generateGroupSummaryReport(baseSRSH,targetSRSH,consolBaseRes,consolTargetResult,testCaseBaseResult,testCaseResultCount,testCaseTargetResult);}  }
class C{  private boolean isRemoveAllVolumes(ExportMask exportMask,List<URI> volumesToRemove){  List<URI> volumesInMask=ExportMaskUtils.getVolumeURIs(exportMask);  return volumesInMask.isEmpty() || (volumesInMask.containsAll(volumesToRemove) && (volumesInMask.size() == volumesToRemove.size()));}  }
class C{  public boolean isMultiPane(){  return hasHeaders() && mPrefsContainer.getVisibility() == View.VISIBLE;}  }
class C{  @Override public void transpile(N4JSResource resource,Writer outCode,Optional<SourceMapInfo> optSourceMapInfo){  if (noTranspile(resource)) {    doWrapAndWrite(resource,outCode);  } else {    super.transpile(resource,outCode,optSourceMapInfo);  }}  }
class C{  @Deprecated public static void updateEnvironmentVariable(String environmentVariable,String value){  Class<?>[] classes=Collections.class.getDeclaredClasses();  Map<String,String> env=System.getenv();  for (  Class<?> cl : classes) {    if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {      try {        Field field=cl.getDeclaredField("m");        field.setAccessible(true);        @SuppressWarnings("unchecked") Map<String,String> updatableEnv=(Map<String,String>)field.get(env);        updatableEnv.put(environmentVariable,value);      } catch (      IllegalArgumentException|IllegalAccessException|NoSuchFieldException e) {        throw new IllegalStateException("Unable to set " + environmentVariable + " environment variable",e);      }      break;    }  }}  }
class C{  public EnhancedServer remoteConnection(String name){  return remoteConnection(name,null);}  }
class C{  protected void processCloudlet(SimEvent ev,int type){  int cloudletId=0;  int userId=0;  int vmId=0;  int containerId=0;  try {    int data[]=(int[])ev.getData();    cloudletId=data[0];    userId=data[1];    vmId=data[2];    containerId=data[3];  } catch (  ClassCastException c) {    try {      ContainerCloudlet cl=(ContainerCloudlet)ev.getData();      cloudletId=cl.getCloudletId();      userId=cl.getUserId();      vmId=cl.getVmId();      containerId=cl.getContainerId();    } catch (    Exception e) {      Log.printConcatLine(super.getName(),": Error in processing Cloudlet");      Log.printLine(e.getMessage());      return;    }  }catch (  Exception e) {    Log.printConcatLine(super.getName(),": Error in processing a Cloudlet.");    Log.printLine(e.getMessage());    return;  }switch (type) {case CloudSimTags.CLOUDLET_CANCEL:    processCloudletCancel(cloudletId,userId,vmId,containerId);  break;case CloudSimTags.CLOUDLET_PAUSE:processCloudletPause(cloudletId,userId,vmId,containerId,false);break;case CloudSimTags.CLOUDLET_PAUSE_ACK:processCloudletPause(cloudletId,userId,vmId,containerId,true);break;case CloudSimTags.CLOUDLET_RESUME:processCloudletResume(cloudletId,userId,vmId,containerId,false);break;case CloudSimTags.CLOUDLET_RESUME_ACK:processCloudletResume(cloudletId,userId,vmId,containerId,true);break;default :break;}}  }
class C{  protected void portWarn(Exception e){}  }
class C{  public void listenerPaint(Object obj,java.awt.Graphics g){  if (theMap == null && obj instanceof MapBean) {    ((MapBean)obj).removePaintListener(this);    return;  }  Graphics2D graphics=(Graphics2D)g.create();  if (point1 != null && point2 != null) {    paintRectangle(graphics,point1,point2);  }  graphics.dispose();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AbstractDialLayer)) {    return false;  }  AbstractDialLayer that=(AbstractDialLayer)obj;  return this.visible == that.visible;}  }
class C{  public boolean isSignatureIntact(){  return signatureIntact;}  }
class C{  public final LC maxWidth(String width){  setWidth(LayoutUtil.derive(getWidth(),null,null,ConstraintParser.parseUnitValue(width,true)));  return this;}  }
class C{  private SerializerReadInteger(){}  }
class C{  TaxonomyIndexArrays add(int ordinal,int parentOrdinal){  if (ordinal >= parents.length) {    int[] newarray=ArrayUtil.grow(parents,ordinal + 1);    newarray[ordinal]=parentOrdinal;    return new TaxonomyIndexArrays(newarray);  }  parents[ordinal]=parentOrdinal;  return this;}  }
class C{  public static int decodeWeight(long encoded){  return (int)(Integer.MAX_VALUE - encoded);}  }
class C{  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader,int timeoutInMs){  return waitForAllActiveAndLiveReplicas(zkStateReader,null,timeoutInMs);}  }
class C{  @Override public void accept(IBinaryType binaryType,PackageBinding packageBinding,AccessRestriction accessRestriction){  this.lookupEnvironment.createBinaryTypeFrom(binaryType,packageBinding,accessRestriction);}  }
class C{  public Object read(InputNode node) throws Exception {  Class expect=type.getType();  String name=entry.getKey();  if (name == null) {    name=context.getName(expect);  }  if (!entry.isAttribute()) {    return readElement(node,name);  }  return readAttribute(node,name);}  }
class C{  public void close(){  if (mLeakedException != null) {    getConnectionManager().shutdown();    mLeakedException=null;  }}  }
class C{  public void edit(Cast c) throws CannotCompileException {}  }
class C{  public static boolean isDark(@NonNull Bitmap bitmap,int backupPixelX,int backupPixelY){  Palette palette=Palette.from(bitmap).maximumColorCount(3).generate();  if (palette != null && palette.getSwatches().size() > 0) {    return isDark(palette) == IS_DARK;  } else {    return isDark(bitmap.getPixel(backupPixelX,backupPixelY));  }}  }
class C{  private void addParentSources(Object[] sources){  if (!this.parentSources.contains(ParentConfiguration.class)) {    this.parentSources.add(ParentConfiguration.class);  }  this.parentSources.addAll(Arrays.asList(sources));}  }
class C{  public void handleFailLoop(){  if (isMasterHostFail()) {    if (!isExplicitClosed()) {      FailoverLoop.addListener(this);    }  } else {    FailoverLoop.removeListener(this);  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiDesktopIconUI();  return MultiLookAndFeel.createUIs(mui,((MultiDesktopIconUI)mui).uis,a);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("CTabbedPane [");  sb.append(super.toString());  CompiereColor bg=getBackgroundColor();  if (bg != null)   sb.append(bg.toString());  sb.append("]");  return sb.toString();}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public T caseN4ClassExpression(N4ClassExpression object){  return null;}  }
class C{  public void writePadding(int length,int padByte) throws IOException {  final byte[] padding;  if (padByte == SPACE_BYTE && length <= TEXT_PAD.length) {    padding=TEXT_PAD;  } else   if (padByte == NULL_BYTE && length <= ZERO_PADDING.length) {    padding=ZERO_PADDING;  } else {    padding=new byte[length];    if (padByte != NULL_BYTE) {      Arrays.fill(padding,(byte)padByte);    }  }  out.write(padding,0,length);}  }
class C{  byte[] convert(byte[] indefData) throws IOException {  data=indefData;  dataPos=0;  index=0;  dataSize=data.length;  int len=0;  int unused=0;  while (dataPos < dataSize) {    parseTag();    len=parseLength();    parseValue(len);    if (unresolved == 0) {      unused=dataSize - dataPos;      dataSize=dataPos;      break;    }  }  if (unresolved != 0) {    throw new IOException("not all indef len BER resolved");  }  newData=new byte[dataSize + numOfTotalLenBytes + unused];  dataPos=0;  newDataPos=0;  index=0;  while (dataPos < dataSize) {    writeTag();    writeLengthAndValue();  }  System.arraycopy(indefData,dataSize,newData,dataSize + numOfTotalLenBytes,unused);  return newData;}  }
class C{  private int popInt(){  return (int)pop();}  }
class C{  public boolean checkInstance(Instance instance){  if (instance.numAttributes() != numAttributes()) {    return false;  }  for (int i=0; i < numAttributes(); i++) {    if (instance.isMissing(i)) {      continue;    } else     if (attribute(i).isNominal() || attribute(i).isString()) {      if (!(Utils.eq(instance.value(i),(int)instance.value(i)))) {        return false;      } else       if (Utils.sm(instance.value(i),0) || Utils.gr(instance.value(i),attribute(i).numValues())) {        return false;      }    }  }  return true;}  }
class C{  public void addNode(BNode node){  if (nodes.containsKey(node.getId())) {    log.warning("network already contains a node with identifier " + node.getId());  }  nodes.put(node.getId(),node);  node.setNetwork(this);  if (node instanceof ChanceNode) {    chanceNodes.put(node.getId(),(ChanceNode)node);  } else   if (node instanceof UtilityNode) {    utilityNodes.put(node.getId(),(UtilityNode)node);  } else   if (node instanceof ActionNode) {    actionNodes.put(node.getId(),(ActionNode)node);  }}  }
class C{  public void testBuildTextFromElementWithChildren(){  LOGGER.debug("buildTextFromElementWithChildren");  Element element=new Element(Tag.valueOf("div"),"");  element.appendText("   text1   ");  Element childElement=new Element(Tag.valueOf("div"),"");  childElement.text("   child element text   ");  Element childElement2=new Element(Tag.valueOf("div"),"");  childElement2.text("   child element text second level  ");  childElement.appendChild(childElement2);  element.appendChild(childElement);  element.appendText("   text2   ");  SimpleTextElementBuilder instance=new SimpleTextElementBuilder();  String expResult="text1 child element text child element text second level text2";  String result=instance.buildTextFromElement(element);  assertEquals(expResult,result);}  }
class C{  public SystemPropertyCondition(String key,String value){  this.key=checkNotNull(key);  this.value=value;}  }
class C{  public static int[] insertAt(int[] dest,int[] src,int offset){  int[] temp=new int[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  public void addPrediction(NominalPrediction pred) throws Exception {  if (pred.predicted() == NominalPrediction.MISSING_VALUE) {    throw new Exception("No predicted value given.");  }  if (pred.actual() == NominalPrediction.MISSING_VALUE) {    throw new Exception("No actual value given.");  }  set((int)pred.actual(),(int)pred.predicted(),get((int)pred.actual(),(int)pred.predicted()) + pred.weight());}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean invalidateIt(){  log.info("invalidateIt - " + toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  protected static boolean checkDocumentSize(SolrDocument doc,long maxSize){  if (maxSize > 0) {    Object value=doc.getFieldValue(CollectionSchema.text_t.getSolrFieldName());    if (value instanceof String) {      if (((String)value).length() > (maxSize / 2)) {        return false;      }    }  }  return true;}  }
class C{  private boolean isKeywordsPageEmpty(Eml eml){  if (!eml.getKeywords().isEmpty()) {    KeywordSet set1=eml.getKeywords().get(0);    return Strings.isNullOrEmpty(set1.getKeywordsString()) && Strings.isNullOrEmpty(set1.getKeywordThesaurus());  }  return true;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  static IConstraint[] combineConstraints(final IConstraint[] constraints,final IHashJoinUtility[] all){  final List<IConstraint> list=new LinkedList<IConstraint>();  for (int i=0; i < all.length; i++) {    final IHashJoinUtility tmp=all[i];    if (tmp.getConstraints() != null) {      list.addAll(Arrays.asList(tmp.getConstraints()));    }  }  if (constraints != null) {    list.addAll(Arrays.asList(constraints));  }  return list.isEmpty() ? null : list.toArray(new IConstraint[list.size()]);}  }
class C{  public void swap(int positionOne,int positionTwo){synchronized (lock) {    if (items == null || positionOne == positionTwo || positionOne < 0 || positionOne >= getItemCount() || positionTwo < 0 || positionTwo >= getItemCount()) {      return;    }    T temp=items.get(positionOne);    items.set(positionOne,items.get(positionTwo));    items.set(positionTwo,temp);  }  if (notifyOnChange) {    notifyItemsSwapped(positionOne,positionTwo);  }}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:56.016 -0500",hash_original_method="EA6AC5CC522A2884BAFD1D1CC4525D81",hash_generated_method="AE1FD32E979E85F92B8FF10149DD076E") public CharSequence loadDescription(PackageManager pm){  if (nonLocalizedDescription != null) {    return nonLocalizedDescription;  }  if (descriptionRes != 0) {    CharSequence label=pm.getText(packageName,descriptionRes,null);    if (label != null) {      return label;    }  }  return null;}  }
class C{  public int findNearestDirectionBoundary(int offset,boolean lookForward){  assertIsDispatchThread();  int textLength=myDocument.getTextLength();  if (textLength == 0 || offset < 0 || offset > textLength)   return -1;  int line=myDocument.getLineNumber(offset);  LineLayout layout=getLineLayout(line);  int lineStartOffset=myDocument.getLineStartOffset(line);  int relativeOffset=layout.findNearestDirectionBoundary(offset - lineStartOffset,lookForward);  return relativeOffset < 0 ? -1 : lineStartOffset + relativeOffset;}  }
class C{  public void testProtected() throws Exception {  Reader reader=new StringReader("ridding of some stemming");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("SnowballPorter",Version.LATEST,new StringMockResourceLoader("ridding"),"protected","protwords.txt","language","English").create(stream);  assertTokenStreamContents(stream,new String[]{"ridding","of","some","stem"});}  }
class C{  public static Notification buildPendingCallNotification(Context context,String roomName,String roomId,String matrixId,String callId){  NotificationCompat.Builder builder=new NotificationCompat.Builder(context);  builder.setWhen(System.currentTimeMillis());  builder.setContentTitle(roomName);  builder.setContentText(context.getString(R.string.call_in_progress));  builder.setSmallIcon(R.drawable.incoming_call_notification_transparent);  Intent roomIntent=new Intent(context,VectorRoomActivity.class);  roomIntent.putExtra(VectorRoomActivity.EXTRA_ROOM_ID,roomId);  roomIntent.putExtra(VectorRoomActivity.EXTRA_MATRIX_ID,matrixId);  roomIntent.putExtra(VectorRoomActivity.EXTRA_START_CALL_ID,callId);  TaskStackBuilder stackBuilder=TaskStackBuilder.create(context).addParentStack(VectorRoomActivity.class).addNextIntent(roomIntent);  PendingIntent pendingIntent=stackBuilder.getPendingIntent((new Random()).nextInt(1000),PendingIntent.FLAG_UPDATE_CURRENT);  builder.setContentIntent(pendingIntent);  Notification n=builder.build();  n.flags|=Notification.FLAG_SHOW_LIGHTS;  n.defaults|=Notification.DEFAULT_LIGHTS;  return n;}  }
class C{  @Override public PreparedStatement prepareStatement(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static StructuredType checkIsStructuredType(Type type){  if (!isStructuredType(type)) {    throw new ODataSystemException("A structured type is required, but '" + type.getFullyQualifiedName() + "' is not a structured type: "+ type.getMetaType());  }  return (StructuredType)type;}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public Document modify(String url) throws DocumentException, IOException {  try {    return installModifier().modify(url);  } catch (  JAXBRuntimeException ex) {    Throwable cause=ex.getCause();    throw new DocumentException(cause.getMessage(),cause);  }}  }
class C{  static boolean isPackageAccess(final int modifiers){  return (modifiers & ACCESS_TEST) == 0;}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="/{query}",produces={MediaType.APPLICATION_JSON_VALUE}) @ApiOperation(value="run parametrized query",notes="run the specified named query passing in scalar values for query parameters in the GemFire cluster",response=void.class) @ApiResponses({@ApiResponse(code=200,message="Query successfully executed."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=400,message="Query bind params specified as JSON document in the request body is invalid"),@ApiResponse(code=500,message="GemFire throws an error or exception")}) @ResponseBody @ResponseStatus(HttpStatus.OK) @PreAuthorize("@securityService.authorize('DATA', 'READ')") public ResponseEntity<String> runNamedQuery(@PathVariable("query") String queryId,@RequestBody String arguments){  logger.debug("Running named Query with ID ({})...",queryId);  queryId=decode(queryId);  if (arguments != null) {    Object args[]=jsonToObjectArray(arguments);    Query compiledQuery=compiledQueries.get(queryId);    if (compiledQuery == null) {      final String oql=getValue(PARAMETERIZED_QUERIES_REGION,queryId);      ValidationUtils.returnValueThrowOnNull(oql,new ResourceNotFoundException(String.format("No Query with ID (%1$s) was found!",queryId)));      try {        compiledQuery=getQueryService().newQuery(oql);      } catch (      QueryInvalidException qie) {        throw new GemfireRestException("Syntax of the OQL queryString is invalid!",qie);      }      compiledQueries.putIfAbsent(queryId,(DefaultQuery)compiledQuery);    }    try {      Object queryResult=compiledQuery.execute(args);      return processQueryResponse(queryResult,queryId);    } catch (    FunctionDomainException fde) {      throw new GemfireRestException("A function was applied to a parameter that is improper for that function!",fde);    }catch (    TypeMismatchException tme) {      throw new GemfireRestException("Bind parameter is not of the expected type!",tme);    }catch (    NameResolutionException nre) {      throw new GemfireRestException("Name in the query cannot be resolved!",nre);    }catch (    IllegalArgumentException iae) {      throw new GemfireRestException(" The number of bound parameters does not match the number of placeholders!",iae);    }catch (    IllegalStateException ise) {      throw new GemfireRestException("Query is not permitted on this type of region!",ise);    }catch (    QueryExecutionTimeoutException qete) {      throw new GemfireRestException("Query execution time is exceeded  max query execution time (gemfire.Cache.MAX_QUERY_EXECUTION_TIME) configured!",qete);    }catch (    QueryInvocationTargetException qite) {      throw new GemfireRestException("Data referenced in from clause is not available for querying!",qite);    }catch (    QueryExecutionLowMemoryException qelme) {      throw new GemfireRestException("Query gets canceled due to low memory conditions and the resource manager critical heap percentage has been set!",qelme);    }catch (    Exception e) {      throw new GemfireRestException("Error encountered while executing named query!",e);    }  } else {    throw new GemfireRestException(" Bind params either not specified or not processed properly by the server!");  }}  }
class C{  protected void processForeignKeyRelationship(ForeignReferenceMapping mapping,List<JoinColumnMetadata> joinColumns,ForeignKeyMetadata foreignKey,MetadataDescriptor referenceDescriptor,String defaultFKFieldName,DatabaseTable defaultFKTable){  boolean allReadOnly=true;  Map<DatabaseField,DatabaseField> fields=new HashMap<DatabaseField,DatabaseField>();  for (  JoinColumnMetadata joinColumn : joinColumns) {    DatabaseField pkField=getReferencedField(joinColumn.getReferencedColumnName(),referenceDescriptor,MetadataLogger.PK_COLUMN);    DatabaseField fkField=joinColumn.getForeignKeyField(pkField);    setFieldName(fkField,defaultFKFieldName,MetadataLogger.FK_COLUMN);    if (!fkField.hasTableName()) {      fkField.setTable(defaultFKTable);    }    fields.put(fkField,pkField);    allReadOnly=allReadOnly && fkField.isReadOnly();  }  DatabaseTable foreignKeyTable=null;  for (  DatabaseField fkField : fields.keySet()) {    DatabaseField pkField=fields.get(fkField);    if (allReadOnly || !fkField.isReadOnly()) {      mapping.addForeignKeyField(fkField,pkField);    } else {      mapping.addTargetForeignKeyField(pkField,fkField);    }    if (foreignKeyTable == null) {      foreignKeyTable=fkField.getTable();    }  }  mapping.setIsReadOnly(allReadOnly);  if (foreignKey != null) {    foreignKey.process(foreignKeyTable);  }}  }
class C{  public final long skip(long n) throws IOException {  long skipped=src.skip(n);  pointer+=skipped;  return skipped;}  }
class C{  public Jerry before(String html){  final Document doc=builder.parse(html);  for (  Node node : nodes) {    Document workingDoc=doc.clone();    node.insertBefore(workingDoc.getChildNodes(),node);  }  return this;}  }
class C{  private void checkDefaultDestination(){  if (defaultDestination == null) {    throw new UnsupportedOperationException("Cannot specify destination if producer has a default destination");  }}  }
class C{  public CallItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void safeDamageRange(int a0,int a1) throws BadLocationException {  Document doc=component.getDocument();  safeDamageRange(doc.createPosition(a0),doc.createPosition(a1));}  }
class C{  public StreetLayer scenarioCopy(TransportNetwork newScenarioNetwork){  StreetLayer copy=this.clone();  copy.baseStreetLayer=this;  copy.parentNetwork=newScenarioNetwork;  copy.edgeStore=edgeStore.extendOnlyCopy();  copy.vertexStore=copy.edgeStore.vertexStore;  return copy;}  }
class C{  protected final void writeXmlHead() throws UncheckedIOException {  try {    this.writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");    if (doPrettyPrint) {      this.writer.write(NL);    }  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  protected int newPage(boolean force,boolean preserveXPos){  if (!force && m_position[AREA_CONTENT].getX() == m_content.x && m_position[AREA_CONTENT].getY() == m_content.y) {    log.fine("skipped");    return m_pageNo;  }  m_pageNo++;  m_currPage=new Page(m_printCtx,m_pageNo);  m_pages.add(m_currPage);  m_position[AREA_HEADER].setLocation(m_header.x,m_header.y);  if (preserveXPos)   m_position[AREA_CONTENT].setLocation(m_position[AREA_CONTENT].x,m_content.y); else   m_position[AREA_CONTENT].setLocation(m_content.x,m_content.y);  m_position[AREA_FOOTER].setLocation(m_footer.x,m_footer.y);  m_maxHeightSinceNewLine=new float[]{0f,0f,0f};  log.finer("Page=" + m_pageNo);  return m_pageNo;}  }
class C{  public void testDynStringSortMissingLast() throws Exception {  checkSortMissingLast("dyn_stringdv_missinglast","a","z");}  }
class C{  public static Integer maxIfTooBig(Integer originalInt,Integer maxInt){  if (originalInt >= maxInt) {    originalInt=maxInt;  }  return originalInt;}  }
class C{  public static String dumpWithStop(Object... x){  debug(x);  return dumpWithReset(null,null);}  }
class C{  public IgniteCheckedException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  protected boolean isImageWrapCropBounds(float[] imageCorners){  mTempMatrix.reset();  mTempMatrix.setRotate(-getCurrentAngle());  float[] unrotatedImageCorners=Arrays.copyOf(imageCorners,imageCorners.length);  mTempMatrix.mapPoints(unrotatedImageCorners);  float[] unrotatedCropBoundsCorners=RectUtils.getCornersFromRect(mCropRect);  mTempMatrix.mapPoints(unrotatedCropBoundsCorners);  return RectUtils.trapToRect(unrotatedImageCorners).contains(RectUtils.trapToRect(unrotatedCropBoundsCorners));}  }
class C{  private static void comment(SourceCode cfml,boolean removeSpace) throws TemplateException {  if (!removeSpace) {    comment(cfml);  } else {    cfml.removeSpace();    if (comment(cfml))     cfml.removeSpace();  }}  }
class C{  protected final void TRAP_IF_IMM(Instruction s,boolean longConstant){  RegisterOperand gRes=TrapIf.getClearGuardResult(s);  RegisterOperand v1=(RegisterOperand)TrapIf.getClearVal1(s);  ConditionOperand cond=TrapIf.getClearCond(s);  TrapCodeOperand tc=TrapIf.getClearTCode(s);switch (tc.getTrapCode()) {case RuntimeEntrypoints.TRAP_ARRAY_BOUNDS:{      IntConstantOperand v2=(IntConstantOperand)TrapIf.getClearVal2(s);      if (cond.isLOWER_EQUAL()) {        EMIT(MIR_Trap.mutate(s,PPC_TWI,gRes,new PowerPCTrapOperand(cond),v1,v2,tc));      } else       if (cond.isHIGHER_EQUAL()) {        RegisterOperand tmp=regpool.makeTempInt();        IntConstant(tmp.getRegister(),v2.value);        EMIT(MIR_Trap.mutate(s,PPC_TW,gRes,new PowerPCTrapOperand(cond.flipOperands()),tmp,v1,tc));      } else {        throw new OptimizingCompilerException("Unexpected case of trap_if" + s);      }    }  break;case RuntimeEntrypoints.TRAP_DIVIDE_BY_ZERO:{  ConstantOperand v2=(ConstantOperand)TrapIf.getClearVal2(s);  if (VM.VerifyAssertions) {    if (longConstant) {      long val=((LongConstantOperand)v2).value;      boolean caseMatchesExpected=val == 0L && cond.isEQUAL();      if (!caseMatchesExpected) {        String msg="Unexpected case of trap_if" + s;        VM._assert(VM.NOT_REACHED,msg);      }    } else {      int val=((IntConstantOperand)v2).value;      boolean caseMatchesExpected=val == 0L && cond.isEQUAL();      if (!caseMatchesExpected) {        String msg="Unexpected case of trap_if" + s;        VM._assert(VM.NOT_REACHED,msg);      }    }  }  if (longConstant) {    if (VM.BuildFor32Addr) {      RegisterOperand rr=regpool.makeTempInt();      EMIT(MIR_Binary.create(PPC_OR,rr,v1,I(regpool.getSecondReg(v1.getRegister()))));      v1=rr.copyD2U();      v2=IC(0);      EMIT(MIR_Trap.mutate(s,PPC_TWI,gRes,new PowerPCTrapOperand(cond),v1,v2,tc));    } else {      EMIT(MIR_Trap.mutate(s,PPC64_TDI,gRes,new PowerPCTrapOperand(cond),v1,v2,tc));    }  } else {    EMIT(MIR_Trap.mutate(s,PPC_TWI,gRes,new PowerPCTrapOperand(cond),v1,v2,tc));  }}break;default :throw new OptimizingCompilerException("Unexpected case of trap_if" + s);}}  }
class C{  RDateIteratorImpl(DateValue[] datesUtc){  datesUtc=datesUtc.clone();  Arrays.sort(datesUtc);  this.datesUtc=removeDuplicates(datesUtc);}  }
class C{  public void showAlleleCountHistograms(boolean show){  mShowAlleleCountHistograms=show;}  }
class C{  public final void removeElementAt(int i){  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree); else   m_map[i]=null;  m_firstFree--;}  }
class C{  public synchronized OMGraphicList prepare(){  Debug.message("plugin",getName() + "|PlugInLayer.prepare()");  if (isCancelled()) {    Debug.message("plugin",getName() + "|PlugInLayer.prepare(): aborted.");    return null;  }  if (plugin == null) {    System.out.println(getName() + "|PlugInLayer.prepare(): No plugin in layer.");    return null;  }  Debug.message("basic",getName() + "|PlugInLayer.prepare(): doing it");  Projection proj=getProjection();  if (Debug.debugging("plugin") && proj != null) {    System.out.println(getName() + "|PlugInLayer.prepare(): " + "calling getRectangle "+ " with projection: "+ proj+ " ul = "+ proj.getUpperLeft()+ " lr = "+ proj.getLowerRight());  }  OMGraphicList omGraphicList=null;  if (plugin != null && proj != null) {    omGraphicList=plugin.getRectangle(proj);  }  int size=0;  if (omGraphicList != null) {    size=omGraphicList.size();    if (Debug.debugging("basic")) {      Debug.output(getName() + "|PlugInLayer.prepare(): finished with " + size+ " graphics");    }  } else {    if (Debug.debugging("basic")) {      Debug.output(getName() + "|PlugInLayer.prepare(): finished with null graphics list");    }    omGraphicList=new OMGraphicList();  }  return omGraphicList;}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  @Override protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos,String lookupPath,ServerWebExchange exchange) throws Exception {  PartialMatchHelper helper=new PartialMatchHelper(infos,exchange);  if (helper.isEmpty()) {    return null;  }  ServerHttpRequest request=exchange.getRequest();  if (helper.hasMethodsMismatch()) {    HttpMethod httpMethod=request.getMethod();    Set<String> methods=helper.getAllowedMethods();    if (HttpMethod.OPTIONS.matches(httpMethod.name())) {      HttpOptionsHandler handler=new HttpOptionsHandler(methods);      return new HandlerMethod(handler,HTTP_OPTIONS_HANDLE_METHOD);    }    throw new MethodNotAllowedException(httpMethod.name(),methods);  }  if (helper.hasConsumesMismatch()) {    Set<MediaType> mediaTypes=helper.getConsumableMediaTypes();    MediaType contentType;    try {      contentType=request.getHeaders().getContentType();    } catch (    InvalidMediaTypeException ex) {      throw new UnsupportedMediaTypeStatusException(ex.getMessage());    }    throw new UnsupportedMediaTypeStatusException(contentType,new ArrayList<>(mediaTypes));  }  if (helper.hasProducesMismatch()) {    Set<MediaType> mediaTypes=helper.getProducibleMediaTypes();    throw new NotAcceptableStatusException(new ArrayList<>(mediaTypes));  }  if (helper.hasParamsMismatch()) {    throw new ServerWebInputException("Unsatisfied query parameter conditions: " + helper.getParamConditions() + ", actual parameters: "+ request.getQueryParams());  }  return null;}  }
class C{  private void onOrderClicked(){  String coffee;  String message;  String number=etNumber.getText().toString();  boolean cream=chkCream.isChecked();  boolean sugar=chkSugar.isChecked();  if (optExpresso.isChecked()) {    coffee="Expresso";  } else   if (optColombian.isChecked()) {    coffee="Colombian";  } else {    coffee="Decaf";  }  if (cream && sugar) {    message=coffee + " with cream and sugar.";  } else   if (cream) {    message=coffee + " with cream.";  } else   if (sugar) {    message=coffee + " with sugar.";  } else {    message=coffee + ".";  }  showMessage(number,message);}  }
class C{  public void unbindAndStop(){  unbind();  context.stopService(new Intent(context,TrackRecordingService.class));}  }
class C{  public CollapseData collapse(GraphNode master,Collection<GraphNode> picked,boolean erase){  List<CollapseData> childrenCollapse=Lists.newArrayList();  for (  GraphNode child : picked) {    CollapseData collapseInfo=getCollapseData(child);    if (null != collapseInfo) {      collapsedData.remove(child);      childrenCollapse.add(collapseInfo);    }  }  CollapseData data=new CollapseData(master,picked,childrenCollapse);  collapsedData.put(master,data);  return data;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.409 -0400",hash_original_method="D5771A4493620FED5A8C5A9531CB0933",hash_generated_method="3D45C8864AD6079E5AF3C14F66077866") public static int readSwappedInteger(byte[] data,int offset){  return (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16)+ ((data[offset + 3] & 0xff) << 24));}  }
class C{  public WebAddress(String address) throws ParseException {  if (address == null) {    throw new NullPointerException();  }  mScheme="";  mHost="";  mPort=-1;  mPath="/";  mAuthInfo="";  Matcher m=sAddressPattern.matcher(address);  String t;  if (m.matches()) {    t=m.group(MATCH_GROUP_SCHEME);    if (t != null)     mScheme=t.toLowerCase(Locale.ROOT);    t=m.group(MATCH_GROUP_AUTHORITY);    if (t != null)     mAuthInfo=t;    t=m.group(MATCH_GROUP_HOST);    if (t != null)     mHost=t;    t=m.group(MATCH_GROUP_PORT);    if (t != null && t.length() > 0) {      try {        mPort=Integer.parseInt(t);      } catch (      NumberFormatException ex) {        throw new ParseException("Bad port");      }    }    t=m.group(MATCH_GROUP_PATH);    if (t != null && t.length() > 0) {      if (t.charAt(0) == '/') {        mPath=t;      } else {        mPath="/" + t;      }    }  } else {    throw new ParseException("Bad address");  }  if (mPort == 443 && mScheme.equals("")) {    mScheme="https";  } else   if (mPort == -1) {    if (mScheme.equals("https"))     mPort=443; else     mPort=80;  }  if (mScheme.equals(""))   mScheme="http";}  }
class C{  private void animShow(){  if (listener != null) {    listener.cancel();  }  listener=new SkyAnimListener(SkyAnimListener.TYPE_END);  animShow.setDuration(ANIM_LENGTH);  animShow.setAnimationListener(listener);  calcMixRatio();  clearAnimation();  startAnimation(animShow);}  }
class C{  public void reset() throws IOException, InterruptedException {  bfdi.reset();}  }
class C{  protected void tearDown() throws Exception {  super.tearDown();  if (oos != null) {    try {      oos.close();    } catch (    Exception e) {    }  }  if (oos_ioe != null) {    try {      oos_ioe.close();    } catch (    Exception e) {    }  }  if (f != null && f.exists()) {    if (!f.delete()) {      fail("Error cleaning up files during teardown");    }  }}  }
class C{  public FilteringBatchAcknowledgingMessageListenerAdapter(BatchAcknowledgingMessageListener<K,V> delegate,RecordFilterStrategy<K,V> recordFilterStrategy){  this(delegate,recordFilterStrategy,false);}  }
class C{  @Deprecated public static void debug(IgniteLogger log,String msg){  log.info(msg);}  }
class C{  public static float[] subarray(final float[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return ArrayUtils.EMPTY_FLOAT_ARRAY;  }  float[] subarray=new float[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public boolean isCallingEdge(){  return isCallingEdge;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.EXIT_STATE__STATE:    if (resolve)     return getState();  return basicGetState();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void init(OutputStream out,String encoding) throws UnsupportedEncodingException, IOException {  internalOut=new OutputStreamWriter(out,encoding);  if ("UTF-8".equals(encoding)) {    if (getWriteUtf8BOM()) {      out.write(UTF8_BOM,0,UTF8_BOM.length);    }  } else   if ("UTF-16LE".equals(encoding)) {    out.write(UTF16LE_BOM,0,UTF16LE_BOM.length);  } else   if ("UTF-16BE".equals(encoding)) {    out.write(UTF16BE_BOM,0,UTF16BE_BOM.length);  } else   if ("UTF-32LE".equals(encoding)) {    out.write(UTF32LE_BOM,0,UTF32LE_BOM.length);  } else   if ("UTF-32".equals(encoding) || "UTF-32BE".equals(encoding)) {    out.write(UTF32BE_BOM,0,UTF32BE_BOM.length);  }}  }
class C{  public T caseFeatureParameter(FeatureParameter object){  return null;}  }
class C{  void notNested(){synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }}  }
class C{  private void unselectButton(){  m_button.setSelected(false);  putValue(Action.NAME,"Magnifying Glass");  putValue(Action.SHORT_DESCRIPTION,"Enables Magnifying Glass.");  m_button.setIcon(new ImageIcon(CMain.class.getResource("data/nomagnifieingglass_up.jpg")));  m_button.setRolloverIcon(new ImageIcon(CMain.class.getResource("data/nomagnifieingglass_hover.jpg")));  m_button.setPressedIcon(new ImageIcon(CMain.class.getResource("data/nomagnifieingglass_down.jpg")));}  }
class C{  private SceKernelThreadInfo nextThread(){  SceKernelThreadInfo found=null;synchronized (readyThreads) {    for (    SceKernelThreadInfo thread : readyThreads) {      if (found == null || thread.currentPriority < found.currentPriority) {        found=thread;      }    }  }  return found;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Size fromPixels(int widthInPixels,int heightInPixels){  return new Size(EXPLICIT_DIMENSION,widthInPixels,AVKey.PIXELS,EXPLICIT_DIMENSION,heightInPixels,AVKey.PIXELS);}  }
class C{  public MetricId tagged(Map<String,String> add){  final TreeMap<String,String> tags=new TreeMap<>(this.tags);  tags.putAll(add);  return new MetricId(key,tags);}  }
class C{  public static void parseMarkedUpFile(final File file) throws IOException {  final Iterator<String> lines=Util.readFileLineByLine(file);  while (lines.hasNext()) {    String line=lines.next();    if (line.isEmpty() || line.startsWith("#")) {      continue;    }    line=line.replaceAll(":B","");    categoryToMarkedUpCategory.put(Category.valueOf(line),line);  }}  }
class C{  public static Result restSearchOptions(){  JsonObject searchOptions=new JsonObject();  JsonArray jobCategory=new JsonArray();  JsonArray severities=new JsonArray();  Map<ApplicationType,List<JobType>> applicationTypeListMap=ElephantContext.instance().getAppTypeToJobTypes();  for (  ApplicationType key : applicationTypeListMap.keySet()) {    JsonObject applicationType=new JsonObject();    JsonArray jobTypes=new JsonArray();    JsonArray heuristics=new JsonArray();    for (    JobType jobtype : applicationTypeListMap.get(key)) {      JsonObject jobTypeNode=new JsonObject();      jobTypeNode.addProperty(JsonKeys.NAME,jobtype.getName());      jobTypes.add(jobTypeNode);    }    for (    Heuristic heuristic : ElephantContext.instance().getHeuristicsForApplicationType(key)) {      JsonObject heuristicNode=new JsonObject();      heuristicNode.addProperty(JsonKeys.NAME,heuristic.getHeuristicConfData().getHeuristicName());      heuristics.add(heuristicNode);    }    applicationType.addProperty(JsonKeys.NAME,key.getName());    applicationType.add(JsonKeys.JOB_TYPES,jobTypes);    applicationType.add(JsonKeys.HEURISTICS,heuristics);    jobCategory.add(applicationType);  }  for (  Severity severity : Severity.values()) {    JsonObject severityObject=new JsonObject();    severityObject.addProperty(JsonKeys.NAME,severity.getText());    severityObject.addProperty(JsonKeys.VALUE,severity.getValue());    severities.add(severityObject);  }  searchOptions.add(JsonKeys.JOB_CATEGORY,jobCategory);  searchOptions.add(JsonKeys.SEVERITIES,severities);  searchOptions.addProperty(JsonKeys.ID,"search");  JsonObject parent=new JsonObject();  parent.add(JsonKeys.SEARCH_OPTS,searchOptions);  return ok(new Gson().toJson(parent));}  }
class C{  Node(Connection connection,String nodeName){  con=connection;  id=nodeName;}  }
class C{  private int readData(InputStream is,int length){  int read=0;  int count;  byte[] buf=new byte[length];  try {    while (is.available() > 0) {      count=is.read(buf,read,length - read);      read+=count;    }  } catch (  IOException e) {    log("IOException from readData");  }  return read;}  }
class C{  public void writeln(char[] cbuf,int off,int len) throws IOException {  super.write(cbuf,off,len);  newLine();}  }
class C{  DelegationHandler(int initialDelegationCount,PrincipalAttributesExtractor principalAttributesExtractor){  assert initialDelegationCount >= 0;  assert principalAttributesExtractor != null;  this.initialDelegationCount=initialDelegationCount;  this.principalAttributesExtractor=principalAttributesExtractor;}  }
class C{  @GET("notPaginated") public void notPaginated(HttpServerResponse response){  response.end();}  }
class C{  @Override public String findToken(){  IRequestInfo iri=super.getCallbacks().getHelpers().analyzeRequest(getMessage());  List<IParameter> list=iri.getParameters();  for (  IParameter p : list) {    if (p.getName().equals(ID)) {      return decode(p.getValue());    }  }  String response=super.getCallbacks().getHelpers().bytesToString(getMessage().getResponse());  Pattern p=Pattern.compile("client_id=(.*?)\\\\u0026");  Matcher m=p.matcher(response);  if (m.find()) {    return m.group(1);  }  return "Not Found!";}  }
class C{  public static void previous(final Context context){  final Intent previous=new Intent(context,MusicPlaybackService.class);  previous.setAction(MusicPlaybackService.PREVIOUS_ACTION);  context.startService(previous);}  }
class C{  final Entry<K,V> removeEntryForKey(Object key){  int hash=(key == null) ? 0 : hash(keyEquality.hashCode(key));  int i=indexFor(hash,table.length);  Entry<K,V> prev=table[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    Object k;    if (e.hash == hash && ((k=e.key) == key || (key != null && keyEquality.equals(key,k)))) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  private String addStepsForAddInitiators(Workflow workflow,StorageSystem vplex,ExportGroup exportGroup,URI varrayURI,List<URI> hostInitiatorURIs,List<Initiator> initiators,URI hostURI,String previousStepId,String opId) throws Exception {  String lastStepId=null;  URI vplexURI=vplex.getId();  URI exportURI=exportGroup.getId();  String initListStr=Joiner.on(',').join(hostInitiatorURIs);  ExportMask exportMask=VPlexUtil.getExportMaskForHostInVarray(_dbClient,exportGroup,hostURI,vplexURI,varrayURI);  if (exportMask == null) {    _log.info("No export mask found for hostURI: " + hostURI + " varrayURI: "+ varrayURI);    Map<URI,Integer> volumeMap=ExportUtils.getExportGroupVolumeMap(_dbClient,vplex,exportGroup);    Map<URI,Set<URI>> varrayToVolumes=VPlexUtil.mapBlockObjectsToVarrays(_dbClient,volumeMap.keySet(),vplexURI,exportGroup);    Map<URI,Integer> varrayVolumeMap=ExportMaskUtils.filterVolumeMap(volumeMap,varrayToVolumes.get(varrayURI));    if (!varrayVolumeMap.isEmpty()) {      lastStepId=assembleExportMasksWorkflow(vplexURI,exportURI,varrayURI,hostInitiatorURIs,varrayVolumeMap,workflow,previousStepId,opId);    }  } else {    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    String vplexClusterName=VPlexUtil.getVplexClusterName(exportMask,vplexURI,client,_dbClient);    VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,exportMask.getMaskName());    _log.info("Refreshing ExportMask {}",exportMask.getMaskName());    VPlexControllerUtils.refreshExportMask(_dbClient,storageView,exportMask,VPlexControllerUtils.getTargetPortToPwwnMap(client,vplexClusterName),_networkDeviceController);    if (exportMask.getVolumes() == null) {      _log.info(String.format("No volumes in ExportMask %s (%s), so not adding initiators",exportMask.getMaskName(),exportMask.getId()));      return lastStepId;    }    _log.info(String.format("Adding initiators %s for host %s mask %s (%s)",getInitiatorsWwnsString(initiators),hostURI.toString(),exportMask.getMaskName(),exportMask.getId()));    Collection<URI> volumeURIs=new HashSet<URI>();    if (exportMask.getVolumes() != null && !exportMask.getVolumes().isEmpty()) {      volumeURIs=(Collections2.transform(exportMask.getVolumes().keySet(),CommonTransformerFunctions.FCTN_STRING_TO_URI));    } else     if (exportGroup.getVolumes() != null && !exportGroup.getVolumes().isEmpty()) {      _log.info(String.format("No volumes in ExportMask %s, using ExportGroup %s for ExportPathParam",exportMask.getId(),exportGroup.getId()));      Map<URI,Integer> volumeMap=ExportUtils.getExportGroupVolumeMap(_dbClient,vplex,exportGroup);      Map<URI,Set<URI>> varrayToVolumes=VPlexUtil.mapBlockObjectsToVarrays(_dbClient,volumeMap.keySet(),vplexURI,exportGroup);      volumeURIs=varrayToVolumes.get(varrayURI);    } else {      _log.info(String.format("No volumes at all- using default path parameters: %s",exportMask.getId()));    }    ExportPathParams pathParams=_blockScheduler.calculateExportPathParamForVolumes(volumeURIs,exportGroup.getNumPaths(),exportMask.getStorageDevice(),exportGroup.getId());    if (exportGroup.getType() != null) {      pathParams.setExportGroupType(exportGroup.getType());    }    Map<URI,List<URI>> assignments=_blockScheduler.assignStoragePorts(vplex,exportGroup,initiators,exportMask.getZoningMap(),pathParams,volumeURIs,_networkDeviceController,varrayURI,opId);    List<URI> newTargetURIs=BlockStorageScheduler.getTargetURIsFromAssignments(assignments);    exportMask.addZoningMap(BlockStorageScheduler.getZoneMapFromAssignments(assignments));    _dbClient.updateObject(exportMask);    _log.info(String.format("Adding targets %s for host %s",newTargetURIs.toString(),hostURI.toString()));    String zoningStepId=workflow.createStepId();    Workflow.Method zoningMethod=zoneAddInitiatorStepMethod(vplexURI,exportURI,hostInitiatorURIs,varrayURI);    Workflow.Method zoningRollbackMethod=zoneRollbackMethod(exportURI,zoningStepId);    zoningStepId=workflow.createStep(ZONING_STEP,String.format("Zone initiator %s to ExportGroup %s(%s)",initListStr,exportGroup.getLabel(),exportURI),previousStepId,vplexURI,vplex.getSystemType(),this.getClass(),zoningMethod,zoningRollbackMethod,zoningStepId);    String message=String.format("initiators %s to StorageView %s",initListStr,exportGroup.getGeneratedName());    ExportMask sharedExportMask=VPlexUtil.getSharedExportMaskInDb(exportGroup,vplexURI,_dbClient,varrayURI,null,null);    boolean shared=false;    if (null != sharedExportMask && sharedExportMask.getId().equals(exportMask.getId())) {      shared=true;    }    Workflow.Method addToViewMethod=storageViewAddInitiatorsMethod(vplexURI,exportURI,exportMask.getId(),hostInitiatorURIs,newTargetURIs,shared);    Workflow.Method addToViewRollbackMethod=storageViewRemoveInitiatorsMethod(vplexURI,exportURI,exportMask.getId(),hostInitiatorURIs,null);    lastStepId=workflow.createStep("storageView","Add " + message,zoningStepId,vplexURI,vplex.getSystemType(),this.getClass(),addToViewMethod,addToViewRollbackMethod,null);  }  return lastStepId;}  }
class C{  TaskAssignmentResult tryRequest(TaskRequest request,VMTaskFitnessCalculator fitnessCalculator){  if (logger.isDebugEnabled())   logger.debug("Host " + getHostname() + " task "+ request.getId()+ ": #leases="+ leasesMap.size());  if (leasesMap.isEmpty())   return null;  if (exclusiveTaskId != null) {    if (logger.isDebugEnabled())     logger.debug("Host " + getHostname() + ": can't assign task "+ request.getId()+ ", already have task "+ exclusiveTaskId+ " assigned with exclusive host constraint");    ConstraintFailure failure=new ConstraintFailure(ExclusiveHostConstraint.class.getName(),"Already has task " + exclusiveTaskId + " with exclusive host constraint");    return new TaskAssignmentResult(this,request,false,null,failure,0.0);  }  VirtualMachineCurrentState vmCurrentState=vmCurrentState();  TaskTrackerState taskTrackerState=taskTrackerState();  ConstraintFailure failedHardConstraint=findFailedHardConstraints(request,vmCurrentState,taskTrackerState);  if (failedHardConstraint != null) {    if (logger.isDebugEnabled())     logger.debug("Host " + getHostname() + ": task "+ request.getId()+ " failed hard constraint: "+ failedHardConstraint);    return new TaskAssignmentResult(this,request,false,null,failedHardConstraint,0.0);  }  final ResAsgmntResult resAsgmntResult=evalAndGetResourceAssignmentFailures(request);  if (!resAsgmntResult.failures.isEmpty()) {    if (logger.isDebugEnabled()) {      StringBuilder b=new StringBuilder();      for (      AssignmentFailure f : resAsgmntResult.failures)       b.append(f.toString()).append(" ; ");      logger.debug(getHostname() + ": task " + request.getId()+ " failed assignment: "+ b.toString());    }    return new TaskAssignmentResult(this,request,false,resAsgmntResult.failures,null,0.0);  }  final double resAsgmntFitness=resAsgmntResult.fitness;  double fitness=fitnessCalculator.calculateFitness(request,vmCurrentState,taskTrackerState);  if (fitness == 0.0) {    if (logger.isDebugEnabled())     logger.debug(getHostname() + ": task " + request.getId()+ " fitness calculator returned 0.0");    List<AssignmentFailure> failures=Collections.singletonList(new AssignmentFailure(VMResource.Fitness,0.0,0.0,0.0,"fitnessCalculator: 0.0"));    return new TaskAssignmentResult(this,request,false,failures,null,fitness);  }  List<? extends VMTaskFitnessCalculator> softConstraints=request.getSoftConstraints();  double softConstraintFitness=1.0;  if (softConstraints != null && !softConstraints.isEmpty()) {    softConstraintFitness=getSoftConstraintsFitness(request,vmCurrentState,taskTrackerState);  }  fitness=combineFitnessValues(resAsgmntFitness,fitness,softConstraintFitness);  return new TaskAssignmentResult(this,request,true,null,null,fitness);}  }
class C{  private void disburseLoan(){  if (this.loanId != null) {    this.loanTransactionHelper.disburseLoan(this.dateString,this.loanId);    System.out.println("Successfully disbursed loan (ID: " + this.loanId + ")");  }}  }
class C{  protected LinkedBindingBuilder<Command> command(final CommandName name){  return bind(Commands.key(name));}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  @Override public synchronized void addTrainingSetListener(TrainingSetListener tsl){  m_trainingListeners.addElement(tsl);}  }
class C{  public void reset(Capabilities capabilities){  Settings settings=Settings.builder().build(capabilities);  try {synchronized (lock.validated()) {      remote.reset(settings);    }  } catch (  Throwable t) {    Util.handleException(t);  }  if (!(capabilities instanceof Serializable)) {    capabilities=new DesiredCapabilities(capabilities);  }  try {synchronized (lock.validated()) {      remote.storeCapabilities(capabilities);    }  } catch (  Throwable t) {    Util.handleException(t);  }}  }
class C{  public static boolean isModified(ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof DynamicClassLoader) {      return ((DynamicClassLoader)loader).isModified();    }  }  return false;}  }
class C{  private boolean isConditional(){  while (true) {    nextToken();switch (fToken) {case Symbols.TokenIDENT:case Symbols.TokenOTHER:      continue;case Symbols.TokenCASE:    return false;default :  return true;}}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.384 -0400",hash_original_method="BD0421AF6C1AA9CFCF6C9B3AE10A8647",hash_generated_method="5C3178ECC6D08BE1B7069E4CE30C9620") @Override public synchronized void reset() throws IOException {  in.reset();  pos=mark;}  }
class C{  public GCTraceSetListenerSet(){}  }
class C{  public final void sortStructureElements(){  processOperation(new SortChildrenOperation());}  }
class C{  static <T>void linearTimeIncrementHistogramCounters(final T[] samples,final int offset,final int numSamples,final long weight,final T[] splitPoints,final long[] counters,final Comparator<? super T> comparator){  int i=0;  int j=0;  while (i < numSamples && j < splitPoints.length) {    if (comparator.compare(samples[i + offset],splitPoints[j]) < 0) {      counters[j]+=weight;      i++;    } else {      j++;    }  }  if (j == splitPoints.length) {    counters[j]+=(weight * (numSamples - i));  }}  }
class C{  public static boolean equals(BigInteger[] a,BigInteger[] b){  int flag=0;  if (a.length != b.length) {    return false;  }  for (int i=0; i < a.length; i++) {    flag|=a[i].compareTo(b[i]);  }  return flag == 0;}  }
class C{  private MemberVisibility isVisible(EObject context,TypeRef receiverType,TMember member,boolean supercall){  if (receiverType instanceof UnionTypeExpression) {    for (    TypeRef currUnitedTypeRef : ((UnionTypeExpression)receiverType).getTypeRefs())     if (!isVisible(context,currUnitedTypeRef,member,supercall).visibility)     return new MemberVisibility(false);    return new MemberVisibility(true);  }  Resource contextResource=context.eResource();  N4TypeDefinition typeDefiningContainer=EcoreUtil2.getContainerOfType(context,N4TypeDefinition.class);  Script script=EcoreUtil2.getContainerOfType(typeDefiningContainer != null ? typeDefiningContainer : context,Script.class);  Type contextType=null;  TModule contextModule=script.getModule();  if (typeDefiningContainer != null) {    contextType=typeDefiningContainer.getDefinedType();  }  Type declaredReceiverType=getActualDeclaredReceiverType(context,receiverType,contextResource.getResourceSet());  if (declaredReceiverType != null && typeVisibilityChecker.isVisible(contextResource,declaredReceiverType).visibility) {    if (shortcutIsVisible(member,contextType,contextModule,declaredReceiverType)) {      return new MemberVisibility(true);    }    return isVisible(contextModule,contextType,declaredReceiverType,member,supercall);  }  return new MemberVisibility(false);}  }
class C{  private static byte[] convertAudioEndianness(byte[] audioData,boolean twoByteSamples){  ByteBuffer out=ByteBuffer.allocate(audioData.length);  out.order(ByteOrder.nativeOrder());  ByteBuffer in=ByteBuffer.wrap(audioData);  in.order(ByteOrder.LITTLE_ENDIAN);  if (twoByteSamples) {    ShortBuffer outShort=out.asShortBuffer();    ShortBuffer inShort=in.asShortBuffer();    while (inShort.hasRemaining()) {      outShort.put(inShort.get());    }  } else {    while (in.hasRemaining()) {      out.put(in.get());    }  }  out.rewind();  if (!out.hasArray()) {    byte[] array=new byte[out.capacity()];    out.get(array);    out.clear();    return array;  }  return out.array();}  }
class C{  public static DateTimeFormatter dateHourMinute(){  return Constants.dhm;}  }
class C{  public final static boolean isXWindowSystem(){  return isXWindows;}  }
class C{  private void dumpRows(GridH2TreeIndex idx){  Iterator<GridH2Row> iter=idx.rows();  while (iter.hasNext())   System.out.println(iter.next().toString());}  }
class C{  public void add(int posn,RefAddr addr){  addrs.insertElementAt(addr,posn);}  }
class C{  public static int randomInt(int lowerThan){  return RANDOM.nextInt(lowerThan);}  }
class C{  public static boolean isMandatory(FDPropertyDecl decl){  for (  FDPropertyFlag flag : decl.getFlags()) {    if (flag.getOptional() != null || flag.getDefault() != null) {      return false;    }  }  return true;}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public static int pow(int x,int n){  if (n == 0)   return 1;  int t=pow(x,n / 2);  if (n % 2 == 0) {    return t * t;  } else {    return t * t * x;  }}  }
class C{  public static void mergeSort(char[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  char aux[]=(char[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex);}  }
class C{  private static <T extends GlowStructure>T createStructure(GlowWorld world,int chunkX,int chunkZ,StructureStore<T> store,CompoundTag compound){  T structure=store.createStructure(world,chunkX,chunkZ);  store.load(structure,compound);  return structure;}  }
class C{  protected boolean isIncludeQueryString(){  return this.includeQueryString;}  }
class C{  public static String resetmode(final int mode){  return ESC + "[=" + mode+ "l";}  }
class C{  public UserInputInlineMenuButtonBuilder<T> inputButton(){  return new UserInputInlineMenuButtonBuilder<>(this,buttons().size());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_1__CONSTRAINT_EXPR_1:    return getConstraintExpr_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void deleteJournalFromCopy(RecoverPointVolumeProtectionInfo copyToModify,String journalWWNToDelete) throws RecoverPointException {  ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(copyToModify);  String copyName=null;  String cgName=null;  try {    copyName=functionalAPI.getGroupCopyName(cgCopyUID);    cgName=functionalAPI.getGroupName(cgCopyUID.getGroupUID());    logger.info("Request to delete journal " + journalWWNToDelete + " from copy "+ copyName+ " for consistency group "+ cgName);    Set<RPSite> allSites=getAssociatedRPSites();    DeviceUID journalDeviceUIDToDelete=RecoverPointUtils.getDeviceID(allSites,journalWWNToDelete);    if (journalDeviceUIDToDelete == null) {      throw RecoverPointException.exceptions.cannotFindJournal(journalWWNToDelete);    }    functionalAPI.removeJournalVolume(cgCopyUID,journalDeviceUIDToDelete);  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToDeleteJournal(journalWWNToDelete,copyName,cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToDeleteJournal(journalWWNToDelete,copyName,cgName,e);  }}  }
class C{  public static CategoryFragment newInstance(String searchQuery){  Bundle args=new Bundle();  args.putString(SEARCH_QUERY,searchQuery);  CategoryFragment fragment=new CategoryFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public Builder withMembers(Collection<Member> members){  request.members=Assert.notNull(members,"members");  return this;}  }
class C{  public UiBuilder<T> disabled(){  this.control.setEnabled(false);  return this;}  }
class C{  public boolean hasNext(){  return index < size;}  }
class C{  private void deleteTargetDevices(final StorageSystem storageSystem,final String[] deviceIds,final TaskCompleter taskCompleter){  _log.info(format("Removing target devices {0} from storage system {1}",Joiner.on("\t").join(deviceIds),storageSystem.getId()));  try {    if (storageSystem.checkIfVmax3()) {      for (      String deviceId : deviceIds) {        try {          _helper.removeVolumeFromParkingSLOStorageGroup(storageSystem,deviceId,false);        } catch (        Exception e) {          _log.info("Failed to remove device {} from SLO SG.  It may have already been removed",deviceId);        }        _log.info("Done invoking remove volume {} from parking SLO storage group",deviceId);      }    }    final CIMObjectPath configSvcPath=_cimPath.getConfigSvcPath(storageSystem);    final CIMObjectPath[] theElements=_cimPath.getVolumePaths(storageSystem,deviceIds);    final CIMArgument[] inArgs=_helper.getReturnElementsToStoragePoolArguments(theElements,SmisConstants.CONTINUE_ON_NONEXISTENT_ELEMENT);    final CIMArgument[] outArgs=new CIMArgument[5];    final SmisDeleteVmaxCGTargetVolumesJob job=new SmisDeleteVmaxCGTargetVolumesJob(null,storageSystem.getId(),deviceIds,taskCompleter);    _helper.invokeMethodSynchronously(storageSystem,configSvcPath,RETURN_ELEMENTS_TO_STORAGE_POOL,inArgs,outArgs,job);  } catch (  Exception e) {    _log.error(format("An error occurred when removing target devices {0} from storage system {1}",Joiner.on("\t").join(deviceIds),storageSystem.getId()),e);  }}  }
class C{  public final void push(final int value){  checkSize(current_item);  items[current_item]=value;  current_item++;  checkSize(current_item);}  }
class C{  public static void main(String[] ops){  double[] first={2.3,1.2,5};  double[] second={5.2,1.4,9};  double[] response={4,7,8};  double[] weights={1,2,3};  try {    double[][] m={{1,2,3},{2,5,6},{3,6,9}};    Matrix M=new Matrix(m);    int n=M.numRows();    double[][] V=new double[n][n];    double[] d=new double[n];    M.eigenvalueDecomposition(V,d);    Matrix a=new Matrix(2,3);    Matrix b=new Matrix(3,2);    System.out.println("Number of columns for a: " + a.numColumns());    System.out.println("Number of rows for a: " + a.numRows());    a.setRow(0,first);    a.setRow(1,second);    b.setColumn(0,first);    b.setColumn(1,second);    System.out.println("a:\n " + a);    System.out.println("b:\n " + b);    System.out.println("a (0, 0): " + a.getElement(0,0));    System.out.println("a transposed:\n " + a.transpose());    System.out.println("a * b:\n " + a.multiply(b));    Matrix r=new Matrix(3,1);    r.setColumn(0,response);    System.out.println("r:\n " + r);    System.out.println("Coefficients of regression of b on r: ");    double[] coefficients=b.regression(r,1.0e-8);    for (    double coefficient : coefficients) {      System.out.print(coefficient + " ");    }    System.out.println();    System.out.println("Weights: ");    for (    double weight : weights) {      System.out.print(weight + " ");    }    System.out.println();    System.out.println("Coefficients of weighted regression of b on r: ");    coefficients=b.regression(r,weights,1.0e-8);    for (    double coefficient : coefficients) {      System.out.print(coefficient + " ");    }    System.out.println();    a.setElement(0,0,6);    System.out.println("a with (0, 0) set to 6:\n " + a);    a.write(new java.io.FileWriter("main.matrix"));    System.out.println("wrote matrix to \"main.matrix\"\n" + a);    a=new Matrix(new java.io.FileReader("main.matrix"));    System.out.println("read matrix from \"main.matrix\"\n" + a);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void testEngineGenerateCertPathLjava_io_InputStream_Ljava_lang_String01(){  CertificateFactorySpi certFactorySpi=new MyCertificateFactorySpi();  MyCertificateFactorySpi.putMode(true);  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);  DataInputStream dis=new DataInputStream(bais);  try {    certFactorySpi.engineGenerateCertPath(dis,"");    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }  try {    assertNull(certFactorySpi.engineGenerateCertPath(dis,"encoding"));  } catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  public boolean isChanged(){  return m_changed;}  }
class C{  public void add(DoubleVector v){  x+=v.x;  y+=v.y;  z+=v.z;}  }
class C{  public List<String> parseTextBlocks(String text){  List<String> blocks=new ArrayList<String>();  String limitedText=limitText(text);  if (limitedText != null) {    int lastBlockIndex=-1;    Matcher matcher=repeatPattern.matcher(limitedText);    while (matcher.find()) {      int currentBlockIndex=matcher.start();      if (lastBlockIndex > -1) {        String block=limitedText.substring(lastBlockIndex,currentBlockIndex);        blocks.add(block);      }      lastBlockIndex=currentBlockIndex;    }    if (lastBlockIndex > -1) {      String block=limitedText.substring(lastBlockIndex);      blocks.add(block);    }  }  return blocks;}  }
class C{  public void deleteAllClasses(Session hibSession){  Set sIoc=this.getInstrOfferingConfigs();  for (Iterator iterIoc=sIoc.iterator(); iterIoc.hasNext(); ) {    InstrOfferingConfig tIoc=(InstrOfferingConfig)iterIoc.next();    Set sSp=tIoc.getSchedulingSubparts();    for (Iterator iterSp=sSp.iterator(); iterSp.hasNext(); ) {      SchedulingSubpart tSp=(SchedulingSubpart)iterSp.next();      Set sCl=tSp.getClasses();      for (Iterator iterCl=sCl.iterator(); iterCl.hasNext(); ) {        Class_ c=(Class_)iterCl.next();        Set classInstrs=c.getClassInstructors();        for (Iterator iterCi=classInstrs.iterator(); iterCi.hasNext(); ) {          ClassInstructor ci=(ClassInstructor)iterCi.next();          DepartmentalInstructor instr=ci.getInstructor();          instr.removeClassInstructor(ci);          hibSession.delete(ci);        }        Event.deleteFromEvents(hibSession,c);        Exam.deleteFromExams(hibSession,c);        hibSession.delete(c);      }      tSp.getClasses().clear();    }    Event.deleteFromEvents(hibSession,tIoc);    Exam.deleteFromExams(hibSession,tIoc);  }}  }
class C{  private void executeCommand(long index,long sequence,long timestamp,ServerCommit commit,ServerSessionContext session,CompletableFuture<Result> future,ThreadContext context){  if (!log.isOpen()) {    context.executor().execute(null);    return;  }  if (!session.state().active()) {    context.executor().execute(null);    return;  }  executor.tick(index,timestamp);  executor.init(commit.index(),commit.time(),ServerStateMachineContext.Type.COMMAND);  long eventIndex=session.getEventIndex();  try {    Object output=executor.executeOperation(commit);    executor.commit();    Result result=new Result(index,eventIndex,output);    session.registerResult(sequence,result);    context.executor().execute(null);  } catch (  Exception e) {    Result result=new Result(index,eventIndex,e);    session.registerResult(sequence,result);    context.executor().execute(null);  }}  }
class C{  public EsriGraphicFactory(int lineType,GeoCoordTransformation dataTransformation){  this.lineType=lineType;  this.dataTransformation=dataTransformation;}  }
class C{  public void send() throws IOException, KrbException {  String realmStr=null;  if (servName != null)   realmStr=servName.getRealmString();  KdcComm comm=new KdcComm(realmStr);  ibuf=comm.send(obuf);}  }
class C{  public int whichPort(){  return (servport);}  }
class C{  private void drawBar(final PaintEvent e){  final GC gc=e.gc;  final Rectangle clientArea=this.bar.getClientArea();  gc.setForeground(this.barBorderColor);  gc.setBackground(this.barInnerColor);  gc.fillRectangle(clientArea);  gc.drawRectangle(clientArea.x,clientArea.y,clientArea.width - 1,clientArea.height - 1);  final float width=(clientArea.width - 2f) * this.heapSize / this.heapMaxSize;  gc.setForeground(this.barGradientColorTopStart);  gc.setBackground(this.barGradientColorTopEnd);  gc.fillGradientRectangle(clientArea.x + 1,clientArea.y + 1,(int)width,clientArea.height / 2,true);  gc.setForeground(this.barGradientColorMiddleStart);  gc.setBackground(this.barBorderColor);  gc.fillGradientRectangle(clientArea.x + 1,clientArea.height / 2,(int)width,clientArea.height / 2,true);  final String message=this.heapSize + " " + ResourceManager.getLabel(ResourceManager.MEGABYTES)+ "/"+ this.heapMaxSize+ " "+ ResourceManager.getLabel(ResourceManager.MEGABYTES);  final Point size=gc.stringExtent(message);  gc.setForeground(this.barTextColor);  gc.setFont(getFont());  gc.drawText(message,(clientArea.width - size.x) / 2,(clientArea.height - size.y) / 2,true);  gc.dispose();}  }
class C{  public void testExtendedToken() throws Exception {  ByteTranslationStateMachine bsm=new ByteTranslationStateMachine();  bsm.init();  byte[] s1="va1".getBytes();  byte[] s2="va2".getBytes();  byte[] s3="\\\\".getBytes();  bsm.load(s1,99,null,false);  bsm.load(s2,100,null,false);  bsm.load(s3,-1,"\\".getBytes(),false);  checkForValue(bsm,s1,99,null);  checkForValue(bsm,s2,100,null);  checkForValue(bsm,s3,-1,"\\".getBytes());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!Sage.EMBEDDED && stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).cacheAuthenticationNow();  }  return null;}  }
class C{  public boolean isRadiusMinorGridlinesVisible(){  return this.radiusMinorGridlinesVisible;}  }
class C{  public Rational multiply(Rational secondRational){  BigInteger n=r[0].multiply(secondRational.getNumerator());  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  public static void add(List<String> options,String option,int value){  options.add("-" + option);  options.add("" + value);}  }
class C{  public void installUI(JComponent c){  MouseListener[] ml=c.getMouseListeners();  super.installUI(c);  c.setOpaque(false);  for (int i=0; i < ml.length; i++) {    arrowButton.addMouseListener(ml[i]);  }}  }
class C{  public void testGetFilterElementWithOneFilter() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>".trim() + "    <filter-name>f1</filter-name>".trim()+ "    <filter-class>fclass1</filter-class>".trim()+ "  </filter>".trim()+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  Element servletElement=webXml.getTagByIdentifier(WebXmlType.FILTER,"f1");  assertNotNull(servletElement);  assertEquals("filter",servletElement.getName());  assertEquals("filter-name",getFirstChild(servletElement).getName());  assertEquals("f1",getFirstChild(servletElement).getValue());  assertEquals("filter-class",getLastChild(servletElement).getName());  assertEquals("fclass1",getLastChild(servletElement).getValue());}  }
class C{  @Transactional public void cancelChallanReceipt(final ReceiptHeader receiptHeader,final boolean cancelInstrument){  String instrumentType="";  receiptHeader.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_RECEIPTHEADER,CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED));  receiptHeader.setIsReconciled(true);  if (cancelInstrument)   for (  final InstrumentHeader instrumentHeader : receiptHeader.getReceiptInstrument()) {    instrumentHeader.setStatusId(statusDAO.getStatusByModuleAndCode(CollectionConstants.MODULE_NAME_INSTRUMENTHEADER,CollectionConstants.INSTRUMENTHEADER_STATUS_CANCELLED));    instrumentType=instrumentHeader.getInstrumentType().getType();  }  for (  final ReceiptVoucher receiptVoucher : receiptHeader.getReceiptVoucher())   receiptHeaderService.createReversalVoucher(receiptVoucher,instrumentType);  receiptHeaderService.persist(receiptHeader);  LOGGER.info("Receipt " + receiptHeader.getReceiptnumber() + " has been cancelled");}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension cpd;  Dimension mbd;  Dimension tpd;  int cpWidth=Integer.MAX_VALUE;  int cpHeight=Integer.MAX_VALUE;  int mbWidth=Integer.MAX_VALUE;  int mbHeight=Integer.MAX_VALUE;  int tpWidth=Integer.MAX_VALUE;  int tpHeight=Integer.MAX_VALUE;  Insets i=target.getInsets();  JRootPane root=(JRootPane)target;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getMaximumSize();    if (cpd != null) {      cpWidth=cpd.width;      cpHeight=cpd.height;    }  }  if (root.getJMenuBar() != null) {    mbd=root.getJMenuBar().getMaximumSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof SeaGlassRootPaneUI)) {    JComponent titlePane=((SeaGlassRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getMaximumSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  int maxHeight=Math.max(Math.max(cpHeight,mbHeight),tpHeight);  if (maxHeight != Integer.MAX_VALUE) {    maxHeight=cpHeight + mbHeight + tpHeight+ i.top+ i.bottom;  }  int maxWidth=Math.max(Math.max(cpWidth,mbWidth),tpWidth);  if (maxWidth != Integer.MAX_VALUE) {    maxWidth+=i.left + i.right;  }  return new Dimension(maxWidth,maxHeight);}  }
class C{  public ViewPropertyAnimator xBy(float value){  animatePropertyBy(X,value);  return this;}  }
class C{  protected void filtre(){  System.out.print("E00: filter type=" + filtreType + "  value="+ filtreValeur);  OMGraphic og;  Object O;  int count=0;  OMGraphicList g=arcs;  int n=arcs.size();  if ((filtreType == Integer.MIN_VALUE) && (filtreValeur == Integer.MIN_VALUE)) {    for (int i=0; i < n; i++)     g.getOMGraphicAt(i).setVisible(true);    count=n;  } else   for (int i=0; i < n; i++) {    og=g.getOMGraphicAt(i);    O=og.getAttribute(OMGraphic.APP_OBJECT);    if (O == null)     setVisible(false); else {      E00Data d=(E00Data)O;      boolean r=true;      if (filtreType != Integer.MIN_VALUE)       r&=(filtreType == d.type);      if (filtreValeur != Integer.MIN_VALUE)       r&=(filtreValeur == d.valeur);      og.setVisible(r);      if (r)       count++;    }  }  Debug.output(" count:" + count);  repaint();}  }
class C{  public IndexRecord(Object index,int offset,int numvals){  this.index=index;  this.offset=offset;  this.numvals=numvals;}  }
class C{  @SuppressWarnings("unused") @Test public void testStateCycle_LocalReactionWithMixedRegularAndEntryTrigger(){  MinimalTSC tsc=new MinimalTSC();  VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,tsc.s_scope);  LocalReaction lr=_createEntryAction(tsc.s1);  _createRegularEventSpec(tsc.e1,(ReactionTrigger)lr.getTrigger());  ReactionEffect lr_eff=_createReactionEffect(lr);  AssignmentExpression assign1=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(42),lr_eff);  ExecutionFlow flow=sequencer.transform(tsc.sc);  ExecutionState s1=flow.getStates().get(0);  assertEquals(1,s1.getReactions().size());  assertNotNull(s1.getReactSequence());  assertEquals(1,s1.getReactSequence().getSteps().size());  Sequence _seq=(Sequence)s1.getReactSequence().getSteps().get(0);  If _lr1=(If)assertedSequence(assertedSequence(_seq.getSteps().get(0)).getSteps().get(0)).getSteps().get(0);  assertClass(ElementReferenceExpression.class,_lr1.getCheck().getCondition());  assertSame(s1.getReactions().get(0).getCheck().getCondition(),_lr1.getCheck().getCondition());  Call _lr1_eff_call=(Call)_lr1.getThenStep();  assertSame(s1.getReactions().get(0).getEffect(),_lr1_eff_call.getStep());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean containsKey(Object key){  return get(key) != null;}  }
class C{  public static void wakeLockWithScreenUnLock(Context context){  partialWakeUpLock(context);  releaseScreenLock(context);}  }
class C{  public ImageSource region(Rect sRegion){  this.sRegion=sRegion;  setInvariants();  return this;}  }
class C{  public XSLTExFuncTest(String name){  super(name);}  }
class C{  private static ApiUsage of(List<IN4JSProject> projects,Map<IN4JSProject,IN4JSProject> concreteApiImplProjectMapping,ApiImplMapping apiImplMapping){  return new ApiUsage(null,projects,concreteApiImplProjectMapping,apiImplMapping,Collections.emptyList(),false);}  }
class C{  private void removeRec(O obj){  graph.remove(obj);  for (int i=0; i < numelems; ++i) {    if (obj == elems[i]) {      System.arraycopy(elems,i + 1,elems,i,--numelems - i);      elems[numelems]=null;      return;    }  }}  }
class C{  public void close(){  if (isFloating()) {    setFloating(false);  } else   if (isDocked()) {    undock();  }}  }
class C{  private void redrawComposite(){  final Display display=this.getDisplay();  final Rectangle rect=this.getClientArea();  final Image newImage=new Image(display,Math.max(1,rect.width),Math.max(1,rect.height));  final GC gc=new GC(newImage);  gc.setForeground(this.gradientStart);  gc.setBackground(this.gradientEnd);  gc.fillGradientRectangle(rect.x,rect.y,rect.width,rect.height / 2,true);  gc.setForeground(this.gradientEnd);  gc.setBackground(this.gradientStart);  gc.fillGradientRectangle(rect.x,rect.height / 2,rect.width,rect.height / 2,true);  gc.dispose();  this.setBackgroundImage(newImage);  if (this.previousGeneratedImage != null) {    this.previousGeneratedImage.dispose();  }  this.previousGeneratedImage=newImage;}  }
class C{  protected void writeHeader(OutputStream os,MimeHeader header) throws IOException {  StringBuilder strBuff=new StringBuilder();  String name=header.getName();  String value=header.getValue();  strBuff.append(name).append(": ").append(value);  for (  MimeHeaderParameter headerParam : header.getParameters()) {    strBuff.append("; ").append(headerParam.getName()).append("=").append(headerParam.getValue());  }  strBuff.append("\r\n");  os.write(strBuff.toString().getBytes());}  }
class C{  public String strRepWithPrestige(){  return "#" + rankTeamPollScore + " "+ abbr+ " (Pres: "+ teamPrestige+ ")";}  }
class C{  @Override public int read(final byte[] buffer,final int bufPos,final int length) throws IOException {  int i=super.read(buffer,bufPos,length);  if ((i == length) || (i == -1))   return i;  int j=super.read(buffer,bufPos + i,length - i);  if (j == -1)   return i;  return j + i;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public TaskList createVolume(VolumeCreate param) throws InternalException {  ArgValidator.checkFieldNotNull(param,"volume_create");  ArgValidator.checkFieldUriType(param.getProject(),Project.class,"project");  Project project=_permissionsHelper.getObjectById(param.getProject(),Project.class);  ArgValidator.checkEntity(project,param.getProject(),isIdEmbeddedInURL(param.getProject()));  BlockServiceUtils.verifyUserIsAuthorizedForRequest(project,getUserFromContext(),_permissionsHelper);  ArgValidator.checkFieldUriType(param.getVarray(),VirtualArray.class,"varray");  VirtualArray varray=BlockServiceUtils.verifyVirtualArrayForRequest(project,param.getVarray(),uriInfo,_permissionsHelper,_dbClient);  ArgValidator.checkEntity(varray,param.getVarray(),isIdEmbeddedInURL(param.getVarray()));  VirtualPool vpool=getVirtualPoolForVolumeCreateRequest(project,param);  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  Integer volumeCount=1;  Long volumeSize=0L;  if (param.getCount() != null) {    if (param.getCount() <= 0) {      throw APIException.badRequests.parameterMustBeGreaterThan("count",0);    }    if (param.getCount() > MAX_VOLUME_COUNT) {      throw APIException.badRequests.exceedingLimit("count",MAX_VOLUME_COUNT);    }    volumeCount=param.getCount();    capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,volumeCount);  }  if (param.getSize() != null) {    volumeSize=SizeUtil.translateSize(param.getSize());    if (volumeSize <= 0) {      throw APIException.badRequests.parameterMustBeGreaterThan(SIZE,0);    }    capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,volumeSize);  }  if (null != vpool.getThinVolumePreAllocationPercentage() && 0 < vpool.getThinVolumePreAllocationPercentage()) {    capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_VOLUME_PRE_ALLOCATE_SIZE,VirtualPoolUtil.getThinVolumePreAllocationSize(vpool.getThinVolumePreAllocationPercentage(),volumeSize));  }  if (VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType())) {    capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_PROVISIONING,Boolean.TRUE);  }  if (null != vpool.getDedupCapable() && vpool.getDedupCapable()) {    capabilities.put(VirtualPoolCapabilityValuesWrapper.DEDUP,Boolean.TRUE);  }  BlockServiceApi blockServiceImpl=getBlockServiceImpl(vpool,_dbClient);  BlockConsistencyGroup consistencyGroup=null;  final Boolean isMultiVolumeConsistencyOn=vpool.getMultivolumeConsistency() == null ? FALSE : vpool.getMultivolumeConsistency();  ArrayList<String> requestedTypes=new ArrayList<String>();  final URI actualId=project.getId();  if (param.getConsistencyGroup() != null) {    consistencyGroup=queryConsistencyGroup(param.getConsistencyGroup());    final URI expectedId=consistencyGroup.getProject().getURI();    checkProjectsMatch(expectedId,actualId);    if (!isMultiVolumeConsistencyOn) {      throw APIException.badRequests.invalidParameterConsistencyGroupProvidedButVirtualPoolHasNoMultiVolumeConsistency(param.getConsistencyGroup(),param.getVpool());    }    final List<Volume> activeCGVolumes=blockServiceImpl.getActiveCGVolumes(consistencyGroup);    int cgMaxVolCount=blockServiceImpl.getMaxVolumesForConsistencyGroup(consistencyGroup);    if ((activeCGVolumes.size() + volumeCount.intValue()) > cgMaxVolCount) {      throw APIException.badRequests.requestedVolumeCountExceedsLimitsForCG(volumeCount.intValue(),cgMaxVolCount,consistencyGroup.getLabel());    }    if (!consistencyGroup.created()) {      blockServiceImpl.validateConsistencyGroupName(consistencyGroup);    }    if (consistencyGroup.srdfTarget()) {      throw APIException.badRequests.consistencyGroupBelongsToTarget(consistencyGroup.getId());    }    if (VirtualPool.vPoolSpecifiesSRDF(vpool) && (consistencyGroup.getLabel().length() > 8 || !isAlphaNumeric(consistencyGroup.getLabel()))) {      throw APIException.badRequests.groupNameCannotExceedEightCharactersoronlyAlphaNumericAllowed();    }    if (!VirtualPool.vPoolSpecifiesSRDF(vpool) && consistencyGroup.checkForType(Types.SRDF)) {      throw APIException.badRequests.nonSRDFVolumeCannotbeAddedToSRDFCG();    }    if (VirtualPool.vPoolSpecifiesSRDF(vpool)) {      List<Volume> nativeVolumesInCG=BlockConsistencyGroupUtils.getActiveNativeVolumesInCG(consistencyGroup,_dbClient);      for (      Volume nativeVolume : nativeVolumesInCG) {        if (Volume.LinkStatus.SWAPPED.name().equals(nativeVolume.getLinkStatus())) {          throw BadRequestException.badRequests.cannotAddVolumesToSwappedCG(consistencyGroup.getLabel());        }      }    }    validateCGValidWithVirtualArray(consistencyGroup,varray);    requestedTypes=getRequestedTypes(vpool);    if (consistencyGroup.creationInitiated()) {      if (!consistencyGroup.getRequestedTypes().containsAll(requestedTypes)) {        throw APIException.badRequests.consistencyGroupIsNotCompatibleWithRequest(consistencyGroup.getId(),consistencyGroup.getRequestedTypes().toString(),requestedTypes.toString());      }    }    Volume existingRpSourceVolume=null;    if (VirtualPool.vPoolSpecifiesProtection(vpool)) {      if (activeCGVolumes != null && !activeCGVolumes.isEmpty() && !consistencyGroup.getTypes().contains(BlockConsistencyGroup.Types.RP.toString())) {        throw APIException.badRequests.consistencyGroupMustBeEmptyOrContainRpVolumes(consistencyGroup.getId());      }      if (!activeCGVolumes.isEmpty()) {        for (        Volume cgVolume : activeCGVolumes) {          if (cgVolume.getPersonality() != null && cgVolume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {            existingRpSourceVolume=cgVolume;            break;          }        }        if (existingRpSourceVolume != null) {          VirtualPool existingVpool=_dbClient.queryObject(VirtualPool.class,existingRpSourceVolume.getVirtualPool());          VirtualPool requestedVpool=_dbClient.queryObject(VirtualPool.class,param.getVpool());          if (existingVpool.getVirtualArrays().size() != requestedVpool.getVirtualArrays().size() || !existingVpool.getVirtualArrays().containsAll(requestedVpool.getVirtualArrays())) {            throw APIException.badRequests.vPoolSourceVarraysNotCompatibleForCG(consistencyGroup.getLabel());          }          if (VirtualPool.vPoolSpecifiesHighAvailability(existingVpool) && VirtualPool.vPoolSpecifiesHighAvailability(requestedVpool)) {            if ((!VirtualPool.vPoolSpecifiesMetroPoint(requestedVpool) && VirtualPool.vPoolSpecifiesMetroPoint(existingVpool)) || (VirtualPool.vPoolSpecifiesMetroPoint(requestedVpool) && !VirtualPool.vPoolSpecifiesMetroPoint(existingVpool))) {              throw APIException.badRequests.cannotMixMetroPointAndNonMetroPointVolumes(consistencyGroup.getLabel());            }          }          StringMap existingProtectionVarraySettings=existingVpool.getProtectionVarraySettings();          if (existingProtectionVarraySettings == null) {            throw APIException.badRequests.cannotAddVolumesToSwappedCG(consistencyGroup.getLabel());          }          StringMap requestedProtectionVarraySettings=requestedVpool.getProtectionVarraySettings();          if (existingProtectionVarraySettings.size() != requestedProtectionVarraySettings.size()) {            throw APIException.badRequests.vPoolTargetVarraysNotCompatibleForCG(consistencyGroup.getLabel());          }          for (          String targetVarray : requestedProtectionVarraySettings.keySet()) {            if (!existingProtectionVarraySettings.containsKey(targetVarray)) {              throw APIException.badRequests.vPoolTargetVarraysNotCompatibleForCG(consistencyGroup.getLabel());            }          }          String requestedRpCopyMode=NullColumnValueGetter.isNullValue(requestedVpool.getRpCopyMode()) ? RPCopyMode.ASYNCHRONOUS.name() : requestedVpool.getRpCopyMode();          String existingRpCopyMode=NullColumnValueGetter.isNullValue(existingVpool.getRpCopyMode()) ? RPCopyMode.ASYNCHRONOUS.name() : existingVpool.getRpCopyMode();          if (!requestedRpCopyMode.equalsIgnoreCase(existingRpCopyMode)) {            throw APIException.badRequests.vPoolRPCopyModeNotCompatibleForCG(consistencyGroup.getLabel());          }        }      }    }    if (!activeCGVolumes.isEmpty()) {      Volume activeCGVolume=existingRpSourceVolume == null ? activeCGVolumes.get(0) : existingRpSourceVolume;      if (!BlockServiceUtils.checkCGVolumeCanBeAddedOrRemoved(consistencyGroup,activeCGVolume,_dbClient)) {        checkCGForMirrors(consistencyGroup,activeCGVolumes);        checkCGForSnapshots(consistencyGroup);        getFullCopyManager().verifyNewVolumesCanBeCreatedInConsistencyGroup(consistencyGroup,activeCGVolumes);      }    }    capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,param.getConsistencyGroup());  } else   if (VirtualPool.vPoolSpecifiesProtection(vpool)) {    throw APIException.badRequests.consistencyGroupMissingForRpProtection();  }  long size=volumeCount * SizeUtil.translateSize(param.getSize());  TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());  ArgValidator.checkEntity(tenant,project.getTenantOrg().getURI(),false);  CapacityUtils.validateQuotasForProvisioning(_dbClient,vpool,project,tenant,size,"volume");  URI computeURI=param.getComputeResource();  if (!NullColumnValueGetter.isNullURI(computeURI)) {    capabilities.put(VirtualPoolCapabilityValuesWrapper.COMPUTE,computeURI.toString());  }  String task=UUID.randomUUID().toString();  TaskList taskList=createVolumeTaskList(param.getSize(),project,varray,vpool,param.getName(),task,volumeCount);  auditOp(OperationTypeEnum.CREATE_BLOCK_VOLUME,true,AuditLogManager.AUDITOP_BEGIN,param.getName(),volumeCount,varray.getId().toString(),actualId.toString());  CreateVolumeSchedulingThread.executeApiTask(this,_asyncTaskService.getExecutorService(),_dbClient,varray,project,vpool,capabilities,taskList,task,consistencyGroup,requestedTypes,param,blockServiceImpl);  _log.info("Kicked off thread to perform placement and scheduling.  Returning " + taskList.getTaskList().size() + " tasks");  return taskList;}  }
class C{  private static <A,B,T extends Transform<A,B>>Stream<T> create(TransformFactory factory,BridgeTransform<A,B> bridge){  requireNonNull(factory);  requireNonNull(bridge);  if (bridge.end.equals(bridge.to)) {    @SuppressWarnings("unchecked") final T result=(T)bridge;    return Stream.of(result);  } else {    final List<Stream<T>> bridges=new ArrayList<>();    factory.allFrom(bridge.end).stream().forEachOrdered(null);    return bridges.stream().flatMap(null);  }}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  public boolean add(Object o){  return m.put(o,PRESENT) == null;}  }
class C{  public String option3Name(){  return "Turnout command handling: ";}  }
class C{  public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {  reset(in);  LinkedList statusStack=new LinkedList();  LinkedList valueStack=new LinkedList();  try {    do {      nextToken();switch (status) {case S_INIT:switch (token.type) {case Yytoken.TYPE_VALUE:          status=S_IN_FINISHED_VALUE;        statusStack.addFirst(new Integer(status));      valueStack.addFirst(token.value);    break;case Yytoken.TYPE_LEFT_BRACE:  status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(createObjectContainer(containerFactory));break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(createArrayContainer(containerFactory));break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst(); else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);case S_IN_OBJECT:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;valueStack.addFirst(key);status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();String key=(String)valueStack.removeFirst();Map parent=(Map)valueStack.getFirst();parent.put(key,token.value);status=peekStatus(statusStack);break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);parent.put(key,newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);parent.put(key,newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;default :status=S_IN_ERROR;}break;case S_IN_ARRAY:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:List val=(List)valueStack.getFirst();val.add(token.value);break;case Yytoken.TYPE_RIGHT_SQUARE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;case Yytoken.TYPE_LEFT_BRACE:val=(List)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);val.add(newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;case Yytoken.TYPE_LEFT_SQUARE:val=(List)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);val.add(newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;default :status=S_IN_ERROR;}break;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {throw ie;}throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public void characters(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {  handler.error(XSLTErrorResources.ER_CHARS_NOT_ALLOWED,null,null);}  }
class C{  public static void changeFont(JComponent comp,int style){  Font font=comp.getFont();  comp.setFont(font.deriveFont(style));}  }
class C{  private Entry attribute(Attribute entry){  return new Entry(entry);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  if (publicId == null || systemId == null) {    throw new SAXException(LocalizedStrings.ManagedEntityConfigXml_PUBLIC_ID_0_SYSTEM_ID_1.toLocalizedString(new Object[]{publicId,systemId}));  }  String location=DTD_LOCATION;  InputSource result;{    InputStream stream=ClassPathLoader.getLatest().getResourceAsStream(getClass(),location);    if (stream != null) {      result=new InputSource(stream);    } else {      throw new SAXNotRecognizedException(LocalizedStrings.ManagedEntityConfigXml_DTD_NOT_FOUND_0.toLocalizedString(location));    }  }  return result;}  }
class C{  public Pos3D scale(double x,double y,double z){  xPos*=x;  yPos*=y;  zPos*=z;  return this;}  }
class C{  public static byte[] readStream(InputStream fin) throws IOException {  byte[][] bufs=new byte[8][];  int bufsize=4096;  for (int i=0; i < 8; ++i) {    bufs[i]=new byte[bufsize];    int size=0;    int len=0;    do {      len=fin.read(bufs[i],size,bufsize - size);      if (len >= 0)       size+=len; else {        byte[] result=new byte[bufsize - 4096 + size];        int s=0;        for (int j=0; j < i; ++j) {          System.arraycopy(bufs[j],0,result,s,s + 4096);          s=s + s + 4096;        }        System.arraycopy(bufs[i],0,result,s,size);        return result;      }    } while (size < bufsize);    bufsize*=2;  }  throw new IOException("too much data");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.402 -0500",hash_original_method="C20BEEC896962D7D1856EB72C0C34791",hash_generated_method="8AD4A75893F7402330C34806204FCB46") public void removeDialog(SIPDialog dialog){  String id=dialog.getDialogId();  String earlyId=dialog.getEarlyDialogId();  if (earlyId != null) {    this.earlyDialogTable.remove(earlyId);    this.dialogTable.remove(earlyId);  }  if (id != null) {    Object old=this.dialogTable.get(id);    if (old == dialog) {      this.dialogTable.remove(id);    }    if (!dialog.testAndSetIsDialogTerminatedEventDelivered()) {      DialogTerminatedEvent event=new DialogTerminatedEvent(dialog.getSipProvider(),dialog);      dialog.getSipProvider().handleEvent(event,null);    }  } else   if (this.isDialogTerminatedEventDeliveredForNullDialog) {    if (!dialog.testAndSetIsDialogTerminatedEventDelivered()) {      DialogTerminatedEvent event=new DialogTerminatedEvent(dialog.getSipProvider(),dialog);      dialog.getSipProvider().handleEvent(event,null);    }  }}  }
class C{  public SVGOMFESpotLightElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public boolean hasParameter(String name){  return _parameters.hasParameter(name);}  }
class C{  public void testGetParametersAsString(){  String propertyString="user=APP;CreateDatabase=create";  String driverPropertyString=ResourcePropertySet.PARAMETERS + "=" + propertyString;  Resource ds=resourceConverter.fromPropertyString(driverPropertyString);  try {    assertEquals(propertyString,resourceConverter.getParametersAsASemicolonDelimitedString(ds));  } catch (  ComparisonFailure e) {    assertEquals("CreateDatabase=create;user=APP",resourceConverter.getParametersAsASemicolonDelimitedString(ds));  }}  }
class C{  protected boolean isCallerIpAllowed(final ServletRequest servletRequest){  final Shop shop=shopService.getById(ShopCodeContext.getShopId());  final Pattern allowedIps;  if (patternCache.containsKey(shop)) {    allowedIps=patternCache.get(shop);  } else {    final String cfg=shop.getAttributeValueByCode(AttributeNamesKeys.Shop.SHOP_PAYMENT_GATEWAYS_ALLOWED_IPS_REGEX);    if (StringUtils.isBlank(cfg)) {      allowedIps=null;    } else {      allowedIps=Pattern.compile(cfg);    }    patternCache.put(shop,allowedIps);  }  if (allowedIps == null) {    return true;  }  final String ip=ipResolver.resolve((HttpServletRequest)servletRequest);  return allowedIps.matcher(ip).matches();}  }
class C{  String read(File f) throws IOException {  byte[] bytes=new byte[(int)f.length()];  DataInputStream in=new DataInputStream(new FileInputStream(f));  try {    in.readFully(bytes);  }  finally {    in.close();  }  return new String(bytes);}  }
class C{  static TypeMember createSearchProxy(final int offset){  return new TypeMember(offset);}  }
class C{  private static boolean writeTag(NdefMessage message,Tag tag){  int messageSize=message.toByteArray().length;  try {    Ndef ndef=Ndef.get(tag);    if (ndef != null) {      ndef.connect();      if (!ndef.isWritable()) {        Log.w(TAG,"Tag not writable");        return false;      }      int ndefMaxSize=ndef.getMaxSize();      if (messageSize > ndefMaxSize) {        NdefMessage newMessage=new NdefMessage(new NdefRecord[]{message.getRecords()[0]});        int newMessageSize=newMessage.toByteArray().length;        if (newMessageSize > ndefMaxSize) {          Log.w(TAG,"Tag too small");          return false;        } else {          Log.d(TAG,"Writing tag without AAR");          ndef.writeNdefMessage(newMessage);          return true;        }      }      ndef.writeNdefMessage(message);      return true;    } else {      NdefFormatable ndefFormatable=NdefFormatable.get(tag);      if (ndefFormatable != null) {        try {          ndefFormatable.connect();          ndefFormatable.format(message);          return true;        } catch (        IOException e) {          Log.w(TAG,"Tag not formatted");          return false;        }      } else {        Log.d(TAG,"ndefFormatable is null");        return false;      }    }  } catch (  Exception e) {    Log.w(TAG,"Writing to tag failed",e);    return false;  }}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  private void establishPartOfSpeechInformation(JCas jcas){  logger.log(Level.FINEST,"Establishing part of speech information...");  PartOfSpeechTagger partOfSpeechTagger=null;  Properties settings=new Properties();switch (language) {case ARABIC:    if (POSTagger.NO.equals(posTagger)) {      partOfSpeechTagger=new AllLanguagesTokenizerWrapper();      logger.log(Level.INFO,"Be aware that you use the AllLanguagesTokenizer instead of specific preprocessing for Arabic. " + "Thus, tagging results might be very different (and worse).");    } else {      partOfSpeechTagger=new StanfordPOSTaggerWrapper();      settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_ANNOTATE_TOKENS,true);      settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_ANNOTATE_SENTENCES,true);      settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_ANNOTATE_POS,true);      settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_MODEL_PATH,Config.get(Config.STANFORDPOSTAGGER_MODEL_PATH));      settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_CONFIG_PATH,Config.get(Config.STANFORDPOSTAGGER_CONFIG_PATH));    }  break;case VIETNAMESE:if (POSTagger.NO.equals(posTagger)) {  partOfSpeechTagger=new AllLanguagesTokenizerWrapper();  logger.log(Level.INFO,"Be aware that you use the AllLanguagesTokenizer instead of specific preprocessing for Vietnamese. " + "Thus, tagging results might be very different (and worse).");} else {  partOfSpeechTagger=new JVnTextProWrapper();  settings.put(PartOfSpeechTagger.JVNTEXTPRO_ANNOTATE_TOKENS,true);  settings.put(PartOfSpeechTagger.JVNTEXTPRO_ANNOTATE_SENTENCES,true);  settings.put(PartOfSpeechTagger.JVNTEXTPRO_ANNOTATE_POS,true);  settings.put(PartOfSpeechTagger.JVNTEXTPRO_WORD_MODEL_PATH,Config.get(Config.JVNTEXTPRO_WORD_MODEL_PATH));  settings.put(PartOfSpeechTagger.JVNTEXTPRO_SENT_MODEL_PATH,Config.get(Config.JVNTEXTPRO_SENT_MODEL_PATH));  settings.put(PartOfSpeechTagger.JVNTEXTPRO_POS_MODEL_PATH,Config.get(Config.JVNTEXTPRO_POS_MODEL_PATH));}break;case CROATIAN:if (POSTagger.NO.equals(posTagger)) {partOfSpeechTagger=new AllLanguagesTokenizerWrapper();logger.log(Level.INFO,"Be aware that you use the AllLanguagesTokenizer instead of specific preprocessing for Croatian. " + "Thus, tagging results might be very different (and worse).");} else {partOfSpeechTagger=new HunPosTaggerWrapper();settings.put(PartOfSpeechTagger.HUNPOS_LANGUAGE,language);settings.put(PartOfSpeechTagger.HUNPOS_ANNOTATE_TOKENS,true);settings.put(PartOfSpeechTagger.HUNPOS_ANNOTATE_POS,true);settings.put(PartOfSpeechTagger.HUNPOS_ANNOTATE_SENTENCES,true);settings.put(PartOfSpeechTagger.HUNPOS_MODEL_PATH,Config.get(Config.HUNPOS_MODEL_PATH));}break;default :if (POSTagger.STANFORDPOSTAGGER.equals(posTagger)) {partOfSpeechTagger=new StanfordPOSTaggerWrapper();settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_ANNOTATE_TOKENS,true);settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_ANNOTATE_SENTENCES,true);settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_ANNOTATE_POS,true);settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_MODEL_PATH,Config.get(Config.STANFORDPOSTAGGER_MODEL_PATH));settings.put(PartOfSpeechTagger.STANFORDPOSTAGGER_CONFIG_PATH,Config.get(Config.STANFORDPOSTAGGER_CONFIG_PATH));} else if (POSTagger.TREETAGGER.equals(posTagger)) {partOfSpeechTagger=new TreeTaggerWrapper();settings.put(PartOfSpeechTagger.TREETAGGER_LANGUAGE,language);settings.put(PartOfSpeechTagger.TREETAGGER_ANNOTATE_TOKENS,true);settings.put(PartOfSpeechTagger.TREETAGGER_ANNOTATE_SENTENCES,true);settings.put(PartOfSpeechTagger.TREETAGGER_ANNOTATE_POS,true);settings.put(PartOfSpeechTagger.TREETAGGER_IMPROVE_GERMAN_SENTENCES,(language == Language.GERMAN));settings.put(PartOfSpeechTagger.TREETAGGER_CHINESE_TOKENIZER_PATH,Config.get(Config.CHINESE_TOKENIZER_PATH));} else if (POSTagger.HUNPOS.equals(posTagger)) {partOfSpeechTagger=new HunPosTaggerWrapper();settings.put(PartOfSpeechTagger.HUNPOS_LANGUAGE,language);settings.put(PartOfSpeechTagger.HUNPOS_ANNOTATE_TOKENS,true);settings.put(PartOfSpeechTagger.HUNPOS_ANNOTATE_POS,true);settings.put(PartOfSpeechTagger.HUNPOS_ANNOTATE_SENTENCES,true);settings.put(PartOfSpeechTagger.HUNPOS_MODEL_PATH,Config.get(Config.HUNPOS_MODEL_PATH));} else if (POSTagger.NO.equals(posTagger)) {partOfSpeechTagger=new AllLanguagesTokenizerWrapper();logger.log(Level.INFO,"Be aware that you use the AllLanguagesTokenizer instead of specific preprocessing for the selected language. " + "If proper preprocessing for the specified language (." + language.getName() + ") is available, this might results in better "+ "temporal tagging quality.");} else {logger.log(Level.FINEST,"Sorry, but you can't use that tagger.");}}partOfSpeechTagger.initialize(settings);partOfSpeechTagger.process(jcas);partOfSpeechTagger.reset();logger.log(Level.FINEST,"Part of speech information established");}  }
class C{  private static S2Point faceSiTiToXYZ(int face,int si,int ti){  final double kScale=1.0 / MAX_SIZE;  double u=S2Projections.stToUV(kScale * si);  double v=S2Projections.stToUV(kScale * ti);  return S2Projections.faceUvToXyz(face,u,v);}  }
class C{  static void createOptimizationPlan(){  _options=new OptOptions();  int optLevel=Controller.options.INVOCATION_COUNT_OPT_LEVEL;  String[] optCompilerOptions=Controller.getOptCompilerOptions();  _options.setOptLevel(optLevel);  RecompilationStrategy.processCommandLineOptions(_options,optLevel,optLevel,optCompilerOptions);  _optPlan=OptimizationPlanner.createOptimizationPlan(_options);}  }
class C{  public static int positionForHandle(BinaryInputStream in){  return in.position() - 1;}  }
class C{  public static void print_labeling(java.io.PrintStream stream,Map labeling){  String sep="";  stream.print("{");  for (  Map.Entry e : ((Map<Object,Object>)labeling).entrySet()) {    stream.print(sep + e.getKey() + " -> "+ e.getValue());    sep=",";  }  stream.print("}");}  }
class C{  public Boolean isDhcpV6Enabled(){  return dhcpV6Enabled;}  }
class C{  public void send(SendPacket packet){synchronized (mQueue) {    mQueue.offer(packet);  }  if (mSending.compareAndSet(false,true)) {    sendNext();  }}  }
class C{  private QueryTask buildHostQuery(final State state){  QueryTask.Query.Builder queryBuilder=QueryTask.Query.Builder.create().addKindFieldClause(HostService.State.class);  queryBuilder.addFieldClause(HostService.State.FIELD_NAME_STATE,HostState.READY);  queryBuilder.addFieldClause(HostService.State.FIELD_NAME_AGENT_STATE,AgentState.ACTIVE);  queryBuilder.addCollectionItemClause(HostService.State.FIELD_NAME_REPORTED_DATASTORES,state.datastoreId);  QueryTask.Query query=queryBuilder.build();  QueryTask.Builder queryTaskBuilder=QueryTask.Builder.createDirectTask().setQuery(query);  QueryTask queryTask=queryTaskBuilder.build();  return queryTask;}  }
class C{  @LargeTest public void testPropertiesMPEGQCIF() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_12fps_92kbps_AMRNB_8KHz_12.2kbps_m_0_27.3gp";  final int aspectRatio=MediaProperties.ASPECT_RATIO_11_9;  final int fileType=MediaProperties.FILE_3GP;  final int videoCodecType=MediaProperties.VCODEC_MPEG4;  final int duration=27000;  final int videoBitrate=384000;  final int audioBitrate=12200;  final int fps=12;  final int audioCodecType=MediaProperties.ACODEC_AMRNB;  final int audioSamplingFrequency=8000;  final int audioChannel=1;  final int videoProfile=MediaProperties.MPEG4Profile.MPEG4ProfileSimple;  final int videoLevel=MediaProperties.MPEG4Level.MPEG4Level1;  final int width=176;  final int height=MediaProperties.HEIGHT_144;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  public boolean isCustomDifference(){  return _isCustomDifference;}  }
class C{  public boolean isFeedbackBroadcastMessage(){  return (this.isTurnoutReply());}  }
class C{  public boolean containsValue(Object value){  return map.containsValue(value);}  }
class C{  public void addExtension(String extension){  if (!extension.startsWith("."))   extension="." + extension;  extensions.add(extension.toLowerCase());}  }
class C{  public static double area(Enumeration<Geo> vs){  int count=0;  double area=0;  Geo v0=vs.nextElement();  Geo v1=vs.nextElement();  Geo p0=v0;  Geo p1=v1;  Geo p2=null;  while (vs.hasMoreElements()) {    count++;    p2=(Geo)vs.nextElement();    area+=angle(p0,p1,p2);    p0=p1;    p1=p2;  }  count++;  p2=v0;  area+=angle(p0,p1,p2);  p0=p1;  p1=p2;  count++;  p2=v1;  area+=angle(p0,p1,p2);  return area - (count - 2) * Math.PI;}  }
class C{  @SuppressWarnings("unchecked") static <T>void subscribe(Subscriber<? super T> s,Iterator<? extends T> it){  if (it == null) {    Operators.error(s,new NullPointerException("The iterator is null"));    return;  }  boolean b;  try {    b=it.hasNext();  } catch (  Throwable e) {    Operators.error(s,Operators.onOperatorError(e));    return;  }  if (!b) {    Operators.complete(s);    return;  }  if (s instanceof ConditionalSubscriber) {    s.onSubscribe(new IterableSubscriptionConditional<>((ConditionalSubscriber<? super T>)s,it));  } else {    s.onSubscribe(new IterableSubscription<>(s,it));  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  return true;}  }
class C{  @Override public boolean isUpperInclusive(){  return upperInclusive;}  }
class C{  public GridifyRuntimeException(String msg){  super(msg);}  }
class C{  protected void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,float halfDiffX,int seriesNr,int seriesIndex,Paint paint){  int scale=mDataset.getSeriesAt(seriesIndex).getScaleNumber();  if (mType == Type.STACKED) {    drawBar(canvas,xMin - halfDiffX,yMax,xMax + halfDiffX,yMin,scale,seriesIndex,paint);  } else {    float startX=xMin - seriesNr * halfDiffX + seriesIndex * 2 * halfDiffX;    drawBar(canvas,startX,yMax,startX + 2 * halfDiffX,yMin,scale,seriesIndex,paint);  }}  }
class C{  public static int floorLog(int a){  int h=0;  if (a <= 0) {    return -1;  }  int p=a >>> 1;  while (p > 0) {    h++;    p>>>=1;  }  return h;}  }
class C{  public ByteArrayInputStream(byte buf[],int offset,int length){  this.buf=buf;  this.pos=offset;  this.count=Math.min(offset + length,buf.length);  this.mark=offset;}  }
class C{  public boolean isStatic(){  return this.isDeclaredStatic();}  }
class C{  public static QueryExp in(ValueExp val,ValueExp valueList[]){  return new InQueryExp(val,valueList);}  }
class C{  public static boolean isValidNCName(String ncName){  if (ncName.length() == 0)   return false;  char ch=ncName.charAt(0);  if (isNCNameStart(ch) == false)   return false;  for (int i=1; i < ncName.length(); i++) {    ch=ncName.charAt(i);    if (isNCName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public void insertionSort(){}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  @Override protected String transform(final String hostport,final BufferedReader reader,final int length) throws IOException {  final StringBuilder out=new StringBuilder(length);  String line;  while ((line=reader.readLine()) != null) {    out.append(processLineOfWikiCode(hostport,line)).append(serverCore.CRLF_STRING);  }  out.insert(0,createTableOfContents());  this.tableOfContents.clear();  return out.toString();}  }
class C{  public InvalidRedirectLocationException(final String message,final String location,final Throwable cause){  super(message,cause);  this.location=location;}  }
class C{  public void write(OutputStream out) throws IOException {  SWFWriter swfwriter=new SWFWriter(out);  TagWriter tagwriter=new TagWriter(swfwriter);  write(tagwriter);}  }
class C{  protected JavadocTokenizer(ScannerFactory fac,char[] input,int inputLength){  super(fac,input,inputLength);}  }
class C{  public Configuration buildForServer(String hostname,int port,String password){  return new Builder(this).addServer(hostname,port).setServerPassword(password).buildConfiguration();}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  DVariable extractAtom(DMessage msg,String name,int oType,int flags){  int vType=VariableType.UNKNOWN;  Object value=null;  String typeName="";  String className="";  boolean isPrimitive=false;switch (oType) {case DMessage.kNumberType:{      String s=msg.getString();      double dval=Double.NaN;      try {        dval=Double.parseDouble(s);      } catch (      NumberFormatException nfe) {      }      value=new Double(dval);      isPrimitive=true;      break;    }case DMessage.kBooleanType:{    int bval=msg.getByte();    value=new Boolean((bval == 0) ? false : true);    isPrimitive=true;    break;  }case DMessage.kStringType:{  String s=msg.getString();  value=s;  isPrimitive=true;  break;}case DMessage.kObjectType:case DMessage.kNamespaceType:{long oid=msg.getPtr();long cType=(oid == -1) ? 0 : msg.getDWord();int isFnc=(oid == -1) ? 0 : msg.getWord();int rsvd=(oid == -1) ? 0 : msg.getWord();typeName=(oid == -1) ? "" : msg.getString();if (typeName.startsWith("<")) {  int atIndex=typeName.indexOf('@');  String dateVal=typeName;  if (atIndex > -1) {    dateVal=typeName.substring(0,atIndex);  }  SimpleDateFormat dFormat=new SimpleDateFormat("<EEE MMM d HH:mm:ss 'GMT'z yyyy>");  try {    Date dateObj=dFormat.parse(dateVal);    if (dateObj != null && dateObj.getTime() != 0) {      oType=DMessage.kDateType;      typeName="Date" + typeName.substring(atIndex);    }  } catch (  ParseException e) {  }}className=DVariable.classNameFor(cType,false);value=new Long(oid);vType=(isFnc == 0) ? VariableType.OBJECT : VariableType.FUNCTION;break;}case DMessage.kMovieClipType:{long oid=msg.getPtr();long cType=(oid == -1) ? 0 : msg.getDWord();long rsvd=(oid == -1) ? 0 : msg.getDWord();typeName=(oid == -1) ? "" : msg.getString();className=DVariable.classNameFor(cType,true);value=new Long(oid);vType=VariableType.MOVIECLIP;break;}case DMessage.kNullType:{value=null;isPrimitive=true;break;}case DMessage.kUndefinedType:{value=Value.UNDEFINED;isPrimitive=true;break;}case DMessage.kTraitsType:{vType=VariableType.UNKNOWN;typeName=Value.TRAITS_TYPE_NAME;break;}case DMessage.kReferenceType:case DMessage.kArrayType:case DMessage.kObjectEndType:case DMessage.kStrictArrayType:case DMessage.kDateType:case DMessage.kLongStringType:case DMessage.kUnsupportedType:case DMessage.kRecordSetType:case DMessage.kXMLType:case DMessage.kTypedObjectType:case DMessage.kAvmPlusObjectType:default :{break;}}int isolateId=msg.getTargetIsolate();DValue valueObject=null;if (value instanceof Long) {valueObject=getValue(((Long)value).longValue(),isolateId);}if (valueObject == null) {if (isPrimitive) {valueObject=DValue.forPrimitive(value,isolateId);valueObject.setAttributes(toAttributes(flags));} else {valueObject=new DValue(vType,typeName,className,toAttributes(flags),value,isolateId);}if (value instanceof Long && (toAttributes(flags) & VariableAttribute.HAS_GETTER) == 0) putValue(((Long)value).longValue(),valueObject,isolateId);} else {if (isPrimitive) {DValue temp=DValue.forPrimitive(value,isolateId);vType=temp.getType();typeName=temp.getTypeName();className=temp.getClassName();}valueObject.setType(vType);valueObject.setTypeName(typeName);valueObject.setClassName(className);valueObject.setAttributes(toAttributes(flags));valueObject.setValue(value);}if (valueObject != null) {valueObject.setIsolateId(isolateId);}DVariable var=new DVariable(name,valueObject,isolateId);return var;}  }
class C{  public double predictQuantile(double percentage){  updateMeanAndVariance();  return m_Mean + Statistics.normalInverse(percentage) * Math.sqrt(m_Variance);}  }
class C{  public Builder(){  this(null,null);}  }
class C{  private Map<String,Object> handleSuccessResponse(Transaction transaction){  Money amount=Money.of(CurrencyUnit.of(transaction.getCurrencyIsoCode()),transaction.getAmount().stripTrailingZeros());  logger.infofmt("Transaction for %s via %s %s with ID: %s",amount,transaction.getPaymentInstrumentType(),transaction.getStatus(),transaction.getId());  return JsonResponseHelper.create(SUCCESS,"Payment processed successfully",asList(ImmutableMap.of("id",transaction.getId(),"formattedAmount",formatMoney(amount))));}  }
class C{  public static Graph scan(Object o){  return scan(o,false);}  }
class C{  @Override public void beforePassivation(ServiceReference<ServiceType> passivating) throws Exception {}  }
class C{  public ICUCollatedTermAttributeImpl(Collator collator){  try {    this.collator=(Collator)collator.clone();  } catch (  CloneNotSupportedException e) {    throw new RuntimeException(e);  }}  }
class C{  boolean unlockTradeItemOfferInternally(String partnerName){  return trade.unlockItemOfferInternally(partnerName);}  }
class C{  public void generateOptimizedBooleanEqual(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  if (this.left.constant != Constant.NotAConstant) {    boolean inline=this.left.constant.booleanValue();    this.right.generateOptimizedBoolean(currentScope,(inline ? trueLabel : falseLabel),(inline ? falseLabel : trueLabel),valueRequired);    return;  }  if (this.right.constant != Constant.NotAConstant) {    boolean inline=this.right.constant.booleanValue();    this.left.generateOptimizedBoolean(currentScope,(inline ? trueLabel : falseLabel),(inline ? falseLabel : trueLabel),valueRequired);    return;  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  public boolean isCrosshairVisible(){  FieldCameraScene scene=(FieldCameraScene)panel.getScene();  return (scene.isCrosshairVisible());}  }
class C{  public static Split findOnEdge(double lat,double lon,EdgeStore.Edge edge){  int fixedLat=VertexStore.floatingDegreesToFixed(lat);  int fixedLon=VertexStore.floatingDegreesToFixed(lon);  final double metersPerDegreeLat=111111.111;  double cosLat=FastMath.cos(FastMath.toRadians(lat));  Split curr=new Split();  Split best=new Split();  curr.edge=edge.edgeIndex;  best.vertex0=edge.getFromVertex();  best.vertex1=edge.getToVertex();  double[] lengthBefore_fixedDeg=new double[1];  edge.forEachSegment(null);  int edgeLengthMm=edge.getLengthMm();  if (best.distance0_mm > edgeLengthMm) {    best.distance0_mm=edgeLengthMm;    best.distance1_mm=0;  } else {    best.distance1_mm=edgeLengthMm - best.distance0_mm;  }  return best;}  }
class C{  public GenericFeed retrieveFirstPageOfUsers() throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return service.getFeed(new URL("https://apps-apis.google.com/a/feeds/user/2.0/" + domain),GenericFeed.class);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:24.652 -0500",hash_original_method="64FFFA196C50B73DE4BDB139C105E877",hash_generated_method="440C08403B82EDEBF7F0E57E23E2719D") public RDN(AttributeTypeAndValue[] aAndVs){  this.values=new DERSet(aAndVs);}  }
class C{  private void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);  validateTaskSubStage(currentState.taskState);  if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {switch (currentState.taskState.subStage) {case PROVISION_MANAGEMENT_HOSTS:case CREATE_MANAGEMENT_PLANE:case PROVISION_ALL_HOSTS:case ALLOCATE_CM_RESOURCES:case MIGRATE_DEPLOYMENT_DATA:case SET_DEPLOYMENT_STATE:      break;default :    throw new IllegalStateException("Unknown task sub-stage: " + currentState.taskState.subStage);}}checkState(null != currentState.taskSubStates);checkState(TaskState.SubStage.values().length == currentState.taskSubStates.size());for (TaskState.SubStage subStage : TaskState.SubStage.values()) {try {  TaskState.TaskStage value=currentState.taskSubStates.get(subStage.ordinal());  checkState(null != value);  if (null != currentState.taskState.subStage) {    if (currentState.taskState.subStage.ordinal() > subStage.ordinal()) {      checkState(TaskState.TaskStage.FINISHED == value);    } else     if (currentState.taskState.subStage.ordinal() == subStage.ordinal()) {      checkState(TaskState.TaskStage.STARTED == value);    } else {      checkState(TaskState.TaskStage.CREATED == value);    }  }  if (null != currentState.taskState.subStage && currentState.taskState.subStage.ordinal() >= subStage.ordinal()) {    checkState(value != TaskState.TaskStage.CREATED);  }} catch (IndexOutOfBoundsException e) {  throw new IllegalStateException(e);}}}  }
class C{  public static RaptorAction load(Properties properties){  AbstractRaptorAction result=null;  try {    result=(AbstractRaptorAction)Class.forName(properties.getProperty("class")).newInstance();  } catch (  Throwable t) {    throw new RuntimeException(t);  }  try {    String desc=properties.getProperty("description");    desc=desc.startsWith("$") ? L10n.getInstance().getString(desc) : desc;    result.setDescription(desc);    String name=properties.getProperty("name");    name=name.startsWith("$") ? L10n.getInstance().getString(name) : name;    result.setName(name);    result.setIcon(properties.getProperty("icon"));    if (StringUtils.isBlank(result.getIcon())) {      result.setIcon(null);    }    result.setCategory(Category.valueOf(properties.getProperty("category")));    result.setKeyCode(Integer.parseInt(properties.getProperty("keyCode")));    result.setModifierKey(Integer.parseInt(properties.getProperty("modifierKey")));    if (result instanceof ScriptedAction) {      ((ScriptedAction)result).setScript(properties.getProperty("script").trim());    }    if (StringUtils.isNotBlank(properties.getProperty("containers"))) {      String[] containerNames=RaptorStringUtils.stringArrayFromString(properties.getProperty("containers"));      for (      String containerName : containerNames) {        result.addContainer(RaptorActionContainer.valueOf(containerName),Integer.parseInt(properties.getProperty(containerName)));      }    }  } catch (  Throwable t) {    throw new RuntimeException("Error loading properties: " + properties,t);  }  return result;}  }
class C{  private void checkIntegrity(){synchronized (mLock) {    if (mCacheImpl.size() <= 0) {      return;    }    AccessibilityNodeInfo root=mCacheImpl.valueAt(0);    AccessibilityNodeInfo parent=root;    while (parent != null) {      root=parent;      parent=mCacheImpl.get(parent.getParentNodeId());    }    final int windowId=root.getWindowId();    AccessibilityNodeInfo accessFocus=null;    AccessibilityNodeInfo inputFocus=null;    HashSet<AccessibilityNodeInfo> seen=new HashSet<AccessibilityNodeInfo>();    Queue<AccessibilityNodeInfo> fringe=new LinkedList<AccessibilityNodeInfo>();    fringe.add(root);    while (!fringe.isEmpty()) {      AccessibilityNodeInfo current=fringe.poll();      if (!seen.add(current)) {        Log.e(LOG_TAG,"Duplicate node: " + current);        return;      }      if (current.isAccessibilityFocused()) {        if (accessFocus != null) {          Log.e(LOG_TAG,"Duplicate accessibility focus:" + current);        } else {          accessFocus=current;        }      }      if (current.isFocused()) {        if (inputFocus != null) {          Log.e(LOG_TAG,"Duplicate input focus: " + current);        } else {          inputFocus=current;        }      }      SparseLongArray childIds=current.getChildNodeIds();      final int childCount=childIds.size();      for (int i=0; i < childCount; i++) {        final long childId=childIds.valueAt(i);        AccessibilityNodeInfo child=mCacheImpl.get(childId);        if (child != null) {          fringe.add(child);        }      }    }    final int cacheSize=mCacheImpl.size();    for (int i=0; i < cacheSize; i++) {      AccessibilityNodeInfo info=mCacheImpl.valueAt(i);      if (!seen.contains(info)) {        if (info.getWindowId() == windowId) {          Log.e(LOG_TAG,"Disconneced node: ");        } else {          Log.e(LOG_TAG,"Node from: " + info.getWindowId() + " not from:"+ windowId+ " "+ info);        }      }    }  }}  }
class C{  public static UUID fromUUIDAsURNStringToUUID(String UUIDasURN){  if (!UUIDasURN.startsWith(UUIDHelper.UUID_as_a_URN_PREFIX)) {    IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.UUID_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("Input UUID %s " + "does not start with %s",UUIDasURN,UUIDHelper.UUID_as_a_URN_PREFIX));    throw new IMFException(String.format("Input UUID %s does not start with %s",UUIDasURN,UUIDHelper.UUID_as_a_URN_PREFIX),imfErrorLogger);  }  return UUID.fromString(UUIDasURN.split(UUIDHelper.UUID_as_a_URN_PREFIX)[1]);}  }
class C{  public AttachPermission(String name){  super(name);  if (!name.equals("attachVirtualMachine") && !name.equals("createAttachProvider")) {    throw new IllegalArgumentException("name: " + name);  }}  }
class C{  public static byte[] decodeBase64(final byte[] base64Data){  return new Base64().decode(base64Data);}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public AcceptLanguageHeader createAcceptLanguageHeader(Locale language){  if (language == null)   throw new NullPointerException("null arg");  AcceptLanguage acceptLanguage=new AcceptLanguage();  acceptLanguage.setAcceptLanguage(language);  return acceptLanguage;}  }
class C{  private Individuum makeIndividuum(short[] gene){  final DBIDs ids=computeSubspaceForGene(gene,ranges);  final double fitness=(ids.size() > 0) ? sparsity(ids.size(),dbsize,k,phi) : Double.MAX_VALUE;  return new Individuum(fitness,gene);}  }
class C{  private void updateExistingStorageSize(StorageData storageData) throws IOException, SerializationException {  if (null != storageData) {synchronized (storageData) {      long newSize=getDiskSizeForStorage(storageData);      if (newSize != storageData.getDiskSize()) {        storageData.setDiskSize(newSize);        writeStorageDataToDisk(storageData);      }    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  log.info(e.toString());  if (e.getSource() == m_NewMenuNode) {    log.info("Create New Node");    String nameLabel=Util.cleanAmp(Msg.getMsg(Env.getCtx(),"Name"));    String name=JOptionPane.showInputDialog(this,nameLabel,Msg.getMsg(Env.getCtx(),"CreateNewNode"),JOptionPane.QUESTION_MESSAGE);    if (name != null && name.length() > 0) {      int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());      MWFNode node=new MWFNode(m_wf,name,name);      node.setClientOrg(AD_Client_ID,0);      node.saveEx();      m_parent.load(m_wf.getAD_Workflow_ID(),true);    }  } else   if (e.getSource() instanceof WFPopupItem) {    WFPopupItem item=(WFPopupItem)e.getSource();    item.execute();  }}  }
class C{  public NamingEnumeration<NameClassPair> list(String name) throws NamingException {  return list(new CompositeName(name));}  }
class C{  public Door2DView(){  width=IGameScreen.SIZE_UNIT_PIXELS;  height=IGameScreen.SIZE_UNIT_PIXELS;}  }
class C{  private void checkBoundaryFields(){  maxRangeField.setEnabled(!model.isAutoRange());  minRangeField.setEnabled(!model.isAutoRange());  maxDomainField.setEnabled(!model.isAutoDomain());  minDomainField.setEnabled(!model.isAutoDomain());}  }
class C{  boolean dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){  boolean needSep=false;  ItemMatcher matcher=new ItemMatcher();  matcher.build(args,opti);  pw.println("ACTIVITY MANAGER SERVICES (dumpsys activity services)");  try {    int[] users=mAm.getUsersLocked();    for (    int user : users) {      if (mServiceMap.getAllServices(user).size() > 0) {        boolean printed=false;        long nowReal=SystemClock.elapsedRealtime();        Iterator<ServiceRecord> it=mServiceMap.getAllServices(user).iterator();        needSep=false;        while (it.hasNext()) {          ServiceRecord r=it.next();          if (!matcher.match(r,r.name)) {            continue;          }          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {            continue;          }          if (!printed) {            if (user != 0) {              pw.println();            }            pw.println("  User " + user + " active services:");            printed=true;          }          if (needSep) {            pw.println();          }          pw.print("  * ");          pw.println(r);          if (dumpAll) {            r.dump(pw,"    ");            needSep=true;          } else {            pw.print("    app=");            pw.println(r.app);            pw.print("    created=");            TimeUtils.formatDuration(r.createTime,nowReal,pw);            pw.print(" started=");            pw.print(r.startRequested);            pw.print(" connections=");            pw.println(r.connections.size());            if (r.connections.size() > 0) {              pw.println("    Connections:");              for (              ArrayList<ConnectionRecord> clist : r.connections.values()) {                for (int i=0; i < clist.size(); i++) {                  ConnectionRecord conn=clist.get(i);                  pw.print("      ");                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));                  pw.print(" -> ");                  ProcessRecord proc=conn.binding.client;                  pw.println(proc != null ? proc.toShortString() : "null");                }              }            }          }          if (dumpClient && r.app != null && r.app.thread != null) {            pw.println("    Client:");            pw.flush();            try {              TransferPipe tp=new TransferPipe();              try {                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);                tp.setBufferPrefix("      ");                tp.go(fd,2000);              }  finally {                tp.kill();              }            } catch (            IOException e) {              pw.println("      Failure while dumping the service: " + e);            }catch (            RemoteException e) {              pw.println("      Got a RemoteException while dumping the service");            }            needSep=true;          }        }        needSep=printed;      }    }  } catch (  Exception e) {    Log.w(TAG,"Exception in dumpServicesLocked: " + e);  }  if (mPendingServices.size() > 0) {    boolean printed=false;    for (int i=0; i < mPendingServices.size(); i++) {      ServiceRecord r=mPendingServices.get(i);      if (!matcher.match(r,r.name)) {        continue;      }      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {        continue;      }      if (!printed) {        if (needSep)         pw.println(" ");        needSep=true;        pw.println("  Pending services:");        printed=true;      }      pw.print("  * Pending ");      pw.println(r);      r.dump(pw,"    ");    }    needSep=true;  }  if (mRestartingServices.size() > 0) {    boolean printed=false;    for (int i=0; i < mRestartingServices.size(); i++) {      ServiceRecord r=mRestartingServices.get(i);      if (!matcher.match(r,r.name)) {        continue;      }      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {        continue;      }      if (!printed) {        if (needSep)         pw.println(" ");        needSep=true;        pw.println("  Restarting services:");        printed=true;      }      pw.print("  * Restarting ");      pw.println(r);      r.dump(pw,"    ");    }    needSep=true;  }  if (mStoppingServices.size() > 0) {    boolean printed=false;    for (int i=0; i < mStoppingServices.size(); i++) {      ServiceRecord r=mStoppingServices.get(i);      if (!matcher.match(r,r.name)) {        continue;      }      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {        continue;      }      if (!printed) {        if (needSep)         pw.println(" ");        needSep=true;        pw.println("  Stopping services:");        printed=true;      }      pw.print("  * Stopping ");      pw.println(r);      r.dump(pw,"    ");    }    needSep=true;  }  if (dumpAll) {    if (mServiceConnections.size() > 0) {      boolean printed=false;      Iterator<ArrayList<ConnectionRecord>> it=mServiceConnections.values().iterator();      while (it.hasNext()) {        ArrayList<ConnectionRecord> r=it.next();        for (int i=0; i < r.size(); i++) {          ConnectionRecord cr=r.get(i);          if (!matcher.match(cr.binding.service,cr.binding.service.name)) {            continue;          }          if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {            continue;          }          if (!printed) {            if (needSep)             pw.println(" ");            needSep=true;            pw.println("  Connection bindings to services:");            printed=true;          }          pw.print("  * ");          pw.println(cr);          cr.dump(pw,"    ");        }      }      needSep=true;    }  }  return needSep;}  }
class C{  public static byte toBinaryFromHex(byte ch){  if (ch >= 'A' && ch <= 'F')   return (byte)((byte)10 + (byte)(ch - 'A'));  return (byte)(ch - '0');}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  public static String timeFormat(Calendar cal){  return new java.text.SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z").format(cal.getTimeInMillis());}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.327 -0500",hash_original_method="58F6793B30C14E2CFD3653910A805BA2",hash_generated_method="D6CA73B06B0115738CCFC5715639C99F") public long addCompletedDownload(String title,String description,boolean isMediaScannerScannable,String mimeType,String path,long length,boolean showNotification){  validateArgumentIsNonEmpty("title",title);  validateArgumentIsNonEmpty("description",description);  validateArgumentIsNonEmpty("path",path);  validateArgumentIsNonEmpty("mimeType",mimeType);  if (length <= 0) {    throw new IllegalArgumentException(" invalid value for param: totalBytes");  }  Request request=new Request(NON_DOWNLOADMANAGER_DOWNLOAD).setTitle(title).setDescription(description).setMimeType(mimeType);  ContentValues values=request.toContentValues(null);  values.put(Downloads.Impl.COLUMN_DESTINATION,Downloads.Impl.DESTINATION_NON_DOWNLOADMANAGER_DOWNLOAD);  values.put(Downloads.Impl._DATA,path);  values.put(Downloads.Impl.COLUMN_STATUS,Downloads.Impl.STATUS_SUCCESS);  values.put(Downloads.Impl.COLUMN_TOTAL_BYTES,length);  values.put(Downloads.Impl.COLUMN_MEDIA_SCANNED,(isMediaScannerScannable) ? Request.SCANNABLE_VALUE_YES : Request.SCANNABLE_VALUE_NO);  values.put(Downloads.Impl.COLUMN_VISIBILITY,(showNotification) ? Request.VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION : Request.VISIBILITY_HIDDEN);  Uri downloadUri=mResolver.insert(Downloads.Impl.CONTENT_URI,values);  if (downloadUri == null) {    return -1;  }  return Long.parseLong(downloadUri.getLastPathSegment());}  }
class C{  protected void handleUnrecoverableGoogleWalletError(int errorCode){  Intent intent=new Intent(getActivity(),CheckoutActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(WalletConstants.EXTRA_ERROR_CODE,errorCode);  intent.putExtra(Constants.EXTRA_ITEM_ID,mItemId);  startActivity(intent);}  }
class C{  private String createChoiceXml(String choiceId,String choiceDescription,String nextMomentId,boolean depleteWeaponCharge,boolean incrementNumEnemiesDefeated,String iconResourceName){  String xml="";  xml+="<choice ";  xml+="id='" + choiceId + "' >";  xml+="<description>" + choiceDescription + "</description>";  xml+=createNextMomentXml(nextMomentId);  xml+="<outcome ";  xml+="deplete_weapon='" + Boolean.toString(depleteWeaponCharge) + "' ";  xml+="increment_enemies='" + Boolean.toString(incrementNumEnemiesDefeated) + "' />";  if (iconResourceName != null) {    xml+=createIconXML(iconResourceName);  }  xml+="</choice>";  return xml;}  }
class C{  @SuppressWarnings("unchecked") public void writeObject(SQLData x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialStruct(x,map));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.873 -0500",hash_original_method="2833A66A573FEB90891C13E00C93BD47",hash_generated_method="9523084F6775EEFC527B1FEA867C410E") @Override public void closeInbound() throws SSLException {  if (logger != null) {    logger.println("closeInbound() " + isInboundDone);  }  if (isInboundDone) {    return;  }  isInboundDone=true;  engine_was_closed=true;  if (handshake_started) {    if (!close_notify_was_received) {      if (session != null) {        session.invalidate();      }      alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);      throw new SSLException("Inbound is closed before close_notify " + "alert has been received.");    }  } else {    shutdown();  }}  }
class C{  SelectWordAction(){  super(selectWordAction);  start=new BeginWordAction("pigdog",false);  end=new EndWordAction("pigdog",true);}  }
class C{  @Timeout public void handleTimer(@SuppressWarnings("unused") Timer timer){  if (logFile != null) {    handleOnChange(logFile);  }}  }
class C{  public static Set<String> readStopwordsPath(Path path,boolean lowercase) throws IOException {  return readStopwordsInputStream(Files.newInputStream(path),lowercase);}  }
class C{  public LiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public String generateURL(PieDataset dataset,Comparable key,int pieIndex){  return getURL(key,pieIndex);}  }
class C{  private void notifyLines(final Key outputType,final Iterator<String> lines,final StringBuilder lineBuilder){  if (!lines.hasNext())   return;  if (lineBuilder.length() > 0) {    lineBuilder.append(lines.next());    if (lines.hasNext()) {      final String line=lineBuilder.toString();      notifyLine(line,outputType);      lineBuilder.setLength(0);    }  }  while (true) {    String line=null;    if (lines.hasNext()) {      line=lines.next();    }    if (lines.hasNext()) {      notifyLine(line,outputType);    } else {      if (line != null && line.length() > 0) {        lineBuilder.append(line);      }      break;    }  }}  }
class C{  private boolean isVisible(int mods,Package otherPackage){  return Modifier.isPublic(mods) || (thePackage.equals(otherPackage) && !Modifier.isPrivate(mods));}  }
class C{  private void fillFieldValues(){  if (isCreationPanel) {    label.setText("" + Turning.DEFAULT_LABEL);    direction.setText("" + Turning.DEFAULT_DIRECTION);    amount.setText("" + Turning.DEFAULT_AMOUNT);  } else {    label.setText("" + turningEffector.getLabel());    direction.setText("" + turningEffector.getDirection());    amount.setText("" + turningEffector.getAmount());  }}  }
class C{  public void testMultiPolygonWithSmallComponents() throws Exception {  String geomStr="MULTIPOLYGON(((13.73095 51.024734,13.7309323 51.0247668,13.7306959 51.0247959,13.7292724 51.0249742,13.7280216 51.0251252,13.7266598 51.0252998,13.7259617 51.0254072,13.7258854 51.0254201,13.7253253 51.0255144,13.725276 51.025492,13.724538 51.025631,13.7230288 51.0259021,13.7223529 51.0260273,13.7223299 51.0260863,13.7222292 51.026391,13.7220002 51.0273366,13.7217875 51.0282094,13.721746 51.028243,13.7217693 51.0282803,13.7215512 51.0291967,13.721513 51.029222,13.7215203 51.0292567,13.7212713 51.0295967,13.7222258 51.0299532,13.722234 51.03,13.7222931 51.0299823,13.7232514 51.0303187,13.7242514 51.0306715,13.724263 51.030714,13.7243024 51.0306951,13.7249934 51.0309315,13.7265097 51.0314552,13.7266116 51.0313952,13.7267988 51.0313334,13.7269952 51.0313243,13.72703 51.0314107,13.7271637 51.0313254,13.7272524 51.0313839,13.72739 51.031449,13.7276768 51.0313074,13.7283793 51.0309944,13.7296654 51.0304157,13.7297572 51.0303637,13.729845 51.0303139,13.7299557 51.0301763,13.7300964 51.0300176,13.730252 51.0298919,13.7304615 51.0297932,13.730668 51.0297363,13.730743 51.029783,13.7307859 51.0298398,13.7307094 51.0301388,13.730624 51.030263,13.7306955 51.0303267,13.7301182 51.0325594,13.7300528 51.0325663,13.7301114 51.0327342,13.7301645 51.0329094,13.7300035 51.0327693,13.7299669 51.0327351,13.7299445 51.0327211,13.7298934 51.032814,13.7298539 51.0328585,13.7297737 51.0328321,13.7288526 51.0325639,13.7288201 51.0324367,13.7284426 51.0324383,13.7276461 51.032179,13.7274569 51.0321976,13.7272787 51.0322421,13.7271265 51.0322903,13.7267034 51.0322495,13.7265364 51.0322161,13.7259018 51.0324269,13.7258649 51.03242,13.725733 51.0326646,13.7251933 51.0328876,13.7247918 51.0331374,13.7244439 51.0331106,13.7242967 51.0334273,13.7239131 51.0337529,13.7237035 51.0338511,13.7235429 51.033967,13.7233375 51.0339148,13.7232064 51.0339347,13.7231786 51.0339863,13.7228848 51.0340776,13.7224481 51.0341888,13.7220471 51.0342483,13.7217493 51.0343198,13.721552 51.0343861,13.7214718 51.0344095,13.7215108 51.034534,13.7205032 51.0349932,13.7197657 51.0352983,13.7195764 51.0352291,13.7195934 51.0352797,13.7182451 51.0359157,13.7181108 51.0359003,13.7181657 51.0359571,13.717622 51.0361956,13.7159749 51.0369683,13.7159057 51.0369284,13.7158604 51.0370288,13.7157161 51.0370124,13.7157523 51.0370733,13.7153708 51.0372801,13.7150274 51.0374899,13.7144074 51.0379192,13.7138287 51.0383899,13.7137514 51.0383857,13.7137492 51.0384566,13.7134249 51.0387269,13.7130179 51.0390385,13.7125791 51.0393343,13.7120736 51.039611,13.7115839 51.0398558,13.7112945 51.0399894,13.7114637 51.0402313,13.7123153 51.041449,13.7126333 51.0417033,13.713371 51.0421453,13.7138861 51.0424061,13.7142518 51.0425683,13.7164587 51.0435668,13.7167995 51.0437957,13.7170883 51.0439897,13.7190694 51.0451663,13.7196131 51.0458277,13.7197562 51.0461521,13.7198262 51.0464192,13.7198377 51.0467389,13.7205681 51.0455573,13.7210009 51.0450379,13.7214987 51.0445401,13.7220306 51.0442859,13.7227215 51.0439558,13.7237962 51.0434514,13.723979 51.0435278,13.7241448 51.0435041,13.7241052 51.0436042,13.7247987 51.0438896,13.7250186 51.0439093,13.7250579 51.0440386,13.7257225 51.0443545,13.7259312 51.0443456,13.725955 51.0443813,13.7260235 51.0443873,13.7260682 51.0445303,13.7282191 51.0455848,13.7290532 51.045927,13.7292643 51.0458591,13.7292228 51.0459969,13.729706 51.0461854,13.7303185 51.046393,13.7309107 51.0465601,13.731546 51.0466841,13.7321939 51.0467752,13.7332896 51.0468999,13.7333733 51.0469094,13.7334778 51.0468127,13.7335706 51.0469078,13.733651 51.0470684,13.7338458 51.0471508,13.7346109 51.0472333,13.7346367 51.0471474,13.7346922 51.0470697,13.7346666 51.0470056,13.7346564 51.0468714,13.7345552 51.0467095,13.7336001 51.0465496,13.733427 51.046454,13.7335317 51.0464255,13.7347225 51.0465948,13.7348421 51.0466562,13.7349123 51.0466203,13.736811 51.0468537,13.7382043 51.0469796,13.7383487 51.0469803,13.7394909 51.0469005,13.7400899 51.0467949,13.7405051 51.0464739,13.7408331 51.0462204,13.7412027 51.0463256,13.741053 51.0466451,13.7407291 51.0469007,13.7405095 51.0469726,13.7400888 51.0470337,13.7393051 51.0471049,13.7393014 51.0472015,13.7393088 51.0473019,13.7395556 51.0473056,13.7404944 51.0472245,13.740932 51.0470192,13.7414421 51.0465652,13.7414893 51.0465576,13.7416494 51.0464916,13.7416003 51.0466074,13.7416246 51.04663,13.741668 51.0466443,13.7417272 51.0467159,13.7417503 51.0466716,13.7423587 51.0468732,13.7426958 51.0470246,13.7429143 51.0471813,13.74318 51.04726,13.7430363 51.0472995,13.7433021 51.047588,13.7434678 51.0475916,13.7433805 51.0477019,13.7436362 51.0479981,13.7446308 51.0491622,13.7447961 51.0491827,13.744722 51.0492509,13.7448536 51.0494078,13.745056 51.0494766,13.7450313 51.0496901,13.7453573 51.0500052,13.7465317 51.0512807,13.7466999 51.0513722,13.746638 51.0514149,13.7468683 51.0516781,13.7470071 51.051777,13.7469985 51.0518746,13.7470732 51.0519866,13.7471316 51.0520528,13.7472989 51.0523089,13.7472368 51.0523858,13.7473063 51.0524932,13.7473468 51.0527412,13.7473392 51.0531614,13.7472987 51.0533157,13.7473919 51.0534224,13.7472684 51.0534549,13.7472134 51.0536926,13.7472913 51.0537784,13.7473216 51.053725,13.7474649 51.0537575,13.7474492 51.053833,13.7475625 51.0537839,13.7497379 51.0544435,13.7515333 51.0551019,13.7527693 51.0555438,13.7549766 51.0564993,13.7550622 51.0565364,13.755105 51.0566612,13.7552745 51.0566237,13.7558661 51.0560648,13.7559318 51.0560101,13.755908 51.055897,13.7559252 51.0558292,13.7559566 51.0557055,13.7564494 51.0551377,13.7564124 51.0550457,13.7573213 51.0539813,13.7575007 51.0539933,13.757856 51.0540047,13.7580394 51.054028,13.7580896 51.053984,13.7580949 51.0539463,13.7579963 51.0538534,13.7581294 51.0537147,13.7582346 51.0535957,13.758354 51.053433,13.758363 51.053392,13.7583656 51.0533457,13.758359 51.0532095,13.7583338 51.0530937,13.7582902 51.0529647,13.7580365 51.0522637,13.7577683 51.051463,13.7573182 51.0501993,13.7571595 51.0497164,13.7567579 51.0490095,13.7563383 51.0482979,13.7557757 51.0473383,13.7557095 51.0472522,13.7555771 51.0471199,13.7554448 51.0470471,13.7548596 51.0462612,13.7547097 51.046054,13.7549127 51.0460086,13.7548633 51.0459174,13.7548127 51.0458413,13.7547176 51.0457237,13.7538293 51.0449222,13.7530218 51.0441346,13.7526711 51.0437838,13.752446 51.0435522,13.7522297 51.0433547,13.751704 51.042833,13.7513058 51.0424448,13.7505766 51.0417281,13.7499967 51.0411283,13.7497695 51.0408943,13.7493849 51.0405205,13.7486222 51.0397896,13.7478209 51.0390261,13.7477474 51.0389532,13.7477041 51.0389189,13.7476277 51.0388729,13.7475781 51.0388513,13.7472699 51.038726,13.747131 51.0386506,13.7469329 51.0385052,13.7468562 51.0384284,13.7466683 51.0383483,13.7467998 51.038236,13.7473841 51.0380129,13.747838 51.0378277,13.7481801 51.0376558,13.7489728 51.0370285,13.7491313 51.0368016,13.7492665 51.0363477,13.7493166 51.0359389,13.7492966 51.0358087,13.7493888 51.0356942,13.7492867 51.0357016,13.7492855 51.0354359,13.7492829 51.034867,13.7492723 51.0348311,13.7492455 51.0347398,13.7493034 51.0346612,13.7491987 51.0346142,13.748866 51.034723,13.748791 51.034201,13.748335 51.034159,13.748294 51.034034,13.748205 51.033764,13.7488691 51.0333037,13.748962 51.033245,13.7486777 51.0332252,13.7483008 51.032683,13.7484397 51.0324582,13.7469913 51.0327817,13.7466998 51.0326205,13.7459997 51.0314852,13.7460996 51.0313569,13.745967 51.0314864,13.7449355 51.0317377,13.7447301 51.0316513,13.7446705 51.0318463,13.7420262 51.0323659,13.7419131 51.0322884,13.7418636 51.0322552,13.7416501 51.0321425,13.7415567 51.0317708,13.7414972 51.0314666,13.741484 51.0311492,13.741923 51.031003,13.7418649 51.030884,13.74209 51.0304134,13.7422077 51.0300143,13.7421975 51.0299222,13.742286 51.029835,13.7421463 51.0297533,13.7420951 51.0296254,13.7415933 51.0288452,13.7414906 51.0286855,13.7414437 51.0286127,13.7413482 51.0284642,13.7410545 51.0280777,13.7407158 51.0277229,13.7401513 51.0273842,13.7392803 51.0270293,13.7382744 51.0267844,13.737321 51.0267454,13.7365929 51.0267541,13.736556 51.026812,13.7364715 51.026754,13.7357088 51.0268017,13.7353967 51.02678,13.73534 51.02685,13.7352667 51.0267757,13.734907 51.0267324,13.734824 51.02679,13.7347684 51.0267064,13.7342093 51.0266674,13.73409 51.026725,13.7340359 51.0266283,13.7335072 51.0265633,13.733407 51.02663,13.7333208 51.0265373,13.7317087 51.0263813,13.7317173 51.0263119,13.73167 51.026241,13.7317563 51.0261602,13.7318473 51.0258395,13.7318647 51.0254971,13.73183 51.0253281,13.7317736 51.0252414,13.731663 51.025181,13.7316826 51.0251114,13.7310803 51.0247604,13.73095 51.024734)),((13.7368533 51.0470386,13.7368426 51.0471226,13.7368067 51.0472669,13.7368255 51.0473828,13.7369099 51.0474154,13.7376695 51.0474677,13.7382756 51.0474245,13.738513 51.0474297,13.7386105 51.0474065,13.738705 51.0473737,13.7385856 51.0473757,13.7385618 51.0473751,13.7385263 51.0473743,13.7384706 51.0473744,13.7383071 51.0473734,13.7383822 51.0473564,13.7390821 51.047287,13.7390933 51.047209,13.7390933 51.0471421,13.7368533 51.0470386)),((13.7367293 51.0470057,13.7346615 51.0466892,13.7347551 51.0468411,13.7347754 51.0470359,13.7347106 51.0471899,13.7356421 51.0472919,13.7366963 51.0474074,13.736705 51.047249,13.7367293 51.0470057)))";  boolean isPassed=new GeometryOperationValidator(TPSimplifierResult.getResult(geomStr,0.0057)).isAllTestsPassed();  assertTrue(!isPassed);}  }
class C{  public void validateDownloadedS3Files(String baseDirectory,String s3KeyPrefix,List<StorageFile> storageFiles) throws IllegalStateException {  File targetLocalDirectory=Paths.get(baseDirectory,s3KeyPrefix).toFile();  Collection<File> actualLocalFiles=FileUtils.listFiles(targetLocalDirectory,TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);  int storageFilesCount=CollectionUtils.isEmpty(storageFiles) ? 0 : storageFiles.size();  if (storageFilesCount != actualLocalFiles.size()) {    throw new IllegalStateException(String.format("Number of downloaded files does not match the storage unit information (expected %d files, actual %d files).",storageFiles.size(),actualLocalFiles.size()));  }  if (storageFilesCount > 0) {    for (    StorageFile storageFile : storageFiles) {      File localFile=Paths.get(baseDirectory,storageFile.getFilePath()).toFile();      if (!localFile.isFile()) {        throw new IllegalStateException(String.format("Downloaded \"%s\" file doesn't exist.",localFile));      }      if (localFile.length() != storageFile.getFileSizeBytes()) {        throw new IllegalStateException(String.format("Size of the downloaded \"%s\" S3 file does not match the expected value (expected %d bytes, actual %d bytes).",localFile.getPath(),storageFile.getFileSizeBytes(),localFile.length()));      }    }  }}  }
class C{  private void addDefaultFlows(){  if (this.sw.getOFFactory().getVersion().compareTo(OFVersion.OF_13) >= 0) {    OFFlowDeleteStrict deleteFlow=this.factory.buildFlowDeleteStrict().setTableId(TableId.ALL).setOutPort(OFPort.CONTROLLER).build();    this.sw.write(deleteFlow);    ArrayList<OFAction> actions=new ArrayList<OFAction>(1);    actions.add(factory.actions().output(OFPort.CONTROLLER,0xffFFffFF));    ArrayList<OFMessage> flows=new ArrayList<OFMessage>();    if (!this.sw.getTables().isEmpty()) {      short missCount=0;      for (      TableId tid : this.sw.getTables()) {        TableFeatures tf=this.sw.getTableFeatures(tid);        if (tf != null && (missCount < this.sw.getMaxTableForTableMissFlow().getValue())) {          for (          OFActionId aid : tf.getPropApplyActionsMiss().getActionIds()) {            if (aid.getType() == OFActionType.OUTPUT) {              OFFlowAdd defaultFlow=this.factory.buildFlowAdd().setTableId(tid).setPriority(0).setInstructions(Collections.singletonList((OFInstruction)this.factory.instructions().buildApplyActions().setActions(actions).build())).build();              flows.add(defaultFlow);              break;            }          }        }        missCount++;      }    } else {      short missCount=0;      for (short tid=0; tid < this.sw.getNumTables(); tid++, missCount++) {        if (missCount < this.sw.getMaxTableForTableMissFlow().getValue()) {          OFFlowAdd defaultFlow=this.factory.buildFlowAdd().setTableId(TableId.of(tid)).setPriority(0).setActions(actions).build();          flows.add(defaultFlow);        }      }    }    this.sw.write(flows);  }}  }
class C{  default QueueX<T> toQueueX(){  return QueueX.fromIterable(toList());}  }
class C{  public static void notifyTransfer(final TransactionObserver observer,final Account sender,final Account recipient,final Amount amount){  observer.notify(new BalanceTransferNotification(sender,recipient,amount));}  }
class C{  @Override public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  int currentBranchIndex=branchCounter++;  mv.visitInsn(DUP);  stack.pushInt(keys.length);  mv.visitIntInsn(NEWARRAY,10);  for (int i=0; i < keys.length; i++) {    mv.visitInsn(DUP);    stack.pushInt(i);    stack.pushInt(keys[i]);    mv.visitInsn(IASTORE);  }  mv.visitLdcInsn(className);  mv.visitLdcInsn(methName);  mv.visitLdcInsn(currentBranchIndex);  String IRGGI_V="(" + INT + INT_ARR+ STR+ STR+ INT+ ")"+ VOID;  mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[LOOKUPSWITCH],IRGGI_V);  super.visitLookupSwitchInsn(dflt,keys,labels);}  }
class C{  protected Node newNode(){  return new SVGOMFlowRegionBreakElement();}  }
class C{  public void remove(EventBean[] oldEvents){  if (oldEvents == null) {    return;  }  for (int i=0; i < oldEvents.length; i++) {    remove(oldEvents[i]);  }}  }
class C{  public boolean isBootLoader(){  return mState == DeviceState.BOOTLOADER;}  }
class C{  private void updateAndNotify(ZoneData zone,Pair<String,Boolean> weather){  ZoneAttributes attr=zone.getAttributes();  zone.getEntity().setThunder(weather.second());  String desc=weather.first();  String oldWeather=attr.get(WEATHER);  if (!Objects.equals(desc,oldWeather)) {    LOGGER.debug("Weather on " + attr.getZone().describe() + ": "+ desc+ (weather.second() ? ", thundering" : ""));    if (desc != null) {      attr.put(WEATHER,desc);    } else {      attr.remove(WEATHER);    }    attr.getZone().notifyOnlinePlayers();  }}  }
class C{  public String[] authenticateUser(final String userKey,String password) throws LoginException {  return realmImpl.authenticateUser(userKey,password);}  }
class C{  static final Map<String,List<String>> buildSchemaLocationMap(Map<String,List<String>> schemaLocationMap,final String schemaLocation){  if (null == schemaLocation) {    return schemaLocationMap;  }  if (null == schemaLocation || schemaLocation.isEmpty()) {    return schemaLocationMap;  }  final StringTokenizer st=new StringTokenizer(schemaLocation," \n\t\r");  while (st.hasMoreElements()) {    final String ns=st.nextToken();    final String loc=st.nextToken();    List<String> locs=schemaLocationMap.get(ns);    if (null == locs) {      locs=new ArrayList<>();      schemaLocationMap.put(ns,locs);    }    if (!locs.contains(loc)) {      locs.add(loc);    }  }  return schemaLocationMap;}  }
class C{  public static String worldPayNotify(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  Map<String,Object> parametersMap=UtilHttp.getParameterMap(request);  String orderId=request.getParameter("cartId");  for (  String name : parametersMap.keySet()) {    String value=request.getParameter(name);    Debug.logError("### Param: " + name + " => "+ value,module);  }  if (userLogin == null) {    String userLoginId="system";    try {      userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get UserLogin for: " + userLoginId + "; cannot continue",module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingAuthenticationUser",locale));      return "error";    }  }  GenericValue orderHeader=null;  if (UtilValidate.isNotEmpty(orderId)) {    try {      orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get the order header for order: " + orderId,module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingOrderHeader",locale));      return "error";    }  } else {    Debug.logError("WorldPay did not callback with a valid orderId!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.noValidOrderIdReturned",locale));    return "error";  }  if (orderHeader == null) {    Debug.logError("Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingOrderHeader",locale));    return "error";  }  String paymentStatus=request.getParameter("transStatus");  boolean okay=true;  boolean beganTransaction=false;  try {    beganTransaction=TransactionUtil.begin();    if ("Y".equals(paymentStatus)) {      okay=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);    } else     if ("C".equals(paymentStatus)) {      okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);    }    if (okay) {      okay=setPaymentPreferences(delegator,dispatcher,userLogin,orderId,request);    }  } catch (  Exception e) {    String errMsg="Error handling WorldPay notification";    Debug.logError(e,errMsg,module);    try {      TransactionUtil.rollback(beganTransaction,errMsg,e);    } catch (    GenericTransactionException gte2) {      Debug.logError(gte2,"Unable to rollback transaction",module);    }  } finally {    if (!okay) {      try {        TransactionUtil.rollback(beganTransaction,"Failure in processing WorldPay callback",null);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to rollback transaction",module);      }    } else {      try {        TransactionUtil.commit(beganTransaction);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to commit transaction",module);      }    }  }  if (okay) {    OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);    Map<String,Object> emailContext=UtilMisc.toMap("orderId",orderId,"userLogin",userLogin);    try {      dispatcher.runSync("sendOrderConfirmation",emailContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problems sending email confirmation",module);    }  }  return "success";}  }
class C{  public NSData(File file) throws IOException {  bytes=new byte[(int)file.length()];  RandomAccessFile raf=new RandomAccessFile(file,"r");  raf.read(bytes);  raf.close();}  }
class C{  public mxGraphHierarchyEdge(List<Object> edges){  this.edges=edges;}  }
class C{  public static byte[] copyBytes(byte[] source,byte[] target,int position){  byte[] newBytes=new byte[target.length + source.length];  for (int i=0, n=0, x=0; i < newBytes.length; i++) {    if (i < position || i > (position + source.length - 2)) {      newBytes[i]=target[n];      n++;    } else {      for (; x < source.length; x++) {        newBytes[i]=source[x];        if (source.length - 1 > x) {          i++;        }      }    }  }  return newBytes;}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (inlineIv) {    return (forEncryption) ? encryptBlockWithIV(in,inOff,out,outOff) : decryptBlockWithIV(in,inOff,out,outOff);  } else {    return (forEncryption) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);  }}  }
class C{  public void send(){  tcp.data();}  }
class C{  public void mouseClicked(MouseEvent e){  java.awt.Point p=e.getPoint();  centerViewAt(field.getWorldPosition(new Coord(p.x,p.y)));}  }
class C{  public static org.oscm.internal.types.exception.OperationNotPermittedException convertToUp(org.oscm.types.exceptions.OperationNotPermittedException oldEx){  return convertExceptionToUp(oldEx,org.oscm.internal.types.exception.OperationNotPermittedException.class);}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public static VirtualFile copy(Object requestor,@NotNull VirtualFile file,@NotNull VirtualFile toDir) throws IOException {  if (file.isDirectory()) {    VirtualFile newDir=toDir.createChildDirectory(requestor,file.getName());    copyDirectory(requestor,file,newDir,null);    return newDir;  } else {    return copyFile(requestor,file,toDir);  }}  }
class C{  public void addExtractor(Class<? extends LocalFeatureExtractor> localFeatureExtractorClass,LinkedList<Cluster[]> listOfCodebooks){  if ((!(listOfCodebooks.size() > 0)) || (listOfCodebooks == null))   throw new UnsupportedOperationException("List of codebooks cannot be empty or null!!");  addExtractor(new ExtractorItem(localFeatureExtractorClass),listOfCodebooks);}  }
class C{  public static org.oscm.internal.vo.VOGatheredEvent convertToUp(org.oscm.vo.VOGatheredEvent oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOGatheredEvent newVO=new org.oscm.internal.vo.VOGatheredEvent();  newVO.setOccurrenceTime(oldVO.getOccurrenceTime());  newVO.setActor(oldVO.getActor());  newVO.setEventId(oldVO.getEventId());  newVO.setMultiplier(oldVO.getMultiplier());  newVO.setUniqueId(oldVO.getUniqueId());  return newVO;}  }
class C{  public static void generateHIR(GenerationContext context){  new BC2IR(context).generateHIR();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private static double CallDoubleMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallDoubleMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Double,false);    return Reflection.unwrapDouble(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public String functionName(int fn){  if (fn == F_AND)   return "and";  if (fn == F_OR)   return "or";  if (fn == F_NOT)   return "not";  if (fn == F_NOR)   return "nor";  if (fn == F_NAND)   return "nand"; else   return "UNKNOWN FUNCTION";}  }
class C{  @Override public void onClose(){  mmainActivity.invalidateOptionsMenu();}  }
class C{  private StringSet findAllRolesToAdd(StorageOSUser user,Map<UserGroup,StringSet> userGroupsWithRoles){  StringSet rolesToAdd=null;  if (CollectionUtils.isEmpty(userGroupsWithRoles)) {    _log.error("Invalid user group and roles.");    return rolesToAdd;  }  rolesToAdd=new StringSet();  for (  Map.Entry<UserGroup,StringSet> userGroupEntry : userGroupsWithRoles.entrySet()) {    if (CollectionUtils.isEmpty(userGroupEntry.getValue())) {      continue;    }    if (matchUserAttributesToUserGroup(user,userGroupEntry.getKey())) {      rolesToAdd.addAll(userGroupEntry.getValue());      ;    }  }  return rolesToAdd;}  }
class C{  public void addImage(PDFPage page,ImageInfo info,Bitmap image){  addImageRecord(page,info,image,null);}  }
class C{  public void testBug79598() throws Exception {  Connection testConn=getConnectionWithProps("cachePrepStmts=true");  this.pstmt=testConn.prepareStatement("SELECT 'testBug79598'");  assertTrue(JDBC42PreparedStatement.class.isAssignableFrom(this.pstmt.getClass()));  this.pstmt.close();  this.pstmt=testConn.prepareStatement("SELECT 'testBug79598'");  assertTrue(JDBC42PreparedStatement.class.isAssignableFrom(this.pstmt.getClass()));  this.pstmt.close();  testConn.close();  testConn=getConnectionWithProps("cachePrepStmts=true,useServerPrepStmts=true");  this.pstmt=testConn.prepareStatement("SELECT 'testBug79598'");  assertTrue(JDBC42ServerPreparedStatement.class.isAssignableFrom(this.pstmt.getClass()));  this.pstmt.close();  this.pstmt=testConn.prepareStatement("SELECT 'testBug79598'");  assertTrue(JDBC42ServerPreparedStatement.class.isAssignableFrom(this.pstmt.getClass()));  this.pstmt.close();  testConn.close();}  }
class C{  public static void socketReadEnd(Object context,InetAddress address,int port,int timeout,long bytesRead){  IoTraceHandler.socketReadEnd(context,address,port,timeout,bytesRead);}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  @Override public void exportGroupCreate(URI storageURI,URI exportGroupURI,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,String token) throws Exception {  ExportOrchestrationTask taskCompleter=null;  try {    BlockStorageDevice device=getDevice();    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);    taskCompleter=new ExportOrchestrationTask(exportGroupURI,token);    if (initiatorURIs != null && !initiatorURIs.isEmpty()) {      _log.info("export_create: initiator list non-empty");      Workflow workflow=_workflowService.getNewWorkflow(MaskingWorkflowEntryPoints.getInstance(),"exportGroupCreate",true,token);      boolean createdSteps=determineExportGroupCreateSteps(workflow,null,device,storage,exportGroup,initiatorURIs,volumeMap,false,token);      String zoningStep=generateDeviceSpecificZoningCreateWorkflow(workflow,EXPORT_GROUP_MASKING_TASK,exportGroup,null,volumeMap);      if (createdSteps && null != zoningStep) {        String successMessage=String.format("ExportGroup successfully applied for StorageArray %s",storage.getLabel());        workflow.executePlan(taskCompleter,successMessage);      }    } else {      _log.info("export_create: initiator list");      taskCompleter.ready(_dbClient);    }  } catch (  DeviceControllerException dex) {    if (taskCompleter != null) {      taskCompleter.error(_dbClient,DeviceControllerException.errors.vmaxExportGroupCreateError(dex.getMessage()));    }  }catch (  Exception ex) {    _log.error("ExportGroup Orchestration failed.",ex);    if (taskCompleter != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(ex.getMessage(),ex);      taskCompleter.error(_dbClient,serviceError);    }  }}  }
class C{  public ToHitData toHit(IGame game,Targetable target,Coords src,int elevation,Coords priorSrc,EntityMovementType movement){  final Entity ae=getEntity(game);  if (ae == null) {    throw new IllegalStateException("Attacker is null");  }  if (target == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is null");  }  if (!(ae instanceof Aero)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is not Aero");  }  if (!(target instanceof Aero)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is not Aero");  }  if (ae instanceof FighterSquadron || target instanceof FighterSquadron) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"fighter squadrons may not ram nor be the target of a ramming attc");  }  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;  } else {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Invalid Target");  }  if (!game.getOptions().booleanOption("friendly_fire")) {    if (target.getTargetType() == Targetable.TYPE_ENTITY && (((Entity)target).getOwnerId() == ae.getOwnerId() || (((Entity)target).getOwner().getTeam() != IPlayer.TEAM_NONE && ae.getOwner().getTeam() != IPlayer.TEAM_NONE && ae.getOwner().getTeam() == ((Entity)target).getOwner().getTeam())))     return new ToHitData(TargetRoll.IMPOSSIBLE,"A friendly unit can never be the target of a direct attack.");  }  IHex attHex=game.getBoard().getHex(src);  IHex targHex=game.getBoard().getHex(target.getPosition());  final int attackerElevation=elevation + attHex.getLevel();  final int targetElevation=target.getElevation() + targHex.getLevel();  ToHitData toHit=null;  if (ae.equals(te)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't target yourself");  }  if (Entity.NONE != te.getTransportId()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is a passenger.");  }  if (src.distance(target.getPosition()) > 0) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in range");  }  if (attackerElevation != targetElevation) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target must be at the same elevation level");  }  if (te.isRamming()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is already making a ramming attack");  }  if (!te.isDone()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target must be done with movement");  }  int base=6 + te.getCrew().getPiloting() - ae.getCrew().getPiloting();  toHit=new ToHitData(base,"base");  Aero a=(Aero)ae;  if (target instanceof SpaceStation) {    toHit.addModifier(-1,"target is a space station");  } else   if (target instanceof Warship) {    toHit.addModifier(+1,"target is a warship");  } else   if (target instanceof Jumpship) {    toHit.addModifier(+0,"target is a jumpship");  } else   if (target instanceof Dropship) {    toHit.addModifier(+2,"target is a dropship");  } else {    toHit.addModifier(+4,"target is a fighter/small craft");  }  if (a instanceof SpaceStation) {    toHit.addModifier(+0,"attacker is a space station");  } else   if (a instanceof Warship) {    toHit.addModifier(+1,"attacker is a warship");  } else   if (a instanceof Jumpship) {    toHit.addModifier(+0,"attacker is a jumpship");  } else   if (a instanceof Dropship) {    toHit.addModifier(-1,"attacker is a dropship");  } else {    toHit.addModifier(-2,"attacker is a fighter/small craft");  }  if (target.isImmobile() || te.getWalkMP() == 0)   toHit.addModifier(-2,"target cannot spend thrust");  if (a.getSensorHits() > 0)   toHit.addModifier(+1,"sensor damage");  int avionics=a.getAvionicsHits();  if (avionics > 3)   avionics=3;  if (avionics > 0)   toHit.addModifier(avionics,"avionics damage");  if (target.getTargetType() == Targetable.TYPE_ENTITY && te.isEvading()) {    toHit.addModifier(te.getEvasionBonus(),"target is evading");  }  toHit.setSideTable(te.sideTable(priorSrc));  toHit.setHitTable(ToHitData.HIT_NORMAL);  return toHit;}  }
class C{  private boolean checkUpdated(FCEndpoint existing,FCEndpoint current){  boolean updated=false;  if (existing.getInactive() == true) {    existing.setInactive(false);    updated=true;  }  if (checkAttributeChanged(existing.getRemotePortName(),current.getRemotePortName())) {    existing.setRemotePortName(current.getRemotePortName());    updated=true;  }  if (checkAttributeChanged(existing.getRemoteNodeName(),current.getRemoteNodeName())) {    existing.setRemoteNodeName(current.getRemoteNodeName());    updated=true;  }  if (checkAttributeChanged(existing.getRemotePortAlias(),current.getRemotePortAlias())) {    existing.setRemotePortAlias(current.getRemotePortAlias() == null ? "" : current.getRemotePortAlias());    updated=true;  }  if (checkAttributeChanged(existing.getFabricId(),current.getFabricId())) {    existing.setFabricId(current.getFabricId());    updated=true;  }  if (checkAttributeChanged(existing.getFcid(),current.getFcid())) {    existing.setFcid(current.getFcid());    updated=true;  }  if (checkAttributeChanged(existing.getSwitchInterface(),current.getSwitchInterface())) {    existing.setSwitchInterface(current.getSwitchInterface());    updated=true;  }  if (checkAttributeChanged(existing.getSwitchName(),current.getSwitchName())) {    existing.setSwitchName(current.getSwitchName());    updated=true;  }  if (checkAttributeChanged(existing.getSwitchPortName(),current.getSwitchPortName())) {    existing.setSwitchPortName(current.getSwitchPortName());    updated=true;  }  if (checkAttributeChanged(existing.getFabricWwn(),current.getFabricWwn())) {    existing.setFabricWwn(current.getFabricWwn());    updated=true;  }  return updated;}  }
class C{  public static void debug(String message){  if (debug) {    logger.info(message);  }}  }
class C{  public int name(int i){  return ByteArray.readU16bit(info,i * 4 + 1);}  }
class C{  public GZipInputStreamRandomAccess(SeekableInputStream is,boolean loadMetadata) throws IOException {  super(new InputStreamConverter(is,loadMetadata));}  }
class C{  public void testSetF8(){  boolean f8=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF8(f8);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup2 needs to be implemented if invoked");}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  if (systemId == null) {    InputSource result;    try {      result=super.resolveEntity(publicId,null);    } catch (    IOException|SAXException e) {      throw new SAXException(e);    }    return result;  }  String grammarName=systemId.substring(systemId.lastIndexOf('/') + 1);  String entityURL=entities.get(grammarName);  InputSource source;  if (entityURL == null) {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,"Unknown entity, deferring to superclass.");    }    try {      source=super.resolveEntity(publicId,systemId);    } catch (    IOException|SAXException e) {      throw new SAXException(e);    }  } else {    try {      source=new InputSource(new URL(entityURL).openStream());    } catch (    Exception e) {      if (LOGGER.isLoggable(Level.WARNING)) {        LOGGER.log(Level.WARNING,"jsf.config.cannot_create_inputsource",entityURL);      }      source=null;    }  }  if (source != null) {    source.setSystemId(entityURL);    if (publicId != null) {      source.setPublicId(publicId);    }  }  return source;}  }
class C{  @Override public boolean hasProperty(String fieldName,String value){  String[] fields=doc.getValues(fieldName);  if (fields != null) {    for (    String field : fields) {      if (value.equals(field)) {        return true;      }    }  }  return false;}  }
class C{  public ConfigVariationsTestSuiteBuilder withBasicCacheParams(){  cacheParams=ConfigVariations.cacheBasicSet();  backups=1;  return this;}  }
class C{  public TemplateStore(ContextTypeRegistry registry,String key){  this(key);  fRegistry=registry;}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final BlockDifficulty difficulty){  serializer.writeLong(label,difficulty.getRaw());}  }
class C{  @Override public void sort(Comparator<? super E> cmp){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:21.148 -0400",hash_original_method="0D3170F69C4BA9ADEC94C90304C41ED9",hash_generated_method="21573AF4568D3A5F45FBD567D5AD3B55") public boolean containsAll(Collection<?> collection){  return MapCollections.containsAllHelper(this,collection);}  }
class C{  protected void doFeatureLinkActivated(KMLAbstractFeature feature,String directive){  if (FLY_TO.equals(directive) || BALLOON_FLY_TO.equals(directive)) {    this.moveToFeature(feature);  }  if (BALLOON.equals(directive) || BALLOON_FLY_TO.equals(directive)) {    this.showBalloon(feature);  }}  }
class C{  protected void drawErrorBars(DrawingContext context,Shape point,Row row,int rowIndex,int col,int colErrorTop,int colErrorBottom,Axis axis,AxisRenderer axisRenderer){  if (axisRenderer == null) {    return;  }  if (colErrorTop < 0 || colErrorTop >= row.size() || !row.isColumnNumeric(colErrorTop) || colErrorBottom < 0 || colErrorBottom >= row.size() || !row.isColumnNumeric(colErrorBottom)) {    return;  }  Number value=(Number)row.get(col);  Number errorTop=(Number)row.get(colErrorTop);  Number errorBottom=(Number)row.get(colErrorBottom);  if (!MathUtils.isCalculatable(value) || !MathUtils.isCalculatable(errorTop) || !MathUtils.isCalculatable(errorBottom)) {    return;  }  Graphics2D graphics=context.getGraphics();  AffineTransform txOld=graphics.getTransform();  PointND<Double> pointValue=axisRenderer.getPosition(axis,value,true,false);  PointND<Double> pointTop=axisRenderer.getPosition(axis,value.doubleValue() + errorTop.doubleValue(),true,false);  PointND<Double> pointBottom=axisRenderer.getPosition(axis,value.doubleValue() - errorBottom.doubleValue(),true,false);  if (pointValue == null || pointTop == null || pointBottom == null) {    return;  }  double posY=pointValue.get(PointND.Y);  double posYTop=pointTop.get(PointND.Y) - posY;  double posYBottom=pointBottom.get(PointND.Y) - posY;  Line2D errorBar=new Line2D.Double(0.0,posYTop,0.0,posYBottom);  ColorMapper colors=getErrorColor();  Paint errorPaint=colors.get(rowIndex);  Stroke errorStroke=getErrorStroke();  GraphicsUtils.drawPaintedShape(graphics,errorBar,errorPaint,null,errorStroke);  Shape endShape=getErrorShape();  graphics.translate(0.0,posYTop);  Stroke endShapeStroke=new BasicStroke(1f);  GraphicsUtils.drawPaintedShape(graphics,endShape,errorPaint,null,endShapeStroke);  graphics.setTransform(txOld);  graphics.translate(0.0,posYBottom);  GraphicsUtils.drawPaintedShape(graphics,endShape,errorPaint,null,endShapeStroke);  graphics.setTransform(txOld);}  }
class C{  public void clearAll(){  int rowCount=this.getRowCount();  for (int i=0; i < rowCount; i++) {    ((TableModel)this.getModel()).deleteRow(0);  }}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public void increment(double coord,int[] data){  int[] existing=get(coord);  for (int i=0; i < existing.length; i++) {    existing[i]+=data[i];  }}  }
class C{  protected BooleanVal(boolean b){  this.b=b;}  }
class C{  public Builder<K,V> keyType(DataType keyType){  this.keyType=keyType;  return this;}  }
class C{  public boolean canClip(){  return !isEmpty() && mRect != null;}  }
class C{  @Ignore @Test public void test_DR_PGS_4Nodes_Put_CLOSE4NODESCACHE_RECREATE_PUT_ValidateReceiver() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    createCacheInVMs(nyPort,vm2,vm3);    createReceiverInVMs(vm2,vm3);    createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    startSenderInVMs("ln",vm4,vm5,vm6,vm7);    vm2.invoke(null);    vm3.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm2.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    startSenderInVMs("ln",vm4,vm5,vm6,vm7);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm2.invoke(null);    vm3.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  @CalledByNative protected void requestUpdate(){  assert sThreadCheck.calledOnValidThread();}  }
class C{  @Override public String toString(){  return "CUfunction[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public void deleteVirtualVolume(String virtualVolumeName,boolean unclaimVolumes,boolean retryOnDismantleFailure) throws VPlexApiException {  s_logger.info("Request for virtual volume deletion on VPlex at {}",_baseURI);  _virtualVolumeMgr.deleteVirtualVolume(virtualVolumeName,unclaimVolumes,retryOnDismantleFailure);}  }
class C{  protected void sequence_Model(ISerializationContext context,Model semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public SWFVectors tagDefineFont(int id,int numGlyphs) throws IOException {  if (tags != null) {    return tags.tagDefineFont(id,numGlyphs);  }  return null;}  }
class C{  protected void createExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  if (validate(mapping,form,request,response) == false) {    setReturnActionFordward(request,mapping.findForward("create-failed"));    return;  }  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  CamposDatoForm camposDatoForm=(CamposDatoForm)form;  String guid=camposDatoForm.getGuid();  CampoDatoVO campoDatoVO=camposDatoForm.populate(new CampoDatoVO());  ActionErrors errors=comprobarDuplicados(descripcionService,request,null,campoDatoVO,guid);  if (errors != null && !errors.isEmpty()) {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("create-failed"));    return;  } else {    campoDatoVO=descripcionService.createCampoDato(campoDatoVO);  }  goReturnPointExecuteLogic(mapping,form,request,response);}  }
class C{  public boolean match(NumberLiteral node,Object other){  if (!(other instanceof NumberLiteral)) {    return false;  }  NumberLiteral o=(NumberLiteral)other;  return safeEquals(node.getToken(),o.getToken());}  }
class C{  public static void register(){  Potion.setPotionBrewer(new Brewer());  for (  Impl impl : Impl.values()) {    registerPotionEffectType(new GlowPotionEffect(impl));  }  stopAcceptingRegistrations();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_TYPE_1__VERBISTY_1:    return getVerbisty_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean canReach(TransportAddress dst){  if (getTransport() != dst.getTransport())   return false;  if (isIPv6() != dst.isIPv6())   return false;  if (isIPv6()) {    Inet6Address srcAddr=(Inet6Address)getAddress();    Inet6Address dstAddr=(Inet6Address)dst.getAddress();    if (srcAddr.isLinkLocalAddress() != dstAddr.isLinkLocalAddress()) {      return Boolean.getBoolean(StackProperties.ALLOW_LINK_TO_GLOBAL_REACHABILITY);    }  }  return true;}  }
class C{  public static String cache(String s){  if (!SysProperties.OBJECT_CACHE) {    return s;  }  if (s == null) {    return s;  } else   if (s.length() == 0) {    return "";  }  int hash=s.hashCode();  String[] cache=getCache();  if (cache != null) {    int index=hash & (SysProperties.OBJECT_CACHE_SIZE - 1);    String cached=cache[index];    if (cached != null) {      if (s.equals(cached)) {        return cached;      }    }    cache[index]=s;  }  return s;}  }
class C{  @SuppressLint("InlinedApi") public static boolean isAndroidTv(Context context){  return context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK);}  }
class C{  public boolean hasScope(){  return getScope() != null;}  }
class C{  public OrPredicate(Predicate p1,Predicate p2){  super(p1,p2);}  }
class C{  public TechnicalServiceActiveException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  protected boolean urlIsValid(String sitemapBaseUrl,String testUrl){  boolean ret=false;  if (sitemapBaseUrl != null && sitemapBaseUrl.length() <= testUrl.length()) {    String u=testUrl.substring(0,sitemapBaseUrl.length());    ret=sitemapBaseUrl.equals(u);  }  return ret;}  }
class C{  public static void copyBytes(InputStream in,OutputStream out,int bufferSize,boolean close) throws IOException {  BufferedInputStream from=new BufferedInputStream(in);  BufferedOutputStream to=new BufferedOutputStream(out);  byte[] bytes=new byte[bufferSize];  int size;  while ((size=from.read(bytes,0,bufferSize)) >= 0) {    to.write(bytes,0,size);  }  if (close) {    from.close();    to.flush();    to.close();  }}  }
class C{  public static float bytesToFloat(byte[] bytes,int off){  return Float.intBitsToFloat(bytesToInt(bytes,off));}  }
class C{  public static void applyParallaxEffect(View view,boolean recursive,int offsetPixels,float startParallaxFactor,float parallaxInterval){  if (recursive)   applyParallaxEffectRecursively(view,offsetPixels,startParallaxFactor,parallaxInterval,0); else   applyParallaxEffectToImmediateChildren(view,offsetPixels,startParallaxFactor,parallaxInterval);}  }
class C{  public static <T>T opaque(T value){  return value;}  }
class C{  public int numLeaves(){  if (m_isLeaf) {    return 1;  }  int numLeaves=0;  for (  LMTNode m_son : m_sons) {    numLeaves+=m_son.numLeaves();  }  return numLeaves;}  }
class C{  private CRegisterTrackingHelper(){}  }
class C{  public int hashCode(){  return hashCode;}  }
class C{  public double computeAverageLocalOfObservationsWithCorrection() throws Exception {  double te=0.0;  if (debug) {    MatrixUtils.printMatrix(System.out,destNextPastSourceVectors);  }  for (int b=0; b < totalObservations; b++) {    int countPast=mvkeDestinationPast.getCount(destPastVectors[b],b);    int countNextPast=mvkeDestinationNextPast.getCount(destNextPastVectors[b],b);    int countPastSource=mvkeDestinationPastSource.getCount(destPastSourceVectors[b],b);    int countNextPastSource=mvkeDestinationNextPastSource.getCount(destNextPastSourceVectors[b],b);    double cont=0.0;    if (countNextPastSource > 0) {      cont=MathsUtils.digamma(countNextPastSource) - MathsUtils.digamma(countPastSource) - MathsUtils.digamma(countNextPast) + MathsUtils.digamma(countPast);    }    te+=cont;  }  lastAverage=te / (double)totalObservations / Math.log(2.0);  return lastAverage;}  }
class C{  @Override public void unbind(final ShaderProgram shader){  unbind(shader,null);}  }
class C{  @Override public int compareTo(Value o){  return hashCode() - o.hashCode();}  }
class C{  public void readExifData(){  this.aperture=inFile.getAttribute(ExifInterface.TAG_APERTURE);  this.datetime=inFile.getAttribute(ExifInterface.TAG_DATETIME);  this.exposureTime=inFile.getAttribute(ExifInterface.TAG_EXPOSURE_TIME);  this.flash=inFile.getAttribute(ExifInterface.TAG_FLASH);  this.focalLength=inFile.getAttribute(ExifInterface.TAG_FOCAL_LENGTH);  this.gpsAltitude=inFile.getAttribute(ExifInterface.TAG_GPS_ALTITUDE);  this.gpsAltitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_ALTITUDE_REF);  this.gpsDateStamp=inFile.getAttribute(ExifInterface.TAG_GPS_DATESTAMP);  this.gpsLatitude=inFile.getAttribute(ExifInterface.TAG_GPS_LATITUDE);  this.gpsLatitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF);  this.gpsLongitude=inFile.getAttribute(ExifInterface.TAG_GPS_LONGITUDE);  this.gpsLongitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF);  this.gpsProcessingMethod=inFile.getAttribute(ExifInterface.TAG_GPS_PROCESSING_METHOD);  this.gpsTimestamp=inFile.getAttribute(ExifInterface.TAG_GPS_TIMESTAMP);  this.iso=inFile.getAttribute(ExifInterface.TAG_ISO);  this.make=inFile.getAttribute(ExifInterface.TAG_MAKE);  this.model=inFile.getAttribute(ExifInterface.TAG_MODEL);  this.orientation=inFile.getAttribute(ExifInterface.TAG_ORIENTATION);  this.whiteBalance=inFile.getAttribute(ExifInterface.TAG_WHITE_BALANCE);}  }
class C{  public void line(int Ax,int Ay,final int Bx,final int By,final Long colorLine,final int intensityLine,final Long colorDot,final int intensityDot,final int dotDist,final int dotPos,final int dotRadius,final boolean dotFilled){  int dX=Math.abs(Bx - Ax);  int dY=Math.abs(By - Ay);  final int Xincr=(Ax > Bx) ? -1 : 1;  final int Yincr=(Ay > By) ? -1 : 1;  int dotc=0;  if (dX >= dY) {    final int dPr=dY << 1;    final int dPru=dPr - (dX << 1);    int P=dPr - dX;    for (; dX >= 0; dX--) {      if (colorLine != null)       this.setColor(colorLine);      plot(Ax,Ay,intensityLine);      if (dotc == dotPos) {        if (colorDot != null)         this.setColor(colorDot);        if (dotRadius == 0)         this.plot(Ax,Ay,intensityDot); else         if (dotRadius > 0)         dot(Ax,Ay,dotRadius,dotFilled,intensityDot);      }      dotc++;      if (dotc == dotDist)       dotc=0;      if (P > 0) {        Ax+=Xincr;        Ay+=Yincr;        P+=dPru;      } else {        Ax+=Xincr;        P+=dPr;      }    }  } else {    final int dPr=dX << 1;    final int dPru=dPr - (dY << 1);    int P=dPr - dY;    for (; dY >= 0; dY--) {      if (colorLine != null)       this.setColor(colorLine);      plot(Ax,Ay,intensityLine);      if (dotc == dotPos) {        if (colorDot != null)         this.setColor(colorDot);        if (dotRadius == 0)         this.plot(Ax,Ay,intensityDot); else         if (dotRadius > 0)         dot(Ax,Ay,dotRadius,dotFilled,intensityDot);      }      dotc++;      if (dotc == dotDist)       dotc=0;      if (P > 0) {        Ax+=Xincr;        Ay+=Yincr;        P+=dPru;      } else {        Ay+=Yincr;        P+=dPr;      }    }  }}  }
class C{  public byte mustCatchException(TypeReference cand){  boolean seenMaybe=false;  byte t;  for (  TypeOperand exceptionType : exceptionTypes) {    t=ClassLoaderProxy.includesType(exceptionType.getTypeRef(),cand);    if (t == YES)     return YES;    seenMaybe|=(t == MAYBE);  }  if (seenMaybe) {    return MAYBE;  } else {    return NO;  }}  }
class C{  public WhereBuilder and(WhereBuilder where){  String condition=whereItems.size() == 0 ? " " : "AND ";  return expr(condition + "(" + where.toString()+ ")");}  }
class C{  @After public void after() throws SQLException {  Connection connection=null;  Statement statement=null;  try {    connection=getNewConnection(true);    statement=connection.createStatement();    statement.executeQuery("DROP TABLE IF EXISTS replica_host_status");  }  finally {    if (statement != null) {      statement.close();    }    if (connection != null) {      connection.close();    }  }}  }
class C{  public void ignoreUnknownElements(final String pattern){  ignoreUnknownElements(Pattern.compile(pattern));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchild.class,args);}  }
class C{  public Solution(INode initial,INode goal,IDebugSearch debug){  this.initial=initial;  this.goal=goal;  this.debug=debug;  solve();  this.success=true;}  }
class C{  @Override public void changeEvent(final IChangeRecord record){  if (record.getStatement().getSubject() instanceof BNode) {    return;  }  if (record.getChangeAction() == ChangeAction.REMOVED) {synchronized (removes) {      removes.add(record);    }  } else {    notify(record);  }}  }
class C{  public static Result testClassifier(MultiLabelClassifier h,Instances D_test) throws Exception {  int L=D_test.classIndex();  Result result=new Result(D_test.numInstances(),L);  if (h.getDebug())   System.out.print(":- Evaluate ");  for (int i=0, c=0; i < D_test.numInstances(); i++) {    if (h.getDebug()) {      int t=i * 50 / D_test.numInstances();      if (t > c) {        System.out.print("#");        c=t;      }    }    Instance x=(Instance)(D_test.instance(i)).copy();    for (int v=0; v < D_test.classIndex(); v++)     x.setValue(v,0.0);    double y[]=h.distributionForInstance(x);    if (h instanceof MultiTargetClassifier)     y=Arrays.copyOf(y,L);    result.addResult(y,D_test.instance(i));  }  if (h.getDebug())   System.out.println(":-");  return result;}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!getItemVisible(row,column)) {    return;  }  Number value=dataset.getValue(row,column);  if (value == null) {    return;  }  PlotOrientation orientation=plot.getOrientation();  double x1s=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  double x1e=2 * x1 - x1s;  double y1=rangeAxis.valueToJava2D(value.doubleValue(),dataArea,plot.getRangeAxisEdge());  g2.setPaint(getItemPaint(row,column));  g2.setStroke(getItemStroke(row,column));  if (column != 0) {    Number previousValue=dataset.getValue(row,column - 1);    if (previousValue != null) {      double previous=previousValue.doubleValue();      double x0s=domainAxis.getCategoryStart(column - 1,getColumnCount(),dataArea,plot.getDomainAxisEdge());      double x0=domainAxis.getCategoryMiddle(column - 1,getColumnCount(),dataArea,plot.getDomainAxisEdge());      double x0e=2 * x0 - x0s;      double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());      if (getStagger()) {        int xStagger=row * STAGGER_WIDTH;        if (xStagger > (x1s - x0e)) {          xStagger=(int)(x1s - x0e);        }        x1s=x0e + xStagger;      }      drawLine(g2,(State)state,orientation,x0e,y0,x1s,y0);      drawLine(g2,(State)state,orientation,x1s,y0,x1s,y1);    }  }  drawLine(g2,(State)state,orientation,x1s,y1,x1e,y1);  if (isItemLabelVisible(row,column)) {    drawItemLabel(g2,orientation,dataset,row,column,x1,y1,(value.doubleValue() < 0.0));  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    Rectangle2D hotspot=new Rectangle2D.Double();    if (orientation == PlotOrientation.VERTICAL) {      hotspot.setRect(x1s,y1,x1e - x1s,4.0);    } else {      hotspot.setRect(y1 - 2.0,x1s,4.0,x1e - x1s);    }    addItemEntity(entities,dataset,row,column,hotspot);  }}  }
class C{  public void testWrongNestedNotPublic() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",NestedNotPublic.class.getMethod("method"));  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("not public"));}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("slotID: ");  buffer.append(String.valueOf(slotID));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("state: ");  buffer.append(Functions.sessionStateToString(state));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("flags: ");  buffer.append(Functions.sessionInfoFlagsToString(flags));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulDeviceError: ");  buffer.append(Functions.toHexString(ulDeviceError));  return buffer.toString();}  }
class C{  public FilteringAcknowledgingMessageListenerAdapter(AcknowledgingMessageListener<K,V> delegate,RecordFilterStrategy<K,V> recordFilterStrategy,boolean ackDiscarded){  super(delegate,recordFilterStrategy);  this.ackDiscarded=ackDiscarded;}  }
class C{  public static void main(String args[]){  try {    realMain(args);  } catch (  Exception ex) {    System.err.println(ex.getMessage());    System.exit(-1);  }}  }
class C{  public static double decodeLongitude(byte[] src,int offset){  return decodeLongitude(NumericUtils.sortableBytesToInt(src,offset));}  }
class C{  private void switchView(){  if (isCurrentModeStream()) {    togglePrivateStreamBtn.setImageDrawable(ContextCompat.getDrawable(this,R.drawable.ic_action_bullhorn));    tempStreamSave=topicActv.getText().toString();    topicActv.setText(null);    topicActv.setHint(R.string.hint_person);    topicActv.setAdapter(emailActvAdapter);    streamActv.setVisibility(View.GONE);    textView.setVisibility(View.GONE);  } else {    topicActv.setText(tempStreamSave);    togglePrivateStreamBtn.setImageDrawable(ContextCompat.getDrawable(this,R.drawable.ic_action_person));    streamActv.setEnabled(true);    topicActv.setHint(R.string.hint_subject);    streamActv.setHint(R.string.hint_stream);    streamActv.setVisibility(View.VISIBLE);    textView.setVisibility(View.VISIBLE);    topicActv.setVisibility(View.VISIBLE);    streamActv.setAdapter(streamActvAdapter);    topicActv.setAdapter(subjectActvAdapter);  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%c' in array position %d",source[i],i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void loadTable(ResultSet rs){  int no=0;  int row=0;  int col=0;  Object data=null;  int rsColIndex=0;  int rsColOffset=1;  Class columnClass;  if (getLayout() == null) {    throw new UnsupportedOperationException("Layout not defined");  }  clearTable();  try {    while (rs.next()) {      row=getItemCount();      setRowCount(row + 1);      rsColOffset=1;      no++;      for (col=0; col < m_layout.length; col++) {        data=null;        columnClass=m_layout[col].getColClass();        rsColIndex=col + rsColOffset;        if (isColumnClassMismatch(col,columnClass)) {          throw new ApplicationException("Cannot enter a " + columnClass.getName() + " in column "+ col+ ". "+ "An object of type "+ m_modelHeaderClass.get(col).getSimpleName()+ " was expected.");        }        if (columnClass == IDColumn.class && !m_layout[col].getColSQL().equals("'Row' AS \"Row\"")) {          data=new IDColumn(rs.getInt(rsColIndex));        } else         if (columnClass == IDColumn.class && m_layout[col].getColSQL().equals("'Row' AS \"Row\"")) {          data=new IDColumn(no);        } else         if (columnClass == Boolean.class) {          data=rs.getString(rsColIndex) == null ? new Boolean(false) : new Boolean(rs.getString(rsColIndex).equals("Y"));        } else         if (columnClass == Timestamp.class) {          data=rs.getTimestamp(rsColIndex);        } else         if (columnClass == BigDecimal.class) {          data=rs.getBigDecimal(rsColIndex);        } else         if (columnClass == Double.class) {          data=new Double(rs.getDouble(rsColIndex));        } else         if (columnClass == Integer.class) {          data=new Integer(rs.getInt(rsColIndex));        } else         if (columnClass == KeyNamePair.class) {          String display=rs.getString(rsColIndex);          int key=rs.getInt(rsColIndex + 1);          data=new KeyNamePair(key,display);          rsColOffset++;        } else {          String s=rs.getString(rsColIndex);          if (s != null) {            data=s.trim();          } else {            data=null;          }        }        getModel().setDataAt(data,row,col);      }    }  } catch (  SQLException exception) {    logger.log(Level.SEVERE,"",exception);  }  autoSize();  if (getShowTotals())   addTotals(m_layout);  this.repaint();  logger.config("Row(rs)=" + getRowCount());  return;}  }
class C{  public Boolean isSupportsSlaveDisk(){  return supportsSlaveDisk;}  }
class C{  public void clearLearnedTable(IOFSwitch sw){  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (swMap != null) {    swMap.clear();  }}  }
class C{  public PiePlot(PieDataset dataset){  super();  this.dataset=dataset;  if (dataset != null) {    dataset.addChangeListener(this);  }  this.pieIndex=0;  this.interiorGap=DEFAULT_INTERIOR_GAP;  this.circular=true;  this.startAngle=DEFAULT_START_ANGLE;  this.direction=Rotation.CLOCKWISE;  this.minimumArcAngleToDraw=DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;  this.sectionPaint=null;  this.sectionPaintMap=new PaintMap();  this.baseSectionPaint=Color.gray;  this.autoPopulateSectionPaint=true;  this.sectionOutlinesVisible=true;  this.sectionOutlinePaint=null;  this.sectionOutlinePaintMap=new PaintMap();  this.baseSectionOutlinePaint=DEFAULT_OUTLINE_PAINT;  this.autoPopulateSectionOutlinePaint=false;  this.sectionOutlineStroke=null;  this.sectionOutlineStrokeMap=new StrokeMap();  this.baseSectionOutlineStroke=DEFAULT_OUTLINE_STROKE;  this.autoPopulateSectionOutlineStroke=false;  this.explodePercentages=new TreeMap();  this.labelGenerator=new StandardPieSectionLabelGenerator();  this.labelFont=DEFAULT_LABEL_FONT;  this.labelPaint=DEFAULT_LABEL_PAINT;  this.labelBackgroundPaint=DEFAULT_LABEL_BACKGROUND_PAINT;  this.labelOutlinePaint=DEFAULT_LABEL_OUTLINE_PAINT;  this.labelOutlineStroke=DEFAULT_LABEL_OUTLINE_STROKE;  this.labelShadowPaint=DEFAULT_LABEL_SHADOW_PAINT;  this.labelLinksVisible=true;  this.labelDistributor=new PieLabelDistributor(0);  this.simpleLabels=false;  this.simpleLabelOffset=new RectangleInsets(UnitType.RELATIVE,0.18,0.18,0.18,0.18);  this.labelPadding=new RectangleInsets(2,2,2,2);  this.toolTipGenerator=null;  this.urlGenerator=null;  this.legendLabelGenerator=new StandardPieSectionLabelGenerator();  this.legendLabelToolTipGenerator=null;  this.legendLabelURLGenerator=null;  this.legendItemShape=Plot.DEFAULT_LEGEND_ITEM_CIRCLE;  this.ignoreNullValues=false;  this.ignoreZeroValues=false;  this.shadowGenerator=null;}  }
class C{  private void printCoords(){  for (int i=0; i < x[GLYPH_ZONE].length; i++) {    System.out.print(i + "\t" + x[GLYPH_ZONE][i]+ '\t'+ y[GLYPH_ZONE][i]+ '\t'+ x[ORIGINAL + GLYPH_ZONE][i]+ '\t'+ y[ORIGINAL + GLYPH_ZONE][i]);    System.out.println("");    if (contour[GLYPH_ZONE][i]) {      System.out.println();    }  }  System.out.println("");  System.out.println("");}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public SimpleStringProperty keyProperty(){  return this.key;}  }
class C{  public static void relativeMove(final float new_x,final float new_y,final TextState currentTextState){  final float[][] temp=new float[3][3];  currentTextState.Tm=currentTextState.getTMAtLineStart();  temp[0][0]=1;  temp[0][1]=0;  temp[0][2]=0;  temp[1][0]=0;  temp[1][1]=1;  temp[1][2]=0;  temp[2][0]=new_x;  temp[2][1]=new_y;  temp[2][2]=1;  currentTextState.Tm=Matrix.multiply(temp,currentTextState.Tm);  currentTextState.setTMAtLineStart();}  }
class C{  public static Quantity createQuantity(JCas aJCas,Matcher matcher,String unit,double scale,String normalizedUnit,String quantityType){  if (countPeriods(matcher.group(0)) > 1)   return null;  Quantity quant=new Quantity(aJCas);  quant.setConfidence(1.0f);  quant.setBegin(matcher.start());  quant.setEnd(matcher.end());  quant.setValue(matcher.group(0));  Double amount=Double.parseDouble(matcher.group(1).replaceAll(",",""));  amount=QuantityUtils.scaleByMultipler(amount,matcher.group(3));  quant.setQuantity(amount);  quant.setUnit(unit);  if (Math.abs(scale) > 2 * Double.MIN_VALUE) {    quant.setNormalizedQuantity(amount * scale);    quant.setNormalizedUnit(normalizedUnit);  }  quant.setSubType(quantityType);  return quant;}  }
class C{  private boolean isLTR(){  return (fParentComposite.getStyle() & SWT.RIGHT_TO_LEFT) == 0;}  }
class C{  public ReflectionRenderer(){  this(0.35f,0.4f,false);}  }
class C{  private void serializeClass(Class clazz,Map<String,List<String>> classFields) throws RuntimeException {  File current=new File(getCurrentDirectory());  if (!current.exists() || !current.isDirectory()) {    throw new IllegalStateException("There is no " + current.getAbsolutePath() + " directory. "+ "\nThis is where the serialized classes should be. "+ "Please run serializeCurrentDirectory() first.");  }  try {    Field field=clazz.getDeclaredField("serialVersionUID");    int modifiers=field.getModifiers();    boolean _static=Modifier.isStatic(modifiers);    boolean _final=Modifier.isFinal(modifiers);    field.setAccessible(true);    if (!_static || !_final || !(23L == field.getLong(null))) {      throw new RuntimeException("Class " + clazz + " does not define static final "+ "long serialVersionUID = 23L");    }    int numFields=getNumNonSerialVersionUIDFields(clazz);    if (numFields > 0) {      Method method=clazz.getMethod("serializableInstance");      Object object=method.invoke(null);      File file=new File(current,clazz.getName() + ".ser");      boolean created=file.createNewFile();      FileOutputStream out=new FileOutputStream(file);      ObjectOutputStream objOut=new ObjectOutputStream(out);      objOut.writeObject(object);      out.close();    }    ObjectStreamClass objectStreamClass=ObjectStreamClass.lookup(clazz);    String className=objectStreamClass.getName();    ObjectStreamField[] fields=objectStreamClass.getFields();    @SuppressWarnings("Convert2Diamond") List<String> fieldList=new ArrayList<>();    for (    ObjectStreamField objectStreamField : fields) {      String fieldName=objectStreamField.getName();      fieldList.add(fieldName);    }    classFields.put(className,fieldList);  } catch (  NoSuchFieldException e) {    throw new RuntimeException(("There is no static final long field " + "'serialVersionUID' in " + clazz + ". Please make one and set it "+ "to 23L."));  }catch (  NoSuchMethodException e) {  }catch (  IllegalAccessException e) {    throw new RuntimeException("The method serializableInstance() of " + "class " + clazz + " is not public.",e);  }catch (  InvocationTargetException e) {    throw new RuntimeException("Unable to statically call the " + "serializableInstance() method of class " + clazz + ".",e);  }catch (  IOException e) {    throw new RuntimeException("Could not create a new, writeable file " + "in " + getCurrentDirectory() + " when trying to serialize "+ clazz+ ".",e);  }}  }
class C{  protected void registerMacroTags(){  addMacroTagProvider(new ActorLmlMacroTagProvider(),"actor");  addMacroTagProvider(new AnyNotNullLmlMacroTagProvider(),"anyNotNull","any");  addMacroTagProvider(new ArgumentLmlMacroTagProvider(),"nls","argument","preference");  addMacroTagProvider(new ArgumentReplacementLmlMacroTagProvider(),"replace","replaceArguments","noOp","root");  addMacroTagProvider(new AssignLmlMacroTagProvider(),"assign","var","val");  addMacroTagProvider(new CalculationLmlMacroTagProvider(),"calculate","calculation");  addMacroTagProvider(new ChangeListenerLmlMacroTagProvider(),"onChange","changeListener");  addMacroTagProvider(new ClickListenerLmlMacroTagProvider(),"onClick","clickListener");  addMacroTagProvider(new CommentLmlMacroTagProvider(),"comment","FIXME","TODO");  addMacroTagProvider(new ConditionalLmlMacroTagProvider(),"if","test","check");  addMacroTagProvider(new EvaluateLmlMacroTagProvider(),"eval","evaluate","invoke");  addMacroTagProvider(new ExceptionLmlMacroTagProvider(),"exception","throw","error");  addMacroTagProvider(new ForEachLmlMacroTagProvider(),"forEach","for","each");  addMacroTagProvider(new ImportAbsoluteLmlMacroTagProvider(),"absoluteImport");  addMacroTagProvider(new ImportClasspathLmlMacroTagProvider(),"classpathImport");  addMacroTagProvider(new ImportExternallLmlMacroTagProvider(),"externalImport");  addMacroTagProvider(new ImportInternalLmlMacroTagProvider(),"import","internalImport");  addMacroTagProvider(new ImportLocalLmlMacroTagProvider(),"localImport");  addMacroTagProvider(new InputListenerLmlMacroTagProvider(),"inputListener","onInput");  addMacroTagProvider(new LoggerDebugLmlMacroTagProvider(),"debug","logDebug","trace","logTrace");  addMacroTagProvider(new LoggerErrorLmlMacroTagProvider(),"logError");  addMacroTagProvider(new LoggerInfoLmlMacroTagProvider(),"log","logInfo","info");  addMacroTagProvider(new LoopLmlMacroTagProvider(),"loop","times");  addMacroTagProvider(new MetaLmlMacroTagProvider(),"macro");  addMacroTagProvider(new NestedForEachLmlMacroTagProvider(),"forEachNested","nested","eachNested");  addMacroTagProvider(new NewAttributeLmlMacroTagProvider(),"newAttribute","attribute");  addMacroTagProvider(new NewTagLmlMacroTagProvider(),"newTag","tag");  addMacroTagProvider(new NullCheckLmlMacroTagProvider(),"notNull","ifNotNull","exists");  addMacroTagProvider(new RandomLmlMacroTagProvider(),"random");  addMacroTagProvider(new StyleLmlMacroTagProvider(),"style");  addMacroTagProvider(new StyleSheetImportLmlMacroTagProvider(),"importStyleSheet");  addMacroTagProvider(new TableCellLmlMacroTagProvider(),"cell","tableCell");  addMacroTagProvider(new TableColumnLmlMacroTagProvider(),"column","tableColumn");  addMacroTagProvider(new TableRowLmlMacroTagProvider(),"row","tableRow");  addMacroTagProvider(new WhileLmlMacroTagProvider(),"while","until");}  }
class C{  public UnknownServiceException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void incrementValue(int row,int column){  if (saveChanges && column >= 0 && column < this.numberColumns && row >= 0 && row < this.numberRows) {    long cellNum=(long)(row) * numberColumns + column;    if ((cellNum > blockEndingCell) || (cellNum < blockStartingCell)) {      if (isDirty) {        writeDataBlock();      }      numReads++;      if (previousRow < row) {        if (currentReadDirection == -1) {          currentReadDirection=0;        }        if (currentReadDirection != 0) {          currentReadDirection=0;          numSwitchReadDirections++;          switchRatio=(double)numSwitchReadDirections / numReads;        }        blockStartingCell=(long)(cellNum - halfBlockSize * switchRatio);      } else {        if (currentReadDirection == -1) {          currentReadDirection=1;        }        if (currentReadDirection != 1) {          currentReadDirection=1;          numSwitchReadDirections++;          switchRatio=(double)numSwitchReadDirections / numReads;        }        blockStartingCell=(long)(cellNum - (blockSize - (switchRatio * halfBlockSize)));      }      previousRow=row;      if (blockStartingCell < 0) {        blockStartingCell=0;      }      readDataBlock();    }    grid[(int)(cellNum - blockStartingCell)]++;    isDirty=true;  }}  }
class C{  @Override public void insertFront(Blorp x){  Node oldFrontNode=sentinel.next;  Node newNode=new Node(x,oldFrontNode);  sentinel.next=newNode;  size+=1;}  }
class C{  public static int minInt(float a,float b){  return floor(min(a,b));}  }
class C{  public XBMFile(short w,short h,byte[] b){  width=w;  height=h;  paddedWidth=(int)Math.ceil((float)width / 8.0) * 8;  int dim=paddedWidth * height;  if (b.length != dim) {    System.out.println("XBMFile: byte[] doesn't fit into dimensions");    if (b.length > dim)     bits=b; else {      bits=new byte[paddedWidth * height];      for (int i=0; i < b.length; i++)       bits[i]=b[i];    }  } else   bits=b;}  }
class C{  protected void sequence_LabelledStatement(ISerializationContext context,LabelledStatement semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.LABELLED_STATEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.LABELLED_STATEMENT__NAME));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.LABELLED_STATEMENT__STATEMENT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.LABELLED_STATEMENT__STATEMENT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0(),semanticObject.getName());  feeder.accept(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0(),semanticObject.getStatement());  feeder.finish();}  }
class C{  @Override public int scrollVerticallyBy(int dy,RecyclerView.Recycler recycler,RecyclerView.State state){  if (getChildCount() == 0 || dy == 0) {    return 0;  }  View firstChild=getChildAt(0);  View lastChild=getChildAt(-1 + getChildCount());  int toBottomTopDistance=getContentHeight();  if (dy > 0) {    if (mFirstVisiblePosition + getChildCount() >= getItemCount()) {      toBottomTopDistance=getDecoratedBottom(lastChild) - getContentHeight();    } else     if (getDecoratedBottom(firstChild) - dy <= 0) {      mFirstVisibleRow++;      toBottomTopDistance=preFillGrid(Direction.DOWN,Math.abs(dy),0,recycler,state);    } else     if (getDecoratedBottom(lastChild) - dy < getContentHeight()) {      toBottomTopDistance=preFillGrid(Direction.DOWN,Math.abs(dy),0,recycler,state);    }  } else   if (mFirstVisibleRow == 0 && getDecoratedTop(firstChild) - dy >= 0) {    toBottomTopDistance=-getDecoratedTop(firstChild);  } else   if (getDecoratedTop(firstChild) - dy >= 0) {    mFirstVisibleRow--;    toBottomTopDistance=preFillGrid(Direction.UP,Math.abs(dy),0,recycler,state);  } else   if (getDecoratedTop(lastChild) - dy > getContentHeight()) {    toBottomTopDistance=preFillGrid(Direction.UP,Math.abs(dy),0,recycler,state);  }  int actualDy;  if (Math.abs(dy) > toBottomTopDistance) {    actualDy=toBottomTopDistance * (int)Math.signum(dy);  } else {    actualDy=dy;  }  offsetChildrenVertical(-actualDy);  return actualDy;}  }
class C{  public GridTestPrintStream(PrintStream out){  super(out);  baseGrp=Thread.currentThread().getThreadGroup().getParent();}  }
class C{  public void lineTo(Object x1,Object y1){  if (size() == 0 || get(size() - 1).type == SegType.CLOSE) {    throw new IllegalPathStateException("lineTo is only allowed when a path segment is open");  }  add(new Segment(SegType.LINETO,x1,y1));}  }
class C{  public void startTransaction() throws SQLException {  final boolean isAutoCommit=m_connection.getAutoCommit();  if (isAutoCommit) {    m_connection.setAutoCommit(false);    m_returnAutoCommit=true;  }}  }
class C{  @Override public int write(OutputStreamWithBuffer os,char[] cbuf,int off,int len) throws IOException {  byte[] buffer=os.buffer();  int length=os.offset();  int capacity=buffer.length;  int tail=off + len;  int head=off;  while (off < tail) {    while (capacity - length <= 4) {      buffer=os.nextBuffer(length);      length=os.offset();    }    char ch=cbuf[off++];    if (ch < 0x80) {      buffer[length++]=(byte)ch;    } else     if (ch < 0x800) {      buffer[length++]=(byte)(0xc0 + (ch >> 6));      buffer[length++]=(byte)(0x80 + (ch & 0x3f));    } else     if (ch < 0xd800 || 0xdfff < ch) {      buffer[length++]=(byte)(0xe0 + (ch >> 12));      buffer[length++]=(byte)(0x80 + ((ch >> 6) & 0x3f));      buffer[length++]=(byte)(0x80 + (ch & 0x3f));    } else     if (off == tail) {      off--;      break;    } else {      char ch2=cbuf[off++];      int v=0x10000 + (ch & 0x3ff) * 0x400 + (ch2 & 0x3ff);      buffer[length++]=(byte)(0xf0 + (v >> 18));      buffer[length++]=(byte)(0x80 + ((v >> 12) & 0x3f));      buffer[length++]=(byte)(0x80 + ((v >> 6) & 0x3f));      buffer[length++]=(byte)(0x80 + (v & 0x3f));    }  }  os.offset(length);  return off - head;}  }
class C{  public static void initDb(DataSource ds) throws Exception {  createTables(ds);  purgeTables(ds);}  }
class C{  public void refreshRow() throws SQLException {  checkCursor();  if (onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcp").toString());  }  Row currentRow=(Row)getCurrentRow();  currentRow.clearUpdated();}  }
class C{  private String findValue(Object value){  for (  Map.Entry<String,Object> entry : sendEventCollection.entrySet()) {    if (value == entry.getValue()) {      return entry.getKey();    }  }  return null;}  }
class C{  public boolean exist(String word) throws IOException {  final IndexSearcher indexSearcher=obtainSearcher();  try {    return indexSearcher.getIndexReader().docFreq(new Term(F_WORD,word)) > 0;  }  finally {    releaseSearcher(indexSearcher);  }}  }
class C{  private static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i;  byte sbiCrop;  byte sbiDecode;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public String readLine() throws IOException {  return keepCarriageReturns ? readUntilNewline() : reader.readLine();}  }
class C{  public void commit(){  if (canCommit()) {switch (mode) {case MakeMovesOnMaster:      throw new UnsupportedOperationException("This operation is not supported in mode " + mode);case MakeMovesOnMasterSetCursorToLast:    throw new UnsupportedOperationException("This operation is not supported in mode " + mode);case MakeMovesOnCursor:  master=cursor;setCursorMasterLast();break;}}}  }
class C{  @SubscribeEvent public void onTick(TickEvent.WorldTickEvent tick){  if (tick.phase == Phase.END) {    if (blockRegenQueue.isEmpty()) {      return;    }    PartiallyMinedBlock block;    for (Iterator<PartiallyMinedBlock> iter=blockRegenQueue.iterator(); iter.hasNext(); ) {      block=iter.next();      if (isBlockGone(block)) {        sendPartiallyMinedBlockDeleteCommandToAllPlayers(block);        getPartiallyMinedBlocksForDimension(block.getDimension()).remove(block);        iter.remove();      }    }    if (blockRegenQueue.isEmpty() || !MultiMine.instance().getBlockRegenEnabled()) {      return;    }    long curTime=System.currentTimeMillis();    if (blockRegenQueue.peek().getLastTimeMined() + MultiMine.instance().getBlockRegenInterval() < curTime) {      block=blockRegenQueue.poll();      block.setProgress(block.getProgress() - 0.1f);      block.setLastTimeMined(curTime);      if (block.getProgress() < 0f) {        sendPartiallyMinedBlockDeleteCommandToAllPlayers(block);        getPartiallyMinedBlocksForDimension(block.getDimension()).remove(block);      } else {        sendPartiallyMinedBlockUpdateToAllPlayers(block);        blockRegenQueue.add(block);      }    }  }}  }
class C{  public static void openSettingsScreen(@NonNull Context context){  Intent intent=new Intent();  intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);  Uri uri=Uri.parse("package:" + context.getPackageName());  intent.setData(uri);  context.startActivity(intent);}  }
class C{  public static String SelectAttributes(ASEvaluation ASEvaluator,String[] options,Instances train) throws Exception {  int seed=1, folds=10;  String foldsString, seedString, searchName;  String classString;  String searchClassName;  String[] searchOptions=null;  ASSearch searchMethod=null;  boolean doCrossVal=false;  int classIndex=-1;  boolean helpRequested=false;  AttributeSelection trainSelector=new AttributeSelection();  try {    if (Utils.getFlag('h',options)) {      helpRequested=true;    }    if (train.classIndex() != -1) {      classIndex=train.classIndex() + 1;    }    classString=Utils.getOption('c',options);    if (classString.length() != 0) {      if (classString.equals("first")) {        classIndex=1;      } else       if (classString.equals("last")) {        classIndex=train.numAttributes();      } else {        classIndex=Integer.parseInt(classString);      }    }    if ((classIndex != -1) && ((classIndex == 0) || (classIndex > train.numAttributes()))) {      throw new Exception("Class index out of range.");    }    if (classIndex != -1) {      train.setClassIndex(classIndex - 1);    } else {    }    foldsString=Utils.getOption('x',options);    if (foldsString.length() != 0) {      folds=Integer.parseInt(foldsString);      doCrossVal=true;    }    trainSelector.setFolds(folds);    trainSelector.setXval(doCrossVal);    seedString=Utils.getOption('n',options);    if (seedString.length() != 0) {      seed=Integer.parseInt(seedString);    }    trainSelector.setSeed(seed);    searchName=Utils.getOption('s',options);    if ((searchName.length() == 0) && (!(ASEvaluator instanceof AttributeEvaluator))) {      throw new Exception("No search method given.");    }    if (searchName.length() != 0) {      searchName=searchName.trim();      int breakLoc=searchName.indexOf(' ');      searchClassName=searchName;      String searchOptionsString="";      if (breakLoc != -1) {        searchClassName=searchName.substring(0,breakLoc);        searchOptionsString=searchName.substring(breakLoc).trim();        searchOptions=Utils.splitOptions(searchOptionsString);      }    } else {      try {        searchClassName=new String("weka.attributeSelection.Ranker");        searchMethod=(ASSearch)Class.forName(searchClassName).newInstance();      } catch (      Exception e) {        throw new Exception("Can't create Ranker object");      }    }    if (searchMethod == null) {      searchMethod=ASSearch.forName(searchClassName,searchOptions);    }    trainSelector.setSearch(searchMethod);  } catch (  Exception e) {    throw new Exception('\n' + e.getMessage() + makeOptionString(ASEvaluator,searchMethod));  }  try {    if (ASEvaluator instanceof OptionHandler) {      ((OptionHandler)ASEvaluator).setOptions(options);    }  } catch (  Exception e) {    throw new Exception("\n" + e.getMessage() + makeOptionString(ASEvaluator,searchMethod));  }  try {    Utils.checkForRemainingOptions(options);  } catch (  Exception e) {    throw new Exception('\n' + e.getMessage() + makeOptionString(ASEvaluator,searchMethod));  }  if (helpRequested) {    System.out.println(makeOptionString(ASEvaluator,searchMethod));    System.exit(0);  }  trainSelector.setEvaluator(ASEvaluator);  trainSelector.SelectAttributes(train);  return trainSelector.toResultsString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:47.930 -0500",hash_original_method="AA58276D63D2163182FD805D073EE67C",hash_generated_method="1ADD652A9B8E3EA16019BB5E0F7C4636") public SmsUsageMonitor(ContentResolver resolver){  mMaxAllowed=Settings.Secure.getInt(resolver,Settings.Secure.SMS_OUTGOING_CHECK_MAX_COUNT,DEFAULT_SMS_MAX_COUNT);  mCheckPeriod=Settings.Secure.getInt(resolver,Settings.Secure.SMS_OUTGOING_CHECK_INTERVAL_MS,DEFAULT_SMS_CHECK_PERIOD);}  }
class C{  public synchronized V remove(K key){  CacheEntry<V> entry=cacheEntries.remove(key);  return safeValue(entry);}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  if (e.getPropertyName().equals("M_Product_ID"))   productField.setValue(e.getNewValue());}  }
class C{  public LinearColormap(){  this(0xff000000,0xffffffff);}  }
class C{  static void createPopulation1(final MutableScenario scenario){  Population population=scenario.getPopulation();  Network network=(Network)scenario.getNetwork();  Link link0=network.getLinks().get(Id.create(0,Link.class));  Link link1=network.getLinks().get(Id.create(1,Link.class));  Link link2=network.getLinks().get(Id.create(2,Link.class));  Link link3=network.getLinks().get(Id.create(3,Link.class));  Link link4=network.getLinks().get(Id.create(4,Link.class));  Fixture.addPersonToPopulation(Fixture.createPerson1(1,"07:00",link0.getId(),NetworkUtils.getLinkIds("1 2 3"),link4.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(2,"11:00",link0.getId(),NetworkUtils.getLinkIds("1 2 3"),link4.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(3,"16:00",link0.getId(),NetworkUtils.getLinkIds("1 2 3"),link4.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(4,"09:59:50",link0.getId(),NetworkUtils.getLinkIds("1 2 3"),link4.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(5,"08:00:00",link1.getId(),NetworkUtils.getLinkIds("2 3"),link4.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(6,"09:00:00",link0.getId(),NetworkUtils.getLinkIds("1 2"),link3.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(7,"08:30:00",link1.getId(),NetworkUtils.getLinkIds("2"),link3.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(8,"08:35:00",link1.getId(),NetworkUtils.getLinkIds(""),link2.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(9,"08:40:00",link1.getId(),NetworkUtils.getLinkIds(""),link1.getId()),population);  Fixture.addPersonToPopulation(Fixture.createPerson1(10,"08:45:00",link2.getId(),NetworkUtils.getLinkIds(""),link3.getId()),population);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.204 -0400",hash_original_method="6867A77D41A886802B42591DA48B7361",hash_generated_method="3011AA7FB8F99A2498D90DF45E84B3A1") public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  private boolean ruleR9(Node a,Node c,Graph graph){  List<List<Node>> ucPdPsToC=getUcPdPaths(a,c,graph);  for (  List<Node> u : ucPdPsToC) {    Node b=u.get(1);    if (graph.isAdjacentTo(b,c))     continue;    if (b == c)     continue;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R9",graph.getEdge(c,a)));    graph.setEndpoint(c,a,Endpoint.TAIL);    changeFlag=true;    return true;  }  return false;}  }
class C{  public void endDocument() throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.endDocument();}  }
class C{  public synchronized long totalRecoverBytes(){  long total=0;  for (  File file : fileDetails.values()) {    if (file.reused() == false) {      total+=file.length();    }  }  return total;}  }
class C{  public CharBuffer(){  this(32);}  }
class C{  protected boolean processPendInfo(String line){  if (line.startsWith("<pf>")) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(line," =",true);    Offer offer=new Offer();    offer.setReceiving(true);    tok.nextToken();    offer.setId(tok.nextToken());    tok.nextToken();    offer.setSource(tok.nextToken());    tok.nextToken();    String type=tok.nextToken();    if (type.equals("partner")) {      offer.setType(OfferType.partner);      offer.setDeclineCommand("decline " + offer.getId());      offer.setDeclinable(true);      offer.setDeclineAllCommand("decline t all");      offer.setCommand("accept " + offer.getId());      offer.setDescription("Accept partnership offer from " + offer.getSource());      offer.setDeclineDescription("Decline partnership offer from " + offer.getSource());    } else     if (type.equals("match")) {      offer.setType(OfferType.match);      offer.setCommand("accept " + offer.getId());      offer.setDeclinable(true);      offer.setDeclineCommand("decline " + offer.getId());      offer.setDeclineAllCommand("decline t all");      tok.nextToken();      String challengeDescription=tok.getWhatsLeft();      offer.setDeclineDescription("Decline challenge " + challengeDescription);      offer.setDescription("Accept challenge " + challengeDescription);    } else     if (type.equals("draw")) {      offer.setType(OfferType.draw);      offer.setCommand("accept " + offer.getId());      offer.setDeclinable(true);      offer.setDeclineCommand("decline " + offer.getId());      offer.setDeclineAllCommand("decline t all");      offer.setDeclineDescription("Decline draw offer from " + offer.getSource());      offer.setDescription("Accept draw offer from " + offer.getSource());    } else     if (type.equals("adjourn")) {      offer.setType(OfferType.adjourn);      offer.setCommand("accept " + offer.getId());      offer.setDeclinable(true);      offer.setDeclineCommand("decline " + offer.getId());      offer.setDeclineAllCommand("decline t all");      offer.setDescription("Accept adjourn offer from " + offer.getSource());      offer.setDeclineDescription("Decline adjourn offer from " + offer.getSource());    } else     if (type.equals("abort")) {      offer.setType(OfferType.abort);      offer.setCommand("accept " + offer.getId());      offer.setDeclinable(true);      offer.setDeclineCommand("decline " + offer.getId());      offer.setDeclineAllCommand("decline t all");      offer.setDescription("Accept abort offer from " + offer.getSource());      offer.setDeclineDescription("Decline abort offer from " + offer.getSource());    } else     if (type.equals("takeback")) {      offer.setType(OfferType.takeback);      offer.setCommand("accept " + offer.getId());      offer.setDeclinable(true);      offer.setDeclineCommand("decline " + offer.getId());      offer.setDeclineAllCommand("decline t all");      tok.nextToken();      String taokebackMoves=tok.getWhatsLeft();      offer.setDescription("Accept takeback " + taokebackMoves + " halfmoves offer from "+ offer.getSource());      offer.setDeclineDescription("Decline takeback " + taokebackMoves + " halfmoves offer from "+ offer.getSource());    } else {      return true;    }    connector.getGameService().fireOfferReceived(offer);    return true;  } else   if (line.startsWith("<pt>")) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(line," =",true);    Offer offer=new Offer();    offer.setReceiving(false);    tok.nextToken();    offer.setId(tok.nextToken());    tok.nextToken();    offer.setSource(tok.nextToken());    tok.nextToken();    String type=tok.nextToken();    if (type.equals("partner")) {      offer.setType(OfferType.partner);      offer.setCommand("withdraw " + offer.getId());      offer.setDescription("Withdraw partnership offer to " + offer.getSource());    } else     if (type.equals("match")) {      offer.setType(OfferType.match);      offer.setCommand("withdraw " + offer.getId());      tok.nextToken();      offer.setDescription("Withdraw challenge " + tok.getWhatsLeft());    } else     if (type.equals("draw")) {      offer.setType(OfferType.draw);      offer.setCommand("withdraw " + offer.getId());      offer.setDescription("Withdraw draw offer to " + offer.getSource());    } else     if (type.equals("adjourn")) {      offer.setType(OfferType.adjourn);      offer.setCommand("withdraw " + offer.getId());      offer.setDescription("Withdraw adjourn offer to " + offer.getSource());    } else     if (type.equals("abort")) {      offer.setType(OfferType.abort);      offer.setCommand("withdraw " + offer.getId());      offer.setDescription("Withdraw abort offer to " + offer.getSource());    } else     if (type.equals("takeback")) {      offer.setType(OfferType.takeback);      offer.setCommand("withdraw " + offer.getId());      tok.nextToken();      offer.setDescription("Withdraw takeback " + tok.getWhatsLeft() + " halfmoves offer to "+ offer.getSource());    } else {      return true;    }    connector.getGameService().fireOfferReceived(offer);    return true;  } else   if (line.startsWith("<pr>")) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(line," =",true);    tok.nextToken();    connector.getGameService().fireOfferRemoved(tok.nextToken());    return true;  }  return false;}  }
class C{  private final boolean checkBlock(int currentBlock,int currentValue){  m_nextBlock_=m_trie_.m_index_[m_nextIndex_] << Trie.INDEX_STAGE_2_SHIFT_;  if (m_nextBlock_ == currentBlock && (m_nextCodepoint_ - m_currentCodepoint_) >= DATA_BLOCK_LENGTH_) {    m_nextCodepoint_+=DATA_BLOCK_LENGTH_;  } else   if (m_nextBlock_ == 0) {    if (currentValue != m_initialValue_) {      m_nextValue_=m_initialValue_;      m_nextBlockIndex_=0;      return false;    }    m_nextCodepoint_+=DATA_BLOCK_LENGTH_;  } else {    if (!checkBlockDetail(currentValue)) {      return false;    }  }  return true;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void testAddVertex(){  int count=h.getVertexCount();  assertTrue(h.addVertex(new Integer(1)));  assertEquals(count + 1,h.getVertexCount());  assertTrue(h.containsVertex(1));  boolean success=false;  try {    success=h.addVertex(null);    fail("Implementation should disallow null vertices");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {    fail("Implementation should actively prevent null vertices");  }  assertFalse(success);  assertFalse(h.addVertex(1));  assertEquals(count + 1,h.getVertexCount());  assertFalse(h.containsVertex(2));}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  int convertToDigit(char ch){  int val=ch - zeroDigit;  return (val >= 0 && val <= 9) ? val : -1;}  }
class C{  private boolean overrideHasPendingData(){  boolean hasPendingPassthroughData=needsPassthroughWorkarounds() && (audioTrack.getPlayState() == android.media.AudioTrack.PLAYSTATE_PAUSED) && (audioTrack.getPlaybackHeadPosition() == 0);  if (hasPendingPassthroughData) {    return true;  }  boolean hasPendingDataQuirk=AmazonQuirks.isLatencyQuirkEnabled() && (audioTrack.getPlayState() == android.media.AudioTrack.PLAYSTATE_PLAYING) && (((System.nanoTime() / 1000) - resumeSystemTimeUs) < C.MICROS_PER_SECOND);  return hasPendingDataQuirk;}  }
class C{  public String footer(){  FacesContext context=FacesContext.getCurrentInstance();  append("footer()");  clear();  return (null);}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);  for (  Header header : headers) {    result.put(header.getName(),header.getValue());  }  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  GVCongruenceClass(int valueNumber,Object label){  this.valueNumber=valueNumber;  this.label=label;  vertices=new HashSet<ValueGraphVertex>(1);}  }
class C{  private void recognise(SpeechData stream){  int sampleRate=(int)stream.getFormat().getSampleRate();  log.fine("calling Nuance server for recognition... " + "(sample rate: " + sampleRate + " Hz.)");  try {    HttpPost httppost=new HttpPost(asrURI);    String format="audio/x-wav;codec=pcm;bit=" + stream.getFormat().getFrameSize() * 8 + ";rate=" + sampleRate;    String lang=system.getSettings().params.getProperty("lang");    httppost.addHeader("Content-Type",format);    httppost.addHeader("Accept","application/xml");    httppost.addHeader("Accept-Language",lang);    httppost.addHeader("Content-Language",lang);    httppost.addHeader("Accept-Topic","Dictation");    InputStreamEntity reqEntity=new InputStreamEntity(stream);    reqEntity.setContentType(format);    httppost.setEntity(reqEntity);    HttpResponse response=asrClient.execute(httppost);    HttpEntity resEntity=response.getEntity();    if (resEntity == null) {      log.warning("Response entity is null, aborting");    }    BufferedReader reader=new BufferedReader(new InputStreamReader(resEntity.getContent()));    if (response.getStatusLine().getStatusCode() != 200) {      log.warning("(speech could not be recognised: error " + response.getStatusLine().getStatusCode() + ")");      String sentence;      while ((sentence=reader.readLine()) != null) {        log.warning(sentence);      }    } else {      String sentence;      Map<String,Double> lines=new HashMap<String,Double>();      while ((sentence=reader.readLine()) != null) {        lines.put(sentence,1.0 / (lines.size() + 1));      }      lines=InferenceUtils.normalise(lines);      for (      String s : new ArrayList<String>(lines.keySet())) {        lines.put(s,((int)(lines.get(s) * 100)) / 100.0);      }      log.fine("recognition results: " + lines);      reader.close();      if (!lines.isEmpty()) {        system.addUserInput(lines);      }    }    httppost.releaseConnection();  } catch (  Exception e) {    log.warning("could not extract ASR results: " + e);  }}  }
class C{  public String validateStringParameter(String indefiniteArticle,String parameterName,String parameterValue) throws IllegalArgumentException {  Assert.hasText(parameterValue,String.format("%s %s must be specified.",indefiniteArticle,parameterName));  Assert.doesNotContain(parameterValue,"/",String.format("%s can not contain a forward slash character.",StringUtils.capitalize(parameterName)));  return parameterValue.trim();}  }
class C{  public static int computeRawMessageSetExtensionSize(final int fieldNumber,final ByteString value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeBytesSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TYPE_ALIAS__TYPE_SPECIFIER:    return basicSetTypeSpecifier(null,msgs);case TypesPackage.TYPE_ALIAS__CONSTRAINT:  return ((InternalEList<?>)getConstraint()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  int generateBridgeSecret(){  SecureRandom randGen=new SecureRandom();  expectedBridgeSecret=randGen.nextInt(Integer.MAX_VALUE);  return expectedBridgeSecret;}  }
class C{  public LongDomainBuilder from(final long startInclusive){  return new LongDomainBuilder(startInclusive);}  }
class C{  public Swap(double probability){  super();  this.probability=probability;}  }
class C{  public void addMailProperty(MailItemProperty mailProperty){  addRepeatingExtension(mailProperty);}  }
class C{  private void importIDPEntity(Element entity) throws Exception {  checkOrganizationName(entity,this.tenantName);  String id=entity.getAttribute(SAMLNames.ENTID);  this.idmClient.setEntityID(this.tenantName,id);  Tenant tenant=this.idmClient.getTenant(this.tenantName);  tenant._issuerName=id;  this.idmClient.setTenant(tenant);  NodeList idpList=entity.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.IDPSSODESCRIPTOR);  if (idpList.getLength() == 0) {    throw new IDMException("SAML medadata error: file " + "does not have a idp or sp descriptor!");  }  Element idpSSOEle=(Element)idpList.item(0);  importIDPSSODescriptor(idpSSOEle);}  }
class C{  public Compactor snapshotIndex(long index){  this.snapshotIndex=Math.max(this.snapshotIndex,index);  return this;}  }
class C{  private void updateWithoutTimer(final boolean animate){  if (pomodoroMaster.isOngoing()) {    mStartStopButton.setImageResource(R.drawable.ic_action_stop_96dp);    final DateTime nextPomodoro=pomodoroMaster.getNextPomodoro();    if (nextPomodoro != null) {      final float progress=1 - (float)(nextPomodoro.getMillis() - DateTime.now().getMillis()) / pomodoroMaster.getActivityType().getLengthInMillis();      setPomodoroProgress(progress,animate);    } else {      setPomodoroProgress(0f);    }    mTime.setText(Utils.getRemainingTime(pomodoroMaster,false));    mDescription.setText(Utils.getActivityTitle(this,pomodoroMaster,false));  } else {    mStartStopButton.setImageResource(R.drawable.ic_action_start_96dp);    setPomodoroProgress(0f);    mTime.setText("00:00");    mDescription.setText(Utils.getActivityFinishMessage(this,pomodoroMaster));  }}  }
class C{  public boolean isRoot(){  return writer.isRoot(this);}  }
class C{  private static double GetStaticDoubleField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticDoubleField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getDoubleValueUnchecked(null);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void incLootForItem(String item,int count){  handlePrefixedCounting(item,count,"",looted);}  }
class C{  public void addSample(final String id,final Sample sample){  this.samples.put(id,new SampleWrapper(sample));}  }
class C{  public void visitEnd(){}  }
class C{  public boolean isZoomAnimation(){  return this.mZoomAnimation;}  }
class C{  public long position(Blob pattern,long start) throws SerialException, SQLException {  isValid();  return position(pattern.getBytes(1,(int)(pattern.length())),start);}  }
class C{  public long count() throws SabresException {  Sabres sabres=Sabres.self();  sabres.open();  try {    CountCommand command=new CountCommand(name);    if (where != null) {      command.where(where);    }    if (SqliteMaster.tableExists(sabres,name)) {      return sabres.count(command.toSql());    }    return 0;  }  finally {    sabres.close();  }}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  flushPending();  try {    if (inTemporaryOutputState()) {      m_writer.write(ch,start,length);    } else {      writeNormalizedChars(ch,start,length,m_lineSepUse);    }    if (m_tracer != null)     super.fireCharEvent(ch,start,length);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public MkTreeHeader(int pageSize,int dirCapacity,int leafCapacity,int k_max){  super(pageSize,dirCapacity,leafCapacity,0,0);  this.k_max=k_max;}  }
class C{  private void dimOnForeground(Canvas canvas){  canvas.drawColor(Color.argb((int)(0xff * (1 - mSlideOffset)),0,0,0));}  }
class C{  public EnvironmentVariablesTableModel(){  columnNames=new String[2];  columnNames[0]=res.getString("EnvironmentVariablesTableModel.NameColumn");  columnNames[1]=res.getString("EnvironmentVariablesTableModel.ValueColumn");  data=new String[0][0];}  }
class C{  @Deprecated public ServerRuntimeException(String s,Exception ex){  super(s,ex);}  }
class C{  private void computeSquaringMatrix(){  int numColumns=p.getDegree();  sqMatrix=new PolynomialGF2mSmallM[numColumns];  for (int i=0; i < numColumns >> 1; i++) {    int[] monomCoeffs=new int[(i << 1) + 1];    monomCoeffs[i << 1]=1;    sqMatrix[i]=new PolynomialGF2mSmallM(field,monomCoeffs);  }  for (int i=numColumns >> 1; i < numColumns; i++) {    int[] monomCoeffs=new int[(i << 1) + 1];    monomCoeffs[i << 1]=1;    PolynomialGF2mSmallM monomial=new PolynomialGF2mSmallM(field,monomCoeffs);    sqMatrix[i]=monomial.mod(p);  }}  }
class C{  public static long data(long memPtr){  return GridUnsafe.getLong(memPtr);}  }
class C{  private void unregisterClient(ClientProxyMembershipID proxyID){  boolean unregisterClient=false;synchronized (_clientHeartbeatsLock) {    Map oldClientHeartbeats=this._clientHeartbeats;    if (oldClientHeartbeats.containsKey(proxyID)) {      unregisterClient=true;      Map newClientHeartbeats=new HashMap(oldClientHeartbeats);      newClientHeartbeats.remove(proxyID);      this._clientHeartbeats=newClientHeartbeats;    }  }  if (unregisterClient) {    if (logger.isDebugEnabled()) {      logger.debug(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_UNREGISTERING_CLIENT_WITH_MEMBER_ID_0,new Object[]{proxyID}));    }    if (this.stats != null) {      this.stats.incClientUnRegisterRequests();    }    expireTXStates(proxyID);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AbstractBlock)) {    return false;  }  AbstractBlock that=(AbstractBlock)obj;  if (!ObjectUtilities.equal(this.id,that.id)) {    return false;  }  if (!this.frame.equals(that.frame)) {    return false;  }  if (!this.bounds.equals(that.bounds)) {    return false;  }  if (!this.margin.equals(that.margin)) {    return false;  }  if (!this.padding.equals(that.padding)) {    return false;  }  if (this.height != that.height) {    return false;  }  if (this.width != that.width) {    return false;  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowDVDPlayer.getDVDVideoDecoderFilter();}  }
class C{  private void initializeSounds(){  addSounds(SoundLayer.FIGHTING_NOISE.groupName,"attack","punch-1","punch-2","punch-3","punch-4","punch-5","punch-6","swingaxe-1","slap-1","arrow-1");  addSounds(SoundLayer.FIGHTING_NOISE.groupName,"block","clang-metallic-1");}  }
class C{  public Direction createDirectionFromString(EDataType eDataType,String initialValue){  Direction result=Direction.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  final PasswordPortal portal=new PasswordPortal();  final String requiredPassword=getStringValue(ctx,"password");  final String acceptedMessage=getStringValue(ctx,"accepted");  final String rejectedMessage=getStringValue(ctx,"rejected");  final int listeningRadius=getIntValue(ctx,"radius");  if (requiredPassword != null) {    portal.setPassword(requiredPassword);  }  if (acceptedMessage != null) {    portal.setAcceptedMessage(acceptedMessage);  }  if (rejectedMessage != null) {    portal.setRejectedMessage(rejectedMessage);  }  if (listeningRadius >= 0) {    portal.setListeningRadius(listeningRadius);  }  return portal;}  }
class C{  public MqttScriptManager(final IKBus eventBus,final Executor executor,final IMqttConnection connection){  super(eventBus,executor);  this.setConnection(connection);}  }
class C{  @Override public void sessionIdle(NextFilter nextFilter,IoSession session,IdleStatus status) throws Exception {  if (profileSessionIdle) {    long start=timeNow();    nextFilter.sessionIdle(session,status);    long end=timeNow();    sessionIdleTimerWorker.addNewDuration(end - start);  } else {    nextFilter.sessionIdle(session,status);  }}  }
class C{  @Override protected void calculateBarWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);  CategoryDataset dataset=plot.getDataset(rendererIndex);  if (dataset != null) {    int columns=dataset.getColumnCount();    int rows=dataset.getRowCount();    double space=0.0;    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      space=dataArea.getHeight();    } else     if (orientation == PlotOrientation.VERTICAL) {      space=dataArea.getWidth();    }    double maxWidth=space * getMaximumBarWidth();    double categoryMargin=0.0;    if (columns > 1) {      categoryMargin=domainAxis.getCategoryMargin();    }    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin);    if ((rows * columns) > 0) {      state.setBarWidth(Math.min(used / (dataset.getColumnCount()),maxWidth));    } else {      state.setBarWidth(Math.min(used,maxWidth));    }  }}  }
class C{  public <OUTPUT>OUTPUT execute(final Operation<?,OUTPUT> operation,final User user) throws OperationException {  return execute(new OperationChain<>(operation),user);}  }
class C{  public void reset(){  reset(Instant.now());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:35.334 -0500",hash_original_method="A910A5ED054487EDFA510C70332A5D7D",hash_generated_method="26895D548CEF05E807729EF7B74A9D91") public static String countryCodeForMcc(int mcc){  MccEntry entry;  entry=entryForMcc(mcc);  if (entry == null) {    return "";  } else {    return entry.iso;  }}  }
class C{  public void addStepsToReplicateNFSExportRules(URI systemTarget,URI fsURI,String taskId){  s_logger.info("Generating steps for Replicating NFS export rules to Target Cluster");  FileWorkflowCompleter completer=new FileWorkflowCompleter(fsURI,taskId);  Workflow workflow=null;  FileShare targetFileShare=null;  try {    FileShare sourceFileShare=s_dbClient.queryObject(FileShare.class,fsURI);    if (sourceFileShare.getPersonality().equals(PersonalityTypes.SOURCE.name())) {      List<String> targetfileUris=new ArrayList<String>();      targetfileUris.addAll(sourceFileShare.getMirrorfsTargets());      targetFileShare=s_dbClient.queryObject(FileShare.class,URI.create(targetfileUris.get(0)));    } else {      targetFileShare=s_dbClient.queryObject(FileShare.class,sourceFileShare.getParentFileShare());    }    workflow=this._workflowService.getNewWorkflow(this,REPLICATE_NFS_EXPORT_RULES_TO_TARGET_WF_NAME,false,taskId,completer);    FSExportMap sourceFSExportMap=sourceFileShare.getFsExports();    FSExportMap targetFSExportMap=targetFileShare.getFsExports();    if (sourceFSExportMap == null && targetFSExportMap != null) {      List<ExportRule> exportRulesToDelete;      HashMap<String,List<ExportRule>> targetExportRuleMap=FileOrchestrationUtils.getFSExportRuleMap(targetFileShare,s_dbClient);      for (      String exportPath : targetExportRuleMap.keySet()) {        FileExportUpdateParams params=new FileExportUpdateParams();        if (exportPath.equals(targetFileShare.getPath())) {          exportRulesToDelete=targetExportRuleMap.get(targetFileShare.getPath());        } else {          String subDir=exportPath.split(targetFileShare.getPath())[1];          exportRulesToDelete=targetExportRuleMap.get(targetFileShare.getPath() + subDir);          params.setSubDir(subDir.substring(1));        }        ExportRules deleteExportRules=new ExportRules();        deleteExportRules.setExportRules(exportRulesToDelete);        params.setExportRulesToDelete(deleteExportRules);        updateFSExportRulesOnTarget(workflow,systemTarget,targetFileShare,exportPath,params);      }    } else     if (targetFSExportMap != null && sourceFSExportMap != null) {      HashMap<String,List<ExportRule>> sourceExportRuleMap=FileOrchestrationUtils.getFSExportRuleMap(sourceFileShare,s_dbClient);      HashMap<String,List<ExportRule>> targetExportRuleMap=FileOrchestrationUtils.getFSExportRuleMap(targetFileShare,s_dbClient);      for (      String exportPath : sourceExportRuleMap.keySet()) {        FileExportUpdateParams params=new FileExportUpdateParams();        List<ExportRule> exportRulesToAdd=new ArrayList<ExportRule>();        List<ExportRule> exportRulesToDelete=new ArrayList<ExportRule>();        List<ExportRule> exportRulesToModify=new ArrayList<ExportRule>();        List<ExportRule> sourceExportRules;        List<ExportRule> targetExportRules;        HashMap<String,ExportRule> srcExportRuleSecFlvMap;        HashMap<String,ExportRule> trgtExportRuleSecFlvMap;        if (exportPath.equals(sourceFileShare.getPath())) {          sourceExportRules=sourceExportRuleMap.get(exportPath);          targetExportRules=targetExportRuleMap.get(targetFileShare.getPath());        } else {          sourceExportRules=sourceExportRuleMap.get(exportPath);          String subDir=exportPath.split(sourceFileShare.getPath())[1];          targetExportRules=targetExportRuleMap.get(targetFileShare.getPath() + subDir);          params.setSubDir(subDir.substring(1));        }        if (sourceExportRules != null && targetExportRules != null) {          srcExportRuleSecFlvMap=FileOrchestrationUtils.getExportRuleSecFlvMap(sourceExportRules);          trgtExportRuleSecFlvMap=FileOrchestrationUtils.getExportRuleSecFlvMap(targetExportRules);          FileOrchestrationUtils.checkForExportRuleToAdd(sourceFileShare,targetFileShare,srcExportRuleSecFlvMap,trgtExportRuleSecFlvMap,exportRulesToAdd);          FileOrchestrationUtils.checkForExportRuleToDelete(srcExportRuleSecFlvMap,trgtExportRuleSecFlvMap,exportRulesToDelete);          sourceExportRules.removeAll(exportRulesToAdd);          targetExportRules.removeAll(exportRulesToDelete);          srcExportRuleSecFlvMap=FileOrchestrationUtils.getExportRuleSecFlvMap(sourceExportRules);          trgtExportRuleSecFlvMap=FileOrchestrationUtils.getExportRuleSecFlvMap(targetExportRules);          FileOrchestrationUtils.checkForExportRuleToModify(srcExportRuleSecFlvMap,trgtExportRuleSecFlvMap,exportRulesToModify);          if (!exportRulesToAdd.isEmpty()) {            ExportRules addExportRules=new ExportRules();            addExportRules.setExportRules(exportRulesToAdd);            params.setExportRulesToAdd(addExportRules);          }          if (!exportRulesToDelete.isEmpty()) {            ExportRules deleteExportRules=new ExportRules();            deleteExportRules.setExportRules(exportRulesToDelete);            params.setExportRulesToDelete(deleteExportRules);          }          if (!exportRulesToModify.isEmpty()) {            ExportRules modifyExportRules=new ExportRules();            modifyExportRules.setExportRules(exportRulesToModify);            params.setExportRulesToModify(modifyExportRules);          }          if (params.retrieveAllExports() != null && !params.retrieveAllExports().isEmpty()) {            updateFSExportRulesOnTarget(workflow,systemTarget,targetFileShare,exportPath,params);          }        }      }    }    String successMessage=String.format("Replicating source File System : %s, NFS Exports Rules to Target System finished successfully",sourceFileShare.getLabel());    workflow.executePlan(completer,successMessage);  } catch (  Exception ex) {    s_logger.error("Could not replicate source filesystem NFS Exports Rules : " + fsURI,ex);    String opName=ResourceOperationTypeEnum.FILE_PROTECTION_ACTION_FAILOVER.getName();    ServiceError serviceError=DeviceControllerException.errors.createFileSharesFailed(fsURI.toString(),opName,ex);    completer.error(s_dbClient,this._locker,serviceError);  }}  }
class C{  public static Text createSingleText(Composite parent,int hspan){  Text t=new Text(parent,SWT.SINGLE | SWT.BORDER);  t.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  protected void restoreSavedState(MosbySavedState state){  viewId=state.getMosbyViewId();}  }
class C{  private void doTestPivotRanges() throws Exception {  for (  SolrParams p : new SolrParams[]{params("facet.range","{!key=p0 facet.range.gap=500}pay_i","facet.range","{!key=p1 tag=t1 facet.range.gap=100}pay_i","facet.range","{!key=p2 tag=t1 facet.range.gap=200}pay_i","facet.range.start","0","facet.range.end","1000"),params("facet.range","{!key=p0 facet.range.gap=500}pay_i","facet.range","{!key=p1 tag=t1 facet.range.gap=100}pay_i","facet.range","{!key=p2 tag=t1 facet.range.gap=200}pay_i","f.pay_i.facet.range.start","0","facet.range.end","1000"),params("facet.range","{!key=p0 facet.range.gap=500 facet.range.start=0}pay_i","facet.range","{!key=p1 tag=t1 facet.range.gap=100 facet.range.start=0}pay_i","facet.range","{!key=p2 tag=t1 facet.range.gap=200 facet.range.start=0}pay_i","facet.range.end","1000")}) {    QueryResponse rsp=query(SolrParams.wrapDefaults(p,params("q","*:*","rows","0","facet","true","facet.pivot","{!range=t1}place_s,company_t")));    List<PivotField> pivots=rsp.getFacetPivot().get("place_s,company_t");    PivotField pf=null;    List<RangeFacet.Count> rfc=null;    assertEquals(3,rsp.getFacetRanges().size());    assertRange("p0",0,500,1000,2,rsp.getFacetRanges().get(0));    assertRange("p1",0,100,1000,10,rsp.getFacetRanges().get(1));    assertRange("p2",0,200,1000,5,rsp.getFacetRanges().get(2));    pf=pivots.get(0);    assertPivot("place_s","cardiff",257,pf);    assertRange("p1",0,100,1000,10,pf.getFacetRanges().get(0));    assertRange("p2",0,200,1000,5,pf.getFacetRanges().get(1));    rfc=pf.getFacetRanges().get(0).getCounts();    assertEquals("200",rfc.get(2).getValue());    assertEquals(14,rfc.get(2).getCount());    assertEquals("300",rfc.get(3).getValue());    assertEquals(15,rfc.get(3).getCount());    rfc=pf.getFacetRanges().get(1).getCounts();    assertEquals("200",rfc.get(1).getValue());    assertEquals(29,rfc.get(1).getCount());    pf=pf.getPivot().get(0);    assertPivot("company_t","bbc",101,pf);    assertRange("p1",0,100,1000,10,pf.getFacetRanges().get(0));    assertRange("p2",0,200,1000,5,pf.getFacetRanges().get(1));    rfc=pf.getFacetRanges().get(0).getCounts();    for (    RangeFacet.Count c : rfc) {      assertEquals(0,c.getCount());    }    pf=pivots.get(53);    assertPivot("place_s","placeholder0",1,pf);    assertRange("p1",0,100,1000,10,pf.getFacetRanges().get(0));    assertRange("p2",0,200,1000,5,pf.getFacetRanges().get(1));    rfc=pf.getFacetRanges().get(0).getCounts();    assertEquals("0",rfc.get(0).getValue());    assertEquals(1,rfc.get(0).getCount());    assertEquals("100",rfc.get(1).getValue());    assertEquals(0,rfc.get(1).getCount());    pf=pf.getPivot().get(0);    assertPivot("company_t","compholder0",1,pf);    assertRange("p1",0,100,1000,10,pf.getFacetRanges().get(0));    assertRange("p2",0,200,1000,5,pf.getFacetRanges().get(1));    rfc=pf.getFacetRanges().get(0).getCounts();    assertEquals("0",rfc.get(0).getValue());    assertEquals(1,rfc.get(0).getCount());    assertEquals("100",rfc.get(1).getValue());    assertEquals(0,rfc.get(1).getCount());  }}  }
class C{  void readCNT() throws IOException {  int[] header=new int[1];  while (true) {    String S=isr.readLine();    if (S == null)     break;    parseString(S,header,10);    int n=header[0];    if (n == -1)     break;    for (int i=0; i < n; i++)     isr.readLine();  }}  }
class C{  public CommandLine parseCommandLine(String[] args) throws ParseException {  addOptions();  cmd=new DefaultParser().parse(this.options,args);  return cmd;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("core","2.0");  assertTrue("domimplementationFeaturecoreAssert",state);}  }
class C{  public VCardVersion version(){  return version;}  }
class C{  public DesktopExeCustomizerPanel(ProjectExtensionProperties properties){  this.properties=properties;  initComponents();  loadProperties();  HelpCtx.setHelpIDString(this,"sdk.application_deployment");}  }
class C{  public boolean removeHandler(String columnName){  if (m_overrides == null)   return false; else   return m_overrides.remove(columnName) != null;}  }
class C{  public AcelaLight(String systemName,String userName,AcelaSystemConnectionMemo memo){  super(systemName,userName);  _memo=memo;  initializeLight(systemName);}  }
class C{  public GSSHeader(ObjectIdentifier mechOid,int mechTokenLength) throws IOException {  this.mechOid=mechOid;  DerOutputStream temp=new DerOutputStream();  temp.putOID(mechOid);  mechOidBytes=temp.toByteArray();  this.mechTokenLength=mechTokenLength;}  }
class C{  public void deleteDhcpRelayProfile(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(SERVICE_PROFILES_BASE_PATH + "/" + id,HttpStatus.SC_OK,responseCallback);}  }
class C{  public void add(K key,Set<V> items){  Set<V> values=map.get(key);  if (values == null) {    values=(sorted ? new TreeSet<V>() : new HashSet<V>());    map.put(key,values);  }  values.addAll(items);}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  public ObjectFactory(){}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((JMRIClientListener)client).reply((JMRIClientReply)m);}  }
class C{  public String toString(){  return name;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    try {      camera.startPreview();    } catch (    Exception e) {      return;    }    previewing=true;  }}  }
class C{  private void postSession(){  List<BigDecimal> listProcessedOn=new ArrayList<BigDecimal>();  for (  Timestamp dateacct : getListDateacct()) {    listProcessedOn.clear();    listProcessedOn.add(Env.ZERO);    Timestamp ts=DB.getSQLValueTS(get_TrxName(),"SELECT CURRENT_TIMESTAMP FROM DUAL");    long ms=ts.getTime() - (2 * 1000);    ts=new Timestamp(ms);    long mili=ts.getTime();    BigDecimal value=new BigDecimal(Long.toString(mili));    int[] documentsTableID=Doc.getDocumentsTableID();    String[] documentsTableName=Doc.getDocumentsTableName();    for (int i=0; i < documentsTableID.length; i++) {      int AD_Table_ID=documentsTableID[i];      String TableName=documentsTableName[i];      if (p_AD_Table_ID != 0 && p_AD_Table_ID != AD_Table_ID)       continue;      StringBuffer sql=new StringBuffer("SELECT DISTINCT ProcessedOn FROM ").append(TableName).append(" WHERE AD_Client_ID=? AND ProcessedOn<?").append(" AND Processed='Y' AND Posted='N' AND IsActive='Y' and " + getColumnnameDateacct(AD_Table_ID) + "  = ? ");      PreparedStatement pstmt=null;      ResultSet rs=null;      try {        pstmt=DB.prepareStatement(sql.toString(),get_TrxName());        pstmt.setInt(1,getAD_Client_ID());        pstmt.setBigDecimal(2,value);        pstmt.setTimestamp(3,dateacct);        rs=pstmt.executeQuery();        while (rs.next()) {          BigDecimal processedOn=rs.getBigDecimal(1);          if (!listProcessedOn.contains(processedOn))           listProcessedOn.add(processedOn);        }      } catch (      Exception e) {        log.log(Level.SEVERE,sql.toString(),e);      } finally {        DB.close(rs,pstmt);      }    }    int[] count=new int[documentsTableID.length];    int[] countError=new int[documentsTableID.length];    for (int i=0; i < count.length; i++) {      count[i]=0;      countError[i]=0;    }    Collections.sort(listProcessedOn);    for (    BigDecimal processedOn : listProcessedOn) {      for (int i=0; i < documentsTableID.length; i++) {        int AD_Table_ID=documentsTableID[i];        String TableName=documentsTableName[i];        if (p_AD_Table_ID != 0 && p_AD_Table_ID != AD_Table_ID)         continue;        StringBuffer sql=new StringBuffer("SELECT * FROM ").append(TableName).append(" WHERE AD_Client_ID=? AND (ProcessedOn");        if (processedOn.compareTo(Env.ZERO) != 0)         sql.append("=?"); else         sql.append(" IS NULL OR ProcessedOn=0");        sql.append(") AND Processed='Y' AND Posted='N' AND IsActive='Y'").append(" ORDER BY Created");        PreparedStatement pstmt=null;        ResultSet rs=null;        try {          pstmt=DB.prepareStatement(sql.toString(),get_TrxName());          pstmt.setInt(1,getAD_Client_ID());          if (processedOn.compareTo(Env.ZERO) != 0)           pstmt.setBigDecimal(2,processedOn);          rs=pstmt.executeQuery();          while (rs.next()) {            count[i]++;            boolean ok=true;            String innerTrxName=Trx.createTrxName("CAP");            Trx innerTrx=Trx.get(innerTrxName,true);            String postStatus=Doc.STATUS_NotPosted;            Doc doc=Doc.get(m_ass,AD_Table_ID,rs,innerTrxName);            try {              if (doc == null) {                log.severe(getName() + ": No Doc for " + TableName);                ok=false;              } else {                String error=doc.post(false,false);                ok=(error == null);                postStatus=doc.getPostStatus();              }            } catch (            Exception e) {              log.log(Level.SEVERE,getName() + ": " + TableName,e);              ok=false;            } finally {              if (ok)               innerTrx.commit(); else {                innerTrx.rollback();                StringBuffer sqlupd=new StringBuffer("UPDATE ").append(doc.get_TableName()).append(" SET Posted='").append(postStatus).append("',Processing='N' ").append("WHERE ").append(doc.get_TableName()).append("_ID=").append(doc.get_ID());                DB.executeUpdateEx(sqlupd.toString(),null);              }              innerTrx.close();              innerTrx=null;            }            if (!ok)             countError[i]++;          }        } catch (        Exception e) {          log.log(Level.SEVERE,sql.toString(),e);        } finally {          DB.close(rs,pstmt);        }      }    }    for (int i=0; i < documentsTableID.length; i++) {      String TableName=documentsTableName[i];      if (count[i] > 0) {        m_summary.append(TableName).append("=").append(count[i]);        if (countError[i] > 0)         m_summary.append("(Errors=").append(countError[i]).append(")");        m_summary.append(" - ");        log.finer(getName() + ": " + m_summary.toString());      } else       log.finer(getName() + ": " + TableName+ " - no work");    }  }}  }
class C{  public GossipSettings(int gossipInterval,int cleanupInterval){  this.gossipInterval=gossipInterval;  this.cleanupInterval=cleanupInterval;}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public static CGPoint ccpUnrotate(final CGPoint v1,final CGPoint v2){  return ccp(v1.x * v2.x + v1.y * v2.y,v1.y * v2.x - v1.x * v2.y);}  }
class C{  public WindowDimensions(Point loc,Dimension size,Insets in,boolean isClient){  this(new Rectangle(loc,size),in,isClient);}  }
class C{  public static UserRoleAssignmentException convertToApi(org.oscm.internal.types.exception.UserRoleAssignmentException oldEx){  return convertExceptionToApi(oldEx,UserRoleAssignmentException.class);}  }
class C{  public static OnInsertSplitStreamClause createOnInsertSplitStream(){  return OnInsertSplitStreamClause.create();}  }
class C{  private boolean isIdChar(int ch){  return isAlpha(ch) || isDigit(ch) || ch == '.' || ch == '-' || ch == '_' || ch == ':' || Character.isLetter(ch);}  }
class C{  public boolean isSynthetic(){  return synthetic;}  }
class C{  protected Uri onRestoreRingtone(){  final String uriString=getPersistedString(null);  return !TextUtils.isEmpty(uriString) ? Uri.parse(uriString) : null;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe field separator to be used.\n" + "\t'\\t' can be used as well.\n" + "\t(default: ',')","F",1,"-F <separator>"));  result.addElement(new Option("\tThe string representing a missing value.\n" + "\t(default: ?)","M",1,"-M <str>"));  result.addElement(new Option("\tDon't write a header row.","N",0,"-N"));  result.addElement(new Option("\tThe maximum number of digits to print after the decimal\n" + "\tplace for numeric values (default: 6)","decimal",1,"-decimal <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  @Override public final int hashCode(){  return super.hashCode();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static @Unsigned int toUnsignedInt(@Unsigned short s){  return ((int)s) & 0xffff;}  }
class C{  public static SslCertificate restoreState(Bundle bundle){  if (bundle == null) {    return null;  }  X509Certificate x509Certificate;  byte[] bytes=bundle.getByteArray(X509_CERTIFICATE);  if (bytes == null) {    x509Certificate=null;  } else {    try {      CertificateFactory certFactory=CertificateFactory.getInstance("X.509");      Certificate cert=certFactory.generateCertificate(new ByteArrayInputStream(bytes));      x509Certificate=(X509Certificate)cert;    } catch (    CertificateException e) {      x509Certificate=null;    }  }  return new SslCertificate(bundle.getString(ISSUED_TO),bundle.getString(ISSUED_BY),parseDate(bundle.getString(VALID_NOT_BEFORE)),parseDate(bundle.getString(VALID_NOT_AFTER)),x509Certificate);}  }
class C{  public List registerInterestOn(ServerLocation sl,final Object key,final int interestType,final InterestResultPolicy policy,final boolean isDurable,final boolean receiveUpdatesAsInvalidates,final byte regionDataPolicy){  if (interestType == InterestType.KEY && key instanceof List) {    return RegisterInterestListOp.executeOn(sl,this.pool,this.regionName,(List)key,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  } else {    return RegisterInterestOp.executeOn(sl,this.pool,this.regionName,key,interestType,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  }}  }
class C{  public List<StoragePort> selectStoragePorts(URI storageSystemURI,URI networkURI,URI varrayURI){  NetworkLite networkLite=NetworkUtil.getNetworkLite(networkURI,_dbClient);  _log.info("Selecting ports for network {} {}",networkLite.getLabel(),networkLite.getId());  List<StoragePort> spList=new ArrayList<StoragePort>();  List<StoragePort> rspList=new ArrayList<StoragePort>();  List<String> unroutedPorts=new ArrayList<String>();  List<String> routedPorts=new ArrayList<String>();  List<String> notRegisteredOrOk=new ArrayList<String>();  List<String> notInVarray=new ArrayList<String>();  List<String> wrongNetwork=new ArrayList<String>();  URIQueryResultList sports=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(storageSystemURI),sports);  Iterator<URI> it=sports.iterator();  while (it.hasNext()) {    StoragePort sp=_dbClient.queryObject(StoragePort.class,it.next());    if (sp.getInactive() || sp.getNetwork() == null || !DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name().equals(sp.getCompatibilityStatus()) || !DiscoveryStatus.VISIBLE.name().equals(sp.getDiscoveryStatus()) || !sp.getRegistrationStatus().equals(StoragePort.RegistrationStatus.REGISTERED.name()) || StoragePort.OperationalStatus.NOT_OK.equals(StoragePort.OperationalStatus.valueOf(sp.getOperationalStatus())) || StoragePort.PortType.valueOf(sp.getPortType()) != StoragePort.PortType.frontend) {      _log.debug("Storage port {} is not selected because it is inactive, is not compatible, " + "is not visible, has no network assignment, " + "is not registered, has a status other than OK, or is not a frontend port",sp.getLabel());      notRegisteredOrOk.add(portName(sp));      continue;    }    if (sp.getNetwork().equals(networkURI) || (networkLite != null && networkLite.hasRoutedNetworks(sp.getNetwork()))) {      StringSet spVArrayIds=sp.getTaggedVirtualArrays();      if (spVArrayIds != null && spVArrayIds.contains(varrayURI.toString())) {        if (sp.getNetwork().equals(networkURI)) {          spList.add(sp);          unroutedPorts.add(portName(sp));        } else {          _log.debug("Storage port {} is not in the requested network {} " + "but it is routed to it.",sp.getNativeGuid(),networkURI);          rspList.add(sp);          routedPorts.add(portName(sp));        }      } else {        _log.debug("Storage port {} not selected because it is not connected " + "or assigned to requested virtual array {}",sp.getNativeGuid(),varrayURI);        notInVarray.add(portName(sp));      }    } else {      _log.debug("Storage port {} not selected because its network {} " + "is not the requested network {}",new Object[]{sp.getNativeGuid(),sp.getNetwork(),networkURI});      wrongNetwork.add(portName(sp));    }  }  if (!notRegisteredOrOk.isEmpty()) {    _log.info("Ports not selected because they are inactive, have no network assignment, " + "are not registered, bad operational status, or not type front-end: " + Joiner.on(" ").join(notRegisteredOrOk));  }  if (!notInVarray.isEmpty()) {    _log.info("Ports not selected because they are not assigned to the requested virtual array: " + varrayURI + " "+ Joiner.on(" ").join(notInVarray));  }  if (!wrongNetwork.isEmpty()) {    _log.info("Ports not selected because they are not in the requested network: " + networkURI + " "+ Joiner.on(" ").join(wrongNetwork));  }  if (!rspList.isEmpty() && !spList.isEmpty()) {    _log.info("Ports not selected because they are routed and local ports are available: " + networkURI + " "+ Joiner.on(" ").join(routedPorts));  }  _log.info("Ports that were selected: " + (spList.isEmpty() ? Joiner.on(" ").join(routedPorts) : Joiner.on(" ").join(unroutedPorts)));  return spList.isEmpty() ? rspList : spList;}  }
class C{  private List<Constraint<?>> buildQuery(PathCondition pc,int conditionIndex){  PathCondition negatedPathCondition=pc.negate(conditionIndex);  List<Constraint<?>> query=negatedPathCondition.getConstraints();  List<Constraint<?>> simplified_query=reduce(query);  return simplified_query;}  }
class C{  public TokenMap(){  this(DEFAULT_TOKEN_MAP_SIZE);}  }
class C{  @Override public int delete(Uri uri,String where,String[] whereArgs){  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  String finalWhere;  int count;switch (mUriMatcher.match(uri)) {case MAIN:    count=db.delete(MainTable.TABLE_NAME,where,whereArgs);  break;case MAIN_ID:finalWhere=DatabaseUtils.concatenateWhere(MainTable._ID + " = " + ContentUris.parseId(uri),where);count=db.delete(MainTable.TABLE_NAME,finalWhere,whereArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);return count;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int indexOf(java.lang.String str){  return 0;}  }
class C{  public static void stopProgressDialog(ProgressDialog progressDialog){  if (progressDialog != null && progressDialog.isShowing()) {    progressDialog.dismiss();  }}  }
class C{  private void splitCandidate(CandInfo ci,IR ir){  BasicBlock cand=ci.candBB;  BasicBlock prev=ci.prevBB;  BasicBlock succ=ci.succBB;  BasicBlock clone=cand.copyWithoutLinks(ir);  Instruction s=clone.lastRealInstruction();  while (s.isBranch()) {    s=s.remove();  }  clone.appendInstruction(Goto.create(GOTO,succ.makeJumpTarget()));  prev.redirectOuts(cand,clone,ir);  clone.recomputeNormalOut(ir);  ir.cfg.addLastInCodeOrder(clone);  clone.setInfrequent();}  }
class C{  public MultiPolygon readMultiPolygon(){  MultiPolygon mp=null;  for (  SimpleFeature f : ShapeFileReader.getAllFeatures(shapefileName)) {    Object geo=f.getDefaultGeometry();    if (geo instanceof MultiPolygon) {      mp=(MultiPolygon)geo;    } else {      throw new RuntimeException("The shapefile is not a MultiPolygon!");    }  }  return mp;}  }
class C{  public static boolean isSortAscending(Context c){  return p(c).getBoolean(c.getString(R.string.afc_pkey_display_sort_ascending),c.getResources().getBoolean(R.bool.afc_pkey_display_sort_ascending_def));}  }
class C{  public boolean isIndicatorSelected(){  return this.mIndicator.isSelected();}  }
class C{  protected boolean isExpired(K key){  return validTime == -1 ? false : isExpired(cache.get(key));}  }
class C{  public void clearState(){  rootFileObserver=new FileObserver(file);  try {    rootFileObserver.init(false);  } catch (  IOException e) {  }}  }
class C{  public static ParseResult parse(String expression,String eplStatementErrorMsg,boolean addPleaseCheck,ParseRuleSelector parseRuleSelector,boolean rewriteScript) throws EPException {  if (log.isDebugEnabled()) {    log.debug(".parse Parsing expr=" + expression);  }  CharStream input;  try {    input=new NoCaseSensitiveStream(new StringReader(expression));  } catch (  IOException ex) {    throw new EPException("IOException parsing expression '" + expression + '\'',ex);  }  EsperEPL2GrammarLexer lex=newLexer(input);  CommonTokenStream tokens=new CommonTokenStream(lex);  EsperEPL2GrammarParser parser=ParseHelper.newParser(tokens);  Tree tree;  try {    tree=parseRuleSelector.invokeParseRule(parser);  } catch (  RecognitionException ex) {    tokens.fill();    if (rewriteScript && isContainsScriptExpression(tokens)) {      return handleScriptRewrite(tokens,eplStatementErrorMsg,addPleaseCheck,parseRuleSelector);    }    log.debug("Error parsing statement [" + expression + "]",ex);    throw ExceptionConvertor.convertStatement(ex,eplStatementErrorMsg,addPleaseCheck,parser);  }catch (  RuntimeException e) {    try {      tokens.fill();    } catch (    RuntimeException ex) {      log.debug("Token-fill produced exception: " + e.getMessage(),e);    }    if (log.isDebugEnabled()) {      log.debug("Error parsing statement [" + eplStatementErrorMsg + "]",e);    }    if (e.getCause() instanceof RecognitionException) {      if (rewriteScript && isContainsScriptExpression(tokens)) {        return handleScriptRewrite(tokens,eplStatementErrorMsg,addPleaseCheck,parseRuleSelector);      }      throw ExceptionConvertor.convertStatement((RecognitionException)e.getCause(),eplStatementErrorMsg,addPleaseCheck,parser);    } else {      throw e;    }  }  if (rewriteScript && isContainsScriptExpression(tokens)) {    return handleScriptRewrite(tokens,eplStatementErrorMsg,addPleaseCheck,parseRuleSelector);  }  if (log.isDebugEnabled()) {    log.debug(".parse Dumping AST...");    ASTUtil.dumpAST(tree);  }  String expressionWithoutAnnotation=expression;  if (tree instanceof EsperEPL2GrammarParser.StartEPLExpressionRuleContext) {    EsperEPL2GrammarParser.StartEPLExpressionRuleContext epl=(EsperEPL2GrammarParser.StartEPLExpressionRuleContext)tree;    expressionWithoutAnnotation=getNoAnnotation(expression,epl.annotationEnum(),tokens);  } else   if (tree instanceof EsperEPL2GrammarParser.StartPatternExpressionRuleContext) {    EsperEPL2GrammarParser.StartPatternExpressionRuleContext pattern=(EsperEPL2GrammarParser.StartPatternExpressionRuleContext)tree;    expressionWithoutAnnotation=getNoAnnotation(expression,pattern.annotationEnum(),tokens);  }  return new ParseResult(tree,expressionWithoutAnnotation,tokens,Collections.<String>emptyList());}  }
class C{  public static void writelnNoFlush(){  writelnWithFlush(false);}  }
class C{  int decrypt(byte[] cipher,int cipherOffset,int cipherLen,byte[] plain,int plainOffset){  if ((cipherLen % blockSize) != 0) {    throw new ProviderException("Internal error in input buffering");  }  int i;  int endIndex=cipherOffset + cipherLen;  for (; cipherOffset < endIndex; plainOffset+=blockSize, cipherOffset+=blockSize) {    embeddedCipher.decryptBlock(cipher,cipherOffset,plain,plainOffset);    for (i=0; i < blockSize; i++) {      plain[i + plainOffset]^=k[i];    }    for (i=0; i < blockSize; i++) {      k[i]=(byte)(plain[i + plainOffset] ^ cipher[i + cipherOffset]);    }  }  return cipherLen;}  }
class C{  public StatTrackingEventListener(long startTime,String prefix,boolean logError){  this(startTime,prefix,prefix,logError,null);}  }
class C{  public boolean isSingleton(String exceptionName){  if (size != 1) {    return false;  }  ObjectType e=iterator().next();  return e.toString().equals(exceptionName);}  }
class C{  protected BindingSet removeFirstElement(List<BindingSet> list) throws QueryEvaluationException {  return list.remove(0);}  }
class C{  public static void showNotification(Project project,MessageType type,String text){  StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text,type,null).setFadeoutTime(7500).createBalloon().show(RelativePoint.getCenterOf(statusBar.getComponent()),Balloon.Position.atRight);}  }
class C{  protected boolean checkPlayServices(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (apiAvailability.isUserResolvableError(resultCode)) {      apiAvailability.getErrorDialog(this,resultCode,PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      return false;    }    return false;  }  return true;}  }
class C{  public Sinh(){  super("sinh",1);}  }
class C{  public static Object newInstance(Class<?> componentType,int size) throws NegativeArraySizeException {  return VMCommonLibrarySupport.createArray(componentType,size);}  }
class C{  @Inject public HostedExtension(ActionManager actionManager,HostedResources resources,HostedLocalizationConstant localizationConstant,HttpSessionDestroyedInformer httpSessionDestroyedInformer,UnstagedChangesInformer unstagedChangesInformer,TemporaryWorkspaceInformer temporaryWorkspaceInformer){  this.localizationConstant=localizationConstant;  httpSessionDestroyedInformer.process();  temporaryWorkspaceInformer.process();  resources.hostedCSS().ensureInjected();  actionManager.registerAction("warnOnClose",unstagedChangesInformer);}  }
class C{  public static NumberInherit newInstance(double numberInheritAsDbl){  NumberInherit numberInherit=new NumberInherit();  numberInherit.numberInheritAsDbl=numberInheritAsDbl;  return numberInherit;}  }
class C{  public static void addOptCompilerOption(String arg){  String[] tmp=new String[optCompilerOptions.length + 1];  for (int i=0; i < optCompilerOptions.length; i++) {    tmp[i]=optCompilerOptions[i];  }  tmp[optCompilerOptions.length]=arg;  optCompilerOptions=tmp;}  }
class C{  public void updatePendingList(){  while (mPendingList.size() > 0 && activeListHasRoom()) {    DownloadInfoRunnable pending=mPendingList.get(0);    pending.changeStatusState(new ActiveState(pending));  }}  }
class C{  protected void configureLayoutCache(){  if (treeState != null && tree != null) {    if (nodeDimensions == null)     nodeDimensions=createNodeDimensions();    treeState.setNodeDimensions(nodeDimensions);    treeState.setRootVisible(tree.isRootVisible());    treeState.setRowHeight(tree.getRowHeight());    treeState.setSelectionModel(getSelectionModel());    if (treeState.getModel() != tree.getModel())     treeState.setModel(tree.getModel());    updateLayoutCacheExpandedNodesIfNecessary();    if (isLargeModel()) {      if (componentListener == null) {        componentListener=createComponentListener();        if (componentListener != null)         tree.addComponentListener(componentListener);      }    } else     if (componentListener != null) {      tree.removeComponentListener(componentListener);      componentListener=null;    }  } else   if (componentListener != null) {    tree.removeComponentListener(componentListener);    componentListener=null;  }}  }
class C{  public Element writePropertyNode(Element parent,Object o,String name) throws Exception {  Element node;  PropertyNode pnode;  Vector<Element> children;  int i;  Element child;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  pnode=(PropertyNode)o;  node=(Element)parent.appendChild(m_Document.getDocument().createElement(TAG_OBJECT));  node.setAttribute(ATT_NAME,name);  node.setAttribute(ATT_CLASS,pnode.getClass().getName());  node.setAttribute(ATT_PRIMITIVE,VAL_NO);  node.setAttribute(ATT_ARRAY,VAL_NO);  if (pnode.value != null) {    invokeWriteToXML(node,pnode.value,NAME_PROPERTYNODE_VALUE);  }  if (pnode.parentClass != null) {    invokeWriteToXML(node,pnode.parentClass.getName(),NAME_PROPERTYNODE_PARENTCLASS);  }  if (pnode.property != null) {    invokeWriteToXML(node,pnode.property.getDisplayName(),NAME_PROPERTYNODE_PROPERTY);  }  if ((pnode.value != null) && (pnode.property != null) && (pnode.property.getPropertyType().isPrimitive())) {    children=XMLDocument.getChildTags(node);    for (i=0; i < children.size(); i++) {      child=children.get(i);      if (!child.getAttribute(ATT_NAME).equals(NAME_PROPERTYNODE_VALUE)) {        continue;      }      child.setAttribute(ATT_CLASS,pnode.property.getPropertyType().getName());      child.setAttribute(ATT_PRIMITIVE,VAL_YES);    }  }  return node;}  }
class C{  public static Runner emptySuite(){  try {    return new Suite((Class<?>)null,new Class<?>[0]);  } catch (  InitializationError e) {    throw new RuntimeException("This shouldn't be possible");  }}  }
class C{  public void componentHidden(ComponentEvent e){  if (logger.isLoggable(Level.FINE)) {    logger.fine("layer pane for " + layer.getName() + " receiving componentHidden event");  }  Component comp=e.getComponent();  if (comp == layer) {    if (isLayerOn() != false) {      setLayerOn(false);      if (logger.isLoggable(Level.FINE)) {        logger.fine("layer " + layer.getName() + " is now hidden.");      }    }  } else   if (comp == layer.getPalette()) {    setPaletteOn(false);  } else   if (comp == null) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("layer " + layer.getName() + " is now hidden.");    }  }}  }
class C{  public Builder permitNetwork(){  return disable(DETECT_NETWORK);}  }
class C{  public final String leftSide(Instances instances){  return "";}  }
class C{  public boolean handleUnresolvedProperty(PropertyExpression pexp){  return false;}  }
class C{  final public int remove(final int index){  assert keys[index] != null;  assert nkeys > 0;  System.arraycopy(keys,index + 1,keys,index,nkeys - index - 1);  keys[nkeys - 1]=null;  return --nkeys;}  }
class C{  public void stop(){  mRunning=false;  mStop=true;}  }
class C{  public ProgressStatusEvent(String type,List<String> items){  super(Events.PROGRESS_STATUS_CHANGE);  put("progress_type",type);  put("data",items);}  }
class C{  public static <T>T max(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)max((Collection<java.lang.Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(max,next) < 0) {      max=next;    }  }  return max;}  }
class C{  public void init(String pwStr,int keySize) throws ZipException {  byte[] pwBytes=pwStr.getBytes();  PBEParametersGenerator generator=new PKCS5S2ParametersGenerator();  this.saltBytes=createSalt();  generator.init(pwBytes,saltBytes,ITERATION_COUNT);  cipherParameters=generator.generateDerivedParameters(KEY_SIZE_BIT * 2 + 16);  byte[] keyBytes=((KeyParameter)cipherParameters).getKey();  this.cryptoKeyBytes=new byte[KEY_SIZE_BYTE];  System.arraycopy(keyBytes,0,cryptoKeyBytes,0,KEY_SIZE_BYTE);  this.authenticationCodeBytes=new byte[KEY_SIZE_BYTE];  System.arraycopy(keyBytes,KEY_SIZE_BYTE,authenticationCodeBytes,0,KEY_SIZE_BYTE);  this.pwVerificationBytes=new byte[2];  System.arraycopy(keyBytes,KEY_SIZE_BYTE * 2,pwVerificationBytes,0,2);  generator.init(pwBytes,saltBytes,ITERATION_COUNT);  cipherParameters=generator.generateDerivedParameters(KEY_SIZE_BIT);  this.mac=new HMac(new SHA1Digest());  mac.init(new KeyParameter(authenticationCodeBytes));  this.aesCipher=new SICBlockCipher(new AESEngine());  this.blockSize=aesCipher.getBlockSize();  nonce=1;  if (LOG.isLoggable(Level.FINEST)) {    LOG.finest("pwBytes   = " + ByteArrayHelper.toString(pwBytes) + " - "+ pwBytes.length);    LOG.finest("salt      = " + ByteArrayHelper.toString(saltBytes) + " - "+ saltBytes.length);    LOG.finest("pwVerif   = " + ByteArrayHelper.toString(pwVerificationBytes) + " - "+ pwVerificationBytes.length);  }}  }
class C{  public byte[] encode(boolean withHash){  return encode0(client,server);}  }
class C{  public void clearTests(){  tests.clear();}  }
class C{  Node<E> findNode(Comparable<? super E> key){  for (; ; ) {    Node<E> b=findPredecessor(key);    Node<E> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<E> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c == 0) {        if (key.equals(n.key))         return n;      } else       if (c < 0)       return null;      b=n;      n=f;    }  }}  }
class C{  public GifDrawable(@NonNull Resources res,@DrawableRes @RawRes int id) throws NotFoundException, IOException {  this(res.openRawResourceFd(id));}  }
class C{  public static void log(SoapMessageImpl message,SignatureData signature,boolean clientSide) throws Exception {  log.trace("log()");  try {    ask(new LogMessage(message,signature,clientSide));  } catch (  Exception e) {    throw translateWithPrefix(X_LOGGING_FAILED_X,e);  }}  }
class C{  public double[] computeLocalEntropyFromPreviousObservations(int states[]){  int timeSteps=states.length;  double[] localEntropy=new double[timeSteps];  double prob;  for (int b=0; b < totalObservations; b++) {    prob=(double)discCounts[states[b]] / (double)totalObservations;    localEntropy[b]=0.0;    if (prob > 0.0) {      localEntropy[b]=-Math.log(prob) / Math.log(2.0);    }    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ localEntropy[b]);    }  }  return localEntropy;}  }
class C{  public static List<FPLANRoute> parseFPLAN(Set<Integer> bitfeldNummern,Map<String,String> operators,String FPLANfile) throws IOException {  List<FPLANRoute> hafasRoutes=new ArrayList<>();  FPLANRoute currentFPLANRoute=null;  Counter counter=new Counter("FPLAN line # ");  BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(FPLANfile),"latin1"));  String newLine=readsLines.readLine();  while (newLine != null) {    if (newLine.charAt(0) == '*') {      if (newLine.charAt(1) == 'Z') {        String operator=operators.get(newLine.substring(9,15).trim());        String fahrtnummer=newLine.substring(3,8).trim();        int numberOfDepartures=0;        int cycleTime=0;        try {          numberOfDepartures=Integer.parseInt(newLine.substring(22,25));          cycleTime=Integer.parseInt(newLine.substring(26,29));        } catch (        Exception e) {        }        currentFPLANRoute=new FPLANRoute(operator,fahrtnummer,numberOfDepartures,cycleTime);        hafasRoutes.add(currentFPLANRoute);      } else       if (newLine.charAt(1) == 'G') {        if (currentFPLANRoute != null) {          Id<VehicleType> typeId=Id.create(newLine.substring(3,6).trim(),VehicleType.class);          currentFPLANRoute.setVehicleTypeId(typeId);          int hourFirstDeparture=Integer.parseInt(newLine.substring(25,27));          int minuteFirstDeparture=Integer.parseInt(newLine.substring(27,29));          currentFPLANRoute.setFirstDepartureTime(hourFirstDeparture,minuteFirstDeparture);        }      } else       if (newLine.charAt(1) == 'A' && newLine.charAt(3) == 'V' && newLine.charAt(4) == 'E') {        if (currentFPLANRoute != null) {          int localBitfeldnr=0;          if (newLine.substring(22,28).trim().length() > 0) {            localBitfeldnr=Integer.parseInt(newLine.substring(22,28));          }          if (!bitfeldNummern.contains(localBitfeldnr)) {            hafasRoutes.remove(currentFPLANRoute);            currentFPLANRoute=null;          }        }      } else       if (newLine.charAt(1) == 'L') {        if (currentFPLANRoute != null) {          currentFPLANRoute.setRouteDescription(newLine.substring(3,11).trim());        }      } else       if (newLine.charAt(1) == 'T') {        log.error("*T-Line in HAFAS discovered. Please implement appropriate read out.");      }    } else     if (newLine.charAt(0) == '+') {      log.error("+-Line in HRDF discovered. Please implement appropriate read out.");    } else {      boolean arrivalTimeNegative=newLine.charAt(29) == '-';      boolean departureTimeNegative=newLine.charAt(36) == '-';      if (currentFPLANRoute != null) {        double arrivalTime=0;        try {          arrivalTime=Double.parseDouble(newLine.substring(31,33)) * 3600 + Double.parseDouble(newLine.substring(33,35)) * 60;        } catch (        Exception e) {        }        double departureTime=0;        try {          departureTime=Double.parseDouble(newLine.substring(38,40)) * 3600 + Double.parseDouble(newLine.substring(40,42)) * 60;        } catch (        Exception e) {        }        if (!(arrivalTimeNegative && departureTimeNegative)) {          currentFPLANRoute.addRouteStop(newLine.substring(0,7),arrivalTime,departureTime);        }      }    }    newLine=readsLines.readLine();    counter.incCounter();  }  readsLines.close();  counter.printCounter();  return hafasRoutes;}  }
class C{  public void actionPerformed(ActionEvent e){  if (fileChooser == null) {    fileChooser=jmri.jmrit.XmlFile.userFileChooser(Bundle.getMessage("PromptXmlFileTypes"),"xml");    fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);    fileChooser.setCurrentDirectory(new File(VSDecoderPane.getDefaultVSDecoderFolder()));  }  int retVal=fileChooser.showOpenDialog(null);  if (retVal != JFileChooser.APPROVE_OPTION) {    return;  }  try {    loadVSDecoderProfile(fileChooser.getSelectedFile());  } catch (  java.io.IOException e1) {    log.warn("Exception while reading file",e1);  }}  }
class C{  public boolean isDisplayed(boolean checkContext){  if (!m_vo.IsDisplayed)   return false;  if (m_vo.DisplayLogic.equals(""))   return true;  if (checkContext) {    boolean retValue=Evaluator.evaluateLogic(this,m_vo.DisplayLogic);    log.finest(m_vo.ColumnName + " (" + m_vo.DisplayLogic+ ") => "+ retValue);    return retValue;  }  return true;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  SimpleSetSummaryOnChangeListener listener=null;  Preference.OnPreferenceChangeListener existingListener=preference.getOnPreferenceChangeListener();  if (existingListener != null) {    listener=new ExtraSetSummaryOnChangeListener(existingListener);  } else {    listener=sBindPreferenceSummaryToValueListener;  }  preference.setOnPreferenceChangeListener(listener);  try {    listener.updateSummary(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));  } catch (  ClassCastException cce) {    listener.updateSummary(preference,preference.getSummary());  }}  }
class C{  protected synchronized AbstractMRMessage pollMessage(){  return null;}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return Index.of(unsigned);}  }
class C{  public void openFile(String fileName){  Cursor oldCursor=getFrame().getCursor();  getFrame().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  try (InputStream is=new BufferedInputStream(new FileInputStream(currFileName))){    jTextArea1.setInputStream(is);  } catch (  FileNotFoundException e) {    JOptionPane.showMessageDialog(this,"Failed to open file " + fileName,"Warning",JOptionPane.WARNING_MESSAGE);    statusBar.setText("Error opening " + fileName);  }catch (  IOException e) {    JOptionPane.showMessageDialog(this,"Error while reading file " + fileName,"Warning",JOptionPane.WARNING_MESSAGE);    statusBar.setText("Error opening " + fileName);  }catch (  Throwable t) {    JOptionPane.showMessageDialog(this,"Unexpected exception: " + t,"Warning",JOptionPane.WARNING_MESSAGE);    statusBar.setText("Error opening " + fileName);  }  this.dirty=false;  statusBar.setText("Opened " + fileName);  updateCaption();  getFrame().setCursor(oldCursor);}  }
class C{  private void send(String callId,final Object obj){  final String jsonStr=toJson(obj);  if (jsonStr == null) {    throw new RuntimeException("Object would be serialized to `null`");  }  send(callId,jsonStr);}  }
class C{  public void prePaint(Display d,Graphics2D g){  AffineTransform at=g.getTransform();  boolean translate=isTranslation(at);  if (m_fixed || translate) {    int tx=m_fixed ? 0 : (int)at.getTranslateX();    int ty=m_fixed ? 0 : (int)at.getTranslateY();    g.setTransform(getIdentity());    if (m_tiled) {      int w=d.getWidth(), iw=m_img.getWidth(null);      int h=d.getHeight(), ih=m_img.getHeight(null);      int sx=m_fixed ? 0 : tx % iw;      int sy=m_fixed ? 0 : ty % ih;      if (sx > 0)       sx-=iw;      if (sy > 0)       sy-=ih;      for (int x=sx; x < w - sx; x+=iw) {        for (int y=sy; y < h - sy; y+=ih)         g.drawImage(m_img,x,y,null);      }    } else {      g.drawImage(m_img,tx,ty,null);    }    g.setTransform(at);  } else {    if (m_tiled) {      int iw=m_img.getWidth(null);      int ih=m_img.getHeight(null);      Clip c=getClip();      c.setClip(0,0,d.getWidth(),d.getHeight());      c.transform(d.getInverseTransform());      int w=(int)Math.ceil(c.getWidth());      int h=(int)Math.ceil(c.getHeight());      int tx=(int)c.getMinX();      int ty=(int)c.getMinY();      int dw=tx % iw + iw;      int dh=ty % ih + ih;      tx-=dw;      w+=dw;      ty-=dh;      h+=dh;      for (int x=tx; x < tx + w; x+=iw) {        for (int y=ty; y < ty + h; y+=ih)         g.drawImage(m_img,x,y,null);      }    } else {      g.drawImage(m_img,0,0,null);    }  }}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public void restartProxy(){  proxy.restart();}  }
class C{  @Override protected String initialLogMessage(){  return "Expecting NOT to receive any packets with jdp.name=" + connection.instanceName;}  }
class C{  private static String formatColor(Color color){  String red=Integer.toHexString(color.getRed());  String green=Integer.toHexString(color.getGreen());  String blue=Integer.toHexString(color.getBlue());  if (red.length() == 1)   red="0" + red;  if (green.length() == 1)   green="0" + green;  if (blue.length() == 1)   blue="0" + blue;  return "#" + red + green+ blue;}  }
class C{  public InputStream openStream() throws IOException {  return data.openStream(userAgent,null);}  }
class C{  private List<EngineInfo> initEngines(SolrQueryRequest req,SolrQueryResponse rsp) throws SolrException {  List<EngineInfo> scriptEngines=new ArrayList<>();  ScriptEngineManager scriptEngineManager=new ScriptEngineManager(resourceLoader.getClassLoader());  scriptEngineManager.put("logger",log);  scriptEngineManager.put("req",req);  scriptEngineManager.put("rsp",rsp);  if (params != null) {    scriptEngineManager.put("params",params);  }  for (  ScriptFile scriptFile : scriptFiles) {    ScriptEngine engine=null;    if (null != engineName) {      engine=scriptEngineManager.getEngineByName(engineName);      if (engine == null) {        String details=getSupportedEngines(scriptEngineManager,false);        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"No ScriptEngine found by name: " + engineName + (null != details ? " -- supported names: " + details : ""));      }    } else {      engine=scriptEngineManager.getEngineByExtension(scriptFile.getExtension());      if (engine == null) {        String details=getSupportedEngines(scriptEngineManager,true);        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"No ScriptEngine found by file extension: " + scriptFile.getFileName() + (null != details ? " -- supported extensions: " + details : ""));      }    }    if (!(engine instanceof Invocable)) {      String msg="Engine " + ((null != engineName) ? engineName : ("for script " + scriptFile.getFileName())) + " does not support function invocation (via Invocable): "+ engine.getClass().toString()+ " ("+ engine.getFactory().getEngineName()+ ")";      log.error(msg);      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg);    }    if (scriptEngineCustomizer != null) {      scriptEngineCustomizer.customize(engine);    }    scriptEngines.add(new EngineInfo((Invocable)engine,scriptFile));    try {      Reader scriptSrc=scriptFile.openReader(resourceLoader);      try {        engine.eval(scriptSrc);      } catch (      ScriptException e) {        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to evaluate script: " + scriptFile.getFileName(),e);      } finally {        IOUtils.closeQuietly(scriptSrc);      }    } catch (    IOException ioe) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to evaluate script: " + scriptFile.getFileName(),ioe);    }  }  return scriptEngines;}  }
class C{  public static Optional<String> readToken(File dir,String name) throws IOException {  File token=new File(dir,name);  if (!token.isFile()) {    return Optional.empty();  } else {    return Optional.of(FileUtils.readFileToString(token,StandardCharsets.UTF_8));  }}  }
class C{  public static BigDecimal roundPrice(BigDecimal price,BigDecimal ticksize,int decimalPlaces){  int intValue=price.intValue();  double fraction=price.doubleValue() - intValue;  long ticks=Math.round(fraction / ticksize.doubleValue());  BigDecimal returnValue=new BigDecimal(intValue).add(new BigDecimal(ticks).multiply(ticksize));  returnValue.setScale(decimalPlaces,BigDecimal.ROUND_HALF_UP);  return returnValue;}  }
class C{  public void addUnidirectionalLink(String fromLocation,String toLocation,Double distance){  links.set(fromLocation,toLocation,distance);}  }
class C{  public static List<MAssetGroupAcct> forA_Asset_Group_ID(Properties ctx,int A_Asset_Group_ID){  return new Query(ctx,Table_Name,COLUMNNAME_A_Asset_Group_ID + "=?",null).setParameters(new Object[]{A_Asset_Group_ID}).list();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.770 -0500",hash_original_method="211C1414D28F35039504B68D95AB9ED9",hash_generated_method="E118D82FD0BD87AB0C9285CEF8D7FAF6") public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data[i++]];    i=nextI(data,i,finish);    b2=decodingTable[data[i++]];    i=nextI(data,i,finish);    b3=decodingTable[data[i++]];    i=nextI(data,i,finish);    b4=decodingTable[data[i++]];    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    outLen+=3;    i=nextI(data,i,finish);  }  outLen+=decodeLastBlock(out,(char)data[end - 4],(char)data[end - 3],(char)data[end - 2],(char)data[end - 1]);  return outLen;}  }
class C{  public static LC parseLayoutConstraint(String s){  LC lc=new LC();  if (s.isEmpty())   return lc;  String[] parts=toTrimmedTokens(s,',');  for (int i=0; i < parts.length; i++) {    String part=parts[i];    if (part == null)     continue;    int len=part.length();    if (len == 3 || len == 11) {      if (part.equals("ltr") || part.equals("rtl") || part.equals("lefttoright")|| part.equals("righttoleft")) {        lc.setLeftToRight(part.charAt(0) == 'l' ? Boolean.TRUE : Boolean.FALSE);        parts[i]=null;      }      if (part.equals("ttb") || part.equals("btt") || part.equals("toptobottom")|| part.equals("bottomtotop")) {        lc.setTopToBottom(part.charAt(0) == 't');        parts[i]=null;      }    }  }  for (  String part : parts) {    if (part == null || part.length() == 0)     continue;    try {      int ix=-1;      char c=part.charAt(0);      if (c == 'w' || c == 'h') {        ix=startsWithLenient(part,"wrap",-1,true);        if (ix > -1) {          String num=part.substring(ix).trim();          lc.setWrapAfter(num.length() != 0 ? Integer.parseInt(num) : 0);          continue;        }        boolean isHor=c == 'w';        if (isHor && (part.startsWith("w ") || part.startsWith("width "))) {          String sz=part.substring(part.charAt(1) == ' ' ? 2 : 6).trim();          lc.setWidth(parseBoundSize(sz,false,true));          continue;        }        if (!isHor && (part.startsWith("h ") || part.startsWith("height "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 7).trim();          lc.setHeight(parseBoundSize(uvStr,false,false));          continue;        }        if (part.length() > 5) {          String sz=part.substring(5).trim();          if (part.startsWith("wmin ")) {            lc.minWidth(sz);            continue;          } else           if (part.startsWith("wmax ")) {            lc.maxWidth(sz);            continue;          } else           if (part.startsWith("hmin ")) {            lc.minHeight(sz);            continue;          } else           if (part.startsWith("hmax ")) {            lc.maxHeight(sz);            continue;          }        }        if (part.startsWith("hidemode ")) {          lc.setHideMode(Integer.parseInt(part.substring(9)));          continue;        }      }      if (c == 'g') {        if (part.startsWith("gapx ")) {          lc.setGridGapX(parseBoundSize(part.substring(5).trim(),true,true));          continue;        }        if (part.startsWith("gapy ")) {          lc.setGridGapY(parseBoundSize(part.substring(5).trim(),true,false));          continue;        }        if (part.startsWith("gap ")) {          String[] gaps=toTrimmedTokens(part.substring(4).trim(),' ');          lc.setGridGapX(parseBoundSize(gaps[0],true,true));          lc.setGridGapY(gaps.length > 1 ? parseBoundSize(gaps[1],true,false) : lc.getGridGapX());          continue;        }      }      if (c == 'd') {        ix=startsWithLenient(part,"debug",5,true);        if (ix > -1) {          String millis=part.substring(ix).trim();          lc.setDebugMillis(millis.length() > 0 ? Integer.parseInt(millis) : 1000);          continue;        }      }      if (c == 'n') {        if (part.equals("nogrid")) {          lc.setNoGrid(true);          continue;        }        if (part.equals("nocache")) {          lc.setNoCache(true);          continue;        }        if (part.equals("novisualpadding")) {          lc.setVisualPadding(false);          continue;        }      }      if (c == 'f') {        if (part.equals("fill") || part.equals("fillx") || part.equals("filly")) {          lc.setFillX(part.length() == 4 || part.charAt(4) == 'x');          lc.setFillY(part.length() == 4 || part.charAt(4) == 'y');          continue;        }        if (part.equals("flowy")) {          lc.setFlowX(false);          continue;        }        if (part.equals("flowx")) {          lc.setFlowX(true);          continue;        }      }      if (c == 'i') {        ix=startsWithLenient(part,"insets",3,true);        if (ix > -1) {          String insStr=part.substring(ix).trim();          UnitValue[] ins=parseInsets(insStr,true);          LayoutUtil.putCCString(ins,insStr);          lc.setInsets(ins);          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,new String[]{"aligny","ay"},new int[]{6,2},true);        if (ix > -1) {          UnitValue align=parseUnitValueOrAlign(part.substring(ix).trim(),false,null);          if (align == UnitValue.BASELINE_IDENTITY)           throw new IllegalArgumentException("'baseline' can not be used to align the whole component group.");          lc.setAlignY(align);          continue;        }        ix=startsWithLenient(part,new String[]{"alignx","ax"},new int[]{6,2},true);        if (ix > -1) {          lc.setAlignX(parseUnitValueOrAlign(part.substring(ix).trim(),true,null));          continue;        }        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          String[] gaps=toTrimmedTokens(part.substring(ix).trim(),' ');          lc.setAlignX(parseUnitValueOrAlign(gaps[0],true,null));          if (gaps.length > 1) {            UnitValue align=parseUnitValueOrAlign(gaps[1],false,null);            if (align == UnitValue.BASELINE_IDENTITY)             throw new IllegalArgumentException("'baseline' can not be used to align the whole component group.");            lc.setAlignY(align);          }          continue;        }      }      if (c == 'p') {        if (part.startsWith("packalign ")) {          String[] packs=toTrimmedTokens(part.substring(10).trim(),' ');          lc.setPackWidthAlign(packs[0].length() > 0 ? Float.parseFloat(packs[0]) : 0.5f);          if (packs.length > 1)           lc.setPackHeightAlign(Float.parseFloat(packs[1]));          continue;        }        if (part.startsWith("pack ") || part.equals("pack")) {          String ps=part.substring(4).trim();          String[] packs=toTrimmedTokens(ps.length() > 0 ? ps : "pref pref",' ');          lc.setPackWidth(parseBoundSize(packs[0],false,true));          if (packs.length > 1)           lc.setPackHeight(parseBoundSize(packs[1],false,false));          continue;        }      }      if (lc.getAlignX() == null) {        UnitValue alignX=parseAlignKeywords(part,true);        if (alignX != null) {          lc.setAlignX(alignX);          continue;        }      }      UnitValue alignY=parseAlignKeywords(part,false);      if (alignY != null) {        lc.setAlignY(alignY);        continue;      }      throw new IllegalArgumentException("Unknown Constraint: '" + part + "'\n");    } catch (    Exception ex) {      throw new IllegalArgumentException("Illegal Constraint: '" + part + "'\n"+ ex.getMessage());    }  }  return lc;}  }
class C{  public void writeAllMus(PartitionClockModel model,XMLWriter writer){  Parameter allMus=model.getParameter("allMus");  if (allMus.getSubParameters().size() > 1) {    writer.writeComment("Collecting together relative rates for partitions");    writer.writeOpenTag(CompoundParameterParser.COMPOUND_PARAMETER,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,model.getPrefix() + "allMus")});    for (    Parameter parameter : allMus.getSubParameters()) {      writer.writeIDref(ParameterParser.PARAMETER,parameter.getName());    }    writer.writeCloseTag(CompoundParameterParser.COMPOUND_PARAMETER);    writer.writeText("");  }}  }
class C{  public void testAwaitAdvance2(){  Phaser phaser=new Phaser();  assertTrue(phaser.awaitAdvance(-1) < 0);  assertState(phaser,0,0,0);}  }
class C{  public static boolean hasUniqueObject(Collection collection){  if (isEmpty(collection)) {    return false;  }  boolean hasCandidate=false;  Object candidate=null;  for (  Object elem : collection) {    if (!hasCandidate) {      hasCandidate=true;      candidate=elem;    } else     if (candidate != elem) {      return false;    }  }  return true;}  }
class C{  private void createClientServerConfiguration(){  PORT1=((Integer)server1.invoke(null)).intValue();  PORT2=((Integer)server2.invoke(null)).intValue();  client1.invoke(null);  client2.invoke(null);  try {    createClientCache2(NetworkUtils.getServerHostName(server1.getHost()),new Integer(PORT2));  } catch (  Exception e) {    fail(" test failed due to " + e);  }}  }
class C{  private WindowUtils(){}  }
class C{  public TrafficEstimate(StatsEstimate min,StatsEstimate mean,StatsEstimate max){  this.min=min;  this.mean=mean;  this.max=max;}  }
class C{  public static void main(String[] argv){  runFilter(new RemoveFolds(),argv);}  }
class C{  public CommandServiceException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public int start_state(){  return 0;}  }
class C{  @Override public boolean accept(File dir,String name){  return (pattern.matcher(name).find());}  }
class C{  public FileSharingSession createGroupFileTransferSession(String fileTransferId,MmContent content,MmContent fileIcon,String groupChatId,long timestamp){  if (sLogger.isActivated()) {    sLogger.info("Send file " + content.toString() + " to "+ groupChatId);  }  return new OriginatingHttpGroupFileSharingSession(this,fileTransferId,content,fileIcon,ImsModule.getImsUserProfile().getImConferenceUri(),groupChatId,UUID.randomUUID().toString(),mRcsSettings,mMessagingLog,timestamp,mContactManager);}  }
class C{  public InferenceResult ask(FOLKnowledgeBase KB,Sentence query){  if (!(query instanceof AtomicSentence)) {    throw new IllegalArgumentException("Only Atomic Queries are supported.");  }  List<Literal> goals=new ArrayList<Literal>();  goals.add(new Literal((AtomicSentence)query));  BCAskAnswerHandler ansHandler=new BCAskAnswerHandler();  List<List<ProofStepBwChGoal>> allProofSteps=folbcask(KB,ansHandler,goals,new HashMap<Variable,Term>());  ansHandler.setAllProofSteps(allProofSteps);  return ansHandler;}  }
class C{  @Override public Object handleGetObject(String key){  if (key == null) {    throw new NullPointerException();  }  final Properties properties=getProperties();  if (properties != null) {    final Object obj=properties.get(key);    if (obj != null && obj.toString().trim().length() != 0) {      return obj;    }  }  if (this.getClass().equals(DbMessages.class) && key.startsWith("locale.")) {    return "";  }  return super.handleGetObject(key);}  }
class C{  public void addColumn(String header){  if (getModel() instanceof DefaultTableModel) {    DefaultTableModel model=(DefaultTableModel)getModel();    model.addColumn(Util.cleanAmp(header));  } else   throw new IllegalArgumentException("Model must be instance of DefaultTableModel");}  }
class C{  public void sync(){  for (  Client client : clients) {    generateResponse(client.getOne());  }}  }
class C{  private void testPreferredUnitsRecording(int tabId){  testPreferredUnits(R.string.unit_kilometer);  EndToEndTestUtils.startRecording();  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(tabId));  EndToEndTestUtils.sendGps(3);  testPreferredUnits(R.string.unit_mile);  EndToEndTestUtils.sendGps(3,3);  EndToEndTestUtils.stopRecording(true);}  }
class C{  @Deprecated public boolean deleteCacheFile(){  File cacheRoot=new File(getSdcardPath(),packageName);  if (!cacheRoot.exists()) {    return false;  }  File cacheFile=new File(cacheRoot,"mobclick_agent_cached_" + packageName);  if (!cacheFile.exists()) {    return false;  } else {    cacheFile.delete();    return true;  }}  }
class C{  public synchronized void clear(){  super.clear();  mMaxValues.clear();}  }
class C{  void reset(){  if (version != -1) {    throw new RuntimeException("reset() can be only be called before protocolDetermined");  }  data.reset();}  }
class C{  public Vector3f subtract(float subtractX,float subtractY,float subtractZ){  return new Vector3f(x - subtractX,y - subtractY,z - subtractZ);}  }
class C{  public static int combinedHashCode(Object... objects){  final int prime=31;  int result=1;  for (  Object obj : objects) {    result=prime * result + getHashCode(obj);  }  return result;}  }
class C{  public Builder(){}  }
class C{  public String generateInstanceId() throws SchedulerException {  String property=System.getProperty(getSystemPropertyName());  if (property == null) {    throw new SchedulerException("No value for '" + SYSTEM_PROPERTY + "' system property found, please configure your environment accordingly!");  }  if (getPrepend() != null)   property=getPrepend() + property;  if (getPostpend() != null)   property=property + getPostpend();  return property;}  }
class C{  public String showAttributes(){  ArffSortedTableModel model;  ListSelectorDialog dialog;  int i;  JList list;  String name;  int result;  if (!isPanelSelected()) {    return null;  }  list=new JList(getCurrentPanel().getAttributes());  dialog=new ListSelectorDialog(getParentFrame(),list);  result=dialog.showDialog();  if (result == ListSelectorDialog.APPROVE_OPTION) {    model=(ArffSortedTableModel)getCurrentPanel().getTable().getModel();    name=list.getSelectedValue().toString();    i=model.getAttributeColumn(name);    JTableHelper.scrollToVisible(getCurrentPanel().getTable(),0,i);    getCurrentPanel().getTable().setSelectedColumn(i);    return name;  } else {    return null;  }}  }
class C{  public static void random(int size,boolean print,double mean,String generatorName){  System.out.println("Generating " + size + " random numbers per distribution...\n");  int largeVariance=100;  RandomEngine gen;  try {    gen=(RandomEngine)Class.forName(generatorName).newInstance();  } catch (  Exception exc) {    throw new InternalError(exc.getMessage());  }  randomInstance(size,print,new Poisson(mean,(RandomEngine)gen.clone()));}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  String name;  JSONObject jo=new JSONObject();  Object value;  JSONTokener x=new JSONTokener(string);  jo.put("name",x.nextTo('='));  x.next('=');  jo.put("value",x.nextTo(';'));  x.next();  while (x.more()) {    name=unescape(x.nextTo("=;"));    if (x.next() != '=') {      if (name.equals("secure")) {        value=Boolean.TRUE;      } else {        throw x.syntaxError("Missing '=' in cookie parameter.");      }    } else {      value=unescape(x.nextTo(';'));      x.next();    }    jo.put(name,value);  }  return jo;}  }
class C{  private void processLog(Description description,final CaptureLog log){  final CaptureLogAnalyzer analyzer=new CaptureLogAnalyzer();  final EvoTestCaseCodeGenerator codeGen=new EvoTestCaseCodeGenerator();  logger.debug("Current log: " + log);  List<Class<?>> observedClasses=getObservedClasses(log);  for (  Class<?> targetClass : observedClasses) {    logger.debug("Current observed class: {}",targetClass.getName());    Class<?>[] targetClasses=new Class<?>[1];    targetClasses[0]=targetClass;    if (!carvedTests.containsKey(targetClass))     carvedTests.put(targetClass,new ArrayList<TestCase>());    analyzer.analyze(log,codeGen,targetClasses);    CarvedTestCase test=(CarvedTestCase)codeGen.getCode();    if (test == null) {      logger.info("Failed to carve test for " + Arrays.asList(targetClasses));      codeGen.clear();      continue;    }    test.setName(description.getMethodName());    logger.info("Carved test of length " + test.size());    try {      test.changeClassLoader(TestGenerationContext.getInstance().getClassLoaderForSUT());      GenericTypeInference inference=new GenericTypeInference();      inference.inferTypes(test);      carvedTests.get(targetClass).add(test);    } catch (    Throwable t) {      logger.info("Exception during carving: " + t);      for (      StackTraceElement elem : t.getStackTrace()) {        logger.info(elem.toString());      }      logger.info(test.toCode());    }    codeGen.clear();  }}  }
class C{  private static RuntimeException outOfBounds(BiFunction<String,List<Integer>,? extends RuntimeException> oobef,String checkKind,Integer... args){  List<Integer> largs=Arrays.asList(args);  RuntimeException e=oobef == null ? null : oobef.apply(checkKind,largs);  return e == null ? new IndexOutOfBoundsException(outOfBoundsMessage(checkKind,largs)) : e;}  }
class C{  public static DateFormat outputDateFormat(){  return utc(new SimpleDateFormat("yyyyMMddHHmmss",Locale.ROOT));}  }
class C{  public Reader create(InputStream is,String javaEncoding){  return new UTF16Reader(is);}  }
class C{  @Override protected void onPause(){  super.onPause();  mPreview.stop();}  }
class C{  public XBeeResponse sendSynchronous(final XBeeRequest request) throws XBeeTimeoutException, XBeeException {  return this.sendSynchronous(request,conf.getSendSynchronousTimeout());}  }
class C{  public void error(Throwable t,String s){  if (isEnabled(TraceSystem.ERROR)) {    traceWriter.write(TraceSystem.ERROR,s,t);  }}  }
class C{  public boolean isFirstInstructionInBasicBlock(){  return !basicBlock.isEmpty() && handle == basicBlock.getFirstInstruction();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.832 -0500",hash_original_method="F4E18AFB5A6BD2866D211174F2C65244",hash_generated_method="F4E18AFB5A6BD2866D211174F2C65244") Iterator<Map.Entry<String,V>> createEntrySetIterator(){  return new EntryIteratorImpl();}  }
class C{  public MosaicSupplyChangeTransaction(final TimeInstant timeStamp,final Account sender,final MosaicId mosaicId,final MosaicSupplyType supplyType,final Supply delta){  super(TransactionTypes.MOSAIC_SUPPLY_CHANGE,1,timeStamp,sender);  this.mosaicId=mosaicId;  this.supplyType=supplyType;  this.delta=delta;  this.validate();}  }
class C{  public synchronized void removeActionListener(ActionListener l){  listenerList.remove(ActionListener.class,l);}  }
class C{  private static boolean isPropertyEnabled(List<VolumeDescriptor> descriptors,String param){  if (descriptors != null) {    for (    VolumeDescriptor volumeDescriptor : descriptors) {      if (volumeDescriptor.getParameters() != null) {        if (volumeDescriptor.getParameters().get(param) != null) {          return (Boolean)volumeDescriptor.getParameters().get(param);        }      }    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.656 -0500",hash_original_method="D4A0602F4424EB672EFBEE9811EC3EF2",hash_generated_method="994D15028CCE2587BC5BF1494F96A5CF") @DSSafe(DSCat.SAFE_LIST) public void add(int index,HDR sipHeader) throws IndexOutOfBoundsException {  hlist.add(index,sipHeader);}  }
class C{  public static Date parseExact(final String value,final String format) throws ParseException {  final DateFormat formatter=new SimpleDateFormat(format,Locale.getDefault());  return formatter.parse(value);}  }
class C{  public LightPortrayal3D(Light light){  this.light=light;}  }
class C{  void println(){  System.out.println();  pos=0;}  }
class C{  float curveProgressToScale(float p){  if (p < 0)   return StackPeekMinScale;  if (p > 1)   return 1f;  float scaleRange=(1f - StackPeekMinScale);  float scale=StackPeekMinScale + (p * scaleRange);  return scale;}  }
class C{  protected void paintRow(Graphics g,Rectangle clipBounds,Insets insets,Rectangle bounds,TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  if (editingComponent != null && editingRow == row)   return;  int leadIndex;  if (tree.hasFocus()) {    leadIndex=getLeadSelectionRow();  } else   leadIndex=-1;  Component component;  component=currentCellRenderer.getTreeCellRendererComponent(tree,path.getLastPathComponent(),tree.isRowSelected(row),isExpanded,isLeaf,row,(leadIndex == row));  rendererPane.paintComponent(g,component,tree,bounds.x,bounds.y,bounds.width,bounds.height,true);}  }
class C{  public static boolean makeDirsForFile(final String file){  if (TextUtils.isEmpty(file)) {    Log.e(FileUtils.class,"makeDirsForFile(): Null or Empty parameter given");    return false;  }  return makeDirsForFile(new File(file));}  }
class C{  public ReqExclScorer(Scorer reqScorer,Scorer exclScorer){  super(reqScorer.weight);  this.reqScorer=reqScorer;  reqTwoPhaseIterator=reqScorer.twoPhaseIterator();  if (reqTwoPhaseIterator == null) {    reqApproximation=reqScorer.iterator();  } else {    reqApproximation=reqTwoPhaseIterator.approximation();  }  exclTwoPhaseIterator=exclScorer.twoPhaseIterator();  if (exclTwoPhaseIterator == null) {    exclApproximation=exclScorer.iterator();  } else {    exclApproximation=exclTwoPhaseIterator.approximation();  }}  }
class C{  public void add(AppInfo info){  if (mAppFilter != null && !mAppFilter.shouldShowApp(info.componentName)) {    return;  }  if (findActivity(data,info.componentName,info.user)) {    return;  }  data.add(info);  added.add(info);}  }
class C{  public CNodeEditExitState(final CStateFactory<?,?> factory,final AbstractZyGraph<?,?> graph,final Node node){  m_factory=factory;  m_graph=graph;  m_node=node;}  }
class C{  public final int beginColumn(){  return this.bColumn;}  }
class C{  @Override public void encodeBegin(FacesContext context) throws IOException {  preEncode(context);  super.encodeBegin(context);}  }
class C{  public static boolean areStringsEqual(String s1,String s2){  if (s1 == null) {    return s2 == null;  }  return s1.equals(s2);}  }
class C{  public input addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static void generateClass(StringBuilder builder){  builder.append("/**\n");  builder.append(" * THIS CLASS WILL BE OVERRIDDEN BY MAVEN BUILD. DON'T EDIT CLASS, IT WILL HAVE NO EFFECT.\n");  builder.append(" */\n");  builder.append("@Singleton\n");  builder.append("@SuppressWarnings(\"rawtypes\")\n");  builder.append("public class ExtensionManager\n");  builder.append("{\n");  builder.append("\n");  builder.append(GeneratorUtils.TAB + "/** Contains the map will all the Extension Providers <FullClassFQN, Provider>. */\n");  builder.append(GeneratorUtils.TAB + "protected final Map<String, Provider> extensions = new HashMap<>();\n\n");  builder.append(GeneratorUtils.TAB + "/** Constructor that accepts all the Extension found in IDE package */\n");  builder.append(GeneratorUtils.TAB + "@Inject\n");  builder.append(GeneratorUtils.TAB + "public ExtensionManager(\n");  Iterator<Entry<String,String>> entryIterator=EXTENSIONS_FQN.entrySet().iterator();  while (entryIterator.hasNext()) {    Entry<String,String> extensionEntry=entryIterator.next();    String hasComma=entryIterator.hasNext() ? "," : "";    String classFQN=String.format("Provider<%s>",extensionEntry.getKey());    String variableName=extensionEntry.getValue().toLowerCase();    builder.append(GeneratorUtils.TAB2 + classFQN + " "+ variableName+ hasComma+ "\n");  }  builder.append(GeneratorUtils.TAB + ")\n");  builder.append(GeneratorUtils.TAB + "{\n");  for (  Entry<String,String> extension : EXTENSIONS_FQN.entrySet()) {    String fullFqn=extension.getKey();    String variableName=extension.getValue().toLowerCase();    String putStatement=String.format("this.extensions.put(\"%s\",%s);%n",fullFqn,variableName);    builder.append(GeneratorUtils.TAB2 + putStatement);  }  builder.append(GeneratorUtils.TAB + "}\n\n");  builder.append(GeneratorUtils.TAB + "/** Returns  the map will all the Extension Providers <FullClassFQN, Provider>. */\n");  builder.append(GeneratorUtils.TAB + "public Map<String, Provider> getExtensions()\n");  builder.append(GeneratorUtils.TAB + "{\n");  builder.append(GeneratorUtils.TAB2 + "return extensions;\n");  builder.append(GeneratorUtils.TAB + "}\n");  builder.append("}\n");}  }
class C{  public VelocityScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
class C{  public static double[][] jPMF(Instances D,int j,int k){  double JOINT[][]=new double[D.attribute(j).numValues()][D.attribute(k).numValues()];  int N=D.numInstances();  for (int i=0; i < N; i++) {    int v_j=(int)Math.round(D.instance(i).value(j));    int v_k=(int)Math.round(D.instance(i).value(k));    JOINT[v_j][v_k]+=(1.0 / (double)N);  }  return JOINT;}  }
class C{  public static MethodOperand INTERFACE(MethodReference ref,RVMMethod target){  return new MethodOperand(ref,target,INTERFACE);}  }
class C{  public DocumentPrinting(){  m_PrintPane=new JTextPane();  m_PageFormat=new PageFormat();  m_PrinterJob=PrinterJob.getPrinterJob();}  }
class C{  public State createState(){  StateImpl state=new StateImpl();  return state;}  }
class C{  public File createNewFolder(File containingDir) throws IOException {  if (containingDir == null) {    throw new IOException("Containing directory is null:");  }  File newFolder=createFileObject(containingDir,newFolderString);  if (newFolder.exists()) {    throw new IOException("Directory already exists:" + newFolder.getAbsolutePath());  } else {    newFolder.mkdirs();  }  return newFolder;}  }
class C{  public IIndex findIndex(String name){  return findIndex(name,false);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  m_selectExpression.fixupVariables(cstate.getVariableNames(),cstate.getGlobalsSize());}  }
class C{  public SslClientCertVerificationError(){  requestFileName="getstate.query";}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  ((CanListener)client).reply((CanReply)r);}  }
class C{  private void addGeofencesInternal(){  Log.v(TAG,ACTION_ADD_GEOFENCES);  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(LocationServices.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    PendingIntent pendingIntent=PendingIntent.getBroadcast(this,0,new Intent(this,UtilityReceiver.class),0);    GeofencingApi.addGeofences(googleApiClient,TouristAttractions.getGeofenceList(),pendingIntent);    googleApiClient.disconnect();  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }}  }
class C{  protected Optional<LogData> parseJsonLog(String s,DateFormat dateFormat){  try {    Validator.validate(s);    final JSONObject jsonObject=new JSONObject(s);    final Map<String,String> map=toMap(jsonObject);    return mapToLogData(map,dateFormat);  } catch (  JSONException e) {    return Optional.empty();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Country(){  super(KEY);}  }
class C{  public static ZoneObject[] mapZoneCentroid2NearestNode(final ActivityFacilitiesImpl zones,final Network network){  assert (network != null);  assert (zones != null);  int numberOfZones=zones.getFacilities().values().size();  ZoneObject zoneArray[]=new ZoneObject[numberOfZones];  Iterator<? extends ActivityFacility> zonesIterator=zones.getFacilities().values().iterator();  int counter=0;  while (zonesIterator.hasNext()) {    ActivityFacility zone=zonesIterator.next();    assert (zone != null);    assert (zone.getCoord() != null);    Coord zoneCoordinate=zone.getCoord();    final Coord coord=zoneCoordinate;    Node networkNode=NetworkUtils.getNearestNode(network,coord);    assert (networkNode != null);    zoneArray[counter]=new ZoneObject(zone.getId(),zoneCoordinate,networkNode);    counter++;  }  return zoneArray;}  }
class C{  public TimeConstraintImpl(Class<? extends DataObject> clazz,ColumnFamily<String,IndexColumnName> cf,Boolean value,long startTimeMillis,long endTimeMillis){  this.cf=cf;  rowKey=clazz.getSimpleName();  this.startTimeMicros=startTimeMillis * MILLIS_TO_MICROS;  this.endTimeMicros=endTimeMillis * MILLIS_TO_MICROS;  this.value=value;  this.entityType=clazz;}  }
class C{  public static TriggerOption AtWatermark(){  TriggerOption triggerOption=new TriggerOption();  Trigger trigger=new Trigger(Type.ON_TIME);  triggerOption.triggerList.add(trigger);  return triggerOption;}  }
class C{  public boolean isTextValid(String text){  if (text == null) {    return false;  }  text=text.trim();  if (text.isEmpty()) {    return settings.getAllowEmptyTimes();  }  LocalTime parsedTime=InternalUtilities.getParsedTimeOrNull(text,settings.getFormatForDisplayTime(),settings.getFormatForMenuTimes(),settings.formatsForParsing,settings.getLocale());  if (parsedTime == null) {    return false;  }  TimeVetoPolicy vetoPolicy=settings.getVetoPolicy();  if (InternalUtilities.isTimeVetoed(vetoPolicy,parsedTime)) {    return false;  }  return true;}  }
class C{  public void useHttps(SSLSocketFactory sslSocketFactory,boolean tunnelProxy){  this.sslSocketFactory=sslSocketFactory;  this.tunnelProxy=tunnelProxy;}  }
class C{  public TLCProcessJob(String specName,String modelName,ILaunch launch,int workers){  super(specName,modelName,launch,workers);}  }
class C{  private List<Payload> createList(String marble){  Queue<Character> marb=new ConcurrentLinkedQueue<>();  List<Payload> toReturn=new ArrayList<>();  for (  char c : marble.toCharArray()) {    if (c != '-') {switch (c) {case '|':        break;case '#':      break;default :    if (argMap != null) {      Map<String,String> tempMap=argMap.get(c + "");      if (tempMap == null) {        toReturn.add(new PayloadImpl(c + "",c + ""));        break;      }      List<String> key=new ArrayList<>(tempMap.keySet());      List<String> value=new ArrayList<>(tempMap.values());      toReturn.add(new PayloadImpl(key.get(0),value.get(0)));    } else {      toReturn.add(new PayloadImpl(c + "",c + ""));    }  break;}}}return toReturn;}  }
class C{  public void read() throws java.io.IOException {  if (file == null) {    throw new java.io.IOException("Null file during read");  }  InputStream s=new java.io.BufferedInputStream(new java.io.FileInputStream(file));  h0=new FirstHeader();  h0.load(s);  if (log.isDebugEnabled()) {    log.debug(h0.toString());  }  int n=h0.numHeaders();  headers=new Header[n];  headers[0]=h0;  for (int i=1; i < n; i++) {    headers[i]=new Header();    headers[i].load(s);    if (log.isDebugEnabled()) {      log.debug("Header " + i + " "+ headers[i].toString());    }  }  for (int i=1; i < n; i++) {    if (log.isDebugEnabled()) {      log.debug("Header " + i + " length "+ headers[i].getDataLength()+ " type "+ headers[i].getType());    }    if (headers[i].getDataLength() > headers[i].getRecordLength()) {      log.error("header " + i + " has data length "+ headers[i].getDataLength()+ " greater than record length "+ headers[i].getRecordLength());    }    for (int j=1; j < i; j++) {      if (headers[i].getHandle() == headers[j].getHandle() && headers[i].getType() == 1 && headers[j].getType() == 1) {        log.error("Duplicate handle number in records " + i + "("+ headers[i].getHandle()+ ") and "+ j+ "("+ headers[j].getHandle()+ ")");      }    }    if (headers[i].getType() > 6) {      log.error("Type field unexpected value: " + headers[i].getType());    }    if (headers[i].getType() == 0) {      log.error("Type field unexpected value: " + headers[i].getType());    }    if (headers[i].getType() < -1) {      log.error("Type field unexpected value: " + headers[i].getType());    }  }  int length=0;  for (int i=1; i < n; i++) {    if (length < headers[i].getRecordStart() + headers[i].getRecordLength()) {      length=headers[i].getRecordStart() + headers[i].getRecordLength();    }  }  if (log.isDebugEnabled()) {    log.debug("Last byte at " + length);  }  for (int i=1; i < n; i++) {    s.close();    s=new java.io.BufferedInputStream(new java.io.FileInputStream(file));    s.skip(headers[i].getRecordStart());    byte[] array=new byte[headers[i].getRecordLength()];    int read=s.read(array);    if (read != headers[i].getRecordLength()) {      log.error("header " + i + " read "+ read+ ", expected "+ headers[i].getRecordLength());    }    headers[i].setByteArray(array);  }  s.close();}  }
class C{  public ConnectionFailedException(final String message){  super(message);}  }
class C{  @Deprecated public boolean saveWEPConfig(String ssid,String password){  WifiConfiguration wifiConfig=new WifiConfiguration();  wifiConfig.SSID="\"" + ssid + "\"";  wifiConfig.hiddenSSID=true;  wifiConfig.status=WifiConfiguration.Status.CURRENT;  wifiConfig.priority=WIFI_CONFIG_PRIORITY;  wifiConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);  wifiConfig.allowedProtocols.set(WifiConfiguration.Protocol.RSN);  wifiConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);  wifiConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);  wifiConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);  wifiConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);  wifiConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);  wifiConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);  wifiConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);  wifiConfig.wepKeys[WIFI_CONFIG_DEFAULT_INDEX]="\"" + password + "\"";  wifiConfig.wepTxKeyIndex=WIFI_CONFIG_DEFAULT_INDEX;  wifiManager.setWifiEnabled(true);  int result=wifiManager.addNetwork(wifiConfig);  boolean isSaveSuccessful=wifiManager.saveConfiguration();  boolean isNetworkEnabled=wifiManager.enableNetwork(result,true);  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"add Network returned." + result);    Log.d(TAG,"saveConfiguration returned." + isSaveSuccessful);    Log.d(TAG,"enableNetwork returned." + isNetworkEnabled);  }  return isSaveSuccessful;}  }
class C{  public boolean equals(Object color){  return super.equals(color) && (alpha == ((AlphaColor)color).getAlpha());}  }
class C{  public URI normalize(){  if (opaque) {    return this;  }  String normalizedPath=normalize(path,false);  if (path.equals(normalizedPath)) {    return this;  }  URI result=duplicate();  result.path=normalizedPath;  result.setSchemeSpecificPart();  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:01.317 -0400",hash_original_method="FF17A204E3629066EF83E9AD1421D6AB",hash_generated_method="C6459CF8CC640AB010A38797D56E41DA") public PrintJobId(String value){  mValue=value;}  }
class C{  public PTBTokenizer(){  this(false);}  }
class C{  private void readElements(InputNode node,Object source,Section section) throws Exception {  LabelMap map=section.getElements();  InputNode child=node.getNext();  while (child != null) {    String name=child.getName();    Section block=section.getSection(name);    if (block != null) {      readSection(child,source,block);    } else {      readElement(child,source,section,map);    }    child=node.getNext();  }  validate(node,map,source);}  }
class C{  protected String formatPlaceholderText(String text){  String formattedText=(null != text) ? text.trim() : null;  int length=(null != formattedText) ? formattedText.length() : 0;  if (length > 0) {    return formattedText.substring(0,Math.min(2,length)).toUpperCase(Locale.getDefault());  }  return null;}  }
class C{  void notifyHeaderRowBehindStartRow() throws InvalidConfigurationException {  createBubbleWindow(headerRowSpinner,BubbleStyle.ERROR,"io.dataimport.step.csv.format_specification.invalid_header_row",getHeaderRowIndex() + 1,getSelection().getRowIndexStart() + 1);}  }
class C{  @Override public boolean equals(Object obj){  return obj instanceof AdminPermission;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.914 -0500",hash_original_method="88B58E52E2D044E743A1ED3102F3960B",hash_generated_method="4B082871EC06B81A20DC9FE95803F51A") public SIPRequest createSIPRequest(RequestLine requestLine,boolean switchHeaders){  SIPRequest newRequest=new SIPRequest();  newRequest.requestLine=requestLine;  Iterator<SIPHeader> headerIterator=this.getHeaders();  while (headerIterator.hasNext()) {    SIPHeader nextHeader=(SIPHeader)headerIterator.next();    if (nextHeader instanceof CSeq) {      CSeq newCseq=(CSeq)nextHeader.clone();      nextHeader=newCseq;      try {        newCseq.setMethod(requestLine.getMethod());      } catch (      ParseException e) {      }    } else     if (nextHeader instanceof ViaList) {      Via via=(Via)(((ViaList)nextHeader).getFirst().clone());      via.removeParameter("branch");      nextHeader=via;    } else     if (nextHeader instanceof To) {      To to=(To)nextHeader;      if (switchHeaders) {        nextHeader=new From(to);        ((From)nextHeader).removeTag();      } else {        nextHeader=(SIPHeader)to.clone();        ((To)nextHeader).removeTag();      }    } else     if (nextHeader instanceof From) {      From from=(From)nextHeader;      if (switchHeaders) {        nextHeader=new To(from);        ((To)nextHeader).removeTag();      } else {        nextHeader=(SIPHeader)from.clone();        ((From)nextHeader).removeTag();      }    } else     if (nextHeader instanceof ContentLength) {      ContentLength cl=(ContentLength)nextHeader.clone();      try {        cl.setContentLength(0);      } catch (      InvalidArgumentException e) {      }      nextHeader=cl;    } else     if (!(nextHeader instanceof CallID) && !(nextHeader instanceof MaxForwards)) {      continue;    }    try {      newRequest.attachHeader(nextHeader,false);    } catch (    SIPDuplicateHeaderException e) {      e.printStackTrace();    }  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  public static void clear(){  services.clear();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","mdjnu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void allocateLandedCostRounding(){  MLandedCostAllocation[] allocations=MLandedCostAllocation.getOfInvoiceLine(getCtx(),getC_InvoiceLine_ID(),get_TrxName());  MLandedCostAllocation largestAmtAllocation=null;  BigDecimal allocationAmt=Env.ZERO;  for (int i=0; i < allocations.length; i++) {    MLandedCostAllocation allocation=allocations[i];    if (largestAmtAllocation == null || allocation.getAmt().compareTo(largestAmtAllocation.getAmt()) > 0)     largestAmtAllocation=allocation;    allocationAmt=allocationAmt.add(allocation.getAmt());  }  BigDecimal difference=getLineNetAmt().subtract(allocationAmt);  if (difference.signum() != 0) {    largestAmtAllocation.setAmt(largestAmtAllocation.getAmt().add(difference));    largestAmtAllocation.saveEx();    log.config("Difference=" + difference + ", C_LandedCostAllocation_ID="+ largestAmtAllocation.getC_LandedCostAllocation_ID()+ ", Amt"+ largestAmtAllocation.getAmt());  }}  }
class C{  public static void fail(Formatter message){  throw new AssertionException(message);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TMEMBER;}  }
class C{  public static Builder with(@NonNull Context context){  return new Builder(context);}  }
class C{  public List<Trigger> createTrigger(BigInteger alertId,Trigger trigger) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/triggers";  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,trigger);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),new TypeReference<List<Trigger>>(){  });}  }
class C{  public static Enumeration toEnumeration(Vector options){  return options.elements();}  }
class C{  public static void disable(){  SCANDIUM_LOGGER.setLevel(Level.OFF);}  }
class C{  protected void implicitlyCloseAllOpenResults() throws SQLException {  this.isImplicitlyClosingResults=true;  try {    if (!(this.connection.getHoldResultsOpenOverStatementClose() || this.connection.getDontTrackOpenResources() || this.holdResultsOpenOverClose)) {      if (this.results != null) {        this.results.realClose(false);      }      if (this.generatedKeysResults != null) {        this.generatedKeysResults.realClose(false);      }      closeAllOpenResults();    }  }  finally {    this.isImplicitlyClosingResults=false;  }}  }
class C{  public LogitBoost(Regressor baseLearner,int M){  if (!baseLearner.supportsWeightedData())   throw new RuntimeException("Base Learner must support weighted data points to be boosted");  this.baseLearner=baseLearner;  this.maxIterations=M;}  }
class C{  @HLEFunction(nid=0x636C953B,version=150) public int sceKernelAllocHeapMemory(int heapId,int size){  HeapInformation info=heaps.get(heapId);  if (info == null) {    return 0;  }  int addr=info.allocBlock(size);  if (log.isDebugEnabled()) {    log.debug(String.format("sceKernelAllocHeapMemory returning 0x%08X",addr));  }  return addr;}  }
class C{  public CActionSave(final JFrame parent,final ZyGraph graph){  super("Save View");  m_parent=new WeakReference<JFrame>(Preconditions.checkNotNull(parent,"IE01646: Parent can't be null"));  m_graph=new WeakReference<ZyGraph>(Preconditions.checkNotNull(graph,"IE01222: Graph argument can not be null"));  setEnabled(graph.getRawView().getType() != ViewType.Native);  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_SAVE_VIEW_HK.getKeyStroke());}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public AndPredicate(Predicate p1,Predicate p2){  super(p1,p2);}  }
class C{  public Builder(){  this(TweetUi.getInstance());}  }
class C{  public Users(){  _usersImpl=new UsersImpl();}  }
class C{  public DrawerBuilder withActionBarDrawerToggleAnimated(boolean actionBarDrawerToggleAnimated){  this.mAnimateActionBarDrawerToggle=actionBarDrawerToggleAnimated;  return this;}  }
class C{  public Integer call(){  try {    printDebugMessages();    currentState=kernel2closure.get(stateKernel);    Set<Symbol> shiftedSymbols=new HashSet<Symbol>();    for (    LALR1CPItem item : currentState.getItems()) {      itemStates.put(item,currentState);      if (item.isShiftable()) {        Symbol symbol=item.getNextSymbol();        if (symbol == EndOfInputStream) {          lr0Edges.add(createAcceptEdge(stateKernel,symbol));        } else         if (shiftedSymbols.add(symbol)) {          Tuple2<LALR1CPState,List<CPGoToLink>> s=currentState.goToCP(symbol);          LALR1CPState shiftedStateKernel=s.get1();          List<CPGoToLink> shiftedStateCPLinks=s.get2();          LALR1CPState equalStateLALR1CP;          LALR1CPState gotoLinkTargetState;synchronized (kernel2closure) {            equalStateLALR1CP=kernel2closure.get(shiftedStateKernel);            gotoLinkTargetState=equalStateLALR1CP;            if (equalStateLALR1CP == null) {              LALR1CPState shiftedState=shiftedStateKernel.closure(grammarInfo);              kernel2closure.put(shiftedStateKernel,shiftedState);              threadPool.submit(new WorkerTaskLALR1(shiftedStateKernel,threadPool,taskCountLock));              gotoLinkTargetState=shiftedState;            }          }          for (          CPGoToLink link : shiftedStateCPLinks) {            LALR1CPItem todoItem=link.getSource();            if (goToLinks.put(todoItem,link.withTargetState(gotoLinkTargetState)) != null) {              throw new RuntimeException("Double gotoLink!");            }          }          lr0Edges.add(new Edge(stateKernel,symbol,shiftedStateKernel,item.getLR0Item()));        }      }    }    decrementTaskCount();  } catch (  Throwable e) {    e.printStackTrace();  }  return 0;}  }
class C{  public Block newBlock(){  return new Block(this);}  }
class C{  public boolean isSetPutResponse(){  return this.putResponse != null;}  }
class C{  public static double cdf(double val,double mu,double sigma,double k){  final double x=(val - mu) / sigma;  if (k > 0 || k < 0) {    if (k * x > 1) {      return k > 0 ? 1 : 0;    }    return Math.exp(-Math.exp(Math.log(1 - k * x) / k));  } else {    return Math.exp(-Math.exp(-x));  }}  }
class C{  public boolean equals(AxisAngle4f a1){  try {    return (this.x == a1.x && this.y == a1.y && this.z == a1.z && this.angle == a1.angle);  } catch (  NullPointerException e2) {    return false;  }}  }
class C{  private void findOrCreateTargetBlockConsistencyGroup(List<? extends BlockObject> targetVolumes){  log.info("Find or create target BlockConsistencyGroup...");  final String LABEL_SUFFIX_FOR_46X="T";  Volume target=(Volume)targetVolumes.get(0);  Volume source=dbClient.queryObject(Volume.class,target.getSrdfParent().getURI());  StorageSystem sourceSystem=dbClient.queryObject(StorageSystem.class,source.getStorageController());  BlockConsistencyGroup sourceGroup=dbClient.queryObject(BlockConsistencyGroup.class,source.getConsistencyGroup());  VirtualArray virtualArray=dbClient.queryObject(VirtualArray.class,target.getVirtualArray());  Project project=dbClient.queryObject(Project.class,target.getProject().getURI());  String CG_NAME_FORMAT="%s-Target-%s";  String cgName=String.format(CG_NAME_FORMAT,sourceGroup.getLabel(),virtualArray.getLabel());  List<BlockConsistencyGroup> groups=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,BlockConsistencyGroup.class,PrefixConstraint.Factory.getFullMatchConstraint(BlockConsistencyGroup.class,"label",cgName));  BlockConsistencyGroup newConsistencyGroup=null;  if (groups.isEmpty()) {    log.info("Creating target group: {}",cgName);    newConsistencyGroup=new BlockConsistencyGroup();    newConsistencyGroup.setId(URIUtil.createId(BlockConsistencyGroup.class));    newConsistencyGroup.setLabel(cgName);    newConsistencyGroup.setProject(new NamedURI(project.getId(),project.getLabel()));    newConsistencyGroup.setTenant(new NamedURI(project.getTenantOrg().getURI(),project.getTenantOrg().getName()));    StringBuffer label=new StringBuffer(sourceGroup.getLabel());    if (!sourceSystem.getUsingSmis80()) {      label.append(LABEL_SUFFIX_FOR_46X);    }    newConsistencyGroup.setAlternateLabel(label.toString());    dbClient.createObject(newConsistencyGroup);  } else {    newConsistencyGroup=groups.get(0);    log.info("Using existing target group: {}",newConsistencyGroup.getLabel());  }  for (  BlockObject targetObj : targetVolumes) {    targetObj.setConsistencyGroup(newConsistencyGroup.getId());    targetObj.setReplicationGroupInstance(newConsistencyGroup.getAlternateLabel());  }  dbClient.updateObject(targetVolumes);}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public boolean nextHeaderWasRead(){  return (this.nextHeader != null);}  }
class C{  public String numRulesToFindTipText(){  return "The number of rules to output";}  }
class C{  public static void initialize(){  final ToolboxLifecycleParticipant[] participants=getRegisteredTools();  Assert.isNotNull(participants);  for (int i=0; i < participants.length; i++) {    participants[i].initialize();  }}  }
class C{  public static void putInt(String property,int val){  SIMBRAIN_PREFERENCES.putInt(property,val);}  }
class C{  public Builder(RecognitionJobOptions options){  callbackUrl=options.callbackUrl;  events=options.events;  resultsTtl=options.resultsTtl;  userToken=options.userToken;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  ArrayListToItem oper=new ArrayListToItem();  CountTestSink itemSink=new CountTestSink();  oper.item.setSink(itemSink);  oper.beginWindow(0);  ArrayList<String> input=new ArrayList<String>();  input.add("a");  int numtuples=1000;  for (int i=0; i < numtuples; i++) {    oper.data.process(input);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",numtuples,itemSink.count);}  }
class C{  public static Optional<InputStream> openStream(final URI uri){  try {    return UrlStreams.openStream(uri.toURL());  } catch (  final MalformedURLException e) {    throw new IllegalStateException("Bad uri specified: " + uri,e);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void removeListener(final IDebuggerTemplateManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.382 -0400",hash_original_method="3E60C451BC527FA5E0EE5111E14B91C6",hash_generated_method="FA9A227518DD8FAF55840E8CD6E333C4") @Override public long skip(long n) throws IOException {  long toSkip=max >= 0 ? Math.min(n,max - pos) : n;  long skippedBytes=in.skip(toSkip);  pos+=skippedBytes;  return skippedBytes;}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return m_select;}  }
class C{  public DirectSpellChecker(){}  }
class C{  public boolean isColumnUpdateable(int index){  if (index < 0 || index >= m_columns.length)   return false;  return m_columns[index].IsUpdateable;}  }
class C{  synchronized public void clear(){  this.items.clear();  this.bits.clear();}  }
class C{  public GridTriple(@Nullable T t1,@Nullable T t2,@Nullable T t3){  super(t1,t2,t3);}  }
class C{  public static String toString(int x){  if (x == MIN_VALUE) {    return String.wrap("-2147483648");  }  char[] ch=new char[20];  int i=20 - 1, count=0;  boolean negative;  if (x < 0) {    negative=true;    x=-x;  } else {    negative=false;  }  for (; i >= 0; i--) {    ch[i]=(char)('0' + (x % 10));    x/=10;    count++;    if (x == 0) {      break;    }  }  if (negative) {    ch[--i]='-';    count++;  }  return new String(ch,i,count);}  }
class C{  public AuthorityKeyIdentifierStructure(PublicKey pubKey) throws InvalidKeyException {  super(fromKey(pubKey));}  }
class C{  public void mouseEntered(MouseEvent event){}  }
class C{  public void insertSelective(User record) throws SQLException {  sqlMapClient.insert("t_user.ibatorgenerated_insertSelective",record);}  }
class C{  public void enableDependency(Capability c){  if (doNotCheckCapabilities()) {    return;  }  if (c == Capability.NOMINAL_ATTRIBUTES) {    enableDependency(Capability.BINARY_ATTRIBUTES);  } else   if (c == Capability.BINARY_ATTRIBUTES) {    enableDependency(Capability.UNARY_ATTRIBUTES);  } else   if (c == Capability.UNARY_ATTRIBUTES) {    enableDependency(Capability.EMPTY_NOMINAL_ATTRIBUTES);  } else   if (c == Capability.NOMINAL_CLASS) {    enableDependency(Capability.BINARY_CLASS);  }  m_Dependencies.add(c);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.730 -0500",hash_original_method="FD99F31E2E5FFE52E771381277CA5731",hash_generated_method="68B07C7A80A5D78448CDD84F069CBA73") public void flush() throws IOException {  __client._flushOutputStream();}  }
class C{  public static byte[] encodeMPI(BigInteger value,boolean includeLength){  if (value.equals(BigInteger.ZERO)) {    if (!includeLength)     return new byte[]{}; else     return new byte[]{0x00,0x00,0x00,0x00};  }  boolean isNegative=value.compareTo(BigInteger.ZERO) < 0;  if (isNegative)   value=value.negate();  byte[] array=value.toByteArray();  int length=array.length;  if ((array[0] & 0x80) == 0x80)   length++;  if (includeLength) {    byte[] result=new byte[length + 4];    System.arraycopy(array,0,result,length - array.length + 3,array.length);    uint32ToByteArrayBE(length,result,0);    if (isNegative)     result[4]|=0x80;    return result;  } else {    byte[] result;    if (length != array.length) {      result=new byte[length];      System.arraycopy(array,0,result,1,array.length);    } else     result=array;    if (isNegative)     result[0]|=0x80;    return result;  }}  }
class C{  void notifyStartRowNotFound(){  keepBubble=true;  createErrorBubbleWindow(startRowSpinner,"io.dataimport.step.csv.format_specification.start_row_not_found");}  }
class C{  private void updateLegends(){  if (m_span == null) {    m_span=new JPanel();  }  JPanel padder=new JPanel();  JPanel padd2=new JPanel();  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));  LegendEntry tmp;  GridBagLayout gb=new GridBagLayout();  GridBagLayout gb2=new GridBagLayout();  GridBagConstraints constraints=new GridBagConstraints();  m_span.removeAll();  padder.setLayout(gb);  m_span.setLayout(gb2);  constraints.anchor=GridBagConstraints.CENTER;  constraints.gridx=0;  constraints.gridy=0;  constraints.weightx=5;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.insets=new Insets(0,0,0,0);  padder.add(m_span,constraints);  constraints.gridx=0;  constraints.gridy=1;  constraints.weightx=5;  constraints.fill=GridBagConstraints.BOTH;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.weighty=5;  constraints.insets=new Insets(0,0,0,0);  padder.add(padd2,constraints);  constraints.weighty=0;  setViewportView(padder);  constraints.anchor=GridBagConstraints.CENTER;  constraints.gridx=0;  constraints.gridy=0;  constraints.weightx=5;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.weighty=5;  constraints.insets=new Insets(2,4,2,4);  for (int i=0; i < m_plots.size(); i++) {    tmp=new LegendEntry(m_plots.get(i),i);    constraints.gridy=i;    m_span.add(tmp,constraints);  }}  }
class C{  @Override public URL find(String f){  URL u=FileUtil.findURL(f,"xml/layout","xml");  if (u == null) {    this.locateFileFailed(f);  }  return u;}  }
class C{  public void updateCrosshairY(double candidateY,int rangeAxisIndex){  double d=Math.abs(candidateY - this.anchorY);  if (d < this.distance) {    this.crosshairY=candidateY;    this.rangeAxisIndex=rangeAxisIndex;    this.distance=d;  }}  }
class C{  public void compress() throws DMLRuntimeException {  compress(1);}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){}  }
class C{  public static <T extends Annotation>T of(Class<T> type,Map<String,?> data){  Function<Map<String,?>,? extends Annotation> constructor=getConstructor(type);  return (T)constructor.apply(data);}  }
class C{  @Override public void next(Long sinceId,Callback<TimelineResult<Tweet>> cb){  createUserTimelineRequest(sinceId,null).enqueue(new TweetsCallback(cb));}  }
class C{  public static String capitalize(final String property){  final String rest=property.substring(1);  if (Character.isLowerCase(property.charAt(0)) && (rest.length() > 0) && Character.isUpperCase(rest.charAt(0))) {    return property;  }  return property.substring(0,1).toUpperCase() + rest;}  }
class C{  private int addPatternRun(final Stack stack,final char pattern[],int index){  final PatternRun run=new PatternRun();  final int start=index++;  if ('+' == pattern[index]) {    index++;  } else   if ('-' == pattern[index]) {    run.m_rightJustify=true;    index++;  }  if (Character.isDigit(pattern[index])) {    int total=0;    while (Character.isDigit(pattern[index])) {      total=total * 10 + (pattern[index] - '0');      index++;    }    run.m_minSize=total;  }  if (index < pattern.length && '.' == pattern[index]) {    index++;    if (Character.isDigit(pattern[index])) {      int total=0;      while (Character.isDigit(pattern[index])) {        total=total * 10 + (pattern[index] - '0');        index++;      }      run.m_maxSize=total;    }  }  if (index >= pattern.length || '{' != pattern[index]) {    throw new IllegalArgumentException("Badly formed pattern at character " + index);  }  int typeStart=index;  while (index < pattern.length && pattern[index] != ':' && pattern[index] != '}') {    index++;  }  int typeEnd=index - 1;  final String type=new String(pattern,typeStart + 1,typeEnd - typeStart);  run.m_type=getTypeIdFor(type);  if (index < pattern.length && pattern[index] == ':') {    index++;    while (index < pattern.length && pattern[index] != '}')     index++;    final int length=index - typeEnd - 2;    if (0 != length) {      run.m_format=new String(pattern,typeEnd + 2,length);    }  }  if (index >= pattern.length || '}' != pattern[index]) {    throw new IllegalArgumentException("Unterminated type in pattern at character " + index);  }  index++;  stack.push(run);  return index - start;}  }
class C{  public void generalApplied(@NotNull DebuggerSettingsCategory category){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.EXACT_QUANTIFIER__MIN:    setMin(MIN_EDEFAULT);  return;case RegularExpressionPackage.EXACT_QUANTIFIER__MAX:setMax(MAX_EDEFAULT);return;case RegularExpressionPackage.EXACT_QUANTIFIER__UNBOUNDED_MAX:setUnboundedMax(UNBOUNDED_MAX_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public final boolean isPackagePrivate(){  return !isPrivate() && !isPublic() && !isProtected();}  }
class C{  public <T>T createDtoFromJson(Reader json,Class<T> dtoInterface) throws IOException {  DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  StringBuilder sb=new StringBuilder();  BufferedReader br=new BufferedReader(json);  String line;  while ((line=br.readLine()) != null) {    sb.append(line);  }  return dtoProvider.fromJson(sb.toString());}  }
class C{  public static String toHexString(byte b){  return Integer.toHexString(toInt(b));}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void execute(Uri uri){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,uri);  } else {    execute(new Uri[]{uri});  }}  }
class C{  private static final String toHexString(final byte[] bs){  String hex="0123456789ABCDEF";  StringBuilder res=new StringBuilder();  for (  byte b : bs) {    res.append(hex.charAt(((b >>> 4) & 0xF)));    res.append(hex.charAt((b & 0xF)));  }  return res.toString();}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  private boolean doAcquireSharedNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public static void install(Plugin sourcePlugin,String version) throws IOException, InvalidDescriptionException, InvalidPluginException {  if (!(sourcePlugin instanceof JavaPlugin))   throw new IllegalArgumentException("sourcePlugin must be a JavaPlugin!");  if (Bukkit.getPluginManager().getPlugin(PLUGIN_NAME) != null)   return;  InputStream stream=null;  ReadableByteChannel channel=null;  FileOutputStream out=null;  String finalPath=null;  try {    String source=REPOSITORY_URL + '/' + GROUP_ID.replace(".","/")+ '/'+ ARTIFACT_ID+ '/'+ version+ ARTIFACT_ID+ '-'+ version+ ARTIFACT_SUFFIX+ '.'+ ARTIFACT_TYPE;    File callingPluginFile;    try {      callingPluginFile=(File)GET_PLUGIN_FILE.invoke(sourcePlugin);    } catch (    IllegalAccessException|InvocationTargetException e) {      throw new RuntimeException(e);    }    finalPath=callingPluginFile.getParentFile().getAbsolutePath() + File.separatorChar + ARTIFACT_ID+ '-'+ version+ '.'+ ARTIFACT_TYPE;    stream=new URL(source).openStream();    channel=Channels.newChannel(stream);    out=new FileOutputStream(finalPath);    out.getChannel().transferFrom(channel,0,Long.MAX_VALUE);  }  finally {    silentlyClose(stream,channel,out);  }  Bukkit.getPluginManager().loadPlugin(new File(finalPath));}  }
class C{  public static BigDecimal parseDecimal(String s){  return new BigDecimal(s);}  }
class C{  public boolean equals(GSSName other) throws GSSException {  if (this.isAnonymous() || other.isAnonymous())   return false;  if (other == this)   return true;  if (!(other instanceof GSSNameImpl))   return equals(gssManager.createName(other.toString(),other.getStringNameType()));  GSSNameImpl that=(GSSNameImpl)other;  GSSNameSpi myElement=this.mechElement;  GSSNameSpi element=that.mechElement;  if ((myElement == null) && (element != null)) {    myElement=this.getElement(element.getMechanism());  } else   if ((myElement != null) && (element == null)) {    element=that.getElement(myElement.getMechanism());  }  if (myElement != null && element != null) {    return myElement.equals(element);  }  if ((this.appNameType != null) && (that.appNameType != null)) {    if (!this.appNameType.equals(that.appNameType)) {      return false;    }    byte[] myBytes=null;    byte[] bytes=null;    try {      myBytes=(this.appNameStr != null ? this.appNameStr.getBytes("UTF-8") : this.appNameBytes);      bytes=(that.appNameStr != null ? that.appNameStr.getBytes("UTF-8") : that.appNameBytes);    } catch (    UnsupportedEncodingException e) {    }    return Arrays.equals(myBytes,bytes);  }  return false;}  }
class C{  public Color blue(int blue){  return rgba(red(),green(),blue,alpha());}  }
class C{  private void addTermFrequencies(Reader r,Map<String,Int> termFreqMap,String fieldName) throws IOException {  if (analyzer == null) {    throw new UnsupportedOperationException("To use MoreLikeThis without " + "term vectors, you must provide an Analyzer");  }  try (TokenStream ts=analyzer.tokenStream(fieldName,r)){    int tokenCount=0;    CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);    ts.reset();    while (ts.incrementToken()) {      String word=termAtt.toString();      tokenCount++;      if (tokenCount > maxNumTokensParsed) {        break;      }      if (isNoiseWord(word)) {        continue;      }      if (isSkipTerm(fieldName,word)) {        continue;      }      Int cnt=termFreqMap.get(word);      if (cnt == null) {        termFreqMap.put(word,new Int());      } else {        cnt.x++;      }    }    ts.end();  } }  }
class C{  @Ignore public static BooleanArray instance(boolean[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  private void initializeMap(int[] vals){  int size=Math.max(nextPowerOfTwo(vals.length) << 2,MAP_MIN_SIZE);  assert size > 0;  ParseResult finalRes;  ParseResult res1=parse(vals,size);  if (res1.collisions == 0)   finalRes=res1; else {    ParseResult res2=parse(vals,size * 2);    if (res2.collisions == 0)     finalRes=res2; else     finalRes=parse(vals,size * 4);  }  idToOrderData=finalRes.data;  idToOrderMask=maskForPowerOfTwo(idToOrderData.length / 2);}  }
class C{  private void clearItems(){  listContainer.setVisibility(View.GONE);  mItem.clear();  searchAdapter.notifyDataSetChanged();}  }
class C{  public static Class<?> loadClass(String className,ClassLoader loader) throws ClassNotFoundException {  Class<?> theClass=null;  if (primitives.containsKey(className)) {    return primitives.get(className);  }  int genericsStart=className.indexOf("<");  if (genericsStart != -1)   className=className.substring(0,genericsStart);  if (className.endsWith("[]")) {    if (Character.isLowerCase(className.charAt(0)) && className.indexOf(".") < 0) {      String prefix=className.substring(0,1).toUpperCase();      if (className.startsWith("long")) {        prefix="J";      } else       if (className.startsWith("boolean")) {        prefix="Z";      }      className="[" + prefix;    } else {      Class<?> arrayClass=loadClass(className.replace("[]",""),loader);      className="[L" + arrayClass.getName().replace("[]","") + ";";    }  }  if (classAlias.containsKey(className)) {    className=classAlias.get(className);  }  if (loader == null)   loader=Thread.currentThread().getContextClassLoader();  theClass=Class.forName(className,true,loader);  return theClass;}  }
class C{  public TomcatManager(URL url,String username,String password,String charset){  this.url=url;  this.username=username;  this.password=password;  this.charset=charset;  try {    md5=MessageDigest.getInstance("md5");  } catch (  NoSuchAlgorithmException e) {    throw new CargoException("Cannot get the MD5 digest for generating the Digest authentication headers",e);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public EncryptionDialog(Shell parentShell){  super(parentShell);}  }
class C{  @Override public void onExitAmbient(){  super.onExitAmbient();  mMapFragment.onExitAmbient();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("WebInfo[");  sb.append(getC_BPartner_ID());  sb.append("]");  return sb.toString();}  }
class C{  public void close() throws SQLException {  realClose(true);}  }
class C{  public BaseStunMessageEvent(StunStack stunStack,TransportAddress sourceAddress,Message message){  super(sourceAddress);  this.stunStack=stunStack;  this.message=message;}  }
class C{  public InfoHandler(final CoreContainer coreContainer){  this.coreContainer=coreContainer;  systemInfoHandler=new SystemInfoHandler(coreContainer);  loggingHandler=new LoggingHandler(coreContainer);}  }
class C{  public RealBuffer filter(RealBuffer buffer){  float[] samples=buffer.getSamples();  for (int x=0; x < samples.length; x++) {    samples[x]=filter(samples[x]);  }  return buffer;}  }
class C{  public void clearFilters(){  this.filters=new Vector<NodeFilter>();  this.shownNodes=allNodes;  if (this.refreshTimer != null) {    this.refreshTimer.stop();  }  this.refreshTimer=null;  NodeGraphic.setHighlightedNodes(null);  updateList();}  }
class C{  public IndexShardState recovering(String reason,RecoveryState.Type type,DiscoveryNode sourceNode) throws IndexShardStartedException, IndexShardRelocatedException, IndexShardRecoveringException, IndexShardClosedException {  return recovering(reason,new RecoveryState(shardId,shardRouting.primary(),type,sourceNode,localNode));}  }
class C{  public String toLowerCase(Locale locale){  for (int o=offset, end=offset + count; o < end; o++) {    char ch=value[o];    if (ch != Character.toLowerCase(ch)) {      char[] buffer=new char[count];      int i=o - offset;      System.arraycopy(value,offset,buffer,0,i);      if (!"tr".equals(locale.getLanguage())) {        while (i < count) {          buffer[i++]=Character.toLowerCase(value[o++]);        }      } else {        while (i < count) {          buffer[i++]=(ch=value[o++]) != 0x49 ? Character.toLowerCase(ch) : (char)0x131;        }      }      return new String(0,count,buffer);    }  }  return this;}  }
class C{  private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);  if (scrollDelta != 0) {    scrollBy(scrollDelta,0);  }}  }
class C{  public static int roundUpBits(final int bits){  return 1 << MathUtils.ceilPowerOf2Bits(bits - 1);}  }
class C{  public static void copy(File from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  public String toStringWithType(){  return toString(true);}  }
class C{  public static Sha256Hash twiceOf(byte[] contents){  return wrap(hashTwice(contents));}  }
class C{  private void push(List<ThreadGroupReference> tgl){  stack.push(tgl.iterator());  while (!stack.isEmpty() && !top().hasNext()) {    stack.pop();  }}  }
class C{  public BitemporalCondition ttTo(Object ttTo){  this.ttTo=ttTo;  return this;}  }
class C{  private void addKeybindCategorySeparator(JPanel panel){  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.CENTER;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,0,0);  gbc.gridx=0;  gbc.gridy=keybindButtonGridYCounter++;  keybindLabelGridYCounter++;  gbc.gridwidth=2;  panel.add(Box.createVerticalStrut(7),gbc);  JSeparator jsep=new JSeparator(SwingConstants.HORIZONTAL);  panel.add(jsep,gbc);  panel.add(Box.createVerticalStrut(7),gbc);}  }
class C{  public void resolve(MethodScope scope){  internalResolve(scope);}  }
class C{  public TDoubleDoubleHashMap(int initialCapacity,TDoubleHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  private void parseProperties(final String propertiesAsString){  final String[] propertyEntries=propertiesAsString.split("\\r?\\n");  for (  final String entry : propertyEntries) {    readPropertyEntry(entry);  }}  }
class C{  public MessageBuilder appendCodeBlock(String text,String language){  builder.append("```").append(language).append('\n').append(text).append("\n```");  return this;}  }
class C{  public void dragGestureChanged(DragSourceDragEvent dsde){  System.out.println("[Source] dragGestureChanged");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());  dropAction=dsde.getUserAction() & dsde.getDropAction();  System.out.println("dropAction = " + dropAction);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.KEY_DEFINITION___DEFAULT_KEY_1:    getDefaultKey_1().clear();  getDefaultKey_1().addAll((Collection<? extends String>)newValue);return;case UmplePackage.KEY_DEFINITION___KEY_1:getKey_1().clear();getKey_1().addAll((Collection<? extends Key_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public RoutingAllocation.Result reroute(ClusterState clusterState){  return reroute(clusterState,false);}  }
class C{  private int allocHigh(MemoryChunk memoryChunk,int size,int addrAlignment){  int addr=Utilities.alignDown(memoryChunk.addr + memoryChunk.size,addrAlignment) - size;  return alloc(memoryChunk,addr,size);}  }
class C{  public void scrollByBlock(int direction){synchronized (slider) {    int blockIncrement=(slider.getMaximum() - slider.getMinimum()) / 10;    if (blockIncrement <= 0 && slider.getMaximum() > slider.getMinimum()) {      blockIncrement=1;    }    int delta=blockIncrement * ((direction > 0) ? POSITIVE_SCROLL : NEGATIVE_SCROLL);    if (upperThumbSelected) {      int oldValue=((RangeSlider)slider).getUpperValue();      ((RangeSlider)slider).setUpperValue(oldValue + delta);    } else {      int oldValue=slider.getValue();      slider.setValue(oldValue + delta);    }  }}  }
class C{  int throwInvalid(String name,int offset) throws ParseException {  throw new ParseException("Invalid " + name + " value",offset);}  }
class C{  public static FullScreenImageFragment newInstance(Photo photo){  FullScreenImageFragment fragment=new FullScreenImageFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_GALLERY_PHOTO,Parcels.wrap(photo));  fragment.setArguments(args);  return fragment;}  }
class C{  protected void init(final VelocityEventRenderer velocityRenderer,final HttpClient httpClient){  this.velocityRenderer=velocityRenderer;  this.httpClient=httpClient;  if (getHttpAuthentication() != null) {    CredentialsProvider credsProvider=new BasicCredentialsProvider();    credsProvider.setCredentials(new AuthScope(AuthScope.ANY_HOST,AuthScope.ANY_PORT),new UsernamePasswordCredentials(getHttpAuthentication().getUsername(),getHttpAuthentication().getPassword()));    HttpClientContext context=HttpClientContext.create();    context.setCredentialsProvider(credsProvider);  }}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  ObjectOutputStream.PutField fields=out.putFields();  fields.put("language",baseLocale.getLanguage());  fields.put("script",baseLocale.getScript());  fields.put("country",baseLocale.getRegion());  fields.put("variant",baseLocale.getVariant());  fields.put("extensions",localeExtensions == null ? "" : localeExtensions.getID());  fields.put("hashcode",-1);  out.writeFields();}  }
class C{  public void test_ticket_1105_quads_select3() throws Exception {  new TestHelper("ticket_1105_quads_select3","ticket_1105_select3.rq","ticket_1105.trig","ticket_1105.srx").runTest();}  }
class C{  public LensMagnificationGraphMousePlugin(float floor,float ceiling,float delta){  this(MouseEvent.CTRL_MASK,floor,ceiling,delta);}  }
class C{  private void paintCells(SeaGlassContext context,Graphics g,int rMin,int rMax,int cMin,int cMax){  JTableHeader header=table.getTableHeader();  TableColumn draggedColumn=(header == null) ? null : header.getDraggedColumn();  TableColumnModel cm=table.getColumnModel();  int columnMargin=cm.getColumnMargin();  Rectangle cellRect;  TableColumn aColumn;  int columnWidth;  if (table.getComponentOrientation().isLeftToRight()) {    for (int row=rMin; row <= rMax; row++) {      cellRect=table.getCellRect(row,cMin,false);      for (int column=cMin; column <= cMax; column++) {        aColumn=cm.getColumn(column);        columnWidth=aColumn.getWidth();        cellRect.width=columnWidth - columnMargin;        if (aColumn != draggedColumn) {          paintCell(context,g,cellRect,row,column);        }        cellRect.x+=columnWidth;      }    }  } else {    for (int row=rMin; row <= rMax; row++) {      cellRect=table.getCellRect(row,cMin,false);      aColumn=cm.getColumn(cMin);      if (aColumn != draggedColumn) {        columnWidth=aColumn.getWidth();        cellRect.width=columnWidth - columnMargin;        paintCell(context,g,cellRect,row,cMin);      }      for (int column=cMin + 1; column <= cMax; column++) {        aColumn=cm.getColumn(column);        columnWidth=aColumn.getWidth();        cellRect.width=columnWidth - columnMargin;        cellRect.x-=columnWidth;        if (aColumn != draggedColumn) {          paintCell(context,g,cellRect,row,column);        }      }    }  }  if (draggedColumn != null) {    paintDraggedArea(context,g,rMin,rMax,draggedColumn,header.getDraggedDistance());  }  rendererPane.removeAll();}  }
class C{  public static List<SecurityGroupEntity> fromApiRepresentation(List<SecurityGroup> securityGroups){  return securityGroups.stream().map(null).collect(Collectors.toList());}  }
class C{  public int nextInt(){  current*=0x278DDE6D;  return current;}  }
class C{  @WorkerThread public long subscribeToDeviceEvents(@Nullable String eventNamePrefix,String deviceID,ParticleEventHandler eventHandler) throws IOException {  return eventsDelegate.subscribeToDeviceEvents(eventNamePrefix,deviceID,eventHandler);}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.INFO_MODEL_MAPPING_RULE;}  }
class C{  @SuppressWarnings("unchecked") private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=(E[])new Object[initialCapacity];}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public Object validateValue() throws Throwable {  if (tag == ERROR) {    rethrowError();  }  if (value == NO_VALUE) {    return null;  }  if (elementType == value.getClass() || elementType.isInstance(value)) {    return copyValue();  } else {    throw new AnnotationTypeMismatchException(definingMethod,value.getClass().getName());  }}  }
class C{  protected boolean hasSafeWinner(double resultUtility){  return resultUtility <= utilMin || resultUtility >= utilMax;}  }
class C{  public ComparatorTransformer(boolean reverse){  this.reverse=reverse;}  }
class C{  protected static final void remoteTearDown(){  JUnit4CacheTestCase.remoteTearDown();}  }
class C{  private BasicBlock generateExplicitBoundCheck(Instruction boundCheckInstr,Operand minIndexValue,Operand maxIndexValue,HashMap<Register,Register> optimalRegMap,BasicBlock block,BasicBlock unoptimizedLoopEntry){  boolean lowerBoundTestRedundant;  boolean upperBoundTestRedundant;{    lowerBoundTestRedundant=((minIndexValue.isIntConstant() && (minIndexValue.asIntConstant().value >= 0)) || ((getConstantAdjustedArrayLengthRef(minIndexValue) != null) && (getConstantAdjustedArrayLengthDistance(minIndexValue) >= 0)));    Operand maxIndexArrayLengthRef=getConstantAdjustedArrayLengthRef(maxIndexValue);    upperBoundTestRedundant=((maxIndexArrayLengthRef != null) && maxIndexArrayLengthRef.similar(BoundsCheck.getRef(boundCheckInstr)) && (getConstantAdjustedArrayLengthDistance(maxIndexValue) <= 0));  }  RegisterOperand guardResult=BoundsCheck.getGuardResult(boundCheckInstr).copyRO();  guardResult.setRegister(optimalRegMap.get(guardResult.getRegister()));  Operand origGuard=BoundsCheck.getGuard(boundCheckInstr);  Operand guard=origGuard.copy();  if (origGuard.isRegister() && optimalRegMap.containsKey(origGuard.asRegister().getRegister())) {    guard.asRegister().setRegister(optimalRegMap.get(origGuard.asRegister().getRegister()));  }  if (lowerBoundTestRedundant && upperBoundTestRedundant) {    Instruction move=Move.create(GUARD_MOVE,guardResult,guard);    move.setBytecodeIndex(SYNTH_LOOP_VERSIONING_BCI);    block.appendInstruction(move);  } else {    RegisterOperand array_length=ir.regpool.makeTempInt();    Instruction array_length_instr=GuardedUnary.create(ARRAYLENGTH,array_length,AnnotatedLSTNode.follow(BoundsCheck.getRef(boundCheckInstr)).copy(),guard);    array_length_instr.setBytecodeIndex(SYNTH_LOOP_VERSIONING_BCI);    block.appendInstruction(array_length_instr);    if (!lowerBoundTestRedundant) {      RegisterOperand lowerBoundGuard=upperBoundTestRedundant ? guardResult : ir.regpool.makeTempValidation();      Instruction branch=IfCmp.create(INT_IFCMP,lowerBoundGuard,minIndexValue.copy(),array_length.copyRO(),ConditionOperand.LESS(),unoptimizedLoopEntry.makeJumpTarget(),BranchProfileOperand.unlikely());      branch.setBytecodeIndex(SYNTH_LOOP_VERSIONING_BCI);      block.appendInstruction(branch);      block.insertOut(unoptimizedLoopEntry);      BasicBlock new_block=block.createSubBlock(SYNTH_LOOP_VERSIONING_BCI,ir);      BasicBlock temp=(BasicBlock)block.next;      ir.cfg.breakCodeOrder(block,temp);      ir.cfg.linkInCodeOrder(block,new_block);      ir.cfg.linkInCodeOrder(new_block,temp);      block.insertOut(new_block);      block=new_block;    }    if (!upperBoundTestRedundant) {      Instruction branch=IfCmp.create(INT_IFCMP,guardResult,maxIndexValue.copy(),array_length.copyRO(),ConditionOperand.GREATER(),unoptimizedLoopEntry.makeJumpTarget(),BranchProfileOperand.unlikely());      branch.setBytecodeIndex(SYNTH_LOOP_VERSIONING_BCI);      block.appendInstruction(branch);      block.insertOut(unoptimizedLoopEntry);      BasicBlock new_block=block.createSubBlock(SYNTH_LOOP_VERSIONING_BCI,ir);      BasicBlock temp=(BasicBlock)block.next;      ir.cfg.breakCodeOrder(block,temp);      ir.cfg.linkInCodeOrder(block,new_block);      ir.cfg.linkInCodeOrder(new_block,temp);      block.insertOut(new_block);      block=new_block;    }  }  return block;}  }
class C{  public static JavaClass lookupSystemClass(@Nonnull String className) throws ClassNotFoundException {  requireNonNull(className,"className is null");  if (originalRepository == null) {    throw new IllegalStateException("originalRepository is null");  }  JavaClass clazz=originalRepository.findClass(className);  if (clazz != null) {    return clazz;  }  return AnalysisContext.currentAnalysisContext().lookupClass(className);}  }
class C{  private void pickOrder(){  BasicBlockList blocks=method.getBlocks();  int sz=blocks.size();  int maxLabel=blocks.getMaxLabel();  int[] workSet=Bits.makeBitSet(maxLabel);  int[] tracebackSet=Bits.makeBitSet(maxLabel);  for (int i=0; i < sz; i++) {    BasicBlock one=blocks.get(i);    Bits.set(workSet,one.getLabel());  }  int[] order=new int[sz];  int at=0;  for (int label=method.getFirstLabel(); label != -1; label=Bits.findFirst(workSet,0)) {    traceBack:     for (; ; ) {      IntList preds=method.labelToPredecessors(label);      int psz=preds.size();      for (int i=0; i < psz; i++) {        int predLabel=preds.get(i);        if (Bits.get(tracebackSet,predLabel)) {          break;        }        if (!Bits.get(workSet,predLabel)) {          continue;        }        BasicBlock pred=blocks.labelToBlock(predLabel);        if (pred.getPrimarySuccessor() == label) {          label=predLabel;          Bits.set(tracebackSet,label);          continue traceBack;        }      }      break;    }    while (label != -1) {      Bits.clear(workSet,label);      Bits.clear(tracebackSet,label);      order[at]=label;      at++;      BasicBlock one=blocks.labelToBlock(label);      BasicBlock preferredBlock=blocks.preferredSuccessorOf(one);      if (preferredBlock == null) {        break;      }      int preferred=preferredBlock.getLabel();      int primary=one.getPrimarySuccessor();      if (Bits.get(workSet,preferred)) {        label=preferred;      } else       if ((primary != preferred) && (primary >= 0) && Bits.get(workSet,primary)) {        label=primary;      } else {        IntList successors=one.getSuccessors();        int ssz=successors.size();        label=-1;        for (int i=0; i < ssz; i++) {          int candidate=successors.get(i);          if (Bits.get(workSet,candidate)) {            label=candidate;            break;          }        }      }    }  }  if (at != sz) {    throw new RuntimeException("shouldn't happen");  }  this.order=order;}  }
class C{  public ReplDBMSEvent createEvent(long seqno,short fragNo,boolean lastFrag,String shardId){  return createEvent(seqno,fragNo,lastFrag,shardId,new Timestamp(System.currentTimeMillis()));}  }
class C{  public GZipRequest(String url,Response.Listener<String> listener,Response.ErrorListener errorListener){  super(url,listener,errorListener);}  }
class C{  public static Struct toStruct(Argument arg){  Struct trg=new StructImpl();  StructImpl.copy(arg,trg,false);  return trg;}  }
class C{  public static double product(double[] v){  int m=v.length;  double p=1;  for (int i=0; i < m; i++)   p*=v[i];  return p;}  }
class C{  private void saveTransLogStack(TransManager manager) throws CacheException, DaoException {  Set<String> keySet=manager.getIdSet();  Iterator<String> it=keySet.iterator();  TransLogStackPojo transLogStackPojo=null;  Integer seq=0;  while (it.hasNext()) {    transLogStackPojo=new TransLogStackPojo();    String stackId=it.next();    transLogStackPojo.setStackId(stackId);    transLogStackPojo.setSeq(seq);    transLogStackPojo.setTransId(manager.getStackId());    JSONObject logJson=(JSONObject)JSONObject.parse(CacheHelper.getCache().getValue(CacheConstant.CACHE_LOGS,stackId));    transLogStackPojo.setMethod(logJson.getString("method"));    transLogStackPojo.setParentStackId(logJson.getString("parentStackId"));    transLogStackPojo.setBeginTime(new Date(logJson.getLong("beginTime")));    transLogStackPojo.setEndTime(new Date(logJson.getLong("endTime")));    transLogStackPojo.setConsumeTime(logJson.getInteger("consumeTime"));    transLogStackPojo.setInputParam(logJson.getString("params"));    transLogStackPojo.setOutputParam(logJson.getString("returnValue"));    transLogStackPojo.setIsSuccess("N");    seq++;    transLogDao.save(transLogStackPojo);  }}  }
class C{  public DOMX509IssuerSerial(Element isElem) throws MarshalException {  Element iNElem=DOMUtils.getFirstChildElement(isElem,"X509IssuerName");  Element sNElem=DOMUtils.getNextSiblingElement(iNElem,"X509SerialNumber");  issuerName=iNElem.getFirstChild().getNodeValue();  serialNumber=new BigInteger(sNElem.getFirstChild().getNodeValue());}  }
class C{  @Override public int available() throws IOException {  return getAvailable();}  }
class C{  @Override public void onDestroy(){synchronized (mThread) {    mReady=false;    mQuiting=true;    mThread.notify();  }  super.onDestroy();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean changedFromFreeToChargeablePriceModel(PriceModel priceModel,SupportedCurrency oldCurrencyCode){  return oldCurrencyCode == null && priceModel.getCurrency() != null;}  }
class C{  private void clearPatterns(){  patterns.clear();}  }
class C{  private static boolean findActivity(List<LauncherActivityInfoCompat> apps,ComponentName component){  for (  LauncherActivityInfoCompat info : apps) {    if (info.getComponentName().equals(component)) {      return true;    }  }  return false;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this);}  }
class C{  public static void main(final String... args) throws IOException {  new FtCli(new App(new File(System.getProperty("user.dir"))),args).start(Exit.NEVER);}  }
class C{  public void lock(Properties ctx,int Record_ID,boolean lock){  int AD_User_ID=Env.getContextAsInt(ctx,"#AD_User_ID");  log.fine("Lock=" + lock + ", AD_User_ID="+ AD_User_ID+ ", AD_Table_ID="+ m_vo.AD_Table_ID+ ", Record_ID="+ Record_ID);  MPrivateAccess access=MPrivateAccess.get(ctx,AD_User_ID,m_vo.AD_Table_ID,Record_ID);  if (access == null)   access=new MPrivateAccess(ctx,AD_User_ID,m_vo.AD_Table_ID,Record_ID);  access.setIsActive(lock);  access.saveEx();  loadLocks();}  }
class C{  @Override public void applyFix(@NotNull Project project,@NotNull ProblemDescriptor descriptor){  PsiElement element=descriptor.getPsiElement();  if (!(element instanceof PsiMethod)) {    return;  }  PsiMethod method=(PsiMethod)element;  method.setName(method.getName() + "_1");}  }
class C{  public boolean stopWifi(){  try {    Method method=mWifiManager.getClass().getMethod("stopWifi");    return (Boolean)method.invoke(mWifiManager);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public static void unlink(final InstructionGraphNode source,final InstructionGraphNode target,final InstructionGraphEdge edge){  source.outgoingEdges.remove(edge);  target.incomingEdges.remove(edge);}  }
class C{  protected String createUniqueIdentifier(){  return new UID().toString().replace(':','_').replace('-','_');}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe epsilon for round-off error.\n" + "\t(default 1.0e-12)","P",1,"-P <double>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public Builder url(URL url){  if (url == null) {    throw new IllegalArgumentException("url must not be null.");  }  if (this.url != null) {    throw new IllegalStateException("url already set.");  }  this.url=url;  return this;}  }
class C{  public static Color4b[] createColorArray(int size,Color color){  Color4b[] colors=new Color4b[size];  for (int i=0; i < size; i++) {    colors[i]=new Color4b(color);  }  return colors;}  }
class C{  public boolean addOrUpdateDetectUrlFile(DetectUrlFileInfo detectUrlFileInfo){  if (detectUrlFileInfo == null) {    return false;  }  String url=detectUrlFileInfo.getUrl();  if (!UrlUtil.isUrl(url)) {    return false;  }  DetectUrlFileInfo urlFileInfo=mDetectUrlFileInfoMap.get(url);synchronized (mModifyLock) {    if (urlFileInfo != null) {      urlFileInfo.update(detectUrlFileInfo);      return true;    } else {      mDetectUrlFileInfoMap.put(url,detectUrlFileInfo);      return true;    }  }}  }
class C{  int[] alloc2(){  return new int[10];}  }
class C{  private static int findAnyZero(double[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    double middleValue=a[middle];    if (middleValue < 0.0d) {      low=middle + 1;    } else     if (middleValue > 0.0d) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,ObjectStreamClass desc,int ncycles) throws Exception {  for (int i=0; i < ncycles; i++) {    sbuf.reset();    oout.reset();    oout.writeObject(desc);    oout.flush();    oin.readObject();  }}  }
class C{  private void loadInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD),index);}  }
class C{  @Override public void close(){  super.close();}  }
class C{  private void addDockingCell(int[] dockInsets,int side,CompWrap cw){  int r, c, spanx=1, spany=1;switch (side) {case 0:case 2:    r=side == 0 ? dockInsets[0]++ : dockInsets[2]--;  c=dockInsets[1];spanx=dockInsets[3] - dockInsets[1] + 1;colIndexes.add(new Integer(dockInsets[3]));break;case 1:case 3:c=side == 1 ? dockInsets[1]++ : dockInsets[3]--;r=dockInsets[0];spany=dockInsets[2] - dockInsets[0] + 1;rowIndexes.add(new Integer(dockInsets[2]));break;default :throw new IllegalArgumentException("Internal error 123.");}rowIndexes.add(new Integer(r));colIndexes.add(new Integer(c));grid.put(new Integer((r << 16) + c),new Cell(cw,spanx,spany,spanx > 1));}  }
class C{  public static void sort(final CommonIndex primary,final CommonIndex secondary,final long start,final long length){  if (length < 0) {    throw new IllegalArgumentException("Length is negative: " + length);  }  if (start < 0) {    throw new IllegalArgumentException("Start is negative: " + start);  }  final long end=start + length;  if (primary.length() < end || secondary.length() < end) {    throw new IllegalArgumentException("Arrays are too short");  }  sort(primary,start,length,new Swapper(primary,secondary));}  }
class C{  public void testBug71396() throws Exception {  final String queryLimitClause="SELECT * FROM testBug71396 LIMIT 2";  final String queryLimitClauseInJoin="SELECT * FROM testBug71396 A JOIN (SELECT * FROM testBug71396 LIMIT 2) B ON A.c != B.c";  final String queryLimitInQuotes="SELECT * FROM testBug71396 WHERE c != 'Unlimited'";  final String queryLimitInComment="SELECT * FROM testBug71396 -- Unlimited";  final String queryNoLimit="SELECT * FROM testBug71396";  final String[] queries=new String[]{queryLimitClause,queryLimitClauseInJoin,queryLimitInQuotes,queryLimitInComment,queryNoLimit};  Connection testConn;  Statement testStmt;  ResultSet testRS;  PreparedStatement testPStmtSet[];  createTable("testBug71396","(c VARCHAR(5))");  this.stmt.execute("INSERT INTO testBug71396 VALUES ('One'), ('Two'), ('Three')");  testConn=getConnectionWithProps("");  testBug71396StatementMultiCheck(testConn,queries,new int[]{2,4,3,3,3});  testStmt=testBug71396StatementInit(testConn,1);  testBug71396StatementMultiCheck(testStmt,queries,new int[]{1,1,1,1,1});  testBug71396StatementMultiCheck(testConn,queries,new int[]{2,4,3,3,3});  testBug71396StatementMultiCheck(testStmt,queries,new int[]{1,1,1,1,1});  testStmt.close();  testConn.close();  testConn=getConnectionWithProps("");  testBug71396PrepStatementMultiCheck(testConn,queries,new int[]{2,4,3,3,3});  testStmt=testBug71396StatementInit(testConn,1);  testPStmtSet=testBug71396PrepStatementInit(testConn,queries,1);  testBug71396PrepStatementMultiCheck(testPStmtSet,queries,new int[]{1,1,1,1,1});  testBug71396PrepStatementMultiCheck(testConn,queries,new int[]{2,4,3,3,3});  testBug71396PrepStatementMultiCheck(testPStmtSet,queries,new int[]{1,1,1,1,1});  testBug71396PrepStatementClose(testPStmtSet);  testStmt.close();  testConn.close();  testConn=getConnectionWithProps("useServerPrepStmts=true");  testBug71396PrepStatementMultiCheck(testConn,queries,new int[]{2,4,3,3,3});  testStmt=testBug71396StatementInit(testConn,1);  testPStmtSet=testBug71396PrepStatementInit(testConn,queries,1);  testBug71396PrepStatementMultiCheck(testPStmtSet,queries,new int[]{1,1,1,1,1});  testBug71396PrepStatementMultiCheck(testConn,queries,new int[]{2,4,3,3,3});  testBug71396PrepStatementMultiCheck(testPStmtSet,queries,new int[]{1,1,1,1,1});  testBug71396PrepStatementClose(testPStmtSet);  testStmt.close();  testConn.close();  testConn=getConnectionWithProps("maxRows=2");  testBug71396StatementMultiCheck(testConn,queries,new int[]{2,2,2,2,2});  testStmt=testBug71396StatementInit(testConn,1);  testBug71396StatementMultiCheck(testStmt,queries,new int[]{1,1,1,1,1});  testBug71396StatementMultiCheck(testConn,queries,new int[]{2,2,2,2,2});  testBug71396StatementMultiCheck(testStmt,queries,new int[]{1,1,1,1,1});  testStmt.close();  testConn.close();  testConn=getConnectionWithProps("maxRows=2");  testBug71396PrepStatementMultiCheck(testConn,queries,new int[]{2,2,2,2,2});  testStmt=testBug71396StatementInit(testConn,1);  testPStmtSet=testBug71396PrepStatementInit(testConn,queries,1);  testBug71396PrepStatementMultiCheck(testPStmtSet,queries,new int[]{1,1,1,1,1});  testBug71396PrepStatementMultiCheck(testConn,queries,new int[]{2,2,2,2,2});  testBug71396PrepStatementMultiCheck(testPStmtSet,queries,new int[]{1,1,1,1,1});  testBug71396PrepStatementClose(testPStmtSet);  testStmt.close();  testConn.close();  testConn=getConnectionWithProps("maxRows=2,useServerPrepStmts=true");  testBug71396PrepStatementMultiCheck(testConn,queries,new int[]{2,2,2,2,2});  testStmt=testBug71396StatementInit(testConn,1);  testPStmtSet=testBug71396PrepStatementInit(testConn,queries,1);  testBug71396PrepStatementMultiCheck(testPStmtSet,queries,new int[]{1,1,1,1,1});  testBug71396PrepStatementMultiCheck(testConn,queries,new int[]{2,2,2,2,2});  testBug71396PrepStatementMultiCheck(testPStmtSet,queries,new int[]{1,1,1,1,1});  testBug71396PrepStatementClose(testPStmtSet);  testStmt.close();  testConn.close();  testBug71396MultiSettingsCheck("",-1,1,1);  testBug71396MultiSettingsCheck("",-1,2,2);  testBug71396MultiSettingsCheck("",1,1,1);  testBug71396MultiSettingsCheck("",1,2,1);  testBug71396MultiSettingsCheck("",2,1,1);  testBug71396MultiSettingsCheck("",2,2,2);  testBug71396MultiSettingsCheck("maxRows=1",-1,1,1);  testBug71396MultiSettingsCheck("maxRows=1",-1,2,1);  testBug71396MultiSettingsCheck("maxRows=1",1,1,1);  testBug71396MultiSettingsCheck("maxRows=1",1,2,1);  testBug71396MultiSettingsCheck("maxRows=1",2,1,1);  testBug71396MultiSettingsCheck("maxRows=1",2,2,2);  testBug71396MultiSettingsCheck("maxRows=2",-1,1,1);  testBug71396MultiSettingsCheck("maxRows=2",-1,2,2);  testBug71396MultiSettingsCheck("maxRows=2",1,1,1);  testBug71396MultiSettingsCheck("maxRows=2",1,2,1);  testBug71396MultiSettingsCheck("maxRows=2",2,1,1);  testBug71396MultiSettingsCheck("maxRows=2",2,2,2);  createUser("'testBug71396User'@'%'","IDENTIFIED BY 'testBug71396User'");  this.stmt.execute("GRANT SELECT ON *.* TO 'testBug71396User'@'%'");  testConn=getConnectionWithProps("");  testStmt=testBug71396StatementInit(testConn,5);  ((MySQLConnection)testConn).changeUser("testBug71396User","testBug71396User");  Statement testStmtTmp=testConn.createStatement();  testRS=testStmtTmp.executeQuery("SELECT CURRENT_USER(), @@SESSION.SQL_SELECT_LIMIT");  assertTrue(testRS.next());  assertEquals("testBug71396User@%",testRS.getString(1));  assertTrue(String.format("expected:higher than<%d> but was:<%s>",Integer.MAX_VALUE,testRS.getBigDecimal(2)),testRS.getBigDecimal(2).compareTo(new BigDecimal(Integer.MAX_VALUE)) == 1);  testRS.close();  testStmtTmp.close();  testRS=testStmt.executeQuery("SELECT CURRENT_USER(), @@SESSION.SQL_SELECT_LIMIT");  assertTrue(testRS.next());  assertEquals("testBug71396User@%",testRS.getString(1));  assertEquals(new BigDecimal(5),testRS.getBigDecimal(2));  testRS.close();  testStmt.close();  testConn.close();  testConn=getConnectionWithProps("");  testStmt=testBug71396StatementInit(testConn,5);  ((MySQLConnection)testConn).createNewIO(true);  testStmtTmp=testConn.createStatement();  testRS=testStmtTmp.executeQuery("SELECT @@SESSION.SQL_SELECT_LIMIT");  assertTrue(testRS.next());  assertTrue(String.format("expected:higher than<%d> but was:<%s>",Integer.MAX_VALUE,testRS.getBigDecimal(1)),testRS.getBigDecimal(1).compareTo(new BigDecimal(Integer.MAX_VALUE)) == 1);  testRS.close();  testStmtTmp.close();  testRS=testStmt.executeQuery("SELECT @@SESSION.SQL_SELECT_LIMIT");  assertTrue(testRS.next());  assertEquals(new BigDecimal(5),testRS.getBigDecimal(1));  testRS.close();  testStmt.close();  testConn.close();}  }
class C{  protected void closeSocketAndStreams(){  LOG.trace("enter HttpConnection.closeSockedAndStreams()");  isOpen=false;  lastResponseInputStream=null;  if (null != outputStream) {    final OutputStream temp=outputStream;    outputStream=null;    try {      temp.close();    } catch (    final Throwable ex) {      LOG.debug("Exception caught when closing output",ex);    }  }  if (null != inputStream) {    final InputStream temp=inputStream;    inputStream=null;    try {      temp.close();    } catch (    final Throwable ex) {      LOG.debug("Exception caught when closing input",ex);    }  }  if (null != socket) {    final Socket temp=socket;    socket=null;    if (!temp.isClosed()) {      try {        temp.close();      } catch (      final Throwable ex) {        LOG.debug("Exception caught when closing socket",ex);      }    }  }  tunnelEstablished=false;  usingSecureSocket=false;}  }
class C{  public void testBug5012() throws Exception {  PreparedStatement pStmt=null;  String valueAsString="12345.12";  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug5012");    this.stmt.executeUpdate("CREATE TABLE testBug5012(field1 DECIMAL(10,2))");    this.stmt.executeUpdate("INSERT INTO testBug5012 VALUES (" + valueAsString + ")");    pStmt=this.conn.prepareStatement("SELECT field1 FROM testBug5012");    this.rs=pStmt.executeQuery();    assertTrue(this.rs.next());    assertEquals(new BigDecimal(valueAsString),this.rs.getBigDecimal(1));  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug5012");    if (pStmt != null) {      pStmt.close();    }  }}  }
class C{  protected boolean[] canHandleClassAsNthAttribute(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int classIndex){  if (classIndex == TestInstances.CLASS_IS_LAST) {    print("class attribute as last attribute");  } else {    print("class attribute as " + (classIndex + 1) + ". attribute");  }  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,classIndex,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  @Deprecated public void collapseAll(){  view.collapseAll();}  }
class C{  public boolean allow(SearchResultDataLine line){  for (int i=0; i < delegates.size(); i++) {    if (!delegates.get(i).allow(line))     return false;  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean verify(){  checksum=checksum & 0xff;  log.debug("verify checksum is " + checksum);  return 0xff == checksum;}  }
class C{  public static ThreadPoolExecutor newCachedThreadPool(ThreadFactory threadFactory){  return newThreadPoolExecutor(0,Integer.MAX_VALUE,DEFAULT_THREAD_POOL_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  public void listAllAsync(final FutureCallback<ResourceList<Tenant>> responseCallback) throws IOException {  listByNameAsync(null,responseCallback);}  }
class C{  public int size(int taskId){  return queues.get(taskId).size();}  }
class C{  protected UTF8String[] array(UTF8String[] array,int stringLength){  boolean resetIndexSaved=_resetIndex;  if (_resetIndex) {    _index=0;    _resetIndex=false;  }  for (int i=0; i < array.length; i++) {    array[i]=new UTF8String(stringLength);  }  _resetIndex=resetIndexSaved;  return array;}  }
class C{  public boolean isToJoinAnd(){  if (m_toJoinAnd == null && getPP_Order_Next_ID() != 0) {    MPPOrderNode next=MPPOrderNode.get(getCtx(),getPP_Order_Next_ID(),get_TrxName());    setToJoinAnd(MPPOrderNode.JOINELEMENT_AND.equals(next.getJoinElement()));  }  if (m_toJoinAnd != null)   return m_toJoinAnd.booleanValue();  return false;}  }
class C{  public byte[] decrypt(byte[] iv,byte[] data) throws IntegrityException {  if (data.length % blockSize != 0) {    throw new IntegrityException("Incorrect data size");  }  if (iv.length != blockSize) {    throw new IntegrityException("Incorrect iv size");  }  byte[] res=new byte[data.length];  decrypt(iv,data,res);  return res;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PagesPerMinute);}  }
class C{  public boolean isValid(){  return true;}  }
class C{  public Task delete(String id) throws IOException {  String path=String.format("%s/%s",getBasePath(),id);  HttpResponse response=this.restClient.perform(RestClient.Method.DELETE,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public void reset(){  _unManagedVolumeUrisToProcessIterator=_unManagedVolumeUrisToProcess.iterator();  _currentUnManagedVolumeUri=null;}  }
class C{  public void removeAttachedCouplings(final Attribute attribute){  for (  Coupling<?> coupling : getCouplings()) {    if (attribute instanceof Consumer<?>) {      if (coupling.getConsumer() == attribute) {        removeCoupling(coupling);      }    }    if (attribute instanceof Producer<?>) {      if (coupling.getProducer() == attribute) {        removeCoupling(coupling);      }    }  }}  }
class C{  public static int nextClearBit(long v,int start){  if (start >= Long.SIZE) {    return -1;  }  long cur=~v & (LONG_ALL_BITS << start);  if (cur == 0) {    return -1;  }  return Long.numberOfTrailingZeros(cur);}  }
class C{  public void openXml() throws IOException {  writeRaw("<?xml version=\"1.0\" encoding=\"" + encoding + "\" ?>\n");}  }
class C{  protected String sanitize(String s){  String result;  result=s;  result=result.replaceAll("&","&amp;");  result=result.replaceAll("<","&lt;");  result=result.replaceAll(">","&gt;");  result=result.replaceAll("\"","&quot;");  return result;}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("jonas4x",Jonas4xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jonas5x",Jonas5xContainerCapability.class);}  }
class C{  public static boolean areEqual(final BusinessKeyField pojoField,final Object first,final Object second,final boolean caseSensitive){  Object firstField=pojoField.get(first);  Object secondField=pojoField.get(second);  if (firstField == null) {    return secondField == null;  }  return secondField != null && doEquals(firstField,secondField,caseSensitive);}  }
class C{  public boolean postProcessInstance(){  return mFormEntryController.getModel().getForm().postProcessInstance();}  }
class C{  private int calculateBreakpoints(){  int breakpoints=0;  for (  final IDebugger debugger : m_debuggerProvider.getDebuggers()) {    breakpoints+=debugger.getBreakpointManager().getNumberOfBreakpoints(BreakpointType.REGULAR);  }  return breakpoints;}  }
class C{  public void objectVariable(int pos,int clazz){}  }
class C{  public static int size(long[] array){  return Array.getLength(array);}  }
class C{  public void applyLookAndFeel(){  String lafClassName=null;  for (  LookAndFeelInfo LAF : UIManager.getInstalledLookAndFeels()) {    if (LAF.getName().equals(this.lookAndFeel)) {      lafClassName=LAF.getClassName();    }  }  log.debug("Look and feel selection \"{}\" ({})",this.lookAndFeel,lafClassName);  if (lafClassName != null) {    if (!lafClassName.equals(UIManager.getLookAndFeel().getClass().getName())) {      log.debug("Apply look and feel \"{}\" ({})",this.lookAndFeel,lafClassName);      try {        UIManager.setLookAndFeel(lafClassName);      } catch (      ClassNotFoundException ex) {        log.error("Could not find look and feel \"{}\".",this.lookAndFeel);      }catch (      IllegalAccessException|InstantiationException ex) {        log.error("Could not load look and feel \"{}\".",this.lookAndFeel);      }catch (      UnsupportedLookAndFeelException ex) {        log.error("Look and feel \"{}\" is not supported on this platform.",this.lookAndFeel);      }    } else {      log.debug("Not updating look and feel {} matching existing look and feel" + lafClassName);    }  }}  }
class C{  @Override public void accept(final MethodVisitor mv){  mv.visitInsn(opcode);  acceptAnnotations(mv);}  }
class C{  @Override public int hashCode(){  return date.hashCode() ^ time.hashCode();}  }
class C{  public void prepareForUse(){  prepareForUse(new NullMonitor(),null);}  }
class C{  protected static RootGraphicsNode extractPatternContent(Element patternElement,BridgeContext ctx){  List refs=new LinkedList();  for (; ; ) {    RootGraphicsNode content=extractLocalPatternContent(patternElement,ctx);    if (content != null) {      return content;    }    String uri=XLinkSupport.getXLinkHref(patternElement);    if (uri.length() == 0) {      return null;    }    SVGOMDocument doc=(SVGOMDocument)patternElement.getOwnerDocument();    ParsedURL purl=new ParsedURL(doc.getURL(),uri);    if (!purl.complete())     throw new BridgeException(ctx,patternElement,ERR_URI_MALFORMED,new Object[]{uri});    if (contains(refs,purl)) {      throw new BridgeException(ctx,patternElement,ERR_XLINK_HREF_CIRCULAR_DEPENDENCIES,new Object[]{uri});    }    refs.add(purl);    patternElement=ctx.getReferencedElement(patternElement,uri);  }}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener listener){  if (listener == null || propertyName == null) {    return;  }  listener=this.map.extract(listener);  if (listener != null) {    this.map.add(propertyName,listener);  }}  }
class C{  public boolean isMimeTypeSerializedObject(){  return isMimeTypeEqual(javaSerializedObjectMimeType);}  }
class C{  public static void test(int weight,int size){  WeightedRandomSampler sampler=new WeightedRandomSampler();  sampler.setWeight(weight);  cern.colt.list.IntArrayList sample=new cern.colt.list.IntArrayList();  for (int i=0; i < size; i++) {    if (sampler.sampleNextElement())     sample.add(i);  }  System.out.println("Sample = " + sample);}  }
class C{  private static String handleRequestStatic(Object element) throws GSServiceException {  if (element instanceof Baustein) {    Baustein bst=(Baustein)element;    return getHtmlFromStream(GSScraperUtil.getInstance().getModel().getBaustein(bst.getUrl(),bst.getStand()),bst.getEncoding());  }  if (element instanceof OwnGefaehrdung) {    OwnGefaehrdung ownGefaehrdung=(OwnGefaehrdung)element;    if (ownGefaehrdung.getUrl() == null || ownGefaehrdung.getUrl().isEmpty() || ownGefaehrdung.getUrl().equals(NULL_STRING)) {      return toHtml(ownGefaehrdung);    } else {      return getHtmlFromStream(GSScraperUtil.getInstance().getModel().getGefaehrdung(ownGefaehrdung.getUrl(),ownGefaehrdung.getStand()),UTF_8);    }  } else   if (element instanceof Gefaehrdung) {    Gefaehrdung gef=(Gefaehrdung)element;    return getHtmlFromStream(GSScraperUtil.getInstance().getModel().getGefaehrdung(gef.getUrl(),gef.getStand()),gef.getEncoding());  }  if (element instanceof GefaehrdungsUmsetzung) {    GefaehrdungsUmsetzung gefUms=(GefaehrdungsUmsetzung)element;    if (gefUms.getUrl() == null || gefUms.getUrl().isEmpty() || gefUms.getUrl().equals(NULL_STRING)) {      return toHtml(gefUms);    } else {      return getHtmlFromStream(GSScraperUtil.getInstance().getModel().getGefaehrdung(gefUms.getUrl(),gefUms.getStand()),UTF_8);    }  }  if (element instanceof BausteinUmsetzung) {    BausteinUmsetzung bst=(BausteinUmsetzung)element;    if (bst.getUrl() == null || bst.getUrl().isEmpty() || bst.getUrl().equals(NULL_STRING)) {      return toHtml(bst);    } else {      return getHtmlFromStream(GSScraperUtil.getInstance().getModel().getBaustein(bst.getUrl(),bst.getStand()),bst.getEncoding());    }  }  if (element instanceof Massnahme) {    Massnahme mn=(Massnahme)element;    return GSScraperUtil.getInstance().getModel().getMassnahmeHtml(mn.getUrl(),mn.getStand());  }  if (element instanceof RisikoMassnahmenUmsetzung) {    RisikoMassnahmenUmsetzung ums=(RisikoMassnahmenUmsetzung)element;    RisikoMassnahmeHome.getInstance().initRisikoMassnahmeUmsetzung(ums);    if (ums.getRisikoMassnahme() != null) {      return toHtml(ums);    } else {      return GSScraperUtil.getInstance().getModel().getMassnahmeHtml(ums.getUrl(),ums.getStand());    }  } else   if (element instanceof MassnahmenUmsetzung) {    MassnahmenUmsetzung mnu=(MassnahmenUmsetzung)element;    if (mnu.getUrl() == null || mnu.getUrl().isEmpty() || mnu.getUrl().equals(NULL_STRING)) {      return toHtml(mnu);    } else {      return GSScraperUtil.getInstance().getModel().getMassnahmeHtml(mnu.getUrl(),mnu.getStand());    }  }  if (element instanceof TodoViewItem) {    TodoViewItem item=(TodoViewItem)element;    return GSScraperUtil.getInstance().getModel().getMassnahmeHtml(item.getUrl(),item.getStand());  }  if (element instanceof IItem) {    IItem item=(IItem)element;    StringBuilder sb=new StringBuilder();    writeHtml(sb,item.getName(),item.getDescription(),VeriniceCharset.CHARSET_UTF_8.name());    return sb.toString();  }  if (element instanceof IControl) {    IControl control=(IControl)element;    StringBuilder sb=new StringBuilder();    writeHtml(sb,control.getTitle(),control.getDescription(),VeriniceCharset.CHARSET_UTF_8.name());    return sb.toString();  }  if (element instanceof Threat) {    Threat item=(Threat)element;    StringBuilder sb=new StringBuilder();    writeHtml(sb,item.getTitle(),item.getDescription(),VeriniceCharset.CHARSET_UTF_8.name());    return sb.toString();  }  if (element instanceof Vulnerability) {    Vulnerability item=(Vulnerability)element;    StringBuilder sb=new StringBuilder();    writeHtml(sb,item.getTitle(),item.getDescription(),VeriniceCharset.CHARSET_UTF_8.name());    return sb.toString();  }  return "";}  }
class C{  private void checkListArch(String entidad) throws Exception {  int count;  VolumesTable table=new VolumesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    count=DbSelectFns.selectCount(dbConn,table.getArchListTableName(),table.getCountArchListQual(_id));    if (count > 0) {      AdminException.throwException(VolumeListErrorCodes.EC_LISTVOL_ASSOC_ARCH);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public static BranchCoverageTestFitness createRootBranchTestFitness(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  return createRootBranchTestFitness(instruction.getClassName(),instruction.getMethodName());}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(Entry<? extends K,? extends V> entry){  builderMultimap.put(checkNotNull(entry.getKey()),checkNotNull(entry.getValue()));  return this;}  }
class C{  public static void main(String[] args){  Rational r1=new Rational(new BigInteger("400000"),new BigInteger("200000"));  Rational r2=new Rational(new BigInteger("200000"),new BigInteger("300000"));  System.out.println(r1 + " + " + r2+ " = "+ r1.add(r2));  System.out.println(r1 + " - " + r2+ " = "+ r1.subtract(r2));  System.out.println(r1 + " * " + r2+ " = "+ r1.multiply(r2));  System.out.println(r1 + " / " + r2+ " = "+ r1.divide(r2));  System.out.println(r2 + " is " + r2.doubleValue());}  }
class C{  private void retrieveCurrentSettings(Activity activity){  setCheckedSafely(mSwitchAutoTime,getBooleanGlobalSetting(activity.getContentResolver(),Settings.Global.AUTO_TIME));  setCheckedSafely(mSwitchAutoTimeZone,getBooleanGlobalSetting(activity.getContentResolver(),Settings.Global.AUTO_TIME_ZONE));  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.addCategory(Intent.CATEGORY_HOME);  List<ResolveInfo> list=activity.getPackageManager().queryIntentActivities(intent,0);  mAdapter=new LauncherAdapter(activity,list);  mAvailableLaunchers.setAdapter(mAdapter);  String packageName=loadPersistentPreferredLauncher(activity);  if (packageName == null) {    mAvailableLaunchers.setEnabled(true);    mButtonLauncher.setText(R.string.set_as_preferred);  } else {    int position=-1;    for (int i=0; i < list.size(); ++i) {      if (list.get(i).activityInfo.packageName.equals(packageName)) {        position=i;        break;      }    }    if (position != -1) {      mAvailableLaunchers.setSelection(position);      mAvailableLaunchers.setEnabled(false);      mButtonLauncher.setText(R.string.clear_preferred);    }  }}  }
class C{  public static Object create(String className,Object[] constructorArgs,String prefix,Properties properties){  return create(className,constructorArgs,null,prefix,properties);}  }
class C{  private void enterLinkedModeForPrefix(IDocument document,ITextViewer viewer,IDOMElement rootElement,String prefix) throws BadLocationException {  int linkedPosSequence=0;  LinkedPosition pos1=new LinkedPosition(document,startPosition,prefix.length(),linkedPosSequence++);  LinkedPosition pos2=new LinkedPosition(document,cursorPosition + 2,prefix.length(),linkedPosSequence++);  IDOMElement rootDomElement=(IDOMElement)rootElement;  final String xmlnsPrefix="xmlns:";  String fullPrefixName=xmlnsPrefix + prefix;  IDOMAttr domAttribute=(IDOMAttr)rootDomElement.getAttributeNode(fullPrefixName);  LinkedPosition pos3=new LinkedPosition(document,domAttribute.getStartOffset() + xmlnsPrefix.length(),prefix.length(),linkedPosSequence++);  LinkedPositionGroup group=new LinkedPositionGroup();  group.addPosition(pos1);  group.addPosition(pos2);  group.addPosition(pos3);  LinkedModeModel model=new LinkedModeModel();  model.addGroup(group);  model.forceInstall();  LinkedModeUI ui=new LinkedModeUI(model,viewer);  ui.enter();  wasLinkedModeEntered=true;}  }
class C{  private void checkDeptExists(String entidad) throws Exception {  int count;  DepartmentsTable table=new DepartmentsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (_id == ISicresAdminDefsKeys.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameIdQual(_id,_name));    if (count > 0)     ISicresAdminBasicException.throwException(ISicresAdminDepartamentoKeys.EC_DEPT_EXIST_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public UIParameterTestCase(String name){  super(name);}  }
class C{  public ProblemException(Problem problem){  super();  this.problem=problem;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean scrollToChildRect(Rect rect,boolean immediate){  final int delta=computeScrollDeltaToGetChildRectOnScreen(rect);  final boolean scroll=delta != 0;  if (scroll) {    if (immediate) {      scrollBy(0,delta);    } else {      smoothScrollBy(0,delta);    }  }  return scroll;}  }
class C{  public static int unsetMask(int value,int mask){  return (value & ~mask);}  }
class C{  public void resizeColumnWidth(JTable table){  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  final TableColumnModel columnModel=table.getColumnModel();  for (int column=0; column < table.getColumnCount(); column++) {    TableColumn tableColumn=columnModel.getColumn(column);    TableCellRenderer r=tableColumn.getHeaderRenderer();    if (r == null) {      r=table.getTableHeader().getDefaultRenderer();    }    Component component=r.getTableCellRendererComponent(table,tableColumn.getHeaderValue(),false,false,0,column);    int width=component.getPreferredSize().width;    for (int row=0; row < table.getRowCount(); row++) {      TableCellRenderer renderer=table.getCellRenderer(row,column);      Component comp=table.prepareRenderer(renderer,row,column);      width=Math.max(comp.getPreferredSize().width + 1,width);    }    tableColumn.setPreferredWidth(width);  }}  }
class C{  public MalformedCookieException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private void determineOriginalGoals(TestFitnessFactory factory,List<TestCase> otherTests){  List<TestFitnessFunction> goals=factory.getCoverageGoals();  for (  TestFitnessFunction goal : goals) {    if (goal.isCovered(originalTest)) {      if (!goal.isCovered(otherTests)) {        originalCoveredGoals.add(goal);        System.out.println("Uniquely covered goal: " + goal);      }    } else {      originalUncoveredGoals.add(goal);    }  }}  }
class C{  public byte[] readRawBytes(final int size) throws IOException {  if (size < 0) {    throw InvalidProtocolBufferException.negativeSize();  }  if (totalBytesRetired + bufferPos + size > currentLimit) {    skipRawBytes(currentLimit - totalBytesRetired - bufferPos);    throw InvalidProtocolBufferException.truncatedMessage();  }  if (size <= bufferSize - bufferPos) {    final byte[] bytes=new byte[size];    System.arraycopy(buffer,bufferPos,bytes,0,size);    bufferPos+=size;    return bytes;  } else   if (size < BUFFER_SIZE) {    final byte[] bytes=new byte[size];    int pos=bufferSize - bufferPos;    System.arraycopy(buffer,bufferPos,bytes,0,pos);    bufferPos=bufferSize;    refillBuffer(true);    while (size - pos > bufferSize) {      System.arraycopy(buffer,0,bytes,pos,bufferSize);      pos+=bufferSize;      bufferPos=bufferSize;      refillBuffer(true);    }    System.arraycopy(buffer,0,bytes,pos,size - pos);    bufferPos=size - pos;    return bytes;  } else {    final int originalBufferPos=bufferPos;    final int originalBufferSize=bufferSize;    totalBytesRetired+=bufferSize;    bufferPos=0;    bufferSize=0;    int sizeLeft=size - (originalBufferSize - originalBufferPos);    final List<byte[]> chunks=new ArrayList<byte[]>();    while (sizeLeft > 0) {      final byte[] chunk=new byte[Math.min(sizeLeft,BUFFER_SIZE)];      int pos=0;      while (pos < chunk.length) {        final int n=(input == null) ? -1 : input.read(chunk,pos,chunk.length - pos);        if (n == -1) {          throw InvalidProtocolBufferException.truncatedMessage();        }        totalBytesRetired+=n;        pos+=n;      }      sizeLeft-=chunk.length;      chunks.add(chunk);    }    final byte[] bytes=new byte[size];    int pos=originalBufferSize - originalBufferPos;    System.arraycopy(buffer,originalBufferPos,bytes,0,pos);    for (    final byte[] chunk : chunks) {      System.arraycopy(chunk,0,bytes,pos,chunk.length);      pos+=chunk.length;    }    return bytes;  }}  }
class C{  private void validateUpdateIsNotForVPlexBackendVolumes(ExportUpdateParam param,ExportGroup exportGroup){  if (param.getVolumes() != null) {    if (param.getVolumes().getAdd() != null) {      if (param.getVolumes().getAdd().size() > MAX_VOLUME_COUNT) {        throw APIException.badRequests.exceedingLimit("count",MAX_VOLUME_COUNT);      }      List<URI> addVolumeURIs=new ArrayList<URI>();      for (      VolumeParam volParam : param.getVolumes().getAdd()) {        addVolumeURIs.add(volParam.getId());      }      BlockService.validateNoInternalBlockObjects(_dbClient,addVolumeURIs,false);    }    if (param.getVolumes().getRemove() != null && param.getVolumes().getRemove().size() > MAX_VOLUME_COUNT) {      throw APIException.badRequests.exceedingLimit("count",MAX_VOLUME_COUNT);    }    BlockService.validateNoInternalBlockObjects(_dbClient,param.getVolumes().getRemove(),false);  }}  }
class C{  @Override protected Object determineCurrentLookupKey(){  return DataSourceContextHolder.getDataSourceType();}  }
class C{  public static String id(Resource res){  String str=ResourceUtil.getCanonicalPathEL(res) + "|" + res.length()+ "|"+ res.lastModified();  try {    return Hash.md5(str);  } catch (  NoSuchAlgorithmException e) {    return Caster.toString(HashUtil.create64BitHash(str));  }}  }
class C{  @Nullable private IgniteInternalFuture<IgfsMessage> executeSynchronously(IgfsClientSession ses,IgfsIpcCommand cmd,IgfsMessage msg,DataInput in) throws Exception {  IgfsMessage res=execute(ses,cmd,msg,in);  return res == null ? null : new GridFinishedFuture<>(res);}  }
class C{  public LimitedSizeSPARQLMinusIteration(Iteration<BindingSet,QueryEvaluationException> leftArg,Iteration<BindingSet,QueryEvaluationException> rightArg,AtomicLong used,long maxSize){  this(leftArg,rightArg,false,used,maxSize);}  }
class C{  public void severe(Supplier<String> msgSupplier){  log(Level.SEVERE,msgSupplier);}  }
class C{  public ProcessBackgroundImage(int x,int y,int w,int h,String location,ExecutionUnit process){  this.x=x;  this.y=y;  this.w=w;  this.h=h;  this.location=location;  this.process=process;  this.loadingImg=createImageFromString(I18N.getGUILabel("process_background.loading.label"));}  }
class C{  private AudioPlayer(){  super(getAudioThreadGroup(),"Audio Player");  if (DEBUG) {    System.out.println("> AudioPlayer private constructor");  }  devAudio=AudioDevice.device;  devAudio.open();  if (DEBUG) {    System.out.println("< AudioPlayer private constructor completed");  }}  }
class C{  public void removeValue(String key){  m_values.remove(key);}  }
class C{  protected void resetSubframeIndex(int vertFrames,int horizFrames){  if (subframeCacheSize > 0) {    int matrixheight=(vertFrames * 6) + (subframeBuffer * 2);    int matrixwidth=(horizFrames * 6) + (subframeBuffer * 2);    subframeIndex=new byte[matrixheight][matrixwidth];    subframeVersion=new byte[matrixheight][matrixwidth];    clearCache();  } else {    subframeIndex=null;    subframeVersion=null;  }}  }
class C{  public XMLStreamException(Throwable nested){  _nested=nested;}  }
class C{  public Double remove(Double key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public NonLinearRace(String appName){  super(appName);  animator.setAcceleration(.5f);  animator.setDeceleration(.1f);}  }
class C{  public XAnalyzingSuggester(Analyzer indexAnalyzer,Automaton queryPrefix,Analyzer queryAnalyzer,int options,int maxSurfaceFormsPerAnalyzedForm,int maxGraphExpansions,boolean preservePositionIncrements,FST<Pair<Long,BytesRef>> fst,boolean hasPayloads,int maxAnalyzedPathsForOneInput,int sepLabel,int payloadSep,int endByte,int holeCharacter){  this.indexAnalyzer=indexAnalyzer;  this.queryAnalyzer=queryAnalyzer;  this.fst=fst;  this.hasPayloads=hasPayloads;  if ((options & ~(EXACT_FIRST | PRESERVE_SEP)) != 0) {    throw new IllegalArgumentException("options should only contain EXACT_FIRST and PRESERVE_SEP; got " + options);  }  this.exactFirst=(options & EXACT_FIRST) != 0;  this.preserveSep=(options & PRESERVE_SEP) != 0;  this.queryPrefix=queryPrefix;  if (maxSurfaceFormsPerAnalyzedForm <= 0 || maxSurfaceFormsPerAnalyzedForm > 256) {    throw new IllegalArgumentException("maxSurfaceFormsPerAnalyzedForm must be > 0 and < 256 (got: " + maxSurfaceFormsPerAnalyzedForm + ")");  }  this.maxSurfaceFormsPerAnalyzedForm=maxSurfaceFormsPerAnalyzedForm;  if (maxGraphExpansions < 1 && maxGraphExpansions != -1) {    throw new IllegalArgumentException("maxGraphExpansions must -1 (no limit) or > 0 (got: " + maxGraphExpansions + ")");  }  this.maxGraphExpansions=maxGraphExpansions;  this.maxAnalyzedPathsForOneInput=maxAnalyzedPathsForOneInput;  this.preservePositionIncrements=preservePositionIncrements;  this.sepLabel=sepLabel;  this.payloadSep=payloadSep;  this.endByte=endByte;  this.holeCharacter=holeCharacter;}  }
class C{  public boolean consume(MouseEvent e){  if (e.getID() == MouseEvent.MOUSE_PRESSED) {    mousePressed(e);  } else   if (e.getID() == MouseEvent.MOUSE_RELEASED) {    mouseReleased(e);  } else   if (e.getID() == MouseEvent.MOUSE_DRAGGED) {    mouseDragged(e);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.664 -0500",hash_original_method="C3B7CE27D41B26760CE03C19222744F6",hash_generated_method="CC2054EA2845F5679CED0538D6BAC037") public void onHealthChannelStateChange(BluetoothHealthAppConfiguration config,BluetoothDevice device,int prevState,int newState,ParcelFileDescriptor fd,int channelId){  Log.d(TAG,"onHealthChannelStateChange: " + config + "Device: "+ device+ "prevState:"+ prevState+ "newState:"+ newState+ "ParcelFd:"+ fd+ "ChannelId:"+ channelId);}  }
class C{  static void replaceDefs(IR ir,UseRecordSet UseRepSet,HashMap<UseRecord,Register> registers){  SSADictionary ssa=ir.HIRInfo.dictionary;  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (!GetField.conforms(s) && !GetStatic.conforms(s) && !PutField.conforms(s)&& !PutStatic.conforms(s)&& !ALoad.conforms(s)&& !AStore.conforms(s)) {      continue;    }    if (!ssa.defsHeapVariable(s)) {      continue;    }    HeapOperand<?>[] H=ssa.getHeapDefs(s);    if (H.length != 1) {      throw new OptimizingCompilerException("LoadElimination: encountered a store with more than one def? " + s);    }    int valueNumber=-1;    Object index=null;    if (AStore.conforms(s)) {      Object address=AStore.getArray(s);      index=AStore.getIndex(s);      valueNumber=ir.HIRInfo.valueNumbers.getValueNumber(address);    } else     if (GetField.conforms(s)) {      Object address=GetField.getRef(s);      valueNumber=ir.HIRInfo.valueNumbers.getValueNumber(address);    } else     if (PutField.conforms(s)) {      Object address=PutField.getRef(s);      valueNumber=ir.HIRInfo.valueNumbers.getValueNumber(address);    } else     if (GetStatic.conforms(s)) {      valueNumber=0;    } else     if (PutStatic.conforms(s)) {      valueNumber=0;    } else     if (ALoad.conforms(s)) {      Object address=ALoad.getArray(s);      valueNumber=ir.HIRInfo.valueNumbers.getValueNumber(address);      index=ALoad.getIndex(s);    }    if (index == null) {      if (UseRepSet.containsMatchingUse(H[0].getHeapVariable(),valueNumber)) {        Operand value=null;        if (PutField.conforms(s)) {          value=PutField.getValue(s);        } else         if (PutStatic.conforms(s)) {          value=PutStatic.getValue(s);        } else         if (GetField.conforms(s) || GetStatic.conforms(s)) {          value=ResultCarrier.getResult(s);        }        TypeReference type=value.getType();        Register r=findOrCreateRegister(H[0].getHeapType(),valueNumber,registers,ir.regpool,type);        appendMove(r,value,s);      }    } else {      int v1=valueNumber;      int v2=ir.HIRInfo.valueNumbers.getValueNumber(index);      if (UseRepSet.containsMatchingUse(H[0].getHeapVariable(),v1,v2)) {        Operand value=null;        if (AStore.conforms(s)) {          value=AStore.getValue(s);        } else         if (ALoad.conforms(s)) {          value=ALoad.getResult(s);        }        TypeReference type=value.getType();        Register r=findOrCreateRegister(H[0].getHeapType(),v1,v2,registers,ir.regpool,type);        appendMove(r,value,s);      }    }  }}  }
class C{  public static UUID nameUUIDFromBytes(byte[] name){  if (name == null) {    throw new NullPointerException("name == null");  }  try {    MessageDigest md=MessageDigest.getInstance("MD5");    return makeUuid(md.digest(name),3);  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }}  }
class C{  private Properties loadProperties(String subDirectory) throws Exception {  File catalinaBase=new File("target/catalina-base");  assertTrue(catalinaBase + " is not a directory",catalinaBase.isDirectory());  File propertiesFile=new File(catalinaBase,subDirectory + "/test.properties");  assertTrue(propertiesFile + " is not a file",propertiesFile.isFile());  Properties properties=new Properties();  FileInputStream fis=new FileInputStream(propertiesFile);  try {    properties.load(fis);  }  finally {    fis.close();    fis=null;    System.gc();  }  return properties;}  }
class C{  public static boolean registerTool(ItemStack aTool,Collection<GT_ItemStack> aToolList){  if (aTool == null || GT_Utility.isStackInList(aTool,sToolList) || (!aTool.getItem().isDamageable() && !GT_ModHandler.isElectricItem(aTool) && !(aTool.getItem() instanceof IDamagableItem)))   return false;  aToolList.add(new GT_ItemStack(GT_Utility.copyAmount(1,aTool)));  sToolList.add(new GT_ItemStack(GT_Utility.copyAmount(1,aTool)));  return true;}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  int bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    int variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  protected CatalogTree createNewCatalogTree(String systemName,String userName){  if (systemName == null || systemName.length() == 0) {    log.error("Null systemName!");    return null;  }  if (userName == null || userName.length() == 0) {    log.error("Null userName!");    return null;  }  if (systemName.charAt(1) == CatalogTree.XML) {switch (systemName.charAt(0)) {case CatalogTree.IMAGE:case CatalogTree.SOUND:case CatalogTree.SCRIPT:case CatalogTree.NOFILTER:      return new CatalogTreeIndex(systemName,userName);default :    log.error("Bad systemName: " + systemName + " (userName= "+ userName+ ")");}} else if (systemName.charAt(1) == CatalogTree.FILESYS) {CatalogTreeFS catTree=null;switch (systemName.charAt(0)) {case CatalogTree.IMAGE:  catTree=new CatalogTreeFS(systemName,userName);catTree.setFilter(IMAGE_FILTER);return catTree;case CatalogTree.SOUND:catTree=new CatalogTreeFS(systemName,userName);catTree.setFilter(SOUND_FILTER);return catTree;case CatalogTree.SCRIPT:catTree=new CatalogTreeFS(systemName,userName);catTree.setFilter(SCRIPT_FILTER);return catTree;case CatalogTree.NOFILTER:return new CatalogTreeFS(systemName,userName);default :log.error("Bad systemName: " + systemName + " (userName= "+ userName+ ")");}}return null;}  }
class C{  public EchoBreakpointHitSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public int read(byte[] buffer,int offset,int length) throws IOException {  int readLength=0;  while (length > 0) {    int sublen=_is.read(buffer,offset,length);    if (sublen < 0)     return readLength == 0 ? -1 : readLength;    offset+=sublen;    length-=sublen;    readLength+=sublen;  }  return readLength;}  }
class C{  public Boolean isNonAggregateControl(){  return nonAggregateControl;}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  public static void fatten(Model model,float amount){  Vector3 pos=new Vector3();  Vector3 nor=new Vector3();  for (  Node node : model.nodes) {    for (    NodePart n : node.parts) {      Mesh mesh=n.meshPart.mesh;      FloatBuffer buf=mesh.getVerticesBuffer();      int lastFloat=mesh.getNumVertices() * mesh.getVertexSize() / 4;      int vertexFloats=(mesh.getVertexSize() / 4);      VertexAttribute posAttr=mesh.getVertexAttributes().findByUsage(VertexAttributes.Usage.Position);      VertexAttribute norAttr=mesh.getVertexAttributes().findByUsage(VertexAttributes.Usage.Normal);      if (posAttr == null || norAttr == null) {        throw new IllegalArgumentException("Position/normal vertex attribute not found");      }      int pOff=posAttr.offset / 4;      int nOff=norAttr.offset / 4;      for (int i=0; i < lastFloat; i+=vertexFloats) {        pos.x=buf.get(pOff + i);        pos.y=buf.get(pOff + i + 1);        pos.z=buf.get(pOff + i + 2);        nor.x=buf.get(nOff + i);        nor.y=buf.get(nOff + i + 1);        nor.z=buf.get(nOff + i + 2);        nor.nor().scl(amount);        buf.put(pOff + i,pos.x + nor.x);        buf.put(pOff + i + 1,pos.y + nor.y);        buf.put(pOff + i + 2,pos.z + nor.z);      }    }  }}  }
class C{  public void testSearchSegmentation() throws IOException {  InputStream is=TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);  if (is == null) {    throw new FileNotFoundException("Cannot find " + SEGMENTATION_FILENAME + " in test classpath");  }  try {    LineNumberReader reader=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));    String line=null;    while ((line=reader.readLine()) != null) {      line=line.replaceAll("#.*$","");      if (line.trim().isEmpty()) {        continue;      }      if (VERBOSE) {        System.out.println("Line no. " + reader.getLineNumber() + ": "+ line);      }      String[] fields=line.split("\t",2);      String sourceText=fields[0];      String[] expectedTokens=fields[1].split("\\s+");      int[] expectedPosIncrs=new int[expectedTokens.length];      int[] expectedPosLengths=new int[expectedTokens.length];      for (int tokIDX=0; tokIDX < expectedTokens.length; tokIDX++) {        if (expectedTokens[tokIDX].endsWith("/0")) {          expectedTokens[tokIDX]=expectedTokens[tokIDX].replace("/0","");          expectedPosLengths[tokIDX]=expectedTokens.length - 1;        } else {          expectedPosIncrs[tokIDX]=1;          expectedPosLengths[tokIDX]=1;        }      }      assertAnalyzesTo(analyzer,sourceText,expectedTokens,expectedPosIncrs);    }  }  finally {    is.close();  }}  }
class C{  public void parseHeader(InputStream is) throws java.io.IOException {  nkeys=0;  if (is == null)   return;  char s[]=new char[10];  int firstc=is.read();  while (firstc != '\n' && firstc != '\r' && firstc >= 0) {    int len=0;    int keyend=-1;    int c;    boolean inKey=firstc > ' ';    s[len++]=(char)firstc;    parseloop: {      parseloop2:       while ((c=is.read()) >= 0) {switch (c) {case ':':          if (inKey && len > 0)           keyend=len;        inKey=false;      break;case '\t':    c=' ';case ' ':  inKey=false;break;case '\r':case '\n':firstc=is.read();if (c == '\r' && firstc == '\n') {firstc=is.read();if (firstc == '\r') firstc=is.read();}if (firstc == '\n' || firstc == '\r' || firstc > ' ') break parseloop;continue parseloop2;}if (len >= s.length) {char ns[]=new char[s.length * 2];System.arraycopy(s,0,ns,0,len);s=ns;}s[len++]=(char)c;}firstc=-1;}while (len > 0 && s[len - 1] <= ' ') len--;String k;if (keyend <= 0) {k=null;keyend=0;} else {k=String.copyValueOf(s,0,keyend);if (keyend < len && s[keyend] == ':') keyend++;while (keyend < len && s[keyend] <= ' ') keyend++;}String v;if (keyend >= len) v=new String(); else v=String.copyValueOf(s,keyend,len - keyend);add(k,v);}}  }
class C{  public boolean registerThirdPartyIDPUser(String tenantName,PrincipalId userId) throws Exception {  return getService().registerThirdPartyIDPUser(tenantName,userId,this.getServiceContext());}  }
class C{  public static void deleteFileSet(ZooKeeperManager zkManager,String fileSet) throws Exception {  LOG.info(String.format("deleting file set %s",fileSet));  FileSetInfo fileSetInfo=lockFileSet(zkManager,fileSet,CreateMode.PERSISTENT);  fileSetInfo.deleted=true;  zkManager.setFileSetInfo(fileSet,fileSetInfo);}  }
class C{  public FIXValueFormatException(String message){  super(message);}  }
class C{  public static void trace(String text,Object... objects){  if (!ENABLED_TRACE) {    return;  }  write(text,objects);}  }
class C{  public static CCShaky3D action(int range,boolean sz,ccGridSize gridSize,float d){  return new CCShaky3D(range,sz,gridSize,d);}  }
class C{  public boolean isReadOnly(){  return (!isUpdatable && !isInsertable);}  }
class C{  protected int match_bitap(String text,String pattern,int loc){  assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits) : "Pattern too long for this application.";  Map<Character,Integer> s=match_alphabet(pattern);  double score_threshold=Match_Threshold;  int best_loc=text.indexOf(pattern,loc);  if (best_loc != -1) {    score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    best_loc=text.lastIndexOf(pattern,loc + pattern.length());    if (best_loc != -1) {      score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    }  }  int matchmask=1 << (pattern.length() - 1);  best_loc=-1;  int bin_min, bin_mid;  int bin_max=pattern.length() + text.length();  int[] last_rd=new int[0];  for (int d=0; d < pattern.length(); d++) {    bin_min=0;    bin_mid=bin_max;    while (bin_min < bin_mid) {      if (match_bitapScore(d,loc + bin_mid,loc,pattern) <= score_threshold) {        bin_min=bin_mid;      } else {        bin_max=bin_mid;      }      bin_mid=(bin_max - bin_min) / 2 + bin_min;    }    bin_max=bin_mid;    int start=Math.max(1,loc - bin_mid + 1);    int finish=Math.min(loc + bin_mid,text.length()) + pattern.length();    int[] rd=new int[finish + 2];    rd[finish + 1]=(1 << d) - 1;    for (int j=finish; j >= start; j--) {      int charMatch;      if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) {        charMatch=0;      } else {        charMatch=s.get(text.charAt(j - 1));      }      if (d == 0) {        rd[j]=((rd[j + 1] << 1) | 1) & charMatch;      } else {        rd[j]=(((rd[j + 1] << 1) | 1) & charMatch) | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];      }      if ((rd[j] & matchmask) != 0) {        double score=match_bitapScore(d,j - 1,loc,pattern);        if (score <= score_threshold) {          score_threshold=score;          best_loc=j - 1;          if (best_loc > loc) {            start=Math.max(1,2 * loc - best_loc);          } else {            break;          }        }      }    }    if (match_bitapScore(d + 1,loc,loc,pattern) > score_threshold) {      break;    }    last_rd=rd;  }  return best_loc;}  }
class C{  public void addProvider(String name,ContentProvider provider){  mProviders.put(name,provider);}  }
class C{  private void execute(ExecutionVisitor visitor,TestCheckGenerator gen,boolean ignoreException){  visitor.initialize(this);  hasNullInput=false;  executionResults.theList.clear();  for (int i=0; i < sequence.size(); i++) {    executionResults.theList.add(NotExecuted.create());  }  for (int i=0; i < this.sequence.size(); i++) {    List<Variable> inputs=sequence.getInputs(i);    Object[] inputVariables;    inputVariables=getRuntimeInputs(executionResults.theList,inputs);    visitor.visitBeforeStatement(this,i);    executeStatement(sequence,executionResults.theList,i,inputVariables);    ExecutionOutcome statementResult=getResult(i);    if (statementResult instanceof NotExecuted) {      throw new Error("Unexecuted statement in sequence: " + this.toString());    }    if ((statementResult instanceof ExceptionalExecution) && i < sequence.size() - 1) {      if (ignoreException) {        break;      } else {        String msg="Encountered exception before final statement of error-revealing test (statement " + i + "): ";        throw new Error(msg + ((ExceptionalExecution)statementResult).getException().getMessage());      }    }    visitor.visitAfterStatement(this,i);  }  visitor.visitAfterSequence(this);  checks=gen.visit(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.662 -0500",hash_original_method="DB3F0BFFB6CE4D49FE300461E52C77CC",hash_generated_method="76B4CF795CAB6C13327720CABE59DD7D") public boolean delete(String name){  String lcName=name.toLowerCase();  if (this.nameValueMap.containsKey(lcName)) {    this.nameValueMap.remove(lcName);    return true;  } else {    return false;  }}  }
class C{  private void launchAnimVectorList(){  if (!animatedVectorFirstLaunched) {    if (animatedVectorList.getLevel() < animatedVectorListMaxLevel) {      animatedVectorList.setLevel(animatedVectorList.getLevel() + 1);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    } else {      animatedVectorList.setLevel(0);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    }  } else {    animatedVectorFirstLaunched=false;  }  currentAnimatedVectorFromList.start();  uiHandler.postDelayed(uiRunnable,300 + 3000);}  }
class C{  public int cardinality(){  return this.bitmap.cardinality();}  }
class C{  public void cacheUserInfo(Set<ContentType> contentTypes,EnhancedUserInfo info){  String name=info.getInfo().getUser().getName().trim().toLowerCase();  String key=name + ContentType.combine(contentTypes);  userInfoCache.put(key,info);}  }
class C{  @LogMessageDoc(level="ERROR",message="failed to access storage: {reason}",explanation="Could not retrieve static flows from the system " + "database",recommendation=LogMessageDoc.CHECK_CONTROLLER) private Map<String,Map<String,OFFlowMod>> readEntriesFromStorage(){  Map<String,Map<String,OFFlowMod>> entries=new ConcurrentHashMap<String,Map<String,OFFlowMod>>();  try {    Map<String,Object> row;    IResultSet resultSet=storageSource.executeQuery(TABLE_NAME,ColumnNames,null,null);    for (Iterator<IResultSet> it=resultSet.iterator(); it.hasNext(); ) {      row=it.next().getRow();      parseRow(row,entries);    }  } catch (  StorageException e) {    log.error("failed to access storage: {}",e.getMessage());  }  return entries;}  }
class C{  public List<String> argumentNames(){  return Collections.unmodifiableList(names);}  }
class C{  private void discoverFilerInfo(StorageSystem system) throws NetAppCException {  _logger.info("Start Control Station discovery for storage system {}",system.getId());  Map<String,String> systemInfo=new HashMap<String,String>();  Map<String,String> systemVer=new HashMap<String,String>();  NetAppClusterApi ncApi=new NetAppClusterApi.Builder(system.getIpAddress(),system.getPortNumber(),system.getUsername(),system.getPassword()).https(true).build();  try {    systemInfo=ncApi.clusterSystemInfo();    systemVer=ncApi.systemVer();    if ((null == systemInfo) || (systemInfo.size() <= 0)) {      _logger.error("Failed to retrieve NetAppC Filer info!");      system.setReachableStatus(false);      return;    }    if ((null == systemVer) || (systemVer.size() <= 0)) {      _logger.error("Failed to retrieve NetAppC Filer info!");      system.setReachableStatus(false);      return;    }    system.setReachableStatus(true);    system.setSerialNumber(systemInfo.get(SYSTEM_SERIAL_NUM));    String sysNativeGuid=NativeGUIDGenerator.generateNativeGuid(system);    system.setNativeGuid(sysNativeGuid);    system.setFirmwareVersion(systemVer.get(SYSTEM_FIRMWARE_REL));    _logger.info("NetAppC Filer discovery for storage system {} complete",system.getId());  } catch (  Exception e) {    _logger.error("Failed to retrieve NetAppC Filer info!");    system.setReachableStatus(false);    String msg="exception occurred while attempting to retrieve NetAppC filer information. Storage system: " + system.getIpAddress() + " "+ e.getMessage();    _logger.error(msg);    throw new NetAppCException(msg);  }}  }
class C{  static String toString(Object value){  return new JsonStringWriter().value(value).write();}  }
class C{  public final void testValidateFails(){  NumberValidator numberValidator=new NumberValidator("foo");  assertFalse(numberValidator.validate("abc"));  assertFalse(numberValidator.validate("123abc"));}  }
class C{  @Override public String toString(){  return format("ContentLength=%s, ContentType=%s",Long.valueOf(this.contentLength()),this.getContentType());}  }
class C{  @Deprecated private static ArrayList<FrequencyTableEntry> hashToFreqEntries(HashMap<String,ArrayList<Integer>> hash){  ArrayList<FrequencyTableEntry> res=new ArrayList<FrequencyTableEntry>();  for (  Entry<String,ArrayList<Integer>> e : hash.entrySet()) {    char[] payload=e.getKey().toCharArray();    int frequency=e.getValue().size();    for (    Integer i : e.getValue()) {      res.add(new FrequencyTableEntry(i,payload.clone(),frequency));    }  }  return res;}  }
class C{  public static void rotate(Mat image,double angle){  double radians=Math.toRadians(angle);  double sin=Math.abs(Math.sin(radians));  double cos=Math.abs(Math.cos(radians));  int newWidth=(int)(image.width() * cos + image.height() * sin);  int newHeight=(int)(image.width() * sin + image.height() * cos);  Point center=new Point(newWidth / 2,newHeight / 2);  Mat rotMatrix=Imgproc.getRotationMatrix2D(center,angle,1.0);  Size size=new Size(newWidth,newHeight);  Imgproc.warpAffine(image,image,rotMatrix,image.size());}  }
class C{  @Override public String generateToolTip(XYDataset dataset,int series,int item){  if (!(dataset instanceof OHLCDataset)) {    return null;  }  StringBuilder sb=new StringBuilder();  OHLCDataset d=(OHLCDataset)dataset;  Number high=d.getHigh(series,item);  Number low=d.getLow(series,item);  Number open=d.getOpen(series,item);  Number close=d.getClose(series,item);  Number x=d.getX(series,item);  sb.append(d.getSeriesKey(series).toString());  if (x != null) {    Date date=new Date(x.longValue());    sb.append("--> Date=").append(this.dateFormatter.format(date));    if (high != null) {      sb.append(" High=");      sb.append(this.numberFormatter.format(high.doubleValue()));    }    if (low != null) {      sb.append(" Low=");      sb.append(this.numberFormatter.format(low.doubleValue()));    }    if (open != null) {      sb.append(" Open=");      sb.append(this.numberFormatter.format(open.doubleValue()));    }    if (close != null) {      sb.append(" Close=");      sb.append(this.numberFormatter.format(close.doubleValue()));    }  }  return sb.toString();}  }
class C{  @SuppressWarnings("unchecked") public <T>T aggregate(String sqlExpression,String sqlFunction,Class<T> returnType) throws DBException {  if (Util.isEmpty(sqlFunction,true)) {    throw new DBException("No Aggregate Function defined");  }  if (Util.isEmpty(sqlExpression,true)) {    if (AGGREGATE_COUNT == sqlFunction) {      sqlExpression="*";    } else {      throw new DBException("No Expression defined");    }  }  StringBuffer sqlSelect=new StringBuffer("SELECT ").append(sqlFunction).append("(").append(sqlExpression).append(")").append(" FROM ").append(table.getTableName());  T value=null;  T defaultValue=null;  String sql=buildSQL(sqlSelect,false);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,this.trxName);    rs=createResultSet(pstmt);    if (rs.next()) {      if (returnType.isAssignableFrom(BigDecimal.class)) {        value=(T)rs.getBigDecimal(1);        defaultValue=(T)Env.ZERO;      } else       if (returnType.isAssignableFrom(Double.class)) {        value=(T)Double.valueOf(rs.getDouble(1));        defaultValue=(T)Double.valueOf(0.00);      } else       if (returnType.isAssignableFrom(Integer.class)) {        value=(T)Integer.valueOf(rs.getInt(1));        defaultValue=(T)Integer.valueOf(0);      } else       if (returnType.isAssignableFrom(Timestamp.class)) {        value=(T)rs.getTimestamp(1);      } else       if (returnType.isAssignableFrom(Boolean.class)) {        value=(T)Boolean.valueOf("Y".equals(rs.getString(1)));        defaultValue=(T)Boolean.FALSE;      } else {        value=(T)rs.getObject(1);      }    }    if (rs.next()) {      throw new DBException("QueryMoreThanOneRecordsFound");    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (value == null) {    value=defaultValue;  }  return value;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(_method.getModifiers());}  }
class C{  public long bytes(){  return mType.bytes(mLength);}  }
class C{  public static void init(String configurationFile) throws Exception {  ri.init(configurationFile);}  }
class C{  public void numAnnotations(int num) throws IOException {  write16bit(num);}  }
class C{  protected StringLiteralForSTEImpl(){  super();}  }
class C{  private void initialize(){  parents=new int[this.nodes.length][];  parentDims=new int[this.nodes.length][];  for (int nodeIndex=0; nodeIndex < this.nodes.length; nodeIndex++) {    initializeNode(nodeIndex);  }}  }
class C{  public void redriveTask(Long taskId){  this.redriverActorProxy.tell(new TaskRedriverDetails(taskId,TaskRedriverDetails.RegisterAction.Redrive),ActorRef.noSender());}  }
class C{  public static Version fromBits(int major,int minor,int bugfix){  return new Version(major,minor,bugfix);}  }
class C{  void die(){  boolean reportHandled=false;  if (bv != null) {    bv.die();  }  Iterator<String> names=phaseComponents.keySet().iterator();  while (names.hasNext()) {    JComponent component=phaseComponents.get(names.next());    if (component instanceof ReportDisplay) {      if (reportHandled) {        continue;      }      reportHandled=true;    }    if (component instanceof Distractable) {      ((Distractable)component).removeAllListeners();    }  }  phaseComponents.clear();  frame.removeAll();  frame.setVisible(false);  try {    frame.dispose();  } catch (  Throwable error) {    error.printStackTrace();  }  client.die();  if (chatlounge != null) {    chatlounge.die();  }  TimerSingleton.getInstance().killTimer();  if (controller != null) {    controller.removeAllActions();    controller.clientgui=null;  }  if (menuBar != null) {    menuBar.die();    menuBar=null;  }}  }
class C{  public void endDocument() throws SAXException {  if (isFlushing() && w != null) {    try {      debugw.write("");      log.debug(":: endDocument ::");      log.debug(":: endDocument ::" + w.toString());      debugw.flush();      w.flush();    } catch (    IOException e) {      throw new SAXException("Failed to flush target writer: " + e.getMessage(),e);    }  }}  }
class C{  public static void sendMsg(final Context c,final String msg){  if (c != null && msg != null) {    msgLong(c,msg);  }}  }
class C{  public SearchForActions createSearch(int strategy,int qSearchImpl,HeuristicFunction hf){  QueueSearch qs=null;  SearchForActions result=null;switch (qSearchImpl) {case TREE_SEARCH:    qs=new TreeSearch();  break;case GRAPH_SEARCH:qs=new GraphSearch();break;case GRAPH_SEARCH_BFS:qs=new GraphSearchBFS();break;case BIDIRECTIONAL_SEARCH:qs=new BidirectionalSearch();}switch (strategy) {case DF_SEARCH:result=new DepthFirstSearch(qs);break;case BF_SEARCH:result=new BreadthFirstSearch(qs);break;case ID_SEARCH:result=new IterativeDeepeningSearch();break;case UC_SEARCH:result=new UniformCostSearch(qs);break;case GBF_SEARCH:result=new GreedyBestFirstSearch(qs,hf);break;case ASTAR_SEARCH:result=new AStarSearch(qs,hf);break;case RBF_SEARCH:result=new RecursiveBestFirstSearch(new AStarEvaluationFunction(hf));break;case RBF_AL_SEARCH:result=new RecursiveBestFirstSearch(new AStarEvaluationFunction(hf),true);break;case HILL_SEARCH:result=new HillClimbingSearch(hf);break;}return result;}  }
class C{  Parsed copy(){  Parsed cloned=new Parsed();  cloned.fieldValues.putAll(this.fieldValues);  cloned.zone=this.zone;  cloned.chrono=this.chrono;  cloned.leapSecond=this.leapSecond;  return cloned;}  }
class C{  @Override public Object applyOnce(final IIndex ndx,final IRaba keys,final IRaba vals){  final int n=keys.size();  final boolean returnOldValues=getReturnOldValues();  final byte[][] ret=returnOldValues ? new byte[n][] : null;  final boolean[] modified=returnWhat == ReturnWhatEnum.BitMask ? new boolean[n] : null;  int i=0, mutationCount=0;  while (i < n) {    final byte[] key=keys.get(i);    if (!returnOldValues && ndx.contains(key)) {      mutationCount++;      if (modified != null) {        modified[i]=true;      }    }    final byte[] oldval=ndx.remove(key);    if (assertFound) {      if (oldval == null) {        throw new AssertionError("No entry: " + BytesUtil.toString(key));      }    }    if (returnOldValues) {      ret[i]=oldval;    }    i++;  }switch (returnWhat) {case MutationCount:    return Long.valueOf(mutationCount);case OldValues:  return new ResultBuffer(n,ret,ndx.getIndexMetadata().getTupleSerializer().getLeafValuesCoder());case BitMask:return new ResultBitBuffer(n,modified,mutationCount);default :throw new AssertionError();}}  }
class C{  public InlineQueryResultCachedGifBuilder title(String title){  this.title=title;  return this;}  }
