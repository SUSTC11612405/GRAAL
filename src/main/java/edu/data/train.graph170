class C{  public void actionPerformed(ActionEvent e){  VImageDialog vid=new VImageDialog(Env.getWindow(m_WindowNo),m_mImage);  vid.setVisible(true);  int AD_Image_ID=vid.getAD_Image_ID();  Integer newValue=null;  if (AD_Image_ID != 0)   newValue=new Integer(AD_Image_ID);  m_mImage=null;  setValue(newValue);  try {    fireVetoableChange(m_columnName,null,newValue);  } catch (  PropertyVetoException pve) {  }}  }
class C{  @Override protected void paintFocusIndicator(Graphics arg0,int arg1,Rectangle[] arg2,int arg3,Rectangle arg4,Rectangle arg5,boolean arg6){}  }
class C{  public int size(){  return 0;}  }
class C{  @Override protected void registerSelf(){}  }
class C{  public void clipRect(int x,int y,int width,int height){  graphics.clipRect(x,y,width,height);  if (debugLog()) {    info().log(toShortString() + " Setting clipRect: " + (new Rectangle(x,y,width,height))+ " New clipRect: "+ graphics.getClip());  }}  }
class C{  public DeviationRenderer(){  this(true,true);}  }
class C{  protected AbstractPixelMatrixNode(final PixelMatrix pixelMatrix){  super();  if (pixelMatrix == null) {    throw new IllegalArgumentException("pixelMatrix must not be null");  }  this.pixelMatrix=pixelMatrix;  setHeight(this.pixelMatrix.getHeight());  setWidth(this.pixelMatrix.getWidth());}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  synchronized protected void timeout(){  sendNextItem();}  }
class C{  protected void writeEmbeddedPrimaryKeysStmt(Table table,StringBuilder ddl){  Column[] primaryKeyColumns=table.getPrimaryKeyColumns();  if ((primaryKeyColumns.length > 0) && shouldGeneratePrimaryKeys(primaryKeyColumns)) {    printStartOfEmbeddedStatement(ddl);    writePrimaryKeyStmt(table,primaryKeyColumns,ddl);  }}  }
class C{  private static void echo(TcpServer<ByteBuf,ByteBuf> transport){  ReactorTcpServer.create(transport).startAndAwait(null);}  }
class C{  @SuppressWarnings("rawtypes") public RegexBOp(final IValueExpression<? extends IV> var,final IValueExpression<? extends IV> pattern){  this(new BOp[]{var,pattern},anns(pattern,null));}  }
class C{  public void testSessionRejectMissingEvent() throws Throwable {  ClientSessionListener listener=createListener();  AtomicBoolean received=new AtomicBoolean();  listener.onEvent("foo",null);  PublishResponse response;  response=handler.handle(PublishRequest.builder().withSession(1).withEventIndex(10).withPreviousIndex(2).withEvents(new Event<String>("foo","Hello world!")).build()).get();  assertEquals(response.status(),Response.Status.ERROR);  assertEquals(response.index(),1);  assertEquals(state.getEventIndex(),1);  assertFalse(received.get());}  }
class C{  public StringSetXMLEventParser(String namespaceURI,QName elementName){  super(namespaceURI);  this.elementName=elementName;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=m_arg0.execute(xctxt).xstr();  double start=m_arg1.execute(xctxt).num();  int lenOfS1=s1.length();  XMLString substr;  if (lenOfS1 <= 0)   return XString.EMPTYSTRING; else {    int startIndex;    if (Double.isNaN(start)) {      start=-1000000;      startIndex=0;    } else {      start=Math.round(start);      startIndex=(start > 0) ? (int)start - 1 : 0;    }    if (null != m_arg2) {      double len=m_arg2.num(xctxt);      int end=(int)(Math.round(len) + start) - 1;      if (end < 0)       end=0; else       if (end > lenOfS1)       end=lenOfS1;      if (startIndex > lenOfS1)       startIndex=lenOfS1;      substr=s1.substring(startIndex,end);    } else {      if (startIndex > lenOfS1)       startIndex=lenOfS1;      substr=s1.substring(startIndex);    }  }  return (XString)substr;}  }
class C{  public WTrxMaterial(){  log.info("");  try {    dynParameter();    zkInit();    dynInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  public void plusEquals(double a){  real+=a;}  }
class C{  public boolean isSimple(){  nonSimpleLocation=null;  return computeSimple(inputGeom);}  }
class C{  Object parseValue(final String valueStr){  return mParameterType == null ? Boolean.TRUE : Flag.instanceHelper(mParameterType,valueStr);}  }
class C{  private GraphBuilder(boolean directed){  this.directed=directed;}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  private void move(final Point p,final int direction){  if (direction < 0 || direction > 7) {    throw new IllegalArgumentException("Not a direction :" + direction);  }  if (direction == 1 || direction == 2 || direction == 3) {    p.x++;  } else   if (direction == 5 || direction == 6 || direction == 7) {    p.x--;  }  if (direction == 5 || direction == 4 || direction == 3) {    p.y++;  } else   if (direction == 7 || direction == 0 || direction == 1) {    p.y--;  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (name == null) {    throw new NullPointerException();  }  if (nodes == null) {    throw new NullPointerException();  }  sessionChanged=false;  newSession=false;}  }
class C{  protected FunctionBlockMappingModelImpl(){  super();}  }
class C{  public MatsimCountsReader(final CoordinateTransformation coordinateTransformation,final Counts counts){  this.coordinateTransformation=coordinateTransformation;  this.counts=counts;}  }
class C{  public SetTaskContainerMapping(String source,String taskName,String containerId){  super(source);  setType(TYPE);  setKey(taskName);  putMessageValue(CONTAINER_KEY,containerId);}  }
class C{  public boolean addValue(Value v){  return values.add(v);}  }
class C{  public static double P_FalseNegatives(int y[],int ypred[]){  int s=0;  for (int j=0; j < y.length; j++) {    if (ypred[j] == 0 && y[j] == 1)     s++;  }  return s;}  }
class C{  public static Object withTraits(Object self,Class<?>... traits){  List<Class> interfaces=new ArrayList<Class>();  Collections.addAll(interfaces,traits);  return ProxyGenerator.INSTANCE.instantiateDelegate(interfaces,self);}  }
class C{  public void updateColumn(int index,String header){  WTableColumn tableColumn;  tableColumn=getColumn(index);  tableColumn.setHeaderValue(Util.cleanAmp(header));  return;}  }
class C{  @Override public boolean isUnderReplicated(){  try {    int numBlocks=getNumCurrentReplicas();    if (numBlocks == -1) {      return false;    }    int desiredBlocks;    if (configuredMinReplicas != null) {      desiredBlocks=configuredMinReplicas;    } else {      desiredBlocks=getFsDesiredReplication();    }    return numBlocks < desiredBlocks;  } catch (  IllegalAccessException e) {    LOGGER.error(UNEXPECTED_ERROR,e);  }catch (  InvocationTargetException e) {    LOGGER.error(UNEXPECTED_ERROR,e);  }catch (  IllegalArgumentException e) {    LOGGER.error(UNEXPECTED_ERROR,e);  }  return false;}  }
class C{  private BigDecimal notNull(Percent value){  if (null == value) {    return (new BigDecimal(0.0D));  } else {    return (value.getBigDecimalValue());  }}  }
class C{  @Override public synchronized boolean addAll(Collection<? extends E> collection){  return addAll(elementCount,collection);}  }
class C{  protected void createContextMenuFor(StructuredViewer viewer){  MenuManager contextMenu=new MenuManager("#PopUp");  contextMenu.add(new Separator("additions"));  contextMenu.setRemoveAllWhenShown(true);  contextMenu.addMenuListener(this);  Menu menu=contextMenu.createContextMenu(viewer.getControl());  viewer.getControl().setMenu(menu);  getSite().registerContextMenu(contextMenu,new UnwrappingSelectionProvider(viewer));  int dndOperations=DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK;  Transfer[] transfers=new Transfer[]{LocalTransfer.getInstance(),LocalSelectionTransfer.getTransfer(),FileTransfer.getInstance()};  viewer.addDragSupport(dndOperations,transfers,new ViewerDragAdapter(viewer));  viewer.addDropSupport(dndOperations,transfers,new EditingDomainViewerDropAdapter(editingDomain,viewer));}  }
class C{  public static long generate(long crc,char[] buffer,int offset,int len){  for (int i=0; i < len; i++) {    char ch=buffer[offset + i];    if (ch > 0xff)     crc=next(crc,(ch >> 8));    crc=next(crc,ch);  }  return crc;}  }
class C{  public BadLocationException(){  super();}  }
class C{  public static BeanSerializer createDummy(Class<?> forType){  return new BeanSerializer(forType,NO_PROPS,null,null,null);}  }
class C{  public void addRunConfiguration(Project project,String name,String label,String runTarget){  try {    EditableProperties properties=new EditableProperties(true);    properties.setProperty("$label",label);    properties.setProperty("$target.run",runTarget);    J2SEProjectConfigurations.createConfigurationFiles(project,name,properties,null);  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  }catch (  IllegalArgumentException ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  public Log10(){  super(Number.class,Number.class);}  }
class C{  public static Complex add(Complex c1,Complex c2){  return new Complex(c1.real + c2.real,c1.imag + c2.imag);}  }
class C{  void acc_extract(int off1,AccurateValue n2,int off2,int len2){  for (int i=0; i < len2; i++) {    digits[off1 + i]=n2.digits[off2 + i];  }  for (int i=0; i < digits.length; i++) {    if (digits[i] != 0) {      return;    }  }  sign=0;}  }
class C{  public void invokeHookBoltExecute(Tuple tuple,long executeLatencyNs){  if (taskHooks.size() != 0) {    BoltExecuteInfo executeInfo=new BoltExecuteInfo(tuple,getThisTaskId(),executeLatencyNs / Constants.MILLISECONDS_TO_NANOSECONDS);    for (    ITaskHook taskHook : taskHooks) {      taskHook.boltExecute(executeInfo);    }  }}  }
class C{  @SuppressWarnings("deprecation") public com.oracle.truffle.tools.debug.shell.REPLMessage createMessage(String op){  final com.oracle.truffle.tools.debug.shell.REPLMessage msg=new com.oracle.truffle.tools.debug.shell.REPLMessage(com.oracle.truffle.tools.debug.shell.REPLMessage.OP,op);  msg.put(com.oracle.truffle.tools.debug.shell.REPLMessage.SOURCE_NAME,source.getShortName());  msg.put(com.oracle.truffle.tools.debug.shell.REPLMessage.FILE_PATH,source.getPath());  msg.put(com.oracle.truffle.tools.debug.shell.REPLMessage.LINE_NUMBER,Integer.toString(lineNumber));  return msg;}  }
class C{  public DSAParameters generateParameters(){  return (use186_3) ? generateParameters_FIPS186_3() : generateParameters_FIPS186_2();}  }
class C{  private void loadClassNames(String classListFilename){  try (EntryReader er=new EntryReader(classListFilename,"^#.*",null)){    for (    String line : er) {      String name=line.trim();      if (!name.isEmpty()) {        classnames.add(name);      }    }  } catch (  IOException e) {    System.err.println("Failed to load class names: " + e.getMessage());  }}  }
class C{  protected boolean takeStep(int i1,int i2,double F2) throws Exception {  double alph1, alph2, y1, y2, F1, s, L, H, k11, k12, k22, eta, a1, a2, f1, f2, v1, v2, Lobj, Hobj;  double C1=m_C * m_data.instance(i1).weight();  double C2=m_C * m_data.instance(i2).weight();  if (i1 == i2) {    return false;  }  alph1=m_alpha[i1];  alph2=m_alpha[i2];  y1=m_class[i1];  y2=m_class[i2];  F1=m_errors[i1];  s=y1 * y2;  if (y1 != y2) {    L=Math.max(0,alph2 - alph1);    H=Math.min(C2,C1 + alph2 - alph1);  } else {    L=Math.max(0,alph1 + alph2 - C1);    H=Math.min(C2,alph1 + alph2);  }  if (L >= H) {    return false;  }  k11=m_kernel.eval(i1,i1,m_data.instance(i1));  k12=m_kernel.eval(i1,i2,m_data.instance(i1));  k22=m_kernel.eval(i2,i2,m_data.instance(i2));  eta=2 * k12 - k11 - k22;  if (eta < 0) {    a2=alph2 - y2 * (F1 - F2) / eta;    if (a2 < L) {      a2=L;    } else     if (a2 > H) {      a2=H;    }  } else {    f1=SVMOutput(i1,m_data.instance(i1));    f2=SVMOutput(i2,m_data.instance(i2));    v1=f1 + m_b - y1 * alph1 * k11 - y2 * alph2 * k12;    v2=f2 + m_b - y1 * alph1 * k12 - y2 * alph2 * k22;    double gamma=alph1 + s * alph2;    Lobj=(gamma - s * L) + L - 0.5 * k11 * (gamma - s * L)* (gamma - s * L) - 0.5 * k22 * L* L - s * k12 * (gamma - s * L)* L - y1 * (gamma - s * L) * v1 - y2 * L * v2;    Hobj=(gamma - s * H) + H - 0.5 * k11 * (gamma - s * H)* (gamma - s * H) - 0.5 * k22 * H* H - s * k12 * (gamma - s * H)* H - y1 * (gamma - s * H) * v1 - y2 * H * v2;    if (Lobj > Hobj + m_eps) {      a2=L;    } else     if (Lobj < Hobj - m_eps) {      a2=H;    } else {      a2=alph2;    }  }  if (Math.abs(a2 - alph2) < m_eps * (a2 + alph2 + m_eps)) {    return false;  }  if (a2 > C2 - m_Del * C2) {    a2=C2;  } else   if (a2 <= m_Del * C2) {    a2=0;  }  a1=alph1 + s * (alph2 - a2);  if (a1 > C1 - m_Del * C1) {    a1=C1;  } else   if (a1 <= m_Del * C1) {    a1=0;  }  if (a1 > 0) {    m_supportVectors.insert(i1);  } else {    m_supportVectors.delete(i1);  }  if ((a1 > 0) && (a1 < C1)) {    m_I0.insert(i1);  } else {    m_I0.delete(i1);  }  if ((y1 == 1) && (a1 == 0)) {    m_I1.insert(i1);  } else {    m_I1.delete(i1);  }  if ((y1 == -1) && (a1 == C1)) {    m_I2.insert(i1);  } else {    m_I2.delete(i1);  }  if ((y1 == 1) && (a1 == C1)) {    m_I3.insert(i1);  } else {    m_I3.delete(i1);  }  if ((y1 == -1) && (a1 == 0)) {    m_I4.insert(i1);  } else {    m_I4.delete(i1);  }  if (a2 > 0) {    m_supportVectors.insert(i2);  } else {    m_supportVectors.delete(i2);  }  if ((a2 > 0) && (a2 < C2)) {    m_I0.insert(i2);  } else {    m_I0.delete(i2);  }  if ((y2 == 1) && (a2 == 0)) {    m_I1.insert(i2);  } else {    m_I1.delete(i2);  }  if ((y2 == -1) && (a2 == C2)) {    m_I2.insert(i2);  } else {    m_I2.delete(i2);  }  if ((y2 == 1) && (a2 == C2)) {    m_I3.insert(i2);  } else {    m_I3.delete(i2);  }  if ((y2 == -1) && (a2 == 0)) {    m_I4.insert(i2);  } else {    m_I4.delete(i2);  }  if (m_KernelIsLinear) {    Instance inst1=m_data.instance(i1);    for (int p1=0; p1 < inst1.numValues(); p1++) {      if (inst1.index(p1) != m_data.classIndex()) {        m_weights[inst1.index(p1)]+=y1 * (a1 - alph1) * inst1.valueSparse(p1);      }    }    Instance inst2=m_data.instance(i2);    for (int p2=0; p2 < inst2.numValues(); p2++) {      if (inst2.index(p2) != m_data.classIndex()) {        m_weights[inst2.index(p2)]+=y2 * (a2 - alph2) * inst2.valueSparse(p2);      }    }  }  for (int j=m_I0.getNext(-1); j != -1; j=m_I0.getNext(j)) {    if ((j != i1) && (j != i2)) {      m_errors[j]+=y1 * (a1 - alph1) * m_kernel.eval(i1,j,m_data.instance(i1)) + y2 * (a2 - alph2) * m_kernel.eval(i2,j,m_data.instance(i2));    }  }  m_errors[i1]+=y1 * (a1 - alph1) * k11 + y2 * (a2 - alph2) * k12;  m_errors[i2]+=y1 * (a1 - alph1) * k12 + y2 * (a2 - alph2) * k22;  m_alpha[i1]=a1;  m_alpha[i2]=a2;  m_bLow=-Double.MAX_VALUE;  m_bUp=Double.MAX_VALUE;  m_iLow=-1;  m_iUp=-1;  for (int j=m_I0.getNext(-1); j != -1; j=m_I0.getNext(j)) {    if (m_errors[j] < m_bUp) {      m_bUp=m_errors[j];      m_iUp=j;    }    if (m_errors[j] > m_bLow) {      m_bLow=m_errors[j];      m_iLow=j;    }  }  if (!m_I0.contains(i1)) {    if (m_I3.contains(i1) || m_I4.contains(i1)) {      if (m_errors[i1] > m_bLow) {        m_bLow=m_errors[i1];        m_iLow=i1;      }    } else {      if (m_errors[i1] < m_bUp) {        m_bUp=m_errors[i1];        m_iUp=i1;      }    }  }  if (!m_I0.contains(i2)) {    if (m_I3.contains(i2) || m_I4.contains(i2)) {      if (m_errors[i2] > m_bLow) {        m_bLow=m_errors[i2];        m_iLow=i2;      }    } else {      if (m_errors[i2] < m_bUp) {        m_bUp=m_errors[i2];        m_iUp=i2;      }    }  }  if ((m_iLow == -1) || (m_iUp == -1)) {    throw new Exception("This should never happen!");  }  return true;}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public String toString(){  return String.format("View '%s'",getName());}  }
class C{  @Override public boolean isRepeatable(){  return buffer != null;}  }
class C{  @Override public void cancelTask(){switch (step_type) {case SQL:    if (running_statement != null) {      try {        running_statement.cancel();      } catch (      SQLException e) {        Config.INSTANCE.logger.error(e.getMessage());      }    }  break;case BATCH:if (running_process != null && running_process.isAlive()) {  running_process.destroy();}break;}}  }
class C{  protected SimpleLiteral(String label,String language){  setLabel(label);  setLanguage(language);}  }
class C{  private boolean startDBProcess(String ProcedureName){  log.fine(ProcedureName + "(" + m_pi.getAD_PInstance_ID()+ ")");  boolean started=false;  String trxName=m_trx != null ? m_trx.getTrxName() : null;  if (m_IsServerProcess) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        m_pi=server.dbProcess(m_pi,ProcedureName);        log.finest("server => " + m_pi);        started=true;      }    } catch (    UndeclaredThrowableException ex) {      Throwable cause=ex.getCause();      if (cause != null) {        if (cause instanceof InvalidClassException)         log.log(Level.SEVERE,"Version Server <> Client: " + cause.toString() + " - "+ m_pi,ex); else         log.log(Level.SEVERE,"AppsServer error(1b): " + cause.toString() + " - "+ m_pi,ex);      } else {        log.log(Level.SEVERE," AppsServer error(1) - " + m_pi,ex);        cause=ex;      }      m_pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessRunError") + " " + cause.getLocalizedMessage());      m_pi.setError(true);      return false;    }catch (    Exception ex) {      Throwable cause=ex.getCause();      if (cause == null)       cause=ex;      log.log(Level.SEVERE,"AppsServer error - " + m_pi,cause);      m_pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessRunError") + " " + cause.getLocalizedMessage());      m_pi.setError(true);      return false;    }  }  if (!started) {    return ProcessUtil.startDatabaseProcedure(m_pi,ProcedureName,m_trx);  }  return true;}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  protected DefaultRenderer buildCategoryRenderer(int[] colors){  DefaultRenderer renderer=new DefaultRenderer();  renderer.setLabelsTextSize(15);  renderer.setLegendTextSize(15);  renderer.setMargins(new int[]{20,30,15,0});  for (  int color : colors) {    SimpleSeriesRenderer r=new SimpleSeriesRenderer();    r.setColor(color);    renderer.addSeriesRenderer(r);  }  return renderer;}  }
class C{  public void smsIntent(String phoneNumber,String message){  mContext.startActivity(new Intent(Intent.ACTION_SENDTO).setData(Uri.parse("sms:")).putExtra("sms_body",message).putExtra("address",phoneNumber).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));}  }
class C{  public void testPredefined(){  Map<Object,Integer> map=new LinkedHashMap<>();  for (long i=1, max=1L << 48; i < max; i*=-3) {    map.put((byte)i,(int)(byte)i);    map.put((char)i,(int)(char)i);    map.put((int)i,(int)i);    map.put(i,(int)(i ^ (i >>> 32)));  }  map.put(0.0,0);  map.put(1.0,1072693248);  map.put(-1.0,-1074790400);  map.put(3.1415e200,1130072580);  map.put(3.1415e-200,-819810675);  map.put("",0);  map.put("asdf",3003444);  map.put("Hadoop\u3092\u6bba\u3059",2113729932);  map.put("224ea4cd-f449-4dcb-869a-5317c63bd619",258755163);  map.put("fdc9ec54-ff53-4fdb-8239-5a3ac1fb31bd",-863611257);  map.put("0f9c9b94-02ae-45a6-9d5c-a066dbdf2636",-1499939567);  map.put("d8f1f916-4357-4cfe-a7df-49d4721690bf",2041432124);  map.put(UUID.fromString("224ea4cd-f449-4dcb-869a-5317c63bd619"),-1767478264);  map.put(UUID.fromString("fdc9ec54-ff53-4fdb-8239-5a3ac1fb31bd"),1096337416);  map.put(UUID.fromString("0f9c9b94-02ae-45a6-9d5c-a066dbdf2636"),1269913698);  map.put(UUID.fromString("d8f1f916-4357-4cfe-a7df-49d4721690bf"),1315925123);  boolean ok=true;  for (  Map.Entry<Object,Integer> entry : map.entrySet()) {    int act=entry.getKey().hashCode();    int exp=entry.getValue();    if (exp == act)     continue;    ok=false;    info("Validation of hash code for '" + entry.getKey() + "' failed"+ " [expected="+ exp+ ", actual="+ act+ ".");  }  if (ok)   return;  fail("Java hash codes validation fails.");}  }
class C{  public CTagEventNodes(final JFrame parent,final ZyGraph graph,final TraceList list,final CTag tag){  super("Tag event nodes with selected tag");  Preconditions.checkNotNull(parent,"IE01282: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE01379: Graph argument can not be null");  Preconditions.checkNotNull(list,"IE01380: Trace list argument can't be null");  Preconditions.checkNotNull(tag,"IE01283: Tag argument can not be null");  m_parent=parent;  m_graph=graph;  m_list=list;  m_tag=tag;}  }
class C{  public Response newLineTooLongResponse(){  return null;}  }
class C{  public CActionSelectNodePredecessors(final ZyGraph graph,final NaviNode node){  super("Select predecessors");  m_graph=Preconditions.checkNotNull(graph,"IE00932: Graph argument can't be null");  m_node=Preconditions.checkNotNull(node,"IE00933: Node argument can't be null");}  }
class C{  public DirectedEdge(Node from,Node to,Coordinate directionPt,boolean edgeDirection){  this.from=from;  this.to=to;  this.edgeDirection=edgeDirection;  p0=from.getCoordinate();  p1=directionPt;  double dx=p1.x - p0.x;  double dy=p1.y - p0.y;  quadrant=Quadrant.quadrant(dx,dy);  angle=Math.atan2(dy,dx);}  }
class C{  public boolean isTransparent(){  return !isProxied() || tunnelEstablished;}  }
class C{  public SecretKey engineResolveSecretKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  throw new UnsupportedOperationException();}  }
class C{  private ReplicatorRuntimeConf(String serviceName){  replicatorHomeDir=locateReplicatorHomeDir();  replicatorLogDir=locateReplicatorLogDir();  replicatorConfDir=locateReplicatorConfDir();  replicatorProperties=new File(locateReplicatorConfDir(),"static-" + serviceName + ".properties");  if (!replicatorProperties.isFile() || !replicatorProperties.canRead()) {    throw new ServerRuntimeException("Replicator static properties does not exist or is invalid: " + replicatorProperties);  }  replicatorDynamicProperties=new File(replicatorConfDir,"dynamic-" + serviceName + ".properties");  replicatorDynamicRole=new File(replicatorConfDir,"dynamic-" + serviceName + ".role");  this.clearDynamicProperties=Boolean.parseBoolean(System.getProperty(CLEAR_DYNAMIC_PROPERTIES));}  }
class C{  @Override public boolean shouldFilter(){  return RequestContext.getCurrentContext().getRequest().getRequestURI().endsWith(Swagger2Controller.DEFAULT_URL);}  }
class C{  public PriorityQueue<A> drop(){  return new PriorityQueue<>(comparator,size - 1,root.pop(comparator,size),queueType);}  }
class C{  private void createOrganization(Service service,RevenuesPerMarketplace revenuesPerMarketplace,RevenuesOverAllMarketplaces revenuesOverAllMarketplaces){  OrganizationData supplierOrg=service.getSupplier().getOrganizationData();  Organization orga=revenuesPerMarketplace.getSuppliers().getOrganization(supplierOrg.getId());  if (orga == null) {    Organization org=buildOrganizationForSupplier(supplierOrg);    revenuesPerMarketplace.addOrUpdateSupplier(org);    revenuesOverAllMarketplaces.addOrUpdateSupplier(org);  }}  }
class C{  public void performSelectAll(){  text.selectAll();  checkSelection();  checkDeleteable();}  }
class C{  public void restoreDefaults(boolean doSave){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:00.578 -0500",hash_original_method="A745E0763E42351C9DE31AD2579A5B7C",hash_generated_method="2E9EE1FBCA17BF52E15300F9A36ED1DF") private void loadEriFileFromFileSystem(){}  }
class C{  public boolean isExpanded(){  return expanded;}  }
class C{  public long actionProc(long id,long sel,long arg0){  if (sel == sel_aboutMenuItemSelected_) {    about.run();  } else   if (sel == sel_preferencesMenuItemSelected_) {    pref.run();  } else {  }  return 99;}  }
class C{  public void beforeEmitSetter(JavaFileWriter writer,PropertyGenerator propertyGenerator,MethodDeclarationParameters setterParams) throws IOException {}  }
class C{  public static Options instance(Context context){  Options instance=context.get(optionsKey);  if (instance == null)   instance=new Options(context);  return instance;}  }
class C{  private ResourceImpl deduct(ResourceImpl totalResource,ResourceImpl deduction) throws NotFoundException, ConflictException {  final String typeId=totalResource.getType();  final ResourceType resourceType=getResourceType(typeId);  return resourceType.deduct(totalResource,deduction);}  }
class C{  public static void pad(ArrayDataOutput stream,long size) throws FitsException {  pad(stream,size,(byte)0);}  }
class C{  public boolean isShipment(){  return isSOTrx() && getM_InOutLine_ID() != 0;}  }
class C{  public static int listContainsNoCase(String list,String value,String delimiter,boolean includeEmptyFields,boolean multiCharacterDelimiter){  if (StringUtil.isEmpty(value))   return -1;  Array arr=listToArray(list,delimiter,includeEmptyFields,multiCharacterDelimiter);  int len=arr.size();  for (int i=1; i <= len; i++) {    if (StringUtil.indexOfIgnoreCase(arr.get(i,"").toString(),value) != -1)     return i - 1;  }  return -1;}  }
class C{  private void updateDesiresForSuccessfulReading(long readingTimeMs){  if (readingTimeMs < shortTimeWanted) {    shortTimeWanted=(long)(shortTimeWanted * prefs.shortTimeSuccessfulMultiplier / prefs.shortTimeUnsuccessfulMultipler) + 1;    if (shortTimeWanted < prefs.shortTimeMinMs)     shortTimeWanted=prefs.shortTimeMinMs;    if (shortTimeWanted < readingTimeMs * prefs.minReadingTimeMultipler)     shortTimeWanted=(long)(readingTimeMs * prefs.minReadingTimeMultipler) + 1;  }  longTimeWanted=(long)(prefs.minLongTimeOfShortTimeMultiplier * shortTimeWanted) + 1;  waitTimeMs=calculateAbsTimeNeeded((long)(shortTimeWanted * prefs.extraWaitTimeShortTimeMultiplier + shortTimeWanted) + 1);  currTimeWanted=shortTimeWanted;}  }
class C{  @Override public void glActiveTexture(int texture){  mGL.glActiveTexture(texture);}  }
class C{  protected void handleConnect(Connector start,Connector end){}  }
class C{  public boolean isExternal(){  return StorageClass == IMAGE_SYM_CLASS_EXTERNAL;}  }
class C{  public static Class unboxType(Class wrapperType){  Class c=(Class)wrapperMap.get(wrapperType);  if (c != null)   return c;  throw new InterpreterError("Not a primitive wrapper type: " + wrapperType);}  }
class C{  private JPanel constructMediaPanel(){  PROGRESS.setMinimumSize(progressBarDimension);  PROGRESS.setPreferredSize(progressBarDimension);  PROGRESS.setMaximum(3600);  PROGRESS.setEnabled(false);  VOLUME.setMinimum(0);  VOLUME.setValue(50);  VOLUME.setMaximum(100);  VOLUME.setEnabled(true);  VOLUME.setOpaque(false);  VOLUME.setToolTipText(I18n.tr("Volume"));  registerListeners();  JPanel panel=new JPanel();  panel.setLayout(new MigLayout("insets 0, gap 0, fillx","[][]"));  panel.setPreferredSize(new Dimension(480,55));  panel.setMinimumSize(new Dimension(480,55));  panel.setMaximumSize(new Dimension(480,55));  panel.add(createPlaybackButtonsPanel(),"span 1 2,growy, gapright 0");  panel.add(createTrackDetailPanel(),"wrap, w 345px");  panel.add(createProgressPanel(),"w 345px");  return panel;}  }
class C{  public ProjectionSupport(boolean useNotifier){  this(null,useNotifier);}  }
class C{  public void waitForLocalImplement(final String endPointName,long timeoutMS){  if (timeoutMS <= 0) {    timeoutMS=Integer.MAX_VALUE;  }  final long endTime=timeoutMS + System.currentTimeMillis();  while (System.currentTimeMillis() < endTime && !hasLocalEndPoint(endPointName)) {    ThreadUtil.sleep(50);  }}  }
class C{  private void createSubTaskForDeleteCallbacks(ResourceRemovalTaskState currentState,int resourceCount,QueryTask queryTask){  SubTaskService.SubTaskState subTaskInitState=new SubTaskService.SubTaskState();  ResourceRemovalTaskState subTaskPatchBody=new ResourceRemovalTaskState();  subTaskPatchBody.taskInfo=new TaskState();  subTaskPatchBody.taskInfo.stage=TaskState.TaskStage.FINISHED;  subTaskPatchBody.taskSubStage=SubStage.FINISHED;  subTaskInitState.parentPatchBody=Utils.toJson(subTaskPatchBody);  subTaskInitState.parentTaskLink=getSelfLink();  subTaskInitState.completionsRemaining=resourceCount;  subTaskInitState.errorThreshold=currentState.errorThreshold;  subTaskInitState.tenantLinks=currentState.tenantLinks;  subTaskInitState.documentExpirationTimeMicros=currentState.documentExpirationTimeMicros;  Operation startPost=Operation.createPost(this,UUID.randomUUID().toString()).setBody(subTaskInitState).setCompletion(null);  getHost().startService(startPost,new SubTaskService());}  }
class C{  public boolean isRequestGroupDeliveryDisplayedReportsEnabled(){  return mRcsSettings.isImReportsActivated() && !mRcsSettings.isAlbatrosRelease() && mRcsSettings.isRequestAndRespondToGroupDisplayReportsEnabled();}  }
class C{  @SuppressFBWarnings(value="VA_FORMAT_STRING_USES_NEWLINE",justification="We will use the standard carriage return character.") public BusinessObjectDataStorageFilesCreateResponse addStorageFiles(BusinessObjectDataKey businessObjectDataKey,UploaderInputManifestDto manifest,S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto,String storageName) throws IOException, JAXBException, URISyntaxException {  LOGGER.info("Adding storage files to the business object data ...");  BusinessObjectDataStorageFilesCreateRequest request=new BusinessObjectDataStorageFilesCreateRequest();  request.setNamespace(businessObjectDataKey.getNamespace());  request.setBusinessObjectDefinitionName(businessObjectDataKey.getBusinessObjectDefinitionName());  request.setBusinessObjectFormatUsage(businessObjectDataKey.getBusinessObjectFormatUsage());  request.setBusinessObjectFormatFileType(businessObjectDataKey.getBusinessObjectFormatFileType());  request.setBusinessObjectFormatVersion(businessObjectDataKey.getBusinessObjectFormatVersion());  request.setPartitionValue(businessObjectDataKey.getPartitionValue());  request.setSubPartitionValues(businessObjectDataKey.getSubPartitionValues());  request.setBusinessObjectDataVersion(businessObjectDataKey.getBusinessObjectDataVersion());  request.setStorageName(storageName);  List<StorageFile> storageFiles=new ArrayList<>();  request.setStorageFiles(storageFiles);  String localPath=s3FileTransferRequestParamsDto.getLocalPath();  String s3KeyPrefix=s3FileTransferRequestParamsDto.getS3KeyPrefix();  List<ManifestFile> localFiles=manifest.getManifestFiles();  for (  ManifestFile manifestFile : localFiles) {    StorageFile storageFile=new StorageFile();    storageFiles.add(storageFile);    storageFile.setFilePath((s3KeyPrefix + manifestFile.getFileName()).replaceAll("\\\\","/"));    storageFile.setFileSizeBytes(Paths.get(localPath,manifestFile.getFileName()).toFile().length());    storageFile.setRowCount(manifestFile.getRowCount());  }  JAXBContext requestContext=JAXBContext.newInstance(BusinessObjectDataStorageFilesCreateRequest.class);  Marshaller requestMarshaller=requestContext.createMarshaller();  requestMarshaller.setProperty(Marshaller.JAXB_ENCODING,StandardCharsets.UTF_8.name());  requestMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  StringWriter sw=new StringWriter();  requestMarshaller.marshal(request,sw);  BusinessObjectDataStorageFilesCreateResponse businessObjectDataStorageFilesCreateResponse;  try (CloseableHttpClient client=httpClientOperations.createHttpClient()){    URI uri=new URIBuilder().setScheme(getUriScheme()).setHost(regServerAccessParamsDto.getRegServerHost()).setPort(regServerAccessParamsDto.getRegServerPort()).setPath(HERD_APP_REST_URI_PREFIX + "/businessObjectDataStorageFiles").build();    HttpPost post=new HttpPost(uri);    post.addHeader("Content-Type",DEFAULT_CONTENT_TYPE);    post.addHeader("Accepts",DEFAULT_ACCEPT);    if (regServerAccessParamsDto.getUseSsl()) {      post.addHeader(getAuthorizationHeader());    }    post.setEntity(new StringEntity(sw.toString()));    LOGGER.info(String.format("    HTTP POST URI: %s",post.getURI().toString()));    LOGGER.info(String.format("    HTTP POST Headers: %s",Arrays.toString(post.getAllHeaders())));    LOGGER.info(String.format("    HTTP POST Entity Content:%n%s",sw.toString()));    businessObjectDataStorageFilesCreateResponse=getBusinessObjectDataStorageFilesCreateResponse(httpClientOperations.execute(client,post));  }   LOGGER.info("Successfully added storage files to the registered business object data.");  return businessObjectDataStorageFilesCreateResponse;}  }
class C{  public void createConstraints(DatabaseSession session,JPAMSchemaManager schemaManager,boolean build){  createConstraints(getTableDefinitions(),session,schemaManager,build);}  }
class C{  protected void doRemove(Entry entry){  Rect rect=entry.rect;  this.rectPacker.remove(rect);  this.clearRect((BufferedImage)this.rectPacker.getBackingStore(),rect.x(),rect.y(),rect.w(),rect.h());  this.markDirty(rect.x(),rect.y(),rect.w(),rect.h());  if (this.rectPacker.verticalFragmentationRatio() > this.maxVerticalFragmentation)   this.rectPacker.compact();}  }
class C{  private void writeHeaderString(BufferedWriter output) throws IOException {  output.write("Name");  output.write(delimiter);  output.write("Total_Count");  output.write(delimiter);  for (int i=0; i < 24; i++) {    output.write("H");    output.write(String.valueOf(i));    output.write(delimiter);  }  for (int i=0; i < 23; i++) {    output.write("D");    output.write(String.valueOf(i));    output.write(delimiter);  }  output.write("D23");  output.newLine();}  }
class C{  protected synchronized void addEnterListener(Hashtable<TxState,Set<EventListener>> listeners,EventListener lstnr,TxState state){  Set<EventListener> lstnrs=listeners.get(state);  if (lstnrs == null)   lstnrs=new HashSet<EventListener>();  if (!lstnrs.contains(lstnr))   lstnrs.add(lstnr);  listeners.put(state,lstnrs);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public EmployeeKey(){}  }
class C{  @SuppressWarnings("unchecked") protected void rebuildBeanConnections(Vector<Vector<?>> deserialized,Object key) throws Exception {  int i;  int n;  int sourcePos;  int targetPos;  String event;  boolean hidden;  Vector<String> conns;  BeanConnection conn;  StringTokenizer tok;  Vector<BeanConnection> beanconns;  conns=m_BeanConnectionRelation.get(key);  if (conns == null) {    return;  }  for (n=0; n < conns.size(); n++) {    tok=new StringTokenizer(conns.get(n).toString(),",");    conn=null;    sourcePos=Integer.parseInt(tok.nextToken());    targetPos=Integer.parseInt(tok.nextToken());    event=tok.nextToken();    hidden=stringToBoolean(tok.nextToken());    if ((!(key instanceof MetaBean)) || (getDataType() == DATATYPE_USERCOMPONENTS)) {      conn=createBeanConnection(sourcePos,targetPos,event,hidden);    } else {      beanconns=BeanConnection.getConnections(m_vectorIndex);      for (i=0; i < beanconns.size(); i++) {        conn=beanconns.get(i);        if ((conn.getSource() == m_BeanInstances.get(sourcePos)) && (conn.getTarget() == m_BeanInstances.get(targetPos)) && (conn.getEventName().equals(event))) {          break;        }        conn=null;      }    }    if (key instanceof MetaBean) {      setBeanConnection(conn,((MetaBean)key).getAssociatedConnections());    } else {      setBeanConnection(conn,(Vector<BeanConnection>)deserialized.get(INDEX_BEANCONNECTIONS));    }  }}  }
class C{  public static String toToken(POS tag){  return tokens[tag.value];}  }
class C{  @Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){  super.onLayout(changed,left,top,right,bottom);  if (mfExpandedTextSize == 0.0f) {    mfExpandedTextSize=getSingleLineTextSize(msDisplayText.toString(),mTextPaint,getMeasuredWidth(),mfCollapsedTextSize,mfMaxExpandedTextSize,0.5f,getResources().getDisplayMetrics());  }  ensureStaticLayout(getMeasuredWidth(),false);  int nStaticHeight=mStaticMeasuringLayout.getHeight() - mStaticMeasuringLayout.getTopPadding() - getPaddingBottom();  int nStaticWidth=mStaticMeasuringLayout.getWidth();  setCollapsedBounds(0,0,nStaticWidth,nStaticHeight);  ensureStaticLayout(getMeasuredWidth(),true);  nStaticHeight=mStaticMeasuringLayout.getHeight() - mStaticMeasuringLayout.getTopPadding() - getPaddingBottom();  nStaticWidth=mStaticMeasuringLayout.getWidth();  setExpandedBounds(0,0,nStaticWidth,nStaticHeight);  recalculate();  mStaticMeasuringLayout=null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 2: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2: ",(int)progress);    }    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (int i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (int i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    updateProgress("Loop 2 of 2: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          outputFile.setValue(row,col,cdf[binNum]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public NedFrame(double[] ecefVector,LatLonPoint llpt){  double ecef[]=new double[3];  double ned[]=new double[3];  double lat_=llpt.getY();  double lon_=llpt.getX();  double latitude=ProjMath.degToRad(lat_);  double longitude=ProjMath.degToRad(lon_);  ecef[0]=ecefVector[0];  ecef[1]=ecefVector[1];  ecef[2]=ecefVector[2];  ecef2ned(ned,latitude,longitude,ecef);  this.x=(float)ned[0];  this.y=(float)ned[1];  this.z=(float)ned[2];}  }
class C{  public boolean equals(XObject obj2){  int t=obj2.getType();  try {    if (t == XObject.CLASS_NODESET)     return obj2.equals(this); else     if (t == XObject.CLASS_BOOLEAN)     return obj2.bool() == bool(); else     return m_val == obj2.num();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  byte[] signatureBytes;  try {    signatureBytes=Base64.decode(signature,Base64.DEFAULT);  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Base64 decoding failed.");    return false;  }  try {    Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(signatureBytes)) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }  return false;}  }
class C{  public static void throwIfNotQueryable(final Class<?> type){  Queryable queryable=type.getAnnotation(Queryable.class);  if (queryable != null && !queryable.value()) {    throw new NotQueryableException(String.format("Type \"%1$s\" is not queryable as has been marked with @Queryable(false)",type.getName()));  }}  }
class C{  public boolean shouldCheckForUpdates(long lastUpdateTimeMillis){  long nowMillis=System.currentTimeMillis();  boolean shouldCheckForUpdates=!isSameDay(nowMillis,lastUpdateTimeMillis);  return shouldCheckForUpdates;}  }
class C{  public void acceptState(){}  }
class C{  static public void saveData(Context context,String key,int val){  context.getSharedPreferences(PREF_APP,Context.MODE_PRIVATE).edit().putInt(key,val).apply();}  }
class C{  public void onOffer(long sessionId,String sdp){  send(new RTCOffer(deviceId,sessionId,sdp));}  }
class C{  private void mergeGroupsAsObjects(Object3D object){  if (object.isContainer() && object.getNumChildren() == 1 && object.getChildAt(0).getName().startsWith("Object")) {    Object3D child=object.getChildAt(0);    object.removeChild(child);    child.setName(object.getName());    addChildSetParent(object.getParent(),child);    object.getParent().removeChild(object);    object=child;  }  for (int i=0; i < object.getNumChildren(); i++) {    mergeGroupsAsObjects(object.getChildAt(i));  }}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  @Override protected byte[] encrypt(byte type,byte[] fragment,int offset,int len){  try {    int content_mac_length=len + hash_size;    int padding_length=(block_size == 0) ? 0 : getPaddingSize(++content_mac_length);    byte[] res=new byte[content_mac_length + padding_length];    System.arraycopy(fragment,offset,res,0,len);    mac_material_part[0]=type;    mac_material_part[1]=(byte)((0x00FF00 & len) >> 8);    mac_material_part[2]=(byte)(0x0000FF & len);    messageDigest.update(mac_write_secret);    messageDigest.update(pad_1);    messageDigest.update(write_seq_num);    messageDigest.update(mac_material_part);    messageDigest.update(fragment,offset,len);    byte[] digest=messageDigest.digest();    messageDigest.update(mac_write_secret);    messageDigest.update(pad_2);    messageDigest.update(digest);    digest=messageDigest.digest();    System.arraycopy(digest,0,res,len,hash_size);    if (block_size != 0) {      Arrays.fill(res,content_mac_length - 1,res.length,(byte)(padding_length));    }    if (logger != null) {      logger.println("SSLRecordProtocol.encrypt: " + (block_size != 0 ? "GenericBlockCipher with padding[" + padding_length + "]:" : "GenericStreamCipher:"));      logger.print(res);    }    byte[] rez=new byte[encCipher.getOutputSize(res.length)];    encCipher.update(res,0,res.length,rez);    incSequenceNumber(write_seq_num);    return rez;  } catch (  GeneralSecurityException e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during the encryption"));  }}  }
class C{  public short readShort() throws SQLException {  Short attrib=(Short)getNextAttribute();  return (attrib == null) ? 0 : attrib.shortValue();}  }
class C{  public boolean connectToBroker(final MqttAsyncConnection connection){  try {    connection.connect(new MqttCallbackHandler(connection),new MqttAsyncConnectionRunnable(connection));    return true;  } catch (  SpyException e) {    Platform.runLater(new MqttEventHandler(new MqttConnectionAttemptFailureEvent(connection,e)));    logger.error(e.getMessage(),e);  }  return false;}  }
class C{  public Event_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_filename=jcas.getRequiredFeatureDE(casType,"filename","uima.cas.String",featOkTst);  casFeatCode_filename=(null == casFeat_filename) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_filename).getCode();  casFeat_sentId=jcas.getRequiredFeatureDE(casType,"sentId","uima.cas.Integer",featOkTst);  casFeatCode_sentId=(null == casFeat_sentId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_sentId).getCode();  casFeat_tokId=jcas.getRequiredFeatureDE(casType,"tokId","uima.cas.Integer",featOkTst);  casFeatCode_tokId=(null == casFeat_tokId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_tokId).getCode();  casFeat_eventId=jcas.getRequiredFeatureDE(casType,"eventId","uima.cas.String",featOkTst);  casFeatCode_eventId=(null == casFeat_eventId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_eventId).getCode();  casFeat_eventInstanceId=jcas.getRequiredFeatureDE(casType,"eventInstanceId","uima.cas.Integer",featOkTst);  casFeatCode_eventInstanceId=(null == casFeat_eventInstanceId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_eventInstanceId).getCode();  casFeat_aspect=jcas.getRequiredFeatureDE(casType,"aspect","uima.cas.String",featOkTst);  casFeatCode_aspect=(null == casFeat_aspect) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_aspect).getCode();  casFeat_modality=jcas.getRequiredFeatureDE(casType,"modality","uima.cas.String",featOkTst);  casFeatCode_modality=(null == casFeat_modality) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_modality).getCode();  casFeat_polarity=jcas.getRequiredFeatureDE(casType,"polarity","uima.cas.String",featOkTst);  casFeatCode_polarity=(null == casFeat_polarity) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_polarity).getCode();  casFeat_tense=jcas.getRequiredFeatureDE(casType,"tense","uima.cas.String",featOkTst);  casFeatCode_tense=(null == casFeat_tense) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_tense).getCode();  casFeat_token=jcas.getRequiredFeatureDE(casType,"token","de.unihd.dbs.uima.types.heideltime.Token",featOkTst);  casFeatCode_token=(null == casFeat_token) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_token).getCode();}  }
class C{  public boolean validate(InputNode node) throws Exception {  Position line=node.getPosition();  Class expect=type.getType();  String name=entry.getKey();  if (name == null) {    name=context.getName(expect);  }  if (entry.isAttribute()) {    throw new ElementException("Can not have %s as an attribute for %s at %s",expect,entry,line);  }  return validate(node,name);}  }
class C{  private IndexMetaData upgradeLegacyRoutingSettings(IndexMetaData indexMetaData){  if (indexMetaData.getSettings().get(IndexMetaData.SETTING_LEGACY_ROUTING_HASH_FUNCTION) == null && indexMetaData.getCreationVersion().before(Version.V_2_0_0_beta1)) {    Settings indexSettings=Settings.builder().put(indexMetaData.getSettings()).put(IndexMetaData.SETTING_LEGACY_ROUTING_HASH_FUNCTION,pre20HashFunction).put(IndexMetaData.SETTING_LEGACY_ROUTING_USE_TYPE,pre20UseType == null ? false : pre20UseType).build();    return IndexMetaData.builder(indexMetaData).version(indexMetaData.getVersion()).settings(indexSettings).build();  } else   if (indexMetaData.getCreationVersion().onOrAfter(Version.V_2_0_0_beta1)) {    if (indexMetaData.getSettings().get(IndexMetaData.SETTING_LEGACY_ROUTING_HASH_FUNCTION) != null || indexMetaData.getSettings().get(IndexMetaData.SETTING_LEGACY_ROUTING_USE_TYPE) != null) {      throw new IllegalStateException("Index [" + indexMetaData.getIndex() + "] created on or after 2.0 should NOT contain ["+ IndexMetaData.SETTING_LEGACY_ROUTING_HASH_FUNCTION+ "] + or ["+ IndexMetaData.SETTING_LEGACY_ROUTING_USE_TYPE+ "] in its index settings");    }  }  return indexMetaData;}  }
class C{  public void release(){}  }
class C{  public static String urlEncode(String value,String encoding){  if (value == null) {    return "";  }  try {    String encoded=URLEncoder.encode(value,encoding);    return encoded.replace("+","%20").replace("*","%2A").replace("%7E","~").replace("%2F","/");  } catch (  UnsupportedEncodingException e) {    throw new IllegalArgumentException("failed to encode url!",e);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  Log.d(TAG,"onCreate()");  super.onCreate(savedInstanceState);  setContentView(R.layout.download_image_activity);  mLoadingProgressBar=(ProgressBar)findViewById(R.id.progressBar_loading);}  }
class C{  public static String[] tokenizeToStringArray(String str,String delimiters){  if (str == null) {    return null;  }  String[] tokens=str.split("[" + delimiters + "]");  for (int i=0; i < tokens.length; i++) {    tokens[i]=tokens[i].trim();  }  return tokens;}  }
class C{  public RangeQueryBuilder gt(long from){  this.from=from;  this.includeLower=false;  return this;}  }
class C{  private boolean createCompressedRegionOnVm(final VM vm,final String name,final Compressor compressor){  return createCompressedRegionOnVm(vm,name,compressor,false);}  }
class C{  private static double distance(Problem problem,Solution a,Solution b,double power){  double distance=0.0;  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    distance+=Math.pow(Math.abs(a.getObjective(i) - b.getObjective(i)),power);  }  return Math.pow(distance,1.0 / power);}  }
class C{  private void validateCBill(final PaymentBean bean,final String mode) throws ValidationException, ApplicationException {  if (LOGGER.isDebugEnabled())   LOGGER.debug("Starting validateCBill...");  final List<ValidationError> errors=new ArrayList<ValidationError>();  EntityType entity=null;  List<Object[]> list=null;  if (mode.equalsIgnoreCase("Create"))   list=persistenceService.findAllByNamedQuery("getPayeeDetailsForPayableCode",bean.getBillId(),cBillGlcodeIdList); else   list=persistenceService.findAllByNamedQuery("getPayeeDetailsForPayableCodeForVoucher",bean.getBillId(),contingentBillGlcodeList);  if (list == null || list.size() == 0) {    if (mode.equalsIgnoreCase("Create"))     list=persistenceService.findAllByNamedQuery("getPayeeDetailsForDebitCode",bean.getBillId()); else     list=persistenceService.findAllByNamedQuery("getPayeeDetailsForDebitCodeForVoucher",bean.getBillId());    if (list == null || list.size() == 0) {      LOGGER.error("Sub ledger details are missing for this bill id ->" + bean.getBillId());      errors.add(new ValidationError("entityType","Sub ledger details are missing for this bill number : " + bean.getBillNumber()));      throw new ValidationException(errors);    } else     for (    final Object[] obj : list) {      entity=getEntity(Integer.valueOf(obj[0].toString()),Long.valueOf(obj[1].toString()));      validateEntity(entity);    }  } else   for (  final Object[] obj : list) {    entity=getEntity(Integer.valueOf(obj[0].toString()),Long.valueOf(obj[1].toString()));    validateEntity(entity);  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("Completed validateCBill.");}  }
class C{  public void check(Environment env) throws ClassNotFound {}  }
class C{  public Socket createSocket(InetAddress address,int port,InetAddress localAddress,int localPort) throws IOException {  Socket socket=createBoundSocket(new InetSocketAddress(localAddress,localPort));  connectSocket(socket,new InetSocketAddress(address,port));  return socket;}  }
class C{  public static float dipToPixels(Context context,float dipValue){  DisplayMetrics metrics=context.getResources().getDisplayMetrics();  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dipValue,metrics);}  }
class C{  public EntityQuery fetchSize(int fetchSize){  this.fetchSize=fetchSize;  return this;}  }
class C{  void invert(Expr br){  verboseStatus("INVERT " + br);switch (br.op) {case OP_iftrue:    br.op=OP_iffalse;  break;case OP_iffalse:br.op=OP_iftrue;break;case OP_ifnlt:br.op=OP_iflt;break;case OP_ifnle:br.op=OP_ifle;break;case OP_ifngt:br.op=OP_ifgt;break;case OP_ifnge:br.op=OP_ifge;break;case OP_ifeq:br.op=OP_ifne;break;case OP_ifne:br.op=OP_ifeq;break;case OP_iflt:br.op=OP_ifnlt;break;case OP_ifle:br.op=OP_ifnle;break;case OP_ifgt:br.op=OP_ifngt;break;case OP_ifge:br.op=OP_ifnge;break;case OP_ifstricteq:br.op=OP_ifstrictne;break;case OP_ifstrictne:br.op=OP_ifstricteq;break;}Edge e0=br.succ[0];Edge e1=br.succ[1];e0.label=1;e1.label=0;br.succ[0]=e1;br.succ[1]=e0;}  }
class C{  public static Marketplace findOneGlobalMarketplace(DataService ds){  Query query=ds.createNamedQuery("Marketplace.getAll");  List<Marketplace> result=ParameterizedTypes.list(query.getResultList(),Marketplace.class);  Assert.assertNotNull("No global marketplace defined",result);  Assert.assertTrue("No global marketplace defined",result.size() > 0);  return result.get(0);}  }
class C{  private void clinkstep8(DBIDRef id,DBIDArrayIter it,int n,WritableDBIDDataStore pi,WritableDoubleDataStore lambda,WritableDoubleDataStore m){  DBIDVar p_i=DBIDUtil.newVar(), pp_i=DBIDUtil.newVar();  for (it.seek(0); it.getOffset() < n; it.advance()) {    p_i.from(pi,it);    pp_i.from(pi,p_i);    if (DBIDUtil.equal(pp_i,id) && lambda.doubleValue(it) >= lambda.doubleValue(p_i)) {      pi.putDBID(it,id);    }  }}  }
class C{  protected static void loadTransforms(ClassLoader loader,Properties props,Configuration config){  for (Iterator<Object> i=props.keySet().iterator(); i.hasNext(); ) {    String key=(String)i.next();    String className=props.getProperty(key);    if (Debug.verboseOn()) {      Debug.logVerbose("Adding FTL Transform " + key + " with class "+ className,module);    }    try {      config.setSharedVariable(key,loader.loadClass(className).newInstance());    } catch (    Exception e) {      Debug.logError(e,"Could not pre-initialize dynamically loaded class: " + className + ": "+ e,module);    }  }}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  @Override public void valueChanged(ListSelectionEvent event){  clearMarkers(false);  for (  MapEntity entity : getSelectedEntities()) {    Position pos=getPosition(entity);    if (pos != null) {      currMarkers.add(view.getMap().addMarker(pos.getLat(),pos.getLon()));      view.adjustToCenter(pos.getLat(),pos.getLon());    }  }  updateEnabledState();}  }
class C{  public void doInitAction(DoInitAction tag){  DummyAction a=recordActions(tag.actionList);  if (m_header.version > 6 && tag.sprite != null) {    String __Packages=MovieMetaData.idRef(tag.sprite,m_dictionary);    String className=(__Packages != null && __Packages.startsWith("__Packages")) ? __Packages.substring(11) : null;    a.setClassName(className);  }}  }
class C{  public void addBinaryData(final byte[] bData){  this.binaryDataSize+=bData.length;  this.list.add(bData);}  }
class C{  public boolean isDrawCubicEnabled(){  return mDrawCubic;}  }
class C{  public EventException(Throwable cause,String message){  super(message);  this.cause=cause;}  }
class C{  public boolean matches(ClassNode classNode){  GenericsType[] genericsTypes=classNode.getGenericsTypes();  if (genericsTypes != null && genericsTypes.length == 0)   return true;  if (classNode.isGenericsPlaceHolder()) {    if (genericsTypes == null)     return true;    if (isWildcard()) {      if (lowerBound != null)       return genericsTypes[0].getName().equals(lowerBound.getUnresolvedName());      if (upperBounds != null) {        for (        ClassNode upperBound : upperBounds) {          String name=upperBound.getGenericsTypes()[0].getName();          if (genericsTypes[0].getName().equals(name))           return true;        }        return false;      }    }    return genericsTypes[0].getName().equals(name);  }  if (wildcard || placeholder) {    if (upperBounds != null) {      boolean upIsOk=true;      for (int i=0, upperBoundsLength=upperBounds.length; i < upperBoundsLength && upIsOk; i++) {        final ClassNode upperBound=upperBounds[i];        upIsOk=implementsInterfaceOrIsSubclassOf(classNode,upperBound);      }      upIsOk=upIsOk && checkGenerics(classNode);      return upIsOk;    }    if (lowerBound != null) {      return implementsInterfaceOrIsSubclassOf(lowerBound,classNode) && checkGenerics(classNode);    }    return true;  }  if ((type != null && !type.equals(classNode))) {    return false;  }  return type == null || compareGenericsWithBound(classNode,type);}  }
class C{  public static String stripTags(String html){  if (html == null) {    return "";  }  if ((html.indexOf('<') == -1) || (html.indexOf('>') == -1)) {    return html;  }  StringWriter writer=new StringWriter();  TextStream stream=new TextStream(html);  while (!stream.atEnd()) {    String text=stream.upTo('<');    writer.write(text);    int position=stream.getPosition();    stream.skip();    String word=stream.nextWord();    if (word != null) {      if (word.equals("p")) {        writer.write("\n\n");      } else       if (word.equals("br")) {        writer.write("\n");      } else       if (word.equals("div")) {        writer.write("\n");      }      stream.skipTo('>');      if (stream.atEnd()) {        stream.setPosition(position);        writer.write(stream.upToEnd());      } else {        stream.skip();      }    }  }  return writer.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.744 -0500",hash_original_method="1F751777DEFC6D435260F5703D7849F2",hash_generated_method="7EE27EF1F20A6275792A7B5250FC7943") private void createAndRegisterObserverProxyLocked(IContentObserver observer){  if (mObserver != null) {    throw new IllegalStateException("an observer is already registered");  }  mObserver=new ContentObserverProxy(observer,this);  mCursor.registerContentObserver(mObserver);}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  xstr().dispatchCharactersEvents(ch);}  }
class C{  @Ignore @Test public void testJson() throws Exception {{    JavaType type=CollectionType.construct(List.class,SimpleType.construct(Topology.class));    List<Topology> l=om.readValue(Integration1.class.getResourceAsStream("/simple/topologies.json"),type);    Topology t=(Topology)l.get(0);    Assert.assertEquals(4,t.getGroupNodeIds().size());    Assert.assertEquals(10,t.getAlertBoltIds().size());  }{    JavaType type=CollectionType.construct(List.class,SimpleType.construct(Publishment.class));    List<Publishment> l=om.readValue(Integration1.class.getResourceAsStream("/simple/publishments.json"),type);    Publishment p=l.get(0);    Assert.assertEquals("KAFKA",p.getType());  }  checkAll("/simple/");  checkAll("/correlation/");}  }
class C{  @Override public String toString(){  return "(" + exp1 + ") and ("+ exp2+ ")";}  }
class C{  public static void removeActiveUser(){  Preferences prefs=getPrefs();  prefs.remove(ACTIVE_USER);  flushPrefs(prefs);}  }
class C{  public void writeInt(final int i){  buffer[offset++]=(byte)((i >> 24) & 0xff);  buffer[offset++]=(byte)((i >> 16) & 0xff);  buffer[offset++]=(byte)((i >> 8) & 0xff);  buffer[offset++]=(byte)(i & 0xff);}  }
class C{  public BezierTool(BezierFigure prototype,@Nullable Map<AttributeKey,Object> attributes){  this(prototype,attributes,null);}  }
class C{  public boolean isTable(long arc){switch ((int)arc) {case 23:    return true;case 22:  return true;case 21:return true;case 20:return true;default :break;}return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.276 -0500",hash_original_method="DE4F68C515AD9FDEF86DCFCC83AF390E",hash_generated_method="EE825901EA78D181A0B0D954DD596287") private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public ActiveMQRAMessageConsumer(final MessageConsumer consumer,final ActiveMQRASession session){  this.consumer=consumer;  this.session=session;  if (ActiveMQRAMessageConsumer.trace) {    ActiveMQRALogger.LOGGER.trace("new ActiveMQMessageConsumer " + this + " consumer="+ consumer+ " session="+ session);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] buildAudioSpecificConfig(int audioObjectType,int sampleRateIndex,int channelConfig){  byte[] audioSpecificConfig=new byte[2];  audioSpecificConfig[0]=(byte)((audioObjectType << 3) & 0xF8 | (sampleRateIndex >> 1) & 0x07);  audioSpecificConfig[1]=(byte)((sampleRateIndex << 7) & 0x80 | (channelConfig << 3) & 0x78);  return audioSpecificConfig;}  }
class C{  protected MetricZipperTransform(ValueZipper valueZipper){  this.valueZipper=valueZipper;  this.defaultScope=valueZipper.name();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:57.503 -0400",hash_original_method="C359156F5B1EAAF19EFF7CED9FA6C214",hash_generated_method="C2264BE40DBB5954D615FAFA5D21BBB2") @Override public void close() throws IOException {  closed=true;  def.end();  in.close();}  }
class C{  public final void testGetExponent(){  RSAOtherPrimeInfo ropi=new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),BigInteger.valueOf(3L));  assertEquals(2L,ropi.getExponent().longValue());}  }
class C{  public static String quoteHtml(final String s){  final StringBuilder t=new StringBuilder();  for (  char c : s.toCharArray()) {    final String entity=UNICODE_TO_HTML_ENTITY_MAP.get(c);    if (entity == null) {      t.append(c);    } else {      t.append('&');      t.append(entity);      t.append(';');    }  }  return t.toString();}  }
class C{  @Ignore @Test(expected=MailOperationException.class) public void testSendMailToOrganization_InvalidMailAddress() throws SaaSApplicationException {  Organization org=new Organization();  addOrganizationRole(org,OrganizationRoleType.CUSTOMER);  Organization supplier=createSupplier();  OrganizationReference ref=new OrganizationReference(supplier,org,OrganizationReferenceType.SUPPLIER_TO_CUSTOMER);  supplier.getTargets().add(ref);  org.getSources().add(ref);  org.setEmail(INVALID_TO);  org.setLocale(Locale.ENGLISH.toString());  commSrv.sendMail(org.getEmail(),EmailType.SUPPORT_ISSUE,null,null,null);}  }
class C{  static void verifyCAKeyUsage(X509Certificate cert) throws CertPathValidatorException {  String msg="CA key usage";  if (debug != null) {    debug.println("KeyChecker.verifyCAKeyUsage() ---checking " + msg + "...");  }  boolean[] keyUsageBits=cert.getKeyUsage();  if (keyUsageBits == null) {    return;  }  if (!keyUsageBits[KEY_CERT_SIGN]) {    throw new CertPathValidatorException(msg + " check failed: keyCertSign bit is not set",null,null,-1,PKIXReason.INVALID_KEY_USAGE);  }  if (debug != null) {    debug.println("KeyChecker.verifyCAKeyUsage() " + msg + " verified.");  }}  }
class C{  @Override public boolean onKey(View view,int keyCode,KeyEvent event){  EditText input=(EditText)view;  if (event.getAction() != KeyEvent.ACTION_DOWN) {    return false;  }  if (keyCode == KeyEvent.KEYCODE_MENU) {    openOptionsMenu();    return true;  }  if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {    String message=scrollback.goBack();    if (message != null) {      input.setText(message);    }    return true;  }  if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {    String message=scrollback.goForward();    if (message != null) {      input.setText(message);    }    return true;  }  if (keyCode == KeyEvent.KEYCODE_ENTER) {    sendMessage(input.getText().toString());    TextKeyListener.clear(input.getText());    return true;  }  if (keyCode == KeyEvent.KEYCODE_SEARCH) {    doNickCompletion(input);    return true;  }  return false;}  }
class C{  private boolean canReassignAudioFocus(String clientId){  if (!mFocusStack.isEmpty() && IN_VOICE_COMM_FOCUS_ID.equals(mFocusStack.peek().mClientId)) {    if (clientId.contains(CLIENT_ID_QCHAT) && isQchatCallAllowed())     return true; else     return false;  }  return true;}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public void computeAxis(float yMin,float yMax){  if (mViewPortHandler.contentHeight() > 10 && !mViewPortHandler.isFullyZoomedOutX()) {    PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentRight(),mViewPortHandler.contentTop());    if (!mYAxis.isInverted()) {      yMin=(float)p1.x;      yMax=(float)p2.x;    } else {      yMin=(float)p2.x;      yMax=(float)p1.x;    }  }  computeAxisValues(yMin,yMax);}  }
class C{  @Override public PeriodicAmbientSoundSource create(final ConfigurableFactoryContext ctx){  PeriodicAmbientSoundSource source;  source=new PeriodicAmbientSoundSource(getSound(ctx),getRadius(ctx),getVolume(ctx),getMinInterval(ctx),getMaxInterval(ctx));  return source;}  }
class C{  public SerialClob(char ch[]) throws SerialException, SQLException {  len=ch.length;  buf=new char[(int)len];  for (int i=0; i < len; i++) {    buf[i]=ch[i];  }  origLen=len;  clob=null;}  }
class C{  public Update(Name zone,int dclass){  super();  if (!zone.isAbsolute())   throw new RelativeNameException(zone);  DClass.check(dclass);  getHeader().setOpcode(Opcode.UPDATE);  Record soa=Record.newRecord(zone,Type.SOA,DClass.IN);  addRecord(soa,Section.QUESTION);  this.origin=zone;  this.dclass=dclass;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.885 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public GsonBuilder addDeserializationExclusionStrategy(ExclusionStrategy strategy){  excluder=excluder.withExclusionStrategy(strategy,false,true);  return this;}  }
class C{  public <TFragment extends Fragment>Intent newIntent(Context context,Class<TFragment> fragmentName,Bundle fragmentArgs){  Intent intent=new Intent(context,activityClass);  Bundle extras;  if (fragmentArgs != null) {    extras=new Bundle(fragmentArgs);  } else {    extras=new Bundle();  }  extras.putString(SingleFragmentActivity.EXTRA_FRAGMENT_NAME,fragmentName.getCanonicalName());  intent.putExtras(extras);  return intent;}  }
class C{  private boolean findAndRemove(Object e){  if (e != null) {    for (Node pred=null, p=head; p != null; ) {      Object item=p.item;      if (p.isData) {        if (item != null && item != p && e.equals(item) && p.tryMatchData()) {          unsplice(pred,p);          return true;        }      } else       if (item == null)       break;      pred=p;      if ((p=p.next) == pred) {        pred=null;        p=head;      }    }  }  return false;}  }
class C{  public void finishMoveLeftAnim(){  if (!mExpandFlag) {    return;  }  ObjectAnimator imageAAnimator=null;  PropertyValuesHolder imageA_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageB.getIndexLable()]);  PropertyValuesHolder imageA_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageB.getIndexLable()]);  if (imageA.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else   if (imageA.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else {    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y);  }  ObjectAnimator imageBAnimator=null;  PropertyValuesHolder imageB_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageC.getIndexLable()]);  PropertyValuesHolder imageB_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageC.getIndexLable()]);  if (imageB.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else   if (imageB.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else {    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y);  }  ObjectAnimator imageCAnimator=null;  PropertyValuesHolder imageC_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageD.getIndexLable()]);  PropertyValuesHolder imageC_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageD.getIndexLable()]);  if (imageC.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else   if (imageC.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else {    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y);  }  imageCAnimator.setDuration(mDuration);  ObjectAnimator imageDAnimator=null;  PropertyValuesHolder imageD_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageE.getIndexLable()]);  PropertyValuesHolder imageD_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageE.getIndexLable()]);  if (imageD.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else   if (imageD.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else {    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y);  }  ObjectAnimator imageEAnimator=null;  PropertyValuesHolder imageE_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageA.getIndexLable()]);  PropertyValuesHolder imageE_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageA.getIndexLable()]);  if (imageE.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else   if (imageE.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else {    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y);  }  setLeftIndex();  AnimatorSet set=new AnimatorSet();  set.playTogether(imageAAnimator,imageBAnimator,imageCAnimator,imageDAnimator,imageEAnimator);  set.setDuration(mDuration);  set.start();}  }
class C{  boolean isCaptureComplete(){  return image != null && totalCaptureResult != null;}  }
class C{  private double unQuantize(int x){  if (x == 0) {    return 0;  } else {    return ((quantizationBase + 1) * Math.pow(quantizationBase,x - 1) - 1) / 2;  }}  }
class C{  private boolean isWhitespaceString(Object object){  if (object != null) {    String s=object.toString();    return s != null && "".equals(s.trim());  }  return false;}  }
class C{  public static void stopVMsUsingEC2Client(AmazonEC2AsyncClient client,VerificationHost host,List<String> instanceIdsToStop) throws Throwable {  StopInstancesRequest stopRequest=new StopInstancesRequest(instanceIdsToStop);  AsyncHandler<StopInstancesRequest,StopInstancesResult> stopHandler=new AWSStopHandlerAsync(host);  client.stopInstancesAsync(stopRequest,stopHandler);  waitForInstancesToBeStopped(client,host,instanceIdsToStop);}  }
class C{  public CSVFileWriter(String path,String separator){  log.info("Initializing the writer.");  this.separator=separator;  try {    writer=IOUtils.getBufferedWriter(path);  } catch (  Exception ee) {    ee.printStackTrace();    throw new RuntimeException("writer could not be instantiated");  }  if (writer == null) {    throw new RuntimeException("writer is null");  }  log.info("... done!");}  }
class C{  private void handleIgnoredTag(boolean opening,Editable output){  int len=output.length();  if (opening) {    output.setSpan(new Annotation(IGNORED_ANNOTATION_KEY,IGNORED_ANNOTATION_VALUE),len,len,Spanned.SPAN_MARK_MARK);  } else {    Object start=getOpeningAnnotation(output);    if (start != null) {      int where=output.getSpanStart(start);      output.removeSpan(start);      output.delete(where,len);    }  }}  }
class C{  public UIHistory(IBurpExtenderCallbacks callbacks){  super(JSplitPane.VERTICAL_SPLIT);  this.callbacks=callbacks;  initComponent();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.832 -0500",hash_original_method="455EA274614F97D61B2EABEB4507FE65",hash_generated_method="1C306A20DEB9E71EFEE80C2F18DCAEC3") public int size(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return count;  }  finally {    lock.unlock();  }}  }
class C{  @Override public JnaService identify() throws SQLException {  return new JnaService(this);}  }
class C{  boolean persistManagedSchema(boolean createOnly){  if (loader instanceof ZkSolrResourceLoader) {    return persistManagedSchemaToZooKeeper(createOnly);  }  File managedSchemaFile=new File(loader.getConfigDir(),managedSchemaResourceName);  OutputStreamWriter writer=null;  try {    File parentDir=managedSchemaFile.getParentFile();    if (!parentDir.isDirectory()) {      if (!parentDir.mkdirs()) {        final String msg="Can't create managed schema directory " + parentDir.getAbsolutePath();        log.error(msg);        throw new SolrException(ErrorCode.SERVER_ERROR,msg);      }    }    final FileOutputStream out=new FileOutputStream(managedSchemaFile);    writer=new OutputStreamWriter(out,StandardCharsets.UTF_8);    persist(writer);    log.info("Upgraded to managed schema at " + managedSchemaFile.getPath());  } catch (  IOException e) {    final String msg="Error persisting managed schema " + managedSchemaFile;    log.error(msg,e);    throw new SolrException(ErrorCode.SERVER_ERROR,msg,e);  } finally {    IOUtils.closeQuietly(writer);    try {      FileUtils.sync(managedSchemaFile);    } catch (    IOException e) {      final String msg="Error syncing the managed schema file " + managedSchemaFile;      log.error(msg,e);    }  }  return true;}  }
class C{  public synchronized WALEntry next(WALEntry key) throws IOException {  outBuf.reset();  keyLength=next(outBuf);  if (keyLength < 0) {    return null;  }  valBuffer.reset(outBuf.getData(),outBuf.getLength());  key=deserializeKey(key);  valBuffer.mark(0);  if (valBuffer.getPosition() != keyLength) {    throw new IOException(key + " read " + valBuffer.getPosition()+ " bytes, should read "+ keyLength);  }  return key;}  }
class C{  public boolean isEmpty(){  return values.isEmpty();}  }
class C{  protected BufferedImage composeFilledImage(BufferedImage srcImg,SymbolCode symbolCode){  String fillPath=this.composeFillPath(symbolCode);  BufferedImage fill=this.readImage(fillPath);  if (fill == null) {    String msg=Logging.getMessage("Symbology.SymbolIconNotFound",symbolCode);    Logging.logger().severe(msg);    throw new MissingResourceException(msg,BufferedImage.class.getName(),fillPath);  }  int width=srcImg.getWidth();  int height=srcImg.getHeight();  BufferedImage filledImg=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB_PRE);  this.drawImage(fill,filledImg);  this.drawImage(srcImg,filledImg);  return filledImg;}  }
class C{  public boolean isEmpty(){  return builder.toString().length() == 0;}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  Rectangle alloc=(Rectangle)a;  int x=(int)fx;  int y=(int)fy;  if (y < alloc.y) {    return getStartOffset();  } else   if (y > alloc.y + alloc.height) {    return getEndOffset() - 1;  } else {    alloc.height=metrics.getHeight();    int line=(alloc.height > 0 ? (y - alloc.y) / alloc.height : lineCount - 1);    if (line >= lineCount) {      return getEndOffset() - 1;    } else {      int p0=getStartOffset();      int p1;      if (lineCount == 1) {        p1=getEndOffset();      } else {        int[] lineEnds=getLineEnds();        p1=p0 + lineEnds[line];        if (line > 0) {          p0+=lineEnds[line - 1];        }      }      if (x < alloc.x) {        return p0;      } else       if (x > alloc.x + alloc.width) {        return p1 - 1;      } else {        Segment segment=SegmentCache.getSharedSegment();        loadText(segment,p0,p1);        int n=Utilities.getTabbedTextOffset(segment,metrics,alloc.x,x,WrappedPlainView.this,p0);        SegmentCache.releaseSharedSegment(segment);        return Math.min(p0 + n,p1 - 1);      }    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void putCharLE(byte[] arr,long off,char val){  if (UNALIGNED)   UNSAFE.putChar(arr,off,Character.reverseBytes(val)); else   putCharByByte(arr,off,val,false);}  }
class C{  public Protos.Wallet walletToProto(Wallet wallet){  Protos.Wallet.Builder walletBuilder=Protos.Wallet.newBuilder();  walletBuilder.setNetworkIdentifier(wallet.getNetworkParameters().getId());  if (wallet.getDescription() != null) {    walletBuilder.setDescription(wallet.getDescription());  }  for (  WalletTransaction wtx : wallet.getWalletTransactions()) {    Protos.Transaction txProto=makeTxProto(wtx);    walletBuilder.addTransaction(txProto);  }  for (  ECKey key : wallet.getKeys()) {    Protos.Key.Builder keyBuilder=Protos.Key.newBuilder().setCreationTimestamp(key.getCreationTimeSeconds() * 1000).setType(Protos.Key.Type.ORIGINAL);    if (key.getPrivKeyBytes() != null)     keyBuilder.setPrivateKey(ByteString.copyFrom(key.getPrivKeyBytes()));    EncryptedPrivateKey encryptedPrivateKey=key.getEncryptedPrivateKey();    if (encryptedPrivateKey != null) {      Protos.EncryptedPrivateKey.Builder encryptedKeyBuilder=Protos.EncryptedPrivateKey.newBuilder().setEncryptedPrivateKey(ByteString.copyFrom(encryptedPrivateKey.getEncryptedBytes())).setInitialisationVector(ByteString.copyFrom(encryptedPrivateKey.getInitialisationVector()));      if (key.getKeyCrypter() == null) {        throw new IllegalStateException("The encrypted key " + key.toString() + " has no KeyCrypter.");      } else {        if (key.getKeyCrypter().getUnderstoodEncryptionType() == Protos.Wallet.EncryptionType.ENCRYPTED_SCRYPT_AES) {          keyBuilder.setType(Protos.Key.Type.ENCRYPTED_SCRYPT_AES);        } else {          throw new IllegalArgumentException("The key " + key.toString() + " is encrypted with a KeyCrypter of type "+ key.getKeyCrypter().getUnderstoodEncryptionType()+ ". This WalletProtobufSerialiser does not understand that type of encryption.");        }      }      keyBuilder.setEncryptedPrivateKey(encryptedKeyBuilder);    }    keyBuilder.setPublicKey(ByteString.copyFrom(key.getPubKey()));    walletBuilder.addKey(keyBuilder);  }  for (  Script script : wallet.getWatchedScripts()) {    Protos.Script protoScript=Protos.Script.newBuilder().setProgram(ByteString.copyFrom(script.getProgram())).setCreationTimestamp(script.getCreationTimeSeconds() * 1000).build();    walletBuilder.addWatchedScript(protoScript);  }  Sha256Hash lastSeenBlockHash=wallet.getLastBlockSeenHash();  if (lastSeenBlockHash != null) {    walletBuilder.setLastSeenBlockHash(hashToByteString(lastSeenBlockHash));    walletBuilder.setLastSeenBlockHeight(wallet.getLastBlockSeenHeight());  }  if (wallet.getLastBlockSeenTimeSecs() > 0)   walletBuilder.setLastSeenBlockTimeSecs(wallet.getLastBlockSeenTimeSecs());  KeyCrypter keyCrypter=wallet.getKeyCrypter();  if (keyCrypter == null) {    walletBuilder.setEncryptionType(EncryptionType.UNENCRYPTED);  } else {    walletBuilder.setEncryptionType(keyCrypter.getUnderstoodEncryptionType());    if (keyCrypter instanceof KeyCrypterScrypt) {      KeyCrypterScrypt keyCrypterScrypt=(KeyCrypterScrypt)keyCrypter;      walletBuilder.setEncryptionParameters(keyCrypterScrypt.getScryptParameters());    } else {      throw new RuntimeException("The wallet has encryption of type '" + keyCrypter.getUnderstoodEncryptionType() + "' but this WalletProtobufSerializer does not know how to persist this.");    }  }  if (wallet.getKeyRotationTime() != null) {    long timeSecs=wallet.getKeyRotationTime().getTime() / 1000;    walletBuilder.setKeyRotationTime(timeSecs);  }  populateExtensions(wallet,walletBuilder);  if (wallet.getVersion() != null) {    walletBuilder.setVersion(wallet.getVersion().getWalletVersionAsInt());  }  return walletBuilder.build();}  }
class C{  public NamedList<?> execute() throws IOException {  statsCollector.startRequest();  NamedList<Object> res=new NamedList<>();  List<AnalyticsRequest> requests;  requests=AnalyticsRequestFactory.parse(searcher.getSchema(),params);  if (requests == null || requests.size() == 0) {    return res;  }  statsCollector.addRequests(requests.size());  Filter filter=docs.getTopFilter();  for (  AnalyticsRequest areq : requests) {    ValueAccumulator accumulator;    int facets=areq.getFieldFacets().size() + areq.getRangeFacets().size() + areq.getQueryFacets().size();    try {      if (facets == 0) {        accumulator=BasicAccumulator.create(searcher,docs,areq);      } else {        accumulator=FacetingAccumulator.create(searcher,docs,areq,req);      }    } catch (    IOException e) {      log.warn("Analytics request '" + areq.getName() + "' failed",e);      continue;    }    statsCollector.addStatsCollected(((BasicAccumulator)accumulator).getNumStatsCollectors());    statsCollector.addStatsRequests(areq.getExpressions().size());    statsCollector.addFieldFacets(areq.getFieldFacets().size());    statsCollector.addRangeFacets(areq.getRangeFacets().size());    statsCollector.addQueryFacets(areq.getQueryFacets().size());    statsCollector.addQueries(((BasicAccumulator)accumulator).getNumQueries());    List<LeafReaderContext> contexts=searcher.getTopReaderContext().leaves();    for (int leafNum=0; leafNum < contexts.size(); leafNum++) {      LeafReaderContext context=contexts.get(leafNum);      DocIdSet dis=filter.getDocIdSet(context,null);      DocIdSetIterator disi=null;      if (dis != null) {        disi=dis.iterator();      }      if (disi != null) {        accumulator.getLeafCollector(context);        int doc=disi.nextDoc();        while (doc != DocIdSetIterator.NO_MORE_DOCS) {          accumulator.collect(doc);          doc=disi.nextDoc();        }      }    }    accumulator.postProcess();    accumulator.compute();    res.add(areq.getName(),accumulator.export());  }  statsCollector.endRequest();  return res;}  }
class C{  protected boolean handle(){  if (interp == null) {    log.error("No interpreter, so cannot handle automat");    return false;  }  try {    exec.invoke(interp,new Object[]{"retval = handle()"});    java.lang.reflect.Method get=interp.getClass().getMethod("get",new Class[]{String.class});    Object retval=get.invoke(interp,new Object[]{"retval"});    System.out.println("retval = " + retval);    if (retval.toString().equals("1")) {      return true;    }    return false;  } catch (  NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {    log.error("Exception during handle routine",e);    return false;  }}  }
class C{  @Override public void cancel(final UUID queryId){  Objects.requireNonNull(queryId);  QueryCancellationHelper.cancelQuery(queryId,this.getQueryEngine());  final RunningQuery q=getQuery(queryId);  if (q != null) {    q.setCancelled(true);  }}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  @Override public void onAdChanged(){  notifyDataSetChanged();}  }
class C{  @Override protected void basicPerformTimeout(boolean isPending) throws CacheException {  if (!isExpirationAllowed()) {    return;  }  if (!isExpirationPossible()) {    reschedule();    return;  }  ExpirationAction action;  long ttl=getTTLAttributes().getTimeout();  long idle=getIdleAttributes().getTimeout();  if (ttl == 0) {    action=getIdleAttributes().getAction();  } else   if (idle != 0 && idle < ttl) {    action=getIdleAttributes().getAction();  } else {    action=getTTLAttributes().getAction();  }  if (getLocalRegion().getScope().isGlobal() && (action.isDestroy() || action.isInvalidate())) {    Lock lock=getLocalRegion().getDistributedLock(getCheckedRegionEntry().getKey());    lock.lock();    try {      long expTime=getExpirationTime();      if (expTime == 0L) {        return;      }      if (getNow() >= expTime) {        if (logger.isTraceEnabled()) {          logger.trace("{}.performTimeout().getExpirationTime() is {}; {}.expire({}). ttlExpiration: {}, idleExpiration: {}, ttlAttrs: {}, idleAttrs: {} action is: {}",this,expTime,this,action,ttl,idle,getTTLAttributes(),getIdleAttributes());        }        expire(action,isPending);        return;      }    }  finally {      lock.unlock();    }  } else {    if (logger.isTraceEnabled()) {      logger.trace("{}..performTimeout().getExpirationTime() is {}",this,getExpirationTime());    }    expire(isPending);    return;  }  reschedule();}  }
class C{  public DateTime withMonthOfYear(int monthOfYear){  return withMillis(getChronology().monthOfYear().set(getMillis(),monthOfYear));}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.INT_LITERAL;}  }
class C{  public static java.sql.Timestamp nowTimestamp(){  return getTimestamp(System.currentTimeMillis());}  }
class C{  public static int testc(int b){  char x=(char)b;  int y=x & 0xffff;  if (y == 0xffff) {    y=(int)(System.currentTimeMillis() >> 32);  }  return y;}  }
class C{  public static void callSecuredAPI(Context context,String endpoint,HTTP_METHODS methodType,String requestParams,APIResultCallBack apiResultCallBack,int requestCode){  EndPointInfo apiUtilities=new EndPointInfo();  ServerConfig utils=new ServerConfig();  apiUtilities.setEndPoint(endpoint);  apiUtilities.setHttpMethod(methodType);  if (requestParams != null) {    apiUtilities.setRequestParams(requestParams);  }  if (endpoint.contains(Constants.NOTIFICATION_ENDPOINT)) {    apiUtilities.setIsJSONArrayRequest(true);  }  APIController apiController;  if (org.wso2.emm.agent.proxy.utils.Constants.Authenticator.AUTHENTICATOR_IN_USE.equals(org.wso2.emm.agent.proxy.utils.Constants.Authenticator.MUTUAL_SSL_AUTHENTICATOR)) {    apiController=new APIController();    apiController.securedNetworkCall(apiResultCallBack,requestCode,apiUtilities,context);  } else {    String clientKey=Preference.getString(context,Constants.CLIENT_ID);    String clientSecret=Preference.getString(context,Constants.CLIENT_SECRET);    if (utils.getHostFromPreferences(context) != null && !utils.getHostFromPreferences(context).isEmpty() && clientKey != null && !clientKey.isEmpty() && !clientSecret.isEmpty()) {      apiController=new APIController(clientKey,clientSecret);      apiController.invokeAPI(apiUtilities,apiResultCallBack,requestCode,context.getApplicationContext());    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private String downloadIgnite(URL url){  assert url != null;  try {    HttpURLConnection conn=(HttpURLConnection)url.openConnection();    int code=conn.getResponseCode();    if (code == 200) {      checkDownloadFolder();      String fileName=fileName(url.toString());      if (fileExist(fileName))       return fileName;      FileOutputStream outFile=new FileOutputStream(downloadFolder + fileName);      outFile.getChannel().transferFrom(Channels.newChannel(conn.getInputStream()),0,Long.MAX_VALUE);      outFile.close();      return fileName;    } else     throw new RuntimeException("Got unexpected response code. Response code: " + code);  } catch (  IOException e) {    throw new RuntimeException("Failed to download Ignite.",e);  }}  }
class C{  public void process(){  block.forEachInsn(this);  updateSuccessorPhis();  ArrayList<SsaInsn> insns=block.getInsns();  int szInsns=insns.size();  for (int i=szInsns - 1; i >= 0; i--) {    SsaInsn insn=insns.get(i);    SsaInsn replaceInsn;    replaceInsn=insnsToReplace.get(insn);    if (replaceInsn != null) {      insns.set(i,replaceInsn);    } else     if (insn.isNormalMoveInsn() && !movesToKeep.contains(insn)) {      insns.remove(i);    }  }  boolean first=true;  for (  SsaBasicBlock child : block.getDomChildren()) {    if (child != block) {      RegisterSpec[] childStart=first ? currentMapping : dupArray(currentMapping);      startsForBlocks[child.getIndex()]=childStart;      first=false;    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Vector<Object> toXmlRpcSystemUnderTestsParameters(Collection<SystemUnderTest> suts){  Vector<Object> sutsParams=new Vector<Object>();  for (  SystemUnderTest sut : suts) {    sutsParams.add(sut.marshallize());  }  return sutsParams;}  }
class C{  public void prepareTimelineSettings(TimelineSettingsHandler timelineSettingsHandler){  timelineSettingsHandler.configureTimelineSettings(getSettingsTag(),new TimelineSettingsHandler.TimelineSetting[]{TimelineSettingsHandler.TimelineSetting.INCLUDE_IMAGES},getDefaultSettings(),this);}  }
class C{  @NoWarning("BIT") void boolFalse(String[] args){  final boolean[] values={false};  values[0]|=(args.length > 0);}  }
class C{  @Override public String toString(){  final StringBuilder msg=new StringBuilder();  for (Enumeration<SnmpOid> e=oids.elements(); e.hasMoreElements(); ) {    SnmpOid val=e.nextElement();    msg.append("//").append(val.toString());  }  return msg.toString();}  }
class C{  static void dmoellen(){  Object foo=null;  try {    foo=new Object();  }  finally {    System.out.println(foo);  }}  }
class C{  public String nextLine(){  if (!this.hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=this.cachedLine;  this.cachedLine=null;  return currentLine;}  }
class C{  protected void pruneEffects(){  for (  Effect e : new HashSet<Effect>(effects.keySet())) {    Parameter p=effects.get(e);    if (p instanceof FixedParameter && ((FixedParameter)p).getValue() < StatePruner.VALUE_PRUNING_THRESHOLD) {      effects.remove(e);    }  }}  }
class C{  public static double pdf(double val,double dof){  if (val <= 0 || val == Double.POSITIVE_INFINITY) {    return 0.0;  }  final double k=dof * .5;  return Math.exp((dof - 1.0) * Math.log(val) + (1 - k) * MathUtil.LOG2 - GammaDistribution.logGamma(k) - val * val / 2.);}  }
class C{  protected boolean isRecompilable(Class cls){  if (cls == null)   return true;  if (cls.getClassLoader() == this)   return false;  if (recompile == null && !config.getRecompileGroovySource())   return false;  if (recompile != null && !recompile)   return false;  if (!GroovyObject.class.isAssignableFrom(cls))   return false;  long timestamp=getTimeStamp(cls);  if (timestamp == Long.MAX_VALUE)   return false;  return true;}  }
class C{  @Override synchronized public double nextGaussian(){  if (haveNextNextGaussian) {    haveNextNextGaussian=false;    return nextNextGaussian;  } else {    double v1, v2, s;    do {      v1=2 * nextDouble() - 1;      v2=2 * nextDouble() - 1;      s=v1 * v1 + v2 * v2;    } while (s >= 1 || s == 0);    final double multiplier=Math.sqrt(-2 * Math.log(s) / s);    nextNextGaussian=v2 * multiplier;    haveNextNextGaussian=true;    return v1 * multiplier;  }}  }
class C{  private void replacePlaceholders(){  Properties result=new Properties();  for (  Object keyValue : testProperties.keySet()) {    String key=(String)keyValue;    String value=testProperties.getProperty(key);    Pattern pattern=Pattern.compile("[$]\\{[\\w.]+\\}");    Matcher matcher=pattern.matcher(value);    if (matcher.find()) {      String match=matcher.toMatchResult().group();      match=match.substring(2);      match=match.substring(0,match.length() - 1);      if (match.startsWith("env.")) {        String envValue=System.getenv(match.substring(4));        if (envValue != null) {          value=matcher.replaceAll(envValue);        }      }    }    result.setProperty(key,value);  }  testProperties=result;}  }
class C{  public static IMouseStateChange exitNode(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo,final IMouseState state){  if (hitInfo.hasHitNodeLabels()) {    throw new IllegalStateException();  } else   if (hitInfo.hasHitEdges()) {    return CHitEdgesTransformer.enterEdge(m_factory,event,hitInfo);  } else   if (hitInfo.hasHitEdgeLabels()) {    return CHitEdgeLabelsTransformer.enterEdgeLabel(m_factory,event,hitInfo);  } else   if (hitInfo.hasHitBends()) {    return CHitBendsTransformer.enterBend(m_factory,event,hitInfo);  } else   if (hitInfo.hasHitPorts()) {    return new CStateChange(state,true);  } else {    return new CStateChange(m_factory.createDefaultState(),false);  }}  }
class C{  public Slack sendToUser(String sendToUser){  this.channel="@" + sendToUser;  return this;}  }
class C{  public static void demo3(int size,double value){  cern.colt.Timer timer=new cern.colt.Timer();  String s;  StringBuffer buf;  DoubleMatrix2D matrix=cern.colt.matrix.DoubleFactory2D.dense.make(size,size,value);  timer.reset().start();  buf=new StringBuffer();  for (int i=size; --i >= 0; ) {    for (int j=size; --j >= 0; ) {      buf.append(matrix.getQuick(i,j));    }  }  buf=null;  timer.stop().display();  timer.reset().start();  cern.colt.matrix.impl.Former format=new cern.colt.matrix.impl.FormerFactory().create("%G");  buf=new StringBuffer();  for (int i=size; --i >= 0; ) {    for (int j=size; --j >= 0; ) {      buf.append(format.form(matrix.getQuick(i,j)));    }  }  buf=null;  timer.stop().display();  timer.reset().start();  s=new Formatter(null).toString(matrix);  s=null;  timer.stop().display();  timer.reset().start();  s=new Formatter("%G").toString(matrix);  s=null;  timer.stop().display();}  }
class C{  public FindReplaceDocumentAdapter(Document document){  Assert.isNotNull(document);  fDocument=document;}  }
class C{  public RoundedColorDrawable(float radius,int color){  this(color);  setRadius(radius);}  }
class C{  @Override public <T>T metaInfo(Class<T> infoType){  return metaInfo.get(infoType);}  }
class C{  public double doubleValue(){  if (val instanceof Long || val instanceof Integer) {    return (double)(val.longValue());  }  return val.doubleValue();}  }
class C{  public static String randomASCII(final int size){  final byte[] array=new byte[size];  random.nextBytes(array);  return new String(array,StandardCharsets.US_ASCII);}  }
class C{  public static void mobileRegister(Context context,String productKey,String vendorKey,String mobile,String password,String verification,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  if (!TextUtils.isEmpty(productKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.PRODUCT_KEY,productKey));  }  if (!TextUtils.isEmpty(vendorKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.VENDOR_KEY,vendorKey));  }  try {    String jsonParams=new JSONStringer().object().key(ApiKey.MOBILE).value(mobile).key(ApiKey.PASSWORD).value(password).key(ApiKey.VERTIFICATION).value(verification).endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    post(context,getApiServerUrl() + USER_REGISTER,headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  private void switchUser(int userId){  mBlacklist.switchUser(userId);  mLocationHandler.removeMessages(MSG_LOCATION_CHANGED);synchronized (mLock) {    mLastLocation.clear();    mLastLocationCoarseInterval.clear();    for (    LocationProviderInterface p : mProviders) {      updateProviderListenersLocked(p.getName(),false,mCurrentUserId);    }    mCurrentUserId=userId;    updateProvidersLocked();  }}  }
class C{  public void store(Element root){  Element values=new Element(Xml.SCHEDULES);  List<TrainSchedule> schedules=getSchedulesByIdList();  for (  TrainSchedule schedule : schedules) {    values.addContent(schedule.store());  }  root.addContent(values);}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:53.482 -0500",hash_original_method="0171304E9D51F893DC3CA5BAB2B76EB8",hash_generated_method="A4B4E5A7CB28AAF70EFE75349DF9314D") protected final static int ui(byte b){  int i=b & 0xFF;  return i;}  }
class C{  public static <TK,FV>ConcreteRule<TK,FV> makeSyntheticUnigramRule(Sequence<TK> source,Sequence<TK> target,CoverageSet sourceCoverage,String[] phraseScoreNames,Scorer<FV> scorer,FeatureExtractor<TK,FV> featurizer,double cnt_f_e,int cnt_e,int cnt_f,InputProperties inputProperties,Sequence<TK> sourceSequence,int sourceInputId){  if (source.size() != 1 || target.size() != 1)   throw new IllegalArgumentException(String.format("Non-unigram arguments %d %d",source.size(),target.size()));  return makeSyntheticRule(source,target,sourceCoverage,phraseScoreNames,scorer,featurizer,cnt_f_e,cnt_e,cnt_f,inputProperties,sourceSequence,sourceInputId,UNIGRAM_ALIGNMENT);}  }
class C{  public static void main(String[] args){  LoggingConfiguration.setLevelFor(RectangleArranger.class.getName(),Level.FINEST.getName());  RectangleArranger<String> r=new RectangleArranger<>(1.3);  r.put(4.,1.,"Histogram");  r.put(4.,4.,"3D view");  r.put(1.,1.,"Meta 1");  r.put(1.,1.,"Meta 2");  r.put(1.,1.,"Meta 3");  r.put(2.,2.,"Meta 4");  r.put(2.,2.,"Meta 5");  r=new RectangleArranger<>(3.,3.);  r.put(1.,2.,"A");  r.put(2.,1.,"B");  r.put(1.,2.,"C");  r.put(2.,1.,"D");  r.put(2.,2.,"E");  r=new RectangleArranger<>(4 - 2.6521739130434785);  r.put(4.,.5,"A");  r.put(4.,3.,"B");  r.put(4.,1.,"C");  r.put(1.,.1,"D");}  }
class C{  public void testLoadClassOnExpandedWarWithContextXmlFile() throws Exception {  File artifactDir=new File(getTestData().targetDir).getParentFile();  Expand expandTask=(Expand)new AntUtils().createProject().createTask("unwar");  expandTask.setDest(new File(artifactDir,"tomcat-context"));  expandTask.setSrc(new File(getTestData().getTestDataFileFor("tomcatcontext-war")));  expandTask.execute();  String simpleJar=System.getProperty("cargo.testdata.simple-jar");  if (simpleJar == null) {    throw new CargoException("Please set property [cargo.testdata.simple-jar] to a valid " + "location of simple-jar");  }  WAR war=(WAR)new DefaultDeployableFactory().createDeployable(getContainer().getId(),new File(artifactDir,"tomcat-context").getPath(),DeployableType.WAR);  war.setExtraClasspath(new String[]{simpleJar});  getLocalContainer().getConfiguration().addDeployable(war);  getLocalContainer().getConfiguration().setProperty(TomcatPropertySet.COPY_WARS,"false");  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/tomcat-context/");  getLocalContainer().start();  PingUtils.assertPingTrue("tomcat context war not started","Test value is [test value]",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse("tomcat context war not stopped",warPingURL,getLogger());}  }
class C{  private ConstantPoolEntry parseConstantPoolEntry(int index) throws IOException {  int tag=read();switch (tag) {case CP_CLASS:    return parseClassConstant(index);case CP_FIELD_REF:  return parseFieldRefConstant(index);case CP_METHOD_REF:return parseMethodRefConstant(index);case CP_INTERFACE_METHOD_REF:return parseInterfaceMethodRefConstant(index);case CP_STRING:return parseStringConstant(index);case CP_INTEGER:return parseIntegerConstant(index);case CP_FLOAT:return parseFloatConstant(index);case CP_LONG:return parseLongConstant(index);case CP_DOUBLE:return parseDoubleConstant(index);case CP_NAME_AND_TYPE:return parseNameAndTypeConstant(index);case CP_UTF8:return parseUtf8Constant(index);default :throw error(L.l("'{0}' is an unknown constant pool type.",tag));}}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTE_LINE_NODE_TABLE\"";  db.execSQL(sql);}  }
class C{  public boolean isCanceled(){  return this.canceled;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void addSelectedRelation(final Relation selectedRelation){  if (selectedRelations == null) {    setSelectedRelation(selectedRelation);  } else {    if (!selectedRelations.contains(selectedRelation)) {      selectedRelations.add(selectedRelation);    }  }}  }
class C{  public void message(XNetReply m){  notify(m);}  }
class C{  public void onCreate(@Nullable Bundle savedInstanceState){  showsBottomSheet=AccessFragmentInternals.getContainerId(fragment) == 0;  if (savedInstanceState != null) {    showsBottomSheet=savedInstanceState.getBoolean(SAVED_SHOWS_BOTTOM_SHEET,showsBottomSheet);    backStackId=savedInstanceState.getInt(SAVED_BACK_STACK_ID,-1);    bottomSheetLayoutId=savedInstanceState.getInt(SAVED_BOTTOM_SHEET_LAYOUT_ID,View.NO_ID);  }}  }
class C{  public static FavoritesFragment newInstance(){  final FavoritesFragment fragment=new FavoritesFragment();  final Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public void notifyObserver(Notification notification){  getNotifyMethod().onNotification(notification);}  }
class C{  public static final short unsignedByte(byte val){  return ((short)(val & 0xFF));}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public static <E>Collection<E> constrainedCollection(Collection<E> collection,Constraint<? super E> constraint){  return new ConstrainedCollection<E>(collection,constraint);}  }
class C{  protected void diffusion(int b,float[] c,float[] c0,float diffusion){  float a=timeStep * diffusion * width* height;  linearSolver(b,c,c0,a,1 + 4 * a);}  }
class C{  public BasicShapeAttributes(ShapeAttributes attributes){  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.drawInterior=attributes.isDrawInterior();  this.drawOutline=attributes.isDrawOutline();  this.enableAntialiasing=attributes.isEnableAntialiasing();  this.enableLighting=attributes.isEnableLighting();  this.interiorMaterial=attributes.getInteriorMaterial();  this.outlineMaterial=attributes.getOutlineMaterial();  this.interiorOpacity=attributes.getInteriorOpacity();  this.outlineOpacity=attributes.getOutlineOpacity();  this.outlineWidth=attributes.getOutlineWidth();  this.outlineStippleFactor=attributes.getOutlineStippleFactor();  this.outlineStipplePattern=attributes.getOutlineStipplePattern();  this.imageSource=attributes.getImageSource();  this.imageScale=attributes.getImageScale();}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple,Object messageId){  return delegate.emit(streamId,tuple,messageId);}  }
class C{  public static String capitalize(String v){  if (v != null && v.length() > 0) {    char[] a=v.toCharArray();    a[0]=Character.toUpperCase(a[0]);    return String.valueOf(a);  }  return v;}  }
class C{  public boolean isAutomaticOutdoorModeEnabled(){  try {    return checkService() && sService.isAutomaticOutdoorModeEnabled();  } catch (  RemoteException e) {    return false;  }}  }
class C{  private String nullToBlank(String s){  if (s == null)   return "";  return s;}  }
class C{  public List<NamedList<Object>> convertToListOfNamedLists(){  List<NamedList<Object>> convertedPivotList=null;  if (valueCollection.size() > 0) {    convertedPivotList=new LinkedList<>();    for (    PivotFacetValue pivot : valueCollection)     convertedPivotList.add(pivot.convertToNamedList());  }  return convertedPivotList;}  }
class C{  public static long unixTimestamp(UUID uuid){  if (uuid.version() != 1) {    throw new IllegalArgumentException(String.format("Can only retrieve the unix timestamp for version 1 uuid (provided version %d)",uuid.version()));  } else {    return uuid.timestamp() / 10000L + START_EPOCH;  }}  }
class C{  public static void deleteRecursively(File file){  if (file.isDirectory()) {    for (    File f : file.listFiles())     deleteRecursively(f);  }  file.delete();}  }
class C{  public UniverseManager(BranchGroup worldGroup){  locale=new Locale(this);  view_group=new BranchGroup();  view_group.setCapability(Group.ALLOW_CHILDREN_EXTEND);  if (worldGroup == null) {    world_object_group=new BranchGroup();    world_object_group.setCapability(Group.ALLOW_CHILDREN_EXTEND);  } else {    world_object_group=worldGroup;  }}  }
class C{  public E valueAt(int index){  return (E)mArray[index];}  }
class C{  public LazyObjectMap(final LazyObjectMap<? extends Key,? extends Value> map){  super(map);  this.provider=map.provider;}  }
class C{  @Override public boolean isReadOnly() throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("isReadOnly");    }    checkClosed();    return readOnly;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void finishResponse(){  try {    if (writer != null) {      writer.close();    } else {      if (stream != null)       stream.close();    }  } catch (  IOException e) {  }}  }
class C{  public AmqpConnection connect() throws Exception {  AmqpConnection connection=createConnection();  LOG.debug("Attempting to create new connection to peer: {}",remoteURI);  connection.connect();  return connection;}  }
class C{  public void addRequest(ActionRequest request){  addRequest(request,null);}  }
class C{  public void removeToolButton(@NotNull IsWidget button){  if (button != null) {    toolbarHeader.remove(button);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public IconicsDrawable alpha(int alpha){  setAlpha(alpha);  return this;}  }
class C{  public void remove(Id person){  alightingAtFacility.add(person);  if (sittingPersons.remove(person)) {    if (standingPersons.size() > 0) {      Id sitter=rule.giveSeatOnLeave(person,vehicle,sittingPersons.size(),Collections.unmodifiableList(standingPersons));      if (sitter != null) {        standingPersons.remove(sitter);        sittingPersons.add(sitter);      }    }  } else {    standingPersons.remove(person);  }}  }
class C{  public static byte[] numberToCalledPartyBCD(String number){  return numberToCalledPartyBCDHelper(number,false);}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  RenderableLayer placemarksLayer=new RenderableLayer("Placemarks");  wwd.getLayers().addLayer(placemarksLayer);  Placemark ventura=Placemark.createWithColorAndSize(Position.fromDegrees(34.281,-119.293,0),new Color(0,1,1,1),20);  Placemark airplane=new Placemark(Position.fromDegrees(34.260,-119.2,5000),PlacemarkAttributes.createWithImageAndLeader(ImageSource.fromResource(R.drawable.aircraft_fixwing)).setImageScale(1.5));  Placemark airport=new Placemark(Position.fromDegrees(34.200,-119.208,0),PlacemarkAttributes.createWithImage(ImageSource.fromResource(R.drawable.airport_terminal)).setImageOffset(Offset.bottomCenter()).setImageScale(2),"Oxnard Airport");  Bitmap bitmap=BitmapFactory.decodeResource(getWorldWindow().getResources(),R.drawable.ehipcc);  Placemark wildfire=new Placemark(Position.fromDegrees(34.300,-119.25,0),PlacemarkAttributes.createWithImage(ImageSource.fromBitmap(bitmap)).setImageOffset(Offset.bottomCenter()));  placemarksLayer.addRenderable(ventura);  placemarksLayer.addRenderable(airport);  placemarksLayer.addRenderable(airplane);  placemarksLayer.addRenderable(wildfire);  Position pos=airport.getPosition();  LookAt lookAt=new LookAt().set(pos.latitude,pos.longitude,pos.altitude,WorldWind.ABSOLUTE,1e5,0,80,0);  wwd.getNavigator().setAsLookAt(wwd.getGlobe(),lookAt);  return wwd;}  }
class C{  private void trigger(int position,float positionOffset){  this.mCurItemPosition=position;  this.mCurItemPositionOffset=positionOffset;  requestLayout();  invalidate();}  }
class C{  private static boolean checkDeleteOrderListSpan(Editable editable,int start,int before,int after){  if (before == 0) {    return false;  }  MDOrderListSpan mdOrderListSpan=getOrderListSpan(editable,start,true);  if (mdOrderListSpan == null) {    return false;  }  int position=EditUtils.findBeforeNewLineChar(editable,start) + 1;  int totalPosition=position + mdOrderListSpan.getNested() + mdOrderListSpan.getNumber() / 10 + 1;  if (totalPosition >= start && start <= position) {    return true;  }  return false;}  }
class C{  public static byte[] buildAacAudioSpecificConfig(int audioObjectType,int sampleRateIndex,int channelConfig){  byte[] audioSpecificConfig=new byte[2];  audioSpecificConfig[0]=(byte)((audioObjectType << 3) & 0xF8 | (sampleRateIndex >> 1) & 0x07);  audioSpecificConfig[1]=(byte)((sampleRateIndex << 7) & 0x80 | (channelConfig << 3) & 0x78);  return audioSpecificConfig;}  }
class C{  public boolean isMaxLengthExceeded(){  return (mInUseLength + getFreeListSize() > mMaxLength);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return VALUES;case 3:return ERROR;default :return null;}}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  @EnsuresNonNullIf(result=false,expression="#1") static boolean legalConstant(final @Nullable Object constant_value){  if ((constant_value == null) || ((constant_value instanceof Long) || (constant_value instanceof Double)))   return true;  return false;}  }
class C{  public ConstraintEnforcementException(String msg,Coordinate pt){  super(msgWithCoord(msg,pt));  this.pt=new Coordinate(pt);}  }
class C{  public AtCommand(String command,int[] value,int frameId){  this.command=command;  this.value=value;  this.setFrameId(frameId);}  }
class C{  public boolean publishRecord(R record){  if (isOpen && queue.offerRecord(record,false)) {    return true;  } else {    return false;  }}  }
class C{  private void resetUI(){  mSeekBar.setEnabled(false);  mSeekBar.setMax(100);  mSeekBar.setProgress(0);  mSeekBar.setSecondaryProgress(0);  mEpisodeTitle.setText("");  mChannelTitle.setText("");  mTimeElapsed.setText(R.string.empty_time);  mTimeLeft.setText(R.string.empty_time);  mBackground.setImageDrawable(null);  mChannelArt.setImageResource(R.drawable.default_channel_art);  themeUI(getResources().getColor(R.color.primary),getResources().getColor(R.color.primary));}  }
class C{  public static void generateJDKCluster(String... filters){  int counter=0;  Collection<String> list=getAllResources();  InheritanceTree inheritanceTree=new InheritanceTree();  List<InheritanceTree> others=new ArrayList<>();  for (  String filterFile : filters) {    logger.info("Trying to load {}",filterFile);    try {      InheritanceTree tree=readUncompressedInheritanceTree(filterFile);      others.add(tree);    } catch (    IOException e) {      logger.info("Error: " + e);    }  }  EXCEPTION:   for (  String name : list) {    for (    String exception : classExceptions) {      if (name.startsWith(exception.replace('/','.'))) {        logger.info("Skipping excluded class " + name);        continue EXCEPTION;      }    }    for (    InheritanceTree other : others) {      if (!other.hasClass(ResourceList.getClassNameFromResourcePath(name))) {        logger.info("Skipping {} because it is not in other inheritance tree",name);        continue EXCEPTION;      } else {        logger.info("Not skipping {} because it is in other inheritance tree",name);      }    }    if (name.matches(".*\\$\\d+$")) {      logger.info("Skipping anonymous class");      continue;    }    InputStream stream=ResourceList.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getClassAsStream(name);    if (stream == null) {      logger.warn("Cannot open/find " + name);    } else {      analyzeClassStream(inheritanceTree,stream,true);      counter++;    }  }  logger.info("Finished checking classes, writing data for " + counter + " classes");  try {    FileOutputStream stream=new FileOutputStream(new File(resourceFolder + jdkFile));    XStream xstream=new XStream();    xstream.toXML(inheritanceTree,stream);  } catch (  FileNotFoundException e) {    logger.error("",e);  }}  }
class C{  public String rename(final byte[] oldkey,final byte[] newkey){  checkIsInMulti();  client.rename(oldkey,newkey);  return client.getStatusCodeReply();}  }
class C{  public static File showOpenFile(String[] extensions,File initialDir,Shell parent){  JFileDataStoreChooser dialog=new JFileDataStoreChooser(parent,SWT.OPEN,extensions);  FileDialog fileDialogInternal=dialog.getFileDialog();  if (initialDir != null) {    if (initialDir.isDirectory()) {      fileDialogInternal.setFilterPath(initialDir.getAbsolutePath());    } else {      fileDialogInternal.setFilterPath(initialDir.getParentFile().getAbsolutePath());    }  }  String filePath=fileDialogInternal.open();  if (filePath != null) {    File file=new File(filePath);    return file;  }  return null;}  }
class C{  public static void main(String[] args){  SplitPaneDemo demo=new SplitPaneDemo(null);  demo.mainImpl();}  }
class C{  public static SpreadMap toSpreadMap(Object[] self){  if (self == null)   throw new GroovyRuntimeException("Fail to convert Object[] to SpreadMap, because it is null."); else   if (self.length % 2 != 0)   throw new GroovyRuntimeException("Fail to convert Object[] to SpreadMap, because it's size is not even."); else   return new SpreadMap(self);}  }
class C{  public static int colorWithAlpha(int color,float percent){  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  int alpha=Math.round(percent * 255);  return Color.argb(alpha,r,g,b);}  }
class C{  public ExceptionWithContext(Throwable cause,String message,Object... formatArgs){  super((message != null) ? formatMessage(message,formatArgs) : (cause != null) ? cause.getMessage() : null,cause);  if (cause instanceof ExceptionWithContext) {    String ctx=((ExceptionWithContext)cause).context.toString();    context=new StringBuffer(ctx.length() + 200);    context.append(ctx);  } else {    context=new StringBuffer(200);  }}  }
class C{  public Block removeBlockTemplate(String prototypeName){  return mBlockTemplates.remove(prototypeName);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void loadProducts(String searchString,int M_Product_Category_ID,boolean allRecords){  log.finer("loadProducts - M_PriceList_Version_ID=" + m_PriceList_Version_ID + ", Search="+ searchString+ ", M_Product_Category_ID="+ M_Product_Category_ID);  m_searchInfo="";  if (searchString != null)   m_searchInfo=searchString;  if (M_Product_Category_ID != 0) {    if (m_searchInfo.length() != 0)     m_searchInfo+=" - ";    m_searchInfo+=MProductCategory.get(m_ctx,M_Product_Category_ID).getName();  }  m_prices.clear();  m_notAllPrices=false;  String sql="SELECT p.M_Product_ID, p.Value, p.Name, p.Description, " + "p.Help, p.DocumentNote, p.ImageURL, p.DescriptionURL, " + "pp.PriceStd, uom.Name, uom.UOMSymbol "+ "FROM M_ProductPrice pp "+ " INNER JOIN M_Product p ON (pp.M_Product_ID=p.M_Product_ID AND p.IsActive='Y' AND p.IsSold='Y')"+ " INNER JOIN C_UOM uom ON (p.C_UOM_ID=uom.C_UOM_ID) "+ "WHERE pp.M_PriceList_Version_ID=?"+ " AND pp.PriceStd > 0 "+ " AND p.IsSelfService='Y'";  if (searchString != null)   sql+=" AND UPPER(p.Value||p.Name||p.Description) LIKE ? ";  if (M_Product_Category_ID != 0)   sql+=" AND p.M_Product_Category_ID=? ";  if (!allRecords && searchString == null && M_Product_Category_ID == 0) {    sql+=" AND p.IsWebStoreFeatured='Y' ";    m_notAllPrices=true;  }  sql+="ORDER BY p.M_Product_Category_ID, p.Value";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    int index=1;    pstmt.setInt(index++,m_PriceList_Version_ID);    if (searchString != null)     pstmt.setString(index++,searchString);    if (M_Product_Category_ID != 0)     pstmt.setInt(index++,M_Product_Category_ID);    rs=pstmt.executeQuery();    int no=0;    while (rs.next()) {      m_prices.add(new PriceListProduct(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8),rs.getBigDecimal(9),rs.getString(10),rs.getString(11)));      if (!allRecords && ++no > MAX_LINES) {        m_notAllPrices=true;        break;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"load",e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("load #" + m_prices.size() + ", Search="+ m_searchInfo);}  }
class C{  public double remove(int offset){  double old=get(offset);  remove(offset,1);  return old;}  }
class C{  @Override public void run(){  amIActive=true;  ShapeType shapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String outputFile=args[0];  String shapeTypeStr=args[1].toLowerCase();  if (outputFile.isEmpty() || shapeTypeStr.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {switch (shapeTypeStr) {case "point":      shapeType=ShapeType.POINT;    break;case "pointz":  shapeType=ShapeType.POINTZ;break;case "pointm":shapeType=ShapeType.POINTM;break;case "multipoint":shapeType=ShapeType.MULTIPOINT;break;case "multipointz":shapeType=ShapeType.MULTIPOINTZ;break;case "multipointm":shapeType=ShapeType.MULTIPOINTM;break;case "polyline":shapeType=ShapeType.POLYLINE;break;case "polylinez":shapeType=ShapeType.POLYLINEZ;break;case "polylinem":shapeType=ShapeType.POLYLINEM;break;case "polygon":shapeType=ShapeType.POLYGON;break;case "polygonz":shapeType=ShapeType.POLYGONZ;break;case "polygonm":shapeType=ShapeType.POLYGONM;break;default :showFeedback("The specified ShapeType is not supported or recognized");return;}DBFField[] fields=new DBFField[1];fields[0]=new DBFField();fields[0].setName("FID");fields[0].setDataType(DBFField.DBFDataType.NUMERIC);fields[0].setFieldLength(10);fields[0].setDecimalCount(0);ShapeFile output=new ShapeFile(outputFile,shapeType,fields);output.write();returnData(outputFile);myHost.editVector();showFeedback("Operation complete.");} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void autoSize(boolean useColumnIdentifier){  TableModel model=this.getModel();  int size=model.getColumnCount();  for (int c=0; c < size; c++) {    TableColumn column=getColumnModel().getColumn(c);    if (useColumnIdentifier && (column.getIdentifier() == null || column.getMaxWidth() == 0 || column.getIdentifier().toString().length() == 0))     continue;    int width=0;    TableCellRenderer renderer=column.getHeaderRenderer();    if (renderer == null)     renderer=new DefaultTableCellRenderer();    Component comp=null;    if (renderer != null)     comp=renderer.getTableCellRendererComponent(this,column.getHeaderValue(),false,false,0,0);    if (comp != null) {      width=comp.getPreferredSize().width;      width=Math.max(width,comp.getWidth());      int col=column.getModelIndex();      int maxRow=Math.min(20,getRowCount());      try {        for (int row=0; row < maxRow; row++) {          renderer=getCellRenderer(row,col);          comp=renderer.getTableCellRendererComponent(this,getValueAt(row,col),false,false,row,col);          if (comp != null) {            int rowWidth=comp.getPreferredSize().width;            width=Math.max(width,rowWidth);          }        }      } catch (      Exception e) {        log.log(Level.SEVERE,column.getIdentifier().toString(),e);      }      width=Math.min(MAXSIZE,width + SLACK);    }    column.setPreferredWidth(width);  }}  }
class C{  boolean symtabExtends(SymbolTable other){  LocalSymbolTable subset=(LocalSymbolTable)other;  if (getMaxId() < subset.getMaxId())   return false;  if (!myImportsList.equalImports(subset.myImportsList))   return false;  int subLocalSymbolCount=subset.mySymbolsCount;  if (subLocalSymbolCount == 0)   return true;  if (mySymbolsCount < subLocalSymbolCount)   return false;  String[] subsetSymbols=subset.mySymbolNames;  if (!safeEquals(mySymbolNames[subLocalSymbolCount - 1],subsetSymbols[subLocalSymbolCount - 1])) {    return false;  }  for (int i=0; i < subLocalSymbolCount - 1; i++) {    if (!safeEquals(mySymbolNames[i],subsetSymbols[i]))     return false;  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static float determineEnemyBlitzStrength(final Territory blitzHere,final List<Route> blitzTerrRoutes,final List<Territory> blockTerr,final GameData data,final PlayerID ePlayer){  final HashSet<Integer> ignore=new HashSet<>();  ignore.add(1);  final CompositeMatch<Unit> blitzUnit=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(ePlayer),Matches.UnitCanBlitz,Matches.UnitCanMove);  final CompositeMatch<Territory> validBlitzRoute=new CompositeMatchAnd<>(Matches.territoryHasNoEnemyUnits(ePlayer,data),Matches.TerritoryIsNotImpassableToLandUnits(ePlayer,data));  final List<Route> routes=new ArrayList<>();  final List<Unit> blitzUnits=findAttackers(blitzHere,2,ignore,ePlayer,data,blitzUnit,validBlitzRoute,blockTerr,routes,false);  for (  final Route r : routes) {    if (r.numberOfSteps() == 2) {      blitzTerrRoutes.add(r);    }  }  return strength(blitzUnits,true,false,true);}  }
class C{  private final void sendBytes(byte[] messageData,boolean useMAC){  boolean abort=false;  do {    if (abort)     return;    if (socket != null && socketOutStream != null) {      try {        byte[] mac=(useMAC && this.controller.getStaticConf().getUseMACs() == 1) ? macSend.doFinal(messageData) : null;        byte[] data=new byte[5 + messageData.length + ((mac != null) ? mac.length : 0)];        int value=messageData.length;        System.arraycopy(new byte[]{(byte)(value >>> 24),(byte)(value >>> 16),(byte)(value >>> 8),(byte)value},0,data,0,4);        System.arraycopy(messageData,0,data,4,messageData.length);        if (mac != null) {          System.arraycopy(new byte[]{(byte)1},0,data,4 + messageData.length,1);          System.arraycopy(mac,0,data,5 + messageData.length,mac.length);        } else {          System.arraycopy(new byte[]{(byte)0},0,data,4 + messageData.length,1);        }        socketOutStream.write(data);        return;      } catch (      IOException ex) {        closeSocket();        waitAndConnect();        abort=true;      }    } else {      waitAndConnect();      abort=true;    }  } while (doWork);}  }
class C{  public void clearChecking(){  getCheckingModel().clearChecking();}  }
class C{  @Nullable protected ActionMap createActionMap(){  return null;}  }
class C{  @Override public void onAnimationStart(Animator animation){}  }
class C{  public static TokenResponseArtifacts parseTokenResponse(TokenResponse response){  String userEncoded=response.getUserDAO();  String tokenEncoded=response.getToken();  String tokenKeysBundleEncoded=response.getTokenKeysBundle();  StorageOSUserDAO user=null;  Token token=null;  TokenKeysBundle tokenKeysBundle=null;  if (StringUtils.isNotBlank(userEncoded)) {    try {      user=(StorageOSUserDAO)SerializerUtils.deserialize(userEncoded);    } catch (    UnsupportedEncodingException e) {      log.error("Could not decode user: ",e);    }catch (    Exception e) {      log.error("Could not deserialize user: ",e);    }  }  if (StringUtils.isNotBlank(tokenEncoded)) {    try {      token=(Token)SerializerUtils.deserialize(tokenEncoded);    } catch (    UnsupportedEncodingException e) {      log.error("Could not decode token: ",e);    }catch (    Exception e) {      log.error("Could not deserialize token: ",e);    }  }  if (StringUtils.isNotBlank(tokenKeysBundleEncoded)) {    try {      tokenKeysBundle=(TokenKeysBundle)SerializerUtils.deserialize(tokenKeysBundleEncoded);    } catch (    UnsupportedEncodingException e) {      log.error("Could not decode token keys bundle: ",e);    }catch (    Exception e) {      log.error("Could not deserialize token keys bundle: ",e);    }  }  return new TokenResponseBuilder.TokenResponseArtifacts(user,token,tokenKeysBundle);}  }
class C{  public Resource eResource(){  return this.getDelegateResource();}  }
class C{  public static LicenseInfoResponse create(DistributionManager dm,InternalDistributedMember recipient){  LicenseInfoResponse m=new LicenseInfoResponse();  m.setRecipient(recipient);  m.p=new Properties();  return m;}  }
class C{  public void testMultipleFreespeedChanges(){  for (  LinkFactory lf : linkFactories(15 * 60,30 * 3600)) {    final Network network=NetworkUtils.createNetwork();    NetworkFactory nf=network.getFactory();    nf.setLinkFactory(lf);    ((NetworkImpl)network).setFactory(nf);    Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));    Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)0));    final Node fromNode=node1;    final Node toNode=node2;    TimeVariantLinkImpl link=(TimeVariantLinkImpl)NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)100,(double)10,(double)3600,(double)1);    assertEquals(10.0,link.getFreespeed(Time.UNDEFINED_TIME),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,Time.UNDEFINED_TIME),EPSILON);    NetworkChangeEvent change=new NetworkChangeEvent(7 * 3600.0);    change.addLink(link);    change.setFreespeedChange(new ChangeValue(ChangeType.ABSOLUTE_IN_SI_UNITS,20));    link.applyEvent(change);    NetworkChangeEvent change2=new NetworkChangeEvent(8 * 3600.0);    change2.addLink(link);    change2.setFreespeedChange(new ChangeValue(ChangeType.FACTOR,3.0));    link.applyEvent(change2);    NetworkChangeEvent change3=new NetworkChangeEvent(10 * 3600.0);    change3.addLink(link);    change3.setFreespeedChange(new ChangeValue(ChangeType.ABSOLUTE_IN_SI_UNITS,30));    link.applyEvent(change3);    assertEquals(10.0,link.getFreespeed(Time.UNDEFINED_TIME),EPSILON);    assertEquals(10.0,link.getFreespeed(7 * 3600.0 - 1.0),EPSILON);    assertEquals(20.0,link.getFreespeed(7 * 3600.0),EPSILON);    assertEquals(20.0,link.getFreespeed(8 * 3600.0 - 1),EPSILON);    assertEquals(60.0,link.getFreespeed(8 * 3600.0),EPSILON);    assertEquals(60.0,link.getFreespeed(10 * 3600.0 - 1),EPSILON);    assertEquals(30.0,link.getFreespeed(10 * 3600.0),EPSILON);    assertEquals(30.0,link.getFreespeed(18 * 3600.0),EPSILON);    NetworkChangeEvent change4=new NetworkChangeEvent(12 * 3600.0);    change4.addLink(link);    change4.setFreespeedChange(new ChangeValue(ChangeType.ABSOLUTE_IN_SI_UNITS,40));    link.applyEvent(change4);    NetworkChangeEvent change5=new NetworkChangeEvent(11 * 3600.0);    change5.addLink(link);    change5.setFreespeedChange(new ChangeValue(ChangeType.FACTOR,0.5));    link.applyEvent(change5);    NetworkChangeEvent change6=new NetworkChangeEvent(9 * 3600.0);    change6.addLink(link);    change6.setFreespeedChange(new ChangeValue(ChangeType.FACTOR,0.5));    link.applyEvent(change6);    assertEquals(10.0,link.getFreespeed(6 * 3600.0),EPSILON);    assertEquals(20.0,link.getFreespeed(7 * 3600.0),EPSILON);    assertEquals(60.0,link.getFreespeed(8 * 3600.0),EPSILON);    assertEquals(60.0,link.getFreespeed(9 * 3600.0 - 1),EPSILON);    assertEquals(30.0,link.getFreespeed(9 * 3600.0),EPSILON);    assertEquals(30.0,link.getFreespeed(10 * 3600.0 - 1),EPSILON);    assertEquals(30.0,link.getFreespeed(10 * 3600.0),EPSILON);    assertEquals(30.0,link.getFreespeed(11 * 3600.0 - 1),EPSILON);    assertEquals(15.0,link.getFreespeed(11 * 3600.0),EPSILON);    assertEquals(15.0,link.getFreespeed(12 * 3600.0 - 1),EPSILON);    assertEquals(40.0,link.getFreespeed(12 * 3600.0),EPSILON);    assertEquals(40.0,link.getFreespeed(18 * 3600.0),EPSILON);  }}  }
class C{  public FileExistsException(File file){  super("File " + file + " exists");}  }
class C{  public RDFInferencerInserter(InferencerConnection con,ValueFactory vf){  super(vf);  this.con=con;}  }
class C{  private void sendBroadcast(){  LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(ACTION_UPLOAD_SERVICE_RESPONSE).addCategory(Intent.CATEGORY_DEFAULT));}  }
class C{  public boolean execute(IRequestProcessor requestProcessor,IEventSender eventManager,ICvsListenerRegistry listenerRegistry,IClientEnvironment clientEnvironment,IProgressViewer progressViewer) throws CommandException, AuthenticationException {  final ICvsFiles cvsFiles;  try {    cvsFiles=scanFileSystem(clientEnvironment);  } catch (  IOException ex) {    throw new IOCommandException(ex);  }  final Requests requests=new Requests(CommandRequest.TAG,clientEnvironment);  addFileRequests(cvsFiles,requests,clientEnvironment);  requests.addArgumentRequest(isDeleteTag(),"-d");  requests.addArgumentRequest(isMakeBranchTag(),"-b");  requests.addArgumentRequest(isCheckThatUnmodified(),"-c");  requests.addArgumentRequest(isOverrideExistingTag(),"-F");  requests.addArgumentRequest(isAllowMoveDeleteBranchTag(),"-B");  requests.addArgumentRequest(true,getTag());  requests.addLocalPathDirectoryRequest();  addArgumentRequests(requests);  final IRequestsProgressHandler requestsProgressHandler=new FileStateRequestsProgressHandler(new RangeProgressViewer(progressViewer,0.0,0.5),cvsFiles);  final ICvsListener responseProgressHandler=new FileInfoAndMessageResponseProgressHandler(new RangeProgressViewer(progressViewer,0.5,1.0),cvsFiles,isDeleteTag() ? EXAM_DIR_UNTAG : EXAM_DIR_TAG);  final ICvsListener tagParser=new TagParser(eventManager,clientEnvironment.getCvsFileSystem());  final ICvsListener listener=new DualListener(tagParser,responseProgressHandler);  listener.registerListeners(listenerRegistry);  try {    return requestProcessor.processRequests(requests,requestsProgressHandler);  }  finally {    listener.unregisterListeners(listenerRegistry);  }}  }
class C{  public static synchronized boolean validOptions(String options[][],DocErrorReporter reporter){  DocReporter.init(reporter);  DocReporter.printWarning("Processing Options");  boolean valid=true;  boolean contentOptionFound=false;  boolean outputOptionFound=false;  boolean portalsrcOptionFound=false;  for (int i=0; i < options.length; i++) {    if (options[i][0].equals(OUTPUT_OPTION)) {      outputOptionFound=true;      valid=checkOutputOption(options[i][1],reporter);    } else     if (options[i][0].equals(CONTENT_OPTION)) {      contentOptionFound=true;      valid=checkContentOption(options[i][1],reporter);    } else     if (options[i][0].equals(PORTAL_SRC_OPTION)) {      portalsrcOptionFound=true;      valid=checkPortalSourceOption(options[i][1],reporter);    } else     if (options[i][0].equals(ROOT_DIRECTORY)) {      rootDirectory=options[i][1];      reporter.printWarning(rootDirectory);    } else     if (options[i][0].equals(BUILD_OPTION)) {      buildNumber=options[i][1];      reporter.printWarning("Build " + buildNumber);    }  }  if (!contentOptionFound) {    reporter.printError("Content dir option " + CONTENT_OPTION + " not specified");  }  if (!outputOptionFound) {    reporter.printError("Output dir option " + OUTPUT_OPTION + " not specified");  }  if (!portalsrcOptionFound) {    reporter.printError("Portal Source option " + PORTAL_SRC_OPTION + " not specified");  }  DocReporter.printWarning("Finished Processing Options");  return valid && contentOptionFound && outputOptionFound&& portalsrcOptionFound;}  }
class C{  static List<URL> bringStageAndProtoLibsToFront(String stageLibName,List<URL> urls){  List<URL> otherJars=new ArrayList<>();  List<URL> protolibJars=new ArrayList<>();  List<URL> stageLibjars=new ArrayList<>();  for (  URL url : urls) {    String str=url.toExternalForm();    if (str.endsWith(".jar")) {      int nameIdx=str.lastIndexOf("/");      if (nameIdx > -1) {        String jarName=str.substring(nameIdx + 1);        if (jarName.contains("-protolib-")) {          protolibJars.add(url);        } else         if (jarName.contains(stageLibName)) {          stageLibjars.add(url);        } else {          otherJars.add(url);        }      } else {        otherJars.add(url);      }    } else {      otherJars.add(url);    }  }  List<URL> allJars=new ArrayList<>();  if (stageLibjars.size() != 1) {    throw new ExceptionInInitializerError("Expected exactly 1 stage lib jar but found " + stageLibjars.size() + " with name "+ stageLibName);  }  allJars.addAll(stageLibjars);  allJars.addAll(protolibJars);  allJars.addAll(otherJars);  return allJars;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static void editLocalFunctionNodeComment(final SQLProvider provider,final INaviFunctionNode functionNode,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02500: provider argument can not be null");  Preconditions.checkNotNull(functionNode,"IE02501: functionNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02502: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02503: userId argument can not be null");  Preconditions.checkNotNull(newComment,"IE02504: newComment argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.301 -0500",hash_original_method="D798F76D04F235C59E38C4C924A6B5C2",hash_generated_method="FAC0E986F681F7BE1E346F1C463ED22C") private void correctTooLow(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final View firstChild=getChildAt(0);    final int firstTop=firstChild.getTop();    final int start=mListPadding.top;    final int end=(mBottom - mTop) - mListPadding.bottom;    int topOffset=firstTop - start;    View lastChild=getChildAt(childCount - 1);    final int lastBottom=lastChild.getBottom();    int lastPosition=mFirstPosition + childCount - 1;    if (topOffset > 0) {      if (lastPosition < mItemCount - 1 || lastBottom > end) {        if (lastPosition == mItemCount - 1) {          topOffset=Math.min(topOffset,lastBottom - end);        }        offsetChildrenTopAndBottom(-topOffset);        if (lastPosition < mItemCount - 1) {          fillDown(lastPosition + 1,lastChild.getBottom() + mDividerHeight);          adjustViewsUpOrDown();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsUpOrDown();      }    }  }}  }
class C{  public void testNextIntBounded2(){  for (int least=-15485863; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=49979687) {      int f=ThreadLocalRandom.current().nextInt(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      int j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextInt(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.015 -0500",hash_original_method="963F98A8FDC7B7AF2796AD66CC439076",hash_generated_method="6FFAEEF21DE26EF3C5E04574282E7986") public static byte[] tauAdicNaf(byte mu,ZTauElement lambda){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 : 34;  byte[] u=new byte[maxLength];  int i=0;  int length=0;  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      u[i]=(byte)ECConstants.TWO.subtract((r0.subtract(r1.shiftLeft(1))).mod(ECConstants.FOUR)).intValue();      if (u[i] == 1) {        r0=r0.clearBit(0);      } else {        r0=r0.add(ECConstants.ONE);      }      length=i;    } else {      u[i]=0;    }    BigInteger t=r0;    BigInteger s=r0.shiftRight(1);    if (mu == 1) {      r0=r1.add(s);    } else {      r0=r1.subtract(s);    }    r1=t.shiftRight(1).negate();    i++;  }  length++;  byte[] tnaf=new byte[length];  System.arraycopy(u,0,tnaf,0,length);  return tnaf;}  }
class C{  public final String toBase58(){  byte[] addressBytes=new byte[1 + bytes.length + 4];  addressBytes[0]=(byte)version;  System.arraycopy(bytes,0,addressBytes,1,bytes.length);  byte[] checksum=Sha256Hash.hashTwice(addressBytes,0,bytes.length + 1);  System.arraycopy(checksum,0,addressBytes,bytes.length + 1,4);  return Base58.encode(addressBytes);}  }
class C{  public static void print(ClassFile cf,PrintWriter out){  List list;  int n;  int mod=AccessFlag.toModifier(cf.getAccessFlags() & ~AccessFlag.SYNCHRONIZED);  out.println("major: " + cf.major + ", minor: "+ cf.minor+ " modifiers: "+ Integer.toHexString(cf.getAccessFlags()));  out.println(Modifier.toString(mod) + " class " + cf.getName()+ " extends "+ cf.getSuperclass());  String[] infs=cf.getInterfaces();  if (infs != null && infs.length > 0) {    out.print("    implements ");    out.print(infs[0]);    for (int i=1; i < infs.length; ++i)     out.print(", " + infs[i]);    out.println();  }  out.println();  list=cf.getFields();  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    int acc=finfo.getAccessFlags();    out.println(Modifier.toString(AccessFlag.toModifier(acc)) + " " + finfo.getName()+ "\t"+ finfo.getDescriptor());    printAttributes(finfo.getAttributes(),out,'f');  }  out.println();  list=cf.getMethods();  n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    int acc=minfo.getAccessFlags();    out.println(Modifier.toString(AccessFlag.toModifier(acc)) + " " + minfo.getName()+ "\t"+ minfo.getDescriptor());    printAttributes(minfo.getAttributes(),out,'m');    out.println();  }  out.println();  printAttributes(cf.getAttributes(),out,'c');}  }
class C{  public boolean removeNode(Node node){  if (sessionNodeWrappers.contains(node)) {    for (    Edge edge : getEdges(node)) {      removeEdge(edge);    }    SessionNodeWrapper wrapper=(SessionNodeWrapper)node;    SessionNode sessionNode=wrapper.getSessionNode();    try {      this.session.removeNode(sessionNode);      sessionNodeWrappers.remove(wrapper);      getPropertyChangeSupport().firePropertyChange("nodeRemoved",node,null);      return true;    } catch (    IllegalArgumentException e) {      return false;    }  }  return false;}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  AbstractCharacterData cd=(AbstractCharacterData)n;  cd.nodeValue=nodeValue;  return n;}  }
class C{  private void initializeExceptionHandlers(BasicBlockLE bble,Operand[] simLocals){  if (startPCs != null) {    HashSet<TypeReference> caughtTypes=new HashSet<TypeReference>();    for (int i=0; i < startPCs.length; i++) {      TypeReference caughtType=exceptionTypes[i].getTypeRef();      if (bble.low >= startPCs[i] && bble.max <= endPCs[i] && !caughtTypes.contains(caughtType)) {        HandlerBlockLE eh=(HandlerBlockLE)getOrCreateBlock(handlerPCs[i],bble,null,simLocals);        if (DBG_EX)         db("Adding handler " + eh + " to "+ bble);        caughtTypes.add(caughtType);        bble.addHandler(eh);      }    }  }  if (bble.handlers != null) {    ExceptionHandlerBasicBlock[] ehbbs=new ExceptionHandlerBasicBlock[bble.handlers.length];    for (int i=0; i < bble.handlers.length; i++) {      ehbbs[i]=bble.handlers[i].entryBlock;    }    bble.block.setExceptionHandlers(new ExceptionHandlerBasicBlockBag(ehbbs,gc.getEnclosingHandlers()));  } else {    bble.block.setExceptionHandlers(gc.getEnclosingHandlers());  }}  }
class C{  protected Key(){}  }
class C{  public Message authResponse(ParameterList requestParams,String userSelId,String userSelClaimed,boolean authenticatedAndApproved,boolean signNow){  return authResponse(requestParams,userSelId,userSelClaimed,authenticatedAndApproved,_opEndpointUrl,signNow);}  }
class C{  @Override public void endPrefixMapping(String alias){  namespaceMap.get(alias).pop();}  }
class C{  public void addKeys(KeyCode... keyCodes){  for (  KeyCode key : keyCodes) {    addKey(key);  }}  }
class C{  private void generateAnnotationsInfos(JavaElement member,char[] parameterName,IBinaryAnnotation[] binaryAnnotations,long tagBits,HashMap newElements){  if (binaryAnnotations != null) {    for (int i=0, length=binaryAnnotations.length; i < length; i++) {      IBinaryAnnotation annotationInfo=binaryAnnotations[i];      generateAnnotationInfo(member,parameterName,newElements,annotationInfo,null);    }  }  generateStandardAnnotationsInfos(member,parameterName,tagBits,newElements);}  }
class C{  public void dispose(){  ResourcesPlugin.getWorkspace().removeResourceChangeListener(this);  super.dispose();}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public static double log10(double x){  return log(x) * INV_LOG10;}  }
class C{  public RatNum(int n){  numer=n;  denom=1;  checkRep();  approx=this.approx();}  }
class C{  public ExamAssignmentInfo(org.unitime.timetable.model.ExamOwner examOwner,Student student,Set<ExamOwner> examsOfTheSameStudent){  super(examOwner.getExam());  iSections=new Vector();  HashSet<Long> studentIds=new HashSet();  studentIds.add(student.getUniqueId());  iSections.add(new ExamSectionInfo(examOwner,studentIds));  org.unitime.timetable.model.Exam exam=examOwner.getExam();  if (getPeriod() != null) {    Parameters p=new Parameters(exam.getSession().getUniqueId(),exam.getExamType().getUniqueId());    TreeSet sameDateExams=new TreeSet();    for (    ExamOwner studentExamOwner : examsOfTheSameStudent) {      org.unitime.timetable.model.Exam other=studentExamOwner.getExam();      if (other.equals(getExam()))       continue;      ExamPeriod otherPeriod=other.getAssignedPeriod();      if (otherPeriod == null)       continue;      if (getPeriod().equals(otherPeriod)) {        DirectConflict dc=new DirectConflict(new ExamAssignment(other));        dc.getStudents().add(student.getUniqueId());        iNrDirectConflicts++;        iDirects.add(dc);      } else       if (p.isBackToBack(getPeriod(),otherPeriod)) {        ExamAssignment ea=new ExamAssignment(other);        double distance=Location.getDistance(getRooms(),ea.getRooms());        BackToBackConflict btb=new BackToBackConflict(ea,(p.getBackToBackDistance() < 0 ? false : distance > p.getBackToBackDistance()),distance);        btb.getStudents().add(student.getUniqueId());        iNrBackToBackConflicts++;        if (btb.isDistance())         iNrDistanceBackToBackConflicts++;        iBackToBacks.add(btb);      }      if (getPeriod().getDateOffset().equals(otherPeriod.getDateOffset()))       sameDateExams.add(other);    }    if (sameDateExams.size() >= 2) {      TreeSet examIds=new TreeSet();      TreeSet otherExams=new TreeSet();      for (Iterator j=sameDateExams.iterator(); j.hasNext(); ) {        org.unitime.timetable.model.Exam other=(org.unitime.timetable.model.Exam)j.next();        examIds.add(other.getUniqueId());        otherExams.add(new ExamAssignment(other));      }      MoreThanTwoADayConflict m2d=new MoreThanTwoADayConflict(otherExams);      iNrMoreThanTwoADayConflicts++;      m2d.getStudents().add(student.getUniqueId());      iMoreThanTwoADays.add(m2d);    }    if (ApplicationProperty.ExaminationConsiderEventConflicts.isTrue(examOwner.getExam().getExamType().getReference())) {      int nrTravelSlots=ApplicationProperty.ExaminationTravelTimeClass.intValue();      for (Iterator i=new ExamDAO().getSession().createQuery("select m from ClassEvent e inner join e.meetings m, StudentClassEnrollment en " + "where en.student.uniqueId=:studentId and e.clazz=en.clazz and " + "m.meetingDate=:startDate and m.startPeriod < :endSlot and m.stopPeriod > :startSlot").setLong("studentId",student.getUniqueId()).setDate("startDate",getPeriod().getStartDate()).setInteger("startSlot",getPeriod().getStartSlot() - nrTravelSlots).setInteger("endSlot",getPeriod().getEndSlot() + nrTravelSlots).setCacheable(true).list().iterator(); i.hasNext(); ) {        iDirects.add(new DirectConflict((Meeting)i.next(),studentIds));      }      for (Iterator i=ExamDAO.getInstance().getSession().createQuery("select m from " + "CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and " + "m.meetingDate=:meetingDate and m.startPeriod < :endSlot and m.stopPeriod > :startSlot and s.student.uniqueId=:studentId and ("+ "(o.ownerType=:classType and s.clazz.uniqueId=o.ownerId) or "+ "(o.ownerType=:configType and s.clazz.schedulingSubpart.instrOfferingConfig.uniqueId=o.ownerId) or "+ "(o.ownerType=:courseType and s.courseOffering.uniqueId=o.ownerId) or "+ "(o.ownerType=:offeringType and s.courseOffering.instructionalOffering.uniqueId=o.ownerId))").setLong("studentId",student.getUniqueId()).setDate("meetingDate",getPeriod().getStartDate()).setInteger("startSlot",getPeriod().getStartSlot() - nrTravelSlots).setInteger("endSlot",getPeriod().getEndSlot() + nrTravelSlots).setInteger("classType",ExamOwner.sOwnerTypeClass).setInteger("configType",ExamOwner.sOwnerTypeConfig).setInteger("courseType",ExamOwner.sOwnerTypeCourse).setInteger("offeringType",ExamOwner.sOwnerTypeOffering).setCacheable(true).list().iterator(); i.hasNext(); ) {        iDirects.add(new DirectConflict((Meeting)i.next(),studentIds));      }    }  }}  }
class C{  public Vector3D subU(Vector3D a){  x-=a.x;  y-=a.y;  z-=a.z;  return (this);}  }
class C{  public static Statement produce(CharSequence table){  DeleteStatement deleteStmt=new DeleteStatement();  deleteStmt.statement.append("DELETE");  return deleteStmt.from(table);}  }
class C{  private Signature extractSignature(SecurityHeaderType header){  assert header != null;  Signature result=null;  KeyInfoType keyInfo=header.getSignature().getKeyInfo();  if (keyInfo == null) {    throwInvalidSecurity("KeyInfo not found");  }  logger.debug("Found KeyInfo");  SecurityTokenReferenceType stRef=getTheValue(keyInfo.getContent(),SecurityTokenReferenceType.class,FaultKey.WSSE_INVALID_SECURITY,"SecurityTokenReference not found");  logger.debug("Found SecurityTokenReference");  List<Object> stRefContent=stRef.getAny();  if (stRefContent == null || stRefContent.size() != 1) {    throwInvalidSecurity("SecurityTokenReference is empty");  }  if (!(stRefContent.get(0) instanceof JAXBElement<?>)) {    throwInvalidSecurity("Unknown SecurityTokenReference content type");  }  JAXBElement<?> jaxbElement=(JAXBElement<?>)stRefContent.get(0);  if (ReferenceType.class.equals(jaxbElement.getDeclaredType())) {    ReferenceType reference=(ReferenceType)jaxbElement.getValue();    result=parseReferenceType(header,reference);  } else   if (KeyIdentifierType.class.equals(jaxbElement.getDeclaredType())) {    KeyIdentifierType keyIdentifier=(KeyIdentifierType)jaxbElement.getValue();    result=parseKeyIdentifier(header,keyIdentifier);  } else {    throw new WSFaultException(FaultKey.WSSE_UNSUPPORTED_SECURITY_TOKEN,"Unknown SecurityTokenReference content");  }  return result;}  }
class C{  @Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  String json=RequestUtils.readRequestJson(req);  CreateImageRequest createImageRequest=mapper.readValue(json,CreateImageRequest.class);  CreateImageResult result=imageBuilder.createImage(createImageRequest);  String resultJson=mapper.writeValueAsString(result);  resp.setStatus(HttpStatus.SC_CREATED);  resp.getWriter().append(resultJson);}  }
class C{  public UnsafeCopier build(Unsafe unsafe) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {  checkArgument(offset >= 0,"Offset must be set");  checkArgument(length >= 0,"Length must be set");  checkNotNull(unsafe);  Class<?> dynamicType=new ByteBuddy().subclass(UnsafeCopier.class).method(named("copy")).intercept(new CopierImplementation(offset,length)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded();  return (UnsafeCopier)dynamicType.getDeclaredConstructor(Unsafe.class).newInstance(unsafe);}  }
class C{  private void createRpBlockConsistencyGroups(){  DbClient dbClient=this.getDbClient();  List<URI> protectionSetURIs=dbClient.queryByType(ProtectionSet.class,false);  Iterator<ProtectionSet> protectionSets=dbClient.queryIterativeObjects(ProtectionSet.class,protectionSetURIs);  while (protectionSets.hasNext()) {    ProtectionSet ps=protectionSets.next();    Project project=dbClient.queryObject(Project.class,ps.getProject());    BlockConsistencyGroup cg=new BlockConsistencyGroup();    cg.setId(URIUtil.createId(BlockConsistencyGroup.class));    cg.setLabel(ps.getLabel());    cg.setDeviceName(ps.getLabel());    cg.setType(BlockConsistencyGroup.Types.RP.toString());    cg.setProject(new NamedURI(project.getId(),project.getLabel()));    cg.setTenant(project.getTenantOrg());    dbClient.createObject(cg);    log.debug("Created ConsistencyGroup (id={}) based on ProtectionSet (id={})",cg.getId().toString(),ps.getId().toString());    for (    String protectionVolumeID : ps.getVolumes()) {      URI uri=URI.create(protectionVolumeID);      Volume protectionVolume=dbClient.queryObject(Volume.class,uri);      protectionVolume.addConsistencyGroup(cg.getId().toString());      dbClient.persistObject(protectionVolume);      log.debug("Volume (id={}) added to ConsistencyGroup (id={})",protectionVolume.getId().toString(),cg.getId().toString());    }  }}  }
class C{  @Override public ServerHeartbeat serverDyn(String address,int port,boolean isSSL,String clusterId,String displayName){  Objects.requireNonNull(address);  Objects.requireNonNull(clusterId);  ClusterHeartbeat cluster=createCluster(clusterId);  ServerHeartbeat server=cluster.createServer(address,port,isSSL);  if (displayName != null) {    server.setDisplayName(displayName);  }  cluster.addDynamicServer(server);  return server;}  }
class C{  protected void decodeBufferSuffix(PushbackInputStream inStream,OutputStream outStream) throws IOException {  int c;  c=inStream.read(decoderBuffer);  if ((decoderBuffer[0] != 'e') || (decoderBuffer[1] != 'n') || (decoderBuffer[2] != 'd')) {    throw new CEFormatException("UUDecoder: Missing 'end' line.");  }}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  @SideOnly(Side.CLIENT) public boolean isFull3D(){  return true;}  }
class C{  public void migrateProperties(){  Network memory=getBot().memory().newMemory();  Vertex facebook=memory.createVertex(getPrimitive());  Vertex user=facebook.getRelationship(Primitive.USER);  if (user != null) {    this.userName=(String)user.getData();  }  Vertex token=facebook.getRelationship(Primitive.TOKEN);  if (token != null) {    this.token=(String)token.getData();    setIsEnabled(true);  }  Vertex tokenExpiry=facebook.getRelationship(Primitive.TOKENEXPIRY);  if (tokenExpiry != null) {    this.tokenExpiry=new Date((Long)tokenExpiry.getData());  }  Vertex property=facebook.getRelationship(Primitive.WELCOME);  if (property != null) {    this.welcomeMessage=(String)property.getData();  }  property=facebook.getRelationship(Primitive.NAME);  if (property != null) {    this.profileName=(String)property.getData();  }  property=facebook.getRelationship(Primitive.PAGE);  if (property != null) {    this.page=(String)property.getData();  }  property=facebook.getRelationship(Primitive.AUTOFRIEND);  if (property != null) {    this.autoFriend=(Boolean)property.getData();  }  property=facebook.getRelationship(Primitive.MAXFRIENDS);  if (property != null) {    this.maxFriends=((Number)property.getData()).intValue();  }  property=facebook.getRelationship(Primitive.MAXSTATUSCHECKS);  if (property != null) {    this.maxPost=((Number)property.getData()).intValue();  }  property=facebook.getRelationship(Primitive.PROCESSSTATUS);  if (property != null) {    this.processPost=(Boolean)property.getData();  }  this.statusKeywords=new ArrayList<String>();  List<Relationship> keywords=facebook.orderedRelationships(Primitive.STATUSKEYWORDS);  if (keywords != null) {    for (    Relationship relationship : keywords) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.statusKeywords.add(text);      }    }  }  this.likeKeywords=new ArrayList<String>();  keywords=facebook.orderedRelationships(Primitive.LIKEKEYWORDS);  if (keywords != null) {    for (    Relationship relationship : keywords) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.likeKeywords.add(text);      }    }  }  this.autoFriendKeywords=new ArrayList<String>();  List<Relationship> search=facebook.orderedRelationships(Primitive.AUTOFRIENDKEYWORDS);  if (search != null) {    for (    Relationship relationship : search) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.autoFriendKeywords.add(text);      }    }  }  this.postRSS=new ArrayList<String>();  List<Relationship> rss=facebook.orderedRelationships(Primitive.RSS);  if (rss != null) {    for (    Relationship relationship : rss) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.postRSS.add(text);      }    }  }  this.rssKeywords=new ArrayList<String>();  keywords=facebook.orderedRelationships(Primitive.RSSKEYWORDS);  if (keywords != null) {    for (    Relationship relationship : keywords) {      String text=((String)relationship.getTarget().getData()).trim();      this.rssKeywords.add(text);    }  }  property=facebook.getRelationship(Primitive.REPLYTOMESSAGES);  if (property != null) {    this.replyToMessages=(Boolean)property.getData();  }  property=facebook.getRelationship(Primitive.AUTOPOST);  if (property != null) {    this.autoPost=(Boolean)property.getData();  }  property=facebook.getRelationship(Primitive.AUTOPOSTHOURS);  if (property != null) {    this.autoPostHours=((Number)property.getData()).intValue();  }  facebook.unpinChildren();  facebook.internalRemoveRelationships(Primitive.USER);  facebook.internalRemoveRelationships(Primitive.TOKEN);  facebook.internalRemoveRelationships(Primitive.TOKENEXPIRY);  facebook.internalRemoveRelationships(Primitive.PAGE);  facebook.internalRemoveRelationships(Primitive.NAME);  facebook.internalRemoveRelationships(Primitive.WELCOME);  facebook.internalRemoveRelationships(Primitive.AUTOFRIEND);  facebook.internalRemoveRelationships(Primitive.MAXFRIENDS);  facebook.internalRemoveRelationships(Primitive.MAXSTATUSCHECKS);  facebook.internalRemoveRelationships(Primitive.PROCESSSTATUS);  facebook.internalRemoveRelationships(Primitive.REPLYTOMESSAGES);  facebook.internalRemoveRelationships(Primitive.AUTOPOST);  facebook.internalRemoveRelationships(Primitive.AUTOPOSTHOURS);  memory.save();  saveProperties(null);}  }
class C{  @Override public IMatrix matrixValue(final IScope scope,final IType contentType,final ILocation size,final boolean copy){  return GamaMatrixType.from(scope,listValue(scope,contentType,copy),contentType,size);}  }
class C{  private void indicationOccured(String url,CIMInstance indication,boolean wasQueued){  if (wasQueued) {    s_logger.debug("{} Dequeued: {}",new Object[]{url,indication.toString()});  } else {    s_logger.debug("{} Received: {}",new Object[]{url,indication.toString()});  }  Runnable indicationWorker=new IndicationWorkerThread(url,indication,wasQueued);  executorService.execute(indicationWorker);}  }
class C{  public IElementType captureString(int newState) throws IOException {  int nextCharOffset=getTokenEnd() + 1;  PerlTokenHistory tokenHistory=getTokenHistory();  boolean afterSigil=SIGILS_TOKENS.contains(tokenHistory.getLastTokenType());  if (newState == LEX_QUOTE_LIKE_OPENER_Q && afterSigil && isValidIdentifierCharacter(getSafeCharacterAt(nextCharOffset))) {    setTokenStart(getTokenEnd());    setTokenEnd(nextCharOffset);    int adjustResult=adjustUtfIdentifier();    if (adjustResult == EXT_IDENTIFIER || adjustResult == EXT_PACKAGE) {      return parsePackage();    } else {      return parsePackageCanonical();    }  }  if (afterSigil || (SIGILS_TOKENS.contains(tokenHistory.getLastUnbracedTokenType()) && tokenHistory.getLastSignificantTokenType() == LEFT_BRACE && getNextNonSpaceCharacter(nextCharOffset) == '}')) {    return super.perlAdvance();  }  pushState();  yybegin(newState);  return captureString();}  }
class C{  @HLEFunction(nid=0x629E2FB7,version=150) public int sceNetResolverStartAtoN(@CheckArgument("checkRid") int rid,int addr,TPointer hostnameAddr,int hostnameLength,int timeout,int retry){  try {    byte[] bytes=sceNetInet.internetAddressToBytes(addr);    InetAddress inetAddress=InetAddress.getByAddress(bytes);    String hostName=inetAddress.getHostName();    hostnameAddr.setStringNZ(hostnameLength,hostName);    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetResolverStartAtoN returning host name '%s'",hostName));    }  } catch (  UnknownHostException e) {    log.error(e);    return SceKernelErrors.ERROR_NET_RESOLVER_INVALID_HOST;  }  return 0;}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  public static TaskExecution endSampleTaskExecutionNoArg(){  Random randomGenerator=new Random();  int exitCode=randomGenerator.nextInt();  Date startTime=new Date();  Date endTime=new Date();  long executionId=randomGenerator.nextLong();  String taskName=UUID.randomUUID().toString();  String exitMessage=UUID.randomUUID().toString();  return new TaskExecution(executionId,exitCode,taskName,startTime,endTime,exitMessage,new ArrayList<String>(),null,null);}  }
class C{  public static Script createInputScript(TransactionSignature signature,ECKey pubKey){  byte[] pubkeyBytes=pubKey.getPubKey();  return new ScriptBuilder().data(signature.encodeToBitcoin()).data(pubkeyBytes).build();}  }
class C{  protected boolean handleAdded(final RPEntity entity){  return true;}  }
class C{  public boolean isPrettyPrint(){  return prettyPrint;}  }
class C{  public void exportGroupUpdate(URI storageURI,URI exportGroupURI,Workflow storageWorkflow,String token) throws ControllerException {  try {    WorkflowStepCompleter.stepExecuting(token);    final String workflowKey="exportGroupUpdate";    if (!WorkflowService.getInstance().hasWorkflowBeenCreated(token,workflowKey)) {      DiscoveredSystemObject storage=ExportWorkflowUtils.getStorageSystem(_dbClient,storageURI);      MaskingOrchestrator orchestrator=getOrchestrator(storage.getSystemType());      orchestrator.exportGroupUpdate(storageURI,exportGroupURI,storageWorkflow,token);      WorkflowService.getInstance().markWorkflowBeenCreated(token,workflowKey);    }  } catch (  Exception e) {    DeviceControllerException exception=DeviceControllerException.exceptions.exportGroupUpdateFailed(e);    WorkflowStepCompleter.stepFailed(token,exception);    throw exception;  }}  }
class C{  public GenericWidget(RawWidget rawWidget){  type=rawWidget.type();  nameProperty=rawWidget.name();  if (!rawWidget.properties().isEmpty()) {    valuez=new String[PROPS.length];    java.util.Properties props=rawWidget.properties();    for (int i=0; i < PROPS.length; i++) {      valuez[i]=props.getProperty(PROPS[i]);    }  }  index=rawWidget.index();  symbol=rawWidget.symbol();  buildCacheMask();}  }
class C{  @Override public void finish(){  super.finish();}  }
class C{  public void testConstructor(){  LongAccumulator ai=new LongAccumulator(null,0L);  assertEquals(0,ai.get());}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq=0;  double currentValue;  double newValue;  final Bounds<Double> bounds=variable.getBounds();  final int dim=variable.getSize();  if (updateAllIndependently) {    for (int i=0; i < dim; i++) {      currentValue=variable.getValue(i);      newValue=gamma.nextGamma();      while (newValue == 0.0) {        newValue=gamma.nextGamma();      }      logq+=(gamma.logPdf(currentValue) - gamma.logPdf(newValue));      if (newValue < bounds.getLowerLimit(i) || newValue > bounds.getUpperLimit(i)) {        throw new OperatorFailedException("proposed value outside boundaries");      }      variable.setValue(i,newValue);    }  }  return logq;}  }
class C{  public PerfDataBuffer(RemoteVm rvm,int lvmid) throws MonitorException {  this.rvm=rvm;  try {    ByteBuffer buffer=ByteBuffer.allocate(rvm.getCapacity());    sample(buffer);    createPerfDataBuffer(buffer,lvmid);  } catch (  RemoteException e) {    throw new MonitorException("Could not read data for remote JVM " + lvmid,e);  }}  }
class C{  public void uninstallingUI(){  if (propertyChangeListener != null) {    comboBox.removePropertyChangeListener(propertyChangeListener);  }  if (itemListener != null) {    comboBox.removeItemListener(itemListener);  }  uninstallComboBoxModelListeners(comboBox.getModel());  uninstallKeyboardActions();  uninstallListListeners();  uninstallScrollerListeners();  list.setModel(EmptyListModel);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.423 -0500",hash_original_method="8D3228F5DEFAE0131B22F51707654BE0",hash_generated_method="4EF58F4341E85B06DAFB5DACE21A07F8") public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public final int position(){  return this.pos;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public ZCCLabel(ZRoot inReality,boolean isCC){  this(inReality,isCC,null);}  }
class C{  protected void addUncheckedStandardDefaults(QualifierDefaults defs){  Set<? extends AnnotationMirror> tops=this.qualHierarchy.getTopAnnotations();  Set<? extends AnnotationMirror> bottoms=this.qualHierarchy.getBottomAnnotations();  defs.addUncheckedStandardDefaults(tops,bottoms);}  }
class C{  public boolean isHappy2(int n){  if (n < 1)   return false;  int num=n;  Set<Integer> results=new HashSet<>();  while (!results.contains(num)) {    results.add(num);    num=digitSquareSum(num);  }  return num == 1;}  }
class C{  public static Date string2Date(String date,String format){  if (CommonUtil.isEmpty(format)) {    throw new IllegalArgumentException("the date format string is null!");  }  DateFormat sdf=new SimpleDateFormat(format);  try {    return sdf.parse(date.trim());  } catch (  ParseException e) {    throw new IllegalArgumentException("the date string " + date + " is not matching format: "+ format,e);  }}  }
class C{  private MariaDbConnection(Protocol protocol,ReentrantLock lock) throws SQLException {  this.protocol=protocol;  options=protocol.getOptions();  noBackslashEscapes=protocol.noBackslashEscapes();  nullCatalogMeansCurrent=options.nullCatalogMeansCurrent;  if (options.cacheCallableStmts) {    callableStatementCache=CallableStatementCache.newInstance(options.callableStmtCacheSize);  }  this.lock=lock;  if (options.cachePrepStmts) {    this.clientPrepareStatementCache=ClientPrepareStatementCache.newInstance(options.prepStmtCacheSize);  } else {    clientPrepareStatementCache=null;  }}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public int intersectAab(Vector3fc min,Vector3fc max){  return intersectAab(min.x(),min.y(),min.z(),max.x(),max.y(),max.z());}  }
class C{  private void processZeroCheck(Instruction s){  RegisterOperand result=ZeroCheck.getGuardResult(s);  ValueGraphVertex v=findOrCreateVertex(result.getRegister());  v.setLabel(s.operator(),1);  Operand val=ZeroCheck.getValue(s);  val=bypassMoves(val);  link(v,findOrCreateVertex(val),0);}  }
class C{  public static double[][] mirrorMatrixBothCoords(double[][] matrix){  int rows=matrix.length;  int cols=matrix[0].length;  double[][] mirrored=new double[rows][cols];  for (int r=0; r < rows; r++) {    for (int c=0; c < cols; c++) {      mirrored[(rows - 1) - r][(cols - 1) - c]=matrix[r][c];    }  }  return mirrored;}  }
class C{  WallMapObject(final IEntity entity){  super(entity);}  }
class C{  LineChart(){}  }
class C{  public NoSuchProviderException(){  super();}  }
class C{  public void removeHost(@NonNull UUID uuid){  userHostMap.remove(uuid);}  }
class C{  @Override public void formatOperandsAndComment(StatementContext context,boolean updateRegisters,Set<OutputOption> outputOptions){  int tmp;  int pos;  boolean writeDirection=false;  decodedImm=imm;  decodedRiRsFs=ri_rs_fs;  decodedRjRtFt=rj_rt_ft;  StringBuilder operandBuffer=new StringBuilder();  StringBuilder commentBuffer=new StringBuilder();  StringBuilder currentBuffer=operandBuffer;  for (  char formatChar : getInstruction().getOperandFormat().toCharArray()) {switch (formatChar) {case '#':      currentBuffer.append(fmt_imm);    break;case '&':  currentBuffer.append(fmt_and);break;case '(':currentBuffer.append(fmt_par);break;case ')':currentBuffer.append(fmt_ens);break;case '+':currentBuffer.append(fmt_inc);break;case ',':currentBuffer.append(fmt_nxt);break;case '-':currentBuffer.append(fmt_dec);break;case ';':currentBuffer=commentBuffer;break;case '@':currentBuffer.append(fmt_mem);break;case '2':decodedImm<<=1;immBitWidth+=1;break;case '4':decodedImm<<=2;immBitWidth+=2;break;case 'A':currentBuffer.append(FrCPUState.registerLabels[FrCPUState.AC]);break;case 'C':currentBuffer.append(FrCPUState.registerLabels[FrCPUState.CCR]);break;case 'F':currentBuffer.append(FrCPUState.registerLabels[FrCPUState.FP]);break;case 'm':writeDirection=true;break;case 'G':case 'H':case 'E':if (context.cpuState.isRegisterDefined(decodedRjRtFt)) {final int addr=context.cpuState.getReg(decodedRjRtFt);currentBuffer.append('(' + Format.asHex(addr,8) + ')');if (writeDirection) {currentBuffer.append('=');if (context.cpuState.isRegisterDefined(decodedRiRsFs)) {if (formatChar == 'E') tmp=2; else if (formatChar == 'H') tmp=4; else tmp=8;currentBuffer.append(Format.asHex(context.cpuState.getReg(decodedRiRsFs),tmp));}break;}if (context.memory.isMapped(addr)) {final int value;if (formatChar == 'E') {value=context.memory.loadInstruction8(addr);tmp=2;} else {if (formatChar == 'H') {if (!context.memory.isMapped(addr + 1)) break;value=context.memory.loadInstruction16(addr);tmp=4;} else {if (!context.memory.isMapped(addr + 3)) break;tmp=8;value=context.memory.loadInstruction32(addr);}}currentBuffer.append(':' + Format.asHex(value,tmp));}}break;case 'M':currentBuffer.append("ILM");break;case 'P':currentBuffer.append(FrCPUState.registerLabels[FrCPUState.PS]);break;case 'S':currentBuffer.append(FrCPUState.registerLabels[FrCPUState.SP]);break;case 'I':if (context.cpuState.isRegisterDefined(decodedRiRsFs)) {decodedImm=context.cpuState.getReg(decodedRiRsFs);immBitWidth=32;} else {decodedImm=0;immBitWidth=0;}break;case 'J':if (context.cpuState.isRegisterDefined(decodedRjRtFt)) {decodedImm=context.cpuState.getReg(decodedRjRtFt);immBitWidth=32;} else {decodedImm=0;immBitWidth=0;}break;case 'T':currentBuffer.append("INT");break;case 'X':case 'Y':throw new RuntimeException("no more X or Y : operand parsing is now done in decodeOperands()");case 'a':pos=immBitWidth;while (pos >= 8) {pos-=8;currentBuffer.append(Format.asAscii(decodedImm >> pos));}break;case 'b':decodedImm+=16;immBitWidth+=1;break;case 'c':currentBuffer.append((outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x") + Format.asHex(c,2));break;case 'd':currentBuffer.append(decodedImm);break;case 'f':pos=immBitWidth >> 1;tmp=(int)(((1L << pos) - 1) & (decodedImm >> pos));int tmq=(int)(((1L << pos) - 1) & decodedImm);if (tmq != 0) currentBuffer.append(((double)tmp) / tmq); else currentBuffer.append("NaN");break;case 'g':decodedRiRsFs+=FrCPUState.DEDICATED_REG_OFFSET;currentBuffer.append(FrCPUState.registerLabels[decodedRiRsFs]);break;case 'h':decodedRjRtFt+=FrCPUState.DEDICATED_REG_OFFSET;currentBuffer.append(FrCPUState.registerLabels[decodedRjRtFt]);break;case 'i':currentBuffer.append(FrCPUState.registerLabels[decodedRiRsFs]);break;case 'j':currentBuffer.append(FrCPUState.registerLabels[decodedRjRtFt]);break;case 'k':decodedRiRsFs+=FrCPUState.COPROCESSOR_REG_OFFSET;currentBuffer.append(decodedRiRsFs);break;case 'l':decodedRjRtFt+=FrCPUState.COPROCESSOR_REG_OFFSET;currentBuffer.append(decodedRjRtFt);break;case 'n':currentBuffer.append(Format.asHexInBitsLength("-" + (outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x"),-BinaryArithmetics.negativeExtend(immBitWidth,decodedImm),immBitWidth + 1));break;case 'p':pos=immBitWidth >> 1;currentBuffer.append(Format.asHexInBitsLength((outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x"),((1 << pos) - 1) & (decodedImm >> pos),pos));currentBuffer.append(fmt_nxt);currentBuffer.append(Format.asHexInBitsLength((outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x"),((1 << pos) - 1) & decodedImm,pos));break;case 'q':pos=immBitWidth >> 1;currentBuffer.append(((1L << pos) - 1) & (decodedImm >> pos));currentBuffer.append("/");currentBuffer.append(((1L << pos) - 1) & decodedImm);break;case 'r':decodedImm=context.cpuState.pc + 2 + BinaryArithmetics.signExtend(immBitWidth,decodedImm);immBitWidth=32;break;case 's':if (BinaryArithmetics.isNegative(immBitWidth,decodedImm)) {if (outputOptions.contains(OutputOption.CSTYLE) && (currentBuffer.charAt(currentBuffer.length() - 1) == '+')) {currentBuffer.delete(currentBuffer.length() - 1,currentBuffer.length() - 1);}currentBuffer.append(Format.asHexInBitsLength("-" + (outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x"),BinaryArithmetics.neg(immBitWidth,decodedImm),immBitWidth));} else {currentBuffer.append(Format.asHexInBitsLength((outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x"),decodedImm,immBitWidth - 1));}break;case 'u':currentBuffer.append(Format.asHexInBitsLength((outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x"),decodedImm,immBitWidth));break;case 'v':currentBuffer.append((outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x") + Format.asHex(0xFF - (0xFF & ((context.cpuState.pc - memRangeStart) / 4)),1));break;case 'x':decodedImm|=0x100;break;case 'y':c+=8;case 'z':currentBuffer.append(fmt_par);boolean first=true;if ((decodedImm & 0x100) != 0) {for (int i=7; i >= 0; i--) {if ((decodedImm & (1 << i)) != 0) {if (first) first=false; else currentBuffer.append(",");currentBuffer.append(FrCPUState.registerLabels[c + 7 - i]);}}} else {for (int i=0; i < 8; ++i) {if ((decodedImm & (1 << i)) != 0) {if (first) first=false; else currentBuffer.append(",");currentBuffer.append(FrCPUState.registerLabels[c + i]);}}}currentBuffer.append(fmt_ens);break;default :currentBuffer.append(formatChar);break;}}setOperandString(operandBuffer.toString());setCommentString(commentBuffer.toString());int r=FrCPUState.NOREG;for (char s : instruction.getAction().toCharArray()) {switch (s) {case 'A':r=FrCPUState.AC;break;case 'C':r=FrCPUState.CCR;break;case 'F':r=FrCPUState.FP;break;case 'P':r=FrCPUState.PS;break;case 'S':r=FrCPUState.SP;break;case 'i':r=decodedRiRsFs;break;case 'j':r=decodedRjRtFt;break;case 'w':if (updateRegisters) {context.cpuState.setRegisterUndefined(r);}break;case 'v':if (updateRegisters && context.cpuState.registerExists(r)) {context.cpuState.setRegisterDefined(r);context.cpuState.setReg(r,decodedImm);}break;case 'x':r=FrCPUState.NOREG;break;case 'E':case 'G':case 'H':if (updateRegisters) {if (context.cpuState.isRegisterDefined(decodedRjRtFt)) {final int addr=context.cpuState.getReg(decodedRjRtFt);if (context.memory.isMapped(addr)) {if (s == 'G') {if (context.memory.isMapped(addr + 3)) {context.cpuState.setRegisterDefined(decodedRiRsFs);context.cpuState.setReg(decodedRiRsFs,context.memory.loadInstruction32(addr));break;}} else if (s == 'H') {if (context.memory.isMapped(addr + 1)) {context.cpuState.setRegisterDefined(decodedRiRsFs);context.cpuState.setReg(decodedRiRsFs,context.memory.loadInstruction16(addr));break;}} else {context.cpuState.setRegisterDefined(decodedRiRsFs);context.cpuState.setReg(decodedRiRsFs,context.memory.loadInstruction8(addr));break;}}}context.cpuState.setRegisterUndefined(decodedRiRsFs);}break;default :System.err.println("bad action '" + s + "' in "+ instruction+ " at "+ Format.asHex(context.cpuState.pc,8));break;}}setDelaySlotType(context.getStoredDelaySlotType());context.setStoredDelaySlotType(instruction.getDelaySlotType());boolean newIsBreak=EnumSet.of(Instruction.FlowType.JMP,Instruction.FlowType.RET).contains(instruction.getFlowType());if (instruction.getDelaySlotType() == Instruction.DelaySlotType.NONE) {setMustInsertLineBreak(context.isLineBreakRequested() || newIsBreak);context.setLineBreakRequest(false);} else {setMustInsertLineBreak(false);context.setLineBreakRequest(newIsBreak);}}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  OMGraphicList tmpList=new OMGraphicList();  if (ga != null) {    ga.setTo(tmpList);  }  setGraphic(tmpList);}  }
class C{  public void addSteppable(Steppable steppable){  toBeAdded.add(steppable);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (generate_1: ");  result.append(generate_1);  result.append(')');  return result.toString();}  }
class C{  private void recalcViewbox(){  final Element root=plot.getRoot();  SVGUtil.setAtt(root,SVGConstants.SVG_WIDTH_ATTRIBUTE,"20cm");  SVGUtil.setAtt(root,SVGConstants.SVG_HEIGHT_ATTRIBUTE,SVGUtil.fmt(20 * plotmap.getHeight() / plotmap.getWidth()) + "cm");  String vb="0 0 " + SVGUtil.fmt(plotmap.getWidth()) + " "+ SVGUtil.fmt(plotmap.getHeight());  SVGUtil.setAtt(root,SVGConstants.SVG_VIEW_BOX_ATTRIBUTE,vb);}  }
class C{  public static Object invoke(String methodName,Object object,Object... args){  Method method;  Class<?> theClass;  Object target=null;  if (object instanceof String) {    try {      theClass=Class.forName((String)object);    } catch (    ClassNotFoundException e) {      throw new IllegalArgumentException(e);    }  } else   if (object instanceof Class<?>) {    theClass=(Class<?>)object;  } else {    theClass=object.getClass();    target=object;  }  method=resolveMethod(theClass,methodName,args);  if (!method.isAccessible()) {    method.setAccessible(true);  }  Object result;  try {    result=method.invoke(target,args);  } catch (  IllegalAccessException e) {    throw new IllegalArgumentException("cannot access method " + methodName + " of "+ object.getClass().getName());  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof RuntimeException) {      throw (RuntimeException)e.getCause();    }    throw new IllegalStateException(e.getCause());  }  return result;}  }
class C{  public static <S extends HasDrawHandlers & HasHandlers>void fire(S source,String ID){  if (TYPE != null) {    DrawEvent event=new DrawEvent(ID);    source.fireEvent(event);  }}  }
class C{  public XMLString toLowerCase(Locale locale){  return new XString(str().toLowerCase(locale));}  }
class C{  public void invDaubTrans(double coef[]){  final int N=coef.length;  int n;  for (n=4; n <= N; n<<=1) {    invTransform(coef,n);  }}  }
class C{  public static Range iterateRangeBounds(CategoryDataset dataset,boolean includeInterval){  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  int rowCount=dataset.getRowCount();  int columnCount=dataset.getColumnCount();  if (includeInterval && dataset instanceof IntervalCategoryDataset) {    IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;    Number value, lvalue, uvalue;    for (int row=0; row < rowCount; row++) {      for (int column=0; column < columnCount; column++) {        value=icd.getValue(row,column);        double v;        if ((value != null) && !Double.isNaN(v=value.doubleValue())) {          minimum=Math.min(v,minimum);          maximum=Math.max(v,maximum);        }        lvalue=icd.getStartValue(row,column);        if (lvalue != null && !Double.isNaN(v=lvalue.doubleValue())) {          minimum=Math.min(v,minimum);          maximum=Math.max(v,maximum);        }        uvalue=icd.getEndValue(row,column);        if (uvalue != null && !Double.isNaN(v=uvalue.doubleValue())) {          minimum=Math.min(v,minimum);          maximum=Math.max(v,maximum);        }      }    }  } else {    for (int row=0; row < rowCount; row++) {      for (int column=0; column < columnCount; column++) {        Number value=dataset.getValue(row,column);        if (value != null) {          double v=value.doubleValue();          if (!Double.isNaN(v)) {            minimum=Math.min(minimum,v);            maximum=Math.max(maximum,v);          }        }      }    }  }  if (minimum == Double.POSITIVE_INFINITY) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  public void removeOnceFromDamaged(final Unit damagedUnit){  m_damaged.remove(damagedUnit);}  }
class C{  @Override public void write(TextWriterStream out,String label,int[] v){  StringBuilder buf=new StringBuilder();  if (label != null) {    buf.append(label).append('=');  }  if (v != null) {    FormatUtil.formatTo(buf,v," ");  }  out.inlinePrintNoQuotes(buf.toString());}  }
class C{  public static String scriptPath(Module mod){  StringBuilder path=new StringBuilder(mod.getNameAsString().replace('.','/')).append('/');  if (!mod.isDefaultModule()) {    path.append(mod.getVersion()).append('/');  }  path.append(mod.getNameAsString());  if (!mod.isDefaultModule()) {    path.append('-').append(mod.getVersion());  }  return path.toString();}  }
class C{  public void newInstance(final Type type){  typeInsn(Opcodes.NEW,type);}  }
class C{  public void run(){  if (!isStarted.compareAndSet(false,true)) {    log.info("Attempting to start an already started job coordinator. ");    return;  }  if (isJmxEnabled) {    jmxServer=new JmxServer();    state.jmxUrl=jmxServer.getJmxUrl();    state.jmxTunnelingUrl=jmxServer.getTunnelingJmxUrl();  } else {    jmxServer=null;  }  try {    log.info("Starting Cluster Based Job Coordinator");    containerProcessManager.start();    boolean isInterrupted=false;    while (!containerProcessManager.shouldShutdown() && !isInterrupted) {      try {        Thread.sleep(jobCoordinatorSleepInterval);      } catch (      InterruptedException e) {        isInterrupted=true;        log.error("Interrupted in job coordinator loop {} ",e);        Thread.currentThread().interrupt();      }    }  } catch (  Throwable e) {    log.error("Exception thrown in the JobCoordinator loop {} ",e);    throw new SamzaException(e);  } finally {    onShutDown();  }}  }
class C{  public void testWriteEmptyIndexFieldAndDeleteWithPartitionAndTimeSeries() throws Exception {  EntityDefinition entityDefinition=EntityDefinitionManager.getEntityDefinitionByEntityClass(TestLogAPIEntity.class);  hbase.createTable(entityDefinition.getTable(),entityDefinition.getColumnFamily());  EntityDefinition ed=EntityDefinitionManager.getEntityDefinitionByEntityClass(TestLogAPIEntity.class);  if (ed == null) {    EntityDefinitionManager.registerEntity(TestLogAPIEntity.class);    ed=EntityDefinitionManager.getEntityDefinitionByEntityClass(TestLogAPIEntity.class);  }  String[] partitions=ed.getPartitions();  String[] newPart=new String[2];  newPart[0]="cluster";  newPart[1]="datacenter";  ed.setPartitions(newPart);  boolean isTimeSeries=ed.isTimeSeries();  ed.setTimeSeries(true);  long now=System.currentTimeMillis();  try {    List<TestLogAPIEntity> list=new ArrayList<TestLogAPIEntity>();    TestLogAPIEntity e=new TestLogAPIEntity();    e.setField1(1);    e.setField2(2);    e.setField3(3);    e.setField4(4L);    e.setField5(5.0);    e.setField6(5.0);    e.setField7("7");    e.setTags(new HashMap<String,String>());    e.getTags().put("cluster","test4UT");    e.getTags().put("datacenter","dc1");    e.setTimestamp(now);    list.add(e);    GenericEntityWriter writer=new GenericEntityWriter(ed.getService());    List<String> result=writer.write(list);    Assert.assertNotNull(result);    List<byte[]> indexRowkeys=new ArrayList<byte[]>();    IndexDefinition[] indexDefs=ed.getIndexes();    for (    IndexDefinition index : indexDefs) {      byte[] indexRowkey=index.generateIndexRowkey(e);      indexRowkeys.add(indexRowkey);    }    byte[][] qualifiers=new byte[9][];    qualifiers[0]="a".getBytes();    qualifiers[1]="b".getBytes();    qualifiers[2]="c".getBytes();    qualifiers[3]="d".getBytes();    qualifiers[4]="e".getBytes();    qualifiers[5]="f".getBytes();    qualifiers[6]="g".getBytes();    qualifiers[7]="cluster".getBytes();    qualifiers[8]="datacenter".getBytes();    UniqueIndexLogReader reader=new UniqueIndexLogReader(indexDefs[0],indexRowkeys,qualifiers,null);    reader.open();    InternalLog log=reader.read();    Assert.assertNotNull(log);    TaggedLogAPIEntity newEntity=HBaseInternalLogHelper.buildEntity(log,ed);    Assert.assertEquals(TestLogAPIEntity.class,newEntity.getClass());    TestLogAPIEntity e1=(TestLogAPIEntity)newEntity;    Assert.assertEquals(e.getField1(),e1.getField1());    Assert.assertEquals(e.getField2(),e1.getField2());    Assert.assertEquals(e.getField3(),e1.getField3());    Assert.assertEquals(e.getField4(),e1.getField4());    Assert.assertEquals(e.getField5(),e1.getField5(),0.001);    Assert.assertEquals(e.getField6(),e1.getField6());    Assert.assertEquals(e.getField7(),e1.getField7());    Assert.assertEquals("test4UT",e1.getTags().get("cluster"));    Assert.assertEquals("dc1",e1.getTags().get("datacenter"));    Assert.assertEquals(now,e1.getTimestamp());    log=reader.read();    Assert.assertNotNull(log);    newEntity=HBaseInternalLogHelper.buildEntity(log,ed);    Assert.assertEquals(TestLogAPIEntity.class,newEntity.getClass());    e1=(TestLogAPIEntity)newEntity;    Assert.assertEquals(e.getField1(),e1.getField1());    Assert.assertEquals(e.getField2(),e1.getField2());    Assert.assertEquals(e.getField3(),e1.getField3());    Assert.assertEquals(e.getField4(),e1.getField4());    Assert.assertEquals(e.getField5(),e1.getField5(),0.001);    Assert.assertEquals(e.getField6(),e1.getField6());    Assert.assertEquals(e.getField7(),e1.getField7());    Assert.assertEquals("test4UT",e1.getTags().get("cluster"));    Assert.assertEquals("dc1",e1.getTags().get("datacenter"));    Assert.assertEquals(now,e1.getTimestamp());    log=reader.read();    Assert.assertNull(log);    reader.close();    GenericDeleter deleter=new GenericDeleter(ed.getTable(),ed.getColumnFamily());    deleter.delete(list);    reader=new UniqueIndexLogReader(indexDefs[0],indexRowkeys,qualifiers,null);    reader.open();    log=reader.read();    Assert.assertNull(log);    reader.close();  }  finally {    ed.setPartitions(partitions);    ed.setTimeSeries(isTimeSeries);  }  hbase.deleteTable(entityDefinition.getTable());}  }
class C{  public static String response(final String cQuestion,final String cTitle,final String cDefault,final boolean bPassword,final String cLabel){  final BorderLayout layout=new BorderLayout();  layout.setHgap(5);  final JPanel panel=new JPanel(layout);  final JLabel question=new JLabel(cQuestion);  final JTextField field;  if (bPassword) {    field=new JPasswordField();  } else {    field=new JTextField();  }  if (cDefault != null) {    field.setText(cDefault);  }  final String title;  if (cTitle != null) {    title=cTitle;  } else {    title="Input";  }  panel.add(question,BorderLayout.NORTH);  if (cLabel != null) {    final JLabel label=new JLabel(cLabel);    panel.add(label,BorderLayout.WEST);  }  panel.add(field,BorderLayout.CENTER);  final String[] options={"Ok","Cancel"};  final int option=JOptionPane.showOptionDialog(null,panel,title,JOptionPane.NO_OPTION,JOptionPane.PLAIN_MESSAGE,null,options,options[0]);  if (option == 0) {    return field.getText();  } else {    return null;  }}  }
class C{  public static String toXml(Object root,String encoding){  Class clazz=Reflections.getUserClass(root);  return toXml(root,clazz,encoding);}  }
class C{  protected void startupModules(Collection<IFloodlightModule> moduleSet) throws FloodlightModuleException {  for (  IFloodlightModule m : moduleSet) {    if (logger.isDebugEnabled()) {      logger.debug("Starting " + m.getClass().getCanonicalName());    }    m.startUp(floodlightModuleContext);  }}  }
class C{  @Override public final void preTearDown() throws Exception {  Invoke.invokeInEveryVM(null);  Invoke.invokeInEveryVM(null);}  }
class C{  public ICalDate(DateTimeComponents date,boolean hasTime){  this(date.toDate(),date,hasTime);}  }
class C{  public void onShowMessageFromWXReq(WXMediaMessage msg){  if (msg != null && msg.mediaObject != null && (msg.mediaObject instanceof WXAppExtendObject)) {    WXAppExtendObject obj=(WXAppExtendObject)msg.mediaObject;    Toast.makeText(this,obj.extInfo,Toast.LENGTH_SHORT).show();  }}  }
class C{  public CacheClosedException(Throwable cause){  super(cause);}  }
class C{  public void initLongPressAction(){  mLongPressAction=new Action();}  }
class C{  protected boolean isUpdate(){  return this.operation == null ? this.action == UPDATE_ACTION : this.operation == EnumListenerEvent.AFTER_UPDATE;}  }
class C{  public void addListener(IMessageListener newListener){synchronized (listeners) {    listeners.add(newListener);  }}  }
class C{  protected void validateIndex(int index){  if (index < 0 || index > size) {    throw new StringIndexOutOfBoundsException(index);  }}  }
class C{  private String moveToFolder(final String file,final String folder){  final File source=new File(file);  final File destination=new File(folder + File.separator + source.getName());  Log.i(TAG,file + " stored in temp folder. Moving to " + destination.getAbsolutePath());  try {    FileUtils.moveFile(source,destination);  } catch (  final IOException e) {    Log.e(TAG,"I/O error while moving file " + e.getMessage(),e);  }  return destination.getAbsolutePath();}  }
class C{  @RequestMapping(value="/load/{treeId}/{analyType}/{analyDate}",produces="application/json; charset=UTF-8") @ResponseBody public String loadAnalysisResult(HttpServletRequest request,@PathVariable("treeId") String treeId,@PathVariable("analyType") String analyType,@PathVariable("analyDate") String analyDate){  JSONObject result=new JSONObject();  try {    CallChainTree callChainTree=analysisResultService.fetchAnalysisResult(treeId,analyType,analyDate);    result.put("code","200");    if (callChainTree != null) {      result.put("result",new Gson().toJson(callChainTree));    } else {      result.put("result","{}");    }  } catch (  Exception e) {    logger.error("Failed to load treeId[{}], anlysisType:[{}], anlyDate:[{}]",treeId,analyType,analyDate);    e.printStackTrace();    result.put("code","500");    result.put("message","Fatal error");  }  return result.toJSONString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean init(){  IObjectFileStorage<ApplicationConfig> appConfigStorage=new ApplicationConfigStorage();  newAppConfig=appConfigStorage.loadFromFolder(newReleaseFS.getDownloadFolder());  if (newAppConfig == null) {    setResultForError(ChcpError.LOADED_VERSION_OF_APPLICATION_CONFIG_NOT_FOUND);    return false;  }  IObjectFileStorage<ContentManifest> manifestStorage=new ContentManifestStorage();  ContentManifest oldManifest=manifestStorage.loadFromFolder(currentReleaseFS.getWwwFolder());  if (oldManifest == null) {    setResultForError(ChcpError.LOCAL_VERSION_OF_MANIFEST_NOT_FOUND);    return false;  }  ContentManifest newManifest=manifestStorage.loadFromFolder(newReleaseFS.getDownloadFolder());  if (newManifest == null) {    setResultForError(ChcpError.LOADED_VERSION_OF_MANIFEST_NOT_FOUND);    return false;  }  manifestDiff=oldManifest.calculateDifference(newManifest);  return true;}  }
class C{  public void clear(long startIndex,long endIndex){  assert startIndex >= 0 && startIndex < numBits : "startIndex=" + startIndex + ", numBits="+ numBits;  assert endIndex >= 0 && endIndex <= numBits : "endIndex=" + endIndex + ", numBits="+ numBits;  if (endIndex <= startIndex) {    return;  }  int startWord=(int)(startIndex >> 6);  int endWord=(int)((endIndex - 1) >> 6);  long startmask=-1L << startIndex;  long endmask=-1L >>> -endIndex;  startmask=~startmask;  endmask=~endmask;  if (startWord == endWord) {    bits[startWord]&=(startmask | endmask);    return;  }  bits[startWord]&=startmask;  Arrays.fill(bits,startWord + 1,endWord,0L);  bits[endWord]&=endmask;}  }
class C{  public Raster createChild(int x,int y,int width,int height,int x0,int y0,int[] bandList){  WritableRaster newRaster=createWritableChild(x,y,width,height,x0,y0,bandList);  return (Raster)newRaster;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public T name(String value){  return attr("name",value);}  }
class C{  private void finishFragment(Fragment comment){  diagram.extendLifelines(diagram.getConfiguration().getFragmentPadding());  comment.setBottom(diagram.getVerticalPosition());  diagram.extendLifelines(diagram.getConfiguration().getFragmentMargin());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.543 -0500",hash_original_method="1C98A9B62B655827C0439A8A5D392C10",hash_generated_method="9F147038D0E8ABB8C00272D61FE1F2AC") public void addFrame(Drawable frame,int duration){  mAnimationState.addFrame(frame,duration);  if (mCurFrame < 0) {    setFrame(0,true,false);  }}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  protected void flagToRemoveFromMaintenanceQueue(NodePortTuple npt){  if (toRemoveFromMaintenanceQueue.contains(npt) == false) {    toRemoveFromMaintenanceQueue.add(npt);  }}  }
class C{  private <T>void validate(List<ValidationRemark> remarks,TableDefinition<T> def,IndexInspector index,boolean throwError){  List<IndexDefinition> defIndexes=def.getIndexes(IndexType.STANDARD);  List<IndexInspector> dbIndexes=getIndexes(IndexType.STANDARD);  if (defIndexes.size() > dbIndexes.size()) {    remarks.add(warn(table,IndexType.STANDARD.name(),"More model indexes  than database indexes"));  } else   if (defIndexes.size() < dbIndexes.size()) {    remarks.add(warn(table,IndexType.STANDARD.name(),"Model class is missing indexes"));  }}  }
class C{  public Swarm() throws Exception {  this(Boolean.getBoolean(SwarmProperties.DEBUG_BOOTSTRAP));}  }
class C{  public static Typeface obtaintTypeface(Context context,int typefaceValue) throws IllegalArgumentException {  Typeface typeface=mTypefaces.get(typefaceValue);  if (typeface == null) {    typeface=createTypeface(context,typefaceValue);    mTypefaces.put(typefaceValue,typeface);  }  return typeface;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:58.290 -0500",hash_original_method="6620C9D65D7B9B8AED04F1E2286BE37D",hash_generated_method="745C8338A29F863D10814EC116A8F2BD") public FactoryConfigurationError(){  this.exception=null;}  }
class C{  private void orderTrees(DepGraph dg){  for (int i=0; i < numTreeRoots; i++) {    AbstractBURS_TreeNode n=treeRoots[i];    castNode(n.dg_node).setPredecessorCount(0);    initTreeRootNode(n,n.dg_node);  }  for (SpaceEffGraphNode node=dg.firstNode(); node != null; node=node.getNext()) {    SpaceEffGraphNode n_treeRoot=node.nextSorted;    for (SpaceEffGraphEdge in=node.firstInEdge(); in != null; in=in.getNextIn()) {      SpaceEffGraphNode source_treeRoot=in.fromNode().nextSorted;      if (source_treeRoot != n_treeRoot) {        castNode(n_treeRoot).incPredecessorCount();      }    }  }  if (DEBUG) {    for (int i=0; i < numTreeRoots; i++) {      AbstractBURS_TreeNode n=treeRoots[i];      VM.sysWrite(castNode(n.dg_node).getPredecessorCount() + ":" + n+ "\n");    }  }}  }
class C{  public SQLSyntaxErrorException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  void union(ModuleContext unionee){  Enumeration Enum=unionee.context.keys();  while (Enum.hasMoreElements()) {    String key=(String)Enum.nextElement();    this.bindIfNotBound(key,unionee.resolve(key));  }}  }
class C{  public boolean containsKey(int key){  return contains(key);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  private void loadWorkflow(Properties ctx,int AD_Workflow_ID,HttpSession sess){  MWorkflow wf=new MWorkflow(ctx,AD_Workflow_ID,null);  MWFNode[] nodes=wf.getNodes(true,Env.getContextAsInt(ctx,"#AD_Client_ID"));  MWFNode wfn=null;  ArrayList nodes_ID=new ArrayList();  for (int i=0; i < nodes.length; i++) {    wfn=nodes[i];    nodes_ID.add(new Integer(wfn.getAD_WF_Node_ID()));  }  int imageMap[][]=generateImageMap(nodes_ID);  sess.setAttribute(WORKFLOW,wf);  sess.setAttribute(NODES,nodes);  sess.setAttribute(NODES_ID,nodes_ID);  sess.setAttribute(IMAGE_MAP,imageMap);  sess.setAttribute(ACTIVE_NODE,new Integer(-999));}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < this.getSeriesCount(); i++) {    HeikinAshiSeries series=this.getSeries(i);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  private static void startGUI(String guiName,String[] args){  assert (guiName != null) : "guiName must be non-null";  assert (args != null) : "args must be non-null";  IMegaMekGUI mainGui=MegaMek.getGui(guiName);  if (mainGui == null) {    MegaMek.displayMessageAndExit(UNKNOWN_GUI_MESSAGE + guiName);  } else {    StringBuffer message=new StringBuffer("Starting GUI ");    message.append(guiName).append(". ");    MegaMek.dumpArgs(message,args);    MegaMek.displayMessage(message.toString());    mainGui.start(args);  }}  }
class C{  @Override public void insertBack(int x){  if (size == items.length) {    resize((int)(size * 1.01));  }  items[size]=x;  size=size + 1;}  }
class C{  public boolean forEachValue(TFloatProcedure procedure){  Object[] keys=_set;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public int readGolomb(final int b) throws IOException {  return readGolomb(b,Fast.mostSignificantBit(b));}  }
class C{  public String evaluationMeasureTipText(){  return "The measure used to evaluate the performance of attribute combinations " + "used in the decision table.";}  }
class C{  public static void intersection(int rrX,int rrY,int rrW,int rrH,int rtx1,int rty1,int rtw2,int rth2,Rectangle dest){  int tx1=rtx1;  int ty1=rty1;  int rx1=rrX;  int ry1=rrY;  int tx2=tx1;  tx2+=rtw2;  int ty2=ty1;  ty2+=rth2;  int rx2=rx1;  rx2+=rrW;  int ry2=ry1;  ry2+=rrH;  if (tx1 < rx1) {    tx1=rx1;  }  if (ty1 < ry1) {    ty1=ry1;  }  if (tx2 > rx2) {    tx2=rx2;  }  if (ty2 > ry2) {    ty2=ry2;  }  tx2-=tx1;  ty2-=ty1;  if (tx2 < Integer.MIN_VALUE) {    tx2=Integer.MIN_VALUE;  }  if (ty2 < Integer.MIN_VALUE) {    ty2=Integer.MIN_VALUE;  }  dest.x=tx1;  dest.y=ty1;  dest.size.setWidth(tx2);  dest.size.setHeight(ty2);}  }
class C{  @Override public void mulByTransform(Mat22 transform){  box.R.mulLocal(transform);}  }
class C{  private void update_m_Attributes(){  m_NumInstances=m_Train.numInstances();  m_InitFlag=ON;}  }
class C{  public static void start(int port,Map<Parameter,String> parameters) throws Exception {  final Server server=new Server(port);  final ContextHandlerCollection contexts=new ContextHandlerCollection();  final ServletContextHandler context=new ServletContextHandler(contexts,"/",ServletContextHandler.SESSIONS);  final Filter monitoringFilter=new net.bull.javamelody.MonitoringFilter();  final FilterHolder filterHolder=new FilterHolder(monitoringFilter);  if (parameters != null) {    for (    final Map.Entry<Parameter,String> entry : parameters.entrySet()) {      final net.bull.javamelody.Parameter parameter=entry.getKey();      final String value=entry.getValue();      filterHolder.setInitParameter(parameter.getCode(),value);    }  }  context.addFilter(filterHolder,"/*",EnumSet.of(DispatcherType.INCLUDE,DispatcherType.REQUEST));  final RequestLogHandler requestLogHandler=new RequestLogHandler();  contexts.addHandler(requestLogHandler);  final HandlerCollection handlers=new HandlerCollection();  handlers.setHandlers(new Handler[]{contexts});  server.setHandler(handlers);  server.start();}  }
class C{  void incrementSelection(){  if (getSelectedIndex() == getModel().getSize() - 1) {    SearchField.this.setText(currentText);    clearSelection();  } else {    int selectedIndex=getSelectedIndex() + 1;    setSelectedIndex(selectedIndex);    ensureIndexIsVisible(selectedIndex);    SearchField.this.setText((String)getSelectedValue());  }}  }
class C{  public Value(Shape outline,Rectangle2D gmB){  this.outline=outline;  this.outlineBounds=outline.getBounds2D();  this.gmB=gmB;}  }
class C{  @Override public IResource[] roots(){  final IProject[] allProjects=ResourcesPlugin.getWorkspace().getRoot().getProjects();  final List<IProject> configuredProjects=new ArrayList<IProject>();  for (int i=0; i < allProjects.length; i++) {    if (allProjects[i].isOpen() == false) {      continue;    }    try {      final String providerName=allProjects[i].getPersistentProperty(TeamUtils.PROVIDER_PROP_KEY);      if (providerName != null && providerName.equals(TFSRepositoryProvider.PROVIDER_ID)) {        configuredProjects.add(allProjects[i]);      }    } catch (    final CoreException e) {      log.warn(MessageFormat.format("Could not determine provider for project {0}",allProjects[i].getName()),e);    }  }  return configuredProjects.toArray(new IProject[configuredProjects.size()]);}  }
class C{  public static WsAgentStateEvent createWsAgentStartedEvent(){  return new WsAgentStateEvent(WsAgentState.STARTED);}  }
class C{  public synchronized void writePage(int pageId,Data data){  if (pageId <= 0) {    DbException.throwInternalError("write to page " + pageId);  }  byte[] bytes=data.getBytes();  if (SysProperties.CHECK) {    boolean shouldBeFreeList=(pageId - PAGE_ID_FREE_LIST_ROOT) % freeListPagesPerList == 0;    boolean isFreeList=bytes[0] == Page.TYPE_FREE_LIST;    if (bytes[0] != 0 && shouldBeFreeList != isFreeList) {      throw DbException.throwInternalError();    }  }  checksumSet(bytes,pageId);  file.seek((long)pageId << pageSizeShift);  file.write(bytes,0,pageSize);  writeCount++;}  }
class C{  public FilterScorer(Scorer in){  super(in.weight);  this.in=in;}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  public BillingException(String message){  super(message);  init();}  }
class C{  void change(){  if (this.updatesAreLocked) {    return;  }  sortDefault();  pollObserver.setChanged();  pollObserver.notifyObservers(this);  refresh();}  }
class C{  @Override public double execute(double in1,double in2){  return (in1 != in2 ? 1.0 : 0.0);}  }
class C{  protected void isCDATASectionWellFormed(CDATASection node){  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_CDATA,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  private Database buildDerivatorDB(Relation<ParameterizationFunction> relation,CASHInterval interval){  DBIDs ids=interval.getIDs();  ProxyDatabase proxy=new ProxyDatabase(ids);  int dim=dimensionality(relation);  SimpleTypeInformation<DoubleVector> type=new VectorFieldTypeInformation<>(DoubleVector.FACTORY,dim);  WritableDataStore<DoubleVector> prep=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_HOT,DoubleVector.class);  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    prep.put(iter,DoubleVector.wrap(relation.get(iter).getColumnVector()));  }  if (LOG.isDebugging()) {    LOG.debugFine("db fuer derivator : " + ids.size());  }  MaterializedRelation<DoubleVector> prel=new MaterializedRelation<>(type,ids,null,prep);  proxy.addRelation(prel);  return proxy;}  }
class C{  private void drawCaret(final Graphics g){  if (!isEnabled()) {    return;  }  if ((getCurrentOffset() < getFirstVisibleByte()) || (getCurrentColumn() > (getFirstVisibleByte() + getMaximumVisibleBytes()))) {    return;  }  final int characterSize=getCharacterWidth(g);  if (m_activeView == Views.HEX_VIEW) {    drawCaretHexWindow(g,characterSize,m_rowHeight);  } else {    drawCaretAsciiWindow(g,characterSize,m_rowHeight);  }}  }
class C{  public boolean hasTransactions(){  return !this.transactions.isEmpty();}  }
class C{  @Ignore("Bug51491") @Test public void testParallelGatewaySenderForDistributedRegion() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    createCacheInVMs(lnPort,vm4,vm5);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);  } catch (  Exception e) {    Assert.fail("Caught Exception",e);  }}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  public CallSpec<Void,HttpError> deleteCommentOfPost(String commentId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/groups/forums/posts/comments/{comment_id}",false).responseAs(Void.class).pathParam("comment_id",commentId).build();}  }
class C{  public void close() throws IOException {  if (this.output != null) {    this.output.flush();    this.output.close();  }}  }
class C{  private boolean genMagic(MethodReference m){  if (BaselineMagic.generateMagic(asm,m,method,fp2spOffset(NO_SLOT))) {    return true;  } else   if (m.isSysCall()) {    TypeReference[] args=m.getParameterTypes();    TypeReference rtype=m.getReturnType();    Offset offsetToLastArg=THREE_SLOTS;    Offset offsetToFirstArg=offsetToLastArg.plus((m.getParameterWords() - 1) << LG_WORDSIZE);    boolean[] inRegister=VM.BuildFor32Addr ? null : new boolean[args.length];    int paramBytes=0;    asm.emitPUSH_Reg(EBX);    asm.emitPUSH_Reg(ESI);    asm.emitPUSH_Reg(EDI);    int gpRegistersInUse=0;    int fpRegistersInUse=0;    Offset offsetToJavaArg=offsetToFirstArg;    if (VM.BuildFor64Addr) {      for (int i=1; i < args.length; i++) {        TypeReference arg=args[i];        if (arg.isFloatType()) {          if (fpRegistersInUse < NATIVE_PARAMETER_FPRS.length) {            inRegister[i]=true;            offsetToJavaArg=offsetToJavaArg.minus(WORDSIZE);            asm.emitMOVSS_Reg_RegDisp((XMM)NATIVE_PARAMETER_FPRS[fpRegistersInUse],SP,offsetToJavaArg);            fpRegistersInUse++;          }        } else         if (arg.isDoubleType()) {          if (fpRegistersInUse < NATIVE_PARAMETER_FPRS.length) {            inRegister[i]=true;            offsetToJavaArg=offsetToJavaArg.minus(2 * WORDSIZE);            asm.emitMOVSD_Reg_RegDisp((XMM)NATIVE_PARAMETER_FPRS[fpRegistersInUse],SP,offsetToJavaArg);            fpRegistersInUse++;          }        } else         if (arg.isLongType()) {          if (gpRegistersInUse < NATIVE_PARAMETER_GPRS.length) {            inRegister[i]=true;            offsetToJavaArg=offsetToJavaArg.minus(2 * WORDSIZE);            asm.emitMOV_Reg_RegDisp_Quad(NATIVE_PARAMETER_GPRS[gpRegistersInUse],SP,offsetToJavaArg);            gpRegistersInUse++;          }        } else         if (arg.isWordLikeType() || arg.isReferenceType()) {          if (gpRegistersInUse < NATIVE_PARAMETER_GPRS.length) {            inRegister[i]=true;            offsetToJavaArg=offsetToJavaArg.minus(WORDSIZE);            asm.emitMOV_Reg_RegDisp_Quad(NATIVE_PARAMETER_GPRS[gpRegistersInUse],SP,offsetToJavaArg);            gpRegistersInUse++;          }        } else {          if (gpRegistersInUse < NATIVE_PARAMETER_GPRS.length) {            inRegister[i]=true;            offsetToJavaArg=offsetToJavaArg.minus(WORDSIZE);            asm.emitMOV_Reg_RegDisp(NATIVE_PARAMETER_GPRS[gpRegistersInUse],SP,offsetToJavaArg);            gpRegistersInUse++;          }        }      }    }    ForwardReference dontRealignStack=null;    int argsToPush=0;    if (VM.BuildFor64Addr) {      for (int i=args.length - 1; i >= 1; i--) {        if (!inRegister[i]) {          TypeReference arg=args[i];          if (arg.isLongType() || arg.isDoubleType()) {            argsToPush+=2;          } else {            argsToPush++;          }        }      }      asm.emitTEST_Reg_Imm(SP,0x8);      if ((argsToPush & 1) != 0) {        dontRealignStack=asm.forwardJcc(NE);      } else {        dontRealignStack=asm.forwardJcc(EQ);      }    }    ForwardReference afterCalls=null;    for (int j=VM.BuildFor32Addr ? 1 : 0; j < 2; j++) {      if (j == 0) {        adjustStack(-WORDSIZE,true);        offsetToFirstArg=offsetToFirstArg.plus(WORDSIZE);        offsetToLastArg=offsetToLastArg.plus(WORDSIZE);      } else {        if (dontRealignStack != null)         dontRealignStack.resolve(asm);      }      offsetToJavaArg=offsetToLastArg;      for (int i=args.length - 1; i >= 1; i--) {        TypeReference arg=args[i];        if (VM.BuildFor32Addr) {          if (arg.isLongType() || arg.isDoubleType()) {            asm.emitPUSH_RegDisp(SP,offsetToJavaArg.plus(WORDSIZE));            asm.emitPUSH_RegDisp(SP,offsetToJavaArg.plus(WORDSIZE));            offsetToJavaArg=offsetToJavaArg.plus(4 * WORDSIZE);            offsetToFirstArg=offsetToFirstArg.plus(2 * WORDSIZE);            offsetToLastArg=offsetToLastArg.plus(2 * WORDSIZE);            paramBytes+=2 * WORDSIZE;          } else {            asm.emitPUSH_RegDisp(SP,offsetToJavaArg);            offsetToJavaArg=offsetToJavaArg.plus(2 * WORDSIZE);            offsetToFirstArg=offsetToFirstArg.plus(WORDSIZE);            offsetToLastArg=offsetToLastArg.plus(WORDSIZE);            paramBytes+=WORDSIZE;          }        } else {          if (!inRegister[i]) {            if (arg.isLongType() || arg.isDoubleType()) {              adjustStack(-WORDSIZE,true);              asm.emitPUSH_RegDisp(SP,offsetToJavaArg.plus(WORDSIZE));              offsetToJavaArg=offsetToJavaArg.plus(4 * WORDSIZE);              offsetToFirstArg=offsetToFirstArg.plus(2 * WORDSIZE);              offsetToLastArg=offsetToLastArg.plus(2 * WORDSIZE);              paramBytes+=2 * WORDSIZE;            } else {              asm.emitPUSH_RegDisp(SP,offsetToJavaArg);              offsetToJavaArg=offsetToJavaArg.plus(2 * WORDSIZE);              offsetToFirstArg=offsetToFirstArg.plus(WORDSIZE);              offsetToLastArg=offsetToLastArg.plus(WORDSIZE);              paramBytes+=WORDSIZE;            }          } else {            if (arg.isLongType() || arg.isDoubleType()) {              offsetToJavaArg=offsetToJavaArg.plus(2 * WORDSIZE);            } else {              offsetToJavaArg=offsetToJavaArg.plus(WORDSIZE);            }          }        }      }      if (VM.VerifyAssertions)       VM._assert(offsetToFirstArg.EQ(offsetToJavaArg));      if (VM.BuildFor32Addr) {        asm.emitMOV_Reg_RegDisp(S0,SP,offsetToFirstArg);        asm.emitCALL_Reg(S0);      } else {        asm.emitMOV_Reg_RegDisp_Quad(T0,SP,offsetToFirstArg);        asm.emitCALL_Reg(T0);      }      if (j == 0) {        offsetToFirstArg=offsetToFirstArg.minus(WORDSIZE);        offsetToLastArg=offsetToLastArg.minus(WORDSIZE);        adjustStack(paramBytes + WORDSIZE,true);        afterCalls=asm.forwardJMP();      } else {        adjustStack(paramBytes,true);      }    }    if (afterCalls != null)     afterCalls.resolve(asm);    asm.emitPOP_Reg(EDI);    asm.emitPOP_Reg(ESI);    asm.emitPOP_Reg(EBX);    adjustStack(m.getParameterWords() << LG_WORDSIZE,true);    if (rtype.isLongType()) {      if (VM.BuildFor32Addr) {        asm.emitPUSH_Reg(T1);        asm.emitPUSH_Reg(T0);      } else {        adjustStack(-WORDSIZE,true);        asm.emitPUSH_Reg(T0);      }    } else     if (rtype.isDoubleType()) {      adjustStack(-2 * WORDSIZE,true);      if (VM.BuildFor32Addr) {        asm.emitFSTP_RegInd_Reg_Quad(SP,FP0);      } else {        asm.emitMOVSD_RegInd_Reg(SP,XMM0);      }    } else     if (rtype.isFloatType()) {      adjustStack(-WORDSIZE,true);      if (VM.BuildFor32Addr) {        asm.emitFSTP_RegInd_Reg(SP,FP0);      } else {        asm.emitMOVSS_RegInd_Reg(SP,XMM0);      }    } else     if (!rtype.isVoidType()) {      asm.emitPUSH_Reg(T0);    }    return true;  } else {    return false;  }}  }
class C{  public void tokenizeLines(){  tokenizeLines(0,getDefaultRootElement().getElementCount());}  }
class C{  private void cleanElementUI(HTMLElement element){  element.clearAssociatedComponents();  int children=element.getNumChildren();  for (int i=0; i < children; i++) {    HTMLElement child=(HTMLElement)element.getChildAt(i);    cleanElementUI(child);  }}  }
class C{  public UrlModuleSourceProvider(Iterable<URI> privilegedUris,Iterable<URI> fallbackUris){  this(privilegedUris,fallbackUris,new DefaultUrlConnectionExpiryCalculator(),null);}  }
class C{  protected void addAction(@NotNull RunnerAction action){  actions.add(action);  action.setListener(this);}  }
class C{  public EventPropertyRendererContext copy(){  EventPropertyRendererContext copy=new EventPropertyRendererContext(this.getEventType(),this.isJsonFormatted());  copy.setMappedPropertyKey(this.getMappedPropertyKey());  copy.setIndexedPropertyIndex(this.getIndexedPropertyIndex());  copy.setDefaultRenderer(this.getDefaultRenderer());  copy.setPropertyName(this.getPropertyName());  copy.setPropertyValue(this.getPropertyValue());  return copy;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isAsyncConflationEnabled(){  return asyncConflationEnabled;}  }
class C{  public Connection(final SessionTicket sessionTicket){  if (sessionTicket == null) {    throw new NullPointerException("session ticket must not be null");  }  this.ticket=sessionTicket;}  }
class C{  private void createPhotonMapTextures(){  IntBuffer textures=BufferUtils.createIntBuffer(photonMapTextures.length);  glGenTextures(textures);  for (int i=0; i < photonMapTextures.length; i++) {    TextureInfo info=new TextureInfo();    info.openGlHandle=textures.get(i);    Vector3f min=boxes[2 * i + 0];    Vector3f max=boxes[2 * i + 1];    float maxExtent=Math.max(Math.max(max.x - min.x,max.y - min.y),max.z - min.z);    int texSize=(int)(maxExtent * texelsPerUnit);    info.textureWidth=texSize;    info.textureHeight=texSize;    glBindTexture(GL_TEXTURE_CUBE_MAP,info.openGlHandle);    glTexStorage2D(GL_TEXTURE_CUBE_MAP,1,GL_RG16F,texSize,texSize);    glBindTexture(GL_TEXTURE_CUBE_MAP,0);    info.bindlessImageHandle=ARBBindlessTexture.glGetImageHandleARB(info.openGlHandle,0,true,0,GL_RG16F);    info.bindlessTextureAndSamplerHandle=ARBBindlessTexture.glGetTextureSamplerHandleARB(info.openGlHandle,sampler);    ARBBindlessTexture.glMakeImageHandleResidentARB(info.bindlessImageHandle,GL_READ_WRITE);    ARBBindlessTexture.glMakeTextureHandleResidentARB(info.bindlessTextureAndSamplerHandle);    photonMapTextures[i]=info;  }  clearPhotonMapTextures();  updateImageHandlesUbo();  updateSamplerHandlesUbo();}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addPreMessageReceivedEventListener(PreMessageReceivedEventListener listener){  addPreMessageReceivedEventListener(Threading.USER_THREAD,listener);}  }
class C{  private byte identifyErrorByteInSecondColumn(int i){  iv[i]=(byte)(errorBytes.get(0) ^ 43);  CBCOracleRequest req=new CBCOracleRequest(iv,c1);  OracleResponse resp=m_Oracle.queryOracle(req);  if (resp.getResult() == OracleResponse.Result.VALID) {    return 38;  } else {    return 60;  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void begin(){  pending1=false;  pending2=false;  writeState=true;  texSrc=texture1;  bufSrc=buffer1;  texResult=texture2;  bufResult=buffer2;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void ignorableWhitespace(char[] text,int start,int len) throws SAXException {  if (curHandler != null && curHandler.innerXml != null && (curHandler.mixedContent || unrecognizedElements > 0)) {    try {      curHandler.innerXml.writeUnescaped(new String(text,start,len));    } catch (    IOException e) {      throw new SAXException(e);    }  }}  }
class C{  void requestFocus(Component cmp){  if (cmp.isFocusable() && contains(cmp)) {    scrollComponentToVisible(cmp);    setFocused(cmp);  }}  }
class C{  public void paintTextAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public synchronized void sleepUntil(long timeToWakeFromPhoneBoot){  writeDebug("sleep until " + new Date(System.currentTimeMillis() + timeToWakeFromPhoneBoot - SystemClock.elapsedRealtime()));  if (wakeLock.isHeld()) {    writeDebug("releasing wake lock for sleep");    wakeLock.release();  }  alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,timeToWakeFromPhoneBoot,sender);}  }
class C{  @Override public int length(){  return mArray.length;}  }
class C{  private static void log2File(LEVEL level,String tag,String msg,Throwable tr){  if (generator == null) {    generator=new FilePathGenerator.DefaultFilePathGenerator("","","");  }  if (formatter == null) {    formatter=new LogFormatter.EclipseFormatter();  }  boolean isFilter=false;  if (filters != null) {    for (    LogFilter f : filters) {      if (f.filter(level,tag,msg)) {        isFilter=true;        break;      }    }  }  if (!isFilter && !TextUtils.isEmpty(generator.getPath())) {    Log2File.log2file(generator.getPath(),formatter.format(level,tag,msg,tr));  }}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  commandBox.mouseClicked(par1,par2,par3);}  }
class C{  protected void paintComponent(Graphics g){  if (textArea == null) {    return;  }  visibleRect=g.getClipBounds(visibleRect);  if (visibleRect == null) {    visibleRect=getVisibleRect();  }  if (visibleRect == null) {    return;  }  Color bg=getBackground();  if (getGutter() != null) {    bg=getGutter().getBackground();  }  g.setColor(bg);  g.fillRect(0,visibleRect.y,cellWidth,visibleRect.height);  g.setFont(getFont());  Document doc=textArea.getDocument();  Element root=doc.getDefaultRootElement();  if (textArea.getLineWrap()) {    paintWrappedLineNumbers(g,visibleRect);    return;  }  int topLine=visibleRect.y / cellHeight;  int bottomLine=Math.min(topLine + visibleRect.height / cellHeight + 1,root.getElementCount());  int actualTopY=topLine * cellHeight;  textAreaInsets=textArea.getInsets(textAreaInsets);  actualTopY+=textAreaInsets.top;  int y=actualTopY + ascent;  if (textArea.getHighlightCurrentLine() && currentLine >= topLine && currentLine <= bottomLine) {    g.setColor(textArea.getCurrentLineHighlightColor());    g.fillRect(0,actualTopY + (currentLine - topLine) * cellHeight,cellWidth,cellHeight);  }  g.setColor(getForeground());  boolean ltr=getComponentOrientation().isLeftToRight();  if (ltr) {    FontMetrics metrics=g.getFontMetrics();    int rhs=getWidth() - RHS_BORDER_WIDTH;    for (int i=topLine + 1; i <= bottomLine; i++) {      int index=i + getLineNumberingStartIndex() - 1;      String number=Integer.toString(index);      int width=metrics.stringWidth(number);      g.drawString(number,rhs - width,y);      y+=cellHeight;    }  } else {    for (int i=topLine + 1; i <= bottomLine; i++) {      int index=i + getLineNumberingStartIndex() - 1;      String number=Integer.toString(index);      g.drawString(number,RHS_BORDER_WIDTH,y);      y+=cellHeight;    }  }}  }
class C{  public PendingInstallShortcutInfo(Intent data,Context context){  this.data=data;  mContext=context;  launchIntent=data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);  label=data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);  user=UserHandleCompat.myUserHandle();  activityInfo=null;}  }
class C{  public InputEventConsistencyVerifier(Object caller,int flags,String logTag){  this.mCaller=caller;  this.mFlags=flags;  this.mLogTag=(logTag != null) ? logTag : "InputEventConsistencyVerifier";}  }
class C{  @SuppressWarnings("unchecked") public E replaceTopElement(E e){  E oldroot=(E)queue[0];  heapifyDown(0,e);  heapModified();  return oldroot;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.406 -0400",hash_original_method="AB85C83155191F24DD5BC1E499AE0545",hash_generated_method="CEB4A3A30D6617C5F33591A887E0825C") public static double swapDouble(double value){  return Double.longBitsToDouble(swapLong(Double.doubleToLongBits(value)));}  }
class C{  public final Mat22 mul(final Mat22 R){  final Mat22 C=new Mat22();  C.ex.x=ex.x * R.ex.x + ey.x * R.ex.y;  C.ex.y=ex.y * R.ex.x + ey.y * R.ex.y;  C.ey.x=ex.x * R.ey.x + ey.x * R.ey.y;  C.ey.y=ex.y * R.ey.x + ey.y * R.ey.y;  return C;}  }
class C{  public Matrix4x3d billboardCylindrical(Vector3dc objPos,Vector3dc targetPos,Vector3dc up){  double dirX=targetPos.x() - objPos.x();  double dirY=targetPos.y() - objPos.y();  double dirZ=targetPos.z() - objPos.z();  double leftX=up.y() * dirZ - up.z() * dirY;  double leftY=up.z() * dirX - up.x() * dirZ;  double leftZ=up.x() * dirY - up.y() * dirX;  double invLeftLen=1.0 / Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);  leftX*=invLeftLen;  leftY*=invLeftLen;  leftZ*=invLeftLen;  dirX=leftY * up.z() - leftZ * up.y();  dirY=leftZ * up.x() - leftX * up.z();  dirZ=leftX * up.y() - leftY * up.x();  double invDirLen=1.0 / Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);  dirX*=invDirLen;  dirY*=invDirLen;  dirZ*=invDirLen;  m00=leftX;  m01=leftY;  m02=leftZ;  m10=up.x();  m11=up.y();  m12=up.z();  m20=dirX;  m21=dirY;  m22=dirZ;  m30=objPos.x();  m31=objPos.y();  m32=objPos.z();  properties=0;  return this;}  }
class C{  protected SecretKey engineGenerateSecret(KeySpec keySpec) throws InvalidKeySpecException {  try {    if (keySpec instanceof DESKeySpec) {      return new DESKey(((DESKeySpec)keySpec).getKey());    }    if (keySpec instanceof SecretKeySpec) {      return new DESKey(((SecretKeySpec)keySpec).getEncoded());    }    throw new InvalidKeySpecException("Inappropriate key specification");  } catch (  InvalidKeyException e) {    throw new InvalidKeySpecException(e.getMessage());  }}  }
class C{  private void doReserveDOI(DOI doi,Resource resource) throws DoiException {  Preconditions.checkNotNull(registrationManager.getDoiService());  DataCiteMetadata dataCiteMetadata=DataCiteMetadataBuilder.createDataCiteMetadata(doi,resource);  registrationManager.getDoiService().reserve(doi,dataCiteMetadata);  resource.setDoi(doi);  resource.setDoiOrganisationKey(registrationManager.findPrimaryDoiAgencyAccount().getKey());  resource.setIdentifierStatus(IdentifierStatus.PUBLIC_PENDING_PUBLICATION);  resource.updateAlternateIdentifierForDOI();  resource.updateCitationIdentifierForDOI();  saveResource();}  }
class C{  public void addProg(Class<?> demoClass){  JMenuItem item=addDemoToMenu(progsMenu,demoClass);  item.addActionListener(new ProgStarter(demoClass));}  }
class C{  public void sendHeader() throws IOException {  if (this.socket != null) {synchronized (getCommBuffer()) {      getHeaderBytesForWrite();      flushBuffer();    }    this.currentPart=0;    this.headerSent=true;  } else {    throw new IOException(LocalizedStrings.ChunkedMessage_DEAD_CONNECTION.toLocalizedString());  }}  }
class C{  public static Result restApplicationSummariesForUser(String username){  JsonArray applicationSummaryArray=new JsonArray();  List<AppResult> results=null;  if (username == null || username.isEmpty()) {    results=getApplications(MAX_APPLICATIONS);  } else {    results=getApplications(username,MAX_APPLICATIONS);  }  for (  AppResult application : results) {    JsonObject applicationObject=new JsonObject();    JsonArray heuristicsArray=new JsonArray();    List<AppHeuristicResult> appHeuristicResult=application.yarnAppHeuristicResults;    for (    AppHeuristicResult heuristic : appHeuristicResult) {      JsonObject heuristicObject=new JsonObject();      heuristicObject.addProperty(JsonKeys.NAME,heuristic.heuristicName);      heuristicObject.addProperty(JsonKeys.SEVERITY,heuristic.severity.getText());      heuristicsArray.add(heuristicObject);    }    applicationObject.addProperty(JsonKeys.ID,application.id);    applicationObject.addProperty(JsonKeys.USERNAME,application.username);    applicationObject.addProperty(JsonKeys.JOB_NAME,application.jobName);    applicationObject.addProperty(JsonKeys.JOB_TYPE,application.jobType);    applicationObject.addProperty(JsonKeys.START_TIME,application.startTime);    applicationObject.addProperty(JsonKeys.FINISH_TIME,application.finishTime);    applicationObject.addProperty(JsonKeys.RUNTIME,application.finishTime - application.startTime);    applicationObject.addProperty(JsonKeys.WAITTIME,application.totalDelay);    applicationObject.addProperty(JsonKeys.RESOURCE_USED,application.resourceUsed);    applicationObject.addProperty(JsonKeys.RESOURCE_WASTED,application.resourceWasted);    applicationObject.addProperty(JsonKeys.QUEUE,application.queueName);    applicationObject.addProperty(JsonKeys.SEVERITY,application.severity.getText());    applicationObject.add(JsonKeys.HEURISTICS_SUMMARY,heuristicsArray);    applicationSummaryArray.add(applicationObject);  }  JsonArray sortedApplicationSummaryArray=getSortedJsonArrayByFinishTime(applicationSummaryArray);  JsonObject parent=new JsonObject();  parent.add(JsonKeys.APPLICATION_SUMMARIES,sortedApplicationSummaryArray);  return ok(new Gson().toJson(parent));}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public void writeSecurityHeader(SipRequest request){}  }
class C{  public boolean visitNode(TextEdit edit){  return true;}  }
class C{  public static List<String> parseStatusResponse(InputStream result,String[] xpathPatterns) throws SAXException, IOException, ParserConfigurationException, XPathExpressionException {  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();  Document doc=dBuilder.parse(result);  List<String> data=new ArrayList<String>();  if (doc == null) {    return data;  }  XPathFactory xPathfactory=XPathFactory.newInstance();  XPath xpath=xPathfactory.newXPath();  for (  String pattern : xpathPatterns) {    data.add(xpath.compile(pattern).evaluate(doc));  }  return data;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.754 -0500",hash_original_method="7D87091EC31B409C33B787AE3F2DC647",hash_generated_method="F0F8D8EC0C5D8FA9E7582C7E60A1D793") @Override protected void finalize() throws Throwable {  try {    if (guard != null) {      guard.warnIfOpen();    }    close();  }  finally {    super.finalize();  }}  }
class C{  @SuppressWarnings("unused") private PgnParseOutput(){}  }
class C{  public void clear(){  actions.clear();  timestamps.clear();}  }
class C{  public BEInternalFrameUI(JInternalFrame b){  super(b);}  }
class C{  public DataBufferDouble(int size){  super(STABLE,TYPE_DOUBLE,size);  data=new double[size];  bankdata=new double[1][];  bankdata[0]=data;}  }
class C{  public static final Integer extractIplIdentityHostDevice(LocoNetMessage m){  return m.getElement(5);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:35.563 -0500",hash_original_method="69484680A1706F6AEC1DEA5335B0CC8C",hash_generated_method="2D6AFF60B7D25965A7A6D862C14145CD") public FaceDetector(int width,int height,int maxFaces){  if (!sInitialized) {    return;  }  fft_initialize(width,height,maxFaces);  mWidth=width;  mHeight=height;  mMaxFaces=maxFaces;  mBWBuffer=new byte[width * height];}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  @DSComment("not sensitive, memory stream") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:42.627 -0500",hash_original_method="60B3E89517A58F980CEC13EE6BBDFCDA",hash_generated_method="F83D86E173E2EE8747B4A5BEAFCB1DC1") @Override public synchronized int available(){  return count - pos;}  }
class C{  public static <S extends HasDragRepositionMoveHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragRepositionMoveEvent event=new DragRepositionMoveEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void saveSelection(){  genForm.saveSelection(miniTable);}  }
class C{  public RC532Engine(){  _noRounds=12;  _S=null;}  }
class C{  public UnchangeableAllowingOnBehalfActingException(Object[] params){  super(params);}  }
class C{  public static Color deriveColorHSB(Color base,float dH,float dS,float dB){  float hsb[]=Color.RGBtoHSB(base.getRed(),base.getGreen(),base.getBlue(),null);  hsb[0]+=dH;  hsb[1]+=dS;  hsb[2]+=dB;  return Color.getHSBColor(hsb[0] < 0 ? 0 : (hsb[0] > 1 ? 1 : hsb[0]),hsb[1] < 0 ? 0 : (hsb[1] > 1 ? 1 : hsb[1]),hsb[2] < 0 ? 0 : (hsb[2] > 1 ? 1 : hsb[2]));}  }
class C{  public DBGroup loadMemberGroup(Dao<DBGroup,Integer> dao) throws SQLException {  dao.refresh(memberGroup);  return memberGroup;}  }
class C{  static public void addEdgeResizeHandles(Figure f,Collection<Handle> handles){  if (f.isTransformable()) {    handles.add(south(f));    handles.add(north(f));    handles.add(east(f));    handles.add(west(f));  }}  }
class C{  public GsonRequest(String url,Class<T> clazz,Response.Listener<T> listener,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  this.clazz=clazz;  this.listener=listener;}  }
class C{  private String processValidations(Variables variables,String uniqueName,BaseResponse reqResponse){  String testStepResult=TankConstants.HTTP_CASE_PASS;  List<ValidationData> headerValidation=filterPhase(RequestDataPhase.PRE_REQUEST,response.getValidation().getHeaderValidation());  List<ValidationData> bodyValidation=filterPhase(RequestDataPhase.PRE_REQUEST,response.getValidation().getBodyValidation());  List<ValidationData> cookieValidation=filterPhase(RequestDataPhase.PRE_REQUEST,response.getValidation().getCookieValidation());  if (!headerValidation.isEmpty() || !bodyValidation.isEmpty() || !cookieValidation.isEmpty()) {    String testCaseResult=TankConstants.HTTP_CASE_PASS;    if (reqResponse.getHttpCode() == -1) {      LOG.error(LogUtil.getLogMessage("Failure due to IO Error."));      return TankConstants.HTTP_CASE_FAIL;    }    for (    ValidationData item : headerValidation) {      ValidationData original=item.copy();      item=item.copy();      if (ValidationUtil.isVariable(item.getValue()) && variables.variableExists(item.getValue())) {        item.setValue(variables.getVariable(item.getValue()));      } else       if (ValidationUtil.isFunction(item.getValue())) {        item.setValue(FunctionHandler.executeFunction(item.getValue(),variables));      }      item.setValue(variables.evaluate(item.getValue()));      if (item.getKey().toUpperCase().startsWith(TankConstants.HTTP_CASE_HTTP)) {        testCaseResult=this.validateHTTP(original,item,variables,reqResponse.getHttpCode(),reqResponse.getHttpMsg(),uniqueName);      } else {        testCaseResult=this.validateHeader(original,item,variables,reqResponse,uniqueName);      }      if (!testCaseResult.equalsIgnoreCase(TankConstants.HTTP_CASE_PASS)) {        testStepResult=TankConstants.HTTP_CASE_FAIL;      }    }    for (    ValidationData item : bodyValidation) {      ValidationData original=item.copy();      item=item.copy();      if (ValidationUtil.isVariable(item.getValue()) && variables.variableExists(item.getValue())) {        item.setValue(variables.getVariable(item.getValue()));      } else       if (ValidationUtil.isFunction(item.getValue())) {        item.setValue(FunctionHandler.executeFunction(item.getValue(),variables));      }      item.setValue(variables.evaluate(item.getValue()));      testCaseResult=validateBody(original,item,variables,reqResponse,uniqueName);      if (!testCaseResult.equalsIgnoreCase(TankConstants.HTTP_CASE_PASS)) {        testStepResult=TankConstants.HTTP_CASE_FAIL;      }    }    for (    ValidationData item : cookieValidation) {      ValidationData original=item.copy();      item=item.copy();      if (ValidationUtil.isVariable(item.getValue()) && variables.variableExists(item.getValue())) {        item.setValue(variables.getVariable(item.getValue()));      } else       if (ValidationUtil.isFunction(item.getValue())) {        item.setValue(FunctionHandler.executeFunction(item.getValue(),variables));      }      item.setValue(variables.evaluate(item.getValue()));      testCaseResult=validateCookie(original,item,variables,reqResponse,uniqueName);      if (!testCaseResult.equalsIgnoreCase(TankConstants.HTTP_CASE_PASS)) {        testStepResult=TankConstants.HTTP_CASE_FAIL;      }    }  }  return testStepResult;}  }
class C{  public void addSetting(BeanSetting t){  Iterator<BeanSetting> iter=getSettings().iterator();  while (iter.hasNext()) {    BeanSetting bs=iter.next();    if (bs.getBeanName().equals(t.getBeanName())) {      log.error("TO setting for \"" + t.getBeanName() + "\" already set to "+ bs.getSetting());      return;    }  }  super.addSetting(t);}  }
class C{  public ConfirmPanel(){  this(false,false,false,false,false,false,true);}  }
class C{  public void pointerHover(int[] x,int[] y){}  }
class C{  public Body text(String text){  this.text=text;  return this;}  }
class C{  public NotificationChain basicSetTarget(Vertex newTarget,NotificationChain msgs){  Vertex oldTarget=target;  target=newTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SGraphPackage.TRANSITION__TARGET,oldTarget,newTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private static void mat4_util_inplace_invert(float[] inOutMatrix){  float[] m=inOutMatrix;  float a0=m[0] * m[5] - m[1] * m[4];  float a1=m[0] * m[6] - m[2] * m[4];  float a2=m[0] * m[7] - m[3] * m[4];  float a3=m[1] * m[6] - m[2] * m[5];  float a4=m[1] * m[7] - m[3] * m[5];  float a5=m[2] * m[7] - m[3] * m[6];  float b0=m[8] * m[13] - m[9] * m[12];  float b1=m[8] * m[14] - m[10] * m[12];  float b2=m[8] * m[15] - m[11] * m[12];  float b3=m[9] * m[14] - m[10] * m[13];  float b4=m[9] * m[15] - m[11] * m[13];  float b5=m[10] * m[15] - m[11] * m[14];  float det=a0 * b5 - a1 * b4 + a2 * b3 + a3 * b2 - a4 * b1 + a5 * b0;  if (Math.abs(det) > 0.000000001) {    float e00=+m[5] * b5 - m[6] * b4 + m[7] * b3;    float e01=-m[4] * b5 + m[6] * b2 - m[7] * b1;    float e02=+m[4] * b4 - m[5] * b2 + m[7] * b0;    float e03=-m[4] * b3 + m[5] * b1 - m[6] * b0;    float e10=-m[1] * b5 + m[2] * b4 - m[3] * b3;    float e11=+m[0] * b5 - m[2] * b2 + m[3] * b1;    float e12=-m[0] * b4 + m[1] * b2 - m[3] * b0;    float e13=+m[0] * b3 - m[1] * b1 + m[2] * b0;    float e20=+m[13] * a5 - m[14] * a4 + m[15] * a3;    float e21=-m[12] * a5 + m[14] * a2 - m[15] * a1;    float e22=+m[12] * a4 - m[13] * a2 + m[15] * a0;    float e23=-m[12] * a3 + m[13] * a1 - m[14] * a0;    float e30=-m[9] * a5 + m[10] * a4 - m[11] * a3;    float e31=+m[8] * a5 - m[10] * a2 + m[11] * a1;    float e32=-m[8] * a4 + m[9] * a2 - m[11] * a0;    float e33=+m[8] * a3 - m[9] * a1 + m[10] * a0;    float invDet=1.0f / det;    m[0]=e00 * invDet;    m[1]=e10 * invDet;    m[2]=e20 * invDet;    m[3]=e30 * invDet;    m[4]=e01 * invDet;    m[5]=e11 * invDet;    m[6]=e21 * invDet;    m[7]=e31 * invDet;    m[8]=e02 * invDet;    m[9]=e12 * invDet;    m[10]=e22 * invDet;    m[11]=e32 * invDet;    m[12]=e03 * invDet;    m[13]=e13 * invDet;    m[14]=e23 * invDet;    m[15]=e33 * invDet;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static byte[] encodeBase64Chunked(byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  public void spaceHorizontal(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new spaceHorizontalAction(nodes));  }  int nMinX=-1;  int nMaxX=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nX=getPositionX(nodes.get(iNode));    if (nX < nMinX || iNode == 0) {      nMinX=nX;    }    if (nX > nMaxX || iNode == 0) {      nMaxX=nX;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionX.set(nNode,(int)(nMinX + iNode * (nMaxX - nMinX) / (nodes.size() - 1.0)));  }}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeByte(value);}  }
class C{  protected static int assertNonNegative(final String msg,final int v){  if (v < 0)   throw new IllegalArgumentException(msg);  return v;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void relocate(){  int w=200, h=235;  int x=(this.getWidth() - w) / 2;  int y=(this.getHeight() - h) / 2;  enableSQLDatabaseConnection.setLocation(x,y);  sqlHostLabel.setLocation(x,y + 40);  sqlHostField.setLocation(x + 110,y + 40);  sqlDatabaseLabel.setLocation(x,y + 70);  sqlDatabaseField.setLocation(x + 110,y + 70);  sqlUserLabel.setLocation(x,y + 100);  sqlUserField.setLocation(x + 110,y + 100);  sqlPasswordLabel.setLocation(x,y + 130);  sqlPasswordField.setLocation(x + 110,y + 130);  enableZipEncodingCheckBox.setLocation(x,y + 180);}  }
class C{  private static void removeBookmarkOrFolder(Context context,long id){  Cursor cursor=context.getContentResolver().query(Bookmarks.CONTENT_URI,new String[]{Bookmarks._ID},Bookmarks.PARENT + "=?",new String[]{Long.toString(id)},null);  if (cursor != null) {    try {      if (cursor.moveToFirst()) {        do {          removeBookmarkOrFolder(context,cursor.getLong(cursor.getColumnIndex(Bookmarks._ID)));        } while (cursor.moveToNext());      }    } catch (    Exception e) {      e.printStackTrace();    } finally {      cursor.close();    }  }  context.getContentResolver().delete(ContentUris.withAppendedId(Bookmarks.CONTENT_URI,id),null,null);}  }
class C{  private String[] determinePoolClassNameAndSupportedVolumeTypes(CIMInstance poolInstance,StorageSystem system){  if (StoragePool.PoolClassNames.Clar_DeviceStoragePool.toString().equalsIgnoreCase(poolInstance.getClassName())) {    return new String[]{StoragePool.PoolClassNames.Clar_DeviceStoragePool.toString(),StoragePool.SupportedResourceTypes.THICK_ONLY.toString()};  } else   if (StoragePool.PoolClassNames.Clar_UnifiedStoragePool.toString().equalsIgnoreCase(poolInstance.getClassName())) {    return new String[]{StoragePool.PoolClassNames.Clar_UnifiedStoragePool.toString(),StoragePool.SupportedResourceTypes.THIN_AND_THICK.toString()};  }  if (!system.checkIfVmax3()) {    if (StoragePool.PoolClassNames.Symm_DeviceStoragePool.toString().equalsIgnoreCase(poolInstance.getClassName()) && !SupportedProvisioningTypes.THIN.toString().equalsIgnoreCase(system.getSupportedProvisioningType())) {      return new String[]{StoragePool.PoolClassNames.Symm_DeviceStoragePool.toString(),StoragePool.SupportedResourceTypes.THICK_ONLY.toString()};    } else     if (StoragePool.PoolClassNames.Symm_VirtualProvisioningPool.toString().equalsIgnoreCase(poolInstance.getClassName()) && !SupportedProvisioningTypes.THICK.toString().equalsIgnoreCase(system.getSupportedProvisioningType())) {      return new String[]{StoragePool.PoolClassNames.Symm_VirtualProvisioningPool.toString(),StoragePool.SupportedResourceTypes.THIN_ONLY.toString()};    }  } else {    if (StoragePool.PoolClassNames.Symm_SRPStoragePool.toString().equalsIgnoreCase(poolInstance.getClassName())) {      return new String[]{StoragePool.PoolClassNames.Symm_SRPStoragePool.toString(),StoragePool.SupportedResourceTypes.THIN_ONLY.toString()};    }  }  return null;}  }
class C{  public String globalInfo(){  return "WrapperSubsetEval:\n\n" + "Evaluates attribute sets by using a learning scheme. Cross " + "validation is used to estimate the accuracy of the learning "+ "scheme for a set of attributes.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public boolean isRegion(){  return this.isRegion;}  }
class C{  public void refreshSchedule(){  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    transitLine.getRoutes().values().forEach(null);  }}  }
class C{  protected GemFireHealthConfig createGemFireHealthConfig(String hostName){  return new GemFireHealthConfigImpl(hostName);}  }
class C{  public static void rotateNaiveApproach(int[] a,int k){  int[] temp=new int[k];  int i, j;  for (i=0; i < k; i++) {    temp[i]=a[i];  }  for (j=0; i < a.length; i++, j++) {    a[j]=a[i];  }  for (i=0; j < a.length; i++, j++) {    a[j]=temp[i];  }}  }
class C{  public int capacity(){  return buff.capacity();}  }
class C{  public static Map<String,Object> echoService(DispatchContext dctx,Map<String,?> context){  Map<String,Object> result=new LinkedHashMap<String,Object>();  result.putAll(context);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public void postOpenInit(){  logger=Logger.getLogger(ProjectionMethod.class);  listeners=new ArrayList<ProjectorListener>();  upstairs.postOpenInit();  downstairs.postOpenInit();}  }
class C{  public synchronized boolean convert(String argv[]){  List<String> v=new ArrayList<>(2);  File outputFile=null;  boolean createOutputFile=false;  for (int i=0; i < argv.length; i++) {    if (argv[i].equals("-encoding")) {      if ((i + 1) < argv.length) {        encodingString=argv[++i];      } else {        error(getMsg("err.bad.arg"));        usage();        return false;      }    } else     if (argv[i].equals("-reverse")) {      reverse=true;    } else {      if (v.size() > 1) {        usage();        return false;      }      v.add(argv[i]);    }  }  if (encodingString == null)   defaultEncoding=Charset.defaultCharset().name();  char[] lineBreak=System.getProperty("line.separator").toCharArray();  try {    initializeConverter();    if (v.size() == 1)     inputFileName=v.get(0);    if (v.size() == 2) {      inputFileName=v.get(0);      outputFileName=v.get(1);      createOutputFile=true;    }    if (createOutputFile) {      outputFile=new File(outputFileName);      if (outputFile.exists() && !outputFile.canWrite()) {        throw new Exception(formatMsg("err.cannot.write",outputFileName));      }    }    if (reverse) {      BufferedReader reader=getA2NInput(inputFileName);      Writer osw=getA2NOutput(outputFileName);      String line;      while ((line=reader.readLine()) != null) {        osw.write(line.toCharArray());        osw.write(lineBreak);        if (outputFileName == null) {          osw.flush();        }      }      reader.close();      osw.close();    } else {      String inLine;      BufferedReader in=getN2AInput(inputFileName);      BufferedWriter out=getN2AOutput(outputFileName);      while ((inLine=in.readLine()) != null) {        out.write(inLine.toCharArray());        out.write(lineBreak);        if (outputFileName == null) {          out.flush();        }      }      out.close();    }    if (createOutputFile) {      if (outputFile.exists()) {        outputFile.delete();      }      tempFile.renameTo(outputFile);    }  } catch (  Exception e) {    error(e.toString());    return false;  }  return true;}  }
class C{  public synchronized void add(String key,Object value){  add(mapKb,key,value);}  }
class C{  public XYSeriesCollection(XYSeries series){  this.data=new java.util.ArrayList();  this.intervalDelegate=new IntervalXYDelegate(this,false);  addChangeListener(this.intervalDelegate);  if (series != null) {    this.data.add(series);    series.addChangeListener(this);    series.addVetoableChangeListener(this);  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.855 -0400",hash_original_method="E1D4EA7BC5A1A039095C078064FA6BD5",hash_generated_method="7D09861B37E141F39BE351A56688C45A") @Override public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(_method.getModifiers());}  }
class C{  public static boolean isPrivate(int accflags){  return (accflags & PRIVATE) != 0;}  }
class C{  public void randomizeBiases(double lower,double upper){  for (  Neuron neuron : this.getNeuronList()) {    neuron.randomizeBias(lower,upper);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mEncodedEmail=getArguments().getString(Constants.KEY_ENCODED_EMAIL);}  }
class C{  public static void addSlices(Map<String,Slice> target,String collectionName,Collection<Slice> slices,boolean multiCollection){  for (  Slice slice : slices) {    String key=slice.getName();    if (multiCollection)     key=collectionName + "_" + key;    target.put(key,slice);  }}  }
class C{  public void paintRadioButtonMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public double measureNumRules(){  if (m_generateRules) {    return m_ruleSet.size();  }  return m_ruleSet.get(0).m_topOfTree.numberOfLinearModels();}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public void extractVarUsageInfoSelf(final GroupNodeBase<?> group){  for (  IQueryNode node : group) {    if (node instanceof FilterNode || node instanceof AssignmentNode) {      final GroupMemberValueExpressionNodeBase filter=(GroupMemberValueExpressionNodeBase)node;      final IValueExpressionNode vexpr=filter.getValueExpressionNode();      extractVarUsageInfo(node,(IValueExpressionNode)vexpr);    } else     if (node instanceof StatementPatternNode) {      final StatementPatternNode spn=(StatementPatternNode)node;      for (      IVariable<?> spnVar : spn.getProducedBindings()) {        registerVarToChildMappingInUsageMap(spnVar,node);      }    } else     if (node instanceof PropertyPathNode) {      extractVarUsageInfoForPropertyPathNode((PropertyPathNode)node);    }  }}  }
class C{  @Transactional public void persist(Collection<RawProtein<SuperFamilyHmmer3RawMatch>> filteredProteins,Map<String,Signature> modelIdToSignatureMap,Map<String,Protein> proteinIdToProteinMap){  for (  RawProtein<SuperFamilyHmmer3RawMatch> rawProtein : filteredProteins) {    final Map<UUID,SuperFamilyHmmer3Match> splitGroupToMatch=new HashMap<UUID,SuperFamilyHmmer3Match>();    final Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());    if (protein == null) {      throw new IllegalStateException("Cannot store match to a protein that is not in database " + "[protein ID= " + rawProtein.getProteinIdentifier() + "]");    }    LOGGER.debug("Protein: " + protein);    for (    SuperFamilyHmmer3RawMatch rawMatch : rawProtein.getMatches()) {      SuperFamilyHmmer3Match match=splitGroupToMatch.get(rawMatch.getSplitGroup());      if (match == null) {        final Signature currentSignature=modelIdToSignatureMap.get(rawMatch.getModelId());        if (currentSignature == null) {          throw new IllegalStateException("Cannot find model " + rawMatch.getModelId() + " in the database.");        }        match=new SuperFamilyHmmer3Match(currentSignature,rawMatch.getEvalue(),null);        splitGroupToMatch.put(rawMatch.getSplitGroup(),match);      }      match.addLocation(new SuperFamilyHmmer3Match.SuperFamilyHmmer3Location(rawMatch.getLocationStart(),rawMatch.getLocationEnd()));    }    for (    SuperFamilyHmmer3Match match : splitGroupToMatch.values()) {      LOGGER.debug("superfamily match: " + match);      LOGGER.debug("Protein with match: " + protein);      protein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  public static Typeface walkwayBlack(Context context){  return FontSourceProcessor.process(R.raw.walkway_black,context);}  }
class C{  public Object clone(){  Matrix3d m1=null;  try {    m1=(Matrix3d)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return m1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.677 -0500",hash_original_method="80293F715FFD7AE029130C857C03E1EB",hash_generated_method="2F96630F11F01B239FEFE4E825456CFB") public void removeMethod(){  if (uriParms != null)   uriParms.delete(METHOD);}  }
class C{  @Override public String toString(){  StringBuffer buffWrite=new StringBuffer(1024);  StringBuffer buffAccept=new StringBuffer(1024);  buffWrite.append("\n\t\tWrites=(");  buffAccept.append("\n\t\tAccepts=(");  for (int i=0; i < write.length - 1; i++) {    buffWrite.append("[" + str(write[i]) + "], ");    buffAccept.append("[" + str(accept[i]) + "], ");  }  buffWrite.append("[" + str(write[write.length - 1]) + "])");  buffAccept.append("[" + str(accept[accept.length - 1]) + "])");  return "\n\t\tCID=" + consensus.getId() + " \n\t\tTS="+ getTimestamp()+ " "+ "\n\t\tPropose=["+ (propValueHash != null ? str(propValueHash) : null)+ "] "+ buffWrite+ " "+ buffAccept;}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public void withReader(Object cb){}  }
class C{  @Override public void uncaughtException(final Thread t,final Throwable ex){synchronized (this.dispatchLock) {    if (ex instanceof VirtualMachineError) {      SystemFailure.setFailure((VirtualMachineError)ex);    }    String threadName=t.getName();    if ((ex instanceof NoClassDefFoundError) && (threadName.equals(InternalDistributedSystem.SHUTDOWN_HOOK_NAME))) {      final StringId msg=LocalizedStrings.UNCAUGHT_EXCEPTION_IN_THREAD_0_THIS_MESSAGE_CAN_BE_DISREGARDED_IF_IT_OCCURED_DURING_AN_APPLICATION_SERVER_SHUTDOWN_THE_EXCEPTION_MESSAGE_WAS_1;      final Object[] msgArgs=new Object[]{t,ex.getLocalizedMessage()};      stderr.info(msg,msgArgs);      if (this.logger != null) {        this.logger.info(LocalizedMessage.create(msg,msgArgs));      }      if (this.logWriter != null) {        this.logWriter.info(msg,msgArgs);      }    } else {      stderr.severe(LocalizedStrings.UNCAUGHT_EXCEPTION_IN_THREAD_0,t,ex);      if (this.logger != null) {        this.logger.fatal(LocalizedMessage.create(LocalizedStrings.UNCAUGHT_EXCEPTION_IN_THREAD_0,t),ex);      }      if (this.logWriter != null) {        this.logWriter.severe(LocalizedStrings.UNCAUGHT_EXCEPTION_IN_THREAD_0,t,ex);      }    }    this.uncaughtExceptionsCount++;  }}  }
class C{  public CacheResetEvent(Object source){  super(source);}  }
class C{  public void addObservations(int states[][][],int offsetOfDestFromSources[][]){  addObservations(states,offsetOfDestFromSources,false);}  }
class C{  public void untar() throws IOException {  logger.info("untar: untar " + tarFileName + " to "+ dest);  TarInputStream tin=null;  try {    if (!dest.exists()) {      dest.mkdir();    }    tin=new TarInputStream(getDecompressedInputStream(tarFileName,new FileInputStream(new File(tarFileName))));    TarEntry tarEntry=tin.getNextEntry();    while (tarEntry != null) {      File destPath=new File(dest.toString() + File.separatorChar + tarEntry.getName());      if (tarEntry.isDirectory()) {        destPath.mkdir();      } else {        if (!destPath.getParentFile().exists()) {          destPath.getParentFile().mkdirs();        }        currentFileNameIntoArchiveExtracted=tarEntry.getName();        logger.info("untar: untar " + tarEntry.getName() + " to "+ destPath);        FileOutputStream fout=new FileOutputStream(destPath);        try {          tin.copyEntryContents(fout);        }  finally {          fout.flush();          fout.close();        }      }      tarEntry=tin.getNextEntry();    }  }  finally {    currentFileNameIntoArchiveExtracted=null;    if (tin != null) {      tin.close();    }  }}  }
class C{  public void removeGroupListener(final GroupListener listener){  groupListeners.remove(listener);}  }
class C{  public static void main(String[] args){  TestSuiteGenerator generator=new TestSuiteGenerator();  generator.generateTestSuite();  System.exit(0);}  }
class C{  public IssuingDistributionPoint(DistributionPointName distributionPoint,ReasonFlags onlySomeReasons){  this.distributionPoint=distributionPoint;  this.onlySomeReasons=onlySomeReasons;}  }
class C{  @Override public List<ProcessInfo> execute(String[] params) throws SecurityException {  List<ProcessInfo> processInfoList=new ArrayList<ProcessInfo>();  try {    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String subPid=commandLine.getOptionValue(PARENTPROCESSID);    LOGGER.info("Parent Pid is " + subPid);    String username=commandLine.getOptionValue("username");    processDAO.securityCheck(Integer.parseInt(subPid),username,"execute");    List<com.wipro.ats.bdre.md.dao.jpa.Process> jpaProcessList=processDAO.selectProcessList(Integer.parseInt(subPid));    for (    Process process : jpaProcessList) {      ProcessInfo processInfo=new ProcessInfo();      processInfo.setProcessId(process.getProcessId());      processInfo.setBusDomainId(process.getBusDomain().getBusDomainId());      processInfo.setProcessTypeId(process.getProcessType().getProcessTypeId());      processInfo.setCanRecover(process.getCanRecover());      processInfo.setDescription(process.getDescription());      if (process.getProcess() != null) {        processInfo.setParentProcessId(process.getProcess().getProcessId());      }      processInfo.setProcessName(process.getProcessName());      processInfo.setEnqProcessId(process.getEnqueuingProcessId());      processInfo.setNextProcessIds(process.getNextProcessId());      processInfo.setWorkflowId(process.getWorkflowType().getWorkflowId());      processInfo.setBatchCutPattern(process.getBatchCutPattern());      processInfo.setDeleteFlag(process.getDeleteFlag());      processInfoList.add(processInfo);    }    return processInfoList;  } catch (  MetadataException e) {    LOGGER.error("Error occurred.",e);    throw new MetadataException(e);  }}  }
class C{  private void detach(){  Thread w=waiter;  executor=null;  subscriber=null;  pendingError=null;  signalWaiter(w);}  }
class C{  @Override public void beginGroup(String name,String shortName,ResolvedJavaMethod method,int bci,Map<Object,Object> properties){  beginGroup();  beginProperties();  printProperty("name",name);  if (properties != null) {    for (    Entry<Object,Object> entry : properties.entrySet()) {      printProperty(entry.getKey().toString(),entry.getValue().toString());    }  }  endProperties();  beginMethod(name,shortName,bci);  if (method != null && method.getCode() != null) {    printBytecodes(new BytecodeDisassembler(false).disassemble(method));  }  endMethod();}  }
class C{  public Builder wordAlternativesThreshold(Double wordAlternativesThreshold){  this.wordAlternativesThreshold=wordAlternativesThreshold;  return this;}  }
class C{  public SingleLinkDissimilarity(DistanceMetric dm){  super(dm);}  }
class C{  public final void touch(){  stamp++;}  }
class C{  private void deleteWorkflowLock(Workflow workflow){  try {    String lockPath=getLockPath(workflow);    _dataManager.removeNode(lockPath);  } catch (  Exception ex) {    _log.error("Exception removing lock for workflow: " + workflow.getWorkflowURI().toString(),ex);  }}  }
class C{  public SpkacException(){  super();}  }
class C{  public static BinaryMessage correctCCITT80(BinaryMessage message,int messageStart,int crcStart){  int calculated=0;  for (int i=message.nextSetBit(messageStart); i >= messageStart && i < crcStart; i=message.nextSetBit(i + 1)) {    calculated^=CCITT_80_CHECKSUMS[i - messageStart];  }  int checksum=getIntChecksum(message,crcStart,16);  int residual=calculated ^ checksum;  if (residual == 0 || residual == 0xFFFF) {    message.setCRC(CRC.PASSED);    return message;  } else {    int errorLocation=getBitError(residual,CCITT_80_CHECKSUMS);    if (errorLocation >= 0) {      message.flip(errorLocation + messageStart);      message.setCRC(CRC.CORRECTED);      return message;    }  }  message.setCRC(CRC.FAILED_CRC);  return message;}  }
class C{  Timezone(String name){  this.name=name;}  }
class C{  public SimpleDateFormat(){  super();}  }
class C{  public NodeConfig recognizeNodeConfigFromDns(String dns) throws IllegalArgumentException, IllegalStateException {  StringJoiner allowedDnsTemplates=new StringJoiner(", ","[","]");  for (  Node item : getNodeListProperties()) {    NodeConfig.NodeType type=item.getType();    String baseNodeDomain=getBaseNodeDomain(type,config);    String typeString=item.getDnsPrefix();    String regex;    if (item.equals(Node.MACHINE_NODE)) {      regex=format("^(%s\\d+.)?%s$",typeString,baseNodeDomain);    } else {      regex=format("^%s\\d+.%s$",typeString,baseNodeDomain);    }    if (dns != null && dns.toLowerCase().matches(regex)) {      return new NodeConfig(type,dns);    }    allowedDnsTemplates.add(format("'%1$s', '%2$s<number>.%1$s'",baseNodeDomain,typeString));  }  throw new IllegalArgumentException(format("Illegal DNS name '%s' of node. Correct DNS name templates: %s",dns,allowedDnsTemplates));}  }
class C{  public synchronized void syncAll() throws SOSFailure {  final String methodName="syncAll(): ";  log.trace(methodName + "Entry");  _fileCosIdList=null;  _blockCosIdList=null;  _blockCosDetailList=null;  _fileCosDetailList=null;  log.trace(methodName + "Exit");}  }
class C{  public WrappedByteBuffer putUnsigned(int v){  byte b=(byte)(v & 0xFF);  return this.put(b);}  }
class C{  public SerialTurnout(String systemName,String userName){  super(systemName,userName);  tSystemName=systemName;  tBit=SerialAddress.getBitFromSystemName(systemName);}  }
class C{  public void read(){  prepareAdditionalStates();  materialParameters.clear();  int level=0;  boolean params=false;  boolean states=false;  try {    for (    String line : material.asLines()) {      line=MaterialUtils.trimLine(line);      if (line.startsWith("Material ") || line.startsWith("Material\t") && level == 0) {        parseMaterialProperties(line);      }      if (line.startsWith("MaterialParameters ") || line.startsWith("MaterialParameters\t") || line.startsWith("MaterialParameters{") && level == 1) {        params=true;      }      if (line.startsWith("AdditionalRenderState ") || line.startsWith("AdditionalRenderState\t") || line.startsWith("AdditionalRenderState{") && level == 1) {        states=true;      }      if (line.indexOf("{") != -1) {        level++;      }      if (line.indexOf("}") != -1) {        level--;        if (params) {          params=false;        }        if (states) {          states=false;        }      }      if (level == 2 && params) {        int colonIdx=line.indexOf(":");        if (colonIdx != -1) {          String[] lines=line.split(":");          MaterialProperty prop=new MaterialProperty();          prop.setName(lines[0].trim());          if (lines.length > 1) {            prop.setValue(lines[lines.length - 1].trim());          }          materialParameters.put(prop.getName(),prop);        }      }      if (level == 2 && states) {        String[] lines=null;        int colonIdx=line.indexOf(" ");        if (colonIdx != -1) {          lines=line.split(" ");        }        colonIdx=line.indexOf("\t");        if (colonIdx != -1) {          lines=line.split("\t");        }        if (lines != null) {          MaterialProperty prop=new MaterialProperty();          String name=lines[0].trim();          prop.setName(name);          if (additionalRenderStates.get(name) != null) {            prop.setType(additionalRenderStates.get(name).getType());            if (lines.length > 1) {              String value="";              for (int i=1; i < lines.length; i++) {                value+=" " + lines[i];              }              prop.setValue(value.trim());            }            additionalRenderStates.put(prop.getName(),prop);          }        }      }    }    checkWithMatDef();  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  @Override protected LinkedList<OutputPort> preAutoWire(LinkedList<OutputPort> readyOutputs) throws OperatorException {  getInputPorts().removeAll();  getOutputPorts().removeAll();  getTransformer().clearRules();  Class<? extends IOObject> desiredClass=getSelectedClass();  int hits=0;  if (desiredClass != null) {switch (getParameterAsInt(PARAMETER_MULTIPLY_TYPE)) {case MULTIPLY_ONE:      OutputPort found=null;    int number=getParameterAsInt(PARAMETER_MULTIPLY_WHICH);  Iterator<OutputPort> i=readyOutputs.descendingIterator();while (i.hasNext()) {  OutputPort port=i.next();  MetaData md=port.getMetaData();  if ((md != null) && desiredClass.isAssignableFrom(md.getObjectClass())) {    hits++;    if (hits == number) {      getInputPorts().createPort("input_1",desiredClass);      getLogger().info("IOMultiplier created temporary input: input_1");      found=port;      break;    }  }}if (found != null) {readyOutputs.remove(found);readyOutputs.addLast(found);}break;case MULTIPLY_ALL:i=readyOutputs.descendingIterator();while (i.hasNext()) {OutputPort port=i.next();MetaData md=port.getMetaData();if ((md != null) && desiredClass.isAssignableFrom(md.getObjectClass())) {hits++;InputPort inPort=getInputPorts().createPort("input_" + hits,false);getLogger().info("IOMultiplier created temporary input: input_" + hits);inPort.addPrecondition(new SimplePrecondition(inPort,new MetaData(desiredClass)));getInputPorts().addPort(inPort);}}}}int copies=getParameterAsInt(PARAMETER_MULTIPLY_WHICH) + 1;for (int i=0; i < getInputPorts().getNumberOfPorts(); i++) {InputPort in=getInputPorts().getPortByIndex(i);for (int j=0; j < copies; j++) {OutputPort out=getOutputPorts().createPort("output_" + (i + 1) + "_"+ (j + 1));getLogger().info("IOMultiplier created temporary output: output_" + (i + 1) + "_"+ (j + 1));getTransformer().addPassThroughRule(in,out);}}return readyOutputs;}  }
class C{  public ApkSoSource(Context context) throws IOException {  super(SysUtil.createLibsDirectory(context),DirectorySoSource.RESOLVE_DEPENDENCIES);  try (JarFile apk=new JarFile(context.getApplicationInfo().publicSourceDir)){    File libsDir=super.soDirectory;    if (DEBUG) {      Log.v(TAG,"synchronizing log directory: " + libsDir);    }    Map<String,SoInfo> providedLibraries=findProvidedLibraries(apk);    try (FileLocker lock=SysUtil.lockLibsDirectory(context)){      File extantFiles[]=libsDir.listFiles();      for (int i=0; i < extantFiles.length; ++i) {        File extantFile=extantFiles[i];        if (DEBUG) {          Log.v(TAG,"considering libdir file: " + extantFile);        }        String name=extantFile.getName();        SoInfo so=providedLibraries.get(name);        boolean shouldDelete=(so == null || so.entry.getSize() != extantFile.length() || so.entry.getTime() != extantFile.lastModified());        boolean upToDate=(so != null && !shouldDelete);        if (shouldDelete) {          if (DEBUG) {            Log.v(TAG,"deleting obsolete or unexpected file: " + extantFile);          }          SysUtil.deleteOrThrow(extantFile);        }        if (upToDate) {          if (DEBUG) {            Log.v(TAG,"found up-to-date library: " + extantFile);          }          providedLibraries.remove(name);        }      }      for (      SoInfo so : providedLibraries.values()) {        JarEntry entry=so.entry;        try (InputStream is=apk.getInputStream(entry)){          if (DEBUG) {            Log.v(TAG,"extracting library: " + so.soName);          }          SysUtil.reliablyCopyExecutable(is,new File(libsDir,so.soName),entry.getSize(),entry.getTime());        }         SysUtil.freeCopyBuffer();      }    }   } }  }
class C{  public boolean isDelivered(){  String s=getIsDelivered();  return s != null && ISDELIVERED_Yes.equals(s);}  }
class C{  private void generatePerson(final int ii,final Link fromLink,final Link toLink,final Population population){  Person p=PopulationUtils.getFactory().createPerson(Id.create(String.valueOf(ii),Person.class));  Plan plan=PopulationUtils.createPlan(p);  try {    Activity act1=PopulationUtils.createAndAddActivityFromCoord(plan,(String)"h",new Coord(100.,100.));    act1.setLinkId(fromLink.getId());    act1.setStartTime(0.);    act1.setEndTime(3 * 60 * 60.);    PopulationUtils.createAndAddLeg(plan,(String)TransportMode.car);    Activity act2=PopulationUtils.createAndAddActivityFromCoord(plan,(String)"h",new Coord(200.,200.));    act2.setLinkId(toLink.getId());    act2.setStartTime(8 * 60 * 60);    p.addPlan(plan);    population.addPerson(p);  } catch (  Exception e1) {    e1.printStackTrace();  }}  }
class C{  public ScriptNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void finish(Intent intent,String title){  intent.putExtras(getIntent());  intent.putExtra(EXTRA_TITLE,title);  setResult(RESULT_OK,intent);  finish();}  }
class C{  public void removeAll(){  while (!children.isEmpty())   remove(children.size() - 1);}  }
class C{  public void testGetMGFAlgorithm(){  String mdName="SHA-1";  String mgfName="MGF1";  AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;  PSource pSrc=PSource.PSpecified.DEFAULT;  OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);  assertTrue("The returned value does not equal to the " + "value specified in the constructor.",ps.getMGFAlgorithm().equals(mgfName));}  }
class C{  private static void freeMemoryBuffers(){  TempBuffers.clearFreeLists();}  }
class C{  private static int generateWrapArg(ClassFileWriter cfw,int paramOffset,Class<?> argType){  int size=1;  if (!argType.isPrimitive()) {    cfw.add(ByteCode.ALOAD,paramOffset);  } else   if (argType == Boolean.TYPE) {    cfw.add(ByteCode.NEW,"java/lang/Boolean");    cfw.add(ByteCode.DUP);    cfw.add(ByteCode.ILOAD,paramOffset);    cfw.addInvoke(ByteCode.INVOKESPECIAL,"java/lang/Boolean","<init>","(Z)V");  } else   if (argType == Character.TYPE) {    cfw.add(ByteCode.ILOAD,paramOffset);    cfw.addInvoke(ByteCode.INVOKESTATIC,"java/lang/String","valueOf","(C)Ljava/lang/String;");  } else {    cfw.add(ByteCode.NEW,"java/lang/Double");    cfw.add(ByteCode.DUP);    String typeName=argType.getName();switch (typeName.charAt(0)) {case 'b':case 's':case 'i':      cfw.add(ByteCode.ILOAD,paramOffset);    cfw.add(ByteCode.I2D);  break;case 'l':cfw.add(ByteCode.LLOAD,paramOffset);cfw.add(ByteCode.L2D);size=2;break;case 'f':cfw.add(ByteCode.FLOAD,paramOffset);cfw.add(ByteCode.F2D);break;case 'd':cfw.add(ByteCode.DLOAD,paramOffset);size=2;break;}cfw.addInvoke(ByteCode.INVOKESPECIAL,"java/lang/Double","<init>","(D)V");}return size;}  }
class C{  @Override public boolean writesIntoExistingData(){  return false;}  }
class C{  protected void addCanvas(){  getContentPane().add(lwjglCanvas.getCanvas());}  }
class C{  public boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  private static Object parse(XMLTokener x,boolean arrayForm,JSONArray ja) throws JSONException {  String attribute;  char c;  String closeTag=null;  int i;  JSONArray newja=null;  JSONObject newjo=null;  Object token;  String tagName=null;  while (true) {    if (!x.more()) {      throw x.syntaxError("Bad XML");    }    token=x.nextContent();    if (token == XML.LT) {      token=x.nextToken();      if (token instanceof Character) {        if (token == XML.SLASH) {          token=x.nextToken();          if (!(token instanceof String)) {            throw new JSONException("Expected a closing name instead of '" + token + "'.");          }          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped close tag");          }          return token;        } else         if (token == XML.BANG) {          c=x.next();          if (c == '-') {            if (x.next() == '-') {              x.skipPast("-->");            } else {              x.back();            }          } else           if (c == '[') {            token=x.nextToken();            if (token.equals("CDATA") && x.next() == '[') {              if (ja != null) {                ja.put(x.nextCDATA());              }            } else {              throw x.syntaxError("Expected 'CDATA['");            }          } else {            i=1;            do {              token=x.nextMeta();              if (token == null) {                throw x.syntaxError("Missing '>' after '<!'.");              } else               if (token == XML.LT) {                i+=1;              } else               if (token == XML.GT) {                i-=1;              }            } while (i > 0);          }        } else         if (token == XML.QUEST) {          x.skipPast("?>");        } else {          throw x.syntaxError("Misshaped tag");        }      } else {        if (!(token instanceof String)) {          throw x.syntaxError("Bad tagName '" + token + "'.");        }        tagName=(String)token;        newja=new JSONArray();        newjo=new JSONObject();        if (arrayForm) {          newja.put(tagName);          if (ja != null) {            ja.put(newja);          }        } else {          newjo.put("tagName",tagName);          if (ja != null) {            ja.put(newjo);          }        }        token=null;        for (; ; ) {          if (token == null) {            token=x.nextToken();          }          if (token == null) {            throw x.syntaxError("Misshaped tag");          }          if (!(token instanceof String)) {            break;          }          attribute=(String)token;          if (!arrayForm && ("tagName".equals(attribute) || "childNode".equals(attribute))) {            throw x.syntaxError("Reserved attribute.");          }          token=x.nextToken();          if (token == XML.EQ) {            token=x.nextToken();            if (!(token instanceof String)) {              throw x.syntaxError("Missing value");            }            newjo.accumulate(attribute,XML.stringToValue((String)token));            token=null;          } else {            newjo.accumulate(attribute,"");          }        }        if (arrayForm && newjo.length() > 0) {          newja.put(newjo);        }        if (token == XML.SLASH) {          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          if (ja == null) {            if (arrayForm) {              return newja;            } else {              return newjo;            }          }        } else {          if (token != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          closeTag=(String)parse(x,arrayForm,newja);          if (closeTag != null) {            if (!closeTag.equals(tagName)) {              throw x.syntaxError("Mismatched '" + tagName + "' and '"+ closeTag+ "'");            }            tagName=null;            if (!arrayForm && newja.length() > 0) {              newjo.put("childNodes",newja);            }            if (ja == null) {              if (arrayForm) {                return newja;              } else {                return newjo;              }            }          }        }      }    } else {      if (ja != null) {        ja.put(token instanceof String ? XML.stringToValue((String)token) : token);      }    }  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    log.fine("prepare - " + para[i]);    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("C_AllocationHdr_ID"))     p_C_AllocationHdr_ID=para[i].getParameterAsInt(); else     if (name.equals("DateAcct")) {      p_DateAcct_From=(Timestamp)para[i].getParameter();      p_DateAcct_To=(Timestamp)para[i].getParameter_To();    } else     if (name.equals("AllAllocations"))     p_AllAllocations="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (!p_AllAllocations && getTable_ID() == MAllocationHdr.Table_ID && getRecord_ID() > 0) {    p_C_AllocationHdr_ID=getRecord_ID();  }}  }
class C{  public void onScanResult(String address,int rssi,byte[] advData){}  }
class C{  public StatementCollector(Collection<Statement> statements,Map<String,String> namespaces){  super(statements,namespaces,SimpleValueFactory.getInstance());}  }
class C{  @VisibleForTesting String postRequest(long timestamp,String xml) throws RequestFailureException {  String response=null;  HttpURLConnection urlConnection=null;  try {    urlConnection=createConnection();    setUpPostRequest(timestamp,urlConnection,xml);    sendRequestToServer(urlConnection,xml);    response=readResponseFromServer(urlConnection);  }  finally {    if (urlConnection != null) {      urlConnection.disconnect();    }  }  return response;}  }
class C{  public void testSkippingOverFailedQuery() throws Throwable {  CompletableFuture<QueryResponse> future1=new CompletableFuture<>();  CompletableFuture<QueryResponse> future2=new CompletableFuture<>();  Connection connection=mock(Connection.class);  Mockito.<CompletableFuture<QueryResponse>>when(connection.send(any(QueryRequest.class))).thenReturn(future1).thenReturn(future2);  ClientSessionState state=new ClientSessionState(UUID.randomUUID()).setSessionId(1).setState(Session.State.OPEN);  Executor executor=new MockExecutor();  ThreadContext context=mock(ThreadContext.class);  when(context.executor()).thenReturn(executor);  ClientSessionSubmitter submitter=new ClientSessionSubmitter(connection,state,new ClientSequencer(state),context);  CompletableFuture<String> result1=submitter.submit(new TestQuery());  CompletableFuture<String> result2=submitter.submit(new TestQuery());  assertEquals(state.getResponseIndex(),1);  assertFalse(result1.isDone());  assertFalse(result2.isDone());  future1.completeExceptionally(new QueryException("failure"));  future2.complete(QueryResponse.builder().withStatus(Response.Status.OK).withIndex(10).withResult("Hello world!").build());  assertTrue(result1.isCompletedExceptionally());  assertTrue(result2.isDone());  assertEquals(result2.get(),"Hello world!");  assertEquals(state.getResponseIndex(),10);}  }
class C{  protected void addRange(TextPresentation presentation,int offset,int length,TextAttribute attr){  if (attr != null)   presentation.addStyleRange(new StyleRange(offset,length,attr.getForeground(),attr.getBackground(),attr.getStyle()));}  }
class C{  public boolean isRelative(){  return relative;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public BrowserWhitelist(BrowserMatcher... matchers){  mBrowserMatchers=Arrays.asList(matchers);}  }
class C{  @Override public boolean addAll(int location,Collection<? extends E> collection){  if (location < 0 || location > size) {    throw new IndexOutOfBoundsException("" + location + " out of: "+ size);  }  Object[] dumparray=toObjectArray(collection);  int growSize=dumparray.length;  if (growSize == 0) {    return false;  }  if (location == 0) {    growAtFront(growSize);    firstIndex-=growSize;  } else   if (location == size) {    if (firstIndex + size > array.length - growSize) {      growAtEnd(growSize);    }  } else {    if (array.length - size < growSize) {      growForInsert(location,growSize);    } else     if (firstIndex + size > array.length - growSize || (firstIndex > 0 && location < size / 2)) {      int newFirst=firstIndex - growSize;      if (newFirst < 0) {        int index=location + firstIndex;        System.arraycopy(array,index,array,index - newFirst,size - location);        newFirst=0;      }      System.arraycopy(array,firstIndex,array,newFirst,location);      firstIndex=newFirst;    } else {      int index=location + firstIndex;      System.arraycopy(array,index,array,index + growSize,size - location);    }  }  System.arraycopy(dumparray,0,this.array,location + firstIndex,growSize);  size+=growSize;  modCount++;  return true;}  }
class C{  private static Address GetShortArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetShortArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    short[] sourceArray=(short[])env.getJNIRef(arrayJREF);    int size=sourceArray.length;    if (MemoryManager.willNeverMove(sourceArray)) {      JNIGenericHelpers.setBoolStar(isCopyAddress,false);      return Magic.objectAsAddress(sourceArray);    } else {      Address copyBuffer=sysCall.sysMalloc(size * BYTES_IN_SHORT);      if (copyBuffer.isZero()) {        env.recordException(new OutOfMemoryError());        return Address.zero();      }      Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size * BYTES_IN_SHORT);      JNIGenericHelpers.setBoolStar(isCopyAddress,true);      return copyBuffer;    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  public double doOperation() throws OperatorFailedException {  CoalescentSimulator simulator=new CoalescentSimulator();  List<TaxonList> taxonLists=new ArrayList<TaxonList>();  double rootHeight=-1.0;  double oldLikelihood=0.0;  double newLikelihood=0.0;  for (int i=0; i < xo.getChildCount(); i++) {    final Object child=xo.getChild(i);    if (child instanceof Tree) {    } else     if (child instanceof TaxonList) {      taxonLists.add((Taxa)child);      break;    }  }  try {    Tree[] trees=new Tree[taxonLists.size()];    for (int i=0; i < taxonLists.size(); i++) {      trees[i]=simulator.simulateTree(taxonLists.get(i),demoModel);    }    oldLikelihood=coalescent.getLogLikelihood();    SimpleTree simTree=simulator.simulateTree(trees,demoModel,rootHeight,trees.length != 1);    treeModel.beginTreeEdit();    treeModel.adoptTreeStructure(simTree);    treeModel.endTreeEdit();    newLikelihood=coalescent.getLogLikelihood();  } catch (  IllegalArgumentException iae) {    try {      throw new XMLParseException(iae.getMessage());    } catch (    XMLParseException e) {      e.printStackTrace();    }  }  return oldLikelihood - newLikelihood;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.297 -0500",hash_original_method="6D89CA8874EF35472879901FA64C2E5A",hash_generated_method="5879D45E355D495249CD670791BC6A7B") public PathDashPathEffect(Path shape,float advance,float phase,Style style){  native_instance=nativeCreate(shape.ni(),advance,phase,style.native_style);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public InvalidAlgorithmParameterException(String msg){  super(msg);}  }
class C{  public Vector3f divide(Vector3f scalar){  return new Vector3f(x / scalar.x,y / scalar.y,z / scalar.z);}  }
class C{  public NotPredicate(Predicate p){  m_predicate=p;}  }
class C{  public static Map<String,String> convertInputParametersForParser(Map<String,Object> basicInputParameterMap,ScriptType scriptType){  if (basicInputParameterMap == null) {    return null;  }  if (scriptType == null) {    throw new MLContextException("ScriptType needs to be specified");  }  Map<String,String> convertedMap=new HashMap<String,String>();  for (  Entry<String,Object> entry : basicInputParameterMap.entrySet()) {    String key=entry.getKey();    Object value=entry.getValue();    if (value == null) {      throw new MLContextException("Input parameter value is null for: " + entry.getKey());    } else     if (value instanceof Integer) {      convertedMap.put(key,Integer.toString((Integer)value));    } else     if (value instanceof Boolean) {      if (scriptType == ScriptType.DML) {        convertedMap.put(key,String.valueOf((Boolean)value).toUpperCase());      } else {        convertedMap.put(key,WordUtils.capitalize(String.valueOf((Boolean)value)));      }    } else     if (value instanceof Double) {      convertedMap.put(key,Double.toString((Double)value));    } else     if (value instanceof String) {      convertedMap.put(key,(String)value);    } else {      throw new MLContextException("Incorrect type for input parameters");    }  }  return convertedMap;}  }
class C{  protected Expression div(int opPos) throws TransformerException {  return compileOperation(new Div(),opPos);}  }
class C{  public ReferencingElementExpression_IM __NSSafe_IdentRef(SymbolTableEntry entry){  if (entry instanceof SymbolTableEntryOriginal) {    final ImportSpecifier impSpec=((SymbolTableEntryOriginal)entry).getImportSpecifier();    if (impSpec instanceof NamespaceImportSpecifier) {      SymbolTableEntry steNS=findSymbolTableEntryForNamespaceImport((NamespaceImportSpecifier)impSpec);      return TranspilerBuilderBlocks._PropertyAccessExpr(steNS,entry);    }  }  return TranspilerBuilderBlocks._IdentRef(entry);}  }
class C{  public WarningHeader createWarningHeader(String agent,int code,String comment) throws ParseException, InvalidArgumentException {  if (agent == null)   throw new NullPointerException("null arg");  Warning warning=new Warning();  warning.setAgent(agent);  warning.setCode(code);  warning.setText(comment);  return warning;}  }
class C{  @Override public UniformDensityFunction copy(){  return new UniformDensityFunction(minimum,maximum);}  }
class C{  public static void d(String msg){  if (sIsLogEnabled) {    Log.d(sApplicationTag,getContents(getCurrentStackTraceElement()) + ">" + msg);  }}  }
class C{  public static double covarianceTwoColumns(double[][] data,int col1,int col2){  double mean1=mean(data,col1);  double mean2=mean(data,col2);  return covarianceTwoColumns(data,col1,col2,mean1,mean2);}  }
class C{  @NoInline @Interruptible public static double[] newNonMovingDoubleArray(int size){  if (!VM.runningVM) {    return new double[size];  }  RVMArray arrayType=RVMArray.DoubleArray;  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);  int align=ObjectModel.getAlignment(arrayType);  int offset=ObjectModel.getOffsetForAlignment(arrayType,false);  int width=arrayType.getLogElementSize();  TIB arrayTib=arrayType.getTypeInformationBlock();  return (double[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);}  }
class C{  @Override public boolean othersInsertsAreVisible(int type){  debugCodeCall("othersInsertsAreVisible",type);  return false;}  }
class C{  public boolean createSurface(SurfaceTexture surface){  if (mEgl == null) {    throw new RuntimeException("egl not initialized");  }  if (mEglDisplay == null) {    throw new RuntimeException("eglDisplay not initialized");  }  if (mEglConfig == null) {    throw new RuntimeException("mEglConfig not initialized");  }  destroySurfaceImp();  if (surface != null) {    mEglSurface=mEgl.eglCreateWindowSurface(mEglDisplay,mEglConfig,surface,null);  } else {    mEglSurface=null;  }  if (mEglSurface == null || mEglSurface == EGL10.EGL_NO_SURFACE) {    int error=mEgl.eglGetError();    if (error == EGL10.EGL_BAD_NATIVE_WINDOW) {      Log.e("EglHelper","createWindowSurface returned EGL_BAD_NATIVE_WINDOW.");    }    return false;  }  if (!mEgl.eglMakeCurrent(mEglDisplay,mEglSurface,mEglSurface,mEglContext)) {    logEglErrorAsWarning("EGLHelper","eglMakeCurrent",mEgl.eglGetError());    return false;  }  return true;}  }
class C{  public boolean isText(){  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void clearIndexToFirst(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  SolrInputDocument doc(SolrInputField... fields){  SolrInputDocument d=new SolrInputDocument();  for (  SolrInputField f : fields) {    d.put(f.getName(),f);  }  return d;}  }
class C{  public void testShiftRightNegNonZeroesMul32(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,1,0,0,0,0,0,0,0};  int aSign=-1;  int number=64;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean isAccessibleChildSelected(int i){  MenuElement me[]=MenuSelectionManager.defaultManager().getSelectedPath();  if (me != null) {    JMenuItem mi=JMenu.this.getItem(i);    for (int j=0; j < me.length; j++) {      if (me[j] == mi) {        return true;      }    }  }  return false;}  }
class C{  boolean start() throws IOException {  if (mThread != null) {    return false;  }  mServer=new ServerSocket(mPort,VIEW_SERVER_MAX_CONNECTIONS,InetAddress.getLocalHost());  mThread=new Thread(this,"Remote View Server [port=" + mPort + "]");  mThreadPool=Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);  mThread.start();  return true;}  }
class C{  static int minorAxisDistance(int direction,Rect source,Rect dest){switch (direction) {case View.FOCUS_LEFT:case View.FOCUS_RIGHT:    return Math.abs(((source.top + source.height() / 2) - ((dest.top + dest.height() / 2))));case View.FOCUS_UP:case View.FOCUS_DOWN:  return Math.abs(((source.left + source.width() / 2) - ((dest.left + dest.width() / 2))));}throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");}  }
class C{  public static PrincipalId toIdmPrincipalId(com.vmware.vim.sso.PrincipalId subject){  assert subject != null;  return new PrincipalId(subject.getName(),subject.getDomain());}  }
class C{  public LocaleResources(){  m_resources=new LinkedList<>();}  }
class C{  @Beta public static <K,V>ImmutableListMultimap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  return new Builder<K,V>().putAll(entries).build();}  }
class C{  private boolean findFieldById(int id){  assert !raw;  assert dataStart != start;  if (footerLen == 0)   return false;  if (userType) {    int order;    if (matching) {      int expOrder=matchingOrder++;      int realId=schema.fieldId(expOrder);      if (realId == id) {        if (expOrder == 0)         streamPosition(dataStart);        return true;      } else {        matching=false;        order=schema.order(id);      }    } else     order=schema.order(id);    return trySetUserFieldPosition(order);  } else   return trySetSystemFieldPosition(id);}  }
class C{  public Long lrem(final byte[] key,final long count,final byte[] value){  checkIsInMulti();  client.lrem(key,count,value);  return client.getIntegerReply();}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  private static int updateProviderRow(ContentResolver cr,long providerId,String providerFullName,String signUpUrl){  ContentValues values=new ContentValues(3);  values.put(Imps.Provider.FULLNAME,providerFullName);  values.put(Imps.Provider.SIGNUP_URL,signUpUrl);  values.put(Imps.Provider.CATEGORY,ImApp.IMPS_CATEGORY);  Uri uri=ContentUris.withAppendedId(Imps.Provider.CONTENT_URI,providerId);  return cr.update(uri,values,null,null);}  }
class C{  public void closeOpenedItems(){  touchListener.closeOpenedItems();}  }
class C{  public DnsSdTxtRecord(){  mData=new byte[0];}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public static boolean isDirectModeEnabled(){  if (directModeEnabled == null) {    directModeEnabled=Switch.Direct.enabled && !logCalls && !protectedMode;    if (veryVerbose) {      info("directModeEnabled = " + directModeEnabled);    }  }  return directModeEnabled;}  }
class C{  public static _BuildPhaseStatus fromString(final String value) throws SOAPSerializationException {  return (_BuildPhaseStatus)Enumeration.fromString(value,_BuildPhaseStatus.VALUES_TO_INSTANCES);}  }
class C{  @GridifySetToValue(gridName="GridifySetToValueTarget",threshold=2,splitSize=2) @Override public Long findPrimesInArray(Long[] input){  return findMaximumInArray0(input);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep updateNetworkSystem(@PathParam("id") URI id,NetworkSystemUpdate param) throws InternalException {  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  NetworkSystem device=_dbClient.queryObject(NetworkSystem.class,id);  ArgValidator.checkEntityNotNull(device,id,isIdEmbeddedInURL(id));  checkForDuplicateDevice(device.getId(),param.getIpAddress(),param.getPortNumber(),param.getSmisProviderIp(),param.getSmisPortNumber(),param.getName());  if (param.getName() != null) {    device.setLabel(param.getName());  }  if (param.getIpAddress() != null) {    device.setIpAddress(param.getIpAddress());  }  if (param.getPortNumber() != null) {    device.setPortNumber(param.getPortNumber());  }  if (param.getUserName() != null) {    device.setUsername(param.getUserName());  }  if (param.getPassword() != null) {    device.setPassword(param.getPassword());  }  if (param.getSmisProviderIp() != null) {    device.setSmisProviderIP(param.getSmisProviderIp());  }  if (param.getSmisPortNumber() != null) {    device.setSmisPortNumber(param.getSmisPortNumber());  }  if (param.getSmisUserName() != null) {    device.setSmisUserName(param.getSmisUserName());  }  if (param.getSmisPassword() != null) {    device.setSmisPassword(param.getSmisPassword());  }  if (param.getSmisUseSsl() != null) {    device.setSmisUseSSL(param.getSmisUseSsl());  }  device.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(device));  _dbClient.persistObject(device);  startNetworkSystem(device);  auditOp(OperationTypeEnum.UPDATE_NETWORK_SYSTEM,true,null,device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  return doDiscoverNetworkSystem(device);}  }
class C{  @PostMapping("/users/{id}/request-email-change") public void requestEmailChange(@PathVariable("id") U user,@RequestBody U updatedUser){  log.debug("Requesting email change ... ");  lemonService.requestEmailChange(user,updatedUser);}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,RequestParams params,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=new HttpPost(getURI(url));  if (params != null)   request.setEntity(paramsToEntity(params,responseHandler));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public Binding(String name,Object obj){  super(name,null);  this.boundObj=obj;}  }
class C{  protected void doOneByOneCrudRun(int count) throws Exception {  log("doOneByOneCrudRun NOT implemented");}  }
class C{  final public Token NEPrefixOpToken() throws ParseException {  Token t;switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case op_26:    t=jj_consume_token(op_26);  break;case op_29:t=jj_consume_token(op_29);break;case op_58:t=jj_consume_token(op_58);break;case CASESEP:t=jj_consume_token(CASESEP);break;case op_61:t=jj_consume_token(op_61);break;case op_76:t=jj_consume_token(op_76);break;case op_112:t=jj_consume_token(op_112);break;case op_113:t=jj_consume_token(op_113);break;case op_114:t=jj_consume_token(op_114);break;case op_115:t=jj_consume_token(op_115);break;case op_116:t=jj_consume_token(op_116);break;default :jj_la1[1]=jj_gen;jj_consume_token(-1);throw new ParseException();}{if (true) return t;}throw new Error("Missing return statement in function");}  }
class C{  void continuePendingRequestIfPossible(PermissionListener listener,Thread thread){  MultiplePermissionsListenerToPermissionListenerAdapter adapter=new MultiplePermissionsListenerToPermissionListenerAdapter(listener);  continuePendingRequestsIfPossible(adapter,thread);}  }
class C{  @Override public void perform(IR ir){  BasicBlock target=null;  Instruction prologue=null;  boolean didSomething=false;  for (Instruction instr=ir.firstInstructionInCodeOrder(), nextInstr=null; instr != null; instr=nextInstr) {    nextInstr=instr.nextInstructionInCodeOrder();switch (instr.getOpcode()) {case IR_PROLOGUE_opcode:      prologue=instr;    break;case SYSCALL_opcode:case CALL_opcode:  if (isTailRecursion(instr,ir)) {    if (target == null) {      target=prologue.getBasicBlock().splitNodeWithLinksAt(prologue,ir);    }    if (DEBUG)     dumpIR(ir,"Before transformation of " + instr);    nextInstr=transform(instr,prologue,target,ir);    if (DEBUG)     dumpIR(ir,"After transformation of " + instr);    didSomething=true;  }break;default :break;}}if (didSomething) {branchOpts.perform(ir,true);if (DEBUG) dumpIR(ir,"After cleanup");if (DEBUG) {VM.sysWrite("Eliminated tail calls in " + ir.method + "\n");}}}  }
class C{  private Object processInitialSelection(String initialModuleSpecifier){  IPath sourceFolderPath=sourceFolder.getFullPath();  IPath initialModulePath=new Path(initialModuleSpecifier);  if (initialModuleSpecifier.isEmpty()) {    return this.sourceFolder;  }  if (!WorkspaceWizardValidatorUtils.isValidFolderPath(initialModulePath)) {    return this.sourceFolder;  }  IPath fullPath=sourceFolderPath.append(new Path(initialModuleSpecifier));  if (!fullPath.hasTrailingSeparator()) {    IFile n4jsModuleFile=workspaceRoot.getFile(fullPath.addFileExtension(N4JSGlobals.N4JS_FILE_EXTENSION));    IFile n4jsdModuleFile=workspaceRoot.getFile(fullPath.addFileExtension(N4JSGlobals.N4JSD_FILE_EXTENSION));    if (n4jsModuleFile.exists()) {      return n4jsModuleFile;    }    if (n4jsdModuleFile.exists()) {      return n4jsdModuleFile;    }  }  if (isModuleFileSpecifier(initialModulePath)) {    initialModuleName=initialModulePath.lastSegment();    initialModulePath=initialModulePath.removeLastSegments(1);  }  IResource selection=this.sourceFolder;  IPath accumulatedPath=sourceFolderPath;  List<IPath> nonExistingSegmentPaths=new ArrayList<>();  for (Iterator<String> segmentIterator=Arrays.asList(initialModulePath.segments()).iterator(); segmentIterator.hasNext(); ) {    accumulatedPath=accumulatedPath.append(segmentIterator.next());    IResource nextSegmentResource=workspaceRoot.findMember(accumulatedPath);    if (null != nextSegmentResource && !(nextSegmentResource instanceof IContainer) && segmentIterator.hasNext()) {      MessageDialog.open(MessageDialog.ERROR,getShell(),SPECIFIER_OVERLAPS_WITH_FILE_TITLE,String.format(SPECIFIER_OVERLAPS_WITH_FILE_MESSAGE,initialModuleSpecifier,accumulatedPath),SWT.NONE);      return selection;    }    if (null != nextSegmentResource && nextSegmentResource.exists()) {      selection=nextSegmentResource;    } else {      nonExistingSegmentPaths.add(accumulatedPath.makeRelativeTo(selection.getFullPath()));    }  }  if (nonExistingSegmentPaths.size() > 0) {    boolean create=MessageDialog.open(MessageDialog.QUESTION,getShell(),NON_EXISTING_MODULE_LOCATION_TITLE,NON_EXISTING_MODULE_LOCATION_MESSAGE,SWT.NONE);    if (create) {      ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(getShell());      progressMonitorDialog.open();      IProgressMonitor progressMonitor=progressMonitorDialog.getProgressMonitor();      IPath deepestPath=nonExistingSegmentPaths.get(nonExistingSegmentPaths.size() - 1);      selection=createFolderPath(deepestPath,(IContainer)selection,progressMonitor);      progressMonitor.done();      progressMonitorDialog.close();    }  }  return selection;}  }
class C{  @Override public void start(){  super.start();  if (m_gameOver) {    return;  }  String victoryMessage=null;  final GameData data=getData();  if (isPacificTheater()) {    final PlayerID japanese=data.getPlayerList().getPlayerID(Constants.PLAYER_NAME_JAPANESE);    final PlayerAttachment pa=PlayerAttachment.get(japanese);    if (pa != null && pa.getVps() >= 22) {      victoryMessage="Axis achieve VP victory";      m_bridge.getHistoryWriter().startEvent(victoryMessage);      final Collection<PlayerID> winners=data.getAllianceTracker().getPlayersInAlliance(data.getAllianceTracker().getAlliancesPlayerIsIn(japanese).iterator().next());      signalGameOver(victoryMessage,winners,m_bridge);    }  }  if (isTotalVictory()) {    victoryMessage=" achieve TOTAL VICTORY with ";    checkVictoryCities(m_bridge,victoryMessage," Total Victory VCs");  }  if (isHonorableSurrender()) {    victoryMessage=" achieve an HONORABLE VICTORY with ";    checkVictoryCities(m_bridge,victoryMessage," Honorable Victory VCs");  }  if (isProjectionOfPower()) {    victoryMessage=" achieve victory through a PROJECTION OF POWER with ";    checkVictoryCities(m_bridge,victoryMessage," Projection of Power VCs");  }  if (isEconomicVictory()) {    final Iterator<String> allianceIter=data.getAllianceTracker().getAlliances().iterator();    String allianceName=null;    while (allianceIter.hasNext()) {      allianceName=allianceIter.next();      final int victoryAmount=getEconomicVictoryAmount(data,allianceName);      final Set<PlayerID> teamMembers=data.getAllianceTracker().getPlayersInAlliance(allianceName);      final Iterator<PlayerID> teamIter=teamMembers.iterator();      int teamProd=0;      while (teamIter.hasNext()) {        final PlayerID player=teamIter.next();        teamProd+=getProduction(player);        if (teamProd >= victoryAmount) {          victoryMessage=allianceName + " achieve economic victory";          m_bridge.getHistoryWriter().startEvent(victoryMessage);          final Collection<PlayerID> winners=data.getAllianceTracker().getPlayersInAlliance(allianceName);          signalGameOver(victoryMessage,winners,m_bridge);        }      }    }  }  if (isTriggeredVictory()) {    final Match<TriggerAttachment> endRoundDelegateTriggerMatch=new CompositeMatchAnd<>(AbstractTriggerAttachment.availableUses,AbstractTriggerAttachment.whenOrDefaultMatch(null,null),new CompositeMatchOr<TriggerAttachment>(TriggerAttachment.activateTriggerMatch(),TriggerAttachment.victoryMatch()));    final HashSet<TriggerAttachment> toFirePossible=TriggerAttachment.collectForAllTriggersMatching(new HashSet<>(data.getPlayerList().getPlayers()),endRoundDelegateTriggerMatch,m_bridge);    if (!toFirePossible.isEmpty()) {      final HashMap<ICondition,Boolean> testedConditions=TriggerAttachment.collectTestsForAllTriggers(toFirePossible,m_bridge);      final Set<TriggerAttachment> toFireTestedAndSatisfied=new HashSet<>(Match.getMatches(toFirePossible,AbstractTriggerAttachment.isSatisfiedMatch(testedConditions)));      TriggerAttachment.triggerActivateTriggerOther(testedConditions,toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);      TriggerAttachment.triggerVictory(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);    }  }  if (isWW2V2() || isWW2V3()) {    return;  }  final PlayerList playerList=data.getPlayerList();  final PlayerID russians=playerList.getPlayerID(Constants.PLAYER_NAME_RUSSIANS);  final PlayerID germans=playerList.getPlayerID(Constants.PLAYER_NAME_GERMANS);  final PlayerID british=playerList.getPlayerID(Constants.PLAYER_NAME_BRITISH);  final PlayerID japanese=playerList.getPlayerID(Constants.PLAYER_NAME_JAPANESE);  final PlayerID americans=playerList.getPlayerID(Constants.PLAYER_NAME_AMERICANS);  if (germans == null || russians == null || british == null || japanese == null || americans == null || playerList.size() > 5) {    return;  }  final boolean russia=TerritoryAttachment.getFirstOwnedCapitalOrFirstUnownedCapital(russians,data).getOwner().equals(russians);  final boolean germany=TerritoryAttachment.getFirstOwnedCapitalOrFirstUnownedCapital(germans,data).getOwner().equals(germans);  final boolean britain=TerritoryAttachment.getFirstOwnedCapitalOrFirstUnownedCapital(british,data).getOwner().equals(british);  final boolean japan=TerritoryAttachment.getFirstOwnedCapitalOrFirstUnownedCapital(japanese,data).getOwner().equals(japanese);  final boolean america=TerritoryAttachment.getFirstOwnedCapitalOrFirstUnownedCapital(americans,data).getOwner().equals(americans);  int count=0;  if (!russia) {    count++;  }  if (!britain) {    count++;  }  if (!america) {    count++;  }  victoryMessage=" achieve a military victory";  if (germany && japan && count >= 2) {    m_bridge.getHistoryWriter().startEvent("Axis" + victoryMessage);    final Collection<PlayerID> winners=data.getAllianceTracker().getPlayersInAlliance("Axis");    signalGameOver("Axis" + victoryMessage,winners,m_bridge);  }  if (russia && !germany && britain&& !japan&& america) {    m_bridge.getHistoryWriter().startEvent("Allies" + victoryMessage);    final Collection<PlayerID> winners=data.getAllianceTracker().getPlayersInAlliance("Allies");    signalGameOver("Allies" + victoryMessage,winners,m_bridge);  }}  }
class C{  public static void waitForAssignment(Object container,int partitions) throws Exception {  if (container.getClass().getSimpleName().equals("KafkaMessageListenerContainer")) {    waitForSingleContainerAssignment(container,partitions);    return;  }  List<?> containers=KafkaTestUtils.getPropertyValue(container,"containers",List.class);  int n=0;  int count=0;  Method getAssignedPartitions=null;  while (n++ < 600 && count < partitions) {    count=0;    for (    Object aContainer : containers) {      if (getAssignedPartitions == null) {        getAssignedPartitions=getAssignedPartitionsMethod(aContainer.getClass());      }      Collection<?> assignedPartitions=(Collection<?>)getAssignedPartitions.invoke(aContainer);      if (assignedPartitions != null) {        count+=assignedPartitions.size();      }    }    if (count < partitions) {      Thread.sleep(100);    }  }  assertThat(count).isEqualTo(partitions);}  }
class C{  public CopyOneFile(CopyOneFile other,DataInput in){  this.in=in;  this.dest=other.dest;  this.name=other.name;  this.out=other.out;  this.tmpName=other.tmpName;  this.metaData=other.metaData;  this.bytesCopied=other.bytesCopied;  this.bytesToCopy=other.bytesToCopy;  this.copyStartNS=other.copyStartNS;  this.buffer=other.buffer;}  }
class C{  public Time(long samples,int sampleRate){  set(samples,sampleRate);}  }
class C{  public boolean isAlternate(){  return alternate;}  }
class C{  public void reset(){  fontList.clear();  colorList.clear();  document.setLength(0);  lastWasControlWord=false;  lastFontIndex=0;  lastFGIndex=0;  lastBold=false;  lastItalic=false;  lastFontSize=DEFAULT_FONT_SIZE;  screenRes=Toolkit.getDefaultToolkit().getScreenResolution();}  }
class C{  public void valueForPathChanged(TreePath path,Object newValue){  MutableTreeNode aNode=(MutableTreeNode)path.getLastPathComponent();  aNode.setUserObject(newValue);  nodeChanged(aNode);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void endWrapper(Writer writer) throws IOException {  writer.write("});\n");  writer.write("}(typeof define==='function' && define.amd ? define : function (factory) {\n");  writer.write("if (typeof exports!=='undefined') { factory(require, exports, module);\n");  writer.write("} else { throw 'no module loader'; }\n");  writer.write("}));\n");}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedataexceedslengthofarg.class,args);}  }
class C{  public void notifyThrottleFound(DccThrottle t){  if (log.isDebugEnabled()) {    log.debug("control panel received new throttle");  }  _throttle=t;  this.setEnabled(true);  this.setSpeedValues((int)t.getSpeedIncrement(),(int)t.getSpeedSetting());  this.setSpeedSteps(t.getSpeedStepMode());  _throttle.addPropertyChangeListener(this);}  }
class C{  public void putUTCTime(Date d) throws IOException {  putTime(d,DerValue.tag_UtcTime);}  }
class C{  public int descriptorIndex(int i){  return ByteArray.readU16bit(info,i * 10 + 8);}  }
class C{  public Matrix4x3d reflect(Vector3dc normal,Vector3dc point){  return reflect(normal.x(),normal.y(),normal.z(),point.x(),point.y(),point.z());}  }
class C{  public Map<String,String> readNext() throws Exception {  String[] values;  do {    values=reader.readNext();    if (values == null) {      return null;    }    line++;  } while (values.length == 1 && values[0].length() == 0);  data.clear();  StringBuffer nextline=new StringBuffer();  for (int c=0; c < values.length; c++) {    if (values[c] != null && values[c].length() == 0) {      values[c]=null;    }    data.put(mappings[c],values[c]);    nextline.append(values[c]);  }  if (lines.contains(nextline.toString())) {    throw new Exception("Duplicate line definition: " + nextline.toString());  }  lines.add(nextline.toString());  for (  String reqCol : mandatory_cols) {    validateMandatoryValue(reqCol);  }  return data;}  }
class C{  public final void clear(){  this.forbiddenRulesSpecs=new ArrayList<>();  this.requiredRulesSpecs=new ArrayList<>();  this.tierSpecs=new ArrayList<>();}  }
class C{  @Override public String toString(){  return "(" + field + " "+ compOp+ " "+ value+ ")";}  }
class C{  public ValueMarker(double value,Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){  super(paint,stroke,outlinePaint,outlineStroke,alpha);  this.value=value;}  }
class C{  public void register(T item){  items.add(item);}  }
class C{  private ComplianceFeature checkUninstallAppPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String appIdentifier=null;  String name=null;  try {    JSONObject appData=new JSONObject(operation.getPayLoad().toString());    if (!appData.isNull(resources.getString(R.string.app_identifier))) {      appIdentifier=appData.getString(resources.getString(R.string.app_identifier));    }    if (!appData.isNull(resources.getString(R.string.app_identifier))) {      name=appData.getString(resources.getString(R.string.intent_extra_name));    }    if (!isAppInstalled(appIdentifier)) {      policy.setCompliance(true);    } else {      policy.setCompliance(false);      policy.setMessage(resources.getString(R.string.error_app_uninstall_policy) + name);    }  } catch (  JSONException e) {    policy.setCompliance(false);    throw new AndroidAgentException("Invalid JSON format.",e);  }  return policy;}  }
class C{  public lalr_state to_state(){  return _to_state;}  }
class C{  public static File testDir(String... parts){  File res=BASE_TEST_DIR;  if (parts != null) {    for (    String part : parts)     res=new File(res,part);  }  return res;}  }
class C{  void writeMaps(Enumeration maps) throws IOException {  if (maps != null) {    while (maps.hasMoreElements()) {      Map map=(Map)maps.nextElement();      String name=map.getName();      incrIndent();      indentSmart();      write("<map");      if (name != null) {        write(" name=\"");        write(name);        write("\">");      } else {        write('>');      }      writeLineSeparator();      incrIndent();      AttributeSet[] areas=map.getAreas();      if (areas != null) {        for (int counter=0, maxCounter=areas.length; counter < maxCounter; counter++) {          indentSmart();          write("<area");          writeAttributes(areas[counter]);          write("></area>");          writeLineSeparator();        }      }      decrIndent();      indentSmart();      write("</map>");      writeLineSeparator();      decrIndent();    }  }}  }
class C{  public final long incrementAndGet(){  for (; ; ) {    long current=get();    long next=current + 1;    if (compareAndSet(current,next))     return next;  }}  }
class C{  public void headphonesConnected(){}  }
class C{  protected void tearDown(){}  }
class C{  public boolean isEmpty(){  return count() == 0;}  }
class C{  public WeakCloseListener(Object resource){  _resourceRef=new WeakReference<Object>(resource);}  }
class C{  static double evaluate(Problem problem,NondominatedPopulation approximationSet){  boolean isInverted=true;  boolean isCustomHypervolume=(Settings.getHypervolume() != null) && (problem.getNumberOfObjectives() > 2);  if (isCustomHypervolume) {    isInverted=Settings.isHypervolumeInverted();  }  List<Solution> solutions=new ArrayList<Solution>();  for (  Solution solution : approximationSet) {    for (int i=0; i < solution.getNumberOfObjectives(); i++) {      if (solution.getObjective(i) > 1.0) {        continue;      }    }    Solution clone=solution.copy();    if (isInverted) {      invert(problem,clone);    }    solutions.add(clone);  }  if (isCustomHypervolume) {    return invokeNativeHypervolume(problem,solutions,isInverted);  } else {    return calculateHypervolume(solutions,solutions.size(),problem.getNumberOfObjectives());  }}  }
class C{  public java_cup.runtime.symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$do_action(act_num,parser,stack,top);}  }
class C{  private void checkAndComplainAboutJavaImplementation(){  final String vmName=System.getProperty("java.vm.name","unknown").toLowerCase(Locale.ENGLISH);  if ((vmName.indexOf("hotspot") < 0) && (vmName.indexOf("openjdk") < 0)) {    final String text="Stendhal is developed and tested on Sun Java and OpenJDK. You are using " + System.getProperty("java.vm.vendor","unknown") + " "+ System.getProperty("java.vm.name","unknown")+ " so there may be some problems like a black or grey screen.\n"+ " If you have coding experience with your JDK, we are looking for help.";    addEventLine(new HeaderLessEventLine(text,NotificationType.ERROR));  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TN4_CLASSIFIER;}  }
class C{  private String filterCommentContent(Type type,String comment){  Pattern[] replacements=(type == Type.JSDOC) ? JSDOC_REPLACEMENTS : COMMENT_REPLACEMENTS;  for (  Pattern p : replacements) {    comment=p.matcher(comment).replaceAll("${keep}");  }  return isWhitespaceOnly(comment) ? "" : comment;}  }
class C{  public boolean existsFile(String filename){  String filepath=fileHandler.append(getWorkspaceDirectory(),filename);  return fileHandler.exists(filepath);}  }
class C{  public Ling(Graph g,int samples){  numSamples=samples;  GraphWithParameters graphWP=new GraphWithParameters(g);  makeDataSet(graphWP);}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public Object read(InputNode node) throws Exception {  Instance type=factory.getInstance(node);  Object list=type.getInstance();  if (!type.isReference()) {    return read(node,list);  }  return list;}  }
class C{  private void computeFitnessForLastFront(){  Population front=new Population();  int rank=0;  for (  Solution solution : population) {    int solutionRank=(Integer)solution.getAttribute(FastNondominatedSorting.RANK_ATTRIBUTE);    if (solutionRank > rank) {      front.clear();      rank=solutionRank;    }    if (solutionRank == rank) {      front.add(solution);    }    solution.setAttribute(FitnessEvaluator.FITNESS_ATTRIBUTE,0.0);  }  fitnessEvaluator.evaluate(front);}  }
class C{  private void startDeviceActivityInternal(String path,String extraInfo){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    CapabilityApi.GetCapabilityResult result=Wearable.CapabilityApi.getCapability(googleApiClient,getApplicationContext().getString(R.string.show_detail_capability_name),CapabilityApi.FILTER_REACHABLE).await(GET_CAPABILITY_TIMEOUT_S,TimeUnit.SECONDS);    if (result.getStatus().isSuccess()) {      Set<Node> nodes=result.getCapability().getNodes();      for (      Node node : nodes) {        Wearable.MessageApi.sendMessage(googleApiClient,node.getId(),path,extraInfo.getBytes());      }    } else {      Log.e(TAG,"startDeviceActivityInternal() Failed to get capabilities, status: " + result.getStatus().getStatusMessage());    }    googleApiClient.disconnect();  }}  }
class C{  public void modifyContacts(){  mCommands[ContactsCommandType.MODIFY_COMMAND.ordinal()].execute(mModifyContacts.iterator());}  }
class C{  public void pushPacket(IPacket packet,IOFSwitch sw,OFBufferId bufferId,OFPort inPort,OFPort outPort,FloodlightContext cntx,boolean flush){  if (log.isTraceEnabled()) {    log.trace("PacketOut srcSwitch={} inPort={} outPort={}",new Object[]{sw,inPort,outPort});  }  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  actions.add(sw.getOFFactory().actions().buildOutput().setPort(outPort).setMaxLen(Integer.MAX_VALUE).build());  pob.setActions(actions);  pob.setBufferId(bufferId);  pob.setInPort(inPort);  if (pob.getBufferId() == OFBufferId.NO_BUFFER) {    if (packet == null) {      log.error("BufferId is not set and packet data is null. " + "Cannot send packetOut. " + "srcSwitch={} inPort={} outPort={}",new Object[]{sw,inPort,outPort});      return;    }    byte[] packetData=packet.serialize();    pob.setData(packetData);  }  counterPacketOut.increment();  sw.write(pob.build());}  }
class C{  public boolean isPanYEnabled(){  return mPanYEnabled;}  }
class C{  public static void copyCMYKimages(String target_dir){  final File cmyk_d=new File(cmyk_dir);  if (cmyk_d.exists()) {    final String[] file_list=cmyk_d.list();    if (file_list.length > 0) {      if (!target_dir.endsWith(separator)) {        target_dir+=separator;      }      final File test_d=new File(target_dir);      if (!test_d.exists()) {        test_d.mkdirs();      }    }    for (    final String aFile_list : file_list) {      final File source=new File(cmyk_dir + aFile_list);      final File dest=new File(target_dir + aFile_list);      source.renameTo(dest);    }  }}  }
class C{  private void createField(ResultSet rs){  GridFieldVO voF=GridFieldVO.createParameter(Env.getCtx(),m_WindowNo,rs);  GridField mField=new GridField(voF);  m_mFields.add(mField);  gbc.gridy=m_line++;  gbc.gridwidth=1;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.gridx=0;  gbc.weightx=0;  JLabel label=VEditorFactory.getLabel(mField);  if (label == null) {    gbc.insets=nullInset;    centerPanel.add(Box.createHorizontalStrut(12),gbc);  } else {    gbc.insets=labelInset;    centerPanel.add(label,gbc);  }  gbc.insets=fieldInset;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.gridwidth=1;  gbc.gridx=1;  gbc.weightx=1;  VEditor vEditor=VEditorFactory.getEditor(mField,false);  vEditor.addVetoableChangeListener(this);  mField.addPropertyChangeListener(vEditor);  centerPanel.add((Component)vEditor,gbc);  m_vEditors.add(vEditor);  Object defaultObject=mField.getDefault();  mField.setValue(defaultObject,true);  if (voF.isRange) {    gbc.gridx=2;    gbc.weightx=0;    gbc.fill=GridBagConstraints.NONE;    JLabel dash=new JLabel(" - ");    centerPanel.add(dash,gbc);    m_separators.add(dash);    gbc.gridx=3;    gbc.insets=fieldInsetRight;    gbc.weightx=1;    gbc.fill=GridBagConstraints.HORIZONTAL;    gbc.anchor=GridBagConstraints.WEST;    GridFieldVO voF2=GridFieldVO.createParameter(voF);    GridField mField2=new GridField(voF2);    m_mFields2.add(mField2);    VEditor vEditor2=VEditorFactory.getEditor(mField2,false);    mField2.addPropertyChangeListener(vEditor2);    centerPanel.add((Component)vEditor2,gbc);    m_vEditors2.add(vEditor2);    Object defaultObject2=mField2.getDefault();    mField2.setValue(defaultObject2,true);  } else {    m_separators.add(null);    m_mFields2.add(null);    m_vEditors2.add(null);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.463 -0400",hash_original_method="A0A4144F386BA40ADB58AED5A9A5F99C",hash_generated_method="F9F86953701F49F2CA7D82380BD8925B") private int handleW(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"WR")) {    result.append('R');    index+=2;  } else {    if (index == 0 && (isVowel(charAt(value,index + 1)) || contains(value,index,2,"WH"))) {      if (isVowel(charAt(value,index + 1))) {        result.append('A','F');      } else {        result.append('A');      }      index++;    } else     if ((index == value.length() - 1 && isVowel(charAt(value,index - 1))) || contains(value,index - 1,5,"EWSKI","EWSKY","OWSKI","OWSKY") || contains(value,0,3,"SCH")) {      result.appendAlternate('F');      index++;    } else     if (contains(value,index,4,"WICZ","WITZ")) {      result.append("TS","FX");      index+=4;    } else {      index++;    }  }  return index;}  }
class C{  protected boolean beforeSave(boolean newRecord){  MCostElement ce=(MCostElement)getM_CostElement();  if (m_manual) {    MAcctSchema as=new MAcctSchema(getCtx(),getC_AcctSchema_ID(),null);    MProduct product=MProduct.get(getCtx(),getM_Product_ID());    String CostingLevel=product.getCostingLevel(as);    if (MAcctSchema.COSTINGLEVEL_Client.equals(CostingLevel)) {      if (getAD_Org_ID() != 0 || getM_AttributeSetInstance_ID() != 0) {        log.saveError("CostingLevelClient","");        return false;      }    } else     if (MAcctSchema.COSTINGLEVEL_BatchLot.equals(CostingLevel)) {      if (getM_AttributeSetInstance_ID() == 0 && ce.isCostingMethod()) {        log.saveError("FillMandatory",Msg.getElement(getCtx(),"M_AttributeSetInstance_ID"));        return false;      }      if (getAD_Org_ID() != 0)       setAD_Org_ID(0);    }  }  if (m_manual && ce != null && ce.isCalculated()) {    log.saveError("Error",Msg.getElement(getCtx(),"IsCalculated"));    return false;  }  if (ce != null) {    if (ce.isCalculated() || MCostElement.COSTELEMENTTYPE_Material.equals(ce.getCostElementType()) && getPercent() != 0)     setPercent(0);  }  if (getPercent() != 0) {    if (getCurrentCostPrice().signum() != 0)     setCurrentCostPrice(Env.ZERO);    if (getFutureCostPrice().signum() != 0)     setFutureCostPrice(Env.ZERO);    if (getCumulatedAmt().signum() != 0)     setCumulatedAmt(Env.ZERO);    if (getCumulatedQty().signum() != 0)     setCumulatedQty(Env.ZERO);  }  return true;}  }
class C{  @Override public int size(){  return (this.to - this.from) / this.step + 1;}  }
class C{  public int size(){  return length;}  }
class C{  public VoiceSearchParams(String query,Bundle extras){  this.query=query;  if (TextUtils.isEmpty(query)) {    isAny=true;  } else {    if (extras == null) {      isUnstructured=true;    } else {      String genreKey;      if (Build.VERSION.SDK_INT >= 21) {        genreKey=MediaStore.EXTRA_MEDIA_GENRE;      } else {        genreKey="android.intent.extra.genre";      }      String mediaFocus=extras.getString(MediaStore.EXTRA_MEDIA_FOCUS);      if (TextUtils.equals(mediaFocus,MediaStore.Audio.Genres.ENTRY_CONTENT_TYPE)) {        isGenreFocus=true;        genre=extras.getString(genreKey);        if (TextUtils.isEmpty(genre)) {          genre=query;        }      } else       if (TextUtils.equals(mediaFocus,MediaStore.Audio.Artists.ENTRY_CONTENT_TYPE)) {        isArtistFocus=true;        genre=extras.getString(genreKey);        artist=extras.getString(MediaStore.EXTRA_MEDIA_ARTIST);      } else       if (TextUtils.equals(mediaFocus,MediaStore.Audio.Albums.ENTRY_CONTENT_TYPE)) {        isAlbumFocus=true;        album=extras.getString(MediaStore.EXTRA_MEDIA_ALBUM);        genre=extras.getString(genreKey);        artist=extras.getString(MediaStore.EXTRA_MEDIA_ARTIST);      } else       if (TextUtils.equals(mediaFocus,MediaStore.Audio.Media.ENTRY_CONTENT_TYPE)) {        isSongFocus=true;        song=extras.getString(MediaStore.EXTRA_MEDIA_TITLE);        album=extras.getString(MediaStore.EXTRA_MEDIA_ALBUM);        genre=extras.getString(genreKey);        artist=extras.getString(MediaStore.EXTRA_MEDIA_ARTIST);      } else {        isUnstructured=true;      }    }  }}  }
class C{  @DSComment("no action when removing callback") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:53.013 -0500",hash_original_method="A245758148D9D81E2CADBC67CD903CC7",hash_generated_method="097D859FD01791F8FF42C752BCE68E9A") @DSVerified public void unregisterListener(SensorEventListener listener,Sensor sensor){  unregisterListener((Object)listener,sensor);}  }
class C{  public boolean hasColor(){  return typeString.contains(COLOR);}  }
class C{  public RDFSVocabularyV2(){  super();}  }
class C{  protected boolean isPrimitiveArray(Class<?> c){  if (c.getComponentType().isArray()) {    return isPrimitiveArray(c.getComponentType());  } else {    return c.getComponentType().isPrimitive();  }}  }
class C{  public void end(String namespace,String name) throws Exception {  Object top=digester.pop();  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[LocaleConfigRule]{" + digester.getMatch() + "} Pop "+ top.getClass());  }  if (!CLASS_NAME.equals(top.getClass().getName())) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }}  }
class C{  public GasStack copy(){  return new GasStack(type,amount);}  }
class C{  synchronized void specificStart() throws IllegalStateException {  if (Cfg.DEBUG) {    Check.log(TAG + " (specificStart)");  }  numFailures=0;  unfinished=null;  if (recorder == null) {    final DateTime dateTime=new DateTime();    fId=dateTime.getFiledate();    if (Cfg.DEBUG) {      Check.log(TAG + " (specificStart) new recorder ");    }    recorder=new MediaRecorder();    recorder.reset();  }  if (recorder == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " (specificStart) error requesting recorder ");    }  }  recorder.setAudioSource(MediaRecorder.AudioSource.MIC);  recorder.setOutputFormat(MediaRecorder.OutputFormat.RAW_AMR);  recorder.setOnErrorListener(this);  recorder.setOnInfoListener(this);  recorder.setMaxFileSize(MAX_FILE_SIZE);  recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);  createSockets();  if (out_file != null) {    recorder.setOutputFile(out_file.getFilename());  } else {    recorder.reset();    recorder.release();    recorder=null;  }  try {    recorder.prepare();    recorder.start();  } catch (  Exception e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (specificStart) another apps may be blocking recording: " + e);    }    if (recorder != null) {      recorder.reset();      recorder.release();      recorder=null;    }    if (out_file != null) {      deleteSockets();    }  }}  }
class C{  public static boolean isStatusCompleted(int status){  return (status >= 200 && status < 300) || (status >= 400 && status < 600);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("From_C_BankAccount_ID"))     p_From_C_BankAccount_ID=para[i].getParameterAsInt(); else     if (name.equals("To_C_BankAccount_ID"))     p_To_C_BankAccount_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("C_Currency_ID"))     p_C_Currency_ID=para[i].getParameterAsInt(); else     if (name.equals("C_ConversionType_ID"))     p_C_ConversionType_ID=para[i].getParameterAsInt(); else     if (name.equals("C_Charge_ID"))     p_C_Charge_ID=para[i].getParameterAsInt(); else     if (name.equals("DocumentNo"))     p_DocumentNo=(String)para[i].getParameter(); else     if (name.equals("Amount"))     p_Amount=((BigDecimal)para[i].getParameter()); else     if (name.equals("Description"))     p_Description=(String)para[i].getParameter(); else     if (name.equals("StatementDate"))     p_StatementDate=(Timestamp)para[i].getParameter(); else     if (name.equals("DateAcct"))     p_DateAcct=(Timestamp)para[i].getParameter(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new DutchAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  @Nonnull public BugInstance addSourceLine(ClassContext classContext,MethodGen methodGen,String sourceFile,@Nonnull InstructionHandle handle){  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.fromVisitedInstruction(classContext,methodGen,sourceFile,handle);  if (sourceLineAnnotation != null) {    add(sourceLineAnnotation);  }  return this;}  }
class C{  public TIntIntHashMap(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public SOARecord(Name name,int dclass,long ttl,Name host,Name admin,long serial,long refresh,long retry,long expire,long minimum){  super(name,Type.SOA,dclass,ttl);  this.host=checkName("host",host);  this.admin=checkName("admin",admin);  this.serial=checkU32("serial",serial);  this.refresh=checkU32("refresh",refresh);  this.retry=checkU32("retry",retry);  this.expire=checkU32("expire",expire);  this.minimum=checkU32("minimum",minimum);}  }
class C{  public Iterator iterator(){  return new COWIterator(getArray(),0);}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  WmsLayerConfig config=new WmsLayerConfig();  config.serviceAddress="http://neowms.sci.gsfc.nasa.gov/wms/wms";  config.wmsVersion="1.1.1";  config.layerNames="MOD_LSTD_CLIM_M";  WmsLayer layer=new WmsLayer(new Sector().setFullSphere(),1e3,config);  wwd.getLayers().addLayer(layer);  return wwd;}  }
class C{  @DebugLog private void populatePlayerColorChoices(){  for (  PlayerColorChoices player : playersNeedingColor) {    if (player.type == TYPE_PLAYER_USER) {      Cursor cursor=null;      try {        cursor=context.getContentResolver().query(PlayerColors.buildUserUri(player.name),new String[]{PlayerColors.PLAYER_COLOR,PlayerColors.PLAYER_COLOR_SORT_ORDER},null,null,null);        while (cursor != null && cursor.moveToNext()) {          String color=cursor.getString(0);          if (colorsAvailable.contains(color)) {            player.colors.add(new ColorChoice(color,cursor.getInt(1)));          }        }      } catch (      Exception e) {        Timber.w(e,"Couldn't get the colors for %s",player);      } finally {        if (cursor != null) {          cursor.close();        }      }    }  }}  }
class C{  @NoInline static void raiseArrayIndexOutOfBoundsException(){  throw new java.lang.ArrayIndexOutOfBoundsException();}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  void clearCurrentTask(final ComponentUpdatePart update){  updater.notifyComponentUpdateFinished(update.getParent(),thread);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:33.966 -0500",hash_original_method="B3EBF796D65123BF085C9E1DA5AFCD9A",hash_generated_method="0948CF3D7320BE3292D71597EC8123A6") protected final void endOfInput(boolean reuseSocket) throws IOException {  if (cacheRequest != null) {    cacheBody.close();  }  httpEngine.release(reuseSocket);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Properties loadProperties(final InputStream in){  final Properties properties=new Properties();  try {    try {      properties.load(in);    }  finally {      in.close();    }  } catch (  IOException e) {    LOGGER.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_READING_PROPERTIES);  }  return properties;}  }
class C{  @Override public String toString(){  return "cudaMipmappedArray[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public void showFab(){  showFab(0,0);}  }
class C{  public LongTag(long value){  super(TagType.LONG);  this.value=value;}  }
class C{  public static void awaitQuiet(CountDownLatch latch){  boolean interrupted=false;  while (true) {    try {      latch.await();      break;    } catch (    InterruptedException ignored) {      interrupted=true;    }  }  if (interrupted)   Thread.currentThread().interrupt();}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ScheduledEventRestRep submitScheduledEvent(ScheduledEventCreateParam input){  ScheduledEventRestRep event=client.post(ScheduledEventRestRep.class,input,PathConstants.SCHEDULED_EVENTS_URL);  return event;}  }
class C{  public static MinecraftlyConfiguration load(@NonNull File file,@NonNull MinecraftlyCore core){  try {    return load(MinecraftlyUtil.readText(file),core);  } catch (  FileNotFoundException e) {    if (!file.exists()) {      boolean made=file.mkdirs() && file.delete();      if (!made)       core.getLogger().warning("Something went wrong when we were creating the file, it may already exist..");    }    MinecraftlyConfiguration defaultConfig=getDefaultConfiguration();    try (FileWriter fw=new FileWriter(file)){      fw.write(gson.toJson(getDefaultConfiguration()));    } catch (    IOException e1) {      core.getLogger().severe("Unable to save default the configuration!");    }    core.getLogger().warning("Saved the default configuration, please edit this to your liking and restart the server!");    return defaultConfig;  }catch (  IOException e1) {    core.getLogger().severe("Unable to save/load the configuration!");    throw new RuntimeException("Error making configuration!",e1);  }}  }
class C{  public static String generateSummary(Resources resources){  if (DataReductionProxySettings.getInstance().isDataReductionProxyEnabled()) {    String percent=DataReductionProxySettings.getInstance().getContentLengthPercentSavings();    return resources.getString(R.string.data_reduction_menu_item_summary,percent);  } else {    return (String)resources.getText(R.string.text_off);  }}  }
class C{  public AnnotationFormatError(String message,Throwable cause){  super(message,cause);}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return prj.message();}  }
class C{  void onRendererCrashed(){  if (mRestoreStartedAtMillis != -1) {    mRestoreStartedAtMillis=-1;  }}  }
class C{  public static boolean isNull(ExpandedNodeId nodeId){  return (nodeId == null) || nodeId.isNullNodeId();}  }
class C{  public void and(ShiftingBitSet set){  if (this == set)   return;  while (wordsInUse > set.wordsInUse)   words[--wordsInUse]=0;  for (int i=0; i < wordsInUse; i++)   words[i]&=set.words[i];  recalculateWordsInUse();  checkInvariants();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.884 -0500",hash_original_method="3612221F73372432993CCD6954A20D1D",hash_generated_method="83DCDFD75F880CF8148E4913B2FEBDD5") public final boolean hasCategory(String category){  return mCategories != null && mCategories.contains(category);}  }
class C{  public JEditTextArea(){  this(TextAreaDefaults.getDefaults());}  }
class C{  protected StringBuffer toString(StringBuffer buf,Node parent,int depth){  NodeList list;  Node node;  int i;  int n;  String indent;  NamedNodeMap atts;  indent="";  for (i=0; i < depth; i++)   indent+="   ";  if (parent.getNodeType() == Node.TEXT_NODE) {    if (!parent.getNodeValue().trim().equals(""))     buf.append(indent + parent.getNodeValue().trim() + "\n");  } else   if (parent.getNodeType() == Node.COMMENT_NODE) {    buf.append(indent + "<!--" + parent.getNodeValue()+ "-->\n");  } else {    buf.append(indent + "<" + parent.getNodeName());    if (parent.hasAttributes()) {      atts=parent.getAttributes();      for (n=0; n < atts.getLength(); n++) {        node=atts.item(n);        buf.append(" " + node.getNodeName() + "=\""+ node.getNodeValue()+ "\"");      }    }    if (parent.hasChildNodes()) {      list=parent.getChildNodes();      if ((list.getLength() == 1) && (list.item(0).getNodeType() == Node.TEXT_NODE)) {        buf.append(">");        buf.append(list.item(0).getNodeValue().trim());        buf.append("</" + parent.getNodeName() + ">\n");      } else {        buf.append(">\n");        for (n=0; n < list.getLength(); n++) {          node=list.item(n);          toString(buf,node,depth + 1);        }        buf.append(indent + "</" + parent.getNodeName()+ ">\n");      }    } else {      buf.append("/>\n");    }  }  return buf;}  }
class C{  public DirectBytes copy(){  return new DirectBytes((DirectMemory)memory.copy());}  }
class C{  public synchronized int size(){  assert indexToCoreKey.size() == coreKeyToShard.size();  return coreKeyToShard.size();}  }
class C{  public double eval(double params[]){  return (Math.exp(-Math.pow(params[0] + params[1],2.0)));}  }
class C{  public <T>OverlayUI<T> overlayUI(Pane ui,T controller){  checkGuiThread();  OverlayUI<T> pair=new OverlayUI<T>(ui,controller);  try {    if (controller != null) {      controller.getClass().getField("overlayUI").set(controller,pair);    }  } catch (  IllegalAccessException|NoSuchFieldException ignored) {    ignored.printStackTrace();  }  pair.show();  return pair;}  }
class C{  public static Color determineColor(String hexString){  assert Pattern.matches("#[0-9abcdefABCDEF]{6}+",hexString) : "Can't parse color " + hexString;  int r, g, b;  r=Integer.valueOf(hexString.substring(1,3),16).intValue();  g=Integer.valueOf(hexString.substring(3,5),16).intValue();  b=Integer.valueOf(hexString.substring(5,7),16).intValue();  return new Color(r,g,b);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.214 -0400",hash_original_method="76F733626E55C37068A2041F429F0883",hash_generated_method="7D242DF86685E2C7BC5DE097D7A8F9D8") public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public static void addFiles(String extension,File file,LinkedList<File> files){  if (file.isDirectory()) {    for (    File f : file.listFiles()) {      addFiles(extension,f,files);    }  } else   if (file.getName().endsWith(extension)) {    files.add(file);  }}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_RECORD_ENTITY_2__TRACE_RECORD_1:    return getTrace_record_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ClientMessage receiveMessage(SimpleString queueName){  final boolean browseOnly=false;  return getInternalClient().receiveMessage(queueName,defaultReceiveTimeout,browseOnly);}  }
class C{  protected void saveCurrentPlot(){  final SVGPlot currentPlot=svgCanvas.getPlot();  if (currentPlot == null) {    LOG.warning("saveCurrentPlot() called without a visible plot!");    return;  }  SVGSaveDialog.showSaveDialog(currentPlot,512,512);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void selectSeverity(int severity){  int index=severity - 1;  for (int i=0; i < severityItemList.length; ++i) {    MenuItem menuItem=severityItemList[i];    menuItem.setEnabled(true);    menuItem.setSelection(i == index);  }}  }
class C{  public static Bitmap createDrawableBitmap(Drawable drawable){  int width=drawable.getIntrinsicWidth();  int height=drawable.getIntrinsicHeight();  if (width <= 0 || height <= 0) {    return null;  }  float scale=Math.min(1f,((float)MAX_IMAGE_SIZE) / (width * height));  if (drawable instanceof BitmapDrawable && scale == 1f) {    return ((BitmapDrawable)drawable).getBitmap();  }  int bitmapWidth=(int)(width * scale);  int bitmapHeight=(int)(height * scale);  Bitmap bitmap=Bitmap.createBitmap(bitmapWidth,bitmapHeight,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  Rect existingBounds=drawable.getBounds();  int left=existingBounds.left;  int top=existingBounds.top;  int right=existingBounds.right;  int bottom=existingBounds.bottom;  drawable.setBounds(0,0,bitmapWidth,bitmapHeight);  drawable.draw(canvas);  drawable.setBounds(left,top,right,bottom);  return bitmap;}  }
class C{  public void addTargetListener(String ns,String an,boolean isCSS,AnimationTargetListener l){  if (isCSS && svgContext != null) {    ((SVGAnimationTargetContext)svgContext).addTargetListener(an,l);  } else {    super.addTargetListener(ns,an,isCSS,l);  }}  }
class C{  @Override public String toString(){  return toString(size(),false);}  }
class C{  protected boolean isReflex(Vector2 p0,Vector2 p,Vector2 p1){  return right(p1,p0,p);}  }
class C{  public ins addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public void testBug69298() throws Exception {  Connection testConn;  createFunction("testBug69298_func","(param_func INT) RETURNS INT COMMENT 'testBug69298_func comment' DETERMINISTIC RETURN 1");  createProcedure("testBug69298_proc","(IN param_proc INT) COMMENT 'testBug69298_proc comment' SELECT 1");  assertFalse("Property useInformationSchema should be false",((ConnectionProperties)this.conn).getUseInformationSchema());  assertTrue("Property getProceduresReturnsFunctions should be true",((ConnectionProperties)this.conn).getGetProceduresReturnsFunctions());  checkGetFunctionsForBug69298("Std. Connection MetaData",this.conn);  checkGetFunctionColumnsForBug69298("Std. Connection MetaData",this.conn);  checkGetProceduresForBug69298("Std. Connection MetaData",this.conn);  checkGetProcedureColumnsForBug69298("Std. Connection MetaData",this.conn);  testConn=getConnectionWithProps("useInformationSchema=true");  assertTrue("Property useInformationSchema should be true",((ConnectionProperties)testConn).getUseInformationSchema());  assertTrue("Property getProceduresReturnsFunctions should be true",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkGetFunctionsForBug69298("Prop. useInfoSchema(1) MetaData",testConn);  checkGetFunctionColumnsForBug69298("Prop. useInfoSchema(1) MetaData",testConn);  checkGetProceduresForBug69298("Prop. useInfoSchema(1) MetaData",testConn);  checkGetProcedureColumnsForBug69298("Prop. useInfoSchema(1) MetaData",testConn);  testConn.close();  testConn=getConnectionWithProps("getProceduresReturnsFunctions=false");  assertFalse("Property useInformationSchema should be false",((ConnectionProperties)testConn).getUseInformationSchema());  assertFalse("Property getProceduresReturnsFunctions should be false",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkGetFunctionsForBug69298("Prop. getProcRetFunc(0) MetaData",testConn);  checkGetFunctionColumnsForBug69298("Prop. getProcRetFunc(0) MetaData",testConn);  checkGetProceduresForBug69298("Prop. getProcRetFunc(0) MetaData",testConn);  checkGetProcedureColumnsForBug69298("Prop. getProcRetFunc(0) MetaData",testConn);  testConn.close();  testConn=getConnectionWithProps("useInformationSchema=true,getProceduresReturnsFunctions=false");  assertTrue("Property useInformationSchema should be true",((ConnectionProperties)testConn).getUseInformationSchema());  assertFalse("Property getProceduresReturnsFunctions should be false",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkGetFunctionsForBug69298("Prop. useInfoSchema(1) + getProcRetFunc(0) MetaData",testConn);  checkGetFunctionColumnsForBug69298("Prop. useInfoSchema(1) + getProcRetFunc(0) MetaData",testConn);  checkGetProceduresForBug69298("Prop. useInfoSchema(1) + getProcRetFunc(0) MetaData",testConn);  checkGetProcedureColumnsForBug69298("Prop. useInfoSchema(1) + getProcRetFunc(0) MetaData",testConn);  testConn.close();}  }
class C{  public static boolean isLocalContactUri(Uri uri){  return isLocalContentUri(uri) && ContactsContract.AUTHORITY.equals(uri.getAuthority()) && !uri.getPath().startsWith(LOCAL_CONTACT_IMAGE_PREFIX);}  }
class C{  public boolean isInstallStarted(){  return isInstallStarted;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ObjectLink decodeObjlnk(byte[] value) throws TlvException {  ByteBuffer bff=ByteBuffer.allocate(4).order(ByteOrder.BIG_ENDIAN);  bff.put(value);  int val1=bff.getShort(0);  int val2=bff.getShort(2);  return new ObjectLink(val1,val2);}  }
class C{  public boolean accept(long value){  return value >= min && value <= max;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int nRows, nCols;  double z;  int progress=0;  int i, a;  double noData=-32768;  double outputNoData=-32768;  String inputDataString=null;  int numImages=0;  double sumOfWeights=0;  double d=0;  double weight=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String[] dataSplit=args[0].split(";");  outputHeader=args[1];  if (outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  ArrayList<String> imageFiles=new ArrayList<>();  ArrayList<Double> weights=new ArrayList<>();  for (a=0; a < dataSplit.length; a+=2) {    if (!dataSplit[a].trim().equals("") && !dataSplit[a].trim().toLowerCase().equals("not specified")) {      imageFiles.add(dataSplit[a]);      weights.add(Double.parseDouble(dataSplit[a + 1]));      sumOfWeights+=weights.get(numImages);      numImages++;    }  }  for (a=0; a < numImages; a++) {    d=weights.get(a) / sumOfWeights;    weights.set(a,d);  }  try {    image=new WhiteboxRaster(imageFiles.get(0),"r");    nRows=image.getNumberRows();    nCols=image.getNumberColumns();    outputNoData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",imageFiles.get(0),WhiteboxRaster.DataType.FLOAT,0);    for (i=0; i < numImages; i++) {      progress=(int)(100f * (i + 1) / numImages);      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      weight=weights.get(i);      if (i > 0) {        image=new WhiteboxRaster(imageFiles.get(i),"r");        noData=image.getNoDataValue();        if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      double[] data=null;      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=output.getValue(row,col);            if (z != outputNoData) {              output.setValue(row,col,z + data[col] * weight);            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final int pos(){  return pos;}  }
class C{  @Override public boolean supportsSubqueriesInExists(){  debugCodeCall("supportsSubqueriesInExists");  return true;}  }
class C{  @Nullable private Map<String,String> addResources(ClassLoader ldr,GridUriDeploymentUnitDescriptor desc,Class<?>[] clss) throws IgniteSpiException {  assert ldr != null;  assert desc != null;  assert clss != null;  Map<String,Class<?>> alias2Cls=new HashMap<>(clss.length * 2,1.0f);  for (  Class<?> cls : clss) {    String alias=null;    if (ComputeTask.class.isAssignableFrom(cls)) {      ComputeTaskName nameAnn=U.getAnnotation(cls,ComputeTaskName.class);      if (nameAnn != null)       alias=nameAnn.value();    }    if (alias != null && alias2Cls.containsKey(alias) && !alias2Cls.get(alias).equals(cls))     throw new IgniteSpiException("Failed to register resources with given task name " + "(found another class with same task name) [taskName=" + alias + ", cls1="+ cls.getName()+ ", cls2="+ alias2Cls.get(alias).getName()+ ", ldr="+ ldr+ ']');    if (alias != null) {      alias2Cls.put(alias,cls);      desc.addResource(alias,cls);    } else     desc.addResource(cls);  }  Map<String,String> newRsrcs=null;  for (  Entry<String,Class<?>> entry : alias2Cls.entrySet()) {    String newAlias=entry.getKey();    String newName=entry.getValue().getName();    Class<?> cls=desc.getResourceByAlias(newAlias);    if (cls != null) {      if (!cls.getName().equals(newName))       throw new IgniteSpiException("Failed to register resources with given task name " + "(found another class with same task name in the same class loader) [taskName=" + newAlias + ", existingCls="+ cls.getName()+ ", newCls="+ newName+ ", ldr="+ ldr+ ']');    } else {      if (newRsrcs == null)       newRsrcs=U.newHashMap(alias2Cls.size() + clss.length);      newRsrcs.put(newAlias,newName);      newRsrcs.put(newName,newName);    }  }  return newRsrcs;}  }
class C{  public String fontName(){  return null;}  }
class C{  protected void handleStatusAction(SolrQueryRequest req,SolrQueryResponse rsp) throws SolrException {  SolrParams params=req.getParams();  String cname=params.get(CoreAdminParams.CORE);  String indexInfo=params.get(CoreAdminParams.INDEX_INFO);  boolean isIndexInfoNeeded=Boolean.parseBoolean(null == indexInfo ? "true" : indexInfo);  NamedList<Object> status=new SimpleOrderedMap<>();  Map<String,Exception> failures=new HashMap<>();  for (  Map.Entry<String,CoreContainer.CoreLoadFailure> failure : coreContainer.getCoreInitFailures().entrySet()) {    failures.put(failure.getKey(),failure.getValue().exception);  }  try {    if (cname == null) {      rsp.add("defaultCoreName",coreContainer.getDefaultCoreName());      for (      String name : coreContainer.getAllCoreNames()) {        status.add(name,getCoreStatus(coreContainer,name,isIndexInfoNeeded));      }      rsp.add("initFailures",failures);    } else {      failures=failures.containsKey(cname) ? Collections.singletonMap(cname,failures.get(cname)) : Collections.<String,Exception>emptyMap();      rsp.add("initFailures",failures);      status.add(cname,getCoreStatus(coreContainer,cname,isIndexInfoNeeded));    }    rsp.add("status",status);  } catch (  Exception ex) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error handling 'status' action ",ex);  }}  }
class C{  private static String generateEvent(Long currTime,int delayInMillis){  TeamInfo team=randomTeam(liveTeams);  String teamName=team.getTeamName();  String user;  int PARSE_ERROR_RATE=900000;  String robot=team.getRobot();  if (robot != null) {    if (random.nextInt(team.numMembers() / 2) == 0) {      user=robot;    } else {      user=team.getRandomUser();    }  } else {    user=team.getRandomUser();  }  String event=user + "," + teamName+ ","+ random.nextInt(MAX_SCORE);  if (random.nextInt(PARSE_ERROR_RATE) == 0) {    System.out.println("Introducing a parse error.");    event="THIS LINE REPRESENTS CORRUPT DATA AND WILL CAUSE A PARSE ERROR";  }  return addTimeInfoToEvent(event,currTime,delayInMillis);}  }
class C{  public void tagErrored(Tag tag){  if (lastTag == tag)   lastTag=null;}  }
class C{  public boolean isInRadius(Entity e){  if (e == null)   return false;  if (e == focalPoint || e == caster)   return true;  return isInRadius(e.posX,e.posY,e.posZ);}  }
class C{  public void HorizontalEmbedded(Properties ctx,int windowNo,GridWindow gridWindow,int adTabId,int tabIndex,IADTabPanel tabPanel){  HorizontalEmbeddedPanel ep=new HorizontalEmbeddedPanel();  ep.tabPanel=tabPanel;  ep.adTabId=adTabId;  ep.tabIndex=tabIndex;  ep.gridWindow=gridWindow;  org.zkoss.zul.Div parentRow=horizontalIncludedTab.get(adTabId);  ep.divComponent=parentRow;  horizontalIncludedPanel.add(ep);  if (tabPanel instanceof ADTabPanel) {    ADTabPanel atp=(ADTabPanel)tabPanel;    atp.listPanel.setPageSize(-1);  }  ADWindowPanel panel=new ADWindowPanel(ctx,windowNo,gridWindow,tabIndex,tabPanel);  ep.windowPanel=panel;  if (parentRow != null) {    createHorizontalEmbeddedPanelUI(ep);    if (active)     activateChild(true,ep);  }}  }
class C{  public Property dayOfMonth(){  return new Property(this,getChronology().dayOfMonth());}  }
class C{  public final void addElement(final int value){  checkSize(current_item);  items[current_item]=value;  current_item++;  checkSize(current_item);}  }
class C{  private boolean delayMessage(GridIoMessage msg){  Object origMsg=msg.message();  return delay && ((origMsg instanceof GridNearAtomicUpdateRequest) || (origMsg instanceof GridDhtAtomicUpdateRequest));}  }
class C{  protected void readGraphicControlExt(){  read();  int packed=read();  dispose=(packed & 0x1c) >> 2;  if (dispose == 0) {    dispose=1;  }  transparency=(packed & 1) != 0;  delay=readShort() * 10;  transIndex=read();  read();}  }
class C{  public Enumeration<PermissionEntry> permissionElements(){  return permissionEntries.elements();}  }
class C{  public void mouseMoved(MouseEvent e){  getHandler().mouseMoved(e);}  }
class C{  public void testUndefinedTypeAccessErrors() throws Exception {  final ContentProviderStorage storage=new ContentProviderStorage(getProviderMockContext(),"undefined",TrayStorage.Type.UNDEFINED);  try {    storage.put(TEST_KEY2,TEST_STRING);    fail();  } catch (  TrayRuntimeException e) {    assertTrue(e.getMessage().contains("UNDEFINED"));  }  try {    storage.put(new TrayItem("undefined",TEST_KEY2,null,TEST_STRING,null,null));    fail();  } catch (  TrayRuntimeException e) {    assertTrue(e.getMessage().contains("UNDEFINED"));  }  try {    final ContentProviderStorage someModule=new ContentProviderStorage(getProviderMockContext(),"someModule",TrayStorage.Type.USER);    someModule.put(TEST_KEY,TEST_STRING);    storage.annex(someModule);    fail();  } catch (  TrayRuntimeException e) {    assertTrue(e.getMessage().contains("UNDEFINED"));  }  try {    storage.setVersion(10);    fail();  } catch (  TrayRuntimeException e) {    assertTrue(e.getMessage().contains("UNDEFINED"));  }  assertEquals(TrayStorage.Type.UNDEFINED,storage.getType());  storage.get(TEST_KEY);  storage.getAll();  storage.getVersion();  storage.getModuleName();}  }
class C{  public void clearCache(){  try {    Class<?> klass=java.net.URLClassLoader.class;    Field ucp=klass.getDeclaredField("ucp");    ucp.setAccessible(true);    Object sunMiscURLClassPath=ucp.get(this);    Field loaders=sunMiscURLClassPath.getClass().getDeclaredField("loaders");    loaders.setAccessible(true);    Object collection=loaders.get(sunMiscURLClassPath);    for (    Object sunMiscURLClassPathJarLoader : ((Collection<?>)collection).toArray()) {      try {        Field loader=sunMiscURLClassPathJarLoader.getClass().getDeclaredField("jar");        loader.setAccessible(true);        Object jarFile=loader.get(sunMiscURLClassPathJarLoader);        ((JarFile)jarFile).close();      } catch (      Throwable t) {        t.printStackTrace();      }    }  } catch (  Throwable t) {    t.printStackTrace();  }  return;}  }
class C{  private void addEndpoint(Map endPoints,Coordinate p,boolean isClosed){  EndpointInfo eiInfo=(EndpointInfo)endPoints.get(p);  if (eiInfo == null) {    eiInfo=new EndpointInfo(p);    endPoints.put(p,eiInfo);  }  eiInfo.addEndpoint(isClosed);}  }
class C{  public static void play(@NonNull final Animator animator,@NonNull final View view){  prepareActions(animator,view);  animator.start();}  }
class C{  @Override public void write(OutputStream out,Drawing drawing) throws IOException {  write(out,drawing,drawing.getChildren(),null,null);}  }
class C{  @Override protected void showPopUp(Positionable p,MouseEvent event){  if (!((JComponent)p).isVisible()) {    return;  }  JPopupMenu popup=new JPopupMenu();  PositionablePopupUtil util=p.getPopupUtility();  if (p.isEditable()) {    if (p.doViemMenu()) {      popup.add(p.getNameString());      setPositionableMenu(p,popup);      if (p.isPositionable()) {        setShowCoordinatesMenu(p,popup);        setShowAlignmentMenu(p,popup);      }      setDisplayLevelMenu(p,popup);      setHiddenMenu(p,popup);      popup.addSeparator();      setCopyMenu(p,popup);    }    boolean popupSet=false;    popupSet|=p.setRotateMenu(popup);    popupSet|=p.setScaleMenu(popup);    if (popupSet) {      popup.addSeparator();      popupSet=false;    }    popupSet=p.setEditItemMenu(popup);    if (popupSet) {      popup.addSeparator();      popupSet=false;    }    if (p instanceof PositionableLabel) {      PositionableLabel pl=(PositionableLabel)p;      if (!pl.isIcon()) {        popupSet|=setTextAttributes(pl,popup);        if (p instanceof MemoryIcon) {          popupSet|=p.setTextEditMenu(popup);        }      } else       if (p instanceof SensorIcon) {        popup.add(CoordinateEdit.getTextEditAction(p,"OverlayText"));        if (pl.isText()) {          popupSet|=setTextAttributes(p,popup);        }      } else {        popupSet=p.setTextEditMenu(popup);      }    } else     if (p instanceof PositionableJPanel) {      popupSet|=setTextAttributes(p,popup);    }    if (p instanceof LinkingObject) {      ((LinkingObject)p).setLinkMenu(popup);    }    if (popupSet) {      popup.addSeparator();      popupSet=false;    }    p.setDisableControlMenu(popup);    if (util != null) {      util.setAdditionalEditPopUpMenu(popup);    }    p.showPopUp(popup);    if (p.doViemMenu()) {      setShowTooltipMenu(p,popup);      setRemoveMenu(p,popup);    }  } else {    if (p instanceof LocoIcon) {      setCopyMenu(p,popup);    }    p.showPopUp(popup);    if (util != null) {      util.setAdditionalViewPopUpMenu(popup);    }  }  popup.show((Component)p,p.getWidth() / 2 + (int)((getPaintScale() - 1.0) * p.getX()),p.getHeight() / 2 + (int)((getPaintScale() - 1.0) * p.getY()));  _currentSelection=null;}  }
class C{  public int indexOfAny(CharSet charSet){  return indexOfAny(charSet,0,length());}  }
class C{  public Manifold(Manifold other){  points=new ManifoldPoint[Settings.maxManifoldPoints];  localNormal=other.localNormal.clone();  localPoint=other.localPoint.clone();  pointCount=other.pointCount;  type=other.type;  for (int i=0; i < Settings.maxManifoldPoints; i++) {    points[i]=new ManifoldPoint(other.points[i]);  }}  }
class C{  protected void buildClassifier(Instances insts,int cl1,int cl2,boolean fitLogistic,int numFolds,int randomSeed) throws Exception {  m_bUp=-1;  m_bLow=1;  m_b=0;  m_alpha=null;  m_data=null;  m_weights=null;  m_errors=null;  m_logistic=null;  m_I0=null;  m_I1=null;  m_I2=null;  m_I3=null;  m_I4=null;  m_sparseWeights=null;  m_sparseIndices=null;  m_sumOfWeights=insts.sumOfWeights();  m_class=new double[insts.numInstances()];  m_iUp=-1;  m_iLow=-1;  for (int i=0; i < m_class.length; i++) {    if ((int)insts.instance(i).classValue() == cl1) {      m_class[i]=-1;      m_iLow=i;    } else     if ((int)insts.instance(i).classValue() == cl2) {      m_class[i]=1;      m_iUp=i;    } else {      throw new Exception("This should never happen!");    }  }  if ((m_iUp == -1) || (m_iLow == -1)) {    if (m_iUp != -1) {      m_b=-1;    } else     if (m_iLow != -1) {      m_b=1;    } else {      m_class=null;      return;    }    if (m_KernelIsLinear) {      m_sparseWeights=new double[0];      m_sparseIndices=new int[0];      m_class=null;    } else {      m_supportVectors=new SMOset(0);      m_alpha=new double[0];      m_class=new double[0];    }    if (fitLogistic) {      fitLogistic(insts,cl1,cl2,numFolds,new Random(randomSeed));    }    return;  }  m_data=insts;  if (m_KernelIsLinear) {    m_weights=new double[m_data.numAttributes()];  } else {    m_weights=null;  }  m_alpha=new double[m_data.numInstances()];  m_supportVectors=new SMOset(m_data.numInstances());  m_I0=new SMOset(m_data.numInstances());  m_I1=new SMOset(m_data.numInstances());  m_I2=new SMOset(m_data.numInstances());  m_I3=new SMOset(m_data.numInstances());  m_I4=new SMOset(m_data.numInstances());  m_sparseWeights=null;  m_sparseIndices=null;  m_kernel.buildKernel(m_data);  m_errors=new double[m_data.numInstances()];  m_errors[m_iLow]=1;  m_errors[m_iUp]=-1;  for (int i=0; i < m_class.length; i++) {    if (m_class[i] == 1) {      m_I1.insert(i);    } else {      m_I4.insert(i);    }  }  int numChanged=0;  boolean examineAll=true;  while ((numChanged > 0) || examineAll) {    numChanged=0;    if (examineAll) {      for (int i=0; i < m_alpha.length; i++) {        if (examineExample(i)) {          numChanged++;        }      }    } else {      for (int i=0; i < m_alpha.length; i++) {        if ((m_alpha[i] > 0) && (m_alpha[i] < m_C * m_data.instance(i).weight())) {          if (examineExample(i)) {            numChanged++;          }          if (m_bUp > m_bLow - 2 * m_tol) {            numChanged=0;            break;          }        }      }    }    if (examineAll) {      examineAll=false;    } else     if (numChanged == 0) {      examineAll=true;    }  }  m_b=(m_bLow + m_bUp) / 2.0;  m_kernel.clean();  m_errors=null;  m_I0=m_I1=m_I2=m_I3=m_I4=null;  if (m_KernelIsLinear) {    m_supportVectors=null;    m_class=null;    if (!m_checksTurnedOff) {      m_data=new Instances(m_data,0);    } else {      m_data=null;    }    double[] sparseWeights=new double[m_weights.length];    int[] sparseIndices=new int[m_weights.length];    int counter=0;    for (int i=0; i < m_weights.length; i++) {      if (m_weights[i] != 0.0) {        sparseWeights[counter]=m_weights[i];        sparseIndices[counter]=i;        counter++;      }    }    m_sparseWeights=new double[counter];    m_sparseIndices=new int[counter];    System.arraycopy(sparseWeights,0,m_sparseWeights,0,counter);    System.arraycopy(sparseIndices,0,m_sparseIndices,0,counter);    m_weights=null;    m_alpha=null;  }  if (fitLogistic) {    fitLogistic(insts,cl1,cl2,numFolds,new Random(randomSeed));  }}  }
class C{  public static Edge undirectedEdge(Node nodeA,Node nodeB){  return new Edge(nodeA,nodeB,Endpoint.TAIL,Endpoint.TAIL);}  }
class C{  public PBKDF2Params(byte[] salt,int iterationCount,int keyLength){  this(salt,iterationCount);  this.keyLength=new ASN1Integer(keyLength);}  }
class C{  private void initAlignment(Alignment alignment,int[] treeIndex){  int numSeqs=alignment.getSequenceCount();  int numSites=alignment.getSiteCount();  DataType dataType=alignment.getDataType();  int numStates=dataType.getStateCount();  iAlignment=new int[numSeqs][numSites];  for (int i=0; i < numSeqs; i++) {    for (int j=0; j < numSites; j++) {      iAlignment[treeIndex[i]][j]=alignment.getState(i,j);    }  }}  }
class C{  public Header(Data o) throws FitsException {  o.fillHeader(this);}  }
class C{  public void addHeaders(String[] headers){  if (this.headers == null) {    this.headers=new ArrayList<>();  }  this.headers.clear();  Collections.addAll(this.headers,headers);}  }
class C{  public static Object readAnnotationValue(Annotation annotation,String name){  try {    Method method=annotation.annotationType().getDeclaredMethod(name);    return method.invoke(annotation);  } catch (  Exception ignore) {    return null;  }}  }
class C{  public static Object[] ordinalArray(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    ColumnMetadata md=((Table)tuples).getMetadata(field);    return md.getOrdinalArray();  } else {    return ordinalArray(tuples.tuples(),field,cmp);  }}  }
class C{  public void appendToNalUnit(byte[] data,int offset,int limit){  if (!isFilling) {    return;  }  int readLength=limit - offset;  if (nalData.length < nalLength + readLength) {    nalData=Arrays.copyOf(nalData,(nalLength + readLength) * 2);  }  System.arraycopy(data,offset,nalData,nalLength,readLength);  nalLength+=readLength;}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public void testAckedMessageAreConsumed() throws JMSException {  connection.start();  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  Queue queue=session.createQueue("test");  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  session.close();  session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  msg=consumer.receive(1000);  assertNull(msg);  session.close();}  }
class C{  public void resetToPreferredSizes(){  doReset=true;}  }
class C{  protected void clearResults(){  setStatus("",false);  if (mResultBar != null) {    mResultBar.clearMatchRects();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JavaRDD<Point> rePartition(Integer partitions){  return this.rawPointRDD.repartition(partitions);}  }
class C{  public void testDivideRoundFloorNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_FLOOR);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrname.class,args);}  }
class C{  @Override public boolean execute(String[] params,String remainder){  String oldValue=WtWindowManager.getInstance().getProperty(params[0],"{undefined}");  if ((remainder == null) || remainder.equals("")) {    ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine(params[0] + "=" + oldValue));    return true;  }  WtWindowManager.getInstance().setProperty(params[0],remainder);  ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Changed configuration property " + params[0] + " from \""+ oldValue+ "\" to \""+ remainder+ "\"."));  return true;}  }
class C{  public void append(int key,double value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    double[] nvalues=new double[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public PerfBucketKey(PerfMeasurementPoint pt,String idStr){  Validate.notNull(pt);  measurementPt=pt;  providerInfo=(idStr == null ? PROVIDER_INFO_NA.toUpperCase() : extractProviderInfo(idStr).toUpperCase());}  }
class C{  public String urlDecode(String toDecode){  try {    return URLDecoder.decode(toDecode,"utf-8");  } catch (  Exception e) {    LOG.error("Error url decoding " + toDecode + ": "+ e);  }  return toDecode;}  }
class C{  public BeginsWithUppercaseLetterValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId);}  }
class C{  @Override public void run(){  PLViewListener listener=mView.getListener();  if (listener != null) {switch (mTouchStatus) {case PLSceneElementTouchStatusOver:      listener.onDidOverElement(mView,mElement,mScreenPoint,mScene3DPoint);    if (mElement instanceof PLIHotspot)     listener.onDidOverHotspot(mView,(PLIHotspot)mElement,mScreenPoint,mScene3DPoint);  break;case PLSceneElementTouchStatusDown:listener.onDidClickElement(mView,mElement,mScreenPoint,mScene3DPoint);if (mElement instanceof PLIHotspot) listener.onDidClickHotspot(mView,(PLIHotspot)mElement,mScreenPoint,mScene3DPoint);break;case PLSceneElementTouchStatusOut:listener.onDidOutElement(mView,mElement,mScreenPoint,mScene3DPoint);if (mElement instanceof PLIHotspot) listener.onDidOutHotspot(mView,(PLIHotspot)mElement,mScreenPoint,mScene3DPoint);break;default :break;}}}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  public BigdataValueFactory rdfValueFactory(){  return (BigdataValueFactory)repo.getValueFactory();}  }
class C{  public static double normalizeMinusPiPiFast(double angle){  if ((angle >= -Math.PI) && (angle <= Math.PI)) {    return angle;  }  double angleMinusPiPiOrSo=remainderTwoPiFast(angle);  if (angleMinusPiPiOrSo < -Math.PI) {    return -Math.PI;  } else   if (angleMinusPiPiOrSo > Math.PI) {    return Math.PI;  } else {    return angleMinusPiPiOrSo;  }}  }
class C{  protected EquationFakeDefinitionImpl(){  super();}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(NO_CURRENCY);  MRequisition req=(MRequisition)getPO();  setDateDoc(req.getDateDoc());  setDateAcct(req.getDateDoc());  setAmount(AMTTYPE_Gross,req.getTotalLines());  setAmount(AMTTYPE_Net,req.getTotalLines());  p_lines=loadLines(req);  return null;}  }
class C{  private boolean isOverRect(Point p){  Rectangle r=(Rectangle)cropping.clip.clone();  r.grow(PROX_DIST,PROX_DIST);  return r.contains(p);}  }
class C{  private boolean isConsistentModelClass(Class modelClass,Class[][] parentClasses,boolean exact){  Constructor[] constructors=modelClass.getConstructors();  L:   for (  Constructor constructor : constructors) {    Class<?>[] constructorTypes=constructor.getParameterTypes();    boolean hasParameters=false;    for (int j=0; j < constructorTypes.length; j++) {      if (constructorTypes[j] == Parameters.class)       hasParameters=true;    }    if (constructorTypes.length == 2) {      if (constructorTypes[0].isArray() && constructorTypes[1] == Parameters.class) {        if (parents != null && parents.size() == 0) {          return false;        }        for (int i=0; i < parentClasses.length; i++) {          boolean found=false;          for (int j=0; j < parentClasses[i].length; j++) {            Class<?> c1=constructorTypes[0].getComponentType();            Class<?> c2=parentClasses[i][j];            if (c2 == Parameters.class || c1.isAssignableFrom(c2)) {              found=true;              break;            }          }          if (!found) {            return false;          }        }        return true;      }    }    List<List<Class>> summary=new ArrayList<>();    for (int i=0; i < parentClasses.length; i++) {      summary.add(new ArrayList<Class>());    }    for (int i=0; i < parentClasses.length; i++) {      for (int j=0; j < parentClasses[i].length; j++) {        for (int k=0; k < constructorTypes.length; k++) {          if (constructorTypes[k].isAssignableFrom(parentClasses[i][j])) {            if (!summary.get(i).contains(constructorTypes[k])) {              summary.get(i).add(constructorTypes[k]);            }          }        }      }    }    int[] dims=new int[parentClasses.length];    for (int i=0; i < parentClasses.length; i++) {      dims[i]=summary.get(i).size();      if (dims[i] == 0)       continue L;    }    CombinationIterator iterator=new CombinationIterator(dims);    while (iterator.hasNext()) {      if (hasParameters) {        int[] comb=iterator.next();        Class[] modelTypes=new Class[comb.length + 1];        for (int i=0; i < comb.length; i++) {          modelTypes[i]=summary.get(i).get(comb[i]);        }        modelTypes[comb.length]=Parameters.class;        if (assignClasses(constructorTypes,modelTypes,exact)) {          return true;        }      } else {        int[] comb=iterator.next();        Class[] modelTypes=new Class[comb.length];        for (int i=0; i < comb.length; i++) {          modelTypes[i]=summary.get(i).get(comb[i]);        }        if (assignClasses(constructorTypes,modelTypes,exact)) {          return true;        }      }    }  }  return false;}  }
class C{  public static double roundToScale(double value,boolean integerValued){  double[] scaleValues;  int orderOfMagnitude=(int)Math.floor(Math.log(value) / Math.log(10.0));  if (integerValued) {    orderOfMagnitude=Math.max(1,orderOfMagnitude);    if (orderOfMagnitude == 1)     scaleValues=integerScales; else     if (orderOfMagnitude == 2)     scaleValues=semiIntegerScales; else     scaleValues=scales;  } else   scaleValues=scales;  double exponent=Math.pow(10.0,orderOfMagnitude);  double rValue=value / exponent;  for (int n=0; n < scaleValues.length; n++) {    if (rValue <= scaleValues[n])     return scaleValues[n] * exponent;  }  return exponent;}  }
class C{  public static ConstantNode forByte(byte i,StructuredGraph graph){  return unique(graph,createPrimitive(JavaConstant.forInt(i)));}  }
class C{  public boolean isGenres(){  return genres;}  }
class C{  protected boolean isWorld(Literal geometry){  boolean result=false;  if (geometry != null) {    Geometry g=geometry.evaluate(null,Geometry.class);    if (g != null) {      result=JTS.toGeometry(WORLD).equalsTopo(g.union());    }  }  return result;}  }
class C{  void addTransition(long time,int offset,int dstOffset){  if (transitions == null) {    transitions=new ArrayList<Long>();    offsets=new ArrayList<Integer>();    dstOffsets=new ArrayList<Integer>();  }  transitions.add(time);  offsets.add(offset);  dstOffsets.add(dstOffset);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          if (z1 + z2 == 1) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static MatrixBlock aggStable(JavaRDD<MatrixBlock> in,AggregateOperator aop){  return in.fold(new MatrixBlock(),new AggregateSingleBlockFunction(aop));}  }
class C{  public static Solenoid solenoid(int solenoidChannel){  return solenoid(0,solenoidChannel);}  }
class C{  public Element svgLine(double x1,double y1,double x2,double y2){  return SVGUtil.svgLine(document,x1,y1,x2,y2);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputName=null;  String workingDirectory=null;  WhiteboxRasterInfo[] components=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numImages=0;  int numFiles, numComponents;  int progress=0;  int col, row;  int a, i, j;  double[] imageAverages;  double[] imageTotals;  double[] imageNumPixels;  double[][] data;  double[] noDataValues;  String pathSep=File.separator;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputName=args[1];  if (outputName.toLowerCase().contains(".dep")) {    outputName=outputName.replace(".dep","");  }  try {    imageFiles=inputFilesString.split(";");    numFiles=imageFiles.length;    components=new WhiteboxRasterInfo[numFiles];    imageAverages=new double[numFiles];    imageTotals=new double[numFiles];    imageNumPixels=new double[numFiles];    noDataValues=new double[numFiles];    data=new double[numFiles][];    int[] componentNumbers=new int[numFiles];    double[][] eigenvectors=null;    for (i=0; i < numFiles; i++) {      boolean isComponent=false;      components[i]=new WhiteboxRasterInfo(imageFiles[i]);      noDataValues[i]=components[i].getNoDataValue();      if (i == 0) {        nCols=components[i].getNumberColumns();        nRows=components[i].getNumberRows();        File file=new File(imageFiles[i]);        workingDirectory=file.getParent();      } else {        if (components[i].getNumberColumns() != nCols || components[i].getNumberRows() != nRows) {          showFeedback("All input components must have the same dimensions (rows and columns).");          return;        }      }      ArrayList<String> metadata=components[i].getMetadata();      for (      String entry : metadata) {        if (entry.toLowerCase().contains("principal component num")) {          componentNumbers[i]=Integer.parseInt(entry.replace("Principal Component Num.:","").trim()) - 1;        }        if (entry.toLowerCase().contains("eigenvector")) {          String[] eigenStr=entry.replace("Eigenvector:","").replace("[","").replace("]","").split(",");          if (i == 0) {            numImages=eigenStr.length;            eigenvectors=new double[numImages][numImages];          }          for (a=0; a < numImages; a++) {            eigenvectors[componentNumbers[i]][a]=Double.parseDouble(eigenStr[a].trim());          }          isComponent=true;        }      }      if (!isComponent) {        showFeedback("At least one of the input images does not appear to have been created by the PrincipalComponentAnalysis tool. " + "This tool will not operate correctly.");        return;      }    }    int[] componentPointers=new int[numImages];    for (i=0; i < numFiles; i++) {      componentPointers[componentNumbers[i]]=i;    }    for (j=0; j < numImages; j++) {      String outputHeader=workingDirectory + pathSep + outputName+ (j + 1)+ ".dep";      if (new File(outputHeader).exists()) {        (new File(outputHeader)).delete();      }      if (new File(outputHeader.replace(".dep",".tas")).exists()) {        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,0);      output.setDataScale(DataScale.CONTINUOUS);      for (row=0; row < nRows; row++) {        for (i=0; i < numFiles; i++) {          data[i]=components[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          if (data[0][col] != noDataValues[0]) {            z=0;            for (i=0; i < numFiles; i++) {              z+=data[i][col] * eigenvectors[componentPointers[i]][j];            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noDataValues[0]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Creating image " + (j + 1) + ":",progress);      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();    }    for (i=0; i < numFiles; i++) {      components[i].close();    }    String outputHeader=workingDirectory + pathSep + outputName+ "1.dep";    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public void dispose(){  m_operatorBox.dispose();  m_inputField.dispose();}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  String prop=evt.getPropertyName();  if ("AccessibleValue".equals(prop) || "AccessibleText".equals(prop) || ("AccessibleVisibleData".equals(prop) && evt.getSource().getClass().getName().contains("JList"))) {    _modified=true;  }}  }
class C{  private void insert(MethodPart method,PartMap map){  String name=method.getName();  MethodPart existing=map.remove(name);  if (existing != null) {    if (isText(method)) {      method=existing;    }  }  map.put(name,method);}  }
class C{  public static String removeColors(String line){  int length=line.length();  StringBuffer buffer=new StringBuffer();  int i=0;  while (i < length) {    char ch=line.charAt(i);    if (ch == '\u0003') {      i++;      if (i < length) {        ch=line.charAt(i);        if (Character.isDigit(ch)) {          i++;          if (i < length) {            ch=line.charAt(i);            if (Character.isDigit(ch)) {              i++;            }          }          if (i < length) {            ch=line.charAt(i);            if (ch == ',') {              i++;              if (i < length) {                ch=line.charAt(i);                if (Character.isDigit(ch)) {                  i++;                  if (i < length) {                    ch=line.charAt(i);                    if (Character.isDigit(ch)) {                      i++;                    }                  }                } else {                  i--;                }              } else {                i--;              }            }          }        }      }    } else     if (ch == '\u000f') {      i++;    } else {      buffer.append(ch);      i++;    }  }  return buffer.toString();}  }
class C{  public static void bytesToHex(byte[] bytes,byte[] hex,int offset){  final char lookup[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  int i, c, j, pos=offset;  for (i=0; i < 16; i++) {    c=bytes[i] & 0xFF;    j=c >> 4;    hex[pos++]=(byte)lookup[j];    j=(c & 0xF);    hex[pos++]=(byte)lookup[j];  }}  }
class C{  public boolean isNull(){  return m_value == null;}  }
class C{  public HouseName(String value){  this();  setValue(value);}  }
class C{  private void updateThermostatSetPointValue(int idx,double newSetPoint){  addDebugText("updateThermostatSetPointValue");  for (  UtilitiesInfo info : mUtilitiesInfos) {    if (info.getIdx() == idx) {      info.setSetPoint(newSetPoint);      break;    }  }  notifyDataSetChanged();}  }
class C{  public static ASTList append(ASTList a,ASTree b){  return concat(a,new ASTList(b));}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  final synchronized public Object clone(){  SnmpInt newclone=null;  try {    newclone=(SnmpInt)super.clone();    newclone.value=value;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }  return newclone;}  }
class C{  private void writeAASiteModel(XMLWriter writer,PartitionSubstitutionModel model){  String prefix=model.getPrefix();  writer.writeComment("site model");  writer.writeOpenTag(GammaSiteModel.SITE_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + SiteModel.SITE_MODEL)});  writer.writeOpenTag(GammaSiteModelParser.SUBSTITUTION_MODEL);  writer.writeIDref(EmpiricalAminoAcidModelParser.EMPIRICAL_AMINO_ACID_MODEL,prefix + "aa");  writer.writeCloseTag(GammaSiteModelParser.SUBSTITUTION_MODEL);  writeParameter(GammaSiteModelParser.RELATIVE_RATE,"mu",model,writer);  if (model.isGammaHetero()) {    writer.writeOpenTag(GammaSiteModelParser.GAMMA_SHAPE,new Attribute.Default<String>(GammaSiteModelParser.GAMMA_CATEGORIES,"" + model.getGammaCategories()));    writeParameter("alpha",model,writer);    writer.writeCloseTag(GammaSiteModelParser.GAMMA_SHAPE);  }  if (model.isInvarHetero()) {    writeParameter(GammaSiteModelParser.PROPORTION_INVARIANT,"pInv",model,writer);  }  writer.writeCloseTag(GammaSiteModel.SITE_MODEL);}  }
class C{  @SuppressLint("MissingSuperCall") @Override public void draw(Canvas canvas){  if (mHelper.isDebug()) {    canvas.drawColor(HitareaCore.sDefaultDebugBgColor);  }}  }
class C{  public boolean isSalesRep(){  Object oo=get_Value(COLUMNNAME_IsSalesRep);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public static Control createEmptySpace(Composite parent,int span){  Label label=new Label(parent,SWT.LEFT);  GridData gd=new GridData();  gd.horizontalAlignment=GridData.BEGINNING;  gd.grabExcessHorizontalSpace=false;  gd.horizontalSpan=span;  gd.horizontalIndent=0;  gd.widthHint=0;  gd.heightHint=0;  label.setLayoutData(gd);  return label;}  }
class C{  private QRDecomposition qr(DoubleMatrix2D matrix){  return new QRDecomposition(matrix);}  }
class C{  private boolean lookupHome(Path path){  if (path == null) {    return false;  }  Path binFolder=path.resolve("bin");  if (binFolder == null && Files.exists(binFolder,LinkOption.NOFOLLOW_LINKS)) {    return false;  }  Path artemisScript=binFolder.resolve("artemis");  return artemisScript != null && Files.exists(artemisScript,LinkOption.NOFOLLOW_LINKS);}  }
class C{  public Optimizer(final Creature creature){  this.creature=creature;}  }
class C{  public void init(CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)param;    if (!(p.getParameters() instanceof ECPublicKeyParameters)) {      throw new IllegalArgumentException("ECPublicKeyParameters are required for new randomness transform.");    }    this.key=(ECPublicKeyParameters)p.getParameters();    this.random=p.getRandom();  } else {    if (!(param instanceof ECPublicKeyParameters)) {      throw new IllegalArgumentException("ECPublicKeyParameters are required for new randomness transform.");    }    this.key=(ECPublicKeyParameters)param;    this.random=new SecureRandom();  }}  }
class C{  String format(OpenGLMatrix transformationMatrix){  return transformationMatrix.formatAsTransform();}  }
class C{  public static float[] copyOfRange(float[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      float[] copy=new float[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public SourceRecordStats(){}  }
class C{  protected boolean removeDescendantSelectedPaths(TreePath path,boolean includePath){  TreePath[] toRemove=getDescendantSelectedPaths(path,includePath);  if (toRemove != null) {    getSelectionModel().removeSelectionPaths(toRemove);    return true;  }  return false;}  }
class C{  public String firstMatch(String pattern,int group){  Matcher stderrMatcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stderr);  Matcher stdoutMatcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stdout);  if (stderrMatcher.find()) {    return stderrMatcher.group(group);  }  if (stdoutMatcher.find()) {    return stdoutMatcher.group(group);  }  return null;}  }
class C{  public void writeEmpty(MBSFile file) throws IOException {  if (file.hasSize() && file.getSize() != 0) {    logger.warn("-- writeEmpty() > bad state, file is not empty: {} bytes",file.getSize());    return;  }  write(file,null);}  }
class C{  @Override public String toString(){  String result;  if (m_FilteredInstances == null) {    result="FilteredClusterer: No model built yet.";  } else {    result="FilteredClusterer using " + getClustererSpec() + " on data filtered through "+ getFilterSpec()+ "\n\nFiltered Header\n"+ m_FilteredInstances.toString()+ "\n\nClusterer Model\n"+ m_Clusterer.toString();  }  return result;}  }
class C{  @Override protected void onStart(){  super.onStart();  mStopped=false;  mReallyStopped=false;  mHandler.removeMessages(MSG_REALLY_STOPPED);  if (!mCreated) {    mCreated=true;    mFragments.dispatchActivityCreated();  }  mFragments.noteStateNotSaved();  mFragments.execPendingActions();  if (!mLoadersStarted) {    mLoadersStarted=true;    if (mLoaderManager != null) {      mLoaderManager.doStart();    } else     if (!mCheckedForLoaderManager) {      mLoaderManager=getLoaderManager(null,mLoadersStarted,false);      if ((mLoaderManager != null) && (!mLoaderManager.mStarted)) {        mLoaderManager.doStart();      }    }    mCheckedForLoaderManager=true;  }  mFragments.dispatchStart();  if (mAllLoaderManagers != null) {    LoaderManagerImpl loaders[]=new LoaderManagerImpl[mAllLoaderManagers.size()];    mAllLoaderManagers.values().toArray(loaders);    if (loaders != null) {      for (int i=0; i < loaders.length; i++) {        LoaderManagerImpl lm=loaders[i];        lm.finishRetain();        lm.doReportStart();      }    }  }}  }
class C{  public long tryConvertToOptimisticRead(long stamp){  long a=stamp & ABITS, m, s, next;  WNode h;  for (; ; ) {    s=U.getLongVolatile(this,STATE);    if (((s=state) & SBITS) != (stamp & SBITS))     break;    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break;      return s;    } else     if (m == WBIT) {      if (a != m)       break;      state=next=(s+=WBIT) == 0L ? ORIGIN : s;      if ((h=whead) != null && h.status != 0)       release(h);      return next;    } else     if (a == 0L || a >= WBIT)     break; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return next & SBITS;      }    } else     if ((next=tryDecReaderOverflow(s)) != 0L)     return next & SBITS;  }  return 0L;}  }
class C{  private static boolean isWorkspaceRootLocationURI(URI locationURI){  return ResourcesPlugin.getWorkspace().getRoot().getLocationURI().equals(locationURI);}  }
class C{  private void buttonNextMonthActionPerformed(ActionEvent e){  try {    drawCalendar(displayedYearMonth.plusMonths(1));  } catch (  Exception ex) {  }}  }
class C{  protected void sequence_ThisTypeRefNominal_TypeRef_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public static ExecutorModule create(final CassandraExecutorConfiguration configuration){  return new ExecutorModule(configuration);}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  private static int indexOf(Object o,@NotNull Object[] elements,int index,int fence){  if (o == null) {    for (int i=index; i < fence; i++) {      if (elements[i] == null) {        return i;      }    }  } else {    for (int i=index; i < fence; i++) {      if (o.equals(elements[i])) {        return i;      }    }  }  return -1;}  }
class C{  public list<tuple2<String,Integer>> extractBestOnes(String query,list<String> choices,Function<tuple2<String,Boolean>,String> processor,Function<tuple3<String,String,Boolean>,Integer> scorer,Integer scoreCutoff,Integer limit){  if (scoreCutoff == null) {    scoreCutoff=0;  }  if (limit == null) {    limit=5;  }  list<tuple2<String,Integer>> best_list=extract(query,choices,processor,scorer,limit);  return x.list(x.takeWhile(x.lambdaP("x : x[1] >= " + String.valueOf(scoreCutoff)),best_list));}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("resin2x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("resin3x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("resin31x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("resin4x",ServletContainerCapability.class);}  }
class C{  public CompletedState(DownloadInfoRunnable downloadInfoRunnable){  super(downloadInfoRunnable);}  }
class C{  public static List<Node> searchPath(final Entity entity,final int x,final int y,final Rectangle2D destination,final double maxDistance){  return searchPath(entity,null,x,y,destination,maxDistance,true);}  }
class C{  public static boolean isAssignableValue(Class<?> type,Object value){  Assert.notNull(type,"Type must not be null");  return (value != null ? isAssignable(type,value.getClass()) : !type.isPrimitive());}  }
class C{  public int dayOfYear(){  return (int)(serialNumber - yearOffset(year()));}  }
class C{  public boolean intersect(double minLatitude,double minLongitude,double deltaLatitude,double deltaLongitude){  double maxLatitude=Location.clampLatitude(minLatitude + (deltaLatitude > 0 ? deltaLatitude : Double.NaN));  double maxLongitude=Location.clampLongitude(minLongitude + (deltaLongitude > 0 ? deltaLongitude : Double.NaN));  if ((this.minLatitude < maxLatitude) && (this.maxLatitude > minLatitude) && (this.minLongitude < maxLongitude)&& (this.maxLongitude > minLongitude)) {    if (this.minLatitude < minLatitude)     this.minLatitude=minLatitude;    if (this.maxLatitude > maxLatitude)     this.maxLatitude=maxLatitude;    if (this.minLongitude < minLongitude)     this.minLongitude=minLongitude;    if (this.maxLongitude > maxLongitude)     this.maxLongitude=maxLongitude;    return true;  }  return false;}  }
class C{  public static void report(boolean explain){  VM.sysWrite("\n\t\tCompilation Subsystem Report\n");  VM.sysWrite("Comp\t#Meths\tTime\tbcb/ms\tmcb/bcb\tMCKB\tBCKB\n");  for (int i=0; i <= name.length - 1; i++) {    if (totalMethods[i] > 0) {      VM.sysWrite(name[i]);      VM.sysWrite(totalMethods[i]);      VM.sysWrite("\t");      VM.sysWrite(totalCompTime[i]);      VM.sysWrite("\t");      if (i == JNI_COMPILER) {        VM.sysWrite("NA");      } else {        VM.sysWrite(Math.exp(totalLogOfRates[i] / totalLogValueMethods[i]),2);      }      VM.sysWrite("\t");      if (i != JNI_COMPILER) {        VM.sysWrite((double)(totalMCLength[i] << ArchConstants.getLogInstructionWidth()) / totalBCLength[i],2);      } else {        VM.sysWrite("NA");      }      VM.sysWrite("\t");      VM.sysWrite((double)(totalMCLength[i] << ArchConstants.getLogInstructionWidth()) / 1024,1);      VM.sysWrite("\t");      if (i != JNI_COMPILER) {        VM.sysWrite((double)totalBCLength[i] / 1024,1);      } else {        VM.sysWrite("NA");      }      VM.sysWrite("\n");    }  }  if (explain) {    VM.sysWrite("\t\t\tExplanation of Metrics\n");    VM.sysWrite("#Meths:\t\tTotal number of methods compiled by the compiler\n");    VM.sysWrite("Time:\t\tTotal compilation time in milliseconds\n");    VM.sysWrite("bcb/ms:\t\tNumber of bytecode bytes complied per millisecond\n");    VM.sysWrite("mcb/bcb:\tRatio of machine code bytes to bytecode bytes\n");    VM.sysWrite("MCKB:\t\tTotal number of machine code bytes generated in kilobytes\n");    VM.sysWrite("BCKB:\t\tTotal number of bytecode bytes compiled in kilobytes\n");  }  BaselineCompiler.generateBaselineCompilerSubsystemReport(explain);  if (VM.BuildForAdaptiveSystem) {    RVMType theType=TypeReference.OptimizationPlanner.peekType();    if (theType != null && theType.asClass().isInitialized()) {      OptimizationPlanner.generateOptimizingCompilerSubsystemReport(explain);    } else {      VM.sysWrite("\n\tNot generating Optimizing Compiler SubSystem Report because \n");      VM.sysWrite("\tthe opt compiler was never invoked.\n\n");    }  }}  }
class C{  private static void replaceShiftInstructions(){  fillInstructionMap(0xB100,0xFF00,new FrInstruction(InstructionFormat.C,0,0,"LSR","#bd,i","iw",Instruction.FlowType.NONE,false,false,lsr2u4RiSimulationCode));  fillInstructionMap(0xB500,0xFF00,new FrInstruction(InstructionFormat.C,0,0,"LSL","#bd,i","iw",Instruction.FlowType.NONE,false,false,lsl2u4RiSimulationCode));  fillInstructionMap(0xB900,0xFF00,new FrInstruction(InstructionFormat.C,0,0,"ASR","#bd,i","iw",Instruction.FlowType.NONE,false,false,asr2u4RiSimulationCode));}  }
class C{  public PSPProcessingException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public boolean visit(CopySourceEdit edit){  return visitNode(edit);}  }
class C{  public int size(){  return rows * columns;}  }
class C{  public void emitop1w(int op,int od1,int od2){  if (od1 > 0xFF || od2 < -128 || od2 > 127) {    emitop(wide);    emitop(op);    emit2(od1);    emit2(od2);  } else {    emitop(op);    emit1(od1);    emit1(od2);  }  if (!alive)   return;switch (op) {case iinc:    break;default :  throw new AssertionError(mnem(op));}}  }
class C{  protected void adaptGrid(){  Arrays.fill(minimum,Double.POSITIVE_INFINITY);  Arrays.fill(maximum,Double.NEGATIVE_INFINITY);  Arrays.fill(density,0);  for (  Solution solution : this) {    for (int i=0; i < problem.getNumberOfObjectives(); i++) {      minimum[i]=Math.min(minimum[i],solution.getObjective(i));      maximum[i]=Math.max(maximum[i],solution.getObjective(i));    }  }  for (  Solution solution : this) {    density[findIndex(solution)]++;  }}  }
class C{  public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public static void emergencyClose(){  if (TRACE_CLOSE) {    System.err.println("SystemFailure: closing GemFireCache");  }  GemFireCacheImpl.emergencyClose();  if (TRACE_CLOSE) {    System.err.println("SystemFailure: closing admins");  }  RemoteGfManagerAgent.emergencyClose();  System.gc();  if (TRACE_CLOSE) {    System.err.println("SystemFailure: end of emergencyClose");  }}  }
class C{  @Override public boolean load(Element sharedBlocks,Element perNodeBlocks) throws JmriConfigureXmlException {  boolean result=true;  try {    if (sharedBlocks.getChild("defaultspeed") != null) {      String speed=sharedBlocks.getChild("defaultspeed").getText();      if (speed != null && !speed.equals("")) {        InstanceManager.getDefault(jmri.BlockManager.class).setDefaultSpeed(speed);      }    }  } catch (  IllegalArgumentException ex) {    log.error(ex.toString());  }  List<Element> list=sharedBlocks.getChildren("block");  if (log.isDebugEnabled()) {    log.debug("Found " + list.size() + " objects");  }  for (int i=0; i < list.size(); i++) {    Element block=list.get(i);    loadBlock(block);  }  return result;}  }
class C{  public final boolean yymoreStreams(){  return !zzStreams.isEmpty();}  }
class C{  public boolean hasHorizontalSpanning(){  return horizontalSpanningExists;}  }
class C{  public static CCSequence actions(CCFiniteTimeAction action1,CCFiniteTimeAction... actions){  if (actions.length == 0) {    return new CCSequence(action1,CCFiniteTimeAction.action(0));  } else {    CCFiniteTimeAction prev=action1;    for (    CCFiniteTimeAction now : actions) {      prev=new CCSequence(prev,now);    }    return (CCSequence)prev;  }}  }
class C{  protected void paintContentBorderLeftEdge(Graphics g,int tabPlacement,int selectedIndex,int x,int y,int w,int h){  Rectangle selRect=selectedIndex < 0 ? null : getTabBounds(selectedIndex,calcRect);  g.setColor(selectHighlight);  if (tabPlacement != LEFT || selectedIndex < 0 || (selRect.x + selRect.width + 1 < x) || (selRect.y < y || selRect.y > y + h)) {    g.drawLine(x,y,x,y + h - 2);  } else {    g.drawLine(x,y,x,selRect.y + 1);    if (selRect.y + selRect.height < y + h - 2)     g.drawLine(x,selRect.y + selRect.height + 1,x,y + h - 2);  }}  }
class C{  public static boolean arrayEquals(Object x,Object y){  return arrayEquals(x,y,0,0);}  }
class C{  public TeXFormula add(Atom el){  if (el != null) {    if (el instanceof MiddleAtom)     middle.add((MiddleAtom)el);    if (root == null) {      root=el;    } else {      if (!(root instanceof RowAtom)) {        root=new RowAtom(root);      }      ((RowAtom)root).add(el);      if (el instanceof TypedAtom) {        TypedAtom ta=(TypedAtom)el;        int rtype=ta.getRightType();        if (rtype == TeXConstants.TYPE_BINARY_OPERATOR || rtype == TeXConstants.TYPE_RELATION) {          ((RowAtom)root).add(new BreakMarkAtom());        }      }    }  }  return this;}  }
class C{  public PhotoItem queryContentUri(Uri uri){  List<PhotoItem> newPhotos=queryAll(uri,FilmstripItemBase.QUERY_ALL_MEDIA_ID);  if (newPhotos.isEmpty()) {    return null;  }  return newPhotos.get(0);}  }
class C{  private void result(String result,int responseCode){  requestPending=false;  if (result == null || responseCode != 200) {    error("Error receiving data.");    return;  }  List<Race> races=parseRaces(result);  if (races == null) {    error("Error parsing data.");  } else {    for (    SpeedrunsLiveListener listener : listeners) {      listener.racesReceived(races);    }  }}  }
class C{  synchronized void recycleConnection(PooledConnection pc){  if (activeConnections <= 0) {    throw new AssertionError();  }  activeConnections--;  if (!isDisposed && activeConnections < maxConnections) {    recycledConnections.add(pc);  } else {    closeConnection(pc);  }  if (activeConnections >= maxConnections - 1) {    notifyAll();  }}  }
class C{  private void escapedFunctions(String[][] specList,String metaDataList) throws SQLException {  boolean[] seenFunction=new boolean[specList.length];  StringTokenizer st=new StringTokenizer(metaDataList,",");  int counter=0;  while (st.hasMoreTokens()) {    counter++;    String function=st.nextToken();    boolean isSpecFunction=false;    for (int f=0; f < specList.length; f++) {      String[] specDetails=specList[f];      if (function.equals(specDetails[0])) {        if (seenFunction[f])         fail("Function in list twice: " + function);        seenFunction[f]=true;        isSpecFunction=true;        executeEscaped(specDetails);        break;      }    }    if (!isSpecFunction) {      fail("Non-JDBC spec function in list: " + function);    }  }  assertSame("Function missing in metadata impl",specList.length,counter);  for (int f=0; f < specList.length; f++) {    if (seenFunction[f])     continue;    String[] specDetails=specList[f];    if ("CHAR".equals(specDetails[0]))     continue;    try {      executeEscaped(specDetails);      fail("function works but not declared in list: " + specDetails[0]);    } catch (    SQLException e) {    }  }}  }
class C{  public final void encode(DerOutputStream out) throws IOException {  derEncode(out);}  }
class C{  public void validateDistributedHighAvailabilityForUpdate(VirtualPool virtualPool,BlockVirtualPoolUpdateParam updateParam,DbClient dbClient){  if (VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(updateParam.getHighAvailability().getType())) {    if ((updateParam.getHighAvailability().getHaVirtualArrayVirtualPool() == null) || updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualArray() == null || String.valueOf(updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualArray()).isEmpty()) {      throw APIException.badRequests.invalidParameterHighAvailabilityVirtualArrayRequiredForType(updateParam.getHighAvailability().getType());    }    _logger.debug("HA varray VirtualPool map specifies the HA varray {}",updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualArray());    VirtualArray haVirtualArray=dbClient.queryObject(VirtualArray.class,updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualArray());    ArgValidator.checkEntity(haVirtualArray,updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualArray(),false);    String haVirtualArrayId=updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualArray().toString();    String haNhVirtualPoolId=null;    if (updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualPool() != null && !String.valueOf(updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualPool()).isEmpty()) {      _logger.debug("HA varray VirtualPool map specifies the HA vpool {}",updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualPool());      VirtualPool haVirtualPool=dbClient.queryObject(VirtualPool.class,updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualPool());      ArgValidator.checkEntity(haVirtualPool,updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualPool(),false);      haNhVirtualPoolId=updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualPool().toString();      StringSet haVirtualPoolNHs=haVirtualPool.getVirtualArrays();      if ((haVirtualPoolNHs != null) && (!haVirtualPoolNHs.isEmpty())) {        if (!haVirtualPoolNHs.contains(haVirtualArrayId)) {          throw APIException.badRequests.invalidParameterHighAvailabilityVirtualPoolNotValidForVirtualArray(haNhVirtualPoolId,haVirtualArrayId);        }      }    }  } else   if (updateParam.getHighAvailability().getType() != null && !String.valueOf(updateParam.getHighAvailability().getType()).isEmpty()) {    if (updateParam.getHighAvailability().getHaVirtualArrayVirtualPool() != null && (updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualArray() != null && !String.valueOf(updateParam.getHighAvailability().getHaVirtualArrayVirtualPool().getVirtualArray()).isEmpty())) {      throw APIException.badRequests.invalidParameterVirtualArrayAndVirtualPoolDoNotApplyForType(updateParam.getHighAvailability().getType());    }  }}  }
class C{  public static Date parseDate(String dateValue,Collection<String> dateFormats,Date startDate) throws ParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_HTTP_CLIENT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  SimpleDateFormat dateParser=null;  Iterator formatIter=dateFormats.iterator();  while (formatIter.hasNext()) {    String format=(String)formatIter.next();    if (dateParser == null) {      dateParser=new SimpleDateFormat(format,Locale.ROOT);      dateParser.setTimeZone(GMT);      dateParser.set2DigitYearStart(startDate);    } else {      dateParser.applyPattern(format);    }    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new ParseException("Unable to parse the date " + dateValue,0);}  }
class C{  public Boolean isRTPRTSPTCP(){  return rtprtsptcp;}  }
class C{  private void name(StringBuilder builder){  String name=type.getName();  if (name != null) {    builder.append('@');    builder.append(name);    builder.append('(');  }}  }
class C{  public PostgreSqlDumpAgent(){}  }
class C{  public <T>String toJson(T dto){  if (dto instanceof JsonSerializable) {    return ((JsonSerializable)dto).toJson();  }  throw new IllegalArgumentException("JsonSerializable instance required. ");}  }
class C{  private void computeCBLOFs(Relation<O> relation,NumberVectorDistanceFunction<? super O> distance,WritableDoubleDataStore cblofs,DoubleMinMax cblofMinMax,List<? extends Cluster<MeanModel>> largeClusters,List<? extends Cluster<MeanModel>> smallClusters){  List<NumberVector> largeClusterMeans=new ArrayList<>(largeClusters.size());  for (  Cluster<MeanModel> largeCluster : largeClusters) {    NumberVector mean=ModelUtil.getPrototypeOrCentroid(largeCluster.getModel(),relation,largeCluster.getIDs());    largeClusterMeans.add(mean);    for (DBIDIter iter=largeCluster.getIDs().iter(); iter.valid(); iter.advance()) {      double cblof=computeLargeClusterCBLOF(relation.get(iter),distance,mean,largeCluster);      storeCBLOFScore(cblofs,cblofMinMax,cblof,iter);    }  }  for (  Cluster<MeanModel> smallCluster : smallClusters) {    for (DBIDIter iter=smallCluster.getIDs().iter(); iter.valid(); iter.advance()) {      double cblof=computeSmallClusterCBLOF(relation.get(iter),distance,largeClusterMeans,smallCluster);      storeCBLOFScore(cblofs,cblofMinMax,cblof,iter);    }  }}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (DEBUG) {    System.out.println("startElement: uri: " + uri + ", localname: "+ localName+ ", qname: "+ qName+ ", atts: "+ attributes);    boolean DEBUG_ATTRS=true;    if (DEBUG_ATTRS & attributes != null) {      int n=attributes.getLength();      if (n == 0)       System.out.println("\tempty attribute list"); else       for (int i=0; i < n; i++)       System.out.println("\t attr: uri: " + attributes.getURI(i) + ", localname: "+ attributes.getLocalName(i)+ ", qname: "+ attributes.getQName(i)+ ", type: "+ attributes.getType(i)+ ", value: "+ attributes.getValue(i));    }  }  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(uri,localName,DTM.ELEMENT_NODE);  String prefix=getPrefix(qName,uri);  int prefixIndex=(null != prefix) ? m_valuesOrPrefixes.stringToIndex(qName) : 0;  int elemNode=addNode(DTM.ELEMENT_NODE,exName,m_parents.peek(),m_previous,prefixIndex,true);  if (m_indexing)   indexNode(exName,elemNode);  m_parents.push(elemNode);  int startDecls=m_contextIndexes.peek();  int nDecls=m_prefixMappings.size();  int prev=DTM.NULL;  if (!m_pastFirstElement) {    prefix="xml";    String declURL="http://www.w3.org/XML/1998/namespace";    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    int val=m_valuesOrPrefixes.stringToIndex(declURL);    prev=addNode(DTM.NAMESPACE_NODE,exName,elemNode,prev,val,false);    m_pastFirstElement=true;  }  for (int i=startDecls; i < nDecls; i+=2) {    prefix=(String)m_prefixMappings.elementAt(i);    if (prefix == null)     continue;    String declURL=(String)m_prefixMappings.elementAt(i + 1);    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    int val=m_valuesOrPrefixes.stringToIndex(declURL);    prev=addNode(DTM.NAMESPACE_NODE,exName,elemNode,prev,val,false);  }  int n=attributes.getLength();  for (int i=0; i < n; i++) {    String attrUri=attributes.getURI(i);    String attrQName=attributes.getQName(i);    String valString=attributes.getValue(i);    prefix=getPrefix(attrQName,attrUri);    int nodeType;    String attrLocalName=attributes.getLocalName(i);    if ((null != attrQName) && (attrQName.equals("xmlns") || attrQName.startsWith("xmlns:"))) {      if (declAlreadyDeclared(prefix))       continue;      nodeType=DTM.NAMESPACE_NODE;    } else {      nodeType=DTM.ATTRIBUTE_NODE;      if (attributes.getType(i).equalsIgnoreCase("ID"))       setIDAttribute(valString,elemNode);    }    if (null == valString)     valString="";    int val=m_valuesOrPrefixes.stringToIndex(valString);    if (null != prefix) {      prefixIndex=m_valuesOrPrefixes.stringToIndex(attrQName);      int dataIndex=m_data.size();      m_data.addElement(prefixIndex);      m_data.addElement(val);      val=-dataIndex;    }    exName=m_expandedNameTable.getExpandedTypeID(attrUri,attrLocalName,nodeType);    prev=addNode(nodeType,exName,elemNode,prev,val,false);  }  if (DTM.NULL != prev)   m_nextsib.setElementAt(DTM.NULL,prev);  if (null != m_wsfilter) {    short wsv=m_wsfilter.getShouldStripSpace(makeNodeHandle(elemNode),this);    boolean shouldStrip=(DTMWSFilter.INHERIT == wsv) ? getShouldStripWhitespace() : (DTMWSFilter.STRIP == wsv);    pushShouldStripWhitespace(shouldStrip);  }  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  public BluetoothGatt connectGatt(Context context,boolean autoConnect,BluetoothGattCallback callback){  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  IBluetoothManager managerService=adapter.getBluetoothManager();  try {    IBluetoothGatt iGatt=managerService.getBluetoothGatt();    if (iGatt == null) {      return null;    }    BluetoothGatt gatt=new BluetoothGatt(context,iGatt,this);    gatt.connect(autoConnect,callback);    return gatt;  } catch (  RemoteException e) {    Log.e(TAG,"",e);  }  return null;}  }
class C{  public void print(String value,boolean checkForEscape) throws IOException {  if (!checkForEscape) {    printSep();    out.write(value);    return;  }  if (buf.length < value.length()) {    buf=new char[value.length()];  }  value.getChars(0,value.length(),buf,0);  print(buf,0,value.length(),checkForEscape);}  }
class C{  public MemLRUCapacityController(int megabytes,ObjectSizer sizerImpl,EvictionAction evictionAction,Region region,boolean isOffHeap){  super(evictionAction,region);  this.isOffHeap=isOffHeap;  setMaximumMegabytes(megabytes);  setSizer(sizerImpl);}  }
class C{  public void reset(){  alpha=initAlpha;  neighborhoodSize=initNeighborhoodSize;}  }
class C{  public NotImplementedException(final Throwable cause,final String code){  super(cause);  this.code=code;}  }
class C{  public void removeAllResolvers(){  fResolvers.clear();}  }
class C{  public boolean kickChatMember(String chatId,int userId){  HttpResponse<String> response;  JSONObject jsonResponse;  try {    MultipartBody request=Unirest.post(getBotAPIUrl() + "kickChatMember").field("chat_id",chatId,"application/json; charset=utf8;").field("user_id",userId);    response=request.asString();    jsonResponse=Utils.processResponse(response);    if (jsonResponse != null) {      if (jsonResponse.getBoolean("result"))       return true;    }  } catch (  UnirestException e) {    e.printStackTrace();  }  return false;}  }
class C{  public Object callModifySettingsDefineState(StorageSystem storage,CIMArgument[] inArgs,CIMArgument[] outArgs) throws WBEMException {  CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);  return invokeMethod(storage,replicationSvcPath,MODIFY_SETTINGS_DEFINE_STATE,inArgs,outArgs);}  }
class C{  private static Map<Integer,String> make(){  final Map<Integer,String> map=new HashMap<>(0);  map.put(HttpURLConnection.HTTP_OK,"OK");  map.put(HttpURLConnection.HTTP_NO_CONTENT,"No Content");  map.put(HttpURLConnection.HTTP_CREATED,"Created");  map.put(HttpURLConnection.HTTP_ACCEPTED,"Accepted");  map.put(HttpURLConnection.HTTP_MOVED_PERM,"Moved Permanently");  map.put(HttpURLConnection.HTTP_MOVED_TEMP,"Moved Temporarily");  map.put(HttpURLConnection.HTTP_SEE_OTHER,"See Other");  map.put(HttpURLConnection.HTTP_NOT_MODIFIED,"Not Modified");  map.put(HttpURLConnection.HTTP_USE_PROXY,"Use Proxy");  map.put(HttpURLConnection.HTTP_BAD_REQUEST,"Bad Request");  map.put(HttpURLConnection.HTTP_UNAUTHORIZED,"Unauthorized");  map.put(HttpURLConnection.HTTP_PAYMENT_REQUIRED,"Payment Required");  map.put(HttpURLConnection.HTTP_FORBIDDEN,"Forbidden");  map.put(HttpURLConnection.HTTP_NOT_FOUND,"Not Found");  map.put(HttpURLConnection.HTTP_BAD_METHOD,"Bad Method");  map.put(HttpURLConnection.HTTP_NOT_ACCEPTABLE,"Not Acceptable");  map.put(HttpURLConnection.HTTP_CLIENT_TIMEOUT,"Client Timeout");  map.put(HttpURLConnection.HTTP_GONE,"Gone");  map.put(HttpURLConnection.HTTP_LENGTH_REQUIRED,"Length Required");  map.put(HttpURLConnection.HTTP_PRECON_FAILED,"Precon Failed");  map.put(HttpURLConnection.HTTP_ENTITY_TOO_LARGE,"Entity Too Large");  map.put(HttpURLConnection.HTTP_REQ_TOO_LONG,"Request Too Long");  map.put(HttpURLConnection.HTTP_UNSUPPORTED_TYPE,"Unsupported Type");  map.put(HttpURLConnection.HTTP_INTERNAL_ERROR,"Internal Error");  map.put(HttpURLConnection.HTTP_BAD_GATEWAY,"Bad Gateway");  map.put(HttpURLConnection.HTTP_NOT_IMPLEMENTED,"Not Implemented");  return map;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static final double compute(){  double e=0.5;  while (1.0 + e > 1.0) {    e*=0.5;  }  return e;}  }
class C{  @Override public boolean isLocked(){  return !mIsNotLocked;}  }
class C{  final public MutableString append(final CharSequence s){  if (s == null)   return append(NULL);  final int l=s.length();  if (l == 0)   return this;  final int newLength=length() + l;  expand(newLength);  getChars(s,0,l,array,newLength - l);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public static Date endOfDay(Date dateInst){  if (dateInst == null) {    throw new IllegalArgumentException();  }  final Calendar cal=new GregorianCalendar();  cal.setTime(dateInst);  cal.set(Calendar.HOUR_OF_DAY,LAST_HOUR_OF_DAY);  cal.set(Calendar.MINUTE,LAST_MINUTE);  cal.set(Calendar.SECOND,LAST_SECOND);  cal.set(Calendar.MILLISECOND,LAST_MILLISECOND);  return cal.getTime();}  }
class C{  int order(){  return (width() == 1) ? 0 : 3;}  }
class C{  public synchronized void replaceSegments(Collection<Segment> segments,Segment segment){  segment.descriptor().update(System.currentTimeMillis());  segment.descriptor().lock();  for (  Segment oldSegment : segments) {    if (!this.segments.containsKey(oldSegment.index())) {      throw new IllegalArgumentException("unknown segment at index: " + oldSegment.index());    }    this.segments.remove(oldSegment.index());  }  this.segments.put(segment.index(),segment);  resetCurrentSegment();}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  private static String toAuthorization(String username,String password){  StringBuilder buffer=new StringBuilder();  buffer.append(username).append(':');  if (password != null) {    buffer.append(password);  }  return "Basic " + new String(Base64.encodeBase64(buffer.toString().getBytes()));}  }
class C{  public synchronized void removeYTextLabel(double y,int scale){  mYTextLabels.get(scale).remove(y);}  }
class C{  public static List<String> provisionAWSVMWithEC2Client(AmazonEC2AsyncClient client,VerificationHost host,int numberOfInstance,String instanceType) throws Throwable {  host.log("Provisioning %d instances on the AWS endpoint using the EC2 client.",numberOfInstance);  RunInstancesRequest runInstancesRequest=new RunInstancesRequest().withImageId(EC2_LINUX_AMI).withInstanceType(instanceType).withMinCount(numberOfInstance).withMaxCount(numberOfInstance).withSecurityGroupIds(DEFAULT_SECURITY_GROUP_NAME);  AWSRunInstancesAsyncHandler creationHandler=new AWSRunInstancesAsyncHandler(host);  client.runInstancesAsync(runInstancesRequest,creationHandler);  host.waitFor("Waiting for instanceIds to be retured from AWS",null);  return creationHandler.instanceIds;}  }
class C{  @SuppressWarnings("unused") private String checkPathFull(String p,Integer line,Integer col,String msg,String source,Integer errorCode){  boolean result=!this.source.getNameForReporting().equals(p) && !this.source.isIncludedFile(p);  if (result) {    StringWriter misrouteInfo=new StringWriter();    PrintWriter pw=new PrintWriter(misrouteInfo,true);    pw.println(new ErrMsgBug().getMessage());    pw.println(new PathInfo(p).getMessage());    if (line != null) {      pw.println(new LineInfo(line.intValue()).getMessage());    }    if (col != null) {      pw.println(new ColumnInfo(col.intValue()).getMessage());    }    if (msg != null) {      pw.println(new MessageInfo(msg).getMessage());    }    if (source != null) {      pw.println(new SourceInfo(source).getMessage());    }    if (errorCode != null) {      pw.println(new ErrorCodeInfo(errorCode.intValue()).getMessage());    }    new Exception(new StackTraceInfo().getMessage()).printStackTrace(pw);    return misrouteInfo.toString();  } else {    return null;  }}  }
class C{  public static void restoreDefault(){  DateFactory.setInstance(new DateFactory());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:42.737 -0500",hash_original_method="501891754658354231C7815C688E4921",hash_generated_method="85E094A6A08FD6A70ED7A5BA82B082AB") @Override public void close() throws IOException {synchronized (lock) {    in.close();  }}  }
class C{  private static <T>void readFields(BufferedReader reader,DatabaseTableConfig<T> config) throws SQLException {  List<DatabaseFieldConfig> fields=new ArrayList<DatabaseFieldConfig>();  while (true) {    String line;    try {      line=reader.readLine();    } catch (    IOException e) {      throw SqlExceptionUtil.create("Could not read next field from config file",e);    }    if (line == null || line.equals(CONFIG_FILE_FIELDS_END)) {      break;    }    DatabaseFieldConfig fieldConfig=DatabaseFieldConfigLoader.fromReader(reader);    if (fieldConfig == null) {      break;    }    fields.add(fieldConfig);  }  config.setFieldConfigs(fields);}  }
class C{  public void clear(int bit){  int shiftBits=bit & LOW_MASK;  bits[subscript(bit)]&=~(1 << shiftBits);}  }
class C{  public static <T>void isEmpty(T[] str,String message,Object... params) throws AssertException {  if (CommonUtil.isNotEmpty(str)) {    throw new AssertException(ErrorCodeDef.NOT_NULL_20005,message,params);  }}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  static void createFileFromResourceCheckSizeDiff(String resource,Resource file) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  IOUtil.copy(InfoImpl.class.getResourceAsStream(resource),baos,true,false);  byte[] barr=baos.toByteArray();  if (file.exists()) {    long trgSize=file.length();    long srcSize=barr.length;    if (srcSize == trgSize)     return;    SystemOut.printDate(SystemUtil.getPrintWriter(SystemUtil.OUT),"update file:" + file);    SystemOut.printDate(SystemUtil.getPrintWriter(SystemUtil.OUT)," - source:" + srcSize);    SystemOut.printDate(SystemUtil.getPrintWriter(SystemUtil.OUT)," - target:" + trgSize);  } else   file.createNewFile();  IOUtil.copy(new ByteArrayInputStream(barr),file,true);}  }
class C{  public ByteColumn(int nrows){  this(nrows,nrows,(byte)0);}  }
class C{  public boolean isUnique(){  return unique;}  }
class C{  private void testByteStreamInsert(Connection c) throws Exception {  BufferedInputStream bIn=new BufferedInputStream(new FileInputStream(testBlobFile));  this.pstmt=c.prepareStatement("INSERT INTO BLOBTEST(blobdata) VALUES (?)");  this.pstmt.setBinaryStream(1,bIn,(int)testBlobFile.length());  this.pstmt.execute();  this.pstmt.clearParameters();  doRetrieval();}  }
class C{  public final float random(float howbig){  if (howbig == 0)   return 0;  if (internalRandom == null)   internalRandom=new Random();  float value=0;  do {    value=internalRandom.nextFloat() * howbig;  } while (value == howbig);  return value;}  }
class C{  public void addKnot(int x,int color){  int[] nx=new int[numKnots + 1];  int[] ny=new int[numKnots + 1];  System.arraycopy(xKnots,0,nx,0,numKnots);  System.arraycopy(yKnots,0,ny,0,numKnots);  xKnots=nx;  yKnots=ny;  xKnots[numKnots]=x;  yKnots[numKnots]=color;  numKnots++;  sortKnots();  rebuildGradient();}  }
class C{  public int compareTo(Long object){  return compare(value,object.value);}  }
class C{  public static ImageSearcher createColorOnlySearcher(int maximumHits){  return ImageSearcherFactory.createScalableColorImageSearcher(maximumHits);}  }
class C{  public void finalStatistics(final EvolutionState state,final int result){  for (int x=0; x < children.length; x++)   children[x].finalStatistics(state,result);  EvolutionAgent agent=(EvolutionAgent)state;  Individual best_inds[]=getBestIndividual(state);  Individual test_inds[]=new Individual[best_inds.length];  for (int i=0; i < best_inds.length; i++) {    test_inds[i]=(Individual)best_inds[i].clone();    ((MultiValuedRegression)(state.evaluator.p_problem)).describe(test_inds[i],state,0,defaultlog,Output.V_NO_GENERAL);  }  MyStatisticsData data=new MyStatisticsData(new Address(agent.getName()),state.generation,System.currentTimeMillis() - creationtime,best_inds,new Individual[0],test_inds);  if (agent.iamroot)   printStatistics(state,data); else {    for (int i=0; i < 5; i++) {      IRequest request=agent.fireMessage(agent.getRootAddress(),EvolutionAgent.M_STATS,data);      while (request.getStatus() == IRequest.WAITING) {        try {          Thread.sleep(1000);        } catch (        Exception e) {          state.output.error("Exception: " + e);        }      }      if (request.getStatus() == IRequest.DONE) {        break;      } else {        state.output.error("There was an error sending final statistics.");        try {          Thread.sleep(1000 * i ^ 2);        } catch (        Exception e) {          state.output.error("Exception: " + e);        }      }    }  }}  }
class C{  @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops") private com.jcabi.http.Request request(final Request req,final URI dest) throws IOException {  final String method=new RqMethod.Base(req).method();  com.jcabi.http.Request proxied=new JdkRequest(dest).method(method);  final RqHeaders headers=new RqHeaders.Base(req);  for (  final String name : headers.names()) {    if ("content-length".equals(new EnglishLowerCase(name).string())) {      continue;    }    if (TkProxy.isHost(name)) {      proxied=proxied.header(name,this.target);      continue;    }    for (    final String value : headers.header(name)) {      proxied=proxied.header(name,value);    }  }  if (headers.header("Content-Length").iterator().hasNext() || headers.header("Transfer-Encoding").iterator().hasNext()) {    final ByteArrayOutputStream output=new ByteArrayOutputStream();    new RqPrint(new RqLengthAware(req)).printBody(output);    proxied=proxied.body().set(output.toByteArray()).back();  }  return proxied;}  }
class C{  public static Date parse(final String date,final String format){  SimpleDateFormat sdf=new SimpleDateFormat(format);  try {    return sdf.parse(date);  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  void disconnect(String invocationContext,String activityToken){  service.traceDebug(TAG,"disconnect()");  disconnected=true;  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.DISCONNECT_ACTION);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.disconnect(invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError(MqttServiceConstants.DISCONNECT_ACTION,NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }  if (connectOptions.isCleanSession()) {    service.messageStore.clearArrivedMessages(clientHandle);  }  releaseWakeLock();}  }
class C{  public RingBufferMonitorStage(GraphManager gm,Pipe observedRingBuffer,Pipe notifyRingBuffer){  super(gm,NONE,notifyRingBuffer);  this.observedRingBuffer=observedRingBuffer;  this.notifyRingBuffer=notifyRingBuffer;  this.gm=gm;  FieldReferenceOffsetManager from=Pipe.from(notifyRingBuffer);  if (!from.fieldNameScript[0].equals("RingStatSample")) {    throw new UnsupportedOperationException("Can only write to ring buffer that is expecting montior records.");  }}  }
class C{  public static byte nextByte(){synchronized (random) {    return random.nextByte();  }}  }
class C{  public MappedObjectAnalyzer(XML aXml){  xml=aXml;}  }
class C{  public void DrawSemivariogramSurface(double Radius,boolean AnIsotropic){  double[][] data=new double[3][BinSurface.length * BinSurface[0].length];  int n=0;  double max=Double.MIN_VALUE;  for (int i=0; i < BinSurface.length; i++) {    for (int j=0; j < BinSurface[i].length; j++) {      data[0][n]=BinSurface[i][j].GridHorDistance;      data[1][n]=BinSurface[i][j].GridVerDistance;      if ((Math.pow(data[0][n],2) + Math.pow(data[1][n],2)) <= Radius * Radius && !Double.isNaN(BinSurface[i][j].Value)) {        data[2][n]=BinSurface[i][j].Value;        if (max < data[2][n]) {          max=data[2][n];        }      } else {        data[2][n]=-1;      }      n++;    }  }  DefaultXYZDataset dataset=new DefaultXYZDataset();  dataset.addSeries("Value",data);  NumberAxis xAxis=new NumberAxis();  xAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  xAxis.setLowerMargin(0.0);  xAxis.setUpperMargin(0.0);  NumberAxis yAxis=new NumberAxis();  yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  yAxis.setLowerMargin(0.0);  yAxis.setUpperMargin(0.0);  XYBlockRenderer renderer=new XYBlockRenderer();  renderer.setBlockWidth(LagSize);  renderer.setBlockHeight(LagSize);  renderer.setBlockAnchor(RectangleAnchor.CENTER);  LookupPaintScale paintScale=new LookupPaintScale(0,max,Color.white);  double colorRange=max / 6;  paintScale.add(0.0,Color.blue);  paintScale.add(1 * colorRange,Color.green);  paintScale.add(2 * colorRange,Color.cyan);  paintScale.add(3 * colorRange,Color.yellow);  paintScale.add(4 * colorRange,Color.ORANGE);  paintScale.add(5 * colorRange,Color.red);  renderer.setPaintScale(paintScale);  XYPlot plot=new XYPlot(dataset,xAxis,yAxis,renderer);  plot.setBackgroundPaint(Color.lightGray);  plot.setDomainGridlinesVisible(false);  plot.setRangeGridlinePaint(Color.white);  if (AnIsotropic) {    CombinedRangeXYPlot combinedrangexyplot=new CombinedRangeXYPlot();    XYSeries seriesT1=new XYSeries("1");    XYSeriesCollection AngleCollct=new XYSeriesCollection();    double bw=BandWidth;    double r=bw / Math.sin(Tolerance);    if (r > Radius) {      bw=Radius * Math.sin(Tolerance);      r=Radius;    }    seriesT1.add(r * Math.cos(Angle + Tolerance),r * Math.sin(Angle + Tolerance));    if ((double)Math.round(Math.sin(Angle) * 10000) / 10000 != 0) {      if ((double)Math.round(Math.cos(Angle) * 10000) / 10000 != 0) {        double a=(1 + Math.pow(Math.tan(Angle),2));        double b=2 * bw / Math.sin(Angle) * Math.pow(Math.tan(Angle),2);        double c=Math.pow(Math.tan(Angle),2) * Math.pow(bw / Math.sin(Angle),2) - Math.pow(Radius,2);        double x1=(-b + Math.sqrt(Math.pow(b,2) - 4 * a * c)) / (2 * a);        double y1=Math.tan(Angle) * (x1 + bw / Math.sin(Angle));        double x2=(-b - Math.sqrt(Math.pow(b,2) - 4 * a * c)) / (2 * a);        double y2=Math.tan(Angle) * (x2 + bw / Math.sin(Angle));        double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));        double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x2),2)) + (Math.pow((Radius * Math.sin(Angle) - y2),2)));        if (d1 < d2) {          seriesT1.add(x1,y1);        } else {          seriesT1.add(x2,y2);        }      } else {        double x1=-bw * Math.sin(Angle);        double y1=Math.sqrt(Math.pow(Radius,2) - Math.pow(x1,2));        double y2=-Math.sqrt(Math.pow(Radius,2) - Math.pow(x1,2));        double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));        double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y2),2)));        if (d1 < d2) {          seriesT1.add(x1,y1);        } else {          seriesT1.add(x1,y2);        }      }    } else {      double y1=bw * Math.cos(Angle);      double x1=Math.sqrt(Math.pow(Radius,2) - Math.pow(y1,2));      double x2=-Math.sqrt(Math.pow(Radius,2) - Math.pow(y1,2));      double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));      double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x2),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));      if (d1 < d2) {        seriesT1.add(x1,y1);      } else {        seriesT1.add(x2,y1);      }    }    AngleCollct.addSeries(seriesT1);    XYSeries seriesT2=new XYSeries("2");    seriesT2.add(r * Math.cos(Angle + Tolerance),r * Math.sin(Angle + Tolerance));    seriesT2.add(0.0,0.0);    AngleCollct.addSeries(seriesT2);    XYSeries seriesT3=new XYSeries("3");    seriesT3.add(Radius * Math.cos(Angle),Radius * Math.sin(Angle));    seriesT3.add(0,0);    AngleCollct.addSeries(seriesT3);    XYSeries seriesT4=new XYSeries("4");    seriesT4.add(r * Math.cos(Angle - Tolerance),r * Math.sin(Angle - Tolerance));    seriesT4.add(0,0);    AngleCollct.addSeries(seriesT4);    XYSeries seriesT5=new XYSeries("5");    seriesT5.add(r * Math.cos(Angle - Tolerance),r * Math.sin(Angle - Tolerance));    if ((double)Math.round(Math.sin(Angle) * 10000) / 10000 != 0) {      if ((double)Math.round(Math.cos(Angle) * 10000) / 10000 != 0) {        double a=(1 + Math.pow(Math.tan(Angle),2));        double b=-2 * bw / Math.sin(Angle) * Math.pow(Math.tan(Angle),2);        double c=Math.pow(Math.tan(Angle),2) * Math.pow(bw / Math.sin(Angle),2) - Math.pow(Radius,2);        double x1=(-b + Math.sqrt(Math.pow(b,2) - 4 * a * c)) / (2 * a);        double y1=Math.tan(Angle) * (x1 - bw / Math.sin(Angle));        double x2=(-b - Math.sqrt(Math.pow(b,2) - 4 * a * c)) / (2 * a);        double y2=Math.tan(Angle) * (x2 - bw / Math.sin(Angle));        double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));        double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x2),2)) + (Math.pow((Radius * Math.sin(Angle) - y2),2)));        if (d1 < d2) {          seriesT5.add(x1,y1);        } else {          seriesT5.add(x2,y2);        }      } else {        double x1=bw * Math.sin(Angle);        double y1=Math.sqrt(Math.pow(Radius,2) - Math.pow(x1,2));        double y2=-Math.sqrt(Math.pow(Radius,2) - Math.pow(x1,2));        double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));        double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y2),2)));        if (d1 < d2) {          seriesT5.add(x1,y1);        } else {          seriesT5.add(x1,y2);        }      }    } else {      double y1=-bw * Math.cos(Angle);      double x1=Math.sqrt(Math.pow(Radius,2) - Math.pow(y1,2));      double x2=-Math.sqrt(Math.pow(Radius,2) - Math.pow(y1,2));      double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));      double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x2),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));      if (d1 < d2) {        seriesT5.add(x1,y1);      } else {        seriesT5.add(x2,y1);      }    }    AngleCollct.addSeries(seriesT5);    plot.setDataset(1,AngleCollct);    XYLineAndShapeRenderer lineshapRend=new XYLineAndShapeRenderer(true,false);    for (int i=0; i < AngleCollct.getSeriesCount(); i++) {      lineshapRend.setSeriesPaint(i,Color.BLACK);    }    plot.setRenderer(1,lineshapRend);    combinedrangexyplot.add(plot);  }  plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);  JFreeChart chart=new JFreeChart("Semivariogram Surface",plot);  chart.removeLegend();  chart.setBackgroundPaint(Color.white);  ChartFrame frame=new ChartFrame("",chart);  frame.pack();  frame.setVisible(true);}  }
class C{  public void testLateComingStatement(){  EPServiceProvider epService=allocateEngine(false);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  sendTimeEvent(epService,"2002-05-1T08:30:00.000");  EPStatement stmtCtx=epService.getEPAdministrator().createEPL("create context NestedContext " + "context EightToNine as start (0, 8, *, *, *) end (0, 9, *, *, *), " + "context SegmentedByAString partition by theString from SupportBean");  SupportUpdateListener listenerOne=new SupportUpdateListener();  String[] fields="c0,c1".split(",");  EPStatementSPI statementOne=(EPStatementSPI)epService.getEPAdministrator().createEPL("context NestedContext select theString as c0, count(*) as c1 from SupportBean");  statementOne.addListener(listenerOne);  epService.getEPRuntime().sendEvent(new SupportBean("E1",10));  EPAssertionUtil.assertProps(listenerOne.assertOneGetNewAndReset(),fields,new Object[]{"E1",1L});  SupportUpdateListener listenerTwo=new SupportUpdateListener();  EPStatementSPI statementTwo=(EPStatementSPI)epService.getEPAdministrator().createEPL("context NestedContext select theString as c0, sum(intPrimitive) as c1 from SupportBean");  statementTwo.addListener(listenerTwo);  epService.getEPRuntime().sendEvent(new SupportBean("E1",20));  EPAssertionUtil.assertProps(listenerOne.assertOneGetNewAndReset(),fields,new Object[]{"E1",2L});  EPAssertionUtil.assertProps(listenerTwo.assertOneGetNewAndReset(),fields,new Object[]{"E1",20});  epService.getEPRuntime().sendEvent(new SupportBean("E2",30));  EPAssertionUtil.assertProps(listenerOne.assertOneGetNewAndReset(),fields,new Object[]{"E2",1L});  EPAssertionUtil.assertProps(listenerTwo.assertOneGetNewAndReset(),fields,new Object[]{"E2",30});  SupportUpdateListener listenerThree=new SupportUpdateListener();  EPStatementSPI statementThree=(EPStatementSPI)epService.getEPAdministrator().createEPL("context NestedContext select theString as c0, min(intPrimitive) as c1 from SupportBean");  statementThree.addListener(listenerThree);  epService.getEPRuntime().sendEvent(new SupportBean("E1",40));  EPAssertionUtil.assertProps(listenerOne.assertOneGetNewAndReset(),fields,new Object[]{"E1",3L});  EPAssertionUtil.assertProps(listenerTwo.assertOneGetNewAndReset(),fields,new Object[]{"E1",60});  EPAssertionUtil.assertProps(listenerThree.assertOneGetNewAndReset(),fields,new Object[]{"E1",40});  statementTwo.destroy();  epService.getEPRuntime().sendEvent(new SupportBean("E1",50));  EPAssertionUtil.assertProps(listenerOne.assertOneGetNewAndReset(),fields,new Object[]{"E1",4L});  assertFalse(listenerTwo.isInvoked());  EPAssertionUtil.assertProps(listenerThree.assertOneGetNewAndReset(),fields,new Object[]{"E1",40});  statementOne.destroy();  epService.getEPRuntime().sendEvent(new SupportBean("E1",-60));  assertFalse(listenerOne.isInvoked());  assertFalse(listenerTwo.isInvoked());  EPAssertionUtil.assertProps(listenerThree.assertOneGetNewAndReset(),fields,new Object[]{"E1",-60});  statementThree.destroy();  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  public boolean isVisible(){  return (visible);}  }
class C{  public static TLAExpr DefaultVarInit(){  Vector line=new Vector();  line.addElement(new TLAToken("defaultInitValue",0,0));  Vector vec=new Vector();  vec.addElement(line);  TLAExpr exp=new TLAExpr(vec);  exp.normalize();  return exp;}  }
class C{  protected final float meanFloat(int i,int j,int size){  double sum=0;  for (int r=i; r < (i + size); ++r) {    mmbBuf.get(r,j * numBytes,size * numBytes,meanArray);    for (int c=j; c < (j + size); ++c) {      sum+=meanBuf.getFloat();    }    meanBuf.rewind();  }  return ((float)(sum / (size * size)));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenotationnodevalue.class,args);}  }
class C{  protected void firePropertyChange(PropertyChangeEvent event){  if (listenerList == null)   return;  PropertyChangeListener listener;  for (  PropertyChangeListener aListenerList : listenerList) {    listener=aListenerList;    listener.propertyChange(event);  }}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  private void keepAlive(){  Thread current=Thread.currentThread();  try {    heartBeat();    while (current == keepAliveThread) {      Thread.sleep(HEART_BEAT);      heartBeat();    }  } catch (  InterruptedException e) {    log.warn("Heartbeat interrupted",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:34.364 -0500",hash_original_method="8E3E997094B6FE23C6A87821AE0A248F",hash_generated_method="BD0D062C8941F4451D8E454E02FFD499") public void writeToParcel(Parcel dest,int flags){  dest.writeString(operatorAlphaLong);  dest.writeString(operatorAlphaShort);  dest.writeString(operatorNumeric);  dest.writeSerializable(state);}  }
class C{  public void removeDataCallback(OneSheeldDataCallback dataCallback){  if (dataCallback != null && dataCallbacks.contains(dataCallback))   dataCallbacks.remove(dataCallback);}  }
class C{  @PostConstruct public void init(){  setStyleName("sp-table");  setSizeFull();  setImmediate(true);  setHeight(100.0f,Unit.PERCENTAGE);  addStyleName(ValoTheme.TABLE_NO_VERTICAL_LINES);  addStyleName(ValoTheme.TABLE_SMALL);  setColumnCollapsingAllowed(true);  addCustomGeneratedColumns();  restoreOnLoad();  populateTableData();  setId(UIComponentIdProvider.CUSTOM_FILTER_TARGET_TABLE_ID);  setSelectable(false);  eventBus.subscribe(this);  setItemDescriptionGenerator(new AssignInstalledDSTooltipGenerator());}  }
class C{  protected TreeNode findNode(JTree tree,Object object){  DefaultMutableTreeNode node=(DefaultMutableTreeNode)tree.getModel().getRoot();  return findNode(node,object);}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.mvcc=true;  test.test();}  }
class C{  private void interpolate(){  StringBuffer buffer=new StringBuffer();  for (  Map.Entry<?,?> entry : entrySet()) {    buffer.setLength(0);    Matcher matcher=PROPERTY_REFERENCE_PATTERN.matcher(entry.getValue().toString());    while (matcher.find()) {      String interpolatedValue=getProperty(matcher.group(1));      if (null != interpolatedValue) {        matcher.appendReplacement(buffer,interpolatedValue);      }    }    matcher.appendTail(buffer);    setProperty((String)entry.getKey(),buffer.toString());  }}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=TOAST_HEIGHT;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public Bindings addOptComponent(String property,Class<? extends IValidatable> clazz,JToggleButton c){  return addOptComponent(property,clazz,c,false);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public Iterator<MessageEntry> iterator(){  return this.tweets.descendingMap().values().iterator();}  }
class C{  public static String toHexString(byte[] ba){  return toHexString(ba,0,ba.length);}  }
class C{  private String nextToInternal(String excluded){  int start=pos;  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n' || excluded.indexOf(c) != -1) {      return in.substring(start,pos);    }  }  return in.substring(start);}  }
class C{  private static String escapeXML(String s){  if (s == null) {    return null;  }  final int length=s.length();  StringBuffer b=new StringBuffer();  for (int i=0; i < length; i++) {    char c=s.charAt(i);switch (c) {case '&':      b.append("&amp;");    break;case '<':  b.append("&lt;");break;case '>':b.append("&gt;");break;default :b.append(c);break;}}return b.toString();}  }
class C{  public boolean approveIt(){  if (!isValidAction(ACTION_Approve))   return false;  if (m_document != null) {    if (m_document.approveIt()) {      m_status=STATUS_Approved;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_Approved;  return true;}  }
class C{  private void initializePlot(){  plot=new VisualizationPlot();{    CSSClass cls=new CSSClass(this,"background");    final String bgcol=context.getStyleLibrary().getBackgroundColor(StyleLibrary.PAGE);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,bgcol);    plot.addCSSClassOrLogError(cls);    Element background=plot.svgElement(SVGConstants.SVG_RECT_TAG);    background.setAttribute(SVGConstants.SVG_X_ATTRIBUTE,"0");    background.setAttribute(SVGConstants.SVG_Y_ATTRIBUTE,"0");    background.setAttribute(SVGConstants.SVG_WIDTH_ATTRIBUTE,"100%");    background.setAttribute(SVGConstants.SVG_HEIGHT_ATTRIBUTE,"100%");    SVGUtil.setCSSClass(background,cls.getName());    if ("white".equals(bgcol)) {      background.setAttribute(SVGPlot.NO_EXPORT_ATTRIBUTE,SVGPlot.NO_EXPORT_ATTRIBUTE);    }    plot.getRoot().appendChild(background);  }{    selcss=new CSSClass(this,"s");    if (DEBUG_LAYOUT) {      selcss.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGConstants.CSS_RED_VALUE);      selcss.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,.00001 * StyleLibrary.SCALE);      selcss.setStatement(SVGConstants.CSS_STROKE_OPACITY_PROPERTY,"0.5");    }    selcss.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_RED_VALUE);    selcss.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,"0");    selcss.setStatement(SVGConstants.CSS_CURSOR_PROPERTY,SVGConstants.CSS_POINTER_VALUE);    plot.addCSSClassOrLogError(selcss);    CSSClass hovcss=new CSSClass(this,"h");    hovcss.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,"0.25");    plot.addCSSClassOrLogError(hovcss);    hoverer=new CSSHoverClass(hovcss.getName(),null,true);  }  if (single) {    plot.setDisableInteractions(true);  }  SVGEffects.addShadowFilter(plot);  SVGEffects.addLightGradient(plot);}  }
class C{  public static <T>void rotate(T[] ray,int first,int new_first,int last){  int next=new_first;  while (next != first) {    T temp=ray[first];    ray[first]=ray[next];    ray[next]=temp;    first++;    next++;    if (next == last) {      next=new_first;    } else     if (first == new_first) {      new_first=next;    }  }}  }
class C{  private static boolean canStopUpdating(Cube cube,MutableBlockPos pos,int topBlockY){  pos.setY(cube.getCoords().getMaxBlockY());  boolean isDirectSkylight=pos.getY() > topBlockY;  int lightValue=cube.getLightFor(EnumSkyBlock.SKY,pos);  return !isDirectSkylight && lightValue < 15;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.873 -0500",hash_original_method="9E045B3D7FEF0937E005932B72E7BC4F",hash_generated_method="D5AFF4E478858FC622769DBC7F688630") private static void applyRlimitSecurityPolicy(Arguments args,Credentials peer) throws ZygoteSecurityException {  int peerUid=peer.getUid();  if (!(peerUid == 0 || peerUid == Process.SYSTEM_UID)) {    if (args.rlimits != null) {      throw new ZygoteSecurityException("This UID may not specify rlimits.");    }  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  LookMyPrivateDao.dropTable(db,ifExists);}  }
class C{  public static void validateTagName(Element e,String name) throws XMLParseException {  if (!e.getTagName().equals(name)) {    throw new XMLParseException("Wrong tag name! Expected " + name + ", found "+ e.getTagName()+ ".");  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.698 -0500",hash_original_method="68A1F8E40482E8D5899E0A36610D7F57",hash_generated_method="8DF30F2216A35375468497DB19BD60B0") private static ClassLoader createSystemClassLoader(){  return BootClassLoader.getInstance();}  }
class C{  public static Thread consumeProcessOutputStream(Process self,Appendable output){  Thread thread=new Thread(new TextDumper(self.getInputStream(),output));  thread.start();  return thread;}  }
class C{  public static DoubleVector rnorm(int n,double mean,double sd,Random random){  if (sd < 0.0)   throw new IllegalArgumentException("standard deviation < 0.0");  if (sd == 0.0)   return new DoubleVector(n,mean);  DoubleVector v=new DoubleVector(n);  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);  return v;}  }
class C{  public void testObject(){  Metadata meta1=new Metadata();  Metadata meta2=new Metadata();  assertFalse(meta1.equals(null));  assertFalse(meta1.equals("String"));  assertTrue(meta1.equals(meta2));  meta1.add("name-one","value-1.1");  assertFalse(meta1.equals(meta2));  meta2.add("name-one","value-1.1");  assertTrue(meta1.equals(meta2));  meta1.add("name-one","value-1.2");  assertFalse(meta1.equals(meta2));  meta2.add("name-one","value-1.2");  assertTrue(meta1.equals(meta2));  meta1.add("name-two","value-2.1");  assertFalse(meta1.equals(meta2));  meta2.add("name-two","value-2.1");  assertTrue(meta1.equals(meta2));  meta1.add("name-two","value-2.2");  assertFalse(meta1.equals(meta2));  meta2.add("name-two","value-2.x");  assertFalse(meta1.equals(meta2));}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  @Override public int[] rerankPermutation(Recommendation<U,I> recommendation,int maxLength){  return getBasePerm(min(maxLength,recommendation.getItems().size()));}  }
class C{  public static ValueTime fromNanos(long nanos){  return (ValueTime)cache(new ValueTime(nanos));}  }
class C{  private void pushCurrentDoc(){  for (int i=0; i < numSubsOnDoc; i++) {    docIDQueue.add(subsOnDoc[i]);  }  numSubsOnDoc=0;}  }
class C{  public static boolean decodeBoolean(byte[] value) throws TlvException {  if (value.length == 1) {    if (value[0] == 0) {      return false;    } else     if (value[0] == 1) {      return true;    } else {      LOG.warn("Boolean value should be encoded as integer with value 0 or 1, not {}",value[0]);      return false;    }  }  throw new TlvException("Invalid length for a boolean value: " + value.length);}  }
class C{  public final void testRemoveAllValidatorsFromCollection(){  Validator<CharSequence> validator1=Validators.notEmpty("foo");  Validator<CharSequence> validator2=Validators.noWhitespace("bar");  Validator<CharSequence> validator3=Validators.number("foo2");  Collection<Validator<CharSequence>> validators1=new LinkedList<>();  validators1.add(validator1);  validators1.add(validator2);  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addAllValidators(validators1);  abstractValidateableView.addValidator(validator3);  abstractValidateableView.removeAllValidators(validators1);  abstractValidateableView.removeAllValidators(validators1);  Collection<Validator<CharSequence>> validators2=abstractValidateableView.getValidators();  assertEquals(1,validators2.size());  assertEquals(validator3,validators2.iterator().next());}  }
class C{  public boolean isCollinearWith(Vector other){  if (x == 0 && y == 0 && z == 0) {    return true;  }  final double otherX=other.x;  final double otherY=other.y;  final double otherZ=other.z;  if (otherX == 0 && otherY == 0 && otherZ == 0) {    return true;  }  if ((x == 0) != (otherX == 0))   return false;  if ((y == 0) != (otherY == 0))   return false;  if ((z == 0) != (otherZ == 0))   return false;  final double quotientX=otherX / x;  if (!Double.isNaN(quotientX)) {    return other.equals(multiply(quotientX));  }  final double quotientY=otherY / y;  if (!Double.isNaN(quotientY)) {    return other.equals(multiply(quotientY));  }  final double quotientZ=otherZ / z;  if (!Double.isNaN(quotientZ)) {    return other.equals(multiply(quotientZ));  }  throw new RuntimeException("This should not happen");}  }
class C{  private static OFActionSetNwTos decode_set_tos_bits(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        byte tosbits=get_byte(n.group(1));        OFActionSetNwTos.Builder ab=OFFactories.getFactory(version).actions().buildSetNwTos();        ab.setNwTos(tosbits);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid dst-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public void renderVelocity(GL2 gl){  gl.glColor4fv(Preferences.getBodyVelocityColor(),0);  Vector2 c=this.getWorldCenter();  Vector2 v=this.getLinearVelocity();  double av=this.getAngularVelocity();  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(c.x,c.y);  gl.glVertex2d(c.x + v.x,c.y + v.y);  gl.glEnd();  RenderUtilities.drawArc(gl,c.x,c.y,0.125,0,av);}  }
class C{  private void decorateUnManagedProtectionSet(RecoverPointVolumeIngestionContext volumeContext,Volume volume,UnManagedVolume unManagedVolume){  UnManagedProtectionSet umpset=volumeContext.getUnManagedProtectionSet();  if (!umpset.getManagedVolumeIds().contains(volume.getId().toString())) {    umpset.getManagedVolumeIds().add(volume.getId().toString());  }  if (umpset.getUnManagedVolumeIds().contains(unManagedVolume.getId().toString())) {    umpset.getUnManagedVolumeIds().remove(unManagedVolume.getId().toString());  }  volumeContext.addDataObjectToUpdate(umpset,unManagedVolume);}  }
class C{  public void addPropertyChangeListener(final String propertyName,final PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);}  }
class C{  private void inBlockAdvance(long n) throws IOException {  for (long i=0; i < n; ++i) {    checkKey();    if (!valueBufferInputStream.isClosed()) {      valueBufferInputStream.close();    }    klen=-1;    currentLocation.incRecordIndex();  }}  }
class C{  public static FingerprintAttribute createFingerprintAttribute(){  FingerprintAttribute attribute=new FingerprintAttribute();  return attribute;}  }
class C{  public void removeTrackingIcon(GutterIconInfo tag){  iconArea.removeTrackingIcon(tag);}  }
class C{  public static void putDouble(byte[] arr,long off,double val){  if (UNALIGNED)   UNSAFE.putDouble(arr,off,val); else   putLongByByte(arr,off,Double.doubleToLongBits(val),BIG_ENDIAN);}  }
class C{  public void note_reduction_use(){  _num_reductions++;}  }
class C{  public TermVectorsRequest selectedFields(String... fields){  selectedFields=fields != null && fields.length != 0 ? Sets.newHashSet(fields) : null;  return this;}  }
class C{  public static boolean isWindows95(){  return osName.indexOf("Windows 95") > -1 && osVersion.equals("4.0");}  }
class C{  @SubscribeEvent public void preTextureHook(TextureStitchEvent.Pre event){  if (event.map.getTextureType() == 0) {    Game.render().blockTextures.forEach(null);    Game.render().entityTextures.forEach(null);  } else   if (event.map.getTextureType() == 1) {    Game.render().itemTextures.forEach(null);  }}  }
class C{  private void collectOneClass(Environment env,ClassDeclaration parent,MethodSet myMethods,MethodSet allMethods,MethodSet mirandaMethods){  try {    ClassDefinition pClass=parent.getClassDefinition(env);    Iterator methods=pClass.getMethods(env);    while (methods.hasNext()) {      MemberDefinition method=(MemberDefinition)methods.next();      if (method.isPrivate() || method.isConstructor() || (pClass.isInterface() && !method.isAbstract())) {        continue;      }      Identifier name=method.getName();      Type type=method.getType();      MemberDefinition override=myMethods.lookupSig(name,type);      if (method.isPackagePrivate() && !inSamePackage(method.getClassDeclaration())) {        if (override != null && this instanceof sun.tools.javac.SourceClass) {          env.error(method.getWhere(),"warn.no.override.access",override,override.getClassDeclaration(),method.getClassDeclaration());        }        if (method.isAbstract()) {          permanentlyAbstractMethods.add(method);        }        continue;      }      if (override != null) {        override.checkOverride(env,method);      } else {        MemberDefinition formerMethod=allMethods.lookupSig(name,type);        if (formerMethod == null) {          if (mirandaMethods != null && pClass.isInterface() && !isInterface()) {            method=new sun.tools.javac.SourceMember(method,this,env);            mirandaMethods.add(method);          }          allMethods.add(method);        } else         if (isInterface() && !formerMethod.isAbstract() && method.isAbstract()) {          allMethods.replace(method);        } else {          if (!formerMethod.checkMeet(env,method,this.getClassDeclaration())) {            continue;          }          if (formerMethod.couldOverride(env,method)) {            continue;          }          if (method.couldOverride(env,formerMethod)) {            if (mirandaMethods != null && pClass.isInterface() && !isInterface()) {              method=new sun.tools.javac.SourceMember(method,this,env);              mirandaMethods.replace(method);            }            allMethods.replace(method);            continue;          }          env.error(this.where,"nontrivial.meet",method,formerMethod.getClassDefinition(),method.getClassDeclaration());        }      }    }  } catch (  ClassNotFound ee) {    env.error(getWhere(),"class.not.found",ee.name,this);  }}  }
class C{  public ContentNode parse(JSDocCharScanner scanner,TagDictionary<AbstractInlineTagDefinition> inlineTagsDictinary){  ComposedContent description=DomFactory.eINSTANCE.createComposedContent();  if (!scanner.hasNext()) {    return null;  }  if (nextIsTagTitle(scanner)) {    return null;  }  int start=scanner.nextOffset();  int end=start;  StringBuilder strb=new StringBuilder();  while (scanner.hasNext()) {    char c=scanner.peek();    if (regionStart(c)) {      ScannerState st=scanner.saveState();      InlineTag tag=(InlineTag)parseRegion(scanner,inlineTagsDictinary);      if (tag != null) {        saveTextTokens(description,start,end,strb);        strb=new StringBuilder();        start=end;        description.getContents().add(tag);        continue;      } else {        scanner.restoreState(st);        if (start == end) {          assert false;        }      }    }    scanner.next();    if (JSDocCharScanner.isNL(c)) {      if (scanner.hasNext() && !nextIsTagTitle(scanner)) {        end=scanner.offset();      } else {        break;      }    }    strb.append(c);    end=scanner.offset();  }  String pendingData=strb.toString();  if (pendingData.isEmpty() == false) {    saveTextTokens(description,start,end,strb);  }switch (description.getContents().size()) {case 0:    return null;case 1:  return description.getContents().get(0);default :return description;}}  }
class C{  private void logMessage(String msg,Object[] obj){  if (getMonitoringPropertiesLoader().isToLogIndications()) {    _logger.debug(msg,obj);  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response createVolume(@PathParam("tenant_id") String openstackTenantId,@HeaderParam("X-Cinder-V1-Call") String isV1Call,VolumeCreateRequestGen param,@Context HttpHeaders header) throws InternalException {  Project project=getCinderHelper().getProject(openstackTenantId,getUserFromContext());  String snapshotId=param.volume.snapshot_id;  String sourceVolId=param.volume.source_volid;  String imageId=param.volume.imageRef;  String consistencygroup_id=param.volume.consistencygroup_id;  String volume_type=param.volume.volume_type;  boolean hasConsistencyGroup=false;  if (project == null) {    if (openstackTenantId != null) {      throw APIException.badRequests.projectWithTagNonexistent(openstackTenantId);    } else {      throw APIException.badRequests.parameterIsNullOrEmpty(PROJECT_TENANTID_NULL);    }  }  URI tenantUri=project.getTenantOrg().getURI();  TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,tenantUri);  if (tenant == null)   throw APIException.notFound.unableToFindUserScopeOfSystem();  _log.debug("Create volume: project = {}, tenant = {}",project.getLabel(),tenant.getLabel());  if (param.volume.size <= 0) {    _log.error("volume size should not be zero or negative ={} ",param.volume.size);    return CinderApiUtils.createErrorResponse(400,"Bad Request : Invalid Volume size");  }  long requestedSize=param.volume.size * GB;  VirtualPool vpool=getVpool(param.volume.volume_type);  Volume sourceVolume=null;  if (vpool == null) {    if (sourceVolId != null) {      sourceVolume=findVolume(sourceVolId,openstackTenantId);      if (sourceVolume == null) {        _log.error("Invalid Source Volume ID ={} ",sourceVolId);        return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid Source Volume ID " + sourceVolId);      }      vpool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());    } else {      _log.error("Invalid Volume Type ={} ",volume_type);      return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid Volume Type " + volume_type);    }  }  if (!validateVolumeCreate(openstackTenantId,null,requestedSize)) {    _log.info("The volume can not be created because of insufficient project quota.");    throw APIException.badRequests.insufficientQuotaForProject(project.getLabel(),"volume");  } else   if (!validateVolumeCreate(openstackTenantId,vpool,requestedSize)) {    _log.info("The volume can not be created because of insufficient quota for virtual pool.");    throw APIException.badRequests.insufficientQuotaForVirtualPool(vpool.getLabel(),"virtual pool");  }  _log.debug("Create volume: vpool = {}",vpool.getLabel());  VirtualArray varray=getCinderHelper().getVarray(param.volume.availability_zone,getUserFromContext());  if ((snapshotId == null) && (sourceVolId == null) && (varray == null)) {    throw APIException.badRequests.parameterIsNotValid(param.volume.availability_zone);  }  URI blockConsistencyGroupId=null;  BlockConsistencyGroup blockConsistencyGroup=null;  if (consistencygroup_id != null) {    _log.info("Verifying for consistency group : " + consistencygroup_id);    blockConsistencyGroup=(BlockConsistencyGroup)getCinderHelper().queryByTag(URI.create(consistencygroup_id),getUserFromContext(),BlockConsistencyGroup.class);    if (getCinderHelper().verifyConsistencyGroupHasSnapshot(blockConsistencyGroup)) {      _log.error("Bad Request : Consistency Group has Snapshot ");      return CinderApiUtils.createErrorResponse(400,"Bad Request : Consistency Group has Snapshot ");    }    blockConsistencyGroupId=blockConsistencyGroup.getId();    if (blockConsistencyGroup.getTag() != null && consistencygroup_id.equals(blockConsistencyGroupId.toString().split(":")[3])) {      for (      ScopedLabel tag : blockConsistencyGroup.getTag()) {        if (tag.getScope().equals("volume_types")) {          if (tag.getLabel().equals(volume_type)) {            hasConsistencyGroup=true;          } else {            return CinderApiUtils.createErrorResponse(404,"Invalid volume: No consistency group exist for volume : " + param.volume.display_name);          }        }      }    } else {      return CinderApiUtils.createErrorResponse(404,"Invalid Consistency Group Id : No Such Consistency group exists");    }  }  BlockSnapshot snapshot=null;  URI snapUri=null;  if (snapshotId != null) {    snapshot=(BlockSnapshot)getCinderHelper().queryByTag(URI.create(snapshotId),getUserFromContext(),BlockSnapshot.class);    if (snapshot == null) {      _log.error("Invalid snapshot id ={} ",snapshotId);      return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid snapshot id" + snapshotId);    } else {      snapUri=snapshot.getId();      URI varrayUri=snapshot.getVirtualArray();      if (varray == null) {        varray=_dbClient.queryObject(VirtualArray.class,varrayUri);      }    }  }  if (varray != null)   _log.info("Create volume: varray = {}",varray.getLabel());  String name=null;  String description=null;  _log.info("is isV1Call {}",isV1Call);  _log.info("name = {},  description  = {}",name,description);  if (isV1Call != null) {    name=param.volume.display_name;    description=param.volume.display_description;  } else {    name=param.volume.name;    description=param.volume.description;  }  if (name == null) {    name="volume-" + RandomStringUtils.random(10);  }  _log.info("param.volume.name = {}, param.volume.display_name = {}",param.volume.name,param.volume.display_name);  _log.info("param.volume.description = {}, param.volume.display_description = {}",param.volume.description,param.volume.display_description);  if (name == null || (name.length() <= 2))   throw APIException.badRequests.parameterIsNotValid(name);  URI projectUri=project.getId();  checkForDuplicateName(name,Volume.class,projectUri,"project",_dbClient);  verifyUserIsAuthorizedForRequest(project,vpool,varray);  _log.debug(" volume name = {}, size = {} GB",name,param.volume.size);  int volumeCount=1;  VolumeCreate volumeCreate=new VolumeCreate(name,Long.toString(requestedSize),volumeCount,vpool.getId(),varray.getId(),project.getId());  BlockServiceApi api=getBlockServiceImpl(vpool,_dbClient);  CapacityUtils.validateQuotasForProvisioning(_dbClient,vpool,project,tenant,requestedSize,"volume");  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,volumeCount);  capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,requestedSize);  String task=UUID.randomUUID().toString();  TaskList tasklist=null;  BlockFullCopyManager blkFullCpManager=new BlockFullCopyManager(_dbClient,_permissionsHelper,_auditMgr,_coordinator,_placementManager,sc,uriInfo,_request,null);  if (hasConsistencyGroup && blockConsistencyGroupId != null) {    try {      checkForConsistencyGroup(vpool,blockConsistencyGroup,project,api,varray,capabilities,blkFullCpManager);      volumeCreate.setConsistencyGroup(blockConsistencyGroupId);    } catch (    APIException exp) {      return CinderApiUtils.createErrorResponse(400,"Bad Request : can't create volume for the consistency group : " + blockConsistencyGroupId);    }  }  if (sourceVolId != null) {    _log.debug("Creating New Volume from Volume : Source volume ID ={}",sourceVolId);    if (sourceVolume != null) {      Volume vol=findVolume(sourceVolId,openstackTenantId);      if (vol == null) {        _log.debug("Creating Clone Volume failed : Invalid source volume id ");        return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid source volume id" + sourceVolId);      }      tasklist=volumeClone(name,project,sourceVolId,varray,volumeCount,sourceVolume,blkFullCpManager);    } else {      _log.debug("Creating Clone Volume failed : Null Source volume ");      return CinderApiUtils.createErrorResponse(404,"Not Found : Null source volume ");    }  } else   if (snapshotId != null) {    _log.debug("Creating New Volume from Snapshot ID ={}",snapshotId);    tasklist=volumeFromSnapshot(name,project,snapshotId,varray,param,volumeCount,blkFullCpManager,snapUri,snapshot);  } else   if ((snapshotId == null) && (sourceVolId == null)) {    _log.debug("Creating New Volume where snapshotId and sourceVolId are null");    tasklist=newVolume(volumeCreate,project,api,capabilities,varray,task,vpool,param,volumeCount,requestedSize,name);  }  if (imageId != null) {    _log.debug("Creating New Volume from imageid ={}",imageId);    tasklist=volumeFromImage(name,project,varray,param,volumeCount,blkFullCpManager,imageId);  }  if (!(tasklist.getTaskList().isEmpty())) {    for (    TaskResourceRep rep : tasklist.getTaskList()) {      URI volumeUri=rep.getResource().getId();      Volume vol=_dbClient.queryObject(Volume.class,volumeUri);      if (vol != null) {        StringMap extensions=vol.getExtensions();        if (extensions == null)         extensions=new StringMap();        extensions.put("display_description",(description == null) ? "" : description);        vol.setExtensions(extensions);        ScopedLabelSet tagSet=new ScopedLabelSet();        vol.setTag(tagSet);        String[] splits=volumeUri.toString().split(":");        String tagName=splits[3];        if (tagName == null || tagName.isEmpty() || tagName.length() < 2) {          throw APIException.badRequests.parameterTooShortOrEmpty("Tag",2);        }        URI tenantOwner=vol.getTenant().getURI();        ScopedLabel tagLabel=new ScopedLabel(tenantOwner.toString(),tagName);        tagSet.add(tagLabel);        _dbClient.updateAndReindexObject(vol);        if (isV1Call != null) {          _log.debug("Inside V1 call");          return CinderApiUtils.getCinderResponse(getVolumeDetail(vol,isV1Call,openstackTenantId),header,true,CinderConstants.STATUS_OK);        } else {          return CinderApiUtils.getCinderResponse(getVolumeDetail(vol,isV1Call,openstackTenantId),header,true,CinderConstants.STATUS_ACCEPT);        }      } else {        throw APIException.badRequests.parameterIsNullOrEmpty("Volume");      }    }  }  return CinderApiUtils.getCinderResponse(new VolumeDetail(),header,true,CinderConstants.STATUS_ACCEPT);}  }
class C{  public RegressionInterpolatorAction(DataEditor editor){  super("Replace Missing Values with Regression Predictions");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public void commit(OutputNode parent) throws Exception {  if (stack.contains(parent)) {    OutputNode top=stack.top();    if (!isCommitted(top)) {      writeStart(top);    }    while (stack.top() != parent) {      writeEnd(stack.pop());    }    writeEnd(parent);    stack.pop();  }}  }
class C{  private void ensureSorted(){  if (needsSorting) {    Collections.sort(children,FigureLayerComparator.INSTANCE);    needsSorting=false;  }}  }
class C{  public int untether(String iface){  try {    return mService.untether(iface);  } catch (  RemoteException e) {    return TETHER_ERROR_SERVICE_UNAVAIL;  }}  }
class C{  public Builder withName(String name){  this.name=Assert.notNull(name,"name");  return this;}  }
