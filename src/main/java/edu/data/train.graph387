class C{  @Override public void eUnset(int featureID){switch (featureID) {case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__NAME:    setName(NAME_EDEFAULT);  return;case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__TYPE:setType((FunctionblockModel)null);return;}super.eUnset(featureID);}  }
class C{  private static void add(BooleanQuery.Builder q,String name,String value,float boost){  Query tq=new TermQuery(new Term(name,value));  q.add(new BooleanClause(new BoostQuery(tq,boost),BooleanClause.Occur.SHOULD));}  }
class C{  @SuppressWarnings("unchecked") protected void ensureCapacity(final int newCapacity){  final int oldCapacity=data.length;  if (newCapacity <= oldCapacity) {    return;  }  if (size == 0) {    threshold=calculateThreshold(newCapacity,loadFactor);    data=new HashEntry[newCapacity];  } else {    final HashEntry<K,V> oldEntries[]=data;    final HashEntry<K,V> newEntries[]=new HashEntry[newCapacity];    modCount++;    for (int i=oldCapacity - 1; i >= 0; i--) {      HashEntry<K,V> entry=oldEntries[i];      if (entry != null) {        oldEntries[i]=null;        do {          final HashEntry<K,V> next=entry.next;          final int index=hashIndex(entry.hashCode,newCapacity);          entry.next=newEntries[index];          newEntries[index]=entry;          entry=next;        } while (entry != null);      }    }    threshold=calculateThreshold(newCapacity,loadFactor);    data=newEntries;  }}  }
class C{  private static boolean isParameterToEncode(String key){  return PARAMETERS_TO_ENCODE.contains(key.toUpperCase());}  }
class C{  public void dropSchema(Session session){  String schemaName=session.getSchema();  checkArgument(schemaName != null,"Schema cannot be null");  ConnectorMetadataEntry entry=validateCatalogName(session.getCatalog());  ConnectorMetadata metadata=entry.getMetadata();  if (!(metadata instanceof ConnectorDetailMetadata)) {    throw new PrestoException(NOT_SUPPORTED,"Drop schema not supported for connector " + entry.getConnectorId());  }  ConnectorDetailMetadata detailMetadata=(ConnectorDetailMetadata)metadata;  detailMetadata.dropSchema(session.toConnectorSession(),schemaName);}  }
class C{  public void clearReferences(){  this.signatures=Collections.emptySet();}  }
class C{  public static String decode(AbstractMessage msg,Boolean ext,int header){  if (ext == false) {    return decode(msg);  }  return "Bootloader Message Type: " + header;}  }
class C{  public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  OutputStream os=_os;  if (os != null) {    os.write(buf,offset,length);  }}  }
class C{  public void addNetMapListener(NetMapListener nml){  listenerSupport.addNetMapListener(nml);}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  public static double longToDouble(long value){  return (double)value * DEGREE_TOLERANCE;}  }
class C{  @Override public void ldrs(int targetSize,int srcSize,Register rt,AArch64Address address){  assert targetSize == 32 || targetSize == 64;  assert srcSize <= targetSize;  if (targetSize == srcSize) {    super.ldr(srcSize,rt,address);  } else {    super.ldrs(targetSize,srcSize,rt,address);  }}  }
class C{  public final LC alignX(String align){  setAlignX(ConstraintParser.parseUnitValueOrAlign(align,true,null));  return this;}  }
class C{  private void showAtCalculatedPosition(){  if (mAnchorBelow) {    showAtLocation(mAnchorView.getRootView(),Gravity.TOP | Gravity.START,mXPosition,mYPosition);  } else {    showAtLocation(mAnchorView.getRootView(),Gravity.BOTTOM | Gravity.START,mXPosition,mYPosition);  }}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public static void ValidateConditions(Conditions conditions,int clockTolerance) throws ValidationException {  try {    log.info("Validate assertion condition with clock tolerance = " + clockTolerance);    Validate.isTrue(clockTolerance >= 0,"Negative clock tolerance setting");    Calendar currentDate=Calendar.getInstance();    TimeZone gmtTimeZone=TimeZone.getTimeZone("GMT");    currentDate.setTimeZone(gmtTimeZone);    if (conditions.getNotBefore() != null) {      DateTime notBefore=conditions.getNotBefore().minusSeconds(clockTolerance);      Validate.isTrue(currentDate.getTime().after(notBefore.toDate()),"Validating notBefore fails! Tolerance-adjusted notBefore date is:" + notBefore.toString());    }    if (conditions.getNotOnOrAfter() != null) {      DateTime notOnOrAfter=conditions.getNotOnOrAfter().plusSeconds(clockTolerance);      Validate.isTrue(currentDate.getTime().before(notOnOrAfter.toDate()),"Validating notAfter fails! Tolerance-adjusted notAfter date is:" + notOnOrAfter.toString());    }  } catch (  IllegalArgumentException e) {    log.error(Error.CONDITION,e);    throw new ValidationException(e);  }}  }
class C{  public void test_getG(){  DSAParams params=new DSAParameterSpec(p,q,g);  assertEquals("Invalid G",g,params.getG());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported02.class,args);}  }
class C{  static final public String hex(int what){  return hex(what,8);}  }
class C{  public VPFLayer(String name){  this();  setName(name);}  }
class C{  ByValueSortingTreeMap(ByValueComparator<K,V> comparator){  super(comparator);  this.comparator=comparator;}  }
class C{  public static int findIndexOf(Object self,Closure closure){  return findIndexOf(self,0,closure);}  }
class C{  @Override protected byte[] downloadFile(){  this.setRunning(true);  byte[] result=null;  InputStream is=null;  String url=this.getURL();  PLFileDownloaderListener listener=this.getListener();  boolean hasListener=(listener != null);  long startTime=System.currentTimeMillis();  try {    if (this.isRunning()) {      if (hasListener)       listener.didBeginDownload(url,startTime);      if (url.startsWith("res://")) {        int sepPos=url.lastIndexOf("/");        int resourceId=mContext.getResources().getIdentifier(url.substring(sepPos + 1),url.substring(6,sepPos),mContext.getPackageName());        is=mContext.getResources().openRawResource(resourceId);      } else       if (url.startsWith("file://")) {        File file=new File(url.substring(7));        if (file.canRead())         is=new FileInputStream(file);      }    } else     throw new PLRequestInvalidatedException(url);    if (this.isRunning()) {      result=new byte[is.available()];      is.read(result);      if (hasListener) {        listener.didProgressDownload(url,100);        listener.didEndDownload(url,result,System.currentTimeMillis() - startTime);      }    } else     throw new PLRequestInvalidatedException(url);  } catch (  Throwable e) {    if (this.isRunning()) {      PLLog.error("PLLocalFileDownloader::downloadFile",e);      if (hasListener)       listener.didErrorDownload(url,e.toString(),-1,result);    }  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {        PLLog.error("PLLocalFileDownloader::downloadFile",e);      }    }  }  this.setRunning(false);  return result;}  }
class C{  public ReplDBMSEvent createEvent(long seqno,short fragNo,boolean lastFrag,String shardId,Timestamp timestamp,long epochNumber){  ArrayList<DBMSData> t=new ArrayList<DBMSData>();  t.add(new StatementData("SELECT 1"));  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,t,true,timestamp);  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,fragNo,lastFrag,"NONE",epochNumber,timestamp,dbmsEvent);  if (shardId != null) {    replDbmsEvent.getDBMSEvent().addMetadataOption(ReplOptionParams.SHARD_ID,shardId);  }  return replDbmsEvent;}  }
class C{  public boolean isInitialRangeSet(int scale){  return initialRange.get(scale) != null;}  }
class C{  private PubsubFuture<List<String>> publish0(final List<Message> messages,final String canonicalTopic){  final String path=canonicalTopic + ":publish";  for (  final Message message : messages) {    if (!isEncoded(message)) {      throw new IllegalArgumentException("Message data must be Base64 encoded: " + message);    }  }  return post("publish",path,PublishRequest.of(messages),PublishResponse.class).thenApply(null);}  }
class C{  public void paintTextAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void testDisableNOT(){  Query expected=new TermQuery(new Term("field","-foo"));  assertEquals(expected,parseKeyword("-foo",~NOT_OPERATOR));}  }
class C{  @Override protected void loadPaths(ArrayList<PathImpl> paths){  loadPaths(paths,_dir);}  }
class C{  protected OMGraphicList createEquiDistanceLines(UTMPoint utm,int gridLineInterval){  OMGraphicList list=new OMGraphicList();  UTMPoint utm1=new UTMPoint(utm);  UTMPoint utm2=new UTMPoint(utm);  LatLonPoint point1=new LatLonPoint.Double();  LatLonPoint point2=new LatLonPoint.Double();  UTMPoint utmp=new UTMPoint(utm);  LatLonPoint llp=new LatLonPoint.Double();  int i;  OMLine line;  BasicGeometry poly;  double lat2;  int endNorthing=(int)Math.floor(utm.northing / INTERVAL_100K) + 10;  int startNorthing=(int)Math.floor(utm.northing / INTERVAL_100K) - 10;  int numVertLines=9;  int numHorLines=endNorthing - startNorthing;  double[][] vertPoints=new double[numVertLines][numHorLines * 2];  if (UTM_DEBUG_VERBOSE) {    Debug.output("Array is [" + vertPoints.length + "]["+ vertPoints[0].length+ "]");  }  int coordCount=0;  boolean doPolys=true;  utm1.easting=INTERVAL_100K;  utm2.easting=9 * INTERVAL_100K;  for (i=startNorthing; i < endNorthing; i++) {    utm1.northing=(float)i * gridLineInterval;    utm2.northing=utm1.northing;    utmp.northing=utm1.northing;    if (doPolys) {      for (int j=0; j < numVertLines; j++) {        utmp.easting=(float)(j + 1) * gridLineInterval;        llp=utmp.toLatLonPoint(Ellipsoid.WGS_84,llp);        vertPoints[j][coordCount]=llp.getY();        vertPoints[j][coordCount + 1]=llp.getX();        if (UTM_DEBUG_VERBOSE) {          Debug.output("for vline " + j + ", point "+ i+ ", easting: "+ utmp.easting+ ", northing: "+ utmp.northing+ ", lat:"+ vertPoints[j][coordCount]+ ", lon:"+ vertPoints[j][coordCount + 1]);        }      }      coordCount+=2;    }    point1=utm1.toLatLonPoint(Ellipsoid.WGS_84,point1);    point2=utm2.toLatLonPoint(Ellipsoid.WGS_84,point2);    lat2=point1.getLatitude();    if (lat2 < 84f) {      line=new OMLine(point1.getY(),point1.getX(),point2.getY(),point2.getX(),OMGraphic.LINETYPE_GREATCIRCLE);      line.setLinePaint(distanceGridPaint);      list.add(line);    }  }  if (doPolys) {    OMGeometryList polys=new OMGeometryList();    for (i=0; i < vertPoints.length; i++) {      if (UTM_DEBUG_VERBOSE) {        for (int k=0; k < vertPoints[i].length; k+=2) {          System.out.println(" for poly " + i + ": lat = "+ vertPoints[i][k]+ ", lon = "+ vertPoints[i][k + 1]);        }      }      poly=new PolylineGeometry.LL(vertPoints[i],OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_GREATCIRCLE);      polys.add(poly);    }    polys.setLinePaint(distanceGridPaint);    list.add(polys);  } else {    if (UTM_DEBUG) {      Debug.output("Doing vertical lines");    }    utm1.northing=startNorthing;    utm2.northing=endNorthing;    for (i=1; i <= 9; i++) {      utm1.easting=i * 100000f;      utm2.easting=i * 100000f;      point1=utm1.toLatLonPoint(Ellipsoid.WGS_84,point1);      point2=utm2.toLatLonPoint(Ellipsoid.WGS_84,point2);      line=new OMLine(point1.getY(),point1.getX(),point2.getY(),point2.getX(),OMGraphic.LINETYPE_GREATCIRCLE);      line.setLinePaint(distanceGridPaint);      list.add(line);    }  }  return list;}  }
class C{  private GridUriDeploymentClassLoaderFactory(){}  }
class C{  public synchronized void print(String s,int[] _logs) throws OutputException {  print(s,V_VERBOSE,_logs);}  }
class C{  public Token nextWord(){  if (!hasNextWord())   throw new IllegalStateException("No more words found!");  int indexOfSpace=Math.min(remaining.indexOf(' '),remaining.indexOf('\n'));  if (indexOfSpace == -1) {    indexOfSpace=content.length() - currentPosition;  }  Token token=new Token(this,currentPosition,currentPosition + indexOfSpace);  stepForward(indexOfSpace + 1);  return token;}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.194 -0400",hash_original_method="309FAA7BF49A8E8756D5FB6B1649F47B",hash_generated_method="FF1ED8300D344F67934E36DA8C06943F") public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  FileOutputStream out=null;  try {    out=openOutputStream(file,append);    final BufferedOutputStream buffer=new BufferedOutputStream(out);    IOUtils.writeLines(lines,lineEnding,buffer,encoding);    buffer.flush();    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public static CollectionProcessingEngine createCpe() throws BaleenException {  return build("job_two_tasks.yaml");}  }
class C{  public boolean isThumbnailCompressed(){  return mData.hasCompressedThumbnail();}  }
class C{  public boolean isOlder(String o){  return (compareTo(o) == -1);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE:    setDelegationBaseType((SymbolTableEntryOriginal)null);  return;case ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS:setDelegationSuperClassSteps(DELEGATION_SUPER_CLASS_STEPS_EDEFAULT);return;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET:setDelegationTarget((SymbolTableEntryOriginal)null);return;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT:setDelegationTargetIsAbstract(DELEGATION_TARGET_IS_ABSTRACT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public TestStartedEvent(final String sessionId,final String testId,final long timeout,final Map<String,String> properties){  super(sessionId);  this.testId=testId;  this.timeout=timeout;  this.properties=null == properties ? emptyMap() : copyOf(properties);}  }
class C{  public void showDialog(){  view.showDialog();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject expr1=m_left.execute(xctxt);  if (!expr1.bool()) {    XObject expr2=m_right.execute(xctxt);    return expr2.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;  } else   return XBoolean.S_TRUE;}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  PositionableShape ps=new PositionableShape(ed);  ed.putItem(ps);  loadCommonAttributes(ps,Editor.MARKERS,element);}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static GenericsType[] applyGenericsContextToPlaceHolders(Map<String,ClassNode> genericsSpec,GenericsType[] oldPlaceHolders){  if (oldPlaceHolders == null || oldPlaceHolders.length == 0)   return oldPlaceHolders;  if (genericsSpec.isEmpty())   return oldPlaceHolders;  GenericsType[] newTypes=new GenericsType[oldPlaceHolders.length];  for (int i=0; i < oldPlaceHolders.length; i++) {    GenericsType old=oldPlaceHolders[i];    if (!old.isPlaceholder())     throw new GroovyBugError("Given generics type " + old + " must be a placeholder!");    ClassNode fromSpec=genericsSpec.get(old.getName());    if (fromSpec != null) {      if (fromSpec.isGenericsPlaceHolder()) {        ClassNode[] upper=new ClassNode[]{fromSpec.redirect()};        newTypes[i]=new GenericsType(fromSpec,upper,null);      } else {        newTypes[i]=new GenericsType(fromSpec);      }    } else {      ClassNode[] upper=old.getUpperBounds();      ClassNode[] newUpper=upper;      if (upper != null && upper.length > 0) {        ClassNode[] upperCorrected=new ClassNode[upper.length];        for (int j=0; j < upper.length; j++) {          upperCorrected[i]=correctToGenericsSpecRecurse(genericsSpec,upper[j]);        }        upper=upperCorrected;      }      ClassNode lower=old.getLowerBound();      ClassNode newLower=correctToGenericsSpecRecurse(genericsSpec,lower);      if (lower == newLower && upper == newUpper) {        newTypes[i]=oldPlaceHolders[i];      } else {        ClassNode newPlaceHolder=ClassHelper.make(old.getName());        GenericsType gt=new GenericsType(newPlaceHolder,newUpper,newLower);        gt.setPlaceholder(true);        newTypes[i]=gt;      }    }  }  return newTypes;}  }
class C{  private boolean equalsIgnoreCase(String s,String upper){  assert upper.toUpperCase(java.util.Locale.ENGLISH).equals(upper);  int len;  if ((len=s.length()) != upper.length())   return false;  for (int i=0; i < len; i++) {    char c1=s.charAt(i);    char c2=upper.charAt(i);    if (c1 != c2 && toUpperCaseASCII(c1) != c2)     return false;  }  return true;}  }
class C{  public BBR(double regularization,int maxIterations){  this(regularization,maxIterations,Prior.LAPLACE);}  }
class C{  public Vector3f add(Vector3f vec,Vector3f result){  result.x=x + vec.x;  result.y=y + vec.y;  result.z=z + vec.z;  return result;}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < this.getSeriesCount(); i++) {    VolumeSeries series=this.getSeries(i);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  @Since(CommonParams.VERSION_1) @PUT @Path(CommonParams.PATH_ID) @Consumes(MediaType.APPLICATION_JSON) @Override public Response putItem(@Context Request request,DefinitionRepresentation content,@InjectParam TriggerParameters params) throws WebApplicationException {  return put(request,triggerBackend.putItem(),content,params);}  }
class C{  private static <T>SortedSet<T> cast(Iterable<T> iterable){  return (SortedSet<T>)iterable;}  }
class C{  public TextAppearanceSpan(String family,int style,int size,ColorStateList color,ColorStateList linkColor){  mTypeface=family;  mStyle=style;  mTextSize=size;  mTextColor=color;  mTextColorLink=linkColor;}  }
class C{  @Deprecated public void clearDiscCache(){  clearDiskCache();}  }
class C{  @Override public Long deserializeKey(ITuple tuple){  final byte[] key=tuple.getKeyBuffer().array();  final long id=KeyBuilder.decodeLong(key,0);  return id;}  }
class C{  public T caseStateMachineDefinition_(StateMachineDefinition_ object){  return null;}  }
class C{  final int position(){  return buf.buffer().position();}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  @SuppressWarnings("unused") @Test public void testParentExitDeep(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        _createExitAssignment(v1,s1,1);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            _createExitAssignment(v1,s3,2);            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              _createExitAssignment(v1,s4,3);              State s5=_createState("s5",r_s3);            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }  }  _createTransition(findState(sc,"s4"),findState(sc,"s6"));  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  assertNotNull(_s1.getExitAction());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  assertNotNull(_s3.getExitAction());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  assertNotNull(_s4.getExitAction());  ExecutionState _s6=flow.getStates().get(5);  assertEquals("sc.r.s2.r.s6",_s6.getName());  Reaction _t=_s4.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals(2,_effect.getSteps().size());  assertCall(_effect,0,_s1.getExitSequence());  assertCall(_effect,1,_s6.getEnterSequences().get(0));  assertCall(_s1.getExitSequence(),0,_s1.getSubScopes().get(0).getExitSequence());  StateSwitch _switch=(StateSwitch)_s1.getSubScopes().get(0).getExitSequence().getSteps().get(0);  StateCase _s4_case=assertedStateCase(_switch,_s4);  assertCall(assertedSequence(_s4_case.getStep()),0,_s4.getExitSequence());  assertCall(assertedSequence(_s4_case.getStep()),1,_s3.getExitAction());  assertCall(_s1.getExitSequence(),1,_s1.getExitAction());}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  Instances filteredData=new Instances(data);  filteredData.deleteWithMissingClass();  m_replaceMissing=new ReplaceMissingValues();  m_replaceMissing.setInputFormat(filteredData);  filteredData=Filter.useFilter(filteredData,m_replaceMissing);  m_nominalToBinary=new NominalToBinary();  m_nominalToBinary.setInputFormat(filteredData);  if (m_convertNominal) {    filteredData=Filter.useFilter(filteredData,m_nominalToBinary);  }  int minNumInstances=2;  ModelSelection modSelection;  if (m_splitOnResiduals) {    modSelection=new ResidualModelSelection(minNumInstances);  } else {    modSelection=new C45ModelSelection(minNumInstances,filteredData,true,m_doNotMakeSplitPointActualValue);  }  m_tree=new LMTNode(modSelection,m_numBoostingIterations,m_fastRegression,m_errorOnProbabilities,m_minNumInstances,m_weightTrimBeta,m_useAIC,m_nominalToBinary);  m_tree.buildClassifier(filteredData);  if (modSelection instanceof C45ModelSelection) {    ((C45ModelSelection)modSelection).cleanup();  }}  }
class C{  @SuppressWarnings("unused") @Subscribe public void onEvent(UpdateInstallationErrorEvent event){  Log.d("CHCP","Failed to install");  PluginResult jsResult=PluginResultHelper.pluginResultFromEvent(event);  if (installJsCallback != null) {    installJsCallback.sendPluginResult(jsResult);    installJsCallback=null;  }  sendMessageToDefaultCallback(jsResult);  rollbackIfCorrupted(event.error());}  }
class C{  static void unexpectedInterfaceMethodCall(){  VM.sysFail("interface method dispatching error");}  }
class C{  private static void populateLocations(Element controlNode){  List<Location> locations=Context.getLocationService().getAllLocations(false);  for (  Location loc : locations) {    Element itemNode=controlNode.createElement(NAMESPACE_XFORMS,null);    itemNode.setName(NODE_ITEM);    Element node=itemNode.createElement(NAMESPACE_XFORMS,null);    node.setName(NODE_LABEL);    node.addChild(Element.TEXT,getLocationName(loc));    itemNode.addChild(Element.ELEMENT,node);    node=itemNode.createElement(NAMESPACE_XFORMS,null);    node.setName(NODE_VALUE);    node.addChild(Element.TEXT,loc.getLocationId().toString());    itemNode.addChild(Element.ELEMENT,node);    controlNode.addChild(Element.ELEMENT,itemNode);  }}  }
class C{  public synchronized boolean hasOrInheritsInverseRelationship(Vertex type,Vertex target,Map<Vertex,Vertex> recursion){  Relationship relationship=getRelationship(type,target);  if (relationship == null) {    if (target.isVariable()) {      Collection<Relationship> relationships=getRelationships(type);      if (relationships != null) {        if (recursion == null) {          recursion=new HashMap<Vertex,Vertex>();        }        for (        Relationship each : relationships) {          if (target.matches(each.getTarget(),recursion) == Boolean.TRUE) {            return each.isInverse();          }        }      }    }    Collection<Relationship> classifications=null;    if (instanceOf(Primitive.CLASSIFICATION)) {      classifications=getRelationships(Primitive.SPECIALIZATION);    } else {      classifications=getRelationships(Primitive.INSTANTIATION);    }    if (classifications != null) {      if (type.isPrimitive() && type.getData().equals(Primitive.INSTANTIATION)) {        type=this.network.createVertex(Primitive.SPECIALIZATION);      }      for (      Relationship classification : classifications) {        if (recursion == null) {          recursion=new HashMap<Vertex,Vertex>();        }        recursion.put(this,this);        if (!recursion.containsKey(classification.getTarget()) && classification.getTarget().hasOrInheritsInverseRelationship(type,target,recursion)) {          return true;        }      }    }  }  return (relationship != null) && (relationship.isInverse());}  }
class C{  public static List<Integer> executeIntListQuery(String sql,Connection con) throws AdeException {  final IntListQueryExecuter executer=new IntListQueryExecuter(sql,con);  executer.executeQuery();  return executer.m_result;}  }
class C{  public static ObjectReference fromObject(Object obj){  return null;}  }
class C{  public void removeAllElements(){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.removeAllElements();}  }
class C{  public int maxAlignmentCount(){  return mMaxAlignmentCount;}  }
class C{  public static byte[] toByteArray(InputStream inputStream,final int size) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  long length=size == -1 ? Long.MAX_VALUE : size;  pipe(inputStream,out,length);  return out.toByteArray();}  }
class C{  private Geometry createEmptyResultGeometry(){  Geometry emptyGeom=geomFact.createPolygon(null,null);  return emptyGeom;}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  @Override public void onUpdateScrollbar(int dy){  if (mWidgets == null) {    return;  }  int rowCount=mWidgets.getPackageSize();  if (rowCount == 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  getCurScrollState(mScrollPosState,-1);  if (mScrollPosState.rowIndex < 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  synchronizeScrollBarThumbOffsetToViewScroll(mScrollPosState,rowCount);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:28.444 -0500",hash_original_method="011BFEF6AF7823592586BFF14A1F0FAF",hash_generated_method="FE5BCB66CD01CF31C39790EAE8AB2B56") @Override public void roll(int field,boolean increment){  roll(field,increment ? 1 : -1);}  }
class C{  private void writeExperiecedAndCausingPersonDelay(){  SortedMap<Double,Map<Id<Person>,Double>> timeBin2AffectedPerson2Delay=getExperiencedPersonDelay(1);  SortedMap<Double,Map<Id<Person>,Double>> timeBin2CausingPerson2Delay=getCausingPersonDelay(1);  if (timeBin2AffectedPerson2Delay.size() != 1)   throw new RuntimeException("Delay is not summed up for all time bins.");  Map<Id<Person>,Double> affectedperson2Delay=timeBin2AffectedPerson2Delay.get(simulationEndTime);  Map<Id<Person>,Double> causedPerson2Delay=timeBin2CausingPerson2Delay.get(simulationEndTime);  BufferedWriter writer=IOUtils.getBufferedWriter(runDir + "/analysis/affectedAndCausedDelay_" + pricingScenario+ suffixForSoring+ ".txt");  try {    writer.write("personId \t userGroup \t affectedDelayInHr \t causedDelayInHr \n");    for (    Id<Person> id : causedPerson2Delay.keySet()) {      writer.write(id + "\t" + pf.getMunichUserGroupFromPersonId(id)+ "\t"+ affectedperson2Delay.get(id) / 3600 + "\t" + causedPerson2Delay.get(id) / 3600 + "\n");    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in file. Reason: " + e);  }}  }
class C{  public PasteBuilder to(Vector to){  this.to=to;  return this;}  }
class C{  public static List<String> parseParameters(String tagValue){  StreamTokenizer tokenizer=makeTokenizer(tagValue);  List<String> wordList=new LinkedList<String>();  try {    while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {      StringBuilder param=new StringBuilder();      if (tokenizer.sval != null) {        param.append(tokenizer.sval);      }      while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {        if (tokenizer.sval == null && ('=' == (char)tokenizer.ttype || ',' == (char)tokenizer.ttype)) {          param.append(Character.toString((char)tokenizer.ttype));          tokenizer.nextToken();          param.append(tokenizer.sval);        } else {          tokenizer.pushBack();          break;        }      }      wordList.add(param.toString());    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("error tokenizing tag");  }  return wordList;}  }
class C{  public synchronized void addToState(MultivariateDistribution distrib){  for (  String var : distrib.getVariables()) {    addToState(distrib.getMarginal(var));  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:10.147 -0500",hash_original_method="58A8BC724A3363C0278FA14872218B7C",hash_generated_method="8A33CF1A8E6E7B639331FA26DE5634D1") public void close() throws IOException {  if (doEncode) {    base64.encode(singleByte,0,-1);  } else {    base64.decode(singleByte,0,-1);  }  flush();  out.close();}  }
class C{  private CNodeExpander(){}  }
class C{  private static Element addProperty(Document doc,Node parent,String name,String val){  String valAttr=val != null ? "value" : null;  return addElement(doc,parent,"property","name",name,valAttr,val);}  }
class C{  public TopologyArchiveImpl(ArchiveBase<?> archive){  super(archive);  Node regConf=as(JARArchive.class).get(REGISTRATION_CONF);  if (regConf != null && regConf.getAsset() != null) {    try (BufferedReader reader=new BufferedReader(new InputStreamReader(regConf.getAsset().openStream()))){      reader.lines().forEach(null);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public ShoppingCartHelper(Delegator delegator,LocalDispatcher dispatcher,ShoppingCart cart){  this.dispatcher=dispatcher;  this.delegator=delegator;  this.cart=cart;  if (delegator == null) {    this.delegator=dispatcher.getDelegator();  }  if (dispatcher == null) {    throw new IllegalArgumentException("Dispatcher argument is null");  }  if (cart == null) {    throw new IllegalArgumentException("ShoppingCart argument is null");  }}  }
class C{  public boolean pageScroll(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  if (down) {    mTempRect.top=getScrollY() + height;    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      if (mTempRect.top + height > view.getBottom()) {        mTempRect.top=view.getBottom() - height;      }    }  } else {    mTempRect.top=getScrollY() - height;    if (mTempRect.top < 0) {      mTempRect.top=0;    }  }  mTempRect.bottom=mTempRect.top + height;  return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  void closeSocket(){  try {    mSocket.close();  } catch (  IOException ex) {    Log.e(TAG,"Exception while closing command " + "socket in parent",ex);  }}  }
class C{  public static PolynomialFunction serializableInstance(){  return new PolynomialFunction(BasicLagGraph.serializableInstance());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tPercentage of weight mass to base training on.\n" + "\t(default 100, reduce to around 90 speed up)","P",1,"-P <num>"));  newVector.addElement(new Option("\tUse resampling for boosting.","Q",0,"-Q"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public ColorRange addHueRange(FloatRange hue){  hueConstraint.add(hue);  return this;}  }
class C{  public synchronized void addAllSeries(List<XYSeries> series){  mSeries.addAll(series);}  }
class C{  public static Test suite(){  return (new TestSuite(DataTableITCase.class));}  }
class C{  private void handleChangeListener(RecognitionListener listener){  if (DBG)   Log.d(TAG,"handleChangeListener, listener=" + listener);  mListener.mInternalListener=listener;}  }
class C{  public Matrix4d rotateZYX(Vector3d angles){  return rotateZYX(angles.z,angles.y,angles.x);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public String toString(Tag tag){  if (tag.text() == null || tag.text().isEmpty())   return "";  File f=tag.position().file();  String curClass=f == null ? "" : f.getAbsolutePath().replace(File.separator,".");  String packPref="src.main.java.";  int idx=curClass.indexOf(packPref);  StringBuilder path=new StringBuilder();  if (idx != -1) {    curClass=curClass.substring(idx + packPref.length());    for (int i=0, n=curClass.split("\\.").length - 2; i < n; i++)     path.append("../");  }  String[] tokens=tag.text().split("#");  int lastIdx=tokens[0].lastIndexOf('.');  String simpleClsName=lastIdx != -1 && lastIdx + 1 < tokens[0].length() ? tokens[0].substring(lastIdx + 1) : tokens[0];  String fullyQClsName=tokens[0].replace(".","/");  return "<a href=\"" + path.toString() + fullyQClsName+ ".html"+ (tokens.length > 1 ? ("#" + tokens[1].replace("[]","...")) : "")+ "\"><code>"+ simpleClsName+ (tokens.length > 1 ? ("." + tokens[1]) : "")+ "</code></a>";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static byte[] fromHex(String hex){  byte[] binary=new byte[hex.length() / 2];  for (int i=0; i < binary.length; i++) {    binary[i]=(byte)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);  }  return binary;}  }
class C{  public synchronized boolean addEdge(Edge edge){  if (edge == null)   throw new NullPointerException();  if (isAdjacentTo(edge.getNode1(),edge.getNode2())) {    throw new IllegalArgumentException("Already adjacent.");  }  List<Edge> edgeList1=edgeLists.get(edge.getNode1());  List<Edge> edgeList2=edgeLists.get(edge.getNode2());  if (edgeList1 == null || edgeList2 == null) {    throw new NullPointerException("Can't add an edge unless both " + "nodes are in the graph: " + edge);  }  edgeList1=new ArrayList<>(edgeList1);  edgeList2=new ArrayList<>(edgeList2);  edgeList1.add(edge);  edgeList2.add(edge);  edgeLists.put(edge.getNode1(),edgeList1);  edgeLists.put(edge.getNode2(),edgeList2);  edgesSet.add(edge);  return true;}  }
class C{  public boolean replace(HGHandle handle,Object atom){  if (handle.equals(getHandle(atom)))   return replace(handle,atom,getType(handle));  HGHandle atomType;  if (atom instanceof HGValueLink) {    Class<?> c=((HGValueLink)atom).getValue().getClass();    atomType=typeSystem.getTypeHandle(c);    if (atomType == null)     throw new HGException("Unable to create HyperGraph type for class " + c.getName());  } else {    atomType=typeSystem.getTypeHandle(atom);    if (atomType == null)     atomType=typeSystem.getTypeHandle(atom.getClass());    if (atomType == null)     throw new HGException("Unable to create HyperGraph type for class " + atom.getClass().getName());  }  return replace(handle,atom,atomType);}  }
class C{  public DefaultLangCondition(String lang){  this.lang=lang;}  }
class C{  public void drawElement(Graphics sc,ICircle ic){  double y=ic.getY();  sc.drawOval((int)(ic.getX() - ic.getRadius()),(int)(y - ic.getRadius()),(int)(ic.getRadius() * 2),(int)(ic.getRadius() * 2));}  }
class C{  public void clearHistory(){  history.clear();  historyNegativeIndex=0;  historySize=0;}  }
class C{  public void endPrimaryAckSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(primaryAckSendInProgressId,-1);  int endPrimaryAckSendId;  if (failed) {    endPrimaryAckSendId=primaryAckSendFailedId;  } else {    endPrimaryAckSendId=primaryAckSendId;  }  this.sendStats.incInt(endPrimaryAckSendId,1);  this.stats.incLong(primaryAckSendDurationId,duration);}  }
class C{  public void listenerPaint(Object source,Graphics g){  if (currentEditable != null) {    currentEditable.repaintRender(g.create());  }}  }
class C{  public void flip(int index){  assert index >= 0 && index < numBits : "index=" + index + " numBits="+ numBits;  int wordNum=index >> 6;  long bitmask=1L << index;  bits[wordNum]^=bitmask;}  }
class C{  public void environmentStart(EnvironmentClassLoader loader){  Method start=getStartMethod(_resource.getClass());  if (start == null)   return;  try {    start.invoke(_resource);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  private void refreshLineMap(){  if (!valid() || batchSetting) {    return;  }  int index=refreshLineMapStartIndex();  Point cachedSize=sizeMap.get(index,null);  int lineIndex=lineMap.size();  int lineItemCount=0;  Line currentLine=containingLine(index);  if (currentLine == null) {    currentLine=new Line();  } else {    lineIndex=itemLineIndex(index);  }  int lineWidth=currentLine.totalWidth;  while (cachedSize != null) {    lineWidth+=cachedSize.x;    lineItemCount++;    if (lineWidth <= contentAreaWidth) {      if (itemPerLine > 0) {        if (lineItemCount > itemPerLine) {          lineMap.put(lineIndex,currentLine);          currentLine=new Line();          addToLine(currentLine,cachedSize,index);          lineIndex++;          lineWidth=cachedSize.x;          lineItemCount=1;        } else {          addToLine(currentLine,cachedSize,index);        }      } else {        addToLine(currentLine,cachedSize,index);      }    } else {      lineMap.put(lineIndex,currentLine);      currentLine=new Line();      addToLine(currentLine,cachedSize,index);      lineIndex++;      lineWidth=cachedSize.x;      lineItemCount=1;    }    index++;    cachedSize=sizeMap.get(index,null);  }  if (currentLine.itemCount > 0) {    lineMap.append(lineIndex,currentLine);  }}  }
class C{  public static InetAddress decrement(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0x00) {    addr[i]=(byte)0xff;    i--;  }  Preconditions.checkArgument(i >= 0,"Decrementing %s would wrap.",address);  addr[i]--;  return bytesToInetAddress(addr);}  }
class C{  private static final String toUrlEncoded(String str){  return str.replaceAll("=","%3D");}  }
class C{  public ZookeeperStateMachineEnsemble(CuratorFramework curatorClient,String basePath,boolean cleanState,int logSize){  this.curatorClient=curatorClient;  this.cleanState=cleanState;  this.logSize=logSize;  this.baseDataPath=basePath + "/data";  this.statePath=baseDataPath + "/" + PATH_CURRENT;  this.logPath=baseDataPath + "/" + PATH_LOG;  this.memberPath=basePath + "/" + PATH_MEMBERS;  this.mutexPath=basePath + "/" + PATH_MUTEX;  this.persist=new ZookeeperStateMachinePersist<S,E>(curatorClient,statePath,logPath,logSize);  setAutoStartup(true);}  }
class C{  public static Task<Void> sendDataInBackground(JSONObject data,ParseQuery<ParseInstallation> query){  ParsePush push=new ParsePush();  push.setQuery(query);  push.setData(data);  return push.sendInBackground();}  }
class C{  public AlreadyBoundException(String s){  super(s);}  }
class C{  public InvalidCipherTextException(String message){  super(message);}  }
class C{  public void testClose() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  cis.close();  assertTrue("The close() method should call the close() method " + "of its underlying input stream.",tis.wasClosed());}  }
class C{  public static float convertPixelsToDp(float px,Context context){  DisplayMetrics metrics=context.getResources().getDisplayMetrics();  return px / (metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.abs(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void captureDrawableState(){  Drawable d=getDrawable();  if (d == null || d.getIntrinsicWidth() == 0 || d.getIntrinsicHeight() == 0) {    return;  }  mMatrixHelper.setSrcBitmapSize(d.getIntrinsicWidth(),d.getIntrinsicHeight());}  }
class C{  public void addTransaction(SIPTransaction transaction){  SIPRequest sipRequest=(SIPRequest)transaction.getOriginalRequest();  if (firstTransactionSeen && !firstTransactionId.equals(transaction.getBranchId()) && transaction.getMethod().equals(firstTransactionMethod)) {    this.reInviteFlag=true;  }  if (firstTransactionSeen == false) {    storeFirstTransactionInfo(this,transaction);    if (sipRequest.getMethod().equals(Request.SUBSCRIBE))     this.eventHeader=(EventHeader)sipRequest.getHeader(EventHeader.NAME);    this.setLocalParty(sipRequest);    this.setRemoteParty(sipRequest);    this.setCallId(sipRequest);    if (this.originalRequest == null) {      this.originalRequest=sipRequest;    }    if (this.method == null) {      this.method=sipRequest.getMethod();    }    if (transaction instanceof SIPServerTransaction) {      this.hisTag=sipRequest.getFrom().getTag();    } else {      setLocalSequenceNumber(sipRequest.getCSeq().getSeqNumber());      this.originalLocalSequenceNumber=localSequenceNumber;      this.myTag=sipRequest.getFrom().getTag();      if (myTag == null)       if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logError("The request's From header is missing the required Tag parameter.");    }  } else   if (transaction.getMethod().equals(firstTransactionMethod) && firstTransactionIsServerTransaction != transaction.isServerTransaction()) {    storeFirstTransactionInfo(this,transaction);    this.setLocalParty(sipRequest);    this.setRemoteParty(sipRequest);    this.setCallId(sipRequest);    this.originalRequest=sipRequest;    this.method=sipRequest.getMethod();  }  if (transaction instanceof SIPServerTransaction)   setRemoteSequenceNumber(sipRequest.getCSeq().getSeqNumber());  this.lastTransaction=transaction;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("Transaction Added " + this + myTag+ "/"+ hisTag);    sipStack.getStackLogger().logDebug("TID = " + transaction.getTransactionId() + "/"+ transaction.isServerTransaction());    sipStack.getStackLogger().logStackTrace();  }}  }
class C{  public DialogueImporter importDialogue(String dialogueFile){  List<DialogueState> turns=XMLDialogueReader.extractDialogue(dialogueFile);  DialogueImporter importer=new DialogueImporter(this,turns);  importer.start();  return importer;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public static void renderTemplate(String templateLocation,Map<String,Object> context,Appendable outWriter) throws TemplateException, IOException {  Template template=getTemplate(templateLocation);  renderTemplate(template,context,outWriter);}  }
class C{  public void loadNode(Element element,CatalogTreeNode parent,DefaultTreeModel model){  List<Element> nodeList=element.getChildren("node");  if (log.isDebugEnabled()) {    log.debug("Found " + nodeList.size() + " CatalogTreeNode objects");  }  for (int i=0; i < nodeList.size(); i++) {    Element elem=nodeList.get(i);    Attribute attr=elem.getAttribute("nodeName");    if (attr == null) {      log.warn("unexpected null nodeName. elem= " + elem + ", attrs= "+ elem.getAttributes());      continue;    }    String nodeName=attr.getValue();    CatalogTreeNode n=new CatalogTreeNode(nodeName);    addLeaves(elem,n);    model.insertNodeInto(n,parent,parent.getChildCount());    loadNode(elem,n,model);  }}  }
class C{  public void addToWidgetsPanel(Component comp){  addToWidgetsPanel(comp,-1);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void insert(int i,Key key){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (contains(i))   throw new IllegalArgumentException("Specified index is already in the queue");  Node<Key> x=new Node<Key>();  x.key=key;  x.index=i;  x.order=0;  nodes[i]=x;  IndexBinomialMinPQ<Key> H=new IndexBinomialMinPQ<Key>();  H.head=x;  head=union(H).head;}  }
class C{  public boolean hasFullMessage(){  return fullMessage;}  }
class C{  public LatLonPoint toLatLonPoint(Ellipsoid ellip,LatLonPoint llpoint){  return UTMtoLL(this,ellip,llpoint);}  }
class C{  private boolean checkPropertyFileNamePath(String path){  if ((path != null) && (!"".equals(path)))   return true;  return false;}  }
class C{  protected FocusListener createFocusListener(){  return getHandler();}  }
class C{  public static <A>SetTValue<A> fromStream(final AnyMValue<Stream<A>> monads){  return of(monads.map(null));}  }
class C{  public MagicVariablesArgumentsBundle(@NonNull Map<String,String> arguments,@NonNull Map<String,String> variables,String layerName,@NonNull DisplayMetrics metrics){  super(arguments,metrics);  mVariables=variables;  mLayerNamePrefix='@' + layerName.replace('-','_') + '_';}  }
class C{  private void paintControl(){  final Display display=getDisplay();  final Image newImage=new Image(display,this.imageData);  setBackgroundImage(newImage);  SWTGraphicUtil.safeDispose(this.oldImage);  this.oldImage=newImage;}  }
class C{  public boolean isValidInet4Address(String inet4Address){  String[] groups=ipv4Validator.match(inet4Address);  if (groups == null) {    return false;  }  for (  String ipSegment : groups) {    if (ipSegment == null || ipSegment.length() == 0) {      return false;    }    int iIpSegment=0;    try {      iIpSegment=Integer.parseInt(ipSegment);    } catch (    NumberFormatException e) {      return false;    }    if (iIpSegment > IPV4_MAX_OCTET_VALUE) {      return false;    }    if (ipSegment.length() > 1 && ipSegment.startsWith("0")) {      return false;    }  }  return true;}  }
class C{  private void scan(Detail detail) throws Exception {  DefaultType override=detail.getOverride();  DefaultType access=detail.getAccess();  Class base=detail.getSuper();  if (base != null) {    extend(base,override);  }  extract(detail,access);  extract(detail);  build();  validate();}  }
class C{  public void testRecoveredHandledDroppedOffer(){  AtomicInteger calls=new AtomicInteger();  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>(basicExecutor,4);  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  int n=0;  for (int i=1; i <= 8; ++i) {    int d=p.offer(i,null);    n=n + 2 + (d < 0 ? d : 0);  }  p.close();  s2.awaitComplete();  s1.awaitComplete();  assertEquals(n,s1.nexts + s2.nexts);  assertTrue(calls.get() >= 2);}  }
class C{  public static Set<String> string2set(final String string){  HashSet<String> set;  if (string != null) {    set=new HashSet<String>(Arrays.asList(CommonPattern.COMMA.split(string,0)));  } else {    set=new HashSet<String>();  }  return set;}  }
class C{  public String splitOnResidualsTipText(){  return "Set splitting criterion based on the residuals of LogitBoost. " + "There are two possible splitting criteria for LMT: the default is to use the C4.5 " + "splitting criterion that uses information gain on the class variable. The other splitting "+ "criterion tries to improve the purity in the residuals produces when fitting the logistic "+ "regression functions. The choice of the splitting criterion does not usually affect classification "+ "accuracy much, but can produce different trees.";}  }
class C{  public void removeProperty(String key){  carbonMessage.removeProperty(key);}  }
class C{  public void flush() throws java.io.IOException {  return;}  }
class C{  private static void createNetwork(Scenario scenario){  Network net=scenario.getNetwork();  NetworkFactory fac=net.getFactory();  net.addNode(fac.createNode(Id.createNodeId(1),new Coord(-2000,0)));  net.addNode(fac.createNode(Id.createNodeId(2),new Coord(-1000,0)));  net.addNode(fac.createNode(Id.createNodeId(3),new Coord(0,0)));  net.addNode(fac.createNode(Id.createNodeId(4),new Coord(1000,0)));  net.addNode(fac.createNode(Id.createNodeId(5),new Coord(2000,0)));  net.addNode(fac.createNode(Id.createNodeId(6),new Coord(0,2000)));  net.addNode(fac.createNode(Id.createNodeId(7),new Coord(0,1000)));  net.addNode(fac.createNode(Id.createNodeId(8),new Coord(0,-1000)));  net.addNode(fac.createNode(Id.createNodeId(9),new Coord(0,-2000)));  String[] links={"1_2","2_1","2_3","3_2","3_4","4_3","4_5","5_4","6_7","7_6","7_3","3_7","3_8","8_3","8_9","9_8"};  for (  String linkId : links) {    String fromNodeId=linkId.split("_")[0];    String toNodeId=linkId.split("_")[1];    Link link=fac.createLink(Id.createLinkId(linkId),net.getNodes().get(Id.createNodeId(fromNodeId)),net.getNodes().get(Id.createNodeId(toNodeId)));    link.setCapacity(7200);    link.setLength(1000);    link.setFreespeed(10);    net.addLink(link);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addInitModules(List<String> modules){  this.initModules.addAll(modules);}  }
class C{  public String sqlAD_getTranslatedColumns(String vendorName,String catalogName,String schemaName){  String searchTableName="AD_Column";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("t.ColumnName");  ArrayList<String> aliasNames=null;  ArrayList<String> joinTypes=new ArrayList<String>();  joinTypes.add("INNER JOIN");  ArrayList<String> joinTables=new ArrayList<String>();  joinTables.add("AD_Table");  ArrayList<String> joinConditions=new ArrayList<String>();  joinConditions.add("t.AD_Table_ID = t0.AD_Table_ID");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("t0.TableName LIKE ?");  conditions.add("t.IsTranslated = 'Y'");  conditions.add("t.IsActive = 'Y'");  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,searchTableName,null,columnNames,aliasNames,joinTypes,joinTables,null,joinConditions,conditions,sortColumns,false);}  }
class C{  public ResumeThreadParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_RESUME_THREAD_SUCC);}  }
class C{  public IMouseState createEdgeClickedLeftState(final Edge e,final MouseEvent event){  final CEdgeClickedLeftState state=new CEdgeClickedLeftState(this,m_graph,e);  m_factory.createEdgeClickedLeftAction().execute(state,event);  return state;}  }
class C{  public static File createTempFile(final String prefix,final String suffix){  File tempFile;  try {    tempFile=File.createTempFile(prefix,suffix);  } catch (  IOException ioException) {    throw new IllegalStateException(ioException);  }  return tempFile;}  }
class C{  public Object peek(){  return list.get(0);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  public V remove(Object key){  if (!isValidKey(key))   return null;  int index=((Enum<?>)key).ordinal();  Object oldValue=vals[index];  vals[index]=null;  if (oldValue != null)   size--;  return unmaskNull(oldValue);}  }
class C{  private void fadeIn(){  this.animate().alpha(1f).setDuration(this.fadeTimeMs).start();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.COMPOUND_EXPR___STRING_EXPR_1:    getStringExpr_1().clear();  getStringExpr_1().addAll((Collection<? extends StringExpr_>)newValue);return;case UmplePackage.COMPOUND_EXPR___BOOL_EXPR_1:getBoolExpr_1().clear();getBoolExpr_1().addAll((Collection<? extends BoolExpr_>)newValue);return;case UmplePackage.COMPOUND_EXPR___NUM_EXPR_1:getNumExpr_1().clear();getNumExpr_1().addAll((Collection<? extends NumExpr_>)newValue);return;case UmplePackage.COMPOUND_EXPR___GEN_EXPR_1:getGenExpr_1().clear();getGenExpr_1().addAll((Collection<? extends GenExpr_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void touch(Node nde){  if (nde == null)   return;  nde.insertBefore(head);  head=nde;}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  AxisState state;  if (!isVisible()) {    state=new AxisState(cursor);    List ticks=refreshTicks(g2,state,dataArea,edge);    state.setTicks(ticks);    return state;  }  state=drawTickMarksAndLabels(g2,cursor,plotArea,dataArea,edge);  if (getAttributedLabel() != null) {    state=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,state);  } else {    state=drawLabel(getLabel(),g2,plotArea,dataArea,edge,state);  }  createAndAddEntity(cursor,state,dataArea,edge,plotState);  return state;}  }
class C{  public void query(HeadersAmp headers,String from,long qid,String to,String methodName,Object... args) throws IOException {  if (log.isLoggable(Level.FINEST)) {    log.finest(this + " query " + methodName+ Arrays.asList(args)+ "\n  {to:"+ to+ ","+ headers+ "}");  }  try {    JsonWriterImpl jOut=_jOut;    jOut.init();    jOut.writeStartArray();    jOut.write("query");    writeHeaders(jOut,headers);    jOut.write(from);    jOut.write(qid);    jOut.write(to);    jOut.write(methodName);    writeArgs(jOut,args);    jOut.writeEndArray();    jOut.close();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  public List<FiredTriggerRecord> selectFiredTriggerRecordsByJob(Connection conn,String jobName,String groupName) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    List<FiredTriggerRecord> lst=new LinkedList<FiredTriggerRecord>();    if (jobName != null) {      ps=conn.prepareStatement(rtp(SELECT_FIRED_TRIGGERS_OF_JOB));      ps.setString(1,jobName);      ps.setString(2,groupName);    } else {      ps=conn.prepareStatement(rtp(SELECT_FIRED_TRIGGERS_OF_JOB_GROUP));      ps.setString(1,groupName);    }    rs=ps.executeQuery();    while (rs.next()) {      FiredTriggerRecord rec=new FiredTriggerRecord();      rec.setFireInstanceId(rs.getString(COL_ENTRY_ID));      rec.setFireInstanceState(rs.getString(COL_ENTRY_STATE));      rec.setFireTimestamp(rs.getLong(COL_FIRED_TIME));      rec.setScheduleTimestamp(rs.getLong(COL_SCHED_TIME));      rec.setPriority(rs.getInt(COL_PRIORITY));      rec.setSchedulerInstanceId(rs.getString(COL_INSTANCE_NAME));      rec.setTriggerKey(triggerKey(rs.getString(COL_TRIGGER_NAME),rs.getString(COL_TRIGGER_GROUP)));      if (!rec.getFireInstanceState().equals(STATE_ACQUIRED)) {        rec.setJobDisallowsConcurrentExecution(getBoolean(rs,COL_IS_NONCONCURRENT));        rec.setJobRequestsRecovery(rs.getBoolean(COL_REQUESTS_RECOVERY));        rec.setJobKey(jobKey(rs.getString(COL_JOB_NAME),rs.getString(COL_JOB_GROUP)));      }      lst.add(rec);    }    return lst;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  @SuppressWarnings("static-access") private void resetMigrationMode(){  if (s_parameters.isUpgrade()) {    m_modeUpgrade.setSelected(true);    m_modeTransfer.setSelected(false);  } else {    m_modeUpgrade.setSelected(false);    m_modeTransfer.setSelected(true);  }}  }
class C{  public String toString(){  return "SimpleProperty(" + "namespace='" + this.namespace + "' localName='"+ this.localName+ "' value='"+ this.value+ "')";}  }
class C{  private boolean SeenHugeLogProb(IAnalyzedInterval analyzedInterval) throws AdeException {  for (  IAnalyzedMessageSummary ams : analyzedInterval.getAnalyzedMessages()) {    final StatisticsChart sc=ams.getStatistics();    if (sc.getDoubleStatOrThrow(IScorer.LOG_PROB) == MainScorerImpl.HUGELOGPROB) {      return true;    }  }  return false;}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_EVENT_DEFAULT";  }  String result="";  if ((n & CU_EVENT_BLOCKING_SYNC) != 0)   result+="CU_EVENT_BLOCKING_SYNC ";  if ((n & CU_EVENT_DISABLE_TIMING) != 0)   result+="CU_EVENT_DISABLE_TIMING ";  if ((n & CU_EVENT_INTERPROCESS) != 0)   result+="CU_EVENT_INTERPROCESS ";  return result;}  }
class C{  public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  if (this.particleAge++ >= this.particleMaxAge) {    this.setExpired();  }  this.setParticleTextureIndex(7 - this.particleAge * 8 / this.particleMaxAge);  this.moveEntity(this.motionX,this.motionY,this.motionZ);  this.motionX*=0.9599999785423279D;  this.motionY*=0.9599999785423279D;  this.motionZ*=0.9599999785423279D;}  }
class C{  @Override public void run(){  _waiter.sleep(pollStartLag);  while (true) {    try {      getUpdatedDataNodeConfig();    } catch (    Exception e) {      _log.error("getUpdatedDataNodeConfig, exception: {}",e);    }    _waiter.sleep(pollInterval);  }}  }
class C{  void authenticationFailed(String condition){synchronized (this) {    saslFailed=true;    errorCondition=condition;    notify();  }}  }
class C{  public static String toHexString(byte[] bytes){  return String.format(Locale.US,"%0" + (bytes.length << 1) + "x",new BigInteger(1,bytes));}  }
class C{  protected SSLContext buildSSLContext() throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {  return SSLContexts.custom().loadKeyMaterial(buildKeyStore(getKeyStore(),getKeyStorePassword()),getKeyStorePassword().toCharArray()).loadTrustMaterial(buildKeyStore(getTrustStore(),getTrustStorePassword()),new TrustSelfSignedStrategy()).build();}  }
class C{  public void stopSpinning(){  isSpinning=false;  progress=0;  spinHandler.removeMessages(0);}  }
class C{  public boolean isAllowVoting(){  return allowVoting;}  }
class C{  public void testUnencodedString(){  String input="safe";  assertSame(input,Encode.forXml(input));}  }
class C{  public boolean addUserToGroup(String tenantName,PrincipalId userId,String groupName) throws Exception {  return getService().addUserToGroup(tenantName,userId,groupName,this.getServiceContext());}  }
class C{  public Query execute(Vector statements,PageContext pc,SQL sql,int maxrows) throws PageException {  if (statements.size() != 1)   throw new DatabaseException("only one SQL Statement allowed at time",null,null,null);  ZQuery query=(ZQuery)statements.get(0);  if (query.getFrom().size() == 1) {    return testExecute(pc,sql,getSingleTable(pc,query),query,maxrows);  }  throw new DatabaseException("can only work with single tables yet",null,null,null);}  }
class C{  @Override public void onFullBackup(FullBackupDataOutput output) throws IOException {  if (mVolumes != null) {    if (DEBUG)     Slog.i(TAG,"Backing up " + mVolumes.length + " shared volumes");    HashSet<String> externalFilesDirFilter=new HashSet<String>();    final File externalAndroidRoot=new File(Environment.getExternalStorageDirectory(),Environment.DIRECTORY_ANDROID);    externalFilesDirFilter.add(externalAndroidRoot.getCanonicalPath());    for (int i=0; i < mVolumes.length; i++) {      StorageVolume v=mVolumes[i];      String domain=FullBackup.SHARED_PREFIX + i;      fullBackupFileTree(null,domain,v.getPath(),externalFilesDirFilter,output);    }  }}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  private void checkRange(long index){  Assert.indexNot(isEmpty(),"segment is empty");  Assert.indexNot(index < firstIndex(),index + " is less than the first index in the segment");  Assert.indexNot(index > lastIndex(),index + " is greater than the last index in the segment");}  }
class C{  public static void doSetup(){  new N4MFStandaloneSetup().createInjectorAndDoEMFRegistration();}  }
class C{  private VirtualNAS findvNasByNativeId(StorageSystem system,String nativeId){  URIQueryResultList results=new URIQueryResultList();  VirtualNAS vNas=null;  String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nativeId,NativeGUIDGenerator.VIRTUAL_NAS);  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVirtualNASByNativeGuidConstraint(nasNativeGuid),results);  Iterator<URI> iter=results.iterator();  while (iter.hasNext()) {    VirtualNAS tmpVnas=_dbClient.queryObject(VirtualNAS.class,iter.next());    if (tmpVnas != null && !tmpVnas.getInactive()) {      vNas=tmpVnas;      _logger.info("found virtual NAS {}",tmpVnas.getNativeGuid() + ":" + tmpVnas.getNasName());      break;    }  }  return vNas;}  }
class C{  public String learningRateTipText(){  return "The learning rate.";}  }
class C{  private static final void printBitVectorOfStates(long vector){  System.out.println(bitVectorOfStatesToString(vector));}  }
class C{  public IDevice learnEntity(MacAddress macAddress,VlanVid vlan,IPv4Address ipv4Address,IPv6Address ipv6Address,DatapathId switchDPID,OFPort switchPort){  return learnEntity(macAddress,vlan,ipv4Address,ipv6Address,switchDPID,switchPort,true);}  }
class C{  @NonnullElements @NotLive @Unmodifiable public boolean isResolveAttributes(){  return resolveAttributes;}  }
class C{  public int score(IGameState state,IPlayer player){  boolean negate=false;  if (this.player != player) {    negate=true;  }  int value=table.get(((MiniState)state).state);  if (negate)   value=-value;  return value;}  }
class C{  private void generateClass(TreeLogger logger,GeneratorContext context,String packageName,String className,List<JClassType> extensions) throws UnableToCompleteException {  PrintWriter pw=context.tryCreate(logger,packageName,className);  if (pw == null) {    return;  }  ClassSourceFileComposerFactory composerFactory=new ClassSourceFileComposerFactory(packageName,className);  generateImports(extensions,composerFactory);  composerFactory.addImplementedInterface(ExtensionRegistry.class.getCanonicalName());  SourceWriter sw=composerFactory.createSourceWriter(context,pw);  sw.println("private final Map<String, ExtensionDescription> extensions = new HashMap<>();");  generateConstructor(className,extensions,sw);  generateGetExtensionsMethod(sw);  sw.outdent();  sw.println("}");  context.commit(logger,pw);}  }
class C{  static float powerOfTwoF(int n){  return Float.intBitsToFloat(((n + FloatConsts.MAX_EXPONENT) << (FloatConsts.SIGNIFICAND_WIDTH - 1)) & FloatConsts.EXP_BIT_MASK);}  }
class C{  public boolean match(CastExpression node,Object other){  if (!(other instanceof CastExpression)) {    return false;  }  CastExpression o=(CastExpression)other;  return (safeSubtreeMatch(node.getType(),o.getType()) && safeSubtreeMatch(node.getExpression(),o.getExpression()));}  }
class C{  protected List<ParsedDynamicAccountParameters> computeParsedDynamicAccountParameters(){  return new ArrayList<ParsedDynamicAccountParameters>();}  }
class C{  public WbXmlNamespaceContext(){  this(null);}  }
class C{  @Override protected Control createDetailsArea(final Composite parent){  final Composite panel=new Composite(parent,SWT.NONE);  panel.setLayoutData(new GridData(GridData.FILL_BOTH));  final GridLayout layout=new GridLayout();  layout.marginHeight=0;  layout.marginWidth=0;  panel.setLayout(layout);  createDetailsViewer(panel);  return panel;}  }
class C{  public void addWeapon(Mounted mounted){  weapons.put(mounted,new Vector<ArtilleryModifier>());}  }
class C{  protected BigIntegerType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public synchronized int hashCode(){  return super.hashCode();}  }
class C{  private ParameterPair(){  a=null;  b=null;}  }
class C{  public boolean contains(Object o){  if (!(o instanceof Map.Entry))   return false;  return c.contains(new UnmodifiableEntry((Map.Entry)o));}  }
class C{  public GamePhaseChangeEvent(Object source,IGame.Phase oldPhase,IGame.Phase newPhase){  super(source);  this.oldPhase=oldPhase;  this.newPhase=newPhase;}  }
class C{  public static long timeTakenStringToInt(String timeTakenString){  RaptorStringTokenizer tok=new RaptorStringTokenizer(timeTakenString,":().",true);  int minutes=Integer.parseInt(tok.nextToken());  int seconds=Integer.parseInt(tok.nextToken());  int millis=Integer.parseInt(tok.nextToken());  return (minutes * 60 + seconds) * 1000 + millis;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void main(String[] args) throws Exception {  String string=IOUtils.toString(System.in,StandardCharsets.UTF_8.toString());  System.out.println(string);  OcspNextUpdateSchemaValidator.validate(string);}  }
class C{  private static JButton createAndAddIconToToolbar(final JToolBar toolBar,final AbstractAction action,final String defaultIconPath,final String rolloverIconPath,final String pressedIconPath){  final JButton button=toolBar.add(CActionProxy.proxy(action));  button.setBorder(new EmptyBorder(0,0,0,0));  button.setIcon(new ImageIcon(CMain.class.getResource(defaultIconPath)));  button.setRolloverIcon(new ImageIcon(CMain.class.getResource(rolloverIconPath)));  button.setPressedIcon(new ImageIcon(CMain.class.getResource(pressedIconPath)));  return button;}  }
class C{  public <V>boolean has(TupleTag<V> tag){  return valueMap.containsKey(tag);}  }
class C{  static Instruction mustImplementInterface(Instruction s,IR ir){  Operand ref=TypeCheck.getClearRef(s);  RVMClass LHSClass=(RVMClass)TypeCheck.getType(s).getVMType();  if (VM.VerifyAssertions)   VM._assert(LHSClass != null,"Should be resolvable...");  int interfaceIndex=LHSClass.getDoesImplementIndex();  int interfaceMask=LHSClass.getDoesImplementBitMask();  Operand guard=TypeCheck.getClearGuard(s);  BasicBlock myBlock=s.getBasicBlock();  BasicBlock failBlock=myBlock.createSubBlock(s.getBytecodeIndex(),ir,.0001f);  BasicBlock succBlock=myBlock.splitNodeAt(s,ir);  succBlock.firstInstruction().insertAfter(Move.create(REF_MOVE,TypeCheck.getClearResult(s),ref.copy()));  myBlock.insertOut(failBlock);  myBlock.insertOut(succBlock);  ir.cfg.linkInCodeOrder(myBlock,succBlock);  ir.cfg.addLastInCodeOrder(failBlock);  Instruction raiseError=Trap.create(TRAP,null,TrapCodeOperand.MustImplement());  raiseError.copyPosition(s);  failBlock.appendInstruction(raiseError);  Operand RHStib=getTIB(s,ir,ref,guard);  RegisterOperand doesImpl=InsertUnary(s,ir,GET_DOES_IMPLEMENT_FROM_TIB,TypeReference.IntArray,RHStib);  if (DynamicTypeCheck.MIN_DOES_IMPLEMENT_SIZE <= interfaceIndex) {    RegisterOperand doesImplLength=InsertGuardedUnary(s,ir,ARRAYLENGTH,TypeReference.Int,doesImpl.copyD2U(),TG());    Instruction lengthCheck=IfCmp.create(INT_IFCMP,ir.regpool.makeTempValidation(),doesImplLength,IC(interfaceIndex),ConditionOperand.LESS_EQUAL(),failBlock.makeJumpTarget(),BranchProfileOperand.never());    s.insertBefore(lengthCheck);    myBlock.splitNodeWithLinksAt(lengthCheck,ir);    myBlock.insertOut(failBlock);  }  RegisterOperand entry=InsertLoadOffset(s,ir,INT_LOAD,TypeReference.Int,doesImpl,Offset.fromIntZeroExtend(interfaceIndex << 2),new LocationOperand(TypeReference.Int),TG());  RegisterOperand bit=insertBinary(s,ir,INT_AND,TypeReference.Int,entry,IC(interfaceMask));  IfCmp.mutate(s,INT_IFCMP,ir.regpool.makeTempValidation(),bit,IC(0),ConditionOperand.EQUAL(),failBlock.makeJumpTarget(),BranchProfileOperand.never());  return s;}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {  StringBuilder sb=new StringBuilder(msg.length());  if (encoding == null) {    encoding=DEFAULT_ENCODING;  } else   if (!DEFAULT_ENCODING.equals(encoding)) {    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());    if (eci != null) {      encodingECI(eci.getValue(),sb);    }  }  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  byte[] bytes=null;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    bytes=msg.getBytes(encoding);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          if (bytes == null) {            bytes=msg.getBytes(encoding);          }          int b=determineConsecutiveBinaryCount(msg,bytes,p);          if (b == 0) {            b=1;          }          if (b == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,p,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,p,b,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  public static Value rhs(Unit unit){  if (unit instanceof AssignStmt)   return ((AssignStmt)unit).getRightOp(); else   return null;}  }
class C{  @Override public MeanVarianceMinMax put(double[] vals){  if (vals.length <= 2) {    final int l=vals.length;    int i=0;    while (i < l) {      put(vals[l]);    }    return this;  }  double sum=0.;  final int l=vals.length;  int i=0;  while (i < l) {    final double v=vals[l];    sum+=v;    min=v < min ? v : min;    max=v > max ? v : max;  }  double om1=sum / vals.length;  double om2=0.;  i=0;  while (i < l) {    final double v=vals[l] - om1;    om2+=v * v;  }  final double nwsum=vals.length + this.n;  final double delta=om1 - this.m1;  final double rval=delta * vals.length / nwsum;  this.m1=(this.n * this.m1 + sum) / nwsum;  this.m2+=om2 + delta * this.n * rval;  this.n=nwsum;  return this;}  }
class C{  public boolean removeParticipant(Who participant){  return super.removeElement(participant);}  }
class C{  protected int sendMedtronicPumpCommand(byte command,byte repeat,byte[] postCommand){  try {    if (idPump != null && idPump.length > 0) {      int pCLength=0;      if (postCommand != null)       pCLength=postCommand.length;      byte[] readSystemTime=new byte[6 + idPump.length + pCLength];      int i=0;      int size=2 + idPump.length + pCLength+ 1;      byte[] sizByte=HexDump.hexStringToByteArray(HexDump.toHexString(size));      log.debug("sizByte " + HexDump.toHexString(sizByte));      readSystemTime[0]=(byte)0x81;      readSystemTime[1]=(byte)sizByte[sizByte.length - 1];      readSystemTime[2]=repeat;      readSystemTime[3]=(byte)MedtronicConstants.MEDTRONIC_PUMP;      for (i=0; i < idPump.length; i++)       readSystemTime[i + 4]=(byte)idPump[i];      readSystemTime[idPump.length + 4]=command;      log.debug("postcommadnLength ");      for (i=0; i < postCommand.length; i++)       readSystemTime[idPump.length + 5 + i]=(byte)postCommand[i];      log.debug("command sent " + HexDump.toHexString(readSystemTime));      int resultWrite=mSerialDevice.write(readSystemTime);      return resultWrite;    }  } catch (  Exception e) {    StringBuffer sb1=new StringBuffer("");    sb1.append("EXCEPTION!!!!!! " + e.getMessage() + " "+ e.getCause());    for (    StackTraceElement st : e.getStackTrace()) {      sb1.append(st.toString());    }    sendMessageToUI(sb1.toString(),false);  }  return -1;}  }
class C{  private int insertUnassignedRule() throws SQLException {  PreparedStatement ruleStatement;  String unassignedRuleSqlStatement="INSERT INTO " + SQL.RULES + " (RULE_NAME, DESCRIPTION, RULE) VALUES ('%s','%s','%s')";  unassignedRuleSqlStatement=String.format(unassignedRuleSqlStatement,UNASSIGNED_RULE_NAME,UNASSIGNED_RULE_DESCRIPTION,UNASSIGNED_RULE);  ruleStatement=prepareStatement(unassignedRuleSqlStatement,new String[]{"RULE_INTERNAL_ID"});  ruleStatement.execute();  return getInternalId(ruleStatement);}  }
class C{  @NonNull protected PendingIntent createPendingIntent(@NonNull String action,@NonNull Class<? extends Service> serviceClass){  Intent intent=new Intent(context,serviceClass);  intent.setAction(action);  return PendingIntent.getService(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);}  }
class C{  private static int selectStyle(char ch){switch (ch) {case 'S':    return SHORT;case 'M':  return MEDIUM;case 'L':return LONG;case 'F':return FULL;case '-':return NONE;default :throw new IllegalArgumentException("Invalid style character: " + ch);}}  }
class C{  public boolean canSee(){  return hasLoS;}  }
class C{  @SideOnly(Side.CLIENT) public static void drawQuad(final float u0,final float v0,final float u1,final float v1){  drawQuad(0,0,1,1,u0,v0,u1,v1);}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length == 1) {    Webserver web=new Webserver(args[0]);    web.run();  } else   System.err.println("Usage: java javassist.tools.web.Webserver <port number>");}  }
class C{  public void debugMemoryDump(){  if (!LOG.isDebugEnabled())   return;  if (size == -1) {    LOG.debug("Event handle not allocated");  }synchronized (JnaEventHandle.class) {    String sb="Event Buffer " + getEventName() + ':'+ getEventBuffer().getValue().dump(0,size)+ "Result Buffer "+ getEventName()+ ':'+ getResultBuffer().getValue().dump(0,size);    LOG.debug(sb);  }}  }
class C{  private void addNode(Node node) throws SyncException {  Short nodeId=node.getNodeId();  if (allNodes.get(nodeId) != null) {    throw new SyncException("Error adding node " + node + ": a node with that ID already exists");  }  allNodes.put(nodeId,node);  Short domainId=node.getDomainId();  List<Node> localDomain=localDomains.get(domainId);  if (localDomain == null) {    localDomains.put(domainId,localDomain=new ArrayList<Node>());  }  localDomain.add(node);}  }
class C{  public boolean addViewAllocToInitLayout_ID(String strId,boolean requestFocus){  logger.info("addViewAllocForInitLayout view ID {} ",strId);  Integer intId=mNumberToIDMap.inverse().get(strId);  if (intId == null) {    logger.warn("No matching numeric Id for {} ",strId);    return false;  }  SootMethod method=lookupGetUi_ID(intId);  if (method == null) {    logger.warn("findViewByID_{} is NULL ",String.format("%08x",intId));    return false;  }  Expr invokeExpr=Jimple.v().newStaticInvokeExpr(method.makeRef(),mArgContext);  Stmt stmt=Jimple.v().newInvokeStmt(invokeExpr);  Chain<Unit> units=mInitLayoutBody.getUnits();  units.add(stmt);  if (requestFocus) {    logger.info("We may want to add requestFocus here");  }  return true;}  }
class C{  public static Short toShort(String str) throws PageException {  return Short.valueOf(toShortValue(str));}  }
class C{  public long failure(){  return failure;}  }
class C{  public boolean contains(char[] text,int off,int len){  return map.containsKey(text,off,len);}  }
class C{  static public boolean startFinReport(ProcessInfo pi){  String TableName=pi.getAD_Process_ID() == 202 ? "T_Report" : "T_ReportStatement";  MQuery query=MQuery.get(Env.getCtx(),pi.getAD_PInstance_ID(),TableName);  MPrintFormat format=(MPrintFormat)pi.getTransientObject();  if (format == null)   format=(MPrintFormat)pi.getSerializableObject();  if (format == null) {    s_log.log(Level.SEVERE,"startFinReport - No PrintFormat");    return false;  }  PrintInfo info=new PrintInfo(pi);  ReportEngine re=new ReportEngine(Env.getCtx(),format,query,pi,info);  createOutput(re,pi.isPrintPreview(),null);  return true;}  }
class C{  public WWEvent(Object source){  super(source);}  }
class C{  public static String concat(final Object[] values,String delimiter){  delimiter=ObjectUtils.defaultIfNull(delimiter,EMPTY_STRING);  final StringBuilder buffer=new StringBuilder();  int count=0;  if (values != null) {    for (    Object value : values) {      buffer.append(count++ > 0 ? delimiter : EMPTY_STRING);      buffer.append(value);    }  }  return buffer.toString();}  }
class C{  private static double triArea(Coordinate a,Coordinate b,Coordinate c){  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);}  }
class C{  public BlobReaderImpl(RowCursor cursor,ColumnBlob column,int blobOffset,int blobLength,byte[] pageBuffer){  _cursor=cursor;  _column=column;  _offset=blobOffset;  _length=blobLength;  _tail=blobOffset + blobLength;  _pageBuffer=pageBuffer;}  }
class C{  protected double unwrapKey(Object key){  return ((Double)key).doubleValue();}  }
class C{  public String restrictionTemplate(){  return mRestriction == null ? null : mRestriction.getSequenceName();}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (request.getServerName().startsWith("hsts0.") == false) {    System.err.println("HstsSuperCookieStartServlet: Unexpected domain. Start page must be subdomain hsts0. Subdomain = <" + request.getServerName() + ">.");    response.sendError(404);    return;  }  Matcher uriMatcher=uriPattern.matcher(request.getRequestURI());  if (uriMatcher.matches() == false) {    System.err.println("HstsSuperCookieStartServlet: Invalid URI = <" + request.getRequestURI() + ">");    response.sendError(404);    return;  }  String action=uriMatcher.group(1);  Integer hstsGroup=Integer.parseInt(uriMatcher.group(2));  if (hstsGroup > NUM_ID_CHAINS) {    System.err.println("HstsSuperCookieStartServlet: Invalid HSTS group = <" + hstsGroup + ">");    response.sendError(404);    return;  }  Integer hstsGroupStartSubdomainNumber=((hstsGroup - 1) * ID_LENGTH + 1);  if (request.getServerPort() == 80) {    response.sendRedirect("https://hsts" + hstsGroupStartSubdomainNumber + "."+ getServletContext().getInitParameter("websiteBaseURL")+ response.encodeRedirectURL("/hstsSuperCookie/newID/" + generateNewUnassignedIdChunk()));    return;  } else   if (request.getServerPort() == 443) {    if (action.equals("midpoint")) {      HttpSession session=request.getSession();synchronized (session) {        Integer numIdChainsCompleted=(Integer)session.getAttribute("numIdChainsCompleted");        if (numIdChainsCompleted == null) {          numIdChainsCompleted=0;        }        ++numIdChainsCompleted;        if (numIdChainsCompleted >= NUM_ID_CHAINS) {          response.setHeader("Strict-Transport-Security","max-age=31622400");        } else {          session.setAttribute("numIdChainsCompleted",numIdChainsCompleted);        }      }    }    response.sendRedirect("http://hsts" + hstsGroupStartSubdomainNumber + "."+ getServletContext().getInitParameter("websiteBaseURL")+ "/hstsSuperCookie/existingID/");    return;  } else {    System.err.println("HstsSuperCookieStartServlet: Unexpected protocol. Port = <" + request.getServerPort() + ">.");    response.sendError(404);    return;  }}  }
class C{  public COPACModel(int cdim,SetDBIDs ids){  super();  this.cdim=cdim;  this.ids=ids;}  }
class C{  public RangeFileAsyncHttpResponseHandler(File file){  super(file);}  }
class C{  public void removeAllElements(){  if (null == m_map)   return;  for (int i=0; i < m_firstFree; i++) {    m_map[i]=null;  }  m_firstFree=0;}  }
class C{  public <R>R collect(Func1<Iterable<T>,R> collector){  return collector.call(this);}  }
class C{  public boolean isUdhi(){  return isUdhi(esmClass);}  }
class C{  private String filterHeaderField(String name,String value){  if (value == null)   return null;  if (SET_COOKIE.equalsIgnoreCase(name) || SET_COOKIE2.equalsIgnoreCase(name)) {    if (cookieHandler == null || value.length() == 0)     return value;    sun.misc.JavaNetHttpCookieAccess access=sun.misc.SharedSecrets.getJavaNetHttpCookieAccess();    StringBuilder retValue=new StringBuilder();    List<HttpCookie> cookies=access.parse(value);    boolean multipleCookies=false;    for (    HttpCookie cookie : cookies) {      if (cookie.isHttpOnly())       continue;      if (multipleCookies)       retValue.append(',');      retValue.append(access.header(cookie));      multipleCookies=true;    }    return retValue.length() == 0 ? "" : retValue.toString();  }  return value;}  }
class C{  public vec3 mul(vec3 a,vec3 b){  this.m[0]=a.m[0] * b.m[0];  this.m[1]=a.m[1] * b.m[1];  this.m[2]=a.m[2] * b.m[2];  return this;}  }
class C{  public static void cancel(@Nullable GridWorker w){  if (w != null)   w.cancel();}  }
class C{  public HaskellCatalog(){  this(HaskellCatalog.XML_PATH);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return null;  return uiMgr.getActiveSecurityProfile();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.420 -0500",hash_original_method="F65A3585D6DFE09EE931E3CB8D7B855F",hash_generated_method="9E9C1487122124AAF78E9A685E07DF05") void restartConnection(boolean abort){}  }
class C{  @Override protected void afterExecute(Runnable r,Throwable t){  super.afterExecute(r,t);  if (t == null && r instanceof Future<?>) {    t=unwrapFutureThrowable((Future<?>)r);  }  if (t != null) {    getLogger().error("Thread: " + Thread.currentThread().getName() + ": task terminated with exception : ",t);    cleanup();    completer.accept(this,t);  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.attributedLabel=SerialUtilities.readAttributedString(stream);  this.shape=SerialUtilities.readShape(stream);  this.fillPaint=SerialUtilities.readPaint(stream);  this.outlineStroke=SerialUtilities.readStroke(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.line=SerialUtilities.readShape(stream);  this.lineStroke=SerialUtilities.readStroke(stream);  this.linePaint=SerialUtilities.readPaint(stream);  this.labelPaint=SerialUtilities.readPaint(stream);}  }
class C{  private String stripSeparators(String contact){  contact=contact.replaceAll("[ -]","");  Matcher matcher=PATTERN_CONTACT.matcher(contact);  if (matcher.find()) {    return matcher.group();  }  return null;}  }
class C{  public void deleteAttributeAt(int columnIndex){  ((DataTableModel)getModel()).deleteAttributeAt(columnIndex);}  }
class C{  public static XMLReader createXMLReader(String className) throws SAXException {  return loadClass(NewInstance.getClassLoader(),className);}  }
class C{  @SuppressWarnings("unchecked") public void writeDate(java.sql.Date x) throws SQLException {  attribs.add(x);}  }
class C{  public static StreamTimestamp now(String streamId){  return of(streamId,Instant.now());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.293 -0400",hash_original_method="793A438044EEB54318015A62231AC042",hash_generated_method="7DE5CD94519222AFEEE75BA864A79CC0") public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){  if (android.os.Build.VERSION.SDK_INT >= HONEYCOMB) {  }  writer.print(prefix);  writer.print("Local FragmentActivity ");  writer.print(Integer.toHexString(System.identityHashCode(this)));  writer.println(" State:");  String innerPrefix=prefix + "  ";  writer.print(innerPrefix);  writer.print("mCreated=");  writer.print(mCreated);  writer.print("mResumed=");  writer.print(mResumed);  writer.print(" mStopped=");  writer.print(mStopped);  writer.print(" mReallyStopped=");  writer.println(mReallyStopped);  writer.print(innerPrefix);  writer.print("mLoadersStarted=");  writer.println(mLoadersStarted);  if (mLoaderManager != null) {    writer.print(prefix);    writer.print("Loader Manager ");    writer.print(Integer.toHexString(System.identityHashCode(mLoaderManager)));    writer.println(":");    mLoaderManager.dump(prefix + "  ",fd,writer,args);  }  mFragments.dump(prefix,fd,writer,args);  writer.print(prefix);  writer.println("View Hierarchy:");  dumpViewHierarchy(prefix + "  ",writer,getWindow().getDecorView());}  }
class C{  static void blur(int[] srcPixels,int[] dstPixels,int width,int height,float[] kernel,int radius){  float a;  float r;  float g;  float b;  int ca;  int cr;  int cg;  int cb;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      a=r=g=b=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset];        float blurFactor=kernel[radius + i];        a+=blurFactor * ((pixel >> 24) & 0xFF);        r+=blurFactor * ((pixel >> 16) & 0xFF);        g+=blurFactor * ((pixel >> 8) & 0xFF);        b+=blurFactor * ((pixel) & 0xFF);      }      ca=(int)(a + 0.5f);      cr=(int)(r + 0.5f);      cg=(int)(g + 0.5f);      cb=(int)(b + 0.5f);      dstPixels[index]=((ca > 255 ? 255 : ca) << 24) | ((cr > 255 ? 255 : cr) << 16) | ((cg > 255 ? 255 : cg) << 8)| (cb > 255 ? 255 : cb);      index+=height;    }  }}  }
class C{  protected void assertEquals(String message,ResultSet rs0,ResultSet rs1) throws SQLException {  ResultSetMetaData meta=rs0.getMetaData();  int columns=meta.getColumnCount();  assertEquals(columns,rs1.getMetaData().getColumnCount());  while (rs0.next()) {    assertTrue(message,rs1.next());    for (int i=0; i < columns; i++) {      Assert.assertEquals(rs0.getString(i + 1),rs1.getString(i + 1));    }  }  assertFalse(message,rs0.next());  assertFalse(message,rs1.next());}  }
class C{  public InputStream post(String name1,Object value1,String name2,Object value2,String name3,Object value3,String name4,Object value4) throws IOException {  postCookies();  setParameter(name1,value1);  setParameter(name2,value2);  setParameter(name3,value3);  setParameter(name4,value4);  return doPost();}  }
class C{  public void addListener(TapListener listener){  if (!mListeners.contains(listener)) {    mListeners.add(listener);  }}  }
class C{  public TransactionInput(NetworkParameters params,Transaction parentTransaction,byte[] payload,int offset,MessageSerializer serializer) throws ProtocolException {  super(params,payload,offset,parentTransaction,serializer,UNKNOWN_LENGTH);  this.value=null;}  }
class C{  public void clearErrorLine(){  ErrorLabel.setText("");}  }
class C{  private void periodicallyPublishLastNInfo(TStream<JsonObject> stream,int count,int nSec,String event){  List<JsonObject> lastN=Collections.synchronizedList(new ArrayList<>());  stream.last(count,JsonTuples.keyFn()).aggregate(null).tag("lastN").sink(null);  TStream<JsonObject> periodicLastN=t.poll(null,nSec,TimeUnit.SECONDS).filter(null).map(null).tag("periodicLastN");  traceStream(periodicLastN,"periodicLastN-" + event);  app.mqttDevice().events(PlumbingStreams.pressureReliever(periodicLastN,null,30),app.sensorEventId(sensorId,event),QoS.FIRE_AND_FORGET);}  }
class C{  public static ClipRable convertClipPath(Element clippedElement,GraphicsNode clippedNode,BridgeContext ctx){  Value v=getComputedStyle(clippedElement,SVGCSSEngine.CLIP_PATH_INDEX);  int primitiveType=v.getPrimitiveType();switch (primitiveType) {case CSSPrimitiveValue.CSS_IDENT:    return null;case CSSPrimitiveValue.CSS_URI:  String uri=v.getStringValue();Element cp=ctx.getReferencedElement(clippedElement,uri);Bridge bridge=ctx.getBridge(cp);if (bridge == null || !(bridge instanceof ClipBridge)) {throw new BridgeException(ctx,clippedElement,ERR_CSS_URI_BAD_TARGET,new Object[]{uri});}return ((ClipBridge)bridge).createClip(ctx,cp,clippedElement,clippedNode);default :throw new IllegalStateException("Unexpected primitive type:" + primitiveType);}}  }
class C{  public void shutdown(){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mContext);  prefs.unregisterOnSharedPreferenceChangeListener(this);}  }
class C{  @Deprecated public int size(){  return d;}  }
class C{  public void refreshProjectInformation(){  if (getTaskManager().getTaskCount() == 0 && resp.nbPeople() == 0) {    getStatusBar().setSecondText("");  } else {    getStatusBar().setSecondText(language.getCorrectedLabel("task") + " : " + getTaskManager().getTaskCount()+ "  "+ language.getCorrectedLabel("resources")+ " : "+ resp.nbPeople());  }}  }
class C{  public HttpsURL(final String user,final String password,final String host,final int port) throws URIException {  this(user,password,host,port,null,null,null);}  }
class C{  public void incrementGeneratedTokens(String tenant){  logger.trace("Incrementing generated tokens for tenant: " + tenant);  try {    AtomicInteger count;synchronized (this) {      if ((count=generatedTokensMap.get(tenant)) == null) {        generatedTokensMap.put(tenant,new AtomicInteger(1));      } else {        count.incrementAndGet();      }    }    logger.trace("Tokens generated for tenant: {} is- {} ",tenant,generatedTokensMap.get(tenant));    incrementTotalGenerated();  } catch (  Exception e) {    logger.error("Unable to increment generated tokens",e);  }}  }
class C{  public void updateSuccessfulQueryTimestamp(){  createUserIfNull();  userEntity.setProperty("timestamp",System.currentTimeMillis());  service.put(userEntity);}  }
class C{  public static AnnotatedType buildAnnotatedType(Type type,LocationInfo currentLoc,TypeAnnotation[] actualTypeAnnos,TypeAnnotation[] allOnSameTarget,AnnotatedElement decl){  if (type == null) {    return EMPTY_ANNOTATED_TYPE;  }  if (isArray(type))   return new AnnotatedArrayTypeImpl(type,currentLoc,actualTypeAnnos,allOnSameTarget,decl);  if (type instanceof Class) {    return new AnnotatedTypeBaseImpl(type,addNesting(type,currentLoc),actualTypeAnnos,allOnSameTarget,decl);  } else   if (type instanceof TypeVariable) {    return new AnnotatedTypeVariableImpl((TypeVariable)type,currentLoc,actualTypeAnnos,allOnSameTarget,decl);  } else   if (type instanceof ParameterizedType) {    return new AnnotatedParameterizedTypeImpl((ParameterizedType)type,addNesting(type,currentLoc),actualTypeAnnos,allOnSameTarget,decl);  } else   if (type instanceof WildcardType) {    return new AnnotatedWildcardTypeImpl((WildcardType)type,currentLoc,actualTypeAnnos,allOnSameTarget,decl);  }  throw new AssertionError("Unknown instance of Type: " + type + "\nThis should not happen.");}  }
class C{  public String[] includePaths(){  return includePaths;}  }
class C{  private void parseHeader(){  if (mediaFormat == null) {    mediaFormat=isEac3 ? Ac3Util.parseEac3SyncframeFormat(headerScratchBits,null,C.UNKNOWN_TIME_US,null) : Ac3Util.parseAc3SyncframeFormat(headerScratchBits,null,C.UNKNOWN_TIME_US,null);    output.format(mediaFormat);  }  sampleSize=isEac3 ? Ac3Util.parseEAc3SyncframeSize(headerScratchBits.data) : Ac3Util.parseAc3SyncframeSize(headerScratchBits.data);  int audioSamplesPerSyncframe=isEac3 ? Ac3Util.parseEAc3SyncframeAudioSampleCount(headerScratchBits.data) : Ac3Util.getAc3SyncframeAudioSampleCount();  sampleDurationUs=(int)(C.MICROS_PER_SECOND * audioSamplesPerSyncframe / mediaFormat.sampleRate);}  }
class C{  public static @NonNull SidesAnimation create(@Direction int direction,boolean enter,long duration){switch (direction) {case UP:case DOWN:    return new VerticalCubeAnimation(direction,enter,duration);case LEFT:case RIGHT:default :  return new HorizontalCubeAnimation(direction,enter,duration);}}  }
class C{  public GeoRssBox(Double lowerLat,Double lowerLon,Double upperLat,Double upperLon){  this(new GeoRssPoint(lowerLat,lowerLon),new GeoRssPoint(upperLat,upperLon));}  }
class C{  private static float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt(x * x + y * y);}  }
class C{  @Override public void encode(BufferedImage bufferedImage,OutputStream outputStream) throws IOException {  ParamChecks.nullNotPermitted(bufferedImage,"bufferedImage");  ParamChecks.nullNotPermitted(outputStream,"outputStream");  ImageIO.write(bufferedImage,ImageFormat.PNG,outputStream);}  }
class C{  public RouterURL(String url,Properties info) throws SQLException {  parseUrl(url,info);}  }
class C{  private void printInvoices(){  if (m_ids == null)   return;  if (!FDialog.ask(m_WindowNo,this,"PrintInvoices"))   return;  m_messageText.append("<p>").append(Msg.getMsg(Env.getCtx(),"PrintInvoices")).append("</p>");  message.setContent(m_messageText.toString());  showBusyDialog();  Clients.response(new AuEcho(this,"onPrintInvoices",null));}  }
class C{  public FieldPosition(int field){  this.field=field;}  }
class C{  public void addDirtyRegion(DirtyRegion dr){  final DirtyRegion lastDR=getLastDirtyRegion();  boolean wasMerged=false;  if (lastDR != null) {    if (nullSafeStringsEquals(lastDR.getType(),dr.getType())) {      if (DirtyRegion.INSERT.equals(lastDR.getType())) {        if (lastDR.getOffset() + lastDR.getLength() == dr.getOffset()) {          lastDR.mergeWith(dr);          wasMerged=true;        }      } else       if (DirtyRegion.REMOVE.equals(lastDR.getType())) {        if (dr.getOffset() + dr.getLength() == lastDR.getOffset()) {          lastDR.mergeWith(dr);          wasMerged=true;        }      }    }  }  if (!wasMerged) {    fDirtyRegions.add(dr);  }}  }
class C{  public int numSources(){  return NUM_SOURCES;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public synchronized boolean performAddOnWay(final float x,final float y) throws OsmIllegalOperationException {  return performAddOnWay(null,x,y);}  }
class C{  public static Test suite(){  TestSuite suite=new TestSuite("RootSuite");  suite.addTest(com.pironet.tda.TdaSuite.suite());  return suite;}  }
class C{  private void openStartTag() throws XMLStreamException {  _currentEle.setState(ELEMENT_STARTTAG_OPEN);  _writer.write(OPEN_START_TAG);}  }
class C{  public static void modify(ByteSource input,ByteSink output,Map<String,Function<byte[],byte[]>> toModify,Predicate<String> toOmit) throws IOException {  try (ZipInputStream zipInput=new ZipInputStream(input.openBufferedStream());ZipOutputStream zipOutput=new ZipOutputStream(output.openBufferedStream())){    while (true) {      ZipEntry entry=zipInput.getNextEntry();      if (entry == null) {        break;      }      Function<byte[],byte[]> replacement=toModify.get(entry.getName());      if (replacement != null) {        byte[] clean=ByteStreams.toByteArray(zipInput);        byte[] modified=replacement.apply(clean);        try (InputStream replacementStream=new ByteArrayInputStream(modified)){          ZipEntry newEntry=new ZipEntry(entry.getName());          newEntry.setComment(entry.getComment());          newEntry.setExtra(entry.getExtra());          newEntry.setMethod(entry.getMethod());          newEntry.setTime(entry.getTime());          zipOutput.putNextEntry(newEntry);          copy(replacementStream,zipOutput);        }       } else       if (!toOmit.test(entry.getName())) {        ZipEntry newEntry=new ZipEntry(entry);        newEntry.setCompressedSize(-1);        zipOutput.putNextEntry(newEntry);        copy(zipInput,zipOutput);      }      zipInput.closeEntry();      zipOutput.closeEntry();    }  } }  }
class C{  private <K>ClusterNode primary(AffinityInfo aff,K key) throws IgniteCheckedException {  int part=partition(null,key,aff);  Collection<ClusterNode> nodes=aff.assignment.get(part);  if (F.isEmpty(nodes))   throw new IgniteCheckedException("Failed to get affinity nodes [aff=" + aff + ", key="+ key+ ']');  return nodes.iterator().next();}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> createFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to save Foo : {}",foo);  if (foo.getId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("foo","idexists","A new foo cannot already have an ID")).body(null);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.created(new URI("/api/foos/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("foo",result.getId().toString())).body(result);}  }
class C{  @Override public JAMonListener copy(){  return new Log4jBufferListener(getName(),getBufferList().copy(),isLog4jMonKey);}  }
class C{  public void testComputeSignificanceDoesntAlterAverage(MultiInfoCalculator miCalc,int dimensions,int timeSteps) throws Exception {  miCalc.initialise(dimensions);  RandomGenerator rg=new RandomGenerator();  double[][] data=rg.generateNormalData(timeSteps,dimensions,0,1);  miCalc.setObservations(data);  double mi=miCalc.computeAverageLocalOfObservations();  System.out.printf("Average was %.5f\n",mi);  EmpiricalMeasurementDistribution measDist=miCalc.computeSignificance(2);  assertFalse(mi == measDist.distribution[0]);  for (int i=0; i < 10; i++) {    double lastAverage=miCalc.getLastAverage();    assertEquals(mi,lastAverage);    double averageCheck1=miCalc.computeAverageLocalOfObservations();    assertEquals(mi,averageCheck1);  }}  }
class C{  public static final double[] plusEquals(final double[] v1,final double[] v2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  for (int i=0; i < v1.length; i++) {    v1[i]+=v2[i];  }  return v1;}  }
class C{  public StoragePolicyCreateRequest createStoragePolicyCreateRequest(StoragePolicyKey storagePolicyKey,String storagePolicyRuleType,Integer storagePolicyRuleValue,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,String storageName,String destinationStorageName,String storagePolicyStatus){  StoragePolicyCreateRequest request=new StoragePolicyCreateRequest();  request.setStoragePolicyKey(storagePolicyKey);  StoragePolicyRule storagePolicyRule=new StoragePolicyRule();  request.setStoragePolicyRule(storagePolicyRule);  storagePolicyRule.setRuleType(storagePolicyRuleType);  storagePolicyRule.setRuleValue(storagePolicyRuleValue);  StoragePolicyFilter storagePolicyFilter=new StoragePolicyFilter();  request.setStoragePolicyFilter(storagePolicyFilter);  storagePolicyFilter.setNamespace(businessObjectDefinitionNamespace);  storagePolicyFilter.setBusinessObjectDefinitionName(businessObjectDefinitionName);  storagePolicyFilter.setBusinessObjectFormatUsage(businessObjectFormatUsage);  storagePolicyFilter.setBusinessObjectFormatFileType(businessObjectFormatFileType);  storagePolicyFilter.setStorageName(storageName);  StoragePolicyTransition storagePolicyTransition=new StoragePolicyTransition();  request.setStoragePolicyTransition(storagePolicyTransition);  storagePolicyTransition.setDestinationStorageName(destinationStorageName);  request.setStatus(storagePolicyStatus);  return request;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Map) {    Map<?,?> map=(Map)object;    if (size() != map.size()) {      return false;    }    Set<Map.Entry<K,V>> set=entrySet();    return set.equals(map.entrySet());  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case ImPackage.SYMBOL_TABLE_ENTRY__ELEMENTS_OF_THIS_NAME:  return elementsOfThisName != null && !elementsOfThisName.isEmpty();case ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS:return referencingElements != null && !referencingElements.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.STATE_SWITCH__CASES:    return getCases();case SexecPackage.STATE_SWITCH__STATE_CONFIGURATION_IDX:  return getStateConfigurationIdx();case SexecPackage.STATE_SWITCH__HISTORY_REGION:if (resolve) return getHistoryRegion();return basicGetHistoryRegion();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void putFloat(String key,float value){  editor.putFloat(key,value);  editor.commit();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isOpen(){  return open;}  }
class C{  public void addListener(final IDebugPerspectiveModelListener listener){  m_listeners.addListener(listener);}  }
class C{  public Extensions(){  this.extensions=null;}  }
class C{  public ByteOrder order(){  ByteOrder bo=_buf.order();  return bo;}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  public NegativeArraySizeException(){}  }
class C{  public EvictingList(int limit){  this.limit=limit;}  }
class C{  public static void checkTracksNumber(int number){  long startTime=System.currentTimeMillis();  int trackNumber=EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount();  while (System.currentTimeMillis() - startTime < MAX_TIME_TO_WAIT_SYNC) {    if (trackNumber == number) {      return;    }    trackNumber=EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount();    Log.d(TAG,trackNumber + ":" + number);  }  Assert.assertEquals(trackNumber,number);}  }
class C{  private ArrayList<ClusterCandidate> hardClustering(WritableDataStore<double[]> probClusterIGivenX,List<Signature> clusterCores,DBIDs dbids){  final int k=clusterCores.size();  ArrayList<ClusterCandidate> candidates=new ArrayList<>();  for (  Signature sig : clusterCores) {    candidates.add(new ClusterCandidate(sig));  }  for (DBIDIter iter=dbids.iter(); iter.valid(); iter.advance()) {    final double[] probs=probClusterIGivenX.get(iter);    int bestCluster=0;    double bestProbability=probs[0];    for (int c=1; c < k; ++c) {      if (probs[c] > bestProbability) {        bestCluster=c;        bestProbability=probs[c];      }    }    candidates.get(bestCluster).ids.add(iter);  }  return candidates;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  private void registerConnectivity(){  connectivityReceiver=new BroadcastMonitorConnectivity();  connectivityReceiver.start();  connectivityReceiver.register();}  }
class C{  public Blade route(String path,Class<?> clazz,String method,HttpMethod httpMethod){  routers.route(path,clazz,method,httpMethod);  return this;}  }
class C{  public void testMultivariateMIforRandomGaussianVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/10ColsRandomGaussian-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,4,10,15};  double[] expectedFromMILCA_2={0.00815609,0.00250864,0.00035825,0.00172174,0.00033354};  System.out.println("Kraskov comparison 8 - multivariate uncorrelated Gaussian data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1,2,3,4}),MatrixUtils.selectColumns(data,new int[]{5,6,7,8,9}),kNNs,expectedFromMILCA_2);}  }
class C{  public static int[] allRow(int[][] m){  int[] result=new int[m.length];  for (int i=0; i < result.length; i++) {    result[i]=-1;  }  int[] count=new int[2];  for (int i=0; i < m.length; i++) {    count[0]=0;    count[1]=0;    for (int j=0; j < m[i].length; j++) {      count[m[i][j]]++;      if (count[0] < j + 1 && count[1] < j + 1) {        break;      }    }    if (count[0] >= m.length || count[1] >= m.length)     result[i]=count[0] > count[1] ? 0 : 1;  }  return result;}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAssociationClassContent_();}  }
class C{  public JdbcTest(int id){  super();  m_myId=id;}  }
class C{  public Pattern(String regex,String flags) throws PatternSyntaxException {  internalCompile(regex,parseFlags(flags));}  }
class C{  public static String validatePassword(String value){  ViPRSystemClient client=BourneUtil.getSysClient();  try {    String decrypted=decryptedValue(value);    client.password().validate(decrypted);  } catch (  ServiceErrorException e) {    if (e.getHttpCode() == 400 && e.getServiceError() != null) {      return e.getServiceError().getDetailedMessage();    }  }catch (  Exception e) {    Logger.error(e,"Error executing api call to validate password");    return MessagesUtils.get("setup.password.notValid");  }  return StringUtils.EMPTY;}  }
class C{  public void testConsume(){  AtomicInteger sum=new AtomicInteger();  SubmissionPublisher<Integer> p=basicPublisher();  CompletableFuture<Void> f=p.consume(null);  int n=20;  for (int i=1; i <= n; ++i)   p.submit(i);  p.close();  f.join();  assertEquals((n * (n + 1)) / 2,sum.get());}  }
class C{  protected void checkNotExist(IgfsImpl igfs,IgfsPath... paths) throws Exception {  for (  IgfsPath path : paths)   assert !igfs.exists(path) : "Path exists [igfs=" + igfs.name() + ", path="+ path+ ']';}  }
class C{  private void scanAndLock(Object key,int hash){  HashEntry<K,V> first=entryForHash(this,hash);  HashEntry<K,V> e=first;  int retries=-1;  while (!tryLock()) {    HashEntry<K,V> f;    if (retries < 0) {      if (e == null || key.equals(e.key))       retries=0; else       e=e.next;    } else     if (++retries > MAX_SCAN_RETRIES) {      lock();      break;    } else     if ((retries & 1) == 0 && (f=entryForHash(this,hash)) != first) {      e=first=f;      retries=-1;    }  }}  }
class C{  public DateMidnight withEra(int era){  return withMillis(getChronology().era().set(getMillis(),era));}  }
class C{  public NTriplesWriter(Writer writer){  this.writer=writer;  writingStarted=false;}  }
class C{  public static List<Cell> intArrayToPattern(final int[] array,final CellManager cellManager){  final List<Cell> result=new ArrayList<>();  if (array.length == 0) {    return result;  }  for (int i=0, j=array.length; i < j; i+=2) {    final int row=array[i];    final int column=array[i + 1];    final Cell cell=cellManager.get(row,column);    result.add(cell);  }  return result;}  }
class C{  protected final String format(double totalMillis,String event,String reason){  return String.format("[%7sms]%s %-6s %s - %s",String.format("%.3f",totalMillis),MainThread.isMainThread() ? "[ui]" : "",event + ":",mName,reason);}  }
class C{  public void monitorExit(){  mv.visitInsn(Opcodes.MONITOREXIT);}  }
class C{  @Override public void debugPrint(PrintStream out) throws AdeException {  super.debugPrint(out);  out.println("Trained=" + m_trained);  out.println("Total interval count=" + m_totalIntervalCount);  out.println("min lambda=" + m_minLambda);  for (  Entry<String,MsgData> msg : m_msgData.entrySet()) {    final MsgData value=msg.getValue();    out.println(msg.getKey() + " : " + value);  }}  }
class C{  void placeBlockLine(int[] par1ArrayOfInteger,int[] par2ArrayOfInteger,Block par3){  int[] var4=new int[]{0,0,0};  byte var5=0;  byte var6;  for (var6=0; var5 < 3; ++var5) {    var4[var5]=par2ArrayOfInteger[var5] - par1ArrayOfInteger[var5];    if (Math.abs(var4[var5]) > Math.abs(var4[var6])) {      var6=var5;    }  }  if (var4[var6] != 0) {    byte var7=otherCoordPairs[var6];    byte var8=otherCoordPairs[var6 + 3];    byte var9;    if (var4[var6] > 0) {      var9=1;    } else {      var9=-1;    }    double var10=(double)var4[var7] / (double)var4[var6];    double var12=(double)var4[var8] / (double)var4[var6];    int[] var14=new int[]{0,0,0};    int var15=0;    for (int var16=var4[var6] + var9; var15 != var16; var15+=var9) {      var14[var6]=MathHelper.floor_double((double)(par1ArrayOfInteger[var6] + var15) + 0.5D);      var14[var7]=MathHelper.floor_double((double)par1ArrayOfInteger[var7] + (double)var15 * var10 + 0.5D);      var14[var8]=MathHelper.floor_double((double)par1ArrayOfInteger[var8] + (double)var15 * var12 + 0.5D);      int var17=0;      int var18=Math.abs(var14[0] - par1ArrayOfInteger[0]);      int var19=Math.abs(var14[2] - par1ArrayOfInteger[2]);      int var20=Math.max(var18,var19);      if (var20 > 0) {        if (var18 == var20) {          var17=4;        } else         if (var19 == var20) {          var17=8;        }      }      worldObj.setBlock(var14[0],var14[1],var14[2],par3,0,0);    }  }}  }
class C{  @Override public void stop(){  if (!isRunning) {    return;  }  sensorManager.unregisterListener(sensorEventListener);  sensorEventListener=null;  sensorLooper.quit();  sensorLooper=null;  isRunning=false;}  }
class C{  public Builder withId(final int id){  this.id=id;  return this;}  }
class C{  public void testFilterUnpackedMulti() throws InvalidAdviceException {  BaggageAPIForTest baggage=new BaggageAPIForTest();  baggage.put("bag1",new Object[][]{{"v1","v2"},{"v3","v4"},{"v5","v6"}});  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe("a","b").unpack("bag1","c","d").where("\"{}\"==\"v1\"","c").emit("test1","a","b","c","d").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise("vva","vvb");  results.expectTuple("vva","vvb","v1","v2");  results.check();  assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);}  }
class C{  public TransactionID sendRequest(Request request,TransportAddress sendTo,DatagramSocket sendThrough,ResponseCollector collector) throws IOException, IllegalArgumentException {  TransportAddress sendThroughAddr=new TransportAddress(sendThrough.getLocalAddress(),sendThrough.getLocalPort(),Transport.UDP);  return sendRequest(request,sendTo,sendThroughAddr,collector);}  }
class C{  private static String typeName(Object argument){  Class<?> aClass=argument.getClass();  String pkgName=aClass.getPackage() == null ? "" : aClass.getPackage().getName();  boolean useShort=DEFAULT_IMPORT_PKGS.contains(pkgName) || DEFAULT_IMPORT_CLASSES.contains(aClass.getName());  return useShort ? aClass.getSimpleName() : aClass.getName();}  }
class C{  public static <T2>Tuple2io<T2> tuple(int v1,T2 v2){  return new Tuple2io<>(v1,v2);}  }
class C{  public void generateInstances() throws Exception {  int[] order=getOrder();  for (int iInstance=0; iInstance < m_nNrOfInstances; iInstance++) {    int nNrOfAtts=m_Instances.numAttributes();    Instance instance=new DenseInstance(nNrOfAtts);    instance.setDataset(m_Instances);    for (int iAtt2=0; iAtt2 < nNrOfAtts; iAtt2++) {      int iAtt=order[iAtt2];      double iCPT=0;      for (int iParent=0; iParent < m_ParentSets[iAtt].getNrOfParents(); iParent++) {        int nParent=m_ParentSets[iAtt].getParent(iParent);        iCPT=iCPT * m_Instances.attribute(nParent).numValues() + instance.value(nParent);      }      double fRandom=random.nextInt(1000) / 1000.0f;      int iValue=0;      while (fRandom > m_Distributions[iAtt][(int)iCPT].getProbability(iValue)) {        fRandom=fRandom - m_Distributions[iAtt][(int)iCPT].getProbability(iValue);        iValue++;      }      instance.setValue(iAtt,iValue);    }    m_Instances.add(instance);  }}  }
class C{  public void addAxis(Axis axis){  if (axis.isHorizontal())   xAxisList.add(axis); else   yAxisList.add(axis);  plotArea.addGrid(new Grid(axis));  add(axis);  axis.setXyGraph(this);  revalidate();}  }
class C{  public static long scalarProduct(final Modulo2Equation e,long[] solution){  long sum=0;  for (IntListIterator iterator=e.variables.iterator(); iterator.hasNext(); )   sum^=solution[iterator.nextInt()];  return sum;}  }
class C{  public void clearMappingAccessors(){  m_mappingAccessors.clear();  m_embeddedIdAccessor=null;}  }
class C{  private final void _writeCustomStringSegment2(final char[] cbuf,int offset,final int end) throws IOException, JsonGenerationException {  if ((_outputTail + 6 * (end - offset)) > _outputEnd) {    _flushBuffer();  }  int outputPtr=_outputTail;  final byte[] outputBuffer=_outputBuffer;  final int[] escCodes=_outputEscapes;  final int maxUnescaped=(_maximumNonEscapedChar <= 0) ? 0xFFFF : _maximumNonEscapedChar;  final CharacterEscapes customEscapes=_characterEscapes;  while (offset < end) {    int ch=cbuf[offset++];    if (ch <= 0x7F) {      if (escCodes[ch] == 0) {        outputBuffer[outputPtr++]=(byte)ch;        continue;      }      int escape=escCodes[ch];      if (escape > 0) {        outputBuffer[outputPtr++]=BYTE_BACKSLASH;        outputBuffer[outputPtr++]=(byte)escape;      } else       if (escape == CharacterEscapes.ESCAPE_CUSTOM) {        SerializableString esc=customEscapes.getEscapeSequence(ch);        if (esc == null) {          throw new JsonGenerationException("Invalid custom escape definitions; custom escape not found for character code 0x" + Integer.toHexString(ch) + ", although was supposed to have one");        }        outputPtr=_writeCustomEscape(outputBuffer,outputPtr,esc,end - offset);      } else {        outputPtr=_writeGenericEscape(ch,outputPtr);      }      continue;    }    if (ch > maxUnescaped) {      outputPtr=_writeGenericEscape(ch,outputPtr);      continue;    }    SerializableString esc=customEscapes.getEscapeSequence(ch);    if (esc != null) {      outputPtr=_writeCustomEscape(outputBuffer,outputPtr,esc,end - offset);      continue;    }    if (ch <= 0x7FF) {      outputBuffer[outputPtr++]=(byte)(0xc0 | (ch >> 6));      outputBuffer[outputPtr++]=(byte)(0x80 | (ch & 0x3f));    } else {      outputPtr=_outputMultiByteChar(ch,outputPtr);    }  }  _outputTail=outputPtr;}  }
class C{  public static String gensalt(final int log_rounds,final SecureRandom random){  final StringBuffer rs=new StringBuffer();  final byte rnd[]=new byte[BCRYPT_SALT_LEN];  random.nextBytes(rnd);  rs.append("$2a$");  if (log_rounds < 10) {    rs.append("0");  }  if (log_rounds > 30) {    throw new IllegalArgumentException("log_rounds exceeds maximum (30)");  }  rs.append(Integer.toString(log_rounds));  rs.append("$");  rs.append(encode_base64(rnd,rnd.length));  return rs.toString();}  }
class C{  @Override public boolean equals(Object otherObj){  if (otherObj == null || !otherObj.getClass().equals(TestDiagnostic.class)) {    return false;  }  final TestDiagnostic other=(TestDiagnostic)otherObj;  return other.lineNumber == lineNumber && other.kind == this.kind && other.message.equals(this.message) && other.filename.equals(this.filename);}  }
class C{  public List GetLdapChildList(String nodeDn,String entidad) throws Exception {  List hijos=new ArrayList();  String searchDn=getLdapSearchText(nodeDn);  LdapConnCfg connCfg;  LdapConnection ldapConn=null;  try {    connCfg=UasConfigUtilLdap.createLdapConnConfig(entidad);    ldapConn=new LdapConnection();    ldapConn.open(connCfg);    LdapSearchEx search=null;    search=new LdapSearchEx();    search.initialize(ldapConn,searchDn,LdapScope.ONELEVEL,getFilter(),null,maxChildrenLdap);    search.execute();    while (search.next()) {      String dn=search.getEntryDn();      Attribute objectClass=search.getAttributeValuesLowercase(LdapAttribute.getObjectClassAttributeName(ldapConn));      Info info=new Info(dn,objectClass);      hijos.add(info);    }    search.release();  } catch (  Exception e) {    e.printStackTrace();  } finally {    try {      ldapConn.close();    } catch (    Exception e) {      e.printStackTrace();    }  }  return hijos;}  }
class C{  private void deployJarFilesForRegionAlter() throws IOException {  ClassBuilder classBuilder=new ClassBuilder();  final File jarFile1=new File(new File(".").getAbsolutePath(),"testAlterRegion1.jar");  this.filesToBeDeleted.add(jarFile1.getAbsolutePath());  final File jarFile2=new File(new File(".").getAbsolutePath(),"testAlterRegion2.jar");  this.filesToBeDeleted.add(jarFile2.getAbsolutePath());  final File jarFile3=new File(new File(".").getAbsolutePath(),"testAlterRegion3.jar");  this.filesToBeDeleted.add(jarFile3.getAbsolutePath());  final File jarFile4=new File(new File(".").getAbsolutePath(),"testAlterRegion4.jar");  this.filesToBeDeleted.add(jarFile4.getAbsolutePath());  final File jarFile5=new File(new File(".").getAbsolutePath(),"testAlterRegion5.jar");  this.filesToBeDeleted.add(jarFile5.getAbsolutePath());  byte[] jarBytes=classBuilder.createJarFromClassContent("com/cadrdunit/RegionAlterCacheListenerA","package com.cadrdunit;" + "import org.apache.geode.cache.util.CacheListenerAdapter;" + "public class RegionAlterCacheListenerA extends CacheListenerAdapter {}");  writeJarBytesToFile(jarFile1,jarBytes);  CommandResult cmdResult=executeCommand("deploy --jar=testAlterRegion1.jar");  assertEquals(Result.Status.OK,cmdResult.getStatus());  jarBytes=classBuilder.createJarFromClassContent("com/cadrdunit/RegionAlterCacheListenerB","package com.cadrdunit;" + "import org.apache.geode.cache.util.CacheListenerAdapter;" + "public class RegionAlterCacheListenerB extends CacheListenerAdapter {}");  writeJarBytesToFile(jarFile2,jarBytes);  cmdResult=executeCommand("deploy --jar=testAlterRegion2.jar");  assertEquals(Result.Status.OK,cmdResult.getStatus());  jarBytes=classBuilder.createJarFromClassContent("com/cadrdunit/RegionAlterCacheListenerC","package com.cadrdunit;" + "import org.apache.geode.cache.util.CacheListenerAdapter;" + "public class RegionAlterCacheListenerC extends CacheListenerAdapter {}");  writeJarBytesToFile(jarFile3,jarBytes);  cmdResult=executeCommand("deploy --jar=testAlterRegion3.jar");  assertEquals(Result.Status.OK,cmdResult.getStatus());  jarBytes=classBuilder.createJarFromClassContent("com/cadrdunit/RegionAlterCacheLoader","package com.cadrdunit;" + "import org.apache.geode.cache.CacheLoader;" + "import org.apache.geode.cache.CacheLoaderException;"+ "import org.apache.geode.cache.LoaderHelper;"+ "public class RegionAlterCacheLoader implements CacheLoader {"+ "public void close() {}"+ "public Object load(LoaderHelper helper) throws CacheLoaderException {return null;}}");  writeJarBytesToFile(jarFile4,jarBytes);  cmdResult=executeCommand("deploy --jar=testAlterRegion4.jar");  assertEquals(Result.Status.OK,cmdResult.getStatus());  jarBytes=classBuilder.createJarFromClassContent("com/cadrdunit/RegionAlterCacheWriter","package com.cadrdunit;" + "import org.apache.geode.cache.util.CacheWriterAdapter;" + "public class RegionAlterCacheWriter extends CacheWriterAdapter {}");  writeJarBytesToFile(jarFile5,jarBytes);  cmdResult=executeCommand("deploy --jar=testAlterRegion5.jar");  assertEquals(Result.Status.OK,cmdResult.getStatus());}  }
class C{  public static void main(String[] args) throws Exception {  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"processor-kafka-streams-instrumented");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.Double().getClass().getName());  config.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"latest");  StateStoreSupplier fastStore=Stores.create("FAST-store").withStringKeys().withDoubleValues().inMemory().build();  TopologyBuilder builder=new TopologyBuilder();  builder.addSource("messages-source",Serdes.String().deserializer(),Serdes.Double().deserializer(),"messages-instrumented").addProcessor("FAST-processor",null,"messages-source").addStateStore(fastStore,"FAST-processor").addSink("FAST-sink","fast-avgs-instrumented",Serdes.String().serializer(),Serdes.Double().serializer(),"FAST-processor");  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();}  }
class C{  public ActivityObject(int id){  this.id=id;}  }
class C{  public void print(char[] charArray){  print(new String(charArray,0,charArray.length));}  }
class C{  public final Graph search(){  return search(independenceTest.getVariables());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetfirstchild.class,args);}  }
class C{  public Node(Node other){  __isset_bitfield=other.__isset_bitfield;  this.nodeId=other.nodeId;  this.domainId=other.domainId;  if (other.isSetHostname()) {    this.hostname=other.hostname;  }  this.port=other.port;}  }
class C{  public Object pack(){  if (collection) {    List l=(List)value;    if (Types.isArray(type)) {      Object[] o=(Object[])Array.newInstance(itemType,l.size());      l.toArray(o);      return o;    }  }  return value;}  }
class C{  static Instruction checkcast(Instruction s,IR ir){  Operand ref=TypeCheck.getClearRef(s);  TypeReference LHStype=TypeCheck.getType(s).getTypeRef();  RegisterOperand guard=ir.regpool.makeTempValidation();  Instruction nullCond=IfCmp.create(REF_IFCMP,guard,ref.copy(),new NullConstantOperand(),ConditionOperand.EQUAL(),null,new BranchProfileOperand());  s.insertBefore(nullCond);  BasicBlock myBlock=s.getBasicBlock();  BasicBlock failBlock=myBlock.createSubBlock(s.getBytecodeIndex(),ir,.0001f);  BasicBlock instanceOfBlock=myBlock.splitNodeAt(nullCond,ir);  BasicBlock succBlock=instanceOfBlock.splitNodeAt(s,ir);  succBlock.firstInstruction().insertAfter(Move.create(REF_MOVE,TypeCheck.getClearResult(s),ref.copy()));  IfCmp.setTarget(nullCond,succBlock.makeJumpTarget());  myBlock.insertOut(instanceOfBlock);  myBlock.insertOut(succBlock);  instanceOfBlock.insertOut(failBlock);  instanceOfBlock.insertOut(succBlock);  ir.cfg.linkInCodeOrder(myBlock,instanceOfBlock);  ir.cfg.linkInCodeOrder(instanceOfBlock,succBlock);  ir.cfg.addLastInCodeOrder(failBlock);  Instruction raiseError=Trap.create(TRAP,null,TrapCodeOperand.CheckCast());  raiseError.copyPosition(s);  failBlock.appendInstruction(raiseError);  Operand RHStib=getTIB(s,ir,ref,guard.copyD2U());  return generateBranchingTypeCheck(s,ir,ref.copy(),LHStype,RHStib,succBlock,failBlock,guard.copyRO(),BranchProfileOperand.never());}  }
class C{  public Scope(int scope){  this.scope=scope;}  }
class C{  @Override public void optimize(int maxSegments){  if (this.server == null)   return;synchronized (this.server) {    try {      new UpdateRequest().setAction(UpdateRequest.ACTION.OPTIMIZE,true,true,maxSegments,true).process(this.server);    } catch (    final Throwable e) {      clearCaches();      ConcurrentLog.logException(e);    }  }}  }
class C{  public static void stepBlock(final JFrame parent,final IDebugger debugger,final ZyGraph graph){  checkArguments(parent,debugger,graph);  if (!debugger.isConnected()) {    return;  }  final TargetProcessThread activeThread=debugger.getProcessManager().getActiveThread();  if (activeThread == null) {    return;  }  final RelocatedAddress currentAddress=activeThread.getCurrentAddress();  if (currentAddress == null) {    CMessageBox.showError(parent,"Could not step because the selected thread is not suspended");    return;  }  final UnrelocatedAddress oldAddress=debugger.memoryToFile(currentAddress);  final Set<BreakpointAddress> relocatedBlockAddresses=CStepBlockHelper.getNextBlocks(graph,oldAddress);  if (relocatedBlockAddresses.isEmpty()) {    CMessageBox.showError(parent,"Couldn't step to the next block");    return;  } else {    debugger.getProcessManager().setActiveThread(null);    final Set<BreakpointAddress> setBreakpoints=new HashSet<BreakpointAddress>();    debugger.getBreakpointManager().addBreakpoints(BreakpointType.STEP,relocatedBlockAddresses);    setBreakpoints.addAll(relocatedBlockAddresses);    try {      debugger.resume();    } catch (    final DebugExceptionWrapper e) {      debugger.getProcessManager().setActiveThread(activeThread);      CUtilityFunctions.logException(e);      final String innerMessage="E00045: " + "Could not send step block command to the debug client";      final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the step block command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public void add(final ConversationStates state,final Collection<String> triggerStrings,final ChatCondition condition,final ConversationStates nextState,final String reply,final ChatAction action,final String label){  engine.add(state,triggerStrings,condition,false,nextState,reply,action,label);}  }
class C{  public void reverse(){  final ArrayList<Animator> animators=mAnimatedVectorState.mAnimators;  final int size=animators.size();  for (int i=0; i < size; i++) {    final Animator animator=animators.get(i);    if (canReverse(animator)) {      reverse(animator);    } else {      Log.w(LOGTAG,"AnimatedVectorDrawable can't reverse()");    }  }}  }
class C{  void createContactsAndHosts() throws Exception {  DateTime startTime=DateTime.parse("2000-06-01T00:00:00Z");  assertCommandAndResponse("contact_create_sh8013.xml",ImmutableMap.<String,String>of(),"contact_create_response_sh8013.xml",ImmutableMap.of("CRDATE","2000-06-01T00:00:00Z"),startTime);  assertCommandAndResponse("contact_create_jd1234.xml","contact_create_response_jd1234.xml",startTime.plusMinutes(1));  assertCommandAndResponse("host_create.xml","host_create_response.xml",startTime.plusMinutes(2));  assertCommandAndResponse("host_create2.xml","host_create2_response.xml",startTime.plusMinutes(3));}  }
class C{  public void insertElementAt(MarkData m,int index){  oneMark[0]=m;  replace(index,0,oneMark,1);}  }
class C{  public String toString(CSSEngine eng){  StringBuffer sb=new StringBuffer();  sb.append("@media");  if (mediaList != null) {    for (int i=0; i < mediaList.getLength(); i++) {      sb.append(' ');      sb.append(mediaList.item(i));    }  }  sb.append(" {\n");  for (int i=0; i < size; i++) {    sb.append(rules[i].toString(eng));  }  sb.append("}\n");  return sb.toString();}  }
class C{  public static <E>ImmutableList<E> copyOf(Iterator<? extends E> elements){  if (!elements.hasNext()) {    return of();  }  E first=elements.next();  if (!elements.hasNext()) {    return of(first);  } else {    return new ImmutableList.Builder<E>().add(first).addAll(elements).build();  }}  }
class C{  public X509CRLEntryImpl(TBSCertList.RevokedCertificate rcert,X500Principal issuer){  this.rcert=rcert;  this.extensions=rcert.getCrlEntryExtensions();  this.issuer=issuer;}  }
class C{  private boolean correctResult(){  return evaluateExpression() == 24;}  }
class C{  public boolean supportsSelectForUpdate() throws SQLException {  return true;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.418 -0500",hash_original_method="28229552049A2A2DB18166A64CE88A0A",hash_generated_method="28229552049A2A2DB18166A64CE88A0A") void closeConnection(){  try {    if (mHttpClientConnection != null && mHttpClientConnection.isOpen()) {      mHttpClientConnection.close();    }  } catch (  IOException e) {    if (HttpLog.LOGV)     HttpLog.v("closeConnection(): failed closing connection " + mHost);    e.printStackTrace();  }}  }
class C{  public static <NodeType extends IGraphNode<NodeType>>Pair<Tree<NodeType>,HashMap<NodeType,ITreeNode<NodeType>>> calculate(final Collection<NodeType> nodes,final NodeType rootNode) throws MalformedGraphException {  Preconditions.checkNotNull(nodes,"Error: Nodes argument can not be null");  if (nodes.size() == 0) {    return new Pair<Tree<NodeType>,HashMap<NodeType,ITreeNode<NodeType>>>(null,null);  }  Preconditions.checkNotNull(rootNode,"Error: Root node argument can not be null");  Preconditions.checkArgument(nodes.contains(rootNode),"Error: Root node is not part of the graph");  int entryNodes=0;  for (  final NodeType node : nodes) {    if (node.getParents().size() == 0) {      entryNodes++;    }  }  if (entryNodes > 1) {    throw new MalformedGraphException("Error: Can not calculate dominator trees for graphs with more than one entry node");  }  final HashMap<NodeType,Set<NodeType>> bucket=new HashMap<NodeType,Set<NodeType>>();  final HashMap<NodeType,NodeType> idom=new HashMap<NodeType,NodeType>();  final HashMap<NodeType,NodeType> best=new HashMap<NodeType,NodeType>();  final HashMap<NodeType,NodeType> semi=new HashMap<NodeType,NodeType>();  final HashMap<NodeType,NodeType> ancestor=new HashMap<NodeType,NodeType>();  final HashMap<NodeType,NodeType> samedom=new HashMap<NodeType,NodeType>();  final HashMap<Integer,NodeType> vertex=new HashMap<Integer,NodeType>();  final HashMap<NodeType,NodeType> parents=new HashMap<NodeType,NodeType>();  final HashMap<NodeType,Integer> dfnum=new HashMap<NodeType,Integer>();  for (  final NodeType node : nodes) {    bucket.put(node,new HashSet<NodeType>());    dfnum.put(node,-1);    semi.put(node,null);    ancestor.put(node,null);    idom.put(node,null);    samedom.put(node,null);  }  final int n=depthFirstSearch(null,rootNode,dfnum,vertex,parents,0);  for (int i=n; i >= 1; i--) {    final NodeType node=vertex.get(i);    final NodeType parent=parents.get(node);    NodeType s=parent;    for (    final NodeType v : node.getParents()) {      NodeType temps=null;      if (dfnum.get(v) <= dfnum.get(node)) {        temps=v;      } else {        temps=semi.get(getAncestorWithLowestSemi(v,dfnum,semi,ancestor,best));      }      if (dfnum.get(temps) < dfnum.get(s)) {        s=temps;      }    }    semi.put(node,s);    bucket.get(s).add(node);    link(parent,node,ancestor,best);    for (    final NodeType v : bucket.get(parent)) {      final NodeType y=getAncestorWithLowestSemi(v,dfnum,semi,ancestor,best);      if (semi.get(y) == semi.get(v)) {        idom.put(v,parent);      } else {        samedom.put(v,y);      }    }    bucket.get(parent).clear();  }  for (int i=1; i <= n; i++) {    final NodeType node=vertex.get(i);    if (samedom.get(node) != null) {      idom.put(node,idom.get(samedom.get(node)));    }  }  ITreeNode<NodeType> treeRoot=null;  final HashMap<NodeType,ITreeNode<NodeType>> nodeMap=new HashMap<NodeType,ITreeNode<NodeType>>();  for (  final Entry<NodeType,NodeType> node : idom.entrySet()) {    final TreeNode<NodeType> treeNode=new TreeNode<NodeType>(node.getKey());    nodeMap.put(node.getKey(),treeNode);    if (node.getValue() == null) {      treeRoot=treeNode;    }  }  for (  final Entry<NodeType,NodeType> node : idom.entrySet()) {    final NodeType dominatedNode=node.getKey();    final NodeType dominatorNode=node.getValue();    if (dominatorNode != null) {      nodeMap.get(dominatorNode).addChild(nodeMap.get(dominatedNode));      nodeMap.get(dominatedNode).setParent(nodeMap.get(dominatorNode));    }  }  return new Pair<Tree<NodeType>,HashMap<NodeType,ITreeNode<NodeType>>>(new Tree<NodeType>(treeRoot),nodeMap);}  }
class C{  @Procedure @PerformsWrites @Description("apoc.refactor.from(rel, startNode) redirect relationship to use new start-node") public Stream<RelationshipRefactorResult> from(@Name("relationship") Relationship rel,@Name("newNode") Node newNode){  RelationshipRefactorResult result=new RelationshipRefactorResult(rel.getId());  try {    Relationship newRel=newNode.createRelationshipTo(rel.getEndNode(),rel.getType());    copyProperties(rel,newRel);    rel.delete();    return Stream.of(result.withOther(newRel));  } catch (  Exception e) {    return Stream.of(result.withError(e));  }}  }
class C{  public String toString(){  return toStringWithRcode(getRcode());}  }
class C{  public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {  if (limit - position >= length) {    System.arraycopy(value,offset,buffer,position,length);    position+=length;    totalBytesWritten+=length;  } else {    final int bytesWritten=limit - position;    System.arraycopy(value,offset,buffer,position,bytesWritten);    offset+=bytesWritten;    length-=bytesWritten;    position=limit;    totalBytesWritten+=bytesWritten;    refreshBuffer();    if (length <= limit) {      System.arraycopy(value,offset,buffer,0,length);      position=length;    } else {      output.write(value,offset,length);    }    totalBytesWritten+=length;  }}  }
class C{  public void debug(String msg){  innerLog(Level.DEBUG,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public boolean isProfileActivated(){  return !before.isActive() && after.isActive();}  }
class C{  public static String encode(String data){  try {    return encode(data,DEFAULT_CHAR_ENCODING);  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException(uee.toString());  }}  }
class C{  @Override public boolean exists(){  return true;}  }
class C{  public boolean superClassOf(Environment env,ClassDeclaration otherClass) throws ClassNotFound {  while (otherClass != null) {    if (getClassDeclaration().equals(otherClass)) {      return true;    }    otherClass=otherClass.getClassDefinition(env).getSuperClass();  }  return false;}  }
class C{  @VisibleForTesting public void enableAutoCompaction(boolean waitForFutures){  this.compactionStrategyWrapper.enable();  List<Future<?>> futures=CompactionManager.instance.submitBackground(this);  if (waitForFutures)   FBUtilities.waitOnFutures(futures);}  }
class C{  public Object nextContent() throws JSONException {  char c;  StringBuilder sb;  do {    c=next();  } while (Character.isWhitespace(c));  if (c == 0) {    return null;  }  if (c == '<') {    return XML.LT;  }  sb=new StringBuilder();  for (; ; ) {    if (c == '<' || c == 0) {      back();      return sb.toString().trim();    }    if (c == '&') {      sb.append(nextEntity(c));    } else {      sb.append(c);    }    c=next();  }}  }
class C{  public MaskFormatter(){  setAllowsInvalid(false);  containsLiteralChars=true;  maskChars=EmptyMaskChars;  placeholder=' ';}  }
class C{  public QuitWorkspaceAction(SimbrainDesktop desktop){  super("Quit",desktop);  Toolkit toolkit=Toolkit.getDefaultToolkit();  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_Q,toolkit.getMenuShortcutKeyMask());  putValue(ACCELERATOR_KEY,keyStroke);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == VOICE_RECOGNITION_REQUEST_CODE && resultCode == RESULT_OK) {    ArrayList<String> matches=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);    mList.setAdapter(new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,matches));  }  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  public Spring removeListener(SpringListener listenerToRemove){  if (listenerToRemove == null) {    throw new IllegalArgumentException("listenerToRemove is required");  }  mListeners.remove(listenerToRemove);  return this;}  }
class C{  public Object visit(ASTConstant node,Object data){  stack.push(node.getValue());  return data;}  }
class C{  protected static void doConfigure(Configuration configuration,Document doc) throws EPException {  Element root=doc.getDocumentElement();  DOMElementIterator eventTypeNodeIterator=new DOMElementIterator(root.getChildNodes());  while (eventTypeNodeIterator.hasNext()) {    Element element=eventTypeNodeIterator.next();    String nodeName=element.getNodeName();    if (nodeName.equals("event-type-auto-name")) {      handleEventTypeAutoNames(configuration,element);    } else     if (nodeName.equals("event-type")) {      handleEventTypes(configuration,element);    } else     if (nodeName.equals("auto-import")) {      handleAutoImports(configuration,element);    } else     if (nodeName.equals("auto-import-annotations")) {      handleAutoImportAnnotations(configuration,element);    } else     if (nodeName.equals("method-reference")) {      handleMethodReference(configuration,element);    } else     if (nodeName.equals("database-reference")) {      handleDatabaseRefs(configuration,element);    } else     if (nodeName.equals("plugin-view")) {      handlePlugInView(configuration,element);    } else     if (nodeName.equals("plugin-virtualdw")) {      handlePlugInVirtualDW(configuration,element);    } else     if (nodeName.equals("plugin-aggregation-function")) {      handlePlugInAggregation(configuration,element);    } else     if (nodeName.equals("plugin-aggregation-multifunction")) {      handlePlugInMultiFunctionAggregation(configuration,element);    } else     if (nodeName.equals("plugin-singlerow-function")) {      handlePlugInSingleRow(configuration,element);    } else     if (nodeName.equals("plugin-pattern-guard")) {      handlePlugInPatternGuard(configuration,element);    } else     if (nodeName.equals("plugin-pattern-observer")) {      handlePlugInPatternObserver(configuration,element);    } else     if (nodeName.equals("variable")) {      handleVariable(configuration,element);    } else     if (nodeName.equals("plugin-loader")) {      handlePluginLoaders(configuration,element);    } else     if (nodeName.equals("engine-settings")) {      handleEngineSettings(configuration,element);    } else     if (nodeName.equals("plugin-event-representation")) {      handlePlugInEventRepresentation(configuration,element);    } else     if (nodeName.equals("plugin-event-type")) {      handlePlugInEventType(configuration,element);    } else     if (nodeName.equals("plugin-event-type-name-resolution")) {      handlePlugIneventTypeNameResolution(configuration,element);    } else     if (nodeName.equals("revision-event-type")) {      handleRevisionEventType(configuration,element);    } else     if (nodeName.equals("variant-stream")) {      handleVariantStream(configuration,element);    }  }}  }
class C{  private void rehash(){  int oldCapacity=m_capacity;  HashEntry[] oldTable=m_table;  int newCapacity=2 * oldCapacity + 1;  m_capacity=newCapacity;  m_threshold=(int)(newCapacity * m_loadFactor);  m_table=new HashEntry[newCapacity];  for (int i=oldCapacity - 1; i >= 0; i--) {    for (HashEntry old=oldTable[i]; old != null; ) {      HashEntry e=old;      old=old.next;      int newIndex=e.hash % newCapacity;      if (newIndex < 0)       newIndex=-newIndex;      e.next=m_table[newIndex];      m_table[newIndex]=e;    }  }}  }
class C{  public static void displayAppCopyright(final Activity activity){  displayInWebview(activity,"https://riot.im/copyright");}  }
class C{  public void addListener(Listener<TunerConfigurationEvent> listener){  mConfigurationChangeListeners.add(listener);}  }
class C{  public boolean isSingleRow(){  return m_vo.IsSingleRow;}  }
class C{  public void changeBrushSize(View v){  if (v.getTag().toString().equals("small")) {    drawingView.setBrushSize(SMALL_BRUSH);  } else   if (v.getTag().toString().equals("medium")) {    drawingView.setBrushSize(MEDIUM_BRUSH);  } else   if (v.getTag().toString().equals("large")) {    drawingView.setBrushSize(LARGE_BRUSH);  }}  }
class C{  public JSONException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  @Override public int hashCode(){  int hash=LangUtils.HASH_SEED;  hash=LangUtils.hashCode(hash,this.defaultPort);  hash=LangUtils.hashCode(hash,this.name);  hash=LangUtils.hashCode(hash,this.layered);  hash=LangUtils.hashCode(hash,this.socketFactory);  return hash;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.914 -0400",hash_original_method="0133DB5409861AC1C5AE03D509257B31",hash_generated_method="29366EECD33865A5ACAF47EFA1A55D33") public XmlStreamWriter(OutputStream out,String defaultEncoding){  this.out=out;  this.defaultEncoding=defaultEncoding != null ? defaultEncoding : "UTF-8";}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CONDITION_RHS___COMPARISON_OPERATOR_1:    setComparison_operator_1((String)newValue);  return;case UmplePackage.CONDITION_RHS___RHS_1:setRHS_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean inViLocations(String word){  return hsViLocations.contains(word);}  }
class C{  protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap){  double lowestCardinality=Double.MAX_VALUE;  TupleExpr result=expressions.get(0);  for (  TupleExpr tupleExpr : expressions) {    double cardinality=cardinalityMap.get(tupleExpr);    if (cardinality < lowestCardinality) {      lowestCardinality=cardinality;      result=tupleExpr;    }  }  return result;}  }
class C{  public String toString(){  return String.format("(%.2f, %.2f)",x(),y());}  }
class C{  public void emit4(int od){  if (!alive)   return;  if (cp + 4 > code.length) {    emit1(od >> 24);    emit1(od >> 16);    emit1(od >> 8);    emit1(od);  } else {    code[cp++]=(byte)(od >> 24);    code[cp++]=(byte)(od >> 16);    code[cp++]=(byte)(od >> 8);    code[cp++]=(byte)od;  }}  }
class C{  public DrawingColorChooserHandler(DrawingEditor editor,AttributeKey<Color> key,JColorChooser colorChooser,JPopupMenu popupMenu){  super(editor);  this.key=key;  this.colorChooser=colorChooser;  this.popupMenu=popupMenu;  colorChooser.getSelectionModel().addChangeListener(this);  updateEnabledState();}  }
class C{  public static <T extends VerifiableEntity>Deserializer roundtripVerifiableEntity(final T originalEntity,final AccountLookup accountLookup){  originalEntity.sign();  final JsonSerializer jsonSerializer=new JsonSerializer(true);  originalEntity.serialize(jsonSerializer);  return new JsonDeserializer(jsonSerializer.getObject(),new DeserializationContext(accountLookup));}  }
class C{  @Override public DriverTask deleteVolume(StorageVolume volume){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_DELETE_STORAGE_VOLUMES);  return provHelper.deleteVolumes(volume,task,this.driverRegistry);}  }
class C{  static void check(PublicKey key,X509CRL crl) throws CertPathValidatorException {  X509CRLImpl x509CRLImpl=null;  try {    x509CRLImpl=X509CRLImpl.toImpl(crl);  } catch (  CRLException ce) {    throw new CertPathValidatorException(ce);  }  AlgorithmId algorithmId=x509CRLImpl.getSigAlgId();  check(key,algorithmId);}  }
class C{  private JMenu buildMenu(String name,HTMLEditor_MenuAction[] menuActions,Hashtable actions){  JMenu menu=new JMenu(name);  for (int i=0; i < menuActions.length; i++) {    HTMLEditor_MenuAction item=menuActions[i];    if (item.isSubMenu()) {      JMenu subMenu=buildMenu(item.getName(),item.getSubMenus(),actions);      if (subMenu != null)       menu.add(subMenu);    } else     if (item.isAction()) {      menu.add(item.getAction());    } else {      String actionName=item.getActionName();      Action targetAction=(Action)actions.get(actionName);      JMenuItem menuItem=menu.add(item.getName());      if (targetAction != null)       menuItem.addActionListener(targetAction); else       menuItem.setEnabled(false);    }  }  if (menu.getMenuComponentCount() == 0)   menu=null;  return menu;}  }
class C{  public N4IDEXpectRunListener(){}  }
class C{  public static boolean isApkDebuggable(Context context){  try {    ApplicationInfo info=context.getApplicationInfo();    return (info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;  } catch (  Exception e) {  }  return false;}  }
class C{  public static boolean shouldAuthenticate(final Socket socket) throws IOException {  final byte[] bufferSent=new byte[4];  bufferSent[0]=SOCKS_VERSION;  bufferSent[1]=(byte)ACCEPTABLE_METHODS;  bufferSent[2]=(byte)NO_AUTHENTICATION_REQUIRED_METHOD;  bufferSent[3]=(byte)USERNAME_PASSWORD_METHOD;  final OutputStream outputStream=socket.getOutputStream();  outputStream.write(bufferSent);  outputStream.flush();  LOGGER.trace("{}",MiscUtil.buildLogString(bufferSent,false));  final InputStream inputStream=socket.getInputStream();  final byte[] receivedData=read2Bytes(inputStream);  LOGGER.trace("{}",MiscUtil.buildLogString(receivedData,true));  if (receivedData[0] != (int)SOCKS_VERSION) {    throw new SocksException("Remote server don't support SOCKS5");  }  final byte command=receivedData[1];  if (command != NO_AUTHENTICATION_REQUIRED_METHOD && command != USERNAME_PASSWORD_METHOD) {    throw new SocksException("requested authentication method not supported: " + command);  }  return command == USERNAME_PASSWORD_METHOD;}  }
class C{  public static String addThisTypeClause(String str){  String varName=TYPE_CLASS_VAR_NAME;  Pattern pattern=Pattern.compile("(?i)WHERE\\s*\\{");  Matcher matcher=pattern.matcher(str);  if (matcher.find()) {    int index=matcher.end();    StringBuilder sb=new StringBuilder(str);    sb.insert(index," ?this a ?" + varName + " . ");    return sb.toString();  } else {    throw new IllegalArgumentException("Malformed query: could not find start of WHERE clause");  }}  }
class C{  public Type result(){  this.assertTrue(this.stack.size() == 1);  return this.stack.pop().get(0);}  }
class C{  public static void surfaceThrowable(String whereThrown,Throwable t){  if (t instanceof SQLException) {    logger.error(String.format("%s: caught SQLException(s):",whereThrown));    surfaceSqlException((SQLException)t);    return;  }  logger.error(String.format("%s: caught Throwable (%s)\n",whereThrown,t.toString()),t);  t=t.getCause();  if (t != null && t instanceof SQLException) {    logger.error("Caused by SQLException(s):");    surfaceSqlException((SQLException)t);  }}  }
class C{  @Override public void handleError(String message,Throwable error){  logger.log(Level.FINE,"The following error occurred with " + "an incoming message:",error);}  }
class C{  public long nextLong(){  long result=super.nextLong();  println("nextLong=" + result);  return result;}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 23:case 22:case 21:case 20:case 13:case 12:case 3:case 11:case 2:case 10:case 1:    return true;default :  break;}return false;}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public static BigInteger findLCM(final BigInteger ba,final BigInteger bb){  BigInteger result=BigInteger.ZERO;  long a=ba.longValue();  long b=bb.longValue();  long num1, num2;  if (a > b) {    num1=a;    num2=b;  } else {    num1=b;    num2=a;  }  for (int i=1; i <= num2; i++) {    if ((num1 * i) % num2 == 0) {      result=BigInteger.valueOf(i * num1);    }  }  return result;}  }
class C{  public static Cell createFullCell(int inRow,int inCol,String inInputValue,Number inCalculatedValue,String inValue){  return new Cell(inRow,inCol,inInputValue,inCalculatedValue,inValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.915 -0500",hash_original_method="72486AD20E48663272D3893E4646E398",hash_generated_method="A8DB86084E9D6FD8B24832A28EC67FF9") void _processDo(int option) throws IOException {  if (debugoptions) {    System.err.println("RECEIVED DO: " + TelnetOption.getOption(option));  }  if (__notifhand != null) {    __notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_DO,option);  }  boolean acceptNewState=false;  if (optionHandlers[option] != null) {    acceptNewState=optionHandlers[option].getAcceptLocal();  } else {    if (option == TERMINAL_TYPE) {      if ((terminalType != null) && (terminalType.length() > 0)) {        acceptNewState=true;      }    }  }  if (_willResponse[option] > 0) {    --_willResponse[option];    if (_willResponse[option] > 0 && _stateIsWill(option)) {      --_willResponse[option];    }  }  if (_willResponse[option] == 0) {    if (_requestedWont(option)) {switch (option) {default :        break;    }    if (acceptNewState) {      _setWantWill(option);      _sendWill(option);    } else {      ++_willResponse[option];      _sendWont(option);    }  } else {switch (option) {default :      break;  }}}_setWill(option);}  }
class C{  public boolean isFetchAll(){  return fieldFetchAll;}  }
class C{  public Builder withSolrXml(Path solrXml){  try {    this.solrxml=new String(Files.readAllBytes(solrXml),Charset.defaultCharset());  } catch (  IOException e) {    throw new RuntimeException(e);  }  return this;}  }
class C{  public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  public static void assertArrayEqual(int[] expected,int[] actual,String errorMessage){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ", "+ errorMessage+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],errorMessage);  }}  }
class C{  static public void addTopLevelWindowListener(TopLevelWindowListener l){  topLevelWindowListener=TopLevelWindowMulticaster.add(topLevelWindowListener,l);}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public static List<BasePermissionsHelper.UserMapping> convertStringToUserMappingList(String strUserMappings){  List<BasePermissionsHelper.UserMapping> userMappingList=null;  try {    JAXBContext jaxbContext=JAXBContext.newInstance(TenantOrgRestRep.class);    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();    TenantOrgRestRep response=(TenantOrgRestRep)unmarshaller.unmarshal(new StringReader(strUserMappings));    userMappingList=BasePermissionsHelper.UserMapping.fromParamList(response.getUserMappings());  } catch (  JAXBException e) {    log.error("An error occurred when converting string {} to list. Cause: {}",strUserMappings,e);  }  return userMappingList;}  }
class C{  public static void execute(String fileName,boolean trace) throws IOException {  Player player=new Player();  player.trace=trace;  player.runFile(fileName);}  }
class C{  @Override public String toString(){  return this.baseY + ", " + this.key.toString();}  }
class C{  public long endBlock(){  if (mState == State.ENCODING) {    ++mBitsToFollow;    if (mLow < FIRST_QUARTER) {      bitPlusFollowFalse();    } else {      bitPlusFollowTrue();    }    mBitsToFollow=0;    mLow=0;    mHigh=TOP_VALUE;    mState=State.END_BLOCK;  }  return mOut.endBlock();}  }
class C{  public MView(Properties ctx,int AD_SmartView_ID,String trxName){  super(ctx,AD_SmartView_ID,trxName);  if (AD_SmartView_ID == 0) {  }}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply tr){  log.debug("Client = " + client);  if (tm.isBinary() && (client instanceof TamsPowerManager && tm.getReplyType() == 'P') || (client instanceof TamsThrottle && tm.getReplyType() == 'L') || (client instanceof TamsTurnoutManager && tm.getReplyType() == 'T') || (client instanceof TamsSensorManager && tm.getReplyType() == 'S')) {    log.debug("Forward binary message");    ((TamsListener)client).reply((TamsReply)tr);  }  if (tm.isBinary() && (client instanceof TamsTurnout && tm.getReplyType() == 'T')) {    ((TamsListener)client).reply((TamsReply)tr);    log.debug("Forward ASCII Turnout message");  }  if (!(client instanceof TamsMonPane) && !tm.isBinary() && !((tm.getReplyType() == 'P') || (tm.getReplyType() == 'L') || (tm.getReplyType() == 'S')|| (tm.getReplyType() == 'T'))) {    log.debug("Forward ACSII message to other listeners");    ((TamsListener)client).reply((TamsReply)tr);  }  if (client instanceof TamsMonPane) {    log.debug("Forward any message to Monitor Panel");    ((TamsListener)client).reply((TamsReply)tr);  }}  }
class C{  protected static String quoteDate(java.sql.Date x){  if (x == null) {    return "null";  }  return "Date.valueOf(\"" + x.toString() + "\")";}  }
class C{  public void printTreeForHumans(final EvolutionState state,final int log,final int verbosity){  if (useC)   state.output.print(child.makeCTree(true,printTerminalsAsVariablesInC,printTwoArgumentNonterminalsAsOperatorsInC),verbosity,log); else   if (useLatex)   state.output.print(child.makeLatexTree(),verbosity,log); else   child.printRootedTreeForHumans(state,log,verbosity,0,0);  state.output.println("",verbosity,log);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.384 -0500",hash_original_method="BEFAB7C1C327FAD32E2DCE511F8876B3",hash_generated_method="EFFB6AC003C8227D3A9CFA86DFBEAD77") public static boolean isETC1Supported(){  int[] results=new int[20];  GLES10.glGetIntegerv(GLES10.GL_NUM_COMPRESSED_TEXTURE_FORMATS,results,0);  int numFormats=results[0];  if (numFormats > results.length) {    results=new int[numFormats];  }  GLES10.glGetIntegerv(GLES10.GL_COMPRESSED_TEXTURE_FORMATS,results,0);  for (int i=0; i < numFormats; i++) {    if (results[i] == ETC1.ETC1_RGB8_OES) {      return true;    }  }  return false;}  }
class C{  public LocalVarResolver(){  this("java.lang.Object");}  }
class C{  @Override public void visitMapWay(MapWay way){  DefaultEntityViewInfo pInfo=(DefaultEntityViewInfo)way.getViewInfo();  List<MapNode> nodes=getWayNodes(way);  if (!nodes.isEmpty() && pInfo.wayColor != null) {    if (pInfo.wayFillColor != null && nodes.get(0) == nodes.get(nodes.size() - 1) && (way.isArea() || !pInfo.fillAreasOnly))     areaBuffer.add(way); else     wayBuffer.add(way);  }  if (pInfo.isWayIcon && pInfo.icon != null)   nodeBuffer.add(way);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (option_1: ");  result.append(option_1);  result.append(')');  return result.toString();}  }
class C{  @Override public synchronized void removeInstanceListener(InstanceListener dsl){  super.removeInstanceListener(dsl);  m_instanceEventTargets--;}  }
class C{  private boolean portExceptionCheck(SocketPermission permission,String p){  SocketPermission impliee=new SocketPermission("*:" + p,"listen");  return impliee.implies(permission);}  }
class C{  public double totalCount(){  double total=0.0;  for (  Map.Entry<K,FastCounter<V>> entry : counterMap.entrySet()) {    FastCounter<V> counter=entry.getValue();    total+=counter.totalCount();  }  return total;}  }
class C{  private static void complete(){  Dashboard.index();}  }
class C{  public Contact addContact(String contact){  Contact prop=new Contact(contact);  addContact(prop);  return prop;}  }
class C{  protected boolean isUseTargetedProductPolicyIfSeveralChildren(){  return false;}  }
class C{  private ProfileBuilderBolt createBolt() throws IOException {  ProfileBuilderBolt bolt=new ProfileBuilderBolt("zookeeperURL");  bolt.setCuratorFramework(client);  bolt.setTreeCache(cache);  bolt.setExecutor(new DefaultStellarExecutor());  bolt.setPeriodDurationMillis(TimeUnit.MINUTES.toMillis(15));  bolt.prepare(new HashMap<>(),topologyContext,outputCollector);  return bolt;}  }
class C{  public static <K>ImmutableArray2<K> create(K... array){  return new ImmutableArray2<K>(array,array.length);}  }
class C{  public DeleteMonitoredItemsResponse DeleteMonitoredItems(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,UnsignedInteger... MonitoredItemIds) throws ServiceFaultException, ServiceResultException {  DeleteMonitoredItemsRequest req=new DeleteMonitoredItemsRequest(RequestHeader,SubscriptionId,MonitoredItemIds);  return (DeleteMonitoredItemsResponse)channel.serviceRequest(req);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public BufferPool(int bufferLength){  Assertions.checkArgument(bufferLength > 0);  this.bufferLength=bufferLength;  this.recycledBuffers=new byte[INITIAL_RECYCLED_BUFFERS_CAPACITY][];}  }
class C{  private void addPolygonRing(LinearRing lr,int cwLeft,int cwRight){  if (lr.isEmpty())   return;  Coordinate[] coord=CoordinateArrays.removeRepeatedPoints(lr.getCoordinates());  if (coord.length < 4) {    hasTooFewPoints=true;    invalidPoint=coord[0];    return;  }  int left=cwLeft;  int right=cwRight;  if (CGAlgorithms.isCCW(coord)) {    left=cwRight;    right=cwLeft;  }  Edge e=new Edge(coord,new Label(argIndex,Location.BOUNDARY,left,right));  lineEdgeMap.put(lr,e);  insertEdge(e);  insertPoint(argIndex,coord[0],Location.BOUNDARY);}  }
class C{  private static BaseEntry parseEntry(ApiClient actor,InputStream is,MapsService maps,boolean preview,PrintWriter pw) throws Exception {  BaseEntry entry;  entry=actor.parseAtom(is);  if (draft) {    entry.setDraft(true);  }  if (preview) {    pp(maps,entry,pw);  }  return entry;}  }
class C{  protected void clearOutEvents(){}  }
class C{  private void updateModel(Image imageToUpdate){  Log.v(TAG,"updateModel, imageToUpdate " + imageToUpdate);  for (  Image image : mImagesList) {    if (image.equals(imageToUpdate)) {      Log.v(TAG,"updateModel, found imageToUpdate " + imageToUpdate);      image.setVisibility(imageToUpdate.isVisible());      break;    }  }  int index=mImagesList.indexOf(imageToUpdate);  Log.v(TAG,"updateModel, index " + index);  mAdapter.notifyItemChanged(index);  Rect dirty=new Rect();  View viewAtPosition=mLayoutManager.findViewByPosition(index);  viewAtPosition.getDrawingRect(dirty);  mRecyclerView.invalidate(dirty);}  }
class C{  private void openFile(final File file){  try {    reader=new BufferedReader(new FileReader(file));  } catch (  final Exception e) {    e.printStackTrace();    System.err.println("Couldn't read font meta file!");  }}  }
class C{  public static void makeAccessible(final AccessibleObject obj){  if (obj != null) {    PrivilegedProcessor processor=PROCESSORS_QUEUE.poll();    if (processor == null) {      processor=new PrivilegedProcessor();    }    processor.setAccessibleObject(obj);    AccessController.doPrivileged(processor);    PROCESSORS_QUEUE.offer(processor);  }}  }
class C{  public MergeBOMAction(JTree tree){  super(COMMAND);  setActionCommand(COMMAND);  this.tree=tree;}  }
class C{  public final boolean isArray(){  return token.isArray();}  }
class C{  public AbstractAQuery(View root){  this.root=root;  this.view=root;}  }
class C{  public double phi(float element){  int size=binBoundaries.length;  if (element <= binBoundaries[0])   return 0.0;  if (element >= binBoundaries[size - 1])   return 1.0;  double binWidth=1.0 / (size - 1);  int index=java.util.Arrays.binarySearch(binBoundaries,element);  if (index >= 0) {    return binWidth * index;  }  int insertionPoint=-index - 1;  double from=binBoundaries[insertionPoint - 1];  double to=binBoundaries[insertionPoint] - from;  double p=(element - from) / to;  return binWidth * (p + (insertionPoint - 1));}  }
class C{  public void dump(){  Out.dump(toString());}  }
class C{  private boolean isBluetoothOn(){  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  if (adapter == null) {    return false;  } else {    return adapter.isEnabled();  }}  }
class C{  public Dimension minimumLayoutSize(Container target){synchronized (target.getTreeLock()) {    Dimension dim=new Dimension(0,0);    boolean ltr=target.getComponentOrientation().isLeftToRight();    Component c=null;    if ((c=getChild(EAST,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(WEST,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(CENTER,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width+=d.width;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(NORTH,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    if ((c=getChild(SOUTH,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right;    dim.height+=insets.top + insets.bottom;    return dim;  }}  }
class C{  public static String toString(String format,double[]... v){  StringBuffer str=new StringBuffer();  for (int i=0; i < v.length; i++) {    for (int j=0; j < v[i].length - 1; j++)     str.append(String.format(format + " ",v[i][j]));    str.append(String.format(format,v[i][v[i].length - 1]));    if (i < v.length - 1)     str.append("\n");  }  return str.toString();}  }
class C{  public boolean isFinal(int height,long blockTimeSeconds){  long time=getLockTime();  return time < (time < LOCKTIME_THRESHOLD ? height : blockTimeSeconds) || !isTimeLocked();}  }
class C{  public void findStronglyConnected(OperatorMeta om,ValidationContext ctx){  om.nindex=ctx.nodeIndex;  om.lowlink=ctx.nodeIndex;  ctx.nodeIndex++;  ctx.stack.push(om);  ctx.path.push(om);  for (  StreamMeta downStream : om.outputStreams.values()) {    for (    InputPortMeta sink : downStream.sinks) {      OperatorMeta successor=sink.getOperatorWrapper();      if (successor == null) {        continue;      }      if (om == successor) {        ctx.invalidCycles.add(Collections.singleton(om));      }      if (successor.nindex == null) {        findStronglyConnected(successor,ctx);        om.lowlink=Math.min(om.lowlink,successor.lowlink);      } else       if (ctx.stack.contains(successor)) {        om.lowlink=Math.min(om.lowlink,successor.nindex);        boolean isDelayLoop=false;        for (int i=ctx.stack.size(); i > 0; i--) {          OperatorMeta om2=ctx.stack.get(i - 1);          if (om2.getOperator() instanceof Operator.DelayOperator) {            isDelayLoop=true;          }          if (om2 == successor) {            break;          }        }        if (!isDelayLoop) {          ctx.invalidLoopAt=successor;        }      }    }  }  if (om.lowlink.equals(om.nindex)) {    Set<OperatorMeta> connectedSet=new LinkedHashSet<>(ctx.stack.size());    while (!ctx.stack.isEmpty()) {      OperatorMeta n2=ctx.stack.pop();      connectedSet.add(n2);      if (n2 == om) {        break;      }    }    if (connectedSet.size() > 1) {      ctx.stronglyConnected.add(connectedSet);      if (connectedSet.contains(ctx.invalidLoopAt)) {        ctx.invalidCycles.add(connectedSet);      }    }  }  ctx.path.pop();}  }
class C{  @Override public int hashCode(){  checkRep();  if (this.isNaN()) {    return 0;  }  return this.numer * 2 + this.denom * 3;}  }
class C{  public static <T>T rand(final Set<T> set){  final int n=rand(set.size());  int i=0;  for (  final T element : set) {    if (i == n) {      return element;    }    i++;  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:59.828 -0500",hash_original_method="7B6B1330F30409B85DB9F92A5EA503D0",hash_generated_method="64E7B3AF362314C12BDFE387D77BB0A2") public static Animation makeInChildBottomAnimation(Context c){  Animation a;  a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_in_child_bottom);  a.setInterpolator(new AccelerateInterpolator());  a.setStartTime(currentAnimationTimeMillis());  return a;}  }
class C{  public NumberFileParser(String pFileName) throws IOException {  final InputStream inFile=new FileInputStream(pFileName);  mInputReader=new LineNumberReader(new InputStreamReader(inFile,StandardCharsets.UTF_8));  mSourceName=pFileName;  mCloseReader=true;  advanceChar();  advanceToken();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void ensureNotClosed() throws SQLException {  if (closed)   throw new SQLException("Statement is closed.");}  }
class C{  @Override public Object readObject(int index) throws IOException {  openElement(index);  Object o;  String ref=getAttribute("ref",null);  String id=getAttribute("id",null);  if (ref != null && id != null) {    throw new IOException("Element has both an id and a ref attribute: <" + getTagName() + " id=\""+ id+ "\" ref=\""+ ref+ "\"> in line number "+ current.getLineNr());  }  if (id != null && idobjects.containsKey(id)) {    throw new IOException("Duplicate id attribute: <" + getTagName() + " id=\""+ id+ "\"> in line number "+ current.getLineNr());  }  if (ref != null && !idobjects.containsKey(ref)) {    throw new IOException("Referenced element not found: <" + getTagName() + " ref=\""+ ref+ "\"> in line number "+ current.getLineNr());  }  if (ref != null) {    o=idobjects.get(ref);  } else {    o=factory.read(this);    if (id != null) {      idobjects.put(id,o);    }    if (o instanceof DOMStorable) {      ((DOMStorable)o).read(this);    }  }  closeElement();  return o;}  }
class C{  public void testConstructorSignBytesPositive3(){  byte aBytes[]={-12,56,100};  int aSign=1;  byte rBytes[]={0,-12,56,100};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {  return n;}  }
class C{  public CLIQUEUnit<V> rightNeighbor(CLIQUEUnit<V> unit,Integer dim){  CLIQUEInterval i=unit.getInterval(dim);  for (  CLIQUEUnit<V> u : getDenseUnits()) {    if (u.containsRightNeighbor(i)) {      return u;    }  }  return null;}  }
class C{  public RelationalLocator(Instances data,int fromIndex,int toIndex){  super(data,Attribute.RELATIONAL,fromIndex,toIndex);}  }
class C{  public static void execute(String dir,String db) throws SQLException {  try {    new Recover().process(dir,db);  } catch (  DbException e) {    throw DbException.toSQLException(e);  }}  }
class C{  public ResourceAttributes(){  attributes=new ConcurrentHashMap<String,AttributeValues>();}  }
class C{  void installBorder(JRootPane root){  int style=root.getWindowDecorationStyle();  if (style == JRootPane.NONE) {    LookAndFeel.uninstallBorder(root);  } else {    Border b=root.getBorder();    if (b == null || b instanceof UIResource) {      root.setBorder(null);      root.setBorder(UIManager.getBorder(borderKeys[style]));    }  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 3014) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private static void WriteNetworkChangeEvents(List<LinkChangeEvent> linkChangeEvents,String filepath){  final BufferedWriter out=IOUtils.getBufferedWriter(filepath);  try {    out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");    out.newLine();    out.write("<networkChangeEvents xmlns=\"http://www.matsim.org/files/dtd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.matsim.org/files/dtd http://www.matsim.org/files/dtd/networkChangeEvents.xsd\">");    out.newLine();    out.newLine();    for (    LinkChangeEvent event : linkChangeEvents) {      out.write("\t<networkChangeEvent startTime=\"" + event.getStarttime() + "\">");      out.newLine();      out.write("\t\t<link refId=\"" + event.getLinkId() + "\"/>");      out.newLine();      out.write("\t\t<link refId=\"" + event.getLinkId() + "\"/>");      out.newLine();      out.write("\t\t<flowCapacity type=\"absolute\" value=\"0\"/>");      out.newLine();      out.write("\t</networkChangeEvent>");      out.newLine();      out.write("\t<networkChangeEvent startTime=\"" + event.getStoptime() + "\">");      out.newLine();      out.write("\t\t<link refId=\"" + event.getLinkId() + "\"/>");      out.newLine();      out.write("\t\t<link refId=\"" + event.getLinkId() + "\"/>");      out.newLine();      out.write("\t\t<flowCapacity type=\"absolute\" value=\"" + event.getCapacity() + "\"/>");      out.newLine();      out.write("\t</networkChangeEvent>");      out.newLine();      out.newLine();    }    out.write("</networkChangeEvents>");    out.newLine();    out.close();    log.info("networkChangeEvents file written!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public IntroduceParameterObjectDescriptor(final String project,final String description,final String comment,final Map arguments,final int flags) throws IllegalArgumentException {  super(IJavaRefactorings.INTRODUCE_PARAMETER_OBJECT,project,description,comment,arguments,flags);  initializeFromMap(arguments);}  }
class C{  public static long scalarProduct(final long[] bits,final long[] values){  long sum=0;  for (int i=bits.length; i-- != 0; ) {    final int offset=i * 64;    long word=bits[i];    while (word != 0) {      final int lsb=Long.numberOfTrailingZeros(word);      sum^=values[offset + lsb];      word&=word - 1;    }  }  return sum;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sqnc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private static <TK,FV>boolean hasPendingPhrases(ConcreteRule<TK,FV> translationOpt,Derivation<TK,FV> baseHyp,boolean firstSegmentInOpt,boolean lastSegmentInOpt){  boolean pendingPhrases=false;  if (translationOpt.abstractRule instanceof DTURule && firstSegmentInOpt)   pendingPhrases=true; else   if (baseHyp instanceof DTUHypothesis) {    DTUHypothesis<TK,FV> dtuHyp=(DTUHypothesis<TK,FV>)baseHyp;    int nPendingPhrases=dtuHyp.pendingPhrases.size();    pendingPhrases=nPendingPhrases > 1 || (nPendingPhrases == 1 && !lastSegmentInOpt);  }  return pendingPhrases;}  }
class C{  private void installRowFactoryOnTableViewAssignment(){  tableViewProperty().addListener(null);}  }
class C{  public String urlInAcceptedDomain(final DigestURL url){  if (url == null)   return "url is null";  if (this.domainList != null) {    if (!this.domainList.isListed(url,null)) {      return "the url '" + url + "' is not in domainList of this network";    }  }  if (Switchboard.getSwitchboard().getConfigBool("contentcontrol.enabled",false) == true) {    if (!Switchboard.getSwitchboard().getConfig("contentcontrol.mandatoryfilterlist","").equals("")) {      FilterEngine f=ContentControlFilterUpdateThread.getNetworkFilter();      if (f != null) {        if (!f.isListed(url,null)) {          return "the url '" + url + "' does not belong to the network mandatory filter list";        }      }    }  }  final boolean local=url.isLocal();  if (this.acceptLocalURLs && local)   return null;  if (this.acceptGlobalURLs && !local)   return null;  final String host=url.getHost();  if (host == null)   return "url.host is null (you must switch to intranet mode to crawl these sources)";  final InetAddress ia=Domains.dnsResolve(host);  return (local) ? ("the host '" + host + "' is local, but local addresses are not accepted: "+ ((ia == null) ? "null" : ia.getHostAddress())) : ("the host '" + host + "' is global, but global addresses are not accepted: "+ ((ia == null) ? "null" : ia.getHostAddress()));}  }
class C{  public static double[] makeInputVector(Example e){  double[] vector=new double[e.getAttributes().size()];  int i=0;  for (  Attribute attribute : e.getAttributes()) {    vector[i++]=e.getValue(attribute);  }  return vector;}  }
class C{  public void removeAllEntries(){  this.entries.clear();}  }
class C{  public boolean isInList(Collection<? extends NodeChannel> channels){  return findInList(channels) != null;}  }
class C{  @Deprecated @Nullable public Boolean isKeepDeserialized(){  return keepDeserialized;}  }
class C{  public ServerProxy(String listenAddress) throws Exception {  this.listenAddress=listenAddress;  configureServer();  createClient();  createConnectors();  createHandlers();}  }
class C{  public void testGetProcessResultDataService(){  System.out.println("getProcessResultDataService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  ProcessResultDataService result=instance.getProcessResultDataService();  assertEquals(mockProcessResultDataService,result);  setVerifyMode();}  }
class C{  public DLSequence(ASN1Encodable obj){  super(obj);}  }
class C{  public static void subscribeToQueueReports(Callback callback){  subscribe(Type.QUEUE,callback);}  }
class C{  public static boolean readTranslations(String fileName){  File f=new File(fileName);  ArrayList<String> fileNames=new ArrayList<String>();  Scanner sc=null;  List<String> lines=new ArrayList<String>();  try {    sc=new Scanner(f);  } catch (  FileNotFoundException e) {    return false;  }  boolean appendNext=false;  while (sc.hasNextLine()) {    String line=sc.nextLine().trim();    if (line.length() == 0 || line.charAt(0) == '#') {      continue;    }    if (appendNext) {      line=lines.get(lines.size() - 1) + line;      lines.remove(lines.size() - 1);      appendNext=false;    }    if (line.length() - 1 == '\\') {      appendNext=true;      line=line.substring(0,line.length() - 1);    }    lines.add(line);  }  sc.close();  for (  String line : lines) {    if (line.startsWith("fileNames:")) {      String[] parts=line.split(":",2);      if (parts.length > 2 && !parts[1].trim().isEmpty()) {      }    }    String[] parts=line.split("[\t ]+",2);    if (parts[0].toLowerCase().equals("-replaceid")) {      ArrayList<String> args=splitEscapeUnquote(parts[1]);      saveTranslation(fileNames,TranslationType.ID,args.get(0),args.get(1));    } else     if (parts[0].toLowerCase().equals("-replacefunc")) {      ArrayList<String> args=splitEscapeUnquote(parts[1]);      String arg2=args.get(1);      if (arg2.length() > 0 && arg2.substring(arg2.length() - 1).equals("-")) {        arg2=arg2.substring(0,arg2.length() - 2) + CodeFormatter.REVERSE_ARGS_MARKER + "(";      }      saveTranslation(fileNames,TranslationType.FUNCTION,args.get(0),arg2);    } else     if (parts[0].toLowerCase().equals("-replaceregex")) {      ArrayList<String> args=splitEscapeUnquote(parts[1]);      saveTranslation(fileNames,TranslationType.REGEX,args.get(0),args.get(1));    } else     if (parts[0].toLowerCase().equals("replacecode")) {    }  }  return true;}  }
class C{  public Effect(Effect... effects){  this(Arrays.stream(effects).flatMap(null).collect(Collectors.toList()));}  }
class C{  @Override public void handlePut(Operation put){  if (!put.hasBody()) {    put.fail(new IllegalArgumentException("Body is required"));    return;  }  TransactionContext record=put.getBody(TransactionContext.class);  TransactionServiceState existing=getState(put);  if (record.action == Action.GET) {    existing.readLinks.add(put.getReferer().getPath());  } else {    existing.modifiedLinks.add(put.getReferer().getPath());  }  if (record.action == Action.POST) {    existing.createdLinks.add(put.getReferer().getPath());  }  if (record.action == Action.DELETE) {    existing.deletedLinks.add(put.getReferer().getPath());  }  if (record.coordinatorLinks != null) {    existing.servicesToCoordinators.put(put.getReferer().getPath(),record.coordinatorLinks);  }  if (!record.isSuccessful) {    existing.failedLinks.add(put.getReferer().getPath());  }  setState(put,existing);  put.complete();}  }
class C{  private void attemptClaimDrag(){  mParent=getParent();  if (mParent != null) {    mParent.requestDisallowInterceptTouchEvent(true);  }}  }
class C{  public boolean isBackbuttonOverridden(){  return webView.isButtonPlumbedToJs(KeyEvent.KEYCODE_BACK);}  }
class C{  public E remove(int key){  E prev;  if (array.length <= key) {    return null;  }  prev=(E)array[key];  if (prev != null) {    array[key]=null;    size--;  }  return prev;}  }
class C{  public static void main(final String[] args){  for (int i=0; i < LEVELS; i++) {    System.out.println("<tr><td>" + i + "</td><td>"+ xp[i]+ "</td></tr>");  }}  }
class C{  @NotNull private GroovyResolveResult[] resolveMethodOrProperty(boolean allVariants,@Nullable GrExpression upToArgument,boolean genericsMatter){  final String name=getReferenceName();  if (name == null)   return GroovyResolveResult.EMPTY_ARRAY;  GrReferenceResolveRunner resolveRunner=new GrReferenceResolveRunner(this);  PropertyResolverProcessor propertyResolver=new PropertyResolverProcessor(name,this);  resolveRunner.resolveImpl(propertyResolver);  final GroovyResolveResult[] propertyCandidates=propertyResolver.getCandidates();  if (!allVariants) {    for (    GroovyResolveResult candidate : propertyCandidates) {      final PsiElement element=candidate.getElement();      if (element instanceof GrVariable && !(element instanceof GrField || element instanceof GrBindingVariable)) {        return propertyCandidates;      }    }  }  final Pair<Boolean,GroovyResolveResult[]> shapeResults=resolveByShape(allVariants,upToArgument);  if (!genericsMatter && !allVariants && shapeResults.first) {    assertAllAreValid(shapeResults.second);    return shapeResults.second;  }  MethodResolverProcessor methodResolver=null;  if (genericsMatter) {    methodResolver=createMethodProcessor(allVariants,name,false,upToArgument);    for (    GroovyResolveResult result : shapeResults.second) {      final ResolveState state=ResolveState.initial().put(PsiSubstitutor.KEY,result.getSubstitutor()).put(ClassHint.RESOLVE_CONTEXT,result.getCurrentFileResolveContext()).put(SpreadState.SPREAD_STATE,result.getSpreadState());      PsiElement element=result.getElement();      assert element != null;      methodResolver.execute(element,state);    }    if (!allVariants && methodResolver.hasApplicableCandidates()) {      return methodResolver.getCandidates();    }  }  if (!allVariants) {    for (    GroovyResolveResult candidate : propertyCandidates) {      final PsiElement element=candidate.getElement();      if (element instanceof GrField) {        final PsiClass containingClass=((PsiField)element).getContainingClass();        if (containingClass != null && PsiTreeUtil.isContextAncestor(containingClass,this,true))         return propertyCandidates;      }    }  }  List<GroovyResolveResult> allCandidates=new ArrayList<GroovyResolveResult>();  ContainerUtil.addAll(allCandidates,propertyCandidates);  ContainerUtil.addAll(allCandidates,genericsMatter ? methodResolver.getCandidates() : shapeResults.second);  filterOutBindings(allCandidates);  for (  String getterName : GroovyPropertyUtils.suggestGettersName(name)) {    AccessorResolverProcessor getterResolver=new AccessorResolverProcessor(getterName,name,this,true,genericsMatter,PsiImplUtil.getQualifierType(this),getTypeArguments());    resolveRunner.resolveImpl(getterResolver);    final GroovyResolveResult[] candidates=getterResolver.getCandidates();    if (!allVariants && candidates.length == 1) {      return candidates;    }    ContainerUtil.addAll(allCandidates,candidates);  }  if (!allCandidates.isEmpty()) {    return allCandidates.toArray(new GroovyResolveResult[allCandidates.size()]);  }  return GroovyResolveResult.EMPTY_ARRAY;}  }
class C{  private void doConnect(){  if (clientHandle == null) {    clientHandle=mqttService.getClient(serverURI,clientId,myContext.getApplicationInfo().packageName,persistence);  }  mqttService.setTraceEnabled(traceEnabled);  mqttService.setTraceCallbackId(clientHandle);  String activityToken=storeToken(connectToken);  try {    mqttService.connect(clientHandle,connectOptions,null,activityToken);  } catch (  MqttException e) {    IMqttActionListener listener=connectToken.getActionCallback();    if (listener != null) {      listener.onFailure(connectToken,e);    }  }}  }
class C{  static void checkArguments(final AbstractSQLProvider provider,final CTag tag){  Preconditions.checkNotNull(provider,"IE00546: Provider argument can not be null");  Preconditions.checkNotNull(tag,"IE00547: Tag argument can not be null");  Preconditions.checkArgument(tag.inSameDatabase(provider),"IE00548: Tag is not part of this database");}  }
class C{  protected void resetAttribute(){  super.resetAttribute();  missing=false;  malformed=false;}  }
class C{  List<Named> findMatchingSymbols(String symbol){  List<Named> result=new ArrayList<>();  String qualifier=null;  String typename=symbol;  int ix=symbol.indexOf('.');  if (ix != -1) {    qualifier=symbol.substring(0,ix) + ".thrift";    typename=symbol.substring(ix + 1);  }  Named named=program.symbols().get(typename);  if (named != null) {    result.add(named);  }  for (  Program includedProgram : program.includes()) {    if (qualifier != null && !includedProgram.location().path().equals(qualifier)) {      continue;    }    named=includedProgram.symbols().get(typename);    if (named != null) {      result.add(named);    }  }  return result;}  }
class C{  File writeFile(String path,String body) throws Exception {  File f=new File(path);  if (f.getParentFile() != null)   f.getParentFile().mkdirs();  Writer out=new FileWriter(path);  try {    out.write(body);  }  finally {    out.close();  }  return f;}  }
class C{  public void finest(String msg){  throw new RuntimeException();}  }
class C{  public static Coordinate angleBisector(Coordinate a,Coordinate b,Coordinate c){  double len0=b.distance(a);  double len2=b.distance(c);  double frac=len0 / (len0 + len2);  double dx=c.x - a.x;  double dy=c.y - a.y;  Coordinate splitPt=new Coordinate(a.x + frac * dx,a.y + frac * dy);  return splitPt;}  }
class C{  void error(String msg){  System.err.println("Error: " + msg);  errors++;}  }
class C{  public synchronized void addYTextLabel(double y,String text,int scale){  mYTextLabels.get(scale).put(y,text);}  }
class C{  public WorksheetQuery(URL feedUrl){  super(feedUrl);}  }
class C{  private void doSetupOrganizationUserRemovedScenario(String userId,String organizationId,boolean removeOrganizationAndUser) throws NonUniqueBusinessKeyException {  Organization cust=new Organization();  cust.setOrganizationId(organizationId);  cust.setName("The organization");  cust.setAddress("my address is a very long string, which is stored in the database \n with line delimiters\n.");  cust.setEmail("organization@organization.com");  cust.setPhone("012345/678");  cust.setCutOffDay(1);  mgr.persist(cust);  PlatformUser user=new PlatformUser();  user.setUserId(userId);  user.setEmail("someMail@somehost.de");  user.setOrganization(cust);  user.setStatus(UserAccountStatus.LOCKED_NOT_CONFIRMED);  user.setLocale(Locale.ENGLISH.toString());  cust.addPlatformUser(user);  mgr.persist(user);  if (removeOrganizationAndUser) {    mgr.remove(user);    mgr.remove(cust);  }}  }
class C{  public <T>T doInTransaction(TransactionCallback<T> callback) throws Exception {  Session session=null;  try {    session=beginTransaction();    T result=callback.apply(session);    commitTransaction();    return result;  } catch (  Exception e) {    if (e instanceof HibernateException) {      log.error("Error while executing in transaction",e);    }    try {      rollbackTransaction();    } catch (    Exception logIt) {      log.debug("Error rollbacking transaction",logIt);    }    try {      if (session != null && session.isOpen()) {        session.close();      }    } catch (    Exception logIt) {      log.debug("Error closing session",logIt);    }    throw customizeException(e);  }}  }
class C{  private void appendMultiPointTaggedText(MultiPoint multipoint,int level,Writer writer) throws IOException {  appendMultiPointText(multipoint,level,writer);}  }
class C{  private void download() throws IOException, CompletedDownloadException, DownloadNotFoundException, IPBlackListedException, ContentTypeNotApkException, Md5FailedException {  mConnection.connect(fileSize,parent.isUpdate());  Log.d("DownloadManager","Starting Download " + (parent.getStatusState() instanceof ActiveState) + " "+ this.mDownloadedSize+ fileSize+ " "+ this.mRemainingSize);  byte[] bytes=new byte[1024];  int bytesRead;  BufferedInputStream mStream=mConnection.getStream();  if (parent.getStatusState() instanceof ActiveState) {    StatFs stat=new StatFs(download.getDestination());    long blockSize=stat.getBlockSize();    long availableBlocks=stat.getAvailableBlocks();    long avail=(blockSize * availableBlocks);    if (mRemainingSize > avail) {      parent.changeStatusState(new ErrorState(parent,EnumDownloadFailReason.NO_FREE_SPACE));    }  }  while ((bytesRead=mStream.read(bytes)) != -1 && parent.getStatusState() instanceof ActiveState) {    file.write(bytes,0,bytesRead);    this.mDownloadedSize+=bytesRead;    this.mProgress+=bytesRead;  }  if (parent.getStatusState() instanceof ActiveState) {    mDownloadFile.checkMd5();    mDownloadFile.rename();  }}  }
class C{  private void state2() throws IOException {  int[] selectionIds=readList(new File(filePrefix + "sel"));  int[] archivedIds=readList(new File(filePrefix + "arc"));  int[] variationIds=new int[lambda];  if (selectionIds.length != mu) {    throw new IOException("invalid selection length");  }  updatePopulation(archivedIds);  clearFile(new File(filePrefix + "sel"));  clearFile(new File(filePrefix + "arc"));  List<Solution> offspring=new ArrayList<Solution>();  for (int i=0; i < mu; i+=variation.getArity()) {    Solution[] parents=new Solution[variation.getArity()];    for (int j=0; j < variation.getArity(); j++) {      parents[j]=solutions.get(selectionIds[i + j]);    }    offspring.addAll(Arrays.asList(variation.evolve(parents)));  }  if (offspring.size() != lambda) {    throw new IOException("invalid variation length");  }  evaluateAll(offspring);  for (int i=0; i < lambda; i++) {    variationIds[i]=addToPopulation(offspring.get(i));  }  writePopulation(new File(filePrefix + "var"),variationIds);}  }
class C{  public static void showWindow(Window window){  window.setVisible(true);  if (window instanceof Frame) {    Frame f=(Frame)window;    int state=f.getExtendedState();    if ((state & Frame.ICONIFIED) > 0)     f.setExtendedState(state & ~Frame.ICONIFIED);  }  window.toFront();}  }
class C{  @Deprecated private void initHideAnimation(TypedArray attrs){  if (attrs.hasValue(R.styleable.ActionButton_animation_onHide)) {    final int animResId=attrs.getResourceId(R.styleable.ActionButton_animation_onHide,Animations.NONE.animResId);    setHideAnimation(Animations.load(getContext(),animResId));  }}  }
class C{  public static _QueryDeletedOption fromString(final String value) throws SOAPSerializationException {  return (_QueryDeletedOption)Enumeration.fromString(value,_QueryDeletedOption.VALUES_TO_INSTANCES);}  }
class C{  public SendByteArrayToNode(byte[] objArray,Context ctx){  objectArray=objArray;  context=ctx;}  }
class C{  public void initialize(int keysize,SecureRandom random){  checkKeySize(keysize);  this.pSize=keysize;  this.lSize=0;  this.random=random;  this.params=null;}  }
class C{  protected void sendFunctionGroup3(){  commandStation.function9Through12Packet(address,getF9(),getF9Momentary(),getF10(),getF10Momentary(),getF11(),getF11Momentary(),getF12(),getF12Momentary());}  }
class C{  public DriverTask discoverStorageProvider(StorageProvider storageProvider,List<StorageSystem> storageSystems){  DellSCDriverTask task=new DellSCDriverTask("discover");  try {    LOG.info("Getting information for storage provider [{}:{}] as user {}",storageProvider.getProviderHost(),storageProvider.getPortNumber(),storageProvider.getUsername());    StorageCenterAPI api=connectionManager.getConnection(storageProvider.getProviderHost(),storageProvider.getPortNumber(),storageProvider.getUsername(),storageProvider.getPassword(),true);    LOG.info("Connected to DSM {} as user {}",storageProvider.getProviderHost(),storageProvider.getUsername());    storageProvider.setAccessStatus(AccessStatus.READ_WRITE);    storageProvider.setManufacturer("Dell");    storageProvider.setProviderVersion(driverVersion);    storageProvider.setIsSupportedVersion(true);    EmDataCollector em=api.getDSMInfo();    if (em != null) {      LOG.info("Connected to {} DSM version {}, Java version {}",em.type,em.version,em.javaVersion);      storageProvider.setProviderVersion(em.version);    }    StorageCenter[] scs=api.getStorageCenterInfo();    for (    StorageCenter sc : scs) {      StorageSystem storageSystem=util.getStorageSystemFromStorageCenter(api,sc,null);      storageSystem.setSystemType(driverName);      storageSystems.add(storageSystem);    }    task.setStatus(DriverTask.TaskStatus.READY);  } catch (  Exception e) {    String msg=String.format("Exception encountered getting storage provider information: %s",e);    LOG.error(msg);    task.setFailed(msg);  }  return task;}  }
class C{  public FunctionWrapper(RhinoInterpreter ri,Function f,Object[] args){  interpreter=ri;  function=f;  arguments=args;}  }
class C{  public void onDestroy(){  Activity activity=this.cordova.getActivity();  if (isEnabled) {    activity.stopService(updateServiceIntent);    unbindServiceFromWebview(activity,updateServiceIntent);  }}  }
class C{  static void checkNotSupported(String[] supportedSuites){  for (  String suites : supportedSuites) {    if (KERBEROS_CIPHER_SUITES.contains(suites)) {      throw new RuntimeException("Supported list of cipher suites " + " should not include Kerberos cipher suites");    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Bitmap processBitmap(int resId){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + resId);  }  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  public static boolean isLikelyPerson(String word){  String strippedWord=stripWord(word);  if (strippedWord != null && strippedWord.length() > 2 && strippedWord.length() <= 17) {    boolean result=true;    for (int i=0; result && i < strippedWord.length(); i++) {      result=VALID_PERSON_CHARS.indexOf(strippedWord.charAt(i)) != -1;    }    return result;  } else {    return false;  }}  }
class C{  public void requestFocus(){  if (source instanceof Component) {    ((Component)source).requestFocus();  }}  }
class C{  public final void testValidateFails(){  EmailAddressValidator emailAddressValidator=new EmailAddressValidator("foo");  assertFalse(emailAddressValidator.validate("foo"));  assertFalse(emailAddressValidator.validate("foo@.com.my"));  assertFalse(emailAddressValidator.validate("foo123@.com"));  assertFalse(emailAddressValidator.validate("foo123@.com.com"));  assertFalse(emailAddressValidator.validate("foo()*@bar.com"));  assertFalse(emailAddressValidator.validate("foo@%*.com"));  assertFalse(emailAddressValidator.validate("foo@bar@test.com"));}  }
class C{  public static void main(String[] args) throws Exception {  new SetGenerator().start(args);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  protected void fireCenterChanged(NavigationEvent<PointND<? extends Number>> event){  for (  NavigationListener l : navigationListeners) {    l.centerChanged(event);  }}  }
class C{  public Matrix4d trapezoidCrop(double p0x,double p0y,double p1x,double p1y,double p2x,double p2y,double p3x,double p3y){  double aX=p1y - p0y, aY=p0x - p1x;  double m00=aY;  double m10=-aX;  double m30=aX * p0y - aY * p0x;  double m01=aX;  double m11=aY;  double m31=-(aX * p0x + aY * p0y);  double c3x=m00 * p3x + m10 * p3y + m30;  double c3y=m01 * p3x + m11 * p3y + m31;  double s=-c3x / c3y;  m00+=s * m01;  m10+=s * m11;  m30+=s * m31;  double d1x=m00 * p1x + m10 * p1y + m30;  double d2x=m00 * p2x + m10 * p2y + m30;  double d=d1x * c3y / (d2x - d1x);  m31+=d;  double sx=2.0 / d2x;  double sy=1.0 / (c3y + d);  double u=(sy + sy) * d / (1.0 - sy * d);  double m03=m01 * sy;  double m13=m11 * sy;  double m33=m31 * sy;  m01=(u + 1.0) * m03;  m11=(u + 1.0) * m13;  m31=(u + 1.0) * m33 - u;  m00=sx * m00 - m03;  m10=sx * m10 - m13;  m30=sx * m30 - m33;  set(m00,m01,0,m03,m10,m11,0,m13,0,0,1,0,m30,m31,0,m33);  properties=0;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:27.551 -0500",hash_original_method="5D85DC02B66532E4C85C7A2666266463",hash_generated_method="83C4751FEB7E63363FEE390ABE3499E1") public DERGeneralizedTime(Date time){  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss'Z'");  dateF.setTimeZone(new SimpleTimeZone(0,"Z"));  this.time=dateF.format(time);}  }
class C{  public void enableAllowCrop(boolean allowCrop){  if (allowCrop && mHaveLayout) {    throw new IllegalArgumentException("Cannot set crop after view has been laid out");  }  if (!allowCrop && mAllowCrop) {    throw new IllegalArgumentException("Cannot unset crop mode");  }  mAllowCrop=allowCrop;}  }
class C{  public void logRecommendations(Map<VpoolUse,List<Recommendation>> recommendationMap){  for (  Map.Entry<VpoolUse,List<Recommendation>> entry : recommendationMap.entrySet()) {    logRecommendations(entry.getKey().name(),entry.getValue());  }}  }
class C{  public void addImage(Image image){  addProperty(image);}  }
class C{  public XBLOMTemplateElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override public int[] buildColorTable(){  int[] table=new int[colors];  buildColorTable(root,table,0);  return table;}  }
class C{  private void initializeKeyMap(AccessProfile accessProfile){  _keyMap.put(Constants.dbClient,_dbClient);  _keyMap.put(Constants.ACCESSPROFILE,accessProfile);  _keyMap.put(Constants.PROPS,accessProfile.getProps());  _keyMap.put(Constants._serialID,accessProfile.getserialID());  _keyMap.put(Constants._nativeGUIDs,Sets.newHashSet());}  }
class C{  public void printString(String v) throws IOException {  printString(v,0,v.length());}  }
class C{  public boolean isVolumeExported(DbClient dbClient,boolean ignoreRPExports,boolean ignoreVPlexExports){  boolean isExported=false;  URIQueryResultList exportGroupURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(getId()),exportGroupURIs);  if (ignoreRPExports) {    while (exportGroupURIs.iterator().hasNext()) {      URI exportGroupURI=exportGroupURIs.iterator().next();      if (exportGroupURI != null) {        ExportGroup exportGroup=dbClient.queryObject(ExportGroup.class,exportGroupURI);        if (!exportGroup.checkInternalFlags(Flag.RECOVERPOINT)) {          isExported=true;          break;        }      }    }  } else {    isExported=exportGroupURIs.iterator().hasNext();  }  return isExported;}  }
class C{  protected VariableDeclarationImpl(){  super();}  }
class C{  public static String formatTextBox(String text,int width){  requireNonNull(text);  return formatTextBox(text,width,WORDS,Collections.emptySet());}  }
class C{  ExternalProblem(Socket socket) throws IOException {  this(socket.getInputStream(),socket.getOutputStream());}  }
class C{  private void sum(Object targetObj,TaggedLogAPIEntity srcObj,String fieldName) throws Exception {  try {    String fn=fieldName.substring(0,1).toUpperCase() + fieldName.substring(1,fieldName.length());    Method srcGetMethod=srcObj.getClass().getMethod("get" + fn);    Object srcValue=srcGetMethod.invoke(srcObj);    if (srcValue == null) {      return;    }    Method targetGetMethod=targetObj.getClass().getMethod("get" + fn);    Object targetValue=targetGetMethod.invoke(targetObj);    if (targetValue instanceof Long) {      Method setM=targetObj.getClass().getMethod("set" + fn,long.class);      Long tmp1=(Long)targetValue;      Long tmp2=null;      if (srcValue instanceof String) {        tmp2=Long.valueOf((String)srcValue);      } else       if (srcValue instanceof Long) {        tmp2=(Long)srcValue;      } else {        throw new IllegalAggregateFieldTypeException(srcValue.getClass().toString() + " type is not support. The source type must be Long or String");      }      setM.invoke(targetObj,tmp1.longValue() + tmp2.longValue());    } else     if (targetValue instanceof Double) {      Method setM=targetObj.getClass().getMethod("set" + fn,double.class);      Double tmp1=(Double)targetValue;      String src=(String)srcValue;      Double tmp2=Double.valueOf(src);      setM.invoke(targetObj,tmp1.doubleValue() + tmp2.doubleValue());    } else {      throw new IllegalAggregateFieldTypeException(targetValue.getClass().toString() + " type is not support. The target type must be long or double");    }  } catch (  Exception ex) {    LOG.error("Cannot do sum aggregation for field " + fieldName,ex);    throw ex;  }}  }
class C{  private void removeFromStack(Entry<V> e){  e.stackPrev.stackNext=e.stackNext;  e.stackNext.stackPrev=e.stackPrev;  e.stackPrev=e.stackNext=null;  stackSize--;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.ROUTE__OWNED_ENDPOINTS:    return ownedEndpoints != null && !ownedEndpoints.isEmpty();case EipPackage.ROUTE__OWNED_CHANNELS:  return ownedChannels != null && !ownedChannels.isEmpty();case EipPackage.ROUTE__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.ROUTE__EXCHANGE_TYPE:return exchangeType != EXCHANGE_TYPE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void dismissElectronBeam(){  mElectronBeam.dismiss();  mElectronBeamPrepared=false;  mElectronBeamReady=true;}  }
class C{  private boolean isEnumType(){  return "java.lang.Enum".equals(mExtendedClass);}  }
class C{  public static void apply(StringBuilder dest,CharSequence diff){  try {    if (diff == null) {      return;    }    int pos=dest.length() - 1;    if (pos < 0) {      return;    }    for (int i=0; i < diff.length() / 2; i++) {      char cmd=diff.charAt(2 * i);      char param=diff.charAt(2 * i + 1);      int par_num=(param - 'a' + 1);switch (cmd) {case '-':        pos=pos - par_num + 1;      break;case 'R':    dest.setCharAt(pos,param);  break;case 'D':int o=pos;pos-=par_num - 1;dest.delete(pos,o + 1);break;case 'I':dest.insert(pos+=1,param);break;}pos--;}} catch (StringIndexOutOfBoundsException x) {}catch (ArrayIndexOutOfBoundsException x) {}}  }
class C{  @Override public Classifier aggregate(Classifier toAggregate) throws Exception {  if (m_structure == null && m_Classifiers.length == 1 && (m_Classifiers[0] instanceof weka.classifiers.rules.ZeroR)) {    setClassifiers(new Classifier[0]);  }  addPreBuiltClassifier(toAggregate);  return this;}  }
class C{  private void examineBasicBlocks() throws DataflowAnalysisException, CFGBuilderException {  Iterator<BasicBlock> bbIter=invDataflow.getCFG().blockIterator();  while (bbIter.hasNext()) {    BasicBlock basicBlock=bbIter.next();    if (basicBlock.isNullCheck()) {      analyzeNullCheck(invDataflow,basicBlock);    } else     if (!basicBlock.isEmpty()) {      InstructionHandle lastHandle=basicBlock.getLastInstruction();      Instruction last=lastHandle.getInstruction();switch (last.getOpcode()) {case Constants.IF_ACMPEQ:case Constants.IF_ACMPNE:        analyzeRefComparisonBranch(basicBlock,lastHandle);      break;case Constants.IFNULL:case Constants.IFNONNULL:    analyzeIfNullBranch(basicBlock,lastHandle);  break;default :break;}}}}  }
class C{  public static XPathExpression compileXPath(XPath xpath,String expr){  try {    return xpath.compile(expr);  } catch (  XPathExpressionException e) {    throw new XmlException(e);  }}  }
class C{  private void checkPipelines(int i){  CastNode cn;  if (i < castNodes.length) {    cn=castNodes[i];  } else {    cn=null;  }  if (cn != null) {    Samples<?> samples=argSamples.get(i);    if (samples.positiveSamples().isEmpty() && samples.negativeSamples().isEmpty()) {      print(1,"No samples");    } else {      testPipeline(cn,samples);      print(1,"Pipeline check OK (" + samples.positiveSamples().size() + ","+ samples.negativeSamples().size()+ ")");    }  }}  }
class C{  public static DataType fromClass(Class<?> clazz){  return CLASS_MAP.get(clazz);}  }
class C{  public boolean isSetClusterJoinRequest(){  return this.clusterJoinRequest != null;}  }
class C{  public JLayeredPane(){  setLayout(null);}  }
class C{  public static boolean numericTypeIntOrSmaller(Type type){  return type == Type.BYTE || type == Type.SHORT || type == Type.INTEGER;}  }
class C{  protected void cleanDirectory(File dir){  for (  File file : dir.listFiles()) {    if (file.isDirectory()) {      cleanDirectory(file);    } else {      file.delete();    }  }  dir.delete();}  }
class C{  private static int[][] canonicalArrayForm(Vector ranges){  return (int[][])ranges.toArray(new int[ranges.size()][]);}  }
class C{  public void moveToInsertRow() throws SQLException {  onInsertRow=true;  super.moveToInsertRow();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static int compare(DBIDRef id1,DBIDRef id2){  return DBIDFactory.FACTORY.compare(id1,id2);}  }
class C{  public boolean equals(Object other){  if (other == null || !(other instanceof GF2Polynomial)) {    return false;  }  GF2Polynomial otherPol=(GF2Polynomial)other;  if (len != otherPol.len) {    return false;  }  for (int i=0; i < blocks; i++) {    if (value[i] != otherPol.value[i]) {      return false;    }  }  return true;}  }
class C{  public static final Integer extractIplIdentityHostManufacturer(LocoNetMessage m){  return m.getElement(4);}  }
class C{  public static boolean isPublic(int flags){  return (flags & AccPublic) != 0;}  }
class C{  protected int expandCluster(final DBIDRef seed,final int clusterid,final WritableIntegerDataStore clusterids,final ModifiableDoubleDBIDList neighbors,ArrayModifiableDBIDs activeSet,RangeQuery<V> rq,FiniteProgress pprog){  assert (activeSet.size() == 0);  int clustersize=1 + processCorePoint(seed,neighbors,clusterid,clusterids,activeSet);  LOG.incrementProcessed(pprog);  final DBIDVar id=DBIDUtil.newVar();  while (!activeSet.isEmpty()) {    activeSet.pop(id);    neighbors.clear();    rq.getRangeForDBID(id,epsilon,neighbors);    if (neighbors.size() >= minpts) {      clustersize+=processCorePoint(id,neighbors,clusterid,clusterids,activeSet);    }    LOG.incrementProcessed(pprog);  }  return clustersize;}  }
class C{  @Override void phaseChange(int oldPhase){}  }
class C{  public UnsignedInteger add(int increment){  return valueOf(getValue() + increment);}  }
class C{  public void init(InputStream is){  _is=is;  _method=null;  _isLastChunk=true;  _chunkLength=0;  _peek=-1;  _refs=null;  _replyFault=null;  if (_serializerFactory == null)   _serializerFactory=new SerializerFactory();}  }
class C{  public static String createFaultXml(CodedException ex) throws IOException {  return createFaultXml(ex.getFaultCodeAsQName(),ex.getFaultString(),ex.getFaultActor(),ex.getFaultDetail());}  }
class C{  public GridConstrainer(double width,double height,double theta,boolean visible){  if (width <= 0 || height <= 0) {    throw new IllegalArgumentException("Width or height is <= 0");  }  this.width=width;  this.height=height;  this.theta=theta;  this.isVisible=visible;}  }
class C{  static <T>Observable.Transformer<T,T> apply(){  return (Observable.Transformer<T,T>)ioTransformer;}  }
class C{  public void unassignVnasServers(URI projectId,VirtualNasParam vNasParam){  client.put(String.class,vNasParam,getVnasUnAssignUrl(),projectId);}  }
class C{  @SubscribeEvent public static void onConfigChanged(ConfigChangedEvent.OnConfigChangedEvent event){  if (event.getModID().equals(TestMod3.MODID)) {    ConfigManager.load(TestMod3.MODID,Config.Type.INSTANCE);  }}  }
class C{  private boolean containsNullValue(){  Entry<K,V>[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry<K,V> e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  public void cfgIncludeLookupOnly(ConfigurationValue val,boolean includeLookupOnly){  this.includeLookupOnly=includeLookupOnly;}  }
class C{  public u addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.REACTION__TRIGGER:    if (resolve)     return getTrigger();  return basicGetTrigger();case SGraphPackage.REACTION__EFFECT:if (resolve) return getEffect();return basicGetEffect();case SGraphPackage.REACTION__PROPERTIES:return getProperties();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean itemShiftClickAllowed(int slot,ItemStack stack){  return itemPlaceAllowed(slot,stack);}  }
class C{  public void onLaserFinish(){}  }
class C{  public void endVisit(CharacterLiteral node){}  }
class C{  public Map<ShardId,IndexShardSnapshotStatus> currentSnapshotShards(SnapshotId snapshotId){  SnapshotShards snapshotShards=shardSnapshots.get(snapshotId);  if (snapshotShards == null) {    return null;  } else {    return snapshotShards.shards;  }}  }
class C{  public RandomMixedRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  public MAcctProcessor(Properties ctx,int C_AcctProcessor_ID,String trxName){  super(ctx,C_AcctProcessor_ID,trxName);  if (C_AcctProcessor_ID == 0) {    setFrequencyType(FREQUENCYTYPE_Hour);    setFrequency(1);    setKeepLogDays(7);  }}  }
class C{  public boolean isOrderReady(final Player player){  final String orderString=player.getQuest(questSlot);  final String[] order=orderString.split(";");  final int numberOfProductItems=Integer.parseInt(order[0]);  final long orderTime=Long.parseLong(order[2]);  final long timeNow=new Date().getTime();  return timeNow - orderTime >= getProductionTime(numberOfProductItems) * 1000L;}  }
class C{  public void test_null_bnode_uri_literal(){  final V v=new V();  final IVComparator c=new IVComparator();  assertLT(c.compare(null,v.inline_bnode1));  assertLT(c.compare(null,v.sid2));  assertLT(c.compare(v.inline_bnode1,v.noninline_uri1));  assertLT(c.compare(v.sid2,v.noninline_uri1));  assertLT(c.compare(v.noninline_uri1,v.inline_xsd_byte1));}  }
class C{  private void renameValueClassNames(Collection<PojoDescriptor> selPojos,String regex,String replace){  for (  PojoDescriptor pojo : selPojos)   pojo.valueClassName(pojo.valueClassName().replaceAll(regex,replace));}  }
class C{  @Override public void update(ClassifyTab owner,JMenuItem menuitem){}  }
class C{  public XML addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void ignore(final String reason,final Throwable exception){}  }
class C{  public boolean isResponse(){  return (_flags & DNSConstants.FLAGS_QR_MASK) == DNSConstants.FLAGS_QR_RESPONSE;}  }
class C{  public Complex divides(Complex that){  return this.times(that.reciprocal());}  }
class C{  private void showCommandDetails(IRCService service,Server server,Conversation conversation,String command) throws CommandException {  CommandParser cp=CommandParser.getInstance();  HashMap<String,BaseHandler> commands=cp.getCommands();  if (commands.containsKey(command)) {    Message message=new Message("Help of /" + command + "\n"+ commands.get(command).getUsage()+ "\n"+ commands.get(command).getDescription(service)+ "\n");    message.setColor(Message.COLOR_YELLOW);    conversation.addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());    service.sendBroadcast(intent);  } else {    throw new CommandException(service.getString(R.string.unknown_command,command));  }}  }
class C{  @Override public Toolbar build(){  return new ToolbarDefault(mContext);}  }
class C{  public EObject basicGetElementRef(){  return elementRef;}  }
class C{  public boolean isLast(){  return last;}  }
class C{  public LookupList(RandomAccessFile raf,int offset,LookupSubtableFactory factory) throws IOException {  raf.seek(offset);  lookupCount=raf.readUnsignedShort();  lookupOffsets=new int[lookupCount];  lookups=new Lookup[lookupCount];  for (int i=0; i < lookupCount; i++) {    lookupOffsets[i]=raf.readUnsignedShort();  }  for (int i=0; i < lookupCount; i++) {    lookups[i]=new Lookup(factory,raf,offset + lookupOffsets[i]);  }}  }
class C{  public Long hset(final String key,final String field,final String value){  checkIsInMulti();  client.hset(key,field,value);  return client.getIntegerReply();}  }
class C{  private boolean txContainsKey(Transaction tx,String key){  TransactionProxyImpl<String,Integer> proxy=(TransactionProxyImpl<String,Integer>)tx;  IgniteInternalTx txEx=proxy.tx();  IgniteTxEntry entry=txEx.entry(context(0).txKey(context(0).toCacheKeyObject(key)));  return entry != null;}  }
class C{  public ConfigurationHTTPAdapter configure(File configFile) throws RuntimeException {  if (log.isDebugEnabled()) {    log.debug("configuring from file: " + configFile.getName());  }  try {    ConfigurationHTTPAdapterParser.doConfigure(this,new FileInputStream(configFile),configFile.toString());  } catch (  FileNotFoundException fnfe) {    throw new RuntimeException("could not find file: " + configFile,fnfe);  }  return this;}  }
class C{  private void addCSSClasses(SVGPlot svgp){  if (!svgp.getCSSClassManager().contains(SELECTEDHULL)) {    final StyleLibrary style=context.getStyleLibrary();    CSSClass cls=new CSSClass(this,SELECTEDHULL);    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,style.getColor(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getColor(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,".25");    cls.setStatement(SVGConstants.CSS_STROKE_LINECAP_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_LINEJOIN_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  public void resetLabels(){  AbstractInsnNode insn=first;  while (insn != null) {    if (insn instanceof LabelNode) {      ((LabelNode)insn).resetLabel();    }    insn=insn.next;  }}  }
class C{  public int dump(File file) throws IOException {  File tmp=new File(file.getParentFile(),file.getName() + ".prt");  Iterator<Map.Entry<Long,Integer>> i=this.entrySet().iterator();  DataOutputStream os;  try {    os=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(tmp),(Integer.SIZE + Long.SIZE) * 1024));  } catch (  final OutOfMemoryError e) {    os=new DataOutputStream(new FileOutputStream(tmp));  }  int c=0;  Map.Entry<Long,Integer> e;  while (i.hasNext()) {    e=i.next();    os.writeLong(e.getKey().longValue());    os.writeInt(e.getValue().intValue());    c++;  }  os.flush();  os.close();  tmp.renameTo(file);  assert file.exists() : file.toString();  assert !tmp.exists() : tmp.toString();  return c;}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  private void doAddNew() throws ServiceException, IOException {  ListEntry newEntry=new ListEntry();  newEntry.getCustomElements().replaceWithLocal(newContents);  originalEntry=service.insert(listFeedUrl,newEntry);  newContents=null;}  }
class C{  @Override public void clear(){  super.clear();  long[] keys=_set;  double[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  @Override public DoubleDBIDList reverseKNNQuery(DBIDRef id,int k){  if (k > settings.kmax) {    throw new IllegalArgumentException("Parameter k has to be less or equal than " + "parameter kmax of the MCop-Tree!");  }  ModifiableDoubleDBIDList result=DBIDUtil.newDistanceDBIDList();  ModifiableDBIDs candidates=DBIDUtil.newArray();  doReverseKNNQuery(k,id,result,candidates);  Map<DBID,KNNList> knnLists=batchNN(getRoot(),candidates,k);  result.sort();  for (DBIDIter iter=candidates.iter(); iter.valid(); iter.advance()) {    DBID cid=DBIDUtil.deref(iter);    KNNList cands=knnLists.get(cid);    for (DoubleDBIDListIter iter2=cands.iter(); iter2.valid(); iter2.advance()) {      if (DBIDUtil.equal(id,iter2)) {        result.add(iter2.doubleValue(),cid);        break;      }    }  }  result.sort();  return result;}  }
class C{  public GlowPlayer(GlowSession session,PlayerProfile profile,PlayerReader reader){  super(initLocation(session,reader),profile);  setBoundingBox(0.6,1.8);  this.session=session;  chunkLock=world.newChunkLock(getName());  int compression=session.getServer().getCompressionThreshold();  if (compression > 0) {    session.enableCompression(compression);  }  session.send(new LoginSuccessMessage(profile.getUniqueId().toString(),profile.getName()));  session.setProtocol(ProtocolType.PLAY);  hasPlayedBefore=reader.hasPlayedBefore();  if (hasPlayedBefore) {    firstPlayed=reader.getFirstPlayed();    lastPlayed=reader.getLastPlayed();    bedSpawn=reader.getBedSpawnLocation();  } else {    firstPlayed=0;    lastPlayed=0;  }  invMonitor=new InventoryMonitor(getOpenInventory());  server.getPlayerStatisticIoService().readStats(this);}  }
class C{  public long readLong(){  return (data[position++] & 0xFFL) << 56 | (data[position++] & 0xFFL) << 48 | (data[position++] & 0xFFL) << 40 | (data[position++] & 0xFFL) << 32 | (data[position++] & 0xFFL) << 24 | (data[position++] & 0xFFL) << 16 | (data[position++] & 0xFFL) << 8 | (data[position++] & 0xFFL);}  }
class C{  public static boolean isSupportedAddMirrorsVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedAddMirrorsVirtualPoolChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  if (VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(currentVpool.getHighAvailability()) && VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(newVpool.getHighAvailability())) {    return isSupportedAddMirrorsVirtualPoolChangeForVplexDistributed(volume,currentVpool,newVpool,dbClient,notSuppReasonBuff);  }  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,HIGH_AVAILABILITY,PROTECTION_VARRAY_SETTINGS,FAST_EXPANSION,ACLS,INACTIVE,DRIVE_TYPE,ARRAY_INFO,PROVISIONING_TYPE,PROTOCOLS};  String[] contain=new String[]{MATCHED_POOLS,ASSIGNED_STORAGE_POOLS};  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,contain);  if (!changes.isEmpty()) {    notSuppReasonBuff.append("These target virtual pool differences are invalid: ");    fillInNotSupportedReasons(changes,notSuppReasonBuff);    return false;  }  return true;}  }
class C{  public void verifyBeanPropertyExist(String propertyName) throws Exception {  Class clazz=Class.forName(className);  String getterMethodName=generateGetterMethodName(propertyName);  verifyMethodExist(getterMethodName);  String setterMethodName=generateSetterMethodName(propertyName);  verifyMethodExist(setterMethodName);}  }
class C{  public Connection connect(final String url,final Properties props) throws SQLException {  try {    UrlParser urlParser=UrlParser.parse(url,props);    if (urlParser == null) {      return null;    }    if (urlParser.getHostAddresses() == null) {      return null;    } else {      ReentrantLock lock=new ReentrantLock();      Protocol protocol=Utils.retrieveProxy(urlParser,lock);      return MariaDbConnection.newConnection(protocol,lock);    }  } catch (  QueryException e) {    ExceptionMapper.throwException(e,null,null);    return null;  }}  }
class C{  public T inflate(){  return getObjectFromCacheOrInflate();}  }
class C{  private double computeConfidence(int support,int samples){  final double z=NormalDistribution.standardNormalQuantile(alpha);  final double eprob=support / (double)samples;  return Math.max(0.,eprob - z * Math.sqrt((eprob * (1 - eprob)) / samples));}  }
class C{  public long numUpdates(){  return this.cqQuery.getVsdStats().getNumUpdates();}  }
class C{  public boolean isGroupExpanded(int groupPosition){  GroupMetadata groupMetadata;  for (int i=mExpGroupMetadataList.size() - 1; i >= 0; i--) {    groupMetadata=mExpGroupMetadataList.get(i);    if (groupMetadata.gPos == groupPosition) {      return true;    }  }  return false;}  }
class C{  public void testMisconfiguredField() throws Exception {  Directory dir=newDirectory();  IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(null));  Document doc=new Document();  doc.add(new StringField("foo","bar",Field.Store.NO));  iw.addDocument(doc);  DirectoryReader dr=DirectoryReader.open(iw);  LeafReader r=getOnlyLeafReader(dr);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  dr.close();  iw.close();  dir.close();}  }
class C{  public void run() throws TemplateException {{    Iterator<TagData> it=tags.iterator();    while (it.hasNext()) {      TagData td=it.next();      SourceCode cfml=td.cfml;      cfml.setPos(td.pos);      try {        if (td.libTag.getEvaluator() != null)         td.libTag.getEvaluator().evaluate(td.tag,td.libTag,td.flibs);      } catch (      EvaluatorException e) {        clear();        throw new TemplateException(cfml,e);      }catch (      Throwable e) {        clear();        throw new TemplateException(cfml,e);      }    }    tags.clear();  }  Iterator<FunctionData> it=functions.iterator();  while (it.hasNext()) {    FunctionData td=it.next();    SourceCode cfml=td.cfml;    cfml.setPos(td.pos);    try {      if (td.flf.getEvaluator() != null)       td.flf.getEvaluator().evaluate(td.bif,td.flf);    } catch (    EvaluatorException e) {      clear();      throw new TemplateException(cfml,e);    }catch (    Throwable e) {      clear();      throw new TemplateException(cfml,e);    }  }  functions.clear();}  }
class C{  public DefaultIntervalCategoryDataset(String[] seriesNames,Number[][] starts,Number[][] ends){  this(seriesNames,null,starts,ends);}  }
class C{  private SpeechletResponse handleDateDialogRequest(final Intent intent,final Session session){  CityDateValues<String,String> dateObject=getDateFromIntent(intent);  if (session.getAttributes().containsKey(SESSION_CITY)) {    String city=(String)session.getAttribute(SESSION_CITY);    String station=(String)session.getAttribute(SESSION_STATION);    CityDateValues<String,String> cityStationMap=new CityDateValues<String,String>(city,station);    return getFinalTideResponse(cityStationMap,dateObject);  } else {    session.setAttribute(SESSION_DATE_DISPLAY,dateObject.speechValue);    session.setAttribute(SESSION_DATE_REQUEST,dateObject.apiValue);    String speechOutput="For which city would you like tide information for " + dateObject.speechValue + "?";    String repromptText="For which city?";    return newAskResponse(speechOutput,repromptText);  }}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public Plugins(InvocationPlugins invocationPlugins){  this.invocationPlugins=invocationPlugins;  this.nodePlugins=new NodePlugin[0];  this.parameterPlugins=new ParameterPlugin[0];  this.typePlugins=new TypePlugin[0];  this.inlineInvokePlugins=new InlineInvokePlugin[0];}  }
class C{  public static void processPrintRequest(Session session,String UID,JSONObject params) throws JSONException {  PrintProcessor processor=PrintingUtilities.getPrintProcessor(params.getJSONArray("data"));  log.debug("Using {} to print",processor.getClass().getName());  try {    PrintOutput output=new PrintOutput(params.optJSONObject("printer"));    PrintOptions options=new PrintOptions(params.optJSONObject("options"),output);    processor.parseData(params.optJSONArray("data"),options);    processor.print(output,options);    log.info("Printing complete");    PrintSocketClient.sendResult(session,UID,null);  } catch (  PrinterAbortException e) {    log.warn("Printing cancelled");    PrintSocketClient.sendError(session,UID,"Printing cancelled");  }catch (  Exception e) {    log.error("Failed to print",e);    PrintSocketClient.sendError(session,UID,e);  }  PrintingUtilities.releasePrintProcessor(processor);}  }
class C{  public void printDepthFirstToStream(PrintStream out){  print(new DepthFirstEnumerator(_firstNode),out);}  }
class C{  public RenameKeyPairAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("RenameKeyPairAction.statusbar"));  putValue(NAME,res.getString("RenameKeyPairAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("RenameKeyPairAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("RenameKeyPairAction.image")))));}  }
class C{  @Override public void onUndeploy(ClassLoader ldr){  for (  Class<?> cls : clsMap.keySet()) {    if (ldr.equals(cls.getClassLoader()))     clsMap.remove(cls);  }  U.clearClassCache(ldr);}  }
class C{  public static JavaUnicodeEscaper outsideOf(final int codepointLow,final int codepointHigh){  return new JavaUnicodeEscaper(codepointLow,codepointHigh,false);}  }
class C{  public void addToResult(String Result){  String oldResult=getResult();  if (Result == null || Result.length() == 0)   ; else   if (oldResult == null || oldResult.length() == 0)   setResult(Result); else   setResult(oldResult + "\n-\n" + Result);}  }
class C{  protected TN4ClassifierImpl(){  super();}  }
class C{  public ByteVector put2(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  protected void writeCommonStreamData(OutputStream writer) throws IOException {  String requestBody=buildCommonParams(getParamKeyValues(),getParamsEncoding()).toString();  if (!(writer instanceof CounterOutputStream))   Logger.i("Push RequestBody: " + requestBody);  writer.write(requestBody.getBytes());}  }
class C{  public void increment(long inc){  this.value+=inc;}  }
class C{  public boolean isProcessed(Trace trace,Node node,Direction direction){  boolean ret=false;  if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) {    if (uriFilter == null || uriFilter.test(node.getUri())) {      ret=true;    }  }  if (log.isLoggable(Level.FINEST)) {    log.finest("ProcessManager/Processor: isProcessed trace=" + trace + " node="+ node+ " direction="+ direction+ "? "+ ret);  }  return ret;}  }
class C{  private static Address copyToBootImage(Object jdkObject,boolean allocOnly,Address overwriteAddress,Object parentObject,boolean untraced,int alignCode) throws IllegalAccessException {  try {    BootImageMap.Entry mapEntry=BootImageMap.findOrCreateEntry(jdkObject);    if ((!mapEntry.imageAddress.EQ(OBJECT_NOT_ALLOCATED)) && overwriteAddress.isMax()) {      return mapEntry.imageAddress;    }    if (verbosity.isAtLeast(DETAILED))     depth++;    Class<?> jdkType=jdkObject.getClass();    RVMType rvmType=getRvmType(jdkType);    if (rvmType == null) {      if (verbosity.isAtLeast(DETAILED))       traverseObject(jdkObject);      if (verbosity.isAtLeast(DETAILED))       depth--;      return OBJECT_NOT_PRESENT;    }    if (jdkType.isArray()) {      int arrayCount=Array.getLength(jdkObject);      RVMArray rvmArrayType=rvmType.asArray();      boolean needsIdentityHash=mapEntry.requiresIdentityHashCode();      int identityHashValue=mapEntry.getIdentityHashCode();      Address arrayImageAddress=(overwriteAddress.isMax()) ? bootImage.allocateArray(rvmArrayType,arrayCount,needsIdentityHash,identityHashValue,alignCode) : overwriteAddress;      mapEntry.imageAddress=arrayImageAddress;      mapEntry.imageAddress=copyArrayToBootImage(arrayCount,arrayImageAddress,jdkObject,jdkType,rvmArrayType,allocOnly,overwriteAddress,parentObject,untraced);      if (!allocOnly) {        if (verbosity.isAtLeast(DETAILED))         traceContext.push("",jdkObject.getClass().getName(),"tib");        Address tibImageAddress=copyToBootImage(rvmType.getTypeInformationBlock(),allocOnly,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);        if (verbosity.isAtLeast(DETAILED))         traceContext.pop();        if (tibImageAddress.EQ(OBJECT_NOT_ALLOCATED)) {          fail("can't copy tib for " + jdkObject);        }        ObjectModel.setTIB(bootImage,mapEntry.imageAddress,tibImageAddress,rvmType);      }    } else     if (jdkObject instanceof TIB) {      Object backing=((RuntimeTable<?>)jdkObject).getBacking();      int alignCodeValue=((TIB)jdkObject).getAlignData();      if (verbosity.isAtLeast(DETAILED))       say("Encoding value " + alignCodeValue + " into tib");      mapEntry.imageAddress=copyToBootImage(backing,allocOnly,overwriteAddress,jdkObject,rvmType.getTypeRef().isRuntimeTable(),alignCodeValue);      if (verbosity.isAtLeast(DETAILED))       say(String.format("TIB address = %x, encoded value = %d, requested = %d%n",mapEntry.imageAddress.toInt(),AlignmentEncoding.extractTibCode(mapEntry.imageAddress),alignCodeValue));      if (!allocOnly) {        copyTIBToBootImage(rvmType,jdkObject,mapEntry.imageAddress);      }    } else     if (rvmType == RVMType.ObjectReferenceArrayType || rvmType.getTypeRef().isRuntimeTable()) {      Object backing=((RuntimeTable<?>)jdkObject).getBacking();      mapEntry.imageAddress=copyToBootImage(backing,allocOnly,overwriteAddress,jdkObject,rvmType.getTypeRef().isRuntimeTable(),AlignmentEncoding.ALIGN_CODE_NONE);      if (!allocOnly) {        copyTIBToBootImage(rvmType,jdkObject,mapEntry.imageAddress);      }    } else     if (jdkObject instanceof RuntimeTable) {      Object backing=((RuntimeTable<?>)jdkObject).getBacking();      mapEntry.imageAddress=copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);    } else     if (rvmType == RVMType.CodeArrayType) {      if (verbosity.isAtLeast(DETAILED))       depth--;      Object backing=((CodeArray)jdkObject).getBacking();      return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);    } else     if (rvmType.getTypeRef().isMagicType()) {      say("Unhandled copying of magic type: " + rvmType.getDescriptor().toString() + " in object of type "+ parentObject.getClass().toString());      fail("incomplete boot image support");    } else {      if (rvmType instanceof RVMArray)       fail("This isn't a scalar " + rvmType);      RVMClass rvmScalarType=rvmType.asClass();      boolean needsIdentityHash=mapEntry.requiresIdentityHashCode();      int identityHashValue=mapEntry.getIdentityHashCode();      Address scalarImageAddress=(overwriteAddress.isMax()) ? bootImage.allocateScalar(rvmScalarType,needsIdentityHash,identityHashValue) : overwriteAddress;      mapEntry.imageAddress=scalarImageAddress;      mapEntry.imageAddress=copyClassToBootImage(scalarImageAddress,jdkObject,jdkType,rvmScalarType,allocOnly,overwriteAddress,parentObject,untraced);      if (!allocOnly) {        copyTIBToBootImage(rvmType,jdkObject,mapEntry.imageAddress);      }    }    if (verbosity.isAtLeast(DETAILED))     depth--;    return mapEntry.imageAddress;  } catch (  Error e) {    e=new Error(e.getMessage() + "\nwhile copying " + jdkObject+ (jdkObject != null ? ":" + jdkObject.getClass() : "")+ " from "+ parentObject+ (parentObject != null ? ":" + parentObject.getClass() : ""),e.getCause() != null ? e.getCause() : e);    throw e;  }}  }
class C{  public void testGetProcessorService(){  System.out.println("getProcessorService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  ProcessorService result=instance.getProcessorService();  assertEquals(mockProcessorService,result);  setVerifyMode();}  }
class C{  @Override @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(false);  return null;}  }
class C{  public static boolean isSaturday(int column,int firstDayOfWeek){  return (firstDayOfWeek == Time.SUNDAY && column == 6) || (firstDayOfWeek == Time.MONDAY && column == 5) || (firstDayOfWeek == Time.SATURDAY && column == 0);}  }
class C{  public static int ENETDOWN(){  return Errno.ENETDOWN.intValue();}  }
class C{  public boolean compareErrorMessage(final String expected){  Assert.assertNotNull("Event is null",mEvent);  boolean res;  res=mEvent instanceof ErrorEvent;  res&=expected.equals(mEvent.getMessage());  return res;}  }
class C{  public NetworkBuilder<N,E> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.333 -0400",hash_original_method="D48AE50A84087A4C1BFE9CE0B93380B9",hash_generated_method="4B053211185EA99FD2BC5B2841DAEC8F") public boolean delete(){  return deleteStrategy.deleteQuietly(new File(path));}  }
class C{  public static SupplierRevenueSqlResult executeQuery(DataService dm,long month){  try {    String locale=dm.getCurrentUser().getLocale();    String sql=createSqlQuery(month,LocaleHandler.getLocaleFromString(locale));    Query query=dm.createNativeQuery(sql);    @SuppressWarnings("unchecked") List<Object[]> resultList=query.getResultList();    return readData(resultList);  } catch (  Exception e) {    SaaSSystemException sse=new SaaSSystemException(e);    logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_READ_DATA_FOR_REVENUE_REPORT_FAILED);    throw sse;  }}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  public ImmutableListMultimap<String,String> parameters(){  return parameters;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.EXECUTION_SCOPE__NAME:    setName((String)newValue);  return;case SexecPackage.EXECUTION_SCOPE__STATE_VECTOR:setStateVector((StateVector)newValue);return;case SexecPackage.EXECUTION_SCOPE__SUB_SCOPES:getSubScopes().clear();getSubScopes().addAll((Collection<? extends ExecutionScope>)newValue);return;case SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE:setSuperScope((ExecutionScope)newValue);return;case SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES:getEnterSequences().clear();getEnterSequences().addAll((Collection<? extends Sequence>)newValue);return;case SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE:setExitSequence((Sequence)newValue);return;case SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE:setInitSequence((Sequence)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private double probOfDocGivenClass(Instance inst,int classIndex){  double answer=0;  double freqOfWordInDoc;  for (int i=0; i < inst.numValues(); i++)   if (inst.index(i) != inst.classIndex()) {    freqOfWordInDoc=inst.valueSparse(i);    answer+=(freqOfWordInDoc * m_probOfWordGivenClass[classIndex][inst.index(i)]);  }  return answer;}  }
class C{  protected ForeignKeyConstraint buildForeignKeyConstraint(FieldDefinition field,DatabasePlatform platform){  Vector sourceFields=new Vector();  Vector targetFields=new Vector();  ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint();  DatabaseField tempTargetField=new DatabaseField(field.getForeignKeyFieldName());  DatabaseField tempSourceField=new DatabaseField(field.getName());  sourceFields.add(tempSourceField.getName());  targetFields.add(tempTargetField.getName());  fkConstraint.setSourceFields(sourceFields);  fkConstraint.setTargetFields(targetFields);  fkConstraint.setTargetTable(tempTargetField.getTable().getQualifiedNameDelimited(platform));  String tempName=buildForeignKeyConstraintName(this.getName(),tempSourceField.getName(),platform.getMaxForeignKeyNameSize(),platform);  fkConstraint.setName(tempName);  return fkConstraint;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public void postOpenInit(){  logger=Logger.getLogger(Dataset.class);  clear();  for (  DataPoint point : persistentData) {    addPoint(point);  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZOTRULE,this);}  }
class C{  @Override public ObjectReference traceObject(ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(global().traceFullHeap());  if (object.isNull())   return object;  if (Space.isInSpace(GenCopy.MS0,object))   return GenCopy.matureSpace0.traceObject(this,object,Gen.ALLOC_MATURE_MAJORGC);  if (Space.isInSpace(GenCopy.MS1,object))   return GenCopy.matureSpace1.traceObject(this,object,Gen.ALLOC_MATURE_MAJORGC);  return super.traceObject(object);}  }
class C{  @Override public void stop(){  if (m_firstInput != null && m_firstInput instanceof BeanCommon) {    ((BeanCommon)m_firstInput).stop();  }  if (m_secondInput != null && m_secondInput instanceof BeanCommon) {    ((BeanCommon)m_secondInput).stop();  }  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + "Stopped");  }  m_busy=false;  m_stopRequested.set(true);  try {    Thread.sleep(500);  } catch (  InterruptedException ex) {  }  if (m_firstIsWaiting || m_secondIsWaiting) {    notifyAll();  }  m_firstBuffer=null;  m_secondBuffer=null;  m_headerOne=null;  m_headerTwo=null;  m_firstFinished=false;  m_secondFinished=false;  m_mergedHeader=null;}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private static NameComponent parseComponent(String compStr) throws InvalidNameException {  NameComponent comp=new NameComponent();  int kindSep=-1;  int len=compStr.length();  int j=0;  char[] newStr=new char[len];  boolean escaped=false;  for (int i=0; i < len && kindSep < 0; i++) {    if (escaped) {      newStr[j++]=compStr.charAt(i);      escaped=false;    } else     if (compStr.charAt(i) == escapeChar) {      if (i + 1 >= len) {        throw new InvalidNameException(compStr + ": unescaped \\ at end of component");      } else       if (isMeta(compStr.charAt(i + 1))) {        escaped=true;      } else {        throw new InvalidNameException(compStr + ": invalid character being escaped");      }    } else     if (compStr.charAt(i) == kindSeparator) {      kindSep=i;    } else {      newStr[j++]=compStr.charAt(i);    }  }  comp.id=new String(newStr,0,j);  if (kindSep < 0) {    comp.kind="";  } else {    j=0;    escaped=false;    for (int i=kindSep + 1; i < len; i++) {      if (escaped) {        newStr[j++]=compStr.charAt(i);        escaped=false;      } else       if (compStr.charAt(i) == escapeChar) {        if (i + 1 >= len) {          throw new InvalidNameException(compStr + ": unescaped \\ at end of component");        } else         if (isMeta(compStr.charAt(i + 1))) {          escaped=true;        } else {          throw new InvalidNameException(compStr + ": invalid character being escaped");        }      } else {        newStr[j++]=compStr.charAt(i);      }    }    comp.kind=new String(newStr,0,j);  }  return comp;}  }
class C{  protected SVGOMFontFaceFormatElement(){}  }
class C{  public View inflateCertificateView(Context context){  LayoutInflater factory=LayoutInflater.from(context);  View certificateView=factory.inflate(com.android.internal.R.layout.ssl_certificate,null);  SslCertificate.DName issuedTo=getIssuedTo();  if (issuedTo != null) {    ((TextView)certificateView.findViewById(com.android.internal.R.id.to_common)).setText(issuedTo.getCName());    ((TextView)certificateView.findViewById(com.android.internal.R.id.to_org)).setText(issuedTo.getOName());    ((TextView)certificateView.findViewById(com.android.internal.R.id.to_org_unit)).setText(issuedTo.getUName());  }  ((TextView)certificateView.findViewById(com.android.internal.R.id.serial_number)).setText(getSerialNumber(mX509Certificate));  SslCertificate.DName issuedBy=getIssuedBy();  if (issuedBy != null) {    ((TextView)certificateView.findViewById(com.android.internal.R.id.by_common)).setText(issuedBy.getCName());    ((TextView)certificateView.findViewById(com.android.internal.R.id.by_org)).setText(issuedBy.getOName());    ((TextView)certificateView.findViewById(com.android.internal.R.id.by_org_unit)).setText(issuedBy.getUName());  }  String issuedOn=formatCertificateDate(context,getValidNotBeforeDate());  ((TextView)certificateView.findViewById(com.android.internal.R.id.issued_on)).setText(issuedOn);  String expiresOn=formatCertificateDate(context,getValidNotAfterDate());  ((TextView)certificateView.findViewById(com.android.internal.R.id.expires_on)).setText(expiresOn);  ((TextView)certificateView.findViewById(com.android.internal.R.id.sha256_fingerprint)).setText(getDigest(mX509Certificate,"SHA256"));  ((TextView)certificateView.findViewById(com.android.internal.R.id.sha1_fingerprint)).setText(getDigest(mX509Certificate,"SHA1"));  return certificateView;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.941 -0500",hash_original_method="B87424FB8F4DF05D98854CA5453341A1",hash_generated_method="2C9B95C76153E2E5E4B2D5C2F4C6ADDB") private Profile(){}  }
class C{  public static void copyDateTo(Calendar from,Calendar to){  int year=getYear(from);  int month=getMonth(from);  int day=getDay(from);  to.clear();  to.set(year,month,day);  to.getTimeInMillis();}  }
class C{  private void verifyContainingType(FieldDescriptor field){  if (field.getContainingType() != type) {    throw new IllegalArgumentException("FieldDescriptor does not match message type.");  }}  }
class C{  public Ordering(){  super(KEY);}  }
class C{  public boolean isConsolePreferencesSupported(){  return consolePreferencesSupported;}  }
class C{  private final StyledString appendParameterSignature(StyledString buffer,char[][] parameterTypes,char[][] parameterNames){  if (parameterTypes != null) {    for (int i=0; i < parameterTypes.length; i++) {      if (i > 0) {        buffer.append(',');        buffer.append(' ');      }      buffer.append(parameterTypes[i]);      if (parameterNames != null && parameterNames[i] != null) {        buffer.append(' ');        buffer.append(parameterNames[i]);      }    }  }  return buffer;}  }
class C{  protected Paint[] parseColors(Properties props,String prefix,String prop,Paint err){  Paint[] colors=null;  String[] colorStrings=PropUtils.stringArrayFromProperties(props,prefix + "." + prop," ,");  if (colorStrings != null) {    colors=new Color[colorStrings.length];    for (int i=0; i < colorStrings.length; i++)     try {      colors[i]=PropUtils.parseColor(colorStrings[i]);    } catch (    NumberFormatException exc) {      System.out.println("Colors Error " + prefix + "."+ prop+ " "+ i);      colors[i]=err;    }  }  return colors;}  }
class C{  public static CoordinateSequence ensureValidRing(CoordinateSequenceFactory fact,CoordinateSequence seq){  int n=seq.size();  if (n == 0)   return seq;  if (n <= 3)   return createClosedRing(fact,seq,4);  boolean isClosed=seq.getOrdinate(0,CoordinateSequence.X) == seq.getOrdinate(n - 1,CoordinateSequence.X) && seq.getOrdinate(0,CoordinateSequence.Y) == seq.getOrdinate(n - 1,CoordinateSequence.Y);  if (isClosed)   return seq;  return createClosedRing(fact,seq,n + 1);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID:    return isSetId();case UID:  return isSetUid();}throw new IllegalStateException();}  }
class C{  public static ODataUri createODataUri(MediaType... mediaTypes){  return createODataUriForServiceDocument(SERVICE_ROOT,mediaTypes);}  }
class C{  @SuppressWarnings("PrimitiveArrayArgumentToVariableArgMethod") private void visualizeItem(@NonNull final Item item,@NonNull final ItemViewHolder viewHolder){  viewHolder.iconImageView.setVisibility(iconCount > 0 ? View.VISIBLE : View.GONE);  viewHolder.iconImageView.setEnabled(item.isEnabled());  if (item.getIcon() != null && item.getIcon() instanceof StateListDrawable) {    StateListDrawable stateListDrawable=(StateListDrawable)item.getIcon();    try {      int[] currentState=viewHolder.iconImageView.getDrawableState();      Method getStateDrawableIndex=StateListDrawable.class.getMethod("getStateDrawableIndex",int[].class);      Method getStateDrawable=StateListDrawable.class.getMethod("getStateDrawable",int.class);      int index=(int)getStateDrawableIndex.invoke(stateListDrawable,currentState);      Drawable drawable=(Drawable)getStateDrawable.invoke(stateListDrawable,index);      viewHolder.iconImageView.setImageDrawable(drawable);    } catch (    Exception e) {      viewHolder.iconImageView.setImageDrawable(item.getIcon());    }  } else {    viewHolder.iconImageView.setImageDrawable(item.getIcon());  }  viewHolder.titleTextView.setText(item.getTitle());  viewHolder.titleTextView.setEnabled(item.isEnabled());  if (getItemColor() != -1) {    viewHolder.titleTextView.setTextColor(getItemColor());  }}  }
class C{  public LanguageSetting(Document doc,String name){  this.name=name;  elem=doc.createElement("language");  elem.setAttribute("name",name);  elem.setAttribute("storeMatches","20");  storeMatches="20";  clusterType="";  suffixes="";  doc.getDocumentElement().appendChild(elem);}  }
class C{  public FloatSparseArrayDataRow(int size){  super(size);  values=new float[size];}  }
class C{  public ProcessInfo process(Properties ctx,ProcessInfo pi){  m_processCount++;  ProcessUtil.startJavaProcess(ctx,pi,null);  return pi;}  }
class C{  public boolean isOperatorStatistics(){  return operatorStatistics;}  }
class C{  public MetricChartPanel(String title,String unitName,ChangingCategoryDatasetWithTTG dataset,ChartLocker locker){  super(title,unitName);  this.dataset=dataset;  this.locker=locker;  addChart();}  }
class C{  public String toXML(boolean header){  return null;}  }
class C{  @Deprecated public void addViewMenuItem(JMenuItem menuItem){  getView().add(menuItem);}  }
class C{  public boolean isAllSyssvcUp(String siteId){  try {    String syssvcName=((CoordinatorClientImpl)coordinator).getSysSvcName();    String syssvcVersion=((CoordinatorClientImpl)coordinator).getSysSvcVersion();    List<Service> svcs=coordinator.locateAllServices(siteId,syssvcName,syssvcVersion,null,null);    Site site=this.getSiteFromLocalVdc(siteId);    log.info("Node count is {}, running syssvc count is",site.getNodeCount(),svcs.size());    return svcs.size() == site.getNodeCount();  } catch (  CoordinatorException ex) {    return false;  }}  }
class C{  private boolean shouldHandleFile(IFile object){  String fileExtension=object.getFileExtension();  return fileExtension != null && getN4FileExtensions().contains(fileExtension);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.473 -0400",hash_original_method="34C5F6253FCD1E23723623334462E67F",hash_generated_method="0BEA4FA5CF6B6D343C3C9851467F6E9B") public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  protected void checkReachability(){  if (this.bReachabilityChecked)   return;  LinkedList<NonTerminal> ntList=getNonTerminals();  for (  NonTerminal nt : ntList) {    if (nt == null)     continue;    if (!this.symbolInfos.containsKey(nt)) {      SymbolInfo i=new SymbolInfo();      i.symbol=nt;      this.symbolInfos.put(nt,i);    }  }  createProducedNonTerminalInfo();  Production startProd=this.getStartProduction();  NonTerminal startState=startProd.getLHS();  setReachable(startState);  this.bReachabilityChecked=true;}  }
class C{  private void enableChartButtons(final Tradestrategy tradestrategy) throws Exception {  propertiesButton.setEnabled(false);  executeButton.setEnabled(false);  closeAllPositionsButton.setEnabled(false);  brokerDataButton.setEnabled(false);  cancelButton.setEnabled(false);  cancelStrategiesButton.setEnabled(false);  m_tradeOrderTable.enablePopupMenu(false);  periodEditorComboBox.setEnabled(false);  refreshButton.setEnabled(false);  brokerDataButton.setTransferObject(tradestrategy);  cancelStrategiesButton.setTransferObject(tradestrategy);  refreshButton.setTransferObject(tradestrategy);  if (null != tradestrategy) {    propertiesButton.setEnabled(true);    cancelStrategiesButton.setEnabled(true);    brokerDataButton.setEnabled(true);    if (this.isConnected()) {      executeButton.setEnabled(true);      refreshButton.setEnabled(true);      cancelButton.setEnabled(true);      closeAllPositionsButton.setEnabled(true);      m_tradeOrderTable.enablePopupMenu(true);    } else {      periodEditorComboBox.setEnabled(true);    }  }}  }
class C{  public static RemoveHealthListenerResponse create(DistributionManager dm,InternalDistributedMember recipient,int id){  RemoveHealthListenerResponse m=new RemoveHealthListenerResponse();  m.setRecipient(recipient);  dm.removeHealthMonitor(recipient,id);  return m;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.428 -0500",hash_original_method="726E1430510DEE6537C029850183B163",hash_generated_method="0B8ACE88D604CACC4FD49C2BA1A770F6") static public void assertNull(Object object){  assertNull(null,object);}  }
class C{  private void addForEnumeration(PricedParameterRow curParam,int paramIndex){  List<VOPricedOption> pricedOptionList=curParam.getPricedParameter().getPricedOptions();  for (int optionIndex=0; optionIndex < pricedOptionList.size(); optionIndex++) {    VOPricedOption pricedOption=pricedOptionList.get(optionIndex);    List<VOPricedRole> oldRoleSpecificUserPrices=pricedOption.getRoleSpecificUserPrices();    int indexInCache=paramIndex + optionIndex + 1;    for (int j=0; j < roles.size(); j++) {      VORoleDefinition role=roles.get(j);      int numOldRoleWithPrice=oldRoleSpecificUserPrices.size();      boolean isUpdated=false;      for (int roleIndex=0; roleIndex < numOldRoleWithPrice; roleIndex++) {        VORoleDefinition oldCurRole=oldRoleSpecificUserPrices.get(roleIndex).getRole();        if (oldCurRole.getRoleId().equals(role.getRoleId())) {          BigDecimal price=pricedParametersOfAllRoles[j][indexInCache].getPricedOption().getPricePerUser();          oldRoleSpecificUserPrices.get(roleIndex).setPricePerUser(price);          isUpdated=true;          break;        }      }      if (!isUpdated) {        VOPricedRole price=new VOPricedRole();        if (pricedParametersOfAllRoles[j][indexInCache].getPricedOption() != null) {          price.setPricePerUser(pricedParametersOfAllRoles[j][indexInCache].getPricedOption().getPricePerUser());          price.setRole(role);        }        oldRoleSpecificUserPrices.add(price);      }    }  }}  }
class C{  protected static void printHelp(){  System.out.println("Help for the Indexor class.\n" + "===========================\n" + "This help text is shown if you start the Indexor with the '-h' option.\n"+ "\n"+ "Usage\n"+ "=====\n"+ "$> Indexor -i <input-file> -l <index-directory>\n"+ "\n"+ "or \n"+ "\n"+ "$> Indexor -c <file-list> -l <index-directory>\n"+ "\n"+ "with \n"+ "\n"+ "<input-file> ... \t\ta single output file of Extractor.\n"+ "<index-directory> ...\tthe index to write the data to (it's appended).\n"+ "<file-list> ...\t\t\ta file containing data files one per line.\n");}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  super.onCreateOptionsMenu(menu);  getMenuInflater().inflate(R.menu.menu,menu);  MenuItem mediaRouteMenuItem=menu.findItem(R.id.media_route_menu_item);  MediaRouteActionProvider mediaRouteActionProvider=(MediaRouteActionProvider)MenuItemCompat.getActionProvider(mediaRouteMenuItem);  mediaRouteActionProvider.setRouteSelector(mMediaRouteSelector);  return true;}  }
class C{  private void addLocalVar(VarSymbol v){  int adr=v.adr;  lvar=ArrayUtils.ensureCapacity(lvar,adr + 1);  Assert.checkNull(lvar[adr]);  if (pendingJumps != null) {    resolvePending();  }  lvar[adr]=new LocalVar(v);  state.defined.excl(adr);}  }
class C{  private void updateMultipleEdgeState(){  if (m_settings.getEdgeSettings().getDisplayMultipleEdgesAsOne()) {    MultiEdgeHider.hideMultipleEdgesInternal(this);  } else {    MultiEdgeHider.unhideMultipleEdgesInternal(this);  }}  }
class C{  public VirtualFile resolve(String relative){  return null;}  }
class C{  public void selected(SelectEvent event){  if (event.getEventAction().equals(SelectEvent.LEFT_CLICK)) {    if (event.hasObjects() && event.getTopPickedObject().hasPosition()) {      if (event.getTopObject().getClass().equals(pickedObjClass)) {        Position targetPos=event.getTopPickedObject().getPosition();        View view=this.wwd.getView();        if (view != null) {          view.goTo(new Position(targetPos,0),targetPos.getElevation() + this.elevationOffset);        }      }    }  }}  }
class C{  public static double intersectRayTriangleFront(Vector3d origin,Vector3d dir,Vector3d v0,Vector3d v1,Vector3d v2,double epsilon){  return intersectRayTriangleFront(origin.x,origin.y,origin.z,dir.x,dir.y,dir.z,v0.x,v0.y,v0.z,v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,epsilon);}  }
class C{  public void addStringToTable(byte[] string){  stringTable[tableIndex++]=string;  if (tableIndex == 511) {    bitsToGet=10;  } else   if (tableIndex == 1023) {    bitsToGet=11;  } else   if (tableIndex == 2047) {    bitsToGet=12;  }}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public Intent putExtra(String name,boolean value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putBoolean(name,value);  return this;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static Configuration createConfiguration(){  Configuration conf=new Configuration();  conf.addResource("nutch-default.xml");  conf.addResource("nutch-site.xml");  conf.addResource("crawl-tests.xml");  return conf;}  }
class C{  public int waitWhile(int state) throws IOException, InterruptedException {  int current;  do {    Thread.sleep(pollRate);  } while (!file.exists() || ((current=get()) == state));  return current;}  }
class C{  @Util public static void addBreadCrumb(List<BreadCrumb> breadcrumbs,String id,String name,String title){  String path=getPath(getLastPath(breadcrumbs),name);  breadcrumbs.add(new BreadCrumb(id,name,title,path));}  }
class C{  @HLEFunction(nid=0xA3589D81,version=150,checkInsideInterrupt=true) public int __sceSasCore(int sasCore,int sasOut){  checkSasHandleGood(sasCore);  long startTime=Emulator.getClock().microTime();  mixer.synthesize(sasOut,grainSamples);  delayThreadSasCore(startTime);  return 0;}  }
class C{  private long newAccessTime(){  return 10;}  }
class C{  public boolean add(Object o){  addBefore(o,header);  return true;}  }
class C{  public static void generateClass(StringBuilder builder){  builder.append("/**\n");  builder.append(" * THIS CLASS WILL BE OVERRIDDEN BY MAVEN BUILD. DON'T EDIT CLASS, IT WILL HAVE NO EFFECT.\n");  builder.append(" */\n");  builder.append("@Singleton\n");  builder.append("@SuppressWarnings(\"rawtypes\")\n");  builder.append("public class ExtensionManager\n");  builder.append("{\n");  builder.append("\n");  builder.append(GeneratorUtils.TAB).append("/** Contains the map will all the Extension Providers <FullClassFQN, Provider>. */\n");  builder.append(GeneratorUtils.TAB).append("protected final Map<String, Provider> extensions = new HashMap<>();\n\n");  builder.append(GeneratorUtils.TAB).append("/** Constructor that accepts all the Extension found in IDE package */\n");  builder.append(GeneratorUtils.TAB).append("@Inject\n");  builder.append(GeneratorUtils.TAB).append("public ExtensionManager(\n");  Iterator<Entry<String,String>> entryIterator=EXTENSIONS_FQN.entrySet().iterator();  while (entryIterator.hasNext()) {    Entry<String,String> extensionEntry=entryIterator.next();    String hasComma=entryIterator.hasNext() ? "," : "";    String classFQN=String.format("Provider<%s>",extensionEntry.getKey());    String variableName=extensionEntry.getValue().toLowerCase();    builder.append(GeneratorUtils.TAB2).append(classFQN).append(" ").append(variableName).append(hasComma).append("\n");  }  builder.append(GeneratorUtils.TAB).append(")\n");  builder.append(GeneratorUtils.TAB).append("{\n");  for (  Entry<String,String> extension : EXTENSIONS_FQN.entrySet()) {    String fullFqn=extension.getKey();    String variableName=extension.getValue().toLowerCase();    String putStatement=String.format("this.extensions.put(\"%s\",%s);%n",fullFqn,variableName);    builder.append(GeneratorUtils.TAB2).append(putStatement);  }  builder.append(GeneratorUtils.TAB).append("}\n\n");  builder.append(GeneratorUtils.TAB).append("/** Returns  the map will all the Extension Providers <FullClassFQN, Provider>. */\n");  builder.append(GeneratorUtils.TAB).append("public Map<String, Provider> getExtensions()\n");  builder.append(GeneratorUtils.TAB).append("{\n");  builder.append(GeneratorUtils.TAB2).append("return extensions;\n");  builder.append(GeneratorUtils.TAB).append("}\n");  builder.append("}\n");}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Iterator<Event> iterateEvents(){  return events.values().iterator();}  }
class C{  @Override public void log(PageContext pc,String type,String label,long executionTime,Object data){  if (monitors == null)   return;  Iterator<ActionMonitor> it=monitors.iterator();  while (it.hasNext()) {    try {      it.next().log(pc,type,label,executionTime,data);    } catch (    Throwable t) {      t.printStackTrace();    }  }}  }
class C{  public Vertex createNoun(String text,Vertex meaning,Network network){  Vertex word=createWord(text,meaning,network,Primitive.NOUN);  return word;}  }
class C{  @Override public void run() throws InterruptedException, CameraAccessException, CameraCaptureSessionClosedException, ResourceAcquisitionFailedException {  FrameServer.Session session=mFrameServer.tryCreateExclusiveSession();  if (session == null) {    return;  }  try {    AFTriggerResult afScanResult=new AFTriggerResult();    RequestBuilder idleBuilder=createAFIdleRequest(null);    session.submitRequest(Arrays.asList(idleBuilder.build()),FrameServer.RequestType.REPEATING);    RequestBuilder cancelBuilder=createAFCancelRequest(null);    session.submitRequest(Arrays.asList(cancelBuilder.build()),FrameServer.RequestType.NON_REPEATING);    idleBuilder=createAFIdleRequest(afScanResult);    session.submitRequest(Arrays.asList(idleBuilder.build()),FrameServer.RequestType.REPEATING);    RequestBuilder triggerBuilder=createAFTriggerRequest(afScanResult);    session.submitRequest(Arrays.asList(triggerBuilder.build()),FrameServer.RequestType.NON_REPEATING);    afScanResult.get();  }  finally {    session.close();  }}  }
class C{  public LogicalNotExpression createLogicalNotExpression(){  LogicalNotExpressionImpl logicalNotExpression=new LogicalNotExpressionImpl();  return logicalNotExpression;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:21.737 -0400",hash_original_method="92AD08E60042E3A3AB4EAFAA413A4446",hash_generated_method="98747B73D26BF7E8C67C5D40BBA28F1C") public static String signalPoll(){  return doStringCommand("SIGNAL_POLL");}  }
class C{  @Override public int executeUpdate() throws SQLException {  try {    checkClosed();    if (command.isQuery()) {      super.executeQuery();      return 0;    }    return super.executeUpdate();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private void buildTakeoffNotification(String content,boolean animate){  Log.v(TAG,"buildTakeoffNotification: " + content);  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setContentText(content).setSmallIcon(R.drawable.ic_launcher);  builder.setContentTitle("");  if (animate) {    Intent notificationIntent=new Intent(this,VillageNotificationActivity.class);    notificationIntent.putExtra(NotificationConstants.KEY_CONTENT,content);    PendingIntent notificationPendingIntent=PendingIntent.getActivity(this,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);    NotificationCompat.WearableExtender wearableExtender=new NotificationCompat.WearableExtender().setCustomSizePreset(NotificationCompat.WearableExtender.SIZE_FULL_SCREEN).setDisplayIntent(notificationPendingIntent).setGravity(Gravity.BOTTOM);    builder.extend(wearableExtender);  } else {    Bitmap largeIcon=BitmapFactory.decodeResource(this.getResources(),R.drawable.santa_notification_background);    builder.setLargeIcon(largeIcon);  }  Intent dismissIntent=new Intent(NotificationConstants.ACTION_DISMISS);  dismissIntent.putExtra(NotificationConstants.KEY_NOTIFICATION_ID,NotificationConstants.NOTIFICATION_ID);  PendingIntent pendingIntent=PendingIntent.getService(this,0,dismissIntent,PendingIntent.FLAG_UPDATE_CURRENT);  builder.setDeleteIntent(pendingIntent);  NotificationManagerCompat.from(this).notify(NotificationConstants.NOTIFICATION_ID,builder.build());}  }
class C{  public PanSupport(Object sourceBean){  super(sourceBean);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public BType addBuilder(int index,MType message){  ensureMutableMessageList();  ensureBuilders();  SingleFieldBuilder<MType,BType,IType> builder=new SingleFieldBuilder<MType,BType,IType>(message,this,isClean);  messages.add(index,null);  builders.add(index,builder);  onChanged();  incrementModCounts();  return builder.getBuilder();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean canSetList(){  return true;}  }
class C{  private boolean greater(Key n,Key m){  if (n == null)   return false;  if (m == null)   return true;  return comp.compare(n,m) > 0;}  }
class C{  public UnmodifiableClassException(){  super();}  }
class C{  public static int compareVersions(String version1,String version2){  return compareVersions(version1,version2,VERSION_SPLIT);}  }
class C{  public static boolean cs_ipvec(int[] p,float[] b,float[] x,int n){  int k;  if (x == null || b == null)   return (false);  for (k=0; k < n; k++)   x[p != null ? p[k] : k]=b[k];  return (true);}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  private Map<String,String> readInitialLogoMapping(){  Properties properties=new Properties();  try {    InputStream inputStream=context.getAssets().open(LOGO_MAPPING_FILENAME);    properties.load(inputStream);  } catch (  IOException e) {    return null;  }  Map<String,String> logoMapping=new HashMap<String,String>();  for (  Entry<Object,Object> property : properties.entrySet()) {    logoMapping.put((String)property.getKey(),(String)property.getValue());  }  return logoMapping;}  }
class C{  public long[] toArray(){  int pos=0;  long[] array=new long[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  public CovMatrixTable(ICovarianceMatrix covMatrix){  this.covMatrix=covMatrix;  this.editingMatrix=covMatrix.getMatrix().copy();  this.editingMatrixPositiveDefinite=MatrixUtils.isPositiveDefinite(editingMatrix);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildDressingRoom(zone);}  }
class C{  protected byte[] encodeKey(final long commitTime){  return keyBuilder.reset().append(commitTime).getKey();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.583 -0500",hash_original_method="EF88FEA15C53B4BFAD6A7F9FD25E8828",hash_generated_method="486441A28B73DDFD8C18DA2A95D30528") public boolean decodeExtensionMedia(int startIndex){  int index=startIndex;  dataLength=0;  stringValue=null;  int length=wspData.length;  boolean rtrn=index < length;  while (index < length && wspData[index] != 0) {    index++;  }  dataLength=index - startIndex + 1;  stringValue=new String(wspData,startIndex,dataLength - 1);  return rtrn;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  @Override public int insertUnassignedRule() throws AdeException {  final ConnectionWrapper cw=new ConnectionWrapper(AdeInternal.getDefaultConnection());  ResultSet generatedKey=null;  PreparedStatement ps=null;  int ruleId=0;  try {    PreparedStatementWrapper psw=cw.preparedStatement("INSERT INTO " + SQL.RULES + " (RULE_NAME, DESCRIPTION, RULE) VALUES (?,?,?)",new String[]{"RULE_INTERNAL_ID"});    ps=psw.getPreparedStatement();    int pos=1;    ps.setString(pos++,UNASSIGNED_RULE_NAME);    ps.setString(pos++,UNASSIGNED_RULE_DESCRIPTION);    ps.setString(pos++,UNASSIGNED_RULE);    ps.execute();    generatedKey=ps.getGeneratedKeys();    if (generatedKey.next()) {      ruleId=(int)generatedKey.getLong(1);    }    cw.close();  } catch (  SQLException e) {    cw.failed(e);  } finally {    cw.quietCleanup();    try {      if (generatedKey != null)       generatedKey.close();    } catch (    SQLException e) {      logger.error("Error encountered closing the ResultSet.",e);    }    try {      if (ps != null)       ps.close();    } catch (    SQLException e) {      logger.error("Error encountered closing the PreparedStatement.",e);    }  }  return ruleId;}  }
class C{  public boolean rejectIncomingConnect(BluetoothDevice device){  if (DBG)   log("rejectIncomingConnect");  if (mService != null) {    try {      return mService.rejectIncomingConnect(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public void stdoutShouldMatch(String pattern){  Matcher matcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stdout);  if (!matcher.find()) {    reportDiagnosticSummary();    throw new RuntimeException("'" + pattern + "' missing from stdout \n");  }}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public ObjIdMap(ObjIdMap oldMap){  this.table=new Entry[oldMap.table.length];  System.arraycopy(oldMap.table,0,this.table,0,this.table.length);  this.count=oldMap.count;  this.threshold=oldMap.threshold;  this.loadFactor=oldMap.loadFactor;}  }
class C{  public static void appendTextToFile(File file,String text) throws IOException {  FileUtilSupport.getDefault().appendTextToFile(file,text);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_User_ID"))     p_AD_User_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("KeepLogDays"))     p_KeepLogDays=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSpecifies the (maximum) number of bins to divide numeric" + " attributes into.\n" + "\t(default = 10)","B",1,"-B <num>"));  result.addElement(new Option("\tSpecifies the desired weight of instances per bin for\n" + "\tequal-frequency binning. If this is set to a positive\n" + "\tnumber then the -B option will be ignored.\n"+ "\t(default = -1)","M",1,"-M <num>"));  result.addElement(new Option("\tUse equal-frequency instead of equal-width discretization.","F",0,"-F"));  result.addElement(new Option("\tOptimize number of bins using leave-one-out estimate\n" + "\tof estimated entropy (for equal-width discretization).\n" + "\tIf this is set then the -B option will be ignored.","O",0,"-O"));  result.addElement(new Option("\tSpecifies list of columns to Discretize. First" + " and last are valid indexes.\n" + "\t(default: first-last)","R",1,"-R <col1,col2-col4,...>"));  result.addElement(new Option("\tInvert matching sense of column indexes.","V",0,"-V"));  result.addElement(new Option("\tOutput binary attributes for discretized attributes.","D",0,"-D"));  result.addElement(new Option("\tUse bin numbers rather than ranges for discretized attributes.","Y",0,"-Y"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public PubsubFuture<List<ReceivedMessage>> pull(final String project,final String subscription){  return pull(project,subscription,DEFAULT_PULL_RETURN_IMMEDIATELY,DEFAULT_PULL_MAX_MESSAGES);}  }
class C{  @CanIgnoreReturnValue public static <T>T readBytes(InputStream input,ByteProcessor<T> processor) throws IOException {  checkNotNull(input);  checkNotNull(processor);  byte[] buf=createBuffer();  int read;  do {    read=input.read(buf);  } while (read != -1 && processor.processBytes(buf,0,read));  return processor.getResult();}  }
class C{  public void focusLost(FocusEvent e){  super.focusLost(e);  getComponent().repaint();}  }
class C{  public static Bitmap scaleFill(Bitmap src,int w,int h){  Bitmap res=Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);  scaleFill(src,res);  return res;}  }
class C{  public Object parsePage(AstVisitor v) throws WikiApiException {  return v.go(getCompiledPage().getPage());}  }
class C{  public void transferablesFlavorsChanged(){  if (peer != null)   peer.transferablesFlavorsChanged();}  }
class C{  public void slashStarComments(boolean flag){  slashStarComments=flag;}  }
class C{  public ReplaceableString(String str){  buf=new StringBuffer(str);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.BITWISE_XOR_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.BITWISE_XOR_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public static Result searchInAll(){  String searchTypeValue=request().getQueryString("searchType");  String keyword=request().getQueryString("keyword");  PageParam pageParam=getPage();  if (StringUtils.isEmpty(keyword) || StringUtils.isEmpty(searchTypeValue)) {    return badRequest(ErrorViews.BadRequest.render());  }  User user=UserApp.currentUser();  SearchType searchType=SearchType.getValue(searchTypeValue);  if (searchType == SearchType.NA) {    return badRequest(ErrorViews.BadRequest.render());  }  SearchResult searchResult=getSearchResult(keyword,user,searchType);switch (searchResult.getSearchType()) {case ISSUE:    searchResult.setIssues(Search.findIssues(keyword,user,pageParam));  break;case USER:searchResult.setUsers(Search.findUsers(keyword,pageParam));break;case PROJECT:searchResult.setProjects(Search.findProjects(keyword,user,pageParam));break;case POST:searchResult.setPosts(Search.findPosts(keyword,user,pageParam));break;case MILESTONE:searchResult.setMilestones(Search.findMilestones(keyword,user,pageParam));break;case ISSUE_COMMENT:searchResult.setIssueComments(Search.findIssueComments(keyword,user,pageParam));break;case POST_COMMENT:searchResult.setPostComments(Search.findPostComments(keyword,user,pageParam));break;case REVIEW:searchResult.setReviews(Search.findReviews(keyword,user,pageParam));break;}return ok(result.render("title.search",null,null,searchResult));}  }
class C{  public VNXeCommandJob attachLunSnap(String snapId) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_ATTACH);  _url=urlBuilder.toString();  return postRequestAsync(null);}  }
class C{  public LdapName(String name) throws InvalidNameException {  unparsed=name;  parse();}  }
class C{  @Override public boolean hasFocus(){  return mHijackFocus || super.hasFocus();}  }
class C{  public int invalidateSchema(String schema){  return cache.invalidateByPrefix(schema);}  }
class C{  public static boolean isLollipop(){  return android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  final public void write(String v){  try {    _out.print(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  @Overridden boolean equalsCommon(CraftMetaItem that){  return ((this.hasDisplayName() ? that.hasDisplayName() && this.displayName.equals(that.displayName) : !that.hasDisplayName())) && (this.hasEnchants() ? that.hasEnchants() && this.enchantments.equals(that.enchantments) : !that.hasEnchants()) && (this.hasLore() ? that.hasLore() && this.lore.equals(that.lore) : !that.hasLore())&& (this.hasAttributes() ? that.hasAttributes() && this.attributes.equals(that.attributes) : !that.hasAttributes())&& (this.hasRepairCost() ? that.hasRepairCost() && this.repairCost == that.repairCost : !that.hasRepairCost());}  }
class C{  public void testWholeNameSpace() throws Exception {  runPythonTest(new SkeletonTestTask("dotNet/expected.skeleton.SingleNameSpace.py","SingleNameSpace","whole_namespace.py",null));}  }
class C{  public boolean containsKey(double key){  return contains(key);}  }
class C{  public void put(String key,byte[] value){  mValues.put(key,value);}  }
class C{  public void doPrintSetup(){  doPrint();}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public void yieldUnescaped(String value){  builder.yield(value,false);}  }
class C{  @Override public Result next(){  if (hasNext) {    hasNext=false;    return result;  }  throw new NoSuchElementException();}  }
class C{  public boolean performEditorAction(int actionCode){  long eventTime=SystemClock.uptimeMillis();  sendKeyEvent(new KeyEvent(eventTime,eventTime,KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_ENTER,0,0,KeyCharacterMap.VIRTUAL_KEYBOARD,0,KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE | KeyEvent.FLAG_EDITOR_ACTION));  sendKeyEvent(new KeyEvent(SystemClock.uptimeMillis(),eventTime,KeyEvent.ACTION_UP,KeyEvent.KEYCODE_ENTER,0,0,KeyCharacterMap.VIRTUAL_KEYBOARD,0,KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE | KeyEvent.FLAG_EDITOR_ACTION));  return true;}  }
class C{  public HeaderCardBuilder value(Date newValue) throws HeaderCardException {  return value(FitsDate.getFitsDateString(newValue));}  }
class C{  private static CalendarEventEntry createRecurringEvent(CalendarService service,String eventTitle,String eventContent) throws ServiceException, IOException {  String recurData="DTSTART;VALUE=DATE:20070501\r\n" + "DTEND;VALUE=DATE:20070502\r\n" + "RRULE:FREQ=WEEKLY;BYDAY=Tu;UNTIL=20070904\r\n";  return createEvent(service,eventTitle,eventContent,recurData,false,null);}  }
class C{  public boolean removeCertificate(CertificateToken certificate){  if (certificateTokens != null) {    if (certificateTokens.contains(certificate)) {      return certificateTokens.remove(certificate);    }  }  return false;}  }
class C{  public int year(){  return year;}  }
class C{  public void beginObject() throws IOException {  expect(JsonToken.BEGIN_OBJECT);}  }
class C{  public HelpCommand(Client client){  super(client,"help","Lists all of the commands available, or gives help on a specific command.  Usage: #help [command]");  cmdHandler=client;}  }
class C{  public static boolean isWordToken(IElementType token){  return BashTokenTypes.stringLiterals.contains(token);}  }
class C{  public List<Integer> emit(String streamId,Tuple anchor,List<Object> tuple){  return emit(streamId,Arrays.asList(anchor),tuple);}  }
class C{  public RangePredicate(int operation,Expression middle,Expression left,Expression right){  this(operation,middle,left,right,DefaultLiteralComparator.getInstance());}  }
class C{  public static boolean doesMappingExist(JestClient client,String index,String type) throws IOException {  GetMapping getMapping=new GetMapping.Builder().addIndex(index).addType(type).build();  JestResult result=client.execute(getMapping);  JsonObject resultJson=result.getJsonObject().getAsJsonObject(index);  if (resultJson == null) {    return false;  }  JsonObject typeJson=resultJson.getAsJsonObject(type);  return typeJson != null;}  }
class C{  public static void checkGLError(String label){  int error;  while ((error=GLES20.glGetError()) != GLES20.GL_NO_ERROR) {    Log.e(TAG,label + ": glError " + error);    throw new RuntimeException(label + ": glError " + error);  }}  }
class C{  public MInvoice(MInOut ship,Timestamp invoiceDate){  this(ship.getCtx(),0,ship.get_TrxName());  setClientOrg(ship);  setShipment(ship);  setC_DocTypeTarget_ID();  if (invoiceDate != null)   setDateInvoiced(invoiceDate);  setDateAcct(getDateInvoiced());  setSalesRep_ID(ship.getSalesRep_ID());}  }
class C{  public int compareTo(Counted<E> o){  return count.compareTo(o.count);}  }
class C{  public void initCurrentGroup(){  currentScriptGroup=new ScriptGroup();  currentScriptGroup.setLoop(1);  this.insertIndex=-1;  Map<String,String> params=FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();  String param=params.get("insertIndex");  if (param != null && NumberUtils.isNumber(param)) {    insertIndex=Integer.parseInt(param);  }}  }
class C{  public static Collection<Unit> transporting(final Unit transport){  return new ArrayList<>(((TripleAUnit)transport).getTransporting());}  }
class C{  public ZoomingPanControl(boolean repaint){  this.repaint=repaint;}  }
class C{  @LargeTest public void testTransitionFadeBlack() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final String videoItemFilename2=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_128kbps_1_35.3gp";  final String imageItemFilename1=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final String videoItemFilename3=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";  final String videoItemFilename4=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_256kbps_0_30.mp4";  final String videoItemFilename5=INPUT_FILE_PATH + "H263_profile0_176x144_10fps_96kbps_0_25.3gp";  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem1.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem1);  final MediaVideoItem mediaVideoItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",videoItemFilename2,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem2.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem2);  final TransitionFadeBlack transition1And2=mVideoEditorHelper.createTFadeBlack("transition1And2",mediaVideoItem1,mediaVideoItem2,3000,Transition.BEHAVIOR_SPEED_UP);  mVideoEditor.addTransition(transition1And2);  assertTrue("Transition ID",transition1And2.getId().equals("transition1And2"));  assertEquals("Transtion After Media item",mediaVideoItem1,transition1And2.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem2,transition1And2.getBeforeMediaItem());  assertEquals("Transtion Duration",3000,transition1And2.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_SPEED_UP,transition1And2.getBehavior());  final MediaImageItem mediaImageItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"m3",imageItemFilename1,15000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem3);  final TransitionFadeBlack transition2And3=mVideoEditorHelper.createTFadeBlack("transition2And3",mediaVideoItem2,mediaImageItem3,1000,Transition.BEHAVIOR_SPEED_DOWN);  mVideoEditor.addTransition(transition2And3);  assertTrue("Transition ID",transition2And3.getId().equals("transition2And3"));  assertEquals("Transtion After Media item",mediaVideoItem2,transition2And3.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaImageItem3,transition2And3.getBeforeMediaItem());  assertEquals("Transtion Duration",1000,transition2And3.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_SPEED_DOWN,transition2And3.getBehavior());  final MediaVideoItem mediaVideoItem4=mVideoEditorHelper.createMediaItem(mVideoEditor,"m4",videoItemFilename3,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem4.setExtractBoundaries(0,20000);  mVideoEditor.addMediaItem(mediaVideoItem4);  final TransitionFadeBlack transition3And4=mVideoEditorHelper.createTFadeBlack("transition3And4",mediaImageItem3,mediaVideoItem4,5000,Transition.BEHAVIOR_LINEAR);  mVideoEditor.addTransition(transition3And4);  assertTrue("Transition ID",transition3And4.getId().equals("transition3And4"));  assertEquals("Transtion After Media item",mediaImageItem3,transition3And4.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem4,transition3And4.getBeforeMediaItem());  assertEquals("Transtion Duration",5000,transition3And4.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_LINEAR,transition3And4.getBehavior());  final MediaVideoItem mediaVideoItem5=mVideoEditorHelper.createMediaItem(mVideoEditor,"m5",videoItemFilename4,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem5);  final TransitionFadeBlack transition4And5=mVideoEditorHelper.createTFadeBlack("transition4And5",mediaVideoItem4,mediaVideoItem5,8000,Transition.BEHAVIOR_MIDDLE_FAST);  mVideoEditor.addTransition(transition4And5);  assertTrue("Transition ID",transition4And5.getId().equals("transition4And5"));  assertEquals("Transtion After Media item",mediaVideoItem4,transition4And5.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem5,transition4And5.getBeforeMediaItem());  assertEquals("Transtion Duration",8000,transition4And5.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_MIDDLE_FAST,transition4And5.getBehavior());  final MediaVideoItem mediaVideoItem6=mVideoEditorHelper.createMediaItem(mVideoEditor,"m6",videoItemFilename5,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem6.setExtractBoundaries(0,20000);  mVideoEditor.addMediaItem(mediaVideoItem6);  final TransitionFadeBlack transition5And6=mVideoEditorHelper.createTFadeBlack("transition5And6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_SLOW);  mVideoEditor.addTransition(transition5And6);  assertTrue("Transition ID",transition5And6.getId().equals("transition5And6"));  assertEquals("Transtion After Media item",mediaVideoItem5,transition5And6.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem6,transition5And6.getBeforeMediaItem());  assertEquals("Transtion Duration",2000,transition5And6.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_MIDDLE_SLOW,transition5And6.getBehavior());  flagForException=false;  try {    mVideoEditorHelper.createTFadeBlack("transitiond6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_SPEED_UP - 1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition FadeBlack with Invalid behavior",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createTFadeBlack("transitiond6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_FAST + 1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition FadeBlack with Invalid behavior",flagForException);}  }
class C{  public void writeJson(OutputStream output,FreeFormPointSet ps){  try {    JsonFactory jsonFactory=new JsonFactory();    JsonGenerator jgen=jsonFactory.createGenerator(output);    jgen.setCodec(new ObjectMapper());    jgen.writeStartObject();{      if (ps == null) {        jgen.writeObjectFieldStart("properties");{          if (id != null)           jgen.writeStringField("id",id);        }        jgen.writeEndObject();      } else {        ps.writeJsonProperties(jgen);      }      jgen.writeObjectFieldStart("data");{        for (        String propertyId : histograms.keySet()) {          jgen.writeObjectFieldStart(propertyId);{            histograms.get(propertyId).writeJson(jgen);          }          jgen.writeEndObject();        }      }      jgen.writeEndObject();    }    jgen.writeEndObject();    jgen.close();  } catch (  IOException ioex) {    LOG.info("IOException, connection may have been closed while streaming JSON.");  }}  }
class C{  public void testMT() throws Exception {  tryMT(3,3);}  }
class C{  public S first(){  return first;}  }
class C{  protected boolean checkConditions(ConditionList conditions){  if (conditions == null)   return true;  int i=0;  while (i < conditions.size()) {    ConditionExpression condition=conditions.get(i);    Constantness c=isConstant(condition);    if (c != Constantness.VARIABLE) {      if (checkConstantBoolean(condition))       conditions.remove(i); else       return false;    } else     if (isFalseOrUnknown(condition))     return false; else     if (condition instanceof LogicalFunctionCondition) {      LogicalFunctionCondition lcond=(LogicalFunctionCondition)condition;      if ("and".equals(lcond.getFunction())) {        conditions.set(i,lcond.getLeft());        conditions.add(i + 1,lcond.getRight());        continue;      }    }    i++;  }  return true;}  }
class C{  public boolean processLine(boolean isSOTrx,String confirmType){  MInOutLine line=getLine();  if (MInOutConfirm.CONFIRMTYPE_CustomerConfirmation.equals(confirmType)) {    line.setConfirmedQty(getConfirmedQty());  } else   if (MInOutConfirm.CONFIRMTYPE_DropShipConfirm.equals(confirmType)) {  } else   if (MInOutConfirm.CONFIRMTYPE_PickQAConfirm.equals(confirmType)) {    line.setTargetQty(getTargetQty());    line.setMovementQty(getConfirmedQty());    line.setPickedQty(getConfirmedQty());    line.setScrappedQty(getScrappedQty());  } else   if (MInOutConfirm.CONFIRMTYPE_ShipReceiptConfirm.equals(confirmType)) {    line.setTargetQty(getTargetQty());    BigDecimal qty=getConfirmedQty();    if (!isSOTrx)     qty=qty.add(getScrappedQty());    line.setMovementQty(qty);    line.setScrappedQty(getScrappedQty());  } else   if (MInOutConfirm.CONFIRMTYPE_VendorConfirmation.equals(confirmType)) {    line.setConfirmedQty(getConfirmedQty());  }  return line.save(get_TrxName());}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.ARRAY_TYPE_SPECIFIER;}  }
class C{  public Iterable<Integer> cycle(){  return cycle;}  }
class C{  @Override public void flushBuffer() throws IOException {  if (this.printWriter != null) {    this.printWriter.flush();  }  if (this.gzipOutputStream != null) {    this.gzipOutputStream.flush();  }  if (!disableFlushBuffer) {    super.flushBuffer();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:00.793 -0500",hash_original_method="89691ECA244C4E1A9E04F5B4F61288E7",hash_generated_method="70447D9B5C38F395E125BC3A0127D68F") public boolean equals(Object other){  if (other == null)   return false;  if (!other.getClass().equals(this.getClass())) {    return false;  }  CallIdentifier that=(CallIdentifier)other;  if (this.localId.compareTo(that.localId) != 0) {    return false;  }  if (this.host == that.host)   return true;  if ((this.host == null && that.host != null) || (this.host != null && that.host == null))   return false;  if (host.compareToIgnoreCase(that.host) != 0) {    return false;  }  return true;}  }
class C{  public static <T>ObjectAnimator ofInt(T target,Property<T,Integer> property,int... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setIntValues(values);  return anim;}  }
class C{  TemplateSubPatternAssociation(ElemTemplate template,StepPattern pattern,String pat){  m_pattern=pat;  m_template=template;  m_stepPattern=pattern;  m_targetString=m_stepPattern.getTargetString();  m_wild=m_targetString.equals("*");}  }
class C{  public Document createDocument(String uri) throws IOException {  ParsedURL purl=new ParsedURL(uri);  InputStream is=purl.openStream(MimeTypeConstants.MIME_TYPES_SVG);  InputSource isrc=new InputSource(is);  String contentType=purl.getContentType();  int cindex=-1;  if (contentType != null) {    contentType=contentType.toLowerCase();    cindex=contentType.indexOf(HTTP_CHARSET);  }  String charset=null;  if (cindex != -1) {    int i=cindex + HTTP_CHARSET.length();    int eqIdx=contentType.indexOf('=',i);    if (eqIdx != -1) {      eqIdx++;      int idx=contentType.indexOf(',',eqIdx);      int semiIdx=contentType.indexOf(';',eqIdx);      if ((semiIdx != -1) && ((semiIdx < idx) || (idx == -1)))       idx=semiIdx;      if (idx != -1)       charset=contentType.substring(eqIdx,idx); else       charset=contentType.substring(eqIdx);      charset=charset.trim();      isrc.setEncoding(charset);    }  }  isrc.setSystemId(uri);  SVGOMDocument doc=(SVGOMDocument)super.createDocument(SVGDOMImplementation.SVG_NAMESPACE_URI,"svg",uri,isrc);  doc.setParsedURL(purl);  doc.setDocumentInputEncoding(charset);  doc.setXmlStandalone(isStandalone);  doc.setXmlVersion(xmlVersion);  return doc;}  }
class C{  public SaturationFilter(){}  }
class C{  protected void paintIndeterminate(Graphics g,JComponent c){  if (!(g instanceof Graphics2D)) {    return;  }  if (isUseParentPaint()) {    super.paintIndeterminate(g,c);    return;  }  Insets b=progressBar.getInsets();  int barRectWidth=progressBar.getWidth() - (b.right + b.left);  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);  if (barRectWidth <= 0 || barRectHeight <= 0) {    return;  }  paintProgressBarBgImpl(progressBar.getOrientation() == JProgressBar.HORIZONTAL,g,b,barRectWidth,barRectHeight);  Graphics2D g2=(Graphics2D)g;  boxRect=getBox(boxRect);  if (boxRect != null) {    g2.setColor(progressBar.getForeground());    paintProgressBarContentImpl(progressBar.getOrientation() == JProgressBar.HORIZONTAL,g,boxRect.x,boxRect.y,boxRect.width,boxRect.height,boxRect.height);  }  if (progressBar.isStringPainted()) {    if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {      paintString(g2,b.left,b.top,barRectWidth,barRectHeight,boxRect.x,boxRect.width,b);    } else {      paintString(g2,b.left,b.top,barRectWidth,barRectHeight,boxRect.y,boxRect.height,b);    }  }}  }
class C{  private void updateActions(){  String selectedText=getSelectedText();  if (selectedText == null)   selectedText="";  boolean stuffSelected=!selectedText.equals("");  boolean allSelected=selectedText.equals(getText());  UNDO_ACTION.setEnabled(isEnabled() && isEditable() && isUndoAvailable());  CUT_ACTION.setEnabled(isEnabled() && isEditable() && stuffSelected);  COPY_ACTION.setEnabled(isEnabled() && stuffSelected);  PASTE_ACTION.setEnabled(isEnabled() && isEditable() && isPasteAvailable());  DELETE_ACTION.setEnabled(isEnabled() && stuffSelected);  SELECT_ALL_ACTION.setEnabled(isEnabled() && !allSelected);}  }
class C{  public static String createCnonce(){  String cnonce;  MessageDigest md5Helper=createMessageDigest("MD5");  cnonce=Long.toString(System.currentTimeMillis());  cnonce=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(cnonce)));  return cnonce;}  }
class C{  protected int scoreByMediaType(List<MediaType> mediaTypes,MediaType requiredMediaType){  int score=MAXIMUM_HEADER_SCORE;  boolean match=false;  boolean matchWildCard=false;  for (  MediaType mediaType : mediaTypes) {    if (mediaType.matches(requiredMediaType)) {      if (mediaType.isWildCardMediaType()) {        matchWildCard=true;      }      match=true;      break;    }    score-=2;  }  return match && !matchWildCard ? score : matchWildCard ? WILDCARD_MATCH_SCORE : DEFAULT_SCORE;}  }
class C{  public static String sanitizeMethodName(String methodName){  assert (methodName != null && methodName.length() > 0);  StringBuilder sb=new StringBuilder();  char firstChar=methodName.charAt(0);  if (Character.isJavaIdentifierStart(firstChar)) {    if (Character.isUpperCase(firstChar)) {      firstChar=Character.toLowerCase(firstChar);    }    sb.append(firstChar);  }  boolean previousCharWasDropped=false;  for (int i=1; i < methodName.length(); i++) {    char ch=methodName.charAt(i);    if (Character.isLetterOrDigit(ch)) {      if (previousCharWasDropped) {        ch=Character.toUpperCase(ch);      }      sb.append(ch);      previousCharWasDropped=false;    } else {      previousCharWasDropped=true;    }  }  if (sb.length() == 0) {    sb.append("_method");  }  return sb.toString();}  }
class C{  public void clear(){  stack.clear();  container.removeAllViews();  callOnViewRemoved();}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public void paintComponent(Graphics g){  g.drawImage(track,0,0,null);  Graphics2D g2d=(Graphics2D)g.create();  g2d.translate(carPosition.x,carPosition.y);  g2d.rotate(Math.toRadians(carRotation));  g2d.translate(-(carPosition.x),-(carPosition.y));  g2d.drawImage(car,carPosition.x - carWHalf,carPosition.y - carHHalf,null);}  }
class C{  private void unregisterForWiredHeadsetIntentBroadcast(){  apprtcContext.unregisterReceiver(wiredHeadsetReceiver);  wiredHeadsetReceiver=null;}  }
class C{  public boolean isSslEnabled(){  return manager.connectionPoolSettings.enableSsl;}  }
class C{  private void endTouch(){  removeCallbacks(mLongPressRunnable);  mTouchState=TOUCH_STATE_RESTING;}  }
class C{  public LocaleRequestWrapper(final HttpServletRequest decorated,final Locale userLocale){  super(decorated);  preferredLocale=userLocale;  if (null == preferredLocale) {    log.error("preferred locale = null, it is an unexpected value!");  }}  }
class C{  public CarrierPlanXmlParserV2(Carriers carriers){  super();  this.carriers=carriers;}  }
class C{  private void synchronizeChanged(){  clock.setSynchronize(synchronizeCheckBox.isSelected(),true);  changed=true;}  }
class C{  public static int hash(Object item){  if (item == null) {    return 0;  }  return item.hashCode();}  }
class C{  public boolean isWrapperFor(final Class<?> iface) throws SQLException {  return false;}  }
class C{  @SuppressWarnings("SameParameterValue") private Animator createAnimation(@NonNull View view,int endAlpha){  return ObjectAnimator.ofFloat(view,ViewUtils.getAlphaProperty(),endAlpha);}  }
class C{  public boolean remove(Object o){  if (o == null) {    for (Entry e=header.next; e != header; e=e.next) {      if (e.element == null) {        remove(e);        return true;      }    }  } else {    for (Entry e=header.next; e != header; e=e.next) {      if (o.equals(e.element)) {        remove(e);        return true;      }    }  }  return false;}  }
class C{  void hideMenu(){  menuBar.unInstallMenuBar();}  }
class C{  Node(){  this.children=new Node[256];  this.symbol=0;  this.terminalBits=0;}  }
class C{  public BackupManager(Context context){  mContext=context;}  }
class C{  void notifyComplete(){synchronized (waitObject) {    isComplete=true;    waitObject.notifyAll();    if (listener != null) {      listener.onSuccess(this);    }  }}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  protected void _init(final IDatatypeURIResolver resolver,final ILexiconConfiguration<BigdataValue> config,final Collection<IExtension<? extends BigdataValue>> extensions){}  }
class C{  protected byte[] fetchClass(String classname) throws Exception {  byte[] b;  URL url=new URL("http",server,port,"/" + classname.replace('.','/') + ".class");  URLConnection con=url.openConnection();  con.connect();  int size=con.getContentLength();  InputStream s=con.getInputStream();  if (size <= 0)   b=readStream(s); else {    b=new byte[size];    int len=0;    do {      int n=s.read(b,len,size - len);      if (n < 0) {        s.close();        throw new IOException("the stream was closed: " + classname);      }      len+=n;    } while (len < size);  }  s.close();  return b;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.940 -0500",hash_original_method="631FDEF7985B082E37297CEE1F6072F7",hash_generated_method="282FA41582C10E3AE571FFC257BAB5FB") public ViewPropertyAnimator scaleXBy(float value){  animatePropertyBy(SCALE_X,value);  return this;}  }
class C{  public final String toString(){  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  StringBuilder buf=new StringBuilder();  int numVars=getVariableNames().size();  buf.append(getSampleSize()).append("\n");  for (int i=0; i < numVars; i++) {    String name=getVariableNames().get(i);    buf.append(name).append("\t");  }  buf.append("\n");  for (int j=0; j < numVars; j++) {    for (int i=0; i <= j; i++) {      buf.append(nf.format(getValue(i,j))).append("\t");    }    buf.append("\n");  }  return buf.toString();}  }
class C{  public void removeListener(final ICodeNodeListener listener){  m_listeners.removeListener(listener);}  }
class C{  public boolean hasAttribute(String key){  if (client == null) {    return false;  } else {    return client.hasAttribute(key);  }}  }
class C{  @Override public boolean supportsExtendedSQLGrammar(){  debugCodeCall("supportsExtendedSQLGrammar");  return false;}  }
class C{  public void clearEventos(){  eventos.clear();}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  @Override public Vote connected(){  return new BooleanVote(true);}  }
class C{  void implDigest(byte[] out,int ofs){  long bitsProcessed=bytesProcessed << 3;  int index=(int)bytesProcessed & 0x3f;  int padLen=(index < 56) ? (56 - index) : (120 - index);  engineUpdate(padding,0,padLen);  i2bBig4((int)(bitsProcessed >>> 32),buffer,56);  i2bBig4((int)bitsProcessed,buffer,60);  implCompress(buffer,0);  i2bBig(state,0,out,ofs,20);}  }
class C{  private void entryListToHtmlAndJson(String paneId,final StringBuilder result,ResultsPaginator paginator,List<?> results) throws IOException {  entryListToHtmlAndJson(paneId,result,paginator,results,SourceEmbedContext.InQuotations);}  }
class C{  public DNSKEYRecord(Name name,int dclass,long ttl,int flags,int proto,int alg,PublicKey key) throws DNSSEC.DNSSECException {  super(name,Type.DNSKEY,dclass,ttl,flags,proto,alg,DNSSEC.fromPublicKey(key,alg));  publicKey=key;}  }
class C{  public void disablePan(BluetoothAdapter adapter){  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);  assertNotNull(mPan);  long start=System.currentTimeMillis();  mPan.setBluetoothTethering(false);  long stop=System.currentTimeMillis();  assertFalse(mPan.isTetheringOn());  writeOutput(String.format("disablePan() completed in %d ms",(stop - start)));}  }
class C{  public static CodedException tr(String faultCode,String trCode,String faultMessage,Object... args){  CodedException ret=new CodedException(faultCode,faultMessage,args);  ret.translationCode=trCode;  return ret;}  }
class C{  public Boolean isFailOverToCrlEnabled(){  return failOverToCrlEnabled;}  }
class C{  public Vertex applyEQUAL(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex left=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex right=arguments.get(1).getTarget().applyQuotient(variables,network);  if (left.equals(right)) {    return network.createVertex(Primitive.TRUE);  } else {    return network.createVertex(Primitive.FALSE);  }}  }
class C{  boolean disableNetwork(int netId,int reason){  boolean ret=mWifiNative.disableNetwork(netId);  WifiConfiguration network=null;  WifiConfiguration config=mConfiguredNetworks.get(netId);  if (config != null && config.status != Status.DISABLED) {    config.status=Status.DISABLED;    config.disableReason=reason;    network=config;  }  if (network != null) {    sendConfiguredNetworksChangedBroadcast(network,WifiManager.CHANGE_REASON_CONFIG_CHANGE);  }  return ret;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("DDFRecord:\n");  buf.append("    ReuseHeader = ").append(nReuseHeader).append("\n");  buf.append("    DataSize = ").append(nDataSize).append("\n");  if (paoFields != null) {    for (Iterator it=paoFields.iterator(); it.hasNext(); ) {      buf.append((DDFField)it.next());    }  }  return buf.toString();}  }
class C{  public static File file(String base,String s){  File f=new File(base,s);  return f;}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entries(){  ImmutableSet<Entry<K,V>> result=entries;  return result == null ? (entries=new EntrySet<K,V>(this)) : result;}  }
class C{  public GeneralSubtreesTableModel(){  columnNames=new String[3];  columnNames[0]=res.getString("GeneralSubtreesTableModel.BaseColumn");  columnNames[1]=res.getString("GeneralSubtreesTableModel.MinimumColumn");  columnNames[2]=res.getString("GeneralSubtreesTableModel.MaximumColumn");  data=new Object[0][0];}  }
class C{  private void cleanBitmaps(int position){  List<Integer> toRemove=new ArrayList<>();  for (  Integer i : bitmaps.keySet()) {    if (i >= position - BITMAPS_PADDING && i <= position + BITMAPS_PADDING)     continue;    toRemove.add(i);  }  for (  Integer i : toRemove)   bitmaps.remove(i);}  }
class C{  public static Drawable makeBubbleDrawable(Context context,int iconRes,int backgroundRes){  return makeBubbleDrawable(ResourcesCompat.getDrawable(context.getResources(),iconRes,context.getTheme()),ResourcesCompat.getDrawable(context.getResources(),backgroundRes,context.getTheme()));}  }
class C{  public static void sqlMap(String methodName,String sqlname){  if (Configure.getInstance().profile_sqlmap_name_enabled == false)   return;  TraceContext ctx=TraceContextManager.getContext();  if (ctx == null)   return;  HashedMessageStep p=new HashedMessageStep();  p.start_time=(int)(System.currentTimeMillis() - ctx.startTime);  if (ctx.profile_thread_cputime) {    p.start_cpu=(int)(SysJMX.getCurrentThreadCPU() - ctx.startCpu);  }  p.hash=DataProxy.sendHashedMessage(new StringBuilder(40).append("SQLMAP ").append(methodName).append(" { ").append(sqlname).append(" }").toString());  ctx.profile.add(p);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(30);  sb.append(token).append("=").append(strength);  return sb.toString();}  }
class C{  public void render(Entity p_78088_1_,float x,float y,float z,float p_78088_5_,float p_78088_6_,float p_78088_7_){  GL11.glPushMatrix();  GL11.glTranslatef(x,y,z);  if (p_78088_1_.isSneaking())   GL11.glRotatef(0.5F * (180F / (float)Math.PI),1.0F,0.0F,0.0F);  Minecraft.getMinecraft().renderEngine.bindTexture(texture);  model.renderAll();  GL11.glPopMatrix();}  }
class C{  private String readName(ByteBuffer buf) throws IOException {  String s;  ISMatTag tag=new ISMatTag(buf);  char[] ac=tag.readToCharArray();  s=new String(ac);  return s;}  }
class C{  private static MultiLayerNetwork fitStraightline(DataSet ds){  int seed=12345;  int iterations=1;  int nEpochs=200;  double learningRate=0.00001;  int numInputs=1;  int numOutputs=1;  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(seed).iterations(iterations).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).learningRate(learningRate).weightInit(WeightInit.XAVIER).updater(Updater.NESTEROVS).momentum(0.9).list().layer(0,new DenseLayer.Builder().nIn(numInputs).nOut(numOutputs).activation("identity").build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MSE).activation("identity").nIn(numOutputs).nOut(numOutputs).build()).pretrain(false).backprop(true).build();  MultiLayerNetwork net=new MultiLayerNetwork(conf);  net.init();  net.setListeners(new ScoreIterationListener(1));  for (int i=0; i < nEpochs; i++) {    net.fit(ds);  }  return net;}  }
class C{  public List<IResource> chooseResources(){  if (open() == Window.OK) {    List<IResource> resources=new ArrayList<IResource>();    for (    Object obj : getResult()) {      resources.add((IResource)obj);    }    return resources;  }  return null;}  }
class C{  protected void addPeriodicPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TimeEvent_periodic_feature"),getString("_UI_PropertyDescriptor_description","_UI_TimeEvent_periodic_feature","_UI_TimeEvent_type"),SexecPackage.Literals.TIME_EVENT__PERIODIC,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  @Override public void clearAnswer(){  DateTime ldt=new DateTime();  mTimePicker.setCurrentHour(ldt.getHourOfDay());  mTimePicker.setCurrentMinute(ldt.getMinuteOfHour());}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder title(String title){  this.title=title;  return this;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (changeType_1: ");  result.append(changeType_1);  result.append(')');  return result.toString();}  }
class C{  public BookMetaBuilder start(final BookMeta meta){  return new BookMetaBuilder(meta);}  }
class C{  public void storeInSharedPreferences(String key,Object value,Context context){  SharedPreferences sharedPref=context.getSharedPreferences(Constants.PREFERENCES_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=sharedPref.edit();  Gson gson=new Gson();  editor.putString(key,gson.toJson(value));  editor.commit();}  }
class C{  @Nullable public static Throwable assertThrowsInherited(@Nullable IgniteLogger log,Callable<?> call,Class<? extends Throwable> cls,@Nullable String msg){  assert call != null;  assert cls != null;  try {    call.call();  } catch (  Throwable e) {    if (!cls.isAssignableFrom(e.getClass()))     fail("Exception class is not as expected [expected=" + cls + ", actual="+ e.getClass()+ ']',e);    if (msg != null && (e.getMessage() == null || !e.getMessage().startsWith(msg)))     fail("Exception message is not as expected [expected=" + msg + ", actual="+ e.getMessage()+ ']',e);    if (log != null) {      if (log.isDebugEnabled())       log.debug("Caught expected exception: " + e.getMessage());    } else     X.println("Caught expected exception: " + e.getMessage());    return e;  }  throw new AssertionError("Exception has not been thrown.");}  }
class C{  public void verifySignature(PublicKey clientPublicKey,byte[] handshakeMessages) throws HandshakeException {  boolean verified=false;  try {    Signature signature=Signature.getInstance(signatureAndHashAlgorithm.toString());    signature.initVerify(clientPublicKey);    signature.update(handshakeMessages);    verified=signature.verify(signatureBytes);  } catch (  SignatureException|InvalidKeyException|NoSuchAlgorithmException e) {    LOGGER.log(Level.SEVERE,"Could not verify the client's signature.",e);  }  if (!verified) {    String message="The client's CertificateVerify message could not be verified.";    AlertMessage alert=new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,getPeer());    throw new HandshakeException(message,alert);  }}  }
class C{  public void followSymLinks(final boolean followLinks){  this.followLinks=followLinks;}  }
class C{  protected Key engineDoPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {  if (!(key instanceof javax.crypto.interfaces.DHPublicKey)) {    throw new InvalidKeyException("Diffie-Hellman public key " + "expected");  }  javax.crypto.interfaces.DHPublicKey dhPubKey;  dhPubKey=(javax.crypto.interfaces.DHPublicKey)key;  if (init_p == null || init_g == null) {    throw new IllegalStateException("Not initialized");  }  BigInteger pub_p=dhPubKey.getParams().getP();  BigInteger pub_g=dhPubKey.getParams().getG();  if (pub_p != null && !(init_p.equals(pub_p))) {    throw new InvalidKeyException("Incompatible parameters");  }  if (pub_g != null && !(init_g.equals(pub_g))) {    throw new InvalidKeyException("Incompatible parameters");  }  KeyUtil.validate(dhPubKey);  this.y=dhPubKey.getY();  generateSecret=true;  if (lastPhase == false) {    byte[] intermediate=engineGenerateSecret();    return new DHPublicKey(new BigInteger(1,intermediate),init_p,init_g);  } else {    return null;  }}  }
class C{  public AnimatedAttrListener(){}  }
class C{  public EventStoreBuilder clusterNodeMaxDiscoverAttempts(int count){  clusterNodeMaxDiscoverAttempts=count;  return this;}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  private void appendGeometryCollectionText(GeometryCollection geometryCollection,int level,Writer writer) throws IOException {  if (geometryCollection.isEmpty()) {    writer.write("EMPTY");  } else {    int level2=level;    writer.write("(");    for (int i=0; i < geometryCollection.getNumGeometries(); i++) {      if (i > 0) {        writer.write(", ");        level2=level + 1;      }      appendGeometryTaggedText(geometryCollection.getGeometryN(i),level2,writer);    }    writer.write(")");  }}  }
class C{  public static void writeFloatList(IonWriter writer,float[] values) throws IOException {  if (writer instanceof PrivateListWriter) {    ((PrivateListWriter)writer).writeFloatList(values);    return;  }  writer.stepIn(IonType.LIST);  for (int ii=0; ii < values.length; ii++) {    writer.writeFloat(values[ii]);  }  writer.stepOut();}  }
class C{  @SuppressWarnings("unchecked") public void rehash(){  final OsmElement[] oldData=m_data;  m_data=new OsmElement[m_data.length];  m_size=0;  for (int i=0; i < m_data.length; i++) {    final OsmElement e=oldData[i];    if (e != FREE_KEY && e != removedKey) {      put(e.getOsmId(),(V)e);    }  }}  }
class C{  @Override public void parse(XmlPullParser parser) throws XmlPullParserException, IOException {  if (!parser.getName().equals(TAG)) {    throw new XmlPullParserException(String.format("invalid XML: Expected %s tag but received %s",TAG,parser.getName()));  }  setName(getAttribute(parser,NAME_ATTR));  mResult=CtsTestStatus.getStatus(getAttribute(parser,RESULT_ATTR));  mStartTime=getAttribute(parser,STARTTIME_ATTR);  mEndTime=getAttribute(parser,ENDTIME_ATTR);  int eventType=parser.next();  while (eventType != XmlPullParser.END_DOCUMENT) {    if (eventType == XmlPullParser.START_TAG && parser.getName().equals(SCENE_TAG)) {      mMessage=getAttribute(parser,MESSAGE_ATTR);    } else     if (eventType == XmlPullParser.START_TAG && parser.getName().equals(STACK_TAG)) {      mStackTrace=parser.nextText();    } else     if (eventType == XmlPullParser.END_TAG && parser.getName().equals(TAG)) {      return;    }    eventType=parser.next();  }}  }
class C{  boolean isJar(String pathEntry){  return pathEntry.endsWith(".jar") || pathEntry.endsWith(".zip");}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private TableOptionWrapper(){}  }
class C{  public boolean fillIfLive(long timeout) throws IOException {  StreamImpl source=_source;  byte[] readBuffer=_readBuffer;  if (readBuffer == null || source == null) {    _readOffset=0;    _readLength=0;    return false;  }  if (_readOffset > 0) {    System.arraycopy(readBuffer,_readOffset,readBuffer,0,_readLength - _readOffset);    _readLength-=_readOffset;    _readOffset=0;  }  if (_readLength == readBuffer.length)   return true;  int readLength=source.readTimeout(_readBuffer,_readLength,_readBuffer.length - _readLength,timeout);  if (readLength >= 0) {    _readLength+=readLength;    _position+=readLength;    if (_isEnableReadTime)     _readTime=CurrentTime.currentTime();    return true;  } else   if (readLength == READ_TIMEOUT) {    return true;  } else {    return false;  }}  }
class C{  public static Optional<Camera2OneCameraManagerImpl> create(){  if (!ApiHelper.HAS_CAMERA_2_API) {    return Optional.absent();  }  CameraManager cameraManager;  try {    cameraManager=AndroidServices.instance().provideCameraManager();  } catch (  IllegalStateException ex) {    Log.e(TAG,"camera2.CameraManager is not available.");    return Optional.absent();  }  Camera2OneCameraManagerImpl hardwareManager=new Camera2OneCameraManagerImpl(cameraManager);  return Optional.of(hardwareManager);}  }
class C{  public final Address pop1(){  if (checkDequeue(3))   return uncheckedDequeue(); else   return Address.zero();}  }
class C{  public DoubleProperty zoomProperty(){  return this.mapArea.zoomProperty();}  }
class C{  public static void ensureCacheSize(int width,int height){  if (cacheWidth < width || cacheHeight < height) {    cache=new IdealHex[width * height];    cacheWidth=width;    cacheHeight=height;  }}  }
class C{  public DDAG(Classifier baseClassifier){  super(baseClassifier);}  }
class C{  public static IGraph loadGraphWithGraphstreamFromGeneratorSource(final IScope scope,final IList<IAgent> nodes,final ISpecies edgeSpecies,final BaseGenerator generator,final int maxLinks,final Boolean isSynchronized){  final IAgent executor=scope.getAgent();  final IPopulation populationNodes=executor.getPopulationFor(nodes.get(0).getSpecies());  final IPopulation populationEdges=executor.getPopulationFor(edgeSpecies);  final IGraph createdGraph=new GamaGraph(scope,false,populationNodes.getType().getContentType(),populationEdges.getType().getContentType());  final Sink ourSink=new GraphStreamGamaGraphSink(createdGraph,scope,populationNodes,populationEdges,nodes);  generator.addSink(ourSink);  if (maxLinks < 0) {    generator.begin();    while (generator.nextEvents()) {    }    generator.end();  } else {    generator.begin();    for (int i=0; i < maxLinks; i++) {      generator.nextEvents();    }    generator.end();  }  if (isSynchronized) {    GraphAndPopulationsSynchronizer.synchronize(populationNodes,populationEdges,createdGraph);  }  return createdGraph;}  }
class C{  private boolean isValidHQL(String hql) throws RecognitionException, TokenStreamException {  HqlParser parser=HqlParser.getInstance(hql);  parser.statement();  return parser.getParseErrorHandler().getErrorCount() == 0;}  }
class C{  protected MergeStrategy makeStrategy(Xpp3Dom config){  if (!config.getName().equals("strategy")) {    throw new CargoException("You must specify a merge strategy");  }  String strategyName=config.getAttribute("name");  String strategyFile=config.getAttribute("file");  if (strategyName.equalsIgnoreCase("Preserve")) {    return DescriptorMergerByTag.PRESERVE;  } else   if (strategyName.equalsIgnoreCase("Overwrite")) {    return DescriptorMergerByTag.OVERWRITE;  } else   if (strategyName.equalsIgnoreCase("ChooseByName")) {    Xpp3Dom def=config.getChild("default").getChild(0);    ChooseByNameMergeStrategy cbnms=new ChooseByNameMergeStrategy(makeStrategy(def));    Xpp3Dom[] items=config.getChildren();    for (    Xpp3Dom item : items) {      if (item.getName().equals("choice")) {        cbnms.addStrategyForName(item.getAttribute("name"),makeStrategy(item.getChild(0)));      }    }    return cbnms;  }  if (strategyName.equalsIgnoreCase("NodeMerge")) {    try {      if (strategyFile != null) {        File f=new File(getConfigDirectory(),strategyFile);        WebXml webXml=WebXmlIo.parseWebXml(new FileInputStream(f),null);        return new NodeMergeStrategy(webXml.getDescriptorType(),webXml.getRootElement());      } else {        String theXml=config.getChild(0).toString();        WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(theXml.getBytes("UTF-8")),null);        return new NodeMergeStrategy(webXml.getDescriptorType(),webXml.getRootElement());      }    } catch (    Exception e) {      throw new CargoException("Problem generating Node Merge strategy",e);    }  }  throw new CargoException("Must provide a known strategy type (don't understand " + strategyName + ")");}  }
class C{  @Override public boolean onPrepareOptionsMenu(Menu menu){  super.onPrepareOptionsMenu(menu);  MenuItem item;  menu.removeItem(0);  menu.removeItem(1);switch (mMenuMode.getSelectedItemPosition()) {case MENUMODE_SEARCH_KEY:    item=menu.add(0,0,0,"(Search Key)");  break;case MENUMODE_MENU_ITEM:item=menu.add(0,0,0,"Search");item.setAlphabeticShortcut(SearchManager.MENU_KEY);break;case MENUMODE_TYPE_TO_SEARCH:item=menu.add(0,0,0,"(Type-To-Search)");break;case MENUMODE_DISABLED:item=menu.add(0,0,0,"(Disabled)");break;}item=menu.add(0,1,0,"Clear History");return true;}  }
class C{  public static void main(String[] args) throws WikiApiException {  String documentText=TestFile.getFileText();  MediaWikiParserFactory pf=new MediaWikiParserFactory();  MediaWikiParser parser=pf.createParser();  ParsedPage pp=parser.parse(documentText);  for (  Link language : pp.getLanguages()) {    System.out.println(language.getTarget());  }  for (  Section section : pp.getSections()) {    System.out.println("Section: " + section.getTitle());    for (    Link link : section.getLinks(Link.type.INTERNAL)) {      System.out.println("  " + link.getTarget());    }  }}  }
class C{  public FastDoubleBuffer append(FastDoubleBuffer buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ALayoutConstraint(int row,int col){  m_row=row;  m_col=col;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public boolean undo(INode n){  FreeCellNode state=(FreeCellNode)n;  Column col=state.cols[nth];  col.remove();  state.insertFree(card);  return true;}  }
class C{  @Override public void actionPerformed(ActionEvent evt){  try {    redo();  } catch (  CannotRedoException e) {    System.out.println("Cannot redo: " + e);  }}  }
class C{  public RewardLearner(DialogueSystem system){  this.system=system;  previousStates=new HashMap<Set<String>,DialogueState>();  sampler=new SamplingAlgorithm();}  }
class C{  public CondensedConnectionPanel(final NetworkPanel networkPanel,final Window parent,final int numTargs){  connectorPanel=SparseConnectionPanel.createSparsityAdjustmentPanel(new Sparse(),networkPanel);  connectorPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(5,5,10,5)));  connectorPanel.setNumTargs(numTargs);  connectorPanel.setDensity(0.25);  polarityPanel=SynapsePolarityAndRandomizerPanel.createPolarityRatioPanel(parent,RandBehavior.FORCE_ON);  polarityPanel.setPercentExcitatory(0.5);  mainPanel.add(connectorPanel);  mainPanel.add(polarityPanel);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.307 -0400",hash_original_method="D22A8775F93D73C17BDF3BF09F23B3C9",hash_generated_method="08B7A9770FF616867305B5D01AD15C1C") String parseToken() throws SaslException {  char currChar;  String token=null;  if (m_state == STATE_DONE)   return null;  while (m_curPos < m_tokens.length() && (token == null)) {    currChar=m_tokens.charAt(m_curPos);switch (m_state) {case STATE_LOOKING_FOR_FIRST_TOKEN:case STATE_LOOKING_FOR_TOKEN:      if (isWhiteSpace(currChar)) {        break;      } else       if (isValidTokenChar(currChar)) {        m_scanStart=m_curPos;        m_state=STATE_SCANNING_TOKEN;      } else {        m_state=STATE_PARSING_ERROR;        throw new SaslException("Invalid token character at position " + m_curPos);      }    break;case STATE_SCANNING_TOKEN:  if (isValidTokenChar(currChar)) {    break;  } else   if (isWhiteSpace(currChar)) {    token=m_tokens.substring(m_scanStart,m_curPos);    m_state=STATE_LOOKING_FOR_COMMA;  } else   if (',' == currChar) {    token=m_tokens.substring(m_scanStart,m_curPos);    m_state=STATE_LOOKING_FOR_TOKEN;  } else {    m_state=STATE_PARSING_ERROR;    throw new SaslException("Invalid token character at position " + m_curPos);  }break;case STATE_LOOKING_FOR_COMMA:if (isWhiteSpace(currChar)) break; else if (currChar == ',') m_state=STATE_LOOKING_FOR_TOKEN; else {m_state=STATE_PARSING_ERROR;throw new SaslException("Expected a comma, found '" + currChar + "' at postion "+ m_curPos);}break;}m_curPos++;}if (token == null) {switch (m_state) {case STATE_SCANNING_TOKEN:token=m_tokens.substring(m_scanStart);m_state=STATE_DONE;break;case STATE_LOOKING_FOR_FIRST_TOKEN:case STATE_LOOKING_FOR_COMMA:break;case STATE_LOOKING_FOR_TOKEN:throw new SaslException("Trialing comma");}}return token;}  }
class C{  public void addHeaderView(View view){  if (null == view) {    throw new IllegalArgumentException("the view to add must not be null!");  } else   if (mWrapAdapter == null) {    mTmpHeaderView.add(view);  } else {    mWrapAdapter.addHeaderView(view);  }}  }
class C{  public static Color determineForegroundColor(final INaviInstruction startInstruction,final String trackedRegister,final CInstructionResult result){  Preconditions.checkNotNull(startInstruction,"IE01674: Start instruction argument can not be null");  Preconditions.checkNotNull(trackedRegister,"IE01675: Tracked register argument can not be null");  Preconditions.checkNotNull(result,"IE01676: Result argument can not be null");  if (result.getInstruction() == startInstruction) {    return Color.BLACK;  } else   if (result.undefinesAll()) {    return Color.WHITE;  } else   if (result.clearsTrackedRegister(trackedRegister)) {    return Color.WHITE;  } else   if (result.undefinesSome()) {    return Color.BLACK;  } else   if (result.defines()) {    return Color.BLACK;  } else   if (result.updates()) {    return Color.BLACK;  } else   if (result.uses()) {    return Color.WHITE;  } else {    return Color.BLACK;  }}  }
class C{  @Override public void clearInitialState(){  initialState=false;}  }
class C{  protected void removeTextEventListeners(BridgeContext ctx,NodeEventTarget e){  AbstractNode n=(AbstractNode)e;  XBLEventSupport evtSupport=(XBLEventSupport)n.initializeEventSupport();  evtSupport.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",childNodeRemovedEventListener,true);  evtSupport.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",subtreeModifiedEventListener,false);}  }
class C{  private final void put(final String key,final long value){  super.put(key,Long.toString(value));}  }
class C{  private static boolean ensureEmpty(UUID nodeId){  return F.isEmpty(PLAN.get().mappers(nodeId)) && F.isEmpty(PLAN.get().reducers(nodeId));}  }
class C{  private String nextVariableName(String base){  int i=0;  loop:   while (true) {    String name=base + (++i);    for (    Node node1 : getGraph().getNodes()) {      if (node1.getName().equals(name)) {        continue loop;      }    }    break;  }  return base + i;}  }
class C{  private void notifyMembersForRefreshIntervalChange(long newInterval){  GfManagerAgent agent=getGfManagerAgent();  ApplicationVM[] VMs=agent.listApplications();  for (int i=0; i < VMs.length; i++) {    VMs[i].setRefreshInterval(newInterval);  }}  }
class C{  public static char[] readCharAmountFromReader(Reader reader,int length) throws IOException {  try {    char[] chars=new char[length];    int totalRead=0;    do {      int read=reader.read(chars,totalRead,length - totalRead);      if (read == -1) {        break;      }      totalRead+=read;    } while (totalRead != length);    return chars;  }  finally {    reader.close();  }}  }
class C{  public static void sessionStop(){  if (mProcess == null)   return;  mProcess.destroy();  mProcess=null;}  }
class C{  public static String readAll(final URL url) throws IOException {  try (InputStream input=url.openStream()){    return readAll(input);  } }  }
class C{  private void updateSaveButton(){  final String fileBaseText=m_debuggerPanel.getFileBase();  final boolean fileBaseChanged="".equals(fileBaseText) || !new CAddress(Convert.hexStringToLong(fileBaseText)).equals(m_module.getConfiguration().getFileBase());  final boolean imageBaseChanged=isImageBaseModified();  m_saveButton.setEnabled(!m_stdEditPanel.getNameString().equals(m_module.getConfiguration().getName()) || !m_stdEditPanel.getDescription().equals(m_module.getConfiguration().getDescription()) || fileBaseChanged|| imageBaseChanged|| (m_debuggerPanel.getSelectedDebugger() != m_module.getConfiguration().getDebuggerTemplate()));}  }
class C{  public void create(View view){  ForumPostConfig config=new ForumPostConfig();  saveProperties(config);  config.forum=MainActivity.instance.id;  HttpAction action=new HttpCreateForumPostAction(this,config);  action.execute();}  }
class C{  public void testDefaultValue() throws SQLException {  Statement st=con.createStatement();  try {    st.execute("drop TABLE testDefaultValue");  } catch (  SQLException e) {  }  String[] columns=new String[]{"tinyint","1","smallint","2","int","3","bigint","4","float","5.0","real","6.0","decimal(28,10)","0.1234567890","numeric(28,10)","0.1234567890","smallmoney","123.4567","money","12345.6789","bit","false","smalldatetime","1900-01-01 00:00:00.0","datetime","1900-01-01 00:00:00.0","char(10)","AaBbCcDdEe","varchar(10)","FfGgHhIiJj","nchar(10)","KkLlMmNnOo","nvarchar(10)","PpQqRrSsTt"};  StringBuilder sb=new StringBuilder();  sb.append("CREATE TABLE testDefaultValue (");  for (int i=0; i < columns.length / 2; i++) {    sb.append(i == 0 ? "" : ",");    sb.append("col");    sb.append(i);    sb.append(" ");    sb.append(columns[i * 2]);    sb.append(" default ");    sb.append(i > 9 ? "'" : "");    sb.append(columns[i * 2 + 1]);    sb.append(i > 9 ? "'" : "");  }  sb.append(")");  st.execute(sb.toString());  ResultSet rs=con.getMetaData().getColumns(null,null,"testDefaultValue","col%");  for (int i=0; i < columns.length / 2; i++) {    assertTrue(rs.next());    assertNotNull(rs.getString("COLUMN_DEF"));    assertTrue(rs.getString("COLUMN_DEF").indexOf(columns[i * 2 + 1]) > 0);  }  rs.close();  Assert.assertEquals(1,st.executeUpdate("insert into testDefaultValue (col0) values (" + columns[1] + ")"));  rs=st.executeQuery("select * from testDefaultValue");  assertTrue(rs.next());  for (int i=0; i < columns.length / 2; i++) {    Assert.assertEquals(columns[i * 2 + 1],rs.getObject(i + 1).toString());  }  rs.close();  st.close();}  }
class C{  public void test_checkServerTrusted_03() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=setX509Certificate();  xtm.checkServerTrusted(xcert,"SSL");}  }
class C{  public MultisigInfo(final int cosignatoriesCount,final int minCosignatories){  this.cosignatoriesCount=cosignatoriesCount;  this.minCosignatories=minCosignatories;}  }
class C{  public ThumbnailParameterBuilder scale(double widthScalingFactor,double heightScalingFactor){  if (widthScalingFactor <= 0.0 || heightScalingFactor <= 0.0) {    throw new IllegalArgumentException("Scaling factor is less than or equal to 0.");  } else   if (Double.isNaN(widthScalingFactor) || Double.isInfinite(widthScalingFactor)) {    throw new IllegalArgumentException("Scaling factor must be a rational number.");  } else   if (Double.isNaN(heightScalingFactor) || Double.isInfinite(heightScalingFactor)) {    throw new IllegalArgumentException("Scaling factor must be a rational number.");  }  this.widthScalingFactor=widthScalingFactor;  this.heightScalingFactor=heightScalingFactor;  return this;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public B put(TypeToken<? extends B> key,B value){  throw new UnsupportedOperationException();}  }
class C{  public void clear(){  buffer.clear();}  }
class C{  UserManagerService(File dataDir,File baseUserPath){  this(null,null,new Object(),new Object(),dataDir,baseUserPath);}  }
class C{  public void executeCallback(SceKernelThreadInfo thread,int address,IAction afterAction,boolean returnVoid){  if (log.isDebugEnabled()) {    log.debug(String.format("Execute callback 0x%08X, afterAction=%s, returnVoid=%b",address,afterAction,returnVoid));  }  callAddress(thread,address,afterAction,returnVoid,false,null);}  }
class C{  public boolean nextKeyValue(){  if (shuttingDown == true && fullList.isEmpty() == true) {    return false;  } else   if (shuttingDown == true && fullList.isEmpty() == false) {    key=new IntWritable(i++);    value=new Text(fullList.get(0).getAnchor() + "--__--" + fullList.get(0).getDomain()+ "--__--"+ fullList.get(0).getDocid()+ "--__--"+ fullList.get(0).getHtml()+ "--__--"+ fullList.get(0).getParentUrl()+ "--__--"+ fullList.get(0).getPath()+ "--__--"+ fullList.get(0).getSubDomain()+ "--__--"+ fullList.get(0).getUrl()+ "--__--"+ fullList.get(0).getBinary()+ "--__--");    fullList.remove(0);    return true;  } else   if (shuttingDown == false && fullList.isEmpty() == false) {    key=new IntWritable(i++);    value=new Text(fullList.get(0).getAnchor() + "--__--" + fullList.get(0).getDomain()+ "--__--"+ fullList.get(0).getDocid()+ "--__--"+ fullList.get(0).getHtml()+ "--__--"+ fullList.get(0).getParentUrl()+ "--__--"+ fullList.get(0).getPath()+ "--__--"+ fullList.get(0).getSubDomain()+ "--__--"+ fullList.get(0).getUrl()+ "--__--"+ fullList.get(0).getBinary()+ "--__--");    fullList.remove(0);    return true;  } else {    int COUNTER_TO_CHECK_INFINITE_LOOP=0;    while (fullList.isEmpty()) {      try {        Thread.sleep(1000);      } catch (      InterruptedException e) {        logger.info("Thread Interrupted in CrawlRecordReader");        throw new RuntimeException("Thread Interrupted" + e);      }      COUNTER_TO_CHECK_INFINITE_LOOP++;      if (COUNTER_TO_CHECK_INFINITE_LOOP > 600) {        return false;      }    }    key=new IntWritable(i++);    value=new Text(fullList.get(0).getAnchor() + "--__--" + fullList.get(0).getDomain()+ "--__--"+ fullList.get(0).getDocid()+ "--__--"+ fullList.get(0).getHtml()+ "--__--"+ fullList.get(0).getParentUrl()+ "--__--"+ fullList.get(0).getPath()+ "--__--"+ fullList.get(0).getSubDomain()+ "--__--"+ fullList.get(0).getUrl()+ "--__--"+ fullList.get(0).getBinary()+ "--__--");    fullList.remove(0);    return true;  }}  }
class C{  default Stream<String> renderJavadocTags(Generator gen,M model){  final Stream<String> stream=gen.onEach(model.getTags());  if (model.getTags().isEmpty()) {    return stream;  } else {    return Stream.concat(Stream.of(" "),stream);  }}  }
class C{  protected static HadoopMapReducePlanTopology topology(Collection<ClusterNode> nodes){  Map<String,HadoopMapReducePlanGroup> macsMap=new HashMap<>(nodes.size());  Map<UUID,HadoopMapReducePlanGroup> idToGrp=new HashMap<>(nodes.size());  Map<String,HadoopMapReducePlanGroup> hostToGrp=new HashMap<>(nodes.size());  for (  ClusterNode node : nodes) {    String macs=node.attribute(ATTR_MACS);    HadoopMapReducePlanGroup grp=macsMap.get(macs);    if (grp == null) {      grp=new HadoopMapReducePlanGroup(node,macs);      macsMap.put(macs,grp);    } else     grp.add(node);    idToGrp.put(node.id(),grp);    for (    String host : node.addresses()) {      HadoopMapReducePlanGroup hostGrp=hostToGrp.get(host);      if (hostGrp == null)       hostToGrp.put(host,grp); else       assert hostGrp == grp;    }  }  return new HadoopMapReducePlanTopology(new ArrayList<>(macsMap.values()),idToGrp,hostToGrp);}  }
class C{  String readFile(String theExample){  String record="";  String myResult="";  int recCount=0;  String myDir="../examples";  File file=new File(myDir);  if (file.exists() == false) {    myDir="./examples";  }  try {    FileReader fr=new FileReader(myDir + "/" + theExample+ "/"+ theExample+ ".pde");    BufferedReader br=new BufferedReader(fr);    record=new String();    while ((record=br.readLine()) != null) {      myResult+=record + "\n";    }  } catch (  IOException e) {    System.out.println(e);    return null;  }  return myResult;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 2) {    System.err.println("Usage: PluginRepository pluginId className [arg1 arg2 ...]");    return;  }  Configuration conf=NutchConfiguration.create();  PluginRepository repo=new PluginRepository(conf);  PluginDescriptor d=repo.getPluginDescriptor(args[0]);  if (d == null) {    System.err.println("Plugin '" + args[0] + "' not present or inactive.");    return;  }  ClassLoader cl=d.getClassLoader();  Class<?> clazz=null;  try {    clazz=Class.forName(args[1],true,cl);  } catch (  Exception e) {    System.err.println("Could not load the class '" + args[1] + ": "+ e.getMessage());    return;  }  Method m=null;  try {    m=clazz.getMethod("main",new Class<?>[]{args.getClass()});  } catch (  Exception e) {    System.err.println("Could not find the 'main(String[])' method in class " + args[1] + ": "+ e.getMessage());    return;  }  String[] subargs=new String[args.length - 2];  System.arraycopy(args,2,subargs,0,subargs.length);  m.invoke(null,new Object[]{subargs});}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void addInvokedynamic(int bootstrap,String name,String desc){  int nt=constPool.addNameAndTypeInfo(name,desc);  int dyn=constPool.addInvokeDynamicInfo(bootstrap,nt);  add(INVOKEDYNAMIC);  addIndex(dyn);  add(0,0);  growStack(Descriptor.dataSize(desc));}  }
class C{  public TFloatFloatHashMap(){}  }
class C{  private <I>I destinationClassControl(Exception exception,Class<I> clazz){  try {    if (clazz == null)     throw new IllegalArgumentException("it's mandatory define the destination class");  } catch (  Exception e) {    JmapperLog.ERROR(e);    return null;  }  return logAndReturnNull(exception);}  }
class C{  public static void replaceOrAppendContainer(IJavaProject javaProject,String containerId,IPath newContainerPath,IProgressMonitor monitor) throws JavaModelException {  IClasspathEntry[] classpathEntries=javaProject.getRawClasspath();  int indexOfClasspathEntryContainer=ClasspathUtilities.indexOfClasspathEntryContainer(classpathEntries,containerId);  IClasspathEntry newContainer=JavaCore.newContainerEntry(new Path(containerId).append(newContainerPath));  List<IClasspathEntry> newClasspathEntries=new ArrayList<IClasspathEntry>(Arrays.asList(classpathEntries));  if (indexOfClasspathEntryContainer >= 0) {    newClasspathEntries.set(indexOfClasspathEntryContainer,newContainer);  } else {    newClasspathEntries.add(newContainer);  }  javaProject.setRawClasspath(newClasspathEntries.toArray(new IClasspathEntry[newClasspathEntries.size()]),monitor);}  }
class C{  public static EnumSet<FacetRangeInclude> parseParam(final String[] param){  if (null == param || 0 == param.length)   return EnumSet.of(LOWER);  final EnumSet<FacetRangeInclude> include=EnumSet.noneOf(FacetRangeInclude.class);  for (  final String o : param) {    include.add(FacetRangeInclude.get(o));  }  if (include.contains(FacetRangeInclude.ALL))   return EnumSet.allOf(FacetRangeInclude.class);  return include;}  }
class C{  public static void saveSnapshot(final int width,final int height,final ByteBuffer bb){  int screenshotSize=width * height;  int pixelsBuffer[]=new int[screenshotSize];  bb.asIntBuffer().get(pixelsBuffer);  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.RGB_565);  bitmap.setPixels(pixelsBuffer,screenshotSize - width,-width,0,0,width,height);  pixelsBuffer=null;  short sBuffer[]=new short[screenshotSize];  ShortBuffer sb=ShortBuffer.wrap(sBuffer);  bitmap.copyPixelsToBuffer(sb);  for (int i=0; i < screenshotSize; ++i) {    short v=sBuffer[i];    sBuffer[i]=(short)(((v & 0x1f) << 11) | (v & 0x7e0) | ((v & 0xf800) >> 11));  }  sb.rewind();  bitmap.copyPixelsFromBuffer(sb);  try {    FileOutputStream fos=new FileOutputStream(LibraryController.getCurrentPath() + "/" + mName+ "/"+ mName+ ".thumb");    bitmap.compress(Bitmap.CompressFormat.JPEG,100,fos);    fos.flush();    fos.close();  } catch (  Exception e) {    e.printStackTrace();  }  dismissSnapshotAlert();}  }
class C{  public void resetSyntax(){  for (int i=0; i < 256; i++) {    tokenTypes[i]=0;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.629 -0500",hash_original_method="C8ABF2DC6B89611B840AEC4DBAADD344",hash_generated_method="45DD593F42C875F9C50E96BA4C622377") private void drawTextRun(Canvas c,TextPaint wp,int start,int end,int contextStart,int contextEnd,boolean runIsRtl,float x,int y){  int flags=runIsRtl ? Canvas.DIRECTION_RTL : Canvas.DIRECTION_LTR;  if (mCharsValid) {    int count=end - start;    int contextCount=contextEnd - contextStart;    c.drawTextRun(mChars,start,count,contextStart,contextCount,x,y,flags,wp);  } else {    int delta=mStart;    c.drawTextRun(mText,delta + start,delta + end,delta + contextStart,delta + contextEnd,x,y,flags,wp);  }}  }
class C{  public RequiredRuntimeLibraryDependency createRequiredRuntimeLibraryDependency(){  RequiredRuntimeLibraryDependencyImpl requiredRuntimeLibraryDependency=new RequiredRuntimeLibraryDependencyImpl();  return requiredRuntimeLibraryDependency;}  }
class C{  public void updateFor(ConsoleRenderer renderer,Player player,boolean force,boolean paintIfNew){  if (renderer.pos.getWorld() == player.getWorld() && renderer.pos.distance(player.getLocation()) > 64)   return;synchronized (LOCK) {    stack.add(new StackEntry(renderer,new ClientConnection[]{ConsolesNMS.packetInternals.getConnection(player)},new String[]{player.getName()},false,force,paintIfNew));    LOCK.notify();  }}  }
class C{  public static LastModFrom parse(final String s){  try {    return valueOf(s.toUpperCase(Locale.ROOT));  } catch (  Exception e) {    log.warn("Unrecognized value for lastModFrom: " + s,e);    return BOGUS;  }}  }
class C{  private List<Datum> sampleNbestLists(int[] sourceIds,List<Sequence<IString>> sources,SentenceLevelMetric<IString,String> scoreMetric,List<List<RichTranslation<IString,String>>> translationList,List<List<Sequence<IString>>> referenceList){  assert sourceIds != null;  assert scoreMetric != null;  assert sourceIds.length == translationList.size();  assert translationList.size() == referenceList.size();  List<Datum> dataset=new ArrayList<Datum>(2 * xi);  for (int i=0; i < sourceIds.length; ++i) {    int sourceId=sourceIds[i];    List<RichTranslation<IString,String>> translations=translationList.get(i);    List<Sequence<IString>> references=referenceList.get(i);    Sequence<IString> source=sources.get(i);    List<Triple<Double,Integer,Integer>> v;    if (scoreMetric.isThreadsafe()) {      v=sample(translations,references,sourceId,source,scoreMetric);      if (translations.size() > 0) {        scoreMetric.update(sourceId,references,translations.get(0).translation);      }    } else {synchronized (scoreMetric) {        v=sample(translations,references,sourceId,source,scoreMetric);        if (translations.size() > 0) {          scoreMetric.update(sourceId,references,translations.get(0).translation);        }      }    }    Collections.sort(v);    Collections.reverse(v);    List<Triple<Double,Integer,Integer>> selectedV=v.subList(0,Math.min(xi,v.size()));    for (    Triple<Double,Integer,Integer> selectedPair : selectedV) {      Counter<String> plusFeatures=OptimizerUtils.featureValueCollectionToCounter(translations.get(selectedPair.second()).features);      Counter<String> minusFeatures=OptimizerUtils.featureValueCollectionToCounter(translations.get(selectedPair.third()).features);      Counter<String> gtVector=new ClassicCounter<String>(plusFeatures);      Counters.subtractInPlace(gtVector,minusFeatures);      dataset.add(new Datum(Label.POSITIVE,gtVector));      Counter<String> ltVector=new ClassicCounter<String>(minusFeatures);      Counters.subtractInPlace(ltVector,plusFeatures);      dataset.add(new Datum(Label.NEGATIVE,ltVector));    }  }  return dataset;}  }
class C{  @Override public void uncaughtException(final GLAnimatorControl animator,final GLAutoDrawable drawable,final Throwable cause){  System.out.println("Uncaught exception in animator & drawable:");  cause.printStackTrace();}  }
class C{  public RegionCommitList trim(RegionCommit rc){  if (get(size() - 1) != rc) {    return this;  }  if (this.trimRC == rc) {    return this.trimChild;  }  RegionCommitList result=new RegionCommitList(this);  this.trimRC=rc;  this.trimChild=result;  result.remove(result.size() - 1);{    Iterator it=result.iterator();    while (it.hasNext()) {      RegionCommit itrc=(RegionCommit)it.next();      itrc.incRefCount();      if (itrc.needsAck()) {        result.needsAck=true;      }    }  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getProperties();}  }
class C{  public void clearChanged(){  changed.set(false);}  }
class C{  public QLFFilesCollection(File directory,String extension,Class<F> featureClass){  this(featureClass);  processDirs(directory,extension);}  }
class C{  public static void trace(final String level,String s){  Trace.trace(level,s,null);}  }
class C{  public ServiceStateException(){}  }
class C{  private Element parseDocument(String features) throws ParseException {  Function<DOMImplementation,DocumentType> doctypeMaker=findDoctype();  Document doc=makeDocument(doctypeMaker,features,domImpl);  OpenElementStack elementStack=makeElementStack(doc,mq);  elementStack.open(false);  skipTopLevelDocIgnorables(true);  do {    parseDom(elementStack);    skipTopLevelDocIgnorables(false);  } while (!tokens.isEmpty());  FilePosition endPos=checkEnd(elementStack);  DocumentFragment root=elementStack.getRootElement();  Node firstChild=root.getFirstChild();  if (firstChild == null || firstChild.getNodeType() != Node.ELEMENT_NODE) {    throw new ParseException(new Message(DomParserMessageType.MISSING_DOCUMENT_ELEMENT,endPos));  }  for (Node child=firstChild.getNextSibling(); child != null; child=child.getNextSibling()) {switch (child.getNodeType()) {case Node.COMMENT_NODE:case Node.DOCUMENT_TYPE_NODE:      continue;case Node.TEXT_NODE:    if ("".equals(child.getNodeValue().trim())) {      continue;    }  break;default :break;}throw new ParseException(new Message(DomParserMessageType.MISPLACED_CONTENT,Nodes.getFilePositionFor(child)));}Nodes.setFilePositionFor(doc,Nodes.getFilePositionFor(root));doc.appendChild(firstChild);if (elementStack.needsNamespaceFixup()) {firstChild=fixup(firstChild,ns);}return (Element)firstChild;}  }
class C{  public static AsciiImgCache create(final Font font){  return create(font,defaultCharacters);}  }
class C{  public JPanel(LayoutManager layout,boolean isDoubleBuffered){  setLayout(layout);  setDoubleBuffered(isDoubleBuffered);  setUIProperty("opaque",Boolean.TRUE);  updateUI();}  }
class C{  public static double atan(double x){  return MathLib._atan(x);}  }
class C{  public RegisterServerRequest clone(){  RegisterServerRequest result=new RegisterServerRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.Server=Server == null ? null : Server.clone();  return result;}  }
class C{  public boolean isForwardMode(){  return isForwardMode(esmClass);}  }
class C{  public byte[] createImage(Projection proj){  return createImage(proj,-1,-1,0xFFFFFFFF);}  }
class C{  public YearMonthDay withMonthOfYear(int monthOfYear){  int[] newValues=getValues();  newValues=getChronology().monthOfYear().set(this,MONTH_OF_YEAR,newValues,monthOfYear);  return new YearMonthDay(this,newValues);}  }
class C{  public boolean belongs(@Nullable Object key,N node){  A.notNull(node,"node");  N n=node(key);  return n != null && n.equals(node);}  }
class C{  public UISigFakeAttack(){  initComponents();}  }
class C{  public void computeRects(int windowWidth,int windowHeight,Rect taskStackBounds){  mViewRect.set(0,0,windowWidth,windowHeight);  mStackRect.set(taskStackBounds);  mStackVisibleRect.set(taskStackBounds);  mStackVisibleRect.bottom=mViewRect.bottom;  int widthPadding=(int)(mConfig.taskStackWidthPaddingPct * mStackRect.width());  int heightPadding=mConfig.taskStackTopPaddingPx;  mStackRect.inset(widthPadding,heightPadding);  int width=mStackRect.width();  int height=mStackRect.height();  int left=mStackRect.left + (mStackRect.width() - width) / 2;  mTaskRect.set(left,mStackRect.top,left + width,mStackRect.top + height);  float visibleTaskPct=0.5f;  mWithinAffiliationOffset=0;  mBetweenAffiliationOffset=(int)(visibleTaskPct * mTaskRect.height());}  }
class C{  public void checkOptionsValid(){  if (alias_ratio < 0 || alias_ratio > 1) {    throw new RuntimeException("Alias ratio must be between 0 and 1, inclusive.");  }  if (null_ratio < 0 || null_ratio > 1) {    throw new RuntimeException("Null ratio must be between 0 and 1, inclusive.");  }  if (maxsize <= 0) {    throw new RuntimeException("Maximum sequence size must be greater than zero but was " + maxsize);  }  if (!literals_file.isEmpty() && literals_level == ClassLiteralsMode.NONE) {    throw new RuntimeException("Invalid parameter combination: specified a class literal file but --use-class-literals=NONE");  }}  }
class C{  private void processBatch(){  try (DnsWriter writer=dnsWriterProxy.getForTld(tld)){    for (    String domain : nullToEmpty(domains)) {      if (!DomainNameUtils.isUnder(InternetDomainName.from(domain),InternetDomainName.from(tld))) {        dnsMetrics.incrementPublishDomainRequests(tld,Status.REJECTED);        logger.severefmt("%s: skipping domain %s not under tld",tld,domain);      } else {        dnsMetrics.incrementPublishDomainRequests(tld,Status.ACCEPTED);        writer.publishDomain(domain);      }    }    for (    String host : nullToEmpty(hosts)) {      if (!DomainNameUtils.isUnder(InternetDomainName.from(host),InternetDomainName.from(tld))) {        dnsMetrics.incrementPublishHostRequests(tld,Status.REJECTED);        logger.severefmt("%s: skipping host %s not under tld",tld,host);      } else {        dnsMetrics.incrementPublishHostRequests(tld,Status.ACCEPTED);        writer.publishHost(host);      }    }  } }  }
class C{  public static boolean isLocalEmergencyNumber(String number,Context context){  return isLocalEmergencyNumberInternal(number,context,true);}  }
class C{  public boolean isApplicable(){  return applicable;}  }
class C{  public static String rightPad(String str,int size){  return rightPad(str,size," ");}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    m_extendedTypeID=0;    super.detach();  }}  }
class C{  private String stripExtension(String file,String extension){  if (file.endsWith(extension)) {    int index=file.lastIndexOf('.');    String s=file.substring(0,index);    return s;  }  return file;}  }
class C{  public void enable(){  haveSync=false;  if (useDefaultDisplayVsync) {    vsyncSampler.addObserver();  }}  }
class C{  private final void prevToken(){  if (m_queueMark > 0) {    m_queueMark--;    m_token=(String)m_ops.m_tokenQueue.elementAt(m_queueMark);    m_tokenChar=m_token.charAt(0);  } else {    m_token=null;    m_tokenChar=0;  }}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,int sortOrder,String pathDocumentFile,String pathDocAnnFile) throws Exception {  checkExistsParent(parentDivId);  checkValidDocumentName(parentDivId,name);  m_documents.addNewDocument(name,parentDivId,fileExt,sortOrder,pathDocumentFile,pathDocAnnFile);}  }
class C{  public final double sampleMax(){  long count=_acquireCount.get() - _releaseCount.get();  long max=_max.getAndSet(count);  return max;}  }
class C{  public void entity(String name,int value){  theEntities.put(name,new Integer(value));}  }
class C{  public void downloadArtwork(TvShow show,MediaFileType type){  String url="";  String filename="";switch (type) {case FANART:case POSTER:case BANNER:case EXTRAFANART:case EXTRATHUMB:case LOGO:case CLEARLOGO:case CLEARART:case THUMB:    url=show.getArtworkUrl(type);  filename=type.name().toLowerCase() + "." + FilenameUtils.getExtension(url);break;default :break;}if (StringUtils.isBlank(url) || StringUtils.isBlank(filename)) {return;}MediaEntityImageFetcherTask task=new MediaEntityImageFetcherTask(show,url,MediaFileType.getMediaArtworkType(type),filename,true);TmmTaskManager.getInstance().addImageDownloadTask(task);}  }
class C{  public LatLonDocValuesField(String name,double latitude,double longitude){  super(name,TYPE);  setLocationValue(latitude,longitude);}  }
class C{  public ServiceNotFoundException(String arg0){  super(arg0);}  }
class C{  public BaseService(final Class<InterfaceType> interfaceClass,final ServiceParameters parameters){  if (interfaceClass == null) {    throw new IllegalArgumentException("Constructor parameters cannot be null!");  }  this.interfaceClass=interfaceClass;  this.serviceParameters=parameters;  InitService();}  }
class C{  public String nextToken(){  skipDelimiters();  if (currentPosition >= maxPosition) {    throw new NoSuchElementException();  }  int start=currentPosition;  while ((currentPosition < maxPosition) && (delimiters.indexOf(str.charAt(currentPosition)) < 0)) {    currentPosition++;  }  if (retTokens && (start == currentPosition) && (delimiters.indexOf(str.charAt(currentPosition)) >= 0)) {    currentPosition++;  }  return str.substring(start,currentPosition);}  }
class C{  public void finishDecode(IoSession session,ProtocolDecoderOutput out) throws Exception {}  }
class C{  public void testSetProperties(){  String[] values=null;  Metadata meta=new Metadata();  Properties props=new Properties();  meta.setAll(props);  assertEquals(0,meta.size());  props.setProperty("name-one","value1.1");  meta.setAll(props);  assertEquals(1,meta.size());  values=meta.getValues("name-one");  assertEquals(1,values.length);  assertEquals("value1.1",values[0]);  props.setProperty("name-two","value2.1");  meta.setAll(props);  assertEquals(2,meta.size());  values=meta.getValues("name-one");  assertEquals(1,values.length);  assertEquals("value1.1",values[0]);  values=meta.getValues("name-two");  assertEquals(1,values.length);  assertEquals("value2.1",values[0]);}  }
class C{  public void testEmptyStrings(){  UIViewRoot root=Util.getViewHandler(getFacesContext()).createView(getFacesContext(),null);  root.setLocale(Locale.US);  UIInput text=new UIInput(), hidden=new UIInput(), secret=new UIInput();  text.setId("text");  hidden.setId("hidden");  secret.setId("secret");  text.setRendererType("Text");  hidden.setRendererType("Hidden");  secret.setRendererType("Secret");  root.getChildren().add(text);  root.getChildren().add(hidden);  root.getChildren().add(secret);  TextRenderer textRenderer=new TextRenderer();  HiddenRenderer hiddenRenderer=new HiddenRenderer();  SecretRenderer secretRenderer=new SecretRenderer();  try {    textRenderer.decode(getFacesContext(),text);    hiddenRenderer.decode(getFacesContext(),hidden);    secretRenderer.decode(getFacesContext(),secret);  } catch (  Throwable e) {    assertTrue(false);  }  assertTrue(text.isValid());  assertTrue(hidden.isValid());  assertTrue(secret.isValid());}  }
class C{  public ToHitData toHit(IGame game,Targetable target,Coords src,int elevation,EntityMovementType movement,boolean skid,boolean gotUp){  final Entity ae=getEntity(game);  if (ae == null) {    throw new IllegalStateException("Attacker is null");  }  if (target == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is null");  }  int targetId=Entity.NONE;  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;    targetId=target.getTargetId();  } else {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Invalid Target");  }  if (!game.getOptions().booleanOption("friendly_fire")) {    if (!skid && (target.getTargetType() == Targetable.TYPE_ENTITY) && ((((Entity)target).getOwnerId() == ae.getOwnerId()) || ((((Entity)target).getOwner().getTeam() != IPlayer.TEAM_NONE) && (ae.getOwner().getTeam() != IPlayer.TEAM_NONE) && (ae.getOwner().getTeam() == ((Entity)target).getOwner().getTeam())))) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"A friendly unit can never be the target of a direct attack.");    }  }  IHex targHex=game.getBoard().getHex(target.getPosition());  final int attackerElevation=elevation + targHex.getLevel();  final int attackerHeight=attackerElevation + ae.height();  final int targetElevation=target.getElevation() + targHex.getLevel();  final int targetHeight=targetElevation + target.getHeight();  Building bldg=game.getBoard().getBuildingAt(getTargetPos());  ToHitData toHit=null;  boolean targIsBuilding=((getTargetType() == Targetable.TYPE_FUEL_TANK) || (getTargetType() == Targetable.TYPE_BUILDING));  boolean inSameBuilding=Compute.isInSameBuilding(game,ae,te);  if (ae.equals(te)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't target yourself");  }  if (Entity.NONE != te.getTransportId()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is a passenger.");  }  if (Entity.NONE != te.getSwarmTargetId()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is swarming a Mek.");  }  if (src.distance(target.getPosition()) > 1) {    if (null != te.getSecondaryPositions()) {      boolean inSecondaryRange=false;      for (      int i : te.getSecondaryPositions().keySet()) {        if (null != te.getSecondaryPositions().get(i)) {          if (src.distance(te.getSecondaryPositions().get(i)) < 2) {            inSecondaryRange=true;            break;          }        }      }      if (!inSecondaryRange) {        return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in range");      }    } else {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in range");    }  }  if ((ae instanceof Mech) && !skid) {    if (!(te instanceof Mech)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is not a mech");    }    if (te.isProne()) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is prone");    }  } else   if (te instanceof Infantry) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is infantry");  } else   if (te instanceof Protomech) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is protomech");  }  if ((attackerElevation > targetHeight) || (attackerHeight < targetElevation)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target must be within 1 elevation level");  }  if (te.hasDisplacementAttack()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is already making a charge/DFA attack");  }  if (!te.isDone() && !skid && !te.isImmobile()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target must be done with movement");  }  if (te.isTargetOfDisplacementAttack() && (te.findTargetedDisplacement().getEntityId() != ae.getId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is the target of another charge/DFA");  }  if ((null != bldg) && (!targIsBuilding) && Compute.isInBuilding(game,te)) {    if (!Compute.isInBuilding(game,ae)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is inside building");    } else     if (!game.getBoard().getBuildingAt(ae.getPosition()).equals(bldg)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is inside differnt building");    }  }  if ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK) || (target instanceof GunEmplacement)) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting adjacent building.");  }  if ((target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_HEX_CLEAR) || (target.getTargetType() == Targetable.TYPE_HEX_IGNITE)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Invalid attack");  }  int base=ae.getCrew().getPiloting();  toHit=new ToHitData(base,"base");  toHit.append(Compute.getAttackerMovementModifier(game,ae.getId(),movement));  toHit.append(Compute.getTargetMovementModifier(game,targetId));  toHit.append(Compute.getAttackerTerrainModifier(game,ae.getId()));  toHit.append(Compute.getTargetTerrainModifier(game,te,0,inSameBuilding));  if ((ae instanceof Mech) && ((Mech)ae).isSuperHeavy()) {    toHit.addModifier(+1,"attacker is superheavy mech");  }  if (ae.isSpotting()) {    toHit.addModifier(+1,"attacker is spotting");  }  if (ae.getCrew().getPiloting() != te.getCrew().getPiloting()) {    toHit.addModifier(ae.getCrew().getPiloting() - te.getCrew().getPiloting(),"piloting skill differential");  }  if (te.isProne()) {    toHit.addModifier(-2,"target prone and adjacent");  }  if ((te.height() > 0) && (te.getElevation() == -1) && (targHex.terrainLevel(Terrains.WATER) == te.height())) {    toHit.addModifier(1,"target has partial cover");  }  if ((ae instanceof Mech) && (((Mech)ae).getCockpitType() == Mech.COCKPIT_TORSO_MOUNTED)) {    int sensorHits=ae.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_HEAD);    int sensorHits2=ae.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_CT);    if ((sensorHits + sensorHits2) == 3) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Sensors Completely Destroyed for Torso-Mounted Cockpit");    } else     if (sensorHits == 2) {      toHit.addModifier(4,"Head Sensors Destroyed for Torso-Mounted Cockpit");    }  }  toHit.append(Compute.getImmobileMod(te));  if (skid) {    toHit.addModifier(3,"unintentional charge");  }  Compute.modifyPhysicalBTHForAdvantages(ae,te,toHit,game);  if (te.isEvading()) {    toHit.addModifier(te.getEvasionBonus(),"target is evading");  }  toHit.setSideTable(te.sideTable(src));  if ((targHex.terrainLevel(Terrains.WATER) == te.height()) && (te.getElevation() == -1) && (te.height() > 0)) {    toHit.setHitTable(ToHitData.HIT_PUNCH);  } else   if (ae.getHeight() < target.getHeight()) {    toHit.setHitTable(ToHitData.HIT_KICK);  } else {    toHit.setHitTable(ToHitData.HIT_NORMAL);  }  if (target instanceof Dropship) {    if ((attackerHeight - targetElevation) > (target.getHeight() / 2)) {      toHit.setHitTable(ToHitData.HIT_NORMAL);    } else {      toHit.setHitTable(ToHitData.HIT_PUNCH);    }  }  if (game.getOptions().booleanOption(OptionsConstants.AGM_TAC_OPS_PHYSICAL_ATTACK_PSR)) {    if (ae.getWeightClass() == EntityWeightClass.WEIGHT_LIGHT) {      toHit.addModifier(-2,"Weight Class Attack Modifier");    } else     if (ae.getWeightClass() == EntityWeightClass.WEIGHT_MEDIUM) {      toHit.addModifier(-1,"Weight Class Attack Modifier");    }  }  if ((ae instanceof Mech) && ((Mech)ae).hasIndustrialTSM()) {    toHit.addModifier(2,"industrial TSM");  }  return toHit;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public static void runTrialParallel(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector,int ratio,int numThread){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  QuickSort<Integer> qs=new QuickSort<Integer>(ar);  qs.setPivotMethod(selector);  qs.setNumberHelperThreads(numThread);  qs.setThresholdRatio(ratio);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  public static String clearGuestShoppingListCookies(HttpServletRequest request,HttpServletResponse response){  Properties systemProps=System.getProperties();  String guestShoppingUserName="GuestShoppingListId_" + systemProps.getProperty("user.name").replace(" ","_");  Cookie guestShoppingListCookie=new Cookie(guestShoppingUserName,null);  guestShoppingListCookie.setMaxAge(0);  guestShoppingListCookie.setPath("/");  response.addCookie(guestShoppingListCookie);  return "success";}  }
class C{  @Override public void startOnInit(DeployService2Impl<I> deploy,Result<I> result){  deploy.startImpl(result);}  }
class C{  public void put(Map<String,Object> base,T value){  if (this.isEmpty) {    return;  }  if (base == null) {    throw new IllegalArgumentException("Cannot put a value in a null base Map");  }  try {    UelUtil.setValue(base,getExpression(base),value == null ? Object.class : value.getClass(),value);  } catch (  Exception e) {    Debug.logError("UEL exception while setting value: " + e + ", original = "+ this.original,module);  }}  }
class C{  public static PcRunner serializableInstance(){  return new PcRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public static Process execute(final List commands,final List envp,final File dir) throws IOException {  return Runtime.getRuntime().exec(stringify(commands),stringify(envp),dir);}  }
class C{  private GroovyShell createGroovyShell(){  Binding groovyBinding=new Binding();  final GroovyShell interp=new GroovyShell(groovyBinding);  return interp;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_EVENT_DEFINITION_1__PARAMETER_LIST_1:    getParameterList_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0].ordinal() >= State.main_region_A.ordinal() && stateVector[0].ordinal() <= State.main_region_A__region0_C.ordinal();case main_region_A__region0_B:  return stateVector[0] == State.main_region_A__region0_B;case main_region_A__region0_C:return stateVector[0] == State.main_region_A__region0_C;default :return false;}}  }
class C{  private void removeFocusStackEntryForClient(IBinder cb){  boolean isTopOfStackForClientToRemove=!mFocusStack.isEmpty() && mFocusStack.peek().mSourceRef.equals(cb);  Iterator<FocusStackEntry> stackIterator=mFocusStack.iterator();  while (stackIterator.hasNext()) {    FocusStackEntry fse=(FocusStackEntry)stackIterator.next();    if (fse.mSourceRef.equals(cb)) {      Log.i(TAG," AudioFocus  abandonAudioFocus(): removing entry for " + fse.mClientId);      stackIterator.remove();    }  }  if (isTopOfStackForClientToRemove) {    notifyTopOfAudioFocusStack();synchronized (mRCStack) {      checkUpdateRemoteControlDisplay_syncAfRcs(RC_INFO_ALL);    }  }}  }
class C{  public Dependencies remove(Dependency dependency){  if (dependencies().remove(requireNonNull(dependency,"Required not null dependency")) && !isNew()) {    removeDependencyFromXML(dependency);  }  return this;}  }
class C{  public void reset(){  mExpectedEvents.clear();  mExpectedInterrupt=false;  mReplaying=false;}  }
class C{  protected void removeButtonListener(){  int curSelIndex=tableViewer.getTable().getSelectionIndex();  if (curSelIndex > -1) {    String keyToRemove=ApplicationInsightsResourceRegistry.getKeyAsPerIndex(curSelIndex);    String projName=AIResourceChangeListener.getProjectNameAsPerKey(keyToRemove);    if (projName != null && !projName.isEmpty()) {      PluginUtil.displayErrorDialog(getShell(),Messages.appTtl,String.format(Messages.rsrcUseMsg,projName));    } else {      boolean choice=MessageDialog.openConfirm(getShell(),Messages.appTtl,Messages.rsrcRmvMsg);      if (choice) {        ApplicationInsightsResourceRegistry.getAppInsightsResrcList().remove(curSelIndex);        ApplicationInsightsPreferences.save();        tableViewer.refresh();        selIndex=-1;      }    }  }}  }
class C{  public Frame[] analyze(CtClass clazz,MethodInfo method) throws BadBytecode {  this.clazz=clazz;  CodeAttribute codeAttribute=method.getCodeAttribute();  if (codeAttribute == null)   return null;  int maxLocals=codeAttribute.getMaxLocals();  int maxStack=codeAttribute.getMaxStack();  int codeLength=codeAttribute.getCodeLength();  CodeIterator iter=codeAttribute.iterator();  IntQueue queue=new IntQueue();  exceptions=buildExceptionInfo(method);  subroutines=scanner.scan(method);  Executor executor=new Executor(clazz.getClassPool(),method.getConstPool());  frames=new Frame[codeLength];  frames[iter.lookAhead()]=firstFrame(method,maxLocals,maxStack);  queue.add(iter.next());  while (!queue.isEmpty()) {    analyzeNextEntry(method,iter,queue,executor);  }  return frames;}  }
class C{  private Object parseSingleElement(int row,int col) throws FitsException {  Object[] res=new Object[1];  try {    getBuffer(this.lengths[col],this.fileOffset + (long)row * (long)this.rowLen + this.offsets[col]);  } catch (  IOException e) {    this.buffer=null;    throw new FitsException("Unable to read element",e);  }  res[0]=ArrayFuncs.newInstance(this.types[col],1);  if (extractElement(0,this.lengths[col],res,0,0,this.nulls[col])) {    this.buffer=null;    return res[0];  } else {    this.buffer=null;    return null;  }}  }
class C{  public long readLong(){  return scanner.nextLong();}  }
class C{  private static boolean createZynamicsDirectory(){  final File dir=new File(ConfigHelper.getZynamicsDirectory(Constants.COMPANY_NAME));  return dir.exists() || dir.mkdir();}  }
class C{  public static void write(String baseFileName,GeomVectorField field){  try {    String shpFileName=baseFileName + ".shp";    RandomAccessFile shpFile=new RandomAccessFile(new File(shpFileName),"rw");    ByteBuffer headerBig=ByteBuffer.allocate(28);    headerBig.order(ByteOrder.BIG_ENDIAN);    headerBig.putInt(9994);    for (int i=0; i < 5; i++) {      headerBig.putInt(0);    }    headerBig.putInt(0);    shpFile.write(headerBig.array());    ByteBuffer headerLittle=ByteBuffer.allocate(72);    headerLittle.order(ByteOrder.LITTLE_ENDIAN);    headerLittle.putInt(1000);    int shapeType=0;    Bag geometries=field.getGeometries();    Geometry g=((MasonGeometry)geometries.objs[0]).geometry;    if (g instanceof Point) {      shapeType=1;    } else     if (g instanceof LineString) {      shapeType=3;    } else     if (g instanceof Polygon) {      shapeType=5;    }    headerLittle.putInt(shapeType);    Envelope e=field.getMBR();    headerLittle.putDouble(e.getMinX());    headerLittle.putDouble(e.getMinY());    headerLittle.putDouble(e.getMaxX());    headerLittle.putDouble(e.getMaxY());    headerLittle.putDouble(0.0);    headerLittle.putDouble(0.0);    headerLittle.putDouble(0.0);    headerLittle.putDouble(0.0);    shpFile.write(headerLittle.array());    String shxFileName=baseFileName + ".shx";    RandomAccessFile shxFile=new RandomAccessFile(new File(shxFileName),"rw");    shxFile.write(headerBig.array());    shxFile.write(headerLittle.array());    int fileSize=100;    for (int i=0; i < geometries.size(); i++) {      MasonGeometry wrapper=(MasonGeometry)geometries.objs[i];      Geometry geometry=wrapper.getGeometry();      ByteBuffer recordHeader=ByteBuffer.allocate(8);      recordHeader.order(ByteOrder.BIG_ENDIAN);      recordHeader.putInt(i + 1);      int size=20;      if (geometry instanceof LineString) {        LineString line=(LineString)wrapper.getGeometry();        size=line.getCoordinates().length * 16 + 48;      } else       if (geometry instanceof Polygon) {        Polygon poly=(Polygon)wrapper.getGeometry();        size=poly.getCoordinates().length * 16 + 48;      } else       if (geometry instanceof MultiPolygon) {        MultiPolygon poly=(MultiPolygon)wrapper.getGeometry();        size=poly.getCoordinates().length * 16 + 48;      }      shxFile.writeInt(fileSize / 2);      shxFile.writeInt(size / 2);      recordHeader.putInt(size / 2);      shpFile.write(recordHeader.array());      fileSize+=8 + size;      if (geometry instanceof Point) {        ByteBuffer pointBufferLittle=ByteBuffer.allocate(20);        pointBufferLittle.order(ByteOrder.LITTLE_ENDIAN);        pointBufferLittle.putInt(1);        Point p=(Point)wrapper.getGeometry();        pointBufferLittle.putDouble(p.getX());        pointBufferLittle.putDouble(p.getY());        shpFile.write(pointBufferLittle.array());      } else {        g=wrapper.getGeometry();        Coordinate coords[]=g.getCoordinates();        Envelope en=g.getEnvelopeInternal();        ByteBuffer polyBufferLittle=ByteBuffer.allocate(size);        polyBufferLittle.order(ByteOrder.LITTLE_ENDIAN);        if (g instanceof LineString) {          polyBufferLittle.putInt(3);        } else {          polyBufferLittle.putInt(5);        }        polyBufferLittle.putDouble(en.getMinX());        polyBufferLittle.putDouble(en.getMinY());        polyBufferLittle.putDouble(en.getMaxX());        polyBufferLittle.putDouble(en.getMaxY());        polyBufferLittle.putInt(1);        polyBufferLittle.putInt(g.getNumPoints());        polyBufferLittle.putInt(0);        for (int k=0; k < coords.length; k++) {          polyBufferLittle.putDouble(coords[k].x);          polyBufferLittle.putDouble(coords[k].y);        }        shpFile.write(polyBufferLittle.array());      }    }    headerBig.putInt(24,fileSize / 2);    shpFile.seek(0);    shpFile.write(headerBig.array());    shpFile.close();    shxFile.seek(0);    headerBig.putInt(24,(100 + 8 * geometries.size()) / 2);    shxFile.write(headerBig.array());    shxFile.close();    String attrFileName=baseFileName + ".dbf";    RandomAccessFile attrFile=new RandomAccessFile(new File(attrFileName),"rw");    ByteBuffer headerBuffer=ByteBuffer.allocate(32);    headerBuffer.order(ByteOrder.LITTLE_ENDIAN);    headerBuffer.put((byte)0x03);    Calendar cal=Calendar.getInstance();    SimpleDateFormat sdf=new SimpleDateFormat("yyMMdd");    String d=sdf.format(cal.getTime());    headerBuffer.put(Integer.valueOf(d.substring(0,2)).byteValue());    headerBuffer.put(Integer.valueOf(d.substring(2,4)).byteValue());    headerBuffer.put(Integer.valueOf(d.substring(4,6)).byteValue());    headerBuffer.putInt(geometries.size());    int numAttributes=((MasonGeometry)geometries.objs[0]).getAttributes().size();    headerBuffer.putShort((short)(32 + numAttributes * 32 + 1));    Map<String,Integer> attributeSizes=determineAttributeSizes(geometries);    final int decimalCount=11;    int recordSize=0;    for (    String attributeName : attributeSizes.keySet()) {      recordSize+=attributeSizes.get(attributeName);    }    headerBuffer.putShort((short)(1 + recordSize));    headerBuffer.putShort((byte)0);    headerBuffer.put((byte)0);    headerBuffer.put((byte)0);    headerBuffer.putInt((byte)0);    headerBuffer.putDouble((byte)0);    headerBuffer.put((byte)0);    headerBuffer.put((byte)0x01);    headerBuffer.putShort((byte)0);    attrFile.write(headerBuffer.array());    for (    String key : attributeSizes.keySet()) {      ByteBuffer fieldDescriptorArrayBuffer=ByteBuffer.allocate(32);      for (int i=0; i < 11; i++) {        if (i >= key.length()) {          fieldDescriptorArrayBuffer.put((byte)0);        } else {          fieldDescriptorArrayBuffer.put((byte)key.charAt(i));        }      }      MasonGeometry w=(MasonGeometry)geometries.objs[0];      AttributeValue value=(AttributeValue)w.getAttribute(key);      if (value.getValue() instanceof String) {        fieldDescriptorArrayBuffer.put((byte)'C');      } else       if (value.getValue() instanceof Integer) {        fieldDescriptorArrayBuffer.put((byte)'N');      } else       if (value.getValue() instanceof Double) {        fieldDescriptorArrayBuffer.put((byte)'F');      } else       if (value.getValue() instanceof Boolean) {        fieldDescriptorArrayBuffer.put((byte)'L');      }      fieldDescriptorArrayBuffer.putInt((byte)0);      fieldDescriptorArrayBuffer.put(attributeSizes.get(key).byteValue());      if (value.getValue() instanceof Double) {        fieldDescriptorArrayBuffer.put((byte)decimalCount);      } else {        fieldDescriptorArrayBuffer.put((byte)0);      }      fieldDescriptorArrayBuffer.putShort((byte)0);      fieldDescriptorArrayBuffer.put((byte)1);      fieldDescriptorArrayBuffer.putShort((byte)0);      fieldDescriptorArrayBuffer.put((byte)0);      for (int i=0; i < 7; i++) {        fieldDescriptorArrayBuffer.put((byte)0);      }      fieldDescriptorArrayBuffer.put((byte)0);      attrFile.write(fieldDescriptorArrayBuffer.array());    }    attrFile.write(0x0D);    for (int j=0; j < geometries.size(); j++) {      MasonGeometry wrapper=(MasonGeometry)geometries.objs[j];      ByteBuffer recordBuff=ByteBuffer.allocate(1 + recordSize);      recordBuff.put((byte)0x20);      for (      String attributeName : attributeSizes.keySet()) {        AttributeValue f=(AttributeValue)wrapper.getAttribute(attributeName);        Object value=f.getValue();        if (value instanceof Boolean) {          Boolean truthiness=(Boolean)value;          if (truthiness) {            recordBuff.putChar('T');          } else {            recordBuff.putChar('F');          }        } else         if (value instanceof Double) {          String doubleValueString=String.format("%19.11E",f.getDouble());          byte[] rawValue=doubleValueString.getBytes("US-ASCII");          recordBuff.put(rawValue);        } else {          byte[] rawValue=value.toString().getBytes("US-ASCII");          byte[] outValue=new byte[attributeSizes.get(attributeName)];          Arrays.fill(outValue,(byte)0x20);          System.arraycopy(rawValue,0,outValue,0,rawValue.length);          recordBuff.put(outValue);        }      }      attrFile.write(recordBuff.array());    }    attrFile.close();  } catch (  Exception ex) {    System.out.println("Error in ShapeFileExporter:write: ");    ex.printStackTrace();  }}  }
class C{  @Override protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private static final String checkNestedMapping(String fieldName){  if (isNestedMapping(fieldName)) {    String[] nestedFields=nestedFields(fieldName);    return nestedFields[nestedFields.length - 1];  }  return fieldName;}  }
class C{  public Enum_ createEnum_(){  Enum_Impl enum_=new Enum_Impl();  return enum_;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public float crs(Vector2 v){  return this.x * v.y - this.y * v.x;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.291 -0500",hash_original_method="9CC8ED822661580CCE03E5BEBA190339",hash_generated_method="AC382532967A92F5AE0A6334C055E43B") public static Element I8(RenderScript rs){  if (rs.mElement_I8 == null) {    rs.mElement_I8=createUser(rs,DataType.SIGNED_8);  }  return rs.mElement_I8;}  }
class C{  public void removePlugin(IMaterialPlugin plugin){  if (mPlugins != null && mPlugins.contains(plugin)) {    mPlugins.remove(plugin);    mIsDirty=true;  }}  }
class C{  public final void addStatusComponent(final Component component){  east.appendChild(component);}  }
class C{  public boolean declaresField(Field field){  try {    type.getDeclaredField(field.getName());    return true;  } catch (  NoSuchFieldException e) {    return false;  }}  }
class C{  public boolean isSaved(){  if (newFields.isEmpty() && deletedFields.isEmpty()) {    return true;  } else {    return false;  }}  }
class C{  public static String nullToEmpty(String str){  if (str == null) {    return "";  }  return str;}  }
class C{  public void test_pureAlloc(){  Journal store=(Journal)getStore();  try {    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bs.getStore();    long realAddr=0;    pureAllocBatch(store,1,32,rw.m_maxFixedAlloc - 4,30000);    store.commit();    if (log.isInfoEnabled())     log.info("Final allocations: " + rw.getTotalAllocations() + ", allocated bytes: "+ rw.getTotalAllocationsSize()+ ", file length: "+ rw.getStoreFile().length());    store.close();    if (log.isInfoEnabled())     log.info("Re-open Journal");    store=(Journal)getStore();    showStore(store);  }  finally {    store.destroy();  }}  }
class C{  public void addObject(Object o) throws Exception {  inspect(o.getClass());}  }
class C{  public long ticks(){  long ret=0;synchronized (eventsList) {    if (eventsList.size() > 0) {      ret=((MidiEvent)eventsList.get(eventsList.size() - 1)).getTick();    }  }  return ret;}  }
class C{  public GatedCheckinDialog(final Shell parentShell,final String shelvesetName,final String[] buildDefinitionNames,final String[] buildDefinitionUris,final boolean allowBypassBuild,final boolean allowKeepCheckedOut){  super(parentShell);  Check.notNull(shelvesetName,"shelvesetName");  Check.notNull(buildDefinitionNames,"buildDefinitions");  this.shelvesetName=shelvesetName;  this.buildDefinitionNames=buildDefinitionNames;  this.buildDefinitionUris=buildDefinitionUris;  this.allowBypassBuild=allowBypassBuild;  this.allowKeepCheckedOut=allowKeepCheckedOut;  final ImageHelper imageHelper=new ImageHelper(TFSCommonUIClientPlugin.PLUGIN_ID);  image=imageHelper.getImage("images/vc/gated.gif");  setOptionIncludeDefaultButtons(false);  addButtonDescription(IDialogConstants.OK_ID,Messages.getString("GatedCheckinDialog.BuildChangesButtonText"),true);  addButtonDescription(IDialogConstants.CANCEL_ID,IDialogConstants.CANCEL_LABEL,false);}  }
class C{  public RewrittenUrl handleInvocationTargetException(final HttpServletRequest hsRequest,final HttpServletResponse hsResponse,InvocationTargetException e) throws ServletException, IOException {  Throwable originalThrowable=getOriginalException(e);  if (log.isDebugEnabled()) {    log.debug("attampting to find catch for exception " + originalThrowable.getClass().getName());  }  List catchElems=conf.getCatchElems();  for (int i=0; i < catchElems.size(); i++) {    CatchElem catchElem=(CatchElem)catchElems.get(i);    if (!catchElem.matches(originalThrowable))     continue;    try {      return catchElem.execute(hsRequest,hsResponse,originalThrowable);    } catch (    InvocationTargetException invocationExceptionInner) {      originalThrowable=getOriginalException(invocationExceptionInner);      log.warn("had exception processing catch, trying the rest of the catches with " + originalThrowable.getClass().getName());    }  }  if (log.isDebugEnabled()) {    log.debug("exception unhandled",e);  }  if (originalThrowable instanceof Error)   throw (Error)originalThrowable;  if (originalThrowable instanceof RuntimeException)   throw (RuntimeException)originalThrowable;  if (originalThrowable instanceof ServletException)   throw (ServletException)originalThrowable;  if (originalThrowable instanceof IOException)   throw (IOException)originalThrowable;  throw new ServletException(originalThrowable);}  }
class C{  public void afterDataFlush(PageServiceImpl tableService,int sequenceFlush){  _writeSequenceFlushed=Math.max(_writeSequenceFlushed,sequenceFlush);}  }
class C{  public ThreadPoolExecutorStatisticsTask(final String serviceName,final ThreadPoolExecutor service,final TaskCounters taskCounters,final double w){  if (serviceName == null)   throw new IllegalArgumentException();  if (service == null)   throw new IllegalArgumentException();  if (w <= 0d || w >= 1d)   throw new IllegalArgumentException();  this.serviceName=serviceName;  this.serviceRef=new WeakReference<ThreadPoolExecutor>(service);  this.taskCounters=taskCounters;  this.w=w;}  }
class C{  public static int[][] generateAllSets(int n,int p) throws Exception {  int numOfSets=numOfSets(n,p);  int[][] sets=new int[numOfSets][p];  int[] currentSet=new int[p];  writeSetsIn(n,p,0,0,currentSet,sets,0);  return sets;}  }
class C{  protected static int triangleSize(int x){  return (x * (x - 1)) >>> 1;}  }
class C{  public static byte[] generateBase64Encode(byte[] bytes){  byte[] hashCopy=Arrays.copyOf(bytes,bytes.length);  return Base64.getEncoder().encode(hashCopy);}  }
class C{  public EqualsBuilder append(final byte lhs,final byte rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  public GetTVShows(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  protected boolean updateImageForProjection(Projection proj){  boolean ret=proj.equals(lastProjection);  lastProjection=proj;  return !ret;}  }
class C{  public void undoLastAction(){  try {    if (undoManager.canUndo())     undoManager.undo();  } catch (  CannotUndoException cre) {    cre.printStackTrace();  }}  }
class C{  public static boolean isJvmBinaryVersionSupported(int major,int minor){  return major == JVM_BINARY_MAJOR_VERSION;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  Map.Entry<K,V> doRemoveLastEntry(){  for (; ; ) {    Node<K,V> b=findPredecessorOfLast();    Node<K,V> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      K key=n.key;      Comparable<? super K> ck=comparable(key);      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(ck); else {        findPredecessor(ck);        if (head.right == null)         tryReduceLevel();      }      return new AbstractMap.SimpleImmutableEntry<K,V>(key,(V)v);    }  }}  }
