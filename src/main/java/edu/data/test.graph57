class C{  public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  public void drawFrame(int textureId,float[] texMatrix){  mFilter.onDraw(IDENTITY_MATRIX,mRectDrawable.getVertexArray(),0,mRectDrawable.getVertexCount(),mRectDrawable.getCoordsPerVertex(),mRectDrawable.getVertexStride(),texMatrix,mRectDrawable.getTexCoordArray(),textureId,mRectDrawable.getTexCoordStride());}  }
class C{  protected JSONObject readInputStream(InputStream is) throws IOException {  String jsonString=readStreamToString(is);  JSONObject jsonObject;  try {    return new JSONObject(jsonString);  } catch (  JSONException error) {    throw new IOException(error.toString());  }}  }
class C{  protected boolean isValidLine(String line){  return true;}  }
class C{  public int read(byte b[],int off,int len) throws IOException, LogException {  if (length < len)   badRead(len);  len=in.read(b,off,len);  length-=len;  return len;}  }
class C{  private void removeFabLabels(){  getFabUpload().setTitle(null);  getFabMkdir().setTitle(null);  getFabUploadFromApp().setTitle(null);  ((TextView)getFabUpload().getTag(com.getbase.floatingactionbutton.R.id.fab_label)).setVisibility(View.GONE);  ((TextView)getFabMkdir().getTag(com.getbase.floatingactionbutton.R.id.fab_label)).setVisibility(View.GONE);  ((TextView)getFabUploadFromApp().getTag(com.getbase.floatingactionbutton.R.id.fab_label)).setVisibility(View.GONE);}  }
class C{  protected Pair processDefinitionStmt(Unit u){  if (!(u instanceof DefinitionStmt))   return null;  DefinitionStmt dStmt=(DefinitionStmt)u;  Local local;{    Value value=dStmt.getLeftOp();    if (!(value instanceof Local))     return null;    local=(Local)value;  }  Value rightOp=dStmt.getRightOp();  Constant constant=SEvaluator.getFuzzyConstantValueOf(rightOp,localToConstant);  if (!merge(local,constant))   return null;  return new Pair(u,localToConstant.get(local));}  }
class C{  public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public MFCC(float sampleRate,int windowSize,int numberCoefficients,boolean useFirstCoefficient,double minFreq,double maxFreq,int numberFilters) throws IllegalArgumentException {  if (windowSize < 32) {    throw new IllegalArgumentException("window size must be at least 32");  } else {    int i=32;    while (i < windowSize && i < Integer.MAX_VALUE)     i=i << 1;    if (i != windowSize)     throw new IllegalArgumentException("window size must be 2^n");  }  sampleRate=Math.round(sampleRate);  if (sampleRate < 1)   throw new IllegalArgumentException("sample rate must be at least 1");  if (numberFilters < 2 || numberFilters > (windowSize / 2) + 1)   throw new IllegalArgumentException("number filters must be at least 2 and smaller than the nyquist frequency");  if (numberCoefficients < 1 || numberCoefficients >= numberFilters)   throw new IllegalArgumentException("the number of coefficients must be greater or equal to 1 and samller than the number of filters");  if (minFreq <= 0 || minFreq > maxFreq || maxFreq > 88200.0f)   throw new IllegalArgumentException("the min. frequency must be greater 0 smaller than the max. frequency, which must be smaller than 88200.0");  this.sampleRate=sampleRate;  this.windowSize=windowSize;  this.hopSize=windowSize / 2;  this.baseFreq=sampleRate / windowSize;  this.numberCoefficients=numberCoefficients;  this.useFirstCoefficient=useFirstCoefficient;  this.minFreq=minFreq;  this.maxFreq=maxFreq;  this.numberFilters=numberFilters;  inputData=new double[windowSize];  buffer=new double[windowSize];  melFilterBanks=getMelFilterBanks();  dctMatrix=getDCTMatrix();  normalizedPowerFFT=new FFT(FFT.FFT_NORMALIZED_POWER,windowSize,FFT.WND_HANNING);}  }
class C{  @Override public String toString(){  StringBuffer str=new StringBuffer();  if (fPublicId != null) {    str.append(fPublicId);  }  str.append(':');  if (fLiteralSystemId != null) {    str.append(fLiteralSystemId);  }  str.append(':');  if (fExpandedSystemId != null) {    str.append(fExpandedSystemId);  }  str.append(':');  if (fBaseSystemId != null) {    str.append(fBaseSystemId);  }  str.append(':');  str.append(fLineNumber);  str.append(':');  str.append(fColumnNumber);  str.append(':');  str.append(fCharacterOffset);  str.append(':');  String message=getMessage();  if (message == null) {    Exception exception=getException();    if (exception != null) {      message=exception.getMessage();    }  }  if (message != null) {    str.append(message);  }  return str.toString();}  }
class C{  public MessagesGetChatUsersQueryWithFields nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public static double log10(double x){  return Math.log(x) / LOG10;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_REQUEST_TO_PARTNER(String value0){  return new SM_SYSTEM_MESSAGE(1300094,value0);}  }
class C{  public HeaderIterator iterator(final String name){  return new SaveListHeaderIterator(this.headers,name);}  }
class C{  private void testLockWhenSomeoneHeldLock(long timeout) throws Exception {  String lockPath="/test-lock-nowait-" + timeout + "-"+ System.currentTimeMillis();  String clientId0="test-lock-nowait-0-" + System.currentTimeMillis();  String clientId1="test-lock-nowait-1-" + System.currentTimeMillis();  String clientId2="test-lock-nowait-2-" + System.currentTimeMillis();  createLockPath(zkc.get(),lockPath);  ZKSessionLock lock0=new ZKSessionLock(zkc0,lockPath,clientId0,lockStateExecutor);  ZKSessionLock lock1=new ZKSessionLock(zkc,lockPath,clientId1,lockStateExecutor);  lock0.tryLock(Long.MAX_VALUE,TimeUnit.MILLISECONDS);  assertEquals(State.CLAIMED,lock0.getLockState());  List<String> children=getLockWaiters(zkc0,lockPath);  assertEquals(1,children.size());  assertEquals(lock0.getLockId(),Await.result(asyncParseClientID(zkc0.get(),lockPath,children.get(0))));  try {    lock1.tryLock(timeout,TimeUnit.MILLISECONDS);    fail("lock1 should fail on locking since lock0 is holding the lock.");  } catch (  OwnershipAcquireFailedException oafe) {    assertEquals(lock0.getLockId().getLeft(),oafe.getCurrentOwner());  }  assertEquals(State.CLAIMED,lock0.getLockState());  assertEquals(State.CLOSED,lock1.getLockState());  children=getLockWaiters(zkc0,lockPath);  assertEquals(1,children.size());  assertEquals(lock0.getLockId(),Await.result(asyncParseClientID(zkc0.get(),lockPath,children.get(0))));  lock0.unlock();  assertEquals(State.CLOSED,lock0.getLockState());  assertEquals(0,getLockWaiters(zkc,lockPath).size());  ZKSessionLock lock2=new ZKSessionLock(zkc,lockPath,clientId2,lockStateExecutor);  lock2.tryLock(timeout,TimeUnit.MILLISECONDS);  assertEquals(State.CLOSED,lock0.getLockState());  assertEquals(State.CLOSED,lock1.getLockState());  assertEquals(State.CLAIMED,lock2.getLockState());  children=getLockWaiters(zkc,lockPath);  assertEquals(1,children.size());  assertEquals(lock2.getLockId(),Await.result(asyncParseClientID(zkc.get(),lockPath,children.get(0))));  lock2.unlock();}  }
class C{  public void reset() throws JMSException {  if (this.dataOut != null) {    try {      this.dataOut.flush();      Body=this.bytesOut.toByteArray();      dataOut.close();      bytesOut.close();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed: " + ioe.toString());      jmsEx.setLinkedException(ioe);      throw jmsEx;    }  }  if (this.dataIn != null) {    try {      this.dataIn.close();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed: " + ioe.toString());      jmsEx.setLinkedException(ioe);      throw jmsEx;    }  }  this.setBodyReadOnly(true);  this.bytesOut=null;  this.dataIn=null;  this.dataOut=null;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public void delete(int key){  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public static JavaRDD<List<List<Writable>>> normalizeSequence(Schema schema,JavaRDD<List<List<Writable>>> data,double min,double max){  return normalizeSequence(schema,data,min,max,null);}  }
class C{  void processElementContent(QName element){  if (fCurrentElemDecl != null && fCurrentElemDecl.fDefault != null && !fSawText && !fSubElement && !fNil) {    String strv=fCurrentElemDecl.fDefault.stringValue();    int bufLen=strv.length();    if (fNormalizedStr.ch == null || fNormalizedStr.ch.length < bufLen) {      fNormalizedStr.ch=new char[bufLen];    }    strv.getChars(0,bufLen,fNormalizedStr.ch,0);    fNormalizedStr.offset=0;    fNormalizedStr.length=bufLen;    fDefaultValue=fNormalizedStr;  }  fValidatedInfo.normalizedValue=null;  if (fNil) {    if (fSubElement || fSawText) {      reportSchemaError("cvc-elt.3.2.1",new Object[]{element.rawname,SchemaSymbols.URI_XSI + "," + SchemaSymbols.XSI_NIL});    }  }  this.fValidatedInfo.reset();  if (fCurrentElemDecl != null && fCurrentElemDecl.getConstraintType() != XSConstants.VC_NONE && !fSubElement && !fSawText && !fNil) {    if (fCurrentType != fCurrentElemDecl.fType) {      if (XSConstraints.ElementDefaultValidImmediate(fCurrentType,fCurrentElemDecl.fDefault.stringValue(),fState4XsiType,null) == null)       reportSchemaError("cvc-elt.5.1.1",new Object[]{element.rawname,fCurrentType.getName(),fCurrentElemDecl.fDefault.stringValue()});    }    elementLocallyValidType(element,fCurrentElemDecl.fDefault.stringValue());  } else {    Object actualValue=elementLocallyValidType(element,fBuffer);    if (fCurrentElemDecl != null && fCurrentElemDecl.getConstraintType() == XSConstants.VC_FIXED && !fNil) {      String content=fBuffer.toString();      if (fSubElement)       reportSchemaError("cvc-elt.5.2.2.1",new Object[]{element.rawname});      if (fCurrentType.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {        XSComplexTypeDecl ctype=(XSComplexTypeDecl)fCurrentType;        if (ctype.fContentType == XSComplexTypeDefinition.CONTENTTYPE_MIXED) {          if (!fCurrentElemDecl.fDefault.normalizedValue.equals(content))           reportSchemaError("cvc-elt.5.2.2.2.1",new Object[]{element.rawname,content,fCurrentElemDecl.fDefault.normalizedValue});        } else         if (ctype.fContentType == XSComplexTypeDefinition.CONTENTTYPE_SIMPLE) {          if (actualValue != null && (!ValidatedInfo.isComparable(fValidatedInfo,fCurrentElemDecl.fDefault) || !actualValue.equals(fCurrentElemDecl.fDefault.actualValue))) {            reportSchemaError("cvc-elt.5.2.2.2.2",new Object[]{element.rawname,content,fCurrentElemDecl.fDefault.stringValue()});          }        }      } else       if (fCurrentType.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {        if (actualValue != null && (!ValidatedInfo.isComparable(fValidatedInfo,fCurrentElemDecl.fDefault) || !actualValue.equals(fCurrentElemDecl.fDefault.actualValue))) {          reportSchemaError("cvc-elt.5.2.2.2.2",new Object[]{element.rawname,content,fCurrentElemDecl.fDefault.stringValue()});        }      }    }  }  if (fDefaultValue == null && fNormalizeData && fDocumentHandler != null && fUnionType) {    String content=fValidatedInfo.normalizedValue;    if (content == null)     content=fBuffer.toString();    int bufLen=content.length();    if (fNormalizedStr.ch == null || fNormalizedStr.ch.length < bufLen) {      fNormalizedStr.ch=new char[bufLen];    }    content.getChars(0,bufLen,fNormalizedStr.ch,0);    fNormalizedStr.offset=0;    fNormalizedStr.length=bufLen;    fDocumentHandler.characters(fNormalizedStr,null);  }}  }
class C{  @Override public void cancel(){  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(cancelButton));}  }
class C{  @Override public boolean isDataSource(){  return false;}  }
class C{  public synchronized void clear(){  this.nonEmptyReverseLookup=new MyConcurrentHashMap<PathEdge<N,D>,D>();}  }
class C{  public static TemporalExpression makeTemporalExpression(Delegator delegator,GenericValue exprValue) throws GenericEntityException {  String tempExprId=exprValue.getString("tempExprId");  String tempExprTypeId=exprValue.getString("tempExprTypeId");  if (DateRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.DateRange(exprValue.getTimestamp("date1"),exprValue.getTimestamp("date2")));  } else   if (DayInMonth.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.DayInMonth(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (DayOfMonthRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.DayOfMonthRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (DayOfWeekRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.DayOfWeekRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (Difference.equals(tempExprTypeId)) {    List<GenericValue> childExpressions=EntityQuery.use(delegator).from("TemporalExpressionAssoc").where("fromTempExprId",tempExprId).cache(true).queryList();    GenericValue inclAssoc=null;    GenericValue exclAssoc=null;    for (    GenericValue childExpression : childExpressions) {      if (INCLUDE.equals(childExpression.get("exprAssocType"))) {        inclAssoc=childExpression;      } else       if (EXCLUDE.equals(childExpression.get("exprAssocType"))) {        exclAssoc=childExpression;      }    }    if (inclAssoc != null && exclAssoc != null) {      return setExpressionId(exprValue,new TemporalExpressions.Difference(getTemporalExpression(delegator,inclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,exclAssoc.getString("toTempExprId"))));    }  } else   if (Frequency.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.Frequency(exprValue.getTimestamp("date1"),exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (HourRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.HourRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (Intersection.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.Intersection(getChildExpressions(delegator,tempExprId)));  } else   if (MinuteRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.MinuteRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (MonthRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.MonthRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (Substitution.equals(tempExprTypeId)) {    List<GenericValue> childExpressions=EntityQuery.use(delegator).from("TemporalExpressionAssoc").where("fromTempExprId",tempExprId).cache(true).queryList();    GenericValue inclAssoc=null;    GenericValue exclAssoc=null;    GenericValue substAssoc=null;    for (    GenericValue childExpression : childExpressions) {      if (INCLUDE.equals(childExpression.get("exprAssocType"))) {        inclAssoc=childExpression;      } else       if (EXCLUDE.equals(childExpression.get("exprAssocType"))) {        exclAssoc=childExpression;      } else       if (SUBSTITUTE.equals(childExpression.get("exprAssocType"))) {        substAssoc=childExpression;      }    }    if (inclAssoc != null && exclAssoc != null && substAssoc != null) {      return setExpressionId(exprValue,new TemporalExpressions.Substitution(getTemporalExpression(delegator,inclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,exclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,substAssoc.getString("toTempExprId"))));    }  } else   if (Union.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.Union(getChildExpressions(delegator,tempExprId)));  }  return TemporalExpressions.NullExpression;}  }
class C{  public void append(final FieldDenseOutputModel<T> model) throws MathIllegalArgumentException, MathIllegalStateException {  if (model.steps.size() == 0) {    return;  }  if (steps.size() == 0) {    initialTime=model.initialTime;    forward=model.forward;  } else {    final FieldODEStateAndDerivative<T> s1=steps.get(0).getPreviousState();    final FieldODEStateAndDerivative<T> s2=model.steps.get(0).getPreviousState();    checkDimensionsEquality(s1.getPrimaryStateDimension(),s2.getPrimaryStateDimension());    checkDimensionsEquality(s1.getNumberOfSecondaryStates(),s2.getNumberOfSecondaryStates());    for (int i=0; i < s1.getNumberOfSecondaryStates(); ++i) {      checkDimensionsEquality(s1.getSecondaryStateDimension(i),s2.getSecondaryStateDimension(i));    }    if (forward ^ model.forward) {      throw new MathIllegalArgumentException(LocalizedODEFormats.PROPAGATION_DIRECTION_MISMATCH);    }    final FieldODEStateInterpolator<T> lastInterpolator=steps.get(index);    final T current=lastInterpolator.getCurrentState().getTime();    final T previous=lastInterpolator.getPreviousState().getTime();    final T step=current.subtract(previous);    final T gap=model.getInitialTime().subtract(current);    if (gap.abs().subtract(step.abs().multiply(1.0e-3)).getReal() > 0) {      throw new MathIllegalArgumentException(LocalizedODEFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,gap.abs().getReal());    }  }  for (  FieldODEStateInterpolator<T> interpolator : model.steps) {    steps.add(interpolator);  }  index=steps.size() - 1;  finalTime=(steps.get(index)).getCurrentState().getTime();}  }
class C{  public synchronized void update(Vector2 mousePosition){  this.beginPosition=mousePosition;}  }
class C{  public KeyAlreadySetException(String s){  super(s);}  }
class C{  public AudioDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){  super(client,"audio.deleteAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  albumId(albumId);}  }
class C{  void cancelPrerender(IBinder session){  ThreadUtils.assertOnUiThread();  if (mPrerender != null && (session == null || session.equals(mPrerender.mSession))) {    mExternalPrerenderHandler.cancelCurrentPrerender();    mPrerender.mWebContents.destroy();    mPrerender=null;  }}  }
class C{  public RevealBuilder withEndAction(@NonNull final Runnable endAction){  this.mEndAction=endAction;  return this;}  }
class C{  @Deprecated public int verbosity(){  return getVerbosity();}  }
class C{  public TrustManagerBuilder useDefault() throws NoSuchAlgorithmException, KeyStoreException {  TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());  tmf.init((KeyStore)null);  add(tmf.getTrustManagers());  return (this);}  }
class C{  public static void launchActivityFromFragment(FragmentActivity context,Class<? extends Activity> activity,boolean closeCurrentActivity){  ActivityUtils.launchActivity(context,activity,closeCurrentActivity,null,null);}  }
class C{  private boolean isUpdating(){  return UpdateHandler.class.getName().equals(getClass().getName());}  }
class C{  public void execute(final Runnable runnable){  new Thread(runnable).start();}  }
class C{  public jflex(java.io.Reader in){  this.zzReader=in;}  }
class C{  public void onDestroy(boolean isSaved){  EventBus.getDefault().unregister(this);  for (  RTEditText editor : mEditors.values()) {    editor.unregister();    editor.onDestroy(isSaved);  }  mEditors.clear();  for (  RTToolbar toolbar : mToolbars.values()) {    toolbar.removeToolbarListener();  }  mToolbars.clear();  mRTApi=null;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("select what=");  final List<String> labels=new LinkedList<>();  if (np.peekMatchAnyTokenIgnoreCase("all none previous")) {    labels.add(np.getWordMatchesIgnoringCase("all none previous"));    np.matchIgnoreCase(";");  } else   labels.addAll(np.getTokensRespectCase(null,";"));  final ChartViewer viewer=(ChartViewer)getViewer();  final LabelsJList list=viewer.getActiveLabelsJList();  for (  String name : labels) {    if (name.equalsIgnoreCase("all"))     viewer.getChartSelection().setSelected(list.getName(),list.getAllLabels(),true); else     if (name.equalsIgnoreCase("none"))     viewer.getChartSelection().clearSelection(list.getName()); else     if (name.equals("previous"))     viewer.getChartSelection().setSelected(list.getName(),ProjectManager.getPreviouslySelectedNodeLabels(),true); else     viewer.getChartSelection().setSelected(list.getName(),Collections.singletonList(name),true);  }  viewer.repaint();}  }
class C{  public XMLString(XMLString string){  setValues(string);}  }
class C{  public VisualTable(Table parent,Visualization vis,String group,Predicate rowFilter){  this(parent,vis,group,rowFilter,VisualItem.SCHEMA);}  }
class C{  protected void eventReceived(Object event){  scheduleNewInvokerIfAppropriate();}  }
class C{  public static RecvHeaderInfo recvHeader(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {  byte[] header;  int bytes;  long pkg_len;  header=new byte[FDFS_PROTO_PKG_LEN_SIZE + 2];  if ((bytes=in.read(header)) != header.length) {    throw new IOException("recv package size " + bytes + " != "+ header.length);  }  if (header[PROTO_HEADER_CMD_INDEX] != expect_cmd) {    throw new IOException("recv cmd: " + header[PROTO_HEADER_CMD_INDEX] + " is not correct, expect cmd: "+ expect_cmd);  }  if (header[PROTO_HEADER_STATUS_INDEX] != 0) {    return new RecvHeaderInfo(header[PROTO_HEADER_STATUS_INDEX],0);  }  pkg_len=ProtoCommon.buff2long(header,0);  if (pkg_len < 0) {    throw new IOException("recv body length: " + pkg_len + " < 0!");  }  if (expect_body_len >= 0 && pkg_len != expect_body_len) {    throw new IOException("recv body length: " + pkg_len + " is not correct, expect length: "+ expect_body_len);  }  return new RecvHeaderInfo((byte)0,pkg_len);}  }
class C{  public ConfigurationException(int errCode,String message,Exception exception){  super(message);  this.errCode=errCode;  this.exception=exception;}  }
class C{  public SmoothSwitch(Context context){  this(context,null);}  }
class C{  private void initCropWindow(Rect bitmapRect){  if (initializedCropWindow == false)   initializedCropWindow=true;  if (mFixAspectRatio) {    if (AspectRatioUtil.calculateAspectRatio(bitmapRect) > mTargetAspectRatio) {      Edge.TOP.setCoordinate(bitmapRect.top);      Edge.BOTTOM.setCoordinate(bitmapRect.bottom);      final float centerX=getWidth() / 2f;      final float cropWidth=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateWidth(Edge.TOP.getCoordinate(),Edge.BOTTOM.getCoordinate(),mTargetAspectRatio));      if (cropWidth == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.MIN_CROP_LENGTH_PX) / (Edge.BOTTOM.getCoordinate() - Edge.TOP.getCoordinate());      final float halfCropWidth=cropWidth / 2f;      Edge.LEFT.setCoordinate(centerX - halfCropWidth);      Edge.RIGHT.setCoordinate(centerX + halfCropWidth);    } else {      Edge.LEFT.setCoordinate(bitmapRect.left);      Edge.RIGHT.setCoordinate(bitmapRect.right);      final float centerY=getHeight() / 2f;      final float cropHeight=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateHeight(Edge.LEFT.getCoordinate(),Edge.RIGHT.getCoordinate(),mTargetAspectRatio));      if (cropHeight == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.RIGHT.getCoordinate() - Edge.LEFT.getCoordinate()) / Edge.MIN_CROP_LENGTH_PX;      final float halfCropHeight=cropHeight / 2f;      Edge.TOP.setCoordinate(centerY - halfCropHeight);      Edge.BOTTOM.setCoordinate(centerY + halfCropHeight);    }  } else {    final float horizontalPadding=0.1f * bitmapRect.width();    final float verticalPadding=0.1f * bitmapRect.height();    Edge.LEFT.setCoordinate(bitmapRect.left + horizontalPadding);    Edge.TOP.setCoordinate(bitmapRect.top + verticalPadding);    Edge.RIGHT.setCoordinate(bitmapRect.right - horizontalPadding);    Edge.BOTTOM.setCoordinate(bitmapRect.bottom - verticalPadding);  }}  }
class C{  private void initializePath(String p_uriSpec,int p_nStartIndex) throws MalformedURIException {  if (p_uriSpec == null) {    throw new MalformedURIException("Cannot initialize path from null string!");  }  int index=p_nStartIndex;  int start=p_nStartIndex;  int end=p_uriSpec.length();  char testChar='\0';  if (start < end) {    if (getScheme() == null || p_uriSpec.charAt(start) == '/') {      while (index < end) {        testChar=p_uriSpec.charAt(index);        if (testChar == '%') {          if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {            throw new MalformedURIException("Path contains invalid escape sequence!");          }          index+=2;        } else         if (!isPathCharacter(testChar)) {          if (testChar == '?' || testChar == '#') {            break;          }          throw new MalformedURIException("Path contains invalid character: " + testChar);        }        ++index;      }    } else {      while (index < end) {        testChar=p_uriSpec.charAt(index);        if (testChar == '?' || testChar == '#') {          break;        }        if (testChar == '%') {          if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {            throw new MalformedURIException("Opaque part contains invalid escape sequence!");          }          index+=2;        } else         if (!isURICharacter(testChar)) {          throw new MalformedURIException("Opaque part contains invalid character: " + testChar);        }        ++index;      }    }  }  m_path=p_uriSpec.substring(start,index);  if (testChar == '?') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '#') {        break;      }      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Query string contains invalid escape sequence!");        }        index+=2;      } else       if (!isURICharacter(testChar)) {        throw new MalformedURIException("Query string contains invalid character: " + testChar);      }      index++;    }    m_queryString=p_uriSpec.substring(start,index);  }  if (testChar == '#') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Fragment contains invalid escape sequence!");        }        index+=2;      } else       if (!isURICharacter(testChar)) {        throw new MalformedURIException("Fragment contains invalid character: " + testChar);      }      index++;    }    m_fragment=p_uriSpec.substring(start,index);  }}  }
class C{  public boolean match(String name){  return getMatch(name) != null;}  }
class C{  @Override public void fileModified(Path f){}  }
class C{  public void clearCache(){  DiskLruCache.clearCache(mCacheDir);}  }
class C{  public static boolean isZero(String value){  return value != null && ZERO_PATTERN.matcher(value).matches();}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public AudioSaveQuery title(String value){  return unsafeParam("title",value);}  }
class C{  @VisibleForTesting protected EmptyTabModel(){}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public Iterator<RecordID> sortedScan(){  LeafNode firstLeaf=new LeafNode(this,firstLeafPageNum);  return new BPlusIterator(firstLeaf);}  }
class C{  public void writeSizedPrefixedBytes(byte[] bytes,int offset,int length) throws IOException {  writeInt(length);  write(bytes,offset,length);}  }
class C{  @ExceptionHandler(TypeNotFoundException.class) @ResponseStatus(value=HttpStatus.NOT_FOUND) public @ResponseBody ErrorResponse resolveTypeDescriptorNotFoundException(TypeNotFoundException e) throws IOException {  if (logger.isLoggable(Level.FINE))   logger.fine("type descriptor for typeName: " + e.getTypeName() + " not found, returning error response");  return new ErrorResponse(new ErrorMessage("Type: " + e.getTypeName() + " is not registered in space"));}  }
class C{  private boolean shouldHideOverlayPanelLayout(){  final PanelState state=getPanelState();  return (state == PanelState.PEEKED || state == PanelState.CLOSED) && getHeight() == getPanelHeightFromState(state);}  }
class C{  @Nullable public static Module ensureRunConfigurationModule(Project project,Label target){  RuleKey ruleKey=RuleKey.forPlainTarget(target);  String moduleName=moduleNameForAndroidModule(ruleKey);  Module module=ModuleManager.getInstance(project).findModuleByName(moduleName);  if (module != null) {    return module;  }  WorkspaceRoot workspaceRoot=WorkspaceRoot.fromProject(project);  BlazeProjectData blazeProjectData=BlazeProjectDataManager.getInstance(project).getBlazeProjectData();  if (blazeProjectData == null) {    return null;  }  AndroidSdkPlatform androidSdkPlatform=AndroidSdkPlatformSyncer.getAndroidSdkPlatform(blazeProjectData);  if (androidSdkPlatform == null) {    return null;  }  RuleIdeInfo rule=blazeProjectData.ruleMap.get(ruleKey);  if (rule == null) {    return null;  }  if (rule.androidRuleIdeInfo == null) {    return null;  }  if (!ApplicationManager.getApplication().isDispatchThread()) {    return null;  }  BlazeSyncPlugin.ModuleEditor moduleEditor=BlazeProjectDataManager.getInstance(project).editModules();  Module newModule=moduleEditor.createModule(moduleName,StdModuleTypes.JAVA);  ModifiableRootModel modifiableRootModel=moduleEditor.editModule(newModule);  ApplicationManager.getApplication().runWriteAction(null);  return newModule;}  }
class C{  @VisibleForTesting public ResultAddress(String name,String phoneNumber,String streetAddress,String locality,String dependentLocality,String administrativeArea,String postalCode,String sortingCode,String countryCode,String languageCode){  mName=name;  mPhoneNumber=phoneNumber;  mStreetAddress=streetAddress;  mLocality=locality;  mDependentLocality=dependentLocality;  mAdministrativeArea=administrativeArea;  mPostalCode=postalCode;  mSortingCode=sortingCode;  mCountryCode=countryCode;  mLanguageCode=languageCode;}  }
class C{  private byte[] updateNoDictionaryStartAndEndKey(byte[] key){  if (key.length == 0) {    return key;  }  ByteBuffer buffer=ByteBuffer.wrap(key,2,key.length - 2);  ByteBuffer output=ByteBuffer.allocate(key.length - 2);  short numberOfByteToStorLength=2;  for (int i=0; i < numberOfNoDictionaryColumn; i++) {    output.putShort((short)(buffer.getShort() - numberOfByteToStorLength));  }  while (buffer.hasRemaining()) {    output.put(buffer.get());  }  output.rewind();  return output.array();}  }
class C{  public void drawButton(IGui gui,int posX,int posY,int width,ButtonState state){  Point startPoint=this.getStartPoint(state);  RewiMod.getInstance().getTextureHandler().bindTexture(this.buttonTexture);  RewiMod.getInstance().getGlStateManagerHandler().color(1.0F,1.0F,1.0F);  if (width == this.width) {    RewiMod.getInstance().getGuiHandler().drawTexturedModalRect(gui,posX,posY,(int)startPoint.getX(),(int)startPoint.getY(),width,this.height);  } else   if (width >= this.width) {    RewiMod.getInstance().getGuiHandler().drawTexturedModalRect(gui,posX,posY,(int)startPoint.getX(),(int)startPoint.getY(),3,this.height);    int fullWidth=this.width - (2 * 3);    int wholeTex=(width - (2 * 3)) / fullWidth;    int startPos=posX + 3;    for (int n=0; n < wholeTex; n++) {      RewiMod.getInstance().getGuiHandler().drawTexturedModalRect(gui,startPos,posY,(int)startPoint.getX() + 3,(int)startPoint.getY(),fullWidth,this.height);      startPos+=fullWidth;    }    RewiMod.getInstance().getGuiHandler().drawTexturedModalRect(gui,startPos,posY,(int)startPoint.getX() + this.width - 3,(int)startPoint.getY(),3,this.height);  } else {    RewiMod.getInstance().getGuiHandler().drawTexturedModalRect(gui,posX,posY,(int)startPoint.getX(),(int)startPoint.getY(),3,this.height);    RewiMod.getInstance().getGuiHandler().drawTexturedModalRect(gui,posX + 3,posY,(int)startPoint.getX() + 3,(int)startPoint.getY(),width - 3,this.height);    RewiMod.getInstance().getGuiHandler().drawTexturedModalRect(gui,posX + width - 3,posY,(int)startPoint.getX() + this.width - 3,(int)startPoint.getY(),3,this.height);  }}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public static boolean moveDown(Alignment alignment,int firstRow,int lastRow){  firstRow=Math.max(0,firstRow);  if (lastRow >= alignment.getNumberOfSequences() - 1)   return false; else {    Integer[] array=new Integer[alignment.getNumberOfSequences()];    for (int i=0; i < alignment.getNumberOfSequences(); i++)     array[i]=alignment.getOrder(i);    int replaced=array[lastRow + 1];    System.arraycopy(array,firstRow,array,firstRow + 1,lastRow + 1 - firstRow);    array[firstRow]=replaced;    alignment.setOrder(Arrays.asList(array));    return true;  }}  }
class C{  protected void addEdge(Map<Unit,List<Unit>> unitToSuccs,Map<Unit,List<Unit>> unitToPreds,Unit head,Unit tail){  List<Unit> headsSuccs=unitToSuccs.get(head);  if (headsSuccs == null) {    headsSuccs=new ArrayList<Unit>(3);    unitToSuccs.put(head,headsSuccs);  }  if (!headsSuccs.contains(tail)) {    headsSuccs.add(tail);    List<Unit> tailsPreds=unitToPreds.get(tail);    if (tailsPreds == null) {      tailsPreds=new ArrayList<Unit>();      unitToPreds.put(tail,tailsPreds);    }    tailsPreds.add(head);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @NotNull public List<Face> findFaces(@NotNull InputStream image){  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,image).withResult();}  }
class C{  public static INDArray toArray(Collection<Writable> record,int size){  Iterator<Writable> writables=record.iterator();  Writable firstWritable=writables.next();  if (firstWritable instanceof NDArrayWritable) {    NDArrayWritable ret=(NDArrayWritable)firstWritable;    return ret.get();  } else {    INDArray vector=Nd4j.create(size);    vector.putScalar(0,firstWritable.toDouble());    int count=1;    while (writables.hasNext()) {      Writable w=writables.next();      vector.putScalar(count++,w.toDouble());    }    return vector;  }}  }
class C{  public static long readLong(byte[] bytes){  return ByteBuffer.wrap(bytes).getLong();}  }
class C{  public Iterator<JsonElement> iterator(){  return elements.iterator();}  }
class C{  public String loadFullDocumentTextToString(String sDocID){  Node nDoc=XMLDoc.getElementById(sDocID);  if (nDoc == null)   return null;  Element eDoc=(Element)nDoc;  String sRes=eDoc.getTextContent();  return sRes;}  }
class C{  public JobRowFilter withJobField(JobField jobField){  return new JobRowFilter(jobField,operation,values);}  }
class C{  @NotNull public static Configuration create(@NotNull Configuration base,@NotNull VirtualFile file){  Configuration configuration=base.clone();  LocalResourceRepository resources=AppResourceRepository.getAppResources(base.getModule(),true);  ConfigurationMatcher matcher=new ConfigurationMatcher(configuration,resources,file);  configuration.getEditedConfig().set(FolderConfiguration.getConfigForFolder(file.getParent().getName()));  matcher.adaptConfigSelection(true);  return configuration;}  }
class C{  public PersistedServiceJob(DispatchContext dctx,GenericValue jobValue,GenericRequester req){  super(dctx,jobValue.getString("jobId"),jobValue.getString("jobName"),null,null,req);  this.delegator=dctx.getDelegator();  this.jobValue=jobValue;  Timestamp storedDate=jobValue.getTimestamp("runTime");  this.startTime=storedDate.getTime();  this.maxRetry=jobValue.get("maxRetry") != null ? jobValue.getLong("maxRetry").longValue() : -1;  Long retryCount=jobValue.getLong("currentRetryCount");  if (retryCount != null) {    this.currentRetryCount=retryCount.longValue();  } else {    this.currentRetryCount=getRetries(this.delegator);  }}  }
class C{  public String countByExample(UserCriteria example){  SQL sql=new SQL();  sql.SELECT("count(*)").FROM("user");  applyWhere(sql,example,false);  return sql.toString();}  }
class C{  protected void recordConnectionResult(final int resultCode){  RecordHistogram.recordSparseSlowlyHistogram(CONNECTION_RESULT_HISTOGRAM_NAME,resultCode);}  }
class C{  @Override protected Dispatcher createContentDispatcher(){  return new NS11ContentDispatcher();}  }
class C{  public static int apply(final ViewerBase viewer,String method,final Distances distances) throws IOException {  System.err.println("Computing " + method + " distances");  double[][] profiles=computeProfiles(viewer.getDocument(),viewer);  System.err.println("Samples: " + profiles.length + " classes: "+ profiles[0].length);  for (int x=0; x < profiles.length; x++) {    distances.set(x + 1,x + 1,0);    for (int y=x + 1; y < profiles.length; y++) {      distances.set(x + 1,y + 1,Math.sqrt(computeJSD(profiles[x],profiles[y])));      distances.set(y + 1,x + 1,distances.get(x + 1,y + 1));    }  }  return profiles[0].length;}  }
class C{  public LookupExtractionFunction withReplaceMissingValueWith(String replaceMissingValueWith){  return new LookupExtractionFunction(lookup,retainMissingValue,replaceMissingValueWith,injective,optimize);}  }
class C{  public static void printSyntax(){  System.out.println("Usage: " + grammarAndContentAnalysis.class.getName() + "-corpusDir=xxxx The corpus base directory.\n"+ "-peerDir=xxxx The peer document set base directory.\n"+ "-modelDir=xxxx The model document set base directory.\n"+ "[-minChar=#] The min character n-gram rank."+ "[-maxChar=#] The max character n-gram rank."+ "[-charDist=#] The neighbourhood window for characters."+ "[-minWord=#] The min word n-gram rank."+ "[-maxWord=#] The max word n-gram rank."+ "[-wordDist=#] The neighbourhood window for words."+ "[-flatCorpusDir] If provided, indicates that the corpus directory does not have"+ " a subdirectory for each category / theme of texts. Thus, it is all contained "+ "in a single directory."+ "[-categoryLimit=#] The maximum number of categories to examine.\n"+ "[-modelFile=filename] The model file to use either as input or as output for the grammar"+ " model."+ "[-perCategoryModel] If provided, then a different model is created for every iteration. Otherwise,"+ " the model from the first iteration is used in all following ones.\n"+ "NOTE: The files should preferrably be named after the DUC format:\n"+ "TopicID.M.wordLength.Assessor.PeerSystemID");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_PETITION_FAILED_NOT_SERVICE_TIME(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300545,value0,value1);}  }
class C{  private void writeState(DataOutputStream dos) throws IOException {  dos.writeInt(REPOSITORIES_STATE_FILE_VERSION_3);  Collection<ISVNRepositoryLocation> repos=repositories.values();  dos.writeInt(repos.size());  for (  ISVNRepositoryLocation reposLocation : repos) {    SVNRepositoryLocation root=(SVNRepositoryLocation)reposLocation;    dos.writeUTF(root.getLocation());    if (root.getLabel() == null) {      dos.writeUTF("");    } else {      dos.writeUTF(root.getLabel());    }    if (root.getRepositoryRoot() == null) {      dos.writeUTF("");    } else {      dos.writeUTF(root.getRepositoryRoot().toString());    }  }  dos.flush();  dos.close();}  }
class C{  public void testProperties(BigQuerySinkTaskConfig config){  super.testProperties(config);  config.getBoolean(config.SCHEMA_UPDATE_CONFIG);  config.getLong(config.BUFFER_SIZE_CONFIG);}  }
class C{  public static void checkConfigSafe(PLogConfig config) throws RuntimeException {  if (config == null) {    throw new NullPointerException("Customized config cannot be null!");  }  if (config.getController() == null) {    throw new NullPointerException("Log controller cannot be null!");  }  if (config.getLogger() == null) {    throw new NullPointerException("Logger cannot be null!");  }  if (config.getEmptyMsg() == null) {    throw new NullPointerException("Empty msg cannot be null!");  }  if (config.getGlobalTag() == null) {    throw new NullPointerException("Global tag cannot be null!");  }  if (config.getMaxLengthPerLine() <= 0) {    throw new IllegalArgumentException("Max length per line must be positive!");  }}  }
class C{  public void replaceAll(JTextComponent target,String replacement){  SyntaxDocument sDoc=ActionUtils.getSyntaxDocument(target);  if (pattern == null || sDoc == null) {    return;  }  Matcher matcher=sDoc.getMatcher(pattern);  String newText=matcher.replaceAll(replacement);  target.setText(newText);}  }
class C{  public AemToolbar edit(){  click(MenuOption.EDIT);  return this;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  protected List<Target> createTargets(List<Element> segmentsAndBoundaries){  List<Target> targets=new ArrayList<Target>();  for (  Element sOrB : segmentsAndBoundaries) {    String phone=getPhoneSymbol(sOrB);    targets.add(new Target(phone,sOrB));  }  return targets;}  }
class C{  private void loadPosts(){  PostsFragment.this.showProgress(true);  RxFirebaseDatabase.getInstance().observeValueEvent(firebaseRef).subscribe(new GetPostsSubscriber());}  }
class C{  public synchronized void recordStatistics(QueryStatistic statistic){}  }
class C{  private File findSettingsFile(){  File userDir=new File(PlatformUtil.getUserHomeDir());  if ("4".equals(System.getenv("KDE_SESSION_VERSION"))) {    this.settingsFile=findSettingsFile(new File(userDir,".kde4" + File.separator + "share"+ File.separator+ "config"+ File.separator+ "kioslaverc"));  }  if (this.settingsFile == null) {    return findSettingsFile(new File(userDir,".kde" + File.separator + "share"+ File.separator+ "config"+ File.separator+ "kioslaverc"));  } else {    return this.settingsFile;  }}  }
class C{  @Override public boolean uploadSLD(StyleWrapper styleWrapper,String sldBody){  String workspaceName=styleWrapper.getWorkspace();  String styleName=styleWrapper.getStyle();  if (!workspaceValid(workspaceName)) {    return false;  }  boolean result=false;  GeoServerRESTManager manager=GeoServerRESTManagerFactory.getManager(connection);  GeoServerRESTPublisher publisher=manager.getPublisher();  if (publisher != null) {    if (styleExists(workspaceName,styleName)) {      if (isDefaultWorkspace(workspaceName)) {        result=publisher.updateStyle(sldBody,styleName,true);      } else {        result=publisher.updateStyleInWorkspace(workspaceName,sldBody,styleName);      }    } else {      if (isDefaultWorkspace(workspaceName)) {        result=publisher.publishStyle(sldBody,styleName,true);      } else {        GeoServerRESTReader reader=manager.getReader();        if (reader != null) {          if (!reader.existsWorkspace(workspaceName)) {            if (!publisher.createWorkspace(workspaceName)) {              ConsoleManager.getInstance().error(this,"Failed to create workspace : " + workspaceName);              return false;            }          }        } else {          return false;        }        result=publisher.publishStyleInWorkspace(workspaceName,sldBody,styleName);      }    }  }  return result;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public Door(final Material type,BlockFace face,boolean isOpen){  super(type);  setTopHalf(false);  setFacingDirection(face);  setOpen(isOpen);}  }
class C{  public static JSON create(){  return new JSON();}  }
class C{  private synchronized void _stop(){  while (m_activities.size() > 0) {    Activity a=(Activity)m_activities.get(m_activities.size() - 1);    a.cancel();  }  _setRunning(false);  notify();}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public static boolean isCarteBlanche(String cc){  return isDinersClub(cc);}  }
class C{  RemoteConnectionImpl() throws RemoteException {  try {    tx=VanillaDb.txMgr().newTransaction(isolationLevel,readOnly);  } catch (  Exception e) {    throw new RemoteException("error creating transaction ",e);  }}  }
class C{  private String printDFormat(short x){  return printDFormat(Short.toString(x));}  }
class C{  @Override public String toString(){  if (nans != FINITE) {    if (nans == INFINITE) {      return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;    } else {      return NAN_STRING;    }  }  if (exp > mant.length || exp < -1) {    return dfp2sci();  }  return dfp2string();}  }
class C{  protected void dropPhase1Objective(){  if (getNumObjectiveFunctions() == 1) {    return;  }  final Set<Integer> columnsToDrop=new TreeSet<Integer>();  columnsToDrop.add(0);  for (int i=getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {    final double entry=getEntry(0,i);    if (Precision.compareTo(entry,0d,epsilon) > 0) {      columnsToDrop.add(i);    }  }  for (int i=0; i < getNumArtificialVariables(); i++) {    int col=i + getArtificialVariableOffset();    if (getBasicRow(col) == null) {      columnsToDrop.add(col);    }  }  final double[][] matrix=new double[getHeight() - 1][getWidth() - columnsToDrop.size()];  for (int i=1; i < getHeight(); i++) {    int col=0;    for (int j=0; j < getWidth(); j++) {      if (!columnsToDrop.contains(j)) {        matrix[i - 1][col++]=getEntry(i,j);      }    }  }  Integer[] drop=columnsToDrop.toArray(new Integer[columnsToDrop.size()]);  for (int i=drop.length - 1; i >= 0; i--) {    columnLabels.remove((int)drop[i]);  }  this.tableau=new Array2DRowRealMatrix(matrix);  this.numArtificialVariables=0;  initializeBasicVariables(getNumObjectiveFunctions());}  }
class C{  public boolean equivTo(Object c){  return equals(c);}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public void addLookupLocators(LookupLocator[] locators) throws RemoteException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"addLookupLocators");  }  prepareLocators(locators);  ((DiscoveryLocatorManagement)dm).addLocators(locators);  update();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"addLookupLocators");  }}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public static int Integer(int min,int max){  return random.nextInt(max - min + 1) + min;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public void elevateHeaders(int dp){  this.headerElevation=dp;  if (positioner != null) {    positioner.setElevateHeaders(dp);  }}  }
class C{  public DockerPortMapping withHostPort(int hostPort){  DockerPortMapping newMapping=new DockerPortMapping();  newMapping.protocol=protocol;  newMapping.containerPort=containerPort;  newMapping.hostIp=hostIp;  newMapping.hostPort=String.valueOf(hostPort);  return newMapping;}  }
class C{  public static String saveEntryParams(HttpServletRequest request,HttpServletResponse response){  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  HttpSession session=request.getSession();  Delegator delegator=(Delegator)request.getAttribute("delegator");  if (userLogin == null) {    String username=request.getParameter("USERNAME");    String password=request.getParameter("PASSWORD");    if ((username != null) && ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator)))) {      username=username.toLowerCase();    }    if ((password != null) && ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator)))) {      password=password.toLowerCase();    }    if (username != null)     session.setAttribute("USERNAME",username);    if (password != null)     session.setAttribute("PASSWORD",password);  } else {    session.removeAttribute("USERNAME");    session.removeAttribute("PASSWORD");  }  return "success";}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public static void w(String msg,Exception e){  if (LOG_ENABLE) {    Log.w(TAG,buildMsg(msg),e);  }}  }
class C{  @Override public void onErrorResponse(VolleyError error){  Toast.makeText(HurlFastjsonActivity.this,error != null && error.getMessage() != null ? error.getMessage() : "No error message",Toast.LENGTH_LONG).show();  Log.d("GsonRequest",error != null && error.getMessage() != null ? error.getMessage() : "No error message");}  }
class C{  @Override public void filter(ContainerRequestContext request,ContainerResponseContext response) throws IOException {  appendRequestId(request.getHeaders().getFirst(X_REQUEST_ID_HEADER));  RequestLog.startTiming(this);  StringBuilder debugMsgBuilder=new StringBuilder();  debugMsgBuilder.append("\tRequest: ").append(request.getMethod());  debugMsgBuilder.append("\tlength=").append(request.getProperty(PROPERTY_REQ_LEN)).append("\t");  debugMsgBuilder.append(renderUri(request.getUriInfo().getRequestUri())).append("\t");  debugMsgBuilder.append("Response: ").append(response.getStatus()).append("\t");  debugMsgBuilder.append(response.getStatusInfo()).append("\t");  Long requestStartTime=(Long)request.getProperty(PROPERTY_NANOS);  if (requestStartTime != null) {    debugMsgBuilder.append((System.nanoTime() - requestStartTime) / MILLISECONDS_PER_NANOSECOND);  }  debugMsgBuilder.append(" ms\t");  if (request.getSecurityContext().getUserPrincipal() != null) {    String user=request.getSecurityContext().getUserPrincipal().getName();    debugMsgBuilder.append("User=").append(user).append("\t");  }  appendStringHeaders(debugMsgBuilder,"> ",request.getHeaders().entrySet());  appendObjectHeaders(debugMsgBuilder,"< ",response.getHeaders().entrySet());  Response.StatusType status=response.getStatusInfo();  String msg="Successful request";  if (status.getFamily() != SUCCESSFUL) {    msg=response.hasEntity() ? response.getEntity().toString() : "Request without entity failed";  }  CacheLastObserver<Long> responseLengthObserver=new CacheLastObserver<>();  RequestLog.record(new Epilogue(msg,status,responseLengthObserver));  if (response.getLength() == -1 && response.hasEntity()) {    Subject<Long,Long> lengthBroadcaster=ReplaySubject.create();    lengthBroadcaster.subscribe(responseLengthObserver);    OutputStream stream=new LengthOfOutputStream(response.getEntityStream(),lengthBroadcaster);    response.setEntityStream(stream);    request.setProperty(PROPERTY_OUTPUT_STREAM,stream);  } else {    debugMsgBuilder.append("length=").append(response.getLength()).append("\t");    Observable.just((long)response.getLength()).subscribe(responseLengthObserver);    LOG.debug(debugMsgBuilder.toString());    RequestLog.stopTiming(this);    RequestLog.stopTiming(TOTAL_TIMER);    RequestLog.log();  }}  }
class C{  public Conductor(Body[] trainAnchorList,Track[] tracksList,Array<Player> players){  super(null,null,null,EntityType.DEFAULT,null);  this.players=players;  trainAnchors=trainAnchorList;  tracks=tracksList;  this.setDifficultyMods();  initializeConductor();}  }
class C{  public boolean isGridViewPreferred(OCFile file){  if (file != null) {    OCFile fileToTest=file;    OCFile parentDir;    String parentPath=null;    FileDataStorageManager storageManager=mContainerActivity.getStorageManager();    SharedPreferences setting=getActivity().getSharedPreferences(GRID_IS_PREFERED_PREFERENCE,Context.MODE_PRIVATE);    if (setting.contains(String.valueOf(fileToTest.getFileId()))) {      return setting.getBoolean(String.valueOf(fileToTest.getFileId()),false);    } else {      do {        if (fileToTest.getParentId() != FileDataStorageManager.ROOT_PARENT_ID) {          parentPath=new File(fileToTest.getRemotePath()).getParent();          parentPath=parentPath.endsWith(OCFile.PATH_SEPARATOR) ? parentPath : parentPath + OCFile.PATH_SEPARATOR;          parentDir=storageManager.getFileByPath(parentPath);        } else {          parentDir=storageManager.getFileByPath(OCFile.ROOT_PATH);        }        while (parentDir == null) {          parentPath=new File(parentPath).getParent();          parentPath=parentPath.endsWith(OCFile.PATH_SEPARATOR) ? parentPath : parentPath + OCFile.PATH_SEPARATOR;          parentDir=storageManager.getFileByPath(parentPath);        }        fileToTest=parentDir;      } while (endWhile(parentDir,setting));      return setting.getBoolean(String.valueOf(fileToTest.getFileId()),false);    }  } else {    return false;  }}  }
class C{  public static <T>T resolveDefault(ResourceResolverFactory factory,ResolveCallback callback,T defaultValue){  return resolveDefault(factory,null,callback,defaultValue);}  }
class C{  private static String[] convert(String arg){  StringTokenizer tok=new StringTokenizer(arg," ,");  String[] array=new String[tok.countTokens()];  int i=0;  while (tok.hasMoreTokens()) {    array[i]=tok.nextToken();    i++;  }  return (array);}  }
class C{  public Bundler putInt(String key,int value){  bundle.putInt(key,value);  return this;}  }
class C{  public PhotosRestoreCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  protected void finish(Map<String,Object> result) throws InvalidJobException {  if (currentState != State.RUNNING) {    throw new InvalidJobException("Illegal state change");  }  currentState=State.FINISHED;  if (Debug.verboseOn())   Debug.logVerbose("Async-Service finished.",module);}  }
class C{  public static List<String> split(String str,String delim,int limit){  List<String> splitList=null;  String[] st=null;  if (str == null)   return splitList;  if (delim != null)   st=Pattern.compile(delim).split(str,limit); else   st=str.split("\\s");  if (st != null && st.length > 0) {    splitList=new LinkedList<String>();    for (int i=0; i < st.length; i++)     splitList.add(st[i]);  }  return splitList;}  }
class C{  @Override public void notifyElementUpdated(final Alarm alarm){  Long tagId=alarm.getTagId();  AlarmValue alarmValue=null;  if (tagLocationService.isInTagCache(tagId)) {    Tag tag=tagLocationService.getCopy(tagId);    alarmValue=(TransferObjectFactory.createAlarmValue(alarm,tag));  } else {    LOGGER.warn("notifyElementUpdated() - unrecognized Tag with id " + tagId);    alarmValue=(TransferObjectFactory.createAlarmValue(alarm));  }  try {    publish(alarmValue);  } catch (  JmsException e) {    LOGGER.error("Error publishing alarm to clients - submitting for republication. Alarm id is " + alarmValue.getId(),e);    republisher.publicationFailed(alarmValue);  }}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize){  addEmojis(context,text,emojiSize,0,-1,false);}  }
class C{  public boolean isRasterVisible(Object parentObj,Object obj){  boolean enabled=false;  if (overallEnableSymbolizersOverride) {    enabled=(obj instanceof Rule) && (geometryType == GeometryTypeEnum.RASTER);  }  return enabled;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  execute("zoom selected;");}  }
class C{  public MobileInfo(String appVersion,String appSystemVersion,String appDeviceId,Integer appDeviceWidth,Integer appDeviceHeight,Boolean nightMode){  this.appVersion=appVersion;  this.appSystemVersion=appSystemVersion;  this.appDeviceId=appDeviceId;  this.appDeviceWidth=appDeviceWidth;  this.appDeviceHeight=appDeviceHeight;  this.nightMode=nightMode;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public synchronized void close(){  if (myDataBase != null)   myDataBase.close();  super.close();}  }
class C{  public TAC2008DirectoryFileSet(String sCorpusDir){  CorpusDir=sCorpusDir;  Categories=null;  TrainingFiles=new ArrayList<CategorizedFileEntry>();  TestFiles=new ArrayList<CategorizedFileEntry>();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_RESISTED_A_TO_ME(String value0){  return new SM_SYSTEM_MESSAGE(1390132,value0);}  }
class C{  private static Optional<Set<String>> includedFields(String resourceType,TypedParams<IncludedFieldsParams> includedFields){  IncludedFieldsParams typeIncludedFields=findIncludedFields(includedFields,resourceType);  if (noResourceIncludedFieldsSpecified(typeIncludedFields)) {    return Optional.empty();  } else {    return Optional.of(typeIncludedFields.getParams());  }}  }
class C{  @Override public boolean isDerivedFrom(String typeNamespaceArg,String typeNameArg,int derivationMethod){  if (type != null) {    if (type instanceof XSSimpleTypeDecl) {      return ((XSSimpleTypeDecl)type).isDOMDerivedFrom(typeNamespaceArg,typeNameArg,derivationMethod);    }  }  return false;}  }
class C{  private void rebalance(Node<K,V> unbalanced,boolean insert){  for (Node<K,V> node=unbalanced; node != null; node=node.parent) {    Node<K,V> left=node.left;    Node<K,V> right=node.right;    int leftHeight=left != null ? left.height : 0;    int rightHeight=right != null ? right.height : 0;    int delta=leftHeight - rightHeight;    if (delta == -2) {      Node<K,V> rightLeft=right.left;      Node<K,V> rightRight=right.right;      int rightRightHeight=rightRight != null ? rightRight.height : 0;      int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;      int rightDelta=rightLeftHeight - rightRightHeight;      if (rightDelta == -1 || (rightDelta == 0 && !insert)) {        rotateLeft(node);      } else {        assert (rightDelta == 1);        rotateRight(right);        rotateLeft(node);      }      if (insert) {        break;      }    } else     if (delta == 2) {      Node<K,V> leftLeft=left.left;      Node<K,V> leftRight=left.right;      int leftRightHeight=leftRight != null ? leftRight.height : 0;      int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;      int leftDelta=leftLeftHeight - leftRightHeight;      if (leftDelta == 1 || (leftDelta == 0 && !insert)) {        rotateRight(node);      } else {        assert (leftDelta == -1);        rotateLeft(left);        rotateRight(node);      }      if (insert) {        break;      }    } else     if (delta == 0) {      node.height=leftHeight + 1;      if (insert) {        break;      }    } else {      assert (delta == -1 || delta == 1);      node.height=Math.max(leftHeight,rightHeight) + 1;      if (!insert) {        break;      }    }  }}  }
class C{  public EntityQuery from(DynamicViewEntity dynamicViewEntity){  this.dynamicViewEntity=dynamicViewEntity;  this.entityName=null;  return this;}  }
class C{  public boolean hasNonEmptyIntersection(PointsToSet other){  return oldSet.hasNonEmptyIntersection(other) || newSet.hasNonEmptyIntersection(other);}  }
class C{  public static synchronized HostViewsSupport sharedInstance(){  if (sharedInstance == null)   sharedInstance=new HostViewsSupport();  return sharedInstance;}  }
class C{  public PlacesGetCheckinsQuery longitude(Float value){  return unsafeParam("longitude",value);}  }
class C{  @JsonValue public String toJson(){  return jsonName;}  }
class C{  public boolean isOwnerOnly(){  return owner;}  }
class C{  public boolean deleteStorage(String groupName,String storageIpAddr) throws IOException {  return this.deleteStorage(ClientGlobal.g_tracker_group,groupName,storageIpAddr);}  }
class C{  protected void rehash(){  int oldCapacity=fBuckets.length;  Entry[] oldTable=fBuckets;  int newCapacity=oldCapacity * 2 + 1;  Entry[] newTable=new Entry[newCapacity];  fThreshold=(int)(newCapacity * fLoadFactor);  fBuckets=newTable;  fTableSize=fBuckets.length;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=hash(e.characters,0,e.characters.length) % newCapacity;      e.next=newTable[index];      newTable[index]=e;    }  }}  }
class C{  public AemTags addTag(String namespace,String pathAndTagName) throws DeniedTagException {  final String textToSend;  if (StringUtils.isNotBlank(namespace)) {    textToSend=namespace + NAMESPACE_SEPARATOR + pathAndTagName;  } else {    textToSend=pathAndTagName;  }  return addTag(textToSend);}  }
class C{  public EmbeddedSpaceConfigurer leaderSelector(LeaderSelectorConfig leaderSelectorConfig){  validate();  factoryBean.leaderSelectorConfig(leaderSelectorConfig);  return this;}  }
class C{  @Override public void endGroup(Augmentations augs) throws XNIException {}  }
class C{  public void addTag(Map.Entry<String,TimeSeriesMetricDeltaSet> tag){  tag.getValue().asScalar().ifPresent(null);  tag.getValue().asVector().ifPresent(null);}  }
class C{  public static <T>T fromMap(Map<?,?> fromMap,Class<T> targetType){  return mapper.convertValue(fromMap,targetType);}  }
class C{  public void registerCategory(SnapshotCategory category){  categories.add(category);  fireCategoryRegistered(category);}  }
class C{  public static Properties stringToProperties(String str){  Properties result=new Properties();  String[] props=str.trim().split(",\\s*");  for (  String term : props) {    int divLoc=term.indexOf("=");    String key;    String value;    if (divLoc >= 0) {      key=term.substring(0,divLoc);      value=term.substring(divLoc + 1);    } else {      key=term;      value="true";    }    result.setProperty(key,value);  }  return result;}  }
class C{  public HadoopFileSystemStore(FileSystem fs,SerializationService serial){  super(serial);  hadoopFileSystem=fs;}  }
class C{  public JRangeSlider(int minimum,int maximum,int lowValue,int highValue,int orientation,int direction){  this(new DefaultBoundedRangeModel(lowValue,highValue - lowValue,minimum,maximum),orientation,direction);}  }
class C{  public FriendsEditListQuery name(String value){  return unsafeParam("name",value);}  }
class C{  private static void expandBelow10DigitNumber(String numberString,WordRelation wordRelation){  expandLargeNumber(numberString,"million",6,wordRelation);}  }
class C{  protected void newline(){  if (mode == LexerMode.SyntaxHighlighting) {    addToken(TokenKind.NEWLINE,pos - 1,pos);    return;  }  if (openParenStackDepth > 0) {    newlineInsideExpression();  } else {    newlineOutsideExpression();  }}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.001d,0.01d,0.025d,0.05d,0.1d,0.999d,0.990d,0.975d,0.950d,0.900d};}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  public void actionPerformed(ActionEvent ev){  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();  if (samples.size() > 0)   execute("set nodeShape=circle sample='" + Basic.toString(samples,"' '") + "';");}  }
class C{  @Override public void populateExpression(Object objValue){  if (comboBox != null) {    if (objValue instanceof String) {      String sValue=(String)objValue;      populateField(sValue);    }  }}  }
class C{  private void initRightClickMenu(){  final ContextMenu cm=new ContextMenu();  final OperationId[] operations=OperationId.values();  for (int i=0; i < operations.length; i++) {    final OperationId operation=operations[i];    final String actionName=operation.getActionName();    final MenuItem cmItem=new MenuItem(actionName);    cmItem.setOnAction(null);    cm.getItems().add(cmItem);  }  pokemonTableView.addEventHandler(MouseEvent.MOUSE_CLICKED,null);}  }
class C{  private static final void funnyShit(byte inputByte,byte[] in){  byte a=in[1];  byte b=inputByte;  byte c=funnyBytes[(int)a & 0xFF];  c-=inputByte;  in[0]+=c;  c=in[2];  c^=funnyBytes[(int)b & 0xFF];  a-=(int)c & 0xFF;  in[1]=a;  a=in[3];  c=a;  a-=(int)in[0] & 0xFF;  c=funnyBytes[(int)c & 0xFF];  c+=inputByte;  c^=in[2];  in[2]=c;  a+=(int)funnyBytes[(int)b & 0xFF] & 0xFF;  in[3]=a;  int d=((int)in[0]) & 0xFF;  d|=(in[1] << 8) & 0xFF00;  d|=(in[2] << 16) & 0xFF0000;  d|=(in[3] << 24) & 0xFF000000;  int ret_value=d >>> 0x1d;  d<<=3;  ret_value|=d;  in[0]=(byte)(ret_value & 0xFF);  in[1]=(byte)((ret_value >> 8) & 0xFF);  in[2]=(byte)((ret_value >> 16) & 0xFF);  in[3]=(byte)((ret_value >> 24) & 0xFF);}  }
class C{  public static double[][] udary(int m,int n){  double d[][]=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      d[i][j]=R.nextDouble();    }  }  return d;}  }
class C{  protected void assertNoCurrentVariantSet(String errorMessage,List<Long> localeIds,Long tmTextUnitId){  for (  Long localeId : localeIds) {    TMTextUnitCurrentVariant currentVariant=tmTextUnitCurrentVariantRepository.findByLocale_IdAndTmTextUnit_Id(localeId,tmTextUnitId);    assertNull(errorMessage,currentVariant);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSpellAttackEffect_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200794,skillcaster,skillname);}  }
class C{  public static String decode(byte[] utf8,int start,int length,boolean replace) throws CharacterCodingException {  return decode(ByteBuffer.wrap(utf8,start,length),replace);}  }
class C{  public static void createRMA6FileFromDAAPair(String creator,String daaFile1,String daaFile2,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,BlastFileFormat.DAA,doc.getBlastMode(),new String[]{daaFile1,daaFile2},new String[]{},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);  rma6Creator.parseFiles(progressListener);}  }
class C{  @Override public boolean equals(Object wrapper){  return Arrays.equals(_interfaceNames,((NamesWrapper)wrapper)._interfaceNames);}  }
class C{  public synchronized void checkOwnershipAndReacquire() throws LockingException {  if (null == lockAcquireFuture || !lockAcquireFuture.isDefined()) {    throw new LockingException(lockPath,"check ownership before acquiring");  }  if (haveLock()) {    return;  }  reacquireLock(true);}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  public static String convertToRGB(int color){  String red=Integer.toHexString(Color.red(color));  String green=Integer.toHexString(Color.green(color));  String blue=Integer.toHexString(Color.blue(color));  if (red.length() == 1) {    red="0" + red;  }  if (green.length() == 1) {    green="0" + green;  }  if (blue.length() == 1) {    blue="0" + blue;  }  return "#" + red + green+ blue;}  }
class C{  protected void replaceStmts(Map<Stmt,GotoStmt> stmtsToReplace){  Chain units=sb.getUnits();  Iterator<Stmt> stmtsIt=stmtsToReplace.keySet().iterator();  while (stmtsIt.hasNext()) {    Unit booted=stmtsIt.next();    Unit replacement=stmtsToReplace.get(booted);    units.swapWith(booted,replacement);  }}  }
class C{  public Iterator edgesOutOf(Unit u){  return new ArrayList(unitMap.get(u)).iterator();}  }
class C{  public HuntingRewardCursor queryHuntingRewardItem(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_HUNTING_REWARDS;  qh.Selection="h." + S.COLUMN_HUNTING_REWARDS_ITEM_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + id};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="m." + S.COLUMN_MONSTERS_ID + " ASC, "+ "h."+ S.COLUMN_HUNTING_REWARDS_RANK+ " DESC, "+ "h."+ S.COLUMN_HUNTING_REWARDS_ID+ " ASC";  qh.Limit=null;  return new HuntingRewardCursor(wrapJoinHelper(builderHuntingReward(),qh));}  }
class C{  public PoissonDistribution(double p) throws MathIllegalArgumentException {  this(p,DEFAULT_EPSILON,DEFAULT_MAX_ITERATIONS);}  }
class C{  @Override public final Object remove(Object key){  return this.set(key.toString(),null);}  }
class C{  public static double randomStep(){  Random random=new Random();  return random.nextDouble() / 100000.0;}  }
class C{  private void displayExpression(ExpressionNode node){  if (node == null) {    return;  }  dataSourceAttributePanel.setDataType(node.getType());  dataSourceAttributePanel.setAttribute(node.getExpression());  revalidate();}  }
class C{  private int singleUpdateView(GenericEntity entity,ModelViewEntity modelViewEntity,List<ModelField> fieldsToSave,SQLProcessor sqlP) throws GenericEntityException {  Delegator delegator=entity.getDelegator();  int retVal=0;  ModelEntity memberModelEntity=null;  for (  ModelViewEntity.ModelMemberEntity modelMemberEntity : modelViewEntity.getMemberModelMemberEntities().values()) {    String meName=modelMemberEntity.getEntityName();    String meAlias=modelMemberEntity.getEntityAlias();    if (Debug.verboseOn())     Debug.logVerbose("[singleUpdateView]: Processing MemberEntity " + meName + " with Alias "+ meAlias,module);    try {      memberModelEntity=delegator.getModelReader().getModelEntity(meName);    } catch (    GenericEntityException e) {      throw new GenericEntityException("Failed to get model entity for " + meName,e);    }    Map<String,Object> findByMap=new HashMap<String,Object>();    Iterator<ModelViewEntity.ModelViewLink> linkIter=modelViewEntity.getViewLinksIterator();    while (linkIter != null && linkIter.hasNext()) {      ModelViewEntity.ModelViewLink modelViewLink=linkIter.next();      if (modelViewLink.getEntityAlias().equals(meAlias) || modelViewLink.getRelEntityAlias().equals(meAlias)) {        Iterator<ModelKeyMap> kmIter=modelViewLink.getKeyMapsIterator();        while (kmIter != null && kmIter.hasNext()) {          ModelKeyMap keyMap=kmIter.next();          String fieldName="";          if (modelViewLink.getEntityAlias().equals(meAlias)) {            fieldName=keyMap.getFieldName();          } else {            fieldName=keyMap.getRelFieldName();          }          if (Debug.verboseOn())           Debug.logVerbose("[singleUpdateView]: --- Found field to set: " + meAlias + "."+ fieldName,module);          Object value=null;          if (modelViewEntity.isField(keyMap.getFieldName())) {            value=entity.get(keyMap.getFieldName());            if (Debug.verboseOn())             Debug.logVerbose("[singleUpdateView]: --- Found map value: " + value.toString(),module);          } else           if (modelViewEntity.isField(keyMap.getRelFieldName())) {            value=entity.get(keyMap.getRelFieldName());            if (Debug.verboseOn())             Debug.logVerbose("[singleUpdateView]: --- Found map value: " + value.toString(),module);          } else {            throw new GenericNotImplementedException("Update on view entities: no direct link found, unable to update");          }          findByMap.put(fieldName,value);        }      }    }    List<GenericValue> meResult=null;    try {      meResult=EntityQuery.use(delegator).from(meName).where(findByMap).queryList();    } catch (    GenericEntityException e) {      throw new GenericEntityException("Error while retrieving partial results for entity member: " + meName,e);    }    if (Debug.verboseOn())     Debug.logVerbose("[singleUpdateView]: --- Found " + meResult.size() + " results for entity member "+ meName,module);    GenericValue meGenericValue=null;    if (meResult.size() == 0) {      try {        meGenericValue=delegator.makeValue(meName,findByMap);      } catch (      Exception e) {        throw new GenericEntityException("Could not create new value for member entity" + meName + " of view "+ modelViewEntity.getEntityName(),e);      }    } else     if (meResult.size() == 1) {      meGenericValue=meResult.iterator().next();    } else {      throw new GenericEntityException("Found more than one result for member entity " + meName + " in view "+ modelViewEntity.getEntityName()+ " - this is no updatable view");    }    List<ModelField> meFieldsToSave=new LinkedList<ModelField>();    for (    ModelField modelField : fieldsToSave) {      if (memberModelEntity.isField(modelField.getName())) {        ModelField meModelField=memberModelEntity.getField(modelField.getName());        if (meModelField != null) {          meGenericValue.set(meModelField.getName(),entity.get(modelField.getName()));          meFieldsToSave.add(meModelField);          if (Debug.verboseOn())           Debug.logVerbose("[singleUpdateView]: --- Added field to save: " + meModelField.getName() + " with value "+ meGenericValue.get(meModelField.getName()),module);        } else {          throw new GenericEntityException("Could not get field " + modelField.getName() + " from model entity "+ memberModelEntity.getEntityName());        }      }    }    if (meResult.size() == 0) {      retVal+=singleInsert(meGenericValue,memberModelEntity,memberModelEntity.getFieldsUnmodifiable(),sqlP);    } else {      if (meFieldsToSave.size() > 0) {        retVal+=singleUpdate(meGenericValue,memberModelEntity,meFieldsToSave,sqlP);      } else {        if (Debug.verboseOn())         Debug.logVerbose("[singleUpdateView]: No update on member entity " + memberModelEntity.getEntityName() + " needed",module);      }    }  }  return retVal;}  }
class C{  private int addContentSpecNodes(int begin,int end){  if (begin == end) {    return fGroupIndexStack[fDepth][begin];  }  final int middle=(begin + end) >>> 1;  return addContentSpecNode(fOpStack[fDepth],addContentSpecNodes(begin,middle),addContentSpecNodes(middle + 1,end));}  }
class C{  public Bindings add(String property,JTextComponent c){  registerPropertyChangeListener(c);  return add(new JTextComponentBinding(property,c,""));}  }
class C{  private static void generator(String vmFile,Packages pkg) throws Exception {  Template template=ve.getTemplate(vmFile);  VelocityContext vctx=new VelocityContext();  vctx.put("package",pkg);  StringWriter sw=new StringWriter();  template.merge(vctx,sw);  String filePath=getFilePath(vmFile,pkg);  createFile(filePath,sw.toString());}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {}  }
class C{  public JFastLabel(String text){  m_text=text;  setFont(getFont());}  }
class C{  public double cond(){  return new SingularValueDecomposition(this).cond();}  }
class C{  public static Intent finishOtherTasksWithData(Uri data,int canonicalTaskId){  if (data == null || Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP)   return null;  String dataString=data.toString();  Context context=ApplicationStatus.getApplicationContext();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.AppTask> tasksToFinish=new ArrayList<ActivityManager.AppTask>();  for (  ActivityManager.AppTask task : manager.getAppTasks()) {    RecentTaskInfo taskInfo=getTaskInfoFromTask(task);    if (taskInfo == null)     continue;    int taskId=taskInfo.id;    Intent baseIntent=taskInfo.baseIntent;    String taskData=baseIntent == null ? null : taskInfo.baseIntent.getDataString();    if (TextUtils.equals(dataString,taskData) && (taskId == -1 || taskId != canonicalTaskId)) {      tasksToFinish.add(task);    }  }  return finishAndRemoveTasks(tasksToFinish);}  }
class C{  public AvgTask(Class<R> reduceType,Task<T> task) throws IllegalArgumentException {  super(task);  this.reducer=new AvgReducer<T,R>(reduceType);}  }
class C{  public void beforeFirst() throws GenericEntityException {  try {    resultSet.beforeFirst();  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the cursor to beforeFirst",e);  }}  }
class C{  public TypeRef makeRequired(){  return interner.intern(new TypeRef(kind,Cardinality.REQUIRED,messageType,enumType));}  }
class C{  public CM_ENTER_WORLD(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public void addParamClone(ModelParam param){  if (param != null) {    ModelParam newParam=new ModelParam(param);    addParam(newParam);  }}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  protected boolean checkText(Element currentRulePart,String tokenText){  NamedNodeMap attNodes=currentRulePart.getAttributes();  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (currentAtt.equals("word")) {      if (!currentVal.startsWith("INLIST") && !currentVal.startsWith("INFSTLIST") && !currentVal.startsWith("!INLIST")&& !currentVal.startsWith("!INFSTLIST")) {        if (!currentVal.startsWith("!")) {          if (!tokenText.equals(currentVal))           return false;        } else {          currentVal=currentVal.substring(1,currentVal.length());          if (tokenText.equals(currentVal))           return false;        }      } else       return checkList(currentVal,tokenText);    }  }  return true;}  }
class C{  public RequestHandle head(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params)),null,responseHandler,context);}  }
class C{  public void removeCartItem(ShoppingCartItem item,boolean triggerExternalOps,LocalDispatcher dispatcher) throws CartItemModifyException {  if (item == null)   return;  this.removeCartItem(this.getItemIndex(item),triggerExternalOps,dispatcher);}  }
class C{  public NGramGaussNormSymWinDocument(){  Graph=new DocumentNGramSymWinGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  public WheelHorizontalView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public void disableDragItem(){  itemDragEnabled=false;  mItemTouchHelper=null;}  }
class C{  @Override public Node removeChild(Node oldChild) throws DOMException {  if (hasStringValue()) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null);    throw new DOMException(DOMException.NOT_FOUND_ERR,msg);  }  return internalRemoveChild(oldChild,false);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putInt(get(rowNumber)).array();}  }
class C{  public void addPackage(Context context,String packageName){  final List<ResolveInfo> matches=findActivitiesForPackage(context,packageName);  if (matches.size() > 0) {    for (    ResolveInfo info : matches) {      add(new ItemApplication(context.getPackageManager(),info,mIconCache,null));    }  }}  }
class C{  public void reset(final Plane original){  originOffset=original.originOffset;  origin=original.origin;  u=original.u;  v=original.v;  w=original.w;}  }
class C{  protected void addIntermediateNode(BTreeNode curNode,List<BTreeNode[]> childNodeGroups,BTreeNode[] currentGroup,List<List<IndexKey>> interNSKeyList,int numberOfInternalNode){  int groupCounter;  int remainder;  int nHigh=numberOfInternalNode;  boolean bRootBuilt=false;  remainder=nLeaf % (maxNumberOfEntriesInNonLeafNodes);  List<IndexKey> interNSKeys=null;  while (nHigh > 1 || !bRootBuilt) {    List<BTreeNode[]> internalNodeGroups=new ArrayList<BTreeNode[]>(CarbonCommonConstants.CONSTANT_SIZE_TEN);    List<List<IndexKey>> interNSKeyTmpList=new ArrayList<List<IndexKey>>(CarbonCommonConstants.CONSTANT_SIZE_TEN);    numberOfInternalNode=0;    for (int i=0; i < nHigh; i++) {      curNode=new BTreeNonLeafNode();      groupCounter=i % (maxNumberOfEntriesInNonLeafNodes);      if (groupCounter == 0) {        currentGroup=new BTreeNonLeafNode[maxNumberOfEntriesInNonLeafNodes];        internalNodeGroups.add(currentGroup);        numberOfInternalNode++;        interNSKeys=new ArrayList<IndexKey>(CarbonCommonConstants.CONSTANT_SIZE_TEN);        interNSKeyTmpList.add(interNSKeys);      }      if (null != currentGroup) {        currentGroup[groupCounter]=curNode;      }      int nNodes;      if (i == nHigh - 1 && remainder != 0) {        nNodes=remainder;      } else {        nNodes=maxNumberOfEntriesInNonLeafNodes;      }      curNode.setChildren(childNodeGroups.get(i));      for (int j=0; j < nNodes; j++) {        curNode.setKey(interNSKeyList.get(i).get(j));        if (j == 0 && null != interNSKeys) {          interNSKeys.add(interNSKeyList.get(i).get(j));        }      }    }    if (nHigh == 1) {      bRootBuilt=true;    }    remainder=nHigh % (maxNumberOfEntriesInNonLeafNodes);    nHigh=numberOfInternalNode;    childNodeGroups=internalNodeGroups;    interNSKeyList=interNSKeyTmpList;  }  root=curNode;}  }
class C{  public static EntryClassBase toEntryClassBase(Class cls) throws MarshalException {synchronized (entryMap) {    return toEntryClassBase(cls,true);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_NOTIFY_DELETE_BUDDY(String value0){  return new SM_SYSTEM_MESSAGE(1300917,value0);}  }
class C{  @Override public void startDTD(XMLLocator locator,Augmentations augmentations) throws XNIException {}  }
class C{  private void fillXMLAttributes(StartElement event){  fAttributes.removeAllAttributes();  final Iterator attrs=event.getAttributes();  while (attrs.hasNext()) {    Attribute attr=(Attribute)attrs.next();    fillQName(fAttributeQName,attr.getName());    String type=attr.getDTDType();    int idx=fAttributes.getLength();    fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,attr.getValue());    fAttributes.setSpecified(idx,attr.isSpecified());  }}  }
class C{  public double normInf(){  double f=0;  for (int i=0; i < m; i++) {    double s=0;    for (int j=0; j < n; j++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  private boolean parseOptions(){  boolean valid=true;  if (hasOption(LOCALPROPFILE)) {    SystemConfiguration.loadPropsFromFile(new File(getOptionValue(LOCALPROPFILE)));  } else {    for (    String prop : QuerierProps.PROPSLIST) {      if (hasOption(prop)) {        SystemConfiguration.setProperty(prop,getOptionValue(prop));      }    }  }  valid=QuerierProps.validateQuerierProperties();  if (valid) {    logger.info("loading schemas: dataSchemas = " + SystemConfiguration.getProperty("data.schemas") + " querySchemas = "+ SystemConfiguration.getProperty("query.schemas"));    try {      DataSchemaLoader.initialize();      QuerySchemaLoader.initialize();    } catch (    Exception e) {      e.printStackTrace();    }  }  return valid;}  }
class C{  protected soot.Value createAggressiveExpr(polyglot.ast.Expr expr,boolean reduceAggressively,boolean reverseCondIfNec){  if (expr.isConstant() && expr.constantValue() != null && expr.type() != null && !(expr instanceof polyglot.ast.Binary && expr.type().toString().equals("java.lang.String"))) {    return createConstant(expr);  }  if (expr instanceof polyglot.ast.Assign) {    return getAssignLocal((polyglot.ast.Assign)expr);  } else   if (expr instanceof polyglot.ast.Lit) {    return createLiteral((polyglot.ast.Lit)expr);  } else   if (expr instanceof polyglot.ast.Local) {    return getLocal((polyglot.ast.Local)expr);  } else   if (expr instanceof polyglot.ast.Binary) {    return getBinaryLocal2((polyglot.ast.Binary)expr,reduceAggressively);  } else   if (expr instanceof polyglot.ast.Unary) {    return getUnaryLocal((polyglot.ast.Unary)expr);  } else   if (expr instanceof polyglot.ast.Cast) {    return getCastLocal((polyglot.ast.Cast)expr);  } else   if (expr instanceof polyglot.ast.ArrayAccess) {    return getArrayRefLocal((polyglot.ast.ArrayAccess)expr);  } else   if (expr instanceof polyglot.ast.NewArray) {    return getNewArrayLocal((polyglot.ast.NewArray)expr);  } else   if (expr instanceof polyglot.ast.Call) {    return getCallLocal((polyglot.ast.Call)expr);  } else   if (expr instanceof polyglot.ast.New) {    return getNewLocal((polyglot.ast.New)expr);  } else   if (expr instanceof polyglot.ast.Special) {    return getSpecialLocal((polyglot.ast.Special)expr);  } else   if (expr instanceof polyglot.ast.Instanceof) {    return getInstanceOfLocal((polyglot.ast.Instanceof)expr);  } else   if (expr instanceof polyglot.ast.Conditional) {    return getConditionalLocal((polyglot.ast.Conditional)expr);  } else   if (expr instanceof polyglot.ast.Field) {    return getFieldLocal((polyglot.ast.Field)expr);  } else {    throw new RuntimeException("Unhandled Expression: " + expr);  }}  }
class C{  public void synthesisWithProsodySpecificationInExternalFiles() throws Exception {  int i, j, n, t;  String feaFile="/project/mary/marcela/openmary/lib/voices/cmu-slt-hsmm/cmu_us_arctic_slt_a0001.pfeats";  HTSEngine hmm_tts=new HTSEngine();  HMMData htsData=new HMMData();  String MaryBase="/project/mary/marcela/openmary/";  String voiceName="cmu-slt-hsmm";  String voiceConfig="en_US-cmu-slt-hsmm.config";  String outWavFile=MaryBase + "tmp/tmp.wav";  htsData.initHMMData(voiceName,MaryBase,voiceConfig);  htsData.setUseGV(true);  htsData.setUseMixExc(true);  htsData.setUseFourierMag(true);  HTSUttModel um=new HTSUttModel();  HTSParameterGeneration pdf2par=new HTSParameterGeneration();  HTSVocoder par2speech=new HTSVocoder();  AudioInputStream ais;  String labFile="/project/mary/marcela/f0-hsmm-experiment/cmu_us_arctic_slt_a0001.lab";  String lf0File="/project/mary/marcela/f0-hsmm-experiment/cmu_us_arctic_slt_a0001.lf0";  float totalDuration;  int totalDurationFrames;  float fperiodsec=((float)htsData.getFperiod() / (float)htsData.getRate());  hmm_tts.setPhonemeAlignmentForDurations(true);  Vector<PhonemeDuration> durations=new Vector<PhonemeDuration>();  totalDuration=loadDurationsForAlignment(labFile,durations);  hmm_tts.setAlignDurations(durations);  totalDurationFrames=(int)((totalDuration / fperiodsec));  hmm_tts.setNewStateDurationFactor(0.37);  htsData.setUseAcousticModels(true);  try {    um=hmm_tts.processUttFromFile(feaFile,htsData);    boolean debug=false;    pdf2par.htsMaximumLikelihoodParameterGeneration(um,htsData);    ais=par2speech.htsMLSAVocoder(pdf2par,htsData);    System.out.println("saving to file: " + outWavFile);    File fileOut=new File(outWavFile);    if (AudioSystem.isFileTypeSupported(AudioFileFormat.Type.WAVE,ais)) {      AudioSystem.write(ais,AudioFileFormat.Type.WAVE,fileOut);    }    System.out.println("Calling audioplayer:");    AudioPlayer player=new AudioPlayer(fileOut);    player.start();    player.join();    System.out.println("audioplayer finished...");  } catch (  Exception e) {    System.err.println("Exception: " + e.getMessage());  }}  }
class C{  protected Object invokeRemote(Object proxy,final IMethod method,Object[] args) throws Throwable {  ProxyInvocationHandler remoteInvocationHandler=getInvocationHandler();  return remoteInvocationHandler.invoke(proxy,method,args);}  }
class C{  private FeatureRegistry(){}  }
class C{  public double norm2(){  return s[0];}  }
class C{  public void onMediaMessage(String message,int sequenceNumber){  if (mMediaPlayer != null) {    mMediaPlayer.onMessageReceived(mCastDevice,MEDIA_NAMESPACE,message);  }  sendMessageToClients("v2_message",message,sequenceNumber);}  }
class C{  private List<String> tokenizePhrase(String phrase){  graph.makeGraph(phrase);  List<LinkedList<Integer>> paths=graph.shortestPaths();  if (paths.size() > 0) {    LinkedList<Integer> selectedPath=paths.get(paths.size() - 1);    if (bigram != null) {      int best=graph.select(paths);      selectedPath=paths.get(best);    }    return graph.words(selectedPath);  }  if (verbose) {    System.out.println("Cannot tokenize the following phrase: [" + phrase + "]");  }  return null;}  }
class C{  public boolean add_tags(){  return soot.PhaseOptions.getBoolean(options,"add-tags");}  }
class C{  public boolean closeDatabase(String dbfile){  if (databases.get(dbfile) != null) {    SQLiteDatabase db=(SQLiteDatabase)databases.get(dbfile);    db.close();    databases.remove(dbfile);    return true;  }  return false;}  }
class C{  public void addValue(double[] value) throws MathIllegalArgumentException {  MathUtils.checkNotNull(value,LocalizedCoreFormats.INPUT_ARRAY);  MathUtils.checkDimension(value.length,k);  sumImpl.increment(value);  sumSqImpl.increment(value);  minImpl.increment(value);  maxImpl.increment(value);  sumLogImpl.increment(value);  geoMeanImpl.increment(value);  meanImpl.increment(value);  covarianceImpl.increment(value);  n++;}  }
class C{  public int equivHashCode(){  if (sourcename instanceof Value)   return ((Value)sourcename).equivHashCode();  return sourcename.hashCode();}  }
class C{  public DatabaseGetChairsQuery(VkApiClient client,UserActor actor,int facultyId){  super(client,"database.getChairs",GetChairsResponse.class);  accessToken(actor.getAccessToken());  facultyId(facultyId);}  }
class C{  public boolean hasScrolled(){  return this.scroll != 0;}  }
class C{  public Builder elementType(final Type<?> elementType){  this.elementType=elementType;  return this;}  }
class C{  public static S2CellId fromFaceIJSame(int face,int i,int j,boolean sameFace){  if (sameFace) {    return S2CellId.fromFaceIJ(face,i,j);  } else {    return S2CellId.fromFaceIJWrap(face,i,j);  }}  }
class C{  public static byte[] hash(byte[] data){  return hash(data,0,data.length);}  }
class C{  public void visitPhpMethod(Method method){  final PhpLanguageLevel phpVersion=PhpProjectConfigurationFacade.getInstance(holder.getProject()).getLanguageLevel();  if (phpVersion.hasFeature(PhpLanguageFeature.SCALAR_TYPE_HINTS)) {    return;  }  this.checkParameters(method.getParameters(),method);}  }
class C{  private boolean isMergePoint(N target){  if (icfg.isStartPoint(target))   return true;  List<N> preds=icfg.getPredsOf(target);  int size=preds.size();  if (size > 1)   return true;  if (size > 0)   for (  N pred : preds)   if (icfg.isCallStmt(pred))   return true;  return false;}  }
class C{  public static double[] computePowerSpectrum_FD(final double[] fft){  if (fft == null)   throw new NullPointerException("Received null argument");  int halfN=fft.length / 2;  double[] freqs=new double[halfN];  freqs[0]=fft[0] * fft[0];  for (int i=2; i < fft.length; i+=2) {    freqs[i / 2]=fft[i] * fft[i] + fft[i + 1] * fft[i + 1];  }  return freqs;}  }
class C{  public DataIOException(){  super();}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public Builder addColumnCategorical(String name,String... stateNames){  return addColumn(new CategoricalMetaData(name,stateNames));}  }
class C{  protected void applyWhere(SQL sql,UserCriteria example,boolean includeExamplePhrase){  if (example == null) {    return;  }  String parmPhrase1;  String parmPhrase1_th;  String parmPhrase2;  String parmPhrase2_th;  String parmPhrase3;  String parmPhrase3_th;  if (includeExamplePhrase) {    parmPhrase1="%s #{example.oredCriteria[%d].allCriteria[%d].value}";    parmPhrase1_th="%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";    parmPhrase2="%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";    parmPhrase2_th="%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";    parmPhrase3="#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";    parmPhrase3_th="#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";  } else {    parmPhrase1="%s #{oredCriteria[%d].allCriteria[%d].value}";    parmPhrase1_th="%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";    parmPhrase2="%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";    parmPhrase2_th="%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";    parmPhrase3="#{oredCriteria[%d].allCriteria[%d].value[%d]}";    parmPhrase3_th="#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";  }  StringBuilder sb=new StringBuilder();  List<Criteria> oredCriteria=example.getOredCriteria();  boolean firstCriteria=true;  for (int i=0; i < oredCriteria.size(); i++) {    Criteria criteria=oredCriteria.get(i);    if (criteria.isValid()) {      if (firstCriteria) {        firstCriteria=false;      } else {        sb.append(" or ");      }      sb.append('(');      List<Criterion> criterions=criteria.getAllCriteria();      boolean firstCriterion=true;      for (int j=0; j < criterions.size(); j++) {        Criterion criterion=criterions.get(j);        if (firstCriterion) {          firstCriterion=false;        } else {          sb.append(" and ");        }        if (criterion.isNoValue()) {          sb.append(criterion.getCondition());        } else         if (criterion.isSingleValue()) {          if (criterion.getTypeHandler() == null) {            sb.append(String.format(parmPhrase1,criterion.getCondition(),i,j));          } else {            sb.append(String.format(parmPhrase1_th,criterion.getCondition(),i,j,criterion.getTypeHandler()));          }        } else         if (criterion.isBetweenValue()) {          if (criterion.getTypeHandler() == null) {            sb.append(String.format(parmPhrase2,criterion.getCondition(),i,j,i,j));          } else {            sb.append(String.format(parmPhrase2_th,criterion.getCondition(),i,j,criterion.getTypeHandler(),i,j,criterion.getTypeHandler()));          }        } else         if (criterion.isListValue()) {          sb.append(criterion.getCondition());          sb.append(" (");          List<?> listItems=(List<?>)criterion.getValue();          boolean comma=false;          for (int k=0; k < listItems.size(); k++) {            if (comma) {              sb.append(", ");            } else {              comma=true;            }            if (criterion.getTypeHandler() == null) {              sb.append(String.format(parmPhrase3,i,j,k));            } else {              sb.append(String.format(parmPhrase3_th,i,j,k,criterion.getTypeHandler()));            }          }          sb.append(')');        }      }      sb.append(')');    }  }  if (sb.length() > 0) {    sql.WHERE(sb.toString());  }}  }
class C{  public SimpleContentModel(short operator,QName firstChild,QName secondChild){  fFirstChild.setValues(firstChild);  if (secondChild != null) {    fSecondChild.setValues(secondChild);  } else {    fSecondChild.clear();  }  fOperator=operator;}  }
class C{  @SuppressWarnings("unchecked") public <T>T read(InputStream inputStream,Class<T> classType) throws IOException {  try (ObjectInputStream oin=new ObjectInputStream(inputStream)){    return (T)oin.readObject();  } catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public Configured(){  this(null);}  }
class C{  public smaliFlexLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  public ProxyInputStream(InputStream proxy){  super(proxy);}  }
class C{  public static final void toString(StringBuffer output,Hashtable table){  if (table == null) {    output.append("null");    return;  }  output.append("(");  int size=table.size();  output.append(size);  if (listMax == -1 || size <= listMax) {    for (Enumeration e=table.keys(); e.hasMoreElements(); ) {      Object key=e.nextElement();      output.append(",(");      toString(output,key);      output.append(",");      toString(output,table.get(key));      output.append(")");    }  } else {    int border=size;    if (listBorder < border)     border=listBorder;    Enumeration e=table.keys();    for (int i=0; i < border; i++) {      Object key=e.nextElement();      output.append(",(");      toString(output,key);      output.append(",");      toString(output,table.get(key));      output.append(")");    }    if (border < size)     output.append(",...");  }  output.append(")");}  }
class C{  public ResourceUnavailableException(){  super();}  }
class C{  public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.white_radius,R.drawable.white_radius);}  }
class C{  @Override public ElementLocator createLocator(Field field){  return field.isAnnotationPresent(Global.class) ? new DefaultElementLocator(searchContext,field) : new SelectorScopedElementLocator(searchContext,selector,field);}  }
class C{  @VisibleForTesting public void clearPendingInvalidations(Context context){  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();  editor.putString(DELAYED_ACCOUNT_NAME,null);  editor.putStringSet(DELAYED_INVALIDATIONS,null);  editor.apply();}  }
class C{  public String matchStatement(String alias,String idParameterName){  Objects.requireNonNull(alias,"alias cannot be null");  Objects.requireNonNull(idParameterName,"idParameterName cannot be null");  return "MATCH " + matchPattern(alias) + " WHERE "+ matchPredicate(alias,idParameterName);}  }
class C{  boolean hasUUID(long uuid){  if (_readStorage.hasUUID(uuid)) {    return true;  }  for (  AstyanaxStorage storage : _writeStorage) {    if (storage.hasUUID(uuid)) {      return true;    }  }  return false;}  }
class C{  TxnManagerImpl(ActivationID activationID,MarshalledObject data) throws Exception {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"TxnManagerImpl",new Object[]{activationID,data});  }  this.activationID=activationID;  try {    init((String[])data.get());  } catch (  Throwable e) {    cleanup();    initFailed(e);  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"TxnManagerImpl");  }  finer_par_logger=participantLogger.isLoggable(Level.FINER);  finest_par_logger=participantLogger.isLoggable(Level.FINEST);  finer_op_logger=operationsLogger.isLoggable(Level.FINER);  finest_op_logger=operationsLogger.isLoggable(Level.FINEST);  finer_tr_logger=transactionsLogger.isLoggable(Level.FINER);  finest_tr_logger=transactionsLogger.isLoggable(Level.FINEST);}  }
class C{  public String message(){  return message;}  }
class C{  public IObjectInfo<T> add(T subject){  lock.lock();  try {    IObjectInfo<T> oi=store_impl(subject);    updateHashAfterInsertion(oi);    return oi;  }  finally {    lock.unlock();  }}  }
class C{  public static String emptyIfEqual(String string,String test){  return test != null && test.equals(string) ? EMPTY : string;}  }
class C{  private void createEditPanel(){  editPanel=new JPanel();  add(editPanel,BorderLayout.CENTER);  CardLayout cardlayout=new CardLayout();  editPanel.setLayout(cardlayout);  if (colourRampMap != null) {    for (    ColourRampPanelInterface data : colourRampMap.keySet()) {      data.setParent(this);      String key=data.getTitle();      editPanel.add(data.getPanel(),key);    }  }}  }
class C{  public Builder(String iconUrl){  this.iconUrl=iconUrl;}  }
class C{  public PhotosCreateAlbumQuery(VkApiClient client,UserActor actor,String title){  super(client,"photos.createAlbum",PhotoAlbumFull.class);  accessToken(actor.getAccessToken());  title(title);}  }
class C{  synchronized public void terminate(){  if (isTerminated())   return;  _namingCache.terminate();  _isTerminated=true;  if (threadPool != null)   threadPool.shutdown();  if (_logger.isLoggable(Level.FINE))   _logger.fine(toString() + " terminated.");}  }
class C{  public void updateTopControlsState(){  if (mContent == null)   return;  if (isFullscreenSizePanel()) {    mContent.updateTopControlsState(false,true,false);  } else {    mContent.updateTopControlsState(true,false,false);  }}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  @Override public void ignoredCharacters(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public boolean isDrawInsideEnabled(){  return mDrawInside;}  }
class C{  public Column removeColumn(String field){  int idx=m_names.indexOf(field);  if (idx < 0) {    throw new IllegalArgumentException("No such column.");  }  return removeColumn(idx);}  }
class C{  protected PreferenceGroupAdapter onCreateRootAdapter(){  return new PreferenceGroupAdapter(this);}  }
class C{  public static <T extends RealFieldElement<T>>T dotProduct(final FieldVector3D<T> v1,final Vector3D v2){  return v1.dotProduct(v2);}  }
class C{  public void createPage(String title,String exactTemplateName){  typeTitle(title);  selectTemplate(exactTemplateName);  confirm();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static StatefulHash murmur3_128(int seed){  return Hashes.createStateful(new MurmurHash3Parameters(MurmurHash3Variant.X64_128,seed));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200342,skillname);}  }
class C{  private void startFormFragment(@FeedbackItem.FeedbackType int feedbackType){  String title=getString(getTitleResId(feedbackType));  String hint=getString(getHintResId(feedbackType));  changeToFragment(FormFragment.newInstance(title,hint,imageUri));}  }
class C{  @Override public void close(){  if (closed) {    return;  }  closed=true;  LIB.mdb_env_close(ptr);}  }
class C{  public Builder addStringDerivedColumn(String columnName,String format,DateTimeZone timeZone){  derivedColumns.add(new DerivedColumn(columnName,ColumnType.String,format,timeZone,null));  return this;}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  @NotNull public VerificationSet verifyFaces(@NotNull String face1Url,@NotNull String face2Url){  Face firstFace=findSingleFace(face1Url);  Face secondFace=findSingleFace(face2Url);  Verification verification=faceTaskBuilder.verifyFace(firstFace.faceId,secondFace.faceId).withResult();  return new VerificationSet(firstFace,secondFace,verification);}  }
class C{  public void onCreate(){}  }
class C{  public void updateSceneLayer(ResourceManager resourceManager){}  }
class C{  public SpectralSpellInteroperator(String sExecutable,String sInputFile,String[] sArgs){  this(sInputFile,sArgs);  SSpellExecutable=sExecutable;}  }
class C{  public void transformValues(TObjectFunction<V,V> function){  byte[] states=_states;  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public void addTask(TaskId taskId,Future<?> task){  cancelTask(taskId);  tasks.put(taskId.ordinal(),task);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public InterfaceDecl fullCopy(){  InterfaceDecl tree=(InterfaceDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private synchronized void initMapsIfNecessary(){  if (this.gsByName == null) {    this.gsByName=new HashMap<String,GigaSpace>();    for (    String gsName : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.applicationContext,GigaSpace.class)) {      GigaSpace gs=(GigaSpace)this.applicationContext.getBean(gsName);      gsByName.put(gsName,gs);    }    if (this.gsByName.isEmpty()) {      String[] gsNames=BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.applicationContext,GigaSpace.class);      if (gsNames.length == 1) {        this.uniqueGs=(GigaSpace)this.applicationContext.getBean(gsNames[0]);      }    } else     if (this.gsByName.size() == 1) {      this.uniqueGs=this.gsByName.values().iterator().next();    }    if (this.gsByName.isEmpty() && this.uniqueGs == null) {      logger.warn("No named gs instances defined and not exactly one anonymous one: cannot inject");    }  }}  }
class C{  private List<String> dimensionNamespaces(String dimensionName){switch (dimensionName) {case "SIZE":    return Arrays.asList("SPECIES","BREED","GENDER");case "SHAPE":  return Arrays.asList("SPECIES");default :return Collections.emptyList();}}  }
class C{  public static boolean isExpressionNeedsToResolved(Expression rightExp,boolean isIncludeFilter){  if (!isIncludeFilter && rightExp instanceof LiteralExpression && (DataType.NULL == ((LiteralExpression)rightExp).getLiteralExpDataType())) {    return true;  }  for (  Expression child : rightExp.getChildren()) {    if (isExpressionNeedsToResolved(child,isIncludeFilter)) {      return true;    }  }  return false;}  }
class C{  public LinearConstraint(final RealVector coefficients,final Relationship relationship,final double value){  this.coefficients=coefficients;  this.relationship=relationship;  this.value=value;}  }
class C{  public AppsGetCatalogQuery genreId(Integer value){  return unsafeParam("genre_id",value);}  }
class C{  public Matrix4f(float[] array){  set(array,false);}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(15,1));  floor.setMass(MassType.INFINITE);  floor.translate(0.0,-4.0);  this.world.addBody(floor);  ImageBody circle=new ImageBody();  circle.image=BASKETBALL;  circle.addFixture(Geometry.createCircle(0.5),1,0.2,0.5);  circle.setMass(MassType.NORMAL);  circle.translate(2.0,2.0);  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  this.world.addBody(circle);  ImageBody rectangle=new ImageBody();  rectangle.image=CRATE;  rectangle.addFixture(Geometry.createRectangle(1,1));  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,1.0);  rectangle.getLinearVelocity().set(-2,0);  this.world.addBody(rectangle);}  }
class C{  public static void showImage(Context context,@NonNull String imageUrl){  if (context == null)   return;  showImage(context,imageView,imageUrl,null);}  }
class C{  public static int countOccurrence(String input,char c){  if (input == null) {    return 0;  }  int count=0;  for (int i=0; i < input.length(); i++) {    count=(input.charAt(i) == c) ? (count + 1) : count;  }  return count;}  }
class C{  public BulkTimer(){  this.verbose=false;  timers=new LinkedHashMap();}  }
class C{  private ColumnWithIntIndex[] createColumnWithIndexArray(byte[][] keyBlock,boolean isNoDictionary){  ColumnWithIntIndex[] columnWithIndexs;  if (isNoDictionary) {    columnWithIndexs=new ColumnWithIntIndexForHighCard[keyBlock.length];    for (int i=0; i < columnWithIndexs.length; i++) {      columnWithIndexs[i]=new ColumnWithIntIndexForHighCard(keyBlock[i],i);    }  } else {    columnWithIndexs=new ColumnWithIntIndex[keyBlock.length];    for (int i=0; i < columnWithIndexs.length; i++) {      columnWithIndexs[i]=new ColumnWithIntIndex(keyBlock[i],i);    }  }  return columnWithIndexs;}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {  fInCDATA=true;  if (fDocumentHandler != null) {    fDocumentHandler.startCDATA(augs);  }}  }
class C{  public void begin(int size){}  }
class C{  public static void prepareForBoot(File warPath,ClusterInfo clusterInfo,BeanLevelProperties beanLevelProperties) throws Exception {  File gsStore=new File(warPath,MARSHALLED_STORE);  gsStore.mkdirs();  if (clusterInfo != null) {    FileCopyUtils.copy(objectToByteBuffer(clusterInfo),new File(warPath,MARSHALLED_CLUSTER_INFO));  }  if (beanLevelProperties != null) {    FileCopyUtils.copy(objectToByteBuffer(beanLevelProperties),new File(warPath,MARSHALLED_BEAN_LEVEL_PROPERTIES));  }  new File(warPath,"/WEB-INF/web.xml").renameTo(new File(warPath,"/WEB-INF/web.xml.orig"));  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(new File(warPath,"/WEB-INF/web.xml.orig"))));  PrintWriter writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(warPath,"/WEB-INF/web.xml"),false))));  String line;  while ((line=reader.readLine()) != null) {    line=line.replace("org.springframework.web.context.ContextLoaderListener","org.openspaces.pu.container.jee.context.ProcessingUnitContextLoaderListener");    if (line.indexOf("<web-app") != -1) {      writer.println(line);      if (line.indexOf('>') == -1) {        while ((line=reader.readLine()) != null) {          if (line.indexOf('>') == -1) {            writer.println(line);          } else {            break;          }        }        writer.println(line);      }      writer.println("<!-- GigaSpaces CHANGE START: Boot Listener -->");      writer.println("<listener>");      writer.println("    <listener-class>" + BootstrapWebApplicationContextListener.class.getName() + "</listener-class>");      writer.println("</listener>");      writer.println("<!-- GigaSpaces CHANGE END: Boot Listener -->");      writer.println("<!-- GigaSpaces CHANGE START: Request Statistics Listener -->");      writer.println("<filter>");      writer.println("    <filter-name>gs-request-statistics</filter-name>");      writer.println("    <filter-class>" + RequestStatisticsFilter.class.getName() + "</filter-class>");      writer.println("</filter>");      writer.println("<filter-mapping>");      writer.println("    <filter-name>gs-request-statistics</filter-name>");      writer.println("    <url-pattern>/*</url-pattern>");      writer.println("</filter-mapping>");      writer.println("<!-- GigaSpaces CHANGE END: Request Statistics Listener -->");    } else {      writer.println(line);    }  }  writer.close();  reader.close();}  }
class C{  @Override public void uncaughtException(Thread thread,Throwable ex){  if (handleException(ex)) {    System.out.println(ex.toString());    deletefile(ExternalPath);    String fileName=saveCatchInfo2File(ex);    sendCrashLog2PM(ExternalPath + fileName);  }  if (mDefaultHandler != null) {    mDefaultHandler.uncaughtException(thread,ex);  }  android.os.Process.killProcess(android.os.Process.myPid());  System.exit(1);}  }
class C{  private void validate(){  try {    DateTime ts;    ts=current.getTimestamp();    for (    TimeSeriesCollection b : backward) {      if (b.getTimestamp().isAfter(ts))       throw new IllegalArgumentException("backwards collection must be before current and be ordered in reverse chronological order");      ts=b.getTimestamp();    }    ts=current.getTimestamp();    for (    TimeSeriesCollection f : forward) {      if (f.getTimestamp().isBefore(ts))       throw new IllegalArgumentException("forwards collection must be after current and be ordered in chronological order");      ts=f.getTimestamp();    }  } catch (  IllegalArgumentException ex) {    LOG.log(Level.SEVERE,"programmer error in creating interpolated TimeSeriesCollection",ex);    final List<DateTime> backward_ts=backward.stream().map(null).collect(Collectors.toList());    final List<DateTime> forward_ts=forward.stream().map(null).collect(Collectors.toList());    LOG.log(Level.INFO,"current = {0}, backward = {1}, forward = {2}",new Object[]{current.getTimestamp(),backward_ts,forward_ts});    throw ex;  }}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  public void login(String username,String password,String account) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (security == SECURITY_FTPES) {      communication.sendFTPCommand("AUTH TLS");      FTPReply r=communication.readFTPReply();      if (r.isSuccessCode()) {        communication.ssl(sslSocketFactory);      } else {        communication.sendFTPCommand("AUTH SSL");        r=communication.readFTPReply();        if (r.isSuccessCode()) {          communication.ssl(sslSocketFactory);        } else {          throw new FTPException(r.getCode(),"SECURITY_FTPES cannot be applied: " + "the server refused both AUTH TLS and AUTH SSL commands");        }      }    }    authenticated=false;    boolean passwordRequired;    boolean accountRequired;    communication.sendFTPCommand("USER " + username);    FTPReply r=communication.readFTPReply();switch (r.getCode()) {case 230:      passwordRequired=false;    accountRequired=false;  break;case 331:passwordRequired=true;accountRequired=false;break;case 332:passwordRequired=false;accountRequired=true;default :throw new FTPException(r);}if (passwordRequired) {if (password == null) {throw new FTPException(331);}communication.sendFTPCommand("PASS " + password);r=communication.readFTPReply();switch (r.getCode()) {case 230:accountRequired=false;break;case 332:accountRequired=true;break;default :throw new FTPException(r);}}if (accountRequired) {if (account == null) {throw new FTPException(332);}communication.sendFTPCommand("ACCT " + account);r=communication.readFTPReply();switch (r.getCode()) {case 230:break;default :throw new FTPException(r);}}this.authenticated=true;this.username=username;this.password=password;}postLoginOperations();startAutoNoopTimer();}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  public static byte[] inputStreamToByte(InputStream in) throws IOException {  ByteArrayOutputStream outStream=new ByteArrayOutputStream();  byte[] data=new byte[BUFFER_SIZE];  int count=-1;  while ((count=in.read(data,0,BUFFER_SIZE)) != -1) {    outStream.write(data,0,count);  }  data=null;  return outStream.toByteArray();}  }
class C{  public void java_security_AccessController_getStackAccessControlContext(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastObject());}  }
class C{  public void decode(String stringValue){  String[] components=stringValue.replace(" ","").split(separator);  if (components.length == 2) {    start=new Duration(components[0]);    end=new Duration(components[1]);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_CONFLICT_WITH_OTHER_SKILL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300059,value0,value1);}  }
class C{  @NotNull public static ResizePolicy create(boolean top,boolean right,boolean bottom,boolean left,boolean preserve){  int mask=NONE;  if (top)   mask|=TOP_EDGE;  if (right)   mask|=RIGHT_EDGE;  if (bottom)   mask|=BOTTOM_EDGE;  if (left)   mask|=LEFT_EDGE;  if (preserve)   mask|=PRESERVE_RATIO;  return new ResizePolicy(mask);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200421,value0,skillname);}  }
class C{  public static String join(String glue,String[] items){  if (glue == null || items == null) {    throw new NullPointerException("Null args");  }  if (items.length == 0) {    return "";  }  StringBuilder sb=new StringBuilder();  sb.append(items[0]);  for (int i=1; i < items.length; i++) {    sb.append(glue).append(items[i]);  }  return sb.toString();}  }
class C{  @Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.xmlDecl(version,encoding,standalone,augs);  }}  }
class C{  @Override public void onParameterRemoved(Effect effect,Parameter parameter){}  }
class C{  public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public boolean isExtendedIndexing(){  return _isExtendedIndexing;}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,java.sql.Timestamp moment,String fromDateName,String thruDateName,boolean allAreSame){  if (datedValues == null)   return null;  if (moment == null)   return datedValues;  if (fromDateName == null)   fromDateName="fromDate";  if (thruDateName == null)   thruDateName="thruDate";  List<T> result=new LinkedList<T>();  Iterator<T> iter=datedValues.iterator();  if (allAreSame) {    ModelField fromDateField=null;    ModelField thruDateField=null;    if (iter.hasNext()) {      T datedValue=iter.next();      fromDateField=datedValue.getModelEntity().getField(fromDateName);      if (fromDateField == null)       throw new IllegalArgumentException("\"" + fromDateName + "\" is not a field of "+ datedValue.getEntityName());      thruDateField=datedValue.getModelEntity().getField(thruDateName);      if (thruDateField == null)       throw new IllegalArgumentException("\"" + thruDateName + "\" is not a field of "+ datedValue.getEntityName());      java.sql.Timestamp fromDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(fromDateField);      java.sql.Timestamp thruDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(thruDateField);      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment) || fromDate.equals(moment))) {        result.add(datedValue);      }    }    while (iter.hasNext()) {      T datedValue=iter.next();      java.sql.Timestamp fromDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(fromDateField);      java.sql.Timestamp thruDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(thruDateField);      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment) || fromDate.equals(moment))) {        result.add(datedValue);      }    }  } else {    while (iter.hasNext()) {      T datedValue=iter.next();      java.sql.Timestamp fromDate=datedValue.getTimestamp(fromDateName);      java.sql.Timestamp thruDate=datedValue.getTimestamp(thruDateName);      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment) || fromDate.equals(moment))) {        result.add(datedValue);      }    }  }  return result;}  }
class C{  public static int javaLoadLib(int luaState,String className,String methodName) throws LuaException {  LuaState L=LuaStateFactory.getExistingState(luaState);synchronized (L) {    Class clazz;    try {      clazz=Class.forName(className);    } catch (    ClassNotFoundException e) {      throw new LuaException(e);    }    try {      Method mt=clazz.getMethod(methodName,new Class[]{LuaState.class});      Object obj=mt.invoke(null,new Object[]{L});      if (obj != null && obj instanceof Integer) {        return ((Integer)obj).intValue();      } else       return 0;    } catch (    Exception e) {      throw new LuaException("Error on calling method. Library could not be loaded. " + e.getMessage());    }  }}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysMenu other=(SysMenu)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getMenuName() == null ? other.getMenuName() == null : this.getMenuName().equals(other.getMenuName())) && (this.getMenuType() == null ? other.getMenuType() == null : this.getMenuType().equals(other.getMenuType()))&& (this.getParentId() == null ? other.getParentId() == null : this.getParentId().equals(other.getParentId()))&& (this.getIconcls() == null ? other.getIconcls() == null : this.getIconcls().equals(other.getIconcls()))&& (this.getRequest() == null ? other.getRequest() == null : this.getRequest().equals(other.getRequest()))&& (this.getExpand() == null ? other.getExpand() == null : this.getExpand().equals(other.getExpand()))&& (this.getSortNo() == null ? other.getSortNo() == null : this.getSortNo().equals(other.getSortNo()))&& (this.getIsShow() == null ? other.getIsShow() == null : this.getIsShow().equals(other.getIsShow()))&& (this.getPermission() == null ? other.getPermission() == null : this.getPermission().equals(other.getPermission()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  private boolean isNextInStep(double nextTime,ODEStateInterpolator interpolator){  return forward ? nextTime <= interpolator.getCurrentState().getTime() : nextTime >= interpolator.getCurrentState().getTime();}  }
class C{  public NewsfeedUnignoreItemQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int ownerId,int itemId){  super(client,"newsfeed.unignoreItem",OkResponse.class);  accessToken(actor.getAccessToken());  type(type);  ownerId(ownerId);  itemId(itemId);}  }
class C{  public DependencyGraph(Sentence sentence,Integer[] heads,String[] labels){  this.sentence=sentence;  this.heads=heads;  this.labels=labels;  if (sentence.length() != heads.length || heads.length != labels.length) {    throw new IllegalArgumentException("Lengths do not match!");  }}  }
class C{  private boolean readSlab(String channel,ByteBuffer slabId,SlabCursor cursor,boolean open,EventSink sink){  int start=cursor.get();  if (start == SlabCursor.END) {    return true;  }  boolean recent=isRecent(slabId);  ColumnList<Integer> eventColumns=execute(_keyspace.prepareQuery(ColumnFamilies.SLAB,ConsistencyLevel.CL_LOCAL_QUORUM).getKey(slabId).withColumnRange(start,Constants.OPEN_SLAB_MARKER,false,Integer.MAX_VALUE));  boolean searching=true;  boolean empty=(start == 0);  boolean more=false;  int next=start;  for (  Column<Integer> eventColumn : eventColumns) {    int eventIdx=eventColumn.getName();    if (eventIdx == Constants.OPEN_SLAB_MARKER) {      break;    }    empty=false;    if (!searching) {      more=true;      break;    }    EventId eventId=AstyanaxEventId.create(channel,slabId,eventIdx);    ByteBuffer eventData=eventColumn.getByteBufferValue();    searching=sink.accept(eventId,eventData);    next=eventIdx;  }  cursor.set(next);  boolean hasOpenSlabMarker=!eventColumns.isEmpty() && eventColumns.getColumnByIndex(eventColumns.size() - 1).getName() == Constants.OPEN_SLAB_MARKER;  boolean stale=open && !recent && !hasOpenSlabMarker;  if (stale) {    _staleSlabMeter.mark();  }  if (empty && (!open || stale)) {    deleteEmptySlabAsync(channel,slabId);    open=false;  } else   if (stale) {    closeStaleSlabAsync(channel,slabId);    open=false;  }  if (!more && !open) {    cursor.set(SlabCursor.END);  }  return searching;}  }
class C{  public BafBody newBody(Body b,String phase){  Map<String,String> options=PhaseOptions.v().getPhaseOptions(phase);  return new BafBody(b,options);}  }
class C{  protected int insertionIndex(long val){  int hash, probe, index, length;  final byte[] states=_states;  final long[] set=_set;  length=states.length;  hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  index=hash % length;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && set[index] == val) {    return -index - 1;  } else {    probe=1 + (hash % (length - 2));    if (states[index] != REMOVED) {      do {        index-=probe;        if (index < 0) {          index+=length;        }      } while (states[index] == FULL && set[index] != val);    }    if (states[index] == REMOVED) {      int firstRemoved=index;      while (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {        index-=probe;        if (index < 0) {          index+=length;        }      }      return states[index] == FULL ? -index - 1 : firstRemoved;    }    return states[index] == FULL ? -index - 1 : index;  }}  }
class C{  public int put(K key,int value){  int index=insertionIndex(key);  return doPut(key,value,index);}  }
class C{  public static float atan2(float fY,float fX){  return (float)Math.atan2(fY,fX);}  }
class C{  private void openFile(){  mContainerActivity.getFileOperationsHelper().openFile(getFile());  finish();}  }
class C{  public static StateContext newDefaultInstance(){  return newInstance(DefaultTable.factory(),new DefaultMetatableAccessor());}  }
class C{  private List<Phone> parseIntoPhones() throws Exception {  phones=new ArrayList<Phone>(units.size() / 2);  int u=0;  while (u < units.size()) {    SelectedUnit unit=units.get(u);    HalfPhoneTarget target=(HalfPhoneTarget)unit.getTarget();    if (target.isLeftHalf()) {      if (u < units.size() - 1) {        SelectedUnit nextUnit=units.get(u + 1);        HalfPhoneTarget nextTarget=(HalfPhoneTarget)nextUnit.getTarget();        if (nextTarget.isRightHalf()) {          phones.add(new Phone(unit,nextUnit,sampleRate));          u++;        } else {          phones.add(new Phone(unit,null,sampleRate));        }      } else {        phones.add(new Phone(unit,null,sampleRate));      }    } else {      phones.add(new Phone(null,unit,sampleRate));    }    u++;  }  assert u == units.size();  insertTargetF0Values();  return phones;}  }
class C{  public Set<AggregationFn> aggregationFn(){  return aggFn;}  }
class C{  private void writeHeader() throws IOException {  String headerJson=new ExportFileHeader(FORMAT_VERSION).writeStream();  String headerString=headerJson.substring(0,headerJson.lastIndexOf(RIGHT_BRACE.charAt(0)));  out.write(headerString.getBytes(UTF_8));  out.write(SEPARATOR_NEWLINE);  out.write(ENTRIES_START.getBytes(UTF_8));}  }
class C{  public Website site(){  return mSite;}  }
class C{  public static boolean inbetween(int x1,int y1,int x2,int y2,int width,int height){  return x2 >= x1 && y2 >= y1 && x2 < x1 + width && y2 < y1 + height;}  }
class C{  static <T>T parseJsonAndClose(InputStream in,Class<T> cls) throws JsonParseException {  BufferedReader reader=new BufferedReader(new InputStreamReader(in));  try {    return GSON.fromJson(reader,cls);  }  finally {    try {      reader.close();    } catch (    IOException e) {    }  }}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  return invoke(proxy,new StandardMethod(method),args);}  }
class C{  public static final String printSortIterable(Iterable iIterable,String sSeparator){  StringBuffer sOut=new StringBuffer();  Iterator iIter=iIterable.iterator();  TreeSet<String> tsItems=new TreeSet<String>();  while (iIter.hasNext()) {    tsItems.add(iIter.next().toString());  }  for (Iterator<String> isCur=tsItems.iterator(); isCur.hasNext(); ) {    sOut.append(isCur.next());    if (isCur.hasNext())     sOut.append(sSeparator);  }  return sOut.toString();}  }
class C{  private void init(){  addTextChangedListener(mEditTextWatcher);}  }
class C{  Collection<? extends ClientRequestResult> handleRetrieveConfigurationsRequest(final ClientRequest configurationRequest,final Session session,final Destination replyDestination){  if (configurationRequest.getRequestParameter() != null) {    return configurationLoader.getConfigurationReports(configurationRequest.getRequestParameter());  } else {    return configurationLoader.getConfigurationReports();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_JOIN_FAIL_ROOM_FULL(String value0){  return new SM_SYSTEM_MESSAGE(1300855,value0);}  }
class C{  public BlockId block(){  return blk;}  }
class C{  @Override public void forceUpdate(){  dataMatrix.clear();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REMAIN_TIME(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400195,durationtime0);}  }
class C{  public static IllegalArgumentException createIllegalArgumentException(final Throwable rootCause){  IllegalArgumentException iae=new IllegalArgumentException(rootCause.getLocalizedMessage());  iae.initCause(rootCause);  return iae;}  }
class C{  public boolean isApplicable(){  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  return inspectorWindow != null;}  }
class C{  public final boolean canGetDate(String field){  return m_table.canGetDate(field);}  }
class C{  public FloatElemValPair(String name,char kind,float val){  super(name,kind);  this.val=new FloatCP(val);}  }
class C{  private void internalOpenFile(File f,List<SLDDataInterface> list){  if (f.isFile() && FileSystemUtils.isFileExtensionSupported(f,getFileExtensionList())) {    try {      String sldContents=readFile(f,Charset.defaultCharset());      SLDDataInterface sldData=new SLDData(new StyleWrapper(f.getName()),sldContents);      sldData.setSLDFile(f);      sldData.setReadOnly(false);      list.add(sldData);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private Boolean specialLessThan(PlatformLogicalVersion otherVersion){  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCHeal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200852,skillcaster,num0,skillname);}  }
class C{  @Override public int compareTo(ViterbiCandidate o){  if (targetCost < o.targetCost) {    return -1;  } else   if (targetCost > o.targetCost) {    return 1;  }  return 0;}  }
class C{  public Vector3D crossProduct(final Vector<Euclidean3D> v){  final Vector3D v3=(Vector3D)v;  return new Vector3D(MathArrays.linearCombination(y,v3.z,-z,v3.y),MathArrays.linearCombination(z,v3.x,-x,v3.z),MathArrays.linearCombination(x,v3.y,-y,v3.x));}  }
class C{  private CompletableFuture<Void> delete(boolean failIfHasSubscriptions){  CompletableFuture<Void> deleteFuture=new CompletableFuture<>();  lock.writeLock().lock();  try {    if (isFenced) {      log.warn("[{}] Topic is already being closed or deleted",topic);      deleteFuture.completeExceptionally(new TopicFencedException("Topic is already fenced"));      return deleteFuture;    }    if (usageCount.get() == 0) {      isFenced=true;      List<CompletableFuture<Void>> futures=Lists.newArrayList();      if (failIfHasSubscriptions) {        if (!subscriptions.isEmpty()) {          isFenced=false;          deleteFuture.completeExceptionally(new TopicBusyException("Topic has subscriptions"));          return deleteFuture;        }      } else {        subscriptions.forEach(null);      }      FutureUtil.waitForAll(futures).whenComplete(null);    } else {      deleteFuture.completeExceptionally(new TopicBusyException("Topic has " + usageCount.get() + " connected producers/consumers"));    }  }  finally {    lock.writeLock().unlock();  }  return deleteFuture;}  }
class C{  public boolean isFirstTimeUser(){  return getPreference("firstTimeUser",true);}  }
class C{  protected String readFromFile(String sFileName){  ByteArrayOutputStream bsOut=new ByteArrayOutputStream();  FileInputStream fiIn=null;  BufferedInputStream bIn=null;  String sDataString="";  try {    fiIn=new FileInputStream(sFileName);    bIn=new BufferedInputStream(fiIn);    int iData=0;    while ((iData=bIn.read()) > -1)     bsOut.write(iData);    sDataString=bsOut.toString();    fiIn.close();    bIn.close();  } catch (  IOException ioe) {    ioe.printStackTrace(System.err);  }  return sDataString;}  }
class C{  private void checkTag(final SourceDataTag tag,final long currentAverage){  DataTagAddress address=tag.getAddress();  LOGGER.debug("Tag: '" + tag.getId() + "' - Current average: "+ currentAverage+ "ms");  if (address != null) {    if (address.isTimeDeadbandEnabled()) {      if (currentAverage >= deactivationDiff) {        LOGGER.info("Tag: '" + tag.getId() + "' - Removing tag from time deadband filtering.");        address.setTimeDeadband(0);      }    } else {      if (currentAverage <= minDiff && currentAverage != -1) {        LOGGER.info("Tag: '" + tag.getId() + "' - Adding tag to time deadband filtering.");        address.setTimeDeadband(timeDeadbandTime);      }    }  }}  }
class C{  public static void onRequestPermissionsResult(Object o,int requestCode,String[] permissions,int[] grantResults,PermissionListener listener){  List<String> deniedPermissions=new ArrayList<>(1);  for (int i=0; i < grantResults.length; i++)   if (grantResults[i] != PackageManager.PERMISSION_GRANTED)   deniedPermissions.add(permissions[i]);  if (listener == null) {    callback(o,deniedPermissions.size() > 0 ? PermissionNo.class : PermissionYes.class,requestCode);  } else   if (deniedPermissions.size() > 0) {    listener.onFailed(requestCode);  } else {    listener.onSucceed(requestCode);  }}  }
class C{  @Override public int read() throws IOException {  int b0=fInputStream.read() & 0xff;  if (b0 == 0xff) {    return -1;  }  int b1=fInputStream.read() & 0xff;  if (b1 == 0xff) {    return -1;  }  if (fEncoding >= 4) {    int b2=fInputStream.read() & 0xff;    if (b2 == 0xff) {      return -1;    }    int b3=fInputStream.read() & 0xff;    if (b3 == 0xff) {      return -1;    }    if (fEncoding == UCS4BE) {      return (b0 << 24) + (b1 << 16) + (b2 << 8)+ b3;    }    return (b3 << 24) + (b2 << 16) + (b1 << 8)+ b0;  }  if (fEncoding == UCS2BE) {    return (b0 << 8) + b1;  }  return (b1 << 8) + b0;}  }
class C{  private static boolean equal(Class c1,Class c2){  return c1.equals(c2) || c1.getName().equals(c2.getName());}  }
class C{  final public static int insertCollection(V v,Class<? extends Bean> t){  Table mapping=(Table)t.getAnnotation(Table.class);  if (mapping == null) {    if (log.isErrorEnabled())     log.error("mapping missed in [" + t + "] declaretion");    return -1;  }  if (!X.isEmpty(mapping.name())) {    return insertCollection(mapping.name(),v);  }  return -1;}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public void stop(){  engine.stop();}  }
class C{  private String statusKey(DataApproval approval){  return approval == null ? null : approval.getOrganisationUnit().getId() + IdentifiableObjectUtils.SEPARATOR + approval.getPeriod().getId()+ IdentifiableObjectUtils.SEPARATOR+ approval.getWorkflow().getId();}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapPilotPermitCustomProperty && getId().equals(((AirMapPilotPermitCustomProperty)o).getId());}  }
class C{  private void checkIfNext(){  for (; _pos != null; _pos=_templates.next(_pos)) {    TemplateCacheInfo pTemplate=_pos.getSubject();    if (pTemplate == null)     continue;    if (pTemplate.m_TemplateHolder.isDeleted())     continue;    _currentTemplate=pTemplate;    _pos=_templates.next(_pos);    return;  }  _currentTemplate=null;}  }
class C{  public static int exportReadName2WeightedTaxonPath(Director dir,File file,ProgressListener progressListener) throws IOException {  int totalOut=0;  try {    final Document doc=dir.getDocument();    final IConnector connector=doc.getConnector();    try (IReadBlockIterator it=connector.getAllReadsIterator(doc.getMinScore(),doc.getMaxExpected(),true,true)){      progressListener.setMaximum(it.getMaximumProgress());      progressListener.setProgress(0);      try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){        while (it.hasNext()) {          IReadBlock readBlock=it.next();          final BitSet activeMatchesForTaxa=new BitSet();          boolean hasLowComplexity=readBlock.getComplexity() > 0 && readBlock.getComplexity() + 0.01 < doc.getMinComplexity();          final List<Pair<Integer,Float>> path;          if (hasLowComplexity) {            path=new LinkedList<>();            Pair<Integer,Float> pair=new Pair<>(IdMapper.LOW_COMPLEXITY_ID,100f);            path.add(pair);          } else {            ActiveMatches.compute(doc.getMinScore(),doc.getTopPercent(),doc.getMaxExpected(),doc.getMinPercentIdentity(),readBlock,Classification.Taxonomy,activeMatchesForTaxa);            path=TaxonPathAssignment.computeTaxPath(activeMatchesForTaxa,readBlock);          }          w.write(readBlock.getReadName() + "; ;");          for (          Pair<Integer,Float> pair : path) {            String taxonName=TaxonomyData.getName2IdMap().get(pair.getFirst());            if (TaxonomyData.getTaxonomicRank(pair.getFirst()) != 0) {              w.write(" " + taxonName + "; "+ (int)(float)pair.getSecond()+ ";");            }          }          w.write("\n");          totalOut++;          progressListener.setProgress(it.getProgress());        }      }     }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalOut;}  }
class C{  public void onStackAnimationStarted(){  if (mStackAnimationCount == 0)   super.onAnimationStarted();  mStackAnimationCount++;}  }
class C{  public RiddersSolver(){  this(DEFAULT_ABSOLUTE_ACCURACY);}  }
class C{  public Future<DLSN> writeControlRecord(final LogRecord record){  record.setControl();  return write(record);}  }
class C{  public Hex(String csName){  charsetName=csName;}  }
class C{  public static void stopPrisonTask(Player player,boolean save){  Future<?> prisonTask=player.getController().getTask(TaskId.PRISON);  if (prisonTask != null) {    if (save) {      long delay=player.getPrisonTimer();      if (delay < 0) {        delay=0;      }      player.setPrisonTimer(delay);    }    player.getController().cancelTask(TaskId.PRISON);  }}  }
class C{  private void renderSymbol(MapContent mapContent,StyledLayer styledLayer,Style style){switch (geometryType) {case RASTER:    mapContent.addLayer(new GridReaderLayer(gridCoverage,(org.geotools.styling.Style)style));  break;case POINT:case LINE:case POLYGON:{  FeatureSource<SimpleFeatureType,SimpleFeature> tmpFeatureList=null;  if (styledLayer instanceof UserLayer) {    if (userLayerFeatureListMap != null) {      tmpFeatureList=userLayerFeatureListMap.get(styledLayer);    }  } else {    tmpFeatureList=featureList;  }  if (tmpFeatureList != null) {    mapContent.addLayer(new FeatureLayer(tmpFeatureList,(org.geotools.styling.Style)style));  }}break;default :break;}wmsEnvVarValues.setMapBounds(mapBounds);EnvironmentVariableManager.getInstance().setWMSEnvVarValues(wmsEnvVarValues);}  }
class C{  public boolean simplify_sccs(){  return soot.PhaseOptions.getBoolean(options,"simplify-sccs");}  }
class C{  public void remove(TransactionLocal key){  Entry[] tab=table;  int len=tab.length;  int i=key.hashCode & (len - 1);  for (Entry e=tab[i]; e != null; e=tab[i=nextIndex(i,len)]) {    if (e.key == key) {      expungeStaleEntry(i);      return;    }  }}  }
class C{  public List<CodeMatchResult> findMatchingLines(List<String> code,List<String> matchTerms,boolean highlightLine){  List<CodeMatchResult> resultLines=new LinkedList<>();  int codesize=code.size();  int searchThrough=codesize > this.MAXLINEDEPTH ? this.MAXLINEDEPTH : codesize;  int matching=0;  for (int i=0; i < searchThrough; i++) {    String matchRes=code.get(i).toLowerCase().replaceAll("\\s+"," ");    matching=0;    for (    String matchTerm : matchTerms) {      if (matchRes.contains(matchTerm.replace("*",""))) {        matching++;      }    }    if (matching != 0) {      resultLines.add(new CodeMatchResult(code.get(i),true,false,matching,i));    }    if (resultLines.size() >= MATCHLINES) {      break;    }  }  List<CodeMatchResult> adajacentLines=new LinkedList<>();  for (  CodeMatchResult cmr : resultLines) {    int linenumber=cmr.getLineNumber();    int previouslinenumber=linenumber - 1;    int nextlinenumber=linenumber + 1;    if (previouslinenumber >= 0 && !this.resultExists(resultLines,previouslinenumber)) {      adajacentLines.add(new CodeMatchResult(code.get(previouslinenumber),false,false,0,previouslinenumber));    }    if (nextlinenumber < codesize && !this.resultExists(resultLines,nextlinenumber)) {      adajacentLines.add(new CodeMatchResult(code.get(nextlinenumber),false,false,0,nextlinenumber));    }  }  resultLines.addAll(adajacentLines);  if (resultLines.size() == 0) {    searchThrough=codesize > MATCHLINES ? MATCHLINES : codesize;    for (int i=0; i < searchThrough; i++) {      resultLines.add(new CodeMatchResult(code.get(i),false,false,0,i));    }  }  if (highlightLine) {    for (    CodeMatchResult cmr : resultLines) {      if (cmr.isMatching()) {        cmr.setLine(this.highlightLine(cmr.getLine(),matchTerms));      } else {        cmr.setLine(StringEscapeUtils.escapeHtml4(cmr.getLine()));      }    }  } else {    for (    CodeMatchResult cmr : resultLines) {      cmr.setLine(StringEscapeUtils.escapeHtml4(cmr.getLine()));    }  }  return resultLines;}  }
class C{  public static boolean validColourString(String htmlColour){  if (htmlColour == null) {    return false;  }  if (htmlColourPattern == null) {    htmlColourPattern=Pattern.compile(HEX_PATTERN);  }  Matcher matcher=htmlColourPattern.matcher(htmlColour);  return matcher.matches();}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  private long trySync(String oldLibrary,String newLibrary){  JSONObject request=new JSONObject();  try {    request.put("old_library",oldLibrary);    request.put("new_library",newLibrary);    request.put("favorites_only",favoritesOnly);    JSONObject results=new JSONObject(httpClient.postRequest(syncEndpoint,Collections.<String,String>emptyMap(),request.toString()));    if (!results.getBoolean("success")) {      throw new RuntimeException("Sync failed!");    }    return results.getLong("task_id");  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Exception making HTTP request!");  }catch (  JSONException e) {    throw new RuntimeException(e);  }}  }
class C{  public AudioReorderQuery before(Integer value){  return unsafeParam("before",value);}  }
class C{  public MarketGetCommentsQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){  super(client,"market.getComments",GetCommentsResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public void executeLsPacket(Runnable pkt){  execute(pkt);}  }
class C{  public final static HeaderElement[] parseElements(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=SaveHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  SaveParserCursor cursor=new SaveParserCursor(0,value.length());  return parser.parseElements(buffer,cursor);}  }
class C{  public int size(){  return 3;}  }
class C{  public void intersection(Rectangle2D r){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(r);    status=INUSE;    return;  }  clip[0]=Math.max(clip[0],r.getMinX());  clip[1]=Math.max(clip[1],r.getMinY());  clip[6]=Math.min(clip[6],r.getMaxX());  clip[7]=Math.min(clip[7],r.getMaxY());}  }
class C{  public static <T>MaybeSubject<T> create(){  return new MaybeSubject<T>();}  }
class C{  @Override public void onUserCancel(){  if (checkCB != null) {    checkCB.onUserCancel();  }  Recycler.release(this);}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(this.getModifiers());}  }
class C{  private List<Expression> createDashArrayList(float[] dashes){  List<Expression> dashExpressionList=null;  if (dashes != null) {    dashExpressionList=new ArrayList<Expression>();    for (    float dashValue : dashes) {      dashExpressionList.add(getFilterFactory().literal(dashValue));    }  }  return dashExpressionList;}  }
class C{  public InstanceFieldRef newInstanceFieldRef(Value base,SootFieldRef f){  return new JInstanceFieldRef(base,f);}  }
class C{  @Override public int lastIndexOf(Object object){  return mItems.lastIndexOf(object);}  }
class C{  @Override public void addStats(int foodLevelIn,float foodSaturationModifier){  int currentFoodLevel=this.getFoodLevel();  setFoodLevel(Math.min(foodLevelIn + currentFoodLevel,60));  int overWeight=foodLevelIn - (this.getFoodLevel() - currentFoodLevel);  if (overWeight > 0) {    setSaturation(Math.min(this.getSaturationLevel() + (float)overWeight * foodSaturationModifier / 3.0F,20.0F));  }}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  public DeferredDocumentImpl(boolean namespacesEnabled){  this(namespacesEnabled,false);}  }
class C{  public void moveTo(int offset){  cursor=offset;}  }
class C{  @Override public BlockPos next(){  return hasNext() ? diagonalMode ? centerPosition.add(allDirections[iterationStep++]) : centerPosition.add(mainDirections[iterationStep++]) : null;}  }
class C{  protected static String resolveSnapshotName(Snapshot snapshot){  String persistedName=resolveName(snapshot,null);  if (persistedName != null)   return persistedName;  File file=snapshot.getFile();  if (file == null)   return snapshot.toString();  String fileName=file.getName();  SnapshotCategory category=snapshot.getCategory();  String name="[" + category.getPrefix() + "] "+ fileName;  if (category.isSnapshot(file)) {    String timeStamp=category.getTimeStamp(fileName);    if (timeStamp != null)     name="[" + category.getPrefix() + "] "+ timeStamp;  }  return name;}  }
class C{  public static boolean hasJellyBeanMr2(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;}  }
class C{  public void cancelAllTasks(){  for (  int i : tasks.keySet()) {    Future<?> task=tasks.get(i);    if (task != null && i != TaskId.RESPAWN.ordinal()) {      task.cancel(false);    }  }  tasks.clear();}  }
class C{  public void removeFirst(){  remove(innerChain.getFirst());}  }
class C{  public Builder color(String color){  this.color=color;  return this;}  }
class C{  private int pathPositionAtLevel(DataApprovalLevel level){  return pathPositionAtLevel(level.getOrgUnitLevel());}  }
class C{  public static boolean hasValueDeadbandTypeChanged(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag){  return sourceDataTag.getValueDeadbandType() != oldSourceDataTag.getValueDeadbandType();}  }
class C{  public static java.sql.Time toSqlTime(String time){  java.util.Date newDate=toDate("1/1/1970",time);  if (newDate != null) {    return new java.sql.Time(newDate.getTime());  } else {    return null;  }}  }
class C{  public void pack(){  cellIds.trimToSize();}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_collection);  initModel();  initPresenter();}  }
class C{  @Override public IdentityLinkEntity involveUser(ExecutionEntity executionEntity,String userId,String type){  for (  IdentityLinkEntity identityLink : executionEntity.getIdentityLinks()) {    if (identityLink.isUser() && identityLink.getUserId().equals(userId)) {      return identityLink;    }  }  return addIdentityLink(executionEntity,userId,null,type);}  }
class C{  public static String formatRuleBasedAmount(double amount,String rule,Locale locale){  String ruleSet=rbnfRuleSets.get(locale);  if (ruleSet == null) {    Debug.logWarning("Cannot format rule based amount for locale " + locale.toString() + " because rule set for that locale does not exist",module);    return "";  }  RuleBasedNumberFormat formatter=new RuleBasedNumberFormat(ruleSet,locale);  String result="";  try {    result=formatter.format(amount,rule);  } catch (  Exception e) {    Debug.logError(e,"Failed to format amount " + amount + " using rule "+ rule,module);  }  return result;}  }
class C{  public void beforeAuthentication(com.gigaspaces.security.service.SecurityContext securityContext) throws RemoteException {  try {    if (_filterManager._isFilter[FilterOperationCodes.BEFORE_AUTHENTICATION]) {      SpaceContext sc=new SpaceContext(securityContext);      _filterManager.invokeFilters(FilterOperationCodes.BEFORE_AUTHENTICATION,sc,null);    }  } catch (  RuntimeException re) {    throw re;  }catch (  Exception e) {    throw new RemoteException("Exception occurred invoking before-authentication filter",e);  }}  }
class C{  public NotesEditQuery privacyView(List<String> value){  return unsafeParam("privacy_view",value);}  }
class C{  @Override public boolean isEnabled(){  if (inlineGML != null) {    return inlineGML.isEnabled();  }  return false;}  }
class C{  public FocusControl(int clicks){  ccount=clicks;}  }
class C{  public VideoRecordReader(int height,int width,List<String> labels){  this(height,width,false);  this.labels=labels;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_DONE_GUILD_SUBMASTER(String value0){  return new SM_SYSTEM_MESSAGE(1400902,value0);}  }
class C{  public void rotate(PointF p1,PointF p2,float angle){  float px=p1.x;  float py=p1.y;  float ox=p2.x;  float oy=p2.y;  p1.x=(float)(Math.cos(angle) * (px - ox) - Math.sin(angle) * (py - oy) + ox);  p1.y=(float)(Math.sin(angle) * (px - ox) + Math.cos(angle) * (py - oy) + oy);}  }
class C{  private void addLegionMember(Legion legion,Player player){  addLegionMember(legion,player,LegionRank.VOLUNTEER);}  }
class C{  public boolean isHidden(final List<WebElement> elements,int timeout){  return isConditionMet(not(visibilityOfAllElements(elements)),timeout);}  }
class C{  public void publishEvent(final EventTranslator<T> eventTranslator){  ringBuffer.publishEvent(eventTranslator);}  }
class C{  public SiteAdminPage deactivatePage(String title){  grid.deactivatePage(title);  waitForPageActivationStatus(title,ActivationStatus.DEACTIVATED);  return this;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  protected static @Nullable Object parseValueExpression(@Nullable GrExpression gre){  if (gre instanceof GrLiteral) {    return ((GrLiteral)gre).getValue();  } else   if (gre instanceof GrListOrMap) {    GrListOrMap grLom=(GrListOrMap)gre;    if (grLom.isMap()) {      return null;    }    List<Object> values=Lists.newArrayList();    for (    GrExpression subexpression : grLom.getInitializers()) {      Object subValue=parseValueExpression(subexpression);      if (subValue != null) {        values.add(subValue);      }    }    return values;  } else {    return null;  }}  }
class C{  public UnivariatePointValuePair(final double point,final double value){  this.point=point;  this.value=value;}  }
class C{  public static void assertSame(Complex expected,Complex actual){  assertSame(expected.getReal(),actual.getReal());  assertSame(expected.getImaginary(),actual.getImaginary());}  }
class C{  public PokemonTable(final PokemonGo go){  setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);  setAutoResizeMode(AUTO_RESIZE_OFF);  setRowHeight(getRowHeight() + ROW_HEIGHT_PADDING * 2);  ptm=new PokemonTableModel(go,new ArrayList<>(),this);  setModel(ptm);  final int sortColIndex1=config.getInt(ConfigKey.SORT_COLINDEX_1);  final int sortColIndex2=config.getInt(ConfigKey.SORT_COLINDEX_2);  SortOrder sortOrder1;  SortOrder sortOrder2;  try {    sortOrder1=SortOrder.valueOf(config.getString(ConfigKey.SORT_ORDER_1));    sortOrder2=SortOrder.valueOf(config.getString(ConfigKey.SORT_ORDER_2));  } catch (  final IllegalArgumentException e) {    e.printStackTrace();    sortOrder1=SortOrder.ASCENDING;    sortOrder2=SortOrder.ASCENDING;  }  final TableRowSorter<TableModel> trs=new TableRowSorter<>(ptm);  for (  final PokeColumn column : PokeColumn.values()) {    trs.setComparator(column.id,column.getComparator());  }  setRowSorter(trs);  final List<SortKey> sortKeys=new ArrayList<>();  sortKeys.add(new SortKey(sortColIndex1,sortOrder1));  sortKeys.add(new SortKey(sortColIndex2,sortOrder2));  trs.setSortKeys(sortKeys);  trs.addRowSorterListener(null);  for (  final PokeColumn column : PokeColumn.values()) {    columnModel.getColumn(column.id).setCellRenderer(column.getCellRenderer());  }}  }
class C{  void appendParticle(StringBuffer buffer){switch (fType) {case PARTICLE_EMPTY:    buffer.append("EMPTY");  break;case PARTICLE_ELEMENT:buffer.append(fValue.toString());break;case PARTICLE_WILDCARD:buffer.append('(');buffer.append(fValue.toString());buffer.append(')');break;case PARTICLE_MODELGROUP:buffer.append(fValue.toString());break;}}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public final boolean canGetString(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetString());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_3_MINING(String value0){  return new SM_SYSTEM_MESSAGE(1330018,value0);}  }
class C{  public void ensureCleaningUpDyingTabs(long time){  finishAnimation(time);}  }
class C{  public static double distanceInf(Vector2D p1,Vector2D p2){  return p1.distanceInf(p2);}  }
class C{  private StreamedCollection<TimeSeriesCollection> create_tsdata_(){  return file_support.create_tsdata(CHAIN_WIDTH);}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getReadNegativeStrandFlag()) {      return false;    }  } else {    if (!record.getReadNegativeStrandFlag()) {      return false;    }  }  return true;}  }
class C{  public static final String[] guessStringsFromLine(LogChannelInterface log,String line,String delimiter,String enclosure,String escapeCharacter) throws KettleException {  List<String> strings=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  String pol;  try {    if (line == null) {      return null;    }    int pos=0;    int length=line.length();    boolean dencl=false;    int lenEncl=(enclosure == null ? 0 : enclosure.length());    int lenEsc=(escapeCharacter == null ? 0 : escapeCharacter.length());    while (pos < length) {      int from=pos;      int next;      boolean enclFound;      boolean containsEscapedEnclosures=false;      boolean containsEscapedSeparators=false;      if (lenEncl > 0 && line.substring(from,from + lenEncl).equalsIgnoreCase(enclosure)) {        if (log.isRowLevel()) {          log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRow",line.substring(from,from + lenEncl)));        }        enclFound=true;        int p=from + lenEncl;        boolean isEnclosure=lenEncl > 0 && p + lenEncl < length && line.substring(p,p + lenEncl).equalsIgnoreCase(enclosure);        boolean isEscape=lenEsc > 0 && p + lenEsc < length && line.substring(p,p + lenEsc).equalsIgnoreCase(escapeCharacter);        boolean enclosureAfter=false;        if ((isEnclosure || isEscape) && p < length - 1) {          String strnext=line.substring(p + lenEncl,p + 2 * lenEncl);          if (strnext.equalsIgnoreCase(enclosure)) {            p++;            enclosureAfter=true;            dencl=true;            if (isEscape) {              containsEscapedEnclosures=true;            }          }        }        while ((!isEnclosure || enclosureAfter) && p < line.length()) {          p++;          enclosureAfter=false;          isEnclosure=lenEncl > 0 && p + lenEncl < length && line.substring(p,p + lenEncl).equals(enclosure);          isEscape=lenEsc > 0 && p + lenEsc < length && line.substring(p,p + lenEsc).equals(escapeCharacter);          if ((isEnclosure || isEscape) && p < length - 1) {            String strnext=line.substring(p + lenEncl,p + 2 * lenEncl);            if (strnext.equals(enclosure)) {              p++;              enclosureAfter=true;              dencl=true;              if (isEscape) {                containsEscapedEnclosures=true;              }            }          }        }        if (p >= length) {          next=p;        } else {          next=p + lenEncl;        }        if (log.isRowLevel()) {          log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.EndOfEnclosure","" + p));        }      } else {        enclFound=false;        boolean found=false;        int startpoint=from;        do {          next=line.indexOf(delimiter,startpoint);          if (lenEsc > 0 && next - lenEsc > 0) {            String before=line.substring(next - lenEsc,next);            if (escapeCharacter != null && escapeCharacter.equals(before)) {              startpoint=next + 1;              containsEscapedSeparators=true;            } else {              found=true;            }          } else {            found=true;          }        } while (!found && next >= 0);      }      if (next == -1) {        next=length;      }      if (enclFound) {        pol=line.substring(from + lenEncl,next - lenEncl);        if (log.isRowLevel()) {          log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.EnclosureFieldFound","" + pol));        }      } else {        pol=line.substring(from,next);        if (log.isRowLevel()) {          log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.NormalFieldFound","" + pol));        }      }      if (dencl) {        StringBuilder sbpol=new StringBuilder(pol);        int idx=sbpol.indexOf(enclosure + enclosure);        while (idx >= 0) {          sbpol.delete(idx,idx + (enclosure == null ? 0 : enclosure.length()));          idx=sbpol.indexOf(enclosure + enclosure);        }        pol=sbpol.toString();      }      if (containsEscapedEnclosures) {        String replace=escapeCharacter + enclosure;        String replaceWith=enclosure;        pol=Const.replace(pol,replace,replaceWith);      }      if (containsEscapedSeparators) {        String replace=escapeCharacter + delimiter;        String replaceWith=delimiter;        pol=Const.replace(pol,replace,replaceWith);      }      strings.add(pol);      pos=next + delimiter.length();    }    if (pos == length) {      if (log.isRowLevel()) {        log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.EndOfEmptyLineFound"));      }      strings.add("");    }  } catch (  Exception e) {    throw new KettleException(BaseMessages.getString(PKG,"CsvInput.Log.Error.ErrorConvertingLine",e.toString()),e);  }  return strings.toArray(new String[strings.size()]);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Modifier fullCopy(){  Modifier tree=(Modifier)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private VarAdmin mergeVar(VarAdmin var){  boolean changed=true;  Set<VarAdmin> varsToMerge=new HashSet<>();  while (changed) {    List<VarAdmin> vars=varsByName.getOrDefault(var.getName(),Lists.newArrayList());    vars.add(var);    boolean byNameChange=varsToMerge.addAll(vars);    var=Patterns.mergeVars(varsToMerge);    boolean byIdChange=var.getId().map(null).orElse(false);    var=Patterns.mergeVars(varsToMerge);    changed=byNameChange | byIdChange;  }  return var;}  }
class C{  public boolean supportsDelete(){  return true;}  }
class C{  public static synchronized void init(ControllerConf config){  if (DID_INIT)   return;  METRICS_REPORTER_INSTANCE=new HelixKafkaMirrorMakerMetricsReporter(config);  DID_INIT=true;}  }
class C{  public static Zmat bai(Zmat B,Zltmat L) throws JampackException {  int i, j, k;  Z x=new Z();  L.getProperties();  B.getProperties();  if (L.nr != L.nc)   throw new JampackException("Rectangular matrix.");  if (L.nr != B.nc)   throw new JampackException("Inconsistent dimensions.");  return H.o(Solve.ahib(L,H.o(B)));}  }
class C{  public boolean implicit_entry(){  return soot.PhaseOptions.getBoolean(options,"implicit-entry");}  }
class C{  public List<SootMethod> resolveConcreteDispatch(List<Type> classes,SootMethod m){  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  checkState();  Set<SootMethod> s=new ArraySet<SootMethod>();  for (  Type cls : classes) {    if (cls instanceof RefType)     s.add(resolveConcreteDispatch(((RefType)cls).getSootClass(),m)); else     if (cls instanceof ArrayType) {      s.add(resolveConcreteDispatch((RefType.v("java.lang.Object")).getSootClass(),m));    } else     throw new RuntimeException("Unable to resolve concrete dispatch of type " + cls);  }  return Collections.unmodifiableList(new ArrayList<SootMethod>(s));}  }
class C{  static void printarray(PrintStream out,String name,int expectedLen,double[][] array2d){  out.println(name);  MathUtils.checkDimension(expectedLen,array2d.length);  out.println(TABLE_START_DECL + " ");  int i=0;  for (  double[] array : array2d) {    out.print("        {");    for (    double d : array) {      out.printf("%-25.25s",format(d));    }    out.println("}, // " + i++);  }  out.println(TABLE_END_DECL);}  }
class C{  public boolean isVariable(){  return false;}  }
class C{  private static String buildMessage(String reason,String description,int statusCode,DruidQuery<?> druidQuery,Throwable cause,ObjectWriter objectWriter){  String druidQueryString;  try {    druidQueryString=objectWriter.writeValueAsString(druidQuery);  } catch (  JsonProcessingException jse) {    try {      druidQueryString=druidQuery.toString();    } catch (    Exception e) {      LOG.warn("Error invoking a druid query's toString.",e);      druidQueryString="QUERY'S `toString` FAILED";    }    LOG.warn(String.format("Failed to serialize druid query %s",druidQueryString),jse);  }  return String.format("reason: %s, description: %s, statusCode: %d, druid query: %s, cause: %s",reason,description,statusCode,druidQueryString,cause);}  }
class C{  public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent){  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,Collections.<Integer>emptyList());}  }
class C{  public MannWhitneyUTest(final NaNStrategy nanStrategy,final TiesStrategy tiesStrategy){  naturalRanking=new NaturalRanking(nanStrategy,tiesStrategy);}  }
class C{  public boolean collideWith(KeyChain other){  if (keys.size() > other.keys.size()) {    return Collections.indexOfSubList(keys,other.keys) == 0;  } else {    return Collections.indexOfSubList(other.keys,keys) == 0;  }}  }
class C{  public static HystrixCommand.Setter buildSetter(){  return buildSetter(new HystrixSetter());}  }
class C{  public MarketEditAlbumQuery mainAlbum(Boolean value){  return unsafeParam("main_album",value);}  }
class C{  @Override public Alert alert(){  return targetLocator.alert();}  }
class C{  public static ScrollableContainer createScrollableContainer(JComponent contents){  ScrollableContainer container=new ScrollableContainer(contents,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  container.setViewportBorder(BorderFactory.createEmptyBorder(0,0,0,5));  container.setBorder(BorderFactory.createEmptyBorder(10,10,0,5));  return container;}  }
class C{  public PhotosGetCommentsQuery(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.getComments",GetCommentsResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_GM_PETITION_OK_TO_GM(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300543,value0,value1);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  protected void calcMinMax(S e){  if (e == null)   return;  calcMinMaxX(e);  calcMinMaxY(e);}  }
class C{  public void smoothOpenRightMenu(int position){  smoothOpenMenu(position,RIGHT_DIRECTION,SwipeMenuLayout.DEFAULT_SCROLLER_DURATION);}  }
class C{  public Bundler putStringArrayList(String key,ArrayList<String> value){  bundle.putStringArrayList(key,value);  return this;}  }
class C{  public static void prepareMatrix(MatrixInterface adjMatrix){  if (adjMatrix instanceof SparseMatrix) {    prepareSparseMatrix((SparseMatrix)adjMatrix);  } else {    for (int i=0; i != adjMatrix.getRowsCount(); i++) {      double sum=0.0;      for (int j=0; j != adjMatrix.getColsCount(); j++) {        sum+=adjMatrix.get(i,j);      }      if (sum != 0.0) {        for (int j=0; j != adjMatrix.getColsCount(); j++)         adjMatrix.set(i,j,adjMatrix.get(i,j) / sum);      } else {        double tmp=1.0 / adjMatrix.getColsCount();        for (int j=0; j != adjMatrix.getColsCount(); j++) {          adjMatrix.set(i,j,tmp);        }      }    }    adjMatrix.inv();  }}  }
class C{  private void outputText(){  SLDWriterInterface sldWriter=SLDWriterFactory.createWriter(outputFormat);  String encodedSLD=sldWriter.encodeSLD(resourceLocator,displayedSld);  sldSourceTextArea.setText(encodedSLD);}  }
class C{  public List<GenericValue> queryList() throws GenericEntityException {  return query(null);}  }
class C{  public boolean interiorIntersects(S2Cap other){  return !complement().contains(other);}  }
class C{  public final boolean canGetInt(String field){  return m_table.canGetInt(field);}  }
class C{  public void fire(){}  }
class C{  public float rating(){  return mRating;}  }
class C{  public EnvVarComboBoxModel(EnvironmentManagerInterface envVarMgr){  if (envVarMgr != null) {    list=envVarMgr.getEnvVarTypeList();  }}  }
class C{  private void skipToNewlineToken(){  while (!builder.eof()) {    if (currentToken() == ProjectViewTokenType.NEWLINE) {      return;    }    builder.advanceLexer();  }}  }
class C{  public boolean isVariable(){  return false;}  }
class C{  public TShortArrayList(int capacity){  _data=new short[capacity];  _pos=0;}  }
class C{  public static boolean pickDirectory(Activity activity,File startPath,int requestCode){  PackageManager packageMgr=activity.getPackageManager();  for (  String[] intent : PICK_DIRECTORY_INTENTS) {    String intentAction=intent[0];    String uriPrefix=intent[1];    Intent startIntent=new Intent(intentAction).putExtra("org.openintents.extra.TITLE",activity.getString(R.string.save_as)).setData(Uri.parse(uriPrefix + startPath.getPath()));    try {      if (startIntent.resolveActivity(packageMgr) != null) {        activity.startActivityForResult(startIntent,requestCode);        return true;      }    } catch (    ActivityNotFoundException e) {      Log.w(FileHelper.class.getSimpleName(),e.getMessage(),e);    }  }  return false;}  }
class C{  public static void checkDuplicatedValue(List<ExecutableElement> elements,Class clazz){  Set<String> values=new HashSet<>();  for (  ExecutableElement method : elements) {    List<String> value=getValueFromAnnotation(method,clazz);    if (!values.addAll(value)) {      throw new DuplicatedValueException(value,method,clazz);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_GUARD_MODE(int value0){  return new SM_SYSTEM_MESSAGE(1200009,calculateNameId(value0));}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCacheManager.newFile(key));}  }
class C{  public static final Edge locateEdgeInGraph(UniqueVertexGraph gGraph,Vertex vHead,Vertex vTail){  Edge eRes=locateDirectedEdgeInGraph(gGraph,vHead,vTail);  return eRes == null ? locateDirectedEdgeInGraph(gGraph,vTail,vHead) : eRes;}  }
class C{  public LocalFileSystemStore(SerializationService serial){  super(serial);}  }
class C{  private void initPresenter(){  this.fragmentManagePresenter=new FragmentManageImplementor(fragmentManageModel);  this.messageManagePresenter=new MessageManageImplementor(this);  this.meManagePresenter=new MeManageImplementor(this);  this.drawerPresenter=new DrawerImplementor(drawerModel,this);}  }
class C{  @Override public EnvVar addNewEnvVar(String name,Class<?> type,String value){  EnvVar envVar=null;  if (!exist(name)) {    envVar=new EnvVar(name,type,false);    envVar.setValue(value);    envVarList.add(envVar);  }  return envVar;}  }
class C{  void revalidateGrid(){  setSize((int)(cellWidth * alignment.getGapColumnContractor().getLayoutLength() + 0.5) + 3,(int)(cellHeight * alignment.getRowCompressor().getNumberRows() + 0.5) + 3);  setPreferredSize(getSize());  JScrollPane scrollPane=getScrollPane();  revalidate();  scrollPane.getHorizontalScrollBar().setMaximum((int)(Math.round(getPreferredSize().getWidth())));  scrollPane.getVerticalScrollBar().setMaximum((int)(Math.round(getPreferredSize().getHeight())));  selectedBlock.fireSelectionChanged();}  }
class C{  public boolean isUptoDate(){  return isUptoDate;}  }
class C{  private void handleCertificateRequest(CertificateRequest request){  if (request.getRenew()) {    val certificateResponse=requestHandler.requestCertificate(request.getDomains());    secretManager.updateCertificate(namespace,request.getSecretName(),certificateResponse);  } else {    val certificateResponse=requestHandler.requestCertificate(request.getDomains());    secretManager.insertCertificate(namespace,request.getSecretName(),certificateResponse);  }}  }
class C{  public DocumentNGramDistroGraph(){  InitGraphs();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("select what=all;");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_NOTIFY_LOGOFF_BUDDY(String value0){  return new SM_SYSTEM_MESSAGE(1300916,value0);}  }
class C{  public void releaseScan(){  if (!_singleObjectResult && _pos != null)   _list.freeSLHolder(_pos);}  }
class C{  public static Color lerp(Color a,Color b,double t){  return new Color(lerp(a.getRed(),b.getRed(),t),lerp(a.getGreen(),b.getGreen(),t),lerp(a.getBlue(),b.getBlue(),t),lerp(a.getAlpha(),b.getAlpha(),t));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PARTY_MATCH_ALREADY_SENT_DECLINE(String value0){  return new SM_SYSTEM_MESSAGE(1400241,value0);}  }
class C{  public static boolean isPresent(Rule rule){  if (rule == null) {    return false;  }  return (!isNotSet(rule.getMinScaleDenominator()) || !isNotSet(rule.getMaxScaleDenominator()));}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public Point2D convertReferenceToWindow(Point2D refPoint){  if (scrollBackReferenceRect == null)   return null; else   return new Point2D.Double(Math.round(refPoint.getX() * scrollBackReferenceRect.getWidth() + scrollBackReferenceRect.getX()),Math.round(refPoint.getY() * scrollBackReferenceRect.getHeight() + scrollBackReferenceRect.getY()));}  }
class C{  public Vector3f crossLocal(Vector3f v){  return crossLocal(v.x,v.y,v.z);}  }
class C{  private double computeReferenceAngle(){  double r1=((SandboxBody)this.cmbBody1.getSelectedItem()).getTransform().getRotation();  double r2=((SandboxBody)this.cmbBody2.getSelectedItem()).getTransform().getRotation();  return r1 - r2;}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public final ProgressEvent updateSubtask(String sSubtaskName){  SubtaskName=sSubtaskName;  return this;}  }
class C{  public ZWaveAlarmSilenceCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public PollsEditQuery editAnswers(String value){  return unsafeParam("edit_answers",value);}  }
class C{  public VideoEditCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static Inventory create(InventoryHolder holderOrNull,InventoryType type,String title,int size){  if (type != InventoryType.CHEST && type != InventoryType.ENDER_CHEST) {    throw new UnsupportedOperationException(Pokkit.NAME + " doesn't support custom inventories of type " + type);  }  if (size < 1) {    throw new IllegalArgumentException("Invalid inventory size: " + size);  }  NukkitCustomInventory nukkit=new NukkitCustomInventory(title,holderOrNull);  nukkit.setSize(size);  return new PokkitCustomInventory(nukkit);}  }
class C{  public void initialise() throws CarbonDataWriterException {  fileManager=new FileManager();  fileManager.setName(new File(this.storeLocation).getName());  setWritingConfiguration();}  }
class C{  public Object clone(){  AbstractInNode cloned=(AbstractInNode)super.clone();  if (getRightChild() != null && getRightChild().isInnerQuery())   cloned.setRightChild((InnerQueryNode)getRightChild().clone()); else {    HashSet<LiteralNode> clonedSet=new HashSet<LiteralNode>();    for (    LiteralNode value : valuesList) {      clonedSet.add((LiteralNode)value.clone());    }    cloned.setValuesList(clonedSet);  }  return cloned;}  }
class C{  public boolean containsKey(int key){  return indexOfKey(key) >= 0;}  }
class C{  public void removeEquipment(int pieceIndex,boolean updateSkills){  if (pieceIndex == TALISMAN) {    equipment[pieceIndex]=null;  } else {    equipment[pieceIndex]=null;  }  for (int i=0; i < decorations[pieceIndex].length; i++) {    decorations[pieceIndex][i]=null;  }  if (updateSkills) {    updateSkillTreePointsSets();  }}  }
class C{  private void finishAnimation(long time){  if (mTabAnimations != null)   mTabAnimations.updateAndFinish();  if (mViewAnimations != null)   mViewAnimations.end();  if (mTabAnimations != null || mViewAnimations != null)   mLayout.onStackAnimationFinished();switch (mOverviewAnimationType) {case ENTER_STACK:    mLayout.uiDoneEnteringStack();  break;case FULL_ROLL:springBack(time);break;case TAB_FOCUSED:case NEW_TAB_OPENED:break;case DISCARD_ALL:mLayout.uiDoneClosingAllTabs(mTabModel.isIncognito());cleanupStackTabState();break;case UNDISCARD:case DISCARD:if (mStackTabs != null) {for (int i=0; i < mStackTabs.length; ++i) {StackTab tab=mStackTabs[i];if (tab.isDying()) {mLayout.uiDoneClosingTab(time,tab.getId(),true,mTabModel.isIncognito());}}}cleanupStackTabState();break;default :break;}if (mOverviewAnimationType != OverviewAnimationType.NONE) {setScrollTarget(mScrollOffset,true);mOverviewAnimationType=OverviewAnimationType.NONE;}mTabAnimations=null;mViewAnimations=null;}  }
class C{  void onAddMedia(RTMedia media){  mAddedMedia.add(media);}  }
class C{  protected void wrapContent(){  if (!DO_WRAP) {    return;  }  if (mText == null) {    return;  }  Canvas c=new Canvas();  c.setFont(mFont);  FontMetrics fm=c.getFontMetrics(mFont);  String string=getText();  if (mToUpperCase) {    string=string.toUpperCase();  }  int tw=fm.stringWidth(string) + 2 * (mHorizontalPadding + mHorizontalMargin);  int th=fm.getMaxAscent() + 2 * fm.getMaxDescent() + 2 * (mVerticalPadding + mVerticalMargin);  mWidget.setWrapWidth(tw);  mWidget.setWrapHeight(th);  if (tw > mWidget.getMinWidth()) {    mWidget.setMinWidth(tw);  }  if (th > mWidget.getMinHeight()) {    mWidget.setMinHeight(th);  }  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setWidth(tw);  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setHeight(th);  }  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getWidth() <= mWidget.getMinWidth()) {      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getHeight() <= mWidget.getMinHeight()) {      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  int baseline=fm.getAscent() + fm.getMaxDescent() + mVerticalPadding+ mVerticalMargin;  mWidget.setBaselineDistance(baseline);}  }
class C{  public PhotosCreateAlbumQuery description(String value){  return unsafeParam("description",value);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("compute contrasts data=");  final String viewerName=np.getWordMatchesIgnoringCase(Basic.toString(ClassificationManager.getAllSupportedClassifications()," "));  np.matchIgnoreCase(";");  if (getViewer() instanceof GroupsViewer) {    final GroupsViewer viewer=(GroupsViewer)getViewer();    final Document doc=viewer.getDir().getDocument();    final Pair<String,String> twoGroupIds=viewer.getGroupsPanel().getTwoSelectedGroups();    if (twoGroupIds != null) {      ArrayList<String> first=new ArrayList<>();      for (      String sample : doc.getSampleNames()) {        if (doc.getSampleAttributeTable().getGroupId(sample).equals(twoGroupIds.getFirst()))         first.add(sample);      }      ArrayList<String> second=new ArrayList<>();      for (      String sample : doc.getSampleNames()) {        if (doc.getSampleAttributeTable().getGroupId(sample).equals(twoGroupIds.getSecond()))         second.add(sample);      }      final String[] samples=doc.getSampleNamesAsArray();      if (first.size() > 0 && second.size() > 0) {        Map<String,Map<String,Double>> data=new HashMap<>();        int numberOfNodes=0;        final IName2IdMap name2IdMap;        final ClassificationViewer classificationViewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(viewerName);        final Graph graph=classificationViewer.getGraph();        name2IdMap=classificationViewer.getClassification().getName2IdMap();        for (Node v=graph.getFirstNode(); v != null; v=graph.getNextNode(v)) {          int classId=(Integer)v.getInfo();          if (classId > 0) {            NodeData nd=(NodeData)v.getData();            for (int t=0; t < samples.length; t++) {              String sample=samples[t];              Map<String,Double> classId2Counts=data.get(sample);              if (classId2Counts == null) {                classId2Counts=new HashMap<>();                data.put(sample,classId2Counts);              }              classId2Counts.put(name2IdMap.get(classId),(double)(v.getOutDegree() > 0 ? nd.getAssigned()[t] : nd.getSummarized()[t]));            }            numberOfNodes++;          }        }        final Contrasts contrasts=new Contrasts();        try {          Basic.hideSystemErr();          contrasts.apply(data);        }  finally {          Basic.restoreSystemErr();        }        executeImmediately("show window=message;");        System.out.println("\nContrasts for " + viewerName + " assignments on "+ numberOfNodes+ " nodes:");        System.out.println("Group " + twoGroupIds.getFirst() + ": "+ Basic.toString(first,","));        System.out.println("Group " + twoGroupIds.getSecond() + ": "+ Basic.toString(second,","));        System.out.println("Results for group " + twoGroupIds.getFirst() + " vs group "+ twoGroupIds.getSecond()+ ":");        Map<String,Double> results=contrasts.getSplitScores(first.toArray(new String[first.size()]),second.toArray(new String[second.size()]));        SortedSet<Pair<Double,String>> sorted=new TreeSet<>();        System.out.println(String.format("%-20s\tScore",viewerName));        for (        String taxon : results.keySet()) {          double value=results.get(taxon);          if (value < -1)           value=-1; else           if (value > 1)           value=1;          sorted.add(new Pair<>(-value,taxon));        }        System.out.println("Number of results: " + sorted.size());        System.out.println("--------------------------------------");        for (        Pair<Double,String> pair : sorted) {          if ((-pair.getFirst()) >= 0)           System.out.println(String.format("%-20s\t %1.4f",pair.getSecond(),(-pair.getFirst()))); else           System.out.println(String.format("%-20s\t%1.4f",pair.getSecond(),(-pair.getFirst())));        }        System.out.println("--------------------------------------");      }    }    viewer.setIgnoreNextUpdateAll(true);  }}  }
class C{  private UpdateTMWithXLIFFResult updateTMWithXliff(String xliffContent,TMTextUnitVariant.Status importStatus,AbstractImportTranslationsStep abstractImportTranslationsStep) throws OkapiBadFilterInputException {  logger.debug("Configuring pipeline for localized XLIFF processing");  IPipelineDriver driver=new PipelineDriver();  driver.addStep(new RawDocumentToFilterEventsStep(new XLIFFFilter()));  driver.addStep(getConfiguredQualityStep());  IntegrityCheckStep integrityCheckStep=new IntegrityCheckStep();  driver.addStep(integrityCheckStep);  abstractImportTranslationsStep.setImportWithStatus(importStatus);  driver.addStep(abstractImportTranslationsStep);  logger.debug("Prepare FilterEventsWriterStep to use an XLIFFWriter with outputstream (allows only one doc to be processed)");  FilterEventsWriterStep filterEventsWriterStep=new FilterEventsWriterStep(new XLIFFWriter());  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();  filterEventsWriterStep.setOutputStream(byteArrayOutputStream);  filterEventsWriterStep.setOutputEncoding(StandardCharsets.UTF_8.toString());  driver.addStep(filterEventsWriterStep);  String targetLanguage=xliffUtils.getTargetLanguage(xliffContent);  LocaleId targetLocaleId=targetLanguage != null ? LocaleId.fromBCP47(targetLanguage) : LocaleId.EMPTY;  RawDocument rawDocument=new RawDocument(xliffContent,LocaleId.ENGLISH,targetLocaleId);  driver.addBatchItem(rawDocument,RawDocument.getFakeOutputURIForStream(),null);  logger.debug("Start processing batch");  driver.processBatch();  logger.debug("Get the Import report");  ImportTranslationsStepAnnotation importTranslationsStepAnnotation=rawDocument.getAnnotation(ImportTranslationsStepAnnotation.class);  UpdateTMWithXLIFFResult updateReport=new UpdateTMWithXLIFFResult();  updateReport.setXliffContent(StreamUtil.getUTF8OutputStreamAsString(byteArrayOutputStream));  updateReport.setComment(importTranslationsStepAnnotation.getComment());  return updateReport;}  }
class C{  public long length() throws IOException {  return position;}  }
class C{  @deprecated public char next(){  if (this.nextChar == -1) {    findNextChar();  }  this.curChar=this.nextChar;  this.nextChar=-1;  return (char)this.curChar;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MPHeal_TO_OTHER(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1201199,value0,num1);}  }
class C{  public boolean hasItems(){  return items != null && !items.isEmpty();}  }
class C{  public static void logResultsSeen(boolean wasPanelSeen,boolean wasTap){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchResultsSeen",wasPanelSeen ? RESULTS_SEEN : RESULTS_NOT_SEEN,RESULTS_SEEN_BOUNDARY);  logHistogramByGesture(wasPanelSeen,wasTap,"Search.ContextualSearchResultsSeenByGesture");}  }
class C{  @Override public List<BigInteger> toPartitions(Object obj,String type) throws PIRException {  List<BigInteger> parts=new ArrayList<>();  byte[] bytes=new byte[0];switch (type) {case BYTE:    byte value=obj instanceof String ? Byte.parseByte((String)obj) : (byte)obj;  bytes=new byte[]{value};break;case CHAR:char cvalue=obj instanceof String ? ((String)obj).charAt(0) : (char)obj;bytes=shortToBytes((short)cvalue);break;case SHORT:short svalue=obj instanceof String ? Short.parseShort((String)obj) : (short)obj;bytes=shortToBytes(svalue);break;case INT:int ivalue=obj instanceof String ? Integer.parseInt((String)obj) : (int)obj;bytes=intToBytes(ivalue);break;case LONG:long lvalue=obj instanceof String ? Long.parseLong((String)obj) : (long)obj;bytes=longToBytes(lvalue);break;case FLOAT:float fvalue=obj instanceof String ? Float.parseFloat((String)obj) : (float)obj;bytes=intToBytes(Float.floatToRawIntBits(fvalue));break;case DOUBLE:double dvalue=obj instanceof String ? Double.parseDouble((String)obj) : (double)obj;bytes=longToBytes(Double.doubleToRawLongBits(dvalue));break;case STRING:byte[] stringBytes;try {stringBytes=((String)obj).getBytes("UTF-8");} catch (UnsupportedEncodingException e) {throw new RuntimeException(e);}for (int i=0; i < getNumPartitions(STRING); ++i) {if (i < stringBytes.length) {parts.add(BigInteger.valueOf((long)stringBytes[i] & 0xFF));} else {parts.add(BigInteger.ZERO);}}break;default :throw new PIRException("type = " + type + " not recognized!");}for (byte b : bytes) {parts.add(BigInteger.valueOf((long)b & 0xFF));}return parts;}  }
class C{  private void parse(BufferedReader reader){  this.messages.clear();  reader.lines().map(null).filter(null).forEach(null);}  }
class C{  public Timestamp startStamp(){  return new Timestamp(this.start.getTime());}  }
class C{  public static void main(String[] args) throws FinderException {  if (args.length <= 0) {    SpaceURLParser.printUsage();    System.exit(-1);  }  Object space=find(args[0]);  if (space != null) {    Logger logger=Logger.getLogger(com.gigaspaces.logger.Constants.LOGGER_SPACEFINDER);    if (logger.isLoggable(Level.FINE)) {      if (space instanceof ISpaceProxy)       logger.log(Level.FINE,"Found space: " + space + " using this SpaceURL: "+ ((ISpaceProxy)space).getFinderURL()+ ". \n The found space initialized using this SpaceURL: "+ ((ISpaceProxy)space).getURL()); else       logger.log(Level.FINE,"Found space: " + space);    }  }}  }
class C{  private void initAndStartRegularSpace() throws Exception, RemoteException {  changeSpaceState(ISpaceState.STARTING,true,false);  for (int retries=1; retries <= RecoveryManager.RECOVERY_RETRIES; retries++) {    try {      SpaceRecoverStrategy strategy=_recoveryManager.getRecoveryStrategy(SpaceMode.NONE);      ISpaceSynchronizeReplicaState recoveryState=strategy.recover();      postRecoveryActions(recoveryState);      _componentManager.initComponents();      changeSpaceState(ISpaceState.STARTED,true,true);      _componentManager.startComponents();      break;    } catch (    Exception e) {      handleRecoveryFailure(e,retries);    }  }}  }
class C{  public static Stream<String> wavefrontLine(DateTime ts,TimeSeriesValue tsv){  final GroupName group=tsv.getGroup();  return tsv.getMetrics().entrySet().stream().flatMap(null);}  }
class C{  @Transactional public void rollbackCurrentVariantsFromTMToDate(DateTime rollbackDateTime,Long tmId,CurrentVariantRollbackParameters extraParameters){  Preconditions.checkNotNull(extraParameters,"Extra parameters should not be null");  deleteExistingCurrentVariants(tmId,extraParameters);  addCurrentVariantsAsOfRollbackDate(rollbackDateTime,tmId,extraParameters);}  }
class C{  public void fail(String errorMessage){  currentTest.get().fail(errorMessage);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200779,skilltarget);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (!(obj instanceof ActivatableInvocationHandler)) {    return false;  }  ActivatableInvocationHandler other=(ActivatableInvocationHandler)obj;  return (id.equals(other.id) && (clientConstraints == other.clientConstraints || (clientConstraints != null && clientConstraints.equals(other.clientConstraints))));}  }
class C{  public static SourceDataQuality fromXML(Element domElement){  NodeList fields=domElement.getChildNodes();  int fieldsCount=fields.getLength();  String fieldName;  String fieldValueString;  Node fieldNode;  SourceDataQuality result=new SourceDataQuality();  for (int i=0; i != fieldsCount; i++) {    fieldNode=fields.item(i);    if (fieldNode.getNodeType() == Node.ELEMENT_NODE) {      fieldName=fieldNode.getNodeName();      Node fieldValueNode=fieldNode.getFirstChild();      if (fieldValueNode != null) {        fieldValueString=fieldValueNode.getNodeValue();      } else {        fieldValueString="";      }      if (fieldName.equals(XML_ELEMENT_QUALITY_CODE)) {        result.qualityCode=Short.parseShort(fieldValueString);      } else       if (fieldName.equals(XML_ELEMENT_QUALITY_DESC)) {        result.description=fieldValueString;      }    }  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MENTOR_END_BANISH(String worldname0){  return new SM_SYSTEM_MESSAGE(1400767,worldname0);}  }
class C{  public static ArrayList<SelectableIcon> convertResourceArraysToIconsArrayList(Context context,boolean sortByName,@ArrayRes int idsArray,@ArrayRes int namesArray,@ArrayRes int drawablesArray){  String[] ids=context.getResources().getStringArray(idsArray);  int[] drawables=context.getResources().getIntArray(drawablesArray);  String[] names=context.getResources().getStringArray(namesArray);  if (ids.length != drawables.length && ids.length != names.length) {    Log.e(LOG_TAG,"convertResourceArraysToIconsArrayList(): Arrays must have equals lengths!");    return null;  }  ArrayList<SelectableIcon> result=new ArrayList<>();  for (int i=0; i < ids.length; i++) {    result.add(new SelectableIcon(ids[i],names[i],drawables[i]));  }  if (sortByName) {    Collections.sort(result,new SelectableItemNameComparator<SelectableIcon>());  }  return result;}  }
class C{  @Override CoreDocumentImpl ownerDocument(){  return ownerDocument;}  }
class C{  public static void startActivity(Context context){  if (context == null)   return;  Intent intent=new Intent(context,ExpandedControllerActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public static boolean isGetMethod(HttpRequest request){  String method=request.getRequestLine().getMethod();  return "GET".equalsIgnoreCase(method);}  }
class C{  public boolean disableCharacteristicIndicate(BluetoothGattCharacteristic characteristic){  if (characteristic != null && (characteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {    BleLog.w(TAG,"characteristic.getProperties():" + characteristic.getProperties());    return setCharacteristicIndication(getBluetoothGatt(),characteristic,false);  } else {    return false;  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static ModelInfo createFromAttributes(ModelInfo defaultInfo,Element element){  String title=element.getAttribute("title").intern();  if (title.isEmpty()) {    title=defaultInfo.getTitle();  }  String description=StringUtil.internString(UtilXml.childElementValue(element,"description"));  if (description == null || description.isEmpty()) {    description=defaultInfo.getDescription();  }  String copyright=element.getAttribute("copyright").intern();  if (copyright.isEmpty()) {    copyright=defaultInfo.getCopyright();  }  String author=element.getAttribute("author").intern();  if (author.isEmpty()) {    author=defaultInfo.getAuthor();  }  String version=element.getAttribute("version").intern();  if (version.isEmpty()) {    version=defaultInfo.getVersion();  }  String defaultResourceName=StringUtil.internString(element.getAttribute("default-resource-name"));  if (defaultResourceName.isEmpty()) {    defaultResourceName=defaultInfo.getDefaultResourceName();  }  return new ModelInfo(title,description,copyright,author,version,defaultResourceName);}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=mRenderLimitLinesBuffer;  pts[0]=0;  pts[1]=0;  pts[2]=0;  pts[3]=0;  Path limitLinePath=mRenderLimitLinesPathBuffer;  limitLinePath.reset();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    pts[0]=l.getLimit();    pts[2]=l.getLimit();    mTrans.pointValuesToPixel(pts);    pts[1]=mViewPortHandler.contentTop();    pts[3]=mViewPortHandler.contentBottom();    limitLinePath.moveTo(pts[0],pts[1]);    limitLinePath.lineTo(pts[2],pts[3]);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setTypeface(l.getTypeface());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      float xOffset=l.getLineWidth() + l.getXOffset();      float yOffset=Utils.dp2px(2f) + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentTop() + yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentBottom() - yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);        c.drawText(label,pts[0] - xOffset,mViewPortHandler.contentTop() + yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,pts[0] - xOffset,mViewPortHandler.contentBottom() - yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public AuthRestoreQuery(VkApiClient client,UserActor actor,String phone){  super(client,"auth.restore",RestoreResponse.class);  accessToken(actor.getAccessToken());  phone(phone);}  }
class C{  public static String urlEncodeArgs(Map<String,? extends Object> args,boolean useExpandedEntites){  StringBuilder buf=new StringBuilder();  if (args != null) {    for (    Map.Entry<String,? extends Object> entry : args.entrySet()) {      String name=entry.getKey();      Object value=entry.getValue();      String valueStr=null;      if (name == null || value == null) {        continue;      }      Collection<?> col;      if (value instanceof String) {        col=Arrays.asList(value);      } else       if (value instanceof Collection) {        col=UtilGenerics.cast(value);      } else       if (value.getClass().isArray()) {        col=Arrays.asList((Object[])value);      } else {        col=Arrays.asList(value);      }      for (      Object colValue : col) {        if (colValue instanceof String) {          valueStr=(String)colValue;        } else         if (colValue == null) {          continue;        } else {          valueStr=colValue.toString();        }        if (UtilValidate.isNotEmpty(valueStr)) {          if (buf.length() > 0) {            if (useExpandedEntites) {              buf.append("&amp;");            } else {              buf.append("&");            }          }          buf.append(UtilCodec.getEncoder("url").encode(name));          buf.append('=');          buf.append(UtilCodec.getEncoder("url").encode(valueStr));        }      }    }  }  return buf.toString();}  }
class C{  public DatabaseGetStreetsByIdQuery(VkApiClient client,UserActor actor,List<Integer> streetIds){  super(client,"database.getStreetsById",Utils.buildParametrizedType(List.class,Street.class));  accessToken(actor.getAccessToken());  streetIds(streetIds);}  }
class C{  private void sortIfNeeded(List listToSort){  if (sortLists) {    if (listToSort.stream().anyMatch(null)) {      try {        Collections.sort(listToSort);      } catch (      ClassCastException ignored) {        Collections.sort(listToSort,variableTypedComparator);      }    } else {      Collections.sort(listToSort,variableTypedComparator);    }  }}  }
class C{  public FieldNameExpression(String fldName){  this.fldName=fldName;}  }
class C{  public CM_DELETE_CHARACTER(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public void testSingleLine() throws Exception {  deleteManifest();  myFixture.copyFileToProject(BASE_PATH_GLOBAL + "deprecation/AndroidManifest.xml","AndroidManifest.xml");  myFixture.enableInspections(new AndroidLintInspectionToolProvider.AndroidLintDeprecatedInspection());  myFixture.configureFromExistingVirtualFile(myFixture.copyFileToProject(BASE_PATH + "singleLine.xml","res/layout/singleLine.xml"));  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,"Replace singleLine=\"true\" with maxLines=\"1\"");  assertNotNull(action);  doTestWithAction("xml",action);}  }
class C{  public static void appendValue(final StringBuffer logMessage,final String value){  logMessage.append(value);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public LookupSwitchStmt newLookupSwitchStmt(Value key,List lookupValues,List targets,Unit defaultTarget){  return new GLookupSwitchStmt(key,lookupValues,targets,defaultTarget);}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  public boolean rotateImageBy(int degrees){  int newDegrees=(getDegreesRotated() + degrees) % 360;  setExifRotation(newDegrees);  setDegreesRotated(newDegrees);  return true;}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public boolean isAliasCI(Local l1,Local l2){  PointsToSet pts1=geomPts.reachingObjects(l1);  PointsToSet pts2=geomPts.reachingObjects(l2);  return pts1.hasNonEmptyIntersection(pts2);}  }
class C{  public void add(Symbol[] entry){  this.finalNodes.add(this.root.add(entry,0));}  }
class C{  public static void clearAllMemory(){  ImageLoader.getInstance().getConfig().cache.clearMemory();  ImageLoader.getInstance().getConfig().cache.clearDiskMemory();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_START_5_FORESTRY(String value0){  return new SM_SYSTEM_MESSAGE(1330015,value0);}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public void java_lang_reflect_Proxy_defineClass0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  @Override public int read() throws IOException {  int b0=fInputStream.read();  if (b0 >= 0x80) {    throw new MalformedByteSequenceException(fFormatter,fLocale,XMLMessageFormatter.XML_DOMAIN,"InvalidASCII",new Object[]{Integer.toString(b0)});  }  return b0;}  }
class C{  public SpaceContext trustContext(SpaceContext spaceContext){  SecurityContext trustedContext=trustInterceptor.trust(SpaceContextHelper.getSecurityContext(spaceContext));  return spaceContext.createCopy(trustedContext);}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  @RequestMapping(value="/{id}",method=DELETE,produces=APPLICATION_JSON_VALUE) public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {  log.debug("Delete by id User : {}",id);  try {    userRepository.delete(id);    return ResponseEntity.ok().build();  } catch (  Exception x) {    return ResponseEntity.status(HttpStatus.CONFLICT).build();  }}  }
class C{  public static void showManagedByParentToast(Context context){  boolean singleParentIsManager=PrefServiceBridge.getInstance().getSupervisedUserSecondCustodianName().isEmpty();  Toast.makeText(context,context.getString(singleParentIsManager ? R.string.managed_by_your_parent : R.string.managed_by_your_parents),Toast.LENGTH_LONG).show();}  }
class C{  void addAcceptableFilterID(String destID){  initAcceptableFilterList(1);  _acceptableFilterIDList.add(destID);}  }
class C{  public JSONObject put(String key,Collection value) throws JSONException {  put(key,new JSONArray(value));  return this;}  }
class C{  public boolean hasDropShadow(){  return myShadowType != ShadowType.NONE;}  }
class C{  public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  public void computeGapAreas(){  Rectangle gap=new Rectangle();  int area=0;  for (int i=0; i < mRectList.length; i++) {    Rectangle rectangleA=mRectList[i];    for (int j=i + 1; j < mRectList.length; j++) {      Rectangle rectangleB=mRectList[j];      boolean viable=calculateGap(rectangleA,rectangleB,gap);      if (viable) {        for (int k=0; k < mRectList.length; k++) {          if (k != j && k != i) {            if (gap.intersects(mRectList[k])) {              viable=false;              break;            }          }        }      }      if (viable) {        area+=gap.width * gap.height;      }    }  }  mGapArea=area;}  }
class C{  @Override public ControlTagCacheObject clone() throws CloneNotSupportedException {  return (ControlTagCacheObject)super.clone();}  }
class C{  public int compareTo(Object o){  if ((o == DONT_CARE) || (this == DONT_CARE)) {    return 0;  } else {    return ordinal - ((Gender)o).ordinal;  }}  }
class C{  protected void internalTransform(Body b,String phaseName,Map<String,String> opts){  CPOptions options=new CPOptions(opts);  StmtBody stmtBody=(StmtBody)b;  int fastCopyPropagationCount=0;  int slowCopyPropagationCount=0;  if (Options.v().verbose())   G.v().out.println("[" + stmtBody.getMethod().getName() + "] Propagating copies...");  if (Options.v().time())   Timers.v().propagatorTimer.start();  Chain<Unit> units=stmtBody.getUnits();  Map<Local,Integer> localToDefCount=new HashMap<Local,Integer>();  for (  Unit u : units) {    Stmt s=(Stmt)u;    if (s instanceof DefinitionStmt && ((DefinitionStmt)s).getLeftOp() instanceof Local) {      Local l=(Local)((DefinitionStmt)s).getLeftOp();      if (!localToDefCount.containsKey(l))       localToDefCount.put(l,new Integer(1)); else       localToDefCount.put(l,new Integer(localToDefCount.get(l).intValue() + 1));    }  }  if (throwAnalysis == null)   throwAnalysis=Scene.v().getDefaultThrowAnalysis();  if (forceOmitExceptingUnitEdges == false)   forceOmitExceptingUnitEdges=Options.v().omit_excepting_unit_edges();  UnitGraph graph=new ExceptionalUnitGraph(stmtBody,throwAnalysis,forceOmitExceptingUnitEdges);  LocalDefs localDefs=LocalDefs.Factory.newLocalDefs(graph);{    Iterator<Unit> stmtIt=(new PseudoTopologicalOrderer<Unit>()).newList(graph,false).iterator();    while (stmtIt.hasNext()) {      Stmt stmt=(Stmt)stmtIt.next();      for (      ValueBox useBox : stmt.getUseBoxes()) {        if (useBox.getValue() instanceof Local) {          Local l=(Local)useBox.getValue();          if (!(l.getType() instanceof NullType)) {            if (options.only_regular_locals() && l.getName().startsWith("$"))             continue;            if (options.only_stack_locals() && !l.getName().startsWith("$"))             continue;          }          List<Unit> defsOfUse=localDefs.getDefsOfAt(l,stmt);          boolean propagateDef=defsOfUse.size() == 1;          if (!propagateDef && defsOfUse.size() > 0) {            boolean agrees=true;            Constant constVal=null;            for (            Unit defUnit : defsOfUse) {              boolean defAgrees=false;              if (defUnit instanceof AssignStmt) {                AssignStmt assign=(AssignStmt)defUnit;                if (assign.getRightOp() instanceof Constant) {                  if (constVal == null) {                    constVal=(Constant)assign.getRightOp();                    defAgrees=true;                  } else                   if (constVal.equals(assign.getRightOp()))                   defAgrees=true;                }              }              agrees&=defAgrees;            }            propagateDef=agrees;          }          if (propagateDef) {            DefinitionStmt def=(DefinitionStmt)defsOfUse.get(0);            if (def.getRightOp() instanceof Constant) {              if (useBox.canContainValue(def.getRightOp())) {                useBox.setValue(def.getRightOp());              }            } else             if (def.getRightOp() instanceof CastExpr) {              CastExpr ce=(CastExpr)def.getRightOp();              if (ce.getCastType() instanceof RefLikeType) {                boolean isConstNull=ce.getOp() instanceof IntConstant && ((IntConstant)ce.getOp()).value == 0;                isConstNull|=ce.getOp() instanceof LongConstant && ((LongConstant)ce.getOp()).value == 0;                if (isConstNull) {                  if (useBox.canContainValue(NullConstant.v())) {                    useBox.setValue(NullConstant.v());                  }                }              }            } else             if (def.getRightOp() instanceof Local) {              Local m=(Local)def.getRightOp();              if (l != m) {                Integer defCount=localToDefCount.get(m);                if (defCount == null || defCount == 0)                 throw new RuntimeException("Variable " + m + " used without definition!");                if (defCount == 1) {                  useBox.setValue(m);                  fastCopyPropagationCount++;                  continue;                }                List<Unit> path=graph.getExtendedBasicBlockPathBetween(def,stmt);                if (path == null) {                  continue;                }                Iterator<Unit> pathIt=path.iterator();                pathIt.next();{                  boolean isRedefined=false;                  while (pathIt.hasNext()) {                    Stmt s=(Stmt)pathIt.next();                    if (stmt == s) {                      break;                    }                    if (s instanceof DefinitionStmt) {                      if (((DefinitionStmt)s).getLeftOp() == m) {                        isRedefined=true;                        break;                      }                    }                  }                  if (isRedefined)                   continue;                }                useBox.setValue(m);                slowCopyPropagationCount++;              }            }          }        }      }    }  }  if (Options.v().verbose())   G.v().out.println("[" + stmtBody.getMethod().getName() + "]     Propagated: "+ fastCopyPropagationCount+ " fast copies  "+ slowCopyPropagationCount+ " slow copies");  if (Options.v().time())   Timers.v().propagatorTimer.end();}  }
class C{  public void writeBytes(byte[] value) throws JMSException {  writeBytes(value,0,value.length);}  }
class C{  private boolean isTransactionWithLease(ServerTransaction txn){  return txn.getLease() != Long.MAX_VALUE && txn.getLease() != 0;}  }
class C{  public boolean equals(Object o){  if (!(o instanceof NDArrayWritable)) {    return false;  }  NDArrayWritable other=(NDArrayWritable)o;  DataBuffer thisData=this.array.data();  DataBuffer otherData=other.array.data();  DataBuffer.Type thisType=thisData.dataType();  DataBuffer.Type otherType=otherData.dataType();  if (thisType != otherType) {    throw new IllegalArgumentException("Data types must be the same.");  }switch (thisType) {case DOUBLE:    return thisData.asNioDouble().equals(otherData.asNioDouble());case FLOAT:  return thisData.asNioFloat().equals(otherData.asNioFloat());case INT:return thisData.asNioInt().equals(otherData.asNioInt());}throw new UnsupportedOperationException("Unsupported data type: " + thisType);}  }
class C{  public LocationAnimator(String group){  super(group);}  }
class C{  public static String clearLastViewedCategories(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  if (session != null) {    session.setAttribute("lastViewedCategories",FastList.newInstance());  }  return "success";}  }
class C{  public static void useSkill(AbstractAI ai2,int skillId){  ai2.getOwner().getController().useSkill(skillId);}  }
class C{  @NotNull public EditorFixture waitForCodeAnalysisHighlightCount(@NotNull final HighlightSeverity severity,int expected){  waitForBackgroundTasks(robot);  FileFixture file=getCurrentFileFixture();  file.waitForCodeAnalysisHighlightCount(severity,expected);  return this;}  }
class C{  @Override public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {  if (documentHandler != null) {    documentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  public GroupsSearchQuery cityId(Integer value){  return unsafeParam("city_id",value);}  }
class C{  public static void switchJunction(NetHandlerPlayServer net,boolean state){  ensurePlay(net.netManager.channel());  net.sendPacket(state ? WRAP_ON_S : WRAP_OFF_S);}  }
class C{  @Override protected void synchronizeChildren(){  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();  ownerDocument.synchronizeChildren(this,fNodeIndex);}  }
class C{  @NotNull private static String toIniString(@NotNull Double value){  return String.format(Locale.US,"%f",value);}  }
class C{  public static Map<String,Object> deleteContactMech(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_DELETE");  if (result.size() > 0)   return result;  String contactMechId=(String)context.get("contactMechId");  GenericValue partyContactMech=null;  try {    partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  if (partyContactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_no_contact_found",locale));  }  partyContactMech.set("thruDate",UtilDateTime.nowTimestamp());  try {    partyContactMech.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_write",locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public ImageRecordReader(int height,int width,int channels,PathLabelGenerator labelGenerator,ImageTransform imageTransform){  super(height,width,channels,labelGenerator,imageTransform);}  }
class C{  private StyledLayerDescriptor createTestLine(URL url){  StyleBuilder sb=new StyleBuilder();  StyleFactory styleFactory=sb.getStyleFactory();  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();  NamedLayer namedLayer=styleFactory.createNamedLayer();  sld.addStyledLayer(namedLayer);  Style style=styleFactory.createStyle();  namedLayer.addStyle(style);  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();  ftsList.add(fts);  Rule rule=styleFactory.createRule();  fts.rules().add(rule);  LineSymbolizer line=styleFactory.createLineSymbolizer();  rule.symbolizers().add(line);  Graphic graphicFill=createGraphic(url,styleFactory);  Graphic graphicStroke=createGraphic(url,styleFactory);  Stroke stroke=styleFactory.createStroke(null,null,null,null,null,null,null,graphicFill,graphicStroke);  line.setStroke(stroke);  return sld;}  }
class C{  public Object parse(String text) throws DataParseException {  try {    StringTokenizer st=new StringTokenizer(text,"\"[](){}, ");    float[] array=new float[st.countTokens()];    for (int i=0; st.hasMoreTokens(); ++i) {      String tok=st.nextToken();      array[i]=Float.parseFloat(tok);    }    return array;  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public static Object invokeMethod(Class<?> clazz,Object obj,String name,Class<?>[] parameterTypes,Object[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  if (clazz == null || obj == null || name == null) {    throw new IllegalArgumentException("arguments cannot be null.");  }  if (parameterTypes != null && args != null && parameterTypes.length > 0 && args.length > 0) {    if (parameterTypes.length == args.length) {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method.invoke(obj,args);    }  } else {    Method method=clazz.getDeclaredMethod(name);    if (!method.isAccessible()) {      method.setAccessible(true);    }    return method.invoke(obj);  }  return null;}  }
class C{  private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("TestStretchToMinimumMaximum"));  options.put("minValue",ff.literal("1.0"));  options.put("maxValue",ff.literal("5.0"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  protected static int removeWhiteSpace(char[] data){  if (data == null)   return 0;  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i]))     data[newSize++]=data[i];  }  return newSize;}  }
class C{  @Override public boolean isDataSource(){  return false;}  }
class C{  public static void dropAllTables(Database db,boolean ifExists){  NewsDao.dropTable(db,ifExists);  ThemeListDao.dropTable(db,ifExists);}  }
class C{  public void check(){  check(ANIMATION_DURATION_MS);}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  private <T>CommandExecuteRequest<T> createCommandExecuteRequest(final ClientCommandTagImpl<T> commandTag,T value) throws CommandTagValueException {  if (value == null) {    throw new CommandTagValueException("Null value : command values cannot be set to null");  }  if (!commandTag.isExistingCommand()) {    throw new CommandTagValueException("Unknown command : " + commandTag.getId() + " is not known to the server.");  }  if (commandTag.getValueType() == null) {    throw new CommandTagValueException("Null value : command value type cannot be set to null");  }  if (value.getClass() != commandTag.getValueType()) {    throw new CommandTagValueException("Data type : " + commandTag.getValueType() + " expected but got type "+ value.getClass().getName()+ ".");  }  try {    if ((commandTag.getMinValue() != null) && commandTag.getMinValue().compareTo(value) > 0) {      throw new CommandTagValueException("Out of range : " + value + " is less than the authorized minimum value "+ commandTag.getMinValue()+ ".");    }  } catch (  ClassCastException ce) {    throw new CommandTagValueException("CONFIGURATION ERROR: The minValue for the command is of type " + commandTag.getValueType().getName() + ". It cannot be compared to a value of type "+ value.getClass().getName()+ ". Contact the configuration responsible for correcting this problem");  }  try {    if ((commandTag.getMaxValue() != null) && commandTag.getMaxValue().compareTo(value) < 0) {      throw new CommandTagValueException("Out of range : " + value + " is greater than the authorized maximum value "+ commandTag.getMaxValue()+ ".");    }  } catch (  ClassCastException ce) {    throw new CommandTagValueException("CONFIGURATION ERROR: The minValue for the command is of type " + commandTag.getValueType().getName() + ". It cannot be compared to a value of type "+ value.getClass().getName()+ ". Contact the configuration responsible for correcting this problem");  }  String hostname;  try {    hostname=InetAddress.getLocalHost().getHostName();  } catch (  UnknownHostException e) {    LOG.warn("UnknownHostException caught while creating command request - set to unknown",e);    hostname="unknown-host";  }  return new CommandExecuteRequestImpl<T>(commandTag.getId(),value,commandTag.getClientTimeout(),System.getProperty("user.home"),hostname);}  }
class C{  public Vector3f crossLocal(float otherX,float otherY,float otherZ){  float tempx=(y * otherZ) - (z * otherY);  float tempy=(z * otherX) - (x * otherZ);  z=(x * otherY) - (y * otherX);  x=tempx;  y=tempy;  return this;}  }
class C{  public boolean simplify_sccs(){  return soot.PhaseOptions.getBoolean(options,"simplify-sccs");}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  protected void verifyInterpolation(UnivariateFunction f,double x[],double y[]){  for (int i=0; i < x.length; i++) {    Assert.assertEquals(f.value(x[i]),y[i],knotTolerance);  }}  }
class C{  public void rectValueToPixel(RectF r){  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public long validate(long actual,long max,long min,long defaultVal){  if (actual <= max && actual >= min) {    return actual;  }  return defaultVal;}  }
class C{  public void clear(){  clear(false);}  }
class C{  private void findMatchesInContexts(List<NumberContext> contexts,boolean isValid,boolean isPossible){  String region=RegionCode.US;  String number="415-666-7777";  findMatchesInContexts(contexts,isValid,isPossible,region,number);}  }
class C{  public void init$Children(){}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public RegisterTypeDescriptorResponseInfo(){}  }
class C{  private AudioInputStream synthesizeUsingMLSAVocoder(double[][] mgc,double[][] strengths,double[] lf0,boolean[] voiced,AudioFileFormat aft) throws SynthesisException {  assert lf0.length == mgc.length;  assert mgc.length == strengths.length;  for (int i=0; i < lf0.length; i++) {    if (lf0[i] > 0 && (Math.log(30) > lf0[i] || Math.log(1000) < lf0[i])) {      throw new SynthesisException("given log f0 values should be in the natural pitch range ");    }  }  int mcepVsize=vMLSAFeaturesReader.getMGCVectorSize();  int lf0Vsize=vMLSAFeaturesReader.getLF0VectorSize();  int strVsize=vMLSAFeaturesReader.getSTRVectorSize();  HTSPStream lf0Pst=null;  HTSPStream mcepPst=null;  HTSPStream strPst=null;  try {    lf0Pst=new HTSPStream(lf0Vsize * 3,lf0.length,HMMData.FeatureType.LF0,0);    mcepPst=new HTSPStream(mcepVsize * 3,mgc.length,HMMData.FeatureType.MGC,0);    strPst=new HTSPStream(strVsize * 3,strengths.length,HMMData.FeatureType.STR,0);  } catch (  Exception e) {    throw new SynthesisException("HTSPStream initialiaztion failed.. " + e);  }  int lf0VoicedFrame=0;  for (int i=0; i < lf0.length; i++) {    if (voiced[i]) {      lf0Pst.setPar(lf0VoicedFrame,0,lf0[i]);      lf0VoicedFrame++;    }    for (int j=0; j < mcepPst.getOrder(); j++) {      mcepPst.setPar(i,j,mgc[i][j]);    }    for (int j=0; j < strPst.getOrder(); j++) {      strPst.setPar(i,j,strengths[i][j]);    }  }  AudioFormat af;  if (aft == null) {    float sampleRate=16000.0F;    int sampleSizeInBits=16;    int channels=1;    boolean signed=true;    boolean bigEndian=false;    af=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);  } else {    af=aft.getFormat();  }  double[] audio_double=null;  try {    audio_double=par2speech.htsMLSAVocoder(lf0Pst,mcepPst,strPst,null,voiced,htsData,null);  } catch (  Exception e) {    throw new SynthesisException("MLSA vocoding failed .. " + e);  }  double MaxSample=MathUtils.getAbsMax(audio_double);  for (int i=0; i < audio_double.length; i++) {    audio_double[i]=0.3 * (audio_double[i] / MaxSample);  }  return new DDSAudioInputStream(new BufferedDoubleDataSource(audio_double),af);}  }
class C{  protected Builder owningType(final Type<?> owningType){  this.owningType=owningType;  return this;}  }
class C{  private void addArcLimit(final BSPTree<Sphere1D> tree,final double alpha,final boolean isStart){  final LimitAngle limit=new LimitAngle(new S1Point(alpha),!isStart,getTolerance());  final BSPTree<Sphere1D> node=tree.getCell(limit.getLocation(),getTolerance());  if (node.getCut() != null) {    throw MathRuntimeException.createInternalError();  }  node.insertCut(limit);  node.setAttribute(null);  node.getPlus().setAttribute(Boolean.FALSE);  node.getMinus().setAttribute(Boolean.TRUE);}  }
class C{  private void optimizeOldFilesTask(CompletableFuture<?> handle){  try {    final List<Key> keys;    final ReentrantReadWriteLock.ReadLock lock=guard.readLock();    lock.lock();    try {      keys=readKeys.stream().filter(null).sorted().collect(Collectors.toList());    }  finally {      lock.unlock();    }    int count=0;    Map<Key,TSData> batch=new HashMap<>();    for (    Key key : keys) {      if (key.isNewFile())       continue;      final TSData value;      try {        value=getFile(key);      } catch (      IOException ex) {        continue;      }      if (value == null)       continue;      if (value.isOptimized())       continue;      if (handle.isCancelled())       return;      final int value_size=value.size();      count+=value_size;      batch.put(key,value);      LOG.log(Level.INFO,"added {0} ({1} scrapes) to batch ({2} files, {3} scrapes)",new Object[]{key.getFile(),value_size,batch.size(),count});      if (count > 50000) {        optimizeFiles(batch);        batch.clear();        count=0;      }    }    if (!batch.isEmpty())     optimizeFiles(batch);  } catch (  Error|Exception ex) {    handle.completeExceptionally(ex);  } finally {    handle.complete(null);  }}  }
class C{  public void changeProgram(IFilter newFilter){  mFilter.releaseProgram();  mFilter=newFilter;}  }
class C{  public CASCDistanceCalculator(String sPathToCasc) throws IOException {  PathToCasc=sPathToCasc;  Process p=Runtime.getRuntime().exec(PathToCasc);  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }}  }
class C{  public static final int binarySearch(Object[] a,Object key,int begin,int end){  int x1=begin;  int x2=end;  int i=x1 + (x2 - x1) / 2, c;  while (x1 < x2) {    c=((Comparable)a[i]).compareTo(key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public void cancel(){  this.taskManager_.cancel();}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer("Matrix3f\n[\n");  result.append(" ");  result.append(m00);  result.append("  ");  result.append(m01);  result.append("  ");  result.append(m02);  result.append(" \n");  result.append(" ");  result.append(m10);  result.append("  ");  result.append(m11);  result.append("  ");  result.append(m12);  result.append(" \n");  result.append(" ");  result.append(m20);  result.append("  ");  result.append(m21);  result.append("  ");  result.append(m22);  result.append(" \n]");  return result.toString();}  }
class C{  private void deactivateObjects(){  for (  VisibleObject visObject : objects.values()) {    if (visObject instanceof Creature && !(SiegeConfig.BALAUR_AUTO_ASSAULT && visObject instanceof SiegeNpc) && !((Creature)visObject).isFlag()&& !((Creature)visObject).isRaidMonster()) {      Creature creature=(Creature)visObject;      creature.getAi2().onGeneralEvent(AIEventType.DEACTIVATE);    }  }}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + " [Radius: " + radius+ " Center: "+ center+ "]";}  }
class C{  public void reelect() throws InterruptedException, ActiveElectionException, RemoteException {  changeState(getState(),State.PENDING,true);  elect();}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set nodeColor=");  final Color color=np.getColor();  final java.util.List<String> samples=new LinkedList<>();  if (np.peekMatchIgnoreCase("sample=")) {    np.matchIgnoreCase("sample=");    while (!np.peekMatchIgnoreCase(";")) {      samples.add(np.getWordRespectCase());    }  }  np.matchIgnoreCase(";");  final Document doc=((Director)getDir()).getDocument();  if (samples.size() == 0)   samples.addAll(doc.getSampleSelection().getAll());  if (samples.size() > 0) {    for (    String sample : samples) {      doc.getSampleAttributeTable().putSampleColor(sample,color);    }    doc.setDirty(true);  }}  }
class C{  public void init$Children(){}  }
class C{  private void createShader(){  mDefaultAngularFrequency=2.0f * Math.PI / DEFAULT_WAVE_LENGTH_RATIO / getWidth();  mDefaultAmplitude=getHeight() * DEFAULT_AMPLITUDE_RATIO;  mDefaultWaterLevel=getHeight() * DEFAULT_WATER_LEVEL_RATIO;  mDefaultWaveLength=getWidth();  Bitmap bitmap=Bitmap.createBitmap(getWidth(),getHeight(),Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  Paint wavePaint=new Paint();  wavePaint.setStrokeWidth(2);  wavePaint.setAntiAlias(true);  wavePaint.setColor(mFrontWaveColor);  final int endX=getWidth() + 1;  final int endY=getHeight() + 1;  float[] waveY=new float[endX];  wavePaint.setColor(mBehindWaveColor);  for (int beginX=0; beginX < endX; beginX++) {    double wx=beginX * mDefaultAngularFrequency;    float beginY=(float)(mDefaultWaterLevel + mDefaultAmplitude * Math.sin(wx));    canvas.drawLine(beginX,beginY,beginX,-1,wavePaint);    waveY[beginX]=beginY;  }  wavePaint.setColor(mFrontWaveColor);  final int wave2Shift=(int)(mDefaultWaveLength / 4);  for (int beginX=0; beginX < endX; beginX++) {    canvas.drawLine(beginX,waveY[(beginX + wave2Shift) % endX],beginX,-1,wavePaint);  }  mWaveShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);  mViewPaint.setShader(mWaveShader);}  }
class C{  public BannedIpsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public DotGraphNode drawNode(String name){  DotGraphNode node=getNode(name);  if (node == null)   throw new RuntimeException("Assertion failed.");  if (!this.drawElements.contains(node))   this.drawElements.add(node);  return node;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public ExecutorScriptingProxyConfigurer(GigaSpace gigaSpace){  remotingConfigurer=new ExecutorRemotingProxyConfigurer<ScriptingExecutor>(gigaSpace,ScriptingExecutor.class).metaArgumentsHandler(new ScriptingMetaArgumentsHandler()).remoteInvocationAspect(new LazyLoadingRemoteInvocationAspect()).remoteRoutingHandler(new ScriptingRemoteRoutingHandler());}  }
class C{  public int indexOf(Object key){  return key == null ? indexOfNull() : indexOf(key,key.hashCode());}  }
class C{  protected Set<LogicalMetric> generateMetrics(String metricName,MetricDictionary metricDictionary) throws BadApiRequestException {  Set<LogicalMetric> generated=metricDictionary.values().stream().filter(null).collect(Collectors.toCollection(null));  if (generated.isEmpty()) {    String msg;    if (metricDictionary.isEmpty()) {      msg=EMPTY_DICTIONARY.logFormat("Metric");    } else {      msg=METRICS_UNDEFINED.logFormat(metricName);    }    LOG.error(msg);    throw new BadApiRequestException(msg);  }  LOG.trace("Generated set of metrics: {}",generated);  return generated;}  }
class C{  public long logSize(){  return logBytes;}  }
class C{  public synchronized ZooKeeperClientBuilder uri(URI uri){  this.zkServers=DLUtils.getZKServersFromDLUri(uri);  return this;}  }
class C{  public StatelessHibernateSpaceDataSourceConfigurer initialLoadChunkSize(int initalLoadChunkSize){  this.initialLoadChunkSize=initalLoadChunkSize;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCBuff_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201245,skillname);}  }
class C{  public SQLQuery(Class<T> type,String sqlExpression,Object... parameters){  this(sqlExpression,type.getName(),null,DEFAULT_QUERY_RESULT_TYPE,parameters);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void write(DataOutput out) throws IOException {  if (array == null) {    out.writeLong(0);    return;  }  DataBuffer data=array.data();  DataBuffer.Type type=data.dataType();  out.writeLong(array.length());  out.writeInt(type.ordinal());switch (type) {case DOUBLE:{      DoubleBuffer buffer=data.asNioDouble();      while (buffer.remaining() > 0) {        out.writeDouble(buffer.get());      }      return;    }case FLOAT:{    FloatBuffer buffer=data.asNioFloat();    while (buffer.remaining() > 0) {      out.writeFloat(buffer.get());    }    return;  }case INT:{  IntBuffer buffer=data.asNioInt();  while (buffer.remaining() > 0) {    out.writeInt(buffer.get());  }  return;}}throw new UnsupportedOperationException("Unsupported data type: " + type);}  }
class C{  public boolean prepare(){  if (songs.isEmpty())   return false;  if (playingIndex == NO_POSITION) {    playingIndex=0;  }  return true;}  }
class C{  public static boolean hasICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  private final void reapStaleReplicas(){  long currentTime=SystemTime.timeMillis();  long expirationTime=currentTime - _staleReplicaExpirationTime;  if (_force || _lastReapedSpaceContentObjects < expirationTime)   _lastReapedSpaceContentObjects=currentTime; else   return;  _engine.getReplicationNode().getAdmin().clearStaleReplicas(expirationTime);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AddExpr fullCopy(){  AddExpr tree=(AddExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void main(String[] args) throws IOException {  String xmlfile=null;  int debuglevel=0;  int maxErrs=10;  boolean nsAware=true;  boolean validating=true;  boolean useSchema=false;  boolean showWarnings=(debuglevel > 2);  boolean showErrors=true;  Vector catalogFiles=new Vector();  for (int i=0; i < args.length; i++) {    if (args[i].equals("-c")) {      ++i;      catalogFiles.add(args[i]);      continue;    }    if (args[i].equals("-w")) {      validating=false;      continue;    }    if (args[i].equals("-v")) {      validating=true;      continue;    }    if (args[i].equals("-s")) {      useSchema=true;      continue;    }    if (args[i].equals("-n")) {      nsAware=false;      continue;    }    if (args[i].equals("-N")) {      nsAware=true;      continue;    }    if (args[i].equals("-d")) {      ++i;      String debugstr=args[i];      try {        debuglevel=Integer.parseInt(debugstr);        if (debuglevel >= 0) {          debug.setDebug(debuglevel);          showWarnings=(debuglevel > 2);        }      } catch (      Exception e) {      }      continue;    }    if (args[i].equals("-E")) {      ++i;      String errstr=args[i];      try {        int errs=Integer.parseInt(errstr);        if (errs >= 0) {          maxErrs=errs;        }      } catch (      Exception e) {      }      continue;    }    xmlfile=args[i];  }  if (xmlfile == null) {    System.out.println("Usage: org.apache.xml.resolver.apps.xread [opts] xmlfile");    System.exit(1);  }  ResolvingXMLReader reader=new ResolvingXMLReader();  try {    reader.setFeature("http://xml.org/sax/features/namespaces",nsAware);    reader.setFeature("http://xml.org/sax/features/validation",validating);    if (useSchema) {      reader.setFeature("http://apache.org/xml/features/validation/schema",true);    }  } catch (  SAXException e) {  }  Catalog catalog=reader.getCatalog();  for (int count=0; count < catalogFiles.size(); count++) {    String file=(String)catalogFiles.elementAt(count);    catalog.parseCatalog(file);  }  XParseError xpe=new XParseError(showErrors,showWarnings);  xpe.setMaxMessages(maxErrs);  reader.setErrorHandler(xpe);  String parseType=validating ? "validating" : "well-formed";  String nsType=nsAware ? "namespace-aware" : "namespace-ignorant";  if (maxErrs > 0) {    System.out.println("Attempting " + parseType + ", "+ nsType+ " parse");  }  Date startTime=new Date();  try {    reader.parse(xmlfile);  } catch (  SAXException sx) {    System.out.println("SAX Exception: " + sx);  }catch (  Exception e) {    e.printStackTrace();  }  Date endTime=new Date();  long millisec=endTime.getTime() - startTime.getTime();  long secs=0;  long mins=0;  long hours=0;  if (millisec > 1000) {    secs=millisec / 1000;    millisec=millisec % 1000;  }  if (secs > 60) {    mins=secs / 60;    secs=secs % 60;  }  if (mins > 60) {    hours=mins / 60;    mins=mins % 60;  }  if (maxErrs > 0) {    System.out.print("Parse ");    if (xpe.getFatalCount() > 0) {      System.out.print("failed ");    } else {      System.out.print("succeeded ");      System.out.print("(");      if (hours > 0) {        System.out.print(hours + ":");      }      if (hours > 0 || mins > 0) {        System.out.print(mins + ":");      }      System.out.print(secs + "." + millisec);      System.out.print(") ");    }    System.out.print("with ");    int errCount=xpe.getErrorCount();    int warnCount=xpe.getWarningCount();    if (errCount > 0) {      System.out.print(errCount + " error");      System.out.print(errCount > 1 ? "s" : "");      System.out.print(" and ");    } else {      System.out.print("no errors and ");    }    if (warnCount > 0) {      System.out.print(warnCount + " warning");      System.out.print(warnCount > 1 ? "s" : "");      System.out.print(".");    } else {      System.out.print("no warnings.");    }    System.out.println("");  }  if (xpe.getErrorCount() > 0) {    System.exit(1);  }}  }
class C{  public Bundler putCharSequence(String key,CharSequence value){  bundle.putCharSequence(key,value);  return this;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public TObjectShortHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  @Override protected void processPolar(double[] r,double[] phi){  assert phi.length == prevPhi.length;  for (int i=0; i < phi.length; i++) {    deltaPhi[i]=omega[i] + MathUtils.angleToDefaultAngle(phi[i] - prevPhi[i] - omega[i]);    if (i == 123)     System.err.println("i=" + i + ": phi="+ phi[i]+ " prevPhi="+ prevPhi[i]+ " diff in defaultrange="+ MathUtils.angleToDefaultAngle(phi[i] - prevPhi[i] - omega[i])+ " omega="+ omega[i]+ " deltaPhi="+ deltaPhi[i]);  }  System.arraycopy(phi,0,prevPhi,0,phi.length);  for (int i=0; i < phi.length; i++) {    psi[i]=MathUtils.angleToDefaultAngle(psi[i] + deltaPhi[i] / rateChangeFactor);  }  System.arraycopy(psi,0,phi,0,phi.length);}  }
class C{  public void actionPerformed(ActionEvent ev){  Integer[] choices=new Integer[]{0,1,2,3,4,5,6,7,8,9,10,20,40};  Integer result=(Integer)JOptionPane.showInputDialog(getViewer().getFrame(),"Set node size","Set node size",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[1]);  if (result != null)   execute("set nodeSize=" + result + ";");}  }
class C{  protected MessagesGetHistoryAttachmentsQuery peerId(int value){  return unsafeParam("peer_id",value);}  }
class C{  public static <T>void filter(Collection<T> src_,Predicate<T> pred_,List<T> result_){  for (  T t : src_) {    if (pred_.test(t)) {      result_.add(t);    }  }}  }
class C{  public PreferredResources(InputStream in) throws IOException {  read(in);}  }
class C{  private static void extractWKTAttributes(SimpleFeatureTypeBuilder b,Document doc,Map<String,List<String>> namespacePrefixes,List<DataSourceFieldInterface> processedFieldList){  List<NodeList> completeNodeList=getNodeList(doc,namespacePrefixes,SLD_NAMESPACE,WELL_KNOWN_NAME);  for (  NodeList nodeList : completeNodeList) {    for (int index=0; index < nodeList.getLength(); index++) {      Node node=nodeList.item(index);      @SuppressWarnings("unused") String contents=node.getTextContent();    }  }}  }
class C{  protected void registerForTextFieldButton(FieldIdEnum fieldId,FieldConfigStringButtonInterface listener){  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    FieldConfigString textField=(FieldConfigString)fieldConfig;    textField.addButtonPressedListener(listener);  }}  }
class C{  public static void toXml(Object obj,Writer writer){  xstream.toXML(obj,writer);}  }
class C{  public DefaultingVolatileIntervalsService(){  this(new DefaultingDictionary<>(NoVolatileIntervalsFunction.INSTANCE));}  }
class C{  private void loadOneToOneObject(FieldMetaData fmd,OpenJPAStateManager sm,Object fieldValue){  if (fieldValue == null) {    sm.storeObject(fmd.getIndex(),null);  } else {    final ISpaceProxy proxy=(ISpaceProxy)getConfiguration().getSpace();    final IEntryPacket entry=proxy.getDirectProxy().getTypeManager().getEntryPacketFromObject(fieldValue,ObjectType.POJO);    final ClassMetaData cmd=fmd.getDeclaredTypeMetaData();    final Object oid=ApplicationIds.fromPKValues(new Object[]{entry.getID()},cmd);    final BitSet exclude=new BitSet(cmd.getFields().length);    final Object managedObject=getContext().find(oid,null,exclude,entry,0);    _relationsManager.setOwnerStateManagerForPersistentInstance(managedObject,sm,fmd);    sm.storeObject(fmd.getIndex(),managedObject);  }}  }
class C{  public void output(Source input) throws TransformerException {  output(input,new StreamResult(new PrintStream(System.out,true)));}  }
class C{  public int dragWidget(Point startPoint,Selection.Element widget,int x,int y,boolean snap,boolean isShiftDown,ViewTransform transform){  int directionLockedStatus=Selection.DIRECTION_UNLOCKED;  if (widget == null) {    return directionLockedStatus;  }  Animator.setAnimationEnabled(false);  int dX=startPoint.x - widget.origin.x;  int dY=startPoint.y - widget.origin.y;  int dragX=Math.abs(widget.widget.getDrawX() - widget.origin.x);  int dragY=Math.abs(widget.widget.getDrawY() - widget.origin.y);  if (dragX > SLOPE || dragY > SLOPE) {    mShowDecorations=false;  }  if (isShiftDown) {    if (widget.directionLocked == Selection.DIRECTION_UNLOCKED) {      if (dragX > SLOPE || dragY > SLOPE) {        if (dragX > dragY) {          widget.directionLocked=Selection.DIRECTION_LOCKED_X;          directionLockedStatus=Selection.DIRECTION_LOCKED_X;        } else {          widget.directionLocked=Selection.DIRECTION_LOCKED_Y;          directionLockedStatus=Selection.DIRECTION_LOCKED_Y;        }      } else {        snap=false;      }    }  } else {    widget.directionLocked=Selection.DIRECTION_UNLOCKED;  }  candidatePoint.setLocation(x - dX,y - dY);  ConstraintWidget base=widget.widget.getParent();  if (base != null) {    if (candidatePoint.x < base.getDrawX()) {      candidatePoint.x=base.getDrawX();    } else     if (candidatePoint.x > base.getDrawRight()) {      candidatePoint.x=base.getDrawRight();    }    if (candidatePoint.y < base.getDrawY()) {      candidatePoint.y=base.getDrawY();    } else     if (candidatePoint.y > base.getDrawBottom()) {      candidatePoint.y=base.getDrawBottom();    }  }  mSnapCandidates.clear();  ArrayList<ConstraintWidget> widgetsToCheck=new ArrayList<>();  for (  ConstraintWidget w : mWidgetsScene.getWidgets()) {    if (w.hasAncestor(widget.widget)) {      continue;    }    if (mSelection.contains(w)) {      continue;    }    widgetsToCheck.add(w);  }  if (widget.directionLocked == Selection.DIRECTION_LOCKED_X) {    candidatePoint.y=widget.origin.y;  } else   if (widget.directionLocked == Selection.DIRECTION_LOCKED_Y) {    candidatePoint.x=widget.origin.x;  }  if (snap) {    SnapPlacement.snapWidget(widgetsToCheck,widget.widget,candidatePoint,false,mSnapCandidates,transform);  }  WidgetCompanion widgetCompanion=(WidgetCompanion)widget.widget.getCompanionWidget();  WidgetInteractionTargets widgetInteraction=widgetCompanion.getWidgetInteractionTargets();  snapBias(widget.widget,candidatePoint);  widget.widget.setDrawOrigin(candidatePoint.x,candidatePoint.y);  widget.widget.forceUpdateDrawPosition();  widgetInteraction.updatePosition(transform);  mSimilarMargins.clear();  for (  SnapCandidate candidate : mSnapCandidates) {    if (candidate.margin != 0) {      mSimilarMargins.add(candidate);    }  }  for (  SnapCandidate candidate : mSnapCandidates) {    SnapPlacement.gatherMargins(mWidgetsScene.getWidgets(),mSimilarMargins,candidate.margin,candidate.source.isVerticalAnchor());  }  return directionLockedStatus;}  }
class C{  private static LimitSpec stripColumnsFromLimitSpec(DruidFactQuery query){  return ((GroupByQuery)query).getLimitSpec() == null ? null : ((GroupByQuery)query).getLimitSpec().withColumns(new LinkedHashSet<>());}  }
class C{  public void printTo(Body b,PrintWriter out){  boolean isPrecise=!useAbbreviations();  String decl=b.getMethod().getDeclaration();  out.println("    " + decl);  if (!addJimpleLn()) {  }  if (addJimpleLn()) {    setJimpleLnNum(addJimpleLnTags(getJimpleLnNum(),b.getMethod()));  }  out.println("    {");  incJimpleLnNum();  UnitGraph unitGraph=new soot.toolkits.graph.BriefUnitGraph(b);  LabeledUnitPrinter up;  if (isPrecise)   up=new NormalUnitPrinter(b); else   up=new BriefUnitPrinter(b);  if (addJimpleLn()) {    up.setPositionTagger(new AttributesUnitPrinter(getJimpleLnNum()));  }  printLocalsInBody(b,up);  printStatementsInBody(b,out,up,unitGraph);  out.println("    }");  incJimpleLnNum();}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  public TimeOffsetVolatileIntervalsFunction(long past){  this(past,FAR_FUTURE);}  }
class C{  public AdsDeleteClientsQuery deleteClients(UserActor actor,int accountId,String ids){  return new AdsDeleteClientsQuery(getClient(),actor,accountId,ids);}  }
class C{  public GroupsApproveRequestQuery approveRequest(UserActor actor,int groupId,int userId){  return new GroupsApproveRequestQuery(getClient(),actor,groupId,userId);}  }
class C{  public GroupsGetMembersQueryWithFilter groupId(String value){  return unsafeParam("group_id",value);}  }
class C{  public boolean isMassExplicit(){  return this.massExplicit;}  }
class C{  public void zLazyInitObjectsWithCallback(MithraRuntimeType mithraRuntimeType,MithraConfigurationManager.PostInitializeHook hook){  configManager.lazyInitObjectsWithCallback(mithraRuntimeType,hook);}  }
class C{  public NewsfeedGetCommentsQuery endTime(Integer value){  return unsafeParam("end_time",value);}  }
class C{  private double[] readSPTKF0Data(String lf0SPTKFile) throws IOException {  if (!FileUtils.exists(lf0SPTKFile)) {    System.out.println("SPTK Pitch file not found: " + lf0SPTKFile);    return null;  }  int numberOfFrames=getNumberOfFrames(lf0SPTKFile);  LEDataInputStream lf0Data=new LEDataInputStream(new BufferedInputStream(new FileInputStream(lf0SPTKFile)));  double[] f0Data=new double[numberOfFrames];  for (int i=0; i < numberOfFrames; i++) {    float f0Value=lf0Data.readFloat();    if (f0Value < 0) {      f0Data[i]=0.0f;    } else {      f0Data[i]=new Double(Math.exp(f0Value));    }  }  return f0Data;}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static boolean constantTimeEq(byte[] a,byte[] b){  if (a.length != b.length) {    return false;  }  int result=0;  for (int i=0; i < a.length; i++) {    result|=a[i] ^ b[i];  }  return result == 0;}  }
class C{  @Deprecated public static String percentageWithTwoCharacters(final double decimalNumber){  final int percentage=(int)Math.round(decimalNumber * PERCENTAGE_FACTOR);  return (percentage < PERCENTAGE_FACTOR) ? StringUtils.leftPad(String.valueOf(percentage),2,'0') : "XX";}  }
class C{  public void close(){  try {    if (textStorageReader != null)     textStorageReader.closeAllFiles();    if (dataIndexReader != null)     dataIndexReader.close();  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  @VisibleForTesting static boolean hasAppInstalled(Context context,String packageName){  try {    context.getPackageManager().getPackageInfo(packageName,0);    return true;  } catch (  PackageManager.NameNotFoundException e) {    return false;  }}  }
class C{  public static String wordPunc(Item item) throws ProcessException {  Item ww=item.getItemAs(Relation.TOKEN);  if (ww != null && ww.getNext() != null) {    return "";  } else {    if (ww != null && ww.getParent() != null) {      return ww.getParent().getFeatures().getString("punc");    } else {      return "";    }  }}  }
class C{  public static boolean writeToFile(String content,File file,boolean append){  if (!fileExists(file)) {    if (file.getParentFile() != null) {      if (!createDirectory(file.getParentFile().getAbsolutePath())) {        return false;      }    }    try {      file.createNewFile();    } catch (    IOException e) {      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);      return false;    }  }  OutputStreamWriter fw=null;  try {    fw=new OutputStreamWriter(new FileOutputStream(file,append),"UTF-8");    Writer bw=new BufferedWriter(fw);    bw.write(content);    bw.flush();    bw.close();  } catch (  IOException ex) {    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,ex);    return false;  } finally {    try {      fw.close();    } catch (    IOException ex) {      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,ex);      return false;    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHate_ME_TO_B(String skillcaster,String value0d,String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200490,skillcaster,value0d,skilltarget,value0,skillname);}  }
class C{  public static String formatDate(Date date){  String formatString="";  Calendar cal=Calendar.getInstance();  cal.setTime(date);  if (cal.isSet(Calendar.MINUTE))   formatString="yyyyMMdd'T'hhmmss"; else   formatString="yyyyMMdd";  SimpleDateFormat formatter=new SimpleDateFormat(formatString);  return formatter.format(date);}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("XERCES: " + msg);  }}  }
class C{  public int size(){  return _pos;}  }
class C{  @TargetApi(21) public Bundler putSizeF(String key,SizeF value){  bundle.putSizeF(key,value);  return this;}  }
class C{  @Override public Filter createFilter(){  return new IsNotEqualToExtended();}  }
class C{  public void clearAccountsOnGameServer(){  accountsOnGameServer.clear();}  }
class C{  public short valueAt(int position){  return fData[position];}  }
class C{  public static final String toString(String str){  if (str == null)   return "null";  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  toByteArray(buffer,str);  return buffer.toString();}  }
class C{  public RealVectorFormat(){  this(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,CompositeFormat.getDefaultNumberFormat());}  }
class C{  public static boolean isValidName(String name){  final int length=name.length();  if (length == 0) {    return false;  }  char ch=name.charAt(0);  if (!isNameStart(ch)) {    return false;  }  for (int i=1; i < length; ++i) {    ch=name.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  private void generateContentProviderLifecycle(Set<String> entryPoints,SootClass currentClass,JNopStmt endClassStmt,Local classLocal){  createIfStmt(endClassStmt);  JNopStmt startWhileStmt=new JNopStmt();  JNopStmt endWhileStmt=new JNopStmt();  body.getUnits().add(startWhileStmt);  createIfStmt(endWhileStmt);  boolean hasAdditionalMethods=false;  if (modelAdditionalMethods) {    for (    SootMethod currentMethod : currentClass.getMethods())     if (entryPoints.contains(currentMethod.toString()))     hasAdditionalMethods|=createPlainMethodCall(classLocal,currentMethod);  }  addCallbackMethods(currentClass);  body.getUnits().add(endWhileStmt);  if (hasAdditionalMethods)   createIfStmt(startWhileStmt);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_ASK_SUBMITTED(String value0){  return new SM_SYSTEM_MESSAGE(1300214,value0);}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[2];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !"".equals(label)) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);      float xOffset=Utils.convertDpToPixel(4f) + l.getXOffset();      float yOffset=l.getLineWidth() + labelLineHeight + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] + yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.contentLeft() + xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public boolean wantTag(Tag t){  return (t instanceof FieldReadTag);}  }
class C{  private static boolean validClass(String name){  int len=name.length();  outer:   for (int i=0; i < len && Character.isJavaIdentifierStart(name.charAt(i)); i++) {    while (++i < len) {      char c=name.charAt(i);      if (c == '.') {        continue outer;      }      if (!Character.isJavaIdentifierPart(c)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  protected SybaseDatabaseType(){  String bulkType=System.getProperty(BULK_INSERT_TYPE_KEY,"jtds");  if (bulkType.equalsIgnoreCase("file")) {    forceFile=true;  }  try {    Class<?> aClass=Class.forName("com.gs.fw.common.mithra.bulkloader.JtdsBcpBulkLoader");    this.bulkConstructor=aClass.getDeclaredConstructor(String.class,String.class,String.class,Integer.TYPE,SybaseDatabaseType.class,Boolean.TYPE);  } catch (  Exception e) {    getLogger().info("Sybase bulk loader not found. Bulk loading disabled.");  }}  }
class C{  ThirdMoment(){  super();  m3=Double.NaN;  nDevSq=Double.NaN;}  }
class C{  private boolean methodIsAndroidStub(SootMethod method){  if (!(Options.v().src_prec() == Options.src_prec_apk && method.getDeclaringClass().isLibraryClass() && SystemClassHandler.isClassInSystemPackage(method.getDeclaringClass().getName())))   return false;  for (  Unit u : method.getActiveBody().getUnits()) {    if (u instanceof DefinitionStmt) {      DefinitionStmt defStmt=(DefinitionStmt)u;      if (!(defStmt.getRightOp() instanceof ThisRef) && !(defStmt.getRightOp() instanceof ParameterRef) && !(defStmt.getRightOp() instanceof NewExpr))       return false;    } else     if (u instanceof InvokeStmt) {      InvokeStmt stmt=(InvokeStmt)u;      SootMethod callee=stmt.getInvokeExpr().getMethod();      if (!callee.getSubSignature().equals("void <init>(java.lang.String)"))       if (!(method.getDeclaringClass().hasSuperclass() && callee.getDeclaringClass() == method.getDeclaringClass().getSuperclass() && callee.getName().equals("<init>")))       return false;    } else     if (!(u instanceof ThrowStmt))     return false;  }  return true;}  }
class C{  public boolean isRepeat(){  return this.repeatProperty.getValue();}  }
class C{  public LuaCompiler(CompilerSettings settings){  this.settings=Objects.requireNonNull(settings);}  }
class C{  void clear(){  mTopSection.clear();  mMiddleSection.clear();  mBottomSection.clear();}  }
class C{  public AssertionFailedException(){}  }
class C{  private void printStatementsInBody(Body body,java.io.PrintWriter out,LabeledUnitPrinter up,UnitGraph unitGraph){  Chain<Unit> units=body.getUnits();  Unit previousStmt;  for (  Unit currentStmt : units) {    previousStmt=currentStmt;{      if (currentStmt != units.getFirst()) {        if (unitGraph.getSuccsOf(previousStmt).size() != 1 || unitGraph.getPredsOf(currentStmt).size() != 1 || up.labels().containsKey(currentStmt)) {          up.newline();        } else {          List<Unit> succs=unitGraph.getSuccsOf(previousStmt);          if (succs.get(0) != currentStmt) {            up.newline();          }        }      }      if (up.labels().containsKey(currentStmt)) {        up.unitRef(currentStmt,true);        up.literal(":");        up.newline();      }      if (up.references().containsKey(currentStmt)) {        up.unitRef(currentStmt,false);      }    }    up.startUnit(currentStmt);    currentStmt.toString(up);    up.endUnit(currentStmt);    up.literal(";");    up.newline();    if (Options.v().print_tags_in_output()) {      Iterator<Tag> tagIterator=currentStmt.getTags().iterator();      while (tagIterator.hasNext()) {        Tag t=tagIterator.next();        up.noIndent();        up.literal("/*");        up.literal(t.toString());        up.literal("*/");        up.newline();      }    }  }  out.print(up.toString());  if (addJimpleLn()) {    setJimpleLnNum(up.getPositionTagger().getEndLn());  }{    Iterator<Trap> trapIt=body.getTraps().iterator();    if (trapIt.hasNext()) {      out.println();      incJimpleLnNum();    }    while (trapIt.hasNext()) {      Trap trap=trapIt.next();      out.println("        catch " + Scene.v().quotedNameOf(trap.getException().getName()) + " from "+ up.labels().get(trap.getBeginUnit())+ " to "+ up.labels().get(trap.getEndUnit())+ " with "+ up.labels().get(trap.getHandlerUnit())+ ";");      incJimpleLnNum();    }  }}  }
class C{  public MethodDecl lookupClose(ResourceDeclaration resource){  ASTNode$State state=state();  try {    TypeDecl resourceType=resource.getTypeAccess().type();    for (    MethodDecl method : (Collection<MethodDecl>)resourceType.memberMethods("close")) {      if (method.getNumParameter() == 0) {        return method;      }    }    return null;  }  finally {  }}  }
class C{  public MonotoneChain(){  this(false);}  }
class C{  public Vector resolveAllSystemReverse(String systemId) throws IOException {  Vector resolved=new Vector();  if (systemId != null) {    Vector localResolved=resolveLocalSystemReverse(systemId);    resolved=appendVector(resolved,localResolved);  }  Vector subResolved=resolveAllSubordinateCatalogs(SYSTEMREVERSE,null,null,systemId);  return appendVector(resolved,subResolved);}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public static int exportReadName2Matches(String format,Director dir,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final MainViewer viewer=dir.getMainViewer();    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final IConnector connector=viewer.getDir().getDocument().getConnector();      final IClassificationBlock classificationBlock=connector.getClassificationBlock(viewer.getClassName());      final java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();      progressListener.setSubtask("Read names to matches");      if (taxonIds.size() > 0) {        progressListener.setMaximum(taxonIds.size());        progressListener.setProgress(0);        for (        int taxonId : taxonIds) {          Set<String> seen=new HashSet<>();          Set<Integer> allBelow;          Node v=viewer.getTaxId2Node(taxonId);          if (v.getOutDegree() == 0)           allBelow=TaxonomyData.getTree().getAllDescendants(taxonId); else {            allBelow=new HashSet<>();            allBelow.add(taxonId);          }          for (          int id : allBelow) {            if (classificationBlock.getSum(id) > 0) {              try (IReadBlockIterator it=connector.getReadsIterator(viewer.getClassName(),id,0,10000,true,true)){                while (it.hasNext()) {                  IReadBlock readBlock=it.next();                  String readId=readBlock.getReadName();                  if (!seen.contains(readId)) {                    seen.add(readId);                    writeMatches(separator,readId,readBlock,w);                    totalLines++;                  }                }              }               progressListener.checkForCancel();            }          }          progressListener.incrementProgress();        }      } else {        progressListener.setMaximum(viewer.getDir().getDocument().getNumberOfReads());        progressListener.setProgress(0);        try (IReadBlockIterator it=connector.getAllReadsIterator(0,10000,true,true)){          while (it.hasNext()) {            IReadBlock readBlock=it.next();            String readId=readBlock.getReadName();            writeMatches(separator,readId,readBlock,w);            totalLines++;            progressListener.incrementProgress();          }        }       }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  private void updateKeyWithLatestBlockKeygenerator(List<Object[]> listBasedResult){  try {    long[] data=null;    ByteArrayWrapper key=null;    for (int i=0; i < listBasedResult.size(); i++) {      key=(ByteArrayWrapper)listBasedResult.get(i)[0];      data=tableBlockExecutionInfos.getBlockKeyGenerator().getKeyArray(key.getDictionaryKey(),tableBlockExecutionInfos.getMaskedByteForBlock());      key.setDictionaryKey(QueryUtil.getMaskedKey(restructureInfos.getKeyGenerator().generateKey(data),restructureInfos.getMaxKey(),restructureInfos.getMaskByteRanges(),restructureInfos.getMaskByteRanges().length));    }  } catch (  KeyGenException e) {    LOGGER.error(e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_PROC_NOT_PROC_GIVABLE_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300504,value0);}  }
class C{  public void populateApiLevels(int apiLevel,@Nullable IAndroidTarget apiTarget,@NotNull ScopedStateStore state){  if (apiLevel >= 1) {    if (apiTarget == null) {      state.put(myBuildApiKey,Integer.toString(apiLevel));    } else     if (!apiTarget.isPlatform()) {      state.put(myBuildApiKey,AndroidTargetHash.getTargetHashString(apiTarget));    } else {      state.put(myBuildApiKey,TemplateMetadata.getBuildApiString(apiTarget.getVersion()));    }    state.put(myBuildApiLevelKey,apiLevel);    if (apiLevel >= SdkVersionInfo.HIGHEST_KNOWN_API || (apiTarget != null && apiTarget.getVersion().isPreview())) {      state.put(myTargetApiLevelKey,apiLevel);      if (apiTarget != null) {        state.put(myTargetApiStringKey,apiTarget.getVersion().getApiString());      } else {        state.put(myTargetApiStringKey,Integer.toString(apiLevel));      }    } else     if (ourHighestInstalledApiTarget != null) {      state.put(myTargetApiLevelKey,ourHighestInstalledApiTarget.getVersion().getApiLevel());      state.put(myTargetApiStringKey,ourHighestInstalledApiTarget.getVersion().getApiString());    }  }}  }
class C{  public INDArray asRowVector(BufferedImage image){  if (centerCropIfNeeded) {    image=centerCropIfNeeded(image);  }  image=scalingIfNeed(image,true);  if (channels == 3) {    return toINDArrayBGR(image).ravel();  }  int[][] ret=toIntArrayArray(image);  return NDArrayUtil.toNDArray(ArrayUtil.flatten(ret));}  }
class C{  protected AdsCreateAdsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  private Response fetchConfig(UUID id) throws Exception {  return Response.ok(configStore.fetch(id,configFactory).toJsonString(),MediaType.APPLICATION_JSON).build();}  }
class C{  public void updateView(String what){  if (getClassification().getName().equals("null")) {    classification=ClassificationManager.get(Classification.Taxonomy,true);    getViewerJTree().update();  }  super.updateView(what);  updateStatusBar();}  }
class C{  public void restoreItemContext(Map<String,Object> context,Object prevItemContext){  restoreItemContext(context,prevItemContext,MenuRenderState.retrieve(context));}  }
class C{  private static void addChildrenBlockIndex(Set<Integer> blockIndexes,CarbonDimension dimension){  for (int i=0; i < dimension.numberOfChild(); i++) {    addChildrenBlockIndex(blockIndexes,dimension.getListOfChildDimensions().get(i));    blockIndexes.add(dimension.getListOfChildDimensions().get(i).getOrdinal());  }}  }
class C{  public void onVisibilityChanged(boolean isVisible){}  }
class C{  public synchronized boolean hasPendingTasks(){  Iterator<Future<?>> futIter=pendingTasks.iterator();  while (futIter.hasNext()) {    Future<?> fut=futIter.next();    if (fut.isDone())     futIter.remove();  }  return !pendingTasks.isEmpty();}  }
class C{  private void populateFilter(FilterNode node,Filter filter){  FilterConfigInterface filterConfig=null;  if (filter != null) {    filterConfig=FilterManager.getInstance().getFilterConfig(filter);  }  node.setFilter(filter,filterConfig);  model.reload();  displayResult();}  }
class C{  public boolean isStreaming(String file){  if (file.contains("http://") || file.contains("https://") || file.contains("rtsp://")) {    return true;  } else {    return false;  }}  }
class C{  public static final boolean anyIsTrue(Boolean... conditions){  if (conditions != null) {    for (    Boolean condition : conditions) {      if (condition != null && condition.booleanValue()) {        return true;      }    }  }  return false;}  }
class C{  public void clear(){  m_lucene=new LuceneSearcher();  super.clear();}  }
class C{  public static void addRecentFile(String pathName){  int maxRecentFiles=ProgramProperties.get(MAXRECENTFILES,20);  StringTokenizer st=new StringTokenizer(ProgramProperties.get(RECENTFILES,""),";");  int count=1;  java.util.List<String> recentFiles=new LinkedList<>();  recentFiles.add(pathName);  while (st.hasMoreTokens()) {    String next=st.nextToken();    if (!pathName.equals(next)) {      recentFiles.add(next);      if (++count == maxRecentFiles)       break;    }  }  StringBuilder buf=new StringBuilder();  for (  String recentFile : recentFiles)   buf.append(recentFile).append(";");  ProgramProperties.put(RECENTFILES,buf.toString());  notifyListChange(RECENTFILES);}  }
class C{  public boolean isApplicable(){  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;}  }
class C{  private LitePalAttr(){}  }
class C{  private static void extractLineItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){  logger.log(Level.FINE,"line found" + currentGroupNode.getTextContent());  if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {    float x1=0;    float y1=0;    float x2=0;    float y2=0;    NamedNodeMap a=currentGroupNode.getAttributes();    int len=a.getLength();    boolean pureTransparent=false;    for (int j=0; j < len; j++) {      Node n=a.item(j);      String name=n.getNodeName();      String value=n.getNodeValue();      if (name.equals(SVG_STYLE)) {        addStyleToPath(child,value);        if (value.contains("opacity:0;")) {          pureTransparent=true;        }      } else       if (presentationMap.containsKey(name)) {        child.fillPresentationAttributes(name,value);      } else       if (name.equals("clip-path") && value.startsWith("url(#SVGID_")) {      } else       if (name.equals("x1")) {        x1=Float.parseFloat(value);      } else       if (name.equals("y1")) {        y1=Float.parseFloat(value);      } else       if (name.equals("x2")) {        x2=Float.parseFloat(value);      } else       if (name.equals("y2")) {        y2=Float.parseFloat(value);      }    }    if (!pureTransparent && avg != null && !Float.isNaN(x1) && !Float.isNaN(y1) && !Float.isNaN(x2) && !Float.isNaN(y2)) {      PathBuilder builder=new PathBuilder();      builder.absoluteMoveTo(x1,y1);      builder.absoluteLineTo(x2,y2);      child.setPathData(builder.toString());    }  }}  }
class C{  public void updateGestureRotation(float x,float y){  mChart.setRotationAngle(mChart.getAngleForPoint(x,y) - mStartAngle);}  }
class C{  private Tags(Map<String,MetricValue> tags){  tags_=unmodifiableSortedMap(new TreeMap<String,MetricValue>(tags));  tags_.keySet().forEach(null);  tags_.values().forEach(null);  if (!tags_.values().stream().allMatch(null))   throw new IllegalArgumentException("tag with absent metric value");  if (tags_.values().stream().map(null).anyMatch(null))   throw new IllegalArgumentException("tag with histogram makes no sense");}  }
class C{  private int initFromStream(final InputStream is) throws MathIllegalStateException, IOException {  for (int i=1; i <= BITS; i++) {    direction[0][i]=1l << (BITS - i);  }  final Charset charset=Charset.forName(FILE_CHARSET);  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,charset));  int dim=-1;  try {    reader.readLine();    int lineNumber=2;    int index=1;    String line=null;    while ((line=reader.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line," ");      try {        dim=Integer.parseInt(st.nextToken());        if (dim >= 2 && dim <= dimension) {          final int s=Integer.parseInt(st.nextToken());          final int a=Integer.parseInt(st.nextToken());          final int[] m=new int[s + 1];          for (int i=1; i <= s; i++) {            m[i]=Integer.parseInt(st.nextToken());          }          initDirectionVector(index++,a,m);        }        if (dim > dimension) {          return dim;        }      } catch (      NoSuchElementException|NumberFormatException e) {        throw new MathIllegalStateException(LocalizedCoreFormats.CANNOT_PARSE,line,lineNumber);      }      lineNumber++;    }  }  finally {    reader.close();  }  return dim;}  }
class C{  public ServiceConfigurationError(String msg){  super(msg);}  }
class C{  public boolean hasUserGroupsToAlert(){  return userGroupsToAlert != null && !userGroupsToAlert.isEmpty();}  }
class C{  @SuppressWarnings("deprecation") private Bitmap onSelectFromGalleryResult(Intent data){  Uri selectedImageUri=data.getData();  String[] projection={MediaStore.MediaColumns.DATA};  Cursor cursor=this.activity.managedQuery(selectedImageUri,projection,null,null,null);  int column_index=cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA);  cursor.moveToFirst();  String selectedImagePath=cursor.getString(column_index);  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(selectedImagePath,options);  options.inJustDecodeBounds=false;  Bitmap bm=BitmapFactory.decodeFile(selectedImagePath,options);  bm=resizePhoto(bm,this.resizePhoto,true);  getPhotoFileUri(selectedImagePath);  if (bm != null)   return bm; else   return null;}  }
class C{  public static void createFlight(android.support.v4.app.Fragment fragment,int requestCode,Coordinate coordinate,@Nullable HashMap<String,String> extras){  Intent intent=new Intent(fragment.getContext(),CreateFlightActivity.class);  intent.putExtra(CreateFlightActivity.COORDINATE,coordinate);  if (extras != null) {    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);  }  fragment.startActivityForResult(intent,requestCode);}  }
class C{  public void removeSootOutputEventListener(ISootOutputEventListener listener){  sootOutputEventListeners.remove(listener);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public void destroy(){  super.destroy();  destroyPromoView();  destroyPeekPromoControl();  destroySearchBarControl();}  }
class C{  private static String[] toSuffixes(String[] extensions){  String[] suffixes=new String[extensions.length];  for (int i=0; i < extensions.length; i++) {    suffixes[i]="." + extensions[i];  }  return suffixes;}  }
class C{  public static Map<String,Object> dayStartCapacityAvailable(GenericValue techDataCalendarWeek,int dayStart){  Map<String,Object> result=FastMap.newInstance();  int moveDay=0;  Double capacity=null;  Time startTime=null;  while (capacity == null || capacity.doubleValue() == 0) {switch (dayStart) {case Calendar.MONDAY:      capacity=techDataCalendarWeek.getDouble("mondayCapacity");    startTime=techDataCalendarWeek.getTime("mondayStartTime");  break;case Calendar.TUESDAY:capacity=techDataCalendarWeek.getDouble("tuesdayCapacity");startTime=techDataCalendarWeek.getTime("tuesdayStartTime");break;case Calendar.WEDNESDAY:capacity=techDataCalendarWeek.getDouble("wednesdayCapacity");startTime=techDataCalendarWeek.getTime("wednesdayStartTime");break;case Calendar.THURSDAY:capacity=techDataCalendarWeek.getDouble("thursdayCapacity");startTime=techDataCalendarWeek.getTime("thursdayStartTime");break;case Calendar.FRIDAY:capacity=techDataCalendarWeek.getDouble("fridayCapacity");startTime=techDataCalendarWeek.getTime("fridayStartTime");break;case Calendar.SATURDAY:capacity=techDataCalendarWeek.getDouble("saturdayCapacity");startTime=techDataCalendarWeek.getTime("saturdayStartTime");break;case Calendar.SUNDAY:capacity=techDataCalendarWeek.getDouble("sundayCapacity");startTime=techDataCalendarWeek.getTime("sundayStartTime");break;}if (capacity == null || capacity.doubleValue() == 0) {moveDay+=1;dayStart=(dayStart == 7) ? 1 : dayStart + 1;}}result.put("capacity",capacity);result.put("startTime",startTime);result.put("moveDay",Integer.valueOf(moveDay));return result;}  }
class C{  public static BigInteger pow(final BigInteger k,int e) throws IllegalArgumentException {  if (e < 0) {    throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",k,e);  }  return k.pow(e);}  }
class C{  public static int patchLessMemory(RandomAccessFile oldFile,File newFile,File diffFile,int extLen) throws IOException {  if (oldFile == null || oldFile.length() <= 0) {    return RETURN_OLD_FILE_ERR;  }  if (newFile == null) {    return RETURN_NEW_FILE_ERR;  }  if (diffFile == null || diffFile.length() <= 0) {    return RETURN_DIFF_FILE_ERR;  }  byte[] diffBytes=new byte[(int)diffFile.length()];  InputStream diffInputStream=new FileInputStream(diffFile);  try {    BSUtil.readFromStream(diffInputStream,diffBytes,0,diffBytes.length);  }  finally {    diffInputStream.close();  }  return patchLessMemory(oldFile,(int)oldFile.length(),diffBytes,diffBytes.length,newFile,extLen);}  }
class C{  public int binarySearch(short value){  return binarySearch(value,0,_pos);}  }
class C{  public IndexedFrame(int index){  this.index=index;}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  @Override public Schema schema(){  return schema;}  }
class C{  public void assertTextPresentIgnoreCase(String expected,String actual){  assertTextPresent(expected.toLowerCase(),actual.toLowerCase());}  }
class C{  public static JavaRDD<List<Writable>> executeJoin(Join join,JavaRDD<List<Writable>> left,JavaRDD<List<Writable>> right){  JavaPairRDD<List<Writable>,JoinValue> leftJV=left.mapToPair(new MapToJoinValuesFunction(true,join));  JavaPairRDD<List<Writable>,JoinValue> rightJV=right.mapToPair(new MapToJoinValuesFunction(false,join));  JavaPairRDD<List<Writable>,JoinValue> both=leftJV.union(rightJV);  JavaPairRDD<List<Writable>,Iterable<JoinValue>> grouped=both.groupByKey();  return grouped.flatMap(new ExecuteJoinFlatMapFunction(join));}  }
class C{  private boolean checkDatabase(){  SQLiteDatabase checkDB=null;  try {    String path=DB_PATH + DB_NAME;    checkDB=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);  } catch (  SQLException e) {    e.printStackTrace();    Log.e("DB_ERROR","checkDatabase(): Could not open DB");  }  if (checkDB != null)   checkDB.close();  return checkDB != null ? true : false;}  }
class C{  public HaltonSequenceGenerator(final int dimension) throws MathIllegalArgumentException {  this(dimension,PRIMES,WEIGHTS);}  }
class C{  public static RecyclerView.ViewHolder createViewHolder(ViewGroup parent){  View view=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_message,null);  return new MessageHolder(view);}  }
class C{  @Override public SparseGradient log10(){  return new SparseGradient(FastMath.log10(value),1.0 / (FastMath.log(10.0) * value),derivatives);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200871,skillcaster,skillname);}  }
class C{  protected DocsAddQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static boolean isBodyVelocityEnabled(){  return bodyVelocityEnabled;}  }
class C{  public void incrementProgress(){  isSpinning=false;  progress++;  setText(Math.round(((float)progress / 360) * 100) + "%");  spinHandler.sendEmptyMessage(0);}  }
class C{  private void tryReduceLevel(){  HeadIndex<K,V> h=head;  HeadIndex<K,V> d;  HeadIndex<K,V> e;  if (h.level > 3 && (d=(HeadIndex<K,V>)h.down) != null && (e=(HeadIndex<K,V>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  public static Map<String,String> splitStrParams(String paramStr,String paramDelim){  Map<String,String> res=FastMap.newInstance();  for (  String pair : paramStr.split(paramDelim)) {    String[] parts=pair.split("=",2);    if (parts.length >= 2) {      res.put(parts[0],parts[1]);    }  }  return res;}  }
class C{  public boolean isDrawInsideEnabled(){  return mDrawInside;}  }
class C{  protected boolean isValidScheme(String scheme){  if (scheme == null) {    return false;  }  if (!SCHEME_PATTERN.matcher(scheme).matches()) {    return false;  }  if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {    return false;  }  return true;}  }
class C{  public boolean containsThumbnail(int userPage,int page,float width,float height,RectF pageRelativeBounds){  PagePart fakePart=new PagePart(userPage,page,null,width,height,pageRelativeBounds,true,0);synchronized (thumbnails) {    for (    PagePart part : thumbnails) {      if (part.equals(fakePart)) {        return true;      }    }    return false;  }}  }
class C{  private void scrollUpdated(float x,float y,float dx,float dy,float tx,float ty){  if (mEdgeSwipeHandler != null && mEdgeSwipeStarted) {    mEdgeSwipeHandler.swipeUpdated(x,y,dx,dy,tx,ty);  }}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  WithinImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new WithinExtended();  } else {    filter=new WithinExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public static Map<String,Map<String,Map<String,Object>>> prepareField(Map<String,?> inputFields,Map<String,Object> queryStringMap,Map<String,List<Object[]>> origValueMap){  Map<String,Map<String,Map<String,Object>>> normalizedFields=new LinkedHashMap<String,Map<String,Map<String,Object>>>();  for (  String fieldNameRaw : inputFields.keySet()) {    String fieldNameRoot=null;    String fieldPair=null;    Object fieldValue=null;    int iPos=-1;    int iPos2=-1;    Map<String,Map<String,Object>> subMap=null;    Map<String,Object> subMap2=null;    String fieldMode=null;    fieldValue=inputFields.get(fieldNameRaw);    if (ObjectType.isEmpty(fieldValue)) {      continue;    }    queryStringMap.put(fieldNameRaw,fieldValue);    iPos=fieldNameRaw.indexOf("_");    if (iPos >= 0) {      String suffix=fieldNameRaw.substring(iPos + 1);      iPos2=suffix.indexOf("_");      if (iPos2 == 1) {        continue;      }    }    if (iPos < 0) {      fieldNameRoot=fieldNameRaw;      fieldPair="fld0";      fieldMode="value";    } else {      fieldNameRoot=fieldNameRaw.substring(0,iPos);      String suffix=fieldNameRaw.substring(iPos + 1);      iPos2=suffix.indexOf("_");      if (iPos2 < 0) {        if (suffix.startsWith("fld")) {          fieldPair=suffix;          fieldMode="value";        } else {          fieldPair="fld0";          fieldMode=suffix;        }      } else {        String tkn0=suffix.substring(0,iPos2);        String tkn1=suffix.substring(iPos2 + 1);        if (tkn0.startsWith("fld")) {          fieldPair=tkn0;          fieldMode=tkn1;        } else {          fieldPair=tkn1;          fieldMode=tkn0;        }      }    }    subMap=normalizedFields.get(fieldNameRoot);    if (subMap == null) {      subMap=new LinkedHashMap<String,Map<String,Object>>();      normalizedFields.put(fieldNameRoot,subMap);    }    subMap2=subMap.get(fieldPair);    if (subMap2 == null) {      subMap2=new LinkedHashMap<String,Object>();      subMap.put(fieldPair,subMap2);    }    subMap2.put(fieldMode,fieldValue);    List<Object[]> origList=origValueMap.get(fieldNameRoot);    if (origList == null) {      origList=new LinkedList<Object[]>();      origValueMap.put(fieldNameRoot,origList);    }    Object[] origValues={fieldNameRaw,fieldValue};    origList.add(origValues);  }  return normalizedFields;}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  int leftRightLabelOverhang=(getWidth() > 200 ? 100 : 0);  double drawWidth=(getWidth() - 2 * leftRightLabelOverhang);  double drawHeight=(getHeight() - topMargin - 20- 20);  double factorX=drawWidth / boundingBox.getWidth();  double factorY=drawHeight / boundingBox.getHeight();  double dx=leftRightLabelOverhang - factorX * boundingBox.getMinX() + (drawWidth - factorX * boundingBox.getWidth()) / 2;  double dy=topMargin + 20 - factorY * boundingBox.getMinY() + (drawHeight - factorY * boundingBox.getHeight()) / 2;  Line2D line=new Line2D.Double();  gc.setColor(Color.BLACK);  for (Edge e=graph.getFirstEdge(); e != null; e=graph.getNextEdge(e)) {    Node v=e.getSource();    Point2D pv=((NodeData)v.getData()).getLocation();    Node w=e.getTarget();    Point2D pw=((NodeData)w.getData()).getLocation();    try {      line.setLine(factorX * pv.getX() + dx,factorY * pv.getY() + dy,factorX * pw.getX() + dx,factorY * pw.getY() + dy);      gc.draw(line);    } catch (    Exception ex) {    }  }  double maxPrevalence=1;  for (Node v=graph.getFirstNode(); v != null; v=graph.getNextNode(v)) {    Integer prevalence=((NodeData)v.getData()).getPrevalence();    if (prevalence > maxPrevalence)     maxPrevalence=prevalence;  }  for (Node v=graph.getFirstNode(); v != null; v=graph.getNextNode(v)) {    Point2D pv=((NodeData)v.getData()).getLocation();    Integer prevalence=((NodeData)v.getData()).getPrevalence();    double value=0;    if (scalingType == ChartViewer.ScalingType.PERCENT) {      value=prevalence / maxPrevalence;    } else     if (scalingType == ChartViewer.ScalingType.LOG) {      value=Math.log(prevalence + 1) / Math.log(maxPrevalence + 1);    } else     if (scalingType == ChartViewer.ScalingType.SQRT) {      value=Math.sqrt(prevalence) / Math.sqrt(maxPrevalence);    } else     value=prevalence / maxPrevalence;    double size=Math.max(1,value * (double)maxRadius);    int[] oval={(int)(factorX * pv.getX() + dx - size),(int)(factorY * pv.getY() + dy - size),(int)(2 * size),(int)(2 * size)};    gc.setColor(Color.WHITE);    gc.fillOval(oval[0],oval[1],oval[2],oval[3]);  }  for (Node v=graph.getFirstNode(); v != null; v=graph.getNextNode(v)) {    String className=((NodeData)v.getData()).getLabel();    Point2D pv=((NodeData)v.getData()).getLocation();    Integer prevalence=((NodeData)v.getData()).getPrevalence();    double value=0;    if (scalingType == ChartViewer.ScalingType.PERCENT) {      value=prevalence / maxPrevalence;    } else     if (scalingType == ChartViewer.ScalingType.LOG) {      value=Math.log(prevalence + 1) / Math.log(maxPrevalence + 1);    } else     if (scalingType == ChartViewer.ScalingType.SQRT) {      value=Math.sqrt(prevalence) / Math.sqrt(maxPrevalence);    } else     value=prevalence / maxPrevalence;    double size=Math.max(1,value * (double)maxRadius);    int[] oval={(int)(factorX * pv.getX() + dx - size),(int)(factorY * pv.getY() + dy - size),(int)(2 * size),(int)(2 * size)};    Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className),150);    gc.setColor(color);    if (sgc != null)     sgc.setCurrentItem(new String[]{null,className});    gc.fillOval(oval[0],oval[1],oval[2],oval[3]);    if (sgc != null)     sgc.clearCurrentItem();    boolean isSelected=getChartData().getChartSelection().isSelected(null,className);    if (isSelected) {      gc.setColor(ProgramProperties.SELECTION_COLOR);      if (oval[2] <= 1) {        oval[0]-=1;        oval[1]-=1;        oval[2]+=2;        oval[3]+=2;      }      gc.setStroke(HEAVY_STROKE);      gc.drawOval(oval[0],oval[1],oval[2],oval[3]);      gc.setStroke(NORMAL_STROKE);    } else {      gc.setColor(color.darker());      gc.drawOval(oval[0],oval[1],oval[2],oval[3]);    }    if ((showValues && value > 0) || isSelected) {      String label="" + prevalence;      valuesList.add(new DrawableValue(label,oval[0] + oval[2] + 2,oval[1] + oval[3] / 2,isSelected));    }  }  if (isShowXAxis()) {    gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));    for (Node v=graph.getFirstNode(); v != null; v=graph.getNextNode(v)) {      String className=((NodeData)v.getData()).getLabel();      Point2D pv=((NodeData)v.getData()).getLocation();      Integer prevalence=((NodeData)v.getData()).getPrevalence();      double value=0;      if (scalingType == ChartViewer.ScalingType.PERCENT) {        value=prevalence / maxPrevalence;      } else       if (scalingType == ChartViewer.ScalingType.LOG) {        value=Math.log(prevalence + 1) / Math.log(maxPrevalence + 1);      } else       if (scalingType == ChartViewer.ScalingType.SQRT) {        value=Math.sqrt(prevalence) / Math.sqrt(maxPrevalence);      } else       value=prevalence / maxPrevalence;      double size=Math.max(1,value * (double)maxRadius);      int[] oval={(int)(factorX * pv.getX() + dx - size),(int)(factorY * pv.getY() + dy - size),(int)(2 * size),(int)(2 * size)};      Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      int x=(int)Math.round(oval[0] + oval[2] / 2 - labelSize.getWidth() / 2);      int y=oval[1] - 2;      if (getChartData().getChartSelection().isSelected(null,className)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));      if (sgc != null)       sgc.setCurrentItem(new String[]{null,className});      gc.drawString(className,x,y);      if (sgc != null)       sgc.clearCurrentItem();    }  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,false,true);    valuesList.clear();  }}  }
class C{  @Override public void itemSelected(DefaultMutableTreeNode node,Object userObject){  SelectedSymbol selectedSymbol=SelectedSymbol.getInstance();  Symbolizer symbolizer=(Symbolizer)userObject;  if (node != null) {    DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();    if (parent != null) {      if (parent.getUserObject() instanceof Rule) {        Rule rule=(Rule)parent.getUserObject();        selectedSymbol.setRule(rule);      }    }    selectedSymbol.setSymbolizer(symbolizer);  }}  }
class C{  @Override public void forceUpdate(){  dataMatrix.clear();}  }
class C{  public void clearCounters(){  this.hitCount.set(0);  this.missCountNotFound.set(0);  this.missCountExpired.set(0);  this.missCountSoftRef.set(0);  this.removeHitCount.set(0);  this.removeMissCount.set(0);}  }
class C{  public static Uri buildDirUri(){  return BASE_URI.buildUpon().appendPath("items").build();}  }
class C{  public IntIterator columnRows(int col,boolean reverse){  return new ColumnRowIterator(rows(reverse),col);}  }
class C{  public String scanNCName() throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(scanNCName: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  if (XMLChar.isNCNameStart(fCurrentEntity.ch[offset])) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=fCurrentEntity.ch[offset];      offset=0;      if (load(1,false)) {        fCurrentEntity.columnNumber++;        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);        if (DEBUG_BUFFER) {          System.out.print(")scanNCName: ");          XMLEntityManager.print(fCurrentEntity);          System.out.println(" -> " + String.valueOf(symbol));        }        return symbol;      }    }    while (XMLChar.isNCName(fCurrentEntity.ch[fCurrentEntity.position])) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length;  String symbol=null;  if (length > 0) {    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);  }  if (DEBUG_BUFFER) {    System.out.print(")scanNCName: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> " + String.valueOf(symbol));  }  return symbol;}  }
class C{  public int addOrIncreaseItem(String productId,BigDecimal selectedAmount,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> features,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,String itemGroupNumber,String parentProductId,LocalDispatcher dispatcher) throws CartItemModifyException, ItemNotFoundException {  return addOrIncreaseItem(productId,selectedAmount,quantity,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,features,attributes,prodCatalogId,configWrapper,itemType,itemGroupNumber,parentProductId,dispatcher);}  }
class C{  public UnrevealBuilder withCurvedTranslation(){  this.mCurvedTranslation=true;  return this;}  }
class C{  public SortByExtension(){  super();}  }
class C{  public DatabaseGetStreetsByIdQuery(VkApiClient client,List<Integer> streetIds){  super(client,"database.getStreetsById",Utils.buildParametrizedType(List.class,Street.class));  streetIds(streetIds);}  }
class C{  private void checkLexicographicIterator(Combinations c){  final Comparator<int[]> comp=c.comparator();  final int n=c.getN();  final int k=c.getK();  int[] lastIterate=null;  long numIterates=0;  for (  int[] iterate : c) {    Assert.assertEquals(k,iterate.length);    if (lastIterate != null) {      Assert.assertTrue(comp.compare(iterate,lastIterate) == 1);    }    for (int i=1; i < iterate.length; i++) {      Assert.assertTrue(iterate[i] > iterate[i - 1]);    }    lastIterate=iterate;    ++numIterates;  }  Assert.assertEquals(CombinatoricsUtils.binomialCoefficient(n,k),numIterates);}  }
class C{  public static boolean isUnix(){  return (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0);}  }
class C{  public void contract(){  final double[] tempArray=new double[numElements + 1];  System.arraycopy(internalArray,startIndex,tempArray,0,numElements);  internalArray=tempArray;  startIndex=0;}  }
class C{  private void updateExpression(Expression expression){  if (expression instanceof LiteralExpressionImpl) {    LiteralExpressionImpl literal=(LiteralExpressionImpl)expression;    Object value=literal.getValue();    if (value instanceof String) {      String stringValue=(String)value;      if (!isStringNumeric(stringValue)) {        if (!(stringValue.startsWith(SINGLE_QUOTE) && stringValue.endsWith(SINGLE_QUOTE))) {          String newValue=SINGLE_QUOTE + stringValue + SINGLE_QUOTE;          literal.setValue(newValue);        }      }    }  }}  }
class C{  public boolean gotoNext(){  if (currentTaxonIterator == null) {    gotoFirst();  } else   if (currentTaxonIterator.hasNext())   currentTaxonId=currentTaxonIterator.next(); else {    currentTaxonIterator=null;    currentTaxonId=null;  }  return isCurrentSet();}  }
class C{  public int findFirstVisibleItemPosition(){  LayoutManager manager=getLayoutManager();  int firstVisibleItems=0;  if (manager instanceof LinearLayoutManager) {    firstVisibleItems=((LinearLayoutManager)manager).findFirstVisibleItemPosition();  } else   if (manager instanceof GridLayoutManager) {    firstVisibleItems=((GridLayoutManager)manager).findFirstVisibleItemPosition();  } else   if (manager instanceof StaggeredGridLayoutManager) {    StaggeredGridLayoutManager sg=((StaggeredGridLayoutManager)manager);    int[] items=new int[sg.getSpanCount()];    items=((StaggeredGridLayoutManager)manager).findFirstVisibleItemPositions(items);    firstVisibleItems=items[0];  }  return firstVisibleItems;}  }
class C{  public DocsGetUploadServerQuery(VkApiClient client,UserActor actor){  super(client,"docs.getUploadServer",GetUploadServerResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private boolean positiveRank(Matrix3f matrix,float[] maxMagnitudeStore,Vector3f maxRowStore){  maxMagnitudeStore[0]=-1f;  int iRow, iCol, iMaxRow=-1;  for (iRow=0; iRow < 3; iRow++) {    for (iCol=iRow; iCol < 3; iCol++) {      float fAbs=FastMath.abs(matrix.get(iRow,iCol));      if (fAbs > maxMagnitudeStore[0]) {        maxMagnitudeStore[0]=fAbs;        iMaxRow=iRow;      }    }  }  maxRowStore.set(matrix.getRow(iMaxRow));  return maxMagnitudeStore[0] >= FastMath.ZERO_TOLERANCE;}  }
class C{  public void rollbackCurrentVariantsFromTMToDate(DateTime rollbackDateTime,Long tmId){  rollbackCurrentVariantsFromTMToDate(rollbackDateTime,tmId,new CurrentVariantRollbackParameters());}  }
class C{  public static void startGameTime(){  startGameTime=true;}  }
class C{  private DBUtility(){}  }
class C{  final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  for (; ; ) {    next=next.next;    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public void notifySkilluseObservers(Skill skill){  notifyObservers(ObserverType.SKILLUSE,skill);}  }
class C{  public static <T extends FieldElement<T>>FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal){  final FieldMatrix<T> m=createFieldMatrix(diagonal[0].getField(),diagonal.length,diagonal.length);  for (int i=0; i < diagonal.length; ++i) {    m.setEntry(i,i,diagonal[i]);  }  return m;}  }
class C{  protected boolean isStressed(String phone){  return phone.endsWith("1");}  }
class C{  public boolean isInfinite(){  return !isNaN() && (Double.isInfinite(x.getReal()) || Double.isInfinite(y.getReal()) || Double.isInfinite(z.getReal()));}  }
class C{  public boolean canPowerUp(boolean considerMaxCPLimitForPlayerLevel) throws NoSuchItemException {  return considerMaxCPLimitForPlayerLevel ? this.canPowerUp() && (this.getCp() < this.getMaxCpForPlayer()) : canPowerUp();}  }
class C{  public JSONArray put(Map value){  put(new JSONObject(value));  return this;}  }
class C{  public EqualizeHistTransform(Random random,int conversionCode){  super(random);  this.conversionCode=conversionCode;  converter=new OpenCVFrameConverter.ToMat();}  }
class C{  public BigReal(int val,MathContext mc){  d=new BigDecimal(val,mc);}  }
class C{  public static String formatCreateDate(String createDate){  String result="";  if (!TextUtils.isEmpty(createDate) && createDate.length() >= 10) {    result=createDate.substring(0,10);  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARRY_ME_TO_B(String value0){  return new SM_SYSTEM_MESSAGE(1201085,value0);}  }
class C{  @Override public void close() throws RemoteException {  s.close();  if (rconn.getAutoCommit())   rconn.commit(); else   rconn.endStatement();}  }
class C{  public void addColumn(String name,Expression expr){  addColumn(name,ColumnFactory.getColumn(this,expr));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200799,skillcaster,num0,skillname);}  }
class C{  private void registerMetrics(){  if (_metricName == null) {    return;  }  Metrics metrics=_cluster.getMetrics();  _metricRegistry.register(MetricRegistry.name("bv.emodb.cql",_metricName,"ConnectionPool","connected-to-hosts"),metrics.getConnectedToHosts());  _metricRegistry.register(MetricRegistry.name("bv.emodb.cql",_metricName,"ConnectionPool","open-connections"),metrics.getOpenConnections());  _metricRegistry.register(MetricRegistry.name("bv.emodb.cql",_metricName,"ConnectionPool","connection-errors"),metrics.getErrorMetrics().getConnectionErrors());  _metricRegistry.register(MetricRegistry.name("bv.emodb.cql",_metricName,"ConnectionPool","read-timeouts"),metrics.getErrorMetrics().getReadTimeouts());  _metricRegistry.register(MetricRegistry.name("bv.emodb.cql",_metricName,"ConnectionPool","write-timeouts"),metrics.getErrorMetrics().getWriteTimeouts());  _metricRegistry.register(MetricRegistry.name("bv.emodb.cql",_metricName,"ConnectionPool","ignores"),metrics.getErrorMetrics().getIgnores());  _metricRegistry.register(MetricRegistry.name("bv.emodb.cql",_metricName,"ConnectionPool","unavailables"),metrics.getErrorMetrics().getUnavailables());}  }
class C{  public boolean isDownloading(Account account,OCFile file){  if (account == null || file == null)   return false;  return (mPendingDownloads.contains(account.name,file.getRemotePath()));}  }
class C{  public final TestSubscriber<T> assertErrorWith(Consumer<? super Throwable> expectation){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s == 1) {    expectation.accept(errors.get(0));  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  public void close() throws SAException {}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("VerifyingProxyPreparer[");  if (type != SET_CONSTRAINTS) {    sb.append(type == AS_IS ? "false, " : "true, ");  }  sb.append(loader);  sb.append(", {");  for (int i=0; i < contextElements.length; i++) {    if (i > 0) {      sb.append(", ");    }    sb.append(contextElements[i]);  }  if (principals == null) {    sb.append("}, null, {");  } else {    sb.append("}, {");    for (int i=0; i < principals.length; i++) {      if (i > 0) {        sb.append(", ");      }      sb.append(principals[i]);    }    sb.append("}, {");  }  for (int i=0; i < permissions.length; i++) {    if (i > 0) {      sb.append(", ");    }    sb.append(permissions[i]);  }  sb.append("}]");  return sb.toString();}  }
class C{  public void clearSelection(){  List<Integer> selection=getSelectedItems();  mSelectedItems.clear();  for (  Integer i : selection) {    notifyItemChanged(i);  }}  }
class C{  public void train(Map CategoryValues,String sSuggestedCategory,String sFinalCategory){  if (CategoryValues == null)   CategoryValues=new HashMap();  if (CategoryValues.size() > 0)   vPreviousDecisions.add(new DecisionSupport(CategoryValues,sSuggestedCategory,sFinalCategory));}  }
class C{  public static VendorOptionVersion fromString(String value){  String[] components=value.split(DELIMETER);  if (components.length == 3) {    Class<?> classType=null;    VersionData minimumVersion=null;    VersionData maximumVersion=null;    try {      classType=Class.forName(components[0]);    } catch (    ClassNotFoundException e) {      ConsoleManager.getInstance().error(VendorOptionVersion.class,"Unknown VendorOption class : " + components[0]);      return null;    }    if (components[1].compareTo(NULL_STRING) != 0) {      minimumVersion=VersionData.getDecodedString(components[1]);    }    if (components[2].compareTo(NULL_STRING) != 0) {      maximumVersion=VersionData.getDecodedString(components[2]);    }    VendorOptionVersion vendorOptionVersion=new VendorOptionVersion(classType,minimumVersion,maximumVersion);    return vendorOptionVersion;  }  return null;}  }
class C{  public void shutdown(){  check();  state=SHUTDOWN;synchronized (this) {    notifyAll();  }}  }
class C{  public static void w(String tag,String msg){  if (isDebug) {    Log.w(tag,msg);  }}  }
class C{  public static CompactionType determineCompactionType(String metaFolderPath){  String minorCompactionStatusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.minorCompactionRequiredFile;  String majorCompactionStatusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.majorCompactionRequiredFile;  try {    if (FileFactory.isFileExist(minorCompactionStatusFile,FileFactory.getFileType(minorCompactionStatusFile))) {      return CompactionType.MINOR_COMPACTION;    }    if (FileFactory.isFileExist(majorCompactionStatusFile,FileFactory.getFileType(majorCompactionStatusFile))) {      return CompactionType.MAJOR_COMPACTION;    }  } catch (  IOException e) {    LOGGER.error("Exception in determining the compaction request file " + e.getMessage());  }  return CompactionType.MINOR_COMPACTION;}  }
class C{  public MarketEditCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  private static final AttackStatus calculateMainHandResult(Creature attacker,Creature attacked,AttackStatus attackerStatus,int damage,List<AttackResult> attackList){  AttackStatus mainHandStatus=attackerStatus;  if (mainHandStatus == null) {    mainHandStatus=calculatePhysicalStatus(attacker,attacked,true);  }  int mainHandHits=1;  if (attacker instanceof Player) {    Item mainHandWeapon=((Player)attacker).getEquipment().getMainHandWeapon();    if (mainHandWeapon != null) {      mainHandHits=Rnd.get(1,mainHandWeapon.getItemTemplate().getWeaponStats().getHitCount());    }  } else {    mainHandHits=Rnd.get(1,3);  }  splitPhysicalDamage(attacker,attacked,mainHandHits,damage,mainHandStatus,attackList);  return mainHandStatus;}  }
class C{  public String toString(){  return " at " + index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public boolean removeDataSet(int index){  if (index >= mDataSets.size() || index < 0)   return false;  T set=mDataSets.get(index);  return removeDataSet(set);}  }
class C{  protected Dfp(final DfpField field,final String s){  mant=new int[field.getRadixDigits()];  sign=1;  exp=0;  nans=FINITE;  this.field=field;  boolean decimalFound=false;  final int rsize=4;  final int offset=4;  final char[] striped=new char[getRadixDigits() * rsize + offset * 2];  if (s.equals(POS_INFINITY_STRING)) {    sign=(byte)1;    nans=INFINITE;    return;  }  if (s.equals(NEG_INFINITY_STRING)) {    sign=(byte)-1;    nans=INFINITE;    return;  }  if (s.equals(NAN_STRING)) {    sign=(byte)1;    nans=QNAN;    return;  }  int p=s.indexOf("e");  if (p == -1) {    p=s.indexOf("E");  }  final String fpdecimal;  int sciexp=0;  if (p != -1) {    fpdecimal=s.substring(0,p);    String fpexp=s.substring(p + 1);    boolean negative=false;    for (int i=0; i < fpexp.length(); i++) {      if (fpexp.charAt(i) == '-') {        negative=true;        continue;      }      if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {        sciexp=sciexp * 10 + fpexp.charAt(i) - '0';      }    }    if (negative) {      sciexp=-sciexp;    }  } else {    fpdecimal=s;  }  if (fpdecimal.indexOf("-") != -1) {    sign=-1;  }  p=0;  int decimalPos=0;  for (; ; ) {    if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {      break;    }    if (decimalFound && fpdecimal.charAt(p) == '0') {      decimalPos--;    }    if (fpdecimal.charAt(p) == '.') {      decimalFound=true;    }    p++;    if (p == fpdecimal.length()) {      break;    }  }  int q=offset;  striped[0]='0';  striped[1]='0';  striped[2]='0';  striped[3]='0';  int significantDigits=0;  for (; ; ) {    if (p == (fpdecimal.length())) {      break;    }    if (q == mant.length * rsize + offset + 1) {      break;    }    if (fpdecimal.charAt(p) == '.') {      decimalFound=true;      decimalPos=significantDigits;      p++;      continue;    }    if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {      p++;      continue;    }    striped[q]=fpdecimal.charAt(p);    q++;    p++;    significantDigits++;  }  if (decimalFound && q != offset) {    for (; ; ) {      q--;      if (q == offset) {        break;      }      if (striped[q] == '0') {        significantDigits--;      } else {        break;      }    }  }  if (decimalFound && significantDigits == 0) {    decimalPos=0;  }  if (!decimalFound) {    decimalPos=q - offset;  }  q=offset;  p=significantDigits - 1 + offset;  while (p > q) {    if (striped[p] != '0') {      break;    }    p--;  }  int i=((rsize * 100) - decimalPos - sciexp % rsize) % rsize;  q-=i;  decimalPos+=i;  while ((p - q) < (mant.length * rsize)) {    for (i=0; i < rsize; i++) {      striped[++p]='0';    }  }  for (i=mant.length - 1; i >= 0; i--) {    mant[i]=(striped[q] - '0') * 1000 + (striped[q + 1] - '0') * 100 + (striped[q + 2] - '0') * 10 + (striped[q + 3] - '0');    q+=4;  }  exp=(decimalPos + sciexp) / rsize;  if (q < striped.length) {    round((striped[q] - '0') * 1000);  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @Override protected void createOrUpgradeTable(SQLiteDatabase db,boolean force){  for (  TableModel tableModel : getAllTableModels()) {    createOrUpgradeTable(tableModel,db,force);  }}  }
class C{  public static Object serializeAndRecover(Object o){  try {    ByteArrayOutputStream bos=new ByteArrayOutputStream();    ObjectOutputStream so=new ObjectOutputStream(bos);    so.writeObject(o);    ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());    ObjectInputStream si=new ObjectInputStream(bis);    return si.readObject();  } catch (  IOException ioe) {    return null;  }catch (  ClassNotFoundException cnfe) {    return null;  }}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putIntegerArrayList(TAG,selectedItems);}  }
class C{  public UnknownEventException(){  super();}  }
class C{  public DistributionWordDocument(int iNeighbourhoodWindow){  super(iNeighbourhoodWindow);}  }
class C{  public void gameServerDisconnected(){synchronized (this) {    serverShutdown=true;    for (    AionConnection client : loginRequests.values()) {      client.close(true);    }    loginRequests.clear();    if (loginServer != null) {      loginServer.close(false);    }  }  log.info("GameServer disconnected from the Login Server...");}  }
class C{  public int hashCode(){  return (ClientMaxPrincipal.class.hashCode() + Constraint.hash(principals));}  }
class C{  public static StatelessIntHash murmur3_32(){  return Hashes.getStatelessInt(new MurmurHash3Parameters(MurmurHash3Variant.X86_32));}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    finish();  break;}}  }
class C{  public static String toBase58WithChecksum(byte[] b){  byte[] cs=Hash.hash(b);  byte[] extended=new byte[b.length + 4];  System.arraycopy(b,0,extended,0,b.length);  System.arraycopy(cs,0,extended,b.length,4);  return toBase58(extended);}  }
class C{  public DummyFreeTTSVoice(marytts.modules.synthesis.Voice maryVoice,String lexiconClassName){  super(maryVoice,lexiconClassName);  if (!maryVoice.getLocale().equals(Locale.US)) {    throw new IllegalArgumentException("This dummy freetts voice is meant for US English voices only!");  }}  }
class C{  @Override protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.XERCES_PROPERTY_PREFIX.length();    if (suffixLength == Constants.DTD_SCANNER_PROPERTY.length() && propertyId.endsWith(Constants.DTD_SCANNER_PROPERTY)) {      return;    }  }  if (propertyId.startsWith(Constants.JAXP_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.JAXP_PROPERTY_PREFIX.length();    if (suffixLength == Constants.SCHEMA_SOURCE.length() && propertyId.endsWith(Constants.SCHEMA_SOURCE)) {      return;    }  }  if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();    if (suffixLength == Constants.XML_STRING_PROPERTY.length() && propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,propertyId);    }  }  super.checkProperty(propertyId);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("load taxonomyFile=ncbi.tre mapfile=ncbi.map;collapse level=2;");}  }
class C{  @Override public void onSuccess(DLSN value){  if (value.getLogSegmentSequenceNo() != currentLogSegmentSeqNo) {    LOG.error("Ledger Seq No: {}, Expected: {}",value.getLogSegmentSequenceNo(),currentLogSegmentSeqNo);    errorsFound.set(true);  }  if (verifyEntryId && value.getEntryId() != currentEntryId) {    LOG.error("EntryId: {}, Expected: {}",value.getEntryId(),currentEntryId);    errorsFound.set(true);  }  syncLatch.countDown();}  }
class C{  private static int calculateTotalBytes(byte[][] byteBufferArr){  int total=0;  for (int index=0; index < byteBufferArr.length; index++) {    total+=byteBufferArr[index].length;  }  return total;}  }
class C{  @Override public boolean isEmpty(){  if (dsc != null) {    return dsc.isEmpty();  } else {    return true;  }}  }
class C{  private static String extractTextData(Document document,String elementName){  String value="";  NodeList nodeList=document.getElementsByTagName(elementName);  if (nodeList.getLength() > 0) {    value=nodeList.item(0).getTextContent();  }  return value;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_CASH_CUSTOMIZE_MOTION(String value0){  return new SM_SYSTEM_MESSAGE(1401029,value0);}  }
class C{  public void reset(){  count=0;  totalTime=0;}  }
class C{  public String aggregatedName(){  return "SideEffectAttribute";}  }
class C{  private static Iterator parse(Class service,URL u,Set returned) throws ServiceConfigurationError {  InputStream in=null;  BufferedReader r=null;  ArrayList names=new ArrayList();  try {    in=u.openStream();    r=new BufferedReader(new InputStreamReader(in,"utf-8"));    int lc=1;    while ((lc=parseLine(service,u,r,lc,names,returned)) >= 0)     ;  } catch (  IOException x) {    fail(service,": " + x);  } finally {    try {      if (r != null)       r.close();      if (in != null)       in.close();    } catch (    IOException y) {      fail(service,": " + y);    }  }  return names.iterator();}  }
class C{  private void loadButtonText(AbstractButton component,String text){  StringBuffer result=new StringBuffer();  boolean haveMnemonic=false;  char mnemonic='\0';  int mnemonicIndex=-1;  for (int i=0; i < text.length(); i++) {    if (text.charAt(i) == '&') {      i++;      if (i == text.length()) {        break;      }      if (!haveMnemonic && text.charAt(i) != '&') {        haveMnemonic=true;        mnemonic=text.charAt(i);        mnemonicIndex=result.length();      }    }    result.append(text.charAt(i));  }  component.setText(result.toString());  if (haveMnemonic) {    component.setMnemonic(mnemonic);    component.setDisplayedMnemonicIndex(mnemonicIndex);  }}  }
class C{  public StreamGithubMember githubMember(){  return this.streamGithubMember;}  }
class C{  public void handleExceededBacklogQuota(PersistentTopic persistentTopic){  DestinationName destination=DestinationName.get(persistentTopic.getName());  String namespace=destination.getNamespace();  String policyPath=AdminResource.path("policies",namespace);  BacklogQuota quota=getBacklogQuota(namespace,policyPath);  log.info("Backlog quota exceeded for topic [{}]. Applying [{}] policy",persistentTopic.getName(),quota.getPolicy());switch (quota.getPolicy()) {case consumer_backlog_eviction:    dropBacklog(persistentTopic,quota);  break;case producer_exception:case producer_request_hold:disconnectProducers(persistentTopic);break;default :break;}}  }
class C{  public boolean hasData(){  return (dataStore != null) || (gridCoverageReader != null);}  }
class C{  public TaggedIOException(IOException original,Serializable tag){  super(original.getMessage(),original);  this.tag=tag;}  }
class C{  public void flush() throws Exception {  if (filterInfo == null)   return;  filterInfo.usersInfo=m_userPrincipal.values().toArray(new GenericPrincipal[m_userPrincipal.size()]);  filterInfo.userDefinedRoles=m_userDefinedRoles.values().toArray(new UserDefinedRole[m_userDefinedRoles.size()]);  flush(filterInfo);}  }
class C{  public AxisRenderer(){  this(Constants.LEFT,Constants.BOTTOM);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  void addAssociatedModelWithFK(String associatedTableName,long associatedId){  Set<Long> associatedIdsWithFKSet=getAssociatedModelsMapWithFK().get(associatedTableName);  if (associatedIdsWithFKSet == null) {    associatedIdsWithFKSet=new HashSet<Long>();    associatedIdsWithFKSet.add(associatedId);    associatedModelsMapWithFK.put(associatedTableName,associatedIdsWithFKSet);  } else {    associatedIdsWithFKSet.add(associatedId);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200505,skilltarget,num0,skillname);}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public static <E>Type<E> valueOf(final Class<E> rawType){  if (rawType == null) {    return null;  } else   if (rawType.isAnonymousClass() && rawType.getGenericSuperclass() instanceof ParameterizedType) {    ParameterizedType genericSuper=(ParameterizedType)rawType.getGenericSuperclass();    return valueOf(genericSuper);  } else {    return intern(rawType,new java.lang.reflect.Type[0],new HashSet<java.lang.reflect.Type>());  }}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisk=options.cacheOnDisk;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  private static int decodeNumber(String string){  if (string.compareToIgnoreCase("x") == 0) {    return ALL_VERSIONS;  }  return Integer.valueOf(string);}  }
class C{  public static <R>JoinObservable<R> when(Plan<R>... plans){  return from(JoinPatterns.when(plans));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200653,skillcaster,skillname);}  }
class C{  private void sendLocalBroadcast(String event,String dirRemotePath,RemoteOperationResult result){  Log_OC.d(TAG,"Send broadcast " + event);  Intent intent=new Intent(event);  intent.putExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME,mAccount.name);  if (dirRemotePath != null) {    intent.putExtra(FileSyncAdapter.EXTRA_FOLDER_PATH,dirRemotePath);  }  intent.putExtra(FileSyncAdapter.EXTRA_RESULT,result);  mContext.sendStickyBroadcast(intent);}  }
class C{  protected void notifyAIOnMove(){  MovementNotifyTask.getInstance().add(getOwner());}  }
class C{  public static ITypeDesc checkTableExistence(String tableName,IJSpace space) throws SQLException {  try {    return ((ISpaceProxy)space).getDirectProxy().getTypeManager().getTypeDescByName(tableName);  } catch (  SpaceMetadataException ex) {    if (ex.getCause() instanceof UnknownTypeException)     throw new SQLException("Table [" + tableName + "] does not exist","GSP",-105); else     throw ex;  }}  }
class C{  public static String toBinaryString(byte... bytes){  char[] DIGITS={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  char[] buffer=new char[bytes.length * 8];  for (int i=0, j=0; i < bytes.length; ++i) {    int u=bytes[i] < 0 ? bytes[i] + 256 : bytes[i];    buffer[j++]=DIGITS[(u >>> 7) & 0x1];    buffer[j++]=DIGITS[(u >>> 6) & 0x1];    buffer[j++]=DIGITS[(u >>> 5) & 0x1];    buffer[j++]=DIGITS[(u >>> 4) & 0x1];    buffer[j++]=DIGITS[(u >>> 3) & 0x1];    buffer[j++]=DIGITS[(u >>> 2) & 0x1];    buffer[j++]=DIGITS[(u >>> 1) & 0x1];    buffer[j++]=DIGITS[u & 0x1];  }  return new String(buffer);}  }
class C{  public static String uri2FilePath(final Context context,final Uri uri){  if (null == uri)   return null;  final String scheme=uri.getScheme();  String data=null;  if (scheme == null)   data=uri.getPath(); else   if (ContentResolver.SCHEME_FILE.equals(scheme)) {    data=uri.getPath();  } else   if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {    Cursor cursor=context.getContentResolver().query(uri,new String[]{MediaStore.Images.ImageColumns.DATA},null,null,null);    if (null != cursor) {      if (cursor.moveToFirst()) {        int index=cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);        if (index > -1) {          data=cursor.getString(index);        }      }      cursor.close();    }  }  return data;}  }
class C{  void unpin(Buffer... buffs){  for (  Buffer buff : buffs) {    try {      buff.getExternalLock().lock();      buff.unpin();      if (!buff.isPinned())       numAvailable.incrementAndGet();    }  finally {      buff.getExternalLock().unlock();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_BATTLE_END(String value0){  return new SM_SYSTEM_MESSAGE(1400255,value0);}  }
class C{  private int sequentialBackwardSelection(String dataFile,String[] features,int indVarColNumber,int X[],double J[],int rowIni,int rowEnd){  double sig[]=new double[X.length];  double corXminusx[]=new double[X.length];  int sigIndex[]=new int[X.length];  double corX;  if (X.length > 0) {    Regression reg=new Regression();    reg.multipleLinearRegression(dataFile,indVarColNumber,X,features,interceptTerm,rowIni,rowEnd);    corX=reg.getCorrelation();  } else   corX=0.0;  for (int i=0; i < X.length; i++) {    corXminusx[i]=correlationOfFeature(dataFile,features,indVarColNumber,X,X[i],rowIni,rowEnd);    sig[i]=corX - corXminusx[i];    sigIndex[i]=X[i];  }  int minSig=MathUtils.getMinIndex(sig);  J[0]=corXminusx[minSig];  J[1]=corX;  int maxSig=MathUtils.getMaxIndex(sig);  J[2]=corXminusx[maxSig];  return sigIndex[minSig];}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public boolean isApplicable(){  ExtractReadsViewer extractReadsViewer=(ExtractReadsViewer)getParent();  Document doc=((Director)getDir()).getDocument();  return extractReadsViewer != null && doc.getNumberOfReads() > 0;}  }
class C{  public String namespace(String name,boolean attribute){  int colon=name.indexOf(':');  if (colon == -1) {    return attribute ? "" : theSchema.getURI();  }  String prefix=name.substring(0,colon);  if (prefix.equals("xml")) {    return "http://www.w3.org/XML/1998/namespace";  } else {    return ("urn:x-prefix:" + prefix).intern();  }}  }
class C{  public FisheyeTreeFilter(String group,String sources,int distance){  super(group);  m_sources=sources;  m_threshold=-distance;  m_groupP=new InGroupPredicate(PrefuseLib.getGroupName(group,Graph.NODES));}  }
class C{  private int generateViewType(WXComponent component){  long id;  try {    id=Integer.parseInt(component.getDomObject().ref);    String type=component.getDomObject().attr.getScope();    if (!TextUtils.isEmpty(type)) {      if (mRefToViewType == null) {        mRefToViewType=new ArrayMap<>();      }      if (!mRefToViewType.containsKey(type)) {        mRefToViewType.put(type,id);      }      id=mRefToViewType.get(type);    }  } catch (  RuntimeException e) {    WXLogUtils.eTag(TAG,e);    id=RecyclerView.NO_ID;    WXLogUtils.e(TAG,"getItemViewType: NO ID, this will crash the whole render system of WXListRecyclerView");  }  return (int)id;}  }
class C{  public Math_Vector rotate(double angle){  double rad=angle * TO_RADIANS;  double cos=Math.cos(rad);  double sin=Math.sin(rad);  double newX=this.x * cos - this.y * sin;  double newY=this.x * sin + this.y * cos;  this.x=newX;  this.y=newY;  return this;}  }
class C{  protected void linearLayout(VisualTable labels){  Rectangle2D b=getLayoutBounds();  double breadth=getBreadth(b);  double span=m_hi - m_lo;  double pspan=m_prevhi - m_prevlo;  double vlo=0;  if (m_lo >= 0) {    vlo=Math.pow(10,Math.floor(MathLib.log10(m_lo)));  } else {    vlo=-Math.pow(10,1 + Math.floor(MathLib.log10(-m_lo)));  }  Iterator iter=labels.tuples();  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    reset(item);    double v=item.getDouble(VALUE);    double x=span == 0 ? 0 : ((v - m_lo) / span) * breadth;    set(item,x,b);  }  Index index=labels.index(VALUE);  double step=getLinearStep(span,span == 0 ? 0 : breadth / span);  if (step == 0)   step=1;  int r;  for (double x, v=vlo; v <= m_hi; v+=step) {    x=((v - m_lo) / span) * breadth;    if (x < -0.5) {      continue;    } else     if ((r=index.get(v)) >= 0) {      VisualItem item=labels.getItem(r);      item.setVisible(true);      item.setEndVisible(true);    } else {      VisualItem item=labels.addItem();      item.set(LABEL,m_nf.format(v));      item.setDouble(VALUE,v);      double f=pspan == 0 ? 0 : ((v - m_prevlo) / pspan);      if (f <= 0 || f >= 1.0)       item.setStartVisible(true);      set(item,f * breadth,b);      set(item,x,b);    }  }}  }
class C{  @Override public int fillConvertedChunkData(int rowId,int columnIndex,int[] row,KeyStructureInfo restructuringInfo){  return columnIndex + 1;}  }
class C{  void syncSummaryView(View view){  TextView summaryView=(TextView)view.findViewById(android.R.id.summary);  if (summaryView != null) {    boolean useDefaultSummary=true;    if (mChecked && !TextUtils.isEmpty(mSummaryOn)) {      summaryView.setText(mSummaryOn);      useDefaultSummary=false;    } else     if (!mChecked && !TextUtils.isEmpty(mSummaryOff)) {      summaryView.setText(mSummaryOff);      useDefaultSummary=false;    }    if (useDefaultSummary) {      final CharSequence summary=getSummary();      if (!TextUtils.isEmpty(summary)) {        summaryView.setText(summary);        useDefaultSummary=false;      }    }    int newVisibility=View.GONE;    if (!useDefaultSummary) {      newVisibility=View.VISIBLE;    }    if (newVisibility != summaryView.getVisibility()) {      summaryView.setVisibility(newVisibility);    }  }}  }
class C{  public synchronized Plugin loadPlugin(File file) throws InvalidPluginException, UnknownDependencyException {  Validate.notNull(file,"File cannot be null");  checkUpdate(file);  Set<Pattern> filters=fileAssociations.keySet();  Plugin result=null;  for (  Pattern filter : filters) {    String name=file.getName();    Matcher match=filter.matcher(name);    if (match.find()) {      PluginLoader loader=fileAssociations.get(filter);      result=loader.loadPlugin(file);    }  }  if (result != null) {    plugins.add(result);    lookupNames.put(result.getDescription().getName(),result);  }  return result;}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  bundle.putCharSequenceArrayList(key,value);  return this;}  }
class C{  private boolean buildTimestampsMatch(@NotNull IDevice device,@Nullable Integer userId){  InstantRunBuildInfo instantRunBuildInfo=myInstantRunContext.getInstantRunBuildInfo();  String localTimestamp=instantRunBuildInfo == null ? null : instantRunBuildInfo.getTimeStamp();  if (StringUtil.isEmpty(localTimestamp)) {    InstantRunManager.LOG.info("Local build timestamp is empty!");    return false;  }  if (InstantRunClient.USE_BUILD_ID_TEMP_FILE) {    if (!isAppInstalledForUser(device,myInstantRunContext.getApplicationId(),userId)) {      return false;    }  }  String deviceBuildTimestamp=myInstantRunClientDelegate.getDeviceBuildTimestamp(device,myInstantRunContext);  InstantRunManager.LOG.info(String.format("Build timestamps: Local: %1$s, Device: %2$s",localTimestamp,deviceBuildTimestamp));  return localTimestamp.equals(deviceBuildTimestamp);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  @Override protected BitmapCroppingWorkerTask.Result doInBackground(Void... params){  try {    if (!isCancelled()) {      Bitmap bitmap=null;      if (mUri != null) {        bitmap=BitmapUtils.cropBitmap(mContext,mUri,mCropPoints,mDegreesRotated,mOrgWidth,mOrgHeight,mFixAspectRatio,mAspectRatioX,mAspectRatioY,mReqWidth,mReqHeight);      } else       if (mBitmap != null) {        bitmap=BitmapUtils.cropBitmap(mBitmap,mCropPoints,mDegreesRotated,mFixAspectRatio,mAspectRatioX,mAspectRatioY);      }      if (mSaveUri == null) {        return new Result(bitmap);      } else {        BitmapUtils.writeBitmapToUri(mContext,bitmap,mSaveUri,mSaveCompressFormat,mSaveCompressQuality);        assert bitmap != null;        bitmap.recycle();        return new Result(mSaveUri);      }    }    return null;  } catch (  Exception e) {    return new Result(e,mSaveUri != null);  }}  }
class C{  protected void stopJobAcquisitionThread(){  if (asyncJobAcquisitionThread != null) {    try {      asyncJobAcquisitionThread.join();    } catch (    InterruptedException e) {      log.warn("Interrupted while waiting for the async job acquisition thread to terminate",e);    }    asyncJobAcquisitionThread=null;  }}  }
class C{  public static MultivaluedMap<String,String> headersToLowerCase(MultivaluedMap<String,String> headers){  return headers.entrySet().stream().collect(StreamUtils.toMap(null,null,null));}  }
class C{  public WallGetCommentsQuery(VkApiClient client,UserActor actor,int postId){  super(client,"wall.getComments",GetCommentsResponse.class);  accessToken(actor.getAccessToken());  postId(postId);}  }
class C{  private short[] createIndexData(){  final short[] indexData=new short[numElements];  int offset=0;  for (int row=0; row < height - 1; row++) {    for (int col=0; col < width - 1; col++) {      short topLeftIndexNum=(short)(row * width + col);      short topRightIndexNum=(short)(row * width + col + 1);      short bottomLeftIndexNum=(short)((row + 1) * width + col);      short bottomRightIndexNum=(short)((row + 1) * width + col + 1);      indexData[offset++]=topLeftIndexNum;      indexData[offset++]=bottomLeftIndexNum;      indexData[offset++]=topRightIndexNum;      indexData[offset++]=topRightIndexNum;      indexData[offset++]=bottomLeftIndexNum;      indexData[offset++]=bottomRightIndexNum;    }  }  return indexData;}  }
class C{  public ParameterRef newParameterRef(Type paramType,int number){  return new ParameterRef(paramType,number);}  }
class C{  @Override public EntryCreatedRS startRootItem(String projectName,StartTestItemRQ rq){  Launch launch=launchRepository.loadStatusProjectRefAndStartTime(rq.getLaunchId());  validate(projectName,rq,launch);  TestItem item=testItemBuilder.get().addStartItemRequest(rq).addStatus(Status.IN_PROGRESS).addLaunch(launch).build();  testItemRepository.save(item);  return new EntryCreatedRS(item.getId());}  }
class C{  public void destroyView() throws CanceledException {  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());  ProgramProperties.put("RemoteServers",urlComboBox.getItemsAsString(20,"%%%"));  dir.removeViewer(this);  searchManager.getFindDialogAsToolBar().close();  if (!ProgramProperties.get("SaveRemoteCredentials",false))   ProgramProperties.put("MeganServerCredentials",new String[0]);  dispose();}  }
class C{  public Coord add(Coord coord){  return new Coord(x + coord.x,y + coord.y);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_GET_ITEM_OTHER(String value0,DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1390181,value0,descriptionId);}  }
class C{  private boolean peerExists(String id){  if (id == null)   return false;  for (  Peer peer : peerList) {    if (id.equals(peer.getPeerId())) {      return true;    }  }  return false;}  }
class C{  private static synchronized void createAutoAddJob(IProject project){  Job j=new AutoAddJob(project);  j.setSystem(true);  j.setPriority(Job.SHORT);  j.setRule(ResourcesPlugin.getWorkspace().getRoot());  j.schedule();}  }
class C{  private void deleteFile(String name) throws LogException {  if (!new File(name).delete()) {    throw new LogException("couldn't delete file: " + name);  }}  }
class C{  @Override public int[] makeCumulativeTestPoints(){  return makeDensityTestPoints();}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  @Override public int hashCode(){  return (fNamespace == null) ? 0 : fNamespace.hashCode();}  }
class C{  public static long smpteTimecodeToMilliSeconds(String tc,BigFraction unitsInSec){  String[] parts=tc.split("[:;\\.]");  if (parts.length != 4) {    throw new ConversionHelperException(String.format("Incorrect SMPTE timecode '%s'. Expected in a form 'HH[:;.]MM[:;.]SS[:;.]FF'",tc));  }  int hours;  int mins;  int secs;  int frames;  try {    hours=Integer.parseInt(parts[0]);    mins=Integer.parseInt(parts[1]);    secs=Integer.parseInt(parts[2]);    frames=Integer.parseInt(parts[3]);  } catch (  NumberFormatException e) {    throw new ConversionHelperException(String.format("Incorrect SMPTE timecode '%s'! Expected in a form 'HH[:;.]MM[:;.]SS[:;.]FF'" + " where HH,MM,SS and FF are non-negative integers",tc),e);  }  long total=0L;  total+=hours * 60 * 60* 1000L;  total+=mins * 60 * 1000L;  total+=secs * 1000L;  total+=new BigFraction(frames).divide(unitsInSec).multiply(1000).longValue();  return total;}  }
class C{  private final boolean eq(int v1,int v2){  return v1 == v2;}  }
class C{  private boolean isDerivedByAny(String ancestorNS,String ancestorName,XSTypeDefinition type){  boolean derivedFrom=false;  XSTypeDefinition oldType=null;  while (type != null && type != oldType) {    if ((ancestorName.equals(type.getName())) && ((ancestorNS == null && type.getNamespace() == null) || (ancestorNS != null && ancestorNS.equals(type.getNamespace())))) {      derivedFrom=true;      break;    }    if (isDerivedByRestriction(ancestorNS,ancestorName,type)) {      return true;    } else     if (isDerivedByList(ancestorNS,ancestorName,type)) {      return true;    } else     if (isDerivedByUnion(ancestorNS,ancestorName,type)) {      return true;    }    oldType=type;    if (((XSSimpleTypeDecl)type).getVariety() == VARIETY_ABSENT || ((XSSimpleTypeDecl)type).getVariety() == VARIETY_ATOMIC) {      type=type.getBaseType();    } else     if (((XSSimpleTypeDecl)type).getVariety() == VARIETY_UNION) {      for (int i=0; i < ((XSSimpleTypeDecl)type).getMemberTypes().getLength(); i++) {        return isDerivedByAny(ancestorNS,ancestorName,(XSTypeDefinition)((XSSimpleTypeDecl)type).getMemberTypes().item(i));      }    } else     if (((XSSimpleTypeDecl)type).getVariety() == VARIETY_LIST) {      type=((XSSimpleTypeDecl)type).getItemType();    }  }  return derivedFrom;}  }
class C{  public boolean isFederatedNamespaceEnabled(){  return getBoolean(BKDL_FEDERATED_NAMESPACE_ENABLED,BKDL_FEDERATED_NAMESPACE_ENABLED_DEFAULT);}  }
class C{  public PrivilegedTask(){  super();}  }
class C{  private static boolean checkComplexDerivation(XSComplexTypeDecl derived,XSTypeDefinition base,short block){  if (derived == base)   return true;  if ((derived.fDerivedBy & block) != 0)   return false;  XSTypeDefinition directBase=derived.fBaseType;  if (directBase == base)   return true;  if (directBase == SchemaGrammar.fAnyType || directBase == SchemaGrammar.fAnySimpleType) {    return false;  }  if (directBase.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE)   return checkComplexDerivation((XSComplexTypeDecl)directBase,base,block);  if (directBase.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {    if (base.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {      if (base == SchemaGrammar.fAnyType)       base=SchemaGrammar.fAnySimpleType; else       return false;    }    return checkSimpleDerivation((XSSimpleType)directBase,(XSSimpleType)base,block);  }  return false;}  }
class C{  public static Map<String,String> strToMap(String str){  return strToMap(str,"|",false);}  }
class C{  public boolean isMinified(List<String> codeLines){  OptionalDouble average=codeLines.stream().map(null).mapToInt(null).average();  if (average.isPresent() && average.getAsDouble() > this.MINIFIEDLENGTH) {    return true;  }  return false;}  }
class C{  public void updateFifoXtnInfoForEntry(IEntryHolder eh,long xtnNumber,boolean writeLock,boolean entryWritingXtn){  _terminatingXtnsInfo.updateFifoXtnInfoForEntry(eh,xtnNumber,writeLock,entryWritingXtn);}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapTrafficProperties && getAircraftId().equals(((AirMapTrafficProperties)o).getAircraftId());}  }
class C{  public UsersGetFollowersQueryWithFields nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public static Vector3D crossProduct(final Vector3D v1,final Vector3D v2){  return v1.crossProduct(v2);}  }
class C{  public int max_inlinee_size(){  return soot.PhaseOptions.getInt(options,"max-inlinee-size");}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static boolean hasTimeDeadbandChanged(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag){  return sourceDataTag.getTimeDeadband() != oldSourceDataTag.getTimeDeadband();}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AmbiguousAccess fullCopy(){  AmbiguousAccess tree=(AmbiguousAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void loadPropsFromHDFSDir(String dirName,FileSystem fs) throws FileNotFoundException, IOException {  logger.info("Loading properties from dirName = " + dirName);  Path dirPath=new Path(dirName);  FileStatus[] status=fs.listStatus(dirPath);  for (int i=0; i < status.length; i++) {    if (status[i].getPath().getName().endsWith(".properties")) {      loadPropsFromFile(status[i].getPath(),fs);    }  }}  }
class C{  private void distributeValue(final SourceDataTagValue sourceDataTagValue) throws JMSException {  for (  JmsSender jmsSender : jmsSenders) {    try {      jmsSender.processValue(sourceDataTagValue);    } catch (    Exception e) {      LOGGER.error("Unhandled exception caught while sending a source value (tag id " + sourceDataTagValue.getId() + ") - the value update will be lost.",e);    }  }  sourceDataTagValue.log();}  }
class C{  public void execute(EventCallback callback){  this.event.setCallback(callback);  instance.register(event);}  }
class C{  protected final void handleBaseURI(Node node){  if (fDocumentImpl != null) {    String baseURI=null;    short nodeType=node.getNodeType();    if (nodeType == Node.ELEMENT_NODE) {      if (fNamespaceAware) {        if (((Element)node).getAttributeNodeNS("http://www.w3.org/XML/1998/namespace","base") != null) {          return;        }      } else       if (((Element)node).getAttributeNode("xml:base") != null) {        return;      }      baseURI=fCurrentNode.getBaseURI();      if (baseURI != null && !baseURI.equals(fDocumentImpl.getDocumentURI())) {        if (fNamespaceAware) {          ((Element)node).setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:base",baseURI);        } else {          ((Element)node).setAttribute("xml:base",baseURI);        }      }    } else     if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) {      baseURI=fCurrentNode.getBaseURI();      if (baseURI != null && fErrorHandler != null) {        DOMErrorImpl error=new DOMErrorImpl();        error.fType="pi-base-uri-not-preserved";        error.fRelatedData=baseURI;        error.fSeverity=DOMError.SEVERITY_WARNING;        fErrorHandler.getErrorHandler().handleError(error);      }    }  }}  }
class C{  public static boolean exists(String name){  if (cache.contains(name)) {    return true;  }  try {    if (Helper.exists(name,Access.class)) {      cache.add(name);      return true;    }  } catch (  Exception e1) {    log.error(e1.getMessage(),e1);  }  return false;}  }
class C{  private ConfigurationProvider(){  throw new AssertionError();}  }
class C{  public LsClientPacket handle(ByteBuffer data,LoginServerConnection client){  State state=client.getState();  int id=data.get() & 0xff;  return getPacket(state,id,data,client);}  }
class C{  public boolean use_original_names(){  return soot.PhaseOptions.getBoolean(options,"use-original-names");}  }
class C{  public void powEquals(double exp){  for (int i=0; i < A.length; i++)   for (int j=0; j < A[i].length; j++)   A[i][j]=Math.pow(A[i][j],exp);}  }
class C{  public boolean exists(){  return true;}  }
class C{  public static String encodePassword(final String value){  return ConversionUtils.stringToBase64(value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200768,skillcaster,skillname);}  }
class C{  public void init(final FieldODEState<T> s0,final T finalTime){  final T t0=s0.getTime();  int index=0;  final T[] primary0=s0.getPrimaryState();  primary.init(t0,primary0,finalTime);  while (++index < mapper.getNumberOfEquations()) {    final T[] secondary0=s0.getSecondaryState(index);    components.get(index - 1).init(t0,primary0,secondary0,finalTime);  }}  }
class C{  final short findFirstTerminal(int state){  int offset=actn_offsets[state];  for (short term_id=offset < 0 ? (short)-offset : 0; term_id < n_term; term_id++) {    int index=offset + term_id;    if (index >= lookaheads.length)     break;    if (lookaheads[index] == term_id)     return term_id;  }  return -1;}  }
class C{  public TaskResource(StateStore stateStore,TaskKiller taskKiller,String frameworkName){  this.stateStore=stateStore;  this.taskKiller=taskKiller;  this.frameworkName=frameworkName;}  }
class C{  final public static long updateCollection(String collection,Object id,V v,boolean adding){  BasicDBObject q=new BasicDBObject().append(X.ID,id);  return updateCollection(collection,q,v);}  }
class C{  public static Value rhs(Unit unit){  if (unit instanceof AssignStmt)   return ((AssignStmt)unit).getRightOp(); else   return null;}  }
class C{  private void fillTokenList(boolean evolvedVariant){  ArrayList<ClipboardToken> possibleTokens=ClipboardTokenCollection.getSamples();  clipboardShowcase.removeAllViews();  HashMap<String,GridLayout> groups=new HashMap<>();  for (  ClipboardToken tok : possibleTokens) {    String category=tok.getCategory();    if (!groups.containsKey(category)) {      GridLayout layout=new GridLayout(this);      layout.setColumnCount(3);      groups.put(category,layout);      TextView categoryTitle=new TextView(this);      categoryTitle.setText(category);      clipboardShowcase.addView(new TextView(this));      clipboardShowcase.addView(categoryTitle);      clipboardShowcase.addView(layout);    }  }  for (  ClipboardToken token : possibleTokens) {    if (evolvedVariant == token.maxEv || !token.changesOnEvolutionMax()) {      ClipboardTokenButton btnTag=new ClipboardTokenButton(this,token,cth);      tokenButtons.add(btnTag);      groups.get(token.getCategory()).addView(btnTag);    }  }  unColorallButtons();}  }
class C{  public void init(final ODEState s0,final double finalTime){  final double t0=s0.getTime();  int index=0;  final double[] primary0=s0.getPrimaryState();  primary.init(t0,primary0,finalTime);  while (++index < mapper.getNumberOfEquations()) {    final double[] secondary0=s0.getSecondaryState(index);    components.get(index - 1).init(t0,primary0,secondary0,finalTime);  }}  }
class C{  public void addColumn(String name,Expression expr){  throw new UnsupportedOperationException();}  }
class C{  public SimpleUnivariateValueChecker(final double relativeThreshold,final double absoluteThreshold){  super(relativeThreshold,absoluteThreshold);  maxIterationCount=ITERATION_CHECK_DISABLED;}  }
class C{  private void initializeClustering(){  assert dataPointSet != null;  assert clusterList != null;  Iterator<String> it=dataPointSet.iterator();  while (it.hasNext()) {    ArrayList<String> dataSet=new ArrayList<String>();    dataSet.add(it.next());    Cluster aCluster=new Cluster(dataSet);    clusterList.add(aCluster);  }}  }
class C{  public TShortHash(int initialCapacity){  super(initialCapacity);  this._hashingStrategy=this;}  }
class C{  public ResourceLoader add(Class<? extends Resource> resourceClass){  resources.add(resourceClass);  return this;}  }
class C{  public Route find(String requestType,String uri){  if (!routes.containsKey(requestType))   throw new RoutingException("Unable to find route. Request type: " + requestType + ", uri: "+ uri);  List<Route> routes=this.routes.get(requestType);  for (  Route route : routes)   if (route.matches(uri))   return route;  throw new RoutingException("Unable to find route. Request type: " + requestType + ", uri: "+ uri);}  }
class C{  @Override public String toString(){  return store.toString();}  }
class C{  private boolean hasSideEffectsOrCallsSink(SootMethod method,Set<SootMethod> runList){  if (!method.hasActiveBody())   return false;  Boolean hasSideEffects=methodSideEffects.get(method);  if (hasSideEffects != null)   return hasSideEffects;  Boolean hasSink=methodSinks.get(method);  if (hasSink != null)   return hasSink;  if (!runList.add(method))   return false;  if (methodIsAndroidStub(method)) {    methodSideEffects.put(method,false);    return false;  }  for (  Unit u : method.getActiveBody().getUnits()) {    if (u instanceof AssignStmt) {      AssignStmt assign=(AssignStmt)u;      if (assign.getLeftOp() instanceof FieldRef || assign.getLeftOp() instanceof ArrayRef) {        methodSideEffects.put(method,true);        return true;      }    }    Stmt s=(Stmt)u;    if (taintWrapper != null && taintWrapper.supportsCallee(s)) {      methodSideEffects.put(method,true);      return true;    }    if (s.containsInvokeExpr()) {      if (sourceSinkManager != null && sourceSinkManager.isSink((Stmt)u,icfg,null)) {        methodSinks.put(method,true);        return true;      }      for (Iterator<Edge> edgeIt=Scene.v().getCallGraph().edgesOutOf(u); edgeIt.hasNext(); ) {        Edge e=edgeIt.next();        if (hasSideEffectsOrCallsSink(e.getTgt().method(),runList))         return true;      }    }  }  methodSideEffects.put(method,false);  return false;}  }
class C{  public static MutableContextSet fromMap(Map<String,String> map){  MutableContextSet set=new MutableContextSet();  set.addAll(map);  return set;}  }
class C{  public boolean isReplicatable(){  return m_IsReplicatable;}  }
class C{  public void prePrepare(XtnEntry xtnEntry){  XtnData pXtn=xtnEntry.getXtnData();  IStoredList<IEntryCacheInfo> locked=pXtn.getLockedEntries();  if (locked != null && !locked.isEmpty()) {    for (IStoredListIterator<IEntryCacheInfo> slh=locked.establishListScan(false); slh != null; slh=pXtn.getLockedEntries().next(slh)) {      IEntryCacheInfo pEntry=slh.getSubject();      if (pEntry == null)       continue;      final IEntryHolder eh=pEntry.getEntryHolder(this);      if (eh.isDeleted())       continue;      if (eh.isExpired() && !_leaseManager.isNoReapUnderXtnLeases() && !_leaseManager.isSlaveLeaseManagerForEntries())       continue;      if (eh.getWriteLockOwner() != xtnEntry)       continue;      if (eh.getWriteLockOperation() == SpaceOperations.READ || eh.getWriteLockOperation() == SpaceOperations.READ_IE)       continue;      if (eh.getWriteLockOperation() == SpaceOperations.WRITE || eh.getWriteLockOperation() == SpaceOperations.UPDATE || eh.getWriteLockOperation() == SpaceOperations.TAKE || eh.getWriteLockOperation() == SpaceOperations.TAKE_IE) {        if (eh.getWriteLockOperation() == SpaceOperations.UPDATE && pXtn.isReWrittenEntry(eh.getUID())) {          IEntryCacheInfo pe=EntryCacheInfoFactory.createEntryCacheInfo(eh.getShadow().createCopy());          pe.getEntryHolder(this).setWriteLockOperation(SpaceOperations.TAKE,false);          pe.getEntryHolder(this).setUID(eh.getUID());          pXtn.getNeedNotifyEntries(true).add(pe);          pe=EntryCacheInfoFactory.createEntryCacheInfo(eh.createCopy());          pe.getEntryHolder(this).setWriteLockOperation(SpaceOperations.WRITE,false);          pXtn.getNeedNotifyEntries(true).add(pe);        } else         if (eh.getWriteLockOperation() == SpaceOperations.UPDATE && (_templatesManager.anyNotifyUnmatchedTemplates() || _templatesManager.anyNotifyMatchedTemplates() || _templatesManager.anyNotifyRematchedTemplates())) {          IEntryCacheInfo pe=EntryCacheInfoFactory.createEntryCacheInfo(eh.createCopy());          IEntryHolder shadowEh=eh.getShadow().createCopy();          pe.getEntryHolder(this).setWriteLockOwnerOperationAndShadow(xtnEntry,eh.getWriteLockOperation(),shadowEh);          pXtn.getNeedNotifyEntries(true).add(pe);        } else {          IEntryCacheInfo pe=EntryCacheInfoFactory.createEntryCacheInfo(eh.createCopy());          pe.getEntryHolder(this).setWriteLockOperation(eh.getWriteLockOperation(),false);          pXtn.getNeedNotifyEntries(true).add(pe);        }      }    }  }}  }
class C{  public FinderException(String message,Throwable cause){  super(message,cause);}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Response.Listener<JSONObject> listener,Response.ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public void releaseWriteLockOnKey(K id){  if (id != null) {    cache.releaseWriteLockOnKey(id);    if (LOGGER.isTraceEnabled()) {      LOGGER.trace(cache.getName() + " Released WRITE lock for id=" + String.valueOf(id));    }  } else {    LOGGER.error("Trying to release write lock with a NULL key - throwing an exception!");    throw new IllegalArgumentException("Trying to release write lock with null key!");  }}  }
class C{  private int dp2px(float dpValue){  final float scale=getContext().getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    float f=get(i);    if (f != f) {      count++;    }  }  return count;}  }
class C{  public static void main(String[] argv){  print("SAX features:",SAX_FEATURE_PREFIX,fgSAXFeatures);  print("SAX properties:",SAX_PROPERTY_PREFIX,fgSAXProperties);  print("Xerces features:",XERCES_FEATURE_PREFIX,fgXercesFeatures);  print("Xerces properties:",XERCES_PROPERTY_PREFIX,fgXercesProperties);}  }
class C{  private static long millisecondsToTimeUnit(long milliseconds,int timeUnit){switch (timeUnit) {case TU_MILLISECONDS:case TU_SECONDS:case TU_MINUTES:case TU_HOURS:case TU_DAYS:    return Math.abs(milliseconds) / timeUnit;}return -1;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"ALARMS\" ("+ "\"ALARM_CONTENT\" TEXT,"+ "\"ALARM_ID\" TEXT,"+ "\"ALARM_LEVEL_NO\" TEXT,"+ "\"ALARM_LEVEL_NO_DESC\" TEXT,"+ "\"ALARM_TYPE\" TEXT,"+ "\"ALARM_TYPE_DESC\" TEXT,"+ "\"PUBLISH_TIME\" TEXT,"+ "\"AREAID\" TEXT,"+ "\"AREA_NAME\" TEXT);");}  }
class C{  @Deprecated public static String makeWhereStringFromFields(List<ModelField> modelFields,Map<String,Object> fields,String operator,List<EntityConditionParam> entityConditionParams){  return makeWhereStringFromFields(new StringBuilder(),modelFields,fields,operator,entityConditionParams).toString();}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  public boolean isValid(){  return Math.abs(lat().radians()) <= S2.M_PI_2 && Math.abs(lng().radians()) <= S2.M_PI;}  }
class C{  private void internal_renderMap(List<Layer> layers,ReferencedEnvelope bounds,Rectangle imageSize,boolean hasGeometry,int dpi){  MapContent map=new MapContent();  map.addLayers(layers);  try {    Map<Object,Object> hints=new HashMap<Object,Object>();    hints.put(StreamingRenderer.DPI_KEY,dpi);    hints.put(StreamingRenderer.LABEL_CACHE_KEY,new LabelCacheImpl());    renderer.setRendererHints(hints);    renderer.setMapContent(map);    BufferedImage image=new BufferedImage(imageSize.width,imageSize.height,BufferedImage.TYPE_INT_ARGB);    Graphics2D graphics=image.createGraphics();    if (useAntiAlias) {      graphics.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON));    }    try {      if (!hasGeometry) {        graphics.setColor(Color.BLACK);        int y=imageSize.height / 2;        Font font=new Font(Font.SERIF,Font.BOLD,14);        graphics.setFont(font);        graphics.drawString(Localisation.getString(RenderPanelImpl.class,"RenderPanelImpl.error1"),10,y - 14);      } else {        renderer.paint(graphics,imageSize,bounds);        this.bImage=image;      }    }  finally {      graphics.dispose();    }  }  finally {    map.dispose();  }}  }
class C{  private boolean checkAndRequestWeatherPermissions(){  if (ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION)) {      ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},MY_PERMISSION_LOCATION);    } else {      Log.i(TAG,"Permission previously denied and app shouldn't ask again.  Skipping" + " weather snapshot.");    }    return false;  } else {    return true;  }}  }
class C{  public LockableFileWriter(File file,String encoding) throws IOException {  this(file,encoding,false,null);}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  public void handle(Context context,String input,String lastToken,SuggestionValue suggestionValue){  if (nextHandler != null) {    nextHandler.handle(context,input,lastToken,suggestionValue);  }}  }
class C{  final public boolean addElement(E e){  if (e == null)   throw new RuntimeException("oops");  if (numElements == maxElements)   doubleCapacity();  elements[numElements++]=e;  return true;}  }
class C{  public int size(){  return m_actions.size();}  }
class C{  public void drawChart(Graphics2D gc){  colorByClasses=true;  colorBySeries=false;  doDraw(gc);}  }
class C{  protected VideoHideCatalogSectionQuery sectionId(int value){  return unsafeParam("section_id",value);}  }
class C{  private URL[] doGetURLs(ClassLoader cl){  if (disableSmartGetUrl) {    return super.getURLs();  }  URL[] urls=null;  if (cl.equals(this)) {    urls=super.getURLs();  } else {    if (cl instanceof ServiceClassLoader) {      ServiceClassLoader scl=(ServiceClassLoader)cl;      urls=scl.getURLs();    } else {      urls=super.getURLs();    }  }  return (urls);}  }
class C{  public InvalidConfigurationException(Throwable cause){  super(cause);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean hasProgram(){  return program != null;}  }
class C{  protected boolean isValidDomain(String domain){  Matcher ipDomainMatcher=IP_DOMAIN_PATTERN.matcher(domain);  if (ipDomainMatcher.matches()) {    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();    return inetAddressValidator.isValid(ipDomainMatcher.group(1));  }  DomainValidator domainValidator=DomainValidator.getInstance(allowLocal);  return domainValidator.isValid(domain) || domainValidator.isValidTld(domain);}  }
class C{  public WinHttpCurrentUserIEProxyConfig(Pointer pointer){  super(pointer);  read();}  }
class C{  private void initData(){  this.service=AuthorizeService.getService();  this.state=NORMAL_STATE;}  }
class C{  protected MaryData externalIO(MaryData d) throws Exception {  assert !needToRestart();  Log.i(Mary.LOG,"Writing to module.");  d.writeTo(to());  Log.i(Mary.LOG,"Reading from module.");  MaryData result=new MaryData(outputType(),d.getLocale());  result.readFrom(from(),outputType().endMarker());  Log.i(Mary.LOG,"Read complete.");  return result;}  }
class C{  private void writeNode(NodeVisitor parentNodeVisitor,AXmlNode node){  NodeVisitor childNodeVisitor=parentNodeVisitor.child(node.getNamespace(),node.getTag());  if (!node.isIncluded()) {    return;  }  for (  AXmlAttribute<?> attr : node.getAttributes().values()) {    String namespace=attr.getNamespace();    if (namespace != null && namespace.isEmpty())     namespace=null;    int resourceId=attr.getResourceId();    if (resourceId < 0 && !node.getTag().equals("manifest"))     resourceId=getAttributeResourceId(attr.getName());    int attrType=attr.getAttributeType();    if (attrType < 0)     attrType=attr.getType();    childNodeVisitor.attr(namespace,attr.getName(),resourceId,attrType,attr.getValue());  }  for (  AXmlNode child : node.getChildren())   writeNode(childNodeVisitor,child);  childNodeVisitor.end();}  }
class C{  public EntityQuery filterByDate(Date moment){  this.filterByDate(new java.sql.Timestamp(moment.getTime()));  return this;}  }
class C{  public ScopedElementLocator(ElementLocatorFactory scopeFactory,Field scopeField,Field searchField){  this.scopeFactory=scopeFactory;  this.scopeField=scopeField;  this.searchField=searchField;}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public Stat stat(){  if (closed) {    throw new AlreadyClosedException();  }  final MDB_stat stat=new MDB_stat(RUNTIME);  checkRc(LIB.mdb_env_stat(ptr,stat));  return new Stat(stat.f0_ms_psize.intValue(),stat.f1_ms_depth.intValue(),stat.f2_ms_branch_pages.longValue(),stat.f3_ms_leaf_pages.longValue(),stat.f4_ms_overflow_pages.longValue(),stat.f5_ms_entries.longValue());}  }
class C{  public long remainingCapacity(){  return sequencer.remainingCapacity();}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fDocumentHandler.endElement(element.rawname);    }    if (fContentHandler != null) {      fAugmentations=augs;      String uri=element.uri != null ? element.uri : "";      String localpart=fNamespaces ? element.localpart : "";      fContentHandler.endElement(uri,localpart,element.rawname);      if (fNamespaces) {        endNamespaceMapping();      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static void launch(Context context,int id){  context.startActivity(launchIntent(context,id));}  }
class C{  public final static boolean isJavaKeyword(String s){  if (s == null || s.length() == 0) {    return false;  }  for (int i=0; i < keywords.length; i++) {    if (keywords[i].equals(s)) {      return true;    }  }  return false;}  }
class C{  public AdaptiveStepsizeIntegrator(final String name,final double minStep,final double maxStep,final double scalAbsoluteTolerance,final double scalRelativeTolerance){  super(name);  setStepSizeControl(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);  resetInternalState();}  }
class C{  public TrustManagerImpl(KeyStore keyStore,CertPinManager manager,TrustedCertificateStore certStore,Object blacklist){  CertPathValidator validatorLocal=null;  CertificateFactory factoryLocal=null;  KeyStore rootKeyStoreLocal=null;  TrustedCertificateStore trustedCertificateStoreLocal=null;  TrustedCertificateIndex trustedCertificateIndexLocal=null;  X509Certificate[] acceptedIssuersLocal=null;  Exception errLocal=null;  try {    validatorLocal=CertPathValidator.getInstance("PKIX");    factoryLocal=CertificateFactory.getInstance("X509");    if ("AndroidCAStore".equals(keyStore.getType())) {      rootKeyStoreLocal=keyStore;      trustedCertificateStoreLocal=(certStore != null) ? certStore : new TrustedCertificateStore();      acceptedIssuersLocal=null;      trustedCertificateIndexLocal=new TrustedCertificateIndex();    } else {      rootKeyStoreLocal=null;      trustedCertificateStoreLocal=certStore;      acceptedIssuersLocal=acceptedIssuers(keyStore);      trustedCertificateIndexLocal=new TrustedCertificateIndex(trustAnchors(acceptedIssuersLocal));    }  } catch (  Exception e) {    errLocal=e;  }  if (manager != null) {    this.pinManager=manager;  } else {    try {      pinManager=new CertPinManager(trustedCertificateStoreLocal);    } catch (    PinManagerException e) {      throw new SecurityException("Could not initialize CertPinManager",e);    }  }  this.rootKeyStore=rootKeyStoreLocal;  this.trustedCertificateStore=trustedCertificateStoreLocal;  this.validator=validatorLocal;  this.factory=factoryLocal;  this.trustedCertificateIndex=trustedCertificateIndexLocal;  this.intermediateIndex=new TrustedCertificateIndex();  this.acceptedIssuers=acceptedIssuersLocal;  this.err=errLocal;}  }
class C{  @Override public boolean equals(Object obj){  return getClass().equals(obj.getClass());}  }
class C{  public PointsToSet reachingObjects(Context c,Local l,SootField f){  return reachingObjects(f);}  }
class C{  private boolean handleCommand(String command){  if (currentMissionBehaviour() != null && currentMissionBehaviour().commandHandler != null) {    return currentMissionBehaviour().commandHandler.execute(command,currentMissionInit());  }  return false;}  }
class C{  public double taylor(final double... delta){  double y=value;  for (int i=0; i < delta.length; ++i) {    y+=delta[i] * getDerivative(i);  }  return y;}  }
class C{  public boolean with_all(){  return soot.PhaseOptions.getBoolean(options,"with-all");}  }
class C{  public byte[] sign(final String text) throws DataSigningException {  try {    final Signature signature=Signature.getInstance("SHA256withRSA");    signature.initSign(getPrivateKey());    signature.update(text.getBytes("UTF-8"));    return signature.sign();  } catch (  final NoSuchAlgorithmException e) {    throw new DataSigningException(e);  }catch (  final UnrecoverableKeyException e) {    throw new DataSigningException(e);  }catch (  final InvalidKeyException e) {    throw new DataSigningException(e);  }catch (  final SignatureException e) {    throw new DataSigningException(e);  }catch (  final UnsupportedEncodingException e) {    throw new DataSigningException(e);  }catch (  final KeyStoreException e) {    throw new DataSigningException(e);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public void forEach(StringMap.ForEachFn<T> forEachFn){  for (  String key : internalMap.keySet()) {    forEachFn.forEach(internalMap.get(key),key,this);  }}  }
class C{  public void mouseDragged(@AndroidCoordinate int x,@AndroidCoordinate int y){  if (myMouseInteraction != null) {    myMouseInteraction.mouseDragged(pxToDp(x),pxToDp(y));  }}  }
class C{  public static boolean find(String str,String regex){  return Pattern.compile(regex).matcher(str).find();}  }
class C{  public SVNCheckedInChangeSet(SyncInfo[] infos){  super();  add(infos);  initData();  String formattedDate;  if (date == null)   formattedDate="n/a"; else   formattedDate=DateFormat.getInstance().format(date);  setName(revision + "  [" + author+ "]  ("+ formattedDate+ ")  "+ comment);}  }
class C{  public static final Slice scale(Slice slice,double scale){  if (slice == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new Slice(slice.getSliceRadius() * scale,slice.getTheta());}  }
class C{  public DLSN positionOnTheNextLedger(){  return new DLSN(logSegmentSequenceNo + 1,0,0);}  }
class C{  public static final String printSortIterable(Iterable iIterable,String sSeparator){  StringBuffer sOut=new StringBuffer();  Iterator iIter=iIterable.iterator();  TreeSet<String> tsItems=new TreeSet<String>();  while (iIter.hasNext()) {    tsItems.add(iIter.next().toString());  }  for (Iterator<String> isCur=tsItems.iterator(); isCur.hasNext(); ) {    sOut.append(isCur.next());    if (isCur.hasNext())     sOut.append(sSeparator);  }  return sOut.toString();}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public void drawShadow(View view,Canvas canvas,int position,float shadowHeight,float shadowStrength){  float scaledShadowHeight=Math.max(0.0f,Math.min(1.0f,shadowStrength)) * shadowHeight;  if (scaledShadowHeight < 1.0f)   return;  int left=view.getScrollX();  int right=left + view.getRight();  if (position == POSITION_BOTTOM) {    int bottom=view.getScrollY() + view.getBottom() - view.getTop();    mShadowMatrix.setScale(1,scaledShadowHeight);    mShadowMatrix.postRotate(180);    mShadowMatrix.postTranslate(left,bottom);    mShadowShader.setLocalMatrix(mShadowMatrix);    mShadowPaint.setShader(mShadowShader);    canvas.drawRect(left,bottom - scaledShadowHeight,right,bottom,mShadowPaint);  } else   if (position == POSITION_TOP) {    int top=view.getScrollY();    mShadowMatrix.setScale(1,scaledShadowHeight);    mShadowMatrix.postTranslate(left,top);    mShadowShader.setLocalMatrix(mShadowMatrix);    mShadowPaint.setShader(mShadowShader);    canvas.drawRect(left,top,right,top + scaledShadowHeight,mShadowPaint);  }}  }
class C{  private static boolean containsOnlyInheritDoc(Reader reader,int length){  char[] content=new char[length];  try {    reader.read(content,0,length);  } catch (  IOException e) {    return false;  }  return new String(content).trim().equals("{@inheritDoc}");}  }
class C{  static void renderModel(@NotNull ConstraintModel model){  model.getNlModel().requestRender();}  }
class C{  public WallUnpinQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public AdsUpdateTargetGroupQuery lifetime(Integer value){  return unsafeParam("lifetime",value);}  }
class C{  public FriendsDeleteAllRequestsQuery deleteAllRequests(UserActor actor){  return new FriendsDeleteAllRequestsQuery(getClient(),actor);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_ENEMY_ATTACK(String value1,int num2,String value0){  return new SM_SYSTEM_MESSAGE(1230000,value1,num2,value0);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  static public double KL_symmetric(Distribution p,Distribution q){  if (p.asTreeMap().size() == q.asTreeMap().size()) {    return (0.5 * (KL_asymmetric(p,q) + KL_asymmetric(q,p)));  } else {    return 0;  }}  }
class C{  @Override public boolean parseParameters(Object params){  if (params == null || !(params instanceof RewardForStructureCopying))   return false;  this.rscparams=(RewardForStructureCopying)params;  this.rewardDensity=rscparams.getRewardDensity();  this.dimension=rscparams.getDimension();  return true;}  }
class C{  public void removeSubscriptionFromStore(final String topic,final String clientId){  subscriptionsStore.removeSubscription(topic,clientId);  topics.remove(topic);}  }
class C{  @Override public void forceUpdate(){  zScores.clear();}  }
class C{  public Fraction(int num){  this(num,1);}  }
class C{  public static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize){  Encoder[] encoders={new ASCIIEncoder(),new C40Encoder(),new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};  EncoderContext context=new EncoderContext(msg);  context.setSymbolShape(shape);  context.setSizeConstraints(minSize,maxSize);  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_05);    context.setSkipAtEnd(2);    context.pos+=MACRO_05_HEADER.length();  } else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_06);    context.setSkipAtEnd(2);    context.pos+=MACRO_06_HEADER.length();  }  int encodingMode=ASCII_ENCODATION;  while (context.hasMoreCharacters()) {    encoders[encodingMode].encode(context);    if (context.getNewEncoding() >= 0) {      encodingMode=context.getNewEncoding();      context.resetEncoderSignal();    }  }  int len=context.getCodewordCount();  context.updateSymbolInfo();  int capacity=context.getSymbolInfo().getDataCapacity();  if (len < capacity) {    if (encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION) {      context.writeCodeword('\u00fe');    }  }  StringBuilder codewords=context.getCodewords();  if (codewords.length() < capacity) {    codewords.append(PAD);  }  while (codewords.length() < capacity) {    codewords.append(randomize253State(PAD,codewords.length() + 1));  }  return context.getCodewords().toString();}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  public boolean isDefined(){  return value != null && this instanceof Some;}  }
class C{  public XMLErrorCode(String domain,String key){  fDomain=domain;  fKey=key;}  }
class C{  public void render(GL2 gl){  int fSize=this.fixtures.size();  for (int i=0; i < fSize; i++) {    BodyFixture bodyFixture=this.getFixture(i);    Convex convex=bodyFixture.getShape();    this.setFillColor(gl);    RenderUtilities.fillShape(gl,convex);    this.setOutlineColor(gl);    RenderUtilities.drawShape(gl,convex,false);  }}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  @Override public boolean markSupported(){  return fInputStream.markSupported();}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  public static String encodeXmlValue(String inString){  String retString=inString;  retString=StringUtil.replaceString(retString,"&","&amp;");  retString=StringUtil.replaceString(retString,"<","&lt;");  retString=StringUtil.replaceString(retString,">","&gt;");  retString=StringUtil.replaceString(retString,"\"","&quot;");  retString=StringUtil.replaceString(retString,"'","&apos;");  return retString;}  }
class C{  public Object invoked(long objectId,IMethod method,Object[] args) throws RemoteException, ApplicationException {  ObjectRegistry.Entry orEntry=_objectRegistry.getEntryFromObjectId(objectId);  final Object targetObject=orEntry.m_Object;  ClassLoader orgThreadClassLoader=Thread.currentThread().getContextClassLoader();  final boolean changeCL=orgThreadClassLoader != orEntry.getExportedThreadClassLoader();  try {    if (changeCL)     ClassLoaderHelper.setContextClassLoader(orEntry.getExportedThreadClassLoader(),true);    if (_logger.isLoggable(Level.FINER))     _logger.entering("LRMIRuntime - " + targetObject.getClass().getName() + "#"+ objectId,method.getName(),args);    Object resultInv=method.invoke(targetObject,args);    if (_logger.isLoggable(Level.FINER))     _logger.exiting("LRMIRuntime - " + targetObject.getClass().getName() + "#"+ objectId,method.getName(),resultInv);    return resultInv;  } catch (  IllegalArgumentException ex) {    String exMsg="LRMIRuntime - Failed to invoke RemoteMethod: [" + method + "] on ["+ targetObject+ "] Reason: "+ ex.toString();    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,exMsg,ex);    throw new ApplicationException(exMsg,ex);  }catch (  IllegalAccessException ex) {    String exMsg="LRMIRuntime - Failed to invoke RemoteMethod: [" + method + "] on ["+ targetObject+ "] Reason: "+ ex.toString();    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,exMsg,ex);    throw new ApplicationException(exMsg,ex);  }catch (  InvocationTargetException ex) {    if (_logger.isLoggable(Level.FINER)) {      String exMsg="LRMIRuntime - Failed to invoke RemoteMethod: " + method + " Reason: "+ ex.toString();      _logger.log(Level.FINER,exMsg,ex.getTargetException());    }    throw new ApplicationException(null,ex.getTargetException());  } finally {    if (changeCL)     ClassLoaderHelper.setContextClassLoader(orgThreadClassLoader,true);  }}  }
class C{  public OverrideUrlLoadingResult shouldOverrideUrlLoading(ExternalNavigationParams params){  Intent intent;  try {    intent=Intent.parseUri(params.getUrl(),Intent.URI_INTENT_SCHEME);  } catch (  Exception ex) {    Log.w(TAG,"Bad URI " + params.getUrl(),ex);    return OverrideUrlLoadingResult.NO_OVERRIDE;  }  boolean hasBrowserFallbackUrl=false;  String browserFallbackUrl=IntentUtils.safeGetStringExtra(intent,EXTRA_BROWSER_FALLBACK_URL);  if (browserFallbackUrl != null && UrlUtilities.isValidForIntentFallbackNavigation(browserFallbackUrl)) {    hasBrowserFallbackUrl=true;  } else {    browserFallbackUrl=null;  }  OverrideUrlLoadingResult result=shouldOverrideUrlLoadingInternal(params,intent,hasBrowserFallbackUrl,browserFallbackUrl);  if (result == OverrideUrlLoadingResult.NO_OVERRIDE && hasBrowserFallbackUrl && (params.getRedirectHandler() == null || !params.getRedirectHandler().shouldNotOverrideUrlLoading())) {    return clobberCurrentTabWithFallbackUrl(browserFallbackUrl,params);  }  return result;}  }
