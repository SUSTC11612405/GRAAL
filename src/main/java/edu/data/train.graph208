class C{  @Override public void run(){  amIActive=true;  int row, col, x, y;  float progress=0;  double z;  int i, b, c, ICLCA;  boolean flag=false;  double flowDir=0;  double outletID=0;  double SCAValue;  double maxSCA, d1, d2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String pointerHeader=args[0];  String caHeader=args[1];  String outputHeader=args[2];  double SCAThreshold=Double.parseDouble(args[3]);  if (pointerHeader.isEmpty() || caHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    double noData=pointer.getNoDataValue();    String tempFile=caHeader.replace(".dep","_temp.dep");    FileUtilities.copyFile(new File(caHeader),new File(tempFile));    FileUtilities.copyFile(new File(caHeader.replace(".dep",".tas")),new File(tempFile.replace(".dep",".tas")));    contArea=new WhiteboxRaster(tempFile,"rw");    contArea.isTemporaryFile=true;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",caHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setDataScale(WhiteboxRasterBase.DataScale.CATEGORICAL);    output.setPreferredPalette("categorical1.pal");    outletID=1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pointer.getValue(row,col) != noData) {          flag=false;          for (i=0; i < 8; i++) {            if (pointer.getValue(col + dX[i],row + dY[i]) == inflowingVals[i]) {              flag=true;            }          }          if (!flag) {            flag=false;            x=col;            y=row;            do {              flowDir=pointer.getValue(y,x);              if (flowDir > 0) {                i=(int)(Math.log(flowDir) / LnOf2);                x+=dX[i];                y+=dY[i];              } else {                flag=true;              }              SCAValue=contArea.getValue(y,x);              if (SCAValue >= SCAThreshold) {                maxSCA=-99999;                ICLCA=8;                for (i=0; i < 8; i++) {                  b=x + dX[i];                  c=y + dY[i];                  if (pointer.getValue(c,b) == inflowingVals[i]) {                    z=contArea.getValue(c,b);                    if (z > maxSCA) {                      maxSCA=z;                      ICLCA=i;                    }                  }                }                b=x + dX[ICLCA];                c=y + dY[ICLCA];                if (contArea.getValue(c,b) > SCAThreshold) {                  flag=true;                } else {                  d1=Math.abs(contArea.getValue(c,b) - SCAThreshold);                  d2=Math.abs(contArea.getValue(y,x) - SCAThreshold);                  if (d1 < d2) {                    output.setValue(c,b,outletID);                    decrementFlowpath(c,b,contArea.getValue(c,b));                  } else {                    output.setValue(y,x,outletID);                    decrementFlowpath(y,x,contArea.getValue(y,x));                  }                  outletID++;                }              }            } while (!flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == -999 && pointer.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pointer.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                outletID=z;                flag=true;              }            } else {              outletID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,outletID);          do {            flowDir=pointer.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,outletID);          } while (!flag);        } else         if (pointer.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    contArea.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Coin minus(final Coin value){  return subtract(value);}  }
class C{  private boolean isJavadocProcessingEnabled(){  boolean processJavadoc;  processJavadoc=JavaCore.ENABLED.equals(JavaCore.getOption(JavaCore.COMPILER_DOC_COMMENT_SUPPORT));  return processJavadoc;}  }
class C{  public Object[] toArray(){  Object[] result=new Object[size];  int i=0;  for (Node<E> x=first; x != null; x=x.next)   result[i++]=x.item;  return result;}  }
class C{  @Deprecated public static String readLine(final InputStream inputStream) throws IOException {  LOG.trace("enter HttpParser.readLine(InputStream)");  return readLine(inputStream,"US-ASCII");}  }
class C{  public boolean isBatchModeEnabled(){  return this.batchEnabled.get();}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static PrivateKey loadEncrypted(InputStream is,Password password) throws IOException, CryptoException {  try {    byte[] pvk=ReadUtil.readFully(is);    ByteBuffer bb=ByteBuffer.wrap(pvk);    bb.order(ByteOrder.LITTLE_ENDIAN);    long keyType=readReservedMagicKeyType(bb);    long encrypted=UnsignedUtil.getInt(bb);    if (encrypted != PVK_ENCRYPTED) {      throw new PrivateKeyUnencryptedException(MessageFormat.format(res.getString("MsPvkIsUnencrypted.exception.message"),Long.toHexString(encrypted),Long.toHexString(PVK_ENCRYPTED)));    }    long saltLength=UnsignedUtil.getInt(bb);    if (saltLength != ENCRYPTED_SALT_LENGTH) {      throw new CryptoException(MessageFormat.format(res.getString("InvalidMsPvkSaltLengthField.exception.message"),Long.toHexString(saltLength),Long.toHexString(ENCRYPTED_SALT_LENGTH)));    }    long keyLength=UnsignedUtil.getInt(bb);    byte[] strongKey=new byte[16];    byte[] weakKey=new byte[16];    byte salt[]=new byte[(int)saltLength];    bb.get(salt);    MessageDigest messagedigest=MessageDigest.getInstance("SHA1");    byte[] passwordBytes=new String(password.toCharArray()).getBytes();    byte[] saltAndPassword=new byte[salt.length + passwordBytes.length];    System.arraycopy(salt,0,saltAndPassword,0,salt.length);    System.arraycopy(passwordBytes,0,saltAndPassword,salt.length,passwordBytes.length);    byte[] key=messagedigest.digest(saltAndPassword);    System.arraycopy(key,0,strongKey,0,16);    System.arraycopy(key,0,weakKey,0,5);    for (int i=5; i < 16; i++) {      weakKey[i]=0;    }    readPrivateKeyBlobHeader(bb,keyType);    byte[] encryptedPrivateKeyBlob=new byte[bb.remaining()];    bb.get(encryptedPrivateKeyBlob);    if (keyLength != (encryptedPrivateKeyBlob.length + BLOB_HEADER_LENGTH)) {      throw new CryptoException(MessageFormat.format(res.getString("InvalidMsPvkKeyLengthField.exception.message"),Long.toHexString(keyLength),Long.toHexString(encryptedPrivateKeyBlob.length + BLOB_HEADER_LENGTH)));    }    byte[] decryptedPrivateKeyBlob=decryptPrivateKeyBlob(encryptedPrivateKeyBlob,strongKey);    if (decryptedPrivateKeyBlob == null) {      decryptedPrivateKeyBlob=decryptPrivateKeyBlob(encryptedPrivateKeyBlob,weakKey);      if (decryptedPrivateKeyBlob == null) {        throw new CryptoException(res.getString("NoDecryptMsPvkCheckPassword.exception.message"));      }    }    return blobToPrivateKey(decryptedPrivateKeyBlob);  } catch (  GeneralSecurityException ex) {    throw new CryptoException(res.getString("NoLoadMsPvk.exception.message"),ex);  }}  }
class C{  public void testModeDefaultIsNotSet() throws Exception {  setSecondaryFs=true;  startUp();  checkMode("/dir",DUAL_ASYNC);}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  protected void revisitNode(final Node n,final DijkstraNodeData data,final RouterPriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  data.visit(outLink,cost,time,getIterationId());  pendingNodes.decreaseKey(n,getPriority(data));}  }
class C{  public void clear(float r,float g,float b,float a){  begin();  GL10 gl=CCDirector.gl;  gl.glClearColor(r,g,b,a);  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);  gl.glColorMask(true,true,true,false);  end();}  }
class C{  @RpcMethod public void finalizeImage(String imageId,String datastore,String tmpImagePath,AsyncMethodCallback<Host.AsyncClient.finalize_image_call> handler) throws RpcException {  ensureClient();  FinalizeImageRequest finalizeImageRequest=new FinalizeImageRequest();  finalizeImageRequest.setImage_id(imageId);  finalizeImageRequest.setDatastore(datastore);  finalizeImageRequest.setTmp_image_path(tmpImagePath);  clientProxy.setTimeout(FINALIZE_IMAGE_TIMEOUT_MS);  logger.info("finalize_image target {}, request {}",getHostIp(),finalizeImageRequest);  try {    clientProxy.finalize_image(finalizeImageRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  private void parseSkipURL(String skipURL){  patternSkipURL=null;  if (skipURL == null || skipURL.equals("")) {    return;  }  skipURL=skipURL.replaceAll("\\.","\\\\.");  skipURL=skipURL.replaceAll("\\*",".*?").replaceAll("(\\s+$)|(^\\s+)","");  skipURL="\\A(" + skipURL.replaceAll("\\s+","|") + ")";  patternSkipURL=Pattern.compile(skipURL,Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);}  }
class C{  public static Timestamp max(Timestamp ts1,Timestamp ts2){  if (ts1 == null)   return ts2;  if (ts2 == null)   return ts1;  if (ts2.after(ts1))   return ts2;  return ts1;}  }
class C{  public Xml(Document document){  this.value=document;}  }
class C{  public GridResourceProcessor(GridKernalContext ctx){  super(ctx);  injectorByAnnotation=new GridResourceInjector[GridResourceIoc.ResourceAnnotation.values().length];  injectorByAnnotation[GridResourceIoc.ResourceAnnotation.SERVICE.ordinal()]=new GridResourceServiceInjector(ctx.grid());  injectorByAnnotation[GridResourceIoc.ResourceAnnotation.LOGGER.ordinal()]=new GridResourceLoggerInjector(ctx.config().getGridLogger());  injectorByAnnotation[GridResourceIoc.ResourceAnnotation.IGNITE_INSTANCE.ordinal()]=new GridResourceBasicInjector<>(ctx.grid());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public boolean isPostingType(String PostingType){  return m_postingType.equals(PostingType);}  }
class C{  public SvgHelper(final Paint sourcePaint){  mSourcePaint=sourcePaint;}  }
class C{  private String keysSetToStr(Set<String> set){  Iterator<String> iter=set.iterator();  StringBuilder builder=new StringBuilder();  while (iter.hasNext()) {    builder.append(iter.next());    if (iter.hasNext())     builder.append(',');  }  return builder.toString();}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public void test_concurrentKBCreateAndDiscoveryStressTestOnSharedJournal() throws Exception {  final Properties properties=getProperties();  Journal jnl=null;  try {    jnl=new Journal(properties);    for (int i=0; i < 100; i++) {      final String namespace=getName() + "-" + i;      doConcurrentCreateAndDiscoveryTest(jnl,namespace);    }  }  finally {    if (jnl != null)     jnl.destroy();  }}  }
class C{  public byte[] engineCanonicalizeSubTree(Node rootNode,String inclusiveNamespaces) throws CanonicalizationException {  return engineCanonicalizeSubTree(rootNode,inclusiveNamespaces,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeattributenodevalue.class,args);}  }
class C{  public GMac(final GCMBlockCipher cipher){  this.cipher=cipher;  this.macSizeBits=128;}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.992 -0500",hash_original_method="528508E389FED61ADC9A70FF93AA8789",hash_generated_method="59B59CD0BDDA39AA7270D74CEB419FFD") public boolean disableCellBroadcastRange(int startMessageId,int endMessageId){  boolean success=false;  try {    ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));    if (iccISms != null) {      success=iccISms.disableCellBroadcastRange(startMessageId,endMessageId);    }  } catch (  RemoteException ex) {  }  return success;}  }
class C{  public static String apiMimeTypeToNetworkMimeType(String apiMimeType){  if (apiMimeType.startsWith(MimeType.GEOLOC_MESSAGE)) {    return GeolocInfoDocument.MIME_TYPE;  } else   if (isTextPlainType(apiMimeType)) {    return MimeType.TEXT_MESSAGE;  } else   if (apiMimeType.startsWith(FileTransferHttpInfoDocument.MIME_TYPE)) {    return FileTransferHttpInfoDocument.MIME_TYPE;  }  throw new IllegalArgumentException("Unsupported input mimetype detected : " + apiMimeType);}  }
class C{  public boolean containsKey(Object key){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k)     return true;    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  @VisibleForTesting public static GaeUserCredentials forTestingUser(User gaeUser,Boolean isAdmin){  checkArgumentNotNull(gaeUser);  checkArgumentNotNull(isAdmin);  return new GaeUserCredentials(gaeUser,isAdmin);}  }
class C{  boolean aosp(){  return aosp;}  }
class C{  public void updateReceptionReport(ReceptionReport report){  int extendedMax=getExtendedSequenceNumber();  int expected=extendedMax - baseSeq + 1;  report.setCumulativeNumberOfPacketsLost(expected - received);  report.setDelaySinceLastSenderReport(0);  report.setExtendedHighestSequenceNumberReceived(getExtendedSequenceNumber());  long expectedInterval=expected - expectedPrior;  expectedPrior=expected;  int receivedInterval=received - receivedPrior;  receivedPrior=received;  long lostInterval=expectedInterval - receivedInterval;  if (expectedInterval == 0 || lostInterval <= 0) {    report.setFractionLost(0);  } else {    report.setFractionLost((lostInterval << 8) / (double)expectedInterval);  }  report.setInterarrivalJitter(0);  report.setLastSenderReport(lastSenderReport);  report.setSsrc(ssrc);}  }
class C{  public String rewrite(final String cssUri,final String imageUrl){  notNull(cssUri);  notNull(imageUrl);  if (StringUtils.isEmpty(imageUrl)) {    return imageUrl;  }  if (ServletContextUriLocator.isValid(cssUri)) {    if (ServletContextUriLocator.isValid(imageUrl)) {      return prependContextPath(imageUrl);    }    if (ServletContextUriLocator.isProtectedResource(cssUri)) {      return context.proxyPrefix + computeNewImageLocation(cssUri,imageUrl);    }    final String aggregatedPathPrefix=computeAggregationPathPrefix(context.aggregatedFolderPath);    LOG.debug("computed aggregatedPathPrefix {}",aggregatedPathPrefix);    String newImageLocation=computeNewImageLocation(aggregatedPathPrefix + cssUri,imageUrl);    if (newImageLocation.startsWith(ServletContextUriLocator.PREFIX)) {      newImageLocation=prependContextPath(newImageLocation);    }    LOG.debug("newImageLocation: {}",newImageLocation);    return newImageLocation;  }  if (ClasspathUriLocator.isValid(cssUri)) {    final String proxyUrl=context.proxyPrefix + computeNewImageLocation(cssUri,imageUrl);    final String contextRelativeUrl=prependContextPath(imageUrl);    return (ServletContextUriLocator.isValid(imageUrl) ? contextRelativeUrl : proxyUrl);  }  if (UrlUriLocator.isValid(cssUri)) {    final String computedCssUri=ServletContextUriLocator.isValid(imageUrl) ? computeCssUriForExternalServer(cssUri) : cssUri;    return computeNewImageLocation(computedCssUri,imageUrl);  }  throw new WroRuntimeException("Could not replace imageUrl: " + imageUrl + ", contained at location: "+ cssUri);}  }
class C{  public void write(SFTPv3FileHandle handle,long fileOffset,byte[] src,int srcoff,int len) throws IOException {  checkHandleValidAndOpen(handle);  while (len > 0) {    int writeRequestLen=len;    if (writeRequestLen > 32768)     writeRequestLen=32768;    int req_id=generateNextRequestID();    TypesWriter tw=new TypesWriter();    tw.writeString(handle.fileHandle,0,handle.fileHandle.length);    tw.writeUINT64(fileOffset);    tw.writeString(src,srcoff,writeRequestLen);    if (debug != null) {      debug.println("Sending SSH_FXP_WRITE...");      debug.flush();    }    sendMessage(Packet.SSH_FXP_WRITE,req_id,tw.getBytes());    fileOffset+=writeRequestLen;    srcoff+=writeRequestLen;    len-=writeRequestLen;    byte[] resp=receiveMessage(34000);    TypesReader tr=new TypesReader(resp);    int t=tr.readByte();    int rep_id=tr.readUINT32();    if (rep_id != req_id)     throw new IOException("The server sent an invalid id field.");    if (t != Packet.SSH_FXP_STATUS)     throw new IOException("The SFTP server sent an unexpected packet type (" + t + ")");    int errorCode=tr.readUINT32();    if (errorCode == ErrorCodes.SSH_FX_OK)     continue;    String errorMessage=tr.readString();    throw new SFTPException(errorMessage,errorCode);  }}  }
class C{  public JDABuilder removeListener(Object listener){  listeners.remove(listener);  return this;}  }
class C{  private static void SetIntField(JNIEnvironment env,int objJREF,int fieldID,int value){  if (traceJNI)   VM.sysWrite("JNI called: SetIntField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setIntValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private static void enableCountrySpecificEncodings(){  sEnabledSingleShiftTables=new int[1];  sEnabledLockingShiftTables=new int[1];  if (sEnabledSingleShiftTables.length > 0) {    sHighestEnabledSingleShiftCode=sEnabledSingleShiftTables[sEnabledSingleShiftTables.length - 1];  } else {    sHighestEnabledSingleShiftCode=0;  }}  }
class C{  static long[] findDeadlockedThreads(){  throw new UnimplementedError();}  }
class C{  public AImage(){  super();  URL url=org.compiere.Adempiere.class.getResource("images/Java_anim.gif");  if (url == null)   url=org.compiere.Adempiere.class.getResource("images/Java_logo.gif");  if (url != null) {    m_image=Toolkit.getDefaultToolkit().getImage(url);    tracker.addImage(m_image,1);  }}  }
class C{  public Coord4D(int x,int y,int z,int dimension){  xCoord=x;  yCoord=y;  zCoord=z;  dimensionId=dimension;}  }
class C{  public static Media createBackgroundMedia(String uri) throws IOException {  return Display.getInstance().createBackgroundMedia(uri);}  }
class C{  public Polyline2D(List<Point2D> points){  this.points=points;}  }
class C{  public synchronized void enableType(String prefix) throws IllegalArgumentException {  if (prefix == null) {    throw new IllegalArgumentException("The prefix cannot be null.");  }  if (!enabledTypes.contains(prefix)) {    enabledTypes.add(prefix);  }}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Automaton<LR1Item,LR1State> createAutomaton(LRGenerator<LR1Item,LR1State> generator,GrammarInfo grammarInfo) throws GeneratorException {  this.generator=generator;  this.grammarInfo=grammarInfo;  initCreation();  long start=System.currentTimeMillis();  LR0Item startStateKernelItem=this.queue.remove(0).getLR0Kernel().getFirstItem();  Set<LR0Item> startStateItemKernel=set();  startStateItemKernel.add(startStateKernelItem);  Set<LALR1CPItem> startStateItem=set();  startStateItem.add(new LALR1CPItem(startStateKernelItem,grammarInfo.getTerminalSet(Placeholder)));  LALR1CPState startStateKernel=new LALR1CPState(startStateItem);  Map<LALR1CPState,LALR1CPState> kernel2closure=map();  Map<LALR1CPItem,CPGoToLink> goToLinks=map();  Map<LALR1CPItem,LALR1CPState> itemStates=map();  Set<Edge> lr0Edges=set();{    Set<LALR1CPState> queue=set();    queue.add(startStateKernel);    kernel2closure.put(startStateKernel,startStateKernel.closure(grammarInfo));    while (!queue.isEmpty()) {      LALR1CPState stateKernel=queue.iterator().next();      queue.remove(stateKernel);      printDebugMessages();      LALR1CPState state=kernel2closure.get(stateKernel);      Set<Symbol> shiftedSymbols=new HashSet<Symbol>();      for (      LALR1CPItem item : state.getItems()) {        itemStates.put(item,state);        if (item.isShiftable()) {          Symbol symbol=item.getNextSymbol();          if (symbol == EndOfInputStream) {            lr0Edges.add(createAcceptEdge(stateKernel,symbol));          } else           if (shiftedSymbols.add(symbol)) {            Tuple2<LALR1CPState,List<CPGoToLink>> s=state.goToCP(symbol);            LALR1CPState shiftedStateKernel=s.get1();            List<CPGoToLink> shiftedStateCPLinks=s.get2();            LALR1CPState equalStateLALR1CP=kernel2closure.get(shiftedStateKernel);            LALR1CPState gotoLinkTargetState=equalStateLALR1CP;            if (equalStateLALR1CP == null) {              LALR1CPState shiftedState=shiftedStateKernel.closure(grammarInfo);              kernel2closure.put(shiftedStateKernel,shiftedState);              queue.add(shiftedStateKernel);              gotoLinkTargetState=shiftedState;            }            for (            CPGoToLink link : shiftedStateCPLinks) {              LALR1CPItem todoItem=link.getSource();              if (goToLinks.containsKey(todoItem)) {                throw new RuntimeException("Double gotoLink!");              }              goToLinks.put(todoItem,link.withTargetState(gotoLinkTargetState));            }            lr0Edges.add(new Edge(stateKernel,symbol,shiftedStateKernel,item.getLR0Item()));          }        }      }    }  }  if (debug) {    long actual=System.currentTimeMillis();    start=actual - start;    System.out.println("LR(0) Generierung: " + (start / 1000.0));    start=actual;  }  Map<LALR1CPItem,EfficientTerminalSet> lookaheads=map();{    Stack<LALR1CPItem> dfsStack=stack();    Stack<LALR1CPItem> sccStack=stack();    Set<LALR1CPItem> sccSet=set();    Set<Tuple2<LALR1CPItem,LALR1CPItem>> edges=set();    int dfsIndex=0;    Map<LALR1CPItem,Integer> dfsIndices=map();    Map<LALR1CPItem,Integer> lowlink=map();    Map<Integer,LALR1CPItem> sccRoots=map();    Set<LALR1CPItem> dfsSet=set();    Set<LALR1CPItem> visited=set();    for (    LALR1CPState sta : kernel2closure.values()) {      Collection<LALR1CPItem> col=sta.getItemsAsCollection();      for (      LALR1CPItem it : col) {        EfficientTerminalSet la=it.getLookaheads();        lookaheads.put(it,la);        dfsSet.add(it);      }    }    LALR1CPState startstate=kernel2closure.get(startStateKernel);    LALR1CPItem firstItem=startstate.getItemWithLookaheadByLR0Item(startStateKernelItem);    dfsStack.push(firstItem);    sccStack.push(firstItem);    sccSet.add(firstItem);    dfsIndices.put(firstItem,0);    lowlink.put(firstItem,0);    LALR1CPItem found;    do {      dfsSet.remove(dfsStack.peek());      while (!(dfsStack.isEmpty())) {        found=null;        LALR1CPItem item=dfsStack.peek();        if (visited.add(item)) {          CPGoToLink gotoLink=goToLinks.get(item);          int ll=lowlink.get(item);          if (gotoLink != null) {            LALR1CPState targetState=gotoLink.getTargetState();            LALR1CPItem targetItem=targetState.getItemWithLookaheadByLR0Item(gotoLink.getTargetItem());            if (dfsSet.contains(targetItem)) {              found=targetItem;              dfsStack.push(found);              sccStack.push(found);              sccSet.add(found);              dfsSet.remove(found);              dfsIndex++;              dfsIndices.put(found,dfsIndex);              lowlink.put(found,dfsIndex);            } else {              if (sccSet.contains(targetItem)) {                lowlink.put(item,Math.min(ll,dfsIndices.get(targetItem)));              }            }            edges.add(t(item,targetItem));          }          for (          LR0Item closureLink : item.getClosureLinks()) {            LALR1CPState ownState=itemStates.get(item);            LALR1CPItem targetItem=ownState.getItemWithLookaheadByLR0Item(closureLink);            if (dfsSet.contains(targetItem)) {              found=targetItem;              dfsStack.push(found);              sccStack.push(found);              sccSet.add(found);              dfsSet.remove(found);              dfsIndex++;              dfsIndices.put(found,dfsIndex);              lowlink.put(found,dfsIndex);            } else {              if (sccSet.contains(targetItem)) {                lowlink.put(item,Math.min(ll,dfsIndices.get(targetItem)));              }            }            edges.add(t(item,targetItem));          }        }        if (found == null) {          dfsStack.pop();          if (!dfsStack.isEmpty()) {            lowlink.put(dfsStack.peek(),Math.min(lowlink.get(dfsStack.peek()),lowlink.get(item)));          }          if (lowlink.get(item).equals(dfsIndices.get(item))) {            sccRoots.put(dfsIndices.get(item),item);            Collection<LALR1CPItem> l=llist();            EfficientTerminalSet ts=lookaheads.get(item);            l.add(item);            while ((found=sccStack.pop()) != item) {              lowlink.put(found,dfsIndices.get(item));              ts=ts.plusAll(lookaheads.get(found));              l.add(found);              sccSet.remove(found);            }            lookaheads.put(item,ts);            sccSet.remove(item);          }        }      }      LALR1CPItem item=null;      LALR1CPItem backup=null;      for (      LALR1CPItem it : dfsSet) {        backup=it;        if (it.getPosition() == 0) {          item=it;          break;        }      }      if (item == null && backup == null) {        break;      } else {        item=backup;      }      dfsStack.push(item);      sccStack.push(item);      sccSet.add(item);      dfsIndex++;      dfsIndices.put(item,dfsIndex);      lowlink.put(item,dfsIndex);    } while (!dfsStack.isEmpty());    if (debug) {      long actual=System.currentTimeMillis();      start=actual - start;      System.out.println("Determining SCCs: " + (start / 1000.0));      start=actual;    }    final Map<LALR1CPItem,Integer> incoming=map();    Map<LALR1CPItem,Set<LALR1CPItem>> edgerelation=map();    for (    LALR1CPItem it : sccRoots.values()) {      incoming.put(it,0);      edgerelation.put(it,new HashSet<LALR1CPItem>());    }    for (    Tuple2<LALR1CPItem,LALR1CPItem> e : edges) {      int source=lowlink.get(e.get1());      int target=lowlink.get(e.get2());      if (source == target) {        continue;      }      LALR1CPItem t=sccRoots.get(target);      if (edgerelation.get(sccRoots.get(source)).add(t)) {        incoming.put(t,incoming.get(t) + 1);      }    }    if (debug) {      long actual=System.currentTimeMillis();      start=actual - start;      System.out.println("Inter SCC-edges: " + (start / 1000.0));      start=actual;    }    FibonacciHeap<LALR1CPItem> pq=new FibonacciHeap<LALR1CPItem>();    for (    LALR1CPItem it : sccRoots.values()) {      pq.insert(it,incoming.get(it));    }    while (!pq.isEmpty()) {      LALR1CPItem it=pq.extractMin();      EfficientTerminalSet itla=lookaheads.get(it);      for (      LALR1CPItem t : edgerelation.get(it)) {        EfficientTerminalSet edgela=lookaheads.get(t);        pq.decrementKey(t);        lookaheads.put(t,edgela.plusAll(itla));      }    }    if (debug) {      long actual=System.currentTimeMillis();      start=actual - start;      System.out.println("Propagating LAs: " + (start / 1000.0));      start=actual;    }    for (    Map.Entry<LALR1CPItem,Integer> me : lowlink.entrySet()) {      lookaheads.put(me.getKey(),lookaheads.get(sccRoots.get(me.getValue())));    }  }  Map<LALR1CPState,LR1State> lalr1CPToLR1Map=map();  for (  LALR1CPState state : kernel2closure.keySet()) {    HashSet<LR1Item> lr1Items=new HashSet<LR1Item>();    LALR1CPState stateWithClosure=kernel2closure.get(state);    for (    LR0Item strippedItem : state.getStrippedItems()) {      LALR1CPItem item=stateWithClosure.getItemWithLookaheadByLR0Item(strippedItem);      EfficientTerminalSet terminals=lookaheads.get(item);      lr1Items.add(new LR1Item(strippedItem,terminals));    }    LR1State lr1State=new LR1State(lr1Items);    lalr1CPToLR1Map.put(state,lr1State);    dfaStates.add(lr1State);  }  for (  Edge edge : lr0Edges) {    this.dfaEdges.add(new Edge(lalr1CPToLR1Map.get(edge.getSrc()),edge.getSymbol(),lalr1CPToLR1Map.get(edge.getDest()),edge.getSrcItem()));  }  printDebugResult();  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.241 -0400",hash_original_method="DAA57512F350005E028FADEF77972821",hash_generated_method="DAA57512F350005E028FADEF77972821") Node(Node<K,V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  private ArrayList<Instruction> doGreedyGrouping(StatementBlock sb,ArrayList<Lop> node_v) throws LopsException, IOException, DMLRuntimeException {  if (LOG.isTraceEnabled())   LOG.trace("Grouping DAG ============");  ArrayList<Lop> execNodes=new ArrayList<Lop>();  ArrayList<Lop> finishedNodes=new ArrayList<Lop>();  ArrayList<Lop> queuedNodes=new ArrayList<Lop>();  ArrayList<ArrayList<Lop>> jobNodes=createNodeVectors(JobType.getNumJobTypes());  ArrayList<Instruction> inst=new ArrayList<Instruction>();  ArrayList<Instruction> writeInst=new ArrayList<Instruction>();  ArrayList<Instruction> deleteInst=new ArrayList<Instruction>();  ArrayList<Instruction> endOfBlockInst=new ArrayList<Instruction>();  deleteUpdatedTransientReadVariables(sb,node_v,writeInst);  generateRemoveInstructions(sb,endOfBlockInst);  generateInstructionsForInputVariables(node_v,inst);  boolean done=false;  String indent="    ";  while (!done) {    if (LOG.isTraceEnabled())     LOG.trace("Grouping nodes in DAG");    execNodes.clear();    queuedNodes.clear();    clearNodeVectors(jobNodes);    gmrMapperFootprint=0;    for (    Lop node : node_v) {      if (finishedNodes.contains(node))       continue;      if (LOG.isTraceEnabled())       LOG.trace("Processing node (" + node.getID() + ") "+ node.toString()+ " exec nodes size is "+ execNodes.size());      if (node.definesMRJob() && !compatibleWithChildrenInExecNodes(execNodes,node)) {        if (LOG.isTraceEnabled())         LOG.trace(indent + "Queueing node " + node.toString()+ " (code 1)");        queuedNodes.add(node);        removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);        continue;      }      if (hasChildNode(node,queuedNodes)) {        if (LOG.isTraceEnabled())         LOG.trace(indent + "Queueing node " + node.toString()+ " (code 2)");        queuedNodes.add(node);        removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);        continue;      }      if (node.getInputs().size() >= 2) {        int jobid=Integer.MIN_VALUE;        boolean queueit=false;        for (int idx=0; idx < node.getInputs().size(); idx++) {          int input_jobid=jobType(node.getInputs().get(idx),jobNodes);          if (input_jobid != -1) {            if (jobid == Integer.MIN_VALUE)             jobid=input_jobid; else             if (jobid != input_jobid) {              queueit=true;              break;            }          }        }        if (queueit) {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Queueing node " + node.toString()+ " (code 3)");          queuedNodes.add(node);          removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);          continue;        }      }      boolean eliminate=false;      eliminate=canEliminateLop(node,execNodes);      if (eliminate) {        if (LOG.isTraceEnabled())         LOG.trace(indent + "Adding -" + node.toString());        execNodes.add(node);        finishedNodes.add(node);        addNodeByJobType(node,jobNodes,execNodes,eliminate);        continue;      }      if (node.definesMRJob()) {        if (hasMRJobChildNode(node,execNodes)) {          if (!(node.getType() == Lop.Type.Grouping && checkDataGenAsChildNode(node,execNodes))) {            if (LOG.isTraceEnabled())             LOG.trace(indent + "Queueing node " + node.toString()+ " (code 4)");            queuedNodes.add(node);            removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);            continue;          }        }      }      if (node.getInputs().size() > 1 && hasChildNode(node,execNodes,ExecLocation.RecordReader)) {        Lop rr_node=getChildNode(node,execNodes,ExecLocation.RecordReader);        boolean queue_it=false;        for (        Lop n : node.getInputs()) {          if (!n.equals(rr_node) && !isChild(rr_node,n,IDMap)) {            queue_it=true;            break;          }        }        if (queue_it) {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Queueing -" + node.toString()+ " (code 5)");          queuedNodes.add(node);          removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);          continue;        } else {          ;        }      }      if (node.getExecLocation() == ExecLocation.Data) {        Data dnode=(Data)node;        boolean dnode_queued=false;        if (dnode.getOperationType() == OperationTypes.READ) {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Adding Data -" + node.toString());          if (node.getDataType() == DataType.SCALAR && node.getOutputParameters().getFile_name() != null) {            execNodes.add(node);          }        } else         if (dnode.getOperationType() == OperationTypes.WRITE) {          Lop input=dnode.getInputs().get(0);          if (dnode.isTransient() && input.getExecLocation() == ExecLocation.Data && ((Data)input).isTransient() && dnode.getOutputParameters().getLabel().equals(input.getOutputParameters().getLabel())) {            ;          } else           if (execNodes.contains(input) && !isCompatible(node,input) && sendWriteLopToMR(node)) {            if (LOG.isTraceEnabled())             LOG.trace(indent + "Queueing -" + node.toString());            queuedNodes.add(node);            dnode_queued=true;          } else {            if (LOG.isTraceEnabled())             LOG.trace(indent + "Adding Data -" + node.toString());            execNodes.add(node);            if (sendWriteLopToMR(node)) {              addNodeByJobType(node,jobNodes,execNodes,false);            }          }        }        if (!dnode_queued)         finishedNodes.add(node);        continue;      }      if (node.getExecLocation() == ExecLocation.MapOrReduce) {        if (LOG.isTraceEnabled())         LOG.trace(indent + "Adding -" + node.toString());        execNodes.add(node);        finishedNodes.add(node);        addNodeByJobType(node,jobNodes,execNodes,false);        continue;      }      if (node.getExecLocation() == ExecLocation.RecordReader) {        if (!hasChildNode(node,execNodes,ExecLocation.Map) && !hasChildNode(node,execNodes,ExecLocation.MapAndReduce)) {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Adding -" + node.toString());          execNodes.add(node);          finishedNodes.add(node);          addNodeByJobType(node,jobNodes,execNodes,false);        } else {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Queueing -" + node.toString()+ " (code 6)");          queuedNodes.add(node);          removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);        }        continue;      }      if (node.getExecLocation() == ExecLocation.Map) {        boolean queueThisNode=false;        int subcode=-1;        if (node.usesDistributedCache()) {          int[] dcInputIndexes=node.distributedCacheInputIndex();          for (          int dcInputIndex : dcInputIndexes) {            Lop dcInput=node.getInputs().get(dcInputIndex - 1);            if ((dcInput.getType() != Lop.Type.Data && dcInput.getExecType() == ExecType.MR) && execNodes.contains(dcInput)) {              queueThisNode=true;              subcode=1;            }          }          double memsize=computeFootprintInMapper(node);          if (gmrMapperFootprint > 0 && !checkMemoryLimits(node,gmrMapperFootprint + memsize)) {            queueThisNode=true;            subcode=2;          }          if (!queueThisNode)           gmrMapperFootprint+=memsize;        }        if (!queueThisNode && !hasChildNode(node,execNodes,ExecLocation.MapAndReduce) && !hasMRJobChildNode(node,execNodes)) {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Adding -" + node.toString());          execNodes.add(node);          finishedNodes.add(node);          addNodeByJobType(node,jobNodes,execNodes,false);        } else {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Queueing -" + node.toString()+ " (code 7 - "+ "subcode "+ subcode+ ")");          queuedNodes.add(node);          removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);        }        continue;      }      if (node.getExecLocation() == ExecLocation.MapAndReduce) {        if (LOG.isTraceEnabled())         LOG.trace(indent + "Adding -" + node.toString());        execNodes.add(node);        finishedNodes.add(node);        addNodeByJobType(node,jobNodes,execNodes,eliminate);        continue;      }      if (node.getExecLocation() == ExecLocation.Reduce) {        if (compatibleWithChildrenInExecNodes(execNodes,node) && (hasChildNode(node,execNodes,ExecLocation.MapAndReduce) || hasChildNode(node,execNodes,ExecLocation.Map))) {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Adding -" + node.toString());          execNodes.add(node);          finishedNodes.add(node);          addNodeByJobType(node,jobNodes,execNodes,false);        } else {          if (LOG.isTraceEnabled())           LOG.trace(indent + "Queueing -" + node.toString()+ " (code 8)");          queuedNodes.add(node);          removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);        }        continue;      }      if (node.getExecLocation() == ExecLocation.ControlProgram) {        for (        Lop lop : node.getInputs()) {          if (execNodes.contains(lop) && !(lop.getExecLocation() == ExecLocation.Data) && !(lop.getExecLocation() == ExecLocation.ControlProgram)) {            if (LOG.isTraceEnabled())             LOG.trace(indent + "Queueing -" + node.toString()+ " (code 9)");            queuedNodes.add(node);            removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);            break;          }        }        if (queuedNodes.contains(node))         continue;        if (LOG.isTraceEnabled())         LOG.trace(indent + "Adding - scalar" + node.toString());        execNodes.add(node);        addNodeByJobType(node,jobNodes,execNodes,false);        finishedNodes.add(node);        continue;      }    }    if (execNodes.isEmpty()) {      if (!queuedNodes.isEmpty()) {        throw new LopsException("Queued nodes should not be 0 at this point \n");      }      if (LOG.isTraceEnabled())       LOG.trace("All done! queuedNodes = " + queuedNodes.size());      done=true;    } else {      if (LOG.isTraceEnabled())       LOG.trace("Generating jobs for group -- Node count=" + execNodes.size());      generateControlProgramJobs(execNodes,inst,writeInst,deleteInst);      for (int i=0; i < execNodes.size(); i++) {        Lop node=execNodes.get(i);        if (jobType(node,jobNodes) == -1) {          if (isCompatible(node,JobType.GMR)) {            if (node.hasNonBlockedInputs()) {              jobNodes.get(JobType.GMRCELL.getId()).add(node);              addChildren(node,jobNodes.get(JobType.GMRCELL.getId()),execNodes);            } else {              jobNodes.get(JobType.GMR.getId()).add(node);              addChildren(node,jobNodes.get(JobType.GMR.getId()),execNodes);            }          } else {            if (LOG.isTraceEnabled())             LOG.trace(indent + "Queueing -" + node.toString()+ " (code 10)");            execNodes.remove(i);            finishedNodes.remove(node);            queuedNodes.add(node);            removeNodesForNextIteration(node,finishedNodes,execNodes,queuedNodes,jobNodes);          }        }      }      if (!execNodes.isEmpty())       generateMRJobs(execNodes,inst,writeInst,deleteInst,jobNodes);      handleSingleOutputJobs(execNodes,jobNodes,finishedNodes);    }  }  inst.addAll(writeInst);  inst.addAll(deleteInst);  inst.addAll(endOfBlockInst);  return inst;}  }
class C{  public static void printMappingVector(Vector mvec){  for (int i=0; i < mvec.size(); i++) {    Vector line=(Vector)mvec.elementAt(i);    System.out.print("line " + i + ":");    for (int j=0; j < line.size(); j++) {      MappingObject mobj=(MappingObject)line.elementAt(j);      System.out.print("  " + mobj.toString());    }    System.out.println("");  }}  }
class C{  public ObjectTypeImpl(Class clazz){  this.clazz=clazz;}  }
class C{  @Override public RegularTimePeriod next(){  RegularTimePeriod result=null;  if (this.millisecond != LAST_MILLISECOND_IN_SECOND) {    result=new Millisecond(this.millisecond + 1,getSecond());  } else {    Second next=(Second)getSecond().next();    if (next != null) {      result=new Millisecond(FIRST_MILLISECOND_IN_SECOND,next);    }  }  return result;}  }
class C{  public static Image createImage(int[] rgb,int width,int height){  try {    Image i=new Image(Display.impl.createImage(rgb,width,height));    return i;  } catch (  OutOfMemoryError err) {    System.gc();    System.gc();    return new Image(Display.impl.createImage(rgb,width,height));  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4){  return construct(e1,e2,e3,e4);}  }
class C{  public static String loadCartFromQuote(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  String quoteId=request.getParameter("quoteId");  ShoppingCart cart=null;  try {    Map<String,Object> outMap=dispatcher.runSync("loadCartFromQuote",UtilMisc.<String,Object>toMap("quoteId",quoteId,"applyQuoteAdjustments","true","userLogin",userLogin));    if (!ServiceUtil.isSuccess(outMap)) {      request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(outMap));      return "error";    }    cart=(ShoppingCart)outMap.get("shoppingCart");  } catch (  GenericServiceException exc) {    request.setAttribute("_ERROR_MESSAGE_",exc.getMessage());    return "error";  }  cart.setDefaultCheckoutOptions(dispatcher);  cart.setReadOnlyCart(true);  session.setAttribute("shoppingCart",cart);  session.setAttribute("productStoreId",cart.getProductStoreId());  session.setAttribute("orderMode",cart.getOrderType());  session.setAttribute("orderPartyId",cart.getOrderPartyId());  return "success";}  }
class C{  public CandlePeriod(ZonedDateTime startOfPeriod,int secondsLength){  if (null == startOfPeriod) {    throw new IllegalArgumentException("Null startOfPeriod argument.");  }  if (secondsLength == 0) {    throw new IllegalArgumentException("Null 'secondsLength' argument.");  }  this.startOfPeriod=startOfPeriod;  this.secondsLength=secondsLength;  this.endOfPeriod=this.startOfPeriod.plusNanos((this.secondsLength * 1000000000l) - 1000000l);}  }
class C{  public void createMemoryFromTemplate(String database,String template){  createMemoryFromTemplate(database,false,template,false);}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (DEBUG) {    System.out.println("startElement: uri: " + uri + ", localname: "+ localName+ ", qname: "+ qName+ ", atts: "+ attributes);    boolean DEBUG_ATTRS=true;    if (DEBUG_ATTRS & attributes != null) {      int n=attributes.getLength();      if (n == 0)       System.out.println("\tempty attribute list"); else       for (int i=0; i < n; i++)       System.out.println("\t attr: uri: " + attributes.getURI(i) + ", localname: "+ attributes.getLocalName(i)+ ", qname: "+ attributes.getQName(i)+ ", type: "+ attributes.getType(i)+ ", value: "+ attributes.getValue(i));    }  }  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(uri,localName,DTM.ELEMENT_NODE);  String prefix=getPrefix(qName,uri);  int prefixIndex=(null != prefix) ? m_valuesOrPrefixes.stringToIndex(qName) : 0;  int elemNode=addNode(DTM.ELEMENT_NODE,exName,m_parents.peek(),m_previous,prefixIndex,true);  if (m_indexing)   indexNode(exName,elemNode);  m_parents.push(elemNode);  int startDecls=m_contextIndexes.peek();  int nDecls=m_prefixMappings.size();  int prev=DTM.NULL;  if (!m_pastFirstElement) {    prefix="xml";    String declURL="http://www.w3.org/XML/1998/namespace";    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    int val=m_valuesOrPrefixes.stringToIndex(declURL);    prev=addNode(DTM.NAMESPACE_NODE,exName,elemNode,prev,val,false);    m_pastFirstElement=true;  }  for (int i=startDecls; i < nDecls; i+=2) {    prefix=(String)m_prefixMappings.elementAt(i);    if (prefix == null)     continue;    String declURL=(String)m_prefixMappings.elementAt(i + 1);    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    int val=m_valuesOrPrefixes.stringToIndex(declURL);    prev=addNode(DTM.NAMESPACE_NODE,exName,elemNode,prev,val,false);  }  int n=attributes.getLength();  for (int i=0; i < n; i++) {    String attrUri=attributes.getURI(i);    String attrQName=attributes.getQName(i);    String valString=attributes.getValue(i);    prefix=getPrefix(attrQName,attrUri);    int nodeType;    String attrLocalName=attributes.getLocalName(i);    if ((null != attrQName) && (attrQName.equals("xmlns") || attrQName.startsWith("xmlns:"))) {      if (declAlreadyDeclared(prefix))       continue;      nodeType=DTM.NAMESPACE_NODE;    } else {      nodeType=DTM.ATTRIBUTE_NODE;      if (attributes.getType(i).equalsIgnoreCase("ID"))       setIDAttribute(valString,elemNode);    }    if (null == valString)     valString="";    int val=m_valuesOrPrefixes.stringToIndex(valString);    if (null != prefix) {      prefixIndex=m_valuesOrPrefixes.stringToIndex(attrQName);      int dataIndex=m_data.size();      m_data.addElement(prefixIndex);      m_data.addElement(val);      val=-dataIndex;    }    exName=m_expandedNameTable.getExpandedTypeID(attrUri,attrLocalName,nodeType);    prev=addNode(nodeType,exName,elemNode,prev,val,false);  }  if (DTM.NULL != prev)   m_nextsib.setElementAt(DTM.NULL,prev);  if (null != m_wsfilter) {    short wsv=m_wsfilter.getShouldStripSpace(makeNodeHandle(elemNode),this);    boolean shouldStrip=(DTMWSFilter.INHERIT == wsv) ? getShouldStripWhitespace() : (DTMWSFilter.STRIP == wsv);    pushShouldStripWhitespace(shouldStrip);  }  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  SimpleMethodModel(Object object,Method method,Class[] argTypes,BeansWrapper wrapper){  super(method,argTypes);  this.object=object;  this.wrapper=wrapper;}  }
class C{  public int loadSigned16(int addr){  return loadSigned16(addr,AccessSource.CODE);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.fillPaint=SerialUtilities.readPaint(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);}  }
class C{  public DefaultPassageFormatter(String preTag,String postTag,String ellipsis,boolean escape){  if (preTag == null || postTag == null || ellipsis == null) {    throw new NullPointerException();  }  this.preTag=preTag;  this.postTag=postTag;  this.ellipsis=ellipsis;  this.escape=escape;}  }
class C{  protected boolean endOfMessage(AbstractMRReply msg){  int syncCount=0;  for (int i=0; i < msg.getNumDataElements(); i++) {    if ((msg.getElement(i) & 0xFF) == 0xFF) {      syncCount++;    } else {      break;    }  }  if (cmdOutstanding) {    if (syncCount == 6) {      if (msg.getNumDataElements() == 7) {        cmdOutstanding=false;        return true;      }    }  } else {    if (syncCount == 6) {      if (msg.getNumDataElements() == 12) {        return true;      }    }  }  return false;}  }
class C{  public DocumentAdapter(IOpenable owner,IPath path){  Assert.isLegal(path != null);  fOwner=owner;  fPath=path;  initialize();}  }
class C{  @SuppressWarnings("WeakerAccess") public AWTTerminal(TerminalScrollController scrollController){  this(TerminalEmulatorDeviceConfiguration.getDefault(),AWTTerminalFontConfiguration.getDefault(),TerminalEmulatorColorConfiguration.getDefault(),scrollController);}  }
class C{  public static BigInteger findGCD(final BigInteger a,final BigInteger b){  if (b.compareTo(BigInteger.ZERO) == 0) {    return a;  }  return findGCD(b,a.mod(b));}  }
class C{  public void exportFingerprintPaths(List<String> paths){  paths.stream().map(null).forEach(null);}  }
class C{  public Complex residue(Complex pole){  return N.evaluate(pole).over(D.derivative().evaluate(pole));}  }
class C{  public void resetOptions(){  resetStructure();  try {    if (m_DataBaseConnection != null && m_DataBaseConnection.isConnected()) {      m_DataBaseConnection.disconnectFromDatabase();    }    m_DataBaseConnection=newDatabaseConnection();  } catch (  Exception ex) {    printException(ex);  }  m_URL=m_DataBaseConnection.getDatabaseURL();  if (m_URL == null) {    m_URL="none set!";  }  m_User=m_DataBaseConnection.getUsername();  if (m_User == null) {    m_User="";  }  m_Password=m_DataBaseConnection.getPassword();  if (m_Password == null) {    m_Password="";  }  m_orderBy=new ArrayList<String>();}  }
class C{  public static void copyInto(Object array,Object mimic){  MultiArrayCopier.copyInto(array,mimic);}  }
class C{  public void deinitialize(){  if (isSVG12AccessKey) {    NodeEventTarget eventTarget=(NodeEventTarget)owner.getRootEventTarget();    eventTarget.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"keydown",this,false);  } else {    EventTarget eventTarget=owner.getRootEventTarget();    eventTarget.removeEventListener("keypress",this,false);  }}  }
class C{  public boolean closeActiveKeyStore(){  return closeKeyStore(kseFrame.getActiveKeyStoreHistory());}  }
class C{  @Override public void onRemoved(final StendhalRPZone zone){  zone.notifyExited(this,getX(),getY());  super.onRemoved(zone);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.TEMPLATE_LITERAL__SEGMENTS:    return segments != null && !segments.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  protected void disableButtons(){  setFireEnabled(false);  setSkipEnabled(false);  setTwistEnabled(false);  buttons.get(FiringCommand.FIRE_MORE).setEnabled(false);  butDone.setEnabled(false);  setFlipArmsEnabled(false);  setFireModeEnabled(false);  setFireCalledEnabled(false);}  }
class C{  public void outputTraceMessage(MethodContext methodContext,String... messages){  String lineSep=System.getProperty("line.separator");  StringBuilder buf=new StringBuilder(getSimpleMethod().getFileName());  buf.append(", Line ").append(getLineNumber()).append(" <").append(getTagName()).append("> element: ");  for (int i=0; i < messages.length; i++) {    buf.append(messages[i]);    if (i < messages.length - 1 && messages.length > 1) {      buf.append(lineSep);    }  }  Debug.log(methodContext.getTraceLogLevel(),null,buf.toString(),module);}  }
class C{  public MetaDataColumnDescriptor(String columnName,int jdbcType){  this(columnName,jdbcType,null);}  }
class C{  public void clear(){  mSearchResults.clear();  mAllSongs.clear();  mAllArtists.clear();  mAllPlaylists.clear();  mAllAlbums.clear();  mSortedSongs.clear();  mSortedArtists.clear();  mSortedPlaylists.clear();  mSortedAlbums.clear();}  }
class C{  private static long findClientWindow(long window){  if (XlibUtil.isTrueToplevelWindow(window)) {    return window;  }  Set<Long> children=XlibUtil.getChildWindows(window);  for (  Long child : children) {    long win=findClientWindow(child);    if (win != 0) {      return win;    }  }  return 0;}  }
class C{  private String saveDraft(){  assert ((EditText)findViewById(R.id.author_name)) != null;  String author=((EditText)findViewById(R.id.author_name)).getText().toString();  assert ((EditText)findViewById(R.id.template_title)) != null;  String title=((EditText)findViewById(R.id.template_title)).getText().toString();  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder docBuilder;  try {    docBuilder=docFactory.newDocumentBuilder();    Document doc=docBuilder.newDocument();    Element rootElement=doc.createElement("buildmlearn_application");    Attr attr=doc.createAttribute("type");    attr.setValue(getResources().getString(template.getType()));    rootElement.setAttributeNode(attr);    Element authorElement=doc.createElement("author");    rootElement.appendChild(authorElement);    Element nameElement=doc.createElement("name");    nameElement.appendChild(doc.createTextNode(author));    authorElement.appendChild(nameElement);    Element titleElement=doc.createElement("title");    titleElement.appendChild(doc.createTextNode(title));    rootElement.appendChild(titleElement);    doc.appendChild(rootElement);    Element dataElement=doc.createElement("data");    rootElement.appendChild(dataElement);    if (selectedTemplate.getItems(doc).size() == 0) {      Toast.makeText(this,"Unable to perform action: No Data",Toast.LENGTH_SHORT).show();      return null;    }    for (    Element item : selectedTemplate.getItems(doc)) {      dataElement.appendChild(item);    }    int draftFileIndex=0;    File draftDir=new File(toolkit.getDraftDir());    String probableFileName="draft" + draftFileIndex + ".buildmlearn";    File probableFile=new File(draftDir,probableFileName);    while (probableFile.exists()) {      draftFileIndex++;      probableFileName="draft" + draftFileIndex + ".buildmlearn";      probableFile=new File(draftDir,probableFileName);    }    File tempFile=new File(toolkit.getDraftDir(),".temp");    File oldFile=null;    if (oldFileName != null)     oldFile=new File(oldFileName);    FileUtils.saveXmlFile(toolkit.getDraftDir(),".temp",doc);    if (oldFile == null || !FileUtils.equalContent(tempFile,oldFile)) {      tempFile.renameTo(probableFile);      return toolkit.getDraftDir() + probableFileName;    } else {      File newFile=new File(toolkit.getDraftDir(),".temp");      newFile.delete();    }    return null;  } catch (  ParserConfigurationException e) {    e.printStackTrace();  }  return null;}  }
class C{  public HttpConnection(String host,int port,Protocol protocol){  this(null,-1,host,null,port,protocol);}  }
class C{  protected RelationalExpressionImpl(){  super();}  }
class C{  public void cancelEditing(){  TableCellEditor editor=getCellEditor();  if (editor != null) {    editor.cancelCellEditing();  }}  }
class C{  public void sendAuthCertRegRequest(SecurityServerId securityServer,String address,byte[] authCert) throws Exception {  try (HttpSender sender=ManagementRequestClient.createCentralHttpSender()){    send(sender,getCentralServiceURI(),new AuthCertRegRequest(authCert,securityServer.getOwner(),builder.buildAuthCertRegRequest(securityServer,address,authCert)));  } }  }
class C{  public static JSONObject HttpPost(String url,String bssid,JSONObject postJSON,HeaderPair... headers){  int port=EspProxyServerImpl.getInstance().getEspProxyServerPort();  return executeHttpRequest(url,port,METHOD_POST,bssid,postJSON,false,headers);}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void run(){  try {    if (files.length > MAX_SCRIPT_FILE_NUMBER_OF_ARGUMENTS) {      List<File[]> fileArrays=splitArray(files,MAX_SCRIPT_FILE_NUMBER_OF_ARGUMENTS);      for (      File[] fileSubset : fileArrays) {        Runtime.getRuntime().exec(createOSAScriptCommand(playlist,fileSubset));      }    } else {      Runtime.getRuntime().exec(createOSAScriptCommand(playlist,files));    }  } catch (  Throwable e) {    LOG.error(e.getMessage(),e);  }}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  XYItemRendererState state=new StackedXYAreaRendererState(info);  state.setProcessVisibleItemsOnly(false);  return state;}  }
class C{  public String maxIterationsTipText(){  return "set maximum number of iterations";}  }
class C{  public static Intent buildFileProviderReadUriIntent(Context context,Uri uri,String action,String type){  return buildFileProviderReadUriIntent(context,getPathNameFromFileUri(uri),action,type);}  }
class C{  public static void assertTrue(Formatter message,boolean assertion){  if (!assertion) {    throw new AssertionException(message);  }}  }
class C{  public void readIntegerArray(int vec[],int offset,int len) throws EOFException, FormatException {  while (len > 0) {    int intsleft=bytesinbuffer / 4;    if (intsleft == 0) {      assertSize(4);      continue;    }    int reallyread=(len < intsleft) ? len : intsleft;    int cursor=curptr;    if (MSBFirst) {      for (int i=0; i < reallyread; i++) {        vec[offset++]=MoreMath.BuildIntegerBE(buffer,cursor);        cursor+=4;      }    } else {      for (int i=0; i < reallyread; i++) {        vec[offset++]=MoreMath.BuildIntegerLE(buffer,cursor);        cursor+=4;      }    }    len-=reallyread;    bytesinbuffer-=(4 * reallyread);    curptr=cursor;  }}  }
class C{  protected static int validateURI(String srvURI){  if (srvURI.startsWith("tcp://")) {    return URI_TYPE_TCP;  } else   if (srvURI.startsWith("ssl://")) {    return URI_TYPE_SSL;  } else   if (srvURI.startsWith("local://")) {    return URI_TYPE_LOCAL;  } else {    throw new IllegalArgumentException(srvURI);  }}  }
class C{  public static void assertBool(boolean b,String errorMessage){  if (verbose) {    log("assertBool(" + b + ", "+ errorMessage+ ")");  }  if (!b) {    log("Assert failed on: " + errorMessage);    throw new RuntimeException(errorMessage);  }}  }
class C{  public void receiveRedundancy(){  try {    while (true) {      if (mIn.read(mInBuffer) <= 0)       return;    }  } catch (  IOException e) {  }}  }
class C{  public static <E>OutputMatcher<E> outputWithSize(org.hamcrest.Matcher<? super java.lang.Integer> sizeMatcher){  return OutputMatcherFactory.create(OutputWithSize.<E>outputWithSize(sizeMatcher));}  }
class C{  public ImmutableDescriptor(String[] fieldNames,Object[] fieldValues){  this(makeMap(fieldNames,fieldValues));}  }
class C{  public OMScalingIcon(double centerLat,double centerLon,int offsetX,int offsetY,ImageIcon ii,float baseScale){  this(centerLat,centerLon,offsetX,offsetY,ii.getImage(),baseScale);}  }
class C{  private void drawXTick(Graphics grahics){  grahics.setFont(scale.getFont());  for (int i=0; i < tickLabelPositions.size(); i++) {    if (tickVisibilities.get(i) == true) {      String text=tickLabels.get(i);      int fontWidth=FigureUtilities.getTextExtents(text,getFont()).width;      int x=(int)Math.ceil(tickLabelPositions.get(i) - fontWidth / 2.0);      grahics.drawText(text,x,0);    }  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  FilterKeysMap<String,Number> oper=new FilterKeysMap<String,Number>();  CollectorTestSink sortSink=new CollectorTestSink();  oper.filter.setSink(sortSink);  oper.setKey("b");  oper.clearKeys();  String[] keys=new String[3];  keys[0]="e";  keys[1]="f";  keys[2]="blah";  oper.setKey("a");  oper.setKeys(keys);  oper.beginWindow(0);  HashMap<String,Number> input=new HashMap<String,Number>();  input.put("a",2);  input.put("b",5);  input.put("c",7);  input.put("d",42);  input.put("e",200);  input.put("f",2);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",204,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  input.put("a",5);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",5,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  input.put("a",2);  input.put("b",33);  input.put("f",2);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",4,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  input.put("b",6);  input.put("a",2);  input.put("j",6);  input.put("e",2);  input.put("dd",6);  input.put("blah",2);  input.put("another",6);  input.put("notmakingit",2);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",6,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  input.put("c",9);  oper.setInverse(true);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",9,getTotal(sortSink.collectedTuples.get(0)));  oper.endWindow();}  }
class C{  public void service(Mail mail) throws MessagingException {  try {    MimeMessage message=mail.getMessage();    if (ignoreLocalSender && isSenderLocal(mail)) {      return;    }    String[] headerArray=message.getHeader(headerName);    if (headerArray != null && headerArray.length > 0) {      return;    }    ByteArrayOutputStream baos=new ByteArrayOutputStream();    double probability;    if (message.getSize() < getMaxSize()) {      message.writeTo(baos);      probability=analyzer.computeSpamProbability(new BufferedReader(new StringReader(baos.toString())));    } else {      probability=0.0;    }    mail.setAttribute(MAIL_ATTRIBUTE_NAME,probability);    message.setHeader(headerName,Double.toString(probability));    DecimalFormat probabilityForm=(DecimalFormat)DecimalFormat.getInstance();    probabilityForm.applyPattern("##0.##%");    String probabilityString=probabilityForm.format(probability);    String senderString;    if (mail.getSender() == null) {      senderString="null";    } else {      senderString=mail.getSender().toString();    }    if (probability > 0.1) {      final Collection<MailAddress> recipients=mail.getRecipients();      log(headerName + ": " + probabilityString+ "; From: "+ senderString+ "; Recipient(s): "+ getAddressesString(recipients));      if (tagSubject) {        appendToSubject(message," [" + probabilityString + (probability > 0.9 ? " SPAM" : " spam")+ "]");      }    }    saveChanges(message);  } catch (  Exception e) {    log("Exception: " + e.getMessage(),e);    throw new MessagingException("Exception thrown",e);  }}  }
class C{  @Override public int size(){  return objects.size();}  }
class C{  public void enterNewErrorLevel(boolean status){  errorsStatusStack.push(status);}  }
class C{  public th addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected int crossings(final int levels[][]){  int sum=0;  for (int i=0; i < levels.length - 1; i++) {    MyList upper=new MyList(), lower=new MyList();    MyListNode lastOcrnce[]=new MyListNode[m_nodes.size()];    int edgeOcrnce[]=new int[m_nodes.size()];    for (int j=0, uidx=0, lidx=0; j < (levels[i].length + levels[i + 1].length); j++) {      if ((j % 2 == 0 && uidx < levels[i].length) || lidx >= levels[i + 1].length) {        int k1=0, k2=0, k3=0;        GraphNode n=m_nodes.get(levels[i][uidx]);        if (lastOcrnce[levels[i][uidx]] != null) {          MyListNode temp=new MyListNode(-1);          temp.next=upper.first;          try {            do {              temp=temp.next;              if (levels[i][uidx] == temp.n) {                k1=k1 + 1;                k3=k3 + k2;                upper.remove(temp);              } else {                k2=k2 + 1;              }            } while (temp != lastOcrnce[levels[i][uidx]]);          } catch (          NullPointerException ex) {            System.out.println("levels[i][uidx]: " + levels[i][uidx] + " which is: "+ m_nodes.get(levels[i][uidx]).ID+ " temp: "+ temp+ " upper.first: "+ upper.first);            ex.printStackTrace();            System.exit(-1);          }          lastOcrnce[levels[i][uidx]]=null;          sum=sum + k1 * lower.size() + k3;        }        for (int k=0; k < n.edges.length; k++) {          if (n.edges[k][1] > 0) {            try {              if (indexOfElementInLevel(n.edges[k][0],levels[i + 1]) >= uidx) {                edgeOcrnce[n.edges[k][0]]=1;              }            } catch (            Exception ex) {              ex.printStackTrace();            }          }        }        for (int k=0; k < levels[i + 1].length; k++) {          if (edgeOcrnce[levels[i + 1][k]] == 1) {            MyListNode temp=new MyListNode(levels[i + 1][k]);            lower.add(temp);            lastOcrnce[levels[i + 1][k]]=temp;            edgeOcrnce[levels[i + 1][k]]=0;          }        }        uidx++;      } else {        int k1=0, k2=0, k3=0;        GraphNode n=m_nodes.get(levels[i + 1][lidx]);        if (lastOcrnce[levels[i + 1][lidx]] != null) {          MyListNode temp=new MyListNode(-1);          temp.next=lower.first;          try {            do {              temp=temp.next;              if (levels[i + 1][lidx] == temp.n) {                k1=k1 + 1;                k3=k3 + k2;                lower.remove(temp);              } else {                k2=k2 + 1;              }            } while (temp != lastOcrnce[levels[i + 1][lidx]]);          } catch (          NullPointerException ex) {            System.out.print("levels[i+1][lidx]: " + levels[i + 1][lidx] + " which is: "+ m_nodes.get(levels[i + 1][lidx]).ID+ " temp: "+ temp);            System.out.println(" lower.first: " + lower.first);            ex.printStackTrace();            System.exit(-1);          }          lastOcrnce[levels[i + 1][lidx]]=null;          sum=sum + k1 * upper.size() + k3;        }        for (int k=0; k < n.edges.length; k++) {          if (n.edges[k][1] < 0) {            try {              if (indexOfElementInLevel(n.edges[k][0],levels[i]) > lidx) {                edgeOcrnce[n.edges[k][0]]=1;              }            } catch (            Exception ex) {              ex.printStackTrace();            }          }        }        for (int k=0; k < levels[i].length; k++) {          if (edgeOcrnce[levels[i][k]] == 1) {            MyListNode temp=new MyListNode(levels[i][k]);            upper.add(temp);            lastOcrnce[levels[i][k]]=temp;            edgeOcrnce[levels[i][k]]=0;          }        }        lidx++;      }    }  }  return sum;}  }
class C{  public Transformer createTransformer(){  TransformerImpl transformer=new TransformerImpl();  return transformer;}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  Point2D that=(Point2D)other;  return this.x == that.x && this.y == that.y;}  }
class C{  AxesWalker cloneDeep(WalkingIterator cloneOwner,Vector cloneList) throws CloneNotSupportedException {  AxesWalker clone=findClone(this,cloneList);  if (null != clone)   return clone;  clone=(AxesWalker)this.clone();  clone.setLocPathIterator(cloneOwner);  if (null != cloneList) {    cloneList.addElement(this);    cloneList.addElement(clone);  }  if (wi().m_lastUsedWalker == this)   cloneOwner.m_lastUsedWalker=clone;  if (null != m_nextWalker)   clone.m_nextWalker=m_nextWalker.cloneDeep(cloneOwner,cloneList);  if (null != cloneList) {    if (null != m_prevWalker)     clone.m_prevWalker=m_prevWalker.cloneDeep(cloneOwner,cloneList);  } else {    if (null != m_nextWalker)     clone.m_nextWalker.m_prevWalker=clone;  }  return clone;}  }
class C{  public RemezFIRFilterDesigner(FIRFilterSpecification specification){  mSpecification=specification;  design();}  }
class C{  public boolean areStatusBarColorsValid(){  return colorPrimary != -1 && colorSecondary != -1;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public void removeRow(int rowToRemoveIndex){  removeRow(rowToRemoveIndex,true);}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  @Override public void disable(){  stop();}  }
class C{  protected void transmitPartialTask(final Task<Diff> result) throws TimeoutException {  this.diffedSize+=result.byteSize();  this.processingTimeDiff+=System.currentTimeMillis() - startTime;  super.transmitPartialTask(result);  startTime=System.currentTimeMillis();}  }
class C{  public void append(byte[] src){  int length=src.length;  if (BUFFER_SIZE - (end - pos) < length) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("Could not accept income app data."));  }  if (end + length > BUFFER_SIZE) {    System.arraycopy(buffer,pos,buffer,0,end - pos);    end-=pos;    pos=0;  }  System.arraycopy(src,0,buffer,end,length);  end=end + length;}  }
class C{  public boolean isStart(){  return false;}  }
class C{  public final boolean isUnresolved(){  return addr == null;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public DeleteSubsessionAction(){  super("Delete");}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();}  }
class C{  private boolean containsInTaskName(String taskName,String taskClsName,String s){  assert taskName != null;  assert taskClsName != null;  if (taskName.equals(taskClsName)) {    int idx=taskName.lastIndexOf('.');    return ((idx >= 0) ? taskName.substring(idx + 1) : taskName).toLowerCase().contains(s);  }  return taskName.toLowerCase().contains(s);}  }
class C{  public static DirectedGraph<Integer,DefaultEdge> loadGraph(File file) throws IOException, ClassNotFoundException {  SerializableDirectedGraph serialGraph=null;  FileInputStream fin=null;  ObjectInputStream in=null;  fin=new FileInputStream(file);  in=new ObjectInputStream(fin);  serialGraph=(SerializableDirectedGraph)in.readObject();  in.close();  return serialGraph.getGraph();}  }
class C{  public static String base64EncodeFoArray(final byte[] s){  if (s == null) {    return null;  }  if (s.length == 0) {    return "";  }  StringBuffer buf=new StringBuffer();  int b0, b1, b2, b3;  int len=s.length;  int i=0;  while (i < len) {    byte tmp=s[i++];    b0=(tmp & 0xfc) >> 2;    b1=(tmp & 0x03) << 4;    if (i < len) {      tmp=s[i++];      b1|=(tmp & 0xf0) >> 4;      b2=(tmp & 0x0f) << 2;      if (i < len) {        tmp=s[i++];        b2|=(tmp & 0xc0) >> 6;        b3=tmp & 0x3f;      } else {        b3=64;      }    } else {      b2=b3=64;    }    buf.append(Base64.Base64Chars.charAt(b0));    buf.append(Base64.Base64Chars.charAt(b1));    buf.append(Base64.Base64Chars.charAt(b2));    buf.append(Base64.Base64Chars.charAt(b3));  }  return buf.toString();}  }
class C{  public TinyDancerBuilder startingXPosition(int xPosition){  fpsConfig.startingXPosition=xPosition;  return this;}  }
class C{  private static double CallDoubleMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallDoubleMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Double,false);  return Reflection.unwrapDouble(returnObj);}  }
class C{  public boolean isAllowGuestControl(){  return allowGuestControl;}  }
class C{  public Builder underline(){  this.underline=true;  return this;}  }
class C{  protected void init_actions(){  action_obj=new CUP$actions();}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    showFeedback("This tool only operates on vector data.");  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public static long deepMemoryUsageOfAll(Instrumentation inst,final Collection<? extends java.lang.Object> objs) throws IOException {  return deepMemoryUsageOfAll(inst,objs,NON_PUBLIC);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(0);{    boolean success=false;    try {      employeeNode.setPrefix("pre^fix xmlns='http//www.nist.gov'");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public static <T>T checkNotNull(T instance,String name){  if (instance == null) {    throw new NullPointerException(name + " must not be null");  }  return instance;}  }
class C{  private static long lf_R(long x,int s){  return (x >>> s);}  }
class C{  protected void shutdown() throws IOException {  shutdownEntry();  if (connection.isOpen())   connection.shutdown();}  }
class C{  public boolean isEmpty(){  return (m_index == -1);}  }
class C{  @Override public boolean supportsPositionedDelete(){  debugCodeCall("supportsPositionedDelete");  return true;}  }
class C{  public void addNumberFormat(int numberFormatId,String formatCode){  numberFormats.put(numberFormatId,formatCode);  isDateFormatCache.put(numberFormatId,checkForDateFormat(numberFormatId,formatCode));}  }
class C{  public void onStackAnimationStarted(){  if (mStackAnimationCount == 0)   super.onAnimationStarted();  mStackAnimationCount++;}  }
class C{  public static boolean saveToFile(String filename,Object o){  boolean result;  if (SerializationHelper.isSerializable(o.getClass())) {    try {      SerializationHelper.write(filename,o);      result=true;    } catch (    Exception e) {      result=false;    }  } else {    result=false;  }  return result;}  }
class C{  public boolean isElement(){  return (inputOctetStreamProxy == null && subNode != null && inputNodeSet == null && !isNodeSet);}  }
class C{  public boolean checkExists(JobKey jobKey) throws SchedulerException {  return sched.checkExists(jobKey);}  }
class C{  public String toJson(){  try {    return JsonSerializer.toString(this);  } catch (  IOException e) {    throw new IndexException(e,"Unformateable JSON schema: {}",e.getMessage());  }}  }
class C{  private static Map<String,VideoProfile> translateVideoXML(Element video) throws PageException {  Map<String,VideoProfile> profiles=new LinkedHashMap<String,VideoProfile>();  Element qd=getChildByName(video,"profiles",false);  Element[] items=getChildren(qd,"profile");  Element item;  VideoProfile vq;  String value;  for (int i=0; i < items.length; i++) {    item=items[i];    vq=new VideoProfileImpl();    value=item.getAttribute("aspect-ratio");    if (!Util.isEmpty(value))     vq.setAspectRatio(value);    value=item.getAttribute("audio-bitrate");    if (!Util.isEmpty(value))     vq.setAudioBitrate(util.toBytes(value));    value=item.getAttribute("audio-samplerate");    if (!Util.isEmpty(value))     vq.setAudioSamplerate(util.toHerz(value));    String w=item.getAttribute("width");    String h=item.getAttribute("height");    if (!Util.isEmpty(w) && !Util.isEmpty(h)) {      vq.setDimension(Caster.toIntValue(w),Caster.toIntValue(h));    }    value=item.getAttribute("framerate");    String value2=item.getAttribute("fps");    if (!Util.isEmpty(value))     vq.setFramerate(Caster.toDoubleValue(value)); else     if (!Util.isEmpty(value2))     vq.setFramerate(Caster.toDoubleValue(value2));    value=item.getAttribute("video-bitrate");    if (!Util.isEmpty(value))     vq.setVideoBitrate(util.toBytes(value));    value=item.getAttribute("video-bitrate-max");    if (!Util.isEmpty(value))     vq.setVideoBitrateMax(util.toBytes(value));    value=item.getAttribute("video-bitrate-min");    if (!Util.isEmpty(value))     vq.setVideoBitrateMin(util.toBytes(value));    value=item.getAttribute("video-bitrate-tolerance");    if (!Util.isEmpty(value))     vq.setVideoBitrateTolerance(util.toBytes(value));    value=item.getAttribute("video-codec");    if (!Util.isEmpty(value))     vq.setVideoCodec(value);    value=item.getAttribute("audio-codec");    if (!Util.isEmpty(value))     vq.setAudioCodec(value);    value=item.getAttribute("label");    if (!Util.isEmpty(value)) {      String[] arr=toArray(value);      for (int y=0; y < arr.length; y++) {        profiles.put(arr[y].trim().toLowerCase(),vq);      }    }  }  return profiles;}  }
class C{  public ExistsRequest source(QuerySourceBuilder sourceBuilder){  this.source=sourceBuilder.buildAsBytes(Requests.CONTENT_TYPE);  return this;}  }
class C{  protected void clearControls(){}  }
class C{  public void testSubtractDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="-7472334291698975400195996883915836900189542365.218615243205013";  int cScale=15;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.subtract(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public boolean dispatchGenericMotionEvent(MotionEvent ev){  if (mWindow.superDispatchGenericMotionEvent(ev)) {    return true;  }  return onGenericMotionEvent(ev);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.TYPE_INFO;}  }
class C{  public ComputationException(@Nullable Throwable cause){  super(cause);}  }
class C{  @Override public LifecycleListener[] findLifecycleListeners(){  return this.lifecycle.findLifecycleListeners();}  }
class C{  public static int listFindNoCaseIgnoreEmpty(String list,String value,String delimiter){  if (delimiter.length() == 1)   return listFindNoCaseIgnoreEmpty(list,value,delimiter.charAt(0));  if (list == null)   return -1;  int len=list.length();  if (len == 0)   return -1;  int last=0;  int count=0;  char[] del=delimiter.toCharArray();  char c;  for (int i=0; i < len; i++) {    c=list.charAt(i);    for (int y=0; y < del.length; y++) {      if (c == del[y]) {        if (last < i) {          if (list.substring(last,i).equalsIgnoreCase(value))           return count;          count++;        }        last=i + 1;        break;      }    }  }  if (last < len) {    if (list.substring(last).equalsIgnoreCase(value))     return count;  }  return -1;}  }
class C{  public StringMap(){  table=new Entry[INITIAL_CAPACITY];}  }
class C{  public DoubleListParameter(OptionID optionID){  super(optionID);}  }
class C{  public static Request<Bitmap> createImageRequest(String url,RequestMethod requestMethod,int maxWidth,int maxHeight,Bitmap.Config config,ImageView.ScaleType scaleType){  return new ImageRequest(url,requestMethod,maxWidth,maxHeight,config,scaleType);}  }
class C{  public void addUndoPoint(){  ((DataTableModel)getModel()).addUndoPoint();}  }
class C{  public boolean forEachKey(TLongProcedure procedure){  return forEach(procedure);}  }
class C{  protected int findMerge(int size,double[] scratch,DBIDArrayIter ix,DBIDArrayIter iy,PointerHierarchyRepresentationBuilder builder){  double mindist=Double.POSITIVE_INFINITY;  int x=-1, y=-1;  for (int ox=0, xbase=0; ox < size; xbase+=ox++) {    if (builder.isLinked(ix.seek(ox))) {      continue;    }    assert (xbase == triangleSize(ox));    for (int oy=0; oy < ox; oy++) {      if (builder.isLinked(iy.seek(oy))) {        continue;      }      final int idx=xbase + oy;      if (scratch[idx] <= mindist) {        mindist=scratch[idx];        x=ox;        y=oy;      }    }  }  assert (x >= 0 && y >= 0);  merge(size,scratch,ix,iy,builder,mindist,x,y);  return x;}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  if (!SVGUtilities.matchUserAgent(e,ctx.getUserAgent())) {    return null;  }  ImageNode imgNode=(ImageNode)instantiateGraphicsNode();  if (imgNode == null) {    return null;  }  associateSVGContext(ctx,e,imgNode);  Rectangle2D b=getImageBounds(ctx,e);  AffineTransform at=null;  String s=e.getAttribute(SVG_TRANSFORM_ATTRIBUTE);  if (s.length() != 0) {    at=SVGUtilities.convertTransform(e,SVG_TRANSFORM_ATTRIBUTE,s,ctx);  } else {    at=new AffineTransform();  }  at.translate(b.getX(),b.getY());  imgNode.setTransform(at);  imgNode.setVisible(CSSUtilities.convertVisibility(e));  Rectangle2D clip;  clip=new Rectangle2D.Double(0,0,b.getWidth(),b.getHeight());  Filter filter=imgNode.getGraphicsNodeRable(true);  imgNode.setClip(new ClipRable8Bit(filter,clip));  Rectangle2D r=CSSUtilities.convertEnableBackground(e);  if (r != null) {    imgNode.setBackgroundEnable(r);  }  ctx.openViewport(e,new MultiImageElementViewport((float)b.getWidth(),(float)b.getHeight()));  List elems=new LinkedList();  List minDim=new LinkedList();  List maxDim=new LinkedList();  for (Node n=e.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() != Node.ELEMENT_NODE)     continue;    Element se=(Element)n;    if (!getNamespaceURI().equals(se.getNamespaceURI()))     continue;    if (se.getLocalName().equals(SVG12Constants.SVG_SUB_IMAGE_TAG)) {      addInfo(se,elems,minDim,maxDim,b);    }    if (se.getLocalName().equals(SVG12Constants.SVG_SUB_IMAGE_REF_TAG)) {      addRefInfo(se,elems,minDim,maxDim,b);    }  }  Dimension[] mindary=new Dimension[elems.size()];  Dimension[] maxdary=new Dimension[elems.size()];  Element[] elemary=new Element[elems.size()];  Iterator mindi=minDim.iterator();  Iterator maxdi=maxDim.iterator();  Iterator ei=elems.iterator();  int n=0;  while (mindi.hasNext()) {    Dimension minD=(Dimension)mindi.next();    Dimension maxD=(Dimension)maxdi.next();    int i=0;    if (minD != null) {      for (; i < n; i++) {        if ((mindary[i] != null) && (minD.width < mindary[i].width)) {          break;        }      }    }    for (int j=n; j > i; j--) {      elemary[j]=elemary[j - 1];      mindary[j]=mindary[j - 1];      maxdary[j]=maxdary[j - 1];    }    elemary[i]=(Element)ei.next();    mindary[i]=minD;    maxdary[i]=maxD;    n++;  }  GraphicsNode node=new MultiResGraphicsNode(e,clip,elemary,mindary,maxdary,ctx);  imgNode.setImage(node);  return imgNode;}  }
class C{  public static boolean predicate(String xpath,Object node){  Node domNode=getNode(node);  if (domNode == null) {    log.severe("Unable to evaluate non DOM Node object");    return false;  }  if (xpath == null) {    log.severe("Predicate has not xpath expression");    return false;  }  try {    xpath=getExpression(xpath);    XPath xp=XPathFactory.newInstance().newXPath();    Boolean result=(Boolean)xp.evaluate(xpath,domNode,XPathConstants.BOOLEAN);    if (result != null) {      return result;    }  } catch (  XPathExpressionException e) {    log.log(Level.SEVERE,"Failed to execute predicate xpath '" + xpath + "'",e);  }  return false;}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  final DistributionConfigImpl that=(DistributionConfigImpl)o;  return new EqualsBuilder().append(tcpPort,that.tcpPort).append(mcastPort,that.mcastPort).append(mcastTtl,that.mcastTtl).append(socketLeaseTime,that.socketLeaseTime).append(socketBufferSize,that.socketBufferSize).append(conserveSockets,that.conserveSockets).append(locatorWaitTime,that.locatorWaitTime).append(logLevel,that.logLevel).append(startLocatorPort,that.startLocatorPort).append(statisticSamplingEnabled,that.statisticSamplingEnabled).append(statisticSampleRate,that.statisticSampleRate).append(ackWaitThreshold,that.ackWaitThreshold).append(ackForceDisconnectThreshold,that.ackForceDisconnectThreshold).append(archiveDiskSpaceLimit,that.archiveDiskSpaceLimit).append(archiveFileSizeLimit,that.archiveFileSizeLimit).append(logDiskSpaceLimit,that.logDiskSpaceLimit).append(logFileSizeLimit,that.logFileSizeLimit).append(clusterSSLEnabled,that.clusterSSLEnabled).append(clusterSSLRequireAuthentication,that.clusterSSLRequireAuthentication).append(mcastSendBufferSize,that.mcastSendBufferSize).append(mcastRecvBufferSize,that.mcastRecvBufferSize).append(udpSendBufferSize,that.udpSendBufferSize).append(udpRecvBufferSize,that.udpRecvBufferSize).append(udpFragmentSize,that.udpFragmentSize).append(disableTcp,that.disableTcp).append(enableTimeStatistics,that.enableTimeStatistics).append(memberTimeout,that.memberTimeout).append(maxWaitTimeForReconnect,that.maxWaitTimeForReconnect).append(maxNumReconnectTries,that.maxNumReconnectTries).append(asyncDistributionTimeout,that.asyncDistributionTimeout).append(asyncQueueTimeout,that.asyncQueueTimeout).append(asyncMaxQueueSize,that.asyncMaxQueueSize).append(durableClientTimeout,that.durableClientTimeout).append(securityLogLevel,that.securityLogLevel).append(enableNetworkPartitionDetection,that.enableNetworkPartitionDetection).append(disableAutoReconnect,that.disableAutoReconnect).append(securityPeerMembershipTimeout,that.securityPeerMembershipTimeout).append(removeUnresponsiveClient,that.removeUnresponsiveClient).append(deltaPropagation,that.deltaPropagation).append(distributedSystemId,that.distributedSystemId).append(enforceUniqueHost,that.enforceUniqueHost).append(enableSharedConfiguration,that.enableSharedConfiguration).append(useSharedConfiguration,that.useSharedConfiguration).append(loadSharedConfigurationFromDir,that.loadSharedConfigurationFromDir).append(httpServicePort,that.httpServicePort).append(startDevRestApi,that.startDevRestApi).append(memcachedPort,that.memcachedPort).append(distributedTransactions,that.distributedTransactions).append(redisPort,that.redisPort).append(jmxManager,that.jmxManager).append(jmxManagerStart,that.jmxManagerStart).append(jmxManagerPort,that.jmxManagerPort).append(jmxManagerHttpPort,that.jmxManagerHttpPort).append(jmxManagerUpdateRate,that.jmxManagerUpdateRate).append(jmxManagerSSLEnabled,that.jmxManagerSSLEnabled).append(jmxManagerSslRequireAuthentication,that.jmxManagerSslRequireAuthentication).append(serverSSLEnabled,that.serverSSLEnabled).append(serverSslRequireAuthentication,that.serverSslRequireAuthentication).append(gatewaySSLEnabled,that.gatewaySSLEnabled).append(gatewaySslRequireAuthentication,that.gatewaySslRequireAuthentication).append(httpServiceSSLEnabled,that.httpServiceSSLEnabled).append(httpServiceSSLRequireAuthentication,that.httpServiceSSLRequireAuthentication).append(sslRequireAuthentication,that.sslRequireAuthentication).append(sslWebServiceRequireAuthentication,that.sslWebServiceRequireAuthentication).append(lockMemory,that.lockMemory).append(modifiable,that.modifiable).append(name,that.name).append(roles,that.roles).append(mcastAddress,that.mcastAddress).append(bindAddress,that.bindAddress).append(serverBindAddress,that.serverBindAddress).append(locators,that.locators).append(logFile,that.logFile).append(deployWorkingDir,that.deployWorkingDir).append(startLocator,that.startLocator).append(statisticArchiveFile,that.statisticArchiveFile).append(cacheXmlFile,that.cacheXmlFile).append(clusterSSLProtocols,that.clusterSSLProtocols).append(clusterSSLCiphers,that.clusterSSLCiphers).append(clusterSSLKeyStore,that.clusterSSLKeyStore).append(clusterSSLKeyStoreType,that.clusterSSLKeyStoreType).append(clusterSSLKeyStorePassword,that.clusterSSLKeyStorePassword).append(clusterSSLTrustStore,that.clusterSSLTrustStore).append(clusterSSLTrustStorePassword,that.clusterSSLTrustStorePassword).append(clusterSSLAlias,that.clusterSSLAlias).append(mcastFlowControl,that.mcastFlowControl).append(membershipPortRange,that.membershipPortRange).append(clientConflation,that.clientConflation).append(durableClientId,that.durableClientId).append(securityClientAuthInit,that.securityClientAuthInit).append(securityClientAuthenticator,that.securityClientAuthenticator).append(securityManager,that.securityManager).append(postProcessor,that.postProcessor).append(securityClientDHAlgo,that.securityClientDHAlgo).append(securityPeerAuthInit,that.securityPeerAuthInit).append(securityPeerAuthenticator,that.securityPeerAuthenticator).append(securityClientAccessor,that.securityClientAccessor).append(securityClientAccessorPP,that.securityClientAccessorPP).append(securityLogFile,that.securityLogFile).append(security,that.security).append(userDefinedProps,that.userDefinedProps).append(props,that.props).append(remoteLocators,that.remoteLocators).append(redundancyZone,that.redundancyZone).append(sslProperties,that.sslProperties).append(clusterSSLProperties,that.clusterSSLProperties).append(groups,that.groups).append(clusterConfigDir,that.clusterConfigDir).append(httpServiceBindAddress,that.httpServiceBindAddress).append(memcachedProtocol,that.memcachedProtocol).append(memcachedBindAddress,that.memcachedBindAddress).append(redisBindAddress,that.redisBindAddress).append(redisPassword,that.redisPassword).append(jmxManagerBindAddress,that.jmxManagerBindAddress).append(jmxManagerHostnameForClients,that.jmxManagerHostnameForClients).append(jmxManagerPasswordFile,that.jmxManagerPasswordFile).append(jmxManagerAccessFile,that.jmxManagerAccessFile).append(jmxManagerSslProtocols,that.jmxManagerSslProtocols).append(jmxManagerSslCiphers,that.jmxManagerSslCiphers).append(jmxManagerSslProperties,that.jmxManagerSslProperties).append(jmxManagerSSLKeyStore,that.jmxManagerSSLKeyStore).append(jmxManagerSSLKeyStoreType,that.jmxManagerSSLKeyStoreType).append(jmxManagerSSLKeyStorePassword,that.jmxManagerSSLKeyStorePassword).append(jmxManagerSSLTrustStore,that.jmxManagerSSLTrustStore).append(jmxManagerSSLTrustStorePassword,that.jmxManagerSSLTrustStorePassword).append(jmxManagerSSLAlias,that.jmxManagerSSLAlias).append(serverSslProtocols,that.serverSslProtocols).append(serverSslCiphers,that.serverSslCiphers).append(serverSslProperties,that.serverSslProperties).append(serverSSLKeyStore,that.serverSSLKeyStore).append(serverSSLKeyStoreType,that.serverSSLKeyStoreType).append(serverSSLKeyStorePassword,that.serverSSLKeyStorePassword).append(serverSSLTrustStore,that.serverSSLTrustStore).append(serverSSLTrustStorePassword,that.serverSSLTrustStorePassword).append(serverSSLAlias,that.serverSSLAlias).append(gatewaySslProtocols,that.gatewaySslProtocols).append(gatewaySslCiphers,that.gatewaySslCiphers).append(gatewaySslProperties,that.gatewaySslProperties).append(gatewaySSLKeyStore,that.gatewaySSLKeyStore).append(gatewaySSLKeyStoreType,that.gatewaySSLKeyStoreType).append(gatewaySSLKeyStorePassword,that.gatewaySSLKeyStorePassword).append(gatewaySSLTrustStore,that.gatewaySSLTrustStore).append(gatewaySSLTrustStorePassword,that.gatewaySSLTrustStorePassword).append(gatewaySSLAlias,that.gatewaySSLAlias).append(httpServiceSSLProtocols,that.httpServiceSSLProtocols).append(httpServiceSSLCiphers,that.httpServiceSSLCiphers).append(httpServiceSSLProperties,that.httpServiceSSLProperties).append(httpServiceSSLKeyStore,that.httpServiceSSLKeyStore).append(httpServiceSSLKeyStoreType,that.httpServiceSSLKeyStoreType).append(httpServiceSSLKeyStorePassword,that.httpServiceSSLKeyStorePassword).append(httpServiceSSLTrustStore,that.httpServiceSSLTrustStore).append(httpServiceSSLTrustStorePassword,that.httpServiceSSLTrustStorePassword).append(httpServiceSSLAlias,that.httpServiceSSLAlias).append(securableCommunicationChannels,that.securableCommunicationChannels).append(sslProtocols,that.sslProtocols).append(sslCiphers,that.sslCiphers).append(sslKeyStore,that.sslKeyStore).append(sslKeyStoreType,that.sslKeyStoreType).append(sslKeyStorePassword,that.sslKeyStorePassword).append(sslTrustStore,that.sslTrustStore).append(sslTrustStorePassword,that.sslTrustStorePassword).append(locatorSSLAlias,that.locatorSSLAlias).append(sslDefaultAlias,that.sslDefaultAlias).append(sourceMap,that.sourceMap).append(userCommandPackages,that.userCommandPackages).append(offHeapMemorySize,that.offHeapMemorySize).append(shiroInit,that.shiroInit).isEquals();}  }
class C{  public void testEventsInjectedIntoKafka() throws Exception {  doTest(makeSourceProps(Utils.join(TOPICS,",")),true);}  }
class C{  public boolean isGrowable(){  return growable;}  }
class C{  public static ChatMessage createTextMessage(ContactId remote,String msg,long timestamp,long timestampSent){  String msgId=IdGenerator.generateMessageID();  return new ChatMessage(msgId,remote,msg,MimeType.TEXT_MESSAGE,timestamp,timestampSent,null);}  }
class C{  public void serviceRequest() throws IOException {  byte buf[]=new byte[300];  int n;  clientOutput.print("Echo server " + getClass().getName() + "\n");  clientOutput.flush();  while ((n=clientInput.read(buf,0,buf.length)) >= 0) {    clientOutput.write(buf,0,n);  }}  }
class C{  public static void mergeNodeChildren(TreeNode node){  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node;  for (int i=0; i < masterNode.getChildCount(); i++) {    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterNode.getChildAt(i);    if (!child.isLeaf()) {      MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,child);    }  }}  }
class C{  private void initRayTracingProgram(){  glUseProgram(rayTracingProgram);  timeUniform=glGetUniformLocation(rayTracingProgram,"time");  blendFactorUniform=glGetUniformLocation(rayTracingProgram,"blendFactor");  framebufferUniform=glGetUniformLocation(rayTracingProgram,"framebuffer");  widthUniform=glGetUniformLocation(rayTracingProgram,"width");  heightUniform=glGetUniformLocation(rayTracingProgram,"height");  bounceCountUniform=glGetUniformLocation(rayTracingProgram,"bounceCount");  glUniform1i(framebufferUniform,0);  int cameraSettingsIndex=glGetUniformBlockIndex(rayTracingProgram,"CameraSettings");  glUniformBlockBinding(rayTracingProgram,cameraSettingsIndex,this.cameraSettingsUboBinding);  glUseProgram(0);}  }
class C{  private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {  Set<String> pkCols=new HashSet<>();  stmt.setString(1,owner);  stmt.setString(2,tbl);  try (ResultSet pkRs=stmt.executeQuery()){    while (pkRs.next())     pkCols.add(pkRs.getString(1));  }   return pkCols;}  }
class C{  static <T>T[] arraysCopyOf(T[] original,int newLength){  T[] copy=newArray(original,newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public static FilterField parseFilterLine(String line){  return new FilterField(line);}  }
class C{  public NullLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public void initialize(){  funcPlotterCtrl.setFunction((Function<Double,Double>)simPaneCtrl.getParamValue(PARAM_FUNC_SELECT));}  }
class C{  public static void doExtendTraits(final ClassNode cNode,final SourceUnit unit,final CompilationUnit cu){  if (cNode.isInterface())   return;  boolean isItselfTrait=Traits.isTrait(cNode);  SuperCallTraitTransformer superCallTransformer=new SuperCallTraitTransformer(unit);  if (isItselfTrait) {    checkTraitAllowed(cNode,unit);    return;  }  if (!cNode.getNameWithoutPackage().endsWith(Traits.TRAIT_HELPER)) {    List<ClassNode> traits=findTraits(cNode);    for (    ClassNode trait : traits) {      TraitHelpersTuple helpers=Traits.findHelpers(trait);      applyTrait(trait,cNode,helpers);      superCallTransformer.visitClass(cNode);      if (unit != null) {        ASTTransformationCollectorCodeVisitor collector=new ASTTransformationCollectorCodeVisitor(unit,cu.getTransformLoader());        collector.visitClass(cNode);      }    }  }}  }
class C{  public boolean rowInserted() throws SQLException {  return crsInternal.rowInserted();}  }
class C{  public CelerraConnection(CimConnectionInfo connectionInfo,CimListener listener,CimFilterMap filterMap,CelerraMessageSpecList messageSpecs) throws Exception {  super(connectionInfo,listener,filterMap);  s_messageSpecs=messageSpecs;}  }
class C{  public static int toIPv4Address(byte[] ipAddress){  int ip=0;  for (int i=0; i < 4; i++) {    int t=(ipAddress[i] & 0xff) << ((3 - i) * 8);    ip|=t;  }  return ip;}  }
class C{  @SuppressWarnings("unchecked") private void readVertex(String curLine,List<V> id,int num_vertices){  V v;  String[] parts=null;  int coord_idx=-1;  String index;  String label=null;  if (curLine.indexOf('"') != -1) {    String[] initial_split=curLine.trim().split("\"");    if (initial_split.length < 2 || initial_split.length > 3)     throw new IllegalArgumentException("Unbalanced (or too many) " + "quote marks in " + curLine);    index=initial_split[0].trim();    label=initial_split[1].trim();    if (initial_split.length == 3)     parts=initial_split[2].trim().split("\\s+",-1);    coord_idx=0;  } else {    parts=curLine.trim().split("\\s+",-1);    index=parts[0];switch (parts.length) {case 1:      break;case 2:    label=parts[1];  break;case 3:coord_idx=1;break;default :coord_idx=2;break;}}int v_id=Integer.parseInt(index) - 1;if (v_id >= num_vertices || v_id < 0) throw new IllegalArgumentException("Vertex number " + v_id + "is not in the range [1,"+ num_vertices+ "]");if (id != null) v=id.get(v_id); else v=(V)(new Integer(v_id));if (label != null && label.length() > 0 && vertex_labels != null) vertex_labels.set(v,label);if (coord_idx != -1 && parts != null && parts.length >= coord_idx + 2 && vertex_locations != null) {double x=Double.parseDouble(parts[coord_idx]);double y=Double.parseDouble(parts[coord_idx + 1]);vertex_locations.set(v,new Point2D.Double(x,y));}}  }
class C{  @Override protected void handleEntry(Entry plainEntry) throws XmlPullParserException, IOException, ParseException {  XmlPullParser parser=getParser();  if (!(plainEntry instanceof MapFeatureEntry)) {    throw new IllegalArgumentException("Expected MapFeatureEntry!");  }  MapFeatureEntry entry=(MapFeatureEntry)plainEntry;  int eventType=parser.getEventType();  entry.setPrivacy("public");  while (eventType != XmlPullParser.END_DOCUMENT) {switch (eventType) {case XmlPullParser.START_TAG:      String name=parser.getName();    if ("entry".equals(name)) {      return;    } else     if ("id".equals(name)) {      entry.setId(XmlUtils.extractChildText(parser));    } else     if ("title".equals(name)) {      entry.setTitle(XmlUtils.extractChildText(parser));    } else     if ("link".equals(name)) {      String rel=parser.getAttributeValue(null,"rel");      String type=parser.getAttributeValue(null,"type");      String href=parser.getAttributeValue(null,"href");      if ("edit".equals(rel)) {        entry.setEditUri(href);      } else       if ("alternate".equals(rel) && "text/html".equals(type)) {        entry.setHtmlUri(href);      } else {        handleExtraLinkInEntry(rel,type,href,entry);      }    } else     if ("summary".equals(name)) {      entry.setSummary(XmlUtils.extractChildText(parser));    } else     if ("content".equals(name)) {      StringBuilder contentBuilder=new StringBuilder();      int parentDepth=parser.getDepth();      while (parser.getEventType() != XmlPullParser.END_DOCUMENT) {        int etype=parser.next();switch (etype) {case XmlPullParser.START_TAG:          contentBuilder.append('<');        contentBuilder.append(parser.getName());      contentBuilder.append('>');    break;case XmlPullParser.TEXT:  contentBuilder.append("<![CDATA[");contentBuilder.append(parser.getText());contentBuilder.append("]]>");break;case XmlPullParser.END_TAG:if (parser.getDepth() > parentDepth) {contentBuilder.append("</");contentBuilder.append(parser.getName());contentBuilder.append('>');}break;}if (etype == XmlPullParser.END_TAG && parser.getDepth() == parentDepth) {break;}}entry.setContent(contentBuilder.toString());} else if ("category".equals(name)) {String category=parser.getAttributeValue(null,"term");if (category != null && category.length() > 0) {entry.setCategory(category);}String categoryScheme=parser.getAttributeValue(null,"scheme");if (categoryScheme != null && category.length() > 0) {entry.setCategoryScheme(categoryScheme);}} else if ("published".equals(name)) {entry.setPublicationDate(XmlUtils.extractChildText(parser));} else if ("updated".equals(name)) {entry.setUpdateDate(XmlUtils.extractChildText(parser));} else if ("deleted".equals(name)) {entry.setDeleted(true);} else if ("draft".equals(name)) {String draft=XmlUtils.extractChildText(parser);entry.setPrivacy("yes".equals(draft) ? "unlisted" : "public");} else if ("customProperty".equals(name)) {String attrName=parser.getAttributeValue(null,"name");String attrValue=XmlUtils.extractChildText(parser);entry.setAttribute(attrName,attrValue);} else if ("deleted".equals(name)) {entry.setDeleted(true);} else {handleExtraElementInEntry(entry);}break;default :break;}eventType=parser.next();}}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  private String parseColor(String color,TimedTextObject tto){  String value="";  String[] values;  if (color.startsWith("#")) {    if (color.length() == 7)     value=color.substring(1) + "ff"; else     if (color.length() == 9)     value=color.substring(1); else {      value="ffffffff";      tto.warnings+="Unrecoginzed format: " + color + "\n\n";    }  } else   if (color.startsWith("rgb")) {    boolean alpha=false;    if (color.startsWith("rgba"))     alpha=true;    try {      values=color.split("\\(")[1].split(",");      int r, g, b, a=255;      r=Integer.parseInt(values[0]);      g=Integer.parseInt(values[1]);      b=Integer.parseInt(values[2].substring(0,2));      if (alpha)       a=Integer.parseInt(values[3].substring(0,2));      values[0]=Integer.toHexString(r);      values[1]=Integer.toHexString(g);      values[2]=Integer.toHexString(b);      if (alpha)       values[2]=Integer.toHexString(a);      for (int i=0; i < values.length; i++) {        if (values[i].length() < 2)         values[i]="0" + values[i];        value+=values[i];      }      if (!alpha)       value+="ff";    } catch (    Exception e) {      value="ffffffff";      tto.warnings+="Unrecoginzed color: " + color + "\n\n";    }  } else {    value=Style.getRGBValue("name",color);    if (value == null || value.isEmpty()) {      value="ffffffff";      tto.warnings+="Unrecoginzed color: " + color + "\n\n";    }  }  return value;}  }
class C{  public CommandDB(Context context){  super(context.getFilesDir() + "/commands.json",1);}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  int subdomainNumber;{    String subdomain=request.getServerName();    Matcher domainRegexMatcher=domainRegexPattern.matcher(subdomain);    if (domainRegexMatcher.matches() == false) {      System.err.println("HstsSuperCookieNewIDServlet: Invalid subdomain <" + subdomain + ">.");      response.sendError(404);      return;    }    subdomainNumber=Integer.parseInt(domainRegexMatcher.group(1));  }  int subdomainGroup=(subdomainNumber - 1) / HstsSuperCookieStartServlet.ID_LENGTH + 1;  int subdomainGroupIndex=(subdomainNumber - 1) % HstsSuperCookieStartServlet.ID_LENGTH + 1;  Matcher pathRegexMatcher=pathRegexPattern.matcher(request.getRequestURI());  if (pathRegexMatcher.matches() == false) {    System.err.println("HstsSuperCookieNewIDServlet: Invalid path. Must contain valid ID. Path = <" + request.getRequestURI() + ">.");    response.sendError(404);    return;  }  String id=pathRegexMatcher.group(1);  if (id.charAt(subdomainGroupIndex - 1) == '1') {    response.setHeader("Strict-Transport-Security","max-age=31622400");  }  if (subdomainGroupIndex < HstsSuperCookieStartServlet.ID_LENGTH) {    response.sendRedirect("https://hsts" + (subdomainNumber + 1) + "."+ getServletContext().getInitParameter("websiteBaseURL")+ response.encodeRedirectURL("/hstsSuperCookie/newID/" + id));    return;  } else {    response.sendRedirect("https://hsts0." + getServletContext().getInitParameter("websiteBaseURL") + response.encodeRedirectURL("/hstsSuperCookie/midpoint/" + subdomainGroup));    return;  }}  }
class C{  private String saveFormInArchive(String xml,String queuePathName){  return saveForm(xml,XformsUtil.getXformsArchiveDir(new Date()),queuePathName);}  }
class C{  @Override public List<ExampleSetBasedIndividual> operate(ExampleSetBasedIndividual individual) throws Exception {  AttributeWeightedExampleSet exampleSet=individual.getExampleSet();  ArrayList<FeatureGenerator> selectedGeneratorList=new ArrayList<FeatureGenerator>();  if ((totalMaxNumberOfAttributes < 0) || (exampleSet.getAttributes().size() < totalMaxNumberOfAttributes)) {    for (int h=0; h < numberOfNewAttributes; h++) {      if (random.nextDouble() < pGenerate) {        FeatureGenerator generator=FeatureGenerator.selectGenerator(exampleSet,generatorList,new String[0],random);        if (generator != null) {          generator=generator.newInstance();          Attribute[] args=Tools.getRandomCompatibleAttributes(exampleSet,generator,new String[0],random);          generator.setArguments(args);          selectedGeneratorList.add(generator);        }      }    }    if (selectedGeneratorList.size() > 0) {      List<Attribute> newAttributes=FeatureGenerator.generateAll(exampleSet.getExampleTable(),selectedGeneratorList);      for (      Attribute newAttribute : newAttributes) {        exampleSet.getAttributes().addRegular(newAttribute);      }    }  }  List<ExampleSetBasedIndividual> result=new LinkedList<ExampleSetBasedIndividual>();  result.add(new ExampleSetBasedIndividual(exampleSet));  return result;}  }
class C{  public void verify(PublicKey key) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {  verify(key,"");}  }
class C{  public void testRecover() throws Exception {  String text="TEST";  Message sendMessage=session.createTextMessage(text);  if (verbose) {    LOG.info("About to send a message: " + sendMessage + " with text: "+ text);  }  producer.send(producerDestination,sendMessage);  Message unackMessage=consumer.receive(initRedeliveryDelay + 1000);  assertNotNull(unackMessage);  String unackId=unackMessage.getJMSMessageID();  assertEquals(((TextMessage)unackMessage).getText(),text);  assertFalse(unackMessage.getJMSRedelivered());  consumeSession.recover();  Message ackMessage=consumer.receive(initRedeliveryDelay + 1000);  assertNotNull(ackMessage);  ackMessage.acknowledge();  String ackId=ackMessage.getJMSMessageID();  assertEquals(((TextMessage)ackMessage).getText(),text);  assertTrue(ackMessage.getJMSRedelivered());  assertEquals(unackId,ackId);  consumeSession.recover();  assertNull(consumer.receiveNoWait());}  }
class C{  private Integer notNull(Quantity value){  if (null == value) {    return (new Integer(0));  } else {    return (value.getIntegerValue());  }}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public void paintPopupMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @RequestMapping("/{id}/monitor") public ModelAndView monitor(@PathVariable("id") final String id){  final JobHandle job=this.manager.getJob(id);  if (job != null) {    logger.debug("Job: {} - {}",job.getId(),job.getState());  } else {    logger.debug("No job: {}",id);  }  final Map<String,Object> model=new HashMap<>(1);  model.put("job",job);  return new ModelAndView("monitor",model);}  }
class C{  private void afterDataFsync(Result<Boolean> result,int position,FsyncType fsyncType,ArrayList<SegmentFsyncCallback> listeners){  try {    completeIndex(position);    Result<Boolean> cont=result.then(null);    if (fsyncType.isSchedule()) {      _sOut.fsyncSchedule(cont);    } else {      _sOut.fsync(cont);    }  } catch (  Throwable e) {    result.fail(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.LINE_TAG__DOCLET:    setDoclet((Doclet)null);  return;}super.eUnset(featureID);}  }
class C{  public MergeObservableList<T> insertItem(T object){  lists.add(Collections.singletonList(object));  modCount+=1;  listeners.notifyInserted(this,size() - 1,1);  return this;}  }
class C{  public void testAbsPos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  String result="123809648392384754573567356745735635678902957849027687.87678287";  assertEquals("incorrect value",result,aNumber.abs().toString());}  }
class C{  protected void emit_AnnotatedN4MemberDeclaration_SemicolonKeyword_1_2_1_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void shape(char[] text,int start,int count){  checkParams(text,start,count);  if (isContextual()) {    if (rangeSet == null) {      shapeContextually(text,start,count,key);    } else {      shapeContextually(text,start,count,shapingRange);    }  } else {    shapeNonContextually(text,start,count);  }}  }
class C{  private void loadDependentInfo(){  if (m_vo.TableName.equals("C_Order")) {    int C_DocTyp_ID=0;    Integer target=(Integer)getValue("C_DocTypeTarget_ID");    if (target != null)     C_DocTyp_ID=target.intValue();    if (C_DocTyp_ID == 0)     return;    String sql="SELECT DocSubTypeSO FROM C_DocType WHERE C_DocType_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,C_DocTyp_ID);      rs=pstmt.executeQuery();      if (rs.next())       Env.setContext(m_vo.ctx,m_vo.WindowNo,"OrderType",rs.getString(1));    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  if (m_vo.TableName.equals("C_BPartner_Location")) {    Integer location_int=(Integer)getValue(X_C_BPartner_Location.COLUMNNAME_C_Location_ID);    String phone_frm=null;    if (location_int != null)     phone_frm=DB.getSQLValueString(null,"SELECT ExpressionPhone FROM C_Country c, C_Location l WHERE c.C_Country_ID = l.C_Country_ID AND l.C_location_ID = ?",location_int);    GridField fPhone=getField(X_C_BPartner_Location.COLUMNNAME_Phone);    MColumn colPhone=null;    if (fPhone != null)     colPhone=MColumn.get(Env.getCtx(),fPhone.getAD_Column_ID());    GridField fPhone2=getField(X_C_BPartner_Location.COLUMNNAME_Phone2);    MColumn colPhone2=null;    if (fPhone2 != null)     colPhone2=MColumn.get(Env.getCtx(),fPhone2.getAD_Column_ID());    GridField fFax=getField(X_C_BPartner_Location.COLUMNNAME_Fax);    MColumn colFax=null;    if (fFax != null)     colFax=MColumn.get(Env.getCtx(),fFax.getAD_Column_ID());    if (colPhone != null && (colPhone.getVFormat() == null || colPhone.getVFormat().length() == 0))     fPhone.setVFormat(phone_frm);    if (colPhone2 != null && (colPhone2.getVFormat() == null || colPhone2.getVFormat().length() == 0))     fPhone2.setVFormat(phone_frm);    if (colFax != null && (colFax.getVFormat() == null || colFax.getVFormat().length() == 0))     fFax.setVFormat(phone_frm);  }}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  m_headerInfo=new Instances(instances,0);  m_numClasses=instances.numClasses();  m_numAttributes=instances.numAttributes();  m_probOfWordGivenClass=new double[m_numClasses][];  m_wordsPerClass=new double[m_numClasses];  m_probOfClass=new double[m_numClasses];  double laplace=1;  for (int c=0; c < m_numClasses; c++) {    m_probOfWordGivenClass[c]=new double[m_numAttributes];    m_probOfClass[c]=laplace;    m_wordsPerClass[c]=laplace * m_numAttributes;    for (int att=0; att < m_numAttributes; att++) {      m_probOfWordGivenClass[c][att]=laplace;    }  }  for (int i=0; i < instances.numInstances(); i++) {    updateClassifier(instances.instance(i));  }}  }
class C{  @Override public void updateSelectedExtend(Collection<GraphNode> extension){  for (  GraphNode node : extension) {    setSelectedState(node,true);  }}  }
class C{  public boolean moveToPosition(int offset){  try {    return rs.relative(offset);  } catch (  SQLException e) {    LOG.warn("Error moving inside the result set, offset: " + offset,e);  }  return false;}  }
class C{  public SWFVectors tagDefineFont2(int id,int flags,String name,int numGlyphs,int ascent,int descent,int leading,int[] codes,int[] advances,Rect[] bounds,int[] kernCodes1,int[] kernCodes2,int[] kernAdjustments) throws IOException {  fontCodes.put(new Integer(id),(codes != null) ? codes : new int[0]);  return null;}  }
class C{  @Override public void configureContentNegotiation(ContentNegotiationConfigurer configurer){  configurer.defaultContentType(MediaType.APPLICATION_JSON).favorPathExtension(true);}  }
class C{  @Override public void run(){  if (logger.isDebugEnabled()) {    logger.debug("{}: Beginning to monitor clients",ClientHealthMonitor.this);  }  while (!this._isStopped) {    SystemFailure.checkFailure();    try {      Thread.sleep(CLIENT_MONITOR_INTERVAL);      if (logger.isTraceEnabled()) {        logger.trace("Monitoring {} client(s)",getClientHeartbeats().size());      }      long currentTime=System.currentTimeMillis();      if (logger.isTraceEnabled()) {        logger.trace("{} starting sweep at {}",ClientHealthMonitor.this,currentTime);      }      for (Iterator i=getClientHeartbeats().entrySet().iterator(); i.hasNext(); ) {        Map.Entry entry=(Map.Entry)i.next();        ClientProxyMembershipID proxyID=(ClientProxyMembershipID)entry.getKey();        validateThreads(proxyID);        Long latestHeartbeatValue=(Long)entry.getValue();        if (latestHeartbeatValue != null) {          long latestHeartbeat=latestHeartbeatValue.longValue();          if (logger.isTraceEnabled()) {            logger.trace("{} ms have elapsed since the latest heartbeat for client with member id {}",(currentTime - latestHeartbeat),proxyID);          }          if ((currentTime - latestHeartbeat) > this._maximumTimeBetweenPings) {            if (isAnyThreadProcessingMessage(proxyID)) {              if (logger.isDebugEnabled()) {                logger.debug("Monitoring client with member id {}. It has been {} ms since the latest heartbeat. This client would have been terminated but at least one of its threads is processing a message.",entry.getKey(),(currentTime - latestHeartbeat));              }            } else {              if (cleanupClientThreads(proxyID,true)) {                logger.warn(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_MONITORING_CLIENT_WITH_MEMBER_ID_0_IT_HAD_BEEN_1_MS_SINCE_THE_LATEST_HEARTBEAT_MAX_INTERVAL_IS_2_TERMINATED_CLIENT,new Object[]{entry.getKey(),currentTime - latestHeartbeat,this._maximumTimeBetweenPings}));              }            }          } else {            if (logger.isTraceEnabled()) {              logger.trace("Monitoring client with member id {}. It has been {} ms since the latest heartbeat. This client is healthy.",entry.getKey(),(currentTime - latestHeartbeat));            }          }        }      }    } catch (    InterruptedException e) {      if (this._isStopped) {        break;      }      logger.warn(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_UNEXPECTED_INTERRUPT_EXITING),e);      break;    }catch (    Exception e) {      if (!this._isStopped) {        logger.fatal(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_0_AN_UNEXPECTED_EXCEPTION_OCCURRED,ClientHealthMonitor.this),e);      }    }  }}  }
class C{  protected void animatePanelToState(PanelState state,StateChangeReason reason,long duration){  mAnimatingState=state;  mAnimatingStateReason=reason;  final float height=getPanelHeightFromState(state);  animatePanelTo(height,duration);}  }
class C{  JarWithStream(PathImpl backing){  super(backing);}  }
class C{  @Override public Map<IAddress,LatticeElementType> generateAddressToStateMapping(final IInstruction startInstruction,final boolean trackIncoming){  final Map<IAddress,LatticeElementType> addressToLatticeElementMap=new TreeMap<>();  final Iterator<Pair<IInstructionGraphEdge,LatticeElementType>> iter=resultIterator();  while (iter.hasNext()) {    final Pair<IInstructionGraphEdge,LatticeElementType> edgeToLatticeElement=iter.next();    if (edgeToLatticeElement.first().isInstructionExit()) {      IAddress address;      if (hasResult(edgeToLatticeElement.first())) {        if (direction == AnalysisDirection.DOWN) {          address=graph.getSource(edgeToLatticeElement.first()).getReilInstruction().getAddress();        } else {          address=graph.getDestination(edgeToLatticeElement.first()).getReilInstruction().getAddress();        }        if (addressToLatticeElementMap.containsKey(address)) {          final ArrayList<LatticeElementType> combinelist=new ArrayList<>();          combinelist.add(edgeToLatticeElement.second());          combinelist.add(addressToLatticeElementMap.get(address));          addressToLatticeElementMap.put(address,lattice.combine(combinelist));        } else {          addressToLatticeElementMap.put(address,edgeToLatticeElement.second());        }      } else       if (ReilHelpers.toNativeAddress(graph.getSource(edgeToLatticeElement.first()).getReilInstruction().getAddress()).equals(startInstruction.getAddress()) && (direction == AnalysisDirection.DOWN) && !trackIncoming) {        address=graph.getSource(edgeToLatticeElement.first()).getReilInstruction().getAddress();        addressToLatticeElementMap.put(address,edgeToLatticeElement.second());      } else       if (ReilHelpers.toNativeAddress(graph.getDestination(edgeToLatticeElement.first()).getReilInstruction().getAddress()).equals(startInstruction.getAddress()) && (direction == AnalysisDirection.UP) && trackIncoming) {        address=graph.getDestination(edgeToLatticeElement.first()).getReilInstruction().getAddress();        addressToLatticeElementMap.put(address,edgeToLatticeElement.second());      }    }  }  return addressToLatticeElementMap;}  }
class C{  public OffsetInfo read(String path) throws ZkException {  try {    byte[] bytes=readInternal(path);    if (bytes == null) {      return null;    }    String data=new String(bytes,DEFAULT_CHARSET);    LOGGER.debug("Reading from Zookeeper Path {} Payload {}",path,data);    OffsetInfo offsetInfo=MAPPER.readValue(data,OffsetInfo.class);    return offsetInfo;  } catch (  Exception ex) {    LOGGER.error("Error while reading from Zk Path..{} Exception {}",path,ex.getMessage());    throw new ZkException("Error reading from Zookeeper..Path: " + path,ex);  }}  }
class C{  public void testDeleteAllTracksInMyTracks() throws IOException {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFilesNumber(drive);}  }
class C{  public synchronized void remove(Class t,EventListener l){  if (!t.isInstance(l)) {    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);  }  if (l == null) {    throw new IllegalArgumentException("Listener " + l + " is null");  }  int index=-1;  for (int i=listenerList.length - 2; i >= 0; i-=2) {    if ((listenerList[i] == t) && (listenerList[i + 1] == l)) {      index=i;      break;    }  }  if (index != -1) {    Object[] tmp=new Object[listenerList.length - 2];    System.arraycopy(listenerList,0,tmp,0,index);    if (index < tmp.length)     System.arraycopy(listenerList,index + 2,tmp,index,tmp.length - index);    listenerList=(tmp.length == 0) ? NULL_ARRAY : tmp;  }}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public ThreadFilter(String thread){  if (thread == null) {    throw new IllegalArgumentException("Thread cannot be null.");  }  this.thread=thread;}  }
class C{  public int yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    int zzAttributes=zzAttrL[zzState];    if ((zzAttributes & 1) == 1) {      zzAction=zzState;    }    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);          zzCurrentPosL+=Character.charCount(zzInput);        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);            zzCurrentPosL+=Character.charCount(zzInput);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{        cssSelector.setCombinator(Combinator.DESCENDANT);        stateReset();      }case 20:    break;case 2:{    cssSelector=new CssSelector(yytext());    selectors.add(cssSelector);    stateSelector();  }case 21:break;case 3:{cssSelector=new CssSelector();selectors.add(cssSelector);yypushback(1);stateSelector();}case 22:break;case 4:{}case 23:break;case 5:{cssSelector=new CssSelector();selectors.add(cssSelector);stateSelector();}case 24:break;case 6:{throw new CSSellyException("Illegal character <" + yytext() + ">.",yystate(),line(),column());}case 25:break;case 7:{yypushback(1);stateCombinator();}case 26:break;case 8:{stateAttr();}case 27:break;case 9:{cssSelector.addAttributeSelector(yytext());}case 28:break;case 10:{stateSelector();}case 29:break;case 11:{throw new CSSellyException("Invalid combinator <" + yytext() + ">.",yystate(),line(),column());}case 30:break;case 12:{cssSelector.setCombinator(Combinator.GENERAL_SIBLING);stateReset();}case 31:break;case 13:{cssSelector.setCombinator(Combinator.CHILD);stateReset();}case 32:break;case 14:{cssSelector.setCombinator(Combinator.ADJACENT_SIBLING);stateReset();}case 33:break;case 15:{cssSelector.addClassSelector(yytext(1));}case 34:break;case 16:{cssSelector.addIdSelector(yytext(1));}case 35:break;case 17:{cssSelector.addPseudoClassSelector(yytext(yycharat(1) == ':' ? 2 : 1));}case 36:break;case 18:{cssSelector.addPseudoFunctionSelector(pseudoFnName,yytext(0,1));stateSelector();}case 37:break;case 19:{pseudoFnName=yytext(yycharat(1) == ':' ? 2 : 1,1);statePseudoFn();}case 38:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();{return 0;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public void test_maxLjava_util_CollectionLjava_util_Comparator(){  ReversedMyIntComparator rmic=new ReversedMyIntComparator();  assertTrue("Returned incorrect max element using custom comparator",Collections.max(mys,rmic) == myobjArray[0]);  ArrayList al=new ArrayList();  try {    Collections.max(al,rmic);    fail("NoSuchElementException expected");  } catch (  NoSuchElementException e) {  }  al.add("String");  al.add(new Integer(1));  al.add(new Double(3.14));  try {    Collections.max(al,rmic);    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }}  }
class C{  public StackTracePatternLayout(){  this(DEFAULT_CONVERSION_PATTERN);}  }
class C{  public static String format(final List<? extends NameValuePair> parameters,final String encoding){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encode(parameter.getName(),encoding);    final String value=parameter.getValue();    final String encodedValue=value != null ? encode(value,encoding) : "";    if (result.length() > 0)     result.append(PARAMETER_SEPARATOR);    result.append(encodedName);    result.append(NAME_VALUE_SEPARATOR);    result.append(encodedValue);  }  return result.toString();}  }
class C{  public static Button createPushButton(Composite parent,String label,Image image){  Button button=new Button(parent,SWT.PUSH);  button.setFont(parent.getFont());  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  private void assertThereCanBeOnlyOne(PivotField pf,FieldStatsInfo stats,Object val){  String msg=pf.getField() + ":" + pf.getValue();  assertEquals(msg + " stats count",1L,(long)stats.getCount());  assertEquals(msg + " stats missing",pf.getCount() - 1L,(long)stats.getMissing());  assertEquals(msg + " stats min",val,stats.getMin());  assertEquals(msg + " stats max",val,stats.getMax());}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  if (par2 >= 36 && par2 <= height - 57)   if (par1 >= width / 2 + 140 || par1 <= width / 2 - 126)   blockList.elementClicked(-1,false,0,0);  super.mouseClicked(par1,par2,par3);}  }
class C{  public boolean isApplication(){  return this.equals(APPLICATION);}  }
class C{  @Override public void release() throws ReplicatorException, InterruptedException {}  }
class C{  public boolean isSetIm_false(){  return EncodingUtils.testBit(__isset_bitfield,__IM_FALSE_ISSET_ID);}  }
class C{  public TurnLeft(){  super();}  }
class C{  public void testXY_GeometryCollection_MultiPoint() throws Exception {  checkValue(MDSYS.SDO_GEOMETRY(2004,NULL,NULL,MDSYS.SDO_ELEM_INFO_ARRAY(1,1,3,7,2,1),MDSYS.SDO_ORDINATE_ARRAY(1,1,2,2,3,3,1,2,2,1)),"GEOMETRYCOLLECTION (MULTIPOINT (1 1, 2 2, 3 3), LINESTRING (1 2, 2 1) )");}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  public String convert(String methodName,String value){  if (methodName == null || methodName.length() == 0)   throw new IllegalArgumentException("No Method Name");  String retValue=null;  StringBuffer msg=new StringBuffer(methodName).append(" - ").append(value);  log.info(msg.toString());  Method method=getMethod(methodName);  if (method == null)   throw new IllegalArgumentException("Method not found: " + methodName);  int argLength=method.getParameterTypes().length;  if (argLength != 1)   throw new IllegalArgumentException("Method " + methodName + " has invalid no of arguments: "+ argLength);  try {    Object[] args=new Object[]{value};    retValue=(String)method.invoke(this,args);  } catch (  Exception e) {    log.log(Level.SEVERE,"convert: " + methodName,e);    e.printStackTrace(System.err);  }  return retValue;}  }
class C{  void processResultReg(SsaInsn insn){  RegisterSpec ropResult=insn.getResult();  if (ropResult == null) {    return;  }  int ropReg=ropResult.getReg();  if (isBelowThresholdRegister(ropReg)) {    return;  }  insn.changeResultReg(nextSsaReg);  addMapping(ropReg,insn.getResult());  if (DEBUG) {    ssaRegToRopReg.add(ropReg);  }  nextSsaReg++;}  }
class C{  public void highlight(OMGraphic omg){  VPFFeatureInfoHandler vfih=warehouse.getFeatInfoHandler();  if (vfih != null && vfih.shouldPaintHighlight(omg)) {    super.highlight(omg);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public IMouseState createNodePressedMiddleState(final Node n,final MouseEvent event){  final CNodePressedMiddleState state=new CNodePressedMiddleState(this,m_graph,n);  m_factory.createNodePressedMiddleAction().execute(state,event);  return state;}  }
class C{  public void triggerEvent(EEvent event,Bundle data){  Set<Subscribe> registerList=mEvents.get(event);  if (registerList == null) {    return;  }  if (!registerList.isEmpty()) {    for (Iterator<Subscribe> it=registerList.iterator(); it.hasNext(); ) {      Subscribe subscribe=it.next();      subscribe.update(event,data);    }  }}  }
class C{  public SmsException(Throwable cause){  super(cause);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getCurrentNode());}  }
class C{  @Override public int scale(){  return scale;}  }
class C{  void addAwaitingResume(DccFileTransfer transfer){synchronized (_awaitingResume) {    _awaitingResume.addElement(transfer);  }}  }
class C{  public void auditLicense(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);}  }
class C{  private void generateSerializationFriendlyMethods(){  TypeConvertingMethodAdapter mv=new TypeConvertingMethodAdapter(cw.visitMethod(ACC_PRIVATE + ACC_FINAL,NAME_METHOD_WRITE_REPLACE,DESCR_METHOD_WRITE_REPLACE,null,null));  mv.visitCode();  mv.visitTypeInsn(NEW,NAME_SERIALIZED_LAMBDA);  mv.visitInsn(DUP);  mv.visitLdcInsn(Type.getType(targetClass));  mv.visitLdcInsn(invokedType.returnType().getName().replace('.','/'));  mv.visitLdcInsn(samMethodName);  mv.visitLdcInsn(samMethodType.toMethodDescriptorString());  mv.visitLdcInsn(implInfo.getReferenceKind());  mv.visitLdcInsn(implInfo.getDeclaringClass().getName().replace('.','/'));  mv.visitLdcInsn(implInfo.getName());  mv.visitLdcInsn(implInfo.getMethodType().toMethodDescriptorString());  mv.visitLdcInsn(instantiatedMethodType.toMethodDescriptorString());  mv.iconst(argDescs.length);  mv.visitTypeInsn(ANEWARRAY,JAVA_LANG_OBJECT);  for (int i=0; i < argDescs.length; i++) {    mv.visitInsn(DUP);    mv.iconst(i);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,lambdaClassName,argNames[i],argDescs[i]);    mv.boxIfTypePrimitive(Type.getType(argDescs[i]));    mv.visitInsn(AASTORE);  }  mv.visitMethodInsn(INVOKESPECIAL,NAME_SERIALIZED_LAMBDA,NAME_CTOR,DESCR_CTOR_SERIALIZED_LAMBDA,false);  mv.visitInsn(ARETURN);  mv.visitMaxs(-1,-1);  mv.visitEnd();}  }
class C{  public void addFieldAnnotations(CstFieldRef field,Annotations annotations){  if (fieldAnnotations == null) {    fieldAnnotations=new ArrayList<FieldAnnotationStruct>();  }  fieldAnnotations.add(new FieldAnnotationStruct(field,new AnnotationSetItem(annotations)));}  }
class C{  private void grayLine(final CGraphModel model,final NaviNode node,final INaviCodeNode codeNode,final double y){  final double yPos=y - node.getY();  final int row=node.positionToRow(yPos);  final INaviInstruction instruction=CCodeNodeHelpers.lineToInstruction(codeNode,row);  if (instruction == null) {    return;  }  if (m_grayedInstructions.contains(instruction)) {    final Pair<String,List<CStyleRunData>> content=ZyInstructionBuilder.buildInstructionLine(instruction,model.getGraph().getSettings(),new CDefaultModifier(model.getGraph().getSettings(),model.getDebuggerProvider()));    for (    final CStyleRunData style : content.second()) {      node.setColor(row,style.getStart(),style.getLength(),style.getColor());    }    m_grayedInstructions.remove(instruction);  } else {    node.setColor(row,Color.LIGHT_GRAY);    m_grayedInstructions.add(instruction);  }}  }
class C{  public static void main(String[] args){  EvolutionState state;  ParameterDatabase parameters;  int currentJob=0;  state=possiblyRestoreFromCheckpoint(args);  if (state != null) {    try {      if (state.runtimeArguments == null)       Output.initialError("Checkpoint completed from job started by foreign program (probably GUI).  Exiting...");      args=state.runtimeArguments;      currentJob=((Integer)(state.job[0])).intValue() + 1;    } catch (    Exception e) {      Output.initialError("EvolutionState's jobs variable is not set up properly.  Exiting...");    }    state.run(EvolutionState.C_STARTED_FROM_CHECKPOINT);    cleanup(state);  }  parameters=loadParameterDatabase(args);  int numJobs=parameters.getIntWithDefault(new Parameter("jobs"),null,1);  if (numJobs < 1)   Output.initialError("The 'jobs' parameter must be >= 1 (or not exist, which defaults to 1)");  for (int job=currentJob; job < numJobs; job++) {    if (parameters == null)     parameters=loadParameterDatabase(args);    state=initialize(parameters,job);    state.output.systemMessage("Job: " + job);    state.job=new Object[1];    state.job[0]=new Integer(job);    state.runtimeArguments=args;    if (numJobs > 1) {      String jobFilePrefix="job." + job + ".";      state.output.setFilePrefix(jobFilePrefix);      state.checkpointPrefix=jobFilePrefix + state.checkpointPrefix;    }    state.run(EvolutionState.C_STARTED_FRESH);    cleanup(state);    parameters=null;  }  System.exit(0);}  }
class C{  public static void create(Service service,TaskService.State taskServiceState,Operation.CompletionHandler handler){  Date now=DateTime.now().toDate();  taskServiceState.queuedTime=now;  taskServiceState.steps.forEach(null);  ServiceHostUtils.getCloudStoreHelper(service.getHost()).createPost(TaskServiceFactory.SELF_LINK).setBody(taskServiceState).setCompletion(handler).sendWith(service);}  }
class C{  public CommonTermsQueryBuilder analyzer(String analyzer){  this.analyzer=analyzer;  return this;}  }
class C{  public void modelDestroyed(SessionEvent event){}  }
class C{  public void lerp(PVector v,float amt){  x=PApplet.lerp(x,v.x,amt);  y=PApplet.lerp(y,v.y,amt);  z=PApplet.lerp(z,v.z,amt);}  }
class C{  public String validate(){  MDocType dt=getDocType();  if (dt == null) {    log.log(Level.SEVERE,"No DocType=" + getC_DocType_ID());    setIsValid(false);    return "No Document Type";  }  MDocType c_dt=getCounterDocType();  if (c_dt == null) {    log.log(Level.SEVERE,"No Counter DocType=" + getCounter_C_DocType_ID());    setIsValid(false);    return "No Counter Document Type";  }  String dtBT=dt.getDocBaseType();  String c_dtBT=c_dt.getDocBaseType();  log.fine(dtBT + " -> " + c_dtBT);  if ((MDocType.DOCBASETYPE_SalesOrder.equals(dtBT) && MDocType.DOCBASETYPE_PurchaseOrder.equals(c_dtBT)) || (MDocType.DOCBASETYPE_SalesOrder.equals(c_dtBT) && MDocType.DOCBASETYPE_PurchaseOrder.equals(dtBT)))   setIsValid(true); else   if ((MDocType.DOCBASETYPE_APInvoice.equals(dtBT) && MDocType.DOCBASETYPE_ARInvoice.equals(c_dtBT)) || (MDocType.DOCBASETYPE_APInvoice.equals(c_dtBT) && MDocType.DOCBASETYPE_ARInvoice.equals(dtBT)))   setIsValid(true); else   if ((MDocType.DOCBASETYPE_MaterialDelivery.equals(dtBT) && MDocType.DOCBASETYPE_MaterialReceipt.equals(c_dtBT)) || (MDocType.DOCBASETYPE_MaterialDelivery.equals(c_dtBT) && MDocType.DOCBASETYPE_MaterialReceipt.equals(dtBT)))   setIsValid(true); else   if ((MDocType.DOCBASETYPE_APCreditMemo.equals(dtBT) && MDocType.DOCBASETYPE_ARCreditMemo.equals(c_dtBT)) || (MDocType.DOCBASETYPE_APCreditMemo.equals(c_dtBT) && MDocType.DOCBASETYPE_ARCreditMemo.equals(dtBT)))   setIsValid(true); else   if ((MDocType.DOCBASETYPE_ARReceipt.equals(dtBT) && MDocType.DOCBASETYPE_APPayment.equals(c_dtBT)) || (MDocType.DOCBASETYPE_ARReceipt.equals(c_dtBT) && MDocType.DOCBASETYPE_APPayment.equals(dtBT)))   setIsValid(true); else {    log.warning("NOT - " + dtBT + " -> "+ c_dtBT);    setIsValid(false);    return "Not valid";  }  if (!c_dt.isDocNoControlled())   return "Counter Document Type should be automatically Document Number controlled";  return null;}  }
class C{  public JCBHandle(String l){  label=l;}  }
class C{  public void showGUI(){  if (frame == null) {    frame=new JFrame("Saving Shape Files");    frame.getContentPane().add(getGUI(),BorderLayout.CENTER);    frame.pack();  }  frame.setVisible(true);}  }
class C{  public ToStringBuilder append(final String fieldName,final boolean[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  String errorMessage(){  return errMsg;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String contentType=request.getContentType();  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr()+ " - "+ contentType);  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  Properties ctx=JSPEnv.getCtx(request);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu == null) {    log.warning("No web user");    if (!response.isCommitted())     response.sendRedirect("loginServlet?ForwardTo=request.jsp");    return;  }  if (contentType != null && contentType.indexOf("multipart/form-data") != -1) {    uploadFile(request,response);    return;  }  String requestURL=request.getRequestURL().toString();  String requestRef=request.getHeader("referer");  String source=WebUtil.getParameter(request,P_SOURCE);  String info=WebUtil.getParameter(request,P_INFO);  String forwardTo=WebUtil.getParameter(request,P_FORWARDTO);  log.fine("Referer=" + requestRef + ", Source="+ source+ ", ForwardTo="+ forwardTo);  if (requestURL == null)   requestURL="";  if (requestURL.equals(requestRef)) {    requestRef=source;    source=null;  }  int AD_Client_ID=Env.getContextAsInt(ctx,"AD_Client_ID");  int R_RequestType_ID=WebUtil.getParameterAsInt(request,P_REQUESTTYPE_ID);  int C_Order_ID=WebUtil.getParameterAsInt(request,P_REF_ORDER_ID);  int R_Request_ID=WebUtil.getParameterAsInt(request,P_REQUEST_ID);  int SalesRep_ID=WebUtil.getParameterAsInt(request,P_SALESREP_ID);  if (SalesRep_ID != 0 && !MUser.isSalesRep(SalesRep_ID)) {    log.warning("Invalid (set to 0) SalesRep_ID=" + SalesRep_ID);    SalesRep_ID=0;  }  String Summary=WebUtil.getParameter(request,P_SUMMARY);  if (Summary == null || Summary.length() == 0) {    WebUtil.createErrorPage(request,response,this,"No Data Received");    return;  }  boolean IsConfidential=WebUtil.getParameterAsBoolean(request,P_CONFIDENTIAL);  boolean IsClose=WebUtil.getParameterAsBoolean(request,P_CLOSE);  boolean IsEscalate=WebUtil.getParameterAsBoolean(request,P_ESCALATE);  MRequest req=null;  if (R_Request_ID == 0) {    req=new MRequest(ctx,SalesRep_ID,R_RequestType_ID,Summary,true,null);    req.setC_BPartner_ID(wu.getC_BPartner_ID());    req.setAD_User_ID(wu.getAD_User_ID());    if (C_Order_ID > 0)     req.setC_Order_ID(C_Order_ID);    if (IsConfidential)     req.setConfidentialType(MRequest.CONFIDENTIALTYPE_PartnerConfidential);    StringBuffer sb=new StringBuffer();    sb.append("From:").append(request.getRemoteHost()).append("-").append(request.getRemoteAddr());    sb.append(", Request:").append(requestURL).append("-").append(requestRef);    if (source != null)     sb.append("-").append(source);    sb.append("-").append(info);    sb.append(", User=").append(request.getHeader("accept-language")).append("-").append(request.getHeader("user-agent"));    req.setLastResult(sb.toString());    if (!req.save()) {      log.log(Level.SEVERE,"New Request NOT saved");      WebUtil.createErrorPage(request,response,this,"Request Save Error. Shorten Text!");      return;    }  } else {    req=new MRequest(ctx,R_Request_ID,null);    if (req.get_ID() == 0) {      log.log(Level.SEVERE,"Request NOT found - R_Request_ID=" + R_Request_ID);      WebUtil.createErrorPage(request,response,this,"Request Not found.");      return;    }    if (C_Order_ID != 0 && req.getC_Order_ID() == 0)     req.setC_Order_ID(C_Order_ID);    if (!req.webUpdate(Summary)) {      WebUtil.createErrorPage(request,response,this,"Request Cannot be updated.");      return;    }    if (IsConfidential)     req.setConfidentialTypeEntry(MRequest.CONFIDENTIALTYPEENTRY_PartnerConfidential);    if (IsClose)     req.doClose(); else     if (IsEscalate) {      boolean isUser=req.getC_BPartner_ID() == wu.getC_BPartner_ID();      if (isUser || wu.isSalesRep())       req.doEscalate(isUser);    }    if (!req.save()) {      log.log(Level.SEVERE,"Request Action Error");      WebUtil.createErrorPage(request,response,this,"Request Process Error.");      return;    }  }  StringBuffer message=new StringBuffer(req.getSummary());  String result=req.getResult();  if (result != null && result.length() > 0)   message.append("\n----------\n").append(req.getResult());  JSPEnv.sendEMail(request,wu,MMailMsg.MAILMSGTYPE_Request,new Object[]{req.getDocumentNo(),wu.getName(),message,"\n---------- " + req.getMailTag()});  String webStoreURL="http://" + request.getServerName() + request.getContextPath()+ "/";  if (forwardTo == null || forwardTo.length() == 0)   forwardTo=requestRef;  if (forwardTo != null && (forwardTo.indexOf("request.jsp") != -1 || forwardTo.indexOf("requestDetails.jsp") != -1))   forwardTo="requests.jsp";  if (forwardTo == null || forwardTo.length() == 0)   forwardTo=webStoreURL;  if (forwardTo.indexOf("Servlet") != -1)   forwardTo=webStoreURL;  WebUtil.createForwardPage(response,"Web Request Received - Thanks",forwardTo,10);}  }
class C{  void selectType(Environment env,Context ctx,int tm){  if ((tm & TM_LONG) != 0) {    type=Type.tLong;  } else {    type=Type.tInt;  }  right=convert(env,ctx,type,right);}  }
class C{  public IndexRequest timestamp(String timestamp){  this.timestamp=timestamp;  return this;}  }
class C{  public final boolean isRequired(String var1,String var2){  KnowledgeEdge edge=new KnowledgeEdge(var1,var2);  return this.allRequiredEdges.contains(edge);}  }
class C{  public void addUIEventListeners(Document doc){  EventTarget evtTarget=(EventTarget)doc.getDocumentElement();  AbstractNode n=(AbstractNode)evtTarget;  XBLEventSupport evtSupport=(XBLEventSupport)n.initializeEventSupport();  EventListener domMouseOverListener=new EventListenerWrapper(new DOMMouseOverEventListener());  evtSupport.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVGConstants.SVG_EVENT_MOUSEOVER,domMouseOverListener,true);  storeImplementationEventListenerNS(evtTarget,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVGConstants.SVG_EVENT_MOUSEOVER,domMouseOverListener,true);  EventListener domMouseOutListener=new EventListenerWrapper(new DOMMouseOutEventListener());  evtSupport.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVGConstants.SVG_EVENT_MOUSEOUT,domMouseOutListener,true);  storeImplementationEventListenerNS(evtTarget,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVGConstants.SVG_EVENT_MOUSEOUT,domMouseOutListener,true);}  }
class C{  public void removeAll(ByteString namespace){  if (namespace != null) {    contents.remove(namespace);  }}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  public StddevProjectionExpression(boolean isDistinct){  this.distinct=isDistinct;}  }
class C{  private static List<X509Certificate> parsePKCS7(InputStream is) throws CertificateException {  List<X509Certificate> certList;  if (is == null) {    throw new CertificateException("input stream is null");  }  try {    if (is.markSupported() == false) {      is=new ByteArrayInputStream(readAllBytes(is));    }    PKCS7 pkcs7=new PKCS7(is);    X509Certificate[] certArray=pkcs7.getCertificates();    if (certArray != null) {      certList=Arrays.asList(certArray);    } else {      certList=new ArrayList<X509Certificate>(0);    }  } catch (  IOException ioe) {    throw new CertificateException("IOException parsing PKCS7 data: " + ioe);  }  return Collections.unmodifiableList(certList);}  }
class C{  public boolean isEventRequired(){  Object oo=get_Value(COLUMNNAME_IsEventRequired);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void startActivity(Context context,String sharingId){  Intent intent=new Intent(context,ImageSharingLogView.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(EXTRA_SHARING_ID,sharingId);  context.startActivity(intent);}  }
class C{  @Override public ArrayList<String> list(String path){  ArrayList<String> fileNameList=new ArrayList<String>();  DropboxAPI.Entry files=null;  try {    files=mDBApi.metadata(path,25000,null,true,null);    for (    Entry e : files.contents) {      fileNameList.add(e.fileName());    }  } catch (  DropboxException e) {    e.printStackTrace();  }  return fileNameList;}  }
class C{  private static DeleteVirtualNetworkWorkflowDocument buildValidStartState(TaskState.TaskStage stage,DeleteVirtualNetworkWorkflowDocument.TaskState.SubStage subStage,int controlFlags,String virtualNetworkId){  DeleteVirtualNetworkWorkflowDocument startState=new DeleteVirtualNetworkWorkflowDocument();  startState.taskState=new DeleteVirtualNetworkWorkflowDocument.TaskState();  startState.taskState.stage=stage;  startState.taskState.subStage=subStage;  startState.controlFlags=controlFlags;  startState.virtualNetworkId=virtualNetworkId;  return startState;}  }
class C{  private static RPObject createPlayer(){  final RPObject rpo=new RPObject();  rpo.put("type","player");  rpo.put("name","player");  rpo.setID(new ID(USER_ID,ZONE_NAME));  final User pl=new User();  pl.initialize(rpo);  for (  final String slotName : Constants.CARRYING_SLOTS) {    rpo.addSlot(slotName);  }  return rpo;}  }
class C{  public String noPruningTipText(){  return "Whether pruning is performed.";}  }
class C{  public link addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public boolean equal(T a,T b){  return (this.a == a && this.b == b) || (this.a == b && this.b == a);}  }
class C{  public FPS(){  rollingAverage=new RollingAverage<>(FRAME_BUFFER_LENGTH);  lastTime=-1L;}  }
class C{  protected void sequence_AnnotatedPropertyAssignment_PropertySetterDeclaration(ISerializationContext context,PropertySetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean fingerprintFont(){  return this.fingerprint;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public static ExceptionBuilder conflict(){  return new ExceptionBuilder(Status.CONFLICT);}  }
class C{  NonBlockingLockManager(final int maxConcurrency,final boolean predeclareLocks,final boolean sortLockRequests,final Executor delegate){  if (maxConcurrency < 2 && !predeclareLocks) {    throw new IllegalArgumentException("maxConcurrency: must be 2+ unless you are predeclaring locks, not " + maxConcurrency);  }  if (predeclareLocks && !sortLockRequests) {    throw new IllegalArgumentException("Sorting of lock requests MUST be enabled when locks are being predeclared.");  }  if (delegate == null)   throw new IllegalArgumentException();  this.predeclareLocks=predeclareLocks;  this.sortLockRequests=sortLockRequests;  if (predeclareLocks) {    waitsFor=null;  } else {    waitsFor=new TxDag(maxConcurrency);  }  this.delegate=delegate;  service.submit(new AcceptTask());  lock.lock();  try {    setRunState(RunState.Running);  }  finally {    lock.unlock();  }}  }
class C{  public static Vector2 subtract(Vector2 a,Vector2 b){  return new Vector2(a.getX() - b.getX(),a.getY() - b.getY());}  }
class C{  public static void foundUntransformableMethod(){  untransformableMethod++;}  }
class C{  public void addChatListener(ChatManagerListener listener){  chatManagerListeners.add(listener);}  }
class C{  public mxModelCodec(){  this(new mxGraphModel());}  }
class C{  public void flush() throws IOException {  internalOut.flush();}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  protected Task<Void> clearState(){  if (stateExtension == null) {    throw new IllegalStateException("Storage extension not available");  }  return stateExtension.clearState(reference,state).thenRun(null);}  }
class C{  public FileDeleter(boolean logToStdErr){  this.logToStdErr=logToStdErr;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public CardNotPresentException(String message){  super(message);}  }
class C{  public static int indexOf(byte[] src,byte[] target,int fromIdx){  final int to=src.length - target.length + 1;  for (int i=fromIdx; i < to; i++) {    if (src[i] == target[0]) {      boolean equals=true;      for (int j=1, k=i + 1; j < target.length && equals; j++, k++) {        if (src[k] != target[j]) {          equals=false;        }      }      if (equals) {        return i;      }    }  }  return -1;}  }
class C{  public ExecuteResults(RowCursor cursor){  this.updateCount=-1;  this.cursor=cursor;}  }
class C{  public void next(){  index++;}  }
class C{  public InetAddress[] lookupAllHostAddr(String host) throws UnknownHostException {  Name name=null;  try {    name=new Name(host);  } catch (  TextParseException e) {    throw new UnknownHostException(host);  }  Record[] records=null;  if (preferV6)   records=new Lookup(name,Type.AAAA).run();  if (records == null)   records=new Lookup(name,Type.A).run();  if (records == null && !preferV6)   records=new Lookup(name,Type.AAAA).run();  if (records == null)   throw new UnknownHostException(host);  InetAddress[] array=new InetAddress[records.length];  for (int i=0; i < records.length; i++) {    Record record=records[i];    if (records[i] instanceof ARecord) {      ARecord a=(ARecord)records[i];      array[i]=a.getAddress();    } else {      AAAARecord aaaa=(AAAARecord)records[i];      array[i]=aaaa.getAddress();    }  }  return array;}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Status abort(){  LOGGER.info("Aborting driver");  Status status=driver.abort();  LOGGER.info("Aborted driver with status: {}",status);  return status;}  }
class C{  public SteelCheckBox(int orientation){  super();  this.orientation=orientation;}  }
class C{  public CallbackAdapter callbackAdapter(Executor executor){  if (executor != null)   return new ExecutorCallbackAdapter(executor);  return new CallbackAdapter.Default();}  }
class C{  protected void resetPendingDismisses(){  pendingDismisses.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:36.382 -0500",hash_original_method="2C12645510D08A28B5398079ECA6EB3E",hash_generated_method="F1135F81E245D5F44D4DD04C74F709EE") public void registerForRUIMReady(Handler h,int what,Object obj){  Registrant r=new Registrant(h,what,obj);synchronized (mStateMonitor) {    mRUIMReadyRegistrants.add(r);    if (mRuimState.isRUIMReady()) {      r.notifyRegistrant(new AsyncResult(null,null,null));    }  }}  }
class C{  private void updateVdcProperties(String svcId) throws Exception {  String action=targetSiteInfo.getActionRequired();  log.info("Step5: Process vdc op handlers, action = {}",action);  VdcOpHandler opHandler=getOpHandler(action);  opHandler.setTargetSiteInfo(targetSiteInfo);  opHandler.setTargetVdcPropInfo(targetVdcPropInfo);  opHandler.setLocalVdcPropInfo(localVdcPropInfo);  opHandler.execute();  if (opHandler.isRollingRebootNeeded()) {    log.info("Step5: Rolling reboot detected for vdc operation {}",action);    rollingReboot(svcId);  } else   if (opHandler.isConcurrentRebootNeeded()) {    log.info("Step5: Concurrent reboot for operation handler {}",action);    commitVdcConfigVersionToLocal();    reboot();  } else   if (isGeoConfigChange()) {    log.info("Step5: Geo configuration changed, so concurrent reboot");    commitVdcConfigVersionToLocal();    reboot();  } else {    commitVdcConfigVersionToLocal();  }}  }
class C{  LinearScan(){  super("Linear Scan Composite Phase",new OptimizationPlanElement[]{new OptimizationPlanAtomicElement(new IntervalAnalysis()),new OptimizationPlanAtomicElement(new RegisterRestrictionsPhase()),new OptimizationPlanAtomicElement(new LinearScanPhase()),new OptimizationPlanAtomicElement(new UpdateGCMaps1()),new OptimizationPlanAtomicElement(new SpillCode()),new OptimizationPlanAtomicElement(new UpdateGCMaps2()),new OptimizationPlanAtomicElement(new UpdateOSRMaps())});}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.353 -0500",hash_original_method="A99C097CFE2867999295EE26A5D88F1F",hash_generated_method="A99C097CFE2867999295EE26A5D88F1F") void start(long stackSize){  VMThread.create(thread,stackSize);}  }
class C{  public LabeledOMPoly(int[] xPoints,int[] yPoints){  super(xPoints,yPoints);}  }
class C{  public DrawerBuilder withSystemUIHidden(boolean systemUIHidden){  this.mSystemUIHidden=systemUIHidden;  if (systemUIHidden) {    withFullscreen(systemUIHidden);  }  return this;}  }
class C{  private static void copyFile(InputStream in,OutputStream out) throws IOException {  byte[] buffer=new byte[1024];  int read;  while ((read=in.read(buffer)) != -1) {    out.write(buffer,0,read);  }}  }
class C{  public String stopwordsHandlerTipText(){  return "The stopwords handler to use (Null means no stopwords are used).";}  }
class C{  static void readyForElderRecovery(InternalDistributedSystem sys,InternalDistributedMember elderId,DLockService dls){  GrantorRequestContext grc=sys.getGrantorRequestContext();  if (elderId != null) {    grc.elderLock.lock();    try {      if (grc.elderCallsInProgress > 0) {        if (elderId != grc.currentElder && !elderId.equals(grc.currentElder)) {          elderSyncWait(sys,elderId,dls);        }      }    }  finally {      grc.elderLock.unlock();    }  } else {    grc.elderLock.lock();    try {      if (grc.elderCallsInProgress > 0) {        elderSyncWait(sys,null,dls);      }    }  finally {      grc.elderLock.unlock();    }  }}  }
class C{  protected String readString(Reader reader){  if (reader == null) {    return null;  }  StringBuilder buffer=new StringBuilder();  try {    while (true) {      int c=reader.read();      if (c == -1) {        break;      }      buffer.append((char)c);    }    return buffer.toString();  } catch (  Exception e) {    assertTrue(false);    return null;  }}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Map == false) {    return false;  }  final Map<?,?> map=(Map<?,?>)obj;  if (map.size() != size()) {    return false;  }  final MapIterator<?,?> it=mapIterator();  try {    while (it.hasNext()) {      final Object key=it.next();      final Object value=it.getValue();      if (value == null) {        if (map.get(key) != null || map.containsKey(key) == false) {          return false;        }      } else {        if (value.equals(map.get(key)) == false) {          return false;        }      }    }  } catch (  final ClassCastException ignored) {    return false;  }catch (  final NullPointerException ignored) {    return false;  }  return true;}  }
class C{  public void sort(int fromIndex,int toIndex){  Arrays.sort(_data,fromIndex,toIndex);}  }
class C{  public static void main(String[] args) throws Exception {  String[][] tests=new String[11][2];  for (int i=0; i < 8; i++) {    tests[i][0]=BUG_ID + FS + "pkg1"+ FS+ "class-use"+ FS+ "C1.html";    tests[i][1]="Test " + (i + 1) + " passes";  }  for (int i=8, j=1; i < tests.length; i++, j++) {    tests[i][0]=BUG_ID + FS + "pkg1"+ FS+ "package-use.html";    tests[i][1]="Test " + j + " passes";  }  TestUseOption tester=new TestUseOption();  run(tester,ARGS,tests,NO_TEST);  tester.printSummary();  run(tester,ARGS2,NO_TEST,NO_TEST);  String usePageContents=tester.readFileToString(BUG_ID + "-2" + FS+ "pkg1"+ FS+ "class-use"+ FS+ "UsedClass.html");  int prevIndex=-1;  int currentIndex=-1;  for (int i=0; i < TEST2.length; i++) {    currentIndex=usePageContents.indexOf(TEST2[i]);    System.err.println(TEST2[i] + " at index " + currentIndex);    if (currentIndex < prevIndex)     throw new Exception(TEST2[i] + " is in the wrong order.");    prevIndex=currentIndex;  }  tester.printSummary();  run(tester,ARGS3,TEST3,NO_TEST);  tester.printSummary();}  }
class C{  @Override public void preProcess() throws Exception {  if (m_SplitEvaluator == null) {    throw new Exception("No SplitEvalutor set");  }  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  m_ResultListener.preProcess(this);}  }
class C{  @SuppressWarnings("ConstantConditions") private void tstNextJobId() throws Exception {  IgniteHadoopClientProtocolProvider provider=provider();  ClientProtocol proto=provider.create(config(HadoopAbstractSelfTest.REST_PORT));  JobID jobId=proto.getNewJobID();  assert jobId != null;  assert jobId.getJtIdentifier() != null;  JobID nextJobId=proto.getNewJobID();  assert nextJobId != null;  assert nextJobId.getJtIdentifier() != null;  assert !F.eq(jobId,nextJobId);}  }
class C{  public ShippingOrderPosition(ShippingOrder ord,Integer posNo,UnitType qtyOrd,Product prod){  super(ord,posNo);  Assert.notNull(qtyOrd);  Assert.notNull(prod);  this.qtyOrdered=qtyOrd;  this.product=prod;  this.startMode=ord.getStartMode();}  }
class C{  private int convertToInt(double doubleValue,String name){  int number=(int)doubleValue;  if (number != doubleValue) {    throw new SettingsError("Expected integer value for setting '" + name + "' "+ " got '"+ doubleValue+ "'");  }  return number;}  }
class C{  public BooleanCondition should(Condition... conditions){  should=add(should,conditions);  return this;}  }
class C{  protected JType parseParameterizedType(String type){  return new TypeSignatureParser(this,type).nextType();}  }
class C{  public int totalInstances(){  int total=0;  for (int i=0; i < confusion.length; i++) {    for (int j=0; j < confusion[i].length; j++) {      total+=confusion[i][j];    }  }  return total;}  }
class C{  @LargeTest public void testProperties3GPWithoutVideoMediaItem() throws Exception {  final String audioFilename=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  boolean flagForException=false;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  try {    new MediaVideoItem(mVideoEditor,"m1",audioFilename,renderingMode);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Exception in Creaing Media Video item object without video",flagForException);}  }
class C{  public Boolean addEmployee(Integer departmentId,Employee body) throws ApiException {  Object postBody=body;  if (departmentId == null) {    throw new ApiException(400,"Missing the required parameter 'departmentId' when calling addEmployee");  }  if (body == null) {    throw new ApiException(400,"Missing the required parameter 'body' when calling addEmployee");  }  String path="/hr/department/{departmentId}/employee/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "departmentId" + "\\}",apiClient.escapeString(departmentId.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,String> formParams=new HashMap<String,String>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  if (contentType.startsWith("multipart/form-data")) {    boolean hasFields=false;    FormDataMultiPart mp=new FormDataMultiPart();    if (hasFields)     postBody=mp;  } else {  }  try {    String[] authNames=new String[]{};    String response=apiClient.invokeAPI(path,"POST",queryParams,postBody,headerParams,formParams,accept,contentType,authNames);    if (response != null) {      return (Boolean)apiClient.deserialize(response,"",Boolean.class);    } else {      return null;    }  } catch (  ApiException ex) {    throw ex;  }}  }
class C{  @Override protected void paintComponent(Graphics g){  SeaGlassPainter painter=(SeaGlassPainter)UIManager.get("TableHeader:\"TableHeader.renderer\"[Enabled].backgroundPainter");  if (painter != null) {    Graphics2D g2d=(Graphics2D)g;    painter.paint(g2d,this,getWidth() + 1,getHeight());  }}  }
class C{  private static boolean intersect(Set<String> set1,Set<String> set2){  for (  String var : set1) {    if (set2.contains(var)) {      return true;    }  }  return false;}  }
class C{  public void testContainsAgainstOriginal(){  int iters=atLeast(100);  for (int i=0; i < iters; i++) {    Polygon polygon=nextPolygon();    while (polygon.getHoles().length > 0) {      polygon=nextPolygon();    }    Polygon2D impl=Polygon2D.create(polygon);    for (int j=0; j < 1000; j++) {      double point[]=GeoTestUtil.nextPointNear(polygon);      double latitude=point[0];      double longitude=point[1];      boolean expected=GeoTestUtil.containsSlowly(polygon,latitude,longitude);      assertEquals(expected,impl.contains(latitude,longitude));    }  }}  }
class C{  public void removeAclRole(String scope,String email,String resourceId) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (scope == null || email == null || resourceId == null) {    throw new DocumentListException("null passed in for required parameters");  }  URL url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + "/"+ resourceId+ URL_ACL+ "/"+ scope+ "%3A"+ email);  service.delete(url);}  }
class C{  public boolean isError(){  return m_error;}  }
class C{  private synchronized void closeContextMenu(){  if (mContextMenu != null) {    mContextMenu.close();    dismissContextMenu();  }}  }
class C{  public ConnectorConfiguration(ConnectorConfiguration cfg){  assert cfg != null;  msgInterceptor=cfg.getMessageInterceptor();  threadPoolSize=cfg.getThreadPoolSize();  idleTimeout=cfg.getIdleTimeout();  jettyPath=cfg.getJettyPath();  portRange=cfg.getPortRange();  secretKey=cfg.getSecretKey();  directBuf=cfg.isDirectBuffer();  host=cfg.getHost();  noDelay=cfg.isNoDelay();  port=cfg.getPort();  rcvBufSize=cfg.getReceiveBufferSize();  selectorCnt=cfg.getSelectorCount();  sndBufSize=cfg.getSendBufferSize();  sndQueueLimit=cfg.getSendQueueLimit();  sslClientAuth=cfg.isSslClientAuth();  sslCtxFactory=cfg.getSslContextFactory();  sslEnabled=cfg.isSslEnabled();  sslFactory=cfg.getSslFactory();  idleQryCurTimeout=cfg.getIdleQueryCursorTimeout();  idleQryCurCheckFreq=cfg.getIdleQueryCursorCheckFrequency();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC5ParameterSpec)) {    return false;  }  RC5ParameterSpec ps=(RC5ParameterSpec)obj;  return (version == ps.version) && (rounds == ps.rounds) && (wordSize == ps.wordSize)&& (Arrays.equals(iv,ps.iv));}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataappenddatanomodificationallowederr.class,args);}  }
class C{  public boolean isTagCountDefined(int tagId){  int info=getTagInfo().get(tagId);  if (info == 0) {    return false;  }  return getComponentCountFromInfo(info) != ExifTag.SIZE_UNDEFINED;}  }
class C{  public static long now(){  return (new Date()).getTime();}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public int resolveRootTagFromReactTag(int reactTag){  return mUIImplementation.resolveRootTagFromReactTag(reactTag);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (documentHandler != null)   documentHandler.processingInstruction(target,data);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.927 -0500",hash_original_method="9CA1703B701EBBFA9C513149EAF6F304",hash_generated_method="6E4181A1A4AC2C5E6956D940DF347FA6") private void beforeValue() throws JSONException {  if (stack.isEmpty()) {    return;  }  Scope context=peek();  if (context == Scope.EMPTY_ARRAY) {    replaceTop(Scope.NONEMPTY_ARRAY);    newline();  } else   if (context == Scope.NONEMPTY_ARRAY) {    out.append(',');    newline();  } else   if (context == Scope.DANGLING_KEY) {    out.append(indent == null ? ":" : ": ");    replaceTop(Scope.NONEMPTY_OBJECT);  } else   if (context != Scope.NULL) {    throw new JSONException("Nesting problem");  }}  }
class C{  public String toJSON(){  JsonObject gocData=new JsonObject();  gocData.addProperty(SM_ACTIVE__C_FIELD,smActivec);  gocData.addProperty(SM_CLASSNAME__C_FIELD,smClassNamec);  if (smClearedAtc > 0) {    gocData.addProperty(SM_CLEAREDAT__C_FIELD,smClearedAtc);  }  if (smCreatedAtc > 0) {    gocData.addProperty(SM_CREATEDAT__C_FIELD,smCreatedAtc);  }  gocData.addProperty(SM_ELEMENTNAME__C_FIELD,smElementNamec);  gocData.addProperty(SM_EVENTNAME__C_FIELD,smEventNamec);  gocData.addProperty(SM_EVENTTEXT__C_FIELD,smEventTextc);  gocData.addProperty(SM_LASTNOTIFIEDAT__C_FIELD,smLastNotifiedAtc);  gocData.addProperty(SM_SEVERITY__C_FIELD,smSeverityc);  gocData.addProperty(SM_SOURCEDOMAIN__C_FIELD,smSourceDomainc);  return gocData.toString();}  }
class C{  private void resetKeepTypeInfo(){  assets=null;  signatureChecksum=null;  state=Empty;  workflow=0;  if (bytes == null) {    bytes=new ByteList();  } else {    bytes.clear();  }  if (metadata == null) {    metadata=new HashSet<MetaDataNode>();  } else {    metadata.clear();  }  swfMetaData=null;  iconFile=null;  loaderClass=null;  if (extraClasses == null) {    extraClasses=new HashSet<String>();  } else {    extraClasses.clear();  }  generatedSources=null;  auxGenerateInfo=null;  accessibilityClasses=null;  if (remoteClassAliases == null) {    remoteClassAliases=new HashMap<String,String>(1);  } else {    remoteClassAliases.clear();  }  if (licensedClassReqs == null) {    licensedClassReqs=new HashMap<String,String>(1);  } else {    licensedClassReqs.clear();  }  if (effectTriggers == null) {    effectTriggers=new HashMap<String,String>(1);  } else {    effectTriggers.clear();  }  mixins=new HashSet<String>(2);  if (resourceBundles == null) {    resourceBundles=new HashSet<String>(1);    resourceBundleHistory=new HashSet<String>(1);  } else {    resourceBundles.clear();    resourceBundleHistory.clear();  }  if (topLevelDefinitions == null) {    topLevelDefinitions=new QNameList(source.isSourcePathOwner() || source.isSourceListOwner() ? 1 : 8);  } else {    topLevelDefinitions.clear();  }  if (inheritance == null) {    inheritance=new HashSet<Name>(2);    types=new HashSet<Name>(8);    expressions=new HashSet<Name>(8);    namespaces=new HashSet<Name>(2);    importPackageStatements=new HashSet<String>(16);    importDefinitionStatements=new QNameSet(16);    inheritanceHistory=new MultiNameMap(2);    typeHistory=new MultiNameMap(8);    expressionHistory=new MultiNameMap(8);    namespaceHistory=new MultiNameMap(2);  } else {    inheritance.clear();    types.clear();    expressions.clear();    namespaces.clear();    importPackageStatements.clear();    importDefinitionStatements.clear();    inheritanceHistory.clear();    typeHistory.clear();    expressionHistory.clear();    namespaceHistory.clear();  }  checkBits=0;}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  protected short downsample(short[] data,int start,int end,int size){  short sum=0;  for (int i=start; i < end; i++) {    sum+=data[i];  }  return sum;}  }
class C{  private void handleActivityNotif(byte[] value){  if (!isOperationRunning()) {    LOG.error("ignoring activity data notification because operation is not running. Data length: " + value.length);    getSupport().logMessageContent(value);    return;  }  if (value.length == activityMetadataLength) {    handleActivityMetadata(value);  } else {    bufferActivityData(value);  }  LOG.debug("activity data: length: " + value.length + ", remaining bytes: "+ activityStruct.activityDataRemainingBytes);  GB.updateTransferNotification(getContext().getString(R.string.busy_task_fetch_activity_data),true,(int)(((float)(activityStruct.activityDataUntilNextHeader - activityStruct.activityDataRemainingBytes)) / activityStruct.activityDataUntilNextHeader * 100),getContext());  if (activityStruct.isBlockFinished()) {    sendAckDataTransfer(activityStruct.activityDataTimestampToAck,activityStruct.activityDataUntilNextHeader);    GB.updateTransferNotification("",false,100,getContext());  }}  }
class C{  private void loadProperties(){  String property=System.getProperty("carbon.properties.filepath");  if (null == property) {    property=CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH;  }  File file=new File(property);  LOGGER.info("Property file path: " + file.getAbsolutePath());  FileInputStream fis=null;  try {    if (file.exists()) {      fis=new FileInputStream(file);      carbonProperties.load(fis);    }  } catch (  FileNotFoundException e) {    LOGGER.error("The file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH + " does not exist");  }catch (  IOException e) {    LOGGER.error("Error while reading the file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH);  } finally {    if (null != fis) {      try {        fis.close();      } catch (      IOException e) {        LOGGER.error("Error while closing the file stream for file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH);      }    }  }  print();}  }
class C{  public BlobInputStream(RowCursor cursor,ColumnBlob column,int blobOffset,int blobLength,byte[] pageBuffer){  _cursor=cursor;  _column=column;  _offset=blobOffset;  _tail=blobOffset + blobLength;  _pageBuffer=pageBuffer;}  }
class C{  public static String join(float[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  float next : self) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(next);  }  return buffer.toString();}  }
class C{  private boolean processSingleQuery(){  if (!this.urlstack.isEmpty()) {    return true;  }  SolrDocumentList docList=null;  SolrConnector solrConnector=sb.index.fulltext().getDefaultConnector();  if (!solrConnector.isClosed()) {    try {      docList=solrConnector.getDocumentListByQuery(this.includefailed ? currentQuery : currentQuery + " AND (" + CollectionSchema.httpstatus_i.name()+ ":200)",this.solrSortBy,this.chunkstart,this.chunksize,CollectionSchema.sku.getSolrFieldName());      this.urlsfound=docList.getNumFound();    } catch (    Throwable e) {      this.urlsfound=0;    }  } else {    this.urlsfound=0;  }  if (docList != null) {    for (    SolrDocument doc : docList) {      try {        this.urlstack.add(new DigestURL((String)doc.getFieldValue(CollectionSchema.sku.getSolrFieldName())));      } catch (      MalformedURLException ex) {        try {          solrConnector.deleteById((String)doc.getFieldValue(CollectionSchema.id.getSolrFieldName()));          ConcurrentLog.severe(THREAD_NAME,"deleted index document with invalid url " + (String)doc.getFieldValue(CollectionSchema.sku.getSolrFieldName()));        } catch (        IOException ex1) {          ConcurrentLog.severe(THREAD_NAME,ex1.getMessage());        }      }    }    this.chunkstart=this.chunkstart + this.chunksize;  }  if (this.urlsfound <= this.chunkstart) {    this.chunkstart=0;    return false;  }  return true;}  }
class C{  public SolidMap(Map<K,V> map){  this.map=Collections.unmodifiableMap(new LinkedHashMap<>(map));}  }
class C{  @CanIgnoreReturnValue public static <T>T readLines(URL url,Charset charset,LineProcessor<T> callback) throws IOException {  return asCharSource(url,charset).readLines(callback);}  }
class C{  @Override public boolean isTableLoaded(){  return _tableManager.getTable(_tableName) != null;}  }
class C{  private static SegmentInfos readSegmentInfos(String segmentsFileName,Directory directory) throws IOException {  return SegmentInfos.readCommit(directory,segmentsFileName);}  }
class C{  public int hashCode(){  return fImage.hashCode();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected double unwrapKey(Object key){  return ((Double)key).doubleValue();}  }
class C{  @Nullable public static PyExpression peelArgument(PyExpression expr){  while (expr instanceof PyParenthesizedExpression)   expr=((PyParenthesizedExpression)expr).getContainedExpression();  if (expr instanceof PyKeywordArgument)   expr=((PyKeywordArgument)expr).getValueExpression();  return expr;}  }
class C{  private int parseEncryptedKeyBlob(final byte[] b,final int off) throws ParseException {  return cipherKeyBlobs_.get(currKeyBlobIndex_).deserialize(b,off);}  }
class C{  public static SharedPreferenceUtils initWith(SharedPreferences sharedPreferences){  if (sharedPreferenceUtils == null) {    sharedPreferenceUtils=new SharedPreferenceUtils();  }  sharedPreferenceUtils.sharedPreferences=sharedPreferences;  return sharedPreferenceUtils;}  }
class C{  @Override public ActivityObject copy(){  return new ActivityObject(this);}  }
class C{  private void saveContext(PseudoOp callOp,StackFrame frame){  frame.savePc(pc);  frame.saveMethod(code);  if (callOp.hasResult()) {    frame.setResultSlot(callOp.getResult());  } else {    frame.clearResultSlot();  }}  }
class C{  public boolean isInstance(java.lang.Object obj){  return false;}  }
class C{  public DateMapperBuilder pattern(String pattern){  this.pattern=pattern;  return this;}  }
class C{  public final void read(InputStream in) throws IOException {  mReason=null;  try (final BufferedReader reader=new BufferedReader(new InputStreamReader(in))){    String line;    int lineNumber=0;    while ((line=reader.readLine()) != null) {      lineNumber++;      if (lineNumber == 1) {        if (!line.contains("RTG taxonomy")) {          throw new IOException("No version information on first line of file.");        }        final String[] parts=line.split("\\s");        if (!VERSION.equals(parts[parts.length - 1])) {          throw new IOException("Expecting version " + VERSION + " but saw "+ parts[parts.length - 1]);        }        continue;      }      if (line.length() == 0 || line.startsWith("#")) {        continue;      }      final String[] parts=line.split("\t");      if (parts.length != 4) {        throw new IOException("Malformed taxonomy file line " + lineNumber + ": "+ line);      }      try {        final int taxId=Integer.parseInt(parts[0]);        final int parentId=Integer.parseInt(parts[1]);        final String rank=new String(parts[2].toCharArray());        final String name=new String(parts[3].toCharArray());        try {          addNode(taxId,parentId,name,rank);        } catch (        final IllegalArgumentException e) {          throw new IOException(e.getMessage());        }      } catch (      final NumberFormatException e) {        throw new IOException("Malformed taxonomy file line " + lineNumber + ": "+ line);      }    }  } }  }
class C{  public boolean isMandatoryShipping(){  return MANDATORYTYPE_WhenShipping.equals(getMandatoryType());}  }
class C{  public static void startSessionConfig(){synchronized (globalLock) {    enabled=false;    for (int i=0; i < methodCount; i++) {      globalMethods[i]=null;    }    methodCount=0;    sessionId=(sessionId + 1) & 0xff;    Log.print(0,"Starting new session: sessionId=" + sessionId);  }}  }
class C{  public boolean forEachEntry(TObjectLongProcedure<K> procedure){  K[] keys=(K[])_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  private Set unionIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  Set set=new HashSet();  if (Arrays.areEqual(ipWithSubmask1,ipWithSubmask2)) {    set.add(ipWithSubmask1);  } else {    set.add(ipWithSubmask1);    set.add(ipWithSubmask2);  }  return set;}  }
class C{  public String save() throws SaaSApplicationException {  VOServiceDetails voServiceDetails=getSelectedService();  if (voServiceDetails == null) {    logger.logDebug("save() selectedService is null and " + "hence returning without saving");    dirty=false;    if (getCurrentPMPage() == PRICEMODEL_FOR_SUBSCRIPTION) {      throw new ObjectNotFoundException(ClassEnum.SUBSCRIPTION,model.getSubscriptionId());    } else {      throw new ObjectNotFoundException(ClassEnum.SERVICE,storedServiceId);    }  } else {    if (voServiceDetails.getTechnicalService().isExternalBilling()) {      return saveExternalPriceModel(voServiceDetails,getPriceModel());    } else {      return saveNativePriceModel(voServiceDetails,getPriceModel());    }  }}  }
class C{  public RoundedTransformationBuilder cornerRadiusTopLeftDp(float radiusDp){  mCornerRadius[0]=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,radiusDp,mDisplayMetrics);  return this;}  }
class C{  public void log(String message){  Log.d(logTag,message);}  }
class C{  public void addRestriction(String ColumnName,String Operator,Object Code,String InfoName,String InfoDisplay,boolean andCondition,int depth){  Restriction r=new Restriction(ColumnName,Operator,Code,InfoName,InfoDisplay,andCondition,depth);  m_list.add(r);}  }
class C{  int size(){  return Integer.bitCount(set);}  }
class C{  public static boolean canWrite(String path){  return new File(path).canWrite();}  }
class C{  final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  final public SyntaxTreeNode Lambda() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Lambda");  t=jj_consume_token(LAMBDA);  addHeir(new SyntaxTreeNode(mn,t));  expecting="Identifier";  tn=Identifier();  addHeir(tn);  expecting="`,' or `:'";  label_48:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[128]=jj_gen;break label_48;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=Identifier();addHeir(tn);expecting="`,' or `:'";}t=jj_consume_token(COLON);addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Lambda,sn);}throw new Error("Missing return statement in function");}  }
class C{  public Sentence asSentence(){  return Sentence.newConjunction(sentences);}  }
class C{  private void processAnsiCommand_F(){  int linesToMove=getAnsiParameter(0);}  }
class C{  public boolean isDefaultExport(){  return defaultExport;}  }
class C{  public void removePointerDraggedListener(ActionListener l){  if (pointerDraggedListeners != null) {    pointerDraggedListeners.removeListener(l);  }}  }
class C{  public void shutdownWithError(Throwable t){  this.throwable=t;  shutdown();}  }
class C{  public UpdateRequest add(final Collection<SolrInputDocument> docs){  if (documents == null) {    documents=new LinkedHashMap<>();  }  for (  SolrInputDocument doc : docs) {    Objects.requireNonNull(doc,"Cannot add a null SolrInputDocument");    documents.put(doc,null);  }  return this;}  }
class C{  protected VariableDeclarationContainerImpl(){  super();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public String toString(){  return m_Methods.toString();}  }
class C{  @Override public boolean printingEnabled(OptOptions options,boolean before){  return false;}  }
class C{  public boolean isDashedLineEnabled(){  return mDashPathEffect == null ? false : true;}  }
class C{  public PreparedPolygonPredicate(PreparedPolygon prepPoly){  this.prepPoly=prepPoly;  targetPointLocator=prepPoly.getPointLocator();}  }
class C{  public boolean containsAll(double[] array){  for (int i=array.length; i-- > 0; ) {    if (!contains(array[i])) {      return false;    }  }  return true;}  }
class C{  public void dispose(){  this.bytes=null;}  }
class C{  synchronized boolean isLeaseHeld(){  return this.leaseId > -1;}  }
class C{  public String toString(){  return Short.toString(getValue());}  }
class C{  private QueuedRequestSender(Builder builder){  this.messageStore=builder.messageStore;  this.clientRegistry=builder.clientRegistry;  this.observationRegistry=builder.observationRegistry;  this.delegateSender=builder.delegateSender;  this.clientStatusTracker=new ClientStatusTracker();  this.queueModeClientRegistryListener=new QueueModeClientRegistryListener();  clientRegistry.addListener(queueModeClientRegistryListener);  this.queueModeObservationRegistryListener=new QueueModeObservationRegistryListener();  observationRegistry.addListener(queueModeObservationRegistryListener);  delegateSender.addResponseListener(createResponseListener());}  }
class C{  protected void clearCrFerr(){  cr=cr & ~CR_FERR_MASK;}  }
class C{  public int read() throws IOException {  ensureOpen();  if (pos < buf.length) {    return buf[pos++] & 0xff;  }  return super.read();}  }
class C{  public boolean addItemUnique(Playlist p){  if (!mPlaylists.contains(p)) {    mPlaylists.add(p);    return true;  } else {    return false;  }}  }
class C{  public void addApplyActionListener(ActionListener al){  applyButton.addActionListener(al);}  }
class C{  @Override protected void onStop(){  super.onStop();  LOG.d(TAG,"Stopped the activity.");  if (this.appView == null) {    return;  }  this.appView.handleStop();}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  public JavaModelException(IJavaModelStatus status){  super(status);}  }
class C{  public ElementCreator moveElement(ElementKey<?,?> childKey,Path path){  Preconditions.checkArgument(path.selectsElement(),"Path must refer to an element.");  ElementCreatorImpl dest=replaceElement(childKey);  ElementCreatorImpl source=getElementCreator(path);  dest.setSource(path,source.getTransformKey());  source.moved();  return dest;}  }
class C{  private static void readRefactoringDescriptorProxies(final IFileStore store,final String project,final Collection collection,final long start,final long end,final IProgressMonitor monitor,final String task) throws CoreException {  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_retrieving_history,22);    final IFileInfo info=store.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,2,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));    if (!info.isDirectory() && info.exists() && store.getName().equalsIgnoreCase(RefactoringHistoryService.NAME_INDEX_FILE)) {      InputStream stream=null;      try {        stream=store.openInputStream(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));        final RefactoringDescriptorProxy[] proxies=readRefactoringDescriptorProxies(stream,project,start,end);        for (int index=0; index < proxies.length; index++)         collection.add(proxies[index]);        monitor.worked(1);      } catch (      IOException exception) {        throw createCoreException(exception);      } finally {        monitor.worked(1);        if (stream != null) {          try {            stream.close();          } catch (          IOException exception) {          }        }        monitor.worked(1);      }    } else     monitor.worked(4);    if (monitor.isCanceled())     throw new OperationCanceledException();    final IFileStore[] stores=store.childStores(EFS.NONE,new SubProgressMonitor(monitor,2,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));    final IProgressMonitor subMonitor=new SubProgressMonitor(monitor,12);    try {      subMonitor.beginTask(task,stores.length);      for (int index=0; index < stores.length; index++)       readRefactoringDescriptorProxies(stores[index],project,collection,start,end,new SubProgressMonitor(subMonitor,1),task);    }  finally {      subMonitor.done();    }  }  finally {    monitor.done();  }}  }
class C{  public void revertToSoftCommitMode() throws IOException {  if (!hardWriteMode)   throw new IllegalStateException("Error, already in soft update");  hardWriteMode=false;  File f=getRollBackFile();  rollBackOut=new BufferedOutputStream(rollBackFileOut=new FileOutputStream(f,true));}  }
class C{  private void initParameterRemovalLists(){  parameter_to_remove_for_all_request=new ArrayList<>();  parameter_to_remove_after_initial_request=new ArrayList<>();  parameter_to_remove_for_all_request.add(EXPAND_PARAM);  parameter_to_remove_after_initial_request.addAll(parameter_to_remove_for_all_request);  parameter_to_remove_after_initial_request.add("limit");  parameter_to_remove_after_initial_request.add("offset");}  }
class C{  public void testOneField() throws Exception {  Directory dir=newDirectory();  Codec codec=getCodec();  SegmentInfo segmentInfo=newSegmentInfo(dir,"_123");  FieldInfos.Builder builder=new FieldInfos.Builder();  FieldInfo fi=builder.getOrAdd("field");  fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());  addAttributes(fi);  FieldInfos infos=builder.finish();  codec.fieldInfosFormat().write(dir,segmentInfo,"",infos,IOContext.DEFAULT);  FieldInfos infos2=codec.fieldInfosFormat().read(dir,segmentInfo,"",IOContext.DEFAULT);  assertEquals(1,infos2.size());  assertNotNull(infos2.fieldInfo("field"));  assertTrue(infos2.fieldInfo("field").getIndexOptions() != IndexOptions.NONE);  assertFalse(infos2.fieldInfo("field").getDocValuesType() != DocValuesType.NONE);  assertFalse(infos2.fieldInfo("field").omitsNorms());  assertFalse(infos2.fieldInfo("field").hasPayloads());  assertFalse(infos2.fieldInfo("field").hasVectors());  dir.close();}  }
class C{  public String paramString(){  String typeStr;  Rectangle b=(source != null ? ((Component)source).getBounds() : null);switch (id) {case COMPONENT_SHOWN:    typeStr="COMPONENT_SHOWN";  break;case COMPONENT_HIDDEN:typeStr="COMPONENT_HIDDEN";break;case COMPONENT_MOVED:typeStr="COMPONENT_MOVED (" + b.x + ","+ b.y+ " "+ b.width+ "x"+ b.height+ ")";break;case COMPONENT_RESIZED:typeStr="COMPONENT_RESIZED (" + b.x + ","+ b.y+ " "+ b.width+ "x"+ b.height+ ")";break;default :typeStr="unknown type";}return typeStr;}  }
class C{  public static String switchCase(String source){  char[] sourceArray=source.toCharArray();  StringBuffer result=new StringBuffer();  for (int i=0; i < sourceArray.length; i++) {    result.append(StringUtils.switchCase(sourceArray[i]));  }  return result.toString();}  }
class C{  public void testUsingProxySelector() throws Exception {  MockServer server=new MockServer("server");  MockServer proxy=new MockServer("proxy");  URL url=new URL("http://localhost:" + server.port());  ProxySelector defPS=ProxySelector.getDefault();  ProxySelector.setDefault(new TestProxySelector(server.port(),proxy.port()));  try {    HttpURLConnection connection=(HttpURLConnection)url.openConnection();    connection.setConnectTimeout(2000);    connection.setReadTimeout(2000);    server.start();synchronized (bound) {      if (!server.started)       bound.wait(5000);    }    proxy.start();synchronized (bound) {      if (!proxy.started)       bound.wait(5000);    }    connection.connect();    server.join();    proxy.join();    assertTrue("Connection does not use proxy",connection.usingProxy());    assertTrue("Proxy server was not used",proxy.accepted);    connection.disconnect();    assertTrue("usingProxy broken after disconnect",connection.usingProxy());  }  finally {    ProxySelector.setDefault(defPS);  }}  }
class C{  protected double calculateLOSslope(LatLonPoint cord,double arc_dist){  DTEDFrameCache frameCache=layer.frameCache;  if (frameCache == null) {    return 0;  }  int xyheight=frameCache.getElevation(cord.getLatitude(),cord.getLongitude());  double ret=0;  double P=Math.sin(arc_dist) * (xyheight + Planet.wgs84_earthEquatorialRadiusMeters);  double xPrime=Math.cos(arc_dist) * (xyheight + Planet.wgs84_earthEquatorialRadiusMeters);  double bottom;  double cutoff=LOScenterHeight + Planet.wgs84_earthEquatorialRadiusMeters;  bottom=cutoff - xPrime;  ret=MoreMath.HALF_PI_D - Math.atan(bottom / P);  return ret;}  }
class C{  public String toString(){  if (available) {    return host + "/" + name+ " [numDocs="+ numDocs+ " version="+ version+ "]";  } else {    return host + "/" + name+ " [Unavailable]";  }}  }
class C{  public boolean isAddressedModePossible(){  return false;}  }
class C{  private void obtainDividerColor(@StyleRes final int themeResourceId){  TypedArray typedArray=getContext().getTheme().obtainStyledAttributes(themeResourceId,new int[]{R.attr.bottomSheetDividerColor});  int color=typedArray.getColor(0,-1);  if (color != -1) {    setDividerColor(color);  }}  }
class C{  protected void replaceBorderIfNecessary(){  Border original=textField.getBorder();  if (!(original instanceof BuddyLayoutAndBorder)) {    borderDelegate=original;    textField.setBorder(this);  }}  }
class C{  @Override public DriverTask discoverStoragePorts(StorageSystem storageSystem,List<StoragePort> storagePorts){  _log.info("3PARDriver: discoverStoragePorts information for storage system {}, nativeId {} - start",storageSystem.getIpAddress(),storageSystem.getNativeId());  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_DISCOVER_STORAGE_PORTS);  try {    hp3parUtil.discoverStoragePortsById(storageSystem.getNativeId(),storagePorts,this.driverRegistry);    storageSystem.setAccessStatus(AccessStatus.READ_WRITE);    task.setStatus(DriverTask.TaskStatus.READY);    _log.info("3PARDriver: discoverStoragePorts information for storage system {}, nativeId {} - end",storageSystem.getIpAddress(),storageSystem.getNativeId());  } catch (  Exception e) {    String msg=String.format("3PARDriver: Unable to discover the storage port information for storage system %s native id %s; Error: %s.\n",storageSystem.getSystemName(),storageSystem.getNativeId(),e);    _log.error(msg);    _log.error(CompleteError.getStackTrace(e));    task.setMessage(msg);    task.setStatus(DriverTask.TaskStatus.FAILED);    e.printStackTrace();  }  return task;}  }
class C{  private static int[] calculateMultipartSize(long size) throws InvalidArgumentException {  if (size > MAX_OBJECT_SIZE) {    throw new InvalidArgumentException("size " + size + " is greater than allowed size 5TiB");  }  double partSize=Math.ceil((double)size / MAX_MULTIPART_COUNT);  partSize=Math.ceil(partSize / MIN_MULTIPART_SIZE) * MIN_MULTIPART_SIZE;  double partCount=Math.ceil(size / partSize);  double lastPartSize=partSize - (partSize * partCount - size);  if (lastPartSize == 0.0) {    lastPartSize=partSize;  }  return new int[]{(int)partSize,(int)partCount,(int)lastPartSize};}  }
class C{  private int calculatePassedSeconds(){  return currentProgress;}  }
class C{  public UTMPoint(LatLonPoint llpoint){  this(llpoint,Ellipsoid.WGS_84);}  }
class C{  public long forceGetValueAsLong(long defaultValue){  long[] l=getValueAsLongs();  if (l != null && l.length >= 1) {    return l[0];  }  byte[] b=getValueAsBytes();  if (b != null && b.length >= 1) {    return b[0];  }  Rational[] r=getValueAsRationals();  if (r != null && r.length >= 1 && r[0].getDenominator() != 0) {    return (long)r[0].toDouble();  }  return defaultValue;}  }
class C{  public static boolean isURLValid(String url){  return URL_VALIDATOR.isValid(url);}  }
class C{  public int bufferId(){  return impl;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.895 -0500",hash_original_method="04277D36A4D54D9CF9D1FF565E2D8229",hash_generated_method="FB26E8F3B483A05A2AB71E2679FC20F2") public JSONStringer endObject() throws JSONException {  return close(Scope.EMPTY_OBJECT,Scope.NONEMPTY_OBJECT,"}");}  }
class C{  public MaxElapsedTime(long maxTime){  super();  this.maxTime=maxTime;}  }
class C{  public MalformedChunkCodingException(final String message){  super(message);}  }
class C{  public String id(){  return id;}  }
class C{  public String[] toPath(){  return Arrays.copyOf(resourcePath,resourcePath.length);}  }
class C{  private boolean landedCost(MAcctSchema as,Fact fact,DocLine line,boolean dr){  int C_InvoiceLine_ID=line.get_ID();  MLandedCostAllocation[] lcas=MLandedCostAllocation.getOfInvoiceLine(getCtx(),C_InvoiceLine_ID,getTrxName());  if (lcas.length == 0)   return false;  double totalBase=0;  for (int i=0; i < lcas.length; i++)   totalBase+=lcas[i].getBase().doubleValue();  MInvoiceLine il=new MInvoiceLine(getCtx(),C_InvoiceLine_ID,getTrxName());  for (int i=0; i < lcas.length; i++) {    MLandedCostAllocation lca=lcas[i];    if (lca.getBase().signum() == 0)     continue;    double percent=lca.getBase().doubleValue() / totalBase;    String desc=il.getDescription();    if (desc == null)     desc=percent + "%"; else     desc+=" - " + percent + "%";    if (line.getDescription() != null)     desc+=" - " + line.getDescription();    ProductCost pc=new ProductCost(Env.getCtx(),lca.getM_Product_ID(),lca.getM_AttributeSetInstance_ID(),getTrxName());    BigDecimal drAmt=null;    BigDecimal crAmt=null;    BigDecimal amt=Env.ZERO;    if (dr)     drAmt=lca.getAmt(); else     crAmt=lca.getAmt();    FactLine fl=null;    MCostType ct=MCostType.get(as,il.getM_Product_ID(),0);    if (MCostType.COSTINGMETHOD_AverageInvoice.equals(ct.getCostingMethod())) {{        amt=MCostDetail.getByDocLineLandedCost(lca,as.getC_AcctSchema_ID(),ct.getM_CostType_ID());        if (dr)         drAmt=amt; else         crAmt=amt;      }      if (amt.compareTo(Env.ZERO) != 0) {        fl=fact.createLine(line,pc.getAccount(ProductCost.ACCTTYPE_P_Asset,as),as.getC_Currency_ID(),drAmt,crAmt);        fl.setDescription(desc);        fl.setM_Product_ID(lca.getM_Product_ID());      }      if (dr)       drAmt=lca.getAmt().subtract(amt); else       crAmt=lca.getAmt().subtract(amt);      if (drAmt.compareTo(Env.ZERO) != 0 || crAmt.compareTo(Env.ZERO) != 0) {        fl=fact.createLine(line,pc.getAccount(ProductCost.ACCTTYPE_P_CostAdjustment,as),as.getC_Currency_ID(),drAmt,crAmt);        fl.setDescription(desc);        fl.setM_Product_ID(lca.getM_Product_ID());      }    } else {      fl=fact.createLine(line,pc.getAccount(ProductCost.ACCTTYPE_P_CostAdjustment,as),getC_Currency_ID(),drAmt,crAmt);    }    fl.setDescription(desc);    fl.setM_Product_ID(lca.getM_Product_ID());    BigDecimal allocationAmt=lca.getAmt();    if (getC_Currency_ID() != as.getC_Currency_ID())     allocationAmt=MConversionRate.convert(getCtx(),allocationAmt,getC_Currency_ID(),as.getC_Currency_ID(),getDateAcct(),getC_ConversionType_ID(),getAD_Client_ID(),getAD_Org_ID());    if (allocationAmt.scale() > as.getCostingPrecision())     allocationAmt=allocationAmt.setScale(as.getCostingPrecision(),BigDecimal.ROUND_HALF_UP);    if (!dr)     allocationAmt=allocationAmt.negate();    MCostDetail.createInvoice(as,lca.getAD_Org_ID(),lca.getM_Product_ID(),lca.getM_AttributeSetInstance_ID(),C_InvoiceLine_ID,lca.getM_CostElement_ID(),allocationAmt,lca.getQty(),desc,getTrxName());  }  log.config("Created #" + lcas.length);  return true;}  }
class C{  public ImagingOpException(String s){  super(s);}  }
class C{  public void testGetEjbModules() throws Exception {  String xml="<application>" + "  <module>" + "    <ejb>myFirstEjb.jar</ejb>"+ "  </module>"+ "  <module>"+ "    <ejb>mySecondEjb.jar</ejb>"+ "  </module>"+ "</application>";  ApplicationXml applicationXml=ApplicationXmlIo.parseApplicationXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),null);  List<String> ejbModules=applicationXml.getEjbModules();  assertEquals(2,ejbModules.size());  assertEquals("myFirstEjb.jar",ejbModules.get(0));  assertEquals("mySecondEjb.jar",ejbModules.get(1));}  }
class C{  public static GridKernalContext context(Ignite ignite){  assert ignite != null;  return ((IgniteKernal)ignite).context();}  }
class C{  public Preamble build(){  return new Preamble(preambleLongs,version,familyId,logConfigK,flags,seedHash);}  }
class C{  protected boolean drawTopBorder(Component c,Graphics g,int x,int y,int width,int height){  if (super.drawTopBorder(c,g,x,y,width,height) && frame.isResizable()) {    g.setColor(getFrameShadow());    g.drawLine(CORNER_SIZE - 1,y + 1,CORNER_SIZE - 1,y + 4);    g.drawLine(width - CORNER_SIZE - 1,y + 1,width - CORNER_SIZE - 1,y + 4);    g.setColor(getFrameHighlight());    g.drawLine(CORNER_SIZE,y,CORNER_SIZE,y + 4);    g.drawLine(width - CORNER_SIZE,y,width - CORNER_SIZE,y + 4);    return true;  }  return false;}  }
class C{  public void runCommand(String[] args) throws Exception {  if (args.length == 0) {    this.showDocumentation();    return;  }  Object[] ss=new String[args.length - 1];  System.arraycopy(args,1,ss,0,args.length - 1);  boolean foundMethod=false;  boolean incorrectParams=false;  Method[] mList=type.getMethods();  for (  Method m : mList) {    if (Modifier.isStatic(m.getModifiers())) {      if (m.getName().equals(args[0])) {        foundMethod=true;        if (ss.length != m.getParameterTypes().length) {          incorrectParams=true;        } else {          incorrectParams=false;          Object o=m.invoke(null,ss);          if (o != null) {            System.out.println(o.toString());          }        }      }      if (foundMethod && !incorrectParams)       break;    }  }  if (!foundMethod) {    System.out.println("Unable to find " + args[0]);    this.showDocumentation();    String nearest=getNearestCommand(mList,args[0]);    System.out.println("Did you mean: " + nearest);  } else   if (incorrectParams) {    System.out.println("Invalid usage of " + args[0]);    int i=1;    for (    Method elem : type.getMethods()) {      if (Modifier.isStatic(elem.getModifiers())) {        if (elem.isAnnotationPresent(CommandIgnore.class))         continue;        if (elem.getName().equals(args[0])) {          printMethodSignature(i,elem);          i++;        }      }    }  }}  }
class C{  public boolean isDefault(){  return expression == null;}  }
class C{  public synchronized void logMessage(final Level level,final String message){  if (logLevel.intValue() > level.intValue()) {    return;  }  try {    this.writer.write(System.currentTimeMillis() + "\t" + consumerName+ " ["+ type.toString()+ "] "+ "\t"+ message+ "\r\n");    this.writer.flush();  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  public static void cutSchedule(TransitSchedule schedule,Coord SWcorner,Coord NEcorner){  Set<Id<TransitStopFacility>> stopsInArea=new HashSet<>();  for (  TransitStopFacility stopFacility : schedule.getFacilities().values()) {    if (CoordTools.isInArea(stopFacility.getCoord(),SWcorner,NEcorner)) {      stopsInArea.add(stopFacility.getId());    }  }  cutSchedule(schedule,stopsInArea);}  }
class C{  public static Properties read(String props) throws Exception {  Properties result;  result=Utils.readProperties(props);  if (DEBUG)   System.out.println("start<PropsUtils.read: " + props + ">\n"+ toString(result,null)+ "end<PropsUtils.read: "+ props+ ">\n");  return result;}  }
class C{  protected void addScoredParseTree(Tree<Pair<String,IntPair>> spanLabeledTree,Tree<Double> scores,Constituent root,int sentenceStartPosition){  for (int childId=0; childId < spanLabeledTree.getNumberOfChildren(); childId++) {    Tree<Pair<String,IntPair>> child=spanLabeledTree.getChild(childId);    String edgeLabel;    double edgeScore=0;    edgeLabel=PARENT_OF_STRING;    double constituentScore=scores.getChild(childId).getLabel();    int start=child.getLabel().getSecond().getFirst() + sentenceStartPosition;    int end=child.getLabel().getSecond().getSecond() + sentenceStartPosition;    String constituentLabel=child.getLabel().getFirst();    Constituent childConstituent;    if (start == end) {      childConstituent=new Constituent(constituentLabel,constituentScore,this.getViewName(),this.getTextAnnotation(),-1,0);    } else {      childConstituent=createNewConstituent(start,end,constituentLabel,constituentScore);    }    this.addConstituent(childConstituent);    this.addRelation(new Relation(edgeLabel,root,childConstituent,edgeScore));    Tree<Double> scoresChild=scores.getChild(childId);    this.addScoredParseTree(child,scoresChild,childConstituent,sentenceStartPosition);  }}  }
class C{  public LazyFutureStream<Long> from(final LongStream stream){  return fromStream(stream.boxed());}  }
class C{  public synchronized boolean isEmpty(){  return count == 0;}  }
class C{  public void add(String data,String translate){  add(data,true);  tagTranslate=translate;}  }
class C{  public FatalError(JCDiagnostic d){  super(d.toString());}  }
class C{  public boolean requiresAST(){  return fRequiresAST;}  }
class C{  private void addLineString(MasonGeometry wrappedLine){  LineString line=(LineString)wrappedLine.geometry;  if (line.isEmpty()) {    return;  }  Coordinate[] linePts=CoordinateArrays.removeRepeatedPoints(line.getCoordinates());  if (linePts.length < 2) {    return;  }  Coordinate startPt=linePts[0];  Coordinate endPt=linePts[linePts.length - 1];  Node nStart=getNode(startPt);  Node nEnd=getNode(endPt);  GeomPlanarGraphEdge edge=new GeomPlanarGraphEdge(line);  GeomPlanarGraphDirectedEdge de0=new GeomPlanarGraphDirectedEdge(nStart,nEnd,linePts[1],true);  GeomPlanarGraphDirectedEdge de1=new GeomPlanarGraphDirectedEdge(nEnd,nStart,linePts[linePts.length - 2],false);  edge.setDirectedEdges(de0,de1);  edge.setAttributes(wrappedLine.getAttributes());  add(edge);}  }
class C{  public void testCertStore03() throws InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  try {    CertStore.getInstance(null,dParams);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when type is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertStore.getInstance(invalidValues[i],dParams);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public CoapResponse putIfNoneMatch(byte[] payload,int format){  return synchronous(ifNoneMatch(format(newPut().setURI(uri).setPayload(payload),format)));}  }
class C{  private static int correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures != null && erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  return errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize]) {        bufline[j]=newLine++;      } else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  private void startUpSecondary() throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("partitioned");  igfsCfg.setMetaCacheName("replicated");  igfsCfg.setName("igfs-secondary");  igfsCfg.setBlockSize(512 * 1024);  igfsCfg.setDefaultMode(PRIMARY);  IgfsIpcEndpointConfiguration endpointCfg=new IgfsIpcEndpointConfiguration();  endpointCfg.setType(IgfsIpcEndpointType.TCP);  endpointCfg.setPort(11500);  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("igfs-grid-secondary");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(metaCacheCfg,cacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  igfsSecondary=(IgfsImpl)G.start(cfg).fileSystem("igfs-secondary");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.670 -0500",hash_original_method="EBAE52FCFF9289B17EA2262C75B6F6C0",hash_generated_method="341899536F7070342B48A81450701483") private Note(){}  }
class C{  public static int width(char[] chars,int index){  char c=chars[index];  return Character.isHighSurrogate(c) ? width(Character.toCodePoint(c,chars[index + 1])) : width(c);}  }
class C{  public boolean filesMatch(SourceFile a,SourceFile b){  boolean yes=true;  if (a == null || b == null)   yes=false; else   if (a.getPackageName().compareTo(b.getPackageName()) != 0)   yes=false; else   if (a.getName().compareTo(b.getName()) != 0)   yes=false; else   if (a.getLineCount() != b.getLineCount())   yes=false;  return yes;}  }
class C{  public boolean isResponseReceived(){  return (receivedResponse != -1);}  }
class C{  private Channel newChannel() throws IOException {  checkState(publisherChannel != null,"PubsubGrpcClient has been closed");  ClientAuthInterceptor interceptor=new ClientAuthInterceptor(credentials,Executors.newSingleThreadExecutor());  return ClientInterceptors.intercept(publisherChannel,interceptor);}  }
class C{  int parseMonth(String month,int offset) throws ParseException {  if (month.length() < 3) {    return (parseNumber(month,offset,"month",1,12) - 1) + Calendar.JANUARY;  }  String months[]=getDateFormatSymbols().getMonths();  int mlen=months.length;  for (int i=0; i < mlen; i++) {    if (month.equalsIgnoreCase(months[i])) {      return i + Calendar.JANUARY;    }  }  months=getDateFormatSymbols().getShortMonths();  mlen=months.length;  for (int i=0; i < mlen; i++) {    if (month.equalsIgnoreCase(months[i])) {      return i + Calendar.JANUARY;    }  }  return throwInvalid("month",offset);}  }
class C{  public static URI removeQuery(URI uri) throws URISyntaxException {  return createURIWithQuery(uri,null);}  }
class C{  public String showTree(){  return showNode(m_Root,null);}  }
class C{  public ForwardBackward(FiniteProbabilityModel transitionModel,Map<RandomVariable,RandomVariable> tToTm1StateVarMap,FiniteProbabilityModel sensorModel){  this.transitionModel=transitionModel;  this.tToTm1StateVarMap.putAll(tToTm1StateVarMap);  this.sensorModel=sensorModel;}  }
class C{  public static boolean isPortletRequest(FacesContext context){  return (context.getExternalContext().getRequestMap().get("javax.portlet.faces.phase") != null);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  DecimalFormatProperties dfp=new DecimalFormatProperties(handler.nextUid());  dfp.setDOMBackPointer(handler.getOriginatingNode());  dfp.setLocaterInfo(handler.getLocator());  setPropertiesFromAttributes(handler,rawName,attributes,dfp);  handler.getStylesheet().setDecimalFormat(dfp);  handler.getStylesheet().appendChild(dfp);}  }
class C{  static public void assertNotNull(String message,Object object){  assertTrue(message,object != null);}  }
class C{  public synchronized void write(int b) throws IOException {  if (count >= buf.length) {    flushBuffer();  }  totalBytesWritten++;  fireProgress();  lastActivityTime=System.currentTimeMillis();  buf[count++]=(byte)b;}  }
class C{  protected static void saveFunctionNodes(final SQLProvider provider,final List<INaviViewNode> nodes,final int firstNode,final List<Integer> functionNodeIndices) throws SQLException {  if (functionNodeIndices.isEmpty()) {    return;  }  final String query="INSERT INTO " + CTableNames.FUNCTION_NODES_TABLE + "(module_id, node_id, function, comment_id) VALUES (?, ?, ?, ?)";  final ArrayList<INaviFunctionNode> functionNodesWithUnsavedComments=new ArrayList<INaviFunctionNode>();  final PreparedStatement preparedStatement=provider.getConnection().getConnection().prepareStatement(query);  try {    for (    final int index : functionNodeIndices) {      final CFunctionNode node=(CFunctionNode)nodes.get(index);      final INaviFunction function=node.getFunction();      final List<IComment> comments=node.getLocalFunctionComment();      final Integer commentId=comments == null ? null : comments.size() == 0 ? null : Iterables.getLast(comments).getId();      if ((comments != null) && (comments.size() != 0) && (commentId == null)) {        functionNodesWithUnsavedComments.add(node);      }      preparedStatement.setInt(1,function.getModule().getConfiguration().getId());      preparedStatement.setInt(2,firstNode + index);      preparedStatement.setObject(3,function.getAddress().toBigInteger(),Types.BIGINT);      if (commentId == null) {        preparedStatement.setNull(4,Types.INTEGER);      } else {        preparedStatement.setInt(4,commentId);      }      preparedStatement.addBatch();    }    preparedStatement.executeBatch();  }  finally {    preparedStatement.close();  }  for (  final INaviFunctionNode functionNode : functionNodesWithUnsavedComments) {    final ArrayList<IComment> functionNodeComments=new ArrayList<IComment>();    for (    final IComment comment : functionNode.getLocalFunctionComment()) {      try {        final Integer commentId=provider.appendFunctionNodeComment(functionNode,comment.getComment(),comment.getUser().getUserId());        final IComment newComment=new CComment(commentId,comment.getUser(),comment.getParent(),comment.getComment());        functionNodeComments.add(newComment);      } catch (      final CouldntSaveDataException exception) {        CUtilityFunctions.logException(exception);      }    }    functionNode.initializeLocalFunctionComment(functionNodeComments);  }}  }
class C{  private OPath makeOPath(String name,ArrayList<Positionable> pathGp,boolean showMsg){  if (pathGp.size() == 0) {    if (showMsg) {      JOptionPane.showMessageDialog(this,Bundle.getMessage("noPathIcons"),Bundle.getMessage("makePath"),JOptionPane.INFORMATION_MESSAGE);    }    return null;  }  Iterator<Positionable> it=pathGp.iterator();  ArrayList<BeanSetting> settings=new ArrayList<BeanSetting>();  Portal fromPortal=null;  Portal toPortal=null;  boolean hasTrack=false;  int portalIconCount=0;  while (it.hasNext()) {    Positionable pos=it.next();    if (pos instanceof IndicatorTurnoutIcon) {      jmri.Turnout t=((IndicatorTurnoutIcon)pos).getTurnout();      String turnoutName=((IndicatorTurnoutIcon)pos).getNamedTurnout().getName();      int state=t.getKnownState();      if (state != Turnout.CLOSED && state != Turnout.THROWN) {        if (showMsg) {          JOptionPane.showMessageDialog(this,Bundle.getMessage("turnoutNotSet",t.getDisplayName()),Bundle.getMessage("makePath"),JOptionPane.INFORMATION_MESSAGE);        }        return null;      }      settings.add(new BeanSetting(t,turnoutName,state));      hasTrack=true;    } else     if (pos instanceof PortalIcon) {      if (toPortal == null) {        toPortal=((PortalIcon)pos).getPortal();      } else       if (fromPortal == null) {        fromPortal=((PortalIcon)pos).getPortal();      }      portalIconCount++;    } else     if (pos instanceof IndicatorTrack) {      hasTrack=true;    }  }  if (showMsg) {    if (!hasTrack) {      JOptionPane.showMessageDialog(this,Bundle.getMessage("noPathIcons"),Bundle.getMessage("makePath"),JOptionPane.INFORMATION_MESSAGE);      return null;    }    if (toPortal == null && fromPortal == null) {      JOptionPane.showMessageDialog(this,Bundle.getMessage("tooFewPortals"),Bundle.getMessage("makePath"),JOptionPane.INFORMATION_MESSAGE);      return null;    }    if (portalIconCount == 0) {      JOptionPane.showMessageDialog(this,Bundle.getMessage("noPortalIcons"),Bundle.getMessage("makePath"),JOptionPane.INFORMATION_MESSAGE);    }    if (portalIconCount > 2) {      JOptionPane.showMessageDialog(this,Bundle.getMessage("tooManyPortals"),Bundle.getMessage("makePath"),JOptionPane.INFORMATION_MESSAGE);      return null;    }  }  if (hasTrack && portalIconCount > 0 && portalIconCount < 3) {    return new OPath(name,_block,fromPortal,toPortal,settings);  }  return null;}  }
class C{  public RhinoScriptBuilder addClientSideEnvironment(){  try {    final InputStream scriptEnv=new WebjarUriLocator().locate("env.rhino.js");    evaluateChain(scriptEnv,SCRIPT_ENV);    return this;  } catch (  final IOException e) {    throw new RuntimeException("Couldn't initialize env.rhino script",e);  }}  }
class C{  public void writeToLogArea(UtilityFunction distrib){  String distribStr=distrib.toString().replace("\n","\n<br>");  distribStr=StringUtils.getHtmlRendering(distribStr);  logArea.setText("<html><font  size=\"4\" face=\"helvetica\">" + distribStr + "</font></html>");}  }
class C{  public ChooserIntentBuilder forIntent(Intent intent){  mIntent.putExtra(BottomSheetChooserActivity.EXTRA_SHARE_INTENT,intent);  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.779 -0500",hash_original_method="DE60FEC0184A03FE71EDAD4972871A6E",hash_generated_method="55B4C0F1C018E7FD9AD76020CEE221A3") private static void preloadResources(){  final VMRuntime runtime=VMRuntime.getRuntime();  Debug.startAllocCounting();  try {    System.gc();    runtime.runFinalizationSync();    mResources=Resources.getSystem();    mResources.startPreloading();    if (PRELOAD_RESOURCES) {      Log.i(TAG,"Preloading resources...");      long startTime=SystemClock.uptimeMillis();      TypedArray ar=mResources.obtainTypedArray(com.android.internal.R.array.preloaded_drawables);      int N=preloadDrawables(runtime,ar);      Log.i(TAG,"...preloaded " + N + " resources in "+ (SystemClock.uptimeMillis() - startTime)+ "ms.");      startTime=SystemClock.uptimeMillis();      ar=mResources.obtainTypedArray(com.android.internal.R.array.preloaded_color_state_lists);      N=preloadColorStateLists(runtime,ar);      Log.i(TAG,"...preloaded " + N + " resources in "+ (SystemClock.uptimeMillis() - startTime)+ "ms.");    }    mResources.finishPreloading();  } catch (  RuntimeException e) {    Log.w(TAG,"Failure preloading resources",e);  } finally {    Debug.stopAllocCounting();  }}  }
class C{  protected void validateCurrentTimeAfterSinceUntil(FactoryDto factory) throws BadRequestException {  final PoliciesDto policies=factory.getPolicies();  if (policies == null) {    return;  }  final Long since=policies.getSince() == null ? 0L : policies.getSince();  final Long until=policies.getUntil() == null ? 0L : policies.getUntil();  if (since != 0 && until != 0 && since >= until) {    throw new BadRequestException(FactoryConstants.INVALID_SINCEUNTIL_MESSAGE);  }  if (since != 0 && currentTimeMillis() > since) {    throw new BadRequestException(FactoryConstants.INVALID_SINCE_MESSAGE);  }  if (until != 0 && currentTimeMillis() > until) {    throw new BadRequestException(FactoryConstants.INVALID_UNTIL_MESSAGE);  }}  }
class C{  private boolean customTileMatchesUserId(ExternalQuickSettingsRecord r,int userId){  return userId == UserHandle.USER_ALL || r.getUserId() == UserHandle.USER_ALL || r.getUserId() == userId;}  }
class C{  public Map<String,Map<String,Flt>> retrieveTerms(int docNum) throws IOException {  return retrieveTerms(docNum,null);}  }
class C{  public DtoShopUrlServiceImpl(final GenericService<ShopUrl> shopUrlGenericService,final GenericService<Shop> shopService,final DtoFactory dtoFactory,final AdaptersRepository adaptersRepository){  super(dtoFactory,shopUrlGenericService,adaptersRepository);  this.shopService=shopService;}  }
class C{  public Vector ceil(){  return new Vector(Math.ceil(x),Math.ceil(y),Math.ceil(z));}  }
class C{  private IBlackBoxVersion findTrashVersion(Set<IBlackBoxVersion> versions,boolean isReliable){  if (isReliable) {    for (    IBlackBoxVersion v : versions) {      if (v.isReliable()) {        return v;      }    }  }  IBlackBoxVersion trash=null;  for (  IBlackBoxVersion v : versions) {    if (v.isReliable())     continue;    if (trash == null) {      trash=v;      continue;    }    trash=trash.compareTo(v) > 0 ? v : trash;  }  return trash;}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  private static void rollback(TwoPhaseCommit... objects){  for (  TwoPhaseCommit tpc : objects) {    if (tpc != null) {      try {        tpc.rollback();      } catch (      Throwable t) {      }    }  }}  }
class C{  public synchronized void addElement(Object obj){  modCount++;  ensureCapacityHelper(elementCount + 1);  elementData[elementCount++]=obj;}  }
class C{  public ActivityExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public SBP(KernelTrick kernel,CacheMode cacheMode,int iterations,double v){  super(kernel,cacheMode);  setIterations(iterations);  setNu(v);}  }
class C{  public Path createAuxAnalyzepath(){  if (auxAnalyzepath == null) {    auxAnalyzepath=new Path(getProject());  }  return auxAnalyzepath.createPath();}  }
class C{  public MutableInt(final int value){  super();  this.value=value;}  }
class C{  @SuppressWarnings({"squid:S2095"}) public static void main(final String[] args){  SpringApplication.run(Start.class,args);}  }
class C{  public TransactionHeuristicException(String msg){  super(msg);}  }
class C{  public Method findMethod(String name,Object[] params) throws MethodMap.AmbiguousException {  String methodKey=makeMethodKey(name,params);  Object cacheEntry=methodCache.get(methodKey);  if (cacheEntry == CACHE_MISS) {    return null;  }  if (cacheEntry == null) {    try {      cacheEntry=methodMap.find(name,params);    } catch (    MethodMap.AmbiguousException ae) {      methodCache.put(methodKey,CACHE_MISS);      throw ae;    }    if (cacheEntry == null) {      methodCache.put(methodKey,CACHE_MISS);    } else {      methodCache.put(methodKey,cacheEntry);    }  }  return (Method)cacheEntry;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Date stringToDate(String datstr){  SimpleDateFormat fmt=ComponentTime.makeInputFormatter();  ParsePosition zero=new ParsePosition(0);  if (datstr.length() > 23)   datstr=datstr.substring(0,23);  return (fmt.parse(datstr,zero));}  }
class C{  void copyTo(IntSet target){  if (target.elements.length < size) {    target.elements=Arrays.copyOf(elements,elements.length);  } else {    System.arraycopy(elements,0,target.elements,0,size);  }  target.size=size;}  }
class C{  public final Observable<String> title(){  return mTitleSubject.asObservable();}  }
class C{  public TetradMatrix successiveResidual(){  this.factorLoadingVectors=new Vector<>();  this.residualMatrices=new Vector<>();  this.dValues=new Vector<>();  this.residualMatrices.add(correlationMatrix.getMatrix());  TetradMatrix unitVector=new TetradMatrix(correlationMatrix.getMatrix().rows(),1);  for (int i=0; i < unitVector.rows(); i++) {    unitVector.set(i,0,1);  }  successiveResidualHelper(residualMatrices.lastElement(),unitVector);  int failSafe=0;  while (vectorSum(dValues) / trace(correlationMatrix.getMatrix()) < .99) {    TetradMatrix residual=matrixSubtract(residualMatrices.lastElement(),matrixMult(factorLoadingVectors.lastElement(),transpose(factorLoadingVectors.lastElement())));    residualMatrices.add(residual);    if (!successiveResidualHelper(residualMatrices.lastElement(),unitVector))     break;    failSafe++;    if (failSafe > 500)     break;  }  TetradMatrix result=new TetradMatrix(correlationMatrix.getMatrix().rows(),factorLoadingVectors.size());  for (int i=0; i < result.rows(); i++) {    for (int j=0; j < result.columns(); j++) {      result.set(i,j,factorLoadingVectors.get(j).get(i,0));    }  }  return result;}  }
class C{  protected void textCharShapeImpl(char ch,float x,float y){  boolean strokeSaved=stroke;  stroke=false;  PGL.FontOutline outline=pgl.createFontOutline(ch,textFont.getNative());  float textPoints[]=new float[6];  float lastX=0;  float lastY=0;  boolean open=false;  beginShape();  while (!outline.isDone()) {    int type=outline.currentSegment(textPoints);    if (!open) {      beginContour();      open=true;    }    if (type == PGL.SEG_MOVETO || type == PGL.SEG_LINETO) {      vertex(x + textPoints[0],y + textPoints[1]);      lastX=textPoints[0];      lastY=textPoints[1];    } else     if (type == PGL.SEG_QUADTO) {      for (int i=1; i < bezierDetail; i++) {        float t=(float)i / (float)bezierDetail;        vertex(x + bezierPoint(lastX,lastX + (float)((textPoints[0] - lastX) * 2 / 3.0),textPoints[2] + (float)((textPoints[0] - textPoints[2]) * 2 / 3.0),textPoints[2],t),y + bezierPoint(lastY,lastY + (float)((textPoints[1] - lastY) * 2 / 3.0),textPoints[3] + (float)((textPoints[1] - textPoints[3]) * 2 / 3.0),textPoints[3],t));      }      lastX=textPoints[2];      lastY=textPoints[3];    } else     if (type == PGL.SEG_CUBICTO) {      for (int i=1; i < bezierDetail; i++) {        float t=(float)i / (float)bezierDetail;        vertex(x + bezierPoint(lastX,textPoints[0],textPoints[2],textPoints[4],t),y + bezierPoint(lastY,textPoints[1],textPoints[3],textPoints[5],t));      }      lastX=textPoints[4];      lastY=textPoints[5];    } else     if (type == PGL.SEG_CLOSE) {      endContour();      open=false;    }    outline.next();  }  endShape();  stroke=strokeSaved;}  }
class C{  protected void selectPreviousIndex(){  int s=list.getSelectedIndex();  if (s > 0) {    s-=1;    list.setSelectedIndex(s);    list.ensureIndexIsVisible(s);  }}  }
class C{  public boolean isEmpty(){  return state.equals(EMPTY);}  }
class C{  public static <T>boolean allElementsAreNull(T[] array){  for (  T element : array) {    if (element != null)     return false;  }  return true;}  }
class C{  public synchronized void reset() throws IOException {  in.reset();  nread=size - in.available();  monitor.setProgress(nread);}  }
class C{  public void testGetFieldNames() throws Exception {  Directory d=newDirectory();  IndexWriter writer=new IndexWriter(d,newIndexWriterConfig(new MockAnalyzer(random())));  Document doc=new Document();  FieldType customType3=new FieldType();  customType3.setStored(true);  doc.add(new StringField("keyword","test1",Field.Store.YES));  doc.add(new TextField("text","test1",Field.Store.YES));  doc.add(new Field("unindexed","test1",customType3));  doc.add(new TextField("unstored","test1",Field.Store.NO));  writer.addDocument(doc);  writer.close();  DirectoryReader reader=DirectoryReader.open(d);  FieldInfos fieldInfos=MultiFields.getMergedFieldInfos(reader);  assertNotNull(fieldInfos.fieldInfo("keyword"));  assertNotNull(fieldInfos.fieldInfo("text"));  assertNotNull(fieldInfos.fieldInfo("unindexed"));  assertNotNull(fieldInfos.fieldInfo("unstored"));  reader.close();  writer=new IndexWriter(d,newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));  int mergeFactor=((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor();  for (int i=0; i < 5 * mergeFactor; i++) {    doc=new Document();    doc.add(new StringField("keyword","test1",Field.Store.YES));    doc.add(new TextField("text","test1",Field.Store.YES));    doc.add(new Field("unindexed","test1",customType3));    doc.add(new TextField("unstored","test1",Field.Store.NO));    writer.addDocument(doc);  }  for (int i=0; i < 5 * mergeFactor; i++) {    doc=new Document();    doc.add(new StringField("keyword2","test1",Field.Store.YES));    doc.add(new TextField("text2","test1",Field.Store.YES));    doc.add(new Field("unindexed2","test1",customType3));    doc.add(new TextField("unstored2","test1",Field.Store.NO));    writer.addDocument(doc);  }  FieldType customType5=new FieldType(TextField.TYPE_STORED);  customType5.setStoreTermVectors(true);  FieldType customType6=new FieldType(TextField.TYPE_STORED);  customType6.setStoreTermVectors(true);  customType6.setStoreTermVectorOffsets(true);  FieldType customType7=new FieldType(TextField.TYPE_STORED);  customType7.setStoreTermVectors(true);  customType7.setStoreTermVectorPositions(true);  FieldType customType8=new FieldType(TextField.TYPE_STORED);  customType8.setStoreTermVectors(true);  customType8.setStoreTermVectorOffsets(true);  customType8.setStoreTermVectorPositions(true);  for (int i=0; i < 5 * mergeFactor; i++) {    doc=new Document();    doc.add(new TextField("tvnot","tvnot",Field.Store.YES));    doc.add(new Field("termvector","termvector",customType5));    doc.add(new Field("tvoffset","tvoffset",customType6));    doc.add(new Field("tvposition","tvposition",customType7));    doc.add(new Field("tvpositionoffset","tvpositionoffset",customType8));    writer.addDocument(doc);  }  writer.close();  reader=DirectoryReader.open(d);  fieldInfos=MultiFields.getMergedFieldInfos(reader);  Collection<String> allFieldNames=new HashSet<>();  Collection<String> indexedFieldNames=new HashSet<>();  Collection<String> notIndexedFieldNames=new HashSet<>();  Collection<String> tvFieldNames=new HashSet<>();  for (  FieldInfo fieldInfo : fieldInfos) {    final String name=fieldInfo.name;    allFieldNames.add(name);    if (fieldInfo.getIndexOptions() != IndexOptions.NONE) {      indexedFieldNames.add(name);    } else {      notIndexedFieldNames.add(name);    }    if (fieldInfo.hasVectors()) {      tvFieldNames.add(name);    }  }  assertTrue(allFieldNames.contains("keyword"));  assertTrue(allFieldNames.contains("text"));  assertTrue(allFieldNames.contains("unindexed"));  assertTrue(allFieldNames.contains("unstored"));  assertTrue(allFieldNames.contains("keyword2"));  assertTrue(allFieldNames.contains("text2"));  assertTrue(allFieldNames.contains("unindexed2"));  assertTrue(allFieldNames.contains("unstored2"));  assertTrue(allFieldNames.contains("tvnot"));  assertTrue(allFieldNames.contains("termvector"));  assertTrue(allFieldNames.contains("tvposition"));  assertTrue(allFieldNames.contains("tvoffset"));  assertTrue(allFieldNames.contains("tvpositionoffset"));  assertEquals(11,indexedFieldNames.size());  assertTrue(indexedFieldNames.contains("keyword"));  assertTrue(indexedFieldNames.contains("text"));  assertTrue(indexedFieldNames.contains("unstored"));  assertTrue(indexedFieldNames.contains("keyword2"));  assertTrue(indexedFieldNames.contains("text2"));  assertTrue(indexedFieldNames.contains("unstored2"));  assertTrue(indexedFieldNames.contains("tvnot"));  assertTrue(indexedFieldNames.contains("termvector"));  assertTrue(indexedFieldNames.contains("tvposition"));  assertTrue(indexedFieldNames.contains("tvoffset"));  assertTrue(indexedFieldNames.contains("tvpositionoffset"));  assertEquals(2,notIndexedFieldNames.size());  assertTrue(notIndexedFieldNames.contains("unindexed"));  assertTrue(notIndexedFieldNames.contains("unindexed2"));  assertEquals(tvFieldNames.toString(),4,tvFieldNames.size());  assertTrue(tvFieldNames.contains("termvector"));  reader.close();  d.close();}  }
class C{  public static String replicationTopicReceive(String cacheName){  return TOPIC_REPLICATION + "-" + mask(cacheName);}  }
class C{  public TimeOfDay addWrapFieldToCopy(int valueToAdd){  int[] newValues=iTimeOfDay.getValues();  newValues=getField().addWrapField(iTimeOfDay,iFieldIndex,newValues,valueToAdd);  return new TimeOfDay(iTimeOfDay,newValues);}  }
class C{  public static org.oscm.vo.VOUsageLicense convertToApi(org.oscm.internal.vo.VOUsageLicense oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOUsageLicense newVO=new org.oscm.vo.VOUsageLicense();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setUser(convertToApi(oldVO.getUser()));  newVO.setApplicationUserId(oldVO.getApplicationUserId());  newVO.setRoleDefinition(convertToApi(oldVO.getRoleDefinition()));  return newVO;}  }
class C{  public Entry createRoot(User user,String id,String type,String notebookId,Long modTime,Long createTime,Errors errors){  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return null;  }  if (modTime == null) {    Errors.add(errors,errorMessages.errorModTimeIsNull());    return null;  }  if (createTime == null) {    Errors.add(errors,errorMessages.errorCreateTimeIsNull());    return null;  }  if (id != null && !idGenerator.isIdWellFormed(id)) {    Errors.add(errors,errorMessages.errorIdIsInvalid());    return null;  }  if (notebookId != null && !idGenerator.isIdWellFormed(notebookId)) {    Errors.add(errors,errorMessages.errorNotebookIdIsInvalid());    return null;  }  if (createTime.longValue() > modTime.longValue()) {    modTime=createTime;  }  Entry root=new Entry();  root.setDb(db);  if (id == null) {    id=idGenerator.getAnotherId();  }  root.setId(id);  root.setCreateTime(createTime);  root.setModTime(modTime);  root.setType(type);  root.setUserId(user.getId());  root.setNotebookId(notebookId);  db.persistEntry(root);  return root;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int rfChan=getInt(stack);  CaptureDeviceInput[] cdis=getCapDev(stack).getInputs();  for (int i=0; i < cdis.length; i++) {    if (cdis[i].normalRF())     return cdis[i].getWeirdRFCompanion(rfChan);  }  return null;}  }
class C{  public FlipFilter(int operation){  this.operation=operation;}  }
class C{  public static SpatialGrid readFromFile(String filename){  BufferedReader reader=IOUtils.getBufferedReader(filename);  String line;  SpatialGrid sg=null;  try {    sg=initSpatialGrid(filename);    String[] header=reader.readLine().split(SpatialGridTableWriter.separator);    String[] parts;    double yCoord, xCoord, value;    while ((line=reader.readLine()) != null) {      parts=line.split(SpatialGridTableWriter.separator);      if (parts.length == header.length) {        yCoord=Double.parseDouble(parts[0]);        for (int i=1; i < header.length; i++) {          xCoord=Double.parseDouble(header[i]);          value=Double.parseDouble(parts[i]);          sg.setMirroredValue(sg.getRow(yCoord),sg.getColumn(xCoord),value);        }      }    }  } catch (  IOException ioe) {    ioe.printStackTrace();  }  return sg;}  }
class C{  public static void fillMatrix_2D(int n1,int n2,float[][] m){  Random r=new Random(2);  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      m[i][j]=r.nextFloat();    }  }}  }
class C{  private void processInheritDoc(){  Object[] inheritDoc=findInheritDoc(this.key);  if (inheritDoc != null) {    addToComment(inheritDoc);    hasInheritTag=false;  } else   if (Trace.asdoc)   System.out.println("Cannot find inherited documentation for: " + this.key.name);}  }
class C{  public void precomputeArpiBitmaps(){  try {    if (!ArpiGlInstaller.getInstance(application.getApplicationContext()).isInstalled()) {      ArpiGlInstaller.getInstance(application.getApplicationContext()).install();      Map<Long,PoiType> poiTypes=poiManager.loadPoiTypes();      for (      Map.Entry<Long,PoiType> entry : poiTypes.entrySet()) {        Integer id=bitmapHandler.getIconDrawableId(entry.getValue());        if (id != null && id > 0) {          Drawable d=application.getApplicationContext().getResources().getDrawableForDensity(id,DisplayMetrics.DENSITY_XXHIGH);          int width=d.getIntrinsicWidth();          int height=d.getIntrinsicHeight();          Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);          Canvas c=new Canvas(bitmap);          d.setBounds(0,0,width,height);          d.draw(c);          File dest=new File(application.getApplicationContext().getFilesDir(),ArpiGlInstaller.INSTALLATION_DIR + "/" + ArpiGlInstaller.TEXTURE_ICONS_SUBDIR+ "/"+ entry.getValue().getIcon()+ ".png");          dest.getParentFile().mkdirs();          if (dest.exists()) {            dest.delete();          }          dest.createNewFile();          OutputStream stream=new FileOutputStream(dest);          bitmap.compress(Bitmap.CompressFormat.PNG,100,stream);          stream.close();          bitmap.recycle();        }      }    }  } catch (  IOException|JSONException e) {    Timber.e("Error while initializing ArpiGl library: {}",e.getMessage());  }}  }
class C{  ChallengeHandler lookup(ChallengeRequest challengeRequest){  ChallengeHandler result=null;  String location=challengeRequest.getLocation();  if (location != null) {    Node<ChallengeHandler,UriElement> resultNode=findBestMatchingNode(location);    if (resultNode != null) {      List<ChallengeHandler> handlers=resultNode.getValues();      if (handlers != null) {        for (        ChallengeHandler challengeHandler : handlers) {          if (challengeHandler.canHandle(challengeRequest)) {            result=challengeHandler;            break;          }        }      }    }  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public List<OutgoingBatch> filterBatchesForChannel(Channel channel){  List<OutgoingBatch> filtered=getBatchesForChannel(channel);  batches.removeAll(filtered);  return filtered;}  }
class C{  static void migrateGlobal(int counts[],int segCounts[],int subIndex,OrdinalMap map){  final LongValues ordMap=map.getGlobalOrds(subIndex);  counts[0]+=segCounts[0];  for (int ord=1; ord < segCounts.length; ord++) {    int count=segCounts[ord];    if (count != 0) {      counts[1 + (int)ordMap.get(ord - 1)]+=count;    }  }}  }
class C{  @Override public void process(V tuple){  if (tuple.doubleValue() != 0.0) {    currentWeight=tuple.doubleValue();  }}  }
class C{  MinimalBURS(IR ir){  super(ir);}  }
class C{  protected int entityIndex(Entity entity){  return Arrays.binarySearch(entities,entity);}  }
class C{  int firstLeadingCommentIndex(ASTNode node){  if (this.leadingPtr >= 0) {    for (int i=0; i <= this.leadingPtr; i++) {      if (this.leadingNodes[i] == node) {        return (int)(this.leadingIndexes[i] >> 32);      }    }  }  return -1;}  }
class C{  protected boolean isInJavadoc(){  return fIsInJavadoc;}  }
class C{  @UiHandler("cancelButton") public void handleCancelClick(final ClickEvent event){  this.actionDelegate.cancelled();}  }
class C{  public static boolean intersectLineSegmentPlane(float p0X,float p0Y,float p0Z,float p1X,float p1Y,float p1Z,float a,float b,float c,float d,Vector3f intersectionPoint){  float dirX=p1X - p0X;  float dirY=p1Y - p0Y;  float dirZ=p1Z - p0Z;  float denom=a * dirX + b * dirY + c * dirZ;  float t=-(a * p0X + b * p0Y + c * p0Z + d) / denom;  if (t >= 0.0f && t <= 1.0f) {    intersectionPoint.x=p0X + t * dirX;    intersectionPoint.y=p0Y + t * dirY;    intersectionPoint.z=p0Z + t * dirZ;    return true;  }  return false;}  }
class C{  private static String makeHHString(int i){  String s=Integer.toHexString(i).toUpperCase();  if (s.length() == 1) {    s="0" + s;  }  return s;}  }
class C{  private void loadLineSizes(){  processNextLine();  final int lineHeightPixels=getValueOfVariable("lineHeight") - paddingHeight;  verticalPerPixelSize=TextMeshCreator.LINE_HEIGHT / lineHeightPixels;  horizontalPerPixelSize=verticalPerPixelSize / aspectRatio;}  }
class C{  public SelectWorkingSetDropDownAction(){  super(ImageRef.WORKING_SET.asImageDescriptor().orNull());  setToolTipText("Select Active Working Set Manager");}  }
class C{  public DAuthorityInformationAccess(JDialog parent){  super(parent);  setTitle(res.getString("DAuthorityInformationAccess.Title"));  initComponents();}  }
class C{  public synchronized void snapshot(String name,String indexDirPath,long gen) throws IOException {  Preconditions.checkNotNull(name);  log.info("Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}",name,solrCore.getName(),gen,indexDirPath);  if (nameToDetailsMapping.containsKey(name)) {    throw new SolrException(ErrorCode.BAD_REQUEST,"A snapshot with name " + name + " already exists");  }  SnapshotMetaData d=new SnapshotMetaData(name,indexDirPath,gen);  nameToDetailsMapping.put(name,d);  boolean success=false;  try {    persist();    success=true;  }  finally {    if (!success) {      try {        release(name);      } catch (      Exception e) {      }    }  }}  }
class C{  ParsePluginList(){  fMimeTypeToPluginMap=new HashMap<String,List<String>>();  aliases=new HashMap<String,String>();}  }
class C{  public AsyncResponse(V val){  this.value=val;  this.isDone=true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:58.218 -0500",hash_original_method="208E1F4DBC48E80FE528AF7E25427460",hash_generated_method="212D4C2D6B93DB0C152383C6F1E0A9BC") @Override public int hashCode(){  return mainAttributes.hashCode() ^ getEntries().hashCode();}  }
class C{  public void trim(String aText,int[] aSpan){  int begin=aSpan[0];  int end=aSpan[1] - 1;  String data=aText;  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {    begin++;  }  while ((end > 0) && trimChar(data.charAt(end))) {    end--;  }  end++;  aSpan[0]=begin;  aSpan[1]=end;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public Assignments<E> split(AbstractMTree<O,N,E,?> tree,N node){  double miSumCR=Double.POSITIVE_INFINITY;  double[] distanceMatrix=computeDistanceMatrix(tree,node);  boolean leaf=node.isLeaf();  Assignments<E> bestAssignment=null;  for (int i=0; i < node.getNumEntries(); i++) {    for (int j=i + 1; j < node.getNumEntries(); j++) {      Assignments<E> currentAssignments=balancedPartition(tree,node,i,j,distanceMatrix);      double maxCR=Math.max(currentAssignments.computeFirstCover(leaf),currentAssignments.computeSecondCover(leaf));      if (maxCR < miSumCR) {        miSumCR=maxCR;        bestAssignment=currentAssignments;      }    }  }  return bestAssignment;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  AnnotationsAttribute.Copier copier=new AnnotationsAttribute.Copier(info,constPool,newCp,classnames);  try {    copier.memberValue(0);    return new AnnotationDefaultAttribute(newCp,copier.close());  } catch (  Exception e) {    throw new RuntimeException(e.toString());  }}  }
class C{  public String toBriefString(){  return super.toString();}  }
class C{  private AFTPClient actionExistsDir() throws PageException, IOException {  required("directory",directory);  AFTPClient client=getClient();  boolean res=existsDir(client,directory);  Struct cfftp=writeCfftp(client);  cfftp.setEL(RETURN_VALUE,Caster.toBoolean(res));  cfftp.setEL(SUCCEEDED,Boolean.TRUE);  stoponerror=false;  return client;}  }
class C{  public static void placeLabelsOnPath(DrawContext dc,Iterable<? extends Position> positions,TacticalGraphicLabel label1,TacticalGraphicLabel label2,double distance){  Iterator<? extends Position> iterator=positions.iterator();  Globe globe=dc.getGlobe();  Position pos1=null;  Position pos2;  Vec4 pt1, pt2;  double length=0;  double thisDistance=0;  pos2=iterator.next();  pt2=globe.computePointFromLocation(pos2);  while (iterator.hasNext() && length < distance) {    pos1=pos2;    pt1=pt2;    pos2=iterator.next();    pt2=globe.computePointFromLocation(pos2);    thisDistance=pt2.distanceTo2(pt1);    length+=thisDistance;  }  if (pos1 != null && pos2 != null && thisDistance > 0) {    double delta=length - distance;    LatLon ll=LatLon.interpolateGreatCircle(delta / thisDistance,pos1,pos2);    pos1=new Position(ll,0);    label1.setPosition(pos1);    label1.setOrientationPosition(pos2);    if (label2 != null) {      label2.setPosition(pos1);      label2.setOrientationPosition(pos2);    }  }}  }
class C{  public int intValue(){  return ib.get(0);}  }
class C{  private void showPopupMenu(final MouseEvent event){  final CTraceEventsTableFilterMenu menu=new CTraceEventsTableFilterMenu(getFilterField());  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  public TopologicalNode(int nodeID){  this.nodeID=nodeID;  nodeName=String.valueOf(nodeID);}  }
class C{  protected void stop(){  timer.stop();}  }
class C{  @Override public void write(String str,int off,int len){  builder.append(str.substring(off,off + len));}  }
class C{  public static String generateSeparateAttributesClass(final Class<?> targetClass,Package packageOfAttributesClass){  return generateAttributesForClass(targetClass,true,packageOfAttributesClass.getName());}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public NotificationChain basicSetExitSequence(Sequence newExitSequence,NotificationChain msgs){  Sequence oldExitSequence=exitSequence;  exitSequence=newExitSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_STATE__EXIT_SEQUENCE,oldExitSequence,newExitSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static <S extends Control,V>SkinPropertyBasedCssMetaData<S,V> createSkinMetaData(String property,StyleConverter<?,V> converter,String propertyName,V defaultValue){  return new SkinPropertyBasedCssMetaData<S,V>(property,converter,propertyName,defaultValue);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean hasMoreElements(){  return (((implicitInstructions != null) && implicitInstructions.hasNext()) || explicitInstructions.hasMoreElements());}  }
class C{  private SavedState(Parcel in){  super(in);  prevFirstVisiblePosition=in.readInt();  prevFirstVisibleChildHeight=in.readInt();  prevScrolledChildrenHeight=in.readInt();  prevScrollY=in.readInt();  scrollY=in.readInt();  childrenHeights=new SparseIntArray();  final int numOfChildren=in.readInt();  if (0 < numOfChildren) {    for (int i=0; i < numOfChildren; i++) {      final int key=in.readInt();      final int value=in.readInt();      childrenHeights.put(key,value);    }  }}  }
class C{  @SuppressWarnings("unchecked") public void writeString(String x) throws SQLException {  attribs.add(x);}  }
class C{  private void clear(){  mmPosition=0;  mmHistory.clear();}  }
class C{  private void addMenu(Menu menu){  MENU_BAR.add(menu.getMenu());}  }
class C{  public boolean isStandardModule(){  return (getAbsolutePath().indexOf(RCPNameToFileIStream.STANDARD_MODULES) != -1);}  }
class C{  public boolean createNewFile() throws IOException {  return getWrappedPath().createNewFile();}  }
class C{  public void removeDecorator(final ProcessDrawDecorator decorator,final RenderPhase phase){  if (decorator == null) {    throw new IllegalArgumentException("decorator must not be null!");  }  if (phase == null) {    throw new IllegalArgumentException("phase must not be null!");  }  decorators.get(phase).remove(decorator);}  }
class C{  private static void dualPivotQuicksort(char[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  char ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    char t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    char t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    char t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    char t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    char t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  char pivot1=ae2;  a[e2]=a[left];  char pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public String startPaymentProcessing() throws OrganizationAuthoritiesException {  getLogger().logInfo(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.INFO_USER_PAYMENT_RUN_STARTED);  boolean result=getOperatorService().startPaymentProcessing();  getLogger().logInfo(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.INFO_USER_PAYMENT_RUN_FINISHED);  return getOutcome(result);}  }
class C{  @Interruptible public static void printPhases(){  Log.writeln("--------------------- MMTk Statistics Per GC/Mutator Phase ---------------------");  printColumnNames();  for (int p=0; p <= phase; p+=2) {    Log.write((p / 2) + 1);    Log.write("\t");    for (int c=0; c < counters; c++) {      if (counter[c].mergePhases()) {        counter[c].printCount(p);        Log.write("\t");      } else {        counter[c].printCount(p);        Log.write("\t");        counter[c].printCount(p + 1);        Log.write("\t");      }    }    Log.writeln();  }}  }
class C{  public void removed(java.awt.Container cont){}  }
class C{  public void drawMenuButton(){  Context context=mOverlay.getContext();  LayoutInflater layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  LinearLayout menuButtonLayout=(LinearLayout)layoutInflater.inflate(R.layout.switch_access_global_menu_button,mRelativeLayout,false);  addViewAndShow(menuButtonLayout);}  }
class C{  public static String render(String text,ValueRecorder recorder){  return new AssertionRenderer(text,recorder).render();}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void suspend(){  if (suspendHelper()) {    Thread.currentThread().suspend();  }}  }
class C{  public static void deleteAddressSpace(final AbstractSQLProvider provider,final INaviAddressSpace addressSpace) throws CouldntDeleteException {  checkArguments(provider,addressSpace);  NaviLogger.info("Deleting address space %s",addressSpace.getConfiguration().getName());  PostgreSQLHelpers.deleteById(provider.getConnection(),CTableNames.ADDRESS_SPACES_TABLE,addressSpace.getConfiguration().getId());}  }
class C{  private void checkNeuronConsistency(){  ParameterGetter<Neuron,Class<?>> typeGetter=null;  if (!NetworkUtils.isConsistent(neuronList,typeGetter)) {    cbNeuronType.addItem(SimbrainConstants.NULL_STRING);    cbNeuronType.setSelectedIndex(cbNeuronType.getItemCount() - 1);    neuronRulePanel=new EmptyRulePanel();  } else {    String neuronName=neuronList.get(0).getUpdateRule().getName();    neuronRulePanel=ruleMap.get(neuronName);    neuronRulePanel.setReplacingUpdateRules(false);    neuronRulePanel.fillFieldValues(Neuron.getRuleList(neuronList));    cbNeuronType.setSelectedItem(neuronName);  }}  }
class C{  public void addService(ConfigurableApplicationContext configurableApplicationContext,Class serviceClass,String basePath){  ClassPathBeanDefinitionScanner classPathBeanDefinitionScanner=new ClassPathBeanDefinitionScanner((BeanDefinitionRegistry)configurableApplicationContext);  classPathBeanDefinitionScanner.scan(serviceClass.getPackage().getName());  SpringMicroservicesRunner springMicroservicesRunner=configurableApplicationContext.getBean(SpringMicroservicesRunner.class);  springMicroservicesRunner.deploy(basePath,configurableApplicationContext.getBean(serviceClass));}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  protected void nativeMotionEvent(android.view.MotionEvent motionEvent){  int metaState=motionEvent.getMetaState();  int modifiers=0;  if ((metaState & android.view.KeyEvent.META_SHIFT_ON) != 0) {    modifiers|=Event.SHIFT;  }  if ((metaState & META_CTRL_ON) != 0) {    modifiers|=Event.CTRL;  }  if ((metaState & META_META_ON) != 0) {    modifiers|=Event.META;  }  if ((metaState & android.view.KeyEvent.META_ALT_ON) != 0) {    modifiers|=Event.ALT;  }  int clickCount=1;  int index;switch (motionEvent.getAction()) {case MotionEvent.ACTION_DOWN:    motionPointerId=motionEvent.getPointerId(0);  postEvent(new MouseEvent(motionEvent,motionEvent.getEventTime(),MouseEvent.PRESS,modifiers,(int)motionEvent.getX(),(int)motionEvent.getY(),LEFT,clickCount));break;case MotionEvent.ACTION_MOVE:index=motionEvent.findPointerIndex(motionPointerId);if (index != -1) {postEvent(new MouseEvent(motionEvent,motionEvent.getEventTime(),MouseEvent.DRAG,modifiers,(int)motionEvent.getX(index),(int)motionEvent.getY(index),LEFT,clickCount));}break;case MotionEvent.ACTION_UP:index=motionEvent.findPointerIndex(motionPointerId);if (index != -1) {postEvent(new MouseEvent(motionEvent,motionEvent.getEventTime(),MouseEvent.RELEASE,modifiers,(int)motionEvent.getX(index),(int)motionEvent.getY(index),LEFT,clickCount));}break;}}  }
class C{  @Override @Deprecated public int deleteNotebook(LinkedNotebook linkedNotebook) throws TException, EDAMUserException, EDAMSystemException, EDAMNotFoundException {  AsyncLinkedNoteStoreClient sharedNoteStore=getClientFactory().createLinkedNoteStoreClient(linkedNotebook);  SharedNotebook sharedNotebook=sharedNoteStore.getAsyncClient().getClient().getSharedNotebookByAuth(sharedNoteStore.getAuthenticationToken());  Long[] ids={sharedNotebook.getId()};  getAsyncClient().getClient().expungeSharedNotebooks(getAuthenticationToken(),Arrays.asList(ids));  return getAsyncPersonalClient().getClient().expungeLinkedNotebook(getAsyncPersonalClient().getAuthenticationToken(),linkedNotebook.getGuid());}  }
class C{  public static boolean isWhiteSpace(char ch){  return (ch == 0x20) || (ch == 0x09) || (ch == 0xD)|| (ch == 0xA);}  }
class C{  private void verifyVPlexSystem(StorageSystem vplexSystem,boolean isAfterMigration){  if (isAfterMigration) {    URI activeProviderURI=vplexSystem.getActiveProviderURI();    Assert.assertNotNull("The active provider is null",activeProviderURI);    StringSet providerIds=vplexSystem.getProviders();    Assert.assertNotNull("The providers for the VPLEX system are null",providerIds);    Assert.assertEquals("There should only be a single provider for the VPLEX system",1,providerIds.size());    String providerId=providerIds.iterator().next();    Assert.assertEquals("The VPLEX system provider should be the active provider",activeProviderURI.toString(),providerId);  }}  }
class C{  @Override public String toString(){  final StringBuilder spacesString=new StringBuilder();  if (isLoaded()) {    boolean addComma=false;    for (    final AddressSpace addressSpace : getAddressSpaces()) {      if (addComma) {        spacesString.append(", ");      }      addComma=true;      spacesString.append("'");      spacesString.append(addressSpace.getName());      spacesString.append("'");    }  } else {    spacesString.append(String.format("unloaded, %d address spaces",m_project.getAddressSpaceCount()));  }  return String.format("Project '%s' [%s]",getName(),spacesString);}  }
class C{  public void join(Object[] pieces){  int sum=0;  for (int x=0; x < pieces.length; x++)   sum+=((double[])(pieces[x])).length;  int runningsum=0;  double[] newgenome=new double[sum];  for (int x=0; x < pieces.length; x++) {    System.arraycopy(pieces[x],0,newgenome,runningsum,((double[])(pieces[x])).length);    runningsum+=((double[])(pieces[x])).length;  }  genome=newgenome;}  }
class C{  public void stop(){  if (internalClient != null) {    internalClient.stop();    internalClient=null;  }  if (server != null) {    try {      server.stop();    } catch (    Exception ex) {      log.warn(String.format("Exception encountered stopping %s: %s",server.getClass().getSimpleName(),this.getServerName()),ex);    }  }}  }
class C{  public void initialize() throws ModelException {  HashSet<String> namesOfProcessedTables=new HashSet<String>();  HashSet<String> namesOfProcessedColumns=new HashSet<String>();  HashSet<String> namesOfProcessedFks=new HashSet<String>();  HashSet<String> namesOfProcessedIndices=new HashSet<String>();  int tableIdx=0;  for (Iterator<Table> tableIt=tables.iterator(); tableIt.hasNext(); tableIdx++) {    Table curTable=tableIt.next();    if ((curTable.getName() == null) || (curTable.getName().length() == 0)) {      throw new ModelException("The table nr. " + tableIdx + " has no name");    }    if (namesOfProcessedTables.contains(curTable.getFullyQualifiedTableName())) {      throw new ModelException("There are multiple tables with the name " + curTable.getName());    }    namesOfProcessedTables.add(curTable.getFullyQualifiedTableName());    namesOfProcessedColumns.clear();    namesOfProcessedFks.clear();    namesOfProcessedIndices.clear();    for (int idx=0; idx < curTable.getColumnCount(); idx++) {      Column column=curTable.getColumn(idx);      if ((column.getName() == null) || (column.getName().length() == 0)) {        throw new ModelException("The column nr. " + idx + " in table "+ curTable.getName()+ " has no name");      }      if (namesOfProcessedColumns.contains(column.getName())) {        throw new ModelException("There are multiple column with the name " + column.getName() + " in the table "+ curTable.getName());      }      namesOfProcessedColumns.add(column.getName());      if ((column.getMappedType() == null) || (column.getMappedType().length() == 0)) {        throw new ModelException("The column nr. " + idx + " in table "+ curTable.getName()+ " has no type");      }      if ((column.getMappedTypeCode() == Types.OTHER) && !"OTHER".equalsIgnoreCase(column.getMappedType())) {        throw new ModelException("The column nr. " + idx + " in table "+ curTable.getName()+ " has an unknown type "+ column.getMappedType());      }      namesOfProcessedColumns.add(column.getName());    }    for (int idx=0; idx < curTable.getForeignKeyCount(); idx++) {      ForeignKey fk=curTable.getForeignKey(idx);      String fkName=(fk.getName() == null ? "" : fk.getName());      String fkDesc=(fkName.length() == 0 ? "nr. " + idx : fkName);      if (fkName.length() > 0) {        if (namesOfProcessedFks.contains(fkName)) {          throw new ModelException("There are multiple foreign keys in table " + curTable.getName() + " with the name "+ fkName);        }        namesOfProcessedFks.add(fkName);      }      if (fk.getForeignTable() == null) {        Table targetTable=findTable(fk.getForeignTableName(),true);        if (targetTable != null) {          fk.setForeignTable(targetTable);        } else {          log.debug("The foreignkey " + fkDesc + " in table "+ curTable.getName()+ " references the undefined table "+ fk.getForeignTableName()+ ".  This could be because the foreign key table was in another schema which is a bug that should be fixed in the future.");        }      }      if (fk.getForeignTable() != null) {        for (int refIdx=0; refIdx < fk.getReferenceCount(); refIdx++) {          Reference ref=fk.getReference(refIdx);          if (ref.getLocalColumn() == null) {            Column localColumn=curTable.findColumn(ref.getLocalColumnName(),true);            if (localColumn == null) {              throw new ModelException("The foreignkey " + fkDesc + " in table "+ curTable.getName()+ " references the undefined local column "+ ref.getLocalColumnName());            } else {              ref.setLocalColumn(localColumn);            }          }          if (ref.getForeignColumn() == null) {            Column foreignColumn=fk.getForeignTable().findColumn(ref.getForeignColumnName(),true);            if (foreignColumn == null) {              throw new ModelException("The foreignkey " + fkDesc + " in table "+ curTable.getName()+ " references the undefined local column "+ ref.getForeignColumnName()+ " in table "+ fk.getForeignTable().getName());            } else {              ref.setForeignColumn(foreignColumn);            }          }        }      }    }    for (int idx=0; idx < curTable.getIndexCount(); idx++) {      IIndex index=curTable.getIndex(idx);      String indexName=(index.getName() == null ? "" : index.getName());      if (indexName.length() > 0) {        if (namesOfProcessedIndices.contains(indexName)) {          throw new ModelException("There are multiple indices in table " + curTable.getName() + " with the name "+ indexName);        }        namesOfProcessedIndices.add(indexName);      }      for (int indexColumnIdx=0; indexColumnIdx < index.getColumnCount(); indexColumnIdx++) {        IndexColumn indexColumn=index.getColumn(indexColumnIdx);        Column column=curTable.findColumn(indexColumn.getName(),true);        indexColumn.setColumn(column);      }    }  }}  }
class C{  private static boolean ensureReducers(UUID nodeId,int reducers){  int[] reducersArr=PLAN.get().reducers(nodeId);  return reducers == 0 ? F.isEmpty(reducersArr) : (reducersArr != null && reducersArr.length == reducers);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String stackUrl(CrawlProfile profile,DigestURL url){  byte[] handle=ASCII.getBytes(profile.handle());  final byte[] urlhash=url.hash();  remove(urlhash);  int t=100;  while (t-- > 0) {    try {      long lt=this.index.getLoadTime(ASCII.String(urlhash));      if (lt < 0)       break;    } catch (    IOException e) {      return "exist-test failed: " + e.getMessage();    }    try {      Thread.sleep(100);    } catch (    final InterruptedException e) {    }    ConcurrentLog.fine("Switchboard","STACKURL: waiting for deletion, t=" + t);    if (t == 1)     this.index.fulltext().commit(false);  }  if (url.isFTP()) {    try {      this.crawler.putActive(handle,profile);      String userInfo=url.getUserInfo();      int p=userInfo == null ? -1 : userInfo.indexOf(':');      String user=userInfo == null ? FTPClient.ANONYMOUS : userInfo.substring(0,p);      String pw=userInfo == null || p == -1 ? "anomic" : userInfo.substring(p + 1);      this.crawlStacker.enqueueEntriesFTP(this.peers.mySeed().hash.getBytes(),profile.handle(),url.getHost(),url.getPort(),user,pw,false,profile.timezoneOffset());      return null;    } catch (    final Exception e) {      ConcurrentLog.logException(e);      return "problem crawling an ftp site: " + e.getMessage();    }  }  byte[] hosthash=new byte[6];  System.arraycopy(urlhash,6,hosthash,0,6);  Set<String> hosthashes=new HashSet<String>();  hosthashes.add(ASCII.String(hosthash));  this.crawlQueues.errorURL.removeHosts(hosthashes);  this.index.fulltext().remove(urlhash);  Document scraper;  try {    scraper=this.loader.loadDocument(url,CacheStrategy.IFFRESH,BlacklistType.CRAWLER,profile.getAgent());  } catch (  final IOException e) {    return "scraper cannot load URL: " + e.getMessage();  }  final String title=scraper == null ? url.toNormalform(true) : scraper.dc_title();  final String description=scraper.dc_description().length > 0 ? scraper.dc_description()[0] : "";  this.crawler.removePassive(handle);  this.crawler.putActive(handle,profile);  final String reasonString=this.crawlStacker.stackCrawl(new Request(this.peers.mySeed().hash.getBytes(),url,null,"CRAWLING-ROOT",new Date(),profile.handle(),0,profile.timezoneOffset()));  if (reasonString != null)   return reasonString;  final Set<String> tags=ListManager.string2set(BookmarkHelper.cleanTagsString("/crawlStart"));  tags.add("crawlStart");  final Set<String> keywords=scraper.dc_subject();  if (keywords != null) {    for (    final String k : keywords) {      final String kk=BookmarkHelper.cleanTagsString(k);      if (kk.length() > 0)       tags.add(kk);    }  }  final BookmarksDB.Bookmark bookmark=this.bookmarksDB.createorgetBookmark(url.toNormalform(true),"admin");  if (bookmark != null) {    bookmark.setProperty(BookmarksDB.Bookmark.BOOKMARK_TITLE,title);    bookmark.setProperty(BookmarksDB.Bookmark.BOOKMARK_DESCRIPTION,description);    bookmark.setPublic(false);    bookmark.setTags(tags,true);    this.bookmarksDB.saveBookmark(bookmark);  }  try {    this.tables.bookmarks.createBookmark(scraper,YMarkTables.USER_ADMIN,true,"crawlStart","/Crawl Start");  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }catch (  final Failure e) {    ConcurrentLog.logException(e);  }  return null;}  }
class C{  public Builder contentFrame(int contentFrame){  mContentFrame=contentFrame;  return this;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public static long realToVirtualFileSize(long reaFileSize){  int csize=CHUNK_MULTIPLE * 16 + 16;  long nchunks=((reaFileSize % csize) == 0) ? (reaFileSize / csize) : ((reaFileSize / csize) + 1);  return (reaFileSize > 78) ? reaFileSize - (nchunks * 16) - 78 : 0;}  }
class C{  public StructB(StructB other){  if (other.isSetAa()) {    this.aa=new StructA(other.aa);  }  if (other.isSetAb()) {    this.ab=new StructA(other.ab);  }}  }
class C{  public final CC maxHeight(String size){  ver.setSize(LayoutUtil.derive(ver.getSize(),null,null,ConstraintParser.parseUnitValue(size,false)));  return this;}  }
class C{  public void testParseFloatAndIntWhiteSpaces(){  testParseFloatWhiteSpaces("\\u00A0 ");  testParseFloatWhiteSpaces("\\t ");  testParseFloatWhiteSpaces("\\u00A0 ");  testParseFloatWhiteSpaces("\\u000C ");  testParseFloatWhiteSpaces("\\u000B ");  testParseFloatWhiteSpaces("\\u000D ");  testParseFloatWhiteSpaces("\\u000A ");  testParseFloatWhiteSpaces("\\u2028 ");  testParseFloatWhiteSpaces("\\u2029 ");}  }
class C{  public X509Attribute(String oid,ASN1EncodableVector value){  this.attr=new Attribute(new ASN1ObjectIdentifier(oid),new DERSet(value));}  }
class C{  public void actionPerformed(ActionEvent e){  SessionEditorIndirectRef sessionEditorRef=DesktopController.getInstance().getFrontmostSessionEditor();  SessionEditor sessionEditor=(SessionEditor)sessionEditorRef;  List modelNodes=sessionEditor.getSelectedModelComponents();  SubsessionSelection selection=new SubsessionSelection(modelNodes);  InternalClipboard.getInstance().setContents(selection,this);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public DLSN positionOnTheNextLedger(){  return new DLSN(logSegmentSequenceNo + 1,0,0);}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  protected static final long makeKey(int i1,int i2){  return (i1 < i2) ? ((((long)i1) << 32) | i2) : ((((long)i2) << 32) | i1);}  }
class C{  public static void requireNonNullNorEmpty(String s){  if (s == null) {    throw new NullPointerException();  }  if (s.isEmpty()) {    throw new IllegalArgumentException();  }}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  double[] oldKeys=_set;  int[] oldVals=_values;  byte[] oldStates=_states;  _set=new double[newCapacity];  _values=new int[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      double o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  public static void test(long n,long N){  RandomSamplingAssistant assistant=new RandomSamplingAssistant(n,N,null);  cern.colt.list.LongArrayList sample=new cern.colt.list.LongArrayList((int)n);  cern.colt.Timer timer=new cern.colt.Timer().start();  for (long i=0; i < N; i++) {    if (assistant.sampleNextElement()) {      sample.add(i);    }  }  timer.stop().display();  System.out.println("sample=" + sample);  System.out.println("Good bye.\n");}  }
class C{  @Override public void removeInstanceListener(InstanceListener dsl){  m_instanceListeners.remove(dsl);}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  private static long parseExpires(String s,int pos,int limit){  pos=dateCharacterOffset(s,pos,limit,false);  int hour=-1;  int minute=-1;  int second=-1;  int dayOfMonth=-1;  int month=-1;  int year=-1;  Matcher matcher=TIME_PATTERN.matcher(s);  while (pos < limit) {    int end=dateCharacterOffset(s,pos + 1,limit,true);    matcher.region(pos,end);    if (hour == -1 && matcher.usePattern(TIME_PATTERN).matches()) {      hour=Integer.parseInt(matcher.group(1));      minute=Integer.parseInt(matcher.group(2));      second=Integer.parseInt(matcher.group(3));    } else     if (dayOfMonth == -1 && matcher.usePattern(DAY_OF_MONTH_PATTERN).matches()) {      dayOfMonth=Integer.parseInt(matcher.group(1));    } else     if (month == -1 && matcher.usePattern(MONTH_PATTERN).matches()) {      String monthString=matcher.group(1).toLowerCase(Locale.US);      month=MONTH_PATTERN.pattern().indexOf(monthString) / 4;    } else     if (year == -1 && matcher.usePattern(YEAR_PATTERN).matches()) {      year=Integer.parseInt(matcher.group(1));    }    pos=dateCharacterOffset(s,end + 1,limit,false);  }  if (year >= 70 && year <= 99)   year+=1900;  if (year >= 0 && year <= 69)   year+=2000;  if (year < 1601)   throw new IllegalArgumentException();  if (month == -1)   throw new IllegalArgumentException();  if (dayOfMonth < 1 || dayOfMonth > 31)   throw new IllegalArgumentException();  if (hour < 0 || hour > 23)   throw new IllegalArgumentException();  if (minute < 0 || minute > 59)   throw new IllegalArgumentException();  if (second < 0 || second > 59)   throw new IllegalArgumentException();  Calendar calendar=new GregorianCalendar(UTC);  calendar.setLenient(false);  calendar.set(Calendar.YEAR,year);  calendar.set(Calendar.MONTH,month - 1);  calendar.set(Calendar.DAY_OF_MONTH,dayOfMonth);  calendar.set(Calendar.HOUR_OF_DAY,hour);  calendar.set(Calendar.MINUTE,minute);  calendar.set(Calendar.SECOND,second);  calendar.set(Calendar.MILLISECOND,0);  return calendar.getTimeInMillis();}  }
class C{  public static String prepareString(String parse){  parse=cleanUpPattern1.matcher(parse).replaceAll(" ");  parse=cleanUpPattern2.matcher(parse).replaceAll("((");  parse=cleanUpPattern3.matcher(parse).replaceAll("))");  parse=cleanUpPattern4.matcher(parse).replaceFirst("(TOP (");  return parse.trim();}  }
class C{  public static String verifySingleRecipient(final Context context,final long threadId,final String recipientStr){  if (threadId <= 0) {    LogTag.error("verifySingleRecipient threadId is ZERO, recipient: " + recipientStr);    LogTag.dumpInternalTables(context);    return recipientStr;  }  Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,"_id=" + Long.toString(threadId),null,null);  if (c == null) {    LogTag.error("verifySingleRecipient threadId: " + threadId + " resulted in NULL cursor , recipient: "+ recipientStr);    LogTag.dumpInternalTables(context);    return recipientStr;  }  String address=recipientStr;  String recipientIds;  try {    if (!c.moveToFirst()) {      LogTag.error("verifySingleRecipient threadId: " + threadId + " can't moveToFirst , recipient: "+ recipientStr);      LogTag.dumpInternalTables(context);      return recipientStr;    }    recipientIds=c.getString(RECIPIENT_IDS);  }  finally {    c.close();  }  String[] ids=recipientIds.split(" ");  if (ids.length != 1) {    return recipientStr;  }  address=RecipientIdCache.getSingleAddressFromCanonicalAddressInDb(context,ids[0]);  if (TextUtils.isEmpty(address)) {    LogTag.error("verifySingleRecipient threadId: " + threadId + " getSingleNumberFromCanonicalAddresses returned empty number for: "+ ids[0]+ " recipientIds: "+ recipientIds);    LogTag.dumpInternalTables(context);    return recipientStr;  }  if (PhoneNumberUtils.compareLoosely(recipientStr,address)) {    return recipientStr;  }  if (context instanceof Activity) {    LogTag.warnPossibleRecipientMismatch("verifySingleRecipient for threadId: " + threadId + " original recipient: "+ recipientStr+ " recipient from DB: "+ address,(Activity)context);  }  LogTag.dumpInternalTables(context);  if (Log.isLoggable(LogTag.THREAD_CACHE,Log.VERBOSE)) {    LogTag.debug("verifySingleRecipient for threadId: " + threadId + " original recipient: "+ recipientStr+ " recipient from DB: "+ address);  }  return address;}  }
class C{  public String statusFrequencyTipText(){  return "How often to report progress to the status bar.";}  }
class C{  public Builder removeRole(Role role){  this.roles.remove(role);  return this;}  }
class C{  public static void sort(byte[] a){  DualPivotQuicksort.sort(a,0,a.length - 1);}  }
class C{  private void verifyInstructions(String where){  Enumeration<BasicBlock> bbEnum=cfg.basicBlocks();  while (bbEnum.hasMoreElements()) {    BasicBlock block=bbEnum.nextElement();    IREnumeration.AllInstructionsEnum instructions=new IREnumeration.AllInstructionsEnum(this,block);    boolean startingInstructionsPassed=false;    while (instructions.hasMoreElements()) {      Instruction instruction=instructions.nextElement();      IREnumeration.AllUsesEnum useOperands=new IREnumeration.AllUsesEnum(this,instruction);      while (useOperands.hasMoreElements()) {        Operand use=useOperands.nextElement();        if (use.instruction != instruction) {          verror(where,"In block " + block + " for instruction "+ instruction+ " the back link in the use of operand "+ use+ " is invalid and references "+ use.instruction);        }        if ((IRStage >= MIR) && (use.isRegister()) && (use.asRegister().getRegister().isValidation())) {          verror(where,"In block " + block + " for instruction "+ instruction+ " the use operand "+ use+ " is invalid as it is a validation register and this IR is in MIR form");        }      }      IREnumeration.AllDefsEnum defOperands=new IREnumeration.AllDefsEnum(this,instruction);      while (defOperands.hasMoreElements()) {        Operand def=defOperands.nextElement();        if (def.instruction != instruction) {          verror(where,"In block " + block + " for instruction "+ instruction+ " the back link in the def of operand "+ def+ " is invalid and references "+ def.instruction);        }        if ((IRStage >= MIR) && (def.isRegister()) && (def.asRegister().getRegister().isValidation())) {          verror(where,"In block " + block + " for instruction "+ instruction+ " the def operand "+ def+ " is invalid as it is a validation register and this IR is in MIR form");        }      }      if (Binary.conforms(instruction) && instruction.operator().isCommutative()) {        Operand val1=Binary.getVal1(instruction);        if (val1.isConstant() && !val1.isMovableObjectConstant()) {          verror(where,"Non-canonical commutative operation " + instruction);        }      }      if (!startingInstructionsPassed) {        if (Label.conforms(instruction)) {          continue;        }        if (Phi.conforms(instruction)) {          if ((!inSSAForm()) && (!inSSAFormAwaitingReEntry())) {            verror(where,"Phi node encountered but SSA not computed");          }          continue;        }        startingInstructionsPassed=true;      }switch (instruction.getOpcode()) {case PHI_opcode:case LABEL_opcode:        verror(where,"Unexpected instruction in the middle of a basic block " + instruction);case INT_IFCMP_opcode:case INT_IFCMP2_opcode:case LONG_IFCMP_opcode:case FLOAT_IFCMP_opcode:case DOUBLE_IFCMP_opcode:case REF_IFCMP_opcode:      instruction=instructions.nextElement();    if (!Goto.conforms(instruction) && !BBend.conforms(instruction)) {      if ((VM.BuildForIA32 && !org.jikesrvm.compilers.opt.ir.ia32.MIR_Branch.conforms(instruction)) || (VM.BuildForPowerPC && !org.jikesrvm.compilers.opt.ir.ppc.MIR_Branch.conforms(instruction))) {        verror(where,"Unexpected instruction after IFCMP " + instruction);      }    }  if (Goto.conforms(instruction) || ((VM.BuildForIA32 && org.jikesrvm.compilers.opt.ir.ia32.MIR_Branch.conforms(instruction)) || (VM.BuildForPowerPC && org.jikesrvm.compilers.opt.ir.ppc.MIR_Branch.conforms(instruction)))) {    instruction=instructions.nextElement();    if (!BBend.conforms(instruction)) {      verror(where,"Unexpected instruction after GOTO/MIR_BRANCH " + instruction);    }  }if (instructions.hasMoreElements()) {  verror(where,"Unexpected instructions after BBEND " + instructions.nextElement());}break;case TABLESWITCH_opcode:case LOOKUPSWITCH_opcode:case ATHROW_opcode:case RETURN_opcode:case GOTO_opcode:Instruction next=instructions.nextElement();if (!BBend.conforms(next)) {verror(where,"Unexpected instruction after " + instruction + "\n"+ next);}if (instructions.hasMoreElements()) {verror(where,"Unexpected instructions after BBEND " + instructions.nextElement());}break;case BBEND_opcode:if (instructions.hasMoreElements()) {verror(where,"Unexpected instructions after BBEND " + instructions.nextElement());}break;default :}}}}  }
class C{  public Iterator<T> iterator(){  return inorder();}  }
class C{  @Override public void unexport(){  super.unexport();  exporterMap.remove(key);}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  String s=in.readUTF();  if (s == null || s.length() == 0) {    byte[] ba=new byte[in.readInt()];    in.readFully(ba);    s=new String(ba);  }  try {    parse(s);  } catch (  MimeTypeParseException e) {    throw new IOException(e.toString());  }}  }
class C{  protected CCMenuItemFont(CCLabel label,CCNode rec,String cb){  super(label,rec,cb);}  }
class C{  public LoadRecentFileAction(Application app,@Nullable View view,URI uri){  super(app,view);  this.uri=uri;  setMayCreateView(true);  putValue(Action.NAME,URIUtil.getName(uri));}  }
class C{  public final AlertDialog initiateScan(){  return initiateScan(ALL_CODE_TYPES,-1);}  }
class C{  private void signalTimestampingStatus(SetTimestampingStatusMessage.Status status){  SetTimestampingStatusMessage statusMessage=new SetTimestampingStatusMessage(status);  logManagerRef.tell(statusMessage,ActorRef.noSender());}  }
class C{  private void gotoPageByRef(final String ref){  final PdfObject Aobj=decode_pdf.getOutlineData().getAobj(ref);  if (Aobj != null) {    decode_pdf.getFormRenderer().getActionHandler().gotoDest(Aobj,ActionHandler.MOUSECLICKED,PdfDictionary.Dest);  }}  }
class C{  private void addDrawer(JFXDrawer drawer){  if (drawer == null)   return;  if (drawers.size() == 0) {    if (content != null)     drawer.setContent(content);    this.getChildren().add(drawer);  } else {    drawer.setContent(drawers.get(drawers.size() - 1));    this.getChildren().add(drawer);  }  drawer.sidePane.addEventHandler(MouseEvent.MOUSE_PRESSED,null);  drawer.sidePane.addEventHandler(MouseEvent.MOUSE_DRAGGED,null);  drawer.sidePane.addEventHandler(MouseEvent.MOUSE_RELEASED,null);  drawers.add(drawer);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static final AABB fromMinMax(Vec3D min,Vec3D max){  Vec3D a=Vec3D.min(min,max);  Vec3D b=Vec3D.max(min,max);  return new AABB(a.interpolateTo(b,0.5f),b.sub(a).scaleSelf(0.5f));}  }
class C{  private void validateMessageOutput(String output){  String[] lines=output.trim().split("\n");  assertThat(lines[0]).startsWith("polyglot.test.TestService -> ");  ImmutableList<String> expectedLines=ImmutableList.of("polyglot.test.TestService/TestMethodStream","message[<optional> <single>]: STRING","foo[<optional> <single>] {","message[<optional> <single>]: STRING","}");  for (int i=0; i < expectedLines.size(); i++) {    assertThat(lines[i + 1].trim()).isEqualTo(expectedLines.get(i));  }}  }
class C{  @SuppressWarnings("unchecked") protected Result doInBackground(Params... params){  mParam=params[0];  return mOps.doInBackground(mParam);}  }
class C{  protected boolean hasAlert(){  return (alert[0] != 0);}  }
class C{  public static void handlePostChangeDimensionEvent(EntityPlayerMP playerIn,WorldServer fromWorld,WorldServer toWorld){}  }
class C{  public static <K,V>void forEachKeyValue(Map<K,V> map,Procedure2<? super K,? super V> procedure,int minForkSize,int taskCount,Executor executor){  if (map.size() > minForkSize) {    Procedure<Pair<K,V>> pairProcedure=new PairProcedure<>(procedure);    ParallelIterate.forEachInListOnExecutor(MapIterate.toListOfPairs(map),new PassThruProcedureFactory<>(pairProcedure),new PassThruCombiner<>(),minForkSize,taskCount,executor);  } else {    MapIterate.forEachKeyValue(map,procedure);  }}  }
class C{  public void repaint(long tm,int x,int y,int w,int h){  Container parent=getParent();  if (parent != null)   parent.repaint(tm,x + getX(),y + getY(),w,h); else   super.repaint(tm,x,y,w,h);}  }
class C{  public void addFormField(String name,String value){  mWriter.append("--" + mBoundary).append(LINE_FEED);  mWriter.append("Content-Disposition: form-data; name=\"" + name + "\"").append(LINE_FEED);  mWriter.append("Content-Type: text/plain; charset=" + mCharset).append(LINE_FEED);  mWriter.append(LINE_FEED);  mWriter.append(value).append(LINE_FEED);  mWriter.flush();}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public java_cup.runtime.symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$do_action(act_num,parser,stack,top);}  }
class C{  public static InternalDistributedMember readInternalDistributedMember(DataInput in) throws IOException, ClassNotFoundException {  InternalDistributedMember o=new InternalDistributedMember();  InternalDataSerializer.invokeFromData(o,in);  return o;}  }
class C{  public static boolean useElectricItem(ItemStack aStack,int aCharge,EntityPlayer aPlayer){  try {    if (isElectricItem(aStack)) {      ic2.api.item.ElectricItem.manager.use(aStack,0,aPlayer);      if (ic2.api.item.ElectricItem.manager.canUse(aStack,aCharge)) {        return ic2.api.item.ElectricItem.manager.use(aStack,aCharge,aPlayer);      }    }  } catch (  Throwable e) {  }  return false;}  }
class C{  public void addLayers(String[] ls){  addLayers(ls,null);}  }
class C{  private void convertLinearInterpolation2(float[] inSamples,double inSampleOffset,int inSampleCount,double increment,float[] outSamples,int outSampleOffset,int outSampleCount,float[] history,int historyLength){  if (DEBUG_STREAM) {    TDebug.out("convertLinearInterpolate2(inSamples[" + inSamples.length + "], "+ ((int)inSampleOffset)+ " to "+ ((int)(inSampleOffset + increment * (outSampleCount - 1)))+ ", "+ "outSamples["+ outSamples.length+ "], "+ outSampleOffset+ " to "+ (outSampleOffset + outSampleCount - 1)+ ")");    System.out.flush();  }  try {    int endSampleOffset=outSampleOffset + outSampleCount;    double dHistoryLength=historyLength;    while (inSampleOffset < 0.0d && outSampleOffset < endSampleOffset) {      double dInIndex=(inSampleOffset + dHistoryLength);      int histIndex=(int)dInIndex;      float factor=(float)(dInIndex - histIndex);      outSamples[outSampleOffset]=(history[histIndex - 1] * (1.0f - factor)) + (history[histIndex] * factor);      inSampleOffset+=increment;      outSampleOffset++;    }    while (inSampleOffset < 1.0d && outSampleOffset < endSampleOffset) {      float factor=(float)inSampleOffset;      outSamples[outSampleOffset]=(history[historyLength - 1] * (1.0f - factor)) + (inSamples[0] * factor);      inSampleOffset+=increment;      outSampleOffset++;    }    while (outSampleOffset < endSampleOffset) {      int iInIndex=(int)inSampleOffset;      float factor=(float)(inSampleOffset - iInIndex);      outSamples[outSampleOffset]=(inSamples[iInIndex - 1] * (1.0f - factor)) + (inSamples[iInIndex] * factor);      inSampleOffset+=increment;      outSampleOffset++;    }  } catch (  ArrayIndexOutOfBoundsException aioobe) {    if (DEBUG_STREAM_PROBLEMS || TDebug.TraceAllExceptions) {      TDebug.out("**** INDEX OUT OF BOUNDS ****** inSampleOffset=" + inSampleOffset + "  inSamples.length="+ inSamples.length+ "  outSampleOffset="+ outSampleOffset+ "  outSamples.length="+ outSamples.length);    }    if (TDebug.TraceAllExceptions) {      aioobe.printStackTrace();    }  }}  }
class C{  void sendRequest(MultiplexConnectionInfo info,int len) throws IOException {synchronized (dataOut) {    if (alive && !info.closed)     try {      dataOut.writeByte(REQUEST);      dataOut.writeShort(info.id);      dataOut.writeInt(len);      dataOut.flush();    } catch (    IOException e) {      multiplexLog.log(Log.BRIEF,"exception: ",e);      shutDown();      throw e;    }  }}  }
class C{  protected boolean nodeMatches(Node node,Class<? extends Node> cls,String uri){  if (node.getClass() == cls) {    return uri == null || NodeUtil.isOriginalURI(node,uri);  }  return false;}  }
class C{  public Builder addSearchDomain(String domain){  if (mConfig.searchDomains == null) {    mConfig.searchDomains=new ArrayList<String>();  }  mConfig.searchDomains.add(domain);  return this;}  }
class C{  public static void writeToFile(TDoubleDoubleHashMap values,String filename,String xLabel,String yLabel) throws IOException {  StatsWriter.writeHistogram(values,xLabel,yLabel,filename);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @RequestMapping(value="/account/change_password",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){  if (!checkPasswordLength(password)) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  userService.changePassword(password);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  boolean canReplace(ReplaceHolder rh){  return isValidEdit(rh);}  }
class C{  public void test_addPathToNameLintLbyte_array() throws IOException {  int[] types={GeneralName.OTHER_NAME,GeneralName.RFC822_NAME,GeneralName.DNS_NAME,GeneralName.X400_ADDR,GeneralName.DIR_NAME,GeneralName.EDIP_NAME,GeneralName.UR_ID,GeneralName.IP_ADDR,GeneralName.REG_ID};  for (int i=0; i < types.length; i++) {    try {      new X509CertSelector().addPathToName(types[i],(byte[])null);      fail("No expected NullPointerException for type: " + types[i]);    } catch (    NullPointerException expected) {    }  }}  }
class C{  @Override public int compareTo(final MutableInt other){  return this.value - other.value;}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  private static Value callValueOf(Session session,Value v,int isolateId){  v=safeValue(v,isolateId);  return callFunction(session,v,"valueOf",new Value[0],isolateId);}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public static float copySign(final float magnitude,final float sign){  return Float.intBitsToFloat(Float.floatToRawIntBits(sign) & Integer.MIN_VALUE | Float.floatToRawIntBits(magnitude) & Integer.MAX_VALUE);}  }
class C{  public static String calculateFileSha256(final Path file){  return calculateFileDigest("SHA-256",file);}  }
class C{  public void addColumn(Object columnName,Vector columnData){  columnIdentifiers.addElement(columnName);  if (columnData != null) {    int columnSize=columnData.size();    if (columnSize > getRowCount()) {      dataVector.setSize(columnSize);    }    justifyRows(0,getRowCount());    int newColumn=getColumnCount() - 1;    for (int i=0; i < columnSize; i++) {      Vector row=(Vector)dataVector.elementAt(i);      row.setElementAt(columnData.elementAt(i),newColumn);    }  } else {    justifyRows(0,getRowCount());  }  fireTableStructureChanged();}  }
class C{  public VisualItem addItem(){  return getItem(addRow());}  }
class C{  public static void performAnalyse(File cfile,File workspace,RtlsdrConf rtlconf,Cell cell,JTextPane log){  try {    Channels broadcast=Decode.getChannel("standalonecontrol",0,0,new File("/root/Bureau/temp/test2.cfile"));    appendString("test",log);  } catch (  ChannelError|BadLocationException ex) {  }}  }
class C{  public void stepOut() throws DebuggerException {  doStep(StepRequest.STEP_OUT);}  }
class C{  @Override public synchronized Socket accept() throws SocksException, IOException {  if (alreadyAccepted) {    throw new SocksException("SOCKS4/SOCKS5 protocol only allows one income connection");  }  alreadyAccepted=true;  return proxy.accept();}  }
class C{  @Override public SignatureLibraryRelease parse() throws IOException {  LOGGER.debug("Starting to parse hmm file.");  SignatureLibraryRelease release=new SignatureLibraryRelease(library,releaseVersion);  for (  Resource modelFile : modelFiles) {    if (modelFile.exists() && modelFile.getFile() != null) {      Map<String,String> familyIdFamilyNameMap=readInPantherFamilyNames(modelFile);      File booksDir=new File(modelFile.getFile().getPath() + "/books");      if (booksDir.exists() && booksDir.getAbsoluteFile() != null) {        String[] children=booksDir.getAbsoluteFile().list();        if (children != null) {          for (          String signatureAcc : children) {            String signatureName=familyIdFamilyNameMap.get(signatureAcc);            release.addSignature(createSignature(signatureAcc,signatureName,release));            createSubFamilySignatures(signatureAcc,familyIdFamilyNameMap,release);          }        } else {          LOGGER.debug("Either dir does not exist or is not a directory.");        }      }    }  }  return release;}  }
class C{  public ObjectCopier(int buffersize){  this(Executors.newFixedThreadPool(2),buffersize);}  }
class C{  public static ImageData convertToImageData(BufferedImage srcImage){  ImageData swtImageData=new ImageData(srcImage.getWidth(),srcImage.getHeight(),24,PALETTE_DATA);  int scansize=(((srcImage.getWidth() * 3) + 3) * 4) / 4;  WritableRaster alphaRaster=srcImage.getAlphaRaster();  byte[] alphaBytes=new byte[srcImage.getWidth()];  for (int y=0; y < srcImage.getHeight(); y++) {    int[] buff=srcImage.getRGB(0,y,srcImage.getWidth(),1,null,0,scansize);    swtImageData.setPixels(0,y,srcImage.getWidth(),buff,0);    if (alphaRaster != null) {      int[] alpha=alphaRaster.getPixels(0,y,srcImage.getWidth(),1,(int[])null);      for (int i=0; i < srcImage.getWidth(); i++)       alphaBytes[i]=(byte)alpha[i];      swtImageData.setAlphas(0,y,srcImage.getWidth(),alphaBytes,0);    }  }  return swtImageData;}  }
class C{  public GlyphMetrics(boolean horizontal,float advanceX,float advanceY,Rectangle2D bounds,byte glyphType){  this.horizontal=horizontal;  this.advanceX=advanceX;  this.advanceY=advanceY;  this.bounds=new Rectangle2D.Float();  this.bounds.setRect(bounds);  this.glyphType=glyphType;}  }
class C{  public UserProfileImpl(int userId,int product,int profile){  _userId=userId;  _product=product;  _profile=profile;}  }
class C{  public TextEditor(CharSequence text){  this.text=new StringBuilder(text);}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableAngleOrIdentValue res;  if (result == null) {    res=new AnimatableAngleOrIdentValue(target);  } else {    res=(AnimatableAngleOrIdentValue)result;  }  if (to == null) {    if (isIdent) {      res.hasChanged=!res.isIdent || !res.ident.equals(ident);      res.ident=ident;      res.isIdent=true;    } else {      short oldUnit=res.unit;      float oldValue=res.value;      super.interpolate(res,to,interpolation,accumulation,multiplier);      if (res.unit != oldUnit || res.value != oldValue) {        res.hasChanged=true;      }    }  } else {    AnimatableAngleOrIdentValue toValue=(AnimatableAngleOrIdentValue)to;    if (isIdent || toValue.isIdent) {      if (interpolation >= 0.5) {        if (res.isIdent != toValue.isIdent || res.unit != toValue.unit || res.value != toValue.value || res.isIdent && toValue.isIdent && !toValue.ident.equals(ident)) {          res.isIdent=toValue.isIdent;          res.ident=toValue.ident;          res.unit=toValue.unit;          res.value=toValue.value;          res.hasChanged=true;        }      } else {        if (res.isIdent != isIdent || res.unit != unit || res.value != value || res.isIdent && isIdent && !res.ident.equals(ident)) {          res.isIdent=isIdent;          res.ident=ident;          res.unit=unit;          res.value=value;          res.hasChanged=true;        }      }    } else {      super.interpolate(res,to,interpolation,accumulation,multiplier);    }  }  return res;}  }
class C{  public static String now(String dateFormat){  Calendar cal=Calendar.getInstance();  SimpleDateFormat sdf=new SimpleDateFormat(dateFormat);  return sdf.format(cal.getTime());}  }
class C{  public UDView pauseAnimation(){  AnimatorUtil.pause(mAnimators);  return this;}  }
class C{  protected Script newScript(Document doc){  return new JythonScript(doc);}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  public RequestBuilder body(RequestBody body){  this.body=body;  return this;}  }
class C{  public static boolean isFiniteChoice(RegExp re){  RegExp2 r;switch (re.type) {case sym.BAR:{      r=(RegExp2)re;      return isFiniteChoice(r.r1) && isFiniteChoice(r.r2);    }case sym.CONCAT:{    r=(RegExp2)re;    int l1=length(r.r1);    if (l1 < 0)     return false;    int l2=length(r.r2);    return l2 >= 0;  }case sym.STAR:case sym.PLUS:case sym.QUESTION:return false;case sym.CCLASS:case sym.CCLASSNOT:case sym.CHAR:case sym.CHAR_I:return true;case sym.STRING:case sym.STRING_I:{return true;}case sym.TILDE:case sym.BANG:return false;case sym.MACROUSE:return isFiniteChoice(macros.getDefinition((String)((RegExp1)re).content));}throw new Error("Unkown expression type " + re.type + " in "+ re);}  }
class C{  protected AbstractConnPool createConnectionPool(final HttpParams params){  AbstractConnPool acp=new ConnPoolByRoute(connOperator,params);  boolean conngc=true;  if (conngc) {    acp.enableConnectionGC();  }  return acp;}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message) throws HeadlessException {  showMessageDialog(parentComponent,message,UIManager.getString("OptionPane.messageDialogTitle",parentComponent),INFORMATION_MESSAGE);}  }
class C{  private void populatePropertyTypeCategory(){  if (propTypeId != null && !propTypeId.trim().isEmpty() && !propTypeId.equals("-1"))   propTypeMstr=(PropertyTypeMaster)getPersistenceService().find("from PropertyTypeMaster ptm where ptm.id = ?",Long.valueOf(propTypeId)); else   if (propertyModel != null && propertyModel.getPropertyDetail() != null && propertyModel.getPropertyDetail().getPropertyTypeMaster() != null && !propertyModel.getPropertyDetail().getPropertyTypeMaster().getId().equals(-1))   propTypeMstr=propertyModel.getPropertyDetail().getPropertyTypeMaster(); else   if (basicProp != null)   propTypeMstr=basicProp.getProperty().getPropertyDetail().getPropertyTypeMaster();  if (propTypeMstr != null) {    if (propTypeMstr.getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND))     setPropTypeCategoryMap(VAC_LAND_PROPERTY_TYPE_CATEGORY); else     setPropTypeCategoryMap(NON_VAC_LAND_PROPERTY_TYPE_CATEGORY);  } else   setPropTypeCategoryMap(Collections.emptyMap());}  }
class C{  public void clearWidgetsPanel(){  m_PanelWidgets.removeAll();}  }
class C{  public boolean containsValue(String val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSString.class)) {      NSString str=(NSString)o;      if (str.getContent().equals(val))       return true;    }  }  return false;}  }
class C{  public boolean computeScrollOffset(){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mScrollerX.mStartTime;final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {float q=(float)(elapsedTime) / duration;if (mInterpolator == null) {  q=viscousFluid(q);} else {  q=mInterpolator.getInterpolation(q);}mScrollerX.updateScroll(q);mScrollerY.updateScroll(q);} else {abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update()) {if (!mScrollerX.continueWhenFinished()) {mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update()) {if (!mScrollerY.continueWhenFinished()) {mScrollerY.finish();}}}break;}return true;}  }
class C{  static final public float parseFloat(int what){  return (float)what;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep createComputeSystem(ComputeSystemCreate param) throws DatabaseException {  ArgValidator.checkFieldValueFromSystemType(param.getSystemType(),"system_type",Arrays.asList(ComputeSystem.Type.ucs));  ComputeSystem.Type deviceType=ComputeSystem.Type.valueOf(param.getSystemType());  ArgValidator.checkFieldNotNull(param.getName(),"name");  ArgValidator.checkFieldValidIP(param.getIpAddress(),"ip_address");  ArgValidator.checkFieldNotNull(param.getPortNumber(),"port_number");  ArgValidator.checkFieldNotNull(param.getUserName(),"user_name");  ArgValidator.checkFieldNotNull(param.getPassword(),"password");  checkForDuplicateDevice(null,param.getIpAddress(),param.getPortNumber(),param.getName());  ComputeSystem cs=new ComputeSystem();  URI id=URIUtil.createId(ComputeSystem.class);  cs.setId(id);  cs.setLabel(param.getName());  cs.setIpAddress(param.getIpAddress());  cs.setPortNumber(param.getPortNumber());  cs.setSecure(param.getUseSSL());  cs.setUsername(param.getUserName());  cs.setPassword(param.getPassword());  cs.setSystemType(deviceType.name());  if (param.getOsInstallNetwork() != null) {    cs.setOsInstallNetwork(param.getOsInstallNetwork());  }  URI imageServerURI=param.getComputeImageServer();  associateImageServerToComputeSystem(imageServerURI,cs);  cs.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(cs));  cs.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.name());  _dbClient.createObject(cs);  recordAndAudit(cs,OperationTypeEnum.CREATE_COMPUTE_SYSTEM,true,AuditLogManager.AUDITOP_BEGIN);  return doDiscoverComputeSystem(cs);}  }
class C{  public Node<E> next(){  return next;}  }
class C{  public void addDataSet(T d){  if (d == null)   return;  mYValCount+=d.getEntryCount();  mYValueSum+=d.getYValueSum();  if (mDataSets.size() <= 0) {    mYMax=d.getYMax();    mYMin=d.getYMin();    if (d.getAxisDependency() == AxisDependency.LEFT) {      mLeftAxisMax=d.getYMax();      mLeftAxisMin=d.getYMin();    } else {      mRightAxisMax=d.getYMax();      mRightAxisMin=d.getYMin();    }  } else {    if (mYMax < d.getYMax())     mYMax=d.getYMax();    if (mYMin > d.getYMin())     mYMin=d.getYMin();    if (d.getAxisDependency() == AxisDependency.LEFT) {      if (mLeftAxisMax < d.getYMax())       mLeftAxisMax=d.getYMax();      if (mLeftAxisMin > d.getYMin())       mLeftAxisMin=d.getYMin();    } else {      if (mRightAxisMax < d.getYMax())       mRightAxisMax=d.getYMax();      if (mRightAxisMin > d.getYMin())       mRightAxisMin=d.getYMin();    }  }  mDataSets.add(d);  handleEmptyAxis(getFirstLeft(),getFirstRight());}  }
class C{  public static String encodeBase64URLSafeString(final byte[] binaryData){  return StringUtil.getStrUTF8(encodeBase64(binaryData,false,true));}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/restore") public TaskList restoreFullCopy(@PathParam("id") URI fullCopyURI) throws InternalException {  Volume fullCopyVolume=queryFullCopy(fullCopyURI);  checkForPendingTasks(Arrays.asList(fullCopyVolume.getTenant().getURI()),Arrays.asList(fullCopyVolume));  return getFullCopyManager().restoreFullCopy(fullCopyVolume.getAssociatedSourceVolume(),fullCopyURI);}  }
class C{  public static String segToStr(Segment seg){  String data="data: ";  for (  byte b : seg.data) {    data+=b;  }  return "<CONV=" + seg.conv + "><FLG="+ seg.flags+ "><SEQ="+ seg.seq+ ":"+ (seg.seq + seg.len)+ "><ACK="+ seg.ack+ "><WND="+ seg.wnd+ "><TS="+ seg.tsval+ "><TSR="+ seg.tsecr+ "><LEN="+ seg.len+ "> "+ data;}  }
class C{  public static char[] toAsciiChars(byte[] raw){  if (raw == null || raw.length == 0) {    return EMPTY_CHAR_ARRAY;  }  char[] l_ascii=new char[raw.length << 3];  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if ((raw[ii] & BITS[bits]) == 0) {        l_ascii[jj - bits]='0';      } else {        l_ascii[jj - bits]='1';      }    }  }  return l_ascii;}  }
class C{  public Builder widthDp(int drawerWidthDp){  if (activity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  this.drawerWidth=(int)TypedValue.applyDimension(1,drawerWidthDp,activity.getResources().getDisplayMetrics());  return this;}  }
class C{  public double[] toRealPoint(int scale){  if (mChart instanceof XYChart) {    XYChart chart=(XYChart)mChart;    return chart.toRealPoint(oldX,oldY,scale);  }  return null;}  }
class C{  public static UCrop of(@NonNull Uri source,@NonNull Uri destination){  return new UCrop(source,destination);}  }
class C{  public Cashier(){  super();}  }
class C{  public RangeNode(final VarNode var){  this(BOp.NOARGS,NV.asMap(new NV(Annotations.VAR,var)));}  }
class C{  public float distanceToOtherCircle(Circle circle){  return (float)Math.abs(Math.sqrt(Math.pow(circle.center.x - center.x,2) + Math.pow(circle.center.y - center.y,2)));}  }
class C{  final public boolean isRemoving(){  return mRemoving;}  }
class C{  public String toString(){  return "BadBinaryOpValueExpException: " + exp;}  }
class C{  protected void bind(Element e){  AbstractDocument doc=(AbstractDocument)e.getOwnerDocument();  if (doc != document) {    XBLManager xm=doc.getXBLManager();    if (xm instanceof DefaultXBLManager) {      ((DefaultXBLManager)xm).bind(e);      return;    }  }  if (e instanceof BindableElement) {    DefinitionRecord defRec=getActiveDefinition(e.getNamespaceURI(),e.getLocalName());    setActiveDefinition((BindableElement)e,defRec);  } else {    NodeList nl=getXblScopedChildNodes(e);    for (int i=0; i < nl.getLength(); i++) {      Node n=nl.item(i);      if (n.getNodeType() == Node.ELEMENT_NODE) {        bind((Element)n);      }    }  }}  }
class C{  public LinkingMorphemes(InputStream aStream) throws IOException {  this(new BufferedReader(new InputStreamReader(aStream)));}  }
class C{  private Properties loadProperties(){  Properties props=new Properties();  File file=new File("DataPartitioner.properties");  FileInputStream fis=null;  try {    if (file.exists()) {      fis=new FileInputStream(file);      props.load(fis);    }  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  } finally {    if (null != fis) {      try {        fis.close();      } catch (      IOException e) {        LOGGER.error(e,e.getMessage());      }    }  }  return props;}  }
class C{  public static Settings init(){  return settings;}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int classIndex,int missingLevel,boolean predictorMissing,boolean classMissing,int numTrain,int numClasses,ArrayList<String> accepts){  boolean[] result=new boolean[2];  Instances train=null;  Kernel kernel=null;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,classIndex,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    kernel=Kernel.makeCopies(getKernel(),1)[0];  } catch (  Exception ex) {    ex.printStackTrace();    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    kernel.buildKernel(train);    println("yes");    result[0]=true;  } catch (  Exception ex) {    boolean acceptable=false;    String msg;    if (ex.getMessage() == null) {      msg="";    } else {      msg=ex.getMessage().toLowerCase();    }    if (msg.indexOf("not in classpath") > -1) {      m_ClasspathProblems=true;    }    for (int i=0; i < accepts.size(); i++) {      if (msg.indexOf(accepts.get(i)) >= 0) {        acceptable=true;      }    }    println("no" + (acceptable ? " (OK error message)" : ""));    result[1]=acceptable;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during building");      println(": " + ex.getMessage() + "\n");      if (!acceptable) {        if (accepts.size() > 0) {          print("Error message doesn't mention ");          for (int i=0; i < accepts.size(); i++) {            if (i != 0) {              print(" or ");            }            print('"' + accepts.get(i) + '"');          }        }        println("here is the dataset:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");      }    }  }  return result;}  }
class C{  @Override protected boolean hasFab(){  return false;}  }
class C{  protected void debugCodeCall(String methodName,long param){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "("+ param+ ");");  }}  }
class C{  public static ChainingXmlParser<ChainingXmlParser<?>> parseXml(File file){  return new ChainingXmlParser<ChainingXmlParser<?>>(file);}  }
class C{  private void broadcast(Double avgSpeed,Double maxSpeed,Double distance,DataPoint[][] dataPoints){  for (  TrackingListener tl : listeners) {    if (avgSpeed != null) {      tl.updateAvgSpeed(avgSpeed);    }    if (maxSpeed != null) {      tl.updateMaxSpeed(maxSpeed);    }    if (distance != null) {      tl.updateDistance(distance);    }    if (dataPoints != null) {      tl.updateDistanceGraphSeries(dataPoints);    }  }}  }
class C{  void clearPanel(){  ((jmri.util.JmriJFrame)getTopLevelAncestor()).dispose();  userName.setText("");}  }
class C{  public int intX(){  return (int)Math.floor(this.x);}  }
class C{  public static String padLeft(String inString,int length){  return fixStringLength(inString,length,false);}  }
class C{  public final static String readUTF(DataInput in) throws IOException {  int utflen=in.readUnsignedShort();  byte[] bytearr=null;  char[] chararr=null;  if (in instanceof DataInputStream) {    DataInputStream dis=(DataInputStream)in;    if (dis.bytearr.length < utflen) {      dis.bytearr=new byte[utflen * 2];      dis.chararr=new char[utflen * 2];    }    chararr=dis.chararr;    bytearr=dis.bytearr;  } else {    bytearr=new byte[utflen];    chararr=new char[utflen];  }  int c, char2, char3;  int count=0;  int chararr_count=0;  in.readFully(bytearr,0,utflen);  while (count < utflen) {    c=(int)bytearr[count] & 0xff;    if (c > 127)     break;    count++;    chararr[chararr_count++]=(char)c;  }  while (count < utflen) {    c=(int)bytearr[count] & 0xff;switch (c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:      count++;    chararr[chararr_count++]=(char)c;  break;case 12:case 13:count+=2;if (count > utflen) throw new UTFDataFormatException("malformed input: partial character at end");char2=(int)bytearr[count - 1];if ((char2 & 0xC0) != 0x80) throw new UTFDataFormatException("malformed input around byte " + count);chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));break;case 14:count+=3;if (count > utflen) throw new UTFDataFormatException("malformed input: partial character at end");char2=(int)bytearr[count - 2];char3=(int)bytearr[count - 1];if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) throw new UTFDataFormatException("malformed input around byte " + (count - 1));chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));break;default :throw new UTFDataFormatException("malformed input around byte " + count);}}return new String(chararr,0,chararr_count);}  }
class C{  private void addNotification(final JSONObject requestJSONObject) throws RepositoryException {  final JSONObject notification=new JSONObject();  notification.put(Notification.NOTIFICATION_HAS_READ,false);  notification.put(Notification.NOTIFICATION_USER_ID,requestJSONObject.optString(Notification.NOTIFICATION_USER_ID));  notification.put(Notification.NOTIFICATION_DATA_ID,requestJSONObject.optString(Notification.NOTIFICATION_DATA_ID));  notification.put(Notification.NOTIFICATION_DATA_TYPE,requestJSONObject.optInt(Notification.NOTIFICATION_DATA_TYPE));  notificationRepository.add(notification);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length == 4) {    if (!params[1].equalsIgnoreCase("SEND")) {      throw new CommandException(service.getString(R.string.dcc_only_send));    }    File file=new File(params[3]);    if (!file.exists()) {      throw new CommandException(service.getString(R.string.dcc_file_not_found,params[3]));    }    service.getConnection(server.getId()).dccSendFile(file,params[2],60000);    Message message=new Message(service.getString(R.string.dcc_waiting_accept,params[2]));    message.setColor(Message.COLOR_GREY);    conversation.addMessage(message);    service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName()));  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public Vector2d add(double x,double y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  public int length(){  return (((((bytes[0])) & 0xff) << 8) + (((bytes[1])) & 0xff));}  }
class C{  public static PlusMult minusMult(final double constant){  return new PlusMult(-constant);}  }
class C{  private String findParentClassName(TypeElement typeElement){  final TypeElement parentTypeElement=findParentClass(typeElement);  if (parentTypeElement == null) {    return null;  }  String packageName=getPackageName(parentTypeElement);  return packageName + "." + getClassName(parentTypeElement,packageName);}  }
class C{  public static List<String> availableInstances() throws IOException {  Path confPath=Paths.get(SystemProperties.getConfigurationProxyConfPath());  return subDirectoryNames(confPath);}  }
class C{  @Deprecated @SuppressWarnings("UnusedDeclaration") public static void authenticate(AuthCallback callback,int themeResId,String phoneNumber,boolean emailCollection){  final DigitsAuthConfig.Builder digitsAuthConfigBuilder=new DigitsAuthConfig.Builder().withAuthCallBack(callback).withThemeResId(themeResId).withPhoneNumber(phoneNumber).withEmailCollection(emailCollection);  authenticate(digitsAuthConfigBuilder.build());}  }
class C{  public void test_DELETE_accessPath_delete_p() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,new URIImpl("http://www.w3.org/2000/01/rdf-schema#label"),null);  assertEquals(2,mutationResult);}  }
class C{  public static Fragment2 newInstance(int sectionNumber){  Fragment2 fragment=new Fragment2();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public <R1>FluentBiFunction<T1,T2,R1> matches(final Function<CheckValue1<R,R1>,CheckValue1<R,R1>> case1,final Supplier<? extends R1> otherwise){  return FluentFunctions.of(null);}  }
class C{  public boolean computeScrollOffset(){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mScrollerX.mStartTime;final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {final float q=mInterpolator.getInterpolation(elapsedTime / (float)duration);mScrollerX.updateScroll(q);mScrollerY.updateScroll(q);} else {abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update()) {if (!mScrollerX.continueWhenFinished()) {mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update()) {if (!mScrollerY.continueWhenFinished()) {mScrollerY.finish();}}}break;}return true;}  }
class C{  byte[] readBlock(long block) throws SQLException {  assertNotHolds(conn.getSession());synchronized (database) {synchronized (conn.getSession()) {      String sql="SELECT COMPRESSED, DATA FROM " + LOB_DATA + " WHERE BLOCK = ?";      PreparedStatement prep=prepare(sql);      prep.setLong(1,block);      ResultSet rs=prep.executeQuery();      if (!rs.next()) {        throw DbException.get(ErrorCode.IO_EXCEPTION_1,"Missing lob entry, block: " + block).getSQLException();      }      int compressed=rs.getInt(1);      byte[] buffer=rs.getBytes(2);      if (compressed != 0) {        buffer=compress.expand(buffer);      }      reuse(sql,prep);      return buffer;    }  }}  }
class C{  public void publishTile(String tag,int id,CustomTile customTile){  if (sService == null) {    Log.w(TAG,"not connected to CMStatusBarManagerService");    return;  }  int[] idOut=new int[1];  String pkg=mContext.getPackageName();  if (localLOGV)   Log.v(TAG,pkg + ": create(" + id+ ", "+ customTile+ ")");  try {    sService.createCustomTileWithTag(pkg,mContext.getOpPackageName(),tag,id,customTile,idOut,UserHandle.myUserId());    if (id != idOut[0]) {      Log.w(TAG,"notify: id corrupted: sent " + id + ", got back "+ idOut[0]);    }  } catch (  RemoteException e) {    Slog.w("CMStatusBarManager","warning: no cm status bar service");  }}  }
class C{  public static Document createXMLBooks(List inList,List outList,Locale locale,int sizeNewDist,int sizeRejectedDist,SessionInformation sessionInformation){  Document document=DocumentHelper.createDocument();  String[] message=new String[2];  if (sizeNewDist == 1) {    message[0]=RBUtil.getInstance(locale).getProperty(I18N_DISTRIBUTION_NEW_FOLDER_FOR_USER);  } else   if (sizeNewDist > 1) {    message[0]=MessageFormat.format(RBUtil.getInstance(locale).getProperty(I18N_DISTRIBUTION_NEW_FOLDERS_FOR_USER),new String[]{new Integer(sizeNewDist).toString()});  }  if (sizeRejectedDist == 1) {    message[1]=RBUtil.getInstance(locale).getProperty(I18N_DISTRIBUTION_NEW_FOLDER_REJECTED_FOR_USER);  } else   if (sizeRejectedDist > 1) {    message[1]=MessageFormat.format(RBUtil.getInstance(locale).getProperty(I18N_DISTRIBUTION_NEW_FOLDERS_REJECTED_FOR_USER),new String[]{new Integer(sizeRejectedDist).toString()});  }  Element root=document.addElement(XML_INVESICRES_TEXT);  Element sessionInfo=root.addElement(XML_SESSION_TEXT);  Element bookTree=root.addElement(XML_BOOKTREE_TEXT);  addSessionInfo(sessionInformation,sessionInfo);  Element messagesDist=root.addElement(XML_MESSAGES_TEXT);  Element messageText=null;  for (int i=0; i < message.length; i++) {    if (message[i] != null) {      messageText=messagesDist.addElement(XML_MESSAGE_TEXT);      messageText.addAttribute(XML_TYPE_TEXT,new Integer(i).toString()).add(DocumentHelper.createCDATA(message[i]));    }  }  bookTree.addElement(XML_ROOTNAME_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_ROOTNAME)));  Element inNode=addNode(XML_DIR_VALUE,XML_INBOOK_ID_VALUE,RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_NODE_INBOOK_NAME),XML_FALSE_VALUE,bookTree,0);  ScrRegStateByLanguage scrRegStateByLanguage=null;  Iterator it=null;  for (it=inList.iterator(); it.hasNext(); ) {    scrRegStateByLanguage=(ScrRegStateByLanguage)it.next();    addNode(XML_ARCH_VALUE,scrRegStateByLanguage.getIdocarchhdrId().toString(),scrRegStateByLanguage.getIdocarchhdrName(),String.valueOf(scrRegStateByLanguage.getScrregstateState()),inNode,scrRegStateByLanguage.getType());  }  Element outNode=addNode(XML_DIR_VALUE,XML_OUTBOOK_ID_VALUE,RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_NODE_OUTBOOK_NAME),XML_FALSE_VALUE,bookTree,0);  for (it=outList.iterator(); it.hasNext(); ) {    scrRegStateByLanguage=(ScrRegStateByLanguage)it.next();    addNode(XML_ARCH_VALUE,scrRegStateByLanguage.getIdocarchhdrId().toString(),scrRegStateByLanguage.getIdocarchhdrName(),String.valueOf(scrRegStateByLanguage.getScrregstateState()),outNode,scrRegStateByLanguage.getType());  }  return document;}  }
class C{  private void cannotSelect(){  select.setEnabled(false);}  }
class C{  public boolean isBeginningInstruction(){  if (predecessors.size() == 0) {    return false;  }  return predecessors.first().instructionIndex == -1;}  }
class C{  public URLConnection openConnection(Proxy proxy) throws IOException {  if (proxy == null) {    throw new IllegalArgumentException("proxy == null");  }  return streamHandler.openConnection(this,proxy);}  }
class C{  public ReadStreamOld openReadAndSaveBuffer() throws IOException {  closeWrite();  TempReadStream read=new TempReadStream(_head);  read.setFreeWhenDone(false);  return new ReadStreamOld(read);}  }
class C{  public void modelDestroyed(SessionEvent event){  reassessModel();}  }
class C{  public static String readFromFile(final File path) throws IOException {  FileInputStream fis=null;  try {    fis=new FileInputStream(path);    return readFromFile(fis);  }  finally {    if (fis != null) {      fis.close();    }  }}  }
class C{  public HessianDebugInputStream(Logger log,Level level){  this(null,log,level);}  }
class C{  public void reset(String tag,String label){  mTag=tag;  mLabel=label;  reset();}  }
class C{  public Prefix(){  super("text_transformation.prefix",2);}  }
class C{  public void paintFigure(Graphics graphics,Rectangle paintArea,ResourceManager manager){  paintFigure(graphics,paintArea,manager,null);}  }
class C{  public static void register(){  CommandCenter.register("trade",new TradeAction());}  }
class C{  public String companyName(){  return companyName;}  }
class C{  public synchronized void firePvChanged(PvChangeEvent e){  if (allowEvents && e.getType() != PvChangeEvent.PV_NOACTION) {    log.trace("PvChange:" + e.toString());    Integer evtMask;    Map.Entry curr;    ensurePvChangeListeners();    Set entries=PvChangeListeners.entrySet();    Iterator it=entries.iterator();    while (it.hasNext()) {      curr=(Map.Entry)it.next();      if (curr.getKey() != null && curr.getKey() != this) {        evtMask=(Integer)curr.getValue();        if ((evtMask.intValue() & e.getType()) != 0) {          log.trace("Notify:" + curr);          ((PvChangeListener)curr.getKey()).pvChanged(e);        }      }    }    lastChange=e.getTime();    lastChangeType=e.getType();    changes.put(e.getKey(),e);  }}  }
class C{  protected void updateSyntaxHighlightingInformation(){  Element map=getDefaultRootElement();  int numLines=map.getElementCount();  int lastTokenType=Token.NULL;  for (int i=0; i < numLines; i++) {    setSharedSegment(i);    lastTokenType=tokenMaker.getLastTokenTypeOnLine(s,lastTokenType);    lastTokensOnLines.set(i,lastTokenType);  }  fireChangedUpdate(new DefaultDocumentEvent(0,numLines - 1,DocumentEvent.EventType.CHANGE));}  }
class C{  private WebDocumentInfo createWebDocumentInfoFromPage(){  WebDocumentInfo info=new WebDocumentInfo();  WebDocumentBuilder documentBuilder=new WebDocumentBuilder();  NodeList<Element> mobileViewport=DomUtil.querySelectorAll(documentElement,"meta[name=\"viewport\"][content*=\"width=device-width\"]");  DomConverter converter=new DomConverter(documentBuilder);  converter.setIsMobileFriendly(mobileViewport.getLength() > 0);  Element walkerRoot=DomUtil.getArticleElement(documentElement);  converter.setHasArticleElement(walkerRoot != null);  if (walkerRoot != null) {    if (LogUtil.isLoggable(LogUtil.DEBUG_LEVEL_BOILER_PIPE_PHASES)) {      LogUtil.logToConsole("Extracted article element: " + walkerRoot);    }  } else {    walkerRoot=documentElement;  }  new DomWalker(converter).walk(walkerRoot);  info.document=documentBuilder.toWebDocument();  ensureTitleInitialized();  info.hiddenElements=converter.getHiddenElements();  return info;}  }
class C{  public synchronized void add(File file){  value.add(file);  setValue(value);}  }
class C{  @Nullable public static String showInputDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,@Nullable Icon icon){  return showInputDialog(message,title,icon,null,null);}  }
class C{  @Override protected void onCompleted(IoEventArgs e){  int transferred=e.getBytesTransferred();  if (transferred > 0) {    if (transferred < e.getCount()) {      e.setBuffer(e.getOffset() + transferred,e.getCount() - transferred);      receiveAsync();    } else {      receivePacket();      receiveAsync();    }  } else {    dispose();  }}  }
class C{  @Override public synchronized int size(){  return elementCount;}  }
class C{  public synchronized void garbageCollectPeers(){  for (  Peer p : mCurrentPeers) {    if (shouldGarbageCollectPeer(p)) {      garbageCollectPeer(p);    }  }}  }
class C{  public DViewAsymmetricKeyFields(JDialog parent,String title,RSAPrivateKey rsaPrivateKey){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  key=rsaPrivateKey;  initFields();}  }
class C{  public void decode(final byte[] data,final OutputStream uncompData,final boolean earlyChange){  if (data[0] == (byte)0x00 && data[1] == (byte)0x01) {    throw new RuntimeException("LZW flavour not supported.");  }  initializeStringTable();  this.data=data;  this.uncompData=uncompData;  this.earlyChange=earlyChange;  bytePointer=0;  nextData=0;  nextBits=0;  int code, oldCode=0;  byte string[];  while ((code=getNextCode()) != 257) {    if (code == 256) {      initializeStringTable();      code=getNextCode();      if (code == 257) {        break;      }      writeString(stringTable[code]);      oldCode=code;    } else {      if (code < tableIndex) {        string=stringTable[code];        writeString(string);        addStringToTable(stringTable[oldCode],string[0]);        oldCode=code;      } else {        string=stringTable[oldCode];        string=composeString(string,string[0]);        writeString(string);        addStringToTable(string);        oldCode=code;      }    }  }}  }
class C{  public boolean overlapsWith(int rangeOffset,int rangeLength){  if (isDeleted)   return false;  int end=rangeOffset + rangeLength;  int thisEnd=this.offset + this.length;  if (rangeLength > 0) {    if (this.length > 0)     return this.offset < end && rangeOffset < thisEnd;    return rangeOffset <= this.offset && this.offset < end;  }  if (this.length > 0)   return this.offset <= rangeOffset && rangeOffset < thisEnd;  return this.offset == rangeOffset;}  }
class C{  public void cacheForeignTokenAndKeys(TokenResponseArtifacts artifacts,String vdcID){  Token token=artifacts.getToken();  StorageOSUserDAO user=artifacts.getUser();  TokenKeysBundle bundle=artifacts.getTokenKeysBundle();  if (token != null && user != null) {    cacheForeignTokenArtifacts(token,user);  }  if (bundle != null) {    saveTokenKeysBundle(vdcID,bundle);  }}  }
class C{  @Deprecated public void startupPlugins(){  for (  PluginEntry entry : entryMap.values()) {    if (entry.onload) {      getPlugin(entry.service);    } else {      pluginMap.put(entry.service,null);    }  }}  }
class C{  public static void write(OutputStream out,NSObject root) throws IOException {  int minVersion=getMinimumRequiredVersion(root);  if (minVersion > VERSION_00) {    String versionString=minVersion == VERSION_10 ? "v1.0" : (minVersion == VERSION_15 ? "v1.5" : (minVersion == VERSION_20 ? "v2.0" : "v0.0"));    throw new IOException("The given property list structure cannot be saved. " + "The required version of the binary format (" + versionString + ") is not yet supported.");  }  BinaryPropertyListWriter w=new BinaryPropertyListWriter(out,minVersion);  w.write(root);}  }
class C{  public PrevisionVO nuevaPrevision(String idUser,String idOrganoRemitente,int tipoTransferencia,int tipoPrevision,String idArchivo,String codArchivo) throws ActionNotAllowedException {  if (tipoTransferencia == TipoTransferencia.ORDINARIA.getIdentificador())   checkPermission(TransferenciasSecurityManager.ALTA_PREVISION_ORDINARIA); else   if (tipoTransferencia == TipoTransferencia.EXTRAORDINARIA_SIGNATURADA.getIdentificador() || tipoTransferencia == TipoTransferencia.EXTRAORDINARIA_SIN_SIGNATURAR.getIdentificador())   checkPermission(TransferenciasSecurityManager.ALTA_PREVISION_EXTRAORDINARIA); else   if (tipoTransferencia == TipoTransferencia.ENTRE_ARCHIVOS.getIdentificador())   checkPermission(TransferenciasSecurityManager.ALTA_PREVISION_ENTRE_ARCHIVOS); else   throw new ArchivoModelException(getClass(),"nuevaPrevision","Tipo de transferencia desconocido: " + tipoTransferencia);  PrevisionVO prevision=new PrevisionVO();  prevision.setTipoprevision(tipoPrevision);  prevision.setTipotransferencia(tipoTransferencia);  prevision.setIdorgremitente(idOrganoRemitente);  prevision.setIdusrgestor(idUser);  PrevisionAuthorizationHelper authorizationHelper=getPrevisionAuthorizationHelper();  if (authorizationHelper.permitidaCreacionPrevision(prevision)) {    prevision.setEstado(EstadoPrevision.ABIERTA.getIdentificador());    int ano=DateUtils.getAnoActual();    prevision.setAno(Integer.toString(ano));    ServiceRepository services=ServiceRepository.getInstance(getServiceSession());    GestionFondosBI fondoBI=services.lookupGestionFondosBI();    if (tipoTransferencia != TipoTransferencia.ENTRE_ARCHIVOS.getIdentificador()) {      FondoVO fondo=fondoBI.getFondoXOrganoRemitente(idOrganoRemitente,idArchivo,codArchivo);      if (fondo == null) {        if (!authorizationHelper.permitidaModificacionFondo(prevision)) {          throw new ActionNotAllowedException(null,ArchivoErrorCodes.FONDO_DESTINO_NO_DEFINIDO,ArchivoModules.TRANSFERENCIAS_MODULE);        }      } else {        prevision.setIdfondodestino(fondo.getId());      }      GestionControlUsuariosBI controlUsuariosBI=services.lookupGestionControlUsuariosBI();      CAOrganoVO organoVO=controlUsuariosBI.getCAOrgProductorVOXId(idOrganoRemitente);      if (organoVO != null)       prevision.setIdarchivoreceptor(organoVO.getIdArchivoReceptor()); else       throw new ActionNotAllowedException(null,ArchivoErrorCodes.ARCHIVO_DESTINO_NO_DEFINIDO,ArchivoModules.TRANSFERENCIAS_MODULE);    }    authorizationHelper.configurePrevision(prevision);    return prevision;  } else   throw new ActionNotAllowedException(null,authorizationHelper.getErrorCode(),ArchivoModules.TRANSFERENCIAS_MODULE);}  }
class C{  public final boolean contains(Object s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s)     return true;  }  return false;}  }
class C{  public void addPieSegment(int dataIndex,float value,float startAngle,float angle){  mPieSegmentList.add(new PieSegment(dataIndex,value,startAngle,angle));}  }
class C{  private void addName(String name,SearchIndexEntryType type){  index.add(new SearchIndexEntry(name,type.getEntityType(),name,3000 + type.getMinorScore()));  if (name.indexOf(" ") > -1) {    addDescription(name,name,type,2000);  }}  }
class C{  private Certificate[] validateReply(String alias,Certificate userCert,Certificate[] replyCerts) throws Exception {  int i;  PublicKey userPubKey=userCert.getPublicKey();  for (i=0; i < replyCerts.length; i++) {    if (userPubKey.equals(replyCerts[i].getPublicKey())) {      break;    }  }  if (i == replyCerts.length) {    MessageFormat form=new MessageFormat(rb.getString("Certificate.reply.does.not.contain.public.key.for.alias."));    Object[] source={alias};    throw new Exception(form.format(source));  }  Certificate tmpCert=replyCerts[0];  replyCerts[0]=replyCerts[i];  replyCerts[i]=tmpCert;  X509Certificate thisCert=(X509Certificate)replyCerts[0];  for (i=1; i < replyCerts.length - 1; i++) {    int j;    for (j=i; j < replyCerts.length; j++) {      if (signedBy(thisCert,(X509Certificate)replyCerts[j])) {        tmpCert=replyCerts[i];        replyCerts[i]=replyCerts[j];        replyCerts[j]=tmpCert;        thisCert=(X509Certificate)replyCerts[i];        break;      }    }    if (j == replyCerts.length) {      throw new Exception(rb.getString("Incomplete.certificate.chain.in.reply"));    }  }  if (noprompt) {    return replyCerts;  }  Certificate topCert=replyCerts[replyCerts.length - 1];  Certificate root=getTrustedSigner(topCert,keyStore);  if (root == null && trustcacerts && caks != null) {    root=getTrustedSigner(topCert,caks);  }  if (root == null) {    System.err.println();    System.err.println(rb.getString("Top.level.certificate.in.reply."));    printX509Cert((X509Certificate)topCert,System.out);    System.err.println();    System.err.print(rb.getString(".is.not.trusted."));    String reply=getYesNoReply(rb.getString("Install.reply.anyway.no."));    if ("NO".equals(reply)) {      return null;    }  } else {    if (root != topCert) {      Certificate[] tmpCerts=new Certificate[replyCerts.length + 1];      System.arraycopy(replyCerts,0,tmpCerts,0,replyCerts.length);      tmpCerts[tmpCerts.length - 1]=root;      replyCerts=tmpCerts;    }  }  return replyCerts;}  }
class C{  public synchronized void add(Date x,double y){  super.add(x.getTime(),y);}  }
class C{  public static MosaicDefinition createMosaicDefinition(final Account creator,final MosaicLevy levy){  return createMosaicDefinition(creator,Utils.createMosaicId("alice.vouchers","alice's gift vouchers"),createMosaicProperties(),levy);}  }
class C{  protected void loadOrder(int C_Order_ID,boolean forInvoice){  loadTableOIS(getOrderData(C_Order_ID,forInvoice));}  }
class C{  public void stopButtonActionPerformed(){  clock.setRun(false);}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Verifies the given class.");    System.err.println("Usage: CheckClassAdapter " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[0].endsWith(".class")) {    cr=new ClassReader(new FileInputStream(args[0]));  } else {    cr=new ClassReader(args[0]);  }  verify(cr,false,new PrintWriter(System.err));}  }
class C{  private void putResize(long key,V value){  if (key == 0) {    zeroValue=value;    hasZeroValue=true;    return;  }  int index1=(int)(key & mask);  long key1=keyTable[index1];  if (key1 == EMPTY) {    keyTable[index1]=key;    valueTable[index1]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index2=hash2(key);  long key2=keyTable[index2];  if (key2 == EMPTY) {    keyTable[index2]=key;    valueTable[index2]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index3=hash3(key);  long key3=keyTable[index3];  if (key3 == EMPTY) {    keyTable[index3]=key;    valueTable[index3]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  push(key,value,index1,key1,index2,key2,index3,key3);}  }
class C{  public NTLMEngineException(String message){  super(message);}  }
class C{  public static RightThreadedBinaryTree<Integer> buildComplete(int n){  RightThreadedBinaryTree<Integer> bt=new RightThreadedBinaryTree<Integer>();  int b=(int)Math.pow(2,n - 1);  for (int i=0; i < n; i++) {    bt.insert(b);    for (int j=1; j <= Math.pow(2,i) - 1; j++) {      bt.insert(b + 2 * b * j);    }    b=b / 2;  }  return bt;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.602 -0400",hash_original_method="82856C516978904D9C3EC48D06DD6903",hash_generated_method="FF2BB6AE0551643335B3AE99C0DA3A53") public NameFileFilter(String name,IOCase caseSensitivity){  if (name == null) {    throw new IllegalArgumentException("The wildcard must not be null");  }  this.names=new String[]{name};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public static IceControlledAttribute createIceControlledAttribute(long tieBreaker){  IceControlledAttribute attribute=new IceControlledAttribute();  attribute.setTieBreaker(tieBreaker);  return attribute;}  }
class C{  public synchronized void close() throws IOException {  if (!initialized || closed) {    closed=true;    return;  }  for (  Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;  closed=true;}  }
class C{  public void removeCompressedThumbnail(){  mData.setCompressedThumbnail(null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void removeComponentListener(String formName,String componentName,Object listener){  if (localComponentListeners == null) {    return;  }  Hashtable formListeners=(Hashtable)localComponentListeners.get(formName);  if (formListeners == null) {    return;  }  Object currentListeners=formListeners.get(componentName);  if (currentListeners == null) {    return;  } else {    if (currentListeners instanceof Vector) {      ((Vector)currentListeners).removeElement(listener);      if (((Vector)currentListeners).size() == 0) {        formListeners.remove(componentName);      }    } else {      formListeners.remove(componentName);    }  }}  }
class C{  public QueryException(String message,int errorCode,SqlStates sqlState,Throwable cause){  super(message,cause);  this.message=message;  this.errorCode=errorCode;  this.sqlState=sqlState.getSqlState();}  }
class C{  public ColorPredicate(String input) throws IllegalArgumentException {  String rest=input.trim().toLowerCase();  if (rest.startsWith("leaf")) {    this.isLeaf=true;    rest=rest.substring(4).trim();  } else {    this.isLeaf=false;  }  int endOfStartToken=0;  while (endOfStartToken < rest.length() && Character.isLetter(rest.charAt(endOfStartToken))) {    endOfStartToken++;  }  String startToken=rest.substring(0,endOfStartToken);  String macro=getMacro(startToken);  if (macro != null) {    rest=macro;  }  if (rest.startsWith("some")) {    this.isSome=true;    rest=rest.substring(4).trim();  } else   if (rest.startsWith("every")) {    this.isSome=false;    rest=rest.substring(5).trim();  } else {    throw new IllegalArgumentException("Color predicate must have `every' or `some' specifier.");  }  this.set=0;  while (!rest.equals("")) {    if (rest.startsWith("omitted")) {      this.set=this.set | (1 << NUMBER_OF_OMITTED_STATE);      rest=rest.substring(7).trim();    } else     if (rest.startsWith("missing")) {      this.set=this.set | (1 << NUMBER_OF_MISSING_STATE);      rest=rest.substring(7).trim();    } else     if (rest.startsWith("(")) {      rest=rest.substring(1).trim();      int[][] stateSetSpec=new int[NUMBER_OF_PROVERS][];      for (int i=0; i < NUMBER_OF_PROVERS; i++) {        boolean invert=false;        if (rest.startsWith("-")) {          invert=true;          rest=rest.substring(1).trim();        }        boolean[] appears=new boolean[PROVER_STATUSES[i].length];        for (int j=0; j < appears.length; j++) {          appears[j]=invert;        }        String endChar=(i == NUMBER_OF_PROVERS - 1) ? ")" : ",";        while (rest.length() > 0 && !rest.startsWith(endChar)) {          int endOfToken=0;          while (endOfToken < rest.length() && Character.isLetter(rest.charAt(endOfToken))) {            endOfToken++;          }          String token=rest.substring(0,endOfToken);          rest=rest.substring(endOfToken).trim();          int statusNumber;          try {            statusNumber=numberOfProverStatus(i,token);          } catch (          IllegalArgumentException e) {            String errorMsg="Was expecting status of prover " + PROVER_NAMES[i] + " but found `"+ token+ "' followed by: \n `"+ rest+ "'";            throw new IllegalArgumentException(errorMsg);          }          appears[statusNumber]=!invert;        }        if (rest.length() == 0) {          throw new IllegalArgumentException("Color predicate specifier ended before `(...)' expression complete");        }        rest=rest.substring(1).trim();        int count=0;        for (int j=0; j < appears.length; j++) {          if (appears[j]) {            count++;          }        }        if (count == 0) {          if (invert) {            throw new IllegalArgumentException("A `-' must be followed by one or more statuses");          } else {            count=appears.length;            for (int j=0; j < count; j++) {              appears[j]=true;            }          }        }        stateSetSpec[i]=new int[count];        int k=0;        for (int j=0; j < appears.length; j++) {          if (appears[j]) {            stateSetSpec[i][k]=j;            k++;          }        }      }      this.set=this.set | bitVectorOfStates(stateSetSpec);    } else {      throw new IllegalArgumentException("Unexpected token at: `" + rest + "'");    }  }}  }
class C{  @SubscribeEvent public static void clientConnectedToServer(FMLNetworkEvent.ClientConnectedToServerEvent event){  final IThreadListener mainThread=Minecraft.getMinecraft();  mainThread.addScheduledTask(null);}  }
class C{  public void testJBossSEAMAdminCVE20101871(IBurpExtenderCallbacks callbacks,URL url,IHttpRequestResponse baseRequestResponse) throws MalformedURLException {  IExtensionHelpers helpers=callbacks.getHelpers();  List<String> headers=new ArrayList<>();  headers.add("POST " + JBOSS_ADMIN_PATHS.get(0) + " HTTP/1.1");  headers.add("Host: " + url.getHost() + ":"+ url.getPort());  headers.add("Content-Type: application/x-www-form-urlencoded");  headers.add("Cookie: JSESSIONID=4416F53DDE1DBC8081CDBDCDD1666FB0");  String body="actionOutcome=/success.xhtml?user%3d%23{expressions.getClass().forName('java.lang.Runtime').getDeclaredMethod('getRuntime')}";  byte[] seamMesssage=helpers.buildHttpMessage(headers,body.getBytes());  IHttpRequestResponse resp=callbacks.makeHttpRequest(baseRequestResponse.getHttpService(),seamMesssage);  byte[] httpResponse=resp.getResponse();  List<int[]> matches=getMatches(httpResponse,GREP_STRING_CVE20101871,helpers);  if (matches.size() > 0) {    callbacks.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),new URL(url.getProtocol(),url.getHost(),url.getPort(),"/admin-console/login.seam"),new CustomHttpRequestResponse(seamMesssage,httpResponse,baseRequestResponse.getHttpService()),TITLE_JBOSS_CVE_2010_1871,DESCRIPTION_JBOSS_CVE_2010_1871,REMEDY_CVE_2010_1871,Risk.High,Confidence.Certain));  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public void reset(){  table.getColumnModel().removeColumnModelListener(this);  columnModel=table.getColumnModel();  columnModel.addColumnModelListener(this);  int count=columnModel.getColumnCount();  allColumns=new ArrayList<>(count);  for (int i=0; i < count; i++) {    allColumns.add(columnModel.getColumn(i));  }}  }
class C{  public void addVersion(VersionTag tag){  this.versionTags.add(tag);}  }
class C{  private static String[] fracture(String str,String sep){  if (str.length() == 0) {    return new String[0];  }  ArrayList<String> res=new ArrayList<String>();  int in=0;  int curPos=0;  int i=str.indexOf(sep);  int len=sep.length();  while (i != -1) {    String s=str.substring(curPos,i);    res.add(s);    in++;    curPos=i + len;    i=str.indexOf(sep,curPos);  }  len=str.length();  if (curPos <= len) {    String s=str.substring(curPos,len);    in++;    res.add(s);  }  return res.toArray(new String[in]);}  }
class C{  public String toString(){  return "NamedStyle:" + getName() + " "+ attributes;}  }
class C{  private ReplaceTokens createJvmConfigTokens(){  ReplaceTokens.Token tokenJavaHome=createJavaHomeToken();  ReplaceTokens.Token tokenClassPath=createClassPathToken();  ReplaceTokens.Token tokenVmArgs=createVmArgsToken();  ReplaceTokens replaceConfig=new ReplaceTokens();  replaceConfig.addConfiguredToken(tokenJavaHome);  replaceConfig.addConfiguredToken(tokenClassPath);  replaceConfig.addConfiguredToken(tokenVmArgs);  return replaceConfig;}  }
class C{  public void update(int id){  update(id,id);}  }
class C{  public static boolean isNearEnabled(GridCacheContext ctx){  return isNearEnabled(ctx.config());}  }
class C{  private void updateCycleUsage(float usage){  Cycle cycle=cycleModel.getDataCycle();  float newUsed=cycle.getUsed() + usage;  DecimalFormat df;  if (Locale.getDefault().toString().equals("en_US")) {    df=new DecimalFormat("#.##");  } else {    df=new DecimalFormat("#,##");  }  newUsed=Float.valueOf(df.format(newUsed));  cycle.setUsed(newUsed);  cycleModel.updateDataCycle(cycle);}  }
class C{  @Inject protected DefaultService(SystemConfiguration systemConfiguration){  requireArgument(systemConfiguration != null,"The system configuration cannot be null.");}  }
class C{  public static long parseTimeNanos(String s,int start,int end,boolean timeOfDay){  int hour=0, minute=0, second=0;  long nanos=0;  int s1=s.indexOf(':',start);  int s2=s.indexOf(':',s1 + 1);  int s3=s.indexOf('.',s2 + 1);  if (s1 <= 0 || s2 <= s1) {    throw new IllegalArgumentException(s);  }  boolean negative;  hour=Integer.parseInt(s.substring(start,s1));  if (hour < 0) {    if (timeOfDay) {      throw new IllegalArgumentException(s);    }    negative=true;    hour=-hour;  } else {    negative=false;  }  minute=Integer.parseInt(s.substring(s1 + 1,s2));  if (s3 < 0) {    second=Integer.parseInt(s.substring(s2 + 1,end));  } else {    second=Integer.parseInt(s.substring(s2 + 1,s3));    String n=(s.substring(s3 + 1,end) + "000000000").substring(0,9);    nanos=Integer.parseInt(n);  }  if (hour >= 2000000 || minute < 0 || minute >= 60 || second < 0 || second >= 60) {    throw new IllegalArgumentException(s);  }  if (timeOfDay && hour >= 24) {    throw new IllegalArgumentException(s);  }  nanos+=((((hour * 60L) + minute) * 60) + second) * 1000000000;  return negative ? -nanos : nanos;}  }
class C{  private static double subRemainderTwoPi(double x0,double x1,double x2,int e0,int nx){  int ih;  double z, fw;  double f0, f1, f2, f3, f4, f5, f6=0.0, f7;  double q0, q1, q2, q3, q4, q5;  int iq0, iq1, iq2, iq3, iq4;  final int jx=nx - 1;  final int jv=(e0 - 3) / 24;  int q=e0 - ((jv << 4) + (jv << 3)) - 24;  final int j=jv + 4;  if (jx == 1) {    f5=(j >= 0) ? ONE_OVER_TWOPI_TAB[j] : 0.0;    f4=(j >= 1) ? ONE_OVER_TWOPI_TAB[j - 1] : 0.0;    f3=(j >= 2) ? ONE_OVER_TWOPI_TAB[j - 2] : 0.0;    f2=(j >= 3) ? ONE_OVER_TWOPI_TAB[j - 3] : 0.0;    f1=(j >= 4) ? ONE_OVER_TWOPI_TAB[j - 4] : 0.0;    f0=(j >= 5) ? ONE_OVER_TWOPI_TAB[j - 5] : 0.0;    q0=x0 * f1 + x1 * f0;    q1=x0 * f2 + x1 * f1;    q2=x0 * f3 + x1 * f2;    q3=x0 * f4 + x1 * f3;    q4=x0 * f5 + x1 * f4;  } else {    f6=(j >= 0) ? ONE_OVER_TWOPI_TAB[j] : 0.0;    f5=(j >= 1) ? ONE_OVER_TWOPI_TAB[j - 1] : 0.0;    f4=(j >= 2) ? ONE_OVER_TWOPI_TAB[j - 2] : 0.0;    f3=(j >= 3) ? ONE_OVER_TWOPI_TAB[j - 3] : 0.0;    f2=(j >= 4) ? ONE_OVER_TWOPI_TAB[j - 4] : 0.0;    f1=(j >= 5) ? ONE_OVER_TWOPI_TAB[j - 5] : 0.0;    f0=(j >= 6) ? ONE_OVER_TWOPI_TAB[j - 6] : 0.0;    q0=x0 * f2 + x1 * f1 + x2 * f0;    q1=x0 * f3 + x1 * f2 + x2 * f1;    q2=x0 * f4 + x1 * f3 + x2 * f2;    q3=x0 * f5 + x1 * f4 + x2 * f3;    q4=x0 * f6 + x1 * f5 + x2 * f4;  }  z=q4;  fw=(double)((int)(TWO_POW_N24 * z));  iq0=(int)(z - TWO_POW_24 * fw);  z=q3 + fw;  fw=(double)((int)(TWO_POW_N24 * z));  iq1=(int)(z - TWO_POW_24 * fw);  z=q2 + fw;  fw=(double)((int)(TWO_POW_N24 * z));  iq2=(int)(z - TWO_POW_24 * fw);  z=q1 + fw;  fw=(double)((int)(TWO_POW_N24 * z));  iq3=(int)(z - TWO_POW_24 * fw);  z=q0 + fw;  double twoPowQ=twoPowTab[q - MIN_DOUBLE_EXPONENT];  z=(z * twoPowQ) % 8.0;  z-=(double)((int)z);  if (q > 0) {    iq3&=0xFFFFFF >> q;    ih=iq3 >> (23 - q);  } else   if (q == 0) {    ih=iq3 >> 23;  } else   if (z >= 0.5) {    ih=2;  } else {    ih=0;  }  if (ih > 0) {    int carry;    if (iq0 != 0) {      carry=1;      iq0=0x1000000 - iq0;      iq1=0x0FFFFFF - iq1;      iq2=0x0FFFFFF - iq2;      iq3=0x0FFFFFF - iq3;    } else {      if (iq1 != 0) {        carry=1;        iq1=0x1000000 - iq1;        iq2=0x0FFFFFF - iq2;        iq3=0x0FFFFFF - iq3;      } else {        if (iq2 != 0) {          carry=1;          iq2=0x1000000 - iq2;          iq3=0x0FFFFFF - iq3;        } else {          if (iq3 != 0) {            carry=1;            iq3=0x1000000 - iq3;          } else {            carry=0;          }        }      }    }    if (q > 0) {switch (q) {case 1:        iq3&=0x7FFFFF;      break;case 2:    iq3&=0x3FFFFF;  break;}}if (ih == 2) {z=1.0 - z;if (carry != 0) {z-=twoPowQ;}}}if (z == 0.0) {if (jx == 1) {f6=ONE_OVER_TWOPI_TAB[jv + 5];q5=x0 * f6 + x1 * f5;} else {f7=ONE_OVER_TWOPI_TAB[jv + 5];q5=x0 * f7 + x1 * f6 + x2 * f5;}z=q5;fw=(double)((int)(TWO_POW_N24 * z));iq0=(int)(z - TWO_POW_24 * fw);z=q4 + fw;fw=(double)((int)(TWO_POW_N24 * z));iq1=(int)(z - TWO_POW_24 * fw);z=q3 + fw;fw=(double)((int)(TWO_POW_N24 * z));iq2=(int)(z - TWO_POW_24 * fw);z=q2 + fw;fw=(double)((int)(TWO_POW_N24 * z));iq3=(int)(z - TWO_POW_24 * fw);z=q1 + fw;fw=(double)((int)(TWO_POW_N24 * z));iq4=(int)(z - TWO_POW_24 * fw);z=q0 + fw;z=(z * twoPowQ) % 8.0;z-=(double)((int)z);if (q > 0) {iq4&=(0xFFFFFF >> q);ih=(iq4 >> (23 - q));} else if (q == 0) {ih=iq4 >> 23;} else if (z >= 0.5) {ih=2;} else {ih=0;}if (ih > 0) {if (iq0 != 0) {iq0=0x1000000 - iq0;iq1=0x0FFFFFF - iq1;iq2=0x0FFFFFF - iq2;iq3=0x0FFFFFF - iq3;iq4=0x0FFFFFF - iq4;} else {if (iq1 != 0) {  iq1=0x1000000 - iq1;  iq2=0x0FFFFFF - iq2;  iq3=0x0FFFFFF - iq3;  iq4=0x0FFFFFF - iq4;} else {  if (iq2 != 0) {    iq2=0x1000000 - iq2;    iq3=0x0FFFFFF - iq3;    iq4=0x0FFFFFF - iq4;  } else {    if (iq3 != 0) {      iq3=0x1000000 - iq3;      iq4=0x0FFFFFF - iq4;    } else {      if (iq4 != 0) {        iq4=0x1000000 - iq4;      }    }  }}}if (q > 0) {switch (q) {case 1:  iq4&=0x7FFFFF;break;case 2:iq4&=0x3FFFFF;break;}}}fw=twoPowQ * TWO_POW_N24;} else {iq4=(int)(z / twoPowQ);fw=twoPowQ;}q4=fw * (double)iq4;fw*=TWO_POW_N24;q3=fw * (double)iq3;fw*=TWO_POW_N24;q2=fw * (double)iq2;fw*=TWO_POW_N24;q1=fw * (double)iq1;fw*=TWO_POW_N24;q0=fw * (double)iq0;fw*=TWO_POW_N24;fw=TWOPI_TAB0 * q4;fw+=TWOPI_TAB0 * q3 + TWOPI_TAB1 * q4;fw+=TWOPI_TAB0 * q2 + TWOPI_TAB1 * q3 + TWOPI_TAB2 * q4;fw+=TWOPI_TAB0 * q1 + TWOPI_TAB1 * q2 + TWOPI_TAB2 * q3 + TWOPI_TAB3 * q4;fw+=TWOPI_TAB0 * q0 + TWOPI_TAB1 * q1 + TWOPI_TAB2 * q2 + TWOPI_TAB3 * q3 + TWOPI_TAB4 * q4;return (ih == 0) ? fw : -fw;}  }
class C{  protected void startClientConnections(){  for (  Node n : syncManager.getClusterConfig().getNodes()) {    doNodeConnect(n);  }}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  static void LaunchRcsStartService(Context context,boolean boot,boolean user){  if (sLogger.isActivated())   sLogger.debug("Launch RCS service (boot=" + boot + ") (user="+ user+ ")");  Intent intent=new Intent(context,StartService.class);  intent.putExtra(INTENT_KEY_BOOT,boot);  intent.putExtra(INTENT_KEY_USER,user);  context.startService(intent);}  }
class C{  public static float dpToPx(float dp,Context context){  return dp * context.getResources().getDisplayMetrics().density;}  }
class C{  public void toggleMaskAndTitle(){  toggleTitle();  toggleMask();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    String[] resOpts=((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getResolutionOptions();    return (resOpts != null && resOpts.length > 1) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public static BoolQueryBuilder buildQuery(Criteria criteria,String businessTxnProperty,Class<?> targetClass){  BoolQueryBuilder query=QueryBuilders.boolQuery().must(QueryBuilders.rangeQuery(TIMESTAMP_FIELD).from(TimeUnit.MILLISECONDS.toMicros(criteria.calculateStartTime())).to(TimeUnit.MILLISECONDS.toMicros(criteria.calculateEndTime())));  if (criteria.getBusinessTransaction() != null && !criteria.getBusinessTransaction().trim().isEmpty()) {    query=query.must(QueryBuilders.termQuery(businessTxnProperty,criteria.getBusinessTransaction()));  }  if (!criteria.getProperties().isEmpty()) {    for (    PropertyCriteria pc : criteria.getProperties()) {      if (pc.getOperator() == Operator.HAS || pc.getOperator() == Operator.HASNOT || pc.getOperator() == Operator.EQ || pc.getOperator() == Operator.NE) {        BoolQueryBuilder nestedQuery=QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(PROPERTIES_NAME_FIELD,pc.getName())).must(QueryBuilders.matchQuery(PROPERTIES_VALUE_FIELD,pc.getValue()));        if (pc.getOperator() == Operator.HASNOT || pc.getOperator() == Operator.NE) {          query=query.mustNot(QueryBuilders.nestedQuery(PROPERTIES_FIELD,nestedQuery));        } else {          query=query.must(QueryBuilders.nestedQuery(PROPERTIES_FIELD,nestedQuery));        }      } else {        RangeQueryBuilder rangeQuery=null;        if (pc.getOperator() == Operator.GTE) {          rangeQuery=QueryBuilders.rangeQuery(PROPERTIES_NUMBER_FIELD).gte(pc.getValue());        } else         if (pc.getOperator() == Operator.GT) {          rangeQuery=QueryBuilders.rangeQuery(PROPERTIES_NUMBER_FIELD).gt(pc.getValue());        } else         if (pc.getOperator() == Operator.LTE) {          rangeQuery=QueryBuilders.rangeQuery(PROPERTIES_NUMBER_FIELD).lte(pc.getValue());        } else         if (pc.getOperator() == Operator.LT) {          rangeQuery=QueryBuilders.rangeQuery(PROPERTIES_NUMBER_FIELD).lt(pc.getValue());        } else {          throw new IllegalArgumentException("Unknown property criteria operator: " + pc);        }        BoolQueryBuilder nestedQuery=QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(PROPERTIES_NAME_FIELD,pc.getName())).must(rangeQuery);        query=query.must(QueryBuilders.nestedQuery(PROPERTIES_FIELD,nestedQuery));      }    }  }  if (criteria.getHostName() != null && !criteria.getHostName().trim().isEmpty()) {    query=query.must(QueryBuilders.matchQuery("hostName",criteria.getHostName()));  }  if (criteria.getPrincipal() != null && !criteria.getPrincipal().trim().isEmpty()) {    query=query.must(QueryBuilders.matchQuery(PRINCIPAL_FIELD,criteria.getPrincipal()));  }  if (!criteria.getCorrelationIds().isEmpty()) {    for (    CorrelationIdentifier id : criteria.getCorrelationIds()) {      query.must(QueryBuilders.termQuery("value",id.getValue()));    }  }  if (criteria.getLowerBound() > 0 || criteria.getUpperBound() > 0) {    RangeQueryBuilder rangeQuery=QueryBuilders.rangeQuery(DURATION_FIELD);    if (criteria.getLowerBound() > 0) {      rangeQuery.gte(criteria.getLowerBound());    }    if (criteria.getUpperBound() > 0) {      rangeQuery.lte(criteria.getUpperBound());    }    query=query.must(rangeQuery);  }  if (targetClass == NodeDetails.class || targetClass == CompletionTime.class) {    if (criteria.getUri() != null && !criteria.getUri().trim().isEmpty()) {      query=query.must(QueryBuilders.matchQuery(URI_FIELD,criteria.getUri()));    }    if (criteria.getOperation() != null && !criteria.getOperation().trim().isEmpty()) {      query=query.must(QueryBuilders.matchQuery(OPERATION_FIELD,criteria.getOperation()));    }  }  return query;}  }
class C{  private void sessionChangedEventHandler(Session session){  if (View.isInitialised()) {    this.getSpiderPanel().reset();  }  if (session == null) {    return;  }}  }
class C{  public FileParsingTextSource(InputStream data,TextSource fallback){  delegate=new StringParsingTextSource(StringIterable.fromStream(data),fallback);}  }
class C{  public void toggleLogging(View view){  loggingEnabled=!loggingEnabled;  log.info((loggingEnabled ? "En" : "Dis") + "abled logging to disk");  if (loggingEnabled) {    sessionId=UUID.randomUUID().toString();    log.info("SessionID for remote logging: " + sessionId);    wakeLock.acquire();    log.debug("Acquired wake-lock");  } else   if (wakeLock.isHeld()) {    wakeLock.release();    log.debug("Released wake-lock");  }  updateUI();}  }
class C{  @VisibleForTesting public boolean isAnimating(){  return false;}  }
class C{  @Util public static Map<String,List<BreadCrumb>> createBreadCrumbs(Map<String,CategoryDef> catalog){  Map<String,List<BreadCrumb>> catalogBreadcrumbs=Maps.newLinkedHashMap();  for (  CategoryDef category : catalog.values()) {    List<BreadCrumb> breadcrumbs=createBreadCrumbs(category.id,catalog);    catalogBreadcrumbs.put(category.id,breadcrumbs);  }  return catalogBreadcrumbs;}  }
class C{  public static String toTitleCase(String input){  StringBuilder titleCase=new StringBuilder();  boolean nextTitleCase=true;  for (  char c : input.toCharArray()) {    if (Character.isSpaceChar(c)) {      nextTitleCase=true;    } else     if (nextTitleCase) {      c=Character.toTitleCase(c);      nextTitleCase=false;    }    titleCase.append(c);  }  return titleCase.toString();}  }
class C{  public static TransportUnitType createTransportUnitType(String type){  return new TransportUnitType(type);}  }
class C{  @Override public String toString(){  String str=variableLabel;  if (negated) {    str+="!=";  } else   if (!exclusive) {    str+="+=";  } else {    str+=":=";  }  str+=variableValue;  return str;}  }
class C{  public long value(){  return _map._values[_index];}  }
class C{  public boolean isValid(){  if (null == this.isValid) {    this.isValid=isEncodedAddressValid(this.encoded);  }  return this.isValid;}  }
class C{  public IntVector(IIntVector vec){  mValues=new int[vec.getLength()];  for (int i=0; i < vec.getLength(); ++i) {    mValues[i]=vec.get(i);  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  PivotSeries clone=(PivotSeries)super.clone();  return clone;}  }
class C{  public void drawImage(Image img,int x,int y){  img.drawImage(this,nativeGraphics,x,y);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.N4_CLASS_DECLARATION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == N4TypeDefinition.class) {switch (baseOperationID) {case N4JSPackage.N4_TYPE_DEFINITION___IS_EXTERNAL:  return N4JSPackage.N4_CLASS_DECLARATION___IS_EXTERNAL;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ScriptElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == AnnotableScriptElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT___GET_ANNOTATIONS:return N4JSPackage.N4_CLASS_DECLARATION___GET_ANNOTATIONS;default :return -1;}}if (baseClass == ModifiableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == ExportableElement.class) {switch (baseOperationID) {case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED:return N4JSPackage.N4_CLASS_DECLARATION___IS_EXPORTED;case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED_AS_DEFAULT:return N4JSPackage.N4_CLASS_DECLARATION___IS_EXPORTED_AS_DEFAULT;case N4JSPackage.EXPORTABLE_ELEMENT___GET_EXPORTED_NAME:return N4JSPackage.N4_CLASS_DECLARATION___GET_EXPORTED_NAME;case N4JSPackage.EXPORTABLE_ELEMENT___IS_TOPLEVEL:return N4JSPackage.N4_CLASS_DECLARATION___IS_TOPLEVEL;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.N4_CLASS_DECLARATION___GET_NAME;default :return -1;}}if (baseClass == N4TypeDeclaration.class) {switch (baseOperationID) {case N4JSPackage.N4_TYPE_DECLARATION___IS_EXTERNAL:return N4JSPackage.N4_CLASS_DECLARATION___IS_EXTERNAL;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == N4ClassifierDeclaration.class) {switch (baseOperationID) {default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private void initializeApiClient(){  mApiClient=new WeaveApiClient(getContext());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.DEBUG___DEBUG_1:    setDebug_1(DEBUG_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void openViewport(Element e,Viewport viewport){  viewportMap.put(e,viewport);  if (viewportStack == null) {    viewportStack=new LinkedList();  }  viewportStack.add(0,viewport);}  }
class C{  @Override public HijrahDate dateEpochDay(long epochDay){  return HijrahDate.ofEpochDay(this,epochDay);}  }
class C{  public BaseStringCollectionPage(final BaseStringCollectionResponse response,final IStringCollectionRequestBuilder builder){  super(response.value,builder);}  }
class C{  public LineNumberReader(Reader in,int sz){  super(in,sz);}  }
class C{  protected SparseArray(ArrayType type,List<Object> values,List<Integer> indices){  super(type,values);  m_indices=indices;}  }
class C{  public static int countMatches(CharSequence str,CharSequence sub){  if (isEmpty(str) || isEmpty(sub)) {    return 0;  }  int count=0;  int idx=0;  while ((idx=indexOf(str,sub,idx)) != INDEX_NOT_FOUND) {    count++;    idx+=sub.length();  }  return count;}  }
class C{  public static void println(double x){  out.println(x);}  }
class C{  public ExtZipEntry(String name){  super(name);}  }
class C{  public PartitionedRegionRebalanceOp(PartitionedRegion region,boolean simulate,RebalanceDirector director,boolean replaceOfflineData,boolean isRebalance,AtomicBoolean cancelled,ResourceManagerStats stats){  PartitionedRegion leader=ColocationHelper.getLeaderRegion(region);  Assert.assertTrue(leader != null);  this.leaderRegion=leader;  this.targetRegion=region;  this.simulate=simulate;  this.director=director;  this.cancelled=cancelled;  this.replaceOfflineData=replaceOfflineData;  this.isRebalance=isRebalance;  this.stats=simulate ? null : stats;}  }
class C{  public void updateConfiguration(){  if (updateConfigTask != null)   updateConfigTask.reschedule(500,TimeUnit.MILLISECONDS);}  }
class C{  public <T extends ServiceDocument>T callServiceAndWaitForState(String serviceUri,T parameters,Class<T> type,Predicate<T> test) throws Throwable {  return callServiceAndWaitForState(serviceUri,parameters,type,test,WAIT_ITERATION_SLEEP,WAIT_ITERATION_COUNT);}  }
class C{  public static ByteBuffer fromString(String str,Charset charset){  return ByteBuffer.wrap(str.getBytes(charset));}  }
class C{  public GondolaAgent(int port) throws IOException {  ServerSocket serversocket=new ServerSocket(port);  logger.info("Listening on port " + port);  Socket socket;  while ((socket=serversocket.accept()) != null) {    new Handler(socket).start();  }}  }
class C{  public void consumeReadData(int count) throws IllegalArgumentException, BufferUnderflowException {  if (count > buffered) {    throw new BufferUnderflowException();  }  if (count < 0) {    throw new IllegalArgumentException();  }  this.read_pos=(read_pos + count) % array.length;  buffered-=count;}  }
class C{  public Value evaluate(FunctionCall node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Function function=FunctionRegistry.getInstance().get(node.getURI()).orElseThrow(null);  if (function instanceof Now) {    return evaluate((Now)function,bindings);  }  List<ValueExpr> args=node.getArgs();  Value[] argValues=new Value[args.size()];  for (int i=0; i < args.size(); i++) {    argValues[i]=evaluate(args.get(i),bindings);  }  return function.evaluate(tripleSource.getValueFactory(),argValues);}  }
class C{  private InverseCorrelationRunner(DataWrapper dataWrapper){  super(dataWrapper,new Parameters(),null);}  }
class C{  public boolean isOneClickEnabled(){  return oneClickEnabled;}  }
class C{  public static void w(String msg){  if (null == msg || null == sXLogConfig) {    return;  }  if (allowConsoleLogPrint(LogLevel.W)) {    Log.w(getDefaultTag(),msg);  }  if (allowFileLogPrint(LogLevel.W)) {    FileLogHelper.getInstance().logToFile(msg,null,getDefaultTag(),LogLevel.W);  }}  }
class C{  public static int hashCode(int[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  public void findStream(String sql,Object[] args,ResultStream<Cursor> result){  QueryBuilderKraken builder=QueryParserKraken.parse(this,sql);  if (builder.isTableLoaded()) {    QueryKraken query=builder.build();    findStream(query,args,result);  } else {    String tableName=builder.getTableName();    _tableService.loadTable(tableName,result.of(null));  }}  }
class C{  public static String after(String s,String token){  if (s == null) {    return null;  }  int i=s.indexOf(token);  if (i == -1) {    return s;  }  return s.substring(i + token.length());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.BINDING_PROPERTY__VALUE:    return getValue();case N4JSPackage.BINDING_PROPERTY__VAR_DECL:  return getVarDecl();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public InputStream openAsset(String path,boolean allowDefault){  try {    if (externalAssets != null)     return externalAssets.open(path);  } catch (  Exception e) {  }  if (!allowDefault) {    Log.e("PresetIconManager","Failed to load preset-specific asset " + path + "[externalAssetPackage="+ externalAssetPackage+ "]");    return null;  }  try {    if (externalDefaultAssets != null)     return externalDefaultAssets.open(path);  } catch (  Exception e) {  }  try {    return internalAssets.open(path);  } catch (  Exception e) {  }  Log.e("PresetIconManager","Could not load asset " + path + " from any source "+ "[externalAssetPackage="+ externalAssetPackage+ "]");  return null;}  }
class C{  public CuboidRegionSelector(@Nullable World world,Vector position1,Vector position2){  this(world);  checkNotNull(position1);  checkNotNull(position2);  this.position1=position1.toBlockVector();  this.position2=position2.toBlockVector();  region.setPos1(position1);  region.setPos2(position2);}  }
class C{  public static void main(String[] args){  String arg="jhfsdhfds/=+;-%0Adsa";  if (args[0] != null && args[0].trim().length() > 0)   arg=args[0];  String result=arg.trim().replaceAll("([^A-Za-z0-9@.' _+&%/=\\-]+)(%0A)","_");  if (!result.equals(arg)) {    Debug.debug("Before Filtering: " + result);    Debug.debug("After Filtering: " + result);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private static int checkTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':    return pos + 1;default :  return checkFieldTypeSignature(signature,pos);}}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(this.getModifiers());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 1) {    Channel c=getChannel(stack);    return (c == null) ? null : EPG.getInstance().getLogo(c,stack.getUIComponent());  } else {    boolean fallback=evalBool(stack.pop());    int index=getInt(stack);    String imageType=getString(stack);    Channel c=getChannel(stack);    if (c == null)     return null;    int imageTypeNum=0;    if ("Small".equalsIgnoreCase(imageType))     imageTypeNum=Channel.LOGO_SMALL; else     if ("Med".equalsIgnoreCase(imageType) || "Medium".equalsIgnoreCase(imageType))     imageTypeNum=Channel.LOGO_MED; else     if ("Large".equalsIgnoreCase(imageType))     imageTypeNum=Channel.LOGO_LARGE;    if (imageTypeNum == 0)     return null;    if (!fallback) {      if (c.getLogoCount(imageTypeNum) <= index)       return null;      return MetaImage.getMetaImage(c.getLogoUrl(index,imageTypeNum),stack.getUIComponent());    }    if (!Sage.EMBEDDED) {      MetaImage userLogo=EPG.getInstance().getLogo(c.getName(),stack.getUIComponent());      if (userLogo != null)       return userLogo;    }    if (c.getLogoCount(imageTypeNum) > index)     return MetaImage.getMetaImage(c.getLogoUrl(index,imageTypeNum),stack.getUIComponent());    if (c.getLogoCount(imageTypeNum) > 0)     return MetaImage.getMetaImage(c.getLogoUrl(0,imageTypeNum),stack.getUIComponent());    return null;  }}  }
class C{  public int hashCode(){  return value.hashCode();}  }
class C{  public void checkMallowPermissions(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(),Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED && (!isBgBoot)) {    Toast.makeText(getApplicationContext(),getString(R.string.permission_hint_write_storage),Toast.LENGTH_LONG).show();    if (!ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.WRITE_EXTERNAL_STORAGE) || checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)     ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},PERMISSION_REQUEST_CODE);  }}  }
class C{  private void validateFileSystem(FileMirrorRecommendation placement,FileShare fileShare){  StorageSystem system=_dbClient.queryObject(StorageSystem.class,placement.getSourceStorageSystem());  List<FileShare> fileShareList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,FileShare.class,PrefixConstraint.Factory.getFullMatchConstraint(FileShare.class,"label",fileShare.getLabel()));  if (fileShareList != null && fileShareList.isEmpty()) {    for (    FileShare fs : fileShareList) {      if (fs.getStorageDevice() != null) {        if (fs.getStorageDevice().equals(system.getId())) {          _log.info("Duplicate label found {} on Storage System {}",fileShare.getLabel(),system.getId());          throw APIException.badRequests.duplicateLabel(fileShare.getLabel());        }      }    }  }}  }
class C{  public static Collection<String> nodeId8s(@Nullable Collection<? extends ClusterNode> nodes){  if (nodes == null || nodes.isEmpty())   return Collections.emptyList();  return F.viewReadOnly(nodes,NODE2ID8);}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  synchronized void poll(){  if (!valid) {    return;  }  tickCount++;  DirectoryStream<Path> stream=null;  try {    stream=Files.newDirectoryStream(watchable());  } catch (  IOException x) {    cancel();    signal();    return;  }  try {    for (    Path entry : stream) {      long lastModified=0L;      try {        lastModified=Files.getLastModifiedTime(entry,LinkOption.NOFOLLOW_LINKS).toMillis();      } catch (      IOException x) {        continue;      }      CacheEntry e=entries.get(entry.getFileName());      if (e == null) {        entries.put(entry.getFileName(),new CacheEntry(lastModified,tickCount));        if (events.contains(StandardWatchEventKinds.ENTRY_CREATE)) {          signalEvent(StandardWatchEventKinds.ENTRY_CREATE,entry.getFileName());          continue;        } else {          if (events.contains(StandardWatchEventKinds.ENTRY_MODIFY)) {            signalEvent(StandardWatchEventKinds.ENTRY_MODIFY,entry.getFileName());          }        }        continue;      }      if (e.lastModified != lastModified) {        if (events.contains(StandardWatchEventKinds.ENTRY_MODIFY)) {          signalEvent(StandardWatchEventKinds.ENTRY_MODIFY,entry.getFileName());        }      }      e.update(lastModified,tickCount);    }  } catch (  DirectoryIteratorException e) {  } finally {    try {      stream.close();    } catch (    IOException x) {    }  }  Iterator<Map.Entry<Path,CacheEntry>> i=entries.entrySet().iterator();  while (i.hasNext()) {    Map.Entry<Path,CacheEntry> mapEntry=i.next();    CacheEntry entry=mapEntry.getValue();    if (entry.lastTickCount() != tickCount) {      Path name=mapEntry.getKey();      i.remove();      if (events.contains(StandardWatchEventKinds.ENTRY_DELETE)) {        signalEvent(StandardWatchEventKinds.ENTRY_DELETE,name);      }    }  }}  }
class C{  protected ConstraintBody_Impl(){  super();}  }
class C{  public boolean isEnableSubstitutionInVariables(){  return enableSubstitutionInVariables;}  }
class C{  public void flushToDisk() throws IOException {  StreamImpl source=_source;  if (_isDisableFlush || source == null) {    return;  }  flush();  source.flushToDisk();}  }
class C{  public int stop(){  mAudioPauser.resume();  return mTts.stop();}  }
class C{  public String print(long instant){  StringBuffer buf=new StringBuffer(requirePrinter().estimatePrintedLength());  printTo(buf,instant);  return buf.toString();}  }
class C{  public void query(Consumer<QueryResult> completionHandler){  this.completionHandler=completionHandler;  this.result=new QueryResult();  retrieveResourcePools();}  }
class C{  public static String toLowerCase(Locale locale,String s,char[] value,int offset,int count){  String languageCode=locale.getLanguage();  if (languageCode.equals("tr") || languageCode.equals("az") || languageCode.equals("lt")) {    return ICU.toLowerCase(s,locale.toString());  }  char[] newValue=null;  int newCount=0;  for (int i=offset, end=offset + count; i < end; ++i) {    char ch=value[i];    char newCh;    if (ch == LATIN_CAPITAL_I_WITH_DOT || Character.isHighSurrogate(ch)) {      return ICU.toLowerCase(s,locale.toString());    } else     if (ch == GREEK_CAPITAL_SIGMA && isFinalSigma(value,offset,count,i)) {      newCh=GREEK_SMALL_FINAL_SIGMA;    } else {      newCh=Character.toLowerCase(ch);    }    if (newValue == null && ch != newCh) {      newValue=new char[count];      newCount=i - offset;      System.arraycopy(value,offset,newValue,0,newCount);    }    if (newValue != null) {      newValue[newCount++]=newCh;    }  }  return newValue != null ? new String(0,newCount,newValue) : s;}  }
class C{  @Override public void handlePitch(PitchDetectionResult pitchDetectionResult,AudioEvent audioEvent){  float pitch=0;  boolean isPitchProbable=pitchDetectionResult.getProbability() > 0.5;  if ((pitch=pitchDetectionResult.getPitch()) != -1 && isPitchProbable) {    try {      Robot robot=new Robot();      int mouseX=(int)MouseInfo.getPointerInfo().getLocation().getX();      int mouseY=(int)MouseInfo.getPointerInfo().getLocation().getY();    } catch (    AWTException e) {      e.printStackTrace();    }  }}  }
class C{  public void init(){  Box propsBox=Box.createVerticalBox();  propsBox.setOpaque(true);  propsBox.add(Box.createVerticalGlue());  JPanel runTools=new JPanel();  runTools.add(new JLabel("Iterate: "));  runTools.add(new JButton(runAction));  runTools.add(new JButton(stepAction));  showUpdates.setToolTipText("Update display of network while iterating trainer (slows performance but didactically useful)");  runTools.add(showUpdates);  JButton propertiesButton=new JButton(setPropertiesAction);  propertiesButton.setHideActionText(true);  runTools.add(propertiesButton);  JButton randomizeButton=new JButton(randomizeAction);  randomizeButton.setHideActionText(true);  runTools.add(randomizeButton);  propsBox.add(runTools);  JSeparator separator=new JSeparator(SwingConstants.HORIZONTAL);  propsBox.add(separator);  LabelledItemPanel labelPanel=new LabelledItemPanel();  labelPanel.addItem("Iterations:",iterationsLabel);  numTicks=10;  errorBar=new JProgressBar(0,numTicks);  errorBar.setStringPainted(true);  labelPanel.addItem("Error:",errorBar);  propsBox.add(labelPanel);  JSeparator separator2=new JSeparator(SwingConstants.HORIZONTAL);  propsBox.add(separator2);  propsBox.add(Box.createVerticalStrut(20));  ErrorPlotPanel graphPanel=new ErrorPlotPanel(trainer);  propsBox.add(graphPanel);  add(propsBox);  addErrorListener();}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (dtdHandler != null) {    dtdHandler.notationDecl(name,publicId,systemId);  }}  }
class C{  public String encode(final String pString,final String charset) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encodeText(pString,charset);  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public Result charTyped(char c,final Project project,final @NotNull Editor editor,@NotNull final PsiFile file){  return Result.CONTINUE;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == ThisArgProvider.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (derivedFeatureID) {case N4JSPackage.N4_METHOD_DECLARATION__BODY:  return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY;case N4JSPackage.N4_METHOD_DECLARATION__LOK:return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_METHOD_DECLARATION__DEFINED_TYPE:return N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE;default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (derivedFeatureID) {case N4JSPackage.N4_METHOD_DECLARATION__FPARS:return N4JSPackage.FUNCTION_DEFINITION__FPARS;case N4JSPackage.N4_METHOD_DECLARATION__RETURN_TYPE_REF:return N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF;case N4JSPackage.N4_METHOD_DECLARATION__GENERATOR:return N4JSPackage.FUNCTION_DEFINITION__GENERATOR;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_ASYNC:return N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_METHOD_DECLARATION__TYPE_VARS:return N4JSPackage.GENERIC_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == TypedElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_TYPE_REF:return N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF;case N4JSPackage.N4_METHOD_DECLARATION__BOGUS_TYPE_REF:return N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (derivedFeatureID) {case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_NAME:return N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME;default :return -1;}}if (baseClass == MethodDeclaration.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private static void runBuild(@Nonnull IProject myProject){  StructuredSelection selection=new StructuredSelection(myProject);  FindBugsAction action=new FindBugsAction();  action.selectionChanged(null,selection);  action.run(null);}  }
class C{  public IdentifiableLanguage(final String language,final String name){  super();  this.language=language;  this.name=name;}  }
class C{  public Object clone(){  try {    BFloat iObj=(BFloat)super.clone();    iObj.iE=iE;    iObj.iF=iF;    return iObj;  } catch (  CloneNotSupportedException e) {    System.out.println("BFloat.clone: Something happened that cannot happen -- ?");    return null;  }}  }
class C{  @Override public boolean batchFinished() throws Exception {  return m_attributeFilter.batchFinished();}  }
class C{  public MemberList<TMember> members(ContainerType<?> type,boolean includeImplicitSuperTypes,boolean includePolyfills){  return new CollectMembersHelper(type,includeImplicitSuperTypes,includePolyfills,null).getResult();}  }
class C{  public static RedisQueue create(final Object config,final String name){  return new RedisQueue(ConnectionManagerFactory.createConnectionManager(config),name);}  }
class C{  public void addKeyInfo(PublicKey pk){  this.getKeyInfo().add(pk);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean hasRouteSet(){  return _routeSet;}  }
class C{  static Scoping makeInjectable(Scoping scoping,InjectorImpl injector,Errors errors){  Class<? extends Annotation> scopeAnnotation=scoping.getScopeAnnotation();  if (scopeAnnotation == null) {    return scoping;  }  Scope scope=injector.state.getScope(scopeAnnotation);  if (scope != null) {    return Scoping.forInstance(scope);  }  errors.scopeNotFound(scopeAnnotation);  return Scoping.UNSCOPED;}  }
class C{  public static Wallet fromWatchingKey(NetworkParameters params,DeterministicKey watchKey){  return new Wallet(params,new KeyChainGroup(params,watchKey));}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(prefixBits);  if (suffix != null) {    sb.append(" ");    sb.append(suffix.getHostAddress());  }  if (prefix != null) {    sb.append(" ");    sb.append(prefix);  }  return sb.toString();}  }
class C{  public synchronized long moveToNextSample(){  queueSize--;  int lastReadIndex=readIndex++;  if (readIndex == capacity) {    readIndex=0;  }  return queueSize > 0 ? offsets[readIndex] : (sizes[lastReadIndex] + offsets[lastReadIndex]);}  }
class C{  protected ArrayList<GCParser> create_gc_parsers(GCStats gc_stats,boolean verbose){  ArrayList<GCParser> parsers=new ArrayList<GCParser>(7);  parsers.add(new ParGCYoungGCParser(gc_stats,verbose));  parsers.add(new FWYoungGCParser(gc_stats,verbose));  parsers.add(new ParGCFullGCParser(gc_stats,verbose));  parsers.add(new CMSGCParser(gc_stats,verbose));  parsers.add(new ParCompactPhaseGCParser(gc_stats,verbose));  parsers.add(new FWOldGCParser(gc_stats,verbose));  parsers.add(new FWFullGCParser(gc_stats,verbose));  parsers.add(new VerboseGCParser(gc_stats,verbose));  return parsers;}  }
class C{  public boolean hasDeletions(){  return delGen != -1;}  }
class C{  public CreateSnapshotRequest partial(boolean partial){  this.partial=partial;  return this;}  }
class C{  public boolean isApplicationConfigured(){  return isApplicationConfigured;}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  log.info("");  try {    dynInit(WindowNo);    jbInit();    frame.getContentPane().add(this,BorderLayout.CENTER);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public void processForZone27To42(String outputFile){  List<Integer> originZones=new ArrayList<>();{    for (int idx=0; idx < TOTAL_PLANS_REQUIRED; idx++) {      originZones.add(RandomNumberUtils.getUniformlyRandomNumber(LOWER_BOUND,UPPER_BOUND));    }  }  List<Integer> destinationZones_HBE=new ArrayList<>();{    for (int idx=0; idx < REQUIRED_HBE_PLANS; idx++) {      destinationZones_HBE.add(RandomNumberUtils.getUniformlyRandomNumber(37,42));    }  }  List<Integer> destinationZones_HBS_HBO=new ArrayList<>();{    for (int idx=0; idx < REQUIRED_HBS_PLANS + REQUIRED_HBO_PLANS; idx++) {      destinationZones_HBS_HBO.add(RandomNumberUtils.getUniformlyRandomNumber(1,72));    }  }  List<String> modes=new ArrayList<>();{    SortedMap<String,Double> groupNumbers=new TreeMap<>();    groupNumbers.put("car",1.);    groupNumbers.put("motorbike",9.);    groupNumbers.put("bike",23.);    groupNumbers.put("pt",44.);    groupNumbers.put("walk",22.);    modes.addAll(RandomNumberUtils.getRandomStringsFromDiscreteDistribution(groupNumbers,REQUIRED_HBE_PLANS));  }{    SortedMap<String,Double> groupNumbers=new TreeMap<>();    groupNumbers.put("car",10.);    groupNumbers.put("motorbike",28.);    groupNumbers.put("bike",33.);    groupNumbers.put("pt",9.);    groupNumbers.put("walk",20.);    modes.addAll(RandomNumberUtils.getRandomStringsFromDiscreteDistribution(groupNumbers,REQUIRED_HBS_PLANS));  }{    SortedMap<String,Double> groupNumbers=new TreeMap<>();    groupNumbers.put("car",3.);    groupNumbers.put("motorbike",12.);    groupNumbers.put("bike",20.);    groupNumbers.put("pt",38.);    groupNumbers.put("walk",27.);    modes.addAll(RandomNumberUtils.getRandomStringsFromDiscreteDistribution(groupNumbers,REQUIRED_HBO_PLANS));  }  BufferedWriter writer=IOUtils.getBufferedWriter(outputFile);  try {    for (    PatnaDemandLabels label : PatnaDemandLabels.values()) {      writer.write(label.toString() + "\t");    }    writer.newLine();    for (int index=0; index < originZones.size(); index++) {      writer.write("NA\tNA\tNA\tNA\tNA\t");      String tripPurpose;      String destinationZone;      if (index < REQUIRED_HBE_PLANS) {        tripPurpose=HBE;        destinationZone=String.valueOf(destinationZones_HBE.get(index));      } else       if (index < REQUIRED_HBE_PLANS + REQUIRED_HBS_PLANS) {        tripPurpose=HBS;        destinationZone=String.valueOf(destinationZones_HBS_HBO.get(index - REQUIRED_HBE_PLANS));      } else {        tripPurpose=HBO;        destinationZone=String.valueOf(destinationZones_HBS_HBO.get(index - REQUIRED_HBE_PLANS - REQUIRED_HBS_PLANS));      }      writer.write("a" + "\t");      writer.write("a" + "\t");      writer.write(originZones.get(index) + "\t");      writer.write(destinationZone + "\t");      writer.write(tripPurpose + "\t");      writer.write(modes.get(index) + "\t");      writer.write("NA\n");    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not writtern. Reason " + e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.565 -0400",hash_original_method="652160DEF53E3BBE1ED93CBEB3A7D1BB",hash_generated_method="5948DDAD675235BAE1B0C2892DC5524C") public DrmRights(String rightsFilePath,String mimeType){  File file=new File(rightsFilePath);  instantiate(file,mimeType);}  }
class C{  public PropertyField(){  this(null,"",true);}  }
class C{  public void unregisterStatement(Statement stmt){  this.openStatements.remove(stmt);}  }
class C{  public void update(final String collectionName,final Map<String,Object> query,final Map<String,Object> data,final Map<String,Object> options,final ResultListener listener){  call("/" + collectionName + "/update",new Object[]{query,data,options},listener);}  }
class C{  public SingleValueDistribution(String variable,String value){  this.variable=variable;  this.value=ValueFactory.create(value);}  }
class C{  public TFloatIntHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void startMainActivity(){  Intent intent=new Intent(activity,MainActivity.class);  intent.putExtra("SELECTNEWMAP",true);  activity.startActivity(intent);}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof XYDataItem) {    XYDataItem dataItem=(XYDataItem)o1;    double compare=this.x.doubleValue() - dataItem.getX().doubleValue();    if (compare > 0.0) {      result=1;    } else {      if (compare < 0.0) {        result=-1;      } else {        result=0;      }    }  } else {    result=1;  }  return result;}  }
class C{  protected IgfsFileRange split(long start,long len){  return new IgfsFileRange(FILE,start,len);}  }
class C{  public void assertInvokeInterfaceEquals(int value,Class target,Interface iface){  Compiler compiler=compilerLocal.get();  compiler.setFlags(compilerFlags());  assertInvokeInterfaceEquals(new Integer(value),target,new Extends(iface),stdAM);  compiler.cleanup();}  }
class C{  private boolean isVpoolQuotaUpdate(Map<String,String> updateMap){  for (  String iter : updateMap.keySet()) {    if (iter.startsWith("volumes_") || iter.startsWith("snapshots_") || iter.startsWith("gigabytes_")) {      return true;    }  }  return false;}  }
class C{  public void cursorUp(double units){  this.cursor=this.cursor - units;}  }
class C{  private BFINode<E> splitRight(BFINode<E> current,BFINode<E> rightmost,InsDelUpdateStatistics stat){  assert current.children != null && current.children.size() >= 2 * this.order + 1 : "Split not needed in splitRight" + current;  stat.nbSplits++;  BFINode<E> newNode;  BloomFilter<E> sampleFilter=current.value;  BloomFilter<E> zeroFilter=createZeroBloomFilter(sampleFilter);  newNode=new BFINode<E>(zeroFilter,this.order,this.splitFull);  BFINode<E> receivedRight;  for (int i=this.order + 1; i < current.children.size(); i++) {    receivedRight=insertRight(false,newNode,current.children.get(i),rightmost,stat);    assert receivedRight == rightmost;  }  current.children.subList(this.order + 1,current.children.size()).clear();  stat.nbBFNodesAccessed++;  current.recomputeValue(stat);  if (current.parent != null) {    receivedRight=insertRight(true,current.parent,newNode,rightmost,stat);    assert receivedRight == rightmost;  } else {    assert current == this.root : "splitRight: Split of current with no parent but not root";    BFINode<E> newRoot;    BloomFilter<E> sampleFilter1=current.value;    BloomFilter<E> zeroFilter1=createZeroBloomFilter(sampleFilter1);    newRoot=new BFINode<E>(zeroFilter1,this.order,this.splitFull);    rightmost=insertRight(false,newRoot,current,rightmost,stat);    rightmost=insertRight(false,newRoot,newNode,rightmost,stat);    this.root=newRoot;  }  if (current == rightmost) {    rightmost=newNode;  }  return rightmost;}  }
class C{  public boolean hasRole(){  return hasExtension(AclRole.class);}  }
class C{  private void removeCrashView(){  Log.i(TAG,"removeCrashView");  if (appCrashView != null && isCrashViewVisible) {    isCrashViewVisible=false;    windowManager.removeView(appCrashView);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  @SuppressWarnings("unchecked") final BloomFilter<E> other=(BloomFilter<E>)obj;  if (this.expectedNumberOfFilterElements != other.expectedNumberOfFilterElements) {    return false;  }  if (this.k != other.k) {    return false;  }  if (this.bitSetSize != other.bitSetSize) {    return false;  }  if (this.bitset != other.bitset && (this.bitset == null || !this.bitset.equals(other.bitset))) {    return false;  }  return true;}  }
class C{  public List<String> createType(TypesDef typeDef) throws AtlasServiceException {  return createType(TypesSerialization.toJson(typeDef));}  }
class C{  public DemoService(Gondola gondola,String shardId){  super(gondola,shardId);  registerEventHandler(listener);}  }
class C{  @Override public void zoomDomainAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){  XYPlot subplot=findSubplot(info,source);  if (subplot != null) {    subplot.zoomDomainAxes(lowerPercent,upperPercent,info,source);  } else {    Iterator iterator=getSubplots().iterator();    while (iterator.hasNext()) {      subplot=(XYPlot)iterator.next();      subplot.zoomDomainAxes(lowerPercent,upperPercent,info,source);    }  }}  }
class C{  public WrapperFactoryImpl(final FileUtil fileUtil){  this.fileUtil=fileUtil;}  }
class C{  @Override public int compare(Event<Long,V> lhs,Event<Long,V> rhs){  return lhs.getKey().compareTo(rhs.getKey());}  }
class C{  public ComputeVirtualPoolRestRep update(URI id,ComputeVirtualPoolUpdateParam input){  return client.put(ComputeVirtualPoolRestRep.class,input,getIdUrl(),id);}  }
class C{  protected boolean contains(File file){  if (file == null) {    return false;  }  return contains(file.getName());}  }
class C{  @SuppressWarnings("unchecked") static <K>K cast(Object key){  return (K)key;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public ScannerParamFilter clone(){  return new ScannerParamFilter(paramNameRegex,paramType,wildcardedUrl);}  }
class C{  public void beginTransaction(){  beginTransaction(HGTransactionConfig.DEFAULT);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          minVal=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (z < minVal) {                minVal=z;              }            }          }          outputFile.setValue(row,col,minVal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 188) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static <E>SortedSet<E> synchronizedSortedSet(SortedSet<E> set){  if (set == null) {    throw new NullPointerException();  }  return new SynchronizedSortedSet<E>(set);}  }
class C{  public boolean isGeolocationPushSupported(){  return mGeolocationPush;}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Long queueId,Principal principal){  RestWrapper restWrapper=null;  try {    batchConsumpQueueDAO.delete(queueId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info(RECORDWITHID + queueId + " deleted from BatchConsumpQueue by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public GridCachePartitionedNodeRestartTxSelfTest(){  super(false);}  }
class C{  private boolean controlsOverlapBar(SparseArray<Drawable> controlIcons,RectF barBounds){  if (mDrawOverControls) {    return false;  }  Rect icon;  double scaleFactor=0.2d;  if (mShowControls) {    icon=controlIcons.get(ARR_LEFT).getBounds();    if (iconBoundsIntersectBar(barBounds,icon,scaleFactor)) {      return true;    }    icon=controlIcons.get(ARR_RIGHT).getBounds();    if (iconBoundsIntersectBar(barBounds,icon,scaleFactor)) {      return true;    }  }  if (mShowFastControls) {    icon=controlIcons.get(FAST_ARR_LEFT).getBounds();    if (iconBoundsIntersectBar(barBounds,icon,scaleFactor)) {      return true;    }    icon=controlIcons.get(FAST_ARR_RIGHT).getBounds();    if (iconBoundsIntersectBar(barBounds,icon,scaleFactor)) {      return true;    }  }  return false;}  }
class C{  void unlockOrientation(){  if (!mOrientationLocked) {    return;  }  mOrientationLocked=false;  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);}  }
class C{  public void readMetadata() throws SQLException {  if (valid) {    return;  }  String[] metaInfos=queryMetaInfos(isFunction);  String paramList=metaInfos[0];  String functionReturn=metaInfos[1];  parseParamList(isFunction,paramList);  if (isFunction) {    parseFunctionReturnParam(functionReturn);  }}  }
class C{  private void generateReconciliation(){  log.info("");  miniTable.stopEditor(true);  if (miniTable.getRowCount() == 0)   return;  miniTable.setRowSelectionInterval(0,0);  calculateSelection();  if (m_noSelected == 0)   return;  String format="yyyy-MM-dd HH:mm:ss.SSS";  Calendar cal=Calendar.getInstance();  SimpleDateFormat sdf=new SimpleDateFormat(format);  String time=sdf.format(cal.getTime());  String matchcode="Manual: " + Env.getContext(Env.getCtx(),"#AD_User_Name") + " "+ time;  for (int r=0; r < miniTable.getModel().getRowCount(); r++) {    if (((IDColumn)miniTable.getModel().getValueAt(r,idColIndex)).isSelected()) {      int factId=((IDColumn)miniTable.getModel().getValueAt(r,idColIndex)).getRecord_ID();      MFactReconciliation rec=new Query(Env.getCtx(),MFactReconciliation.Table_Name,"Fact_Acct_ID = ?",null).setParameters(new Object[]{factId}).first();      if (rec == null) {        rec=new MFactReconciliation(Env.getCtx(),0,null);        rec.setFact_Acct_ID(factId);      }      rec.setMatchCode(matchcode);      rec.setIsDirectLoad(true);      rec.saveEx();      ((DefaultTableModel)miniTable.getModel()).removeRow(r--);    }  }}  }
class C{  public XYLocation up(){  return north();}  }
class C{  public SnippetCounter(Group group,String name,String description){  this.group=group;  this.name=name;  this.description=description;  if (group != null) {    List<SnippetCounter> counters=group.counters;    this.index=counters.size();    counters.add(this);    if (index == 0) {      groups.add(group);    }  } else {    this.index=-1;  }}  }
class C{  public UniqueHostAttrConstraint(Func1<String,Set<String>> coTasksGetter,String hostAttributeName){  this.coTasksGetter=coTasksGetter;  this.hostAttributeName=hostAttributeName;  this.name=UniqueHostAttrConstraint.class.getName() + "-" + hostAttributeName;}  }
class C{  public Lower(){  super("text_transformation.lower",1);}  }
class C{  static private XMLEvent constructEvent(int eventType,WbXmlStreamReader stream) throws XMLStreamException {  log.log(Level.FINE,"constructEvent()");  XMLEvent event;switch (eventType) {case XMLStreamConstants.START_DOCUMENT:    event=new WbXmlStartDocumentEvent(stream);  break;case XMLStreamConstants.END_DOCUMENT:event=new WbXmlEndDocumentEvent(stream);break;case XMLStreamConstants.START_ELEMENT:event=new WbXmlStartElementEvent(stream);break;case XMLStreamConstants.END_ELEMENT:event=new WbXmlEndElementEvent(stream);break;case XMLStreamConstants.CHARACTERS:case XMLStreamConstants.CDATA:event=new WbXmlCharactersEvent(stream);break;default :throw new UnsupportedOperationException(String.format("The %i event is not supported yet",eventType));}log.log(Level.FINE,"constructEvent(): {0}",event);return event;}  }
class C{  public OkapiBM25(){  this(1.5,0.75);}  }
class C{  private static String which(Class clazz){  try {    String classnameAsResource=clazz.getName().replace('.','/') + ".class";    ClassLoader loader=clazz.getClassLoader();    URL it;    if (loader != null) {      it=loader.getResource(classnameAsResource);    } else {      it=ClassLoader.getSystemResource(classnameAsResource);    }    if (it != null) {      return it.toString();    }  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      t.printStackTrace();    }  }  return "unknown location";}  }
class C{  private void orientTailPath(List<Node> path){  for (int i=0; i < path.size() - 1; i++) {    Node n1=path.get(i);    Node n2=path.get(i + 1);    graph.setEndpoint(n1,n2,Endpoint.TAIL);    graph.setEndpoint(n2,n1,Endpoint.TAIL);    changeFlag=true;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Orient circle undirectedPaths",graph.getEdge(n1,n2)));  }}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  public static void safeClose(OutputStream out){  try {    if (out != null)     out.close();  } catch (  IOException e) {  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public Cache(final Index backupIndex,final int hitLimit,final int missLimit){  this.index=backupIndex;  this.hitLimit=hitLimit;  this.missLimit=missLimit;  init();  objectTracker.put(backupIndex.filename(),this);}  }
class C{  public void writeFloat(float f,boolean append){  writeFloatArray(new float[]{f},append);}  }
class C{  public AccumuloAllElementsRetriever(final AccumuloStore store,final GetAllElements<?> operation,final User user,final IteratorSetting... iteratorSettings) throws StoreException {  super(store,operation,user,iteratorSettings);}  }
class C{  public static void paintGridOutline(final GuiEditor editor,@NotNull final RadComponent component,final Graphics g){  if (!editor.isShowGrid()) {    return;  }  if (!(component instanceof RadContainer)) {    return;  }  final RadContainer container=(RadContainer)component;  if (!container.getLayoutManager().isGrid()) {    return;  }  Container parent=component.getDelegee().getParent();  while (parent != null) {    if (parent == editor.getDragLayer()) {      return;    }    parent=parent.getParent();  }  final Point point=SwingUtilities.convertPoint(component.getDelegee(),0,0,editor.getRootContainer().getDelegee());  g.translate(point.x,point.y);  try {    if (container.getWidth() > 0 && container.getHeight() > 0) {      Image gridImage=CachedGridImage.getGridImage(container);      g.drawImage(gridImage,0,0,null);    }  }  finally {    g.translate(-point.x,-point.y);  }}  }
class C{  public ExtractClassDescriptor(String project,String description,String comment,Map arguments,int flags) throws IllegalArgumentException {  super(IJavaRefactorings.EXTRACT_CLASS,project,description,comment,arguments,flags);  if (JavaRefactoringDescriptorUtil.getString(arguments,OLD_FIELD_COUNT,true) != null) {    String[] oldFieldNames=JavaRefactoringDescriptorUtil.getStringArray(arguments,OLD_FIELD_COUNT,OLD_FIELD_NAME,0);    boolean[] createField=JavaRefactoringDescriptorUtil.getBooleanArray(arguments,CREATE_FIELD_COUNT,CREATE_FIELD,0);    fFields=new Field[oldFieldNames.length];    for (int i=0; i < oldFieldNames.length; i++) {      fFields[i]=new Field(oldFieldNames[i]);      fFields[i].setCreateField(createField[i]);      if (createField[i])       fFields[i].setNewFieldName(JavaRefactoringDescriptorUtil.getString(arguments,JavaRefactoringDescriptorUtil.getAttributeName(NEW_FIELD_NAME,i)));    }  }}  }
class C{  public static List<String> splitSmart(String s,String separator,boolean decode){  ArrayList<String> lst=new ArrayList<>(2);  StringBuilder sb=new StringBuilder();  int pos=0, end=s.length();  while (pos < end) {    if (s.startsWith(separator,pos)) {      if (sb.length() > 0) {        lst.add(sb.toString());        sb=new StringBuilder();      }      pos+=separator.length();      continue;    }    char ch=s.charAt(pos++);    if (ch == '\\') {      if (!decode)       sb.append(ch);      if (pos >= end)       break;      ch=s.charAt(pos++);      if (decode) {switch (ch) {case 'n':          ch='\n';        break;case 't':      ch='\t';    break;case 'r':  ch='\r';break;case 'b':ch='\b';break;case 'f':ch='\f';break;}}}sb.append(ch);}if (sb.length() > 0) {lst.add(sb.toString());}return lst;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_trainInstances == null) {    text.append("\tOneR feature evaluator has not been built yet");  } else {    text.append("\tOneR feature evaluator.\n\n");    text.append("\tUsing ");    if (m_evalUsingTrainingData) {      text.append("training data for evaluation of attributes.");    } else {      text.append("" + getFolds() + " fold cross validation for evaluating "+ "attributes.");    }    text.append("\n\tMinimum bucket size for OneR: " + getMinimumBucketSize());  }  text.append("\n");  return text.toString();}  }
class C{  public String toString(){  if (dnName == null)   return "";  return (dnName.toString());}  }
class C{  public void fail(Exception e){  collector.reportError(e);  for (  Tuple t : tupleBatch) {    collector.fail(t);  }  tupleBatch.clear();  forceFlush=false;}  }
class C{  private PollingUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public CInlineFunctionAction(final CGraphModel model,final INaviCodeNode node,final INaviInstruction instruction,final INaviFunction function){  super(String.format("Inline function %s",Preconditions.checkNotNull(function,"IE02879: function argument can not be null").getName()));  m_model=Preconditions.checkNotNull(model,"IE02160: Model argument can not be null");  m_node=Preconditions.checkNotNull(node,"IE02161: Node argument can not be null");  m_instruction=Preconditions.checkNotNull(instruction,"IE02162: Instruction argument can not be null");  m_function=function;}  }
class C{  private PostgreSQLDatabaseFunctions(){}  }
class C{  private void createBalanceLine(){  StringBuffer sql=new StringBuffer(s_insert);  sql.append("SELECT ").append(getAD_PInstance_ID()).append(",0,");  sql.append(getAD_Client_ID()).append(",");  if (p_AD_Org_ID == 0)   sql.append("0"); else   sql.append(p_AD_Org_ID);  sql.append(", SysDate,").append(getAD_User_ID()).append(",SysDate,").append(getAD_User_ID()).append(",");  sql.append(p_C_AcctSchema_ID).append(",");  if (p_Account_ID == 0)   sql.append("null"); else   sql.append(p_Account_ID);  if (p_AccountValue_From != null)   sql.append(",").append(DB.TO_STRING(p_AccountValue_From)); else   if (p_AccountValue_To != null)   sql.append(",' '"); else   sql.append(",null");  Timestamp balanceDay=p_DateAcct_From;  sql.append(",null,").append(DB.TO_DATE(balanceDay,true)).append(",");  if (p_C_Period_ID == 0)   sql.append("null"); else   sql.append(p_C_Period_ID);  sql.append(",");  sql.append("null,null,null,");  sql.append("null,null,null,null,'").append(p_PostingType).append("',");  sql.append("null,null,null,null,");  sql.append(" COALESCE(SUM(AmtAcctDr),0),COALESCE(SUM(AmtAcctCr),0)," + "COALESCE(SUM(AmtAcctDr),0)-COALESCE(SUM(AmtAcctCr),0)," + " null,COALESCE(SUM(Qty),0),");  if (p_M_Product_ID == 0)   sql.append("null"); else   sql.append(p_M_Product_ID);  sql.append(",");  if (p_C_BPartner_ID == 0)   sql.append("null"); else   sql.append(p_C_BPartner_ID);  sql.append(",");  if (p_AD_OrgTrx_ID == 0)   sql.append("null"); else   sql.append(p_AD_OrgTrx_ID);  sql.append(",");  if (p_C_LocFrom_ID == 0)   sql.append("null"); else   sql.append(p_C_LocFrom_ID);  sql.append(",");  if (p_C_LocTo_ID == 0)   sql.append("null"); else   sql.append(p_C_LocTo_ID);  sql.append(",");  if (p_C_SalesRegion_ID == 0)   sql.append("null"); else   sql.append(p_C_SalesRegion_ID);  sql.append(",");  if (p_C_Project_ID == 0)   sql.append("null"); else   sql.append(p_C_Project_ID);  sql.append(",");  if (p_C_Campaign_ID == 0)   sql.append("null"); else   sql.append(p_C_Campaign_ID);  sql.append(",");  if (p_C_Activity_ID == 0)   sql.append("null"); else   sql.append(p_C_Activity_ID);  sql.append(",");  if (p_User1_ID == 0)   sql.append("null"); else   sql.append(p_User1_ID);  sql.append(",");  if (p_User2_ID == 0)   sql.append("null"); else   sql.append(p_User2_ID);  sql.append(", null,null");  sql.append(" FROM Fact_Acct WHERE AD_Client_ID=").append(getAD_Client_ID()).append(" AND ").append(m_parameterWhere).append(" AND DateAcct < ").append(DB.TO_DATE(p_DateAcct_From,true));  if (p_Account_ID > 0) {    m_acct=new MElementValue(getCtx(),p_Account_ID,get_TrxName());    if (!m_acct.isBalanceSheet()) {      MPeriod first=MPeriod.getFirstInYear(getCtx(),p_DateAcct_From,p_AD_Org_ID);      if (first != null)       sql.append(" AND DateAcct >= ").append(DB.TO_DATE(first.getStartDate(),true)); else       log.log(Level.SEVERE,"first period not found");    }  }  int no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no == 0)   log.fine(sql.toString());  log.fine("#" + no + " (Account_ID="+ p_Account_ID+ ")");}  }
class C{  @Nullable public static <T extends Enum<T> & EnumClass<V>,V>T fromId(Class<T> e,V id){  if (id == null)   return null;  for (  T enumConstant : e.getEnumConstants()) {    if (enumConstant.getId().equals(id)) {      return enumConstant;    }  }  throw new IllegalArgumentException("Can't parse " + e.getSimpleName() + " from id "+ id);}  }
class C{  public void addCapabilities(String... capabilities){  Collections.addAll(this.capabilities,capabilities);}  }
class C{  public void testPowNegativeNumToOddExp(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=-1;  int exp=5;  byte rBytes[]={-21,-94,-42,-15,-127,113,-50,-88,115,-35,3,59,-92,111,-75,103,-42,41,34,-114,99,-32,105,-59,127,45,108,74,-93,105,33,12,-5,-20,17,-21,-119,-127,-115,27,-122,26,-67,109,-125,16,91,-70,109};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static boolean processElementsInRange(PsiElement element,@NotNull TextRange range,@NotNull final PsiElementProcessor<PsiElement> processor){  if (element == null) {    return true;  }  TextRange elementRange=element.getNode().getTextRange();  if (range.contains(elementRange)) {    if (!processor.execute(element)) {      return false;    }  }  if (range.intersects(elementRange)) {    PsiElement run=element.getFirstChild();    while (run != null) {      if (!processElementsInRange(run,range,processor)) {        return false;      }      run=run.getNextSibling();    }  }  return true;}  }
class C{  public AccountExpiredException(){  super();}  }
class C{  public void values(ArrayList list){  Object[] val=values;  byte[] stat=state;  for (int i=stat.length; i-- > 0; ) {    if (stat[i] == FULL)     list.add(val[i]);  }}  }
class C{  public static String warningTokenFromIrritant(int irritant){switch (irritant) {case (InvalidJavadoc | UsingDeprecatedAPI):case UsingDeprecatedAPI:    return "deprecation";case FinallyBlockNotCompleting:  return "finally";case FieldHiding:case LocalVariableHiding:case MaskedCatchBlock:return "hiding";case NonExternalizedString:return "nls";case UnnecessaryTypeCheck:return "cast";case IndirectStaticAccess:case NonStaticAccessToStatic:return "static-access";case AccessEmulation:return "synthetic-access";case UnqualifiedFieldAccess:return "unqualified-field-access";case UncheckedTypeOperation:return "unchecked";case MissingSerialVersion:return "serial";case AutoBoxing:return "boxing";case TypeHiding:return "hiding";case IncompleteEnumSwitch:return "incomplete-switch";case MissingDeprecatedAnnotation:return "dep-ann";case RawTypeReference:return "rawtypes";case UnusedLabel:case UnusedTypeArguments:case RedundantSuperinterface:case UnusedLocalVariable:case UnusedArgument:case UnusedImport:case UnusedPrivateMember:case UnusedDeclaredThrownException:case DeadCode:case UnusedObjectAllocation:case RedundantSpecificationOfTypeArguments:return "unused";case DiscouragedReference:case ForbiddenReference:return "restriction";case NullReference:case PotentialNullReference:case RedundantNullCheck:return "null";case FallthroughCase:return "fallthrough";case OverridingMethodWithoutSuperInvocation:return "super";case MethodCanBeStatic:case MethodCanBePotentiallyStatic:return "static-method";case InvalidJavadoc:case MissingJavadocComments:case MissingJavadocTags:return "javadoc";}return null;}  }
class C{  private static float evalCurrentModel(){  int annotations=0;  int predictions=0;  int errors=0;  cycle=false;  for (int i=0; i < nvars; i++) {    visited[i]=false;  }  for (int vi=0; vi < nvars; vi++) {    for (int vj=0; vj < nvars; vj++) {      if (vi == vj) {        continue;      }      targetParent=vi;      pos=0;      neg=0;      Biolingua.findPaths(vj,0);      if (cycle) {        return -1;      }      if (pos + neg > 0) {        if ((pos > 0) && (neg > 0)) {          annotations++;        }        int predictedSign=((pos == neg) ? 0 : (pos > neg ? 1 : -1));        float correlValue=Biolingua.cm.getValue(vi,vj);        if (sm != null) {          if (Biolingua.sm.getValue(vi,vj) > SIGNIF_LEVEL) {            correlValue=0;          }        }        int correlMSign=(Biolingua.isZero(correlValue) ? 0 : (correlValue > 0 ? 1 : -1));        if (correlMSign == predictedSign) {          predictions++;        } else {          errors++;        }      } else {        if (!isZero(Biolingua.cm.getValue(vi,vj))) {          errors++;        }      }    }  }  int nEdges=Biolingua.g.getNumEdges();  float evalMetric=bitsLinks * nEdges + bitsAnnotat * annotations + bitsErrors * errors - bitsPredic * predictions;  return evalMetric;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean mayHaveUpstreamData(GraphManager m,int stageId){  if (isStageTerminated(m,stageId)) {    return false;  }  int pipeId;  int outputPos=m.stageIdToOutputsBeginIdx[stageId];  boolean noConsumers=true;  int count=0;  while ((pipeId=m.multOutputIds[outputPos++]) >= 0) {    count++;    int ringConsumerId=GraphManager.getRingConsumerId(m,pipeId);    noConsumers=noConsumers & (ringConsumerId < 0 || isStageTerminated(m,ringConsumerId));  }  if (count > 0 && noConsumers) {    return false;  }  int inputPos=m.stageIdToInputsBeginIdx[stageId];  int inputCounts=0;  while ((pipeId=m.multInputIds[inputPos++]) >= 0) {    ++inputCounts;    if (isProducerTerminated(m,pipeId)) {      Pipe.releaseAllBatchedReads(m.pipeIdToPipe[pipeId]);      if (Pipe.contentRemaining(m.pipeIdToPipe[pipeId]) > 0) {        return true;      }    } else {      return true;    }  }  return 0 == inputCounts && !isStageShuttingDown(m,stageId);}  }
class C{  final int calculateLineCount(){  int nlines=0;  int startOffset=getStartOffset();  int p1=getEndOffset();  RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  Element map=doc.getDefaultRootElement();  int line=map.getElementIndex(startOffset);  Token tokenList=doc.getTokenListForLine(line);  float x0=0;  for (int p0=startOffset; p0 < p1; ) {    nlines+=1;    x0=RSyntaxUtilities.makeTokenListStartAt(tokenList,p0,WrappedSyntaxView.this,textArea,x0);    int p=calculateBreakPosition(p0,tokenList,x0);    p0=(p == p0) ? ++p : p;  }  return nlines;}  }
class C{  public boolean isExceptionEdge(){  return type == HANDLED_EXCEPTION_EDGE || type == UNHANDLED_EXCEPTION_EDGE;}  }
class C{  public boolean isMenuPressed(){  return menuPressed;}  }
class C{  public static final long signedToLong(int x){  return ((long)x & 0xFFFFFFFFL);}  }
class C{  @Override public void PI(final PdfObject pdfObject,final int type){  if (showMethods) {    System.out.println("DefaultActionHandler.PI()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject PIdictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.PI);    currentPdfFile.checkResolved(PIdictionary);    if (PIdictionary != null) {      final String jsCode=PIdictionary.getTextStreamValue(PdfDictionary.JS);      javascript.executeAction(jsCode);    }  }}  }
class C{  @Deprecated public static Node toNode(Object o) throws PageException {  if (o instanceof XMLStruct)   return ((XMLStruct)o).toNode();  if (o instanceof Node)   return (Node)o;  throw new CasterException(o,"node");}  }
class C{  public Builder notificationSound(String value){  notificationParams.put("sound",value);  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.EXECUTION_FLOW__SOURCE_ELEMENT:    if (resolve)     return getSourceElement();  return basicGetSourceElement();case SexecPackage.EXECUTION_FLOW__NAME:return getName();case SexecPackage.EXECUTION_FLOW__STATE_VECTOR:return getStateVector();case SexecPackage.EXECUTION_FLOW__SUB_SCOPES:return getSubScopes();case SexecPackage.EXECUTION_FLOW__SUPER_SCOPE:if (resolve) return getSuperScope();return basicGetSuperScope();case SexecPackage.EXECUTION_FLOW__ENTER_SEQUENCES:return getEnterSequences();case SexecPackage.EXECUTION_FLOW__EXIT_SEQUENCE:return getExitSequence();case SexecPackage.EXECUTION_FLOW__INIT_SEQUENCE:return getInitSequence();case SexecPackage.EXECUTION_FLOW__REACTIONS:return getReactions();case SexecPackage.EXECUTION_FLOW__SIMPLE_NAME:return getSimpleName();case SexecPackage.EXECUTION_FLOW__REACT_SEQUENCE:return getReactSequence();case SexecPackage.EXECUTION_FLOW__STATES:return getStates();case SexecPackage.EXECUTION_FLOW__NODES:return getNodes();case SexecPackage.EXECUTION_FLOW__REGIONS:return getRegions();case SexecPackage.EXECUTION_FLOW__HISTORY_VECTOR:return getHistoryVector();case SexecPackage.EXECUTION_FLOW__ENTRY_ACTION:return getEntryAction();case SexecPackage.EXECUTION_FLOW__EXIT_ACTION:return getExitAction();case SexecPackage.EXECUTION_FLOW__STATIC_INIT_SEQUENCE:return getStaticInitSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void createLink(LineOnBoard line){  Node start=null, end=null;  boolean startAdded=false, endAdded=false;  if (line.nodeClosestToStart != null)   start=line.nodeClosestToStart; else {    start=getRandomNode(inverseTransform(line.start));    net.addNode(start);    startAdded=true;  }  if (line.nodeClosestToEnd != null)   end=line.nodeClosestToEnd; else {    end=getRandomNode(inverseTransform(line.end));    net.addNode(end);    endAdded=true;  }  Id<Link> id=getRandomLinkId();  Link newLink=(Link)net.getFactory().createLink(id,start,end);  newLink.setLength(CoordUtils.calcEuclideanDistance(newLink.getFromNode().getCoord(),newLink.getToNode().getCoord()));  newLink.setCapacity(600.0);  newLink.setFreespeed(8.3333);  net.addLink(newLink);  pairLinkLink p1=new pairLinkLink(), p2=new pairLinkLink();  if (line.linkClosestToStart != null) {    p1=fixLink(line.linkClosestToStart,start);  }  if (line.linkClosestToEnd != null) {    p2=fixLink(line.linkClosestToEnd,end);  }  this.addLinkInSelectedLinkList(newLink,false);  diffManager.saveState(diffManager.cloneLink(newLink),DifferenceManager.type.CREATE,startAdded ? start : null,endAdded ? end : null,p1.link1,p1.link2,p2.link1,p2.link2,line.linkClosestToStart,line.linkClosestToEnd);  controls.updateButtons();  controls.updateTable();  setMinMaxCaps();}  }
class C{  public static List<View> instantiateChain(Viewable parentViewable,List<ViewFactory> viewFactories,AgentInstanceViewFactoryChainContext viewFactoryChainContext){  List<View> newViews=new LinkedList<View>();  Viewable parent=parentViewable;  for (int i=0; i < viewFactories.size(); i++) {    ViewFactory viewFactory=viewFactories.get(i);    View currentView=viewFactory.makeView(viewFactoryChainContext);    newViews.add(currentView);    parent.addView(currentView);    parent=currentView;  }  return newViews;}  }
class C{  @Override public V put(K key,V value){  Object _key=key;  Object _value=value;  if (_key == null) {    _key=NULL_OBJECT;  }  if (_value == null) {    _value=NULL_OBJECT;  }  int index=findIndex(_key,elementData);  if (elementData[index] != _key) {    modCount++;    if (++size > threshold) {      rehash();      index=findIndex(_key,elementData);    }    elementData[index]=_key;    elementData[index + 1]=null;  }  Object result=elementData[index + 1];  elementData[index + 1]=_value;  return massageValue(result);}  }
class C{  public static HttpParameters decodeForm(String form){  HttpParameters params=new HttpParameters();  if (isEmpty(form)) {    return params;  }  for (  String nvp : form.split("\\&")) {    int equals=nvp.indexOf('=');    String name;    String value;    if (equals < 0) {      name=percentDecode(nvp);      value=null;    } else {      name=percentDecode(nvp.substring(0,equals));      value=percentDecode(nvp.substring(equals + 1));    }    params.put(name,value);  }  return params;}  }
class C{  public GraalCompilerTest(Backend backend){  this.backend=backend;  this.providers=backend.getProviders();  this.suites=new DerivedOptionValue<>(null);  this.lirSuites=new DerivedOptionValue<>(null);}  }
class C{  public void waitTillRetry() throws InterruptedException {  long time=manager.getRateLimit(type,server);  if (time < 1) {    return;  }  Thread.sleep(time);}  }
class C{  public static boolean isDefaultJoinFunction(JoinFunction joinFunction){  return joinFunction.involvedFields.length == 1 && joinFunction.involvedFields[0].equals(ChronixQueryParams.DEFAULT_JOIN_FIELD);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Angle normalizedHeading(Angle originalHeading,Angle deltaHeading){  final double twoPI=2 * Math.PI;  double newHeading=originalHeading.getRadians() + deltaHeading.getRadians();  if (Math.abs(newHeading) > twoPI)   newHeading=newHeading % twoPI;  return Angle.fromRadians(newHeading >= 0 ? newHeading : newHeading + twoPI);}  }
class C{  public void test_ticket_bg1899_j() throws Exception {  new TestHelper("ticket_bg1899c","ticket_bg1899j.rq","ticket_bg1899abcd.ttl","ticket_bg1899abcd.srx").runTest();}  }
class C{  public static Notification buildMessageNotification(Context context,String from,String matrixId,boolean displayMatrixId,Bitmap largeIcon,int unseenNotifiedRoomsCount,String body,String roomId,String roomName,boolean shouldPlaySound,boolean isInvitationEvent){  NotificationCompat.Builder builder=new NotificationCompat.Builder(context);  builder.setWhen(System.currentTimeMillis());  if (!TextUtils.isEmpty(from)) {    if (!TextUtils.isEmpty(roomName) && !roomName.equals(from)) {      builder.setContentTitle(from + " (" + roomName+ ")");    } else {      builder.setContentTitle(from);    }  } else {    builder.setContentTitle(roomName);  }  builder.setContentText(body);  builder.setAutoCancel(true);  builder.setSmallIcon(R.drawable.message_notification_transparent);  if (null != largeIcon) {    largeIcon=createSquareBitmap(largeIcon);    if (0 != unseenNotifiedRoomsCount) {      try {        android.graphics.Bitmap.Config bitmapConfig=largeIcon.getConfig();        if (bitmapConfig == null) {          bitmapConfig=android.graphics.Bitmap.Config.ARGB_8888;        }        float densityScale=context.getResources().getDisplayMetrics().density;        int side=(int)(64 * densityScale);        Bitmap bitmapCopy=Bitmap.createBitmap(side,side,bitmapConfig);        Canvas canvas=new Canvas(bitmapCopy);        int bitmapWidth=largeIcon.getWidth();        int bitmapHeight=largeIcon.getHeight();        float scale=Math.min((float)canvas.getWidth() / (float)bitmapWidth,(float)canvas.getHeight() / (float)bitmapHeight);        int scaledWidth=(int)(bitmapWidth * scale);        int scaledHeight=(int)(bitmapHeight * scale);        Bitmap rescaledBitmap=Bitmap.createScaledBitmap(largeIcon,scaledWidth,scaledHeight,true);        canvas.drawBitmap(rescaledBitmap,(side - scaledWidth) / 2,(side - scaledHeight) / 2,null);        String text="" + unseenNotifiedRoomsCount;        Paint textPaint=new Paint();        textPaint.setTypeface(Typeface.create(Typeface.DEFAULT,Typeface.BOLD));        textPaint.setColor(Color.WHITE);        textPaint.setTextSize(10 * densityScale);        Rect textBounds=new Rect();        if (-1 == mUnreadBubbleWidth) {          textPaint.getTextBounds("99",0,2,textBounds);          mUnreadBubbleWidth=textBounds.width();        }        textPaint.getTextBounds(text,0,text.length(),textBounds);        int radius=mUnreadBubbleWidth;        Paint paint=new Paint();        paint.setStyle(Paint.Style.FILL);        paint.setColor(Color.RED);        canvas.drawCircle(canvas.getWidth() - radius,radius,radius,paint);        canvas.drawText(text,canvas.getWidth() - textBounds.width() - (radius - (textBounds.width() / 2)),-textBounds.top + (radius - (-textBounds.top / 2)),textPaint);        largeIcon=bitmapCopy;      } catch (      Exception e) {        Log.e(LOG_TAG,"## buildMessageNotification(): Exception Msg=" + e.getMessage());      }    }    builder.setLargeIcon(largeIcon);  }  String name=": ";  if (!TextUtils.isEmpty(roomName)) {    name=" (" + roomName + "): ";  }  if (displayMatrixId) {    from="[" + matrixId + "]\n"+ from;  }  builder.setTicker(from + name + body);  TaskStackBuilder stackBuilder;  Intent intent;  intent=new Intent(context,VectorRoomActivity.class);  intent.putExtra(VectorRoomActivity.EXTRA_ROOM_ID,roomId);  if (null != matrixId) {    intent.putExtra(VectorRoomActivity.EXTRA_MATRIX_ID,matrixId);  }  stackBuilder=TaskStackBuilder.create(context).addParentStack(VectorRoomActivity.class).addNextIntent(intent);  PendingIntent pendingIntent=stackBuilder.getPendingIntent((new Random()).nextInt(1000),PendingIntent.FLAG_UPDATE_CURRENT);  builder.setContentIntent(pendingIntent);  NotificationCompat.BigTextStyle textStyle=new NotificationCompat.BigTextStyle();  textStyle.bigText(from + ":" + body);  builder.setStyle(textStyle);  if (!LockScreenActivity.isDisplayingALockScreenActivity()) {    if (!isInvitationEvent) {      Intent quickReplyIntent=new Intent(context,LockScreenActivity.class);      quickReplyIntent.putExtra(LockScreenActivity.EXTRA_ROOM_ID,roomId);      quickReplyIntent.putExtra(LockScreenActivity.EXTRA_SENDER_NAME,from);      quickReplyIntent.putExtra(LockScreenActivity.EXTRA_MESSAGE_BODY,body);      if (null != matrixId) {        quickReplyIntent.putExtra(LockScreenActivity.EXTRA_MATRIX_ID,matrixId);      }      quickReplyIntent.setAction(QUICK_LAUNCH_ACTION + ((int)(System.currentTimeMillis())));      PendingIntent pIntent=PendingIntent.getActivity(context,0,quickReplyIntent,0);      builder.addAction(R.drawable.ic_material_mode_edit_green_vector,context.getString(R.string.action_quick_reply),pIntent);    }    Intent roomIntentTap;    if (isInvitationEvent) {      roomIntentTap=CommonActivityUtils.buildIntentPreviewRoom(matrixId,roomId,context,VectorFakeRoomPreviewActivity.class);    } else {      roomIntentTap=new Intent(context,VectorRoomActivity.class);      roomIntentTap.putExtra(VectorRoomActivity.EXTRA_ROOM_ID,roomId);    }    roomIntentTap.setAction(TAP_TO_VIEW_ACTION + ((int)(System.currentTimeMillis())));    TaskStackBuilder stackBuilderTap=TaskStackBuilder.create(context).addParentStack(VectorRoomActivity.class).addNextIntent(roomIntentTap);    builder.addAction(R.drawable.ic_material_message_green_vector,context.getString(R.string.action_open),stackBuilderTap.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT));  }  Notification n=builder.build();  n.flags|=Notification.FLAG_SHOW_LIGHTS;  n.defaults|=Notification.DEFAULT_LIGHTS;  if (shouldPlaySound) {    n.defaults|=Notification.DEFAULT_SOUND;  }  if (android.os.Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {    try {      Method deprecatedMethod=n.getClass().getMethod("setLatestEventInfo",Context.class,CharSequence.class,CharSequence.class,PendingIntent.class);      deprecatedMethod.invoke(n,context,from,body,pendingIntent);    } catch (    Exception ex) {      Log.e(LOG_TAG,"## buildMessageNotification(): Exception - setLatestEventInfo() Msg=" + ex.getMessage());    }  }  return n;}  }
class C{  static public String randomPositiveFloat(int whole,int decimal){  StringBuilder output=new StringBuilder();  output.append(rnd.nextInt(8) + 1);  for (int i=0; i < whole - 1; i++) {    output.append(rnd.nextInt(9));  }  output.append(".");  for (int i=0; i < decimal; i++) {    output.append(rnd.nextInt(9));  }  return output.toString();}  }
class C{  public void addStep(int index,Step step){  checkNotNull(step,"The step can not be null");  checkArgument(!step.removed(),"The step must not have been disabled already");  writeStepsSafelyConsume(null);  this.eventBus.register(step);  this.eventBus.post(new StepAddedEvent(step,index));}  }
class C{  protected void sequence_Expression(ISerializationContext context,CommaExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public int hashCode(){  if (myhash == -1) {    myhash=37 + oid.hashCode();    for (int i=0; i < nameValue.length; i++) {      myhash=37 * myhash + nameValue[i];    }  }  return myhash;}  }
class C{  public void draw(GL10 gl){  gl.glEnable(GL10.GL_CULL_FACE);  gl.glFrontFace(GL10.GL_CW);  gl.glShadeModel(GL10.GL_SMOOTH);  gl.glVertexPointer(3,GL10.GL_FLOAT,0,mVertexBuffer);  gl.glColorPointer(4,GL10.GL_FLOAT,0,mColorBuffer);  gl.glDrawElements(GL10.GL_TRIANGLES,36,GL10.GL_UNSIGNED_BYTE,mIndexBuffer);}  }
class C{  public boolean checkEnvironment(PrintWriter pw){  if (null != pw)   outWriter=pw;  Hashtable hash=getEnvironmentHash();  boolean environmentHasErrors=writeEnvironmentReport(hash);  if (environmentHasErrors) {    logMsg("# WARNING: Potential problems found in your environment!");    logMsg("#    Check any 'ERROR' items above against the Xalan FAQs");    logMsg("#    to correct potential problems with your classes/jars");    logMsg("#    http://xml.apache.org/xalan-j/faq.html");    if (null != outWriter)     outWriter.flush();    return false;  } else {    logMsg("# YAHOO! Your environment seems to be OK.");    if (null != outWriter)     outWriter.flush();    return true;  }}  }
class C{  @Override public boolean write(byte[] data,int offset,int length) throws IOException {  if (mSeqSize + length <= mLimit) {    mSeqData.write(data,offset,length);    mSeqSize+=length;    mChecksumSeq.update(data,offset,length);    return true;  }  return false;}  }
class C{  public static float floatLog(float param){  double arg=(param - 1) / (param + 1);  double arg2=arg;  int counter=1;  float result=(float)arg;  while (arg2 > 0.001) {    counter+=2;    arg2*=arg * arg;    result+=(1. / counter) * arg2;  }  return 2 * result;}  }
class C{  public static boolean testRayAar(double originX,double originY,double dirX,double dirY,double minX,double minY,double maxX,double maxY){  double invDirX=1.0 / dirX, invDirY=1.0 / dirY;  double tNear, tFar, tymin, tymax;  if (invDirX >= 0.0) {    tNear=(minX - originX) * invDirX;    tFar=(maxX - originX) * invDirX;  } else {    tNear=(maxX - originX) * invDirX;    tFar=(minX - originX) * invDirX;  }  if (invDirY >= 0.0) {    tymin=(minY - originY) * invDirY;    tymax=(maxY - originY) * invDirY;  } else {    tymin=(maxY - originY) * invDirY;    tymax=(minY - originY) * invDirY;  }  if (tNear > tymax || tymin > tFar)   return false;  tNear=tymin > tNear || Double.isNaN(tNear) ? tymin : tNear;  tFar=tymax < tFar || Double.isNaN(tFar) ? tymax : tFar;  return tNear < tFar && tFar >= 0.0;}  }
class C{  public ScreenQuad(){  this(true);}  }
class C{  public static void restartApp(Activity activity){  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);  SharedPreferences.Editor editor=preferences.edit();  if (!preferences.getBoolean(RESTART_IN_PROGRESS_KEY,false)) {    CommonActivityUtils.displayToast(activity.getApplicationContext(),"Restart the application (low memory)");    Log.e(LOG_TAG,"Kill the application");    editor.putBoolean(RESTART_IN_PROGRESS_KEY,true);    editor.commit();    PendingIntent mPendingIntent=PendingIntent.getActivity(activity,314159,new Intent(activity,LoginActivity.class),PendingIntent.FLAG_CANCEL_CURRENT);    AlarmManager mgr=(AlarmManager)activity.getSystemService(Context.ALARM_SERVICE);    mgr.set(AlarmManager.RTC,System.currentTimeMillis() + 50,mPendingIntent);    System.exit(0);  } else {    Log.e(LOG_TAG,"The application is restarting, please wait !!");    activity.finish();  }}  }
class C{  final Entry<K,V> removeEntryForKey(Object key){  int hash=(key == null) ? 0 : hash(key);  int i=indexFor(hash,table.length);  Entry<K,V> prev=table[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    Object k;    if (e.hash == hash && ((k=e.key) == key || (key != null && key.equals(k)))) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public static List<GeoTimeSerie> timesplit(GeoTimeSerie gts,long quietperiod,int minvalues,String labelname){  List<GeoTimeSerie> series=new ArrayList<GeoTimeSerie>();  if (0 == gts.values || gts.hasLabel(labelname)) {    series.add(gts.clone());    return series;  }  sort(gts,false);  long lasttick=gts.ticks[0];  int idx=0;  int gtsid=1;  GeoTimeSerie serie=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,4);  serie.setName(gts.getName());  Map<String,String> labels=new HashMap<String,String>();  labels.putAll(gts.getLabels());  labels.put(labelname,Integer.toString(gtsid));  serie.setLabels(labels);  while (idx < gts.values) {    if (gts.ticks[idx] - lasttick >= quietperiod) {      if (serie.values > 0 && serie.values >= minvalues) {        series.add(serie);      }      serie=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,4);      serie.setName(gts.getName());      labels=new HashMap<String,String>();      labels.putAll(gts.getLabels());      gtsid++;      labels.put(labelname,Integer.toString(gtsid));      serie.setLabels(labels);    }    Object value=GTSHelper.valueAtIndex(gts,idx);    GTSHelper.setValue(serie,gts.ticks[idx],null != gts.locations ? gts.locations[idx] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[idx] : GeoTimeSerie.NO_ELEVATION,value,false);    lasttick=gts.ticks[idx];    idx++;  }  if (serie.values > 0 && serie.values >= minvalues) {    series.add(serie);  }  return series;}  }
class C{  @SuppressWarnings({"SameReturnValue","UnusedParameters"}) public static boolean isFilenameValid(String filename){  return true;}  }
class C{  public String toString(){  return "forward:" + forward + ", backward:"+ backward;}  }
class C{  private void highlight(int lineNumber,String line,int startOffset){  int length=line.length();  ParseResult pr=lineInfo.get(lineNumber).pr;  setCharacterAttributes(startOffset,length,normal,true);  String lineWithoutCommand=line;  int startOffsetAfterCommand=startOffset;  if (pr.mnemo != null) {    applyStyle(pr.mnemo,command,line,startOffset);    lineWithoutCommand=line.substring(pr.mnemo.length());    startOffsetAfterCommand+=pr.mnemo.length();  }  String[] rlist=DataSpace.getRegisterList();  for (  String aRlist : rlist) {    applyStyle(aRlist,register,line,startOffset);  }  if (pr.label != null) {    highlightLabel(pr.label,line,startOffset);  }  for (  String labelstring : pr.usedLabels) {    highlightLabel(labelstring,lineWithoutCommand,startOffsetAfterCommand);  }  if (pr.error != null) {    setCharacterAttributes(startOffset + pr.error.startPos,pr.error.length,error,true);  }  if (pr.commentStartPos > -1) {    int commentStartOffset=startOffset + pr.commentStartPos;    int commentLength=(startOffset + length) - commentStartOffset;    setCharacterAttributes(commentStartOffset,commentLength,comment,true);  }}  }
class C{  public static void callMethod(MethodOperation operation,MethodContext methodContext,List<MethodObject<?>> parameters,Class<?> methodClass,Object methodObject,String methodName,FlexibleMapAccessor<Object> retFieldFma) throws MiniLangRuntimeException {  Object[] args=null;  Class<?>[] parameterTypes=null;  if (parameters != null) {    args=new Object[parameters.size()];    parameterTypes=new Class<?>[parameters.size()];    int i=0;    for (    MethodObject<?> methodObjectDef : parameters) {      args[i]=methodObjectDef.getObject(methodContext);      Class<?> typeClass=null;      try {        typeClass=methodObjectDef.getTypeClass(methodContext);      } catch (      ClassNotFoundException e) {        throw new MiniLangRuntimeException(e,operation);      }      parameterTypes[i]=typeClass;      i++;    }  }  try {    Method method=methodClass.getMethod(methodName,parameterTypes);    Object retValue=method.invoke(methodObject,args);    if (!retFieldFma.isEmpty()) {      retFieldFma.put(methodContext.getEnvMap(),retValue);    }  } catch (  Exception e) {    throw new MiniLangRuntimeException(e,operation);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void stateChanged(ChangeEvent e){  if (m_setting)   return;  if (e.getSource() == fMinute) {    setTime();    return;  }  m_currentYear=((Integer)cYear.getValue()).intValue();  m_lastDay=-1;  setCalendar();}  }
class C{  public void paint(Graphics g,int x,int y,int w,int h){  Rectangle clipRect=g.getClipBounds();  int minX=Math.max(x,clipRect.x);  int minY=Math.max(y,clipRect.y);  int maxX=Math.min(clipRect.x + clipRect.width,x + w);  int maxY=Math.min(clipRect.y + clipRect.height,y + h);  if (maxX <= minX || maxY <= minY) {    return;  }  int xOffset=(minX - x) % 2;  for (int xCounter=minX; xCounter < maxX; xCounter+=BUFFER_SIZE) {    int yOffset=(minY - y) % 2;    int width=Math.min(BUFFER_SIZE - xOffset,maxX - xCounter);    for (int yCounter=minY; yCounter < maxY; yCounter+=BUFFER_SIZE) {      int height=Math.min(BUFFER_SIZE - yOffset,maxY - yCounter);      g.drawImage(image,xCounter,yCounter,xCounter + width,yCounter + height,xOffset,yOffset,xOffset + width,yOffset + height,null);      if (yOffset != 0) {        yCounter-=yOffset;        yOffset=0;      }    }    if (xOffset != 0) {      xCounter-=xOffset;      xOffset=0;    }  }}  }
class C{  public static boolean isDotcake(FileObject file){  return file != null && !file.isFolder() && file.getNameExt().equals(DOTCAKE_NAME);}  }
class C{  public CCodeBookmarkTable(final CCodeBookmarkManager bookmarkManager){  m_bookmarkManager=Preconditions.checkNotNull(bookmarkManager,"IE01310: Bookmark Manager can't be null");  m_model=new CCodeBookmarkTableModel(bookmarkManager);  setModel(m_model);  getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);  addMouseListener(new InternalMouseListener());}  }
class C{  final static int distance(int color,int r,int g,int b){  return (SQUARES[((color >> 16) & 0xFF) - r + MAX_RGB] + SQUARES[((color >> 8) & 0xFF) - g + MAX_RGB] + SQUARES[((color >> 0) & 0xFF) - b + MAX_RGB]);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public Long remove(Double key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public void run(TestResult result){  result.run(this);}  }
class C{  public boolean decodeShortInteger(int startIndex){  if ((wspData[startIndex] & 0x80) == 0) {    return false;  }  unsigned32bit=wspData[startIndex] & 0x7f;  dataLength=1;  return true;}  }
class C{  public static boolean isWindowsKeyStore(String storetype){  return storetype.equalsIgnoreCase("Windows-MY") || storetype.equalsIgnoreCase("Windows-ROOT");}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  public String toString(){  return getName();}  }
class C{  protected String doIt() throws java.lang.Exception {  if (m_DeleteOldImported) {    int no=0;    for (    X_I_SalesHistory saleshistory : getRecords(true,false)) {      saleshistory.deleteEx(true);      no++;    }    log.fine("Delete Old Impored =" + no);  }  fillIDValues();  importRecords();  return "Imported: " + imported + ", Not imported: "+ notimported;}  }
class C{  public CampoNumericoVO insertValue(final CampoNumericoVO value){  try {    DbConnection conn=getConnection();    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,value));    return value;  } catch (  Exception e) {    logger.error("Error insertando campo de tipo numerico para el descriptor " + value.getIdObjeto(),e);    throw new DBException("insertando campo de tipo numerico",e);  }}  }
class C{  private static String createString(byte data[]){  StringBuilder sb=new StringBuilder();  for (int i=0; i < data.length; i++) {    if (data[i] == 0) {      break;    }    sb.append((char)data[i]);  }  String result=sb.toString();  return result;}  }
class C{  public ConfusionMatrix(){  this.matrix=new HashMap<T,Multiset<T>>();  this.classes=new TreeSet<T>(Ordering.natural().nullsFirst());}  }
class C{  public final void clear(){  checkPoint=-1;  items=null;  items=new int[max_size];  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=0;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=0;    }  }  current_item=0;}  }
class C{  JavaDebugger(String host,int port,DebuggerCallback debuggerCallback) throws DebuggerException {  this.host=host;  this.port=port;  this.debuggerCallback=debuggerCallback;  connect();}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  void helpDelete(Node<K,V> b,Node<K,V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     appendMarker(f); else     b.casNext(this,f.next);  }}  }
class C{  public boolean isMatchingConcreteSyntax(String valueString){  if (valueStrings.isEmpty() || valueStrings.contains(valueString)) {    return true;  }  int idx=valueString.lastIndexOf('.');  if (idx > 0) {    if (valueStrings.contains(valueString.substring(idx + 1))) {      return true;    }  }  return false;}  }
class C{  @Override public void checkPermission(Permission perm,Object context){}  }
class C{  public GenericPdu parse(){  if (mPduDataStream == null) {    return null;  }  mHeaders=parseHeaders(mPduDataStream);  if (null == mHeaders) {    return null;  }  int messageType=mHeaders.getOctet(PduHeaders.MESSAGE_TYPE);  if (false == checkMandatoryHeader(mHeaders)) {    log("check mandatory headers failed!");    return null;  }  if ((PduHeaders.MESSAGE_TYPE_SEND_REQ == messageType) || (PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF == messageType)) {    int retrieveStatus=mHeaders.getOctet(PduHeaders.RETRIEVE_STATUS);    if (!(retrieveStatus == PduHeaders.RETRIEVE_STATUS_ERROR_PERMANENT_FAILURE || retrieveStatus == PduHeaders.RETRIEVE_STATUS_ERROR_PERMANENT_CONTENT_UNSUPPORTED || retrieveStatus == PduHeaders.RETRIEVE_STATUS_ERROR_PERMANENT_MESSAGE_NOT_FOUND || retrieveStatus == PduHeaders.RETRIEVE_STATUS_ERROR_PERMANENT_SERVICE_DENIED)) {      mBody=parseParts(mPduDataStream);      if (null == mBody) {        return null;      }    }  }switch (messageType) {case PduHeaders.MESSAGE_TYPE_SEND_REQ:    if (LOCAL_LOGV)     Log.v(LOG_TAG,"parse: MESSAGE_TYPE_SEND_REQ");  SendReq sendReq=new SendReq(mHeaders,mBody);return sendReq;case PduHeaders.MESSAGE_TYPE_SEND_CONF:if (LOCAL_LOGV) Log.v(LOG_TAG,"parse: MESSAGE_TYPE_SEND_CONF");SendConf sendConf=new SendConf(mHeaders);return sendConf;case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:if (LOCAL_LOGV) Log.v(LOG_TAG,"parse: MESSAGE_TYPE_NOTIFICATION_IND");NotificationInd notificationInd=new NotificationInd(mHeaders);return notificationInd;case PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND:if (LOCAL_LOGV) Log.v(LOG_TAG,"parse: MESSAGE_TYPE_NOTIFYRESP_IND");NotifyRespInd notifyRespInd=new NotifyRespInd(mHeaders);return notifyRespInd;case PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF:if (LOCAL_LOGV) Log.v(LOG_TAG,"parse: MESSAGE_TYPE_RETRIEVE_CONF");RetrieveConf retrieveConf=new RetrieveConf(mHeaders,mBody);byte[] contentType=retrieveConf.getContentType();if (null == contentType) {return null;}String ctTypeStr=new String(contentType);if (ctTypeStr.equals(ContentType.MULTIPART_MIXED) || ctTypeStr.equals(ContentType.MULTIPART_RELATED) || ctTypeStr.equals(ContentType.MULTIPART_ALTERNATIVE)) {return retrieveConf;} else if (ctTypeStr.equals(ContentType.MULTIPART_ALTERNATIVE)) {PduPart firstPart=mBody.getPart(0);mBody.removeAll();mBody.addPart(0,firstPart);return retrieveConf;}return null;case PduHeaders.MESSAGE_TYPE_DELIVERY_IND:if (LOCAL_LOGV) Log.v(LOG_TAG,"parse: MESSAGE_TYPE_DELIVERY_IND");DeliveryInd deliveryInd=new DeliveryInd(mHeaders);return deliveryInd;case PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND:if (LOCAL_LOGV) Log.v(LOG_TAG,"parse: MESSAGE_TYPE_ACKNOWLEDGE_IND");AcknowledgeInd acknowledgeInd=new AcknowledgeInd(mHeaders);return acknowledgeInd;case PduHeaders.MESSAGE_TYPE_READ_ORIG_IND:if (LOCAL_LOGV) Log.v(LOG_TAG,"parse: MESSAGE_TYPE_READ_ORIG_IND");ReadOrigInd readOrigInd=new ReadOrigInd(mHeaders);return readOrigInd;case PduHeaders.MESSAGE_TYPE_READ_REC_IND:if (LOCAL_LOGV) Log.v(LOG_TAG,"parse: MESSAGE_TYPE_READ_REC_IND");ReadRecInd readRecInd=new ReadRecInd(mHeaders);return readRecInd;default :log("Parser doesn't support this message type in this version!");return null;}}  }
class C{  public void disableLoop(){  if (mLoop) {    mMANativeHelper.setGeneratePreview(true);    mLoop=false;  }}  }
class C{  public static boolean isRemoteObject(DataObject o){  if ((o instanceof GeoVisibleResource) == false) {    return false;  }  buildUrnMap();  if (localVdc == null) {    throw new IllegalStateException("No local VirtualDataCenter object found");  }  String objectVdc=URIUtil.parseVdcIdFromURI(o.getId());  objectVdc=StringUtils.isNotBlank(objectVdc) ? objectVdc : FIRST_VDC_ID;  return !localVdc.getShortId().toString().equals(objectVdc);}  }
class C{  public UploadSingleInitiationResponse createUploadedFileData(String businessObjectDataStatusCode){  loggingHelper.setLogLevel(UploadDownloadHelperServiceImpl.class,LogLevel.OFF);  createDatabaseEntitiesForUploadDownloadTesting();  UploadSingleInitiationResponse resultUploadSingleInitiationResponse=uploadDownloadService.initiateUploadSingle(createUploadSingleInitiationRequest());  uploadDownloadService.performCompleteUploadSingleMessage(resultUploadSingleInitiationResponse.getSourceBusinessObjectData().getStorageUnits().get(0).getStorageFiles().get(0).getFilePath());  businessObjectDataDao.getBusinessObjectDataByAltKey(businessObjectDataHelper.getBusinessObjectDataKey(resultUploadSingleInitiationResponse.getTargetBusinessObjectData())).setStatus(businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(businessObjectDataStatusCode));  resultUploadSingleInitiationResponse.getTargetBusinessObjectData().setStatus(businessObjectDataStatusCode);  return resultUploadSingleInitiationResponse;}  }
class C{  public long remove(final RemoveOp remove,final UUID uuid) throws Exception {  if (remove == null)   throw new IllegalArgumentException();  final ConnectOptions opts=mgr.newUpdateConnectOptions(sparqlEndpointURL,uuid,tx);  remove.prepareForWire();  if (remove.format != null) {    opts.method="POST";    opts.addRequestParam("delete");    final ByteArrayEntity entity=new ByteArrayEntity(remove.data);    entity.setContentType(remove.format.getDefaultMIMEType());    opts.entity=entity;    if (remove.context != null && remove.context.length > 0) {      opts.addRequestParam("context-uri",toStrings(remove.context));    }  } else {    opts.method="DELETE";    if (remove.query != null) {      opts.addRequestParam("query",remove.query);    }    if (remove.s != null) {      opts.addRequestParam("s",EncodeDecodeValue.encodeValue(remove.s));    }    if (remove.p != null) {      opts.addRequestParam("p",EncodeDecodeValue.encodeValue(remove.p));    }    if (remove.o != null) {      opts.addRequestParam("o",EncodeDecodeValue.encodeValue(remove.o));    }    if (remove.c != null) {      opts.addRequestParam("c",EncodeDecodeValue.encodeContexts(remove.c));    }  }  opts.setAcceptHeader(ConnectOptions.MIME_APPLICATION_XML);  JettyResponseListener response=null;  boolean ok=false;  try {    checkResponseCode(response=doConnect(opts));    final MutationResult result=mutationResults(response);    ok=true;    return result.mutationCount;  }  finally {    if (response != null) {      response.abort();      if (!ok) {        try {          cancel(uuid);        } catch (        Exception ex) {          log.warn(ex);        }      }    }  }}  }
class C{  public void test_getBitsFromByteArray_03(){  final byte[] b=new byte[4];  BytesUtil.setBit(b,1,true);  assertEquals(0x00000000,getBits(b,0,0));  assertEquals(0x00000000,getBits(b,0,1));  assertEquals(0x00000001,getBits(b,0,2));  assertEquals(0x00000002,getBits(b,1,2));  assertEquals(0x00000004,getBits(b,1,3));  assertEquals(0x00000001,getBits(b,1,1));  assertEquals(0x40000000,getBits(b,0,32));  assertEquals(0x20000000,getBits(b,0,31));  assertEquals(0x10000000,getBits(b,0,30));  assertEquals(0x08000000,getBits(b,0,29));}  }
class C{  public DumpedPrivateKey(NetworkParameters params,String encoded) throws AddressFormatException {  super(encoded);  if (params != null && version != params.getDumpedPrivateKeyHeader())   throw new AddressFormatException("Mismatched version number, trying to cross networks? " + version + " vs "+ params.getDumpedPrivateKeyHeader());  if (bytes.length == 33 && bytes[32] == 1) {    compressed=true;    bytes=Arrays.copyOf(bytes,32);  } else   if (bytes.length == 32) {    compressed=false;  } else {    throw new AddressFormatException("Wrong number of bytes for a private key, not 32 or 33");  }}  }
class C{  private SprogSlot findAddress(DccLocoAddress address){  for (  SprogSlot s : slots) {    if (s.isActiveAddressMatch(address)) {      return s;    }  }  return (null);}  }
class C{  private static final void usage(){  System.err.println("usage: java Perimeter -l <num> [-p] [-m] [-h]");  System.err.println("    -l number of levels in the quadtree (image size = 2^l)");  System.err.println("    -p (print the results)");  System.err.println("    -m (print informative messages)");  System.err.println("    -h (this message)");  System.exit(0);}  }
