class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.BOOL_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public boolean addQueryInHistory(String queryText,String userId){  boolean operationStatus=false;  if (StringUtils.isNotNullNotEmptyNotWhiteSpace(queryText) && StringUtils.isNotNullNotEmptyNotWhiteSpace(userId)) {    ObjectNode queries=fetchAllQueriesFromFile();    ObjectNode userQueries=(ObjectNode)queries.get(userId);    if (userQueries == null) {      userQueries=mapper.createObjectNode();    }    userQueries.put(Long.toString(System.currentTimeMillis()),queryText);    queries.put(userId,userQueries);    operationStatus=storeQueriesInFile(queries);  }  return operationStatus;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.441 -0500",hash_original_method="27FA8D459FE7A66670B6D1423BE5DC25",hash_generated_method="A8F21AA97EE8FD2A25E189C238116F20") private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  for (int i=0; i < segments.length; ++i) {    segments[i].setTable(new HashEntry[1]);  }  for (; ; ) {    K key=(K)s.readObject();    V value=(V)s.readObject();    if (key == null)     break;    put(key,value);  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static String nameOf(final CommandName name){  if (name instanceof NestedCommandNameImpl) {    return nameOf(((NestedCommandNameImpl)name).parent) + " " + name.value();  }  return name.value();}  }
class C{  public void keyPressed(KeyEvent e){  if (keyReleased) {    for (int i=0; i < NUM_FUNCTION_BUTTONS; i++) {      if (functionButton[i].checkKeyCode(e.getKeyCode())) {        functionButton[i].changeState(!functionButton[i].isSelected());      }    }  }  keyReleased=false;}  }
class C{  public String toString(Tag[] tags){  if (tags.length == 0) {    return null;  }  String result="\n<DT><B>" + HEADER + "</B><DD>";  result+="<table cellpadding=2 cellspacing=0><tr><td bgcolor=\"yellow\">";  for (int i=0; i < tags.length; i++) {    if (i > 0) {      result+=", ";    }    result+=tags[i].text();  }  return result + "</td></tr></table></DD>\n";}  }
class C{  private static int checkFieldTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'L':    return checkClassTypeSignature(signature,pos);case '[':  return checkTypeSignature(signature,pos + 1);default :return checkTypeVariableSignature(signature,pos);}}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION___GET_TYPE_VARS:    return getTypeVars();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION___GET_TYPE_VAR_UPPER_BOUND__TYPEVARIABLE:  return getTypeVarUpperBound((TypeVariable)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  public final boolean isFlowX(){  return flowX;}  }
class C{  public static final Object readValueXml(XmlPullParser parser,String[] name) throws XmlPullParserException, IOException {  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      return readThisValueXml(parser,name);    } else     if (eventType == parser.END_TAG) {      throw new XmlPullParserException("Unexpected end tag at: " + parser.getName());    } else     if (eventType == parser.TEXT) {      throw new XmlPullParserException("Unexpected text: " + parser.getText());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Unexpected end of document");}  }
class C{  @Override public CloseableReference<Bitmap> createBitmapInternal(int width,int height,Bitmap.Config bitmapConfig){  CloseableReference<PooledByteBuffer> jpgRef=mJpegGenerator.generate((short)width,(short)height);  try {    EncodedImage encodedImage=new EncodedImage(jpgRef);    encodedImage.setImageFormat(DefaultImageFormats.JPEG);    try {      CloseableReference<Bitmap> bitmapRef=mPurgeableDecoder.decodeJPEGFromEncodedImage(encodedImage,bitmapConfig,jpgRef.get().size());      bitmapRef.get().eraseColor(Color.TRANSPARENT);      return bitmapRef;    }  finally {      EncodedImage.closeSafely(encodedImage);    }  }  finally {    jpgRef.close();  }}  }
class C{  public static String mpRelatedContentType(String boundary){  return contentTypeWithCharsetAndBoundary(MimeTypes.MULTIPART_RELATED,UTF8,boundary);}  }
class C{  public static Map<String,Object> decode(final Map<String,Object> form){  return decode(form,DEFAULT_ENCODING);}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  public Vector3f scaleAdd(float scalar,Vector3f add){  x=x * scalar + add.x;  y=y * scalar + add.y;  z=z * scalar + add.z;  return this;}  }
class C{  public JCExpression ClassLiteral(Type t){  VarSymbol lit=new VarSymbol(STATIC | PUBLIC | FINAL,names._class,t,t.tsym);  return Select(Type(t),lit);}  }
class C{  public synchronized void close(){  if (socket != null && !socket.isClosed()) {    try {      socket.close();    } catch (    IOException e) {      logger.warn(e.getMessage());    }  }}  }
class C{  public static byte createTag(byte tagClass,boolean form,byte val){  byte tag=(byte)(tagClass | val);  if (form) {    tag|=(byte)0x20;  }  return (tag);}  }
class C{  protected InputStream openFileInputStream(String filePath) throws IOException {  return new FileInputStream(filePath);}  }
class C{  public boolean addImport(@NotNull PsiJavaFile file,@NotNull PsiClass refClass){  return addImport(file,refClass,false);}  }
class C{  public static void e(String msg){  log(LEVEL.ERROR,null,msg,null);}  }
class C{  public static <T>List<T> jsonToList(String json){  Gson gson=new Gson();  return gson.fromJson(json,new TypeToken<List<T>>(){  }.getType());}  }
class C{  public void close() throws IOException {  in.close();}  }
class C{  public static byte[] createRandomBytes(int length){  byte[] randomBytes=new byte[length];  rnd.nextBytes(randomBytes);  return randomBytes;}  }
class C{  public void testReceive_NonBlockNoServerNull() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerNull();}  }
class C{  public static String[] decodeParameters(String encodedString){  if (encodedString == null)   return null;  String[] parameters;  try {    String decodedString=new String(base64Decoder.decodeBuffer(encodedString));    parameters=decodedString.split(PARAMETER_SEPARATOR);  } catch (  IOException e) {    return null;  }  return parameters;}  }
class C{  public static void onErrorDropped(Throwable e){  Consumer<? super Throwable> hook=Hooks.onErrorDroppedHook;  if (hook == null) {    throw Exceptions.bubble(e);  }  hook.accept(e);}  }
class C{  public static void writeTestFrame(String file,double[][] data,ValueType[] schema,OutputInfo oi) throws DMLRuntimeException, IOException {  writeTestFrame(file,data,schema,oi,false);}  }
class C{  protected void addMissing(Instances data,int level,boolean predictorMissing){  Random random=new Random(1);  for (int i=0; i < data.numInstances(); i++) {    Instance current=data.instance(i);    for (int j=0; j < data.numAttributes(); j++) {      if (predictorMissing) {        if (Math.abs(random.nextInt()) % 100 < level) {          current.setMissing(j);        }      }    }  }}  }
class C{  public void update(long n){  uncounted.addAndGet(n);}  }
class C{  protected void drawDomainGridlines(Graphics2D g2,Rectangle2D dataArea,List ticks){  if (getRenderer() == null) {    return;  }  if (isDomainGridlinesVisible() || isDomainMinorGridlinesVisible()) {    Stroke gridStroke=null;    Paint gridPaint=null;    Iterator iterator=ticks.iterator();    boolean paintLine;    while (iterator.hasNext()) {      paintLine=false;      ValueTick tick=(ValueTick)iterator.next();      if ((tick.getTickType() == TickType.MINOR) && isDomainMinorGridlinesVisible()) {        gridStroke=getDomainMinorGridlineStroke();        gridPaint=getDomainMinorGridlinePaint();        paintLine=true;      } else       if ((tick.getTickType() == TickType.MAJOR) && isDomainGridlinesVisible()) {        gridStroke=getDomainGridlineStroke();        gridPaint=getDomainGridlinePaint();        paintLine=true;      }      XYItemRenderer r=getRenderer();      if ((r instanceof AbstractXYItemRenderer) && paintLine) {        ((AbstractXYItemRenderer)r).drawDomainLine(g2,this,getDomainAxis(),dataArea,tick.getValue(),gridPaint,gridStroke);      }    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.890 -0500",hash_original_method="6C9BE2FDA6A6DE8BDC29D06750EF7E58",hash_generated_method="9B240D65625C603E270174F90B22BFA3") public int compareTo(TimeStamp anotherTimeStamp){  long thisVal=this.ntpTime;  long anotherVal=anotherTimeStamp.ntpTime;  return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));}  }
class C{  public WordEntry addNewWord(final String str){  final String key=trimWord(str);  WordEntry entry=words.get(key);  if (entry == null) {    entry=new WordEntry();    entry.setType(new ExpressionType(""));    entry.setNormalized(key);    words.put(key,entry);  } else {    logger.warn("word already known: " + str + " -> "+ entry.getNormalized());  }  return entry;}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  if (!equals(beanContextChildPeer) && !(beanContextChildPeer instanceof Serializable))   throw new IOException("BeanContextChildSupport beanContextChildPeer not Serializable"); else   oos.defaultWriteObject();}  }
class C{  protected AlgorithmParameters engineGetParameters(){  return core.getParameters();}  }
class C{  public static UniqueString read(BufferedDataInputStream dis) throws IOException {  int tok1=dis.readInt();  int loc1=dis.readInt();  int slen=dis.readInt();  String str=dis.readString(slen);  return new UniqueString(str,tok1,loc1);}  }
class C{  public boolean notEquals(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.notEquals(this);  return !equals(obj2);}  }
class C{  public List<Node> nodesFor(Block block){  return blockToNodesMap.get(block);}  }
class C{  private List<Geometry> processSymbolizers(Style style,SimpleFeature feature,double currentScaleDenominator){  List<Geometry> geometryList=new ArrayList<>();  if (style != null && feature != null) {    for (    FeatureTypeStyle featureTypeStyle : style.featureTypeStyles()) {      for (      Rule rule : featureTypeStyle.rules()) {        if (ruleInScale(rule,currentScaleDenominator)) {          Filter filter=rule.getFilter();          if (filter == null || filter.evaluate(feature)) {            Geometry geometry=null;            if (rule.symbolizers() == null || rule.symbolizers().isEmpty()) {              geometry=(Geometry)feature.getDefaultGeometry();              if (geometry != null) {                geometryList.add(geometry);              }            } else {              for (              Symbolizer symbolizer : rule.symbolizers()) {                if (symbolizer instanceof AbstractSymbolizer) {                  boolean duplicateGeometry=false;                  geometry=findGeometry(feature,(AbstractSymbolizer)symbolizer);                  for (                  Geometry geometryInList : geometryList) {                    if (geometry.equals(geometryInList)) {                      duplicateGeometry=true;                    }                  }                  if (!duplicateGeometry && geometry != null) {                    geometryList.add(geometry);                  }                }              }            }          }        }      }    }  }  return geometryList;}  }
class C{  public void inlinePrint(Object o){  if (forceincomments) {    commentPrint(o);    return;  }  if (inline.length() > 0) {    inline.append(SEPARATOR);  }  String str=o.toString().replace(NEWLINE," ");  str=str.replace("\\","\\\\").replace("\"","\\\"");  if (str.contains(SEPARATOR)) {    str="\"" + str + "\"";  }  inline.append(str);}  }
class C{  public CDatabaseNodeMenuBuilder(final JTree projectTree,final DefaultMutableTreeNode parentNode,final IDatabase database){  super(projectTree);  this.database=Preconditions.checkNotNull(database,"IE01963: Database argument can't be null");  Preconditions.checkNotNull(projectTree,"IE02345: projectTree argument can not be null");  this.parentNode=Preconditions.checkNotNull(parentNode,"IE02346: parentNode argument can not be null");  this.openAction=CActionProxy.proxy(new COpenDatabaseAction(projectTree,this.database));  this.closeAction=CActionProxy.proxy(new CCloseDatabaseAction(projectTree,this.database));  updateActions(database);  this.database.addListener(listener);}  }
class C{  public final static String LOCO_STAT(int s){  return ((s & LOCOSTAT_MASK) == LOCO_IN_USE) ? "In-Use" : (((s & LOCOSTAT_MASK) == LOCO_IDLE) ? "Idle" : (((s & LOCOSTAT_MASK) == LOCO_COMMON) ? "Common" : "Free"));}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter para : parameters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.533 -0500",hash_original_method="43D598AFE19AB6009363638DB64C1F7B",hash_generated_method="3BFDE7FCC6B045B1A489416B281101BE") public void onRegistrationTimeout(SipSession session){}  }
class C{  public CTestDatabaseConnection(final CDatabaseSettingsPanel settingsPanel){  super("Test connection");  m_settingsPanel=settingsPanel;  putValue(SHORT_DESCRIPTION,"Tries to establish a connection to the configured database (CTRL-T)");}  }
class C{  @Override public Condition convertToCondition(){  Relation r=(negated) ? Relation.UNEQUAL : Relation.EQUAL;  return new BasicCondition(labelTemplate + "'",valueTemplate.toString(),r);}  }
class C{  public String convertTypingStrategyToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static Task<Void> sleep(final long time,final TimeUnit timeUnit){  final Task<Void> t=new Task<>();  final ScheduledFuture<?> rr=schedulerExecutor.schedule(null,time,timeUnit);  return t;}  }
class C{  public String outputString(Text text){  StringWriter out=new StringWriter();  try {    output(text,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  public EventSource createEventSource(){  EventSourceImpl eventSource=new EventSourceImpl();  return eventSource;}  }
class C{  protected void drawLeftLabels(KeyedValues leftKeys,Graphics2D g2,Rectangle2D plotArea,Rectangle2D linkArea,float maxLabelWidth,PiePlotState state){  this.labelDistributor.clear();  double lGap=plotArea.getWidth() * this.labelGap;  double verticalLinkRadius=state.getLinkArea().getHeight() / 2.0;  for (int i=0; i < leftKeys.getItemCount(); i++) {    String label=this.labelGenerator.generateSectionLabel(this.dataset,leftKeys.getKey(i));    if (label != null) {      TextBlock block=TextUtilities.createTextBlock(label,this.labelFont,this.labelPaint,maxLabelWidth,new G2TextMeasurer(g2));      TextBox labelBox=new TextBox(block);      labelBox.setBackgroundPaint(this.labelBackgroundPaint);      labelBox.setOutlinePaint(this.labelOutlinePaint);      labelBox.setOutlineStroke(this.labelOutlineStroke);      if (this.shadowGenerator == null) {        labelBox.setShadowPaint(this.labelShadowPaint);      } else {        labelBox.setShadowPaint(null);      }      labelBox.setInteriorGap(this.labelPadding);      double theta=Math.toRadians(leftKeys.getValue(i).doubleValue());      double baseY=state.getPieCenterY() - Math.sin(theta) * verticalLinkRadius;      double hh=labelBox.getHeight(g2);      this.labelDistributor.addPieLabelRecord(new PieLabelRecord(leftKeys.getKey(i),theta,baseY,labelBox,hh,lGap / 2.0 + lGap / 2.0 * -Math.cos(theta),1.0 - getLabelLinkDepth() + getExplodePercent(leftKeys.getKey(i))));    }  }  double hh=plotArea.getHeight();  double gap=hh * getInteriorGap();  this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,hh - 2 * gap);  for (int i=0; i < this.labelDistributor.getItemCount(); i++) {    drawLeftLabel(g2,state,this.labelDistributor.getPieLabelRecord(i));  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultTableXYDataset clone=(DefaultTableXYDataset)super.clone();  int seriesCount=this.data.size();  clone.data=new java.util.ArrayList(seriesCount);  for (int i=0; i < seriesCount; i++) {    XYSeries series=(XYSeries)this.data.get(i);    clone.data.add(series.clone());  }  clone.intervalDelegate=new IntervalXYDelegate(clone);  clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());  clone.intervalDelegate.setAutoWidth(isAutoWidth());  clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());  clone.updateXPoints();  return clone;}  }
class C{  public AList(){  size=0;  items=(Item[])new Object[100];}  }
class C{  public static boolean isExplicitFalse(String value){  return value != null && (value.equals("false") || value.equals("0") || value.equals("off")|| value.equals("no"));}  }
class C{  public static Object convertMapToBean(Map<?,?> source,Class<?> target){  Object bean=newInstance(target.getClass().getName());  if (bean == null) {    bean=newInstance(target.getName());    if (bean == null) {    }  }  try {  } catch (  Exception e) {  }  return bean;}  }
class C{  void appeaseLegacyVerifier(Method m){  addTraceAttr(m);  Deque<Block> code=schedule(m.entry.to);  SetMap<Block,Edge> pred=preds(code);  Set<Edge> single_path_to_exit=new HashSet<Edge>();  Map<Block,LocalVarState> reg_state_by_block=getLocalVarState(m);  TypeConstraintMap constraints=new TypeConstraintMap();  for (  Block b : code) {    verboseStatus("Building constraints for " + b);    LocalVarState block_state=reg_state_by_block.get(b);    assert (block_state != null);    BitSet active=block_state.getActiveVariables();    for (    Edge s : b.succ()) {      if (singlePathToExit(s,pred,single_path_to_exit)) {        continue;      }      Block successor=s.to;      LocalVarState to_state=reg_state_by_block.get(successor);      assert (to_state != null);      TypeConstraints tc=constraints.getConstraints(s);      BitSet to_livein=to_state.getLivein();      for (      Integer r : foreach(active)) {        if (!(to_livein.get(r) || m.fixedLocals.values().contains(r))) {          if (to_state.def.get(r) || to_state.killed_vars.get(r)) {            Typeref first_incoming_type=to_state.getInitialType(r);            for (            Edge p : pred.get(successor)) {              boolean needs_kill;              needs_kill=pred.get(successor).size() > 1;              if (needs_kill) {                tc.addKill(r);                break;              }            }          } else {            tc.addKill(r);          }        }      }    }    BitSet livein=block_state.getLivein();    for (    Integer r : foreach(livein)) {      Typeref consensus_type=block_state.getInitialType(r);      assert (consensus_type != null);      for (      Edge p : pred.get(b)) {        LocalVarState from_state=reg_state_by_block.get(p.from);        assert (from_state != null);        consensus_type=typeMeet(consensus_type,from_state.getFinalType(r));      }      for (      Edge p : pred.get(b)) {        LocalVarState from_state=reg_state_by_block.get(p.from);        assert (from_state != null);        TypeConstraints tc=constraints.getConstraints(p);        if (block_state.hard_coercions[r] != null) {          tc.addCoercion(r,block_state.hard_coercions[r]);        } else         if (needsCoercion(m,consensus_type,from_state.getFinalType(r),b.is_backwards_branch_target)) {          tc.addCoercion(r,consensus_type);        }      }    }  }  for (  Block b : code) {    LocalVarState block_state=reg_state_by_block.get(b);    assert (block_state != null);    BitSet active=block_state.getActiveVariables();    TypeConstraints source_block_constraints=null;    for (    Integer r : foreach(active)) {      TypeConstraints first_constraint=null;      boolean all_constraints_agree=true;      for (      Edge s : b.succ()) {        TypeConstraints tc=constraints.getConstraints(s);        if (null == first_constraint) {          first_constraint=tc;        }        all_constraints_agree=first_constraint.agreesWith(tc,r);        if (!all_constraints_agree)         break;      }      if (all_constraints_agree) {        if (null == source_block_constraints)         source_block_constraints=new TypeConstraints(null);        for (        Edge s : b.succ()) {          source_block_constraints.takeConstraintFrom(constraints.get(s),r);        }      }    }    if (source_block_constraints != null)     fixConstraints(m,b,source_block_constraints,block_state);  }  for (  Block b : code) {    for (    Edge p : b.succ()) {      TypeConstraints tc=constraints.getConstraints(p);      if (tc != null && tc.killregs.size() > 0 || tc.coercions.size() > 0) {        split(p,m,pred);        p.to.must_isolate_block=true;        fixConstraints(m,p.to,tc,null);      }    }  }}  }
class C{  protected void addTransformerToManager(Instrumentation manager,ClassFileTransformer transformer){  addTransformerToManager(manager,transformer,false);}  }
class C{  public void testWrapperClassesImplementFacesWrapper(){  assertNotNull(noWrapperClasses);  if (noWrapperClasses.size() > 0) {    System.out.println("Wrapper classes not implementing javax.faces.FacesWrapper:");    System.out.println(noWrapperClasses.toString());  }  assertTrue("Found wrapper classes not implementing FacesWrapper!",noWrapperClasses.isEmpty());}  }
class C{  public void update(float delta,Viewport viewport){  if (Gdx.input.isKeyPressed(Keys.Z)) {    radiusMultiplier+=delta * RADIUS_GROWTH_RATE;  }  if (Gdx.input.isKeyPressed(Keys.X)) {    radiusMultiplier-=delta * RADIUS_GROWTH_RATE;    radiusMultiplier=Math.max(radiusMultiplier,MIN_RADIUS_MULTIPLIER);  }  radius=radiusMultiplier * BASE_RADIUS;  float secondsSinceLastKick=MathUtils.nanoToSec * (TimeUtils.nanoTime() - lastKick);  if (secondsSinceLastKick > KICK_INTERVAL) {    lastKick=TimeUtils.nanoTime();    randomKick();  }  velocity.x-=delta * DRAG * velocity.x;  velocity.y-=delta * DRAG * velocity.y;  position.x+=delta * velocity.x;  position.y+=delta * velocity.y;  collideWithWalls(radius,viewport.getWorldWidth(),viewport.getWorldHeight());}  }
class C{  public void deleteCurrentRow(){  if (table.getSelectedRow() != -1) {    rows.remove(table.getSelectedRow());    ((AbstractTableModel)table.getModel()).fireTableStructureChanged();  }}  }
class C{  public PSPProcessingException(){  super();}  }
class C{  public static int indexOf(char[] array,char[] sub,int startIndex){  return indexOf(array,sub,startIndex,array.length);}  }
class C{  private void selection(ArrayList<NeuralConnection> v,boolean ctrl,boolean left){  if (v == null) {    m_selected.clear();    repaint();    return;  }  if ((ctrl || m_selected.size() == 0) && left) {    boolean removed=false;    for (int noa=0; noa < v.size(); noa++) {      removed=false;      for (int nob=0; nob < m_selected.size(); nob++) {        if (v.get(noa) == m_selected.get(nob)) {          m_selected.remove(nob);          removed=true;          break;        }      }      if (!removed) {        m_selected.add(v.get(noa));      }    }    repaint();    return;  }  if (left) {    for (int noa=0; noa < m_selected.size(); noa++) {      for (int nob=0; nob < v.size(); nob++) {        NeuralConnection.connect(m_selected.get(noa),v.get(nob));      }    }  } else   if (m_selected.size() > 0) {    for (int noa=0; noa < m_selected.size(); noa++) {      for (int nob=0; nob < v.size(); nob++) {        NeuralConnection.disconnect(m_selected.get(noa),v.get(nob));        NeuralConnection.disconnect(v.get(nob),m_selected.get(noa));      }    }  } else {    for (int noa=0; noa < v.size(); noa++) {      v.get(noa).removeAllInputs();      v.get(noa).removeAllOutputs();      removeNode(v.get(noa));    }  }  repaint();}  }
class C{  @Override public void initForRendering(UnifiedImageBuilder imageBdr,CoordTransformer transformer,WayNodeProvider wnProvider){  super.initForRendering(imageBdr,transformer,wnProvider);  wayNodeHash.clear();  scale=transformer.computeScale();  displayFactorSym=displayFactor * transformer.getDotsPerUnit();  imageBdr.setFontSize(defaultFontSize * displayFactorSym);  areaBuffer.clear();  wayBuffer.clear();  nodeBuffer.clear();  trackBuffer.clear();  nameInfoBuffer.clear();}  }
class C{  public boolean validSimState(SimState state){  return (state != null && state.getClass().equals(this.state.getClass()));}  }
class C{  public JColorWheel(){  this(HSBColorSpace.getInstance());}  }
class C{  @Override public void returnResource(final Jedis resource){  if (resource != null) {    resource.resetState();    returnResourceObject(resource);  }}  }
class C{  @NonNull public static Animator moveBy(float x,float y,float duration){  return moveBy(x,y,duration,null);}  }
class C{  public static String capitalizeString(String string){  if (string == null) {    throw new NullPointerException("String to capitalize cannot be null");  }  char[] chars=string.toLowerCase().toCharArray();  boolean found=false;  for (int i=0; i < chars.length; i++) {    if (!found && Character.isLetter(chars[i])) {      chars[i]=Character.toUpperCase(chars[i]);      found=true;    } else     if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\'') {      found=false;    }  }  return String.valueOf(chars);}  }
class C{  public void writeStatement(Statement oldStm){  Statement newStm=cloneStatement(oldStm);  if (oldStm.getTarget() != this && executeStatements) {    try {      newStm.execute();    } catch (    Exception e) {      getExceptionListener().exceptionThrown(new Exception("Encoder: discarding statement " + newStm,e));    }  }}  }
class C{  public static NeuronGroupPanel createNeuronGroupPanel(final NetworkPanel np,final NeuronGroup ng,final Window parent){  NeuronGroupPanel ngp=new NeuronGroupPanel(np,ng,parent);  ngp.initializeLayout();  ngp.addListeners();  return ngp;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2){  return construct(e1,e2);}  }
class C{  private void writeMethodFieldDeclarations(IndentingWriter p) throws IOException {  for (int i=0; i < methodFieldNames.length; i++) {    p.pln("private static java.lang.reflect.Method " + methodFieldNames[i] + ";");  }}  }
class C{  NodeRepresentation decompositionChildToNodeRep(NodeRepresentation nodeRep,int i,Vector<NodeRepresentation> vec,NodeRepresentation father){  Decomposition decomp=nodeRep.decomposition;  NodeTextRep newNodeText=null;  if ((decomp.definedOp != null) && this.subexpressionButton.getSelection()) {    newNodeText=appendToNodeText(decomp.definedOpRep,decomp.namePath.elementAt(i));  } else   if (nodeRep.isSubexpressionName) {    newNodeText=appendToNodeText(new NodeTextRep(nodeRep.nodeText,nodeRep.mapping),decomp.namePath.elementAt(i));  }  IDocument childDoc=this.doc;  if ((decomp.moduleName != null) && !this.moduleNode.getName().toString().equals(decomp.moduleName)) {    IFile moduleIFile=(IFile)ResourceHelper.getResourceByModuleName(decomp.moduleName);    FileEditorInput fileEditorInput=new FileEditorInput(moduleIFile);    FileDocumentProvider moduleFileDocProvider=new FileDocumentProvider();    try {      moduleFileDocProvider.connect(fileEditorInput);    } catch (    CoreException e1) {    }    childDoc=moduleFileDocProvider.getDocument(fileEditorInput);  }  NodeRepresentation result;  if ((decomp.definedOp != null) && (newNodeText == null)) {    try {      NodeRepresentation res=new NodeRepresentation(childDoc,decomp.children.elementAt(i));      NodeTextRep ntext=decompSubstituteInNodeText(nodeRep,(ExprNode)decomp.children.elementAt(i),new NodeTextRep(res.nodeText,res.mapping),nodeRep);      res.nodeText=ntext.nodeText;      res.mapping=ntext.mapping;      result=res.subNodeRep(decomp.children.elementAt(i),vec,father,null,decomp);      result.isPrimed=nodeRep.isPrimed;      if (!(decomp.children.elementAt(i) instanceof ExprNode)) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 2534 of DecomposeProofHandler.");      }    } catch (    BadLocationException e) {      e.printStackTrace();      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 2714 of DecomposeProofHandler.");      return null;    }  } else {    result=nodeRep.subNodeRep(decomp.children.elementAt(i),vec,father,newNodeText,decomp);  }  result.isPrimed=result.isPrimed || decomp.primed;  result.isSubexpressionName=nodeRep.isSubexpressionName || newNodeText != null;  return result;}  }
class C{  private void backupIcons(BackupDataOutput data) throws IOException {  final ContentResolver cr=mContext.getContentResolver();  final int dpi=mContext.getResources().getDisplayMetrics().densityDpi;  final UserHandleCompat myUserHandle=UserHandleCompat.myUserHandle();  int backupUpIconCount=0;  String where="(" + Favorites.ITEM_TYPE + "="+ Favorites.ITEM_TYPE_APPLICATION+ " OR "+ Favorites.ITEM_TYPE+ "="+ Favorites.ITEM_TYPE_SHORTCUT+ ") AND "+ getUserSelectionArg();  Cursor cursor=cr.query(Favorites.CONTENT_URI,FAVORITE_PROJECTION,where,null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final String intentDescription=cursor.getString(INTENT_INDEX);      try {        Intent intent=Intent.parseUri(intentDescription,0);        ComponentName cn=intent.getComponent();        Key key=null;        String backupKey=null;        if (cn != null) {          key=getKey(Key.ICON,cn.flattenToShortString());          backupKey=keyToBackupKey(key);        } else {          Log.w(TAG,"empty intent on application favorite: " + id);        }        if (mExistingKeys.contains(backupKey)) {          if (DEBUG)           Log.d(TAG,"already saved icon " + backupKey);          mKeys.add(key);        } else         if (backupKey != null) {          if (DEBUG)           Log.d(TAG,"I can count this high: " + backupUpIconCount);          if (backupUpIconCount < MAX_ICONS_PER_PASS) {            if (DEBUG)             Log.d(TAG,"saving icon " + backupKey);            Bitmap icon=mIconCache.getIcon(intent,myUserHandle);            if (icon != null && !mIconCache.isDefaultIcon(icon,myUserHandle)) {              writeRowToBackup(key,packIcon(dpi,icon),data);              mKeys.add(key);              backupUpIconCount++;            }          } else {            if (VERBOSE)             Log.v(TAG,"deferring icon backup " + backupKey);            dataChanged();          }        }      } catch (      URISyntaxException e) {        Log.e(TAG,"invalid URI on application favorite: " + id);      }catch (      IOException e) {        Log.e(TAG,"unable to save application icon for favorite: " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  @Override public void printStackTrace(PrintWriter s){  if (s != null) {    super.printStackTrace(s);    SQLException next=getNextException();    for (int i=0; i < 100 && next != null; i++) {      s.println(next.toString());      next=next.getNextException();    }    if (next != null) {      s.println("(truncated)");    }  }}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  private void shiftToBeginning(final int i){  if (i >= mBuffer.length) {    throw new IndexOutOfBoundsException(String.format("Index %d out of bounds. Length %d",i,mBuffer.length));  }  for (int j=0; j + i < mFilled; j++) {    mBuffer[j]=mBuffer[j + i];  }}  }
class C{  @Override public boolean onMarkerClick(Marker marker){  handleMarkerEvent("didBeginDraggingMarker",marker);  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.PRIMITIVE_TYPE;}  }
class C{  @Override public boolean supportsANSI92IntermediateSQL(){  debugCodeCall("supportsANSI92IntermediateSQL");  return false;}  }
class C{  void handleCharset(ParsedDirective pd) throws SaslException {  if (null != m_characterSet)   throw new SaslException("Too many charset directives.");  m_characterSet=pd.getValue();  if (!m_characterSet.equals("utf-8"))   throw new SaslException("Invalid character encoding directive");}  }
class C{  public static boolean isEmpty(IsEmpty o){  return o == null || o.isEmpty();}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public void allow(Variable optVariable){  if (null == allowedVariables) {    allowedVariables=new Hashtable();  }  if (null != optVariable)   allowedVariables.put(optVariable,optVariable);}  }
class C{  public TreeSelectionEvent(Object source,TreePath path,boolean isNew,TreePath oldLeadSelectionPath,TreePath newLeadSelectionPath){  super(source);  paths=new TreePath[1];  paths[0]=path;  areNew=new boolean[1];  areNew[0]=isNew;  this.oldLeadSelectionPath=oldLeadSelectionPath;  this.newLeadSelectionPath=newLeadSelectionPath;}  }
class C{  public void test_read_writeUTF() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeUTF(unihw);  raf.seek(0);  assertEquals("Test 1: Incorrect UTF string written or read;",unihw,raf.readUTF());  try {    raf.readUTF();    fail("Test 2: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeUTF("Already closed.");    fail("Test 3: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readUTF();    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public boolean containsExcludeResultPrefix(String prefix,String uri){  if (uri == null || (null == m_excludeResultPrefixes && null == m_ExtensionElementURIs))   return super.containsExcludeResultPrefix(prefix,uri);  if (prefix.length() == 0)   prefix=Constants.ATTRVAL_DEFAULT_PREFIX;  if (m_excludeResultPrefixes != null)   for (int i=0; i < m_excludeResultPrefixes.size(); i++) {    if (uri.equals(getNamespaceForPrefix(m_excludeResultPrefixes.elementAt(i))))     return true;  }  if (m_ExtensionElementURIs != null && m_ExtensionElementURIs.contains(uri))   return true;  return super.containsExcludeResultPrefix(prefix,uri);}  }
class C{  void updateModifiedProperty(){  Boolean oldModified=Boolean.valueOf(myModified);  myModified=isModifiedImpl();  myTextEditor.firePropertyChange(FileEditor.PROP_MODIFIED,oldModified,Boolean.valueOf(myModified));}  }
class C{  public static void write(String fileName,Table table) throws IOException {  write(fileName,table,null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ACTION___ANONYMOUS_ACTION_11:    return getAnonymous_action_1_1();case UmplePackage.ACTION___CODE_1:  return getCode_1();case UmplePackage.ACTION___ANONYMOUS_ACTION_21:return getAnonymous_action_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected String templateString(Instance template){  String result="";  for (  int m_DatasetKeyColumn : m_DatasetKeyColumns) {    result+=template.toString(m_DatasetKeyColumn) + ' ';  }  if (result.startsWith("weka.classifiers.")) {    result=result.substring("weka.classifiers.".length());  }  return result.trim();}  }
class C{  public static void main(String[] args){  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");  JFrame jf=new JFrame("Graph Visualizer");  GraphVisualizer g=new GraphVisualizer();  try {    if (args[0].endsWith(".xml")) {      g.readBIF(new FileInputStream(args[0]));    } else {      g.readDOT(new FileReader(args[0]));    }  } catch (  IOException ex) {    ex.printStackTrace();  }catch (  BIFFormatException bf) {    bf.printStackTrace();    System.exit(-1);  }  jf.getContentPane().add(g);  jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  jf.setSize(800,600);  jf.setVisible(true);}  }
class C{  public boolean testAvailableBit(ObjectReference object,int idx){  return org.jikesrvm.objectmodel.ObjectModel.testAvailableBit(object.toObject(),idx);}  }
class C{  public Table findTableOrView(Session session,String name){  Table table=tablesAndViews.get(name);  if (table == null && session != null) {    table=session.findLocalTempTable(name);  }  return table;}  }
class C{  public static boolean isSynthetic(SootMethod method){  for (  Tag tag : method.getTags()) {    if (tag instanceof SyntheticTag) {      return true;    }  }  if ((method.getModifiers() & 0x1000) != 0)   return true;  if ((method.getModifiers() & 0x0040) != 0)   return true;  return false;}  }
class C{  public static int calculateInSampleSize(int srcWidth,int srcHeight,int reqWidth,int reqHeight){  if ((reqHeight > 0) && (reqWidth > 0) && (srcHeight > reqHeight)&& (srcWidth > reqWidth)) {    return Math.min(srcWidth / reqWidth,srcHeight / reqHeight);  } else {    return 1;  }}  }
class C{  public boolean scanIsEmpty(){  final int count=numWords;  for (int i=0; i < count; i++) {    if (bits[i] != 0)     return false;  }  return true;}  }
class C{  public static Number minus(Character left,Character right){  return minus(Integer.valueOf(left),right);}  }
class C{  public <T extends Point2D>T inverse(double x,double y,T llp){  if (llp == null) {    llp=(T)new LatLonPoint.Double();  }  pixelToLL(x,y,llp);  return llp;}  }
class C{  public static double erfc(double x){  return 1.0 - erf(x);}  }
class C{  public static void requireNonNulls(Object o0,Object o1,Object o2,Object o3,Object o4){  if (o0 == null) {    throw new NullPointerException(FIRST_ARG_IS_NULL);  }  if (o1 == null) {    throw new NullPointerException(SECOND_ARG_IS_NULL);  }  if (o2 == null) {    throw new NullPointerException(THIRD_ARG_IS_NULL);  }  if (o3 == null) {    throw new NullPointerException(FOURTH_ARG_IS_NULL);  }  if (o4 == null) {    throw new NullPointerException(FIFTH_ARG_IS_NULL);  }}  }
class C{  public void connect(String userId){  this.pcClient.connect(userId);}  }
class C{  private void computeMultiplier(LSTNode n){  n.initializeLoopExits();  computeNodeWeights(n);  float loopExitWeight=computeLoopExitWeight(n);  n.loopMultiplier=1.0f / loopExitWeight;}  }
class C{  private static Instances insertZintoD(Instances D,double Z[][]){  int L=Z[0].length;  for (int j=0; j < L; j++) {    D.insertAttributeAt(new Attribute("c" + j,Arrays.asList(new String[]{"0","1"})),j);  }  for (int j=0; j < L; j++) {    for (int i=0; i < D.numInstances(); i++) {      D.instance(i).setValue(j,Z[i][j] > 0.5 ? 1.0 : 0.0);    }  }  D.setClassIndex(L);  return D;}  }
class C{  public synchronized void resetCompletions(){  completions=null;}  }
class C{  public JCExpression ClassLiteral(ClassSymbol clazz){  return ClassLiteral(clazz.type);}  }
class C{  public void sort(Comparator<? super T> comparator){synchronized (mLock) {    Collections.sort(mObjects,comparator);  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public boolean hasNext(){  return peekForward() != null;}  }
class C{  public boolean hasProxy(String proxyName){  return model.hasProxy(proxyName);}  }
class C{  private void showPopup(MouseEvent event){  if (event.isPopupTrigger()) {    this.copyMenu.show(this.txtFile,event.getX(),event.getY());  }}  }
class C{  @Override public void registerUserMonitor(UserMonitor userMonitor){  UserMonitor monitor=users.put(userMonitor.getUserName(),userMonitor);  assert (monitor == null || monitor == userMonitor);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer(200);  buf.append("PKCS9 Attributes: [\n\t");  ObjectIdentifier oid;  PKCS9Attribute value;  boolean first=true;  for (int i=1; i < PKCS9Attribute.PKCS9_OIDS.length; i++) {    value=getAttribute(PKCS9Attribute.PKCS9_OIDS[i]);    if (value == null)     continue;    if (first)     first=false; else     buf.append(";\n\t");    buf.append(value.toString());  }  buf.append("\n\t] (end PKCS9 Attributes)");  return buf.toString();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.924 -0500",hash_original_method="C4C456A89DC44934AFAAB7646D99F320",hash_generated_method="392043351EF12A33B3D68429B30BAC5F") public ViewPropertyAnimator rotationY(float value){  animateProperty(ROTATION_Y,value);  return this;}  }
class C{  public void exit(){  shuttingDown=true;  saveSettings(true);  logAllViewerstats();  c.disconnect();  frankerFaceZ.disconnectWs();  pubsub.disconnect();  g.cleanUp();  chatLog.close();  System.exit(0);}  }
class C{  public SolrQuery addDateRangeFacet(String field,Date start,Date end,String gap){  add(FacetParams.FACET_RANGE,field);  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_START),start.toInstant().toString());  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_END),end.toInstant().toString());  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_GAP),gap);  this.set(FacetParams.FACET,true);  return this;}  }
class C{  public static Validator<CharSequence> number(@NonNull final Context context){  return new NumberValidator(context,R.string.default_error_message);}  }
class C{  public TriggerBuilder<T> endAt(Date triggerEndTime){  this.endTime=triggerEndTime;  return this;}  }
class C{  public void addListener(INotifyChangedListener notifyChangedListener){  changeNotifier.addListener(notifyChangedListener);}  }
class C{  public void constValueIndex(int tag,int index) throws IOException {  output.write(tag);  write16bit(index);}  }
class C{  @Override public long skip(long n) throws IOException {  long toSkip=max >= 0 ? Math.min(n,max - pos) : n;  long skippedBytes=in.skip(toSkip);  pos+=skippedBytes;  return skippedBytes;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return BONK;default :  return null;}}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public VcpcRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  @Override public void connectionOpened(IOFConnectionBackend connection,OFFeaturesReply featuresReply){  DatapathId dpid=connection.getDatapathId();  OFAuxId auxId=connection.getAuxId();  log.debug("{} opened",connection);  if (auxId.equals(OFAuxId.MAIN)) {    OFSwitchHandshakeHandler handler=new OFSwitchHandshakeHandler(connection,featuresReply,this,floodlightProvider.getRoleManager(),floodlightProvider.getTimer());    OFSwitchHandshakeHandler oldHandler=switchHandlers.put(dpid,handler);    if (oldHandler != null) {      log.debug("{} is a new main connection, killing old handler connections",connection);      oldHandler.cleanup();    }    handler.beginHandshake();  } else {    OFSwitchHandshakeHandler handler=switchHandlers.get(dpid);    if (handler != null) {      handler.auxConnectionOpened(connection);    } else {      log.warn("{} arrived before main connection, closing connection",connection);      connection.disconnect();    }  }}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append("RegexValidator{");  for (int i=0; i < patterns.length; i++) {    if (i > 0) {      buffer.append(",");    }    buffer.append(patterns[i].pattern());  }  buffer.append("}");  return buffer.toString();}  }
class C{  public void fixHttpsURLConnection(){  HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());}  }
class C{  public void accumulate(long x){  Cell[] as;  long b, v, r;  int m;  Cell a;  if ((as=cells) != null || ((r=function.applyAsLong(b=base,x)) != b && !casBase(b,r))) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=(r=function.applyAsLong(v=a.value,x)) == v || a.cas(v,r)))     longAccumulate(x,function,uncontended);  }}  }
class C{  public Upper(){  super("text_transformation.upper",1);}  }
class C{  private static boolean hasRestrictions(Element restrictionNode){  for (int i=0; i < restrictionNode.getChildCount(); i++) {    if (restrictionNode.isText(i))     continue;    return true;  }  return false;}  }
class C{  public String errorOnProbabilitiesTipText(){  return "Minimize error on probabilities instead of misclassification error when cross-validating the number " + "of LogitBoost iterations. When set, the number of LogitBoost iterations is chosen that minimizes " + "the root mean squared error instead of the misclassification error.";}  }
class C{  public static void main(String[] args){  NumberFormat nf=NumberFormat.getInstance();  nf.setMaximumFractionDigits(6);  NumberFormat tf=NumberFormat.getInstance();  tf.setMaximumFractionDigits(2);  tf.setGroupingUsed(false);  NumberFormat cf=NumberFormat.getInstance();  cf.setGroupingUsed(true);  IntersectionDetection alg1=new LineSweep();  IntersectionDetection alg2=new BruteForceAlgorithm();  int len=60;  int d=600;  int max=60000;  int numVertical=max / d;  int NUM_TRIALS=100;  int max_N=8192;  TrialSuite lineSweep_ts=new TrialSuite();  TrialSuite bf_ts=new TrialSuite();  System.out.println("n\tLS\tBF\tnumInt\tEst.Pi\t\tError");  for (int n=16; n <= max_N; n*=2) {    int totalInts=0;    int totalSegInts=0;    for (int t=0; t < NUM_TRIALS; t++) {      Generator<ILineSegment> generator=new DoubleGenerator(max,len);      ILineSegment[] ils=generator.generate(n + numVertical);      for (int i=0; i < numVertical; i++) {        ils[n + i]=new TwoDLineSegment(new TwoDPoint(d / 2 + d * i,0),new TwoDPoint(d / 2 + d * i,max));      }      Hashtable<IPoint,List<ILineSegment>> res1=alg1.intersections(ils);      lineSweep_ts.addTrial(n,0,alg1.time());      alg2.intersections(ils);      bf_ts.addTrial(n,0,alg2.time());      totalInts+=res1.size();      for (      IPoint pt : res1.keySet()) {        boolean isValid=false;        List<ILineSegment> lines=res1.get(pt);        for (        ILineSegment line : lines) {          if (line.getStart().getY() - line.getEnd().getY() == max) {            isValid=true;            break;          }        }        if (isValid) {          totalSegInts+=(lines.size() - 1);        }      }    }    double estimate=2.0 * len * n / (totalSegInts * d / NUM_TRIALS);    double error=(Math.PI * Math.PI / (2 * n)) * (Math.PI * d / len - 2);    String la=tf.format(Double.valueOf(lineSweep_ts.getAverage(n)));    String ba=tf.format(Double.valueOf(bf_ts.getAverage(n)));    System.out.println(cf.format(n) + "\t" + la+ "\t"+ ba+ "\t"+ totalInts * 1.0 / NUM_TRIALS + "\t" + nf.format(estimate) + "\t +/- " + nf.format(error));  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DialBackground)) {    return false;  }  DialBackground that=(DialBackground)obj;  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!this.gradientPaintTransformer.equals(that.gradientPaintTransformer)) {    return false;  }  return super.equals(obj);}  }
class C{  private void initImage(){  try {    image=ImageIO.read(url);  } catch (  final Exception e) {    Logger.getLogger(ImageViewPanel.class).error(e,e);  }}  }
class C{  public String toString(){  String s="APanel[curWindowNo=" + m_curWindowNo;  if (m_mWorkbench != null)   s+=",WB=" + m_mWorkbench.toString();  s+="]";  return s;}  }
class C{  public Iterator outEdges(Node node){  nodeCheck(node,true);  return m_edgeTuples.iterator(outEdgeRows(node.getRow()));}  }
class C{  @Override public void saveRecord(String key,Record record,boolean isEncrypted,String encryptKey){  save(key,record,isEncrypted,encryptKey);}  }
class C{  public String toBriefString(){  return String.format("%s (%d)",name,portNumber);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_TYPE_DECLARATION;}  }
class C{  public static void logAndShowError(Activity activity,String tag,String message){  String errorMessage=getErrorMessage(activity,message);  Log.e(tag,errorMessage);  showErrorInternal(activity,errorMessage);}  }
class C{  public static Script createP2SHOutputScript(int threshold,List<ECKey> pubkeys){  Script redeemScript=createRedeemScript(threshold,pubkeys);  return createP2SHOutputScript(redeemScript);}  }
class C{  public HashCode append(final double[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final double element : array) {      append(element);    }  }  return this;}  }
class C{  public static void eachByte(Byte[] self,@ClosureParams(FirstParam.Component.class) Closure closure){  each(self,closure);}  }
class C{  public static long copyAndCloseInput(InputStream in,OutputStream out) throws IOException {  try {    return copy(in,out);  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    closeSilently(in);  }}  }
class C{  public void testIterate(){  Iterator iter=range.iterator();  assertEquals(FROM,iter.next());  for (char expected=(char)(FROM.charValue() + 1); expected <= TO.charValue(); expected++) {    assertEquals(expected,((Character)iter.next()).charValue());  }}  }
class C{  public void stopUpdater(){  boolean isSelfDestroying=Thread.currentThread() == this;  stopProcessing();  if (this.isAlive()) {    if (logger.isDebugEnabled()) {      logger.debug("{}: Stopping {}",this.location,this);    }    if (!isSelfDestroying) {      interrupt();      try {        if (socket != null) {          socket.close();        }      } catch (      VirtualMachineError err) {        SystemFailure.initiateFailure(err);        throw err;      }catch (      Throwable t) {        SystemFailure.checkFailure();        if (logger.isDebugEnabled()) {          logger.debug(t.getMessage(),t);        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.129 -0500",hash_original_method="B5CF3549C87A0C7A6D468F5569934765",hash_generated_method="A4A84804294AB04C381AEB9196EBBEA2") public void copy2DRangeFrom(int xoff,int yoff,int w,int h,byte[] data){  mRS.validate();  validate2DRange(xoff,yoff,w,h);  mRS.nAllocationData2D(getIDSafe(),xoff,yoff,mSelectedLOD,mSelectedFace.mID,w,h,data,data.length);}  }
class C{  private void reorderTree(){  for (  WorkingTree subtree : mNodeTreeMap.values()) {    AccessibilityNodeInfoCompat node=subtree.getNode();    AccessibilityNodeInfoCompat beforeNode=getTraversalBefore(node);    if (beforeNode != null) {      WorkingTree targetTree=mNodeTreeMap.get(beforeNode);      moveNodeBefore(subtree,targetTree);    } else {      AccessibilityNodeInfoCompat afterNode=getTraversalAfter(node);      if (afterNode != null) {        WorkingTree targetTree=mNodeTreeMap.get(afterNode);        moveNodeAfter(subtree,targetTree);      }    }  }}  }
class C{  JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {  Scope context=peek();  if (context != nonempty && context != empty) {    throw new JSONException("Nesting problem");  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.append(closeBracket);  return this;}  }
class C{  private void processComment(){  templateReader.nextCharacter();  if (templateReader.startsWith(syntax.getDocumentTypeOpening())) {    processSchemaComment();    return;  } else   if (nestedComments) {    processNestedComment();    return;  }  while (templateReader.hasNextCharacter()) {    final char commentCharacter=templateReader.nextCharacter();    if (isCommentClosingMarker(commentCharacter) && templateReader.hasNextCharacter() && templateReader.peekCharacter() == syntax.getTagClosing()) {      templateReader.nextCharacter();      break;    }  }}  }
class C{  static Class<?> comparableClassFor(Object x){  if (x instanceof Comparable) {    Class<?> c;    Type[] ts, as;    Type t;    ParameterizedType p;    if ((c=x.getClass()) == String.class)     return c;    if ((ts=c.getGenericInterfaces()) != null) {      for (int i=0; i < ts.length; ++i) {        if (((t=ts[i]) instanceof ParameterizedType) && ((p=(ParameterizedType)t).getRawType() == Comparable.class) && (as=p.getActualTypeArguments()) != null && as.length == 1 && as[0] == c)         return c;      }    }  }  return null;}  }
class C{  private void loadImportData() throws IOException, BusinessException {  String fileName=importSelectWizardPage.getFileName();  if (StringUtils.isBlank(fileName)) {    importData=null;    return;  }  Path path=Paths.get(fileName);  if (!Files.exists(path)) {    importData=null;    return;  }  byte[] data=Files.readAllBytes(path);  importData=cmrRepositoryDefinition.getConfigurationInterfaceService().getImportData(data);}  }
class C{  public ExtendableDefaultTableHeaderCellRenderer(){  setHorizontalAlignment(CENTER);  setHorizontalTextPosition(LEFT);  setVerticalAlignment(BOTTOM);  setOpaque(false);}  }
class C{  public static Initiator_Type valueOfType(String type){  Initiator_Type[] initiatorTypes=values();  for (int i=0; i < initiatorTypes.length; i++) {    if (initiatorTypes[i].getType().equals(type)) {      return initiatorTypes[i];    }  }  return null;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.USE_STATEMENT___USE_1:    setUse_1(USE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  try {    if (augs != null && Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {      if (fContentHandler != null) {        fContentHandler.skippedEntity(name);      }    } else {      if (fLexicalHandler != null && fLexicalHandlerParameterEntities) {        fLexicalHandler.startEntity(name);      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void dispatchObtainGamesTasks(){  JobParams params=new JobParams().append("ConnectivityManager",connectivityManager).append("MainThread",mainThread).append("CheckConnectionCallback",getCheckConnectionCallback()).append("GameCatalog",gameCatalog).append("GetGamesFromDataSourceCallback",getGamesFromDataSourceCallback()).append("StoreGamesInDatabaseCallback",getStoreGamesInDatabaseCallback());  Corleone.context(CorleoneContexts.OBTAIN_GAMES).dispatchJobs(params);}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.BLOCK__STATEMENTS:    return ((InternalEList<?>)getStatements()).basicRemove(otherEnd,msgs);case GamlPackage.BLOCK__FUNCTION:  return basicSetFunction(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public SGD aggregate(SGD toAggregate) throws Exception {  if (m_weights == null) {    throw new Exception("No model built yet, can't aggregate");  }  if (!m_data.equalHeaders(toAggregate.m_data)) {    throw new Exception("Can't aggregate - data headers dont match: " + m_data.equalHeadersMsg(toAggregate.m_data));  }  if (m_weights.length != toAggregate.getWeights().length) {    throw new Exception("Can't aggregate - SDG to aggregate has weight vector " + "that differs in length from ours.");  }  for (int i=0; i < m_weights.length; i++) {    m_weights[i]+=toAggregate.getWeights()[i];  }  m_numModels++;  return this;}  }
class C{  public void open(InputStream in) throws IOException {  model.setBytes(in);}  }
class C{  public String generateNextPrefix(){  return "ns" + (count++);}  }
class C{  public String expectedResultsPerAverageTipText(){  return "Set the expected number of results to average per run. " + "For example if a CrossValidationResultProducer is being used " + "(with the number of folds set to 10), then the expected number "+ "of results per run is 10.";}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_RANGE__LEFT:    setLeft((CharacterClassAtom)null);  return;case RegularExpressionPackage.CHARACTER_CLASS_RANGE__RIGHT:setRight((CharacterClassAtom)null);return;}super.eUnset(featureID);}  }
class C{  public static String lowercaseFirstLetter(String data){  char firstLetter=Character.toLowerCase(data.substring(0,1).charAt(0));  String restLetters=data.substring(1);  return firstLetter + restLetters;}  }
class C{  public Matrix toSWFMatrix(){  Matrix sm=new Matrix();  if (b != 0 || c != 0)   sm.hasRotate=true;  if (a != 0 || d != 0)   sm.hasScale=true;  sm.scaleX=(int)(a * SwfConstants.FIXED_POINT_MULTIPLE);  sm.scaleY=(int)(d * SwfConstants.FIXED_POINT_MULTIPLE);  sm.rotateSkew0=(int)(b * SwfConstants.FIXED_POINT_MULTIPLE);  sm.rotateSkew1=(int)(c * SwfConstants.FIXED_POINT_MULTIPLE);  sm.translateX=(int)(tx * SwfConstants.TWIPS_PER_PIXEL);  sm.translateY=(int)(ty * SwfConstants.TWIPS_PER_PIXEL);  return sm;}  }
class C{  public void addExtension(Extension ext){  addExtension(ext,ext.getClass());}  }
class C{  public void addToolbarButton(final Clickable button){  toolbar.addButton(button);}  }
class C{  @Override public void createDatabaseSchema(AbstractSession session,Writer writer,Set<String> createdDatabaseSchemas) throws EclipseLinkException {  buildDatabaseSchemaCreationWriter(session,writer,createdDatabaseSchemas);}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 groundAnchorA,Vector2 groundAnchorB,Vector2 anchorA,Vector2 anchorB,float ratio){  this.bodyA=bodyA;  this.bodyB=bodyB;  this.groundAnchorA.set(groundAnchorA);  this.groundAnchorB.set(groundAnchorB);  this.localAnchorA.set(bodyA.getLocalPoint(anchorA));  this.localAnchorB.set(bodyB.getLocalPoint(anchorB));  lengthA=anchorA.dst(groundAnchorA);  lengthB=anchorB.dst(groundAnchorB);  this.ratio=ratio;  float C=lengthA + ratio * lengthB;}  }
class C{  public void scale(float x,float y){  Matrix3f tmp=new Matrix3f();  tmp.loadScale(x,y);  multiply(tmp);}  }
class C{  public PrintStreamPrinter(PrintStream pw){  mPS=pw;}  }
class C{  public DiskStoreAttributesCreation(){}  }
class C{  private void assertStringLength(int len) throws DecodingException {  if (len < -1) {    throw new DecodingException(StatusCodes.Bad_DecodingError,"Unexpected string length " + len);  }  int maxLen=ctx.getMaxStringLength();  if (maxLen > 0 && len > maxLen) {    throw new DecodingException(StatusCodes.Bad_EncodingLimitsExceeded,"MaxStringLength " + maxLen + " < "+ len);  }  if (len > remaining()) {    throw new DecodingException(StatusCodes.Bad_EndOfStream,"Buffer underflow");  }}  }
class C{  private void calculateSlotUsage(){  numEntries=0;  for (int i=0; i < table.table.length; i++) {    LinkedList<V> list=(LinkedList<V>)table.table[i];    if (list != null) {      numEntries+=list.size();      intHashTable[i]+=list.size();    }  }}  }
class C{  public static MeshModel drawCube(MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){  drawDown(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);  drawUp(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);  drawNorth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);  drawSouth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);  drawWest(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);  drawEast(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);  return model;}  }
class C{  public boolean hasChildNodes(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  @PUT @Path("codenvy/properties") @Consumes(MediaType.APPLICATION_JSON) @ApiResponses(value={@ApiResponse(code=201,message="Successfully updated"),@ApiResponse(code=404,message="Properties not found"),@ApiResponse(code=500,message="Unexpected error occurred")}) @ApiOperation(value="Updates property of configuration of Codenvy on-prem. It could take 5-7 minutes.") public Response updateCodenvyProperties(Map<String,String> properties){  try {    facade.updateArtifactConfig(createArtifact(CDECArtifact.NAME),properties);    return Response.status(Response.Status.CREATED).build();  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  public void processResponse(StunResponseEvent response){  receivedResponses.add(response);}  }
class C{  public void clearAndNotifyObserveRelations(ResponseCode code){  for (  ObserveRelation relation : observeRelations) {    relation.cancel();    relation.getExchange().sendResponse(new Response(code));  }}  }
class C{  public int height(){  return height(root);}  }
class C{  public void registerUsedModule(String moduleName){  if (!usedModules.contains(moduleName)) {    usedModules.add(moduleName);  }}  }
class C{  public boolean isList(){  return hasRelationship(Primitive.INSTANTIATION,Primitive.LIST);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void sphereDetail(int ures,int vres){  if (ures < 3)   ures=3;  if (vres < 2)   vres=2;  if ((ures == sphereDetailU) && (vres == sphereDetailV))   return;  float delta=(float)SINCOS_LENGTH / ures;  float[] cx=new float[ures];  float[] cz=new float[ures];  for (int i=0; i < ures; i++) {    cx[i]=cosLUT[(int)(i * delta) % SINCOS_LENGTH];    cz[i]=sinLUT[(int)(i * delta) % SINCOS_LENGTH];  }  int vertCount=ures * (vres - 1) + 2;  int currVert=0;  sphereX=new float[vertCount];  sphereY=new float[vertCount];  sphereZ=new float[vertCount];  float angle_step=(SINCOS_LENGTH * 0.5f) / vres;  float angle=angle_step;  for (int i=1; i < vres; i++) {    float curradius=sinLUT[(int)angle % SINCOS_LENGTH];    float currY=cosLUT[(int)angle % SINCOS_LENGTH];    for (int j=0; j < ures; j++) {      sphereX[currVert]=cx[j] * curradius;      sphereY[currVert]=currY;      sphereZ[currVert++]=cz[j] * curradius;    }    angle+=angle_step;  }  sphereDetailU=ures;  sphereDetailV=vres;}  }
class C{  public boolean testDigestOnOff(String algo,ReadModel readModel,boolean on,int dataLength) throws Exception {  try (ByteArrayInputStream bais=new ByteArrayInputStream(data);DigestInputStream dis=new DigestInputStream(bais,MessageDigest.getInstance(algo));ByteArrayOutputStream baos=new ByteArrayOutputStream();DigestOutputStream dos=new DigestOutputStream(baos,MessageDigest.getInstance(algo));ByteArrayOutputStream baOut=new ByteArrayOutputStream()){    int k=0;    byte[] buffer=new byte[5];    boolean enDigest=true;    dis.on(enDigest);    dos.on(enDigest);switch (readModel) {case READ:      while ((k=dis.read()) != -1) {        if (on) {          dos.write(k);        } else {          dos.write(k);          if (enDigest) {            baOut.write(k);          }          enDigest=!enDigest;          dos.on(enDigest);          dis.on(enDigest);        }      }    break;case BUFFER_READ:  while ((k=dis.read(buffer,0,buffer.length)) != -1) {    if (on) {      dos.write(buffer,0,k);    } else {      dos.write(buffer,0,k);      if (enDigest) {        baOut.write(buffer,0,k);      }      enDigest=!enDigest;      dis.on(enDigest);      dos.on(enDigest);    }  }break;case MIX_READ:while ((k=dis.read()) != -1) {if (on) {  dos.write(k);  if ((k=dis.read(buffer,0,buffer.length)) != -1) {    dos.write(buffer,0,k);  }} else {  dos.write(k);  if (enDigest) {    baOut.write(k);  }  enDigest=!enDigest;  dis.on(enDigest);  dos.on(enDigest);  if ((k=dis.read(buffer,0,buffer.length)) != -1) {    dos.write(buffer,0,k);    if (enDigest) {      baOut.write(buffer,0,k);    }    enDigest=!enDigest;    dis.on(enDigest);    dos.on(enDigest);  }}}break;default :out.println("ERROR: Invalid read/write combination choice!");return false;}byte[] output1=dis.getMessageDigest().digest();byte[] output2=dos.getMessageDigest().digest();byte[] standard;if (on) {standard=md.digest(data);} else {byte[] dataDigested=baOut.toByteArray();standard=md.digest(dataDigested);}if (!MessageDigest.isEqual(data,baos.toByteArray())) {out.println("ERROR of " + readModel + ": output and input data unexpectedly changed");return false;}if (!MessageDigest.isEqual(output1,standard) || !MessageDigest.isEqual(output2,standard)) {out.println("ERROR" + readModel + ": generated digest data unexpectedly changed");return false;}return true;} catch (Exception ex) {out.println("testDigestOnOff failed at:" + algo + "/"+ readModel+ "/"+ dataLength+ " with unexpected exception");throw ex;}}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("addressMode=" + "(" + CUaddress_mode.stringFor(addressMode[0]) + ","+ CUaddress_mode.stringFor(addressMode[1])+ ","+ CUaddress_mode.stringFor(addressMode[2])+ ")"+ f);  sb.append("filterMode=" + CUfilter_mode.stringFor(filterMode) + f);  String flagsString="";  if ((flags & JCudaDriver.CU_TRSF_READ_AS_INTEGER) != 0) {    flagsString+="CU_TRSF_READ_AS_INTEGER";  }  if ((flags & JCudaDriver.CU_TRSF_NORMALIZED_COORDINATES) != 0) {    flagsString+="CU_TRSF_NORMALIZED_COORDINATES";  }  sb.append("flags=" + flags + "("+ flagsString+ ")");  sb.append("maxAnisotropy=" + maxAnisotropy);  sb.append("mipmapFilterMode=" + CUfilter_mode.stringFor(mipmapFilterMode) + f);  sb.append("mipmapLevelBias=" + mipmapLevelBias + f);  sb.append("minMipmapLevelClamp=" + minMipmapLevelClamp + f);  sb.append("maxMipmapLevelClamp=" + maxMipmapLevelClamp + f);  return sb.toString();}  }
class C{  private void emit2(int od){  if (!alive)   return;  if (cp + 2 > code.length) {    emit1(od >> 8);    emit1(od);  } else {    code[cp++]=(byte)(od >> 8);    code[cp++]=(byte)od;  }}  }
class C{  public SVGPath smoothQuadTo(double x,double y){  append(SVGConstants.PATH_SMOOTH_QUAD_TO,x,y);  return this;}  }
class C{  public int hashCode(){  return 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Image rotate(int degrees){  throw new RuntimeException("The rotate method is not supported by indexed images at the moment");}  }
class C{  public final Flux<T> repeat(long numRepeat){  return onAssembly(new FluxRepeat<>(this,numRepeat));}  }
class C{  public void copyFrom(State state){  translateX=state.translateX;  translateY=state.translateY;  clipX=state.clipX;  clipY=state.clipY;  clipW=state.clipW;  clipH=state.clipH;  font=state.font;  fgColor=state.fgColor;  bgColor=state.bgColor;  bgPattern=state.bgPattern;  fgPattern=state.fgPattern;  XorMode=state.XorMode;  alpha=state.alpha;  graphicHints=state.graphicHints;  lineAttributes=SWTGraphics.clone(state.lineAttributes);}  }
class C{  @Override public boolean add(String o){  return m_Root.add(o + TrieNode.STOP);}  }
class C{  public final void add(final GeneratedMessageLite.GeneratedExtension<?,?> extension){  extensionsByNumber.put(new ObjectIntPair(extension.getContainingTypeDefaultInstance(),extension.getNumber()),extension);}  }
class C{  public static SafeAndroidClassesAndMethods v(){  if (v == null)   v=new SafeAndroidClassesAndMethods();  return v;}  }
class C{  public boolean isAddressedModePossible(){  return false;}  }
class C{  public void testTicket1738() throws Exception {  final URI s1=f.createURI("http://s1");  final URI p1=f.createURI("http://p1");  final URI p2=f.createURI("http://p2");  final URI p3=f.createURI("http://p3");  final URI o1=f.createURI("http://o1");  final URI o2=f.createURI("http://o2");  final StringBuilder bootstrap=new StringBuilder();  bootstrap.append(getNamespaceDeclarations());  bootstrap.append("INSERT { <http://s1> <http://p1> <http://o1> . <http://s1> <http://p2> <http://o2> } WHERE { }");  m_repo.prepareUpdate("DROP ALL").evaluate();  m_repo.prepareUpdate(bootstrap.toString()).evaluate();  assertTrue("Repo setup problem: missing statement",hasStatement(s1,p1,o1,true));  assertTrue("Repo setup problem: missing statement",hasStatement(s1,p2,o2,true));  final StringBuilder update=new StringBuilder();  update.append(getNamespaceDeclarations());  update.append("DELETE { ?s <http://p1> ?o1 } " + "INSERT { ?s <http://p3> ?o2 } " + "WHERE { "+ "  ?s <http://p1> ?o1 ."+ "  ?s <http://p2> | <http://p3> ?o2 "+ "}");  m_repo.prepareUpdate(update.toString()).evaluate();  assertFalse("Problem in UPDATE: unexpected statement",hasStatement(s1,p1,o1,true));  assertTrue("Problem in UPDATE: missing statement (test case main cause)",hasStatement(s1,p3,o2,true));  assertTrue("Problem in UPDATE: missing statement",hasStatement(s1,p2,o2,true));}  }
class C{  public static boolean isTrustedCertificateEntry(String alias,KeyStore keyStore) throws KeyStoreException {  return keyStore.isCertificateEntry(alias);}  }
class C{  public T caseDoubleLiteral(DoubleLiteral object){  return null;}  }
class C{  protected AlgorithmParameters engineGetParameters(){  return null;}  }
class C{  public SootMethodRef makeMethodRef(SootClass declaringClass,String name,List<Type> parameterTypes,Type returnType,boolean isStatic){  return new SootMethodRefImpl(declaringClass,name,parameterTypes,returnType,isStatic);}  }
class C{  public java.lang.StringBuilder insert(int offset,char c){  return null;}  }
class C{  protected boolean arePrimeAnnosEqual(final AnnotatedTypeMirror type1,final AnnotatedTypeMirror type2){  return AnnotationUtils.areSame(type1.getAnnotations(),type2.getAnnotations());}  }
class C{  public static DoubleVector dnormLog(double x,DoubleVector mean,double sd){  DoubleVector denLog=new DoubleVector(mean.size());  for (int i=0; i < mean.size(); i++) {    denLog.set(i,dnormLog(x,mean.get(i),sd));  }  return denLog;}  }
class C{  private void checkState(){  if (!start) {    throw new IllegalStateException("Cannot visit member before visit has been called.");  }  if (end) {    throw new IllegalStateException("Cannot visit member after visitEnd has been called.");  }}  }
class C{  public static void tryFormatSatisfiability(String format) throws IllegalFormatException {  MessageFormat.format(format,(Object[])null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  if (s == null)   s="English";  stack.getUIMgrSafe().put("default_audio_language",s);  return null;}  }
class C{  public String toShortString(StringBuilder sb){  sb.setLength(0);  sb.append('[');  sb.append(left);  sb.append(',');  sb.append(top);  sb.append("][");  sb.append(right);  sb.append(',');  sb.append(bottom);  sb.append(']');  return sb.toString();}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  private void drawPoliticsUI(){  this.setLayout(new GridBagLayout());  int currentCell=1;  final Insets insets=new Insets(5,2,5,2);  for (  final PlayerID p : m_data.getPlayerList()) {    this.add(getPlayerLabel(p),new GridBagConstraints(currentCell++,0,1,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,insets,0,0));  }  currentCell=1;  for (  final PlayerID p : m_data.getPlayerList()) {    this.add(new JSeparator(),new GridBagConstraints(0,currentCell++,20,1,0.1,0.1,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));    this.add(getPlayerLabel(p),new GridBagConstraints(0,currentCell++,1,1,1.0,1.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,insets,0,0));  }  int x=1;  int y=2;  for (  final PlayerID pVertical : m_data.getPlayerList()) {    for (    final PlayerID pHorizontal : m_data.getPlayerList()) {      if (pHorizontal.equals(pVertical)) {        this.add(new JLabel(PoliticalStateOverview.LABEL_SELF),new GridBagConstraints(x++,y,1,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,insets,0,0));      } else {        this.add(getRelationshipLabel(pVertical,pHorizontal),new GridBagConstraints(x++,y,1,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,insets,0,0));      }    }    y=y + 2;    x=1;  }}  }
class C{  public RequestHeader clone(){  RequestHeader result=new RequestHeader();  result.AuthenticationToken=AuthenticationToken;  result.Timestamp=Timestamp;  result.RequestHandle=RequestHandle;  result.ReturnDiagnostics=ReturnDiagnostics;  result.AuditEntryId=AuditEntryId;  result.TimeoutHint=TimeoutHint;  result.AdditionalHeader=AdditionalHeader;  return result;}  }
class C{  @Override public void send(Buffer buffer){  _outProxy.write(_outWriter,buffer,false);}  }
class C{  public void uninstallUI(JComponent c){  uninstallListeners();  uninstallDefaults();  uninstallKeyboardActions();  cellWidth=cellHeight=-1;  cellHeights=null;  listWidth=listHeight=-1;  list.remove(rendererPane);  rendererPane=null;  list=null;}  }
class C{  public StringGeneratorBuilder basicLatinAlphabet(){  return new StringGeneratorBuilder(BASIC_LATIN_FIRST_CODEPOINT,BASIC_LATIN_LAST_CODEPOINT);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  updateKeyMaskFields();  out.defaultWriteObject();}  }
class C{  public boolean isLastRow(){  if (m_totalRows == 0)   return true;  return m_currentRow == m_totalRows - 1;}  }
class C{  static boolean compareLocaleNames(Locale locale,String name){  return name.equalsIgnoreCase(locale.toString()) || name.equalsIgnoreCase(getName(locale));}  }
class C{  public boolean nextBoolean(){  return randomGenerator.raw() > 0.5;}  }
class C{  public static List<String> scanForSources(final List<?> compileSourceRoots,final Set<String> sourceIncludes,final Set<String> sourceExcludes){  if (sourceIncludes.isEmpty()) {    sourceIncludes.add(DEFAULT_INCLUSION_PATTERN);  }  final List<String> sources=new ArrayList<String>();  for (  Object compileSourceRoot : compileSourceRoots) {    final File compileSourceRootFile=new File(compileSourceRoot.toString());    final String[] sourcesFromSourceRoot=scanForSources(compileSourceRootFile,sourceIncludes,sourceExcludes);    for (    final String sourceFromSourceRoot : sourcesFromSourceRoot) {      sources.add(new File(compileSourceRootFile,sourceFromSourceRoot).getAbsolutePath());    }  }  return sources;}  }
class C{  protected void onInitParams(Params params){}  }
class C{  public static String createDescription(final String description,final String[] causes,final String[] impacts){  final StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(description);  stringBuilder.append('\n');  if (causes.length != 0) {    stringBuilder.append('\n');    stringBuilder.append("Possible causes" + ":\n");    for (    final String cause : causes) {      stringBuilder.append("  - ");      stringBuilder.append(cause);      stringBuilder.append('\n');    }  }  if (impacts.length != 0) {    stringBuilder.append('\n');    stringBuilder.append("Problem impact" + ":\n");    for (    final String impact : impacts) {      stringBuilder.append("  - ");      stringBuilder.append(impact);      stringBuilder.append('\n');    }  }  return stringBuilder.toString();}  }
class C{  public XObject execute(XPathContext xctxt,int currentNode) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(currentNode);  if (dtm != null) {    int expType=dtm.getExpandedTypeID(currentNode);    return execute(xctxt,currentNode,dtm,expType);  }  return NodeTest.SCORE_NONE;}  }
class C{  public void clearProperty(String key){  ri.clearProperty(key);}  }
class C{  public static void recompileProgramBlockHierarchy2Forced(ArrayList<ProgramBlock> pbs,long tid,HashSet<String> fnStack,ExecType et) throws DMLRuntimeException {  try {synchronized (pbs) {      for (      ProgramBlock pb : pbs)       rRecompileProgramBlock2Forced(pb,tid,fnStack,et);    }  } catch (  Exception ex) {    throw new DMLRuntimeException("Unable to recompile program block hierarchy to CP.",ex);  }}  }
class C{  @Override protected void handleUnknownProperty(JsonParser jp,DeserializationContext ctxt,Object beanOrClass,String propName) throws IOException, JsonProcessingException {  if (_ignoreAllUnknown || (_ignorableProps != null && _ignorableProps.contains(propName))) {    jp.skipChildren();    return;  }  super.handleUnknownProperty(jp,ctxt,beanOrClass,propName);}  }
class C{  public boolean sameRegisterPropertiesAsExceptForGuardWhichIsSimilar(RegisterOperand other){  boolean guardsSimilar=this.guard == other.guard || this.guard != null && this.guard.similar(other.guard);  return this.register == other.register && this.flags == other.flags && this.flags2 == other.flags2 && this.nextInDefUseList == other.nextInDefUseList && guardsSimilar;}  }
class C{  public static void main(String[] args) throws Exception {  new Solve().start(args);}  }
class C{  public static String printCoverageProperties(String prefix,CoverageAttributeTable cat,String covname){  String layername=prefix + "_" + covname;  List<Object> text_features=new ArrayList<Object>();  List<Object> edge_features=new ArrayList<Object>();  List<Object> area_features=new ArrayList<Object>();  List<Object> point_features=new ArrayList<Object>();  CoverageTable ct=cat.getCoverageTable(covname);  String path=ct.getDataPath();  String fcaPath=path + "/fca";  File fca=new File(fcaPath);  if (!fca.exists()) {    fcaPath=path + "/fca.";    fca=new File(fcaPath);  }  if (!fca.canRead()) {    println();    return null;  }  try {    DcwRecordFile fcadesc=new DcwRecordFile(fcaPath);    int fclass=fcadesc.whatColumn("fclass");    int type=fcadesc.whatColumn("type");    List<Object> v=new ArrayList<Object>();    while (fcadesc.parseRow(v)) {      String name=(String)v.get(fclass);      String t=(String)v.get(type);      if (t.equals("T")) {        text_features.add(name);      } else       if (t.equals("L")) {        edge_features.add(name);      } else       if (t.equals("A")) {        area_features.add(name);      } else       if (t.equals("P")) {        point_features.add(name);      }    }  } catch (  FormatException fe) {  }  if (!(text_features.isEmpty() && edge_features.isEmpty() && area_features.isEmpty()&& point_features.isEmpty())) {    println("### VPF " + cat.getCoverageDescription(covname) + " Layer");    println(layername + ".class=com.bbn.openmap.layer.vpf.VPFLayer");    println(layername + ".prettyName=" + "VPF "+ cat.getCoverageDescription(covname)+ " "+ prefix);    println(layername + ".vpfPath=" + rootpath);    println(layername + ".coverageType=" + covname);    println(layername + ".featureTypes=" + "area edge text point");    printFeatures("text",text_features,layername);    printFeatures("edge",edge_features,layername);    printFeatures("area",area_features,layername);    printFeatures("point",point_features,layername);    println();  } else {    return null;  }  return layername;}  }
class C{  void join(long ms,int ns) throws InterruptedException {  vmdata.join(ms,ns);}  }
class C{  protected void assertAsBoolean(boolean expected,Object value){  boolean answer=DefaultTypeTransformation.castToBoolean(value);  assertEquals("value: " + value + " asBoolean()",expected,answer);}  }
class C{  protected int determineKind(File underlyingResource) throws JavaModelException {  IClasspathEntry entry=((JavaProject)getJavaProject()).getClasspathEntryFor(new Path(underlyingResource.getAbsolutePath()));  if (entry != null) {    return entry.getContentKind();  }  return IPackageFragmentRoot.K_SOURCE;}  }
class C{  private ResourceProxy findSerializationDataFromCoveringParent(IResource changedResource,IFolder syncDirectory,String resourceLocation,IPath serializationFilePath) throws CoreException, IOException {  Logger logger=Activator.getDefault().getPluginLogger();  logger.trace("Found plain nt:folder candidate at {0}, trying to find a covering resource for it",changedResource.getProjectRelativePath());  while (serializationFilePath.segmentCount() != 0) {    serializationFilePath=serializationFilePath.removeLastSegments(1);    IFolder folderWithPossibleSerializationFile=(IFolder)syncDirectory.findMember(serializationFilePath);    if (folderWithPossibleSerializationFile == null) {      logger.trace("No folder found at {0}, moving up to the next level",serializationFilePath);      continue;    }    String possibleSerializationFilePath=serializationManager.getSerializationFilePath(((IFolder)folderWithPossibleSerializationFile).getLocation().toOSString(),SerializationKind.METADATA_PARTIAL);    logger.trace("Looking for serialization data in {0}",possibleSerializationFilePath);    if (serializationManager.isSerializationFile(possibleSerializationFilePath)) {      IPath parentSerializationFilePath=Path.fromOSString(possibleSerializationFilePath).makeRelativeTo(syncDirectory.getLocation());      IFile possibleSerializationFile=syncDirectory.getFile(parentSerializationFilePath);      if (!possibleSerializationFile.exists()) {        logger.trace("Potential serialization data file {0} does not exist, moving up to the next level",possibleSerializationFile.getFullPath());        continue;      }      InputStream contents=possibleSerializationFile.getContents();      ResourceProxy serializationData;      try {        serializationData=serializationManager.readSerializationData(parentSerializationFilePath.toPortableString(),contents);      }  finally {        IOUtils.closeQuietly(contents);      }      String repositoryPath=serializationManager.getRepositoryPath(resourceLocation);      String potentialPath=serializationData.getPath();      boolean covered=serializationData.covers(repositoryPath);      logger.trace("Found possible serialization data at {0}. Resource :{1} ; our resource: {2}. Covered: {3}",parentSerializationFilePath,potentialPath,repositoryPath,covered);      if (covered) {        return serializationData.getChild(repositoryPath);      }      break;    }  }  return null;}  }
class C{  public void initialise(){  updateOnlineStatusText(StatusEnum.CONNECTING);  updateStatusLabel("",true);}  }
class C{  public void dispatchEvent(AWTEvent event){  if (!(event instanceof KeyEvent)) {    return;  }  KeyEvent e=(KeyEvent)event;  int eventID=event.getID();  boolean notInCompositionMode=buffer.length() == 0;  if (eventID == KeyEvent.KEY_PRESSED) {    if (notInCompositionMode) {      return;    }switch (e.getKeyCode()) {case KeyEvent.VK_LEFT:      moveCaretLeft();    break;case KeyEvent.VK_RIGHT:  moveCaretRight();break;}} else if (eventID == KeyEvent.KEY_TYPED) {char c=e.getKeyChar();if (notInCompositionMode) {if (c != '\\') {return;}startComposition();} else {switch (c) {case ' ':finishComposition();break;case '\u007f':deleteCharacter();break;case '\b':deletePreviousCharacter();break;case '\u001b':cancelComposition();break;case '\n':case '\t':sendCommittedText();break;default :composeUnicodeEscape(c);break;}}} else {if (notInCompositionMode) {return;}}e.consume();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  String attrValue;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  attrValue=testAddr.getAttributeNS("http://www.nist.gov","domestic");  assertEquals("attrValue","Yes",attrValue);}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public void put(final Delivery delivery){  super.put(delivery);}  }
class C{  @CheckReturnValue @Deprecated @Nonnull public static String join(@Nonnull String[] s,@Nonnull String delimiter){  StringBuilder buffer=new StringBuilder();  for (int i=0; i < s.length; i++) {    buffer.append(s[i]);    if (i < s.length - 1) {      buffer.append(delimiter);    }  }  return buffer.toString();}  }
class C{  ZoneOffsetTransitionRule toTransitionRule(ZoneOffset standardOffset,int savingsBeforeSecs){  if (dayOfMonthIndicator < 0) {    if (month != 2) {      dayOfMonthIndicator=maxLengthOfMonth(month) - 6;    }  }  if (timeEndOfDay && dayOfMonthIndicator > 0 && (dayOfMonthIndicator == 28 && month == 2) == false) {    LocalDate date=LocalDate.of(2004,month,dayOfMonthIndicator).plusDays(1);    month=date.getMonth();    dayOfMonthIndicator=date.getDayOfMonth();    if (dayOfWeek != -1) {      dayOfWeek=plusDayOfWeek(dayOfWeek,1);    }    timeEndOfDay=false;  }  return new ZoneOffsetTransitionRule(month,dayOfMonthIndicator,dayOfWeek,time,timeEndOfDay,timeDefinition,standardOffset,ZoneOffset.ofTotalSeconds(standardOffset.getTotalSeconds() + savingsBeforeSecs),ZoneOffset.ofTotalSeconds(standardOffset.getTotalSeconds() + savingAmountSecs));}  }
class C{  @Deprecated public SslError(int error,X509Certificate certificate){  this(error,certificate,"");}  }
class C{  @Override public String word(){  return getString(WORD_KEY);}  }
class C{  public synchronized ZooKeeperClientBuilder retryPolicy(RetryPolicy retryPolicy){  this.retryPolicy=retryPolicy;  return this;}  }
class C{  public static void addCookieWebUser(HttpServletRequest request,HttpServletResponse response,String webUser,String COOKIE_NAME){  Cookie cookie=new Cookie(COOKIE_NAME,webUser);  cookie.setComment("adempiere Web User");  cookie.setPath(request.getContextPath());  cookie.setMaxAge(2592000);  response.addCookie(cookie);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_11:    return anonymous_methodBody_1_1 != null && !anonymous_methodBody_1_1.isEmpty();case UmplePackage.METHOD_BODY___CODE_1:  return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_21:return anonymous_methodBody_2_1 != null && !anonymous_methodBody_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  public static GT_Tool_Item constructCrowbarItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aEntityDamage){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_CrowbarRC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage);  } catch (  Throwable e) {  }  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_Crowbar_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,aEntityDamage,false);}  }
class C{  public static WebSocketFrame createPingFrame(byte[] payload){  return createPingFrame().setPayload(payload);}  }
class C{  public XMLReaderAdapter() throws SAXException {  setup(XMLReaderFactory.createXMLReader());}  }
class C{  public boolean isProfileActive(){  return after.isActive();}  }
class C{  void remove(DynamicAABBTreeNode node){  if (this.root == null)   return;  if (node == this.root) {    this.root=null;    return;  }  DynamicAABBTreeNode parent=node.parent;  DynamicAABBTreeNode grandparent=parent.parent;  DynamicAABBTreeNode other;  if (parent.left == node) {    other=parent.right;  } else {    other=parent.left;  }  if (grandparent != null) {    if (grandparent.left == parent) {      grandparent.left=other;    } else {      grandparent.right=other;    }    other.parent=grandparent;    DynamicAABBTreeNode n=grandparent;    while (n != null) {      n=balance(n);      DynamicAABBTreeNode left=n.left;      DynamicAABBTreeNode right=n.right;      n.height=1 + Math.max(left.height,right.height);      n.aabb=left.aabb.getUnion(right.aabb);      n=n.parent;    }  } else {    this.root=other;    other.parent=null;  }}  }
class C{  static void exportXmlFile(ByteArrayPayload payload,String path) throws IOException {  File file=new File(path);  if (file.exists() && !file.delete()) {    throw new IOException("Cannot overwrite " + path + ". Perhaps the file is locked?");  }  InputStream is=payload.getPayloadStream();  int len=(int)payload.getLength();  byte[] data=new byte[len];  int read=is.read(data,0,len);  if (read > 0) {    RandomAccessFile randomAccessFile=null;    try {      randomAccessFile=new RandomAccessFile(file,"rws");      randomAccessFile.write(data);    }  finally {      if (randomAccessFile != null) {        try {          randomAccessFile.close();        } catch (        IOException e) {          Log.e(t,"Error closing RandomAccessFile: " + path,e);        }      }    }  }}  }
class C{  private void handleRequestSuccess(long requestId,Object response,ThreadContext context){  ByteBuf buffer=channel.alloc().buffer(10).writeByte(RESPONSE).writeLong(requestId).writeByte(SUCCESS);  try {    writeResponse(buffer,response,context);  } catch (  SerializationException e) {    handleRequestFailure(requestId,e,context);    return;  }  channel.writeAndFlush(buffer,channel.voidPromise());  if (response instanceof ReferenceCounted) {    ((ReferenceCounted)response).release();  }}  }
class C{  public boolean contains(float value){  if (value > from && value <= to)   return true; else   return false;}  }
class C{  long reenterLock(DLockRequestMessage request) throws InterruptedException {  waitWhileInitializing();  if (!acquireDestroyReadLock(0)) {    waitUntilDestroyed();    checkDestroyed();  }  try {    checkDestroyed();    DLockGrantToken grant=getGrantToken(request.getObjectName());    if (grant == null) {      if (logger.isTraceEnabled(LogMarker.DLS)) {        logger.trace(LogMarker.DLS,"[DLockGrantor.reenterLock] no grantToken found for {}",request.getObjectName());      }      return 0;    }synchronized (grant) {      if (!this.dm.isCurrentMember(request.getSender()) || grant.isDestroyed()) {        return 0;      }      if (!grant.isLockedBy(request.getSender(),request.getLockId())) {        if (logger.isTraceEnabled(LogMarker.DLS)) {          logger.trace(LogMarker.DLS,"[DLockGrantor.reenterLock] grant is not locked by sender={} lockId={} grant={}",request.getSender(),request.getLockId(),grant);        }        return 0;      }      long leaseExpireTime=Math.max(grant.getLeaseExpireTime(),grant.calcLeaseExpireTime(request.getLeaseTime()));      grant.grantLock(request.getSender(),leaseExpireTime,request.getLockId(),grant.getRemoteThread());      return grant.getLeaseExpireTime();    }  }  finally {    releaseDestroyReadLock();  }}  }
class C{  @Override public String[] indices(){  return indices;}  }
class C{  public synchronized void updateArray(final BaseType arrayType,final BaseType elementType,final int numberOfElements) throws CouldntSaveDataException {  Preconditions.checkNotNull(arrayType,"IE02791: Base type can not be null.");  Preconditions.checkArgument(arrayType.getCategory() == BaseTypeCategory.ARRAY,"Base type must be an array.");  Preconditions.checkNotNull(elementType,"IE02792: Element type can not be null.");  Preconditions.checkArgument(numberOfElements > 0,"Number of elements must be above zero.");  final TypeMember arrayMember=arrayType.iterator().next();  typesContainer.updateTypeMember(arrayMember,elementType,arrayMember.getName(),arrayMember.getBitOffset(),Optional.of(numberOfElements),arrayMember.getArgumentIndex());  final int newArraySize=arrayMember.getNumberOfElements().get() * arrayMember.getBitSize();  final String newArrayName=buildArrayName(elementType,numberOfElements);  final ImmutableSet<BaseType> affectedTypes=typesContainer.updateBaseType(arrayType,newArrayName,arrayType.isSigned(),newArraySize);  backend.updateArrayMember(arrayMember,elementType,numberOfElements);  backend.updateType(arrayType,newArrayName,arrayType.getBitSize(),arrayType.isSigned());  notifyTypesUpdated(affectedTypes);}  }
class C{  public TimeSeriesCollection(){  this(null,TimeZone.getDefault());}  }
class C{  public LocoNetSlot slot(int i){  return _slots[i];}  }
class C{  private ZyGraphPopupMenus(){}  }
class C{  public boolean canExternalFrame(){  return canExternalFrame;}  }
class C{  public void markChanges(SerialReply l){  if (!(l.isFromParallelSensor() || l.isFromNewSerialSensor() || l.isFromOldSerialSensor())) {    return;  }  if (l.isFromNewSerialSensor()) {    boolean input=((l.getElement(1) & 0x01) == 0);    int card=((l.getElement(1) & 0x60) >> 5);    if (card > 2) {      log.warn("Did not expect card number " + card + ", message "+ l);    }    boolean motion=(l.getElement(1) & 0x10) != 0;    int number=((l.getElement(1) & 0x0E) >> 1) + 1;    int sensor=card * 8 + (motion ? offsetM : offsetA) + number;    markBit(input,sensor);  } else   if (l.isFromOldSerialSensor()) {    int byte1=l.getElement(1);    boolean altPort=((byte1 & 0x40) != 0);    boolean highNibble=((byte1 & 0x10) != 0);    boolean b0=(byte1 & 0x01) == 0;    boolean b1=(byte1 & 0x02) == 0;    boolean b2=(byte1 & 0x04) == 0;    boolean b3=(byte1 & 0x08) == 0;    int number=1 + (highNibble ? 4 : 0) + (altPort ? 8 : 0)+ offsetS;    markBit(b0,number);    markBit(b1,number + 1);    markBit(b2,number + 2);    markBit(b3,number + 3);  } else {    int byte1=l.getElement(1);    boolean altPort=((byte1 & 0x40) != 0);    boolean highNibble=((byte1 & 0x10) != 0);    boolean b0=(byte1 & 0x01) == 0;    boolean b1=(byte1 & 0x02) == 0;    boolean b2=(byte1 & 0x04) == 0;    boolean b3=(byte1 & 0x08) == 0;    int number=1 + (highNibble ? 4 : 0) + (altPort ? 8 : 0)+ offsetP;    markBit(b0,number);    markBit(b1,number + 1);    markBit(b2,number + 2);    markBit(b3,number + 3);  }}  }
class C{  private long hash(final byte[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public static Soap createSoapMessage(String queryDir,String fileName) throws Exception {  return new SoapParserImpl().parse(newQueryInputStream(queryDir,fileName));}  }
class C{  protected final void stopSpi() throws IgniteCheckedException {  for (  T spi : spis) {    if (spiMap.remove(spi) == null) {      if (log.isDebugEnabled())       log.debug("Will not stop SPI since it has not been started by this manager: " + spi);      continue;    }    if (log.isDebugEnabled())     log.debug("Stopping SPI: " + spi);    try {      spi.spiStop();      if (log.isDebugEnabled())       log.debug("SPI module stopped OK: " + spi.getClass().getName());    } catch (    IgniteSpiException e) {      throw new IgniteCheckedException("Failed to stop SPI: " + spi,e);    }    try {      cleanup(spi);      ctx.resource().cleanup(spi);    } catch (    IgniteCheckedException e) {      U.error(log,"Failed to remove injected resources from SPI (ignoring): " + spi,e);    }  }}  }
class C{  private void checkMapPartitionsToNodes(Affinity testAff,Affinity aff){  List<Integer> parts=new ArrayList<>(aff.partitions());  for (int i=0; i < aff.partitions(); ++i)   parts.add(i);  checkEqualPartitionMaps(testAff.mapPartitionsToNodes(parts),aff.mapPartitionsToNodes(parts));}  }
class C{  protected int dp2px(int dpVal){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dpVal,getResources().getDisplayMetrics());}  }
class C{  private Properties overrideWithSysProps(Properties props){  Properties sysProps=null;  try {    sysProps=System.getProperties();  } catch (  AccessControlException e) {    getLog().warn("Skipping overriding quartz properties with System properties " + "during initialization because of an AccessControlException.  " + "This is likely due to not having read/write access for "+ "java.util.PropertyPermission as required by java.lang.System.getProperties().  "+ "To resolve this warning, either add this permission to your policy file or "+ "use a non-default version of initialize().",e);  }  if (sysProps != null) {    props.putAll(sysProps);  }  return props;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicEditorPaneUI();}  }
class C{  public void swapCards(int i,int j){}  }
class C{  public static <A,B>Pair<A,B> of(A first,B second){  return new Pair<A,B>(first,second);}  }
class C{  private void animate(int visibility){  TranslateAnimation animate=new TranslateAnimation(0,0,visibility == View.VISIBLE ? mList.getHeight() : 0,visibility == View.GONE ? mList.getHeight() : 0);  animate.setDuration(700);  animate.setFillAfter(true);  mList.startAnimation(animate);  mList.setVisibility(visibility);}  }
class C{  @Override public void initialize(){  ExtendableMap map=new ExtendableMap();  env=new MapEnvironment(map);  String agentLoc=null;switch (simPaneCtrl.getParamValueIndex(PARAM_SCENARIO)) {case 0:    SimplifiedRoadMapOfPartOfRomania.initMap(map);  agentLoc=SimplifiedRoadMapOfPartOfRomania.ARAD;break;case 1:SimplifiedRoadMapOfPartOfRomania.initMap(map);agentLoc=SimplifiedRoadMapOfPartOfRomania.LUGOJ;break;case 2:SimplifiedRoadMapOfPartOfRomania.initMap(map);agentLoc=SimplifiedRoadMapOfPartOfRomania.FAGARAS;break;case 3:SimplifiedRoadMapOfAustralia.initMap(map);agentLoc=SimplifiedRoadMapOfAustralia.SYDNEY;break;case 4:SimplifiedRoadMapOfAustralia.initMap(map);agentLoc=map.randomlyGenerateDestination();break;}scenario=new Scenario(env,map,agentLoc);destinations=new ArrayList<String>();if (simPaneCtrl.isParamVisible(PARAM_DESTINATION_R)) {switch (simPaneCtrl.getParamValueIndex(PARAM_DESTINATION_R)) {case 0:destinations.add(SimplifiedRoadMapOfPartOfRomania.BUCHAREST);break;case 1:destinations.add(SimplifiedRoadMapOfPartOfRomania.EFORIE);break;case 2:destinations.add(SimplifiedRoadMapOfPartOfRomania.NEAMT);break;case 3:destinations.add(map.randomlyGenerateDestination());break;}} else if (simPaneCtrl.isParamVisible(PARAM_DESTINATION_A)) {switch (simPaneCtrl.getParamValueIndex(PARAM_DESTINATION_A)) {case 0:destinations.add(SimplifiedRoadMapOfAustralia.PORT_HEDLAND);break;case 1:destinations.add(SimplifiedRoadMapOfAustralia.ALBANY);break;case 2:destinations.add(SimplifiedRoadMapOfAustralia.MELBOURNE);break;case 3:destinations.add(map.randomlyGenerateDestination());break;}}switch (simPaneCtrl.getParamValueIndex(PARAM_HEURISTIC)) {case 0:heuristic=new H1();break;default :heuristic=new H2();}heuristic.adaptToGoal(destinations.get(0),scenario.getAgentMap());search=SearchFactory.getInstance().createSearch(simPaneCtrl.getParamValueIndex(PARAM_SEARCH),simPaneCtrl.getParamValueIndex(PARAM_Q_SEARCH_IMPL),heuristic);String goal=destinations.get(0);agent=new MapAgent(env.getMap(),search,new String[]{goal});env.addAgent(agent,scenario.getInitAgentLocation());env.addEnvironmentView(envViewCtrl);envViewCtrl.setGoal(goal);envViewCtrl.initialize(env);}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  listeners.remove(listener);}  }
class C{  public void notifySessionClosed(){  if (LOGGER.isTraceEnabled())   LOGGER.logTrace(this + ": entering notifySessionClosed");  boolean notifyOfClosedEvent=false;synchronized (this) {    boolean alreadyTerminated=isTerminated();    Iterator<TransactionContext> it=allContexts.iterator();    while (it.hasNext()) {      TransactionContext b=(TransactionContext)it.next();      if (LOGGER.isTraceEnabled())       LOGGER.logTrace(this + ": delegating session close to " + b);      b.sessionClosed();    }    closed=true;    if (isTerminated() && !alreadyTerminated)     notifyOfClosedEvent=true;  }  if (notifyOfClosedEvent) {    if (LOGGER.isTraceEnabled())     LOGGER.logTrace(this + ": all contexts terminated, firing TerminatedEvent");    fireTerminatedEvent();  }}  }
class C{  public void calcMaxTick(){  if (maxData == 0) {    maxTick=0;  } else   if (maxData < 0.0) {    maxTick=-Math.floor(-maxData / majorTick) * majorTick;  } else {    maxTick=Math.ceil(maxData / majorTick) * majorTick;  }}  }
class C{  public final int size(){  if (written < 0) {    written=Integer.MAX_VALUE;  }  return written;}  }
class C{  public Object push(Object i){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=i;  m_firstFree++;  return i;}  }
class C{  private void addAnnouncement(UpdateMessage msg){  if (_announcements == null) {    _announcements=new HashSet<>();  }  if (msg.getMessageType().equals("announcement") && !msg.hasExpired()) {    _announcements.add(msg);  }}  }
class C{  @Override public void actionPerformed(ActionEvent event){switch (event.getActionCommand()) {case NEW_ALIAS:    addAlias(new Alias("New Alias"));  break;case COPY_ALIAS:for (Alias alias : getSelectedAliases()) {  addAlias(AliasFactory.copyOf(alias));}break;case DELETE_ALIAS:List<Alias> toDelete=getSelectedAliases();if (toDelete != null && !toDelete.isEmpty()) {String title=toDelete.size() == 1 ? "Delete Alias?" : "Delete Aliases?";String prompt=toDelete.size() == 1 ? "Do you want to delete this alias?" : "Do you want to delete these " + toDelete.size() + " aliases?";int choice=JOptionPane.showConfirmDialog(AliasController.this,prompt,title,JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);if (choice == JOptionPane.YES_OPTION) {for (Alias alias : toDelete) {mAliasModel.removeAlias(alias);}}}break;default :break;}}  }
class C{  public Builder showPrevButton(boolean showPrevButton){  this.showPrevButton=showPrevButton;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String lineup=getString(stack);  String num=getString(stack);  Channel c=getChannel(stack);  return Boolean.valueOf(c != null && EPG.getInstance().getEPGDSForEPGDSName(lineup).canViewStationOnChannel(c.getStationID(),num));}  }
class C{  IteratorEnumeration(Iterator<String> iterator){  this.iterator=iterator;}  }
class C{  public TextTitle(String text,Font font){  this(text,font,TextTitle.DEFAULT_TEXT_PAINT,Title.DEFAULT_POSITION,Title.DEFAULT_HORIZONTAL_ALIGNMENT,Title.DEFAULT_VERTICAL_ALIGNMENT,Title.DEFAULT_PADDING);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.693 -0500",hash_original_method="F3F42A79D0AC4CD032482F2E9202D65B",hash_generated_method="2F24B8EC0376259E0CD0882E936B2C9B") public boolean supportsMulticast() throws SocketException {  return hasFlag(IFF_MULTICAST);}  }
class C{  static public TModel2D estimateModel(List<PointMatch> candidates,Collection<PointMatch> inliers,int iterations,float epsilon,float min_inliers){  inliers.clear();  if (candidates.size() < MIN_SET_SIZE) {    System.err.println(candidates.size() + " correspondences are not enough to estimate a model, at least " + MIN_SET_SIZE+ " correspondences required.");    return null;  }  TModel2D model=new TModel2D();  int i=0;  while (i < iterations) {    PointMatch[] min_matches=new PointMatch[MIN_SET_SIZE];    min_matches[0]=candidates.get((int)(rnd.nextDouble() * candidates.size()));    TModel2D m=new TModel2D();    final ArrayList<PointMatch> temp_inliers=new ArrayList<PointMatch>();    m.fit(min_matches);    int num_inliers=0;    boolean is_good=m.test(candidates,temp_inliers,epsilon,min_inliers);    while (is_good && num_inliers < temp_inliers.size()) {      num_inliers=temp_inliers.size();      m.minimize(temp_inliers);      is_good=m.test(candidates,temp_inliers,epsilon,min_inliers);    }    if (is_good && m.betterThan(model) && temp_inliers.size() >= 3 * MIN_SET_SIZE) {      model=m.clone();      inliers.clear();      inliers.addAll(temp_inliers);    }    ++i;  }  if (inliers.size() == 0)   return null;  return model;}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.fSerializer.startDocument();  if (pos.getNodeType() != Node.DOCUMENT_NODE) {    Document ownerDoc=pos.getOwnerDocument();    if (ownerDoc != null && ownerDoc.getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  } else {    if (((Document)pos).getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  }  if (fSerializer instanceof LexicalHandler) {    fLexicalHandler=((LexicalHandler)this.fSerializer);  }  if (fFilter != null)   fWhatToShowFilter=fFilter.getWhatToShow();  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=null;    nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.fSerializer.endDocument();}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=new float[mYAxis.mEntryCount * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i]=mYAxis.mEntries[i / 2];  }  mTrans.pointValuesToPixel(positions);  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  mAxisLabelPaint.setTextAlign(Align.CENTER);  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,"A") + mYAxis.getYOffset();  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float yPos=0f;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yoffset=Utils.convertDpToPixel(3f);      yPos=mViewPortHandler.contentTop();    } else {      yoffset=yoffset * -1f;      yPos=mViewPortHandler.contentTop();    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yoffset=yoffset * -1f;      yPos=mViewPortHandler.contentBottom();    } else {      yoffset=Utils.convertDpToPixel(4f);      yPos=mViewPortHandler.contentBottom();    }  }  drawYLabels(c,yPos,positions,yoffset);}  }
class C{  public String bracketSentenceIfNecessary(Connective parentConnective,Sentence childSentence){  String result=null;  if (childSentence instanceof ComplexSentence) {    ComplexSentence cs=(ComplexSentence)childSentence;    if (cs.getConnective().getPrecedence() < parentConnective.getPrecedence()) {      result="(" + childSentence + ")";    }  }  if (result == null) {    result=childSentence.toString();  }  return result;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public XYMultipleSeriesRenderer(){  this(1);}  }
class C{  private SimpleObject searchInner(RequestContext requestContext) throws ResponseException {  String query=requestContext.getParameter("q");  List<Provider> filteredProviders=new ArrayList<>();  for (  Provider provider : providerService.getAllProviders(false)) {    if (StringUtils.containsIgnoreCase(provider.getName(),query)) {      filteredProviders.add(provider);    }  }  addGuestIfNotPresent(filteredProviders);  return getSimpleObjectWithResults(filteredProviders);}  }
class C{  public boolean isAsterisk(){  return asterisk;}  }
class C{  public XTIFFTileCodec create(){  return new XTIFFLZWTileCodec();}  }
class C{  public ThumbnailParameterBuilder size(int width,int height){  if (width < 0) {    throw new IllegalArgumentException("Width must be greater than 0.");  }  if (height < 0) {    throw new IllegalArgumentException("Height must be greater than 0.");  }  this.width=width;  this.height=height;  return this;}  }
class C{  public final static OutputAnalyzer jcmdNoPid(String[] vmArgs,String[] jcmdArgs) throws Exception {  return jcmd(false,vmArgs,jcmdArgs);}  }
class C{  private static boolean equal(Object o1,Object o2){  return ((o1 == null || o2 == null) ? (o1 == o2) : o1.equals(o2));}  }
class C{  public Promise<T> timeout(long timeout,TimeUnit timeUnit,Promise<T> fallback){  return new Promise<T>(observable.timeout(timeout,timeUnit,fallback.observable));}  }
class C{  public static byte[] toBytes(long val){  return Longs.toByteArray(val);}  }
class C{  private void copyFileToOverwrite() throws IOException {  File fileNew=new File(file.getParent(),SourceBase.normaliseName(file.getName()) + "-copied.tmp");  FileUtils.copyFile(file,fileNew);  session.put(Constants.SESSION_FILE,fileNew);  session.put(Constants.SESSION_FILE_NAME,fileFileName);  session.put(Constants.SESSION_FILE_CONTENT_TYPE,fileContentType);}  }
class C{  public boolean canEvictFromArchive(Eviction eviction){  if ((getSpaceUsagePercentage() > eviction.getMaxDiskUsage()))   return true;  return false;}  }
class C{  public void mountSnapShot() throws BackupException {  logger.debug("Mounting snapshot: " + this.snapshotName);  processHelper.exec("Mounting the snapshot",mountCmd);  validateStorage("database storage directory from snapshot",snapshotDataDirSpec);}  }
class C{  public mat4 rotate(float x,float y,float z){  mat4_util_inplace_rotate(this.m,x,y,z);  return this;}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  return (((Color)obj).getRGB() == this.getRGB());}  }
class C{  public PolicyInformationTableModel(){  columnNames=new String[1];  columnNames[0]=res.getString("PolicyInformationTableModel.PolicyInformationColumn");  data=new Object[0][0];}  }
class C{  public static Document newDocument() throws ParserConfigurationException, FactoryConfigurationError {  if (docBuilder == null) {    docBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();  }  return docBuilder.newDocument();}  }
class C{  public boolean isError(final OneDriveErrorCodes expectedCode){  return mErrorCode == expectedCode;}  }
class C{  private boolean isStarted(){  try {    try (Socket sock=new Socket()){      URI url=new URI(uri.toString());      int timeout=500;      InetAddress addr=InetAddress.getByName(url.getHost());      SocketAddress sockAddr=new InetSocketAddress(addr,url.getPort());      sock.connect(sockAddr,timeout);    }   } catch (  Exception e) {    return false;  }  return true;}  }
class C{  static Double readReal(final byte[] data,final int offset){  final int l=data.length;  int j=offset;  int end=-1;  while (j < l && end == -1) {    if (checkForString(data,j,DEF_CHARS) || data[j] == ']' || data[j] == '\n') {      end=j;    }    j++;  }  String val=new String(data,offset,end - offset);  if (val.contains("[")) {    final String[] stringParts=val.split("\\[");    if (stringParts.length < 2) {      return null;    }    val=stringParts[1];  }  try {    return Double.parseDouble(val);  } catch (  final NumberFormatException e) {    LogWriter.writeLog("Exception in handling real in Type1 " + e);    return null;  }}  }
class C{  public boolean verifyKey(){  return verifyKey(getApiKey(),getDomainName());}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null)   return false;  if (this.getClass() != obj.getClass())   return false;  NSNumber n=(NSNumber)obj;  return type == n.type && longValue == n.longValue && doubleValue == n.doubleValue && boolValue == n.boolValue;}  }
class C{  public void annotationRemoved(Annotation annotation,Position position){  removedAnnotations.put(annotation,position);}  }
class C{  public synchronized void renderDataForProjection(Projection proj,java.awt.Graphics g){  if (proj == null) {    Debug.error("GraticuleLayer.renderDataForProjection: null projection!");    return;  } else   if (!proj.equals(getProjection())) {    setProjection(proj.makeClone());    if (proj instanceof Cylindrical)     boxy=true; else     boxy=false;    setList(constructGraticuleLines());  }  paint(g);}  }
class C{  @Override public Object execute(final ExecutionEvent event) throws ExecutionException {  GAMA.getGui().openWelcomePage(false);  return null;}  }
class C{  private void assertNodeEmptinessAfterManipulation(SoapMessageImpl query,boolean clientSide,String elementName,boolean keepBody) throws Exception {  String loggableMessage=new TestableSoapMessageBodyManipulator(keepBody).getLoggableMessageText(query,clientSide);  log.debug("loggable message with body" + (keepBody ? " intact: " : " removed: ") + loggableMessage);  Node body=getSingleNodeFromXml(loggableMessage,elementName);  assertTrue(isEmptyNode(body) != keepBody);}  }
class C{  @SuppressWarnings("StringEquality") public static boolean compare(final String me,final String you){  if (me == you) {    return true;  }  if (me == null) {    return false;  }  return me.equals(you);}  }
class C{  public CombinedSmallContingencyTable buildCombinedSmallContingencyTable(){  double[][] combinedMatrix=new double[2][2];  for (int x=0; x < smallContingencyTables.length; x++) {    for (int y=0; y < 2; y++) {      for (int z=0; z < 2; z++) {        combinedMatrix[y][z]+=smallContingencyTables[x][y][z];      }    }  }  return new CombinedSmallContingencyTable(combinedMatrix);}  }
class C{  public boolean popDirname(){  mDirectories.remove(mDirectories.getItem(0));  return !mDirectories.isEmpty();}  }
class C{  public void printOperator(Vertex equation,Writer writer,String indent,List<Vertex> equations,List<Vertex> variables,Set<Vertex> elements,Network network) throws IOException {  printComments(equation,writer,indent + "\t",true,network);  Vertex operator=equation.getRelationship(Primitive.OPERATOR);  if (operator == null) {    return;  }  if (operator.is(Primitive.RELATION)) {    writer.write("is");  } else   if (operator.is(Primitive.WEAKASSOCIATE)) {    writer.write("weak associate");  } else {    writer.write(((Primitive)operator.getData()).getIdentity());  }  if (equation.hasRelationship(Primitive.NOT,Primitive.NOT)) {    writer.write(" not");  }  if (operator.is(Primitive.ASSIGN)) {    String[] tokens={"to"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.DEFINE)) {    String[] tokens={"as"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.GET)) {    String[] tokens={"from","associated to","by"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);    Collection<Relationship> index=equation.getRelationships(Primitive.INDEX);    if (index != null) {      writer.write(" at");      printArguments(equation,Primitive.INDEX,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }    Collection<Relationship> lastindex=equation.getRelationships(Primitive.LASTINDEX);    if (lastindex != null) {      writer.write(" at last");      printArguments(equation,Primitive.LASTINDEX,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }  } else   if (operator.is(Primitive.INPUT)) {    String[] tokens={"for"};    if (equation.getRelationships(Primitive.ARGUMENT).size() == 3) {      tokens=new String[]{"part","for"};    }    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.ALL)) {    String[] tokens={"from","associated to","by"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.COUNT)) {    String[] tokens={"of"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.APPEND)) {    String[] tokens={"to","of","with meta","as"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.ASSOCIATE) || operator.is(Primitive.DISSOCIATE) || operator.is(Primitive.WEAKASSOCIATE)) {    String[] tokens={"to","by","with meta","as"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.SET)) {    String[] tokens={"to","on"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.RELATION)) {    String[] tokens={"related to","by"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.RELATED)) {    writer.write(" to ");    String[] tokens={"by"};    printArguments(equation,Primitive.ARGUMENT,tokens,false,false,false,writer,indent,variables,equations,elements,true,network);  } else   if (operator.is(Primitive.WHILE)) {    printArguments(equation,Primitive.ARGUMENT,null,false,false,false,writer,indent,variables,equations,elements,true,network);    Collection<Relationship> dos=equation.orderedRelationships(Primitive.DO);    if (dos != null) {      String newIndent=indent + "\t";      writer.write("\r\n");      writer.write(newIndent);      writer.write("\tdo");      printArguments(equation,Primitive.DO,null,false,true,false,writer,newIndent,variables,equations,elements,true,network);    }  } else   if (operator.is(Primitive.FOR)) {    writer.write(" each ");    List<Relationship> arguments=equation.orderedRelationships(Primitive.ARGUMENT);    printElement(arguments.get(0).getTarget(),writer,indent,equations,variables,elements,network);    writer.write(" of ");    printElement(arguments.get(1).getTarget(),writer,indent,equations,variables,elements,network);    writer.write(" as ");    printElement(arguments.get(2).getTarget(),writer,indent,equations,variables,elements,network);    int index=3;    if (arguments.size() > index) {      writer.write(" and each ");      printElement(arguments.get(index++).getTarget(),writer,indent,equations,variables,elements,network);      writer.write(" of ");      printElement(arguments.get(index++).getTarget(),writer,indent,equations,variables,elements,network);      writer.write(" as ");      printElement(arguments.get(index++).getTarget(),writer,indent,equations,variables,elements,network);    }    Collection<Relationship> dos=equation.orderedRelationships(Primitive.DO);    if (dos != null) {      String newIndent=indent + "\t";      writer.write("\r\n");      writer.write(newIndent);      writer.write("\tdo");      printArguments(equation,Primitive.DO,null,false,true,false,writer,newIndent,variables,equations,elements,true,network);    }  } else   if (operator.is(Primitive.CALL)) {    List<Relationship> arguments=equation.orderedRelationships(Primitive.ARGUMENT);    writer.write(" ");    printElement(arguments.get(0).getTarget(),writer,indent,equations,variables,elements,network);    writer.write(" on ");    printElement(arguments.get(1).getTarget(),writer,indent,equations,variables,elements,network);    if (arguments.size() > 2) {      writer.write(" with (");      for (int index=2; index < arguments.size(); index++) {        printElement(arguments.get(index).getTarget(),writer,indent,equations,variables,elements,network);        if (index == (arguments.size() - 1)) {          writer.write(")");        } else {          writer.write(", ");        }      }    }  } else   if (operator.is(Primitive.LEARN)) {    List<Relationship> arguments=equation.orderedRelationships(Primitive.ARGUMENT);    writer.write(" ");    printElement(arguments.get(0).getTarget(),writer,indent,equations,variables,elements,network);    Collection<Relationship> that=equation.orderedRelationships(Primitive.THAT);    if (that != null) {      String newIndent=indent + "\t";      writer.write("\r\n");      writer.write(newIndent);      writer.write("\tthat");      printArguments(equation,Primitive.THAT,null,false,false,false,writer,newIndent,variables,equations,elements,true,network);    }    Collection<Relationship> topic=equation.orderedRelationships(Primitive.TOPIC);    if (topic != null) {      String newIndent=indent + "\t";      writer.write("\r\n");      writer.write(newIndent);      writer.write("\ttopic");      printArguments(equation,Primitive.TOPIC,null,false,false,false,writer,newIndent,variables,equations,elements,true,network);    }    String newIndent=indent + "\t";    writer.write("\r\n");    writer.write(newIndent);    writer.write("\ttemplate ");    printElement(arguments.get(1).getTarget(),writer,newIndent,equations,variables,elements,network);  } else   if (operator.is(Primitive.IF)) {    printArguments(equation,Primitive.ARGUMENT,null,false,(operator.is(Primitive.DO)),false,writer,indent,variables,equations,elements,true,network);    Collection<Relationship> conditions=equation.orderedRelationships(Primitive.CONDITION);    if (conditions != null) {      for (      Relationship condition : conditions) {        writer.write(" ");        printOperator(condition.getTarget(),writer,indent,equations,variables,elements,network);      }    }    Collection<Relationship> thens=equation.orderedRelationships(Primitive.THEN);    if (thens != null) {      String newIndent=indent + "\t";      writer.write("\r\n");      writer.write(newIndent);      writer.write("\tthen");      printArguments(equation,Primitive.THEN,null,false,false,false,writer,newIndent,variables,equations,elements,true,network);    }    Collection<Relationship> elses=equation.orderedRelationships(Primitive.ELSE);    if (elses != null) {      String newIndent=indent + "\t";      writer.write("\r\n");      writer.write(newIndent);      writer.write("\telse");      printArguments(equation,Primitive.ELSE,null,false,false,false,writer,newIndent,variables,equations,elements,true,network);    }  } else   if (operator.is(Primitive.REQUEST) || operator.is(Primitive.SRAIX)) {    printArguments(equation,Primitive.ARGUMENT,null,false,(operator.is(Primitive.DO)),false,writer,indent,variables,equations,elements,true,network);    Collection<Relationship> param=equation.orderedRelationships(Primitive.BOT);    if (param != null) {      writer.write(" bot");      printArguments(equation,Primitive.BOT,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }    param=equation.orderedRelationships(Primitive.BOTID);    if (param != null) {      writer.write(" botid");      printArguments(equation,Primitive.BOTID,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }    param=equation.orderedRelationships(Primitive.SERVICE);    if (param != null) {      writer.write(" service");      printArguments(equation,Primitive.SERVICE,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }    param=equation.orderedRelationships(Primitive.SERVER);    if (param != null) {      writer.write(" server");      printArguments(equation,Primitive.SERVER,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }    param=equation.orderedRelationships(Primitive.APIKEY);    if (param != null) {      writer.write(" apikey");      printArguments(equation,Primitive.APIKEY,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }    param=equation.orderedRelationships(Primitive.LIMIT);    if (param != null) {      writer.write(" limit");      printArguments(equation,Primitive.LIMIT,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }    param=equation.orderedRelationships(Primitive.HINT);    if (param != null) {      writer.write(" hint");      printArguments(equation,Primitive.HINT,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }    param=equation.orderedRelationships(Primitive.DEFAULT);    if (param != null) {      writer.write(" default");      printArguments(equation,Primitive.DEFAULT,null,false,false,false,writer,indent,variables,equations,elements,true,network);    }  } else {    Collection<Relationship> conditions=equation.orderedRelationships(Primitive.CONDITION);    if (conditions != null) {      writer.write(" (");    }    printArguments(equation,Primitive.ARGUMENT,null,false,(operator.is(Primitive.DO)),false,writer,indent,variables,equations,elements,conditions == null,network);    if (conditions != null) {      for (      Relationship condition : conditions) {        writer.write(" ");        printOperator(condition.getTarget(),writer,indent,equations,variables,elements,network);      }      writer.write(")");    }    if (operator.is(Primitive.FORMAT)) {      Collection<Relationship> as=equation.orderedRelationships(Primitive.AS);      if (as != null) {        writer.write(" as ");        printArguments(equation,Primitive.AS,null,false,false,false,writer,indent,variables,equations,elements,true,network);      }    }  }}  }
class C{  public void testScrollToCommand() throws Exception {  HorizontalScrollView scrollView=getViewAtPath(0);  ScrollViewTestModule jsModule=getReactContext().getCatalystInstance().getJSModule(ScrollViewTestModule.class);  assertEquals(0,scrollView.getScrollX());  jsModule.scrollTo(300,0);  waitForBridgeAndUIIdle();  getInstrumentation().waitForIdleSync();  long timeout=10000;  long interval=50;  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < timeout) {    if (scrollView.getScrollX() > 0) {      break;    }    Thread.sleep(interval);  }  assertNotSame(0,scrollView.getScrollX());}  }
class C{  public static <E>ImmutableList<E> copyOf(Iterator<? extends E> elements){  if (!elements.hasNext()) {    return of();  }  E first=elements.next();  if (!elements.hasNext()) {    return of(first);  } else {    return new ImmutableList.Builder<E>().add(first).addAll(elements).build();  }}  }
class C{  private static Status spawnStatus(String status,String substatus,String message){  StatusCode statusCodeElement=create(StatusCode.class,StatusCode.DEFAULT_ELEMENT_NAME);  statusCodeElement.setValue(status);  if (substatus != null) {    StatusCode statusCodeElement2=create(StatusCode.class,StatusCode.DEFAULT_ELEMENT_NAME);    statusCodeElement2.setValue(substatus);    statusCodeElement.setStatusCode(statusCodeElement2);  }  Status samlStatus=create(Status.class,Status.DEFAULT_ELEMENT_NAME);  samlStatus.setStatusCode(statusCodeElement);  if (message != null) {    StatusMessage statusMessage=create(StatusMessage.class,StatusMessage.DEFAULT_ELEMENT_NAME);    statusMessage.setMessage(message);    samlStatus.setStatusMessage(statusMessage);  }  return samlStatus;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  protected ComposedContentImpl(){  super();}  }
class C{  public boolean isPathAttributeSpecified(){  return hasPathAttribute;}  }
class C{  public boolean isConnectEnabled(){  return connectEnabled;}  }
class C{  public table removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @InService(TableWriterService.class) public void writeBlobPage(PageBlob page,int saveSequence,Result<Integer> result){  SegmentStream sOut=getBlobStream();  int saveLength=0;  int saveTail=0;  if (_blobSizeMax < page.getLength()) {    _blobSizeMax=page.getLength();    calculateSegmentSize();  }  sOut.writePage(this,page,saveLength,saveTail,saveSequence,result);  _isBlobDirty=true;}  }
class C{  public SDSageSession(String username,String password) throws IOException, SDException {  super(username,password);  authenticate();}  }
class C{  @Override public String toString(){  return this.sb.toString();}  }
class C{  private void startUp(boolean dfltGridName,boolean dfltIgfsName) throws Exception {  Ignite ignite=G.start(gridConfiguration(dfltGridName,dfltIgfsName));  IgniteFileSystem igfs=ignite.fileSystem(dfltIgfsName ? null : IGFS_NAME);  igfs.mkdirs(PATH);}  }
class C{  static non_terminal create_new() throws internal_error {  return create_new(null);}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public final short decrementAndGet(int index){  return this.addAndGet(index,(short)-1);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + ((expr != null) ? expr.costInline(thresh,env,ctx) : 0);}  }
class C{  public NameSpace swap(NameSpace newTop){  NameSpace oldTop=(NameSpace)(stack.elementAt(0));  stack.setElementAt(newTop,0);  return oldTop;}  }
class C{  public boolean configFileExists(String collection,String fileName) throws KeeperException, InterruptedException {  Stat stat=zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + "/" + collection+ "/"+ fileName,null,true);  return stat != null;}  }
class C{  public static URL makeURL(Object path,String defaultProtocol){  try {    URL url=makeURL(path);    if (url == null && !WWUtil.isEmpty(path.toString()) && !WWUtil.isEmpty(defaultProtocol))     url=new URL(defaultProtocol,null,path.toString());    return url;  } catch (  Exception e) {    return null;  }}  }
class C{  public RegularTimePeriod createInstance(Date millisecond,TimeZone zone,Locale locale){  RegularTimePeriod result=null;  try {    Constructor c=this.periodClass.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class,Locale.class});    result=(RegularTimePeriod)c.newInstance(new Object[]{millisecond,zone,locale});  } catch (  Exception e) {  }  return result;}  }
class C{  void _m23(float m23){  this.m23=m23;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFlowRegionExcludeElement(prefix,(AbstractDocument)doc);}  }
class C{  public MacroValue(MacroHandler handler){  super("process.macro",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS);  this.handler=handler;}  }
class C{  @Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){  if (!isCurrentlyLoading) {    return;  }  LOG.d(TAG,"CordovaWebViewClient.onReceivedError: Error code=%s Description=%s URL=%s",errorCode,description,failingUrl);  if (errorCode == WebViewClient.ERROR_UNSUPPORTED_SCHEME) {    parentEngine.client.clearLoadTimeoutTimer();    if (view.canGoBack()) {      view.goBack();      return;    } else {      super.onReceivedError(view,errorCode,description,failingUrl);    }  }  parentEngine.client.onReceivedError(errorCode,description,failingUrl);}  }
class C{  private void includeRole(MRole role,int seqNo){  if (this.getAD_Role_ID() == role.getAD_Role_ID()) {    return;  }  if (this.m_includedRoles == null) {    m_includedRoles=new ArrayList<MRole>();  }  for (  MRole r : this.m_includedRoles) {    if (r.getAD_Role_ID() == role.getAD_Role_ID()) {      return;    }  }  System.out.println("Include " + role);  this.m_includedRoles.add(role);  role.setParentRole(this);  role.m_includedSeqNo=seqNo;}  }
class C{  static public String generateOTP(byte[] secret,long movingFactor,int codeDigits,boolean addChecksum,int truncationOffset) throws NoSuchAlgorithmException, InvalidKeyException {  final byte[] text=new byte[8];  for (int i=text.length - 1; i >= 0; i--) {    text[i]=(byte)(movingFactor & 0xff);    movingFactor>>=8;  }  return generateOTPFromText(secret,text,codeDigits,addChecksum,truncationOffset);}  }
class C{  private void parseTrailerHeaders() throws IOException {  try {    this.footers=AbstractMessageParser.parseHeaders(in,-1,-1,null);  } catch (  HttpException e) {    IOException ioe=new MalformedChunkCodingException("Invalid footer: " + e.getMessage());    ExceptionUtils.initCause(ioe,e);    throw ioe;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.748 -0500",hash_original_method="6050D9FBC779B270404C43A7E853C1E6",hash_generated_method="378352F37398678C80BFD1E7AD99170C") @Override public void onStop(){  super.onStop();  getContext().unregisterReceiver(mConfChangeListener);  mLaunchComponent=null;  mAppSearchData=null;  mSearchable=null;  mUserQuery=null;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 180) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public final double dot(Vec4 p){  if (p == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.n.x * p.x + this.n.y * p.y + this.n.z * p.z + this.n.w * p.w;}  }
class C{  public void endClass(long where,ClassDefinition c){  if (tracing)   toplevelEnv.dtEnter("endClass: " + sourceClass);  sourceClass.setEndPosition(where);  SourceClass outerClass=(SourceClass)sourceClass.getOuterClass();  sourceClass=outerClass;  env=toplevelEnv;  if (sourceClass != null)   env=new Environment(env,sourceClass);  if (tracing)   toplevelEnv.dtExit("endClass: " + sourceClass);}  }
class C{  public static <T extends Enum<T>>List<T> convertList(List<? extends Enum<?>> values,Class<T> targetClass){  List<T> list=new ArrayList<T>();  if (values == null) {    return null;  }  for (  Enum<?> e : values) {    T result=convert(e,targetClass);    if (result != null) {      list.add(result);    }  }  return list;}  }
class C{  public double norm1(){  double f=0;  for (int j=0; j < n; j++) {    double s=0;    for (int i=0; i < m; i++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public T campaignSource(String value){  setString(CAMPAIGN_SOURCE,value);  return (T)this;}  }
class C{  @Override public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){  super.dump(prefix,fd,writer,args);  writer.print(prefix);  writer.print("rawQuery=");  writer.println(rawQuery);  writer.print(prefix);  writer.print("args=");  writer.println(Arrays.toString(args));}  }
class C{  public void testJoinOnDelimiter(){  List<String> toBeJoined=new ArrayList<String>();  toBeJoined.add("First Item");  toBeJoined.add("Second Item");  char delimiter=':';  String joinedProperty=ComplexPropertyUtils.joinOnDelimiter(toBeJoined,delimiter);  assertEquals("First Item:Second Item",joinedProperty);}  }
class C{  public Script parse(File file) throws CompilationFailedException, IOException {  return parse(new GroovyCodeSource(file,config.getSourceEncoding()));}  }
class C{  public void kill(){  cleanupAsynchronous();  schedule.clear();  schedule.seal();}  }
class C{  public SubInlineMenuBuilder subMenu(){  SubInlineMenuBuilder sub=new SubInlineMenuBuilder(this);  sub.userPredicate=userPredicate;  return sub;}  }
class C{  public void applyAll(Process process,Map<String,String> nameTranslation){  Iterator<ParameterValue> i=parameterValues.iterator();  while (i.hasNext()) {    i.next().apply(process,nameTranslation);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthTextFieldUI();}  }
class C{  public void appendItemToService(int service,EcuDataItem newItem){  HashMap<Integer,Vector<EcuDataItem>> currSvc=get(service);  if (currSvc == null) {    currSvc=new HashMap<Integer,Vector<EcuDataItem>>();    log.debug("+SVC: " + service + " - "+ currSvc);  }  Vector<EcuDataItem> currVec=currSvc.get(newItem.pid);  if (currVec == null) {    currVec=new Vector<EcuDataItem>();    log.debug("+PID: " + newItem.pid + " - "+ currVec);  }  currVec.add(newItem);  currSvc.put(newItem.pid,currVec);  put(service,currSvc);  log.debug("+" + service + "/"+ String.format("0x%02X",newItem.pid)+ " - "+ currVec);}  }
class C{  public static boolean isValidMediaType(final String mediaType){  return (mediaType != null) && MEDIA_TYPES.values().contains(mediaType.toLowerCase());}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  public void remove() throws UnsupportedOperationException {  throw new UnsupportedOperationException("Removing headers is not supported.");}  }
class C{  public EdgeListGraphSingleConnections(){  edgeLists=new ConcurrentHashMap<>();  nodes=new ArrayList<>();  edgesSet=new HashSet<>();}  }
class C{  public synchronized boolean removeElement(Object object){  int index;  if ((index=indexOf(object,0)) == -1) {    return false;  }  removeElementAt(index);  return true;}  }
class C{  @Override protected int capacity(){  return _values.length;}  }
class C{  public Boolean isRotation(){  return rotation;}  }
class C{  public void testNextDouble(){  double f=ThreadLocalRandom.current().nextDouble();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextDouble() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public static void invokeClassInitializer(CodeArray clinit) throws Exception {  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  throw new Exception("UNREACHED");}  }
class C{  public EqualsOp_ createEqualsOp_(){  EqualsOp_Impl equalsOp_=new EqualsOp_Impl();  return equalsOp_;}  }
class C{  public void finishAllActivities(){  if (mActivityStack == null)   return;  for (  Activity activity : mActivityStack) {    if (null != activity)     finishActivity(activity);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (abstract_1: ");  result.append(abstract_1);  result.append(')');  return result.toString();}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public static void addPedigreeFields(VcfHeader vcf,GenomeRelationships pedigree){  addPedigreeFields(vcf,pedigree,pedigree.filterByGenomes(new GenomeRelationships.PrimaryGenomeFilter(pedigree)).genomes());}  }
class C{  private void refreshAll(){  if (ce() == null) {    return;  }  clientgui.bv.redrawEntity(ce());  clientgui.mechD.displayEntity(ce());  clientgui.mechD.showPanel("weapons");  clientgui.mechD.wPan.selectFirstWeapon();  updateTarget();}  }
class C{  public void add(Modulo2Equation equation){  if (equation.bitVector.length() != numVars)   throw new IllegalArgumentException("The number of variables in the equation (" + equation.bitVector.length() + ") does not match the number of variables of the system ("+ numVars+ ")");  equations.add(equation);}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public boolean hasRoadRestrictions(){  List<Track> tracks=getTrackList();  for (  Track track : tracks) {    if (!track.getRoadOption().equals(Track.ALL_ROADS)) {      return true;    }  }  return false;}  }
class C{  public static void checkNull(Object o,String msg){  if (o != null)   error(msg);}  }
class C{  public static void main(String[] args){  TestEnclosingClass tester=new TestEnclosingClass();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private void addLine(int AD_Column_ID,Timestamp Updated,int UpdatedBy,String OldValue,String NewValue){  Vector<String> line=new Vector<String>();  MColumn column=MColumn.get(Env.getCtx(),AD_Column_ID);  line.add(Msg.translate(Env.getCtx(),column.getColumnName()));  if (OldValue != null && OldValue.equals(MChangeLog.NULL))   OldValue=null;  String showOldValue=OldValue;  if (NewValue != null && NewValue.equals(MChangeLog.NULL))   NewValue=null;  String showNewValue=NewValue;  try {    if (DisplayType.isText(column.getAD_Reference_ID()))     ; else     if (column.getAD_Reference_ID() == DisplayType.YesNo) {      if (OldValue != null) {        boolean yes=OldValue.equals("true") || OldValue.equals("Y");        showOldValue=Msg.getMsg(Env.getCtx(),yes ? "Y" : "N");      }      if (NewValue != null) {        boolean yes=NewValue.equals("true") || NewValue.equals("Y");        showNewValue=Msg.getMsg(Env.getCtx(),yes ? "Y" : "N");      }    } else     if (column.getAD_Reference_ID() == DisplayType.Amount) {      if (OldValue != null)       showOldValue=m_amtFormat.format(new BigDecimal(OldValue));      if (NewValue != null)       showNewValue=m_amtFormat.format(new BigDecimal(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.Integer) {      if (OldValue != null)       showOldValue=m_intFormat.format(new Integer(OldValue));      if (NewValue != null)       showNewValue=m_intFormat.format(new Integer(NewValue));    } else     if (DisplayType.isNumeric(column.getAD_Reference_ID())) {      if (OldValue != null)       showOldValue=m_numberFormat.format(new BigDecimal(OldValue));      if (NewValue != null)       showNewValue=m_numberFormat.format(new BigDecimal(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.Date) {      if (OldValue != null)       showOldValue=m_dateFormat.format(Timestamp.valueOf(OldValue));      if (NewValue != null)       showNewValue=m_dateFormat.format(Timestamp.valueOf(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.DateTime) {      if (OldValue != null)       showOldValue=m_dateTimeFormat.format(Timestamp.valueOf(OldValue));      if (NewValue != null)       showNewValue=m_dateTimeFormat.format(Timestamp.valueOf(NewValue));    } else     if (DisplayType.isLookup(column.getAD_Reference_ID())) {      MLookup lookup=MLookupFactory.get(Env.getCtx(),0,AD_Column_ID,column.getAD_Reference_ID(),Env.getLanguage(Env.getCtx()),column.getColumnName(),column.getAD_Reference_Value_ID(),column.isParent(),null);      if (OldValue != null) {        Object key=OldValue;        NamePair pp=lookup.get(key);        if (pp != null)         showOldValue=pp.getName();      }      if (NewValue != null) {        Object key=NewValue;        NamePair pp=lookup.get(key);        if (pp != null)         showNewValue=pp.getName();      }    } else     if (DisplayType.isLOB(column.getAD_Reference_ID()))     ;  } catch (  Exception e) {    log.log(Level.WARNING,OldValue + "->" + NewValue,e);  }  line.add(showNewValue);  line.add(showOldValue);  MUser user=MUser.get(Env.getCtx(),UpdatedBy);  line.add(user.getName());  line.add(m_dateFormat.format(Updated));  line.add(column.getColumnName());  m_data.add(line);}  }
class C{  public ProductServiceImpl(final GenericDAO<Product,Long> productDao,final GenericDAO<ProductSku,Long> productSkuDao,final ProductSkuService productSkuService,final ProductTypeAttrService productTypeAttrService,final AttributeService attributeService,final GenericDAO<ProductCategory,Long> productCategoryDao,final GenericDAO<ProductTypeAttr,Long> productTypeAttrDao,final ShopCategoryRelationshipSupport shopCategoryRelationshipSupport){  super(productDao);  this.productDao=productDao;  this.productSkuDao=productSkuDao;  this.productSkuService=productSkuService;  this.productTypeAttrService=productTypeAttrService;  this.attributeService=attributeService;  this.productCategoryDao=productCategoryDao;  this.productTypeAttrDao=productTypeAttrDao;  this.shopCategoryRelationshipSupport=shopCategoryRelationshipSupport;  rand=new Random();  rand.setSeed((new Date().getTime()));}  }
class C{  public Object visit(ASTOrNode node,Object data){  return showNode(node,data);}  }
class C{  public boolean execute(IRequestProcessor requestProcessor,IEventSender eventManager,ICvsListenerRegistry listenerRegistry,IClientEnvironment clientEnvironment,IProgressViewer progressViewer) throws CommandException, AuthenticationException {  checkState();  final ICvsFiles cvsFiles;  try {    cvsFiles=scanFileSystem(clientEnvironment);  } catch (  IOException ex) {    throw new IOCommandException(ex);  }  final Requests requests=new Requests(getWatchMode().getCommand(),clientEnvironment);  addFileRequests(cvsFiles,requests,clientEnvironment);  if (getWatchMode().isWatchOptionAllowed()) {    final String[] arguments=getWatchNotNull().getArguments();    for (int i=0; i < arguments.length; i++) {      requests.addArgumentRequest("-a");      requests.addArgumentRequest(arguments[i]);    }  }  requests.addLocalPathDirectoryRequest();  addArgumentRequests(requests);  return requestProcessor.processRequests(requests,FileStateRequestsProgressHandler.create(progressViewer,cvsFiles));}  }
class C{  public static Instances mergeLabels(Instances D,int j,int k,int p){  int L=D.classIndex();  HashMap<String,Integer> count=new HashMap<String,Integer>();  Set<String> values=new HashSet<String>();  for (int i=0; i < D.numInstances(); i++) {    String v=encodeValue(D.instance(i).stringValue(j),D.instance(i).stringValue(k));    String w="" + (int)D.instance(i).value(j) + (int)D.instance(i).value(k);    count.put(v,count.containsKey(v) ? count.get(v) + 1 : 1);    values.add(encodeValue(D.instance(i).stringValue(j),D.instance(i).stringValue(k)));  }  System.out.print("pruned from " + count.size() + " to ");  MLUtils.pruneCountHashMap(count,p);  String y_max=(String)MLUtils.argmax(count);  System.out.println("" + count.size() + " with p = "+ p);  System.out.println("" + count);  values=count.keySet();  D.insertAttributeAt(new Attribute(encodeClass(D.attribute(j).name(),D.attribute(k).name()),new ArrayList(values)),L);  for (int i=0; i < D.numInstances(); i++) {    Instance x=D.instance(i);    String y_jk=encodeValue(x.stringValue(j),x.stringValue(k));    try {      x.setValue(L,y_jk);    } catch (    Exception e) {      String y_close[]=getNeighbours(y_jk,count,1);      int max_c=0;      for (      String y_ : y_close) {        int c=count.get(y_);        if (c > max_c) {          max_c=c;          y_max=y_;        }      }      x.setValue(L,y_max);    }  }  D.deleteAttributeAt(k > j ? k : j);  D.deleteAttributeAt(k > j ? j : k);  D.setClassIndex(L - 1);  return D;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.SHIFT_EXPRESSION;}  }
class C{  public static boolean isLowerCaseLetter(int c){  return (c >= 97 && c <= 122);}  }
class C{  int registerHit(){  return hits.incrementAndGet();}  }
class C{  public XML11ConfigurationMMImpl(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public boolean arrowScroll(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getMaxScrollAmount();  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused,maxJump)) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);    doScrollX(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_LEFT && getScrollX() < scrollDelta) {      scrollDelta=getScrollX();    } else     if (direction == View.FOCUS_RIGHT && getChildCount() > 0) {      int daRight=getChildAt(0).getRight();      int screenRight=getScrollX() + getWidth();      if (daRight - screenRight < maxJump) {        scrollDelta=daRight - screenRight;      }    }    if (scrollDelta == 0) {      return false;    }    doScrollX(direction == View.FOCUS_RIGHT ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  public boolean undo(){  boolean canUndo=undoManager.canUndo();  if (canUndo) {    undoManager.undo();    canUndo=undoManager.canUndo();  } else {    UIManager.getLookAndFeel().provideErrorFeedback(editor);  }  return canUndo;}  }
class C{  public void removeAllShowListeners(){  if (showListener != null) {    showListener.getListenerCollection().clear();    showListener=null;  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SDECLARATION;}  }
class C{  private static <K,V>boolean colorOf(BalancedBinaryNode<K,V> p){  return (p == null ? BalancedBinaryNode.BLACK : p.color);}  }
class C{  public String toString(){  return "Split" + "{ ntuples=" + ntuples + ", fromIndex="+ fromIndex+ ", toIndex="+ toIndex+ ", pmd="+ pmd+ "}";}  }
class C{  public boolean isIdle(){  return spdyConnection == null || spdyConnection.isIdle();}  }
class C{  public BeautyEyeLookAndFeelCross(){  super();  UIManager.put("swing.boldMetal",Boolean.FALSE);  UIManager.put("TabbedPane.contentOpaque",Boolean.FALSE);  UIManager.put("TabbedPane.tabsOpaque",Boolean.FALSE);  BeautyEyeLNFHelper.implLNF();  org.jb2011.lnf.beautyeye.ch20_filechooser.__UI__.uiImpl_cross();}  }
class C{  public E pop(){  return elements.remove(elements.size() - 1);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void adjustGameStatusLabel(){  if (userMadeAdjustment || variationMode) {    if (getGame().getMoveList().getSize() > 0) {      Move lastMove=getGame().getMoveList().get(getGame().getMoveList().getSize() - 1);      int moveNumber=getGame().getFullMoveCount();      board.getStatusLabel().setText("Last Move: " + moveNumber + ") "+ (lastMove.isWhitesMove() ? "" : "... ")+ GameUtils.convertSanToUseUnicode(lastMove.toString(),!getGame().isWhitesMove()));    } else {      board.getStatusLabel().setText("");    }  } else {    String result=getGame().getHeader(PgnHeader.ResultDescription);    if (result != null) {      board.getStatusLabel().setText(result);    }  }}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public E peek(){  return (status == DequeStatus.Empty) ? null : elements[front];}  }
class C{  public EpsilonBoxDominanceArchive(EpsilonBoxDominanceComparator comparator,Iterable<? extends Solution> iterable){  super(comparator,iterable);}  }
class C{  public void create(View view){  DomainConfig instance=new DomainConfig();  saveProperties(instance);  Spinner spin=(Spinner)findViewById(R.id.creationModeSpin);  instance.creationMode=(String)spin.getSelectedItem();  HttpAction action=new HttpCreateAction(this,instance);  action.execute();}  }
class C{  public static void showHelp(String helpindex){  if (getHelpBroker() == null) {    return;  }  try {    getHelpBroker().showID(helpindex,"javax.help.SecondaryWindow",null);  } catch (  Exception e) {    logger.error("error loading help with index: " + helpindex,e);  }}  }
class C{  private Address cellAddress(int index){  return pageAddress.plus(index << LOG_BYTES_IN_CELL);}  }
class C{  @Override protected void createLabels(){  this.addLabel("MFP");  Offset bottomLabelOffset=this.getBottomLabelOffset();  String bottomText=this.getBottomLabelText();  if (!WWUtil.isEmpty(bottomText)) {    TacticalGraphicLabel label=this.addLabel(bottomText);    label.setOffset(bottomLabelOffset);  }}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double maxProb=-1;  double currentProb;  int maxIndex=0;  int j;  for (j=0; j < instance.numClasses(); j++) {    currentProb=getProbs(j,instance,1);    if (Utils.gr(currentProb,maxProb)) {      maxIndex=j;      maxProb=currentProb;    }  }  return maxIndex;}  }
class C{  public Writer write(Writer writer) throws JSONException {  try {    boolean b=false;    Iterator keys=keys();    writer.write('{');    while (keys.hasNext()) {      if (b) {        writer.write(',');      }      Object k=keys.next();      writer.write(quote(k.toString()));      writer.write(':');      Object v=this.map.get(k);      if (v instanceof JSONObject) {        ((JSONObject)v).write(writer);      } else       if (v instanceof JSONArray) {        ((JSONArray)v).write(writer);      } else {        writer.write(valueToString(v));      }      b=true;    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void updatePackage(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  final List<LauncherActivityInfoCompat> matches=launcherApps.getActivityList(packageName,user);  if (matches.size() > 0) {    for (int i=data.size() - 1; i >= 0; i--) {      final AppInfo applicationInfo=data.get(i);      final ComponentName component=applicationInfo.intent.getComponent();      if (user.equals(applicationInfo.user) && packageName.equals(component.getPackageName())) {        if (!findActivity(matches,component)) {          removed.add(applicationInfo);          data.remove(i);        }      }    }    for (    final LauncherActivityInfoCompat info : matches) {      AppInfo applicationInfo=findApplicationInfoLocked(info.getComponentName().getPackageName(),user,info.getComponentName().getClassName());      if (applicationInfo == null) {        add(new AppInfo(context,info,user,mIconCache));      } else {        mIconCache.getTitleAndIcon(applicationInfo,info,true);        modified.add(applicationInfo);      }    }  } else {    for (int i=data.size() - 1; i >= 0; i--) {      final AppInfo applicationInfo=data.get(i);      final ComponentName component=applicationInfo.intent.getComponent();      if (user.equals(applicationInfo.user) && packageName.equals(component.getPackageName())) {        removed.add(applicationInfo);        mIconCache.remove(component,user);        data.remove(i);      }    }  }}  }
class C{  public void testSetF6(){  boolean f6=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF6(f6);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup2 needs to be implemented if invoked");}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster destImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, flowDir;  float progress=0;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double lnOf2=0.693147180559945;  double gridRes;  int col, row, a;  int c;  int x, y, i;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      destHeader=args[i];    } else     if (i == 1) {      backLinkHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((destHeader == null) || (backLinkHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    destImage=new WhiteboxRaster(destHeader,"r");    rows=destImage.getNumberRows();    cols=destImage.getNumberColumns();    double noData=destImage.getNoDataValue();    gridRes=(destImage.getCellSizeX() + destImage.getCellSizeY()) / 2;    backLink=new WhiteboxRaster(backLinkHeader,"r");    if (backLink.getNumberColumns() != cols || backLink.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",backLinkHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[] data;    for (row=0; row < rows; row++) {      data=destImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > 0) {          x=col;          y=row;          flag=true;          do {            z=output.getValue(y,x);            if (z == noData) {              output.setValue(y,x,1);            } else {              output.setValue(y,x,z + 1);            }            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    destImage.close();    backLink.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void keyReleased(KeyEvent e){}  }
class C{  public TlsClientConnector(SSLContext sslContext,int numberOfThreads,int connectTimeoutMillis,int idleTimeout){  super(numberOfThreads,connectTimeoutMillis,idleTimeout);  this.sslContext=sslContext;}  }
class C{  public FieldSortBuilder(String fieldName){  if (fieldName == null) {    throw new IllegalArgumentException("fieldName must not be null");  }  this.fieldName=fieldName;}  }
class C{  public ReRootedTree(RootedTree source,Node ingroupNode,Node outgroupNode,double ingroupBranchLength) throws NoEdgeException {  this.source=source;  List<Node> children=new ArrayList<Node>();  Node node1=createNodes(source,outgroupNode,ingroupNode);  setLength(node1,ingroupBranchLength);  children.add(node1);  Node node2=createNodes(source,ingroupNode,outgroupNode);  double l=source.getEdgeLength(ingroupNode,outgroupNode);  if (outgroupNode == source.getRootNode()) {    for (    Node adj : source.getAdjacencies(outgroupNode)) {      if (adj != ingroupNode) {        l+=source.getEdgeLength(outgroupNode,adj);      }    }  }  setLength(node2,Math.max(l - ingroupBranchLength,0.0));  children.add(node2);  createInternalNode(null,children);}  }
class C{  public void addObject(int type,Object obj){  for (int i=0; i < numObjects; i++) {    GdiObject gdi=(GdiObject)objectVector.get(i);    if (!gdi.used) {      gdi.Setup(type,obj);      lastObjectIdx=i;      break;    }  }}  }
class C{  public LimitExceededException(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:36.386 -0500",hash_original_method="AC5C11E970C3FC3CF3AF902D98D61BFC",hash_generated_method="91F316A454E41AC735D44DB96D84CF41") public void registerForNVReady(Handler h,int what,Object obj){  Registrant r=new Registrant(h,what,obj);synchronized (mStateMonitor) {    mNVReadyRegistrants.add(r);    if (mNvState.isNVReady()) {      r.notifyRegistrant(new AsyncResult(null,null,null));    }  }}  }
class C{  public int countUsers(String filter){  StringBuilder qBuilder=new StringBuilder();  qBuilder.append("SELECT count (*) FROM User u ");  if (filter != null && !filter.isEmpty()) {    qBuilder.append("WHERE ");    qBuilder.append(filter);  }  return ((Long)getHibernateTemplate().find(qBuilder.toString()).get(0)).intValue();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public String toString(int indentFactor) throws JSONException {  return toString(indentFactor,0);}  }
class C{  @Override public TokenStream create(TokenStream input){  if (stopWords == null) {    throw new IllegalStateException("Managed stopwords not initialized correctly!");  }  return new StopFilter(input,stopWords);}  }
class C{  protected int _rowOffset(int absRank){  return rowOffsets[absRank];}  }
class C{  public static void notEmpty(Object[] array,String message){  if ((array == null) || (array.length == 0)) {    throw new IllegalArgumentException(message);  }}  }
class C{  public static void initCollectors(){  model.initCollectors();}  }
class C{  private void addElements(int value,int numberOfElements){  if (m_firstFree + numberOfElements < m_blocksize)   for (int i=0; i < numberOfElements; i++) {    m_map0[m_firstFree++]=value;  } else {    int index=m_firstFree >>> m_SHIFT;    int offset=m_firstFree & m_MASK;    m_firstFree+=numberOfElements;    while (numberOfElements > 0) {      if (index >= m_map.length) {        int newsize=index + m_numblocks;        int[][] newMap=new int[newsize][];        System.arraycopy(m_map,0,newMap,0,m_map.length);        m_map=newMap;      }      int[] block=m_map[index];      if (null == block)       block=m_map[index]=new int[m_blocksize];      int copied=(m_blocksize - offset < numberOfElements) ? m_blocksize - offset : numberOfElements;      numberOfElements-=copied;      while (copied-- > 0)       block[offset++]=value;      ++index;      offset=0;    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.144 -0500",hash_original_method="2D33E593F3270AF80057D4A47B14E7B9",hash_generated_method="B8B6BDE68E0BEF60E1ED70C98BD2A809") private void parseStartTag(boolean xmldecl,boolean throwOnResolveFailure) throws IOException, XmlPullParserException {  if (!xmldecl) {    read('<');  }  name=readName();  attributeCount=0;  while (true) {    skip();    if (position >= limit && !fillBuffer(1)) {      checkRelaxed(UNEXPECTED_EOF);      return;    }    int c=buffer[position];    if (xmldecl) {      if (c == '?') {        position++;        read('>');        return;      }    } else {      if (c == '/') {        degenerated=true;        position++;        skip();        read('>');        break;      } else       if (c == '>') {        position++;        break;      }    }    String attrName=readName();    int i=(attributeCount++) * 4;    attributes=ensureCapacity(attributes,i + 4);    attributes[i]="";    attributes[i + 1]=null;    attributes[i + 2]=attrName;    skip();    if (position >= limit && !fillBuffer(1)) {      checkRelaxed(UNEXPECTED_EOF);      return;    }    if (buffer[position] == '=') {      position++;      skip();      if (position >= limit && !fillBuffer(1)) {        checkRelaxed(UNEXPECTED_EOF);        return;      }      char delimiter=buffer[position];      if (delimiter == '\'' || delimiter == '"') {        position++;      } else       if (relaxed) {        delimiter=' ';      } else {        throw new XmlPullParserException("attr value delimiter missing!",this,null);      }      attributes[i + 3]=readValue(delimiter,true,throwOnResolveFailure,ValueContext.ATTRIBUTE);      if (delimiter != ' ') {        position++;      }    } else     if (relaxed) {      attributes[i + 3]=attrName;    } else {      checkRelaxed("Attr.value missing f. " + attrName);      attributes[i + 3]=attrName;    }  }  int sp=depth++ * 4;  elementStack=ensureCapacity(elementStack,sp + 4);  elementStack[sp + 3]=name;  if (depth >= nspCounts.length) {    int[] bigger=new int[depth + 4];    System.arraycopy(nspCounts,0,bigger,0,nspCounts.length);    nspCounts=bigger;  }  nspCounts[depth]=nspCounts[depth - 1];  if (processNsp) {    adjustNsp();  } else {    namespace="";  }  if (defaultAttributes != null) {    Map<String,String> elementDefaultAttributes=defaultAttributes.get(name);    if (elementDefaultAttributes != null) {      for (      Map.Entry<String,String> entry : elementDefaultAttributes.entrySet()) {        if (getAttributeValue(null,entry.getKey()) != null) {          continue;        }        int i=(attributeCount++) * 4;        attributes=ensureCapacity(attributes,i + 4);        attributes[i]="";        attributes[i + 1]=null;        attributes[i + 2]=entry.getKey();        attributes[i + 3]=entry.getValue();      }    }  }  elementStack[sp]=namespace;  elementStack[sp + 1]=prefix;  elementStack[sp + 2]=name;}  }
class C{  public boolean addChild(DominatorNode child){  if (children.contains(child)) {    return false;  } else {    children.add(child);    return true;  }}  }
class C{  public GenericValue findByPrimaryKeyPartial(GenericPK primaryKey,Set<String> keys) throws GenericEntityException {  if (primaryKey == null) {    return null;  }  GenericValue genericValue=GenericValue.create(primaryKey);  genericDAO.partialSelect(genericValue,keys);  return genericValue;}  }
class C{  public Rational subtract(Rational secondRational){  long n=r[0] * secondRational.getDenominator() - r[1] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  public static boolean isIndicationType(char type){  return ((type & 0x0110) == STUN_INDICATION);}  }
class C{  public <T>AssumptionViolatedException(T actual,Matcher<T> matcher){  super(actual,matcher);}  }
class C{  public double heapMax(){  return memory.getHeapMemoryUsage().getMax();}  }
class C{  public IncompatibleRolesException(){}  }
class C{  public boolean validSystemNameFormat(String systemName){  if (tc.getNodeFromName(addressFromSystemName(systemName)) == null && tc.getNodeFromAddress(addressFromSystemName(systemName)) == null) {    try {      if (tc.getNodeFromAddress(Integer.parseInt(addressFromSystemName(systemName))) == null) {        return false;      } else {        return (pinFromSystemName(systemName) >= 0 && pinFromSystemName(systemName) <= 7 && (pin2FromSystemName(systemName) == -1 || (pin2FromSystemName(systemName) >= 0 && pin2FromSystemName(systemName) <= 7)));      }    } catch (    java.lang.NumberFormatException nfe) {      return false;    }  } else {    return (pinFromSystemName(systemName) >= 0 && pinFromSystemName(systemName) <= 7 && (pin2FromSystemName(systemName) == -1 || (pin2FromSystemName(systemName) >= 0 && pin2FromSystemName(systemName) <= 7)));  }}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public void addVendorDescriptor(VendorEjbDescriptor descr){  this.vendorDescriptors.add(descr);}  }
class C{  public static void unpackArchive(InputStream input,File outputDir) throws IOException {  final DataInputStream dInput=new DataInputStream(input);  unpackArchivePrivate(dInput,outputDir);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  HeapEntry other=(HeapEntry)obj;  if (id != other.id)   return false;  if (!object.equals(other.object))   return false;  return true;}  }
class C{  private void addSuffix(State state,CharSequence current,int fromIndex){  final int len=current.length();  while (fromIndex < len) {    int cp=Character.codePointAt(current,fromIndex);    state=state.newState(cp);    fromIndex+=Character.charCount(cp);  }  state.is_final=true;}  }
class C{  private final boolean isTextType(int type){  return (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type);}  }
class C{  @Override public void mapOutputTransformationMetadata(OutputCollector<IntWritable,DistinctValue> out,int taskID,TfUtils agents) throws IOException {  if (!isApplicable())   return;  try {    for (int i=0; i < _colList.length; i++) {      int colID=_colList[i];      IntWritable iw=new IntWritable(-colID);      out.collect(iw,prepMinOutput(i));      out.collect(iw,prepMaxOutput(i));      out.collect(iw,prepNBinsOutput(i));    }  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (specification: ");  result.append(specification);  result.append(')');  return result.toString();}  }
class C{  public CEventListTableMenu(final JFrame parent,final CEventListTable table,final ITraceListProvider traceProvider){  Preconditions.checkNotNull(parent,"IE01289: Parent argument can not be null");  Preconditions.checkNotNull(table,"IE01290: Table argument can not be null");  Preconditions.checkNotNull(traceProvider,"IE01291: Trace provider argument can not be null");  final int[] selectedRows=table.getConvertedSelectedRows();  add(CActionProxy.proxy(new CActionDelete(parent,traceProvider,selectedRows)));  addSeparator();  add(CActionProxy.proxy(new CSearchTableAction(parent,table)));  new CTableSearcher(parent,"Search",table,0);  if (selectedRows.length >= 2) {    addCombineMenu(parent,traceProvider,selectedRows);  }}  }
class C{  public static void addConnection(final ConnectionInfo conInfo){  getAllConnections().add(conInfo);}  }
class C{  public static float distanceLinePoint(Vector2 start,Vector2 end,Vector2 point){  tmp.set(end.x,end.y,0);  float l2=tmp.sub(start.x,start.y,0).len2();  if (l2 == 0.0f)   return point.dst(start);  tmp.set(point.x,point.y,0);  tmp.sub(start.x,start.y,0);  tmp2.set(end.x,end.y,0);  tmp2.sub(start.x,start.y,0);  float t=tmp.dot(tmp2) / l2;  if (t < 0.0f)   return point.dst(start); else   if (t > 1.0f)   return point.dst(end);  tmp.set(end.x,end.y,0);  tmp.sub(start.x,start.y,0).mul(t).add(start.x,start.y,0);  return tmp2.set(point.x,point.y,0).dst(tmp);}  }
class C{  @Override public void xml(String xml){  if (TextUtils.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e(e.getCause().getMessage() + "\n" + xml);  }}  }
class C{  public CqAttributesFactory(CqAttributes cqAttributes){  this.cqAttributes.setCqListeners(new ArrayList(Arrays.asList(cqAttributes.getCqListeners())));}  }
class C{  public void copyItem(AutomationItem item){  setAction(item.getActionByCode(item.getActionCode()));  setAutomationToRun(item.getAutomationToRun());  setGotoAutomationItem(item.getGotoAutomationItem());  setTrain(item.getTrain());  setRouteLocation(item.getRouteLocation());  setSequenceId(item.getSequenceId());  setTrainSchedule(item.getTrainSchedule());  setMessage(item.getMessage());  setMessageFail(item.getMessageFail());  setHaltFailureEnabled(item.isHaltFailureEnabled());}  }
class C{  public static void error(String tag,String text){  if (BuildConfig.DEBUG) {    Log.e(tag,text);  }}  }
class C{  public boolean removeEdges(Collection<Edge> edges){  boolean removed=false;  for (  Edge edge : edges) {    removed=removed || removeEdge(edge);  }  return removed;}  }
class C{  @TargetApi(Build.VERSION_CODES.FROYO) public static File storeOnExternalStorage(Context context,Bitmap bitmap,String type,String path,String filename,Bitmap.CompressFormat format,int quality){  if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {    return null;  }  File dir=new File(context.getExternalFilesDir(type),path);  FileUtils.makeDirsIfNeeded(dir);  File file=new File(dir,filename);  if (!storeAsFile(bitmap,file,format,quality)) {    return null;  }  return file;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER:    if (resolve)     return getDefinedMember();  return basicGetDefinedMember();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void updateScreen(){  commandBox.updateCursorCounter();}  }
class C{  @Override public byte[] write(InternalLog log) throws IOException {  final byte[] rowkey=RowkeyBuilder.buildRowkey(log);  final Put p=new Put(rowkey);  populateColumnValues(p,log);  tbl.put(p);  final List<byte[]> indexRowkeys=log.getIndexRowkeys();  if (indexRowkeys != null) {    writeIndexes(rowkey,indexRowkeys);  }  return rowkey;}  }
class C{  public static <A>StreamTValue<A> of(final AnyMValue<? extends Stream<A>> monads){  return new StreamTValue<>(monads);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ACTION\"";  db.execSQL(sql);}  }
class C{  static void unlink(final Tag parent,final Tag child){  Preconditions.checkNotNull(parent,"Error: Parent can't be null");  Preconditions.checkNotNull(child,"Error: Child can't be null");  parent.m_children.remove(child);  child.m_parent=null;}  }
class C{  public String toString(){  return new String("DirectColorModel: rmask=" + Integer.toHexString(red_mask) + " gmask="+ Integer.toHexString(green_mask)+ " bmask="+ Integer.toHexString(blue_mask)+ " amask="+ Integer.toHexString(alpha_mask));}  }
class C{  public static boolean testCondb(int b){  byte x=(byte)b;  int y=x & 0xff;  return y == 0xff;}  }
class C{  public void test_subList_empty(){  List al=new ArrayList();  al.add("one");  List emptySubList=al.subList(0,0);  try {    emptySubList.get(0);    fail("emptySubList.get(0) should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    emptySubList.set(0,"one");    fail("emptySubList.set(0,Object) should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    emptySubList.remove(0);    fail("emptySubList.remove(0) should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public void remove(String identifier,ActiveConnectionRecord record){synchronized (records) {    Set<ActiveConnectionRecord> connections=records.get(identifier);    assert (connections != null);    connections.remove(record);    if (connections.isEmpty())     records.remove(identifier);  }}  }
class C{  public PvTable(ProcessVar list){  setProcessVar(list);  setRowSelectionAllowed(true);}  }
class C{  public Object clone(){  GPTree newtree=lightClone();  newtree.child=(GPNode)(child.clone());  newtree.child.parent=newtree;  newtree.child.argposition=0;  return newtree;}  }
class C{  private String versionName(String name){  return versionName(name,0);}  }
class C{  public String doIt() throws Exception {  ProcessInfo pi=getProcessInfo();  log.info("doIt - " + pi.getTitle());  if (pi.getSerializableObject() instanceof RemoteSetupVO)   return setupRemote(); else   if (pi.getSerializableObject() instanceof RemoteMergeDataVO)   return mergeDataWithCentral(); else   if (pi.getSerializableObject() instanceof RemoteUpdateVO)   return receiveUpdateFromCentral(); else   if (pi.getSerializableObject() instanceof Timestamp)   return exit(); else   throw new Exception("ReplicationRemote - unknown VO - " + pi.getSerializableObject());}  }
class C{  private void unregisterReceiver(){  try {    Log.i(TAG,"Unregistering broadcast receivers");    unregisterReceiver(mReceiver);  } catch (  final IllegalArgumentException e) {    return;  }}  }
class C{  public RefactoringStatusEntry(int severity,String msg,RefactoringStatusContext context,String pluginId,int code,Object data){  Assert.isTrue(severity == RefactoringStatus.INFO || severity == RefactoringStatus.WARNING || severity == RefactoringStatus.ERROR || severity == RefactoringStatus.FATAL);  Assert.isNotNull(msg);  Assert.isTrue(code == NO_CODE || code >= 0);  if (code != NO_CODE)   Assert.isTrue(pluginId != null);  fMessage=msg;  fSeverity=severity;  fContext=context;  fPluginId=pluginId;  fCode=code;  fData=data;}  }
class C{  public MethodArgumentModel(MethodModel method,int argumentIndex){  this.method=method;  this.argumentIndex=argumentIndex;}  }
class C{  void chooseFirstProvider(){  if (sigSpi != null) {    return;  }synchronized (lock) {    if (sigSpi != null) {      return;    }    if (debug != null) {      int w=--warnCount;      if (w >= 0) {        debug.println("Signature.init() not first method " + "called, disabling delayed provider selection");        if (w == 0) {          debug.println("Further warnings of this type will " + "be suppressed");        }        new Exception("Call trace").printStackTrace();      }    }    Exception lastException=null;    while ((firstService != null) || serviceIterator.hasNext()) {      Service s;      if (firstService != null) {        s=firstService;        firstService=null;      } else {        s=serviceIterator.next();      }      if (isSpi(s) == false) {        continue;      }      try {        sigSpi=newInstance(s);        provider=s.getProvider();        firstService=null;        serviceIterator=null;        return;      } catch (      NoSuchAlgorithmException e) {        lastException=e;      }    }    ProviderException e=new ProviderException("Could not construct SignatureSpi instance");    if (lastException != null) {      e.initCause(lastException);    }    throw e;  }}  }
class C{  boolean cancel(){  boolean result=receiver != null;  if (result)   receiver.cancelled(settings);  return result;}  }
class C{  public void close() throws IOException {  try {    mem.unmap();  } catch (  Exception e) {    throw new IOException("Unable to close the file",e);  }}  }
class C{  public PublishingToMarketplaceNotPermittedException(String message){  super(message);}  }
class C{  public String wikiRuleString(XMLDocumentationHandler handler,String prefix){  String html=prefix + "All of:";  for (  XMLSyntaxRule rule : rules) {    html+=rule.wikiRuleString(handler,prefix + "*");  }  html+="\n";  return html;}  }
class C{  public InstrumentedFacesContext pushViewIntoRequestMap(){  getExternalContext().getRequestMap().put("javax.servlet.include.servlet_path",super.getViewRoot().getViewId());  return this;}  }
class C{  private void compileDefaults(Map<String,TreeMap<String,Object>> compiledDefaults,UIDefaults d){  for (  Map.Entry<Object,Object> entry : d.entrySet()) {    if (entry.getKey() instanceof String) {      String key=(String)entry.getKey();      String kp=parsePrefix(key);      if (kp == null)       continue;      TreeMap<String,Object> map=compiledDefaults.get(kp);      if (map == null) {        map=new TreeMap<String,Object>();        compiledDefaults.put(kp,map);      }      map.put(key,entry.getValue());    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean isEmpty(){  return messages.isEmpty();}  }
class C{  public byte readRawByte() throws IOException {  if (bufferPos == bufferSize) {    throw InvalidProtocolBufferNanoException.truncatedMessage();  }  return buffer[bufferPos++];}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  private void verifyType(TypeElement type,PackageElement pkg) throws CannotGenerateCodeException {  if (pkg.isUnnamed()) {    messager.printMessage(ERROR,"@FreeBuilder does not support types in unnamed packages",type);    throw new CannotGenerateCodeException();  }switch (type.getNestingKind()) {case TOP_LEVEL:    break;case MEMBER:  if (!type.getModifiers().contains(Modifier.STATIC)) {    messager.printMessage(ERROR,"Inner classes cannot be @FreeBuilder types (did you forget the static keyword?)",type);    throw new CannotGenerateCodeException();  }if (type.getModifiers().contains(Modifier.PRIVATE)) {  messager.printMessage(ERROR,"@FreeBuilder types cannot be private",type);  throw new CannotGenerateCodeException();}for (Element e=type.getEnclosingElement(); e != null; e=e.getEnclosingElement()) {if (e.getModifiers().contains(Modifier.PRIVATE)) {  messager.printMessage(ERROR,"@FreeBuilder types cannot be private, but enclosing type " + e.getSimpleName() + " is inaccessible",type);  throw new CannotGenerateCodeException();}}break;default :messager.printMessage(ERROR,"Only top-level or static nested types can be @FreeBuilder types",type);throw new CannotGenerateCodeException();}switch (type.getKind()) {case ANNOTATION_TYPE:messager.printMessage(ERROR,"@FreeBuilder does not support annotation types",type);throw new CannotGenerateCodeException();case CLASS:verifyTypeIsConstructible(type);break;case ENUM:messager.printMessage(ERROR,"@FreeBuilder does not support enum types",type);throw new CannotGenerateCodeException();case INTERFACE:break;default :throw new AssertionError("Unexpected element kind " + type.getKind());}}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Sage.isTrueClient());}  }
class C{  public void endDocument() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endDocument");  m_insideParse=false;  if (m_contentHandler != null) {    m_contentHandler.endDocument();  }  if (m_incremental) {    m_transformer.waitTransformThread();  } else {    m_transformer.setSourceTreeDocForThread(m_dtm.getDocument());    m_transformer.run();  }}  }
class C{  public void test_multiTenancy_967() throws Exception {}  }
class C{  @Override public boolean close(){  if (!isLoaded()) {    throw new IllegalStateException("IE00156: Module is not loaded");  }  for (  final IModuleListener listener : m_listeners) {    try {      if (!listener.closingModule(this)) {        return false;      }    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  final ICallgraphView oldNativeCallgraphView=m_content.getViewContainer().getNativeCallgraphView();  final List<IFlowgraphView> oldFlowgraphs=m_content.getViewContainer().getNativeFlowgraphViews();  if (!m_content.close()) {    return false;  }  m_content=null;  for (  final IModuleListener listener : m_listeners) {    try {      listener.closedModule(this,oldNativeCallgraphView,oldFlowgraphs);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  return true;}  }
class C{  public long evaluateDelay(){  if (meanDelay > 0) {    Double x0=ThreadLocalRandom.current().nextDouble();    Double y0=-Math.log(1 - x0) * meanDelay;    return y0.longValue();  }  return 0;}  }
class C{  public static void testPrivKeyTweakMul_2() throws AssertFailException {  byte[] pub=BaseEncoding.base16().lowerCase().decode("040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40".toLowerCase());  byte[] data=BaseEncoding.base16().lowerCase().decode("3982F19BEF1615BCCFBB05E321C10E1D4CBA3DF0E841C2E41EEB6016347653C3".toLowerCase());  byte[] resultArr=NativeSecp256k1.pubKeyTweakMul(pub,data);  String sigString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(sigString,"04E0FE6FE55EBCA626B98A807F6CAF654139E14E5E3698F01A9A658E21DC1D2791EC060D4F412A794D5370F672BC94B722640B5F76914151CFCA6E712CA48CC589","testPrivKeyMul_2");}  }
class C{  public static <K,V>ImmutableSetMultimap<K,V> of(K k1,V v1){  ImmutableSetMultimap.Builder<K,V> builder=ImmutableSetMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  private static void transform(IR ir,HashMap<BasicBlockPair,HashSet<Register>> xform){  for (  Map.Entry<BasicBlockPair,HashSet<Register>> entry : xform.entrySet()) {    BasicBlockPair bbp=entry.getKey();    HashSet<Register> toSplit=entry.getValue();    BasicBlock target=IRTools.makeBlockOnEdge(bbp.src,bbp.dest,ir);    SSA.replaceBlockInPhis(bbp.dest,bbp.src,target);    for (    Register r : toSplit) {      if (r.defList == null)       continue;      Instruction s=null;switch (r.getType()) {case Register.ADDRESS_TYPE:        RegisterOperand lhs2=IRTools.A(r);      RegisterOperand rhs2=IRTools.A(r);    s=Unary.create(SPLIT,lhs2,rhs2);  TypeReference t2=null;Enumeration<RegisterOperand> e2=DefUse.defs(r);if (!e2.hasMoreElements()) {s=null;} else {RegisterOperand rop2=e2.nextElement();t2=rop2.getType();while (e2.hasMoreElements()) {  RegisterOperand nextOp2=e2.nextElement();  if (nextOp2.getType() != t2) {    s=null;  }}}if (s != null) {lhs2.setType(t2);rhs2.setType(t2);}break;case Register.INTEGER_TYPE:RegisterOperand lhs=IRTools.I(r);RegisterOperand rhs=IRTools.I(r);s=Unary.create(SPLIT,lhs,rhs);TypeReference t=null;Enumeration<RegisterOperand> e=DefUse.defs(r);if (!e.hasMoreElements()) {s=null;} else {RegisterOperand rop=e.nextElement();t=rop.getType();while (e.hasMoreElements()) {RegisterOperand nextOp=e.nextElement();if (nextOp.getType() != t) {s=null;}}}if (s != null) {lhs.setType(t);rhs.setType(t);}break;case Register.FLOAT_TYPE:s=Unary.create(SPLIT,IRTools.F(r),IRTools.F(r));break;case Register.DOUBLE_TYPE:s=Unary.create(SPLIT,IRTools.D(r),IRTools.D(r));break;case Register.LONG_TYPE:s=Unary.create(SPLIT,IRTools.L(r),IRTools.L(r));break;default :s=null;break;}if (s != null) {target.prependInstruction(s);}}}}  }
class C{  public void div(float n){  x/=n;  y/=n;  z/=n;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  canvas.drawRect(x,y - SHAPE_WIDTH / 2,x + SHAPE_WIDTH,y + SHAPE_WIDTH / 2,paint);}  }
class C{  public static float updateValue(float current,float target,float factor){  float times=(System.currentTimeMillis() - ClientUtils.lastUpdate) / 16.666666666666668F;  float off=(off=target - current) > 0.01F || off < -0.01F ? off * (float)Math.pow(factor,times) : 0.0F;  return target - off;}  }
class C{  private static void fakePerlin3dOctavesConstructor(Random random,int octaveCount){  for (int i=0; i < octaveCount; i++) {    fakePerlin3dConstructor(random);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:58.537 -0500",hash_original_method="CC3F97A616116EB8BC182A6988C81981",hash_generated_method="617B242448321408D09B83A0C2142957") public boolean delete(String value,String name){  Iterator li=this.parameters.iterator();  NameValue nv;  boolean removed=false;  while (li.hasNext()) {    nv=(NameValue)li.next();    if (((String)nv.getValueAsObject()).equalsIgnoreCase(value) && nv.getName().equalsIgnoreCase(name)) {      li.remove();      removed=true;    }  }  return removed;}  }
class C{  public AttributeDefinitionBuilder skipGetter(){  this.readable=false;  return this;}  }
class C{  public CCriteriumTreeNode(final ICriterium criterium){  m_criterium=criterium;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  for (  E e : this) {    if (e instanceof Serializable) {      s.writeObject(e);    }  }  s.writeObject(null);}  }
class C{  public JAASRole(String name){  super(name);}  }
class C{  private Filter generateSingleCondnEvaluatorIfRequired(Set notEqualKeys,CompiledValue operand,int operator,Object condnKey,IndexInfo indxInfo) throws TypeMismatchException {  Filter rangeFilter;  if (notEqualKeys != null) {    Iterator itr=notEqualKeys.iterator();    while (itr.hasNext()) {      Object neKey=itr.next();      if (!((Boolean)TypeUtils.compare(neKey,condnKey,operator)).booleanValue()) {        itr.remove();      }    }    if (notEqualKeys.isEmpty()) {      notEqualKeys=null;    }  }  rangeFilter=(notEqualKeys != null) ? new SingleCondnEvaluator(operator,condnKey,notEqualKeys,indxInfo) : (Filter)operand;  return rangeFilter;}  }
class C{  public static String loadRegexpWithKey(final String key){  InputStream stream=null;  try {    stream=WroUtil.class.getResourceAsStream("regexp.properties");    final Properties props=new RegexpProperties().load(stream);    return props.getProperty(key);  } catch (  final IOException e) {    throw new WroRuntimeException("Could not load pattern with key: " + key + " from property file",e);  } finally {    closeQuietly(stream);  }}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  int len=(length + 2) / 3 * 4;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public Builder updateActive(boolean active){  this.active=active;  return this;}  }
class C{  private List parseElements(final Class type,String value){  value=value.trim();  if (value.startsWith("{") && value.endsWith("}")) {    value=value.substring(1,value.length() - 1);  }  try {    StreamTokenizer st=new StreamTokenizer(new StringReader(value));    st.whitespaceChars(this.delimiter,this.delimiter);    st.ordinaryChars('0','9');    st.wordChars('0','9');    for (    char allowedChar : this.allowedChars) {      st.ordinaryChars(allowedChar,allowedChar);      st.wordChars(allowedChar,allowedChar);    }    List list=null;    while (true) {      int ttype=st.nextToken();      if (ttype == StreamTokenizer.TT_WORD || ttype > 0) {        if (st.sval != null) {          if (list == null) {            list=new ArrayList();          }          list.add(st.sval);        }      } else       if (ttype == StreamTokenizer.TT_EOF) {        break;      } else {        throw new ConversionException("Encountered token of type " + ttype + " parsing elements to '"+ this.toString(type)+ ".");      }    }    if (list == null) {      list=Collections.EMPTY_LIST;    }    return list;  } catch (  IOException e) {    throw new ConversionException("Error converting from String to '" + this.toString(type) + "': "+ e.getMessage(),e);  }}  }
class C{  public void dropDatabaseSchemas(){  for (  String databaseSchema : dropDatabaseSchemas.keySet()) {    if (shouldWriteToDatabase()) {      dropDatabaseSchemas.get(databaseSchema).dropDatabaseSchemaOnDatabase(getSession());    } else {      dropDatabaseSchemas.get(databaseSchema).dropDatabaseSchema(getSession(),getDropSchemaWriter());      appendToDDLWriter(getDropSchemaWriter(),"\n");    }  }}  }
class C{  public void addBaudRateQueryCallback(OneSheeldBaudRateQueryCallback baudRateQueryCallback){  if (baudRateQueryCallback != null && !baudRateQueryCallbacks.contains(baudRateQueryCallback))   baudRateQueryCallbacks.add(baudRateQueryCallback);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class defineClass0(java.lang.ClassLoader,java.lang.String,byte[],int,int)")) {    java_lang_reflect_Proxy_defineClass0(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  protected long insert(Object object){  long id=-1;  SQLiteDatabase db=openDatabase();  if (object instanceof FileItem) {    ContentValues cv=new ContentValues();    String filename=((FileItem)object).getFilename();    String path=((FileItem)object).getPath();    String parentFolder=path.substring(0,path.lastIndexOf(File.separator.concat(filename)));    FileItem fileItem=this.getFileItemByPath(parentFolder);    cv.put(SyncFile.Columns.FILENAME,filename);    cv.put(SyncFile.Columns.PATH,path);    cv.put(SyncFile.Columns.IS_FOLDER,((FileItem)object).isFolder());    if (fileItem != null) {      cv.put(SyncFile.Columns.PARENT_ID,fileItem.getId());    } else {      cv.put(SyncFile.Columns.PARENT_ID,SyncFile.BASE_FOLDER_ID);    }    cv.put(SyncFile.Columns.CREATE_TIME,((FileItem)object).getCreateTime());    cv.put(SyncFile.Columns.HASH_VALUE,((FileItem)object).getHashValue());    id=db.insert(SyncFile.TABLE_NAME,null,cv);  } else   if (object instanceof ActionItem) {    ContentValues cv=new ContentValues();    cv.put(SyncAction.Columns.TYPE,((ActionItem)object).getType());    cv.put(SyncAction.Columns.REMOTE_PATH,((ActionItem)object).getRemotePath());    cv.put(SyncAction.Columns.LOCAL_PATH,((ActionItem)object).getLocalPath());    cv.put(SyncAction.Columns.CREATE_TIME,((ActionItem)object).getCreateTime());    cv.put(SyncAction.Columns.STATE,((ActionItem)object).getState());    cv.put(SyncAction.Columns.MISC,((ActionItem)object).getMisc());    id=db.insert(SyncAction.TABLE_NAME,null,cv);  } else {    throw new IllegalArgumentException("unsupported parameter");  }  closeDatabase();  return id;}  }
class C{  @Override public void close() throws IOException {  try {    finish();  }  finally {    this.writer.close();  }}  }
class C{  public void write(ByteCodeWriter out) throws IOException {  out.writeShort(_entries.size());  for (int i=1; i < _entries.size(); i++) {    ConstantPoolEntry entry=_entries.get(i);    if (entry != null)     entry.write(out);  }}  }
class C{  public void stop() throws IOException {  print("stop",null);}  }
class C{  public boolean isChanged(){  return m_changed;}  }
class C{  public FXGException(int lineNumber,int columnNumber,String message,Object... arguments){  super(message);  this.arguments=arguments;  message=null;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_TWO_OR_THREE,null));}  }
class C{  public void popLimit(final int oldLimit){  currentLimit=oldLimit;  recomputeBufferSizeAfterLimit();}  }
class C{  public GenericEntry retrieveOrganizationUnit(String customerId,String orgUnitPath) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=service.getEntry(new URL("https://apps-apis.google.com/a/feeds/orgunit/2.0/" + customerId + "/"+ orgUnitPath),GenericEntry.class);  return entry;}  }
class C{  public final void openPdfFile(final InputStream in) throws PdfException {  try {    pdf_datafile=new RandomAccessMemoryMapBuffer(in);    objectReader.init(pdf_datafile);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " accessing file");    throw new PdfException("Exception " + e + " accessing file");  }}  }
class C{  private void addCSSClasses(){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(CSS_STEEP_DOWN)) {    final CSSClass cls=new CSSClass(this,CSS_STEEP_DOWN);    Color color=SVGUtil.stringToColor(style.getColor(StyleLibrary.PLOT));    if (color == null) {      color=Color.BLACK;    }    color=new Color((int)(color.getRed() * 0.6),(int)(color.getGreen() * 0.6 + 0.4 * 256.),(int)(color.getBlue() * 0.6));    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGUtil.colorToString(color));    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT) * .5);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(CSS_STEEP_UP)) {    final CSSClass cls=new CSSClass(this,CSS_STEEP_UP);    Color color=SVGUtil.stringToColor(style.getColor(StyleLibrary.PLOT));    if (color == null) {      color=Color.BLACK;    }    color=new Color((int)(color.getRed() * 0.6 + 0.4 * 256.),(int)(color.getGreen() * 0.6),(int)(color.getBlue() * 0.6));    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGUtil.colorToString(color));    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT) * .5);    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  protected Object entryInitialFlow(){  return emptySet.clone();}  }
class C{  public static void logRecovery(String regionName,PersistentMemberID disk,InternalDistributedMember memberId){  GRAPH_LOGGER.logTransition(GraphType.REGION,regionName,"recover","created",disk.diskStoreId,memberId);}  }
class C{  @Override public void updateTime(int columnIndex,Time x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTime(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueTime.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @HLELogging(level="info") @HLEFunction(nid=0x9D47469C,version=271) public int sceJpegCreateMJpeg(int width,int height){  jpegWidth=width;  jpegHeight=height;  return 0;}  }
class C{  private void calculateSizes(final Graphics g){  m_rowHeight=getRowHeight(g);  m_charHeight=getCharHeight(g);  m_charWidth=getCharacterWidth(g);}  }
class C{  public StyledTextAction(String nm){  super(nm);}  }
class C{  private void showNotificationLabel(String i18nKey,Object... arguments){  upperPanel.setVisible(false);  collapsibleErrorTable.setVisible(false);  GridBagConstraints constraint=new GridBagConstraints();  constraint.fill=GridBagConstraints.BOTH;  constraint.weightx=1.0;  constraint.weighty=1.0;  centerPanel.removeAll();  centerPanel.add(new JPanel(),constraint);  constraint.weightx=0.0;  constraint.weighty=0.0;  constraint.fill=GridBagConstraints.NONE;  constraint.anchor=GridBagConstraints.CENTER;  centerPanel.add(new ResourceLabel(i18nKey,arguments),constraint);  constraint.weightx=1.0;  constraint.weighty=1.0;  constraint.fill=GridBagConstraints.BOTH;  centerPanel.add(new JPanel(),constraint);  centerPanel.revalidate();  centerPanel.repaint();}  }
class C{  protected void endMyTurn(){  IGame game=clientgui.getClient().getGame();  Entity next=game.getNextEntity(game.getTurnIndex());  if ((game.getPhase() == IGame.Phase.PHASE_FIRING) && (next != null) && (ce() != null)&& (next.getOwnerId() != ce().getOwnerId())) {    clientgui.setDisplayVisible(false);  }  cen=Entity.NONE;  target(null);  clientgui.getBoardView().select(null);  clientgui.getBoardView().highlight(null);  clientgui.getBoardView().cursor(null);  clientgui.bv.clearMovementData();  clientgui.bv.clearFiringSolutionData();  clientgui.bv.clearStrafingCoords();  clientgui.bv.clearFieldofF();  clientgui.setSelectedEntityNum(Entity.NONE);  disableButtons();  clearVisibleTargets();}  }
class C{  public boolean isClinit(){  char[] selector=getSelector();  return selector[0] == '<' && selector.length == 8;}  }
class C{  @Override public final int readUnsignedShort() throws IOException {  dis.readFully(work,0,2);  return ((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  public static Throwable shouldFail(Class clazz,Closure code){  Throwable th=null;  try {    code.call();  } catch (  GroovyRuntimeException gre) {    th=ScriptBytecodeAdapter.unwrap(gre);  }catch (  Throwable e) {    th=e;  }  if (th == null) {    fail("Closure " + code + " should have failed with an exception of type "+ clazz.getName());  } else   if (!clazz.isInstance(th)) {    fail("Closure " + code + " should have failed with an exception of type "+ clazz.getName()+ ", instead got Exception "+ th);  }  return th;}  }
class C{  public XCardDocument(InputStream in) throws SAXException, IOException {  this(XmlUtils.toDocument(in));}  }
class C{  public boolean needsSync(){  return needsSync;}  }
class C{  protected void paintLineHighlights(Graphics g){  LineHighlightManager lhm=textArea.getLineHighlightManager();  if (lhm != null) {    lhm.paintLineHighlights(g);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void init(Processor processor){  super.init(processor);  AddContentAction action=(AddContentAction)getAction();  if (action.getName() == null || action.getName().trim().isEmpty()) {    ProcessorIssue pi=new ProcessorIssue();    pi.setProcessor(processor.getDescription());    pi.setAction(getAction().getDescription());    pi.setField("name");    pi.setSeverity(Severity.Error);    pi.setDescription(NAME_MUST_BE_SPECIFIED);    if (getIssues() == null) {      setIssues(new ArrayList<Issue>());    }    getIssues().add(0,pi);  }}  }
class C{  public DocComment addComment(DocCommentNode comment){  CommentEntry entry=new CommentEntry(comment,exclude);  if (entry.key.type == DocComment.INTERFACE)   isInterface=true;  if (entry.getSkinPartMetadata() != null) {    if (skinPartMetadataList == null) {      skinPartMetadataList=new ArrayList<CommentEntry>();    }    skinPartMetadataList.add(entry.getSkinPartMetadata());  }  if (entry.functionToIgnore != null) {    if (functionToIgnoreSet == null) {      functionToIgnoreSet=new HashSet<String>();    }    functionToIgnoreSet.add(entry.functionToIgnore);  }  if (!this.containsKey(entry.key) || (comment.getId() != null && ((entry.key.type == DocComment.FIELD) || (entry.key.type == DocComment.FUNCTION) || (entry.key.type == DocComment.FUNCTION_GET)|| (entry.key.type == DocComment.FUNCTION_SET)) && !entry.hasUserNamespace)) {    if (entry.key.type == DocComment.CLASS && skinPartMetadataList != null) {      if (entry.getMetadata() == null) {        entry.setMetadata(skinPartMetadataList);      } else {        entry.getMetadata().addAll(skinPartMetadataList);      }    }    if (functionToIgnoreSet != null && (entry.key.type == DocComment.FUNCTION_GET || entry.key.type == DocComment.FUNCTION_SET)) {      if (functionToIgnoreSet.contains(entry.key.name)) {        return null;      }    }    this.put(entry.key,entry);    return entry;  }  return null;}  }
class C{  public void rollbackToSavepoint(String name){  checkCommitRollback();  if (savepoints == null) {    throw DbException.get(ErrorCode.SAVEPOINT_IS_INVALID_1,name);  }  Savepoint savepoint=savepoints.get(name);  if (savepoint == null) {    throw DbException.get(ErrorCode.SAVEPOINT_IS_INVALID_1,name);  }  rollbackTo(savepoint,false);}  }
class C{  private void showProcessing(boolean inProgress){  view.setLoaderVisibility(inProgress);  view.setInputsEnableState(!inProgress);}  }
class C{  public boolean isEmpty(){  return first == null;}  }
class C{  private static String buildDescription(final List<String> missingFields){  final StringBuilder description=new StringBuilder("Message missing required fields: ");  boolean first=true;  for (  final String field : missingFields) {    if (first) {      first=false;    } else {      description.append(", ");    }    description.append(field);  }  return description.toString();}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  public static <E extends Comparable<E>>void bubbleSort(E[] list){  boolean needNextPass=true;  for (int k=1; k < list.length && needNextPass; k++) {    needNextPass=false;    for (int i=0; i < list.length - k; i++) {      if (list[i].compareTo(list[i + 1]) > 0) {        E temp=list[i];        list[i]=list[i + 1];        list[i + 1]=temp;        needNextPass=true;      }    }  }}  }
class C{  public boolean canRemoveFolder(AcsAccessObject acs,ArchiveObject arch,int fdrId,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    can=FolderMdoFdr.canRemoveFolder(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdrId);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  @Override public void onClick(View view){  if (view.getId() != R.id.button_tertiary) {    mInfoBarView.setControlsEnabled(false);  }  if (view.getId() == R.id.infobar_close_button) {    mInfoBarView.onCloseButtonClicked();  } else   if (view.getId() == R.id.button_primary) {    mInfoBarView.onButtonClicked(true);  } else   if (view.getId() == R.id.button_secondary) {    mInfoBarView.onButtonClicked(false);  } else   if (view.getId() == R.id.button_tertiary) {    mInfoBarView.onLinkClicked();  }}  }
class C{  protected NumericLiteral(short number){  this(number,XMLSchema.SHORT);}  }
class C{  public Message editMessageReplyMarkup(String chatId,Long messageId,InlineReplyMarkup inlineReplyMarkup){  if (inlineReplyMarkup != null && chatId != null && messageId != null) {    JSONObject jsonResponse=this.editMessageReplyMarkup(chatId,messageId,null,inlineReplyMarkup);    if (jsonResponse != null) {      return MessageImpl.createMessage(jsonResponse.getJSONObject("result"),this);    }  }  return null;}  }
class C{  public void addInvokevirtual(CtClass clazz,String name,String desc){  addInvokevirtual(constPool.addClassInfo(clazz),name,desc);}  }
class C{  @Override public synchronized void resize(int to){  if (to > size) {    enlargeCapacity(to);    size=to;  }}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  GraphicsNode refNode=null;  GVTBuilder builder=ctx.getGVTBuilder();  selectedChild=null;  for (Node n=e.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() == Node.ELEMENT_NODE) {      Element ref=(Element)n;      if (n instanceof SVGTests && SVGUtilities.matchUserAgent(ref,ctx.getUserAgent())) {        selectedChild=ref;        refNode=builder.build(ctx,ref);        break;      }    }  }  if (refNode == null) {    return null;  }  CompositeGraphicsNode group=(CompositeGraphicsNode)super.createGraphicsNode(ctx,e);  if (group == null) {    return null;  }  group.add(refNode);  return group;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public String toString(){  return "ESRIPoint[" + format.format(x) + ","+ format.format(y)+ "]";}  }
class C{  protected byte[] attributeKey(){  return subspace.pack(Tuple2.from(ATTRIBUTE_KEY));}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TMEMBER__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends TAnnotation>)newValue);return;case TypesPackage.TMEMBER__AST_ELEMENT:setAstElement((EObject)newValue);return;case TypesPackage.TMEMBER__DECLARED_FINAL:setDeclaredFinal((Boolean)newValue);return;case TypesPackage.TMEMBER__DECLARED_STATIC:setDeclaredStatic((Boolean)newValue);return;case TypesPackage.TMEMBER__DECLARED_OVERRIDE:setDeclaredOverride((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int canDisplayUpTo(String str){  return awtFont.canDisplayUpTo(str);}  }
class C{  protected long generateZeta(double ro,double pk,RandomEngine randomGenerator){  double u, v, e, x;  long k;  if (ro != ro_prev || pk != pk_prev) {    ro_prev=ro;    pk_prev=pk;    if (ro < pk) {      c=pk - 0.5;      d=0;    } else {      c=ro - 0.5;      d=(1.0 + ro) * Math.log((1.0 + pk) / (1.0 + ro));    }  }  do {    do {      u=randomGenerator.raw();      v=randomGenerator.raw();      x=(c + 0.5) * Math.exp(-Math.log(u) / ro) - c;    } while (x <= 0.5 || x >= maxlongint);    k=(int)(x + 0.5);    e=-Math.log(v);  } while (e < (1.0 + ro) * Math.log((k + pk) / (x + c)) - d);  return k;}  }
class C{  public static long toUnsignedLong(int intValue){  return ((long)intValue) & 0xffffffffL;}  }
class C{  public void cancelSelectionMode(){  mVectorMessageListFragment.cancelSelectionMode();}  }
class C{  public Activity cancel(String action){  return m_actions.cancel(action);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.704 -0500",hash_original_method="B53A11C7EF817F793ACB0CF78B800084",hash_generated_method="8E3EB162110C30BEE66BD38213722D7C") public void stopFlipping(){  mStarted=false;  updateRunning();}  }
class C{  public static void checkConnection(@Nonnull String hostname,@Nonnull String username,@Nonnull String password,@Nonnull String encryption,int port,boolean disableCertificateChecking) throws MessagingException {  Properties props=createProperties(hostname,port,encryption,disableCertificateChecking);  Session session=Session.getInstance(props,null);  Transport transport=session.getTransport("smtp");  transport.connect(username,password);  transport.close();}  }
class C{  public static boolean isArrayByteBase64(byte[] arrayOctect){  arrayOctect=discardWhitespace(arrayOctect);  int length=arrayOctect.length;  if (length == 0) {    return true;  }  for (int i=0; i < length; i++) {    if (!isBase64(arrayOctect[i])) {      return false;    }  }  return true;}  }
class C{  private void listenToDancingBee(){  IMovingAgent[] agents=this.getObjectsWithinMyDistance(1.0,true,true,this.getSphereRadius(),false,null);  agents=(IMovingAgent[])Filter.filter(agents,Bee.class);  if (agents.length > 0) {    int index=r.nextInt(agents.length);    Bee b=(Bee)agents[index];    if (b.getState() == Bee.State.dancing) {      double comNoise=getSimulation().comNoise;      copySourceInformationFrom(b);      sourceDirection.radius+=Math.round(r.nextGaussian() * comNoise * sourceDirection.radius);      double angle;      angle=sourceDirection.azimuth;      angle+=(r.nextGaussian() * comNoise) * Math.PI;      Geometric.clampAngleRadians(angle);      sourceDirection.azimuth=angle;      angle=sourceDirection.elevation;      angle+=(r.nextGaussian() * comNoise) * Math.PI;      Geometric.clampAngleRadians(angle);      sourceDirection.elevation=angle;      setTargetLocation(sourceDirection);      receptive=false;      double nectar=nectarForReturn + sourceDirection.radius * nectarForOneStep + r.nextDouble() * 5;      nectarLoad=requestNectarFromHive(nectar);      repeatedTrip=0;      repeatedDance=0;      setState(State.leaveHive);    }  }}  }
class C{  private void matchDNS(String expectedName,X509Certificate cert) throws CertificateException {  Collection<List<?>> subjAltNames=cert.getSubjectAlternativeNames();  if (subjAltNames != null) {    boolean foundDNS=false;    for (    List<?> next : subjAltNames) {      if (((Integer)next.get(0)).intValue() == ALTNAME_DNS) {        foundDNS=true;        String dnsName=(String)next.get(1);        if (isMatched(expectedName,dnsName)) {          return;        }      }    }    if (foundDNS) {      throw new CertificateException("No subject alternative DNS " + "name matching " + expectedName + " found.");    }  }  X500Name subjectName=getSubjectX500Name(cert);  DerValue derValue=subjectName.findMostSpecificAttribute(X500Name.commonName_oid);  if (derValue != null) {    try {      if (isMatched(expectedName,derValue.getAsString())) {        return;      }    } catch (    IOException e) {    }  }  String msg="No name matching " + expectedName + " found";  throw new CertificateException(msg);}  }
class C{  public static void hide(@NonNull final View view){  final InputMethodManager iManager=(InputMethodManager)view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  if (iManager != null) {    iManager.hideSoftInputFromWindow(view.getWindowToken(),0);  }}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  try {    DTDprolog();    m_writer.write("<!ENTITY ");    m_writer.write(name);    if (publicId != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(publicId);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(systemId);    }    m_writer.write("\" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isExternal(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.EXTERNAL);}  }
class C{  @Override protected void onPostExecute(final PlaceInfoCollection result){  MainActivity.this.setProgressBarIndeterminateVisibility(false);  if (result == null || result.getItems() == null || result.getItems().size() < 1) {    if (result == null) {      placesListLabel.setText(R.string.failedToRetrievePlaces);    } else {      placesListLabel.setText(R.string.noPlacesNearby);    }    placesList.setAdapter(null);    return;  }  placesListLabel.setText(R.string.nearbyPlaces);  ListAdapter placesListAdapter=createPlaceListAdapter(result.getItems());  placesList.setAdapter(placesListAdapter);  places=result.getItems();}  }
class C{  public form addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static Vector3 toVector3(Vector2 o,float y){  return new Vector3(o.x,y,o.z);}  }
class C{  public int stem(char s[],int len){  len=stemPrefix(s,len);  len=stemSuffix(s,len);  return len;}  }
class C{  public RouteGroup group(String prefix){  Assert.notNull(prefix,"Route group prefix not is null");  return new RouteGroup(this,prefix);}  }
class C{  public boolean isAfterDelivery(){  Object oo=get_Value(COLUMNNAME_AfterDelivery);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Object[] internalGetKeys(){  return context.keySet().toArray();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  cstate.popStackMark();}  }
class C{  public ComponentBuilder italic(boolean italic){  current.setItalic(italic);  return this;}  }
class C{  public InterruptedException(java.lang.String s){}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,((Integer)value).intValue() + 1);  } else   if (value instanceof Long) {    this.put(key,((Long)value).longValue() + 1);  } else   if (value instanceof Double) {    this.put(key,((Double)value).doubleValue() + 1);  } else   if (value instanceof Float) {    this.put(key,((Float)value).floatValue() + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  public static boolean createOrUpdateMaterialMovementLine(Properties ctx,int movementId,int productId,BigDecimal qtyToMove,int fromLocatorId,int toLocatorId,String trxName) throws OperationException {  if (trxName == null) {    throw new OperationException("transaction cannot be null while creating a material movement line");  }  if (movementId < 1) {    throw new OperationException("movement Id is mandatory");  }  if (productId == 0) {    throw new ProductNotFoundException("product not available");  }  MProduct product=new MProduct(ctx,productId,trxName);  if (product.getProductType().equalsIgnoreCase(MProduct.PRODUCTTYPE_Service)) {    throw new OperationException("product is a service, cannot add to stock transfer");  }  checkLocator(fromLocatorId,toLocatorId);  MMovement movement=new MMovement(ctx,movementId,trxName);  MMovementLine[] movementLine=movement.getLines(true);  boolean added=true;  if (movementLine.length > 0) {    for (int i=0; i < movementLine.length; i++) {      if (productId == movementLine[i].getM_Product_ID()) {        setLineData(movementLine[i],productId,qtyToMove,fromLocatorId,toLocatorId,trxName);        return added;      }    }  }  MMovementLine mmovementLine=new MMovementLine(ctx,0,trxName);  mmovementLine.setM_Movement_ID(movementId);  mmovementLine.setM_AttributeSetInstance_ID(0);  mmovementLine.setM_AttributeSetInstanceTo_ID(0);  setLineData(mmovementLine,productId,qtyToMove,fromLocatorId,toLocatorId,trxName);  PoManager.save(mmovementLine);  return added;}  }
class C{  protected TreeModelListener createTreeModelListener(){  return new TreeModelHandler();}  }
class C{  private void handle401Unauthorized(SipTransactionContext ctx) throws PayloadException, NetworkException {  mNb401Failures++;  if (sLogger.isActivated()) {    sLogger.info("401 response received, nbFailures=" + mNb401Failures);  }  if (mNb401Failures >= MAX_REGISTRATION_FAILURES) {    handleError(new ImsError(ImsError.REGISTRATION_FAILED,"too many 401"));    return;  }  SipResponse resp=ctx.getSipResponse();  mRegistrationProcedure.readSecurityHeader(resp);  mDialogPath.incrementCseq();  if (sLogger.isActivated()) {    sLogger.info("Send REGISTER with security token");  }  SipRequest register=SipMessageFactory.createRegister(mDialogPath,mFeatureTags,ctx.getTransaction().getRequest().getExpires().getExpires() * SECONDS_TO_MILLISECONDS_CONVERSION_RATE,mInstanceId,mRcsSettings.isSipKeepAliveEnabled());  sendRegister(register);}  }
class C{  public static void write(File file,String text,boolean writeBom) throws IOException {  write(file,text,Charset.defaultCharset().name(),writeBom);}  }
class C{  public GridSetWrapper(Map<E,?> map,Collection<? extends E> initVals){  this(map);  addAll(initVals);}  }
class C{  public boolean isDirectlyControlDependentOn(BasicBlock insBlock,Branch b){  Set<ControlFlowEdge> incomming=incomingEdgesOf(insBlock);  if (incomming.size() == 1) {    for (    ControlFlowEdge e : incomming) {      if (!e.hasControlDependency() && !e.isExceptionEdge()) {        return isDirectlyControlDependentOn(getEdgeSource(e),b);      }    }  }  boolean isRootDependent=isRootDependent(insBlock);  if (b == null)   return isRootDependent;  if (isRootDependent && b != null)   return false;  for (  ControlFlowEdge e : incomming) {    Branch current=e.getBranchInstruction();    if (e.isExceptionEdge()) {      if (current != null)       throw new IllegalStateException("expect exception edges to have no BranchInstruction set"); else       continue;    }    if (current == null)     continue;    if (current.equals(b))     return true;  }  return false;}  }
class C{  private static String stripUrl(String url){  if (url == null)   return null;  Matcher m=STRIP_URL_PATTERN.matcher(url);  if (m.matches() && m.groupCount() == 3) {    return m.group(2);  } else {    return url;  }}  }
class C{  @Override public boolean isVisible(){  if (sourceIndex != null) {    if (getDomain().isDynamic()) {      return sourceIndex.isVisible();    } else {      return !source.getDimension().isDynamic() && sourceIndex.isVisible();    }  } else {    return false;  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private int detachFrom(final JComponent comp){  assert comp instanceof JTree || comp instanceof JList;  comp.removeMouseMotionListener(this);  comp.removeMouseListener(this);  return refcount--;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public Vertex applyWHILE(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  int depth=0;  boolean condition=true;  List<Relationship> doEquations=orderedRelationships(Primitive.DO);  Vertex result=network.createVertex(Primitive.NULL);  while (condition && depth < Language.MAX_STACK) {    Vertex first=arguments.get(0).getTarget().applyQuotient(variables,network);    if (arguments.size() == 1) {      condition=first.is(Primitive.TRUE);    } else {      Vertex second=arguments.get(1).getTarget().applyQuotient(variables,network);      condition=first.matches(second,new HashMap<Vertex,Vertex>()) == Boolean.TRUE;    }    if (condition) {      for (      Relationship doEquation : doEquations) {        result=doEquation.getTarget().applyQuotient(variables,network);        if (variables.containsKey(network.createVertex(Primitive.RETURN))) {          return result;        }      }    }    depth++;  }  if (depth >= Language.MAX_STACK) {    network.getBot().log(SELF,"Max stack exceeded on while loop",Level.WARNING,Language.MAX_STACK);  }  return result;}  }
class C{  public static int hleSysClock2USec32(long sysclocks){  long micros64=hleSysClock2USec(sysclocks);  int micros32=(int)micros64;  if (micros64 > Integer.MAX_VALUE) {    micros32=Integer.MAX_VALUE;  } else   if (micros64 < Integer.MIN_VALUE) {    micros32=Integer.MIN_VALUE;  }  return micros32;}  }
class C{  @SuppressWarnings("static-access") private void resetOptionLogLevel(){  m_optionLogLevel.removeAllItems();  m_optionLogLevel.addItem(logLevelToDescription(Level.OFF));  m_optionLogLevel.addItem(logLevelToDescription(Level.SEVERE));  m_optionLogLevel.addItem(logLevelToDescription(Level.WARNING));  m_optionLogLevel.addItem(logLevelToDescription(Level.INFO));  m_optionLogLevel.addItem(logLevelToDescription(Level.CONFIG));  m_optionLogLevel.addItem(logLevelToDescription(Level.FINE));  m_optionLogLevel.addItem(logLevelToDescription(Level.FINER));  m_optionLogLevel.addItem(logLevelToDescription(Level.FINEST));  m_optionLogLevel.addItem(logLevelToDescription(Level.ALL));  m_optionLogLevel.setSelectedItem(logLevelToDescription(s_parameters.getLogLevel()));}  }
class C{  private ListenerWrapper(final IDebuggerContainerListener listener){  m_listener=listener;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  out.writeInt(length());  out.writeObject(getValue());}  }
class C{  private void updateStatistics(){  long currentTime=System.currentTimeMillis();  double diffTime=currentTime - lastTime;  double diffSeed=currentSeed - lastSeed;  double diffNFE=currentNFE - lastNFE;  double percentNFE=Double.POSITIVE_INFINITY;  double percentTime=Double.POSITIVE_INFINITY;  if (maxNFE >= 0) {    percentNFE=diffNFE / maxNFE;  }  if (maxTime >= 0) {    percentTime=diffTime / maxTime;  }  double diffPercent=Math.min(percentNFE,percentTime);  double percentChange=(diffSeed + diffPercent) / totalSeeds;  if ((diffTime > 0.0) && (percentChange > 0.0001)) {    statistics.addValue(diffTime / percentChange);    lastTime=currentTime;    lastSeed=currentSeed;    lastNFE=currentNFE;  }}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  public void testReceiveOneToOneChat(){}  }
class C{  public String toString(){  return super.toString() + " (" + getKey()+ ", bundle: "+ getClassName()+ ")";}  }
class C{  public ConsecutiveTimeFramer(){  super();  setAlighnmentOffset();}  }
class C{  public static void ArrayToProp(ArrayList<String> lines,File propFile){  BufferedWriter bw=null;  propFile.delete();  propFile.getParentFile().mkdirs();  try {    DataOutputStream dos=new DataOutputStream(new FileOutputStream(propFile));    bw=new BufferedWriter(new OutputStreamWriter(new BufferedOutputStream(dos),"UTF-8"));    for (    String str : lines) {      bw.write(str);      bw.newLine();    }    bw.flush();    bw.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public long optLong(int index,long defaultValue){  try {    return getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private Object throwIndex(int n){  if (n < 0) {    throw new IndexOutOfBoundsException("n < 0");  }  throw new IndexOutOfBoundsException("n >= size()");}  }
class C{  public int size(){  return _pos;}  }
class C{  public AuFileWriter(){  super(new AudioFileFormat.Type[]{AudioFileFormat.Type.AU});}  }
class C{  public static void swap(List list,int firstIndex,int secondIndex){  Object firstObject=list.get(firstIndex);  Object secondObject=list.get(secondIndex);  list.set(firstIndex,secondObject);  list.set(secondIndex,firstObject);}  }
class C{  public static void cancelAuthentication(){  ReprintInternal.INSTANCE.cancelAuthentication();}  }
class C{  public void testNextLongBounded(){  SplittableRandom sr=new SplittableRandom();  for (long bound=2; bound < MAX_LONG_BOUND; bound+=15485863) {    long f=sr.nextLong(bound);    assertTrue(0 <= f && f < bound);    int i=0;    long j;    while (i < NCALLS && (j=sr.nextLong(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  @Override protected void launch(){  GUILauncher.launchFrame(new Explorer(),"MEKA Explorer",true);}  }
class C{  public LabeledLineConnectionFigureSample(){}  }
class C{  public DoublesSketch build(int k){  setK(k);  return build();}  }
class C{  public void printHelp(String cmdLineSyntax,Options options,boolean autoUsage){  printHelp(defaultWidth,cmdLineSyntax,null,options,null,autoUsage);}  }
class C{  public void addObservations(int var1[][],int var2[][],int cond[][]){  int rows=var1.length;  int cols=var1[0].length;  observations+=rows * cols;  for (int r=0; r < rows; r++) {    for (int c=0; c < cols; c++) {      firstSecondCondCount[var1[r][c]][var2[r][c]][cond[r][c]]++;      firstCondCount[var1[r][c]][cond[r][c]]++;      secondCondCount[var2[r][c]][cond[r][c]]++;      condCount[cond[r][c]]++;    }  }}  }
class C{  public ISchedulingRule copyRule(IResource source,IResource destination){  return parent(destination);}  }
class C{  public void write(byte[] buffer,int offset,int length) throws IOException {  _os.write(buffer,offset,length);}  }
class C{  public static List<File> findFilesInDir(File directory,FilenameFilter filter){  Vector<File> files=new Vector<File>();  File[] entries=directory.listFiles();  for (  File entry : entries) {    if (filter == null || filter.accept(directory,entry.getName())) {      files.add(entry);    }    if (entry.isDirectory()) {      files.addAll(findFilesInDir(entry,filter));    }  }  return files;}  }
class C{  private String generateRandomToken(){  byte[] token=new byte[32];  new Random().nextBytes(token);  return Base64Utils.toBase64(token);}  }
class C{  public boolean isGranted(T tx){  if (tx == null) {    throw new NullPointerException();  }  return queue.peek() == tx;}  }
class C{  @Override public Object function(final Object[] arguments){  editor.onMouseLinkExit();  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.NOTEQUALS_OP___NOTEQUALS_OP_1:    return getNotequalsOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected CUdeviceptr(CUdeviceptr other,long byteOffset){  super(other,byteOffset);}  }
class C{  public int parseReference(String s){  this.input=s;  this.index=0;  String dest;  String title;  int matchChars;  int startIndex=index;  matchChars=parseLinkLabel();  if (matchChars == 0) {    return 0;  }  String rawLabel=input.substring(0,matchChars);  if (peek() != ':') {    return 0;  }  index++;  spnl();  dest=parseLinkDestination();  if (dest == null || dest.length() == 0) {    return 0;  }  int beforeTitle=index;  spnl();  title=parseLinkTitle();  if (title == null) {    index=beforeTitle;  }  boolean atLineEnd=true;  if (index != input.length() && match(LINE_END) == null) {    if (title == null) {      atLineEnd=false;    } else {      title=null;      index=beforeTitle;      atLineEnd=match(LINE_END) != null;    }  }  if (!atLineEnd) {    return 0;  }  String normalizedLabel=Escaping.normalizeReference(rawLabel);  if (normalizedLabel.isEmpty()) {    return 0;  }  if (!referenceMap.containsKey(normalizedLabel)) {    Link link=new Link(dest,title);    referenceMap.put(normalizedLabel,link);  }  return index - startIndex;}  }
class C{  void regionToCenterPoint(int cellX,int cellY,int spanX,int spanY,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=hStartPadding + cellX * (mCellWidth + mWidthGap) + (spanX * mCellWidth + (spanX - 1) * mWidthGap) / 2;  result[1]=vStartPadding + cellY * (mCellHeight + mHeightGap) + (spanY * mCellHeight + (spanY - 1) * mHeightGap) / 2;}  }
class C{  private void lobSave(String whereClause){  if (m_lobInfo == null)   return;  for (int i=0; i < m_lobInfo.size(); i++) {    PO_LOB lob=(PO_LOB)m_lobInfo.get(i);    lob.save(whereClause,null);  }  lobReset();}  }
class C{  private boolean isNavigationKey(KeyEvent event){  InputMap inputMap=((JComponent)event.getSource()).getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  KeyStroke key=KeyStroke.getKeyStrokeForEvent(event);  return (inputMap != null && inputMap.get(key) != null);}  }
class C{  public CompositeProcessor createCompositeProcessor(){  CompositeProcessorImpl compositeProcessor=new CompositeProcessorImpl();  return compositeProcessor;}  }
class C{  public static void reverse(byte[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  byte tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public static Ack parsePaymentAck(Protos.PaymentACK paymentAck){  final String memo=paymentAck.hasMemo() ? paymentAck.getMemo() : null;  return new Ack(memo);}  }
class C{  private void applyDataInternal(int id,PropertyBindInfo info,Array<VariableInfo> variables,boolean checkStrictly){  if (info == null) {    final ViewHelper mViewHelper=this.mViewHelper;    final IDataResolver mDataResolver=this.mDataResolver;    final SparseArray<ListenerImplContext> mListenerMap=this.mListenerMap;    final EventParseCaretaker caretaker=this.mEventCareTaker;    Array<PropertyBindInfo> array=mBindMap_viewId.get(id);    for (int i=0, size=array.size; i < size; i++) {      applyDataInternal0(id,variables,array.get(i),mViewHelper,mDataResolver,checkStrictly,mListenerMap,caretaker);    }  } else {    applyDataInternal0(id,variables,info,mViewHelper,mDataResolver,checkStrictly,mListenerMap,mEventCareTaker);  }}  }
class C{  public MExtensionFileFilter(final String extension){  this(extension,null);}  }
class C{  public void removeTexture(ATexture texture){  mTextureList.remove(texture);  texture.unregisterMaterial(this);}  }
class C{  public void repaint(){}  }
class C{  @SuppressWarnings("unchecked") public static <V extends NumberVector>NumberVector.Factory<V> guessFactory(SimpleTypeInformation<V> in){  NumberVector.Factory<V> factory=null;  if (in instanceof VectorTypeInformation) {    factory=(NumberVector.Factory<V>)((VectorTypeInformation<V>)in).getFactory();  }  if (factory == null) {    try {      Field f=in.getRestrictionClass().getField("FACTORY");      factory=(NumberVector.Factory<V>)f.get(null);    } catch (    Exception e) {      LoggingUtil.warning("Cannot determine factory for type " + in.getRestrictionClass(),e);    }  }  return factory;}  }
class C{  public void scanForPeripherals(int scanTimeoutMillis,OnDeviceDiscoveredListener deviceDiscoveredListener,OnScanCompletedListener scanCompletedListener){  Timber.d("scanForPeripherals");  mOnDeviceDiscoveredListener=deviceDiscoveredListener;  scanForPeripherals(scanTimeoutMillis,scanCompletedListener);}  }
class C{  public void addBody(String body){synchronized (bodies) {    bodies.add(body);  }}  }
class C{  public final AC count(int size){  makeSize(size);  return this;}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  this.selectionListeners.remove(listener);}  }
class C{  protected XYMultipleSeriesDataset buildDataset(String[] titles,List<double[]> xValues,List<double[]> yValues){  XYMultipleSeriesDataset dataset=new XYMultipleSeriesDataset();  addXYSeries(dataset,titles,xValues,yValues,0);  return dataset;}  }
class C{  public AggregateTranslator(final CharSequenceTranslator... translators){  this.translators=clone(translators);}  }
class C{  public void addRecord(Record r){  Name name=r.getName();  int rtype=r.getRRsetType();synchronized (this) {    RRset rrset=findRRset(name,rtype);    if (rrset == null) {      rrset=new RRset(r);      addRRset(name,rrset);    } else {      rrset.addRR(r);    }  }}  }
class C{  public boolean containsNone(int... values){  for (  int value : values) {    if (this.contains(value)) {      return false;    }  }  return true;}  }
class C{  public void testGetF19Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF19Momentary();  assertEquals(expResult,result);}  }
class C{  @Override protected void doAction(){  showCertificateSelectedEntry();}  }
class C{  public void requestHideToolTip(MouseEvent me){  requestHideToolTip();}  }
class C{  public DeviceTicket(AppProperties props){  m_deviceFiscal=new DeviceFiscalPrinterNull();  m_devicedisplay=new DeviceDisplayNull();  m_nullprinter=new DevicePrinterNull();  m_deviceprinters=new HashMap<>();  m_deviceprinterslist=new ArrayList<>();  DevicePrinter p=new DevicePrinterPanel(props);  m_deviceprinters.put("1",p);  m_deviceprinterslist.add(p);}  }
class C{  public static <K,V,R extends Map<K,V>>R rejectMapOnEntry(Map<K,V> map,Predicate2<? super K,? super V> predicate,R target){  MapIterate.forEachKeyValue(map,null);  return target;}  }
class C{  OptimizedObjectOutputStream acquireOut(){  return outAcquireCnt++ > 0 ? createOut() : out;}  }
class C{  public IItemRequest buildRequest(final List<Option> options){  return new ItemRequest(getRequestUrl(),getClient(),options);}  }
class C{  @SuppressFBWarnings(value="EI_EXPOSE_REP",justification="intended exposure of mutable data") public Date toDate(){  if (this.date == null && this.year != -1) {    Calendar cal=Calendar.getInstance(FitsDate.GMT);    cal.set(Calendar.YEAR,this.year);    cal.set(Calendar.MONTH,this.month - 1);    cal.set(Calendar.DAY_OF_MONTH,this.mday);    if (FitsDate.LOG.isLoggable(Level.FINEST)) {      FitsDate.LOG.log(Level.FINEST,"At this point:" + cal.getTime());    }    if (this.hour == -1) {      cal.set(Calendar.HOUR_OF_DAY,0);      cal.set(Calendar.MINUTE,0);      cal.set(Calendar.SECOND,0);      cal.set(Calendar.MILLISECOND,0);      if (FitsDate.LOG.isLoggable(Level.FINEST)) {        FitsDate.LOG.log(Level.FINEST,"2At this point:" + cal.getTime());      }    } else {      cal.set(Calendar.HOUR_OF_DAY,this.hour);      cal.set(Calendar.MINUTE,this.minute);      cal.set(Calendar.SECOND,this.second);      if (this.millisecond == -1) {        cal.set(Calendar.MILLISECOND,0);      } else {        cal.set(Calendar.MILLISECOND,this.millisecond);      }      if (FitsDate.LOG.isLoggable(Level.FINEST)) {        FitsDate.LOG.log(Level.FINEST,"3At this point:" + cal.getTime());      }    }    this.date=cal.getTime();  }  if (FitsDate.LOG.isLoggable(Level.FINEST)) {    FitsDate.LOG.log(Level.FINEST,"  date:" + this.date);    FitsDate.LOG.log(Level.FINEST,"  year:" + this.year);    FitsDate.LOG.log(Level.FINEST,"  month:" + this.month);    FitsDate.LOG.log(Level.FINEST,"  mday:" + this.mday);    FitsDate.LOG.log(Level.FINEST,"  hour:" + this.hour);  }  return this.date;}  }
class C{  public Vertex parseAIMLTemplate(String code,Network network){  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder parser=factory.newDocumentBuilder();    StringReader reader=new StringReader(code);    InputSource source=new InputSource(reader);    Document document=parser.parse(source);    Element root=document.getDocumentElement();    String template=getTemplate(root,false,false,new boolean[1],false,false,false,network);    return network.createTemplate(template);  } catch (  Exception exception) {    network.getBot().log(this,exception);    return null;  }}  }
class C{  public void refreshZoomLevel(){  if (baseScaleImage == null) {    return;  }  image=bv.getScaledImage(baseScaleImage,false);}  }
class C{  public String firstMatch(String pattern){  return firstMatch(pattern,0);}  }
class C{  public static void initializeTypes(){  EquipmentType.addType(new ISMediumLaser());  EquipmentType.addType(new ISMediumLaserPrimitive());  EquipmentType.addType(new ISLargeLaser());  EquipmentType.addType(new ISLargeLaserPrimitive());  EquipmentType.addType(new ISSmallLaser());  EquipmentType.addType(new ISSmallLaserPrimitive());  EquipmentType.addType(new ISLargePulseLaser());  EquipmentType.addType(new ISLargePulseLaserPrototype());  EquipmentType.addType(new ISLargeXPulseLaser());  EquipmentType.addType(new ISERLargeLaser());  EquipmentType.addType(new ISERLargeLaserPrototype());  EquipmentType.addType(new ISERMediumLaser());  EquipmentType.addType(new ISMediumPulseLaser());  EquipmentType.addType(new ISMediumPulseLaserPrototype());  EquipmentType.addType(new ISMediumXPulseLaser());  EquipmentType.addType(new ISSmallPulseLaser());  EquipmentType.addType(new ISSmallXPulseLaser());  EquipmentType.addType(new ISSmallPulseLaserPrototype());  EquipmentType.addType(new ISERSmallLaser());  EquipmentType.addType(new ISMediumVariableSpeedPulseLaser());  EquipmentType.addType(new ISSmallVariableSpeedPulseLaser());  EquipmentType.addType(new ISLargeVariableSpeedPulseLaser());  EquipmentType.addType(new ISBinaryLaserCannon());  EquipmentType.addType(new ISBombastLaser());  EquipmentType.addType(new CLERLargeLaser());  EquipmentType.addType(new CLHeavyLargeLaser());  EquipmentType.addType(new CLLargePulseLaser());  EquipmentType.addType(new CLERLargePulseLaser());  EquipmentType.addType(new CLERMediumLaser());  EquipmentType.addType(new CLERMediumLaserPrototype());  EquipmentType.addType(new CLHeavyMediumLaser());  EquipmentType.addType(new CLMediumPulseLaser());  EquipmentType.addType(new CLERMediumPulseLaser());  EquipmentType.addType(new CLERSmallLaser());  EquipmentType.addType(new CLERSmallLaserPrototype());  EquipmentType.addType(new CLSmallPulseLaser());  EquipmentType.addType(new CLERSmallPulseLaser());  EquipmentType.addType(new CLHeavySmallLaser());  EquipmentType.addType(new CLERMicroLaser());  EquipmentType.addType(new CLMicroPulseLaser());  EquipmentType.addType(new CLImprovedHeavyLargeLaser());  EquipmentType.addType(new CLImprovedHeavyMediumLaser());  EquipmentType.addType(new CLImprovedHeavySmallLaser());  EquipmentType.addType(new CLLargeChemicalLaser());  EquipmentType.addType(new CLMediumChemicalLaser());  EquipmentType.addType(new CLSmallChemicalLaser());  EquipmentType.addType(new ISPPC());  EquipmentType.addType(new ISPPCPrimitive());  EquipmentType.addType(new ISERPPC());  EquipmentType.addType(new ISEHERPPC());  EquipmentType.addType(new CLERPPC());  EquipmentType.addType(new ISSnubNosePPC());  EquipmentType.addType(new ISLightPPC());  EquipmentType.addType(new ISHeavyPPC());  EquipmentType.addType(new ISHERPPC());  EquipmentType.addType(new ISBASupportPPC());  EquipmentType.addType(new CLBASupportPPC());  EquipmentType.addType(new CLFlamer());  EquipmentType.addType(new ISFlamer());  EquipmentType.addType(new CLVehicleFlamer());  EquipmentType.addType(new ISVehicleFlamer());  EquipmentType.addType(new CLHeavyFlamer());  EquipmentType.addType(new ISHeavyFlamer());  EquipmentType.addType(new ISERFlamer());  EquipmentType.addType(new CLERFlamer());  EquipmentType.addType(new ISAC2());  EquipmentType.addType(new ISAC5());  EquipmentType.addType(new ISAC10());  EquipmentType.addType(new ISAC20());  EquipmentType.addType(new CLProtoMechAC2());  EquipmentType.addType(new CLProtoMechAC4());  EquipmentType.addType(new CLProtoMechAC8());  EquipmentType.addType(new ISAC2Primitive());  EquipmentType.addType(new ISAC5Primitive());  EquipmentType.addType(new ISAC10Primitive());  EquipmentType.addType(new ISAC20Primitive());  EquipmentType.addType(new ISUAC2());  EquipmentType.addType(new ISUAC5());  EquipmentType.addType(new ISUAC5Prototype());  EquipmentType.addType(new ISUAC10());  EquipmentType.addType(new ISUAC20());  EquipmentType.addType(new ISTHBUAC2());  EquipmentType.addType(new ISTHBUAC10());  EquipmentType.addType(new ISTHBUAC20());  EquipmentType.addType(new CLUAC2());  EquipmentType.addType(new CLUAC2Prototype());  EquipmentType.addType(new CLUAC5());  EquipmentType.addType(new CLUAC10());  EquipmentType.addType(new CLUAC10Prototype());  EquipmentType.addType(new CLUAC20());  EquipmentType.addType(new CLUAC20Prototype());  EquipmentType.addType(new ISLB2XAC());  EquipmentType.addType(new ISLB5XAC());  EquipmentType.addType(new ISLB10XAC());  EquipmentType.addType(new ISLB10XACPrototype());  EquipmentType.addType(new ISLB20XAC());  EquipmentType.addType(new CLLB2XAC());  EquipmentType.addType(new CLLB2XACPrototype());  EquipmentType.addType(new CLLB5XAC());  EquipmentType.addType(new CLLB5XACPrototype());  EquipmentType.addType(new CLLB10XAC());  EquipmentType.addType(new CLLB20XAC());  EquipmentType.addType(new CLLB20XACPrototype());  EquipmentType.addType(new ISTHBLB2XAC());  EquipmentType.addType(new ISTHBLB5XAC());  EquipmentType.addType(new ISTHBLB20XAC());  EquipmentType.addType(new ISRAC2());  EquipmentType.addType(new ISRAC5());  EquipmentType.addType(new ISLAC2());  EquipmentType.addType(new ISLAC5());  EquipmentType.addType(new ISLAC10());  EquipmentType.addType(new ISLAC20());  EquipmentType.addType(new ISHVAC2());  EquipmentType.addType(new ISHVAC5());  EquipmentType.addType(new ISHVAC10());  EquipmentType.addType(new ISGaussRifle());  EquipmentType.addType(new ISGaussRiflePrototype());  EquipmentType.addType(new ISSilverBulletGauss());  EquipmentType.addType(new CLGaussRifle());  EquipmentType.addType(new ISLGaussRifle());  EquipmentType.addType(new ISHGaussRifle());  EquipmentType.addType(new ISIHGaussRifle());  EquipmentType.addType(new CLHAG20());  EquipmentType.addType(new CLHAG30());  EquipmentType.addType(new CLHAG40());  EquipmentType.addType(new CLAPGaussRifle());  EquipmentType.addType(new ISMG());  EquipmentType.addType(new ISLightMG());  EquipmentType.addType(new ISHeavyMG());  EquipmentType.addType(new ISMGA());  EquipmentType.addType(new ISLightMGA());  EquipmentType.addType(new ISHeavyMGA());  EquipmentType.addType(new CLMG());  EquipmentType.addType(new CLLightMG());  EquipmentType.addType(new CLHeavyMG());  EquipmentType.addType(new CLMGA());  EquipmentType.addType(new CLLightMGA());  EquipmentType.addType(new CLHeavyMGA());  EquipmentType.addType(new ISLRM1());  EquipmentType.addType(new ISLRM1OS());  EquipmentType.addType(new ISLRM2());  EquipmentType.addType(new ISLRM2OS());  EquipmentType.addType(new ISLRM3());  EquipmentType.addType(new ISLRM3OS());  EquipmentType.addType(new ISLRM4());  EquipmentType.addType(new ISLRM4OS());  EquipmentType.addType(new ISLRM5());  EquipmentType.addType(new ISLRM10());  EquipmentType.addType(new ISLRM15());  EquipmentType.addType(new ISLRM20());  EquipmentType.addType(new ISLRM5OS());  EquipmentType.addType(new ISLRM10OS());  EquipmentType.addType(new ISLRM15OS());  EquipmentType.addType(new ISLRM20OS());  EquipmentType.addType(new CLLRM1());  EquipmentType.addType(new CLLRM1OS());  EquipmentType.addType(new CLLRM2());  EquipmentType.addType(new CLLRM2OS());  EquipmentType.addType(new CLLRM3());  EquipmentType.addType(new CLLRM3OS());  EquipmentType.addType(new CLLRM4());  EquipmentType.addType(new CLLRM4OS());  EquipmentType.addType(new CLLRM5());  EquipmentType.addType(new CLLRM6());  EquipmentType.addType(new CLLRM7());  EquipmentType.addType(new CLLRM8());  EquipmentType.addType(new CLLRM9());  EquipmentType.addType(new CLLRM10());  EquipmentType.addType(new CLLRM11());  EquipmentType.addType(new CLLRM12());  EquipmentType.addType(new CLLRM13());  EquipmentType.addType(new CLLRM14());  EquipmentType.addType(new CLLRM15());  EquipmentType.addType(new CLLRM16());  EquipmentType.addType(new CLLRM17());  EquipmentType.addType(new CLLRM18());  EquipmentType.addType(new CLLRM19());  EquipmentType.addType(new CLLRM20());  EquipmentType.addType(new CLLRM5OS());  EquipmentType.addType(new CLLRM10OS());  EquipmentType.addType(new CLLRM15OS());  EquipmentType.addType(new CLLRM20OS());  EquipmentType.addType(new CLStreakLRM1());  EquipmentType.addType(new CLStreakLRM2());  EquipmentType.addType(new CLStreakLRM3());  EquipmentType.addType(new CLStreakLRM4());  EquipmentType.addType(new CLStreakLRM5());  EquipmentType.addType(new CLStreakLRM6());  EquipmentType.addType(new CLStreakLRM7());  EquipmentType.addType(new CLStreakLRM8());  EquipmentType.addType(new CLStreakLRM9());  EquipmentType.addType(new CLStreakLRM10());  EquipmentType.addType(new CLStreakLRM11());  EquipmentType.addType(new CLStreakLRM12());  EquipmentType.addType(new CLStreakLRM13());  EquipmentType.addType(new CLStreakLRM14());  EquipmentType.addType(new CLStreakLRM15());  EquipmentType.addType(new CLStreakLRM16());  EquipmentType.addType(new CLStreakLRM17());  EquipmentType.addType(new CLStreakLRM18());  EquipmentType.addType(new CLStreakLRM19());  EquipmentType.addType(new CLStreakLRM20());  EquipmentType.addType(new CLStreakLRM1OS());  EquipmentType.addType(new CLStreakLRM2OS());  EquipmentType.addType(new CLStreakLRM3OS());  EquipmentType.addType(new CLStreakLRM4OS());  EquipmentType.addType(new CLStreakLRM5OS());  EquipmentType.addType(new CLStreakLRM6OS());  EquipmentType.addType(new CLStreakLRM7OS());  EquipmentType.addType(new CLStreakLRM8OS());  EquipmentType.addType(new CLStreakLRM9OS());  EquipmentType.addType(new CLStreakLRM10OS());  EquipmentType.addType(new CLStreakLRM11OS());  EquipmentType.addType(new CLStreakLRM12OS());  EquipmentType.addType(new CLStreakLRM13OS());  EquipmentType.addType(new CLStreakLRM14OS());  EquipmentType.addType(new CLStreakLRM15OS());  EquipmentType.addType(new CLStreakLRM16OS());  EquipmentType.addType(new CLStreakLRM17OS());  EquipmentType.addType(new CLStreakLRM18OS());  EquipmentType.addType(new CLStreakLRM19OS());  EquipmentType.addType(new CLStreakLRM20OS());  EquipmentType.addType(new ISExtendedLRM5());  EquipmentType.addType(new ISExtendedLRM10());  EquipmentType.addType(new ISExtendedLRM15());  EquipmentType.addType(new ISExtendedLRM20());  EquipmentType.addType(new ISEnhancedLRM5());  EquipmentType.addType(new ISEnhancedLRM10());  EquipmentType.addType(new ISEnhancedLRM15());  EquipmentType.addType(new ISEnhancedLRM20());  EquipmentType.addType(new ISLRM5Primitive());  EquipmentType.addType(new ISLRM10Primitive());  EquipmentType.addType(new ISLRM15Primitive());  EquipmentType.addType(new ISLRM20Primitive());  EquipmentType.addType(new ISLRT5());  EquipmentType.addType(new ISLRT10());  EquipmentType.addType(new ISLRT15());  EquipmentType.addType(new ISLRT20());  EquipmentType.addType(new ISLRT5OS());  EquipmentType.addType(new ISLRT10OS());  EquipmentType.addType(new ISLRT15OS());  EquipmentType.addType(new ISLRT20OS());  EquipmentType.addType(new CLLRT1());  EquipmentType.addType(new CLLRT2());  EquipmentType.addType(new CLLRT3());  EquipmentType.addType(new CLLRT4());  EquipmentType.addType(new CLLRT5());  EquipmentType.addType(new CLLRT6());  EquipmentType.addType(new CLLRT7());  EquipmentType.addType(new CLLRT8());  EquipmentType.addType(new CLLRT9());  EquipmentType.addType(new CLLRT10());  EquipmentType.addType(new CLLRT11());  EquipmentType.addType(new CLLRT12());  EquipmentType.addType(new CLLRT13());  EquipmentType.addType(new CLLRT14());  EquipmentType.addType(new CLLRT15());  EquipmentType.addType(new CLLRT16());  EquipmentType.addType(new CLLRT17());  EquipmentType.addType(new CLLRT18());  EquipmentType.addType(new CLLRT19());  EquipmentType.addType(new CLLRT20());  EquipmentType.addType(new CLLRT5OS());  EquipmentType.addType(new CLLRT10OS());  EquipmentType.addType(new CLLRT15OS());  EquipmentType.addType(new CLLRT20OS());  EquipmentType.addType(new ISSRM1());  EquipmentType.addType(new ISSRM2());  EquipmentType.addType(new ISSRM3());  EquipmentType.addType(new ISSRM4());  EquipmentType.addType(new ISSRM5());  EquipmentType.addType(new ISSRM6());  EquipmentType.addType(new ISSRM1OS());  EquipmentType.addType(new ISSRM2OS());  EquipmentType.addType(new ISSRM3OS());  EquipmentType.addType(new ISSRM4OS());  EquipmentType.addType(new ISSRM5OS());  EquipmentType.addType(new ISSRM6OS());  EquipmentType.addType(new CLSRM1());  EquipmentType.addType(new CLSRM1OS());  EquipmentType.addType(new CLSRM2());  EquipmentType.addType(new CLSRM3());  EquipmentType.addType(new CLSRM3OS());  EquipmentType.addType(new CLSRM4());  EquipmentType.addType(new CLSRM5());  EquipmentType.addType(new CLSRM5OS());  EquipmentType.addType(new CLSRM6());  EquipmentType.addType(new CLSRM2OS());  EquipmentType.addType(new CLSRM4OS());  EquipmentType.addType(new CLSRM6OS());  EquipmentType.addType(new ISStreakSRM2());  EquipmentType.addType(new ISStreakSRM4());  EquipmentType.addType(new ISStreakSRM6());  EquipmentType.addType(new ISStreakSRM2OS());  EquipmentType.addType(new ISStreakSRM4OS());  EquipmentType.addType(new ISStreakSRM6OS());  EquipmentType.addType(new CLStreakSRM1());  EquipmentType.addType(new CLStreakSRM2());  EquipmentType.addType(new CLStreakSRM3());  EquipmentType.addType(new CLStreakSRM4());  EquipmentType.addType(new CLStreakSRM4Prototype());  EquipmentType.addType(new CLStreakSRM5());  EquipmentType.addType(new CLStreakSRM6());  EquipmentType.addType(new CLStreakSRM6Prototype());  EquipmentType.addType(new CLStreakSRM2OS());  EquipmentType.addType(new CLStreakSRM4OS());  EquipmentType.addType(new CLStreakSRM6OS());  EquipmentType.addType(new ISSRM2Primitive());  EquipmentType.addType(new ISSRM4Primitive());  EquipmentType.addType(new ISSRM6Primitive());  EquipmentType.addType(new ISSRT2());  EquipmentType.addType(new ISSRT4());  EquipmentType.addType(new ISSRT6());  EquipmentType.addType(new ISSRT2OS());  EquipmentType.addType(new ISSRT4OS());  EquipmentType.addType(new ISSRT6OS());  EquipmentType.addType(new CLSRT2());  EquipmentType.addType(new CLSRT4());  EquipmentType.addType(new CLSRT6());  EquipmentType.addType(new CLSRT2OS());  EquipmentType.addType(new CLSRT4OS());  EquipmentType.addType(new CLSRT6OS());  EquipmentType.addType(new ISRL1());  EquipmentType.addType(new ISRL2());  EquipmentType.addType(new ISRL3());  EquipmentType.addType(new ISRL4());  EquipmentType.addType(new ISRL5());  EquipmentType.addType(new ISRL10());  EquipmentType.addType(new ISRL15());  EquipmentType.addType(new ISPrimRL15());  EquipmentType.addType(new ISRL20());  EquipmentType.addType(new CLPrototypeRL10());  EquipmentType.addType(new CLPrototypeRL15());  EquipmentType.addType(new CLPrototypeRL20());  EquipmentType.addType(new CLATM3());  EquipmentType.addType(new CLATM6());  EquipmentType.addType(new CLATM9());  EquipmentType.addType(new CLATM12());  EquipmentType.addType(new CLIATM3());  EquipmentType.addType(new CLIATM6());  EquipmentType.addType(new CLIATM9());  EquipmentType.addType(new CLIATM12());  EquipmentType.addType(new ISMRM1());  EquipmentType.addType(new ISMRM2());  EquipmentType.addType(new ISMRM3());  EquipmentType.addType(new ISMRM4());  EquipmentType.addType(new ISMRM5());  EquipmentType.addType(new ISMRM1OS());  EquipmentType.addType(new ISMRM2OS());  EquipmentType.addType(new ISMRM3OS());  EquipmentType.addType(new ISMRM4OS());  EquipmentType.addType(new ISMRM5OS());  EquipmentType.addType(new ISMRM10());  EquipmentType.addType(new ISMRM20());  EquipmentType.addType(new ISMRM30());  EquipmentType.addType(new ISMRM40());  EquipmentType.addType(new ISMRM10OS());  EquipmentType.addType(new ISMRM20OS());  EquipmentType.addType(new ISMRM30OS());  EquipmentType.addType(new ISMRM40OS());  EquipmentType.addType(new ISNarc());  EquipmentType.addType(new ISNarcOS());  EquipmentType.addType(new ISNarcIOS());  EquipmentType.addType(new CLNarc());  EquipmentType.addType(new CLNarcOS());  EquipmentType.addType(new CLNarcIOS());  EquipmentType.addType(new ISImprovedNarc());  EquipmentType.addType(new ISImprovedNarcOS());  EquipmentType.addType(new ISAMS());  EquipmentType.addType(new ISLaserAMS());  EquipmentType.addType(new ISLaserAMSTHB());  EquipmentType.addType(new CLAMS());  EquipmentType.addType(new CLLaserAMS());  EquipmentType.addType(new ISLightTAG());  EquipmentType.addType(new ISTAG());  EquipmentType.addType(new ISC3M());  EquipmentType.addType(new ISC3MBS());  EquipmentType.addType(new CLLightTAG());  EquipmentType.addType(new CLTAG());  EquipmentType.addType(new ISBALightTAG());  EquipmentType.addType(new CLBALightTAG());  EquipmentType.addType(new ISMML3());  EquipmentType.addType(new ISMML5());  EquipmentType.addType(new ISMML7());  EquipmentType.addType(new ISMML9());  EquipmentType.addType(new ISLongTom());  EquipmentType.addType(new ISThumper());  EquipmentType.addType(new ISSniper());  EquipmentType.addType(new ISArrowIV());  EquipmentType.addType(new CLLongTom());  EquipmentType.addType(new CLSniper());  EquipmentType.addType(new CLThumper());  EquipmentType.addType(new CLArrowIV());  EquipmentType.addType(new ISBATubeArtillery());  EquipmentType.addType(new ISLongTomCannon());  EquipmentType.addType(new ISThumperCannon());  EquipmentType.addType(new ISSniperCannon());  EquipmentType.addType(new CLLongTomCannon());  EquipmentType.addType(new CLSniperCannon());  EquipmentType.addType(new CLThumperCannon());  EquipmentType.addType(new CLPlasmaRifle());  EquipmentType.addType(new CLRAC2());  EquipmentType.addType(new CLRAC5());  EquipmentType.addType(new CLRAC10());  EquipmentType.addType(new CLRAC20());  EquipmentType.addType(new ISRailGun());  EquipmentType.addType(new ISFluidGun());  EquipmentType.addType(new CLFluidGun());  EquipmentType.addType(new ISCenturionWeaponSystem());  EquipmentType.addType(new ISMagshotGaussRifle());  EquipmentType.addType(new ISMPod());  EquipmentType.addType(new CLMPod());  EquipmentType.addType(new ISBPod());  EquipmentType.addType(new CLBPod());  EquipmentType.addType(new ISThunderBolt5());  EquipmentType.addType(new ISThunderBolt10());  EquipmentType.addType(new ISThunderBolt15());  EquipmentType.addType(new ISThunderBolt20());  EquipmentType.addType(new ISMekTaser());  EquipmentType.addType(new ISNailGun());  EquipmentType.addType(new ISRivetGun());  EquipmentType.addType(new CLNailGun());  EquipmentType.addType(new CLRivetGun());  EquipmentType.addType(new ISLightRifle());  EquipmentType.addType(new ISMediumRifle());  EquipmentType.addType(new ISHeavyRifle());  EquipmentType.addType(new ISVehicularGrenadeLauncher());  EquipmentType.addType(new CLVehicularGrenadeLauncher());  EquipmentType.addType(new ISC3RemoteSensorLauncher());  EquipmentType.addType(new LegAttack());  EquipmentType.addType(new SwarmAttack());  EquipmentType.addType(new SwarmWeaponAttack());  EquipmentType.addType(new StopSwarmAttack());  EquipmentType.addType(new InfantryRifleLaserWeapon());  EquipmentType.addType(new InfantrySupportLRMWeapon());  EquipmentType.addType(new InfantrySupportLightSRMInfernoWeapon());  EquipmentType.addType(new InfantrySupportPortableFlamerWeapon());  EquipmentType.addType(new InfantryTWFlamerWeapon());  EquipmentType.addType(new InfantryArchaicAxeWeapon());  EquipmentType.addType(new InfantryArchaicBasicCrossbowWeapon());  EquipmentType.addType(new InfantryArchaicBlackjackWeapon());  EquipmentType.addType(new InfantryArchaicBokkenWeapon());  EquipmentType.addType(new InfantryArchaicCarbonReinforcedNailsWeapon());  EquipmentType.addType(new InfantryArchaicClanVibroSwordWeapon());  EquipmentType.addType(new InfantryArchaicCompoundBowWeapon());  EquipmentType.addType(new InfantryArchaicDaggerWeapon());  EquipmentType.addType(new InfantryArchaicDaikyuBowWeapon());  EquipmentType.addType(new InfantryArchaicDaoWeapon());  EquipmentType.addType(new InfantryArchaicDoubleStunStaffWeapon());  EquipmentType.addType(new InfantryArchaicHankyuBowWeapon());  EquipmentType.addType(new InfantryArchaicHatchetWeapon());  EquipmentType.addType(new InfantryArchaicHeavyCrossbowWeapon());  EquipmentType.addType(new InfantryArchaicImprovisedClubWeapon());  EquipmentType.addType(new InfantryArchaicKatanaWeapon());  EquipmentType.addType(new InfantryArchaicLongBowWeapon());  EquipmentType.addType(new InfantryArchaicMedusaWhipWeapon());  EquipmentType.addType(new InfantryArchaicMiniStunstickWeapon());  EquipmentType.addType(new InfantryArchaicMonowireWeapon());  EquipmentType.addType(new InfantryArchaicNeuralLashWeapon());  EquipmentType.addType(new InfantryArchaicNeuralWhipWeapon());  EquipmentType.addType(new InfantryArchaicNoDachiWeapon());  EquipmentType.addType(new InfantryArchaicNunchakuWeapon());  EquipmentType.addType(new InfantryArchaicPolearmWeapon());  EquipmentType.addType(new InfantryArchaicShortBowWeapon());  EquipmentType.addType(new InfantryArchaicShurikenWeapon());  EquipmentType.addType(new InfantryArchaicSingleStunStaffWeapon());  EquipmentType.addType(new InfantryArchaicStaffWeapon());  EquipmentType.addType(new InfantryArchaicStunstickWeapon());  EquipmentType.addType(new InfantryArchaicSwordWeapon());  EquipmentType.addType(new InfantryArchaicVibroAxeWeapon());  EquipmentType.addType(new InfantryArchaicVibroBladeWeapon());  EquipmentType.addType(new InfantryArchaicVibroKatanaWeapon());  EquipmentType.addType(new InfantryArchaicVibroSwordWeapon());  EquipmentType.addType(new InfantryArchaicWakizashiWeapon());  EquipmentType.addType(new InfantryArchaicWhipWeapon());  EquipmentType.addType(new InfantryArchaicYumiBowWeapon());  EquipmentType.addType(new InfantryArchaicPrimitiveBowWeapon());  EquipmentType.addType(new InfantryArchaicBladeArchaicSwordWeapon());  EquipmentType.addType(new InfantryArchaicBladeZweihanderSwordWeapon());  EquipmentType.addType(new InfantryArchaicBladeJoustingLanceWeapon());  EquipmentType.addType(new InfantryArchaicWhipWeapon());  EquipmentType.addType(new InfantryArchaicShockStaffWeapon());  EquipmentType.addType(new InfantryPistolAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolAutoPistolNissanWeapon());  EquipmentType.addType(new InfantryPistolBlazerPistolWeapon());  EquipmentType.addType(new InfantryPistolClanERLaserPistolWeapon());  EquipmentType.addType(new InfantryPistolClanGaussPistolWeapon());  EquipmentType.addType(new InfantryPistolClanPulseLaserPistolWeapon());  EquipmentType.addType(new InfantryPistolCoventryHandrocketGyrojetPistolWeapon());  EquipmentType.addType(new InfantryPistolDartGunWeapon());  EquipmentType.addType(new InfantryPistolFlamerPistolWeapon());  EquipmentType.addType(new InfantryPistolFlarePistolWeapon());  EquipmentType.addType(new InfantryPistolGyrojetPistolWeapon());  EquipmentType.addType(new InfantryPistolHawkEagleAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolHoldoutGyrojetPistolWeapon());  EquipmentType.addType(new InfantryPistolHoldOutLaserPistolWeapon());  EquipmentType.addType(new InfantryPistolHoldoutNeedlerPistolWeapon());  EquipmentType.addType(new InfantryPistolHoldoutPistolWeapon());  EquipmentType.addType(new InfantryPistolLaserPistolWeapon());  EquipmentType.addType(new InfantryPistolMagnumRevolverWeapon());  EquipmentType.addType(new InfantryPistolMakeshiftPistolWeapon());  EquipmentType.addType(new InfantryPistolMandrakeGaussPistolWeapon());  EquipmentType.addType(new InfantryPistolMartialEagleMachinePistolWeapon());  EquipmentType.addType(new InfantryPistolMauserAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolMauserNeedlerPistolWeapon());  EquipmentType.addType(new InfantryPistolMagnumAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolMydronAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolNakjimaLaserPistolWeapon());  EquipmentType.addType(new InfantryPistolNambuAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolNeedlerPistolWeapon());  EquipmentType.addType(new InfantryPistolPaintGunPistolWeapon());  EquipmentType.addType(new InfantryPistolPulseLaserPistolWeapon());  EquipmentType.addType(new InfantryPistolRevolverWeapon());  EquipmentType.addType(new InfantryPistolSeaEagleNeedlerPistolWeapon());  EquipmentType.addType(new InfantryPistolSerrekAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolSonicStunnerWeapon());  EquipmentType.addType(new InfantryPistolSpitballGasPistolWeapon());  EquipmentType.addType(new InfantryPistolSternsnachtPistolWeapon());  EquipmentType.addType(new InfantryPistolSternsnachtPythonAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolStettaAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolSunbeamLaserPistolWeapon());  EquipmentType.addType(new InfantryPistolSunbeamNovaLaserPistolWeapon());  EquipmentType.addType(new InfantryPistolTKEnforcerAutoPistolWeapon());  EquipmentType.addType(new InfantryPistolTranqGunWeapon());  EquipmentType.addType(new InfantryPistolWhiteDwarfLaserPistolWeapon());  EquipmentType.addType(new InfantryPistoMachinePistolSPEC7AWeapon());  EquipmentType.addType(new InfantryPistolVintageWeapon());  EquipmentType.addType(new InfantryRifleAutoRifleWeapon());  EquipmentType.addType(new InfantryRifleBlazerRifleWeapon());  EquipmentType.addType(new InfantryRifleBoltActionSniperWeapon());  EquipmentType.addType(new InfantryRifleBoltActionWeapon());  EquipmentType.addType(new InfantryRifleClanERLaserWeapon());  EquipmentType.addType(new InfantryRifleClanMauserIICIASInfernoWeapon());  EquipmentType.addType(new InfantryRifleClanMauserIICIASWeapon());  EquipmentType.addType(new InfantryRifleClanPulseLaserWeapon());  EquipmentType.addType(new InfantryRifleEbonyAssaultLaserWeapon());  EquipmentType.addType(new InfantryRifleElephantGunWeapon());  EquipmentType.addType(new InfantryRifleFederatedBarrettM42BInfernoWeapon());  EquipmentType.addType(new InfantryRifleFederatedBarrettM42BWeapon());  EquipmentType.addType(new InfantryRifleFederatedBarrettM61ALaserInfernoWeapon());  EquipmentType.addType(new InfantryRifleFederatedBarrettM61ALaserWeapon());  EquipmentType.addType(new InfantryRifleFederatedLongWeapon());  EquipmentType.addType(new InfantryRifleGyrojetWeapon());  EquipmentType.addType(new InfantryRifleGyroslugCarbineWeapon());  EquipmentType.addType(new InfantryRifleGyroslugRifleWeapon());  EquipmentType.addType(new InfantryRifleHeavyGyrojetGunWeapon());  EquipmentType.addType(new InfantryRifleImperatorAX22AssaultWeapon());  EquipmentType.addType(new InfantryRifleIntekLaserWeapon());  EquipmentType.addType(new InfantryRifleMagnaLaserWeapon());  EquipmentType.addType(new InfantryRifleMakeshiftWeapon());  EquipmentType.addType(new InfantryRifleMarxXXLaserWeapon());  EquipmentType.addType(new InfantryRifleMauser1200LSSWeapon());  EquipmentType.addType(new InfantryRifleMauser960LaserWeapon());  EquipmentType.addType(new InfantryRifleMauserG150Weapon());  EquipmentType.addType(new InfantryRifleMaxellPL10LaserWeapon());  EquipmentType.addType(new InfantryRifleMGFlechetteNeedlerWeapon());  EquipmentType.addType(new InfantryRifleMinolta9000Weapon());  EquipmentType.addType(new InfantryRifleNeedlerWeapon());  EquipmentType.addType(new InfantryRiflePulseLaserWeapon());  EquipmentType.addType(new InfantryRifleRadiumLaserSniperWeapon());  EquipmentType.addType(new InfantryRifleShredderHeavyNeedlerWeapon());  EquipmentType.addType(new InfantryRifleStarKingGyroslugCarbineWeapon());  EquipmentType.addType(new InfantryRifleSunbeamStarfireERLaserWeapon());  EquipmentType.addType(new InfantryRifleThunderstrokeIIWeapon());  EquipmentType.addType(new InfantryRifleThunderstrokeWeapon());  EquipmentType.addType(new InfantryRifleTKAssaultWeapon());  EquipmentType.addType(new InfantryRifleZeusHeavyWeapon());  EquipmentType.addType(new InfantryRifleVintageWeapon());  EquipmentType.addType(new InfantryRifleVSPLaserWeapon());  EquipmentType.addType(new InfantryShotgunAutomaticWeapon());  EquipmentType.addType(new InfantryShotgunAvengerCCWWeapon());  EquipmentType.addType(new InfantryShotgunBuccaneerGelGunWeapon());  EquipmentType.addType(new InfantryShotgunCeresCrowdbusterWeapon());  EquipmentType.addType(new InfantryShotgunCombatWeapon());  EquipmentType.addType(new InfantryShotgunDoubleBarrelWeapon());  EquipmentType.addType(new InfantryShotgunPumpActionWeapon());  EquipmentType.addType(new InfantryShotgunSawnoffDoubleBarrelWeapon());  EquipmentType.addType(new InfantryShotgunSawnoffPumpActionWeapon());  EquipmentType.addType(new InfantryShotgunWakazashiWeapon());  EquipmentType.addType(new InfantrySupportPortableMGWeapon());  EquipmentType.addType(new InfantrySupportMk1LightAAWeapon());  EquipmentType.addType(new InfantrySupportMk2PortableAAWeapon());  EquipmentType.addType(new InfantrySupportClanBearhunterAutocannonWeapon());  EquipmentType.addType(new InfantrySupportPortableAutocannonWeapon());  EquipmentType.addType(new InfantrySupportHeavyFlamerWeapon());  EquipmentType.addType(new InfantrySupportGrandMaulerGaussCannonWeapon());  EquipmentType.addType(new InfantrySupportMagshotGaussRifleWeapon());  EquipmentType.addType(new InfantrySupportTsunamiHeavyGaussRifleWeapon());  EquipmentType.addType(new InfantrySupportDavidLightGaussRifleWeapon());  EquipmentType.addType(new InfantrySupportKingDavidLightGaussRifleWeapon());  EquipmentType.addType(new InfantrySupportGrenadeLauncherWeapon());  EquipmentType.addType(new InfantrySupportGrenadeLauncherInfernoWeapon());  EquipmentType.addType(new InfantrySupportAutoGrenadeLauncherWeapon());  EquipmentType.addType(new InfantrySupportAutoGrenadeLauncherInfernoWeapon());  EquipmentType.addType(new InfantrySupportCompactGrenadeLauncherWeapon());  EquipmentType.addType(new InfantrySupportHeavyGrenadeLauncherWeapon());  EquipmentType.addType(new InfantrySupportHeavyGrenadeLauncherInfernoWeapon());  EquipmentType.addType(new InfantrySupportHeavyAutoGrenadeLauncherWeapon());  EquipmentType.addType(new InfantrySupportHeavyAutoGrenadeLauncherInfernoWeapon());  EquipmentType.addType(new InfantrySupportHellboreAssaultLaserWeapon());  EquipmentType.addType(new InfantrySupportLightMachineGunWeapon());  EquipmentType.addType(new InfantrySupportHeavyMachineGunWeapon());  EquipmentType.addType(new InfantrySupportHeavyMortarWeapon());  EquipmentType.addType(new InfantrySupportHeavyMortarInfernoWeapon());  EquipmentType.addType(new InfantrySupportLightMortarWeapon());  EquipmentType.addType(new InfantrySupportLightMortarInfernoWeapon());  EquipmentType.addType(new InfantrySupportOneShotMRMWeapon());  EquipmentType.addType(new InfantrySupportFiredrakeNeedlerWeapon());  EquipmentType.addType(new InfantrySupportPortablePPCWeapon());  EquipmentType.addType(new InfantrySupportHeavyPPCWeapon());  EquipmentType.addType(new InfantrySupportPortablePlasmaWeapon());  EquipmentType.addType(new InfantrySupportDragonsbaneDisposablePulseLaserWeapon());  EquipmentType.addType(new InfantrySupportHeavyRecoillessRifleWeapon());  EquipmentType.addType(new InfantrySupportHeavyRecoillessRifleInfernoWeapon());  EquipmentType.addType(new InfantrySupportLightRecoillessRifleWeapon());  EquipmentType.addType(new InfantrySupportLightRecoillessRifleInfernoWeapon());  EquipmentType.addType(new InfantrySupportMediumRecoillessRifleWeapon());  EquipmentType.addType(new InfantrySupportMediumRecoillessRifleInfernoWeapon());  EquipmentType.addType(new InfantrySupportLAWWeapon());  EquipmentType.addType(new InfantrySupportVLAWWeapon());  EquipmentType.addType(new InfantrySupportStandardSRMWeapon());  EquipmentType.addType(new InfantrySupportStandardSRMInfernoWeapon());  EquipmentType.addType(new InfantrySupportHeavySRMWeapon());  EquipmentType.addType(new InfantrySupportHeavySRMInfernoWeapon());  EquipmentType.addType(new InfantrySupportLightSRMWeapon());  EquipmentType.addType(new InfantrySupportLaserWeapon());  EquipmentType.addType(new InfantrySupportERLaserWeapon());  EquipmentType.addType(new InfantrySupportClanERLaserWeapon());  EquipmentType.addType(new InfantrySupportHeavyLaserWeapon());  EquipmentType.addType(new InfantrySupportERHeavyLaserWeapon());  EquipmentType.addType(new InfantrySupportClanERHeavyLaserWeapon());  EquipmentType.addType(new InfantrySupportClanSemiPortableHeavyLaserWeapon());  EquipmentType.addType(new InfantrySupportClanSemiPortableERLaserWeapon());  EquipmentType.addType(new InfantrySupportSemiPortableLaserWeapon());  EquipmentType.addType(new InfantrySupportPulseLaserWeapon());  EquipmentType.addType(new InfantrySupportHeavyPulseLaserWeapon());  EquipmentType.addType(new InfantrySupportClanSemiPortablePulseLaserWeapon());  EquipmentType.addType(new InfantrySupportUltraHeavyLaserWeapon());  EquipmentType.addType(new InfantrySupportVintageMGWeapon());  EquipmentType.addType(new InfantrySupportVintageMiniGunWeapon());  EquipmentType.addType(new InfantrySupportVintageGatlingGunWeapon());  EquipmentType.addType(new InfantrySupportWireGuidedMissileWeapon());  EquipmentType.addType(new InfantrySupportGungnirHeavyGaussWeapon());  EquipmentType.addType(new InfantrySupportMagPulseHarpoonWeapon());  EquipmentType.addType(new InfantrySupportSnubNoseSupportPPCWeapon());  EquipmentType.addType(new InfantryGrenadeInfernoWeapon());  EquipmentType.addType(new InfantryGrenadeMicroWeapon());  EquipmentType.addType(new InfantryGrenadeMiniInfernoWeapon());  EquipmentType.addType(new InfantryGrenadeRAGWeapon());  EquipmentType.addType(new InfantryGrenadeStandardWeapon());  EquipmentType.addType(new InfantrySMGClanGaussWeapon());  EquipmentType.addType(new InfantrySMGGuntherMP20Weapon());  EquipmentType.addType(new InfantrySMGImperator2894A1Weapon());  EquipmentType.addType(new InfantrySMGKA23SubgunWeapon());  EquipmentType.addType(new InfantrySMGRorynexRM3XXIWeapon());  EquipmentType.addType(new InfantrySMGRuganWeapon());  EquipmentType.addType(new InfantrySMGWeapon());  EquipmentType.addType(new InfantryProstheticLaserWeapon());  EquipmentType.addType(new InfantryProstheticBallisticWeapon());  EquipmentType.addType(new InfantryProstheticDartgunWeapon());  EquipmentType.addType(new InfantryProstheticNeedlerWeapon());  EquipmentType.addType(new InfantryProstheticShotgunWeapon());  EquipmentType.addType(new InfantryProstheticSonicStunnerWeapon());  EquipmentType.addType(new InfantryProstheticSMGWeapon());  EquipmentType.addType(new InfantryProstheticBladeWeapon());  EquipmentType.addType(new InfantryProstheticNeedleWeapon());  EquipmentType.addType(new InfantryProstheticShockerWeapon());  EquipmentType.addType(new InfantryProstheticVibroBladeWeapon());  EquipmentType.addType(new InfantryProstheticClimbingClawsWeapon());  EquipmentType.addType(new ISFireExtinguisher());  EquipmentType.addType(new CLFireExtinguisher());  EquipmentType.addType(new ISPlasmaRifle());  EquipmentType.addType(new CLPlasmaCannon());  EquipmentType.addType(new ISMekMortar1());  EquipmentType.addType(new ISMekMortar2());  EquipmentType.addType(new ISMekMortar4());  EquipmentType.addType(new ISMekMortar8());  EquipmentType.addType(new CLMekMortar1());  EquipmentType.addType(new CLMekMortar2());  EquipmentType.addType(new CLMekMortar4());  EquipmentType.addType(new CLMekMortar8());  EquipmentType.addType(new CLAdvancedSRM1());  EquipmentType.addType(new CLAdvancedSRM1OS());  EquipmentType.addType(new CLAdvancedSRM2());  EquipmentType.addType(new CLAdvancedSRM2OS());  EquipmentType.addType(new CLAdvancedSRM3());  EquipmentType.addType(new CLAdvancedSRM3OS());  EquipmentType.addType(new CLAdvancedSRM4());  EquipmentType.addType(new CLAdvancedSRM4OS());  EquipmentType.addType(new CLAdvancedSRM5());  EquipmentType.addType(new CLAdvancedSRM5OS());  EquipmentType.addType(new CLAdvancedSRM6());  EquipmentType.addType(new CLAdvancedSRM6OS());  EquipmentType.addType(new CLBAAPGaussRifle());  EquipmentType.addType(new CLBABearhunterSuperheavyAC());  EquipmentType.addType(new CLBAERMediumLaser());  EquipmentType.addType(new CLBAERMediumPulseLaser());  EquipmentType.addType(new CLBAERMicroLaser());  EquipmentType.addType(new CLBAERSmallLaser());  EquipmentType.addType(new CLBAERSmallPulseLaser());  EquipmentType.addType(new CLBAFlamer());  EquipmentType.addType(new CLBAHeavyFlamer());  EquipmentType.addType(new CLBAHeavyGrenadeLauncher());  EquipmentType.addType(new CLBAHeavyMediumLaser());  EquipmentType.addType(new CLBAHeavyMG());  EquipmentType.addType(new CLBAHeavyRecoillessRifle());  EquipmentType.addType(new CLBAHeavySmallLaser());  EquipmentType.addType(new CLBALBX());  EquipmentType.addType(new CLBALightMG());  EquipmentType.addType(new CLBALightRecoillessRifle());  EquipmentType.addType(new CLBALRM1());  EquipmentType.addType(new CLBALRM1OS());  EquipmentType.addType(new CLBALRM2());  EquipmentType.addType(new CLBALRM2OS());  EquipmentType.addType(new CLBALRM3());  EquipmentType.addType(new CLBALRM3OS());  EquipmentType.addType(new CLBALRM4());  EquipmentType.addType(new CLBALRM4OS());  EquipmentType.addType(new CLBALRM5());  EquipmentType.addType(new CLBALRM5OS());  EquipmentType.addType(new CLBAMediumPulseLaser());  EquipmentType.addType(new CLBAMediumRecoillessRifle());  EquipmentType.addType(new CLBAMG());  EquipmentType.addType(new CLBAMicroPulseLaser());  EquipmentType.addType(new CLBASmallLaser());  EquipmentType.addType(new CLBASmallPulseLaser());  EquipmentType.addType(new CLBASRM1());  EquipmentType.addType(new CLBASRM1OS());  EquipmentType.addType(new CLBASRM2());  EquipmentType.addType(new CLBASRM2OS());  EquipmentType.addType(new CLBASRM3());  EquipmentType.addType(new CLBASRM3OS());  EquipmentType.addType(new CLBASRM4());  EquipmentType.addType(new CLBASRM4OS());  EquipmentType.addType(new CLBASRM5());  EquipmentType.addType(new CLBASRM5OS());  EquipmentType.addType(new CLBASRM6());  EquipmentType.addType(new CLBASRM6OS());  EquipmentType.addType(new CLBAMicroBomb());  EquipmentType.addType(new CLBACompactNarc());  EquipmentType.addType(new ISBAERMediumLaser());  EquipmentType.addType(new ISBAERSmallLaser());  EquipmentType.addType(new ISBAFlamer());  EquipmentType.addType(new ISBAHeavyFlamer());  EquipmentType.addType(new ISBAHeavyMG());  EquipmentType.addType(new ISBALightMG());  EquipmentType.addType(new ISBAMagshotGaussRifle());  EquipmentType.addType(new ISBAMediumLaser());  EquipmentType.addType(new ISBAMediumPulseLaser());  EquipmentType.addType(new ISBAMG());  EquipmentType.addType(new ISBAPlasmaRifle());  EquipmentType.addType(new ISBASmallLaser());  EquipmentType.addType(new ISBASmallPulseLaser());  EquipmentType.addType(new ISBASmallVariableSpeedPulseLaser());  EquipmentType.addType(new ISBAMediumVariableSpeedPulseLaser());  EquipmentType.addType(new ISBATaser());  EquipmentType.addType(new ISBACompactNarc());  EquipmentType.addType(new ISBADavidLightGaussRifle());  EquipmentType.addType(new ISBAFiredrakeNeedler());  EquipmentType.addType(new ISBAGrandMaulerGaussCannon());  EquipmentType.addType(new ISBAHeavyGrenadeLauncher());  EquipmentType.addType(new ISBAHeavyMortar());  EquipmentType.addType(new ISBAHeavyRecoillessRifle());  EquipmentType.addType(new ISBAKingDavidLightGaussRifle());  EquipmentType.addType(new ISBALightMortar());  EquipmentType.addType(new ISBALightRecoillessRifle());  EquipmentType.addType(new ISBAMediumRecoillessRifle());  EquipmentType.addType(new ISBAMicroGrenadeLauncher());  EquipmentType.addType(new ISBAGrenadeLauncher());  EquipmentType.addType(new ISBAPopUpMineLauncher());  EquipmentType.addType(new ISBATsunamiGaussRifle());  EquipmentType.addType(new ISBASRM1());  EquipmentType.addType(new ISBASRM2());  EquipmentType.addType(new ISBASRM3());  EquipmentType.addType(new ISBASRM4());  EquipmentType.addType(new ISBASRM5());  EquipmentType.addType(new ISBASRM6());  EquipmentType.addType(new ISBALRM1());  EquipmentType.addType(new ISBALRM2());  EquipmentType.addType(new ISBALRM3());  EquipmentType.addType(new ISBALRM4());  EquipmentType.addType(new ISBALRM5());  EquipmentType.addType(new ISBAMRM1());  EquipmentType.addType(new ISBAMRM2());  EquipmentType.addType(new ISBAMRM3());  EquipmentType.addType(new ISBAMRM4());  EquipmentType.addType(new ISBAMRM5());  EquipmentType.addType(new ISBASRM1OS());  EquipmentType.addType(new ISBASRM2OS());  EquipmentType.addType(new ISBASRM3OS());  EquipmentType.addType(new ISBASRM4OS());  EquipmentType.addType(new ISBASRM5OS());  EquipmentType.addType(new ISBASRM6OS());  EquipmentType.addType(new ISBALRM1OS());  EquipmentType.addType(new ISBALRM2OS());  EquipmentType.addType(new ISBALRM3OS());  EquipmentType.addType(new ISBALRM4OS());  EquipmentType.addType(new ISBALRM5OS());  EquipmentType.addType(new ISBAMRM1OS());  EquipmentType.addType(new ISBAMRM2OS());  EquipmentType.addType(new ISBAMRM3OS());  EquipmentType.addType(new ISBAMRM4OS());  EquipmentType.addType(new ISBAMRM5OS());  EquipmentType.addType(new ISBARL1());  EquipmentType.addType(new ISBARL2());  EquipmentType.addType(new ISBARL3());  EquipmentType.addType(new ISBARL4());  EquipmentType.addType(new ISBARL5());  EquipmentType.addType(new CLBABearhunterSuperheavyACi());  EquipmentType.addType(new ISCruiseMissile50());  EquipmentType.addType(new ISCruiseMissile70());  EquipmentType.addType(new ISCruiseMissile90());  EquipmentType.addType(new ISCruiseMissile120());  EquipmentType.addType(new ISAC10i());  EquipmentType.addType(new ISAC15());  EquipmentType.addType(new ISGAC2());  EquipmentType.addType(new ISGAC4());  EquipmentType.addType(new ISGAC6());  EquipmentType.addType(new ISGAC8());  EquipmentType.addType(new CLWERPPC());  EquipmentType.addType(new ISNL35Weapon());  EquipmentType.addType(new ISNL45Weapon());  EquipmentType.addType(new ISNL55Weapon());  EquipmentType.addType(new CLNL35Weapon());  EquipmentType.addType(new CLNL45Weapon());  EquipmentType.addType(new CLNL55Weapon());  EquipmentType.addType(new ISNPPCWeaponLight());  EquipmentType.addType(new ISNPPCWeaponMedium());  EquipmentType.addType(new ISNPPCWeaponHeavy());  EquipmentType.addType(new CLNPPCWeaponLight());  EquipmentType.addType(new CLNPPCWeaponMedium());  EquipmentType.addType(new CLNPPCWeaponHeavy());  EquipmentType.addType(new NAC10Weapon());  EquipmentType.addType(new NAC20Weapon());  EquipmentType.addType(new NAC25Weapon());  EquipmentType.addType(new NAC30Weapon());  EquipmentType.addType(new NAC35Weapon());  EquipmentType.addType(new NAC40Weapon());  EquipmentType.addType(new ISNGaussWeaponLight());  EquipmentType.addType(new ISNGaussWeaponMedium());  EquipmentType.addType(new ISNGaussWeaponHeavy());  EquipmentType.addType(new CLNGaussWeaponLight());  EquipmentType.addType(new CLNGaussWeaponMedium());  EquipmentType.addType(new CLNGaussWeaponHeavy());  EquipmentType.addType(new ISBarracudaWeapon());  EquipmentType.addType(new ISWhiteSharkWeapon());  EquipmentType.addType(new ISKillerWhaleWeapon());  EquipmentType.addType(new CLBarracudaWeapon());  EquipmentType.addType(new CLWhiteSharkWeapon());  EquipmentType.addType(new CLKillerWhaleWeapon());  EquipmentType.addType(new ISBarracudaTWeapon());  EquipmentType.addType(new WhiteSharkTWeapon());  EquipmentType.addType(new KillerWhaleTWeapon());  EquipmentType.addType(new KrakenTWeapon());  EquipmentType.addType(new ISKrakenWeapon());  EquipmentType.addType(new ISAR10Weapon());  EquipmentType.addType(new CLAR10Weapon());  EquipmentType.addType(new ScreenLauncherWeapon());  EquipmentType.addType(new ISSCCWeaponLight());  EquipmentType.addType(new ISSCCWeaponMedium());  EquipmentType.addType(new ISSCCWeaponHeavy());  EquipmentType.addType(new CLSCCWeaponLight());  EquipmentType.addType(new CLSCCWeaponMedium());  EquipmentType.addType(new CLSCCWeaponHeavy());  EquipmentType.addType(new ISSCL1Weapon());  EquipmentType.addType(new ISSCL2Weapon());  EquipmentType.addType(new ISSCL3Weapon());  EquipmentType.addType(new CLSCL1Weapon());  EquipmentType.addType(new CLSCL2Weapon());  EquipmentType.addType(new CLSCL3Weapon());  EquipmentType.addType(new ISPiranhaWeapon());  EquipmentType.addType(new ISStingrayWeapon());  EquipmentType.addType(new ISSwordfishWeapon());  EquipmentType.addType(new ISMantaRayWeapon());  EquipmentType.addType(new CLPiranhaWeapon());  EquipmentType.addType(new CLStingrayWeapon());  EquipmentType.addType(new CLSwordfishWeapon());  EquipmentType.addType(new CLMantaRayWeapon());  EquipmentType.addType(new ISMassDriverHeavy());  EquipmentType.addType(new ISMassDriverMedium());  EquipmentType.addType(new ISMassDriverLight());  EquipmentType.addType(new ISAAAMissileWeapon());  EquipmentType.addType(new CLAAAMissileWeapon());  EquipmentType.addType(new ASMissileWeapon());  EquipmentType.addType(new ASEWMissileWeapon());  EquipmentType.addType(new ISLAAMissileWeapon());  EquipmentType.addType(new CLLAAMissileWeapon());  EquipmentType.addType(new BombArrowIV());  EquipmentType.addType(new BombTAG());  EquipmentType.addType(new BombISRL10());  EquipmentType.addType(new AlamoMissileWeapon());  EquipmentType.addType(new SpaceBombAttack());  EquipmentType.addType(new DiveBombAttack());  EquipmentType.addType(new AltitudeBombAttack());  EquipmentType.addType(new LaserBayWeapon());  EquipmentType.addType(new PointDefenseBayWeapon());  EquipmentType.addType(new PPCBayWeapon());  EquipmentType.addType(new PulseLaserBayWeapon());  EquipmentType.addType(new ArtilleryBayWeapon());  EquipmentType.addType(new PlasmaBayWeapon());  EquipmentType.addType(new ACBayWeapon());  EquipmentType.addType(new LBXBayWeapon());  EquipmentType.addType(new LRMBayWeapon());  EquipmentType.addType(new SRMBayWeapon());  EquipmentType.addType(new MRMBayWeapon());  EquipmentType.addType(new MMLBayWeapon());  EquipmentType.addType(new ATMBayWeapon());  EquipmentType.addType(new RLBayWeapon());  EquipmentType.addType(new CapitalLaserBayWeapon());  EquipmentType.addType(new CapitalACBayWeapon());  EquipmentType.addType(new CapitalGaussBayWeapon());  EquipmentType.addType(new CapitalPPCBayWeapon());  EquipmentType.addType(new CapitalMissileBayWeapon());  EquipmentType.addType(new CapitalMDBayWeapon());  EquipmentType.addType(new ISAR10BayWeapon());  EquipmentType.addType(new CLAR10BayWeapon());  EquipmentType.addType(new ScreenLauncherBayWeapon());  EquipmentType.addType(new SCCBayWeapon());  EquipmentType.addType(new SCLBayWeapon());  EquipmentType.addType(new SubCapitalMissileBayWeapon());  EquipmentType.addType(new MiscBayWeapon());  EquipmentType.addType(new ISLRM5IOS());  EquipmentType.addType(new ISLRM10IOS());  EquipmentType.addType(new ISLRM15IOS());  EquipmentType.addType(new ISLRM20IOS());  EquipmentType.addType(new CLLRM5IOS());  EquipmentType.addType(new CLLRM10IOS());  EquipmentType.addType(new CLLRM15IOS());  EquipmentType.addType(new CLLRM20IOS());  EquipmentType.addType(new CLStreakLRM10IOS());  EquipmentType.addType(new CLStreakLRM15IOS());  EquipmentType.addType(new CLStreakLRM20IOS());  EquipmentType.addType(new ISLRT5IOS());  EquipmentType.addType(new ISLRT10IOS());  EquipmentType.addType(new ISLRT15IOS());  EquipmentType.addType(new ISLRT20IOS());  EquipmentType.addType(new CLLRT5IOS());  EquipmentType.addType(new CLLRT10IOS());  EquipmentType.addType(new CLLRT15IOS());  EquipmentType.addType(new CLLRT20IOS());  EquipmentType.addType(new ISSRM2IOS());  EquipmentType.addType(new ISSRM4IOS());  EquipmentType.addType(new ISSRM6IOS());  EquipmentType.addType(new CLSRM2IOS());  EquipmentType.addType(new CLSRM4IOS());  EquipmentType.addType(new CLSRM6IOS());  EquipmentType.addType(new ISStreakSRM2IOS());  EquipmentType.addType(new ISStreakSRM4IOS());  EquipmentType.addType(new ISStreakSRM6IOS());  EquipmentType.addType(new CLStreakSRM2IOS());  EquipmentType.addType(new CLStreakSRM4IOS());  EquipmentType.addType(new CLStreakSRM6IOS());  EquipmentType.addType(new ISSRT2IOS());  EquipmentType.addType(new ISSRT4IOS());  EquipmentType.addType(new ISSRT6IOS());  EquipmentType.addType(new CLSRT2IOS());  EquipmentType.addType(new CLSRT4IOS());  EquipmentType.addType(new CLSRT6IOS());  EquipmentType.addType(new ISMRM10IOS());  EquipmentType.addType(new ISMRM20IOS());  EquipmentType.addType(new ISMRM30IOS());  EquipmentType.addType(new ISMRM40IOS());  EquipmentType.addType(new ISSmallReengineeredLaser());  EquipmentType.addType(new ISMediumReengineeredLaser());  EquipmentType.addType(new ISLargeReengineeredLaser());  EquipmentType.addType(new ISTSEMPCannon());  EquipmentType.addType(new ISTSEMPOneShot());  EquipmentType.addType(new ISTSEMPRepeatingCannon());  EquipmentType.addType(new ISAPDS());  EquipmentType.addType(new ISBAAPDS());  EquipmentType.addType(new ISRISCHyperLaser());}  }
class C{  public double[][] predictIntervals(double conf){  updateMeanAndVariance();  double val=Statistics.normalInverse(1.0 - (1.0 - conf) / 2.0);  double[][] arr=new double[1][2];  arr[0][1]=m_Mean + val * Math.sqrt(m_Variance);  arr[0][0]=m_Mean - val * Math.sqrt(m_Variance);  return arr;}  }
class C{  public ChunkSeqReaderIdatRaw(OutputStream rawOs,OutputStream idatOs){  super();  this.rawOs=rawOs;  this.idatOs=idatOs;  bufferChunks=false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.DATABASE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.454 -0500",hash_original_method="B7B8BDC3019EC6DD4050CE3C3C2D0B33",hash_generated_method="F7A9BFB62194C0AAA6AC372A893B199F") public void bind(int index,byte[] value){  if (value == null) {    mPreparedStatement.bindNull(index);  } else {    mPreparedStatement.bindBlob(index,value);  }}  }
class C{  public void testInit(){  System.out.println("NerdyIterativeRobot IterativeRobot.testInit() method... Overload me!");}  }
class C{  @Override public boolean isOperational(){  return socketValid;}  }
class C{  public ValueModelContactRecord(String name,ArrayListContactRecord defaultValue){  super(name,defaultValue);}  }
class C{  public static void nodesToPath(PathDataNode[] node,Path path){  float[] current=new float[4];  char previousCommand='m';  for (int i=0; i < node.length; i++) {    addCommand(path,current,previousCommand,node[i].mType,node[i].mParams);    previousCommand=node[i].mType;  }}  }
class C{  public static CaretAndSelectionState extractCaretAndSelectionMarkers(Document document){  return extractCaretAndSelectionMarkers(document,true);}  }
class C{  private void startCamera(){  Intent takePictureIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(mCameraFile)));  startActivityForResult(takePictureIntent,CAMERA_REQUEST_CODE);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public void createPassiveAgents(Scenario scenario){  PopulationFactory pFactory=scenario.getPopulation().getFactory();  for (Integer i=0; i < 5; i++) {    for (Integer j=0; j < 4; j++) {      String idpart=i.toString() + j.toString();      Person person=pFactory.createPerson(Id.create("passive_" + idpart,Person.class));      double xCoord=6563. + (i + 1) * 625;      double yCoord=7188. + (j - 1) * 625;      Plan plan=pFactory.createPlan();      Coord coord=new Coord(xCoord,yCoord);      Activity home=pFactory.createActivityFromCoord("home",coord);      home.setEndTime(1.0);      Leg leg=pFactory.createLeg(TransportMode.walk);      Coord coord2=new Coord(xCoord,yCoord + 1.);      Activity home2=pFactory.createActivityFromCoord("home",coord2);      plan.addActivity(home);      plan.addLeg(leg);      plan.addActivity(home2);      person.addPlan(plan);      scenario.getPopulation().addPerson(person);    }  }}  }
class C{  public static boolean supportsTray(){  return _supportsTray;}  }
class C{  private static boolean createConstraintOnPostgres(ConnectionSource connectionSource,String constraintName,String constraintStatement) throws SQLException {  Preconditions.checkArgument(isUnquotedSqlIdentifier(constraintName),"invalid constraint name: %s",constraintName);  if (!(connectionSource.getDatabaseType() instanceof PostgresDatabaseType)) {    logger.warn("Not creating constraint {}: DB is not Postgres",constraintName);    return false;  }  String queryString="SELECT count(*) FROM pg_constraint WHERE conname = '" + constraintName + "';";  long constraintCount=connectionSource.getReadOnlyConnection().queryForLong(queryString);  if (constraintCount != 0) {    assert constraintCount == 1;    return false;  }  logger.info("Creating constraint {}",constraintName);  connectionSource.getReadWriteConnection().executeStatement(constraintStatement,DatabaseConnection.DEFAULT_RESULT_FLAGS);  assert connectionSource.getReadOnlyConnection().queryForLong(queryString) == 1;  return true;}  }
class C{  static RegisterOperand InsertLoadOffsetJTOC(Instruction s,IR ir,Operator operator,TypeReference type,Offset offset){  return InsertLoadOffset(s,ir,operator,type,ir.regpool.makeJTOCOp(),AC(offset),new LocationOperand(offset),null);}  }
class C{  @Override public String routing(){  return this.routing;}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public void testInvalidWithDefault(){  int[] zeroArray=new int[0];  int[] oneArray=new int[1];  IntegerConverter intConverter=new IntegerConverter();  assertEquals("Null Default",null,new ArrayConverter(int[].class,intConverter,-1).convert(int[].class,null));  checkArray("Zero Length",zeroArray,new ArrayConverter(int[].class,intConverter,0).convert(int[].class,null));  checkArray("One Length",oneArray,new ArrayConverter(Integer[].class,intConverter,1).convert(int[].class,null));}  }
class C{  public void xMaxYMax() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMAX;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  if (count == 0) {    return "";  }  int wasted=value.length - count;  if (wasted >= 256 || (wasted >= INITIAL_CAPACITY && wasted >= (count >> 1))) {    return new String(value,0,count);  }  shared=true;  return new String(0,count,value);}  }
class C{  public static final double[] plusTimesEquals(final double[] v1,final double[] v2,final double s2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  for (int i=0; i < v1.length; i++) {    v1[i]+=s2 * v2[i];  }  return v1;}  }
class C{  protected Command showMenuDialog(Dialog menu){  UIManager manager=parent.getUIManager();  boolean pref=manager.isThemeConstant("menuPrefSizeBool",false);  int height;  int marginLeft;  int marginRight=0;  if (pref) {    Container dialogContentPane=menu.getDialogComponent();    marginLeft=parent.getWidth() - (dialogContentPane.getPreferredW() + menu.getStyle().getPadding(LEFT) + menu.getStyle().getPadding(RIGHT));    marginLeft=Math.max(0,marginLeft);    if (parent.getSoftButtonCount() > 1) {      height=parent.getHeight() - parent.getSoftButton(0).getParent().getPreferredH() - dialogContentPane.getPreferredH();    } else {      height=parent.getHeight() - dialogContentPane.getPreferredH();    }    height=Math.max(0,height);  } else {    float menuWidthPercent=1 - Float.parseFloat(manager.getThemeConstant("menuWidthPercent","75")) / 100;    float menuHeightPercent=1 - Float.parseFloat(manager.getThemeConstant("menuHeightPercent","50")) / 100;    height=(int)(parent.getHeight() * menuHeightPercent);    marginLeft=(int)(parent.getWidth() * menuWidthPercent);  }  if (isReverseSoftButtons()) {    marginRight=marginLeft;    marginLeft=0;  }  if (getCommandBehavior() == Display.COMMAND_BEHAVIOR_ICS) {    menu.setTransitionOutAnimator(transitionIn);    menu.setTransitionInAnimator(transitionOut);    int th=getTitleAreaContainer().getHeight();    return menu.show(th,height - th,marginLeft,marginRight,true);  } else {    if (manager.getLookAndFeel().isTouchMenus() && manager.isThemeConstant("PackTouchMenuBool",true)) {      return menu.showPacked(BorderLayout.SOUTH,true);    } else {      return menu.show(height,0,marginLeft,marginRight,true);    }  }}  }
class C{  @NonNull public static String checkNullOrNotEmpty(String str,@Nullable Object errorMessage){  if (str != null) {    checkNotEmpty(str,errorMessage);  }  return str;}  }
class C{  private static void parserManifestAttribute(XmlResourceParser xmlResourceParser,PackageLite mPackageLite){  for (int i=0; i < xmlResourceParser.getAttributeCount(); i++) {    String value=xmlResourceParser.getAttributeName(i);    if (value.equalsIgnoreCase("package")) {      mPackageLite.packageName=xmlResourceParser.getAttributeValue(i);    }    if (value.equals("versionCode")) {      mPackageLite.versionCode=xmlResourceParser.getAttributeIntValue(i,0);    } else     if (value.equals("versionName")) {      mPackageLite.versionName=xmlResourceParser.getAttributeValue(i);    }  }}  }
class C{  public void done(RemoteCall call) throws RemoteException {  throw new UnsupportedOperationException(versionComplaint);}  }
class C{  public boolean remove(Object e){  if (e == null)   return false;  Class<?> eClass=e.getClass();  if (eClass != elementType && eClass.getSuperclass() != elementType)   return false;  long oldElements=elements;  elements&=~(1L << ((Enum<?>)e).ordinal());  return elements != oldElements;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoActDirRecA[");  buffer.append("m_volId = ").append(m_volId);  buffer.append(", m_actDir = ").append(m_actDir);  buffer.append(", m_numFiles = ").append(m_numFiles);  buffer.append("]");  return buffer.toString();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public StringPrintWriter(){  super(new StringWriter());}  }
class C{  public final void checkPatientsInside(List returned){  for (Enumeration e=inside.elements(); e.hasMoreElements(); ) {    Patient p=(Patient)e.nextElement();    p.timeLeft-=1;    if (p.timeLeft == 0) {      freePersonnel++;      inside.delete(p);      returned.add(p);    }  }}  }
class C{  @Override public String write(List<EvaluationStatistics> stats){  m_Statistics.addAll(stats);  return null;}  }
class C{  @Override public String generateURL(XYDataset dataset,int series,int item){  return getURL(series,item);}  }
class C{  public LengthListParser(){  lengthHandler=DefaultLengthListHandler.INSTANCE;}  }
class C{  public DoubleArrayList quantileElements(DoubleArrayList phis){  if (precomputeEpsilon <= 0.0)   return super.quantileElements(phis);  int quantilesToPrecompute=(int)Utils.epsilonCeiling(1.0 / precomputeEpsilon);  phis=phis.copy();  double e=precomputeEpsilon;  for (int index=phis.size(); --index >= 0; ) {    double phi=phis.get(index);    int i=(int)Math.round(((2.0 * phi / e) - 1.0) / 2.0);    i=Math.min(quantilesToPrecompute - 1,Math.max(0,i));    double augmentedPhi=(e / 2.0) * (1 + 2 * i);    phis.set(index,augmentedPhi);  }  return super.quantileElements(phis);}  }
class C{  public boolean matches(Line.Info info){  if (!(super.matches(info))) {    return false;  }  if (!(name.equals(((Info)info).getName()))) {    return false;  }  if (!(isSource == ((Info)info).isSource())) {    return false;  }  return true;}  }
class C{  public String readNullTerminatedString(){  if (bytesLeft() == 0) {    return null;  }  int stringLimit=position;  while (stringLimit < limit && data[stringLimit] != 0) {    stringLimit++;  }  final int length=stringLimit - position;  String result=new String(data,position,length,Charset.defaultCharset());  position=stringLimit;  if (position == limit) {    return result;  }  position++;  return result;}  }
class C{  private static int partition(double[] array,int[] index,int l,int r,double pivot){  r--;  while (true) {    while ((array[index[++l]] < pivot)) {      ;    }    while ((array[index[--r]] > pivot)) {      ;    }    if (l >= r) {      return l;    }    swap(index,l,r);  }}  }
class C{  public void updateBytes(int columnIndex,byte x[]) throws SQLException {  checkUpdatable();  getField(columnIndex).setBytes(x);}  }
class C{  private static String[] splitWorker(String str,char separatorChar,boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  List list=new ArrayList();  int i=0, start=0;  boolean match=false;  boolean lastMatch=false;  while (i < len) {    if (str.charAt(i) == separatorChar) {      if (match || preserveAllTokens) {        list.add(str.substring(start,i));        match=false;        lastMatch=true;      }      start=++i;      continue;    }    lastMatch=false;    match=true;    i++;  }  if (match || (preserveAllTokens && lastMatch)) {    list.add(str.substring(start,i));  }  return (String[])list.toArray(new String[list.size()]);}  }
class C{  public void removeAllEpisodes(){  int oldValue=episodes.size();  if (episodes.size() > 0) {    for (int i=episodes.size() - 1; i >= 0; i--) {      TvShowEpisode episode=episodes.get(i);      episodes.remove(episode);      episode.removePropertyChangeListener(propertyChangeListener);      TvShowList.getInstance().removeEpisodeFromDb(episode);    }  }  firePropertyChange(EPISODE_COUNT,oldValue,episodes.size());}  }
class C{  @Override public String prefix() throws Exception {  return m_root.prefix();}  }
class C{  public Transform(double radians,double translateX,double translateY){  this(radians,1.0,1.0,translateX,translateY);}  }
class C{  public void tagSpan(Span span,String key,String value){  if (span != null && span.isExportable()) {    span.tag(key,value);  }}  }
class C{  public static int binarySearchCeil(long[] a,long key,boolean inclusive,boolean stayInBounds){  int index=Arrays.binarySearch(a,key);  index=index < 0 ? ~index : (inclusive ? index : (index + 1));  return stayInBounds ? Math.min(a.length - 1,index) : index;}  }
class C{  public boolean readBoundary(){  byte[] marker=new byte[2];  boolean nextChunk;  head+=boundaryLength;  try {    marker[0]=readByte();    if (marker[0] == LF) {      return true;    }    marker[1]=readByte();    if (arrayequals(marker,STREAM_TERMINATOR,2)) {      nextChunk=false;    } else     if (arrayequals(marker,FIELD_SEPARATOR,2)) {      nextChunk=true;    } else {      throw new MalformedStreamException("Unexpected characters follow a boundary");    }  } catch (  IOException e) {    throw new MalformedStreamException("Stream ended unexpectedly");  }  return nextChunk;}  }
class C{  private void delete(TransportUnit transportUnit) throws RemovalNotAllowedException {  if (LOGGER.isDebugEnabled() && onRemovalListener == null) {    LOGGER.debug("No listener onRemove defined, just try to delete it");  }  if (null == onRemovalListener || onRemovalListener.preRemove(transportUnit)) {    dao.delete(transportUnit);  }}  }
class C{  public static String loadStreamContent(InputStream stream) throws IOException {  StringBuilder content=new StringBuilder();  BufferedReader reader=new BufferedReader(new InputStreamReader(stream,"UTF-8"));  try {    char[] buff=new char[1024];    int i=0;    while ((i=reader.read(buff)) != -1) {      content.append(buff,0,i);    }  }  finally {    reader.close();  }  return content.toString();}  }
class C{  public void connected(){synchronized (this) {    if (idleReconnectFuture != null)     idleReconnectFuture.cancel(false);    scheduleIdleTask(idleTimeoutMsec.get(),false);  }}  }
class C{  public Row(int numCols,Object[] vals){  origVals=new Object[numCols];  System.arraycopy(vals,0,origVals,0,numCols);  currentVals=new Object[numCols];  colsChanged=new BitSet(numCols);  this.numCols=numCols;}  }
class C{  public View create(Element elem){  return new PasswordView(elem);}  }
class C{  public void createSubUsageScenario03() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(120.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO03_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO03_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.hoursToMillis(150.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO03_PERUNIT_HOUR",subDetails);}  }
class C{  public static Bitmap processTintTransformationMap(Bitmap transformationMap,int tintColor){  int[] t=new int[]{Color.red(tintColor),Color.green(tintColor),Color.blue(tintColor)};  int width=transformationMap.getWidth();  int height=transformationMap.getHeight();  int[] pixels=new int[width * height];  transformationMap.getPixels(pixels,0,width,0,0,width,height);  float[] transformation=new float[2];  for (int i=0; i < pixels.length; i++) {    int color=pixels[i];    int alpha=Color.alpha(color);    transformation[0]=Color.red(color) / 255f;    transformation[1]=Color.green(color) / 255f;    pixels[i]=applyTransformation(t,alpha,transformation);  }  return Bitmap.createBitmap(pixels,width,height,Bitmap.Config.ARGB_8888);}  }
class C{  public MutableDateTime roundHalfCeiling(){  iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));  return iInstant;}  }
class C{  public synchronized void deleteLeastUsedConnection(){  final HttpConnection connection=(HttpConnection)freeConnections.removeFirst();  if (connection != null) {    deleteConnection(connection);  } else   if (LOG.isDebugEnabled()) {    LOG.debug("Attempted to reclaim an unused connection but there were none.");  }}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void handleReceivedSingleImage(Intent i){  Uri imageUri=i.getParcelableExtra(Intent.EXTRA_STREAM);  Device device=deviceProvider.getDefaultDevice();  Intent intent=new Intent(this,GenerateFrameService.class);  intent.putExtra(AbstractGenerateFrameService.KEY_EXTRA_DEVICE,device);  intent.putExtra(GenerateFrameService.KEY_EXTRA_SCREENSHOT,imageUri);  startService(intent);}  }
class C{  public void clear(){  try {    super.remove(0,getLength());    setMark();  } catch (  BadLocationException e) {  }}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public Boolean isCacheLargeMessagesClient(){  if (ActiveMQResourceAdapter.trace) {    ActiveMQRALogger.LOGGER.trace("isCacheLargeMessagesClient()");  }  return raProperties.isCacheLargeMessagesClient();}  }
class C{  public CompressionResponseStream(HttpServletResponse response,final int compressionLevel,final int compressionStrategy) throws IOException {  this.closed=false;  this.response=response;  response.addHeader("Content-Encoding","gzip");  gzipstream=new GZIPOutputStream(response.getOutputStream()){{      this.def.setLevel(compressionLevel);      this.def.setStrategy(compressionStrategy);    }  };}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.798 -0500",hash_original_method="7F86BE46F7391BA2A7A5B9B0529BB73E",hash_generated_method="C94EF398B26B265A9421D39EA14441C9") public BasicPoolEntry allocEntry(final Object state){  if (!freeEntries.isEmpty()) {    ListIterator<BasicPoolEntry> it=freeEntries.listIterator(freeEntries.size());    while (it.hasPrevious()) {      BasicPoolEntry entry=it.previous();      if (LangUtils.equals(state,entry.getState())) {        it.remove();        return entry;      }    }  }  if (!freeEntries.isEmpty()) {    BasicPoolEntry entry=freeEntries.remove();    entry.setState(null);    OperatedClientConnection conn=entry.getConnection();    try {      conn.close();    } catch (    IOException ex) {      log.debug("I/O error closing connection",ex);    }    return entry;  }  return null;}  }
class C{  protected FunctionLib(){}  }
class C{  public String normTipText(){  return "The norm of the instances after normalization.";}  }
class C{  public static Document createDomFromSignable(SignableSAMLObject signableSAMLObject){  try {    Marshaller marshaller=org.opensaml.Configuration.getMarshallerFactory().getMarshaller(signableSAMLObject);    org.w3c.dom.Element signableDomEle=marshaller.marshall(signableSAMLObject);    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    Document doc=builder.newDocument();    doc.appendChild(doc.importNode(signableDomEle,true));    return doc;  } catch (  Exception e) {    log.error("Caught exception " + e.toString());    return null;  }}  }
class C{  public void testSettingsPress_ShowsSettings(){  mController.init();  mController.onSettingsPressed();  verify(mMockUi).showSettings();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.296 -0500",hash_original_method="86E2ECBC2C9AC2A7DC658CB964CA32CA",hash_generated_method="D00D082CF22D68D1D1DBD6A8B53C3AC4") synchronized void close(int nativeFrame){  mArray.clear();  mCurrentIndex=-1;  nativeClose(nativeFrame);  mClearPending=false;}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("annotations",1);  optionArgDefs.put("annotationsSplit",0);  optionArgDefs.put("permutations",0);  return optionArgDefs;}  }
class C{  public boolean endNalUnit(int discardPadding){  if (!isFilling) {    return false;  }  nalLength-=discardPadding;  isFilling=false;  isCompleted=true;  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateentityreferenceknown.class,args);}  }
class C{  public float maxT(){  return _maxT;}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  public static float random(float f){  return ((float)Math.random()) * f;}  }
class C{  public static BasicRowProcessor instance(){  return instance;}  }
class C{  public FindTicketsInfo(){}  }
class C{  public SimpleEdgeStream(DataStream<Edge<K,EV>> edges,StreamExecutionEnvironment context){  context.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);  this.edges=edges;  this.context=context;}  }
class C{  private void stepInput(final Port port){  final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);  if (!receivingPipe.isReading()) {    receivingPipe.beginRead();  }  if (receivingPipe.canTransfer()) {    process(receivingPipe.read());    receivingPipe.beginRead();  }}  }
class C{  protected Class<?> resolveClass(ObjectStreamClass classdesc) throws ClassNotFoundException, IOException {  try {    String s=readUTF();    if (!(s.equals("magic"))) {      System.err.println("\nTEST FAILED: Bad magic number");      throw new Error();    }  } catch (  IOException ee) {    System.err.println("\nTEST FAILED: I/O Exception");    throw new Error();  }  return super.resolveClass(classdesc);}  }
class C{  @VisibleForTesting WorkspaceImpl performAsyncStart(WorkspaceImpl workspace,String envName,boolean recover) throws ConflictException, NotFoundException, ServerException {  if (envName != null && !workspace.getConfig().getEnvironments().containsKey(envName)) {    throw new NotFoundException(format("Workspace '%s:%s' doesn't contain environment '%s'",workspace.getNamespace(),workspace.getConfig().getName(),envName));  }  try {    final RuntimeDescriptor descriptor=runtimes.get(workspace.getId());    throw new ConflictException(format("Could not start workspace '%s' because its status is '%s'",workspace.getConfig().getName(),descriptor.getRuntimeStatus()));  } catch (  NotFoundException ignored) {  }  workspace.getAttributes().put(UPDATED_ATTRIBUTE_NAME,Long.toString(currentTimeMillis()));  workspaceDao.update(workspace);  executor.execute(ThreadLocalPropagateContext.wrap(null));  return normalizeState(workspace);}  }
class C{  public void addChunk(byte[] b) throws IOException {  if (this.failure == null && b != null && b.length > 0) {    ByteBuffer bb=ByteBuffer.wrap(b);    this.t.addChunk(bb,b.length);    this.size+=b.length;  }}  }
class C{  public boolean hasCriticalOffHeap(){  return this.criticalOffHeapSet;}  }
class C{  public void add(String string){  data.add(string);  this.fireTableRowsInserted(data.size() - 1,data.size() - 1);}  }
class C{  public static WindowingStrategy<Object,GlobalWindow> globalDefault(){  return DEFAULT;}  }
class C{  protected void installRolloverBorders(JComponent c){  Component[] components=c.getComponents();  for (int i=0; i < components.length; ++i) {    if (components[i] instanceof JComponent) {      ((JComponent)components[i]).updateUI();      setBorderToRollover(components[i]);    }  }}  }
class C{  public Node min(){  return min;}  }
class C{  private boolean shouldCancelPhoneticLetter(AccessibilityEvent event){  return event.getEventType() != AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED && event.getEventType() != AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED && event.getEventType() != AccessibilityEvent.TYPE_VIEW_LONG_CLICKED && event.getEventType() != AccessibilityEvent.TYPE_ANNOUNCEMENT;}  }
class C{  public GridLayout(int rows,int cols){  this(rows,cols,0,0);}  }
class C{  protected Todo(Context context){  context.put(todoKey,this);}  }
class C{  @Override public boolean isBroadcastDomainPort(DatapathId sw,OFPort port){  return isBroadcastDomainPort(sw,port,true);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void onCreate(){  super.onCreate();  ACRA.init(this);  refWatcher=LeakCanary.install(this);  OK.INSTANCE.createClient(getApplicationContext());  Picasso.setSingletonInstance(new Picasso.Builder(getApplicationContext()).downloader(new OkHttp3Downloader(OK.INSTANCE.Client)).build());}  }
class C{  public Boolean isForce(){  return force;}  }
class C{  public TaskList unlinkApplicationSnapshotSession(URI id,VolumeGroupSnapshotSessionUnlinkTargetsParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_UNLINK_SNAPSHOT_SESSION_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  private void loadManifest(){  if (_isManifestRead)   return;synchronized (this) {    if (_isManifestRead)     return;    try {      _manifest=_jarPath.getManifest();      if (_manifest == null)       return;      Attributes attr=_manifest.getMainAttributes();      if (attr != null)       addManifestPackage("",attr);      Map<String,Attributes> entries=_manifest.getEntries();      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {        String pkg=entry.getKey();        attr=entry.getValue();        if (attr == null)         continue;        addManifestPackage(pkg,attr);      }    } catch (    IOException e) {      log.log(Level.WARNING,e.toString(),e);    } finally {      _isManifestRead=true;    }  }}  }
class C{  protected void initialExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  NavegadorReservaDepositoForm frm=(NavegadorReservaDepositoForm)form;  removeSession(request);  ServiceRepository services=getServiceRepository(request);  GestorEstructuraDepositoBI serviceDeposito=services.lookupGestorEstructuraDepositoBI();  String nombrePadre=null;  String pathPadre=null;  if (!StringUtils.isBlank(frm.getIdseleccionadoinicial()) || !StringUtils.isBlank(frm.getIdtiposeleccionadoinicial())) {    String idElementoSeleccionado=frm.getIdseleccionadoinicial();    String idTipoElementoSeleccionado=null;    ElementoVO elementoVO=serviceDeposito.getElementoNoAsignable(idElementoSeleccionado);    if (elementoVO == null) {      elementoVO=serviceDeposito.getElementoAsignable(idElementoSeleccionado);    }    if (elementoVO != null) {      idTipoElementoSeleccionado=elementoVO.getIdTipoElemento();    }    String idElemento=idElementoSeleccionado;    String idTipoElemento=idTipoElementoSeleccionado;    ElementoVO padreVO=serviceDeposito.getElementoPadre(idElemento,idTipoElemento);    if (padreVO != null) {      frm.setIdpadre(padreVO.getId());      frm.setIdtipopadre(padreVO.getIdTipoElemento());    }    frm.setSeleccionadoinicial(getCodigoElemento(idElementoSeleccionado,idTipoElementoSeleccionado));    frm.setSeleccionado(frm.getSeleccionadoinicial());    int nHuecosLibres=getNumHuecosDesdePosicion(serviceDeposito,idElementoSeleccionado,idTipoElementoSeleccionado,frm.getNumHuecosNecesarios(),frm.getFilterByIdformato(),frm.getRecorrerDepositos());    frm.setNumHuecosLibres(nHuecosLibres);    removeInTemporalSession(request,DepositoConstants.LISTA_DESCENDIENTES_KEY);    ElementoVO padreVo=serviceDeposito.getElementoPadre(idElementoSeleccionado,idTipoElementoSeleccionado);    Collection hermanos=getparentsiblings(padreVo,frm.getFilterByIdformato(),serviceDeposito);    CollectionUtils.transform(hermanos,ElementoToEspacioEnElemento.getInstance(services,frm.getFilterByIdformato(),frm.isCheckHasHuecos()));    Iterator it=util.CollectionUtils.getIterator(hermanos);    if (it.hasNext()) {      ElementoVO elementoHijo=(ElementoVO)it.next();      if (isLastLevel(elementoHijo.getIdTipoElemento())) {        setInTemporalSession(request,TransferenciasConstants.IS_LAST_LEVEL,String.valueOf(true));      } else {        setInTemporalSession(request,TransferenciasConstants.IS_LAST_LEVEL,String.valueOf(false));      }    } else {      setInTemporalSession(request,TransferenciasConstants.IS_LAST_LEVEL,String.valueOf(false));    }    pathPadre=padreVo.getPathName();    nombrePadre=padreVo.getItemName();    if (nombrePadre.equals(pathPadre)) {      nombrePadre=null;    }    setInTemporalSession(request,PATH_KEY,pathPadre);    setInTemporalSession(request,PARENT_NAME,nombrePadre);    setInTemporalSession(request,DepositoConstants.LISTA_DESCENDIENTES_KEY,hermanos);    setInTemporalSession(request,NUM_HUECOS_LIBRES,String.valueOf(frm.getNumHuecosLibres()));  } else {    String idSeleccionado=frm.getIdroot();    String idTipoSeleccionado=frm.getIdtiporoot();    ElementoVO elementoSeleccionadoVO=serviceDeposito.getInfoElemento(idSeleccionado,idTipoSeleccionado);    String pathKey=null;    String parentName=null;    if (elementoSeleccionadoVO != null) {      if (frm.getIdroot().equals(elementoSeleccionadoVO.getId())) {        pathKey=elementoSeleccionadoVO.getPathName();      } else {        parentName=elementoSeleccionadoVO.getNombre();        pathKey=elementoSeleccionadoVO.getPathName();      }    }    removeInTemporalSession(request,DepositoConstants.LISTA_DESCENDIENTES_KEY);    Collection hijos=serviceDeposito.getHijosElemento(idSeleccionado,idTipoSeleccionado);    CollectionUtils.transform(hijos,ElementoToEspacioEnElemento.getInstance(services,frm.getFilterByIdformato(),frm.isCheckHasHuecos()));    Iterator it=util.CollectionUtils.getIterator(hijos);    if (it.hasNext()) {      ElementoVO elementoHijo=(ElementoVO)it.next();      if (isLastLevel(elementoHijo.getIdTipoElemento())) {        setInTemporalSession(request,TransferenciasConstants.IS_LAST_LEVEL,String.valueOf(true));      } else {        setInTemporalSession(request,TransferenciasConstants.IS_LAST_LEVEL,String.valueOf(false));      }    } else {      setInTemporalSession(request,TransferenciasConstants.IS_LAST_LEVEL,String.valueOf(false));    }    setInTemporalSession(request,PATH_KEY,pathKey);    setInTemporalSession(request,PARENT_NAME,parentName);    setInTemporalSession(request,DepositoConstants.LISTA_DESCENDIENTES_KEY,hijos);    setInTemporalSession(request,NUM_HUECOS_LIBRES,String.valueOf(frm.getNumHuecosLibres()));  }}  }
class C{  public Property centuryOfEra(){  return new Property(this,getChronology().centuryOfEra());}  }
class C{  public void forceRewriteExif(String filename) throws FileNotFoundException, IOException {  forceRewriteExif(filename,getAllTags());}  }
class C{  @Override protected void buildActions(final List<String> list){  if (!entity.getRPObject().has("menu")) {    list.add(action.getRepresentation());  }  super.buildActions(list);}  }
class C{  final void internalSetTypeDeclaration(TypeDeclaration decl){  supportedOnlyIn2();  setDeclaration(decl);}  }
class C{  public List<HashMap<String,Object>> clearOverallChat(){  try {    List<HashMap<String,Object>> myChatList=myChats.get(overallChatRoomName);    myChatList=new LinkedList<HashMap<String,Object>>();    myChats.put(overallChatRoomName,myChatList);    Map<Integer,String> newMessage=new HashMap<Integer,String>();    newMessage.put(0,"clearOverallChatHistory");    scopeApplicationAdapter.sendMessageToMembers(newMessage);    return myChatList;  } catch (  Exception err) {    log.error("[clearChat] ",err);    return null;  }}  }
class C{  protected boolean isRemoteRecipient(){  return fieldRemoteRecipient;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  static public void removePIs(Node node){  NodeList children=node.getChildNodes();  int i=0;  int len=children.getLength();  while (i < len) {    Node child=children.item(i);    if (child.hasChildNodes()) {      removePIs(child);      i++;    } else {      if (child.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {        node.removeChild(child);        len--;      } else {        i++;      }    }  }}  }
class C{  @Override protected boolean isFrontierEmpty(){  cleanUpFrontier();  updateMetrics(frontier.size());  return frontier.isEmpty();}  }
class C{  @Override public boolean onMove(RecyclerView.ViewHolder dragging,RecyclerView.ViewHolder target){  return false;}  }
class C{  public GrouperMediaNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,String inGroupType,Object inGroupObject){  super(inSource,inParent);  groupLabel=inGroupLabel;  groupType=inGroupType;  groupObject=inGroupObject;}  }
class C{  public XoauthSaslClient(XoauthProtocol protocol,String oauthToken,String oauthTokenSecret,String consumerKey,String consumerSecret,CallbackHandler callbackHandler){  this.protocol=protocol;  this.oauthToken=oauthToken;  this.oauthTokenSecret=oauthTokenSecret;  this.consumer=new OAuthConsumer(null,consumerKey,consumerSecret,null);  this.callbackHandler=callbackHandler;}  }
class C{  public void testPropertyClearing(){  TungstenProperties tp1=new TungstenProperties();  TungstenProperties tp2=makeProperties();  Assert.assertTrue("New properties are empty",tp1.isEmpty());  tp1.clear();  Assert.assertTrue("Cleared new properties are empty",tp1.isEmpty());  Assert.assertFalse("Properties with values are not empty",tp2.isEmpty());  tp2.clear();  Assert.assertTrue("Cleared new properties are empty",tp1.isEmpty());}  }
class C{  public void storeLocal(final int local,final Type type){  setLocalType(local,type);  storeInsn(type,local);}  }
class C{  private static Uri createContact(Context context,ContentValues values) throws RemoteException, OperationApplicationException {  ContentResolver mResolver=context.getContentResolver();  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>();  int backRefIndex=0;  operations.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI).withValue(RawContacts.ACCOUNT_TYPE,null).withValue(RawContacts.ACCOUNT_NAME,null).build());  operations.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,backRefIndex).withValue(Data.MIMETYPE,StructuredName.CONTENT_ITEM_TYPE).withValue(StructuredName.DISPLAY_NAME,values.get(ContactsContract.Contacts.DISPLAY_NAME)).build());  operations.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,backRefIndex).withValue(Data.MIMETYPE,Phone.CONTENT_ITEM_TYPE).withValue(Phone.NUMBER,values.get(Phone.NUMBER)).withValue(Phone.TYPE,values.get(Phone.TYPE)).build());  long rawContactId=0;  ContentProviderResult[] result=mResolver.applyBatch(ContactsContract.AUTHORITY,operations);  rawContactId=ContentUris.parseId(result[1].uri);  long contactId=0;  Cursor c=null;  String[] whereArgs=new String[]{String.valueOf(rawContactId)};  try {    c=mResolver.query(Data.CONTENT_URI,PROJECTION_DATA_CONTACTID,WHERE_DATA_ID,whereArgs,null);    CursorUtil.assertCursorIsNotNull(c,Data.CONTENT_URI);    if (c.moveToFirst()) {      int columnIdxContactId=c.getColumnIndexOrThrow(Data.CONTACT_ID);      contactId=c.getLong(columnIdxContactId);    }  }  finally {    if (c != null) {      c.close();    }  }  return ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,contactId);}  }
class C{  public Duration toStandardDuration(){  long minutes=getValue();  return new Duration(minutes * DateTimeConstants.MILLIS_PER_MINUTE);}  }
class C{  public S1Angle lng(){  return S1Angle.radians(lngRadians);}  }
class C{  public SmbFile(String context,String name) throws MalformedURLException {  this(new URL(new URL(null,context,Handler.SMB_HANDLER),name,Handler.SMB_HANDLER));}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static void main(String args[]){  TemplateNodeView v=new TemplateNodeView(args[0]);}  }
class C{  public String attr(String name){  if (nodes.length == 0) {    return null;  }  return nodes[0].getAttribute(name);}  }
class C{  @SuppressWarnings("deprecation") public List<SMIMESignerInfo> verifySignatures(SMIMESigned signed) throws Exception, MessagingException {  CertStore certs=signed.getCertificatesAndCRLs("Collection","BC");  SignerInformationStore siginfo=signed.getSignerInfos();  @SuppressWarnings("unchecked") Collection<SignerInformation> sigCol=siginfo.getSigners();  List<SMIMESignerInfo> result=new ArrayList<SMIMESignerInfo>(sigCol.size());  for (  SignerInformation info : sigCol) {    @SuppressWarnings("unchecked") Collection<X509Certificate> certCollection=(Collection<X509Certificate>)certs.getCertificates(info.getSID());    if (!certCollection.isEmpty()) {      X509Certificate signerCert=certCollection.iterator().next();      CertPath path=verifyCertificate(signerCert,certs,keyStore);      try {        if (info.verify(signerCert,"BC")) {          result.add(new SMIMESignerInfo(signerCert,path,true));        }      } catch (      Exception e) {        result.add(new SMIMESignerInfo(signerCert,path,false));      }    }  }  return result;}  }
class C{  protected boolean runProcess(String topologyWorkingDirectory,String[] slurmCmd,StringBuilder stdout,StringBuilder stderr){  File file=topologyWorkingDirectory == null ? null : new File(topologyWorkingDirectory);  return 0 == ShellUtils.runSyncProcess(isVerbose,false,slurmCmd,stdout,stderr,file);}  }
class C{  public String apply(String input){  if (input.endsWith(ending)) {    if (isVowel(input.charAt(0))) {      if (input.length() - toRemove + newEnding.length() < 2)       return input;    } else {      if (input.length() - toRemove + newEnding.length() < 3)       return input;      boolean noVowels=true;      for (int i=0; i < input.length() - toRemove && noVowels; i++)       if (isVowel(input.charAt(i)) || input.charAt(i) == 'y')       noVowels=false;      for (int i=0; i < newEnding.length() && noVowels; i++)       if (isVowel(newEnding.charAt(i)) || newEnding.charAt(i) == 'y')       noVowels=false;      if (noVowels)       return input;    }    if (toRemove == 0)     return new String(input);    return input.substring(0,input.length() - toRemove) + newEnding;  }  return input;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(30);  sb.append(token).append("=").append(strength);  return sb.toString();}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + Arrays.hashCode(id);  return result;}  }
class C{  private static void checkForKOML(){  try {    Class.forName("fr.dyade.koala.xml.koml.KOMLSerializer");    m_Present=true;  } catch (  Exception e) {    m_Present=false;  }}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("delighttestdata.zip"),"delight.txt");}  }
class C{  public ResourceId(String value){  this();  setValue(value);}  }
class C{  protected VertexDecorator(V delegate){  super();  this.delegate=delegate;}  }
class C{  public List<Versioned<V>> remove(K key){  while (true) {    List<Versioned<V>> items=map.get(key);synchronized (items) {      if (map.remove(key,items))       return items;    }  }}  }
class C{  public static void initDb(DataSource ds) throws Exception {  createTables(ds);  purgeTables(ds);}  }
class C{  public String saveOrganization() throws SaaSApplicationException {  OperatorService operatorService=getOperatorService();  VOOperatorOrganization org=getSelectedOrganization();  long updatedTenantKey=selectedOrganization.getTenantKey();  manageTenantService.validateOrgUsersUniqnessInTenant(org.getOrganizationId(),updatedTenantKey);  selectedOrganization=operatorService.updateOrganization(org,getImageUploader().getVOImageResource());  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_ORGANIZATION_SAVED,selectedOrganization.getOrganizationId());  this.selectedOrganization=null;  selectedPSPAccounts=null;  return OUTCOME_SUCCESS;}  }
class C{  public static int uniform(int a,int b){  if (b <= a)   throw new IllegalArgumentException("Invalid range");  if ((long)b - a >= Integer.MAX_VALUE)   throw new IllegalArgumentException("Invalid range");  return a + uniform(b - a);}  }
class C{  public static BufferedImage iccConvertCMYKImageToRGB(final byte[] buffer,final int w,final int h){  final int pixelCount=w * h * 4;  int Y, Cb, Cr, CENTER, lastY=-1, lastCb=-1, lastCr=-1, lastCENTER=-1;  int outputC=0, outputM=0, outputY=0;  double R, G, B;  for (int i=0; i < pixelCount; i+=4) {    Y=(buffer[i] & 255);    Cb=(buffer[i + 1] & 255);    Cr=(buffer[i + 2] & 255);    CENTER=(buffer[i + 3] & 255);    if (Y == lastY && Cb == lastCb && Cr == lastCr && CENTER == lastCENTER) {    } else {      R=Y + 1.402 * Cr - 179.456;      if (R < 0d) {        R=0d;      } else       if (R > 255d) {        R=255d;      }      G=Y - 0.34414 * Cb - 0.71414 * Cr + 135.45984;      if (G < 0d) {        G=0d;      } else       if (G > 255d) {        G=255d;      }      B=Y + 1.772 * Cb - 226.816;      if (B < 0d) {        B=0d;      } else       if (B > 255d) {        B=255d;      }      outputC=255 - (int)R;      outputM=255 - (int)G;      outputY=255 - (int)B;      lastY=Y;      lastCb=Cb;      lastCr=Cr;      lastCENTER=CENTER;    }    buffer[i]=(byte)(outputC);    buffer[i + 1]=(byte)(outputM);    buffer[i + 2]=(byte)(outputY);  }  return CMYKtoRGB.convert(buffer,w,h);}  }
class C{  @Override protected void formatCookieAsVer(final CharArrayBuffer buffer,final Cookie cookie,int version){  super.formatCookieAsVer(buffer,cookie,version);  if (cookie instanceof ClientCookie) {    String s=((ClientCookie)cookie).getAttribute(ClientCookie.PORT_ATTR);    if (s != null) {      buffer.append("; $Port");      buffer.append("=\"");      if (s.trim().length() > 0) {        int[] ports=cookie.getPorts();        if (ports != null) {          for (int i=0, len=ports.length; i < len; i++) {            if (i > 0) {              buffer.append(",");            }            buffer.append(Integer.toString(ports[i]));          }        }      }      buffer.append("\"");    }  }}  }
class C{  public static MGRSPoint LLtoMGRS(LatLonPoint llpoint){  return LLtoMGRS(llpoint,Ellipsoid.WGS_84,new MGRSPoint());}  }
class C{  public void addArrDmdDetToCurrentDmd(final Ptdemand ptDmd,final Ptdemand currPtDmd,final Installment effectiveInstall,boolean isDemolition){  LOGGER.debug("Entered into addArrDmdDetToCurrentDmd. ptDmd: " + ptDmd + ", currPtDmd: "+ currPtDmd);  for (  final EgDemandDetails dmdDet : ptDmd.getEgDemandDetails())   if (dmdDet.getInstallmentStartDate().before(effectiveInstall.getFromDate()))   if (!isDemolition) {    if (!dmdDet.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(DEMANDRSN_CODE_PENALTY_FINES))     currPtDmd.addEgDemandDetails((EgDemandDetails)dmdDet.clone());  } else {    currPtDmd.addEgDemandDetails((EgDemandDetails)dmdDet.clone());  }  LOGGER.debug("Exiting from addArrDmdDetToCurrentDmd");}  }
class C{  public void terminate(){  if (sLogger.isActivated()) {    sLogger.info("Terminate the IMM manager");  }  mBuffer.close();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.202 -0500",hash_original_method="0F0C9C72850FB77DD8C966716104A782",hash_generated_method="FC7B78F042DD91D15FD8F3A702A10342") public synchronized boolean wasSuccessful(){  return failureCount() == 0 && errorCount() == 0;}  }
class C{  private void createProgress(Progress fatherProgress){  if (fatherProgress != null) {    progress=new Progress();    fatherProgress.add(progress);    progress.addTotal(this.content.size);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_STATE_1__STATE_INTERNAL_1:    return getStateInternal_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static synchronized void initializeRenderer(Context applicationContext){  if (initialized) {    return;  }  String cacheDir=applicationContext.getCacheDir().getAbsoluteFile().getAbsolutePath();  renderer.init(cacheDir);  RendererSettings rs=RendererSettings.getInstance();  rs.setSymbologyStandard(RendererSettings.Symbology_2525C);  rs.setDefaultPixelSize(DEFAULT_PIXEL_SIZE);  rs.setModifierFont("Arial",Typeface.BOLD,DEFAULT_FONT_SIZE);  rs.setMPModifierFont("Arial",Typeface.BOLD,DEFAULT_FONT_SIZE);  rs.setTextBackgroundMethod(RendererSettings.TextBackgroundMethod_OUTLINE);  rs.setTextOutlineWidth(TEXT_OUTLINE_WIDTH);  initialized=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.564 -0500",hash_original_method="FD845B5AAD012D6985E0ADCD6A0F1286",hash_generated_method="6AC59E1019471B8D4B6D15BF0D0252FC") protected void init() throws IOException {  if (appDataIS != null) {    return;  }  initTransportLayer();  appDataIS=new SSLSocketInputStream(this);  appDataOS=new SSLSocketOutputStream(this);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.MODULE_FILTER_SPECIFIER__MODULE_SPECIFIER_WITH_WILDCARD:    return MODULE_SPECIFIER_WITH_WILDCARD_EDEFAULT == null ? moduleSpecifierWithWildcard != null : !MODULE_SPECIFIER_WITH_WILDCARD_EDEFAULT.equals(moduleSpecifierWithWildcard);case N4mfPackage.MODULE_FILTER_SPECIFIER__SOURCE_PATH:  return SOURCE_PATH_EDEFAULT == null ? sourcePath != null : !SOURCE_PATH_EDEFAULT.equals(sourcePath);}return super.eIsSet(featureID);}  }
class C{  public int read16bit(int offset){  int v1=read(offset);  int v2=read(offset + 1);  return (v1 << 8) + (v2 & 0xff);}  }
class C{  public AbstractBooleanList elements(boolean[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  public void resetGLState(){  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glCullFace(GLES20.GL_BACK);  GLES20.glFrontFace(GLES20.GL_CCW);  GLES20.glDisable(GLES20.GL_BLEND);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);}  }
class C{  static String applyTextElementSpacePolicy(String in){  String out=in.replaceAll("\r\n","\n");  out=out.replaceAll(" *\n *","\n");  out=out.replaceAll("\n"," ");  out=out.replaceAll("[ \t\\x0B\f\r]+"," ");  return out;}  }
class C{  public ScriptReader(Reader reader){  this.reader=reader;  buffer=new char[Constants.IO_BUFFER_SIZE * 2];}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  rewriteCommandLine(action);  String actionStr=action.get("action");  if (actionStr == null) {    logger.warn("missing action attribute in RPAction " + action);    return;  }  if (actionStr.equals("offer_trade")) {    Entity entity=EntityHelper.entityFromTargetName(action.get("target"),player);    if ((entity == null) || (!(entity instanceof Player))) {      return;    }    player.offerTrade((Player)entity);  } else   if (actionStr.equals("lock")) {    player.lockTrade();  } else   if (actionStr.equals("unlock")) {    player.unlockTradeItemOffer();  } else   if (actionStr.equals("deal")) {    player.dealTrade();  } else   if (actionStr.equals("cancel")) {    player.cancelTrade();  }}  }
class C{  public CleanUpRequirements(boolean requiresAST,boolean requiresFreshAST,boolean requiresChangedRegions,Map<String,String> compilerOptions){  Assert.isLegal(!requiresFreshAST || requiresAST,"Must not request fresh AST if no AST is required");  Assert.isLegal(compilerOptions == null || requiresAST,"Must not provide options if no AST is required");  fRequiresAST=requiresAST;  fRequiresFreshAST=requiresFreshAST;  fCompilerOptions=compilerOptions;  fRequiresChangedRegions=requiresChangedRegions;}  }
class C{  int compareCursorKeyTo(RawComparable other) throws IOException {  checkKey();  return reader.compareKeys(blockBuffer,keyOffset,klen,other.buffer(),other.offset(),other.size());}  }
class C{  public void trimToSize(){  int newCapacity=nextPrime((int)(1 + 1.2 * size()));  if (table.length > newCapacity) {    rehash(newCapacity);  }}  }
class C{  protected void init() throws Exception {  JetstreamApplicationInformation ai=getApplicationInformation();  ai.selfLocate();  m_workQueue=new LinkedBlockingQueue<Runnable>(ai.getWorkQeueSz());  m_worker=new ThreadPoolExecutor(ai.getWorkerThreads(),3,30,TimeUnit.SECONDS,m_workQueue,new ThreadPoolExecutor.CallerRunsPolicy());  m_worker.prestartCoreThread();  Management.addBean(ai.getApplicationName(),this);  logInfo("Starting services for " + ai);  String[] configs=ai.getConfigRoots();  RootConfiguration rc=configs == null ? new RootConfiguration(ai) : new RootConfiguration(ai,configs);  rc.start();  String[] sa=ai.getBeans();  if (sa != null)   for (  String bean : sa)   rc.getBean(bean);}  }
class C{  public static void createMavenGwtProjectIsCreated2(SWTWorkbenchBot bot,String projectName,String packageName){  String groupId=packageName;  String artifactId=projectName;  String archetypeGroupId="com.github.branflake2267.archetypes";  String archetypeArtifactId="gwt-basic-archetype";  String archetypeVersion="2.0-SNAPSHOT";  String archetypeUrl="https://oss.sonatype.org/content/repositories/snapshots";  SwtBotProjectActions.createMavenProjectFromArchetype(bot,groupId,artifactId,packageName,archetypeGroupId,archetypeArtifactId,archetypeVersion,archetypeUrl);  SwtBotWorkbenchActions.waitForIdle(bot);}  }
class C{  public static <T extends Comparable<? super T>,L extends List<T>>L sortThis(L list){  if (list instanceof MutableList<?>) {    ((MutableList<T>)list).sortThis();  } else   if (list instanceof ArrayList) {    ArrayListIterate.sortThis((ArrayList<T>)list);  } else {    if (list.size() > 1) {      Collections.sort(list);    }  }  return list;}  }
class C{  public void stop(int restartableId){  requested.remove((Integer)restartableId);  Subscription subscription=restartableSubscriptions.get(restartableId);  if (subscription != null)   subscription.unsubscribe();}  }
class C{  public void insertQuad(int from,int to){  assert (to >= 0 && to < totalQuads_) : "insertQuadFromIndex:atIndex: Invalid index";  assert (from >= 0 && from < totalQuads_) : "insertQuadFromIndex:atIndex: Invalid index";  if (from == to)   return;  int size=Math.abs(from - to);  int dst=from;  int src=from + 1;  if (from > to) {    dst=to + 1;    src=to;  }  float[] texCoordsBackup=getTexCoords(textureCoordinates,from);  arraycopyTexture(textureCoordinates,src,textureCoordinates,dst,size);  putTexCoords(textureCoordinates,texCoordsBackup,to);  float[] vertexQuadBackup=getVertex(vertexCoordinates,from);  arraycopyVertex(vertexCoordinates,src,vertexCoordinates,dst,size);  putVertex(vertexCoordinates,vertexQuadBackup,to);  if (withColorArray_) {    ccColor4B[] colorsBackup=getColor(colors,from);    arraycopyColor(colors,src,colors,dst,size);    putColor(colors,colorsBackup,to);  }}  }
class C{  public void addComponent(int index,Component cmp){  contentPane.addComponent(index,cmp);}  }
class C{  public long length(){  return mLength;}  }
class C{  public void updateShort(int columnIndex,short x) throws SQLException {  throw new NotUpdatable();}  }
class C{  @Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){  ItemStack tool=entityPlayer.inventory.getCurrentItem();  int metadata=world.getBlockMetadata(x,y,z);  if (MekanismUtils.hasUsableWrench(entityPlayer,x,y,z)) {    if (MekanismUtils.isBCWrench(tool.getItem())) {      ((IToolWrench)tool.getItem()).wrenchUsed(entityPlayer,x,y,z);    }    if (entityPlayer.isSneaking()) {      if (this.onSneakUseWrench(world,x,y,z,entityPlayer,side,hitX,hitY,hitZ)) {        return true;      }    }    if (this.onUseWrench(world,x,y,z,entityPlayer,side,hitX,hitY,hitZ)) {      return true;    }    return false;  }  if (entityPlayer.isSneaking()) {    if (this.onSneakMachineActivated(world,x,y,z,entityPlayer,side,hitX,hitY,hitZ)) {      return true;    }  }  return this.onMachineActivated(world,x,y,z,entityPlayer,side,hitX,hitY,hitZ);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NEW_NODE_ID;case 3:return NODE_STORE;default :return null;}}  }
class C{  public AccessTokenUnavailableException(final String s){  super(s);}  }
class C{  public void keyTyped(KeyEvent e){synchronized (keyLock) {    keysTyped.addFirst(e.getKeyChar());  }}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  @Override public void buildEvaluator(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_trainInstances=data;  m_classIndex=m_trainInstances.classIndex();  m_numInstances=m_trainInstances.numInstances();  Discretize disTransform=new Discretize();  disTransform.setUseBetterEncoding(true);  disTransform.setInputFormat(m_trainInstances);  m_trainInstances=Filter.useFilter(m_trainInstances,disTransform);  m_numClasses=m_trainInstances.attribute(m_classIndex).numValues();}  }
class C{  public Set<Account.Id> findAllByNameOrEmail(ReviewDb db,String nameOrEmail) throws OrmException {  int lt=nameOrEmail.indexOf('<');  int gt=nameOrEmail.indexOf('>');  if (lt >= 0 && gt > lt && nameOrEmail.contains("@")) {    Set<Account.Id> ids=byEmail.get(nameOrEmail.substring(lt + 1,gt));    if (ids.isEmpty() || ids.size() == 1) {      return ids;    }    String name=nameOrEmail.substring(0,lt - 1);    Set<Account.Id> nameMatches=new HashSet<>();    for (    Account.Id id : ids) {      Account a=byId.get(id).getAccount();      if (name.equals(a.getFullName())) {        nameMatches.add(id);      }    }    return nameMatches.isEmpty() ? ids : nameMatches;  }  if (nameOrEmail.contains("@")) {    return byEmail.get(nameOrEmail);  }  Account.Id id=realm.lookup(nameOrEmail);  if (id != null) {    return Collections.singleton(id);  }  if (accountIndexes.getSearchIndex() != null) {    List<AccountState> m=accountQueryProvider.get().byFullName(nameOrEmail);    if (m.size() == 1) {      return Collections.singleton(m.get(0).getAccount().getId());    }    return accountQueryProvider.get().byDefault(nameOrEmail).stream().map(null).collect(toSet());  }  List<Account> m=db.accounts().byFullName(nameOrEmail).toList();  if (m.size() == 1) {    return Collections.singleton(m.get(0).getId());  }  Set<Account.Id> result=new HashSet<>();  String a=nameOrEmail;  String b=nameOrEmail + "\u9fa5";  for (  Account act : db.accounts().suggestByFullName(a,b,10)) {    result.add(act.getId());  }  for (  AccountExternalId extId : db.accountExternalIds().suggestByKey(new AccountExternalId.Key(AccountExternalId.SCHEME_USERNAME,a),new AccountExternalId.Key(AccountExternalId.SCHEME_USERNAME,b),10)) {    result.add(extId.getAccountId());  }  for (  AccountExternalId extId : db.accountExternalIds().suggestByEmailAddress(a,b,10)) {    result.add(extId.getAccountId());  }  return result;}  }
class C{  public void create(View view){  UserConfig config=new UserConfig();  EditText text=(EditText)findViewById(R.id.userText);  config.user=text.getText().toString().trim();  text=(EditText)findViewById(R.id.passwordText);  config.password=text.getText().toString().trim();  text=(EditText)findViewById(R.id.hintText);  config.hint=text.getText().toString().trim();  text=(EditText)findViewById(R.id.nameText);  config.name=text.getText().toString().trim();  text=(EditText)findViewById(R.id.emailText);  config.email=text.getText().toString().trim();  text=(EditText)findViewById(R.id.websiteText);  config.website=text.getText().toString().trim();  text=(EditText)findViewById(R.id.bioText);  config.bio=text.getText().toString().trim();  CheckBox checkbox=(CheckBox)findViewById(R.id.showNameCheckBox);  config.showName=checkbox.isChecked();  HttpCreateUserAction action=new HttpCreateUserAction(this,config);  action.execute();}  }
class C{  public static boolean supportsWebActions(AccessibilityNodeInfoCompat node){  return AccessibilityNodeInfoUtils.supportsAnyAction(node,AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT,AccessibilityNodeInfoCompat.ACTION_PREVIOUS_HTML_ELEMENT);}  }
class C{  public ChestSlot(final Chest owner){  super(owner);  this.chest=owner;}  }
class C{  @SuppressWarnings("unchecked") public static Set<Byte> toSet(byte[] array){  return toSet(DefaultTypeTransformation.primitiveArrayToList(array));}  }
class C{  public static List<String> findFileOnUsersPath(String filename){  Parameters.notNull("filename",filename);  return findFileOnUsersPath(new String[]{filename});}  }
class C{  public UploadObject(UploadObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.content=parent.getContent();  this.creatorId=parent.getCreatorId();  this.deleted=parent.getDeleted();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.creatorName=parent.getCreatorName();  this.companyId=parent.getCompanyId();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  public boolean routingParsingStillNeeded(){  return shouldParseRouting && !routingResolved;}  }
class C{  protected void validateSuperClass() throws ValidationException {  ClassifierReference superClassRef=getModel().getSuperClass();  if (!superClassRef.getFullSpecifier().isEmpty()) {    if (!isValidClass(superClassRef)) {      throw new ValidationException(THE_SUPER_CLASS_CANNOT_BE_FOUND);    } else     if (superClassRef.uri == null) {      IEObjectDescription classDescription=getClassifierObjectDescriptionForFQN(superClassRef.getFullSpecifier());      if (classDescription != null) {        superClassRef.uri=classDescription.getEObjectURI();      }    }  }}  }
class C{  @Override public void clear(){  super.clear();  long[] set=_set;  byte[] states=_states;  for (int i=set.length; i-- > 0; ) {    set[i]=(long)0;    states[i]=FREE;  }}  }
class C{  public StringBody(final String text,final String mimeType,Charset charset) throws UnsupportedEncodingException {  super(mimeType);  if (text == null) {    throw new IllegalArgumentException("Text may not be null");  }  if (charset == null) {    charset=Charset.forName(HTTP.UTF_8);  }  this.content=text.getBytes(charset.name());  this.charset=charset;}  }
class C{  private void loadEnvironment(Interpreter i){  if (m_ctx == null)   return;  Iterator<String> it=m_ctx.keySet().iterator();  while (it.hasNext()) {    String key=it.next();    if (key.indexOf(".") >= 0)     continue;    Object value=m_ctx.get(key);    try {      if (value instanceof Boolean)       i.set(key,((Boolean)value).booleanValue()); else       if (value instanceof Integer)       i.set(key,((Integer)value).intValue()); else       if (value instanceof Double)       i.set(key,((Double)value).doubleValue()); else       i.set(key,value);    } catch (    EvalError ee) {      log.log(Level.SEVERE,"",ee);    }  }}  }
class C{  public void testIsColorTestable(){  LOGGER.debug("isColorTestable");  String color="rgb(228; 228; 228)";  assertTrue(ContrastHelper.isColorTestable(color));  color="rgba(228; 228; 228; 0)";  assertFalse(ContrastHelper.isColorTestable(color));  color="background-image:url('http://www.myweb.com/images/my-image.jpg')";  assertFalse(ContrastHelper.isColorTestable(color));  color="ackground-image:linear-gradient(rgb(34, 34, 34), rgb(17, 17, 17))";  assertFalse(ContrastHelper.isColorTestable(color));}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  doneButtonActionPerformed();}  }
class C{  public boolean hasErrors(){  return (this.errors.size() > 0);}  }
class C{  @Override public final boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  final gov.nasa.worldwind.geom.Line line=(gov.nasa.worldwind.geom.Line)o;  if (!direction.equals(line.direction))   return false;  if (!line.origin.equals(origin))   return false;  return true;}  }
class C{  public static Ingredient fromCursor(Cursor cursor){  Ingredient ingredient=new Ingredient();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {      ingredient.setAmount(cursor.getString(c));    } else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {      ingredient.setDescription(cursor.getString(c));    }  }  return ingredient;}  }
class C{  protected void engineInit(AlgorithmParameterSpec params,SecureRandom random) throws InvalidAlgorithmParameterException {  throw new InvalidAlgorithmParameterException("HMAC-MD5 key generation does not take any parameters");}  }
class C{  public void clear(){  this.point=null;  this.normal=null;  this.distance=0.0;}  }
class C{  private static void assertBitmapsEqual(Bitmap expected,Bitmap actual){  if (expected.getHeight() == 0 || expected.getWidth() == 0) {    throw new AssertionError("bitmap was empty");  }  if (expected.getHeight() != actual.getHeight() || expected.getWidth() != actual.getWidth()) {    throw new AssertionError("bitmap dimensions don't match");  }  for (int i=0; i < expected.getWidth(); i++) {    for (int j=0; j < expected.getHeight(); j++) {      int expectedPixel=expected.getPixel(i,j);      int actualPixel=actual.getPixel(i,j);      if (expectedPixel != actualPixel) {        throw new AssertionError(String.format(Locale.US,"Pixels don't match at (%d, %d), Expected %s, got %s",i,j,Long.toHexString(expected.getPixel(i,j)),Long.toHexString(actual.getPixel(i,j))));      }    }  }}  }
class C{  public double transProb(){  double transProb, distance;  if (m_Cache.containsKey(m_Test.value(m_AttrIndex))) {    KStarCache.TableEntry te=m_Cache.getCacheValues(m_Test.value(m_AttrIndex));    m_Scale=te.value;    m_MissingProb=te.pmiss;  } else {    if (m_BlendMethod == B_ENTROPY) {      m_Scale=scaleFactorUsingEntropy();    } else {      m_Scale=scaleFactorUsingBlend();    }    m_Cache.store(m_Test.value(m_AttrIndex),m_Scale,m_MissingProb);  }  if (m_Train.isMissing(m_AttrIndex)) {    transProb=m_MissingProb;  } else {    distance=Math.abs(m_Test.value(m_AttrIndex) - m_Train.value(m_AttrIndex));    transProb=PStar(distance,m_Scale);  }  return transProb;}  }
class C{  public boolean addGpsDateTimeStampTag(long timestamp){  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));  if (t == null) {    return false;  }  setTag(t);  mGPSTimeStampCalendar.setTimeInMillis(timestamp);  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});  if (t == null) {    return false;  }  setTag(t);  return true;}  }
class C{  public boolean protect(int socket){  ParcelFileDescriptor dup=null;  try {    dup=ParcelFileDescriptor.fromFd(socket);    return getService().protectVpn(dup);  } catch (  Exception e) {    return false;  } finally {    try {      dup.close();    } catch (    Exception e) {    }  }}  }
class C{  @Action(value="/receipts/collectionsWorkflow-approveCollections") public String approveCollections(){  wfAction=CollectionConstants.WF_ACTION_APPROVE;  return updateReceiptWorkflowStatus(wfAction,remarks);}  }
class C{  public ProjectAnalyzer(final Path... classPaths){  Stream.of(classPaths).forEach(null);}  }
class C{  public void addProvider(String name,ContentProvider provider){  mProviders.put(name,provider);}  }
class C{  public LocalTime toLocalTime(){  return new LocalTime(getLocalMillis(),getChronology());}  }
class C{  public void test_setElementAtLjava_lang_ObjectI(){  Vector v=vectorClone(tVector);  v.setElementAt("Inserted Element",99);  assertEquals("Element not set","Inserted Element",((String)v.elementAt(99)));  try {    tVector.setElementAt("Wrong position",-5);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.setElementAt("Wrong position",tVector.size() + 1);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));    mSize--;  }}  }
class C{  static public FunctionNode EQ(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.EQ,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public static String generateNativeGuid(ProtectionSystem device,String uniqueId,String type){  String typeStr="UNKNOWN";  if (OBJECT_TYPE_SET.contains(type)) {    typeStr=type;  }  return String.format("%s+%s+%s+%s",_deviceTypeMap.get(device.getSystemType()),device.getInstallationId(),typeStr,uniqueId);}  }
class C{  private static void warn(String expectedType,String name,Object actualValue){  log.warn("Cannot read {} as a {} for {}, using default",actualValue,expectedType,name);}  }
class C{  private void searchRaceWithEntrant(Collection<Race> races){  if (entrantToSearch != null) {    Collection<Race> foundRaces=findRaces(entrantToSearch,races);    if (foundRaces.size() == 1 && !raceInfo.isVisible()) {      raceFinder.close();      openRaceInfo(foundRaces.iterator().next());    } else {      raceFinder.setFoundRaces(foundRaces);    }    entrantToSearch=null;  }}  }
class C{  public final void add(double scalar,Matrix3d m1){  this.m00=m1.m00 + scalar;  this.m01=m1.m01 + scalar;  this.m02=m1.m02 + scalar;  this.m10=m1.m10 + scalar;  this.m11=m1.m11 + scalar;  this.m12=m1.m12 + scalar;  this.m20=m1.m20 + scalar;  this.m21=m1.m21 + scalar;  this.m22=m1.m22 + scalar;}  }
class C{  void readLAB() throws IOException {  Debug.message("e00","E00: read LAB");  labs=new OMGraphicList();  double[] coords=new double[2];  int[] header=new int[1];  while (true) {    String S=isr.readLine();    if (S == null)     break;    parseString(S,header,10);    int id=header[0];    if (id == -1)     break;    S=isr.readLine();    if (S == null)     break;    parseString(S,coords);    BasicLocation bl=new BasicLocation(coords[1],coords[0],"",LabMarker);    setLocationColor(bl,0);    bl.setShowLocation(true);    labs.add(bl);    bl.putAttribute(OMGraphic.APP_OBJECT,new E00Data(id));  }}  }
class C{  @Override public boolean hasWindowFocus(){  return isEnabled() && getVisibility() == VISIBLE ? true : false;}  }
class C{  public boolean cleanDatabase(Logger logger,String dbName,Map options){  boolean ret=false;  if (logger.isInfoEnabled()) {    logger.info("Limpiando la base de datos [" + dbName + "]...");  }  IDbCleanManager dbCleanManager=(IDbCleanManager)beanFactory.getBean(dbName + "DbCleanManager");  if (dbCleanManager != null) {    ret=dbCleanManager.clean(logger,options);  }  return ret;}  }
class C{  @ObjectiveCName("onUserVisibleWithUid:") public void onUserVisible(int uid){  modules.getEvents().post(new UserVisible(uid));}  }
class C{  public AuthorityKeyIdentifierStructure(PublicKey pubKey) throws InvalidKeyException {  super(fromKey(pubKey));}  }
class C{  @Override public String write(Experiment exp,File file){  String result;  FileWriter fwriter;  BufferedWriter bwriter;  result=null;  fwriter=null;  bwriter=null;  try {    fwriter=new FileWriter(file);    bwriter=new BufferedWriter(fwriter);    bwriter.write(Utils.toCommandLine(exp));    bwriter.newLine();    bwriter.flush();  } catch (  Exception e) {    result=handleException("Failed to write experiment to: " + file,e);  } finally {    FileUtils.closeQuietly(bwriter);    FileUtils.closeQuietly(fwriter);  }  return result;}  }
class C{  public void testDoubleValuePosMantissaIsZero(){  byte[] a={-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=1;  double result=8.98846567431158E307;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.277 -0500",hash_original_method="0E38673D7594A06D68DC2F60022760C9",hash_generated_method="08A4B710C95B83BF1C567F0FE2B1A1BB") public int listActive(String wildmat) throws IOException {  StringBuffer command=new StringBuffer("ACTIVE ");  command.append(wildmat);  return sendCommand(NNTPCommand.LIST,command.toString());}  }
class C{  public BloomFilter(int bitSetSize,int expectedNumberOfFilterElements,int actualNumberOfFilterElements,BitSet filterData){  this(bitSetSize,expectedNumberOfFilterElements);  this.bitset=filterData;  this.numberOfAddedElements=actualNumberOfFilterElements;}  }
class C{  @Override public double doubleValue(){  return value;}  }
class C{  @NotNull @Contract(pure=true) public static String convertLineSeparators(@NotNull String text){  return convertLineSeparators(text,false);}  }
class C{  public void addZoomListener(ZoomListener listener,boolean onButtons,boolean onPinch){  if (onButtons) {    if (mZoomIn != null) {      mZoomIn.addZoomListener(listener);      mZoomOut.addZoomListener(listener);    }  }  if (onPinch) {    mTouchHandler.addZoomListener(listener);  }}  }
class C{  public T caseSyntaxRelatedTElement(SyntaxRelatedTElement object){  return null;}  }
class C{  public BasicSentenceEnum(BaseSentence sent){  this.sent=sent;  this.SRS=null;}  }
class C{  public IntList(int initialCapacity){  super(true);  try {    values=new int[initialCapacity];  } catch (  NegativeArraySizeException ex) {    throw new IllegalArgumentException("size < 0");  }  size=0;  sorted=true;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  activity=this;  if (liteBluetooth == null) {    liteBluetooth=new LiteBluetooth(activity);  }  liteBluetooth.enableBluetoothIfDisabled(activity,1);  bleExceptionHandler=new DefaultBleExceptionHandler(this);}  }
class C{  public long clean(long ttlInMs){synchronized (StagingManager.class) {    log.trace("Cleaning staging area");    Set<String> keys=new HashSet<String>(resourceList.keySet());    long purgedFileCount=0;    long purgedFileSize=0;    long purgedMemCount=0;    long purgedMemSize=0;    for (    String key : keys) {      IStagedResource resource=resourceList.get(key);      if (resource != null) {        boolean resourceIsOld=(System.currentTimeMillis() - resource.getLastUpdateTime()) > ttlInMs;        if ((resource.getState() == State.DONE || (resource.getState() == State.READY && resource.getPath().contains("/common/")) || (resource.getState() == State.READY && ttlInMs == 0)) && resourceIsOld) {          if (!resource.isInUse()) {            boolean file=resource.isFileResource();            long size=resource.getSize();            if (resource.delete()) {              if (file) {                purgedFileCount++;                purgedFileSize+=size;              } else {                purgedMemCount++;                purgedMemSize+=size;              }              resourceList.remove(key);            } else {              log.warn("Failed to delete the '{}' staging resource",resource.getPath());            }          } else {            log.info("The '{}' staging resource qualified for being cleaned, but was in use.  It will not be cleaned right now",resource.getPath());          }        }      }    }    if (purgedFileCount > 0) {      if (purgedFileSize < 1000) {        log.debug("Purged {} staged files, freeing {} bytes of disk space",purgedFileCount,(int)(purgedFileSize));      } else {        log.debug("Purged {} staged files, freeing {} kbytes of disk space",purgedFileCount,(int)(purgedFileSize / 1000));      }    }    if (purgedMemCount > 0) {      if (purgedMemSize < 1000) {        log.debug("Purged {} staged memory buffers, freeing {} bytes of memory",purgedMemCount,(int)(purgedMemSize));      } else {        log.debug("Purged {} staged memory buffers, freeing {} kbytes of memory",purgedMemCount,(int)(purgedMemSize / 1000));      }    }    return purgedFileCount + purgedMemCount;  }}  }
class C{  public boolean match(Element e,String pseudoE){  ExtendedSelector p=(ExtendedSelector)getAncestorSelector();  if (!((ExtendedSelector)getSimpleSelector()).match(e,pseudoE))   return false;  for (Node n=e.getParentNode(); n != null; n=n.getParentNode()) {    if (n.getNodeType() == Node.ELEMENT_NODE && p.match((Element)n,null)) {      return true;    }  }  return false;}  }
class C{  public JButton(){  this(null,null);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void clearMemoryCache(){  memoryCache.clear();  weakCache.clear();}  }
class C{  private void removeTvShow(TvShow tvShow){synchronized (root) {    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);    DefaultMutableTreeNode parent=root;    if (child != null) {      int index=getIndexOfChild(parent,child);      nodeMap.remove(tvShow);      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {        nodeMap.remove(episode);        episode.removePropertyChangeListener(propertyChangeListener);      }      tvShow.removePropertyChangeListener(propertyChangeListener);      child.removeAllChildren();      child.removeFromParent();      if (index > -1) {        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});        for (        TreeModelListener listener : listeners) {          try {            listener.treeNodesRemoved(event);          } catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {          }        }      }    }  }}  }
class C{  public void clear(){  this.normal=null;  this.depth=0;}  }
class C{  public final boolean isAlertIndication(){  return containsKey(CimConstants.ALERT_INDICATION_KEY);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:53.369 -0500",hash_original_method="0302FD8CF05010F5CDB923C74BE177F9",hash_generated_method="F0519945758DEF606A15C565590D2C48") public CharSequence loadDescription(PackageManager pm) throws NotFoundException {  if (mReceiver.activityInfo.descriptionRes != 0) {    String packageName=mReceiver.resolvePackageName;    ApplicationInfo applicationInfo=null;    if (packageName == null) {      packageName=mReceiver.activityInfo.packageName;      applicationInfo=mReceiver.activityInfo.applicationInfo;    }    return pm.getText(packageName,mReceiver.activityInfo.descriptionRes,applicationInfo);  }  throw new NotFoundException();}  }
class C{  public Wildcard basicGetWildcard(){  return wildcard;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();}throw new IllegalStateException();}  }
class C{  public void subQuat(Quaternion input){  this.dirty=true;  subQuat(input,this);}  }
class C{  public double evaluate(final double x,final double a,final double b){  checkMaxIterations(maxIterations_);  QL.require(a > 0.0,"a must be greater than zero");  QL.require(b > 0.0,"b must be greater than zero");  if (x == 0.0)   return 0.0;  if (x == 1.0)   return 1.0;  QL.require(x > 0.0 && x < 1.0,"x must be in [0,1]");  final double result=Math.exp(_gammaFunction.logValue(a + b) - _gammaFunction.logValue(a) - _gammaFunction.logValue(b) + a * Math.log(x) + b * Math.log(1.0 - x));  if (x < (a + 1.0) / (a + b + 2.0))   return result * betaContinuedFraction(a,b,x,tolerance_,maxIterations_) / a;  return 1.0 - result * betaContinuedFraction(b,a,1.0 - x,tolerance_,maxIterations_) / b;}  }
class C{  public boolean isEnableSmoothing(){  return this.enableSmoothing;}  }
class C{  @VisibleForTesting private H2AccountPatchReviewStore(){  this.url="jdbc:h2:mem:account_patch_reviews;DB_CLOSE_DELAY=-1";}  }
class C{  private static Set<PsiClassType> createInjectedClassTypes(Project project){  Set<PsiClassType> injectedClassTypes=new HashSet<PsiClassType>();  injectedClassTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("com.google.appengine.api.users.User"));  injectedClassTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("javax.servlet.http.HttpServletRequest"));  injectedClassTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("javax.servlet.ServletContext"));  return Collections.unmodifiableSet(injectedClassTypes);}  }
class C{  @Override public UDF deepCopy(){  return new UDF();}  }
class C{  public final float[] toFloatArray(float[] array,int offset,int length){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  if (offset < 0) {    throw new IllegalArgumentException("Offset Is Invalid");  }  if (length < 1) {    throw new IllegalArgumentException("Length Is Invalid");  }  if (array.length < offset + length) {    throw new IllegalArgumentException("Array Invalid Length");  }  array[offset]=(float)this.x;  array[offset + 1]=(float)this.y;  if (length > 2)   array[offset + 2]=(float)this.z;  if (length > 3)   array[offset + 3]=(float)this.w;  return array;}  }
class C{  public synchronized void takeSnapshot(String regionName){  flush();  ApplicationVM[] apps=systemAgent.listApplications();  for (int j=0; j < apps.length; j++) {    notHeardFrom.add(apps[j]);    apps[j].takeRegionSnapshot(regionName,snapshotCount);  }}  }
class C{  private void updateItem(int slot){  ItemStack source=view.getItem(slot);  slots[slot]=source == null ? null : ItemIds.sanitize(source.clone());}  }
class C{  public Finding(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public static ByteBuffer positionAtRowData(RowState rowState,RowIdImpl rowId) throws IOException {  positionAtRowHeader(rowState,rowId);  if (!rowState.isValid() || rowState.isDeleted()) {    rowState.setStatus(RowStateStatus.AT_FINAL);    return null;  }  ByteBuffer rowBuffer=rowState.getFinalPage();  int rowNum=rowState.getFinalRowId().getRowNumber();  JetFormat format=rowState.getTable().getFormat();  if (rowState.isAtFinalRow()) {    return PageChannel.narrowBuffer(rowBuffer,findRowStart(rowBuffer,rowNum,format),findRowEnd(rowBuffer,rowNum,format));  }  while (true) {    short rowStart=rowBuffer.getShort(getRowStartOffset(rowNum,format));    short rowEnd=findRowEnd(rowBuffer,rowNum,format);    boolean overflowRow=isOverflowRow(rowStart);    rowStart=(short)(rowStart & OFFSET_MASK);    if (overflowRow) {      if ((rowEnd - rowStart) < 4) {        throw new IOException(rowState.getTable().withErrorContext("invalid overflow row info"));      }      int overflowRowNum=ByteUtil.getUnsignedByte(rowBuffer,rowStart);      int overflowPageNum=ByteUtil.get3ByteInt(rowBuffer,rowStart + 1);      rowBuffer=rowState.setOverflowRow(new RowIdImpl(overflowPageNum,overflowRowNum));      rowNum=overflowRowNum;    } else {      rowState.setStatus(RowStateStatus.AT_FINAL);      return PageChannel.narrowBuffer(rowBuffer,rowStart,rowEnd);    }  }}  }
class C{  public void putDouble(String key,double value){  map.put(key,value);}  }
class C{  public static TriggerProcessStatusException convertToApi(org.oscm.internal.types.exception.TriggerProcessStatusException oldEx){  return convertExceptionToApi(oldEx,TriggerProcessStatusException.class);}  }
class C{  public String resolverClassName(){  return resolverSpi.getClass().getName();}  }
class C{  private void dynamicPriority(){  String sql="SELECT * " + "FROM AD_WF_Activity a " + "WHERE Processed='N' AND WFState='OS'"+ " AND EXISTS (SELECT * FROM AD_Workflow wf"+ " INNER JOIN AD_WF_Node wfn ON (wf.AD_Workflow_ID=wfn.AD_Workflow_ID) "+ "WHERE a.AD_WF_Node_ID=wfn.AD_WF_Node_ID AND wf.AD_WorkflowProcessor_ID=?"+ " AND wfn.DynPriorityUnit IS NOT NULL AND wfn.DynPriorityChange IS NOT NULL)";  PreparedStatement pstmt=null;  int count=0;  int countEMails=0;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_model.getAD_WorkflowProcessor_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MWFActivity activity=new MWFActivity(getCtx(),rs,null);      if (activity.getDynPriorityStart() == 0)       activity.setDynPriorityStart(activity.getPriority());      long ms=System.currentTimeMillis() - activity.getCreated().getTime();      MWFNode node=activity.getNode();      int prioDiff=node.calculateDynamicPriority((int)(ms / 1000));      activity.setPriority(activity.getDynPriorityStart() + prioDiff);      activity.saveEx();      count++;    }    rs.close();  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(pstmt);  }  m_summary.append("DynPriority #").append(count).append(" - ");}  }
class C{  private void uninstallClientDecorations(JRootPane root){  uninstallBorder(root);  uninstallWindowListeners(root);  setTitlePane(root,null);  uninstallLayout(root);  int style=root.getWindowDecorationStyle();  if (style == JRootPane.NONE) {    root.repaint();    root.revalidate();  }  if (window != null) {    window.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }  window=null;}  }
class C{  public JSONArray(Collection<Object> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    Iterator<Object> iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  public int findReferencePosition(int offset,boolean danglingElse,boolean matchBrace,boolean matchParen,boolean matchCase,boolean throwsClause){  fIndent=0;  fAlign=JavaHeuristicScanner.NOT_FOUND;  fPosition=offset;  if (matchBrace) {    if (skipScope(Symbols.TokenLBRACE,Symbols.TokenRBRACE)) {      try {        int lineOffset=fDocument.getLineOffset(fLine);        if (lineOffset <= fPosition && fDocument.get(lineOffset,fPosition - lineOffset).trim().length() == 0)         return fPosition;      } catch (      BadLocationException e) {      }      int pos=skipToStatementStart(true,true);      fIndent=0;      return pos;    } else {      int pos=findReferencePosition(offset,danglingElse,false,matchParen,matchCase,throwsClause);      fIndent--;      return pos;    }  }  if (matchParen) {    if (skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN)) {      fIndent=fPrefs.prefContinuationIndent;      return fPosition;    } else {      int pos=findReferencePosition(offset,danglingElse,matchBrace,false,matchCase,throwsClause);      fIndent--;      return pos;    }  }  if (matchCase) {    return matchCaseAlignment();  }  int storedPos=fPosition;  if (peekChar(offset) == Symbols.TokenLBRACE && looksLikeMethodDeclLBrace(offset)) {    return skipToStatementStart(danglingElse,false);  }  fPosition=storedPos;  nextToken();switch (fToken) {case Symbols.TokenGREATERTHAN:case Symbols.TokenRBRACE:    int pos=fPosition;  if (!skipScope())   fPosition=pos;return skipToStatementStart(danglingElse,false);case Symbols.TokenSEMICOLON:pos=fPosition;if (isSemicolonPartOfForStatement()) {fIndent=fPrefs.prefContinuationIndent;return fPosition;} else {fPosition=pos;if (isTryWithResources()) {fIndent=fPrefs.prefContinuationIndent;return fPosition;} else {fPosition=pos;return skipToStatementStart(danglingElse,false);}}case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:return handleScopeIntroduction(offset + 1);case Symbols.TokenEOF:return JavaHeuristicScanner.NOT_FOUND;case Symbols.TokenEQUAL:return handleEqual();case Symbols.TokenCOLON:fIndent=fPrefs.prefCaseBlockIndent;return fPosition;case Symbols.TokenQUESTIONMARK:if (fPrefs.prefTernaryDeepAlign) {setFirstElementAlignment(fPosition,offset + 1);return fPosition;} else {fIndent=fPrefs.prefTernaryIndent;return fPosition;}case Symbols.TokenDO:case Symbols.TokenWHILE:case Symbols.TokenELSE:fIndent=fPrefs.prefSimpleIndent;return fPosition;case Symbols.TokenTRY:return skipToStatementStart(danglingElse,false);case Symbols.TokenRBRACKET:fIndent=fPrefs.prefContinuationIndent;return fPosition;case Symbols.TokenRPAREN:if (throwsClause) {fIndent=fPrefs.prefContinuationIndent;return fPosition;}int line=fLine;if (skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN)) {int scope=fPosition;nextToken();if (fToken == Symbols.TokenIF || fToken == Symbols.TokenWHILE || fToken == Symbols.TokenFOR) {fIndent=fPrefs.prefSimpleIndent;return fPosition;}fPosition=scope;if (fToken == Symbols.TokenCATCH) {return skipToStatementStart(danglingElse,false);}fPosition=scope;if (looksLikeAnonymousTypeDecl()) {return skipToStatementStart(danglingElse,false);}fPosition=scope;if (looksLikeAnnotation()) {return skipToStatementStart(danglingElse,false);}}fPosition=offset;fLine=line;return skipToPreviousListItemOrListStart();case Symbols.TokenRETURN:fIndent=fPrefs.prefContinuationIndent;return fPosition;case Symbols.TokenPLUS:if (isStringContinuation(fPosition)) {try {if (isSecondLineOfStringContinuation(offset)) {fAlign=JavaHeuristicScanner.NOT_FOUND;fIndent=fPrefs.prefContinuationIndent;} else {int previousLineOffset=fDocument.getLineOffset(fDocument.getLineOfOffset(offset) - 1);fAlign=fScanner.findNonWhitespaceForwardInAnyPartition(previousLineOffset,JavaHeuristicScanner.UNBOUND);}} catch (BadLocationException e) {JavaPlugin.log(e);}return fPosition;}fPosition=offset;return skipToPreviousListItemOrListStart();case Symbols.TokenCOMMA:default :return skipToPreviousListItemOrListStart();}}  }
class C{  protected void processEnumerated(EnumeratedMetadata enumerated,DatabaseMapping mapping,MetadataClass referenceClass,boolean isForMapKey){  if (enumerated == null) {    enumerated=new EnumeratedMetadata(this);  }  enumerated.process(mapping,this,referenceClass,isForMapKey);}  }
class C{  public void put(E e){  offer(e);}  }
class C{  public static void w(String tag,String s,Throwable e){  if (LDJSLOG.WARN >= LOGLEVEL)   Log.w(tag,s,e);}  }
class C{  private void write(OutputNode node,Object source,int index) throws Exception {  Object item=Array.get(source,index);  if (item != null) {    if (!isOverridden(node,item)) {      root.write(node,item);    }  }}  }
class C{  public void writeReport(BenchInfo[] binfo,Properties props) throws IOException {  PrintStream p=new PrintStream(out);  float total=0.0f;  p.println("<html>");  p.println("<head>");  p.println("<title>" + title + "</title>");  p.println("</head>");  p.println("<body bgcolor=\"#ffffff\">");  p.println("<h3>" + title + "</h3>");  p.println("<hr>");  p.println("<table border=0>");  for (int i=0; i < PROPNAMES.length; i++) {    p.println("<tr><td>" + PROPNAMES[i] + ": <td>"+ props.getProperty(PROPNAMES[i]));  }  p.println("</table>");  p.println("<p>");  p.println("<table border=1>");  p.println("<tr><th># <th>Benchmark Name <th>Time (ms) <th>Score");  for (int i=0; i < binfo.length; i++) {    BenchInfo b=binfo[i];    p.print("<tr><td>" + i + " <td>"+ b.getName());    if (b.getTime() != -1) {      float score=b.getTime() * b.getWeight();      total+=score;      p.println(" <td>" + b.getTime() + " <td>"+ Util.floatToString(score,PRECISION));    } else {      p.println(" <td>-- <td>--");    }  }  p.println("<tr><td colspan=3><b>Total score</b> <td><b>" + Util.floatToString(total,PRECISION) + "</b>");  p.println("</table>");  p.println("<p>");  p.println("<hr>");  p.println("<i>Report generated on " + new Date() + "</i>");  p.println("</body>");  p.println("</html>");}  }
class C{  public BOVWBuilder(IndexReader reader,int numDocsForVocabulary,int numClusters){  this.numDocsForVocabulary=numDocsForVocabulary;  this.numClusters=numClusters;  this.reader=reader;}  }
class C{  @Override public SparseArray<Face> detect(Frame frame){  final int kMinDimension=147;  final int kDimensionLower=640;  int width=frame.getMetadata().getWidth();  int height=frame.getMetadata().getHeight();  if (height > (2 * kDimensionLower)) {    double multiple=(double)height / (double)kDimensionLower;    double lowerWidth=Math.floor((double)width / multiple);    if (lowerWidth < kMinDimension) {      int newWidth=(int)Math.ceil(kMinDimension * multiple);      frame=padFrameRight(frame,newWidth);    }  } else   if (width > (2 * kDimensionLower)) {    double multiple=(double)width / (double)kDimensionLower;    double lowerHeight=Math.floor((double)height / multiple);    if (lowerHeight < kMinDimension) {      int newHeight=(int)Math.ceil(kMinDimension * multiple);      frame=padFrameBottom(frame,newHeight);    }  } else   if (width < kMinDimension) {    frame=padFrameRight(frame,kMinDimension);  }  return mDelegate.detect(frame);}  }
class C{  public final void flushTextList(){  pointer=0;  max=2000;  contents=new String[max];  f_writingMode=new int[max];  text_length=new int[max];  f_character_spacing=new float[max];  f_end_font_size=new int[max];  space_width=new float[max];  f_x1=new float[max];  f_x2=new float[max];  f_y1=new float[max];  f_y2=new float[max];  colorTag=new String[max];}  }
class C{  private void launchAnimBackup(){  if (!backupRoundTripFirstLaunched) {    if (backupRoundTrip.getLevel() == 1) {      backupRoundTrip.setLevel(0);    } else {      backupRoundTrip.setLevel(1);    }  } else {    backupRoundTripFirstLaunched=false;  }  currentBackupDrawable=(AnimatedVectorDrawable)backupRoundTrip.getCurrent();  currentBackupDrawable.start();}  }
class C{  public Builder popEnterAnimResId(int popEnterAnimResId){  mPopEnterAnimResId=popEnterAnimResId;  return this;}  }
class C{  public HomeActivityMovement(Settings settings){  super(settings);  distance=100;  pathFinder=new DijkstraPathFinder(null);  mode=WALKING_HOME_MODE;  String homeLocationsFile=null;  try {    homeLocationsFile=settings.getSetting(HOME_LOCATIONS_FILE_SETTING);  } catch (  Throwable t) {  }  timeDiffSTD=settings.getInt(STD_FOR_TIME_DIFF_SETTING);  if (homeLocationsFile == null) {    MapNode[] mapNodes=(MapNode[])getMap().getNodes().toArray(new MapNode[0]);    int homeIndex=rng.nextInt(mapNodes.length - 1);    homeLocation=mapNodes[homeIndex].getLocation().clone();  } else {    try {      allHomes=new LinkedList<Coord>();      List<Coord> locationsRead=(new WKTReader()).readPoints(new File(homeLocationsFile));      for (      Coord coord : locationsRead) {        SimMap map=getMap();        Coord offset=map.getOffset();        if (map.isMirrored()) {          coord.setLocation(coord.getX(),-coord.getY());        }        coord.translate(offset.getX(),offset.getY());        allHomes.add(coord);      }      homeLocation=allHomes.get(rng.nextInt(allHomes.size())).clone();    } catch (    Exception e) {      e.printStackTrace();    }  }  if (timeDiffSTD == -1) {    timeDifference=rng.nextInt(DAY_LENGTH) - DAY_LENGTH / 2;  } else   if (timeDiffSTD == 0) {    timeDifference=0;  } else {    timeDifference=(int)Math.min(Math.max((rng.nextGaussian() * timeDiffSTD),-DAY_LENGTH / 2),DAY_LENGTH / 2);  }}  }
class C{  public void incSentMessagesTime(long nanos){  if (enableClockStats) {    this.stats.incLong(sentMessagesTimeId,nanos);    long millis=nanos / 1000000;    if (getSentMessagesMaxTime() < millis) {      this.stats.setLong(sentMessagesMaxTimeId,millis);    }  }}  }
class C{  private boolean isNextCharacterEscapedQuote(String nextLine,boolean inQuotes,int i){  return inQuotes && nextLine.length() > (i + 1) && isCharacterQuoteCharacter(nextLine.charAt(i + 1));}  }
class C{  @Override protected void finalize() throws Throwable {  mContext=null;  super.finalize();}  }
class C{  @Deprecated public static int dragViewBy(InstrumentationTestCase test,View v,int gravity,int deltaX,int deltaY){  int[] xy=new int[2];  getStartLocation(v,gravity,xy);  final int fromX=xy[0];  final int fromY=xy[1];  int distance=(int)Math.sqrt(deltaX * deltaX + deltaY * deltaY);  drag(test,fromX,fromX + deltaX,fromY,fromY + deltaY,distance);  return distance;}  }
class C{  public static boolean isAuthorizedIP(String ip,List<String> authorizedIPs){  if (ip == null)   return false;  if (authorizedIPs == null) {    return true;  }  for (  String ipRange : authorizedIPs) {    if (ipRange != null)     if (isInRange(ip,ipRange))     return true;  }  return false;}  }
class C{  static Object create(Context cx,Class<?> cl,Callable function){  if (!cl.isInterface())   throw new IllegalArgumentException();  Scriptable topScope=ScriptRuntime.getTopCallScope(cx);  ClassCache cache=ClassCache.get(topScope);  InterfaceAdapter adapter;  adapter=(InterfaceAdapter)cache.getInterfaceAdapter(cl);  ContextFactory cf=cx.getFactory();  if (adapter == null) {    Method[] methods=cl.getMethods();    if (methods.length == 0) {      throw Context.reportRuntimeError2("msg.no.empty.interface.conversion",String.valueOf(function),cl.getClass().getName());    }    boolean canCallFunction=false;    canCallFunctionChecks: {      Class<?>[] argTypes=methods[0].getParameterTypes();      for (int i=1; i != methods.length; ++i) {        Class<?>[] types2=methods[i].getParameterTypes();        if (types2.length != argTypes.length) {          break canCallFunctionChecks;        }        for (int j=0; j != argTypes.length; ++j) {          if (types2[j] != argTypes[j]) {            break canCallFunctionChecks;          }        }      }      canCallFunction=true;    }    if (!canCallFunction) {      throw Context.reportRuntimeError2("msg.no.function.interface.conversion",String.valueOf(function),cl.getClass().getName());    }    adapter=new InterfaceAdapter(cf,cl);    cache.cacheInterfaceAdapter(cl,adapter);  }  return VMBridge.instance.newInterfaceProxy(adapter.proxyHelper,cf,adapter,function,topScope);}  }
class C{  public void resetFields(){  jComboReference.removeAllItems();  jComboReference.setEnabled(false);  jComboName.removeAllItems();  jComboName.setEnabled(false);  jComboBarcode.removeAllItems();  jComboBarcode.setEnabled(false);  jComboBuy.removeAllItems();  jComboBuy.setEnabled(false);  jComboSell.removeAllItems();  jComboSell.setEnabled(false);  jComboCategory.removeAllItems();  jComboCategory.setEnabled(false);  jComboDefaultCategory.setEnabled(false);  jComboSecurity.removeAllItems();  jComboSecurity.setEnabled(false);  jComboMaximum.removeAllItems();  jComboMaximum.setEnabled(false);  jComboTax.setEnabled(false);  jComboBoxButtonText.setEnabled(false);  jComboBoxButtonText.removeAllItems();  jComboBoxRemotePrint.setEnabled(false);  jComboBoxRemotePrint.removeAllItems();  jComboBoxService.setEnabled(false);  jComboBoxService.removeAllItems();  jComboBoxVarPrice.setEnabled(false);  jComboBoxVarPrice.removeAllItems();  jComboBoxWarranty.setEnabled(false);  jComboBoxWarranty.removeAllItems();  jComboBoxTextTip.setEnabled(false);  jComboBoxTextTip.removeAllItems();  jComboBoxProp.setEnabled(false);  jComboBoxProp.removeAllItems();  jComboBoxAux.setEnabled(false);  jComboBoxAux.removeAllItems();  jComboBoxShortName.setEnabled(false);  jComboBoxShortName.removeAllItems();  jComboBoxIspack.setEnabled(false);  jComboBoxIspack.removeAllItems();  jComboBoxPackSize.setEnabled(false);  jComboBoxPackSize.removeAllItems();  jComboBoxPackOf.setEnabled(false);  jComboBoxPackOf.removeAllItems();  jImport.setEnabled(false);  jHeaderRead.setEnabled(false);  jCheckInCatalogue.setSelected(true);  jCheckInCatalogue.setEnabled(false);  jCheckSellIncTax.setSelected(false);  jCheckSellIncTax.setEnabled(false);  jCheckAddStockLevels.setSelected(false);  jCheckAddStockLevels.setEnabled(false);  jCreateCat.setSelected(false);  jFileName.setText(null);  csvFileName="";  jTextNew.setText("");  jTextUpdate.setText("");  jTextInvalid.setText("");  jTextMissing.setText("");  jTextNoChange.setText("");  jTextRecords.setText("");  jTextBadPrice.setText("");  jTextBadCats.setText("");  Headers.clear();  newRecords=0;  invalidRecords=0;  priceUpdates=0;  missingData=0;  noChanges=0;  badPrice=0;}  }
class C{  @Override public void validate(){}  }
class C{  public boolean isAccessibleViewsEmpty(){  return accessibleViewsEmpty;}  }
class C{  @SuppressWarnings("deprecation") public LocalXSessionFactoryBuilder(DataSource dataSource,ResourceLoader resourceLoader){  getProperties().put(Environment.CURRENT_SESSION_CONTEXT_CLASS,SpringSessionContext.class.getName());  if (dataSource != null) {    getProperties().put(Environment.DATASOURCE,dataSource);  }  getProperties().put(AvailableSettings.APP_CLASSLOADER,resourceLoader.getClassLoader());  this.resourcePatternResolver=ResourcePatternUtils.getResourcePatternResolver(resourceLoader);}  }
class C{  public Vector3d rotate(Quaterniondc quat){  quat.transform(this,this);  return this;}  }
class C{  public POSTrainGenerating(String templateFile){  this.templateFile=templateFile;  init();}  }
class C{  @Override public void updatePolicyAndLimits(List<URI> volumeURIs,URI newVpoolURI,String opId) throws ControllerException {  BlockExportController controller=getExportController();  _dispatcher.queue(volumeURIs.get(0),"export",controller,"updatePolicyAndLimits",volumeURIs,newVpoolURI,opId);}  }
class C{  private static boolean hasSelectionHandle(final PNode node){  for (Iterator i=node.getChildrenIterator(); i.hasNext(); ) {    PNode n=(PNode)i.next();    if (n instanceof SelectionHandle) {      return true;    }  }  return false;}  }
class C{  @Override public void onReceive(Context context,Intent intent){  String action=intent.getAction();  if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {    onWifiP2pStateChanged(context,intent);  } else   if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {    onWifiP2pPeersChanged(context,intent);  } else   if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {    onWifiP2pConnectionChanged(context,intent);  } else   if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {    onWifiP2pThisDeviceChanged(context,intent);  } else   if (WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION.equals(action)) {    onWifiP2pDiscoveryChanged(context,intent);  } else {    Log.wtf(TAG,"Received an event we weren't expecting: " + action);  }}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setSize(474,251);  this.setName(Constant.messages.getString("httpsessions.panel.title"));  this.setIcon(new ImageIcon(HttpSessionsPanel.class.getResource("/resource/icon/16/session.png")));  this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.ALT_MASK | Event.SHIFT_MASK,false));  this.setMnemonic(Constant.messages.getChar("httpsessions.panel.mnemonic"));  this.add(getPanelCommand(),getPanelCommand().getName());}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  if (getRepresentCopiesUsingWeights() && !(m_Classifier instanceof WeightedInstancesHandler)) {    throw new IllegalArgumentException("Cannot represent copies using weights when " + "base learner in bagging does not implement " + "WeightedInstancesHandler.");  }  m_data=new Instances(data);  m_data.deleteWithMissingClass();  super.buildClassifier(m_data);  if (m_CalcOutOfBag && (m_BagSizePercent != 100)) {    throw new IllegalArgumentException("Bag size needs to be 100% if " + "out-of-bag error is to be calculated!");  }  m_random=new Random(m_Seed);  m_inBag=null;  if (m_CalcOutOfBag)   m_inBag=new boolean[m_Classifiers.length][];  for (int j=0; j < m_Classifiers.length; j++) {    if (m_Classifier instanceof Randomizable) {      ((Randomizable)m_Classifiers[j]).setSeed(m_random.nextInt());    }  }  buildClassifiers();  if (getCalcOutOfBag()) {    double outOfBagCount=0.0;    double errorSum=0.0;    boolean numeric=m_data.classAttribute().isNumeric();    for (int i=0; i < m_data.numInstances(); i++) {      double vote;      double[] votes;      if (numeric)       votes=new double[1]; else       votes=new double[m_data.numClasses()];      int voteCount=0;      for (int j=0; j < m_Classifiers.length; j++) {        if (m_inBag[j][i])         continue;        if (numeric) {          double pred=m_Classifiers[j].classifyInstance(m_data.instance(i));          if (!Utils.isMissingValue(pred)) {            votes[0]+=pred;            voteCount++;          }        } else {          voteCount++;          double[] newProbs=m_Classifiers[j].distributionForInstance(m_data.instance(i));          for (int k=0; k < newProbs.length; k++) {            votes[k]+=newProbs[k];          }        }      }      if (numeric) {        if (voteCount == 0) {          vote=Utils.missingValue();        } else {          vote=votes[0] / voteCount;        }      } else {        if (Utils.eq(Utils.sum(votes),0)) {          vote=Utils.missingValue();        } else {          vote=Utils.maxIndex(votes);          Utils.normalize(votes);        }      }      if (!Utils.isMissingValue(vote)) {        outOfBagCount+=m_data.instance(i).weight();        if (numeric) {          errorSum+=StrictMath.abs(vote - m_data.instance(i).classValue()) * m_data.instance(i).weight();        } else {          if (vote != m_data.instance(i).classValue())           errorSum+=m_data.instance(i).weight();        }      }    }    if (outOfBagCount > 0) {      m_OutOfBagError=errorSum / outOfBagCount;    }  } else {    m_OutOfBagError=0;  }  m_data=null;}  }
class C{  public Promise<T> onFinally(Action0 finallyDo){  return new Promise<T>(this.observable.finallyDo(finallyDo));}  }
class C{  public java.lang.String toString(){  return Integer.toString(value);}  }
class C{  @Override public void onUpdate(){  super.onUpdate();  if (this.isAnvil) {    ArrayList entities=new ArrayList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.boundingBox));    Iterator var5=entities.iterator();    while (var5.hasNext()) {      Entity entity=(Entity)var5.next();      entity.attackEntityFrom(DamageSource.anvil,15);    }  }  if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {    float var1=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);    this.prevRotationYaw=this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180.0D / Math.PI);    this.prevRotationPitch=this.rotationPitch=(float)(Math.atan2(this.motionY,var1) * 180.0D / Math.PI);  }  Block block=this.worldObj.getBlock(this.xTile,this.yTile,this.zTile);  if (!worldObj.isAirBlock(xTile,yTile,zTile)) {    block.setBlockBoundsBasedOnState(this.worldObj,this.xTile,this.yTile,this.zTile);    AxisAlignedBB var2=block.getCollisionBoundingBoxFromPool(this.worldObj,this.xTile,this.yTile,this.zTile);    if (var2 != null && var2.isVecInside(Vec3.createVectorHelper(this.posX,this.posY,this.posZ))) {      this.inGround=true;    }  }  if (this.arrowShake > 0) {    --this.arrowShake;  }  if (this.inGround) {    block=this.worldObj.getBlock(this.xTile,this.yTile,this.zTile);    int var18=this.worldObj.getBlockMetadata(this.xTile,this.yTile,this.zTile);    if (block == this.inTile && var18 == this.inData) {      if (this.isExplosive) {        explode();      } else {        if (this.isAnvil && this.worldObj.rand.nextFloat() > 0.5f) {          this.worldObj.playAuxSFX(1022,(int)this.posX,(int)this.posY,(int)this.posZ,0);        }        this.setDead();      }    } else {      this.inGround=false;      this.motionX*=(this.rand.nextFloat() * 0.2F);      this.motionY*=(this.rand.nextFloat() * 0.2F);      this.motionZ*=(this.rand.nextFloat() * 0.2F);      this.ticksInGround=0;      this.ticksInAir=0;    }  } else {    ++this.ticksInAir;    Vec3 var16=Vec3.createVectorHelper(this.posX,this.posY,this.posZ);    Vec3 var17=Vec3.createVectorHelper(this.posX + this.motionX,this.posY + this.motionY,this.posZ + this.motionZ);    MovingObjectPosition movingObjPos=this.worldObj.func_147447_a(var16,var17,false,true,false);    var16=Vec3.createVectorHelper(this.posX,this.posY,this.posZ);    var17=Vec3.createVectorHelper(this.posX + this.motionX,this.posY + this.motionY,this.posZ + this.motionZ);    if (movingObjPos != null) {      var17=Vec3.createVectorHelper(movingObjPos.hitVec.xCoord,movingObjPos.hitVec.yCoord,movingObjPos.hitVec.zCoord);    }    Entity var4=null;    List var5=this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.boundingBox.addCoord(this.motionX,this.motionY,this.motionZ).expand(1.0D,1.0D,1.0D));    double var6=0.0D;    int var8;    float var10;    for (var8=0; var8 < var5.size(); ++var8) {      Entity var9=(Entity)var5.get(var8);      if (var9.canBeCollidedWith() && (this.ticksInAir >= 5)) {        var10=0.3F;        AxisAlignedBB var11=var9.boundingBox.expand(var10,var10,var10);        MovingObjectPosition var12=var11.calculateIntercept(var16,var17);        if (var12 != null) {          double var13=var16.distanceTo(var12.hitVec);          if (var13 < var6 || var6 == 0.0D) {            var4=var9;            var6=var13;          }        }      }    }    if (var4 != null) {      movingObjPos=new MovingObjectPosition(var4);    }    float speed;    if (movingObjPos != null) {      if (movingObjPos.entityHit != null) {        speed=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);        int damage=(int)Math.ceil(speed * this.damage);        if (this.arrowCritical) {          damage+=this.rand.nextInt(damage / 2 + 2);        }        DamageSource damageSource=(new EntityDamageSourceIndirect("arrow",this,this)).setProjectile();        if (this.isBurning()) {          movingObjPos.entityHit.setFire(5);        }        if (movingObjPos.entityHit.attackEntityFrom(damageSource,damage)) {          if (movingObjPos.entityHit instanceof EntityLiving) {            EntityLiving var24=(EntityLiving)movingObjPos.entityHit;            if (!this.worldObj.isRemote) {              var24.setArrowCountInEntity(var24.getArrowCountInEntity() + 1);            }            if (this.knowBackStrength > 0) {              float var21=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);              if (var21 > 0.0F) {                movingObjPos.entityHit.addVelocity(this.motionX * this.knowBackStrength * 0.6000000238418579D / var21,0.1D,this.motionZ * this.knowBackStrength * 0.6000000238418579D / var21);              }            }          }          this.worldObj.playSoundAtEntity(this,"random.bowhit",1.0F,1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));          this.setDead();        } else {          this.motionX*=-0.10000000149011612D;          this.motionY*=-0.10000000149011612D;          this.motionZ*=-0.10000000149011612D;          this.rotationYaw+=180.0F;          this.prevRotationYaw+=180.0F;          this.ticksInAir=0;        }      } else {        this.xTile=movingObjPos.blockX;        this.yTile=movingObjPos.blockY;        this.zTile=movingObjPos.blockZ;        this.inTile=this.worldObj.getBlock(this.xTile,this.yTile,this.zTile);        this.inData=this.worldObj.getBlockMetadata(this.xTile,this.yTile,this.zTile);        this.motionX=((float)(movingObjPos.hitVec.xCoord - this.posX));        this.motionY=((float)(movingObjPos.hitVec.yCoord - this.posY));        this.motionZ=((float)(movingObjPos.hitVec.zCoord - this.posZ));        speed=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);        this.posX-=this.motionX / speed * 0.05000000074505806D;        this.posY-=this.motionY / speed * 0.05000000074505806D;        this.posZ-=this.motionZ / speed * 0.05000000074505806D;        this.worldObj.playSoundAtEntity(this,"random.bowhit",1.0F,1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));        this.inGround=true;        this.arrowShake=7;        this.arrowCritical=false;      }    }    if (this.arrowCritical) {      for (var8=0; var8 < 4; ++var8) {        this.worldObj.spawnParticle("crit",this.posX + this.motionX * var8 / 4.0D,this.posY + this.motionY * var8 / 4.0D,this.posZ + this.motionZ * var8 / 4.0D,-this.motionX,-this.motionY + 0.2D,-this.motionZ);      }    }    this.posX+=this.motionX;    this.posY+=this.motionY;    this.posZ+=this.motionZ;    speed=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);    this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180.0D / Math.PI);    for (this.rotationPitch=(float)(Math.atan2(this.motionY,speed) * 180.0D / Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch-=360.0F) {      ;    }    while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {      this.prevRotationPitch+=360.0F;    }    while (this.rotationYaw - this.prevRotationYaw < -180.0F) {      this.prevRotationYaw-=360.0F;    }    while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {      this.prevRotationYaw+=360.0F;    }    this.rotationPitch=this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;    this.rotationYaw=this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;    float var23=0.99F;    var10=0.05F;    if (this.isInWater()) {      for (int var25=0; var25 < 4; ++var25) {        float var24=0.25F;        this.worldObj.spawnParticle("bubble",this.posX - this.motionX * var24,this.posY - this.motionY * var24,this.posZ - this.motionZ * var24,this.motionX,this.motionY,this.motionZ);      }      var23=0.8F;    }    this.motionX*=var23;    this.motionY*=var23;    this.motionZ*=var23;    this.motionY-=var10;    this.setPosition(this.posX,this.posY,this.posZ);  }}  }
class C{  public JavaLogger(){  this(!isConfigured());}  }
class C{  public static void main(String[] args){  System.setProperty("apple.awt.UIElement","true");  try {    if (args.length == 0 || args[0].equalsIgnoreCase("-h") || args[0].equalsIgnoreCase("-help")) {      System.err.println("Usage:\n\tweka.Run [-no-scan] [-no-load] [-match-anywhere] <scheme name [scheme options]>");      return;    }    boolean noScan=false;    boolean noLoad=false;    boolean matchAnywhere=false;    if (Utils.getFlag("list-packages",args)) {      weka.core.WekaPackageManager.loadPackages(true,true,false);      return;    }    int schemeIndex=0;    if (Utils.getFlag("no-load",args)) {      noLoad=true;      schemeIndex++;    }    if (Utils.getFlag("no-scan",args)) {      noScan=true;      schemeIndex++;    }    if (Utils.getFlag("match-anywhere",args)) {      matchAnywhere=true;      schemeIndex++;    }    if (!noLoad) {      weka.core.WekaPackageManager.loadPackages(false,true,false);    }    String schemeToRun=null;    String[] options=null;    if (schemeIndex >= args.length) {      System.err.println("No scheme name given.");      return;    }    schemeToRun=args[schemeIndex];    options=new String[args.length - schemeIndex - 1];    if (options.length > 0) {      System.arraycopy(args,schemeIndex + 1,options,0,options.length);    }    if (!noScan) {      List<String> prunedMatches=findSchemeMatch(schemeToRun,matchAnywhere);      if (prunedMatches.size() == 0) {        System.err.println("Can't find scheme " + schemeToRun + ", or it is not runnable.");        return;      } else       if (prunedMatches.size() > 1) {        java.io.BufferedReader br=new java.io.BufferedReader(new java.io.InputStreamReader(System.in));        boolean done=false;        while (!done) {          System.out.println("Select a scheme to run, or <return> to exit:");          for (int i=0; i < prunedMatches.size(); i++) {            System.out.println("\t" + (i + 1) + ") "+ prunedMatches.get(i));          }          System.out.print("\nEnter a number > ");          String choice=null;          int schemeNumber=0;          try {            choice=br.readLine();            if (choice.equals("")) {              return;            } else {              schemeNumber=Integer.parseInt(choice);              schemeNumber--;              if (schemeNumber >= 0 && schemeNumber < prunedMatches.size()) {                schemeToRun=prunedMatches.get(schemeNumber);                done=true;              }            }          } catch (          java.io.IOException ex) {          }        }      } else {        schemeToRun=prunedMatches.get(0);      }    }    Object scheme=null;    try {      scheme=java.beans.Beans.instantiate((new Run()).getClass().getClassLoader(),schemeToRun);    } catch (    Exception ex) {      System.err.println(schemeToRun + " is not runnable!");      return;    }    ArrayList<SchemeType> types=new ArrayList<SchemeType>();    if (scheme instanceof weka.core.CommandlineRunnable) {      types.add(SchemeType.COMMANDLINE);    } else {      if (scheme instanceof weka.classifiers.Classifier) {        types.add(SchemeType.CLASSIFIER);      }      if (scheme instanceof weka.clusterers.Clusterer) {        types.add(SchemeType.CLUSTERER);      }      if (scheme instanceof weka.associations.Associator) {        types.add(SchemeType.ASSOCIATOR);      }      if (scheme instanceof weka.attributeSelection.ASEvaluation) {        types.add(SchemeType.ATTRIBUTE_SELECTION);      }      if (scheme instanceof weka.filters.Filter) {        types.add(SchemeType.FILTER);      }      if (scheme instanceof weka.core.converters.AbstractFileLoader) {        types.add(SchemeType.LOADER);      }      if (scheme instanceof weka.core.converters.AbstractFileSaver) {        types.add(SchemeType.SAVER);      }      if (scheme instanceof weka.datagenerators.DataGenerator) {        types.add(SchemeType.DATAGENERATOR);      }    }    SchemeType selectedType=null;    if (types.size() == 0) {      System.err.println("" + schemeToRun + " is not runnable!");      return;    }    if (types.size() == 1) {      selectedType=types.get(0);    } else {      java.io.BufferedReader br=new java.io.BufferedReader(new java.io.InputStreamReader(System.in));      boolean done=false;      while (!done) {        System.out.println("" + schemeToRun + " can be executed as any of the following:");        for (int i=0; i < types.size(); i++) {          System.out.println("\t" + (i + 1) + ") "+ types.get(i));        }        System.out.print("\nEnter a number > ");        String choice=null;        int typeNumber=0;        try {          choice=br.readLine();          if (choice.equals("")) {            return;          } else {            typeNumber=Integer.parseInt(choice);            typeNumber--;            if (typeNumber >= 0 && typeNumber < types.size()) {              selectedType=types.get(typeNumber);              done=true;            }          }        } catch (        java.io.IOException ex) {        }      }    }    if (selectedType == SchemeType.CLASSIFIER) {      weka.classifiers.AbstractClassifier.runClassifier((weka.classifiers.Classifier)scheme,options);    } else     if (selectedType == SchemeType.CLUSTERER) {      weka.clusterers.AbstractClusterer.runClusterer((weka.clusterers.Clusterer)scheme,options);    } else     if (selectedType == SchemeType.ATTRIBUTE_SELECTION) {      weka.attributeSelection.ASEvaluation.runEvaluator((weka.attributeSelection.ASEvaluation)scheme,options);    } else     if (selectedType == SchemeType.ASSOCIATOR) {      weka.associations.AbstractAssociator.runAssociator((weka.associations.Associator)scheme,options);    } else     if (selectedType == SchemeType.FILTER) {      weka.filters.Filter.runFilter((weka.filters.Filter)scheme,options);    } else     if (selectedType == SchemeType.LOADER) {      weka.core.converters.AbstractFileLoader.runFileLoader((weka.core.converters.AbstractFileLoader)scheme,options);    } else     if (selectedType == SchemeType.SAVER) {      weka.core.converters.AbstractFileSaver.runFileSaver((weka.core.converters.AbstractFileSaver)scheme,options);    } else     if (selectedType == SchemeType.DATAGENERATOR) {      weka.datagenerators.DataGenerator.runDataGenerator((weka.datagenerators.DataGenerator)scheme,options);    } else     if (selectedType == SchemeType.COMMANDLINE) {      ((weka.core.CommandlineRunnable)scheme).run(scheme,options);    }  } catch (  Exception e) {    if (((e.getMessage() != null) && (e.getMessage().indexOf("General options") == -1)) || (e.getMessage() == null)) {      e.printStackTrace();    } else {      System.err.println(e.getMessage());    }  }}  }
class C{  public PublishingToMarketplaceNotPermittedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public void write(ByteBuffer buf,int length) throws IOException {  final byte[] buffer=_writeBuffer;  final int bufferLength=buffer.length;  StreamImpl source=_source;  while (length > 0) {    final int writeLength=_writeLength;    final int sublen=Math.min(length,bufferLength - writeLength);    buf.get(buffer,writeLength,sublen);    if (length == sublen) {      _writeLength=writeLength + length;      if (_implicitFlush) {        flush();      }      return;    }    if (source == null) {      return;    }    source.write(buffer,0,bufferLength,false);    _position+=bufferLength;    _writeLength=0;    length-=sublen;  }}  }
class C{  @Override public String toString(){  return String.valueOf(rankScore);}  }
class C{  public static <T>T splitEachLine(Path self,Pattern pattern,String charset,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self,charset),pattern,closure);}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  public void reconnectionSuccessful(){}  }
class C{  public void freeze(){  frozen=true;}  }
class C{  protected void fireRemoveUpdate(DocumentEvent evt){  if (tokenMarker != null) {    DocumentEvent.ElementChange ch=evt.getChange(getDefaultRootElement());    if (ch != null) {      tokenMarker.deleteLines(ch.getIndex() + 1,ch.getChildrenRemoved().length - ch.getChildrenAdded().length);    }  }  super.fireRemoveUpdate(evt);}  }
class C{  @Override public synchronized void clearAllStats(){  for (  SqlCallStats stats : statsByName.values()) {    JMXUtils.unregisterMBeanCatchAndLogExceptions(getStatsBeanName(stats));  }  namesByUnregisteredSql.clear();  statsByName.clear();}  }
class C{  private Ref sharp() throws PageException {  if (!cfml.forwardIfCurrent('#'))   return null;  Ref ref;  cfml.removeSpace();  ref=assignOp();  cfml.removeSpace();  if (!cfml.forwardIfCurrent('#'))   throw new InterpreterException("Syntax Error, Invalid Construct");  cfml.removeSpace();  return ref;}  }
class C{  public void fireRequestBrowserContent(InfoDisplayEvent evt){  for (  InfoDisplayListener listener : IDListeners) {    listener.requestBrowserContent(evt);  }}  }
class C{  public static boolean matchPath(String path,String pattern){  String[] pathElements=StringUtil.splitc(path,PATH_SEPARATORS);  String[] patternElements=StringUtil.splitc(pattern,PATH_SEPARATORS);  return matchTokens(pathElements,patternElements);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  protected synchronized Runnable waitForWork(){  while (tasks.size() == 0) {    try {      wait();    } catch (    InterruptedException ie) {      return null;    }  }  Runnable work=tasks.firstElement();  tasks.removeElementAt(0);  return work;}  }
class C{  public IntervalBarRenderer(){  super();}  }
class C{  private Product loadProduct(long productKey) throws ObjectNotFoundException {  Product product=dm.getReference(Product.class,productKey);  if (product.isCopy()) {    return product.getTemplate();  }  return product;}  }
class C{  public static boolean checkEntityImmunities(Entity entity){  if (entity.inWater || entity.fire > 0) {    return true;  }  if (!(entity instanceof EntityArrow)) {    if (!entity.onGround || entity.riddenByEntity != null || entity.ridingEntity != null) {      return true;    }  } else   if (!((EntityArrow)entity).inGround) {    return true;  }  if (entity instanceof EntityLiving) {    EntityLiving living=(EntityLiving)entity;    if (living.attackTime > 0 || living.hurtTime > 0 || living.activePotionsMap.size() > 0) {      return true;    }    if (entity instanceof EntityCreature && ((EntityCreature)entity).entityToAttack != null) {      return true;    }    if (entity instanceof EntityVillager && ((EntityVillager)entity).isMating()) {      return true;    }    if (entity instanceof EntityAnimal) {      EntityAnimal animal=(EntityAnimal)entity;      if (animal.isChild() || animal.isInLove()) {        return true;      }      if (entity instanceof EntitySheep && ((EntitySheep)entity).getSheared()) {        return true;      }    }  }  return false;}  }
class C{  public static boolean isDisabled(){  return disabled;}  }
class C{  void truncate(long newLength){  changeLength(newLength);  long end=MathUtils.roundUpLong(newLength,BLOCK_SIZE);  if (end != newLength) {    int lastPage=(int)(newLength >>> BLOCK_SIZE_SHIFT);    expand(lastPage);    byte[] d=data[lastPage];    for (int i=(int)(newLength & BLOCK_SIZE_MASK); i < BLOCK_SIZE; i++) {      d[i]=0;    }    if (compress) {      compressLater(lastPage);    }  }}  }
class C{  @Override public double min(){  return convertFromNS(histogram.min());}  }
class C{  private CBookmarkFunctions(){}  }
class C{  public EgovPaginatedList(final Page page,int fullListSize){  this(page,fullListSize,null,SortOrderEnum.ASCENDING);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.414 -0400",hash_original_method="E6497FA27977EC00587BFBAE76B9237E",hash_generated_method="4C99B6D22E2FA056CE1CF6A787BB67FC") public static double readSwappedDouble(byte[] data,int offset){  return Double.longBitsToDouble(readSwappedLong(data,offset));}  }
class C{  public synchronized int indexOf(V item){  return items.indexOf(item);}  }
class C{  private void shutdown(){  running.compareAndSet(true,false);  try {    if (consumer != null) {      try {        consumer.unsubscribe();        consumer.close();        consumer=null;      } catch (      Exception ex) {      }    }    if (backgroundConsumer != null) {      backgroundConsumer.shutdown();      backgroundConsumer=null;    }  } catch (  Exception ex) {    logger.error("Failed to close consumer",ex);  }}  }
class C{  public FunctionInvocationTargetException(String msg){  super(msg);}  }
class C{  public static CreateExecParams create(@NotNull String container,@NotNull String[] cmd){  return new CreateExecParams().withContainer(container).withCmd(cmd);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.atan(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public MACDItemRenderer(){  super(LINES,null);}  }
class C{  public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket) throws Throwable {  return doInteraction(clientConnection,serverSocket,OK_CODE,false);}  }
class C{  public static AddStatListenerResponse create(DistributionManager dm,InternalDistributedMember recipient,long resourceId,String statName){  AddStatListenerResponse m=new AddStatListenerResponse();  m.setRecipient(recipient);  GemFireStatSampler sampler=null;  sampler=dm.getSystem().getStatSampler();  if (sampler != null) {    m.listenerId=sampler.addListener(recipient,resourceId,statName);  }  return m;}  }
class C{  public Map<String,Object> addToCartBulkRequirements(String catalogId,Map<String,? extends Object> context){  String itemGroupNumber=(String)context.get("itemGroupNumber");  boolean useRowSubmit=(!context.containsKey("_useRowSubmit")) ? false : "Y".equalsIgnoreCase((String)context.get("_useRowSubmit"));  int rowCount=UtilHttp.getMultiFormRowCount(context);  String facilityId=(String)context.get("facilityId_o_0");  if (UtilValidate.isNotEmpty(facilityId)) {    cart.setFacilityId(facilityId);  }  for (int i=0; i < rowCount; i++) {    String productId=null;    String quantStr=null;    String requirementId=null;    String thisSuffix=UtilHttp.MULTI_ROW_DELIMITER + i;    boolean rowSelected=(!context.containsKey("_rowSubmit" + thisSuffix)) ? false : "Y".equalsIgnoreCase((String)context.get("_rowSubmit" + thisSuffix));    if (useRowSubmit && !rowSelected) {      continue;    }    if (context.containsKey("productId" + thisSuffix)) {      productId=(String)context.get("productId" + thisSuffix);      quantStr=(String)context.get("quantity" + thisSuffix);      requirementId=(String)context.get("requirementId" + thisSuffix);      GenericValue requirement=null;      try {        requirement=EntityQuery.use(delegator).from("Requirement").where("requirementId",requirementId).queryOne();      } catch (      GenericEntityException gee) {      }      if (requirement == null) {        return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"OrderRequirementDoesNotExists",UtilMisc.toMap("requirementId",requirementId),cart.getLocale()));      }      if (UtilValidate.isNotEmpty(quantStr)) {        BigDecimal quantity=BigDecimal.ZERO;        try {          quantity=(BigDecimal)ObjectType.simpleTypeConvert(quantStr,"BigDecimal",null,cart.getLocale());        } catch (        GeneralException ge) {          quantity=BigDecimal.ZERO;        }        if (quantity.compareTo(BigDecimal.ZERO) > 0) {          Iterator<ShoppingCartItem> items=this.cart.iterator();          boolean requirementAlreadyInCart=false;          while (items.hasNext() && !requirementAlreadyInCart) {            ShoppingCartItem sci=items.next();            if (sci.getRequirementId() != null && sci.getRequirementId().equals(requirementId)) {              requirementAlreadyInCart=true;              continue;            }          }          if (requirementAlreadyInCart) {            if (Debug.warningOn())             Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderTheRequirementIsAlreadyInTheCartNotAdding",UtilMisc.toMap("requirementId",requirementId),cart.getLocale()),module);            continue;          }          try {            if (Debug.verboseOn())             Debug.logVerbose("Bulk Adding to cart requirement [" + quantity + "] of ["+ productId+ "]",module);            int index=this.cart.addOrIncreaseItem(productId,null,quantity,null,null,null,requirement.getTimestamp("requiredByDate"),null,null,null,catalogId,null,null,itemGroupNumber,null,dispatcher);            ShoppingCartItem sci=this.cart.items().get(index);            sci.setRequirementId(requirementId);          } catch (          CartItemModifyException e) {            return ServiceUtil.returnError(e.getMessage());          }catch (          ItemNotFoundException e) {            return ServiceUtil.returnError(e.getMessage());          }        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public static boolean equalsWithThrowable(ErThrowable erThrowable,ThrowableProxy throwable){  if (!erThrowable.getDetailMessage().equals(throwable.getMessage())) {    return false;  }  for (int i=0; i < erThrowable.getStackTraceElements().length; i++) {    StackTraceElement el=throwable.getStackTrace()[i];    ErStackTraceElement rel=erThrowable.getStackTraceElements()[i];    if (!equalsStackTraceElements(rel,el)) {      return false;    }  }  return true;}  }
class C{  public LinkedListNode addFirst(LinkedListNode node){  node.next=head.next;  node.previous=head;  node.previous.next=node;  node.next.previous=node;  return node;}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  throw new UnsupportedOperationException();}  }
class C{  public AbstractMRMessage createOutPacket(){  if (log.isDebugEnabled()) {    log.debug("createOutPacket for nodeType " + nodeType + " with "+ outputBitChanged[0]+ " "+ outputArray[0]+ ";"+ outputBitChanged[1]+ " "+ outputArray[1]+ ";"+ outputBitChanged[2]+ " "+ outputArray[2]+ ";"+ outputBitChanged[3]+ " "+ outputArray[3]+ ";");  }  SerialMessage m=new SerialMessage(1 + outputBits[getNodeType()] / 4);  m.setElement(0,getNodeAddress());  int j=0;  for (int i=1; i < outputBits[nodeType]; i+=4) {    int payload=0;    if (outputArray[i + 0]) {      payload|=1;    }    if (outputArray[i + 1]) {      payload|=2;    }    if (outputArray[i + 2]) {      payload|=4;    }    if (outputArray[i + 3]) {      payload|=8;    }    payload|=j << 4;    m.setElement(j + 1,payload);    j++;  }  return m;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static int putInt(byte[] bytes,int offset,int val){  if (bytes.length - offset < SIZEOF_INT) {    throw new IllegalArgumentException("Not enough room to put an int at" + " offset " + offset + " in a "+ bytes.length+ " byte array");  }  for (int i=offset + 3; i > offset; i--) {    bytes[i]=(byte)val;    val>>>=8;  }  bytes[offset]=(byte)val;  return offset + SIZEOF_INT;}  }
class C{  private AttrCharsets(final String val){  super(val);  charsets=val.split("\\ +");}  }
class C{  boolean isEmpty(){  return count == 0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void fill(float[] array,int start,int end,float value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  int width=drawable.getIntrinsicWidth();  int height=drawable.getIntrinsicHeight();  Bitmap bitmap=Bitmap.createBitmap(width,height,drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,width,height);  drawable.draw(canvas);  return bitmap;}  }
class C{  private void cleanupDeviceFiles(ITestDevice device) throws DeviceNotAvailableException {  if (device.doesFileExist(VM_TEST_TEMP_DIR)) {    CLog.d("Removing device's temp dir %s from previous runs.",VM_TEST_TEMP_DIR);    device.executeShellCommand(String.format("rm -r %s",VM_TEST_TEMP_DIR));  }}  }
class C{  public DryRunTool(GraphModel layoutGraph,EdgeMatcher<String> edgeMatcher){  super(layoutGraph,edgeMatcher);}  }
class C{  @Override public void releaseSavepoint(Savepoint savepoint) throws SQLException {  try {    debugCode("releaseSavepoint(savepoint);");    checkClosed();    convertSavepoint(savepoint).release();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public RemoteRegionAttributes(){}  }
class C{  public LogFileTailer(File file,long sampleInterval,boolean startAtBeginning){  this.logfile=file;  this.sampleInterval=sampleInterval;}  }
class C{  public void componentMoved(final ComponentEvent event){  int x=(int)event.getComponent().getBounds().getX();  int y=(int)event.getComponent().getBounds().getY();  int width=(int)event.getComponent().getBounds().getWidth();  int height=(int)event.getComponent().getBounds().getHeight();  if (x < desktop.getVisibleRect().getX()) {    event.getComponent().setBounds(0,y,width,height);  }  if (y < desktop.getVisibleRect().getY()) {    event.getComponent().setBounds(x,0,width,height);  }  workspace.setWorkspaceChanged(true);}  }
class C{  public static String toNonemptyOrNull(@Nullable String str){  return isEmpty(str) ? null : str;}  }
class C{  public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof org.eclipse.jdt.internal.core.JavaProject))   return false;  org.eclipse.jdt.internal.core.JavaProject other=(org.eclipse.jdt.internal.core.JavaProject)o;  return this.project.equals(other.getProject());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.CONDITIONAL_ROUTE__CONDITION:    return getCondition();case EipPackage.CONDITIONAL_ROUTE__CHANNEL:  if (resolve)   return getChannel();return basicGetChannel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void blockCarsByTrackNameTwoColumn(PrintWriter file,Train train,List<Car> carList,List<RouteLocation> routeList,RouteLocation rl,boolean printHeader,boolean isManifest){  index=0;  int lineLength=getLineLength(isManifest);  List<Track> tracks=rl.getLocation().getTrackByNameList(null);  List<String> trackNames=new ArrayList<String>();  doneCars.clear();  clearUtilityCarTypes();  if (printHeader) {    printCarHeader(file,isManifest,IS_TWO_COLUMN_TRACK);  }  for (  Track track : tracks) {    String trackName=splitString(track.getName());    if (trackNames.contains(trackName)) {      continue;    }    boolean found=false;    for (    RouteLocation rld : routeList) {      if (rld != rl && !found) {        continue;      }      found=true;      for (      Car car : carList) {        if (car.getTrack() != null && car.getRouteLocation() == rl && trackName.equals(splitString(car.getTrackName())) && ((car.getRouteDestination() == rld && !car.isCaboose() && !car.hasFred()) || (rld == routeList.get(routeList.size() - 1) && (car.isCaboose() || car.hasFred())))) {          if (!trackNames.contains(trackName)) {            printTrackNameHeader(file,trackName,isManifest);          }          trackNames.add(trackName);          pickupCars=true;          cars++;          if (car.getLoadType().equals(CarLoad.LOAD_TYPE_EMPTY)) {            emptyCars++;          }          String s;          if (car.isUtility()) {            s=pickupUtilityCars(carList,car,isManifest,IS_TWO_COLUMN_TRACK);            if (s == null) {              continue;            }            s=s.trim();          } else {            s=pickupCar(car,isManifest,IS_TWO_COLUMN_TRACK).trim();          }          s=padAndTruncateString(s,lineLength / 2,true);          s=appendSetoutString(s,trackName,carList,rl,isManifest,IS_TWO_COLUMN_TRACK);          addLine(file,s);        }      }    }    for (    Car car : carList) {      if (!doneCars.contains(car) && car.getRouteDestination() == rl && trackName.equals(splitString(car.getDestinationTrackName()))) {        if (!trackNames.contains(trackName)) {          printTrackNameHeader(file,trackName,isManifest);        }        trackNames.add(trackName);        String s=padString("",lineLength / 2);        String so=appendSetoutString(s,carList,rl,car,isManifest,IS_TWO_COLUMN_TRACK);        if (so.equals(s)) {          continue;        }        String test=so.trim();        if (test.length() > 1) {          addLine(file,so);        }      }    }  }}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,GenericValue product,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,GenericValue parentProduct,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException {  return makeItem(cartLocation,product,selectedAmount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,cart,triggerExternalOpsBool,triggerPriceRulesBool,parentProduct,skipInventoryChecks,skipProductChecks);}  }
class C{  protected final void startSpi() throws IgniteCheckedException {  Collection<String> names=U.newHashSet(spis.length);  for (  T spi : spis) {    if (spi instanceof IgniteSpiAdapter)     ((IgniteSpiAdapter)spi).onBeforeStart();    Boolean res=spiMap.put(spi,Boolean.TRUE);    assert res == null;    ctx.resource().inject(spi);    inject(spi);    try {      Map<String,Object> retval=spi.getNodeAttributes();      if (retval != null) {        for (        Map.Entry<String,Object> e : retval.entrySet()) {          if (ctx.hasNodeAttribute(e.getKey()))           throw new IgniteCheckedException("SPI attribute collision for attribute [spi=" + spi + ", attr="+ e.getKey()+ ']'+ ". Attribute set by one SPI implementation has the same name (name collision) as "+ "attribute set by other SPI implementation. Such overriding is not allowed. "+ "Please check your Ignite configuration and/or SPI implementation to avoid "+ "attribute name collisions.");          ctx.addNodeAttribute(e.getKey(),e.getValue());        }      }    } catch (    IgniteSpiException e) {      throw new IgniteCheckedException("Failed to get SPI attributes.",e);    }    if (log.isDebugEnabled())     log.debug("Starting SPI: " + spi);    if (names.contains(spi.getName()))     throw new IgniteCheckedException("Duplicate SPI name (need to explicitly configure 'setName()' property): " + spi.getName());    names.add(spi.getName());    if (log.isDebugEnabled())     log.debug("Starting SPI implementation: " + spi.getClass().getName());    onBeforeSpiStart();    try {      spi.spiStart(ctx.gridName());    } catch (    IgniteSpiException e) {      throw new IgniteCheckedException("Failed to start SPI: " + spi,e);    }    onAfterSpiStart();    if (log.isDebugEnabled())     log.debug("SPI module started OK: " + spi.getClass().getName());  }}  }
class C{  private boolean isFlag(int mask){  return (flags & mask) != 0;}  }
class C{  @Override public void initialize() throws ReplicatorException, InterruptedException {  logger.info("Initializing data source files: service=" + serviceName + " directory="+ directory);  commitSeqno.initialize();}  }
class C{  @Override protected void _end(long ptr){}  }
class C{  public void popContext(){  Context2 parentContext=currentContext.getParent();  if (parentContext == null)   throw new EmptyStackException(); else   currentContext=parentContext;}  }
class C{  public void resetData(Connection conn) throws SQLException {  deleteData(conn,sqlQueries.getSqlString("deleteHamTokens",true));  deleteData(conn,sqlQueries.getSqlString("deleteSpamTokens",true));  deleteData(conn,sqlQueries.getSqlString("deleteMessageCounts",true));}  }
class C{  public Object visit(ASTNotNode node,Object data){  return showNode(node,data);}  }
class C{  public boolean hasImageVersionExt(){  return hasExtension(GphotoImageVersion.class);}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  flushPending();  startEntity(name);  endEntity(name);  if (m_tracer != null)   fireEntityReference(name);}  }
class C{  public void createLogicalRouter(LogicalRouterCreateSpec spec,FutureCallback<LogicalRouter> responseCallback) throws IOException {  postAsync(LOGICAL_ROUTERS_BASE_PATH,serializeObjectAsJson(spec),HttpStatus.SC_CREATED,new TypeReference<LogicalRouter>(){  },responseCallback);}  }
class C{  public void moveChild(int index,long duration,@Nullable TimeInterpolator interpolator){  if (isAnimating)   return;  final int destination=getChildPosition(index) + (isVertical() ? getPaddingBottom() : getPaddingRight());  if (duration <= 0) {    isExpanded=destination > closePosition;    setLayoutSize(destination);    requestLayout();    notifyListeners();    return;  }  createExpandAnimator(getCurrentPosition(),destination,duration,interpolator == null ? this.interpolator : interpolator).start();}  }
class C{  protected ConditionExpression toCondition(ValueNode condition,List<ExpressionNode> projects) throws StandardException {  List<ConditionExpression> conditions=new ArrayList<>(1);  addCondition(conditions,condition,projects);switch (conditions.size()) {case 0:    return new BooleanConstantExpression(Boolean.TRUE);case 1:  return conditions.get(0);case 2:TInstance type=typesTranslator.typeForSQLType(condition.getType());return new LogicalFunctionCondition("and",conditions,condition.getType(),condition,type);default :{ConditionExpression rhs=null;for (ConditionExpression lhs : conditions) {rhs=andConditions(rhs,lhs);}return rhs;}}}  }
