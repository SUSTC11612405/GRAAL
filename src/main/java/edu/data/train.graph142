class C{  private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f){  int s=--size;  RunnableScheduledFuture<?> x=queue[s];  queue[s]=null;  if (s != 0)   siftDown(0,x);  setIndex(f,-1);  return f;}  }
class C{  public static String encrypt(String str){  if (StringUtil.isEmpty(str))   return "";  if (StringUtil.startsWithIgnoreCase(str,"encrypted:"))   return str;  return "encrypted:" + new BlowfishEasy("sdfsdfs").encryptString(str);}  }
class C{  public void onPause(boolean multitasking){}  }
class C{  public T caseState_(State_ object){  return null;}  }
class C{  public static <T>T fromJson(String json,Class<T> klass) throws IOException {  return MAPPER.readValue(json,klass);}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(JComponent c){  return getHandler();}  }
class C{  protected final void unlink(){  if (getNext() != null)   getNext().setPrev(getPrev());  if (getPrev() != null)   getPrev().setNext(getNext());  setNext(null);  setPrev(null);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public final boolean isEncrypted(){  if (currentPdfFile != null) {    final PdfFileReader objectReader=currentPdfFile.getObjectReader();    final DecryptionFactory decryption=objectReader.getDecryptionObject();    return decryption != null && decryption.getBooleanValue(PDFflags.IS_FILE_ENCRYPTED);  } else {    return false;  }}  }
class C{  private File prepareClasspathFile(ILaunchConfiguration configuration,String classpath){  return prepareConfigFile(configuration,classpath,".classpath");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.385 -0400",hash_original_method="385A210A4F53DD068AEE801B7B136BBE",hash_generated_method="0815FCBC3E537BB3192BE42996501FD5") @DSSink(DSSinkKind.ENCODER) public String encode(String pString,String charset) throws UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(encode(pString.getBytes(charset)),StringEncodings.US_ASCII);}  }
class C{  public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  for (  Map.Entry<String,CustomElement> entry : values.entrySet()) {    ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>();    w.simpleElement(Namespaces.gSpreadCustomNs,entry.getKey(),attrs,entry.getValue().getValue());  }}  }
class C{  public RussianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public static void main(String[] args){  Properties options=StringUtils.argsToProperties(args,optionArgDefs());  int port=PropertiesUtils.getInt(options,"p",DEFAULT_HTTP_PORT);  boolean loadMockServlet=PropertiesUtils.getBool(options,"m",false);  boolean localHost=PropertiesUtils.getBool(options,"l",false);  String uiFile=options.getProperty("u","debug.html");  String resourcePath=options.getProperty("r",".");  String argList=options.getProperty("",null);  String[] parsedArgs=argList == null ? null : argList.split("\\s+");  if (parsedArgs == null || parsedArgs.length != 1) {    System.out.println(usage());    System.exit(-1);  }  String phrasalIniFile=parsedArgs[0];  Server server=new Server();  ServerConnector connector=new ServerConnector(server);  connector.setPort(port);  server.addConnector(connector);  if (localHost) {    connector.setHost(DEBUG_URL);  }  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);  context.setContextPath("/");  PhrasalServlet servlet=loadMockServlet ? new PhrasalServlet() : new PhrasalServlet(phrasalIniFile);  context.addServlet(new ServletHolder(servlet),SERVLET_ROOT);  ResourceHandler resourceHandler=new ResourceHandler();  resourceHandler.setWelcomeFiles(new String[]{uiFile});  resourceHandler.setResourceBase(resourcePath);  HandlerList handlers=new HandlerList();  handlers.setHandlers(new Handler[]{resourceHandler,context});  server.setHandler(handlers);  try {    logger.info("Starting PhrasalService on port: " + String.valueOf(port));    server.start();    server.join();  } catch (  Exception e) {    logger.error("Servlet crashed. Service shutting down.");    e.printStackTrace();  }}  }
class C{  void reserveQuantity(final CustomerOrderDelivery orderDelivery) throws OrderItemAllocationException {  final Collection<CustomerOrderDeliveryDet> deliveryDetails=orderDelivery.getDetail();  final List<Warehouse> warehouses=warehouseService.getByShopId(orderDelivery.getCustomerOrder().getShop().getShopId(),false);  if (CollectionUtils.isEmpty(warehouses)) {    ShopCodeContext.getLog(this).error("No warehouses assigned to shop {}",orderDelivery.getCustomerOrder().getShop().getCode());    throw new OrderItemAllocationException("N/A",BigDecimal.ZERO,"PendingOrderEventHandlerImpl. No warehouses assigned to " + orderDelivery.getCustomerOrder().getShop().getCode());  }  for (  CustomerOrderDeliveryDet det : deliveryDetails) {    String skuCode=det.getProductSkuCode();    BigDecimal toReserve=det.getQty();    for (    Warehouse warehouse : warehouses) {      toReserve=skuWarehouseService.reservation(warehouse,skuCode,toReserve);      if (BigDecimal.ZERO.setScale(Constants.DEFAULT_SCALE).equals(toReserve.setScale(Constants.DEFAULT_SCALE))) {        break;      }    }    if (MoneyUtils.isFirstBiggerThanSecond(toReserve,BigDecimal.ZERO)) {      final Product product=productService.getProductBySkuCode(det.getProductSkuCode());      if (product == null || Product.AVAILABILITY_STANDARD == product.getAvailability()) {        throw new OrderItemAllocationException(skuCode,toReserve,"PendingOrderEventHandlerImpl. Can not allocate total qty = " + det.getQty() + " for sku = "+ skuCode+ " in delivery "+ orderDelivery.getDeliveryNum());      } else       if (Product.AVAILABILITY_PREORDER == product.getAvailability() || Product.AVAILABILITY_BACKORDER == product.getAvailability()) {        final Warehouse first=warehouses.iterator().next();        skuWarehouseService.reservation(first,skuCode,toReserve,true);      }    }  }  orderDelivery.setDeliveryStatus(CustomerOrderDelivery.DELIVERY_STATUS_INVENTORY_RESERVED);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone,attributes);}  }
class C{  public static void main(String[] arg) throws Exception {  SimpleCommandLineParser parser=new SimpleCommandLineParser(arg);  String project=parser.getValue("project");  String username=parser.getValue("username");  String password=parser.getValue("password");  boolean help=parser.containsKey("help");  if (help || (project == null) || (username == null)|| (password == null)) {    usage();    System.exit(help ? 0 : 1);  }  ProjectHostingService service=new ProjectHostingService("projecthosting-write-demo");  try {    new ProjectHostingWriteDemo(service,project,username,password).run();  } catch (  AuthenticationException e) {    System.out.println("The username/password entered is invalid.");    System.exit(1);  }}  }
class C{  @Override public void onError(Session session,Throwable throwable){  if (session.isOpen()) {    session.getUserProperties().put(Throwable.class.getName(),throwable);  }}  }
class C{  public static void cmdStartIntent(Activity parentActivity,String currentFilePath,String currentUri,String extraPath,String action,int idChooserCaption,int idEditError,int idActivityResultRequestCode){  final Intent outIntent=new Intent().setAction(action).addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET).addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);  if (Intent.ACTION_EDIT.equalsIgnoreCase(action)) {    outIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION).addFlags(Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);  }  if (currentFilePath != null) {    File file=new File(currentFilePath);    final Uri uri=Uri.fromFile(file);    outIntent.setDataAndType(uri,IntentUtil.getMime(currentFilePath));  } else   if (currentUri != null) {    outIntent.setData(Uri.parse(currentUri));  }  if (extraPath != null) {    File file=new File(extraPath);    final Uri uri=Uri.fromFile(file);    outIntent.setType(IntentUtil.getMime(extraPath));    outIntent.putExtra(EXTRA_STREAM,uri);  }  if (Global.debugEnabled) {    Log.d(Global.LOG_CONTEXT,"cmdStartIntent(" + outIntent.toUri(Intent.URI_INTENT_SCHEME) + "')");  }  try {    final Intent execIntent=(idChooserCaption == 0) ? outIntent : Intent.createChooser(outIntent,parentActivity.getText(idChooserCaption));    if (idActivityResultRequestCode == 0) {      parentActivity.startActivity(execIntent);    } else {      parentActivity.startActivityForResult(execIntent,idActivityResultRequestCode);    }  } catch (  ActivityNotFoundException ex) {    Toast.makeText(parentActivity,idEditError,Toast.LENGTH_LONG).show();  }}  }
class C{  void forward(Integer row,VisualItem node){  nodeForwarding.put(row,node);  recompute();}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  private boolean isNotVisibilityBridge(Method m) throws Error {  Method method=m;  Class<?> c=m.getDeclaringClass();  if (!isPublic(c)) {    return true;  }  while (c != null && isPublic(c) && method != null && method.isBridge()) {    c=c.getSuperclass();    try {      method=c.getDeclaredMethod(m.getName(),m.getParameterTypes());    } catch (    NoSuchMethodException e) {      method=null;    }catch (    SecurityException e) {      String msg="Cannot access method " + m.getName() + " in class "+ c.getCanonicalName();      throw new Error(msg);    }  }  return isPublic(c);}  }
class C{  public boolean isKeywordSearch(){  return type == KEYWORD;}  }
class C{  public Property hourOfDay(){  return new Property(this,getChronology().hourOfDay());}  }
class C{  public StandardXYZToolTipGenerator(String formatString,DateFormat xFormat,DateFormat yFormat,DateFormat zFormat){  super(formatString,xFormat,yFormat);  ParamChecks.nullNotPermitted(zFormat,"zFormat");  this.zDateFormat=zFormat;}  }
class C{  public static int arrayDimension(String desc){  int dim=0;  while (desc.charAt(dim) == '[')   ++dim;  return dim;}  }
class C{  public ClientMessage sendMessageWithProperties(String address,String body,Map<String,Object> properties){  return sendMessageWithProperties(SimpleString.toSimpleString(address),body,properties);}  }
class C{  public Bundler putByte(String key,byte value){  bundle.putByte(key,value);  return this;}  }
class C{  private void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (request.getCharacterEncoding() == null) {    request.setCharacterEncoding("UTF-8");  }  final OperationRegistry registry=(OperationRegistry)getServletContext().getAttribute(InitServlet.OPERATIONREGISTRY);  final IOperationDescriptor<Object> operation=registry.getOperation(request.getParameter("operation"));  final RequestLog log=(RequestLog)getServletContext().getAttribute(InitServlet.REQUESTLOG);  final RequestLogEntry entry=log.createEntry(operation.getName(),RequestDirection.OUTBOUND);  final Map<String,String> params=new HashMap<String,String>();  final Enumeration<?> names=request.getParameterNames();  while (names.hasMoreElements()) {    String name=(String)names.nextElement();    final String value=request.getParameter(name);    if (name.startsWith(PARAM_PREFIX)) {      name=name.substring(PARAM_PREFIX.length());      entry.addParameter(name,value);      params.put(name,value);    }  }  final ConnectionInfo connection=ConnectionInfo.get(request);  entry.setHost(connection.getBaseUrl());  final Object service=PortFactory.getPort(connection,operation.getServiceType());  try {    operation.call(service,entry,params);  } catch (  Exception e) {    entry.setException(e);  }  RequestDispatcher rd=request.getRequestDispatcher("requestlog.jsp");  rd.forward(request,response);}  }
class C{  public boolean isControl(){  return this.control;}  }
class C{  public Matrix3f(float m00,float m01,float m02,float m10,float m11,float m12,float m20,float m21,float m22){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;}  }
class C{  public static ExtensionRegistry newInstance(){  return new ExtensionRegistry();}  }
class C{  public static <T1,T2,O>Flux<O> zip(Publisher<? extends T1> source1,Publisher<? extends T2> source2,final BiFunction<? super T1,? super T2,? extends O> combinator){  return onAssembly(new FluxZip<T1,O>(source1,source2,combinator,QueueSupplier.xs(),QueueSupplier.XS_BUFFER_SIZE));}  }
class C{  private void writeInterfaceHash(IndentingWriter p) throws IOException {  p.pln("private static final long interfaceHash = " + remoteClass.interfaceHash() + "L;");}  }
class C{  protected boolean isConnectionOpen(HttpExchange exchange){  log.warning("Can't check client connection, socket access impossible on JDK webserver!");  return true;}  }
class C{  public Matcher useAnchoringBounds(boolean b){  anchoringBounds=b;  return this;}  }
class C{  private void generatePhiNodes(AnnotatedLSTNode loop,ArrayList<Register> registers,ArrayList<TypeReference> types,ArrayList<Instruction> phiInstructions,HashMap<Register,Register> subOptimalRegMap,HashMap<Register,Register> optimalRegMap){  Register carriedLoopIteratorRegister=((RegisterOperand)loop.getCarriedLoopIterator()).getRegister();  for (int i=0; i < registers.size(); i++) {    Register register=registers.get(i);    TypeReference type=types.get(i);    Instruction phi=Phi.create(PHI,new RegisterOperand(register,type),2);    phi.setBytecodeIndex(SYNTH_LOOP_VERSIONING_BCI);    Operand op0=ir.regpool.makeTemp(type);    Phi.setValue(phi,OPTIMIZED_LOOP_OPERAND,op0);    optimalRegMap.put(register,op0.asRegister().getRegister());    Operand op1=ir.regpool.makeTemp(type);    Phi.setValue(phi,UNOPTIMIZED_LOOP_OPERAND,op1);    subOptimalRegMap.put(register,op1.asRegister().getRegister());    if (register == carriedLoopIteratorRegister) {      setOptimizedLoop(op0.asRegister().getRegister());      setOptimizedLoop(op1.asRegister().getRegister());    }    phiInstructions.add(phi);  }  renameOptimizedLoops(subOptimalRegMap,optimalRegMap);}  }
class C{  protected AnimatableValue parseLengthPair(String ln){  String s=element.getAttributeNS(null,ln);  if (s.length() == 0) {    return null;  }  return parseValues(s)[0];}  }
class C{  public static Integer createServerCache() throws Exception {  StatsBugDUnitTest test=new StatsBugDUnitTest();  Properties props=new Properties();  cache=test.createCache(props);  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  CacheServer server=cache.addCacheServer();  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(false);  server.setSocketBufferSize(32768);  server.start();  LogWriterUtils.getLogWriter().info("Server started at PORT = " + port);  return new Integer(port);}  }
class C{  public void previous(){  if (current() == null) {    return;  }  m_currentSearchIndex--;  m_isBeforeFirst=false;  m_isAfterLast=false;  if (m_currentSearchIndex < 0) {    m_currentSearchIndex=m_reducedResults.size() - 1;    m_isBeforeFirst=true;  }}  }
class C{  @Override public void onTurnReached(int currentTurn){  GetPostmanMessagesCommand command=DBCommandQueue.get().getOneResult(GetPostmanMessagesCommand.class,handle);  if (command == null) {    TurnNotifier.get().notifyInTurns(0,new TurnListenerDecorator(this));    return;  }  List<ChatMessage> messages=command.getMessages();  Player player=command.getPlayer();  LOGGER.debug(messages.size() + " messages left for " + player.getName());  for (  ChatMessage chatmessage : messages) {    LOGGER.debug(player.getName() + " got message: " + chatmessage.toString());    player.sendPrivateText(getNotificationType(chatmessage.getMessagetype()),"postman tells you: " + chatmessage.getSource() + " asked me to deliver this message on "+ chatmessage.getTimestamp().substring(0,16).replace("2010-07-20 00:00","an unknown date")+ ": \n"+ chatmessage.getMessage());    player.setLastPrivateChatter("postman");  }}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  public void addElementToRelation(final RelationMember newMember,final Relation rel){  OsmElement e=newMember.getElement();  if (e == null) {    Log.e(DEBUG_TAG,"addElementToRelation element not found");    return;  }  dirty=true;  undo.save(rel);  undo.save(e);  rel.addMember(newMember);  e.addParentRelation(rel);  rel.updateState(OsmElement.STATE_MODIFIED);  try {    apiStorage.insertElementSafe(rel);    recordImagery();  } catch (  StorageException sex) {    sex.printStackTrace();  }}  }
class C{  @Override public void mousePressed(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());    mousePressed=true;  }}  }
class C{  public static String t(final String name){  return "html/tip/" + name + ".html";}  }
class C{  public void update(FIXMessage message){  FIXValue msgSeqNum=message.findField(MsgSeqNum);  if (msgSeqNum == null)   throw new IllegalStateException("MsgSeqNum(34) not found");  msgSeqNum.setInt(txMsgSeqNum);  FIXValue sendingTime=message.findField(SendingTime);  if (sendingTime == null)   throw new IllegalStateException("SendingTime(52) not found");  sendingTime.setString(currentTimestamp);}  }
class C{  protected boolean accept(E object){  if (droppedResults < offset) {    droppedResults++;    return false;  } else {    return true;  }}  }
class C{  public boolean hasTitle(){  return super.hasElement(Source.TITLE);}  }
class C{  @Override public void onConversationMessage(String target){  Conversation conversation=server.getConversation(target);  if (conversation == null) {    return;  }  MessageListAdapter adapter=pagerAdapter.getItemAdapter(target);  while (conversation.hasBufferedMessages()) {    Message message=conversation.pollBufferedMessage();    if (adapter != null && message != null) {      if (message.hasSender()) {        Log.i("ConversationActivity",pagerAdapter.getPageTitle(pager.getCurrentItem()));        Log.i("ConversationActivity",message.getSender());        try {          if (binder.getService().getConnection(serverId).getUser(target,message.getSender()).isOp()) {            message.setIcon(R.drawable.ic_ic_sms_failed_24px);            adapter.addMessageCard(message);          } else           if (binder.getService().getConnection(serverId).getUser(target,message.getSender()).hasVoice()) {            message.setIcon(R.drawable.ic_ic_mic_24px);            adapter.addMessageCard(message);          } else {            adapter.addMessageCard(message);          }        } catch (        Exception E) {        }      } else {        adapter.addMessage(message);      }      int status;switch (message.getType()) {case Message.TYPE_MISC:        status=Conversation.STATUS_MISC;      break;default :    status=Conversation.STATUS_MESSAGE;  break;}conversation.setStatus(status);}}indicator.updateStateColors();}  }
class C{  private void createLines(final int count,int[] items,final int mode,final boolean breakOnSpace,final boolean addMultiplespaceXMLTag,final boolean sameLineOnly,final boolean isSearch) throws PdfException {  String separator;  final boolean debug=false;  final float[] f_x1;  final float[] f_x2;  final float[] f_y1;  final float[] f_y2;  if (mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT || mode == PdfData.VERTICAL_TOP_TO_BOTTOM) {    items=reverse(items);  }switch (mode) {case PdfData.HORIZONTAL_LEFT_TO_RIGHT:    f_x1=this.f_x1;  f_x2=this.f_x2;f_y1=this.f_y1;f_y2=this.f_y2;break;case PdfData.HORIZONTAL_RIGHT_TO_LEFT:f_x2=this.f_x1;f_x1=this.f_x2;f_y1=this.f_y1;f_y2=this.f_y2;break;case PdfData.VERTICAL_BOTTOM_TO_TOP:f_x1=this.f_y1;f_x2=this.f_y2;f_y1=this.f_x2;f_y2=this.f_x1;break;case PdfData.VERTICAL_TOP_TO_BOTTOM:f_x1=this.f_y2;f_x2=this.f_y1;f_y2=this.f_x1;f_y1=this.f_x2;break;default :throw new PdfException("Illegal value " + mode + "for currentWritingMode");}for (int j=0; j < count; j++) {int id=-1, i;final int c=items[j];float smallest_gap=-1, gap, yMidPt;if (!isUsed[c] && this.writingMode[c] == mode) {if (debug) {System.out.println("Look for match with " + removeHiddenMarkers(content[c].toString()));}while (true) {for (int j2=0; j2 < count; j2++) {i=items[j2];if (!isUsed[i]) {int baseLineDifference=(int)(f_y2[i] - f_y2[c]);if (baseLineDifference < 0) {baseLineDifference=-baseLineDifference;}int topLineDifference=(int)(f_y1[i] - f_y1[c]);if (topLineDifference < 0) {topLineDifference=-topLineDifference;}int lineGap=(int)(f_x1[i] - f_x2[c]);if (!isSearch && lineGap > (int)(f_x1[c] - f_x2[i])) {lineGap=(int)(f_x1[c] - f_x2[i]);}int fontSizeChange=fontSize[c] - fontSize[i];if (fontSizeChange < 0) {fontSizeChange=-fontSizeChange;}if (debug) {System.out.println("Against " + removeHiddenMarkers(content[i].toString()));}if (sameLineOnly && lineGap > fontSize[c] && lineGap > 0) {if (debug) {System.out.println("case1 lineGap=" + lineGap);}} else if (sameLineOnly && baseLineDifference > 1 && lineGap > 2 * fontSize[c] && (fontSize[c] == fontSize[i])) {if (debug) {System.out.println("case3");}} else if (sameLineOnly && baseLineDifference > 3) {if (debug) {System.out.println("case4");}} else if (sameLineOnly && fontSizeChange > 2) {if (debug) {System.out.println("case5");}} else if ((isSearch && (i != c && !(lineGap > 2 * fontSize[c] || -lineGap > 2 * fontSize[c]) && ((f_x1[i] > f_x1[c] && mode != PdfData.VERTICAL_TOP_TO_BOTTOM) || (f_x1[i] < f_x1[c] && mode == PdfData.VERTICAL_TOP_TO_BOTTOM) && writingMode[c] == mode && (!(fontSizeChange > 2) || (fontSizeChange > 2 && topLineDifference < 3))))) || (!isSearch && (i != c && ((f_x1[i] > f_x1[c] && mode != PdfData.VERTICAL_TOP_TO_BOTTOM) || f_x1[i] < f_x1[c] && mode == PdfData.VERTICAL_TOP_TO_BOTTOM && writingMode[c] == mode && (!(fontSizeChange > 2) || (fontSizeChange > 2 && topLineDifference < 3)))))) {gap=(f_x1[i] - f_x2[c]);if (debug) {System.out.println("case6 gap=" + gap);}if (mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT || mode == PdfData.VERTICAL_TOP_TO_BOTTOM) {gap=-gap;}if ((gap < 0) && (gap > -2)) {gap=0;}yMidPt=(f_y1[i] + f_y2[i]) / 2;if ((yMidPt < f_y1[c]) && (yMidPt > f_y2[c]) && ((smallest_gap < 0) || (gap < smallest_gap))) {smallest_gap=gap;id=i;}}}}if (id == -1) {break;}float possSpace=f_x1[id] - f_x2[c];if (mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT || mode == PdfData.VERTICAL_TOP_TO_BOTTOM) {possSpace=-possSpace;} else if (mode == PdfData.VERTICAL_BOTTOM_TO_TOP) {possSpace=(f_x2[id] - f_x1[c]);}separator=isGapASpace(c,id,possSpace,addMultiplespaceXMLTag,mode);if ((breakOnSpace) && (((hadSpace != null) && ((hadSpace[c]) || (separator.startsWith(" ")))))) {break;}merge(c,id,separator,true);id=-1;smallest_gap=1000000;}}}}  }
class C{  FactoryEnumeration(List<NamedWeakReference<Object>> factories,ClassLoader loader){  this.factories=factories;  this.loader=loader;}  }
class C{  public void removeQValue(){  super.removeParameter(ParameterNames.Q);}  }
class C{  public PermissionRequestObject onAnyDenied(Func denyFunc){  mDenyFunc=denyFunc;  return this;}  }
class C{  public Aggregate(int type,Expression on,Select select,boolean distinct){  this.type=type;  this.on=on;  this.select=select;  this.distinct=distinct;}  }
class C{  public boolean hasMoney(){  return hasRepeatingExtension(Money.class);}  }
class C{  public MethodAttributes clone(){  MethodAttributes result=new MethodAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  result.Executable=Executable;  result.UserExecutable=UserExecutable;  return result;}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent intent){  if (requestCode == REQUEST_CODE) {    if (resultCode == Activity.RESULT_OK) {      JSONObject obj=new JSONObject();      try {        obj.put(TEXT,intent.getStringExtra("SCAN_RESULT"));        obj.put(FORMAT,intent.getStringExtra("SCAN_RESULT_FORMAT"));        obj.put(CANCELLED,false);      } catch (      JSONException e) {        Log.d(LOG_TAG,"This should never happen");      }      this.callbackContext.success(obj);    } else     if (resultCode == Activity.RESULT_CANCELED) {      JSONObject obj=new JSONObject();      try {        obj.put(TEXT,"");        obj.put(FORMAT,"");        obj.put(CANCELLED,true);      } catch (      JSONException e) {        Log.d(LOG_TAG,"This should never happen");      }      this.callbackContext.success(obj);    } else {      this.callbackContext.error("Unexpected error");    }  }}  }
class C{  public SelectAllNeuronsAction(final NetworkPanel networkPanel){  super("Select All Neurons");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke('n'),this);  putValue(SHORT_DESCRIPTION,"Select all neurons (n)");  networkPanel.getActionMap().put(this,this);}  }
class C{  public boolean waitToStop(long timeout) throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < timeout) {    if (!this.isRunning()) {      return true;    } else {      Thread.sleep(100);    }  }  return !this.isRunning();}  }
class C{  public static String formatParams(ArrayList<? extends ParameterInterface> parameters){  if (parameters.size() == 0) {    return "";  }  StatementBuilder buff=new StatementBuilder();  int i=0;  boolean params=false;  for (  ParameterInterface p : parameters) {    if (p.isValueSet()) {      if (!params) {        buff.append(" {");        params=true;      }      buff.appendExceptFirst(", ");      Value v=p.getParamValue();      buff.append(++i).append(": ").append(v.getTraceSQL());    }  }  if (params) {    buff.append('}');  }  return buff.toString();}  }
class C{  @Override public boolean onSchedule(PackingPlan packing){  LOG.info("Starting to deploy topology: " + LocalContext.topologyName(config));synchronized (processToContainer) {    LOG.info("Starting executor for TMaster");    startExecutor(0);    for (    PackingPlan.ContainerPlan container : packing.getContainers()) {      startExecutor(container.getId());    }  }  LOG.info("Executor for each container have been started.");  return true;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  private void placeJammersRandomly(){  for (int i=0; i < NUMBER_OF_STATIC_JAMMERS; i++) {    Double2D randomLoc=new Double2D(space.getWidth() * 0.5 + random.nextInt(100) - 0.5,space.getHeight() * 0.5 + random.nextInt(100) - 0.5);    jammerLocations.add(randomLoc);  }}  }
class C{  public VBinary(String columnName,int WindowNo){  super();  super.setName(columnName);  m_columnName=columnName;  setLayout(new BorderLayout());  JPanel buttonPanel=new JPanel(new GridLayout(1,2));  buttonPanel.setPreferredSize(new Dimension(500,25));  add(buttonPanel,BorderLayout.CENTER);  m_OpenButton.setIcon(Env.getImageIcon("Open16.gif"));  m_OpenButton.addActionListener(this);  m_OpenButton.setToolTipText(Msg.translate(Env.getCtx(),"Upload"));  buttonPanel.add(m_OpenButton);  m_SaveButton.setIcon(Env.getImageIcon("Save16.gif"));  m_SaveButton.addActionListener(this);  m_SaveButton.setToolTipText(Msg.translate(Env.getCtx(),"Download"));  buttonPanel.add(m_SaveButton);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1792) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static String newName(Mail mail) throws MessagingException {  String oldName=mail.getName();  if (oldName.length() > 76) {    int count=0;    int index=0;    while ((index=oldName.indexOf('!',index + 1)) >= 0) {      count++;    }    if (count > 7) {      throw new MessagingException("Unable to create a new message name: too long." + " Possible loop in config.xml.");    } else {      oldName=oldName.substring(0,76);    }  }  return oldName + "-!" + random.nextInt(1048576);}  }
class C{  public int update(Document doc){  final Map<String,Object> metadata=doc.asMap();  final String id=(String)metadata.get(FileMetadataSchema.ID);  delete(id);  return create(doc);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static StyledString markLTR(StyledString styledString){  if (!USE_TEXT_PROCESSOR)   return styledString;  String inputString=styledString.getString();  String string=TextProcessor.process(inputString);  if (string != inputString)   insertMarks(styledString,inputString,string);  return styledString;}  }
class C{  private static void traverseElement(ArrayList<ASTNode> list,PsiElement element,IElementType toFind,ASTNode cursor,String textContent){  ASTNode[] children=element.getNode().getChildren(null);  for (  ASTNode node : children) {    traverseASTNode(list,toFind,cursor,node,textContent);  }}  }
class C{  public E pollLast(){  if (size == 0)   return null;  return removeLast();}  }
class C{  public Builder byHour(Collection<Integer> hours){  this.byHour.addAll(hours);  return this;}  }
class C{  @Override public Traits identifyUser(String userID,String email,String username){  Traits traits=new Traits();  traits.putEmail(email);  traits.putUsername(username);  tracker.identify(userID,traits,new Options());  return traits;}  }
class C{  @DSSink({DSSinkKind.PHONE_CONNECTION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.741 -0500",hash_original_method="62E31991C2E3FEB9590AC2302F444FDA",hash_generated_method="06B122E6D993D7E683ED8C9B5FC895A8") public void removeApnContextSync(ApnContext apnContext){  Message response=sendMessageSynchronously(REQ_REMOVE_APNCONTEXT,apnContext);  if ((response != null) && (response.what == RSP_REMOVE_APNCONTEXT)) {    if (DBG)     log("removeApnContext ok");  } else {    log("removeApnContext error response=" + response);  }}  }
class C{  public static void registerAdditionalGroupColors(final String groupProperties,final String pluginName,final ClassLoader classLoader,final Plugin provider){  SwingTools.registerAdditionalGroupColors(groupProperties,pluginName,classLoader,provider);}  }
class C{  public static void sort(final CommonIndex x,final long off,final long len,final Swapper swapper){  if (len < 7) {    for (long i=off; i < len + off; i++) {      for (long j=i; j > off && x.get(j - 1) > x.get(j); j--) {        swapper.swap(j,j - 1);      }    }    return;  }  long m=off + (len >> 1);  if (len != 7) {    long l=off;    long n=off + len - 1;    if (len > 40) {      final long s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  final long v=x.get(m);  long a=off;  long b=a;  long c=off + len - 1;  long d=c;  while (true) {    while (b <= c && x.get(b) <= v) {      if (x.get(b) == v) {        swapper.swap(a++,b);      }      b++;    }    while (c >= b && x.get(c) >= v) {      if (x.get(c) == v) {        swapper.swap(c,d--);      }      c--;    }    if (b > c) {      break;    }    swapper.swap(b++,c--);  }  long s2;  final long n2=off + len;  s2=Math.min(a - off,b - a);  vecswap(swapper,off,b - s2,s2);  s2=Math.min(d - c,n2 - d - 1);  vecswap(swapper,b,n2 - s2,s2);  if ((s2=b - a) > 1) {    sort(x,off,s2,swapper);  }  if ((s2=d - c) > 1) {    sort(x,n2 - s2,s2,swapper);  }}  }
class C{  public static Validator<CharSequence> iPv6Address(@NonNull final Context context){  return new IPv6AddressValidator(context,R.string.default_error_message);}  }
class C{  public void runProcess(){  final ProcessCtl worker=new ProcessCtl(null,getWindowNo(),genForm.getProcessInfo(),genForm.getTrx());  try {    worker.run();  }  finally {    unlockUI();  }}  }
class C{  public SocksServerBuilder useSSL(SSLConfiguration sslConfiguration){  this.sslConfiguration=sslConfiguration;  return this;}  }
class C{  public LogEntryIterator(final ResultSet resultSet){  super(resultSet);}  }
class C{  private static boolean isItemBelowOtherPlayer(final Player player,final Item sourceItem){  final List<Player> players=player.getZone().getPlayers();  for (  final Player otherPlayer : players) {    if (player.equals(otherPlayer)) {      continue;    }    if (!player.getName().equals(sourceItem.getBoundTo())) {      if (otherPlayer.getArea().intersects(sourceItem.getArea())) {        player.sendPrivateText("You cannot take items which are below other players");        return true;      }    }  }  return false;}  }
class C{  public boolean forEachEntry(TDoubleFloatProcedure procedure){  byte[] states=_states;  double[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public InExRules(){  this.inExRuleMatcher=this;}  }
class C{  private void destroyListener(){  if (onFriendsUpdateListener == null) {    return;  }  userHandler.removeOnFriendsUpdateListener(onFriendsUpdateListener);  onFriendsUpdateListener=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void showError(BirthdayListFragment fragment,String message){  String errorMessage=getErrorMessage(fragment,message);  showErrorInternal(fragment,errorMessage);}  }
class C{  void addRepaintable(JComponent child){  int position=panel.getComponentCount();  if (child instanceof InternalManagedWindow) {    InternalManagedWindow window=(InternalManagedWindow)child;    window.addWindowDragListener(this);    position=findWindowPosition(window.getName());  }  if (child instanceof Inspectable) {    ((Inspectable)child).setInspector(this);  }  child.setIgnoreRepaint(true);  child.setAlignmentX(LEFT_ALIGNMENT);  panel.add(child,position);  panel.revalidate();}  }
class C{  public Matrix4x4 rotateX(double theta){  TEMP.identity();  TEMP.matrix[1][1]=TEMP.matrix[2][2]=Math.cos(theta);  TEMP.matrix[2][1]=Math.sin(theta);  TEMP.matrix[1][2]=-TEMP.matrix[2][1];  return this.multiplySelf(TEMP);}  }
class C{  public InlineQueryResultCachedVoiceBuilder id(String id){  this.id=id;  return this;}  }
class C{  public Trigger(Alert alert,TriggerType type,String name,Double threshold,Double secondaryThreshold,long inertiaMillis){  super(alert.getOwner());  setAlert(alert);  setType(type);  setName(name);  setThreshold(threshold);  setSecondaryThreshold(secondaryThreshold);  setInertia(inertiaMillis);  preUpdate();}  }
class C{  public synchronized void deleteObservers(){  observers.clear();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SDEFINITION__TKEY:    return tkey != null;case GamlPackage.SDEFINITION__ARGS:  return args != null;}return super.eIsSet(featureID);}  }
class C{  public ManualActiveLagGraph(){  addFactors("Gene",1);  setMaxLagAllowable(3);  for (  String s : getFactors()) {    LaggedFactor laggedFactor=new LaggedFactor(s,1);    addEdge(s,laggedFactor);  }}  }
class C{  public static Node createNodeWithPort(final int port){  return new Node(new WeakNodeIdentity(String.format("%d",port)),new NodeEndpoint("http","127.0.0.1",port));}  }
class C{  public Builder requestCode(int requestCode){  mRequestCode=requestCode;  return this;}  }
class C{  private Instance generateInstance(Instances format,Random randomG,double stdDev,double[] center,String cName){  Instance example;  int numAtts=getNumAttributes();  if (getClassFlag()) {    numAtts++;  }  example=new DenseInstance(numAtts);  example.setDataset(format);  for (int i=0; i < getNumAttributes(); i++) {    example.setValue(i,randomG.nextGaussian() * stdDev + center[i]);  }  if (getClassFlag()) {    example.setClassValue(cName);  }  return example;}  }
class C{  public void deleteMessage(DeleteMessageRequest deleteMessageRequest){  amazonSqsToBeExtended.deleteMessage(deleteMessageRequest);}  }
class C{  public void advanceSeason(){  int oldPrestige=teamPrestige;  if (this != league.saveBless && this != league.saveCurse) {    if (wonRivalryGame && (teamPrestige - league.findTeamAbbr(rivalTeam).teamPrestige < 20)) {      teamPrestige+=2;    } else     if (!wonRivalryGame && (league.findTeamAbbr(rivalTeam).teamPrestige - teamPrestige < 20 || name.equals("American Samoa"))) {      teamPrestige-=2;    }    int expectedPollFinish=100 - teamPrestige;    int diffExpected=expectedPollFinish - rankTeamPollScore;    oldPrestige=teamPrestige;    if ((teamPrestige > 45 && !name.equals("American Samoa")) || diffExpected > 0) {      teamPrestige=(int)Math.pow(teamPrestige,1 + (float)diffExpected / 1500);    }    if (rankTeamPollScore == 1) {      teamPrestige+=3;    }  }  if (teamPrestige > 95)   teamPrestige=95;  if (teamPrestige < 45 && !name.equals("American Samoa"))   teamPrestige=45;  if (league.findTeamAbbr(rivalTeam).userControlled && league.isHardMode()) {    Team rival=league.findTeamAbbr(rivalTeam);    if (teamPrestige < rival.teamPrestige - 10) {      teamPrestige=rival.teamPrestige - 10;    }  } else   if (userControlled && league.isHardMode()) {    Team rival=league.findTeamAbbr(rivalTeam);    if (rival.teamPrestige < teamPrestige - 10) {      rival.teamPrestige=teamPrestige - 10;    }  }  diffPrestige=teamPrestige - oldPrestige;  if (userControlled)   checkHallofFame();  checkCareerRecords(league.leagueRecords);  if (league.userTeam == this)   checkCareerRecords(league.userTeamRecords);  advanceSeasonPlayers();}  }
class C{  public Vec3 cross(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","cross","missingVector"));  }  double x=this.y * vector.z - this.z * vector.y;  double y=this.z * vector.x - this.x * vector.z;  double z=this.x * vector.y - this.y * vector.x;  this.x=x;  this.y=y;  this.z=z;  return this;}  }
class C{  public static PrimaryResponse send(Set recipients,PartitionedRegion r,int bucketId) throws ForceReattemptException {  Assert.assertTrue(recipients != null,"PrimaryRequestMessage NULL recipient");  PrimaryResponse p=new PrimaryResponse(r.getSystem(),recipients);  PrimaryRequestMessage m=new PrimaryRequestMessage(recipients,r.getPRId(),p,bucketId);  Set failures=r.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException(LocalizedStrings.PrimaryRequestMessage_FAILED_SENDING_0.toLocalizedString(m));  }  return p;}  }
class C{  Node(T t,String id,double percentX,double percentY,double percentWidth,double percentHeight,double minW,double maxW,double minH,double maxH){  super(t,id);  this.type=ElementType.NODE;  this.percentX=percentX;  this.percentY=percentY;  this.percentWidth=percentWidth;  this.percentHeight=percentHeight;  this.minWidth=minW;  this.maxWidth=maxW;  this.minHeight=minH;  this.maxHeight=maxH;}  }
class C{  protected void initListeners(){  ripplerPane.setOnMousePressed(null);  ripplerPane.setOnMouseReleased(null);  ripplerPane.setOnMouseClicked(null);  if (this.control instanceof Region) {    ((Region)this.control).widthProperty().addListener(null);    ((Region)this.control).heightProperty().addListener(null);  }}  }
class C{  private boolean traversePostOrder(Tree tree,NodeRef node){  boolean update=false;  int nodeNum=node.getNumber();  if (tree.getParent(node) != null && updateNode[nodeNum]) {    addBranchUpdateOperation(tree,node);    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    final boolean update1=traversePostOrder(tree,child1);    NodeRef child2=tree.getChild(node,1);    final boolean update2=traversePostOrder(tree,child2);    if (update1 || update2) {      nodeOperations.add(new DataLikelihoodDelegate.NodeOperation(nodeNum,child1.getNumber(),child2.getNumber()));      update=true;    }  }  return update;}  }
class C{  public ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ExportableElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == AnnotableElement.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == AnnotableScriptElement.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST:  return N4JSPackage.EXPORTED_VARIABLE_STATEMENT__ANNOTATION_LIST;default :return -1;}}if (baseClass == ModifiableElement.class) {switch (baseFeatureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:return N4JSPackage.EXPORTED_VARIABLE_STATEMENT__DECLARED_MODIFIERS;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected void buildGrid(int numX,int numY,int power){  int numValues=numX * numY;  double[] xGrid=new double[numValues];  double[] yGrid=new double[numValues];  double[] zGrid=new double[numValues];  double xMin=1.e20;  for (int k=0; k < this.xValues.length; k++) {    xMin=Math.min(xMin,this.xValues[k].doubleValue());  }  double xMax=-1.e20;  for (int k=0; k < this.xValues.length; k++) {    xMax=Math.max(xMax,this.xValues[k].doubleValue());  }  double yMin=1.e20;  for (int k=0; k < this.yValues.length; k++) {    yMin=Math.min(yMin,this.yValues[k].doubleValue());  }  double yMax=-1.e20;  for (int k=0; k < this.yValues.length; k++) {    yMax=Math.max(yMax,this.yValues[k].doubleValue());  }  Range xRange=new Range(xMin,xMax);  Range yRange=new Range(yMin,yMax);  xRange.getLength();  yRange.getLength();  double dxGrid=xRange.getLength() / (numX - 1);  double dyGrid=yRange.getLength() / (numY - 1);  double x=0.0;  for (int i=0; i < numX; i++) {    if (i == 0) {      x=xMin;    } else {      x+=dxGrid;    }    double y=0.0;    for (int j=0; j < numY; j++) {      int k=numY * i + j;      xGrid[k]=x;      if (j == 0) {        y=yMin;      } else {        y+=dyGrid;      }      yGrid[k]=y;    }  }  for (int kGrid=0; kGrid < xGrid.length; kGrid++) {    double dTotal=0.0;    zGrid[kGrid]=0.0;    for (int k=0; k < this.xValues.length; k++) {      double xPt=this.xValues[k].doubleValue();      double yPt=this.yValues[k].doubleValue();      double d=distance(xPt,yPt,xGrid[kGrid],yGrid[kGrid]);      if (power != 1) {        d=Math.pow(d,power);      }      d=Math.sqrt(d);      if (d > 0.0) {        d=1.0 / d;      } else {        d=1.e20;      }      if (this.zValues[k] != null) {        zGrid[kGrid]+=this.zValues[k].doubleValue() * d;      }      dTotal+=d;    }    zGrid[kGrid]=zGrid[kGrid] / dTotal;  }  initialize(formObjectArray(xGrid),formObjectArray(yGrid),formObjectArray(zGrid));}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  draw(g2,area);  return null;}  }
class C{  private void doTestWakeLock(PowerManager.WakeLock wl){  wl.acquire();  assertTrue(wl.isHeld());  wl.release();  assertFalse(wl.isHeld());  wl.setReferenceCounted(true);  wl.acquire();  assertTrue(wl.isHeld());  wl.acquire();  assertTrue(wl.isHeld());  wl.release();  assertTrue(wl.isHeld());  wl.release();  assertFalse(wl.isHeld());  wl.setReferenceCounted(false);  wl.acquire();  assertTrue(wl.isHeld());  wl.acquire();  assertTrue(wl.isHeld());  wl.release();  assertFalse(wl.isHeld());}  }
class C{  public T last(){  return elements.get(length - 1);}  }
class C{  public String toAndroidWhere(){  boolean hasWhere=Helper.isNotEmpty(mWhere);  boolean hasGroup=Helper.isNotEmpty(mGroupBy);  boolean hasHaving=Helper.isNotEmpty(mHaving);  if (!hasWhere && !hasGroup && !hasHaving)   return null;  StringBuilder result=new StringBuilder();  if (!Helper.append(result,null,mWhere," AND ","(",")")) {    result.append("1=1");  }  Helper.append(result,") GROUP BY (",mGroupBy,"), (","","");  if (hasHaving) {    Helper.append(result,") HAVING (",mHaving,"), (","","");  }  return result.toString();}  }
class C{  private void saveSelection(){  log.info("");  miniTable.editingStopped(new ChangeEvent(this));  ArrayList<Integer> results=new ArrayList<Integer>();  selection=null;  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     results.add(id.getRecord_ID());  }  if (results.size() == 0)   return;  log.config("Selected #" + results.size());  selection=results;}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=(tail - 1) & mask;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i - 1) & mask;  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:29.385 -0500",hash_original_method="FCE3B5086AEC0F336253CCDCDE531810",hash_generated_method="39F8BD95C60DAF4B4F02B7D2464E2E6C") private boolean isAssigned(){  return mContactUri != null || mContactEmail != null || mContactPhone != null;}  }
class C{  default boolean matches(T entity){  return true;}  }
class C{  public DateTickUnit(DateTickUnitType unitType,int multiple){  this(unitType,multiple,DateFormat.getDateInstance(DateFormat.SHORT));}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));}  }
class C{  public boolean isLargePacket(){  return getDataLength() == MySQLPacket.MAX_LENGTH;}  }
class C{  public static void loadImageWithCharacterAvatar(Context context,HostManager hostManager,String imageUrl,String stringAvatar,ImageView imageView,int imageWidth,int imageHeight){  CharacterDrawable avatarDrawable=getCharacterAvatar(context,stringAvatar);  if (TextUtils.isEmpty(imageUrl)) {    imageView.setImageDrawable(avatarDrawable);    return;  }  if ((imageWidth) > 0 && (imageHeight > 0)) {    hostManager.getPicasso().load(hostManager.getHostInfo().getImageUrl(imageUrl)).placeholder(avatarDrawable).resize(imageWidth,imageHeight).centerCrop().into(imageView);  } else {    hostManager.getPicasso().load(hostManager.getHostInfo().getImageUrl(imageUrl)).fit().centerCrop().into(imageView);  }}  }
class C{  private void makeRoom(){  if (size <= MAX_SIZE) {    return;  }  indexFiles();  int removals=size - MAX_SIZE;  Iterator<File> i=accessOrder.values().iterator();  do {    delete(i.next());    i.remove();  } while (--removals > 0);}  }
class C{  public static Point2D interpolatedPoint(Point2D A,Point2D B,double d){  double r=Math.sqrt(d * d / norm2(A,B));  if (r < FLT_EPSILON)   return A;  if (1 - r < FLT_EPSILON)   return B;  Point2D P=new Point2D.Double(r * B.getX() + (1 - r) * A.getX(),r * B.getY() + (1 - r) * A.getY());  return P;}  }
class C{  public boolean hasFormattedAddress(){  return hasExtension(FormattedAddress.class);}  }
class C{  protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  return core.wrap(key);}  }
class C{  public static boolean isRope(IBlockAccess world,int x,int y,int z){  final Block block=world.getBlock(x,y,z);  return isRope(block);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println(String.valueOf(progress) + "%");  }  previousProgress=progress;}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public boolean isSetClusterJoinResponse(){  return this.clusterJoinResponse != null;}  }
class C{  public static File file(long id,long restaurantId){  File file=context().getExternalFilesDir(null);  if (file != null) {    if (id >= 0) {      return new File(file,RESTAURANT_IMAGES + restaurantId + separator+ id);    } else {      file=new File(file,RESTAURANT_IMAGES + restaurantId);      return Elements.get(file.listFiles(PART_FILTER),0);    }  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.006 -0400",hash_original_method="DB29F58DE9255B6C1BC35903D533B6E7",hash_generated_method="29B98D81AE4ACA56229AA8FA1A31E381") public boolean accept(File file){  return false;}  }
class C{  public static void evaluateGateHistogramOverlap(Gate g){  ArrayList<Double> scores_conv_overlap=new ArrayList<Double>();  ArrayList<Integer> ons=new ArrayList<Integer>();  ArrayList<Integer> offs=new ArrayList<Integer>();  for (int i=0; i < g.get_logics().size(); ++i) {    if (g.get_logics().get(i) == 1) {      ons.add(i);    } else     if (g.get_logics().get(i) == 0) {      offs.add(i);    }  }  for (int on=0; on < ons.size(); ++on) {    for (int off=0; off < offs.size(); ++off) {      double median_on=Math.pow(Math.E,HistogramUtil.median(g.get_histogram_rpus().get(ons.get(on)),g.get_histogram_bins()));      double median_off=Math.pow(Math.E,HistogramUtil.median(g.get_histogram_rpus().get(offs.get(off)),g.get_histogram_bins()));      double score=1 - median_off / median_on;      double overlap_penalty=0.0;      if (score < 0) {        scores_conv_overlap.add(0.0);        continue;      } else {        double[] on_norm=HistogramUtil.normalize(g.get_histogram_rpus().get(ons.get(on)));        double[] off_norm=HistogramUtil.normalize(g.get_histogram_rpus().get(offs.get(off)));        for (int bin=0; bin < g.get_histogram_bins().get_NBINS(); ++bin) {          overlap_penalty+=Math.sqrt(on_norm[bin] * off_norm[bin]);        }      }      score=1 - overlap_penalty;      scores_conv_overlap.add(score);    }  }  Collections.sort(scores_conv_overlap);  g.get_scores().set_conv_overlap(scores_conv_overlap.get(0));}  }
class C{  @Override public String toString(){  return key + "=" + value;}  }
class C{  public Instrumenter attachContributionCollector(){  includeContribution=true;  return this;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tminimum allowable standard deviation for normal density computation " + "\n\t(default 1e-6)","M",1,"-M <num>"));  result.addElement(new Option("\tClusterer to wrap.\n" + "\t(default " + defaultClustererString() + ")","W",1,"-W <clusterer name>"));  result.addAll(Collections.list(super.listOptions()));  if ((m_wrappedClusterer != null) && (m_wrappedClusterer instanceof OptionHandler)) {    result.addElement(new Option("","",0,"\nOptions specific to clusterer " + m_wrappedClusterer.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_wrappedClusterer).listOptions()));  }  return result.elements();}  }
class C{  public void removeOneToOneChatComposingStatus(final ContactId contact){synchronized (getImsServiceSessionOperationLock()) {    mOneToOneChatComposingStatusToNotify.remove(contact);  }}  }
class C{  public void makeCurrentReadFrom(EglSurfaceBase readSurface){  mEglCore.makeCurrent(mEGLSurface,readSurface.mEGLSurface);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.720 -0400",hash_original_method="4E278DFE620C1E8D5124E68175AB8DE2",hash_generated_method="3C61176C0544A2396B026C452133CFF6") public void warn(Object message,Throwable t){}  }
class C{  public void credentials(Object cred){  this.cred=cred;}  }
class C{  private void init(final int size,final int dict_size,final Random r){  if (size <= 0) {    throw new InvalidParameterException("Signature size should be positive");  }  if (dict_size <= 0) {    throw new InvalidParameterException("Dictionary size (or vector size) should be positive");  }  if (dict_size > (Long.MAX_VALUE - dict_size) / dict_size) {    throw new InvalidParameterException("Dictionary size (or vector size) is too big and will " + "cause a multiplication overflow");  }  this.dict_size=dict_size;  this.n=size;  hash_coefs=new long[n][2];  for (int i=0; i < n; i++) {    hash_coefs[i][0]=r.nextInt(dict_size);    hash_coefs[i][1]=r.nextInt(dict_size);  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mScroller.startScroll(startX,startY,dx,dy,duration);}  }
class C{  public XmlHandler cleanAnnotatedClass(Class<?>... classes){  return cleanAnnotatedClass(false,list(classes));}  }
class C{  @Override public void start(){  if (session == null) {    session=findSessionToResume();  } else {    if (clientHello != null && this.status != FINISHED) {      return;    }    if (!session.isValid()) {      session=null;    }  }  if (session != null) {    isResuming=true;  } else   if (parameters.getEnableSessionCreation()) {    isResuming=false;    session=new SSLSessionImpl(parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getPeerHostName(),socketOwner.getPeerPort());    }    session.protocol=ProtocolVersion.getLatestVersion(parameters.getEnabledProtocols());    recordProtocol.setVersion(session.protocol.version);  } else {    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created ");  }  startSession();}  }
class C{  public void restartTimer(DrawContext dc){  this.timer.restart(dc);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testResourcesAvailable(){  new SwedishAnalyzer().close();}  }
class C{  @Override public boolean contains(Object elem){  if (!(elem instanceof CheckBoxListItem)) {    return super.contains(new CheckBoxListItem(elem));  } else {    return super.contains(elem);  }}  }
class C{  @Override public boolean isCellEditable(EventObject e){  if (e instanceof MouseEvent) {    for (int counter=getColumnCount() - 1; counter >= 0; counter--) {      if (getColumnClass(counter) == TreeTableModel.class) {        MouseEvent me=(MouseEvent)e;        MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());        tree.dispatchEvent(newME);        break;      }    }  }  return false;}  }
class C{  @Override public IList<V> listValue(final IScope scope,final IType contentsType,final boolean copy){  if (!GamaType.requiresCasting(contentsType,type.getContentType())) {    return GamaListFactory.createWithoutCasting(contentsType,values());  } else {    return GamaListFactory.create(scope,contentsType,values());  }}  }
class C{  public byte[] crypt_raw(byte password[],byte salt[],int log_rounds,int cdata[]){  int rounds, i, j;  int clen=cdata.length;  byte ret[];  if (log_rounds < 4 || log_rounds > 30)   throw new IllegalArgumentException("Bad number of rounds");  rounds=1 << log_rounds;  if (salt.length != BCRYPT_SALT_LEN)   throw new IllegalArgumentException("Bad salt length");  init_key();  ekskey(salt,password);  for (i=0; i != rounds; i++) {    key(password);    key(salt);  }  for (i=0; i < 64; i++) {    for (j=0; j < (clen >> 1); j++)     encipher(cdata,j << 1);  }  ret=new byte[clen * 4];  for (i=0, j=0; i < clen; i++) {    ret[j++]=(byte)((cdata[i] >> 24) & 0xff);    ret[j++]=(byte)((cdata[i] >> 16) & 0xff);    ret[j++]=(byte)((cdata[i] >> 8) & 0xff);    ret[j++]=(byte)(cdata[i] & 0xff);  }  return ret;}  }
class C{  @Override public HitData rollHitLocation(int table,int side,int aimedLocation,int aimingMode,int cover){  return rollHitLocation(table,side);}  }
class C{  public void paintPasswordFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public SnackbarBuilder appendMessage(@StringRes int messageResId,@ColorRes int colorResId){  return appendMessage(context.getString(messageResId),getColor(colorResId));}  }
class C{  public static ValueDate parse(String s){  try {    return fromDateValue(DateTimeUtils.parseDateValue(s,0,s.length()));  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"DATE",s);  }}  }
class C{  public SootField(String name,Type type){  this.name=name;  this.type=type;  this.modifiers=0;  if (type instanceof RefLikeType)   Scene.v().getFieldNumberer().add(this);}  }
class C{  public static long bytesToLongLittleEndian(final byte[] vals,final int from){  final int bot=(vals[from + 3] << 24) + ((vals[from + 2] & 0xFF) << 16) + ((vals[from + 1] & 0xFF) << 8)+ (vals[from] & 0xFF);  final int top=(vals[from + 7] << 24) + ((vals[from + 6] & 0xFF) << 16) + ((vals[from + 5] & 0xFF) << 8)+ (vals[from + 4] & 0xFF);  return ((long)top << 32) + ((long)bot & 0xFFFFFFFFL);}  }
class C{  public static String interpreterCall(boolean isTagFile,String expression,Class expectedType,String fnmapvar,String expectedDeferredType,String expectedReturnType,String[] expectedParamTypes){  String jspCtxt=null;  if (isTagFile)   jspCtxt="this.getJspContext()"; else   jspCtxt="_jspx_page_context";  if (expectedType == javax.el.ValueExpression.class) {    if (expectedDeferredType == null) {      expectedDeferredType="java.lang.Object";    }    return "org.apache.jasper.runtime.PageContextImpl.getValueExpression" + "(" + Generator.quote(expression) + ", "+ "(PageContext)"+ jspCtxt+ ", "+ expectedDeferredType+ ".class, "+ fnmapvar+ ")";  }  if (expectedType == javax.el.MethodExpression.class) {    if (expectedReturnType == null) {      expectedReturnType="Void";    }    StringBuilder params=new StringBuilder();    if (expectedParamTypes != null) {      for (int i=0; i < expectedParamTypes.length; i++) {        if (i > 0) {          params.append(", ");        }        params.append(expectedParamTypes[i] + ".class");      }    }    return "org.apache.jasper.runtime.PageContextImpl.getMethodExpression" + "(" + Generator.quote(expression) + ", "+ "(PageContext)"+ jspCtxt+ ", "+ fnmapvar+ ", "+ expectedReturnType+ ".class, "+ "new Class[] {"+ params.toString()+ "})";  }  String targetType=expectedType.getName();  String primitiveConverterMethod=null;  if (expectedType.isPrimitive()) {    if (expectedType.equals(Boolean.TYPE)) {      targetType=Boolean.class.getName();      primitiveConverterMethod="booleanValue";    } else     if (expectedType.equals(Byte.TYPE)) {      targetType=Byte.class.getName();      primitiveConverterMethod="byteValue";    } else     if (expectedType.equals(Character.TYPE)) {      targetType=Character.class.getName();      primitiveConverterMethod="charValue";    } else     if (expectedType.equals(Short.TYPE)) {      targetType=Short.class.getName();      primitiveConverterMethod="shortValue";    } else     if (expectedType.equals(Integer.TYPE)) {      targetType=Integer.class.getName();      primitiveConverterMethod="intValue";    } else     if (expectedType.equals(Long.TYPE)) {      targetType=Long.class.getName();      primitiveConverterMethod="longValue";    } else     if (expectedType.equals(Float.TYPE)) {      targetType=Float.class.getName();      primitiveConverterMethod="floatValue";    } else     if (expectedType.equals(Double.TYPE)) {      targetType=Double.class.getName();      primitiveConverterMethod="doubleValue";    }  }  targetType=toJavaSourceType(targetType);  StringBuilder call=new StringBuilder("(" + targetType + ") "+ "org.apache.jasper.runtime.PageContextImpl.evaluateExpression"+ "("+ Generator.quote(expression)+ ", "+ targetType+ ".class, "+ "(PageContext)"+ jspCtxt+ ", "+ fnmapvar+ ")");  if (primitiveConverterMethod != null) {    call.insert(0,"(");    call.append(")." + primitiveConverterMethod + "()");  }  return call.toString();}  }
class C{  public TranslateBrowsePathsToNodeIdsResponse TranslateBrowsePathsToNodeIds(RequestHeader RequestHeader,BrowsePath... BrowsePaths) throws ServiceFaultException, ServiceResultException {  TranslateBrowsePathsToNodeIdsRequest req=new TranslateBrowsePathsToNodeIdsRequest(RequestHeader,BrowsePaths);  return (TranslateBrowsePathsToNodeIdsResponse)channel.serviceRequest(req);}  }
class C{  public boolean isEmpty(){  return ((raster == null) && (image == null));}  }
class C{  public static int binarySearch(double[] array,int startIndex,int endIndex,double value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  long longBits=Double.doubleToLongBits(value);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (lessThan(array[mid],value)) {      low=mid + 1;    } else     if (longBits == Double.doubleToLongBits(array[mid])) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (lessThan(value,array[mid]) ? 1 : 2);}  }
class C{  public void serializeValue(Object value,DataOutput dataOutput) throws IOException {  serializeObject(value,dataOutput,compression);}  }
class C{  public void starting(int tenantclass,Operation op){  starting(op,tenantclass);}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) / 2) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  public Matrix4x3d m02(double m02){  this.m02=m02;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public FieldInfo(ConstPool cp,String fieldName,String desc){  this(cp);  name=cp.addUtf8Info(fieldName);  cachedName=fieldName;  descriptor=cp.addUtf8Info(desc);}  }
class C{  public A readNext() throws NoSuchElementException {  return back.head();}  }
class C{  static private String BYTE_Max_Plus(){  long tempValue=Byte.MAX_VALUE + 1;  return String.valueOf(tempValue);}  }
class C{  @Override public MemChunkHolder<A> resize(long size){  return m_allocator.resizeChunk(this,size);}  }
class C{  public ScannerException(ErrorMessages message){  this(null,ErrorMessages.get(message),message,-1,-1);}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public static boolean isExpired(MultiMap headers){  if (headers != null) {    Integer queueExpireAfter=getQueueExpireAfter(headers);    Integer expireAfter=getExpireAfter(headers);    String serverTimestamp=headers.get(SERVER_TIMESTAMP_HEADER);    if (queueExpireAfter != null) {      expireAfter=queueExpireAfter;    }    if (serverTimestamp != null && expireAfter != null) {      LocalDateTime timestamp=parseDateTime(serverTimestamp);      LocalDateTime expirationTime=getExpirationTime(timestamp,expireAfter);      LocalDateTime now=getActualTime();      log.debug(" > isExpired - timestamp " + timestamp + " | expirationTime "+ expirationTime+ " | now "+ now);      return expirationTime.isBefore(now);    }  }  return false;}  }
class C{  public ConditionalTable(String headVar,Map<Assignment,IndependentDistribution> distribs){  table=new HashMap<Assignment,IndependentDistribution>();  this.headVar=headVar;  conditionalVars=new HashSet<String>();  for (  Assignment condition : distribs.keySet()) {    addDistrib(condition,distribs.get(condition));  }}  }
class C{  public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(Constants.INDENT);  buffer.append("pClientRandom: ");  buffer.append(Functions.toHexString(pClientRandom));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulClientRandomLen: ");  buffer.append(pClientRandom.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pServerRandom: ");  buffer.append(Functions.toHexString(pServerRandom));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulServerRandomLen: ");  buffer.append(pServerRandom.length);  return buffer.toString();}  }
class C{  public void testAnnotated() throws Exception {  ObjectMapper mapper=new ObjectMapper();  AnnotatedTestEnum e=mapper.readValue("\"JACKSON\"",AnnotatedTestEnum.class);  assertEquals(AnnotatedTestEnum.OK,e);}  }
class C{  public void writeTo(Writer out) throws IOException {synchronized (lock) {    out.write(buf,0,count);  }}  }
class C{  public void clearDerefsOnNonNullBranches(IsNullValueDataflow invDataflow){  this.invDataflow=invDataflow;}  }
class C{  public static double nextInverseGamma(double shape,double scale){  return 1.0 / new GammaDistribution(shape,1 / scale).nextGamma();}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  public Iterator<SootMethod> methodIterator(){  checkLevel(SIGNATURES);  return methodList.iterator();}  }
class C{  public IpcClientTcpEndpoint(String host,int port) throws IgniteCheckedException {  clientSock=new Socket();  try {    clientSock.connect(new InetSocketAddress(host,port));  } catch (  IOException e) {    throw new IgniteCheckedException("Failed to connect to endpoint [host=" + host + ", port="+ port+ ']',e);  }}  }
class C{  private void sendNotifications(ArrayList notificationObjects,ObjectName objName){  try {    if (logger.isDebugEnabled()) {      logger.debug("AdminDistributedSystemJmxImpl#sendNotifications: sending {} notifications",notificationObjects.size());    }    byte[] notifBytes=convertNotificationsDataToByteArray(notificationObjects);    if (notifBytes != null) {      Notification notif=new Notification(NOTIF_STAT_ALERT,objName,notificationSequenceNumber.addAndGet(1),"StatAlert Notifications");      notif.setUserData(notifBytes);      this.modelMBean.sendNotification(notif);    }    StringBuffer buf=new StringBuffer();    for (int i=0; i < notificationObjects.size(); i++) {      StatAlertNotification not=(StatAlertNotification)notificationObjects.get(i);      buf.append(not.toString(getAlertDefinition(not.getDefinitionId())));    }    if (isEmailNotificationEnabled) {      String mess=LocalizedStrings.AdminDistributedSystemJmxImpl_STATISTICS_ALERT_FROM_DISTRIBUTED_SYSTEM_MEMBER_0_STATISTICS_1.toLocalizedString(new Object[]{objName.getCanonicalName(),buf.toString()});      sendEmail(EML_SUBJ_PRFX_GFE_ALERT + EML_SUBJ_ITEM_GFE_DS + getName()+ " <"+ LocalizedStrings.AdminDistributedSystemJmxImpl_STATISTICS_ALERT_FOR_MEMBER.toLocalizedString()+ ">",mess);    }  } catch (  javax.management.MBeanException e) {    logger.error(e.getMessage(),e);  }catch (  RuntimeException e) {    logger.error(e.getMessage(),e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    logger.error(e.getMessage(),e);    throw e;  }}  }
class C{  static double sin_roquen_arith(double x){  double xi=Math.floor((x + PI_4) * PI_INV);  double x_=x - xi * PI;  double sign=((int)xi & 1) * -2 + 1;  double x2=x_ * x_;  double sin;  x_=sign * x_;  sin=c7;  sin=sin * x2 + c6;  sin=sin * x2 + c5;  sin=sin * x2 + c4;  sin=sin * x2 + c3;  sin=sin * x2 + c2;  sin=sin * x2 + c1;  return x_ + x_ * x2 * sin;}  }
class C{  public boolean remove(E message){  return this.get(message).remove(message);}  }
class C{  public void notify(PuzzleBuildingBlock sourceBlock){  String qualifiedName=sourceBlock.getZoneName() + SEP + sourceBlock.getName();  for (  String notifyName : notifies.get(qualifiedName)) {    PuzzleBuildingBlock targetBlock=buildingBlocks.get(notifyName);    if (targetBlock != null) {      targetBlock.onInputChanged();    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void put(String key,int value){  int hash=key.hashCode() & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      e.value=value;      return;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  Entry e=new Entry(hash,key,value,table[index]);  table[index]=e;}  }
class C{  public QueryResultParseException(String msg){  super(msg);}  }
class C{  @Override public final void close(){}  }
class C{  public static Object max(GeoTimeSerie gts) throws WarpScriptException {  Object[] parms=new Object[8];  int i=0;  parms[i++]=0L;  parms[i++]=null;  parms[i++]=null;  parms[i++]=Arrays.copyOf(gts.ticks,gts.values);  if (null != gts.locations) {    parms[i++]=Arrays.copyOf(gts.locations,gts.values);  } else {    parms[i++]=new long[gts.values];    Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_LOCATION);  }  if (null != gts.elevations) {    parms[i++]=Arrays.copyOf(gts.elevations,gts.values);  } else {    parms[i++]=new long[gts.values];    Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_ELEVATION);  }  parms[i++]=new Object[gts.values];  parms[i++]=null;  for (int j=0; j < gts.values; j++) {    ((Object[])parms[6])[j]=valueAtIndex(gts,j);  }  Object[] result=(Object[])((WarpScriptAggregatorFunction)WarpScriptLib.getFunction(WarpScriptLib.MAPPER_MAX)).apply(parms);  return result[3];}  }
class C{  public static StoreSysCfgRequest create(Config sc){  StoreSysCfgRequest m=new StoreSysCfgRequest();  m.sc=sc;  return m;}  }
class C{  public SslError(int error,SslCertificate certificate,String url){  assert certificate != null;  assert url != null;  addError(error);  mCertificate=certificate;  mUrl=url;}  }
class C{  public static boolean isBinaryType(Class<?> cls){  assert cls != null;  return BinaryObject.class.isAssignableFrom(cls) || Proxy.class.isAssignableFrom(cls) || BINARY_CLS.contains(cls);}  }
class C{  public static final short BuildShortLE(byte bytevec[],int offset){  return (short)(((int)(bytevec[1 + offset]) << 8) | (signedToInt(bytevec[0 + offset])));}  }
class C{  protected int defaultMinInstNum(){  return 1;}  }
class C{  public boolean isDisconnectForcibly(){  return disconnectForcibly;}  }
class C{  public static boolean isNodeAfter(Node node1,Node node2){  if (node1 instanceof DOMOrder && node2 instanceof DOMOrder) {    int index1=((DOMOrder)node1).getUid();    int index2=((DOMOrder)node2).getUid();    return index1 <= index2;  } else {    return DOMHelper.isNodeAfter(node1,node2);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void parseClassName(ICodeBaseEntry entry){  DataInputStream in=null;  try {    InputStream resourceIn=entry.openResource();    if (resourceIn == null) {      throw new NullPointerException("Got null resource");    }    in=new DataInputStream(resourceIn);    ClassParserInterface parser=new ClassParser(in,null,entry);    ClassNameAndSuperclassInfo.Builder builder=new ClassNameAndSuperclassInfo.Builder();    parser.parse(builder);    String trueResourceName=builder.build().getClassDescriptor().toResourceName();    if (!trueResourceName.equals(entry.getResourceName())) {      entry.overrideResourceName(trueResourceName);    }  } catch (  IOException e) {    errorLogger.logError("Invalid class resource " + entry.getResourceName() + " in "+ entry,e);  }catch (  InvalidClassFileFormatException e) {    errorLogger.logError("Invalid class resource " + entry.getResourceName() + " in "+ entry,e);  } finally {    IO.close(in);  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static TMCoord fromTM(double easting,double northing,Globe globe,Angle originLatitude,Angle centralMeridian,double falseEasting,double falseNorthing,double scale){  if (originLatitude == null || centralMeridian == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final TMCoordConverter converter=new TMCoordConverter();  double a, f;  if (globe != null) {    a=globe.getEquatorialRadius();    f=(globe.getEquatorialRadius() - globe.getPolarRadius()) / globe.getEquatorialRadius();  } else {    a=converter.getA();    f=converter.getF();  }  long err=converter.setTransverseMercatorParameters(a,f,originLatitude.radians,centralMeridian.radians,falseEasting,falseNorthing,scale);  if (err == TMCoordConverter.TRANMERC_NO_ERROR)   err=converter.convertTransverseMercatorToGeodetic(easting,northing);  if (err != TMCoordConverter.TRANMERC_NO_ERROR && err != TMCoordConverter.TRANMERC_LON_WARNING) {    String message=Logging.getMessage("Coord.TMConversionError");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new TMCoord(Angle.fromRadians(converter.getLatitude()),Angle.fromRadians(converter.getLongitude()),easting,northing,originLatitude,centralMeridian,falseEasting,falseNorthing,scale);}  }
class C{  public void load(@NotNull GitVcsSettings settings,@NotNull GitSharedSettings sharedSettings){  myGitField.setText(settings.getAppSettings().getPathToGit());  mySSHExecutableComboBox.setSelectedItem(settings.isIdeaSsh() ? IDEA_SSH : NATIVE_SSH);  myAutoUpdateIfPushRejected.setSelected(settings.autoUpdateIfPushRejected());  mySyncControl.setSelected(settings.getSyncSetting() == DvcsSyncSettings.Value.SYNC);  myAutoCommitOnCherryPick.setSelected(settings.isAutoCommitOnCherryPick());  myWarnAboutCrlf.setSelected(settings.warnAboutCrlf());  myWarnAboutDetachedHead.setSelected(settings.warnAboutDetachedHead());  myEnableForcePush.setSelected(settings.isForcePushAllowed());  myUpdateMethodComboBox.setSelectedItem(settings.getUpdateType());  myProtectedBranchesButton.setText(ParametersListUtil.COLON_LINE_JOINER.fun(sharedSettings.getForcePushProhibitedPatterns()));}  }
class C{  private JPanel createPane(String description,JRadioButton[] radioButtons,JButton showButton){  int numChoices=radioButtons.length;  JPanel box=new JPanel();  JLabel label=new JLabel(description);  box.setLayout(new BoxLayout(box,BoxLayout.PAGE_AXIS));  box.add(label);  for (int i=0; i < numChoices; i++) {    box.add(radioButtons[i]);  }  JPanel pane=new JPanel(new BorderLayout());  pane.add(box,BorderLayout.PAGE_START);  pane.add(showButton,BorderLayout.PAGE_END);  return pane;}  }
class C{  public boolean allowMultipleAdditions(String systemName){  return true;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public static ArrayBasedEscaperMap create(Map<Character,String> replacements){  return new ArrayBasedEscaperMap(createReplacementArray(replacements));}  }
class C{  protected final ConditionOperand consumeCOND(){  ConditionOperand ans=cc;  if (VM.VerifyAssertions) {    opt_assert(cc != null);  }  cc=null;  return ans;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.220 -0500",hash_original_method="83FFC2042E386057ACE3416E6CB82244",hash_generated_method="937E52F3011B3AAE21ECE10A2A8E9C67") public static String toString(int i){  String str=new String();  str.addTaint(i);  return str;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.501 -0500",hash_original_method="DEDDE1E197FB1DB769CF6C0A06F1A55D",hash_generated_method="D6230129008326DA3C02099C8E2CA524") public boolean isSIPAddress(){  return address instanceof SipUri;}  }
class C{  public static CrontabParameterExpression crontabScheduleWildcard(){  return new CrontabParameterExpression(ScheduleItemType.WILDCARD);}  }
class C{  public boolean add(final float[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public long num_threads(){  return Long.parseLong(fields[19]);}  }
class C{  public void addUpdate(double simTime){  ExternalEvent ee=new ExternalEvent(simTime);  if (ee.compareTo(nextEvent) == 0) {    return;  } else   if (this.nextEvent.getTime() > simTime) {    putToQueue(this.nextEvent);    this.nextEvent=ee;  } else {    putToQueue(ee);  }}  }
class C{  public static void main(String[] args){  PorterStemmer s=new PorterStemmer();  for (int i=0; i < args.length; i++) {    try {      InputStream in=new FileInputStream(args[i]);      byte[] buffer=new byte[1024];      int bufferLen, offset, ch;      bufferLen=in.read(buffer);      offset=0;      s.reset();      while (true) {        if (offset < bufferLen)         ch=buffer[offset++]; else {          bufferLen=in.read(buffer);          offset=0;          if (bufferLen < 0)           ch=-1; else           ch=buffer[offset++];        }        if (Character.isLetter((char)ch)) {          s.add(Character.toLowerCase((char)ch));        } else {          s.stem();          System.out.print(s.toString());          s.reset();          if (ch < 0)           break; else {            System.out.print((char)ch);          }        }      }      in.close();    } catch (    IOException e) {      System.out.println("error reading " + args[i]);    }  }}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24) & 0xff;  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24) & 0xff;  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (startA + (int)(fraction * (endA - startA))) << 24 | (startR + (int)(fraction * (endR - startR))) << 16 | (startG + (int)(fraction * (endG - startG))) << 8 | (startB + (int)(fraction * (endB - startB)));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildblacksheepbob(zone);}  }
class C{  public boolean hasAttribute(String name){  return this.findAttribute(name) != null;}  }
class C{  public void add(Permission permission){  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to " + "a readonly PermissionCollection");  if (permission != CryptoAllPermission.INSTANCE)   return;  all_allowed=true;}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  @Override @NotNull public ResolveResult[] multiResolve(final boolean incompleteCode){  if (USE_CACHE) {    final ResolveCache cache=ResolveCache.getInstance(getElement().getProject());    return cache.resolveWithCaching(this,CachingResolver.INSTANCE,false,incompleteCode);  } else {    return multiResolveInner();  }}  }
class C{  public int hashCode(){  return super.hashCode() ^ jdate.hashCode();}  }
class C{  private MobileDoc createPage(HttpServletRequest request,MobileSessionCtx wsc,int AD_Role_ID,int AD_User_ID,int AD_Client_ID,int AD_Org_ID){  String windowTitle=Msg.getMsg(wsc.ctx,"Menu");  MobileDoc doc=MobileDoc.createWindow(windowTitle);  head head=doc.getHead();  head.addElement(new link(MobileEnv.getBaseDirectory("/css/menu.css"),link.REL_STYLESHEET,link.TYPE_CSS));  body body=doc.getBody();  div div=new div();  div.setClass("toolbar");  h1 header=new h1();  header.setID("pageTitle");  div.addElement(header);  a anchor=new a();  anchor.setID("backButton");  anchor.setClass("button");  div.addElement(anchor);  anchor=new a();  anchor.setClass("button");  anchor.setHref(request.getRequestURI() + "?Exit=true");  anchor.setTarget("_self");  anchor.addElement("Logout");  div.addElement(anchor);  int AD_Tree_ID=DB.getSQLValue(null,"SELECT COALESCE(r.AD_Tree_Menu_ID, ci.AD_Tree_Menu_ID)" + "FROM AD_ClientInfo ci" + " INNER JOIN AD_Role r ON (ci.AD_Client_ID=r.AD_Client_ID) "+ "WHERE AD_Role_ID=?",AD_Role_ID);  if (AD_Tree_ID <= 0)   AD_Tree_ID=10;  log.fine("doPost - AD_Tree_ID=" + AD_Tree_ID + " - "+ Env.getAD_Language(wsc.ctx));  MTree tree=new MTree(wsc.ctx,AD_Tree_ID,false,false,null);  MTreeNode root=tree.getRoot();  Enumeration en=root.preorderEnumeration();  tree.trimTree();  StringBuffer buf=new StringBuffer();  StringBuffer buffav=new StringBuffer();  en=root.breadthFirstEnumeration();  int lastNodeId=0;  buf.append("<ul id=\"main\" selected=\"true\" title=\"Menu\">\n");  while (en.hasMoreElements()) {    MTreeNode nd=(MTreeNode)en.nextElement();    int level=nd.getLevel();    if (level == 0)     continue;    MTreeNode parent=(MTreeNode)nd.getParent();    if (parent != null && parent.getNode_ID() != lastNodeId) {      buf.append("</ul>\n<ul id=\"" + parent.getNode_ID() + "\" title=\""+ parent.getName()+ "\">\n");      lastNodeId=parent.getNode_ID();    }    buf.append(printNode(nd,wsc.ctx));    if (nd.isOnBar())     buffav.append(printNode(nd,wsc.ctx));  }  buf.append("</ul>\n");  buf.append("<ul><li class=\"menuSummary\" id=\"218\" onClick=\"changeMenu(event);\">Favorites<ul style=\"display:none\">\n");  buf.append(buffav);  buf.append("</ul></li></ul>\n");  body.addElement(buf.toString());  body.addElement(div);  return doc;}  }
class C{  private int bitCycleLeft(int x,int times,int d){  int mask=(1 << d) - 1;  int mout=x & mask;  times%=d;  int hi=mout >> (d - times);  int low=(mout << times) & mask;  int ret=x & ~mask;  ret|=low;  ret|=hi;  return ret;}  }
class C{  public static String searchRemoveFeature(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  Locale locale=UtilHttp.getLocale(request);  String productFeatureId=request.getParameter("productFeatureId");  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        String errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      int numRemoved=0;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        numRemoved+=delegator.removeByAnd("ProductFeatureAppl",UtilMisc.toMap("productId",productId,"productFeatureId",productFeatureId));      }      Map<String,Object> messageMap=UtilMisc.toMap("numRemoved",Integer.valueOf(numRemoved),"productFeatureId",productFeatureId);      String eventMsg=UtilProperties.getMessage(resource,"productSearchEvents.removed_param_features",messageMap,locale) + ".";      request.setAttribute("_EVENT_MESSAGE_",eventMsg);      eli.close();    } catch (    GenericEntityException e) {      String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_getting_results",locale) + " : " + e.toString();      request.setAttribute("_ERROR_MESSAGE_",errorMsg);      Debug.logError(e,errorMsg,module);      TransactionUtil.rollback(beganTransaction,errorMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_getting_results",locale) + " : " + e.toString();    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    Debug.logError(e,errorMsg,module);    return "error";  }  return "success";}  }
class C{  public int xMin(){  return this.data.readShort(Offset.xMin.offset);}  }
class C{  public IntersectionQuery(HGQuery<T> left,HGQuery<T> right,RSCombiner<T> combiner){  this.left=left;  this.right=right;  this.combiner=combiner;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public SignificantTermsBuilder size(int requiredSize){  bucketCountThresholds.setRequiredSize(requiredSize);  return this;}  }
class C{  public boolean parseCompoundList(BashPsiBuilder builder,boolean markAsFoldable){  return parseCompoundList(builder,false,markAsFoldable);}  }
class C{  public void releaseWriteLock(){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(RELEASE_TEXT + " write ",lock);  }  lock.writeLock().unlock();  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(RELEASED_TEXT + " write ",lock);  }}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_HexLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_HexLiteral_value_feature","_UI_HexLiteral_type"),ExpressionsPackage.Literals.HEX_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  SVG(Picture picture,RectF bounds){  this.picture=picture;  this.bounds=bounds;}  }
class C{  private void load(final URL n3,final RDFFormat rdfFormat) throws IOException, RDFParseException, RepositoryException {  final InputStream in=n3.openConnection().getInputStream();  try {    final Reader reader=new InputStreamReader(in);    final BigdataSailRepositoryConnection m_cxn=repo.getConnection();    try {      m_cxn.setAutoCommit(false);      m_cxn.add(reader,"kb",rdfFormat);      m_cxn.commit();    }  finally {      m_cxn.close();    }  }  finally {    in.close();  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_constantDeclaration_1_();}  }
class C{  public static void write(Context context,String filename,String filedata){  try {    FileOutputStream fos=context.openFileOutput(filename,Context.MODE_PRIVATE);    fos.write(filedata.getBytes());    fos.close();  } catch (  Exception e) {    Log.e(Functions.class.getSimpleName(),e.getMessage(),e);  }}  }
class C{  @Override public boolean add(Long value){  return _set.add(unwrap(value));}  }
class C{  public void appendOpenHeaderTag(int level,String style){  if (level > 3 || level < 1) {    return;  }  StringBuilder sb=new StringBuilder("<h");  sb.append(level);  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  public boolean hasDestinationRestrictions(){  List<Track> tracks=getTrackList();  for (  Track track : tracks) {    if (!track.getDestinationOption().equals(Track.ALL_DESTINATIONS)) {      return true;    }  }  return false;}  }
class C{  public String makeAlternator(String name,String alt1,String alt2,String alt3){  String[] alternates={alt1,alt2,alt3};  context.put(name,new VelocityAlternator(alternates));  return "";}  }
class C{  public static void fillVerticalGradientRectangle(Graphics graphics,Rectangle bounds,Color c1,Color c2){  graphics.pushState();  graphics.setForegroundColor(c2);  graphics.setBackgroundColor(c1);  graphics.fillGradient(bounds.x,bounds.y,bounds.width,bounds.height,true);  graphics.popState();}  }
class C{  public static TechnicalProduct updateTechnicalProduct(TechnicalProduct domObj,VOTechnicalService vo) throws ValidationException, ConcurrentModificationException {  verifyVersionAndKey(domObj,vo);  copyAttributes(domObj,vo);  return domObj;}  }
class C{  public Object nextElement(){  if (m_mine.hasMoreElements()) {    return m_mine.nextElement();  }  if (m_next != null) {    m_mine=m_next.m_mine;    m_next=m_next.m_next;    return nextElement();  }  return null;}  }
class C{  private void cryptInPlace(Cipher rc4,byte[] buffer) throws IllegalBlockSizeException, ShortBufferException, BadPaddingException {  rc4.doFinal(buffer,0,buffer.length,buffer);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  @Get("json") public Map<String,Object> retrieve(){  return retrieveInternal(false);}  }
class C{  private void addOwnNodeSpecs(StaticDefinitions staticDefs,EntitySpec entitySpec,Class<?> entityDefinitionClass){  if (!entityDefinitionClass.getEnclosingClass().isAssignableFrom(staticDefs.getClass())) {    throw new IllegalStateException(entityDefinitionClass + " not defined in " + staticDefs.getClass());  }  for (  FieldValuePair<NodeSpec> fieldValue : getStaticFieldValues(entityDefinitionClass,NodeSpec.class)) {    processNodeSpecAndAddToEntity(staticDefs,entitySpec,fieldValue.value,fieldValue.field);  }}  }
class C{  public boolean canOcclude(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canOcclude(constraints);}  }
class C{  protected ComboBoxEditor createEditor(){  BasicComboBoxEditor.UIResource bcbe=new BasicComboBoxEditor.UIResource();  if (bcbe != null) {    Component c=bcbe.getEditorComponent();    if (c != null) {      ((JComponent)c).setOpaque(false);      Border border=(Border)UIManager.get("ComboBox.editorBorder");      if (border != null) {        ((JComponent)c).setBorder(border);      }    }  }  return bcbe;}  }
class C{  public void writeFirstDoc(final int doc,final int frequency,final PAYLOAD[] payloads) throws IOException {  super.writeFirstDoc(doc,frequency);  if (payloads.length != frequency)   throw new RuntimeException("Mismatched frequency");  write(payloads);}  }
class C{  public final MessageBuilder data(String requestData){  message.setBody(requestData);  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_CASE_DEACTIVATION___TRACECASE_DEACT_NAME_1:    return getTracecase_deact_name_1();case UmplePackage.TRACE_CASE_DEACTIVATION___DE_ACTIVATE_FOR_1:  return getDeActivateFor_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public PathImpl lookup(String userPath,Map<String,Object> newAttributes){  return getWrappedPath().lookup(userPath,newAttributes);}  }
class C{  public static Tuple min(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    Table table=(Table)tuples;    ColumnMetadata md=table.getMetadata(field);    return table.getTuple(md.getMinimumRow());  } else {    return min(tuples.tuples(),field,cmp);  }}  }
class C{  public void validateWhenAllAttributesAreSet(boolean isDeclarative){  if (this.colocatedRegionName != null) {    if (this.fixedPAttrs != null) {      throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_IF_COLOCATED_WITH_IS_SPECFIED_THEN_FIXED_PARTITION_ATTRIBUTES_CAN_NOT_BE_SPECIFIED.toLocalizedString(this.fixedPAttrs));    }  }  if (this.fixedPAttrs != null) {    if (this.localMaxMemory == 0) {      throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_FIXED_PARTITION_ATTRBUTES_0_CANNOT_BE_DEFINED_FOR_ACCESSOR.toString(this.fixedPAttrs));    }  }}  }
class C{  public WildFly8xStandaloneLocalConfigurationCapability(){  super();  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_AJP_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.ALTERNATIVE_DEPLOYMENT_DIR,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.ALTERNATIVE_MODULES_DIR,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.CONFIGURATION,Boolean.TRUE);}  }
class C{  public BigInteger optBigInteger(int index,BigInteger defaultValue){  try {    return this.getBigInteger(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void remove(SchemaObject obj){  String objName=obj.getName();  HashMap<String,SchemaObject> map=getMap(obj.getType());  if (SysProperties.CHECK && !map.containsKey(objName)) {    DbException.throwInternalError("not found: " + objName);  }  map.remove(objName);  freeUniqueName(objName);}  }
class C{  public void addTransaction(Transaction txn) throws SystemException {  if (txn == null) {    String exception=LocalizedStrings.GlobalTransaction_GLOBALTRANSACTION_ADDTRANSACTION_CANNOT_ADD_A_NULL_TRANSACTION.toLocalizedString();    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (VERBOSE)     writer.fine(exception);    throw new SystemException(exception);  }  transactions.add(txn);}  }
class C{  public ArrayList<BloomFilter<E>> findMatches(BFINode<E> node,E o,SearchStatistics stat){  ArrayList<BloomFilter<E>> result=new ArrayList<BloomFilter<E>>();  stat.nbBFChecks++;  if (!node.value.contains(o)) {    return result;  }  if (node.isLeaf()) {    result.add(node.value);    return result;  }  for (int i=0; i < node.children.size(); i++) {    result.addAll(findMatches(node.children.get(i),o,stat));  }  return result;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @SuppressWarnings("unchecked") public static <T,D extends T>D downCast(T object){  return (D)object;}  }
class C{  private static String escapeString(String str){  int strLen=str.length();  StringBuilder b=new StringBuilder(strLen);  for (int i=0; i < strLen; i++) {    char original=str.charAt(i);    if (original >= ' ' && original <= '~' && original != '"' && original != '\'') {      b.append(original);    } else {      b.append(String.format("\\u%04x",(int)original));    }  }  return b.toString();}  }
class C{  private Set<Id<TransitStopFacility>> addStopsToSchedule(TransitSchedule newTransitSchedule,HashMap<Id<TransitLine>,Map<Id<TransitRoute>,Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>>> line2route2stop2StatsMap){  Set<Id<TransitStopFacility>> stopIdsNotFound=new TreeSet<>();  int stopFacilitiesNotFound=0;  for (  Map<Id<TransitRoute>,Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>> route2timeBin2stop2StatsMap : line2route2stop2StatsMap.values()) {    for (    Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>> timeBin2stop2StatsMap : route2timeBin2stop2StatsMap.values()) {      for (      Map<Id<TransitStopFacility>,StopStatsContainer> stop2StatsMap : timeBin2stop2StatsMap.values()) {        for (        Id<TransitStopFacility> stopId : stop2StatsMap.keySet()) {          TransitStopFacility transitStopFacility=scenario.getTransitSchedule().getFacilities().get(stopId);          if (transitStopFacility == null) {            stopIdsNotFound.add(stopId);            stopFacilitiesNotFound++;            log.error("Stop facility " + stopId + " not found");          } else {            if (!newTransitSchedule.getFacilities().containsKey(transitStopFacility.getId())) {              newTransitSchedule.addStopFacility(transitStopFacility);            }          }        }      }    }  }  log.info(stopFacilitiesNotFound + " occurences of " + stopIdsNotFound.size()+ " different transit stop facilities could not be added.");  return stopIdsNotFound;}  }
class C{  static synchronized MBeanServer createMBeanServer(){  if (mbeanServer == null) {    mbeanServer=MBeanServerFactory.createMBeanServer(DEFAULT_DOMAIN);  }  return mbeanServer;}  }
class C{  int expr(int[] flags) throws RESyntaxException {  int paren=-1;  int ret=-1;  int closeParens=parens;  if ((flags[0] & NODE_TOPLEVEL) == 0 && pattern.charAt(idx) == '(') {    if (idx + 2 < len && pattern.charAt(idx + 1) == '?' && pattern.charAt(idx + 2) == ':') {      paren=2;      idx+=3;      ret=node(RE.OP_OPEN_CLUSTER,0);    } else {      paren=1;      idx++;      ret=node(RE.OP_OPEN,parens++);    }  }  flags[0]&=~NODE_TOPLEVEL;  boolean open=false;  int branch=branch(flags);  if (ret == -1) {    ret=branch;  } else {    setNextOfEnd(ret,branch);  }  while (idx < len && pattern.charAt(idx) == '|') {    if (!open) {      nodeInsert(RE.OP_BRANCH,0,branch);      open=true;    }    idx++;    setNextOfEnd(branch,branch=node(RE.OP_BRANCH,0));    branch(flags);  }  int end;  if (paren > 0) {    if (idx < len && pattern.charAt(idx) == ')') {      idx++;    } else {      syntaxError("Missing close paren");    }    if (paren == 1) {      end=node(RE.OP_CLOSE,closeParens);    } else {      end=node(RE.OP_CLOSE_CLUSTER,0);    }  } else {    end=node(RE.OP_END,0);  }  setNextOfEnd(ret,end);  int currentNode=ret;  int nextNodeOffset=instruction[currentNode + RE.offsetNext];  while (nextNodeOffset != 0 && currentNode < lenInstruction) {    if (instruction[currentNode] == RE.OP_BRANCH) {      setNextOfEnd(currentNode + RE.nodeSize,end);    }    nextNodeOffset=instruction[currentNode + RE.offsetNext];    currentNode+=nextNodeOffset;  }  return ret;}  }
class C{  public static double[] sum(double M[][]){  double s[]=new double[M.length];  for (int j=0; j < M.length; j++) {    for (int k=0; k < M[j].length; k++) {      s[j]+=M[j][k];    }  }  return s;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getMoreGuards_();}  }
class C{  public File decryptToFile(InputStream fileInput,String fileNameOutput) throws NoSuchPaddingException, InvalidKeyException, NoSuchAlgorithmException, IOException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException {  if ((fileNameOutput == null) || (fileNameOutput.isEmpty())) {    return null;  }  File fileOutput=new File(fileNameOutput);  FileOutputStream outdec=new FileOutputStream(fileOutput);  byte[] decryptedStream=decrypt(fileInput);  outdec.write(decryptedStream);  outdec.flush();  outdec.close();  return fileOutput;}  }
class C{  public PanControl(int mouseButton,boolean panOverItem){  m_button=mouseButton;  m_panOverItem=panOverItem;}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.208 -0400",hash_original_method="C9C28C6746F703FA832F2D42517AD4AE",hash_generated_method="E4489D78CDBD00142F0F3684C9949816") @Override public void close() throws IOException {  try {    out.close();  }  finally {    lockFile.delete();  }}  }
class C{  private void writeCurrentByte(){  if (currentBitIndex < Byte.SIZE - 1) {    byteStream.write(currentByte);    currentByte=0;    currentBitIndex=Byte.SIZE - 1;  }}  }
class C{  public Spanned[] history(){  int i=0;  Spanned[] array=new Spanned[history.size()];  for (  String s : history) {    if (s != null) {      array[i]=Html.fromHtml(s);      i++;    }  }  return array;}  }
class C{  public void print(Object x){  m_Owner.append("" + x);}  }
class C{  public BuildPureClustersRunner(DataWrapper dataWrapper,Parameters pureClustersParams){  super(dataWrapper,(Clusters)pureClustersParams.get("clusters",null),pureClustersParams);}  }
class C{  public void testGetPathContextWhenInvalidFile(){  try {    new TomcatWAR("some/invalid/file");    fail("Should have thrown a ContainerException because the file doesn't exist");  } catch (  ContainerException expected) {    assertEquals("Failed to parse Tomcat WAR file in [some/invalid/file]",expected.getMessage());  }}  }
class C{  @Override public void apply(World world,Entity entity,Random random,Object data){  if (potionFactory == null)   return;  if (entity instanceof EntityLivingBase) {    final PotionEffect effect=potionFactory.createPotionEffect(world,entity,random,data);    ((EntityLivingBase)entity).addPotionEffect(effect);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static ArrayList<Integer> largestRow(int[][] array){  ArrayList<Integer> index=new ArrayList<Integer>();  int[] count=new int[array.length];  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      if (array[j][i] == 1)       count[j]++;    }  }  int max=max(count);  getIndex(index,count,max);  return index;}  }
class C{  public SplittedExampleSet(ExampleSet exampleSet,int numberOfSubsets,int samplingType,boolean useLocalRandomSeed,int seed) throws UserError {  this(exampleSet,new Partition(numberOfSubsets,exampleSet.size(),createPartitionBuilder(exampleSet,samplingType,useLocalRandomSeed,seed,true)));}  }
class C{  @Deprecated public static double signum(double d){  return Math.signum(d);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.972 -0500",hash_original_method="D3EC39ECED0CD0D362D80F2CDBB3BB21",hash_generated_method="067C5861BBE1F6A7C3E18A7150299C2B") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public byte[] encode(byte[] pArray){  return encodeBase64(pArray,false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr newAttribute;  Attr attribute1;  Attr attribute2;  String nodeName;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test","root");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/L1","L1:att");  newAttribute=((Element)element).setAttributeNodeNS(attribute1);  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/L2","L2:att");  newAttribute=((Element)element).setAttributeNodeNS(attribute2);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS("http://www.w3.org/DOM/L1","att");  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L2","att");  nodeName=attribute.getNodeName();  assertEquals("namednodemapremovenameditemns02","L2:att",nodeName);}  }
class C{  @Override public int estimateOutputSize(final int inLen){  int outSize=0;  final int totalBytesToDecrypt=unparsedBytes_.length + inLen;  if (totalBytesToDecrypt > 0) {    int frames=totalBytesToDecrypt / frameSize_;    frames+=1;    outSize+=(frameSize_ * frames);  }  return outSize;}  }
class C{  public boolean isLastPointGood(){  return this.lastPointGood;}  }
class C{  public TestSigningKey(PrivateKey key){  if (key == null) {    throw new IllegalArgumentException("key is null");  }  this.key=key;}  }
class C{  @Override public synchronized void updateBytes(int columnIndex,byte[] x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setBytes(columnIndex,x);  } else {    this.inserter.setBytes(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,x);  }}  }
class C{  public boolean schedule(Runnable task,ClassLoader loader){  boolean isPriority=false;  boolean isQueue=true;  boolean isWake=true;  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);}  }
class C{  public static AsymmetricKeyParameter createKey(SubjectPublicKeyInfo keyInfo) throws IOException {  AlgorithmIdentifier algId=keyInfo.getAlgorithm();  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption) || algId.getAlgorithm().equals(X509ObjectIdentifiers.id_ea_rsa)) {    RSAPublicKey pubKey=RSAPublicKey.getInstance(keyInfo.parsePublicKey());    return new RSAKeyParameters(false,pubKey.getModulus(),pubKey.getPublicExponent());  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.dhpublicnumber)) {    DHPublicKey dhPublicKey=DHPublicKey.getInstance(keyInfo.parsePublicKey());    BigInteger y=dhPublicKey.getY().getValue();    DHDomainParameters dhParams=DHDomainParameters.getInstance(algId.getParameters());    BigInteger p=dhParams.getP().getValue();    BigInteger g=dhParams.getG().getValue();    BigInteger q=dhParams.getQ().getValue();    BigInteger j=null;    if (dhParams.getJ() != null) {      j=dhParams.getJ().getValue();    }    DHValidationParameters validation=null;    DHValidationParms dhValidationParms=dhParams.getValidationParms();    if (dhValidationParms != null) {      byte[] seed=dhValidationParms.getSeed().getBytes();      BigInteger pgenCounter=dhValidationParms.getPgenCounter().getValue();      validation=new DHValidationParameters(seed,pgenCounter.intValue());    }    return new DHPublicKeyParameters(y,new DHParameters(p,g,q,j,validation));  } else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {    DHParameter params=DHParameter.getInstance(algId.getParameters());    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    BigInteger lVal=params.getL();    int l=lVal == null ? 0 : lVal.intValue();    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);    return new DHPublicKeyParameters(derY.getValue(),dhParams);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa) || algId.getAlgorithm().equals(OIWObjectIdentifiers.dsaWithSHA1)) {    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    ASN1Encodable de=algId.getParameters();    DSAParameters parameters=null;    if (de != null) {      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());    }    return new DSAPublicKeyParameters(derY.getValue(),parameters);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {    X962Parameters params=new X962Parameters((ASN1Primitive)algId.getParameters());    X9ECParameters x9;    if (params.isNamedCurve()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)params.getParameters();      x9=X962NamedCurves.getByOID(oid);      if (x9 == null) {        x9=SECNamedCurves.getByOID(oid);        if (x9 == null) {          x9=NISTNamedCurves.getByOID(oid);        }      }    } else {      x9=X9ECParameters.getInstance(params.getParameters());    }    ASN1OctetString key=new DEROctetString(keyInfo.getPublicKeyData().getBytes());    X9ECPoint derQ=new X9ECPoint(x9.getCurve(),key);    ECDomainParameters dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    return new ECPublicKeyParameters(derQ.getPoint(),dParams);  } else {    throw new RuntimeException("algorithm identifier in key not recognised");  }}  }
class C{  private void addValueInRefsTable(XPathContext xctxt,XMLString ref,int node){  XNodeSet nodes=(XNodeSet)m_refsTable.get(ref);  if (nodes == null) {    nodes=new XNodeSet(node,xctxt.getDTMManager());    nodes.nextNode();    m_refsTable.put(ref,nodes);  } else {    if (nodes.getCurrentNode() != node) {      nodes.mutableNodeset().addNode(node);      nodes.nextNode();    }  }}  }
class C{  public static void closeQuite(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException e) {      logger.info("Close quite.",e);    }  }}  }
class C{  public TransformListParser(){  transformListHandler=DefaultTransformListHandler.INSTANCE;}  }
class C{  public String binarySplitsTipText(){  return "Whether to use binary splits on nominal attributes when " + "building the partial trees.";}  }
class C{  public void testTrackColorSettings_single(){  testTrackColor(R.string.settings_map_track_color_mode_single,R.string.settings_map_track_color_mode_single);}  }
class C{  private static int computeRedLevel(int sz){  int level=0;  for (int m=sz - 1; m >= 0; m=m / 2 - 1)   level++;  return level;}  }
class C{  public static String byteArrayToHexString(byte[] bytes){  if (bytes == null || bytes.length == 0) {    return null;  }  final char[] hexArray={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  char[] hexChars=new char[bytes.length * 2];  int value;  for (int j=0; j < bytes.length; j++) {    value=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[value >>> 4];    hexChars[j * 2 + 1]=hexArray[value & 0x0F];  }  return new String(hexChars);}  }
class C{  public static boolean isChargerItem(ItemStack aStack){  try {    if (isElectricItem(aStack)) {      return ((ic2.api.item.IElectricItem)aStack.getItem()).canProvideEnergy(aStack);    }  } catch (  Throwable e) {  }  return false;}  }
class C{  public int allocateAppWidgetId(){  try {    if (mPackageName == null) {      mPackageName=mContext.getPackageName();    }    return sService.allocateAppWidgetId(mPackageName,mHostId,mContext.getUserId());  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  private void loadBankInfo(){  BankInfo bi=(BankInfo)fieldBankAccount.getSelectedItem().getValue();  if (bi == null)   return;  labelCurrency.setText(bi.Currency);  labelBalance.setText(m_format.format(bi.Balance));  fieldPaymentRule.removeAllItems();  ArrayList<ValueNamePair> paymentRuleData=getPaymentRuleData(bi);  for (  ValueNamePair vp : paymentRuleData)   fieldPaymentRule.appendItem(vp.getName(),vp);  fieldPaymentRule.setSelectedIndex(0);}  }
class C{  public T caseRouter(Router object){  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument01.class,args);}  }
class C{  public StringParameter(OptionID optionID,String defaultValue){  super(optionID,defaultValue);}  }
class C{  private void clearNotifications(){  NotificationManager manager=AndroidServices.instance().provideNotificationManager();  if (manager != null) {    manager.cancelAll();  }}  }
class C{  private void baseDados(){  designacoes=ControleDAO.getBanco().getCatalogacaoDAO().designacoes();  estratigrafias=ControleDAO.getBanco().getCatalogacaoDAO().estratigrafias();  colecoes=ControleDAO.getBanco().getCatalogacaoDAO().colecoes();  recentes=ControleDAO.getBanco().getCatalogacaoDAO().recentes();  excursao=ControleDAO.getBanco().getExcursaoDAO().acompanhamento(Tempo.atual());  emprestimo=ControleDAO.getBanco().getEmprestimoDAO().acompanhamento();}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  boolean isSessionResumption(){  return isSessionResumption;}  }
class C{  void relocateSimpleBeanObject(SimpleBeanObject obj,Point2D newllp){  SimpleBeanContainer oldContainer=null;  if (!(obj instanceof SimpleBeanContainer)) {    oldContainer=(SimpleBeanContainer)findEnclosingContainer(obj);  }  if (oldContainer != null) {    oldContainer.remove(obj);  }  obj.setLatitude((float)newllp.getY());  obj.setLongitude((float)newllp.getX());  if (obj instanceof SimpleBeanContainer)   ((SimpleBeanContainer)obj).validate();  SimpleBeanContainer newContainer=null;  if (!(obj instanceof SimpleBeanContainer)) {    newContainer=(SimpleBeanContainer)findEnclosingContainer(obj);  }  if (newContainer != null) {    newContainer.add(obj);  }}  }
class C{  public EditableOMPoly(){  createGraphic(null);}  }
class C{  public static boolean hasSingleStringArg(Closure c){  if (c.getMaximumNumberOfParameters() != 1)   return false;  String typeName=c.getParameterTypes()[0].getName();  return typeName.equals("java.lang.String");}  }
class C{  public MultipleIsA_ createMultipleIsA_(){  MultipleIsA_Impl multipleIsA_=new MultipleIsA_Impl();  return multipleIsA_;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 67:{        addToken(Token.SEPARATOR);        yybegin(JSP_DIRECTIVE);      }case 79:    break;case 54:{    addToken(Token.ERROR_NUMBER_FORMAT);  }case 80:break;case 10:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.VARIABLE);}case 81:break;case 23:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE_SCRIPT);}case 82:break;case 70:{start=zzMarkedPos - 4;yybegin(HIDDEN_COMMENT);}case 83:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 84:break;case 49:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 85:break;case 5:{addToken(Token.WHITESPACE);}case 86:break;case 33:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 87:break;case 74:{addToken(Token.FUNCTION);}case 88:break;case 68:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 89:break;case 37:{addToken(Token.ERROR_STRING_DOUBLE);addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 90:break;case 42:{addToken(Token.ERROR_CHAR);}case 91:break;case 20:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 92:break;case 77:{addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 6,zzMarkedPos - 1,Token.MARKUP_TAG_NAME);start=zzMarkedPos;yybegin(INTAG_SCRIPT);}case 93:break;case 62:{addToken(Token.SEPARATOR);yybegin(YYINITIAL);}case 94:break;case 50:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(YYINITIAL);}case 95:break;case 78:{yybegin(YYINITIAL);addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 7,zzMarkedPos - 2,Token.MARKUP_TAG_NAME);addToken(zzMarkedPos - 1,zzMarkedPos - 1,Token.MARKUP_TAG_DELIMITER);}case 96:break;case 21:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 97:break;case 40:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JAVA_MLC);return firstToken;}case 98:break;case 17:{yypushback(yylength());yybegin(INTAG);}case 99:break;case 26:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 100:break;case 44:{addToken(Token.IDENTIFIER);}case 101:break;case 75:{yybegin(YYINITIAL);addToken(start,zzStartRead + 3,Token.COMMENT_MULTILINE);}case 102:break;case 76:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 103:break;case 46:{addToken(Token.SEPARATOR);yybegin(JAVA_EXPRESSION);}case 104:break;case 72:{addToken(Token.COMMENT_MULTILINE);}case 105:break;case 69:{start=zzMarkedPos - 3;yybegin(JAVA_DOCCOMMENT);}case 106:break;case 48:{start=zzMarkedPos - 2;yybegin(PI);}case 107:break;case 45:{int count=yylength();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 1);yybegin(INTAG_CHECK_TAG_NAME);}case 108:break;case 59:{yybegin(JAVA_EXPRESSION);addToken(start,zzStartRead + 1,Token.COMMENT_DOCUMENTATION);}case 109:break;case 57:{yybegin(JAVASCRIPT);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 110:break;case 28:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 111:break;case 12:{addToken(Token.OPERATOR);}case 112:break;case 38:{addToken(Token.ERROR_CHAR);addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 113:break;case 71:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 114:break;case 61:{start=zzMarkedPos - 2;yybegin(JAVA_MLC);}case 115:break;case 2:{addToken(Token.IDENTIFIER);}case 116:break;case 39:{addToken(Token.VARIABLE);}case 117:break;case 34:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_HIDDEN_COMMENT);return firstToken;}case 118:break;case 8:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 119:break;case 25:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 120:break;case 29:{addToken(Token.ERROR_STRING_DOUBLE);addEndToken(INTERNAL_IN_JS);return firstToken;}case 121:break;case 41:{addToken(Token.ERROR_STRING_DOUBLE);}case 122:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 123:break;case 36:{addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 124:break;case 24:{yybegin(JAVASCRIPT);addToken(Token.MARKUP_TAG_DELIMITER);}case 125:break;case 53:{start=zzMarkedPos - 2;yybegin(JS_MLC);}case 126:break;case 56:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 127:break;case 52:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_JS);return firstToken;}case 128:break;case 63:{yybegin(JAVA_EXPRESSION);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 129:break;case 27:{addToken(Token.ERROR_IDENTIFIER);}case 130:break;case 73:{addToken(Token.LITERAL_BOOLEAN);}case 131:break;case 18:{yypushback(1);yybegin(INTAG);}case 132:break;case 3:{addNullToken();return firstToken;}case 133:break;case 60:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 134:break;case 43:{addToken(Token.RESERVED_WORD);}case 135:break;case 13:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 136:break;case 65:{yybegin(YYINITIAL);addToken(Token.SEPARATOR);}case 137:break;case 9:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 138:break;case 64:{addToken(Token.LITERAL_CHAR);}case 139:break;case 16:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 140:break;case 35:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addEndToken(INTERNAL_IN_JAVA_DOCCOMMENT);return firstToken;}case 141:break;case 6:{addToken(Token.DATA_TYPE);}case 142:break;case 32:{addToken(Token.SEPARATOR);}case 143:break;case 66:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 2);yybegin(INTAG_CHECK_TAG_NAME);}case 144:break;case 19:{addToken(Token.MARKUP_TAG_NAME);}case 145:break;case 11:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 146:break;case 30:{addToken(Token.ERROR_CHAR);addEndToken(INTERNAL_IN_JS);return firstToken;}case 147:break;case 55:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 148:break;case 14:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 149:break;case 15:{addToken(Token.MARKUP_TAG_DELIMITER);}case 150:break;case 31:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 151:break;case 51:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 152:break;case 47:{start=zzMarkedPos - 2;yybegin(DTD);}case 153:break;case 58:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.PREPROCESSOR);start=zzMarkedPos;}case 154:break;case 22:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE_SCRIPT);}case 155:break;case 1:{}case 156:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INATTR_SINGLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT);return firstToken;}case 1258:break;case JAVA_EXPRESSION:{addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 1259:break;case HIDDEN_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_HIDDEN_COMMENT);return firstToken;}case 1260:break;case JS_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 1261:break;case INTAG_SCRIPT:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG_SCRIPT);return firstToken;}case 1262:break;case JAVA_DOCCOMMENT:{yybegin(JAVA_EXPRESSION);addToken(start,zzEndRead,Token.COMMENT_DOCUMENTATION);addEndToken(INTERNAL_IN_JAVA_DOCCOMMENT);return firstToken;}case 1263:break;case JSP_DIRECTIVE:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_IN_JSP_DIRECTIVE);return firstToken;}case 1264:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 1265:break;case INATTR_DOUBLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT);return firstToken;}case 1266:break;case PI:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 1267:break;case JAVASCRIPT:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 1268:break;case INTAG:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 1269:break;case INTAG_CHECK_TAG_NAME:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 1270:break;case DTD:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 1271:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 1272:break;case YYINITIAL:{addNullToken();return firstToken;}case 1273:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 1274:break;case JAVA_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JAVA_MLC);return firstToken;}case 1275:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public String compile(File srcFiles[]){  String paths[]=new String[srcFiles.length];  for (int i=0; i < paths.length; i++) {    paths[i]=srcFiles[i].getAbsolutePath();  }  return compile(paths);}  }
class C{  public boolean checkSignatureValue(Key pk) throws XMLSignatureException {  if (pk == null) {    Object exArgs[]={"Didn't get a key"};    throw new XMLSignatureException("empty",exArgs);  }  try {    SignedInfo si=this.getSignedInfo();    SignatureAlgorithm sa=si.getSignatureAlgorithm();    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"signatureMethodURI = " + sa.getAlgorithmURI());      log.log(java.util.logging.Level.FINE,"jceSigAlgorithm    = " + sa.getJCEAlgorithmString());      log.log(java.util.logging.Level.FINE,"jceSigProvider     = " + sa.getJCEProviderName());      log.log(java.util.logging.Level.FINE,"PublicKey = " + pk);    }    byte sigBytes[]=null;    try {      sa.initVerify(pk);      SignerOutputStream so=new SignerOutputStream(sa);      OutputStream bos=new UnsyncBufferedOutputStream(so);      si.signInOctetStream(bos);      bos.close();      sigBytes=this.getSignatureValue();    } catch (    IOException ex) {      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,ex.getMessage(),ex);      }    }catch (    XMLSecurityException ex) {      throw ex;    }    if (!sa.verify(sigBytes)) {      log.log(java.util.logging.Level.WARNING,"Signature verification failed.");      return false;    }    return si.verify(this.followManifestsDuringValidation);  } catch (  XMLSignatureException ex) {    throw ex;  }catch (  XMLSecurityException ex) {    throw new XMLSignatureException("empty",ex);  }}  }
class C{  public Shape createInternalDropShadowRounded(final int x,final int y,final int w,final int h){  final double radius=h / 2;  final int right=x + w;  final double bottom=y + radius;  path.reset();  path.moveTo(x,bottom);  path.quadTo(x,y,x + radius,y);  path.lineTo(right - radius,y);  path.quadTo(right,y,right,bottom);  path.lineTo(right - 1,bottom);  path.quadTo(right - 2,y + 2,right - radius - 1,y + 2);  path.lineTo(x + radius + 1,y + 2);  path.quadTo(x + 2,y + 2,x + 1,bottom);  path.closePath();  return path;}  }
class C{  private void writeCategory(Category category,List<Challenge> challengeList,List<Answer> answerList){  long oldCategoryId=category.getId();  category.setId(null);  long categoryId=mCategoryDataSource.create(category);  for (int i=0; i < challengeList.size(); i++) {    Challenge challenge=challengeList.get(i);    if (challenge != null && challenge.getCategoryId() == oldCategoryId) {      challenge.setCategoryId(categoryId);      writeChallenge(challenge,answerList);      challengeList.set(i,null);    }  }}  }
class C{  public void toEPL(StringWriter writer){  writer.append("create ");  if (expressionDeclaration != null) {    expressionDeclaration.toEPL(writer);  } else {    scriptExpression.toEPL(writer);  }}  }
class C{  protected boolean isIgnoreableNamespace(Namespace namespace,NamespaceStack namespaceStack){  if (namespace.equals(Namespace.NO_NAMESPACE) || namespace.equals(Namespace.XML_NAMESPACE)) {    return true;  }  String uri=namespace.getURI();  if ((uri == null) || (uri.length() <= 0)) {    return true;  }  return namespaceStack.contains(namespace);}  }
class C{  @Override public void flush() throws IOException {  outputStream.flush();  fileStream.flush();}  }
class C{  private static void useMissile(Player player){  StackableItem projectilesItem=null;  if (player.getRangeWeapon() != null) {    projectilesItem=player.getAmmunition();  }  if (projectilesItem == null) {    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();  }  if (projectilesItem != null) {    projectilesItem.removeOne();  }}  }
class C{  public void testInjection() throws Exception {  ProtectedBean protectedBean=new ProtectedBean();  PackagePrivateBean packagePrivateBean=new PackagePrivateBean();  PrivateBean privateBean=new PrivateBean();  ConcreteBean concreteBean=new ConcreteBean();  ApplicationFactory aFactory=(ApplicationFactory)FactoryFinder.getFactory(FactoryFinder.APPLICATION_FACTORY);  aFactory.getApplication();  ApplicationAssociate associate=ApplicationAssociate.getInstance(getFacesContext().getExternalContext());  assertNotNull(associate);  InjectionProvider injectionProvider=associate.getInjectionProvider();  assertNotNull(injectionProvider);  try {    injectionProvider.inject(protectedBean);    injectionProvider.invokePostConstruct(protectedBean);    injectionProvider.invokePreDestroy(protectedBean);    injectionProvider.inject(packagePrivateBean);    injectionProvider.invokePostConstruct(packagePrivateBean);    injectionProvider.invokePreDestroy(packagePrivateBean);    injectionProvider.inject(privateBean);    injectionProvider.invokePostConstruct(privateBean);    injectionProvider.invokePreDestroy(privateBean);    injectionProvider.inject(concreteBean);    injectionProvider.invokePostConstruct(concreteBean);    injectionProvider.invokePreDestroy(concreteBean);  } catch (  Exception e) {    System.out.println(e);    e.printStackTrace();    assertTrue(false);  }  assertTrue(protectedBean.getInit());  assertTrue(protectedBean.getDestroy());  assertTrue(packagePrivateBean.getInit());  assertTrue(packagePrivateBean.getDestroy());  assertTrue(privateBean.getInit());  assertTrue(privateBean.getDestroy());  assertTrue(concreteBean.getInit());  assertTrue(concreteBean.getDestroy());}  }
class C{  public static void mergeSort(final int from,final int to,final IntComparator c,final Swapper swapper){  final int length=to - from;  if (length < MERGESORT_NO_REC) {    for (int i=from; i < to; i++) {      for (int j=i; j > from && (c.compare(j - 1,j) > 0); j--) {        swapper.swap(j,j - 1);      }    }    return;  }  int mid=(from + to) >>> 1;  mergeSort(from,mid,c,swapper);  mergeSort(mid,to,c,swapper);  if (c.compare(mid - 1,mid) <= 0)   return;  inPlaceMerge(from,mid,to,c,swapper);}  }
class C{  public LogicalRouterApi(RestClient restClient){  super(restClient);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public void sendChunk() throws IOException {  if (isLastChunk()) {    this.headerSent=false;  }  sendBytes(true);}  }
class C{  public LinkedHashSet(){  super(16,.75f,true);}  }
class C{  private static void sendRegistrationMessageToClients(Instantiator instantiator){  Cache cache=GemFireCacheImpl.getInstance();  if (cache == null) {    return;  }  byte[][] serializedInstantiators=new byte[3][];  try {    serializedInstantiators[0]=CacheServerHelper.serialize(instantiator.getClass().toString().substring(6));    serializedInstantiators[1]=CacheServerHelper.serialize(instantiator.getInstantiatedClass().toString().substring(6));{      byte[] idBytes=new byte[4];      Part.encodeInt(instantiator.getId(),idBytes);      serializedInstantiators[2]=idBytes;    }  } catch (  IOException e) {    if (logger.isDebugEnabled()) {      logger.debug("IOException encountered while serializing instantiators using CacheServerHelper.serialize() method");    }  }  ClientInstantiatorMessage clientInstantiatorMessage=new ClientInstantiatorMessage(EnumListenerEvent.AFTER_REGISTER_INSTANTIATOR,serializedInstantiators,(ClientProxyMembershipID)instantiator.getContext(),(EventID)instantiator.getEventId());  CacheClientNotifier.routeClientMessage(clientInstantiatorMessage);}  }
class C{  public boolean isDeleteAccounts(){  return deleteAccounts;}  }
class C{  private static String toCanonicalName(String className){  className=StringUtils.deleteWhitespace(className);  if (className == null) {    throw new NullPointerException("className must not be null.");  } else   if (className.endsWith("[]")) {    final StringBuilder classNameBuffer=new StringBuilder();    while (className.endsWith("[]")) {      className=className.substring(0,className.length() - 2);      classNameBuffer.append("[");    }    final String abbreviation=abbreviationMap.get(className);    if (abbreviation != null) {      classNameBuffer.append(abbreviation);    } else {      classNameBuffer.append("L").append(className).append(";");    }    className=classNameBuffer.toString();  }  return className;}  }
class C{  public void addStreamIdsExt(GphotoStreamId streamIdsExt){  getStreamIdsExt().add(streamIdsExt);}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){  if (listener == null || propertyName == null) {    return;  }  listener=this.map.extract(listener);  if (listener != null) {    this.map.add(propertyName,listener);  }}  }
class C{  protected String pplxToPPL(String cityName){  if (cityName != null) {    Matcher matcher=pattern.matcher(cityName);    if (matcher.find()) {      return matcher.group(1);    } else {      return cityName;    }  } else {    return cityName;  }}  }
class C{  public void removeActionListener(ActionListener l){  listenerList.remove(ActionListener.class,l);}  }
class C{  public static Sentence convert(Sentence s){  Sentence result=null;  Sentence nnfSentence=ConvertToNNF.convert(s);  Sentence cnfSentence=DistributeOrOverAnd.distribute(nnfSentence);  result=cnfSentence;  return result;}  }
class C{  public List<Object> buildCommandLineParts(SBJob job,File workingDir,FilePathMapper filePathMapper) throws BindingException {  logger.info("Building command line parts...");  SBCommandLineTool commandLineTool=(SBCommandLineTool)job.getApp();  List<SBInputPort> inputPorts=commandLineTool.getInputs();  List<Object> result=new LinkedList<>();  try {    List<Object> baseCmds=commandLineTool.getBaseCmd(job);    result.addAll(baseCmds);    List<SBCommandLinePart> commandLineParts=new LinkedList<>();    if (commandLineTool.hasArguments()) {      for (int i=0; i < commandLineTool.getArguments().size(); i++) {        Object argBinding=commandLineTool.getArguments().get(i);        if (argBinding instanceof String) {          SBCommandLinePart commandLinePart=new SBCommandLinePart.Builder(0,false).part(argBinding).keyValue("").build();          commandLinePart.setArgsArrayOrder(i);          commandLineParts.add(commandLinePart);          continue;        }        Object argValue=commandLineTool.getArgument(job,argBinding);        Map<String,Object> emptySchema=new HashMap<>();        SBCommandLinePart commandLinePart=buildCommandLinePart(job,null,argBinding,argValue,emptySchema,null);        if (commandLinePart != null) {          commandLinePart.setArgsArrayOrder(i);          commandLineParts.add(commandLinePart);        }      }    }    for (    SBInputPort inputPort : inputPorts) {      String key=inputPort.getId();      Object schema=inputPort.getSchema();      SBCommandLinePart part=buildCommandLinePart(job,inputPort,inputPort.getInputBinding(),job.getInputs().get(SBSchemaHelper.normalizeId(key)),schema,key);      if (part != null) {        commandLineParts.add(part);      }    }    Collections.sort(commandLineParts,new SBCommandLinePart.CommandLinePartComparator());    for (    SBCommandLinePart part : commandLineParts) {      List<Object> flattenedObjects=part.flatten();      for (      Object obj : flattenedObjects) {        result.add(obj);      }    }  } catch (  SBExpressionException e) {    logger.error("Failed to build command line.",e);    throw new BindingException("Failed to build command line.",e);  }  return result;}  }
class C{  private void skipTags() throws IOException, XmlPullParserException {  if (parser.getEventType() != XmlPullParser.START_TAG) {    throw new IllegalStateException("Not skipping from a start tag.");  }  int depth=1;  while (depth != 0) {switch (parser.next()) {case XmlPullParser.END_TAG:      depth--;    break;case XmlPullParser.START_TAG:  depth++;break;}}}  }
class C{  private static boolean hasMsm8660Property(){  String soc=WLReflect.getSystemProperties("ro.soc.name");  return "msm8660".equals(soc) || "unkown".equals(soc);}  }
class C{  public HorizontalDrawingInfoImpl(double diagramStart,double diagramMinWidth,DoubleConverter widthConverter,double lifelineWidth,double lifelineXPadding,int lifelineCount,int lastTick,Collection<ContainerPadding> paddings){  containerLeftPadding=new HashMap<Container,Double>((int)(paddings.size() / 0.7));  containerRightPadding=new HashMap<Container,Double>((int)(paddings.size() / 0.7));  horizontalDrawingInfos=new LifelineHorizontalDrawingInfo[lifelineCount];  this.diagramStart=diagramStart;  double maxPadding=0;  double[][] leftPaddings=new double[lifelineCount][];  double[][] rightPaddings=new double[lifelineCount][];  for (int i=0; i < lifelineCount; i++) {    PaddingInfo paddingInfo=getPaddings(i,true,lastTick,paddings);    leftPaddings[i]=paddingInfo.paddings;    maxPadding=Math.max(maxPadding,paddingInfo.maxPadding);    paddingInfo=getPaddings(i,false,lastTick,paddings);    rightPaddings[i]=paddingInfo.paddings;    maxPadding=Math.max(maxPadding,paddingInfo.maxPadding);  }  lifelineWidth+=maxPadding * 2;  double diagramWidth=lifelineWidth * lifelineCount + lifelineXPadding * (lifelineCount + 1);  if (diagramWidth < diagramMinWidth) {    diagramWidth=diagramMinWidth;    if (lifelineCount > 0) {      lifelineWidth=(diagramWidth - lifelineXPadding * (lifelineCount + 1)) / lifelineCount;    }  }  diagramWidth=widthConverter.convert(diagramWidth);  double lifelineHeadLeftStart=(diagramWidth - (lifelineWidth * lifelineCount + lifelineXPadding * (lifelineCount - 1))) / 2.0;  this.diagramWidth=diagramWidth;  for (int i=0; i < horizontalDrawingInfos.length; i++) {    horizontalDrawingInfos[i]=new LifelineHorizontalDrawingInfoImpl(leftPaddings[i],rightPaddings[i],lifelineHeadLeftStart + (lifelineWidth + lifelineXPadding) * i,lifelineHeadLeftStart + (lifelineWidth + lifelineXPadding) * i + lifelineWidth);  }}  }
class C{  public void findYourself(DcwRecordFile rf){  mycolumn=rf.whatColumn(columnname);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.021 -0500",hash_original_method="214300EBA90AB0F87C7DC4ACF56AF3C7",hash_generated_method="F399CF64715CBBD01F5D1839B7643A13") public BasicLineParser(){  this(null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.COMPLEX_TYPE__FEATURES:    return features != null && !features.isEmpty();case TypesPackage.COMPLEX_TYPE__SUPER_TYPES:  return superTypes != null && !superTypes.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.574 -0400",hash_original_method="3C14C11CC4C50B1E61366E684AE79952",hash_generated_method="21BA6282799D8C2FE0BC710B31353081") static String pathToCookiePath(String path){  if (path == null) {    return "/";  }  int lastSlash=path.lastIndexOf('/');  return path.substring(0,lastSlash + 1);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void check(){  if (!hasAnimVal) {    if (baseVal == null) {      baseVal=new BaseSVGPointList();    }    baseVal.revalidate();    if (baseVal.missing) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MISSING,null);    }    if (baseVal.malformed) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,baseVal.getValueAsString());    }  }}  }
class C{  private void run(){  delegate.run();}  }
class C{  @Override public void run(Updatable<Void> imageExposureUpdatable,ImageSaver imageSaver) throws InterruptedException, CameraAccessException, CameraCaptureSessionClosedException, ResourceAcquisitionFailedException {  try (FrameServer.Session session=mFrameServer.createExclusiveSession()){    try (ImageStream imageStream=mImageReader.createPreallocatedStream(mBurst.size())){      if (mWaitForAFConvergence) {        waitForAFConvergence(session);      }      if (mWaitForAEConvergence) {        waitForAEConvergence(session);      }      captureBurst(session,imageStream,imageExposureUpdatable,imageSaver);    }  finally {      resetRepeating(session);    }  }  finally {    imageSaver.close();  }}  }
class C{  protected void reportStatementSql(String sql,String methodCall){  _reportSql((DriverSpy.StatementUsageWarn ? StatementSqlWarning : "") + sql,methodCall);}  }
class C{  @SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){  mOvalDimmedLayer=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_oval_dimmed_layer,DEFAULT_OVAL_DIMMED_LAYER);  mDimmedColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_dimmed_color,getResources().getColor(R.color.ucrop_color_default_dimmed));  mDimmedStrokePaint.setColor(mDimmedColor);  mDimmedStrokePaint.setStyle(Paint.Style.STROKE);  mDimmedStrokePaint.setStrokeWidth(1);  initCropFrameStyle(a);  mShowCropFrame=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_show_frame,DEFAULT_SHOW_CROP_FRAME);  initCropGridStyle(a);  mShowCropGrid=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_show_grid,DEFAULT_SHOW_CROP_GRID);}  }
class C{  public static int moveAll(Resource from,Resource to){  List<Attachment> attachments=Attachment.findByContainer(from);  for (  Attachment attachment : attachments) {    attachment.moveTo(to);  }  return attachments.size();}  }
class C{  public static Query toQuery(Object o,boolean duplicate,Query defaultValue){  try {    return toQuery(o,duplicate);  } catch (  PageException e) {    return defaultValue;  }}  }
class C{  public boolean isPayFrom(){  Object oo=get_Value(COLUMNNAME_IsPayFrom);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean hasEndPointWithPort(final PoolImpl pool,final int port){  EndpointManager endpointManager=pool.getEndpointManager();  final Set<ServerLocation> servers=endpointManager.getEndpointMap().keySet();  return servers.stream().anyMatch(null);}  }
class C{  private BoxCoxWrapper(DataWrapper data,Parameters params){  DataModelList list=data.getDataModelList();  DataModelList convertedList=new DataModelList();  DataModelList dataSets=data.getDataModelList();  for (int i=0; i < list.size(); i++) {    DataModel selectedModel=dataSets.get(i);    if (!(selectedModel instanceof DataSet)) {      continue;    }    DataModel model=yeoJohnson((DataSet)selectedModel,params.getDouble("lambda",0));    convertedList.add(model);    setSourceGraph(data.getSourceGraph());  }  setDataModelList(convertedList);  LogDataUtils.logDataModelList("Result data from an AR residual calculation.",getDataModelList());}  }
class C{  public final boolean isSelectionRectangular(){  return rectSelect;}  }
class C{  public boolean isModified(){  return true;}  }
class C{  public void removeSprite() throws IOException {  print("removeSprite",null);}  }
class C{  protected void connectionUp(){  if (connectedStatus != null) {    connectedStatus.setText(STATUS_CONNECTED);    connectedStatus.setBackground(Color.green);  }}  }
class C{  private boolean sendNotification(OMAInfo omaInfo,DownloadInfo downloadInfo,String statusMessage){  if (omaInfo == null)   return false;  if (omaInfo.isValueEmpty(OMA_INSTALL_NOTIFY_URI))   return false;  PostStatusTask task=new PostStatusTask(omaInfo,downloadInfo,statusMessage);  task.execute();  return true;}  }
class C{  private JCas runTest(String aLanguage,String aVariant,String aText,Object... aExtraParams) throws Exception {  System.setProperty(ResourceObjectProviderBase.PROP_REPO_OFFLINE,"true");  AssumeResource.assumeResource(StanfordPosTagger.class,"tagger",aLanguage,aVariant);  AnalysisEngineDescription segmenter;  if ("zh".equals(aLanguage)) {    segmenter=createEngineDescription(LanguageToolSegmenter.class);  } else {    segmenter=createEngineDescription(StanfordSegmenter.class);  }  Object[] params=new Object[]{StanfordPosTagger.PARAM_VARIANT,aVariant,StanfordPosTagger.PARAM_PRINT_TAGSET,true};  params=ArrayUtils.addAll(params,aExtraParams);  AnalysisEngineDescription parser=createEngineDescription(StanfordPosTagger.class,params);  AnalysisEngine engine=createEngine(createEngineDescription(segmenter,parser));  JCas jcas=engine.newJCas();  jcas.setDocumentLanguage(aLanguage);  jcas.setDocumentText(aText);  engine.process(jcas);  return jcas;}  }
class C{  public static byte parseByte(String s){  s=trimPlusSign(s);  return Byte.parseByte(s);}  }
class C{  public void respond(ResponseCode code,byte[] payload,int contentFormat){  Response response=new Response(code);  response.setPayload(payload);  response.getOptions().setContentFormat(contentFormat);  respond(response);}  }
class C{  protected void executeQueryEpilog(QueryException queryException) throws SQLException {  stopTimeoutTask();  if (isTimedout) {    isTimedout=false;    queryException=new QueryException("Query timed out",1317,"JZ0002",queryException);  }  if (queryException == null) {    return;  }  if (queryException.getSqlState() != null && queryException.getSqlState().startsWith("08")) {    close();  }  logger.error("error executing query",queryException);  ExceptionMapper.throwException(queryException,connection,this);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public byte[] buildByteArray(boolean trim){  return trim ? Arrays.copyOf(out.getBytes(),out.size()) : out.getBytes();}  }
class C{  public static double[][] readDouble2D(){  int m=StdIn.readInt();  int n=StdIn.readInt();  double[][] a=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      a[i][j]=StdIn.readDouble();    }  }  return a;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean isVarying(Object o){  if (o == null || !o.getClass().isArray() || !o.getClass().getComponentType().isArray() || !o.getClass().getComponentType().getComponentType().isPrimitive()) {    return false;  }  int oLength=Array.getLength(o);  if (oLength < 2) {    return false;  }  int flen=Array.getLength(Array.get(o,0));  for (int i=1; i < oLength; i++) {    if (Array.getLength(Array.get(o,i)) != flen) {      return true;    }  }  return false;}  }
class C{  public Action remove(int i){  return (Action)m_actions.remove(i);}  }
class C{  public PieData findStageData(){  ArrayList<Entry> entries=new ArrayList<>();  ArrayList<String> labels=new ArrayList<>();  int numbers[]={0,0,0,0,0,0};  int totalNumber=0;  for (int i=0; i <= 5; i++) {    numbers[i]=mCompletionDataSource.findByUserAndStageAndCategory(mUser,i + 1,mCategoryId).size();    totalNumber+=numbers[i];  }  if (totalNumber > 0) {    for (int i=0; i <= 5; i++) {      entries.add(new Entry(numbers[i] != 0 ? numbers[i] : nullValue(totalNumber),i));      labels.add("" + (i + 1));    }    PieDataSet dataset=new PieDataSet(entries,"");    mSettings.applyDataSetSettings(dataset,StatisticType.TYPE_STAGE);    PieData data=new PieData(labels,dataset);    mSettings.applyDataSettings(data);    return data;  } else   return null;}  }
class C{  public static void main(String[] args) throws Exception {  createSimple();}  }
class C{  public void shutdown(){  Enumeration appenders=logger.getAllAppenders();  while (appenders.hasMoreElements()) {    Appender appender=(Appender)appenders.nextElement();    appender.close();  }}  }
class C{  public ElementType type(){  return theType;}  }
class C{  public boolean isDeclaredAbstract(){  return declaredAbstract;}  }
class C{  public void saveProperty(String propertyName,String value,boolean startup){  throwReadOnly();}  }
class C{  protected ChildState createChildState(View v){  return new ChildState(v);}  }
class C{  public void toggle(ConsoleRenderer renderer,String... contexts){synchronized (LOCK) {    stack.add(new StackEntry(renderer,contexts));    LOCK.notify();  }}  }
class C{  public int delete(DatabaseConnection databaseConnection,T data,ObjectCache objectCache) throws SQLException {  try {    Object[] args=getFieldObjects(data);    int rowC=databaseConnection.delete(statement,args,argFieldTypes);    logger.debug("delete data with statement '{}' and {} args, changed {} rows",statement,args.length,rowC);    if (args.length > 0) {      logger.trace("delete arguments: {}",(Object)args);    }    if (rowC > 0 && objectCache != null) {      Object id=idField.extractJavaFieldToSqlArgValue(data);      objectCache.remove(clazz,id);    }    return rowC;  } catch (  SQLException e) {    throw SqlExceptionUtil.create("Unable to run delete stmt on object " + data + ": "+ statement,e);  }}  }
class C{  public static <T>ClassAccessor<T> of(Class<T> type,PrefabValues prefabValues,boolean ignoreAnnotationFailure){  return new ClassAccessor<>(type,prefabValues,SupportedAnnotations.values(),ignoreAnnotationFailure);}  }
class C{  public Key minKey(){  if (n == 0)   throw new NoSuchElementException("Priority queue underflow");  return keys[pq[1]];}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static <S>ServiceLoader<S> load(Class<S> service){  return ServiceLoader.load(service,Thread.currentThread().getContextClassLoader());}  }
class C{  public void broadcast(TunerConfigurationEvent event){  for (  Listener<TunerConfigurationEvent> listener : mConfigurationChangeListeners) {    listener.receive(event);  }}  }
class C{  public StoredField(String name,String value){  super(name,value,TYPE);}  }
class C{  private String resolve(String value){  if (this.beanFactory != null && this.beanFactory instanceof ConfigurableBeanFactory) {    return ((ConfigurableBeanFactory)this.beanFactory).resolveEmbeddedValue(value);  }  return value;}  }
class C{  @Override public void run(){  log().info("Heartbeat started!");  while (true) {    try {      running=true;      long start=System.currentTimeMillis();      aorta.tick();      for (      HeartbeatListener artery : aorta)       artery.onHeartbeat(skipped_beats);      long end=System.currentTimeMillis();      long tick_time=end - start;      skipped_beats=0;      if (tick_time < heart_rate) {        Thread.sleep(heart_rate - tick_time);        consecutive=0;      } else       if (tick_time > heart_rate) {        skipped_beats=(int)(tick_time / heart_rate);        consecutive++;        if (consecutive < 3) {          log().warn(String.format("Heartbeat skipped %s beats, (took %sms of max %sms)",skipped_beats,tick_time,heart_rate));        } else         if (consecutive == 3) {          log().warn("Too many consecutive skipped Heartbeats, suppressing log.");        }        Thread.sleep(tick_time % heart_rate);      }      if (aorta.size() == 0) {        running=false;        log().info("No listeners in the queue, we've lost 'er, doc...");        return;      }    } catch (    Exception e) {    }  }}  }
class C{  public static IgniteKernal gridxx(UUID locNodeId){  IgniteNamedInstance dfltGrid0=dfltGrid;  if (dfltGrid0 != null) {    IgniteKernal g=dfltGrid0.grid();    if (g != null && g.getLocalNodeId().equals(locNodeId))     return g;  }  for (  IgniteNamedInstance grid : grids.values()) {    IgniteKernal g=grid.grid();    if (g != null && g.getLocalNodeId().equals(locNodeId))     return g;  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.967 -0500",hash_original_method="17EF9A3AE37B7BA0C102396D80392A03",hash_generated_method="FAE582568400939A0014202099B768BE") public boolean equals(Object that){  if (that.getClass() != this.getClass())   return false;  SIPDate other=(SIPDate)that;  return this.wkday == other.wkday && this.day == other.day && this.month == other.month && this.year == other.year && this.hour == other.hour && this.minute == other.minute && this.second == other.second;}  }
class C{  public static void updateCrl(String asciiCrl) throws GeneralSecurityException {  X509CRL crl=X509Utils.loadCrl(asciiCrl);  X509Utils.verifyCrl(getRoot(),getCrl(),crl,clock.nowUtc().toDate());  TmchCrl.set(asciiCrl);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void doSetStyle(final Layer layer) throws IOException {  if (layer instanceof StyleLayer) {    final StyleLayer styleLayer=(StyleLayer)layer;    final Style style=SimpleStyleConfigurator.showDialog(this.getTable().getShell(),layer);    if (style != null) {      styleLayer.setStyle(style);    }  }}  }
class C{  public void applyAuditing(AbstractAuditable auditable){  Date currentDate=new Date();  if (auditable.isNew()) {    auditable.setCreatedBy((User)getSession().load(User.class,ApplicationThreadLocals.getUserId()));    auditable.setCreatedDate(currentDate);  }  auditable.setLastModifiedBy((User)getSession().load(User.class,ApplicationThreadLocals.getUserId()));  auditable.setLastModifiedDate(currentDate);}  }
class C{  public BaseCheckBox(SafeHtml label,DirectionEstimator directionEstimator){  this();  setDirectionEstimator(directionEstimator);  setHTML(label.asString());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tTurns off all checks - use with caution!\n" + "\tTurning them off assumes that data is purely numeric, doesn't\n" + "\tcontain any missing values, and has a nominal class. Turning them\n"+ "\toff also means that no header information will be stored if the\n"+ "\tmachine is linear. Finally, it also assumes that no instance has\n"+ "\ta weight equal to 0.\n"+ "\t(default: checks on)","no-checks",0,"-no-checks"));  result.addElement(new Option("\tThe file to initialize the filter with (optional).","F",1,"-F <filename>"));  result.addElement(new Option("\tThe class index for the file to initialize with,\n" + "\tFirst and last are valid (optional, default: last).","C",1,"-C <num>"));  result.addElement(new Option("\tThe Kernel to use.\n" + "\t(default: weka.classifiers.functions.supportVector.PolyKernel)","K",1,"-K <classname and parameters>"));  result.addElement(new Option("\tDefines a factor for the kernel.\n" + "\t\t- RBFKernel: a factor for gamma\n" + "\t\t\tStandardize: 1/(2*N)\n"+ "\t\t\tNormalize..: 6/N\n"+ "\tAvailable parameters are:\n"+ "\t\tN for # of instances, A for # of attributes\n"+ "\t(default: 1)","kernel-factor",0,"-kernel-factor"));  result.addElement(new Option("\tThe Filter used for preprocessing (use weka.filters.AllFilter\n" + "\tto disable preprocessing).\n" + "\t(default: " + Center.class.getName() + ")","P",1,"-P <classname and parameters>"));  result.addAll(Collections.list(super.listOptions()));  result.addElement(new Option("","",0,"\nOptions specific to kernel " + getKernel().getClass().getName() + ":"));  result.addAll(Collections.list(((OptionHandler)getKernel()).listOptions()));  if (getPreprocessing() instanceof OptionHandler) {    result.addElement(new Option("","",0,"\nOptions specific to preprocessing filter " + getPreprocessing().getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)getPreprocessing()).listOptions()));  }  return result.elements();}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,byte[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public BufferedImage assemble(BufferedImage extending,BufferedImage extender,int posX,int posY,Dimension nrRaster,boolean scale){  BufferedImage result=extending;  int vertDist=result.getHeight() / (int)nrRaster.getHeight();  int horDist=result.getWidth() / (int)nrRaster.getWidth();  if (!scale) {    horDist=extender.getWidth();    vertDist=extender.getHeight();  }  Graphics g=result.getGraphics();  g.drawImage(extender,posX * horDist,posY * vertDist,horDist,vertDist,null);  return result;}  }
class C{  private synchronized void registerShutdownHookIfNeeded(){  if (shutdownHook != null) {    return;  }  shutdownHook=new SpanReceiverShutdownHook();  Runtime.getRuntime().addShutdownHook(shutdownHook);  LOG.trace(toString() + ": registered shutdown hook.");}  }
class C{  private ByteBuffer[] split(ByteBuffer original,int pos){  byte[] data=new byte[pos];  original.get(data);  ByteBuffer[] res=new ByteBuffer[2];  res[0]=ByteBuffer.wrap(data);  data=new byte[original.remaining()];  original.get(data);  res[1]=ByteBuffer.wrap(data);  return res;}  }
class C{  public final long readLong() throws IOException {  mPosition+=8;  d.readFully(w,0,8);  return (long)(w[7]) << 56 | (long)(w[6] & 0xff) << 48 | (long)(w[5] & 0xff) << 40 | (long)(w[4] & 0xff) << 32 | (long)(w[3] & 0xff) << 24 | (long)(w[2] & 0xff) << 16 | (long)(w[1] & 0xff) << 8 | (long)(w[0] & 0xff);}  }
class C{  public static void notify(final String title,final String text){  notify(null,title,text,NotifierTheme.YELLOW_THEME);}  }
class C{  public void tryToInviteQueuedGroupChatParticipantInvitations(String chatId){  mImOperationHandler.post(new GroupChatInviteQueuedParticipantsTask(chatId,mChatService,this));}  }
class C{  public void waitAndCloseWithHandshake(){  schedLock.lockWithHandshake();  while (!open) {    schedLock.waitWithHandshake();  }  open=false;  schedLock.unlock();}  }
class C{  public static Header buildServerHeader() throws ParseException {  if (sServerHeaderValue == null) {    sServerHeaderValue=HEADER_EXT_TO_EXT_SERVER + UA_HEADER_OMA_SIMPLE_IM + TerminalInfo.getClientInfo();  }  return HEADER_FACTORY.createHeader(ServerHeader.NAME,sServerHeaderValue);}  }
class C{  public int length(){  return buf.length();}  }
class C{  private static void initInstance(){  instance=new WordList();  instance.readFromResources();}  }
class C{  @Override public void toData(DataOutput out) throws IOException {  out.writeByte(_operation.getEventCode());  int dataSerializerCount=this.serializedDataSerializer.length;  out.writeInt(dataSerializerCount);  for (int i=0; i < dataSerializerCount; i++) {    DataSerializer.writeByteArray(this.serializedDataSerializer[i],out);  }  DataSerializer.writeObject(_membershipId,out);  DataSerializer.writeObject(_eventIdentifier,out);}  }
class C{  public static void transposeM(double[] mTrans,int mTransOffset,double[] m,int mOffset){  for (int i=0; i < 4; i++) {    int mBase=i * 4 + mOffset;    mTrans[i + mTransOffset]=m[mBase];    mTrans[i + 4 + mTransOffset]=m[mBase + 1];    mTrans[i + 8 + mTransOffset]=m[mBase + 2];    mTrans[i + 12 + mTransOffset]=m[mBase + 3];  }}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[] trees,int nbatches) throws Exception {  int ncycles=trees.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(trees[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  public boolean interiorContains(S2LatLng ll){  return (lat.interiorContains(ll.lat().radians()) && lng.interiorContains(ll.lng().radians()));}  }
class C{  public static IStatus validateImportDeclaration(String name,String sourceLevel,String complianceLevel){  if (name == null || name.length() == 0) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_import_nullImport,null);  }  if (name.charAt(name.length() - 1) == '*') {    if (name.charAt(name.length() - 2) == '.') {      return validatePackageName(name.substring(0,name.length() - 2),sourceLevel,complianceLevel);    } else {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_import_unqualifiedImport,null);    }  }  return validatePackageName(name,sourceLevel,complianceLevel);}  }
class C{  public static String thatthose(final int quantity){  if (quantity == 1) {    return "that";  } else {    return "those";  }}  }
class C{  public TextureAtlas packTexturesFromResources(int atlasWidth,int altasHeight,int padding,boolean useCompresison,int[] resourceIDs){  resIDsToStreams(resourceIDs);  return createAtlas(atlasWidth,altasHeight,padding,useCompresison);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  private void readChangeLogRowNode(XmlPullParser parser,ChangeLog changeLog,String versionName) throws Exception {  if (parser == null)   return;  parser.require(XmlPullParser.START_TAG,null,TAG_CHANGELOGTEXT);  String tag=parser.getName();  if (tag.equals(TAG_CHANGELOGTEXT)) {    ChangeLogRow row=new ChangeLogRow();    row.setVersionName(versionName);    String changeLogTextTitle=parser.getAttributeValue(null,ATTRIBUTE_CHANGETEXTTITLE);    if (changeLogTextTitle != null)     row.setChangeTextTitle(changeLogTextTitle);    String bulletedList=parser.getAttributeValue(null,ATTRIBUTE_BULLETEDLIST);    if (bulletedList != null) {      if (bulletedList.equals("true")) {        row.setBulletedList(true);      } else {        row.setBulletedList(false);      }    } else {      row.setBulletedList(super.bulletedList);    }    if (parser.next() == XmlPullParser.TEXT) {      String changeLogText=parser.getText();      if (changeLogText == null)       throw new ChangeLogException("ChangeLogText required in changeLogText node");      row.parseChangeText(changeLogText);      parser.nextTag();    }    changeLog.addRow(row);    Log.d(TAG,"Added row:" + row.toString());  }  parser.require(XmlPullParser.END_TAG,null,TAG_CHANGELOGTEXT);}  }
class C{  public PacketReceiver(DatagramSocket socket){  running=true;  this.socket=socket;}  }
class C{  int order(){  return 0;}  }
class C{  public ServerPrepareResult read(ReadPacketFetcher packetFetcher) throws IOException, QueryException {  Buffer buffer=packetFetcher.getReusableBuffer();  byte firstByte=buffer.getByteAt(0);  if (firstByte == Packet.ERROR) {    ErrorPacket ep=new ErrorPacket(buffer);    String message=ep.getMessage();    if (1054 == ep.getErrorNumber()) {      throw new PrepareException("Error preparing query: " + message + "\nIf column exists but type cannot be identified (example 'select ? `field1` from dual'). "+ "Use CAST function to solve this problem (example 'select CAST(? as integer) `field1` from dual')",ep.getErrorNumber(),ep.getSqlState());    } else {      throw new PrepareException("Error preparing query: " + message,ep.getErrorNumber(),ep.getSqlState());    }  }  if (firstByte == Packet.OK) {    buffer.readByte();    final int statementId=buffer.readInt();    final int numColumns=buffer.readShort() & 0xffff;    final int numParams=buffer.readShort() & 0xffff;    ColumnInformation[] params=new ColumnInformation[numParams];    ColumnInformation[] columns=new ColumnInformation[numColumns];    if (numParams > 0) {      for (int i=0; i < numParams; i++) {        params[i]=new ColumnInformation(packetFetcher.getPacket());      }      if (numColumns > 0) {        protocol.skipEofPacket();        for (int i=0; i < numColumns; i++) {          columns[i]=new ColumnInformation(packetFetcher.getPacket());        }      }      protocol.readEofPacket();    } else {      if (numColumns > 0) {        for (int i=0; i < numColumns; i++) {          columns[i]=new ColumnInformation(packetFetcher.getPacket());        }        protocol.readEofPacket();      } else {        buffer.readByte();        protocol.setHasWarnings(buffer.readShort() > 0);      }    }    ServerPrepareResult serverPrepareResult=new ServerPrepareResult(sql,statementId,columns,params,protocol);    if (protocol.getOptions().cachePrepStmts && sql != null && sql.length() < protocol.getOptions().prepStmtCacheSqlLimit) {      String key=new StringBuilder(protocol.getDatabase()).append("-").append(sql).toString();      ServerPrepareResult cachedServerPrepareResult=protocol.addPrepareInCache(key,serverPrepareResult);      return cachedServerPrepareResult != null ? cachedServerPrepareResult : serverPrepareResult;    }    return serverPrepareResult;  } else {    throw new QueryException("Unexpected packet returned by server, first byte " + firstByte);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRESH_NEWS_CACHE'";  db.execSQL(sql);}  }
class C{  @Override public void teardown(){}  }
class C{  public static ActiveMQBuffer dynamicBuffer(final byte[] bytes){  ActiveMQBuffer buff=dynamicBuffer(bytes.length);  buff.writeBytes(bytes);  return buff;}  }
class C{  public static void replicateIndex(String destHostName,String destCore,String sourceHost,String sourceCore) throws Exception {  String fullReplication="http://%s:%s/solr/%s/replication?command=fetchindex&masterUrl=http://%s:%s/solr/%s";  String replicator=String.format(fullReplication,destHostName,DEFAULT_SOLR_PORT,destCore,sourceHost,DEFAULT_SOLR_PORT,sourceCore);  String result=executeSolrCommand(replicator);  logger.info(result);}  }
class C{  @Override public String toString(){  return toString(",");}  }
class C{  public static String showRow(byte[] row,int nbytes,int rown,int dx,int ox){  StringBuilder sb=new StringBuilder();  sb.append(String.format("r=%d",rown));  if (dx != 1 || ox != 0)   sb.append(String.format("(dx:%d,ox:%d)",dx,ox));  int n=nbytes - 1;  if (n > 9)   n=9;  sb.append(n == nbytes - 1 ? String.format("[") : String.format(" b(%d/%d)=[",n,nbytes - 1));  for (int i=0; i <= n; i++) {    sb.append(String.format("%3d",row[i] & 0xff));    sb.append(i == 0 ? "|" : (i < n ? " " : ""));  }  return sb.append("]").toString();}  }
class C{  public static void resetOnOperator(){  log.info("Reset to factory defaults : onOperator");  onOperatorCreate=null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.406 -0500",hash_original_method="6BBA9708D71F9933B89758033290956F",hash_generated_method="A539C6711159A989B7494C21DF10217B") static public void assertEquals(byte expected,byte actual){  assertEquals(null,expected,actual);}  }
class C{  public non_terminal dot_before_nt(){  symbol sym;  sym=symbol_after_dot();  if (sym != null && sym.is_non_term())   return (non_terminal)sym; else   return null;}  }
class C{  public static MiscType createISClaw(){  MiscType misc=new MiscType();  misc.techLevel.put(3071,TechConstants.T_IS_ADVANCED);  misc.name="Claw";  misc.setInternalName("ISClaw");  misc.tonnage=TONNAGE_VARIABLE;  misc.criticals=CRITICALS_VARIABLE;  misc.cost=COST_VARIABLE;  misc.flags=misc.flags.or(F_HAND_WEAPON).or(F_MECH_EQUIPMENT);  misc.subType|=S_CLAW;  misc.bv=BV_VARIABLE;  misc.introDate=3050;  misc.techLevel.put(3050,misc.techLevel.get(3071));  misc.techLevel.put(3110,TechConstants.T_IS_TW_NON_BOX);  misc.techRating=RATING_B;  misc.availRating=new int[]{RATING_X,RATING_F,RATING_E};  return misc;}  }
class C{  public static long multiplyCap(long a,long b){  long u=a * b;  if (((a | b) >>> 31) != 0) {    if (u / a != b) {      return Long.MAX_VALUE;    }  }  return u;}  }
class C{  public boolean isEmulator(){  return mSerialNumber.matches(RE_EMULATOR_SN);}  }
class C{  protected static boolean isDependencySatisfied(int lookupStream,int[] permutation,DependencyGraph dependencyGraph){  for (  Map.Entry<Integer,SortedSet<Integer>> entry : dependencyGraph.getDependencies().entrySet()) {    int target=entry.getKey();    int positionTarget=positionOf(target,lookupStream,permutation);    if (positionTarget == -1) {      throw new IllegalArgumentException("Target dependency not found in permutation for target " + target + " and permutation "+ Arrays.toString(permutation)+ " and lookup stream "+ lookupStream);    }    for (    int dependency : entry.getValue()) {      int positonDep=positionOf(dependency,lookupStream,permutation);      if (positonDep == -1) {        throw new IllegalArgumentException("Dependency not found in permutation for dependency " + dependency + " and permutation "+ Arrays.toString(permutation)+ " and lookup stream "+ lookupStream);      }      if (positonDep > positionTarget) {        return false;      }    }  }  return true;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  public ReaderToTextPane(Reader input,JTextPane output,Color color){  StyledDocument doc;  Style style;  setDaemon(true);  m_Color=color;  m_Input=new LineNumberReader(input);  m_Output=output;  doc=m_Output.getStyledDocument();  style=StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);  style=doc.addStyle(getStyleName(),style);  StyleConstants.setFontFamily(style,"monospaced");  StyleConstants.setForeground(style,m_Color);}  }
class C{  private void fixUnicodeErrors() throws IOException, RSSException {  tempFile=File.createTempFile(".rsslib4jbug2fix",".tmp");  tempFile.deleteOnExit();  FileOutputStream fw=new FileOutputStream(tempFile);  BufferedInputStream bufIn=new BufferedInputStream(in);  if (sage.Sage.EMBEDDED) {    BufferedOutputStream out=new BufferedOutputStream(fw);    int c1, c2;    int c=bufIn.read();    while (c != -1) {      if (c <= 127) {        out.write(c);      } else {switch (c >> 4) {case 12:case 13:          c1=bufIn.read();        if (c1 >= 0 && (c1 & 0xC0) == 0x80) {          out.write(c);          out.write(c1);        }      break;case 14:    c1=bufIn.read();  if (c1 >= 0 && (c1 & 0xC0) == 0x80) {    c2=bufIn.read();    if (c2 >= 0 && (c2 & 0xC0) == 0x80) {      out.write(c);      out.write(c1);      out.write(c2);    }  }break;case 15:bufIn.read();bufIn.read();bufIn.read();default :break;}}c=bufIn.read();}out.flush();out.close();bufIn.close();} else {Reader reader=new InputStreamReader(bufIn,"UTF-8");BufferedWriter out=new BufferedWriter(new OutputStreamWriter(fw,"UTF-8"));int c=reader.read();while (c != -1) {if ((c >= 0x0020 && c <= 0xD7FF) || c == 0x000A || c == 0x0009 || c == 0x000D || (c >= 0xE000 && c <= 0xFFFD) || (c >= 0x10000 && c <= 0x10ffff)) {out.write(c);}{c=reader.read();}}out.flush();out.close();reader.close();}fw.close();setXmlResource(tempFile.getAbsolutePath());}  }
class C{  public static IndicesQueryBuilder indicesQuery(QueryBuilder queryBuilder,String... indices){  return new IndicesQueryBuilder(queryBuilder,indices);}  }
class C{  public Object clone(){  return (new PropertiesLookup(m_columnNames,m_data));}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  boolean addChild(O child){  if (children == EMPTY) {    children=new Object[5];    children[0]=child;    numc=1;    return true;  }  for (int i=0; i < numc; i++) {    if (child.equals(children[i])) {      return false;    }  }  if (children.length == numc) {    children=Arrays.copyOf(children,(children.length << 1) + 1);  }  children[numc++]=child;  return true;}  }
class C{  public double[][] testPoints(EvolutionState state,int benchmark,int threadnum,double[][] trainpoints){switch (benchmark) {case KOZA1:case KOZA2:case KOZA3:    return trainpoints;case NGUYEN1:case NGUYEN2:case NGUYEN3:case NGUYEN4:case NGUYEN5:case NGUYEN6:case NGUYEN7:case NGUYEN8:case NGUYEN9:case NGUYEN10:  return trainpoints;case PAGIE1:case PAGIE2:return trainpoints;case KORNS1:case KORNS2:case KORNS3:case KORNS4:case KORNS5:case KORNS6:case KORNS7:case KORNS8:case KORNS9:case KORNS10:case KORNS11:case KORNS12:case KORNS13:case KORNS14:case KORNS15:return generateRandomSamples(state,new double[]{-50,-50,-50,-50,-50},new double[]{50,50,50,50,50},10000,threadnum);case KEIJZER1:return generateIntervalSpacedSamples(state,-1,1,0.001,threadnum);case KEIJZER2:return generateIntervalSpacedSamples(state,-2,2,0.001,threadnum);case KEIJZER3:return generateIntervalSpacedSamples(state,-3,3,0.001,threadnum);case KEIJZER4:return generateIntervalSpacedSamples(state,0.05,10.05,0.05,threadnum);case KEIJZER5:return generateRandomSamples(state,new double[]{-1,1,-1},new double[]{1,2,1},10000,threadnum);case KEIJZER6:return generateIntervalSpacedSamples(state,1,120,1,threadnum);case KEIJZER7:return generateIntervalSpacedSamples(state,1,100,0.1,threadnum);case KEIJZER8:case KEIJZER9:return generateIntervalSpacedSamples(state,0,100,0.1,threadnum);case KEIJZER10:return generateIntervalSpacedSamples(state,new double[]{0,0},new double[]{1,1},new double[]{0.01,0.01},threadnum);case KEIJZER11:case KEIJZER12:case KEIJZER13:case KEIJZER14:case KEIJZER15:return generateIntervalSpacedSamples(state,new double[]{-3.0,-3.0},new double[]{3.0,3.0},new double[]{0.01,0.01},threadnum);case VLADISLAVLEVA1:return generateIntervalSpacedSamples(state,new double[]{-0.2,-0.2},new double[]{4.2,4.2},new double[]{0.1,0.1},threadnum);case VLADISLAVLEVA2:return generateIntervalSpacedSamples(state,-0.5,10.5,0.05,threadnum);case VLADISLAVLEVA3:return generateIntervalSpacedSamples(state,new double[]{-0.5,-0.5},new double[]{10.5,10.5},new double[]{0.05,0.5},threadnum);case VLADISLAVLEVA4:return generateRandomSamples(state,new double[]{-0.25,-0.25,-0.25,-0.25,-0.25},new double[]{6.35,6.35,6.35,6.35,6.35},5000,threadnum);case VLADISLAVLEVA5:return generateIntervalSpacedSamples(state,new double[]{-0.05,0.95,-0.05},new double[]{2.1,2.05,2.1},new double[]{0.15,0.15,0.1},threadnum);case VLADISLAVLEVA6:return generateIntervalSpacedSamples(state,new double[]{-0.05,-0.05},new double[]{6.05,6.05},new double[]{0.02,0.02},threadnum);case VLADISLAVLEVA7:return generateRandomSamples(state,new double[]{-0.25,-0.25},new double[]{6.35,6.35},1000,threadnum);case VLADISLAVLEVA8:return generateIntervalSpacedSamples(state,new double[]{-0.25,-0.25},new double[]{6.35,6.35},new double[]{0.2,0.2},threadnum);default :return null;}}  }
class C{  public Accumulator(){}  }
class C{  private void notificationRemoved(Notification removed){  int offset=0;  Iterator<Notification> it=displayed.iterator();  while (it.hasNext()) {    Notification n=it.next();    if (removed == n) {      offset=n.getHeight() + VERTICAL_MARGIN;      it.remove();    } else     if (offset > 0) {      n.moveVertical(verticalMoveDirection * offset);    }  }  Iterator<Notification> itQueue=queue.iterator();  while (itQueue.hasNext() && displayed.size() < maxItems) {    Notification next=itQueue.next();    itQueue.remove();    showNotification(next);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SeaGlassRadioButtonUI();}  }
class C{  private void resizeTo(int suppliers,List<JLabel> messageLabels){  while (messageLabels.size() > suppliers) {    JLabel label=messageLabels.remove(0);    this.indicators.remove(label);  }  while (messageLabels.size() < suppliers) {    JLabel label=new JLabel();    label.setAlignmentX(Component.LEFT_ALIGNMENT);    label.setBorder(BorderFactory.createEmptyBorder(0,0,0,5));    messageLabels.add(label);    this.indicators.add(label);  }}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj) throws RuntimeException {  FileObject fo1=(FileObject)expectedObj;  FileObject fo2=(FileObject)actualObj;  InputStream is1=null;  InputStream is2=null;  ByteArrayOutputStream bs1=null;  ByteArrayOutputStream bs2=null;  try {    is1=fo1.openStream();    is2=fo2.openStream();    bs1=new ByteArrayOutputStream();    bs2=new ByteArrayOutputStream();    Tools.copyStreamSynchronously(is1,bs1,true);    Tools.copyStreamSynchronously(is2,bs2,true);    byte[] fileData1=bs1.toByteArray();    byte[] fileData2=bs2.toByteArray();    RapidAssert.assertArrayEquals("file object data",fileData1,fileData2);  } catch (  OperatorException e) {    throw new RuntimeException("Stream Error");  }catch (  IOException e) {    throw new RuntimeException("Stream Error");  } finally {    if (is1 != null) {      try {        is1.close();      } catch (      IOException e) {      }    }    if (is2 != null) {      try {        is2.close();      } catch (      IOException e) {      }    }    if (bs1 != null) {      try {        bs1.close();      } catch (      IOException e) {      }    }    if (bs2 != null) {      try {        bs2.close();      } catch (      IOException e) {      }    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UXTAB");  translateAll(environment,instruction,"UXTAB",instructions);}  }
class C{  public static byte[] removeAllInstancesOf(byte[] inputScript,byte[] chunkToRemove){  UnsafeByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(inputScript.length);  int cursor=0;  while (cursor < inputScript.length) {    boolean skip=equalsRange(inputScript,cursor,chunkToRemove);    int opcode=inputScript[cursor++] & 0xFF;    int additionalBytes=0;    if (opcode >= 0 && opcode < OP_PUSHDATA1) {      additionalBytes=opcode;    } else     if (opcode == OP_PUSHDATA1) {      additionalBytes=(0xFF & inputScript[cursor]) + 1;    } else     if (opcode == OP_PUSHDATA2) {      additionalBytes=((0xFF & inputScript[cursor]) | ((0xFF & inputScript[cursor + 1]) << 8)) + 2;    } else     if (opcode == OP_PUSHDATA4) {      additionalBytes=((0xFF & inputScript[cursor]) | ((0xFF & inputScript[cursor + 1]) << 8) | ((0xFF & inputScript[cursor + 1]) << 16)| ((0xFF & inputScript[cursor + 1]) << 24)) + 4;    }    if (!skip) {      try {        bos.write(opcode);        bos.write(Arrays.copyOfRange(inputScript,cursor,cursor + additionalBytes));      } catch (      IOException e) {        throw new RuntimeException(e);      }    }    cursor+=additionalBytes;  }  return bos.toByteArray();}  }
class C{  @Override public boolean equals(final Object o){  return getName().equals(((Parser)o).getName());}  }
class C{  public OpusWriter(IChunkUploader uploader){  this.uploader=uploader;  if (streamSerialNumber == 0)   streamSerialNumber=new Random().nextInt();  dataBuffer=new byte[65565];  dataBufferPtr=0;  headerBuffer=new byte[255];  headerBufferPtr=0;  pageCount=0;  packetCount=0;  granulepos=0;  this.sampleRate=SpeechConfiguration.SAMPLE_RATE;  this.frameSize=SpeechConfiguration.FRAME_SIZE;}  }
class C{  public PLRenderer(PLIView view,PLIScene scene){  super();  this.setInternalView(view);  this.setInternalScene(scene);}  }
class C{  @Override public Edge readEdge(final InputStream inputStream,final Function<Attachable<Edge>,Edge> edgeAttachMethod) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.509 -0500",hash_original_method="04ED664127B5DCE8177E313009734B8D",hash_generated_method="99F8393036AA0731DEF10D2000CDEAD2") void clearAllCookies(){  if (mDataBase == null) {    return;  }  mDataBase.clearCookies();}  }
class C{  public LiveRef(ObjID objID,Endpoint endpoint,boolean isLocal){  ep=endpoint;  id=objID;  this.isLocal=isLocal;}  }
class C{  public PresenceUpdateHandler(ImplDiscordAPI api){  super(api,true,"PRESENCE_UPDATE");}  }
class C{  public void enableNaming(){  invoke(embeddedEnableNaming);}  }
class C{  public void visitEntities(EntityVisitor visitor,BoundingBox vbox,float scale){  if (!entities.isEmpty()) {    if (!isSorted) {      Collections.sort(entities,new EntityComparator());      isSorted=true;    }    VisibilityTest vtest=new VisibilityTest(bb,vbox);    for (    DefaultMapEntity entity : entities) {      if (entity.getViewInfo().getMinVisibleScale() > scale)       break;      if (vtest.isVisible(entity))       entity.accept(visitor);    }  }  if (children != null) {    float vMin=(splitAtLat ? vbox.getLatMin() : vbox.getLonMin());    float vMax=(splitAtLat ? vbox.getLatMax() : vbox.getLonMax());    if (vMin <= splitValue)     children[0].visitEntities(visitor,vbox,scale);    if (vMax >= splitValue)     children[1].visitEntities(visitor,vbox,scale);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SIF__ELSE:    return getElse();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Boolean isAutoExpand(){  return autoExpand;}  }
class C{  public double[] keys(){  double[] keys=new double[size()];  double[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public PDFPaintDelayQueue(PDFWriter pdf,PDFImageDelayQueue imageDelayQueue){  this.pdf=pdf;  this.paintList=new LinkedList<Entry>();  this.pageMatrix=new AffineTransform();}  }
class C{  private boolean verifyEntry(final String entry,final int keyCode){  final String work;  if (keyCode == SWT.DEL) {    work=StringUtil.removeCharAt(this.text.getText(),this.text.getCaretPosition());  } else   if (keyCode == SWT.BS && this.text.getCaretPosition() == 0) {    work=StringUtil.removeCharAt(this.text.getText(),this.text.getCaretPosition() - 1);  } else   if (keyCode == 0) {    work=entry;  } else {    work=StringUtil.insertString(this.text.getText(),entry,this.text.getCaretPosition());  }  try {    Double.parseDouble(work.replace(',','.'));  } catch (  final NumberFormatException nfe) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.918 -0500",hash_original_method="7DFB2B07729CC5CD070DB2D2031A339C",hash_generated_method="869441714ECC050145171561C4601151") public static boolean isBluetoothVoiceDialingEnabled(Context context){  return context.getResources().getBoolean(com.android.internal.R.bool.config_bluetooth_sco_off_call);}  }
class C{  @Override public String format(Date date,String mask){  return format(date,mask,null);}  }
class C{  public void onGoToSydney(View view){  if (!checkReady()) {    return;  }  mStreetViewPanorama.setPosition(SYDNEY);}  }
class C{  public int hashCode(){  return (256 * diagonal) + row;}  }
class C{  public void trim(){  if (count_ > nomEntries_) {    updateTheta();    rebuild(keys_.length);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.687 -0500",hash_original_method="4C773697C01488587E0CD1FEDC292579",hash_generated_method="D29815CDD3E63F07AFEC088B2A7B7EC8") public POP3MessageInfo(int num,String uid){  number=num;  size=-1;  identifier=uid;}  }
class C{  public Boolean isValueIsReadonly(){  return valueIsReadonly;}  }
class C{  public DisconnectedBufferOptions(){}  }
class C{  public PathBuilder add(String element){  currentPath=new Path(currentPath,element);  return this;}  }
class C{  void test(){  String something="";}  }
class C{  protected PduHeaders parseHeaders(ByteArrayInputStream pduDataStream){  if (pduDataStream == null) {    return null;  }  boolean keepParsing=true;  PduHeaders headers=new PduHeaders();  while (keepParsing && (pduDataStream.available() > 0)) {    pduDataStream.mark(1);    int headerField=extractByteValue(pduDataStream);    if ((headerField >= TEXT_MIN) && (headerField <= TEXT_MAX)) {      pduDataStream.reset();      byte[] bVal=parseWapString(pduDataStream,TYPE_TEXT_STRING);      if (LOCAL_LOGV) {        Log.v(LOG_TAG,"TextHeader: " + new String(bVal));      }      continue;    }switch (headerField) {case PduHeaders.MESSAGE_TYPE:{        int messageType=extractByteValue(pduDataStream);switch (messageType) {case PduHeaders.MESSAGE_TYPE_FORWARD_REQ:case PduHeaders.MESSAGE_TYPE_FORWARD_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_STORE_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_STORE_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_DESCR:case PduHeaders.MESSAGE_TYPE_DELETE_REQ:case PduHeaders.MESSAGE_TYPE_DELETE_CONF:case PduHeaders.MESSAGE_TYPE_CANCEL_REQ:case PduHeaders.MESSAGE_TYPE_CANCEL_CONF:          return null;      }      try {        headers.setOctet(messageType,headerField);      } catch (      InvalidHeaderValueException e) {        log("Set invalid Octet value: " + messageType + " into the header filed: "+ headerField);        return null;      }catch (      RuntimeException e) {        log(headerField + "is not Octet header field!");        return null;      }      break;    }case PduHeaders.REPORT_ALLOWED:case PduHeaders.ADAPTATION_ALLOWED:case PduHeaders.DELIVERY_REPORT:case PduHeaders.DRM_CONTENT:case PduHeaders.DISTRIBUTION_INDICATOR:case PduHeaders.QUOTAS:case PduHeaders.READ_REPORT:case PduHeaders.STORE:case PduHeaders.STORED:case PduHeaders.TOTALS:case PduHeaders.SENDER_VISIBILITY:case PduHeaders.READ_STATUS:case PduHeaders.CANCEL_STATUS:case PduHeaders.PRIORITY:case PduHeaders.STATUS:case PduHeaders.REPLY_CHARGING:case PduHeaders.MM_STATE:case PduHeaders.RECOMMENDED_RETRIEVAL_MODE:case PduHeaders.CONTENT_CLASS:case PduHeaders.RETRIEVE_STATUS:case PduHeaders.STORE_STATUS:case PduHeaders.RESPONSE_STATUS:{    int value=extractByteValue(pduDataStream);    try {      headers.setOctet(value,headerField);    } catch (    InvalidHeaderValueException e) {      log("Set invalid Octet value: " + value + " into the header filed: "+ headerField);      return null;    }catch (    RuntimeException e) {      log(headerField + "is not Octet header field!");      return null;    }    break;  }case PduHeaders.DATE:case PduHeaders.REPLY_CHARGING_SIZE:case PduHeaders.MESSAGE_SIZE:{  try {    long value=parseLongInteger(pduDataStream);    headers.setLongInteger(value,headerField);  } catch (  RuntimeException e) {    log(headerField + "is not Long-Integer header field!");    return null;  }  break;}case PduHeaders.MESSAGE_COUNT:case PduHeaders.START:case PduHeaders.LIMIT:{try {  long value=parseIntegerValue(pduDataStream);  headers.setLongInteger(value,headerField);} catch (RuntimeException e) {  log(headerField + "is not Long-Integer header field!");  return null;}break;}case PduHeaders.TRANSACTION_ID:case PduHeaders.REPLY_CHARGING_ID:case PduHeaders.AUX_APPLIC_ID:case PduHeaders.APPLIC_ID:case PduHeaders.REPLY_APPLIC_ID:case PduHeaders.MESSAGE_ID:case PduHeaders.REPLACE_ID:case PduHeaders.CANCEL_ID:case PduHeaders.CONTENT_LOCATION:{byte[] value=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (null != value) {try {  headers.setTextString(value,headerField);} catch (NullPointerException e) {  log("null pointer error!");}catch (RuntimeException e) {  log(headerField + "is not Text-String header field!");  return null;}}break;}case PduHeaders.SUBJECT:case PduHeaders.RECOMMENDED_RETRIEVAL_MODE_TEXT:case PduHeaders.RETRIEVE_TEXT:case PduHeaders.STATUS_TEXT:case PduHeaders.STORE_STATUS_TEXT:case PduHeaders.RESPONSE_TEXT:{EncodedStringValue value=parseEncodedStringValue(pduDataStream);if (null != value) {try {headers.setEncodedStringValue(value,headerField);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.BCC:case PduHeaders.CC:case PduHeaders.TO:{EncodedStringValue value=parseEncodedStringValue(pduDataStream);if (null != value) {byte[] address=value.getTextString();if (null != address) {String str=new String(address);int endIndex=str.indexOf("/");if (endIndex > 0) {str=str.substring(0,endIndex);}try {value.setTextString(str.getBytes());} catch (NullPointerException e) {log("null pointer error!");return null;}}try {headers.appendEncodedStringValue(value,headerField);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.DELIVERY_TIME:case PduHeaders.EXPIRY:case PduHeaders.REPLY_CHARGING_DEADLINE:{parseValueLength(pduDataStream);int token=extractByteValue(pduDataStream);long timeValue;try {timeValue=parseLongInteger(pduDataStream);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}if (PduHeaders.VALUE_RELATIVE_TOKEN == token) {timeValue=System.currentTimeMillis() / 1000 + timeValue;}try {headers.setLongInteger(timeValue,headerField);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}break;}case PduHeaders.FROM:{EncodedStringValue from=null;parseValueLength(pduDataStream);int fromToken=extractByteValue(pduDataStream);if (PduHeaders.FROM_ADDRESS_PRESENT_TOKEN == fromToken) {from=parseEncodedStringValue(pduDataStream);if (null != from) {byte[] address=from.getTextString();if (null != address) {String str=new String(address);int endIndex=str.indexOf("/");if (endIndex > 0) {str=str.substring(0,endIndex);}try {from.setTextString(str.getBytes());} catch (NullPointerException e) {log("null pointer error!");return null;}}}} else {try {from=new EncodedStringValue(PduHeaders.FROM_INSERT_ADDRESS_TOKEN_STR.getBytes());} catch (NullPointerException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}try {headers.setEncodedStringValue(from,PduHeaders.FROM);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}break;}case PduHeaders.MESSAGE_CLASS:{pduDataStream.mark(1);int messageClass=extractByteValue(pduDataStream);if (messageClass >= PduHeaders.MESSAGE_CLASS_PERSONAL) {try {if (PduHeaders.MESSAGE_CLASS_PERSONAL == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_PERSONAL_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_ADVERTISEMENT == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_ADVERTISEMENT_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_INFORMATIONAL == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_INFORMATIONAL_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_AUTO == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_AUTO_STR.getBytes(),PduHeaders.MESSAGE_CLASS);}} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}} else {pduDataStream.reset();byte[] messageClassString=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (null != messageClassString) {try {headers.setTextString(messageClassString,PduHeaders.MESSAGE_CLASS);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}}}break;}case PduHeaders.MMS_VERSION:{int version=parseShortInteger(pduDataStream);try {headers.setOctet(version,PduHeaders.MMS_VERSION);} catch (InvalidHeaderValueException e) {log("Set invalid Octet value: " + version + " into the header filed: "+ headerField);return null;}catch (RuntimeException e) {log(headerField + "is not Octet header field!");return null;}break;}case PduHeaders.PREVIOUSLY_SENT_BY:{parseValueLength(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}EncodedStringValue previouslySentBy=parseEncodedStringValue(pduDataStream);if (null != previouslySentBy) {try {headers.setEncodedStringValue(previouslySentBy,PduHeaders.PREVIOUSLY_SENT_BY);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.PREVIOUSLY_SENT_DATE:{parseValueLength(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}try {long perviouslySentDate=parseLongInteger(pduDataStream);headers.setLongInteger(perviouslySentDate,PduHeaders.PREVIOUSLY_SENT_DATE);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}break;}case PduHeaders.MM_FLAGS:{parseValueLength(pduDataStream);extractByteValue(pduDataStream);parseEncodedStringValue(pduDataStream);break;}case PduHeaders.MBOX_TOTALS:case PduHeaders.MBOX_QUOTAS:{parseValueLength(pduDataStream);extractByteValue(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}break;}case PduHeaders.ELEMENT_DESCRIPTOR:{parseContentType(pduDataStream,null);break;}case PduHeaders.CONTENT_TYPE:{HashMap<Integer,Object> map=new HashMap<Integer,Object>();byte[] contentType=parseContentType(pduDataStream,map);if (null != contentType) {try {headers.setTextString(contentType,PduHeaders.CONTENT_TYPE);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}}mStartParam=(byte[])map.get(PduPart.P_START);mTypeParam=(byte[])map.get(PduPart.P_TYPE);keepParsing=false;break;}case PduHeaders.CONTENT:case PduHeaders.ADDITIONAL_HEADERS:case PduHeaders.ATTRIBUTES:default :{log("Unknown header");}}}return headers;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  WildcardArgumentWithUpperBound(Type[] upperBounds){  super(ParameterBound.forTypes(upperBounds));}  }
class C{  public static VOTechnicalService toVOTechnicalProduct(TechnicalProduct tProd,List<ParameterDefinition> platformParamterDefinitions,List<Event> platformEvents,LocalizerFacade facade,boolean excludeNonConfigurableParameterDefinitions){  return toVOTechnicalProduct(tProd,platformParamterDefinitions,platformEvents,facade,excludeNonConfigurableParameterDefinitions,PerformanceHint.ALL_FIELDS);}  }
class C{  public NamedWindowConsumerLatchSpin(NamedWindowConsumerLatchFactory factory){  super(null,null);  this.factory=factory;  isCompleted=true;  earlier=null;}  }
class C{  protected void configurePlugin(ReplicatorPlugin plugin,PluginContext context) throws ReplicatorException {  ReplicatorRuntime.configurePlugin(plugin,context);}  }
class C{  public APIConnection(){}  }
class C{  public boolean isCustomFontEnabled(){  return null == customFontEnabled ? _customFontEnabled : customFontEnabled.get();}  }
class C{  public boolean empty(){  return m_Head == null;}  }
class C{  public static void main(String[] args){  if (args.length > 0 && args[0].charAt(0) != '-') {    Class<?> cls=ELKIServiceRegistry.findImplementation(AbstractApplication.class,args[0]);    if (cls != null) {      try {        Method m=cls.getMethod("main",String[].class);        Object a=Arrays.copyOfRange(args,1,args.length);        m.invoke(null,a);      } catch (      InvocationTargetException e) {        LoggingUtil.exception(e.getCause());      }catch (      Exception e) {        LoggingUtil.exception(e);      }      return;    }  }  try {    Method m=DEFAULT_APPLICATION.getMethod("main",String[].class);    m.invoke(null,(Object)args);  } catch (  Exception e) {    LoggingUtil.exception(e);  }}  }
class C{  public boolean doNew(){  return Console.doNew(null,false);}  }
class C{  private boolean updateFields(WWindowStatus ws,DataRow dr){  boolean error=false;  Enumeration en=null;  DataField[] df=dr.getFieldArray();  DataField f;  for (int i=0; i < df.length; i++) {    f=df[i];    String cn=f.getColumn();    GridField GridField=ws.curTab.getField(cn);    if (!GridField.isDisplayed(false))     continue;    if (GridField.getDisplayType() == DisplayType.Button)     continue;    if (GridField != null && GridField.isEditable(true)) {      String value=f.getVal();      if (value.length() == 0)       value=null;      if (value != null && (value.equals("-1")) && GridField.isLookup())       value=null;      if (GridField.getDisplayType() == DisplayType.YesNo) {        if (value != null && (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")))         value=value.toLowerCase();      }      Object dbValue=GridField.getValue();      boolean fieldError=false;      String columnName=GridField.getColumnName();      if (dbValue == null && value == null)       continue; else       if (dbValue != null && value == null)       ws.curTab.setValue(GridField,null); else       if (dbValue == null && value != null) {        fieldError=!setFieldValue(ws,GridField,value);      } else       if (dbValue.equals(value))       continue; else       fieldError=!setFieldValue(ws,GridField,value);      if (!error && fieldError) {        error=true;      }    }  }  return error;}  }
class C{  public static boolean isBuildBelow(int buildVersion){  if (Build.VERSION.SDK_INT < buildVersion)   return true; else   return false;}  }
class C{  public GeoConvexPolygon(final PlanetModel planetModel,final List<GeoPoint> pointList,final List<GeoPolygon> holes){  super(planetModel);  this.points=pointList;  this.holes=holes;  this.isInternalEdges=new BitSet();  done(false);}  }
class C{  public void writeFieldId(int fieldId){  int fieldOff=out.position() - start;  schemaId=BinaryUtils.updateSchemaId(schemaId,fieldId);  schema.push(fieldId,fieldOff);  fieldCnt++;}  }
class C{  public void log(NamedBean source){  LOGGER.debug("eventSource=" + source.getBeanName() + "&eventId = "+ getEventId());}  }
class C{  boolean isInternalURL(String serviceAccessURL){  if (serviceAccessURL == null || serviceAccessURL.length() == 0) {    return false;  }  return isMatch(serviceAccessURL,applicationBean.getServerBaseUrl()) || isMatch(serviceAccessURL,applicationBean.getServerBaseUrlHttps());}  }
class C{  public Vertex size(Vertex source,Vertex type){  Collection<Relationship> elements=source.getRelationships(type);  if (elements == null) {    return source.getNetwork().createVertex(0);  }  return source.getNetwork().createVertex(elements.size());}  }
class C{  public ArrayList<Integer> mutate(ArrayList<Integer> genome){  ArrayList<Integer> result=new ArrayList<Integer>(this.genomeLength);  for (  Integer integer : genome) {    result.add(integer);  }  for (int i=0; i < numberOfMutationsToMutant; i++) {    ArrayList<Integer> strip=permutator.permutate(genomeLength);    int pos1=strip.get(0) - 1;    int pos2=strip.get(1) - 1;    Collections.swap(result,pos1,pos2);  }  return result;}  }
class C{  private void executeMove(String[] args) throws IOException, ServiceException, DocumentListException {  if (args.length == 3) {    printDocumentEntry(documentList.moveObjectToFolder(args[1],args[2]));  } else {    printMessage(COMMAND_HELP_MOVE);  }}  }
class C{  public boolean isPolygon(){  return shapeType == SHAPE_TYPE_POLYGON;}  }
class C{  @Inline public final void linearScan(LinearScan scanner){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(allowScanning);  if (initialRegion.isZero())   return;  Address start=initialRegion;  while (!start.isZero()) {    scanRegion(scanner,start);    start=getNextRegion(start);  }}  }
class C{  public Builder withHeartbeatInterval(Duration heartbeatInterval){  Assert.argNot(heartbeatInterval.isNegative() || heartbeatInterval.isZero(),"sessionTimeout must be positive");  Assert.argNot(heartbeatInterval.toMillis() >= electionTimeout.toMillis(),"heartbeatInterval must be less than electionTimeout");  this.heartbeatInterval=Assert.notNull(heartbeatInterval,"heartbeatInterval");  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void draw(final ExecutionUnit process,final Graphics2D g2,final ProcessRendererModel rendererModel,final boolean printing){  if (!visualizer.isActive()) {    return;  }  WorkflowAnnotation selected=model.getSelected();  if (selected != null) {    if (selected.getProcess().equals(process)) {      if (editPane == null) {        Graphics2D g2P=(Graphics2D)g2.create();        drawer.drawAnnotation(selected,g2P,printing);        g2P.dispose();      } else {        Rectangle2D loc=selected.getLocation();        g2.setColor(Color.BLACK);        g2.draw(new Rectangle2D.Double(loc.getX() - 1,loc.getY() - 1,editPane.getBounds().getWidth() * (1 / rendererModel.getZoomFactor()) + 1,editPane.getBounds().getHeight() * (1 / rendererModel.getZoomFactor()) + 1));      }    }  }}  }
class C{  public void paintTileLoading(Graphics g){  if (tileLoadingImage == null) {    paintLoadingText(g);  } else {    paintLoadingImage(g);  }}  }
class C{  public Source<Float> fromNegativeInfinityToPositiveInfinity(){  return Compositions.weightWithValues(Floats.fromNegativeInfinityToPositiveInfinity(),Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY,Float.MAX_VALUE);}  }
class C{  public void unregisterClientInterest(String regionName,List keysOfInterest,boolean isClosing,ClientProxyMembershipID membershipID,boolean keepalive){  if (logger.isDebugEnabled()) {    logger.debug("CacheClientNotifier: Client {} unregistering interest in: {} -> {}",membershipID,regionName,keysOfInterest);  }  CacheClientProxy proxy=getClientProxy(membershipID);  if (proxy != null) {    proxy.setKeepAlive(keepalive);    proxy.unregisterClientInterest(regionName,keysOfInterest,isClosing);  }}  }
class C{  RunStatistics(String tableName){  this.tableName=tableName;  totals.info.put(Stat.TABLE,tableName);  totals.info.put(Stat.ITERATION,"total");  totals.info.put(Stat.JOB,"all");}  }
class C{  public boolean isReportInactive(){  return reportInactive;}  }
class C{  public void runContributingProcs(RoundEnvironment re){  if (!onProcInterator) {    Set<TypeElement> emptyTypeElements=Collections.emptySet();    while (innerIter.hasNext()) {      ProcessorState ps=innerIter.next();      if (ps.contributed)       callProcessor(ps.processor,emptyTypeElements,re);    }  }}  }
class C{  private boolean isReconnectionAllowed(){  return !done && !connection.isConnected() && connection.isReconnectionAllowed();}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TFUNCTION__AST_ELEMENT:    setAstElement((EObject)null);  return;case TypesPackage.TFUNCTION__EXTERNAL:setExternal(EXTERNAL_EDEFAULT);return;case TypesPackage.TFUNCTION__FPARS:getFpars().clear();return;case TypesPackage.TFUNCTION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)null);return;case TypesPackage.TFUNCTION__TYPE_VARS:getTypeVars().clear();return;case TypesPackage.TFUNCTION__DECLARED_THIS_TYPE:setDeclaredThisType((TypeRef)null);return;case TypesPackage.TFUNCTION__DECLARED_ASYNC:setDeclaredAsync(DECLARED_ASYNC_EDEFAULT);return;case TypesPackage.TFUNCTION__CONSTRUCTOR:setConstructor(CONSTRUCTOR_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void emitPackage(DocComment comment){  xml.append("\n<packageRec name='");  xml.append(comment.getFullname());  xml.append("' fullname='");  xml.append(comment.getFullname());  xml.append("'>");  String desc=comment.getDescription();  if (desc != null)   appendTag("description",comment.getDescription());  emitTags(comment.getAllTags());  xml.append("\n</packageRec>");}  }
class C{  protected SecretKey engineGenerateSecret(KeySpec keySpec) throws InvalidKeySpecException {  try {    if (keySpec instanceof DESedeKeySpec) {      return new DESedeKey(((DESedeKeySpec)keySpec).getKey());    }    if (keySpec instanceof SecretKeySpec) {      return new DESedeKey(((SecretKeySpec)keySpec).getEncoded());    }    throw new InvalidKeySpecException("Inappropriate key specification");  } catch (  InvalidKeyException e) {    throw new InvalidKeySpecException(e.getMessage());  }}  }
class C{  public DfuServiceInitiator(final String deviceAddress){  this.deviceAddress=deviceAddress;}  }
class C{  public V remove(Object key){  return doRemove(key,null);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int origlength=s.readInt();  int elements=s.readInt();  int length=(int)(elements * loadFactor) + (elements / 20) + 3;  if (length > elements && (length & 1) == 0)   length--;  if (origlength > 0 && length > origlength)   length=origlength;  table=new Entry[length];  count=0;  for (; elements > 0; elements--) {    Object key=s.readObject();    Object value=s.readObject();    put(key,value);  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  Contract contract=(Contract)super.clone();  List<Tradestrategy> tradestrategies=new ArrayList<Tradestrategy>(0);  contract.setTradestrategies(tradestrategies);  List<TradePosition> tradePositions=new ArrayList<TradePosition>(0);  contract.setTradePositions(tradePositions);  return contract;}  }
class C{  public CarrierPlanReader(Carriers carriers){  super();  this.carriers=carriers;  this.setValidating(false);}  }
class C{  @Override public int read() throws IOException {  int b=this.in.read();  if (b == '.' && this.last[0] == '\r' && this.last[1] == '\n') {    b=this.in.read();  }  this.last[0]=this.last[1];  this.last[1]=b;  return b;}  }
class C{  protected CastImpl(){  super();}  }
class C{  public SchedulePolicyRestRep create(URI tenantId,PolicyParam input){  SchedulePolicyResp element=client.post(SchedulePolicyResp.class,input,PathConstants.SCHEDULE_POLICIES_BY_TENANT_URL,tenantId);  return get(element.getId());}  }
class C{  AbstractMethod(TypeReference declaringClass,MemberReference memRef,short modifiers,TypeReference[] exceptionTypes,Atom signature,RVMAnnotation[] annotations,RVMAnnotation[][] parameterAnnotations,Object annotationDefault){  super(declaringClass,memRef,modifiers,exceptionTypes,signature,annotations,parameterAnnotations,annotationDefault);}  }
class C{  public static int staticNextInt(double mean){synchronized (shared) {    shared.setMean(mean);    return shared.nextInt();  }}  }
class C{  default boolean doesDirtySave(){  return true;}  }
class C{  public boolean isReadOnly(){  return readOnly;}  }
class C{  public OMGraphic drawFeature(VPFFeatureWarehouse warehouse,double dpplat,double dpplon,LatLonPoint ll1,LatLonPoint ll2,List<Object> node,String featureType,int primID){  if (warehouse != null) {    double ll1lat=ll1.getY();    double ll1lon=ll1.getX();    double ll2lat=ll2.getY();    double ll2lon=ll2.getX();    CoordFloatString coords=(CoordFloatString)node.get(coordColumn);    double lat=coords.getYasFloat(0);    double lon=coords.getXasFloat(0);    if ((lat > ll2lat) && (lat < ll1lat) && (lon > ll1lon)&& (lon < ll2lon)) {      return warehouse.createNode(covtable,this,node,lat,lon,isEntityNode,featureType,primID);    }  }  return null;}  }
class C{  public static java.lang.String valueOf(char[] data,int offset,int count){  return null;}  }
class C{  public List<Vertex> findAll(){  return new ArrayList<Vertex>(getVerticies());}  }
class C{  public Notifications owner(Object owner){  this.owner=Utils.getWindow(owner);  return this;}  }
class C{  SubMap(ConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){  Comparator<? super K> cmp=map.comparator;  if (fromKey != null && toKey != null && cpr(cmp,fromKey,toKey) > 0)   throw new IllegalArgumentException("inconsistent range");  this.m=map;  this.lo=fromKey;  this.hi=toKey;  this.loInclusive=fromInclusive;  this.hiInclusive=toInclusive;  this.isDescending=isDescending;}  }
class C{  public NecronomiconEnchantmentRitual(String unlocalizedName,int bookType,float requiredEnergy,EnchantmentData enchantment,Object... offerings){  this(unlocalizedName,bookType,-1,requiredEnergy,enchantment,offerings);}  }
class C{  public static float max(float a,float b,float c){  return max(max(a,b),c);}  }
class C{  public synchronized void sort(int columnIndex,boolean ascending){  if (m_Model != null)   m_Model.sort(columnIndex,ascending);}  }
class C{  protected void buildTree(int[][][] sortedIndices,double[][][] weights,Instances data,double totalWeight,double[] classProbs,Instances header,double minNum,double minVariance,int depth,int maxDepth) throws Exception {  m_Info=header;  if (data.classAttribute().isNumeric()) {    m_HoldOutDist=new double[2];  } else {    m_HoldOutDist=new double[data.numClasses()];  }  int helpIndex=0;  if (data.classIndex() == 0) {    helpIndex=1;  }  if (sortedIndices[0][helpIndex].length == 0) {    if (data.classAttribute().isNumeric()) {      m_Distribution=new double[2];    } else {      m_Distribution=new double[data.numClasses()];    }    m_ClassProbs=null;    sortedIndices[0]=null;    weights[0]=null;    return;  }  double priorVar=0;  if (data.classAttribute().isNumeric()) {    double totalSum=0, totalSumSquared=0, totalSumOfWeights=0;    for (int i=0; i < sortedIndices[0][helpIndex].length; i++) {      Instance inst=data.instance(sortedIndices[0][helpIndex][i]);      totalSum+=inst.classValue() * weights[0][helpIndex][i];      totalSumSquared+=inst.classValue() * inst.classValue() * weights[0][helpIndex][i];      totalSumOfWeights+=weights[0][helpIndex][i];    }    priorVar=singleVariance(totalSum,totalSumSquared,totalSumOfWeights);  }  m_ClassProbs=new double[classProbs.length];  System.arraycopy(classProbs,0,m_ClassProbs,0,classProbs.length);  if ((totalWeight < (2 * minNum)) || (data.classAttribute().isNominal() && Utils.eq(m_ClassProbs[Utils.maxIndex(m_ClassProbs)],Utils.sum(m_ClassProbs))) || (data.classAttribute().isNumeric() && ((priorVar / totalWeight) < minVariance))|| ((m_MaxDepth >= 0) && (depth >= maxDepth))) {    m_Attribute=-1;    if (data.classAttribute().isNominal()) {      m_Distribution=new double[m_ClassProbs.length];      for (int i=0; i < m_ClassProbs.length; i++) {        m_Distribution[i]=m_ClassProbs[i];      }      doSmoothing();      Utils.normalize(m_ClassProbs);    } else {      m_Distribution=new double[2];      m_Distribution[0]=priorVar;      m_Distribution[1]=totalWeight;    }    sortedIndices[0]=null;    weights[0]=null;    return;  }  double[] vals=new double[data.numAttributes()];  double[][][] dists=new double[data.numAttributes()][0][0];  double[][] props=new double[data.numAttributes()][0];  double[][] totalSubsetWeights=new double[data.numAttributes()][0];  double[] splits=new double[data.numAttributes()];  if (data.classAttribute().isNominal()) {    for (int i=0; i < data.numAttributes(); i++) {      if (i != data.classIndex()) {        splits[i]=distribution(props,dists,i,sortedIndices[0][i],weights[0][i],totalSubsetWeights,data);        vals[i]=gain(dists[i],priorVal(dists[i]));      }    }  } else {    for (int i=0; i < data.numAttributes(); i++) {      if (i != data.classIndex()) {        splits[i]=numericDistribution(props,dists,i,sortedIndices[0][i],weights[0][i],totalSubsetWeights,data,vals);      }    }  }  m_Attribute=Utils.maxIndex(vals);  int numAttVals=dists[m_Attribute].length;  int count=0;  for (int i=0; i < numAttVals; i++) {    if (totalSubsetWeights[m_Attribute][i] >= minNum) {      count++;    }    if (count > 1) {      break;    }  }  if (Utils.gr(vals[m_Attribute],0) && (count > 1)) {    m_SplitPoint=splits[m_Attribute];    m_Prop=props[m_Attribute];    double[][] attSubsetDists=dists[m_Attribute];    double[] attTotalSubsetWeights=totalSubsetWeights[m_Attribute];    vals=null;    dists=null;    props=null;    totalSubsetWeights=null;    splits=null;    int[][][][] subsetIndices=new int[numAttVals][1][data.numAttributes()][0];    double[][][][] subsetWeights=new double[numAttVals][1][data.numAttributes()][0];    splitData(subsetIndices,subsetWeights,m_Attribute,m_SplitPoint,sortedIndices[0],weights[0],data);    sortedIndices[0]=null;    weights[0]=null;    m_Successors=new Tree[numAttVals];    for (int i=0; i < numAttVals; i++) {      m_Successors[i]=new Tree();      m_Successors[i].buildTree(subsetIndices[i],subsetWeights[i],data,attTotalSubsetWeights[i],attSubsetDists[i],header,minNum,minVariance,depth + 1,maxDepth);      attSubsetDists[i]=null;    }  } else {    m_Attribute=-1;    sortedIndices[0]=null;    weights[0]=null;  }  if (data.classAttribute().isNominal()) {    m_Distribution=new double[m_ClassProbs.length];    for (int i=0; i < m_ClassProbs.length; i++) {      m_Distribution[i]=m_ClassProbs[i];    }    doSmoothing();    Utils.normalize(m_ClassProbs);  } else {    m_Distribution=new double[2];    m_Distribution[0]=priorVar;    m_Distribution[1]=totalWeight;  }}  }
class C{  protected String selectEncoding(ServletRequest request){  return (this.encoding);}  }
class C{  public void reset(){  startTime_ns=System.nanoTime();  totalPktCnt=0;  totalProcTimeNs=0;  avgTotalProcTimeNs=0;  sumSquaredProcTimeNs2=0;  maxTotalProcTimeNs=Long.MIN_VALUE;  minTotalProcTimeNs=Long.MAX_VALUE;  sigmaTotalProcTimeNs=0;  for (  OneComponentTime oct : compStats.values()) {    oct.resetAllCounters();  }}  }
class C{  @Override protected void doWriteObject(final ObjectOutputStream out) throws IOException {  out.writeInt(keyType.value);  out.writeInt(valueType.value);  out.writeBoolean(purgeValues);  out.writeFloat(loadFactor);  out.writeInt(data.length);  for (final MapIterator<K,V> it=mapIterator(); it.hasNext(); ) {    out.writeObject(it.next());    out.writeObject(it.getValue());  }  out.writeObject(null);}  }
class C{  public Edge findEdgeInSameDirection(Coordinate p0,Coordinate p1){  for (int i=0; i < edges.size(); i++) {    Edge e=(Edge)edges.get(i);    Coordinate[] eCoord=e.getCoordinates();    if (matchInSameDirection(p0,p1,eCoord[0],eCoord[1]))     return e;    if (matchInSameDirection(p0,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e;  }  return null;}  }
class C{  public List fetchRowsByUdoc(String idUnidadDocumental){  StringBuffer qual=new StringBuffer("where ").append(DBUtils.generateEQTokenField(UDOC_FIELD,idUnidadDocumental));  StringBuffer orderBy=new StringBuffer(" order by ").append(PARTEUDOC_COLUMN_NAME);  return getPartesUnidadDocumental(qual.toString(),orderBy.toString());}  }
class C{  public boolean areFilesAvailable(Set<File> romPaths){  return this.getMissingRomFiles(romPaths) == null && this.getMissingChdFiles(romPaths) == null;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  public Up(){  super();}  }
class C{  public static void registerEditorKitForContentType(String type,String classname,ClassLoader loader){  getKitTypeRegistry().put(type,classname);  if (loader != null) {    getKitLoaderRegistry().put(type,loader);  } else {    getKitLoaderRegistry().remove(type);  }  getKitRegisty().remove(type);}  }
class C{  public static <T extends Identifyable>T checkId(@NonNull T item){  if (item.getIdentifier() == -1) {    item.withIdentifier(idDistributor.incrementAndGet());  }  return item;}  }
class C{  private void unregisterEventHandler(){  if (editor != null) {    editor.removePropertyChangeListener(eventHandler);  }}  }
class C{  public UpdateBuilder bindUris(String from,Collection<String> uris,String prefix){  StringBuilder b=new StringBuilder(uris.size() * 80);  for (  String s : uris) {    b.append('<').append(prefix).append(s).append("> ");  }  bind(from,b.toString().trim());  return this;}  }
class C{  public static byte[] encode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,0,data.length,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception encoding base64 string: " + e);  }  return bOut.toByteArray();}  }
class C{  public void send(NotificationEntry entry){  if (mEnabled)   CENTER.send(entry);}  }
class C{  public static void expand(){  boolean b=false;  while (!BinaryStdIn.isEmpty()) {    int run=BinaryStdIn.readInt(LG_R);    for (int i=0; i < run; i++)     BinaryStdOut.write(b);    b=!b;  }  BinaryStdOut.close();}  }
class C{  public String next(){  String uri=uriList.get(index++);  if (index >= uriList.size()) {    index=0;    iterations++;  }  return uri;}  }
class C{  public static boolean disjoint(Collection<?> c1,Collection<?> c2){  if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {    Collection<?> tmp=c1;    c1=c2;    c2=tmp;  }  Iterator<?> it=c1.iterator();  while (it.hasNext()) {    if (c2.contains(it.next())) {      return false;    }  }  return true;}  }
class C{  public void testTxReplicatedPessimisticRepeatableRead() throws Exception {  checkTx(REPLICATED,PESSIMISTIC,REPEATABLE_READ);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.259 -0500",hash_original_method="30CB5FC67E5FCAC16AC8505B4CB757BB",hash_generated_method="C3A475F4003E6E2EB8D44D7F90CE7207") public static long highestOneBit(long v){  v|=(v >> 1);  v|=(v >> 2);  v|=(v >> 4);  v|=(v >> 8);  v|=(v >> 16);  v|=(v >> 32);  return v - (v >>> 1);}  }
class C{  void skipSpace() throws IOException {  while (true) {switch (ch) {case '\n':case ' ':case '\t':      ch=in.read();    break;default :  return;}}}  }
class C{  public static void main(String[] args){  double[][] matrix1=getmatrix(1);  double[][] matrix2=getmatrix(2);  double[][] matrix3=addMatrix(matrix1,matrix2);  print(matrix1,matrix2,matrix3);}  }
class C{  public AccountHeaderBuilder withTranslucentStatusBar(boolean translucentStatusBar){  this.mTranslucentStatusBar=translucentStatusBar;  return this;}  }
class C{  public void reloadLibraries(final boolean refreshNpmDefinitions,final IProgressMonitor monitor) throws InvocationTargetException {  final SubMonitor subMonitor=SubMonitor.convert(monitor,refreshNpmDefinitions ? 3 : 2);  try {    final SubMonitor waitMonitor=subMonitor.newChild(1);    waitForWorkspaceLock(waitMonitor);    if (monitor instanceof Cancelable) {      ((Cancelable)monitor).setCancelable(false);    }  } catch (  final OperationCanceledException e) {    LOGGER.info("User abort.");    return;  }  if (monitor.isCanceled()) {    return;  }  if (refreshNpmDefinitions) {    final IStatus refreshStatus=npmManager.refreshInstalledNpmPackages(subMonitor.newChild(1));    if (!refreshStatus.isOK()) {      throw new InvocationTargetException(new CoreException(refreshStatus));    }  }  final Collection<String> workspaceProjectNames=from(asList(getWorkspace().getRoot().getProjects())).filter(null).transform(null).toSet();  final Iterable<IProject> toBuild=from(collector.collectExternalProjects()).filter(null).filter(IProject.class);  final Iterable<IProject> workspaceProjectsToRebuild=collector.collectProjectsWithDirectExternalDependencies(toBuild);  builderHelper.build(toBuild,subMonitor.newChild(1));  scheduler.scheduleBuildIfNecessary(workspaceProjectsToRebuild);}  }
class C{  public DtoProvider<?> unregisterProvider(Class<?> dtoInterface){  final DtoProvider<?> dtoProvider=dtoInterface2Providers.remove(dtoInterface);  if (dtoProvider != null) {    dtoImpl2Providers.remove(dtoProvider.getImplClass());  }  return dtoProvider;}  }
class C{  public final boolean isReverse(){  return true;}  }
class C{  protected static String encode(final String value,final String encoding){  return UriUtils.encode(value,encoding);}  }
class C{  public boolean isSuppressExcessPropertyErrors(){  return suppressExcessPropertyErrors;}  }
class C{  public static void zoomOut(final ZyGraph graph){  checkArguments(graph);  graph.zoomOut();}  }
class C{  public static void solve(File file) throws IOException {  solve(new TSPInstance(file));}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  OpenStackTenantsList response=client.get(OpenStackTenantsList.class,baseUrl);  return ResourceUtils.defaultList(response.getTenants());}  }
class C{  public int activeGroupCount(){  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    if (destroyed) {      return 0;    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }  }  int n=ngroupsSnapshot;  for (int i=0; i < ngroupsSnapshot; i++) {    n+=groupsSnapshot[i].activeGroupCount();  }  return n;}  }
class C{  private void validatePatch(State current,State patch,URI referrer){  checkNotNull(current.taskState.stage);  checkNotNull(patch.taskState.stage);  if (current.taskState.stage != TaskState.TaskStage.CREATED && referrer.getPath().contains(TaskSchedulerServiceFactory.SELF_LINK)) {    throw new IllegalStateException("Service is not in CREATED stage, ignores patch from TaskSchedulerService");  }  ValidationUtils.validatePatch(current,patch);  checkState(current.taskState.stage.ordinal() < TaskState.TaskStage.FINISHED.ordinal());  checkState(patch.taskState.stage.ordinal() >= current.taskState.stage.ordinal());}  }
class C{  @Override public String encode(CharSequence rawPassword){  String rawPwd=(String)rawPassword;  return BCrypt.hashpw(rawPwd,BCrypt.gensalt());}  }
class C{  public Builder withDrawable(final Drawable drawable){  this.drawable=drawable;  return this;}  }
class C{  protected InvocationEvent(Object source,int id,Runnable runnable,Object notifier,boolean catchThrowables){  this(source,id,runnable,notifier,null,catchThrowables);}  }
class C{  @SuppressWarnings("unchecked") protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {  loadFactor=in.readFloat();  final int capacity=in.readInt();  final int size=in.readInt();  init();  threshold=calculateThreshold(capacity,loadFactor);  data=new HashEntry[capacity];  for (int i=0; i < size; i++) {    final K key=(K)in.readObject();    final V value=(V)in.readObject();    put(key,value);  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(StressRegressionTest.class);}  }
class C{  protected ConflictResolutionPolicy exitsMethodDialog(TemplateResource template){  final DuplicationPolicy dupPolicy=config.getReplaceDialogInitialOption();  if (dupPolicy == DuplicationPolicy.ASK) {    PsiMethod existingMethod=PsiAdapter.findMethodByName(clazz,template.getTargetMethodName());    if (existingMethod != null) {      return MethodExistsDialog.showDialog(template.getTargetMethodName());    }  } else   if (dupPolicy == DuplicationPolicy.REPLACE) {    return ReplacePolicy.getInstance();  }  return DuplicatePolicy.getInstance();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testGetLoginConfig() throws Exception {  String xml=WEBAPP_TEST_HEADER + "<login-config/></web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertEquals(1,webXml.getTags(WebXmlType.LOGIN_CONFIG).size());}  }
class C{  public double toDouble(){  try {    return Double.valueOf(m_str).doubleValue();  } catch (  NumberFormatException nfe) {    return Double.NaN;  }}  }
class C{  public void load(FileLocation loc,String defaultEnc) throws IOException {  this.loc=loc;  if (loc.isLocal() && !loc.isLocalAndExists()) {    this.charSet=defaultEnc != null ? defaultEnc : getDefaultEncoding();    return;  }  UnicodeReader ur=new UnicodeReader(loc.getInputStream(),defaultEnc);  charSet=ur.getEncoding();  Document doc=getDocument();  doc.removeDocumentListener(this);  BufferedReader r=new BufferedReader(ur);  try {    read(r,null);  }  finally {    doc.addDocumentListener(this);    r.close();  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean isHighlightSections(){  return null == highlightSections ? _highlightSections : highlightSections.get();}  }
class C{  @Override void resolve(ReferenceType refType){  setRequest(refType.virtualMachine().eventRequestManager().createExceptionRequest(refType,notifyCaught,notifyUncaught));}  }
class C{  public final void testValidateFails(){  RegexValidator regexValidator=new RegexValidator("foo",REGEX);  assertFalse(regexValidator.validate("abcdefghijkl"));}  }
class C{  private SpeechletResponse handleTellMeAJokeIntent(final Session session){  String speechOutput="";  String repromptText="You can ask, who's there";  int jokeID=(int)Math.floor(Math.random() * JOKE_LIST.size());  session.setAttribute(SESSION_STAGE,KNOCK_KNOCK_STAGE);  session.setAttribute(SESSION_JOKE_ID,jokeID);  speechOutput="Knock knock!";  SimpleCard card=new SimpleCard();  card.setTitle("Wise Guy");  card.setContent(speechOutput);  SpeechletResponse response=newAskResponse(speechOutput,false,repromptText,false);  response.setCard(card);  return response;}  }
class C{  public Request followUpRequest() throws IOException {  if (userResponse == null)   throw new IllegalStateException();  Connection connection=streamAllocation.connection();  Route route=connection != null ? connection.route() : null;  int responseCode=userResponse.code();  final String method=userRequest.method();switch (responseCode) {case HTTP_PROXY_AUTH:    Proxy selectedProxy=route != null ? route.proxy() : client.proxy();  if (selectedProxy.type() != Proxy.Type.HTTP) {    throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");  }case HTTP_UNAUTHORIZED:return client.authenticator().authenticate(route,userResponse);case HTTP_PERM_REDIRECT:case HTTP_TEMP_REDIRECT:if (!method.equals("GET") && !method.equals("HEAD")) {return null;}case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:if (!client.followRedirects()) return null;String location=userResponse.header("Location");if (location == null) return null;HttpUrl url=userRequest.url().resolve(location);if (url == null) return null;boolean sameScheme=url.scheme().equals(userRequest.url().scheme());if (!sameScheme && !client.followSslRedirects()) return null;Request.Builder requestBuilder=userRequest.newBuilder();if (HttpMethod.permitsRequestBody(method)) {if (HttpMethod.redirectsToGet(method)) {requestBuilder.method("GET",null);} else {requestBuilder.method(method,null);}requestBuilder.removeHeader("Transfer-Encoding");requestBuilder.removeHeader("Content-Length");requestBuilder.removeHeader("Content-Type");}if (!sameConnection(url)) {requestBuilder.removeHeader("Authorization");}return requestBuilder.url(url).build();default :return null;}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List<org.oscm.internal.vo.VOServiceReview> convertToUpVOServiceReview(List<org.oscm.vo.VOServiceReview> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOServiceReview> newVO=new ArrayList<org.oscm.internal.vo.VOServiceReview>();  for (  org.oscm.vo.VOServiceReview tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  private String locateGroupbyField(String groupby,TaggedLogAPIEntity obj){  if (groupby.equals(GROUPBY_ROOT_FIELD_NAME)) {    return GROUPBY_ROOT_FIELD_VALUE;  }  String tagv=obj.getTags().get(groupby);  if (tagv != null)   return tagv;  String fn=groupby.substring(0,1).toUpperCase() + groupby.substring(1,groupby.length());  try {    Method getM=obj.getClass().getMethod("get" + fn);    Object value=getM.invoke(obj);    return (String)value;  } catch (  Exception ex) {    LOG.warn(groupby + " field is in neither tags nor fields, " + ex.getMessage());    return null;  }}  }
class C{  public TagParams withTag(String tag){  this.tag=tag;  return this;}  }
class C{  public void endSerialGate(){  sendMessageWithoutPayload(BeanMessageID.BT_END_GATE);}  }
class C{  public void startNumber(){}  }
class C{  public Object save(Object entity){  Object key=PropertyUtils.getPropertyValue(entity,repositoryMetadata.getIdentifierProperty());  log.info("The entity that is to be saved has a key with value " + key);  if (key == null && keyGenerator != null) {    log.info("The key was null, but the generator was not, so we are going to get a key for the entity");    key=keyGenerator.generate();    log.debug("The generated key for the entity was " + key);    PropertyUtils.setPropertyValue(entity,repositoryMetadata.getIdentifierProperty(),key);  }  if (key == null) {    log.warn("Attempting to save an entity without a key. This might result in an error. To fix this, specify a key generator.");  }  dataStore.save((Serializable)key,entity);  return entity;}  }
class C{  public static <K,V>Map<K,V> constrainedMap(Map<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedMap<K,V>(map,constraint);}  }
class C{  @Override public void close() throws IOException {  buf=null;  InputStream localIn=in;  in=null;  if (localIn != null) {    localIn.close();  }}  }
class C{  protected String currentDatabaseCharset(){  String charsetName=systemVariables.getVariable("character_set_database");  if (charsetName == null || "DEFAULT".equalsIgnoreCase(charsetName)) {    charsetName=systemVariables.getVariable(SERVER_CHARSET_NAME);  }  return charsetName;}  }
class C{  public static void applyToOrSetGone(ImageHolder imageHolder,ImageView imageView){  applyToOrSetGone(imageHolder,imageView,null);}  }
class C{  public ImportSubtreeListener(Element imp,ImportRemovedListener irl){  importElement=imp;  importRemovedListener=irl;}  }
class C{  public SendableChatAction build(){  return new SendableChatAction(chatAction);}  }
class C{  public SelectItemGroup(){  super();}  }
class C{  @SuppressWarnings({"varargs","unchecked"}) public static <T>Seq<T> newSeq(T... values){  return new SeqImpl<>(Arrays.asList(values));}  }
class C{  public Name add(String comp) throws InvalidNameException {  impl.add(comp);  return this;}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public boolean testAllocation(){  BigDecimal alloc=getAllocatedAmt();  if (alloc == null)   alloc=Env.ZERO;  BigDecimal total=getPayAmt();  if (!isReceipt())   total=total.negate();  boolean test=total.compareTo(alloc) == 0;  boolean change=test != isAllocated();  if (change)   setIsAllocated(test);  log.fine("Allocated=" + test + " ("+ alloc+ "="+ total+ ")");  return change;}  }
class C{  public ImportNode(ClassNode type,String alias){  this.type=type;  this.alias=alias;  this.isStar=false;  this.isStatic=false;  this.packageName=null;  this.fieldName=null;}  }
class C{  TSResponse(byte[] tsReply) throws IOException {  parse(tsReply);}  }
class C{  public static final CButton createExportButton(boolean withText){  if (withText)   return createExportButton(Msg.getMsg(Env.getCtx(),A_EXPORT));  return createExportButton(null);}  }
class C{  final Object pop(){  int size=stack.size();  return size == 0 ? null : stack.remove(size - 1);}  }
class C{  private void computeDuration(){  duration=System.currentTimeMillis() - start;  total_duration+=duration;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("noMatch");  assertSize("elementGetElementsByTagNameNoMatchNoMatchAssert",0,elementList);}  }
class C{  public static String createHexColorString(Color color){  String colorString=String.format("%02X%02X%02X",color.getRed(),color.getGreen(),color.getBlue());  return colorString;}  }
class C{  protected int startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  bridgeServerPort=bridge.getPort();  return bridge.getPort();}  }
class C{  @HLEFunction(nid=0xFB6425C3,version=150,checkInsideInterrupt=true) public long sceKernelSetVTimerTimeWide(int vtimerUid,long time){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  if (sceKernelVTimerInfo == null) {    return -1;  }  return setVTimer(sceKernelVTimerInfo,time);}  }
class C{  public IComment editComment(final IComment comment,final String newComment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException {  try {    return m_node.editComment(comment,newComment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }}  }
class C{  public String makeRequest(String url,BasicNameValuePair... headers) throws RateLimitException, DiscordException {  try {    HttpUriRequest request=this.requestClass.getConstructor(String.class).newInstance(url);    for (    BasicNameValuePair header : headers) {      request.addHeader(header.getName(),header.getValue());    }    return request(request);  } catch (  NoSuchMethodException|IllegalAccessException|InvocationTargetException|InstantiationException e) {    Discord4J.LOGGER.error(LogMarkers.API,"Discord4J Internal Exception",e);    return null;  }}  }
class C{  public static void clearPreferences(Context context){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  mainPref.edit().clear().commit();}  }
class C{  void cellToCenterPoint(int cellX,int cellY,int[] result){  regionToCenterPoint(cellX,cellY,1,1,result);}  }
class C{  public static StructuredTranslation fromEmptyOutput(final Sentence sourceSentence){  return new StructuredTranslation(sourceSentence,"",emptyList(),0,emptyList(),emptyMap(),0f);}  }
class C{  private void readLiteral(char curCharacter,String token) throws IllegalArgumentException {  int offsetPos=-token.length();  int oldPosition=this.curPosition;  StringBuilder sb=new StringBuilder();  sb.append(token).append(Character.toString(curCharacter));  this.curPosition=this.curPosition + 1;  boolean wasApostroph=false;  while (this.curPosition < this.expressionLength) {    curCharacter=this.expression.charAt(this.curPosition);    if (curCharacter != '\'') {      if (wasApostroph) {        break;      }      wasApostroph=false;    } else {      wasApostroph=!wasApostroph;    }    sb.append(curCharacter);    this.curPosition=this.curPosition + 1;  }  if (!wasApostroph) {    throw new IllegalArgumentException("undetermined string " + this.expression);  }  this.tokens.appendODataToken(oldPosition + offsetPos,ODataTokenKind.SIMPLE_TYPE,sb.toString());}  }
class C{  private boolean isNextCharacterEscapedQuote(String nextLine,boolean inQuotes,int i){  return inQuotes && nextLine.length() > (i + 1) && nextLine.charAt(i + 1) == quotechar;}  }
class C{  public static boolean isInClassPath(URL location) throws MalformedURLException {  String classPath=System.getProperty("java.class.path");  StringTokenizer st=new StringTokenizer(classPath,File.pathSeparator);  while (st.hasMoreTokens()) {    String path=st.nextToken();    if (location.equals(new File(path).toURI().toURL())) {      return true;    }  }  return false;}  }
class C{  public void doFilter(GenericContainerResponse containerResponse){  containerResponse.getResponse();  ApplicationContext applicationContext=ApplicationContext.getCurrent();  Request request=applicationContext.getRequest();  String filename=getFileName(request,containerResponse.getContentType(),applicationContext,containerResponse.getStatus());  if (filename != null) {    if (hasCompliantEntity(containerResponse.getEntity())) {      Response.ResponseBuilder responseBuilder=Response.fromResponse(containerResponse.getResponse()).header(CONTENT_DISPOSITION,"attachment; filename=" + filename);      containerResponse.setResponse(responseBuilder.build());    }  }}  }
class C{  public static int positiveModulo(int a,int b){  int mod=a % b;  return mod >= 0 ? mod : mod + b;}  }
class C{  public void shear(double shx,double shy){  getTransformConcat(CGAffineTransform.makeShear(shx,shy));}  }
class C{  public AnimationGIF(int loops){  this.counter=0;  this.loops=loops;  this.ios=null;  this.writer=null;  this.baos=new ByteArrayOutputStream();  Iterator<ImageWriter> writerIterator=ImageIO.getImageWritersByFormatName("GIF");  this.writer=writerIterator.next();  this.ios=new MemoryCacheImageOutputStream(baos);  this.writer.setOutput(ios);  this.iwp=writer.getDefaultWriteParam();}  }
class C{  public boolean contains(double x,double y){  return false;}  }
class C{  private Account findByAccountNumber(String accountNumber){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Account> query=builder.createQuery(Account.class);    Root<Account> from=query.from(Account.class);    query.select(from);    query.where(builder.equal(from.get("accountNumber"),accountNumber));    List<Account> items=entityManager.createQuery(query).getResultList();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    throw re;  }}  }
class C{  public int hashCode(){  return text.hashCode() ^ pos ^ begin^ end;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public final static int toAscii(char c){  if (c <= 0xFF) {    return c;  } else {    return 0x3F;  }}  }
class C{  protected ArrayList<Intersection> filterIntersections(DrawContext dc,ArrayList<Intersection> list){  if (getSector().equals(Sector.FULL_SPHERE))   return list;  Globe globe=dc.getGlobe();  Sector s=getSector();  int i=0;  while (i < list.size()) {    if (s.contains(globe.computePositionFromPoint(list.get(i).getIntersectionPoint())) && s.contains(globe.computePositionFromPoint(list.get(i + 1).getIntersectionPoint())))     i+=2; else {      list.remove(i);      list.remove(i);    }  }  return list;}  }
class C{  int size(){  return ints.cardinality();}  }
class C{  @Override public void installTar() throws IOException {  File f=new File("codenameone_settings.properties");  if (!f.exists()) {    super.installTar();  }}  }
class C{  @SuppressWarnings("unchecked") public NukkitWorld(Level world){  this.worldRef=new WeakReference<Level>(world);}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public StandardPieSectionLabelGenerator(String labelFormat,NumberFormat numberFormat,NumberFormat percentFormat){  super(labelFormat,numberFormat,percentFormat);  this.attributedLabels=new HashMap();}  }
class C{  public @NonNegative int index(@Time @NonNegative final double t){  final @NonNegative int i=closestIndex(t);  if (Closeness.isCloseEnough(t,times.get(i)))   return i; else   if (t < front())   throw new IllegalArgumentException("using inadequate time grid: all nodes are later than the required time t = " + t + " (earliest node is t1 = "+ times.first()+ ")"); else   if (t > back())   throw new IllegalArgumentException("using inadequate time grid: all nodes are earlier than the required time t = " + t + " (latest node is t1 = "+ back()+ ")"); else {    int j, k;    if (t > times.get(i)) {      j=i;      k=i + 1;    } else {      j=i - 1;      k=i;    }    throw new IllegalArgumentException("using inadequate time grid: the nodes closest to the required time t = " + t + " are t1 = "+ times.get(j)+ " and t2 = "+ times.get(k));  }}  }
class C{  private String normalizeCommandLine(String commandLine){  return commandLine.trim().replaceAll(PART_SEPARATOR + "+",PART_SEPARATOR);}  }
class C{  public Collection obtenerDetallesPrestamoByUsuario(PrestamoVO prestamo){  Collection detallesPrestamos=this.getDetallesPrestamo(prestamo.getId());  return detallesPrestamos;}  }
class C{  public static boolean isSortedStrict(final CommonIndex arr1,final long len){  assert len <= arr1.length();  for (long ii=0; ii < len - 1; ii++) {    if (arr1.get(ii) >= arr1.get(ii + 1)) {      return false;    }  }  return true;}  }
class C{  public boolean supportsAggressiveRelease(){  return false;}  }
class C{  public static int createImageTexture(ByteBuffer data,int width,int height,int format){  int[] textureHandles=new int[1];  int textureHandle;  GLES20.glGenTextures(1,textureHandles,0);  textureHandle=textureHandles[0];  GlUtil.checkGlError("glGenTextures");  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,textureHandle);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GlUtil.checkGlError("loadImageTexture");  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,format,width,height,0,format,GLES20.GL_UNSIGNED_BYTE,data);  GlUtil.checkGlError("loadImageTexture");  return textureHandle;}  }
class C{  private void validateBusinessObjectDataDdlCollectionRequest(BusinessObjectDataDdlCollectionRequest businessObjectDataDdlCollectionRequest){  Assert.notNull(businessObjectDataDdlCollectionRequest,"A business object data DDL collection request must be specified.");  Assert.isTrue(!CollectionUtils.isEmpty(businessObjectDataDdlCollectionRequest.getBusinessObjectDataDdlRequests()),"At least one business object data DDL request must be specified.");  for (  BusinessObjectDataDdlRequest request : businessObjectDataDdlCollectionRequest.getBusinessObjectDataDdlRequests()) {    validateBusinessObjectDataDdlRequest(request);  }}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof SetCookie2) {    if (cookie instanceof ClientCookie && !((ClientCookie)cookie).containsAttribute(ClientCookie.VERSION_ATTR)) {      throw new MalformedCookieException("Violates RFC 2965. Version attribute is required.");    }  }}  }
class C{  public void populateViewHolderItem(SnapViewHolder viewHolder,T item,int position){  viewHolder.setItemData(item);  viewHolder.populateViewHolder(item,position);  viewHolder.attachOnClickListeners(viewHolder,item,position);}  }
class C{  SelectResults evaluateCollection(ExecutionContext context,RuntimeIterator stopAtIter) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  Object coll;  context.currentScope().setLimit(stopAtIter);  try {    coll=this.collectionExpr.evaluate(context);  }  finally {    context.currentScope().setLimit(null);  }  if (TypeUtils.OBJECT_TYPE.equals(this.elementType)) {    ObjectType elmTypc=getCollectionElementTypeCast();    if (elmTypc != null) {      this.elementType=elmTypc;    }  }  SelectResults sr=prepareIteratorDef(coll,this.elementType,context);  return sr;}  }
class C{  public static Unmarshaller createUnmarshaller(Class<?> clazz) throws Exception {  return getJAXBContext(clazz).createUnmarshaller();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:33.073 -0500",hash_original_method="FF7FB4D142B82B6A187917634C749F84",hash_generated_method="A26D4361164728CC4D40A8F99A62FD53") public boolean shouldSendVolumeKeys(BluetoothDevice device){  if (isEnabled() && isValidDevice(device)) {    ParcelUuid[] uuids=device.getUuids();    if (uuids == null)     return false;    int sum=0;    for (    ParcelUuid uuid : uuids) {      sum+=uuid.getTaintInt();    }    return ((sum) == 1);  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void addBefore(Entry<K,V> existingEntry){  after=existingEntry;  before=existingEntry.before;  before.after=this;  after.before=this;}  }
class C{  @SuppressWarnings("NullableProblems") public void testAppendPrepend() throws Exception {  assertEquals("as" + "df",testAppend("as","df",true));  assertEquals("df" + "as",testAppend("as","df",false));  List<String> curList=new ArrayList<>(Arrays.asList("a","b"));  List<String> newList=new ArrayList<>(Arrays.asList("b","c"));  assertEquals(Arrays.asList("a","b","b","c"),testAppend(curList,newList,true));  assertEquals(Arrays.asList("b","c","a","b"),testAppend(curList,newList,false));  Set<String> curSet=new HashSet<>(Arrays.asList("a","b"));  Set<String> newSet=new HashSet<>(Arrays.asList("b","c"));  Set<String> resSet=new HashSet<>(Arrays.asList("a","b","c"));  assertEquals(resSet,testAppend(curSet,newSet,true));  assertEquals(resSet,testAppend(curSet,newSet,false));  assertEquals(resSet,testAppend(newSet,curList,true));  assertEquals(resSet,testAppend(newSet,curList,false));  assertEquals(resSet,testAppend(curSet,newList,true));  assertEquals(resSet,testAppend(curSet,newList,false));  Map<String,String> curMap=F.asMap("a","1","b","2","c","3");  Map<String,String> newMap=F.asMap("a","#","b",null,"c","%","d","4");  assertEquals(F.asMap("a","#","c","%","d","4"),testAppend(curMap,newMap,true));  assertEquals(F.asMap("a","1","b","2","c","3","d","4"),testAppend(curMap,newMap,false));  try {    testAppend("as",Arrays.asList("df"),true);    fail("Expects failed with incompatible types message.");  } catch (  IgniteCheckedException e) {    info("Got expected exception: " + e);    e.printStackTrace();    assertTrue(e.getMessage().startsWith("Incompatible types"));  }}  }
class C{  public static boolean hasParentElementInSequence(InvocationSequenceData data){  return null != data.getParentSequence();}  }
class C{  public void testEmptyIndexWithVectors() throws IOException {  Directory rd1=newDirectory();{    if (VERBOSE) {      System.out.println("\nTEST: make 1st writer");    }    IndexWriter iw=new IndexWriter(rd1,newIndexWriterConfig(new MockAnalyzer(random())));    Document doc=new Document();    Field idField=newTextField("id","",Field.Store.NO);    doc.add(idField);    FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);    customType.setStoreTermVectors(true);    doc.add(newField("test","",customType));    idField.setStringValue("1");    iw.addDocument(doc);    doc.add(newField("test","",customType));    idField.setStringValue("2");    iw.addDocument(doc);    iw.close();    IndexWriterConfig dontMergeConfig=new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE);    if (VERBOSE) {      System.out.println("\nTEST: make 2nd writer");    }    IndexWriter writer=new IndexWriter(rd1,dontMergeConfig);    writer.deleteDocuments(new Term("id","1"));    writer.close();    IndexReader ir=DirectoryReader.open(rd1);    assertEquals(2,ir.maxDoc());    assertEquals(1,ir.numDocs());    ir.close();    iw=new IndexWriter(rd1,newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));    iw.forceMerge(1);    iw.close();  }  Directory rd2=newDirectory();{    IndexWriter iw=new IndexWriter(rd2,newIndexWriterConfig(new MockAnalyzer(random())));    Document doc=new Document();    iw.addDocument(doc);    iw.close();  }  Directory rdOut=newDirectory();  IndexWriter iwOut=new IndexWriter(rdOut,newIndexWriterConfig(new MockAnalyzer(random())));  DirectoryReader reader1=DirectoryReader.open(rd1);  DirectoryReader reader2=DirectoryReader.open(rd2);  ParallelLeafReader pr=new ParallelLeafReader(false,getOnlyLeafReader(reader1),getOnlyLeafReader(reader2));  iwOut.addIndexes(SlowCodecReaderWrapper.wrap(pr));  pr.close();  reader1.close();  reader2.close();  assertEquals(0,reader1.getRefCount());  assertEquals(0,reader2.getRefCount());  rd1.close();  rd2.close();  iwOut.forceMerge(1);  iwOut.close();  rdOut.close();}  }
class C{  public boolean hasBatchId(){  return hasExtension(BatchId.class);}  }
class C{  public boolean hasLabel(){  return super.hasAttribute(LABEL);}  }
class C{  private StaticClassUtil(){  instanceNotAllowed(getClass());}  }
class C{  void addValueForProcessing(String value){switch (numberOfArgs) {case UNINITIALIZED:    throw new RuntimeException("NO_ARGS_ALLOWED");default :  processValue(value);}}  }
class C{  public int readLEUnsignedShort() throws IOException {  int byte1=in.read();  int byte2=in.read();  if (byte2 == -1)   throw new EOFException();  return (byte2 << 8) + byte1;}  }
class C{  public Matrix4d translationRotateTowards(Vector3dc pos,Vector3dc dir,Vector3dc up){  return translationRotateTowards(pos.x(),pos.y(),pos.z(),dir.x(),dir.y(),dir.z(),up.x(),up.y(),up.z());}  }
class C{  @Override public void remove(){}  }
class C{  public static boolean checkCPReblock(MRJobInstruction inst,MatrixObject[] inputs) throws DMLRuntimeException, IOException {  boolean ret=true;  boolean localMode=InfrastructureAnalyzer.isLocalMode();  String rdInst=inst.getIv_randInstructions();  String rrInst=inst.getIv_recordReaderInstructions();  String mapInst=inst.getIv_instructionsInMapper();  String aggInst=inst.getIv_aggInstructions();  String otherInst=inst.getIv_otherInstructions();  if ((rdInst != null && rdInst.length() > 0) || (rrInst != null && rrInst.length() > 0) || (mapInst != null && mapInst.length() > 0)|| (aggInst != null && aggInst.length() > 0)|| (otherInst != null && otherInst.length() > 0)) {    ret=false;  }  if (ret) {    String shuffleInst=inst.getIv_shuffleInstructions();    String[] instParts=shuffleInst.split(Lop.INSTRUCTION_DELIMITOR);    for (    String rblk : instParts)     if (!InstructionUtils.getOpCode(rblk).equals(ReBlock.OPCODE) && !InstructionUtils.getOpCode(rblk).equals(CSVReBlock.OPCODE)) {      ret=false;      break;    }  }  if (ret) {    String shuffleInst=inst.getIv_shuffleInstructions();    String[] instParts=shuffleInst.split(Lop.INSTRUCTION_DELIMITOR);    for (    String rblk : instParts)     if (InstructionUtils.getOpCode(rblk).equals(ReBlock.OPCODE) && rblk.endsWith("false")) {      ret=false;      break;    }  }  if (ret) {    for (    MatrixObject mo : inputs) {      long rows=mo.getNumRows();      long cols=mo.getNumColumns();      if (rows == -1 || cols == -1) {        Path path=new Path(mo.getFileName());        long size=MapReduceTool.getFilesizeOnHDFS(path);        if (size > CP_CSV_REBLOCK_UNKNOWN_THRESHOLD_SIZE || CP_CSV_REBLOCK_UNKNOWN_THRESHOLD_SIZE > OptimizerUtils.getLocalMemBudget()) {          ret=false;          break;        }      } else {        long nnz=mo.getNnz();        double sp=OptimizerUtils.getSparsity(rows,cols,nnz);        double mem=MatrixBlock.estimateSizeInMemory(rows,cols,sp);        if (!OptimizerUtils.isValidCPDimensions(rows,cols) || !OptimizerUtils.isValidCPMatrixSize(rows,cols,sp) || mem >= OptimizerUtils.getLocalMemBudget()) {          ret=false;          break;        }      }    }  }  if (ret && !localMode) {    for (    MatrixObject mo : inputs) {      MatrixFormatMetaData iimd=(MatrixFormatMetaData)mo.getMetaData();      if ((iimd.getInputInfo() == InputInfo.TextCellInputInfo || iimd.getInputInfo() == InputInfo.MatrixMarketInputInfo || iimd.getInputInfo() == InputInfo.CSVInputInfo || iimd.getInputInfo() == InputInfo.BinaryCellInputInfo) && !mo.isDirty()) {        Path path=new Path(mo.getFileName());        long fileSize=MapReduceTool.getFilesizeOnHDFS(path);        long cpThreshold=CP_REBLOCK_THRESHOLD_SIZE * OptimizerUtils.getParallelTextReadParallelism();        if (fileSize > cpThreshold) {          ret=false;          break;        }      }    }  }  return ret;}  }
class C{  Item newField(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner).index,newNameType(name,desc).index);    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public Composite createControl(final Composite parent,final KeyListener klisten){  final Composite part=AbstractSimpleConfigurator.subpart(parent,"Line");  this.on=new Button(part,SWT.CHECK);  this.chooser=new StolenColorEditor(part,this.sync);  this.size=new Combo(part,SWT.DROP_DOWN);  this.size.setItems(new String[]{"1","2","3","5","10"});  this.size.setTextLimit(2);  this.size.addKeyListener(klisten);  this.size.setToolTipText("Line width");  this.percent=new Combo(part,SWT.DROP_DOWN);  this.percent.setItems(new String[]{"0%","25%","50%","75%","100%"});  this.percent.setTextLimit(3);  this.percent.addKeyListener(klisten);  this.percent.setToolTipText("Line opacity");  return part;}  }
class C{  public Configurator progressBarColor(int color){  if (color != 0) {    viewLoadingProgressBarColor=color;  }  return this;}  }
class C{  public void updateTheme(){  _connectionQualityMeterIcons[StatusLine.STATUS_DISCONNECTED]=GUIMediator.getThemeImage("connect_small_0");  _connectionQualityMeterIcons[StatusLine.STATUS_TURBOCHARGED]=GUIMediator.getThemeImage("connect_small_6");}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public final int readUnsignedShort() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (ch1 << 8) + (ch2 << 0);}  }
class C{  protected Status cancelStatus(){  return new Status(IStatus.CANCEL,pluginId,NLS.bind(Messages.DownloadCanceled,getSourceURL(),getTargetPath()));}  }
class C{  public boolean isShareable(Class<?> entityClass){  return getAnnotation(entityClass,SharePermission.class) != null;}  }
class C{  private String format(KerberosTime kt){  String date=kt.toDate().toString();  return (date.substring(4,7) + " " + date.substring(8,10)+ ", "+ date.substring(24)+ " "+ date.substring(11,19));}  }
class C{  @Override public boolean onMessage(ChannelHandlerContext ctx,T isoMessage){  final IsoMessage echoResponse=isoMessageFactory.createResponse(isoMessage);  ctx.writeAndFlush(echoResponse);  return false;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  boolean userOK(String entry){  return (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(_who,"Delete roster group " + entry,"Delete roster group " + entry + "?",JOptionPane.YES_NO_OPTION));}  }
class C{  public void testForceMerge() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"content.source.log.step=3","ram.flush.mb=-1","max.buffered=3","doc.term.vector=false","content.source.forever=false","directory=RAMDirectory","merge.policy=org.apache.lucene.index.LogDocMergePolicy","doc.stored=false","doc.tokenized=false","debug.level=1","# ----- alg ","{ \"Rounds\"","  ResetSystemErase","  CreateIndex","  { \"AddDocs\"  AddDoc > : * ","  ForceMerge(3)","  CloseIndex()","} : 2"};  Benchmark benchmark=execBenchmark(algLines);  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  int ndocsExpected=20;  assertEquals("wrong number of docs in the index!",ndocsExpected,ir.numDocs());  ir.close();  SegmentInfos infos=SegmentInfos.readLatestCommit(benchmark.getRunData().getDirectory());  assertEquals(3,infos.size());}  }
class C{  public static IndicatorSeries newInstance(){  final IndicatorSeries returnInstance=new IndicatorSeries();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public final Vec3D rotateZ(float theta){  final float co=(float)Math.cos(theta);  final float si=(float)Math.sin(theta);  final float xx=co * x - si * y;  y=si * x + co * y;  x=xx;  return this;}  }
class C{  private void onCreateFolderOperationFinish(CreateFolderOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    dismissLoadingDialog();    populateDirectoryList();  } else {    dismissLoadingDialog();    try {      Toast msg=Toast.makeText(this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  public boolean isRegName(){  return _is_reg_name;}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  @Override public List<Object> remove(int columnIndex){  List<Object> ret=super.remove(columnIndex);  if (columnIndex < originalColumnNumber) {    originalColumnNumber--;  }  return ret;}  }
class C{  public static float calculateTop(float left,float right,float bottom,float targetAspectRatio){  final float width=right - left;  final float top=bottom - (width / targetAspectRatio);  return top;}  }
class C{  @Override public void transactionBegin(){  for (  BigdataGraphListener listener : listeners) {    listener.transactionBegin();  }}  }
class C{  public CarouselItemImage(Context context){  super(context);}  }
class C{  public RbrRowImage(ImageType type,RbrTableChangeSet changeSet,List<OneRowChange.ColumnSpec> specs,List<OneRowChange.ColumnVal> values){  this.type=type;  this.changeSet=changeSet;  this.specs=specs;  this.values=values;}  }
class C{  @Override void readStreamBlob(InputStream is,byte[] buffer,int offset,RowCursor cursor) throws IOException {  int len=BitsUtil.readInt(is);  if (len == 0) {    BitsUtil.writeInt(buffer,offset + offset(),0);    return;  }  try (BlobOutputStream blob=openOutputStream(cursor)){    while (len > 0) {      boolean isNext=(len & BLOB_CONT_MASK) != 0;      len&=~BLOB_CONT_MASK;      blob.writeFromStream(is,len);      if (isNext) {        len=BitsUtil.readInt(is);      } else {        len=0;      }    }  } catch (  IOException e) {    e.printStackTrace();    throw e;  }  if (len < 0) {    throw new IOException(L.l("Unexpected end of file while reading {0}",this));  }}  }
class C{  public void test_ticket_1007_empty2() throws Exception {  new TestHelper("ticket-1007-empty2","ticket-1007-empty2.rq","ticket-1007-custom.trig","ticket-1007-empty.srx",false).runTest();}  }
class C{  @Override public boolean allTablesAreSelectable(){  debugCodeCall("allTablesAreSelectable");  return true;}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener l){  m_customEditor.m_Support.removePropertyChangeListener(l);}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=getPaddingLeft() + getPaddingRight() + (count * 2 * radius)+ (count - 1) * circleInterval;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  protected R scan(AnnotatedTypeMirror type,P p){  return (type == null ? null : type.accept(this,p));}  }
class C{  private String truncateString(String in,int maxLength){  if (in.length() > maxLength) {    in=in.substring(0,maxLength).concat("...");  }  return "\"" + in + "\"";}  }
class C{  private int[] findNearestArea(int cellX,int cellY,int spanX,int spanY,int[] direction,boolean[][] occupied,boolean blockOccupied[][],int[] result){  final int[] bestXY=result != null ? result : new int[2];  float bestDistance=Float.MAX_VALUE;  int bestDirectionScore=Integer.MIN_VALUE;  final int countX=mCountX;  final int countY=mCountY;  for (int y=0; y < countY - (spanY - 1); y++) {    inner:     for (int x=0; x < countX - (spanX - 1); x++) {      for (int i=0; i < spanX; i++) {        for (int j=0; j < spanY; j++) {          if (occupied[x + i][y + j] && (blockOccupied == null || blockOccupied[i][j])) {            continue inner;          }        }      }      float distance=(float)Math.hypot(x - cellX,y - cellY);      int[] curDirection=mTmpPoint;      computeDirectionVector(x - cellX,y - cellY,curDirection);      int curDirectionScore=direction[0] * curDirection[0] + direction[1] * curDirection[1];      boolean exactDirectionOnly=false;      boolean directionMatches=direction[0] == curDirection[0] && direction[0] == curDirection[0];      if ((directionMatches || !exactDirectionOnly) && Float.compare(distance,bestDistance) < 0 || (Float.compare(distance,bestDistance) == 0 && curDirectionScore > bestDirectionScore)) {        bestDistance=distance;        bestDirectionScore=curDirectionScore;        bestXY[0]=x;        bestXY[1]=y;      }    }  }  if (bestDistance == Float.MAX_VALUE) {    bestXY[0]=-1;    bestXY[1]=-1;  }  return bestXY;}  }
class C{  MultiSnapshot(Translog.Snapshot[] translogs){}  }
class C{  public String print() throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  this.print(baos);  return new Utf8String(baos.toByteArray()).string();}  }
class C{  public List<Part> partList(){  if (partList == null) {    return new LinkedList<>();  }  return partList;}  }
class C{  static void errorExpectedInput(String systemID,int lineNr,String expectedString) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Expected: " + expectedString);}  }
class C{  public String noHeaderRowTipText(){  return "If true then the header row is not written";}  }
class C{  public static TimeOfDay fromCalendarFields(Calendar calendar){  if (calendar == null) {    throw new IllegalArgumentException("The calendar must not be null");  }  return new TimeOfDay(calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),calendar.get(Calendar.SECOND),calendar.get(Calendar.MILLISECOND));}  }
class C{  @Override protected void onPreExecute(){  mHandler.postDelayed(mShowProgressDialogRunnable,500);}  }
class C{  public final IntGrid3D add(IntGrid3D withThis){  checkBounds(withThis);  int[][] fieldx=null;  int[] fieldxy=null;  int[][][] ofield=withThis.field;  int[][] ofieldx=null;  int[] ofieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=ofield[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      ofieldxy=ofieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]+=ofieldxy[z];    }  }  return this;}  }
class C{  public void consume(){  consumed=true;}  }
class C{  public AppCardBuilder googlePlayId(String appGooglePlayId){  this.appGooglePlayId=appGooglePlayId;  return this;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_trainInstances == null) {    text.append("\tWrapper subset evaluator has not been built yet\n");  } else {    text.append("\tWrapper Subset Evaluator\n");    text.append("\tLearning scheme: " + getClassifier().getClass().getName() + "\n");    text.append("\tScheme options: ");    String[] classifierOptions=new String[0];    if (m_BaseClassifier instanceof OptionHandler) {      classifierOptions=((OptionHandler)m_BaseClassifier).getOptions();      for (      String classifierOption : classifierOptions) {        text.append(classifierOption + " ");      }    }    text.append("\n");    String IRClassL="";    if (m_IRClassVal >= 0) {      IRClassL="(class value: " + m_trainInstances.classAttribute().value(m_IRClassVal) + ")";    }switch (m_evaluationMeasure) {case EVAL_DEFAULT:case EVAL_ACCURACY:      if (m_trainInstances.attribute(m_classIndex).isNumeric()) {        text.append("\tSubset evaluation: RMSE\n");      } else {        text.append("\tSubset evaluation: classification accuracy\n");      }    break;case EVAL_RMSE:  if (m_trainInstances.attribute(m_classIndex).isNumeric()) {    text.append("\tSubset evaluation: RMSE\n");  } else {    text.append("\tSubset evaluation: RMSE (probability estimates)\n");  }break;case EVAL_MAE:if (m_trainInstances.attribute(m_classIndex).isNumeric()) {text.append("\tSubset evaluation: MAE\n");} else {text.append("\tSubset evaluation: MAE (probability estimates)\n");}break;case EVAL_FMEASURE:text.append("\tSubset evaluation: F-measure " + (m_IRClassVal >= 0 ? IRClassL : "") + "\n");break;case EVAL_AUC:text.append("\tSubset evaluation: area under the ROC curve " + (m_IRClassVal >= 0 ? IRClassL : "") + "\n");break;case EVAL_AUPRC:text.append("\tSubset evalation: area under the precision-recal curve " + (m_IRClassVal >= 0 ? IRClassL : "") + "\n");break;}text.append("\tNumber of folds for accuracy estimation: " + m_folds + "\n");}return text.toString();}  }
class C{  protected static void remoteReplace(String regionName,String entryName,Object value) throws CacheException {  Region root=getRootRegion();  Region region=root.getSubregion(regionName);  Region sub=region.getSubregion(entryName);  if (sub == null) {    String s="Entry \"" + entryName + "\" does not exist";    throw new EntryNotFoundException(s);  }  sub.put(entryName,value);  LogWriterUtils.getLogWriter().info("Replaced value " + value + "in entry "+ entryName+ " in region '"+ region.getFullPath()+ "'");}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CombinedRangeXYPlot)) {    return false;  }  CombinedRangeXYPlot that=(CombinedRangeXYPlot)obj;  if (this.gap != that.gap) {    return false;  }  if (!ObjectUtilities.equal(this.subplots,that.subplots)) {    return false;  }  return super.equals(obj);}  }
class C{  public static int color(ColorHolder colorHolder,Context ctx){  if (colorHolder == null) {    return 0;  } else {    return colorHolder.color(ctx);  }}  }
class C{  public BoolLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public void closeIdleConnections(long idleTime){  long idleTimeout=System.currentTimeMillis() - idleTime;  if (log.isDebugEnabled()) {    log.debug("Checking for connections, idleTimeout: " + idleTimeout);  }  Iterator<HttpConnection> connectionIter=connectionToTimes.keySet().iterator();  while (connectionIter.hasNext()) {    HttpConnection conn=connectionIter.next();    TimeValues times=connectionToTimes.get(conn);    Long connectionTime=times.timeAdded;    if (connectionTime.longValue() <= idleTimeout) {      if (log.isDebugEnabled()) {        log.debug("Closing connection, connection time: " + connectionTime);      }      connectionIter.remove();      try {        conn.close();      } catch (      IOException ex) {        log.debug("I/O error closing connection",ex);      }    }  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  HeikinAshiSeries clone=(HeikinAshiSeries)super.clone();  return clone;}  }
class C{  public CreateLinkRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String type){  super(requestUrl,client,options,type);}  }
class C{  void clearState(boolean block){  if (block) {    if (mContext != null) {      File state=new File(mContext.getCacheDir(),STATE_FILE);      if (state.exists()) {        state.delete();      }    }  } else {    mBackgroundHandler.sendEmptyMessage(MSG_CLEAR_STATE);  }  updateLastRecovered(0);}  }
class C{  public WrappedByteBuffer putUnsignedShortAt(int index,int v){  _checkForWriteAt(index,2);  this.putShortAt(index,(short)(v & 0xFFFF));  return this;}  }
class C{  public WriteLock(ZooKeeper zookeeper,String dir,List<ACL> acl,LockListener callback){  this(zookeeper,dir,acl);  this.callback=callback;}  }
class C{  public void ignoreInvokeForOutputEvents(Stmt stmt){  ignoreSet.add(stmt);}  }
class C{  public static void main(String[] args) throws IOException {  Scanner sc;  if (args.length == 0) {    System.out.print("Enter the project ID: ");    sc=new Scanner(System.in);  } else {    sc=new Scanner(args[0]);  }  String projectId=sc.nextLine();  Bigquery bigquery=createAuthorizedClient();  List<TableRow> rows=executeQuery("SELECT TOP(corpus, 10) as title, COUNT(*) as unique_words " + "FROM [publicdata:samples.shakespeare]",bigquery,projectId);  printResults(rows);}  }
class C{  public boolean toStarting(){  LifecycleState state;synchronized (this) {    state=_state;    if (state.isAfterStarting() && !state.isStopped()) {      return false;    }    _state=STARTING;    _lastChangeTime=CurrentTime.currentTime();    if (_log != null && _log.isLoggable(_level) && _log.isLoggable(Level.FINER)) {      _log.finer("starting " + _name);    }  }  notifyListeners(state,STARTING);  return true;}  }
class C{  private void assignNextCurrentRow(boolean assignEmptyRow) throws ParseException, XMLStreamException {  if (assignEmptyRow) {    this.currentRowContent=new XlsxCell[sheetMetaData.getNumberOfColumns()];  } else {    this.currentRowContent=nextRowWithContent;    this.currentRowIndex=parsedRowIndex;    this.nextRowWithContent=parseNextRowWithContent();  }}  }
class C{  @Override @SuppressWarnings("deprecation") public void stop(){  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }  if (m_foldThread != null) {    Thread temp=m_foldThread;    m_foldThread=null;    temp.interrupt();    temp.stop();  }}  }
class C{  public void removeListener(EventDispatcherListener listener){  mListeners.remove(listener);}  }
class C{  public IndexClient(String username,String password) throws Exception {  factory=FeedURLFactory.getDefault();  service=new SpreadsheetService("gdata-sample-spreadhsheetindex");  service.setUserCredentials(username,password);}  }
class C{  private void receiveFriends(){  CleartextFriends friendsReceived=CleartextFriends.fromJSON(lengthValueRead(in));  this.mFriendsReceived=friendsReceived;  if (mFriendsReceived != null && mFriendsReceived.friends != null) {    Set<String> myFriends=friendStore.getAllFriends();    Set<String> theirFriends=new HashSet(mFriendsReceived.friends);    Set<String> intersection=new HashSet(myFriends);    intersection.retainAll(theirFriends);    commonFriends=intersection.size();    log.info("Received " + theirFriends.size() + " friends. Overlap with my "+ myFriends.size()+ " friends is "+ commonFriends);  } else   if (mFriendsReceived == null) {    log.info("Friends received is null: " + mFriendsReceived);    setExchangeStatus(Status.ERROR);    setErrorMessage("Failed receiving friends.");  } else {    log.error("Friends received.friends is null");    setExchangeStatus(Status.ERROR);    setErrorMessage("Failed receiving friends.");  }}  }
class C{  public byte[] generateMwk(){  KeyGenerator keyGen=null;  try {    keyGen=KeyGenerator.getInstance("DES");  } catch (  NoSuchAlgorithmException e) {    Debug.logError(e,module);  }  SecretKey des1=keyGen.generateKey();  SecretKey des2=keyGen.generateKey();  if (des1 != null && des2 != null) {    byte[] desByte1=des1.getEncoded();    byte[] desByte2=des2.getEncoded();    byte[] desByte3=des1.getEncoded();    try {      if (DESKeySpec.isWeak(des1.getEncoded(),0) || DESKeySpec.isWeak(des2.getEncoded(),0)) {        return generateMwk();      }    } catch (    Exception e) {      Debug.logError(e,module);    }    byte[] des3=copyBytes(desByte1,copyBytes(desByte2,desByte3,0),0);    return generateMwk(des3);  } else {    Debug.logInfo("Null DES keys returned",module);  }  return null;}  }
class C{  private void initProgressBar(){  mMax=100;  mProgress=0;  mSecondaryProgress=0;  mIndeterminate=false;  mOnlyIndeterminate=false;  mDuration=4000;  mBehavior=AlphaAnimation.RESTART;  mMinWidth=24;  mMaxWidth=48;  mMinHeight=24;  mMaxHeight=48;}  }
class C{  private static boolean isTestMethod(Method m){  return m.getParameterTypes().length == 0 && m.getName().startsWith("test") && m.getReturnType().equals(Void.TYPE);}  }
class C{  protected AppendResponse handleAppend(AppendRequest request){  if (request.term() < context.getTerm()) {    LOGGER.debug("{} - Rejected {}: request term is less than the current term ({})",context.getCluster().member().address(),request,context.getTerm());    return AppendResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withSucceeded(false).withLogIndex(context.getLog().lastIndex()).build();  } else {    return checkGlobalIndex(request);  }}  }
class C{  public void println(){  newLine();}  }
class C{  public static boolean isLowerThan(int apiLevel){  return Build.VERSION.SDK_INT < apiLevel;}  }
class C{  public List<String> invalidArguments(){  return this.invalidArguments;}  }
class C{  protected static double bitsToDouble(BitSet bits,BigDecimal[] bitValues){  BigDecimal value=BigDecimal.ZERO;  BigDecimal lastValue=value;  int n=bits.size();  for (int i=0; i < n; i++) {    lastValue=value;    if (bits.get(i)) {      value=value.add(bitValues[n - i - 1]);    } else {      value=value.subtract(bitValues[n - i - 1]);    }  }  BigDecimal lastDelta2x=bitValues[n - 1].multiply(new BigDecimal(2));  BigDecimal roundingMin=lastValue.subtract(lastDelta2x);  BigDecimal roundingMax=lastValue.add(lastDelta2x);  BigDecimal rounded=value.setScale(6,RoundingMode.HALF_UP);  if (rounded.compareTo(roundingMin) < 0 || rounded.compareTo(roundingMax) > 0) {    rounded=value.setScale(6,RoundingMode.HALF_DOWN);  }  return rounded.doubleValue();}  }
class C{  public void testSecretKeyFactory03() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    SecretKeyFactory secKF=SecretKeyFactory.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",secKF.getAlgorithm(),validValues[i]);  }}  }
class C{  public static void removeRepositoryAction(Class<? extends AbstractRepositoryAction> actionClass){  Iterator<RepositoryActionEntry> iterator=REPOSITORY_ACTIONS.iterator();  while (iterator.hasNext()) {    if (iterator.next().getRepositoryActionClass().equals(actionClass)) {      iterator.remove();    }  }}  }
class C{  @Override public int hashCode(){  return pattern.hashCode();}  }
class C{  public static String convertHexStringToString(String hexString){  String uHexString=hexString.toLowerCase();  StringBuilder sBld=new StringBuilder();  for (int i=0; i < uHexString.length(); i=i + 2) {    char c=(char)Integer.parseInt(uHexString.substring(i,i + 2),16);    sBld.append(c);  }  return sBld.toString();}  }
class C{  public static boolean isHorizontalWin(String[][] m,String t){  for (int i=0; i < m.length; i++) {    int count=0;    for (int j=0; j < m[i].length; j++) {      if (m[i][j] == t)       count++;    }    if (count == 3)     return true;  }  return false;}  }
class C{  public static void pickFourCards(int[] deck){  for (int i=0; i < 4; i++) {    deck[(int)(Math.random() * 52)]++;  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(VALUE).setRequired(true);}  }
class C{  private static String formatInt(int number){  String str=Integer.toString(number);  return number < 10 ? " " + str : str;}  }
class C{  public static boolean runsOnDevEnv(){  return RuntimeMode.DEVELOPMENT == Latkes.getRuntimeMode();}  }
class C{  @Override final public void mouseExited(MouseEvent e){  isComponentPressedDown=false;  mouseExit(e);}  }
class C{  public HexTable(HexEditor hexEditor,HexTableModel model){  super(model);  this.hexEditor=hexEditor;  this.model=model;  enableEvents(AWTEvent.KEY_EVENT_MASK);  setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  setFont(new Font("Monospaced",Font.PLAIN,14));  setCellSelectionEnabled(true);  setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);  setDefaultEditor(Object.class,cellEditor);  setDefaultRenderer(Object.class,new CellRenderer());  getTableHeader().setReorderingAllowed(false);  setShowGrid(false);  FontMetrics fm=getFontMetrics(getFont());  Font headerFont=UIManager.getFont("TableHeader.font");  FontMetrics headerFM=hexEditor.getFontMetrics(headerFont);  int w=fm.stringWidth("wwww");  w=Math.max(w,headerFM.stringWidth("+999"));  for (int i=0; i < getColumnCount(); i++) {    TableColumn column=getColumnModel().getColumn(i);    if (i < 16) {      column.setPreferredWidth(w);    } else {      column.setPreferredWidth(HexEditor.DUMP_COLUMN_WIDTH);    }  }  setPreferredScrollableViewportSize(new Dimension(w * 16 + HexEditor.DUMP_COLUMN_WIDTH,25 * getRowHeight()));  anchorSelectionIndex=leadSelectionIndex=0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void createProRataWeekSteppedScenario() throws Exception {  setDateFactory("2013-04-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PRO_RATA_WEEK_STEPPED_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_RATA_WEEK_EVENTS_PARS_STEPPED,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"PRO_RATA_WEEK_STEPPED",serviceDetails,basicSetup.getSecondCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-04-15 00:00:00"),"FILE_DOWNLOAD",100);  setDateFactory("2013-04-29 00:00:00");  subscrSetup.unsubscribeToService(basicSetup.getCustomerAdminKey(),subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PRO_RATA_WEEK_STEPPED",subDetails);}  }
class C{  public DisplayColor_ createDisplayColor_(){  DisplayColor_Impl displayColor_=new DisplayColor_Impl();  return displayColor_;}  }
class C{  public TIntHashSet(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  private boolean await0(long timeoutMillis,boolean interruptable) throws InterruptedException {  long endTime=System.currentTimeMillis() + timeoutMillis;  if (endTime < 0) {    endTime=Long.MAX_VALUE;  }synchronized (lock) {    if (ready) {      return ready;    } else     if (timeoutMillis <= 0) {      return ready;    }    waiters++;    try {      for (; ; ) {        try {          long timeOut=Math.min(timeoutMillis,DEAD_LOCK_CHECK_INTERVAL);          lock.wait(timeOut);        } catch (        InterruptedException e) {          if (interruptable) {            throw e;          }        }        if (ready) {          return true;        }        if (endTime < System.currentTimeMillis()) {          return ready;        }      }    }  finally {      waiters--;      if (!ready) {        checkDeadLock();      }    }  }}  }
class C{  private void skipStream(Object inputStream,long n) throws IOException, InsufficientDataException {  RandomAccessFile file=null;  BufferedInputStream stream=null;  if (inputStream instanceof RandomAccessFile) {    file=(RandomAccessFile)inputStream;  } else   if (inputStream instanceof BufferedInputStream) {    stream=(BufferedInputStream)inputStream;  } else {    throw new IllegalArgumentException("unsupported input stream object");  }  if (file != null) {    file.seek(file.getFilePointer() + n);    return;  }  long bytesSkipped;  long totalBytesSkipped=0;  while ((bytesSkipped=stream.skip(n - totalBytesSkipped)) >= 0) {    totalBytesSkipped+=bytesSkipped;    if (totalBytesSkipped == n) {      return;    }  }  throw new InsufficientDataException("Insufficient data.  bytes skipped " + totalBytesSkipped + " expected "+ n);}  }
class C{  private void updateStatusBar(){  final StatusBarEx statusBar=(StatusBarEx)WindowManager.getInstance().getStatusBar(myProject);  if (statusBar == null)   return;  statusBar.updateWidgets();}  }
class C{  private static String translateUriToFilename(String uri){  String subStr=uri.substring(FILE_URI_LENGTH);  if (subStr.indexOf("%20") > -1) {    int offset=0;    int index=0;    StringBuilder temp=new StringBuilder(subStr.length());    do {      index=subStr.indexOf("%20",offset);      if (index == -1) {        temp.append(subStr.substring(offset));      } else {        temp.append(subStr.substring(offset,index));        temp.append(' ');        offset=index + 3;      }    } while (index != -1);    subStr=temp.toString();  }  if (subStr.charAt(1) == ':') {    return subStr;  }  return "/" + subStr;}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public void rollUp(List<GroupByAxis> axis,boolean grandTotal) throws ScopeException, SQLScopeException {  if (rollup == null) {    rollup=new ArrayList<>();  }  rollupGrandTotal=grandTotal;  for (  GroupByAxis groupBy : axis) {    ExpressionAST expr=groupBy.getAxis().getDefinition();    IDomain source=expr.getSourceDomain();    Object mapping=null;    if (source.isInstanceOf(IDomain.OBJECT)) {      Object object=source.getAdapter(Domain.class);      if (object != null && object instanceof Domain) {        mapping=select.getScope().get(((Domain)object));      } else {        object=source.getAdapter(Table.class);        if (object != null && object instanceof Table) {          mapping=select.getScope().get((Table)object);        }      }    }    if (mapping == null && !source.equals(IDomain.NULL)) {      throw new SQLScopeException("the source domain is not bound");    }    rollup.add(groupBy);  }}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public static String toString(Node node,Map<String,String> outputProperties){  try {    StringWriter writer=new StringWriter();    toWriter(node,writer,outputProperties);    return writer.toString();  } catch (  TransformerException e) {    throw new RuntimeException(e);  }}  }
class C{  public static char nextKeyTyped(){synchronized (keyLock) {    return keysTyped.removeLast();  }}  }
class C{  private static <T>MethodSet<T> findOrCreateMethodSet(ImmutableEntryHashMapRVM<T,MethodSet<T>> hash,T key){  MethodSet<T> result=hash.get(key);  if (result == null) {    result=new MethodSet<T>(key);    hash.put(key,result);  }  return result;}  }
class C{  public void paintRootPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean loadProperties(Properties props,URL url){  try {    InputStream propsIn=url.openStream();    props.load(propsIn);    return true;  } catch (  java.io.IOException e) {    Debug.error("ImageMaster: Caught IOException loading resources: " + url);    return false;  }}  }
class C{  private void performTrackerAction(int style){  Shell shell=getShell();  if (shell == null || shell.isDisposed()) {    return;  }  Tracker tracker=new Tracker(shell.getDisplay(),style);  tracker.setStippled(true);  Rectangle[] r=new Rectangle[]{shell.getBounds()};  tracker.setRectangles(r);  boolean oldListenToDeactivate=listenToDeactivate;  listenToDeactivate=false;  if (tracker.open()) {    if (shell != null && !shell.isDisposed()) {      shell.setBounds(tracker.getRectangles()[0]);    }  }  listenToDeactivate=oldListenToDeactivate;}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public void log(Object source,Throwable error){  try {    if (isDebug()) {      for (      LogListener listener : getLogListeners()) {        listener.log(error);      }      log(source,error.getMessage(),WARNING);      if (!(error instanceof BotException)) {        error.printStackTrace();        StringWriter writer=new StringWriter();        PrintWriter printer=new PrintWriter(writer);        error.printStackTrace(printer);        printer.flush();        String stack=writer.toString();        log(source,stack.substring(0,Math.max(100,stack.length() - 1)),Level.WARNING);      }    }  } catch (  Exception exception) {    System.out.println(exception);  }}  }
class C{  public void processVolumeExpansion(StorageSystem storageSystem,URI storagePoolURI,URI volumeId,CIMArgument[] outArgs) throws Exception {  StringBuilder logMsgBuilder=new StringBuilder(String.format("Processing volume expansion - "));  CimConnection connection=_cimConnection.getConnection(storageSystem);  WBEMClient client=connection.getCimClient();  StoragePool storagePool=_dbClient.queryObject(StoragePool.class,storagePoolURI);  StringMap reservationMap=storagePool.getReservedCapacityMap();  reservationMap.remove(volumeId.toString());  updateStoragePoolCapacity(client,storagePool);  _dbClient.persistObject(storagePool);  Volume volume=_dbClient.queryObject(Volume.class,volumeId);  CIMObjectPath volumePath=(CIMObjectPath)_cimPath.getFromOutputArgs(outArgs,IBMSmisConstants.CP_THE_ELEMENT);  boolean isSuccess=false;  if (volumePath != null) {    CIMInstance volumeInstance=client.getInstance(volumePath,true,false,null);    if (volumeInstance != null) {      isSuccess=true;      volume.setProvisionedCapacity(getProvisionedCapacityInformation(volumeInstance));      volume.setAllocatedCapacity(getAllocatedCapacityInformation(client,volumeInstance));      _dbClient.persistObject(volume);      logMsgBuilder.append(String.format("%n   Capacity: %s, Provisioned capacity: %s, Allocated Capacity: %s",volume.getCapacity(),volume.getProvisionedCapacity(),volume.getAllocatedCapacity()));    }  }  if (!isSuccess) {    UnsignedInteger32 returnCoede=(UnsignedInteger32)_cimPath.getFromOutputArgs(outArgs,IBMSmisConstants.CP_RETURN_CODE);    logMsgBuilder.append("\n");    logMsgBuilder.append(String.format("Failed to expand volume: %s with return code: %s",volume.getId(),returnCoede.toString()));  }  _log.info(logMsgBuilder.toString());}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  return errors;}  }
class C{  public AbstractDriver(){  this(new NoNameCoder());}  }
class C{  private String obtenerMensajeDeUnidadesNoDisponibles(List udocs,List idsUdocsNoDisponibles){  String uDocsMessage="";  if (!ListUtils.isEmpty(udocs) && !ListUtils.isEmpty(idsUdocsNoDisponibles)) {    for (int i=0; i < udocs.size(); i++) {      UdocEnUIPO udocEnUIPO=(UdocEnUIPO)udocs.get(i);      for (int j=0; j < idsUdocsNoDisponibles.size(); j++) {        DetallePrestamoVO detallePrestamoVO=(DetallePrestamoVO)idsUdocsNoDisponibles.get(j);        if (udocEnUIPO.getIdunidaddoc().equalsIgnoreCase(detallePrestamoVO.getIdudoc())) {          uDocsMessage+=StringUtils.addCharacterAtLeft(String.valueOf(i + 1),3,"0") + "; ";          break;        }      }    }  }  return uDocsMessage;}  }
class C{  public static void writeMessageBodyTo(MimeMessage message,OutputStream bodyOs) throws IOException, MessagingException {  OutputStream bos;  InputStream bis;  try {    bos=MimeUtility.encode(bodyOs,message.getEncoding());    bis=message.getInputStream();  } catch (  UnsupportedDataTypeException udte) {    try {      bis=message.getRawInputStream();      bos=bodyOs;    } catch (    javax.mail.MessagingException _) {      throw udte;    }  }catch (  javax.mail.MessagingException me) {    try {      bis=message.getRawInputStream();      bos=bodyOs;    } catch (    javax.mail.MessagingException _) {      throw me;    }  }  try {    IOUtils.copy(bis,bos);  }  finally {    IOUtils.closeQuietly(bis);  }}  }
class C{  public boolean isText(){  return true;}  }
class C{  protected void initModules(Collection<IFloodlightModule> moduleSet) throws FloodlightModuleException {  for (  IFloodlightModule module : moduleSet) {    Map<Class<? extends IFloodlightService>,IFloodlightService> simpls=module.getServiceImpls();    if (simpls != null) {      for (      Entry<Class<? extends IFloodlightService>,IFloodlightService> s : simpls.entrySet()) {        if (logger.isDebugEnabled()) {          logger.debug("Setting " + s.getValue() + "  as provider for "+ s.getKey().getCanonicalName());        }        if (floodlightModuleContext.getServiceImpl(s.getKey()) == null) {          floodlightModuleContext.addService(s.getKey(),s.getValue());        } else {          throw new FloodlightModuleException("Cannot set " + s.getValue() + " as the provider for "+ s.getKey().getCanonicalName()+ " because "+ floodlightModuleContext.getServiceImpl(s.getKey())+ " already provides it");        }      }    }  }  for (  IFloodlightModule module : moduleSet) {    if (logger.isDebugEnabled()) {      logger.debug("Initializing " + module.getClass().getCanonicalName());    }    module.init(floodlightModuleContext);  }}  }
class C{  public static long parseLongBase10(final CharSequence str,final int start,final int end){  int pos=start;  char cur=str.charAt(pos);  boolean isNegative=(cur == '-');  if ((isNegative || (cur == '+')) && (++pos < end)) {    cur=str.charAt(pos);  }  if ((cur < '0') || (cur > '9')) {    throw NOT_A_NUMBER;  }  long decimal=0;  while (true) {    final int digit=cur - '0';    if ((digit >= 0) && (digit <= 9)) {      final long tmp=(decimal << 3) + (decimal << 1) + digit;      if (tmp < decimal) {        throw PRECISION_OVERFLOW;      }      decimal=tmp;    } else {      break;    }    if (++pos < end) {      cur=str.charAt(pos);    } else {      break;    }  }  if (pos != end) {    throw TRAILING_CHARACTERS;  }  return isNegative ? -decimal : decimal;}  }
class C{  public boolean resourceSupportAR(Integer id){  if (id == null) {    return false;  }  return resourceSupportAR(id.intValue());}  }
class C{  public TermVectorsRequest perFieldAnalyzer(Map<String,String> perFieldAnalyzer){  this.perFieldAnalyzer=perFieldAnalyzer != null && perFieldAnalyzer.size() != 0 ? Maps.newHashMap(perFieldAnalyzer) : null;  return this;}  }
class C{  private void addCacheServerConfig(CacheServerConfig managerConfig){  checkReadOnly();  if (managerConfig == null)   return;  for (Iterator iter=this.cacheServerConfigs.iterator(); iter.hasNext(); ) {    CacheServerConfigImpl impl=(CacheServerConfigImpl)iter.next();    if (impl.equals(managerConfig)) {      return;    }  }  this.cacheServerConfigs.add(managerConfig);  configChanged();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.083 -0500",hash_original_method="9B7C20934D3E00C37812C7E94DAAB15E",hash_generated_method="9B7C20934D3E00C37812C7E94DAAB15E") void enforceNotSealed(){  if (isSealed()) {    throw new IllegalStateException("Cannot perform this " + "action on an sealed instance.");  }}  }
class C{  public Object clone(){  return new MultiKeyMap((AbstractHashedMap)map.clone());}  }
class C{  public static FunctionLib[] loadFromDirectory(Resource dir,Identification id) throws FunctionLibException {  if (!dir.isDirectory())   return new FunctionLib[0];  ArrayList<FunctionLib> arr=new ArrayList<FunctionLib>();  Resource[] files=dir.listResources(new ExtensionResourceFilter(new String[]{"fld","fldx"}));  for (int i=0; i < files.length; i++) {    if (files[i].isFile())     arr.add(FunctionLibFactory.loadFromFile(files[i],id));  }  return arr.toArray(new FunctionLib[arr.size()]);}  }
class C{  protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {  if (_inputStream == null) {    return false;  }  int amount=_inputEnd - _inputPtr;  if (amount > 0 && _inputPtr > 0) {    _currInputProcessed+=_inputPtr;    _currInputRowStart-=_inputPtr;    System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount);    _inputEnd=amount;  } else {    _inputEnd=0;  }  _inputPtr=0;  while (_inputEnd < minAvailable) {    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);    if (count < 1) {      _closeInput();      if (count == 0) {        throw new IOException("InputStream.read() returned 0 characters when trying to read " + amount + " bytes");      }      return false;    }    _inputEnd+=count;  }  return true;}  }
class C{  static boolean verifyZipFile(File file){  try {    ZipFile zipFile=new ZipFile(file);    try {      zipFile.close();      return true;    } catch (    IOException e) {      Log.w(TAG,"Failed to close zip file: " + file.getAbsolutePath());    }  } catch (  ZipException ex) {    Log.w(TAG,"File " + file.getAbsolutePath() + " is not a valid zip file.",ex);  }catch (  IOException ex) {    Log.w(TAG,"Got an IOException trying to open zip file: " + file.getAbsolutePath(),ex);  }  return false;}  }
class C{  public Long deleteUserAdmin(String SID,Long user_idClient){  log.debug("deleteUserAdmin");  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkAdminLevel(user_level)) {      if (!users_id.equals(user_idClient)) {        Long userId=usersDao.deleteUserID(user_idClient);        return userId;      } else {        return new Long(-38);      }    } else {      return new Long(-11);    }  } catch (  Exception err) {    log.error("[deleteUserAdmin]",err);  }  return null;}  }
class C{  public boolean add(Script obj){  assert false : "CodeFragmentList.add(...) without line ref";  return false;}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public void resetAxes(){  super.resetAxes();  if (xData2 != null && yData2 != null) {    setupAxis(xAxis,yAxis,xData2,yData2);  }}  }
class C{  public void mergeLoanToAssetAccountMappingChanges(final JsonElement element,final String paramName,final Long productId,final int accountTypeId,final String accountTypeName,final Map<String,Object> changes){  mergeProductToAccountMappingChanges(element,paramName,productId,accountTypeId,accountTypeName,changes,GLAccountType.ASSET,PortfolioProductType.LOAN);}  }
class C{  protected final void readResponse(InputStream input) throws IOException {  if (isGzipped) {    readUnzipedResponse(new GZIPInputStream(input));  } else {    readUnzipedResponse(input);  }}  }
class C{  public static byte[] decodeBase64(String value){  int byteShift=4;  int tmp=0;  boolean done=false;  final StringBuilder buffer=new StringBuilder();  for (int i=0; i != value.length(); i++) {    final char c=value.charAt(i);    final int sixBit=(c < 123) ? EncodingGroovyMethodsSupport.TRANSLATE_TABLE[c] : 66;    if (sixBit < 64) {      if (done)       throw new RuntimeException("= character not at end of base64 value");      tmp=(tmp << 6) | sixBit;      if (byteShift-- != 4) {        buffer.append((char)((tmp >> (byteShift * 2)) & 0XFF));      }    } else     if (sixBit == 64) {      byteShift--;      done=true;    } else     if (sixBit == 66) {      throw new RuntimeException("bad character in base64 value");    }    if (byteShift == 0)     byteShift=4;  }  try {    return buffer.toString().getBytes("ISO-8859-1");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("Base 64 decode produced byte values > 255");  }}  }
class C{  public void addLdc2w(double d){  addOpcode(LDC2_W);  addIndex(constPool.addDoubleInfo(d));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:50.350 -0500",hash_original_method="8EA08E2DEACD96E97EA367485FCE09D0",hash_generated_method="5249F70A2FFA509D6B2B6D4E7A13567C") public CdmaCellLocation(Bundle bundle){  this.mBaseStationId=bundle.getInt("baseStationId",mBaseStationId);  this.mBaseStationLatitude=bundle.getInt("baseStationLatitude",mBaseStationLatitude);  this.mBaseStationLongitude=bundle.getInt("baseStationLongitude",mBaseStationLongitude);  this.mSystemId=bundle.getInt("systemId",mSystemId);  this.mNetworkId=bundle.getInt("networkId",mNetworkId);}  }
class C{  public static ConstantSize dluY(int value){  return ConstantSize.dluY(value);}  }
class C{  public RestaurantHolder address(String address){  detail.setText(address);  detail.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);  detailIsAddress=true;  return this;}  }
class C{  public MqttPubRel(byte info,byte[] data) throws IOException {  super(MqttWireMessage.MESSAGE_TYPE_PUBREL);  ByteArrayInputStream bais=new ByteArrayInputStream(data);  DataInputStream dis=new DataInputStream(bais);  msgId=dis.readUnsignedShort();  dis.close();}  }
class C{  @Override public int compareTo(final Row<T> that){  return (this.est < that.est) ? -1 : (this.est > that.est) ? 1 : 0;}  }
class C{  protected void addComponentToSideMenu(Container menu,Component cmp){  sideMenu.addComponentToSideMenuImpl(menu,cmp);}  }
class C{  public Axis prune(){  if (this.parent.getParent() == null) {    return this;  } else {    Space root=new Space(this.parent.getUniverse(),this.getParent().getDomain());    return root.A(this.dimension).withName(name);  }}  }
class C{  static public void assertLeftAligned(View first,View second,int margin){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstLeft=xy[0];  second.getLocationOnScreen(xy);  int secondLeft=xy[0];  assertEquals("views are not left aligned",Math.abs(firstLeft - secondLeft),margin);}  }
class C{  public static int asInt(long[] data,int n){  if ((data == null) || (data.length == 0)) {    throw new SketchesArgumentException("Input is null or empty.");  }  return asInteger(data,n);}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  ValidateUserInfo validateUserInfo=new ValidateUserInfo();  if (!TextUtils.isEmpty(password) && !validateUserInfo.isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!validateUserInfo.isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addConvert(String attributeName,ConvertMetadata convert){  if (convert.isForMapKey()) {    addMapKeyConvert(attributeName,convert);  } else {    if (!m_converts.containsKey(attributeName)) {      m_converts.put(attributeName,new ArrayList<ConvertMetadata>());    }    m_converts.get(attributeName).add(convert);  }}  }
class C{  public static void registerSubTileSignature(Class<? extends SubTileEntity> subtileClass,SubTileSignature signature){  subTileSignatures.put(subtileClass,signature);}  }
class C{  public static MWarehousePrice[] find(MBPartner bPartner,boolean IsSOTrx,Timestamp valid,int M_Warehouse_ID,String Value,String Name,String UPC,String SKU,String trxName){  int M_PriceList_ID=IsSOTrx ? bPartner.getM_PriceList_ID() : bPartner.getPO_PriceList_ID();  MPriceList pl=null;  if (M_PriceList_ID == 0)   pl=MPriceList.getDefault(bPartner.getCtx(),IsSOTrx); else   pl=MPriceList.get(bPartner.getCtx(),M_PriceList_ID,trxName);  if (pl == null) {    s_log.severe("No PriceList found");    return null;  }  MPriceListVersion plv=pl.getPriceListVersion(valid);  if (plv == null) {    s_log.severe("No PriceListVersion found for M_PriceList_ID=" + pl.getM_PriceList_ID());    return null;  }  return find(bPartner.getCtx(),plv.getM_PriceList_Version_ID(),M_Warehouse_ID,Value,Name,UPC,SKU,trxName);}  }
class C{  public SubjectAlternativeNameExtension(){  extensionId=PKIXExtensions.SubjectAlternativeName_Id;  critical=false;  names=new GeneralNames();}  }
class C{  protected final void throwException(String mesg) throws ParserException {  String m=mesg + ". Found token type " + token.type().toString();  if (!token.content().equals("")) {    m+=", token content " + token.content();  }  throw new ParserException(getContext(),m);}  }
class C{  public boolean pointOutside(final Vector v){  return pointOutside(v.x,v.y,v.z);}  }
class C{  private void updateCheckpoints(){  IResource[] checkpoints=null;  try {    checkpoints=getModel().getCheckpoints(false);  } catch (  CoreException e) {    TLCUIActivator.getDefault().logError("Error checking chekpoint data",e);  }  if (checkpoints != null && checkpoints.length > 0) {    this.checkpointIdText.setText(checkpoints[0].getName());  } else {    this.checkpointIdText.setText(EMPTY_STRING);  }  if ((checkpoints == null) || (checkpoints.length == 0)) {    checkpointSizeText.setVisible(false);    chkpointSizeLabel.setVisible(false);    chkptDeleteButton.setVisible(false);  } else {    checkpointSizeText.setText(String.valueOf(ResourceHelper.getSizeOfJavaFileResource(checkpoints[0]) / 1000));    checkpointSizeText.setVisible(true);    chkpointSizeLabel.setVisible(true);    chkptDeleteButton.setVisible(true);  }}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new HungarianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public LocalDate create(){  return LocalDate.now();}  }
class C{  public void scale(double scaleX,double scaleY){  FXGMatrix newM=new FXGMatrix(scaleX,0,0,scaleY,0,0);  this.concat(newM);}  }
class C{  public final void popIteratorRoot(){  m_iteratorRoots.popQuick();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  protected ExecutionRegionImpl(){  super();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public XMLParser(final String namespace,final String[] schemas) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(namespace);    marshaller=jc.createMarshaller();    marshaller.setSchema(XMLSchemaUtils.createSchema(schemas));    unmarshaller=jc.createUnmarshaller();    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schemas));  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + namespace,e);  }}  }
class C{  public Rational(Rational r){  mNumerator=r.mNumerator;  mDenominator=r.mDenominator;}  }
class C{  public String xamzBucketRegion(){  return this.xamzBucketRegion;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.179 -0500",hash_original_method="CD027E2457CF527330FF9F4C0A972B91",hash_generated_method="A01A741425EF2E0926BFA778BF4AFACC") public ContentLanguageHeader createContentLanguageHeader(Locale contentLanguage){  if (contentLanguage == null)   throw new NullPointerException("null arg contentLanguage");  ContentLanguage c=new ContentLanguage();  c.setContentLanguage(contentLanguage);  return c;}  }
class C{  public LoadBalancedSplitter(int numChannels){  if (numChannels < 1)   throw new IllegalArgumentException("numChannels");  chBusy=new boolean[numChannels];  Arrays.fill(chBusy,false);  gate=new Semaphore(numChannels);}  }
class C{  public void initializeGlobalComment(final List<IComment> comments){  m_node.getComments().initializeGlobalCodeNodeComment(comments);}  }
class C{  @Override public boolean isResultRequired(ResultProducer rp,Object[] key) throws Exception {  return true;}  }
class C{  public boolean updateLayout(long time,long dt){  PerfTraceEvent.instant("StripLayoutHelper:updateLayout");  final boolean doneAnimating=onUpdateAnimation(time,false);  updateStrip(time,dt);  return doneAnimating;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.SIMPLE_ATTRIBUTE___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);}return super.eIsSet(featureID);}  }
class C{  protected boolean useShadowEngine(){  return primary == false && IndexMetaData.isIndexUsingShadowReplicas(settings);}  }
class C{  public boolean userCanDeleteDept(int connectedUserId,int DeptId,String entidad) throws Exception {  boolean can=false;  int parentId=Defs.NULL_ID;  int parentDeptMgrId=Defs.NULL_ID;  try {    parentId=getDeptParentId(DeptId,entidad);    if (parentId == Defs.ROOT_DEPT_ID)     parentDeptMgrId=0; else     parentDeptMgrId=getDeptMgrId(parentId,entidad);    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_DELETE,Defs.NULL_ID,parentDeptMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.237 -0400",hash_original_method="A888FEB71580586279596AD804FE57E7",hash_generated_method="8B5A26CB4F49DEF5C0FFC6A712359528") protected Key engineTranslateKey(Key key) throws InvalidKeyException {  if (key != null) {    if (key instanceof DSAPrivateKey) {      DSAPrivateKey privateKey=(DSAPrivateKey)key;      DSAParams params=privateKey.getParams();      try {        return engineGeneratePrivate(new DSAPrivateKeySpec(privateKey.getX(),params.getP(),params.getQ(),params.getG()));      } catch (      InvalidKeySpecException e) {        throw new InvalidKeyException("ATTENTION: InvalidKeySpecException: " + e);      }    }    if (key instanceof DSAPublicKey) {      DSAPublicKey publicKey=(DSAPublicKey)key;      DSAParams params=publicKey.getParams();      try {        return engineGeneratePublic(new DSAPublicKeySpec(publicKey.getY(),params.getP(),params.getQ(),params.getG()));      } catch (      InvalidKeySpecException e) {        throw new InvalidKeyException("ATTENTION: InvalidKeySpecException: " + e);      }    }  }  throw new InvalidKeyException("'key' is neither DSAPublicKey nor DSAPrivateKey");}  }
class C{  public static TVShowEpisodeDetailsFragment newInstance(final int tvshowId,final int episodeId){  TVShowEpisodeDetailsFragment fragment=new TVShowEpisodeDetailsFragment();  Bundle args=new Bundle();  args.putInt(TVSHOWID,tvshowId);  args.putInt(EPISODEID,episodeId);  fragment.setArguments(args);  return fragment;}  }
class C{  public void addRow(String value,double prob){  addRow(ValueFactory.create(value),prob);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiSeparatorUI();  return MultiLookAndFeel.createUIs(mui,((MultiSeparatorUI)mui).uis,a);}  }
class C{  Type fold(int opcode,List<Type> argtypes){  int argCount=argtypes.length();  if (argCount == 1)   return fold1(opcode,argtypes.head); else   if (argCount == 2)   return fold2(opcode,argtypes.head,argtypes.tail.head); else   throw new AssertionError();}  }
class C{  public static <V,W>Pair<V,W> of(final V left,final W right){  return new Pair<>(left,right);}  }
class C{  public boolean readDescriptor(String address,String serviceUUID,String characteristicUUID,String descriptorUUID){  if (mBluetoothGattMap.get(address) == null) {    Log.w(TAG,"BluetoothGatt is null");    return false;  }  BluetoothGattService service=mBluetoothGattMap.get(address).getService(UUID.fromString(serviceUUID));  BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));  BluetoothGattDescriptor descriptor=characteristic.getDescriptor(UUID.fromString(descriptorUUID));  return mBluetoothGattMap.get(address).readDescriptor(descriptor);}  }
class C{  private void initRectsWithoutBorders(){  mImageRect.set(mRect);  if (mShadowWidth > 0) {    mImageRect.right-=mShadowWidth;    mImageRect.bottom-=mShadowWidth;  }}  }
class C{  @Override public final void write(final DataOutput output) throws IOException {  output.writeInt(size());  for (  LongWritable vertex : vertices) {    vertex.write(output);  }  output.writeDouble(score);  output.writeDouble(innerScore);  output.writeDouble(boundaryScore);}  }
class C{  protected void createControl(Composite parent,int treeStyle){  GridLayout layout=new GridLayout();  layout.marginHeight=0;  layout.marginWidth=0;  setLayout(layout);  setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));  if (useNativeSearchField(parent)) {    this.filterComposite=new Composite(this,SWT.NONE);  } else {    this.filterComposite=new Composite(this,SWT.BORDER);    this.filterComposite.setBackground(getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));  }  GridLayout filterLayout=new GridLayout(2,false);  filterLayout.marginHeight=0;  filterLayout.marginWidth=0;  this.filterComposite.setLayout(filterLayout);  this.filterComposite.setFont(parent.getFont());  createFilterControls(this.filterComposite);  GridData gridData=new GridData(SWT.FILL,SWT.BEGINNING,true,false);  this.filterComposite.setVisible(isShowFilterControls());  gridData.exclude=!isShowFilterControls();  this.filterComposite.setLayoutData(gridData);  this.treeComposite=new Composite(this,SWT.NONE);  GridLayout treeCompositeLayout=new GridLayout();  treeCompositeLayout.marginHeight=0;  treeCompositeLayout.marginWidth=0;  this.treeComposite.setLayout(treeCompositeLayout);  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);  this.treeComposite.setLayoutData(data);  createTreeControl(this.treeComposite,treeStyle);}  }
class C{  public static TriplePath createTriplePath(Model model,Resource subject,Resource path,RDFNode object){  TriplePath triplePath=model.createResource(SP.TriplePath).as(TriplePath.class);  triplePath.addProperty(SP.subject,subject);  triplePath.addProperty(SP.path,path);  triplePath.addProperty(SP.object,object);  return triplePath;}  }
class C{  protected double calculateTotalHeight(double contentHeight){  double result=contentHeight;  result=this.padding.extendHeight(result);  result=this.frame.getInsets().extendHeight(result);  result=this.margin.extendHeight(result);  return result;}  }
class C{  public Buffer(LuaValue value){  bytes=NOBYTES;  length=offset=0;  this.value=value;}  }
class C{  public boolean isMainline(){  if (((connectA != null) && (((TrackSegment)connectA).getMainline())) || ((connectB != null) && (((TrackSegment)connectB).getMainline()))) {    return true;  } else {    return false;  }}  }
class C{  public KpcRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public final void pushPredicateRoot(int n){  m_predicateRoots.push(n);}  }
class C{  public static InheritanceTree createFromClassPath(List<String> classPath){  if (!Properties.INSTRUMENT_CONTEXT && !Properties.INHERITANCE_FILE.isEmpty()) {    try {      InheritanceTree tree=readInheritanceTree(Properties.INHERITANCE_FILE);      LoggingUtils.getEvoLogger().info("* Inheritance tree loaded from {}",Properties.INHERITANCE_FILE);      return tree;    } catch (    IOException e) {      LoggingUtils.getEvoLogger().warn("* Error loading inheritance tree: {}",e);    }  }  logger.debug("Reading JDK data");  InheritanceTree inheritanceTree=readJDKData();  if (inheritanceTree == null) {    inheritanceTree=new InheritanceTree();  }  logger.debug("CP: {}",classPath);  for (  String classPathEntry : classPath) {    logger.debug("Looking at CP entry: {}",classPathEntry);    if (classPathEntry.isEmpty())     continue;    if (classPathEntry.matches(".*evosuite-.*\\.jar"))     continue;    logger.debug("Analyzing classpath entry {}",classPathEntry);    LoggingUtils.getEvoLogger().info("  - " + classPathEntry);    for (    String className : ResourceList.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getAllClasses(classPathEntry,"",true,false)) {      analyzeClassStream(inheritanceTree,ResourceList.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getClassAsStream(className),false);    }  }  return inheritanceTree;}  }
class C{  public boolean isInMigration(){  return inMigration;}  }
class C{  public void startWith() throws IOException {  printer.println();  print("with",null);  print("{",null);  indent+="    ";}  }
class C{  private void registerCharsetNameFor(String charsetName,String[] aliases){  if (charsetName == null)   throw new NullPointerException();  for (  String a : aliases) {    String k=a.toUpperCase();    String csv=charsetMap.get(k);    if (csv == null) {      charsetMap.put(k,charsetName);      csv=charsetName;    } else     if (!csv.equals(charsetName)) {      throw new ConflictingCharsetError(a,charsetName,csv);    }    final Collection<String> c=unresolved.get(k);    if (c != null) {      for (      String aa : c) {        k=aa.toUpperCase();        String csvv=charsetMap.get(k);        if (csvv == null)         charsetMap.put(k,csv);        unresolved.remove(k);      }      throw new MissingValidCharsetNameError(charsetName,c);    }  }}  }
class C{  private void approveLoanApplication(){  if (this.loanId != null) {    this.loanTransactionHelper.approveLoan(this.dateString,this.loanId);    System.out.println("Successfully approved loan (ID: " + this.loanId + ")");  }}  }
class C{  private void linkSignatures(List<PdfSignatureOrDocTimestampInfo> signatures){  List<PdfSignatureOrDocTimestampInfo> previousList=new ArrayList<PdfSignatureOrDocTimestampInfo>();  for (  PdfSignatureOrDocTimestampInfo sig : signatures) {    if (CollectionUtils.isNotEmpty(previousList)) {      for (      PdfSignatureOrDocTimestampInfo previous : previousList) {        previous.addOuterSignature(sig);      }    }    previousList.add(sig);  }}  }
class C{  @Override public void onDetonation(World worldObj,Pos3D position,int fuseTicks){  super.onDetonation(worldObj,position,fuseTicks);  if (fuseTicks % 25 == 0) {    worldObj.playSoundEffect(position.xPos,position.yPos,position.zPos,Reference.PREFIX + "alarm",4F,1F);  }}  }
class C{  public void addSplitImportNames(Map<String,String[]> names){  if (splitImportNames == null) {    splitImportNames=new TreeMap<String,String[]>();  }  splitImportNames.putAll(names);}  }
class C{  public Future<ReplDBMSHeader> watchForCommittedSequenceNumber(long seqno,boolean terminate) throws InterruptedException {  Future<ReplDBMSHeader> watch=progressTracker.watchForCommittedSequenceNumber(seqno,terminate);  notifyThreads();  return watch;}  }
class C{  public RenderTextFilter(String text,Font font,Paint paint,Composite composite,AffineTransform transform){  this.text=text;  this.font=font;  this.composite=composite;  this.paint=paint;  this.transform=transform;}  }
class C{  public String retrieveSignature(String user) throws IllegalArgumentException, IOException, ServiceException {  if (isBlankOrNullString(user)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Getting signature settings for user " + user + " ...");  GenericEntry signatureEntry=retrieveSettingsEntry(user,Constants.SIGNATURE);  if (signatureEntry != null)   return signatureEntry.getProperty(Constants.SIGNATURE);  return null;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public void onClick(View v){  if (v == mBuyButton) {    if (Consts.DEBUG) {      Log.d(TAG,"buying: " + mItemName + " sku: "+ mSku);    }    if (mManagedType != Managed.SUBSCRIPTION && !mBillingService.requestPurchase(mSku,Consts.ITEM_TYPE_INAPP,mPayloadContents)) {      showDialog(DIALOG_BILLING_NOT_SUPPORTED_ID);    } else     if (!mBillingService.requestPurchase(mSku,Consts.ITEM_TYPE_SUBSCRIPTION,mPayloadContents)) {      showDialog(DIALOG_SUBSCRIPTIONS_NOT_SUPPORTED_ID);    }  } else   if (v == mEditPayloadButton) {    showPayloadEditDialog();  } else   if (v == mEditSubscriptionsButton) {    editSubscriptions();  }}  }
class C{  @Override final public boolean isMinus(){  return false;}  }
class C{  public JobBuilder requestRecovery(boolean jobShouldRecover){  this.shouldRecover=jobShouldRecover;  return this;}  }
class C{  private String keywordFilter(String line){  if (line == null || line.equals("")) {    return "";  }  StringBuffer buf=new StringBuffer();  HashMap usedReservedWords=new HashMap();  int i=0, startAt=0;  char ch;  StringBuffer temp=new StringBuffer();  while (i < line.length()) {    temp.setLength(0);    ch=line.charAt(i);    startAt=i;    while (i < line.length() && ((ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122))) {      temp.append(ch);      i++;      if (i < line.length()) {        ch=line.charAt(i);      }    }    String tempString=temp.toString();    if (reservedWords.containsKey(tempString) && !usedReservedWords.containsKey(tempString)) {      usedReservedWords.put(tempString,tempString);      line=replace(line,tempString,(reservedWordStart + tempString + reservedWordEnd));      i+=(reservedWordStart.length() + reservedWordEnd.length());    } else {      i++;    }  }  buf.append(line);  return buf.toString();}  }
class C{  public void write(int b) throws IOException {  if (filePosition < dataEnd) {    int pos=(int)(filePosition - bufferStart);    buffer[pos]=(byte)b;    bufferModified=true;    filePosition++;  } else {    if (dataSize != buffer.length) {      int pos=(int)(filePosition - bufferStart);      buffer[pos]=(byte)b;      bufferModified=true;      filePosition++;      dataSize++;      dataEnd++;    } else {      seek(filePosition);      write(b);    }  }}  }
class C{  boolean sentenceMatchExpression(final Expression other){  final String matchString=other.getNormalized();  if (matchString.contains(JOKER)) {    if (matchString.equals(JOKER)) {      if (!matchesJokerString(getTypeString(),other.getTypeString())) {        return false;      }    } else {      if (!matchesJokerString(getNormalized(),matchString)) {        return false;      }    }  } else   if (other.getMatcher() != null) {    return original.equals(other.original);  } else   if (!matchesNormalized(other)) {    return false;  }  return true;}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_PP_ForecastRun_ID=getRecord_ID();}  }
class C{  private ProxyGraphicsNode createMiddleMarker(double[] prev,int prevSegType,double[] curr,int currSegType,double[] next,int nextSegType){  Point2D markerPosition=getSegmentTerminatingPoint(curr,currSegType);  double rotation=middleMarker.getOrient();  if (Double.isNaN(rotation)) {    rotation=computeRotation(prev,prevSegType,curr,currSegType,next,nextSegType);  }  AffineTransform markerTxf=computeMarkerTransform(middleMarker,markerPosition,rotation);  ProxyGraphicsNode gn=new ProxyGraphicsNode();  gn.setSource(middleMarker.getMarkerNode());  gn.setTransform(markerTxf);  return gn;}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>Supplier<R> partial8(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final T6 t6,final T7 t7,final T8 t8,final OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R> octFunc){  return null;}  }
class C{  public void reinitializeContacts(EvolutionState state){}  }
class C{  public final void addElements(int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_firstFree+=numberOfElements;}  }
class C{  public void close() throws IOException {  if (out != null) {    try {      finish();    } catch (    IOException e) {    }    try {      out.close();    } catch (    IOException e) {      if (exception == null)       exception=e;    }    out=null;  }  if (exception != null)   throw exception;}  }
class C{  private static String[] splitWorker(final String str,final String separatorChars,final int max,final boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  List<String> list=new ArrayList<String>();  int sizePlus1=1;  int i=0, start=0;  boolean match=false;  boolean lastMatch=false;  if (separatorChars == null) {    while (i < len) {      if (Character.isWhitespace(str.charAt(i))) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  } else   if (separatorChars.length() == 1) {    char sep=separatorChars.charAt(0);    while (i < len) {      if (str.charAt(i) == sep) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  } else {    while (i < len) {      if (separatorChars.indexOf(str.charAt(i)) >= 0) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  }  if (match || preserveAllTokens && lastMatch) {    list.add(str.substring(start,i));  }  return list.toArray(new String[list.size()]);}  }
class C{  public IntVector(int... vals){  mValues=vals.clone();}  }
class C{  protected void sumPortMaps(Map<URI,Integer> net2NumPortsMap,Map<URI,Integer> net2NumExistingPortsMap){  for (  URI networkURI : net2NumPortsMap.keySet()) {    Integer existing=net2NumExistingPortsMap.get(networkURI);    if (existing != null) {      Integer sum=existing + net2NumPortsMap.get(networkURI);      net2NumPortsMap.put(networkURI,sum);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.679 -0400",hash_original_method="73B7A0C9686C873C380A7B8BF0105C29",hash_generated_method="5225E4D3BFB94944585957469C7462FF") public NameFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  public static Validator<CharSequence> iri(@NonNull final Context context){  return new IRIValidator(context,R.string.default_error_message);}  }
class C{  public int hashCode(){  return (wildcard + "|" + ns).hashCode();}  }
class C{  public boolean userCanCreateGroup(int connectedUserId,String entidad) throws Exception {  boolean can=false;  try {    can=hasUserGroupAuth(connectedUserId,USER_ACTION_ID_CREATE,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public ValidationException(String message){  super(message);}  }
class C{  private void checkLiteralConversion(Context cx,TypeValue dest_type,ArgumentListNode element_list){  boolean conversion_to_int=dest_type == cx.intType();  boolean conversion_to_uint=dest_type == cx.uintType();  if (!conversion_to_int && !conversion_to_uint)   return;  for (int i=0; i < element_list.size(); i++) {    Node item=element_list.items.get(i);    if (item.isLiteralNumber()) {      LiteralNumberNode literal=(LiteralNumberNode)item;      double d_value=literal.numericValue.doubleValue();      if (conversion_to_int) {        if (d_value != literal.numericValue.intValue()) {          cx.error(item.getPosition(),kError_LossyConversion,dest_type.getPrintableName());        }      } else       if (conversion_to_uint) {        if (d_value < 0 || d_value != (long)d_value) {          cx.error(item.getPosition(),kError_LossyConversion,dest_type.getPrintableName());        }      } else       assert (false);    }  }}  }
class C{  public boolean removeAlgorithm(final HouseholdAlgorithm algorithm){  return this.householdAlgorithms.remove(algorithm);}  }
class C{  int lastUseIndex(Name n){  int ni=n.index, nmax=names.length;  assert (names[ni] == n);  if (result == ni)   return nmax;  for (int i=nmax; --i > ni; ) {    if (names[i].lastUseIndex(n) >= 0)     return i;  }  return -1;}  }
class C{  protected String composeFilenameMetoc(SymbolCode code){  String scheme=code.getScheme();  String category=code.getCategory();  String staticDynamic=code.getStaticDynamic();  String functionId=code.getFunctionId();  String graphicType=code.getGraphicType();  if (functionId == null)   functionId="------";  StringBuilder sb=new StringBuilder();  sb.append(DIR_ICON_METOC).append("/").append(scheme).append(category).append(staticDynamic).append(functionId).append(graphicType).append("--").append(PATH_SUFFIX);  return sb.toString().toLowerCase();}  }
class C{  public static JavaCompilerOptions fromConfig(){  return fromConfig(CeylonConfig.get());}  }
class C{  public synchronized void push(){  if (null == m_target) {    getErrorHandler().error("Can not push events to a null target",null,null);    return;  }  try {    final int size=m_used;    int base=m_index - m_used + 1;    if (base < 0) {      base+=m_buffer.length;    }    for (int i=0; i < size; i++) {      final int index=(base + i) % m_buffer.length;      m_target.processEvent(m_buffer[index]);      m_buffer[index]=null;      m_used--;    }  } catch (  final Throwable throwable) {    getErrorHandler().error("Unknown error pushing events.",throwable,null);  }}  }
class C{  void print(Prototype prototype){  buildFunction(prototype,true);}  }
class C{  public boolean isSerNoMandatory(){  Object oo=get_Value(COLUMNNAME_IsSerNoMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected void paintTrack(Graphics g,JComponent bar,Rectangle trackBounds){  g.setColor(style.getHighLightColor());  g.fillRect(trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height);  g.setColor(style.getShadowColor());  int width=trackBounds.width;  int height=trackBounds.height;  if (scrollbar.getOrientation() == JScrollBar.HORIZONTAL) {    height--;  } else {    width--;  }  g.drawRect(trackBounds.x,trackBounds.y,width,height);}  }
class C{  void stopRetrievingLocation(){  locationManager.removeUpdates(locationListener);}  }
class C{  public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {  if (bmap == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    bmap.compress(Bitmap.CompressFormat.JPEG,90,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  @Override public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  public static void updateStrokes(final float newStrokeWidth){  for (  FeatureStyle fp : currentStyle.featureStyles.values()) {    fp.setStrokeWidth(newStrokeWidth);  }  WAY_DIRECTION_PATH.rewind();  float wayDirectionPathOffset=newStrokeWidth * 2.0f;  WAY_DIRECTION_PATH.moveTo(-wayDirectionPathOffset,-wayDirectionPathOffset);  WAY_DIRECTION_PATH.lineTo(0,0);  WAY_DIRECTION_PATH.lineTo(-wayDirectionPathOffset,+wayDirectionPathOffset);}  }
class C{  private int decodeCpe(ChannelElement cpe){  int ret;  int msPresent=0;  boolean eldSyntax=ac.oc[1].m4ac.objectType == AOT_ER_AAC_ELD;  boolean commonWindow=eldSyntax || br.readBool();  if (commonWindow) {    if (decodeIcsInfo(cpe.ch[0].ics) != 0) {      return AAC_ERROR;    }    boolean i=cpe.ch[1].ics.useKbWindow[0];    cpe.ch[1].ics.copy(cpe.ch[0].ics);    cpe.ch[1].ics.useKbWindow[1]=i;    if (cpe.ch[1].ics.predictorPresent && ac.oc[1].m4ac.objectType != AOT_AAC_MAIN) {      cpe.ch[1].ics.ltp.present=br.readBool();      if (cpe.ch[1].ics.ltp.present) {        decodeLtp(cpe.ch[1].ics.ltp,cpe.ch[1].ics.maxSfb);      }    }    msPresent=br.read(2);    if (msPresent == 3) {      log.error(String.format("ms_present = 3 is reserved"));      return AAC_ERROR;    }    if (msPresent != 0) {      decodeMidSideStereo(cpe,msPresent);    }  }  ret=decodeIcs(cpe.ch[0],commonWindow,false);  if (ret != 0) {    return ret;  }  ret=decodeIcs(cpe.ch[1],commonWindow,false);  if (ret != 0) {    return ret;  }  if (commonWindow) {    if (msPresent != 0) {      applyMidSideStereo(cpe);    }    if (ac.oc[1].m4ac.objectType == AOT_AAC_MAIN) {      applyPrediction(cpe.ch[0]);      applyPrediction(cpe.ch[1]);    }  }  applyIntensityStereo(cpe,msPresent);  return 0;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void stateChanged(ChangeEvent e){  setButtons();}  }
class C{  public IconDrawable(@NonNull Context context,@NonNull Icon icon){  this(context,new IconState(validateIcon(icon)));}  }
class C{  public boolean isInteractive(){  return mInteractive;}  }
class C{  private double mapValueToFixedRange(double value){  double lower=this.fixedRange.getLowerBound();  double length=this.fixedRange.getLength();  if (value < lower) {    return lower + length + ((value - lower) % length);  } else {    return lower + ((value - lower) % length);  }}  }
class C{  private static String formatArmor(int points){  if ((points == IArmorState.ARMOR_DOOMED) || (points == IArmorState.ARMOR_DESTROYED)) {    return "Destroyed";  }  if (points == IArmorState.ARMOR_NA) {    return "N/A";  }  return String.valueOf(points);}  }
class C{  private ResultMatcher parseResultMatcher(Element runElement) throws TestParseException {  Element goElement=runElement.getChild(TAG_resultMatcher);  if (goElement == null) {    return null;  }  String goClass=goElement.getTextTrim();  ResultMatcher resultMatcher=(ResultMatcher)getInstance(goClass,ResultMatcher.class);  if (resultMatcher == null) {    throw new TestParseException("Could not create instance of ResultMatcher from class " + goClass);  }  return resultMatcher;}  }
class C{  public Period withMinutes(int minutes){  int[] values=getValues();  getPeriodType().setIndexedField(this,PeriodType.MINUTE_INDEX,values,minutes);  return new Period(values,getPeriodType());}  }
class C{  public static boolean isValid(@Nullable FluidStack stack){  if (stack == null)   return false;  if (stack.getFluid() == null)   return false;  if (stack.amount <= 0)   return false;  return true;}  }
class C{  public void log(Level aLevel,String aMsg){  if (myAppender == null) {    return;  }  LoggingEvent event=new LoggingEvent(this.getClass().getName(),myLog,aLevel,aMsg,null);  myAppender.append(event);}  }
class C{  public void test_parkUntil_3() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(1);  Parker parker=new Parker(barrier,true,1000);  Thread parkerThread=new Thread(parker);  UNSAFE.unpark(parkerThread);  parkerThread.start();  parker.assertDurationIsInRange(0);  parkerThread.join();}  }
class C{  private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public LL(double[] llPoints,int units,int lType,int nsegs){  super(llPoints,units,lType,nsegs);  setIsPolygon(false);}  }
class C{  protected SetOfIntegerSyntax(String members){  this.members=parse(members);}  }
class C{  private DynamicRegistrationEndpoint(){}  }
class C{  public AssociationNotRegisteredException(){  super();}  }
class C{  public ExpressionTree parseTree(String s){  tokenizer=new StringTokenizer(s,DELIMS,true);  token=tokenizer.nextToken();  try {    return parseExpression();  } catch (  Exception e) {    throw new ParseError(e);  } finally {    tokenizer=null;    token=null;  }}  }
class C{  protected ExpressionImpl(){  super();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  protected SelectedSparseDoubleMatrix2D(int rows,int columns,AbstractIntDoubleMap elements,int rowZero,int columnZero,int rowStride,int columnStride,int[] rowOffsets,int[] columnOffsets,int offset){  setUp(rows,columns,rowZero,columnZero,rowStride,columnStride);  this.elements=elements;  this.rowOffsets=rowOffsets;  this.columnOffsets=columnOffsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public void testValueOfLongNegative1(){  long longVal=-268209772258930018L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={-4,71,32,-94,23,55,-46,-98};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public void clear(){  Entry<E> e=header.next;  while (e != header) {    Entry<E> next=e.next;    e.next=e.previous=null;    e.element=null;    e=next;  }  header.next=header.previous=header;  size=0;  modCount++;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  protected VariableStatementImpl(){  super();}  }
class C{  private static int normalizeCapacity(int initialCapacity){  int actualCapacity=1;  while (actualCapacity < initialCapacity) {    actualCapacity<<=1;    if (actualCapacity < 0) {      actualCapacity=1 << 30;      break;    }  }  return actualCapacity;}  }
class C{  public static void writeShortInteger(OutputStream theOs,int theValue) throws IOException {  theOs.write((byte)(theValue | (byte)0x80));}  }
class C{  public static final byte composeForwardMode(byte esmClass){  return composeMessagingMode(esmClass,SMPPConstant.ESMCLS_FORWARD_MODE);}  }
class C{  public DuotoneEffect(int mFirstColor,int mSecondColor){  this.mFirstColor=mFirstColor;  this.mSecondColor=mSecondColor;}  }
class C{  public void writeI32(int i32) throws TException {  writeVarint32(intToZigZag(i32));}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  Vector<DerValue> v=new Vector<>();  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),key.asn1Encode()));  if (pname != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),pname.getRealm().asn1Encode()));    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),pname.asn1Encode()));  }  if (flags != null)   v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),flags.asn1Encode()));  if (authtime != null)   v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),authtime.asn1Encode()));  if (starttime != null)   v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),starttime.asn1Encode()));  if (endtime != null)   v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x06),endtime.asn1Encode()));  if (renewTill != null)   v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x07),renewTill.asn1Encode()));  if (sname != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x08),sname.getRealm().asn1Encode()));    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x09),sname.asn1Encode()));  }  if (caddr != null)   v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0A),caddr.asn1Encode()));  DerValue der[]=new DerValue[v.size()];  v.copyInto(der);  DerOutputStream out=new DerOutputStream();  out.putSequence(der);  return out.toByteArray();}  }
class C{  public void removeSeries(int seriesIndex){  if ((seriesIndex < 0) || (seriesIndex > getSeriesCount())) {    throw new IllegalArgumentException("Index outside valid range.");  }  MatrixSeries series=(MatrixSeries)this.seriesList.get(seriesIndex);  series.removeChangeListener(this);  this.seriesList.remove(seriesIndex);  fireDatasetChanged();}  }
class C{  public static InterestType fromOrdinal(byte ordinal){  return VALUES[ordinal];}  }
class C{  public boolean isLong(String input){  return GenericValidator.isLong(input);}  }
class C{  protected void parsePlaceObject(InStream in,int length) throws IOException {  tagtypes.tagPlaceObject(in.readUI16(),in.readUI16(),new Matrix(in),(in.getBytesRead() < length) ? new AlphaTransform(in) : null);}  }
class C{  private void jacobiRotate(final Matrix m,final double rot,final double dil,final int j1,final int k1,final int j2,final int k2){  double x1, x2;  x1=m.$[m.addr.op(j1,k1)];  x2=m.$[m.addr.op(j2,k2)];  m.$[m.addr.op(j1,k1)]=x1 - dil * (x2 + x1 * rot);  m.$[m.addr.op(j2,k2)]=x2 + dil * (x1 - x2 * rot);}  }
class C{  public ModifiableSolrParams add(String name,String... val){  String[] old=vals.put(name,val);  if (old != null) {    if (val == null || val.length < 1) {      String[] both=new String[old.length + 1];      System.arraycopy(old,0,both,0,old.length);      both[old.length]=null;      vals.put(name,both);    } else {      String[] both=new String[old.length + val.length];      System.arraycopy(old,0,both,0,old.length);      System.arraycopy(val,0,both,old.length,val.length);      vals.put(name,both);    }  }  return this;}  }
class C{  public int postFiles(String[] args,int startIndexInArgs,OutputStream out,String type){  reset();  int filesPosted=0;  for (int j=startIndexInArgs; j < args.length; j++) {    File srcFile=new File(args[j]);    if (srcFile.isDirectory() && srcFile.canRead()) {      filesPosted+=postDirectory(srcFile,out,type);    } else     if (srcFile.isFile() && srcFile.canRead()) {      filesPosted+=postFiles(new File[]{srcFile},out,type);    } else {      File parent=srcFile.getParentFile();      if (parent == null)       parent=new File(".");      String fileGlob=srcFile.getName();      GlobFileFilter ff=new GlobFileFilter(fileGlob,false);      File[] files=parent.listFiles(ff);      if (files == null || files.length == 0) {        warn("No files or directories matching " + srcFile);        continue;      }      filesPosted+=postFiles(parent.listFiles(ff),out,type);    }  }  return filesPosted;}  }
class C{  private void createRoleBasedOption(RDOParameter roleParameter,String optionId,RDORole role){  RDOOption roleBasedOption=new RDOOption();  roleBasedOption.setParentEntryNr(roleParameter.getEntryNr());  roleBasedOption.setEntryNr(sequence.nextValue());  roleBasedOption.setValue(optionId);  roleBasedOption.setBasePrice(role.getBasePrice());  roleBasedOption.setPrice(role.getPrice());  roleBasedOption.setFactor(role.getFactor());  roleParameter.getOptions().add(roleBasedOption);}  }
class C{  public SearchResultsTableModel(){  df.setMaximumFractionDigits(2);  df.setMinimumFractionDigits(2);}  }
class C{  public double splitPoint(){  return m_splitPoint;}  }
class C{  @Bean public SwaggerSpringMvcPlugin swaggerSpringMvcPlugin(SpringSwaggerConfig springSwaggerConfig){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  SwaggerSpringMvcPlugin swaggerSpringMvcPlugin=new SwaggerSpringMvcPlugin(springSwaggerConfig).apiInfo(apiInfo()).genericModelSubstitutes(ResponseEntity.class).includePatterns(DEFAULT_INCLUDE_PATTERN);  swaggerSpringMvcPlugin.build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return swaggerSpringMvcPlugin;}  }
class C{  private Node.JspBody findJspBody(Node parent) throws JasperException {  Node.JspBody result=null;  Node.Nodes subelements=parent.getBody();  for (int i=0; (subelements != null) && (i < subelements.size()); i++) {    Node n=subelements.getNode(i);    if (n instanceof Node.JspBody) {      result=(Node.JspBody)n;      break;    }  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.EVENT;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean update(K key){  Long curr=new Long(System.currentTimeMillis());  Long prev=cache.putIfAbsent(key,curr);  if (prev == null) {    return false;  }  if (curr - prev > this.timeoutInterval) {    if (cache.replace(key,prev,curr)) {      return false;    }  }  return true;}  }
class C{  @Override public String toString(){  return String.format("%s{count=%d, sum=%d, min=%d, average=%f, max=%d}",this.getClass().getSimpleName(),getCount(),getSum(),getMin(),getAverage(),getMax());}  }
class C{  public void naturalZoom(double x,double y,double factor){  double rangeX=Math.abs(currentExtent.getMaxX() - currentExtent.getMinX());  double rangeY=Math.abs(currentExtent.getMaxY() - currentExtent.getMinY());  double relativePositionX=Math.abs(x - currentExtent.getMinX()) / rangeX;  double relativePositionY=Math.abs(y - currentExtent.getMinY()) / rangeY;  double newXRange=rangeX * factor;  double newYRange=rangeY * factor;  currentExtent.setMinX(x - newXRange * relativePositionX);  currentExtent.setMinY(y - newYRange * relativePositionY);  currentExtent.setMaxX(x + newXRange * (1.0 - relativePositionX));  currentExtent.setMaxY(y + newYRange * (1.0 - relativePositionY));  addToExtentHistory(currentExtent);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  public Plane(Vector3 point1,Vector3 point2,Vector3 point3){  set(point1,point2,point3);}  }
class C{  @Deprecated public Builder cacheOnDisc(){  return cacheOnDisk(true);}  }
class C{  public QueryResponse search(SolrQuery query) throws SolrServerException, IOException {  return solrClient.query(query);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void emitDirect(int taskId,Tuple anchor,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,anchor,tuple);}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidChildNode",node.getNodeName(),propertyName);}  }
class C{  public ConnectionResult connect(Map<Sha256Hash,Transaction> transactions,ConnectMode mode){  Transaction tx=transactions.get(outpoint.getHash());  if (tx == null) {    return TransactionInput.ConnectionResult.NO_SUCH_TX;  }  return connect(tx,mode);}  }
class C{  private boolean isFastPath(String regex){  char ch;  return (((regex.length() == 1 && ".$|()[{^?*+\\".indexOf(ch=regex.charAt(0)) == -1) || (regex.length() == 2 && regex.charAt(0) == '\\' && (((ch=regex.charAt(1)) - '0') | ('9' - ch)) < 0 && ((ch - 'a') | ('z' - ch)) < 0 && ((ch - 'A') | ('Z' - ch)) < 0)) && (ch < Character.MIN_HIGH_SURROGATE || ch > Character.MAX_LOW_SURROGATE));}  }
class C{  public static long rotateRight(long v,int distance){  return (v >>> distance) | (v << -distance);}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case STARTED:      processUnreleasedEntityLocks(current);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage)));}} catch (Throwable e) {failTask(e);}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.265 -0400",hash_original_method="83ACC201A16F2FDDF97B6B07FFFB2168",hash_generated_method="8947A54D644B196B7F9AE181D44586AE") public Comparator<? super E> comparator(){  return comparator;}  }
class C{  public int size(){  return size;}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  @Deprecated public boolean isGoIntoActivated(){  return view.isGoIntoActivated();}  }
class C{  public UserDataType findUserDataType(String name){  return userDataTypes.get(name);}  }
class C{  public MotionBlurFilter(float distance,float angle,float rotation,float zoom){  this.distance=distance;  this.angle=angle;  this.rotation=rotation;  this.zoom=zoom;}  }
class C{  private ListMultimap<TMember,TMember> findClashingMembersByName(EList<TMember> myPolyMember,EList<TMember> pivotPolyMember){  ListMultimap<TMember,TMember> ret=LinkedListMultimap.create();  for (  TMember my : myPolyMember) {    String myName=my.getName();    if (myName == null)     continue;    for (    TMember other : pivotPolyMember) {      String otherName=other.getName();      if (myName.equals(otherName)) {        ret.put(my,other);      }    }  }  return ret;}  }
class C{  public RelationalOperator createRelationalOperatorFromString(EDataType eDataType,String initialValue){  RelationalOperator result=RelationalOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  ref=LiveRef.read(in,false);}  }
class C{  public static void networksJson(String id){  List<NetworkInfo> items=Lists.newArrayList();  List<NetworkRestRep> networks=NetworkUtils.getNetworksByVirtualArray(id);  for (  NetworkRestRep network : networks) {    items.add(new NetworkInfo(network,id));  }  renderJSON(DataTablesSupport.createJSON(items,params));}  }
class C{  public void checkpointIfRequired(){  if (fileLockMethod != FileLock.LOCK_SERIALIZED || readOnly || !reconnectChangePending || closing) {    return;  }  long now=System.currentTimeMillis();  if (now > reconnectCheckNext + reconnectCheckDelay) {    if (SysProperties.CHECK && checkpointAllowed < 0) {      DbException.throwInternalError();    }synchronized (reconnectSync) {      if (checkpointAllowed > 0) {        return;      }      checkpointRunning=true;    }synchronized (this) {      trace.debug("checkpoint start");      flushSequences();      checkpoint();      reconnectModified(false);      trace.debug("checkpoint end");    }synchronized (reconnectSync) {      checkpointRunning=false;    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void close(){  flushWithoutMargin();}  }
class C{  public double computeAverageLocalOfObservationsWhileComputingDistances() throws Exception {  int N=continuousDataX.length;  double averageDiGammas=0;  double averageInverseCountInJointYZ=0;  double averageInverseCountInJointXZ=0;  double avNxz=0;  double avNyz=0;  double avNz=0;  for (int t=0; t < N; t++) {    double[][] xzNorms=normCalculator.computeNorms(continuousDataX,conditionedDataZ,t);    double[][] jointNorm=new double[N][2];    for (int t2=0; t2 < N; t2++) {      jointNorm[t2][0]=Math.max(xzNorms[t2][0],xzNorms[t2][1]);      jointNorm[t2][1]=t2;    }    double eps_x=0.0;    double eps_z=0.0;    int[] timeStepsOfKthMins=null;    timeStepsOfKthMins=MatrixUtils.kMinIndicesSubjectTo(jointNorm,0,k,discreteData,discreteData[t]);    for (int j=0; j < k; j++) {      int timeStepOfJthPoint=timeStepsOfKthMins[j];      if (xzNorms[timeStepOfJthPoint][0] > eps_x) {        eps_x=xzNorms[timeStepOfJthPoint][0];      }      if (xzNorms[timeStepOfJthPoint][1] > eps_z) {        eps_z=xzNorms[timeStepOfJthPoint][1];      }    }    int n_xz=0;    int n_yz=0;    int n_z=0;    for (int t2=0; t2 < N; t2++) {      if (xzNorms[t2][1] <= eps_z) {        n_z++;        if (xzNorms[t2][0] <= eps_x) {          n_xz++;        }        if (discreteData[t] == discreteData[t2]) {          n_yz++;        }      }    }    avNxz+=n_xz;    avNyz+=n_yz;    avNz+=n_z;    averageDiGammas+=MathsUtils.digamma(n_z) - MathsUtils.digamma(n_xz) - MathsUtils.digamma(n_yz);    double invN_xz=1.0 / (double)n_xz;    averageInverseCountInJointXZ+=invN_xz;    double invN_yz=1.0 / (double)n_yz;    averageInverseCountInJointYZ+=invN_yz;  }  averageDiGammas/=(double)N;  averageInverseCountInJointYZ/=(double)N;  averageInverseCountInJointXZ/=(double)N;  condMi=MathsUtils.digamma(k) - 2.0 / (double)k + averageDiGammas + averageInverseCountInJointYZ + averageInverseCountInJointXZ;  miComputed=true;  if (debug) {    avNxz/=(double)N;    avNyz/=(double)N;    avNz/=(double)N;    System.out.printf("Average n_xz=%.3f, Average n_yz=%.3f, Average n_z=%.3f\n",avNxz,avNyz,avNz);    System.out.printf("Av = digamma(k)=%.3f + <digammas>=%.3f + <inverses>=%.3f - 2/k=%.3f = %.3f (<1/n_yz>=%.3f, <1/n_xz>=%.3f)\n",MathsUtils.digamma(k),averageDiGammas,averageInverseCountInJointYZ + averageInverseCountInJointXZ,2.0 / (double)k,condMi,averageInverseCountInJointYZ,averageInverseCountInJointXZ);  }  return condMi;}  }
class C{  protected void sequence_SuperLiteral(ISerializationContext context,SuperLiteral semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void write(DataSet<?> data,Path path) throws IOException {  write(data,path,DEFAULT_DELIMITER);}  }
class C{  public WorldWindowGLCanvas(WorldWindow shareWith){  super(Configuration.getRequiredGLCapabilities(),new BasicGLCapabilitiesChooser(),null);  if (shareWith != null)   this.setSharedContext(shareWith.getContext());  try {    this.wwd=((WorldWindowGLDrawable)WorldWind.createConfigurationComponent(AVKey.WORLD_WINDOW_CLASS_NAME));    this.wwd.initDrawable(this);    this.wwd.addPropertyChangeListener(this);    if (shareWith != null)     this.wwd.initGpuResourceCache(shareWith.getGpuResourceCache()); else     this.wwd.initGpuResourceCache(WorldWindowImpl.createGpuResourceCache());    this.createView();    this.createDefaultInputHandler();    WorldWind.addPropertyChangeListener(WorldWind.SHUTDOWN_EVENT,this);    this.wwd.endInitialization();  } catch (  Exception e) {    String message=Logging.getMessage("Awt.WorldWindowGLSurface.UnabletoCreateWindow");    Logging.logger().severe(message);    throw new WWRuntimeException(message,e);  }}  }
class C{  private Map<String,String> env(String inJvmArgs){  String jvmArgs=inJvmArgs;  LocalConfiguration config=getConfiguration();  Map<String,String> env=new HashMap<String,String>();  if (jvmArgs == null) {    jvmArgs=config.getPropertyValue(GeneralPropertySet.JVMARGS);  }  if (jvmArgs != null) {    env.put("JVM_ARGS",jvmArgs);  }  String javaHome=config.getPropertyValue(GeneralPropertySet.JAVA_HOME);  if (javaHome == null) {    javaHome=System.getProperty("java.home");  }  env.put("JAVA_HOME",javaHome);  return env;}  }
class C{  public static void rewriteMenuURL(ArrayList<MWebMenu> menuList,HttpServletRequest request){  HttpSession session=request.getSession();  String sessionID=session.getId();  for (  MWebMenu menu : menuList) {    String link=menu.getMenuLink();    int index=link.indexOf("?");    if (index != -1) {      String part1=link.substring(0,index);      String part2=link.substring(index);      link=part1 + ";jsessionid=" + sessionID+ part2;      menu.setMenuLink(link);    }  }}  }
class C{  public void addStatementEventListener(StatementEventListener listener){synchronized (this.statementEventListeners) {    this.statementEventListeners.put(listener,listener);  }}  }
class C{  public static String escapeAttributeValue(String value){  String result=StringUtil.gsub("&","&amp;",value);  result=StringUtil.gsub("<","&lt;",result);  result=StringUtil.gsub(">","&gt;",result);  result=StringUtil.gsub("\"","&quot;",result);  result=StringUtil.gsub("'","&apos;",result);  return result;}  }
class C{  public boolean isDrawVertices(){  return drawVertices;}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  private void updateTransportCoverageAvailability(){  _availableTransportCoverage=0;  int _coverageStatus=CoverageInfo.getCoverageStatus();  if ((_coverageStatus & COVERAGE_DIRECT) > 0 || CoverageInfo.isCoverageSufficient(COVERAGE_DIRECT,RadioInfo.getSupportedWAFs(),false)) {    _availableTransportCoverage|=TRANSPORT_TCP_CELLULAR;    _availableTransportCoverage|=TRANSPORT_WAP2;    _availableTransportCoverage|=TRANSPORT_WAP;  }  if ((_coverageStatus & CoverageInfo.COVERAGE_BIS_B) > 0 || CoverageInfo.isCoverageSufficient(CoverageInfo.COVERAGE_BIS_B) || CoverageInfo.isCoverageSufficient(CoverageInfo.COVERAGE_BIS_B,RadioInfo.getSupportedWAFs(),false)) {    _availableTransportCoverage|=TRANSPORT_BIS_B;  }  if ((_coverageStatus & CoverageInfo.COVERAGE_MDS) > 0 || CoverageInfo.isCoverageSufficient(CoverageInfo.COVERAGE_MDS) || CoverageInfo.isCoverageSufficient(CoverageInfo.COVERAGE_MDS,RadioInfo.getSupportedWAFs(),false)) {    _availableTransportCoverage|=TRANSPORT_MDS;  }  if (CoverageInfo.isCoverageSufficient(COVERAGE_DIRECT,RadioInfo.WAF_WLAN,false)) {    _availableTransportCoverage|=TRANSPORT_TCP_WIFI;  }  updateTransportServiceAvailability();  _availableTransportCoverage&=_availableTransportServices;}  }
class C{  public static <I,A,SEP>Parser<I,IList<A>> sepBy1(Parser<I,A> p,Parser<I,SEP> sep){  return bind(p,null);}  }
class C{  private void actualizarNiveles(List listaNiveles){  for (int i=0; i < listaNiveles.size(); i++) {    ((NivelArchivoVO)listaNiveles.get(i)).setOrden(new Integer(i + 1));  }}  }
class C{  private boolean shouldProcessWorkspace(final Workspace eventWorkspace){  return eventWorkspace != null && workspace.equals(eventWorkspace);}  }
class C{  public Builder rotate(float degrees){  rotationDegrees=degrees;  return this;}  }
class C{  private XYPlot initializeLowerPlot(){  daemonThreads=new YIntervalSeriesImproved("daemon");  YIntervalSeriesCollection yIntervalSeriesCollection=new YIntervalSeriesCollection();  yIntervalSeriesCollection.addSeries(daemonThreads);  DeviationRenderer renderer=new DeviationRenderer(true,false);  renderer.setBaseShapesVisible(true);  renderer.setSeriesStroke(0,new BasicStroke(3.0f));  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));  final NumberAxis rangeAxis=new NumberAxis("Daemon threads");  rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  rangeAxis.setAutoRangeMinimumSize(10.0d,false);  rangeAxis.setRangeType(RangeType.POSITIVE);  final XYPlot subplot=new XYPlot(yIntervalSeriesCollection,null,rangeAxis,renderer);  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  subplot.setRangeCrosshairVisible(true);  return subplot;}  }
class C{  protected void clearSubject(){  doClearSubject();}  }
class C{  void reportError(String msg,Element e){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){  return;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.539 -0500",hash_original_method="AE445335586A61F4AB9D472CB658E765",hash_generated_method="1FB526D41F3DD0C51856D56C1E80CDED") public boolean contains(final URI uri){  return this.uris.contains(uri);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if ((!this.isSummary() || this.getContainerType().equals("L")) && getCM_Template_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"Template"));    return false;  }  if (is_ValueChanged("IsModified"))   setIsModified(true);  setRelativeURL(getRelativeURL());  return true;}  }
class C{  public static boolean isEdgeListItem(Context context,AccessibilityNodeInfoCompat node){  return isEdgeListItem(context,node,0,null);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.183 -0400",hash_original_method="A1FFC9B80BA56A6C1B0EFB45497D16D1",hash_generated_method="41BF0F39484A92E2DE0C5158288ACAC3") @Override public void close() throws IOException {  reader.close();}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  setFileExtension(".names");}  }
class C{  protected int compare(Object e,Object object){  if (comparator == null) {    @SuppressWarnings("unchecked") Comparable<Object> c=(Comparable<Object>)e;    return c.compareTo(queue[0]);  } else {    return comparator.compare(e,queue[0]);  }}  }
class C{  public void parseXml(Reader reader) throws IOException, XmlPullParserException {  this.xmlPullParser.setInput(reader);  Xml.parseElement(this.xmlPullParser,this,this.defaultNamespaceDictionary,null);}  }
class C{  public int size(){  return this.statusNodesMap.entrySet().stream().map(null).reduce(0,null);}  }
class C{  public void appendExceptFirst(String s){  if (index++ > 0) {    builder.append(s);  }}  }
class C{  public SslToServiceWrongISCert(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  public static int monthFromDateValue(long x){  return (int)(x >>> SHIFT_MONTH) & 15;}  }
class C{  private File downloadAttachment(String reportPath){  File reportFile=null;  String name=reportPath.substring("attachment:".length()).trim();  MProcess process=new MProcess(Env.getCtx(),processInfo.getAD_Process_ID(),processInfo.getTransactionName());  attachment=process.getAttachment();  if (attachment != null) {    MAttachmentEntry[] entries=attachment.getEntries();    MAttachmentEntry entry=null;    for (int i=0; i < entries.length; i++) {      if (entries[i].getName().equals(name)) {        entry=entries[i];        break;      }    }    if (entry != null) {      reportFile=getAttachmentEntryFile(entry);    }  }  return reportFile;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean good=evalBool(stack.pop());  String lineup=getString(stack);  String num=getString(stack);  EPG.getInstance().getEPGDSForEPGDSName(lineup).setCanViewStationOnChannel(getChannel(stack).getStationID(),num,good);  return null;}  }
class C{  private byte[] magSerializedForm(){  int len=mag.length;  int bitLen=(len == 0 ? 0 : ((len - 1) << 5) + bitLengthForInt(mag[0]));  int byteLen=(bitLen + 7) >>> 3;  byte[] result=new byte[byteLen];  for (int i=byteLen - 1, bytesCopied=4, intIndex=len - 1, nextInt=0; i >= 0; i--) {    if (bytesCopied == 4) {      nextInt=mag[intIndex--];      bytesCopied=1;    } else {      nextInt>>>=8;      bytesCopied++;    }    result[i]=(byte)nextInt;  }  return result;}  }
class C{  public int readRawLittleEndian32() throws IOException {  final byte b1=readRawByte();  final byte b2=readRawByte();  final byte b3=readRawByte();  final byte b4=readRawByte();  return (((int)b1 & 0xff)) | (((int)b2 & 0xff) << 8) | (((int)b3 & 0xff) << 16)| (((int)b4 & 0xff) << 24);}  }
class C{  public ContextedRuntimeException(final Throwable cause){  super(cause);  exceptionContext=new DefaultExceptionContext();}  }
class C{  public VSDecoderPane(VSDecoderFrame p){  super();  parent=p;  decoder_mgr=VSDecoderManager.instance();}  }
class C{  private static void checkNotNull(final Object obj,final String name){  if (obj == null) {    throw new IllegalArgumentException(name + " cannot be null");  }}  }
class C{  protected DoubleMatrix2D like2D(int rows,int columns,int rowZero,int columnZero,int rowStride,int columnStride){  return new DenseDoubleMatrix2D(rows,columns,this.elements,rowZero,columnZero,rowStride,columnStride);}  }
class C{  public void load(Element element,Object o){  Editor ed=null;  MemoryIcon l;  if (o instanceof LayoutEditor) {    ed=(LayoutEditor)o;    l=new jmri.jmrit.display.layoutEditor.MemoryIcon("   ",(LayoutEditor)ed);  } else   if (o instanceof jmri.jmrit.display.Editor) {    ed=(Editor)o;    l=new MemoryIcon("",ed);  } else {    log.error("Unrecognizable class - " + o.getClass().getName());    return;  }  String name;  Attribute attr=element.getAttribute("memory");  if (attr == null) {    log.error("incorrect information for a memory location; must use memory name");    ed.loadFailed();    return;  } else {    name=attr.getValue();  }  loadTextInfo(l,element);  Memory m=jmri.InstanceManager.memoryManagerInstance().getMemory(name);  if (m != null) {    l.setMemory(name);  } else {    log.error("Memory named '" + attr.getValue() + "' not found.");    ed.loadFailed();  }  Attribute a=element.getAttribute("selectable");  if (a != null && a.getValue().equals("yes")) {    l.setSelectable(true);  } else {    l.setSelectable(false);  }  a=element.getAttribute("updateBlockValue");  if (a != null && a.getValue().equals("yes")) {    l.updateBlockValueOnChange(true);  }  List<Element> items=element.getChildren("memorystate");  for (int i=0; i < items.size(); i++) {    Element item=items.get(i);    String iconName=item.getAttribute("icon").getValue();    NamedIcon icon=NamedIcon.getIconByName(iconName);    if (icon == null) {      icon=ed.loadFailed("Memory " + name,iconName);      if (icon == null) {        log.info("Memory \"" + name + "\" icon removed for url= "+ iconName);      }    }    if (icon != null) {      String keyValue=item.getAttribute("value").getValue();      l.addKeyAndIcon(icon,keyValue);    }  }  ed.putItem(l);  loadCommonAttributes(l,Editor.MEMORIES,element);  int x=0;  int y=0;  try {    x=element.getAttribute("x").getIntValue();    y=element.getAttribute("y").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert positional attribute");  }  l.setOriginalLocation(x,y);  l.displayState();}  }
class C{  public boolean failed(){  return value == null;}  }
class C{  @operator(value="crosses",category={IOperatorCategory.SPATIAL,IOperatorCategory.SP_PROPERTIES},concept={IConcept.GEOMETRY,IConcept.SPATIAL_COMPUTATION,IConcept.SPATIAL_RELATION}) @doc(value="A boolean, equal to true if the left-geometry (or agent/point) crosses the right-geometry (or agent/point).",usages={@usage("if one of the operand is null, returns false."),@usage("if one operand is a point, returns false.")},examples={@example(value="polyline([{10,10},{20,20}]) crosses polyline([{10,20},{20,10}])",equals="true"),@example(value="polyline([{10,10},{20,20}]) crosses {15,15}",equals="true"),@example(value="polyline([{0,0},{25,25}]) crosses polygon([{10,10},{10,20},{20,20},{20,10}])",equals="true")},see={"disjoint_from","intersects","overlaps","partially_overlaps","touches"}) public static Boolean crosses(final IShape g1,final IShape g2){  if (g1 == null || g2 == null) {    return false;  }  return g1.crosses(g2);}  }
class C{  public static int hash(Object... items){  int result=seed;  for (  Object item : items) {    result=result * prime + (item == null ? 0 : item.hashCode());  }  return result;}  }
class C{  public void writeResults(Appendable app) throws IOException {  final List<Pair<Long,StringBuilder>> results=new ArrayList<>();  for (  Map.Entry<Parents,MultiSet<Genotype>> e : mAlleleSets.entrySet()) {    final StringBuilder res=new StringBuilder();    final Parents p=e.getKey();    res.append("Parent GT:");    for (    Genotype i : p.mParents) {      res.append(" ");      res.append(i);    }    res.append(StringUtils.LS);    res.append("Children:").append(StringUtils.LS);    final MultiSet<Genotype> counts=e.getValue();    final long tot=counts.totalCount();    for (    Genotype i : counts.keySet()) {      res.append(String.format(Locale.ROOT,"%6s %10d %6.2f%%",i.toString(),counts.get(i),(double)counts.get(i) * 100.0d / tot));      res.append(StringUtils.LS);    }    res.append("Total: ").append(Long.toString(tot)).append(StringUtils.LS);    res.append(StringUtils.LS);    results.add(new Pair<>(tot,res));  }  Collections.sort(results,new CountPairComparator());  for (  Pair<Long,StringBuilder> p : results) {    app.append(p.getB().toString());  }}  }
class C{  public void testAbsNegative(){  byte aBytes[]={1,2,3,4,5,6,7};  int aSign=-1;  byte rBytes[]={1,2,3,4,5,6,7};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.abs();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static boolean deleteFileOrDirectory(String target,boolean remountAsRw){  return getInternals().deleteFileOrDirectory(target,remountAsRw);}  }
class C{  public MethodNode makeDynamic(MethodCall call){  return makeDynamic(call,ClassHelper.OBJECT_TYPE);}  }
class C{  public int compareTo(StatisticDescriptor o){  return this.getName().compareTo(o.getName());}  }
class C{  private void heapifyDown(Entry<E> entry){  Entry<E> currentEntry=entry;  Entry<E> bestEntry=null;  do {    bestEntry=currentEntry;    Entry<E> leftEntry=leftChild(currentEntry);    if (leftEntry != null) {      if (compare(bestEntry,leftEntry) < 0) {        bestEntry=leftEntry;      }    }    Entry<E> rightEntry=rightChild(currentEntry);    if (rightEntry != null) {      if (compare(bestEntry,rightEntry) < 0) {        bestEntry=rightEntry;      }    }    if (bestEntry != currentEntry) {      swap(bestEntry,currentEntry);    }  } while (bestEntry != currentEntry);}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      if (!eof) {        exhaustInputStream(this);      }    }  finally {      eof=true;      closed=true;    }  }}  }
class C{  public void elementEnded(String name,String systemId,int lineNr) throws Exception {  this.delegate.elementEnded(name,systemId,lineNr);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.053 -0500",hash_original_method="61F6C031C06541C0A8BB46124B7DF1B0",hash_generated_method="57B271DD17C53D9174EA5A7D77C69ED2") public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public ImplementedProjects createImplementedProjects(){  ImplementedProjectsImpl implementedProjects=new ImplementedProjectsImpl();  return implementedProjects;}  }
class C{  public PatternObserverExpr(String namespace,String name,Expression[] parameters){  super(namespace,name,Arrays.asList(parameters));}  }
class C{  public TourGuide playOn(View targetView){  mHighlightedView=targetView;  setupView();  return this;}  }
class C{  public static void match(final String str,final String name,final Pattern pattern,final int maxLength){  if (null == str || str.isEmpty() || str.length() > maxLength || !pattern.matcher(str).matches()) {    final String message=String.format("%s does not match the desired pattern",name);    throw new IllegalArgumentException(message);  }}  }
