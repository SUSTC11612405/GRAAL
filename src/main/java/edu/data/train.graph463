class C{  protected void handlePointsForOuterRing(Geo g1,Geo g2,Geo g3,double dist,OMAreaList ret){  int bend=bends(g1,g2,g3);  Geo gret=g3;  RibbonIterator leg1=new RibbonIterator(g1,g2,dist);  OMPoly poly1=getHalfPoly(leg1,Ribbon.LEFT,false);  RibbonIterator leg2=new RibbonIterator(g2,g3,dist);  OMPoly poly2=getHalfPoly(leg2,Ribbon.LEFT,true);  if (poly1 == null || poly2 == null) {    return;  }  if (bend == STRAIGHT || g2.equals(g3)) {    ret.add(poly1);    ret.add(poly2);  } else {    if (bend == BENDS_LEFT) {      double dg12=g1.distance(g2);      double dg23=g2.distance(g3);      double legTestDist=dist * 2;      if (dg12 < legTestDist || dg23 < legTestDist) {        addShortLegPolyForIntersection(g1,g2,g3,Ribbon.LEFT,dist,ret);      } else {        addPolyForIntersection(poly1,poly2,dist,ret);      }    } else {      OMGraphic omp=getPushbackPoly(poly1,dist);      if (omp != null) {        ret.add(omp);      }      OMGraphic oma=getArc(g2,poly1,poly2);      if (oma != null) {        ret.add(oma);      }      omp=getPushbackPoly(poly2,dist);      if (omp != null) {        ret.add(omp);      }    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public JPopupMenu createMenu(final long offset){  final JPopupMenu menu=new JPopupMenu();  final IDebugger debugger=m_debugger.getCurrentSelectedDebugger();  if (debugger == null) {    return null;  }  menu.add(CActionProxy.proxy(new CSearchAction(m_parent,m_debugger,m_memoryView)));  menu.add(CActionProxy.proxy(new CGotoAction(m_parent,m_memoryView,m_debugger)));  if (canReadDword(debugger.getProcessManager().getMemoryMap(),offset)) {    final byte[] data=debugger.getProcessManager().getMemory().getData(offset,4);    final IAddress dword=new CAddress(ByteHelpers.readDwordLittleEndian(data,0));    if (canReadDword(debugger.getProcessManager().getMemoryMap(),dword.toLong())) {      menu.add(CActionProxy.proxy(new CFollowDumpAction(m_debugger,dword)));    }  }  menu.addSeparator();  final long firstOffset=m_memoryView.getHexView().getBaseAddress();  final int size=m_memoryView.getHexView().getData().getDataLength();  menu.add(new CLoadAllAction(m_parent,debugger,new CAddress(firstOffset),size));  final JMenu dumpMenu=new JMenu("Dump to file");  dumpMenu.add(CActionProxy.proxy(new CDumpMemoryRangeAction(m_parent,debugger,m_memoryView.getHexView().getData(),new CAddress(firstOffset),size)));  menu.add(dumpMenu);  menu.addSeparator();  final BookmarkManager manager=debugger.getBookmarkManager();  final CBookmark bookmark=manager.getBookmark(new CAddress(offset));  if (bookmark == null) {    menu.add(new JMenuItem(CActionProxy.proxy(new CCreateBookmarkAction(manager,new CAddress(offset)))));  } else {    menu.add(new JMenuItem(CActionProxy.proxy(new CDeleteBookmarkAction(manager,bookmark))));  }  if (manager.getNumberOfBookmarks() != 0) {    menu.addSeparator();    final JMenu bookmarksItem=new JMenu("Bookmarks");    for (int i=0; i < manager.getNumberOfBookmarks(); i++) {      bookmarksItem.add(CActionProxy.proxy(new CGotoBookmarkAction(m_debugger,manager.getBookmark(i))));    }    menu.add(bookmarksItem);  }  menu.addSeparator();  menu.add(HexViewOptionsMenu.createHexViewOptionsMenu(m_memoryView.getHexView()));  return menu;}  }
class C{  public void test(String problem,String algorithm1,String algorithm2,AlgorithmFactory factory){  test(problem,algorithm1,algorithm2,false,factory);}  }
class C{  public synchronized void add(Date x,double y){  super.add(x.getTime(),y);}  }
class C{  void mutateField(Local left,String field){  Iterator it=locals.get(left).iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!n.isInside())     mutated.put(n,field);  }  if (doCheck)   sanityCheck();}  }
class C{  public LayerStatusEvent(Layer source,int status){  super(source);  this.status=status;}  }
class C{  public Node close() throws IOException {  if (xml) {    return close(false);  }  return close(isSimpleEndTagForHTML());}  }
class C{  @Override public Object clone(){  try {    IdentityHashMap<K,V> cloneHashMap=(IdentityHashMap<K,V>)super.clone();    cloneHashMap.elementData=newElementArray(elementData.length);    System.arraycopy(elementData,0,cloneHashMap.elementData,0,elementData.length);    return cloneHashMap;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  @Override public void detach(){  super.detach();  modules.getFilesModule().unbindUploadFile(rid,callback);}  }
class C{  public SVGEllipseElementBridge(){}  }
class C{  public boolean isInBoundsX(float x){  if (isInBoundsLeft(x) && isInBoundsRight(x))   return true; else   return false;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public boolean matches(String storageSystemNativeGuid){  String vplexStorageSystemId=getUniqueId();  s_logger.info(String.format("Matching the storageSystemNativeGuid %s with %s",storageSystemNativeGuid,vplexStorageSystemId));  if (storageSystemNativeGuid.contains(vplexStorageSystemId.trim())) {    return true;  }  if (storageSystemNativeGuid.startsWith("IBMXIV+IBM")) {    int decimalNum=0;    try {      decimalNum=Integer.parseInt(vplexStorageSystemId);    } catch (    NumberFormatException nfe) {      return false;    }    String hexString=Integer.toHexString(decimalNum);    String subHexString=hexString.substring(1,hexString.length());    String decimalString=Integer.toString(Integer.parseInt(subHexString,16));    if (storageSystemNativeGuid.endsWith(decimalString)) {      return true;    }  }  return false;}  }
class C{  @RequestMapping(value=ApiUrl.COMPLAINT_UPDATE_STATUS,method=RequestMethod.PUT,produces=MediaType.TEXT_PLAIN_VALUE) public ResponseEntity<String> updateComplaintStatus(@PathVariable final String complaintNo,@RequestBody final JSONObject jsonData){  try {    final Complaint complaint=complaintService.getComplaintByCRN(complaintNo);    final ComplaintStatus cmpStatus=complaintStatusService.getByName(jsonData.get("action").toString());    String citizenfeedback=jsonData.get("feedback").toString();    if (complaint.getStatus().getName().equals("COMPLETED")) {      if (UNSATISFACTORY.equals(citizenfeedback))       citizenfeedback=CitizenFeedback.TWO.name(); else       if (SATISFACTORY.equals(citizenfeedback))       citizenfeedback=CitizenFeedback.FIVE.name();      complaint.setCitizenFeedback(CitizenFeedback.valueOf(citizenfeedback));    }    complaint.setStatus(cmpStatus);    complaintService.update(complaint,Long.valueOf(0),jsonData.get("comment").toString());    return getResponseHandler().success("",getMessage("msg.complaint.status.update.success"));  } catch (  final Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return getResponseHandler().error(getMessage("server.error"));  }}  }
class C{  public Html download(String url,String charset){  Page page=download(new Request(url),Site.me().setCharset(charset).toTask());  return (Html)page.getHtml();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.871 -0500",hash_original_method="4DDABCDA44FFF28C561B2585B61E25F7",hash_generated_method="672B038178BC088608C17482EB0C7D6B") private void handleStatusReport(AsyncResult ar){  String pduString=(String)ar.result;  SmsMessage sms=SmsMessage.newFromCDS(pduString);  if (sms != null) {    int tpStatus=sms.getStatus();    int messageRef=sms.messageRef;    for (int i=0, count=deliveryPendingList.size(); i < count; i++) {      SmsTracker tracker=deliveryPendingList.get(i);      if (tracker.mMessageRef == messageRef) {        if (tpStatus >= Sms.STATUS_FAILED || tpStatus < Sms.STATUS_PENDING) {          deliveryPendingList.remove(i);        }        PendingIntent intent=tracker.mDeliveryIntent;        Intent fillIn=new Intent();        fillIn.putExtra("pdu",IccUtils.hexStringToBytes(pduString));        fillIn.putExtra("format",android.telephony.SmsMessage.FORMAT_3GPP);        try {          intent.send(mContext,Activity.RESULT_OK,fillIn);        } catch (        CanceledException ex) {        }        break;      }    }  }  acknowledgeLastIncomingSms(true,Intents.RESULT_SMS_HANDLED,null);}  }
class C{  private void calculateUniqueValue(Object[] minValue,Object[] uniqueValue){  for (int i=0; i < measureCount; i++) {    if (type[i] == CarbonCommonConstants.BIG_INT_MEASURE) {      uniqueValue[i]=(long)minValue[i] - 1;    } else     if (type[i] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {      BigDecimal val=(BigDecimal)minValue[i];      uniqueValue[i]=(val.subtract(new BigDecimal(1.0)));    } else {      uniqueValue[i]=(double)minValue[i] - 1;    }  }}  }
class C{  private boolean isStreamCommand(String action){switch (StreamAction.getEnum(action)) {case CREATE_STREAM:case DELETE_STREAM:case RELEASE_STREAM:case PUBLISH:case PLAY:case PLAY2:case SEEK:case PAUSE:case PAUSE_RAW:case CLOSE_STREAM:case RECEIVE_VIDEO:case RECEIVE_AUDIO:    return true;default :  log.debug("Stream action {} is not a recognized command",action);return false;}}  }
class C{  public static CCSplitRows action(int r,float d){  return new CCSplitRows(r,d);}  }
class C{  public Type type(){  return type;}  }
class C{  private synchronized CachedTexture resample(int width,int height){  for (  ResampleInfo resampleInfo : resampleInfos) {    if (resampleInfo.matches(width,height)) {      return resampleInfo.getCachedTextureResampled();    }  }  return resampleTexture(width,height);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.path_animations);  mCanvasView=(CanvasView)findViewById(R.id.canvas);  mCanvasView.addOnLayoutChangeListener(this);  ((RadioGroup)findViewById(R.id.path_animation_type)).setOnCheckedChangeListener(this);}  }
class C{  public static void evaluateCircuit(LogicCircuit lc,GateLibrary gate_library,Args options){  refreshGateAttributes(lc,gate_library);  if (options.get_circuit_type() == DNACompiler.CircuitType.sequential) {    SequentialHelper.setInitialRPUs(lc,gate_library);    HashMap<String,ArrayList<ArrayList<Double>>> track_rpus=new HashMap<>();    for (    Gate g : lc.get_Gates()) {      track_rpus.put(g.Name,new ArrayList<ArrayList<Double>>());      ArrayList<Double> copy_rpus=new ArrayList<Double>(g.get_outrpus());      track_rpus.get(g.Name).add(copy_rpus);      track_rpus.get(g.Name).add(copy_rpus);    }    boolean converges=SequentialHelper.convergeRPUs(lc,gate_library,options,track_rpus);    if (!converges) {      lc.get_scores().set_onoff_ratio(0.0);      lc.get_scores().set_noise_margin_contract(false);      return;    }  } else   if (options.get_circuit_type() == DNACompiler.CircuitType.combinational) {    simulateRPU(lc,gate_library,options);  }  evaluateCircuitONOFFRatio(lc);  if (options.is_noise_margin()) {    evaluateCircuitNoiseMargin(lc,options);  }  if (options.is_snr()) {    evaluateCircuitSNR(lc,options);  }}  }
class C{  protected boolean mustShowHostileIndicator(){  String id=this.symbolCode.getStandardIdentity();  boolean isHostile=SymbologyConstants.STANDARD_IDENTITY_HOSTILE.equalsIgnoreCase(id) || SymbologyConstants.STANDARD_IDENTITY_SUSPECT.equalsIgnoreCase(id) || SymbologyConstants.STANDARD_IDENTITY_FAKER.equalsIgnoreCase(id)|| SymbologyConstants.STANDARD_IDENTITY_JOKER.equalsIgnoreCase(id);  return this.isShowHostileIndicator() && isHostile;}  }
class C{  public ObjectMatrix1D like(int size){  return new SparseObjectMatrix1D(size);}  }
class C{  @Override public IBinder onBind(Intent intent){  return syncAdapter.getSyncAdapterBinder();}  }
class C{  public static double convertMillisToMinutes(double millis){  return millis / MINUTE_TO_MILLIS;}  }
class C{  @Override public void actionPerformed(ActionEvent evt){  kseFrame.setDefaultStatusBarText();  if (!recentFile.isFile()) {    JMenuItemRecentFile jmiRecentFile=(JMenuItemRecentFile)evt.getSource();    JMenuRecentFiles jmRecentFiles=jmiRecentFile.getRecentFilesMenu();    jmRecentFiles.invalidate(jmiRecentFile);    JOptionPane.showMessageDialog(kseFrame.getUnderlyingFrame(),MessageFormat.format(res.getString("RecentKeyStoreFileActionListener.NotFile.message"),recentFile),res.getString("RecentKeyStoreFileActionListener.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);    return;  }  OpenAction openAction=new OpenAction(kseFrame);  openAction.openKeyStore(recentFile);}  }
class C{  @Override public void start(){  if (started)   return;  server.getActivation().haStarted();  started=true;}  }
class C{  @Override public List<Metric> transform(List<Metric> metrics){  return union(metrics);}  }
class C{  protected void comment(Element elem) throws BadLocationException, IOException {  AttributeSet as=elem.getAttributes();  if (matchNameAttribute(as,HTML.Tag.COMMENT)) {    Object comment=as.getAttribute(HTML.Attribute.COMMENT);    if (comment instanceof String) {      writeComment((String)comment);    } else {      writeComment(null);    }  }}  }
class C{  public static void nullifyWorkDirectory(){  igniteWork=null;}  }
class C{  protected WeaponFireInfo(Princess owner){  this.owner=owner;}  }
class C{  public MosaicDefinitionCreationTransaction(final TimeInstant timeStamp,final Account sender,final MosaicDefinition mosaicDefinition){  this(timeStamp,sender,mosaicDefinition,MosaicConstants.MOSAIC_CREATION_FEE_SINK,Amount.fromNem(50000));}  }
class C{  static byte[] hmacMD5(final byte[] value,final byte[] key) throws AuthenticationException {  final HMACMD5 hmacMD5=new HMACMD5(key);  hmacMD5.update(value);  return hmacMD5.getOutput();}  }
class C{  public FilteredTollHandler(final double simulationEndTime,final int numberOfTimeBins,final String shapeFile,final Network network){  this(simulationEndTime,numberOfTimeBins,shapeFile,network,null);  LOGGER.info("Area filtering is used, result will include links falls inside the given shape and persons from all user groups.");}  }
class C{  public void destroySubcontext(String name) throws NamingException {  destroySubcontext(nameParser.parse(name));}  }
class C{  public MutableLong(final String value) throws NumberFormatException {  super();  this.value=Long.parseLong(value);}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public float fastLength(){  return Vector3.fastLength(this);}  }
class C{  public long addJustifications(final IChunkedIterator<Justification> itr){  try {    if (!itr.hasNext())     return 0;    final long begin=System.currentTimeMillis();    long nwritten=0;    final IIndex ndx=getJustificationIndex();    final JustificationTupleSerializer tupleSer=(JustificationTupleSerializer)ndx.getIndexMetadata().getTupleSerializer();    while (itr.hasNext()) {      final Justification[] a=itr.nextChunk();      final int n=a.length;      Arrays.sort(a);      final byte[][] keys=new byte[n][];      for (int i=0; i < n; i++) {        keys[i]=tupleSer.serializeKey(a[i]);      }      final LongAggregator aggregator=new LongAggregator();      ndx.submit(0,n,keys,null,WriteJustificationsProcConstructor.INSTANCE,aggregator);      nwritten+=aggregator.getResult();    }    final long elapsed=System.currentTimeMillis() - begin;    if (log.isInfoEnabled())     log.info("Wrote " + nwritten + " justifications in "+ elapsed+ " ms");    return nwritten;  }  finally {    itr.close();  }}  }
class C{  public void processItem(Item item,StringTokenizer numberTokens){  if (numberTokens.hasMoreTokens()) {    int firstNumber=Integer.valueOf(numberTokens.nextToken());    if (numberTokens.hasMoreTokens()) {      Item child=(Item)getItemMap().get(firstNumber - 1);      if (child == null) {        String itemName=item.getNumberString();        for (int i=0; i < numberTokens.countTokens(); i++) {          if (itemName.lastIndexOf('.') != -1) {            itemName=itemName.substring(0,itemName.lastIndexOf('.'));          }        }        child=new Item(itemName);        child.setNumberString(itemName);        getItemMap().put(firstNumber - 1,child);      }      if (getLog().isDebugEnabled()) {        getLog().debug(getName() + " - branch: " + child.getName()+ " - child added: "+ item.getName());      }      child.processItem(item,numberTokens);    } else {      getItemMap().put(firstNumber - 1,item);      if (getLog().isDebugEnabled()) {        getLog().debug(getName() + " - new child: " + (firstNumber - 1)+ "-"+ item.getName());      }    }  }}  }
class C{  public boolean isTechnologyProviderDisabled(){  return isTechnologyProvider() && isPersistedRole(OrganizationRoleType.TECHNOLOGY_PROVIDER);}  }
class C{  public void exportXML(File xml) throws DataIOException, FileNotFoundException {  FileOutputStream xmlFos=new FileOutputStream(xml);  GraphMLWriter writer=new GraphMLWriter();  writer.writeGraph(getExportGraph(),xmlFos);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Map) {    Map<?,?> map=(Map)object;    if (size() != map.size()) {      return false;    }    Set<Entry<K,V>> set=entrySet();    return set.equals(map.entrySet());  }  return false;}  }
class C{  @Override public TopicSession createTopicSession(final boolean transacted,final int acknowledgeMode) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createTopicSession(" + transacted + ", "+ acknowledgeMode+ ")");  }  checkClosed();  if (type == ActiveMQRAConnectionFactory.QUEUE_CONNECTION || type == ActiveMQRAConnectionFactory.XA_QUEUE_CONNECTION) {    throw new IllegalStateException("Can not get a topic session from a queue connection");  }  return allocateConnection(transacted,acknowledgeMode,type);}  }
class C{  public SpanWithinQuery(SpanQuery big,SpanQuery little){  super(big,little);}  }
class C{  public void receiveErrorqueryDRSMigrationCapabilityForPerformance(java.lang.Exception e){}  }
class C{  public MessageBox.Result confirm(String msg){  this.msg=msg;  if (choice == YES_TO_ALL || choice == NO_TO_ALL)   return choice;  FutureTask<MessageBox.Result> fut=new FutureTask<>(this);  Platform.runLater(fut);  try {    return fut.get();  } catch (  Exception ignored) {    return NO;  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false; else {    TCPMessageChannel that=(TCPMessageChannel)other;    if (this.mySock != that.mySock)     return false; else     return true;  }}  }
class C{  protected List<MailetMatcherDescriptor> buildDescriptors(MavenProject project){  logProject(project);  return new DefaultDescriptorsExtractor().extract(project,getLog()).descriptors();}  }
class C{  MethodDoc methodDoc(){  return methodDoc;}  }
class C{  public void add(final long commitTime){  if (commitTime == 0L)   throw new IllegalArgumentException();  final byte[] key=encodeKey(commitTime);  if (!super.contains(key)) {    super.insert(key,null);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","lyun");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @SuppressWarnings("unused") private void debugTime(String s,boolean collectGarbage){  if (false) {    if (collectGarbage)     System.gc();    System.out.println(s + ": " + System.currentTimeMillis());  }}  }
class C{  public static void waitForClientAck() throws Exception {  final long maxWaitTime=30000;  final long start=System.currentTimeMillis();  Iterator iter=pool.getThreadIdToSequenceIdMap().entrySet().iterator();  SequenceIdAndExpirationObject seo=null;  if (!iter.hasNext()) {    fail("map is empty");  }  Map.Entry entry=(Map.Entry)iter.next();  seo=(SequenceIdAndExpirationObject)entry.getValue();  for (; ; ) {    if (seo.getAckSend()) {      break;    }    assertTrue("Waited over " + maxWaitTime + " for client ack ",+(System.currentTimeMillis() - start) < maxWaitTime);    sleep(1000);  }  LogWriterUtils.getLogWriter().info("seo = " + seo);  assertTrue("Creation time " + creationTime + " supposed to be same as seo "+ seo.getCreationTime(),creationTime == seo.getCreationTime());}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  curationPanel.resetEditor(aTarget);  List<SourceDocument> listOfSourceDocuements=getListOfDocs();  int currentDocumentIndex=listOfSourceDocuements.indexOf(bModel.getDocument());  if (currentDocumentIndex == 0) {    aTarget.appendJavaScript("alert('This is the first document!')");  } else {    bModel.setDocumentName(listOfSourceDocuements.get(currentDocumentIndex - 1).getName());    bModel.setDocument(listOfSourceDocuements.get(currentDocumentIndex - 1));    try {      repository.upgradeCasAndSave(bModel.getDocument(),Mode.CURATION,bModel.getUser().getUsername());      loadDocumentAction(aTarget);    } catch (    IOException|UIMAException|ClassNotFoundException|BratAnnotationException e) {      aTarget.add(getFeedbackPanel());      error(e.getCause().getMessage());    }  }}  }
class C{  public ViewPropertyAnimator scaleX(float value){  animateProperty(SCALE_X,value);  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return getCharacter();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testSameNodeInFromToSetCheapest(){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=new MultiNodeDijkstra(f.network,tc,tc);  Map<Node,InitialNode> fromNodes=new HashMap<Node,InitialNode>();  fromNodes.put(f.network.getNodes().get(Id.create(2,Node.class)),new InitialNode(2.0,2.0));  fromNodes.put(f.network.getNodes().get(Id.create(4,Node.class)),new InitialNode(1.0,1.0));  Map<Node,InitialNode> toNodes=new HashMap<Node,InitialNode>();  toNodes.put(f.network.getNodes().get(Id.create(4,Node.class)),new InitialNode(1.0,1.0));  toNodes.put(f.network.getNodes().get(Id.create(6,Node.class)),new InitialNode(3.0,3.0));  Path p=dijkstra.calcLeastCostPath(fromNodes,toNodes,null);  assertNotNull("no path found!",p);  assertEquals(0,p.links.size());  assertEquals(1,p.nodes.size());  assertEquals("4",p.nodes.get(0).getId().toString());}  }
class C{  public int searchUShort(int startIndex,int startOffset,int endIndex,int endOffset,int length,int key){  int location=0;  int bottom=0;  int top=length;  while (top != bottom) {    location=(top + bottom) / 2;    int locationStart=this.readUShort(startIndex + location * startOffset);    if (key < locationStart) {      top=location;    } else {      int locationEnd=this.readUShort(endIndex + location * endOffset);      if (key <= locationEnd) {        return location;      }      bottom=location + 1;    }  }  return -1;}  }
class C{  public CtClass makeClass(ClassFile classfile) throws RuntimeException {  return makeClass(classfile,true);}  }
class C{  protected void closeDatabase(final DefaultIndexImpl<?,?> indexImpl) throws NoSuchFieldException, IllegalAccessException {  final Field firstDatabaseField=indexImpl.getClass().getDeclaredField(DATABASE_FIELD_NAME);  firstDatabaseField.setAccessible(true);  final Database firstDatabase=(Database)firstDatabaseField.get(indexImpl);  if (firstDatabase != null) {    firstDatabase.close();  }}  }
class C{  public void forceReloadAll(){  fFilesToReoad.addAll(fStateMap.keySet());}  }
class C{  @RequestProcessing(value="/activities",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showActivities(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/activities.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof VwapDataset)) {    return false;  }  VwapDataset that=(VwapDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public static void paintText(Graphics g,AbstractButton b,Rectangle textRect,String text,int textShiftOffset){  FontMetrics fm=MySwingUtilities2.getFontMetrics(b,g);  int mnemIndex=b.getDisplayedMnemonicIndex();  if (isMnemonicHidden() == true) {    mnemIndex=-1;  }{    paintClassicText(b,g,textRect.x + textShiftOffset,textRect.y + fm.getAscent() + textShiftOffset,text,mnemIndex);  }}  }
class C{  public static String toString(Object bean){  try {    final ByteArrayOutputStream baos=new ByteArrayOutputStream();    final Marshaller m=createMarshaller();    m.setProperty(m.JAXB_FRAGMENT,Boolean.TRUE);    m.marshal(bean,baos);    return baos.toString();  } catch (  JAXBException x) {    final IllegalArgumentException iae=new IllegalArgumentException("Failed to write SessionConfigBean: " + x,x);    throw iae;  }}  }
class C{  public void prepare() throws ReplicatorException, InterruptedException {}  }
class C{  @SuppressWarnings("unchecked") protected void notifyTestSetProduced(TestSetEvent tse){  Vector<TestSetListener> l;synchronized (this) {    l=(Vector<TestSetListener>)m_listeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      if (m_receivedStopNotification) {        if (m_logger != null) {          m_logger.logMessage("[TestSetMaker] " + statusMessagePrefix() + " stopping.");          m_logger.statusMessage(statusMessagePrefix() + "INTERRUPTED");        }        m_receivedStopNotification=false;        break;      }      l.elementAt(i).acceptTestSet(tse);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:01.266 -0500",hash_original_method="A041F8E96FF7F1638DE5EDEE0D23FE8B",hash_generated_method="5EF2B59EC71A41C6F2469CE5E44BCCC8") public boolean isGroupOwner(){  return (groupCapability & GROUP_CAPAB_GROUP_OWNER) != 0;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  String findAndBind(Properties ldapProperties,String baseDN,String searchFilter,String password) throws LoginException {  String realUserDN=null;  boolean bindSuccessful=false;  try {    realUserDN=userSearch(ldapProperties,baseDN,searchFilter);    if (realUserDN == null) {      throw new LoginException("No User found for '" + searchFilter + "'.");    }    bindSuccessful=bindAsUser(ldapProperties,realUserDN,password);    if (bindSuccessful == false) {      throw new LoginException("Bind with DN '" + realUserDN + "' failed.");    }  } catch (  NamingException e) {    throw new LoginException(e.toString());  }  return realUserDN;}  }
class C{  public int noOfKthNearest(){  return m_KthNearestSize;}  }
class C{  public static boolean isWhitespace(char c){  return !RegExpUtils.resetAndTest(regexpNotWhitespace,String.valueOf(c));}  }
class C{  public static final Field TRUNCATE_COLUMN(int length){  if (length <= 0)   throw new IllegalArgumentException("The truncation length must be positive");  return Field.create("column.truncate.to." + length + ".chars").withValidation(null).withDescription("A comma-separated list of regular expressions matching fully-qualified names of columns that should " + "be truncated to " + length + " characters.");}  }
class C{  public Book(String id,String name,String author,String description){  this.id=id;  this.name=name;  this.description=description;  this.author=author;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TAnnotableElement.class) {switch (baseFeatureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:      return TypesPackage.TFORMAL_PARAMETER__ANNOTATIONS;default :    return -1;}}if (baseClass == SyntaxRelatedTElement.class) {switch (baseFeatureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:  return TypesPackage.TFORMAL_PARAMETER__AST_ELEMENT;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static String createHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {  return createHash(password.toCharArray());}  }
class C{  public boolean onBackPressed(){  return false;}  }
class C{  private void putAllUsers(Map<String,User> users,LDAPConnection ldapConnection,String usernameAttribute) throws GuacamoleException {  try {    LDAPSearchResults results=ldapConnection.search(confService.getUserBaseDN(),LDAPConnection.SCOPE_SUB,"(&(objectClass=*)(" + escapingService.escapeLDAPSearchFilter(usernameAttribute) + "=*))",null,false);    while (results.hasMore()) {      LDAPEntry entry=results.next();      LDAPAttribute username=entry.getAttribute(usernameAttribute);      if (username == null) {        logger.warn("Queried user is missing the username attribute \"{}\".",usernameAttribute);        continue;      }      String identifier=username.getStringValue();      if (users.put(identifier,new SimpleUser(identifier)) != null)       logger.warn("Possibly ambiguous user account: \"{}\".",identifier);    }  } catch (  LDAPException e) {    throw new GuacamoleServerException("Error while querying users.",e);  }}  }
class C{  public DataOutputStream(java.io.OutputStream out){}  }
class C{  public boolean isPreDestroyCalled(){  return this.preDestroyCalled;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected boolean ensureFreeCapacity(){  return true;}  }
class C{  private String loadHTMLData(String body){  StringBuilder builder=new StringBuilder().append(UIManager.WEB_STYLE).append(UIManager.WEB_LOAD_IMAGES);  SharedPreferences preferences=SharePreferenceManager.getApplicationSetting(this);  int theme=preferences.getInt(ApplicationSetting.KEY_THEME,ApplicationTheme.LIGHT.getKey());  if (theme == SharePreferenceManager.ApplicationSetting.ApplicationTheme.DARK.getKey()) {    builder.append("<body class='night'><div class='contentstyle' id='article_body'>");  } else {    builder.append("<body><div class='contentstyle' id='article_body'>");  }  return builder.append(setupContentImage(body)).append("</div></body>").toString();}  }
class C{  public java.io.InputStream readAsciiStream() throws SQLException {  return (java.io.InputStream)getNextAttribute();}  }
class C{  public boolean parseXmlResource(Object resourceName,InputSource source){  XMLReader reader;  source.setEncoding("UTF8");  try {    reader=XMLReaderFactory.createXMLReader();  } catch (  SAXException e) {    if (logger.isLoggable(Level.SEVERE)) {      logger.warning("Failed to create reader for " + resourceName + ": "+ e.getMessage());    }    return false;  }  boolean status=false;  reader.setContentHandler(this);  reader.setErrorHandler(this);  try {    reader.parse(source);    status=true;  } catch (  SAXParseException e) {    if (logger.isLoggable(Level.WARNING)) {      logger.warning("Failed to parse " + resourceName + " Line: "+ e.getLineNumber()+ " Col: "+ e.getColumnNumber()+ ": "+ e);    }  }catch (  SAXException e) {    if (logger.isLoggable(Level.WARNING)) {      logger.warning("Failed to parse " + resourceName + e.getMessage());    }  }catch (  IOException e) {    if (logger.isLoggable(Level.WARNING)) {      logger.warning("Failed to parse " + resourceName + ":"+ e.getMessage());    }  }  return status;}  }
class C{  private static int findFreePort(){  ServerSocket socket=null;  try {    socket=new ServerSocket(0);    socket.setReuseAddress(true);    int port=socket.getLocalPort();    try {      socket.close();    } catch (    IOException e) {    }    return port;  } catch (  Exception e) {  } finally {    if (socket != null) {      try {        socket.close();      } catch (      IOException e) {        throw new RuntimeException(e);      }    }  }  return 2181;}  }
class C{  @DSComment("no security concern") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.818 -0500",hash_original_method="33160DF8469148C6436960E1E1B046E8",hash_generated_method="3B463090CD85133EA75742B90CB4B38A") public HttpEntityWrapper(HttpEntity wrapped){  super();  if (wrapped == null) {    throw new IllegalArgumentException("wrapped entity must not be null");  }  wrappedEntity=wrapped;}  }
class C{  public void highlight(double x,double y,double width,double height){  ps.append(String.format(Locale.US,"%1.3f %1.3f %1.3f %1.3f highlight\n",x,y,width,height));}  }
class C{  public static SAXParser newSAXParser(String schemaLanguage,File schema) throws SAXException, ParserConfigurationException {  return newSAXParser(schemaLanguage,true,false,schema);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(256);  sb.append("(");  sb.append(getSubject());  sb.append(", ");  sb.append(getPredicate());  sb.append(", ");  sb.append(getObject());  sb.append(")");  return sb.toString();}  }
class C{  public PostgreSQLEnvironment() throws GuacamoleException {  super();  Boolean disallowSimultaneous=getProperty(PostgreSQLGuacamoleProperties.POSTGRESQL_DISALLOW_SIMULTANEOUS_CONNECTIONS);  Boolean disallowDuplicate=getProperty(PostgreSQLGuacamoleProperties.POSTGRESQL_DISALLOW_DUPLICATE_CONNECTIONS);  if (disallowSimultaneous != null) {    if (disallowSimultaneous) {      DEFAULT_MAX_CONNECTIONS=1;      DEFAULT_MAX_GROUP_CONNECTIONS=0;    } else {      DEFAULT_MAX_CONNECTIONS=0;      DEFAULT_MAX_GROUP_CONNECTIONS=0;    }    logger.warn("The \"{}\" property is deprecated. Use \"{}\" and \"{}\" instead.",PostgreSQLGuacamoleProperties.POSTGRESQL_DISALLOW_SIMULTANEOUS_CONNECTIONS.getName(),PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_MAX_CONNECTIONS.getName(),PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_MAX_GROUP_CONNECTIONS.getName());    logger.info("To achieve the same result of setting \"{}\" to \"{}\", set \"{}\" to \"{}\" and \"{}\" to \"{}\".",PostgreSQLGuacamoleProperties.POSTGRESQL_DISALLOW_SIMULTANEOUS_CONNECTIONS.getName(),disallowSimultaneous,PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_MAX_CONNECTIONS.getName(),DEFAULT_MAX_CONNECTIONS,PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_MAX_GROUP_CONNECTIONS.getName(),DEFAULT_MAX_GROUP_CONNECTIONS);  }  if (disallowDuplicate != null) {    if (disallowDuplicate) {      DEFAULT_MAX_CONNECTIONS_PER_USER=1;      DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER=1;    } else {      DEFAULT_MAX_CONNECTIONS_PER_USER=0;      DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER=0;    }    logger.warn("The \"{}\" property is deprecated. Use \"{}\" and \"{}\" instead.",PostgreSQLGuacamoleProperties.POSTGRESQL_DISALLOW_DUPLICATE_CONNECTIONS.getName(),PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_MAX_CONNECTIONS_PER_USER.getName(),PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_MAX_GROUP_CONNECTIONS.getName());    logger.info("To achieve the same result of setting \"{}\" to \"{}\", set \"{}\" to \"{}\" and \"{}\" to \"{}\".",PostgreSQLGuacamoleProperties.POSTGRESQL_DISALLOW_DUPLICATE_CONNECTIONS.getName(),disallowDuplicate,PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_MAX_CONNECTIONS_PER_USER.getName(),DEFAULT_MAX_CONNECTIONS_PER_USER,PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER.getName(),DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER);  }}  }
class C{  public Object remove(int index){  Object old=get(index);  content.remove(index);  modCount++;  return old;}  }
class C{  protected SampledVertexDecorator(V delegate){  super(delegate);}  }
class C{  protected void processCloudletSubmit(SimEvent ev,boolean ack){  updateCloudletProcessing();  try {    Cloudlet cl=(Cloudlet)ev.getData();    if (cl.isFinished()) {      String name=CloudSim.getEntityName(cl.getUserId());      Log.printConcatLine(getName(),": Warning - Cloudlet #",cl.getCloudletId()," owned by ",name," is already completed/finished.");      Log.printLine("Therefore, it is not being executed again");      Log.printLine();      if (ack) {        int[] data=new int[3];        data[0]=getId();        data[1]=cl.getCloudletId();        data[2]=CloudSimTags.FALSE;        int tag=CloudSimTags.CLOUDLET_SUBMIT_ACK;        sendNow(cl.getUserId(),tag,data);      }      sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_RETURN,cl);      return;    }    cl.setResourceParameter(getId(),getCharacteristics().getCostPerSecond(),getCharacteristics().getCostPerBw());    int userId=cl.getUserId();    int vmId=cl.getVmId();    double fileTransferTime=predictFileTransferTime(cl.getRequiredFiles());    Host host=getVmAllocationPolicy().getHost(vmId,userId);    Vm vm=host.getVm(vmId,userId);    CloudletScheduler scheduler=vm.getCloudletScheduler();    double estimatedFinishTime=scheduler.cloudletSubmit(cl,fileTransferTime);    if (estimatedFinishTime > 0.0 && !Double.isInfinite(estimatedFinishTime)) {      estimatedFinishTime+=fileTransferTime;      send(getId(),estimatedFinishTime,CloudSimTags.VM_DATACENTER_EVENT);    }    if (ack) {      int[] data=new int[3];      data[0]=getId();      data[1]=cl.getCloudletId();      data[2]=CloudSimTags.TRUE;      int tag=CloudSimTags.CLOUDLET_SUBMIT_ACK;      sendNow(cl.getUserId(),tag,data);    }  } catch (  ClassCastException c) {    Log.printLine(getName() + ".processCloudletSubmit(): " + "ClassCastException error.");    c.printStackTrace();  }catch (  Exception e) {    Log.printLine(getName() + ".processCloudletSubmit(): " + "Exception error.");    e.printStackTrace();  }  checkCloudletCompletion();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.717 -0500",hash_original_method="8F463ADE51DCD8AE5187274242206DA5",hash_generated_method="C72D96C65490338F57465927F7F16D28") public boolean containsHeader(String name){  for (int i=0; i < headers.size(); i++) {    Header header=(Header)headers.get(i);    if (header.getName().equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  public QueueListNode(){}  }
class C{  public TriggerExactlyInListCondition(final String... trigger){  this(Arrays.asList(trigger));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MIssueProject[");  sb.append(get_ID()).append("-").append(getName()).append(",A_Asset_ID=").append(getA_Asset_ID()).append(",C_Project_ID=").append(getC_Project_ID()).append("]");  return sb.toString();}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,double[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  private X500Name createX500NameForDevice(Device device) throws KeyStoreException {  X509Certificate deviceTypeCertificate=(X509Certificate)keyStore.getCertificate("private");  Principal principal=deviceTypeCertificate.getSubjectDN();  String country=getPrincipalAttributeValue(principal,"C","DE");  String organization=getPrincipalAttributeValue(principal,"O","SAP Trust Community");  String unit=getPrincipalAttributeValue(principal,"OU","SAP POC IOT");  String name=getPrincipalAttributeValue(principal,"CN","");  Matcher matcher=DEVICE_TYPE_PATTERN.matcher(name);  String tenantId=null;  if (matcher.find()) {    if (matcher.groupCount() == 2) {      tenantId=matcher.group(2);    }  }  String commonName="deviceId:".concat(device.getId()).concat("|tenantId:").concat(tenantId);  X500Name x500Name=null;  try {    x500Name=new X500Name(commonName,unit,organization,"","",country);  } catch (  IOException e) {    throw new KeyStoreException("Unable to create X500 name for a device",e);  }  return x500Name;}  }
class C{  public static <T>CompletionStage<T> dereference(CompletionStage<? extends CompletionStage<T>> stage){  return stage.thenCompose(Identity.INSTANCE);}  }
class C{  public int compareTo(Object o){  Span otherSpan=(Span)o;  float otherStart=otherSpan.getStart();  int result;  if (mStart < otherStart) {    result=-1;  } else   if (mStart > otherStart) {    result=1;  } else {    result=0;  }  return result;}  }
class C{  @Override public String formatCookie(final Cookie cookie){  LOG.trace("enter RFC2965Spec.formatCookie(Cookie)");  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof Cookie2) {    final Cookie2 cookie2=(Cookie2)cookie;    final int version=cookie2.getVersion();    final StringBuffer buffer=new StringBuffer();    formatter.format(buffer,new NameValuePair("$Version",Integer.toString(version)));    buffer.append("; ");    doFormatCookie2(cookie2,buffer);    return buffer.toString();  } else {    return rfc2109.formatCookie(cookie);  }}  }
class C{  protected boolean isBlocked(AxisAlignedBB aabb){  return !this.entity.worldObj.getCollisionBoxes(this.entity,aabb).isEmpty();}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public boolean writeCharacteristic(BluetoothGattCharacteristic charact,byte[] data,final BleCharactCallback bleCallback){  if (BleLog.isPrint) {    BleLog.i(TAG,charact.getUuid() + " characteristic write bytes: " + Arrays.toString(data)+ " ,hex: "+ HexUtil.encodeHexStr(data));  }  handleCharacteristicWriteCallback(bleCallback);  charact.setValue(data);  return handleAfterInitialed(getBluetoothGatt().writeCharacteristic(charact),bleCallback);}  }
class C{  public static String newStringUtf8(byte[] bytes){  return org.apache.commons.codec.binary.StringUtils.newStringUtf8(bytes);}  }
class C{  public ColladaTexture(String ns){  super(ns);}  }
class C{  static int hash(Object x1,Object x2,Object x3,Object x4){  int h=0;  h^=x1.hashCode();  if (x2 != null) {    h^=x2.hashCode();  }  if (x3 != null) {    h^=x3.hashCode();  }  if (x4 != null) {    h^=x4.hashCode();  }  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  public static byte[] longToByteArray(final long value){  final byte[] output=new byte[8];  final DataBuffer buffer=new DataBuffer(output,0,8);  buffer.writeLong(value);  return output;}  }
class C{  public static void onEventEnd(final Context context,final String event_id,final String label){  onEventDuration(context,event_id,label,log.onEventEnd(context,event_id,label));}  }
class C{  private void refreshAccessToken(){  final Long expiresIn=credential.getExpiresInSeconds();  String accessToken=credential.getAccessToken();  if (accessToken == null || expiresIn != null && expiresIn <= 60) {    try {      credential.refreshToken();      accessToken=credential.getAccessToken();    } catch (    final IOException e) {      log.error("Failed to fetch access token",e);    }  }  if (accessToken != null) {    this.accessToken=accessToken;  }}  }
class C{  @Override public final int computeHashCode(int val){  return HashFunctions.hash(val);}  }
class C{  private Object rawMake(HGPersistentHandle[] layout,HGAtomType type,HGPersistentHandle atomHandle){  HGPersistentHandle[] targetSet=EMPTY_PERSISTENT_HANDLE_SET;  if (layout.length > 2) {    targetSet=new HGPersistentHandle[layout.length - 2];    for (int i=2; i < layout.length; i++)     targetSet[i - 2]=layout[i];  }  Object result=type.make(layout[1],new ReadyRef<HGHandle[]>(targetSet),new IncidenceSetRef(atomHandle,this));  if (targetSet.length > 0 && !(result instanceof HGLink))   result=new HGValueLink(result,targetSet);  if (result instanceof HGAtomType)   result=typeSystem.toRuntimeInstance(atomHandle,(HGAtomType)result);  if (result instanceof HGGraphHolder)   ((HGGraphHolder)result).setHyperGraph(this);  return result;}  }
class C{  public static void initialize(final JFrame parent,final CProjectTree tree,final CDatabaseManager databaseManager){  final List<IDropHandler> handlers=new ArrayList<IDropHandler>();  handlers.add(new CViewsToProjectHandler(parent));  handlers.add(new CViewsToTagHandler(parent));  handlers.add(new CModulesToAddressSpaceHandler(parent));  handlers.add(new CDatabaseSortingHandler(databaseManager));  handlers.add(new CTagSortingHandler());  new CDefaultTransferHandler(tree,DnDConstants.ACTION_COPY_OR_MOVE,handlers);}  }
class C{  private void processResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  if (innerState.mContinuingDownload) {    return;  }  readResponseHeaders(state,innerState,response);  try {    state.mFilename=mService.generateSaveFile(mInfo.mFileName,mInfo.mTotalBytes);  } catch (  DownloaderService.GenerateSaveFileError exc) {    throw new StopRequest(exc.mStatus,exc.mMessage);  }  try {    state.mStream=new FileOutputStream(state.mFilename);  } catch (  FileNotFoundException exc) {    File pathFile=new File(Helpers.getSaveFilePath(mService));    try {      if (pathFile.mkdirs()) {        state.mStream=new FileOutputStream(state.mFilename);      }    } catch (    Exception ex) {      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while opening destination file: " + exc.toString(),exc);    }  }  if (Constants.LOGV) {    Log.v(Constants.TAG,"writing " + mInfo.mUri + " to "+ state.mFilename);  }  updateDatabaseFromHeaders(state,innerState);  checkConnectivity(state);}  }
class C{  public long countUsers(){  if (supportsTransactions)   graph.tx().rollback();  return g.V().hasLabel(CredentialGraphTokens.VERTEX_LABEL_USER).count().next();}  }
class C{  public void flush(){  if (this.size > 0) {    list.setSize(this.size);    this.target.addAllOf(list);    this.size=0;  }}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  double transProb=0.0, temp=0.0;  double[] classProbability=new double[m_NumClasses];  double[] predictedValue=new double[1];  for (int i=0; i < classProbability.length; i++) {    classProbability[i]=0.0;  }  predictedValue[0]=0.0;  if (m_InitFlag == ON) {    if (m_BlendMethod == B_ENTROPY) {      generateRandomClassColomns();    }    m_Cache=new KStarCache[m_NumAttributes];    for (int i=0; i < m_NumAttributes; i++) {      m_Cache[i]=new KStarCache();    }    m_InitFlag=OFF;  }  Instance trainInstance;  Enumeration<Instance> enu=m_Train.enumerateInstances();  while (enu.hasMoreElements()) {    trainInstance=(Instance)enu.nextElement();    transProb=instanceTransformationProbability(instance,trainInstance);switch (m_ClassType) {case Attribute.NOMINAL:      classProbability[(int)trainInstance.classValue()]+=transProb;    break;case Attribute.NUMERIC:  predictedValue[0]+=transProb * trainInstance.classValue();temp+=transProb;break;}}if (m_ClassType == Attribute.NOMINAL) {double sum=Utils.sum(classProbability);if (sum <= 0.0) for (int i=0; i < classProbability.length; i++) classProbability[i]=(double)1 / (double)m_NumClasses; else Utils.normalize(classProbability,sum);return classProbability;} else {predictedValue[0]=(temp != 0) ? predictedValue[0] / temp : 0.0;return predictedValue;}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.526 -0500",hash_original_method="76B0F415E6F814FE548D14BC6D5843EE",hash_generated_method="3845385B9FADAA47A4B502A9AE94271B") public boolean contains(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x))     return true;    i=(i + 1) & mask;  }  return false;}  }
class C{  public void addTime(When time){  getTimes().add(time);}  }
class C{  private void srcMemoryToCombinedBuffer(boolean compact,Memory srcMem){  final int preLongs=2;  final int extra=2;  final int preBytes=(preLongs + extra) << 3;  long cumOffset=srcMem.getCumulativeOffset(0L);  Object memArr=srcMem.array();  int bbCnt=baseBufferCount_;  int k=getK();  long n=getN();  double[] combinedBuffer=getCombinedBuffer();  putMinValue(extractMinDouble(memArr,cumOffset));  putMaxValue(extractMaxDouble(memArr,cumOffset));  if (compact) {    srcMem.getDoubleArray(preBytes,combinedBuffer,0,bbCnt);    long bits=bitPattern_;    if (bits != 0) {      long memOffset=preBytes + (bbCnt << 3);      int combBufOffset=2 * k;      while (bits != 0L) {        if ((bits & 1L) > 0L) {          srcMem.getDoubleArray(memOffset,combinedBuffer,combBufOffset,k);          memOffset+=(k << 3);        }        combBufOffset+=k;        bits>>>=1;      }    }  } else {    int levels=Util.computeNumLevelsNeeded(k,n);    int totItems=(levels == 0) ? bbCnt : (2 + levels) * k;    srcMem.getDoubleArray(preBytes,combinedBuffer,0,totItems);  }}  }
class C{  public AROW(double r,boolean diagonalOnly){  setR(r);  setDiagonalOnly(diagonalOnly);}  }
class C{  @VisibleForTesting static String prettyPrintSetDiff(Set<?> a,Set<?> b){  Set<?> removed=Sets.difference(a,b);  Set<?> added=Sets.difference(b,a);  if (removed.isEmpty() && added.isEmpty()) {    return "NO DIFFERENCES";  }  return Joiner.on("\n    ").skipNulls().join("",!added.isEmpty() ? ("ADDED:" + formatSetContents(added)) : null,!removed.isEmpty() ? ("REMOVED:" + formatSetContents(removed)) : null,"FINAL CONTENTS:" + formatSetContents(b));}  }
class C{  private static long totalSize(Map<String,Long> relPathToSize){  long total=0;  for (  Long l : relPathToSize.values()) {    total+=l;  }  return total;}  }
class C{  private void checkRange(int index){  if (index >= count || index < 0) {    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ count);  }}  }
class C{  private static String[] split(final String text){  return text.split(";",2);}  }
class C{  public void addAddress(InetAddress address){  addAddress(new PeerAddress(address,params.getPort()));}  }
class C{  @Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {  SessionConfiguration config=Server.createSessionConfiguration();  if (oAuth2Credentials == null) {    oAuth2Credentials=Server.createOAuth2Credentials(config);  }  HttpSession httpSession=req.getSession(true);  if (httpSession.getAttribute(Server.USER_SESSION_ID) == null) {    httpSession.setAttribute(Server.USER_SESSION_ID,new Random().nextLong());  }  credential=oAuth2Credentials.loadCredential(httpSession.getAttribute(Server.USER_SESSION_ID).toString());  if (credential != null && credential.getAccessToken() != null) {    if (uberRidesService == null) {      CredentialsSession session=new CredentialsSession(config,credential);      UberRidesApi api=UberRidesApi.with(session).build();      uberRidesService=api.createService();    }    super.service(req,resp);  } else {    resp.sendRedirect(oAuth2Credentials.getAuthorizationUrl());  }}  }
class C{  public String masterNodeId(){  return this.masterNodeId;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  Formatter<T> doNotReport(){  report=false;  return this;}  }
class C{  public void schedule(Runnable command,long delay,TimeUnit unit){  schedule(command,delay,0,unit);}  }
class C{  public StringVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];}  }
class C{  public COpenInLastWindowAction(final Window parent,final IViewContainer container,final INaviView[] views){  super("Open in last window");  m_parent=Preconditions.checkNotNull(parent,"IE02876: parent argument can not be null");  m_container=Preconditions.checkNotNull(container,"IE02877: container argument can not be null");  m_views=Preconditions.checkNotNull(views,"IE02878: views argument can not be null").clone();  putValue(ACCELERATOR_KEY,HotKeys.LOAD_LAST_WINDOW_HK.getKeyStroke());}  }
class C{  @Override public void service(RequestWeb request){  try {    if (!request.method().equals("OPTIONS")) {      request.ok();      return;    }    if (_crossOrigin.allowCredentials())     request.header(ALLOW_CREDENTIALS,"true");    String[] origin=_crossOrigin.value();    if (origin.length == 0)     origin=_crossOrigin.allowOrigin();    if (origin.length > 0)     request.header(ALLOW_ORIGIN,join(origin));    HttpMethod[] methods=_crossOrigin.allowMethods();    if (methods.length > 0) {      request.header(ALLOW_METHODS,join(methods));    } else     if (_httpMethod != null) {      request.header(ALLOW_METHODS,_httpMethod.toString());    }    String[] allowHeaders=_crossOrigin.allowHeaders();    if (allowHeaders.length > 0)     request.header(ALLOW_HEADERS,join(allowHeaders));    String[] exposeHeaders=_crossOrigin.exposeHeaders();    if (exposeHeaders.length > 0)     request.header(EXPOSE_HEADERS,join(exposeHeaders));    request.header(MAX_AGE,Long.toString(_crossOrigin.maxAge()));    request.ok();    request.halt();  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  public boolean isBackCommandEnabled(){  return baseFormNavigationStack != null;}  }
class C{  @Override public void fillCirclePoints(Map<Integer,Point> circleIndexPoint,Map<Point,Integer> circlePointIndex){  if (SHOW_LOGS)   Log.v(TAG,">> fillCirclePoints");  createFirstOctant(circleIndexPoint,circlePointIndex);  mCircleMirrorHelper.mirror_2nd_Octant(circleIndexPoint,circlePointIndex);  mCircleMirrorHelper.mirror_2nd_Quadrant(circleIndexPoint,circlePointIndex);  mCircleMirrorHelper.mirror_2nd_Semicircle(circleIndexPoint,circlePointIndex);  if (SHOW_LOGS)   Log.v(TAG,"<< fillCirclePoints");}  }
class C{  @Action(value="/masters/overhead-newform") public String newform(){  return NEW;}  }
class C{  public Instance[] transformInstance(Instance x) throws Exception {  return null;}  }
class C{  public static Relevance relevantFact(Fact fact,Schema schema){  if (Schema.isSchemaTriple(fact.getTriple())) {    return Relevance.NONE;  }  Resource subject=fact.getSubject();  URI predURI=fact.getPredicate();  Value object=fact.getObject();  boolean relevantToSubject=false;  boolean relevantToObject=false;  boolean literalObject=object instanceof Literal;  if (predURI.equals(RDF.TYPE)) {    Resource typeURI=(Resource)fact.getObject();    if (typeURI.equals(OWL.NOTHING) || schema.hasClass(typeURI)) {      relevantToSubject=true;    }  }  if (schema.hasProperty(predURI)) {    OwlProperty prop=schema.getProperty(predURI);    if (prop.isAsymmetric() || prop.isTransitive() || !prop.getRestrictions().isEmpty()) {      relevantToSubject=true;      relevantToObject=!literalObject;    }    if (!relevantToSubject && (!prop.getDomain().isEmpty() || prop.getSuperProperties().size() > 1 || !prop.getDisjointProperties().isEmpty())) {      relevantToSubject=true;    }    if (!literalObject && !relevantToObject && (!prop.getRange().isEmpty() || !prop.getInverseProperties().isEmpty() || prop.isSymmetric()|| prop.isIrreflexive() && subject.equals(object))) {      relevantToObject=true;    }  }  return Relevance.get(relevantToSubject,relevantToObject);}  }
class C{  public void testContractions() throws IOException {  Analyzer a=new IrishAnalyzer();  assertAnalyzesTo(a,"b'fhearr m'athair",new String[]{"fearr","athair"});  a.close();}  }
class C{  protected boolean matchesTemplate(Instance first){  for (  int m_ResultsetKeyColumn : m_ResultsetKeyColumns) {    if (first.value(m_ResultsetKeyColumn) != m_Template.value(m_ResultsetKeyColumn)) {      return false;    }  }  return true;}  }
class C{  static void svd_dswap(int n,double[] dx,int incx,double[] dy,int incy){  if (n <= 0 || incx == 0 || incy == 0)   return;  int ix=(incx == 1) ? 0 : n - 1;  int iy=(incy == 1) ? 0 : n - 1;  for (int i=0; i < n; i++) {    double swap=dy[iy];    dy[iy]=dx[ix];    dx[ix]=swap;    iy+=incy;    ix+=incx;  }}  }
class C{  public VideoData duplicate() throws IOException, ClassNotFoundException {  VideoData result=new VideoData();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  writeExternal(oos);  oos.close();  byte[] buf=baos.toByteArray();  baos.close();  ByteArrayInputStream bais=new ByteArrayInputStream(buf);  ObjectInputStream ois=new ObjectInputStream(bais);  result.readExternal(ois);  ois.close();  bais.close();  if (header != null) {    result.setHeader(header.clone());  }  return result;}  }
class C{  public JSONObject put(String key,Map<String,Object> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  @Override public void onDestroy(){  super.onDestroy();  eventBusC.unregister(this);}  }
class C{  protected void update(boolean[] state){  if (isDisabledDueToFocusLost) {    return;  }  boolean ok=true;  boolean ignore=true;  for (int i=0; i < conditions.length; i++) {    if (conditions[i] != DONT_CARE) {      ignore=false;      if (((conditions[i] == MANDATORY) && (state[i] == false)) || ((conditions[i] == DISALLOWED) && (state[i] == true))) {        ok=false;        break;      }    }  }  if (!ignore) {    setEnabled(ok);  }}  }
class C{  private void derive(CascadedStyle matched){  if (matched == null) {    return;  }  Iterator mProps=matched.getCascadedPropertyDeclarations();  while (mProps.hasNext()) {    PropertyDeclaration pd=(PropertyDeclaration)mProps.next();    FSDerivedValue val=deriveValue(pd.getCSSName(),pd.getValue());    _derivedValuesById[pd.getCSSName().FS_ID]=val;  }}  }
class C{  public static void registerBuiltInAnalysisEngines(IAnalysisCache analysisCache){  new edu.umd.cs.findbugs.classfile.engine.EngineRegistrar().registerAnalysisEngines(analysisCache);  new edu.umd.cs.findbugs.classfile.engine.asm.EngineRegistrar().registerAnalysisEngines(analysisCache);  new edu.umd.cs.findbugs.classfile.engine.bcel.EngineRegistrar().registerAnalysisEngines(analysisCache);}  }
class C{  public void addNotifier(final DSSNotifier dssNotifier){  if (!notifiers.contains(dssNotifier)) {    LOG.trace(">>> NOTIFIER ADDED: " + dssNotifier);    notifiers.add(dssNotifier);  }}  }
class C{  public void iinc(final int local,final int amount){  mv.visitIincInsn(local,amount);}  }
class C{  public RangeQueryBuilder gt(int from){  this.from=from;  this.includeLower=false;  return this;}  }
class C{  public PutMappingRequest source(String mappingSource){  this.source=mappingSource;  return this;}  }
class C{  public TurnCandidateHarvester(TransportAddress turnServer,LongTermCredential longTermCredential){  super(turnServer);  this.longTermCredential=longTermCredential;}  }
class C{  public ImageBorderWizard(){  initComponents();  arcHeight.setModel(new SpinnerNumberModel(10,1,50,1));  arcWidth.setModel(new SpinnerNumberModel(10,1,50,1));  com.codename1.ui.Button btn=new com.codename1.ui.Button();  int bgColor=btn.getStyle().getBgColor();  int fgColor=btn.getStyle().getFgColor();  colorA.setText(Integer.toHexString(bgColor));  colorB.setText(Integer.toHexString(new Color(bgColor).darker().darker().getRGB() & 0xffffff));  colorC.setText(Integer.toHexString(fgColor));  colorD.setText(Integer.toHexString(new Color(fgColor).brighter().brighter().getRGB() & 0xffffff));  bindColorIconToButton(pickColorA,colorA);  bindColorIconToButton(pickColorB,colorB);  bindColorIconToButton(pickColorC,colorC);  bindColorIconToButton(pickColorD,colorD);  height.setModel(new SpinnerNumberModel(40,20,400,1));  opacity.setModel(new SpinnerNumberModel(255,0,255,1));  thickness.setModel(new SpinnerNumberModel(1,1,30,1));  width.setModel(new SpinnerNumberModel(150,20,400,1));  trackTextFieldChanges(colorA);  trackTextFieldChanges(colorB);  trackTextFieldChanges(colorC);  trackTextFieldChanges(colorD);  updateBorderImage();}  }
class C{  public static int convertSpToPx(int spSize){  return Math.round((float)spSize / getDisplayDensity4Fonts());}  }
class C{  public boolean isAccptd(){  return accptd;}  }
class C{  @Override public int hashCode(){  return regionPath.hashCode();}  }
class C{  public FutureResult(CancelCriterion crit){  this.latch=new StoppableCountDownLatch(crit,1);}  }
class C{  public WrappedByteBuffer fillWith(byte b,int size){  _autoExpand(size);  while (size-- > 0) {    _buf.put(b);  }  return this;}  }
class C{  public static boolean isPropositionSymbolIdentifierStart(char ch){  return Character.isJavaIdentifierStart(ch);}  }
class C{  int readCheckpoint(ReadStream is,byte[] blockBuffer,int rowOffset,int blobTail) throws IOException {  int rowLength=length();  if (rowOffset < blobTail) {    return -1;  }  for (  Column column : columns()) {    blobTail=column.readCheckpoint(is,blockBuffer,rowOffset,rowLength,blobTail);  }  return blobTail;}  }
class C{  @Override public boolean isCatalogAtStart(){  debugCodeCall("isCatalogAtStart");  return true;}  }
class C{  private void writeKeysWithPrefix(String prefix){  for (  String key : keys) {    if (key.startsWith(prefix)) {      ps.println(key + "=" + prop.getProperty(key));    }  }  ps.println();}  }
class C{  public JSONArray(Collection collection){  this.myArrayList=new ArrayList();  if (collection != null) {    Iterator iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  public static void main(String[] args) throws IOException {  InetAddress ip4Group=InetAddress.getByName("225.4.5.6");  InetAddress ip6Group=InetAddress.getByName("ff02::a");  NetworkConfiguration config=NetworkConfiguration.probe();  NetworkInterface nif=config.ip4Interfaces().iterator().next();  InetAddress anySource=config.ip4Addresses(nif).iterator().next();  membershipKeyTests(nif,ip4Group,anySource);  exceptionTests(nif);  Iterator<NetworkInterface> iter=config.ip6Interfaces().iterator();  if (iter.hasNext()) {    nif=iter.next();    anySource=config.ip6Addresses(nif).iterator().next();    membershipKeyTests(nif,ip6Group,anySource);  }}  }
class C{  public static void storagePorts(String id){  VirtualArrayRestRep virtualArray=getVirtualArray(id);  VirtualArrayStoragePortsDataTable dataTable=new VirtualArrayStoragePortsDataTable();  render(virtualArray,dataTable);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected void decodeBitmapData(final GifFrame frame,byte[] dstPixels){  if (frame != null) {    rawData.position(frame.bufferFrameStart);  }  final int nullCode=-1;  final int npix=(frame == null) ? width * height : frame.iw * frame.ih;  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;  if (dstPixels == null || dstPixels.length < npix) {    dstPixels=new byte[npix];  }  if (prefix == null) {    prefix=new short[MAX_STACK_SIZE];  }  if (suffix == null) {    suffix=new byte[MAX_STACK_SIZE];  }  if (pixelStack == null) {    pixelStack=new byte[MAX_STACK_SIZE + 1];  }  data_size=read();  clear=1 << data_size;  end_of_information=clear + 1;  available=clear + 2;  old_code=nullCode;  code_size=data_size + 1;  code_mask=(1 << code_size) - 1;  for (code=0; code < clear; code++) {    prefix[code]=0;    suffix[code]=(byte)code;  }  datum=bits=count=first=top=pi=bi=0;  for (i=0; i < npix; ) {    if (top == 0) {      if (bits < code_size) {        if (count == 0) {          count=readBlock();          if (count <= 0) {            break;          }          bi=0;        }        datum+=((block[bi]) & 0xff) << bits;        bits+=8;        bi++;        count--;        continue;      }      code=datum & code_mask;      datum>>=code_size;      bits-=code_size;      if ((code > available) || (code == end_of_information)) {        break;      }      if (code == clear) {        code_size=data_size + 1;        code_mask=(1 << code_size) - 1;        available=clear + 2;        old_code=nullCode;        continue;      }      if (old_code == nullCode) {        pixelStack[top++]=suffix[code];        old_code=code;        first=code;        continue;      }      in_code=code;      if (code == available) {        pixelStack[top++]=(byte)first;        code=old_code;      }      while (code > clear) {        pixelStack[top++]=suffix[code];        code=prefix[code];      }      first=(suffix[code]) & 0xff;      if (available >= MAX_STACK_SIZE) {        break;      }      pixelStack[top++]=(byte)first;      prefix[available]=(short)old_code;      suffix[available]=(byte)first;      available++;      if (((available & code_mask) == 0) && (available < MAX_STACK_SIZE)) {        code_size++;        code_mask+=available;      }      old_code=in_code;    }    top--;    dstPixels[pi++]=pixelStack[top];    i++;  }  for (i=pi; i < npix; i++) {    dstPixels[i]=0;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.754 -0500",hash_original_method="EE858F66DF718641EEB790378894310A",hash_generated_method="094A33EA9471FB13E5326825C0B4619D") public void fatal(Object message){  log(Level.SEVERE,String.valueOf(message),null);}  }
class C{  public void newClass(){  classIndex++;}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  public synchronized void animatePanAbs(double dx,double dy,long duration){  m_transact.pan(dx,dy,duration);}  }
class C{  public ForStatement createForStatement(){  ForStatementImpl forStatement=new ForStatementImpl();  return forStatement;}  }
class C{  protected boolean[] weightedInstancesHandler(){  boolean[] result=new boolean[2];  print("weighted instances classifier...");  if (m_Classifier instanceof WeightedInstancesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  private void render404(Response response,String uri) throws Exception {  String view404=ViewSettings.$().getView404();  if (StringKit.isNotBlank(view404)) {    ModelAndView modelAndView=new ModelAndView(view404);    modelAndView.add("viewName",uri);    response.render(modelAndView);  } else {    response.status(HttpStatus.NOT_FOUND);    response.html(String.format(Const.VIEW_NOTFOUND,uri));  }}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1){  Map map=of();  map.put(k1,v1);  return map;}  }
class C{  public static boolean isValidCodePoint(int codePoint){  int plane=codePoint >>> 16;  return plane < ((MAX_CODE_POINT + 1) >>> 16);}  }
class C{  public PBEParameterSpec(byte[] salt,int iterationCount){  if (salt == null) {    throw new NullPointerException("salt == null");  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;}  }
class C{  private ContentValues unpackFavorite(byte[] buffer,int dataSize) throws IOException {  Favorite favorite=unpackProto(new Favorite(),buffer,dataSize);  ContentValues values=new ContentValues();  values.put(Favorites._ID,favorite.id);  values.put(Favorites.SCREEN,favorite.screen);  values.put(Favorites.CONTAINER,favorite.container);  values.put(Favorites.CELLX,favorite.cellX);  values.put(Favorites.CELLY,favorite.cellY);  values.put(Favorites.SPANX,favorite.spanX);  values.put(Favorites.SPANY,favorite.spanY);  values.put(Favorites.ICON_TYPE,favorite.iconType);  if (favorite.iconType == Favorites.ICON_TYPE_RESOURCE) {    values.put(Favorites.ICON_PACKAGE,favorite.iconPackage);    values.put(Favorites.ICON_RESOURCE,favorite.iconResource);  }  if (favorite.iconType == Favorites.ICON_TYPE_BITMAP) {    values.put(Favorites.ICON,favorite.icon);  }  if (!TextUtils.isEmpty(favorite.title)) {    values.put(Favorites.TITLE,favorite.title);  } else {    values.put(Favorites.TITLE,"");  }  if (!TextUtils.isEmpty(favorite.intent)) {    values.put(Favorites.INTENT,favorite.intent);  }  values.put(Favorites.ITEM_TYPE,favorite.itemType);  UserHandleCompat myUserHandle=UserHandleCompat.myUserHandle();  long userSerialNumber=UserManagerCompat.getInstance(mContext).getSerialNumberForUser(myUserHandle);  values.put(LauncherSettings.Favorites.PROFILE_ID,userSerialNumber);  DeviceProfieData currentProfile=getDeviceProfieData();  if (favorite.itemType == Favorites.ITEM_TYPE_APPWIDGET) {    if (!TextUtils.isEmpty(favorite.appWidgetProvider)) {      values.put(Favorites.APPWIDGET_PROVIDER,favorite.appWidgetProvider);    }    values.put(Favorites.APPWIDGET_ID,favorite.appWidgetId);    values.put(LauncherSettings.Favorites.RESTORED,LauncherAppWidgetInfo.FLAG_ID_NOT_VALID | LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY | LauncherAppWidgetInfo.FLAG_UI_NOT_READY);    if (((favorite.cellX + favorite.spanX) > currentProfile.desktopCols) || ((favorite.cellY + favorite.spanY) > currentProfile.desktopRows)) {      restoreSuccessful=false;      throw new InvalidBackupException("Widget not in screen bounds, aborting restore");    }  } else {    values.put(LauncherSettings.Favorites.RESTORED,1);    if (favorite.container == Favorites.CONTAINER_HOTSEAT) {      if ((favorite.screen >= currentProfile.hotseatCount) || (favorite.screen == currentProfile.allappsRank)) {        restoreSuccessful=false;        throw new InvalidBackupException("Item not in hotseat bounds, aborting restore");      }    } else {      if ((favorite.cellX >= currentProfile.desktopCols) || (favorite.cellY >= currentProfile.desktopRows)) {        restoreSuccessful=false;        throw new InvalidBackupException("Item not in desktop bounds, aborting restore");      }    }  }  return values;}  }
class C{  public boolean isPanYEnabled(){  return mPanYEnabled;}  }
class C{  public static boolean isLowSurrogate(char ch){  return (MIN_LOW_SURROGATE <= ch && MAX_LOW_SURROGATE >= ch);}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  public void start(){synchronized (myQueue) {    if (myStarted)     return;    myStarted=true;    if (!myQueue.isEmpty()) {      startProcessing();    }  }}  }
class C{  public void apply(int zoom_axis){  if (mChart instanceof XYChart) {    int scales=mRenderer.getScalesCount();    for (int i=0; i < scales; i++) {      double[] range=getRange(i);      checkRange(range,i);      double[] limits=mRenderer.getZoomLimits();      double centerX=(range[0] + range[1]) / 2;      double centerY=(range[2] + range[3]) / 2;      double newWidth=range[1] - range[0];      double newHeight=range[3] - range[2];      double newXMin=centerX - newWidth / 2;      double newXMax=centerX + newWidth / 2;      double newYMin=centerY - newHeight / 2;      double newYMax=centerY + newHeight / 2;      if (i == 0) {        limitsReachedX=limits != null && (newXMin <= limits[0] || newXMax >= limits[1]);        limitsReachedY=limits != null && (newYMin <= limits[2] || newYMax >= limits[3]);      }      if (mZoomIn) {        if (mRenderer.isZoomXEnabled() && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {          if (limitsReachedX && mZoomRate < 1) {          } else {            newWidth/=mZoomRate;          }        }        if (mRenderer.isZoomYEnabled() && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {          if (limitsReachedY && mZoomRate < 1) {          } else {            newHeight/=mZoomRate;          }        }      } else {        if (mRenderer.isZoomXEnabled() && !limitsReachedX && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {          newWidth*=mZoomRate;        }        if (mRenderer.isZoomYEnabled() && !limitsReachedY && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {          newHeight*=mZoomRate;        }      }      double minX, minY;      if (limits != null) {        minX=Math.min(mRenderer.getZoomInLimitX(),limits[1] - limits[0]);        minY=Math.min(mRenderer.getZoomInLimitY(),limits[3] - limits[2]);      } else {        minX=mRenderer.getZoomInLimitX();        minY=mRenderer.getZoomInLimitY();      }      newWidth=Math.max(newWidth,minX);      newHeight=Math.max(newHeight,minY);      if (mRenderer.isZoomXEnabled() && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {        newXMin=centerX - newWidth / 2;        newXMax=centerX + newWidth / 2;        setXRange(newXMin,newXMax,i);      }      if (mRenderer.isZoomYEnabled() && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {        newYMin=centerY - newHeight / 2;        newYMax=centerY + newHeight / 2;        setYRange(newYMin,newYMax,i);      }    }  } else {    DefaultRenderer renderer=((RoundChart)mChart).getRenderer();    if (mZoomIn) {      renderer.setScale(renderer.getScale() * mZoomRate);    } else {      renderer.setScale(renderer.getScale() / mZoomRate);    }  }  notifyZoomListeners(new ZoomEvent(mZoomIn,mZoomRate));}  }
class C{  public void processThrownExceptions(TryStatement tryStatement,BlockScope scope){  this.thrownExceptions=new SimpleSet();  this.exceptionsStack=new Stack();  this.caughtExceptions=new SimpleSet();  this.discouragedExceptions=new SimpleSet();  tryStatement.traverse(this,scope);  removeCaughtExceptions(tryStatement,true);}  }
class C{  @FlashException(value="buckets") public static void deleteAcl(String bucketId,@As(",") String[] ids){  BucketACL aclsToDelete=new BucketACL();  List<BucketACE> bucketAcl=Lists.newArrayList();  if (ids != null && ids.length > 0) {    for (    String id : ids) {      String type=BucketACLForm.extractTypeFromId(id);      String name=BucketACLForm.extractNameFromId(id);      String domain=BucketACLForm.extractDomainFromId(id);      BucketACE ace=new BucketACE();      if (GROUP.equalsIgnoreCase(type)) {        ace.setGroup(name);      } else       if (CUSTOMGROUP.equalsIgnoreCase(type)) {        ace.setCustomGroup(name);      } else {        ace.setUser(name);      }      if (domain != null && !"".equals(domain) && !"null".equals(domain)) {        ace.setDomain(domain);      }      bucketAcl.add(ace);    }    aclsToDelete.setBucketACL(bucketAcl);    ObjectBucketACLUpdateParams input=new ObjectBucketACLUpdateParams();    input.setAclToDelete(aclsToDelete);    ViPRCoreClient client=BourneUtil.getViprClient();    client.objectBuckets().updateBucketACL(uri(bucketId),input);  }  flash.success(MessagesUtils.get(DELETED));  listBucketACL(bucketId);}  }
class C{  private static boolean checkObjectInline(SSAVar sVar){  for (  RegisterArg useArg : sVar.getUseList()) {    InsnNode insn=useArg.getParentInsn();    if (insn != null) {      InsnType insnType=insn.getType();      if (insnType == InsnType.INVOKE) {        InvokeNode inv=(InvokeNode)insn;        if (inv.getInvokeType() != InvokeType.STATIC && inv.getArg(0) == useArg) {          return true;        }      } else       if (insnType == InsnType.ARRAY_LENGTH) {        if (insn.getArg(0) == useArg) {          return true;        }      }    }  }  return false;}  }
class C{  private void actionWrite() throws PageException {  if (output == null)   throw new ApplicationException("attribute output is not defined for tag file");  checkFile(pageContext,securityManager,file,serverPassword,createPath,true,false,true);  try {    if (output instanceof InputStream) {      IOUtil.copy((InputStream)output,file,false);    } else     if (Decision.isCastableToBinary(output,false)) {      IOUtil.copy(new ByteArrayInputStream(Caster.toBinary(output)),file,true);    } else {      String content=Caster.toString(output);      if (fixnewline)       content=doFixNewLine(content);      if (addnewline)       content+=SystemUtil.getOSSpecificLineSeparator();      IOUtil.write(file,content,CharsetUtil.toCharset(charset),false);    }  } catch (  UnsupportedEncodingException e) {    throw new ApplicationException("Unsupported Charset Definition [" + charset + "]",e.getMessage());  }catch (  IOException e) {    throw new ApplicationException("can't write file " + file.getAbsolutePath(),e.getMessage());  }  setACL(pageContext,file,acl);  setMode(file,mode);  setAttributes(file,attributes);}  }
class C{  public boolean hasStatus(){  return hasExtension(Status.class);}  }
class C{  private void leadNPC(){  final StendhalRPZone zone=fullpathin.get(0).get().first();  final int x=fullpathin.get(0).get().second().get(0).getX();  final int y=fullpathin.get(0).get().second().get(0).getY();  piedpiper.setPosition(x,y);  zone.add(piedpiper);  Observer o=new MultiZonesFixedPath(piedpiper,fullpathin,new NPCFollowing(mainNPC,piedpiper,new NPCChatting(piedpiper,mainNPC,conversations,explainations,new GoToPosition(piedpiper,PathsBuildHelper.getAdosTownHallMiddlePoint(),new MultiZonesFixedPath(piedpiper,fullpathout,new PhaseSwitcher(this))))));  o.update(null,null);}  }
class C{  public static boolean instanceOf(Object obj,Object typeObject){  Class<?> typeClass=typeObject.getClass();  return instanceOf(obj,typeClass);}  }
class C{  private boolean isLocalMaximum(double kdist,DBIDs neighbors,WritableDoubleDataStore kdists){  for (DBIDIter it=neighbors.iter(); it.valid(); it.advance()) {    if (kdists.doubleValue(it) < kdist) {      return false;    }  }  return true;}  }
class C{  protected AbstractRable(List srcs){  this(srcs,null);}  }
class C{  public static long flipC(long v,int off){  v^=(1L << off);  return v;}  }
class C{  public void startDelete(String key) throws AmazonClientException, AmazonServiceException {  super.startDelete(awsS3BucketName,key);}  }
class C{  public boolean isSimpleTypeRef(){  FullMemberReference ref=nodeAsFullMemberReference();  if (ref != null) {    return ref.moduleNameSet() && !ref.typeNameSet();  }  return false;}  }
class C{  private void updateMigrationInfo(VPlexMigrationInfo migrationInfo,URI baseMigrationPath) throws VPlexApiException {  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(baseMigrationPath.toString());  uriBuilder.append(migrationInfo.getName());  URI requestURI=_vplexApiClient.getBaseURI().resolve(uriBuilder.toString());  s_logger.info("Migration Info Request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw new VPlexApiException(String.format("Failed getting info for migration %s with status: %s",migrationInfo.getName(),status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,migrationInfo);    s_logger.info("Updated Migration Info {}",migrationInfo.toString());  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw new VPlexApiException(String.format("Error updating migration information: %s",e.getMessage()),e);  }}  }
class C{  @Override public void createPartControl(Composite parent){  Composite top=new Composite(parent,SWT.NONE);  FillLayout layout=new FillLayout(SWT.HORIZONTAL);  layout.marginHeight=10;  top.setLayout(layout);  CTabFolder tabFolder=new CTabFolder(top,SWT.BORDER);  tabFolder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));  GridLayout tabLayout=new GridLayout();  tabLayout.marginHeight=10;  tabLayout.marginWidth=10;  tabLayout.verticalSpacing=20;  tabLayout.numColumns=1;  tabFolder.setLayout(tabLayout);  new MQTTTab(tabFolder,SWT.NONE,connection,eventService);  new OptionsTab(tabFolder,SWT.NONE,connection);  tabFolder.setSelection(0);}  }
class C{  public GuacamoleInvalidCredentialsException(Throwable cause,CredentialsInfo credentialsInfo){  super(cause,credentialsInfo);}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public void severe(String msg,Throwable thrown){  log(Level.SEVERE,thrown,msg,thrown);}  }
class C{  public static <O>SQLParser<O> forPojo(Class<O> pojoClass){  return new SQLParser<O>(pojoClass);}  }
class C{  protected void installDefaults(){  super.installDefaults();  String prefix=getPropertyPrefix();  Character echoChar=(Character)UIManager.getDefaults().get(prefix + ".echoChar");  if (echoChar != null) {    LookAndFeel.installProperty(getComponent(),"echoChar",echoChar);  }}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public synchronized void destroy(){  if (log.isDebugEnabled()) {    log.debug("Destroying Esper HTTP Adapter");  }  for (  EsperHttpServiceBase service : services.values()) {    try {      service.destroy();    } catch (    Throwable t) {      log.info("Error destroying service '" + service.getServiceName() + "' :"+ t.getMessage());    }  }  services.clear();}  }
class C{  public PaymentGatewayParameterServiceImpl(final PaymentModuleGenericDAO<PaymentGatewayParameter,Long> genericDao){  super(genericDao);}  }
class C{  public BuildImageParams withAuthConfigs(AuthConfigs authConfigs){  this.authConfigs=authConfigs;  return this;}  }
class C{  InlineSequence(NormalMethod method,InlineSequence caller,int bcIndex){  this.method=method;  this.caller=caller;  this.callSite=null;  this.bcIndex=bcIndex;}  }
class C{  private static int distance(Rectangle bounds,int x,int y){  x-=normalize(x,bounds.x,bounds.x + bounds.width);  y-=normalize(y,bounds.y,bounds.y + bounds.height);  return x * x + y * y;}  }
class C{  private void terminate(IceProcessingState terminationState){  if (!IceProcessingState.FAILED.equals(terminationState) && !IceProcessingState.TERMINATED.equals(terminationState))   throw new IllegalArgumentException("terminationState");  connCheckClient.stop();  setState(terminationState);}  }
class C{  public static IOException convertToIOException(Throwable e){  if (e instanceof IOException) {    return (IOException)e;  }  if (e instanceof JdbcSQLException) {    JdbcSQLException e2=(JdbcSQLException)e;    if (e2.getOriginalCause() != null) {      e=e2.getOriginalCause();    }  }  return new IOException(e.toString(),e);}  }
class C{  public void detachStructure(){  processOperation(new DetachOperation());}  }
class C{  private static Object parse(XMLTokener x,boolean arrayForm,JSONArray ja) throws JSONException {  String attribute;  char c;  String closeTag=null;  int i;  JSONArray newja=null;  JSONObject newjo=null;  Object token;  String tagName=null;  while (true) {    if (!x.more()) {      throw x.syntaxError("Bad XML");    }    token=x.nextContent();    if (token == XML.LT) {      token=x.nextToken();      if (token instanceof Character) {        if (token == XML.SLASH) {          token=x.nextToken();          if (!(token instanceof String)) {            throw new JSONException("Expected a closing name instead of '" + token + "'.");          }          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped close tag");          }          return token;        } else         if (token == XML.BANG) {          c=x.next();          if (c == '-') {            if (x.next() == '-') {              x.skipPast("-->");            } else {              x.back();            }          } else           if (c == '[') {            token=x.nextToken();            if (token.equals("CDATA") && x.next() == '[') {              if (ja != null) {                ja.put(x.nextCDATA());              }            } else {              throw x.syntaxError("Expected 'CDATA['");            }          } else {            i=1;            do {              token=x.nextMeta();              if (token == null) {                throw x.syntaxError("Missing '>' after '<!'.");              } else               if (token == XML.LT) {                i+=1;              } else               if (token == XML.GT) {                i-=1;              }            } while (i > 0);          }        } else         if (token == XML.QUEST) {          x.skipPast("?>");        } else {          throw x.syntaxError("Misshaped tag");        }      } else {        if (!(token instanceof String)) {          throw x.syntaxError("Bad tagName '" + token + "'.");        }        tagName=(String)token;        newja=new JSONArray();        newjo=new JSONObject();        if (arrayForm) {          newja.put(tagName);          if (ja != null) {            ja.put(newja);          }        } else {          newjo.put("tagName",tagName);          if (ja != null) {            ja.put(newjo);          }        }        token=null;        for (; ; ) {          if (token == null) {            token=x.nextToken();          }          if (token == null) {            throw x.syntaxError("Misshaped tag");          }          if (!(token instanceof String)) {            break;          }          attribute=(String)token;          if (!arrayForm && ("tagName".equals(attribute) || "childNode".equals(attribute))) {            throw x.syntaxError("Reserved attribute.");          }          token=x.nextToken();          if (token == XML.EQ) {            token=x.nextToken();            if (!(token instanceof String)) {              throw x.syntaxError("Missing value");            }            newjo.accumulate(attribute,XML.stringToValue((String)token));            token=null;          } else {            newjo.accumulate(attribute,"");          }        }        if (arrayForm && newjo.length() > 0) {          newja.put(newjo);        }        if (token == XML.SLASH) {          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          if (ja == null) {            if (arrayForm) {              return newja;            } else {              return newjo;            }          }        } else {          if (token != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          closeTag=(String)parse(x,arrayForm,newja);          if (closeTag != null) {            if (!closeTag.equals(tagName)) {              throw x.syntaxError("Mismatched '" + tagName + "' and '"+ closeTag+ "'");            }            tagName=null;            if (!arrayForm && newja.length() > 0) {              newjo.put("childNodes",newja);            }            if (ja == null) {              if (arrayForm) {                return newja;              } else {                return newjo;              }            }          }        }      }    } else {      if (ja != null) {        ja.put(token instanceof String ? XML.stringToValue((String)token) : token);      }    }  }}  }
class C{  public static void simulatedJoystick(int id,SimulatedJoystick stick){  joysticks[id]=stick;}  }
class C{  @Override public void onTCPConnected(boolean isServer){  if (isServer) {    roomState=ConnectionState.CONNECTED;    SignalingParameters parameters=new SignalingParameters(new LinkedList<PeerConnection.IceServer>(),isServer,null,null,null,null,null);    events.onConnectedToRoom(parameters);  }}  }
class C{  public static String generateJMXObjectName(String schedName,String schedInstId){  return "quartz:type=QuartzScheduler" + ",name=" + schedName.replaceAll(":|=|\n",".") + ",instance="+ schedInstId;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Problem readProblem(File file,double bias) throws IOException, InvalidInputDataException {  BufferedReader fp=new BufferedReader(new FileReader(file));  List<Double> vy=new ArrayList<Double>();  List<Feature[]> vx=new ArrayList<Feature[]>();  int max_index=0;  int lineNr=0;  try {    while (true) {      String line=fp.readLine();      if (line == null) {        break;      }      lineNr++;      StringTokenizer st=new StringTokenizer(line," \t\n\r\f:");      String token;      try {        token=st.nextToken();      } catch (      NoSuchElementException e) {        throw new InvalidInputDataException("empty line",file,lineNr,e);      }      try {        vy.add(atof(token));      } catch (      NumberFormatException e) {        throw new InvalidInputDataException("invalid label: " + token,file,lineNr,e);      }      int m=st.countTokens() / 2;      Feature[] x;      if (bias >= 0) {        x=new Feature[m + 1];      } else {        x=new Feature[m];      }      int indexBefore=0;      for (int j=0; j < m; j++) {        token=st.nextToken();        int index;        try {          index=atoi(token);        } catch (        NumberFormatException e) {          throw new InvalidInputDataException("invalid index: " + token,file,lineNr,e);        }        if (index < 0) {          throw new InvalidInputDataException("invalid index: " + index,file,lineNr);        }        if (index <= indexBefore) {          throw new InvalidInputDataException("indices must be sorted in ascending order",file,lineNr);        }        indexBefore=index;        token=st.nextToken();        try {          double value=atof(token);          x[j]=new FeatureNode(index,value);        } catch (        NumberFormatException e) {          throw new InvalidInputDataException("invalid value: " + token,file,lineNr);        }      }      if (m > 0) {        max_index=Math.max(max_index,x[m - 1].getIndex());      }      vx.add(x);    }    return constructProblem(vy,vx,max_index,bias);  }  finally {    fp.close();  }}  }
class C{  public static SnmpEngineId createEngineId(byte[] arr) throws IllegalArgumentException {  if ((arr == null) || arr.length == 0)   return null;  validateId(arr);  return new SnmpEngineId(arr);}  }
class C{  private void initialize(){  width=getContext().getResources().getDimensionPixelSize(R.dimen.default_width);  maximize=false;  adapter=new DividableGridAdapter(getContext(),Style.LIST,width);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {    super.setOnShowListener(createOnShowListener());  }}  }
class C{  public int api_danger(Method m){  int danger=0;  String perms=api_descriptors(m).toString();  if (perms.contains("intent"))   danger++;  if (perms.contains("permission"))   danger++;  if (perms.contains("reflect") || perms.contains("thread") || perms.contains("loader"))   danger++;  if ((danger == 0) && (perms.contains("gui")))   danger--;  return danger;}  }
class C{  protected JSDocCharScanner(JSDocCharScanner src,int maxOffsetExcluded){  this.s=src.s;  this.nextFencePost=maxOffsetExcluded;  this.nextOffset=src.nextOffset;  this.offset=src.offset;}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void suspend(){  if (suspendHelper()) {    Thread.currentThread().suspend();  }}  }
class C{  @Override public void run(){  amIActive=true;  int progress;  int row, col, i;  int baseCol, baseRow, appendCol, appendRow;  double x, y, z, zN, zBase, zAppend;  double w1, w2, dist1, dist2, sumDist;  double r1, g1, b1, r2, g2, b2;  int r, g, b;  boolean performHistoMatching=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputBaseHeader=args[0];  String inputHeader=args[1];  String outputHeader=args[2];  String resampleMethod=args[3].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.contains("cubic")) {    showFeedback("Resample method not recognized");    return;  }  if (args[4].toLowerCase().contains("true")) {    performHistoMatching=true;  } else {    performHistoMatching=false;  }  double power=Double.parseDouble(args[5]);  if (power > 15.0) {    power=15.0;  }  if (power < 1.0) {    power=1.0;  }  try {    if (performHistoMatching) {      String inputHeaderAdjusted=StringUtilities.replaceLast(inputHeader,".dep","_temp1.dep");      histogramMatching(inputHeader,inputBaseHeader,inputHeaderAdjusted);      inputHeader=inputHeaderAdjusted;    }    WhiteboxRaster baseRaster=new WhiteboxRaster(inputBaseHeader,"r");    WhiteboxRaster appendRaster=new WhiteboxRaster(inputHeader,"r");    boolean rgbMode=((baseRaster.getDataScale() == WhiteboxRasterBase.DataScale.RGB) & (appendRaster.getDataScale() == WhiteboxRasterBase.DataScale.RGB));    double cellSizeX=baseRaster.getCellSizeX();    double cellSizeY=baseRaster.getCellSizeY();    double baseNoData=baseRaster.getNoDataValue();    double appendNoData=appendRaster.getNoDataValue();    double outputNoData=baseNoData;    int baseCols=baseRaster.getNumberColumns();    int baseRows=baseRaster.getNumberRows();    int appendCols=appendRaster.getNumberColumns();    int appendRows=appendRaster.getNumberRows();    double baseNorth=baseRaster.getNorth();    double baseSouth=baseRaster.getSouth();    double baseEast=baseRaster.getEast();    double baseWest=baseRaster.getWest();    double baseNSRange=baseNorth - baseSouth;    double baseEWRange=baseEast - baseWest;    double appendNorth=appendRaster.getNorth();    double appendSouth=appendRaster.getSouth();    double appendEast=appendRaster.getEast();    double appendWest=appendRaster.getWest();    double appendNSRange=appendNorth - appendSouth;    double appendEWRange=appendEast - appendWest;    double north, south, east, west;    if (baseNorth > baseSouth) {      north=Double.NEGATIVE_INFINITY;      south=Double.POSITIVE_INFINITY;      if (baseNorth > north) {        north=baseNorth;      }      if (appendNorth > north) {        north=appendNorth;      }      if (baseSouth < south) {        south=baseSouth;      }      if (appendSouth < south) {        south=appendSouth;      }    } else {      north=Double.POSITIVE_INFINITY;      south=Double.NEGATIVE_INFINITY;      if (baseNorth < north) {        north=baseNorth;      }      if (appendNorth < north) {        north=appendNorth;      }      if (baseSouth > south) {        south=baseSouth;      }      if (appendSouth > south) {        south=appendSouth;      }    }    if (baseEast > baseWest) {      east=Double.NEGATIVE_INFINITY;      west=Double.POSITIVE_INFINITY;      if (baseEast > east) {        east=baseEast;      }      if (appendEast > east) {        east=appendEast;      }      if (baseWest < west) {        west=baseWest;      }      if (appendWest < west) {        west=appendWest;      }    } else {      east=Double.POSITIVE_INFINITY;      west=Double.NEGATIVE_INFINITY;      if (baseEast < east) {        east=baseEast;      }      if (appendEast < east) {        east=appendEast;      }      if (baseWest > west) {        west=baseWest;      }      if (appendWest > west) {        west=appendWest;      }    }    int nRows=(int)Math.round(Math.abs(north - south) / cellSizeY);    int nCols=(int)Math.round(Math.abs(east - west) / cellSizeX);    WhiteboxRaster destination=new WhiteboxRaster(outputHeader,north,south,east,west,nRows,nCols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,outputNoData,outputNoData);    if (rgbMode) {      destination.setDataScale(WhiteboxRasterBase.DataScale.RGB);    }    int nRowsLessOne=nRows - 1;    String distToEdgeBaseHeader=StringUtilities.replaceLast(inputBaseHeader,".dep","_temp1.dep");    WhiteboxRaster distToEdgeBase=new WhiteboxRaster(distToEdgeBaseHeader,"rw",inputBaseHeader,WhiteboxRaster.DataType.FLOAT,Float.POSITIVE_INFINITY);    distToEdgeBase.isTemporaryFile=true;    double[] data;    for (row=0; row < baseRows; row++) {      data=baseRaster.getRowValues(row);      for (col=0; col < baseCols; col++) {        if (row == 0 || row == baseRows - 1) {          distToEdgeBase.setValue(row,col,0.0);        } else         if (col == 0 || col == baseCols - 1) {          distToEdgeBase.setValue(row,col,0.0);        } else {          if (data[col] != baseNoData) {            if (data[col - 1] == baseNoData || data[col + 1] == baseNoData) {              distToEdgeBase.setValue(row,col,0.0);            }          } else {            distToEdgeBase.setValue(row,col,0.0);          }        }      }    }    calculateDistance(distToEdgeBase);    String distToEdgeAppendHeader=whitebox.utilities.StringUtilities.replaceLast(inputBaseHeader,".dep","_temp2.dep");    WhiteboxRaster distToEdgeAppend=new WhiteboxRaster(distToEdgeAppendHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,Float.POSITIVE_INFINITY);    distToEdgeAppend.isTemporaryFile=true;    for (row=0; row < appendRows; row++) {      data=appendRaster.getRowValues(row);      for (col=0; col < appendCols; col++) {        if (row == 0 || row == appendRows - 1) {          distToEdgeAppend.setValue(row,col,0.0);        } else         if (col == 0 || col == appendCols - 1) {          distToEdgeAppend.setValue(row,col,0.0);        } else {          if (data[col] != appendNoData) {            if (data[col - 1] == appendNoData || data[col + 1] == appendNoData) {              distToEdgeAppend.setValue(row,col,0.0);            }          } else {            distToEdgeAppend.setValue(row,col,0.0);          }        }      }    }    calculateDistance(distToEdgeAppend);    if (resampleMethod.contains("nearest")) {      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          x=destination.getXCoordinateFromColumn(col);          y=destination.getYCoordinateFromRow(row);          baseCol=baseRaster.getColumnFromXCoordinate(x);          baseRow=baseRaster.getRowFromYCoordinate(y);          appendCol=appendRaster.getColumnFromXCoordinate(x);          appendRow=appendRaster.getRowFromYCoordinate(y);          zBase=baseRaster.getValue(baseRow,baseCol);          zAppend=appendRaster.getValue(appendRow,appendCol);          if (zBase != baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,zBase);          } else           if (zBase == baseNoData && zAppend != appendNoData) {            destination.setValue(row,col,zAppend);          } else           if (zBase == baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,outputNoData);          } else {            dist1=distToEdgeBase.getValue(baseRow,baseCol);            dist2=distToEdgeAppend.getValue(appendRow,appendCol);            sumDist=Math.pow(dist1,power) + Math.pow(dist2,power);            w1=Math.pow(dist1,power) / sumDist;            w2=Math.pow(dist2,power) / sumDist;            if (!rgbMode) {              z=w1 * zBase + w2 * zAppend;            } else {              r1=(double)((int)zBase & 0xFF);              g1=(double)(((int)zBase >> 8) & 0xFF);              b1=(double)(((int)zBase >> 16) & 0xFF);              r2=(double)((int)zAppend & 0xFF);              g2=(double)(((int)zAppend >> 8) & 0xFF);              b2=(double)(((int)zAppend >> 16) & 0xFF);              r=(int)((r1 * w1) + (r2 * w2));              g=(int)((g1 * w1) + (g2 * w2));              b=(int)((b1 * w1) + (b2 * w2));              z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            }            destination.setValue(row,col,z);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / nRowsLessOne);        updateProgress("Resampling images: ",progress);      }    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.contains("cubic")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[numNeighbours][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[numNeighbours][2];      }      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          x=destination.getXCoordinateFromColumn(col);          y=destination.getYCoordinateFromRow(row);          baseCol=baseRaster.getColumnFromXCoordinate(x);          baseRow=baseRaster.getRowFromYCoordinate(y);          srcRow=(baseNorth - y) / baseNSRange * (baseRows - 0.5);          srcCol=(x - baseWest) / baseEWRange * (baseCols - 0.5);          originRow=Math.floor(srcRow);          originCol=Math.floor(srcCol);          sumOfDist=0;          for (i=0; i < numNeighbours; i++) {            rowN=originRow + shiftY[i];            colN=originCol + shiftX[i];            neighbour[i][0]=baseRaster.getValue((int)rowN,(int)colN);            dY=rowN - srcRow;            dX=colN - srcCol;            if ((dX + dY) != 0 && neighbour[i][0] != baseNoData) {              neighbour[i][1]=1 / (dX * dX + dY * dY);              sumOfDist+=neighbour[i][1];            } else             if (neighbour[i][0] == baseNoData) {              neighbour[i][1]=0;            } else {              neighbour[i][1]=99999999;              sumOfDist+=neighbour[i][1];            }          }          if (sumOfDist > 0) {            z=0;            for (i=0; i < numNeighbours; i++) {              z+=neighbour[i][0] * neighbour[i][1] / sumOfDist;            }            zBase=z;          } else {            zBase=baseNoData;          }          appendCol=appendRaster.getColumnFromXCoordinate(x);          appendRow=appendRaster.getRowFromYCoordinate(y);          srcRow=(appendNorth - y) / appendNSRange * (appendRows - 0.5);          srcCol=(x - appendWest) / appendEWRange * (appendCols - 0.5);          originRow=Math.floor(srcRow);          originCol=Math.floor(srcCol);          sumOfDist=0;          for (i=0; i < numNeighbours; i++) {            rowN=originRow + shiftY[i];            colN=originCol + shiftX[i];            neighbour[i][0]=appendRaster.getValue((int)rowN,(int)colN);            dY=rowN - srcRow;            dX=colN - srcCol;            if ((dX + dY) != 0 && neighbour[i][0] != appendNoData) {              neighbour[i][1]=1 / (dX * dX + dY * dY);              sumOfDist+=neighbour[i][1];            } else             if (neighbour[i][0] == appendNoData) {              neighbour[i][1]=0;            } else {              neighbour[i][1]=99999999;              sumOfDist+=neighbour[i][1];            }          }          if (sumOfDist > 0) {            z=0;            for (i=0; i < numNeighbours; i++) {              z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;            }            zAppend=z;          } else {            zAppend=appendNoData;          }          if (zBase != baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,zBase);          } else           if (zBase == baseNoData && zAppend != appendNoData) {            destination.setValue(row,col,zAppend);          } else           if (zBase == baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,outputNoData);          } else {            dist1=distToEdgeBase.getValue(baseRow,baseCol);            dist2=distToEdgeAppend.getValue(appendRow,appendCol);            sumDist=dist1 + dist2;            w1=dist1 / sumDist;            w2=dist2 / sumDist;            z=w1 * zBase + w2 * zAppend;            destination.setValue(row,col,z);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / nRowsLessOne);        updateProgress("Resampling images: ",progress);      }    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    distToEdgeBase.close();    distToEdgeAppend.close();    baseRaster.close();    if (performHistoMatching) {      File header=new File(inputHeader);      if (header.exists()) {        header.delete();      }      File dataFile=new File(StringUtilities.replaceLast(inputHeader,".dep",".tas"));      if (dataFile.exists()) {        dataFile.delete();      }    } else {      appendRaster.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void outputHistogramUnitConversion(Gate g){  if (g.Type == Gate.GateType.OUTPUT || g.Type == Gate.GateType.OUTPUT_OR) {    ArrayList<double[]> histogram_rpus=g.get_histogram_rpus();    ArrayList<double[]> shifted_histogram_rpus=new ArrayList<double[]>();    for (    double[] histogram : histogram_rpus) {      double current_median=HistogramUtil.median(histogram,g.get_histogram_bins());      double new_median=current_median * g.get_unit_conversion();      double[] shifted_histogram=HistogramUtil.normalizeHistogramToNewMedian(histogram,new_median,g.get_histogram_bins());      shifted_histogram_rpus.add(shifted_histogram);    }    g.set_histogram_rpus(shifted_histogram_rpus);  }}  }
class C{  public boolean removeTelegramWriter(TelegramWriter remWriter){  return (telegramWriters.remove(remWriter));}  }
class C{  public static MapDialogFragment newInstance(Branch branch){  return newInstance(null,null,branch);}  }
class C{  protected void drawHexagon(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow,String direction){  Polygon hexagon=new Polygon();  if (direction.equals(mxConstants.DIRECTION_NORTH) || direction.equals(mxConstants.DIRECTION_SOUTH)) {    hexagon.addPoint(x + (int)(0.5 * w),y);    hexagon.addPoint(x + w,y + (int)(0.25 * h));    hexagon.addPoint(x + w,y + (int)(0.75 * h));    hexagon.addPoint(x + (int)(0.5 * w),y + h);    hexagon.addPoint(x,y + (int)(0.75 * h));    hexagon.addPoint(x,y + (int)(0.25 * h));  } else {    hexagon.addPoint(x + (int)(0.25 * w),y);    hexagon.addPoint(x + (int)(0.75 * w),y);    hexagon.addPoint(x + w,y + (int)(0.5 * h));    hexagon.addPoint(x + (int)(0.75 * w),y + h);    hexagon.addPoint(x + (int)(0.25 * w),y + h);    hexagon.addPoint(x,y + (int)(0.5 * h));  }  drawPolygon(hexagon,fillColor,fillPaint,penColor,shadow);}  }
class C{  public SimpleEnvironmentViewCtrl(StackPane viewRoot){  splitPane=new SplitPane();  textArea=new TextArea();  textArea.setMinWidth(0.0);  splitPane.getItems().add(textArea);  viewRoot.getChildren().add(splitPane);}  }
class C{  private void populateDataDomainAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){  accessProfile.setSystemId(providerInfo.getId());  accessProfile.setSystemClazz(providerInfo.getClass());  accessProfile.setIpAddress(providerInfo.getIPAddress());  accessProfile.setUserName(providerInfo.getUserName());  accessProfile.setPassword(providerInfo.getPassword());  accessProfile.setSystemType(DiscoveredDataObject.Type.datadomain.name());  accessProfile.setPortNumber(providerInfo.getPortNumber());}  }
class C{  @Override public void run(){  amIActive=true;  String slopeHeader=null;  String aspectHeader=null;  String outputHeader=null;  String horizonAngleHeader=null;  double z;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col;  double azimuth=0;  boolean blnSlope=false;  double relativeAspect=0;  double slopeVal=0;  double aspectVal=0;  double HAval=0;  double gridRes=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      slopeHeader=args[i];    } else     if (i == 1) {      aspectHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Math.toRadians(Double.parseDouble(args[i]) - 90);    } else     if (i == 3) {      if (args[i].toLowerCase().contains("slope")) {        blnSlope=true;      } else {        blnSlope=false;      }    } else     if (i == 4) {      if (blnSlope) {        if (args[i].toLowerCase().contains("not specified")) {          showFeedback("The horizon angle raster must be specified");          break;        }        horizonAngleHeader=args[i];      }    }  }  if ((slopeHeader == null) || aspectHeader == null || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster slope=new WhiteboxRaster(slopeHeader,"r");    int rows=slope.getNumberRows();    int cols=slope.getNumberColumns();    gridRes=(slope.getCellSizeX() + slope.getCellSizeY()) / 2;    double slopeNoData=slope.getNoDataValue();    WhiteboxRaster aspect=new WhiteboxRaster(aspectHeader,"r");    if (aspect.getNumberRows() != rows || aspect.getNumberColumns() != cols) {      showFeedback("the input images must have the same dimensions (i.e. rows and columns).");      return;    }    double aspectNoData=aspect.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",slopeHeader,WhiteboxRaster.DataType.FLOAT,slopeNoData);    output.setPreferredPalette("grey.pal");    double[] slopeData;    double[] aspectData;    if (blnSlope) {      WhiteboxRaster horizonAngle=new WhiteboxRaster(horizonAngleHeader,"r");      if (horizonAngle.getNumberRows() != rows || horizonAngle.getNumberColumns() != cols) {        showFeedback("the input images must have the same dimensions (i.e. rows and columns).");        return;      }      double HANoData=horizonAngle.getNoDataValue();      double[] HAdata;      for (row=0; row < rows; row++) {        slopeData=slope.getRowValues(row);        aspectData=aspect.getRowValues(row);        HAdata=horizonAngle.getRowValues(row);        for (col=0; col < cols; col++) {          relativeAspect=azimuth - aspectData[col];          if (relativeAspect > 180) {            relativeAspect=360 - relativeAspect;            if (slopeData[col] != slopeNoData && aspectData[col] != aspectNoData && HAdata[col] != HANoData) {              slopeVal=Math.toRadians(slopeData[col]);              aspectVal=Math.toRadians(aspectData[col]);              HAval=Math.toRadians(HAdata[col]);              relativeAspect=Math.toRadians(relativeAspect);              output.setValue(row,col,Math.cos(slopeVal) * Math.sin(HAval) + Math.sin(slopeVal) * Math.cos(HAval) * Math.cos(relativeAspect));            } else {              output.setValue(row,col,slopeNoData);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      horizonAngle.close();    } else {      HAval=0;      for (row=0; row < rows; row++) {        slopeData=slope.getRowValues(row);        aspectData=aspect.getRowValues(row);        for (col=0; col < cols; col++) {          relativeAspect=azimuth - aspectData[col];          if (relativeAspect > 180) {            relativeAspect=360 - relativeAspect;          }          if (slopeData[col] != slopeNoData && aspectData[col] != aspectNoData) {            slopeVal=Math.toRadians(slopeData[col]);            aspectVal=Math.toRadians(aspectData[col]);            relativeAspect=Math.toRadians(relativeAspect);            output.setValue(row,col,Math.cos(slopeVal) * Math.sin(HAval) + Math.sin(slopeVal) * Math.cos(HAval) * Math.cos(relativeAspect));          } else {            output.setValue(row,col,slopeNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slope.close();    aspect.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isDraft(){  Control control=getControl();  return (control != null && control.isDraft());}  }
class C{  public CardImagesLoader(Component peer){  this.peer=peer;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiMenuItemUI();  return MultiLookAndFeel.createUIs(mui,((MultiMenuItemUI)mui).uis,a);}  }
class C{  public double[] readAllDoubles(){  String[] fields=readAllStrings();  double[] vals=new double[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Double.parseDouble(fields[i]);  return vals;}  }
class C{  public static double findMinDistance(Instances inst,int attrIndex){  double min=Double.MAX_VALUE;  int numInst=inst.numInstances();  double diff;  if (numInst < 2) {    return min;  }  int begin=-1;  Instance instance=null;  do {    begin++;    if (begin < numInst) {      instance=inst.instance(begin);    }  } while (begin < numInst && instance.isMissing(attrIndex));  double secondValue=inst.instance(begin).value(attrIndex);  for (int i=begin; i < numInst && !inst.instance(i).isMissing(attrIndex); i++) {    double firstValue=secondValue;    secondValue=inst.instance(i).value(attrIndex);    if (secondValue != firstValue) {      diff=secondValue - firstValue;      if (diff < min && diff > 0.0) {        min=diff;      }    }  }  return min;}  }
class C{  @Override public boolean test(Object receiver,String property,Object[] args,Object expectedValue){  if (IS_ANGULAR2_PROJECT_PROPERTY.equals(property)) {    return testIsTypeScriptProject(receiver);  }  return false;}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  Log.w(TAG,"Upgrading database from version " + oldVersion + " to "+ newVersion+ ", which will destroy all old data");  db.execSQL("DROP TABLE IF EXISTS notes");  onCreate(db);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public boolean isUpdate(){  boolean is;  if (m_editFlag == FolderEditFlag.UPDATE)   is=true; else   is=false;  return is;}  }
class C{  public void removeTileEntity(BlockPos pos){  if (this.isCubeLoaded) {    TileEntity tileEntity=this.tileEntityMap.remove(pos);    if (tileEntity != null) {      tileEntity.invalidate();      this.isModified=true;    }  }}  }
class C{  public void paintRadioButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public InternalTenantServiceClient(String server){  setServer(server);}  }
class C{  private RdapSearchResults searchByNameserverLdhName(final RdapSearchPattern partialStringQuery,final DateTime now){  Iterable<Key<HostResource>> hostKeys=getNameserverRefsByLdhName(partialStringQuery,now);  if (Iterables.isEmpty(hostKeys)) {    throw new NotFoundException("No matching nameservers found");  }  return searchByNameserverRefs(hostKeys,now);}  }
class C{  public Body(String html,String text){  this.html=html;  this.text=text;}  }
class C{  private void sendStageProgressPatch(State current,TaskState.TaskStage stage,TaskState.SubStage subStage){  if (current.isSelfProgressionDisabled) {    return;  }  sendSelfPatch(buildPatch(stage,subStage,null));}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  double[] oldKeys=_set;  double[] oldVals=_values;  byte[] oldStates=_states;  _set=new double[newCapacity];  _values=new double[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      double o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  protected Cipher(CipherSpi cipherSpi,Provider provider,String transformation){  if (cipherSpi == null) {    throw new NullPointerException("cipherSpi == null");  }  if (!(cipherSpi instanceof NullCipherSpi) && provider == null) {    throw new NullPointerException("provider == null");  }  this.provider=provider;  this.transformation=transformation;  this.spiImpl=cipherSpi;}  }
class C{  public Builder host(final String host){  checkNotNull(host,"host");  this.host=of(host);  return this;}  }
class C{  @Override public Consist addConsist(DccLocoAddress address){  if (consistTable.containsKey(address)) {    return consistTable.get(address);  }  EasyDccConsist consist;  consist=new EasyDccConsist(address);  consistTable.put(address,consist);  return consist;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Map<String,ExecutableElement> makeSetterMap(Map<ExecutableElement,String> getterToPropertyName){  Map<String,TypeMirror> getterMap=new TreeMap<String,TypeMirror>();  for (  Map.Entry<ExecutableElement,String> entry : getterToPropertyName.entrySet()) {    getterMap.put(entry.getValue(),entry.getKey().getReturnType());  }  Map<String,ExecutableElement> noPrefixMap=Maps.newLinkedHashMap();  Map<String,ExecutableElement> prefixMap=Maps.newLinkedHashMap();  boolean ok=true;  for (  ExecutableElement setter : setters) {    Map<String,ExecutableElement> map=noPrefixMap;    String name=setter.getSimpleName().toString();    TypeMirror type=getterMap.get(name);    if (type == null && name.startsWith("set")) {      name=Introspector.decapitalize(name.substring(3));      type=getterMap.get(name);      map=prefixMap;    }    if (type == null) {      errorReporter.reportError("Method does not correspond to a property of " + autoValueClass,setter);      ok=false;    } else {      VariableElement parameter=Iterables.getOnlyElement(setter.getParameters());      if (TYPE_EQUIVALENCE.equivalent(type,parameter.asType())) {        getterMap.remove(name);        map.put(name,setter);      } else {        errorReporter.reportError("Parameter type should be " + type,parameter);        ok=false;      }    }  }  if (!ok) {    return null;  }  boolean prefixing=!prefixMap.isEmpty();  if (prefixing && !noPrefixMap.isEmpty()) {    errorReporter.reportError("If any setter methods use the setFoo convention then all must",noPrefixMap.values().iterator().next());    return null;  }  if (!getterMap.isEmpty()) {    for (    Map.Entry<String,TypeMirror> entry : getterMap.entrySet()) {      String setterName=prefixing ? prefixWithSet(entry.getKey()) : entry.getKey();      String error=String.format("Expected a method with this signature: %s%s %s(%s)",builderTypeElement,TypeSimplifier.actualTypeParametersString(builderTypeElement),setterName,entry.getValue());      errorReporter.reportError(error,builderTypeElement);    }    return null;  }  return noPrefixMap.isEmpty() ? prefixMap : noPrefixMap;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public boolean isPopupOpen(){  return (popup != null);}  }
class C{  ValueForKeyIterator(@Nullable Object key){  this.key=key;  KeyList<K,V> keyList=keyToKeyList.get(key);  next=(keyList == null) ? null : keyList.head;}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public void replay(ReplayCallback replayCallback){  TempBuffer tReadBuffer=TempBuffer.createLarge();  byte[] readBuffer=tReadBuffer.buffer();  int bufferLength=readBuffer.length;  try (InStore jIn=_blockStore.openRead(_startAddress,getSegmentSize())){    Replay replay=readReplay(jIn);    if (replay == null) {      return;    }    long address=replay.getCheckpointStart();    long next;    setSequence(replay.getSequence());    TempBuffer tBuffer=TempBuffer.create();    byte[] tempBuffer=tBuffer.buffer();    jIn.read(getBlockAddress(address),readBuffer,0,bufferLength);    ReadStream is=new ReadStream();    while (address < _tailAddress && (next=scanItem(jIn,address,readBuffer,tempBuffer)) > 0) {      boolean isOverflow=getBlockAddress(address) != getBlockAddress(next);      if (isOverflow) {        jIn.read(getBlockAddress(address),readBuffer,0,bufferLength);      }      ReplayInputStream rIn=new ReplayInputStream(jIn,readBuffer,address);      is.init(rIn);      try {        replayCallback.onItem(is);      } catch (      Exception e) {        e.printStackTrace();        log.log(Level.FINER,e.toString(),e);      }      address=next;      if (isOverflow) {        jIn.read(getBlockAddress(address),readBuffer,0,bufferLength);      }      _index=address;      _flushIndex=address;    }  } }  }
class C{  public TLongHashSet(TLongHashingStrategy strategy){  super(strategy);}  }
class C{  public CustomizedDistributedRowLock<K> withConsistencyLevel(ConsistencyLevel consistencyLevel){  this.consistencyLevel=consistencyLevel;  return this;}  }
class C{  public static void showFormattedMessage(String messageKey,Object... args){  _callback.showFormattedMessage(messageKey,args);}  }
class C{  public void addSerialisedObjectToIntentBundle(String key,Intent intent,Object object){  if (key == null) {    throw new InvalidParameterException("IntentHelper error adding serialised object to intentbundle, key may not be null");  }  if (intent == null) {    throw new InvalidParameterException("IntentHelper error adding serialised object to intentbundle, intent may not be null");  }  if (object == null) {    throw new InvalidParameterException("IntentHelper error adding serialised object to intentbundle, object may not be null");  }  Gson gson=new Gson();  intent.putExtra(key,gson.toJson(object));}  }
class C{  public static void main(String[] args){  java.util.Random r=new java.util.Random();  Bits bits=new Bits();  for (int i=0; i < 125; i++) {    int k;    do {      k=r.nextInt(250);    } while (bits.isMember(k));    System.out.println("adding " + k);    bits.incl(k);  }  int count=0;  for (int i=bits.nextBit(0); i >= 0; i=bits.nextBit(i + 1)) {    System.out.println("found " + i);    count++;  }  if (count != 125) {    throw new Error();  }}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public static long parseUnsignedLong(String str) throws NumberFormatException {  if (str.length() > 16) {    throw new NumberFormatException();  }  int lowstart=str.length() - 8;  if (lowstart <= 0)   return Long.parseLong(str,16); else   return Long.parseLong(str.substring(0,lowstart),16) << 32 | Long.parseLong(str.substring(lowstart),16);}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  public static boolean deleteFiles(String... files){  if (files == null || files.length == 0) {    return true;  }  Log.d(TAG,"Number of files to delete: " + files.length);  boolean allFilesDeleted=true;  for (int i=0; i < files.length; i++) {    Log.d(TAG,"Deleting file: " + files[i]);    URI fileUri=URI.create(files[i]);    File fileToDelete=new File(fileUri);    boolean deleted=fileToDelete.delete();    if (!deleted) {      allFilesDeleted=false;    }  }  return allFilesDeleted;}  }
class C{  public void reloadDocument(String URI){  reloadDocument(loadDocument(URI));}  }
class C{  Node[][] genArrays(int size,int narrays){  Node[][] arrays=new Node[narrays][size];  for (int i=0; i < narrays; i++) {    for (int j=0; j < size; j++) {      arrays[i][j]=new Node(null,0);    }  }  return arrays;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case CATEGORY:    return isSetCategory();case MESSAGE:  return isSetMessage();}throw new IllegalStateException();}  }
class C{  public Ambulance(){  super();}  }
class C{  public PRLoad(float weight,float[] bucketReadLoads,float[] bucketWriteLoads){  this.weight=weight;  this.bucketReadLoads=bucketReadLoads;  this.bucketWriteLoads=bucketWriteLoads;}  }
class C{  void removeComponentImplNoAnimationSafety(Component cmp){  Form parentForm=cmp.getComponentForm();  layout.removeLayoutComponent(cmp);  cmp.setParent(this);  cmp.deinitializeImpl();  components.remove(cmp);  cmp.setParent(null);  if (parentForm != null) {    if (parentForm.getFocused() == cmp || cmp instanceof Container && ((Container)cmp).contains(parentForm.getFocused())) {      parentForm.setFocused(null);    }    Component dragged=parentForm.getDraggedComponent();    if (dragged == cmp) {      parentForm.setDraggedComponent(null);    }    if (cmp.isSmoothScrolling()) {      parentForm.deregisterAnimatedInternal(cmp);    }  }  cmp.cancelRepaints();  if (cmp instanceof Form) {    cmp.setVisible(false);  }  setShouldCalcPreferredSize(true);  Display.impl.componentRemoved(cmp);}  }
class C{  public static String serialize(GPathResult node){  return serialize(asString(node));}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public TIntByteHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  no_entry_key=(int)0;  no_entry_value=(byte)0;}  }
class C{  public void add(Object o){synchronized (_queue) {    _queue.addElement(o);    _queue.notify();  }}  }
class C{  private int calculateLeft(View child,boolean duringLayout){  int mWidth=duringLayout ? getMeasuredWidth() : getWidth();  int childWidth=duringLayout ? child.getMeasuredWidth() : child.getWidth();  int childLeft=0;switch (mGravity) {case Gravity.LEFT:    childLeft=mSpinnerPadding.left;  break;case Gravity.CENTER_HORIZONTAL:int availableSpace=mWidth - mSpinnerPadding.right - mSpinnerPadding.left- childWidth;childLeft=mSpinnerPadding.left + (availableSpace / 2);break;case Gravity.RIGHT:childLeft=mWidth - mSpinnerPadding.right - childWidth;break;}return childLeft;}  }
class C{  private KeySelectorResult certSelect(X509Certificate xcert,SignatureMethod sm) throws KeyStoreException {  boolean[] keyUsage=xcert.getKeyUsage();  if (keyUsage != null && keyUsage[0] == false) {    return null;  }  String alias=ks.getCertificateAlias(xcert);  if (alias != null) {    PublicKey pk=ks.getCertificate(alias).getPublicKey();    if (algEquals(sm.getAlgorithm(),pk.getAlgorithm())) {      return new SimpleKeySelectorResult(pk);    }  }  return null;}  }
class C{  public void ancestorRemoved(final AncestorEvent event){}  }
class C{  private LoadBalancedConnectionProxy(List<String> hosts,Properties props) throws SQLException {  super();  String group=props.getProperty("loadBalanceConnectionGroup",null);  boolean enableJMX=false;  String enableJMXAsString=props.getProperty("loadBalanceEnableJMX","false");  try {    enableJMX=Boolean.parseBoolean(enableJMXAsString);  } catch (  Exception e) {    throw SQLError.createSQLException(Messages.getString("LoadBalancedConnectionProxy.badValueForLoadBalanceEnableJMX",new Object[]{enableJMXAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  if (group != null) {    this.connectionGroup=ConnectionGroupManager.getConnectionGroupInstance(group);    if (enableJMX) {      ConnectionGroupManager.registerJmx();    }    this.connectionGroupProxyID=this.connectionGroup.registerConnectionProxy(this,hosts);    hosts=new ArrayList<String>(this.connectionGroup.getInitialHosts());  }  int numHosts=initializeHostsSpecs(hosts,props);  this.liveConnections=new HashMap<String,ConnectionImpl>(numHosts);  this.hostsToListIndexMap=new HashMap<String,Integer>(numHosts);  for (int i=0; i < numHosts; i++) {    this.hostsToListIndexMap.put(this.hostList.get(i),i);  }  this.connectionsToHostsMap=new HashMap<ConnectionImpl,String>(numHosts);  this.responseTimes=new long[numHosts];  String retriesAllDownAsString=this.localProps.getProperty("retriesAllDown","120");  try {    this.retriesAllDown=Integer.parseInt(retriesAllDownAsString);  } catch (  NumberFormatException nfe) {    throw SQLError.createSQLException(Messages.getString("LoadBalancedConnectionProxy.badValueForRetriesAllDown",new Object[]{retriesAllDownAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  String blacklistTimeoutAsString=this.localProps.getProperty(BLACKLIST_TIMEOUT_PROPERTY_KEY,"0");  try {    this.globalBlacklistTimeout=Integer.parseInt(blacklistTimeoutAsString);  } catch (  NumberFormatException nfe) {    throw SQLError.createSQLException(Messages.getString("LoadBalancedConnectionProxy.badValueForLoadBalanceBlacklistTimeout",new Object[]{blacklistTimeoutAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  String hostRemovalGracePeriodAsString=this.localProps.getProperty(HOST_REMOVAL_GRACE_PERIOD_PROPERTY_KEY,"15000");  try {    this.hostRemovalGracePeriod=Integer.parseInt(hostRemovalGracePeriodAsString);  } catch (  NumberFormatException nfe) {    throw SQLError.createSQLException(Messages.getString("LoadBalancedConnectionProxy.badValueForLoadBalanceHostRemovalGracePeriod",new Object[]{hostRemovalGracePeriodAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  String strategy=this.localProps.getProperty("loadBalanceStrategy","random");  if ("random".equals(strategy)) {    this.balancer=(BalanceStrategy)Util.loadExtensions(null,props,"com.mysql.jdbc.RandomBalanceStrategy","InvalidLoadBalanceStrategy",null).get(0);  } else   if ("bestResponseTime".equals(strategy)) {    this.balancer=(BalanceStrategy)Util.loadExtensions(null,props,"com.mysql.jdbc.BestResponseTimeBalanceStrategy","InvalidLoadBalanceStrategy",null).get(0);  } else {    this.balancer=(BalanceStrategy)Util.loadExtensions(null,props,strategy,"InvalidLoadBalanceStrategy",null).get(0);  }  String autoCommitSwapThresholdAsString=props.getProperty("loadBalanceAutoCommitStatementThreshold","0");  try {    this.autoCommitSwapThreshold=Integer.parseInt(autoCommitSwapThresholdAsString);  } catch (  NumberFormatException nfe) {    throw SQLError.createSQLException(Messages.getString("LoadBalancedConnectionProxy.badValueForLoadBalanceAutoCommitStatementThreshold",new Object[]{autoCommitSwapThresholdAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  String autoCommitSwapRegex=props.getProperty("loadBalanceAutoCommitStatementRegex","");  if (!("".equals(autoCommitSwapRegex))) {    try {      "".matches(autoCommitSwapRegex);    } catch (    Exception e) {      throw SQLError.createSQLException(Messages.getString("LoadBalancedConnectionProxy.badValueForLoadBalanceAutoCommitStatementRegex",new Object[]{autoCommitSwapRegex}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);    }  }  if (this.autoCommitSwapThreshold > 0) {    String statementInterceptors=this.localProps.getProperty("statementInterceptors");    if (statementInterceptors == null) {      this.localProps.setProperty("statementInterceptors","com.mysql.jdbc.LoadBalancedAutoCommitInterceptor");    } else     if (statementInterceptors.length() > 0) {      this.localProps.setProperty("statementInterceptors",statementInterceptors + ",com.mysql.jdbc.LoadBalancedAutoCommitInterceptor");    }    props.setProperty("statementInterceptors",this.localProps.getProperty("statementInterceptors"));  }  this.balancer.init(null,props);  String lbExceptionChecker=this.localProps.getProperty("loadBalanceExceptionChecker","com.mysql.jdbc.StandardLoadBalanceExceptionChecker");  this.exceptionChecker=(LoadBalanceExceptionChecker)Util.loadExtensions(null,props,lbExceptionChecker,"InvalidLoadBalanceExceptionChecker",null).get(0);  pickNewConnection();}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public static void printSummary(PrintStream out){  printSummary(out,null);  printErrorSummary(out);}  }
class C{  public boolean replyToMessage(String quickReply){  setMessageRead();  SmsMessageSender sender=new SmsMessageSender(context,new String[]{fromAddress},quickReply,getThreadId());  return sender.sendMessage();}  }
class C{  public void unsetMatchColumn(int[] columnIdxes) throws SQLException {  int i_val;  for (int j=0; j < columnIdxes.length; j++) {    i_val=(Integer.parseInt(iMatchColumns.get(j).toString()));    if (columnIdxes[j] != i_val) {      throw new SQLException(resBundle.handleGetObject("jdbcrowsetimpl.matchcols").toString());    }  }  for (int i=0; i < columnIdxes.length; i++) {    iMatchColumns.set(i,Integer.valueOf(-1));  }}  }
class C{  public int push(int i){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=i;  m_firstFree++;  return i;}  }
class C{  public final static void writeUnescapedXML(Writer out,String tag,String val,Object... attrs) throws IOException {  out.write('<');  out.write(tag);  for (int i=0; i < attrs.length; i++) {    out.write(' ');    out.write(attrs[i++].toString());    out.write('=');    out.write('"');    out.write(attrs[i].toString());    out.write('"');  }  if (val == null) {    out.write('/');    out.write('>');  } else {    out.write('>');    out.write(val);    out.write('<');    out.write('/');    out.write(tag);    out.write('>');  }}  }
class C{  public static void generateRPClass(String ATTR_TITLE){  final RPClass entity=new RPClass("rpentity");  entity.isA("active_entity");  entity.addAttribute("name",Type.STRING);  entity.addAttribute(ATTR_TITLE,Type.STRING);  entity.addAttribute("level",Type.SHORT);  entity.addAttribute("xp",Type.INT);  entity.addAttribute("mana",Type.INT);  entity.addAttribute("base_mana",Type.INT);  entity.addAttribute("base_hp",Type.SHORT);  entity.addAttribute("hp",Type.SHORT);  entity.addAttribute("atk",Type.SHORT,Definition.PRIVATE);  entity.addAttribute("atk_xp",Type.INT,Definition.PRIVATE);  entity.addAttribute("atk_item",Type.INT,(byte)(Definition.PRIVATE | Definition.VOLATILE));  entity.addAttribute("def",Type.SHORT,Definition.PRIVATE);  entity.addAttribute("def_xp",Type.INT,Definition.PRIVATE);  entity.addAttribute("def_item",Type.INT,(byte)(Definition.PRIVATE | Definition.VOLATILE));  if (Testing.COMBAT) {    entity.addAttribute("ratk",Type.SHORT,(byte)(Definition.PRIVATE | Definition.VOLATILE));    entity.addAttribute("ratk_xp",Type.INT,(byte)(Definition.PRIVATE | Definition.VOLATILE));    entity.addAttribute("ratk_item",Type.INT,(byte)(Definition.PRIVATE | Definition.VOLATILE));  }  entity.addAttribute("risk",Type.BYTE,Definition.VOLATILE);  entity.addAttribute("damage",Type.INT,Definition.VOLATILE);  entity.addAttribute("heal",Type.INT,Definition.VOLATILE);  entity.addAttribute("target",Type.INT,Definition.VOLATILE);  entity.addAttribute("title_type",Type.STRING,Definition.VOLATILE);  entity.addAttribute("base_speed",Type.FLOAT,Definition.VOLATILE);  entity.addAttribute("ignore_collision",Type.FLAG,Definition.VOLATILE);  entity.addAttribute("unnamed",Type.FLAG,Definition.VOLATILE);  entity.addAttribute("no_hpbar",Type.FLAG,Definition.VOLATILE);  entity.addAttribute("job_merchant",Type.FLAG,Definition.VOLATILE);  entity.addAttribute("job_healer",Type.FLAG,Definition.VOLATILE);  entity.addAttribute("choking",Type.SHORT,Definition.VOLATILE);  entity.addAttribute("status_confuse",Type.SHORT,Definition.VOLATILE);  entity.addAttribute("eating",Type.SHORT,Definition.VOLATILE);  entity.addAttribute("poisoned",Type.SHORT,Definition.VOLATILE);  entity.addAttribute("status_shock",Type.SHORT,Definition.VOLATILE);  entity.addAttribute("status_zombie",Type.SHORT,Definition.VOLATILE);  entity.addAttribute("status_heavy",Type.SHORT,Definition.VOLATILE);  entity.addAttribute("resist_confused",Type.FLOAT,Definition.VOLATILE);  entity.addAttribute("resist_drunk",Type.FLOAT,Definition.VOLATILE);  entity.addAttribute("resist_heavy",Type.FLOAT,Definition.VOLATILE);  entity.addAttribute("resist_poisoned",Type.FLOAT,Definition.VOLATILE);  entity.addAttribute("resist_shocked",Type.FLOAT,Definition.VOLATILE);  entity.addAttribute("resist_zombie",Type.FLOAT,Definition.VOLATILE);  entity.addAttribute(PATHSET,Type.STRING,Definition.VOLATILE);  entity.addRPSlot("head",1,Definition.PRIVATE);  entity.addRPSlot("rhand",1,Definition.PRIVATE);  entity.addRPSlot("lhand",1,Definition.PRIVATE);  entity.addRPSlot("armor",1,Definition.PRIVATE);  entity.addRPSlot("finger",1,Definition.PRIVATE);  entity.addRPSlot("cloak",1,Definition.PRIVATE);  entity.addRPSlot("legs",1,Definition.PRIVATE);  entity.addRPSlot("feet",1,Definition.PRIVATE);  entity.addRPSlot("back",1,Definition.PRIVATE);  entity.addRPSlot("belt",1,Definition.PRIVATE);  entity.addRPSlot("bag",12,Definition.PRIVATE);  entity.addRPSlot("keyring",8,Definition.PRIVATE);  entity.addRPEvent("attack",Definition.VOLATILE);}  }
class C{  @DELETE @Path(PathParameters.TENANT_NAME_VAR) @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam(PathParameters.TENANT_NAME) String tenantName){  try {    getIDMClient().deleteTenant(tenantName);  } catch (  NoSuchTenantException e) {    log.debug("Failed to delete tenant '{}'",tenantName,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException e) {    log.error("Failed to delete tenant '{}' due to a client side error",tenantName,e);    throw new BadRequestException(sm.getString("res.ten.delete.failed",tenantName),e);  }catch (  Exception e) {    log.error("Failed to delete tenant '{}' due to a server side error",tenantName,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  private void startForegroundCompat(int id,Notification notification){  if (mStartForeground != null) {    try {      mStartForeground.invoke(this,Integer.valueOf(id),notification);    } catch (    InvocationTargetException e) {      L.d("Unable to invoke startForeground");    }catch (    IllegalAccessException e) {      L.d("Unable to invoke startForeground");    }    return;  }  if (mSetForeground != null) {    try {      mSetForeground.invoke(this,Boolean.TRUE);    } catch (    IllegalAccessException e) {      L.d("Unable to invoke setForeground");    }catch (    InvocationTargetException e) {      L.d("Unable to invoke setForeground");    }  }  mNM.notify(id,notification);}  }
class C{  public MemcacheClientBuilder<V> withAddress(HostAndPort address){  this.addresses=ImmutableList.of(address);  return this;}  }
class C{  public float value(){  return _map._values[_index];}  }
class C{  public PropertyChangeListenerProxy(String propertyName,PropertyChangeListener listener){  super(listener);  this.propertyName=propertyName;}  }
class C{  public static Snapshot generateStatistics(String outDir,Manager manager) throws SQLException, IOException, MitroServletException {  final long runTimestampMs=System.currentTimeMillis();  Snapshot output=new Snapshot();  Multimap<Integer,Link> countToFile=TreeMultimap.create(Ordering.natural().reverse(),Ordering.natural());  Map<Integer,GroupInfo> orgIdToOrg=Maps.newHashMap();  for (  DBGroup o : DBGroup.getAllOrganizations(manager)) {    GroupInfo newGi=new GroupInfo();    newGi.autoDelete=o.isAutoDelete();    newGi.groupId=o.getId();    newGi.isTopLevelOrg=true;    newGi.name=o.getName();    Set<String> users=Sets.newHashSet();    for (    DBGroup orgGroup : o.getAllOrgGroups(manager)) {      users.add(orgGroup.getName());    }    newGi.users=Lists.newArrayList(users);    orgIdToOrg.put(newGi.groupId,newGi);  }  int numPeople=0;  for (  DBIdentity id : manager.identityDao.queryForAll()) {    ++numPeople;    try {      logger.info(id.getName() + ": " + id.getGuidCookie());      DBHistoricalUserState userState=getHistoricalUserState(manager,runTimestampMs,orgIdToOrg,id);      output.userStateObjects.add(userState);      String filename=id.getName() + ".html";      renderIfOutputEnabled(outDir,"/users/" + filename,userStateTemplate,userState);      countToFile.put(userState.numSecrets,new Link(id.getName(),filename,userState.numSecrets));    } catch (    MitroServletException e) {      logger.error("UNKNOWN ERROR",e);    }  }  renderIfOutputEnabled(outDir,"/users/index.html",indexTemplate,countToFile.values());  countToFile.clear();  int numOrgs=0;  for (  DBGroup org : DBGroup.getAllOrganizations(manager)) {    ++numOrgs;    Set<Integer> admins=Sets.newHashSet();    org.putDirectUsersIntoSet(admins,DBAcl.adminAccess());    int userId=admins.iterator().next();    DBIdentity dbi=manager.identityDao.queryForId(userId);    MitroRequestContext context=new MitroRequestContext(dbi,null,manager,null);    GetOrganizationStateResponse resp=GetOrganizationState.doOperation(context,org.getId());    DBHistoricalOrgState orgState=new DBHistoricalOrgState(resp,org.getId(),runTimestampMs);    output.orgStateObjects.add(orgState);    String filename=org.getId() + ".html";    renderIfOutputEnabled(outDir,"/orgs/" + filename,orgStateTemplate,orgState);    countToFile.put(orgState.numMembers + orgState.numAdmins,new Link(org.getName() + org.getId(),org.getId() + ".html",orgState.numAdmins + orgState.numMembers));  }  renderIfOutputEnabled(outDir,"/orgs/index.html",indexTemplate,countToFile.values());  renderIfOutputEnabled(outDir,"/index.html",indexTemplate,ImmutableList.of(new Link("organizations","orgs/index.html",numOrgs),new Link("users","users/index.html",numPeople)));  return output;}  }
class C{  public boolean isExtended(){  return this.isExtended;}  }
class C{  public void put(double[] data){  final int l=data.length;  for (int i=0; i < l; i++) {    final double val=data[i];    min=val < min ? val : min;    max=val > max ? val : max;  }}  }
class C{  public RC6Engine(){  _S=null;}  }
class C{  public void updateAfkStatus(){  purgeNotOnline();  final AFKConfig config=aca.getNodeOrDefault();  long afkTime=config.getAfkTime();  long afkTimeKick=config.getAfkTimeToKick();  Instant now=Instant.now();  CommandPermissionHandler cph=getPermissionUtil();  if (afkTime > 0) {    workOnAfkPlayers(now.minus(afkTime,ChronoUnit.SECONDS),cph,exempttoggle,null,null);  }  if (afkTimeKick > 0) {    workOnAfkPlayers(now.minus(afkTimeKick,ChronoUnit.SECONDS),cph,exemptkick,null,null);  }}  }
class C{  private boolean readBuffer() throws IOException {  if (_readBuffer == null || _source == null) {    _readOffset=0;    _readLength=0;    return false;  }  int readLength=_source.read(_readBuffer,0,_readBuffer.length);  _readOffset=0;  if (readLength > 0) {    _readLength=readLength;    _position+=readLength;    if (_isEnableReadTime)     _readTime=CurrentTime.currentTime();    return true;  } else {    _readLength=0;    return false;  }}  }
class C{  public String toString(){  return "ReadStream[" + _source + "]";}  }
class C{  public FtHttpResume(Direction direction,Uri file,String fileName,String mimeType,long size,Uri fileIcon,ContactId contact,String chatId,String fileTransferId,boolean groupTransfer,long timestamp,long timestampSent){  if (size <= 0 || file == null || fileName == null)   throw new IllegalArgumentException("size invalid arguments (size=" + size + ") (file="+ file+ ") (fileName="+ fileName+ ")");  mDirection=direction;  mFile=file;  mFileName=fileName;  mSize=size;  mFileIcon=fileIcon;  mContact=contact;  mChatId=chatId;  mFileTransferId=fileTransferId;  mGroupTransfer=groupTransfer;  mTimestamp=timestamp;  mTimestampSent=timestampSent;  mMimeType=mimeType;}  }
class C{  public static String replaceChars(String s,char[] sub,char[] with){  char[] str=s.toCharArray();  for (int i=0; i < str.length; i++) {    char c=str[i];    for (int j=0; j < sub.length; j++) {      if (c == sub[j]) {        str[i]=with[j];        break;      }    }  }  return new String(str);}  }
class C{  public int size(){  return this.elements.size();}  }
class C{  public byte[] createJarFromFileContent(final String fileName,final String content) throws IOException {  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();  JarOutputStream jarOutputStream=new JarOutputStream(byteArrayOutputStream);  JarEntry entry=new JarEntry(fileName);  entry.setTime(System.currentTimeMillis());  jarOutputStream.putNextEntry(entry);  jarOutputStream.write(content.getBytes());  jarOutputStream.closeEntry();  jarOutputStream.close();  return byteArrayOutputStream.toByteArray();}  }
class C{  @PrePersist public void beforePersist(){  final String username=RequestContext.getUsername();  if (username == null) {    throw new IllegalArgumentException("Cannot persist a TransactionalEntity without a username " + "in the RequestContext for this thread.");  }  setCreatedBy(username);  setCreatedAt(new DateTime());}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  private boolean resumePreviousRollback(Workflow workflow){  if (workflow.isRollbackState() == false) {    return false;  }  Map<String,Step> stepMap=workflow.getStepMap();  for (  Step step : stepMap.values()) {    if (!step.isRollbackStep()) {      continue;    }    if (step.status.state == StepState.ERROR || step.status.state == StepState.CANCELLED) {      step.status.updateState(StepState.CREATED,null,"");    }  }  for (  Step step : stepMap.values()) {    if (step.isRollbackStep() && step.status.state == StepState.CREATED) {      _log.info(String.format("Retrying previous rollback step %s : %s",step.stepId,step.description));      queueWorkflowStep(workflow,step);    }  }  return true;}  }
class C{  @Override protected List<ProxyDistribution> loadBeans(final int startIndex,final int count){  Page<DistributionSet> distBeans;  final List<ProxyDistribution> proxyDistributions=new ArrayList<>();  if (startIndex == 0 && firstPageDistributionSets != null) {    distBeans=firstPageDistributionSets;  } else   if (pinnedControllerId != null) {    final DistributionSetFilterBuilder distributionSetFilterBuilder=new DistributionSetFilterBuilder().setIsDeleted(false).setIsComplete(true).setSearchText(searchText).setSelectDSWithNoTag(noTagClicked).setTagNames(distributionTags);    distBeans=getDistributionSetManagement().findDistributionSetsAllOrderedByLinkTarget(new OffsetBasedPageRequest(startIndex,count,sort),distributionSetFilterBuilder,pinnedControllerId);  } else   if (distributionTags.isEmpty() && Strings.isNullOrEmpty(searchText) && !noTagClicked) {    distBeans=getDistributionSetManagement().findDistributionSetsByDeletedAndOrCompleted(new OffsetBasedPageRequest(startIndex,count,sort),false,true);  } else {    final DistributionSetFilter distributionSetFilter=new DistributionSetFilterBuilder().setIsDeleted(false).setIsComplete(true).setSearchText(searchText).setSelectDSWithNoTag(noTagClicked).setTagNames(distributionTags).build();    distBeans=getDistributionSetManagement().findDistributionSetsByFilters(new OffsetBasedPageRequest(startIndex,count,sort),distributionSetFilter);  }  for (  final DistributionSet distributionSet : distBeans) {    final ProxyDistribution proxyDistribution=new ProxyDistribution();    proxyDistribution.setName(distributionSet.getName());    proxyDistribution.setDescription(distributionSet.getDescription());    proxyDistribution.setId(distributionSet.getId());    proxyDistribution.setDistId(distributionSet.getId());    proxyDistribution.setVersion(distributionSet.getVersion());    proxyDistribution.setCreatedDate(SPDateTimeUtil.getFormattedDate(distributionSet.getCreatedAt()));    proxyDistribution.setLastModifiedDate(SPDateTimeUtil.getFormattedDate(distributionSet.getLastModifiedAt()));    proxyDistribution.setCreatedByUser(UserDetailsFormatter.loadAndFormatCreatedBy(distributionSet));    proxyDistribution.setModifiedByUser(UserDetailsFormatter.loadAndFormatLastModifiedBy(distributionSet));    proxyDistribution.setNameVersion(HawkbitCommonUtil.getFormattedNameVersion(distributionSet.getName(),distributionSet.getVersion()));    proxyDistributions.add(proxyDistribution);  }  return proxyDistributions;}  }
class C{  public boolean equals(Object o){  if (o == this)   return true; else   if (o == null || getClass() != o.getClass())   return false;  JClass jClass=(JClass)o;  return getName().equals(jClass.getName());}  }
class C{  @BeforeClass public static void beforeClass(){  dbLogic=new DbLogicImpermanent();  dbLogic.createTestDb();  dbLogic.setIdGenerator(new SequentialIdGenerator());}  }
class C{  public void lock(boolean waitForBackup){  super.lock();  while (isBackingUp && waitForBackup && !(Thread.currentThread() == backupThread)) {    backupDone.awaitUninterruptibly();  }}  }
class C{  public ListenerSupport(Object sourceBean){  setSource(sourceBean);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.DICTIONARY_PROPERTY_TYPE__KEY_TYPE:    setKeyType((PropertyType)newValue);  return;case DatatypePackage.DICTIONARY_PROPERTY_TYPE__VALUE_TYPE:setValueType((PropertyType)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testProvidesChecksum(){  Em18RfidProtocol instance=new Em18RfidProtocol();  assertEquals(true,instance.providesChecksum());}  }
class C{  public void addInstruction(InstructionHandle handle){  if (firstInstruction == null) {    firstInstruction=lastInstruction=handle;  } else {    if (VERIFY_INTEGRITY && handle != lastInstruction.getNext()) {      throw new IllegalStateException("Adding non-consecutive instruction");    }    lastInstruction=handle;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void init(int logLevel,Printer... printers){  init(logLevel,new LogConfiguration.Builder().build(),printers);}  }
class C{  private void fillToGalleryTop(){  int itemSpacing=mSpacing;  int galleryTop=getPaddingTop();  View prevIterationView=getChildAt(0);  int curPosition;  int curBottomEdge;  int numItems=mItemCount;  if (prevIterationView != null) {    curPosition=mFirstPosition - 1;    curBottomEdge=prevIterationView.getTop() - itemSpacing;  } else {    curPosition=0;    curBottomEdge=getBottom() - getTop() - getPaddingBottom();    mShouldStopFling=true;  }  while (curBottomEdge > galleryTop && curPosition >= 0) {    prevIterationView=makeAndAddVerticalView(curPosition,curPosition - mSelectedPosition,curBottomEdge,false);    mFirstPosition=curPosition;    curBottomEdge=prevIterationView.getTop() - itemSpacing;    curPosition--;  }}  }
class C{  public ReadOnlyTextIcon(final PdfObject form,final int iconRot,final PdfObjectReader pdfObjectReader,final PdfObject res){  super(iconRot);  this.form=form;  currentpdffile=pdfObjectReader;  resources=res;}  }
class C{  private void cmd_reloadFile(){  if (m_file == null)   return;  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  m_data.clear();  rawData.setText("");  try {    Charset charset=(Charset)fCharset.getSelectedItem();    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(m_file),charset),10240);    String s=null;    while ((s=in.readLine()) != null) {      m_data.add(s);      if (m_data.size() <= MAX_LOADED_LINES) {        rawData.append(s);        rawData.append("\n");      }    }    in.close();    rawData.setCaretPosition(0);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);    bFile.setText(Msg.getMsg(Env.getCtx(),"FileImportFile"));  }  int index=1;  if (m_data.size() == 1)   index=0;  int length=0;  if (m_data.size() > 0)   length=m_data.get(index).toString().length();  info.setText(Msg.getMsg(Env.getCtx(),"Records") + "=" + m_data.size()+ ", "+ Msg.getMsg(Env.getCtx(),"Length")+ "="+ length+ "   ");  setCursor(Cursor.getDefaultCursor());  log.config("Records=" + m_data.size() + ", Length="+ length);}  }
class C{  @Deprecated public UpdateRequest scriptLang(String scriptLang){  updateOrCreateScript(null,null,scriptLang,null);  return this;}  }
class C{  public boolean contains(float value){  return contains(new Float(value).toString());}  }
class C{  public void dispose(){  mBlue=null;  super.dispose();}  }
class C{  public VariantAllelicFractionAnnotation(){  this("VAF","Variant Allelic Fraction",AnnotationDataType.DOUBLE);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  protected Connection newConnection(){  return new Connection(streamProvider);}  }
class C{  public CompletionWeight(final CompletionQuery query,final Automaton automaton) throws IOException {  super(query);  this.completionQuery=query;  this.automaton=automaton;}  }
class C{  protected void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;    String trxName=Trx.createTrxName();    MInvoice mi=new MInvoice(Env.getCtx(),record_id,trxName);    fIsPaid.setSelected(mi.isPaid());    fIsSOTrx.setSelected(mi.isSOTrx());    mi=null;    Trx.get(trxName,false).close();  } else {    String id;    id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",true);    if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))     fBPartner_ID.setValue(new Integer(id));    id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Order_ID",true);    if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))     fOrder_ID.setValue(new Integer(id));    id=Env.getContext(Env.getCtx(),p_WindowNo,"IsSOTrx",true);    if (id != null && id.length() != 0 && (id == "Y" || id == "N")) {      fIsSOTrx.setSelected(id == "Y");    }    if (value != null && value.length() > 0) {      fDocumentNo.setValue(value);    } else {      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Invoice_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();        String trxName=Trx.createTrxName();        MInvoice mi=new MInvoice(Env.getCtx(),record_id,trxName);        fIsPaid.setSelected(mi.isPaid());        fIsSOTrx.setSelected(mi.isSOTrx());        mi=null;        Trx.get(trxName,false).close();      }    }  }  return;}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset dataset,PlotRenderingInfo info){  XYBarRendererState state=new XYBarRendererState(info);  ValueAxis rangeAxis=plot.getRangeAxisForDataset(plot.indexOf(dataset));  state.setG2Base(rangeAxis.valueToJava2D(this.base,dataArea,plot.getRangeAxisEdge()));  return state;}  }
class C{  public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){  if (!roundEnv.processingOver()) {    TypeElement stringElt=eltUtils.getTypeElement("java.lang.String");    PackageElement javaLangPkg=eltUtils.getPackageElement("java.lang");    PackageElement unnamedPkg=eltUtils.getPackageElement("");    PackageElement pkg=null;    if (!javaLangPkg.equals(pkg=eltUtils.getPackageOf(stringElt)))     throw new RuntimeException("Unexpected package for String: " + pkg);    if (!javaLangPkg.equals(pkg=eltUtils.getPackageOf(javaLangPkg)))     throw new RuntimeException("Unexpected package for java.lang: " + pkg);    if (!unnamedPkg.equals(pkg=eltUtils.getPackageOf(unnamedPkg)))     throw new RuntimeException("Unexpected package for unnamed pkg: " + pkg);  }  return true;}  }
class C{  @Transactional(readOnly=true) public static Result list(String filter){  List<TodoItem> todos;switch (filter) {case "open":case "done":    todos=TodoService.findByCompleted("done".equals(filter));  break;case "all":default :todos=TodoService.findAll();}return ok(todolist.render(filter,todos));}  }
class C{  public void background(float x,float y,float z){  g.background(x,y,z);}  }
class C{  public static Resource newObjectFromJSONObject(JSONObject dataObject,List<Resource> included) throws Exception {  Resource realObject=null;  try {    realObject=deserializer.createObjectFromString(getTypeFromJson(dataObject));  } catch (  Exception e) {    throw e;  }  try {    realObject=mapper.mapId(realObject,dataObject);  } catch (  Exception e) {    Logger.debug("JSON data does not contain id");  }  try {    realObject=mapper.mapAttributes(realObject,dataObject.getJSONObject("attributes"));  } catch (  Exception e) {    Logger.debug("JSON data does not contain attributes");  }  try {    realObject=mapper.mapRelations(realObject,dataObject.getJSONObject("relationships"),included);  } catch (  Exception e) {    Logger.debug("JSON data does not contain relationships");  }  try {    assert realObject != null;    realObject.setMeta(mapper.getAttributeMapper().createMapFromJSONObject(dataObject.getJSONObject("meta")));  } catch (  Exception e) {    Logger.debug("JSON data does not contain meta");  }  try {    realObject.setLinks(mapper.mapLinks(dataObject.getJSONObject("links")));  } catch (  JSONException e) {    Logger.debug("JSON data does not contain links");  }  return realObject;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  public void close() throws IOException {}  }
class C{  public final void testGetPublicKey() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PublicKey pk=testPublicKey;  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,null,pk);  assertSame(pk,vr.getPublicKey());}  }
class C{  public void internalRunning() throws Exception {  endpoint.openClient();  started=true;  DiscoveryRunnable runnable=new DiscoveryRunnable();  runnable.run();}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.processingInstruction(target,data);}  }
class C{  private ServiceLib(){}  }
class C{  @Override public boolean supportsSubqueriesInExists(){  debugCodeCall("supportsSubqueriesInExists");  return true;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (nodes == null) {    throw new NullPointerException();  }  if (ambiguousTriples == null) {    ambiguousTriples=new HashSet<>();  }  if (highlightedEdges == null) {    highlightedEdges=new HashSet<>();  }  if (underLineTriples == null) {    underLineTriples=new HashSet<>();  }  if (dottedUnderLineTriples == null) {    dottedUnderLineTriples=new HashSet<>();  }}  }
class C{  @Deprecated @Nullable public static PsiElement treeCrawlUp(PsiScopeProcessor processor,PsiElement elt){  if (elt == null || !elt.isValid())   return null;  PsiElement seeker=elt;  PsiElement cap=PyUtil.getConcealingParent(elt);  PyFunction capFunction=cap != null ? PsiTreeUtil.getParentOfType(cap,PyFunction.class,false) : null;  final boolean is_outside_param_list=PsiTreeUtil.getParentOfType(elt,PyParameterList.class) == null;  do {    ProgressManager.checkCanceled();    seeker=getPrevNodeOf(seeker);    if ((seeker instanceof NameDefiner) && ((NameDefiner)seeker).mustResolveOutside() && PsiTreeUtil.isAncestor(seeker,elt,true)) {      seeker=getPrevNodeOf(seeker);    }    while (true) {      PsiElement local_cap=PyUtil.getConcealingParent(seeker);      if (local_cap == null)       break;      if (local_cap == cap)       break;      if ((cap != null) && PsiTreeUtil.isAncestor(local_cap,cap,true))       break;      if ((local_cap != elt) && ((cap == null) || !PsiTreeUtil.isAncestor(local_cap,cap,true))) {        if (local_cap instanceof NameDefiner) {          seeker=local_cap;        } else {          seeker=getPrevNodeOf(local_cap);        }      } else {        break;      }    }    if (is_outside_param_list && refersFromMethodToClass(capFunction,seeker))     continue;    if (seeker instanceof PyComprehensionElement && !PsiTreeUtil.isAncestor(seeker,elt,false)) {      continue;    }    if (seeker != null) {      if (!processor.execute(seeker,ResolveState.initial())) {        if (processor instanceof ResolveProcessor) {          return ((ResolveProcessor)processor).getResult();        } else {          return seeker;        }      }    }  } while (seeker != null);  if (processor instanceof ResolveProcessor) {    return ((ResolveProcessor)processor).getResult();  }  return null;}  }
class C{  public HubToIntervalFramers(String sourceGroup,ISource source,Action action) throws AdeException {  m_sourceGroup=sourceGroup;  m_source=source;  m_action=action;  initIntervalFramers();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the GET method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  private static PipelineOp addNamedSubqueryInclude(PipelineOp left,final NamedSubqueryInclude nsi,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  final String name=nsi.getName();  if (log.isInfoEnabled())   log.info("include: solutionSet=" + name);  final IVariable<?>[] joinVars;  boolean release;{    final NamedSubqueryRoot nsr=ctx.sa.getNamedSubqueryRoot(name);    if (nsr != null) {      @SuppressWarnings("unchecked") final Set<IVariable<?>> nsrDoneSet=(Set<IVariable<?>>)nsr.getProperty(NamedSubqueryRoot.Annotations.DONE_SET);      if (nsrDoneSet == null) {        throw new AssertionError("NamedSubqueryRoot doneSet not found: " + name);      }      doneSet.addAll(nsrDoneSet);      final VarNode[] joinvars=nsi.getJoinVars();      if (joinvars == null) {        throw new AssertionError();      }      joinVars=ASTUtil.convert(joinvars);      release=false;    } else {      final ISolutionSetStats stats=ctx.sa.getSolutionSetStats(name);      doneSet.addAll(stats.getMaterialized());      if (isNamedSolutionSetScan(ctx,nsi)) {        return convertNamedSolutionSetScan(left,nsi,doneSet,ctx);      }      final Set<IVariable<?>> joinvars=ctx.sa.getJoinVars(nsi,name,new LinkedHashSet<IVariable<?>>());      joinVars=joinvars.toArray(new IVariable[]{});      @SuppressWarnings("rawtypes") final IVariable[] selectVars=null;      final INamedSolutionSetRef sourceSet=NamedSolutionSetRefUtility.newInstance(ctx.getNamespace(),ctx.getTimestamp(),name,IVariable.EMPTY);      final INamedSolutionSetRef generatedSet=NamedSolutionSetRefUtility.newInstance(ctx.queryId,name,joinVars);      final JoinTypeEnum joinType=JoinTypeEnum.Normal;      final IHashJoinUtilityFactory joinUtilFactory;      if (ctx.nativeHashJoins) {        joinUtilFactory=HTreeHashJoinUtility.factory;      } else {        joinUtilFactory=JVMHashJoinUtility.factory;      }      left=applyQueryHints(new HashIndexOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.LAST_PASS,true),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(HashIndexOp.Annotations.JOIN_TYPE,joinType),new NV(HashIndexOp.Annotations.JOIN_VARS,joinVars),new NV(HashIndexOp.Annotations.SELECT,selectVars),new NV(HashIndexOp.Annotations.HASH_JOIN_UTILITY_FACTORY,joinUtilFactory),new NV(HashIndexOp.Annotations.NAMED_SET_SOURCE_REF,sourceSet),new NV(HashIndexOp.Annotations.NAMED_SET_REF,generatedSet),new NV(IPredicate.Annotations.RELATION_NAME,new String[]{ctx.getLexiconNamespace()})),nsi,ctx);      release=true;    }  }  final INamedSolutionSetRef namedSolutionSetRef=NamedSolutionSetRefUtility.newInstance(ctx.queryId,name,joinVars);  @SuppressWarnings("rawtypes") final Map<IConstraint,Set<IVariable<IV>>> needsMaterialization=new LinkedHashMap<IConstraint,Set<IVariable<IV>>>();  final IConstraint[] joinConstraints=getJoinConstraints(getJoinConstraints(nsi),needsMaterialization);  release=false;  if (ctx.nativeHashJoins) {    left=applyQueryHints(new HTreeSolutionSetHashJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(HTreeSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSetRef),new NV(HTreeSolutionSetHashJoinOp.Annotations.CONSTRAINTS,joinConstraints),new NV(HTreeSolutionSetHashJoinOp.Annotations.RELEASE,release)),nsi,ctx);  } else {    left=applyQueryHints(new JVMSolutionSetHashJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(JVMSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSetRef),new NV(JVMSolutionSetHashJoinOp.Annotations.CONSTRAINTS,joinConstraints),new NV(JVMSolutionSetHashJoinOp.Annotations.RELEASE,release)),nsi,ctx);  }  left=addMaterializationSteps3(left,doneSet,needsMaterialization,nsi.getQueryHints(),ctx);  return left;}  }
class C{  private static UntarCompressionMethod compressionMethod(File file){  String fn=file.toString();  UntarCompressionMethod out=new UntarCompressionMethod();  if (fn.endsWith("gz")) {    out.setValue("gzip");  } else   if (fn.endsWith("bz2")) {    out.setValue("bzip2");  } else   if (fn.endsWith("tar")) {    out.setValue("none");  } else {    throw new IllegalArgumentException("UntarJob doesn't know what to do with that file. " + "tar, gz, and bz2 files accepted.");  }  return out;}  }
class C{  private void deleteWorkFlowMatrixObject(final HashMap workflowsearchparams){  this.workFlowMatrixService.deleteWorkFlowforObject(workflowsearchparams);}  }
class C{  private static void subsetsHelper(List<List<Integer>> res,List<Integer> list,int[] num,int pos){  res.add(new ArrayList<Integer>(list));  for (int i=pos; i < num.length; i++) {    if (i != pos && num[i] == num[i - 1])     continue;    list.add(num[i]);    subsetsHelper(res,list,num,i + 1);    list.remove(list.size() - 1);  }}  }
class C{  public void clearTable(){  super.clearTable();}  }
class C{  protected final void mergeNodes(PurityNode src,PurityNode dst){  Iterator it=(new LinkedList(edges.get(src))).iterator();  while (it.hasNext()) {    PurityEdge e=(PurityEdge)it.next();    PurityNode n=e.getTarget();    if (n.equals(src))     n=dst;    PurityEdge ee=cacheEdge(new PurityEdge(dst,e.getField(),n,e.isInside()));    edges.remove(src,e);    edges.put(dst,ee);    backEdges.remove(n,e);    backEdges.put(n,ee);  }  it=(new LinkedList(backEdges.get(src))).iterator();  while (it.hasNext()) {    PurityEdge e=(PurityEdge)it.next();    PurityNode n=e.getSource();    if (n.equals(src))     n=dst;    PurityEdge ee=cacheEdge(new PurityEdge(n,e.getField(),dst,e.isInside()));    edges.remove(n,e);    edges.put(n,ee);    backEdges.remove(src,e);    backEdges.put(dst,ee);  }  it=(new LinkedList(backLocals.get(src))).iterator();  while (it.hasNext()) {    Local l=(Local)it.next();    locals.remove(l,src);    backLocals.remove(src,l);    locals.put(l,dst);    backLocals.put(dst,l);  }{    Set m=mutated.get(src);    mutated.remove(src);    mutated.putAll(dst,m);  }  if (ret.contains(src)) {    ret.remove(src);    ret.add(dst);  }  if (globEscape.contains(src)) {    globEscape.remove(src);    globEscape.add(dst);  }  nodes.remove(src);  nodes.add(dst);  paramNodes.remove(src);  if (dst.isParam())   paramNodes.add(dst);}  }
class C{  public boolean contains(char point){  return start <= point && end >= point;}  }
class C{  public static boolean isExternalStorageAvailable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state);}  }
class C{  public void addListener(INotifyChangedListener notifyChangedListener){  changeNotifier.addListener(notifyChangedListener);}  }
class C{  @Override protected void initListeners(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.930 -0500",hash_original_method="0EB66BA5E965B83E191719250E0A82FF",hash_generated_method="0D841C721535905DD0E9F7FAE6757EB9") @Override public String toString(){  return name;}  }
class C{  void writeStub(IndentingWriter p) throws IOException {  p.pln("// Stub class generated by rmic, do not edit.");  p.pln("// Contents subject to change without notice.");  p.pln();  if (!packageName.equals("")) {    p.pln("package " + packageName + ";");    p.pln();  }  p.plnI("public final class " + stubClassSimpleName);  p.pln("extends " + REMOTE_STUB);  ClassDoc[] remoteInterfaces=remoteClass.remoteInterfaces();  if (remoteInterfaces.length > 0) {    p.p("implements ");    for (int i=0; i < remoteInterfaces.length; i++) {      if (i > 0) {        p.p(", ");      }      p.p(remoteInterfaces[i].qualifiedName());    }    p.pln();  }  p.pOlnI("{");  if (version == StubVersion.V1_1 || version == StubVersion.VCOMPAT) {    writeOperationsArray(p);    p.pln();    writeInterfaceHash(p);    p.pln();  }  if (version == StubVersion.VCOMPAT || version == StubVersion.V1_2) {    p.pln("private static final long serialVersionUID = " + STUB_SERIAL_VERSION_UID + ";");    p.pln();    if (methodFieldNames.length > 0) {      if (version == StubVersion.VCOMPAT) {        p.pln("private static boolean useNewInvoke;");      }      writeMethodFieldDeclarations(p);      p.pln();      p.plnI("static {");      p.plnI("try {");      if (version == StubVersion.VCOMPAT) {        p.plnI(REMOTE_REF + ".class.getMethod(\"invoke\",");        p.plnI("new java.lang.Class[] {");        p.pln(REMOTE + ".class,");        p.pln("java.lang.reflect.Method.class,");        p.pln("java.lang.Object[].class,");        p.pln("long.class");        p.pOln("});");        p.pO();        p.pln("useNewInvoke = true;");      }      writeMethodFieldInitializers(p);      p.pOlnI("} catch (java.lang.NoSuchMethodException e) {");      if (version == StubVersion.VCOMPAT) {        p.pln("useNewInvoke = false;");      } else {        p.plnI("throw new java.lang.NoSuchMethodError(");        p.pln("\"stub class initialization failed\");");        p.pO();      }      p.pOln("}");      p.pOln("}");      p.pln();    }  }  writeStubConstructors(p);  p.pln();  if (remoteMethods.length > 0) {    p.pln("// methods from remote interfaces");    for (int i=0; i < remoteMethods.length; ++i) {      p.pln();      writeStubMethod(p,i);    }  }  p.pOln("}");}  }
class C{  public T caseParameterizedTypeRefStructural(ParameterizedTypeRefStructural object){  return null;}  }
class C{  private void validateSystemJobRunRequest(SystemJobRunRequest request){  Assert.hasText(request.getJobName(),"A job name must be specified.");  request.setJobName(request.getJobName().trim());  parameterHelper.validateParameters(request.getParameters());}  }
class C{  public void addKdContainer(int index,double dist){  KdistanceContainer container=new KdistanceContainer(this);  container.setDistance(dist);  this.listOfkDContainers.add(index,container);}  }
class C{  public Buddy(String name){  this.name=name;}  }
class C{  public static int floatCompare(float a,float b,float precision){  if (java.lang.Math.abs(a - b) <= precision)   return 0; else   if (a > b)   return 1; else   return -1;}  }
class C{  private static void checkValidImportableFile(PsiElement anchor,VirtualFile file){  final QualifiedName qName=QualifiedNameFinder.findShortestImportableQName(anchor,file);  if (!PyClassRefactoringUtil.isValidQualifiedName(qName)) {    throw new IncorrectOperationException(PyBundle.message("refactoring.move.module.members.error.cannot.use.module.name.$0",file.getName()));  }}  }
class C{  public void testSplit(){  DoubleBuffer buffer=new DoubleBuffer(10);  for (int i=0; i < 5; i++) {    buffer.setNext(-10);    assertFalse(buffer.isFull());    assertEquals(-10.0,buffer.getAverage());    double[] averageAndVariance=buffer.getAverageAndVariance();    assertEquals(-10.0,averageAndVariance[0]);    assertEquals(0.0,averageAndVariance[1]);  }  for (int i=1; i < 5; i++) {    buffer.setNext(10);    assertFalse(buffer.isFull());    double expectedAverage=((i * 10.0) - 50.0) / (i + 5);    assertEquals(buffer.toString(),expectedAverage,buffer.getAverage(),0.01);    double[] averageAndVariance=buffer.getAverageAndVariance();    assertEquals(expectedAverage,averageAndVariance[0]);  }  buffer.setNext(10);  assertTrue(buffer.isFull());  assertEquals(0.0,buffer.getAverage());  double[] averageAndVariance=buffer.getAverageAndVariance();  assertEquals(0.0,averageAndVariance[0]);  assertEquals(100.0,averageAndVariance[1]);}  }
class C{  final public void EscapedDirective() throws ParseException {  ASTEscapedDirective jjtn000=new ASTEscapedDirective(this,JJTESCAPEDDIRECTIVE);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {    Token t=null;    t=jj_consume_token(ESCAPE_DIRECTIVE);    jjtree.closeNodeScope(jjtn000,true);    jjtc000=false;    t.image=escapedDirective(t.image);  }  finally {    if (jjtc000) {      jjtree.closeNodeScope(jjtn000,true);    }  }}  }
class C{  protected boolean isDirty(String location){  return VacuumEnvironment.LocationState.Dirty == getVacuumEnv().getLocationState(location);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static List<String> evaluateExpansionPattern(String part,boolean enhancedSyntax){  List<String> stringList=StringUtil.split(part,",",true,false);  List<String> result=new LinkedList<String>();  if (stringList.size() == 1 && stringList.get(0).contains("..")) {    if (!evaluateRangeExpression(stringList.get(0),result,enhancedSyntax)) {      return Collections.emptyList();    }  } else {    for (    String e : stringList) {      result.add(e);    }  }  return result;}  }
class C{  protected final long buildTookInMillis(DfsOnlyRequest request){  return Math.max(1,System.currentTimeMillis() - request.nowInMillis);}  }
class C{  public JMenu createAlignMenu(){  JMenu alignSubMenu=new JMenu("Align");  alignSubMenu.add(actionManager.getAlignHorizontalAction());  alignSubMenu.add(actionManager.getAlignVerticalAction());  return alignSubMenu;}  }
class C{  public CallInfoHeader createCallInfoHeader(URI callInfo){  if (callInfo == null)   throw new NullPointerException("null arg callInfo");  CallInfo c=new CallInfo();  c.setInfo(callInfo);  return c;}  }
class C{  public String toString(String pattern){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).print(this);}  }
class C{  private boolean isIntersect(){  return Math.sqrt(Math.pow(circle1.getCenterX() - circle2.getCenterX(),2) + Math.pow(circle1.getCenterY() - circle2.getCenterY(),2)) <= circle1.getRadius() + circle2.getRadius();}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case android.R.id.home:    if (conversationLayout.getVisibility() == LinearLayout.VISIBLE) {      hideConversationLayout();      invalidateOptionsMenu();      swipeRefresh.setEnabled(true);      refreshActivity();    } else {      Intent intent=new Intent(this,MainActivity.class);      startActivity(intent);    }  break;case R.id.refresh:if (isFirstTimeRefresh) {  isFirstTimeRefresh=false;  tinydb.putBoolean("isFirstTimeRefresh",isFirstTimeRefresh);  Toast.makeText(getApplicationContext(),"You can also swipe down to refresh.",Toast.LENGTH_SHORT).show();  refreshActivity();} else {  refreshActivity();}break;case R.id.edit:editServer();break;case R.id.delete:Intent deleteServer=new Intent(this,MainActivity.class);deleteServer.putExtra("serverId",serverId);recentList.clear();pinnedRooms.clear();saveRecentItems();savePinnedItems();startActivity(deleteServer);break;case R.id.disconnect:server.setStatus(Status.DISCONNECTED);server.setMayReconnect(false);binder.getService().getConnection(serverId).quitServer();server.clearConversations();setResult(RESULT_OK);invalidateOptionsMenu();if (Math.random() * 100 < 80) {showAd();}break;case R.id.close:Conversation conversationToClose=pagerAdapter.getItem(pager.getCurrentItem());if (conversationToClose.getType() == Conversation.TYPE_CHANNEL) {binder.getService().getConnection(serverId).partChannel(conversationToClose.getName());if (Math.random() * 100 < 50) {showAd();}} else if (conversationToClose.getType() == Conversation.TYPE_QUERY) {server.removeConversation(conversationToClose.getName());onRemoveConversation(conversationToClose.getName());if (Math.random() * 100 < 50) {showAd();}} else {Toast.makeText(this,getResources().getString(R.string.close_server_window),Toast.LENGTH_SHORT).show();}break;case R.id.join:startActivityForResult(new Intent(this,JoinActivity.class),REQUEST_CODE_JOIN);break;case R.id.users:Conversation conversationForUserList=pagerAdapter.getItem(pager.getCurrentItem());if (conversationForUserList.getType() == Conversation.TYPE_CHANNEL) {Intent intent=new Intent(this,UsersActivity.class);intent.putExtra(Extra.USERS,binder.getService().getConnection(server.getId()).getUsersAsStringArray(conversationForUserList.getName()));startActivityForResult(intent,REQUEST_CODE_USERS);} else {Toast.makeText(this,getResources().getString(R.string.only_usable_from_channel),Toast.LENGTH_SHORT).show();}break;}return true;}  }
class C{  private static void checkStoragePoolValidForUnManagedVolumeUri(StringSetMap unManagedVolumeInformation,DbClient dbClient,URI unManagedVolumeUri) throws APIException {  String pool=PropertySetterUtil.extractValueFromStringSet(VolumeObjectProperties.STORAGE_POOL.toString(),unManagedVolumeInformation);  if (null == pool) {    throw APIException.internalServerErrors.storagePoolError("",VOLUME_TEXT,unManagedVolumeUri);  }  StoragePool poolObj=dbClient.queryObject(StoragePool.class,URI.create(pool));  if (null == poolObj) {    throw APIException.internalServerErrors.noStoragePool(pool,VOLUME_TEXT,unManagedVolumeUri);  }}  }
class C{  void dispose() throws IOException {  _httpClient.close();  _httpContext.clear();}  }
class C{  public void close(RelayedCandidateDatagramSocket relayedCandidateSocket){  setSendKeepAliveMessageInterval(SEND_KEEP_ALIVE_MESSAGE_INTERVAL_NOT_SPECIFIED);  try {    sendRequest(MessageFactory.createRefreshRequest(0),false,null);  } catch (  StunException sex) {    logger.log(Level.INFO,"Failed to send TURN Refresh request to delete Allocation",sex);  }}  }
class C{  public static byte[] decodeHex(final char[] data){  final int len=data.length;  if ((len & 0x01) != 0) {    throw new IllegalArgumentException("Odd number of characters.");  }  final byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  public File createMergeProcedure(File dir,String loadName){  StringBuffer code=new StringBuffer();  code.append("function prepare() {\n").append("  dir = runtime.getContext().getServiceName();\n").append("  runtime.exec('echo prepare >> ' + dir + '/prepare.stat');\n").append("}\n").append("function begin() {\n").append("  runtime.exec('echo begin >> ' + dir + '/begin.stat');\n").append("}\n").append("function apply(csvinfo) {\n").append("  logger.info('Applying csv: table=' + csvinfo.baseTableMetadata.getName());").append("  if (csvinfo.key == '') {\n").append("    output_csv = csvinfo.baseTableMetadata.getName() + '.data';\n").append("  } else {\n").append("    output_csv = csvinfo.baseTableMetadata.getName() + '-' + csvinfo.key + '.data';\n").append("  }\n").append("  runtime.exec('echo ' + csvinfo.file.getName() + " + "'>> ' + dir + '/apply.stat');\n").append("  runtime.exec('cat ' + csvinfo.file.getAbsolutePath() + ' >> '").append("     + dir + '/' + output_csv);\n").append("}\n").append("function commit() {\n").append("  runtime.exec('echo commit >> ' + dir + '/commit.stat');\n").append("}\n").append("function release() {\n").append("  runtime.exec('echo release >> ' + dir + '/release.stat');\n").append("}");  File scriptFile=new File(dir,loadName);  fileIO.write(new FilePath(scriptFile.getAbsolutePath()),code.toString());  return scriptFile;}  }
class C{  public SimpleConstant(String name,String stringValue,String annotation){  this(name,stringValue);  this.annotation=annotation;}  }
class C{  public DeprecatedAttribute(ConstPool cp){  super(cp,tag,new byte[0]);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.378 -0500",hash_original_method="C1264636A1B4EA8B9B687011C8022954",hash_generated_method="C1264636A1B4EA8B9B687011C8022954") AttributeListAdapter(){}  }
class C{  public void loadSelfFile(URL url,String encoding,boolean debug){  try {    loadSelfFile(Utils.openStream(url),encoding,MAX_FILE_SIZE,debug,true);  } catch (  IOException exception) {    throw new SelfParseException("Parsing error occurred",exception);  }}  }
class C{  @Override public V remove(Object key){  int hash=hash(key);  return segmentFor(hash).r(key,hash,null);}  }
class C{  public boolean canBeLongAddress(int address){  return (address >= 1);}  }
class C{  private void performSend(WalletData perWalletModelData,SendRequest sendRequest,CharSequence walletPassword){  String message=null;  boolean sendWasSuccessful=Boolean.FALSE;  try {    if (sendRequest != null && sendRequest.tx != null) {      log.debug("Sending from wallet " + perWalletModelData.getWalletFilename() + ", tx = "+ sendRequest.tx.toString());    }    if (useTestParameters) {      log.debug("Using test parameters - not really sending");      if (sayTestSendWasSuccessful) {        sendWasSuccessful=Boolean.TRUE;        log.debug("Using test parameters - saying send was successful");      } else {        message="test - send failed";        log.debug("Using test parameters - saying send failed");      }    } else {      transaction=this.bitcoinController.getMultiBitService().sendCoins(perWalletModelData,sendRequest,walletPassword);      if (transaction == null) {        message=controller.getLocaliser().getString("sendBitcoinNowAction.thereWereInsufficientFundsForTheSend");        log.error(message);      } else {        sendWasSuccessful=Boolean.TRUE;        log.debug("Sent transaction was:\n" + transaction.toString());      }    }  } catch (  KeyCrypterException e) {    log.error(e.getMessage(),e);    message=e.getMessage();  }catch (  WalletSaveException e) {    log.error(e.getMessage(),e);    message=e.getMessage();  }catch (  IOException e) {    log.error(e.getMessage(),e);    message=e.getMessage();  }catch (  AddressFormatException e) {    log.error(e.getMessage(),e);    message=e.getMessage();  }catch (  IllegalStateException e) {    log.error(e.getMessage(),e);    message=controller.getLocaliser().getString("sendBitcoinNowAction.pingFailure");  }catch (  Exception e) {    log.error(e.getMessage(),e);    message=e.getMessage();  } finally {    try {      this.bitcoinController.getFileHandler().savePerWalletModelData(perWalletModelData,false);    } catch (    WalletSaveException e) {      log.error(e.getMessage(),e);      message=e.getMessage();    }    if (sendWasSuccessful) {      String successMessage=controller.getLocaliser().getString("sendBitcoinNowAction.bitcoinSentOk");      if (sendBitcoinConfirmPanel != null && (sendBitcoinConfirmPanel.isVisible() || useTestParameters)) {        sendBitcoinConfirmPanel.setMessageText(controller.getLocaliser().getString("sendBitcoinNowAction.bitcoinSentOk"));        sendBitcoinConfirmPanel.showOkButton();        sendBitcoinConfirmPanel.clearAfterSend();      } else {        MessageManager.INSTANCE.addMessage(new Message(successMessage));      }    } else {      log.error(message);      if (message != null && message.length() > MAX_LENGTH_OF_ERROR_MESSAGE) {        message=message.substring(0,MAX_LENGTH_OF_ERROR_MESSAGE) + "...";      }      String errorMessage=controller.getLocaliser().getString("sendBitcoinNowAction.bitcoinSendFailed");      if (sendBitcoinConfirmPanel != null && (sendBitcoinConfirmPanel.isVisible() || useTestParameters)) {        sendBitcoinConfirmPanel.setMessageText(errorMessage,message);      } else {        MessageManager.INSTANCE.addMessage(new Message(errorMessage + " " + message));      }    }    perWalletModelData.setBusyTaskKey(null);    perWalletModelData.setBusy(false);    this.bitcoinController.fireWalletBusyChange(false);    log.debug("firing fireRecreateAllViews...");    controller.fireRecreateAllViews(false);    log.debug("firing fireRecreateAllViews...done");  }}  }
class C{  protected void removeAttribute(Object id){  if (attributes != null) {    attributes.remove(id);    if (attributes.isEmpty()) {      attributes=null;    }  }}  }
class C{  public static <T>Filter<T> collectionRejectFilter(Collection<T> objs){  return new CollectionAcceptFilter<T>(objs,false);}  }
class C{  @Override public CreditCard menuItem(@AnyRes int menuItem){  if (menuItem == 0) {    Log.e("MenuItem","Impossible to set Menu Item to 0! Please Check it");  } else {    mMenuItem=menuItem;    isMenuItem=true;  }  return this;}  }
class C{  @Override public void acceptDataSet(DataSetEvent e){  m_busy=true;  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + "Processing batch...");  }  try {    makeOutputStructure(new Instances(e.getDataSet(),0));  } catch (  Exception ex) {    String msg=statusMessagePrefix() + "ERROR: unable to create output instances structure.";    if (m_log != null) {      m_log.statusMessage(msg);      m_log.logMessage("[SubstringLabeler] " + ex.getMessage());    }    stop();    ex.printStackTrace();    m_busy=false;    return;  }  Instances toProcess=e.getDataSet();  for (int i=0; i < toProcess.numInstances(); i++) {    Instance current=toProcess.instance(i);    Instance result=null;    try {      result=m_matches.makeOutputInstance(current,true);    } catch (    Exception ex) {      ex.printStackTrace();    }    if (result != null) {      m_matches.getOutputStructure().add(result);    }  }  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + "Finished.");  }  DataSetEvent d=new DataSetEvent(this,m_matches.getInputStructure());  notifyDataListeners(d);  m_busy=false;}  }
class C{  @Override public String generateOutput(boolean textOnly){  Element figcaption=DomUtil.cloneAndProcessTree(figCaption);  if (textOnly)   return DomUtil.getInnerText(figcaption);  Element figure=Document.get().createElement("FIGURE");  figure.appendChild(getProcessedNode());  if (!figCaption.getInnerHTML().isEmpty()) {    figure.appendChild(figcaption);  }  return figure.getString();}  }
class C{  public static void decimal(TextField campo){  campo.lengthProperty().addListener(null);}  }
class C{  protected void compareDatasets(Instances data1,Instances data2) throws Exception {  if (m_CheckHeader) {    if (!data2.equalHeaders(data1)) {      throw new Exception("header has been modified\n" + data2.equalHeadersMsg(data1));    }  }  if (!(data2.numInstances() == data1.numInstances())) {    throw new Exception("number of instances has changed");  }  for (int i=0; i < data2.numInstances(); i++) {    Instance orig=data1.instance(i);    Instance copy=data2.instance(i);    for (int j=0; j < orig.numAttributes(); j++) {      if (orig.isMissing(j)) {        if (!copy.isMissing(j)) {          throw new Exception("instances have changed");        }      } else {        if (m_CompareValuesAsString) {          if (!orig.toString(j).equals(copy.toString(j))) {            throw new Exception("instances have changed");          }        } else {          if (Math.abs(orig.value(j) - copy.value(j)) > m_MaxDiffValues) {            throw new Exception("instances have changed");          }        }      }      if (Math.abs(orig.weight() - copy.weight()) > m_MaxDiffWeights) {        throw new Exception("instance weights have changed");      }    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:20.722 -0500",hash_original_method="13DD8DB959754AD57AB3077389D7ADB3",hash_generated_method="60ED6C262BC16DB52818D9B130F3CC52") private static int upperIndex(int ch){  int index=-1;  if (ch >= 0xdf) {    if (ch <= 0x587) {switch (ch) {case 0xdf:        return 0;case 0x149:      return 1;case 0x1f0:    return 2;case 0x390:  return 3;case 0x3b0:return 4;case 0x587:return 5;}} else if (ch >= 0x1e96) {if (ch <= 0x1e9a) {index=6 + ch - 0x1e96;} else if (ch >= 0x1f50 && ch <= 0x1ffc) {index=upperValues2[ch - 0x1f50];if (index == 0) {index=-1;}} else if (ch >= 0xfb00) {if (ch <= 0xfb06) {index=90 + ch - 0xfb00;} else if (ch >= 0xfb13 && ch <= 0xfb17) {index=97 + ch - 0xfb13;}}}}return index;}  }
class C{  protected void readBinaryChildren(ClassFile classFile,HashMap newElements,IBinaryType typeInfo){  ArrayList childrenHandles=new ArrayList();  BinaryType type=(BinaryType)classFile.getType();  ArrayList typeParameterHandles=new ArrayList();  if (typeInfo != null) {    generateAnnotationsInfos(type,typeInfo.getAnnotations(),typeInfo.getTagBits(),newElements);    generateTypeParameterInfos(type,typeInfo.getGenericSignature(),newElements,typeParameterHandles);    generateFieldInfos(type,typeInfo,newElements,childrenHandles);    generateMethodInfos(type,typeInfo,newElements,childrenHandles,typeParameterHandles);    generateInnerClassHandles(type,typeInfo,childrenHandles);  }  this.binaryChildren=new JavaElement[childrenHandles.size()];  childrenHandles.toArray(this.binaryChildren);  int typeParameterHandleSize=typeParameterHandles.size();  if (typeParameterHandleSize == 0) {    this.typeParameters=TypeParameter.NO_TYPE_PARAMETERS;  } else {    this.typeParameters=new ITypeParameter[typeParameterHandleSize];    typeParameterHandles.toArray(this.typeParameters);  }}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.config(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("C_BPartner_ID")) {    loadRMA();  }  dialog.tableChanged(null);}  }
class C{  public int showDialog(Instances inst){  setInstances(inst);  return showDialog();}  }
class C{  public void cancel(){  MsgManager.getInstance().clearMsg(this);}  }
class C{  public boolean match(CRL crl){  if (!(crl instanceof X509CRL)) {    return false;  }  X509CRL crlist=(X509CRL)crl;  if ((issuerNames != null) && !(issuerNames.contains(crlist.getIssuerX500Principal().getName(X500Principal.CANONICAL)))) {    return false;  }  if ((minCRL != null) || (maxCRL != null)) {    try {      byte[] bytes=crlist.getExtensionValue("2.5.29.20");      bytes=(byte[])ASN1OctetString.getInstance().decode(bytes);      BigInteger crlNumber=new BigInteger((byte[])ASN1Integer.getInstance().decode(bytes));      if ((minCRL != null) && (crlNumber.compareTo(minCRL) < 0)) {        return false;      }      if ((maxCRL != null) && (crlNumber.compareTo(maxCRL) > 0)) {        return false;      }    } catch (    IOException e) {      return false;    }  }  if (dateAndTime != -1) {    Date thisUp=crlist.getThisUpdate();    Date nextUp=crlist.getNextUpdate();    if ((thisUp == null) || (nextUp == null)) {      return false;    }    if ((dateAndTime < thisUp.getTime()) || (dateAndTime > nextUp.getTime())) {      return false;    }  }  return true;}  }
class C{  public INNER_JOIN INNER_JOIN(String tableToJoin){  return new INNER_JOIN(this,tableToJoin);}  }
class C{  public String toString(){  return (attributeValue.toString());}  }
class C{  public Map flatten(Map target){  if (target == null)   target=new ConfigObject();  populate("",target,this);  return target;}  }
class C{  public static long[] shiftRightI(long[] v,int off){  if (off == 0) {    return v;  }  if (off < 0) {    return shiftLeftI(v,-off);  }  final int shiftWords=off >>> LONG_LOG2_SIZE;  final int shiftBits=off & LONG_LOG2_MASK;  if (shiftWords >= v.length) {    return zeroI(v);  }  if (shiftBits == 0) {    System.arraycopy(v,shiftWords,v,0,v.length - shiftWords);    Arrays.fill(v,v.length - shiftWords,v.length,0);    return v;  }  final int unshiftBits=Long.SIZE - shiftBits;  for (int i=0; i < v.length - shiftWords - 1; i++) {    final int src=i + shiftWords;    v[i]=(v[src + 1] << unshiftBits) | (v[src] >>> shiftBits);  }  v[v.length - shiftWords - 1]=v[v.length - 1] >>> shiftBits;  Arrays.fill(v,v.length - shiftWords,v.length,0);  return v;}  }
class C{  void remove(SuperCardToast superCardToast){  mList.remove(superCardToast);}  }
class C{  private void insert(ByteString byteString){  int depthBin=getDepthBinForLength(byteString.size());  int binEnd=minLengthByDepth[depthBin + 1];  if (prefixesStack.isEmpty() || prefixesStack.peek().size() >= binEnd) {    prefixesStack.push(byteString);  } else {    int binStart=minLengthByDepth[depthBin];    ByteString newTree=prefixesStack.pop();    while (!prefixesStack.isEmpty() && prefixesStack.peek().size() < binStart) {      ByteString left=prefixesStack.pop();      newTree=new RopeByteString(left,newTree);    }    newTree=new RopeByteString(newTree,byteString);    while (!prefixesStack.isEmpty()) {      depthBin=getDepthBinForLength(newTree.size());      binEnd=minLengthByDepth[depthBin + 1];      if (prefixesStack.peek().size() < binEnd) {        ByteString left=prefixesStack.pop();        newTree=new RopeByteString(left,newTree);      } else {        break;      }    }    prefixesStack.push(newTree);  }}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.btnSelect) {    List<IContact> contacts=contactSelectedAdapter.getSelectedContacts();    if (option.allowSelectEmpty || checkMinMaxSelection(contacts.size())) {      ArrayList<String> selectedAccounts=new ArrayList<>();      for (      IContact c : contacts) {        selectedAccounts.add(c.getContactId());      }      onSelected(selectedAccounts);    }  }}  }
class C{  public static ObjectMetadata parseObjectMetadata(Map<String,String> headers) throws ResponseParseException {  try {    ObjectMetadata objectMetadata=new ObjectMetadata();    for (Iterator<String> it=headers.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      if (key.indexOf(OSSHeaders.OSS_USER_METADATA_PREFIX) >= 0) {        key=key.substring(OSSHeaders.OSS_USER_METADATA_PREFIX.length());        objectMetadata.addUserMetadata(key,headers.get(OSSHeaders.OSS_USER_METADATA_PREFIX + key));      } else       if (key.equals(OSSHeaders.LAST_MODIFIED) || key.equals(OSSHeaders.DATE)) {        try {          objectMetadata.setHeader(key,DateUtil.parseRfc822Date(headers.get(key)));        } catch (        ParseException pe) {          throw new ResponseParseException(pe.getMessage(),pe);        }      } else       if (key.equals(OSSHeaders.CONTENT_LENGTH)) {        Long value=Long.valueOf(headers.get(key));        objectMetadata.setHeader(key,value);      } else       if (key.equals(OSSHeaders.ETAG)) {        objectMetadata.setHeader(key,trimQuotes(headers.get(key)));      } else {        objectMetadata.setHeader(key,headers.get(key));      }    }    return objectMetadata;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public void clearRect(int x,int y,int width,int height){  Rectangle2D.Float rect=new Rectangle2D.Float(x,y,width,height);  addDrawingRect(rect);  mPrintMetrics.clear(this);}  }
class C{  protected void checkTransactionalRead(TransactionConcurrency concurrency,TransactionIsolation isolation) throws IgniteCheckedException {  IgniteCache<String,Integer> cache=jcache(0);  cache.clear();  Transaction tx=grid(0).transactions().txStart(concurrency,isolation);  try {    cache.put("key",1);    assertEquals("Invalid value after put",1,cache.get("key").intValue());    tx.commit();  }  finally {    tx.close();  }  assertEquals("Invalid cache size after put",1,cache.size());  try {    tx=grid(0).transactions().txStart(concurrency,isolation);    assertEquals("Invalid value inside transactional read",Integer.valueOf(1),cache.get("key"));    tx.commit();  }  finally {    tx.close();  }}  }
class C{  protected String computeRemoteAddress() throws MessagingException, UnknownHostException {  String domain=getRemoteDomain();  String address;  String validatedAddress;  int ipAddressStart=domain.indexOf('[');  int ipAddressEnd=-1;  if (ipAddressStart > -1) {    ipAddressEnd=domain.indexOf(']',ipAddressStart);  } else {    ipAddressStart=domain.indexOf('(');    if (ipAddressStart > -1) {      ipAddressEnd=domain.indexOf(')',ipAddressStart);    }  }  if (ipAddressEnd > -1) {    address=domain.substring(ipAddressStart + 1,ipAddressEnd);  } else {    int hostNameEnd=domain.indexOf(' ');    if (hostNameEnd == -1)     hostNameEnd=domain.length();    address=domain.substring(0,hostNameEnd);  }  validatedAddress=getDNSServer().getByName(address).getHostAddress();  return validatedAddress;}  }
class C{  private void testUpload(final int size,final boolean useFileStorage) throws TimeoutException {  mWaiter=new Waiter();  if (useFileStorage) {    mSocket.setUploadStorageType(UploadStorageType.FILE_STORAGE);  }  mSocket.startUpload(SPEED_TEST_SERVER_HOST,SPEED_TEST_SERVER_PORT,SPEED_TEST_SERVER_URI_UL,size);  mWaiter.await(WAITING_TIMEOUT_LONG_OPERATION,SECONDS);  testTransferRate();  mSocket.forceStopTask();}  }
class C{  public void openKeyStore(File keyStoreFile,String defaultPassword){  try {    if (!keyStoreFile.isFile()) {      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NotFile.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    if (isKeyStoreFileOpen(keyStoreFile)) {      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NoOpenKeyStoreAlreadyOpen.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    Password password=(defaultPassword != null) ? new Password(defaultPassword.toCharArray()) : null;    KeyStore openedKeyStore=null;    boolean firstTry=true;    while (true) {      if (password == null) {        password=showPasswordDialog(keyStoreFile);      }      if (password == null) {        return;      }      try {        openedKeyStore=KeyStoreUtil.load(keyStoreFile,password);        break;      } catch (      KeyStoreLoadException klex) {        if (defaultPassword == null || !firstTry) {          int tryAgainChoice=showErrorMessage(keyStoreFile,klex);          if (tryAgainChoice == JOptionPane.NO_OPTION) {            return;          }        }      }      password.nullPassword();      password=null;      firstTry=false;    }    if (openedKeyStore == null) {      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.FileNotRecognisedType.message"),keyStoreFile.getName()),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    kseFrame.addKeyStore(openedKeyStore,keyStoreFile,password);  } catch (  FileNotFoundException ex) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NoReadFile.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void install(JFormattedTextField ftf){  super.install(ftf);  if (ftf != null) {    Object value=ftf.getValue();    try {      stringToValue(valueToString(value));    } catch (    ParseException pe) {      setEditValid(false);    }  }}  }
class C{  public SIRtree(){  this(10);}  }
class C{  @NotNull public static <Type extends PsiElement>Type addBlockIntoParent(@NotNull Type statement) throws IncorrectOperationException {  PsiElement parent=statement.getParent();  PsiElement child=statement;  while (!(parent instanceof GrLoopStatement) && !(parent instanceof GrIfStatement) && !(parent instanceof GrVariableDeclarationOwner)&& parent != null) {    parent=parent.getParent();    child=child.getParent();  }  if (parent instanceof GrWhileStatement && child == ((GrWhileStatement)parent).getCondition() || parent instanceof GrIfStatement && child == ((GrIfStatement)parent).getCondition()) {    parent=parent.getParent();  }  assert parent != null;  if (parent instanceof GrVariableDeclarationOwner) {    return statement;  }  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(statement.getProject());  PsiElement tempStmt=statement;  while (parent != tempStmt.getParent()) {    tempStmt=tempStmt.getParent();  }  GrStatement toAdd=(GrStatement)tempStmt.copy();  GrBlockStatement blockStatement=factory.createBlockStatement();  if (parent instanceof GrLoopStatement) {    ((GrLoopStatement)parent).replaceBody(blockStatement);  } else {    GrIfStatement ifStatement=(GrIfStatement)parent;    if (tempStmt == ifStatement.getThenBranch()) {      ifStatement.replaceThenBranch(blockStatement);    } else     if (tempStmt == ifStatement.getElseBranch()) {      ifStatement.replaceElseBranch(blockStatement);    }  }  GrStatement result=blockStatement.getBlock().addStatementBefore(toAdd,null);  if (result instanceof GrReturnStatement) {    statement=(Type)((GrReturnStatement)result).getReturnValue();  } else {    statement=(Type)result;  }  return statement;}  }
class C{  private static void writeMajorStatisticsString(BufferedWriter output,SAZone zone) throws IOException {  output.write(zone.getName());  output.write(delimiter);  output.write(String.valueOf(zone.getMajorActivityCount()));  output.write(delimiter);  for (int i=0; i < 24; i++) {    output.write(String.valueOf(zone.getMajorActivityCountDetail(i)));    output.write(delimiter);  }  for (int i=0; i < 23; i++) {    output.write(String.valueOf(zone.getMajorActivityDurationDetail(i)));    output.write(delimiter);  }  output.write(String.valueOf(zone.getMajorActivityDurationDetail(23)));}  }
class C{  private boolean isAlphaUsedForScale(){  return android.os.Build.VERSION.SDK_INT < 11;}  }
class C{  @SuppressWarnings("deprecation") private void configBluetoothSensor(){  ListPreference preference=(ListPreference)findPreference(getString(R.string.bluetooth_sensor_key));  String value=PreferencesUtils.getString(this,R.string.bluetooth_sensor_key,PreferencesUtils.BLUETOOTH_SENSOR_DEFAULT);  List<String> optionsList=new ArrayList<String>();  List<String> valuesList=new ArrayList<String>();  BluetoothAdapter bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  if (bluetoothAdapter != null) {    BluetoothDeviceUtils.populateDeviceLists(bluetoothAdapter,optionsList,valuesList);  }  String[] options=optionsList.toArray(new String[optionsList.size()]);  String[] values=valuesList.toArray(new String[valuesList.size()]);  if (valuesList.size() == 1) {    if (!valuesList.get(0).equals(value)) {      value=valuesList.get(0);      PreferencesUtils.setString(this,R.string.bluetooth_sensor_key,value);    }  } else {    if (!valuesList.contains(value)) {      value=PreferencesUtils.BLUETOOTH_SENSOR_DEFAULT;      PreferencesUtils.setString(this,R.string.bluetooth_sensor_key,value);    }  }  configureListPreference(preference,options,options,values,value,null);}  }
class C{  @Override public void onViewCreated(View view,Bundle savedInstanceState){  super.onViewCreated(view,savedInstanceState);  ensureList();}  }
class C{  public void writeUint64(long n){  check(8);  buffer[write_pos++]=(byte)((n & 0x00ff00000000000000L) >> 56);  buffer[write_pos++]=(byte)((n & 0x00ff000000000000L) >> 48);  buffer[write_pos++]=(byte)((n & 0x00ff0000000000L) >> 40);  buffer[write_pos++]=(byte)((n & 0x00ff00000000L) >> 32);  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public ClientHello(SecureRandom sr,byte[] version,byte[] ses_id,CipherSuite[] cipher_suite){  client_version=version;  long gmt_unix_time=System.currentTimeMillis() / 1000;  sr.nextBytes(random);  random[0]=(byte)(gmt_unix_time & 0xFF000000 >>> 24);  random[1]=(byte)(gmt_unix_time & 0xFF0000 >>> 16);  random[2]=(byte)(gmt_unix_time & 0xFF00 >>> 8);  random[3]=(byte)(gmt_unix_time & 0xFF);  session_id=ses_id;  this.cipher_suites=cipher_suite;  compression_methods=new byte[]{0};  length=38 + session_id.length + (this.cipher_suites.length << 1)+ compression_methods.length;}  }
class C{  private void releaseWakeLock(){  if (wakeLock != null && wakeLock.isHeld()) {    wakeLock.release();    wakeLock=null;  }}  }
class C{  @Override public byte[] executeAttack(){  byte[] paddedDecryptedData=new byte[encryptedData.length - blockSize];  int lastBlockLength=0;  int blockPairNumber=(encryptedData.length / blockSize) - 1;  FindIVMethodProperties.Type type=FindIVMethodProperties.Type.UNDEFINED;  for (int i=0; i < blockPairNumber; i++) {    boolean processingLastBlock=(i == (blockPairNumber - 1));    int start=i * blockSize;    byte[] iv=Arrays.copyOfRange(encryptedData,start,start + blockSize);    byte[] c1=Arrays.copyOfRange(encryptedData,start + blockSize,start + 2 * blockSize);    FindIVMethodSimple fim=new FindIVMethodSimple(m_Oracle,iv,c1,processingLastBlock,type);    byte[] decrypted=fim.executeAttack();    System.arraycopy(decrypted,0,paddedDecryptedData,start,decrypted.length);    lastBlockLength=decrypted.length;    if (type == FindIVMethodProperties.Type.UNDEFINED) {      type=fim.getProperties().getType();    }  }  final int resultLength=paddedDecryptedData.length - blockSize + lastBlockLength;  byte[] result=Arrays.copyOf(paddedDecryptedData,resultLength);  return result;}  }
class C{  public void checkForNullValue(String value){  if (value == null) {    throw new NullPointerException();  }}  }
class C{  private boolean isIPConstrained(byte ip[],byte[] constraint){  int ipLength=ip.length;  if (ipLength != (constraint.length / 2)) {    return false;  }  byte[] subnetMask=new byte[ipLength];  System.arraycopy(constraint,ipLength,subnetMask,0,ipLength);  byte[] permittedSubnetAddress=new byte[ipLength];  byte[] ipSubnetAddress=new byte[ipLength];  for (int i=0; i < ipLength; i++) {    permittedSubnetAddress[i]=(byte)(constraint[i] & subnetMask[i]);    ipSubnetAddress[i]=(byte)(ip[i] & subnetMask[i]);  }  return Arrays.areEqual(permittedSubnetAddress,ipSubnetAddress);}  }
class C{  public void initLayout(){  closePosition=0;  layoutSize=0;  isArranged=false;  isCalculatedSize=false;  savedState=null;  if (isVertical()) {    measure(MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(getHeight(),MeasureSpec.UNSPECIFIED));  } else {    measure(MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(getHeight(),MeasureSpec.EXACTLY));  }}  }
class C{  public static final OCSPResp fromBasicToResp(final BasicOCSPResp basicOCSPResp){  try {    final byte[] encoded=basicOCSPResp.getEncoded();    final OCSPResp ocspResp=fromBasicToResp(encoded);    return ocspResp;  } catch (  IOException e) {    throw new DSSException(e);  }}  }
class C{  public static String random(int count,boolean letters,boolean numbers){  return random(count,0,0,letters,numbers);}  }
class C{  public boolean on(ASN1ObjectIdentifier stem){  String id=getId(), stemId=stem.getId();  return id.length() > stemId.length() && id.charAt(stemId.length()) == '.' && id.startsWith(stemId);}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=false;}  }
class C{  protected void writeEntityToNBT(NBTTagCompound par1NBTTagCompound){}  }
class C{  public boolean userCanViewUser(int connectedUserId,String entidad) throws Exception {  boolean can=false;  try {    can=hasUserAuth(connectedUserId,USER_ACTION_ID_VIEW,Defs.NULL_ID,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public synchronized long waitMinTime(long time,long seqno) throws InterruptedException {  while (head != null && time > head.time) {    wait(1000);  }  if (head == null)   return 0; else   return head.time;}  }
class C{  public void go(OutputStream out) throws IOException {  buildPage().write(out);}  }
class C{  public void run(){  for (  LocalGossipMember member : members.keySet()) {    if (member != me) {      member.startTimeoutTimer();    }  }  try {    passiveGossipThread=passiveGossipThreadClass.getConstructor(GossipManager.class).newInstance(this);    gossipThreadExecutor.execute(passiveGossipThread);    activeGossipThread=activeGossipThreadClass.getConstructor(GossipManager.class).newInstance(this);    gossipThreadExecutor.execute(activeGossipThread);  } catch (  InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e1) {    throw new RuntimeException(e1);  }  GossipService.LOGGER.debug("The GossipService is started.");  while (gossipServiceRunning.get()) {    try {      TimeUnit.MILLISECONDS.sleep(1);    } catch (    InterruptedException e) {      GossipService.LOGGER.warn("The GossipClient was interrupted.");    }  }}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  public final void addToTiersByVarNames(List<String> myNodes){  if (!this.myNodes.containsAll(myNodes)) {    for (    String variable : myNodes) {      if (!checkVarName(variable)) {        throw new IllegalArgumentException("Bad variable name: " + variable);      }      addVariable(variable);    }  }  for (  Object variable : myNodes) {    String MyNode=(String)variable;    int index=MyNode.lastIndexOf(":t");    if (index != -1) {      String substring=MyNode.substring(index + 2);      addToTier(new Integer(substring),MyNode);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.373 -0500",hash_original_method="276C18C659FAD0D183192D3E613DC123",hash_generated_method="BE93730CA41BE33A2A3EB37CEE8379CD") public ViolationInfo(Parcel in,boolean unsetGatheringBit){  crashInfo=new ApplicationErrorReport.CrashInfo(in);  int rawPolicy=in.readInt();  if (unsetGatheringBit) {    policy=rawPolicy & ~PENALTY_GATHER;  } else {    policy=rawPolicy;  }  durationMillis=in.readInt();  violationNumThisLoop=in.readInt();  numAnimationsRunning=in.readInt();  violationUptimeMillis=in.readLong();  numInstances=in.readLong();  broadcastIntentAction=in.readString();  tags=in.readStringArray();}  }
class C{  public boolean exportSelected(){  return exportSelected;}  }
class C{  public ClassPath appendClassPath(String pathname) throws NotFoundException {  return source.appendClassPath(pathname);}  }
class C{  private static void readChar(ByteToChar converter,CharReader is,int ch,boolean isTop) throws IOException {  if (ch == '+') {    if (isTop)     converter.addByte(' '); else     converter.addChar(' ');  } else   if (ch == '%') {    int ch1=is.next();    if (ch1 == 'u') {      ch1=is.next();      int ch2=is.next();      int ch3=is.next();      int ch4=is.next();      converter.addChar((char)((toHex(ch1) << 12) + (toHex(ch2) << 8) + (toHex(ch3) << 4)+ (toHex(ch4))));    } else {      int ch2=is.next();      converter.addByte(((toHex(ch1) << 4) + toHex(ch2)));    }  } else   if (isTop) {    converter.addByte((byte)ch);  } else {    converter.addChar((char)ch);  }}  }
class C{  public MainMenu(TDA listener){  this.listener=listener;  createMenuBar();}  }
class C{  private boolean isHardwareKeyboardPresent(){  Configuration config=getResources().getConfiguration();  boolean returnValue=false;  if (config.keyboard != Configuration.KEYBOARD_NOKEYS) {    returnValue=true;  }  return returnValue;}  }
class C{  public PowerVm(final int id,final int userId,final double mips,final int pesNumber,final int ram,final long bw,final long size,final int priority,final String vmm,final CloudletScheduler cloudletScheduler,final double schedulingInterval){  super(id,userId,mips,pesNumber,ram,bw,size,vmm,cloudletScheduler);  setSchedulingInterval(schedulingInterval);}  }
class C{  public void writeObjectFieldValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  jg.writeRaw(':');}  }
class C{  public static <T>boolean allSatisfy(Iterable<T> iterable,Predicate<? super T> predicate){  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).allSatisfy(predicate);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.allSatisfy((ArrayList<T>)iterable,predicate);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.allSatisfy((List<T>)iterable,predicate);  }  if (iterable != null) {    return IterableIterate.allSatisfy(iterable,predicate);  }  throw new IllegalArgumentException("Cannot perform an allSatisfy on null");}  }
class C{  public MatchQueryBuilder cutoffFrequency(float cutoff){  this.cutoff_Frequency=cutoff;  return this;}  }
class C{  private void injectDiscoveryProfile(AccessProfile accessProfile,StorageSystem system) throws DatabaseException, DeviceControllerException {  StorageProvider provider=getActiveProviderForStorageSystem(system,accessProfile);  populateSMISAccessProfile(accessProfile,provider);  accessProfile.setSystemId(system.getId());  accessProfile.setSystemClazz(system.getClass());  accessProfile.setserialID(system.getSerialNumber());  accessProfile.setSystemType(system.getSystemType());  String namespace=Constants.EMC_NAMESPACE;  if (Type.ibmxiv.name().equals(system.getSystemType())) {    namespace=Constants.IBM_NAMESPACE;  }  accessProfile.setInteropNamespace(namespace);}  }
class C{  private void updateProductInfo(int C_AcctSchema_ID){  log.fine("C_Invoice_ID=" + get_ID());  StringBuffer sql=new StringBuffer("UPDATE M_Product_Costing pc " + "SET (PriceLastInv, TotalInvAmt,TotalInvQty) = " + "(SELECT currencyConvert(il.PriceActual,i.C_Currency_ID,a.C_Currency_ID,i.DateInvoiced,i.C_ConversionType_ID,i.AD_Client_ID,i.AD_Org_ID),"+ " currencyConvert(il.LineNetAmt,i.C_Currency_ID,a.C_Currency_ID,i.DateInvoiced,i.C_ConversionType_ID,i.AD_Client_ID,i.AD_Org_ID),il.QtyInvoiced "+ "FROM C_Invoice i, C_InvoiceLine il, C_AcctSchema a "+ "WHERE i.C_Invoice_ID=il.C_Invoice_ID"+ " AND il.c_invoiceline_id = (SELECT MIN(C_InvoiceLine_ID) FROM C_InvoiceLine il2"+ " WHERE  il2.M_PRODUCT_ID=il.M_PRODUCT_ID AND C_Invoice_ID=").append(get_ID()).append(")" + " AND pc.M_Product_ID=il.M_Product_ID AND pc.C_AcctSchema_ID=a.C_AcctSchema_ID" + " AND pc.C_AcctSchema_ID=").append(C_AcctSchema_ID).append(" AND i.C_Invoice_ID=").append(get_ID()).append(") ").append("WHERE EXISTS (SELECT * " + "FROM C_Invoice i, C_InvoiceLine il, C_AcctSchema a " + "WHERE i.C_Invoice_ID=il.C_Invoice_ID"+ " AND pc.M_Product_ID=il.M_Product_ID AND pc.C_AcctSchema_ID=a.C_AcctSchema_ID"+ " AND pc.C_AcctSchema_ID=").append(C_AcctSchema_ID).append(" AND i.C_Invoice_ID=").append(get_ID()).append(")");  int no=DB.executeUpdate(sql.toString(),getTrxName());  log.fine("M_Product_Costing - Updated=" + no);}  }
class C{  public boolean isDashedLineEnabled(){  return mDashPathEffect == null ? false : true;}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  double[] sums=new double[instance.numClasses()], newProbs;  double numPreds=0;  for (int i=0; i < m_NumIterations; i++) {    if (instance.classAttribute().isNumeric() == true) {      double pred=m_Classifiers[i].classifyInstance(instance);      if (!Utils.isMissingValue(pred)) {        sums[0]+=pred;        numPreds++;      }    } else {      newProbs=m_Classifiers[i].distributionForInstance(instance);      for (int j=0; j < newProbs.length; j++)       sums[j]+=newProbs[j];    }  }  if (instance.classAttribute().isNumeric() == true) {    if (numPreds == 0) {      sums[0]=Utils.missingValue();    } else {      sums[0]/=numPreds;    }    return sums;  } else   if (Utils.eq(Utils.sum(sums),0)) {    return sums;  } else {    Utils.normalize(sums);    return sums;  }}  }
class C{  protected void installDefaultPainter(Style s){  if (s.getBgPainter() == null) {    s.setBgPainter(new BGPainter(s));  }}  }
class C{  public boolean isAfterLast(){  return this.index >= this.rows.size() && this.rows.size() != 0;}  }
class C{  @Override public void shutdown(){  super.shutdown();  disconnect();}  }
class C{  protected int select(double[] array,int[] indices,int left,int right,final int indexStart,int k){  if (left == right) {    return left;  } else {    int middle=partition(array,indices,left,right,indexStart);    if ((middle - left + 1) >= k) {      return select(array,indices,left,middle,indexStart,k);    } else {      return select(array,indices,middle + 1,right,indexStart,k - (middle - left + 1));    }  }}  }
class C{  public void add(Permission permission){  if (isReadOnly())   throw new SecurityException("attempt to add a Permission " + "to a readonly PermissionCollection");  if (!(permission instanceof CryptoPermission))   return;  permissions.addElement(permission);}  }
class C{  public void reset(){  if (rules != null) {    rules.clear();  }  includesCount=excludesCount=0;  blacklist=true;}  }
class C{  public final int valueCount(){  return values.size();}  }
class C{  public IdentityHashMap(int maxSize){  if (maxSize >= 0) {    this.size=0;    threshold=getThreshold(maxSize);    elementData=newElementArray(computeElementArraySize());  } else {    throw new IllegalArgumentException();  }}  }
class C{  public Collection<SynchronizingStorageEngine> values(){  return localStores.values();}  }
class C{  private boolean isPending(BlockMirror mirror){  return !isInactive(mirror) && isNullOrEmpty(mirror.getSynchronizedInstance());}  }
class C{  public void close(){  if (dialog != null) {    dialog.setVisible(false);    dialog.dispose();    dialog=null;    pane=null;    myBar=null;  }}  }
class C{  public static void attach(@NonNull Activity activity){  init(activity.getApplication());  if (sInstance.mStates == null) {    sInstance.mStates=new StateLinkedList(3);  }}  }
class C{  public static <T,X extends Throwable>Tuple3<CompletableFuture<Subscription>,Runnable,CompletableFuture<Boolean>> forEachEvent(final LazyFutureStream<T> stream,final Consumer<? super T> consumerElement,final Consumer<? super Throwable> consumerError,final Runnable onComplete){  final CompletableFuture<Subscription> subscription=new CompletableFuture<>();  final CompletableFuture<Boolean> streamCompleted=new CompletableFuture<>();  return tuple(subscription,null,streamCompleted);}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      mSize+=byteToProcess;      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mSize+=2;mState=STATE_FRAME_HEADER;mBuffer.rewind();writeExifData();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mSize+=2;mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1) {mByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;mState=STATE_JPEG_DATA;} else if (!JpegHeader.isSofMarker(marker)) {out.write(mBuffer.array(),0,4);mSize+=4;mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {out.write(mBuffer.array(),0,4);mSize+=4;mState=STATE_JPEG_DATA;}mBuffer.rewind();}}if (length > 0) {out.write(buffer,offset,length);mSize+=length;}}  }
class C{  public TileEntityElectricMachine(String soundPath,String name,double perTick,int ticksRequired,double maxEnergy){  super(soundPath,name,MekanismUtils.getResource(ResourceType.GUI,"GuiBasicMachine.png"),perTick,ticksRequired,maxEnergy);  configComponent=new TileComponentConfig(this,TransmissionType.ITEM,TransmissionType.ENERGY);  configComponent.addOutput(TransmissionType.ITEM,new SideData("None",EnumColor.GREY,InventoryUtils.EMPTY));  configComponent.addOutput(TransmissionType.ITEM,new SideData("Input",EnumColor.DARK_RED,new int[]{0}));  configComponent.addOutput(TransmissionType.ITEM,new SideData("Energy",EnumColor.DARK_GREEN,new int[]{1}));  configComponent.addOutput(TransmissionType.ITEM,new SideData("Output",EnumColor.DARK_BLUE,new int[]{2}));  configComponent.setConfig(TransmissionType.ITEM,new byte[]{2,1,0,0,0,3});  configComponent.setInputEnergyConfig();  inventory=new ItemStack[4];  upgradeComponent=new TileComponentUpgrade(this,3);  ejectorComponent=new TileComponentEjector(this);  ejectorComponent.setOutputData(TransmissionType.ITEM,configComponent.getOutputs(TransmissionType.ITEM).get(3));}  }
class C{  public boolean isImageDefined(){  return imageDefined;}  }
class C{  public static byte[] combine(final List<byte[]> dataChunks){  int totalSize=0;  for (  final byte[] dataPart : dataChunks) {    totalSize+=dataPart.length;  }  final byte[] data=new byte[totalSize];  int index=0;  for (  final byte[] dataPart : dataChunks) {    System.arraycopy(dataPart,0,data,index,dataPart.length);    index+=dataPart.length;  }  return data;}  }
class C{  public boolean isStateActive(State state){switch (state) {case constOnlyNamedScope_main_region_A:    return stateVector[0] == State.constOnlyNamedScope_main_region_A;case constOnlyNamedScope_main_region_B:  return stateVector[0] == State.constOnlyNamedScope_main_region_B;case constOnlyNamedScope_main_region_C:return stateVector[0] == State.constOnlyNamedScope_main_region_C;default :return false;}}  }
class C{  private static void checkArgs(final long[] min,final long[] max){  if (min == null || max == null || min.length == 0 || max.length == 0) {    throw new IllegalArgumentException("min/max range values cannot be null or empty");  }  if (min.length != max.length) {    throw new IllegalArgumentException("min/max ranges must agree");  }  if (min.length > 4) {    throw new IllegalArgumentException("LongRangeField does not support greater than 4 dimensions");  }}  }
class C{  public final void lazySet(long newValue){  unsafe.putOrderedLong(this,valueOffset,newValue);}  }
class C{  public Word loadWord(){  return new Word(loadArchitecturalWord());}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void executeCommand(HttpServletRequest request,String p_cmd,MobileSessionCtx wsc,WWindowStatus ws){  String p_tab=MobileUtil.getParameter(request,P_Tab);  String p_row=MobileUtil.getParameter(request,P_MR_RowNo);  log.config(p_cmd + " - Tab=" + p_tab+ " - Row="+ p_row);  if (p_row != null && p_row.length() > 0) {    try {      int newRowNo=Integer.parseInt(p_row);      ws.curTab.navigate(newRowNo);      ws.curTab.setSingleRow(true);    } catch (    Exception e) {      log.log(Level.SEVERE,"Parse RowNo=" + p_row,e);    }  } else   if (p_tab != null && p_tab.length() > 0) {    int newTabNo=0;    try {      newTabNo=Integer.parseInt(p_tab);    } catch (    Exception e) {      log.log(Level.SEVERE,"Parse TabNo=" + p_tab,e);    }    if (newTabNo > ws.curTab.getTabNo()) {      ws.mWindow.initTab(newTabNo);      ws.curTab=ws.mWindow.getTab(newTabNo);      ws.curTab.query(false);      ws.curTab.navigate(0);      if (ws.curTab.getRowCount() < 1) {        if (!ws.curTab.dataNew(false))         ws.curTab.dataIgnore();      }    } else     if (newTabNo < ws.curTab.getTabNo()) {      ws.curTab=ws.mWindow.getTab(newTabNo);      ws.curTab.dataRefresh();    }  } else   if (p_cmd.equals("Multi")) {    boolean single=ws.curTab.isSingleRow();    ws.curTab.setSingleRow(!single);    if (single)     ws.curTab.navigate(0);  } else   if (p_cmd.equals("Refresh")) {    ws.curTab.dataRefreshAll();  } else   if (p_cmd.equals("Attachment")) {  } else   if (p_cmd.equals("New")) {    if (!ws.curTab.dataNew(false))     ws.curTab.dataIgnore();  } else   if (p_cmd.equals("Delete")) {    ws.curTab.dataDelete();  } else   if (p_cmd.equals("Save")) {    executeSave(request,wsc,ws);  } else   if (p_cmd.equals("Find")) {    String strSearch=MobileUtil.getParameter(request,"txtSearch");    if (strSearch != null) {      MQuery query=new MQuery();      if (strSearch.length() != 0)       query.addRestriction(m_searchField,MQuery.LIKE,strSearch);      ws.curTab.setQuery(query);      ws.curTab.query(false);      ws.curTab.navigate(0);    }  } else   if (p_cmd.equals("FindAdv")) {  }}  }
class C{  @Override @SuppressWarnings("unchecked") public Object invoke(Object object,Method nativeMethod,Object[] objects) throws Throwable {  log.debug("Invoked response method. NativeMethod={}, method args length={}",nativeMethod.getName(),objects.length);  E event=(E)createGenericEvent(objects[0]);  R response=(R)createGenericResponse(objects[1]);  try {    log.debug("Created event {}",genericEventClass.getSimpleName());    Method method=genericHandler.getClass().getMethod(nativeMethod.getName(),new Class[]{genericEventClass,genericResponseClass});    log.debug("Invoking {}.{}({},{}) ",new Object[]{genericHandler.getClass().getSimpleName(),method.getName(),method.getParameterTypes()[0].getSimpleName(),method.getParameterTypes()[1].getSimpleName()});    return method.invoke(genericHandler,event,response);  } catch (  NoSuchMethodException e) {    log.warn("Got a NoSuchMethodException. Method = '" + nativeMethod.getName() + "'");    e.printStackTrace();    if (nativeMethod.getName().equals("equals") && objects.length == 1) {      return object == objects[0];    }    return null;  }}  }
class C{  private Object findFlushingPropertyContrust(){  if (flashingProperty.indexOf("Color") > -1) {    int val=Integer.decode("0x" + originalFlashingPropertyValue);    if (val > 0xf0f0f0) {      return "000000";    } else {      return "ffffff";    }  }  if (flashingProperty.indexOf("derive") > -1) {    return "NoPropertyUIIDExists";  }  if (flashingProperty.indexOf("font") > -1) {    if ((((com.codename1.ui.Font)originalFlashingPropertyValue).getStyle() & com.codename1.ui.Font.STYLE_BOLD) != 0) {      return com.codename1.ui.Font.createSystemFont(com.codename1.ui.Font.FACE_SYSTEM,com.codename1.ui.Font.STYLE_PLAIN,com.codename1.ui.Font.SIZE_LARGE);    }    return com.codename1.ui.Font.createSystemFont(com.codename1.ui.Font.FACE_SYSTEM,com.codename1.ui.Font.STYLE_BOLD,com.codename1.ui.Font.SIZE_LARGE);  }  if (flashingProperty.indexOf("bgImage") > -1) {    com.codename1.ui.Image i=(com.codename1.ui.Image)originalFlashingPropertyValue;    return i.modifyAlpha((byte)128);  }  if (flashingProperty.indexOf("transparency") > -1) {    int v=Integer.parseInt((String)originalFlashingPropertyValue);    if (v < 128) {      return "255";    } else {      return "100";    }  }  if (flashingProperty.indexOf("padding") > -1 || flashingProperty.indexOf("margin") > -1) {    return "10,10,10,10";  }  if (flashingProperty.indexOf("border") > -1) {    if (originalFlashingPropertyValue != null) {      Border pressed=((Border)originalFlashingPropertyValue).createPressedVersion();      if (pressed != null) {        return pressed;      }    }    return Border.createBevelRaised();  }  if (flashingProperty.indexOf("bgType") > -1) {    return originalFlashingPropertyValue;  }  if (flashingProperty.indexOf("bgGradient") > -1) {    Object[] gradient=new Object[4];    System.arraycopy(originalFlashingPropertyValue,0,gradient,0,4);    gradient[0]=((Object[])originalFlashingPropertyValue)[1];    gradient[1]=((Object[])originalFlashingPropertyValue)[0];    return gradient;  }  if (flashingProperty.indexOf("align") > -1 || flashingProperty.indexOf("textDecoration") > -1) {    return originalFlashingPropertyValue;  }  throw new IllegalArgumentException("Unsupported property type: " + flashingProperty);}  }
class C{  private boolean fillBuffer(){  assertOpen();  if (ft != null) {    throw new AssertionError();  }  try {    while (src.hasNext() && buffer.remainingCapacity() > 0) {      final Justification jst=(Justification)src.next().getObject();      try {        buffer.put(jst);        numBuffered++;      } catch (      InterruptedException ex) {        throw new RuntimeException(ex);      }    }    return !buffer.isEmpty();  }  finally {    if (log.isDebugEnabled())     log.debug("(Re-)filled buffer: size=" + buffer.size() + ", remainingCapacity="+ buffer.remainingCapacity()+ ", done="+ !src.hasNext());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.877 -0500",hash_original_method="BCC81355363782E84A460D40E9FAB2BD",hash_generated_method="BCC81355363782E84A460D40E9FAB2BD") boolean _requestedDo(int option){  return ((_options[option] & _REQUESTED_DO_MASK) != 0);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  default String renderType(Generator gen,M model){  return gen.on(model.getType()).map(null).orElse(EMPTY);}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public void testContinuousMode() throws Throwable {  processTest(CONTINUOUS);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public void repaint(){}  }
class C{  public CachingMetadataReaderFactory(ResourceLoader resourceLoader){  super(resourceLoader);}  }
class C{  private void inflateContentView(){  contentContainer=(ViewGroup)rootView.findViewById(R.id.content_container);  contentContainer.removeAllViews();  if (customView != null) {    contentContainer.setVisibility(View.VISIBLE);    contentContainer.addView(customView);  } else   if (customViewId != -1) {    contentContainer.setVisibility(View.VISIBLE);    LayoutInflater layoutInflater=LayoutInflater.from(getContext());    View view=layoutInflater.inflate(customViewId,contentContainer,false);    contentContainer.addView(view);  } else {    LayoutInflater layoutInflater=LayoutInflater.from(getContext());    View view=layoutInflater.inflate(R.layout.bottom_sheet_grid_view,contentContainer,false);    contentContainer.addView(view);  }  showGridView();}  }
class C{  public void addConf(String s){  conf.add(s);}  }
class C{  public void testCreateConfigurationWhenInvalidHint(){  try {    this.factory.createConfiguration("testableContainerId",ContainerType.INSTALLED,new ConfigurationType("invalidhint"));  } catch (  ContainerException expected) {    assertEquals("Cannot create configuration. There's no registered configuration for " + "the parameters (container [id = [testableContainerId], type = " + "[installed]], configuration type [invalidhint]). Actually there are no "+ "valid types registered for this configuration. Maybe you've made a mistake "+ "spelling it?",expected.getMessage());  }}  }
class C{  private void insertCOMMarkerSegment(COMMarkerSegment newGuy){  int lastCOM=findMarkerSegmentPosition(COMMarkerSegment.class,false);  boolean hasJFIF=(findMarkerSegment(JFIFMarkerSegment.class,true) != null);  int firstAdobe=findMarkerSegmentPosition(AdobeMarkerSegment.class,true);  if (lastCOM != -1) {    markerSequence.add(lastCOM + 1,newGuy);  } else   if (hasJFIF) {    markerSequence.add(1,newGuy);  } else   if (firstAdobe != -1) {    markerSequence.add(firstAdobe + 1,newGuy);  } else {    markerSequence.add(0,newGuy);  }}  }
class C{  private static void s_uackp(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  if (a.isContiguous()) {    sumAgg(a.values(rl),c,a.indexes(rl),a.pos(rl),(int)a.size(rl,ru),n,kbuff,kplus);  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       sumAgg(a.values(i),c,a.indexes(i),a.pos(i),a.size(i),n,kbuff,kplus);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.739 -0500",hash_original_method="B3CD0EA91E55821485199A61F4C775D4",hash_generated_method="B6ED1071D2558B7B04C360A56B033244") public boolean shouldIncludeInGlobalSearch(){  return mIncludeInGlobalSearch;}  }
class C{  public void hincrByFloat(String key,String field,double doubleValue){  connection.hincrbyfloat(key,field,doubleValue);  if (keyExpiryTime != -1) {    connection.expire(key,keyExpiryTime);  }}  }
class C{  public SnackbarBuilder icon(Drawable icon){  this.icon=icon;  return this;}  }
class C{  @SuppressWarnings("unchecked") public static EntityView<IEntity> create(final IEntity entity){  try {    if (entity.isUser()) {      Entity2DView<IEntity> user2DView=new User2DView();      user2DView.initialize(entity);      return user2DView;    }    final String type=entity.getType();    String eclass=entity.getEntityClass();    String subClass=entity.getEntitySubclass();    final Class<? extends EntityView> entityClass=getViewClass(type,eclass,subClass);    if (entityClass == null) {      LOGGER.debug("No view for this entity. type: " + type + " class: "+ eclass+ " subclass: "+ subClass);      return null;    }    if (entityClass == Blood2DView.class) {      boolean showBlood=Boolean.parseBoolean(WtWindowManager.getInstance().getProperty("gamescreen.blood","true"));      if (!showBlood) {        return null;      }    }    final EntityView<IEntity> en=entityClass.newInstance();    en.initialize(entity);    return en;  } catch (  final Exception e) {    LOGGER.error("Error creating entity for object: " + entity,e);    return null;  }}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static Color shadow(Color c,int amount){  return new Color(Math.max(0,c.getRed() - amount),Math.max(0,c.getGreen() - amount),Math.max(0,c.getBlue() - amount),c.getAlpha());}  }
class C{  public void checkOwnsNoSchemas(){  for (  Schema s : database.getAllSchemas()) {    if (this == s.getOwner()) {      throw DbException.get(ErrorCode.CANNOT_DROP_2,getName(),s.getName());    }  }}  }
class C{  public double computeAverageLocal(int var1[],int var2[],int cond[]){  initialise();  addObservations(var1,var2,cond);  return computeAverageLocalOfObservations();}  }
class C{  protected void connect() throws Exception {  FloodlightModuleContext fmc=new FloodlightModuleContext();  ThreadPool tp=new ThreadPool();  syncManager=new RemoteSyncManager();  fmc.addService(IThreadPoolService.class,tp);  fmc.addService(ISyncService.class,syncManager);  fmc.addConfigParam(syncManager,"hostname",settings.hostname);  fmc.addConfigParam(syncManager,"port",Integer.toString(settings.port));  if (settings.authScheme != null) {    fmc.addConfigParam(syncManager,"authScheme",settings.authScheme.toString());    fmc.addConfigParam(syncManager,"keyStorePath",settings.keyStorePath);    fmc.addConfigParam(syncManager,"keyStorePassword",settings.keyStorePassword);  }  tp.init(fmc);  syncManager.init(fmc);  tp.startUp(fmc);  syncManager.startUp(fmc);  out.println("Using remote sync service at " + settings.hostname + ":"+ settings.port);}  }
class C{  AtomicLongChunks(final long length,final int chunkBits){  mLength=length;  assert chunkBits >= 0 && chunkBits <= 31;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  final long ch=(length + mChunkSize - 1) / mChunkSize;  if (ch > Integer.MAX_VALUE) {    throw new RuntimeException("length requested too long length=" + length + " mChunkSize="+ mChunkSize);  }  final int chunks=(int)ch;  mArray=new AtomicLongArray[chunks];  long left=mLength;  for (int i=0; i < chunks; i++) {    final int assignedLength=left <= mChunkSize ? (int)left : mChunkSize;    assert assignedLength != 0;    mArray[i]=new AtomicLongArray(assignedLength);    left-=assignedLength;  }  assert left == 0;}  }
class C{  protected RequestTask(KMLNetworkLink link,String address){  if (link == null) {    String message=Logging.getMessage("nullValue.ObjectIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (address == null) {    String message=Logging.getMessage("nullValue.PathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.link=link;  this.address=address;}  }
class C{  public DefaultContainerCapabilityFactory(ClassLoader classLoader){  super();  AbstractFactoryRegistry.register(classLoader,this);}  }
class C{  public InQueryExp(ValueExp v1,ValueExp items[]){  val=v1;  valueList=items;}  }
class C{  @Override public void dropPartition(String dbName,String tableName,String partitionName,boolean deleteData) throws HiveMetastoreException {  HiveObjectSpec partitionSpec=new HiveObjectSpec(dbName,tableName,partitionName);  if (!existsPartition(dbName,tableName,partitionName)) {    throw new HiveMetastoreException("Missing partition: " + partitionSpec);  }  specToPartition.remove(partitionSpec);}  }
class C{  private void jbInit() throws Exception {  Charset[] charsets=Ini.getAvailableCharsets();  for (int i=0; i < charsets.length; i++)   fCharset.appendItem(charsets[i].displayName(),charsets[i]);  bFile.setLabel(Msg.getMsg(Env.getCtx(),"FileImportFile"));  bFile.setTooltiptext(Msg.getMsg(Env.getCtx(),"FileImportFileInfo"));  bFile.addEventListener(Events.ON_CLICK,this);  fCharset.setMold("select");  fCharset.setRows(0);  fCharset.setTooltiptext(Msg.getMsg(Env.getCtx(),"Charset",false));  info.setValue("   ");  labelFormat.setValue(Msg.translate(Env.getCtx(),"AD_ImpFormat_ID"));  pickFormat.setMold("select");  pickFormat.setRows(0);  bNext.setTooltiptext(Msg.getMsg(Env.getCtx(),"Next"));  bNext.setLabel(">");  bNext.addEventListener(Events.ON_CLICK,this);  record.setValue("------");  bPrevious.setTooltiptext(Msg.getMsg(Env.getCtx(),"Previous"));  bPrevious.setLabel("<");  bPrevious.addEventListener(Events.ON_CLICK,this);  northPanel.appendChild(bFile);  northPanel.appendChild(fCharset);  northPanel.appendChild(info);  northPanel.appendChild(labelFormat);  northPanel.appendChild(pickFormat);  northPanel.appendChild(bPrevious);  northPanel.appendChild(record);  northPanel.appendChild(bNext);  rawData.setWidth("100%");  rawData.setCols(80);  rawData.setRows(MAX_SHOWN_LINES);  rawData.setHeight("40%");  previewPanel.setWidth("100%");  previewPanel.setHeight("58%");  previewPanel.setStyle("overflow: auto");  centerPanel.setWidth("100%");  centerPanel.setHeight("100%");  centerPanel.appendChild(rawData);  centerPanel.appendChild(new Separator());  centerPanel.appendChild(previewPanel);  confirmPanel.addActionListener(Events.ON_CLICK,this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=null;  String outputFile=null;  int v;  int a;  int i;  double sigmaX;  double sigmaY;  double N;  double sigmaXY;  double sigmaXsqr;  double sigmaYsqr;  double mean;  double meanY;  double radians2Deg=180 / Math.PI;  double slope;  double slopeInDegrees;  double slopeM1;  double slopeM2;  double slopeRMA;  double slopeDegM1;  double slopeDegM2;  double slopeDegRMA;  int progress;  int oldProgress=-1;  double midX=0;  double midY=0;  double maxLineLength=100;  double lineLength;  double Sxx, Syy, Sxy;  double centroidX;  double centroidY;  double deltaX, deltaY;  int[] parts={0};  int[] partStart={0};  boolean[] partHoleData={false};  double x, y;  int pointSt, pointEnd;  boolean useElongationRatio=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  maxLineLength=Double.parseDouble(args[2]);  useElongationRatio=Boolean.parseBoolean(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    double numberOfRecords=input.getNumberOfRecords();    if (input.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("This function can only be applied to polygon type shapefiles.");      return;    }    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    if (!useElongationRatio) {      fields[1]=new DBFField();      fields[1].setName("LINEARITY");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("ORIENT");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(10);      fields[2].setDecimalCount(3);    } else {      fields[1]=new DBFField();      fields[1].setName("ELONGATION");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("ELONG_DIR");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(10);      fields[2].setDecimalCount(3);    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE,fields);    ShapeType inputType=input.getShapeType();    double[][] vertices=null;    double[] regressionData;    double rSquare;    if (!useElongationRatio) {      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {switch (inputType) {case POLYGON:            whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());          vertices=recPolygon.getPoints();        partStart=recPolygon.getParts();      partHoleData=recPolygon.getPartHoleData();    midX=recPolygon.getXMin() + (recPolygon.getXMax() - recPolygon.getXMin()) / 2;  midY=recPolygon.getYMin() + (recPolygon.getYMax() - recPolygon.getYMin()) / 2;break;case POLYGONZ:PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();partStart=recPolygonZ.getParts();partHoleData=recPolygonZ.getPartHoleData();midX=recPolygonZ.getXMin() + (recPolygonZ.getXMax() - recPolygonZ.getXMin()) / 2;midY=recPolygonZ.getYMin() + (recPolygonZ.getYMax() - recPolygonZ.getYMin()) / 2;break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();partStart=recPolygonM.getParts();partHoleData=recPolygonM.getPartHoleData();midX=recPolygonM.getXMin() + (recPolygonM.getXMax() - recPolygonM.getXMin()) / 2;midY=recPolygonM.getYMin() + (recPolygonM.getYMax() - recPolygonM.getYMin()) / 2;break;}int numParts=partStart.length;for (int p=0; p < numParts; p++) {if (!partHoleData[p]) {regressionData=new double[5];rSquare=0;slope=0;slopeInDegrees=0;slopeDegM1=0;slopeDegM2=0;slopeDegRMA=0;slopeM1=0;slopeM2=0;slopeRMA=0;pointSt=partStart[p];if (p < numParts - 1) {pointEnd=partStart[p + 1];} else {pointEnd=vertices.length;}N=pointEnd - pointSt;for (v=pointSt; v < pointEnd; v++) {x=vertices[v][0] - midX;y=vertices[v][1] - midY;regressionData[0]+=x;regressionData[1]+=y;regressionData[2]+=x * y;regressionData[3]+=x * x;regressionData[4]+=y * y;}sigmaX=regressionData[0];mean=sigmaX / N;sigmaY=regressionData[1];meanY=sigmaY / N;sigmaXY=regressionData[2];sigmaXsqr=regressionData[3];sigmaYsqr=regressionData[4];if ((sigmaXsqr - mean * sigmaX) > 0) {slopeM1=(sigmaXY - mean * sigmaY) / (sigmaXsqr - mean * sigmaX);slopeDegM1=(Math.atan(slopeM1) * radians2Deg);if (slopeDegM1 < 0) {slopeDegM1=90 + -1 * slopeDegM1;} else {slopeDegM1=90 - slopeDegM1;}}Sxx=(sigmaXsqr / N - mean * mean);Syy=(sigmaYsqr / N - (sigmaY / N) * (sigmaY / N));Sxy=(sigmaXY / N - (sigmaX * sigmaY) / (N * N));if (Math.sqrt(Sxx * Syy) != 0) {rSquare=((Sxy / Math.sqrt(Sxx * Syy)) * (Sxy / Math.sqrt(Sxx * Syy)));}slopeRMA=Math.sqrt(Syy / Sxx);if ((sigmaXY - mean * sigmaY) / (sigmaXsqr - mean * sigmaX) < 0) {slopeRMA=-slopeRMA;}slopeDegRMA=(Math.atan(slopeRMA) * radians2Deg);if (slopeDegRMA < 0) {slopeDegRMA=90 + -1 * slopeDegRMA;} else {slopeDegRMA=90 - slopeDegRMA;}if ((sigmaYsqr - meanY * sigmaY) > 0) {slopeM2=(sigmaXY - meanY * sigmaX) / (sigmaYsqr - meanY * sigmaY);slopeM2=1 / slopeM2;slopeDegM2=(Math.atan(slopeM2) * radians2Deg);if (slopeDegM2 < 0) {slopeDegM2=90 + -1 * slopeDegM2;} else {slopeDegM2=90 - slopeDegM2;}}if (slopeDegM2 < 6 || slopeDegM2 > 174) {slope=slopeM2;slopeInDegrees=slopeDegM2;} else if (slopeDegM1 > 84 && slopeDegM1 < 96) {slope=slopeM1;slopeInDegrees=slopeDegM1;} else {slope=slopeRMA;slopeInDegrees=slopeDegRMA;}centroidX=mean + midX;centroidY=meanY + midY;lineLength=maxLineLength * rSquare;double[][] points=new double[2][2];if (slopeInDegrees > 0) {deltaX=Math.cos(slope) * lineLength;deltaY=Math.sin(slope) * lineLength;points[0][0]=centroidX - deltaX / 2.0;points[0][1]=centroidY - deltaY / 2.0;points[1][0]=centroidX + deltaX / 2.0;points[1][1]=centroidY + deltaY / 2.0;} else {points[0][0]=centroidX - lineLength / 2.0;points[0][1]=centroidY;points[1][0]=centroidX + lineLength / 2.0;points[1][1]=centroidY;}PolyLine poly=new PolyLine(parts,points);Object[] rowData=new Object[3];rowData[0]=new Double(record.getRecordNumber());rowData[1]=new Double(rSquare);rowData[2]=new Double(slopeInDegrees);output.addRecord(poly,rowData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(record.getRecordNumber() / numberOfRecords * 100);if (progress > oldProgress) {updateProgress(progress);}oldProgress=progress;}}} else {double[][] verticesRotated=null;double[] newBoundingBox=new double[4];double psi=0;double DegreeToRad=Math.PI / 180;double[] axes=new double[2];double newXAxis=0;double newYAxis=0;double longAxis;double shortAxis;double elongation=0;double bearing=0;final double rightAngle=Math.toRadians(90);double boxCentreX=0;double boxCentreY=0;slope=0;for (ShapeFileRecord record : input.records) {switch (inputType) {case POLYGON:whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());vertices=recPolygon.getPoints();midX=recPolygon.getXMin() + (recPolygon.getXMax() - recPolygon.getXMin()) / 2;midY=recPolygon.getYMin() + (recPolygon.getYMax() - recPolygon.getYMin()) / 2;break;case POLYGONZ:PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();midX=recPolygonZ.getXMin() + (recPolygonZ.getXMax() - recPolygonZ.getXMin()) / 2;midY=recPolygonZ.getYMin() + (recPolygonZ.getYMax() - recPolygonZ.getYMin()) / 2;break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();midX=recPolygonM.getXMin() + (recPolygonM.getXMax() - recPolygonM.getXMin()) / 2;midY=recPolygonM.getYMin() + (recPolygonM.getYMax() - recPolygonM.getYMin()) / 2;break;}int numVertices=vertices.length;verticesRotated=new double[numVertices][2];axes[0]=9999999;axes[1]=9999999;double sumX=0;double sumY=0;N=0;boolean calculatedCentroid=false;for (int m=0; m <= 180; m++) {psi=-m * 0.5 * DegreeToRad;for (int n=0; n < numVertices; n++) {x=vertices[n][0] - midX;y=vertices[n][1] - midY;if (!calculatedCentroid) {sumX+=x;sumY+=y;N++;}verticesRotated[n][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));verticesRotated[n][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));}newBoundingBox[0]=Double.MAX_VALUE;newBoundingBox[1]=Double.MIN_VALUE;newBoundingBox[2]=Double.MAX_VALUE;newBoundingBox[3]=Double.MIN_VALUE;for (int n=0; n < numVertices; n++) {x=verticesRotated[n][0];y=verticesRotated[n][1];if (x < newBoundingBox[0]) {newBoundingBox[0]=x;}if (x > newBoundingBox[1]) {newBoundingBox[1]=x;}if (y < newBoundingBox[2]) {newBoundingBox[2]=y;}if (y > newBoundingBox[3]) {newBoundingBox[3]=y;}}newXAxis=newBoundingBox[1] - newBoundingBox[0] + 1;newYAxis=newBoundingBox[3] - newBoundingBox[2] + 1;if ((axes[0] * axes[1]) > (newXAxis * newYAxis)) {axes[0]=newXAxis;axes[1]=newYAxis;if (axes[0] > axes[1]) {slope=-psi;} else {slope=-(rightAngle + psi);}x=newBoundingBox[0] + newXAxis / 2;y=newBoundingBox[2] + newYAxis / 2;boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));}}longAxis=Math.max(axes[0],axes[1]);shortAxis=Math.min(axes[0],axes[1]);elongation=1 - shortAxis / longAxis;centroidX=(sumX / N) + midX;centroidY=(sumY / N) + midY;lineLength=maxLineLength * elongation;double[][] points=new double[2][2];deltaX=Math.cos(slope) * lineLength;deltaY=Math.sin(slope) * lineLength;points[0][0]=boxCentreX - deltaX / 2.0;points[0][1]=boxCentreY - deltaY / 2.0;points[1][0]=boxCentreX + deltaX / 2.0;points[1][1]=boxCentreY + deltaY / 2.0;PolyLine poly=new PolyLine(parts,points);Object[] rowData=new Object[3];rowData[0]=new Double(record.getRecordNumber());rowData[1]=new Double(elongation);bearing=90 - Math.toDegrees(slope);rowData[2]=new Double(bearing);output.addRecord(poly,rowData);if (cancelOp) {cancelOperation();return;}progress=(int)(record.getRecordNumber() / numberOfRecords * 100);if (progress > oldProgress) {updateProgress(progress);}oldProgress=progress;}}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  protected void prepare() throws IllegalStateException {  startLoading();  this.videoIsReady=false;  this.initialMovieHeight=-1;  this.initialMovieWidth=-1;  this.mediaPlayer.setOnPreparedListener(this);  this.mediaPlayer.setOnErrorListener(this);  this.mediaPlayer.setOnSeekCompleteListener(this);  this.mediaPlayer.setOnInfoListener(this);  this.mediaPlayer.setOnVideoSizeChangedListener(this);  this.mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);  this.currentState=State.PREPARING;  this.mediaPlayer.prepareAsync();}  }
class C{  public NormalizedIndicator(Problem problem,NondominatedPopulation referenceSet,double[] referencePoint){  super();  this.problem=problem;  normalizer=new Normalizer(problem,referenceSet,referencePoint);  normalizedReferenceSet=normalizer.normalize(referenceSet);}  }
class C{  public InvalidPathException(String input,String reason){  this(input,reason,-1);}  }
class C{  public void testDoCheckWithDefaultDetectionResultAndDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithDefaultDetectionResultAndDetectionResultOverridenByConstructor");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test");  mockTestSolutionHandler.addTestSolution(TestSolution.NEED_MORE_INFO);  expectLastCall().once();  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("test"));  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.NEED_MORE_INFO,element,DETECTION_MSG,null);  expectLastCall().once();  TextBelongsToBlackListChecker instance=new TextBelongsToBlackListChecker(mockTextElementBuilder,BLACKLIST_NOM_NAME,TestSolution.NEED_MORE_INFO,DETECTION_MSG);  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);}  }
class C{  public static void saveX509Cert(Certificate cert,File certFile) throws GeneralSecurityException, IOException {  saveX509Cert(new Certificate[]{cert},certFile);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.BINARY_BITWISE_EXPRESSION__LHS:    return lhs != null;case N4JSPackage.BINARY_BITWISE_EXPRESSION__OP:  return op != OP_EDEFAULT;case N4JSPackage.BINARY_BITWISE_EXPRESSION__RHS:return rhs != null;}return super.eIsSet(featureID);}  }
class C{  @LargeTest public void testPropertiesGIFFile() throws Exception {  final String imageItemFilename=INPUT_FILE_PATH + "IMG_640x480.gif";  final int imageItemDuration=10000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  try {    new MediaImageItem(mVideoEditor,"m1",imageItemFilename,imageItemDuration,renderingMode);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Media Properties for a GIF File -- Unsupported file type",flagForException);}  }
class C{  public String doNotCheckCapabilitiesTipText(){  return "If set, associator capabilities are not checked before associator is built" + " (Use with caution to reduce runtime).";}  }
class C{  public void compileSingleFiles(List<File> projectRoots,List<File> modelFiles) throws N4JSCompileException {  compileSingleFiles(projectRoots,modelFiles,new DismissingIssueAcceptor());}  }
class C{  private boolean isHiraganaDakuten(char c){  return inside(c,h2d,'\u304b') && c == lookupHiraganaDakuten(c);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean isLoaded(){  return loaded;}  }
class C{  public void destroySelf(){  if (mViewPager == null || mViewPager.getAdapter() == null) {    return;  }  mBaseCyclePageChangeListener.removeAdapterDataChangeObserverListener();  removeAllViews();}  }
class C{  public static int computeTagSize(final int fieldNumber){  return computeRawVarint32Size(WireFormat.makeTag(fieldNumber,0));}  }
class C{  public static <T>ManyAssociationContainsPredicate<T> contains(ManyAssociation<T> manyAssoc,T value){  return new ManyAssociationContainsPredicate<>(manyAssociation(manyAssoc),value);}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer) throws CMSException {  return this.generate(new CMSProcessableByteArray(null,signer.getSignature()),false).getSignerInfos();}  }
class C{  protected void checkHistory(final List<DomainHistoryObject<?>> historyList){  final DomainHistoryObject<?> history=historyList.get(historyList.size() - 1);  ModificationType modificationType=history.getModtype();  if (!modificationType.equals(ModificationType.DELETE)) {    fail("The last version of history object is not DELETED type. Object was not correctly deleted.");  }}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public TypeNode typeNode(Type type){  if (type == null || !(type instanceof PrimType || type instanceof RefType)) {    throw new InternalTypingException();  }  TypeNode typeNode=typeNodeMap.get(type);  if (typeNode == null) {    throw new InternalTypingException();  }  return typeNode;}  }
class C{  private void put(final Item i){  if (index > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  @Override public String toString(){  TextBuilder tb=new TextBuilder();  tb.append('{');  int length=_mapping.length << 6;  for (int i=0; i < length; i++) {    if (this.contains((char)i)) {      if (tb.length() > 1) {        tb.append(',');        tb.append(' ');      }      tb.append('\'');      tb.append((char)i);      tb.append('\'');    }  }  tb.append('}');  return tb.toString();}  }
class C{  public void testCsiX(){  withTerminalSized(13,2).enterString("abcdefghijkl\b\b\b\b\b\033[X").assertLinesAre("abcdefg ijkl ","             ");  withTerminalSized(13,2).enterString("abcdefghijkl\b\b\b\b\b\033[1X").assertLinesAre("abcdefg ijkl ","             ");  withTerminalSized(13,2).enterString("abcdefghijkl\b\b\b\b\b\033[2X").assertLinesAre("abcdefg  jkl ","             ");  withTerminalSized(13,2).enterString("abcdefghijkl\b\b\b\b\b\033[20X").assertLinesAre("abcdefg      ","             ");}  }
class C{  static int popLength(InputStream stream){  byte[] lengthBytes=new byte[Integer.SIZE / Byte.SIZE];  try {    stream.read(lengthBytes);  } catch (  IOException e) {    Log.e(TAG,"IOException popping length from input stream: " + e);    return -1;  }  ByteBuffer buffer=ByteBuffer.wrap(lengthBytes);  buffer.order(ByteOrder.BIG_ENDIAN);  return buffer.getInt();}  }
class C{  protected Locale determineLocale(HttpContext context){  return Locale.getDefault();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PROPERTY_ASSIGNMENT___GET_DEFINED_MEMBER:    return getDefinedMember();case N4JSPackage.PROPERTY_ASSIGNMENT___IS_VALID_NAME:  return isValidName();case N4JSPackage.PROPERTY_ASSIGNMENT___GET_NAME:return getName();case N4JSPackage.PROPERTY_ASSIGNMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  protected double calculateHighestVisibleTickValue(){  double unit=getTickUnit().getSize();  double index=Math.floor(getRange().getUpperBound() / unit);  return index * unit;}  }
class C{  private String nextAT() throws IOException {  hasQE=false;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if (pos == chars.length) {    return null;  }  beg=pos;  pos++;  for (; pos < chars.length && chars[pos] != '=' && chars[pos] != ' '; pos++) {  }  if (pos >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  end=pos;  if (chars[pos] == ' ') {    for (; pos < chars.length && chars[pos] != '=' && chars[pos] == ' '; pos++) {    }    if (chars[pos] != '=' || pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }  }  pos++;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if ((end - beg > 4) && (chars[beg + 3] == '.') && (chars[beg] == 'O' || chars[beg] == 'o')&& (chars[beg + 1] == 'I' || chars[beg + 1] == 'i')&& (chars[beg + 2] == 'D' || chars[beg + 2] == 'd')) {    beg+=4;  }  return new String(chars,beg,end - beg);}  }
class C{  public JmsQueueListener(Delegator delegator,String jndiServer,String jndiName,String queueName,String userName,String password){  super(delegator);  this.jndiServer=jndiServer;  this.jndiName=jndiName;  this.queueName=queueName;  this.userName=userName;  this.password=password;}  }
class C{  public boolean isActiveSite(){  try {    SiteState state=getSiteFromLocalVdc(coordinator.getSiteId()).getState();    return ACTIVE_SITE_STATES.contains(state);  } catch (  RetryableCoordinatorException ex) {    if (ServiceCode.COORDINATOR_SITE_NOT_FOUND == ex.getServiceCode()) {      return true;    }    log.error("Unexpected error to check active site",ex);  }  return false;}  }
class C{  public RayTracer(Entity entity){  this(new Ray(entity.position().add(entity.components.has(Living.class) ? entity.components.get(Living.class).faceDisplacement.get() : Vector3D.ZERO),entity.rotation().applyTo(Vector3DUtil.FORWARD)));}  }
class C{  boolean canBeWalkedInNaturalDocOrderStatic(){  if (null != m_firstWalker) {    AxesWalker walker=m_firstWalker;    int prevAxis=-1;    boolean prevIsSimpleDownAxis=true;    for (int i=0; null != walker; i++) {      int axis=walker.getAxis();      if (walker.isDocOrdered()) {        boolean isSimpleDownAxis=((axis == Axis.CHILD) || (axis == Axis.SELF) || (axis == Axis.ROOT));        if (isSimpleDownAxis || (axis == -1))         walker=walker.getNextWalker(); else {          boolean isLastWalker=(null == walker.getNextWalker());          if (isLastWalker) {            if (walker.isDocOrdered() && (axis == Axis.DESCENDANT || axis == Axis.DESCENDANTORSELF || axis == Axis.DESCENDANTSFROMROOT || axis == Axis.DESCENDANTSORSELFFROMROOT) || (axis == Axis.ATTRIBUTE))             return true;          }          return false;        }      } else       return false;    }    return true;  }  return false;}  }
class C{  @Override public void runAndUpdate(final Runnable r){  r.run();  if (getScope().isPaused()) {    updateDisplay(true);  }  if (animator.isPaused()) {    animator.resume();    animator.pause();  }}  }
class C{  private Response doQUIT(SMTPSession session,String argument){  if ((argument == null) || (argument.length() == 0)) {    StringBuilder response=new StringBuilder();    response.append(DSNStatus.getStatus(DSNStatus.SUCCESS,DSNStatus.UNDEFINED_STATUS)).append(" ").append(session.getConfiguration().getHelloName()).append(" Service closing transmission channel");    SMTPResponse ret=new SMTPResponse(SMTPRetCode.SYSTEM_QUIT,response);    ret.setEndSession(true);    return ret;  } else {    return SYNTAX_ERROR;  }}  }
class C{  public void writeImmediateAlert(final boolean on){  if (!isConnected())   return;  if (mAlertLevelCharacteristic != null) {    mAlertLevelCharacteristic.setValue(on ? HIGH_ALERT : NO_ALERT);    writeCharacteristic(mAlertLevelCharacteristic);    mAlertOn=on;  } else {    DebugLogger.w(TAG,"Immediate Alert Level Characteristic is not found");  }}  }
class C{  private PostgreSQLGuacamoleProperties(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode11.class,args);}  }
class C{  public UnifyMapping(UnifyElement sourceElement,UnifyElement destinationElement){  this(sourceElement);  destinationElements=createDestinationElements();  addDestinationElement(destinationElement);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseFeatureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:  return N4JSPackage.PROPERTY_ASSIGNMENT__DECLARED_NAME;default :return -1;}}if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static boolean isSymbolicLink(File file) throws IOException {  try {    Class<?> filesClass=Class.forName("java.nio.file.Files");    Class<?> pathClass=Class.forName("java.nio.file.Path");    Object path=File.class.getMethod("toPath").invoke(file);    return ((Boolean)filesClass.getMethod("isSymbolicLink",pathClass).invoke(null,path)).booleanValue();  } catch (  InvocationTargetException exception) {    Throwable cause=exception.getCause();    Throwables.propagateIfPossible(cause,IOException.class);    throw new RuntimeException(cause);  }catch (  ClassNotFoundException exception) {  }catch (  IllegalArgumentException exception) {  }catch (  SecurityException exception) {  }catch (  IllegalAccessException exception) {  }catch (  NoSuchMethodException exception) {  }  if (File.separatorChar == '\\') {    return false;  }  File canonical=file;  if (file.getParent() != null) {    canonical=new File(file.getParentFile().getCanonicalFile(),file.getName());  }  return !canonical.getCanonicalFile().equals(canonical.getAbsoluteFile());}  }
class C{  @Override protected void onDraw(Canvas canvas){  if (canvas != null) {    super.onDraw(canvas);  }  mTotalWidth=0;  final int height=getHeight();  if (mBgPadding == null) {    mBgPadding=new Rect(0,0,0,0);    if (getBackground() != null) {      getBackground().getPadding(mBgPadding);    }    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());  }  final int count=mSuggestions.size();  final Rect bgPadding=mBgPadding;  final Paint paint=mPaint;  final int touchX=mTouchX;  final int scrollX=getScrollX();  final boolean scrolled=mScrolled;  final boolean typedWordValid=mTypedWordValid;  final int y=(int)(height + mPaint.getTextSize() - mDescent) / 2;  boolean existsAutoCompletion=false;  int x=0;  for (int i=0; i < count; i++) {    CharSequence suggestion=mSuggestions.get(i);    if (suggestion == null)     continue;    final int wordLength=suggestion.length();    paint.setColor(mColorNormal);    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {      paint.setTypeface(Typeface.DEFAULT_BOLD);      paint.setColor(mColorRecommended);      existsAutoCompletion=true;    } else     if (i != 0 || (wordLength == 1 && count > 1)) {      paint.setColor(mColorOther);    }    int wordWidth;    if ((wordWidth=mWordWidth[i]) == 0) {      float textWidth=paint.measureText(suggestion,0,wordLength);      wordWidth=Math.max(mMinTouchableWidth,(int)textWidth + X_GAP * 2);      mWordWidth[i]=wordWidth;    }    mWordX[i]=x;    if (touchX != OUT_OF_BOUNDS_X_COORD && !scrolled && touchX + scrollX >= x && touchX + scrollX < x + wordWidth) {      if (canvas != null && !mShowingAddToDictionary) {        canvas.translate(x,0);        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);        mSelectionHighlight.draw(canvas);        canvas.translate(-x,0);      }      mSelectedString=suggestion;      mSelectedIndex=i;    }    if (canvas != null) {      canvas.drawText(suggestion,0,wordLength,x + wordWidth / 2,y,paint);      paint.setColor(mColorOther);      canvas.translate(x + wordWidth,0);      if (!(mShowingAddToDictionary && i == 1)) {        mDivider.draw(canvas);      }      canvas.translate(-x - wordWidth,0);    }    paint.setTypeface(Typeface.DEFAULT);    x+=wordWidth;  }  if (!isInEditMode())   mService.onAutoCompletionStateChanged(existsAutoCompletion);  mTotalWidth=x;  if (mTargetScrollX != scrollX) {    scrollToTarget();  }}  }
class C{  public void addDataFile(List<ExtensionMapping> mappings,@Nullable Integer rowLimit) throws IOException, IllegalArgumentException, InterruptedException, GeneratorException {  checkForInterruption();  if (mappings == null || mappings.isEmpty()) {    return;  }  currRecords=0;  currRecordsSkipped=0;  Extension ext=mappings.get(0).getExtension();  currExtension=ext.getTitle();  for (  ExtensionMapping m : mappings) {    if (!ext.equals(m.getExtension())) {      throw new IllegalArgumentException("All mappings for a single data file need to be mapped to the same extension: " + ext.getRowType());    }  }  ArchiveFile af=ArchiveFile.buildTabFile();  af.setRowType(TERM_FACTORY.findTerm(ext.getRowType()));  af.setEncoding(CHARACTER_ENCODING);  af.setDateFormat("YYYY-MM-DD");  ArchiveField idField=new ArchiveField();  idField.setIndex(ID_COLUMN_INDEX);  af.setId(idField);  Set<Term> mappedConceptTerms=addFieldsToArchive(mappings,af);  List<ExtensionProperty> propertyList=getOrderedMappedExtensionProperties(ext,mappedConceptTerms);  assignIndexesOrderedByExtension(propertyList,af);  int totalColumns=1 + propertyList.size();  String extensionName=(ext.getName() == null) ? "f" : ext.getName().toLowerCase().replaceAll("\\s","_");  String fn=createFileName(dwcaFolder,extensionName);  File dataFile=new File(dwcaFolder,fn);  Writer writer=org.gbif.utils.file.FileUtils.startNewUtf8File(dataFile);  af.addLocation(dataFile.getName());  addMessage(Level.INFO,"Start writing data file for " + currExtension);  try {    boolean headerWritten=false;    for (    ExtensionMapping m : mappings) {      PropertyMapping[] inCols=new PropertyMapping[totalColumns];      for (      ArchiveField f : af.getFields().values()) {        if (f.getIndex() != null && f.getIndex() > ID_COLUMN_INDEX) {          inCols[f.getIndex()]=m.getField(f.getTerm().qualifiedName());        }      }      if (!headerWritten) {        writeHeaderLine(propertyList,totalColumns,af,writer);        headerWritten=true;      }      dumpData(writer,inCols,m,totalColumns,rowLimit,resource.getDoi());      recordsByExtension.put(ext.getRowType(),currRecords);    }  } catch (  IOException e) {    log.error("Fatal DwC-A Generator Error encountered while writing header line to data file",e);    setState(e);    throw new GeneratorException("Error writing header line to data file",e);  } finally {    writer.close();  }  if (resource.getCoreRowType().equalsIgnoreCase(ext.getRowType())) {    archive.setCore(af);  } else {    archive.addExtension(af);  }  addMessage(Level.INFO,"Data file written for " + currExtension + " with "+ currRecords+ " records and "+ totalColumns+ " columns");  if (currRecordsSkipped > 0) {    addMessage(Level.WARN,"!!! " + currRecordsSkipped + " records were skipped for "+ currExtension+ " due to errors interpreting line, or because the line was empty");  }}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  List srcs=extractFeMergeNode(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (srcs == null) {    return null;  }  if (srcs.size() == 0) {    return null;  }  Iterator iter=srcs.iterator();  Rectangle2D defaultRegion=(Rectangle2D)((Filter)iter.next()).getBounds2D().clone();  while (iter.hasNext()) {    defaultRegion.add(((Filter)iter.next()).getBounds2D());  }  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  Filter filter=new CompositeRable8Bit(srcs,CompositeRule.OVER,true);  handleColorInterpolationFilters(filter,filterElement);  filter=new PadRable8Bit(filter,primitiveRegion,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public RandomPlayer(char mark){  super(mark);}  }
class C{  private void addEntryMarkdownToExport(Entry entry,StringBuilder result,SourcesHashList sources,boolean includeQuotations,boolean includeReferencesSection,boolean skipThisLevel) throws IOException {  if (!skipThisLevel) {    final Entry source=dbLogic.getEntryById(entry.getSourceId());    int sourceId=0;    if (source != null) {      sourceId=sources.add(source);    }    if (includeQuotations && entry.hasQuotation()) {      result.append(markdownBlockquote(entry.getQuotation("")));      if (includeReferencesSection) {        if (sourceId != 0) {          result.append(" [Reference" + sourceId + "] [Reference"+ sourceId+ "]");        }      }      result.append("\n\n");    }    if (entry.hasNote()) {      result.append(entry.getNote("").replace("\n","  \n") + "\n\n");    }  }  List<?> childrenFromDb=dbLogic.getEntriesByParentId(entry.getId());  if (!childrenFromDb.isEmpty()) {    final Hashtable<String,Entry> children=new Hashtable<String,Entry>();    Entry first=null;    for (    final Object childObject : childrenFromDb) {      final Entry child=(Entry)childObject;      children.put(child.getId(),child);      if (!child.hasPreviousSiblingId()) {        first=child;      }    }    if (first != null) {      Entry child=first;      for (int i=0; i < children.size(); ++i) {        if (child == null) {          break;        }        addEntryMarkdownToExport(child,result,sources,includeQuotations,includeReferencesSection,false);        if (!child.hasNextSiblingId()) {          break;        }        final String nextId=child.getNextSiblingId();        child=children.get(nextId);      }    } else {      final Iterator<Map.Entry<String,Entry>> iterator=children.entrySet().iterator();      while (iterator.hasNext()) {        final Map.Entry<String,Entry> mapEntry=iterator.next();        final Entry child=mapEntry.getValue();        addEntryMarkdownToExport(child,result,sources,includeQuotations,includeReferencesSection,false);      }    }  }}  }
class C{  private void displaySimple(PrintStream output){  output.println("First-Order Effects");  for (int j=0; j < P; j++) {    double[] a0=new double[N];    double[] a1=new double[N];    double[] a2=new double[N];    for (int i=0; i < N; i++) {      a0[i]=A[i];      a1[i]=C_A[i][j];      a2[i]=B[i];    }    double value=computeFirstOrder(a0,a1,a2,N);    output.print(value < 0 ? 0.0 : value);    if (j < P - 1) {      output.print('\t');    }  }  output.println();  output.println("Total-Order Effects");  for (int j=0; j < P; j++) {    double[] a0=new double[N];    double[] a1=new double[N];    double[] a2=new double[N];    for (int i=0; i < N; i++) {      a0[i]=A[i];      a1[i]=C_A[i][j];      a2[i]=B[i];    }    double value=computeTotalOrder(a0,a1,a2,N);    output.print(value < 0 ? 0.0 : value);    if (j < P - 1) {      output.print('\t');    }  }  output.println();}  }
class C{  public ByteBuffer read(final long off,final int nbytes) throws IOException {  final ByteBuffer tmp=ByteBuffer.allocate(nbytes);  FileChannelUtility.readAll(this,tmp,off);  tmp.flip();  return tmp;}  }
class C{  public AddReviewerResult(String reviewer,boolean confirm){  this(reviewer);  this.confirm=confirm;}  }
class C{  private JFrame createMainFrame(){  JFrame result=new JFrame();  result.setPreferredSize(new Dimension(400,300));  JTextPane textPane=new JTextPane();  myAppender=createAppender(textPane);  textPane.setEditable(false);  JScrollPane scrollPane=new JScrollPane(textPane);  scrollPane.setPreferredSize(new Dimension(400,300));  result.getContentPane().add(scrollPane,BorderLayout.CENTER);  String fontFamily="Courier New";  Font font=new Font(fontFamily,Font.PLAIN,1);  textPane.setFont(font);  result.pack();  result.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);  return result;}  }
class C{  public boolean isJsonNull(){  return this instanceof JsonNull;}  }
class C{  public static Seconds seconds(int seconds){switch (seconds) {case 0:    return ZERO;case 1:  return ONE;case 2:return TWO;case 3:return THREE;case Integer.MAX_VALUE:return MAX_VALUE;case Integer.MIN_VALUE:return MIN_VALUE;default :return new Seconds(seconds);}}  }
class C{  public void testGetters3(){  LayoutBuilder b=builder().setIncludePad(true).setWidth(50);  FontMetricsInt fmi=b.paint.getFontMetricsInt();  Layout l=b.build();  assertVertMetrics(l,fmi.top - fmi.ascent,fmi.bottom - fmi.descent,fmi.top,fmi.descent,fmi.ascent,fmi.bottom);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.274 -0400",hash_original_method="4681265216BD04726C8DE86640D9EBFD",hash_generated_method="96212B4C3BFA1663294F6F4C683E643F") public static String toASCII(String input,int flags){  return NativeIDN.toASCII(input,flags);}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_cdataStartCalled=true;}  }
class C{  public MoveDescription waitForMove(final IPlayerBridge bridge){  return m_movePanel.waitForMove(bridge);}  }
class C{  private boolean isNegative(final String input){  requireNonNull(input);  for (  final String negativeString : negativeStrings) {    if (input.equalsIgnoreCase(negativeString)) {      return true;    }  }  return false;}  }
class C{  public boolean matchType(Properties jobProp){  if (_confName == null || _confPattern == null) {    return false;  }  return jobProp.containsKey(_confName) && _confPattern.matcher((String)jobProp.get(_confName)).matches();}  }
class C{  @Override public void load(Entity unit) throws IllegalArgumentException {  if (!canLoad(unit)) {    throw new IllegalArgumentException("Can not load " + unit.getShortName() + " into this bay. "+ currentSpace);  }  currentSpace-=1;  if ((unit.game.getPhase() != IGame.Phase.PHASE_DEPLOYMENT) && (unit.game.getPhase() != IGame.Phase.PHASE_LOUNGE)) {    loadedThisTurn+=1;  }  troops.addElement(unit.getId());}  }
class C{  public boolean isProjectionStep(){  return projectionStep;}  }
class C{  protected int skipWhitespace(int c) throws IOException {  while (c == ' ' || c == '\t') {    c=readCodePoint();  }  return c;}  }
class C{  private void generateRandom(){  int step=k - overlap;  int numberOfFunctions=(n - k) / step + 1;  function=new double[numberOfFunctions][1 << k];  permutation=new int[n];  for (int i=0; i + k <= n; i+=step) {    double max=Double.NEGATIVE_INFINITY;    for (int j=0; j < (1 << k); j++) {      double value=PRNG.nextDouble();      function[i / step][j]=value;      max=Math.max(max,value);    }  }  for (int i=0; i < n; i++) {    permutation[i]=i;  }  PRNG.shuffle(permutation);}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.036 -0500",hash_original_method="35C4B35D5036F5DD5E458797A063F760",hash_generated_method="06BDD6176671442A00DBFA1F4DCB3855") private void nativeNotifyAnimationStarted(int nativeClass){  addTaint(nativeClass);}  }
class C{  public void copyFrom(ParameterProperty other){  this.bits=other.bits;}  }
class C{  public static String format(String message,Object[] arguments){  return MessageFormat.format(message,arguments);}  }
class C{  static void paintDisabledText(Style style,Graphics g,String text,int x,int y){  g.setColor(style.getHighLightColor());  g.drawString(text,x + 1,y + 1);  g.setColor(style.getShadowColor());  g.drawString(text,x,y);}  }
class C{  public void assertSame(Object expected,Object actual,String errorMessage){  TestUtils.assertSame(expected,actual,errorMessage);}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.129 -0500",hash_original_method="A70831539166366B9681E2ACC95982AC",hash_generated_method="1AEA9BD8E826B96D44420B922A4B6FA3") private void parseSmsStatusReport(PduParser p,int firstByte){  isStatusReportMessage=true;  forSubmit=(firstByte & 0x20) == 0x00;  messageRef=p.getByte();  recipientAddress=p.getAddress();  scTimeMillis=p.getSCTimestampMillis();  dischargeTimeMillis=p.getSCTimestampMillis();  status=p.getByte();  if (p.moreDataPresent()) {    int extraParams=p.getByte();    int moreExtraParams=extraParams;    while ((moreExtraParams & 0x80) != 0) {      moreExtraParams=p.getByte();    }    if ((extraParams & 0x01) != 0) {      protocolIdentifier=p.getByte();    }    if ((extraParams & 0x02) != 0) {      dataCodingScheme=p.getByte();    }    if ((extraParams & 0x04) != 0) {      boolean hasUserDataHeader=(firstByte & 0x40) == 0x40;      parseUserData(p,hasUserDataHeader);    }  }}  }
class C{  public void snippetResin3xLocalDeploy() throws Exception {  InstalledLocalContainer container=new Resin3xInstalledLocalContainer(new Resin3xStandaloneLocalConfiguration("target/myresin3x"));  container.setHome("c:/apps/resin-3.0.18");  container.start();  Deployable war=new WAR("path/to/simple.war");  Deployer deployer=new ResinInstalledLocalDeployer(container);  deployer.deploy(war);  deployer.deploy(war,new URLDeployableMonitor(new URL("http://server:port/some/url")));  container.stop();}  }
class C{  public List<String> hostVcenterChangeDeclineDetails(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter){  Host host=_dbClient.queryObject(Host.class,hostId);  return Lists.newArrayList(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostVcenterChangeDeclineDetails",host.getLabel()));}  }
class C{  private void fillComboReport(int AD_PrintFormat_ID){  comboReport.removeEventListener(Events.ON_SELECT,this);  comboReport.getItems().clear();  KeyNamePair selectValue=null;  String sql=MRole.getDefault().addAccessSQL("SELECT AD_PrintFormat_ID, Name, Description " + "FROM AD_PrintFormat " + "WHERE AD_Table_ID=? "+ "AND IsActive='Y' "+ "ORDER BY Name","AD_PrintFormat",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  int AD_Table_ID=m_reportEngine.getPrintFormat().getAD_Table_ID();  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair pp=new KeyNamePair(rs.getInt(1),rs.getString(2));      Listitem li=comboReport.appendItem(pp.getName(),pp.getKey());      if (rs.getInt(1) == AD_PrintFormat_ID) {        selectValue=pp;        if (selectValue != null)         comboReport.setSelectedItem(li);      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  StringBuffer sb=new StringBuffer("** ").append(Msg.getMsg(Env.getCtx(),"NewReport")).append(" **");  KeyNamePair pp=new KeyNamePair(-1,sb.toString());  comboReport.appendItem(pp.getName(),pp.getKey());  sb=new StringBuffer("** ").append(Msg.getMsg(m_ctx,"CopyReport")).append(" **");  pp=new KeyNamePair(-2,sb.toString());  comboReport.addItem(pp);  comboReport.addEventListener(Events.ON_SELECT,this);}  }
class C{  public FileDocument(final File file){  if (file == null) {    throw new NullPointerException();  }  if (!file.exists()) {    throw new DSSException("File Not Found: " + file.getAbsolutePath());  }  this.file=file;  this.name=file.getName();  this.mimeType=MimeType.fromFileName(file.getName());}  }
class C{  T versionStrict(boolean versionStrict){  this.versionStrict=versionStrict;  return this_;}  }
class C{  public ConstraintExpr_ createConstraintExpr_(){  ConstraintExpr_Impl constraintExpr_=new ConstraintExpr_Impl();  return constraintExpr_;}  }
class C{  public static void sendRefusal(InternalDistributedMember recipient,int processorId,DM dm){  Assert.assertTrue(recipient != null,"ManageBackupBucketReplyMessage NULL reply message");  ManageBackupBucketReplyMessage m=new ManageBackupBucketReplyMessage(processorId,false,false);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static ListContainersParams create(){  return new ListContainersParams();}  }
class C{  public OFRoleVendorData(int dataType,int role){  super(dataType);  this.role=role;}  }
class C{  public SpringWriteTemplate(TransactionManager transactionManager) throws Exception {  setTransactionManager(transactionManager);  afterPropertiesSet();}  }
class C{  private void assertActive() throws ReplicatorException {  if (!active) {    throw new ReplicatorException("Channel assignment service is not enabled");  }}  }
class C{  private boolean processAuthenticationResponse(final HttpMethod method){  LOG.trace("enter HttpMethodBase.processAuthenticationResponse(" + "HttpState, HttpConnection)");  try {switch (method.getStatusCode()) {case HttpStatus.SC_UNAUTHORIZED:      return processWWWAuthChallenge(method);case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:    return processProxyAuthChallenge(method);default :  return false;}} catch (final Exception e) {if (LOG.isErrorEnabled()) {LOG.error(e.getMessage(),e);}return false;}}  }
class C{  public static float toUnit(short fromUnit,float value,short toUnit){  if (fromUnit == 1) {    fromUnit=2;  }  if (toUnit == 1) {    toUnit=2;  }  return (float)(K[fromUnit - 2][toUnit - 2] * value);}  }
class C{  public void testLotsOfBindings() throws Exception {  doTestLotsOfBindings(Byte.MAX_VALUE - 1);  doTestLotsOfBindings(Byte.MAX_VALUE);  doTestLotsOfBindings(Byte.MAX_VALUE + 1);}  }
class C{  public void doTestEntityExpiration() throws Exception {  IDeviceListener mockListener=createMock(IDeviceListener.class);  expect(mockListener.getName()).andReturn("mockListener").anyTimes();  expect(mockListener.isCallbackOrderingPostreq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();  expect(mockListener.isCallbackOrderingPrereq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();  ITopologyService mockTopology=createMock(ITopologyService.class);  expect(mockTopology.isAttachmentPointPort(DatapathId.of(anyLong()),OFPort.of(anyShort()))).andReturn(true).anyTimes();  expect(mockTopology.isBroadcastDomainPort(DatapathId.of(1L),OFPort.of(1))).andReturn(false).anyTimes();  expect(mockTopology.isBroadcastDomainPort(DatapathId.of(5L),OFPort.of(1))).andReturn(false).anyTimes();  expect(mockTopology.getL2DomainId(DatapathId.of(1L))).andReturn(DatapathId.of(1L)).anyTimes();  expect(mockTopology.getL2DomainId(DatapathId.of(5L))).andReturn(DatapathId.of(5L)).anyTimes();  expect(mockTopology.isConsistent(DatapathId.of(1L),OFPort.of(1),DatapathId.of(5L),OFPort.of(1))).andReturn(false).anyTimes();  Date topologyUpdateTime=new Date();  expect(mockTopology.getLastUpdateTime()).andReturn(topologyUpdateTime).anyTimes();  replay(mockTopology);  deviceManager.topology=mockTopology;  Calendar c=Calendar.getInstance();  Entity entity1=new Entity(MacAddress.of(1L),null,IPv4Address.of(2),DatapathId.of(1L),OFPort.of(1),c.getTime());  c.add(Calendar.MILLISECOND,-DeviceManagerImpl.ENTITY_TIMEOUT - 1);  Entity entity2=new Entity(MacAddress.of(1L),null,IPv4Address.of(1),DatapathId.of(5L),OFPort.of(1),c.getTime());  deviceManager.learnDeviceByEntity(entity1);  IDevice d=deviceManager.learnDeviceByEntity(entity2);  assertArrayEquals(new IPv4Address[]{IPv4Address.of(1),IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  Iterator<? extends IDevice> diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(1),null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(2),null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  replay(mockListener);  deviceManager.addListener(mockListener);  verify(mockListener);  reset(mockListener);  mockListener.deviceIPV4AddrChanged(isA(IDevice.class));  replay(mockListener);  deviceManager.entityCleanupTask.reschedule(0,null);  d=deviceManager.getDevice(d.getDeviceKey());  assertArrayEquals(new IPv4Address[]{IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(2),null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(1),null,null);  assertFalse(diter.hasNext());  d=deviceManager.findDevice(MacAddress.of(1L),null,null,null,null);  assertArrayEquals(new IPv4Address[]{IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  verify(mockListener);}  }
class C{  public String encode(String str){  if (str == null) {    str="null";  }  int n=str.length();  int j=_first.firstEncodedOffset(str,0,n);  if (j == n) {    return Encode.encode(_last,str);  }  final int remaining=n - j;  final int m=j + _first.maxEncodedLength(n);  CharBuffer input=CharBuffer.allocate(m);  str.getChars(0,j,input.array(),0);  str.getChars(j,n,input.array(),m - remaining);  input.limit(m).position(m - remaining);  CharBuffer tmp=input.duplicate();  tmp.position(j);  CoderResult cr=_first.encode(input,tmp,true);  assert cr.isUnderflow() : "maxEncodedLength was incorrect";  CharBuffer output=CharBuffer.allocate(_last.maxEncodedLength(tmp.position()));  tmp.flip();  cr=_last.encode(tmp,output,true);  assert cr.isUnderflow() : "maxEncodedLength was incorrect";  return new String(output.array(),0,output.position());}  }
class C{  protected void recalculateInsetRect(Rect outerBounds){  final int parentWidth=outerBounds.width();  final int parentHeight=outerBounds.height();  if (!mIsWidthSet) {    mInsetRect.left=outerBounds.left + (mIsLeftPercent ? parentWidth * mLeft / 100 : mLeft);    mInsetRect.right=outerBounds.right - (mIsRightPercent ? parentWidth * mRight / 100 : mRight);  } else   if (mIsRightSet && !mIsLeftSet) {    mInsetRect.right=outerBounds.right - (mIsRightPercent ? parentWidth * mRight / 100 : mRight);    mInsetRect.left=mInsetRect.right - (mIsWidthPercent ? parentWidth * mWidth / 100 : mWidth);  } else {    mInsetRect.left=outerBounds.left + (mIsLeftPercent ? parentWidth * mLeft / 100 : mLeft);    mInsetRect.right=mInsetRect.left + (mIsWidthPercent ? parentWidth * mWidth / 100 : mWidth);  }  if (!mIsHeightSet) {    mInsetRect.top=outerBounds.top + (mIsTopPercent ? parentHeight * mTop / 100 : mTop);    mInsetRect.bottom=outerBounds.bottom - (mIsBottomPercent ? parentHeight * mBottom / 100 : mBottom);  } else   if (mIsBottomSet && !mIsTopSet) {    mInsetRect.bottom=outerBounds.bottom - (mIsBottomPercent ? parentHeight * mBottom / 100 : mBottom);    mInsetRect.top=mInsetRect.bottom - (mIsHeightPercent ? parentHeight * mHeight / 100 : mHeight);  } else {    mInsetRect.top=outerBounds.top + (mIsTopPercent ? parentHeight * mTop / 100 : mTop);    mInsetRect.bottom=mInsetRect.top + (mIsHeightPercent ? parentHeight * mHeight / 100 : mHeight);  }}  }
class C{  private static void sbrHfInverseFilter(float alpha0[][],float alpha1[][],final float Xlow[][][],int k0){  float phi[][][]=new float[3][2][2];  for (int k=0; k < k0; k++) {    SBRDSP.autocorrelate(Xlow[k],phi);    float dk=phi[2][1][0] * phi[1][0][0] - (phi[1][1][0] * phi[1][1][0] + phi[1][1][1] * phi[1][1][1]) / 1.000001f;    if (dk == 0f) {      alpha1[k][0]=0f;      alpha1[k][1]=0f;    } else {      float tempReal, tempIm;      tempReal=phi[0][0][0] * phi[1][1][0] - phi[0][0][1] * phi[1][1][1] - phi[0][1][0] * phi[1][0][0];      tempIm=phi[0][0][0] * phi[1][1][1] + phi[0][0][1] * phi[1][1][0] - phi[0][1][1] * phi[1][0][0];      alpha1[k][0]=tempReal / dk;      alpha1[k][1]=tempIm / dk;    }    if (phi[1][0][0] == 0f) {      alpha0[k][0]=0f;      alpha0[k][1]=0f;    } else {      float tempReal, tempIm;      tempReal=phi[0][0][0] + alpha1[k][0] * phi[1][1][0] + alpha1[k][1] * phi[1][1][1];      tempIm=phi[0][0][1] + alpha1[k][1] * phi[1][1][0] - alpha1[k][0] * phi[1][1][1];      alpha0[k][0]=-tempReal / phi[1][0][0];      alpha0[k][1]=-tempIm / phi[1][0][0];    }    if (alpha1[k][0] * alpha1[k][0] + alpha1[k][1] * alpha1[k][1] >= 16.0f || alpha0[k][0] * alpha0[k][0] + alpha0[k][1] * alpha0[k][1] >= 16.0f) {      alpha1[k][0]=0f;      alpha1[k][1]=0f;      alpha0[k][0]=0f;      alpha0[k][1]=0f;    }  }}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){  msg[offset]=0x03;}  }
class C{  static public ISeq list(){  return null;}  }
class C{  public boolean hasClosedDate(){  return hasExtension(ClosedDate.class);}  }
class C{  public GetIDs(int i){  m_i=i;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public final CC growY(Float w){  ver.setGrow(w);  return this;}  }
class C{  void addIndex(Index index){  indexes.add(index);}  }
class C{  @Override public void dragExit(DragSourceEvent dsde){}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public DefaultLmlParser(final LmlData data,final LmlSyntax syntax,final LmlTemplateReader templateReader,final LmlStyleSheet styleSheet,final boolean strict){  super(data,syntax,templateReader,styleSheet,strict);}  }
class C{  public static boolean contains(Rectangle2D.Double r1,Rectangle2D.Double r2){  return (r2.x >= r1.x && r2.y >= r1.y && (r2.x + max(0,r2.width)) <= r1.x + max(0,r1.width) && (r2.y + max(0,r2.height)) <= r1.y + max(0,r1.height));}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  static int binSearch(int[] list,int nUsed,int chr){  int low=0;  int high=nUsed - 1;  while (low <= high) {    int mid=(low + high) >>> 1;    int midVal=list[mid];    if (midVal < chr) {      low=mid + 1;    } else     if (midVal > chr) {      high=mid - 1;    } else {      return mid;    }  }  return -(low + 1);}  }
class C{  public static ColumnCriterion createColumnCriterion(ParameterHandler handler,double minimalGain) throws OperatorException {  String criterionName=handler.getParameterAsString(PARAMETER_CRITERION);  Class<?> criterionClass=null;  for (int i=0; i < CRITERIA_NAMES.length; i++) {    if (CRITERIA_NAMES[i].equals(criterionName)) {      criterionClass=CRITERIA_CLASSES[i];    }  }  if (criterionClass == null && criterionName != null) {    try {      criterionClass=Tools.classForName(criterionName);    } catch (    ClassNotFoundException e) {      throw new OperatorException("Cannot find criterion '" + criterionName + "' and cannot instantiate a class with this name.");    }  }  if (criterionClass != null) {    try {      ColumnCriterion criterion=(ColumnCriterion)criterionClass.newInstance();      if (criterion instanceof MinimalGainHandler) {        ((MinimalGainHandler)criterion).setMinimalGain(minimalGain);      }      return criterion;    } catch (    InstantiationException e) {      throw new OperatorException("Cannot instantiate criterion class '" + criterionClass.getName() + "'.");    }catch (    IllegalAccessException e) {      throw new OperatorException("Cannot access criterion class '" + criterionClass.getName() + "'.");    }  } else {    throw new OperatorException("No relevance criterion defined.");  }}  }
class C{  public static byte[] readFully(InputStream is) throws IOException {  byte[] buf=new byte[4096];  ByteArrayOutputStream os=new ByteArrayOutputStream(4096);  for (; ; ) {    int bytesRead=is.read(buf);    if (bytesRead == -1)     break;    os.write(buf,0,bytesRead);  }  return os.toByteArray();}  }
class C{  private List<Set<IonIndependenceFacts>> findSepAndAssoc(Graph graph){  Set<IonIndependenceFacts> separations=new HashSet<>();  Set<IonIndependenceFacts> associations=new HashSet<>();  List<NodePair> allNodes=allNodePairs(graph.getNodes());  for (  NodePair pair : allNodes) {    Node x=pair.getFirst();    Node y=pair.getSecond();    List<Node> variables=new ArrayList<>(graph.getNodes());    variables.remove(x);    variables.remove(y);    List<Set<Node>> subsets=SearchGraphUtils.powerSet(variables);    IonIndependenceFacts indep=new IonIndependenceFacts(x,y,new HashSet<List<Node>>());    IonIndependenceFacts assoc=new IonIndependenceFacts(x,y,new HashSet<List<Node>>());    boolean addIndep=false;    boolean addAssoc=false;    for (    Graph pag : input) {      for (      Set<Node> subset : subsets) {        if (containsAll(pag,subset,pair)) {          Node pagX=pag.getNode(x.getName());          Node pagY=pag.getNode(y.getName());          ArrayList<Node> pagSubset=new ArrayList<>();          for (          Node node : subset) {            pagSubset.add(pag.getNode(node.getName()));          }          if (pag.isDSeparatedFrom(pagX,pagY,new ArrayList<>(pagSubset))) {            if (!pag.isAdjacentTo(pagX,pagY)) {              addIndep=true;              indep.addMoreZ(new ArrayList<>(subset));            }          } else {            addAssoc=true;            assoc.addMoreZ(new ArrayList<>(subset));          }        }      }    }    if (addIndep)     separations.add(indep);    if (addAssoc)     associations.add(assoc);  }  List<Set<IonIndependenceFacts>> facts=new ArrayList<>(2);  facts.add(0,separations);  facts.add(1,associations);  return facts;}  }
class C{  public SemPm(Graph graph){  this(new SemGraph(graph));}  }
class C{  public synchronized Iterator<E> iterator(){  ArrayList<E> v=new ArrayList<E>(this);  return v.iterator();}  }
class C{  public GPathResult find(final Closure closure){  return this;}  }
class C{  private static void outputSetting(String setting){  if (out != null && !writtenSettings.contains(setting)) {    if (writtenSettings.size() == 0) {      out.println("# Settings for run " + (runIndex + 1));    }    out.println(setting);    writtenSettings.add(setting);  }}  }
class C{  public static void registerSerDeser(Class<?> clazz,EntitySerDeser<?> entitySerDeser){  _serDeserMap.put(clazz,entitySerDeser);}  }
class C{  public synchronized boolean visit(final int depth,final Value pred,final URI edge){  boolean ret=false;  if (this.depth.compareAndSet(-1,depth)) {    ret=true;  }  if (pred != null && this.depth() > 0 && this.depth() == depth) {    addPredecessor(pred,edge);  }  return ret;}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  return super.modelToView(p0,b0,p1,b1,adjustAllocation(a));}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.SERVICE_INVOCATION;}  }
class C{  public boolean isOnMap(Projection proj){  OMRect bds=getBounds();  bds.generate(proj);  Shape s=bds.getShape();  return s.intersects(0,0,proj.getWidth(),proj.getHeight());}  }
class C{  public static String bytesToHexString(final byte[] bytes){  return bytesToHexString(bytes,null);}  }
class C{  public static int UTF16toUTF8(final CharSequence s,final int offset,final int length,byte[] out){  return UTF16toUTF8(s,offset,length,out,0);}  }
class C{  public void load(){}  }
class C{  public void onAsyncTaskCompleted(){  removeDialog(DIALOG_PROGRESS_ID);  setResult(RESULT_OK);  finish();}  }
class C{  public static void safeIncr(String counterName){  com.twitter.heron.api.metric.GlobalMetrics.safeIncr(counterName);}  }
class C{  public ClientResponse post(URI uri,String body){  return client.resource(uri).type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class,body);}  }
class C{  @Deprecated public static String last(String list,String delimiter){  return last(list,delimiter,true);}  }
class C{  public Polygon2D center(){  return center(null);}  }
class C{  @Override public boolean equals(Object o){  if (!sameClassAs(o))   return false;  SpatialDistanceQuery other=(SpatialDistanceQuery)o;  return this.latCenter == other.latCenter && this.lonCenter == other.lonCenter && this.latMin == other.latMin && this.latMax == other.latMax && this.lonMin == other.lonMin && this.lonMax == other.lonMax && this.lon2Min == other.lon2Min && this.lon2Max == other.lon2Max && this.dist == other.dist && this.planetRadius == other.planetRadius && this.calcDist == other.calcDist && this.lonSource.equals(other.lonSource) && this.latSource.equals(other.latSource);}  }
class C{  public boolean match(Element e,String pseudoE){  String attr=e.getAttribute(getLocalName());  String val=getValue();  int i=attr.indexOf(val);  if (i == -1) {    return false;  }  if (i != 0 && !Character.isSpaceChar(attr.charAt(i - 1))) {    return false;  }  int j=i + val.length();  return (j == attr.length() || (j < attr.length() && Character.isSpaceChar(attr.charAt(j))));}  }
class C{  public StringBuffer append(int i){  IntegralToString.appendInt(this,i);  return this;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  private long copyImage(Graphics g,BufferedImage image,int x,int y){  long startTime=System.nanoTime();  for (int i=0; i < 100; ++i) {    g.drawImage(image,x,y,null);  }  Toolkit.getDefaultToolkit().sync();  long endTime=System.nanoTime();  return (endTime - startTime) / 1000000;}  }
class C{  public boolean hasDefaultValue(){  return hasDefault;}  }
class C{  public static String encodeUrlParameterValue(String value){  try {    value=URLEncoder.encode(value,Constants.ENCODING_ISO_8859_1);  } catch (  UnsupportedEncodingException e) {  }  return value;}  }
class C{  public static void writeStringASCII(ByteBuf stream,String str) throws UnsupportedEncodingException {  final byte[] bytes=str.getBytes("US-ASCII");  stream.writeInt(str.length());  stream.writeBytes(bytes);}  }
class C{  public ComputeTaskTimeoutCheckedException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public RaceGUI(String appName){  UIManager.put("swing.boldMetal",Boolean.FALSE);  JFrame f=new JFrame(appName);  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setLayout(new BorderLayout());  track=new TrackView();  f.add(track,BorderLayout.CENTER);  controlPanel=new RaceControlPanel();  f.add(controlPanel,BorderLayout.SOUTH);  f.pack();  f.setVisible(true);}  }
class C{  public String inputOrderTipText(){  return "The input order to use.";}  }
class C{  private void grantMaxUserRoles(PlatformUser customerUser){  grantRole(customerUser,UserRoleType.ORGANIZATION_ADMIN);  if (customerUser.getOrganization().hasRole(OrganizationRoleType.TECHNOLOGY_PROVIDER)) {    grantRole(customerUser,UserRoleType.TECHNOLOGY_MANAGER);  }  if (customerUser.getOrganization().hasRole(OrganizationRoleType.SUPPLIER)) {    grantRole(customerUser,UserRoleType.SERVICE_MANAGER);  }}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof Association)) {    return false;  }  Association otherAssoc=(Association)other;  boolean isBasicEquals, isActionListEquals, isFileExtListEquals;  String otherDesc=otherAssoc.getDescription();  String otherIconFileName=otherAssoc.getIconFileName();  String otherMimeType=otherAssoc.getMimeType();  isBasicEquals=((description == null ? otherDesc == null : description.equals(otherDesc)) && (iconFileName == null ? otherIconFileName == null : iconFileName.equals(otherIconFileName)) && (mimeType == null ? otherMimeType == null : mimeType.equals(otherMimeType)));  if (!isBasicEquals) {    return false;  }  List<String> otherFileExtList=otherAssoc.getFileExtList();  isFileExtListEquals=false;  if ((fileExtensionList == null) && (otherFileExtList == null)) {    isFileExtListEquals=true;  } else   if ((fileExtensionList != null) && (otherFileExtList != null)) {    if ((fileExtensionList.containsAll(otherFileExtList)) && (otherFileExtList.containsAll(fileExtensionList))) {      isFileExtListEquals=true;    }  }  if (!isFileExtListEquals) {    return false;  }  List<Action> otherActionList=otherAssoc.getActionList();  isActionListEquals=false;  if ((actionList == null) && (otherActionList != null)) {    isActionListEquals=true;  } else   if ((actionList != null) && (otherActionList != null)) {    if ((actionList.containsAll(otherActionList)) && (otherActionList.containsAll(actionList))) {      isActionListEquals=true;    }  }  return isActionListEquals;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  private void checkArray(String msg,Object expected,Object result){  assertNotNull(msg + " Expected Null",expected);  assertNotNull(msg + " Result   Null",result);  assertTrue(msg + " Result   not array",result.getClass().isArray());  assertTrue(msg + " Expected not array",expected.getClass().isArray());  int resultLth=Array.getLength(result);  assertEquals(msg + " Size",Array.getLength(expected),resultLth);  assertEquals(msg + " Type",expected.getClass(),result.getClass());  for (int i=0; i < resultLth; i++) {    Object expectElement=Array.get(expected,i);    Object resultElement=Array.get(result,i);    assertEquals(msg + " Element " + i,expectElement,resultElement);  }}  }
class C{  protected void configureRequestedContentTypeResolver(RequestedContentTypeResolverBuilder builder){}  }
class C{  public static GdbRun parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  for (  String line : output.split("\n")) {    Matcher matcher=GDB_BREAKPOINT.matcher(line);    if (matcher.find()) {      String file=matcher.group(1);      String lineNumber=matcher.group(2);      Location location=new LocationImpl(file,Integer.parseInt(lineNumber));      return new GdbRun(new BreakpointImpl(location));    }  }  return new GdbRun(null);}  }
class C{  public static int ENOMEDIUM(){  return 123;}  }
class C{  public void processData(Object result,boolean lastMsg,DistributedMember memberID){  boolean completelyDone=false;  if (lastMsg) {    this.totalLastMsgRecieved++;  }  if (this.totalLastMsgRecieved == this.recipients.size()) {    completelyDone=true;  }  ((PartitionedRegionFunctionResultSender)resultSender).lastResult(result,completelyDone,this.reply,memberID);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return COUNT;default :return null;}}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  protected void addMapContent(MapHandler mapHandler,BranchGroup worldGroup,int contentMask){  Projection projection=null;  if (mapHandler != null) {    MapBean mapBean=(MapBean)mapHandler.get("com.bbn.openmap.MapBean");    if (mapBean != null) {      projection=mapBean.getProjection();    }    TransformGroup mapTransformGroup=new TransformGroup();    mapTransformGroup.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);    mapTransformGroup.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);    Debug.message("3d","OM3DViewer: adding map content");    BoundingSphere bs=new BoundingSphere(ORIGIN,boundsDimension);    background.setApplicationBounds(bs);    mapTransformGroup.addChild(background);    createMapContent(mapTransformGroup,mapHandler,contentMask);    AmbientLight ambientLight=new AmbientLight();    ambientLight.setInfluencingBounds(bs);    worldGroup.addChild(ambientLight);    Behavior beh=getMotionBehavior((TransformGroup)getCamera().getNode(),projection);    beh.setSchedulingBounds(bs);    worldGroup.addChild(beh);    worldGroup.addChild(mapTransformGroup);  }}  }
class C{  boolean isExpanded(){  return mSubNodes != null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.INVOCABLE_ENDPOINT__NAME:    return getName();case EipPackage.INVOCABLE_ENDPOINT__TO_CHANNELS:  return getToChannels();case EipPackage.INVOCABLE_ENDPOINT__FROM_CHANNELS:return getFromChannels();case EipPackage.INVOCABLE_ENDPOINT__OWNED_SERVICE_INVOCATIONS:return getOwnedServiceInvocations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public boolean isFeeValid(final Transaction transaction,final BlockHeight blockHeight){  final Amount minimumFee=this.calculateMinimumFee(transaction);  final long FORK_HEIGHT=92000;  final Amount maxCacheFee=Amount.fromNem(1000);switch (transaction.getType()) {case TransactionTypes.MULTISIG_SIGNATURE:    if (FORK_HEIGHT > blockHeight.getRaw()) {      return 0 == transaction.getFee().compareTo(minimumFee);    }  return 0 <= transaction.getFee().compareTo(minimumFee) && 0 >= transaction.getFee().compareTo(maxCacheFee);}return transaction.getFee().compareTo(minimumFee) >= 0;}  }
class C{  @Override public void replaceNullIDs(VersionSource memberID){  if (this.getMemberID() == null) {    throw new AssertionError("Member id should not be null for persistent version tags");  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");  Sender sender=(Sender)context.getBean("sender");  String text=request.getParameter("text");  sender.send(text);  response.encodeRedirectUrl("/index.jsp");  System.out.println("send....");}  }
class C{  public AgentConfigImpl(File propFile){  this();  Properties props=new Properties();  if (propFile.exists()) {    try {      FileInputStream in=new FileInputStream(propFile);      props.load(in);      in.close();    } catch (    java.io.IOException e) {      throw new GemFireIOException(LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(propFile),e);    }  } else {    throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_SPECIFIED_PROPERTIES_FILE_DOES_NOT_EXIST_0.toLocalizedString(propFile));  }  initialize(props);}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public boolean isEnableDecluttering(){  return this.enableDecluttering;}  }
class C{  @Override public void exportGroupDelete(URI export,String opId) throws ControllerException {  blockRMI("exportGroupDelete",export,opId);}  }
class C{  @NotNull public OptionalLong findOptionalLong(@NotNull @SQL String sql,Object... args){  return findOptionalLong(SqlQuery.query(sql,args));}  }
class C{  public void waitForRequestSent(){  if (!delayResponse || !useLowLevel) {    Log.d(LOGTAG," Cant do this without delayReponse set ");    return;  }synchronized (syncObj) {    try {      syncObj.wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  public static BufferedWriter newWriter(Path self,String charset,boolean append,boolean writeBom) throws IOException {  boolean shouldWriteBom=writeBom && !self.toFile().exists();  if (append) {    BufferedWriter writer=Files.newBufferedWriter(self,Charset.forName(charset),CREATE,APPEND);    if (shouldWriteBom) {      IOGroovyMethods.writeUTF16BomIfRequired(writer,charset);    }    return writer;  } else {    OutputStream out=Files.newOutputStream(self);    if (shouldWriteBom) {      IOGroovyMethods.writeUTF16BomIfRequired(out,charset);    }    return new BufferedWriter(new OutputStreamWriter(out,Charset.forName(charset)));  }}  }
class C{  public static String formatTrackLength(long timeMs){  long hours=TimeUnit.MILLISECONDS.toHours(timeMs);  long minutes=TimeUnit.MILLISECONDS.toMinutes(timeMs) - TimeUnit.HOURS.toMinutes(hours);  long seconds=TimeUnit.MILLISECONDS.toSeconds(timeMs) - TimeUnit.HOURS.toSeconds(hours) - TimeUnit.MINUTES.toSeconds(minutes);  if (hours > 0) {    return String.format("%02d:%02d:%02d",hours,minutes,seconds);  } else   if (minutes > 0) {    return String.format("%02d:%02d",minutes,seconds);  } else   if (seconds > 0) {    return String.format("%02ds",seconds);  } else   if (seconds == 0) {    return "-:--";  } else {    return "N/A";  }}  }
class C{  public TeXFormula(TeXFormula f){  if (f != null) {    addImpl(f);  }}  }
class C{  public static StoredLagGraphParams serializableInstance(){  return new StoredLagGraphParams();}  }
class C{  public StringFormatter(final String formatString){  staticParts=new ArrayList<String>();  parameterPositions=new ArrayList<String>();  parameter=new HashMap<String,String>();  String current=formatString;  int index;  boolean hasStart=false;  do {    if (hasStart) {      index=current.indexOf(PARAMETER_END);    } else {      index=current.indexOf(PARAMETER_START);    }    if (index >= 0) {      if (hasStart) {        final String param=current.substring(PARAMETER_START.length(),index);        current=current.substring(index + PARAMETER_END.length());        parameter.put(param,"");        parameterPositions.add(param);      } else {        final String s=current.substring(0,index);        current=current.substring(index);        staticParts.add(s);      }      hasStart=!hasStart;    }  } while (index >= 0);  staticParts.add(current);}  }
class C{  private static boolean isSourceNewer(URL source,ClassNode cls){  try {    long lastMod;    if (source.getProtocol().equals("file")) {      String path=source.getPath().replace('/',File.separatorChar).replace('|',':');      File file=new File(path);      lastMod=file.lastModified();    } else {      URLConnection conn=source.openConnection();      lastMod=conn.getLastModified();      conn.getInputStream().close();    }    return lastMod > getTimeStamp(cls);  } catch (  IOException e) {    return false;  }}  }
class C{  public MonoMap(Publisher<? extends T> source,Function<? super T,? extends R> mapper){  super(source);  this.mapper=Objects.requireNonNull(mapper,"mapper");}  }
class C{  public final void swap(int first,int second){  E in=get(first);  set(first,get(second));  set(second,in);}  }
class C{  public static void openDesktop(File file){  if (!java.awt.Desktop.isDesktopSupported()) {    log.warn("desktop not supported");    return;  }  java.awt.Desktop desktop=java.awt.Desktop.getDesktop();  if (!desktop.isSupported(java.awt.Desktop.Action.OPEN)) {    log.warn("desktop open not supported");    return;  }  try {    desktop.open(file);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void removeEntries(){  table.clear();}  }
class C{  private void initialiseDirectory(){  if (temporaryDirectoryName != null)   return;  String hostName;  try {    hostName=InetAddress.getLocalHost().getHostName();  } catch (  UnknownHostException e) {    hostName="localhost";  }  StringBuilder directoryNameStart=new StringBuilder(hostName);  directoryNameStart.append('_');  directoryNameStart.append(DATE_FORMAT.format(new Date()));  directoryNameStart.append('_');  directoryNameStart.append(Long.toString(Math.abs(System.nanoTime()) % 1000000,36));  temporaryDirectoryName=directoryNameStart.toString();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.IDENTIFIER_REF__STRICT_MODE:    setStrictMode((Boolean)newValue);  return;case N4JSPackage.IDENTIFIER_REF__ID:setId((IdentifiableElement)newValue);return;case N4JSPackage.IDENTIFIER_REF__ID_AS_TEXT:setIdAsText((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public EntidadException(String message){  this(message,null);}  }
class C{  public GitlabMilestone createMilestone(Serializable projectId,GitlabMilestone milestone) throws IOException {  String title=milestone.getTitle();  String description=milestone.getDescription();  Date dateDue=milestone.getDueDate();  return createMilestone(projectId,title,description,dateDue);}  }
class C{  @Override public void flush(){}  }
class C{  public static String stripPrefixIgnoreCase(String str,String prefix){  if (str.length() >= prefix.length() && str.substring(0,prefix.length()).equalsIgnoreCase(prefix)) {    return str.substring(prefix.length());  }  return null;}  }
class C{  public static String cutFromIndexOf(String string,String substring){  int i=string.indexOf(substring);  if (i != -1) {    string=string.substring(i);  }  return string;}  }
class C{  private boolean seekAndReadNextLabel() throws IOException {  readInputBuffer();  while (mInputBufferLength > 0 && mInputBufferPosition < mInputBufferLength) {    final byte b=mInputBuffer[mInputBufferPosition];    if (b == '>') {      mInputBufferPosition++;      return readLabel();    } else {      if (b == '@') {        throw new NoTalkbackSlimException(ErrorType.FASTQ);      } else       if (!Character.isWhitespace((char)b)) {        throw new NoTalkbackSlimException(ErrorType.BAD_FASTA_LABEL,name() != null ? name() : "<none>");      }    }    mInputBufferPosition++;    readInputBuffer();  }  final String filename=mSourceIt instanceof FileStreamIterator ? ((FileStreamIterator)mSourceIt).currentFile().getPath() : "<Not known>";  Diagnostic.warning(WarningType.NOT_FASTA_FILE,filename);  return false;}  }
class C{  public void paintInternalFrameBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override public ActionNode copy(){  return new ActionNode(nodeId,actionValues);}  }
class C{  @Override public String findEnumValue(Enum<?> e){  Class<?> enumClass=e.getDeclaringClass();  String enumValue=e.name();  try {    XmlEnumValue xmlEnumValue=enumClass.getDeclaredField(enumValue).getAnnotation(XmlEnumValue.class);    return (xmlEnumValue != null) ? xmlEnumValue.value() : enumValue;  } catch (  NoSuchFieldException e1) {    throw new IllegalStateException("Could not locate Enum entry '" + enumValue + "' (Enum class "+ enumClass.getName()+ ")",e1);  }}  }
class C{  public static RemoteViews createRemoteViews(Context context,boolean showPlayIcon){  RemoteViews remoteViews=new RemoteViews(context.getPackageName(),R.layout.remote_view);  int iconRes=showPlayIcon ? R.drawable.ic_play : R.drawable.ic_stop;  remoteViews.setImageViewResource(R.id.play_pause,iconRes);  return remoteViews;}  }
class C{  protected void addLogSegmentToCache(String name,LogSegmentMetadata metadata){  logSegmentCache.add(name,metadata);  if (!metadata.isInProgress() && (lastLedgerRollingTimeMillis < metadata.getCompletionTime())) {    lastLedgerRollingTimeMillis=metadata.getCompletionTime();  }  if (reportGetSegmentStats) {    long ts=System.currentTimeMillis();    if (metadata.isInProgress()) {      long elapsedMillis=ts - metadata.getFirstTxId();      long elapsedMicroSec=TimeUnit.MILLISECONDS.toMicros(elapsedMillis);      if (elapsedMicroSec > 0) {        if (elapsedMillis > metadataLatencyWarnThresholdMillis) {          LOG.warn("{} received inprogress log segment in {} millis: {}",new Object[]{getFullyQualifiedName(),elapsedMillis,metadata});        }        getInprogressSegmentStat.registerSuccessfulEvent(elapsedMicroSec);      } else {        negativeGetInprogressSegmentStat.registerSuccessfulEvent(-elapsedMicroSec);      }    } else {      long elapsedMillis=ts - metadata.getCompletionTime();      long elapsedMicroSec=TimeUnit.MILLISECONDS.toMicros(elapsedMillis);      if (elapsedMicroSec > 0) {        if (elapsedMillis > metadataLatencyWarnThresholdMillis) {          LOG.warn("{} received completed log segment in {} millis : {}",new Object[]{getFullyQualifiedName(),elapsedMillis,metadata});        }        getCompletedSegmentStat.registerSuccessfulEvent(elapsedMicroSec);      } else {        negativeGetCompletedSegmentStat.registerSuccessfulEvent(-elapsedMicroSec);      }    }  }}  }
class C{  public static double convertMillisToSeconds(double millis){  return millis / SECOND_TO_MILLIS;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.IMMUTABLE___IMMUTABLE_1:    setImmutable_1(IMMUTABLE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  protected static int[] concat(@Nullable int[] arr,int... obj){  int[] newArr;  if (arr == null || arr.length == 0)   newArr=obj; else {    newArr=Arrays.copyOf(arr,arr.length + obj.length);    System.arraycopy(obj,0,newArr,arr.length,obj.length);  }  return newArr;}  }
class C{  @Override public void characters(char ch[],int start,int len) throws SAXException {  if (!cdataElement) {    if (mIgnoreChars) {      writeText4Links();      writeEscUTF16(new String(ch),start,len,false);    } else {      collectText4Links(ch,start,len);    }  } else {    writeText4Links();    for (int i=start; i < start + len; i++) {      write(ch[i]);    }  }  super.characters(ch,start,len);}  }
class C{  public void register(Property predicate,SPINFunctionDriver driver){  drivers.put(predicate,driver);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  protected void serializeDocType(DocumentType node,boolean bStart) throws SAXException {  String docTypeName=node.getNodeName();  String publicId=node.getPublicId();  String systemId=node.getSystemId();  String internalSubset=node.getInternalSubset();  if (internalSubset != null && !"".equals(internalSubset)) {    if (bStart) {      try {        Writer writer=fSerializer.getWriter();        StringBuffer dtd=new StringBuffer();        dtd.append("<!DOCTYPE ");        dtd.append(docTypeName);        if (null != publicId) {          dtd.append(" PUBLIC \"");          dtd.append(publicId);          dtd.append('\"');        }        if (null != systemId) {          if (null == publicId) {            dtd.append(" SYSTEM \"");          } else {            dtd.append(" \"");          }          dtd.append(systemId);          dtd.append('\"');        }        dtd.append(" [ ");        dtd.append(fNewLine);        dtd.append(internalSubset);        dtd.append("]>");        dtd.append(new String(fNewLine));        writer.write(dtd.toString());        writer.flush();      } catch (      IOException e) {        throw new SAXException(Utils.messages.createMessage(MsgKey.ER_WRITING_INTERNAL_SUBSET,null),e);      }    }  } else {    if (bStart) {      if (fLexicalHandler != null) {        fLexicalHandler.startDTD(docTypeName,publicId,systemId);      }    } else {      if (fLexicalHandler != null) {        fLexicalHandler.endDTD();      }    }  }}  }
class C{  @Override public void handlePut(Operation op){  super.setState(op,op.getBody(EchoServiceState.class));  op.complete();}  }
class C{  protected <T extends OperationResponse>void completeOperation(ServerStateMachine.Result result,OperationResponse.Builder<?,T> builder,Throwable error,CompletableFuture<T> future){  if (isOpen()) {    if (result != null) {      builder.withIndex(result.index);      builder.withEventIndex(result.eventIndex);      if (result.result instanceof Exception) {        error=(Exception)result.result;      }    }    if (error == null) {      future.complete(logResponse(builder.withStatus(Response.Status.OK).withResult(result.result).build()));    } else     if (error instanceof CompletionException && error.getCause() instanceof CopycatException) {      future.complete(logResponse(builder.withStatus(Response.Status.ERROR).withError(((CopycatException)error.getCause()).getType()).build()));    } else     if (error instanceof CopycatException) {      future.complete(logResponse(builder.withStatus(Response.Status.ERROR).withError(((CopycatException)error).getType()).build()));    } else {      future.complete(logResponse(builder.withStatus(Response.Status.ERROR).withError(CopycatError.Type.INTERNAL_ERROR).build()));    }  }}  }
class C{  public static void initialize(@NonNull Context context){  if (sInstance == null) {    sInstance=new AndroidContext(context);  }}  }
class C{  public EntailmentClassificationOutcome_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_outcome=jcas.getRequiredFeatureDE(casType,"outcome","uima.cas.String",featOkTst);  casFeatCode_outcome=(null == casFeat_outcome) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_outcome).getCode();}  }
class C{  public static void assertEqualStreams(InputStream expIn,InputStream actIn,@Nullable Long expSize) throws IOException {  int bufSize=2345;  byte buf1[]=new byte[bufSize];  byte buf2[]=new byte[bufSize];  long pos=0;  while (true) {    int i1=actIn.read(buf1,0,bufSize);    int i2;    if (i1 == -1)     i2=expIn.read(buf2,0,1); else     IOUtils.readFully(expIn,buf2,0,i2=i1);    if (i1 != i2)     fail("Expects the same data [pos=" + pos + ", i1="+ i1+ ", i2="+ i2+ ']');    if (i1 == -1)     break;    assertTrue("Expects the same data [pos=" + pos + ", i1="+ i1+ ", i2="+ i2+ ']',Arrays.equals(buf1,buf2));    pos+=i1;  }  if (expSize != null)   assertEquals(expSize.longValue(),pos);}  }
class C{  private boolean needFlip(long pos){  return second != null && second.contains(pos);}  }
class C{  public static void loadRootUserDataCacheOnStart(){  EFLogger.debug("loadRootUserDataCacheOnStart");  users.put("root",UserData.restoreFromESData("root",rootPassword,"/*"));}  }
class C{  @Override public StatisticViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  View v;  int layout;  Context parentContext=parent.getContext();  if (viewType == StatisticViewHolder.TYPE_LARGE) {    layout=R.layout.list_item_statistic_most_played;  } else   if (viewType == StatisticViewHolder.TYPE_SMALL) {    layout=R.layout.list_item_statistic_pie_chart;  } else {    throw new RuntimeException("Invalid view type!");  }  v=LayoutInflater.from(parentContext).inflate(layout,parent,false);  LinearLayoutCompat.LayoutParams layoutParams=new LinearLayoutCompat.LayoutParams(LinearLayoutCompat.LayoutParams.MATCH_PARENT,LinearLayoutCompat.LayoutParams.WRAP_CONTENT);  v.setLayoutParams(layoutParams);  return new StatisticViewHolder(v,mUserLogicFactory,mChallengeDataSource,mApplication,mUser,mCategoryId);}  }
class C{  public void reserve(int len) throws IOException {  if (len > (buf.length - pos))   flushBuffer();}  }
class C{  public <T>T fromXML(final URL url,final T root){  return unmarshal(hierarchicalStreamDriver.createReader(url),root);}  }
class C{  public boolean isDrawRoundedSlicesEnabled(){  return mDrawRoundedSlices;}  }
class C{  public void cleanTemplate(Integer ID){  cleanTemplate("" + ID);}  }
class C{  private void testGaussianDistribution(double mu,double sigma,DescriptiveStatistics statistics){  Assert.assertEquals(mu,statistics.getMean(),TestThresholds.STATISTICS_EPS);  Assert.assertEquals(sigma * sigma,statistics.getVariance(),TestThresholds.STATISTICS_EPS);  Assert.assertEquals(0.0,statistics.getSkewness(),TestThresholds.STATISTICS_EPS);  Assert.assertEquals(0.0,statistics.getKurtosis(),TestThresholds.STATISTICS_EPS);}  }
class C{  public SearchSourceBuilder sort(SortBuilder sort){  if (sorts == null) {    sorts=new ArrayList<>();  }  sorts.add(sort);  return this;}  }
class C{  public void post(Object event){  post(event,EventType.DEFAULT_TAG);}  }
class C{  @Override public void handlePatch(Operation patch){  if (!patch.hasBody()) {    patch.fail(new IllegalArgumentException("Body is required"));    return;  }  if (Operation.TX_ENSURE_COMMIT.equals(patch.getRequestHeader(Operation.TRANSACTION_HEADER))) {    handleCheckConflicts(patch);    return;  }  ResolutionRequest resolution=patch.getBody(ResolutionRequest.class);  if (resolution.kind != ResolutionRequest.KIND) {    patch.fail(new IllegalArgumentException("Unrecognized request kind: " + resolution.kind));    return;  }  TransactionServiceState currentState=getState(patch);  if (resolution.resolutionKind == ResolutionKind.ABORT) {    if (currentState.taskSubStage == SubStage.COMMITTED || currentState.taskSubStage == SubStage.COMMITTING) {      patch.fail(new IllegalStateException(String.format("Already %s",currentState.taskSubStage)));      return;    }    if (currentState.taskSubStage == SubStage.ABORTING || currentState.taskSubStage == SubStage.ABORTED) {      logInfo("Alreading in sub-stage %s. Completing request.",currentState.taskSubStage);      patch.complete();      return;    }    updateStage(patch,SubStage.ABORTING);    patch.complete();    handleAbort(currentState);  } else   if (resolution.resolutionKind == ResolutionKind.COMMIT) {    if (currentState.taskSubStage == SubStage.ABORTED || currentState.taskSubStage == SubStage.ABORTING) {      patch.fail(new IllegalStateException("Already aborted"));      return;    }    if (currentState.taskSubStage == SubStage.COMMITTED || currentState.taskSubStage == SubStage.COMMITTING) {      logInfo("Alreading in sub-stage %s. Completing request.",currentState.taskSubStage);      patch.complete();      return;    }    updateStage(patch,SubStage.RESOLVING);    patch.complete();    handleCommit(currentState);  } else   if (resolution.resolutionKind == ResolutionKind.COMMITTING) {    if (currentState.taskSubStage == SubStage.ABORTED || currentState.taskSubStage == SubStage.ABORTING) {      patch.fail(new IllegalStateException("Already aborted"));      return;    }    updateStage(patch,SubStage.COMMITTING);    patch.complete();    notifyServicesToCommit(currentState);  } else   if (resolution.resolutionKind == ResolutionKind.COMMITTED) {    updateStage(patch,SubStage.COMMITTED);    patch.complete();  } else   if (resolution.resolutionKind == ResolutionKind.ABORTED) {    updateStage(patch,SubStage.ABORTED);    patch.complete();  } else {    patch.fail(new IllegalArgumentException("Unrecognized resolution kind: " + resolution.resolutionKind));  }}  }
class C{  private List<AbstractOption> addConfigOptions(){  List<AbstractOption> result;  if (getPlugin() == null) {    log().debug("No plugin set?");    result=Collections.<AbstractOption>emptyList();  } else {    List<AbstractOption> newOptions=new ArrayList<AbstractOption>();    log().info("Adding OptionSoapAction");    newOptions.add(0,m_OptionSoapAction);    log().info("Adding OptionNoSchema");    newOptions.add(1,m_OptionUseSchema);    log().info("Adding OptionSchemaFiles");    newOptions.add(2,m_OptionSchemaFiles);    if (m_OptionPayloadList.size() > 0) {      log().info("Adding Enc Pays ");      newOptions.add(3,m_OptionEncPays);      log().info("Adding Server Error Response table ");      newOptions.add(4,m_OptionServerResponse);    }    result=newOptions;  }  return result;}  }
class C{  protected Class loadArrayClassByComponentType(String className,ClassLoader classLoader) throws ClassNotFoundException {  int ndx=className.indexOf('[');  int multi=StringUtil.count(className,'[');  String componentTypeName=className.substring(0,ndx);  Class componentType=loadClass(componentTypeName,classLoader);  if (multi == 1) {    return Array.newInstance(componentType,0).getClass();  }  int[] multiSizes;  if (multi == 2) {    multiSizes=new int[]{0,0};  } else   if (multi == 3) {    multiSizes=new int[]{0,0,0};  } else {    multiSizes=(int[])Array.newInstance(int.class,multi);  }  return Array.newInstance(componentType,multiSizes).getClass();}  }
class C{  public static IMouseStateChange enterEdgeLabel(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo){  final EdgeLabel l=hitInfo.getHitEdgeLabel();  return new CStateChange(m_factory.createEdgeLabelEnterState(l,event),true);}  }
class C{  protected void flushRequirementChanges(){  AbstractDocument doc=(AbstractDocument)getDocument();  try {    doc.readLock();    View parent=null;    boolean horizontal=false;    boolean vertical=false;synchronized (this) {synchronized (stats) {        int n=getViewCount();        if ((n > 0) && (minorChanged || estimatedMajorSpan)) {          LayoutQueue q=getLayoutQueue();          ChildState min=getChildState(0);          ChildState pref=getChildState(0);          float span=0f;          for (int i=1; i < n; i++) {            ChildState cs=getChildState(i);            if (minorChanged) {              if (cs.min > min.min) {                min=cs;              }              if (cs.pref > pref.pref) {                pref=cs;              }            }            if (estimatedMajorSpan) {              span+=cs.getMajorSpan();            }          }          if (minorChanged) {            minRequest=min;            prefRequest=pref;          }          if (estimatedMajorSpan) {            majorSpan=span;            estimatedMajorSpan=false;            majorChanged=true;          }        }      }      if (majorChanged || minorChanged) {        parent=getParent();        if (parent != null) {          if (axis == X_AXIS) {            horizontal=majorChanged;            vertical=minorChanged;          } else {            vertical=majorChanged;            horizontal=minorChanged;          }        }        majorChanged=false;        minorChanged=false;      }    }    if (parent != null) {      parent.preferenceChanged(this,horizontal,vertical);      Component c=getContainer();      if (c != null) {        c.repaint();      }    }  }  finally {    doc.readUnlock();  }}  }
class C{  public void test_addEdge_correctRejection_001(){  final int CAPACITY=5;  TxDag dag=new TxDag(CAPACITY);  Object tx1="tx1";  Object tx2="tx2";  dag.addEdge(tx1,tx2);  try {    dag.addEdge(tx1,tx2);    fail("Expecting exception: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    log.info("Expected exception: " + ex);  }}  }
class C{  public boolean createLifetimeReplacementConnection(ServerLocation currentServer,boolean idlePossible){  HashSet excludedServers=new HashSet();  ServerLocation sl=this.connectionFactory.findBestServer(currentServer,excludedServers);  while (sl != null) {    if (sl.equals(currentServer)) {      this.allConnectionsMap.extendLifeOfCnxToServer(currentServer);      break;    } else {      if (!this.allConnectionsMap.hasExpiredCnxToServer(currentServer)) {        break;      }      Connection con=null;      try {        con=this.connectionFactory.createClientToServerConnection(sl,false);      } catch (      GemFireSecurityException e) {        securityLogWriter.warning(LocalizedStrings.ConnectionManagerImpl_SECURITY_EXCEPTION_CONNECTING_TO_SERVER_0_1,new Object[]{sl,e});      }catch (      ServerRefusedConnectionException srce) {        logger.warn(LocalizedMessage.create(LocalizedStrings.ConnectionManagerImpl_SERVER_0_REFUSED_NEW_CONNECTION_1,new Object[]{sl,srce}));      }      if (con == null) {        excludedServers.add(sl);        sl=this.connectionFactory.findBestServer(currentServer,excludedServers);      } else {        getPoolStats().incLoadConditioningConnect();        if (!this.allConnectionsMap.hasExpiredCnxToServer(currentServer)) {          getPoolStats().incLoadConditioningReplaceTimeouts();          con.destroy();          break;        }        offerReplacementConnection(con,currentServer);        break;      }    }  }  if (sl == null) {    this.allConnectionsMap.extendLifeOfCnxToServer(currentServer);  }  return this.allConnectionsMap.checkForReschedule(true);}  }
class C{  public static IGeoRectangle parseLatLon(String path){  if (path != null) {    String[] minMax=getLastPath(path).split(GeoRectangle.DELIM_FIELD);    if ((minMax == null) || (minMax.length == 0))     return null;    String[] elements=minMax[0].split(GeoRectangle.DELIM_SUB_FIELD);    if ((elements != null) && (elements.length == 2)) {      String lat=elements[0];      String lon=elements[1];      GeoRectangle result=new GeoRectangle();      result.setLatitudeMin(getLatLon(lat));      result.setLogituedMin(getLatLon(lon));      if (minMax.length == 1) {        double delta=1;        if (lat.startsWith(" ")) {          delta=10.0;        } else {          int posDecimal=lat.indexOf(".");          if (posDecimal >= 0) {            int numberDecimals=lat.length() - posDecimal - 1;            while (numberDecimals > 0) {              delta=delta / 10.0;              numberDecimals--;            }          }        }        result.setLatitudeMax(result.getLatitudeMin() + delta);        result.setLogituedMax(result.getLogituedMin() + delta);        return result;      } else       if (minMax.length == 2) {        elements=minMax[1].split(GeoRectangle.DELIM_SUB_FIELD);        if ((elements != null) && (elements.length == 2)) {          lat=elements[0];          lon=elements[1];          result.setLatitudeMax(getLatLon(lat));          result.setLogituedMax(getLatLon(lon));          return result;        }      }    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.600 -0500",hash_original_method="1719055BB7B83C8257DECB960F96EA3B",hash_generated_method="057AC4294C52FE0AC14AB3E2D4532546") @Deprecated public static Uri createPersonInMyContactsGroup(ContentResolver resolver,ContentValues values){  Uri contactUri=resolver.insert(People.CONTENT_URI,values);  if (contactUri == null) {    Log.e(TAG,"Failed to create the contact");    return null;  }  if (addToMyContactsGroup(resolver,ContentUris.parseId(contactUri)) == null) {    resolver.delete(contactUri,null,null);    return null;  }  return contactUri;}  }
class C{  public MosaicDefinition(final Deserializer deserializer){  this.creator=Account.readFrom(deserializer,"creator",AddressEncoding.PUBLIC_KEY);  this.id=deserializer.readObject("id",null);  this.descriptor=MosaicDescriptor.readFrom(deserializer,"description");  this.properties=new DefaultMosaicProperties(deserializer.readObjectArray("properties",null));  this.levy=deserializer.readOptionalObject("levy",null);  this.validateFields();}  }
class C{  private boolean processKeyUp(int keyCode){  if (keyCode == KeyEvent.KEYCODE_DEL) {    if (mInKbMode) {      if (!mTypedTimes.isEmpty()) {        int deleted=deleteLastTypedKey();        String deletedKeyStr;        if (deleted == getAmOrPmKeyCode(AM)) {          deletedKeyStr=mAmText;        } else         if (deleted == getAmOrPmKeyCode(PM)) {          deletedKeyStr=mPmText;        } else {          deletedKeyStr=String.format("%d",getValFromKeyCode(deleted));        }        ViewCompatUtils.announceForAccessibility(mDelegator,String.format(mDeletedKeyFormat,deletedKeyStr));        updateDisplay(true);      }    }  } else   if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1 || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3 || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5 || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7 || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9 || (!mIs24HourView && (keyCode == getAmOrPmKeyCode(AM) || keyCode == getAmOrPmKeyCode(PM)))) {    if (!mInKbMode) {      if (mRadialTimePickerView == null) {        Log.e(TAG,"Unable to initiate keyboard mode, TimePicker was null.");        return true;      }      mTypedTimes.clear();      tryStartingKbMode(keyCode);      return true;    }    if (addKeyIfLegal(keyCode)) {      updateDisplay(false);    }    return true;  }  return false;}  }
class C{  private static List<String> addTargetClassesImport(List<String> lines,List<Attribute> attributes,Class<?> aClass){  List<Class<?>> classes=new ArrayList<Class<?>>();  for (  Attribute attribute : attributes)   if (attribute.getClasses() != null && attribute.getClasses().length > 0)   for (  Class<?> clazz : attribute.getClasses())   if (!classes.contains(clazz) && !aClass.getPackage().getName().equals(clazz.getPackage().getName()))   classes.add(clazz);  if (classes.isEmpty())   return lines;  List<Class<?>> alreadyImported=new ArrayList<Class<?>>();  for (  Class<?> clazz : classes)   if (existImport(lines,clazz))   alreadyImported.add(clazz);  classes.removeAll(alreadyImported);  List<String> result=new ArrayList<String>();  for (  String line : lines) {    result.add(line);    if (!packageFound(line,aClass))     continue;    for (    Class<?> clazz : classes)     result.add("import " + clazz.getName() + ";");  }  return result;}  }
class C{  public static Put metadataToPut(MailboxMessage message){  Put put=new Put(messageRowKey(message));  put.add(MESSAGES_META_CF,MESSAGE_MODSEQ,Bytes.toBytes(message.getModSeq()));  put.add(MESSAGES_META_CF,MESSAGE_INTERNALDATE,Bytes.toBytes(message.getInternalDate().getTime()));  put.add(MESSAGES_META_CF,MESSAGE_MEDIA_TYPE,Bytes.toBytes(message.getMediaType()));  put.add(MESSAGES_META_CF,MESSAGE_SUB_TYPE,Bytes.toBytes(message.getSubType()));  put.add(MESSAGES_META_CF,MESSAGE_CONTENT_OCTETS,Bytes.toBytes(message.getFullContentOctets()));  put.add(MESSAGES_META_CF,MESSAGE_BODY_OCTETS,Bytes.toBytes(message.getBodyOctets()));  if (message.getTextualLineCount() != null) {    put.add(MESSAGES_META_CF,MESSAGE_TEXT_LINE_COUNT,Bytes.toBytes(message.getTextualLineCount()));  }  Flags flags=message.createFlags();  if (flags.contains(Flag.ANSWERED)) {    put.add(MESSAGES_META_CF,FLAGS_ANSWERED,MARKER_PRESENT);  }  if (flags.contains(Flag.DELETED)) {    put.add(MESSAGES_META_CF,FLAGS_DELETED,MARKER_PRESENT);  }  if (flags.contains(Flag.DRAFT)) {    put.add(MESSAGES_META_CF,FLAGS_DRAFT,MARKER_PRESENT);  }  if (flags.contains(Flag.FLAGGED)) {    put.add(MESSAGES_META_CF,FLAGS_FLAGGED,MARKER_PRESENT);  }  if (flags.contains(Flag.RECENT)) {    put.add(MESSAGES_META_CF,FLAGS_RECENT,MARKER_PRESENT);  }  if (flags.contains(Flag.SEEN)) {    put.add(MESSAGES_META_CF,FLAGS_SEEN,MARKER_PRESENT);  }  if (flags.contains(Flag.USER)) {    put.add(MESSAGES_META_CF,FLAGS_USER,MARKER_PRESENT);  }  for (  String flag : flags.getUserFlags()) {    put.add(MESSAGES_META_CF,userFlagToBytes(flag),MARKER_PRESENT);  }  int propNumber=0;  for (  Property prop : message.getProperties()) {    put.add(MESSAGES_META_CF,getQualifier(propNumber++),getValue(prop));  }  return put;}  }
class C{  private void enablePlugins(PluginLoadOrder type){  if (type == PluginLoadOrder.STARTUP) {    helpMap.clear();    helpMap.loadConfig(config.getConfigFile(Key.HELP_FILE));  }  Plugin[] plugins=pluginManager.getPlugins();  for (  Plugin plugin : plugins) {    if (!plugin.isEnabled() && plugin.getDescription().getLoad() == type) {      List<Permission> perms=plugin.getDescription().getPermissions();      for (      Permission perm : perms) {        try {          pluginManager.addPermission(perm);        } catch (        IllegalArgumentException ex) {          getLogger().log(Level.WARNING,"Plugin " + plugin.getDescription().getFullName() + " tried to register permission '"+ perm.getName()+ "' but it's already registered",ex);        }      }      try {        pluginManager.enablePlugin(plugin);      } catch (      Throwable ex) {        logger.log(Level.SEVERE,"Error loading " + plugin.getDescription().getFullName(),ex);      }    }  }  if (type == PluginLoadOrder.POSTWORLD) {    commandMap.setFallbackCommands();    commandMap.registerServerAliases();    DefaultPermissions.registerCorePermissions();    helpMap.initializeCommands();    helpMap.amendTopics(config.getConfigFile(Key.HELP_FILE));    ConfigurationSection permConfig=config.getConfigFile(Key.PERMISSIONS_FILE);    List<Permission> perms=Permission.loadPermissions(permConfig.getValues(false),"Permission node '%s' in permissions config is invalid",PermissionDefault.OP);    for (    Permission perm : perms) {      try {        pluginManager.addPermission(perm);      } catch (      IllegalArgumentException ex) {        getLogger().log(Level.WARNING,"Permission config tried to register '" + perm.getName() + "' but it's already registered",ex);      }    }  }}  }
class C{  public static void fill(int[] array,int start,int end,int value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static PrivKey load(File file,final String password) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, InvalidParameterSpecException {  if (file.length() < 3)   throw new IllegalArgumentException("file is not a valid private key (too short file)");  byte[] keyData=FileUtil.readFile(file);  return load(keyData,password);}  }
class C{  protected void loadTableOIS(Vector<?> data){  window.getWListbox().clear();  window.getWListbox().getModel().removeTableModelListener(window);  ListModelTable model=new ListModelTable(data);  model.addTableModelListener(window);  window.getWListbox().setData(model,getOISColumnNames());  configureMiniTable(window.getWListbox());}  }
class C{  public static void writeIgniteConfiguration(BinaryRawWriter w,IgniteConfiguration cfg){  assert w != null;  assert cfg != null;  w.writeBoolean(true);  w.writeBoolean(cfg.isClientMode());  w.writeIntArray(cfg.getIncludeEventTypes());  w.writeBoolean(true);  w.writeLong(cfg.getMetricsExpireTime());  w.writeBoolean(true);  w.writeInt(cfg.getMetricsHistorySize());  w.writeBoolean(true);  w.writeLong(cfg.getMetricsLogFrequency());  w.writeBoolean(true);  w.writeLong(cfg.getMetricsUpdateFrequency());  w.writeBoolean(true);  w.writeInt(cfg.getNetworkSendRetryCount());  w.writeBoolean(true);  w.writeLong(cfg.getNetworkSendRetryDelay());  w.writeBoolean(true);  w.writeLong(cfg.getNetworkTimeout());  w.writeString(cfg.getWorkDirectory());  w.writeString(cfg.getLocalHost());  w.writeBoolean(true);  w.writeBoolean(cfg.isDaemon());  w.writeBoolean(true);  w.writeBoolean(cfg.isLateAffinityAssignment());  CacheConfiguration[] cacheCfg=cfg.getCacheConfiguration();  if (cacheCfg != null) {    w.writeInt(cacheCfg.length);    for (    CacheConfiguration ccfg : cacheCfg)     writeCacheConfiguration(w,ccfg);  } else   w.writeInt(0);  writeDiscoveryConfiguration(w,cfg.getDiscoverySpi());  CommunicationSpi comm=cfg.getCommunicationSpi();  if (comm instanceof TcpCommunicationSpi) {    w.writeBoolean(true);    TcpCommunicationSpiMBean tcp=(TcpCommunicationSpiMBean)comm;    w.writeInt(tcp.getAckSendThreshold());    w.writeLong(tcp.getConnectTimeout());    w.writeBoolean(tcp.isDirectBuffer());    w.writeBoolean(tcp.isDirectSendBuffer());    w.writeLong(tcp.getIdleConnectionTimeout());    w.writeString(tcp.getLocalAddress());    w.writeInt(tcp.getLocalPort());    w.writeInt(tcp.getLocalPortRange());    w.writeLong(tcp.getMaxConnectTimeout());    w.writeInt(tcp.getMessageQueueLimit());    w.writeInt(tcp.getReconnectCount());    w.writeInt(tcp.getSelectorsCount());    w.writeInt(tcp.getSlowClientQueueLimit());    w.writeInt(tcp.getSocketReceiveBuffer());    w.writeInt(tcp.getSocketSendBuffer());    w.writeBoolean(tcp.isTcpNoDelay());    w.writeInt(tcp.getUnacknowledgedMessagesBufferSize());  } else   w.writeBoolean(false);  BinaryConfiguration bc=cfg.getBinaryConfiguration();  w.writeBoolean(bc != null);  if (bc != null)   w.writeBoolean(bc.isCompactFooter());  Map<String,?> attrs=cfg.getUserAttributes();  if (attrs != null) {    w.writeInt(attrs.size());    for (    Map.Entry<String,?> e : attrs.entrySet()) {      w.writeString(e.getKey());      w.writeObject(e.getValue());    }  } else   w.writeInt(0);  AtomicConfiguration atomic=cfg.getAtomicConfiguration();  if (atomic != null) {    w.writeBoolean(true);    w.writeInt(atomic.getAtomicSequenceReserveSize());    w.writeInt(atomic.getBackups());    writeEnumInt(w,atomic.getCacheMode(),AtomicConfiguration.DFLT_CACHE_MODE);  } else   w.writeBoolean(false);  TransactionConfiguration tx=cfg.getTransactionConfiguration();  if (tx != null) {    w.writeBoolean(true);    w.writeInt(tx.getPessimisticTxLogSize());    writeEnumInt(w,tx.getDefaultTxConcurrency(),TransactionConfiguration.DFLT_TX_CONCURRENCY);    writeEnumInt(w,tx.getDefaultTxIsolation(),TransactionConfiguration.DFLT_TX_ISOLATION);    w.writeLong(tx.getDefaultTxTimeout());    w.writeInt(tx.getPessimisticTxLogLinger());  } else   w.writeBoolean(false);  w.writeString(cfg.getIgniteHome());  w.writeLong(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getInit());  w.writeLong(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax());}  }
class C{  public void flushFileContent(String mimeType,String charset,String fileName,String fileContent) throws IOException {  generateFileContent(mimeType,charset,fileName,fileContent);  this.response.flushBuffer();}  }
class C{  public AtomicIntChunks(final long length){  this(length,CHUNK_BITS);}  }
class C{  @Override public AmpException rethrow(String msg){  return new AmpException(msg,this);}  }
class C{  public boolean logout() throws IOException {  return FTPReply.isPositiveCompletion(quit());}  }
class C{  public Map<NetworkLite,List<StoragePort>> selectStoragePortsInNetworks(List<StoragePort> storagePorts,Collection<NetworkLite> networks,URI varrayURI,ExportPathParams pathParams){  Map<NetworkLite,List<StoragePort>> portsInNetwork=new HashMap<>();  for (  NetworkLite networkLite : networks) {    URI networkURI=networkLite.getId();    _log.info("Selecting ports for network {} {}",networkLite.getLabel(),networkLite.getId());    List<StoragePort> spList=new ArrayList<StoragePort>();    List<StoragePort> rspList=new ArrayList<StoragePort>();    List<String> unroutedPorts=new ArrayList<String>();    List<String> routedPorts=new ArrayList<String>();    List<String> wrongNetwork=new ArrayList<String>();    for (    StoragePort sp : storagePorts) {      if (sp.getNetwork().equals(networkURI) || (networkLite != null && networkLite.hasRoutedNetworks(sp.getNetwork()))) {        if (sp.getNetwork().equals(networkURI)) {          spList.add(sp);          unroutedPorts.add(portName(sp));        } else {          _log.debug("Storage port {} is not in the requested network {} " + "but it is routed to it.",sp.getNativeGuid(),networkURI);          rspList.add(sp);          routedPorts.add(portName(sp));        }      } else {        _log.debug("Storage port {} not selected because its network {} " + "is not the requested network {}",new Object[]{sp.getNativeGuid(),sp.getNetwork(),networkURI});        wrongNetwork.add(portName(sp));      }    }    if (!wrongNetwork.isEmpty()) {      _log.info("Ports not selected because they are not in the requested network: " + networkURI + " "+ Joiner.on(" ").join(wrongNetwork));    }    if (!rspList.isEmpty() && !spList.isEmpty()) {      _log.info("Ports not selected because they are routed and local ports are available: " + networkURI + " "+ Joiner.on(" ").join(routedPorts));    }    _log.info("Ports that were selected: " + (spList.isEmpty() ? Joiner.on(" ").join(routedPorts) : Joiner.on(" ").join(unroutedPorts)));    portsInNetwork.put(networkLite,spList.isEmpty() ? rspList : spList);  }  return portsInNetwork;}  }
class C{  protected synchronized void onResized(int columns,int rows){  onResized(new TerminalSize(columns,rows));}  }
class C{  public T coords(String value){  return attr("coords",value);}  }
class C{  protected EqualityOp_Impl(){  super();}  }
class C{  private boolean isLeapYear(long year){  return !((year % 4) != 0 || (year % 100) == 0 && (year % 400) != 0);}  }
class C{  @Override public String createInitialLoadSqlFor(Node node,TriggerRouter trigger,Table table,TriggerHistory triggerHistory,Channel channel,String overrideSelectSql){  String sql=super.createInitialLoadSqlFor(node,trigger,table,triggerHistory,channel,overrideSelectSql);  sql=sql.replace("''","'");  return sql;}  }
class C{  protected AbstractTParser(TokenStream input){  super(input);}  }
class C{  public void sortArray(T[] d,Comparator<T> c){  this.data=d;  this.comp=c;  int len=Math.max((int)(100 * Math.log(d.length)),TEMP_SIZE);  len=Math.min(d.length,len);  @SuppressWarnings("unchecked") T[] t=(T[])new Object[len];  this.temp=t;  mergeSort(0,d.length - 1);}  }
class C{  public UnicodeReader(InputStream in) throws IOException {  this(in,null);}  }
class C{  public String optString(String key,String defaultValue){  Object o=opt(key);  return o != null ? o.toString() : defaultValue;}  }
class C{  public final Cursor increment(int i){  index+=i;  return this;}  }
class C{  public void put(String key,Integer value){  mValues.put(key,value);}  }
class C{  public static boolean isSkipPosting(final GameData data){  final boolean skipPosting;  data.acquireReadLock();  try {    skipPosting=Boolean.parseBoolean(data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_skipPosting,"false"));  }  finally {    data.releaseReadLock();  }  return skipPosting;}  }
class C{  public SpecialTextUnit showStrikeThrough(){  isShowStrikeThrough=true;  return this;}  }
class C{  public Boolean isSnapshotLocked(){  return snapshotLocked;}  }
class C{  public void incFunctionExecutionsCompleted(){  this._stats.incInt(_functionExecutionsCompletedId,1);}  }
class C{  private static IgfsBlockLocation location(long start,long len,UUID... nodeIds){  assert nodeIds != null && nodeIds.length > 0;  Collection<ClusterNode> nodes=new ArrayList<>(nodeIds.length);  for (  UUID id : nodeIds)   nodes.add(new GridTestNode(id));  return new IgfsBlockLocationImpl(start,len,nodes);}  }
class C{  public static Map<String,Object> updateUserLoginId(DispatchContext ctx,Map<String,?> context){  Map<String,Object> result=new LinkedHashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");  List<String> errorMessageList=new LinkedList<String>();  Locale locale=(Locale)context.get("locale");  String userLoginId=(String)context.get("userLoginId");  String errMsg=null;  if ((userLoginId != null) && ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator)))) {    userLoginId=userLoginId.toLowerCase();  }  String partyId=loggedInUserLogin.getString("partyId");  String password=loggedInUserLogin.getString("currentPassword");  String passwordHint=loggedInUserLogin.getString("passwordHint");  if (UtilValidate.isNotEmpty(partyId)) {    if (!loggedInUserLogin.isEmpty()) {      if (!partyId.equals(loggedInUserLogin.getString("partyId"))) {        errMsg=UtilProperties.getMessage(resource,"loginservices.party_with_party_id_exists_not_permission_create_user_login",locale);        errorMessageList.add(errMsg);      }    } else {      errMsg=UtilProperties.getMessage(resource,"loginservices.must_logged_in_have_permission_create_user_login_exists",locale);      errorMessageList.add(errMsg);    }  }  GenericValue newUserLogin=null;  boolean doCreate=true;  try {    newUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_read_failure",messageMap,locale);    errorMessageList.add(errMsg);  }  if (newUserLogin != null) {    if (!newUserLogin.get("partyId").equals(partyId)) {      Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_with_ID_exists",messageMap,locale);      errorMessageList.add(errMsg);    } else {      doCreate=false;    }  } else {    newUserLogin=delegator.makeValue("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));  }  newUserLogin.set("passwordHint",passwordHint);  newUserLogin.set("partyId",partyId);  newUserLogin.set("currentPassword",password);  newUserLogin.set("enabled","Y");  newUserLogin.set("disabledDateTime",null);  if (errorMessageList.size() > 0) {    return ServiceUtil.returnError(errorMessageList);  }  try {    if (doCreate) {      newUserLogin.create();    } else {      newUserLogin.store();    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_write_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  loggedInUserLogin.set("enabled","N");  loggedInUserLogin.set("disabledDateTime",UtilDateTime.nowTimestamp());  try {    loggedInUserLogin.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_disable_old_login_user_write_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  result.put("newUserLogin",newUserLogin);  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getSTVVersion();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, min, max;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          min=z;          max=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              if (z < min) {                min=z;              }              if (z > max) {                max=z;              }            }          }          outputFile.setValue(row,col,(max - min));        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void drawCube(){  GLES20.glUseProgram(cubeProgram);  GLES20.glUniform3fv(cubeLightPosParam,1,lightPosInEyeSpace,0);  GLES20.glUniformMatrix4fv(cubeModelParam,1,false,modelCube,0);  GLES20.glUniformMatrix4fv(cubeModelViewParam,1,false,modelView,0);  GLES20.glVertexAttribPointer(cubePositionParam,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,0,cubeVertices);  GLES20.glUniformMatrix4fv(cubeModelViewProjectionParam,1,false,modelViewProjection,0);  GLES20.glVertexAttribPointer(cubeNormalParam,3,GLES20.GL_FLOAT,false,0,cubeNormals);  GLES20.glVertexAttribPointer(cubeColorParam,4,GLES20.GL_FLOAT,false,0,isLookingAtObject() ? cubeFoundColors : cubeColors);  GLES20.glDrawArrays(GLES20.GL_TRIANGLES,0,36);  checkGLError("Drawing cube");}  }
class C{  @Override public boolean equals(Object theObject){  if (theObject instanceof Timestamp) {    return equals((Timestamp)theObject);  }  return false;}  }
class C{  public byte[] peek(long wait) throws KeeperException, InterruptedException {  Preconditions.checkArgument(wait > 0);  TimerContext time;  if (wait == Long.MAX_VALUE) {    time=stats.time(dir + "_peek_wait_forever");  } else {    time=stats.time(dir + "_peek_wait" + wait);  }  updateLock.lockInterruptibly();  try {    long waitNanos=TimeUnit.MILLISECONDS.toNanos(wait);    while (waitNanos > 0) {      byte[] result=firstElement();      if (result != null) {        return result;      }      waitNanos=changed.awaitNanos(waitNanos);    }    return null;  }  finally {    updateLock.unlock();    time.stop();  }}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public synchronized void flush() throws IOException {  if (!initialized)   return;  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public void testDivideBigDecimalScaleRoundingModeHALF_EVEN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=5;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=7;  RoundingMode rm=RoundingMode.HALF_EVEN;  String c="500002603731642864013619132621009722.1803810";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public static boolean needToDo(String tag){  return toDoSet.contains(tag);}  }
class C{  public ExecutionState basicGetState(){  return state;}  }
class C{  @Override protected boolean accept(String propertyValue){  int major;  int minor;  Matcher matcher=MAJOR_MINOR_VERSION_PATTERN.matcher(propertyValue);  if (matcher.matches()) {    major=Integer.parseInt(matcher.group(1));    minor=Integer.parseInt(matcher.group(2));  } else {    throw new RuntimeException("Malformed Age property value '" + propertyValue + "'");  }  return unicodeVersion.majorVersion > major || (unicodeVersion.majorVersion == major && unicodeVersion.minorVersion >= minor);}  }
class C{  public boolean isValidRepository() throws LocalRepositoryException {  final String prefix="isValidRepository: ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_IS_APPLIANCE};  final String[] ret=exec(prefix,cmd);  if (ret == null) {    throw SyssvcException.syssvcExceptions.localRepoError(prefix + "Internal error. Null output");  } else   if (ret.length != 1) {    throw SyssvcException.syssvcExceptions.localRepoError(prefix + "Internal error. No results.");  }  _log.info(prefix + ret[0]);  return Boolean.valueOf(ret[0]);}  }
class C{  public void testProperties() throws Exception {  ReplicatorCapabilities caps1=new ReplicatorCapabilities();  TungstenProperties cprops=caps1.asProperties();  ReplicatorCapabilities caps2=new ReplicatorCapabilities(cprops);  testEquality(caps1,caps2);  caps1=new ReplicatorCapabilities();  caps1.addRole("master");  caps1.addRole("slave");  caps1.setConsistencyCheck(true);  caps1.setFlush(true);  caps1.setHeartbeat(true);  caps1.setProvisionDriver(ReplicatorCapabilities.PROVISION_DONOR);  caps1.setModel(ReplicatorCapabilities.MODEL_PEER);  cprops=caps1.asProperties();  caps2=new ReplicatorCapabilities(cprops);  testEquality(caps1,caps2);}  }
class C{  public void run(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    printUsage();    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  String arg=argIter.next();  if (arg.equals("-h") || arg.equals("--help")) {    printUsage();    System.exit(0);  } else {    String inputFile=arg;    if (!argIter.hasNext()) {      System.out.println("Too few arguments.");      printUsage();      System.exit(1);    }    String outputFile=argIter.next();    if (argIter.hasNext()) {      System.out.println("Too many arguments.");      printUsage();      System.exit(1);    }    run(inputFile,outputFile);  }}  }
class C{  public void registerInterestRegistrationListener(InterestRegistrationListener listener){  final String s=LocalizedStrings.RemoteBridgeServer_INTERESTREGISTRATIONLISTENERS_CANNOT_BE_REGISTERED_ON_A_REMOTE_BRIDGESERVER.toLocalizedString();  throw new UnsupportedOperationException(s);}  }
class C{  @Override public String toString(){  return toString(5,false);}  }
class C{  private void zInternalSetDateTextField(String text){  skipTextFieldChangedFunctionWhileTrue=true;  dateTextField.setText(text);  skipTextFieldChangedFunctionWhileTrue=false;  zEventTextFieldChanged();}  }
class C{  @Override public Iterator<Instruction> iterator(){  return m_instructions.iterator();}  }
class C{  protected String handleTime(Time time){  return time == null ? null : time.toString();}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  public TextEditorPane(int textMode,boolean wordWrapEnabled){  super(textMode);  setLineWrap(wordWrapEnabled);  try {    init(null,null);  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  @Override public int hashCode(){  return mID;}  }
class C{  public static double stirlingFormula(double x){  double STIR[]={7.87311395793093628397E-4,-2.29549961613378126380E-4,-2.68132617805781232825E-3,3.47222221605458667310E-3,8.33333333333482257126E-2};  double MAXSTIR=143.01608;  double w=1.0 / x;  double y=Math.exp(x);  w=1.0 + w * polevl(w,STIR,4);  if (x > MAXSTIR) {    double v=Math.pow(x,0.5 * x - 0.25);    y=v * (v / y);  } else {    y=Math.pow(x,x - 0.5) / y;  }  y=SQTPI * y * w;  return y;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  niveles=new String[0];}  }
class C{  public String serializedClustererFileTipText(){  return "A file containing the serialized model of a built clusterer.";}  }
class C{  void unSelect(){  if (mHideOnSelect) {    show(true);  }}  }
class C{  public void connectToTangoCamera(Tango tango,int cameraId){  mRenderer.connectCamera(tango,cameraId);}  }
class C{  public static MContainer copy(MWebProject project,MCStage stage,String path){  MContainer cc=getDirect(stage.getCtx(),stage.getCM_CStage_ID(),stage.get_TrxName());  if (cc == null)   cc=new MContainer(stage.getCtx(),0,stage.get_TrxName());  cc.setStage(project,stage,path);  cc.save();  if (!stage.isSummary()) {    cc.updateElements(project,stage,stage.get_TrxName());    cc.updateTTables(project,stage,stage.get_TrxName());  }  return cc;}  }
class C{  private void discoverUnManagedCifsShares(AccessProfile profile){  URI storageSystemId=profile.getSystemId();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId);  if (null == storageSystem) {    return;  }  storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.IN_PROGRESS.toString());  String detailedStatusMessage="Discovery of NetAppC Unmanaged Cifs started";  NetAppClusterApi netAppCApi=new NetAppClusterApi.Builder(storageSystem.getIpAddress(),storageSystem.getPortNumber(),storageSystem.getUsername(),storageSystem.getPassword()).https(true).build();  Collection<String> attrs=new ArrayList<String>();  for (  String property : ntpPropertiesList) {    attrs.add(SupportedNtpFileSystemInformation.getFileSystemInformation(property));  }  try {    List<UnManagedCifsShareACL> unManagedCifsShareACLList=new ArrayList<UnManagedCifsShareACL>();    List<UnManagedCifsShareACL> oldunManagedCifsShareACLList=new ArrayList<UnManagedCifsShareACL>();    HashSet<UnManagedSMBFileShare> unManagedSMBFileShareHashSet=null;    List<Map<String,String>> fileSystemInfo=netAppCApi.listVolumeInfo(null,attrs);    List<StorageVirtualMachineInfo> svms=netAppCApi.listSVM();    for (    StorageVirtualMachineInfo svmInfo : svms) {      netAppCApi=new NetAppClusterApi.Builder(storageSystem.getIpAddress(),storageSystem.getPortNumber(),storageSystem.getUsername(),storageSystem.getPassword()).https(true).svm(svmInfo.getName()).build();      List<Map<String,String>> listShares=netAppCApi.listShares(null);      if (listShares != null && !listShares.isEmpty()) {        _logger.info("total no of shares in netappC system (s) {}",listShares.size());      }      HashMap<String,HashSet<UnManagedSMBFileShare>> unMangedSMBFileShareMapSet=getAllCifsShares(listShares);      for (      String key : unMangedSMBFileShareMapSet.keySet()) {        unManagedSMBFileShareHashSet=unMangedSMBFileShareMapSet.get(key);        String fileSystem=key;        String nativeId=fileSystem;        int index=fileSystem.indexOf('/',1);        if (-1 != index) {          fileSystem=fileSystem.substring(0,index);          _logger.info("Unmanaged FileSystem Name {}",fileSystem);        }        String fsUnManagedFsNativeGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingFileSystem(storageSystem.getSystemType(),storageSystem.getSerialNumber().toUpperCase(),fileSystem);        UnManagedFileSystem unManagedFs=checkUnManagedFileSystemExistsInDB(fsUnManagedFsNativeGuid);        boolean fsAlreadyExists=unManagedFs == null ? false : true;        if (fsAlreadyExists) {          _logger.debug("retrieve info for file system: " + fileSystem);          String svm=getOwningSVM(fileSystem,fileSystemInfo);          String addr=getSVMAddress(svm,svms);          UnManagedSMBShareMap tempUnManagedSMBShareMap=new UnManagedSMBShareMap();          createSMBShareMap(unManagedSMBFileShareHashSet,tempUnManagedSMBShareMap,addr,nativeId);          if (tempUnManagedSMBShareMap.size() > 0 && !tempUnManagedSMBShareMap.isEmpty()) {            unManagedFs.setUnManagedSmbShareMap(tempUnManagedSMBShareMap);            unManagedFs.setHasShares(true);            unManagedFs.putFileSystemCharacterstics(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString(),TRUE);            _logger.debug("SMB Share map for NetAppC UMFS {} = {}",unManagedFs.getLabel(),unManagedFs.getUnManagedSmbShareMap());          }          UnManagedCifsShareACL existingACL=null;          List<UnManagedCifsShareACL> tempUnManagedCifsShareAclList=getACLs(unManagedSMBFileShareHashSet,netAppCApi,storageSystem,unManagedFs.getId());          if (tempUnManagedCifsShareAclList != null && !tempUnManagedCifsShareAclList.isEmpty()) {            for (            UnManagedCifsShareACL unManagedCifsShareACL : tempUnManagedCifsShareAclList) {              existingACL=checkUnManagedFsCifsACLExistsInDB(_dbClient,unManagedCifsShareACL.getNativeGuid());              if (existingACL == null) {                unManagedCifsShareACLList.add(unManagedCifsShareACL);              } else {                existingACL.setInactive(true);                oldunManagedCifsShareACLList.add(existingACL);                unManagedCifsShareACLList.add(unManagedCifsShareACL);              }            }          }          if (unManagedSMBFileShareHashSet != null && !unManagedSMBFileShareHashSet.isEmpty()) {            _dbClient.persistObject(unManagedFs);            _logger.info("File System {} has Shares and their Count is {}",unManagedFs.getId(),tempUnManagedSMBShareMap.size());          }          if (unManagedCifsShareACLList.size() >= MAX_UMFS_RECORD_SIZE) {            _logger.info("Saving Number of New UnManagedCifsShareACL(s) {}",unManagedCifsShareACLList.size());            _partitionManager.insertInBatches(unManagedCifsShareACLList,Constants.DEFAULT_PARTITION_SIZE,_dbClient,UNMANAGED_SHARE_ACL);            unManagedCifsShareACLList.clear();          }          if (!oldunManagedCifsShareACLList.isEmpty() && oldunManagedCifsShareACLList.size() >= MAX_UMFS_RECORD_SIZE) {            _logger.info("Update Number of Old UnManagedCifsShareACL(s) {}",oldunManagedCifsShareACLList.size());            _partitionManager.updateInBatches(oldunManagedCifsShareACLList,Constants.DEFAULT_PARTITION_SIZE,_dbClient,UNMANAGED_SHARE_ACL);            oldunManagedCifsShareACLList.clear();          }        } else {          _logger.info("FileSystem " + unManagedFs + "is not present in ViPR DB. Hence ignoring "+ fileSystem+ " share");        }      }    }    if (unManagedCifsShareACLList != null && !unManagedCifsShareACLList.isEmpty()) {      _logger.info("Saving Number of New UnManagedCifsShareACL(s) {}",unManagedCifsShareACLList.size());      _partitionManager.insertInBatches(unManagedCifsShareACLList,Constants.DEFAULT_PARTITION_SIZE,_dbClient,UNMANAGED_SHARE_ACL);      unManagedCifsShareACLList.clear();    }    if (oldunManagedCifsShareACLList != null && !oldunManagedCifsShareACLList.isEmpty()) {      _logger.info("Saving Number of Old UnManagedCifsShareACL(s) {}",oldunManagedCifsShareACLList.size());      _partitionManager.updateInBatches(oldunManagedCifsShareACLList,Constants.DEFAULT_PARTITION_SIZE,_dbClient,UNMANAGED_SHARE_ACL);      oldunManagedCifsShareACLList.clear();    }    storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.COMPLETE.toString());    detailedStatusMessage=String.format("Discovery completed successfully for NetAppC: %s",storageSystemId.toString());  } catch (  NetAppCException ve) {    if (null != storageSystem) {      cleanupDiscovery(storageSystem);      storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.ERROR.toString());    }    _logger.error("discoverStorage failed.  Storage system: " + storageSystemId);  }catch (  Exception e) {    if (null != storageSystem) {      cleanupDiscovery(storageSystem);      storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.ERROR.toString());    }    _logger.error("discoverStorage failed. Storage system: " + storageSystemId,e);  } finally {    if (storageSystem != null) {      try {        storageSystem.setLastDiscoveryStatusMessage(detailedStatusMessage);        _dbClient.persistObject(storageSystem);      } catch (      Exception ex) {        _logger.error("Error while persisting object to DB",ex);      }    }  }}  }
class C{  public boolean isDefaultPrf(){  return prf == null || prf.equals(algid_hmacWithSHA1);}  }
class C{  public Path tools(){  return root.resolve("tools");}  }
class C{  public static void listDatasets(final Bigquery bigquery,final String projectId) throws IOException {  Datasets.List datasetRequest=bigquery.datasets().list(projectId);  DatasetList datasetList=datasetRequest.execute();  if (datasetList.getDatasets() != null) {    List<DatasetList.Datasets> datasets=datasetList.getDatasets();    System.out.println("Available datasets\n----------------");    System.out.println(datasets.toString());    for (    DatasetList.Datasets dataset : datasets) {      System.out.format("%s\n",dataset.getDatasetReference().getDatasetId());    }  }}  }
class C{  public TransactionImpl(){}  }
class C{  public Vertex discover(boolean details,boolean fork,String filter,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  String keywords=vertex.getDataValue();  String keywordscaps=Utils.capitalize(vertex.getDataValue());  if ((vertex2 != null) && !vertex2.is(Primitive.NULL)) {    keywords=keywords + " " + vertex2.getDataValue();    keywordscaps=keywordscaps + " " + Utils.capitalize(vertex2.getDataValue());  }  if ((vertex3 != null) && !vertex3.is(Primitive.NULL)) {    keywords=keywords + " " + vertex3.getDataValue();    keywordscaps=keywordscaps + " " + Utils.capitalize(vertex3.getDataValue());  }  if ((vertex4 != null) && !vertex4.is(Primitive.NULL)) {    keywords=keywords + " " + vertex4.getDataValue();    keywordscaps=keywordscaps + " " + Utils.capitalize(vertex4.getDataValue());  }  if ((vertex5 != null) && !vertex5.is(Primitive.NULL)) {    keywords=keywords + " " + vertex5.getDataValue();    keywordscaps=keywordscaps + " " + Utils.capitalize(vertex5.getDataValue());  }  if (keywords != null) {    if (vertex.instanceOf(Primitive.PRONOUN) || vertex.instanceOf(Primitive.ARTICLE) || vertex.instanceOf(Primitive.PUNCTUATION)|| (vertex.hasRelationship(Primitive.MEANING) && (vertex.getRelationship(Primitive.MEANING).instanceOf(Primitive.NUMBER)))|| vertex.instanceOf(Primitive.QUESTION)|| this.discoveryIgnoreWords.contains(vertex.getData())) {      return null;    }    Vertex compoundWord=vertex.getNetwork().createVertex(keywords);    Vertex lastChecked=compoundWord.getRelationship(getPrimitive());    if (lastChecked == null) {      compoundWord.addRelationship(getPrimitive(),compoundWord.getNetwork().createTimestamp());      try {        int cascade=0;        if (!details) {          cascade=-1;        }        Vertex result=null;        if (result == null) {          result=processSearch(keywords,cascade,fork,filter,vertex.getNetwork(),new HashMap<String,Vertex>());        }        if (result != null) {          compoundWord=vertex.getNetwork().createWord(keywords);          compoundWord.addRelationship(Primitive.MEANING,result);          compoundWord=vertex.getNetwork().createWord(keywords.toLowerCase());          compoundWord.addRelationship(Primitive.MEANING,result);          compoundWord=vertex.getNetwork().createWord(keywordscaps);          compoundWord.addRelationship(Primitive.MEANING,result);        }        return result;      } catch (      Exception failed) {        log(failed);      }    }    return compoundWord.mostConscious(Primitive.MEANING);  }  return null;}  }
class C{  public AttributeCertificateHolder(int digestedObjectType,ASN1ObjectIdentifier digestAlgorithm,ASN1ObjectIdentifier otherObjectTypeID,byte[] objectDigest){  holder=new Holder(new ObjectDigestInfo(digestedObjectType,otherObjectTypeID,new AlgorithmIdentifier(digestAlgorithm),Arrays.clone(objectDigest)));}  }
class C{  private static boolean matchIntlPrefix(String a,int len){  int state=0;  for (int i=0; i < len; i++) {    char c=a.charAt(i);switch (state) {case 0:      if (c == '+')       state=1; else       if (c == '0')       state=2; else       if (isNonSeparator(c))       return false;    break;case 2:  if (c == '0')   state=3; else   if (c == '1')   state=4; else   if (isNonSeparator(c))   return false;break;case 4:if (c == '1') state=5; else if (isNonSeparator(c)) return false;break;default :if (isNonSeparator(c)) return false;break;}}return state == 1 || state == 3 || state == 5;}  }
class C{  List<NamedRange> removeSurrogates(int startCodePoint,int endCodePoint){  assert startCodePoint <= endCodePoint;  if (startCodePoint >= 0xD800 && endCodePoint <= 0xDFFF) {    return Collections.emptyList();  }  List<NamedRange> ranges=new ArrayList<NamedRange>();  if (endCodePoint < 0xD800 || startCodePoint > 0xDFFF) {    ranges.add(new NamedRange(startCodePoint,endCodePoint));    return ranges;  }  if (startCodePoint < 0xD800) {    ranges.add(new NamedRange(startCodePoint,0xD7FF));  }  if (endCodePoint > 0xDFFF) {    ranges.add(new NamedRange(0xE000,endCodePoint));  }  return ranges;}  }
class C{  public void printMap(HashMap<String,HashMap<String,HashSet<Integer>>> map){  map.forEach(null);}  }
class C{  public DenseVector(int n){  u=new float[n];}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder videoHeight(int videoHeight){  this.video_height=videoHeight;  return this;}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public SizedTextField(final int columns,final Dimension dim){  super(columns);  setPreferredSize(dim);  setMaximumSize(dim);}  }
class C{  @Override public void clear(){  stackTop=0;}  }
class C{  public void createSubscription(final Color color,final boolean subscribe,final TabbedSubscriptionDetails subscriptionDetails,final MqttAsyncConnection connection,final MqttConnectionController connectionController,final Object parent){  logger.info("Creating subscription for " + subscriptionDetails.getTopic());  final MqttSubscription subscription=new MqttSubscription(subscriptionDetails.getTopic(),subscriptionDetails.getQos(),color,connection.getProperties().getConfiguredProperties().getMinMessagesStoredPerTopic(),connection.getPreferredStoreSize(),uiEventQueue,eventBus,connection.getStore().getFormattingManager(),UiProperties.getSummaryMaxPayloadLength(configurationManager.getUiPropertyFile()));  subscription.setConnection(connection);  subscription.setDetails(subscriptionDetails);  final SubscriptionController subscriptionController=createSubscriptionTab(false,subscription.getStore(),subscription,connection,connectionController);  subscriptionController.getTab().setContextMenu(ContextMenuUtils.createSubscriptionTabContextMenu(connection,subscription,eventBus,this,configurationManager,subscriptionController));  subscriptionController.setConnectionController(connectionController);  subscriptionController.setFormatters(configurationManager.getFormatters());  subscriptionController.setTabStatus(new TabStatus());  subscriptionController.getTabStatus().setVisibility(PaneVisibilityStatus.NOT_VISIBLE);  subscriptionController.init();  subscriptionController.onSubscriptionStatusChanged(new SubscriptionStatusChangeEvent(subscription));  subscription.setSubscriptionController(subscriptionController);  final SpyPerspective perspective=viewManager.getPerspective();  subscriptionController.setViewVisibility(MqttViewManager.getDetailedViewStatus(perspective),MqttViewManager.getBasicViewStatus(perspective));  subscriptionController.getTabStatus().setVisibility(PaneVisibilityStatus.ATTACHED);  subscriptionController.getTabStatus().setParent(connectionController.getSubscriptionTabs());  final TabPane subscriptionTabs=connectionController.getSubscriptionTabs();  subscriptionTabs.getTabs().add(subscriptionController.getTab());  subscriptionTabs.getTabs().get(ALL_SUBSCRIPTIONS_TAB_INDEX).setDisable(false);  if (subscribe) {    logger.debug("Trying to subscribe {}",subscription.getTopic());    connection.subscribe(subscription);  } else {    connection.addSubscription(subscription);    subscription.setActive(false);  }}  }
class C{  public static List<TriggerMessage> create(TriggerType triggerType,List<TriggerProcessParameter> params,Organization receiver){  List<TriggerMessage> messages=Collections.singletonList((new TriggerMessage(triggerType,params,Collections.singletonList(receiver))));  return messages;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.650 -0500",hash_original_method="97FF8506F533416A8B40E097933B45CB",hash_generated_method="E01E632F05C3B4BB240F0FFBFCB3F338") public javax.sip.address.SipURI createSipURI(String user,String host) throws ParseException {  if (host == null)   throw new NullPointerException("null host");  StringBuffer uriString=new StringBuffer("sip:");  if (user != null) {    uriString.append(user);    uriString.append("@");  }  if (host.indexOf(':') != host.lastIndexOf(':') && host.trim().charAt(0) != '[')   host='[' + host + ']';  uriString.append(host);  StringMsgParser smp=new StringMsgParser();  try {    SipUri sipUri=smp.parseSIPUrl(uriString.toString());    return sipUri;  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  public EntryLink(Class<E> entryClass){  this.entryClass=entryClass;}  }
class C{  public SMJReportViewer(Integer AD_PInstance_ID,String nameTrx,Integer idReport,Integer C_Period_ID,Integer AD_PrintFont_ID,MReportColumn[] columns){  super();  reportId=idReport;  m_AD_PInstance_ID=AD_PInstance_ID;  trxName=nameTrx;  p_C_Period_ID=C_Period_ID;  p_AD_PrintFont_ID=AD_PrintFont_ID;  m_columns=columns;  if (!MRole.getDefault().isCanReport(m_AD_Table_ID)) {    this.onClose();  }  try {    m_ctx=Env.getCtx();    dynInit();    init();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);    FDialog.error(m_WindowNo,this,"LoadError",e.getLocalizedMessage());    this.onClose();  }}  }
class C{  protected void decrypt(byte[] b,int off,int len,long fp){  for (int i=off; i < off + len; i++) {    b[i]=(byte)decrypt(b[i],fp++);  }}  }
class C{  public BusyPeerException(final Throwable cause){  super(cause);}  }
class C{  public static JsonObject loadCustomConfig(InputStream customConfig){  final Reader reader=new InputStreamReader(customConfig);  return new JsonParser().parse(reader).getAsJsonObject();}  }
class C{  public ManagerFactory(String databaseUrl,ManagerPool pool,long pollPeriod,TimeUnit unit,ConnectionMode mode){  this.databaseUrl=databaseUrl;  this.pool=pool;  this.pollMs=unit.toMillis(pollPeriod);  this.mode=mode;  tryCreateTables();}  }
class C{  public static void writeFileList(XMLOutput xmlOutput,String tagName,Iterator<File> listValueIterator) throws IOException {  while (listValueIterator.hasNext()) {    xmlOutput.openTag(tagName);    xmlOutput.writeText(listValueIterator.next().getPath());    xmlOutput.closeTag(tagName);  }}  }
class C{  void halt(boolean wait){synchronized (sigLock) {    halted.set(true);    if (paused) {      sigLock.notifyAll();    } else {      signalSchedulingChange(0);    }  }  if (wait) {    boolean interrupted=false;    try {      while (true) {        try {          join();          break;        } catch (        InterruptedException _) {          interrupted=true;        }      }    }  finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  public static Normal serializableInstance(){  return new Normal(0,1);}  }
class C{  static void openTag(String name){  openTag(name,true);}  }
class C{  public void reset(){  offset=0;}  }
class C{  public static boolean intersectRayCircle(Vector2fc origin,Vector2fc dir,Vector2fc center,float radiusSquared,Vector2f result){  return intersectRayCircle(origin.x(),origin.y(),dir.x(),dir.y(),center.x(),center.y(),radiusSquared,result);}  }
class C{  public RecentFilesHandler(String propsFile,int maxCount,M menu){  super(propsFile,maxCount,menu);}  }
class C{  public static InetAddress applyMask(String ip,String mask){  byte[] rawIP=null;  byte[] rawMask=null;  try {    rawIP=InetAddress.getByName(ip).getAddress();    rawMask=InetAddress.getByName(mask).getAddress();    if (rawIP.length != rawMask.length) {      logger.error("IP " + ip + " and mask "+ mask+ " use different formats");      return null;    }    byte[] maskedAddressBytes=new byte[rawIP.length];    for (int i=0; i < rawIP.length; i++) {      byte currentAddressByte=rawIP[i];      byte currentMaskByte=rawMask[i];      maskedAddressBytes[i]=(byte)(currentAddressByte & currentMaskByte);    }    return InetAddress.getByAddress(maskedAddressBytes);  } catch (  UnknownHostException uhe) {    logger.debug("Caught UnknownHostException while applying mask " + mask + " to IP "+ ip,uhe);    return null;  }}  }
class C{  public MutableInterval copy(){  return (MutableInterval)clone();}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  FullOrderTest t=new FullOrderTest();  t.setUpBase();  t.setUp();  t.testOrderVectorIndexAscEmptyNoRewriteMR();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  public void traceInstructions(boolean enable){  return;}  }
class C{  public final void testHandlingSpeed(){  SpellCheckedMetadata result;  long start=System.currentTimeMillis();  for (int i=0; i < NUM_ITERATIONS; i++) {    SpellCheckedMetadata scmd=constructSpellCheckedMetadata();    result=writeRead(scmd);  }  System.out.println(NUM_ITERATIONS + " spellchecked metadata I/O time:" + (System.currentTimeMillis() - start)+ "ms.");}  }
class C{  public void reset(){  startTime_ns=System.nanoTime();  totalPktCnt=0;  totalProcTimeNs=0;  avgTotalProcTimeNs=0;  sumSquaredProcTimeNs2=0;  maxTotalProcTimeNs=Long.MIN_VALUE;  minTotalProcTimeNs=Long.MAX_VALUE;  sigmaTotalProcTimeNs=0;  for (  OneComponentTime oct : compStats.values()) {    oct.resetAllCounters();  }}  }
class C{  public synchronized String toString(){  StringBuffer sb=new StringBuffer();  sb.append(this.getClass().getSimpleName()).append(": ");  sb.append("name=").append(file.getName());  sb.append(" mode=").append(mode);  if (dataInput != null) {    sb.append(" open=y size=").append(file.length());    sb.append(" offset=").append(dataInput.getOffset());  } else   if (dataOutput != null) {    sb.append(" open=y size=").append(file.length());    try {      sb.append(" offset=").append(dataOutput.getOffset());    } catch (    IOException e) {      sb.append(" [unable to get offset due to i/o error]");    }  } else {    sb.append(" open=n");  }  return sb.toString();}  }
class C{  private void updateTabText(ViewPagerAdapter pagerAdapter){  Typeface font=FontCache.get("Roboto-Regular.ttf",context);  for (int i=0; i < pagerAdapter.getCount(); i++) {    TextView tv=(TextView)(((LinearLayout)((LinearLayout)tabLayout.getChildAt(0)).getChildAt(i)).getChildAt(0));    tv.setAllCaps(false);    tv.setTypeface(font);  }}  }
class C{  public ExceptionBuilder moreInfo(String moreInfo){  body.setMoreInfo(moreInfo);  return this;}  }
class C{  private static void addComponent(final JPanel panel,final Component component,final String description,final String hint){  final JPanel settingPanel=new JPanel(new BorderLayout());  settingPanel.setBorder(STANDARD_EMPTY_BORDER);  settingPanel.add(new JLabel(description),BorderLayout.CENTER);  final JPanel innerPanel=new JPanel(new BorderLayout());  innerPanel.add(component,BorderLayout.CENTER);  final JHintIcon hintPopup=new JHintIcon(hint);  hintPopup.setBorder(new EmptyBorder(0,3,0,0));  innerPanel.add(hintPopup,BorderLayout.EAST);  settingPanel.add(innerPanel,BorderLayout.EAST);  panel.add(settingPanel);}  }
class C{  public Query parseUnaryTerm(ODataTokenList tokens) throws IllegalArgumentException {  ODataToken left;  ODataToken right;  ODataToken verb;  if (tokens.lookToken().getKind().equals(ODataToken.ODataTokenKind.SIMPLE_TYPE)) {    left=tokens.next();  } else {    throw new IllegalArgumentException("Term mismatch");  }  if (tokens.lookToken().getKind().equals(ODataToken.ODataTokenKind.BINARY_COMPARISON)) {    verb=tokens.next();  } else {    throw new IllegalArgumentException("Term mismatch");  }  if (tokens.lookToken().getKind().equals(ODataToken.ODataTokenKind.SIMPLE_TYPE)) {    right=tokens.next();  } else {    throw new IllegalArgumentException("Term mismatch");  }  return visitBinaryComparator(left.getUriLiteral(),stringToVerb(verb.getUriLiteral()),right.getUriLiteral());}  }
class C{  public static double variance(double shape,double scale){  if (shape > 2) {    return scale * scale / ((shape - 1) * (scale - 1) * (scale - 2));  }  return Double.POSITIVE_INFINITY;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException {  try {    stream.defaultReadObject();    m_clones=new IteratorPool(this);  } catch (  ClassNotFoundException cnfe) {    throw new javax.xml.transform.TransformerException(cnfe);  }}  }
class C{  @Override public boolean equals(Object obj){  return getMonitoredObject().equals(getMonitoredObject(obj));}  }
class C{  @OnClose public void onClose(Session session){  openSessions.remove(session.getId());  callInternal("onClose",session,null);}  }
class C{  private String buildBookmarksPath(AppContext ctx,String path){  String fullPath;  if (path == null || path.equals("")) {    String myPath=Bookmark.SEPARATOR + Bookmark.Folder.USER + Bookmark.SEPARATOR+ ctx.getUser().getOid();    fullPath=myPath;  } else {    fullPath=path;  }  return fullPath;}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public boolean hasMoreWords(){  return !this.words.isEmpty();}  }
class C{  private void initializeDefault(){  int[] defh={10,10,10,10};  int[] defw={3,3,3,3};  int[] defk={2,2,2,2};  KeyGenerationParameters kgp=new GMSSKeyGenerationParameters(new SecureRandom(),new GMSSParameters(defh.length,defh,defw,defk));  this.initialize(kgp);}  }
class C{  public DOMPGPData(Element pdElem) throws MarshalException {  byte[] keyId=null;  byte[] keyPacket=null;  NodeList nl=pdElem.getChildNodes();  int length=nl.getLength();  List<XMLStructure> other=new ArrayList<XMLStructure>(length);  for (int x=0; x < length; x++) {    Node n=nl.item(x);    if (n.getNodeType() == Node.ELEMENT_NODE) {      Element childElem=(Element)n;      String localName=childElem.getLocalName();      try {        if (localName.equals("PGPKeyID")) {          keyId=Base64.decode(childElem);        } else         if (localName.equals("PGPKeyPacket")) {          keyPacket=Base64.decode(childElem);        } else {          other.add(new javax.xml.crypto.dom.DOMStructure(childElem));        }      } catch (      Base64DecodingException bde) {        throw new MarshalException(bde);      }    }  }  this.keyId=keyId;  this.keyPacket=keyPacket;  this.externalElements=Collections.unmodifiableList(other);}  }
class C{  public static byte[] encodeBitmapAsPNG(Bitmap bitmap,boolean color,int numColors,boolean allowTransparent){  int bits;  if (!color && numColors != 2)   throw new IllegalArgumentException("must have 2 colors for black and white");  if (numColors < 2)   throw new IllegalArgumentException("minimum 2 colors"); else   if (numColors == 2)   bits=1; else   if (numColors <= 4)   bits=2; else   if (numColors <= 16)   bits=4; else   if (numColors <= 64)   bits=8; else   throw new IllegalArgumentException("maximum 64 colors");  SimpleImageEncoder encoder=new SimpleImageEncoder();  int[] pixels=new int[bitmap.getWidth() * bitmap.getHeight()];  bitmap.getPixels(pixels,0,bitmap.getWidth(),0,0,bitmap.getWidth(),bitmap.getHeight());  encoder.optimizePalette(pixels,numColors,allowTransparent);  return encoder.encodeIndexedPNG(pixels,bitmap.getWidth(),bitmap.getHeight(),color,bits);}  }
class C{  @Interruptible public static void initializeHeader(BootImageInterface bootImage,Address ref,TIB tib,int size,boolean isScalar){  byte status=Selected.Plan.get().setBuildTimeGCByte(ref,ObjectReference.fromObject(tib),size);  JavaHeader.writeAvailableByte(bootImage,ref,status);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  public boolean forwardIfCurrent(char first,char second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=forwardIfCurrent(second);  if (!rtn)   pos=start;  return rtn;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9);}  }
class C{  public static double sum(double[] v){  int m=v.length;  double s=0;  for (int i=0; i < m; i++)   s+=v[i];  return s;}  }
class C{  public synchronized void clear(){  listeners=emptyArray;}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  public static Mosaic createMosaic(final int id,final long quantity){  return new Mosaic(createMosaicId(id),Quantity.fromValue(quantity));}  }
class C{  public void addItemLabel(final JLabel label,final JComponent item){  GridBagConstraints labelConstraints=new GridBagConstraints();  labelConstraints.gridx=0;  labelConstraints.gridy=myNextItemRow;  labelConstraints.insets=new Insets(10,10,0,0);  labelConstraints.anchor=GridBagConstraints.NORTHEAST;  labelConstraints.fill=GridBagConstraints.NONE;  add(label,labelConstraints);  GridBagConstraints itemConstraints=new GridBagConstraints();  itemConstraints.gridx=1;  itemConstraints.gridy=myNextItemRow;  itemConstraints.insets=new Insets(10,10,0,10);  itemConstraints.weightx=1.0;  itemConstraints.anchor=GridBagConstraints.WEST;  itemConstraints.fill=GridBagConstraints.HORIZONTAL;  add(item,itemConstraints);  myNextItemRow++;}  }
class C{  public WorldMapLayer(String iconFilePath){  this.setOpacity(0.6);  this.setIconFilePath(iconFilePath);}  }
class C{  private void log(LogLevel eventLevel,String message,Object param){switch (eventLevel) {case TRACE:    logger.trace(message,param);  return;case DEBUG:logger.debug(message,param);return;case INFO:logger.info(message,param);return;case WARN:logger.warn(message,param);return;case ERROR:logger.error(message,param);return;default :return;}}  }
class C{  public void invokeAndBlock(Runnable r){  invokeAndBlock(r,false);}  }
class C{  public OperandExpression(final INaviOperandTreeNode node){  m_node=Preconditions.checkNotNull(node,"Error: Node argument can't be null");  for (  final IReference reference : m_node.getReferences()) {    m_references.add(new Reference(reference));  }  m_node.addListener(m_internalListener);}  }
class C{  public boolean isHighlighted(){  return isHighlighted;}  }
class C{  public SgmExcepcion(String message){  this(message,null);}  }
class C{  public BufferedInputStream(InputStream in,int size){  this(in,size,"unnamed");}  }
class C{  private void upgradeTenantDB(){  final Flyway flyway=new Flyway();  flyway.setDataSource(tenantDataSource);  flyway.setLocations("sql/migrations/list_db");  flyway.setOutOfOrder(true);  flyway.migrate();  tenantDataSourcePortFixService.fixUpTenantsSchemaServerPort();}  }
class C{  public ModelMBeanNotificationInfo(ModelMBeanNotificationInfo inInfo){  this(inInfo.getNotifTypes(),inInfo.getName(),inInfo.getDescription(),inInfo.getDescriptor());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.POSITION___ASSOCIATION_POSITION_1:    getAssociationPosition_1().clear();  getAssociationPosition_1().addAll((Collection<? extends AssociationPosition_>)newValue);return;case UmplePackage.POSITION___ELEMENT_POSITION_1:getElementPosition_1().clear();getElementPosition_1().addAll((Collection<? extends ElementPosition_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void test_insertElementAtLjava_lang_ObjectI(){  Vector v=vectorClone(tVector);  String prevElement=(String)v.elementAt(99);  v.insertElementAt("Inserted Element",99);  assertEquals("Element not inserted","Inserted Element",((String)v.elementAt(99)));  assertTrue("Elements shifted incorrectly",((String)v.elementAt(100)).equals(prevElement));  v.insertElementAt(null,20);  assertNull("null not inserted",v.elementAt(20));  try {    tVector.insertElementAt(null,-5);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.insertElementAt(null,tVector.size() + 1);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }}  }
class C{  public boolean isSetVersion(){  return EncodingUtils.testBit(__isset_bitfield,__VERSION_ISSET_ID);}  }
class C{  @Override public void remove(ZombieStatus status,StatusList statusList){  statusList.removeInternal(status);  RPEntity entity=statusList.getEntity();  if (entity == null) {    return;  }  Status nextStatus=statusList.getFirstStatusByClass(ZombieStatus.class);  entity.setBaseSpeed(originalSpeed);  if (nextStatus != null) {    TurnNotifier.get().notifyInSeconds(60,new StatusRemover(statusList,nextStatus));  } else {    entity.sendPrivateText(NotificationType.SCENE_SETTING,"You are no longer zombified.");    entity.remove("status_" + status.getName());  }}  }
class C{  @Override public void printStackTrace(){  super.printStackTrace();  if (nested != null) {    nested.printStackTrace();  }}  }
class C{  protected AbstractExtension(XmlNamespace namespace,String localName){  this.namespace=namespace;  this.localName=localName;}  }
class C{  public ProcessingUnit(CompilerConfiguration configuration,GroovyClassLoader classLoader,ErrorCollector er){  this.phase=Phases.INITIALIZATION;  this.configuration=configuration;  this.setClassLoader(classLoader);  configure((configuration == null ? new CompilerConfiguration() : configuration));  if (er == null)   er=new ErrorCollector(getConfiguration());  this.errorCollector=er;}  }
class C{  public boolean checkSlotsAndSizes(@Nonnull IInventory inv,@Nonnull IMultiItemStacks[] filter,int[] from){  assert filter.length == from.length;  for (int i=0; i < filter.length; ++i) {    if (!checkSlotAndSize(inv,filter[i],from[i]))     return false;  }  return true;}  }
class C{  public ContentModel(int type,ContentModel content){  this(type,content,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.FAULT_SOURCE__PROPERTY:    setProperty((Property)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private String discoverTagName(RSyntaxDocument doc,int dot){  Stack stack=new Stack();  Element root=doc.getDefaultRootElement();  int curLine=root.getElementIndex(dot);  for (int i=0; i <= curLine; i++) {    Token t=doc.getTokenListForLine(i);    while (t != null && t.isPaintable()) {      if (t.type == Token.MARKUP_TAG_DELIMITER) {        if (t.isSingleChar('<') || t.isSingleChar('[')) {          t=t.getNextToken();          while (t != null && t.isPaintable()) {            if (t.type == Token.MARKUP_TAG_NAME || t.type == Token.MARKUP_TAG_ATTRIBUTE) {              stack.push(t.getLexeme());              break;            }            t=t.getNextToken();          }        } else         if (t.textCount == 2 && t.text[t.textOffset] == '/' && (t.text[t.textOffset + 1] == '>' || t.text[t.textOffset + 1] == ']')) {          if (!stack.isEmpty()) {            stack.pop();          }        } else         if (t.textCount == 2 && (t.text[t.textOffset] == '<' || t.text[t.textOffset] == '[') && t.text[t.textOffset + 1] == '/') {          String tagName=null;          if (!stack.isEmpty()) {            tagName=(String)stack.pop();          }          if (t.offset + t.textCount >= dot) {            return tagName;          }        }      }      t=t.getNextToken();    }  }  return null;}  }
class C{  public VarNode tVarLeft(){  return (VarNode)super.getRequiredProperty(Annotations.TRANSITIVITY_VAR_LEFT);}  }
class C{  public boolean removeAll(Collection<?> c){  Objects.requireNonNull(c);  boolean modified=false;  if (size() > c.size()) {    for (Iterator<?> i=c.iterator(); i.hasNext(); )     modified|=remove(i.next());  } else {    for (Iterator<?> i=iterator(); i.hasNext(); ) {      if (c.contains(i.next())) {        i.remove();        modified=true;      }    }  }  return modified;}  }
class C{  private void saveVolatiles(Instruction inst){  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asPPC();  Register FP=phys.getFP();  int i=0;  for (Enumeration<Register> e=phys.enumerateVolatileGPRs(); e.hasMoreElements(); i++) {    Register r=e.nextElement();    int location=saveVolatileGPRLocation[i];    inst.insertBefore(MIR_Store.create(PPC_STAddr,A(r),A(FP),IC(location)));  }  i=0;  for (Enumeration<Register> e=phys.enumerateVolatileFPRs(); e.hasMoreElements(); i++) {    Register r=e.nextElement();    int location=saveVolatileFPRLocation[i];    inst.insertBefore(MIR_Store.create(PPC_STFD,D(r),A(FP),IC(location)));  }  Register temp=phys.getTemp();  inst.insertBefore(MIR_Move.create(PPC_MFSPR,I(temp),I(phys.getXER())));  inst.insertBefore(MIR_Store.create(PPC_STW,I(temp),A(FP),IC(saveXERLocation)));  inst.insertBefore(MIR_Move.create(PPC_MFSPR,A(temp),A(phys.getCTR())));  inst.insertBefore(MIR_Store.create(PPC_STAddr,A(temp),A(FP),IC(saveCTRLocation)));}  }
class C{  public void add(final ConversationStates[] states,final String trigger,final ChatCondition condition,final ConversationStates nextState,final String reply,final ChatAction action){  for (  final ConversationStates state : states) {    add(state,trigger,condition,nextState,reply,action);  }}  }
class C{  public void clear(String className){  rawCFGs.remove(className);  actualCFGs.remove(className);  controlDependencies.remove(className);}  }
class C{  public ApplicationUtil(String token) throws LoginException {  api=new JDAImpl(false,false,false);  api.verifyToken(token);}  }
class C{  public String toJson(){  Gson gson=new Gson();  return gson.toJson(payload);}  }
class C{  public CareerLevel careerLevel(){  return careerLevel;}  }
class C{  @Override public Dimension minimumLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getMinimumSize();      if (w < d.width) {        w=d.width;      }      if (h < d.height) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + ncols * w + (ncols - 1) * hgap,insets.top + insets.bottom + nrows * h + (nrows - 1) * vgap);  }}  }
class C{  public void refresh(){  validate();  repaint();}  }
class C{  public static double standardError(int size,double variance){  return Math.sqrt(variance / size);}  }
class C{  private int readFromResponse(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  try {    return entityStream.read(data);  } catch (  IOException ex) {    logNetworkState();    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownload(mInfo);    if (cannotResume(innerState)) {      String message="while reading response: " + ex.toString() + ", can't resume interrupted download with no ETag";      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,message,ex);    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"while reading response: " + ex.toString(),ex);    }  }}  }
class C{  public void cleanUp(){  cleanUpStatics(this.sender);}  }
class C{  public int awaitAdvance(int phase){  final Phaser root=this.root;  long s=(root == this) ? state : reconcileState();  int p=(int)(s >>> PHASE_SHIFT);  if (phase < 0)   return phase;  if (p == phase)   return root.internalAwaitAdvance(phase,null);  return p;}  }
class C{  protected ReferenceType mergeReferenceTypes(ReferenceType aRef,ReferenceType bRef) throws DataflowAnalysisException {  if (aRef.equals(bRef)) {    return aRef;  }  byte aType=aRef.getType();  byte bType=bRef.getType();  try {    if (isObjectType(aType) && isObjectType(bType) && ((aType == T_EXCEPTION || isThrowable(aRef)) && (bType == T_EXCEPTION || isThrowable(bRef)))) {      ExceptionSet union=exceptionSetFactory.createExceptionSet();      if (aType == T_OBJECT && "Ljava/lang/Throwable;".equals(aRef.getSignature())) {        return aRef;      }      if (bType == T_OBJECT && "Ljava/lang/Throwable;".equals(bRef.getSignature())) {        return bRef;      }      updateExceptionSet(union,(ObjectType)aRef);      updateExceptionSet(union,(ObjectType)bRef);      Type t=ExceptionObjectType.fromExceptionSet(union);      if (t instanceof ReferenceType) {        return (ReferenceType)t;      }    }    if (aRef instanceof GenericObjectType && bRef instanceof GenericObjectType && aRef.getSignature().equals(bRef.getSignature())) {      GenericObjectType aG=(GenericObjectType)aRef;      GenericObjectType bG=(GenericObjectType)bRef;      if (aG.getTypeCategory() == bG.getTypeCategory()) {switch (aG.getTypeCategory()) {case PARAMETERIZED:          List<? extends ReferenceType> aP=aG.getParameters();        List<? extends ReferenceType> bP=bG.getParameters();      assert aP != null;    assert bP != null;  if (aP.size() != bP.size()) {    break;  }ArrayList<ReferenceType> result=new ArrayList<ReferenceType>(aP.size());for (int i=0; i < aP.size(); i++) {result.add(mergeReferenceTypes(aP.get(i),bP.get(i)));}GenericObjectType rOT=GenericUtilities.getType(aG.getClassName(),result);return rOT;}}}if (aRef instanceof GenericObjectType) {aRef=((GenericObjectType)aRef).getObjectType();}if (bRef instanceof GenericObjectType) {bRef=((GenericObjectType)bRef).getObjectType();}if (Subtypes2.ENABLE_SUBTYPES2_FOR_COMMON_SUPERCLASS_QUERIES) {return AnalysisContext.currentAnalysisContext().getSubtypes2().getFirstCommonSuperclass(aRef,bRef);} else {return aRef.getFirstCommonSuperclass(bRef);}} catch (ClassNotFoundException e) {lookupFailureCallback.reportMissingClass(e);return Type.OBJECT;}}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.242 -0500",hash_original_method="CA4CA07B31DF6CB609C05636F40DB22F",hash_generated_method="F1656D64C351B2C62FC72407CC65AFFB") public RSeqHeader createRSeqHeader(long sequenceNumber) throws InvalidArgumentException {  if (sequenceNumber < 0)   throw new InvalidArgumentException("invalid sequenceNumber arg " + sequenceNumber);  RSeq rseq=new RSeq();  rseq.setSeqNumber(sequenceNumber);  return rseq;}  }
class C{  public static long readDwordLittleEndian(final byte[] data,final int offset){  return ((data[offset + 3] & 0xFFL) * 0x100 * 0x100* 0x100) + ((data[offset + 2] & 0xFFL) * 0x100 * 0x100) + ((data[offset + 1] & 0xFFL) * 0x100)+ (data[offset + 0] & 0xFFL);}  }
class C{  protected void captureSnapshot(final String messagePrefix){  ScreenshotUtil.captureSnapshot(messagePrefix);}  }
class C{  public boolean isFailFast(){  return failFast;}  }
class C{  public void triggerUpdateOnStartup(){  mTriggerUpdate=true;}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  protected final void startNamespaceMapping() throws SAXException {  int count=fNamespaceContext.getDeclaredPrefixCount();  if (count > 0) {    String prefix=null;    String uri=null;    for (int i=0; i < count; i++) {      prefix=fNamespaceContext.getDeclaredPrefixAt(i);      uri=fNamespaceContext.getURI(prefix);      fContentHandler.startPrefixMapping(prefix,(uri == null) ? "" : uri);    }  }}  }
class C{  public static GoogleAnalytics initialiseGoogleAnalytics(Context context,String trackerId,final ExceptionParser callback){  mAnalytics=GoogleAnalytics.getInstance(context);  mAnalytics.setLocalDispatchPeriod(1800);  mTracker=mAnalytics.newTracker(trackerId);  mTracker.enableExceptionReporting(true);  mTracker.enableAutoActivityTracking(true);  Thread.UncaughtExceptionHandler handler=Thread.getDefaultUncaughtExceptionHandler();  if (handler != null && handler instanceof ExceptionReporter) {    ExceptionReporter exceptionReporter=(ExceptionReporter)handler;    exceptionReporter.setExceptionParser(callback);    Thread.setDefaultUncaughtExceptionHandler(exceptionReporter);    Log.d(LOG_TAG,"Analytics active.");  } else {    Log.e(LOG_TAG,"Cannot set custom exception parser.");  }  return mAnalytics;}  }
class C{  protected void drawCheckboxes(DrawContext dc,Iterable<NodeLayout> nodes){  GL2 gl=dc.getGL().getGL2();  Dimension symbolSize;  if (!dc.isPickingMode()) {    this.drawFilledCheckboxes(dc,nodes);    this.drawCheckmarks(dc,nodes);    symbolSize=this.getSelectedSymbolSize();  } else {    symbolSize=new Dimension(this.getSelectedSymbolSize().width + this.getActiveAttributes().getIconSpace(),this.lineHeight + this.getActiveAttributes().getRowSpacing());  }  if (dc.isPickingMode()) {    gl.glBegin(GL2.GL_QUADS);  }  try {    for (    NodeLayout layout : nodes) {      int vertAdjust=layout.bounds.height - symbolSize.height - (this.lineHeight - symbolSize.height) / 2;      int x=layout.drawPoint.x;      int y=layout.drawPoint.y + vertAdjust;      int width=symbolSize.width;      if (!dc.isPickingMode()) {        gl.glBegin(GL2.GL_LINE_LOOP);        try {          gl.glVertex2f(x + width,y + symbolSize.height + 0.5f);          gl.glVertex2f(x,y + symbolSize.height + 0.5f);          gl.glVertex2f(x,y);          gl.glVertex2f(x + width,y + 0.5f);        }  finally {          gl.glEnd();        }      } else {        Color color=dc.getUniquePickColor();        int colorCode=color.getRGB();        this.pickSupport.addPickableObject(colorCode,this.createSelectControl(layout.node));        gl.glColor3ub((byte)color.getRed(),(byte)color.getGreen(),(byte)color.getBlue());        if (layout.node.isLeaf() || !this.isDrawNodeStateSymbol()) {          width=x - this.screenLocation.x + symbolSize.width;          x=this.screenLocation.x;        }        gl.glVertex2f(x + width,y + symbolSize.height);        gl.glVertex2f(x,y + symbolSize.height);        gl.glVertex2f(x,y);        gl.glVertex2f(x + width,y);      }      layout.drawPoint.x+=symbolSize.width + this.getActiveAttributes().getIconSpace();    }  }  finally {    if (dc.isPickingMode()) {      gl.glEnd();    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isPrefixOf(Path anotherPath){  if (device == null) {    if (anotherPath.getDevice() != null) {      return false;    }  } else {    if (!device.equalsIgnoreCase(anotherPath.getDevice())) {      return false;    }  }  if (isEmpty() || (isRoot() && anotherPath.isAbsolute())) {    return true;  }  int len=segments.length;  if (len > anotherPath.segmentCount()) {    return false;  }  for (int i=0; i < len; i++) {    if (!segments[i].equals(anotherPath.segment(i)))     return false;  }  return true;}  }
class C{  public ParseACL(ParseUser owner){  this();  setReadAccess(owner,true);  setWriteAccess(owner,true);}  }
class C{  public boolean isZoomYEnabled(){  return mZoomYEnabled;}  }
class C{  public Template(String id,String name,String description,String contextTypeId,String pattern,boolean isAutoInsertable){  this.id=id;  Assert.isNotNull(description);  fDescription=description;  fName=name;  Assert.isNotNull(contextTypeId);  fContextTypeId=contextTypeId;  fPattern=pattern;  fIsAutoInsertable=isAutoInsertable;}  }
class C{  COMMarkerSegment(JPEGBuffer buffer) throws IOException {  super(buffer);  loadData(buffer);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean startsWith(String prefix,int toffset){  return m_str.startsWith(prefix,toffset);}  }
class C{  public Flag registerRequired(final char nameChar,final String name,final Class<?> type,final String usage,final String description){  return registerRequired(Character.valueOf(nameChar),name,type,usage,description);}  }
class C{  public int hashCode(){  return id.hashCode();}  }
class C{  public void newMethod(String methodName){  assert (currentMethod == null) || currentMethod.getCode().isEmpty();  assert currentMethodVars.isEmpty();  currentScope=TestScope.METHOD;  currentMethod=new MethodDef(methodName);}  }
class C{  public void addIterator(DTMIterator expr){  if (null == m_iterators) {    m_iterators=new DTMIterator[1];    m_iterators[0]=expr;  } else {    DTMIterator[] exprs=m_iterators;    int len=m_iterators.length;    m_iterators=new DTMIterator[len + 1];    System.arraycopy(exprs,0,m_iterators,0,len);    m_iterators[len]=expr;  }  expr.nextNode();  if (expr instanceof Expression)   ((Expression)expr).exprSetParent(this);}  }
class C{  private BufferedImageHelper(){}  }
class C{  private void processOutputWsList(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  EventPublisher ep=new EventPublisher();  try {    ep.setSsAuthSubToken((String)request.getSession().getAttribute(SESSION_ATTR_SS_AUTH_TOKEN),false);    request.setAttribute("token",ep.getSsAuthSubToken());    request.setAttribute("wsList",ep.getWsList((String)request.getParameter("wsFeed")));  } catch (  EPAuthenticationException e) {    System.err.println("Authentication exception: " + e.getMessage());  }  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher("/WEB-INF/jsp/outputWsList.jsp");  dispatcher.forward(request,response);}  }
class C{  public Job createJob(String activitiXmlClasspathResourceName) throws Exception {  jobDefinitionServiceTestHelper.createJobDefinition(activitiXmlClasspathResourceName);  return jobService.createAndStartJob(createJobCreateRequest(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD,AbstractServiceTest.TEST_ACTIVITI_JOB_NAME));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  ScreenController(GameScreen screen){  this.screen=screen;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static Set<String> parseSpaceSeparatedTokens(String attr){  Set<String> tokens=new HashSet<>();  if (attr != null && !attr.trim().isEmpty()) {    String[] items=attr.trim().split(CommonPattern.SPACES.pattern());    Collections.addAll(tokens,items);  }  return tokens;}  }
class C{  public static void waitForProcessOutput(Process self,Appendable output,Appendable error){  Thread tout=consumeProcessOutputStream(self,output);  Thread terr=consumeProcessErrorStream(self,error);  try {    tout.join();  } catch (  InterruptedException ignore) {  }  try {    terr.join();  } catch (  InterruptedException ignore) {  }  try {    self.waitFor();  } catch (  InterruptedException ignore) {  }  closeStreams(self);}  }
class C{  private void cmd_newEdit(){  boolean rw=cbNewEdit.isChecked();  log.config("R/W=" + rw + " "+ m_masi);  fieldLotString.setReadonly(!(rw && m_masi.getM_Lot_ID() == 0));  if (fieldLot != null)   fieldLot.setEnabled(rw);  bLot.setEnabled(rw);  fieldSerNo.setReadonly(!rw);  bSerNo.setEnabled(rw);  fieldGuaranteeDate.setReadonly(!rw);  for (int i=0; i < m_editors.size(); i++) {    HtmlBasedComponent editor=m_editors.get(i);    if (editor instanceof InputElement)     ((InputElement)editor).setReadonly(!rw); else     if (editor instanceof Listbox)     ((Listbox)editor).setEnabled(rw); else     if (editor instanceof NumberBox)     ((NumberBox)editor).setEnabled(rw);  }}  }
class C{  public static final Parameter base(){  return new Parameter(P_SIMPLE);}  }
class C{  public void pauseAll(){  List<Integer> list=mThreadPool.getAllExactRunningDownloadIds();  if (FileDownloadLog.NEED_LOG) {    FileDownloadLog.d(this,"pause all tasks %d",list.size());  }  for (  Integer id : list) {    pause(id);  }}  }
class C{  public td addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public void receiveChangeCipherSpec(){  if (isResuming) {    if (serverHello == null) {      unexpectedMessage();    }  } else   if (clientFinished == null) {    unexpectedMessage();  }  changeCipherSpecReceived=true;}  }
class C{  public boolean cgDeleteRollbackStep(URI rpSystem,Set<URI> volumeIDs,String token) throws WorkflowException {  WorkflowStepCompleter.stepExecuting(token);  _log.info("cgDeleteStep rollback is a no-op");  WorkflowStepCompleter.stepSucceded(token);  return true;}  }
class C{  public PaintScaleLegend(PaintScale scale,ValueAxis axis){  ParamChecks.nullNotPermitted(axis,"axis");  this.scale=scale;  this.axis=axis;  this.axis.addChangeListener(this);  this.axisLocation=AxisLocation.BOTTOM_OR_LEFT;  this.axisOffset=0.0;  this.axis.setRange(scale.getLowerBound(),scale.getUpperBound());  this.stripWidth=15.0;  this.stripOutlineVisible=true;  this.stripOutlinePaint=Color.gray;  this.stripOutlineStroke=new BasicStroke(0.5f);  this.backgroundPaint=Color.white;  this.subdivisions=100;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  try {    return new Integer(sage.locator.LocatorLookupClient.haveLocatorPingID(getString(stack)));  } catch (  Exception e) {    return new Integer(-1);  }}  }
class C{  public void add(String re,Object ret) throws REException {  add(re,ret,false);}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:57.477 -0500",hash_original_method="F29A79C31A2CA4FED1ACCEFFCCC8C171",hash_generated_method="ED094E0A84AEB6D086FD82573B890E67") static void cancelThumbnailRequest(ContentResolver cr,long origId,Uri baseUri,long groupId){  Uri cancelUri=baseUri.buildUpon().appendQueryParameter("cancel","1").appendQueryParameter("orig_id",String.valueOf(origId)).appendQueryParameter("group_id",String.valueOf(groupId)).build();  Cursor c=null;  try {    c=cr.query(cancelUri,PROJECTION,null,null,null);  }  finally {    if (c != null)     c.close();  }}  }
class C{  public static boolean isStaticInit(SootMethod method){  return "void <clinit>()".equals(method.getSubSignature());}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  log.info(evt.toString());  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  @Override protected void doAction(){  deleteSelectedEntry();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ValidationFormat ver[");  buffer.append(ver);  buffer.append("] fdrvldmacroid [");  buffer.append(fdrvldmacroid);  buffer.append("] numreqflds [");  buffer.append(numreqflds);  buffer.append("] reqfldid [");  for (Iterator it=reqfldid.iterator(); it.hasNext(); ) {    buffer.append(it.next());  }  buffer.append("] numfldvlds [");  buffer.append(numfldvlds);  buffer.append("] fldvlddefs [");  Integer key=null;  for (Iterator it=fldvlddefs.keySet().iterator(); it.hasNext(); ) {    key=(Integer)it.next();    buffer.append("\n\t");    buffer.append(key);    buffer.append(" ");    buffer.append(fldvlddefs.get(key));  }  buffer.append("\n]");  return buffer.toString();}  }
class C{  public void testMomentWithNoTypeErrorHandling(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+="<moment " + "id='start' >";  xml+=createNextMomentXml("start");  xml+=createLengthMinutesXml(0.25);  xml+=createEndMomentXml();  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  boolean didMissionParseFail=false;  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    didMissionParseFail=true;  }  Assert.assertEquals(true,didMissionParseFail);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException {  throw new NotSerializableException();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @Override public void run(){  amIActive=true;  String sourceHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster sourceImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, flowDir;  float progress=0;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double lnOf2=0.693147180559945;  double gridRes;  int col, row, a;  int c;  int x, y, i;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      sourceHeader=args[i];    } else     if (i == 1) {      backLinkHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((sourceHeader == null) || (backLinkHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    sourceImage=new WhiteboxRaster(sourceHeader,"r");    rows=sourceImage.getNumberRows();    cols=sourceImage.getNumberColumns();    double noData=sourceImage.getNoDataValue();    gridRes=(sourceImage.getCellSizeX() + sourceImage.getCellSizeY()) / 2;    backLink=new WhiteboxRaster(backLinkHeader,"r");    if (backLink.getNumberColumns() != cols || backLink.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",sourceHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(sourceImage.getPreferredPalette());    updateProgress("Loop 1 of 2:",0);    double[] data;    for (row=0; row < rows; row++) {      data=sourceImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > 0) {          output.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (backLink.getValue(row,col) != noData && output.getValue(row,col) == noData) {          x=col;          y=row;          z=noData;          flag=true;          do {            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) > 0) {                z=output.getValue(y,x);                flag=false;              }            } else {              z=output.getValue(y,x);              flag=false;            }          } while (flag);          x=col;          y=row;          flag=true;          do {            output.setValue(y,x,z);            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) > 0) {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    sourceImage.close();    backLink.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public byte[] generateSignature(){  if (!forSigning) {    throw new IllegalStateException("DSADigestSigner not initialised for signature generation.");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  BigInteger[] sig=dsaSigner.generateSignature(hash);  try {    return derEncode(sig[0],sig[1]);  } catch (  IOException e) {    throw new IllegalStateException("unable to encode signature");  }}  }
class C{  protected int timedRead(byte[] b,int off,int len) throws IOException {  return (in.read(b,off,len));}  }
class C{  public static String toJSONStringSubset(ResultList rs,QueryParameters qps,int status,String message,String[] subset){  HashSet<String> ms=new HashSet<String>();  if (subset != null)   for (int i=0; i < subset.length; i++)   ms.add(subset[i]);  boolean filter=ms.size() > 0;  StringBuilder sb=new StringBuilder();  sb.append("{\"resp\":{\"status\":").append(status);  if (rs != null && rs.getTotalResponseTime() > 0) {    sb.append(",\"totalTime\":\"").append(rs.getTotalResponseTime()).append("ms\"");    sb.append(",\"execTime\":\"").append(rs.getTotalExecutionTime()).append("ms\"");    sb.append(",\"fetchTime\":\"").append(rs.getTotalFetchTime()).append("ms\"");  }  sb.append(",\"message\":\"").append(escapeJson(message)).append("\"");  if (qps != null) {    sb.append(",\"request\":{");    sb.append("\"group\":\"").append(qps.getGroup()).append("\"");    sb.append(",\"host\":\"").append(qps.getHost()).append("\"");    sb.append(",\"sql\":\"").append(qps.getSql()).append("\"");    for (    Map.Entry<String,String> e : qps.getSqlParams().entrySet()) {      sb.append(",\"").append(e.getKey()).append("\":\"").append(e.getValue()).append("\"");    }    sb.append("}\r\n");  }  if (rs != null) {    List<ColumnInfo> cols=rs.getColumnDescriptor().getColumns();    sb.append(",\"results\":{");    sb.append("\"total\":\"").append(rs.getRows().size()).append("\",");    sb.append("\"columns\":[");{      boolean first=true;      for (int i=0; i < cols.size(); i++) {        if (filter && !ms.contains(cols.get(i).getName()))         continue;        if (!first)         sb.append(",");        first=false;        sb.append("\"").append(cols.get(i).getName().toUpperCase() + "\"");      }    }    sb.append("],\r\n");    boolean firstRow=true;    sb.append("\"results\":[");    for (    ResultRow row : rs.getRows()) {      if (!firstRow)       sb.append(",");      int len=row.getColumns().size();      boolean first=true;      sb.append("{");      for (int i=0; i < len; i++) {        if (filter && !ms.contains(cols.get(i).getName()))         continue;        if (!first)         sb.append(",");        sb.append("\"").append(escapeJson(cols.get(i).getName().toUpperCase())).append("\":");        if (cols.get(i).isNumberType()) {          if (row.getColumns().get(i) == null || row.getColumns().get(i).trim().length() == 0)           sb.append("\"\""); else           sb.append(escapeJson(row.getColumns().get(i)));        } else         sb.append("\"").append(escapeJson(row.getColumns().get(i))).append("\"");        first=false;      }      sb.append("}\r\n");      firstRow=false;    }    sb.append("]}");  }  sb.append("}}");  return sb.toString();}  }
class C{  protected void resumeAutomaticRunning(){  if ((_activeTrain.getStatus() == ActiveTrain.WORKING) || (_activeTrain.getStatus() == ActiveTrain.READY)) {    _autoTrainAction.cancelDoneSensor();    if (initialize()) {      _resumingAutomatic=true;    } else {      log.error("Failed to initialize throttle when resuming automatic mode.");    }  }}  }
class C{  public static void temporarilyForConnector(String connectorType,String connectorName,String contextName,Runnable operation){  if (connectorType == null)   throw new IllegalArgumentException("The MDC value for the connector type may not be null");  if (connectorName == null)   throw new IllegalArgumentException("The MDC value for the connector name may not be null");  if (contextName == null)   throw new IllegalArgumentException("The MDC value for the connector context may not be null");  if (operation == null)   throw new IllegalArgumentException("The operation may not be null");  PreviousContext previous=new PreviousContext();  try {    forConnector(connectorType,connectorName,contextName);    operation.run();  }  finally {    previous.restore();  }}  }
class C{  public java.lang.StringBuffer insert(int offset,char c){  internal.insert(offset,c);  return this;}  }
class C{  public void parse(String filename) throws IOException {  parse(new InputSource(filename));}  }
class C{  public void openPlayer(View view){  Intent intent=new Intent(this,URLMediaPlayerActivity.class);  intent.putExtra(AUDIO_URL,"https://dl.dropboxusercontent.com/u/2763264/RSS%20MP3%20Player/prova1.mp3");  intent.putExtra(IMG_URL,"https://dl.dropboxusercontent.com/u/2763264/RSS%20MP3%20Player/img3.jpg");  startActivity(intent);}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public synchronized boolean addAll(Collection c){  modCount++;  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityHelper(elementCount + numNew);  System.arraycopy(a,0,elementData,elementCount,numNew);  elementCount+=numNew;  return numNew != 0;}  }
class C{  public Set<String> upload(final String localFileName){  final Set<String> before=getAllArtifactIds();  get(String.format("/channel/%s/add",this.id));  final WebElement link=this.context.findElement(By.linkText("Upload"));  Assert.assertTrue(link.findElement(By.xpath("..")).getAttribute("class").contains("active"));  ;  final File input=this.context.getTestFile(localFileName);{    final WebElement ele=this.context.findElement(By.id("file"));    Assert.assertNotNull(ele);    ele.sendKeys(input.toString());    ele.submit();  }  final Set<String> after=getAllArtifactIds();  after.removeAll(before);  return after;}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  public AuthPolicyFile(){  String prop=System.getProperty(AUTH_POLICY);  if (prop == null) {    prop=System.getProperty(SECURITY_MANAGER);  }  if (prop != null) {    init();  }}  }
class C{  public Subscription(String jid,String nodeId,String subscriptionId,State state,boolean configRequired){  super(PubSubElementType.SUBSCRIPTION,nodeId);  this.jid=jid;  id=subscriptionId;  this.state=state;  this.configRequired=configRequired;}  }
class C{  public double sampleFromCDF(){  Double d=null;  double rnd=MatsimRandom.getRandom().nextDouble();  int index=1;  while (d == null && index <= this.getNumBins()) {    if (this.ys[index] > rnd) {      d=this.xs[index - 1] + (this.xs[index] - this.xs[index - 1]) / 2;    } else {      index++;    }  }  assert (d != null) : "Could not draw from the cumulative distribution function";  return d;}  }
class C{  protected boolean removeEldestEntry(Map.Entry<K,V> eldest){  return false;}  }
class C{  private void checkTelephonySupport(){  final TelephonyManager telephony=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);  final int phoneType=telephony.getPhoneType();  if (phoneType != TelephonyManager.PHONE_TYPE_NONE) {    return;  }  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_when_to_speak_key);  final Preference prefCallerId=findPreferenceByResId(R.string.pref_caller_id_key);  if (prefCallerId != null) {    category.removePreference(prefCallerId);  }}  }
class C{  public void addRow(Sensor sensor){  data.add(sensor);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Float(0); else   return new Float((1.0f - (uiMgr.getOverscanOffsetY() * 1.0f / (uiMgr.getRootPanel().getHeight())) - uiMgr.getOverscanScaleHeight()) / uiMgr.getOverscanScaleHeight());}  }
class C{  private void updateThumbnailMatrix(){  if (mThumbnail == null)   return;  if (mImageMatrix == null)   mImageMatrix=new Matrix();  float widthScale=(float)getMeasuredWidth() / mThumbnail.getWidth();  float heightScale=(float)getMeasuredHeight() / mThumbnail.getHeight();  float scale=Math.max(widthScale,heightScale);  mImageMatrix.setScale(scale,scale);  setImageMatrix(mImageMatrix);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.ENTRY_POINT_SPEC__ENTRYPOINT:    return ENTRYPOINT_EDEFAULT == null ? entrypoint != null : !ENTRYPOINT_EDEFAULT.equals(entrypoint);}return super.eIsSet(featureID);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case OrientedPackage.COMPONENT__INPUT_COMPONET_REFS:    return getInputComponetRefs();case OrientedPackage.COMPONENT__OUTPUT_COMPONET_REFS:  return getOutputComponetRefs();case OrientedPackage.COMPONENT__INPUT_PORT_REFS:return getInputPortRefs();case OrientedPackage.COMPONENT__OUTPUT_PORT_REFS:return getOutputPortRefs();case OrientedPackage.COMPONENT__ID:return getId();case OrientedPackage.COMPONENT__INPUT_CNT:return getInputCnt();case OrientedPackage.COMPONENT__OUTPUT_CNT:return getOutputCnt();}return null;}  }
class C{  private com.google.security.zynamics.binnavi.debug.models.trace.TraceLogger createLogger(){  return new com.google.security.zynamics.binnavi.debug.models.trace.TraceLogger(project == null ? new ModuleTraceProvider(module.getNative()) : new ProjectTraceProvider(project.getNative()),debugger.getNative());}  }
class C{  @SuppressWarnings({"varargs","unchecked"}) public static <A>List<A> of(A x1,A x2,A x3,A... rest){  return new List<A>(x1,new List<A>(x2,new List<A>(x3,from(rest))));}  }
class C{  public boolean visit(IfStatement node){  return true;}  }
class C{  protected void report(Exception e,boolean child){  println(e.getMessage());  stacktrace(e,false);}  }
class C{  public static void stepInto(final JFrame parent,final IDebugger debugger){  checkArguments(parent,debugger);  if (!debugger.isConnected()) {    return;  }  final TargetProcessThread activeThread=debugger.getProcessManager().getActiveThread();  try {    debugger.getProcessManager().setActiveThread(null);    debugger.singleStep();  } catch (  final DebugExceptionWrapper e) {    CUtilityFunctions.logException(e);    debugger.getProcessManager().setActiveThread(activeThread);    final String innerMessage="E00192: " + "Could not send single step command to the debug client";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the single step command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  public static GroupLifecycleManager onCreate(ObservableManager observableManager,LifecycleResubscription resubscription,@Nullable Bundle savedState,@Nullable Object target){  boolean shouldResubscribe=target != null && savedState != null;  ObservableGroup group;  if (savedState != null) {    State state=savedState.getParcelable(KEY_STATE);    Preconditions.checkState(state != null,"Must call onSaveInstanceState() first");    if (state.managerId != observableManager.id()) {      group=observableManager.newGroup();    } else {      group=observableManager.getGroup(state.groupId);    }  } else {    group=observableManager.newGroup();  }  group.lock();  GroupLifecycleManager manager=new GroupLifecycleManager(observableManager,group,resubscription);  if (shouldResubscribe) {    manager.subscribe(target);  }  return manager;}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  @Override public final boolean add(final E e){  if (collection.contains(e))   return false;  if (collection.size() - 1 == SMALL_CAPACITY && capacity <= SMALL_CAPACITY) {    LinkedHashSet<E> newCollection=new LinkedHashSet<E>(LARGE_CAPACITY);    newCollection.addAll(collection);    collection=newCollection;    capacity=LARGE_CAPACITY;    conversions++;  }  return collection.add(e);}  }
class C{  protected void addChildListeners(){}  }
class C{  public static String mergePath(String current,String realPath) throws MalformedURLException {  String currDir;  if (current == null || current.indexOf('/') == -1)   currDir="/"; else   if (current.endsWith("/"))   currDir=current; else   currDir=current.substring(0,current.lastIndexOf('/') + 1);  String path;  if (realPath.startsWith("./"))   path=currDir + realPath.substring(2); else   if (realPath.startsWith("/"))   path=realPath; else   if (!realPath.startsWith("../"))   path=currDir + realPath; else {    while (realPath.startsWith("../") || currDir.length() == 0) {      realPath=realPath.substring(3);      currDir=currDir.substring(0,currDir.length() - 1);      int index=currDir.lastIndexOf('/');      if (index == -1)       throw new MalformedURLException("invalid realpath definition for URL");      currDir=currDir.substring(0,index + 1);    }    path=currDir + realPath;  }  return path;}  }
class C{  public void updateCalorie(double calorie){  tripStatistics.setCalorie(calorie);  currentSegment.setCalorie(0);}  }
class C{  public void menuSelectionChanged(boolean isIncluded){  if (DEBUG) {    System.out.println("In JMenu.menuSelectionChanged to " + isIncluded);  }  setSelected(isIncluded);}  }
class C{  public void writeGraphics(Vector list,SColor lineColor,SColor fillColor) throws IOException {  SRect sr=new SRect(new LLPoint((float)y,(float)x),(short)-1,(short)-1,(short)1,(short)1);  sr.color(lineColor);  sr.fillColor(fillColor);  list.addElement(sr);}  }
class C{  public static InternetAddress parseEmail(Object value){  String str=Caster.toString(value,"");  if (str.indexOf('@') > -1) {    try {      InternetAddress addr=new InternetAddress(str);      fixIDN(addr);      return addr;    } catch (    AddressException ex) {    }  }  return null;}  }
class C{  public boolean isCustomProcName(){  return customProcName;}  }
class C{  public static void assertUpdateTolerantAddErrors(String assertionMsgPrefix,UpdateResponse response,String... errorIdsExpected){  ExpectedErr[] expected=new ExpectedErr[errorIdsExpected.length];  for (int i=0; i < expected.length; i++) {    expected[i]=addErr(errorIdsExpected[i]);  }  assertUpdateTolerantErrors(assertionMsgPrefix,response,expected);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public static String toHex(byte[] val,int start,int len){  StringBuilder buf=new StringBuilder();  for (int i=0; i < len; i++) {    byte b=val[start + i];    buf.append(DEC2HEX[(b & 0xf0) >> 4]);    buf.append(DEC2HEX[b & 0x0f]);  }  return buf.toString();}  }
class C{  @Override protected void loadChars(jmri.jmrix.AbstractMRReply msg,java.io.DataInputStream istream) throws java.io.IOException {  int i, char1;  i=0;  try {    while (i < msg.maxSize()) {      char1=istream.read();      if (char1 < 0) {        ((XnTcpAdapter)controller).xnTcpError();        throw new java.io.EOFException("Lost communication with XnTcp interface");      }      msg.setElement(i++,(byte)char1 & 0xFF);      log.debug("XnTcpNetPacketizer: received " + Integer.toHexString(char1 & 0xff));      if (endOfMessage(msg)) {        break;      }    }    ((XnTcpAdapter)controller).xnTcpSetPendingPackets(-1);    log.debug("XnTcpNetPacketizer: received end of packet");  } catch (  java.io.IOException ex) {    ((XnTcpAdapter)controller).xnTcpError();    throw ex;  }}  }
class C{  public ConfigurationException(final Throwable cause){  super(cause);}  }
class C{  public void updateWriteStats(OFMessage ofm){switch (ofm.getType()) {case BARRIER_REPLY:    ctrWriteBarrierReply.increment();  break;case BARRIER_REQUEST:ctrWriteBarrierRequest.increment();break;case ECHO_REPLY:ctrWriteEchoReply.increment();break;case ECHO_REQUEST:ctrWriteEchoRequest.increment();break;case ERROR:ctrWriteError.increment();break;case EXPERIMENTER:ctrWriteExperimenter.increment();break;case FEATURES_REPLY:ctrWriteFeaturesReply.increment();break;case FEATURES_REQUEST:ctrWriteFeaturesRequest.increment();break;case FLOW_MOD:ctrWriteFlowMod.increment();break;case FLOW_REMOVED:ctrWriteFlowRemoved.increment();break;case GET_ASYNC_REPLY:ctrWriteGetAsyncReply.increment();break;case GET_ASYNC_REQUEST:ctrWriteGetAsyncRequest.increment();break;case GET_CONFIG_REPLY:ctrWriteGetConfigReply.increment();break;case GET_CONFIG_REQUEST:ctrWriteGetConfigRequest.increment();break;case GROUP_MOD:ctrWriteGroupMod.increment();break;case HELLO:ctrWriteHello.increment();break;case METER_MOD:ctrWriteMeterMod.increment();break;case PACKET_IN:ctrWritePacketIn.increment();break;case PACKET_OUT:ctrWritePacketOut.increment();break;case PORT_MOD:ctrWritePortMod.increment();break;case PORT_STATUS:ctrWritePortStatus.increment();break;case QUEUE_GET_CONFIG_REPLY:ctrWriteQueueGetConfigReply.increment();break;case QUEUE_GET_CONFIG_REQUEST:ctrWriteQueueGetConfigRequest.increment();break;case ROLE_REPLY:ctrWriteRoleReply.increment();break;case ROLE_REQUEST:ctrWriteRoleRequest.increment();break;case SET_ASYNC:ctrWriteSetAsync.increment();break;case SET_CONFIG:ctrWriteSetConfig.increment();break;case STATS_REPLY:ctrWriteStatsReply.increment();break;case STATS_REQUEST:ctrWriteStatsRequest.increment();break;case TABLE_MOD:ctrWriteTableMod.increment();break;case BUNDLE_ADD_MESSAGE:ctrWriteBundleAdd.increment();break;case BUNDLE_CONTROL:ctrWriteBundleControl.increment();break;case REQUESTFORWARD:ctrWriteRequestForward.increment();break;case ROLE_STATUS:ctrWriteRoleStatus.increment();break;case TABLE_STATUS:ctrWriteTableStatus.increment();break;default :logger.warn(ofm.getType().toString() + ": Invalid OpenFlow Messaqe!");break;}}  }
class C{  public Image(double lat,double lon,int radius){  super(lat,lon,radius);}  }
class C{  public boolean isCapacityExceeded(LicenseInfoExt licenseInfo){  return false;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  @Override public void stop(boolean cancel){  for (  HadoopShuffleJob job : jobs.values()) {    try {      job.close();    } catch (    IgniteCheckedException e) {      U.error(log,"Failed to close job.",e);    }  }  jobs.clear();}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public RouteScripted(final Territory terr){  super(terr);}  }
class C{  public GapStatistic(){  this(new HamerlyKMeans());}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @Override public boolean isUpdatable(){  Iterator<Model> i=models.iterator();  while (i.hasNext()) {    if (!i.next().isUpdatable()) {      return false;    }  }  return true;}  }
class C{  public static void add(final ArrayList objects){  copiedObjects=objects;  fireClipboardChanged();}  }
class C{  public String paramString(){  String typeStr;switch (id) {case INVOCATION_DEFAULT:    typeStr="INVOCATION_DEFAULT";  break;default :typeStr="unknown type";}return typeStr + ",runnable=" + runnable+ ",notifier="+ notifier+ ",catchExceptions="+ catchExceptions+ ",when="+ when;}  }
class C{  public void close(){}  }
class C{  public PubsubFuture<Void> acknowledge(final String canonicalSubscriptionName,final List<String> ackIds){  final String path=canonicalSubscriptionName + ":acknowledge";  final AcknowledgeRequest req=AcknowledgeRequest.builder().ackIds(ackIds).build();  return post("acknowledge",path,req,Void.class);}  }
class C{  public static <NodeType extends IGraphNode<NodeType> & ISelectableNode>void selectSuccessorsOfSelection(final ISelectableGraph<NodeType> graph){  graph.selectNodes(getSuccessorsOfSelection(graph),true);}  }
class C{  public static double perimeter(SpatialComparable box){  final int dim=box.getDimensionality();  double perimeter=0.;  for (int i=0; i < dim; i++) {    perimeter+=box.getMax(i) - box.getMin(i);  }  return perimeter;}  }
class C{  public int dec(Object key){  int hash=key == null ? 0 : key.hashCode() & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if (e.hash == hash && (e.key == null && key == null || e.key != null && e.key.equals(key))) {      return e.value--;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  table[index]=new Entry(hash,key,-1,table[index]);  return 0;}  }
class C{  public void writeByteArray(int bits,byte[] arr) throws AccessException {  for (int i=0; i < arr.length; i++) {    int increment=Math.min(8,bits - (i << 3));    if (increment > 0) {      write(increment,(byte)(arr[i] >>> (8 - increment)));    }  }}  }
class C{  @Override public AgentAppController createController(){  return new EightPuzzleController();}  }
class C{  public InvalidHeaderValueException(){  super();}  }
class C{  public boolean hasInvalidBehavior(){  return checks != null && checks.hasInvalidBehavior();}  }
class C{  public DefaultClientConnectionOperator(SchemeRegistry schemes){  if (schemes == null) {    throw new IllegalArgumentException("Scheme registry must not be null.");  }  schemeRegistry=schemes;}  }
class C{  void extractFromRoadLinks(GeomVectorField roadLinks){  Bag geoms=roadLinks.getGeometries();  Envelope e=roadLinks.getMBR();  double xmin=e.getMinX(), ymin=e.getMinY(), xmax=e.getMaxX(), ymax=e.getMaxY();  int xcols=gridWidth - 1, ycols=gridHeight - 1;  for (  Object o : geoms) {    MasonGeometry gm=(MasonGeometry)o;    if (gm.getGeometry() instanceof LineString) {      readLineString((LineString)gm.getGeometry(),xcols,ycols,xmin,ymin,xmax,ymax);    } else     if (gm.getGeometry() instanceof MultiLineString) {      MultiLineString mls=(MultiLineString)gm.getGeometry();      for (int i=0; i < mls.getNumGeometries(); i++) {        readLineString((LineString)mls.getGeometryN(i),xcols,ycols,xmin,ymin,xmax,ymax);      }    }  }}  }
